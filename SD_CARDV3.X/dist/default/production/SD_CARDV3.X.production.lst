

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Jan 19 19:47:22 2022

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    76                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    82                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    83  0000                     
    84                           ; Version 1.45
    85                           ; Generated 16/11/2017 GMT
    86                           ; 
    87                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    88                           ; All rights reserved.
    89                           ; 
    90                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    91                           ; 
    92                           ; Redistribution and use in source and binary forms, with or without modification, are
    93                           ; permitted provided that the following conditions are met:
    94                           ; 
    95                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    96                           ;        conditions and the following disclaimer.
    97                           ; 
    98                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    99                           ;        of conditions and the following disclaimer in the documentation and/or other
   100                           ;        materials provided with the distribution.
   101                           ; 
   102                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   103                           ;        software without specific prior written permission.
   104                           ; 
   105                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   106                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   107                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   108                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   109                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   110                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   111                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   112                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   113                           ; 
   114                           ; 
   115                           ; Code-generator required, PIC18F4550 Definitions
   116                           ; 
   117                           ; SFR Addresses
   118  0000                     
   119                           	psect	idataBANK1
   120  0031BA                     __pidataBANK1:
   121                           	opt stack 0
   122                           
   123                           ;initializer for _fileName
   124  0031BA  63                 	db	99
   125  0031BB  68                 	db	104
   126  0031BC  65                 	db	101
   127  0031BD  63                 	db	99
   128  0031BE  6B                 	db	107
   129  0031BF  2E                 	db	46
   130  0031C0  74                 	db	116
   131  0031C1  78                 	db	120
   132  0031C2  74                 	db	116
   133  0031C3  00                 	db	0
   134                           
   135                           ;initializer for escreve_inteiro_lcd@F3966
   136  0031C4  30                 	db	48
   137  0031C5  30                 	db	48
   138  0031C6  30                 	db	48
   139  0031C7  30                 	db	48
   140  0031C8  30                 	db	48
   141  0031C9  30                 	db	48
   142  0031CA  00                 	db	0
   143                           
   144                           ;initializer for escreve_inteiro_uart@F3956
   145  0031CB  30                 	db	48
   146  0031CC  30                 	db	48
   147  0031CD  30                 	db	48
   148  0031CE  30                 	db	48
   149  0031CF  30                 	db	48
   150  0031D0  30                 	db	48
   151  0031D1  00                 	db	0
   152                           
   153                           	psect	mediumconst
   154  0060E6                     __pmediumconst:
   155                           	opt stack 0
   156  0060E6  00                 	db	0
   157  0060E7                     create_name@cvt:
   158                           	opt stack 0
   159  0060E7  80                 	db	128
   160  0060E8  9A                 	db	154
   161  0060E9  90                 	db	144
   162  0060EA  41                 	db	65
   163  0060EB  8E                 	db	142
   164  0060EC  41                 	db	65
   165  0060ED  8F                 	db	143
   166  0060EE  80                 	db	128
   167  0060EF  45                 	db	69
   168  0060F0  45                 	db	69
   169  0060F1  45                 	db	69
   170  0060F2  49                 	db	73
   171  0060F3  49                 	db	73
   172  0060F4  49                 	db	73
   173  0060F5  8E                 	db	142
   174  0060F6  8F                 	db	143
   175  0060F7  90                 	db	144
   176  0060F8  92                 	db	146
   177  0060F9  92                 	db	146
   178  0060FA  4F                 	db	79
   179  0060FB  99                 	db	153
   180  0060FC  4F                 	db	79
   181  0060FD  55                 	db	85
   182  0060FE  55                 	db	85
   183  0060FF  59                 	db	89
   184  006100  99                 	db	153
   185  006101  9A                 	db	154
   186  006102  9B                 	db	155
   187  006103  9C                 	db	156
   188  006104  9D                 	db	157
   189  006105  9E                 	db	158
   190  006106  9F                 	db	159
   191  006107  41                 	db	65
   192  006108  49                 	db	73
   193  006109  4F                 	db	79
   194  00610A  55                 	db	85
   195  00610B  A5                 	db	165
   196  00610C  A5                 	db	165
   197  00610D  A6                 	db	166
   198  00610E  A7                 	db	167
   199  00610F  A8                 	db	168
   200  006110  A9                 	db	169
   201  006111  AA                 	db	170
   202  006112  AB                 	db	171
   203  006113  AC                 	db	172
   204  006114  21                 	db	33
   205  006115  AE                 	db	174
   206  006116  AF                 	db	175
   207  006117  B0                 	db	176
   208  006118  B1                 	db	177
   209  006119  B2                 	db	178
   210  00611A  B3                 	db	179
   211  00611B  B4                 	db	180
   212  00611C  B5                 	db	181
   213  00611D  B6                 	db	182
   214  00611E  B7                 	db	183
   215  00611F  B8                 	db	184
   216  006120  B9                 	db	185
   217  006121  BA                 	db	186
   218  006122  BB                 	db	187
   219  006123  BC                 	db	188
   220  006124  BD                 	db	189
   221  006125  BE                 	db	190
   222  006126  BF                 	db	191
   223  006127  C0                 	db	192
   224  006128  C1                 	db	193
   225  006129  C2                 	db	194
   226  00612A  C3                 	db	195
   227  00612B  C4                 	db	196
   228  00612C  C5                 	db	197
   229  00612D  C6                 	db	198
   230  00612E  C7                 	db	199
   231  00612F  C8                 	db	200
   232  006130  C9                 	db	201
   233  006131  CA                 	db	202
   234  006132  CB                 	db	203
   235  006133  CC                 	db	204
   236  006134  CD                 	db	205
   237  006135  CE                 	db	206
   238  006136  CF                 	db	207
   239  006137  D0                 	db	208
   240  006138  D1                 	db	209
   241  006139  D2                 	db	210
   242  00613A  D3                 	db	211
   243  00613B  D4                 	db	212
   244  00613C  D5                 	db	213
   245  00613D  D6                 	db	214
   246  00613E  D7                 	db	215
   247  00613F  D8                 	db	216
   248  006140  D9                 	db	217
   249  006141  DA                 	db	218
   250  006142  DB                 	db	219
   251  006143  DC                 	db	220
   252  006144  DD                 	db	221
   253  006145  DE                 	db	222
   254  006146  DF                 	db	223
   255  006147  E0                 	db	224
   256  006148  E1                 	db	225
   257  006149  E2                 	db	226
   258  00614A  E3                 	db	227
   259  00614B  E4                 	db	228
   260  00614C  E5                 	db	229
   261  00614D  E6                 	db	230
   262  00614E  E7                 	db	231
   263  00614F  E8                 	db	232
   264  006150  E9                 	db	233
   265  006151  EA                 	db	234
   266  006152  EB                 	db	235
   267  006153  EC                 	db	236
   268  006154  ED                 	db	237
   269  006155  EE                 	db	238
   270  006156  EF                 	db	239
   271  006157  F0                 	db	240
   272  006158  F1                 	db	241
   273  006159  F2                 	db	242
   274  00615A  F3                 	db	243
   275  00615B  F4                 	db	244
   276  00615C  F5                 	db	245
   277  00615D  F6                 	db	246
   278  00615E  F7                 	db	247
   279  00615F  F8                 	db	248
   280  006160  F9                 	db	249
   281  006161  FA                 	db	250
   282  006162  FB                 	db	251
   283  006163  FC                 	db	252
   284  006164  FD                 	db	253
   285  006165  FE                 	db	254
   286  006166  FF                 	db	255
   287  006167                     __end_ofcreate_name@cvt:
   288                           	opt stack 0
   289  006167                     mensagem_inicial@F4031:
   290                           	opt stack 0
   291  006167  20                 	db	32
   292  006168  31                 	db	49
   293  006169  38                 	db	56
   294  00616A  2F                 	db	47
   295  00616B  30                 	db	48
   296  00616C  31                 	db	49
   297  00616D  2F                 	db	47
   298  00616E  32                 	db	50
   299  00616F  30                 	db	48
   300  006170  32                 	db	50
   301  006171  32                 	db	50
   302  006172  20                 	db	32
   303  006173  20                 	db	32
   304  006174  20                 	db	32
   305  006175  00                 	db	0
   306  006176  00                 	db	0
   307  006177  00                 	db	0
   308  006178                     __end_ofmensagem_inicial@F4031:
   309                           	opt stack 0
   310  006178                     mensagem_inicial@F4029:
   311                           	opt stack 0
   312  006178  53                 	db	83
   313  006179  44                 	db	68
   314  00617A  43                 	db	67
   315  00617B  61                 	db	97
   316  00617C  72                 	db	114
   317  00617D  64                 	db	100
   318  00617E  20                 	db	32
   319  00617F  49                 	db	73
   320  006180  6E                 	db	110
   321  006181  69                 	db	105
   322  006182  74                 	db	116
   323  006183  20                 	db	32
   324  006184  20                 	db	32
   325  006185  20                 	db	32
   326  006186  00                 	db	0
   327  006187  00                 	db	0
   328  006188  00                 	db	0
   329  006189                     __end_ofmensagem_inicial@F4029:
   330                           	opt stack 0
   331  006189                     leitura_chave@F3842:
   332                           	opt stack 0
   333  006189  20                 	db	32
   334  00618A  49                 	db	73
   335  00618B  67                 	db	103
   336  00618C  6E                 	db	110
   337  00618D  20                 	db	32
   338  00618E  4F                 	db	79
   339  00618F  6E                 	db	110
   340  006190  00                 	db	0
   341  006191  00                 	db	0
   342  006192  00                 	db	0
   343  006193  00                 	db	0
   344  006194  00                 	db	0
   345  006195  00                 	db	0
   346  006196  00                 	db	0
   347  006197  00                 	db	0
   348  006198  00                 	db	0
   349  006199  00                 	db	0
   350  00619A                     __end_ofleitura_chave@F3842:
   351                           	opt stack 0
   352  00619A                     leitura_chave@F3840:
   353                           	opt stack 0
   354  00619A  20                 	db	32
   355  00619B  49                 	db	73
   356  00619C  67                 	db	103
   357  00619D  6E                 	db	110
   358  00619E  20                 	db	32
   359  00619F  43                 	db	67
   360  0061A0  72                 	db	114
   361  0061A1  61                 	db	97
   362  0061A2  6E                 	db	110
   363  0061A3  6B                 	db	107
   364  0061A4  00                 	db	0
   365  0061A5  00                 	db	0
   366  0061A6  00                 	db	0
   367  0061A7  00                 	db	0
   368  0061A8  00                 	db	0
   369  0061A9  00                 	db	0
   370  0061AA  00                 	db	0
   371  0061AB                     __end_ofleitura_chave@F3840:
   372                           	opt stack 0
   373  0061AB                     leitura_chave@F3838:
   374                           	opt stack 0
   375  0061AB  20                 	db	32
   376  0061AC  49                 	db	73
   377  0061AD  67                 	db	103
   378  0061AE  6E                 	db	110
   379  0061AF  20                 	db	32
   380  0061B0  4F                 	db	79
   381  0061B1  66                 	db	102
   382  0061B2  66                 	db	102
   383  0061B3  00                 	db	0
   384  0061B4  00                 	db	0
   385  0061B5  00                 	db	0
   386  0061B6  00                 	db	0
   387  0061B7  00                 	db	0
   388  0061B8  00                 	db	0
   389  0061B9  00                 	db	0
   390  0061BA  00                 	db	0
   391  0061BB  00                 	db	0
   392  0061BC                     __end_ofleitura_chave@F3838:
   393                           	opt stack 0
   394  0000                     _PORTDbits	set	3971
   395  0000                     _TRISDbits	set	3989
   396  0000                     _PCL	set	4089
   397  0000                     _PCLATH	set	4090
   398  0000                     _RCSTA	set	4011
   399  0000                     _TXSTA	set	4012
   400  0000                     _RCREG	set	4014
   401  0000                     _RCSTAbits	set	4011
   402  0000                     _TXREG	set	4013
   403  0000                     _SPBRG	set	4015
   404  0000                     _PR2	set	4043
   405  0000                     _TMR2	set	4044
   406  0000                     _T2CON	set	4042
   407  0000                     _OSCCONbits	set	4051
   408  0000                     _TRISE	set	3990
   409  0000                     _TRISC	set	3988
   410  0000                     _TRISA	set	3986
   411  0000                     _TRISD	set	3989
   412  0000                     _LATB	set	3978
   413  0000                     _TRISB	set	3987
   414  0000                     _T0CONbits	set	4053
   415  0000                     _TMR0L	set	4054
   416  0000                     _TMR0H	set	4055
   417  0000                     _RCONbits	set	4048
   418  0000                     _IPR1bits	set	3999
   419  0000                     _PIE1bits	set	3997
   420  0000                     _PIE1	set	3997
   421  0000                     _INTCON3	set	4080
   422  0000                     _INTCON2	set	4081
   423  0000                     _INTCON	set	4082
   424  0000                     _SPPCFG	set	3939
   425  0000                     _SPPCON	set	3941
   426  0000                     _T0CON	set	4053
   427  0000                     _PORTEbits	set	3972
   428  0000                     _PORTAbits	set	3968
   429  0000                     _PORTCbits	set	3970
   430  0000                     _ADRESL	set	4035
   431  0000                     _ADRESH	set	4036
   432  0000                     _ADCON0	set	4034
   433  0000                     _ADCON0bits	set	4034
   434  0000                     _ADCON2bits	set	4032
   435  0000                     _ADCON1bits	set	4033
   436  0000                     _ADCON1	set	4033
   437  0000                     _SSPBUF	set	4041
   438  0000                     _PIR1bits	set	3998
   439  0000                     _TRISCbits	set	3988
   440  0000                     _SSPSTATbits	set	4039
   441  0000                     _TRISBbits	set	3987
   442  0000                     _SSPCON1	set	4038
   443  0000                     _SSPSTAT	set	4039
   444  0000                     _SSPCON1bits	set	4038
   445  0000                     _INTCONbits	set	4082
   446  0000                     _LATBbits	set	3978
   447  0000                     _INT0IE	set	32660
   448  0000                     _INT0IF	set	32657
   449  0000                     _T0IF	set	32658
   450  0000                     _TMR0IF	set	32658
   451  0000                     _RCIF	set	31989
   452  0000                     _TRMT	set	32097
   453  0000                     _TXEN	set	32101
   454  0000                     _CREN	set	32092
   455  0000                     _SPEN	set	32095
   456  0000                     _SYNC	set	32100
   457  0000                     _BRGH	set	32098
   458  0000                     _TMR2IF	set	31985
   459  0061BC                     STR_8:
   460  0061BC  73                 	db	115	;'s'
   461  0061BD  79                 	db	121	;'y'
   462  0061BE  73                 	db	115	;'s'
   463  0061BF  74                 	db	116	;'t'
   464  0061C0  20                 	db	32
   465  0061C1  69                 	db	105	;'i'
   466  0061C2  6E                 	db	110	;'n'
   467  0061C3  69                 	db	105	;'i'
   468  0061C4  63                 	db	99	;'c'
   469  0061C5  69                 	db	105	;'i'
   470  0061C6  61                 	db	97	;'a'
   471  0061C7  6C                 	db	108	;'l'
   472  0061C8  69                 	db	105	;'i'
   473  0061C9  7A                 	db	122	;'z'
   474  0061CA  65                 	db	101	;'e'
   475  0061CB  64                 	db	100	;'d'
   476  0061CC  00                 	db	0
   477  0061CD                     STR_3:
   478  0061CD  53                 	db	83	;'S'
   479  0061CE  50                 	db	80	;'P'
   480  0061CF  49                 	db	73	;'I'
   481  0061D0  20                 	db	32
   482  0061D1  63                 	db	99	;'c'
   483  0061D2  6F                 	db	111	;'o'
   484  0061D3  6E                 	db	110	;'n'
   485  0061D4  66                 	db	102	;'f'
   486  0061D5  69                 	db	105	;'i'
   487  0061D6  67                 	db	103	;'g'
   488  0061D7  75                 	db	117	;'u'
   489  0061D8  72                 	db	114	;'r'
   490  0061D9  61                 	db	97	;'a'
   491  0061DA  64                 	db	100	;'d'
   492  0061DB  61                 	db	97	;'a'
   493  0061DC  21                 	db	33
   494  0061DD  00                 	db	0
   495  0061DE                     STR_7:
   496  0061DE  6D                 	db	109	;'m'
   497  0061DF  6F                 	db	111	;'o'
   498  0061E0  75                 	db	117	;'u'
   499  0061E1  6E                 	db	110	;'n'
   500  0061E2  74                 	db	116	;'t'
   501  0061E3  20                 	db	32
   502  0061E4  66                 	db	102	;'f'
   503  0061E5  69                 	db	105	;'i'
   504  0061E6  6C                 	db	108	;'l'
   505  0061E7  65                 	db	101	;'e'
   506  0061E8  20                 	db	32
   507  0061E9  73                 	db	115	;'s'
   508  0061EA  79                 	db	121	;'y'
   509  0061EB  73                 	db	115	;'s'
   510  0061EC  00                 	db	0
   511  0061ED                     STR_15:
   512  0061ED  74                 	db	116	;'t'
   513  0061EE  72                 	db	114	;'r'
   514  0061EF  61                 	db	97	;'a'
   515  0061F0  76                 	db	118	;'v'
   516  0061F1  6F                 	db	111	;'o'
   517  0061F2  75                 	db	117	;'u'
   518  0061F3  20                 	db	32
   519  0061F4  61                 	db	97	;'a'
   520  0061F5  71                 	db	113	;'q'
   521  0061F6  75                 	db	117	;'u'
   522  0061F7  69                 	db	105	;'i'
   523  0061F8  20                 	db	32
   524  0061F9  32                 	db	50	;'2'
   525  0061FA  00                 	db	0
   526  0061FB                     STR_16:
   527  0061FB  43                 	db	67	;'C'
   528  0061FC  61                 	db	97	;'a'
   529  0061FD  72                 	db	114	;'r'
   530  0061FE  74                 	db	116	;'t'
   531  0061FF  E3                 	db	-29
   532  006200  6F                 	db	111	;'o'
   533  006201  20                 	db	32
   534  006202  41                 	db	65	;'A'
   535  006203  63                 	db	99	;'c'
   536  006204  65                 	db	101	;'e'
   537  006205  69                 	db	105	;'i'
   538  006206  74                 	db	116	;'t'
   539  006207  6F                 	db	111	;'o'
   540  006208  00                 	db	0
   541  006209                     STR_6:
   542  006209  20                 	db	32
   543  00620A  20                 	db	32
   544  00620B  20                 	db	32
   545  00620C  20                 	db	32
   546  00620D  20                 	db	32
   547  00620E  20                 	db	32
   548  00620F  20                 	db	32
   549  006210  20                 	db	32
   550  006211  20                 	db	32
   551  006212  20                 	db	32
   552  006213  20                 	db	32
   553  006214  20                 	db	32
   554  006215  20                 	db	32
   555  006216  00                 	db	0
   556  006217                     STR_5:
   557  006217  41                 	db	65	;'A'
   558  006218  74                 	db	116	;'t'
   559  006219  74                 	db	116	;'t'
   560  00621A  65                 	db	101	;'e'
   561  00621B  6D                 	db	109	;'m'
   562  00621C  70                 	db	112	;'p'
   563  00621D  74                 	db	116	;'t'
   564  00621E  69                 	db	105	;'i'
   565  00621F  6E                 	db	110	;'n'
   566  006220  67                 	db	103	;'g'
   567  006221  20                 	db	32
   568  006222  74                 	db	116	;'t'
   569  006223  6F                 	db	111	;'o'
   570  006224  00                 	db	0
   571  006225                     STR_13:
   572  006225  6C                 	db	108	;'l'
   573  006226  65                 	db	101	;'e'
   574  006227  6E                 	db	110	;'n'
   575  006228  64                 	db	100	;'d'
   576  006229  6F                 	db	111	;'o'
   577  00622A  20                 	db	32
   578  00622B  61                 	db	97	;'a'
   579  00622C  72                 	db	114	;'r'
   580  00622D  71                 	db	113	;'q'
   581  00622E  75                 	db	117	;'u'
   582  00622F  69                 	db	105	;'i'
   583  006230  76                 	db	118	;'v'
   584  006231  6F                 	db	111	;'o'
   585  006232  00                 	db	0
   586  006233                     STR_12:
   587  006233  53                 	db	83	;'S'
   588  006234  44                 	db	68	;'D'
   589  006235  43                 	db	67	;'C'
   590  006236  61                 	db	97	;'a'
   591  006237  72                 	db	114	;'r'
   592  006238  64                 	db	100	;'d'
   593  006239  20                 	db	32
   594  00623A  65                 	db	101	;'e'
   595  00623B  72                 	db	114	;'r'
   596  00623C  72                 	db	114	;'r'
   597  00623D  6F                 	db	111	;'o'
   598  00623E  72                 	db	114	;'r'
   599  00623F  00                 	db	0
   600  006240                     STR_14:
   601  006240  74                 	db	116	;'t'
   602  006241  72                 	db	114	;'r'
   603  006242  61                 	db	97	;'a'
   604  006243  76                 	db	118	;'v'
   605  006244  6F                 	db	111	;'o'
   606  006245  75                 	db	117	;'u'
   607  006246  20                 	db	32
   608  006247  61                 	db	97	;'a'
   609  006248  71                 	db	113	;'q'
   610  006249  75                 	db	117	;'u'
   611  00624A  69                 	db	105	;'i'
   612  00624B  00                 	db	0
   613  00624C                     STR_1:
   614  00624C  41                 	db	65	;'A'
   615  00624D  41                 	db	65	;'A'
   616  00624E  41                 	db	65	;'A'
   617  00624F  41                 	db	65	;'A'
   618  006250  41                 	db	65	;'A'
   619  006251  41                 	db	65	;'A'
   620  006252  41                 	db	65	;'A'
   621  006253  41                 	db	65	;'A'
   622  006254  41                 	db	65	;'A'
   623  006255  41                 	db	65	;'A'
   624  006256  00                 	db	0
   625  006257                     STR_9:
   626  006257  63                 	db	99	;'c'
   627  006258  68                 	db	104	;'h'
   628  006259  65                 	db	101	;'e'
   629  00625A  63                 	db	99	;'c'
   630  00625B  6B                 	db	107	;'k'
   631  00625C  2E                 	db	46
   632  00625D  74                 	db	116	;'t'
   633  00625E  78                 	db	120	;'x'
   634  00625F  74                 	db	116	;'t'
   635  006260  00                 	db	0
   636  006261                     STR_2:
   637  006261  4F                 	db	79	;'O'
   638  006262  4F                 	db	79	;'O'
   639  006263  4F                 	db	79	;'O'
   640  006264  4F                 	db	79	;'O'
   641  006265  4F                 	db	79	;'O'
   642  006266  4F                 	db	79	;'O'
   643  006267  4F                 	db	79	;'O'
   644  006268  4F                 	db	79	;'O'
   645  006269  4F                 	db	79	;'O'
   646  00626A  00                 	db	0
   647  00626B                     STR_17:
   648  00626B  45                 	db	69	;'E'
   649  00626C  72                 	db	114	;'r'
   650  00626D  72                 	db	114	;'r'
   651  00626E  6F                 	db	111	;'o'
   652  00626F  72                 	db	114	;'r'
   653  006270  21                 	db	33
   654  006271  21                 	db	33
   655  006272  21                 	db	33
   656  006273  00                 	db	0
   657  006274                     STR_10:
   658  006274  53                 	db	83	;'S'
   659  006275  44                 	db	68	;'D'
   660  006276  5F                 	db	95	;'_'
   661  006277  43                 	db	67	;'C'
   662  006278  61                 	db	97	;'a'
   663  006279  72                 	db	114	;'r'
   664  00627A  64                 	db	100	;'d'
   665  00627B  00                 	db	0
   666  00627C  0D                 	db	13
   667  00627D  0A                 	db	10
   668  00627E  00                 	db	0
   669  0000                     
   670                           ; #config settings
   671  00627F  00                 	db	0	; dummy byte at the end
   672  0000                     
   673                           	psect	cinit
   674  002DDA                     __pcinit:
   675                           	opt stack 0
   676  002DDA                     start_initialization:
   677                           	opt stack 0
   678  002DDA                     __initialization:
   679                           	opt stack 0
   680                           
   681                           ; Initialize objects allocated to BANK1 (24 bytes)
   682                           ; load TBLPTR registers with __pidataBANK1
   683  002DDA  0EBA               	movlw	low __pidataBANK1
   684  002DDC  6EF6               	movwf	tblptrl,c
   685  002DDE  0E31               	movlw	high __pidataBANK1
   686  002DE0  6EF7               	movwf	tblptrh,c
   687  002DE2  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   688  002DE4  6EF8               	movwf	tblptru,c
   689  002DE6  EE01  F0DB         	lfsr	0,__pdataBANK1
   690  002DEA  EE10 F018          	lfsr	1,24
   691  002DEE                     copy_data0:
   692  002DEE  0009               	tblrd		*+
   693  002DF0  CFF5 FFEE          	movff	tablat,postinc0
   694  002DF4  50E5               	movf	postdec1,w,c
   695  002DF6  50E1               	movf	fsr1l,w,c
   696  002DF8  E1FA               	bnz	copy_data0
   697                           
   698                           ; Clear objects allocated to BIGRAM (512 bytes)
   699  002DFA  EE01  F0F3         	lfsr	0,__pbssBIGRAM
   700  002DFE  EE12 F000          	lfsr	1,512
   701  002E02                     clear_0:
   702  002E02  6AEE               	clrf	postinc0,c
   703  002E04  50E5               	movf	postdec1,w,c
   704  002E06  50E1               	movf	fsr1l,w,c
   705  002E08  E1FC               	bnz	clear_0
   706  002E0A  50E2               	movf	fsr1h,w,c
   707  002E0C  E1FA               	bnz	clear_0
   708                           
   709                           ; Clear objects allocated to BANK1 (111 bytes)
   710  002E0E  EE01  F000         	lfsr	0,__pbssBANK1
   711  002E12  0E6F               	movlw	111
   712  002E14                     clear_1:
   713  002E14  6AEE               	clrf	postinc0,c
   714  002E16  06E8               	decf	wreg,f,c
   715  002E18  E1FD               	bnz	clear_1
   716                           
   717                           ; Clear objects allocated to BANK0 (4 bytes)
   718  002E1A  0100               	movlb	0
   719  002E1C  6BD8               	clrf	(__pbssBANK0+3)& (0+255),b
   720  002E1E  6BD7               	clrf	(__pbssBANK0+2)& (0+255),b
   721  002E20  6BD6               	clrf	(__pbssBANK0+1)& (0+255),b
   722  002E22  6BD5               	clrf	__pbssBANK0& (0+255),b
   723                           
   724                           ; Clear objects allocated to COMRAM (25 bytes)
   725  002E24  EE00  F02D         	lfsr	0,__pbssCOMRAM
   726  002E28  0E19               	movlw	25
   727  002E2A                     clear_2:
   728  002E2A  6AEE               	clrf	postinc0,c
   729  002E2C  06E8               	decf	wreg,f,c
   730  002E2E  E1FD               	bnz	clear_2
   731  002E30                     end_of_initialization:
   732                           	opt stack 0
   733  002E30                     __end_of__initialization:
   734                           	opt stack 0
   735  002E30  9046               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   736  002E32  9246               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   737  002E34  0E00               	movlw	low (__Lmediumconst shr (0+16))
   738  002E36  6EF8               	movwf	tblptru,c
   739  002E38  0100               	movlb	0
   740  002E3A  EF03  F018         	goto	_main	;jump to C main() function
   741                           tblptru	equ	0xFF8
   742                           tblptrh	equ	0xFF7
   743                           tblptrl	equ	0xFF6
   744                           tablat	equ	0xFF5
   745                           postinc0	equ	0xFEE
   746                           wreg	equ	0xFE8
   747                           postdec1	equ	0xFE5
   748                           fsr1h	equ	0xFE2
   749                           fsr1l	equ	0xFE1
   750                           
   751                           	psect	bssCOMRAM
   752  00002D                     __pbssCOMRAM:
   753                           	opt stack 0
   754  00002D                     _tempo_tarefa:
   755                           	opt stack 0
   756  00002D                     	ds	4
   757  000031                     _fileSize:
   758                           	opt stack 0
   759  000031                     	ds	4
   760  000035                     _FatFs:
   761                           	opt stack 0
   762  000035                     	ds	2
   763  000037                     _timeout_tarefa:
   764                           	opt stack 0
   765  000037                     	ds	2
   766  000039                     _rd:
   767                           	opt stack 0
   768  000039                     	ds	2
   769  00003B                     _flag:
   770                           	opt stack 0
   771  00003B                     	ds	2
   772  00003D                     acende_led4@flag:
   773                           	opt stack 0
   774  00003D                     	ds	1
   775  00003E                     _tarefa_em_execucao:
   776                           	opt stack 0
   777  00003E                     	ds	1
   778  00003F                     _sinaliza_int_timer:
   779                           	opt stack 0
   780  00003F                     	ds	1
   781  000040                     _data_uart_recebe:
   782                           	opt stack 0
   783  000040                     	ds	1
   784  000041                     _s:
   785                           	opt stack 0
   786  000041                     	ds	1
   787  000042                     _Result:
   788                           	opt stack 0
   789  000042                     	ds	1
   790  000043                     timer_dois@flag:
   791                           	opt stack 0
   792  000043                     	ds	1
   793  000044                     _estado:
   794                           	opt stack 0
   795  000044                     	ds	1
   796  000045                     _dado:
   797                           	opt stack 0
   798  000045                     	ds	1
   799                           tblptru	equ	0xFF8
   800                           tblptrh	equ	0xFF7
   801                           tblptrl	equ	0xFF6
   802                           tablat	equ	0xFF5
   803                           postinc0	equ	0xFEE
   804                           wreg	equ	0xFE8
   805                           postdec1	equ	0xFE5
   806                           fsr1h	equ	0xFE2
   807                           fsr1l	equ	0xFE1
   808                           
   809                           	psect	bssBANK0
   810  0000D5                     __pbssBANK0:
   811                           	opt stack 0
   812  0000D5                     _p_tarefas:
   813                           	opt stack 0
   814  0000D5                     	ds	4
   815                           tblptru	equ	0xFF8
   816                           tblptrh	equ	0xFF7
   817                           tblptrl	equ	0xFF6
   818                           tablat	equ	0xFF5
   819                           postinc0	equ	0xFEE
   820                           wreg	equ	0xFE8
   821                           postdec1	equ	0xFE5
   822                           fsr1h	equ	0xFE2
   823                           fsr1l	equ	0xFE1
   824                           
   825                           	psect	bssBANK1
   826  000100                     __pbssBANK1:
   827                           	opt stack 0
   828  000100                     _folder:
   829                           	opt stack 0
   830  000100                     	ds	48
   831  000130                     _txt:
   832                           	opt stack 0
   833  000130                     	ds	20
   834  000144                     _info_chaves:
   835                           	opt stack 0
   836  000144                     	ds	7
   837  00014B                     _tempo_backup:
   838                           	opt stack 0
   839  00014B                     	ds	4
   840  00014F                     _data_buffer_32:
   841                           	opt stack 0
   842  00014F                     	ds	32
   843                           tblptru	equ	0xFF8
   844                           tblptrh	equ	0xFF7
   845                           tblptrl	equ	0xFF6
   846                           tablat	equ	0xFF5
   847                           postinc0	equ	0xFEE
   848                           wreg	equ	0xFE8
   849                           postdec1	equ	0xFE5
   850                           fsr1h	equ	0xFE2
   851                           fsr1l	equ	0xFE1
   852                           
   853                           	psect	dataBANK1
   854  0001DB                     __pdataBANK1:
   855                           	opt stack 0
   856  0001DB                     _fileName:
   857                           	opt stack 0
   858  0001DB                     	ds	10
   859  0001E5                     escreve_inteiro_lcd@F3966:
   860                           	opt stack 0
   861  0001E5                     	ds	7
   862  0001EC                     escreve_inteiro_uart@F3956:
   863                           	opt stack 0
   864  0001EC                     	ds	7
   865                           tblptru	equ	0xFF8
   866                           tblptrh	equ	0xFF7
   867                           tblptrl	equ	0xFF6
   868                           tablat	equ	0xFF5
   869                           postinc0	equ	0xFEE
   870                           wreg	equ	0xFE8
   871                           postdec1	equ	0xFE5
   872                           fsr1h	equ	0xFE2
   873                           fsr1l	equ	0xFE1
   874                           
   875                           	psect	bssBIGRAM
   876  0001F3                     __pbssBIGRAM:
   877                           	opt stack 0
   878  0001F3                     disk_readp@arr:
   879                           	opt stack 0
   880  0001F3                     	ds	512
   881                           tblptru	equ	0xFF8
   882                           tblptrh	equ	0xFF7
   883                           tblptrl	equ	0xFF6
   884                           tablat	equ	0xFF5
   885                           postinc0	equ	0xFEE
   886                           wreg	equ	0xFE8
   887                           postdec1	equ	0xFE5
   888                           fsr1h	equ	0xFE2
   889                           fsr1l	equ	0xFE1
   890                           
   891                           	psect	cstackBANK1
   892  00016F                     __pcstackBANK1:
   893                           	opt stack 0
   894  00016F                     pf_open@sp:
   895                           	opt stack 0
   896                           
   897                           ; 12 bytes @ 0x0
   898  00016F                     	ds	12
   899  00017B                     pf_open@dir:
   900                           	opt stack 0
   901                           
   902                           ; 32 bytes @ 0xC
   903  00017B                     	ds	32
   904  00019B                     pf_open@res:
   905                           	opt stack 0
   906                           
   907                           ; 1 bytes @ 0x2C
   908  00019B                     	ds	1
   909  00019C                     pf_open@fs:
   910                           	opt stack 0
   911                           
   912                           ; 2 bytes @ 0x2D
   913  00019C                     	ds	2
   914  00019E                     pf_open@dj:
   915                           	opt stack 0
   916                           
   917                           ; 16 bytes @ 0x2F
   918  00019E                     	ds	16
   919  0001AE                     SDCard@FResult:
   920                           	opt stack 0
   921                           
   922                           ; 1 bytes @ 0x3F
   923  0001AE                     	ds	1
   924  0001AF                     SDCard@br:
   925                           	opt stack 0
   926                           
   927                           ; 2 bytes @ 0x40
   928  0001AF                     	ds	2
   929  0001B1                     SDCard@fs:
   930                           	opt stack 0
   931                           
   932                           ; 42 bytes @ 0x42
   933  0001B1                     	ds	42
   934                           tblptru	equ	0xFF8
   935                           tblptrh	equ	0xFF7
   936                           tblptrl	equ	0xFF6
   937                           tablat	equ	0xFF5
   938                           postinc0	equ	0xFEE
   939                           wreg	equ	0xFE8
   940                           postdec1	equ	0xFE5
   941                           fsr1h	equ	0xFE2
   942                           fsr1l	equ	0xFE1
   943                           
   944                           	psect	cstackBANK0
   945  000060                     __pcstackBANK0:
   946                           	opt stack 0
   947  000060                     ??_configura_baudrate_uart:
   948  000060                     ??_disk_initialize:
   949  000060                     ??_clust2sect:
   950  000060                     create_name@d:
   951                           	opt stack 0
   952  000060                     disk_readp@rd:
   953                           	opt stack 0
   954  000060                     disk_writep@wr:
   955                           	opt stack 0
   956  000060                     mensagem_inicial@msg_linha_um:
   957                           	opt stack 0
   958                           
   959                           ; 17 bytes @ 0x0
   960  000060                     	ds	1
   961  000061                     create_name@p:
   962                           	opt stack 0
   963                           
   964                           ; 2 bytes @ 0x1
   965  000061                     	ds	1
   966  000062                     disk_initialize@i:
   967                           	opt stack 0
   968  000062                     disk_readp@sector:
   969                           	opt stack 0
   970                           
   971                           ; 4 bytes @ 0x2
   972  000062                     	ds	1
   973  000063                     create_name@ni:
   974                           	opt stack 0
   975  000063                     disk_writep@sc:
   976                           	opt stack 0
   977                           
   978                           ; 4 bytes @ 0x3
   979  000063                     	ds	1
   980  000064                     create_name@si:
   981                           	opt stack 0
   982  000064                     disk_initialize@count1:
   983                           	opt stack 0
   984                           
   985                           ; 2 bytes @ 0x4
   986  000064                     	ds	1
   987  000065                     dir_rewind@dj:
   988                           	opt stack 0
   989  000065                     create_name@sfn:
   990                           	opt stack 0
   991                           
   992                           ; 2 bytes @ 0x5
   993  000065                     	ds	1
   994  000066                     disk_initialize@stat:
   995                           	opt stack 0
   996  000066                     disk_readp@offset:
   997                           	opt stack 0
   998                           
   999                           ; 2 bytes @ 0x6
  1000  000066                     	ds	1
  1001  000067                     create_name@i:
  1002                           	opt stack 0
  1003  000067                     disk_initialize@count2:
  1004                           	opt stack 0
  1005  000067                     disk_writep@i:
  1006                           	opt stack 0
  1007                           
  1008                           ; 2 bytes @ 0x7
  1009  000067                     	ds	1
  1010  000068                     create_name@c:
  1011                           	opt stack 0
  1012  000068                     configura_baudrate_uart@x:
  1013                           	opt stack 0
  1014  000068                     disk_readp@count:
  1015                           	opt stack 0
  1016                           
  1017                           ; 2 bytes @ 0x8
  1018  000068                     	ds	1
  1019  000069                     disk_initialize@buff:
  1020                           	opt stack 0
  1021  000069                     disk_writep@j:
  1022                           	opt stack 0
  1023                           
  1024                           ; 2 bytes @ 0x9
  1025  000069                     	ds	1
  1026  00006A                     disk_readp@ptr:
  1027                           	opt stack 0
  1028                           
  1029                           ; 1 bytes @ 0xA
  1030  00006A                     	ds	1
  1031  00006B                     disk_writep@buff:
  1032                           	opt stack 0
  1033  00006B                     disk_readp@start_add:
  1034                           	opt stack 0
  1035  00006B                     _dir_rewind$2022:
  1036                           	opt stack 0
  1037                           
  1038                           ; 4 bytes @ 0xB
  1039  00006B                     	ds	4
  1040  00006F                     disk_readp@buff:
  1041                           	opt stack 0
  1042  00006F                     dir_rewind@fs:
  1043                           	opt stack 0
  1044                           
  1045                           ; 2 bytes @ 0xF
  1046  00006F                     	ds	1
  1047  000070                     disk_readp@length:
  1048                           	opt stack 0
  1049                           
  1050                           ; 2 bytes @ 0x10
  1051  000070                     	ds	1
  1052  000071                     dir_rewind@clst:
  1053                           	opt stack 0
  1054  000071                     mensagem_inicial@msg_dois:
  1055                           	opt stack 0
  1056                           
  1057                           ; 17 bytes @ 0x11
  1058  000071                     	ds	1
  1059  000072                     ?_get_fat:
  1060                           	opt stack 0
  1061  000072                     check_fs@buf:
  1062                           	opt stack 0
  1063  000072                     get_fat@clst:
  1064                           	opt stack 0
  1065                           
  1066                           ; 4 bytes @ 0x12
  1067  000072                     	ds	2
  1068  000074                     check_fs@sect:
  1069                           	opt stack 0
  1070                           
  1071                           ; 4 bytes @ 0x14
  1072  000074                     	ds	2
  1073  000076                     ??_get_fat:
  1074                           
  1075                           ; 1 bytes @ 0x16
  1076  000076                     	ds	2
  1077  000078                     ??_check_fs:
  1078                           
  1079                           ; 1 bytes @ 0x18
  1080  000078                     	ds	4
  1081  00007C                     pf_mount@fs:
  1082                           	opt stack 0
  1083                           
  1084                           ; 2 bytes @ 0x1C
  1085  00007C                     	ds	2
  1086  00007E                     ??_pf_mount:
  1087                           
  1088                           ; 1 bytes @ 0x1E
  1089  00007E                     	ds	14
  1090  00008C                     _get_fat$1962:
  1091                           	opt stack 0
  1092                           
  1093                           ; 2 bytes @ 0x2C
  1094  00008C                     	ds	2
  1095  00008E                     get_fat@wc:
  1096                           	opt stack 0
  1097                           
  1098                           ; 2 bytes @ 0x2E
  1099  00008E                     	ds	2
  1100  000090                     get_fat@ofs:
  1101                           	opt stack 0
  1102                           
  1103                           ; 2 bytes @ 0x30
  1104  000090                     	ds	2
  1105  000092                     get_fat@buf:
  1106                           	opt stack 0
  1107                           
  1108                           ; 4 bytes @ 0x32
  1109  000092                     	ds	2
  1110  000094                     pf_mount@buf:
  1111                           	opt stack 0
  1112                           
  1113                           ; 36 bytes @ 0x34
  1114  000094                     	ds	2
  1115  000096                     get_fat@bc:
  1116                           	opt stack 0
  1117                           
  1118                           ; 2 bytes @ 0x36
  1119  000096                     	ds	2
  1120  000098                     get_fat@fs:
  1121                           	opt stack 0
  1122                           
  1123                           ; 2 bytes @ 0x38
  1124  000098                     	ds	2
  1125  00009A                     dir_next@dj:
  1126                           	opt stack 0
  1127  00009A                     pf_read@buff:
  1128                           	opt stack 0
  1129  00009A                     pf_write@buff:
  1130                           	opt stack 0
  1131                           
  1132                           ; 2 bytes @ 0x3A
  1133  00009A                     	ds	2
  1134  00009C                     ??_dir_next:
  1135  00009C                     pf_read@btr:
  1136                           	opt stack 0
  1137  00009C                     pf_write@btw:
  1138                           	opt stack 0
  1139                           
  1140                           ; 2 bytes @ 0x3C
  1141  00009C                     	ds	2
  1142  00009E                     pf_read@br:
  1143                           	opt stack 0
  1144  00009E                     pf_write@bw:
  1145                           	opt stack 0
  1146                           
  1147                           ; 2 bytes @ 0x3E
  1148  00009E                     	ds	2
  1149  0000A0                     ??_pf_write:
  1150  0000A0                     ??_pf_read:
  1151                           
  1152                           ; 1 bytes @ 0x40
  1153  0000A0                     	ds	3
  1154  0000A3                     dir_next@fs:
  1155                           	opt stack 0
  1156                           
  1157                           ; 2 bytes @ 0x43
  1158  0000A3                     	ds	2
  1159  0000A5                     dir_next@clst:
  1160                           	opt stack 0
  1161                           
  1162                           ; 4 bytes @ 0x45
  1163  0000A5                     	ds	3
  1164  0000A8                     pf_read@dr:
  1165                           	opt stack 0
  1166  0000A8                     pf_write@p:
  1167                           	opt stack 0
  1168                           
  1169                           ; 2 bytes @ 0x48
  1170  0000A8                     	ds	1
  1171  0000A9                     dir_next@i:
  1172                           	opt stack 0
  1173  0000A9                     pf_read@rbuff:
  1174                           	opt stack 0
  1175                           
  1176                           ; 2 bytes @ 0x49
  1177  0000A9                     	ds	1
  1178  0000AA                     pf_write@sect:
  1179                           	opt stack 0
  1180                           
  1181                           ; 4 bytes @ 0x4A
  1182  0000AA                     	ds	1
  1183  0000AB                     dir_find@dj:
  1184                           	opt stack 0
  1185  0000AB                     _pf_read$2216:
  1186                           	opt stack 0
  1187                           
  1188                           ; 2 bytes @ 0x4B
  1189  0000AB                     	ds	2
  1190  0000AD                     dir_find@dir:
  1191                           	opt stack 0
  1192  0000AD                     pf_read@sect:
  1193                           	opt stack 0
  1194                           
  1195                           ; 4 bytes @ 0x4D
  1196  0000AD                     	ds	1
  1197  0000AE                     pf_write@remain:
  1198                           	opt stack 0
  1199                           
  1200                           ; 4 bytes @ 0x4E
  1201  0000AE                     	ds	1
  1202  0000AF                     ??_dir_find:
  1203                           
  1204                           ; 1 bytes @ 0x4F
  1205  0000AF                     	ds	2
  1206  0000B1                     dir_find@c:
  1207                           	opt stack 0
  1208  0000B1                     pf_read@remain:
  1209                           	opt stack 0
  1210                           
  1211                           ; 4 bytes @ 0x51
  1212  0000B1                     	ds	1
  1213  0000B2                     dir_find@res:
  1214                           	opt stack 0
  1215  0000B2                     pf_write@clst:
  1216                           	opt stack 0
  1217                           
  1218                           ; 4 bytes @ 0x52
  1219  0000B2                     	ds	1
  1220  0000B3                     follow_path@dj:
  1221                           	opt stack 0
  1222                           
  1223                           ; 2 bytes @ 0x53
  1224  0000B3                     	ds	2
  1225  0000B5                     follow_path@dir:
  1226                           	opt stack 0
  1227  0000B5                     pf_read@clst:
  1228                           	opt stack 0
  1229                           
  1230                           ; 4 bytes @ 0x55
  1231  0000B5                     	ds	1
  1232  0000B6                     pf_write@cs:
  1233                           	opt stack 0
  1234                           
  1235                           ; 1 bytes @ 0x56
  1236  0000B6                     	ds	1
  1237  0000B7                     follow_path@path:
  1238                           	opt stack 0
  1239  0000B7                     pf_write@wcnt:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x57
  1243  0000B7                     	ds	1
  1244  0000B8                     pf_mount@tsect:
  1245                           	opt stack 0
  1246                           
  1247                           ; 4 bytes @ 0x58
  1248  0000B8                     	ds	1
  1249  0000B9                     follow_path@res:
  1250                           	opt stack 0
  1251  0000B9                     pf_read@cs:
  1252                           	opt stack 0
  1253  0000B9                     pf_write@fs:
  1254                           	opt stack 0
  1255                           
  1256                           ; 2 bytes @ 0x59
  1257  0000B9                     	ds	1
  1258  0000BA                     pf_open@path:
  1259                           	opt stack 0
  1260  0000BA                     pf_read@rcnt:
  1261                           	opt stack 0
  1262                           
  1263                           ; 2 bytes @ 0x5A
  1264  0000BA                     	ds	2
  1265  0000BC                     ??_pf_open:
  1266  0000BC                     pf_read@fs:
  1267                           	opt stack 0
  1268  0000BC                     pf_mount@mclst:
  1269                           	opt stack 0
  1270                           
  1271                           ; 4 bytes @ 0x5C
  1272  0000BC                     	ds	4
  1273  0000C0                     pf_mount@bsect:
  1274                           	opt stack 0
  1275                           
  1276                           ; 4 bytes @ 0x60
  1277  0000C0                     	ds	4
  1278  0000C4                     pf_mount@fsize:
  1279                           	opt stack 0
  1280                           
  1281                           ; 4 bytes @ 0x64
  1282  0000C4                     	ds	4
  1283  0000C8                     pf_mount@fmt:
  1284                           	opt stack 0
  1285                           
  1286                           ; 1 bytes @ 0x68
  1287  0000C8                     	ds	10
  1288  0000D2                     
  1289                           ; 1 bytes @ 0x72
  1290  0000D2                     	ds	2
  1291  0000D4                     escalonador@cont:
  1292                           	opt stack 0
  1293                           
  1294                           ; 1 bytes @ 0x74
  1295  0000D4                     	ds	1
  1296                           tblptru	equ	0xFF8
  1297                           tblptrh	equ	0xFF7
  1298                           tblptrl	equ	0xFF6
  1299                           tablat	equ	0xFF5
  1300                           postinc0	equ	0xFEE
  1301                           wreg	equ	0xFE8
  1302                           postdec1	equ	0xFE5
  1303                           fsr1h	equ	0xFE2
  1304                           fsr1l	equ	0xFE1
  1305                           
  1306                           	psect	cstackCOMRAM
  1307  000001                     __pcstackCOMRAM:
  1308                           	opt stack 0
  1309  000001                     i2write_timer_zero@timer0:
  1310                           	opt stack 0
  1311                           
  1312                           ; 2 bytes @ 0x0
  1313  000001                     	ds	2
  1314  000003                     i2write_timer_zero@timer:
  1315                           	opt stack 0
  1316                           
  1317                           ; 2 bytes @ 0x2
  1318  000003                     	ds	2
  1319  000005                     ??_isr:
  1320                           
  1321                           ; 1 bytes @ 0x4
  1322  000005                     	ds	20
  1323  000019                     isr@cont:
  1324                           	opt stack 0
  1325                           
  1326                           ; 1 bytes @ 0x18
  1327  000019                     	ds	1
  1328  00001A                     ??_shrc_seta_bit:
  1329  00001A                     ??_shrc_apaga_bit:
  1330  00001A                     ?_mem_cmp:
  1331                           	opt stack 0
  1332  00001A                     ?_get_clust:
  1333                           	opt stack 0
  1334  00001A                     ?___lmul:
  1335                           	opt stack 0
  1336  00001A                     ?___aldiv:
  1337                           	opt stack 0
  1338  00001A                     ?___lldiv:
  1339                           	opt stack 0
  1340  00001A                     envia_dados_shrc@contador:
  1341                           	opt stack 0
  1342  00001A                     recebe_dado_SPI@temp_var:
  1343                           	opt stack 0
  1344  00001A                     delay@contador_ext:
  1345                           	opt stack 0
  1346  00001A                     write_timer_zero@timer0:
  1347                           	opt stack 0
  1348  00001A                     readover@a:
  1349                           	opt stack 0
  1350  00001A                     mem_set@dst:
  1351                           	opt stack 0
  1352  00001A                     mem_cmp@dst:
  1353                           	opt stack 0
  1354  00001A                     get_clust@dir:
  1355                           	opt stack 0
  1356  00001A                     ___lmul@multiplier:
  1357                           	opt stack 0
  1358  00001A                     ___aldiv@dividend:
  1359                           	opt stack 0
  1360  00001A                     ___lldiv@dividend:
  1361                           	opt stack 0
  1362                           
  1363                           ; 4 bytes @ 0x19
  1364  00001A                     	ds	1
  1365  00001B                     response@buff:
  1366                           	opt stack 0
  1367  00001B                     envia_dados_shrc@data_to_shrc:
  1368                           	opt stack 0
  1369  00001B                     delay@contador_int:
  1370                           	opt stack 0
  1371                           
  1372                           ; 1 bytes @ 0x1A
  1373  00001B                     	ds	1
  1374  00001C                     shrc_seta_bit@posicao_bit:
  1375                           	opt stack 0
  1376  00001C                     shrc_apaga_bit@posicao_bit:
  1377                           	opt stack 0
  1378  00001C                     escreve_cmd_lcd@comando:
  1379                           	opt stack 0
  1380  00001C                     endereco_cursor_lcd@endereco:
  1381                           	opt stack 0
  1382  00001C                     escreve_caractere_lcd@data:
  1383                           	opt stack 0
  1384  00001C                     write_timer_zero@timer:
  1385                           	opt stack 0
  1386  00001C                     mem_set@val:
  1387                           	opt stack 0
  1388  00001C                     mem_cmp@src:
  1389                           	opt stack 0
  1390                           
  1391                           ; 2 bytes @ 0x1B
  1392  00001C                     	ds	1
  1393  00001D                     ??_WriteSPI_:
  1394  00001D                     ??_init_lcd:
  1395  00001D                     posicao_cursor_lcd@coluna:
  1396                           	opt stack 0
  1397  00001D                     escreve_frase_ram_lcd@buffer:
  1398                           	opt stack 0
  1399                           
  1400                           ; 2 bytes @ 0x1C
  1401  00001D                     	ds	1
  1402  00001E                     ??_get_clust:
  1403  00001E                     posicao_cursor_lcd@linha:
  1404                           	opt stack 0
  1405  00001E                     mem_set@cnt:
  1406                           	opt stack 0
  1407  00001E                     mem_cmp@cnt:
  1408                           	opt stack 0
  1409  00001E                     ___lmul@multiplicand:
  1410                           	opt stack 0
  1411  00001E                     ___aldiv@divisor:
  1412                           	opt stack 0
  1413  00001E                     ___lldiv@divisor:
  1414                           	opt stack 0
  1415                           
  1416                           ; 4 bytes @ 0x1D
  1417  00001E                     	ds	1
  1418  00001F                     WriteSPI_@TempVar:
  1419                           	opt stack 0
  1420  00001F                     posicao_cursor_lcd@endereco:
  1421                           	opt stack 0
  1422                           
  1423                           ; 1 bytes @ 0x1E
  1424  00001F                     	ds	1
  1425  000020                     ??_mensagem_inicial:
  1426  000020                     ??_mem_cmp:
  1427  000020                     inicializa_SPI@bus_mode:
  1428                           	opt stack 0
  1429  000020                     WriteSPI_@dado:
  1430                           	opt stack 0
  1431  000020                     mem_set@d:
  1432                           	opt stack 0
  1433                           
  1434                           ; 2 bytes @ 0x1F
  1435  000020                     	ds	1
  1436  000021                     ??_dummy_clocks:
  1437  000021                     inicializa_SPI@smp_phase:
  1438                           	opt stack 0
  1439  000021                     command@arg:
  1440                           	opt stack 0
  1441                           
  1442                           ; 4 bytes @ 0x20
  1443  000021                     	ds	1
  1444  000022                     inicializa_SPI@sync_mode:
  1445                           	opt stack 0
  1446  000022                     ___aldiv@counter:
  1447                           	opt stack 0
  1448  000022                     create_name@dj:
  1449                           	opt stack 0
  1450  000022                     ___lmul@product:
  1451                           	opt stack 0
  1452  000022                     ___lldiv@quotient:
  1453                           	opt stack 0
  1454                           
  1455                           ; 4 bytes @ 0x21
  1456  000022                     	ds	1
  1457  000023                     dummy_clocks@n:
  1458                           	opt stack 0
  1459  000023                     ___aldiv@sign:
  1460                           	opt stack 0
  1461  000023                     mem_cmp@d:
  1462                           	opt stack 0
  1463                           
  1464                           ; 2 bytes @ 0x22
  1465  000023                     	ds	1
  1466  000024                     dummy_clocks@i:
  1467                           	opt stack 0
  1468  000024                     create_name@path:
  1469                           	opt stack 0
  1470  000024                     ___aldiv@quotient:
  1471                           	opt stack 0
  1472                           
  1473                           ; 4 bytes @ 0x23
  1474  000024                     	ds	1
  1475  000025                     command@CRC:
  1476                           	opt stack 0
  1477  000025                     mem_cmp@s:
  1478                           	opt stack 0
  1479                           
  1480                           ; 2 bytes @ 0x24
  1481  000025                     	ds	1
  1482  000026                     ??_create_name:
  1483  000026                     ?_clust2sect:
  1484                           	opt stack 0
  1485  000026                     command@CMD:
  1486                           	opt stack 0
  1487  000026                     ___lldiv@counter:
  1488                           	opt stack 0
  1489  000026                     get_clust@fs:
  1490                           	opt stack 0
  1491  000026                     clust2sect@clst:
  1492                           	opt stack 0
  1493                           
  1494                           ; 4 bytes @ 0x25
  1495  000026                     	ds	1
  1496  000027                     command@argument:
  1497                           	opt stack 0
  1498  000027                     mem_cmp@r:
  1499                           	opt stack 0
  1500                           
  1501                           ; 2 bytes @ 0x26
  1502  000027                     	ds	1
  1503  000028                     ??_disk_readp:
  1504  000028                     ??_disk_writep:
  1505  000028                     reset@i:
  1506                           	opt stack 0
  1507  000028                     configura_baudrate_uart@baudrate:
  1508                           	opt stack 0
  1509  000028                     get_clust@clst:
  1510                           	opt stack 0
  1511                           
  1512                           ; 4 bytes @ 0x27
  1513  000028                     	ds	2
  1514  00002A                     reset@count:
  1515                           	opt stack 0
  1516  00002A                     clust2sect@fs:
  1517                           	opt stack 0
  1518                           
  1519                           ; 2 bytes @ 0x29
  1520  00002A                     	ds	2
  1521  00002C                     reset@buff:
  1522                           	opt stack 0
  1523                           
  1524                           ; 1 bytes @ 0x2B
  1525  00002C                     	ds	1
  1526  00002D                     tblptru	equ	0xFF8
  1527                           tblptrh	equ	0xFF7
  1528                           tblptrl	equ	0xFF6
  1529                           tablat	equ	0xFF5
  1530                           postinc0	equ	0xFEE
  1531                           wreg	equ	0xFE8
  1532                           postdec1	equ	0xFE5
  1533                           fsr1h	equ	0xFE2
  1534                           fsr1l	equ	0xFE1
  1535                           
  1536                           ; 1 bytes @ 0x2C
  1537 ;;
  1538 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1539 ;;
  1540 ;; *************** function _main *****************
  1541 ;; Defined at:
  1542 ;;		line 242 in file "main.c"
  1543 ;; Parameters:    Size  Location     Type
  1544 ;;		None
  1545 ;; Auto vars:     Size  Location     Type
  1546 ;;		None
  1547 ;; Return value:  Size  Location     Type
  1548 ;;                  1    wreg      void 
  1549 ;; Registers used:
  1550 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  1551 ;; Tracked objects:
  1552 ;;		On entry : 0/0
  1553 ;;		On exit  : 0/0
  1554 ;;		Unchanged: 0/0
  1555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1556 ;;      Params:         0       0       0       0       0       0       0       0       0
  1557 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1558 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1559 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1560 ;;Total ram usage:        0 bytes
  1561 ;; Hardware stack levels required when called:   14
  1562 ;; This function calls:
  1563 ;;		_controle_shrc
  1564 ;;		_escalonador
  1565 ;;		_inicializa_SPI
  1566 ;;		_inicializa_shrc
  1567 ;;		_inicializa_tarefas
  1568 ;;		_inicializa_uart
  1569 ;;		_init_hardware
  1570 ;;		_init_lcd
  1571 ;;		_mensagem_inicial
  1572 ;; This function is called by:
  1573 ;;		Startup code after reset
  1574 ;; This function uses a non-reentrant model
  1575 ;;
  1576                           
  1577                           	psect	text0
  1578  003006                     __ptext0:
  1579                           	opt stack 0
  1580  003006                     _main:
  1581                           	opt stack 17
  1582                           
  1583                           ;main.c: 251: init_hardware();
  1584                           
  1585                           ;incstack = 0
  1586  003006  ECB6  F018         	call	_init_hardware	;wreg free
  1587                           
  1588                           ;main.c: 252: inicializa_uart();
  1589  00300A  EC88  F018         	call	_inicializa_uart	;wreg free
  1590                           
  1591                           ;main.c: 253: init_lcd();
  1592  00300E  EC76  F014         	call	_init_lcd	;wreg free
  1593                           
  1594                           ;main.c: 254: inicializa_shrc();
  1595  003012  EC45  F019         	call	_inicializa_shrc	;wreg free
  1596                           
  1597                           ;main.c: 256: mensagem_inicial();
  1598  003016  ECD2  F015         	call	_mensagem_inicial	;wreg free
  1599                           
  1600                           ;main.c: 257: inicializa_tarefas();
  1601  00301A  EC20  F018         	call	_inicializa_tarefas	;wreg free
  1602                           
  1603                           ;main.c: 258: inicializa_SPI(0,3,1);
  1604  00301E  0E03               	movlw	3
  1605  003020  6E20               	movwf	inicializa_SPI@bus_mode,c
  1606  003022  0E01               	movlw	1
  1607  003024  6E21               	movwf	inicializa_SPI@smp_phase,c
  1608  003026  0E00               	movlw	0
  1609  003028  EC94  F015         	call	_inicializa_SPI
  1610  00302C                     
  1611                           ;main.c: 261: {
  1612                           ;main.c: 263: if ((sinaliza_int_timer == 1) && (2))
  1613  00302C  043F               	decf	_sinaliza_int_timer,w,c
  1614  00302E  A4D8               	btfss	status,2,c
  1615  003030  D004               	goto	l509
  1616                           
  1617                           ;main.c: 264: {
  1618                           ;main.c: 265: sinaliza_int_timer = 0;
  1619  003032  0E00               	movlw	0
  1620  003034  6E3F               	movwf	_sinaliza_int_timer,c
  1621                           
  1622                           ;main.c: 266: escalonador();
  1623  003036  EC24  F014         	call	_escalonador	;wreg free
  1624  00303A                     l509:
  1625                           
  1626                           ;main.c: 267: }
  1627                           ;main.c: 269: controle_shrc();
  1628  00303A  EC36  F019         	call	_controle_shrc	;wreg free
  1629  00303E  D7F6               	goto	l508
  1630  003040                     __end_of_main:
  1631                           	opt stack 0
  1632                           tblptru	equ	0xFF8
  1633                           tblptrh	equ	0xFF7
  1634                           tblptrl	equ	0xFF6
  1635                           tablat	equ	0xFF5
  1636                           postinc0	equ	0xFEE
  1637                           wreg	equ	0xFE8
  1638                           postdec1	equ	0xFE5
  1639                           fsr1h	equ	0xFE2
  1640                           fsr1l	equ	0xFE1
  1641                           status	equ	0xFD8
  1642                           
  1643 ;; *************** function _mensagem_inicial *****************
  1644 ;; Defined at:
  1645 ;;		line 282 in file "main.c"
  1646 ;; Parameters:    Size  Location     Type
  1647 ;;		None
  1648 ;; Auto vars:     Size  Location     Type
  1649 ;;  msg_dois       17   17[BANK0 ] const unsigned char [17]
  1650 ;;  msg_linha_um   17    0[BANK0 ] const unsigned char [17]
  1651 ;; Return value:  Size  Location     Type
  1652 ;;                  1    wreg      void 
  1653 ;; Registers used:
  1654 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1655 ;; Tracked objects:
  1656 ;;		On entry : 0/0
  1657 ;;		On exit  : 0/0
  1658 ;;		Unchanged: 0/0
  1659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1660 ;;      Params:         0       0       0       0       0       0       0       0       0
  1661 ;;      Locals:         0      34       0       0       0       0       0       0       0
  1662 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1663 ;;      Totals:         2      34       0       0       0       0       0       0       0
  1664 ;;Total ram usage:       36 bytes
  1665 ;; Hardware stack levels used:    1
  1666 ;; Hardware stack levels required when called:    5
  1667 ;; This function calls:
  1668 ;;		_escreve_cmd_lcd
  1669 ;;		_escreve_frase_ram_lcd
  1670 ;;		_posicao_cursor_lcd
  1671 ;; This function is called by:
  1672 ;;		_main
  1673 ;; This function uses a non-reentrant model
  1674 ;;
  1675                           
  1676                           	psect	text1
  1677  002BA4                     __ptext1:
  1678                           	opt stack 0
  1679  002BA4                     _mensagem_inicial:
  1680                           	opt stack 25
  1681                           
  1682                           ;main.c: 284: const unsigned char msg_linha_um[17] = "SDCard Init   ";
  1683                           
  1684                           ;incstack = 0
  1685  002BA4  0E78               	movlw	low mensagem_inicial@F4029
  1686  002BA6  6EF6               	movwf	tblptrl,c
  1687  002BA8                     	if	1	;There is more than 1 active tblptr byte
  1688  002BA8  0E61               	movlw	high mensagem_inicial@F4029
  1689  002BAA  6EF7               	movwf	tblptrh,c
  1690  002BAC                     	endif
  1691  002BAC                     	if	0	;There are less than 3 active tblptr bytes
  1692  002BAC                     	endif
  1693  002BAC  EE20  F060         	lfsr	2,mensagem_inicial@msg_linha_um
  1694  002BB0  0E10               	movlw	16
  1695  002BB2                     u8540:
  1696  002BB2  0009               	tblrd		*+
  1697  002BB4  CFF5 FFDE          	movff	tablat,postinc2
  1698  002BB8  06E8               	decf	wreg,f,c
  1699  002BBA  E2FB               	bc	u8540
  1700                           
  1701                           ;main.c: 285: const unsigned char msg_dois[17] = " 18/01/2022   ";
  1702  002BBC  0E67               	movlw	low mensagem_inicial@F4031
  1703  002BBE  6EF6               	movwf	tblptrl,c
  1704  002BC0                     	if	1	;There is more than 1 active tblptr byte
  1705  002BC0  0E61               	movlw	high mensagem_inicial@F4031
  1706  002BC2  6EF7               	movwf	tblptrh,c
  1707  002BC4                     	endif
  1708  002BC4                     	if	0	;There are less than 3 active tblptr bytes
  1709  002BC4                     	endif
  1710  002BC4  EE20  F071         	lfsr	2,mensagem_inicial@msg_dois
  1711  002BC8  0E10               	movlw	16
  1712  002BCA                     u8550:
  1713  002BCA  0009               	tblrd		*+
  1714  002BCC  CFF5 FFDE          	movff	tablat,postinc2
  1715  002BD0  06E8               	decf	wreg,f,c
  1716  002BD2  E2FB               	bc	u8550
  1717                           
  1718                           ;main.c: 287: posicao_cursor_lcd(1,0);
  1719  002BD4  0E00               	movlw	0
  1720  002BD6  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  1721  002BD8  0E01               	movlw	1
  1722  002BDA  EC80  F016         	call	_posicao_cursor_lcd
  1723                           
  1724                           ;main.c: 288: escreve_frase_ram_lcd(msg_linha_um);
  1725  002BDE  0E60               	movlw	low mensagem_inicial@msg_linha_um
  1726  002BE0  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  1727  002BE2  0E00               	movlw	high mensagem_inicial@msg_linha_um
  1728  002BE4  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  1729  002BE6  EC74  F017         	call	_escreve_frase_ram_lcd	;wreg free
  1730                           
  1731                           ;main.c: 290: posicao_cursor_lcd(2,0);
  1732  002BEA  0E00               	movlw	0
  1733  002BEC  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  1734  002BEE  0E02               	movlw	2
  1735  002BF0  EC80  F016         	call	_posicao_cursor_lcd
  1736                           
  1737                           ;main.c: 291: escreve_frase_ram_lcd(msg_dois);
  1738  002BF4  0E71               	movlw	low mensagem_inicial@msg_dois
  1739  002BF6  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  1740  002BF8  0E00               	movlw	high mensagem_inicial@msg_dois
  1741  002BFA  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  1742  002BFC  EC74  F017         	call	_escreve_frase_ram_lcd	;wreg free
  1743                           
  1744                           ;main.c: 293: _delay((unsigned long)((1000)*(48000000/4000.0)));
  1745  002C00  0E3D               	movlw	61
  1746  002C02  6E21               	movwf	(??_mensagem_inicial+1)& (0+255),c
  1747  002C04  0EE1               	movlw	225
  1748  002C06  6E20               	movwf	??_mensagem_inicial& (0+255),c
  1749  002C08  0E40               	movlw	64
  1750  002C0A                     u9107:
  1751  002C0A  2EE8               	decfsz	wreg,f,c
  1752  002C0C  D7FE               	bra	u9107
  1753  002C0E  2E20               	decfsz	??_mensagem_inicial& (0+255),f,c
  1754  002C10  D7FC               	bra	u9107
  1755  002C12  2E21               	decfsz	(??_mensagem_inicial+1)& (0+255),f,c
  1756  002C14  D7FA               	bra	u9107
  1757                           
  1758                           ;main.c: 294: escreve_cmd_lcd(0b00000001);
  1759  002C16  0E01               	movlw	1
  1760  002C18  EC0D  F015         	call	_escreve_cmd_lcd
  1761  002C1C  0012               	return		;funcret
  1762  002C1E                     __end_of_mensagem_inicial:
  1763                           	opt stack 0
  1764                           tblptru	equ	0xFF8
  1765                           tblptrh	equ	0xFF7
  1766                           tblptrl	equ	0xFF6
  1767                           tablat	equ	0xFF5
  1768                           postinc0	equ	0xFEE
  1769                           wreg	equ	0xFE8
  1770                           postdec1	equ	0xFE5
  1771                           fsr1h	equ	0xFE2
  1772                           fsr1l	equ	0xFE1
  1773                           postinc2	equ	0xFDE
  1774                           status	equ	0xFD8
  1775                           
  1776 ;; *************** function _init_lcd *****************
  1777 ;; Defined at:
  1778 ;;		line 71 in file "bibliotecas/display/display_lcd.c"
  1779 ;; Parameters:    Size  Location     Type
  1780 ;;		None
  1781 ;; Auto vars:     Size  Location     Type
  1782 ;;		None
  1783 ;; Return value:  Size  Location     Type
  1784 ;;                  1    wreg      void 
  1785 ;; Registers used:
  1786 ;;		wreg, status,2, status,0, cstack
  1787 ;; Tracked objects:
  1788 ;;		On entry : 0/0
  1789 ;;		On exit  : 0/0
  1790 ;;		Unchanged: 0/0
  1791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1792 ;;      Params:         0       0       0       0       0       0       0       0       0
  1793 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1794 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1795 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1796 ;;Total ram usage:        1 bytes
  1797 ;; Hardware stack levels used:    1
  1798 ;; Hardware stack levels required when called:    4
  1799 ;; This function calls:
  1800 ;;		_delay
  1801 ;;		_escreve_cmd_lcd
  1802 ;; This function is called by:
  1803 ;;		_main
  1804 ;; This function uses a non-reentrant model
  1805 ;;
  1806                           
  1807                           	psect	text2
  1808  0028EC                     __ptext2:
  1809                           	opt stack 0
  1810  0028EC                     _init_lcd:
  1811                           	opt stack 26
  1812                           
  1813                           ;display_lcd.c: 74: TRISDbits.RD2 = 0;
  1814                           
  1815                           ;incstack = 0
  1816  0028EC  9495               	bcf	3989,2,c	;volatile
  1817                           
  1818                           ;display_lcd.c: 75: TRISDbits.RD1 = 0;
  1819  0028EE  9295               	bcf	3989,1,c	;volatile
  1820                           
  1821                           ;display_lcd.c: 76: TRISDbits.RD0 = 0;
  1822  0028F0  9095               	bcf	3989,0,c	;volatile
  1823                           
  1824                           ;display_lcd.c: 79: TRISDbits.RD4=0;
  1825  0028F2  9895               	bcf	3989,4,c	;volatile
  1826                           
  1827                           ;display_lcd.c: 80: TRISDbits.RD5=0;
  1828  0028F4  9A95               	bcf	3989,5,c	;volatile
  1829                           
  1830                           ;display_lcd.c: 81: TRISDbits.RD6=0;
  1831  0028F6  9C95               	bcf	3989,6,c	;volatile
  1832                           
  1833                           ;display_lcd.c: 82: TRISDbits.RD7=0;
  1834  0028F8  9E95               	bcf	3989,7,c	;volatile
  1835                           
  1836                           ;display_lcd.c: 89: PORTDbits.RD2 = 0;
  1837  0028FA  9483               	bcf	3971,2,c	;volatile
  1838                           
  1839                           ;display_lcd.c: 90: PORTDbits.RD1 = 0;
  1840  0028FC  9283               	bcf	3971,1,c	;volatile
  1841                           
  1842                           ;display_lcd.c: 91: PORTDbits.RD0 = 0;
  1843  0028FE  9083               	bcf	3971,0,c	;volatile
  1844                           
  1845                           ;display_lcd.c: 95: PORTDbits.RD7=0;
  1846  002900  9E83               	bcf	3971,7,c	;volatile
  1847                           
  1848                           ;display_lcd.c: 96: PORTDbits.RD6=0;
  1849  002902  9C83               	bcf	3971,6,c	;volatile
  1850                           
  1851                           ;display_lcd.c: 97: PORTDbits.RD5=1;
  1852  002904  8A83               	bsf	3971,5,c	;volatile
  1853                           
  1854                           ;display_lcd.c: 98: PORTDbits.RD4=1;
  1855  002906  8883               	bsf	3971,4,c	;volatile
  1856                           
  1857                           ;display_lcd.c: 103: _delay((unsigned long)((15)*(48000000/4000.0)));
  1858  002908  0EEA               	movlw	234
  1859  00290A  6E1D               	movwf	??_init_lcd& (0+255),c
  1860  00290C  0EC3               	movlw	195
  1861  00290E                     u9117:
  1862  00290E  2EE8               	decfsz	wreg,f,c
  1863  002910  D7FE               	bra	u9117
  1864  002912  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  1865  002914  D7FC               	bra	u9117
  1866  002916  F000               	nop	
  1867                           
  1868                           ;display_lcd.c: 107: PORTDbits.RD0 = 1;
  1869  002918  8083               	bsf	3971,0,c	;volatile
  1870                           
  1871                           ;display_lcd.c: 108: delay();
  1872  00291A  EC65  F018         	call	_delay	;wreg free
  1873                           
  1874                           ;display_lcd.c: 109: PORTDbits.RD0 = 0;
  1875  00291E  9083               	bcf	3971,0,c	;volatile
  1876                           
  1877                           ;display_lcd.c: 110: delay();
  1878  002920  EC65  F018         	call	_delay	;wreg free
  1879                           
  1880                           ;display_lcd.c: 115: _delay((unsigned long)((5)*(48000000/4000.0)));
  1881  002924  0E4E               	movlw	78
  1882  002926  6E1D               	movwf	??_init_lcd& (0+255),c
  1883  002928  0EEB               	movlw	235
  1884  00292A                     u9127:
  1885  00292A  2EE8               	decfsz	wreg,f,c
  1886  00292C  D7FE               	bra	u9127
  1887  00292E  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  1888  002930  D7FC               	bra	u9127
  1889  002932  F000               	nop	
  1890                           
  1891                           ;display_lcd.c: 118: PORTDbits.RD0 = 1;
  1892  002934  8083               	bsf	3971,0,c	;volatile
  1893                           
  1894                           ;display_lcd.c: 119: delay();
  1895  002936  EC65  F018         	call	_delay	;wreg free
  1896                           
  1897                           ;display_lcd.c: 120: PORTDbits.RD0 = 0;
  1898  00293A  9083               	bcf	3971,0,c	;volatile
  1899                           
  1900                           ;display_lcd.c: 121: delay();
  1901  00293C  EC65  F018         	call	_delay	;wreg free
  1902                           
  1903                           ;display_lcd.c: 126: _delay((unsigned long)((5)*(48000000/4000.0)));
  1904  002940  0E4E               	movlw	78
  1905  002942  6E1D               	movwf	??_init_lcd& (0+255),c
  1906  002944  0EEB               	movlw	235
  1907  002946                     u9137:
  1908  002946  2EE8               	decfsz	wreg,f,c
  1909  002948  D7FE               	bra	u9137
  1910  00294A  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  1911  00294C  D7FC               	bra	u9137
  1912  00294E  F000               	nop	
  1913                           
  1914                           ;display_lcd.c: 129: PORTDbits.RD0 = 1;
  1915  002950  8083               	bsf	3971,0,c	;volatile
  1916                           
  1917                           ;display_lcd.c: 130: delay();
  1918  002952  EC65  F018         	call	_delay	;wreg free
  1919                           
  1920                           ;display_lcd.c: 131: PORTDbits.RD0 = 0;
  1921  002956  9083               	bcf	3971,0,c	;volatile
  1922                           
  1923                           ;display_lcd.c: 132: delay();
  1924  002958  EC65  F018         	call	_delay	;wreg free
  1925                           
  1926                           ;display_lcd.c: 135: PORTDbits.RD7=0;
  1927  00295C  9E83               	bcf	3971,7,c	;volatile
  1928                           
  1929                           ;display_lcd.c: 136: PORTDbits.RD6=0;
  1930  00295E  9C83               	bcf	3971,6,c	;volatile
  1931                           
  1932                           ;display_lcd.c: 137: PORTDbits.RD5=1;
  1933  002960  8A83               	bsf	3971,5,c	;volatile
  1934                           
  1935                           ;display_lcd.c: 138: PORTDbits.RD4=0;
  1936  002962  9883               	bcf	3971,4,c	;volatile
  1937                           
  1938                           ;display_lcd.c: 142: PORTDbits.RD0 = 1;
  1939  002964  8083               	bsf	3971,0,c	;volatile
  1940                           
  1941                           ;display_lcd.c: 143: delay();
  1942  002966  EC65  F018         	call	_delay	;wreg free
  1943                           
  1944                           ;display_lcd.c: 144: PORTDbits.RD0 = 0;
  1945  00296A  9083               	bcf	3971,0,c	;volatile
  1946                           
  1947                           ;display_lcd.c: 145: delay();
  1948  00296C  EC65  F018         	call	_delay	;wreg free
  1949                           
  1950                           ;display_lcd.c: 149: escreve_cmd_lcd(0b00101000);
  1951  002970  0E28               	movlw	40
  1952  002972  EC0D  F015         	call	_escreve_cmd_lcd
  1953                           
  1954                           ;display_lcd.c: 150: escreve_cmd_lcd(0b00000110);
  1955  002976  0E06               	movlw	6
  1956  002978  EC0D  F015         	call	_escreve_cmd_lcd
  1957                           
  1958                           ;display_lcd.c: 151: escreve_cmd_lcd(0b00001110);
  1959  00297C  0E0E               	movlw	14
  1960  00297E  EC0D  F015         	call	_escreve_cmd_lcd
  1961                           
  1962                           ;display_lcd.c: 152: escreve_cmd_lcd(0b00000001);
  1963  002982  0E01               	movlw	1
  1964  002984  EC0D  F015         	call	_escreve_cmd_lcd
  1965  002988  0012               	return		;funcret
  1966  00298A                     __end_of_init_lcd:
  1967                           	opt stack 0
  1968                           tblptru	equ	0xFF8
  1969                           tblptrh	equ	0xFF7
  1970                           tblptrl	equ	0xFF6
  1971                           tablat	equ	0xFF5
  1972                           postinc0	equ	0xFEE
  1973                           wreg	equ	0xFE8
  1974                           postdec1	equ	0xFE5
  1975                           fsr1h	equ	0xFE2
  1976                           fsr1l	equ	0xFE1
  1977                           postinc2	equ	0xFDE
  1978                           status	equ	0xFD8
  1979                           
  1980 ;; *************** function _init_hardware *****************
  1981 ;; Defined at:
  1982 ;;		line 55 in file "bibliotecas/hardware.c"
  1983 ;; Parameters:    Size  Location     Type
  1984 ;;		None
  1985 ;; Auto vars:     Size  Location     Type
  1986 ;;		None
  1987 ;; Return value:  Size  Location     Type
  1988 ;;                  1    wreg      void 
  1989 ;; Registers used:
  1990 ;;		wreg, status,2, cstack
  1991 ;; Tracked objects:
  1992 ;;		On entry : 0/0
  1993 ;;		On exit  : 0/0
  1994 ;;		Unchanged: 0/0
  1995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1996 ;;      Params:         0       0       0       0       0       0       0       0       0
  1997 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1998 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1999 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2000 ;;Total ram usage:        0 bytes
  2001 ;; Hardware stack levels used:    1
  2002 ;; Hardware stack levels required when called:    4
  2003 ;; This function calls:
  2004 ;;		_config_timer_dois
  2005 ;;		_config_timer_zero
  2006 ;;		_inicializa_adc
  2007 ;;		_init_interrupt
  2008 ;;		_init_oscilador
  2009 ;;		_init_ports
  2010 ;; This function is called by:
  2011 ;;		_main
  2012 ;; This function uses a non-reentrant model
  2013 ;;
  2014                           
  2015                           	psect	text3
  2016  00316C                     __ptext3:
  2017                           	opt stack 0
  2018  00316C                     _init_hardware:
  2019                           	opt stack 26
  2020                           
  2021                           ;hardware.c: 58: init_oscilador();
  2022                           
  2023                           ;incstack = 0
  2024  00316C  EC41  F019         	call	_init_oscilador	;wreg free
  2025                           
  2026                           ;hardware.c: 61: init_ports();
  2027  003170  ECE9  F018         	call	_init_ports	;wreg free
  2028                           
  2029                           ;hardware.c: 64: config_timer_zero();
  2030  003174  ECD0  F018         	call	_config_timer_zero	;wreg free
  2031                           
  2032                           ;hardware.c: 67: config_timer_dois();
  2033  003178  EC2A  F019         	call	_config_timer_dois	;wreg free
  2034                           
  2035                           ;hardware.c: 70: init_interrupt();
  2036  00317C  ECC3  F018         	call	_init_interrupt	;wreg free
  2037                           
  2038                           ;hardware.c: 73: inicializa_adc();
  2039  003180  EC77  F018         	call	_inicializa_adc	;wreg free
  2040  003184  0012               	return		;funcret
  2041  003186                     __end_of_init_hardware:
  2042                           	opt stack 0
  2043                           tblptru	equ	0xFF8
  2044                           tblptrh	equ	0xFF7
  2045                           tblptrl	equ	0xFF6
  2046                           tablat	equ	0xFF5
  2047                           postinc0	equ	0xFEE
  2048                           wreg	equ	0xFE8
  2049                           postdec1	equ	0xFE5
  2050                           fsr1h	equ	0xFE2
  2051                           fsr1l	equ	0xFE1
  2052                           postinc2	equ	0xFDE
  2053                           status	equ	0xFD8
  2054                           
  2055 ;; *************** function _init_ports *****************
  2056 ;; Defined at:
  2057 ;;		line 159 in file "bibliotecas/hardware.c"
  2058 ;; Parameters:    Size  Location     Type
  2059 ;;		None
  2060 ;; Auto vars:     Size  Location     Type
  2061 ;;		None
  2062 ;; Return value:  Size  Location     Type
  2063 ;;                  1    wreg      void 
  2064 ;; Registers used:
  2065 ;;		wreg, status,2
  2066 ;; Tracked objects:
  2067 ;;		On entry : 0/0
  2068 ;;		On exit  : 0/0
  2069 ;;		Unchanged: 0/0
  2070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2071 ;;      Params:         0       0       0       0       0       0       0       0       0
  2072 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2073 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2074 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2075 ;;Total ram usage:        0 bytes
  2076 ;; Hardware stack levels used:    1
  2077 ;; Hardware stack levels required when called:    2
  2078 ;; This function calls:
  2079 ;;		Nothing
  2080 ;; This function is called by:
  2081 ;;		_init_hardware
  2082 ;; This function uses a non-reentrant model
  2083 ;;
  2084                           
  2085                           	psect	text4
  2086  0031D2                     __ptext4:
  2087                           	opt stack 0
  2088  0031D2                     _init_ports:
  2089                           	opt stack 27
  2090                           
  2091                           ;hardware.c: 161: TRISB = 0b00000001;
  2092                           
  2093                           ;incstack = 0
  2094  0031D2  0E01               	movlw	1
  2095  0031D4  6E93               	movwf	3987,c	;volatile
  2096                           
  2097                           ;hardware.c: 162: LATB = 0xFF;
  2098  0031D6  688A               	setf	3978,c	;volatile
  2099                           
  2100                           ;hardware.c: 163: TRISD = 0x00;
  2101  0031D8  0E00               	movlw	0
  2102  0031DA  6E95               	movwf	3989,c	;volatile
  2103                           
  2104                           ;hardware.c: 164: TRISA = 0b00000111;
  2105  0031DC  0E07               	movlw	7
  2106  0031DE  6E92               	movwf	3986,c	;volatile
  2107                           
  2108                           ;hardware.c: 165: TRISC = 0x01111111;
  2109  0031E0  0E11               	movlw	17
  2110  0031E2  6E94               	movwf	3988,c	;volatile
  2111                           
  2112                           ;hardware.c: 166: TRISE = 0b00000011;
  2113  0031E4  0E03               	movlw	3
  2114  0031E6  6E96               	movwf	3990,c	;volatile
  2115  0031E8  0012               	return		;funcret
  2116  0031EA                     __end_of_init_ports:
  2117                           	opt stack 0
  2118                           tblptru	equ	0xFF8
  2119                           tblptrh	equ	0xFF7
  2120                           tblptrl	equ	0xFF6
  2121                           tablat	equ	0xFF5
  2122                           postinc0	equ	0xFEE
  2123                           wreg	equ	0xFE8
  2124                           postdec1	equ	0xFE5
  2125                           fsr1h	equ	0xFE2
  2126                           fsr1l	equ	0xFE1
  2127                           postinc2	equ	0xFDE
  2128                           status	equ	0xFD8
  2129                           
  2130 ;; *************** function _init_oscilador *****************
  2131 ;; Defined at:
  2132 ;;		line 176 in file "bibliotecas/hardware.c"
  2133 ;; Parameters:    Size  Location     Type
  2134 ;;		None
  2135 ;; Auto vars:     Size  Location     Type
  2136 ;;		None
  2137 ;; Return value:  Size  Location     Type
  2138 ;;                  1    wreg      void 
  2139 ;; Registers used:
  2140 ;;		None
  2141 ;; Tracked objects:
  2142 ;;		On entry : 0/0
  2143 ;;		On exit  : 0/0
  2144 ;;		Unchanged: 0/0
  2145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2146 ;;      Params:         0       0       0       0       0       0       0       0       0
  2147 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2148 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2149 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2150 ;;Total ram usage:        0 bytes
  2151 ;; Hardware stack levels used:    1
  2152 ;; Hardware stack levels required when called:    2
  2153 ;; This function calls:
  2154 ;;		Nothing
  2155 ;; This function is called by:
  2156 ;;		_init_hardware
  2157 ;; This function uses a non-reentrant model
  2158 ;;
  2159                           
  2160                           	psect	text5
  2161  003282                     __ptext5:
  2162                           	opt stack 0
  2163  003282                     _init_oscilador:
  2164                           	opt stack 27
  2165                           
  2166                           ;hardware.c: 179: OSCCONbits.IRCF0 = 1;
  2167                           
  2168                           ;incstack = 0
  2169  003282  88D3               	bsf	4051,4,c	;volatile
  2170                           
  2171                           ;hardware.c: 180: OSCCONbits.IRCF1 = 1;
  2172  003284  8AD3               	bsf	4051,5,c	;volatile
  2173                           
  2174                           ;hardware.c: 181: OSCCONbits.IRCF2 = 1;
  2175  003286  8CD3               	bsf	4051,6,c	;volatile
  2176  003288  0012               	return		;funcret
  2177  00328A                     __end_of_init_oscilador:
  2178                           	opt stack 0
  2179                           tblptru	equ	0xFF8
  2180                           tblptrh	equ	0xFF7
  2181                           tblptrl	equ	0xFF6
  2182                           tablat	equ	0xFF5
  2183                           postinc0	equ	0xFEE
  2184                           wreg	equ	0xFE8
  2185                           postdec1	equ	0xFE5
  2186                           fsr1h	equ	0xFE2
  2187                           fsr1l	equ	0xFE1
  2188                           postinc2	equ	0xFDE
  2189                           status	equ	0xFD8
  2190                           
  2191 ;; *************** function _init_interrupt *****************
  2192 ;; Defined at:
  2193 ;;		line 98 in file "bibliotecas/hardware.c"
  2194 ;; Parameters:    Size  Location     Type
  2195 ;;		None
  2196 ;; Auto vars:     Size  Location     Type
  2197 ;;		None
  2198 ;; Return value:  Size  Location     Type
  2199 ;;                  1    wreg      void 
  2200 ;; Registers used:
  2201 ;;		wreg, status,2
  2202 ;; Tracked objects:
  2203 ;;		On entry : 0/0
  2204 ;;		On exit  : 0/0
  2205 ;;		Unchanged: 0/0
  2206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2207 ;;      Params:         0       0       0       0       0       0       0       0       0
  2208 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2209 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2210 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2211 ;;Total ram usage:        0 bytes
  2212 ;; Hardware stack levels used:    1
  2213 ;; Hardware stack levels required when called:    2
  2214 ;; This function calls:
  2215 ;;		Nothing
  2216 ;; This function is called by:
  2217 ;;		_init_hardware
  2218 ;; This function uses a non-reentrant model
  2219 ;;
  2220                           
  2221                           	psect	text6
  2222  003186                     __ptext6:
  2223                           	opt stack 0
  2224  003186                     _init_interrupt:
  2225                           	opt stack 27
  2226                           
  2227                           ;hardware.c: 100: INTCON = 0b11100000;
  2228                           
  2229                           ;incstack = 0
  2230  003186  0EE0               	movlw	224
  2231  003188  6EF2               	movwf	intcon,c	;volatile
  2232                           
  2233                           ;hardware.c: 101: INTCON2 = 0b00000000;
  2234  00318A  0E00               	movlw	0
  2235  00318C  6EF1               	movwf	intcon2,c	;volatile
  2236                           
  2237                           ;hardware.c: 102: INTCON3 = 0b00000000;
  2238  00318E  0E00               	movlw	0
  2239  003190  6EF0               	movwf	intcon3,c	;volatile
  2240                           
  2241                           ;hardware.c: 104: PIE1 = 0b00101000;
  2242  003192  0E28               	movlw	40
  2243  003194  6E9D               	movwf	3997,c	;volatile
  2244                           
  2245                           ;hardware.c: 106: PIR1bits.SSPIF = 0;
  2246  003196  969E               	bcf	3998,3,c	;volatile
  2247                           
  2248                           ;hardware.c: 107: PIE1bits.SSPIE = 1;
  2249  003198  869D               	bsf	3997,3,c	;volatile
  2250                           
  2251                           ;hardware.c: 108: IPR1bits.SSPIP = 1;
  2252  00319A  869F               	bsf	3999,3,c	;volatile
  2253                           
  2254                           ;hardware.c: 109: RCONbits.IPEN = 0;
  2255  00319C  9ED0               	bcf	4048,7,c	;volatile
  2256  00319E  0012               	return		;funcret
  2257  0031A0                     __end_of_init_interrupt:
  2258                           	opt stack 0
  2259                           tblptru	equ	0xFF8
  2260                           tblptrh	equ	0xFF7
  2261                           tblptrl	equ	0xFF6
  2262                           tablat	equ	0xFF5
  2263                           intcon	equ	0xFF2
  2264                           intcon2	equ	0xFF1
  2265                           intcon3	equ	0xFF0
  2266                           postinc0	equ	0xFEE
  2267                           wreg	equ	0xFE8
  2268                           postdec1	equ	0xFE5
  2269                           fsr1h	equ	0xFE2
  2270                           fsr1l	equ	0xFE1
  2271                           postinc2	equ	0xFDE
  2272                           status	equ	0xFD8
  2273                           
  2274 ;; *************** function _inicializa_adc *****************
  2275 ;; Defined at:
  2276 ;;		line 40 in file "bibliotecas/adc.c"
  2277 ;; Parameters:    Size  Location     Type
  2278 ;;		None
  2279 ;; Auto vars:     Size  Location     Type
  2280 ;;		None
  2281 ;; Return value:  Size  Location     Type
  2282 ;;                  1    wreg      void 
  2283 ;; Registers used:
  2284 ;;		wreg, status,2
  2285 ;; Tracked objects:
  2286 ;;		On entry : 0/0
  2287 ;;		On exit  : 0/0
  2288 ;;		Unchanged: 0/0
  2289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2290 ;;      Params:         0       0       0       0       0       0       0       0       0
  2291 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2292 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2293 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2294 ;;Total ram usage:        0 bytes
  2295 ;; Hardware stack levels used:    1
  2296 ;; Hardware stack levels required when called:    2
  2297 ;; This function calls:
  2298 ;;		Nothing
  2299 ;; This function is called by:
  2300 ;;		_init_hardware
  2301 ;; This function uses a non-reentrant model
  2302 ;;
  2303                           
  2304                           	psect	text7
  2305  0030EE                     __ptext7:
  2306                           	opt stack 0
  2307  0030EE                     _inicializa_adc:
  2308                           	opt stack 27
  2309                           
  2310                           ;adc.c: 43: ADCON1=0x0B;
  2311                           
  2312                           ;incstack = 0
  2313  0030EE  0E0B               	movlw	11
  2314  0030F0  6EC1               	movwf	4033,c	;volatile
  2315                           
  2316                           ;adc.c: 44: ADCON1bits.VCFG0 = 0;
  2317  0030F2  98C1               	bcf	4033,4,c	;volatile
  2318                           
  2319                           ;adc.c: 45: ADCON1bits.VCFG1 = 0;
  2320  0030F4  9AC1               	bcf	4033,5,c	;volatile
  2321                           
  2322                           ;adc.c: 47: ADCON1bits.PCFG0 = 1;
  2323  0030F6  80C1               	bsf	4033,0,c	;volatile
  2324                           
  2325                           ;adc.c: 48: ADCON1bits.PCFG1 = 0;
  2326  0030F8  92C1               	bcf	4033,1,c	;volatile
  2327                           
  2328                           ;adc.c: 49: ADCON1bits.PCFG2 = 1;
  2329  0030FA  84C1               	bsf	4033,2,c	;volatile
  2330                           
  2331                           ;adc.c: 50: ADCON1bits.PCFG3 = 1;
  2332  0030FC  86C1               	bsf	4033,3,c	;volatile
  2333                           
  2334                           ;adc.c: 52: ADCON2bits.ADFM = 1;
  2335  0030FE  8EC0               	bsf	4032,7,c	;volatile
  2336                           
  2337                           ;adc.c: 53: ADCON2bits.ADCS0 = 0;
  2338  003100  90C0               	bcf	4032,0,c	;volatile
  2339                           
  2340                           ;adc.c: 54: ADCON2bits.ADCS1 = 1;
  2341  003102  82C0               	bsf	4032,1,c	;volatile
  2342                           
  2343                           ;adc.c: 55: ADCON2bits.ADCS2 = 1;
  2344  003104  84C0               	bsf	4032,2,c	;volatile
  2345                           
  2346                           ;adc.c: 56: ADCON2bits.ACQT0 = 1;
  2347  003106  86C0               	bsf	4032,3,c	;volatile
  2348                           
  2349                           ;adc.c: 57: ADCON2bits.ACQT1 = 0;
  2350  003108  98C0               	bcf	4032,4,c	;volatile
  2351                           
  2352                           ;adc.c: 58: ADCON2bits.ACQT2 = 0;
  2353  00310A  9AC0               	bcf	4032,5,c	;volatile
  2354                           
  2355                           ;adc.c: 59: ADCON0bits.ADON = 1;
  2356  00310C  80C2               	bsf	4034,0,c	;volatile
  2357  00310E  0012               	return		;funcret
  2358  003110                     __end_of_inicializa_adc:
  2359                           	opt stack 0
  2360                           tblptru	equ	0xFF8
  2361                           tblptrh	equ	0xFF7
  2362                           tblptrl	equ	0xFF6
  2363                           tablat	equ	0xFF5
  2364                           intcon	equ	0xFF2
  2365                           intcon2	equ	0xFF1
  2366                           intcon3	equ	0xFF0
  2367                           postinc0	equ	0xFEE
  2368                           wreg	equ	0xFE8
  2369                           postdec1	equ	0xFE5
  2370                           fsr1h	equ	0xFE2
  2371                           fsr1l	equ	0xFE1
  2372                           postinc2	equ	0xFDE
  2373                           status	equ	0xFD8
  2374                           
  2375 ;; *************** function _config_timer_zero *****************
  2376 ;; Defined at:
  2377 ;;		line 83 in file "bibliotecas/hardware.c"
  2378 ;; Parameters:    Size  Location     Type
  2379 ;;		None
  2380 ;; Auto vars:     Size  Location     Type
  2381 ;;		None
  2382 ;; Return value:  Size  Location     Type
  2383 ;;                  1    wreg      void 
  2384 ;; Registers used:
  2385 ;;		wreg, status,2, cstack
  2386 ;; Tracked objects:
  2387 ;;		On entry : 0/0
  2388 ;;		On exit  : 0/0
  2389 ;;		Unchanged: 0/0
  2390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2391 ;;      Params:         0       0       0       0       0       0       0       0       0
  2392 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2393 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2394 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2395 ;;Total ram usage:        0 bytes
  2396 ;; Hardware stack levels used:    1
  2397 ;; Hardware stack levels required when called:    3
  2398 ;; This function calls:
  2399 ;;		_write_timer_zero
  2400 ;; This function is called by:
  2401 ;;		_init_hardware
  2402 ;; This function uses a non-reentrant model
  2403 ;;
  2404                           
  2405                           	psect	text8
  2406  0031A0                     __ptext8:
  2407                           	opt stack 0
  2408  0031A0                     _config_timer_zero:
  2409                           	opt stack 26
  2410                           
  2411                           ;hardware.c: 85: T0CON = 0b11000011;
  2412                           
  2413                           ;incstack = 0
  2414  0031A0  0EC3               	movlw	195
  2415  0031A2  6ED5               	movwf	4053,c	;volatile
  2416                           
  2417                           ;hardware.c: 86: SPPCON = 0b00000000;
  2418  0031A4  0E00               	movlw	0
  2419  0031A6  6E65               	movwf	3941,c	;volatile
  2420                           
  2421                           ;hardware.c: 87: SPPCFG = 0b00000000;
  2422  0031A8  0E00               	movlw	0
  2423  0031AA  6E63               	movwf	3939,c	;volatile
  2424                           
  2425                           ;hardware.c: 88: write_timer_zero(0x0083);
  2426  0031AC  0E00               	movlw	0
  2427  0031AE  6E1B               	movwf	write_timer_zero@timer0+1,c
  2428  0031B0  0E83               	movlw	131
  2429  0031B2  6E1A               	movwf	write_timer_zero@timer0,c
  2430  0031B4  ECFF  F018         	call	_write_timer_zero	;wreg free
  2431  0031B8  0012               	return		;funcret
  2432  0031BA                     __end_of_config_timer_zero:
  2433                           	opt stack 0
  2434                           tblptru	equ	0xFF8
  2435                           tblptrh	equ	0xFF7
  2436                           tblptrl	equ	0xFF6
  2437                           tablat	equ	0xFF5
  2438                           intcon	equ	0xFF2
  2439                           intcon2	equ	0xFF1
  2440                           intcon3	equ	0xFF0
  2441                           postinc0	equ	0xFEE
  2442                           wreg	equ	0xFE8
  2443                           postdec1	equ	0xFE5
  2444                           fsr1h	equ	0xFE2
  2445                           fsr1l	equ	0xFE1
  2446                           postinc2	equ	0xFDE
  2447                           status	equ	0xFD8
  2448                           
  2449 ;; *************** function _write_timer_zero *****************
  2450 ;; Defined at:
  2451 ;;		line 143 in file "bibliotecas/hardware.c"
  2452 ;; Parameters:    Size  Location     Type
  2453 ;;  timer0          2   25[COMRAM] unsigned int 
  2454 ;; Auto vars:     Size  Location     Type
  2455 ;;  timer           2   27[COMRAM] struct Timers
  2456 ;; Return value:  Size  Location     Type
  2457 ;;                  1    wreg      void 
  2458 ;; Registers used:
  2459 ;;		None
  2460 ;; Tracked objects:
  2461 ;;		On entry : 0/0
  2462 ;;		On exit  : 0/0
  2463 ;;		Unchanged: 0/0
  2464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2465 ;;      Params:         2       0       0       0       0       0       0       0       0
  2466 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2467 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2468 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2469 ;;Total ram usage:        4 bytes
  2470 ;; Hardware stack levels used:    1
  2471 ;; Hardware stack levels required when called:    2
  2472 ;; This function calls:
  2473 ;;		Nothing
  2474 ;; This function is called by:
  2475 ;;		_config_timer_zero
  2476 ;; This function uses a non-reentrant model
  2477 ;;
  2478                           
  2479                           	psect	text9
  2480  0031FE                     __ptext9:
  2481                           	opt stack 0
  2482  0031FE                     _write_timer_zero:
  2483                           	opt stack 26
  2484                           
  2485                           ;hardware.c: 145: union Timers timer;
  2486                           ;hardware.c: 147: timer.lt = timer0;
  2487                           
  2488                           ;incstack = 0
  2489  0031FE  C01A  F01C         	movff	write_timer_zero@timer0,write_timer_zero@timer
  2490  003202  C01B  F01D         	movff	write_timer_zero@timer0+1,write_timer_zero@timer+1
  2491                           
  2492                           ;hardware.c: 149: TMR0H = timer.bt[1];
  2493  003206  C01D  FFD7         	movff	write_timer_zero@timer+1,4055	;volatile
  2494                           
  2495                           ;hardware.c: 150: TMR0L = timer.bt[0];
  2496  00320A  C01C  FFD6         	movff	write_timer_zero@timer,4054	;volatile
  2497  00320E  0012               	return		;funcret
  2498  003210                     __end_of_write_timer_zero:
  2499                           	opt stack 0
  2500                           tblptru	equ	0xFF8
  2501                           tblptrh	equ	0xFF7
  2502                           tblptrl	equ	0xFF6
  2503                           tablat	equ	0xFF5
  2504                           intcon	equ	0xFF2
  2505                           intcon2	equ	0xFF1
  2506                           intcon3	equ	0xFF0
  2507                           postinc0	equ	0xFEE
  2508                           wreg	equ	0xFE8
  2509                           postdec1	equ	0xFE5
  2510                           fsr1h	equ	0xFE2
  2511                           fsr1l	equ	0xFE1
  2512                           postinc2	equ	0xFDE
  2513                           status	equ	0xFD8
  2514                           
  2515 ;; *************** function _config_timer_dois *****************
  2516 ;; Defined at:
  2517 ;;		line 205 in file "bibliotecas/hardware.c"
  2518 ;; Parameters:    Size  Location     Type
  2519 ;;		None
  2520 ;; Auto vars:     Size  Location     Type
  2521 ;;		None
  2522 ;; Return value:  Size  Location     Type
  2523 ;;                  1    wreg      void 
  2524 ;; Registers used:
  2525 ;;		wreg, status,2
  2526 ;; Tracked objects:
  2527 ;;		On entry : 0/0
  2528 ;;		On exit  : 0/0
  2529 ;;		Unchanged: 0/0
  2530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2531 ;;      Params:         0       0       0       0       0       0       0       0       0
  2532 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2533 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2534 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2535 ;;Total ram usage:        0 bytes
  2536 ;; Hardware stack levels used:    1
  2537 ;; Hardware stack levels required when called:    2
  2538 ;; This function calls:
  2539 ;;		Nothing
  2540 ;; This function is called by:
  2541 ;;		_init_hardware
  2542 ;; This function uses a non-reentrant model
  2543 ;;
  2544                           
  2545                           	psect	text10
  2546  003254                     __ptext10:
  2547                           	opt stack 0
  2548  003254                     _config_timer_dois:
  2549                           	opt stack 27
  2550                           
  2551                           ;hardware.c: 207: T2CON = 0b00000100;
  2552                           
  2553                           ;incstack = 0
  2554  003254  0E04               	movlw	4
  2555  003256  6ECA               	movwf	4042,c	;volatile
  2556                           
  2557                           ;hardware.c: 208: TMR2 = 0;
  2558  003258  0E00               	movlw	0
  2559  00325A  6ECC               	movwf	4044,c	;volatile
  2560                           
  2561                           ;hardware.c: 209: PR2 = 0xFF;
  2562  00325C  68CB               	setf	4043,c	;volatile
  2563  00325E  0012               	return		;funcret
  2564  003260                     __end_of_config_timer_dois:
  2565                           	opt stack 0
  2566                           tblptru	equ	0xFF8
  2567                           tblptrh	equ	0xFF7
  2568                           tblptrl	equ	0xFF6
  2569                           tablat	equ	0xFF5
  2570                           intcon	equ	0xFF2
  2571                           intcon2	equ	0xFF1
  2572                           intcon3	equ	0xFF0
  2573                           postinc0	equ	0xFEE
  2574                           wreg	equ	0xFE8
  2575                           postdec1	equ	0xFE5
  2576                           fsr1h	equ	0xFE2
  2577                           fsr1l	equ	0xFE1
  2578                           postinc2	equ	0xFDE
  2579                           status	equ	0xFD8
  2580                           
  2581 ;; *************** function _inicializa_uart *****************
  2582 ;; Defined at:
  2583 ;;		line 206 in file "bibliotecas/uart.c"
  2584 ;; Parameters:    Size  Location     Type
  2585 ;;		None
  2586 ;; Auto vars:     Size  Location     Type
  2587 ;;		None
  2588 ;; Return value:  Size  Location     Type
  2589 ;;                  1    wreg      void 
  2590 ;; Registers used:
  2591 ;;		wreg, status,2, status,0, cstack
  2592 ;; Tracked objects:
  2593 ;;		On entry : 0/0
  2594 ;;		On exit  : 0/0
  2595 ;;		Unchanged: 0/0
  2596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2597 ;;      Params:         0       0       0       0       0       0       0       0       0
  2598 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2599 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2600 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2601 ;;Total ram usage:        0 bytes
  2602 ;; Hardware stack levels used:    1
  2603 ;; Hardware stack levels required when called:    4
  2604 ;; This function calls:
  2605 ;;		_configura_baudrate_uart
  2606 ;; This function is called by:
  2607 ;;		_main
  2608 ;; This function uses a non-reentrant model
  2609 ;;
  2610                           
  2611                           	psect	text11
  2612  003110                     __ptext11:
  2613                           	opt stack 0
  2614  003110                     _inicializa_uart:
  2615                           	opt stack 26
  2616                           
  2617                           ;uart.c: 208: TRISCbits.RC6 = 0;
  2618                           
  2619                           ;incstack = 0
  2620  003110  9C94               	bcf	3988,6,c	;volatile
  2621                           
  2622                           ;uart.c: 209: TRISCbits.RC7 = 0;
  2623  003112  9E94               	bcf	3988,7,c	;volatile
  2624                           
  2625                           ;uart.c: 211: (void)configura_baudrate_uart(9600);
  2626  003114  0E80               	movlw	128
  2627  003116  6E28               	movwf	configura_baudrate_uart@baudrate,c
  2628  003118  0E25               	movlw	37
  2629  00311A  6E29               	movwf	configura_baudrate_uart@baudrate+1,c
  2630  00311C  0E00               	movlw	0
  2631  00311E  6E2A               	movwf	configura_baudrate_uart@baudrate+2,c
  2632  003120  0E00               	movlw	0
  2633  003122  6E2B               	movwf	configura_baudrate_uart@baudrate+3,c
  2634  003124  EC2F  F010         	call	_configura_baudrate_uart	;wreg free
  2635                           
  2636                           ;uart.c: 213: TXSTA = 0x20;
  2637  003128  0E20               	movlw	32
  2638  00312A  6EAC               	movwf	4012,c	;volatile
  2639                           
  2640                           ;uart.c: 214: RCSTA = 0x90;
  2641  00312C  0E90               	movlw	144
  2642  00312E  6EAB               	movwf	4011,c	;volatile
  2643  003130  0012               	return		;funcret
  2644  003132                     __end_of_inicializa_uart:
  2645                           	opt stack 0
  2646                           tblptru	equ	0xFF8
  2647                           tblptrh	equ	0xFF7
  2648                           tblptrl	equ	0xFF6
  2649                           tablat	equ	0xFF5
  2650                           intcon	equ	0xFF2
  2651                           intcon2	equ	0xFF1
  2652                           intcon3	equ	0xFF0
  2653                           postinc0	equ	0xFEE
  2654                           wreg	equ	0xFE8
  2655                           postdec1	equ	0xFE5
  2656                           fsr1h	equ	0xFE2
  2657                           fsr1l	equ	0xFE1
  2658                           postinc2	equ	0xFDE
  2659                           status	equ	0xFD8
  2660                           
  2661 ;; *************** function _configura_baudrate_uart *****************
  2662 ;; Defined at:
  2663 ;;		line 50 in file "bibliotecas/uart.c"
  2664 ;; Parameters:    Size  Location     Type
  2665 ;;  baudrate        4   39[COMRAM] const long 
  2666 ;; Auto vars:     Size  Location     Type
  2667 ;;  x               2    8[BANK0 ] unsigned int 
  2668 ;; Return value:  Size  Location     Type
  2669 ;;                  1    wreg      unsigned char 
  2670 ;; Registers used:
  2671 ;;		wreg, status,2, status,0, cstack
  2672 ;; Tracked objects:
  2673 ;;		On entry : 0/0
  2674 ;;		On exit  : 0/0
  2675 ;;		Unchanged: 0/0
  2676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2677 ;;      Params:         4       0       0       0       0       0       0       0       0
  2678 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2679 ;;      Temps:          0       8       0       0       0       0       0       0       0
  2680 ;;      Totals:         4      10       0       0       0       0       0       0       0
  2681 ;;Total ram usage:       14 bytes
  2682 ;; Hardware stack levels used:    1
  2683 ;; Hardware stack levels required when called:    3
  2684 ;; This function calls:
  2685 ;;		___aldiv
  2686 ;; This function is called by:
  2687 ;;		_inicializa_uart
  2688 ;; This function uses a non-reentrant model
  2689 ;;
  2690                           
  2691                           	psect	text12
  2692  00205E                     __ptext12:
  2693                           	opt stack 0
  2694  00205E                     _configura_baudrate_uart:
  2695                           	opt stack 26
  2696                           
  2697                           ;uart.c: 52: unsigned int x;
  2698                           ;uart.c: 54: x = (48000000 - baudrate*64)/(baudrate*64);
  2699                           
  2700                           ;incstack = 0
  2701  00205E  C028  F060         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  2702  002062  C029  F061         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  2703  002066  C02A  F062         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  2704  00206A  C02B  F063         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  2705  00206E  0E06               	movlw	6
  2706  002070                     u8345:
  2707  002070  90D8               	bcf	status,0,c
  2708  002072  0100               	movlb	0	; () banked
  2709  002074  3760               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  2710  002076  3761               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  2711  002078  3762               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  2712  00207A  3763               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  2713  00207C  2EE8               	decfsz	wreg,f,c
  2714  00207E  D7F8               	goto	u8345
  2715  002080  1F60               	comf	??_configura_baudrate_uart& (0+255),f,b
  2716  002082  1F61               	comf	(??_configura_baudrate_uart+1)& (0+255),f,b
  2717  002084  1F62               	comf	(??_configura_baudrate_uart+2)& (0+255),f,b
  2718  002086  1F63               	comf	(??_configura_baudrate_uart+3)& (0+255),f,b
  2719  002088  2B60               	incf	??_configura_baudrate_uart& (0+255),f,b
  2720  00208A  0E00               	movlw	0
  2721  00208C  2361               	addwfc	(??_configura_baudrate_uart+1)& (0+255),f,b
  2722  00208E  2362               	addwfc	(??_configura_baudrate_uart+2)& (0+255),f,b
  2723  002090  2363               	addwfc	(??_configura_baudrate_uart+3)& (0+255),f,b
  2724  002092  0E00               	movlw	0
  2725  002094  2560               	addwf	??_configura_baudrate_uart& (0+255),w,b
  2726  002096  6E1A               	movwf	___aldiv@dividend,c
  2727  002098  0E6C               	movlw	108
  2728  00209A  2161               	addwfc	(??_configura_baudrate_uart+1)& (0+255),w,b
  2729  00209C  6E1B               	movwf	___aldiv@dividend+1,c
  2730  00209E  0EDC               	movlw	220
  2731  0020A0  2162               	addwfc	(??_configura_baudrate_uart+2)& (0+255),w,b
  2732  0020A2  6E1C               	movwf	___aldiv@dividend+2,c
  2733  0020A4  0E02               	movlw	2
  2734  0020A6  2163               	addwfc	(??_configura_baudrate_uart+3)& (0+255),w,b
  2735  0020A8  6E1D               	movwf	___aldiv@dividend+3,c
  2736  0020AA  C028  F064         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  2737  0020AE  C029  F065         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  2738  0020B2  C02A  F066         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  2739  0020B6  C02B  F067         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  2740  0020BA  0E06               	movlw	6
  2741  0020BC                     u8355:
  2742  0020BC  90D8               	bcf	status,0,c
  2743  0020BE  3764               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  2744  0020C0  3765               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  2745  0020C2  3766               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  2746  0020C4  3767               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  2747  0020C6  2EE8               	decfsz	wreg,f,c
  2748  0020C8  D7F9               	goto	u8355
  2749  0020CA  C064  F01E         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  2750  0020CE  C065  F01F         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  2751  0020D2  C066  F020         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  2752  0020D6  C067  F021         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  2753  0020DA  ECF7  F012         	call	___aldiv	;wreg free
  2754  0020DE  C01A  F068         	movff	?___aldiv,configura_baudrate_uart@x
  2755  0020E2  C01B  F069         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  2756                           
  2757                           ;uart.c: 55: if(x > 255)
  2758  0020E6  0100               	movlb	0	; () banked
  2759  0020E8  0569               	decf	(configura_baudrate_uart@x+1)& (0+255),w,b
  2760  0020EA  A0D8               	btfss	status,0,c
  2761  0020EC  D044               	goto	l342
  2762                           
  2763                           ; BSR set to: 0
  2764                           ;uart.c: 56: {
  2765                           ;uart.c: 57: x = (48000000 - baudrate*16)/(baudrate*16);
  2766  0020EE  C028  F060         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  2767  0020F2  C029  F061         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  2768  0020F6  C02A  F062         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  2769  0020FA  C02B  F063         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  2770  0020FE  0E04               	movlw	4
  2771  002100                     u8375:
  2772  002100  90D8               	bcf	status,0,c
  2773  002102  3760               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  2774  002104  3761               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  2775  002106  3762               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  2776  002108  3763               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  2777  00210A  2EE8               	decfsz	wreg,f,c
  2778  00210C  D7F9               	goto	u8375
  2779  00210E  1F60               	comf	??_configura_baudrate_uart& (0+255),f,b
  2780  002110  1F61               	comf	(??_configura_baudrate_uart+1)& (0+255),f,b
  2781  002112  1F62               	comf	(??_configura_baudrate_uart+2)& (0+255),f,b
  2782  002114  1F63               	comf	(??_configura_baudrate_uart+3)& (0+255),f,b
  2783  002116  2B60               	incf	??_configura_baudrate_uart& (0+255),f,b
  2784  002118  0E00               	movlw	0
  2785  00211A  2361               	addwfc	(??_configura_baudrate_uart+1)& (0+255),f,b
  2786  00211C  2362               	addwfc	(??_configura_baudrate_uart+2)& (0+255),f,b
  2787  00211E  2363               	addwfc	(??_configura_baudrate_uart+3)& (0+255),f,b
  2788  002120  0E00               	movlw	0
  2789  002122  2560               	addwf	??_configura_baudrate_uart& (0+255),w,b
  2790  002124  6E1A               	movwf	___aldiv@dividend,c
  2791  002126  0E6C               	movlw	108
  2792  002128  2161               	addwfc	(??_configura_baudrate_uart+1)& (0+255),w,b
  2793  00212A  6E1B               	movwf	___aldiv@dividend+1,c
  2794  00212C  0EDC               	movlw	220
  2795  00212E  2162               	addwfc	(??_configura_baudrate_uart+2)& (0+255),w,b
  2796  002130  6E1C               	movwf	___aldiv@dividend+2,c
  2797  002132  0E02               	movlw	2
  2798  002134  2163               	addwfc	(??_configura_baudrate_uart+3)& (0+255),w,b
  2799  002136  6E1D               	movwf	___aldiv@dividend+3,c
  2800  002138  C028  F064         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  2801  00213C  C029  F065         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  2802  002140  C02A  F066         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  2803  002144  C02B  F067         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  2804  002148  0E04               	movlw	4
  2805  00214A                     u8385:
  2806  00214A  90D8               	bcf	status,0,c
  2807  00214C  3764               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  2808  00214E  3765               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  2809  002150  3766               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  2810  002152  3767               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  2811  002154  2EE8               	decfsz	wreg,f,c
  2812  002156  D7F9               	goto	u8385
  2813  002158  C064  F01E         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  2814  00215C  C065  F01F         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  2815  002160  C066  F020         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  2816  002164  C067  F021         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  2817  002168  ECF7  F012         	call	___aldiv	;wreg free
  2818  00216C  C01A  F068         	movff	?___aldiv,configura_baudrate_uart@x
  2819  002170  C01B  F069         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  2820                           
  2821                           ;uart.c: 58: BRGH = 1;
  2822  002174  84AC               	bsf	4012,2,c	;volatile
  2823  002176                     l342:
  2824                           
  2825                           ;uart.c: 59: }
  2826                           ;uart.c: 60: if(x < 256)
  2827  002176  0100               	movlb	0	; () banked
  2828  002178  0569               	decf	(configura_baudrate_uart@x+1)& (0+255),w,b
  2829  00217A  B0D8               	btfsc	status,0,c
  2830  00217C  0012               	return	
  2831                           
  2832                           ; BSR set to: 0
  2833                           ;uart.c: 61: {
  2834                           ;uart.c: 62: SPBRG = x;
  2835  00217E  C068  FFAF         	movff	configura_baudrate_uart@x,4015	;volatile
  2836                           
  2837                           ;uart.c: 63: SYNC = 0;
  2838  002182  98AC               	bcf	4012,4,c	;volatile
  2839                           
  2840                           ;uart.c: 64: SPEN = 1;
  2841  002184  8EAB               	bsf	4011,7,c	;volatile
  2842                           
  2843                           ;uart.c: 65: TRISCbits.RC7 = 1;
  2844  002186  8E94               	bsf	3988,7,c	;volatile
  2845                           
  2846                           ;uart.c: 66: TRISCbits.RC6 = 1;
  2847  002188  8C94               	bsf	3988,6,c	;volatile
  2848                           
  2849                           ;uart.c: 67: CREN = 1;
  2850  00218A  88AB               	bsf	4011,4,c	;volatile
  2851                           
  2852                           ;uart.c: 68: TXEN = 1;
  2853  00218C  8AAC               	bsf	4012,5,c	;volatile
  2854                           
  2855                           ;uart.c: 70: return (1);
  2856                           ;	Return value of _configura_baudrate_uart is never used
  2857  00218E  0012               	return	
  2858  002190                     __end_of_configura_baudrate_uart:
  2859                           	opt stack 0
  2860                           tblptru	equ	0xFF8
  2861                           tblptrh	equ	0xFF7
  2862                           tblptrl	equ	0xFF6
  2863                           tablat	equ	0xFF5
  2864                           intcon	equ	0xFF2
  2865                           intcon2	equ	0xFF1
  2866                           intcon3	equ	0xFF0
  2867                           postinc0	equ	0xFEE
  2868                           wreg	equ	0xFE8
  2869                           postdec1	equ	0xFE5
  2870                           fsr1h	equ	0xFE2
  2871                           fsr1l	equ	0xFE1
  2872                           postinc2	equ	0xFDE
  2873                           status	equ	0xFD8
  2874                           
  2875 ;; *************** function ___aldiv *****************
  2876 ;; Defined at:
  2877 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  2878 ;; Parameters:    Size  Location     Type
  2879 ;;  dividend        4   25[COMRAM] long 
  2880 ;;  divisor         4   29[COMRAM] long 
  2881 ;; Auto vars:     Size  Location     Type
  2882 ;;  quotient        4   35[COMRAM] long 
  2883 ;;  sign            1   34[COMRAM] unsigned char 
  2884 ;;  counter         1   33[COMRAM] unsigned char 
  2885 ;; Return value:  Size  Location     Type
  2886 ;;                  4   25[COMRAM] long 
  2887 ;; Registers used:
  2888 ;;		wreg, status,2, status,0
  2889 ;; Tracked objects:
  2890 ;;		On entry : 0/0
  2891 ;;		On exit  : 0/0
  2892 ;;		Unchanged: 0/0
  2893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2894 ;;      Params:         8       0       0       0       0       0       0       0       0
  2895 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2896 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2897 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2898 ;;Total ram usage:       14 bytes
  2899 ;; Hardware stack levels used:    1
  2900 ;; Hardware stack levels required when called:    2
  2901 ;; This function calls:
  2902 ;;		Nothing
  2903 ;; This function is called by:
  2904 ;;		_configura_baudrate_uart
  2905 ;; This function uses a non-reentrant model
  2906 ;;
  2907                           
  2908                           	psect	text13
  2909  0025EE                     __ptext13:
  2910                           	opt stack 0
  2911  0025EE                     ___aldiv:
  2912                           	opt stack 26
  2913                           
  2914                           ; BSR set to: 0
  2915                           ;incstack = 0
  2916  0025EE  0E00               	movlw	0
  2917  0025F0  6E23               	movwf	___aldiv@sign,c
  2918  0025F2  AE21               	btfss	___aldiv@divisor+3,7,c
  2919  0025F4  D00A               	goto	l1132
  2920  0025F6  1E21               	comf	___aldiv@divisor+3,f,c
  2921  0025F8  1E20               	comf	___aldiv@divisor+2,f,c
  2922  0025FA  1E1F               	comf	___aldiv@divisor+1,f,c
  2923  0025FC  6C1E               	negf	___aldiv@divisor,c
  2924  0025FE  0E00               	movlw	0
  2925  002600  221F               	addwfc	___aldiv@divisor+1,f,c
  2926  002602  2220               	addwfc	___aldiv@divisor+2,f,c
  2927  002604  2221               	addwfc	___aldiv@divisor+3,f,c
  2928  002606  0E01               	movlw	1
  2929  002608  6E23               	movwf	___aldiv@sign,c
  2930  00260A                     l1132:
  2931  00260A  AE1D               	btfss	___aldiv@dividend+3,7,c
  2932  00260C  D00A               	goto	l1133
  2933  00260E  1E1D               	comf	___aldiv@dividend+3,f,c
  2934  002610  1E1C               	comf	___aldiv@dividend+2,f,c
  2935  002612  1E1B               	comf	___aldiv@dividend+1,f,c
  2936  002614  6C1A               	negf	___aldiv@dividend,c
  2937  002616  0E00               	movlw	0
  2938  002618  221B               	addwfc	___aldiv@dividend+1,f,c
  2939  00261A  221C               	addwfc	___aldiv@dividend+2,f,c
  2940  00261C  221D               	addwfc	___aldiv@dividend+3,f,c
  2941  00261E  0E01               	movlw	1
  2942  002620  1A23               	xorwf	___aldiv@sign,f,c
  2943  002622                     l1133:
  2944  002622  0E00               	movlw	0
  2945  002624  6E24               	movwf	___aldiv@quotient,c
  2946  002626  0E00               	movlw	0
  2947  002628  6E25               	movwf	___aldiv@quotient+1,c
  2948  00262A  0E00               	movlw	0
  2949  00262C  6E26               	movwf	___aldiv@quotient+2,c
  2950  00262E  0E00               	movlw	0
  2951  002630  6E27               	movwf	___aldiv@quotient+3,c
  2952  002632  501E               	movf	___aldiv@divisor,w,c
  2953  002634  101F               	iorwf	___aldiv@divisor+1,w,c
  2954  002636  1020               	iorwf	___aldiv@divisor+2,w,c
  2955  002638  1021               	iorwf	___aldiv@divisor+3,w,c
  2956  00263A  B4D8               	btfsc	status,2,c
  2957  00263C  D02A               	goto	l1140
  2958  00263E  0E01               	movlw	1
  2959  002640  6E22               	movwf	___aldiv@counter,c
  2960  002642  D006               	goto	l1135
  2961  002644  90D8               	bcf	status,0,c
  2962  002646  361E               	rlcf	___aldiv@divisor,f,c
  2963  002648  361F               	rlcf	___aldiv@divisor+1,f,c
  2964  00264A  3620               	rlcf	___aldiv@divisor+2,f,c
  2965  00264C  3621               	rlcf	___aldiv@divisor+3,f,c
  2966  00264E  2A22               	incf	___aldiv@counter,f,c
  2967  002650                     l1135:
  2968  002650  AE21               	btfss	___aldiv@divisor+3,7,c
  2969  002652  D7F8               	goto	l1136
  2970  002654                     u8310:
  2971  002654  90D8               	bcf	status,0,c
  2972  002656  3624               	rlcf	___aldiv@quotient,f,c
  2973  002658  3625               	rlcf	___aldiv@quotient+1,f,c
  2974  00265A  3626               	rlcf	___aldiv@quotient+2,f,c
  2975  00265C  3627               	rlcf	___aldiv@quotient+3,f,c
  2976  00265E  501E               	movf	___aldiv@divisor,w,c
  2977  002660  5C1A               	subwf	___aldiv@dividend,w,c
  2978  002662  501F               	movf	___aldiv@divisor+1,w,c
  2979  002664  581B               	subwfb	___aldiv@dividend+1,w,c
  2980  002666  5020               	movf	___aldiv@divisor+2,w,c
  2981  002668  581C               	subwfb	___aldiv@dividend+2,w,c
  2982  00266A  5021               	movf	___aldiv@divisor+3,w,c
  2983  00266C  581D               	subwfb	___aldiv@dividend+3,w,c
  2984  00266E  A0D8               	btfss	status,0,c
  2985  002670  D009               	goto	l1139
  2986  002672  501E               	movf	___aldiv@divisor,w,c
  2987  002674  5E1A               	subwf	___aldiv@dividend,f,c
  2988  002676  501F               	movf	___aldiv@divisor+1,w,c
  2989  002678  5A1B               	subwfb	___aldiv@dividend+1,f,c
  2990  00267A  5020               	movf	___aldiv@divisor+2,w,c
  2991  00267C  5A1C               	subwfb	___aldiv@dividend+2,f,c
  2992  00267E  5021               	movf	___aldiv@divisor+3,w,c
  2993  002680  5A1D               	subwfb	___aldiv@dividend+3,f,c
  2994  002682  8024               	bsf	___aldiv@quotient,0,c
  2995  002684                     l1139:
  2996  002684  90D8               	bcf	status,0,c
  2997  002686  3221               	rrcf	___aldiv@divisor+3,f,c
  2998  002688  3220               	rrcf	___aldiv@divisor+2,f,c
  2999  00268A  321F               	rrcf	___aldiv@divisor+1,f,c
  3000  00268C  321E               	rrcf	___aldiv@divisor,f,c
  3001  00268E  2E22               	decfsz	___aldiv@counter,f,c
  3002  002690  D7E1               	goto	u8310
  3003  002692                     l1140:
  3004  002692  5023               	movf	___aldiv@sign,w,c
  3005  002694  B4D8               	btfsc	status,2,c
  3006  002696  D008               	goto	l1141
  3007  002698  1E27               	comf	___aldiv@quotient+3,f,c
  3008  00269A  1E26               	comf	___aldiv@quotient+2,f,c
  3009  00269C  1E25               	comf	___aldiv@quotient+1,f,c
  3010  00269E  6C24               	negf	___aldiv@quotient,c
  3011  0026A0  0E00               	movlw	0
  3012  0026A2  2225               	addwfc	___aldiv@quotient+1,f,c
  3013  0026A4  2226               	addwfc	___aldiv@quotient+2,f,c
  3014  0026A6  2227               	addwfc	___aldiv@quotient+3,f,c
  3015  0026A8                     l1141:
  3016  0026A8  C024  F01A         	movff	___aldiv@quotient,?___aldiv
  3017  0026AC  C025  F01B         	movff	___aldiv@quotient+1,?___aldiv+1
  3018  0026B0  C026  F01C         	movff	___aldiv@quotient+2,?___aldiv+2
  3019  0026B4  C027  F01D         	movff	___aldiv@quotient+3,?___aldiv+3
  3020  0026B8  0012               	return	
  3021  0026BA                     __end_of___aldiv:
  3022                           	opt stack 0
  3023                           tblptru	equ	0xFF8
  3024                           tblptrh	equ	0xFF7
  3025                           tblptrl	equ	0xFF6
  3026                           tablat	equ	0xFF5
  3027                           intcon	equ	0xFF2
  3028                           intcon2	equ	0xFF1
  3029                           intcon3	equ	0xFF0
  3030                           postinc0	equ	0xFEE
  3031                           wreg	equ	0xFE8
  3032                           postdec1	equ	0xFE5
  3033                           fsr1h	equ	0xFE2
  3034                           fsr1l	equ	0xFE1
  3035                           postinc2	equ	0xFDE
  3036                           status	equ	0xFD8
  3037                           
  3038 ;; *************** function _inicializa_tarefas *****************
  3039 ;; Defined at:
  3040 ;;		line 181 in file "main.c"
  3041 ;; Parameters:    Size  Location     Type
  3042 ;;		None
  3043 ;; Auto vars:     Size  Location     Type
  3044 ;;		None
  3045 ;; Return value:  Size  Location     Type
  3046 ;;                  1    wreg      void 
  3047 ;; Registers used:
  3048 ;;		wreg, status,2, status,0
  3049 ;; Tracked objects:
  3050 ;;		On entry : 0/0
  3051 ;;		On exit  : 0/0
  3052 ;;		Unchanged: 0/0
  3053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3054 ;;      Params:         0       0       0       0       0       0       0       0       0
  3055 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3056 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3057 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3058 ;;Total ram usage:        0 bytes
  3059 ;; Hardware stack levels used:    1
  3060 ;; Hardware stack levels required when called:    2
  3061 ;; This function calls:
  3062 ;;		Nothing
  3063 ;; This function is called by:
  3064 ;;		_main
  3065 ;; This function uses a non-reentrant model
  3066 ;;
  3067                           
  3068                           	psect	text14
  3069  003040                     __ptext14:
  3070                           	opt stack 0
  3071  003040                     _inicializa_tarefas:
  3072                           	opt stack 28
  3073                           
  3074                           ;main.c: 184: p_tarefas[0] = acende_led4;
  3075                           
  3076                           ;incstack = 0
  3077  003040  0EA6               	movlw	low _acende_led4
  3078  003042  0100               	movlb	0	; () banked
  3079  003044  6FD5               	movwf	_p_tarefas& (0+255),b
  3080  003046  0E30               	movlw	high _acende_led4
  3081  003048  6FD6               	movwf	(_p_tarefas+1)& (0+255),b
  3082                           
  3083                           ;main.c: 185: p_tarefas[1] = SDCard;
  3084  00304A  0ED4               	movlw	low _SDCard
  3085  00304C  6FD7               	movwf	(_p_tarefas+2)& (0+255),b
  3086  00304E  0E19               	movlw	high _SDCard
  3087  003050  6FD8               	movwf	(_p_tarefas+3)& (0+255),b
  3088                           
  3089                           ; BSR set to: 0
  3090                           ;main.c: 191: tempo_backup[0] = 1000;
  3091  003052  0E03               	movlw	3
  3092  003054  0101               	movlb	1	; () banked
  3093  003056  6F4C               	movwf	(_tempo_backup+1)& (0+255),b
  3094  003058  0EE8               	movlw	232
  3095  00305A  6F4B               	movwf	_tempo_backup& (0+255),b
  3096                           
  3097                           ; BSR set to: 1
  3098                           ;main.c: 192: tempo_backup[1] = 2000;
  3099  00305C  0E07               	movlw	7
  3100  00305E  6F4E               	movwf	(_tempo_backup+3)& (0+255),b
  3101  003060  0ED0               	movlw	208
  3102  003062  6F4D               	movwf	(_tempo_backup+2)& (0+255),b
  3103                           
  3104                           ; BSR set to: 1
  3105                           ;main.c: 198: tempo_tarefa[0] = 1000;
  3106  003064  0E03               	movlw	3
  3107  003066  6E2E               	movwf	_tempo_tarefa+1,c
  3108  003068  0EE8               	movlw	232
  3109  00306A  6E2D               	movwf	_tempo_tarefa,c
  3110                           
  3111                           ; BSR set to: 1
  3112                           ;main.c: 199: tempo_tarefa[1] = 2000;
  3113  00306C  0E07               	movlw	7
  3114  00306E  6E30               	movwf	_tempo_tarefa+3,c
  3115  003070  0ED0               	movlw	208
  3116  003072  6E2F               	movwf	_tempo_tarefa+2,c
  3117                           
  3118                           ; BSR set to: 1
  3119                           ;main.c: 204: tarefa_em_execucao = 0;
  3120  003074  0E00               	movlw	0
  3121  003076  6E3E               	movwf	_tarefa_em_execucao,c	;volatile
  3122                           
  3123                           ; BSR set to: 1
  3124  003078  0012               	return		;funcret
  3125  00307A                     __end_of_inicializa_tarefas:
  3126                           	opt stack 0
  3127                           tblptru	equ	0xFF8
  3128                           tblptrh	equ	0xFF7
  3129                           tblptrl	equ	0xFF6
  3130                           tablat	equ	0xFF5
  3131                           intcon	equ	0xFF2
  3132                           intcon2	equ	0xFF1
  3133                           intcon3	equ	0xFF0
  3134                           postinc0	equ	0xFEE
  3135                           wreg	equ	0xFE8
  3136                           postdec1	equ	0xFE5
  3137                           fsr1h	equ	0xFE2
  3138                           fsr1l	equ	0xFE1
  3139                           postinc2	equ	0xFDE
  3140                           status	equ	0xFD8
  3141                           
  3142 ;; *************** function _inicializa_shrc *****************
  3143 ;; Defined at:
  3144 ;;		line 47 in file "bibliotecas/SHRC.c"
  3145 ;; Parameters:    Size  Location     Type
  3146 ;;		None
  3147 ;; Auto vars:     Size  Location     Type
  3148 ;;		None
  3149 ;; Return value:  Size  Location     Type
  3150 ;;                  1    wreg      void 
  3151 ;; Registers used:
  3152 ;;		None
  3153 ;; Tracked objects:
  3154 ;;		On entry : 0/0
  3155 ;;		On exit  : 0/0
  3156 ;;		Unchanged: 0/0
  3157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3158 ;;      Params:         0       0       0       0       0       0       0       0       0
  3159 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3160 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3161 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3162 ;;Total ram usage:        0 bytes
  3163 ;; Hardware stack levels used:    1
  3164 ;; Hardware stack levels required when called:    2
  3165 ;; This function calls:
  3166 ;;		Nothing
  3167 ;; This function is called by:
  3168 ;;		_main
  3169 ;; This function uses a non-reentrant model
  3170 ;;
  3171                           
  3172                           	psect	text15
  3173  00328A                     __ptext15:
  3174                           	opt stack 0
  3175  00328A                     _inicializa_shrc:
  3176                           	opt stack 28
  3177                           
  3178                           ;SHRC.c: 49: LATBbits.LATB5 = 0;
  3179                           
  3180                           ; BSR set to: 1
  3181                           ;incstack = 0
  3182  00328A  9A8A               	bcf	3978,5,c	;volatile
  3183                           
  3184                           ;SHRC.c: 50: LATBbits.LATB6 = 0;
  3185  00328C  9C8A               	bcf	3978,6,c	;volatile
  3186                           
  3187                           ;SHRC.c: 51: LATBbits.LATB7 = 0;
  3188  00328E  9E8A               	bcf	3978,7,c	;volatile
  3189  003290  0012               	return		;funcret
  3190  003292                     __end_of_inicializa_shrc:
  3191                           	opt stack 0
  3192                           tblptru	equ	0xFF8
  3193                           tblptrh	equ	0xFF7
  3194                           tblptrl	equ	0xFF6
  3195                           tablat	equ	0xFF5
  3196                           intcon	equ	0xFF2
  3197                           intcon2	equ	0xFF1
  3198                           intcon3	equ	0xFF0
  3199                           postinc0	equ	0xFEE
  3200                           wreg	equ	0xFE8
  3201                           postdec1	equ	0xFE5
  3202                           fsr1h	equ	0xFE2
  3203                           fsr1l	equ	0xFE1
  3204                           postinc2	equ	0xFDE
  3205                           status	equ	0xFD8
  3206                           
  3207 ;; *************** function _inicializa_SPI *****************
  3208 ;; Defined at:
  3209 ;;		line 49 in file "bibliotecas/SPI.c"
  3210 ;; Parameters:    Size  Location     Type
  3211 ;;  sync_mode       1    wreg     unsigned char 
  3212 ;;  bus_mode        1   31[COMRAM] unsigned char 
  3213 ;;  smp_phase       1   32[COMRAM] unsigned char 
  3214 ;; Auto vars:     Size  Location     Type
  3215 ;;  sync_mode       1   33[COMRAM] unsigned char 
  3216 ;; Return value:  Size  Location     Type
  3217 ;;                  1    wreg      void 
  3218 ;; Registers used:
  3219 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3220 ;; Tracked objects:
  3221 ;;		On entry : 0/0
  3222 ;;		On exit  : 0/0
  3223 ;;		Unchanged: 0/0
  3224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3225 ;;      Params:         2       0       0       0       0       0       0       0       0
  3226 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3227 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3228 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3229 ;;Total ram usage:        3 bytes
  3230 ;; Hardware stack levels used:    1
  3231 ;; Hardware stack levels required when called:    5
  3232 ;; This function calls:
  3233 ;;		_escreve_cmd_lcd
  3234 ;;		_escreve_frase_ram_lcd
  3235 ;;		_posicao_cursor_lcd
  3236 ;; This function is called by:
  3237 ;;		_main
  3238 ;; This function uses a non-reentrant model
  3239 ;;
  3240                           
  3241                           	psect	text16
  3242  002B28                     __ptext16:
  3243                           	opt stack 0
  3244  002B28                     _inicializa_SPI:
  3245                           	opt stack 25
  3246                           
  3247                           ;incstack = 0
  3248                           ;inicializa_SPI@sync_mode stored from wreg
  3249  002B28  6E22               	movwf	inicializa_SPI@sync_mode,c
  3250                           
  3251                           ;SPI.c: 51: SSPCON1bits.SSPEN = 0;
  3252  002B2A  9AC6               	bcf	4038,5,c	;volatile
  3253                           
  3254                           ;SPI.c: 52: SSPSTAT &= 0x3F;
  3255  002B2C  0E3F               	movlw	63
  3256  002B2E  16C7               	andwf	4039,f,c	;volatile
  3257                           
  3258                           ;SPI.c: 53: SSPCON1 = 0x00;
  3259  002B30  0E00               	movlw	0
  3260  002B32  6EC6               	movwf	4038,c	;volatile
  3261                           
  3262                           ;SPI.c: 54: SSPCON1 |= sync_mode<<7;
  3263  002B34  4022               	rrncf	inicializa_SPI@sync_mode,w,c
  3264  002B36  0B80               	andlw	128
  3265  002B38  12C6               	iorwf	4038,f,c	;volatile
  3266                           
  3267                           ;SPI.c: 55: SSPSTAT |= smp_phase;
  3268  002B3A  5021               	movf	inicializa_SPI@smp_phase,w,c
  3269  002B3C  12C7               	iorwf	4039,f,c	;volatile
  3270                           
  3271                           ;SPI.c: 56: TRISBbits.RB4 = 0;
  3272  002B3E  9893               	bcf	3987,4,c	;volatile
  3273                           
  3274                           ;SPI.c: 57: switch(bus_mode)
  3275  002B40  D005               	goto	l94
  3276  002B42                     l95:
  3277                           
  3278                           ;SPI.c: 60: SSPSTATbits.CKE = 1;
  3279  002B42  8CC7               	bsf	4039,6,c	;volatile
  3280                           
  3281                           ;SPI.c: 61: break;
  3282  002B44  D015               	goto	l100
  3283  002B46                     l97:
  3284                           
  3285                           ;SPI.c: 63: SSPSTATbits.CKE = 1;
  3286  002B46  8CC7               	bsf	4039,6,c	;volatile
  3287  002B48                     l98:
  3288                           
  3289                           ;SPI.c: 67: SSPCON1bits.CKP = 1;
  3290  002B48  88C6               	bsf	4038,4,c	;volatile
  3291                           
  3292                           ;SPI.c: 71: }
  3293                           
  3294                           ;SPI.c: 70: break;
  3295                           
  3296                           ;SPI.c: 69: default:
  3297                           
  3298                           ;SPI.c: 68: break;
  3299  002B4A  D012               	goto	l100
  3300  002B4C                     l94:
  3301  002B4C  5020               	movf	inicializa_SPI@bus_mode,w,c
  3302                           
  3303                           ; Switch size 1, requested type "space"
  3304                           ; Number of cases is 3, Range of values is 0 to 3
  3305                           ; switch strategies available:
  3306                           ; Name         Instructions Cycles
  3307                           ; simple_byte           10     6 (average)
  3308                           ;	Chosen strategy is simple_byte
  3309  002B4E  0A00               	xorlw	0	; case 0
  3310  002B50  B4D8               	btfsc	status,2,c
  3311  002B52  D7F7               	goto	l95
  3312  002B54  0A02               	xorlw	2	; case 2
  3313  002B56  B4D8               	btfsc	status,2,c
  3314  002B58  D7F6               	goto	l97
  3315  002B5A  0A01               	xorlw	1	; case 3
  3316  002B5C  B4D8               	btfsc	status,2,c
  3317  002B5E  D7F4               	goto	l98
  3318                           
  3319                           ;SPI.c: 73: switch( sync_mode )
  3320  002B60  D007               	goto	l100
  3321  002B62                     l101:
  3322                           
  3323                           ;SPI.c: 76: TRISBbits.RB1 = 1;
  3324  002B62  8293               	bsf	3987,1,c	;volatile
  3325                           
  3326                           ;SPI.c: 77: TRISBbits.RB4 = 1;
  3327  002B64  8893               	bsf	3987,4,c	;volatile
  3328                           
  3329                           ;SPI.c: 78: break;
  3330  002B66  D00C               	goto	l102
  3331  002B68                     l103:
  3332                           
  3333                           ;SPI.c: 81: TRISBbits.RB1 = 1;
  3334  002B68  8293               	bsf	3987,1,c	;volatile
  3335                           
  3336                           ;SPI.c: 82: break;
  3337  002B6A  D00A               	goto	l102
  3338  002B6C                     l104:
  3339                           
  3340                           ;SPI.c: 85: TRISBbits.RB1 = 0;
  3341  002B6C  9293               	bcf	3987,1,c	;volatile
  3342                           
  3343                           ;SPI.c: 87: }
  3344                           
  3345                           ;SPI.c: 86: break;
  3346  002B6E  D008               	goto	l102
  3347  002B70                     l100:
  3348  002B70  5022               	movf	inicializa_SPI@sync_mode,w,c
  3349                           
  3350                           ; Switch size 1, requested type "space"
  3351                           ; Number of cases is 2, Range of values is 4 to 5
  3352                           ; switch strategies available:
  3353                           ; Name         Instructions Cycles
  3354                           ; simple_byte            7     4 (average)
  3355                           ;	Chosen strategy is simple_byte
  3356  002B72  0A04               	xorlw	4	; case 4
  3357  002B74  B4D8               	btfsc	status,2,c
  3358  002B76  D7F5               	goto	l101
  3359  002B78  0A01               	xorlw	1	; case 5
  3360  002B7A  B4D8               	btfsc	status,2,c
  3361  002B7C  D7F5               	goto	l103
  3362  002B7E  D7F6               	goto	l104
  3363  002B80                     l102:
  3364                           
  3365                           ;SPI.c: 106: TRISBbits.RB0 = 1;
  3366  002B80  8093               	bsf	3987,0,c	;volatile
  3367                           
  3368                           ;SPI.c: 107: TRISCbits.RC7 = 0;
  3369  002B82  9E94               	bcf	3988,7,c	;volatile
  3370                           
  3371                           ;SPI.c: 110: SSPCON1 |= 0x20;
  3372  002B84  8AC6               	bsf	4038,5,c	;volatile
  3373                           
  3374                           ;SPI.c: 111: posicao_cursor_lcd(1,1);
  3375  002B86  0E01               	movlw	1
  3376  002B88  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3377  002B8A  0E01               	movlw	1
  3378  002B8C  EC80  F016         	call	_posicao_cursor_lcd
  3379                           
  3380                           ;SPI.c: 112: escreve_frase_ram_lcd("SPI configurada!");
  3381  002B90  0ECD               	movlw	low STR_3
  3382  002B92  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3383  002B94  0E61               	movlw	high STR_3
  3384  002B96  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3385  002B98  EC74  F017         	call	_escreve_frase_ram_lcd	;wreg free
  3386                           
  3387                           ;SPI.c: 113: escreve_cmd_lcd(0b00000001);
  3388  002B9C  0E01               	movlw	1
  3389  002B9E  EC0D  F015         	call	_escreve_cmd_lcd
  3390  002BA2  0012               	return		;funcret
  3391  002BA4                     __end_of_inicializa_SPI:
  3392                           	opt stack 0
  3393                           tblptru	equ	0xFF8
  3394                           tblptrh	equ	0xFF7
  3395                           tblptrl	equ	0xFF6
  3396                           tablat	equ	0xFF5
  3397                           intcon	equ	0xFF2
  3398                           intcon2	equ	0xFF1
  3399                           intcon3	equ	0xFF0
  3400                           postinc0	equ	0xFEE
  3401                           wreg	equ	0xFE8
  3402                           postdec1	equ	0xFE5
  3403                           fsr1h	equ	0xFE2
  3404                           fsr1l	equ	0xFE1
  3405                           postinc2	equ	0xFDE
  3406                           status	equ	0xFD8
  3407                           
  3408 ;; *************** function _escalonador *****************
  3409 ;; Defined at:
  3410 ;;		line 218 in file "main.c"
  3411 ;; Parameters:    Size  Location     Type
  3412 ;;		None
  3413 ;; Auto vars:     Size  Location     Type
  3414 ;;  cont            1  116[BANK0 ] unsigned char 
  3415 ;; Return value:  Size  Location     Type
  3416 ;;                  1    wreg      void 
  3417 ;; Registers used:
  3418 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3419 ;; Tracked objects:
  3420 ;;		On entry : 0/0
  3421 ;;		On exit  : 0/0
  3422 ;;		Unchanged: 0/0
  3423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3424 ;;      Params:         0       0       0       0       0       0       0       0       0
  3425 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3426 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3427 ;;      Totals:         0       3       0       0       0       0       0       0       0
  3428 ;;Total ram usage:        3 bytes
  3429 ;; Hardware stack levels used:    1
  3430 ;; Hardware stack levels required when called:   13
  3431 ;; This function calls:
  3432 ;;		_SDCard
  3433 ;;		_acende_led4
  3434 ;; This function is called by:
  3435 ;;		_main
  3436 ;; This function uses a non-reentrant model
  3437 ;;
  3438                           
  3439                           	psect	text17
  3440  002848                     __ptext17:
  3441                           	opt stack 0
  3442  002848                     _escalonador:
  3443                           	opt stack 17
  3444                           
  3445                           ;main.c: 220: unsigned char cont;
  3446                           ;main.c: 221: for(cont = 0; cont<2;cont++)
  3447                           
  3448                           ;incstack = 0
  3449  002848  0E00               	movlw	0
  3450  00284A  0100               	movlb	0	; () banked
  3451  00284C  6FD4               	movwf	escalonador@cont& (0+255),b
  3452  00284E                     l7432:
  3453                           
  3454                           ; BSR set to: 0
  3455  00284E  0E01               	movlw	1
  3456  002850  65D4               	cpfsgt	escalonador@cont& (0+255),b
  3457  002852  D001               	goto	l500
  3458  002854  0012               	return	
  3459  002856                     l500:
  3460                           
  3461                           ; BSR set to: 0
  3462                           ;main.c: 222: {
  3463                           ;main.c: 223: if((p_tarefas[cont]!= 0 ) && tempo_tarefa[cont] == 0)
  3464                           
  3465                           ; BSR set to: 0
  3466  002856  51D4               	movf	escalonador@cont& (0+255),w,b
  3467  002858  0D02               	mullw	2
  3468  00285A  0ED5               	movlw	low _p_tarefas
  3469  00285C  24F3               	addwf	prodl,w,c
  3470  00285E  6ED9               	movwf	fsr2l,c
  3471  002860  0E00               	movlw	high _p_tarefas
  3472  002862  20F4               	addwfc	prodh,w,c
  3473  002864  6EDA               	movwf	fsr2h,c
  3474  002866  50DE               	movf	postinc2,w,c
  3475  002868  10DE               	iorwf	postinc2,w,c
  3476  00286A  B4D8               	btfsc	status,2,c
  3477  00286C  D03D               	goto	l502
  3478                           
  3479                           ; BSR set to: 0
  3480  00286E  51D4               	movf	escalonador@cont& (0+255),w,b
  3481  002870  0D02               	mullw	2
  3482  002872  0E2D               	movlw	low _tempo_tarefa
  3483  002874  24F3               	addwf	prodl,w,c
  3484  002876  6ED9               	movwf	fsr2l,c
  3485  002878  0E00               	movlw	high _tempo_tarefa
  3486  00287A  20F4               	addwfc	prodh,w,c
  3487  00287C  6EDA               	movwf	fsr2h,c
  3488  00287E  50DE               	movf	postinc2,w,c
  3489  002880  10DE               	iorwf	postinc2,w,c
  3490  002882  A4D8               	btfss	status,2,c
  3491  002884  D031               	goto	l502
  3492                           
  3493                           ; BSR set to: 0
  3494                           ;main.c: 224: {
  3495                           ;main.c: 225: tarefa_em_execucao = 1;
  3496  002886  0E01               	movlw	1
  3497  002888  6E3E               	movwf	_tarefa_em_execucao,c	;volatile
  3498                           
  3499                           ;main.c: 226: timeout_tarefa = 65000;
  3500  00288A  0EFD               	movlw	253
  3501  00288C  6E38               	movwf	_timeout_tarefa+1,c
  3502  00288E  0EE8               	movlw	232
  3503  002890  6E37               	movwf	_timeout_tarefa,c
  3504                           
  3505                           ; BSR set to: 0
  3506                           ;main.c: 227: p_tarefas[cont]();
  3507  002892  51D4               	movf	escalonador@cont& (0+255),w,b
  3508  002894  0D02               	mullw	2
  3509  002896  0ED5               	movlw	low _p_tarefas
  3510  002898  24F3               	addwf	prodl,w,c
  3511  00289A  6ED9               	movwf	fsr2l,c
  3512  00289C  0E00               	movlw	high _p_tarefas
  3513  00289E  20F4               	addwfc	prodh,w,c
  3514  0028A0  6EDA               	movwf	fsr2h,c
  3515  0028A2  D801               	call	u8528
  3516  0028A4  D00A               	goto	u8529
  3517  0028A6                     u8528:
  3518  0028A6  0005               	push	
  3519  0028A8  6EFA               	movwf	pclath,c
  3520  0028AA  50DE               	movf	postinc2,w,c
  3521  0028AC  6EFD               	movwf	tosl,c
  3522  0028AE  50DE               	movf	postinc2,w,c
  3523  0028B0  6EFE               	movwf	tosh,c
  3524  0028B2  50F8               	movf	tblptru,w,c
  3525  0028B4  6EFF               	movwf	tosu,c
  3526  0028B6  50FA               	movf	pclath,w,c
  3527  0028B8  0012               	return		;indir
  3528  0028BA                     u8529:
  3529                           
  3530                           ;main.c: 228: tarefa_em_execucao = 0;
  3531  0028BA  0E00               	movlw	0
  3532  0028BC  6E3E               	movwf	_tarefa_em_execucao,c	;volatile
  3533                           
  3534                           ;main.c: 229: tempo_tarefa[cont] = tempo_backup[cont];
  3535  0028BE  0100               	movlb	0	; () banked
  3536  0028C0  51D4               	movf	escalonador@cont& (0+255),w,b
  3537  0028C2  0D02               	mullw	2
  3538  0028C4  0E4B               	movlw	low _tempo_backup
  3539  0028C6  24F3               	addwf	prodl,w,c
  3540  0028C8  6ED9               	movwf	fsr2l,c
  3541  0028CA  0E01               	movlw	high _tempo_backup
  3542  0028CC  20F4               	addwfc	prodh,w,c
  3543  0028CE  6EDA               	movwf	fsr2h,c
  3544  0028D0  51D4               	movf	escalonador@cont& (0+255),w,b
  3545  0028D2  0D02               	mullw	2
  3546  0028D4  0E2D               	movlw	low _tempo_tarefa
  3547  0028D6  24F3               	addwf	prodl,w,c
  3548  0028D8  6EE1               	movwf	fsr1l,c
  3549  0028DA  0E00               	movlw	high _tempo_tarefa
  3550  0028DC  20F4               	addwfc	prodh,w,c
  3551  0028DE  6EE2               	movwf	fsr1h,c
  3552  0028E0  CFDE FFE6          	movff	postinc2,postinc1
  3553  0028E4  CFDD FFE5          	movff	postdec2,postdec1
  3554  0028E8                     l502:
  3555                           
  3556                           ; BSR set to: 0
  3557                           
  3558                           ; BSR set to: 0
  3559  0028E8  2BD4               	incf	escalonador@cont& (0+255),f,b
  3560  0028EA  D7B1               	goto	l7432
  3561  0028EC                     __end_of_escalonador:
  3562                           	opt stack 0
  3563                           tosu	equ	0xFFF
  3564                           tosh	equ	0xFFE
  3565                           tosl	equ	0xFFD
  3566                           pclath	equ	0xFFA
  3567                           tblptru	equ	0xFF8
  3568                           tblptrh	equ	0xFF7
  3569                           tblptrl	equ	0xFF6
  3570                           tablat	equ	0xFF5
  3571                           prodh	equ	0xFF4
  3572                           prodl	equ	0xFF3
  3573                           intcon	equ	0xFF2
  3574                           intcon2	equ	0xFF1
  3575                           intcon3	equ	0xFF0
  3576                           postinc0	equ	0xFEE
  3577                           wreg	equ	0xFE8
  3578                           postinc1	equ	0xFE6
  3579                           postdec1	equ	0xFE5
  3580                           fsr1h	equ	0xFE2
  3581                           fsr1l	equ	0xFE1
  3582                           postinc2	equ	0xFDE
  3583                           postdec2	equ	0xFDD
  3584                           fsr2h	equ	0xFDA
  3585                           fsr2l	equ	0xFD9
  3586                           status	equ	0xFD8
  3587                           
  3588 ;; *************** function _SDCard *****************
  3589 ;; Defined at:
  3590 ;;		line 298 in file "main.c"
  3591 ;; Parameters:    Size  Location     Type
  3592 ;;		None
  3593 ;; Auto vars:     Size  Location     Type
  3594 ;;  fs             42   66[BANK1 ] struct .
  3595 ;;  br              2   64[BANK1 ] unsigned short 
  3596 ;;  FResult         1   63[BANK1 ] enum E3838
  3597 ;; Return value:  Size  Location     Type
  3598 ;;                  1    wreg      void 
  3599 ;; Registers used:
  3600 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3601 ;; Tracked objects:
  3602 ;;		On entry : 0/0
  3603 ;;		On exit  : 0/0
  3604 ;;		Unchanged: 0/0
  3605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3606 ;;      Params:         0       0       0       0       0       0       0       0       0
  3607 ;;      Locals:         0       0      45       0       0       0       0       0       0
  3608 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3609 ;;      Totals:         0       0      45       0       0       0       0       0       0
  3610 ;;Total ram usage:       45 bytes
  3611 ;; Hardware stack levels used:    1
  3612 ;; Hardware stack levels required when called:   12
  3613 ;; This function calls:
  3614 ;;		_escreve_cmd_lcd
  3615 ;;		_escreve_frase_ram_lcd
  3616 ;;		_pf_mount
  3617 ;;		_pf_open
  3618 ;;		_pf_read
  3619 ;;		_pf_write
  3620 ;;		_posicao_cursor_lcd
  3621 ;;		_proceed
  3622 ;;		_readover
  3623 ;; This function is called by:
  3624 ;;		_inicializa_tarefas
  3625 ;;		_escalonador
  3626 ;; This function uses a non-reentrant model
  3627 ;;
  3628                           
  3629                           	psect	text18
  3630  0019D4                     __ptext18:
  3631                           	opt stack 0
  3632  0019D4                     _SDCard:
  3633                           	opt stack 17
  3634                           
  3635                           ;main.c: 300: FRESULT FResult;
  3636                           ;main.c: 301: FATFS fs;
  3637                           ;main.c: 302: WORD br;
  3638                           ;main.c: 324: posicao_cursor_lcd(1,0);
  3639                           
  3640                           ; BSR set to: 0
  3641                           ;incstack = 0
  3642  0019D4  0E00               	movlw	0
  3643  0019D6  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3644  0019D8  0E01               	movlw	1
  3645  0019DA  EC80  F016         	call	_posicao_cursor_lcd
  3646                           
  3647                           ;main.c: 325: escreve_frase_ram_lcd("Attempting to");
  3648  0019DE  0E17               	movlw	low STR_5
  3649  0019E0  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3650  0019E2  0E62               	movlw	high STR_5
  3651  0019E4  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3652  0019E6  EC74  F017         	call	_escreve_frase_ram_lcd	;wreg free
  3653                           
  3654                           ;main.c: 326: posicao_cursor_lcd(1,0);
  3655  0019EA  0E00               	movlw	0
  3656  0019EC  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3657  0019EE  0E01               	movlw	1
  3658  0019F0  EC80  F016         	call	_posicao_cursor_lcd
  3659                           
  3660                           ;main.c: 327: escreve_frase_ram_lcd("             ");
  3661  0019F4  0E09               	movlw	low STR_6
  3662  0019F6  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3663  0019F8  0E62               	movlw	high STR_6
  3664  0019FA  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3665  0019FC  EC74  F017         	call	_escreve_frase_ram_lcd	;wreg free
  3666                           
  3667                           ;main.c: 328: posicao_cursor_lcd(1,0);
  3668  001A00  0E00               	movlw	0
  3669  001A02  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3670  001A04  0E01               	movlw	1
  3671  001A06  EC80  F016         	call	_posicao_cursor_lcd
  3672                           
  3673                           ;main.c: 329: escreve_frase_ram_lcd("mount file sys");
  3674  001A0A  0EDE               	movlw	low STR_7
  3675  001A0C  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3676  001A0E  0E61               	movlw	high STR_7
  3677  001A10  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3678  001A12  EC74  F017         	call	_escreve_frase_ram_lcd	;wreg free
  3679                           
  3680                           ;main.c: 331: escreve_cmd_lcd(0b00000001);
  3681  001A16  0E01               	movlw	1
  3682  001A18  EC0D  F015         	call	_escreve_cmd_lcd
  3683                           
  3684                           ;main.c: 333: proceed();
  3685  001A1C  EC30  F019         	call	_proceed	;wreg free
  3686                           
  3687                           ;main.c: 334: if((FResult = pf_mount(&fs)) == FR_OK )
  3688  001A20  0EB1               	movlw	low SDCard@fs
  3689  001A22  0100               	movlb	0	; () banked
  3690  001A24  6F7C               	movwf	pf_mount@fs& (0+255),b
  3691  001A26  0E01               	movlw	high SDCard@fs
  3692  001A28  6F7D               	movwf	(pf_mount@fs+1)& (0+255),b
  3693  001A2A  EC09  F000         	call	_pf_mount	;wreg free
  3694  001A2E  0101               	movlb	1	; () banked
  3695  001A30  6FAE               	movwf	SDCard@FResult& (0+255),b
  3696  001A32  51AE               	movf	SDCard@FResult& (0+255),w,b
  3697  001A34  A4D8               	btfss	status,2,c
  3698  001A36  D079               	goto	l522
  3699                           
  3700                           ; BSR set to: 1
  3701                           ;main.c: 335: {
  3702                           ;main.c: 336: posicao_cursor_lcd(1,0);
  3703  001A38  0E00               	movlw	0
  3704  001A3A  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3705  001A3C  0E01               	movlw	1
  3706  001A3E  EC80  F016         	call	_posicao_cursor_lcd
  3707                           
  3708                           ;main.c: 337: escreve_frase_ram_lcd("syst inicialized");
  3709  001A42  0EBC               	movlw	low STR_8
  3710  001A44  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3711  001A46  0E61               	movlw	high STR_8
  3712  001A48  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3713  001A4A  EC74  F017         	call	_escreve_frase_ram_lcd	;wreg free
  3714                           
  3715                           ;main.c: 339: FResult = pf_open("check.txt" );
  3716  001A4E  0E57               	movlw	low STR_9
  3717  001A50  0100               	movlb	0	; () banked
  3718  001A52  6FBA               	movwf	pf_open@path& (0+255),b
  3719  001A54  0E62               	movlw	high STR_9
  3720  001A56  6FBB               	movwf	(pf_open@path+1)& (0+255),b
  3721  001A58  EC49  F00E         	call	_pf_open	;wreg free
  3722  001A5C  0101               	movlb	1	; () banked
  3723  001A5E  6FAE               	movwf	SDCard@FResult& (0+255),b
  3724                           
  3725                           ; BSR set to: 1
  3726                           ;main.c: 341: if( FResult == FR_OK )
  3727  001A60  51AE               	movf	SDCard@FResult& (0+255),w,b
  3728  001A62  A4D8               	btfss	status,2,c
  3729  001A64  D061               	goto	l523
  3730                           
  3731                           ; BSR set to: 1
  3732                           ;main.c: 342: {
  3733                           ;main.c: 344: if( (FResult = pf_write("SD_Card", 5, &br)) == FR_OK )
  3734  001A66  0E74               	movlw	low STR_10
  3735  001A68  0100               	movlb	0	; () banked
  3736  001A6A  6F9A               	movwf	pf_write@buff& (0+255),b
  3737  001A6C  0E62               	movlw	high STR_10
  3738  001A6E  6F9B               	movwf	(pf_write@buff+1)& (0+255),b
  3739  001A70  0E00               	movlw	0
  3740  001A72  6F9D               	movwf	(pf_write@btw+1)& (0+255),b
  3741  001A74  0E05               	movlw	5
  3742  001A76  6F9C               	movwf	pf_write@btw& (0+255),b
  3743  001A78  0EAF               	movlw	low SDCard@br
  3744  001A7A  6F9E               	movwf	pf_write@bw& (0+255),b
  3745  001A7C  0E01               	movlw	high SDCard@br
  3746  001A7E  6F9F               	movwf	(pf_write@bw+1)& (0+255),b
  3747  001A80  EC23  F003         	call	_pf_write	;wreg free
  3748  001A84  0101               	movlb	1	; () banked
  3749  001A86  6FAE               	movwf	SDCard@FResult& (0+255),b
  3750  001A88  51AE               	movf	SDCard@FResult& (0+255),w,b
  3751  001A8A  A4D8               	btfss	status,2,c
  3752  001A8C  D00C               	goto	l524
  3753                           
  3754                           ; BSR set to: 1
  3755                           ;main.c: 345: {
  3756                           ;main.c: 346: posicao_cursor_lcd(1,0);
  3757  001A8E  0E00               	movlw	0
  3758  001A90  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3759  001A92  0E01               	movlw	1
  3760  001A94  EC80  F016         	call	_posicao_cursor_lcd
  3761                           
  3762                           ;main.c: 347: escreve_frase_ram_lcd("syst inicialized");
  3763  001A98  0EBC               	movlw	low STR_8
  3764  001A9A  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3765  001A9C  0E61               	movlw	high STR_8
  3766  001A9E  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3767  001AA0  EC74  F017         	call	_escreve_frase_ram_lcd	;wreg free
  3768                           
  3769                           ;main.c: 348: }
  3770  001AA4  D00F               	goto	l528
  3771  001AA6                     l524:
  3772                           
  3773                           ;main.c: 349: else
  3774                           ;main.c: 350: {
  3775                           ;main.c: 351: escreve_cmd_lcd(0b00000001);
  3776  001AA6  0E01               	movlw	1
  3777  001AA8  EC0D  F015         	call	_escreve_cmd_lcd
  3778                           
  3779                           ;main.c: 352: posicao_cursor_lcd(1,0);
  3780  001AAC  0E00               	movlw	0
  3781  001AAE  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3782  001AB0  0E01               	movlw	1
  3783  001AB2  EC80  F016         	call	_posicao_cursor_lcd
  3784                           
  3785                           ;main.c: 353: escreve_frase_ram_lcd("SDCard error");
  3786  001AB6  0E33               	movlw	low STR_12
  3787  001AB8  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3788  001ABA  0E62               	movlw	high STR_12
  3789  001ABC  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3790  001ABE  EC74  F017         	call	_escreve_frase_ram_lcd	;wreg free
  3791  001AC2                     l526:
  3792  001AC2  D7FF               	goto	l526
  3793  001AC4                     l528:
  3794                           
  3795                           ;main.c: 357: }
  3796                           ;main.c: 358: escreve_cmd_lcd(0b00000001);
  3797  001AC4  0E01               	movlw	1
  3798  001AC6  EC0D  F015         	call	_escreve_cmd_lcd
  3799                           
  3800                           ;main.c: 359: posicao_cursor_lcd(1,0);
  3801  001ACA  0E00               	movlw	0
  3802  001ACC  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3803  001ACE  0E01               	movlw	1
  3804  001AD0  EC80  F016         	call	_posicao_cursor_lcd
  3805                           
  3806                           ;main.c: 360: escreve_frase_ram_lcd("lendo arquivo");
  3807  001AD4  0E25               	movlw	low STR_13
  3808  001AD6  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3809  001AD8  0E62               	movlw	high STR_13
  3810  001ADA  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3811  001ADC  EC74  F017         	call	_escreve_frase_ram_lcd	;wreg free
  3812                           
  3813                           ;main.c: 369: {
  3814                           ;main.c: 370: readover(1);
  3815                           
  3816                           ;main.c: 368: do
  3817  001AE0  0E00               	movlw	0
  3818  001AE2  6E1B               	movwf	readover@a+1,c
  3819  001AE4  0E01               	movlw	1
  3820  001AE6  6E1A               	movwf	readover@a,c
  3821  001AE8  EC3C  F019         	call	_readover	;wreg free
  3822                           
  3823                           ;main.c: 373: if( (FResult = pf_read(data_buffer_32, 31, &br)) == FR_OK )
  3824  001AEC  0E4F               	movlw	low _data_buffer_32
  3825  001AEE  0100               	movlb	0	; () banked
  3826  001AF0  6F9A               	movwf	pf_read@buff& (0+255),b
  3827  001AF2  0E01               	movlw	high _data_buffer_32
  3828  001AF4  6F9B               	movwf	(pf_read@buff+1)& (0+255),b
  3829  001AF6  0E00               	movlw	0
  3830  001AF8  6F9D               	movwf	(pf_read@btr+1)& (0+255),b
  3831  001AFA  0E1F               	movlw	31
  3832  001AFC  6F9C               	movwf	pf_read@btr& (0+255),b
  3833  001AFE  0EAF               	movlw	low SDCard@br
  3834  001B00  6F9E               	movwf	pf_read@br& (0+255),b
  3835  001B02  0E01               	movlw	high SDCard@br
  3836  001B04  6F9F               	movwf	(pf_read@br+1)& (0+255),b
  3837  001B06  EC74  F007         	call	_pf_read	;wreg free
  3838  001B0A  0101               	movlb	1	; () banked
  3839  001B0C  6FAE               	movwf	SDCard@FResult& (0+255),b
  3840  001B0E  51AE               	movf	SDCard@FResult& (0+255),w,b
  3841  001B10  A4D8               	btfss	status,2,c
  3842  001B12  D009               	goto	l530
  3843                           
  3844                           ; BSR set to: 1
  3845                           ;main.c: 374: {
  3846                           ;main.c: 376: data_buffer_32[br] = 0;
  3847  001B14  0E4F               	movlw	low _data_buffer_32
  3848  001B16  25AF               	addwf	SDCard@br& (0+255),w,b
  3849  001B18  6ED9               	movwf	fsr2l,c
  3850  001B1A  0E01               	movlw	high _data_buffer_32
  3851  001B1C  21B0               	addwfc	(SDCard@br+1)& (0+255),w,b
  3852  001B1E  6EDA               	movwf	fsr2h,c
  3853  001B20  0E00               	movlw	0
  3854  001B22  6EDF               	movwf	indf2,c
  3855                           
  3856                           ;main.c: 377: break;
  3857  001B24  D003               	goto	l543
  3858  001B26                     l530:
  3859                           
  3860                           ; BSR set to: 1
  3861                           ;main.c: 380: else
  3862                           ;main.c: 381: {
  3863                           ;main.c: 388: while( 1 );
  3864  001B26  D7FF               	goto	l530
  3865  001B28                     l523:
  3866                           
  3867                           ; BSR set to: 1
  3868                           ;main.c: 392: else
  3869                           ;main.c: 393: {
  3870                           ;main.c: 398: while( 1 );
  3871  001B28  D7FF               	goto	l523
  3872  001B2A                     l522:
  3873                           
  3874                           ;main.c: 401: else
  3875                           ;main.c: 402: {
  3876                           ;main.c: 404: while( 1 );
  3877  001B2A  D7FF               	goto	l522
  3878  001B2C                     l543:
  3879                           
  3880                           ;main.c: 405: }
  3881                           ;main.c: 423: if( FResult != FR_OK )
  3882  001B2C  0101               	movlb	1	; () banked
  3883  001B2E  51AE               	movf	SDCard@FResult& (0+255),w,b
  3884  001B30  A4D8               	btfss	status,2,c
  3885  001B32                     u8450:
  3886                           
  3887                           ;main.c: 424: {
  3888                           ;main.c: 429: while( 1 );
  3889  001B32  D7FF               	goto	u8450
  3890  001B34                     
  3891                           ;main.c: 430: }
  3892                           ;main.c: 433: while(1);
  3893  001B34  D7FF               	goto	l547
  3894  001B36                     __end_of_SDCard:
  3895                           	opt stack 0
  3896                           tosu	equ	0xFFF
  3897                           tosh	equ	0xFFE
  3898                           tosl	equ	0xFFD
  3899                           pclath	equ	0xFFA
  3900                           tblptru	equ	0xFF8
  3901                           tblptrh	equ	0xFF7
  3902                           tblptrl	equ	0xFF6
  3903                           tablat	equ	0xFF5
  3904                           prodh	equ	0xFF4
  3905                           prodl	equ	0xFF3
  3906                           intcon	equ	0xFF2
  3907                           intcon2	equ	0xFF1
  3908                           intcon3	equ	0xFF0
  3909                           postinc0	equ	0xFEE
  3910                           wreg	equ	0xFE8
  3911                           postinc1	equ	0xFE6
  3912                           postdec1	equ	0xFE5
  3913                           fsr1h	equ	0xFE2
  3914                           fsr1l	equ	0xFE1
  3915                           indf2	equ	0xFDF
  3916                           postinc2	equ	0xFDE
  3917                           postdec2	equ	0xFDD
  3918                           fsr2h	equ	0xFDA
  3919                           fsr2l	equ	0xFD9
  3920                           status	equ	0xFD8
  3921                           
  3922 ;; *************** function _acende_led4 *****************
  3923 ;; Defined at:
  3924 ;;		line 438 in file "main.c"
  3925 ;; Parameters:    Size  Location     Type
  3926 ;;		None
  3927 ;; Auto vars:     Size  Location     Type
  3928 ;;		None
  3929 ;; Return value:  Size  Location     Type
  3930 ;;                  1    wreg      void 
  3931 ;; Registers used:
  3932 ;;		wreg, status,2, status,0, cstack
  3933 ;; Tracked objects:
  3934 ;;		On entry : 0/0
  3935 ;;		On exit  : 0/0
  3936 ;;		Unchanged: 0/0
  3937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3938 ;;      Params:         0       0       0       0       0       0       0       0       0
  3939 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3940 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3941 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3942 ;;Total ram usage:        0 bytes
  3943 ;; Hardware stack levels used:    1
  3944 ;; Hardware stack levels required when called:    3
  3945 ;; This function calls:
  3946 ;;		_shrc_apaga_bit
  3947 ;;		_shrc_seta_bit
  3948 ;; This function is called by:
  3949 ;;		_inicializa_tarefas
  3950 ;;		_escalonador
  3951 ;; This function uses a non-reentrant model
  3952 ;;
  3953                           
  3954                           	psect	text19
  3955  0030A6                     __ptext19:
  3956                           	opt stack 0
  3957  0030A6                     _acende_led4:
  3958                           	opt stack 26
  3959                           
  3960                           ;main.c: 439: static unsigned char flag = 0;
  3961                           ;main.c: 440: flag = !flag;
  3962                           
  3963                           ;incstack = 0
  3964  0030A6  503D               	movf	acende_led4@flag,w,c
  3965  0030A8  A4D8               	btfss	status,2,c
  3966  0030AA  D002               	goto	u8460
  3967  0030AC  0E01               	movlw	1
  3968  0030AE  D001               	goto	u8470
  3969  0030B0                     u8460:
  3970  0030B0  0E00               	movlw	0
  3971  0030B2                     u8470:
  3972  0030B2  6E3D               	movwf	acende_led4@flag,c
  3973                           
  3974                           ;main.c: 441: if(!flag)
  3975  0030B4  503D               	movf	acende_led4@flag,w,c
  3976  0030B6  A4D8               	btfss	status,2,c
  3977  0030B8  D004               	goto	l556
  3978                           
  3979                           ;main.c: 442: {
  3980                           ;main.c: 443: shrc_seta_bit(0);
  3981  0030BA  0E00               	movlw	0
  3982  0030BC  ECA8  F018         	call	_shrc_seta_bit
  3983                           
  3984                           ;main.c: 444: }
  3985  0030C0  0012               	return	
  3986  0030C2                     l556:
  3987                           
  3988                           ;main.c: 445: else
  3989                           ;main.c: 446: {
  3990                           ;main.c: 447: shrc_apaga_bit(0);
  3991  0030C2  0E00               	movlw	0
  3992  0030C4  EC99  F018         	call	_shrc_apaga_bit
  3993  0030C8  0012               	return	
  3994  0030CA                     __end_of_acende_led4:
  3995                           	opt stack 0
  3996                           tosu	equ	0xFFF
  3997                           tosh	equ	0xFFE
  3998                           tosl	equ	0xFFD
  3999                           pclath	equ	0xFFA
  4000                           tblptru	equ	0xFF8
  4001                           tblptrh	equ	0xFF7
  4002                           tblptrl	equ	0xFF6
  4003                           tablat	equ	0xFF5
  4004                           prodh	equ	0xFF4
  4005                           prodl	equ	0xFF3
  4006                           intcon	equ	0xFF2
  4007                           intcon2	equ	0xFF1
  4008                           intcon3	equ	0xFF0
  4009                           postinc0	equ	0xFEE
  4010                           wreg	equ	0xFE8
  4011                           postinc1	equ	0xFE6
  4012                           postdec1	equ	0xFE5
  4013                           fsr1h	equ	0xFE2
  4014                           fsr1l	equ	0xFE1
  4015                           indf2	equ	0xFDF
  4016                           postinc2	equ	0xFDE
  4017                           postdec2	equ	0xFDD
  4018                           fsr2h	equ	0xFDA
  4019                           fsr2l	equ	0xFD9
  4020                           status	equ	0xFD8
  4021                           
  4022 ;; *************** function _shrc_apaga_bit *****************
  4023 ;; Defined at:
  4024 ;;		line 124 in file "bibliotecas/SHRC.c"
  4025 ;; Parameters:    Size  Location     Type
  4026 ;;  posicao_bit     1    wreg     unsigned char 
  4027 ;; Auto vars:     Size  Location     Type
  4028 ;;  posicao_bit     1   27[COMRAM] unsigned char 
  4029 ;; Return value:  Size  Location     Type
  4030 ;;                  1    wreg      void 
  4031 ;; Registers used:
  4032 ;;		wreg, status,2, status,0
  4033 ;; Tracked objects:
  4034 ;;		On entry : 0/0
  4035 ;;		On exit  : 0/0
  4036 ;;		Unchanged: 0/0
  4037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4038 ;;      Params:         0       0       0       0       0       0       0       0       0
  4039 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4040 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4041 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4042 ;;Total ram usage:        3 bytes
  4043 ;; Hardware stack levels used:    1
  4044 ;; Hardware stack levels required when called:    2
  4045 ;; This function calls:
  4046 ;;		Nothing
  4047 ;; This function is called by:
  4048 ;;		_acende_led4
  4049 ;;		_timer_dois
  4050 ;; This function uses a non-reentrant model
  4051 ;;
  4052                           
  4053                           	psect	text20
  4054  003132                     __ptext20:
  4055                           	opt stack 0
  4056  003132                     _shrc_apaga_bit:
  4057                           	opt stack 26
  4058                           
  4059                           ;incstack = 0
  4060                           ;shrc_apaga_bit@posicao_bit stored from wreg
  4061  003132  6E1C               	movwf	shrc_apaga_bit@posicao_bit,c
  4062                           
  4063                           ;SHRC.c: 126: dado &= ~(1<<posicao_bit);
  4064  003134  C01C  F01A         	movff	shrc_apaga_bit@posicao_bit,??_shrc_apaga_bit
  4065  003138  0E01               	movlw	1
  4066  00313A  6E1B               	movwf	(??_shrc_apaga_bit+1)& (0+255),c
  4067  00313C  2A1A               	incf	??_shrc_apaga_bit,f,c
  4068  00313E  D002               	goto	u4684
  4069  003140                     u4685:
  4070  003140  90D8               	bcf	status,0,c
  4071  003142  361B               	rlcf	??_shrc_apaga_bit+1,f,c
  4072  003144                     u4684:
  4073  003144  2E1A               	decfsz	??_shrc_apaga_bit,f,c
  4074  003146  D7FC               	goto	u4685
  4075  003148  501B               	movf	??_shrc_apaga_bit+1,w,c
  4076  00314A  0AFF               	xorlw	255
  4077  00314C  1645               	andwf	_dado,f,c
  4078  00314E  0012               	return		;funcret
  4079  003150                     __end_of_shrc_apaga_bit:
  4080                           	opt stack 0
  4081                           tosu	equ	0xFFF
  4082                           tosh	equ	0xFFE
  4083                           tosl	equ	0xFFD
  4084                           pclath	equ	0xFFA
  4085                           tblptru	equ	0xFF8
  4086                           tblptrh	equ	0xFF7
  4087                           tblptrl	equ	0xFF6
  4088                           tablat	equ	0xFF5
  4089                           prodh	equ	0xFF4
  4090                           prodl	equ	0xFF3
  4091                           intcon	equ	0xFF2
  4092                           intcon2	equ	0xFF1
  4093                           intcon3	equ	0xFF0
  4094                           postinc0	equ	0xFEE
  4095                           wreg	equ	0xFE8
  4096                           postinc1	equ	0xFE6
  4097                           postdec1	equ	0xFE5
  4098                           fsr1h	equ	0xFE2
  4099                           fsr1l	equ	0xFE1
  4100                           indf2	equ	0xFDF
  4101                           postinc2	equ	0xFDE
  4102                           postdec2	equ	0xFDD
  4103                           fsr2h	equ	0xFDA
  4104                           fsr2l	equ	0xFD9
  4105                           status	equ	0xFD8
  4106                           
  4107 ;; *************** function _readover *****************
  4108 ;; Defined at:
  4109 ;;		line 27 in file "diskio.c"
  4110 ;; Parameters:    Size  Location     Type
  4111 ;;  a               2   25[COMRAM] int 
  4112 ;; Auto vars:     Size  Location     Type
  4113 ;;		None
  4114 ;; Return value:  Size  Location     Type
  4115 ;;                  1    wreg      void 
  4116 ;; Registers used:
  4117 ;;		None
  4118 ;; Tracked objects:
  4119 ;;		On entry : 0/0
  4120 ;;		On exit  : 0/0
  4121 ;;		Unchanged: 0/0
  4122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4123 ;;      Params:         2       0       0       0       0       0       0       0       0
  4124 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4125 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4126 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4127 ;;Total ram usage:        2 bytes
  4128 ;; Hardware stack levels used:    1
  4129 ;; Hardware stack levels required when called:    2
  4130 ;; This function calls:
  4131 ;;		Nothing
  4132 ;; This function is called by:
  4133 ;;		_SDCard
  4134 ;; This function uses a non-reentrant model
  4135 ;;
  4136                           
  4137                           	psect	text21
  4138  003278                     __ptext21:
  4139                           	opt stack 0
  4140  003278                     _readover:
  4141                           	opt stack 26
  4142                           
  4143                           ;diskio.c: 29: flag = a;
  4144                           
  4145                           ;incstack = 0
  4146  003278  C01A  F03B         	movff	readover@a,_flag
  4147  00327C  C01B  F03C         	movff	readover@a+1,_flag+1
  4148  003280  0012               	return		;funcret
  4149  003282                     __end_of_readover:
  4150                           	opt stack 0
  4151                           tosu	equ	0xFFF
  4152                           tosh	equ	0xFFE
  4153                           tosl	equ	0xFFD
  4154                           pclath	equ	0xFFA
  4155                           tblptru	equ	0xFF8
  4156                           tblptrh	equ	0xFF7
  4157                           tblptrl	equ	0xFF6
  4158                           tablat	equ	0xFF5
  4159                           prodh	equ	0xFF4
  4160                           prodl	equ	0xFF3
  4161                           intcon	equ	0xFF2
  4162                           intcon2	equ	0xFF1
  4163                           intcon3	equ	0xFF0
  4164                           postinc0	equ	0xFEE
  4165                           wreg	equ	0xFE8
  4166                           postinc1	equ	0xFE6
  4167                           postdec1	equ	0xFE5
  4168                           fsr1h	equ	0xFE2
  4169                           fsr1l	equ	0xFE1
  4170                           indf2	equ	0xFDF
  4171                           postinc2	equ	0xFDE
  4172                           postdec2	equ	0xFDD
  4173                           fsr2h	equ	0xFDA
  4174                           fsr2l	equ	0xFD9
  4175                           status	equ	0xFD8
  4176                           
  4177 ;; *************** function _pf_write *****************
  4178 ;; Defined at:
  4179 ;;		line 919 in file "pff.c"
  4180 ;; Parameters:    Size  Location     Type
  4181 ;;  buff            2   58[BANK0 ] PTR const void 
  4182 ;;		 -> STR_10(8), 
  4183 ;;  btw             2   60[BANK0 ] unsigned int 
  4184 ;;  bw              2   62[BANK0 ] PTR unsigned int 
  4185 ;;		 -> SDCard@br(2), 
  4186 ;; Auto vars:     Size  Location     Type
  4187 ;;  clst            4   82[BANK0 ] unsigned long 
  4188 ;;  remain          4   78[BANK0 ] unsigned long 
  4189 ;;  sect            4   74[BANK0 ] unsigned long 
  4190 ;;  fs              2   89[BANK0 ] PTR struct .
  4191 ;;		 -> NULL(0), SDCard@fs(42), 
  4192 ;;  wcnt            2   87[BANK0 ] unsigned int 
  4193 ;;  p               2   72[BANK0 ] PTR const unsigned char 
  4194 ;;		 -> STR_10(8), 
  4195 ;;  cs              1   86[BANK0 ] unsigned char 
  4196 ;; Return value:  Size  Location     Type
  4197 ;;                  1    wreg      enum E3838
  4198 ;; Registers used:
  4199 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4200 ;; Tracked objects:
  4201 ;;		On entry : 0/0
  4202 ;;		On exit  : 0/0
  4203 ;;		Unchanged: 0/0
  4204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4205 ;;      Params:         0       6       0       0       0       0       0       0       0
  4206 ;;      Locals:         0      19       0       0       0       0       0       0       0
  4207 ;;      Temps:          0       8       0       0       0       0       0       0       0
  4208 ;;      Totals:         0      33       0       0       0       0       0       0       0
  4209 ;;Total ram usage:       33 bytes
  4210 ;; Hardware stack levels used:    1
  4211 ;; Hardware stack levels required when called:    8
  4212 ;; This function calls:
  4213 ;;		_clust2sect
  4214 ;;		_disk_writep
  4215 ;;		_get_fat
  4216 ;; This function is called by:
  4217 ;;		_SDCard
  4218 ;; This function uses a non-reentrant model
  4219 ;;
  4220                           
  4221                           	psect	text22
  4222  000646                     __ptext22:
  4223                           	opt stack 0
  4224  000646                     _pf_write:
  4225                           	opt stack 20
  4226                           
  4227                           ;pff.c: 925: DWORD clst;
  4228                           ;pff.c: 926: DWORD sect, remain;
  4229                           ;pff.c: 927: const BYTE *p = buff;
  4230                           
  4231                           ;incstack = 0
  4232  000646  C09A  F0A8         	movff	pf_write@buff,pf_write@p
  4233  00064A  C09B  F0A9         	movff	pf_write@buff+1,pf_write@p+1
  4234                           
  4235                           ;pff.c: 928: BYTE cs;
  4236                           ;pff.c: 929: UINT wcnt;
  4237                           ;pff.c: 930: FATFS *fs = FatFs;
  4238  00064E  C035  F0B9         	movff	_FatFs,pf_write@fs
  4239  000652  C036  F0BA         	movff	_FatFs+1,pf_write@fs+1
  4240                           
  4241                           ;pff.c: 933: *bw = 0;
  4242  000656  C09E  FFD9         	movff	pf_write@bw,fsr2l
  4243  00065A  C09F  FFDA         	movff	pf_write@bw+1,fsr2h
  4244  00065E  0E00               	movlw	0
  4245  000660  6EDE               	movwf	postinc2,c
  4246  000662  0E00               	movlw	0
  4247  000664  6EDD               	movwf	postdec2,c
  4248                           
  4249                           ;pff.c: 934: if (!fs) return FR_NOT_ENABLED;
  4250  000666  0100               	movlb	0	; () banked
  4251  000668  51B9               	movf	pf_write@fs& (0+255),w,b
  4252  00066A  11BA               	iorwf	(pf_write@fs+1)& (0+255),w,b
  4253  00066C  A4D8               	btfss	status,2,c
  4254  00066E  D002               	goto	l1015
  4255                           
  4256                           ; BSR set to: 0
  4257  000670  0E05               	movlw	5
  4258                           
  4259                           ; BSR set to: 0
  4260  000672  0012               	return	
  4261  000674                     l1015:
  4262                           
  4263                           ; BSR set to: 0
  4264                           ;pff.c: 935: if (!(fs->flag & 0x01))
  4265                           
  4266                           ; BSR set to: 0
  4267  000674  EE20 F001          	lfsr	2,1
  4268  000678  51B9               	movf	pf_write@fs& (0+255),w,b
  4269  00067A  26D9               	addwf	fsr2l,f,c
  4270  00067C  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4271  00067E  22DA               	addwfc	fsr2h,f,c
  4272  000680  B0DF               	btfsc	indf2,0,c
  4273  000682  D002               	goto	l1017
  4274                           
  4275                           ; BSR set to: 0
  4276                           ;pff.c: 936: return FR_NOT_OPENED;
  4277  000684  0E04               	movlw	4
  4278                           
  4279                           ; BSR set to: 0
  4280  000686  0012               	return	
  4281  000688                     l1017:
  4282                           
  4283                           ; BSR set to: 0
  4284                           ;pff.c: 938: if (!btw) {
  4285                           
  4286                           ; BSR set to: 0
  4287  000688  519C               	movf	pf_write@btw& (0+255),w,b
  4288  00068A  119D               	iorwf	(pf_write@btw+1)& (0+255),w,b
  4289  00068C  A4D8               	btfss	status,2,c
  4290  00068E  D031               	goto	l1018
  4291                           
  4292                           ; BSR set to: 0
  4293                           ;pff.c: 939: if ((fs->flag & 0x40) && disk_writep(0, 0)) {fs->flag = 0; return FR_DISK_E
      +                          RR;};
  4294  000690  EE20 F001          	lfsr	2,1
  4295  000694  51B9               	movf	pf_write@fs& (0+255),w,b
  4296  000696  26D9               	addwf	fsr2l,f,c
  4297  000698  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4298  00069A  22DA               	addwfc	fsr2h,f,c
  4299  00069C  ACDF               	btfss	indf2,6,c
  4300  00069E  D01E               	goto	l1019
  4301                           
  4302                           ; BSR set to: 0
  4303  0006A0  0E00               	movlw	0
  4304  0006A2  6F60               	movwf	disk_writep@wr& (0+255),b
  4305  0006A4  0E00               	movlw	0
  4306  0006A6  6F61               	movwf	(disk_writep@wr+1)& (0+255),b
  4307  0006A8  0E00               	movlw	0
  4308  0006AA  6F62               	movwf	(disk_writep@wr+2)& (0+255),b
  4309  0006AC  0E00               	movlw	0
  4310  0006AE  6F63               	movwf	disk_writep@sc& (0+255),b
  4311  0006B0  0E00               	movlw	0
  4312  0006B2  6F64               	movwf	(disk_writep@sc+1)& (0+255),b
  4313  0006B4  0E00               	movlw	0
  4314  0006B6  6F65               	movwf	(disk_writep@sc+2)& (0+255),b
  4315  0006B8  0E00               	movlw	0
  4316  0006BA  6F66               	movwf	(disk_writep@sc+3)& (0+255),b
  4317  0006BC  EC93  F00F         	call	_disk_writep	;wreg free
  4318  0006C0  0900               	iorlw	0
  4319  0006C2  B4D8               	btfsc	status,2,c
  4320  0006C4  D00B               	goto	l1019
  4321  0006C6  0100               	movlb	0	; () banked
  4322  0006C8  EE20 F001          	lfsr	2,1
  4323  0006CC  51B9               	movf	pf_write@fs& (0+255),w,b
  4324  0006CE  26D9               	addwf	fsr2l,f,c
  4325  0006D0  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4326  0006D2  22DA               	addwfc	fsr2h,f,c
  4327  0006D4  0E00               	movlw	0
  4328  0006D6  6EDF               	movwf	indf2,c
  4329                           
  4330                           ; BSR set to: 0
  4331  0006D8  0E01               	movlw	1
  4332                           
  4333                           ; BSR set to: 0
  4334  0006DA  0012               	return	
  4335  0006DC                     l1019:
  4336                           
  4337                           ;pff.c: 940: fs->flag &= ~0x40;
  4338                           
  4339                           ; BSR set to: 0
  4340  0006DC  0100               	movlb	0	; () banked
  4341  0006DE  EE20 F001          	lfsr	2,1
  4342  0006E2  51B9               	movf	pf_write@fs& (0+255),w,b
  4343  0006E4  26D9               	addwf	fsr2l,f,c
  4344  0006E6  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4345  0006E8  22DA               	addwfc	fsr2h,f,c
  4346  0006EA  0EBF               	movlw	191
  4347  0006EC  16DF               	andwf	indf2,f,c
  4348                           
  4349                           ; BSR set to: 0
  4350                           ;pff.c: 941: return FR_OK;
  4351  0006EE  0E00               	movlw	0
  4352                           
  4353                           ; BSR set to: 0
  4354  0006F0  0012               	return	
  4355  0006F2                     l1018:
  4356                           
  4357                           ; BSR set to: 0
  4358                           ;pff.c: 943: if (!(fs->flag & 0x40))
  4359                           
  4360                           ; BSR set to: 0
  4361  0006F2  EE20 F001          	lfsr	2,1
  4362  0006F6  51B9               	movf	pf_write@fs& (0+255),w,b
  4363  0006F8  26D9               	addwf	fsr2l,f,c
  4364  0006FA  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4365  0006FC  22DA               	addwfc	fsr2h,f,c
  4366  0006FE  BCDF               	btfsc	indf2,6,c
  4367  000700  D00E               	goto	l1021
  4368                           
  4369                           ; BSR set to: 0
  4370                           ;pff.c: 944: fs->fptr &= 0xFFFFFE00;
  4371  000702  EE20 F016          	lfsr	2,22
  4372  000706  51B9               	movf	pf_write@fs& (0+255),w,b
  4373  000708  26D9               	addwf	fsr2l,f,c
  4374  00070A  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4375  00070C  22DA               	addwfc	fsr2h,f,c
  4376  00070E  0E00               	movlw	0
  4377  000710  16DE               	andwf	postinc2,f,c
  4378  000712  0EFE               	movlw	254
  4379  000714  16DE               	andwf	postinc2,f,c
  4380  000716  0EFF               	movlw	255
  4381  000718  16DE               	andwf	postinc2,f,c
  4382  00071A  0EFF               	movlw	255
  4383  00071C  16DE               	andwf	postinc2,f,c
  4384  00071E                     l1021:
  4385                           
  4386                           ; BSR set to: 0
  4387                           ;pff.c: 945: }
  4388                           ;pff.c: 946: remain = fs->fsize - fs->fptr;
  4389                           
  4390                           ; BSR set to: 0
  4391  00071E  EE20 F01A          	lfsr	2,26
  4392  000722  51B9               	movf	pf_write@fs& (0+255),w,b
  4393  000724  26D9               	addwf	fsr2l,f,c
  4394  000726  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4395  000728  22DA               	addwfc	fsr2h,f,c
  4396  00072A  CFDE F0A0          	movff	postinc2,??_pf_write
  4397  00072E  CFDE F0A1          	movff	postinc2,??_pf_write+1
  4398  000732  CFDE F0A2          	movff	postinc2,??_pf_write+2
  4399  000736  CFDE F0A3          	movff	postinc2,??_pf_write+3
  4400  00073A  EE20 F016          	lfsr	2,22
  4401  00073E  51B9               	movf	pf_write@fs& (0+255),w,b
  4402  000740  26D9               	addwf	fsr2l,f,c
  4403  000742  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4404  000744  22DA               	addwfc	fsr2h,f,c
  4405  000746  CFDE F0A4          	movff	postinc2,??_pf_write+4
  4406  00074A  CFDE F0A5          	movff	postinc2,??_pf_write+5
  4407  00074E  CFDE F0A6          	movff	postinc2,??_pf_write+6
  4408  000752  CFDE F0A7          	movff	postinc2,??_pf_write+7
  4409  000756  1FA4               	comf	(??_pf_write+4)& (0+255),f,b
  4410  000758  1FA5               	comf	(??_pf_write+5)& (0+255),f,b
  4411  00075A  1FA6               	comf	(??_pf_write+6)& (0+255),f,b
  4412  00075C  1FA7               	comf	(??_pf_write+7)& (0+255),f,b
  4413  00075E  2BA4               	incf	(??_pf_write+4)& (0+255),f,b
  4414  000760  0E00               	movlw	0
  4415  000762  23A5               	addwfc	(??_pf_write+5)& (0+255),f,b
  4416  000764  23A6               	addwfc	(??_pf_write+6)& (0+255),f,b
  4417  000766  23A7               	addwfc	(??_pf_write+7)& (0+255),f,b
  4418  000768  51A0               	movf	??_pf_write& (0+255),w,b
  4419  00076A  25A4               	addwf	(??_pf_write+4)& (0+255),w,b
  4420  00076C  6FAE               	movwf	pf_write@remain& (0+255),b
  4421  00076E  51A1               	movf	(??_pf_write+1)& (0+255),w,b
  4422  000770  21A5               	addwfc	(??_pf_write+5)& (0+255),w,b
  4423  000772  6FAF               	movwf	(pf_write@remain+1)& (0+255),b
  4424  000774  51A2               	movf	(??_pf_write+2)& (0+255),w,b
  4425  000776  21A6               	addwfc	(??_pf_write+6)& (0+255),w,b
  4426  000778  6FB0               	movwf	(pf_write@remain+2)& (0+255),b
  4427  00077A  51A3               	movf	(??_pf_write+3)& (0+255),w,b
  4428  00077C  21A7               	addwfc	(??_pf_write+7)& (0+255),w,b
  4429  00077E  6FB1               	movwf	(pf_write@remain+3)& (0+255),b
  4430                           
  4431                           ; BSR set to: 0
  4432                           ;pff.c: 947: if (btw > remain) btw = (UINT)remain;
  4433  000780  519C               	movf	pf_write@btw& (0+255),w,b
  4434  000782  6FA0               	movwf	??_pf_write& (0+255),b
  4435  000784  519D               	movf	(pf_write@btw+1)& (0+255),w,b
  4436  000786  6FA1               	movwf	(??_pf_write+1)& (0+255),b
  4437  000788  6BA2               	clrf	(??_pf_write+2)& (0+255),b
  4438  00078A  6BA3               	clrf	(??_pf_write+3)& (0+255),b
  4439  00078C  51A0               	movf	??_pf_write& (0+255),w,b
  4440  00078E  5DAE               	subwf	pf_write@remain& (0+255),w,b
  4441  000790  51A1               	movf	(??_pf_write+1)& (0+255),w,b
  4442  000792  59AF               	subwfb	(pf_write@remain+1)& (0+255),w,b
  4443  000794  51A2               	movf	(??_pf_write+2)& (0+255),w,b
  4444  000796  59B0               	subwfb	(pf_write@remain+2)& (0+255),w,b
  4445  000798  51A3               	movf	(??_pf_write+3)& (0+255),w,b
  4446  00079A  59B1               	subwfb	(pf_write@remain+3)& (0+255),w,b
  4447  00079C  B0D8               	btfsc	status,0,c
  4448  00079E  D1AC               	goto	l1034
  4449                           
  4450                           ; BSR set to: 0
  4451  0007A0  C0AE  F09C         	movff	pf_write@remain,pf_write@btw
  4452  0007A4  C0AF  F09D         	movff	pf_write@remain+1,pf_write@btw+1
  4453                           
  4454                           ; BSR set to: 0
  4455                           ;pff.c: 949: while (btw) {
  4456  0007A8  D1A7               	goto	l1034
  4457  0007AA                     
  4458                           ; BSR set to: 0
  4459                           ;pff.c: 950: if ((UINT)fs->fptr % 512 == 0) {
  4460                           
  4461                           ; BSR set to: 0
  4462  0007AA  0EFF               	movlw	255
  4463  0007AC  6FA0               	movwf	??_pf_write& (0+255),b
  4464  0007AE  0E01               	movlw	1
  4465  0007B0  6FA1               	movwf	(??_pf_write+1)& (0+255),b
  4466  0007B2  EE20 F016          	lfsr	2,22
  4467  0007B6  51B9               	movf	pf_write@fs& (0+255),w,b
  4468  0007B8  26D9               	addwf	fsr2l,f,c
  4469  0007BA  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4470  0007BC  22DA               	addwfc	fsr2h,f,c
  4471  0007BE  CFDE F0A2          	movff	postinc2,??_pf_write+2
  4472  0007C2  CFDD F0A3          	movff	postdec2,??_pf_write+3
  4473  0007C6  51A0               	movf	??_pf_write& (0+255),w,b
  4474  0007C8  17A2               	andwf	(??_pf_write+2)& (0+255),f,b
  4475  0007CA  51A1               	movf	(??_pf_write+1)& (0+255),w,b
  4476  0007CC  17A3               	andwf	(??_pf_write+3)& (0+255),f,b
  4477  0007CE  51A2               	movf	(??_pf_write+2)& (0+255),w,b
  4478  0007D0  11A3               	iorwf	(??_pf_write+3)& (0+255),w,b
  4479  0007D2  A4D8               	btfss	status,2,c
  4480  0007D4  D0E9               	goto	l1025
  4481                           
  4482                           ; BSR set to: 0
  4483                           ;pff.c: 951: cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));
  4484  0007D6  EE20 F016          	lfsr	2,22
  4485  0007DA  51B9               	movf	pf_write@fs& (0+255),w,b
  4486  0007DC  26D9               	addwf	fsr2l,f,c
  4487  0007DE  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4488  0007E0  22DA               	addwfc	fsr2h,f,c
  4489  0007E2  CFDE F0A0          	movff	postinc2,??_pf_write
  4490  0007E6  CFDE F0A1          	movff	postinc2,??_pf_write+1
  4491  0007EA  CFDE F0A2          	movff	postinc2,??_pf_write+2
  4492  0007EE  CFDE F0A3          	movff	postinc2,??_pf_write+3
  4493  0007F2  0E0A               	movlw	10
  4494  0007F4  D005               	goto	u8040
  4495  0007F6                     u8045:
  4496  0007F6  90D8               	bcf	status,0,c
  4497  0007F8  33A3               	rrcf	(??_pf_write+3)& (0+255),f,b
  4498  0007FA  33A2               	rrcf	(??_pf_write+2)& (0+255),f,b
  4499  0007FC  33A1               	rrcf	(??_pf_write+1)& (0+255),f,b
  4500  0007FE  33A0               	rrcf	??_pf_write& (0+255),f,b
  4501  000800                     u8040:
  4502  000800  2EE8               	decfsz	wreg,f,c
  4503  000802  D7F9               	goto	u8045
  4504  000804  EE20 F002          	lfsr	2,2
  4505  000808  51B9               	movf	pf_write@fs& (0+255),w,b
  4506  00080A  26D9               	addwf	fsr2l,f,c
  4507  00080C  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4508  00080E  22DA               	addwfc	fsr2h,f,c
  4509  000810  50DF               	movf	indf2,w,c
  4510  000812  6FA4               	movwf	(??_pf_write+4)& (0+255),b
  4511  000814  05A4               	decf	(??_pf_write+4)& (0+255),w,b
  4512  000816  15A0               	andwf	??_pf_write& (0+255),w,b
  4513  000818  6FB6               	movwf	pf_write@cs& (0+255),b
  4514                           
  4515                           ; BSR set to: 0
  4516                           ;pff.c: 952: if (!cs) {
  4517  00081A  51B6               	movf	pf_write@cs& (0+255),w,b
  4518  00081C  A4D8               	btfss	status,2,c
  4519  00081E  D054               	goto	l1026
  4520                           
  4521                           ; BSR set to: 0
  4522                           ;pff.c: 953: if (fs->fptr == 0)
  4523  000820  EE20 F016          	lfsr	2,22
  4524  000824  51B9               	movf	pf_write@fs& (0+255),w,b
  4525  000826  26D9               	addwf	fsr2l,f,c
  4526  000828  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4527  00082A  22DA               	addwfc	fsr2h,f,c
  4528  00082C  50DE               	movf	postinc2,w,c
  4529  00082E  10DE               	iorwf	postinc2,w,c
  4530  000830  10DE               	iorwf	postinc2,w,c
  4531  000832  10DE               	iorwf	postinc2,w,c
  4532  000834  A4D8               	btfss	status,2,c
  4533  000836  D00F               	goto	l1027
  4534                           
  4535                           ; BSR set to: 0
  4536                           ;pff.c: 954: clst = fs->org_clust;
  4537  000838  EE20 F01E          	lfsr	2,30
  4538  00083C  51B9               	movf	pf_write@fs& (0+255),w,b
  4539  00083E  26D9               	addwf	fsr2l,f,c
  4540  000840  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4541  000842  22DA               	addwfc	fsr2h,f,c
  4542  000844  CFDE F0B2          	movff	postinc2,pf_write@clst
  4543  000848  CFDE F0B3          	movff	postinc2,pf_write@clst+1
  4544  00084C  CFDE F0B4          	movff	postinc2,pf_write@clst+2
  4545  000850  CFDE F0B5          	movff	postinc2,pf_write@clst+3
  4546  000854  D018               	goto	l1028
  4547  000856                     l1027:
  4548                           
  4549                           ; BSR set to: 0
  4550                           ;pff.c: 955: else
  4551                           ;pff.c: 956: clst = get_fat(fs->curr_clust);
  4552                           
  4553                           ; BSR set to: 0
  4554  000856  EE20 F022          	lfsr	2,34
  4555  00085A  51B9               	movf	pf_write@fs& (0+255),w,b
  4556  00085C  26D9               	addwf	fsr2l,f,c
  4557  00085E  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4558  000860  22DA               	addwfc	fsr2h,f,c
  4559  000862  CFDE F072          	movff	postinc2,get_fat@clst
  4560  000866  CFDE F073          	movff	postinc2,get_fat@clst+1
  4561  00086A  CFDE F074          	movff	postinc2,get_fat@clst+2
  4562  00086E  CFDE F075          	movff	postinc2,get_fat@clst+3
  4563  000872  EC82  F005         	call	_get_fat	;wreg free
  4564  000876  C072  F0B2         	movff	?_get_fat,pf_write@clst
  4565  00087A  C073  F0B3         	movff	?_get_fat+1,pf_write@clst+1
  4566  00087E  C074  F0B4         	movff	?_get_fat+2,pf_write@clst+2
  4567  000882  C075  F0B5         	movff	?_get_fat+3,pf_write@clst+3
  4568  000886                     l1028:
  4569                           
  4570                           ;pff.c: 957: if (clst <= 1) {fs->flag = 0; return FR_DISK_ERR;};
  4571  000886  0100               	movlb	0	; () banked
  4572  000888  51B5               	movf	(pf_write@clst+3)& (0+255),w,b
  4573  00088A  11B4               	iorwf	(pf_write@clst+2)& (0+255),w,b
  4574  00088C  11B3               	iorwf	(pf_write@clst+1)& (0+255),w,b
  4575  00088E  E10E               	bnz	l7122
  4576  000890  0E02               	movlw	2
  4577  000892  5DB2               	subwf	pf_write@clst& (0+255),w,b
  4578  000894  B0D8               	btfsc	status,0,c
  4579  000896  D00A               	goto	l1029
  4580                           
  4581                           ; BSR set to: 0
  4582  000898  EE20 F001          	lfsr	2,1
  4583  00089C  51B9               	movf	pf_write@fs& (0+255),w,b
  4584  00089E  26D9               	addwf	fsr2l,f,c
  4585  0008A0  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4586  0008A2  22DA               	addwfc	fsr2h,f,c
  4587  0008A4  0E00               	movlw	0
  4588  0008A6  6EDF               	movwf	indf2,c
  4589                           
  4590                           ; BSR set to: 0
  4591  0008A8  0E01               	movlw	1
  4592                           
  4593                           ; BSR set to: 0
  4594  0008AA  0012               	return	
  4595  0008AC                     l1029:
  4596  0008AC                     l7122:
  4597                           
  4598                           ; BSR set to: 0
  4599                           ;pff.c: 958: fs->curr_clust = clst;
  4600  0008AC  EE20 F022          	lfsr	2,34
  4601  0008B0  51B9               	movf	pf_write@fs& (0+255),w,b
  4602  0008B2  26D9               	addwf	fsr2l,f,c
  4603  0008B4  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4604  0008B6  22DA               	addwfc	fsr2h,f,c
  4605  0008B8  C0B2  FFDE         	movff	pf_write@clst,postinc2
  4606  0008BC  C0B3  FFDE         	movff	pf_write@clst+1,postinc2
  4607  0008C0  C0B4  FFDE         	movff	pf_write@clst+2,postinc2
  4608  0008C4  C0B5  FFDE         	movff	pf_write@clst+3,postinc2
  4609  0008C8                     l1026:
  4610                           
  4611                           ; BSR set to: 0
  4612                           ;pff.c: 959: }
  4613                           ;pff.c: 960: sect = clust2sect(fs->curr_clust);
  4614                           
  4615                           ; BSR set to: 0
  4616  0008C8  EE20 F022          	lfsr	2,34
  4617  0008CC  51B9               	movf	pf_write@fs& (0+255),w,b
  4618  0008CE  26D9               	addwf	fsr2l,f,c
  4619  0008D0  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4620  0008D2  22DA               	addwfc	fsr2h,f,c
  4621  0008D4  CFDE F026          	movff	postinc2,clust2sect@clst
  4622  0008D8  CFDE F027          	movff	postinc2,clust2sect@clst+1
  4623  0008DC  CFDE F028          	movff	postinc2,clust2sect@clst+2
  4624  0008E0  CFDE F029          	movff	postinc2,clust2sect@clst+3
  4625  0008E4  ECC1  F013         	call	_clust2sect	;wreg free
  4626  0008E8  C026  F0AA         	movff	?_clust2sect,pf_write@sect
  4627  0008EC  C027  F0AB         	movff	?_clust2sect+1,pf_write@sect+1
  4628  0008F0  C028  F0AC         	movff	?_clust2sect+2,pf_write@sect+2
  4629  0008F4  C029  F0AD         	movff	?_clust2sect+3,pf_write@sect+3
  4630                           
  4631                           ;pff.c: 961: if (!sect) {fs->flag = 0; return FR_DISK_ERR;};
  4632  0008F8  0100               	movlb	0	; () banked
  4633  0008FA  51AA               	movf	pf_write@sect& (0+255),w,b
  4634  0008FC  11AB               	iorwf	(pf_write@sect+1)& (0+255),w,b
  4635  0008FE  11AC               	iorwf	(pf_write@sect+2)& (0+255),w,b
  4636  000900  11AD               	iorwf	(pf_write@sect+3)& (0+255),w,b
  4637  000902  A4D8               	btfss	status,2,c
  4638  000904  D00A               	goto	l1030
  4639                           
  4640                           ; BSR set to: 0
  4641  000906  EE20 F001          	lfsr	2,1
  4642  00090A  51B9               	movf	pf_write@fs& (0+255),w,b
  4643  00090C  26D9               	addwf	fsr2l,f,c
  4644  00090E  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4645  000910  22DA               	addwfc	fsr2h,f,c
  4646  000912  0E00               	movlw	0
  4647  000914  6EDF               	movwf	indf2,c
  4648                           
  4649                           ; BSR set to: 0
  4650  000916  0E01               	movlw	1
  4651                           
  4652                           ; BSR set to: 0
  4653  000918  0012               	return	
  4654  00091A                     l1030:
  4655                           
  4656                           ; BSR set to: 0
  4657                           ;pff.c: 962: fs->dsect = sect + cs;
  4658                           
  4659                           ; BSR set to: 0
  4660  00091A  51B6               	movf	pf_write@cs& (0+255),w,b
  4661  00091C  25AA               	addwf	pf_write@sect& (0+255),w,b
  4662  00091E  6FA0               	movwf	??_pf_write& (0+255),b
  4663  000920  0E00               	movlw	0
  4664  000922  21AB               	addwfc	(pf_write@sect+1)& (0+255),w,b
  4665  000924  6FA1               	movwf	(??_pf_write+1)& (0+255),b
  4666  000926  0E00               	movlw	0
  4667  000928  21AC               	addwfc	(pf_write@sect+2)& (0+255),w,b
  4668  00092A  6FA2               	movwf	(??_pf_write+2)& (0+255),b
  4669  00092C  0E00               	movlw	0
  4670  00092E  21AD               	addwfc	(pf_write@sect+3)& (0+255),w,b
  4671  000930  6FA3               	movwf	(??_pf_write+3)& (0+255),b
  4672  000932  EE20 F026          	lfsr	2,38
  4673  000936  51B9               	movf	pf_write@fs& (0+255),w,b
  4674  000938  26D9               	addwf	fsr2l,f,c
  4675  00093A  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4676  00093C  22DA               	addwfc	fsr2h,f,c
  4677  00093E  C0A0  FFDE         	movff	??_pf_write,postinc2
  4678  000942  C0A1  FFDE         	movff	??_pf_write+1,postinc2
  4679  000946  C0A2  FFDE         	movff	??_pf_write+2,postinc2
  4680  00094A  C0A3  FFDE         	movff	??_pf_write+3,postinc2
  4681                           
  4682                           ; BSR set to: 0
  4683                           ;pff.c: 963: if (disk_writep(0, fs->dsect)) {fs->flag = 0; return FR_DISK_ERR;};
  4684  00094E  0E00               	movlw	0
  4685  000950  6F60               	movwf	disk_writep@wr& (0+255),b
  4686  000952  0E00               	movlw	0
  4687  000954  6F61               	movwf	(disk_writep@wr+1)& (0+255),b
  4688  000956  0E00               	movlw	0
  4689  000958  6F62               	movwf	(disk_writep@wr+2)& (0+255),b
  4690  00095A  EE20 F026          	lfsr	2,38
  4691  00095E  51B9               	movf	pf_write@fs& (0+255),w,b
  4692  000960  26D9               	addwf	fsr2l,f,c
  4693  000962  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4694  000964  22DA               	addwfc	fsr2h,f,c
  4695  000966  CFDE F063          	movff	postinc2,disk_writep@sc
  4696  00096A  CFDE F064          	movff	postinc2,disk_writep@sc+1
  4697  00096E  CFDE F065          	movff	postinc2,disk_writep@sc+2
  4698  000972  CFDE F066          	movff	postinc2,disk_writep@sc+3
  4699  000976  EC93  F00F         	call	_disk_writep	;wreg free
  4700  00097A  0900               	iorlw	0
  4701  00097C  B4D8               	btfsc	status,2,c
  4702  00097E  D00B               	goto	l1031
  4703  000980  0100               	movlb	0	; () banked
  4704  000982  EE20 F001          	lfsr	2,1
  4705  000986  51B9               	movf	pf_write@fs& (0+255),w,b
  4706  000988  26D9               	addwf	fsr2l,f,c
  4707  00098A  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4708  00098C  22DA               	addwfc	fsr2h,f,c
  4709  00098E  0E00               	movlw	0
  4710  000990  6EDF               	movwf	indf2,c
  4711                           
  4712                           ; BSR set to: 0
  4713  000992  0E01               	movlw	1
  4714                           
  4715                           ; BSR set to: 0
  4716  000994  0012               	return	
  4717  000996                     l1031:
  4718                           
  4719                           ;pff.c: 964: fs->flag |= 0x40;
  4720                           
  4721                           ; BSR set to: 0
  4722  000996  0100               	movlb	0	; () banked
  4723  000998  EE20 F001          	lfsr	2,1
  4724  00099C  51B9               	movf	pf_write@fs& (0+255),w,b
  4725  00099E  26D9               	addwf	fsr2l,f,c
  4726  0009A0  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4727  0009A2  22DA               	addwfc	fsr2h,f,c
  4728  0009A4  0E00               	movlw	0
  4729  0009A6  8CDB               	bsf	plusw2,6,c
  4730  0009A8                     l1025:
  4731                           
  4732                           ; BSR set to: 0
  4733                           ;pff.c: 965: }
  4734                           ;pff.c: 966: wcnt = 512 - (UINT)fs->fptr % 512;
  4735  0009A8  0EFF               	movlw	255
  4736  0009AA  6FA0               	movwf	??_pf_write& (0+255),b
  4737  0009AC  0E01               	movlw	1
  4738  0009AE  6FA1               	movwf	(??_pf_write+1)& (0+255),b
  4739  0009B0  EE20 F016          	lfsr	2,22
  4740  0009B4  51B9               	movf	pf_write@fs& (0+255),w,b
  4741  0009B6  26D9               	addwf	fsr2l,f,c
  4742  0009B8  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4743  0009BA  22DA               	addwfc	fsr2h,f,c
  4744  0009BC  CFDE F0A2          	movff	postinc2,??_pf_write+2
  4745  0009C0  CFDD F0A3          	movff	postdec2,??_pf_write+3
  4746  0009C4  51A0               	movf	??_pf_write& (0+255),w,b
  4747  0009C6  17A2               	andwf	(??_pf_write+2)& (0+255),f,b
  4748  0009C8  51A1               	movf	(??_pf_write+1)& (0+255),w,b
  4749  0009CA  17A3               	andwf	(??_pf_write+3)& (0+255),f,b
  4750  0009CC  1FA2               	comf	(??_pf_write+2)& (0+255),f,b
  4751  0009CE  1FA3               	comf	(??_pf_write+3)& (0+255),f,b
  4752  0009D0  4BA2               	infsnz	(??_pf_write+2)& (0+255),f,b
  4753  0009D2  2BA3               	incf	(??_pf_write+3)& (0+255),f,b
  4754  0009D4  0E00               	movlw	0
  4755  0009D6  25A2               	addwf	(??_pf_write+2)& (0+255),w,b
  4756  0009D8  6FB7               	movwf	pf_write@wcnt& (0+255),b
  4757  0009DA  0E02               	movlw	2
  4758  0009DC  21A3               	addwfc	(??_pf_write+3)& (0+255),w,b
  4759  0009DE  6FB8               	movwf	(pf_write@wcnt+1)& (0+255),b
  4760                           
  4761                           ; BSR set to: 0
  4762                           ;pff.c: 967: if (wcnt > btw)wcnt = btw;
  4763  0009E0  51B7               	movf	pf_write@wcnt& (0+255),w,b
  4764  0009E2  5D9C               	subwf	pf_write@btw& (0+255),w,b
  4765  0009E4  51B8               	movf	(pf_write@wcnt+1)& (0+255),w,b
  4766  0009E6  599D               	subwfb	(pf_write@btw+1)& (0+255),w,b
  4767  0009E8  B0D8               	btfsc	status,0,c
  4768  0009EA  D004               	goto	l1032
  4769                           
  4770                           ; BSR set to: 0
  4771  0009EC  C09C  F0B7         	movff	pf_write@btw,pf_write@wcnt
  4772  0009F0  C09D  F0B8         	movff	pf_write@btw+1,pf_write@wcnt+1
  4773  0009F4                     l1032:
  4774                           
  4775                           ; BSR set to: 0
  4776                           ;pff.c: 968: if (disk_writep(p, fs->dsect )) {fs->flag = 0; return FR_DISK_ERR;};
  4777                           
  4778                           ; BSR set to: 0
  4779  0009F4  C0A8  F060         	movff	pf_write@p,disk_writep@wr
  4780  0009F8  C0A9  F061         	movff	pf_write@p+1,disk_writep@wr+1
  4781  0009FC  5160               	movf	disk_writep@wr& (0+255),w,b
  4782  0009FE  1161               	iorwf	(disk_writep@wr+1)& (0+255),w,b
  4783  000A00  A4D8               	btfss	status,2,c
  4784  000A02  0E00               	movlw	low (__mediumconst shr (0+16))
  4785  000A04  6F62               	movwf	(disk_writep@wr+2)& (0+255),b
  4786  000A06  EE20 F026          	lfsr	2,38
  4787  000A0A  51B9               	movf	pf_write@fs& (0+255),w,b
  4788  000A0C  26D9               	addwf	fsr2l,f,c
  4789  000A0E  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4790  000A10  22DA               	addwfc	fsr2h,f,c
  4791  000A12  CFDE F063          	movff	postinc2,disk_writep@sc
  4792  000A16  CFDE F064          	movff	postinc2,disk_writep@sc+1
  4793  000A1A  CFDE F065          	movff	postinc2,disk_writep@sc+2
  4794  000A1E  CFDE F066          	movff	postinc2,disk_writep@sc+3
  4795  000A22  EC93  F00F         	call	_disk_writep	;wreg free
  4796  000A26  0900               	iorlw	0
  4797  000A28  B4D8               	btfsc	status,2,c
  4798  000A2A  D00B               	goto	l1033
  4799  000A2C  0100               	movlb	0	; () banked
  4800  000A2E  EE20 F001          	lfsr	2,1
  4801  000A32  51B9               	movf	pf_write@fs& (0+255),w,b
  4802  000A34  26D9               	addwf	fsr2l,f,c
  4803  000A36  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4804  000A38  22DA               	addwfc	fsr2h,f,c
  4805  000A3A  0E00               	movlw	0
  4806  000A3C  6EDF               	movwf	indf2,c
  4807                           
  4808                           ; BSR set to: 0
  4809  000A3E  0E01               	movlw	1
  4810                           
  4811                           ; BSR set to: 0
  4812  000A40  0012               	return	
  4813  000A42                     l1033:
  4814                           
  4815                           ;pff.c: 969: fs->fptr += wcnt; p += wcnt;
  4816                           
  4817                           ; BSR set to: 0
  4818  000A42  0100               	movlb	0	; () banked
  4819  000A44  EE20 F016          	lfsr	2,22
  4820  000A48  51B9               	movf	pf_write@fs& (0+255),w,b
  4821  000A4A  26D9               	addwf	fsr2l,f,c
  4822  000A4C  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4823  000A4E  22DA               	addwfc	fsr2h,f,c
  4824  000A50  51B7               	movf	pf_write@wcnt& (0+255),w,b
  4825  000A52  26DE               	addwf	postinc2,f,c
  4826  000A54  51B8               	movf	(pf_write@wcnt+1)& (0+255),w,b
  4827  000A56  22DE               	addwfc	postinc2,f,c
  4828  000A58  0E00               	movlw	0
  4829  000A5A  22DE               	addwfc	postinc2,f,c
  4830  000A5C  22DE               	addwfc	postinc2,f,c
  4831                           
  4832                           ; BSR set to: 0
  4833  000A5E  51B7               	movf	pf_write@wcnt& (0+255),w,b
  4834  000A60  27A8               	addwf	pf_write@p& (0+255),f,b
  4835  000A62  51B8               	movf	(pf_write@wcnt+1)& (0+255),w,b
  4836  000A64  23A9               	addwfc	(pf_write@p+1)& (0+255),f,b
  4837                           
  4838                           ; BSR set to: 0
  4839                           ;pff.c: 970: btw -= wcnt; *bw += wcnt;
  4840  000A66  51B7               	movf	pf_write@wcnt& (0+255),w,b
  4841  000A68  5F9C               	subwf	pf_write@btw& (0+255),f,b
  4842  000A6A  51B8               	movf	(pf_write@wcnt+1)& (0+255),w,b
  4843  000A6C  5B9D               	subwfb	(pf_write@btw+1)& (0+255),f,b
  4844                           
  4845                           ; BSR set to: 0
  4846  000A6E  C09E  FFD9         	movff	pf_write@bw,fsr2l
  4847  000A72  C09F  FFDA         	movff	pf_write@bw+1,fsr2h
  4848  000A76  51B7               	movf	pf_write@wcnt& (0+255),w,b
  4849  000A78  26DE               	addwf	postinc2,f,c
  4850  000A7A  51B8               	movf	(pf_write@wcnt+1)& (0+255),w,b
  4851  000A7C  22DD               	addwfc	postdec2,f,c
  4852                           
  4853                           ; BSR set to: 0
  4854                           ;pff.c: 971: if ((UINT)fs->fptr % 512 == 0) {
  4855  000A7E  0EFF               	movlw	255
  4856  000A80  6FA0               	movwf	??_pf_write& (0+255),b
  4857  000A82  0E01               	movlw	1
  4858  000A84  6FA1               	movwf	(??_pf_write+1)& (0+255),b
  4859  000A86  EE20 F016          	lfsr	2,22
  4860  000A8A  51B9               	movf	pf_write@fs& (0+255),w,b
  4861  000A8C  26D9               	addwf	fsr2l,f,c
  4862  000A8E  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4863  000A90  22DA               	addwfc	fsr2h,f,c
  4864  000A92  CFDE F0A2          	movff	postinc2,??_pf_write+2
  4865  000A96  CFDD F0A3          	movff	postdec2,??_pf_write+3
  4866  000A9A  51A0               	movf	??_pf_write& (0+255),w,b
  4867  000A9C  17A2               	andwf	(??_pf_write+2)& (0+255),f,b
  4868  000A9E  51A1               	movf	(??_pf_write+1)& (0+255),w,b
  4869  000AA0  17A3               	andwf	(??_pf_write+3)& (0+255),f,b
  4870  000AA2  51A2               	movf	(??_pf_write+2)& (0+255),w,b
  4871  000AA4  11A3               	iorwf	(??_pf_write+3)& (0+255),w,b
  4872  000AA6  A4D8               	btfss	status,2,c
  4873  000AA8  D027               	goto	l1034
  4874                           
  4875                           ; BSR set to: 0
  4876                           ;pff.c: 972: if (disk_writep(0, 0)) {fs->flag = 0; return FR_DISK_ERR;};
  4877  000AAA  0E00               	movlw	0
  4878  000AAC  6F60               	movwf	disk_writep@wr& (0+255),b
  4879  000AAE  0E00               	movlw	0
  4880  000AB0  6F61               	movwf	(disk_writep@wr+1)& (0+255),b
  4881  000AB2  0E00               	movlw	0
  4882  000AB4  6F62               	movwf	(disk_writep@wr+2)& (0+255),b
  4883  000AB6  0E00               	movlw	0
  4884  000AB8  6F63               	movwf	disk_writep@sc& (0+255),b
  4885  000ABA  0E00               	movlw	0
  4886  000ABC  6F64               	movwf	(disk_writep@sc+1)& (0+255),b
  4887  000ABE  0E00               	movlw	0
  4888  000AC0  6F65               	movwf	(disk_writep@sc+2)& (0+255),b
  4889  000AC2  0E00               	movlw	0
  4890  000AC4  6F66               	movwf	(disk_writep@sc+3)& (0+255),b
  4891  000AC6  EC93  F00F         	call	_disk_writep	;wreg free
  4892  000ACA  0900               	iorlw	0
  4893  000ACC  B4D8               	btfsc	status,2,c
  4894  000ACE  D00B               	goto	l1035
  4895  000AD0  0100               	movlb	0	; () banked
  4896  000AD2  EE20 F001          	lfsr	2,1
  4897  000AD6  51B9               	movf	pf_write@fs& (0+255),w,b
  4898  000AD8  26D9               	addwf	fsr2l,f,c
  4899  000ADA  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4900  000ADC  22DA               	addwfc	fsr2h,f,c
  4901  000ADE  0E00               	movlw	0
  4902  000AE0  6EDF               	movwf	indf2,c
  4903                           
  4904                           ; BSR set to: 0
  4905  000AE2  0E01               	movlw	1
  4906                           
  4907                           ; BSR set to: 0
  4908  000AE4  0012               	return	
  4909  000AE6                     l1035:
  4910                           
  4911                           ;pff.c: 973: fs->flag &= ~0x40;
  4912                           
  4913                           ; BSR set to: 0
  4914  000AE6  0100               	movlb	0	; () banked
  4915  000AE8  EE20 F001          	lfsr	2,1
  4916  000AEC  51B9               	movf	pf_write@fs& (0+255),w,b
  4917  000AEE  26D9               	addwf	fsr2l,f,c
  4918  000AF0  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4919  000AF2  22DA               	addwfc	fsr2h,f,c
  4920  000AF4  0EBF               	movlw	191
  4921  000AF6  16DF               	andwf	indf2,f,c
  4922  000AF8                     l1034:
  4923                           
  4924                           ; BSR set to: 0
  4925                           
  4926                           ; BSR set to: 0
  4927                           
  4928                           ; BSR set to: 0
  4929  000AF8  519C               	movf	pf_write@btw& (0+255),w,b
  4930  000AFA  119D               	iorwf	(pf_write@btw+1)& (0+255),w,b
  4931  000AFC  A4D8               	btfss	status,2,c
  4932  000AFE  D655               	goto	l1024
  4933                           
  4934                           ; BSR set to: 0
  4935                           ;pff.c: 974: }
  4936                           ;pff.c: 975: }
  4937                           ;pff.c: 977: return FR_OK;
  4938                           
  4939                           ; BSR set to: 0
  4940  000B00  0E00               	movlw	0
  4941  000B02  0012               	return	
  4942  000B04                     __end_of_pf_write:
  4943                           	opt stack 0
  4944                           tosu	equ	0xFFF
  4945                           tosh	equ	0xFFE
  4946                           tosl	equ	0xFFD
  4947                           pclath	equ	0xFFA
  4948                           tblptru	equ	0xFF8
  4949                           tblptrh	equ	0xFF7
  4950                           tblptrl	equ	0xFF6
  4951                           tablat	equ	0xFF5
  4952                           prodh	equ	0xFF4
  4953                           prodl	equ	0xFF3
  4954                           intcon	equ	0xFF2
  4955                           intcon2	equ	0xFF1
  4956                           intcon3	equ	0xFF0
  4957                           postinc0	equ	0xFEE
  4958                           wreg	equ	0xFE8
  4959                           postinc1	equ	0xFE6
  4960                           postdec1	equ	0xFE5
  4961                           fsr1h	equ	0xFE2
  4962                           fsr1l	equ	0xFE1
  4963                           indf2	equ	0xFDF
  4964                           postinc2	equ	0xFDE
  4965                           postdec2	equ	0xFDD
  4966                           plusw2	equ	0xFDB
  4967                           fsr2h	equ	0xFDA
  4968                           fsr2l	equ	0xFD9
  4969                           status	equ	0xFD8
  4970                           
  4971 ;; *************** function _disk_writep *****************
  4972 ;; Defined at:
  4973 ;;		line 293 in file "diskio.c"
  4974 ;; Parameters:    Size  Location     Type
  4975 ;;  wr              3    0[BANK0 ] PTR const unsigned char 
  4976 ;;		 -> ROM(32767), STR_10(8), 
  4977 ;;  sc              4    3[BANK0 ] unsigned long 
  4978 ;; Auto vars:     Size  Location     Type
  4979 ;;  j               2    9[BANK0 ] int 
  4980 ;;  i               2    7[BANK0 ] int 
  4981 ;;  buff            1   11[BANK0 ] unsigned char 
  4982 ;;  res             1    0        enum E14
  4983 ;; Return value:  Size  Location     Type
  4984 ;;                  1    wreg      enum E14
  4985 ;; Registers used:
  4986 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4987 ;; Tracked objects:
  4988 ;;		On entry : 0/0
  4989 ;;		On exit  : 0/0
  4990 ;;		Unchanged: 0/0
  4991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4992 ;;      Params:         0       7       0       0       0       0       0       0       0
  4993 ;;      Locals:         0       5       0       0       0       0       0       0       0
  4994 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4995 ;;      Totals:         4      12       0       0       0       0       0       0       0
  4996 ;;Total ram usage:       16 bytes
  4997 ;; Hardware stack levels used:    1
  4998 ;; Hardware stack levels required when called:    6
  4999 ;; This function calls:
  5000 ;;		_WriteSPI_
  5001 ;;		_command
  5002 ;;		_dummy_clocks
  5003 ;;		_proceed
  5004 ;;		_response
  5005 ;; This function is called by:
  5006 ;;		_pf_write
  5007 ;; This function uses a non-reentrant model
  5008 ;;
  5009                           
  5010                           	psect	text23
  5011  001F26                     __ptext23:
  5012                           	opt stack 0
  5013  001F26                     _disk_writep:
  5014                           	opt stack 21
  5015                           
  5016                           ;diskio.c: 298: DRESULT res;
  5017                           ;diskio.c: 300: unsigned char buff;
  5018                           ;diskio.c: 301: int i=0,j;
  5019                           
  5020                           ; BSR set to: 0
  5021                           ;incstack = 0
  5022  001F26  0E00               	movlw	0
  5023  001F28  0100               	movlb	0	; () banked
  5024  001F2A  6F68               	movwf	(disk_writep@i+1)& (0+255),b
  5025  001F2C  0E00               	movlw	0
  5026  001F2E  6F67               	movwf	disk_writep@i& (0+255),b
  5027                           
  5028                           ; BSR set to: 0
  5029                           ;diskio.c: 305: dummy_clocks(8);
  5030  001F30  0E08               	movlw	8
  5031  001F32  EC9D  F017         	call	_dummy_clocks
  5032                           
  5033                           ;diskio.c: 306: command(0X58, sc*512, 0X00);
  5034  001F36  C063  F028         	movff	disk_writep@sc,??_disk_writep
  5035  001F3A  C064  F029         	movff	disk_writep@sc+1,??_disk_writep+1
  5036  001F3E  C065  F02A         	movff	disk_writep@sc+2,??_disk_writep+2
  5037  001F42  C066  F02B         	movff	disk_writep@sc+3,??_disk_writep+3
  5038  001F46  0E09               	movlw	9
  5039  001F48                     u7565:
  5040  001F48  90D8               	bcf	status,0,c
  5041  001F4A  3628               	rlcf	??_disk_writep,f,c
  5042  001F4C  3629               	rlcf	??_disk_writep+1,f,c
  5043  001F4E  362A               	rlcf	??_disk_writep+2,f,c
  5044  001F50  362B               	rlcf	??_disk_writep+3,f,c
  5045  001F52  2EE8               	decfsz	wreg,f,c
  5046  001F54  D7F9               	goto	u7565
  5047  001F56  C028  F021         	movff	??_disk_writep,command@arg
  5048  001F5A  C029  F022         	movff	??_disk_writep+1,command@arg+1
  5049  001F5E  C02A  F023         	movff	??_disk_writep+2,command@arg+2
  5050  001F62  C02B  F024         	movff	??_disk_writep+3,command@arg+3
  5051  001F66  0E00               	movlw	0
  5052  001F68  6E25               	movwf	command@CRC,c
  5053  001F6A  0E58               	movlw	88
  5054  001F6C  EC4A  F017         	call	_command
  5055                           
  5056                           ;diskio.c: 307: proceed();
  5057  001F70  EC30  F019         	call	_proceed	;wreg free
  5058  001F74                     
  5059                           ;diskio.c: 309: buff = response();
  5060  001F74  EC23  F019         	call	_response	;wreg free
  5061  001F78  0100               	movlb	0	; () banked
  5062  001F7A  6F6B               	movwf	disk_writep@buff& (0+255),b
  5063                           
  5064                           ; BSR set to: 0
  5065                           ;diskio.c: 310: }while(buff!=0x00);
  5066  001F7C  516B               	movf	disk_writep@buff& (0+255),w,b
  5067  001F7E  A4D8               	btfss	status,2,c
  5068  001F80  D7F9               	goto	l799
  5069                           
  5070                           ; BSR set to: 0
  5071                           ;diskio.c: 313: _delay((unsigned long)((2000)*(48000000/4000.0)));
  5072                           
  5073                           ; BSR set to: 0
  5074  001F82  0E7A               	movlw	122
  5075  001F84  6E29               	movwf	(??_disk_writep+1)& (0+255),c
  5076  001F86  0EC1               	movlw	193
  5077  001F88  6E28               	movwf	??_disk_writep& (0+255),c
  5078  001F8A  0E82               	movlw	130
  5079  001F8C                     u9147:
  5080  001F8C  2EE8               	decfsz	wreg,f,c
  5081  001F8E  D7FE               	bra	u9147
  5082  001F90  2E28               	decfsz	??_disk_writep& (0+255),f,c
  5083  001F92  D7FC               	bra	u9147
  5084  001F94  2E29               	decfsz	(??_disk_writep+1)& (0+255),f,c
  5085  001F96  D7FA               	bra	u9147
  5086                           
  5087                           ;diskio.c: 316: dummy_clocks(8);
  5088  001F98  0E08               	movlw	8
  5089  001F9A  EC9D  F017         	call	_dummy_clocks
  5090                           
  5091                           ;diskio.c: 318: WriteSPI_(0XFE);
  5092  001F9E  0EFE               	movlw	254
  5093  001FA0  ECBF  F017         	call	_WriteSPI_
  5094                           
  5095                           ;diskio.c: 320: for(j=0;j<512;j++)
  5096  001FA4  0E00               	movlw	0
  5097  001FA6  0100               	movlb	0	; () banked
  5098  001FA8  6F6A               	movwf	(disk_writep@j+1)& (0+255),b
  5099  001FAA  0E00               	movlw	0
  5100  001FAC  6F69               	movwf	disk_writep@j& (0+255),b
  5101  001FAE                     l6812:
  5102                           
  5103                           ; BSR set to: 0
  5104  001FAE  BF6A               	btfsc	(disk_writep@j+1)& (0+255),7,b
  5105  001FB0  D004               	goto	l801
  5106  001FB2  0E02               	movlw	2
  5107  001FB4  5D6A               	subwf	(disk_writep@j+1)& (0+255),w,b
  5108  001FB6  B0D8               	btfsc	status,0,c
  5109  001FB8  D024               	goto	u7600
  5110  001FBA                     l801:
  5111                           
  5112                           ; BSR set to: 0
  5113                           ;diskio.c: 321: {
  5114                           ;diskio.c: 322: if(*wr!='\0')
  5115                           
  5116                           ; BSR set to: 0
  5117  001FBA  C060  FFF6         	movff	disk_writep@wr,tblptrl
  5118  001FBE  C061  FFF7         	movff	disk_writep@wr+1,tblptrh
  5119  001FC2  C062  FFF8         	movff	disk_writep@wr+2,tblptru
  5120  001FC6  0008               	tblrd		*
  5121  001FC8  50F5               	movf	tablat,w,c
  5122  001FCA  0900               	iorlw	0
  5123  001FCC  B4D8               	btfsc	status,2,c
  5124  001FCE  D012               	goto	l803
  5125                           
  5126                           ; BSR set to: 0
  5127                           ;diskio.c: 323: {
  5128                           ;diskio.c: 324: WriteSPI_(*wr);
  5129  001FD0  C060  FFF6         	movff	disk_writep@wr,tblptrl
  5130  001FD4  C061  FFF7         	movff	disk_writep@wr+1,tblptrh
  5131  001FD8  C062  FFF8         	movff	disk_writep@wr+2,tblptru
  5132  001FDC  0008               	tblrd		*
  5133  001FDE  50F5               	movf	tablat,w,c
  5134  001FE0  ECBF  F017         	call	_WriteSPI_
  5135                           
  5136                           ;diskio.c: 325: wr++;
  5137  001FE4  0100               	movlb	0	; () banked
  5138  001FE6  0E01               	movlw	1
  5139  001FE8  2760               	addwf	disk_writep@wr& (0+255),f,b
  5140  001FEA  0E00               	movlw	0
  5141  001FEC  2361               	addwfc	(disk_writep@wr+1)& (0+255),f,b
  5142  001FEE  0E00               	movlw	0
  5143  001FF0  2362               	addwfc	(disk_writep@wr+2)& (0+255),f,b
  5144                           
  5145                           ;diskio.c: 326: }
  5146  001FF2  D003               	goto	l804
  5147  001FF4                     l803:
  5148                           
  5149                           ; BSR set to: 0
  5150                           ;diskio.c: 327: else
  5151                           ;diskio.c: 328: WriteSPI_(0x00);
  5152                           
  5153                           ; BSR set to: 0
  5154  001FF4  0E00               	movlw	0
  5155  001FF6  ECBF  F017         	call	_WriteSPI_
  5156  001FFA                     l804:
  5157  001FFA  0100               	movlb	0	; () banked
  5158  001FFC  4B69               	infsnz	disk_writep@j& (0+255),f,b
  5159  001FFE  2B6A               	incf	(disk_writep@j+1)& (0+255),f,b
  5160  002000  D7D6               	goto	l6812
  5161  002002                     u7600:
  5162                           
  5163                           ; BSR set to: 0
  5164                           ;diskio.c: 329: }
  5165                           ;diskio.c: 330: WriteSPI_(0XFF);
  5166                           
  5167                           ; BSR set to: 0
  5168  002002  0EFF               	movlw	255
  5169  002004  ECBF  F017         	call	_WriteSPI_
  5170                           
  5171                           ;diskio.c: 331: WriteSPI_(0XFF);
  5172  002008  0EFF               	movlw	255
  5173  00200A  ECBF  F017         	call	_WriteSPI_
  5174                           
  5175                           ;diskio.c: 333: proceed();
  5176  00200E  EC30  F019         	call	_proceed	;wreg free
  5177                           
  5178                           ;diskio.c: 335: _delay((unsigned long)((1000)*(48000000/4000.0)));
  5179  002012  0E3D               	movlw	61
  5180  002014  6E29               	movwf	(??_disk_writep+1)& (0+255),c
  5181  002016  0EE1               	movlw	225
  5182  002018  6E28               	movwf	??_disk_writep& (0+255),c
  5183  00201A  0E40               	movlw	64
  5184  00201C                     u9157:
  5185  00201C  2EE8               	decfsz	wreg,f,c
  5186  00201E  D7FE               	bra	u9157
  5187  002020  2E28               	decfsz	??_disk_writep& (0+255),f,c
  5188  002022  D7FC               	bra	u9157
  5189  002024  2E29               	decfsz	(??_disk_writep+1)& (0+255),f,c
  5190  002026  D7FA               	bra	u9157
  5191                           
  5192                           ;diskio.c: 337: dummy_clocks(8);
  5193  002028  0E08               	movlw	8
  5194  00202A  EC9D  F017         	call	_dummy_clocks
  5195                           
  5196                           ;diskio.c: 339: command(0X4D,0X00000000,0X00);
  5197  00202E  0E00               	movlw	0
  5198  002030  6E21               	movwf	command@arg,c
  5199  002032  0E00               	movlw	0
  5200  002034  6E22               	movwf	command@arg+1,c
  5201  002036  0E00               	movlw	0
  5202  002038  6E23               	movwf	command@arg+2,c
  5203  00203A  0E00               	movlw	0
  5204  00203C  6E24               	movwf	command@arg+3,c
  5205  00203E  0E00               	movlw	0
  5206  002040  6E25               	movwf	command@CRC,c
  5207  002042  0E4D               	movlw	77
  5208  002044  EC4A  F017         	call	_command
  5209                           
  5210                           ;diskio.c: 340: proceed();
  5211  002048  EC30  F019         	call	_proceed	;wreg free
  5212  00204C                     
  5213                           ;diskio.c: 342: buff = response();
  5214  00204C  EC23  F019         	call	_response	;wreg free
  5215  002050  0100               	movlb	0	; () banked
  5216  002052  6F6B               	movwf	disk_writep@buff& (0+255),b
  5217                           
  5218                           ; BSR set to: 0
  5219                           ;diskio.c: 343: }while(buff!=0x00);
  5220  002054  516B               	movf	disk_writep@buff& (0+255),w,b
  5221  002056  A4D8               	btfss	status,2,c
  5222  002058  D7F9               	goto	l805
  5223                           
  5224                           ; BSR set to: 0
  5225                           ;diskio.c: 345: return RES_OK;
  5226                           
  5227                           ; BSR set to: 0
  5228  00205A  0E00               	movlw	0
  5229  00205C  0012               	return	
  5230  00205E                     __end_of_disk_writep:
  5231                           	opt stack 0
  5232                           tosu	equ	0xFFF
  5233                           tosh	equ	0xFFE
  5234                           tosl	equ	0xFFD
  5235                           pclath	equ	0xFFA
  5236                           tblptru	equ	0xFF8
  5237                           tblptrh	equ	0xFF7
  5238                           tblptrl	equ	0xFF6
  5239                           tablat	equ	0xFF5
  5240                           prodh	equ	0xFF4
  5241                           prodl	equ	0xFF3
  5242                           intcon	equ	0xFF2
  5243                           intcon2	equ	0xFF1
  5244                           intcon3	equ	0xFF0
  5245                           postinc0	equ	0xFEE
  5246                           wreg	equ	0xFE8
  5247                           postinc1	equ	0xFE6
  5248                           postdec1	equ	0xFE5
  5249                           fsr1h	equ	0xFE2
  5250                           fsr1l	equ	0xFE1
  5251                           indf2	equ	0xFDF
  5252                           postinc2	equ	0xFDE
  5253                           postdec2	equ	0xFDD
  5254                           plusw2	equ	0xFDB
  5255                           fsr2h	equ	0xFDA
  5256                           fsr2l	equ	0xFD9
  5257                           status	equ	0xFD8
  5258                           
  5259 ;; *************** function _pf_read *****************
  5260 ;; Defined at:
  5261 ;;		line 863 in file "pff.c"
  5262 ;; Parameters:    Size  Location     Type
  5263 ;;  buff            2   58[BANK0 ] PTR void 
  5264 ;;		 -> data_buffer_32(32), 
  5265 ;;  btr             2   60[BANK0 ] unsigned int 
  5266 ;;  br              2   62[BANK0 ] PTR unsigned int 
  5267 ;;		 -> SDCard@br(2), 
  5268 ;; Auto vars:     Size  Location     Type
  5269 ;;  clst            4   85[BANK0 ] unsigned long 
  5270 ;;  remain          4   81[BANK0 ] unsigned long 
  5271 ;;  sect            4   77[BANK0 ] unsigned long 
  5272 ;;  fs              2   92[BANK0 ] PTR struct .
  5273 ;;		 -> NULL(0), SDCard@fs(42), 
  5274 ;;  rcnt            2   90[BANK0 ] unsigned int 
  5275 ;;  rbuff           2   73[BANK0 ] PTR unsigned char 
  5276 ;;		 -> data_buffer_32(32), 
  5277 ;;  cs              1   89[BANK0 ] unsigned char 
  5278 ;;  dr              1   72[BANK0 ] enum E73
  5279 ;; Return value:  Size  Location     Type
  5280 ;;                  1    wreg      enum E3838
  5281 ;; Registers used:
  5282 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5283 ;; Tracked objects:
  5284 ;;		On entry : 0/0
  5285 ;;		On exit  : 0/0
  5286 ;;		Unchanged: 0/0
  5287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5288 ;;      Params:         0       6       0       0       0       0       0       0       0
  5289 ;;      Locals:         0      22       0       0       0       0       0       0       0
  5290 ;;      Temps:          0       8       0       0       0       0       0       0       0
  5291 ;;      Totals:         0      36       0       0       0       0       0       0       0
  5292 ;;Total ram usage:       36 bytes
  5293 ;; Hardware stack levels used:    1
  5294 ;; Hardware stack levels required when called:    8
  5295 ;; This function calls:
  5296 ;;		_clust2sect
  5297 ;;		_disk_readp
  5298 ;;		_get_fat
  5299 ;; This function is called by:
  5300 ;;		_SDCard
  5301 ;; This function uses a non-reentrant model
  5302 ;;
  5303                           
  5304                           	psect	text24
  5305  000EE8                     __ptext24:
  5306                           	opt stack 0
  5307  000EE8                     _pf_read:
  5308                           	opt stack 20
  5309                           
  5310                           ;pff.c: 869: DRESULT dr;
  5311                           ;pff.c: 870: DWORD clst;
  5312                           ;pff.c: 871: DWORD sect, remain;
  5313                           ;pff.c: 872: UINT rcnt;
  5314                           ;pff.c: 873: BYTE cs, *rbuff = buff;
  5315                           
  5316                           ; BSR set to: 0
  5317                           ;incstack = 0
  5318  000EE8  C09A  F0A9         	movff	pf_read@buff,pf_read@rbuff
  5319  000EEC  C09B  F0AA         	movff	pf_read@buff+1,pf_read@rbuff+1
  5320                           
  5321                           ;pff.c: 874: FATFS *fs = FatFs;
  5322  000EF0  C035  F0BC         	movff	_FatFs,pf_read@fs
  5323  000EF4  C036  F0BD         	movff	_FatFs+1,pf_read@fs+1
  5324                           
  5325                           ;pff.c: 877: *br = 0;
  5326  000EF8  C09E  FFD9         	movff	pf_read@br,fsr2l
  5327  000EFC  C09F  FFDA         	movff	pf_read@br+1,fsr2h
  5328  000F00  0E00               	movlw	0
  5329  000F02  6EDE               	movwf	postinc2,c
  5330  000F04  0E00               	movlw	0
  5331  000F06  6EDD               	movwf	postdec2,c
  5332                           
  5333                           ;pff.c: 878: if (!fs) return FR_NOT_ENABLED;
  5334  000F08  0100               	movlb	0	; () banked
  5335  000F0A  51BC               	movf	pf_read@fs& (0+255),w,b
  5336  000F0C  11BD               	iorwf	(pf_read@fs+1)& (0+255),w,b
  5337  000F0E  A4D8               	btfss	status,2,c
  5338  000F10  D002               	goto	l994
  5339                           
  5340                           ; BSR set to: 0
  5341  000F12  0E05               	movlw	5
  5342                           
  5343                           ; BSR set to: 0
  5344  000F14  0012               	return	
  5345  000F16                     l994:
  5346                           
  5347                           ; BSR set to: 0
  5348                           ;pff.c: 879: if (!(fs->flag & 0x01))
  5349                           
  5350                           ; BSR set to: 0
  5351  000F16  EE20 F001          	lfsr	2,1
  5352  000F1A  51BC               	movf	pf_read@fs& (0+255),w,b
  5353  000F1C  26D9               	addwf	fsr2l,f,c
  5354  000F1E  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5355  000F20  22DA               	addwfc	fsr2h,f,c
  5356  000F22  B0DF               	btfsc	indf2,0,c
  5357  000F24  D002               	goto	l996
  5358                           
  5359                           ; BSR set to: 0
  5360                           ;pff.c: 880: return FR_NOT_OPENED;
  5361  000F26  0E04               	movlw	4
  5362                           
  5363                           ; BSR set to: 0
  5364  000F28  0012               	return	
  5365  000F2A                     l996:
  5366                           
  5367                           ; BSR set to: 0
  5368                           ;pff.c: 882: remain = fs->fsize - fs->fptr;
  5369                           
  5370                           ; BSR set to: 0
  5371  000F2A  EE20 F01A          	lfsr	2,26
  5372  000F2E  51BC               	movf	pf_read@fs& (0+255),w,b
  5373  000F30  26D9               	addwf	fsr2l,f,c
  5374  000F32  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5375  000F34  22DA               	addwfc	fsr2h,f,c
  5376  000F36  CFDE F0A0          	movff	postinc2,??_pf_read
  5377  000F3A  CFDE F0A1          	movff	postinc2,??_pf_read+1
  5378  000F3E  CFDE F0A2          	movff	postinc2,??_pf_read+2
  5379  000F42  CFDE F0A3          	movff	postinc2,??_pf_read+3
  5380  000F46  EE20 F016          	lfsr	2,22
  5381  000F4A  51BC               	movf	pf_read@fs& (0+255),w,b
  5382  000F4C  26D9               	addwf	fsr2l,f,c
  5383  000F4E  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5384  000F50  22DA               	addwfc	fsr2h,f,c
  5385  000F52  CFDE F0A4          	movff	postinc2,??_pf_read+4
  5386  000F56  CFDE F0A5          	movff	postinc2,??_pf_read+5
  5387  000F5A  CFDE F0A6          	movff	postinc2,??_pf_read+6
  5388  000F5E  CFDE F0A7          	movff	postinc2,??_pf_read+7
  5389  000F62  1FA4               	comf	(??_pf_read+4)& (0+255),f,b
  5390  000F64  1FA5               	comf	(??_pf_read+5)& (0+255),f,b
  5391  000F66  1FA6               	comf	(??_pf_read+6)& (0+255),f,b
  5392  000F68  1FA7               	comf	(??_pf_read+7)& (0+255),f,b
  5393  000F6A  2BA4               	incf	(??_pf_read+4)& (0+255),f,b
  5394  000F6C  0E00               	movlw	0
  5395  000F6E  23A5               	addwfc	(??_pf_read+5)& (0+255),f,b
  5396  000F70  23A6               	addwfc	(??_pf_read+6)& (0+255),f,b
  5397  000F72  23A7               	addwfc	(??_pf_read+7)& (0+255),f,b
  5398  000F74  51A0               	movf	??_pf_read& (0+255),w,b
  5399  000F76  25A4               	addwf	(??_pf_read+4)& (0+255),w,b
  5400  000F78  6FB1               	movwf	pf_read@remain& (0+255),b
  5401  000F7A  51A1               	movf	(??_pf_read+1)& (0+255),w,b
  5402  000F7C  21A5               	addwfc	(??_pf_read+5)& (0+255),w,b
  5403  000F7E  6FB2               	movwf	(pf_read@remain+1)& (0+255),b
  5404  000F80  51A2               	movf	(??_pf_read+2)& (0+255),w,b
  5405  000F82  21A6               	addwfc	(??_pf_read+6)& (0+255),w,b
  5406  000F84  6FB3               	movwf	(pf_read@remain+2)& (0+255),b
  5407  000F86  51A3               	movf	(??_pf_read+3)& (0+255),w,b
  5408  000F88  21A7               	addwfc	(??_pf_read+7)& (0+255),w,b
  5409  000F8A  6FB4               	movwf	(pf_read@remain+3)& (0+255),b
  5410                           
  5411                           ; BSR set to: 0
  5412                           ;pff.c: 883: if (btr > remain) btr = (UINT)remain;
  5413  000F8C  519C               	movf	pf_read@btr& (0+255),w,b
  5414  000F8E  6FA0               	movwf	??_pf_read& (0+255),b
  5415  000F90  519D               	movf	(pf_read@btr+1)& (0+255),w,b
  5416  000F92  6FA1               	movwf	(??_pf_read+1)& (0+255),b
  5417  000F94  6BA2               	clrf	(??_pf_read+2)& (0+255),b
  5418  000F96  6BA3               	clrf	(??_pf_read+3)& (0+255),b
  5419  000F98  51A0               	movf	??_pf_read& (0+255),w,b
  5420  000F9A  5DB1               	subwf	pf_read@remain& (0+255),w,b
  5421  000F9C  51A1               	movf	(??_pf_read+1)& (0+255),w,b
  5422  000F9E  59B2               	subwfb	(pf_read@remain+1)& (0+255),w,b
  5423  000FA0  51A2               	movf	(??_pf_read+2)& (0+255),w,b
  5424  000FA2  59B3               	subwfb	(pf_read@remain+2)& (0+255),w,b
  5425  000FA4  51A3               	movf	(??_pf_read+3)& (0+255),w,b
  5426  000FA6  59B4               	subwfb	(pf_read@remain+3)& (0+255),w,b
  5427  000FA8  B0D8               	btfsc	status,0,c
  5428  000FAA  D160               	goto	l998
  5429                           
  5430                           ; BSR set to: 0
  5431  000FAC  C0B1  F09C         	movff	pf_read@remain,pf_read@btr
  5432  000FB0  C0B2  F09D         	movff	pf_read@remain+1,pf_read@btr+1
  5433                           
  5434                           ; BSR set to: 0
  5435                           ;pff.c: 885: while (btr) {
  5436  000FB4  D15B               	goto	l998
  5437  000FB6                     
  5438                           ; BSR set to: 0
  5439                           ;pff.c: 886: if ((fs->fptr % 512) == 0) {
  5440                           
  5441                           ; BSR set to: 0
  5442  000FB6  EE20 F016          	lfsr	2,22
  5443  000FBA  51BC               	movf	pf_read@fs& (0+255),w,b
  5444  000FBC  26D9               	addwf	fsr2l,f,c
  5445  000FBE  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5446  000FC0  22DA               	addwfc	fsr2h,f,c
  5447  000FC2  0EFF               	movlw	255
  5448  000FC4  14DE               	andwf	postinc2,w,c
  5449  000FC6  6FA0               	movwf	??_pf_read& (0+255),b
  5450  000FC8  0E01               	movlw	1
  5451  000FCA  14DE               	andwf	postinc2,w,c
  5452  000FCC  6FA1               	movwf	(??_pf_read+1)& (0+255),b
  5453  000FCE  0E00               	movlw	0
  5454  000FD0  14DE               	andwf	postinc2,w,c
  5455  000FD2  6FA2               	movwf	(??_pf_read+2)& (0+255),b
  5456  000FD4  0E00               	movlw	0
  5457  000FD6  14DE               	andwf	postinc2,w,c
  5458  000FD8  6FA3               	movwf	(??_pf_read+3)& (0+255),b
  5459  000FDA  51A0               	movf	??_pf_read& (0+255),w,b
  5460  000FDC  11A1               	iorwf	(??_pf_read+1)& (0+255),w,b
  5461  000FDE  11A2               	iorwf	(??_pf_read+2)& (0+255),w,b
  5462  000FE0  11A3               	iorwf	(??_pf_read+3)& (0+255),w,b
  5463  000FE2  A4D8               	btfss	status,2,c
  5464  000FE4  D0BC               	goto	l1000
  5465                           
  5466                           ; BSR set to: 0
  5467                           ;pff.c: 887: cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));
  5468  000FE6  EE20 F016          	lfsr	2,22
  5469  000FEA  51BC               	movf	pf_read@fs& (0+255),w,b
  5470  000FEC  26D9               	addwf	fsr2l,f,c
  5471  000FEE  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5472  000FF0  22DA               	addwfc	fsr2h,f,c
  5473  000FF2  CFDE F0A0          	movff	postinc2,??_pf_read
  5474  000FF6  CFDE F0A1          	movff	postinc2,??_pf_read+1
  5475  000FFA  CFDE F0A2          	movff	postinc2,??_pf_read+2
  5476  000FFE  CFDE F0A3          	movff	postinc2,??_pf_read+3
  5477  001002  0E0A               	movlw	10
  5478  001004  D005               	goto	u8190
  5479  001006                     u8195:
  5480  001006  90D8               	bcf	status,0,c
  5481  001008  33A3               	rrcf	(??_pf_read+3)& (0+255),f,b
  5482  00100A  33A2               	rrcf	(??_pf_read+2)& (0+255),f,b
  5483  00100C  33A1               	rrcf	(??_pf_read+1)& (0+255),f,b
  5484  00100E  33A0               	rrcf	??_pf_read& (0+255),f,b
  5485  001010                     u8190:
  5486  001010  2EE8               	decfsz	wreg,f,c
  5487  001012  D7F9               	goto	u8195
  5488  001014  EE20 F002          	lfsr	2,2
  5489  001018  51BC               	movf	pf_read@fs& (0+255),w,b
  5490  00101A  26D9               	addwf	fsr2l,f,c
  5491  00101C  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5492  00101E  22DA               	addwfc	fsr2h,f,c
  5493  001020  50DF               	movf	indf2,w,c
  5494  001022  6FA4               	movwf	(??_pf_read+4)& (0+255),b
  5495  001024  05A4               	decf	(??_pf_read+4)& (0+255),w,b
  5496  001026  15A0               	andwf	??_pf_read& (0+255),w,b
  5497  001028  6FB9               	movwf	pf_read@cs& (0+255),b
  5498                           
  5499                           ; BSR set to: 0
  5500                           ;pff.c: 888: if (!cs) {
  5501  00102A  51B9               	movf	pf_read@cs& (0+255),w,b
  5502  00102C  A4D8               	btfss	status,2,c
  5503  00102E  D054               	goto	l1001
  5504                           
  5505                           ; BSR set to: 0
  5506                           ;pff.c: 889: if (fs->fptr == 0)
  5507  001030  EE20 F016          	lfsr	2,22
  5508  001034  51BC               	movf	pf_read@fs& (0+255),w,b
  5509  001036  26D9               	addwf	fsr2l,f,c
  5510  001038  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5511  00103A  22DA               	addwfc	fsr2h,f,c
  5512  00103C  50DE               	movf	postinc2,w,c
  5513  00103E  10DE               	iorwf	postinc2,w,c
  5514  001040  10DE               	iorwf	postinc2,w,c
  5515  001042  10DE               	iorwf	postinc2,w,c
  5516  001044  A4D8               	btfss	status,2,c
  5517  001046  D00F               	goto	l1002
  5518                           
  5519                           ; BSR set to: 0
  5520                           ;pff.c: 890: clst = fs->org_clust;
  5521  001048  EE20 F01E          	lfsr	2,30
  5522  00104C  51BC               	movf	pf_read@fs& (0+255),w,b
  5523  00104E  26D9               	addwf	fsr2l,f,c
  5524  001050  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5525  001052  22DA               	addwfc	fsr2h,f,c
  5526  001054  CFDE F0B5          	movff	postinc2,pf_read@clst
  5527  001058  CFDE F0B6          	movff	postinc2,pf_read@clst+1
  5528  00105C  CFDE F0B7          	movff	postinc2,pf_read@clst+2
  5529  001060  CFDE F0B8          	movff	postinc2,pf_read@clst+3
  5530  001064  D018               	goto	l1003
  5531  001066                     l1002:
  5532                           
  5533                           ; BSR set to: 0
  5534                           ;pff.c: 891: else
  5535                           ;pff.c: 892: clst = get_fat(fs->curr_clust);
  5536                           
  5537                           ; BSR set to: 0
  5538  001066  EE20 F022          	lfsr	2,34
  5539  00106A  51BC               	movf	pf_read@fs& (0+255),w,b
  5540  00106C  26D9               	addwf	fsr2l,f,c
  5541  00106E  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5542  001070  22DA               	addwfc	fsr2h,f,c
  5543  001072  CFDE F072          	movff	postinc2,get_fat@clst
  5544  001076  CFDE F073          	movff	postinc2,get_fat@clst+1
  5545  00107A  CFDE F074          	movff	postinc2,get_fat@clst+2
  5546  00107E  CFDE F075          	movff	postinc2,get_fat@clst+3
  5547  001082  EC82  F005         	call	_get_fat	;wreg free
  5548  001086  C072  F0B5         	movff	?_get_fat,pf_read@clst
  5549  00108A  C073  F0B6         	movff	?_get_fat+1,pf_read@clst+1
  5550  00108E  C074  F0B7         	movff	?_get_fat+2,pf_read@clst+2
  5551  001092  C075  F0B8         	movff	?_get_fat+3,pf_read@clst+3
  5552  001096                     l1003:
  5553                           
  5554                           ;pff.c: 893: if (clst <= 1) {fs->flag = 0; return FR_DISK_ERR;};
  5555  001096  0100               	movlb	0	; () banked
  5556  001098  51B8               	movf	(pf_read@clst+3)& (0+255),w,b
  5557  00109A  11B7               	iorwf	(pf_read@clst+2)& (0+255),w,b
  5558  00109C  11B6               	iorwf	(pf_read@clst+1)& (0+255),w,b
  5559  00109E  E10E               	bnz	l7226
  5560  0010A0  0E02               	movlw	2
  5561  0010A2  5DB5               	subwf	pf_read@clst& (0+255),w,b
  5562  0010A4  B0D8               	btfsc	status,0,c
  5563  0010A6  D00A               	goto	l1004
  5564                           
  5565                           ; BSR set to: 0
  5566  0010A8  EE20 F001          	lfsr	2,1
  5567  0010AC  51BC               	movf	pf_read@fs& (0+255),w,b
  5568  0010AE  26D9               	addwf	fsr2l,f,c
  5569  0010B0  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5570  0010B2  22DA               	addwfc	fsr2h,f,c
  5571  0010B4  0E00               	movlw	0
  5572  0010B6  6EDF               	movwf	indf2,c
  5573                           
  5574                           ; BSR set to: 0
  5575  0010B8  0E01               	movlw	1
  5576                           
  5577                           ; BSR set to: 0
  5578  0010BA  0012               	return	
  5579  0010BC                     l1004:
  5580  0010BC                     l7226:
  5581                           
  5582                           ; BSR set to: 0
  5583                           ;pff.c: 894: fs->curr_clust = clst;
  5584  0010BC  EE20 F022          	lfsr	2,34
  5585  0010C0  51BC               	movf	pf_read@fs& (0+255),w,b
  5586  0010C2  26D9               	addwf	fsr2l,f,c
  5587  0010C4  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5588  0010C6  22DA               	addwfc	fsr2h,f,c
  5589  0010C8  C0B5  FFDE         	movff	pf_read@clst,postinc2
  5590  0010CC  C0B6  FFDE         	movff	pf_read@clst+1,postinc2
  5591  0010D0  C0B7  FFDE         	movff	pf_read@clst+2,postinc2
  5592  0010D4  C0B8  FFDE         	movff	pf_read@clst+3,postinc2
  5593  0010D8                     l1001:
  5594                           
  5595                           ; BSR set to: 0
  5596                           ;pff.c: 895: }
  5597                           ;pff.c: 896: sect = clust2sect(fs->curr_clust);
  5598                           
  5599                           ; BSR set to: 0
  5600  0010D8  EE20 F022          	lfsr	2,34
  5601  0010DC  51BC               	movf	pf_read@fs& (0+255),w,b
  5602  0010DE  26D9               	addwf	fsr2l,f,c
  5603  0010E0  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5604  0010E2  22DA               	addwfc	fsr2h,f,c
  5605  0010E4  CFDE F026          	movff	postinc2,clust2sect@clst
  5606  0010E8  CFDE F027          	movff	postinc2,clust2sect@clst+1
  5607  0010EC  CFDE F028          	movff	postinc2,clust2sect@clst+2
  5608  0010F0  CFDE F029          	movff	postinc2,clust2sect@clst+3
  5609  0010F4  ECC1  F013         	call	_clust2sect	;wreg free
  5610  0010F8  C026  F0AD         	movff	?_clust2sect,pf_read@sect
  5611  0010FC  C027  F0AE         	movff	?_clust2sect+1,pf_read@sect+1
  5612  001100  C028  F0AF         	movff	?_clust2sect+2,pf_read@sect+2
  5613  001104  C029  F0B0         	movff	?_clust2sect+3,pf_read@sect+3
  5614                           
  5615                           ;pff.c: 897: if (!sect) {fs->flag = 0; return FR_DISK_ERR;};
  5616  001108  0100               	movlb	0	; () banked
  5617  00110A  51AD               	movf	pf_read@sect& (0+255),w,b
  5618  00110C  11AE               	iorwf	(pf_read@sect+1)& (0+255),w,b
  5619  00110E  11AF               	iorwf	(pf_read@sect+2)& (0+255),w,b
  5620  001110  11B0               	iorwf	(pf_read@sect+3)& (0+255),w,b
  5621  001112  A4D8               	btfss	status,2,c
  5622  001114  D00A               	goto	l1005
  5623                           
  5624                           ; BSR set to: 0
  5625  001116  EE20 F001          	lfsr	2,1
  5626  00111A  51BC               	movf	pf_read@fs& (0+255),w,b
  5627  00111C  26D9               	addwf	fsr2l,f,c
  5628  00111E  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5629  001120  22DA               	addwfc	fsr2h,f,c
  5630  001122  0E00               	movlw	0
  5631  001124  6EDF               	movwf	indf2,c
  5632                           
  5633                           ; BSR set to: 0
  5634  001126  0E01               	movlw	1
  5635                           
  5636                           ; BSR set to: 0
  5637  001128  0012               	return	
  5638  00112A                     l1005:
  5639                           
  5640                           ; BSR set to: 0
  5641                           ;pff.c: 898: fs->dsect = sect + cs;
  5642                           
  5643                           ; BSR set to: 0
  5644  00112A  51B9               	movf	pf_read@cs& (0+255),w,b
  5645  00112C  25AD               	addwf	pf_read@sect& (0+255),w,b
  5646  00112E  6FA0               	movwf	??_pf_read& (0+255),b
  5647  001130  0E00               	movlw	0
  5648  001132  21AE               	addwfc	(pf_read@sect+1)& (0+255),w,b
  5649  001134  6FA1               	movwf	(??_pf_read+1)& (0+255),b
  5650  001136  0E00               	movlw	0
  5651  001138  21AF               	addwfc	(pf_read@sect+2)& (0+255),w,b
  5652  00113A  6FA2               	movwf	(??_pf_read+2)& (0+255),b
  5653  00113C  0E00               	movlw	0
  5654  00113E  21B0               	addwfc	(pf_read@sect+3)& (0+255),w,b
  5655  001140  6FA3               	movwf	(??_pf_read+3)& (0+255),b
  5656  001142  EE20 F026          	lfsr	2,38
  5657  001146  51BC               	movf	pf_read@fs& (0+255),w,b
  5658  001148  26D9               	addwf	fsr2l,f,c
  5659  00114A  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5660  00114C  22DA               	addwfc	fsr2h,f,c
  5661  00114E  C0A0  FFDE         	movff	??_pf_read,postinc2
  5662  001152  C0A1  FFDE         	movff	??_pf_read+1,postinc2
  5663  001156  C0A2  FFDE         	movff	??_pf_read+2,postinc2
  5664  00115A  C0A3  FFDE         	movff	??_pf_read+3,postinc2
  5665  00115E                     l1000:
  5666                           
  5667                           ; BSR set to: 0
  5668                           ;pff.c: 899: }
  5669                           ;pff.c: 900: rcnt = 512 - (UINT)fs->fptr % 512;
  5670  00115E  0EFF               	movlw	255
  5671  001160  6FA0               	movwf	??_pf_read& (0+255),b
  5672  001162  0E01               	movlw	1
  5673  001164  6FA1               	movwf	(??_pf_read+1)& (0+255),b
  5674  001166  EE20 F016          	lfsr	2,22
  5675  00116A  51BC               	movf	pf_read@fs& (0+255),w,b
  5676  00116C  26D9               	addwf	fsr2l,f,c
  5677  00116E  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5678  001170  22DA               	addwfc	fsr2h,f,c
  5679  001172  CFDE F0A2          	movff	postinc2,??_pf_read+2
  5680  001176  CFDD F0A3          	movff	postdec2,??_pf_read+3
  5681  00117A  51A0               	movf	??_pf_read& (0+255),w,b
  5682  00117C  17A2               	andwf	(??_pf_read+2)& (0+255),f,b
  5683  00117E  51A1               	movf	(??_pf_read+1)& (0+255),w,b
  5684  001180  17A3               	andwf	(??_pf_read+3)& (0+255),f,b
  5685  001182  1FA2               	comf	(??_pf_read+2)& (0+255),f,b
  5686  001184  1FA3               	comf	(??_pf_read+3)& (0+255),f,b
  5687  001186  4BA2               	infsnz	(??_pf_read+2)& (0+255),f,b
  5688  001188  2BA3               	incf	(??_pf_read+3)& (0+255),f,b
  5689  00118A  0E00               	movlw	0
  5690  00118C  25A2               	addwf	(??_pf_read+2)& (0+255),w,b
  5691  00118E  6FBA               	movwf	pf_read@rcnt& (0+255),b
  5692  001190  0E02               	movlw	2
  5693  001192  21A3               	addwfc	(??_pf_read+3)& (0+255),w,b
  5694  001194  6FBB               	movwf	(pf_read@rcnt+1)& (0+255),b
  5695                           
  5696                           ; BSR set to: 0
  5697                           ;pff.c: 901: if (rcnt > btr) rcnt = btr;
  5698  001196  51BA               	movf	pf_read@rcnt& (0+255),w,b
  5699  001198  5D9C               	subwf	pf_read@btr& (0+255),w,b
  5700  00119A  51BB               	movf	(pf_read@rcnt+1)& (0+255),w,b
  5701  00119C  599D               	subwfb	(pf_read@btr+1)& (0+255),w,b
  5702  00119E  B0D8               	btfsc	status,0,c
  5703  0011A0  D004               	goto	l1006
  5704                           
  5705                           ; BSR set to: 0
  5706  0011A2  C09C  F0BA         	movff	pf_read@btr,pf_read@rcnt
  5707  0011A6  C09D  F0BB         	movff	pf_read@btr+1,pf_read@rcnt+1
  5708  0011AA                     l1006:
  5709                           
  5710                           ; BSR set to: 0
  5711                           ;pff.c: 902: dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (UINT)fs->fptr % 512, rcnt);
  5712                           
  5713                           ; BSR set to: 0
  5714  0011AA  519A               	movf	pf_read@buff& (0+255),w,b
  5715  0011AC  119B               	iorwf	(pf_read@buff+1)& (0+255),w,b
  5716  0011AE  B4D8               	btfsc	status,2,c
  5717  0011B0  D005               	goto	l1008
  5718                           
  5719                           ; BSR set to: 0
  5720  0011B2  C0A9  F0AB         	movff	pf_read@rbuff,_pf_read$2216
  5721  0011B6  C0AA  F0AC         	movff	pf_read@rbuff+1,_pf_read$2216+1
  5722  0011BA  D004               	goto	l1010
  5723  0011BC                     l1008:
  5724                           
  5725                           ; BSR set to: 0
  5726                           
  5727                           ; BSR set to: 0
  5728  0011BC  0E00               	movlw	0
  5729  0011BE  6FAB               	movwf	_pf_read$2216& (0+255),b
  5730  0011C0  0E00               	movlw	0
  5731  0011C2  6FAC               	movwf	(_pf_read$2216+1)& (0+255),b
  5732  0011C4                     l1010:
  5733                           
  5734                           ; BSR set to: 0
  5735                           
  5736                           ; BSR set to: 0
  5737  0011C4  C0AB  F060         	movff	_pf_read$2216,disk_readp@rd
  5738  0011C8  C0AC  F061         	movff	_pf_read$2216+1,disk_readp@rd+1
  5739  0011CC  EE20 F026          	lfsr	2,38
  5740  0011D0  51BC               	movf	pf_read@fs& (0+255),w,b
  5741  0011D2  26D9               	addwf	fsr2l,f,c
  5742  0011D4  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5743  0011D6  22DA               	addwfc	fsr2h,f,c
  5744  0011D8  CFDE F062          	movff	postinc2,disk_readp@sector
  5745  0011DC  CFDE F063          	movff	postinc2,disk_readp@sector+1
  5746  0011E0  CFDE F064          	movff	postinc2,disk_readp@sector+2
  5747  0011E4  CFDE F065          	movff	postinc2,disk_readp@sector+3
  5748  0011E8  EE20 F016          	lfsr	2,22
  5749  0011EC  51BC               	movf	pf_read@fs& (0+255),w,b
  5750  0011EE  26D9               	addwf	fsr2l,f,c
  5751  0011F0  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5752  0011F2  22DA               	addwfc	fsr2h,f,c
  5753  0011F4  CFDE F0A0          	movff	postinc2,??_pf_read
  5754  0011F8  CFDD F0A1          	movff	postdec2,??_pf_read+1
  5755  0011FC  0EFF               	movlw	255
  5756  0011FE  15A0               	andwf	??_pf_read& (0+255),w,b
  5757  001200  6F66               	movwf	disk_readp@offset& (0+255),b
  5758  001202  0E01               	movlw	1
  5759  001204  15A1               	andwf	(??_pf_read+1)& (0+255),w,b
  5760  001206  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
  5761  001208  C0BA  F068         	movff	pf_read@rcnt,disk_readp@count
  5762  00120C  C0BB  F069         	movff	pf_read@rcnt+1,disk_readp@count+1
  5763  001210  EC3C  F009         	call	_disk_readp	;wreg free
  5764  001214  0100               	movlb	0	; () banked
  5765  001216  6FA8               	movwf	pf_read@dr& (0+255),b
  5766                           
  5767                           ; BSR set to: 0
  5768                           ;pff.c: 903: if (dr) {fs->flag = 0; return FR_DISK_ERR;};
  5769  001218  51A8               	movf	pf_read@dr& (0+255),w,b
  5770  00121A  B4D8               	btfsc	status,2,c
  5771  00121C  D00A               	goto	l1011
  5772                           
  5773                           ; BSR set to: 0
  5774  00121E  EE20 F001          	lfsr	2,1
  5775  001222  51BC               	movf	pf_read@fs& (0+255),w,b
  5776  001224  26D9               	addwf	fsr2l,f,c
  5777  001226  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5778  001228  22DA               	addwfc	fsr2h,f,c
  5779  00122A  0E00               	movlw	0
  5780  00122C  6EDF               	movwf	indf2,c
  5781                           
  5782                           ; BSR set to: 0
  5783  00122E  0E01               	movlw	1
  5784                           
  5785                           ; BSR set to: 0
  5786  001230  0012               	return	
  5787  001232                     l1011:
  5788                           
  5789                           ; BSR set to: 0
  5790                           ;pff.c: 904: fs->fptr += rcnt; rbuff += rcnt;
  5791                           
  5792                           ; BSR set to: 0
  5793  001232  EE20 F016          	lfsr	2,22
  5794  001236  51BC               	movf	pf_read@fs& (0+255),w,b
  5795  001238  26D9               	addwf	fsr2l,f,c
  5796  00123A  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5797  00123C  22DA               	addwfc	fsr2h,f,c
  5798  00123E  51BA               	movf	pf_read@rcnt& (0+255),w,b
  5799  001240  26DE               	addwf	postinc2,f,c
  5800  001242  51BB               	movf	(pf_read@rcnt+1)& (0+255),w,b
  5801  001244  22DE               	addwfc	postinc2,f,c
  5802  001246  0E00               	movlw	0
  5803  001248  22DE               	addwfc	postinc2,f,c
  5804  00124A  22DE               	addwfc	postinc2,f,c
  5805                           
  5806                           ; BSR set to: 0
  5807  00124C  51BA               	movf	pf_read@rcnt& (0+255),w,b
  5808  00124E  27A9               	addwf	pf_read@rbuff& (0+255),f,b
  5809  001250  51BB               	movf	(pf_read@rcnt+1)& (0+255),w,b
  5810  001252  23AA               	addwfc	(pf_read@rbuff+1)& (0+255),f,b
  5811                           
  5812                           ; BSR set to: 0
  5813                           ;pff.c: 905: btr -= rcnt; *br += rcnt;
  5814  001254  51BA               	movf	pf_read@rcnt& (0+255),w,b
  5815  001256  5F9C               	subwf	pf_read@btr& (0+255),f,b
  5816  001258  51BB               	movf	(pf_read@rcnt+1)& (0+255),w,b
  5817  00125A  5B9D               	subwfb	(pf_read@btr+1)& (0+255),f,b
  5818                           
  5819                           ; BSR set to: 0
  5820  00125C  C09E  FFD9         	movff	pf_read@br,fsr2l
  5821  001260  C09F  FFDA         	movff	pf_read@br+1,fsr2h
  5822  001264  51BA               	movf	pf_read@rcnt& (0+255),w,b
  5823  001266  26DE               	addwf	postinc2,f,c
  5824  001268  51BB               	movf	(pf_read@rcnt+1)& (0+255),w,b
  5825  00126A  22DD               	addwfc	postdec2,f,c
  5826  00126C                     l998:
  5827                           
  5828                           ; BSR set to: 0
  5829                           
  5830                           ; BSR set to: 0
  5831  00126C  519C               	movf	pf_read@btr& (0+255),w,b
  5832  00126E  119D               	iorwf	(pf_read@btr+1)& (0+255),w,b
  5833  001270  A4D8               	btfss	status,2,c
  5834  001272  D6A1               	goto	l999
  5835                           
  5836                           ; BSR set to: 0
  5837                           ;pff.c: 906: }
  5838                           ;pff.c: 908: return FR_OK;
  5839                           
  5840                           ; BSR set to: 0
  5841  001274  0E00               	movlw	0
  5842  001276  0012               	return	
  5843  001278                     __end_of_pf_read:
  5844                           	opt stack 0
  5845                           tosu	equ	0xFFF
  5846                           tosh	equ	0xFFE
  5847                           tosl	equ	0xFFD
  5848                           pclath	equ	0xFFA
  5849                           tblptru	equ	0xFF8
  5850                           tblptrh	equ	0xFF7
  5851                           tblptrl	equ	0xFF6
  5852                           tablat	equ	0xFF5
  5853                           prodh	equ	0xFF4
  5854                           prodl	equ	0xFF3
  5855                           intcon	equ	0xFF2
  5856                           intcon2	equ	0xFF1
  5857                           intcon3	equ	0xFF0
  5858                           postinc0	equ	0xFEE
  5859                           wreg	equ	0xFE8
  5860                           postinc1	equ	0xFE6
  5861                           postdec1	equ	0xFE5
  5862                           fsr1h	equ	0xFE2
  5863                           fsr1l	equ	0xFE1
  5864                           indf2	equ	0xFDF
  5865                           postinc2	equ	0xFDE
  5866                           postdec2	equ	0xFDD
  5867                           plusw2	equ	0xFDB
  5868                           fsr2h	equ	0xFDA
  5869                           fsr2l	equ	0xFD9
  5870                           status	equ	0xFD8
  5871                           
  5872 ;; *************** function _pf_open *****************
  5873 ;; Defined at:
  5874 ;;		line 829 in file "pff.c"
  5875 ;; Parameters:    Size  Location     Type
  5876 ;;  path            2   90[BANK0 ] PTR const unsigned char 
  5877 ;;		 -> STR_9(10), 
  5878 ;; Auto vars:     Size  Location     Type
  5879 ;;  dir            32   12[BANK1 ] unsigned char [32]
  5880 ;;  dj             16   47[BANK1 ] struct .
  5881 ;;  sp             12    0[BANK1 ] unsigned char [12]
  5882 ;;  fs              2   45[BANK1 ] PTR struct .
  5883 ;;		 -> NULL(0), SDCard@fs(42), 
  5884 ;;  res             1   44[BANK1 ] enum E43
  5885 ;; Return value:  Size  Location     Type
  5886 ;;                  1    wreg      enum E3838
  5887 ;; Registers used:
  5888 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5889 ;; Tracked objects:
  5890 ;;		On entry : 0/0
  5891 ;;		On exit  : 0/0
  5892 ;;		Unchanged: 0/0
  5893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5894 ;;      Params:         0       2       0       0       0       0       0       0       0
  5895 ;;      Locals:         0       0      63       0       0       0       0       0       0
  5896 ;;      Temps:          0      22       0       0       0       0       0       0       0
  5897 ;;      Totals:         0      24      63       0       0       0       0       0       0
  5898 ;;Total ram usage:       87 bytes
  5899 ;; Hardware stack levels used:    1
  5900 ;; Hardware stack levels required when called:   11
  5901 ;; This function calls:
  5902 ;;		_follow_path
  5903 ;;		_get_clust
  5904 ;; This function is called by:
  5905 ;;		_SDCard
  5906 ;; This function uses a non-reentrant model
  5907 ;;
  5908                           
  5909                           	psect	text25
  5910  001C92                     __ptext25:
  5911                           	opt stack 0
  5912  001C92                     _pf_open:
  5913                           	opt stack 17
  5914                           
  5915                           ;pff.c: 833: FRESULT res;
  5916                           ;pff.c: 834: DIR_E dj;
  5917                           ;pff.c: 835: BYTE sp[12], dir[32];
  5918                           ;pff.c: 836: FATFS *fs = FatFs;
  5919                           
  5920                           ; BSR set to: 0
  5921                           ;incstack = 0
  5922  001C92  C035  F19C         	movff	_FatFs,pf_open@fs
  5923  001C96  C036  F19D         	movff	_FatFs+1,pf_open@fs+1
  5924                           
  5925                           ;pff.c: 838: if (!fs) return FR_NOT_ENABLED;
  5926  001C9A  0101               	movlb	1	; () banked
  5927  001C9C  519C               	movf	pf_open@fs& (0+255),w,b
  5928  001C9E  119D               	iorwf	(pf_open@fs+1)& (0+255),w,b
  5929  001CA0  A4D8               	btfss	status,2,c
  5930  001CA2  D002               	goto	l986
  5931                           
  5932                           ; BSR set to: 1
  5933  001CA4  0E05               	movlw	5
  5934                           
  5935                           ; BSR set to: 1
  5936  001CA6  0012               	return	
  5937  001CA8                     l986:
  5938                           
  5939                           ; BSR set to: 1
  5940                           ;pff.c: 840: fs->flag = 0;
  5941                           
  5942                           ; BSR set to: 1
  5943  001CA8  EE20 F001          	lfsr	2,1
  5944  001CAC  519C               	movf	pf_open@fs& (0+255),w,b
  5945  001CAE  26D9               	addwf	fsr2l,f,c
  5946  001CB0  519D               	movf	(pf_open@fs+1)& (0+255),w,b
  5947  001CB2  22DA               	addwfc	fsr2h,f,c
  5948  001CB4  0E00               	movlw	0
  5949  001CB6  6EDF               	movwf	indf2,c
  5950                           
  5951                           ; BSR set to: 1
  5952                           ;pff.c: 841: dj.fn = sp;
  5953  001CB8  0E6F               	movlw	low pf_open@sp
  5954  001CBA  6FA0               	movwf	(pf_open@dj+2)& (0+255),b
  5955  001CBC  0E01               	movlw	high pf_open@sp
  5956  001CBE  6FA1               	movwf	(pf_open@dj+3)& (0+255),b
  5957                           
  5958                           ; BSR set to: 1
  5959                           ;pff.c: 842: res = follow_path(&dj, dir, "check.txt" );
  5960  001CC0  0E9E               	movlw	low pf_open@dj
  5961  001CC2  0100               	movlb	0	; () banked
  5962  001CC4  6FB3               	movwf	follow_path@dj& (0+255),b
  5963  001CC6  0E01               	movlw	high pf_open@dj
  5964  001CC8  6FB4               	movwf	(follow_path@dj+1)& (0+255),b
  5965  001CCA  0E7B               	movlw	low pf_open@dir
  5966  001CCC  6FB5               	movwf	follow_path@dir& (0+255),b
  5967  001CCE  0E01               	movlw	high pf_open@dir
  5968  001CD0  6FB6               	movwf	(follow_path@dir+1)& (0+255),b
  5969  001CD2  0E57               	movlw	low STR_9
  5970  001CD4  6FB7               	movwf	follow_path@path& (0+255),b
  5971  001CD6  0E62               	movlw	high STR_9
  5972  001CD8  6FB8               	movwf	(follow_path@path+1)& (0+255),b
  5973  001CDA  ECEC  F011         	call	_follow_path	;wreg free
  5974  001CDE  0101               	movlb	1	; () banked
  5975  001CE0  6F9B               	movwf	pf_open@res& (0+255),b
  5976                           
  5977                           ; BSR set to: 1
  5978                           ;pff.c: 843: if (res != FR_OK) return res;
  5979  001CE2  519B               	movf	pf_open@res& (0+255),w,b
  5980  001CE4  B4D8               	btfsc	status,2,c
  5981  001CE6  D002               	goto	l988
  5982                           
  5983                           ; BSR set to: 1
  5984  001CE8  519B               	movf	pf_open@res& (0+255),w,b
  5985                           
  5986                           ; BSR set to: 1
  5987  001CEA  0012               	return	
  5988  001CEC                     l988:
  5989                           
  5990                           ; BSR set to: 1
  5991                           ;pff.c: 844: if (!dir[0] || (dir[11] & 0x10))
  5992                           
  5993                           ; BSR set to: 1
  5994  001CEC  517B               	movf	pf_open@dir& (0+255),w,b
  5995  001CEE  B4D8               	btfsc	status,2,c
  5996  001CF0  D002               	goto	u7950
  5997                           
  5998                           ; BSR set to: 1
  5999  001CF2  A986               	btfss	(pf_open@dir+11)& (0+255),4,b
  6000  001CF4  D002               	goto	l989
  6001  001CF6                     u7950:
  6002                           
  6003                           ; BSR set to: 1
  6004                           ;pff.c: 845: return FR_NO_FILE;
  6005                           
  6006                           ; BSR set to: 1
  6007  001CF6  0E03               	movlw	3
  6008                           
  6009                           ; BSR set to: 1
  6010  001CF8  0012               	return	
  6011  001CFA                     l989:
  6012                           
  6013                           ; BSR set to: 1
  6014                           ;pff.c: 847: fs->org_clust = get_clust(dir);
  6015                           
  6016                           ; BSR set to: 1
  6017  001CFA  0E7B               	movlw	low pf_open@dir
  6018  001CFC  6E1A               	movwf	get_clust@dir,c
  6019  001CFE  0E01               	movlw	high pf_open@dir
  6020  001D00  6E1B               	movwf	get_clust@dir+1,c
  6021  001D02  EC5D  F013         	call	_get_clust	;wreg free
  6022  001D06  0101               	movlb	1	; () banked
  6023  001D08  EE20 F01E          	lfsr	2,30
  6024  001D0C  519C               	movf	pf_open@fs& (0+255),w,b
  6025  001D0E  26D9               	addwf	fsr2l,f,c
  6026  001D10  519D               	movf	(pf_open@fs+1)& (0+255),w,b
  6027  001D12  22DA               	addwfc	fsr2h,f,c
  6028  001D14  C01A  FFDE         	movff	?_get_clust,postinc2
  6029  001D18  C01B  FFDE         	movff	?_get_clust+1,postinc2
  6030  001D1C  C01C  FFDE         	movff	?_get_clust+2,postinc2
  6031  001D20  C01D  FFDE         	movff	?_get_clust+3,postinc2
  6032                           
  6033                           ; BSR set to: 1
  6034                           ;pff.c: 848: fs->fsize = (DWORD)(((DWORD)*((BYTE*)(dir+28)+3)<<24)|((DWORD)*((BYTE*)(dir
      +                          +28)+2)<<16)|((WORD)*((BYTE*)(dir+28)+1)<<8)|*(BYTE*)(dir+28));
  6035  001D24  5198               	movf	(pf_open@dir+29)& (0+255),w,b
  6036  001D26  0100               	movlb	0	; () banked
  6037  001D28  6FBD               	movwf	(??_pf_open+1)& (0+255),b
  6038  001D2A  6BBC               	clrf	??_pf_open& (0+255),b
  6039  001D2C  C199  F0BE         	movff	pf_open@dir+30,??_pf_open+2
  6040  001D30  6BBF               	clrf	(??_pf_open+3)& (0+255),b
  6041  001D32  6BC0               	clrf	(??_pf_open+4)& (0+255),b
  6042  001D34  6BC1               	clrf	(??_pf_open+5)& (0+255),b
  6043  001D36  C0BF  F0C1         	movff	??_pf_open+3,??_pf_open+5
  6044  001D3A  C0BE  F0C0         	movff	??_pf_open+2,??_pf_open+4
  6045  001D3E  6BBF               	clrf	(??_pf_open+3)& (0+255),b
  6046  001D40  6BBE               	clrf	(??_pf_open+2)& (0+255),b
  6047  001D42  C19A  F0C2         	movff	pf_open@dir+31,??_pf_open+6
  6048  001D46  6BC3               	clrf	(??_pf_open+7)& (0+255),b
  6049  001D48  6BC4               	clrf	(??_pf_open+8)& (0+255),b
  6050  001D4A  6BC5               	clrf	(??_pf_open+9)& (0+255),b
  6051  001D4C  C0C2  F0C5         	movff	??_pf_open+6,??_pf_open+9
  6052  001D50  6BC4               	clrf	(??_pf_open+8)& (0+255),b
  6053  001D52  6BC3               	clrf	(??_pf_open+7)& (0+255),b
  6054  001D54  6BC2               	clrf	(??_pf_open+6)& (0+255),b
  6055  001D56  51BE               	movf	(??_pf_open+2)& (0+255),w,b
  6056  001D58  11C2               	iorwf	(??_pf_open+6)& (0+255),w,b
  6057  001D5A  6FC6               	movwf	(??_pf_open+10)& (0+255),b
  6058  001D5C  51BF               	movf	(??_pf_open+3)& (0+255),w,b
  6059  001D5E  11C3               	iorwf	(??_pf_open+7)& (0+255),w,b
  6060  001D60  6FC7               	movwf	(??_pf_open+11)& (0+255),b
  6061  001D62  51C0               	movf	(??_pf_open+4)& (0+255),w,b
  6062  001D64  11C4               	iorwf	(??_pf_open+8)& (0+255),w,b
  6063  001D66  6FC8               	movwf	(??_pf_open+12)& (0+255),b
  6064  001D68  51C1               	movf	(??_pf_open+5)& (0+255),w,b
  6065  001D6A  11C5               	iorwf	(??_pf_open+9)& (0+255),w,b
  6066  001D6C  6FC9               	movwf	(??_pf_open+13)& (0+255),b
  6067  001D6E  51BC               	movf	??_pf_open& (0+255),w,b
  6068  001D70  11C6               	iorwf	(??_pf_open+10)& (0+255),w,b
  6069  001D72  6FCA               	movwf	(??_pf_open+14)& (0+255),b
  6070  001D74  51BD               	movf	(??_pf_open+1)& (0+255),w,b
  6071  001D76  11C7               	iorwf	(??_pf_open+11)& (0+255),w,b
  6072  001D78  6FCB               	movwf	(??_pf_open+15)& (0+255),b
  6073  001D7A  0E00               	movlw	0
  6074  001D7C  11C8               	iorwf	(??_pf_open+12)& (0+255),w,b
  6075  001D7E  6FCC               	movwf	(??_pf_open+16)& (0+255),b
  6076  001D80  0E00               	movlw	0
  6077  001D82  11C9               	iorwf	(??_pf_open+13)& (0+255),w,b
  6078  001D84  6FCD               	movwf	(??_pf_open+17)& (0+255),b
  6079  001D86  0101               	movlb	1	; () banked
  6080  001D88  5197               	movf	(pf_open@dir+28)& (0+255),w,b
  6081  001D8A  0100               	movlb	0	; () banked
  6082  001D8C  11CA               	iorwf	(??_pf_open+14)& (0+255),w,b
  6083  001D8E  6FCE               	movwf	(??_pf_open+18)& (0+255),b
  6084  001D90  51CB               	movf	(??_pf_open+15)& (0+255),w,b
  6085  001D92  6FCF               	movwf	(??_pf_open+19)& (0+255),b
  6086  001D94  51CC               	movf	(??_pf_open+16)& (0+255),w,b
  6087  001D96  6FD0               	movwf	(??_pf_open+20)& (0+255),b
  6088  001D98  51CD               	movf	(??_pf_open+17)& (0+255),w,b
  6089  001D9A  6FD1               	movwf	(??_pf_open+21)& (0+255),b
  6090  001D9C  0101               	movlb	1	; () banked
  6091  001D9E  EE20 F01A          	lfsr	2,26
  6092  001DA2  519C               	movf	pf_open@fs& (0+255),w,b
  6093  001DA4  26D9               	addwf	fsr2l,f,c
  6094  001DA6  519D               	movf	(pf_open@fs+1)& (0+255),w,b
  6095  001DA8  22DA               	addwfc	fsr2h,f,c
  6096  001DAA  C0CE  FFDE         	movff	??_pf_open+18,postinc2
  6097  001DAE  C0CF  FFDE         	movff	??_pf_open+19,postinc2
  6098  001DB2  C0D0  FFDE         	movff	??_pf_open+20,postinc2
  6099  001DB6  C0D1  FFDE         	movff	??_pf_open+21,postinc2
  6100                           
  6101                           ; BSR set to: 1
  6102                           ;pff.c: 849: fs->fptr = 0;
  6103  001DBA  EE20 F016          	lfsr	2,22
  6104  001DBE  519C               	movf	pf_open@fs& (0+255),w,b
  6105  001DC0  26D9               	addwf	fsr2l,f,c
  6106  001DC2  519D               	movf	(pf_open@fs+1)& (0+255),w,b
  6107  001DC4  22DA               	addwfc	fsr2h,f,c
  6108  001DC6  6ADE               	clrf	postinc2,c
  6109  001DC8  6ADE               	clrf	postinc2,c
  6110  001DCA  6ADE               	clrf	postinc2,c
  6111  001DCC  6ADD               	clrf	postdec2,c
  6112                           
  6113                           ; BSR set to: 1
  6114                           ;pff.c: 850: fs->flag = 0x01;
  6115  001DCE  EE20 F001          	lfsr	2,1
  6116  001DD2  519C               	movf	pf_open@fs& (0+255),w,b
  6117  001DD4  26D9               	addwf	fsr2l,f,c
  6118  001DD6  519D               	movf	(pf_open@fs+1)& (0+255),w,b
  6119  001DD8  22DA               	addwfc	fsr2h,f,c
  6120  001DDA  0E01               	movlw	1
  6121  001DDC  6EDF               	movwf	indf2,c
  6122                           
  6123                           ; BSR set to: 1
  6124                           ;pff.c: 852: return FR_OK;
  6125  001DDE  0E00               	movlw	0
  6126  001DE0  0012               	return	
  6127  001DE2                     __end_of_pf_open:
  6128                           	opt stack 0
  6129                           tosu	equ	0xFFF
  6130                           tosh	equ	0xFFE
  6131                           tosl	equ	0xFFD
  6132                           pclath	equ	0xFFA
  6133                           tblptru	equ	0xFF8
  6134                           tblptrh	equ	0xFF7
  6135                           tblptrl	equ	0xFF6
  6136                           tablat	equ	0xFF5
  6137                           prodh	equ	0xFF4
  6138                           prodl	equ	0xFF3
  6139                           intcon	equ	0xFF2
  6140                           intcon2	equ	0xFF1
  6141                           intcon3	equ	0xFF0
  6142                           postinc0	equ	0xFEE
  6143                           wreg	equ	0xFE8
  6144                           postinc1	equ	0xFE6
  6145                           postdec1	equ	0xFE5
  6146                           fsr1h	equ	0xFE2
  6147                           fsr1l	equ	0xFE1
  6148                           indf2	equ	0xFDF
  6149                           postinc2	equ	0xFDE
  6150                           postdec2	equ	0xFDD
  6151                           plusw2	equ	0xFDB
  6152                           fsr2h	equ	0xFDA
  6153                           fsr2l	equ	0xFD9
  6154                           status	equ	0xFD8
  6155                           
  6156 ;; *************** function _follow_path *****************
  6157 ;; Defined at:
  6158 ;;		line 680 in file "pff.c"
  6159 ;; Parameters:    Size  Location     Type
  6160 ;;  dj              2   83[BANK0 ] PTR struct .
  6161 ;;		 -> pf_open@dj(16), 
  6162 ;;  dir             2   85[BANK0 ] PTR unsigned char 
  6163 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  6164 ;;  path            2   87[BANK0 ] PTR const unsigned char 
  6165 ;;		 -> STR_18(10), 
  6166 ;; Auto vars:     Size  Location     Type
  6167 ;;  res             1   89[BANK0 ] enum E43
  6168 ;; Return value:  Size  Location     Type
  6169 ;;                  1    wreg      enum E43
  6170 ;; Registers used:
  6171 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6172 ;; Tracked objects:
  6173 ;;		On entry : 0/0
  6174 ;;		On exit  : 0/0
  6175 ;;		Unchanged: 0/0
  6176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6177 ;;      Params:         0       6       0       0       0       0       0       0       0
  6178 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6179 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6180 ;;      Totals:         0       7       0       0       0       0       0       0       0
  6181 ;;Total ram usage:        7 bytes
  6182 ;; Hardware stack levels used:    1
  6183 ;; Hardware stack levels required when called:   10
  6184 ;; This function calls:
  6185 ;;		_create_name
  6186 ;;		_dir_find
  6187 ;;		_dir_rewind
  6188 ;;		_get_clust
  6189 ;; This function is called by:
  6190 ;;		_pf_open
  6191 ;;		_pf_opendir
  6192 ;; This function uses a non-reentrant model
  6193 ;;
  6194                           
  6195                           	psect	text26
  6196  0023D8                     __ptext26:
  6197                           	opt stack 0
  6198  0023D8                     _follow_path:
  6199                           	opt stack 17
  6200                           
  6201                           ;pff.c: 686: FRESULT res;
  6202                           ;pff.c: 689: while (*path == ' ') path++;
  6203                           
  6204                           ; BSR set to: 1
  6205                           ;incstack = 0
  6206  0023D8  D003               	goto	l943
  6207  0023DA  0100               	movlb	0	; () banked
  6208  0023DC  4BB7               	infsnz	follow_path@path& (0+255),f,b
  6209  0023DE  2BB8               	incf	(follow_path@path+1)& (0+255),f,b
  6210  0023E0                     l943:
  6211                           
  6212                           ; BSR set to: 0
  6213  0023E0  C0B7  FFF6         	movff	follow_path@path,tblptrl
  6214  0023E4  C0B8  FFF7         	movff	follow_path@path+1,tblptrh
  6215  0023E8                     	if	0	;tblptru may be non-zero
  6216  0023E8                     	endif
  6217  0023E8                     	if	0	;tblptru may be non-zero
  6218  0023E8                     	endif
  6219  0023E8  0008               	tblrd		*
  6220  0023EA  50F5               	movf	tablat,w,c
  6221  0023EC  0A20               	xorlw	32
  6222  0023EE  B4D8               	btfsc	status,2,c
  6223  0023F0  D7F4               	goto	l944
  6224                           
  6225                           ;pff.c: 690: if (*path == '/') path++;
  6226  0023F2  C0B7  FFF6         	movff	follow_path@path,tblptrl
  6227  0023F6  C0B8  FFF7         	movff	follow_path@path+1,tblptrh
  6228  0023FA                     	if	0	;tblptru may be non-zero
  6229  0023FA                     	endif
  6230  0023FA                     	if	0	;tblptru may be non-zero
  6231  0023FA                     	endif
  6232  0023FA  0008               	tblrd		*
  6233  0023FC  50F5               	movf	tablat,w,c
  6234  0023FE  0A2F               	xorlw	47
  6235  002400  A4D8               	btfss	status,2,c
  6236  002402  D003               	goto	l946
  6237  002404  0100               	movlb	0	; () banked
  6238  002406  4BB7               	infsnz	follow_path@path& (0+255),f,b
  6239  002408  2BB8               	incf	(follow_path@path+1)& (0+255),f,b
  6240  00240A                     l946:
  6241                           
  6242                           ;pff.c: 691: dj->sclust = 0;
  6243                           
  6244                           ; BSR set to: 0
  6245  00240A  0100               	movlb	0	; () banked
  6246  00240C  EE20 F004          	lfsr	2,4
  6247  002410  51B3               	movf	follow_path@dj& (0+255),w,b
  6248  002412  26D9               	addwf	fsr2l,f,c
  6249  002414  51B4               	movf	(follow_path@dj+1)& (0+255),w,b
  6250  002416  22DA               	addwfc	fsr2h,f,c
  6251  002418  6ADE               	clrf	postinc2,c
  6252  00241A  6ADE               	clrf	postinc2,c
  6253  00241C  6ADE               	clrf	postinc2,c
  6254  00241E  6ADD               	clrf	postdec2,c
  6255                           
  6256                           ; BSR set to: 0
  6257                           ;pff.c: 693: if ((BYTE)*path < ' ') {
  6258  002420  C0B7  FFF6         	movff	follow_path@path,tblptrl
  6259  002424  C0B8  FFF7         	movff	follow_path@path+1,tblptrh
  6260  002428                     	if	0	;tblptru may be non-zero
  6261  002428                     	endif
  6262  002428                     	if	0	;tblptru may be non-zero
  6263  002428                     	endif
  6264  002428  0E20               	movlw	32
  6265  00242A  0008               	tblrd		*
  6266  00242C  60F5               	cpfslt	tablat,c
  6267  00242E  D00F               	goto	l947
  6268                           
  6269                           ; BSR set to: 0
  6270                           ;pff.c: 694: res = dir_rewind(dj);
  6271  002430  C0B3  F065         	movff	follow_path@dj,dir_rewind@dj
  6272  002434  C0B4  F066         	movff	follow_path@dj+1,dir_rewind@dj+1
  6273  002438  ECC8  F010         	call	_dir_rewind	;wreg free
  6274  00243C  0100               	movlb	0	; () banked
  6275  00243E  6FB9               	movwf	follow_path@res& (0+255),b
  6276                           
  6277                           ; BSR set to: 0
  6278                           ;pff.c: 695: dir[0] = 0;
  6279  002440  C0B5  FFD9         	movff	follow_path@dir,fsr2l
  6280  002444  C0B6  FFDA         	movff	follow_path@dir+1,fsr2h
  6281  002448  0E00               	movlw	0
  6282  00244A  6EDF               	movwf	indf2,c
  6283                           
  6284                           ;pff.c: 697: } else {
  6285  00244C  D04E               	goto	l951
  6286  00244E                     l947:
  6287                           
  6288                           ; BSR set to: 0
  6289                           ;pff.c: 699: res = create_name(dj, &path);
  6290                           
  6291                           ; BSR set to: 0
  6292                           
  6293                           ;pff.c: 698: for (;;) {
  6294                           
  6295                           ; BSR set to: 0
  6296  00244E  C0B3  F022         	movff	follow_path@dj,create_name@dj
  6297  002452  C0B4  F023         	movff	follow_path@dj+1,create_name@dj+1
  6298  002456  0EB7               	movlw	low follow_path@path
  6299  002458  6E24               	movwf	create_name@path,c
  6300  00245A  0E00               	movlw	high follow_path@path
  6301  00245C  6E25               	movwf	create_name@path+1,c
  6302  00245E  ECF1  F00E         	call	_create_name	;wreg free
  6303  002462  0100               	movlb	0	; () banked
  6304  002464  6FB9               	movwf	follow_path@res& (0+255),b
  6305                           
  6306                           ; BSR set to: 0
  6307                           ;pff.c: 700: if (res != FR_OK) break;
  6308  002466  51B9               	movf	follow_path@res& (0+255),w,b
  6309  002468  A4D8               	btfss	status,2,c
  6310  00246A  D03F               	goto	l951
  6311                           
  6312                           ; BSR set to: 0
  6313                           ;pff.c: 701: res = dir_find(dj, dir);
  6314                           
  6315                           ; BSR set to: 0
  6316                           
  6317                           ; BSR set to: 0
  6318  00246C  C0B3  F0AB         	movff	follow_path@dj,dir_find@dj
  6319  002470  C0B4  F0AC         	movff	follow_path@dj+1,dir_find@dj+1
  6320  002474  C0B5  F0AD         	movff	follow_path@dir,dir_find@dir
  6321  002478  C0B6  F0AE         	movff	follow_path@dir+1,dir_find@dir+1
  6322  00247C  EC77  F012         	call	_dir_find	;wreg free
  6323  002480  0100               	movlb	0	; () banked
  6324  002482  6FB9               	movwf	follow_path@res& (0+255),b
  6325                           
  6326                           ; BSR set to: 0
  6327                           ;pff.c: 702: if (res != FR_OK) break;
  6328  002484  51B9               	movf	follow_path@res& (0+255),w,b
  6329  002486  A4D8               	btfss	status,2,c
  6330  002488  D030               	goto	l951
  6331                           
  6332                           ; BSR set to: 0
  6333                           ;pff.c: 703: if (dj->fn[11]) break;
  6334                           
  6335                           ; BSR set to: 0
  6336                           
  6337                           ; BSR set to: 0
  6338  00248A  EE20 F002          	lfsr	2,2
  6339  00248E  51B3               	movf	follow_path@dj& (0+255),w,b
  6340  002490  26D9               	addwf	fsr2l,f,c
  6341  002492  51B4               	movf	(follow_path@dj+1)& (0+255),w,b
  6342  002494  22DA               	addwfc	fsr2h,f,c
  6343  002496  EE10 F00B          	lfsr	1,11
  6344  00249A  50DE               	movf	postinc2,w,c
  6345  00249C  26E1               	addwf	fsr1l,f,c
  6346  00249E  50DD               	movf	postdec2,w,c
  6347  0024A0  22E2               	addwfc	fsr1h,f,c
  6348  0024A2  50E7               	movf	indf1,w,c
  6349  0024A4  A4D8               	btfss	status,2,c
  6350  0024A6  D021               	goto	l951
  6351                           
  6352                           ; BSR set to: 0
  6353                           ;pff.c: 704: if (!(dir[11] & 0x10)) {
  6354                           
  6355                           ; BSR set to: 0
  6356                           
  6357                           ; BSR set to: 0
  6358  0024A8  EE20 F00B          	lfsr	2,11
  6359  0024AC  51B5               	movf	follow_path@dir& (0+255),w,b
  6360  0024AE  26D9               	addwf	fsr2l,f,c
  6361  0024B0  51B6               	movf	(follow_path@dir+1)& (0+255),w,b
  6362  0024B2  22DA               	addwfc	fsr2h,f,c
  6363  0024B4  B8DF               	btfsc	indf2,4,c
  6364  0024B6  D003               	goto	l954
  6365                           
  6366                           ; BSR set to: 0
  6367                           ;pff.c: 705: res = FR_NO_FILE; break;
  6368  0024B8  0E03               	movlw	3
  6369  0024BA  6FB9               	movwf	follow_path@res& (0+255),b
  6370  0024BC  D016               	goto	l951
  6371  0024BE                     l954:
  6372                           
  6373                           ; BSR set to: 0
  6374                           ;pff.c: 706: }
  6375                           ;pff.c: 707: dj->sclust = get_clust(dir);
  6376                           
  6377                           ; BSR set to: 0
  6378  0024BE  C0B5  F01A         	movff	follow_path@dir,get_clust@dir
  6379  0024C2  C0B6  F01B         	movff	follow_path@dir+1,get_clust@dir+1
  6380  0024C6  EC5D  F013         	call	_get_clust	;wreg free
  6381  0024CA  0100               	movlb	0	; () banked
  6382  0024CC  EE20 F004          	lfsr	2,4
  6383  0024D0  51B3               	movf	follow_path@dj& (0+255),w,b
  6384  0024D2  26D9               	addwf	fsr2l,f,c
  6385  0024D4  51B4               	movf	(follow_path@dj+1)& (0+255),w,b
  6386  0024D6  22DA               	addwfc	fsr2h,f,c
  6387  0024D8  C01A  FFDE         	movff	?_get_clust,postinc2
  6388  0024DC  C01B  FFDE         	movff	?_get_clust+1,postinc2
  6389  0024E0  C01C  FFDE         	movff	?_get_clust+2,postinc2
  6390  0024E4  C01D  FFDE         	movff	?_get_clust+3,postinc2
  6391                           
  6392                           ;pff.c: 708: }
  6393  0024E8  D7B2               	goto	l947
  6394  0024EA                     l951:
  6395                           
  6396                           ; BSR set to: 0
  6397                           ;pff.c: 709: }
  6398                           ;pff.c: 711: return res;
  6399                           
  6400                           ; BSR set to: 0
  6401                           
  6402                           ; BSR set to: 0
  6403  0024EA  51B9               	movf	follow_path@res& (0+255),w,b
  6404  0024EC  0012               	return	
  6405  0024EE                     __end_of_follow_path:
  6406                           	opt stack 0
  6407                           tosu	equ	0xFFF
  6408                           tosh	equ	0xFFE
  6409                           tosl	equ	0xFFD
  6410                           pclath	equ	0xFFA
  6411                           tblptru	equ	0xFF8
  6412                           tblptrh	equ	0xFF7
  6413                           tblptrl	equ	0xFF6
  6414                           tablat	equ	0xFF5
  6415                           prodh	equ	0xFF4
  6416                           prodl	equ	0xFF3
  6417                           intcon	equ	0xFF2
  6418                           intcon2	equ	0xFF1
  6419                           intcon3	equ	0xFF0
  6420                           postinc0	equ	0xFEE
  6421                           wreg	equ	0xFE8
  6422                           indf1	equ	0xFE7
  6423                           postinc1	equ	0xFE6
  6424                           postdec1	equ	0xFE5
  6425                           fsr1h	equ	0xFE2
  6426                           fsr1l	equ	0xFE1
  6427                           indf2	equ	0xFDF
  6428                           postinc2	equ	0xFDE
  6429                           postdec2	equ	0xFDD
  6430                           plusw2	equ	0xFDB
  6431                           fsr2h	equ	0xFDA
  6432                           fsr2l	equ	0xFD9
  6433                           status	equ	0xFD8
  6434                           
  6435 ;; *************** function _get_clust *****************
  6436 ;; Defined at:
  6437 ;;		line 414 in file "pff.c"
  6438 ;; Parameters:    Size  Location     Type
  6439 ;;  dir             2   25[COMRAM] PTR unsigned char 
  6440 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  6441 ;; Auto vars:     Size  Location     Type
  6442 ;;  clst            4   39[COMRAM] unsigned long 
  6443 ;;  fs              2   37[COMRAM] PTR struct .
  6444 ;;		 -> NULL(0), SDCard@fs(42), 
  6445 ;; Return value:  Size  Location     Type
  6446 ;;                  4   25[COMRAM] unsigned long 
  6447 ;; Registers used:
  6448 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6449 ;; Tracked objects:
  6450 ;;		On entry : 0/0
  6451 ;;		On exit  : 0/0
  6452 ;;		Unchanged: 0/0
  6453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6454 ;;      Params:         4       0       0       0       0       0       0       0       0
  6455 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6456 ;;      Temps:          8       0       0       0       0       0       0       0       0
  6457 ;;      Totals:        18       0       0       0       0       0       0       0       0
  6458 ;;Total ram usage:       18 bytes
  6459 ;; Hardware stack levels used:    1
  6460 ;; Hardware stack levels required when called:    2
  6461 ;; This function calls:
  6462 ;;		Nothing
  6463 ;; This function is called by:
  6464 ;;		_follow_path
  6465 ;;		_pf_open
  6466 ;;		_pf_opendir
  6467 ;; This function uses a non-reentrant model
  6468 ;;
  6469                           
  6470                           	psect	text27
  6471  0026BA                     __ptext27:
  6472                           	opt stack 0
  6473  0026BA                     _get_clust:
  6474                           	opt stack 25
  6475                           
  6476                           ;pff.c: 418: FATFS *fs = FatFs;
  6477                           
  6478                           ; BSR set to: 0
  6479                           ;incstack = 0
  6480  0026BA  C035  F026         	movff	_FatFs,get_clust@fs
  6481  0026BE  C036  F027         	movff	_FatFs+1,get_clust@fs+1
  6482                           
  6483                           ;pff.c: 422: if (0 || (1 && fs->fs_type == 3)) {
  6484  0026C2  0E00               	movlw	0
  6485  0026C4  6E28               	movwf	get_clust@clst,c
  6486  0026C6  0E00               	movlw	0
  6487  0026C8  6E29               	movwf	get_clust@clst+1,c
  6488  0026CA  0E00               	movlw	0
  6489  0026CC  6E2A               	movwf	get_clust@clst+2,c
  6490  0026CE  0E00               	movlw	0
  6491  0026D0  6E2B               	movwf	get_clust@clst+3,c
  6492  0026D2  C026  FFD9         	movff	get_clust@fs,fsr2l
  6493  0026D6  C027  FFDA         	movff	get_clust@fs+1,fsr2h
  6494  0026DA  0E03               	movlw	3
  6495  0026DC  18DE               	xorwf	postinc2,w,c
  6496  0026DE  A4D8               	btfss	status,2,c
  6497  0026E0  D025               	goto	l858
  6498                           
  6499                           ;pff.c: 423: clst = (WORD)(((WORD)*((BYTE*)(dir+20)+1)<<8)|(WORD)*(BYTE*)(dir+20));
  6500  0026E2  EE20 F015          	lfsr	2,21
  6501  0026E6  501A               	movf	get_clust@dir,w,c
  6502  0026E8  26D9               	addwf	fsr2l,f,c
  6503  0026EA  501B               	movf	get_clust@dir+1,w,c
  6504  0026EC  22DA               	addwfc	fsr2h,f,c
  6505  0026EE  50DF               	movf	indf2,w,c
  6506  0026F0  6E1E               	movwf	??_get_clust& (0+255),c
  6507  0026F2  501E               	movf	??_get_clust,w,c
  6508  0026F4  6E20               	movwf	(??_get_clust+2)& (0+255),c
  6509  0026F6  6A1F               	clrf	(??_get_clust+1)& (0+255),c
  6510  0026F8  EE20 F014          	lfsr	2,20
  6511  0026FC  501A               	movf	get_clust@dir,w,c
  6512  0026FE  26D9               	addwf	fsr2l,f,c
  6513  002700  501B               	movf	get_clust@dir+1,w,c
  6514  002702  22DA               	addwfc	fsr2h,f,c
  6515  002704  50DF               	movf	indf2,w,c
  6516  002706  6E21               	movwf	(??_get_clust+3)& (0+255),c
  6517  002708  5021               	movf	??_get_clust+3,w,c
  6518  00270A  121F               	iorwf	??_get_clust+1,f,c
  6519  00270C  0E00               	movlw	0
  6520  00270E  1220               	iorwf	??_get_clust+2,f,c
  6521  002710  C01F  F028         	movff	??_get_clust+1,get_clust@clst
  6522  002714  C020  F029         	movff	??_get_clust+2,get_clust@clst+1
  6523  002718  6A2A               	clrf	get_clust@clst+2,c
  6524  00271A  6A2B               	clrf	get_clust@clst+3,c
  6525                           
  6526                           ;pff.c: 424: clst <<= 16;
  6527  00271C  0E10               	movlw	16
  6528  00271E                     u7255:
  6529  00271E  90D8               	bcf	status,0,c
  6530  002720  3628               	rlcf	get_clust@clst,f,c
  6531  002722  3629               	rlcf	get_clust@clst+1,f,c
  6532  002724  362A               	rlcf	get_clust@clst+2,f,c
  6533  002726  362B               	rlcf	get_clust@clst+3,f,c
  6534  002728  2EE8               	decfsz	wreg,f,c
  6535  00272A  D7F9               	goto	u7255
  6536  00272C                     l858:
  6537                           
  6538                           ;pff.c: 425: }
  6539                           ;pff.c: 426: clst |= (WORD)(((WORD)*((BYTE*)(dir+26)+1)<<8)|(WORD)*(BYTE*)(dir+26));
  6540  00272C  EE20 F01B          	lfsr	2,27
  6541  002730  501A               	movf	get_clust@dir,w,c
  6542  002732  26D9               	addwf	fsr2l,f,c
  6543  002734  501B               	movf	get_clust@dir+1,w,c
  6544  002736  22DA               	addwfc	fsr2h,f,c
  6545  002738  50DF               	movf	indf2,w,c
  6546  00273A  6E1E               	movwf	??_get_clust& (0+255),c
  6547  00273C  501E               	movf	??_get_clust,w,c
  6548  00273E  6E20               	movwf	(??_get_clust+2)& (0+255),c
  6549  002740  6A1F               	clrf	(??_get_clust+1)& (0+255),c
  6550  002742  EE20 F01A          	lfsr	2,26
  6551  002746  501A               	movf	get_clust@dir,w,c
  6552  002748  26D9               	addwf	fsr2l,f,c
  6553  00274A  501B               	movf	get_clust@dir+1,w,c
  6554  00274C  22DA               	addwfc	fsr2h,f,c
  6555  00274E  50DF               	movf	indf2,w,c
  6556  002750  6E21               	movwf	(??_get_clust+3)& (0+255),c
  6557  002752  5021               	movf	??_get_clust+3,w,c
  6558  002754  101F               	iorwf	??_get_clust+1,w,c
  6559  002756  6E22               	movwf	(??_get_clust+4)& (0+255),c
  6560  002758  5020               	movf	??_get_clust+2,w,c
  6561  00275A  6E23               	movwf	(??_get_clust+5)& (0+255),c
  6562  00275C  6A24               	clrf	(??_get_clust+6)& (0+255),c
  6563  00275E  6A25               	clrf	(??_get_clust+7)& (0+255),c
  6564  002760  5022               	movf	??_get_clust+4,w,c
  6565  002762  1228               	iorwf	get_clust@clst,f,c
  6566  002764  5023               	movf	??_get_clust+5,w,c
  6567  002766  1229               	iorwf	get_clust@clst+1,f,c
  6568  002768  5024               	movf	??_get_clust+6,w,c
  6569  00276A  122A               	iorwf	get_clust@clst+2,f,c
  6570  00276C  5025               	movf	??_get_clust+7,w,c
  6571  00276E  122B               	iorwf	get_clust@clst+3,f,c
  6572                           
  6573                           ;pff.c: 428: return clst;
  6574  002770  C028  F01A         	movff	get_clust@clst,?_get_clust
  6575  002774  C029  F01B         	movff	get_clust@clst+1,?_get_clust+1
  6576  002778  C02A  F01C         	movff	get_clust@clst+2,?_get_clust+2
  6577  00277C  C02B  F01D         	movff	get_clust@clst+3,?_get_clust+3
  6578  002780  0012               	return	
  6579  002782                     __end_of_get_clust:
  6580                           	opt stack 0
  6581                           tosu	equ	0xFFF
  6582                           tosh	equ	0xFFE
  6583                           tosl	equ	0xFFD
  6584                           pclath	equ	0xFFA
  6585                           tblptru	equ	0xFF8
  6586                           tblptrh	equ	0xFF7
  6587                           tblptrl	equ	0xFF6
  6588                           tablat	equ	0xFF5
  6589                           prodh	equ	0xFF4
  6590                           prodl	equ	0xFF3
  6591                           intcon	equ	0xFF2
  6592                           intcon2	equ	0xFF1
  6593                           intcon3	equ	0xFF0
  6594                           postinc0	equ	0xFEE
  6595                           wreg	equ	0xFE8
  6596                           indf1	equ	0xFE7
  6597                           postinc1	equ	0xFE6
  6598                           postdec1	equ	0xFE5
  6599                           fsr1h	equ	0xFE2
  6600                           fsr1l	equ	0xFE1
  6601                           indf2	equ	0xFDF
  6602                           postinc2	equ	0xFDE
  6603                           postdec2	equ	0xFDD
  6604                           plusw2	equ	0xFDB
  6605                           fsr2h	equ	0xFDA
  6606                           fsr2l	equ	0xFD9
  6607                           status	equ	0xFD8
  6608                           
  6609 ;; *************** function _dir_find *****************
  6610 ;; Defined at:
  6611 ;;		line 510 in file "pff.c"
  6612 ;; Parameters:    Size  Location     Type
  6613 ;;  dj              2   75[BANK0 ] PTR struct .
  6614 ;;		 -> pf_open@dj(16), 
  6615 ;;  dir             2   77[BANK0 ] PTR unsigned char 
  6616 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  6617 ;; Auto vars:     Size  Location     Type
  6618 ;;  res             1   82[BANK0 ] enum E43
  6619 ;;  c               1   81[BANK0 ] unsigned char 
  6620 ;; Return value:  Size  Location     Type
  6621 ;;                  1    wreg      enum E43
  6622 ;; Registers used:
  6623 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6624 ;; Tracked objects:
  6625 ;;		On entry : 0/0
  6626 ;;		On exit  : 0/0
  6627 ;;		Unchanged: 0/0
  6628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6629 ;;      Params:         0       4       0       0       0       0       0       0       0
  6630 ;;      Locals:         0       2       0       0       0       0       0       0       0
  6631 ;;      Temps:          0       2       0       0       0       0       0       0       0
  6632 ;;      Totals:         0       8       0       0       0       0       0       0       0
  6633 ;;Total ram usage:        8 bytes
  6634 ;; Hardware stack levels used:    1
  6635 ;; Hardware stack levels required when called:    9
  6636 ;; This function calls:
  6637 ;;		_dir_next
  6638 ;;		_dir_rewind
  6639 ;;		_disk_readp
  6640 ;;		_mem_cmp
  6641 ;; This function is called by:
  6642 ;;		_follow_path
  6643 ;; This function uses a non-reentrant model
  6644 ;;
  6645                           
  6646                           	psect	text28
  6647  0024EE                     __ptext28:
  6648                           	opt stack 0
  6649  0024EE                     _dir_find:
  6650                           	opt stack 17
  6651                           
  6652                           ;pff.c: 515: FRESULT res;
  6653                           ;pff.c: 516: BYTE c;
  6654                           ;pff.c: 519: res = dir_rewind(dj);
  6655                           
  6656                           ;incstack = 0
  6657  0024EE  C0AB  F065         	movff	dir_find@dj,dir_rewind@dj
  6658  0024F2  C0AC  F066         	movff	dir_find@dj+1,dir_rewind@dj+1
  6659  0024F6  ECC8  F010         	call	_dir_rewind	;wreg free
  6660  0024FA  0100               	movlb	0	; () banked
  6661  0024FC  6FB2               	movwf	dir_find@res& (0+255),b
  6662                           
  6663                           ; BSR set to: 0
  6664                           ;pff.c: 520: if (res != FR_OK) return res;
  6665  0024FE  51B2               	movf	dir_find@res& (0+255),w,b
  6666  002500  B4D8               	btfsc	status,2,c
  6667  002502  D002               	goto	l890
  6668                           
  6669                           ; BSR set to: 0
  6670  002504  51B2               	movf	dir_find@res& (0+255),w,b
  6671                           
  6672                           ; BSR set to: 0
  6673  002506  0012               	return	
  6674  002508                     l890:
  6675                           
  6676                           ; BSR set to: 0
  6677                           ;pff.c: 523: res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32)
  6678                           ;pff.c: 524: ? FR_DISK_ERR : FR_OK;
  6679                           
  6680                           ; BSR set to: 0
  6681                           
  6682                           ;pff.c: 522: do {
  6683                           
  6684                           ; BSR set to: 0
  6685  002508  C0AD  F060         	movff	dir_find@dir,disk_readp@rd
  6686  00250C  C0AE  F061         	movff	dir_find@dir+1,disk_readp@rd+1
  6687  002510  EE20 F00C          	lfsr	2,12
  6688  002514  51AB               	movf	dir_find@dj& (0+255),w,b
  6689  002516  26D9               	addwf	fsr2l,f,c
  6690  002518  51AC               	movf	(dir_find@dj+1)& (0+255),w,b
  6691  00251A  22DA               	addwfc	fsr2h,f,c
  6692  00251C  CFDE F062          	movff	postinc2,disk_readp@sector
  6693  002520  CFDE F063          	movff	postinc2,disk_readp@sector+1
  6694  002524  CFDE F064          	movff	postinc2,disk_readp@sector+2
  6695  002528  CFDE F065          	movff	postinc2,disk_readp@sector+3
  6696  00252C  C0AB  FFD9         	movff	dir_find@dj,fsr2l
  6697  002530  C0AC  FFDA         	movff	dir_find@dj+1,fsr2h
  6698  002534  CFDE F0AF          	movff	postinc2,??_dir_find
  6699  002538  CFDD F0B0          	movff	postdec2,??_dir_find+1
  6700  00253C  0E0F               	movlw	15
  6701  00253E  17AF               	andwf	??_dir_find& (0+255),f,b
  6702  002540  0E00               	movlw	0
  6703  002542  17B0               	andwf	(??_dir_find+1)& (0+255),f,b
  6704  002544  0E05               	movlw	5
  6705  002546                     u7275:
  6706  002546  90D8               	bcf	status,0,c
  6707  002548  37AF               	rlcf	??_dir_find& (0+255),f,b
  6708  00254A  37B0               	rlcf	(??_dir_find+1)& (0+255),f,b
  6709  00254C  2EE8               	decfsz	wreg,f,c
  6710  00254E  D7FB               	goto	u7275
  6711  002550  C0AF  F066         	movff	??_dir_find,disk_readp@offset
  6712  002554  C0B0  F067         	movff	??_dir_find+1,disk_readp@offset+1
  6713  002558  0E00               	movlw	0
  6714  00255A  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  6715  00255C  0E20               	movlw	32
  6716  00255E  6F68               	movwf	disk_readp@count& (0+255),b
  6717  002560  EC3C  F009         	call	_disk_readp	;wreg free
  6718  002564  0900               	iorlw	0
  6719  002566  B4D8               	btfsc	status,2,c
  6720  002568  D002               	goto	u7280
  6721  00256A  0E01               	movlw	1
  6722  00256C  D001               	goto	u7290
  6723  00256E                     u7280:
  6724  00256E  0E00               	movlw	0
  6725  002570                     u7290:
  6726  002570  0100               	movlb	0	; () banked
  6727  002572  6FB2               	movwf	dir_find@res& (0+255),b
  6728                           
  6729                           ; BSR set to: 0
  6730                           ;pff.c: 525: if (res != FR_OK) break;
  6731  002574  51B2               	movf	dir_find@res& (0+255),w,b
  6732  002576  A4D8               	btfss	status,2,c
  6733  002578  D037               	goto	u7340
  6734                           
  6735                           ; BSR set to: 0
  6736                           ;pff.c: 526: c = dir[0];
  6737                           
  6738                           ; BSR set to: 0
  6739                           
  6740                           ; BSR set to: 0
  6741  00257A  C0AD  FFD9         	movff	dir_find@dir,fsr2l
  6742  00257E  C0AE  FFDA         	movff	dir_find@dir+1,fsr2h
  6743  002582  50DF               	movf	indf2,w,c
  6744  002584  6FB1               	movwf	dir_find@c& (0+255),b
  6745                           
  6746                           ; BSR set to: 0
  6747                           ;pff.c: 527: if (c == 0) { res = FR_NO_FILE; break; }
  6748  002586  51B1               	movf	dir_find@c& (0+255),w,b
  6749  002588  A4D8               	btfss	status,2,c
  6750  00258A  D003               	goto	l895
  6751                           
  6752                           ; BSR set to: 0
  6753  00258C  0E03               	movlw	3
  6754  00258E  6FB2               	movwf	dir_find@res& (0+255),b
  6755  002590  D02B               	goto	u7340
  6756  002592                     l895:
  6757                           
  6758                           ; BSR set to: 0
  6759                           ;pff.c: 528: if (!(dir[11] & 0x08) && !mem_cmp(dir, dj->fn, 11))
  6760                           
  6761                           ; BSR set to: 0
  6762  002592  EE20 F00B          	lfsr	2,11
  6763  002596  51AD               	movf	dir_find@dir& (0+255),w,b
  6764  002598  26D9               	addwf	fsr2l,f,c
  6765  00259A  51AE               	movf	(dir_find@dir+1)& (0+255),w,b
  6766  00259C  22DA               	addwfc	fsr2h,f,c
  6767  00259E  B6DF               	btfsc	indf2,3,c
  6768  0025A0  D018               	goto	l896
  6769                           
  6770                           ; BSR set to: 0
  6771  0025A2  C0AD  F01A         	movff	dir_find@dir,mem_cmp@dst
  6772  0025A6  C0AE  F01B         	movff	dir_find@dir+1,mem_cmp@dst+1
  6773  0025AA  EE20 F002          	lfsr	2,2
  6774  0025AE  51AB               	movf	dir_find@dj& (0+255),w,b
  6775  0025B0  26D9               	addwf	fsr2l,f,c
  6776  0025B2  51AC               	movf	(dir_find@dj+1)& (0+255),w,b
  6777  0025B4  22DA               	addwfc	fsr2h,f,c
  6778  0025B6  CFDE F01C          	movff	postinc2,mem_cmp@src
  6779  0025BA  CFDD F01D          	movff	postdec2,mem_cmp@src+1
  6780  0025BE  0E00               	movlw	0
  6781  0025C0  6E1F               	movwf	mem_cmp@cnt+1,c
  6782  0025C2  0E0B               	movlw	11
  6783  0025C4  6E1E               	movwf	mem_cmp@cnt,c
  6784  0025C6  EC48  F016         	call	_mem_cmp	;wreg free
  6785  0025CA  501A               	movf	?_mem_cmp,w,c
  6786  0025CC  101B               	iorwf	?_mem_cmp+1,w,c
  6787  0025CE  B4D8               	btfsc	status,2,c
  6788  0025D0  D00B               	goto	u7340
  6789  0025D2                     l896:
  6790                           
  6791                           ;pff.c: 530: res = dir_next(dj);
  6792  0025D2  C0AB  F09A         	movff	dir_find@dj,dir_next@dj
  6793  0025D6  C0AC  F09B         	movff	dir_find@dj+1,dir_next@dj+1
  6794  0025DA  EC0C  F00C         	call	_dir_next	;wreg free
  6795  0025DE  0100               	movlb	0	; () banked
  6796  0025E0  6FB2               	movwf	dir_find@res& (0+255),b
  6797                           
  6798                           ; BSR set to: 0
  6799                           ;pff.c: 531: } while (res == FR_OK);
  6800  0025E2  51B2               	movf	dir_find@res& (0+255),w,b
  6801  0025E4  B4D8               	btfsc	status,2,c
  6802  0025E6  D790               	goto	l890
  6803  0025E8                     u7340:
  6804                           
  6805                           ;pff.c: 533: return res;
  6806                           
  6807                           ; BSR set to: 0
  6808  0025E8  0100               	movlb	0	; () banked
  6809  0025EA  51B2               	movf	dir_find@res& (0+255),w,b
  6810  0025EC  0012               	return	
  6811  0025EE                     __end_of_dir_find:
  6812                           	opt stack 0
  6813                           tosu	equ	0xFFF
  6814                           tosh	equ	0xFFE
  6815                           tosl	equ	0xFFD
  6816                           pclath	equ	0xFFA
  6817                           tblptru	equ	0xFF8
  6818                           tblptrh	equ	0xFF7
  6819                           tblptrl	equ	0xFF6
  6820                           tablat	equ	0xFF5
  6821                           prodh	equ	0xFF4
  6822                           prodl	equ	0xFF3
  6823                           intcon	equ	0xFF2
  6824                           intcon2	equ	0xFF1
  6825                           intcon3	equ	0xFF0
  6826                           postinc0	equ	0xFEE
  6827                           wreg	equ	0xFE8
  6828                           indf1	equ	0xFE7
  6829                           postinc1	equ	0xFE6
  6830                           postdec1	equ	0xFE5
  6831                           fsr1h	equ	0xFE2
  6832                           fsr1l	equ	0xFE1
  6833                           indf2	equ	0xFDF
  6834                           postinc2	equ	0xFDE
  6835                           postdec2	equ	0xFDD
  6836                           plusw2	equ	0xFDB
  6837                           fsr2h	equ	0xFDA
  6838                           fsr2l	equ	0xFD9
  6839                           status	equ	0xFD8
  6840                           
  6841 ;; *************** function _mem_cmp *****************
  6842 ;; Defined at:
  6843 ;;		line 336 in file "pff.c"
  6844 ;; Parameters:    Size  Location     Type
  6845 ;;  dst             2   25[COMRAM] PTR const void 
  6846 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  6847 ;;  src             2   27[COMRAM] PTR const void 
  6848 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  6849 ;;  cnt             2   29[COMRAM] int 
  6850 ;; Auto vars:     Size  Location     Type
  6851 ;;  r               2   38[COMRAM] int 
  6852 ;;  s               2   36[COMRAM] PTR const unsigned char 
  6853 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  6854 ;;  d               2   34[COMRAM] PTR const unsigned char 
  6855 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  6856 ;; Return value:  Size  Location     Type
  6857 ;;                  2   25[COMRAM] int 
  6858 ;; Registers used:
  6859 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6860 ;; Tracked objects:
  6861 ;;		On entry : 0/0
  6862 ;;		On exit  : 0/0
  6863 ;;		Unchanged: 0/0
  6864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6865 ;;      Params:         6       0       0       0       0       0       0       0       0
  6866 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6867 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6868 ;;      Totals:        15       0       0       0       0       0       0       0       0
  6869 ;;Total ram usage:       15 bytes
  6870 ;; Hardware stack levels used:    1
  6871 ;; Hardware stack levels required when called:    2
  6872 ;; This function calls:
  6873 ;;		Nothing
  6874 ;; This function is called by:
  6875 ;;		_dir_find
  6876 ;; This function uses a non-reentrant model
  6877 ;;
  6878                           
  6879                           	psect	text29
  6880  002C90                     __ptext29:
  6881                           	opt stack 0
  6882  002C90                     _mem_cmp:
  6883                           	opt stack 23
  6884                           
  6885                           ;pff.c: 337: const char *d = (const char *)dst, *s = (const char *)src;
  6886                           
  6887                           ; BSR set to: 0
  6888                           ;incstack = 0
  6889  002C90  C01A  F023         	movff	mem_cmp@dst,mem_cmp@d
  6890  002C94  C01B  F024         	movff	mem_cmp@dst+1,mem_cmp@d+1
  6891  002C98  C01C  F025         	movff	mem_cmp@src,mem_cmp@s
  6892  002C9C  C01D  F026         	movff	mem_cmp@src+1,mem_cmp@s+1
  6893                           
  6894                           ;pff.c: 338: int r = 0;
  6895  002CA0  0E00               	movlw	0
  6896  002CA2  6E28               	movwf	mem_cmp@r+1,c
  6897  002CA4  0E00               	movlw	0
  6898  002CA6  6E27               	movwf	mem_cmp@r,c
  6899  002CA8  061E               	decf	mem_cmp@cnt,f,c
  6900  002CAA  A0D8               	btfss	status,0,c
  6901  002CAC  061F               	decf	mem_cmp@cnt+1,f,c
  6902  002CAE  281E               	incf	mem_cmp@cnt,w,c
  6903  002CB0  E103               	bnz	u6940
  6904  002CB2  281F               	incf	mem_cmp@cnt+1,w,c
  6905  002CB4  B4D8               	btfsc	status,2,c
  6906  002CB6  D01F               	goto	u6950
  6907  002CB8                     u6940:
  6908  002CB8  C025  FFD9         	movff	mem_cmp@s,fsr2l
  6909  002CBC  C026  FFDA         	movff	mem_cmp@s+1,fsr2h
  6910  002CC0  4A25               	infsnz	mem_cmp@s,f,c
  6911  002CC2  2A26               	incf	mem_cmp@s+1,f,c
  6912  002CC4  50DF               	movf	indf2,w,c
  6913  002CC6  6E20               	movwf	??_mem_cmp& (0+255),c
  6914  002CC8  6A21               	clrf	(??_mem_cmp+1)& (0+255),c
  6915  002CCA  1E20               	comf	??_mem_cmp,f,c
  6916  002CCC  1E21               	comf	??_mem_cmp+1,f,c
  6917  002CCE  4A20               	infsnz	??_mem_cmp,f,c
  6918  002CD0  2A21               	incf	??_mem_cmp+1,f,c
  6919  002CD2  C023  FFD9         	movff	mem_cmp@d,fsr2l
  6920  002CD6  C024  FFDA         	movff	mem_cmp@d+1,fsr2h
  6921  002CDA  4A23               	infsnz	mem_cmp@d,f,c
  6922  002CDC  2A24               	incf	mem_cmp@d+1,f,c
  6923  002CDE  50DF               	movf	indf2,w,c
  6924  002CE0  6E22               	movwf	(??_mem_cmp+2)& (0+255),c
  6925  002CE2  5022               	movf	??_mem_cmp+2,w,c
  6926  002CE4  2420               	addwf	??_mem_cmp,w,c
  6927  002CE6  6E27               	movwf	mem_cmp@r,c
  6928  002CE8  0E00               	movlw	0
  6929  002CEA  2021               	addwfc	??_mem_cmp+1,w,c
  6930  002CEC  6E28               	movwf	mem_cmp@r+1,c
  6931  002CEE  5027               	movf	mem_cmp@r,w,c
  6932  002CF0  1028               	iorwf	mem_cmp@r+1,w,c
  6933  002CF2  B4D8               	btfsc	status,2,c
  6934  002CF4  D7D9               	goto	l825
  6935  002CF6                     u6950:
  6936                           
  6937                           ;pff.c: 340: return r;
  6938  002CF6  C027  F01A         	movff	mem_cmp@r,?_mem_cmp
  6939  002CFA  C028  F01B         	movff	mem_cmp@r+1,?_mem_cmp+1
  6940  002CFE  0012               	return		;funcret
  6941  002D00                     __end_of_mem_cmp:
  6942                           	opt stack 0
  6943                           tosu	equ	0xFFF
  6944                           tosh	equ	0xFFE
  6945                           tosl	equ	0xFFD
  6946                           pclath	equ	0xFFA
  6947                           tblptru	equ	0xFF8
  6948                           tblptrh	equ	0xFF7
  6949                           tblptrl	equ	0xFF6
  6950                           tablat	equ	0xFF5
  6951                           prodh	equ	0xFF4
  6952                           prodl	equ	0xFF3
  6953                           intcon	equ	0xFF2
  6954                           intcon2	equ	0xFF1
  6955                           intcon3	equ	0xFF0
  6956                           postinc0	equ	0xFEE
  6957                           wreg	equ	0xFE8
  6958                           indf1	equ	0xFE7
  6959                           postinc1	equ	0xFE6
  6960                           postdec1	equ	0xFE5
  6961                           fsr1h	equ	0xFE2
  6962                           fsr1l	equ	0xFE1
  6963                           indf2	equ	0xFDF
  6964                           postinc2	equ	0xFDE
  6965                           postdec2	equ	0xFDD
  6966                           plusw2	equ	0xFDB
  6967                           fsr2h	equ	0xFDA
  6968                           fsr2l	equ	0xFD9
  6969                           status	equ	0xFD8
  6970                           
  6971 ;; *************** function _dir_rewind *****************
  6972 ;; Defined at:
  6973 ;;		line 437 in file "pff.c"
  6974 ;; Parameters:    Size  Location     Type
  6975 ;;  dj              2    5[BANK0 ] PTR struct .
  6976 ;;		 -> pf_open@dj(16), 
  6977 ;; Auto vars:     Size  Location     Type
  6978 ;;  clst            4   17[BANK0 ] unsigned long 
  6979 ;;  fs              2   15[BANK0 ] PTR struct .
  6980 ;;		 -> NULL(0), SDCard@fs(42), 
  6981 ;; Return value:  Size  Location     Type
  6982 ;;                  1    wreg      enum E43
  6983 ;; Registers used:
  6984 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6985 ;; Tracked objects:
  6986 ;;		On entry : 0/0
  6987 ;;		On exit  : 0/0
  6988 ;;		Unchanged: 0/0
  6989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6990 ;;      Params:         0       2       0       0       0       0       0       0       0
  6991 ;;      Locals:         0      10       0       0       0       0       0       0       0
  6992 ;;      Temps:          0       4       0       0       0       0       0       0       0
  6993 ;;      Totals:         0      16       0       0       0       0       0       0       0
  6994 ;;Total ram usage:       16 bytes
  6995 ;; Hardware stack levels used:    1
  6996 ;; Hardware stack levels required when called:    4
  6997 ;; This function calls:
  6998 ;;		_clust2sect
  6999 ;; This function is called by:
  7000 ;;		_dir_find
  7001 ;;		_follow_path
  7002 ;;		_pf_opendir
  7003 ;;		_pf_readdir
  7004 ;; This function uses a non-reentrant model
  7005 ;;
  7006                           
  7007                           	psect	text30
  7008  002190                     __ptext30:
  7009                           	opt stack 0
  7010  002190                     _dir_rewind:
  7011                           	opt stack 22
  7012                           
  7013                           ;pff.c: 441: DWORD clst;
  7014                           ;pff.c: 442: FATFS *fs = FatFs;
  7015                           
  7016                           ;incstack = 0
  7017  002190  C035  F06F         	movff	_FatFs,dir_rewind@fs
  7018  002194  C036  F070         	movff	_FatFs+1,dir_rewind@fs+1
  7019                           
  7020                           ;pff.c: 445: dj->index = 0;
  7021  002198  C065  FFD9         	movff	dir_rewind@dj,fsr2l
  7022  00219C  C066  FFDA         	movff	dir_rewind@dj+1,fsr2h
  7023  0021A0  0E00               	movlw	0
  7024  0021A2  6EDE               	movwf	postinc2,c
  7025  0021A4  0E00               	movlw	0
  7026  0021A6  6EDD               	movwf	postdec2,c
  7027                           
  7028                           ;pff.c: 446: clst = dj->sclust;
  7029  0021A8  0100               	movlb	0	; () banked
  7030  0021AA  EE20 F004          	lfsr	2,4
  7031  0021AE  5165               	movf	dir_rewind@dj& (0+255),w,b
  7032  0021B0  26D9               	addwf	fsr2l,f,c
  7033  0021B2  5166               	movf	(dir_rewind@dj+1)& (0+255),w,b
  7034  0021B4  22DA               	addwfc	fsr2h,f,c
  7035  0021B6  CFDE F071          	movff	postinc2,dir_rewind@clst
  7036  0021BA  CFDE F072          	movff	postinc2,dir_rewind@clst+1
  7037  0021BE  CFDE F073          	movff	postinc2,dir_rewind@clst+2
  7038  0021C2  CFDE F074          	movff	postinc2,dir_rewind@clst+3
  7039                           
  7040                           ; BSR set to: 0
  7041                           ;pff.c: 447: if (clst == 1 || clst >= fs->n_fatent)
  7042  0021C6  0571               	decf	dir_rewind@clst& (0+255),w,b
  7043  0021C8  1172               	iorwf	(dir_rewind@clst+1)& (0+255),w,b
  7044  0021CA  1173               	iorwf	(dir_rewind@clst+2)& (0+255),w,b
  7045  0021CC  1174               	iorwf	(dir_rewind@clst+3)& (0+255),w,b
  7046  0021CE  B4D8               	btfsc	status,2,c
  7047  0021D0  D010               	goto	u6970
  7048                           
  7049                           ; BSR set to: 0
  7050  0021D2  EE20 F006          	lfsr	2,6
  7051  0021D6  516F               	movf	dir_rewind@fs& (0+255),w,b
  7052  0021D8  26D9               	addwf	fsr2l,f,c
  7053  0021DA  5170               	movf	(dir_rewind@fs+1)& (0+255),w,b
  7054  0021DC  22DA               	addwfc	fsr2h,f,c
  7055  0021DE  50DE               	movf	postinc2,w,c
  7056  0021E0  5D71               	subwf	dir_rewind@clst& (0+255),w,b
  7057  0021E2  50DE               	movf	postinc2,w,c
  7058  0021E4  5972               	subwfb	(dir_rewind@clst+1)& (0+255),w,b
  7059  0021E6  50DE               	movf	postinc2,w,c
  7060  0021E8  5973               	subwfb	(dir_rewind@clst+2)& (0+255),w,b
  7061  0021EA  50DE               	movf	postinc2,w,c
  7062  0021EC  5974               	subwfb	(dir_rewind@clst+3)& (0+255),w,b
  7063  0021EE  A0D8               	btfss	status,0,c
  7064  0021F0  D002               	goto	l864
  7065  0021F2                     u6970:
  7066                           
  7067                           ; BSR set to: 0
  7068                           ;pff.c: 448: return FR_DISK_ERR;
  7069                           
  7070                           ; BSR set to: 0
  7071  0021F2  0E01               	movlw	1
  7072                           
  7073                           ; BSR set to: 0
  7074  0021F4  0012               	return	
  7075  0021F6                     l864:
  7076                           
  7077                           ; BSR set to: 0
  7078                           
  7079                           ; BSR set to: 0
  7080  0021F6  5171               	movf	dir_rewind@clst& (0+255),w,b
  7081  0021F8  1172               	iorwf	(dir_rewind@clst+1)& (0+255),w,b
  7082  0021FA  1173               	iorwf	(dir_rewind@clst+2)& (0+255),w,b
  7083  0021FC  1174               	iorwf	(dir_rewind@clst+3)& (0+255),w,b
  7084  0021FE  A4D8               	btfss	status,2,c
  7085  002200  D016               	goto	l868
  7086                           
  7087                           ; BSR set to: 0
  7088  002202  C06F  FFD9         	movff	dir_rewind@fs,fsr2l
  7089  002206  C070  FFDA         	movff	dir_rewind@fs+1,fsr2h
  7090  00220A  0E03               	movlw	3
  7091  00220C  18DE               	xorwf	postinc2,w,c
  7092  00220E  A4D8               	btfss	status,2,c
  7093  002210  D00E               	goto	l868
  7094                           
  7095                           ; BSR set to: 0
  7096                           ;pff.c: 450: clst = (DWORD)fs->dirbase;
  7097                           
  7098                           ; BSR set to: 0
  7099  002212  EE20 F00E          	lfsr	2,14
  7100  002216  516F               	movf	dir_rewind@fs& (0+255),w,b
  7101  002218  26D9               	addwf	fsr2l,f,c
  7102  00221A  5170               	movf	(dir_rewind@fs+1)& (0+255),w,b
  7103  00221C  22DA               	addwfc	fsr2h,f,c
  7104  00221E  CFDE F071          	movff	postinc2,dir_rewind@clst
  7105  002222  CFDE F072          	movff	postinc2,dir_rewind@clst+1
  7106  002226  CFDE F073          	movff	postinc2,dir_rewind@clst+2
  7107  00222A  CFDE F074          	movff	postinc2,dir_rewind@clst+3
  7108  00222E                     l868:
  7109                           
  7110                           ; BSR set to: 0
  7111                           ;pff.c: 452: dj->sect = (0 || clst) ? clust2sect(clst) : fs->dirbase;
  7112  00222E  EE20 F008          	lfsr	2,8
  7113  002232  5165               	movf	dir_rewind@dj& (0+255),w,b
  7114  002234  26D9               	addwf	fsr2l,f,c
  7115  002236  5166               	movf	(dir_rewind@dj+1)& (0+255),w,b
  7116  002238  22DA               	addwfc	fsr2h,f,c
  7117  00223A  C071  FFDE         	movff	dir_rewind@clst,postinc2
  7118  00223E  C072  FFDE         	movff	dir_rewind@clst+1,postinc2
  7119  002242  C073  FFDE         	movff	dir_rewind@clst+2,postinc2
  7120  002246  C074  FFDE         	movff	dir_rewind@clst+3,postinc2
  7121                           
  7122                           ; BSR set to: 0
  7123  00224A  5171               	movf	dir_rewind@clst& (0+255),w,b
  7124  00224C  1172               	iorwf	(dir_rewind@clst+1)& (0+255),w,b
  7125  00224E  1173               	iorwf	(dir_rewind@clst+2)& (0+255),w,b
  7126  002250  1174               	iorwf	(dir_rewind@clst+3)& (0+255),w,b
  7127  002252  A4D8               	btfss	status,2,c
  7128  002254  D00F               	goto	l872
  7129                           
  7130                           ; BSR set to: 0
  7131  002256  EE20 F00E          	lfsr	2,14
  7132  00225A  516F               	movf	dir_rewind@fs& (0+255),w,b
  7133  00225C  26D9               	addwf	fsr2l,f,c
  7134  00225E  5170               	movf	(dir_rewind@fs+1)& (0+255),w,b
  7135  002260  22DA               	addwfc	fsr2h,f,c
  7136  002262  CFDE F06B          	movff	postinc2,_dir_rewind$2022
  7137  002266  CFDE F06C          	movff	postinc2,_dir_rewind$2022+1
  7138  00226A  CFDE F06D          	movff	postinc2,_dir_rewind$2022+2
  7139  00226E  CFDE F06E          	movff	postinc2,_dir_rewind$2022+3
  7140  002272  D012               	goto	l874
  7141  002274                     l872:
  7142                           
  7143                           ; BSR set to: 0
  7144                           
  7145                           ; BSR set to: 0
  7146  002274  C071  F026         	movff	dir_rewind@clst,clust2sect@clst
  7147  002278  C072  F027         	movff	dir_rewind@clst+1,clust2sect@clst+1
  7148  00227C  C073  F028         	movff	dir_rewind@clst+2,clust2sect@clst+2
  7149  002280  C074  F029         	movff	dir_rewind@clst+3,clust2sect@clst+3
  7150  002284  ECC1  F013         	call	_clust2sect	;wreg free
  7151  002288  C026  F06B         	movff	?_clust2sect,_dir_rewind$2022
  7152  00228C  C027  F06C         	movff	?_clust2sect+1,_dir_rewind$2022+1
  7153  002290  C028  F06D         	movff	?_clust2sect+2,_dir_rewind$2022+2
  7154  002294  C029  F06E         	movff	?_clust2sect+3,_dir_rewind$2022+3
  7155  002298                     l874:
  7156  002298  0100               	movlb	0	; () banked
  7157  00229A  EE20 F00C          	lfsr	2,12
  7158  00229E  5165               	movf	dir_rewind@dj& (0+255),w,b
  7159  0022A0  26D9               	addwf	fsr2l,f,c
  7160  0022A2  5166               	movf	(dir_rewind@dj+1)& (0+255),w,b
  7161  0022A4  22DA               	addwfc	fsr2h,f,c
  7162  0022A6  C06B  FFDE         	movff	_dir_rewind$2022,postinc2
  7163  0022AA  C06C  FFDE         	movff	_dir_rewind$2022+1,postinc2
  7164  0022AE  C06D  FFDE         	movff	_dir_rewind$2022+2,postinc2
  7165  0022B2  C06E  FFDE         	movff	_dir_rewind$2022+3,postinc2
  7166                           
  7167                           ; BSR set to: 0
  7168                           ;pff.c: 454: return FR_OK;
  7169  0022B6  0E00               	movlw	0
  7170  0022B8  0012               	return	
  7171  0022BA                     __end_of_dir_rewind:
  7172                           	opt stack 0
  7173                           tosu	equ	0xFFF
  7174                           tosh	equ	0xFFE
  7175                           tosl	equ	0xFFD
  7176                           pclath	equ	0xFFA
  7177                           tblptru	equ	0xFF8
  7178                           tblptrh	equ	0xFF7
  7179                           tblptrl	equ	0xFF6
  7180                           tablat	equ	0xFF5
  7181                           prodh	equ	0xFF4
  7182                           prodl	equ	0xFF3
  7183                           intcon	equ	0xFF2
  7184                           intcon2	equ	0xFF1
  7185                           intcon3	equ	0xFF0
  7186                           postinc0	equ	0xFEE
  7187                           wreg	equ	0xFE8
  7188                           indf1	equ	0xFE7
  7189                           postinc1	equ	0xFE6
  7190                           postdec1	equ	0xFE5
  7191                           fsr1h	equ	0xFE2
  7192                           fsr1l	equ	0xFE1
  7193                           indf2	equ	0xFDF
  7194                           postinc2	equ	0xFDE
  7195                           postdec2	equ	0xFDD
  7196                           plusw2	equ	0xFDB
  7197                           fsr2h	equ	0xFDA
  7198                           fsr2l	equ	0xFD9
  7199                           status	equ	0xFD8
  7200                           
  7201 ;; *************** function _dir_next *****************
  7202 ;; Defined at:
  7203 ;;		line 465 in file "pff.c"
  7204 ;; Parameters:    Size  Location     Type
  7205 ;;  dj              2   58[BANK0 ] PTR struct .
  7206 ;;		 -> pf_open@dj(16), 
  7207 ;; Auto vars:     Size  Location     Type
  7208 ;;  clst            4   69[BANK0 ] unsigned long 
  7209 ;;  i               2   73[BANK0 ] unsigned short 
  7210 ;;  fs              2   67[BANK0 ] PTR struct .
  7211 ;;		 -> NULL(0), SDCard@fs(42), 
  7212 ;; Return value:  Size  Location     Type
  7213 ;;                  1    wreg      enum E43
  7214 ;; Registers used:
  7215 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7216 ;; Tracked objects:
  7217 ;;		On entry : 0/0
  7218 ;;		On exit  : 0/0
  7219 ;;		Unchanged: 0/0
  7220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7221 ;;      Params:         0       2       0       0       0       0       0       0       0
  7222 ;;      Locals:         0       8       0       0       0       0       0       0       0
  7223 ;;      Temps:          0       7       0       0       0       0       0       0       0
  7224 ;;      Totals:         0      17       0       0       0       0       0       0       0
  7225 ;;Total ram usage:       17 bytes
  7226 ;; Hardware stack levels used:    1
  7227 ;; Hardware stack levels required when called:    8
  7228 ;; This function calls:
  7229 ;;		_clust2sect
  7230 ;;		_get_fat
  7231 ;; This function is called by:
  7232 ;;		_dir_find
  7233 ;;		_dir_read
  7234 ;;		_pf_readdir
  7235 ;; This function uses a non-reentrant model
  7236 ;;
  7237                           
  7238                           	psect	text31
  7239  001818                     __ptext31:
  7240                           	opt stack 0
  7241  001818                     _dir_next:
  7242                           	opt stack 17
  7243                           
  7244                           ;pff.c: 469: DWORD clst;
  7245                           ;pff.c: 470: WORD i;
  7246                           ;pff.c: 471: FATFS *fs = FatFs;
  7247                           
  7248                           ; BSR set to: 0
  7249                           ;incstack = 0
  7250  001818  C035  F0A3         	movff	_FatFs,dir_next@fs
  7251  00181C  C036  F0A4         	movff	_FatFs+1,dir_next@fs+1
  7252                           
  7253                           ;pff.c: 474: i = dj->index + 1;
  7254  001820  C09A  FFD9         	movff	dir_next@dj,fsr2l
  7255  001824  C09B  FFDA         	movff	dir_next@dj+1,fsr2h
  7256  001828  CFDE F09C          	movff	postinc2,??_dir_next
  7257  00182C  CFDD F09D          	movff	postdec2,??_dir_next+1
  7258  001830  0E01               	movlw	1
  7259  001832  0100               	movlb	0	; () banked
  7260  001834  259C               	addwf	??_dir_next& (0+255),w,b
  7261  001836  6FA9               	movwf	dir_next@i& (0+255),b
  7262  001838  0E00               	movlw	0
  7263  00183A  219D               	addwfc	(??_dir_next+1)& (0+255),w,b
  7264  00183C  6FAA               	movwf	(dir_next@i+1)& (0+255),b
  7265                           
  7266                           ; BSR set to: 0
  7267                           ;pff.c: 475: if (!i || !dj->sect)
  7268  00183E  51A9               	movf	dir_next@i& (0+255),w,b
  7269  001840  11AA               	iorwf	(dir_next@i+1)& (0+255),w,b
  7270  001842  B4D8               	btfsc	status,2,c
  7271  001844  D00C               	goto	u7020
  7272                           
  7273                           ; BSR set to: 0
  7274  001846  EE20 F00C          	lfsr	2,12
  7275  00184A  519A               	movf	dir_next@dj& (0+255),w,b
  7276  00184C  26D9               	addwf	fsr2l,f,c
  7277  00184E  519B               	movf	(dir_next@dj+1)& (0+255),w,b
  7278  001850  22DA               	addwfc	fsr2h,f,c
  7279  001852  50DE               	movf	postinc2,w,c
  7280  001854  10DE               	iorwf	postinc2,w,c
  7281  001856  10DE               	iorwf	postinc2,w,c
  7282  001858  10DE               	iorwf	postinc2,w,c
  7283  00185A  A4D8               	btfss	status,2,c
  7284  00185C  D002               	goto	l877
  7285  00185E                     u7020:
  7286                           
  7287                           ; BSR set to: 0
  7288                           ;pff.c: 476: return FR_NO_FILE;
  7289                           
  7290                           ; BSR set to: 0
  7291  00185E  0E03               	movlw	3
  7292                           
  7293                           ; BSR set to: 0
  7294  001860  0012               	return	
  7295  001862                     l877:
  7296                           
  7297                           ; BSR set to: 0
  7298                           ;pff.c: 478: if (!(i % 16)) {
  7299                           
  7300                           ; BSR set to: 0
  7301  001862  0E0F               	movlw	15
  7302  001864  15A9               	andwf	dir_next@i& (0+255),w,b
  7303  001866  6F9C               	movwf	??_dir_next& (0+255),b
  7304  001868  0E00               	movlw	0
  7305  00186A  15AA               	andwf	(dir_next@i+1)& (0+255),w,b
  7306  00186C  6F9D               	movwf	(??_dir_next+1)& (0+255),b
  7307  00186E  519C               	movf	??_dir_next& (0+255),w,b
  7308  001870  119D               	iorwf	(??_dir_next+1)& (0+255),w,b
  7309  001872  A4D8               	btfss	status,2,c
  7310  001874  D0A5               	goto	l885
  7311                           
  7312                           ; BSR set to: 0
  7313                           ;pff.c: 479: dj->sect++;
  7314  001876  EE20 F00C          	lfsr	2,12
  7315  00187A  519A               	movf	dir_next@dj& (0+255),w,b
  7316  00187C  26D9               	addwf	fsr2l,f,c
  7317  00187E  519B               	movf	(dir_next@dj+1)& (0+255),w,b
  7318  001880  22DA               	addwfc	fsr2h,f,c
  7319  001882  2ADE               	incf	postinc2,f,c
  7320  001884  0E00               	movlw	0
  7321  001886  22DE               	addwfc	postinc2,f,c
  7322  001888  22DE               	addwfc	postinc2,f,c
  7323  00188A  22DE               	addwfc	postinc2,f,c
  7324                           
  7325                           ;pff.c: 481: if (dj->clust == 0) {
  7326  00188C  EE20 F008          	lfsr	2,8
  7327  001890  519A               	movf	dir_next@dj& (0+255),w,b
  7328  001892  26D9               	addwf	fsr2l,f,c
  7329  001894  519B               	movf	(dir_next@dj+1)& (0+255),w,b
  7330  001896  22DA               	addwfc	fsr2h,f,c
  7331  001898  50DE               	movf	postinc2,w,c
  7332  00189A  10DE               	iorwf	postinc2,w,c
  7333  00189C  10DE               	iorwf	postinc2,w,c
  7334  00189E  10DE               	iorwf	postinc2,w,c
  7335  0018A0  A4D8               	btfss	status,2,c
  7336  0018A2  D00E               	goto	l882
  7337                           
  7338                           ; BSR set to: 0
  7339                           ;pff.c: 482: if (i >= fs->n_rootdir)
  7340  0018A4  EE20 F004          	lfsr	2,4
  7341  0018A8  51A3               	movf	dir_next@fs& (0+255),w,b
  7342  0018AA  26D9               	addwf	fsr2l,f,c
  7343  0018AC  51A4               	movf	(dir_next@fs+1)& (0+255),w,b
  7344  0018AE  22DA               	addwfc	fsr2h,f,c
  7345  0018B0  50DE               	movf	postinc2,w,c
  7346  0018B2  5DA9               	subwf	dir_next@i& (0+255),w,b
  7347  0018B4  50DE               	movf	postinc2,w,c
  7348  0018B6  59AA               	subwfb	(dir_next@i+1)& (0+255),w,b
  7349  0018B8  A0D8               	btfss	status,0,c
  7350  0018BA  D082               	goto	l885
  7351                           
  7352                           ; BSR set to: 0
  7353                           ;pff.c: 483: return FR_NO_FILE;
  7354  0018BC  0E03               	movlw	3
  7355                           
  7356                           ; BSR set to: 0
  7357  0018BE  0012               	return	
  7358  0018C0                     l882:
  7359                           
  7360                           ; BSR set to: 0
  7361                           ;pff.c: 485: else {
  7362                           ;pff.c: 486: if (((i / 16) & (fs->csize - 1)) == 0) {
  7363                           
  7364                           ; BSR set to: 0
  7365  0018C0  C0A9  F09C         	movff	dir_next@i,??_dir_next
  7366  0018C4  C0AA  F09D         	movff	dir_next@i+1,??_dir_next+1
  7367  0018C8  0E04               	movlw	4
  7368  0018CA  6F9E               	movwf	(??_dir_next+2)& (0+255),b
  7369  0018CC                     u7065:
  7370  0018CC  90D8               	bcf	status,0,c
  7371  0018CE  339D               	rrcf	(??_dir_next+1)& (0+255),f,b
  7372  0018D0  339C               	rrcf	??_dir_next& (0+255),f,b
  7373  0018D2  2F9E               	decfsz	(??_dir_next+2)& (0+255),f,b
  7374  0018D4  D7FB               	goto	u7065
  7375  0018D6  0EFF               	movlw	255
  7376  0018D8  6F9F               	movwf	(??_dir_next+3)& (0+255),b
  7377  0018DA  0EFF               	movlw	255
  7378  0018DC  6FA0               	movwf	(??_dir_next+4)& (0+255),b
  7379  0018DE  EE20 F002          	lfsr	2,2
  7380  0018E2  51A3               	movf	dir_next@fs& (0+255),w,b
  7381  0018E4  26D9               	addwf	fsr2l,f,c
  7382  0018E6  51A4               	movf	(dir_next@fs+1)& (0+255),w,b
  7383  0018E8  22DA               	addwfc	fsr2h,f,c
  7384  0018EA  50DF               	movf	indf2,w,c
  7385  0018EC  6FA1               	movwf	(??_dir_next+5)& (0+255),b
  7386  0018EE  6BA2               	clrf	(??_dir_next+6)& (0+255),b
  7387  0018F0  519F               	movf	(??_dir_next+3)& (0+255),w,b
  7388  0018F2  27A1               	addwf	(??_dir_next+5)& (0+255),f,b
  7389  0018F4  51A0               	movf	(??_dir_next+4)& (0+255),w,b
  7390  0018F6  23A2               	addwfc	(??_dir_next+6)& (0+255),f,b
  7391  0018F8  519C               	movf	??_dir_next& (0+255),w,b
  7392  0018FA  17A1               	andwf	(??_dir_next+5)& (0+255),f,b
  7393  0018FC  519D               	movf	(??_dir_next+1)& (0+255),w,b
  7394  0018FE  17A2               	andwf	(??_dir_next+6)& (0+255),f,b
  7395  001900  51A1               	movf	(??_dir_next+5)& (0+255),w,b
  7396  001902  11A2               	iorwf	(??_dir_next+6)& (0+255),w,b
  7397  001904  A4D8               	btfss	status,2,c
  7398  001906  D05C               	goto	l885
  7399                           
  7400                           ; BSR set to: 0
  7401                           ;pff.c: 487: clst = get_fat(dj->clust);
  7402  001908  EE20 F008          	lfsr	2,8
  7403  00190C  519A               	movf	dir_next@dj& (0+255),w,b
  7404  00190E  26D9               	addwf	fsr2l,f,c
  7405  001910  519B               	movf	(dir_next@dj+1)& (0+255),w,b
  7406  001912  22DA               	addwfc	fsr2h,f,c
  7407  001914  CFDE F072          	movff	postinc2,get_fat@clst
  7408  001918  CFDE F073          	movff	postinc2,get_fat@clst+1
  7409  00191C  CFDE F074          	movff	postinc2,get_fat@clst+2
  7410  001920  CFDE F075          	movff	postinc2,get_fat@clst+3
  7411  001924  EC82  F005         	call	_get_fat	;wreg free
  7412  001928  C072  F0A5         	movff	?_get_fat,dir_next@clst
  7413  00192C  C073  F0A6         	movff	?_get_fat+1,dir_next@clst+1
  7414  001930  C074  F0A7         	movff	?_get_fat+2,dir_next@clst+2
  7415  001934  C075  F0A8         	movff	?_get_fat+3,dir_next@clst+3
  7416                           
  7417                           ;pff.c: 488: if (clst <= 1) return FR_DISK_ERR;
  7418  001938  0100               	movlb	0	; () banked
  7419  00193A  51A8               	movf	(dir_next@clst+3)& (0+255),w,b
  7420  00193C  11A7               	iorwf	(dir_next@clst+2)& (0+255),w,b
  7421  00193E  11A6               	iorwf	(dir_next@clst+1)& (0+255),w,b
  7422  001940  E106               	bnz	l6484
  7423  001942  0E02               	movlw	2
  7424  001944  5DA5               	subwf	dir_next@clst& (0+255),w,b
  7425  001946  B0D8               	btfsc	status,0,c
  7426  001948  D002               	goto	l886
  7427                           
  7428                           ; BSR set to: 0
  7429  00194A  0E01               	movlw	1
  7430                           
  7431                           ; BSR set to: 0
  7432  00194C  0012               	return	
  7433  00194E                     l886:
  7434  00194E                     l6484:
  7435                           
  7436                           ; BSR set to: 0
  7437                           ;pff.c: 489: if (clst >= fs->n_fatent)
  7438  00194E  EE20 F006          	lfsr	2,6
  7439  001952  51A3               	movf	dir_next@fs& (0+255),w,b
  7440  001954  26D9               	addwf	fsr2l,f,c
  7441  001956  51A4               	movf	(dir_next@fs+1)& (0+255),w,b
  7442  001958  22DA               	addwfc	fsr2h,f,c
  7443  00195A  50DE               	movf	postinc2,w,c
  7444  00195C  5DA5               	subwf	dir_next@clst& (0+255),w,b
  7445  00195E  50DE               	movf	postinc2,w,c
  7446  001960  59A6               	subwfb	(dir_next@clst+1)& (0+255),w,b
  7447  001962  50DE               	movf	postinc2,w,c
  7448  001964  59A7               	subwfb	(dir_next@clst+2)& (0+255),w,b
  7449  001966  50DE               	movf	postinc2,w,c
  7450  001968  59A8               	subwfb	(dir_next@clst+3)& (0+255),w,b
  7451  00196A  A0D8               	btfss	status,0,c
  7452  00196C  D002               	goto	l887
  7453                           
  7454                           ; BSR set to: 0
  7455                           ;pff.c: 490: return FR_NO_FILE;
  7456  00196E  0E03               	movlw	3
  7457                           
  7458                           ; BSR set to: 0
  7459  001970  0012               	return	
  7460  001972                     l887:
  7461                           
  7462                           ; BSR set to: 0
  7463                           ;pff.c: 491: dj->clust = clst;
  7464                           
  7465                           ; BSR set to: 0
  7466  001972  EE20 F008          	lfsr	2,8
  7467  001976  519A               	movf	dir_next@dj& (0+255),w,b
  7468  001978  26D9               	addwf	fsr2l,f,c
  7469  00197A  519B               	movf	(dir_next@dj+1)& (0+255),w,b
  7470  00197C  22DA               	addwfc	fsr2h,f,c
  7471  00197E  C0A5  FFDE         	movff	dir_next@clst,postinc2
  7472  001982  C0A6  FFDE         	movff	dir_next@clst+1,postinc2
  7473  001986  C0A7  FFDE         	movff	dir_next@clst+2,postinc2
  7474  00198A  C0A8  FFDE         	movff	dir_next@clst+3,postinc2
  7475                           
  7476                           ; BSR set to: 0
  7477                           ;pff.c: 492: dj->sect = clust2sect(clst);
  7478  00198E  C0A5  F026         	movff	dir_next@clst,clust2sect@clst
  7479  001992  C0A6  F027         	movff	dir_next@clst+1,clust2sect@clst+1
  7480  001996  C0A7  F028         	movff	dir_next@clst+2,clust2sect@clst+2
  7481  00199A  C0A8  F029         	movff	dir_next@clst+3,clust2sect@clst+3
  7482  00199E  ECC1  F013         	call	_clust2sect	;wreg free
  7483  0019A2  0100               	movlb	0	; () banked
  7484  0019A4  EE20 F00C          	lfsr	2,12
  7485  0019A8  519A               	movf	dir_next@dj& (0+255),w,b
  7486  0019AA  26D9               	addwf	fsr2l,f,c
  7487  0019AC  519B               	movf	(dir_next@dj+1)& (0+255),w,b
  7488  0019AE  22DA               	addwfc	fsr2h,f,c
  7489  0019B0  C026  FFDE         	movff	?_clust2sect,postinc2
  7490  0019B4  C027  FFDE         	movff	?_clust2sect+1,postinc2
  7491  0019B8  C028  FFDE         	movff	?_clust2sect+2,postinc2
  7492  0019BC  C029  FFDE         	movff	?_clust2sect+3,postinc2
  7493  0019C0                     l885:
  7494                           
  7495                           ; BSR set to: 0
  7496                           ;pff.c: 493: }
  7497                           ;pff.c: 494: }
  7498                           ;pff.c: 495: }
  7499                           ;pff.c: 497: dj->index = i;
  7500                           
  7501                           ; BSR set to: 0
  7502                           
  7503                           ; BSR set to: 0
  7504                           
  7505                           ; BSR set to: 0
  7506  0019C0  C09A  FFD9         	movff	dir_next@dj,fsr2l
  7507  0019C4  C09B  FFDA         	movff	dir_next@dj+1,fsr2h
  7508  0019C8  C0A9  FFDE         	movff	dir_next@i,postinc2
  7509  0019CC  C0AA  FFDD         	movff	dir_next@i+1,postdec2
  7510                           
  7511                           ; BSR set to: 0
  7512                           ;pff.c: 499: return FR_OK;
  7513  0019D0  0E00               	movlw	0
  7514  0019D2  0012               	return	
  7515  0019D4                     __end_of_dir_next:
  7516                           	opt stack 0
  7517                           tosu	equ	0xFFF
  7518                           tosh	equ	0xFFE
  7519                           tosl	equ	0xFFD
  7520                           pclath	equ	0xFFA
  7521                           tblptru	equ	0xFF8
  7522                           tblptrh	equ	0xFF7
  7523                           tblptrl	equ	0xFF6
  7524                           tablat	equ	0xFF5
  7525                           prodh	equ	0xFF4
  7526                           prodl	equ	0xFF3
  7527                           intcon	equ	0xFF2
  7528                           intcon2	equ	0xFF1
  7529                           intcon3	equ	0xFF0
  7530                           postinc0	equ	0xFEE
  7531                           wreg	equ	0xFE8
  7532                           indf1	equ	0xFE7
  7533                           postinc1	equ	0xFE6
  7534                           postdec1	equ	0xFE5
  7535                           fsr1h	equ	0xFE2
  7536                           fsr1l	equ	0xFE1
  7537                           indf2	equ	0xFDF
  7538                           postinc2	equ	0xFDE
  7539                           postdec2	equ	0xFDD
  7540                           plusw2	equ	0xFDB
  7541                           fsr2h	equ	0xFDA
  7542                           fsr2l	equ	0xFD9
  7543                           status	equ	0xFD8
  7544                           
  7545 ;; *************** function _get_fat *****************
  7546 ;; Defined at:
  7547 ;;		line 350 in file "pff.c"
  7548 ;; Parameters:    Size  Location     Type
  7549 ;;  clst            4   18[BANK0 ] unsigned long 
  7550 ;; Auto vars:     Size  Location     Type
  7551 ;;  bc              2   54[BANK0 ] unsigned int 
  7552 ;;  ofs             2   48[BANK0 ] unsigned int 
  7553 ;;  wc              2   46[BANK0 ] unsigned int 
  7554 ;;  buf             4   50[BANK0 ] unsigned char [4]
  7555 ;;  fs              2   56[BANK0 ] PTR struct .
  7556 ;;		 -> NULL(0), SDCard@fs(42), 
  7557 ;; Return value:  Size  Location     Type
  7558 ;;                  4   18[BANK0 ] unsigned long 
  7559 ;; Registers used:
  7560 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7561 ;; Tracked objects:
  7562 ;;		On entry : 0/0
  7563 ;;		On exit  : 0/0
  7564 ;;		Unchanged: 0/0
  7565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7566 ;;      Params:         0       4       0       0       0       0       0       0       0
  7567 ;;      Locals:         0      14       0       0       0       0       0       0       0
  7568 ;;      Temps:          0      22       0       0       0       0       0       0       0
  7569 ;;      Totals:         0      40       0       0       0       0       0       0       0
  7570 ;;Total ram usage:       40 bytes
  7571 ;; Hardware stack levels used:    1
  7572 ;; Hardware stack levels required when called:    7
  7573 ;; This function calls:
  7574 ;;		_disk_readp
  7575 ;; This function is called by:
  7576 ;;		_dir_next
  7577 ;;		_pf_read
  7578 ;;		_pf_write
  7579 ;;		_pf_lseek
  7580 ;; This function uses a non-reentrant model
  7581 ;;
  7582                           
  7583                           	psect	text32
  7584  000B04                     __ptext32:
  7585                           	opt stack 0
  7586  000B04                     _get_fat:
  7587                           	opt stack 20
  7588                           
  7589                           ;pff.c: 354: BYTE buf[4];
  7590                           ;pff.c: 355: FATFS *fs = FatFs;
  7591                           
  7592                           ; BSR set to: 0
  7593                           ;incstack = 0
  7594  000B04  C035  F098         	movff	_FatFs,get_fat@fs
  7595  000B08  C036  F099         	movff	_FatFs+1,get_fat@fs+1
  7596                           
  7597                           ;pff.c: 357: if (clst < 2 || clst >= fs->n_fatent)
  7598  000B0C  0100               	movlb	0	; () banked
  7599  000B0E  5175               	movf	(get_fat@clst+3)& (0+255),w,b
  7600  000B10  1174               	iorwf	(get_fat@clst+2)& (0+255),w,b
  7601  000B12  1173               	iorwf	(get_fat@clst+1)& (0+255),w,b
  7602  000B14  E104               	bnz	u6800
  7603  000B16  0E02               	movlw	2
  7604  000B18  5D72               	subwf	get_fat@clst& (0+255),w,b
  7605  000B1A  A0D8               	btfss	status,0,c
  7606  000B1C  D010               	goto	u6810
  7607  000B1E                     u6800:
  7608                           
  7609                           ; BSR set to: 0
  7610  000B1E  EE20 F006          	lfsr	2,6
  7611  000B22  5198               	movf	get_fat@fs& (0+255),w,b
  7612  000B24  26D9               	addwf	fsr2l,f,c
  7613  000B26  5199               	movf	(get_fat@fs+1)& (0+255),w,b
  7614  000B28  22DA               	addwfc	fsr2h,f,c
  7615  000B2A  50DE               	movf	postinc2,w,c
  7616  000B2C  5D72               	subwf	get_fat@clst& (0+255),w,b
  7617  000B2E  50DE               	movf	postinc2,w,c
  7618  000B30  5973               	subwfb	(get_fat@clst+1)& (0+255),w,b
  7619  000B32  50DE               	movf	postinc2,w,c
  7620  000B34  5974               	subwfb	(get_fat@clst+2)& (0+255),w,b
  7621  000B36  50DE               	movf	postinc2,w,c
  7622  000B38  5975               	subwfb	(get_fat@clst+3)& (0+255),w,b
  7623  000B3A  A0D8               	btfss	status,0,c
  7624  000B3C  D1BD               	goto	l836
  7625  000B3E                     u6810:
  7626                           
  7627                           ; BSR set to: 0
  7628                           ;pff.c: 358: return 1;
  7629                           
  7630                           ; BSR set to: 0
  7631  000B3E  0E01               	movlw	1
  7632  000B40  6F72               	movwf	?_get_fat& (0+255),b
  7633  000B42  0E00               	movlw	0
  7634  000B44  6F73               	movwf	(?_get_fat+1)& (0+255),b
  7635  000B46  0E00               	movlw	0
  7636  000B48  6F74               	movwf	(?_get_fat+2)& (0+255),b
  7637  000B4A  0E00               	movlw	0
  7638  000B4C  6F75               	movwf	(?_get_fat+3)& (0+255),b
  7639                           
  7640                           ; BSR set to: 0
  7641  000B4E  0012               	return	
  7642  000B50                     l837:
  7643                           
  7644                           ; BSR set to: 0
  7645                           ;pff.c: 363: UINT wc, bc, ofs;
  7646                           ;pff.c: 365: bc = (UINT)clst; bc += bc / 2;
  7647  000B50  C072  F096         	movff	get_fat@clst,get_fat@bc
  7648  000B54  C073  F097         	movff	get_fat@clst+1,get_fat@bc+1
  7649                           
  7650                           ; BSR set to: 0
  7651  000B58  90D8               	bcf	status,0,c
  7652  000B5A  3197               	rrcf	(get_fat@bc+1)& (0+255),w,b
  7653  000B5C  6F77               	movwf	(??_get_fat+1)& (0+255),b
  7654  000B5E  3196               	rrcf	get_fat@bc& (0+255),w,b
  7655  000B60  6F76               	movwf	??_get_fat& (0+255),b
  7656  000B62  5176               	movf	??_get_fat& (0+255),w,b
  7657  000B64  2796               	addwf	get_fat@bc& (0+255),f,b
  7658  000B66  5177               	movf	(??_get_fat+1)& (0+255),w,b
  7659  000B68  2397               	addwfc	(get_fat@bc+1)& (0+255),f,b
  7660                           
  7661                           ;pff.c: 366: ofs = bc % 512; bc /= 512;
  7662  000B6A  0EFF               	movlw	255
  7663  000B6C  1596               	andwf	get_fat@bc& (0+255),w,b
  7664  000B6E  6F90               	movwf	get_fat@ofs& (0+255),b
  7665  000B70  0E01               	movlw	1
  7666  000B72  1597               	andwf	(get_fat@bc+1)& (0+255),w,b
  7667  000B74  6F91               	movwf	(get_fat@ofs+1)& (0+255),b
  7668  000B76  0E09               	movlw	9
  7669  000B78  6F76               	movwf	??_get_fat& (0+255),b
  7670  000B7A                     u6825:
  7671  000B7A  90D8               	bcf	status,0,c
  7672  000B7C  3397               	rrcf	(get_fat@bc+1)& (0+255),f,b
  7673  000B7E  3396               	rrcf	get_fat@bc& (0+255),f,b
  7674  000B80  2F76               	decfsz	??_get_fat& (0+255),f,b
  7675  000B82  D7FB               	goto	u6825
  7676                           
  7677                           ;pff.c: 367: if (ofs != 511) {
  7678  000B84  2990               	incf	get_fat@ofs& (0+255),w,b
  7679  000B86  E103               	bnz	u6830
  7680  000B88  0591               	decf	(get_fat@ofs+1)& (0+255),w,b
  7681  000B8A  B4D8               	btfsc	status,2,c
  7682  000B8C  D02C               	goto	l838
  7683  000B8E                     u6830:
  7684                           
  7685                           ; BSR set to: 0
  7686                           ;pff.c: 368: if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
  7687  000B8E  0E92               	movlw	low get_fat@buf
  7688  000B90  6F60               	movwf	disk_readp@rd& (0+255),b
  7689  000B92  0E00               	movlw	high get_fat@buf
  7690  000B94  6F61               	movwf	(disk_readp@rd+1)& (0+255),b
  7691  000B96  EE20 F00A          	lfsr	2,10
  7692  000B9A  5198               	movf	get_fat@fs& (0+255),w,b
  7693  000B9C  26D9               	addwf	fsr2l,f,c
  7694  000B9E  5199               	movf	(get_fat@fs+1)& (0+255),w,b
  7695  000BA0  22DA               	addwfc	fsr2h,f,c
  7696  000BA2  CFDE F076          	movff	postinc2,??_get_fat
  7697  000BA6  CFDE F077          	movff	postinc2,??_get_fat+1
  7698  000BAA  CFDE F078          	movff	postinc2,??_get_fat+2
  7699  000BAE  CFDE F079          	movff	postinc2,??_get_fat+3
  7700  000BB2  5196               	movf	get_fat@bc& (0+255),w,b
  7701  000BB4  2576               	addwf	??_get_fat& (0+255),w,b
  7702  000BB6  6F62               	movwf	disk_readp@sector& (0+255),b
  7703  000BB8  5197               	movf	(get_fat@bc+1)& (0+255),w,b
  7704  000BBA  2177               	addwfc	(??_get_fat+1)& (0+255),w,b
  7705  000BBC  6F63               	movwf	(disk_readp@sector+1)& (0+255),b
  7706  000BBE  0E00               	movlw	0
  7707  000BC0  2178               	addwfc	(??_get_fat+2)& (0+255),w,b
  7708  000BC2  6F64               	movwf	(disk_readp@sector+2)& (0+255),b
  7709  000BC4  0E00               	movlw	0
  7710  000BC6  2179               	addwfc	(??_get_fat+3)& (0+255),w,b
  7711  000BC8  6F65               	movwf	(disk_readp@sector+3)& (0+255),b
  7712  000BCA  C090  F066         	movff	get_fat@ofs,disk_readp@offset
  7713  000BCE  C091  F067         	movff	get_fat@ofs+1,disk_readp@offset+1
  7714  000BD2  0E00               	movlw	0
  7715  000BD4  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  7716  000BD6  0E02               	movlw	2
  7717  000BD8  6F68               	movwf	disk_readp@count& (0+255),b
  7718  000BDA  EC3C  F009         	call	_disk_readp	;wreg free
  7719  000BDE  0900               	iorlw	0
  7720  000BE0  A4D8               	btfss	status,2,c
  7721  000BE2  D178               	goto	l840
  7722  000BE4  D061               	goto	l843
  7723  000BE6                     l838:
  7724                           
  7725                           ;pff.c: 370: if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
  7726  000BE6  0E92               	movlw	low get_fat@buf
  7727  000BE8  0100               	movlb	0	; () banked
  7728  000BEA  6F60               	movwf	disk_readp@rd& (0+255),b
  7729  000BEC  0E00               	movlw	high get_fat@buf
  7730  000BEE  6F61               	movwf	(disk_readp@rd+1)& (0+255),b
  7731  000BF0  EE20 F00A          	lfsr	2,10
  7732  000BF4  5198               	movf	get_fat@fs& (0+255),w,b
  7733  000BF6  26D9               	addwf	fsr2l,f,c
  7734  000BF8  5199               	movf	(get_fat@fs+1)& (0+255),w,b
  7735  000BFA  22DA               	addwfc	fsr2h,f,c
  7736  000BFC  CFDE F076          	movff	postinc2,??_get_fat
  7737  000C00  CFDE F077          	movff	postinc2,??_get_fat+1
  7738  000C04  CFDE F078          	movff	postinc2,??_get_fat+2
  7739  000C08  CFDE F079          	movff	postinc2,??_get_fat+3
  7740  000C0C  5196               	movf	get_fat@bc& (0+255),w,b
  7741  000C0E  2576               	addwf	??_get_fat& (0+255),w,b
  7742  000C10  6F62               	movwf	disk_readp@sector& (0+255),b
  7743  000C12  5197               	movf	(get_fat@bc+1)& (0+255),w,b
  7744  000C14  2177               	addwfc	(??_get_fat+1)& (0+255),w,b
  7745  000C16  6F63               	movwf	(disk_readp@sector+1)& (0+255),b
  7746  000C18  0E00               	movlw	0
  7747  000C1A  2178               	addwfc	(??_get_fat+2)& (0+255),w,b
  7748  000C1C  6F64               	movwf	(disk_readp@sector+2)& (0+255),b
  7749  000C1E  0E00               	movlw	0
  7750  000C20  2179               	addwfc	(??_get_fat+3)& (0+255),w,b
  7751  000C22  6F65               	movwf	(disk_readp@sector+3)& (0+255),b
  7752  000C24  0E01               	movlw	1
  7753  000C26  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
  7754  000C28  6966               	setf	disk_readp@offset& (0+255),b
  7755  000C2A  0E00               	movlw	0
  7756  000C2C  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  7757  000C2E  0E01               	movlw	1
  7758  000C30  6F68               	movwf	disk_readp@count& (0+255),b
  7759  000C32  EC3C  F009         	call	_disk_readp	;wreg free
  7760  000C36  0900               	iorlw	0
  7761  000C38  A4D8               	btfss	status,2,c
  7762  000C3A  D14C               	goto	l840
  7763                           
  7764                           ;pff.c: 371: if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
  7765  000C3C  0E93               	movlw	low (get_fat@buf+1)
  7766  000C3E  0100               	movlb	0	; () banked
  7767  000C40  6F60               	movwf	disk_readp@rd& (0+255),b
  7768  000C42  0E00               	movlw	high (get_fat@buf+1)
  7769  000C44  6F61               	movwf	(disk_readp@rd+1)& (0+255),b
  7770  000C46  EE20 F00A          	lfsr	2,10
  7771  000C4A  5198               	movf	get_fat@fs& (0+255),w,b
  7772  000C4C  26D9               	addwf	fsr2l,f,c
  7773  000C4E  5199               	movf	(get_fat@fs+1)& (0+255),w,b
  7774  000C50  22DA               	addwfc	fsr2h,f,c
  7775  000C52  CFDE F076          	movff	postinc2,??_get_fat
  7776  000C56  CFDE F077          	movff	postinc2,??_get_fat+1
  7777  000C5A  CFDE F078          	movff	postinc2,??_get_fat+2
  7778  000C5E  CFDE F079          	movff	postinc2,??_get_fat+3
  7779  000C62  5196               	movf	get_fat@bc& (0+255),w,b
  7780  000C64  2576               	addwf	??_get_fat& (0+255),w,b
  7781  000C66  6F7A               	movwf	(??_get_fat+4)& (0+255),b
  7782  000C68  5197               	movf	(get_fat@bc+1)& (0+255),w,b
  7783  000C6A  2177               	addwfc	(??_get_fat+1)& (0+255),w,b
  7784  000C6C  6F7B               	movwf	(??_get_fat+5)& (0+255),b
  7785  000C6E  0E00               	movlw	0
  7786  000C70  2178               	addwfc	(??_get_fat+2)& (0+255),w,b
  7787  000C72  6F7C               	movwf	(??_get_fat+6)& (0+255),b
  7788  000C74  0E00               	movlw	0
  7789  000C76  2179               	addwfc	(??_get_fat+3)& (0+255),w,b
  7790  000C78  6F7D               	movwf	(??_get_fat+7)& (0+255),b
  7791  000C7A  0E01               	movlw	1
  7792  000C7C  257A               	addwf	(??_get_fat+4)& (0+255),w,b
  7793  000C7E  6F62               	movwf	disk_readp@sector& (0+255),b
  7794  000C80  0E00               	movlw	0
  7795  000C82  217B               	addwfc	(??_get_fat+5)& (0+255),w,b
  7796  000C84  6F63               	movwf	(disk_readp@sector+1)& (0+255),b
  7797  000C86  0E00               	movlw	0
  7798  000C88  217C               	addwfc	(??_get_fat+6)& (0+255),w,b
  7799  000C8A  6F64               	movwf	(disk_readp@sector+2)& (0+255),b
  7800  000C8C  0E00               	movlw	0
  7801  000C8E  217D               	addwfc	(??_get_fat+7)& (0+255),w,b
  7802  000C90  6F65               	movwf	(disk_readp@sector+3)& (0+255),b
  7803  000C92  0E00               	movlw	0
  7804  000C94  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
  7805  000C96  0E00               	movlw	0
  7806  000C98  6F66               	movwf	disk_readp@offset& (0+255),b
  7807  000C9A  0E00               	movlw	0
  7808  000C9C  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  7809  000C9E  0E01               	movlw	1
  7810  000CA0  6F68               	movwf	disk_readp@count& (0+255),b
  7811  000CA2  EC3C  F009         	call	_disk_readp	;wreg free
  7812  000CA6  D79B               	goto	L1
  7813  000CA8                     l843:
  7814                           
  7815                           ;pff.c: 372: }
  7816                           ;pff.c: 373: wc = (WORD)(((WORD)*((BYTE*)(buf)+1)<<8)|(WORD)*(BYTE*)(buf));
  7817  000CA8  0100               	movlb	0	; () banked
  7818  000CAA  5193               	movf	(get_fat@buf+1)& (0+255),w,b
  7819  000CAC  6F76               	movwf	??_get_fat& (0+255),b
  7820  000CAE  5192               	movf	get_fat@buf& (0+255),w,b
  7821  000CB0  6F8E               	movwf	get_fat@wc& (0+255),b
  7822  000CB2  C076  F08F         	movff	??_get_fat,get_fat@wc+1
  7823                           
  7824                           ; BSR set to: 0
  7825                           ;pff.c: 374: return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  7826  000CB6  B172               	btfsc	get_fat@clst& (0+255),0,b
  7827  000CB8  D007               	goto	l845
  7828                           
  7829                           ; BSR set to: 0
  7830  000CBA  0EFF               	movlw	255
  7831  000CBC  158E               	andwf	get_fat@wc& (0+255),w,b
  7832  000CBE  6F8C               	movwf	_get_fat$1962& (0+255),b
  7833  000CC0  0E0F               	movlw	15
  7834  000CC2  158F               	andwf	(get_fat@wc+1)& (0+255),w,b
  7835  000CC4  6F8D               	movwf	(_get_fat$1962+1)& (0+255),b
  7836  000CC6  D00F               	goto	l847
  7837  000CC8                     l845:
  7838                           
  7839                           ; BSR set to: 0
  7840                           
  7841                           ; BSR set to: 0
  7842  000CC8  C08E  F076         	movff	get_fat@wc,??_get_fat
  7843  000CCC  C08F  F077         	movff	get_fat@wc+1,??_get_fat+1
  7844  000CD0  0E04               	movlw	4
  7845  000CD2  6F78               	movwf	(??_get_fat+2)& (0+255),b
  7846  000CD4                     u6885:
  7847  000CD4  90D8               	bcf	status,0,c
  7848  000CD6  3377               	rrcf	(??_get_fat+1)& (0+255),f,b
  7849  000CD8  3376               	rrcf	??_get_fat& (0+255),f,b
  7850  000CDA  2F78               	decfsz	(??_get_fat+2)& (0+255),f,b
  7851  000CDC  D7FB               	goto	u6885
  7852  000CDE  C076  F08C         	movff	??_get_fat,_get_fat$1962
  7853  000CE2  C077  F08D         	movff	??_get_fat+1,_get_fat$1962+1
  7854  000CE6                     l847:
  7855                           
  7856                           ; BSR set to: 0
  7857                           
  7858                           ; BSR set to: 0
  7859  000CE6  C08C  F072         	movff	_get_fat$1962,?_get_fat
  7860  000CEA  C08D  F073         	movff	_get_fat$1962+1,?_get_fat+1
  7861  000CEE  6B74               	clrf	(?_get_fat+2)& (0+255),b
  7862  000CF0  6B75               	clrf	(?_get_fat+3)& (0+255),b
  7863                           
  7864                           ; BSR set to: 0
  7865  000CF2  0012               	return	
  7866  000CF4                     
  7867                           ; BSR set to: 0
  7868                           ;pff.c: 379: if (disk_readp(buf, fs->fatbase + clst / 256, ((UINT)clst % 256) * 2, 2)) b
      +                          reak;
  7869                           
  7870                           ; BSR set to: 0
  7871  000CF4  0E92               	movlw	low get_fat@buf
  7872  000CF6  6F60               	movwf	disk_readp@rd& (0+255),b
  7873  000CF8  0E00               	movlw	high get_fat@buf
  7874  000CFA  6F61               	movwf	(disk_readp@rd+1)& (0+255),b
  7875  000CFC  EE20 F00A          	lfsr	2,10
  7876  000D00  5198               	movf	get_fat@fs& (0+255),w,b
  7877  000D02  26D9               	addwf	fsr2l,f,c
  7878  000D04  5199               	movf	(get_fat@fs+1)& (0+255),w,b
  7879  000D06  22DA               	addwfc	fsr2h,f,c
  7880  000D08  CFDE F076          	movff	postinc2,??_get_fat
  7881  000D0C  CFDE F077          	movff	postinc2,??_get_fat+1
  7882  000D10  CFDE F078          	movff	postinc2,??_get_fat+2
  7883  000D14  CFDE F079          	movff	postinc2,??_get_fat+3
  7884  000D18  C072  F07A         	movff	get_fat@clst,??_get_fat+4
  7885  000D1C  C073  F07B         	movff	get_fat@clst+1,??_get_fat+5
  7886  000D20  C074  F07C         	movff	get_fat@clst+2,??_get_fat+6
  7887  000D24  C075  F07D         	movff	get_fat@clst+3,??_get_fat+7
  7888  000D28  C07B  F07A         	movff	??_get_fat+5,??_get_fat+4
  7889  000D2C  C07C  F07B         	movff	??_get_fat+6,??_get_fat+5
  7890  000D30  C07D  F07C         	movff	??_get_fat+7,??_get_fat+6
  7891  000D34  6B7D               	clrf	(??_get_fat+7)& (0+255),b
  7892  000D36  5176               	movf	??_get_fat& (0+255),w,b
  7893  000D38  257A               	addwf	(??_get_fat+4)& (0+255),w,b
  7894  000D3A  6F62               	movwf	disk_readp@sector& (0+255),b
  7895  000D3C  5177               	movf	(??_get_fat+1)& (0+255),w,b
  7896  000D3E  217B               	addwfc	(??_get_fat+5)& (0+255),w,b
  7897  000D40  6F63               	movwf	(disk_readp@sector+1)& (0+255),b
  7898  000D42  5178               	movf	(??_get_fat+2)& (0+255),w,b
  7899  000D44  217C               	addwfc	(??_get_fat+6)& (0+255),w,b
  7900  000D46  6F64               	movwf	(disk_readp@sector+2)& (0+255),b
  7901  000D48  5179               	movf	(??_get_fat+3)& (0+255),w,b
  7902  000D4A  217D               	addwfc	(??_get_fat+7)& (0+255),w,b
  7903  000D4C  6F65               	movwf	(disk_readp@sector+3)& (0+255),b
  7904  000D4E  0EFF               	movlw	255
  7905  000D50  1572               	andwf	get_fat@clst& (0+255),w,b
  7906  000D52  6F7E               	movwf	(??_get_fat+8)& (0+255),b
  7907  000D54  0E00               	movlw	0
  7908  000D56  1573               	andwf	(get_fat@clst+1)& (0+255),w,b
  7909  000D58  6F7F               	movwf	(??_get_fat+9)& (0+255),b
  7910  000D5A  90D8               	bcf	status,0,c
  7911  000D5C  357E               	rlcf	(??_get_fat+8)& (0+255),w,b
  7912  000D5E  6F66               	movwf	disk_readp@offset& (0+255),b
  7913  000D60  357F               	rlcf	(??_get_fat+9)& (0+255),w,b
  7914  000D62  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
  7915  000D64  0E00               	movlw	0
  7916  000D66  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  7917  000D68  0E02               	movlw	2
  7918  000D6A  6F68               	movwf	disk_readp@count& (0+255),b
  7919  000D6C  EC3C  F009         	call	_disk_readp	;wreg free
  7920  000D70  0900               	iorlw	0
  7921  000D72  A4D8               	btfss	status,2,c
  7922  000D74  D0AF               	goto	l840
  7923                           
  7924                           ;pff.c: 380: return (WORD)(((WORD)*((BYTE*)(buf)+1)<<8)|(WORD)*(BYTE*)(buf));
  7925  000D76  0100               	movlb	0	; () banked
  7926  000D78  5192               	movf	get_fat@buf& (0+255),w,b
  7927  000D7A  C093  F076         	movff	get_fat@buf+1,??_get_fat
  7928  000D7E  6B77               	clrf	(??_get_fat+1)& (0+255),b
  7929  000D80  C076  F077         	movff	??_get_fat,??_get_fat+1
  7930  000D84  6B76               	clrf	??_get_fat& (0+255),b
  7931  000D86  1376               	iorwf	??_get_fat& (0+255),f,b
  7932  000D88  0E00               	movlw	0
  7933  000D8A  1377               	iorwf	(??_get_fat+1)& (0+255),f,b
  7934  000D8C  C076  F072         	movff	??_get_fat,?_get_fat
  7935  000D90  C077  F073         	movff	??_get_fat+1,?_get_fat+1
  7936  000D94  6B74               	clrf	(?_get_fat+2)& (0+255),b
  7937  000D96  6B75               	clrf	(?_get_fat+3)& (0+255),b
  7938                           
  7939                           ; BSR set to: 0
  7940  000D98  0012               	return	
  7941  000D9A                     
  7942                           ; BSR set to: 0
  7943                           ;pff.c: 384: if (disk_readp(buf, fs->fatbase + clst / 128, ((UINT)clst % 128) * 4, 4)) b
      +                          reak;
  7944                           
  7945                           ; BSR set to: 0
  7946  000D9A  0E92               	movlw	low get_fat@buf
  7947  000D9C  6F60               	movwf	disk_readp@rd& (0+255),b
  7948  000D9E  0E00               	movlw	high get_fat@buf
  7949  000DA0  6F61               	movwf	(disk_readp@rd+1)& (0+255),b
  7950  000DA2  EE20 F00A          	lfsr	2,10
  7951  000DA6  5198               	movf	get_fat@fs& (0+255),w,b
  7952  000DA8  26D9               	addwf	fsr2l,f,c
  7953  000DAA  5199               	movf	(get_fat@fs+1)& (0+255),w,b
  7954  000DAC  22DA               	addwfc	fsr2h,f,c
  7955  000DAE  CFDE F076          	movff	postinc2,??_get_fat
  7956  000DB2  CFDE F077          	movff	postinc2,??_get_fat+1
  7957  000DB6  CFDE F078          	movff	postinc2,??_get_fat+2
  7958  000DBA  CFDE F079          	movff	postinc2,??_get_fat+3
  7959  000DBE  C072  F07A         	movff	get_fat@clst,??_get_fat+4
  7960  000DC2  C073  F07B         	movff	get_fat@clst+1,??_get_fat+5
  7961  000DC6  C074  F07C         	movff	get_fat@clst+2,??_get_fat+6
  7962  000DCA  C075  F07D         	movff	get_fat@clst+3,??_get_fat+7
  7963  000DCE  0E08               	movlw	8
  7964  000DD0  D005               	goto	u6900
  7965  000DD2                     u6905:
  7966  000DD2  90D8               	bcf	status,0,c
  7967  000DD4  337D               	rrcf	(??_get_fat+7)& (0+255),f,b
  7968  000DD6  337C               	rrcf	(??_get_fat+6)& (0+255),f,b
  7969  000DD8  337B               	rrcf	(??_get_fat+5)& (0+255),f,b
  7970  000DDA  337A               	rrcf	(??_get_fat+4)& (0+255),f,b
  7971  000DDC                     u6900:
  7972  000DDC  2EE8               	decfsz	wreg,f,c
  7973  000DDE  D7F9               	goto	u6905
  7974  000DE0  5176               	movf	??_get_fat& (0+255),w,b
  7975  000DE2  257A               	addwf	(??_get_fat+4)& (0+255),w,b
  7976  000DE4  6F62               	movwf	disk_readp@sector& (0+255),b
  7977  000DE6  5177               	movf	(??_get_fat+1)& (0+255),w,b
  7978  000DE8  217B               	addwfc	(??_get_fat+5)& (0+255),w,b
  7979  000DEA  6F63               	movwf	(disk_readp@sector+1)& (0+255),b
  7980  000DEC  5178               	movf	(??_get_fat+2)& (0+255),w,b
  7981  000DEE  217C               	addwfc	(??_get_fat+6)& (0+255),w,b
  7982  000DF0  6F64               	movwf	(disk_readp@sector+2)& (0+255),b
  7983  000DF2  5179               	movf	(??_get_fat+3)& (0+255),w,b
  7984  000DF4  217D               	addwfc	(??_get_fat+7)& (0+255),w,b
  7985  000DF6  6F65               	movwf	(disk_readp@sector+3)& (0+255),b
  7986  000DF8  0E7F               	movlw	127
  7987  000DFA  1572               	andwf	get_fat@clst& (0+255),w,b
  7988  000DFC  6F7E               	movwf	(??_get_fat+8)& (0+255),b
  7989  000DFE  0E00               	movlw	0
  7990  000E00  1573               	andwf	(get_fat@clst+1)& (0+255),w,b
  7991  000E02  6F7F               	movwf	(??_get_fat+9)& (0+255),b
  7992  000E04  90D8               	bcf	status,0,c
  7993  000E06  377E               	rlcf	(??_get_fat+8)& (0+255),f,b
  7994  000E08  377F               	rlcf	(??_get_fat+9)& (0+255),f,b
  7995  000E0A  90D8               	bcf	status,0,c
  7996  000E0C  377E               	rlcf	(??_get_fat+8)& (0+255),f,b
  7997  000E0E  377F               	rlcf	(??_get_fat+9)& (0+255),f,b
  7998  000E10  C07E  F066         	movff	??_get_fat+8,disk_readp@offset
  7999  000E14  C07F  F067         	movff	??_get_fat+9,disk_readp@offset+1
  8000  000E18  0E00               	movlw	0
  8001  000E1A  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  8002  000E1C  0E04               	movlw	4
  8003  000E1E  6F68               	movwf	disk_readp@count& (0+255),b
  8004  000E20  EC3C  F009         	call	_disk_readp	;wreg free
  8005  000E24  0900               	iorlw	0
  8006  000E26  A4D8               	btfss	status,2,c
  8007  000E28  D055               	goto	l840
  8008                           
  8009                           ;pff.c: 385: return (DWORD)(((DWORD)*((BYTE*)(buf)+3)<<24)|((DWORD)*((BYTE*)(buf)+2)<<16
      +                          )|((WORD)*((BYTE*)(buf)+1)<<8)|*(BYTE*)(buf)) & 0x0FFFFFFF;
  8010  000E2A  0100               	movlb	0	; () banked
  8011  000E2C  5193               	movf	(get_fat@buf+1)& (0+255),w,b
  8012  000E2E  6F77               	movwf	(??_get_fat+1)& (0+255),b
  8013  000E30  6B76               	clrf	??_get_fat& (0+255),b
  8014  000E32  C094  F078         	movff	get_fat@buf+2,??_get_fat+2
  8015  000E36  6B79               	clrf	(??_get_fat+3)& (0+255),b
  8016  000E38  6B7A               	clrf	(??_get_fat+4)& (0+255),b
  8017  000E3A  6B7B               	clrf	(??_get_fat+5)& (0+255),b
  8018  000E3C  C079  F07B         	movff	??_get_fat+3,??_get_fat+5
  8019  000E40  C078  F07A         	movff	??_get_fat+2,??_get_fat+4
  8020  000E44  6B79               	clrf	(??_get_fat+3)& (0+255),b
  8021  000E46  6B78               	clrf	(??_get_fat+2)& (0+255),b
  8022  000E48  C095  F07C         	movff	get_fat@buf+3,??_get_fat+6
  8023  000E4C  6B7D               	clrf	(??_get_fat+7)& (0+255),b
  8024  000E4E  6B7E               	clrf	(??_get_fat+8)& (0+255),b
  8025  000E50  6B7F               	clrf	(??_get_fat+9)& (0+255),b
  8026  000E52  C07C  F07F         	movff	??_get_fat+6,??_get_fat+9
  8027  000E56  6B7E               	clrf	(??_get_fat+8)& (0+255),b
  8028  000E58  6B7D               	clrf	(??_get_fat+7)& (0+255),b
  8029  000E5A  6B7C               	clrf	(??_get_fat+6)& (0+255),b
  8030  000E5C  5178               	movf	(??_get_fat+2)& (0+255),w,b
  8031  000E5E  117C               	iorwf	(??_get_fat+6)& (0+255),w,b
  8032  000E60  6F80               	movwf	(??_get_fat+10)& (0+255),b
  8033  000E62  5179               	movf	(??_get_fat+3)& (0+255),w,b
  8034  000E64  117D               	iorwf	(??_get_fat+7)& (0+255),w,b
  8035  000E66  6F81               	movwf	(??_get_fat+11)& (0+255),b
  8036  000E68  517A               	movf	(??_get_fat+4)& (0+255),w,b
  8037  000E6A  117E               	iorwf	(??_get_fat+8)& (0+255),w,b
  8038  000E6C  6F82               	movwf	(??_get_fat+12)& (0+255),b
  8039  000E6E  517B               	movf	(??_get_fat+5)& (0+255),w,b
  8040  000E70  117F               	iorwf	(??_get_fat+9)& (0+255),w,b
  8041  000E72  6F83               	movwf	(??_get_fat+13)& (0+255),b
  8042  000E74  5176               	movf	??_get_fat& (0+255),w,b
  8043  000E76  1180               	iorwf	(??_get_fat+10)& (0+255),w,b
  8044  000E78  6F84               	movwf	(??_get_fat+14)& (0+255),b
  8045  000E7A  5177               	movf	(??_get_fat+1)& (0+255),w,b
  8046  000E7C  1181               	iorwf	(??_get_fat+11)& (0+255),w,b
  8047  000E7E  6F85               	movwf	(??_get_fat+15)& (0+255),b
  8048  000E80  0E00               	movlw	0
  8049  000E82  1182               	iorwf	(??_get_fat+12)& (0+255),w,b
  8050  000E84  6F86               	movwf	(??_get_fat+16)& (0+255),b
  8051  000E86  0E00               	movlw	0
  8052  000E88  1183               	iorwf	(??_get_fat+13)& (0+255),w,b
  8053  000E8A  6F87               	movwf	(??_get_fat+17)& (0+255),b
  8054  000E8C  5192               	movf	get_fat@buf& (0+255),w,b
  8055  000E8E  1184               	iorwf	(??_get_fat+14)& (0+255),w,b
  8056  000E90  6F88               	movwf	(??_get_fat+18)& (0+255),b
  8057  000E92  5185               	movf	(??_get_fat+15)& (0+255),w,b
  8058  000E94  6F89               	movwf	(??_get_fat+19)& (0+255),b
  8059  000E96  5186               	movf	(??_get_fat+16)& (0+255),w,b
  8060  000E98  6F8A               	movwf	(??_get_fat+20)& (0+255),b
  8061  000E9A  5187               	movf	(??_get_fat+17)& (0+255),w,b
  8062  000E9C  6F8B               	movwf	(??_get_fat+21)& (0+255),b
  8063  000E9E  0EFF               	movlw	255
  8064  000EA0  1588               	andwf	(??_get_fat+18)& (0+255),w,b
  8065  000EA2  6F72               	movwf	?_get_fat& (0+255),b
  8066  000EA4  0EFF               	movlw	255
  8067  000EA6  1589               	andwf	(??_get_fat+19)& (0+255),w,b
  8068  000EA8  6F73               	movwf	(?_get_fat+1)& (0+255),b
  8069  000EAA  0EFF               	movlw	255
  8070  000EAC  158A               	andwf	(??_get_fat+20)& (0+255),w,b
  8071  000EAE  6F74               	movwf	(?_get_fat+2)& (0+255),b
  8072  000EB0  0E0F               	movlw	15
  8073  000EB2  158B               	andwf	(??_get_fat+21)& (0+255),w,b
  8074  000EB4  6F75               	movwf	(?_get_fat+3)& (0+255),b
  8075                           
  8076                           ; BSR set to: 0
  8077  000EB6  0012               	return	
  8078  000EB8                     l836:
  8079                           
  8080                           ; BSR set to: 0
  8081                           
  8082                           ; BSR set to: 0
  8083  000EB8  C098  FFD9         	movff	get_fat@fs,fsr2l
  8084  000EBC  C099  FFDA         	movff	get_fat@fs+1,fsr2h
  8085  000EC0  50DF               	movf	indf2,w,c
  8086                           
  8087                           ; Switch size 1, requested type "space"
  8088                           ; Number of cases is 3, Range of values is 1 to 3
  8089                           ; switch strategies available:
  8090                           ; Name         Instructions Cycles
  8091                           ; simple_byte           10     6 (average)
  8092                           ;	Chosen strategy is simple_byte
  8093  000EC2  0A01               	xorlw	1	; case 1
  8094  000EC4  B4D8               	btfsc	status,2,c
  8095  000EC6  D644               	goto	l837
  8096  000EC8  0A03               	xorlw	3	; case 2
  8097  000ECA  B4D8               	btfsc	status,2,c
  8098  000ECC  D713               	goto	l848
  8099  000ECE  0A01               	xorlw	1	; case 3
  8100  000ED0  B4D8               	btfsc	status,2,c
  8101  000ED2  D763               	goto	l850
  8102  000ED4                     l840:
  8103                           
  8104                           ;pff.c: 389: return 1;
  8105                           
  8106                           ; BSR set to: 0
  8107  000ED4  0E01               	movlw	1
  8108  000ED6  0100               	movlb	0	; () banked
  8109  000ED8  6F72               	movwf	?_get_fat& (0+255),b
  8110  000EDA  0E00               	movlw	0
  8111  000EDC  6F73               	movwf	(?_get_fat+1)& (0+255),b
  8112  000EDE  0E00               	movlw	0
  8113  000EE0  6F74               	movwf	(?_get_fat+2)& (0+255),b
  8114  000EE2  0E00               	movlw	0
  8115  000EE4  6F75               	movwf	(?_get_fat+3)& (0+255),b
  8116  000EE6  0012               	return	
  8117  000EE8                     __end_of_get_fat:
  8118                           	opt stack 0
  8119                           tosu	equ	0xFFF
  8120                           tosh	equ	0xFFE
  8121                           tosl	equ	0xFFD
  8122                           pclath	equ	0xFFA
  8123                           tblptru	equ	0xFF8
  8124                           tblptrh	equ	0xFF7
  8125                           tblptrl	equ	0xFF6
  8126                           tablat	equ	0xFF5
  8127                           prodh	equ	0xFF4
  8128                           prodl	equ	0xFF3
  8129                           intcon	equ	0xFF2
  8130                           intcon2	equ	0xFF1
  8131                           intcon3	equ	0xFF0
  8132                           postinc0	equ	0xFEE
  8133                           wreg	equ	0xFE8
  8134                           indf1	equ	0xFE7
  8135                           postinc1	equ	0xFE6
  8136                           postdec1	equ	0xFE5
  8137                           fsr1h	equ	0xFE2
  8138                           fsr1l	equ	0xFE1
  8139                           indf2	equ	0xFDF
  8140                           postinc2	equ	0xFDE
  8141                           postdec2	equ	0xFDD
  8142                           plusw2	equ	0xFDB
  8143                           fsr2h	equ	0xFDA
  8144                           fsr2l	equ	0xFD9
  8145                           status	equ	0xFD8
  8146                           
  8147 ;; *************** function _clust2sect *****************
  8148 ;; Defined at:
  8149 ;;		line 400 in file "pff.c"
  8150 ;; Parameters:    Size  Location     Type
  8151 ;;  clst            4   37[COMRAM] unsigned long 
  8152 ;; Auto vars:     Size  Location     Type
  8153 ;;  fs              2   41[COMRAM] PTR struct .
  8154 ;;		 -> NULL(0), SDCard@fs(42), 
  8155 ;; Return value:  Size  Location     Type
  8156 ;;                  4   37[COMRAM] unsigned long 
  8157 ;; Registers used:
  8158 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8159 ;; Tracked objects:
  8160 ;;		On entry : 0/0
  8161 ;;		On exit  : 0/0
  8162 ;;		Unchanged: 0/0
  8163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8164 ;;      Params:         4       0       0       0       0       0       0       0       0
  8165 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8166 ;;      Temps:          0       5       0       0       0       0       0       0       0
  8167 ;;      Totals:         6       5       0       0       0       0       0       0       0
  8168 ;;Total ram usage:       11 bytes
  8169 ;; Hardware stack levels used:    1
  8170 ;; Hardware stack levels required when called:    3
  8171 ;; This function calls:
  8172 ;;		___lmul
  8173 ;; This function is called by:
  8174 ;;		_dir_rewind
  8175 ;;		_dir_next
  8176 ;;		_pf_read
  8177 ;;		_pf_write
  8178 ;;		_pf_lseek
  8179 ;; This function uses a non-reentrant model
  8180 ;;
  8181                           
  8182                           	psect	text33
  8183  002782                     __ptext33:
  8184                           	opt stack 0
  8185  002782                     _clust2sect:
  8186                           	opt stack 24
  8187                           
  8188                           ;pff.c: 404: FATFS *fs = FatFs;
  8189                           
  8190                           ; BSR set to: 0
  8191                           ;incstack = 0
  8192  002782  C035  F02A         	movff	_FatFs,clust2sect@fs
  8193  002786  C036  F02B         	movff	_FatFs+1,clust2sect@fs+1
  8194                           
  8195                           ;pff.c: 407: clst -= 2;
  8196  00278A  0E02               	movlw	2
  8197  00278C  5E26               	subwf	clust2sect@clst,f,c
  8198  00278E  0E00               	movlw	0
  8199  002790  5A27               	subwfb	clust2sect@clst+1,f,c
  8200  002792  5A28               	subwfb	clust2sect@clst+2,f,c
  8201  002794  5A29               	subwfb	clust2sect@clst+3,f,c
  8202                           
  8203                           ;pff.c: 408: if (clst >= (fs->n_fatent - 2)) return 0;
  8204  002796  EE20 F006          	lfsr	2,6
  8205  00279A  502A               	movf	clust2sect@fs,w,c
  8206  00279C  26D9               	addwf	fsr2l,f,c
  8207  00279E  502B               	movf	clust2sect@fs+1,w,c
  8208  0027A0  22DA               	addwfc	fsr2h,f,c
  8209  0027A2  0EFE               	movlw	254
  8210  0027A4  24DE               	addwf	postinc2,w,c
  8211  0027A6  0100               	movlb	0	; () banked
  8212  0027A8  6F60               	movwf	??_clust2sect& (0+255),b
  8213  0027AA  0EFF               	movlw	255
  8214  0027AC  20DE               	addwfc	postinc2,w,c
  8215  0027AE  6F61               	movwf	(??_clust2sect+1)& (0+255),b
  8216  0027B0  0EFF               	movlw	255
  8217  0027B2  20DE               	addwfc	postinc2,w,c
  8218  0027B4  6F62               	movwf	(??_clust2sect+2)& (0+255),b
  8219  0027B6  0EFF               	movlw	255
  8220  0027B8  20DE               	addwfc	postinc2,w,c
  8221  0027BA  6F63               	movwf	(??_clust2sect+3)& (0+255),b
  8222  0027BC  5160               	movf	??_clust2sect& (0+255),w,b
  8223  0027BE  5C26               	subwf	clust2sect@clst,w,c
  8224  0027C0  5161               	movf	(??_clust2sect+1)& (0+255),w,b
  8225  0027C2  5827               	subwfb	clust2sect@clst+1,w,c
  8226  0027C4  5162               	movf	(??_clust2sect+2)& (0+255),w,b
  8227  0027C6  5828               	subwfb	clust2sect@clst+2,w,c
  8228  0027C8  5163               	movf	(??_clust2sect+3)& (0+255),w,b
  8229  0027CA  5829               	subwfb	clust2sect@clst+3,w,c
  8230  0027CC  A0D8               	btfss	status,0,c
  8231  0027CE  D009               	goto	l854
  8232                           
  8233                           ; BSR set to: 0
  8234  0027D0  0E00               	movlw	0
  8235  0027D2  6E26               	movwf	?_clust2sect,c
  8236  0027D4  0E00               	movlw	0
  8237  0027D6  6E27               	movwf	?_clust2sect+1,c
  8238  0027D8  0E00               	movlw	0
  8239  0027DA  6E28               	movwf	?_clust2sect+2,c
  8240  0027DC  0E00               	movlw	0
  8241  0027DE  6E29               	movwf	?_clust2sect+3,c
  8242                           
  8243                           ; BSR set to: 0
  8244  0027E0  0012               	return	
  8245  0027E2                     l854:
  8246                           
  8247                           ; BSR set to: 0
  8248                           ;pff.c: 409: return (DWORD)clst * fs->csize + fs->database;
  8249                           
  8250                           ; BSR set to: 0
  8251  0027E2  EE20 F012          	lfsr	2,18
  8252  0027E6  502A               	movf	clust2sect@fs,w,c
  8253  0027E8  26D9               	addwf	fsr2l,f,c
  8254  0027EA  502B               	movf	clust2sect@fs+1,w,c
  8255  0027EC  22DA               	addwfc	fsr2h,f,c
  8256  0027EE  CFDE F060          	movff	postinc2,??_clust2sect
  8257  0027F2  CFDE F061          	movff	postinc2,??_clust2sect+1
  8258  0027F6  CFDE F062          	movff	postinc2,??_clust2sect+2
  8259  0027FA  CFDE F063          	movff	postinc2,??_clust2sect+3
  8260  0027FE  EE20 F002          	lfsr	2,2
  8261  002802  502A               	movf	clust2sect@fs,w,c
  8262  002804  26D9               	addwf	fsr2l,f,c
  8263  002806  502B               	movf	clust2sect@fs+1,w,c
  8264  002808  22DA               	addwfc	fsr2h,f,c
  8265  00280A  50DF               	movf	indf2,w,c
  8266  00280C  6F64               	movwf	(??_clust2sect+4)& (0+255),b
  8267  00280E  5164               	movf	(??_clust2sect+4)& (0+255),w,b
  8268  002810  6E1A               	movwf	___lmul@multiplier,c
  8269  002812  6A1B               	clrf	___lmul@multiplier+1,c
  8270  002814  6A1C               	clrf	___lmul@multiplier+2,c
  8271  002816  6A1D               	clrf	___lmul@multiplier+3,c
  8272  002818  C026  F01E         	movff	clust2sect@clst,___lmul@multiplicand
  8273  00281C  C027  F01F         	movff	clust2sect@clst+1,___lmul@multiplicand+1
  8274  002820  C028  F020         	movff	clust2sect@clst+2,___lmul@multiplicand+2
  8275  002824  C029  F021         	movff	clust2sect@clst+3,___lmul@multiplicand+3
  8276  002828  EC1F  F017         	call	___lmul	;wreg free
  8277  00282C  0100               	movlb	0	; () banked
  8278  00282E  5160               	movf	??_clust2sect& (0+255),w,b
  8279  002830  241A               	addwf	?___lmul,w,c
  8280  002832  6E26               	movwf	?_clust2sect,c
  8281  002834  5161               	movf	(??_clust2sect+1)& (0+255),w,b
  8282  002836  201B               	addwfc	?___lmul+1,w,c
  8283  002838  6E27               	movwf	?_clust2sect+1,c
  8284  00283A  5162               	movf	(??_clust2sect+2)& (0+255),w,b
  8285  00283C  201C               	addwfc	?___lmul+2,w,c
  8286  00283E  6E28               	movwf	?_clust2sect+2,c
  8287  002840  5163               	movf	(??_clust2sect+3)& (0+255),w,b
  8288  002842  201D               	addwfc	?___lmul+3,w,c
  8289  002844  6E29               	movwf	?_clust2sect+3,c
  8290  002846  0012               	return	
  8291  002848                     __end_of_clust2sect:
  8292                           	opt stack 0
  8293                           tosu	equ	0xFFF
  8294                           tosh	equ	0xFFE
  8295                           tosl	equ	0xFFD
  8296                           pclath	equ	0xFFA
  8297                           tblptru	equ	0xFF8
  8298                           tblptrh	equ	0xFF7
  8299                           tblptrl	equ	0xFF6
  8300                           tablat	equ	0xFF5
  8301                           prodh	equ	0xFF4
  8302                           prodl	equ	0xFF3
  8303                           intcon	equ	0xFF2
  8304                           intcon2	equ	0xFF1
  8305                           intcon3	equ	0xFF0
  8306                           postinc0	equ	0xFEE
  8307                           wreg	equ	0xFE8
  8308                           indf1	equ	0xFE7
  8309                           postinc1	equ	0xFE6
  8310                           postdec1	equ	0xFE5
  8311                           fsr1h	equ	0xFE2
  8312                           fsr1l	equ	0xFE1
  8313                           indf2	equ	0xFDF
  8314                           postinc2	equ	0xFDE
  8315                           postdec2	equ	0xFDD
  8316                           plusw2	equ	0xFDB
  8317                           fsr2h	equ	0xFDA
  8318                           fsr2l	equ	0xFD9
  8319                           status	equ	0xFD8
  8320                           
  8321 ;; *************** function _create_name *****************
  8322 ;; Defined at:
  8323 ;;		line 581 in file "pff.c"
  8324 ;; Parameters:    Size  Location     Type
  8325 ;;  dj              2   33[COMRAM] PTR struct .
  8326 ;;		 -> pf_open@dj(16), 
  8327 ;;  path            2   35[COMRAM] PTR PTR const unsigned c
  8328 ;;		 -> follow_path@path(2), 
  8329 ;; Auto vars:     Size  Location     Type
  8330 ;;  d               1    0[BANK0 ] unsigned char 
  8331 ;;  sfn             2    5[BANK0 ] PTR unsigned char 
  8332 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  8333 ;;  p               2    1[BANK0 ] PTR const unsigned char 
  8334 ;;		 -> STR_18(10), 
  8335 ;;  c               1    8[BANK0 ] unsigned char 
  8336 ;;  i               1    7[BANK0 ] unsigned char 
  8337 ;;  si              1    4[BANK0 ] unsigned char 
  8338 ;;  ni              1    3[BANK0 ] unsigned char 
  8339 ;; Return value:  Size  Location     Type
  8340 ;;                  1    wreg      enum E43
  8341 ;; Registers used:
  8342 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8343 ;; Tracked objects:
  8344 ;;		On entry : 0/0
  8345 ;;		On exit  : 0/0
  8346 ;;		Unchanged: 0/0
  8347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8348 ;;      Params:         4       0       0       0       0       0       0       0       0
  8349 ;;      Locals:         0       9       0       0       0       0       0       0       0
  8350 ;;      Temps:          7       0       0       0       0       0       0       0       0
  8351 ;;      Totals:        11       9       0       0       0       0       0       0       0
  8352 ;;Total ram usage:       20 bytes
  8353 ;; Hardware stack levels used:    1
  8354 ;; Hardware stack levels required when called:    3
  8355 ;; This function calls:
  8356 ;;		_mem_set
  8357 ;; This function is called by:
  8358 ;;		_follow_path
  8359 ;; This function uses a non-reentrant model
  8360 ;;
  8361                           
  8362                           	psect	text34
  8363  001DE2                     __ptext34:
  8364                           	opt stack 0
  8365  001DE2                     _create_name:
  8366                           	opt stack 23
  8367                           
  8368                           ;pff.c: 586: BYTE c, ni, si, i, *sfn;
  8369                           ;pff.c: 587: const char *p;
  8370                           ;pff.c: 590: static const BYTE cvt[] = {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x4
      +                          5,0x45,0x49,0x49,0x49,0x8E,0x8F,0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0
      +                          x9B,0x9C,0x9D,0x9E,0x9F, 0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0x
  8371                           ;pff.c: 595: sfn = dj->fn;
  8372                           
  8373                           ; BSR set to: 0
  8374                           ;incstack = 0
  8375  001DE2  EE20 F002          	lfsr	2,2
  8376  001DE6  5022               	movf	create_name@dj,w,c
  8377  001DE8  26D9               	addwf	fsr2l,f,c
  8378  001DEA  5023               	movf	create_name@dj+1,w,c
  8379  001DEC  22DA               	addwfc	fsr2h,f,c
  8380  001DEE  CFDE F065          	movff	postinc2,create_name@sfn
  8381  001DF2  CFDD F066          	movff	postdec2,create_name@sfn+1
  8382                           
  8383                           ;pff.c: 596: mem_set(sfn, ' ', 11);
  8384  001DF6  C065  F01A         	movff	create_name@sfn,mem_set@dst
  8385  001DFA  C066  F01B         	movff	create_name@sfn+1,mem_set@dst+1
  8386  001DFE  0E00               	movlw	0
  8387  001E00  6E1D               	movwf	mem_set@val+1,c
  8388  001E02  0E20               	movlw	32
  8389  001E04  6E1C               	movwf	mem_set@val,c
  8390  001E06  0E00               	movlw	0
  8391  001E08  6E1F               	movwf	mem_set@cnt+1,c
  8392  001E0A  0E0B               	movlw	11
  8393  001E0C  6E1E               	movwf	mem_set@cnt,c
  8394  001E0E  EC3D  F018         	call	_mem_set	;wreg free
  8395                           
  8396                           ;pff.c: 597: si = i = 0; ni = 8;
  8397  001E12  0E00               	movlw	0
  8398  001E14  0100               	movlb	0	; () banked
  8399  001E16  6F67               	movwf	create_name@i& (0+255),b
  8400  001E18  C067  F064         	movff	create_name@i,create_name@si
  8401                           
  8402                           ; BSR set to: 0
  8403  001E1C  0E08               	movlw	8
  8404  001E1E  6F63               	movwf	create_name@ni& (0+255),b
  8405                           
  8406                           ; BSR set to: 0
  8407                           ;pff.c: 598: p = *path;
  8408  001E20  C024  FFD9         	movff	create_name@path,fsr2l
  8409  001E24  C025  FFDA         	movff	create_name@path+1,fsr2h
  8410  001E28  CFDE F061          	movff	postinc2,create_name@p
  8411  001E2C  CFDD F062          	movff	postdec2,create_name@p+1
  8412  001E30                     
  8413                           ; BSR set to: 0
  8414                           ;pff.c: 600: c = p[si++];
  8415                           
  8416                           ; BSR set to: 0
  8417  001E30  5164               	movf	create_name@si& (0+255),w,b
  8418  001E32  0D01               	mullw	1
  8419  001E34  C061  F026         	movff	create_name@p,??_create_name
  8420  001E38  C062  F027         	movff	create_name@p+1,??_create_name+1
  8421  001E3C  50F3               	movf	prodl,w,c
  8422  001E3E  2626               	addwf	??_create_name,f,c
  8423  001E40  50F4               	movf	prodh,w,c
  8424  001E42  2227               	addwfc	??_create_name+1,f,c
  8425  001E44  C026  FFF6         	movff	??_create_name,tblptrl
  8426  001E48  C027  FFF7         	movff	??_create_name+1,tblptrh
  8427  001E4C                     	if	0	;tblptru may be non-zero
  8428  001E4C                     	endif
  8429  001E4C                     	if	0	;tblptru may be non-zero
  8430  001E4C                     	endif
  8431  001E4C  0008               	tblrd		*
  8432  001E4E  CFF5 F068          	movff	tablat,create_name@c
  8433                           
  8434                           ; BSR set to: 0
  8435  001E52  2B64               	incf	create_name@si& (0+255),f,b
  8436                           
  8437                           ; BSR set to: 0
  8438                           ;pff.c: 601: if (c <= ' ' || c == '/') break;
  8439  001E54  0E20               	movlw	32
  8440  001E56  6568               	cpfsgt	create_name@c& (0+255),b
  8441  001E58  D044               	goto	l916
  8442                           
  8443                           ; BSR set to: 0
  8444  001E5A  0E2F               	movlw	47
  8445  001E5C  1968               	xorwf	create_name@c& (0+255),w,b
  8446  001E5E  B4D8               	btfsc	status,2,c
  8447  001E60  D040               	goto	l916
  8448                           
  8449                           ; BSR set to: 0
  8450                           ;pff.c: 602: if (c == '.' || i >= ni) {
  8451                           
  8452                           ; BSR set to: 0
  8453                           
  8454                           ; BSR set to: 0
  8455  001E62  0E2E               	movlw	46
  8456  001E64  1968               	xorwf	create_name@c& (0+255),w,b
  8457  001E66  B4D8               	btfsc	status,2,c
  8458  001E68  D004               	goto	u7380
  8459                           
  8460                           ; BSR set to: 0
  8461  001E6A  5163               	movf	create_name@ni& (0+255),w,b
  8462  001E6C  5D67               	subwf	create_name@i& (0+255),w,b
  8463  001E6E  A0D8               	btfss	status,0,c
  8464  001E70  D00D               	goto	l917
  8465  001E72                     u7380:
  8466                           
  8467                           ; BSR set to: 0
  8468                           ;pff.c: 603: if (ni != 8 || c != '.') break;
  8469                           
  8470                           ; BSR set to: 0
  8471  001E72  0E08               	movlw	8
  8472  001E74  1963               	xorwf	create_name@ni& (0+255),w,b
  8473  001E76  A4D8               	btfss	status,2,c
  8474  001E78  D034               	goto	l916
  8475                           
  8476                           ; BSR set to: 0
  8477  001E7A  0E2E               	movlw	46
  8478  001E7C  1968               	xorwf	create_name@c& (0+255),w,b
  8479  001E7E  A4D8               	btfss	status,2,c
  8480  001E80  D030               	goto	l916
  8481                           
  8482                           ; BSR set to: 0
  8483                           ;pff.c: 604: i = 8; ni = 11;
  8484                           
  8485                           ; BSR set to: 0
  8486                           
  8487                           ; BSR set to: 0
  8488  001E82  0E08               	movlw	8
  8489  001E84  6F67               	movwf	create_name@i& (0+255),b
  8490  001E86  0E0B               	movlw	11
  8491  001E88  6F63               	movwf	create_name@ni& (0+255),b
  8492                           
  8493                           ;pff.c: 605: continue;
  8494  001E8A  D7D2               	goto	l912
  8495  001E8C                     l917:
  8496                           
  8497                           ; BSR set to: 0
  8498                           ;pff.c: 606: }
  8499                           ;pff.c: 609: if (c >= 0x80)
  8500                           
  8501                           ; BSR set to: 0
  8502  001E8C  0E7F               	movlw	127
  8503  001E8E  6568               	cpfsgt	create_name@c& (0+255),b
  8504  001E90  D014               	goto	l925
  8505                           
  8506                           ; BSR set to: 0
  8507                           ;pff.c: 610: c = cvt[c - 0x80];
  8508  001E92  0E80               	movlw	128
  8509  001E94  6E26               	movwf	??_create_name& (0+255),c
  8510  001E96  0EFF               	movlw	255
  8511  001E98  6E27               	movwf	(??_create_name+1)& (0+255),c
  8512  001E9A  5168               	movf	create_name@c& (0+255),w,b
  8513  001E9C  6E28               	movwf	(??_create_name+2)& (0+255),c
  8514  001E9E  6A29               	clrf	(??_create_name+3)& (0+255),c
  8515  001EA0  5026               	movf	??_create_name,w,c
  8516  001EA2  2628               	addwf	??_create_name+2,f,c
  8517  001EA4  5027               	movf	??_create_name+1,w,c
  8518  001EA6  2229               	addwfc	??_create_name+3,f,c
  8519  001EA8  0EE7               	movlw	low create_name@cvt
  8520  001EAA  2428               	addwf	??_create_name+2,w,c
  8521  001EAC  6EF6               	movwf	tblptrl,c
  8522  001EAE  0E60               	movlw	high create_name@cvt
  8523  001EB0  2029               	addwfc	??_create_name+3,w,c
  8524  001EB2  6EF7               	movwf	tblptrh,c
  8525  001EB4                     	if	0	;There are less than 3 active tblptr bytes
  8526  001EB4                     	endif
  8527  001EB4  0008               	tblrd		*
  8528  001EB6  CFF5 F068          	movff	tablat,create_name@c
  8529  001EBA                     l925:
  8530                           
  8531                           ; BSR set to: 0
  8532                           
  8533                           ; BSR set to: 0
  8534  001EBA  0E60               	movlw	96
  8535  001EBC  6568               	cpfsgt	create_name@c& (0+255),b
  8536  001EBE  D005               	goto	l927
  8537                           
  8538                           ; BSR set to: 0
  8539  001EC0  0E7B               	movlw	123
  8540  001EC2  6168               	cpfslt	create_name@c& (0+255),b
  8541  001EC4  D002               	goto	l927
  8542                           
  8543                           ; BSR set to: 0
  8544  001EC6  0E20               	movlw	32
  8545  001EC8  5F68               	subwf	create_name@c& (0+255),f,b
  8546  001ECA                     l927:
  8547                           
  8548                           ; BSR set to: 0
  8549                           ;pff.c: 620: sfn[i++] = c;
  8550                           
  8551                           ; BSR set to: 0
  8552  001ECA  5167               	movf	create_name@i& (0+255),w,b
  8553  001ECC  0D01               	mullw	1
  8554  001ECE  50F3               	movf	prodl,w,c
  8555  001ED0  2565               	addwf	create_name@sfn& (0+255),w,b
  8556  001ED2  6ED9               	movwf	fsr2l,c
  8557  001ED4  50F4               	movf	prodh,w,c
  8558  001ED6  2166               	addwfc	(create_name@sfn+1)& (0+255),w,b
  8559  001ED8  6EDA               	movwf	fsr2h,c
  8560  001EDA  C068  FFDF         	movff	create_name@c,indf2
  8561                           
  8562                           ; BSR set to: 0
  8563  001EDE  2B67               	incf	create_name@i& (0+255),f,b
  8564                           
  8565                           ; BSR set to: 0
  8566                           ;pff.c: 621: }
  8567                           ;pff.c: 622: }
  8568                           
  8569                           ; BSR set to: 0
  8570  001EE0  D7A7               	goto	l912
  8571  001EE2                     l916:
  8572                           
  8573                           ; BSR set to: 0
  8574                           ;pff.c: 623: *path = &p[si];
  8575                           
  8576                           ; BSR set to: 0
  8577  001EE2  5164               	movf	create_name@si& (0+255),w,b
  8578  001EE4  0D01               	mullw	1
  8579  001EE6  C061  F026         	movff	create_name@p,??_create_name
  8580  001EEA  C062  F027         	movff	create_name@p+1,??_create_name+1
  8581  001EEE  50F3               	movf	prodl,w,c
  8582  001EF0  2626               	addwf	??_create_name,f,c
  8583  001EF2  50F4               	movf	prodh,w,c
  8584  001EF4  2227               	addwfc	??_create_name+1,f,c
  8585  001EF6  C024  FFD9         	movff	create_name@path,fsr2l
  8586  001EFA  C025  FFDA         	movff	create_name@path+1,fsr2h
  8587  001EFE  C026  FFDE         	movff	??_create_name,postinc2
  8588  001F02  C027  FFDD         	movff	??_create_name+1,postdec2
  8589                           
  8590                           ; BSR set to: 0
  8591                           ;pff.c: 625: sfn[11] = (c <= ' ') ? 1 : 0;
  8592  001F06  EE20 F00B          	lfsr	2,11
  8593  001F0A  5165               	movf	create_name@sfn& (0+255),w,b
  8594  001F0C  26D9               	addwf	fsr2l,f,c
  8595  001F0E  5166               	movf	(create_name@sfn+1)& (0+255),w,b
  8596  001F10  22DA               	addwfc	fsr2h,f,c
  8597  001F12  0E20               	movlw	32
  8598  001F14  6568               	cpfsgt	create_name@c& (0+255),b
  8599  001F16  D001               	goto	u7451
  8600  001F18  D002               	goto	u7450
  8601  001F1A                     u7451:
  8602  001F1A  0E01               	movlw	1
  8603  001F1C  D001               	goto	u7460
  8604  001F1E                     u7450:
  8605  001F1E  0E00               	movlw	0
  8606  001F20                     u7460:
  8607  001F20  6EDF               	movwf	indf2,c
  8608                           
  8609                           ; BSR set to: 0
  8610                           ;pff.c: 627: return FR_OK;
  8611  001F22  0E00               	movlw	0
  8612  001F24  0012               	return	
  8613  001F26                     __end_of_create_name:
  8614                           	opt stack 0
  8615                           tosu	equ	0xFFF
  8616                           tosh	equ	0xFFE
  8617                           tosl	equ	0xFFD
  8618                           pclath	equ	0xFFA
  8619                           tblptru	equ	0xFF8
  8620                           tblptrh	equ	0xFF7
  8621                           tblptrl	equ	0xFF6
  8622                           tablat	equ	0xFF5
  8623                           prodh	equ	0xFF4
  8624                           prodl	equ	0xFF3
  8625                           intcon	equ	0xFF2
  8626                           intcon2	equ	0xFF1
  8627                           intcon3	equ	0xFF0
  8628                           postinc0	equ	0xFEE
  8629                           wreg	equ	0xFE8
  8630                           indf1	equ	0xFE7
  8631                           postinc1	equ	0xFE6
  8632                           postdec1	equ	0xFE5
  8633                           fsr1h	equ	0xFE2
  8634                           fsr1l	equ	0xFE1
  8635                           indf2	equ	0xFDF
  8636                           postinc2	equ	0xFDE
  8637                           postdec2	equ	0xFDD
  8638                           plusw2	equ	0xFDB
  8639                           fsr2h	equ	0xFDA
  8640                           fsr2l	equ	0xFD9
  8641                           status	equ	0xFD8
  8642                           
  8643 ;; *************** function _mem_set *****************
  8644 ;; Defined at:
  8645 ;;		line 329 in file "pff.c"
  8646 ;; Parameters:    Size  Location     Type
  8647 ;;  dst             2   25[COMRAM] PTR void 
  8648 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  8649 ;;  val             2   27[COMRAM] int 
  8650 ;;  cnt             2   29[COMRAM] int 
  8651 ;; Auto vars:     Size  Location     Type
  8652 ;;  d               2   31[COMRAM] PTR unsigned char 
  8653 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  8654 ;; Return value:  Size  Location     Type
  8655 ;;                  1    wreg      void 
  8656 ;; Registers used:
  8657 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8658 ;; Tracked objects:
  8659 ;;		On entry : 0/0
  8660 ;;		On exit  : 0/0
  8661 ;;		Unchanged: 0/0
  8662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8663 ;;      Params:         6       0       0       0       0       0       0       0       0
  8664 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8665 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8666 ;;      Totals:         8       0       0       0       0       0       0       0       0
  8667 ;;Total ram usage:        8 bytes
  8668 ;; Hardware stack levels used:    1
  8669 ;; Hardware stack levels required when called:    2
  8670 ;; This function calls:
  8671 ;;		Nothing
  8672 ;; This function is called by:
  8673 ;;		_create_name
  8674 ;; This function uses a non-reentrant model
  8675 ;;
  8676                           
  8677                           	psect	text35
  8678  00307A                     __ptext35:
  8679                           	opt stack 0
  8680  00307A                     _mem_set:
  8681                           	opt stack 23
  8682                           
  8683                           ;pff.c: 330: char *d = (char*)dst;
  8684                           
  8685                           ; BSR set to: 0
  8686                           ;incstack = 0
  8687  00307A  C01A  F020         	movff	mem_set@dst,mem_set@d
  8688  00307E  C01B  F021         	movff	mem_set@dst+1,mem_set@d+1
  8689                           
  8690                           ;pff.c: 331: while (cnt--) *d++ = (char)val;
  8691  003082  D008               	goto	l818
  8692  003084                     l6406:
  8693  003084  C020  FFD9         	movff	mem_set@d,fsr2l
  8694  003088  C021  FFDA         	movff	mem_set@d+1,fsr2h
  8695  00308C  C01C  FFDF         	movff	mem_set@val,indf2
  8696  003090  4A20               	infsnz	mem_set@d,f,c
  8697  003092  2A21               	incf	mem_set@d+1,f,c
  8698  003094                     l818:
  8699  003094  061E               	decf	mem_set@cnt,f,c
  8700  003096  A0D8               	btfss	status,0,c
  8701  003098  061F               	decf	mem_set@cnt+1,f,c
  8702  00309A  281E               	incf	mem_set@cnt,w,c
  8703  00309C  E1F3               	bnz	l6406
  8704  00309E  281F               	incf	mem_set@cnt+1,w,c
  8705  0030A0  B4D8               	btfsc	status,2,c
  8706  0030A2  0012               	return	
  8707  0030A4  D7EF               	goto	l819
  8708  0030A6                     __end_of_mem_set:
  8709                           	opt stack 0
  8710                           tosu	equ	0xFFF
  8711                           tosh	equ	0xFFE
  8712                           tosl	equ	0xFFD
  8713                           pclath	equ	0xFFA
  8714                           tblptru	equ	0xFF8
  8715                           tblptrh	equ	0xFF7
  8716                           tblptrl	equ	0xFF6
  8717                           tablat	equ	0xFF5
  8718                           prodh	equ	0xFF4
  8719                           prodl	equ	0xFF3
  8720                           intcon	equ	0xFF2
  8721                           intcon2	equ	0xFF1
  8722                           intcon3	equ	0xFF0
  8723                           postinc0	equ	0xFEE
  8724                           wreg	equ	0xFE8
  8725                           indf1	equ	0xFE7
  8726                           postinc1	equ	0xFE6
  8727                           postdec1	equ	0xFE5
  8728                           fsr1h	equ	0xFE2
  8729                           fsr1l	equ	0xFE1
  8730                           indf2	equ	0xFDF
  8731                           postinc2	equ	0xFDE
  8732                           postdec2	equ	0xFDD
  8733                           plusw2	equ	0xFDB
  8734                           fsr2h	equ	0xFDA
  8735                           fsr2l	equ	0xFD9
  8736                           status	equ	0xFD8
  8737                           
  8738 ;; *************** function _pf_mount *****************
  8739 ;; Defined at:
  8740 ;;		line 755 in file "pff.c"
  8741 ;; Parameters:    Size  Location     Type
  8742 ;;  fs              2   28[BANK0 ] PTR struct .
  8743 ;;		 -> SDCard@fs(42), 
  8744 ;; Auto vars:     Size  Location     Type
  8745 ;;  buf            36   52[BANK0 ] unsigned char [36]
  8746 ;;  fsize           4  100[BANK0 ] unsigned long 
  8747 ;;  bsect           4   96[BANK0 ] unsigned long 
  8748 ;;  mclst           4   92[BANK0 ] unsigned long 
  8749 ;;  tsect           4   88[BANK0 ] unsigned long 
  8750 ;;  fmt             1  104[BANK0 ] unsigned char 
  8751 ;; Return value:  Size  Location     Type
  8752 ;;                  1    wreg      enum E3838
  8753 ;; Registers used:
  8754 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8755 ;; Tracked objects:
  8756 ;;		On entry : 0/0
  8757 ;;		On exit  : 0/0
  8758 ;;		Unchanged: 0/0
  8759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8760 ;;      Params:         0       2       0       0       0       0       0       0       0
  8761 ;;      Locals:         0      53       0       0       0       0       0       0       0
  8762 ;;      Temps:          0      22       0       0       0       0       0       0       0
  8763 ;;      Totals:         0      77       0       0       0       0       0       0       0
  8764 ;;Total ram usage:       77 bytes
  8765 ;; Hardware stack levels used:    1
  8766 ;; Hardware stack levels required when called:    8
  8767 ;; This function calls:
  8768 ;;		___lldiv
  8769 ;;		___lmul
  8770 ;;		_check_fs
  8771 ;;		_disk_initialize
  8772 ;;		_disk_readp
  8773 ;; This function is called by:
  8774 ;;		_SDCard
  8775 ;; This function uses a non-reentrant model
  8776 ;;
  8777                           
  8778                           	psect	text36
  8779  000012                     __ptext36:
  8780                           	opt stack 0
  8781  000012                     _pf_mount:
  8782                           	opt stack 20
  8783                           
  8784                           ;pff.c: 759: BYTE fmt, buf[36];
  8785                           ;pff.c: 760: DWORD bsect, fsize, tsect, mclst;
  8786                           ;pff.c: 763: FatFs = 0;
  8787                           
  8788                           ;incstack = 0
  8789  000012  0E00               	movlw	0
  8790  000014  6E35               	movwf	_FatFs,c
  8791  000016  0E00               	movlw	0
  8792  000018  6E36               	movwf	_FatFs+1,c
  8793                           
  8794                           ;pff.c: 764: if (disk_initialize() & 0x01)
  8795  00001A  ECD6  F00A         	call	_disk_initialize	;wreg free
  8796  00001E  0100               	movlb	0	; () banked
  8797  000020  6F7E               	movwf	??_pf_mount& (0+255),b
  8798  000022  A17E               	btfss	??_pf_mount& (0+255),0,b
  8799  000024  D002               	goto	l965
  8800                           
  8801                           ; BSR set to: 0
  8802                           ;pff.c: 765: return FR_NOT_READY;
  8803  000026  0E02               	movlw	2
  8804                           
  8805                           ; BSR set to: 0
  8806  000028  0012               	return	
  8807  00002A                     l965:
  8808                           
  8809                           ; BSR set to: 0
  8810                           ;pff.c: 767: bsect = 0;
  8811                           
  8812                           ; BSR set to: 0
  8813  00002A  0E00               	movlw	0
  8814  00002C  6FC0               	movwf	pf_mount@bsect& (0+255),b
  8815  00002E  0E00               	movlw	0
  8816  000030  6FC1               	movwf	(pf_mount@bsect+1)& (0+255),b
  8817  000032  0E00               	movlw	0
  8818  000034  6FC2               	movwf	(pf_mount@bsect+2)& (0+255),b
  8819  000036  0E00               	movlw	0
  8820  000038  6FC3               	movwf	(pf_mount@bsect+3)& (0+255),b
  8821                           
  8822                           ; BSR set to: 0
  8823                           ;pff.c: 768: fmt = check_fs(buf, bsect);
  8824  00003A  0E94               	movlw	low pf_mount@buf
  8825  00003C  6F72               	movwf	check_fs@buf& (0+255),b
  8826  00003E  0E00               	movlw	high pf_mount@buf
  8827  000040  6F73               	movwf	(check_fs@buf+1)& (0+255),b
  8828  000042  C0C0  F074         	movff	pf_mount@bsect,check_fs@sect
  8829  000046  C0C1  F075         	movff	pf_mount@bsect+1,check_fs@sect+1
  8830  00004A  C0C2  F076         	movff	pf_mount@bsect+2,check_fs@sect+2
  8831  00004E  C0C3  F077         	movff	pf_mount@bsect+3,check_fs@sect+3
  8832  000052  EC9B  F00D         	call	_check_fs	;wreg free
  8833  000056  0100               	movlb	0	; () banked
  8834  000058  6FC8               	movwf	pf_mount@fmt& (0+255),b
  8835                           
  8836                           ; BSR set to: 0
  8837                           ;pff.c: 769: if (fmt == 1) {
  8838  00005A  05C8               	decf	pf_mount@fmt& (0+255),w,b
  8839  00005C  A4D8               	btfss	status,2,c
  8840  00005E  D068               	goto	l970
  8841                           
  8842                           ; BSR set to: 0
  8843                           ;pff.c: 771: if (disk_readp(buf, bsect, 446, 16)) {
  8844  000060  0E94               	movlw	low pf_mount@buf
  8845  000062  6F60               	movwf	disk_readp@rd& (0+255),b
  8846  000064  0E00               	movlw	high pf_mount@buf
  8847  000066  6F61               	movwf	(disk_readp@rd+1)& (0+255),b
  8848  000068  C0C0  F062         	movff	pf_mount@bsect,disk_readp@sector
  8849  00006C  C0C1  F063         	movff	pf_mount@bsect+1,disk_readp@sector+1
  8850  000070  C0C2  F064         	movff	pf_mount@bsect+2,disk_readp@sector+2
  8851  000074  C0C3  F065         	movff	pf_mount@bsect+3,disk_readp@sector+3
  8852  000078  0E01               	movlw	1
  8853  00007A  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
  8854  00007C  0EBE               	movlw	190
  8855  00007E  6F66               	movwf	disk_readp@offset& (0+255),b
  8856  000080  0E00               	movlw	0
  8857  000082  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  8858  000084  0E10               	movlw	16
  8859  000086  6F68               	movwf	disk_readp@count& (0+255),b
  8860  000088  EC3C  F009         	call	_disk_readp	;wreg free
  8861  00008C  0900               	iorlw	0
  8862  00008E  B4D8               	btfsc	status,2,c
  8863  000090  D002               	goto	l968
  8864                           
  8865                           ;pff.c: 772: fmt = 3;
  8866  000092  0E03               	movlw	3
  8867  000094  D04B               	goto	L2
  8868  000096                     l968:
  8869                           
  8870                           ;pff.c: 774: if (buf[4]) {
  8871                           
  8872                           ; BSR set to: 0
  8873  000096  0100               	movlb	0	; () banked
  8874  000098  5198               	movf	(pf_mount@buf+4)& (0+255),w,b
  8875  00009A  B4D8               	btfsc	status,2,c
  8876  00009C  D049               	goto	l970
  8877                           
  8878                           ; BSR set to: 0
  8879                           ;pff.c: 775: bsect = (DWORD)(((DWORD)*((BYTE*)(&buf[8])+3)<<24)|((DWORD)*((BYTE*)(&buf[8
      +                          ])+2)<<16)|((WORD)*((BYTE*)(&buf[8])+1)<<8)|*(BYTE*)(&buf[8]));
  8880  00009E  519D               	movf	(pf_mount@buf+9)& (0+255),w,b
  8881  0000A0  6F7F               	movwf	(??_pf_mount+1)& (0+255),b
  8882  0000A2  6B7E               	clrf	??_pf_mount& (0+255),b
  8883  0000A4  C09E  F080         	movff	pf_mount@buf+10,??_pf_mount+2
  8884  0000A8  6B81               	clrf	(??_pf_mount+3)& (0+255),b
  8885  0000AA  6B82               	clrf	(??_pf_mount+4)& (0+255),b
  8886  0000AC  6B83               	clrf	(??_pf_mount+5)& (0+255),b
  8887  0000AE  C081  F083         	movff	??_pf_mount+3,??_pf_mount+5
  8888  0000B2  C080  F082         	movff	??_pf_mount+2,??_pf_mount+4
  8889  0000B6  6B81               	clrf	(??_pf_mount+3)& (0+255),b
  8890  0000B8  6B80               	clrf	(??_pf_mount+2)& (0+255),b
  8891  0000BA  C09F  F084         	movff	pf_mount@buf+11,??_pf_mount+6
  8892  0000BE  6B85               	clrf	(??_pf_mount+7)& (0+255),b
  8893  0000C0  6B86               	clrf	(??_pf_mount+8)& (0+255),b
  8894  0000C2  6B87               	clrf	(??_pf_mount+9)& (0+255),b
  8895  0000C4  C084  F087         	movff	??_pf_mount+6,??_pf_mount+9
  8896  0000C8  6B86               	clrf	(??_pf_mount+8)& (0+255),b
  8897  0000CA  6B85               	clrf	(??_pf_mount+7)& (0+255),b
  8898  0000CC  6B84               	clrf	(??_pf_mount+6)& (0+255),b
  8899  0000CE  5180               	movf	(??_pf_mount+2)& (0+255),w,b
  8900  0000D0  1184               	iorwf	(??_pf_mount+6)& (0+255),w,b
  8901  0000D2  6F88               	movwf	(??_pf_mount+10)& (0+255),b
  8902  0000D4  5181               	movf	(??_pf_mount+3)& (0+255),w,b
  8903  0000D6  1185               	iorwf	(??_pf_mount+7)& (0+255),w,b
  8904  0000D8  6F89               	movwf	(??_pf_mount+11)& (0+255),b
  8905  0000DA  5182               	movf	(??_pf_mount+4)& (0+255),w,b
  8906  0000DC  1186               	iorwf	(??_pf_mount+8)& (0+255),w,b
  8907  0000DE  6F8A               	movwf	(??_pf_mount+12)& (0+255),b
  8908  0000E0  5183               	movf	(??_pf_mount+5)& (0+255),w,b
  8909  0000E2  1187               	iorwf	(??_pf_mount+9)& (0+255),w,b
  8910  0000E4  6F8B               	movwf	(??_pf_mount+13)& (0+255),b
  8911  0000E6  517E               	movf	??_pf_mount& (0+255),w,b
  8912  0000E8  1188               	iorwf	(??_pf_mount+10)& (0+255),w,b
  8913  0000EA  6F8C               	movwf	(??_pf_mount+14)& (0+255),b
  8914  0000EC  517F               	movf	(??_pf_mount+1)& (0+255),w,b
  8915  0000EE  1189               	iorwf	(??_pf_mount+11)& (0+255),w,b
  8916  0000F0  6F8D               	movwf	(??_pf_mount+15)& (0+255),b
  8917  0000F2  0E00               	movlw	0
  8918  0000F4  118A               	iorwf	(??_pf_mount+12)& (0+255),w,b
  8919  0000F6  6F8E               	movwf	(??_pf_mount+16)& (0+255),b
  8920  0000F8  0E00               	movlw	0
  8921  0000FA  118B               	iorwf	(??_pf_mount+13)& (0+255),w,b
  8922  0000FC  6F8F               	movwf	(??_pf_mount+17)& (0+255),b
  8923  0000FE  519C               	movf	(pf_mount@buf+8)& (0+255),w,b
  8924  000100  118C               	iorwf	(??_pf_mount+14)& (0+255),w,b
  8925  000102  6FC0               	movwf	pf_mount@bsect& (0+255),b
  8926  000104  518D               	movf	(??_pf_mount+15)& (0+255),w,b
  8927  000106  6FC1               	movwf	(pf_mount@bsect+1)& (0+255),b
  8928  000108  518E               	movf	(??_pf_mount+16)& (0+255),w,b
  8929  00010A  6FC2               	movwf	(pf_mount@bsect+2)& (0+255),b
  8930  00010C  518F               	movf	(??_pf_mount+17)& (0+255),w,b
  8931  00010E  6FC3               	movwf	(pf_mount@bsect+3)& (0+255),b
  8932                           
  8933                           ; BSR set to: 0
  8934                           ;pff.c: 776: fmt = check_fs(buf, bsect);
  8935  000110  0E94               	movlw	low pf_mount@buf
  8936  000112  6F72               	movwf	check_fs@buf& (0+255),b
  8937  000114  0E00               	movlw	high pf_mount@buf
  8938  000116  6F73               	movwf	(check_fs@buf+1)& (0+255),b
  8939  000118  C0C0  F074         	movff	pf_mount@bsect,check_fs@sect
  8940  00011C  C0C1  F075         	movff	pf_mount@bsect+1,check_fs@sect+1
  8941  000120  C0C2  F076         	movff	pf_mount@bsect+2,check_fs@sect+2
  8942  000124  C0C3  F077         	movff	pf_mount@bsect+3,check_fs@sect+3
  8943  000128  EC9B  F00D         	call	_check_fs	;wreg free
  8944  00012C                     L2:
  8945  00012C  0100               	movlb	0	; () banked
  8946  00012E  6FC8               	movwf	pf_mount@fmt& (0+255),b
  8947  000130                     l970:
  8948                           
  8949                           ; BSR set to: 0
  8950                           ;pff.c: 777: }
  8951                           ;pff.c: 778: }
  8952                           ;pff.c: 779: }
  8953                           ;pff.c: 780: if (fmt == 3) return FR_DISK_ERR;
  8954                           
  8955                           ; BSR set to: 0
  8956                           
  8957                           ; BSR set to: 0
  8958                           
  8959                           ; BSR set to: 0
  8960  000130  0E03               	movlw	3
  8961  000132  19C8               	xorwf	pf_mount@fmt& (0+255),w,b
  8962  000134  A4D8               	btfss	status,2,c
  8963  000136  D002               	goto	l971
  8964                           
  8965                           ; BSR set to: 0
  8966  000138  0E01               	movlw	1
  8967                           
  8968                           ; BSR set to: 0
  8969  00013A  0012               	return	
  8970  00013C                     l971:
  8971                           
  8972                           ; BSR set to: 0
  8973                           ;pff.c: 781: if (fmt) return FR_NO_FILESYSTEM;
  8974                           
  8975                           ; BSR set to: 0
  8976  00013C  51C8               	movf	pf_mount@fmt& (0+255),w,b
  8977  00013E  B4D8               	btfsc	status,2,c
  8978  000140  D002               	goto	l972
  8979                           
  8980                           ; BSR set to: 0
  8981  000142  0E06               	movlw	6
  8982                           
  8983                           ; BSR set to: 0
  8984  000144  0012               	return	
  8985  000146                     l972:
  8986                           
  8987                           ; BSR set to: 0
  8988                           ;pff.c: 784: if (disk_readp(buf, bsect, 13, sizeof (buf))) return FR_DISK_ERR;
  8989                           
  8990                           ; BSR set to: 0
  8991  000146  0E94               	movlw	low pf_mount@buf
  8992  000148  6F60               	movwf	disk_readp@rd& (0+255),b
  8993  00014A  0E00               	movlw	high pf_mount@buf
  8994  00014C  6F61               	movwf	(disk_readp@rd+1)& (0+255),b
  8995  00014E  C0C0  F062         	movff	pf_mount@bsect,disk_readp@sector
  8996  000152  C0C1  F063         	movff	pf_mount@bsect+1,disk_readp@sector+1
  8997  000156  C0C2  F064         	movff	pf_mount@bsect+2,disk_readp@sector+2
  8998  00015A  C0C3  F065         	movff	pf_mount@bsect+3,disk_readp@sector+3
  8999  00015E  0E00               	movlw	0
  9000  000160  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
  9001  000162  0E0D               	movlw	13
  9002  000164  6F66               	movwf	disk_readp@offset& (0+255),b
  9003  000166  0E00               	movlw	0
  9004  000168  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  9005  00016A  0E24               	movlw	36
  9006  00016C  6F68               	movwf	disk_readp@count& (0+255),b
  9007  00016E  EC3C  F009         	call	_disk_readp	;wreg free
  9008  000172  0900               	iorlw	0
  9009  000174  B4D8               	btfsc	status,2,c
  9010  000176  D002               	goto	l973
  9011  000178  0E01               	movlw	1
  9012  00017A  0012               	return	
  9013  00017C                     l973:
  9014                           
  9015                           ;pff.c: 786: fsize = (WORD)(((WORD)*((BYTE*)(buf+22-13)+1)<<8)|(WORD)*(BYTE*)(buf+22-13)
      +                          );
  9016  00017C  0100               	movlb	0	; () banked
  9017  00017E  519D               	movf	(pf_mount@buf+9)& (0+255),w,b
  9018  000180  C09E  F07E         	movff	pf_mount@buf+10,??_pf_mount
  9019  000184  6B7F               	clrf	(??_pf_mount+1)& (0+255),b
  9020  000186  C07E  F07F         	movff	??_pf_mount,??_pf_mount+1
  9021  00018A  6B7E               	clrf	??_pf_mount& (0+255),b
  9022  00018C  137E               	iorwf	??_pf_mount& (0+255),f,b
  9023  00018E  0E00               	movlw	0
  9024  000190  137F               	iorwf	(??_pf_mount+1)& (0+255),f,b
  9025  000192  C07E  F0C4         	movff	??_pf_mount,pf_mount@fsize
  9026  000196  C07F  F0C5         	movff	??_pf_mount+1,pf_mount@fsize+1
  9027  00019A  6BC6               	clrf	(pf_mount@fsize+2)& (0+255),b
  9028  00019C  6BC7               	clrf	(pf_mount@fsize+3)& (0+255),b
  9029                           
  9030                           ;pff.c: 787: if (!fsize) fsize = (DWORD)(((DWORD)*((BYTE*)(buf+36-13)+3)<<24)|((DWORD)*(
      +                          (BYTE*)(buf+36-13)+2)<<16)|((WORD)*((BYTE*)(buf+36-13)+1)<<8)|*(BYTE*)(buf+36-13));
  9031  00019E  51C4               	movf	pf_mount@fsize& (0+255),w,b
  9032  0001A0  11C5               	iorwf	(pf_mount@fsize+1)& (0+255),w,b
  9033  0001A2  11C6               	iorwf	(pf_mount@fsize+2)& (0+255),w,b
  9034  0001A4  11C7               	iorwf	(pf_mount@fsize+3)& (0+255),w,b
  9035  0001A6  A4D8               	btfss	status,2,c
  9036  0001A8  D039               	goto	l974
  9037                           
  9038                           ; BSR set to: 0
  9039  0001AA  51AC               	movf	(pf_mount@buf+24)& (0+255),w,b
  9040  0001AC  6F7F               	movwf	(??_pf_mount+1)& (0+255),b
  9041  0001AE  6B7E               	clrf	??_pf_mount& (0+255),b
  9042  0001B0  C0AD  F080         	movff	pf_mount@buf+25,??_pf_mount+2
  9043  0001B4  6B81               	clrf	(??_pf_mount+3)& (0+255),b
  9044  0001B6  6B82               	clrf	(??_pf_mount+4)& (0+255),b
  9045  0001B8  6B83               	clrf	(??_pf_mount+5)& (0+255),b
  9046  0001BA  C081  F083         	movff	??_pf_mount+3,??_pf_mount+5
  9047  0001BE  C080  F082         	movff	??_pf_mount+2,??_pf_mount+4
  9048  0001C2  6B81               	clrf	(??_pf_mount+3)& (0+255),b
  9049  0001C4  6B80               	clrf	(??_pf_mount+2)& (0+255),b
  9050  0001C6  C0AE  F084         	movff	pf_mount@buf+26,??_pf_mount+6
  9051  0001CA  6B85               	clrf	(??_pf_mount+7)& (0+255),b
  9052  0001CC  6B86               	clrf	(??_pf_mount+8)& (0+255),b
  9053  0001CE  6B87               	clrf	(??_pf_mount+9)& (0+255),b
  9054  0001D0  C084  F087         	movff	??_pf_mount+6,??_pf_mount+9
  9055  0001D4  6B86               	clrf	(??_pf_mount+8)& (0+255),b
  9056  0001D6  6B85               	clrf	(??_pf_mount+7)& (0+255),b
  9057  0001D8  6B84               	clrf	(??_pf_mount+6)& (0+255),b
  9058  0001DA  5180               	movf	(??_pf_mount+2)& (0+255),w,b
  9059  0001DC  1184               	iorwf	(??_pf_mount+6)& (0+255),w,b
  9060  0001DE  6F88               	movwf	(??_pf_mount+10)& (0+255),b
  9061  0001E0  5181               	movf	(??_pf_mount+3)& (0+255),w,b
  9062  0001E2  1185               	iorwf	(??_pf_mount+7)& (0+255),w,b
  9063  0001E4  6F89               	movwf	(??_pf_mount+11)& (0+255),b
  9064  0001E6  5182               	movf	(??_pf_mount+4)& (0+255),w,b
  9065  0001E8  1186               	iorwf	(??_pf_mount+8)& (0+255),w,b
  9066  0001EA  6F8A               	movwf	(??_pf_mount+12)& (0+255),b
  9067  0001EC  5183               	movf	(??_pf_mount+5)& (0+255),w,b
  9068  0001EE  1187               	iorwf	(??_pf_mount+9)& (0+255),w,b
  9069  0001F0  6F8B               	movwf	(??_pf_mount+13)& (0+255),b
  9070  0001F2  517E               	movf	??_pf_mount& (0+255),w,b
  9071  0001F4  1188               	iorwf	(??_pf_mount+10)& (0+255),w,b
  9072  0001F6  6F8C               	movwf	(??_pf_mount+14)& (0+255),b
  9073  0001F8  517F               	movf	(??_pf_mount+1)& (0+255),w,b
  9074  0001FA  1189               	iorwf	(??_pf_mount+11)& (0+255),w,b
  9075  0001FC  6F8D               	movwf	(??_pf_mount+15)& (0+255),b
  9076  0001FE  0E00               	movlw	0
  9077  000200  118A               	iorwf	(??_pf_mount+12)& (0+255),w,b
  9078  000202  6F8E               	movwf	(??_pf_mount+16)& (0+255),b
  9079  000204  0E00               	movlw	0
  9080  000206  118B               	iorwf	(??_pf_mount+13)& (0+255),w,b
  9081  000208  6F8F               	movwf	(??_pf_mount+17)& (0+255),b
  9082  00020A  51AB               	movf	(pf_mount@buf+23)& (0+255),w,b
  9083  00020C  118C               	iorwf	(??_pf_mount+14)& (0+255),w,b
  9084  00020E  6FC4               	movwf	pf_mount@fsize& (0+255),b
  9085  000210  518D               	movf	(??_pf_mount+15)& (0+255),w,b
  9086  000212  6FC5               	movwf	(pf_mount@fsize+1)& (0+255),b
  9087  000214  518E               	movf	(??_pf_mount+16)& (0+255),w,b
  9088  000216  6FC6               	movwf	(pf_mount@fsize+2)& (0+255),b
  9089  000218  518F               	movf	(??_pf_mount+17)& (0+255),w,b
  9090  00021A  6FC7               	movwf	(pf_mount@fsize+3)& (0+255),b
  9091  00021C                     l974:
  9092                           
  9093                           ; BSR set to: 0
  9094                           ;pff.c: 789: fsize *= buf[16-13];
  9095                           
  9096                           ; BSR set to: 0
  9097  00021C  C0C4  F01A         	movff	pf_mount@fsize,___lmul@multiplier
  9098  000220  C0C5  F01B         	movff	pf_mount@fsize+1,___lmul@multiplier+1
  9099  000224  C0C6  F01C         	movff	pf_mount@fsize+2,___lmul@multiplier+2
  9100  000228  C0C7  F01D         	movff	pf_mount@fsize+3,___lmul@multiplier+3
  9101  00022C  5197               	movf	(pf_mount@buf+3)& (0+255),w,b
  9102  00022E  6E1E               	movwf	___lmul@multiplicand,c
  9103  000230  6A1F               	clrf	___lmul@multiplicand+1,c
  9104  000232  6A20               	clrf	___lmul@multiplicand+2,c
  9105  000234  6A21               	clrf	___lmul@multiplicand+3,c
  9106  000236  EC1F  F017         	call	___lmul	;wreg free
  9107  00023A  C01A  F0C4         	movff	?___lmul,pf_mount@fsize
  9108  00023E  C01B  F0C5         	movff	?___lmul+1,pf_mount@fsize+1
  9109  000242  C01C  F0C6         	movff	?___lmul+2,pf_mount@fsize+2
  9110  000246  C01D  F0C7         	movff	?___lmul+3,pf_mount@fsize+3
  9111                           
  9112                           ;pff.c: 790: fs->fatbase = bsect + (WORD)(((WORD)*((BYTE*)(buf+14-13)+1)<<8)|(WORD)*(BYT
      +                          E*)(buf+14-13));
  9113  00024A  0100               	movlb	0	; () banked
  9114  00024C  5195               	movf	(pf_mount@buf+1)& (0+255),w,b
  9115  00024E  C096  F07E         	movff	pf_mount@buf+2,??_pf_mount
  9116  000252  6B7F               	clrf	(??_pf_mount+1)& (0+255),b
  9117  000254  C07E  F07F         	movff	??_pf_mount,??_pf_mount+1
  9118  000258  6B7E               	clrf	??_pf_mount& (0+255),b
  9119  00025A  137E               	iorwf	??_pf_mount& (0+255),f,b
  9120  00025C  0E00               	movlw	0
  9121  00025E  137F               	iorwf	(??_pf_mount+1)& (0+255),f,b
  9122  000260  517E               	movf	??_pf_mount& (0+255),w,b
  9123  000262  25C0               	addwf	pf_mount@bsect& (0+255),w,b
  9124  000264  6F80               	movwf	(??_pf_mount+2)& (0+255),b
  9125  000266  517F               	movf	(??_pf_mount+1)& (0+255),w,b
  9126  000268  21C1               	addwfc	(pf_mount@bsect+1)& (0+255),w,b
  9127  00026A  6F81               	movwf	(??_pf_mount+3)& (0+255),b
  9128  00026C  0E00               	movlw	0
  9129  00026E  21C2               	addwfc	(pf_mount@bsect+2)& (0+255),w,b
  9130  000270  6F82               	movwf	(??_pf_mount+4)& (0+255),b
  9131  000272  0E00               	movlw	0
  9132  000274  21C3               	addwfc	(pf_mount@bsect+3)& (0+255),w,b
  9133  000276  6F83               	movwf	(??_pf_mount+5)& (0+255),b
  9134  000278  EE20 F00A          	lfsr	2,10
  9135  00027C  517C               	movf	pf_mount@fs& (0+255),w,b
  9136  00027E  26D9               	addwf	fsr2l,f,c
  9137  000280  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9138  000282  22DA               	addwfc	fsr2h,f,c
  9139  000284  C080  FFDE         	movff	??_pf_mount+2,postinc2
  9140  000288  C081  FFDE         	movff	??_pf_mount+3,postinc2
  9141  00028C  C082  FFDE         	movff	??_pf_mount+4,postinc2
  9142  000290  C083  FFDE         	movff	??_pf_mount+5,postinc2
  9143                           
  9144                           ; BSR set to: 0
  9145                           ;pff.c: 791: fs->csize = buf[13-13];
  9146  000294  EE20 F002          	lfsr	2,2
  9147  000298  517C               	movf	pf_mount@fs& (0+255),w,b
  9148  00029A  26D9               	addwf	fsr2l,f,c
  9149  00029C  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9150  00029E  22DA               	addwfc	fsr2h,f,c
  9151  0002A0  C094  FFDF         	movff	pf_mount@buf,indf2
  9152                           
  9153                           ; BSR set to: 0
  9154                           ;pff.c: 792: fs->n_rootdir = (WORD)(((WORD)*((BYTE*)(buf+17-13)+1)<<8)|(WORD)*(BYTE*)(bu
      +                          f+17-13));
  9155  0002A4  5198               	movf	(pf_mount@buf+4)& (0+255),w,b
  9156  0002A6  C099  F07E         	movff	pf_mount@buf+5,??_pf_mount
  9157  0002AA  6B7F               	clrf	(??_pf_mount+1)& (0+255),b
  9158  0002AC  C07E  F07F         	movff	??_pf_mount,??_pf_mount+1
  9159  0002B0  6B7E               	clrf	??_pf_mount& (0+255),b
  9160  0002B2  137E               	iorwf	??_pf_mount& (0+255),f,b
  9161  0002B4  0E00               	movlw	0
  9162  0002B6  137F               	iorwf	(??_pf_mount+1)& (0+255),f,b
  9163  0002B8  EE20 F004          	lfsr	2,4
  9164  0002BC  517C               	movf	pf_mount@fs& (0+255),w,b
  9165  0002BE  26D9               	addwf	fsr2l,f,c
  9166  0002C0  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9167  0002C2  22DA               	addwfc	fsr2h,f,c
  9168  0002C4  C07E  FFDE         	movff	??_pf_mount,postinc2
  9169  0002C8  C07F  FFDD         	movff	??_pf_mount+1,postdec2
  9170                           
  9171                           ; BSR set to: 0
  9172                           ;pff.c: 793: tsect = (WORD)(((WORD)*((BYTE*)(buf+19-13)+1)<<8)|(WORD)*(BYTE*)(buf+19-13)
      +                          );
  9173  0002CC  519A               	movf	(pf_mount@buf+6)& (0+255),w,b
  9174  0002CE  C09B  F07E         	movff	pf_mount@buf+7,??_pf_mount
  9175  0002D2  6B7F               	clrf	(??_pf_mount+1)& (0+255),b
  9176  0002D4  C07E  F07F         	movff	??_pf_mount,??_pf_mount+1
  9177  0002D8  6B7E               	clrf	??_pf_mount& (0+255),b
  9178  0002DA  137E               	iorwf	??_pf_mount& (0+255),f,b
  9179  0002DC  0E00               	movlw	0
  9180  0002DE  137F               	iorwf	(??_pf_mount+1)& (0+255),f,b
  9181  0002E0  C07E  F0B8         	movff	??_pf_mount,pf_mount@tsect
  9182  0002E4  C07F  F0B9         	movff	??_pf_mount+1,pf_mount@tsect+1
  9183  0002E8  6BBA               	clrf	(pf_mount@tsect+2)& (0+255),b
  9184  0002EA  6BBB               	clrf	(pf_mount@tsect+3)& (0+255),b
  9185                           
  9186                           ; BSR set to: 0
  9187                           ;pff.c: 794: if (!tsect) tsect = (DWORD)(((DWORD)*((BYTE*)(buf+32-13)+3)<<24)|((DWORD)*(
      +                          (BYTE*)(buf+32-13)+2)<<16)|((WORD)*((BYTE*)(buf+32-13)+1)<<8)|*(BYTE*)(buf+32-13));
  9188  0002EC  51B8               	movf	pf_mount@tsect& (0+255),w,b
  9189  0002EE  11B9               	iorwf	(pf_mount@tsect+1)& (0+255),w,b
  9190  0002F0  11BA               	iorwf	(pf_mount@tsect+2)& (0+255),w,b
  9191  0002F2  11BB               	iorwf	(pf_mount@tsect+3)& (0+255),w,b
  9192  0002F4  A4D8               	btfss	status,2,c
  9193  0002F6  D039               	goto	l975
  9194                           
  9195                           ; BSR set to: 0
  9196  0002F8  51A8               	movf	(pf_mount@buf+20)& (0+255),w,b
  9197  0002FA  6F7F               	movwf	(??_pf_mount+1)& (0+255),b
  9198  0002FC  6B7E               	clrf	??_pf_mount& (0+255),b
  9199  0002FE  C0A9  F080         	movff	pf_mount@buf+21,??_pf_mount+2
  9200  000302  6B81               	clrf	(??_pf_mount+3)& (0+255),b
  9201  000304  6B82               	clrf	(??_pf_mount+4)& (0+255),b
  9202  000306  6B83               	clrf	(??_pf_mount+5)& (0+255),b
  9203  000308  C081  F083         	movff	??_pf_mount+3,??_pf_mount+5
  9204  00030C  C080  F082         	movff	??_pf_mount+2,??_pf_mount+4
  9205  000310  6B81               	clrf	(??_pf_mount+3)& (0+255),b
  9206  000312  6B80               	clrf	(??_pf_mount+2)& (0+255),b
  9207  000314  C0AA  F084         	movff	pf_mount@buf+22,??_pf_mount+6
  9208  000318  6B85               	clrf	(??_pf_mount+7)& (0+255),b
  9209  00031A  6B86               	clrf	(??_pf_mount+8)& (0+255),b
  9210  00031C  6B87               	clrf	(??_pf_mount+9)& (0+255),b
  9211  00031E  C084  F087         	movff	??_pf_mount+6,??_pf_mount+9
  9212  000322  6B86               	clrf	(??_pf_mount+8)& (0+255),b
  9213  000324  6B85               	clrf	(??_pf_mount+7)& (0+255),b
  9214  000326  6B84               	clrf	(??_pf_mount+6)& (0+255),b
  9215  000328  5180               	movf	(??_pf_mount+2)& (0+255),w,b
  9216  00032A  1184               	iorwf	(??_pf_mount+6)& (0+255),w,b
  9217  00032C  6F88               	movwf	(??_pf_mount+10)& (0+255),b
  9218  00032E  5181               	movf	(??_pf_mount+3)& (0+255),w,b
  9219  000330  1185               	iorwf	(??_pf_mount+7)& (0+255),w,b
  9220  000332  6F89               	movwf	(??_pf_mount+11)& (0+255),b
  9221  000334  5182               	movf	(??_pf_mount+4)& (0+255),w,b
  9222  000336  1186               	iorwf	(??_pf_mount+8)& (0+255),w,b
  9223  000338  6F8A               	movwf	(??_pf_mount+12)& (0+255),b
  9224  00033A  5183               	movf	(??_pf_mount+5)& (0+255),w,b
  9225  00033C  1187               	iorwf	(??_pf_mount+9)& (0+255),w,b
  9226  00033E  6F8B               	movwf	(??_pf_mount+13)& (0+255),b
  9227  000340  517E               	movf	??_pf_mount& (0+255),w,b
  9228  000342  1188               	iorwf	(??_pf_mount+10)& (0+255),w,b
  9229  000344  6F8C               	movwf	(??_pf_mount+14)& (0+255),b
  9230  000346  517F               	movf	(??_pf_mount+1)& (0+255),w,b
  9231  000348  1189               	iorwf	(??_pf_mount+11)& (0+255),w,b
  9232  00034A  6F8D               	movwf	(??_pf_mount+15)& (0+255),b
  9233  00034C  0E00               	movlw	0
  9234  00034E  118A               	iorwf	(??_pf_mount+12)& (0+255),w,b
  9235  000350  6F8E               	movwf	(??_pf_mount+16)& (0+255),b
  9236  000352  0E00               	movlw	0
  9237  000354  118B               	iorwf	(??_pf_mount+13)& (0+255),w,b
  9238  000356  6F8F               	movwf	(??_pf_mount+17)& (0+255),b
  9239  000358  51A7               	movf	(pf_mount@buf+19)& (0+255),w,b
  9240  00035A  118C               	iorwf	(??_pf_mount+14)& (0+255),w,b
  9241  00035C  6FB8               	movwf	pf_mount@tsect& (0+255),b
  9242  00035E  518D               	movf	(??_pf_mount+15)& (0+255),w,b
  9243  000360  6FB9               	movwf	(pf_mount@tsect+1)& (0+255),b
  9244  000362  518E               	movf	(??_pf_mount+16)& (0+255),w,b
  9245  000364  6FBA               	movwf	(pf_mount@tsect+2)& (0+255),b
  9246  000366  518F               	movf	(??_pf_mount+17)& (0+255),w,b
  9247  000368  6FBB               	movwf	(pf_mount@tsect+3)& (0+255),b
  9248  00036A                     l975:
  9249                           
  9250                           ; BSR set to: 0
  9251                           ;pff.c: 795: mclst = (tsect
  9252                           ;pff.c: 796: - (WORD)(((WORD)*((BYTE*)(buf+14-13)+1)<<8)|(WORD)*(BYTE*)(buf+14-13)) - fs
      +                          ize - fs->n_rootdir / 16
  9253                           ;pff.c: 797: ) / fs->csize + 2;
  9254                           
  9255                           ; BSR set to: 0
  9256  00036A  EE20 F004          	lfsr	2,4
  9257  00036E  517C               	movf	pf_mount@fs& (0+255),w,b
  9258  000370  26D9               	addwf	fsr2l,f,c
  9259  000372  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9260  000374  22DA               	addwfc	fsr2h,f,c
  9261  000376  CFDE F07E          	movff	postinc2,??_pf_mount
  9262  00037A  CFDD F07F          	movff	postdec2,??_pf_mount+1
  9263  00037E  0E04               	movlw	4
  9264  000380  6F80               	movwf	(??_pf_mount+2)& (0+255),b
  9265  000382                     u7845:
  9266  000382  90D8               	bcf	status,0,c
  9267  000384  337F               	rrcf	(??_pf_mount+1)& (0+255),f,b
  9268  000386  337E               	rrcf	??_pf_mount& (0+255),f,b
  9269  000388  2F80               	decfsz	(??_pf_mount+2)& (0+255),f,b
  9270  00038A  D7FB               	goto	u7845
  9271  00038C  5195               	movf	(pf_mount@buf+1)& (0+255),w,b
  9272  00038E  C096  F081         	movff	pf_mount@buf+2,??_pf_mount+3
  9273  000392  6B82               	clrf	(??_pf_mount+4)& (0+255),b
  9274  000394  C081  F082         	movff	??_pf_mount+3,??_pf_mount+4
  9275  000398  6B81               	clrf	(??_pf_mount+3)& (0+255),b
  9276  00039A  1381               	iorwf	(??_pf_mount+3)& (0+255),f,b
  9277  00039C  0E00               	movlw	0
  9278  00039E  1382               	iorwf	(??_pf_mount+4)& (0+255),f,b
  9279  0003A0  5181               	movf	(??_pf_mount+3)& (0+255),w,b
  9280  0003A2  257E               	addwf	??_pf_mount& (0+255),w,b
  9281  0003A4  6F83               	movwf	(??_pf_mount+5)& (0+255),b
  9282  0003A6  5182               	movf	(??_pf_mount+4)& (0+255),w,b
  9283  0003A8  217F               	addwfc	(??_pf_mount+1)& (0+255),w,b
  9284  0003AA  6F84               	movwf	(??_pf_mount+6)& (0+255),b
  9285  0003AC  6B85               	clrf	(??_pf_mount+7)& (0+255),b
  9286  0003AE  B0D8               	btfsc	status,0,c
  9287  0003B0  2B85               	incf	(??_pf_mount+7)& (0+255),f,b
  9288  0003B2  6B86               	clrf	(??_pf_mount+8)& (0+255),b
  9289  0003B4  51C4               	movf	pf_mount@fsize& (0+255),w,b
  9290  0003B6  2583               	addwf	(??_pf_mount+5)& (0+255),w,b
  9291  0003B8  6F87               	movwf	(??_pf_mount+9)& (0+255),b
  9292  0003BA  51C5               	movf	(pf_mount@fsize+1)& (0+255),w,b
  9293  0003BC  2184               	addwfc	(??_pf_mount+6)& (0+255),w,b
  9294  0003BE  6F88               	movwf	(??_pf_mount+10)& (0+255),b
  9295  0003C0  51C6               	movf	(pf_mount@fsize+2)& (0+255),w,b
  9296  0003C2  2185               	addwfc	(??_pf_mount+7)& (0+255),w,b
  9297  0003C4  6F89               	movwf	(??_pf_mount+11)& (0+255),b
  9298  0003C6  51C7               	movf	(pf_mount@fsize+3)& (0+255),w,b
  9299  0003C8  2186               	addwfc	(??_pf_mount+8)& (0+255),w,b
  9300  0003CA  6F8A               	movwf	(??_pf_mount+12)& (0+255),b
  9301  0003CC  1F87               	comf	(??_pf_mount+9)& (0+255),f,b
  9302  0003CE  1F88               	comf	(??_pf_mount+10)& (0+255),f,b
  9303  0003D0  1F89               	comf	(??_pf_mount+11)& (0+255),f,b
  9304  0003D2  1F8A               	comf	(??_pf_mount+12)& (0+255),f,b
  9305  0003D4  2B87               	incf	(??_pf_mount+9)& (0+255),f,b
  9306  0003D6  0E00               	movlw	0
  9307  0003D8  2388               	addwfc	(??_pf_mount+10)& (0+255),f,b
  9308  0003DA  2389               	addwfc	(??_pf_mount+11)& (0+255),f,b
  9309  0003DC  238A               	addwfc	(??_pf_mount+12)& (0+255),f,b
  9310  0003DE  51B8               	movf	pf_mount@tsect& (0+255),w,b
  9311  0003E0  2587               	addwf	(??_pf_mount+9)& (0+255),w,b
  9312  0003E2  6E1A               	movwf	___lldiv@dividend,c
  9313  0003E4  51B9               	movf	(pf_mount@tsect+1)& (0+255),w,b
  9314  0003E6  2188               	addwfc	(??_pf_mount+10)& (0+255),w,b
  9315  0003E8  6E1B               	movwf	___lldiv@dividend+1,c
  9316  0003EA  51BA               	movf	(pf_mount@tsect+2)& (0+255),w,b
  9317  0003EC  2189               	addwfc	(??_pf_mount+11)& (0+255),w,b
  9318  0003EE  6E1C               	movwf	___lldiv@dividend+2,c
  9319  0003F0  51BB               	movf	(pf_mount@tsect+3)& (0+255),w,b
  9320  0003F2  218A               	addwfc	(??_pf_mount+12)& (0+255),w,b
  9321  0003F4  6E1D               	movwf	___lldiv@dividend+3,c
  9322  0003F6  EE20 F002          	lfsr	2,2
  9323  0003FA  517C               	movf	pf_mount@fs& (0+255),w,b
  9324  0003FC  26D9               	addwf	fsr2l,f,c
  9325  0003FE  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9326  000400  22DA               	addwfc	fsr2h,f,c
  9327  000402  50DF               	movf	indf2,w,c
  9328  000404  6F8B               	movwf	(??_pf_mount+13)& (0+255),b
  9329  000406  518B               	movf	(??_pf_mount+13)& (0+255),w,b
  9330  000408  6E1E               	movwf	___lldiv@divisor,c
  9331  00040A  6A1F               	clrf	___lldiv@divisor+1,c
  9332  00040C  6A20               	clrf	___lldiv@divisor+2,c
  9333  00040E  6A21               	clrf	___lldiv@divisor+3,c
  9334  000410  EC53  F015         	call	___lldiv	;wreg free
  9335  000414  0E02               	movlw	2
  9336  000416  241A               	addwf	?___lldiv,w,c
  9337  000418  0100               	movlb	0	; () banked
  9338  00041A  6FBC               	movwf	pf_mount@mclst& (0+255),b
  9339  00041C  0E00               	movlw	0
  9340  00041E  201B               	addwfc	?___lldiv+1,w,c
  9341  000420  6FBD               	movwf	(pf_mount@mclst+1)& (0+255),b
  9342  000422  0E00               	movlw	0
  9343  000424  201C               	addwfc	?___lldiv+2,w,c
  9344  000426  6FBE               	movwf	(pf_mount@mclst+2)& (0+255),b
  9345  000428  0E00               	movlw	0
  9346  00042A  201D               	addwfc	?___lldiv+3,w,c
  9347  00042C  6FBF               	movwf	(pf_mount@mclst+3)& (0+255),b
  9348                           
  9349                           ; BSR set to: 0
  9350                           ;pff.c: 798: fs->n_fatent = (DWORD)mclst;
  9351  00042E  EE20 F006          	lfsr	2,6
  9352  000432  517C               	movf	pf_mount@fs& (0+255),w,b
  9353  000434  26D9               	addwf	fsr2l,f,c
  9354  000436  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9355  000438  22DA               	addwfc	fsr2h,f,c
  9356  00043A  C0BC  FFDE         	movff	pf_mount@mclst,postinc2
  9357  00043E  C0BD  FFDE         	movff	pf_mount@mclst+1,postinc2
  9358  000442  C0BE  FFDE         	movff	pf_mount@mclst+2,postinc2
  9359  000446  C0BF  FFDE         	movff	pf_mount@mclst+3,postinc2
  9360                           
  9361                           ; BSR set to: 0
  9362                           ;pff.c: 801: if (1 && mclst < 0xFF7)
  9363  00044A  0E00               	movlw	0
  9364  00044C  6FC8               	movwf	pf_mount@fmt& (0+255),b
  9365                           
  9366                           ; BSR set to: 0
  9367  00044E  51BF               	movf	(pf_mount@mclst+3)& (0+255),w,b
  9368  000450  11BE               	iorwf	(pf_mount@mclst+2)& (0+255),w,b
  9369  000452  E108               	bnz	l6992
  9370  000454  0EF7               	movlw	247
  9371  000456  5DBC               	subwf	pf_mount@mclst& (0+255),w,b
  9372  000458  0E0F               	movlw	15
  9373  00045A  59BD               	subwfb	(pf_mount@mclst+1)& (0+255),w,b
  9374  00045C  B0D8               	btfsc	status,0,c
  9375  00045E  D002               	goto	l976
  9376                           
  9377                           ; BSR set to: 0
  9378                           ;pff.c: 802: fmt = 1;
  9379  000460  0E01               	movlw	1
  9380  000462  6FC8               	movwf	pf_mount@fmt& (0+255),b
  9381  000464                     l976:
  9382  000464                     l6992:
  9383                           
  9384                           ; BSR set to: 0
  9385  000464  51BF               	movf	(pf_mount@mclst+3)& (0+255),w,b
  9386  000466  11BE               	iorwf	(pf_mount@mclst+2)& (0+255),w,b
  9387  000468  E106               	bnz	u7860
  9388  00046A  0EF8               	movlw	248
  9389  00046C  5DBC               	subwf	pf_mount@mclst& (0+255),w,b
  9390  00046E  0E0F               	movlw	15
  9391  000470  59BD               	subwfb	(pf_mount@mclst+1)& (0+255),w,b
  9392  000472  A0D8               	btfss	status,0,c
  9393  000474  D00B               	goto	l977
  9394  000476                     u7860:
  9395                           
  9396                           ; BSR set to: 0
  9397  000476  51BF               	movf	(pf_mount@mclst+3)& (0+255),w,b
  9398  000478  11BE               	iorwf	(pf_mount@mclst+2)& (0+255),w,b
  9399  00047A  E108               	bnz	l6998
  9400  00047C  0EF7               	movlw	247
  9401  00047E  5DBC               	subwf	pf_mount@mclst& (0+255),w,b
  9402  000480  0EFF               	movlw	255
  9403  000482  59BD               	subwfb	(pf_mount@mclst+1)& (0+255),w,b
  9404  000484  B0D8               	btfsc	status,0,c
  9405  000486  D002               	goto	l977
  9406                           
  9407                           ; BSR set to: 0
  9408                           ;pff.c: 804: fmt = 2;
  9409  000488  0E02               	movlw	2
  9410  00048A  6FC8               	movwf	pf_mount@fmt& (0+255),b
  9411  00048C                     l977:
  9412  00048C                     l6998:
  9413                           
  9414                           ; BSR set to: 0
  9415  00048C  51BF               	movf	(pf_mount@mclst+3)& (0+255),w,b
  9416  00048E  11BE               	iorwf	(pf_mount@mclst+2)& (0+255),w,b
  9417  000490  E106               	bnz	u7880
  9418  000492  0EF7               	movlw	247
  9419  000494  5DBC               	subwf	pf_mount@mclst& (0+255),w,b
  9420  000496  0EFF               	movlw	255
  9421  000498  59BD               	subwfb	(pf_mount@mclst+1)& (0+255),w,b
  9422  00049A  A0D8               	btfss	status,0,c
  9423  00049C  D002               	goto	l978
  9424  00049E                     u7880:
  9425                           
  9426                           ; BSR set to: 0
  9427                           ;pff.c: 806: fmt = 3;
  9428  00049E  0E03               	movlw	3
  9429  0004A0  6FC8               	movwf	pf_mount@fmt& (0+255),b
  9430  0004A2                     l978:
  9431                           
  9432                           ; BSR set to: 0
  9433                           ;pff.c: 807: if (!fmt) return FR_NO_FILESYSTEM;
  9434  0004A2  51C8               	movf	pf_mount@fmt& (0+255),w,b
  9435  0004A4  A4D8               	btfss	status,2,c
  9436  0004A6  D002               	goto	l979
  9437                           
  9438                           ; BSR set to: 0
  9439  0004A8  0E06               	movlw	6
  9440                           
  9441                           ; BSR set to: 0
  9442  0004AA  0012               	return	
  9443  0004AC                     l979:
  9444                           
  9445                           ; BSR set to: 0
  9446                           ;pff.c: 810: if (0 || (1 && fmt == 3))
  9447                           
  9448                           ; BSR set to: 0
  9449  0004AC  C07C  FFD9         	movff	pf_mount@fs,fsr2l
  9450  0004B0  C07D  FFDA         	movff	pf_mount@fs+1,fsr2h
  9451  0004B4  C0C8  FFDF         	movff	pf_mount@fmt,indf2
  9452                           
  9453                           ; BSR set to: 0
  9454  0004B8  0E03               	movlw	3
  9455  0004BA  19C8               	xorwf	pf_mount@fmt& (0+255),w,b
  9456  0004BC  A4D8               	btfss	status,2,c
  9457  0004BE  D048               	goto	l980
  9458                           
  9459                           ; BSR set to: 0
  9460                           ;pff.c: 811: fs->dirbase = (DWORD)(((DWORD)*((BYTE*)(buf+(44-13))+3)<<24)|((DWORD)*((BYT
      +                          E*)(buf+(44-13))+2)<<16)|((WORD)*((BYTE*)(buf+(44-13))+1)<<8)|*(BYTE*)(buf+(44-13)));
  9461                           
  9462                           ; BSR set to: 0
  9463  0004C0  51B4               	movf	(pf_mount@buf+32)& (0+255),w,b
  9464  0004C2  6F7F               	movwf	(??_pf_mount+1)& (0+255),b
  9465  0004C4  6B7E               	clrf	??_pf_mount& (0+255),b
  9466  0004C6  C0B5  F080         	movff	pf_mount@buf+33,??_pf_mount+2
  9467  0004CA  6B81               	clrf	(??_pf_mount+3)& (0+255),b
  9468  0004CC  6B82               	clrf	(??_pf_mount+4)& (0+255),b
  9469  0004CE  6B83               	clrf	(??_pf_mount+5)& (0+255),b
  9470  0004D0  C081  F083         	movff	??_pf_mount+3,??_pf_mount+5
  9471  0004D4  C080  F082         	movff	??_pf_mount+2,??_pf_mount+4
  9472  0004D8  6B81               	clrf	(??_pf_mount+3)& (0+255),b
  9473  0004DA  6B80               	clrf	(??_pf_mount+2)& (0+255),b
  9474  0004DC  C0B6  F084         	movff	pf_mount@buf+34,??_pf_mount+6
  9475  0004E0  6B85               	clrf	(??_pf_mount+7)& (0+255),b
  9476  0004E2  6B86               	clrf	(??_pf_mount+8)& (0+255),b
  9477  0004E4  6B87               	clrf	(??_pf_mount+9)& (0+255),b
  9478  0004E6  C084  F087         	movff	??_pf_mount+6,??_pf_mount+9
  9479  0004EA  6B86               	clrf	(??_pf_mount+8)& (0+255),b
  9480  0004EC  6B85               	clrf	(??_pf_mount+7)& (0+255),b
  9481  0004EE  6B84               	clrf	(??_pf_mount+6)& (0+255),b
  9482  0004F0  5180               	movf	(??_pf_mount+2)& (0+255),w,b
  9483  0004F2  1184               	iorwf	(??_pf_mount+6)& (0+255),w,b
  9484  0004F4  6F88               	movwf	(??_pf_mount+10)& (0+255),b
  9485  0004F6  5181               	movf	(??_pf_mount+3)& (0+255),w,b
  9486  0004F8  1185               	iorwf	(??_pf_mount+7)& (0+255),w,b
  9487  0004FA  6F89               	movwf	(??_pf_mount+11)& (0+255),b
  9488  0004FC  5182               	movf	(??_pf_mount+4)& (0+255),w,b
  9489  0004FE  1186               	iorwf	(??_pf_mount+8)& (0+255),w,b
  9490  000500  6F8A               	movwf	(??_pf_mount+12)& (0+255),b
  9491  000502  5183               	movf	(??_pf_mount+5)& (0+255),w,b
  9492  000504  1187               	iorwf	(??_pf_mount+9)& (0+255),w,b
  9493  000506  6F8B               	movwf	(??_pf_mount+13)& (0+255),b
  9494  000508  517E               	movf	??_pf_mount& (0+255),w,b
  9495  00050A  1188               	iorwf	(??_pf_mount+10)& (0+255),w,b
  9496  00050C  6F8C               	movwf	(??_pf_mount+14)& (0+255),b
  9497  00050E  517F               	movf	(??_pf_mount+1)& (0+255),w,b
  9498  000510  1189               	iorwf	(??_pf_mount+11)& (0+255),w,b
  9499  000512  6F8D               	movwf	(??_pf_mount+15)& (0+255),b
  9500  000514  0E00               	movlw	0
  9501  000516  118A               	iorwf	(??_pf_mount+12)& (0+255),w,b
  9502  000518  6F8E               	movwf	(??_pf_mount+16)& (0+255),b
  9503  00051A  0E00               	movlw	0
  9504  00051C  118B               	iorwf	(??_pf_mount+13)& (0+255),w,b
  9505  00051E  6F8F               	movwf	(??_pf_mount+17)& (0+255),b
  9506  000520  51B3               	movf	(pf_mount@buf+31)& (0+255),w,b
  9507  000522  118C               	iorwf	(??_pf_mount+14)& (0+255),w,b
  9508  000524  6F90               	movwf	(??_pf_mount+18)& (0+255),b
  9509  000526  518D               	movf	(??_pf_mount+15)& (0+255),w,b
  9510  000528  6F91               	movwf	(??_pf_mount+19)& (0+255),b
  9511  00052A  518E               	movf	(??_pf_mount+16)& (0+255),w,b
  9512  00052C  6F92               	movwf	(??_pf_mount+20)& (0+255),b
  9513  00052E  518F               	movf	(??_pf_mount+17)& (0+255),w,b
  9514  000530  6F93               	movwf	(??_pf_mount+21)& (0+255),b
  9515  000532  EE20 F00E          	lfsr	2,14
  9516  000536  517C               	movf	pf_mount@fs& (0+255),w,b
  9517  000538  26D9               	addwf	fsr2l,f,c
  9518  00053A  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9519  00053C  22DA               	addwfc	fsr2h,f,c
  9520  00053E  C090  FFDE         	movff	??_pf_mount+18,postinc2
  9521  000542  C091  FFDE         	movff	??_pf_mount+19,postinc2
  9522  000546  C092  FFDE         	movff	??_pf_mount+20,postinc2
  9523  00054A  C093  FFDE         	movff	??_pf_mount+21,postinc2
  9524  00054E  D028               	goto	l983
  9525  000550                     l980:
  9526                           
  9527                           ; BSR set to: 0
  9528                           ;pff.c: 812: else
  9529                           ;pff.c: 813: fs->dirbase = fs->fatbase + fsize;
  9530                           
  9531                           ; BSR set to: 0
  9532  000550  EE20 F00A          	lfsr	2,10
  9533  000554  517C               	movf	pf_mount@fs& (0+255),w,b
  9534  000556  26D9               	addwf	fsr2l,f,c
  9535  000558  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9536  00055A  22DA               	addwfc	fsr2h,f,c
  9537  00055C  CFDE F07E          	movff	postinc2,??_pf_mount
  9538  000560  CFDE F07F          	movff	postinc2,??_pf_mount+1
  9539  000564  CFDE F080          	movff	postinc2,??_pf_mount+2
  9540  000568  CFDE F081          	movff	postinc2,??_pf_mount+3
  9541  00056C  51C4               	movf	pf_mount@fsize& (0+255),w,b
  9542  00056E  257E               	addwf	??_pf_mount& (0+255),w,b
  9543  000570  6F82               	movwf	(??_pf_mount+4)& (0+255),b
  9544  000572  51C5               	movf	(pf_mount@fsize+1)& (0+255),w,b
  9545  000574  217F               	addwfc	(??_pf_mount+1)& (0+255),w,b
  9546  000576  6F83               	movwf	(??_pf_mount+5)& (0+255),b
  9547  000578  51C6               	movf	(pf_mount@fsize+2)& (0+255),w,b
  9548  00057A  2180               	addwfc	(??_pf_mount+2)& (0+255),w,b
  9549  00057C  6F84               	movwf	(??_pf_mount+6)& (0+255),b
  9550  00057E  51C7               	movf	(pf_mount@fsize+3)& (0+255),w,b
  9551  000580  2181               	addwfc	(??_pf_mount+3)& (0+255),w,b
  9552  000582  6F85               	movwf	(??_pf_mount+7)& (0+255),b
  9553  000584  EE20 F00E          	lfsr	2,14
  9554  000588  517C               	movf	pf_mount@fs& (0+255),w,b
  9555  00058A  26D9               	addwf	fsr2l,f,c
  9556  00058C  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9557  00058E  22DA               	addwfc	fsr2h,f,c
  9558  000590  C082  FFDE         	movff	??_pf_mount+4,postinc2
  9559  000594  C083  FFDE         	movff	??_pf_mount+5,postinc2
  9560  000598  C084  FFDE         	movff	??_pf_mount+6,postinc2
  9561  00059C  C085  FFDE         	movff	??_pf_mount+7,postinc2
  9562  0005A0                     l983:
  9563                           
  9564                           ; BSR set to: 0
  9565                           ;pff.c: 814: fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;
  9566  0005A0  EE20 F00A          	lfsr	2,10
  9567  0005A4  517C               	movf	pf_mount@fs& (0+255),w,b
  9568  0005A6  26D9               	addwf	fsr2l,f,c
  9569  0005A8  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9570  0005AA  22DA               	addwfc	fsr2h,f,c
  9571  0005AC  CFDE F07E          	movff	postinc2,??_pf_mount
  9572  0005B0  CFDE F07F          	movff	postinc2,??_pf_mount+1
  9573  0005B4  CFDE F080          	movff	postinc2,??_pf_mount+2
  9574  0005B8  CFDE F081          	movff	postinc2,??_pf_mount+3
  9575  0005BC  EE20 F004          	lfsr	2,4
  9576  0005C0  517C               	movf	pf_mount@fs& (0+255),w,b
  9577  0005C2  26D9               	addwf	fsr2l,f,c
  9578  0005C4  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9579  0005C6  22DA               	addwfc	fsr2h,f,c
  9580  0005C8  CFDE F082          	movff	postinc2,??_pf_mount+4
  9581  0005CC  CFDD F083          	movff	postdec2,??_pf_mount+5
  9582  0005D0  0E04               	movlw	4
  9583  0005D2  6F84               	movwf	(??_pf_mount+6)& (0+255),b
  9584  0005D4                     u7915:
  9585  0005D4  90D8               	bcf	status,0,c
  9586  0005D6  3383               	rrcf	(??_pf_mount+5)& (0+255),f,b
  9587  0005D8  3382               	rrcf	(??_pf_mount+4)& (0+255),f,b
  9588  0005DA  2F84               	decfsz	(??_pf_mount+6)& (0+255),f,b
  9589  0005DC  D7FB               	goto	u7915
  9590  0005DE  5182               	movf	(??_pf_mount+4)& (0+255),w,b
  9591  0005E0  257E               	addwf	??_pf_mount& (0+255),w,b
  9592  0005E2  6F85               	movwf	(??_pf_mount+7)& (0+255),b
  9593  0005E4  5183               	movf	(??_pf_mount+5)& (0+255),w,b
  9594  0005E6  217F               	addwfc	(??_pf_mount+1)& (0+255),w,b
  9595  0005E8  6F86               	movwf	(??_pf_mount+8)& (0+255),b
  9596  0005EA  0E00               	movlw	0
  9597  0005EC  2180               	addwfc	(??_pf_mount+2)& (0+255),w,b
  9598  0005EE  6F87               	movwf	(??_pf_mount+9)& (0+255),b
  9599  0005F0  0E00               	movlw	0
  9600  0005F2  2181               	addwfc	(??_pf_mount+3)& (0+255),w,b
  9601  0005F4  6F88               	movwf	(??_pf_mount+10)& (0+255),b
  9602  0005F6  51C4               	movf	pf_mount@fsize& (0+255),w,b
  9603  0005F8  2585               	addwf	(??_pf_mount+7)& (0+255),w,b
  9604  0005FA  6F89               	movwf	(??_pf_mount+11)& (0+255),b
  9605  0005FC  51C5               	movf	(pf_mount@fsize+1)& (0+255),w,b
  9606  0005FE  2186               	addwfc	(??_pf_mount+8)& (0+255),w,b
  9607  000600  6F8A               	movwf	(??_pf_mount+12)& (0+255),b
  9608  000602  51C6               	movf	(pf_mount@fsize+2)& (0+255),w,b
  9609  000604  2187               	addwfc	(??_pf_mount+9)& (0+255),w,b
  9610  000606  6F8B               	movwf	(??_pf_mount+13)& (0+255),b
  9611  000608  51C7               	movf	(pf_mount@fsize+3)& (0+255),w,b
  9612  00060A  2188               	addwfc	(??_pf_mount+10)& (0+255),w,b
  9613  00060C  6F8C               	movwf	(??_pf_mount+14)& (0+255),b
  9614  00060E  EE20 F012          	lfsr	2,18
  9615  000612  517C               	movf	pf_mount@fs& (0+255),w,b
  9616  000614  26D9               	addwf	fsr2l,f,c
  9617  000616  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9618  000618  22DA               	addwfc	fsr2h,f,c
  9619  00061A  C089  FFDE         	movff	??_pf_mount+11,postinc2
  9620  00061E  C08A  FFDE         	movff	??_pf_mount+12,postinc2
  9621  000622  C08B  FFDE         	movff	??_pf_mount+13,postinc2
  9622  000626  C08C  FFDE         	movff	??_pf_mount+14,postinc2
  9623                           
  9624                           ;pff.c: 816: fs->flag = 0;
  9625  00062A  EE20 F001          	lfsr	2,1
  9626  00062E  517C               	movf	pf_mount@fs& (0+255),w,b
  9627  000630  26D9               	addwf	fsr2l,f,c
  9628  000632  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9629  000634  22DA               	addwfc	fsr2h,f,c
  9630  000636  0E00               	movlw	0
  9631  000638  6EDF               	movwf	indf2,c
  9632                           
  9633                           ; BSR set to: 0
  9634                           ;pff.c: 817: FatFs = fs;
  9635  00063A  C07C  F035         	movff	pf_mount@fs,_FatFs
  9636  00063E  C07D  F036         	movff	pf_mount@fs+1,_FatFs+1
  9637                           
  9638                           ; BSR set to: 0
  9639                           ;pff.c: 819: return FR_OK;
  9640  000642  0E00               	movlw	0
  9641  000644  0012               	return	
  9642  000646                     __end_of_pf_mount:
  9643                           	opt stack 0
  9644                           tosu	equ	0xFFF
  9645                           tosh	equ	0xFFE
  9646                           tosl	equ	0xFFD
  9647                           pclath	equ	0xFFA
  9648                           tblptru	equ	0xFF8
  9649                           tblptrh	equ	0xFF7
  9650                           tblptrl	equ	0xFF6
  9651                           tablat	equ	0xFF5
  9652                           prodh	equ	0xFF4
  9653                           prodl	equ	0xFF3
  9654                           intcon	equ	0xFF2
  9655                           intcon2	equ	0xFF1
  9656                           intcon3	equ	0xFF0
  9657                           postinc0	equ	0xFEE
  9658                           wreg	equ	0xFE8
  9659                           indf1	equ	0xFE7
  9660                           postinc1	equ	0xFE6
  9661                           postdec1	equ	0xFE5
  9662                           fsr1h	equ	0xFE2
  9663                           fsr1l	equ	0xFE1
  9664                           indf2	equ	0xFDF
  9665                           postinc2	equ	0xFDE
  9666                           postdec2	equ	0xFDD
  9667                           plusw2	equ	0xFDB
  9668                           fsr2h	equ	0xFDA
  9669                           fsr2l	equ	0xFD9
  9670                           status	equ	0xFD8
  9671                           
  9672 ;; *************** function _disk_initialize *****************
  9673 ;; Defined at:
  9674 ;;		line 64 in file "diskio.c"
  9675 ;; Parameters:    Size  Location     Type
  9676 ;;		None
  9677 ;; Auto vars:     Size  Location     Type
  9678 ;;  count2          2    7[BANK0 ] int 
  9679 ;;  count1          2    4[BANK0 ] int 
  9680 ;;  i               2    2[BANK0 ] int 
  9681 ;;  buff            1    9[BANK0 ] unsigned char 
  9682 ;;  stat            1    6[BANK0 ] unsigned char 
  9683 ;; Return value:  Size  Location     Type
  9684 ;;                  1    wreg      unsigned char 
  9685 ;; Registers used:
  9686 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9687 ;; Tracked objects:
  9688 ;;		On entry : 0/0
  9689 ;;		On exit  : 0/0
  9690 ;;		Unchanged: 0/0
  9691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9692 ;;      Params:         0       0       0       0       0       0       0       0       0
  9693 ;;      Locals:         0       8       0       0       0       0       0       0       0
  9694 ;;      Temps:          0       2       0       0       0       0       0       0       0
  9695 ;;      Totals:         0      10       0       0       0       0       0       0       0
  9696 ;;Total ram usage:       10 bytes
  9697 ;; Hardware stack levels used:    1
  9698 ;; Hardware stack levels required when called:    7
  9699 ;; This function calls:
  9700 ;;		_command
  9701 ;;		_dummy_clocks
  9702 ;;		_escreve_cmd_lcd
  9703 ;;		_escreve_frase_ram_lcd
  9704 ;;		_posicao_cursor_lcd
  9705 ;;		_proceed
  9706 ;;		_reset
  9707 ;;		_response
  9708 ;; This function is called by:
  9709 ;;		_pf_mount
  9710 ;; This function uses a non-reentrant model
  9711 ;;
  9712                           
  9713                           	psect	text37
  9714  0015AC                     __ptext37:
  9715                           	opt stack 0
  9716  0015AC                     _disk_initialize:
  9717                           	opt stack 20
  9718                           
  9719                           ;diskio.c: 67: DSTATUS stat;
  9720                           ;diskio.c: 68: int i = 0, count1 = 0, count2 = 0;
  9721                           
  9722                           ;incstack = 0
  9723  0015AC  0E00               	movlw	0
  9724  0015AE  0100               	movlb	0	; () banked
  9725  0015B0  6F63               	movwf	(disk_initialize@i+1)& (0+255),b
  9726  0015B2  0E00               	movlw	0
  9727  0015B4  6F62               	movwf	disk_initialize@i& (0+255),b
  9728  0015B6  0E00               	movlw	0
  9729  0015B8  6F65               	movwf	(disk_initialize@count1+1)& (0+255),b
  9730  0015BA  0E00               	movlw	0
  9731  0015BC  6F64               	movwf	disk_initialize@count1& (0+255),b
  9732  0015BE  0E00               	movlw	0
  9733  0015C0  6F68               	movwf	(disk_initialize@count2+1)& (0+255),b
  9734  0015C2  0E00               	movlw	0
  9735  0015C4  6F67               	movwf	disk_initialize@count2& (0+255),b
  9736                           
  9737                           ; BSR set to: 0
  9738                           ;diskio.c: 69: unsigned char buff;
  9739                           ;diskio.c: 70: reset();
  9740  0015C6  ECC5  F014         	call	_reset	;wreg free
  9741                           
  9742                           ;diskio.c: 71: _delay((unsigned long)((500)*(48000000/4000.0)));
  9743  0015CA  0E1F               	movlw	31
  9744  0015CC  0100               	movlb	0	; () banked
  9745  0015CE  6F61               	movwf	(??_disk_initialize+1)& (0+255),b
  9746  0015D0  0E71               	movlw	113
  9747  0015D2  6F60               	movwf	??_disk_initialize& (0+255),b
  9748  0015D4  0E1E               	movlw	30
  9749  0015D6                     u9167:
  9750  0015D6  2EE8               	decfsz	wreg,f,c
  9751  0015D8  D7FE               	bra	u9167
  9752  0015DA  2F60               	decfsz	??_disk_initialize& (0+255),f,b
  9753  0015DC  D7FC               	bra	u9167
  9754  0015DE  2F61               	decfsz	(??_disk_initialize+1)& (0+255),f,b
  9755  0015E0  D7FA               	bra	u9167
  9756  0015E2  F000               	nop	
  9757                           
  9758                           ;diskio.c: 72: dummy_clocks(8);
  9759  0015E4  0E08               	movlw	8
  9760  0015E6  EC9D  F017         	call	_dummy_clocks
  9761                           
  9762                           ;diskio.c: 73: command(0X41, 0X00000000, 0XFF);
  9763  0015EA  0E00               	movlw	0
  9764  0015EC  6E21               	movwf	command@arg,c
  9765  0015EE  0E00               	movlw	0
  9766  0015F0  6E22               	movwf	command@arg+1,c
  9767  0015F2  0E00               	movlw	0
  9768  0015F4  6E23               	movwf	command@arg+2,c
  9769  0015F6  0E00               	movlw	0
  9770  0015F8  6E24               	movwf	command@arg+3,c
  9771  0015FA  0EFF               	movlw	255
  9772  0015FC  6E25               	movwf	command@CRC,c
  9773  0015FE  0E41               	movlw	65
  9774  001600  EC4A  F017         	call	_command
  9775                           
  9776                           ;diskio.c: 74: proceed();
  9777  001604  EC30  F019         	call	_proceed	;wreg free
  9778  001608                     
  9779                           ;diskio.c: 76: buff = response();
  9780  001608  EC23  F019         	call	_response	;wreg free
  9781  00160C  0100               	movlb	0	; () banked
  9782  00160E  6F69               	movwf	disk_initialize@buff& (0+255),b
  9783                           
  9784                           ; BSR set to: 0
  9785                           ;diskio.c: 77: }while(buff!=0x01);
  9786  001610  0569               	decf	disk_initialize@buff& (0+255),w,b
  9787  001612  A4D8               	btfss	status,2,c
  9788  001614  D7F9               	goto	l734
  9789                           
  9790                           ; BSR set to: 0
  9791                           ;diskio.c: 79: _delay((unsigned long)((1000)*(48000000/4000.0)));
  9792                           
  9793                           ; BSR set to: 0
  9794  001616  0E3D               	movlw	61
  9795  001618  0100               	movlb	0	; () banked
  9796  00161A  6F61               	movwf	(??_disk_initialize+1)& (0+255),b
  9797  00161C  0EE1               	movlw	225
  9798  00161E  6F60               	movwf	??_disk_initialize& (0+255),b
  9799  001620  0E3F               	movlw	63
  9800  001622                     u9177:
  9801  001622  2EE8               	decfsz	wreg,f,c
  9802  001624  D7FE               	bra	u9177
  9803  001626  2F60               	decfsz	??_disk_initialize& (0+255),f,b
  9804  001628  D7FC               	bra	u9177
  9805  00162A  2F61               	decfsz	(??_disk_initialize+1)& (0+255),f,b
  9806  00162C  D7FA               	bra	u9177
  9807  00162E  D000               	nop2	
  9808                           
  9809                           ;diskio.c: 80: proceed();
  9810  001630  EC30  F019         	call	_proceed	;wreg free
  9811                           
  9812                           ;diskio.c: 81: if (buff == 0x01)
  9813  001634  0100               	movlb	0	; () banked
  9814  001636  0569               	decf	disk_initialize@buff& (0+255),w,b
  9815  001638  A4D8               	btfss	status,2,c
  9816  00163A  D096               	goto	l736
  9817                           
  9818                           ; BSR set to: 0
  9819                           ;diskio.c: 82: {
  9820                           ;diskio.c: 84: _delay((unsigned long)((1)*(48000000/4000.0)));
  9821  00163C  0E10               	movlw	16
  9822  00163E  0100               	movlb	0	; () banked
  9823  001640  6F60               	movwf	??_disk_initialize& (0+255),b
  9824  001642  0E94               	movlw	148
  9825  001644                     u9187:
  9826  001644  2EE8               	decfsz	wreg,f,c
  9827  001646  D7FE               	bra	u9187
  9828  001648  2F60               	decfsz	??_disk_initialize& (0+255),f,b
  9829  00164A  D7FC               	bra	u9187
  9830  00164C  F000               	nop	
  9831                           
  9832                           ;diskio.c: 85: count1 = 0;
  9833  00164E  0E00               	movlw	0
  9834  001650  0100               	movlb	0	; () banked
  9835  001652  6F65               	movwf	(disk_initialize@count1+1)& (0+255),b
  9836  001654  0E00               	movlw	0
  9837  001656  6F64               	movwf	disk_initialize@count1& (0+255),b
  9838  001658                     
  9839                           ; BSR set to: 0
  9840                           ;diskio.c: 87: count2 = 0;
  9841                           
  9842                           ; BSR set to: 0
  9843  001658  0E00               	movlw	0
  9844  00165A  6F68               	movwf	(disk_initialize@count2+1)& (0+255),b
  9845  00165C  0E00               	movlw	0
  9846  00165E  6F67               	movwf	disk_initialize@count2& (0+255),b
  9847                           
  9848                           ; BSR set to: 0
  9849                           ;diskio.c: 88: dummy_clocks(8);
  9850  001660  0E08               	movlw	8
  9851  001662  EC9D  F017         	call	_dummy_clocks
  9852                           
  9853                           ;diskio.c: 89: command(0X77, 0X00000000, 0X95);
  9854  001666  0E00               	movlw	0
  9855  001668  6E21               	movwf	command@arg,c
  9856  00166A  0E00               	movlw	0
  9857  00166C  6E22               	movwf	command@arg+1,c
  9858  00166E  0E00               	movlw	0
  9859  001670  6E23               	movwf	command@arg+2,c
  9860  001672  0E00               	movlw	0
  9861  001674  6E24               	movwf	command@arg+3,c
  9862  001676  0E95               	movlw	149
  9863  001678  6E25               	movwf	command@CRC,c
  9864  00167A  0E77               	movlw	119
  9865  00167C  EC4A  F017         	call	_command
  9866                           
  9867                           ;diskio.c: 90: buff = 0XFF;
  9868  001680  0100               	movlb	0	; () banked
  9869  001682  6969               	setf	disk_initialize@buff& (0+255),b
  9870  001684                     
  9871                           ; BSR set to: 0
  9872                           ;diskio.c: 93: buff = response();
  9873                           
  9874                           ; BSR set to: 0
  9875  001684  EC23  F019         	call	_response	;wreg free
  9876  001688  0100               	movlb	0	; () banked
  9877  00168A  6F69               	movwf	disk_initialize@buff& (0+255),b
  9878                           
  9879                           ; BSR set to: 0
  9880                           ;diskio.c: 94: count2++;
  9881  00168C  4B67               	infsnz	disk_initialize@count2& (0+255),f,b
  9882  00168E  2B68               	incf	(disk_initialize@count2+1)& (0+255),f,b
  9883                           
  9884                           ; BSR set to: 0
  9885                           ;diskio.c: 95: }while((buff!=0X01)&&(count2<10));
  9886  001690  0569               	decf	disk_initialize@buff& (0+255),w,b
  9887  001692  B4D8               	btfsc	status,2,c
  9888  001694  D008               	goto	u7500
  9889                           
  9890                           ; BSR set to: 0
  9891  001696  BF68               	btfsc	(disk_initialize@count2+1)& (0+255),7,b
  9892  001698  D7F5               	goto	l738
  9893  00169A  5168               	movf	(disk_initialize@count2+1)& (0+255),w,b
  9894  00169C  E104               	bnz	l6728
  9895  00169E  0E0A               	movlw	10
  9896  0016A0  5D67               	subwf	disk_initialize@count2& (0+255),w,b
  9897  0016A2  A0D8               	btfss	status,0,c
  9898  0016A4  D7EF               	goto	l738
  9899  0016A6                     u7500:
  9900  0016A6                     l6728:
  9901                           
  9902                           ; BSR set to: 0
  9903                           ;diskio.c: 97: _delay((unsigned long)((1)*(48000000/4000.0)));
  9904  0016A6  0E10               	movlw	16
  9905  0016A8  0100               	movlb	0	; () banked
  9906  0016AA  6F60               	movwf	??_disk_initialize& (0+255),b
  9907  0016AC  0E94               	movlw	148
  9908  0016AE                     u9197:
  9909  0016AE  2EE8               	decfsz	wreg,f,c
  9910  0016B0  D7FE               	bra	u9197
  9911  0016B2  2F60               	decfsz	??_disk_initialize& (0+255),f,b
  9912  0016B4  D7FC               	bra	u9197
  9913  0016B6  F000               	nop	
  9914                           
  9915                           ;diskio.c: 98: count2 = 0;
  9916  0016B8  0E00               	movlw	0
  9917  0016BA  0100               	movlb	0	; () banked
  9918  0016BC  6F68               	movwf	(disk_initialize@count2+1)& (0+255),b
  9919  0016BE  0E00               	movlw	0
  9920  0016C0  6F67               	movwf	disk_initialize@count2& (0+255),b
  9921                           
  9922                           ; BSR set to: 0
  9923                           ;diskio.c: 99: dummy_clocks(8);
  9924  0016C2  0E08               	movlw	8
  9925  0016C4  EC9D  F017         	call	_dummy_clocks
  9926                           
  9927                           ;diskio.c: 101: command(0X69,0X40000000,0X95);
  9928  0016C8  0E00               	movlw	0
  9929  0016CA  6E21               	movwf	command@arg,c
  9930  0016CC  0E00               	movlw	0
  9931  0016CE  6E22               	movwf	command@arg+1,c
  9932  0016D0  0E00               	movlw	0
  9933  0016D2  6E23               	movwf	command@arg+2,c
  9934  0016D4  0E40               	movlw	64
  9935  0016D6  6E24               	movwf	command@arg+3,c
  9936  0016D8  0E95               	movlw	149
  9937  0016DA  6E25               	movwf	command@CRC,c
  9938  0016DC  0E69               	movlw	105
  9939  0016DE  EC4A  F017         	call	_command
  9940                           
  9941                           ;diskio.c: 102: buff = 0XFF;
  9942  0016E2  0100               	movlb	0	; () banked
  9943  0016E4  6969               	setf	disk_initialize@buff& (0+255),b
  9944                           
  9945                           ; BSR set to: 0
  9946                           ;diskio.c: 104: proceed();
  9947  0016E6  EC30  F019         	call	_proceed	;wreg free
  9948  0016EA                     
  9949                           ;diskio.c: 106: buff = response();
  9950  0016EA  EC23  F019         	call	_response	;wreg free
  9951  0016EE  0100               	movlb	0	; () banked
  9952  0016F0  6F69               	movwf	disk_initialize@buff& (0+255),b
  9953                           
  9954                           ;diskio.c: 107: count2++;
  9955  0016F2  4B67               	infsnz	disk_initialize@count2& (0+255),f,b
  9956  0016F4  2B68               	incf	(disk_initialize@count2+1)& (0+255),f,b
  9957                           
  9958                           ; BSR set to: 0
  9959                           ;diskio.c: 110: }while((buff!=0X00) && count2<10);
  9960  0016F6  5169               	movf	disk_initialize@buff& (0+255),w,b
  9961  0016F8  B4D8               	btfsc	status,2,c
  9962  0016FA  D008               	goto	u7520
  9963                           
  9964                           ; BSR set to: 0
  9965  0016FC  BF68               	btfsc	(disk_initialize@count2+1)& (0+255),7,b
  9966  0016FE  D7F5               	goto	l742
  9967  001700  5168               	movf	(disk_initialize@count2+1)& (0+255),w,b
  9968  001702  E104               	bnz	l6746
  9969  001704  0E0A               	movlw	10
  9970  001706  5D67               	subwf	disk_initialize@count2& (0+255),w,b
  9971  001708  A0D8               	btfss	status,0,c
  9972  00170A  D7EF               	goto	l742
  9973  00170C                     u7520:
  9974  00170C                     l6746:
  9975                           
  9976                           ; BSR set to: 0
  9977                           ;diskio.c: 112: }while(buff != 0X00);
  9978  00170C  5169               	movf	disk_initialize@buff& (0+255),w,b
  9979  00170E  A4D8               	btfss	status,2,c
  9980  001710  D7A3               	goto	l737
  9981                           
  9982                           ; BSR set to: 0
  9983                           ;diskio.c: 114: count1 = 0;
  9984                           
  9985                           ; BSR set to: 0
  9986  001712  0E00               	movlw	0
  9987  001714  6F65               	movwf	(disk_initialize@count1+1)& (0+255),b
  9988  001716  0E00               	movlw	0
  9989  001718  6F64               	movwf	disk_initialize@count1& (0+255),b
  9990                           
  9991                           ; BSR set to: 0
  9992                           ;diskio.c: 116: _delay((unsigned long)((1)*(48000000/4000.0)));
  9993  00171A  0E10               	movlw	16
  9994  00171C  0100               	movlb	0	; () banked
  9995  00171E  6F60               	movwf	??_disk_initialize& (0+255),b
  9996  001720  0E94               	movlw	148
  9997  001722                     u9207:
  9998  001722  2EE8               	decfsz	wreg,f,c
  9999  001724  D7FE               	bra	u9207
 10000  001726  2F60               	decfsz	??_disk_initialize& (0+255),f,b
 10001  001728  D7FC               	bra	u9207
 10002  00172A  F000               	nop	
 10003                           
 10004                           ;diskio.c: 117: stat = 0X00;
 10005  00172C  0E00               	movlw	0
 10006  00172E  0100               	movlb	0	; () banked
 10007  001730  6F66               	movwf	disk_initialize@stat& (0+255),b
 10008                           
 10009                           ; BSR set to: 0
 10010                           ;diskio.c: 119: escreve_cmd_lcd(0b00000001);
 10011  001732  0E01               	movlw	1
 10012  001734  EC0D  F015         	call	_escreve_cmd_lcd
 10013                           
 10014                           ;diskio.c: 120: posicao_cursor_lcd(1,0);
 10015  001738  0E00               	movlw	0
 10016  00173A  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 10017  00173C  0E01               	movlw	1
 10018  00173E  EC80  F016         	call	_posicao_cursor_lcd
 10019                           
 10020                           ;diskio.c: 121: escreve_frase_ram_lcd("Cartão Aceito");
 10021  001742  0EFB               	movlw	low STR_16
 10022  001744  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 10023  001746  0E61               	movlw	high STR_16
 10024  001748  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 10025  00174A  EC74  F017         	call	_escreve_frase_ram_lcd	;wreg free
 10026                           
 10027                           ;diskio.c: 122: _delay((unsigned long)((2000)*(48000000/4000.0)));
 10028  00174E  0E7A               	movlw	122
 10029  001750  0100               	movlb	0	; () banked
 10030  001752  6F61               	movwf	(??_disk_initialize+1)& (0+255),b
 10031  001754  0EC1               	movlw	193
 10032  001756  6F60               	movwf	??_disk_initialize& (0+255),b
 10033  001758  0E81               	movlw	129
 10034  00175A                     u9217:
 10035  00175A  2EE8               	decfsz	wreg,f,c
 10036  00175C  D7FE               	bra	u9217
 10037  00175E  2F60               	decfsz	??_disk_initialize& (0+255),f,b
 10038  001760  D7FC               	bra	u9217
 10039  001762  2F61               	decfsz	(??_disk_initialize+1)& (0+255),f,b
 10040  001764  D7FA               	bra	u9217
 10041  001766  D021               	goto	L3
 10042  001768                     l736:
 10043                           
 10044                           ;diskio.c: 125: else if(buff == 0x05)
 10045  001768  0E05               	movlw	5
 10046  00176A  0100               	movlb	0	; () banked
 10047  00176C  1969               	xorwf	disk_initialize@buff& (0+255),w,b
 10048  00176E  A4D8               	btfss	status,2,c
 10049  001770  D01D               	goto	l748
 10050                           
 10051                           ; BSR set to: 0
 10052                           ;diskio.c: 126: {
 10053                           ;diskio.c: 127: stat = 0x01;
 10054  001772  0E01               	movlw	1
 10055  001774  6F66               	movwf	disk_initialize@stat& (0+255),b
 10056                           
 10057                           ; BSR set to: 0
 10058                           ;diskio.c: 129: escreve_cmd_lcd(0b00000001);
 10059  001776  0E01               	movlw	1
 10060  001778  EC0D  F015         	call	_escreve_cmd_lcd
 10061                           
 10062                           ;diskio.c: 130: posicao_cursor_lcd(1,0);
 10063  00177C  0E00               	movlw	0
 10064  00177E  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 10065  001780  0E01               	movlw	1
 10066  001782  EC80  F016         	call	_posicao_cursor_lcd
 10067                           
 10068                           ;diskio.c: 131: escreve_frase_ram_lcd("Error!!!");
 10069  001786  0E6B               	movlw	low STR_17
 10070  001788  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 10071  00178A  0E62               	movlw	high STR_17
 10072  00178C  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 10073  00178E  EC74  F017         	call	_escreve_frase_ram_lcd	;wreg free
 10074                           
 10075                           ;diskio.c: 133: _delay((unsigned long)((3000)*(48000000/4000.0)));
 10076  001792  0EB7               	movlw	183
 10077  001794  0100               	movlb	0	; () banked
 10078  001796  6F61               	movwf	(??_disk_initialize+1)& (0+255),b
 10079  001798  0EA1               	movlw	161
 10080  00179A  6F60               	movwf	??_disk_initialize& (0+255),b
 10081  00179C  0EC3               	movlw	195
 10082  00179E                     u9227:
 10083  00179E  2EE8               	decfsz	wreg,f,c
 10084  0017A0  D7FE               	bra	u9227
 10085  0017A2  2F60               	decfsz	??_disk_initialize& (0+255),f,b
 10086  0017A4  D7FC               	bra	u9227
 10087  0017A6  2F61               	decfsz	(??_disk_initialize+1)& (0+255),f,b
 10088  0017A8  D7FA               	bra	u9227
 10089  0017AA                     L3:
 10090  0017AA  D000               	nop2	
 10091  0017AC                     l748:
 10092                           
 10093                           ;diskio.c: 134: }
 10094                           ;diskio.c: 135: _delay((unsigned long)((1000)*(48000000/4000.0)));
 10095  0017AC  0E3D               	movlw	61
 10096  0017AE  0100               	movlb	0	; () banked
 10097  0017B0  6F61               	movwf	(??_disk_initialize+1)& (0+255),b
 10098  0017B2  0EE1               	movlw	225
 10099  0017B4  6F60               	movwf	??_disk_initialize& (0+255),b
 10100  0017B6  0E3F               	movlw	63
 10101  0017B8                     u9237:
 10102  0017B8  2EE8               	decfsz	wreg,f,c
 10103  0017BA  D7FE               	bra	u9237
 10104  0017BC  2F60               	decfsz	??_disk_initialize& (0+255),f,b
 10105  0017BE  D7FC               	bra	u9237
 10106  0017C0  2F61               	decfsz	(??_disk_initialize+1)& (0+255),f,b
 10107  0017C2  D7FA               	bra	u9237
 10108  0017C4  D000               	nop2	
 10109                           
 10110                           ;diskio.c: 137: dummy_clocks(8);
 10111  0017C6  0E08               	movlw	8
 10112  0017C8  EC9D  F017         	call	_dummy_clocks
 10113                           
 10114                           ;diskio.c: 138: command(0X50,0X00000200,0XFF);
 10115  0017CC  0E00               	movlw	0
 10116  0017CE  6E21               	movwf	command@arg,c
 10117  0017D0  0E02               	movlw	2
 10118  0017D2  6E22               	movwf	command@arg+1,c
 10119  0017D4  0E00               	movlw	0
 10120  0017D6  6E23               	movwf	command@arg+2,c
 10121  0017D8  0E00               	movlw	0
 10122  0017DA  6E24               	movwf	command@arg+3,c
 10123  0017DC  0EFF               	movlw	255
 10124  0017DE  6E25               	movwf	command@CRC,c
 10125  0017E0  0E50               	movlw	80
 10126  0017E2  EC4A  F017         	call	_command
 10127                           
 10128                           ;diskio.c: 139: proceed();
 10129  0017E6  EC30  F019         	call	_proceed	;wreg free
 10130  0017EA                     
 10131                           ;diskio.c: 141: buff = response();
 10132  0017EA  EC23  F019         	call	_response	;wreg free
 10133  0017EE  0100               	movlb	0	; () banked
 10134  0017F0  6F69               	movwf	disk_initialize@buff& (0+255),b
 10135                           
 10136                           ; BSR set to: 0
 10137                           ;diskio.c: 142: }while(buff!=0x00);
 10138  0017F2  5169               	movf	disk_initialize@buff& (0+255),w,b
 10139  0017F4  A4D8               	btfss	status,2,c
 10140  0017F6  D7F9               	goto	l749
 10141                           
 10142                           ; BSR set to: 0
 10143                           ;diskio.c: 145: _delay((unsigned long)((2000)*(48000000/4000.0)));
 10144                           
 10145                           ; BSR set to: 0
 10146  0017F8  0E7A               	movlw	122
 10147  0017FA  0100               	movlb	0	; () banked
 10148  0017FC  6F61               	movwf	(??_disk_initialize+1)& (0+255),b
 10149  0017FE  0EC1               	movlw	193
 10150  001800  6F60               	movwf	??_disk_initialize& (0+255),b
 10151  001802  0E81               	movlw	129
 10152  001804                     u9247:
 10153  001804  2EE8               	decfsz	wreg,f,c
 10154  001806  D7FE               	bra	u9247
 10155  001808  2F60               	decfsz	??_disk_initialize& (0+255),f,b
 10156  00180A  D7FC               	bra	u9247
 10157  00180C  2F61               	decfsz	(??_disk_initialize+1)& (0+255),f,b
 10158  00180E  D7FA               	bra	u9247
 10159  001810  D000               	nop2	
 10160                           
 10161                           ;diskio.c: 147: return stat;
 10162  001812  0100               	movlb	0	; () banked
 10163  001814  5166               	movf	disk_initialize@stat& (0+255),w,b
 10164  001816  0012               	return	
 10165  001818                     __end_of_disk_initialize:
 10166                           	opt stack 0
 10167                           tosu	equ	0xFFF
 10168                           tosh	equ	0xFFE
 10169                           tosl	equ	0xFFD
 10170                           pclath	equ	0xFFA
 10171                           tblptru	equ	0xFF8
 10172                           tblptrh	equ	0xFF7
 10173                           tblptrl	equ	0xFF6
 10174                           tablat	equ	0xFF5
 10175                           prodh	equ	0xFF4
 10176                           prodl	equ	0xFF3
 10177                           intcon	equ	0xFF2
 10178                           intcon2	equ	0xFF1
 10179                           intcon3	equ	0xFF0
 10180                           postinc0	equ	0xFEE
 10181                           wreg	equ	0xFE8
 10182                           indf1	equ	0xFE7
 10183                           postinc1	equ	0xFE6
 10184                           postdec1	equ	0xFE5
 10185                           fsr1h	equ	0xFE2
 10186                           fsr1l	equ	0xFE1
 10187                           indf2	equ	0xFDF
 10188                           postinc2	equ	0xFDE
 10189                           postdec2	equ	0xFDD
 10190                           plusw2	equ	0xFDB
 10191                           fsr2h	equ	0xFDA
 10192                           fsr2l	equ	0xFD9
 10193                           status	equ	0xFD8
 10194                           
 10195 ;; *************** function _reset *****************
 10196 ;; Defined at:
 10197 ;;		line 36 in file "diskio.c"
 10198 ;; Parameters:    Size  Location     Type
 10199 ;;		None
 10200 ;; Auto vars:     Size  Location     Type
 10201 ;;  count           2   41[COMRAM] int 
 10202 ;;  i               2   39[COMRAM] int 
 10203 ;;  buff            1   43[COMRAM] unsigned char 
 10204 ;; Return value:  Size  Location     Type
 10205 ;;                  1    wreg      void 
 10206 ;; Registers used:
 10207 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10208 ;; Tracked objects:
 10209 ;;		On entry : 0/0
 10210 ;;		On exit  : 0/0
 10211 ;;		Unchanged: 0/0
 10212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10213 ;;      Params:         0       0       0       0       0       0       0       0       0
 10214 ;;      Locals:         5       0       0       0       0       0       0       0       0
 10215 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10216 ;;      Totals:         5       0       0       0       0       0       0       0       0
 10217 ;;Total ram usage:        5 bytes
 10218 ;; Hardware stack levels used:    1
 10219 ;; Hardware stack levels required when called:    6
 10220 ;; This function calls:
 10221 ;;		_command
 10222 ;;		_dummy_clocks
 10223 ;;		_escreve_frase_ram_lcd
 10224 ;;		_posicao_cursor_lcd
 10225 ;;		_proceed
 10226 ;;		_response
 10227 ;; This function is called by:
 10228 ;;		_disk_initialize
 10229 ;; This function uses a non-reentrant model
 10230 ;;
 10231                           
 10232                           	psect	text38
 10233  00298A                     __ptext38:
 10234                           	opt stack 0
 10235  00298A                     _reset:
 10236                           	opt stack 20
 10237                           
 10238                           ;diskio.c: 38: int i = 0, count = 0;
 10239                           
 10240                           ; BSR set to: 0
 10241                           ;incstack = 0
 10242  00298A  0E00               	movlw	0
 10243  00298C  6E29               	movwf	reset@i+1,c
 10244  00298E  0E00               	movlw	0
 10245  002990  6E28               	movwf	reset@i,c
 10246  002992  0E00               	movlw	0
 10247  002994  6E2B               	movwf	reset@count+1,c
 10248  002996  0E00               	movlw	0
 10249  002998  6E2A               	movwf	reset@count,c
 10250                           
 10251                           ;diskio.c: 39: unsigned char buff;
 10252                           ;diskio.c: 40: posicao_cursor_lcd(1,0);
 10253  00299A  0E00               	movlw	0
 10254  00299C  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 10255  00299E  0E01               	movlw	1
 10256  0029A0  EC80  F016         	call	_posicao_cursor_lcd
 10257                           
 10258                           ;diskio.c: 41: escreve_frase_ram_lcd("travou aqui");
 10259  0029A4  0E40               	movlw	low STR_14
 10260  0029A6  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 10261  0029A8  0E62               	movlw	high STR_14
 10262  0029AA  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 10263  0029AC  EC74  F017         	call	_escreve_frase_ram_lcd	;wreg free
 10264  0029B0                     
 10265                           ;diskio.c: 44: dummy_clocks(8);
 10266  0029B0  0E08               	movlw	8
 10267  0029B2  EC9D  F017         	call	_dummy_clocks
 10268                           
 10269                           ;diskio.c: 45: command(0X40, 0X00000000, 0X95);
 10270  0029B6  0E00               	movlw	0
 10271  0029B8  6E21               	movwf	command@arg,c
 10272  0029BA  0E00               	movlw	0
 10273  0029BC  6E22               	movwf	command@arg+1,c
 10274  0029BE  0E00               	movlw	0
 10275  0029C0  6E23               	movwf	command@arg+2,c
 10276  0029C2  0E00               	movlw	0
 10277  0029C4  6E24               	movwf	command@arg+3,c
 10278  0029C6  0E95               	movlw	149
 10279  0029C8  6E25               	movwf	command@CRC,c
 10280  0029CA  0E40               	movlw	64
 10281  0029CC  EC4A  F017         	call	_command
 10282                           
 10283                           ;diskio.c: 46: proceed();
 10284  0029D0  EC30  F019         	call	_proceed	;wreg free
 10285                           
 10286                           ;diskio.c: 47: posicao_cursor_lcd(1,0);
 10287  0029D4  0E00               	movlw	0
 10288  0029D6  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 10289  0029D8  0E01               	movlw	1
 10290  0029DA  EC80  F016         	call	_posicao_cursor_lcd
 10291                           
 10292                           ;diskio.c: 48: escreve_frase_ram_lcd("travou aqui 2");
 10293  0029DE  0EED               	movlw	low STR_15
 10294  0029E0  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 10295  0029E2  0E61               	movlw	high STR_15
 10296  0029E4  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 10297  0029E6  EC74  F017         	call	_escreve_frase_ram_lcd	;wreg free
 10298  0029EA                     
 10299                           ;diskio.c: 50: buff = response();
 10300  0029EA  EC23  F019         	call	_response	;wreg free
 10301  0029EE  6E2C               	movwf	reset@buff,c
 10302                           
 10303                           ;diskio.c: 53: count++;
 10304  0029F0  4A2A               	infsnz	reset@count,f,c
 10305  0029F2  2A2B               	incf	reset@count+1,f,c
 10306                           
 10307                           ;diskio.c: 54: }while((buff!=0X01) && (count<10) );
 10308  0029F4  042C               	decf	reset@buff,w,c
 10309  0029F6  B4D8               	btfsc	status,2,c
 10310  0029F8  D008               	goto	u7220
 10311  0029FA  BE2B               	btfsc	reset@count+1,7,c
 10312  0029FC  D7F6               	goto	l726
 10313  0029FE  502B               	movf	reset@count+1,w,c
 10314  002A00  E104               	bnz	l6568
 10315  002A02  0E0A               	movlw	10
 10316  002A04  5C2A               	subwf	reset@count,w,c
 10317  002A06  A0D8               	btfss	status,0,c
 10318  002A08  D7F0               	goto	l726
 10319  002A0A                     u7220:
 10320  002A0A                     l6568:
 10321                           
 10322                           ;diskio.c: 55: count = 0;
 10323  002A0A  0E00               	movlw	0
 10324  002A0C  6E2B               	movwf	reset@count+1,c
 10325  002A0E  0E00               	movlw	0
 10326  002A10  6E2A               	movwf	reset@count,c
 10327                           
 10328                           ;diskio.c: 56: }while(buff!=0X01);
 10329  002A12  042C               	decf	reset@buff,w,c
 10330  002A14  B4D8               	btfsc	status,2,c
 10331  002A16  0012               	return	
 10332  002A18  D7CB               	goto	l725
 10333  002A1A                     __end_of_reset:
 10334                           	opt stack 0
 10335                           tosu	equ	0xFFF
 10336                           tosh	equ	0xFFE
 10337                           tosl	equ	0xFFD
 10338                           pclath	equ	0xFFA
 10339                           tblptru	equ	0xFF8
 10340                           tblptrh	equ	0xFF7
 10341                           tblptrl	equ	0xFF6
 10342                           tablat	equ	0xFF5
 10343                           prodh	equ	0xFF4
 10344                           prodl	equ	0xFF3
 10345                           intcon	equ	0xFF2
 10346                           intcon2	equ	0xFF1
 10347                           intcon3	equ	0xFF0
 10348                           postinc0	equ	0xFEE
 10349                           wreg	equ	0xFE8
 10350                           indf1	equ	0xFE7
 10351                           postinc1	equ	0xFE6
 10352                           postdec1	equ	0xFE5
 10353                           fsr1h	equ	0xFE2
 10354                           fsr1l	equ	0xFE1
 10355                           indf2	equ	0xFDF
 10356                           postinc2	equ	0xFDE
 10357                           postdec2	equ	0xFDD
 10358                           plusw2	equ	0xFDB
 10359                           fsr2h	equ	0xFDA
 10360                           fsr2l	equ	0xFD9
 10361                           status	equ	0xFD8
 10362                           
 10363 ;; *************** function _escreve_cmd_lcd *****************
 10364 ;; Defined at:
 10365 ;;		line 162 in file "bibliotecas/display/display_lcd.c"
 10366 ;; Parameters:    Size  Location     Type
 10367 ;;  comando         1    wreg     unsigned char 
 10368 ;; Auto vars:     Size  Location     Type
 10369 ;;  comando         1   27[COMRAM] unsigned char 
 10370 ;; Return value:  Size  Location     Type
 10371 ;;                  1    wreg      void 
 10372 ;; Registers used:
 10373 ;;		wreg, status,2, status,0, cstack
 10374 ;; Tracked objects:
 10375 ;;		On entry : 0/0
 10376 ;;		On exit  : 0/0
 10377 ;;		Unchanged: 0/0
 10378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10379 ;;      Params:         0       0       0       0       0       0       0       0       0
 10380 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10381 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10382 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10383 ;;Total ram usage:        1 bytes
 10384 ;; Hardware stack levels used:    1
 10385 ;; Hardware stack levels required when called:    3
 10386 ;; This function calls:
 10387 ;;		_delay
 10388 ;; This function is called by:
 10389 ;;		_inicializa_SPI
 10390 ;;		_mensagem_inicial
 10391 ;;		_SDCard
 10392 ;;		_init_lcd
 10393 ;;		_disk_initialize
 10394 ;;		_leitura_chave
 10395 ;;		_cria_caractere_lcd
 10396 ;; This function uses a non-reentrant model
 10397 ;;
 10398                           
 10399                           	psect	text39
 10400  002A1A                     __ptext39:
 10401                           	opt stack 0
 10402  002A1A                     _escreve_cmd_lcd:
 10403                           	opt stack 26
 10404                           
 10405                           ;incstack = 0
 10406                           ;escreve_cmd_lcd@comando stored from wreg
 10407  002A1A  6E1C               	movwf	escreve_cmd_lcd@comando,c
 10408                           
 10409                           ;display_lcd.c: 165: PORTDbits.RD2 = 0;
 10410  002A1C  9483               	bcf	3971,2,c	;volatile
 10411                           
 10412                           ;display_lcd.c: 166: PORTDbits.RD1 = 0;
 10413  002A1E  9283               	bcf	3971,1,c	;volatile
 10414                           
 10415                           ;display_lcd.c: 167: PORTDbits.RD0 = 0;
 10416  002A20  9083               	bcf	3971,0,c	;volatile
 10417                           
 10418                           ;display_lcd.c: 170: if(comando&0b00010000){PORTDbits.RD4=1;}
 10419  002A22  A81C               	btfss	escreve_cmd_lcd@comando,4,c
 10420  002A24  D002               	goto	l587
 10421  002A26  8883               	bsf	3971,4,c	;volatile
 10422  002A28  D001               	goto	l588
 10423  002A2A                     l587:
 10424                           
 10425                           ;display_lcd.c: 171: else {PORTDbits.RD4=0;}
 10426  002A2A  9883               	bcf	3971,4,c	;volatile
 10427  002A2C                     l588:
 10428                           
 10429                           ;display_lcd.c: 172: if(comando&0b00100000){PORTDbits.RD5=1;}
 10430  002A2C  AA1C               	btfss	escreve_cmd_lcd@comando,5,c
 10431  002A2E  D002               	goto	l589
 10432  002A30  8A83               	bsf	3971,5,c	;volatile
 10433  002A32  D001               	goto	l590
 10434  002A34                     l589:
 10435                           
 10436                           ;display_lcd.c: 173: else {PORTDbits.RD5=0;}
 10437  002A34  9A83               	bcf	3971,5,c	;volatile
 10438  002A36                     l590:
 10439                           
 10440                           ;display_lcd.c: 174: if(comando&0b01000000){PORTDbits.RD6=1;}
 10441  002A36  AC1C               	btfss	escreve_cmd_lcd@comando,6,c
 10442  002A38  D002               	goto	l591
 10443  002A3A  8C83               	bsf	3971,6,c	;volatile
 10444  002A3C  D001               	goto	l592
 10445  002A3E                     l591:
 10446                           
 10447                           ;display_lcd.c: 175: else {PORTDbits.RD6=0;}
 10448  002A3E  9C83               	bcf	3971,6,c	;volatile
 10449  002A40                     l592:
 10450                           
 10451                           ;display_lcd.c: 176: if(comando&0b10000000){PORTDbits.RD7=1;}
 10452  002A40  AE1C               	btfss	escreve_cmd_lcd@comando,7,c
 10453  002A42  D002               	goto	l593
 10454  002A44  8E83               	bsf	3971,7,c	;volatile
 10455  002A46  D001               	goto	l594
 10456  002A48                     l593:
 10457                           
 10458                           ;display_lcd.c: 177: else {PORTDbits.RD7=0;}
 10459  002A48  9E83               	bcf	3971,7,c	;volatile
 10460  002A4A                     l594:
 10461                           
 10462                           ;display_lcd.c: 180: PORTDbits.RD0 = 1;
 10463  002A4A  8083               	bsf	3971,0,c	;volatile
 10464                           
 10465                           ;display_lcd.c: 181: delay();
 10466  002A4C  EC65  F018         	call	_delay	;wreg free
 10467                           
 10468                           ;display_lcd.c: 182: PORTDbits.RD0 = 0;
 10469  002A50  9083               	bcf	3971,0,c	;volatile
 10470                           
 10471                           ;display_lcd.c: 183: delay();
 10472  002A52  EC65  F018         	call	_delay	;wreg free
 10473                           
 10474                           ;display_lcd.c: 186: if(comando&0b00000001){PORTDbits.RD4=1;}
 10475  002A56  A01C               	btfss	escreve_cmd_lcd@comando,0,c
 10476  002A58  D002               	goto	l595
 10477  002A5A  8883               	bsf	3971,4,c	;volatile
 10478  002A5C  D001               	goto	l596
 10479  002A5E                     l595:
 10480                           
 10481                           ;display_lcd.c: 187: else {PORTDbits.RD4=0;}
 10482  002A5E  9883               	bcf	3971,4,c	;volatile
 10483  002A60                     l596:
 10484                           
 10485                           ;display_lcd.c: 188: if(comando&0b00000010){PORTDbits.RD5=1;}
 10486  002A60  A21C               	btfss	escreve_cmd_lcd@comando,1,c
 10487  002A62  D002               	goto	l597
 10488  002A64  8A83               	bsf	3971,5,c	;volatile
 10489  002A66  D001               	goto	l598
 10490  002A68                     l597:
 10491                           
 10492                           ;display_lcd.c: 189: else {PORTDbits.RD5=0;}
 10493  002A68  9A83               	bcf	3971,5,c	;volatile
 10494  002A6A                     l598:
 10495                           
 10496                           ;display_lcd.c: 190: if(comando&0b00000100){PORTDbits.RD6=1;}
 10497  002A6A  A41C               	btfss	escreve_cmd_lcd@comando,2,c
 10498  002A6C  D002               	goto	l599
 10499  002A6E  8C83               	bsf	3971,6,c	;volatile
 10500  002A70  D001               	goto	l600
 10501  002A72                     l599:
 10502                           
 10503                           ;display_lcd.c: 191: else {PORTDbits.RD6=0;}
 10504  002A72  9C83               	bcf	3971,6,c	;volatile
 10505  002A74                     l600:
 10506                           
 10507                           ;display_lcd.c: 192: if(comando&0b00001000){PORTDbits.RD7=1;}
 10508  002A74  A61C               	btfss	escreve_cmd_lcd@comando,3,c
 10509  002A76  D002               	goto	l601
 10510  002A78  8E83               	bsf	3971,7,c	;volatile
 10511  002A7A  D001               	goto	l602
 10512  002A7C                     l601:
 10513                           
 10514                           ;display_lcd.c: 193: else {PORTDbits.RD7=0;}
 10515  002A7C  9E83               	bcf	3971,7,c	;volatile
 10516  002A7E                     l602:
 10517                           
 10518                           ;display_lcd.c: 196: PORTDbits.RD0 = 1;
 10519  002A7E  8083               	bsf	3971,0,c	;volatile
 10520                           
 10521                           ;display_lcd.c: 197: delay();
 10522  002A80  EC65  F018         	call	_delay	;wreg free
 10523                           
 10524                           ;display_lcd.c: 198: PORTDbits.RD0 = 0;
 10525  002A84  9083               	bcf	3971,0,c	;volatile
 10526                           
 10527                           ;display_lcd.c: 199: delay();
 10528  002A86  EC65  F018         	call	_delay	;wreg free
 10529                           
 10530                           ;display_lcd.c: 204: if (comando==0x01 || comando==0x02 || comando==0x03)
 10531  002A8A  041C               	decf	escreve_cmd_lcd@comando,w,c
 10532  002A8C  B4D8               	btfsc	status,2,c
 10533  002A8E  D008               	goto	u7200
 10534  002A90  0E02               	movlw	2
 10535  002A92  181C               	xorwf	escreve_cmd_lcd@comando,w,c
 10536  002A94  B4D8               	btfsc	status,2,c
 10537  002A96  D004               	goto	u7200
 10538  002A98  0E03               	movlw	3
 10539  002A9A  181C               	xorwf	escreve_cmd_lcd@comando,w,c
 10540  002A9C  A4D8               	btfss	status,2,c
 10541  002A9E  0012               	return	
 10542  002AA0                     u7200:
 10543                           
 10544                           ;display_lcd.c: 205: { delay(); }
 10545  002AA0  EC65  F018         	call	_delay	;wreg free
 10546  002AA4  0012               	return	
 10547  002AA6                     __end_of_escreve_cmd_lcd:
 10548                           	opt stack 0
 10549                           tosu	equ	0xFFF
 10550                           tosh	equ	0xFFE
 10551                           tosl	equ	0xFFD
 10552                           pclath	equ	0xFFA
 10553                           tblptru	equ	0xFF8
 10554                           tblptrh	equ	0xFF7
 10555                           tblptrl	equ	0xFF6
 10556                           tablat	equ	0xFF5
 10557                           prodh	equ	0xFF4
 10558                           prodl	equ	0xFF3
 10559                           intcon	equ	0xFF2
 10560                           intcon2	equ	0xFF1
 10561                           intcon3	equ	0xFF0
 10562                           postinc0	equ	0xFEE
 10563                           wreg	equ	0xFE8
 10564                           indf1	equ	0xFE7
 10565                           postinc1	equ	0xFE6
 10566                           postdec1	equ	0xFE5
 10567                           fsr1h	equ	0xFE2
 10568                           fsr1l	equ	0xFE1
 10569                           indf2	equ	0xFDF
 10570                           postinc2	equ	0xFDE
 10571                           postdec2	equ	0xFDD
 10572                           plusw2	equ	0xFDB
 10573                           fsr2h	equ	0xFDA
 10574                           fsr2l	equ	0xFD9
 10575                           status	equ	0xFD8
 10576                           
 10577 ;; *************** function _check_fs *****************
 10578 ;; Defined at:
 10579 ;;		line 722 in file "pff.c"
 10580 ;; Parameters:    Size  Location     Type
 10581 ;;  buf             2   18[BANK0 ] PTR unsigned char 
 10582 ;;		 -> pf_mount@buf(36), 
 10583 ;;  sect            4   20[BANK0 ] unsigned long 
 10584 ;; Auto vars:     Size  Location     Type
 10585 ;;		None
 10586 ;; Return value:  Size  Location     Type
 10587 ;;                  1    wreg      unsigned char 
 10588 ;; Registers used:
 10589 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10590 ;; Tracked objects:
 10591 ;;		On entry : 0/0
 10592 ;;		On exit  : 0/0
 10593 ;;		Unchanged: 0/0
 10594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10595 ;;      Params:         0       6       0       0       0       0       0       0       0
 10596 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10597 ;;      Temps:          0       4       0       0       0       0       0       0       0
 10598 ;;      Totals:         0      10       0       0       0       0       0       0       0
 10599 ;;Total ram usage:       10 bytes
 10600 ;; Hardware stack levels used:    1
 10601 ;; Hardware stack levels required when called:    7
 10602 ;; This function calls:
 10603 ;;		_disk_readp
 10604 ;; This function is called by:
 10605 ;;		_pf_mount
 10606 ;; This function uses a non-reentrant model
 10607 ;;
 10608                           
 10609                           	psect	text40
 10610  001B36                     __ptext40:
 10611                           	opt stack 0
 10612  001B36                     _check_fs:
 10613                           	opt stack 20
 10614                           
 10615                           ;pff.c: 727: if (disk_readp(buf, sect, 510, 2))
 10616                           
 10617                           ;incstack = 0
 10618  001B36  C072  F060         	movff	check_fs@buf,disk_readp@rd
 10619  001B3A  C073  F061         	movff	check_fs@buf+1,disk_readp@rd+1
 10620  001B3E  C074  F062         	movff	check_fs@sect,disk_readp@sector
 10621  001B42  C075  F063         	movff	check_fs@sect+1,disk_readp@sector+1
 10622  001B46  C076  F064         	movff	check_fs@sect+2,disk_readp@sector+2
 10623  001B4A  C077  F065         	movff	check_fs@sect+3,disk_readp@sector+3
 10624  001B4E  0E01               	movlw	1
 10625  001B50  0100               	movlb	0	; () banked
 10626  001B52  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
 10627  001B54  0EFE               	movlw	254
 10628  001B56  6F66               	movwf	disk_readp@offset& (0+255),b
 10629  001B58  0E00               	movlw	0
 10630  001B5A  6F69               	movwf	(disk_readp@count+1)& (0+255),b
 10631  001B5C  0E02               	movlw	2
 10632  001B5E  6F68               	movwf	disk_readp@count& (0+255),b
 10633  001B60  EC3C  F009         	call	_disk_readp	;wreg free
 10634  001B64  0900               	iorlw	0
 10635  001B66  B4D8               	btfsc	status,2,c
 10636  001B68  D002               	goto	l958
 10637                           
 10638                           ;pff.c: 728: return 3;
 10639  001B6A  0E03               	movlw	3
 10640  001B6C  0012               	return	
 10641  001B6E                     l958:
 10642                           
 10643                           ;pff.c: 729: if ( (WORD)(((WORD)*((BYTE*)(buf)+1)<<8)|(WORD)*(BYTE*)(buf)) != 0xAA55)
 10644  001B6E  0100               	movlb	0	; () banked
 10645  001B70  EE20 F001          	lfsr	2,1
 10646  001B74  5172               	movf	check_fs@buf& (0+255),w,b
 10647  001B76  26D9               	addwf	fsr2l,f,c
 10648  001B78  5173               	movf	(check_fs@buf+1)& (0+255),w,b
 10649  001B7A  22DA               	addwfc	fsr2h,f,c
 10650  001B7C  50DF               	movf	indf2,w,c
 10651  001B7E  6F78               	movwf	??_check_fs& (0+255),b
 10652  001B80  5178               	movf	??_check_fs& (0+255),w,b
 10653  001B82  6F7A               	movwf	(??_check_fs+2)& (0+255),b
 10654  001B84  6B79               	clrf	(??_check_fs+1)& (0+255),b
 10655  001B86  C072  FFD9         	movff	check_fs@buf,fsr2l
 10656  001B8A  C073  FFDA         	movff	check_fs@buf+1,fsr2h
 10657  001B8E  50DF               	movf	indf2,w,c
 10658  001B90  6F7B               	movwf	(??_check_fs+3)& (0+255),b
 10659  001B92  517B               	movf	(??_check_fs+3)& (0+255),w,b
 10660  001B94  1379               	iorwf	(??_check_fs+1)& (0+255),f,b
 10661  001B96  0E00               	movlw	0
 10662  001B98  137A               	iorwf	(??_check_fs+2)& (0+255),f,b
 10663  001B9A  0E55               	movlw	85
 10664  001B9C  1979               	xorwf	(??_check_fs+1)& (0+255),w,b
 10665  001B9E  E104               	bnz	u7700
 10666  001BA0  0EAA               	movlw	170
 10667  001BA2  197A               	xorwf	(??_check_fs+2)& (0+255),w,b
 10668  001BA4  B4D8               	btfsc	status,2,c
 10669  001BA6  D002               	goto	l960
 10670  001BA8                     u7700:
 10671                           
 10672                           ; BSR set to: 0
 10673                           ;pff.c: 730: {
 10674                           ;pff.c: 731: return 2;
 10675  001BA8  0E02               	movlw	2
 10676                           
 10677                           ; BSR set to: 0
 10678  001BAA  0012               	return	
 10679  001BAC                     l960:
 10680                           
 10681                           ; BSR set to: 0
 10682                           
 10683                           ; BSR set to: 0
 10684  001BAC  C072  F060         	movff	check_fs@buf,disk_readp@rd
 10685  001BB0  C073  F061         	movff	check_fs@buf+1,disk_readp@rd+1
 10686  001BB4  C074  F062         	movff	check_fs@sect,disk_readp@sector
 10687  001BB8  C075  F063         	movff	check_fs@sect+1,disk_readp@sector+1
 10688  001BBC  C076  F064         	movff	check_fs@sect+2,disk_readp@sector+2
 10689  001BC0  C077  F065         	movff	check_fs@sect+3,disk_readp@sector+3
 10690  001BC4  0E00               	movlw	0
 10691  001BC6  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
 10692  001BC8  0E36               	movlw	54
 10693  001BCA  6F66               	movwf	disk_readp@offset& (0+255),b
 10694  001BCC  0E00               	movlw	0
 10695  001BCE  6F69               	movwf	(disk_readp@count+1)& (0+255),b
 10696  001BD0  0E02               	movlw	2
 10697  001BD2  6F68               	movwf	disk_readp@count& (0+255),b
 10698  001BD4  EC3C  F009         	call	_disk_readp	;wreg free
 10699  001BD8  0900               	iorlw	0
 10700  001BDA  A4D8               	btfss	status,2,c
 10701  001BDC  D01F               	goto	l961
 10702  001BDE  0100               	movlb	0	; () banked
 10703  001BE0  EE20 F001          	lfsr	2,1
 10704  001BE4  5172               	movf	check_fs@buf& (0+255),w,b
 10705  001BE6  26D9               	addwf	fsr2l,f,c
 10706  001BE8  5173               	movf	(check_fs@buf+1)& (0+255),w,b
 10707  001BEA  22DA               	addwfc	fsr2h,f,c
 10708  001BEC  50DF               	movf	indf2,w,c
 10709  001BEE  6F78               	movwf	??_check_fs& (0+255),b
 10710  001BF0  5178               	movf	??_check_fs& (0+255),w,b
 10711  001BF2  6F7A               	movwf	(??_check_fs+2)& (0+255),b
 10712  001BF4  6B79               	clrf	(??_check_fs+1)& (0+255),b
 10713  001BF6  C072  FFD9         	movff	check_fs@buf,fsr2l
 10714  001BFA  C073  FFDA         	movff	check_fs@buf+1,fsr2h
 10715  001BFE  50DF               	movf	indf2,w,c
 10716  001C00  6F7B               	movwf	(??_check_fs+3)& (0+255),b
 10717  001C02  517B               	movf	(??_check_fs+3)& (0+255),w,b
 10718  001C04  1379               	iorwf	(??_check_fs+1)& (0+255),f,b
 10719  001C06  0E00               	movlw	0
 10720  001C08  137A               	iorwf	(??_check_fs+2)& (0+255),f,b
 10721  001C0A  0E46               	movlw	70
 10722  001C0C  1979               	xorwf	(??_check_fs+1)& (0+255),w,b
 10723  001C0E  E106               	bnz	l6910
 10724  001C10  0E41               	movlw	65
 10725  001C12  197A               	xorwf	(??_check_fs+2)& (0+255),w,b
 10726  001C14  A4D8               	btfss	status,2,c
 10727  001C16  D002               	goto	l961
 10728                           
 10729                           ; BSR set to: 0
 10730                           ;pff.c: 734: return 0;
 10731  001C18  0E00               	movlw	0
 10732                           
 10733                           ; BSR set to: 0
 10734  001C1A  0012               	return	
 10735  001C1C                     l961:
 10736  001C1C                     l6910:
 10737  001C1C  C072  F060         	movff	check_fs@buf,disk_readp@rd
 10738  001C20  C073  F061         	movff	check_fs@buf+1,disk_readp@rd+1
 10739  001C24  C074  F062         	movff	check_fs@sect,disk_readp@sector
 10740  001C28  C075  F063         	movff	check_fs@sect+1,disk_readp@sector+1
 10741  001C2C  C076  F064         	movff	check_fs@sect+2,disk_readp@sector+2
 10742  001C30  C077  F065         	movff	check_fs@sect+3,disk_readp@sector+3
 10743  001C34  0E00               	movlw	0
 10744  001C36  0100               	movlb	0	; () banked
 10745  001C38  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
 10746  001C3A  0E52               	movlw	82
 10747  001C3C  6F66               	movwf	disk_readp@offset& (0+255),b
 10748  001C3E  0E00               	movlw	0
 10749  001C40  6F69               	movwf	(disk_readp@count+1)& (0+255),b
 10750  001C42  0E02               	movlw	2
 10751  001C44  6F68               	movwf	disk_readp@count& (0+255),b
 10752  001C46  EC3C  F009         	call	_disk_readp	;wreg free
 10753  001C4A  0900               	iorlw	0
 10754  001C4C  A4D8               	btfss	status,2,c
 10755  001C4E  D01F               	goto	l962
 10756  001C50  0100               	movlb	0	; () banked
 10757  001C52  EE20 F001          	lfsr	2,1
 10758  001C56  5172               	movf	check_fs@buf& (0+255),w,b
 10759  001C58  26D9               	addwf	fsr2l,f,c
 10760  001C5A  5173               	movf	(check_fs@buf+1)& (0+255),w,b
 10761  001C5C  22DA               	addwfc	fsr2h,f,c
 10762  001C5E  50DF               	movf	indf2,w,c
 10763  001C60  6F78               	movwf	??_check_fs& (0+255),b
 10764  001C62  5178               	movf	??_check_fs& (0+255),w,b
 10765  001C64  6F7A               	movwf	(??_check_fs+2)& (0+255),b
 10766  001C66  6B79               	clrf	(??_check_fs+1)& (0+255),b
 10767  001C68  C072  FFD9         	movff	check_fs@buf,fsr2l
 10768  001C6C  C073  FFDA         	movff	check_fs@buf+1,fsr2h
 10769  001C70  50DF               	movf	indf2,w,c
 10770  001C72  6F7B               	movwf	(??_check_fs+3)& (0+255),b
 10771  001C74  517B               	movf	(??_check_fs+3)& (0+255),w,b
 10772  001C76  1379               	iorwf	(??_check_fs+1)& (0+255),f,b
 10773  001C78  0E00               	movlw	0
 10774  001C7A  137A               	iorwf	(??_check_fs+2)& (0+255),f,b
 10775  001C7C  0E46               	movlw	70
 10776  001C7E  1979               	xorwf	(??_check_fs+1)& (0+255),w,b
 10777  001C80  E106               	bnz	l6918
 10778  001C82  0E41               	movlw	65
 10779  001C84  197A               	xorwf	(??_check_fs+2)& (0+255),w,b
 10780  001C86  A4D8               	btfss	status,2,c
 10781  001C88  D002               	goto	l962
 10782                           
 10783                           ; BSR set to: 0
 10784                           ;pff.c: 736: return 0;
 10785  001C8A  0E00               	movlw	0
 10786                           
 10787                           ; BSR set to: 0
 10788  001C8C  0012               	return	
 10789  001C8E                     l962:
 10790  001C8E                     l6918:
 10791                           
 10792                           ;pff.c: 737: return 1;
 10793  001C8E  0E01               	movlw	1
 10794  001C90  0012               	return	
 10795  001C92                     __end_of_check_fs:
 10796                           	opt stack 0
 10797                           tosu	equ	0xFFF
 10798                           tosh	equ	0xFFE
 10799                           tosl	equ	0xFFD
 10800                           pclath	equ	0xFFA
 10801                           tblptru	equ	0xFF8
 10802                           tblptrh	equ	0xFF7
 10803                           tblptrl	equ	0xFF6
 10804                           tablat	equ	0xFF5
 10805                           prodh	equ	0xFF4
 10806                           prodl	equ	0xFF3
 10807                           intcon	equ	0xFF2
 10808                           intcon2	equ	0xFF1
 10809                           intcon3	equ	0xFF0
 10810                           postinc0	equ	0xFEE
 10811                           wreg	equ	0xFE8
 10812                           indf1	equ	0xFE7
 10813                           postinc1	equ	0xFE6
 10814                           postdec1	equ	0xFE5
 10815                           fsr1h	equ	0xFE2
 10816                           fsr1l	equ	0xFE1
 10817                           indf2	equ	0xFDF
 10818                           postinc2	equ	0xFDE
 10819                           postdec2	equ	0xFDD
 10820                           plusw2	equ	0xFDB
 10821                           fsr2h	equ	0xFDA
 10822                           fsr2l	equ	0xFD9
 10823                           status	equ	0xFD8
 10824                           
 10825 ;; *************** function _disk_readp *****************
 10826 ;; Defined at:
 10827 ;;		line 155 in file "diskio.c"
 10828 ;; Parameters:    Size  Location     Type
 10829 ;;  rd              2    0[BANK0 ] PTR unsigned char 
 10830 ;;		 -> pf_readdir@dir(32), pf_opendir@dir(32), pf_open@dir(32), pf_mount@buf(36), 
 10831 ;;		 -> NULL(0), get_fat@buf(4), data_buffer_32(32), 
 10832 ;;  sector          4    2[BANK0 ] unsigned long 
 10833 ;;  offset          2    6[BANK0 ] unsigned int 
 10834 ;;  count           2    8[BANK0 ] unsigned int 
 10835 ;; Auto vars:     Size  Location     Type
 10836 ;;  start_add       4   11[BANK0 ] unsigned long 
 10837 ;;  length          2   16[BANK0 ] int 
 10838 ;;  i               2    0        int 
 10839 ;;  buff            1   15[BANK0 ] unsigned char 
 10840 ;;  ptr             1   10[BANK0 ] unsigned char 
 10841 ;;  res             1    0        enum E14
 10842 ;; Return value:  Size  Location     Type
 10843 ;;                  1    wreg      enum E14
 10844 ;; Registers used:
 10845 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10846 ;; Tracked objects:
 10847 ;;		On entry : 0/0
 10848 ;;		On exit  : 0/0
 10849 ;;		Unchanged: 0/0
 10850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10851 ;;      Params:         0      10       0       0       0       0       0       0       0
 10852 ;;      Locals:         0       8       0       0       0       0       0       0       0
 10853 ;;      Temps:          4       0       0       0       0       0       0       0       0
 10854 ;;      Totals:         4      18       0       0       0       0       0       0       0
 10855 ;;Total ram usage:       22 bytes
 10856 ;; Hardware stack levels used:    1
 10857 ;; Hardware stack levels required when called:    6
 10858 ;; This function calls:
 10859 ;;		_command
 10860 ;;		_dummy_clocks
 10861 ;;		_proceed
 10862 ;;		_response
 10863 ;; This function is called by:
 10864 ;;		_get_fat
 10865 ;;		_dir_find
 10866 ;;		_check_fs
 10867 ;;		_pf_mount
 10868 ;;		_pf_read
 10869 ;;		_dir_read
 10870 ;; This function uses a non-reentrant model
 10871 ;;
 10872                           
 10873                           	psect	text41
 10874  001278                     __ptext41:
 10875                           	opt stack 0
 10876  001278                     _disk_readp:
 10877                           	opt stack 20
 10878                           
 10879                           ;diskio.c: 162: DRESULT res;
 10880                           ;diskio.c: 163: unsigned char ptr=0X00,buff;
 10881                           
 10882                           ;incstack = 0
 10883  001278  0E00               	movlw	0
 10884  00127A  0100               	movlb	0	; () banked
 10885  00127C  6F6A               	movwf	disk_readp@ptr& (0+255),b
 10886                           
 10887                           ; BSR set to: 0
 10888                           ;diskio.c: 164: unsigned long int start_add;
 10889                           ;diskio.c: 165: static unsigned char arr[512];
 10890                           ;diskio.c: 166: int length,i;
 10891                           ;diskio.c: 168: if(offset == 0)
 10892  00127E  5166               	movf	disk_readp@offset& (0+255),w,b
 10893  001280  1167               	iorwf	(disk_readp@offset+1)& (0+255),w,b
 10894  001282  A4D8               	btfss	status,2,c
 10895  001284  D0A4               	goto	l756
 10896                           
 10897                           ; BSR set to: 0
 10898                           ;diskio.c: 169: {
 10899                           ;diskio.c: 170: start_add = ((sector*512));
 10900  001286  C062  F028         	movff	disk_readp@sector,??_disk_readp
 10901  00128A  C063  F029         	movff	disk_readp@sector+1,??_disk_readp+1
 10902  00128E  C064  F02A         	movff	disk_readp@sector+2,??_disk_readp+2
 10903  001292  C065  F02B         	movff	disk_readp@sector+3,??_disk_readp+3
 10904  001296  0E09               	movlw	9
 10905  001298                     u6615:
 10906  001298  90D8               	bcf	status,0,c
 10907  00129A  3628               	rlcf	??_disk_readp,f,c
 10908  00129C  3629               	rlcf	??_disk_readp+1,f,c
 10909  00129E  362A               	rlcf	??_disk_readp+2,f,c
 10910  0012A0  362B               	rlcf	??_disk_readp+3,f,c
 10911  0012A2  2EE8               	decfsz	wreg,f,c
 10912  0012A4  D7F9               	goto	u6615
 10913  0012A6  C028  F06B         	movff	??_disk_readp,disk_readp@start_add
 10914  0012AA  C029  F06C         	movff	??_disk_readp+1,disk_readp@start_add+1
 10915  0012AE  C02A  F06D         	movff	??_disk_readp+2,disk_readp@start_add+2
 10916  0012B2  C02B  F06E         	movff	??_disk_readp+3,disk_readp@start_add+3
 10917                           
 10918                           ; BSR set to: 0
 10919                           ;diskio.c: 172: _delay((unsigned long)((1000)*(48000000/4000.0)));
 10920  0012B6  0E3D               	movlw	61
 10921  0012B8  6E29               	movwf	(??_disk_readp+1)& (0+255),c
 10922  0012BA  0EE1               	movlw	225
 10923  0012BC  6E28               	movwf	??_disk_readp& (0+255),c
 10924  0012BE  0E40               	movlw	64
 10925  0012C0                     u9257:
 10926  0012C0  2EE8               	decfsz	wreg,f,c
 10927  0012C2  D7FE               	bra	u9257
 10928  0012C4  2E28               	decfsz	??_disk_readp& (0+255),f,c
 10929  0012C6  D7FC               	bra	u9257
 10930  0012C8  2E29               	decfsz	(??_disk_readp+1)& (0+255),f,c
 10931  0012CA  D7FA               	bra	u9257
 10932                           
 10933                           ;diskio.c: 174: dummy_clocks(8);
 10934  0012CC  0E08               	movlw	8
 10935  0012CE  EC9D  F017         	call	_dummy_clocks
 10936                           
 10937                           ;diskio.c: 175: command(0X52,start_add,0X00);
 10938  0012D2  C06B  F021         	movff	disk_readp@start_add,command@arg
 10939  0012D6  C06C  F022         	movff	disk_readp@start_add+1,command@arg+1
 10940  0012DA  C06D  F023         	movff	disk_readp@start_add+2,command@arg+2
 10941  0012DE  C06E  F024         	movff	disk_readp@start_add+3,command@arg+3
 10942  0012E2  0E00               	movlw	0
 10943  0012E4  6E25               	movwf	command@CRC,c
 10944  0012E6  0E52               	movlw	82
 10945  0012E8  EC4A  F017         	call	_command
 10946                           
 10947                           ;diskio.c: 176: proceed();
 10948  0012EC  EC30  F019         	call	_proceed	;wreg free
 10949  0012F0                     
 10950                           ;diskio.c: 178: buff = response();
 10951  0012F0  EC23  F019         	call	_response	;wreg free
 10952  0012F4  0100               	movlb	0	; () banked
 10953  0012F6  6F6F               	movwf	disk_readp@buff& (0+255),b
 10954                           
 10955                           ; BSR set to: 0
 10956                           ;diskio.c: 179: }while(buff!=0x00);
 10957  0012F8  516F               	movf	disk_readp@buff& (0+255),w,b
 10958  0012FA  A4D8               	btfss	status,2,c
 10959  0012FC  D7F9               	goto	l757
 10960                           
 10961                           ; BSR set to: 0
 10962                           ;diskio.c: 180: _delay((unsigned long)((1000)*(48000000/4000.0)));
 10963                           
 10964                           ; BSR set to: 0
 10965  0012FE  0E3D               	movlw	61
 10966  001300  6E29               	movwf	(??_disk_readp+1)& (0+255),c
 10967  001302  0EE1               	movlw	225
 10968  001304  6E28               	movwf	??_disk_readp& (0+255),c
 10969  001306  0E40               	movlw	64
 10970  001308                     u9267:
 10971  001308  2EE8               	decfsz	wreg,f,c
 10972  00130A  D7FE               	bra	u9267
 10973  00130C  2E28               	decfsz	??_disk_readp& (0+255),f,c
 10974  00130E  D7FC               	bra	u9267
 10975  001310  2E29               	decfsz	(??_disk_readp+1)& (0+255),f,c
 10976  001312  D7FA               	bra	u9267
 10977                           
 10978                           ;diskio.c: 182: proceed();
 10979  001314  EC30  F019         	call	_proceed	;wreg free
 10980  001318                     
 10981                           ;diskio.c: 184: buff = response();
 10982  001318  EC23  F019         	call	_response	;wreg free
 10983  00131C  0100               	movlb	0	; () banked
 10984  00131E  6F6F               	movwf	disk_readp@buff& (0+255),b
 10985                           
 10986                           ; BSR set to: 0
 10987                           ;diskio.c: 185: }while(buff!=0xFE);
 10988  001320  0EFE               	movlw	254
 10989  001322  196F               	xorwf	disk_readp@buff& (0+255),w,b
 10990  001324  A4D8               	btfss	status,2,c
 10991  001326  D7F8               	goto	l759
 10992                           
 10993                           ; BSR set to: 0
 10994                           ;diskio.c: 186: length = 0;
 10995                           
 10996                           ; BSR set to: 0
 10997  001328  0E00               	movlw	0
 10998  00132A  6F71               	movwf	(disk_readp@length+1)& (0+255),b
 10999  00132C  0E00               	movlw	0
 11000  00132E  6F70               	movwf	disk_readp@length& (0+255),b
 11001                           
 11002                           ;diskio.c: 187: while ( length < count )
 11003  001330  D00C               	goto	l761
 11004  001332                     
 11005                           ; BSR set to: 0
 11006                           ;diskio.c: 188: {
 11007                           ;diskio.c: 189: arr[length] = response();
 11008                           
 11009                           ; BSR set to: 0
 11010  001332  0EF3               	movlw	low disk_readp@arr
 11011  001334  2570               	addwf	disk_readp@length& (0+255),w,b
 11012  001336  6ED9               	movwf	fsr2l,c
 11013  001338  0E01               	movlw	high disk_readp@arr
 11014  00133A  2171               	addwfc	(disk_readp@length+1)& (0+255),w,b
 11015  00133C  6EDA               	movwf	fsr2h,c
 11016  00133E  EC23  F019         	call	_response	;wreg free
 11017  001342  6EDF               	movwf	indf2,c
 11018                           
 11019                           ;diskio.c: 190: length++;
 11020  001344  0100               	movlb	0	; () banked
 11021  001346  4B70               	infsnz	disk_readp@length& (0+255),f,b
 11022  001348  2B71               	incf	(disk_readp@length+1)& (0+255),f,b
 11023  00134A                     l761:
 11024                           
 11025                           ; BSR set to: 0
 11026                           
 11027                           ; BSR set to: 0
 11028  00134A  5168               	movf	disk_readp@count& (0+255),w,b
 11029  00134C  5D70               	subwf	disk_readp@length& (0+255),w,b
 11030  00134E  5169               	movf	(disk_readp@count+1)& (0+255),w,b
 11031  001350  5971               	subwfb	(disk_readp@length+1)& (0+255),w,b
 11032  001352  A0D8               	btfss	status,0,c
 11033  001354  D7EE               	goto	l762
 11034                           
 11035                           ; BSR set to: 0
 11036                           ;diskio.c: 191: }
 11037                           ;diskio.c: 193: _delay((unsigned long)((1000)*(48000000/4000.0)));
 11038                           
 11039                           ; BSR set to: 0
 11040  001356  0E3D               	movlw	61
 11041  001358  6E29               	movwf	(??_disk_readp+1)& (0+255),c
 11042  00135A  0EE1               	movlw	225
 11043  00135C  6E28               	movwf	??_disk_readp& (0+255),c
 11044  00135E  0E40               	movlw	64
 11045  001360                     u9277:
 11046  001360  2EE8               	decfsz	wreg,f,c
 11047  001362  D7FE               	bra	u9277
 11048  001364  2E28               	decfsz	??_disk_readp& (0+255),f,c
 11049  001366  D7FC               	bra	u9277
 11050  001368  2E29               	decfsz	(??_disk_readp+1)& (0+255),f,c
 11051  00136A  D7FA               	bra	u9277
 11052                           
 11053                           ;diskio.c: 195: dummy_clocks(8);
 11054  00136C  0E08               	movlw	8
 11055  00136E  EC9D  F017         	call	_dummy_clocks
 11056                           
 11057                           ;diskio.c: 196: command(0X4C,0X00000000,0X00);
 11058  001372  0E00               	movlw	0
 11059  001374  6E21               	movwf	command@arg,c
 11060  001376  0E00               	movlw	0
 11061  001378  6E22               	movwf	command@arg+1,c
 11062  00137A  0E00               	movlw	0
 11063  00137C  6E23               	movwf	command@arg+2,c
 11064  00137E  0E00               	movlw	0
 11065  001380  6E24               	movwf	command@arg+3,c
 11066  001382  0E00               	movlw	0
 11067  001384  6E25               	movwf	command@CRC,c
 11068  001386  0E4C               	movlw	76
 11069  001388  EC4A  F017         	call	_command
 11070                           
 11071                           ;diskio.c: 197: proceed();
 11072  00138C  EC30  F019         	call	_proceed	;wreg free
 11073  001390                     
 11074                           ;diskio.c: 199: buff = response();
 11075  001390  EC23  F019         	call	_response	;wreg free
 11076  001394  0100               	movlb	0	; () banked
 11077  001396  6F6F               	movwf	disk_readp@buff& (0+255),b
 11078                           
 11079                           ; BSR set to: 0
 11080                           ;diskio.c: 200: }while(buff!=0xFF);
 11081  001398  296F               	incf	disk_readp@buff& (0+255),w,b
 11082  00139A  A4D8               	btfss	status,2,c
 11083  00139C  D7F9               	goto	l764
 11084                           
 11085                           ; BSR set to: 0
 11086                           ;diskio.c: 202: length = 0;
 11087                           
 11088                           ; BSR set to: 0
 11089  00139E  0E00               	movlw	0
 11090  0013A0  6F71               	movwf	(disk_readp@length+1)& (0+255),b
 11091  0013A2  0E00               	movlw	0
 11092  0013A4  6F70               	movwf	disk_readp@length& (0+255),b
 11093                           
 11094                           ;diskio.c: 204: while(arr[length]!='\0')
 11095  0013A6  D002               	goto	l766
 11096  0013A8                     
 11097                           ; BSR set to: 0
 11098                           ;diskio.c: 205: {
 11099                           ;diskio.c: 207: length++;
 11100                           
 11101                           ; BSR set to: 0
 11102  0013A8  4B70               	infsnz	disk_readp@length& (0+255),f,b
 11103  0013AA  2B71               	incf	(disk_readp@length+1)& (0+255),f,b
 11104  0013AC                     l766:
 11105                           
 11106                           ; BSR set to: 0
 11107                           
 11108                           ; BSR set to: 0
 11109  0013AC  0EF3               	movlw	low disk_readp@arr
 11110  0013AE  2570               	addwf	disk_readp@length& (0+255),w,b
 11111  0013B0  6ED9               	movwf	fsr2l,c
 11112  0013B2  0E01               	movlw	high disk_readp@arr
 11113  0013B4  2171               	addwfc	(disk_readp@length+1)& (0+255),w,b
 11114  0013B6  6EDA               	movwf	fsr2h,c
 11115  0013B8  50DF               	movf	indf2,w,c
 11116  0013BA  A4D8               	btfss	status,2,c
 11117  0013BC  D7F5               	goto	l767
 11118                           
 11119                           ; BSR set to: 0
 11120                           ;diskio.c: 208: }
 11121                           ;diskio.c: 210: *rd = length;
 11122                           
 11123                           ; BSR set to: 0
 11124  0013BE  C060  FFD9         	movff	disk_readp@rd,fsr2l
 11125  0013C2  C061  FFDA         	movff	disk_readp@rd+1,fsr2h
 11126  0013C6  C070  FFDF         	movff	disk_readp@length,indf2
 11127                           
 11128                           ; BSR set to: 0
 11129                           ;diskio.c: 211: return RES_OK;
 11130  0013CA  0E00               	movlw	0
 11131                           
 11132                           ; BSR set to: 0
 11133                           ;diskio.c: 212: }
 11134                           
 11135                           ; BSR set to: 0
 11136  0013CC  0012               	return	
 11137  0013CE                     l756:
 11138                           
 11139                           ; BSR set to: 0
 11140                           ;diskio.c: 213: else
 11141                           ;diskio.c: 214: {
 11142                           ;diskio.c: 215: start_add = (sector*512);
 11143                           
 11144                           ; BSR set to: 0
 11145  0013CE  C062  F028         	movff	disk_readp@sector,??_disk_readp
 11146  0013D2  C063  F029         	movff	disk_readp@sector+1,??_disk_readp+1
 11147  0013D6  C064  F02A         	movff	disk_readp@sector+2,??_disk_readp+2
 11148  0013DA  C065  F02B         	movff	disk_readp@sector+3,??_disk_readp+3
 11149  0013DE  0E09               	movlw	9
 11150  0013E0                     u6675:
 11151  0013E0  90D8               	bcf	status,0,c
 11152  0013E2  3628               	rlcf	??_disk_readp,f,c
 11153  0013E4  3629               	rlcf	??_disk_readp+1,f,c
 11154  0013E6  362A               	rlcf	??_disk_readp+2,f,c
 11155  0013E8  362B               	rlcf	??_disk_readp+3,f,c
 11156  0013EA  2EE8               	decfsz	wreg,f,c
 11157  0013EC  D7F9               	goto	u6675
 11158  0013EE  C028  F06B         	movff	??_disk_readp,disk_readp@start_add
 11159  0013F2  C029  F06C         	movff	??_disk_readp+1,disk_readp@start_add+1
 11160  0013F6  C02A  F06D         	movff	??_disk_readp+2,disk_readp@start_add+2
 11161  0013FA  C02B  F06E         	movff	??_disk_readp+3,disk_readp@start_add+3
 11162                           
 11163                           ; BSR set to: 0
 11164                           ;diskio.c: 217: length = 0;
 11165  0013FE  0E00               	movlw	0
 11166  001400  6F71               	movwf	(disk_readp@length+1)& (0+255),b
 11167  001402  0E00               	movlw	0
 11168  001404  6F70               	movwf	disk_readp@length& (0+255),b
 11169                           
 11170                           ;diskio.c: 218: while(length<512)
 11171  001406  D00A               	goto	l771
 11172  001408                     
 11173                           ; BSR set to: 0
 11174                           ;diskio.c: 219: {
 11175                           ;diskio.c: 220: arr[length] = 0;
 11176                           
 11177                           ; BSR set to: 0
 11178  001408  0EF3               	movlw	low disk_readp@arr
 11179  00140A  2570               	addwf	disk_readp@length& (0+255),w,b
 11180  00140C  6ED9               	movwf	fsr2l,c
 11181  00140E  0E01               	movlw	high disk_readp@arr
 11182  001410  2171               	addwfc	(disk_readp@length+1)& (0+255),w,b
 11183  001412  6EDA               	movwf	fsr2h,c
 11184  001414  0E00               	movlw	0
 11185  001416  6EDF               	movwf	indf2,c
 11186                           
 11187                           ; BSR set to: 0
 11188                           ;diskio.c: 221: length++;
 11189  001418  4B70               	infsnz	disk_readp@length& (0+255),f,b
 11190  00141A  2B71               	incf	(disk_readp@length+1)& (0+255),f,b
 11191  00141C                     l771:
 11192                           
 11193                           ; BSR set to: 0
 11194                           
 11195                           ; BSR set to: 0
 11196  00141C  BF71               	btfsc	(disk_readp@length+1)& (0+255),7,b
 11197  00141E  D7F4               	goto	l772
 11198  001420  0E02               	movlw	2
 11199  001422  5D71               	subwf	(disk_readp@length+1)& (0+255),w,b
 11200  001424  A0D8               	btfss	status,0,c
 11201  001426  D7F0               	goto	l772
 11202                           
 11203                           ; BSR set to: 0
 11204                           ;diskio.c: 222: }
 11205                           ;diskio.c: 224: _delay((unsigned long)((1000)*(48000000/4000.0)));
 11206                           
 11207                           ; BSR set to: 0
 11208  001428  0E3D               	movlw	61
 11209  00142A  6E29               	movwf	(??_disk_readp+1)& (0+255),c
 11210  00142C  0EE1               	movlw	225
 11211  00142E  6E28               	movwf	??_disk_readp& (0+255),c
 11212  001430  0E40               	movlw	64
 11213  001432                     u9287:
 11214  001432  2EE8               	decfsz	wreg,f,c
 11215  001434  D7FE               	bra	u9287
 11216  001436  2E28               	decfsz	??_disk_readp& (0+255),f,c
 11217  001438  D7FC               	bra	u9287
 11218  00143A  2E29               	decfsz	(??_disk_readp+1)& (0+255),f,c
 11219  00143C  D7FA               	bra	u9287
 11220                           
 11221                           ;diskio.c: 226: dummy_clocks(8);
 11222  00143E  0E08               	movlw	8
 11223  001440  EC9D  F017         	call	_dummy_clocks
 11224                           
 11225                           ;diskio.c: 228: command(0X51,start_add,0X00);
 11226  001444  C06B  F021         	movff	disk_readp@start_add,command@arg
 11227  001448  C06C  F022         	movff	disk_readp@start_add+1,command@arg+1
 11228  00144C  C06D  F023         	movff	disk_readp@start_add+2,command@arg+2
 11229  001450  C06E  F024         	movff	disk_readp@start_add+3,command@arg+3
 11230  001454  0E00               	movlw	0
 11231  001456  6E25               	movwf	command@CRC,c
 11232  001458  0E51               	movlw	81
 11233  00145A  EC4A  F017         	call	_command
 11234                           
 11235                           ;diskio.c: 229: proceed();
 11236  00145E  EC30  F019         	call	_proceed	;wreg free
 11237  001462                     
 11238                           ;diskio.c: 231: buff = response();
 11239  001462  EC23  F019         	call	_response	;wreg free
 11240  001466  0100               	movlb	0	; () banked
 11241  001468  6F6F               	movwf	disk_readp@buff& (0+255),b
 11242                           
 11243                           ; BSR set to: 0
 11244                           ;diskio.c: 232: }while(buff!=0x00);
 11245  00146A  516F               	movf	disk_readp@buff& (0+255),w,b
 11246  00146C  A4D8               	btfss	status,2,c
 11247  00146E  D7F9               	goto	l774
 11248  001470                     u6690:
 11249                           
 11250                           ; BSR set to: 0
 11251                           ;diskio.c: 234: buff = response();
 11252                           
 11253                           ; BSR set to: 0
 11254                           
 11255                           ;diskio.c: 233: do{
 11256                           
 11257                           ; BSR set to: 0
 11258  001470  EC23  F019         	call	_response	;wreg free
 11259  001474  0100               	movlb	0	; () banked
 11260  001476  6F6F               	movwf	disk_readp@buff& (0+255),b
 11261                           
 11262                           ; BSR set to: 0
 11263                           ;diskio.c: 235: }while(buff!=0xFE);
 11264  001478  0EFE               	movlw	254
 11265  00147A  196F               	xorwf	disk_readp@buff& (0+255),w,b
 11266  00147C  A4D8               	btfss	status,2,c
 11267  00147E  D7F8               	goto	u6690
 11268                           
 11269                           ; BSR set to: 0
 11270                           ;diskio.c: 237: length = 0;
 11271                           
 11272                           ; BSR set to: 0
 11273  001480  0E00               	movlw	0
 11274  001482  6F71               	movwf	(disk_readp@length+1)& (0+255),b
 11275  001484  0E00               	movlw	0
 11276  001486  6F70               	movwf	disk_readp@length& (0+255),b
 11277                           
 11278                           ;diskio.c: 238: while ( length < 512 )
 11279  001488  D048               	goto	u6730
 11280  00148A                     l6276:
 11281                           
 11282                           ; BSR set to: 0
 11283                           ;diskio.c: 241: {
 11284                           ;diskio.c: 242: arr[length] = response();
 11285  00148A  0EF3               	movlw	low disk_readp@arr
 11286  00148C  2570               	addwf	disk_readp@length& (0+255),w,b
 11287  00148E  6ED9               	movwf	fsr2l,c
 11288  001490  0E01               	movlw	high disk_readp@arr
 11289  001492  2171               	addwfc	(disk_readp@length+1)& (0+255),w,b
 11290  001494  6EDA               	movwf	fsr2h,c
 11291  001496  EC23  F019         	call	_response	;wreg free
 11292  00149A  6EDF               	movwf	indf2,c
 11293                           
 11294                           ;diskio.c: 243: length++;
 11295  00149C  0100               	movlb	0	; () banked
 11296  00149E  4B70               	infsnz	disk_readp@length& (0+255),f,b
 11297  0014A0  2B71               	incf	(disk_readp@length+1)& (0+255),f,b
 11298  0014A2                     
 11299                           ; BSR set to: 0
 11300                           
 11301                           ; BSR set to: 0
 11302  0014A2  0766               	decf	disk_readp@offset& (0+255),f,b
 11303  0014A4  A0D8               	btfss	status,0,c
 11304  0014A6  0767               	decf	(disk_readp@offset+1)& (0+255),f,b
 11305  0014A8  2966               	incf	disk_readp@offset& (0+255),w,b
 11306  0014AA  E1EF               	bnz	l6276
 11307  0014AC  2967               	incf	(disk_readp@offset+1)& (0+255),w,b
 11308  0014AE  B4D8               	btfsc	status,2,c
 11309  0014B0  D019               	goto	l783
 11310  0014B2  D7EB               	goto	l781
 11311  0014B4                     l6282:
 11312                           
 11313                           ; BSR set to: 0
 11314                           ;diskio.c: 246: {
 11315                           ;diskio.c: 247: *rd = response();
 11316  0014B4  EC23  F019         	call	_response	;wreg free
 11317  0014B8  C060  FFD9         	movff	disk_readp@rd,fsr2l
 11318  0014BC  C061  FFDA         	movff	disk_readp@rd+1,fsr2h
 11319  0014C0  6EDF               	movwf	indf2,c
 11320                           
 11321                           ;diskio.c: 248: arr[length] = *rd;
 11322  0014C2  C060  FFD9         	movff	disk_readp@rd,fsr2l
 11323  0014C6  C061  FFDA         	movff	disk_readp@rd+1,fsr2h
 11324  0014CA  0EF3               	movlw	low disk_readp@arr
 11325  0014CC  0100               	movlb	0	; () banked
 11326  0014CE  2570               	addwf	disk_readp@length& (0+255),w,b
 11327  0014D0  6EE1               	movwf	fsr1l,c
 11328  0014D2  0E01               	movlw	high disk_readp@arr
 11329  0014D4  2171               	addwfc	(disk_readp@length+1)& (0+255),w,b
 11330  0014D6  6EE2               	movwf	fsr1h,c
 11331  0014D8  CFDF FFE7          	movff	indf2,indf1
 11332                           
 11333                           ; BSR set to: 0
 11334                           ;diskio.c: 249: rd++;
 11335  0014DC  4B60               	infsnz	disk_readp@rd& (0+255),f,b
 11336  0014DE  2B61               	incf	(disk_readp@rd+1)& (0+255),f,b
 11337                           
 11338                           ; BSR set to: 0
 11339                           ;diskio.c: 250: length++;
 11340  0014E0  4B70               	infsnz	disk_readp@length& (0+255),f,b
 11341  0014E2  2B71               	incf	(disk_readp@length+1)& (0+255),f,b
 11342  0014E4                     l783:
 11343                           
 11344                           ; BSR set to: 0
 11345                           
 11346                           ; BSR set to: 0
 11347  0014E4  0768               	decf	disk_readp@count& (0+255),f,b
 11348  0014E6  A0D8               	btfss	status,0,c
 11349  0014E8  0769               	decf	(disk_readp@count+1)& (0+255),f,b
 11350  0014EA  2968               	incf	disk_readp@count& (0+255),w,b
 11351  0014EC  E1E3               	bnz	l6282
 11352  0014EE  2969               	incf	(disk_readp@count+1)& (0+255),w,b
 11353  0014F0  B4D8               	btfsc	status,2,c
 11354  0014F2  D00D               	goto	l786
 11355  0014F4  D7DF               	goto	l784
 11356  0014F6                     
 11357                           ; BSR set to: 0
 11358                           ;diskio.c: 253: {
 11359                           ;diskio.c: 254: arr[length] = response();
 11360                           
 11361                           ; BSR set to: 0
 11362  0014F6  0EF3               	movlw	low disk_readp@arr
 11363  0014F8  2570               	addwf	disk_readp@length& (0+255),w,b
 11364  0014FA  6ED9               	movwf	fsr2l,c
 11365  0014FC  0E01               	movlw	high disk_readp@arr
 11366  0014FE  2171               	addwfc	(disk_readp@length+1)& (0+255),w,b
 11367  001500  6EDA               	movwf	fsr2h,c
 11368  001502  EC23  F019         	call	_response	;wreg free
 11369  001506  6EDF               	movwf	indf2,c
 11370                           
 11371                           ;diskio.c: 255: length++;
 11372  001508  0100               	movlb	0	; () banked
 11373  00150A  4B70               	infsnz	disk_readp@length& (0+255),f,b
 11374  00150C  2B71               	incf	(disk_readp@length+1)& (0+255),f,b
 11375  00150E                     l786:
 11376                           
 11377                           ; BSR set to: 0
 11378                           
 11379                           ; BSR set to: 0
 11380  00150E  BF71               	btfsc	(disk_readp@length+1)& (0+255),7,b
 11381  001510  D7F2               	goto	l787
 11382  001512  0E02               	movlw	2
 11383  001514  5D71               	subwf	(disk_readp@length+1)& (0+255),w,b
 11384  001516  A0D8               	btfss	status,0,c
 11385  001518  D7EE               	goto	l787
 11386  00151A                     u6730:
 11387                           
 11388                           ; BSR set to: 0
 11389                           
 11390                           ; BSR set to: 0
 11391                           
 11392                           ; BSR set to: 0
 11393  00151A  BF71               	btfsc	(disk_readp@length+1)& (0+255),7,b
 11394  00151C  D7C2               	goto	l780
 11395  00151E  0E02               	movlw	2
 11396  001520  5D71               	subwf	(disk_readp@length+1)& (0+255),w,b
 11397  001522  A0D8               	btfss	status,0,c
 11398  001524  D7BE               	goto	l780
 11399                           
 11400                           ; BSR set to: 0
 11401                           ;diskio.c: 256: }
 11402                           ;diskio.c: 257: }
 11403                           ;diskio.c: 258: _delay((unsigned long)((1000)*(48000000/4000.0)));
 11404                           
 11405                           ; BSR set to: 0
 11406  001526  0E3D               	movlw	61
 11407  001528  6E29               	movwf	(??_disk_readp+1)& (0+255),c
 11408  00152A  0EE1               	movlw	225
 11409  00152C  6E28               	movwf	??_disk_readp& (0+255),c
 11410  00152E  0E40               	movlw	64
 11411  001530                     u9297:
 11412  001530  2EE8               	decfsz	wreg,f,c
 11413  001532  D7FE               	bra	u9297
 11414  001534  2E28               	decfsz	??_disk_readp& (0+255),f,c
 11415  001536  D7FC               	bra	u9297
 11416  001538  2E29               	decfsz	(??_disk_readp+1)& (0+255),f,c
 11417  00153A  D7FA               	bra	u9297
 11418                           
 11419                           ;diskio.c: 264: command(0X4C,0X00000000,0X00);
 11420  00153C  0E00               	movlw	0
 11421  00153E  6E21               	movwf	command@arg,c
 11422  001540  0E00               	movlw	0
 11423  001542  6E22               	movwf	command@arg+1,c
 11424  001544  0E00               	movlw	0
 11425  001546  6E23               	movwf	command@arg+2,c
 11426  001548  0E00               	movlw	0
 11427  00154A  6E24               	movwf	command@arg+3,c
 11428  00154C  0E00               	movlw	0
 11429  00154E  6E25               	movwf	command@CRC,c
 11430  001550  0E4C               	movlw	76
 11431  001552  EC4A  F017         	call	_command
 11432                           
 11433                           ;diskio.c: 265: proceed();
 11434  001556  EC30  F019         	call	_proceed	;wreg free
 11435  00155A                     
 11436                           ;diskio.c: 267: buff = response();
 11437  00155A  EC23  F019         	call	_response	;wreg free
 11438  00155E  0100               	movlb	0	; () banked
 11439  001560  6F6F               	movwf	disk_readp@buff& (0+255),b
 11440                           
 11441                           ; BSR set to: 0
 11442                           ;diskio.c: 268: }while(buff!=0xFF);
 11443  001562  296F               	incf	disk_readp@buff& (0+255),w,b
 11444  001564  A4D8               	btfss	status,2,c
 11445  001566  D7F9               	goto	l790
 11446                           
 11447                           ; BSR set to: 0
 11448                           ;diskio.c: 270: length = 0;
 11449                           
 11450                           ; BSR set to: 0
 11451  001568  0E00               	movlw	0
 11452  00156A  6F71               	movwf	(disk_readp@length+1)& (0+255),b
 11453  00156C  0E00               	movlw	0
 11454  00156E  6F70               	movwf	disk_readp@length& (0+255),b
 11455                           
 11456                           ; BSR set to: 0
 11457                           ;diskio.c: 272: if(flag == 1){
 11458  001570  043B               	decf	_flag,w,c
 11459  001572  103C               	iorwf	_flag+1,w,c
 11460  001574  B4D8               	btfsc	status,2,c
 11461  001576  D003               	goto	l793
 11462  001578  D00C               	goto	l792
 11463  00157A                     
 11464                           ; BSR set to: 0
 11465                           ;diskio.c: 274: {
 11466                           ;diskio.c: 276: length++;
 11467                           
 11468                           ; BSR set to: 0
 11469  00157A  4B70               	infsnz	disk_readp@length& (0+255),f,b
 11470  00157C  2B71               	incf	(disk_readp@length+1)& (0+255),f,b
 11471  00157E                     l793:
 11472                           
 11473                           ; BSR set to: 0
 11474                           
 11475                           ; BSR set to: 0
 11476  00157E  0EF3               	movlw	low disk_readp@arr
 11477  001580  2570               	addwf	disk_readp@length& (0+255),w,b
 11478  001582  6ED9               	movwf	fsr2l,c
 11479  001584  0E01               	movlw	high disk_readp@arr
 11480  001586  2171               	addwfc	(disk_readp@length+1)& (0+255),w,b
 11481  001588  6EDA               	movwf	fsr2h,c
 11482  00158A  50DF               	movf	indf2,w,c
 11483  00158C  B4D8               	btfsc	status,2,c
 11484  00158E  D00C               	goto	l796
 11485  001590  D7F4               	goto	l794
 11486  001592                     l792:
 11487                           
 11488                           ; BSR set to: 0
 11489                           ;diskio.c: 279: else
 11490                           ;diskio.c: 282: _delay((unsigned long)((2000)*(48000000/4000.0)));
 11491                           
 11492                           ; BSR set to: 0
 11493  001592  0E7A               	movlw	122
 11494  001594  6E29               	movwf	(??_disk_readp+1)& (0+255),c
 11495  001596  0EC1               	movlw	193
 11496  001598  6E28               	movwf	??_disk_readp& (0+255),c
 11497  00159A  0E82               	movlw	130
 11498  00159C                     u9307:
 11499  00159C  2EE8               	decfsz	wreg,f,c
 11500  00159E  D7FE               	bra	u9307
 11501  0015A0  2E28               	decfsz	??_disk_readp& (0+255),f,c
 11502  0015A2  D7FC               	bra	u9307
 11503  0015A4  2E29               	decfsz	(??_disk_readp+1)& (0+255),f,c
 11504  0015A6  D7FA               	bra	u9307
 11505  0015A8                     l796:
 11506                           
 11507                           ;diskio.c: 285: return RES_OK;
 11508  0015A8  0E00               	movlw	0
 11509  0015AA  0012               	return	
 11510  0015AC                     __end_of_disk_readp:
 11511                           	opt stack 0
 11512                           tosu	equ	0xFFF
 11513                           tosh	equ	0xFFE
 11514                           tosl	equ	0xFFD
 11515                           pclath	equ	0xFFA
 11516                           tblptru	equ	0xFF8
 11517                           tblptrh	equ	0xFF7
 11518                           tblptrl	equ	0xFF6
 11519                           tablat	equ	0xFF5
 11520                           prodh	equ	0xFF4
 11521                           prodl	equ	0xFF3
 11522                           intcon	equ	0xFF2
 11523                           intcon2	equ	0xFF1
 11524                           intcon3	equ	0xFF0
 11525                           postinc0	equ	0xFEE
 11526                           wreg	equ	0xFE8
 11527                           indf1	equ	0xFE7
 11528                           postinc1	equ	0xFE6
 11529                           postdec1	equ	0xFE5
 11530                           fsr1h	equ	0xFE2
 11531                           fsr1l	equ	0xFE1
 11532                           indf2	equ	0xFDF
 11533                           postinc2	equ	0xFDE
 11534                           postdec2	equ	0xFDD
 11535                           plusw2	equ	0xFDB
 11536                           fsr2h	equ	0xFDA
 11537                           fsr2l	equ	0xFD9
 11538                           status	equ	0xFD8
 11539                           
 11540 ;; *************** function _response *****************
 11541 ;; Defined at:
 11542 ;;		line 311 in file "bibliotecas/SDCard.c"
 11543 ;; Parameters:    Size  Location     Type
 11544 ;;		None
 11545 ;; Auto vars:     Size  Location     Type
 11546 ;;  buff            1   26[COMRAM] unsigned char 
 11547 ;; Return value:  Size  Location     Type
 11548 ;;                  1    wreg      unsigned char 
 11549 ;; Registers used:
 11550 ;;		wreg, status,2, cstack
 11551 ;; Tracked objects:
 11552 ;;		On entry : 0/0
 11553 ;;		On exit  : 0/0
 11554 ;;		Unchanged: 0/0
 11555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11556 ;;      Params:         0       0       0       0       0       0       0       0       0
 11557 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11558 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11559 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11560 ;;Total ram usage:        1 bytes
 11561 ;; Hardware stack levels used:    1
 11562 ;; Hardware stack levels required when called:    3
 11563 ;; This function calls:
 11564 ;;		_recebe_dado_SPI
 11565 ;; This function is called by:
 11566 ;;		_reset
 11567 ;;		_disk_initialize
 11568 ;;		_disk_readp
 11569 ;;		_disk_writep
 11570 ;; This function uses a non-reentrant model
 11571 ;;
 11572                           
 11573                           	psect	text42
 11574  003246                     __ptext42:
 11575                           	opt stack 0
 11576  003246                     _response:
 11577                           	opt stack 22
 11578                           
 11579                           ;SDCard.c: 314: unsigned char buff;
 11580                           ;SDCard.c: 315: LATBbits.LATB4 = 1;
 11581                           
 11582                           ;incstack = 0
 11583  003246  888A               	bsf	3978,4,c	;volatile
 11584                           
 11585                           ;SDCard.c: 316: buff= recebe_dado_SPI();
 11586  003248  EC08  F019         	call	_recebe_dado_SPI	;wreg free
 11587  00324C  6E1B               	movwf	response@buff,c
 11588                           
 11589                           ;SDCard.c: 317: LATBbits.LATB4 = 0;
 11590  00324E  988A               	bcf	3978,4,c	;volatile
 11591                           
 11592                           ;SDCard.c: 318: return buff;
 11593  003250  501B               	movf	response@buff,w,c
 11594  003252  0012               	return	
 11595  003254                     __end_of_response:
 11596                           	opt stack 0
 11597                           tosu	equ	0xFFF
 11598                           tosh	equ	0xFFE
 11599                           tosl	equ	0xFFD
 11600                           pclath	equ	0xFFA
 11601                           tblptru	equ	0xFF8
 11602                           tblptrh	equ	0xFF7
 11603                           tblptrl	equ	0xFF6
 11604                           tablat	equ	0xFF5
 11605                           prodh	equ	0xFF4
 11606                           prodl	equ	0xFF3
 11607                           intcon	equ	0xFF2
 11608                           intcon2	equ	0xFF1
 11609                           intcon3	equ	0xFF0
 11610                           postinc0	equ	0xFEE
 11611                           wreg	equ	0xFE8
 11612                           indf1	equ	0xFE7
 11613                           postinc1	equ	0xFE6
 11614                           postdec1	equ	0xFE5
 11615                           fsr1h	equ	0xFE2
 11616                           fsr1l	equ	0xFE1
 11617                           indf2	equ	0xFDF
 11618                           postinc2	equ	0xFDE
 11619                           postdec2	equ	0xFDD
 11620                           plusw2	equ	0xFDB
 11621                           fsr2h	equ	0xFDA
 11622                           fsr2l	equ	0xFD9
 11623                           status	equ	0xFD8
 11624                           
 11625 ;; *************** function _recebe_dado_SPI *****************
 11626 ;; Defined at:
 11627 ;;		line 124 in file "bibliotecas/SPI.c"
 11628 ;; Parameters:    Size  Location     Type
 11629 ;;		None
 11630 ;; Auto vars:     Size  Location     Type
 11631 ;;  temp_var        1   25[COMRAM] unsigned char 
 11632 ;; Return value:  Size  Location     Type
 11633 ;;                  1    wreg      unsigned char 
 11634 ;; Registers used:
 11635 ;;		wreg, status,2
 11636 ;; Tracked objects:
 11637 ;;		On entry : 0/0
 11638 ;;		On exit  : 0/0
 11639 ;;		Unchanged: 0/0
 11640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11641 ;;      Params:         0       0       0       0       0       0       0       0       0
 11642 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11643 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11644 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11645 ;;Total ram usage:        1 bytes
 11646 ;; Hardware stack levels used:    1
 11647 ;; Hardware stack levels required when called:    2
 11648 ;; This function calls:
 11649 ;;		Nothing
 11650 ;; This function is called by:
 11651 ;;		_response
 11652 ;; This function uses a non-reentrant model
 11653 ;;
 11654                           
 11655                           	psect	text43
 11656  003210                     __ptext43:
 11657                           	opt stack 0
 11658  003210                     _recebe_dado_SPI:
 11659                           	opt stack 22
 11660                           
 11661                           ;SPI.c: 126: PIR1bits.SSPIF = 0;
 11662                           
 11663                           ;incstack = 0
 11664  003210  969E               	bcf	3998,3,c	;volatile
 11665                           
 11666                           ;SPI.c: 127: unsigned char temp_var;
 11667                           ;SPI.c: 128: temp_var = SSPBUF;
 11668  003212  CFC9 F01A          	movff	4041,recebe_dado_SPI@temp_var	;volatile
 11669                           
 11670                           ;SPI.c: 131: SSPBUF = 0x00;
 11671  003216  0E00               	movlw	0
 11672  003218  6EC9               	movwf	4041,c	;volatile
 11673  00321A  A69E               	btfss	3998,3,c	;volatile
 11674  00321C  D7FE               	goto	l109
 11675                           
 11676                           ;SPI.c: 134: return (SSPBUF);
 11677  00321E  50C9               	movf	4041,w,c	;volatile
 11678  003220  0012               	return	
 11679  003222                     __end_of_recebe_dado_SPI:
 11680                           	opt stack 0
 11681                           tosu	equ	0xFFF
 11682                           tosh	equ	0xFFE
 11683                           tosl	equ	0xFFD
 11684                           pclath	equ	0xFFA
 11685                           tblptru	equ	0xFF8
 11686                           tblptrh	equ	0xFF7
 11687                           tblptrl	equ	0xFF6
 11688                           tablat	equ	0xFF5
 11689                           prodh	equ	0xFF4
 11690                           prodl	equ	0xFF3
 11691                           intcon	equ	0xFF2
 11692                           intcon2	equ	0xFF1
 11693                           intcon3	equ	0xFF0
 11694                           postinc0	equ	0xFEE
 11695                           wreg	equ	0xFE8
 11696                           indf1	equ	0xFE7
 11697                           postinc1	equ	0xFE6
 11698                           postdec1	equ	0xFE5
 11699                           fsr1h	equ	0xFE2
 11700                           fsr1l	equ	0xFE1
 11701                           indf2	equ	0xFDF
 11702                           postinc2	equ	0xFDE
 11703                           postdec2	equ	0xFDD
 11704                           plusw2	equ	0xFDB
 11705                           fsr2h	equ	0xFDA
 11706                           fsr2l	equ	0xFD9
 11707                           status	equ	0xFD8
 11708                           
 11709 ;; *************** function _proceed *****************
 11710 ;; Defined at:
 11711 ;;		line 336 in file "bibliotecas/SDCard.c"
 11712 ;; Parameters:    Size  Location     Type
 11713 ;;		None
 11714 ;; Auto vars:     Size  Location     Type
 11715 ;;		None
 11716 ;; Return value:  Size  Location     Type
 11717 ;;                  1    wreg      void 
 11718 ;; Registers used:
 11719 ;;		wreg, status,2, status,0, cstack
 11720 ;; Tracked objects:
 11721 ;;		On entry : 0/0
 11722 ;;		On exit  : 0/0
 11723 ;;		Unchanged: 0/0
 11724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11725 ;;      Params:         0       0       0       0       0       0       0       0       0
 11726 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11727 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11728 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11729 ;;Total ram usage:        0 bytes
 11730 ;; Hardware stack levels used:    1
 11731 ;; Hardware stack levels required when called:    5
 11732 ;; This function calls:
 11733 ;;		_WriteSPI_
 11734 ;; This function is called by:
 11735 ;;		_SDCard
 11736 ;;		_reset
 11737 ;;		_disk_initialize
 11738 ;;		_disk_readp
 11739 ;;		_disk_writep
 11740 ;; This function uses a non-reentrant model
 11741 ;;
 11742                           
 11743                           	psect	text44
 11744  003260                     __ptext44:
 11745                           	opt stack 0
 11746  003260                     _proceed:
 11747                           	opt stack 23
 11748                           
 11749                           ;SDCard.c: 338: LATBbits.LATB4 = 1;
 11750                           
 11751                           ;incstack = 0
 11752  003260  888A               	bsf	3978,4,c	;volatile
 11753                           
 11754                           ;SDCard.c: 339: WriteSPI_(0xFF);
 11755  003262  0EFF               	movlw	255
 11756  003264  ECBF  F017         	call	_WriteSPI_
 11757                           
 11758                           ;SDCard.c: 340: LATBbits.LATB4 = 0;
 11759  003268  988A               	bcf	3978,4,c	;volatile
 11760  00326A  0012               	return		;funcret
 11761  00326C                     __end_of_proceed:
 11762                           	opt stack 0
 11763                           tosu	equ	0xFFF
 11764                           tosh	equ	0xFFE
 11765                           tosl	equ	0xFFD
 11766                           pclath	equ	0xFFA
 11767                           tblptru	equ	0xFF8
 11768                           tblptrh	equ	0xFF7
 11769                           tblptrl	equ	0xFF6
 11770                           tablat	equ	0xFF5
 11771                           prodh	equ	0xFF4
 11772                           prodl	equ	0xFF3
 11773                           intcon	equ	0xFF2
 11774                           intcon2	equ	0xFF1
 11775                           intcon3	equ	0xFF0
 11776                           postinc0	equ	0xFEE
 11777                           wreg	equ	0xFE8
 11778                           indf1	equ	0xFE7
 11779                           postinc1	equ	0xFE6
 11780                           postdec1	equ	0xFE5
 11781                           fsr1h	equ	0xFE2
 11782                           fsr1l	equ	0xFE1
 11783                           indf2	equ	0xFDF
 11784                           postinc2	equ	0xFDE
 11785                           postdec2	equ	0xFDD
 11786                           plusw2	equ	0xFDB
 11787                           fsr2h	equ	0xFDA
 11788                           fsr2l	equ	0xFD9
 11789                           status	equ	0xFD8
 11790                           
 11791 ;; *************** function _dummy_clocks *****************
 11792 ;; Defined at:
 11793 ;;		line 322 in file "bibliotecas/SDCard.c"
 11794 ;; Parameters:    Size  Location     Type
 11795 ;;  n               1    wreg     unsigned char 
 11796 ;; Auto vars:     Size  Location     Type
 11797 ;;  n               1   34[COMRAM] unsigned char 
 11798 ;;  i               2   35[COMRAM] unsigned int 
 11799 ;; Return value:  Size  Location     Type
 11800 ;;                  1    wreg      void 
 11801 ;; Registers used:
 11802 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11803 ;; Tracked objects:
 11804 ;;		On entry : 0/0
 11805 ;;		On exit  : 0/0
 11806 ;;		Unchanged: 0/0
 11807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11808 ;;      Params:         0       0       0       0       0       0       0       0       0
 11809 ;;      Locals:         3       0       0       0       0       0       0       0       0
 11810 ;;      Temps:          2       0       0       0       0       0       0       0       0
 11811 ;;      Totals:         5       0       0       0       0       0       0       0       0
 11812 ;;Total ram usage:        5 bytes
 11813 ;; Hardware stack levels used:    1
 11814 ;; Hardware stack levels required when called:    5
 11815 ;; This function calls:
 11816 ;;		_WriteSPI_
 11817 ;;		_escreve_frase_ram_lcd
 11818 ;;		_posicao_cursor_lcd
 11819 ;; This function is called by:
 11820 ;;		_reset
 11821 ;;		_disk_initialize
 11822 ;;		_disk_readp
 11823 ;;		_disk_writep
 11824 ;; This function uses a non-reentrant model
 11825 ;;
 11826                           
 11827                           	psect	text45
 11828  002F3A                     __ptext45:
 11829                           	opt stack 0
 11830  002F3A                     _dummy_clocks:
 11831                           	opt stack 20
 11832                           
 11833                           ;incstack = 0
 11834                           ;dummy_clocks@n stored from wreg
 11835  002F3A  6E23               	movwf	dummy_clocks@n,c
 11836                           
 11837                           ;SDCard.c: 324: posicao_cursor_lcd(1,0);
 11838  002F3C  0E00               	movlw	0
 11839  002F3E  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 11840  002F40  0E01               	movlw	1
 11841  002F42  EC80  F016         	call	_posicao_cursor_lcd
 11842                           
 11843                           ;SDCard.c: 325: escreve_frase_ram_lcd("AAAAAAAAAA");
 11844  002F46  0E4C               	movlw	low STR_1
 11845  002F48  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 11846  002F4A  0E62               	movlw	high STR_1
 11847  002F4C  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 11848  002F4E  EC74  F017         	call	_escreve_frase_ram_lcd	;wreg free
 11849                           
 11850                           ;SDCard.c: 326: unsigned int i;
 11851                           ;SDCard.c: 327: for(i=0;i<n;i++)
 11852  002F52  0E00               	movlw	0
 11853  002F54  6E25               	movwf	dummy_clocks@i+1,c
 11854  002F56  0E00               	movlw	0
 11855  002F58  6E24               	movwf	dummy_clocks@i,c
 11856  002F5A  D007               	goto	l16
 11857  002F5C                     l17:
 11858                           
 11859                           ;SDCard.c: 328: {
 11860                           ;SDCard.c: 329: LATBbits.LATB4 = 0;
 11861  002F5C  988A               	bcf	3978,4,c	;volatile
 11862                           
 11863                           ;SDCard.c: 330: WriteSPI_(0XFF);
 11864  002F5E  0EFF               	movlw	255
 11865  002F60  ECBF  F017         	call	_WriteSPI_
 11866                           
 11867                           ;SDCard.c: 331: LATBbits.LATB4 = 1;
 11868  002F64  888A               	bsf	3978,4,c	;volatile
 11869  002F66  4A24               	infsnz	dummy_clocks@i,f,c
 11870  002F68  2A25               	incf	dummy_clocks@i+1,f,c
 11871  002F6A                     l16:
 11872  002F6A  5023               	movf	dummy_clocks@n,w,c
 11873  002F6C  6E21               	movwf	??_dummy_clocks& (0+255),c
 11874  002F6E  6A22               	clrf	(??_dummy_clocks+1)& (0+255),c
 11875  002F70  5021               	movf	??_dummy_clocks,w,c
 11876  002F72  5C24               	subwf	dummy_clocks@i,w,c
 11877  002F74  5022               	movf	??_dummy_clocks+1,w,c
 11878  002F76  5825               	subwfb	dummy_clocks@i+1,w,c
 11879  002F78  B0D8               	btfsc	status,0,c
 11880  002F7A  0012               	return	
 11881  002F7C  D7EF               	goto	l17
 11882  002F7E                     __end_of_dummy_clocks:
 11883                           	opt stack 0
 11884                           tosu	equ	0xFFF
 11885                           tosh	equ	0xFFE
 11886                           tosl	equ	0xFFD
 11887                           pclath	equ	0xFFA
 11888                           tblptru	equ	0xFF8
 11889                           tblptrh	equ	0xFF7
 11890                           tblptrl	equ	0xFF6
 11891                           tablat	equ	0xFF5
 11892                           prodh	equ	0xFF4
 11893                           prodl	equ	0xFF3
 11894                           intcon	equ	0xFF2
 11895                           intcon2	equ	0xFF1
 11896                           intcon3	equ	0xFF0
 11897                           postinc0	equ	0xFEE
 11898                           wreg	equ	0xFE8
 11899                           indf1	equ	0xFE7
 11900                           postinc1	equ	0xFE6
 11901                           postdec1	equ	0xFE5
 11902                           fsr1h	equ	0xFE2
 11903                           fsr1l	equ	0xFE1
 11904                           indf2	equ	0xFDF
 11905                           postinc2	equ	0xFDE
 11906                           postdec2	equ	0xFDD
 11907                           plusw2	equ	0xFDB
 11908                           fsr2h	equ	0xFDA
 11909                           fsr2l	equ	0xFD9
 11910                           status	equ	0xFD8
 11911                           
 11912 ;; *************** function _command *****************
 11913 ;; Defined at:
 11914 ;;		line 345 in file "bibliotecas/SDCard.c"
 11915 ;; Parameters:    Size  Location     Type
 11916 ;;  CMD             1    wreg     unsigned char 
 11917 ;;  arg             4   32[COMRAM] unsigned long 
 11918 ;;  CRC             1   36[COMRAM] unsigned char 
 11919 ;; Auto vars:     Size  Location     Type
 11920 ;;  CMD             1   37[COMRAM] unsigned char 
 11921 ;;  argument        1   38[COMRAM] unsigned char 
 11922 ;; Return value:  Size  Location     Type
 11923 ;;                  1    wreg      void 
 11924 ;; Registers used:
 11925 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11926 ;; Tracked objects:
 11927 ;;		On entry : 0/0
 11928 ;;		On exit  : 0/0
 11929 ;;		Unchanged: 0/0
 11930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11931 ;;      Params:         5       0       0       0       0       0       0       0       0
 11932 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11933 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11934 ;;      Totals:         7       0       0       0       0       0       0       0       0
 11935 ;;Total ram usage:        7 bytes
 11936 ;; Hardware stack levels used:    1
 11937 ;; Hardware stack levels required when called:    5
 11938 ;; This function calls:
 11939 ;;		_WriteSPI_
 11940 ;;		_escreve_frase_ram_lcd
 11941 ;;		_posicao_cursor_lcd
 11942 ;; This function is called by:
 11943 ;;		_reset
 11944 ;;		_disk_initialize
 11945 ;;		_disk_readp
 11946 ;;		_disk_writep
 11947 ;; This function uses a non-reentrant model
 11948 ;;
 11949                           
 11950                           	psect	text46
 11951  002E94                     __ptext46:
 11952                           	opt stack 0
 11953  002E94                     _command:
 11954                           	opt stack 20
 11955                           
 11956                           ;incstack = 0
 11957                           ;command@CMD stored from wreg
 11958  002E94  6E26               	movwf	command@CMD,c
 11959                           
 11960                           ;SDCard.c: 347: posicao_cursor_lcd(1,0);
 11961  002E96  0E00               	movlw	0
 11962  002E98  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 11963  002E9A  0E01               	movlw	1
 11964  002E9C  EC80  F016         	call	_posicao_cursor_lcd
 11965                           
 11966                           ;SDCard.c: 348: escreve_frase_ram_lcd("OOOOOOOOO");
 11967  002EA0  0E61               	movlw	low STR_2
 11968  002EA2  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 11969  002EA4  0E62               	movlw	high STR_2
 11970  002EA6  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 11971  002EA8  EC74  F017         	call	_escreve_frase_ram_lcd	;wreg free
 11972                           
 11973                           ;SDCard.c: 349: unsigned char argument = arg>>24;
 11974  002EAC  C024  F027         	movff	command@arg+3,command@argument
 11975                           
 11976                           ;SDCard.c: 350: WriteSPI_(0xFF);
 11977  002EB0  0EFF               	movlw	255
 11978  002EB2  ECBF  F017         	call	_WriteSPI_
 11979                           
 11980                           ;SDCard.c: 351: WriteSPI_(CMD);
 11981  002EB6  5026               	movf	command@CMD,w,c
 11982  002EB8  ECBF  F017         	call	_WriteSPI_
 11983                           
 11984                           ;SDCard.c: 352: WriteSPI_(argument);
 11985  002EBC  5027               	movf	command@argument,w,c
 11986  002EBE  ECBF  F017         	call	_WriteSPI_
 11987                           
 11988                           ;SDCard.c: 353: argument = arg>>16;
 11989  002EC2  C023  F027         	movff	command@arg+2,command@argument
 11990                           
 11991                           ;SDCard.c: 354: WriteSPI_(argument);
 11992  002EC6  5027               	movf	command@argument,w,c
 11993  002EC8  ECBF  F017         	call	_WriteSPI_
 11994                           
 11995                           ;SDCard.c: 355: argument = arg>>8;
 11996  002ECC  C022  F027         	movff	command@arg+1,command@argument
 11997                           
 11998                           ;SDCard.c: 356: WriteSPI_(argument);
 11999  002ED0  5027               	movf	command@argument,w,c
 12000  002ED2  ECBF  F017         	call	_WriteSPI_
 12001                           
 12002                           ;SDCard.c: 357: argument = arg;
 12003  002ED6  C021  F027         	movff	command@arg,command@argument
 12004                           
 12005                           ;SDCard.c: 358: WriteSPI_(argument);
 12006  002EDA  5027               	movf	command@argument,w,c
 12007  002EDC  ECBF  F017         	call	_WriteSPI_
 12008                           
 12009                           ;SDCard.c: 359: WriteSPI_(CRC);
 12010  002EE0  5025               	movf	command@CRC,w,c
 12011  002EE2  ECBF  F017         	call	_WriteSPI_
 12012  002EE6  0012               	return		;funcret
 12013  002EE8                     __end_of_command:
 12014                           	opt stack 0
 12015                           tosu	equ	0xFFF
 12016                           tosh	equ	0xFFE
 12017                           tosl	equ	0xFFD
 12018                           pclath	equ	0xFFA
 12019                           tblptru	equ	0xFF8
 12020                           tblptrh	equ	0xFF7
 12021                           tblptrl	equ	0xFF6
 12022                           tablat	equ	0xFF5
 12023                           prodh	equ	0xFF4
 12024                           prodl	equ	0xFF3
 12025                           intcon	equ	0xFF2
 12026                           intcon2	equ	0xFF1
 12027                           intcon3	equ	0xFF0
 12028                           postinc0	equ	0xFEE
 12029                           wreg	equ	0xFE8
 12030                           indf1	equ	0xFE7
 12031                           postinc1	equ	0xFE6
 12032                           postdec1	equ	0xFE5
 12033                           fsr1h	equ	0xFE2
 12034                           fsr1l	equ	0xFE1
 12035                           indf2	equ	0xFDF
 12036                           postinc2	equ	0xFDE
 12037                           postdec2	equ	0xFDD
 12038                           plusw2	equ	0xFDB
 12039                           fsr2h	equ	0xFDA
 12040                           fsr2l	equ	0xFD9
 12041                           status	equ	0xFD8
 12042                           
 12043 ;; *************** function _posicao_cursor_lcd *****************
 12044 ;; Defined at:
 12045 ;;		line 271 in file "bibliotecas/display/display_lcd.c"
 12046 ;; Parameters:    Size  Location     Type
 12047 ;;  linha           1    wreg     unsigned char 
 12048 ;;  coluna          1   28[COMRAM] unsigned char 
 12049 ;; Auto vars:     Size  Location     Type
 12050 ;;  linha           1   29[COMRAM] unsigned char 
 12051 ;;  endereco        1   30[COMRAM] unsigned char 
 12052 ;; Return value:  Size  Location     Type
 12053 ;;                  1    wreg      void 
 12054 ;; Registers used:
 12055 ;;		wreg, status,2, status,0, cstack
 12056 ;; Tracked objects:
 12057 ;;		On entry : 0/0
 12058 ;;		On exit  : 0/0
 12059 ;;		Unchanged: 0/0
 12060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12061 ;;      Params:         1       0       0       0       0       0       0       0       0
 12062 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12063 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12064 ;;      Totals:         3       0       0       0       0       0       0       0       0
 12065 ;;Total ram usage:        3 bytes
 12066 ;; Hardware stack levels used:    1
 12067 ;; Hardware stack levels required when called:    4
 12068 ;; This function calls:
 12069 ;;		_endereco_cursor_lcd
 12070 ;; This function is called by:
 12071 ;;		_dummy_clocks
 12072 ;;		_command
 12073 ;;		_inicializa_SPI
 12074 ;;		_mensagem_inicial
 12075 ;;		_SDCard
 12076 ;;		_reset
 12077 ;;		_disk_initialize
 12078 ;;		_leitura_chave
 12079 ;; This function uses a non-reentrant model
 12080 ;;
 12081                           
 12082                           	psect	text47
 12083  002D00                     __ptext47:
 12084                           	opt stack 0
 12085  002D00                     _posicao_cursor_lcd:
 12086                           	opt stack 25
 12087                           
 12088                           ;incstack = 0
 12089                           ;posicao_cursor_lcd@linha stored from wreg
 12090  002D00  6E1E               	movwf	posicao_cursor_lcd@linha,c
 12091                           
 12092                           ;display_lcd.c: 273: unsigned char endereco = 0x00;
 12093  002D02  0E00               	movlw	0
 12094  002D04  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 12095                           
 12096                           ;display_lcd.c: 275: if(coluna <= 0x10U)
 12097  002D06  0E11               	movlw	17
 12098  002D08  601D               	cpfslt	posicao_cursor_lcd@coluna,c
 12099  002D0A  D02F               	goto	l626
 12100  002D0C  D01E               	goto	l627
 12101  002D0E                     l628:
 12102                           
 12103                           ;display_lcd.c: 282: endereco = 0x00U + coluna;
 12104  002D0E  C01D  F01F         	movff	posicao_cursor_lcd@coluna,posicao_cursor_lcd@endereco
 12105                           
 12106                           ;display_lcd.c: 283: endereco_cursor_lcd(endereco);
 12107  002D12  501F               	movf	posicao_cursor_lcd@endereco,w,c
 12108  002D14  ECB8  F016         	call	_endereco_cursor_lcd
 12109                           
 12110                           ;display_lcd.c: 284: break;
 12111  002D18  D026               	goto	l629
 12112  002D1A                     
 12113                           ;display_lcd.c: 287: endereco = 0x40U + coluna;
 12114  002D1A  501D               	movf	posicao_cursor_lcd@coluna,w,c
 12115  002D1C  0F40               	addlw	64
 12116  002D1E  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 12117                           
 12118                           ;display_lcd.c: 288: endereco_cursor_lcd(endereco);
 12119  002D20  501F               	movf	posicao_cursor_lcd@endereco,w,c
 12120  002D22  ECB8  F016         	call	_endereco_cursor_lcd
 12121                           
 12122                           ;display_lcd.c: 289: break;
 12123  002D26  D01F               	goto	l629
 12124  002D28                     
 12125                           ;display_lcd.c: 292: endereco = 0x14U + coluna;
 12126  002D28  501D               	movf	posicao_cursor_lcd@coluna,w,c
 12127  002D2A  0F14               	addlw	20
 12128  002D2C  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 12129                           
 12130                           ;display_lcd.c: 293: endereco_cursor_lcd(endereco);
 12131  002D2E  501F               	movf	posicao_cursor_lcd@endereco,w,c
 12132  002D30  ECB8  F016         	call	_endereco_cursor_lcd
 12133                           
 12134                           ;display_lcd.c: 294: break;
 12135  002D34  D018               	goto	l629
 12136  002D36                     
 12137                           ;display_lcd.c: 297: endereco = 0x54U + coluna;
 12138  002D36  501D               	movf	posicao_cursor_lcd@coluna,w,c
 12139  002D38  0F54               	addlw	84
 12140  002D3A  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 12141                           
 12142                           ;display_lcd.c: 298: endereco_cursor_lcd(endereco);
 12143  002D3C  501F               	movf	posicao_cursor_lcd@endereco,w,c
 12144  002D3E  ECB8  F016         	call	_endereco_cursor_lcd
 12145                           
 12146                           ;display_lcd.c: 299: break;
 12147  002D42  D011               	goto	l629
 12148  002D44                     
 12149                           ;display_lcd.c: 302: endereco = 0x00U;
 12150  002D44  0E00               	movlw	0
 12151  002D46  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 12152                           
 12153                           ;display_lcd.c: 304: }
 12154                           
 12155                           ;display_lcd.c: 303: break;
 12156  002D48  D00E               	goto	l629
 12157  002D4A                     l627:
 12158  002D4A  501E               	movf	posicao_cursor_lcd@linha,w,c
 12159                           
 12160                           ; Switch size 1, requested type "space"
 12161                           ; Number of cases is 4, Range of values is 1 to 4
 12162                           ; switch strategies available:
 12163                           ; Name         Instructions Cycles
 12164                           ; simple_byte           13     7 (average)
 12165                           ;	Chosen strategy is simple_byte
 12166  002D4C  0A01               	xorlw	1	; case 1
 12167  002D4E  B4D8               	btfsc	status,2,c
 12168  002D50  D7DE               	goto	l628
 12169  002D52  0A03               	xorlw	3	; case 2
 12170  002D54  B4D8               	btfsc	status,2,c
 12171  002D56  D7E1               	goto	l630
 12172  002D58  0A01               	xorlw	1	; case 3
 12173  002D5A  B4D8               	btfsc	status,2,c
 12174  002D5C  D7E5               	goto	l631
 12175  002D5E  0A07               	xorlw	7	; case 4
 12176  002D60  B4D8               	btfsc	status,2,c
 12177  002D62  D7E9               	goto	l632
 12178  002D64  D7EF               	goto	l633
 12179  002D66                     l629:
 12180                           
 12181                           ;display_lcd.c: 306: coluna++;
 12182  002D66  2A1D               	incf	posicao_cursor_lcd@coluna,f,c
 12183                           
 12184                           ;display_lcd.c: 307: }
 12185  002D68  0012               	return	
 12186  002D6A                     l626:
 12187                           
 12188                           ;display_lcd.c: 308: else
 12189                           ;display_lcd.c: 309: {
 12190                           ;display_lcd.c: 310: endereco = 0x00U;
 12191  002D6A  0E00               	movlw	0
 12192  002D6C  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 12193  002D6E  0012               	return	
 12194  002D70                     __end_of_posicao_cursor_lcd:
 12195                           	opt stack 0
 12196                           tosu	equ	0xFFF
 12197                           tosh	equ	0xFFE
 12198                           tosl	equ	0xFFD
 12199                           pclath	equ	0xFFA
 12200                           tblptru	equ	0xFF8
 12201                           tblptrh	equ	0xFF7
 12202                           tblptrl	equ	0xFF6
 12203                           tablat	equ	0xFF5
 12204                           prodh	equ	0xFF4
 12205                           prodl	equ	0xFF3
 12206                           intcon	equ	0xFF2
 12207                           intcon2	equ	0xFF1
 12208                           intcon3	equ	0xFF0
 12209                           postinc0	equ	0xFEE
 12210                           wreg	equ	0xFE8
 12211                           indf1	equ	0xFE7
 12212                           postinc1	equ	0xFE6
 12213                           postdec1	equ	0xFE5
 12214                           fsr1h	equ	0xFE2
 12215                           fsr1l	equ	0xFE1
 12216                           indf2	equ	0xFDF
 12217                           postinc2	equ	0xFDE
 12218                           postdec2	equ	0xFDD
 12219                           plusw2	equ	0xFDB
 12220                           fsr2h	equ	0xFDA
 12221                           fsr2l	equ	0xFD9
 12222                           status	equ	0xFD8
 12223                           
 12224 ;; *************** function _endereco_cursor_lcd *****************
 12225 ;; Defined at:
 12226 ;;		line 218 in file "bibliotecas/display/display_lcd.c"
 12227 ;; Parameters:    Size  Location     Type
 12228 ;;  endereco        1    wreg     unsigned char 
 12229 ;; Auto vars:     Size  Location     Type
 12230 ;;  endereco        1   27[COMRAM] unsigned char 
 12231 ;; Return value:  Size  Location     Type
 12232 ;;                  1    wreg      void 
 12233 ;; Registers used:
 12234 ;;		wreg, status,2, status,0, cstack
 12235 ;; Tracked objects:
 12236 ;;		On entry : 0/0
 12237 ;;		On exit  : 0/0
 12238 ;;		Unchanged: 0/0
 12239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12240 ;;      Params:         0       0       0       0       0       0       0       0       0
 12241 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12242 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12243 ;;      Totals:         1       0       0       0       0       0       0       0       0
 12244 ;;Total ram usage:        1 bytes
 12245 ;; Hardware stack levels used:    1
 12246 ;; Hardware stack levels required when called:    3
 12247 ;; This function calls:
 12248 ;;		_delay
 12249 ;; This function is called by:
 12250 ;;		_posicao_cursor_lcd
 12251 ;;		_cria_caractere_lcd
 12252 ;; This function uses a non-reentrant model
 12253 ;;
 12254                           
 12255                           	psect	text48
 12256  002D70                     __ptext48:
 12257                           	opt stack 0
 12258  002D70                     _endereco_cursor_lcd:
 12259                           	opt stack 25
 12260                           
 12261                           ;incstack = 0
 12262                           ;endereco_cursor_lcd@endereco stored from wreg
 12263  002D70  6E1C               	movwf	endereco_cursor_lcd@endereco,c
 12264                           
 12265                           ;display_lcd.c: 221: PORTDbits.RD2 = 0;
 12266  002D72  9483               	bcf	3971,2,c	;volatile
 12267                           
 12268                           ;display_lcd.c: 222: PORTDbits.RD1 = 0;
 12269  002D74  9283               	bcf	3971,1,c	;volatile
 12270                           
 12271                           ;display_lcd.c: 223: PORTDbits.RD0 = 0;
 12272  002D76  9083               	bcf	3971,0,c	;volatile
 12273                           
 12274                           ;display_lcd.c: 226: PORTDbits.RD7 = 1;
 12275  002D78  8E83               	bsf	3971,7,c	;volatile
 12276                           
 12277                           ;display_lcd.c: 227: if(endereco&0b00010000){PORTDbits.RD4=1;}
 12278  002D7A  A81C               	btfss	endereco_cursor_lcd@endereco,4,c
 12279  002D7C  D002               	goto	l609
 12280  002D7E  8883               	bsf	3971,4,c	;volatile
 12281  002D80  D001               	goto	l610
 12282  002D82                     l609:
 12283                           
 12284                           ;display_lcd.c: 228: else {PORTDbits.RD4=0;}
 12285  002D82  9883               	bcf	3971,4,c	;volatile
 12286  002D84                     l610:
 12287                           
 12288                           ;display_lcd.c: 229: if(endereco&0b00100000){PORTDbits.RD5=1;}
 12289  002D84  AA1C               	btfss	endereco_cursor_lcd@endereco,5,c
 12290  002D86  D002               	goto	l611
 12291  002D88  8A83               	bsf	3971,5,c	;volatile
 12292  002D8A  D001               	goto	l612
 12293  002D8C                     l611:
 12294                           
 12295                           ;display_lcd.c: 230: else {PORTDbits.RD5=0;}
 12296  002D8C  9A83               	bcf	3971,5,c	;volatile
 12297  002D8E                     l612:
 12298                           
 12299                           ;display_lcd.c: 231: if(endereco&0b01000000){PORTDbits.RD6=1;}
 12300  002D8E  AC1C               	btfss	endereco_cursor_lcd@endereco,6,c
 12301  002D90  D002               	goto	l613
 12302  002D92  8C83               	bsf	3971,6,c	;volatile
 12303  002D94  D001               	goto	l614
 12304  002D96                     l613:
 12305                           
 12306                           ;display_lcd.c: 232: else {PORTDbits.RD6=0;}
 12307  002D96  9C83               	bcf	3971,6,c	;volatile
 12308  002D98                     l614:
 12309                           
 12310                           ;display_lcd.c: 235: PORTDbits.RD0 = 1;
 12311  002D98  8083               	bsf	3971,0,c	;volatile
 12312                           
 12313                           ;display_lcd.c: 236: delay();
 12314  002D9A  EC65  F018         	call	_delay	;wreg free
 12315                           
 12316                           ;display_lcd.c: 237: PORTDbits.RD0 = 0;
 12317  002D9E  9083               	bcf	3971,0,c	;volatile
 12318                           
 12319                           ;display_lcd.c: 238: delay();
 12320  002DA0  EC65  F018         	call	_delay	;wreg free
 12321                           
 12322                           ;display_lcd.c: 241: if(endereco&0b00000001){PORTDbits.RD4=1;}
 12323  002DA4  A01C               	btfss	endereco_cursor_lcd@endereco,0,c
 12324  002DA6  D002               	goto	l615
 12325  002DA8  8883               	bsf	3971,4,c	;volatile
 12326  002DAA  D001               	goto	l616
 12327  002DAC                     l615:
 12328                           
 12329                           ;display_lcd.c: 242: else {PORTDbits.RD4=0;}
 12330  002DAC  9883               	bcf	3971,4,c	;volatile
 12331  002DAE                     l616:
 12332                           
 12333                           ;display_lcd.c: 243: if(endereco&0b00000010){PORTDbits.RD5=1;}
 12334  002DAE  A21C               	btfss	endereco_cursor_lcd@endereco,1,c
 12335  002DB0  D002               	goto	l617
 12336  002DB2  8A83               	bsf	3971,5,c	;volatile
 12337  002DB4  D001               	goto	l618
 12338  002DB6                     l617:
 12339                           
 12340                           ;display_lcd.c: 244: else {PORTDbits.RD5=0;}
 12341  002DB6  9A83               	bcf	3971,5,c	;volatile
 12342  002DB8                     l618:
 12343                           
 12344                           ;display_lcd.c: 245: if(endereco&0b00000100){PORTDbits.RD6=1;}
 12345  002DB8  A41C               	btfss	endereco_cursor_lcd@endereco,2,c
 12346  002DBA  D002               	goto	l619
 12347  002DBC  8C83               	bsf	3971,6,c	;volatile
 12348  002DBE  D001               	goto	l620
 12349  002DC0                     l619:
 12350                           
 12351                           ;display_lcd.c: 246: else {PORTDbits.RD6=0;}
 12352  002DC0  9C83               	bcf	3971,6,c	;volatile
 12353  002DC2                     l620:
 12354                           
 12355                           ;display_lcd.c: 247: if(endereco&0b00001000){PORTDbits.RD7=1;}
 12356  002DC2  A61C               	btfss	endereco_cursor_lcd@endereco,3,c
 12357  002DC4  D002               	goto	l621
 12358  002DC6  8E83               	bsf	3971,7,c	;volatile
 12359  002DC8  D001               	goto	l622
 12360  002DCA                     l621:
 12361                           
 12362                           ;display_lcd.c: 248: else {PORTDbits.RD7=0;}
 12363  002DCA  9E83               	bcf	3971,7,c	;volatile
 12364  002DCC                     l622:
 12365                           
 12366                           ;display_lcd.c: 251: PORTDbits.RD0 = 1;
 12367  002DCC  8083               	bsf	3971,0,c	;volatile
 12368                           
 12369                           ;display_lcd.c: 252: delay();
 12370  002DCE  EC65  F018         	call	_delay	;wreg free
 12371                           
 12372                           ;display_lcd.c: 253: PORTDbits.RD0 = 0;
 12373  002DD2  9083               	bcf	3971,0,c	;volatile
 12374                           
 12375                           ;display_lcd.c: 254: delay();
 12376  002DD4  EC65  F018         	call	_delay	;wreg free
 12377  002DD8  0012               	return		;funcret
 12378  002DDA                     __end_of_endereco_cursor_lcd:
 12379                           	opt stack 0
 12380                           tosu	equ	0xFFF
 12381                           tosh	equ	0xFFE
 12382                           tosl	equ	0xFFD
 12383                           pclath	equ	0xFFA
 12384                           tblptru	equ	0xFF8
 12385                           tblptrh	equ	0xFF7
 12386                           tblptrl	equ	0xFF6
 12387                           tablat	equ	0xFF5
 12388                           prodh	equ	0xFF4
 12389                           prodl	equ	0xFF3
 12390                           intcon	equ	0xFF2
 12391                           intcon2	equ	0xFF1
 12392                           intcon3	equ	0xFF0
 12393                           postinc0	equ	0xFEE
 12394                           wreg	equ	0xFE8
 12395                           indf1	equ	0xFE7
 12396                           postinc1	equ	0xFE6
 12397                           postdec1	equ	0xFE5
 12398                           fsr1h	equ	0xFE2
 12399                           fsr1l	equ	0xFE1
 12400                           indf2	equ	0xFDF
 12401                           postinc2	equ	0xFDE
 12402                           postdec2	equ	0xFDD
 12403                           plusw2	equ	0xFDB
 12404                           fsr2h	equ	0xFDA
 12405                           fsr2l	equ	0xFD9
 12406                           status	equ	0xFD8
 12407                           
 12408 ;; *************** function _escreve_frase_ram_lcd *****************
 12409 ;; Defined at:
 12410 ;;		line 445 in file "bibliotecas/display/display_lcd.c"
 12411 ;; Parameters:    Size  Location     Type
 12412 ;;  buffer          2   28[COMRAM] PTR unsigned char 
 12413 ;;		 -> STR_17(9), STR_16(14), STR_15(14), STR_14(12), 
 12414 ;;		 -> escreve_inteiro_lcd@texto(7), STR_13(14), STR_12(13), STR_11(17), 
 12415 ;;		 -> STR_8(17), STR_7(15), STR_6(14), STR_5(14), 
 12416 ;;		 -> mensagem_inicial@msg_dois(17), mensagem_inicial@msg_linha_um(17), leitura_chave@pos_ignicao_on(17), leitura_chav
      +e@pos_ignicao_crank(17), 
 12417 ;;		 -> leitura_chave@pos_ignicao_off(17), STR_3(17), STR_2(10), STR_1(11), 
 12418 ;; Auto vars:     Size  Location     Type
 12419 ;;		None
 12420 ;; Return value:  Size  Location     Type
 12421 ;;                  1    wreg      void 
 12422 ;; Registers used:
 12423 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12424 ;; Tracked objects:
 12425 ;;		On entry : 0/0
 12426 ;;		On exit  : 0/0
 12427 ;;		Unchanged: 0/0
 12428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12429 ;;      Params:         2       0       0       0       0       0       0       0       0
 12430 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12431 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12432 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12433 ;;Total ram usage:        2 bytes
 12434 ;; Hardware stack levels used:    1
 12435 ;; Hardware stack levels required when called:    4
 12436 ;; This function calls:
 12437 ;;		_escreve_caractere_lcd
 12438 ;; This function is called by:
 12439 ;;		_dummy_clocks
 12440 ;;		_command
 12441 ;;		_inicializa_SPI
 12442 ;;		_mensagem_inicial
 12443 ;;		_SDCard
 12444 ;;		_reset
 12445 ;;		_disk_initialize
 12446 ;;		_leitura_chave
 12447 ;;		_escreve_inteiro_lcd
 12448 ;; This function uses a non-reentrant model
 12449 ;;
 12450                           
 12451                           	psect	text49
 12452  002EE8                     __ptext49:
 12453                           	opt stack 0
 12454  002EE8                     _escreve_frase_ram_lcd:
 12455                           	opt stack 25
 12456                           
 12457                           ;display_lcd.c: 447: while(*buffer)
 12458                           
 12459                           ;incstack = 0
 12460  002EE8  D014               	goto	l671
 12461  002EEA                     
 12462                           ;display_lcd.c: 448: {
 12463                           ;display_lcd.c: 449: escreve_caractere_lcd(*buffer);
 12464  002EEA  C01D  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 12465  002EEE  C01E  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 12466  002EF2  6AF8               	clrf	tblptru,c
 12467  002EF4  0E07               	movlw	(high __ramtop+-1)
 12468  002EF6  64F7               	cpfsgt	tblptrh,c
 12469  002EF8  D003               	bra	u6547
 12470  002EFA  0008               	tblrd		*
 12471  002EFC  50F5               	movf	tablat,w,c
 12472  002EFE  D005               	bra	u6540
 12473  002F00                     u6547:
 12474  002F00  CFF6 FFE9          	movff	tblptrl,fsr0l
 12475  002F04  CFF7 FFEA          	movff	tblptrh,fsr0h
 12476  002F08  50EF               	movf	indf0,w,c
 12477  002F0A                     u6540:
 12478  002F0A  EC0F  F016         	call	_escreve_caractere_lcd
 12479                           
 12480                           ;display_lcd.c: 450: buffer++;
 12481  002F0E  4A1D               	infsnz	escreve_frase_ram_lcd@buffer,f,c
 12482  002F10  2A1E               	incf	escreve_frase_ram_lcd@buffer+1,f,c
 12483  002F12                     l671:
 12484  002F12  C01D  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 12485  002F16  C01E  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 12486  002F1A  6AF8               	clrf	tblptru,c
 12487  002F1C  0E07               	movlw	(high __ramtop+-1)
 12488  002F1E  64F7               	cpfsgt	tblptrh,c
 12489  002F20  D003               	bra	u6557
 12490  002F22  0008               	tblrd		*
 12491  002F24  50F5               	movf	tablat,w,c
 12492  002F26  D005               	bra	u6550
 12493  002F28                     u6557:
 12494  002F28  CFF6 FFE9          	movff	tblptrl,fsr0l
 12495  002F2C  CFF7 FFEA          	movff	tblptrh,fsr0h
 12496  002F30  50EF               	movf	indf0,w,c
 12497  002F32                     u6550:
 12498  002F32  0900               	iorlw	0
 12499  002F34  B4D8               	btfsc	status,2,c
 12500  002F36  0012               	return	
 12501  002F38  D7D8               	goto	l672
 12502  002F3A                     __end_of_escreve_frase_ram_lcd:
 12503                           	opt stack 0
 12504                           tosu	equ	0xFFF
 12505                           tosh	equ	0xFFE
 12506                           tosl	equ	0xFFD
 12507                           pclath	equ	0xFFA
 12508                           tblptru	equ	0xFF8
 12509                           tblptrh	equ	0xFF7
 12510                           tblptrl	equ	0xFF6
 12511                           tablat	equ	0xFF5
 12512                           prodh	equ	0xFF4
 12513                           prodl	equ	0xFF3
 12514                           intcon	equ	0xFF2
 12515                           intcon2	equ	0xFF1
 12516                           intcon3	equ	0xFF0
 12517                           indf0	equ	0xFEF
 12518                           postinc0	equ	0xFEE
 12519                           fsr0h	equ	0xFEA
 12520                           fsr0l	equ	0xFE9
 12521                           wreg	equ	0xFE8
 12522                           indf1	equ	0xFE7
 12523                           postinc1	equ	0xFE6
 12524                           postdec1	equ	0xFE5
 12525                           fsr1h	equ	0xFE2
 12526                           fsr1l	equ	0xFE1
 12527                           indf2	equ	0xFDF
 12528                           postinc2	equ	0xFDE
 12529                           postdec2	equ	0xFDD
 12530                           plusw2	equ	0xFDB
 12531                           fsr2h	equ	0xFDA
 12532                           fsr2l	equ	0xFD9
 12533                           status	equ	0xFD8
 12534                           
 12535 ;; *************** function _escreve_caractere_lcd *****************
 12536 ;; Defined at:
 12537 ;;		line 323 in file "bibliotecas/display/display_lcd.c"
 12538 ;; Parameters:    Size  Location     Type
 12539 ;;  data            1    wreg     unsigned char 
 12540 ;; Auto vars:     Size  Location     Type
 12541 ;;  data            1   27[COMRAM] unsigned char 
 12542 ;; Return value:  Size  Location     Type
 12543 ;;                  1    wreg      void 
 12544 ;; Registers used:
 12545 ;;		wreg, status,2, status,0, cstack
 12546 ;; Tracked objects:
 12547 ;;		On entry : 0/0
 12548 ;;		On exit  : 0/0
 12549 ;;		Unchanged: 0/0
 12550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12551 ;;      Params:         0       0       0       0       0       0       0       0       0
 12552 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12553 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12554 ;;      Totals:         1       0       0       0       0       0       0       0       0
 12555 ;;Total ram usage:        1 bytes
 12556 ;; Hardware stack levels used:    1
 12557 ;; Hardware stack levels required when called:    3
 12558 ;; This function calls:
 12559 ;;		_delay
 12560 ;; This function is called by:
 12561 ;;		_escreve_frase_ram_lcd
 12562 ;;		_escreve_float_lcd
 12563 ;;		_escreve_frase_lcd
 12564 ;;		_cria_caractere_lcd
 12565 ;; This function uses a non-reentrant model
 12566 ;;
 12567                           
 12568                           	psect	text50
 12569  002C1E                     __ptext50:
 12570                           	opt stack 0
 12571  002C1E                     _escreve_caractere_lcd:
 12572                           	opt stack 25
 12573                           
 12574                           ;incstack = 0
 12575                           ;escreve_caractere_lcd@data stored from wreg
 12576  002C1E  6E1C               	movwf	escreve_caractere_lcd@data,c
 12577                           
 12578                           ;display_lcd.c: 326: PORTDbits.RD2 = 0;
 12579  002C20  9483               	bcf	3971,2,c	;volatile
 12580                           
 12581                           ;display_lcd.c: 327: PORTDbits.RD1 = 1;
 12582  002C22  8283               	bsf	3971,1,c	;volatile
 12583                           
 12584                           ;display_lcd.c: 328: PORTDbits.RD0 = 0;
 12585  002C24  9083               	bcf	3971,0,c	;volatile
 12586                           
 12587                           ;display_lcd.c: 331: if(data&0b00010000){PORTDbits.RD4=1;}
 12588  002C26  A81C               	btfss	escreve_caractere_lcd@data,4,c
 12589  002C28  D002               	goto	l638
 12590  002C2A  8883               	bsf	3971,4,c	;volatile
 12591  002C2C  D001               	goto	l639
 12592  002C2E                     l638:
 12593                           
 12594                           ;display_lcd.c: 332: else {PORTDbits.RD4=0;}
 12595  002C2E  9883               	bcf	3971,4,c	;volatile
 12596  002C30                     l639:
 12597                           
 12598                           ;display_lcd.c: 333: if(data&0b00100000){PORTDbits.RD5=1;}
 12599  002C30  AA1C               	btfss	escreve_caractere_lcd@data,5,c
 12600  002C32  D002               	goto	l640
 12601  002C34  8A83               	bsf	3971,5,c	;volatile
 12602  002C36  D001               	goto	l641
 12603  002C38                     l640:
 12604                           
 12605                           ;display_lcd.c: 334: else {PORTDbits.RD5=0;}
 12606  002C38  9A83               	bcf	3971,5,c	;volatile
 12607  002C3A                     l641:
 12608                           
 12609                           ;display_lcd.c: 335: if(data&0b01000000){PORTDbits.RD6=1;}
 12610  002C3A  AC1C               	btfss	escreve_caractere_lcd@data,6,c
 12611  002C3C  D002               	goto	l642
 12612  002C3E  8C83               	bsf	3971,6,c	;volatile
 12613  002C40  D001               	goto	l643
 12614  002C42                     l642:
 12615                           
 12616                           ;display_lcd.c: 336: else {PORTDbits.RD6=0;}
 12617  002C42  9C83               	bcf	3971,6,c	;volatile
 12618  002C44                     l643:
 12619                           
 12620                           ;display_lcd.c: 337: if(data&0b10000000){PORTDbits.RD7=1;}
 12621  002C44  AE1C               	btfss	escreve_caractere_lcd@data,7,c
 12622  002C46  D002               	goto	l644
 12623  002C48  8E83               	bsf	3971,7,c	;volatile
 12624  002C4A  D001               	goto	l645
 12625  002C4C                     l644:
 12626                           
 12627                           ;display_lcd.c: 338: else {PORTDbits.RD7=0;}
 12628  002C4C  9E83               	bcf	3971,7,c	;volatile
 12629  002C4E                     l645:
 12630                           
 12631                           ;display_lcd.c: 341: PORTDbits.RD0 = 1;
 12632  002C4E  8083               	bsf	3971,0,c	;volatile
 12633                           
 12634                           ;display_lcd.c: 342: delay();
 12635  002C50  EC65  F018         	call	_delay	;wreg free
 12636                           
 12637                           ;display_lcd.c: 343: PORTDbits.RD0 = 0;
 12638  002C54  9083               	bcf	3971,0,c	;volatile
 12639                           
 12640                           ;display_lcd.c: 344: delay();
 12641  002C56  EC65  F018         	call	_delay	;wreg free
 12642                           
 12643                           ;display_lcd.c: 348: if(data&0b00000001){PORTDbits.RD4=1;}
 12644  002C5A  A01C               	btfss	escreve_caractere_lcd@data,0,c
 12645  002C5C  D002               	goto	l646
 12646  002C5E  8883               	bsf	3971,4,c	;volatile
 12647  002C60  D001               	goto	l647
 12648  002C62                     l646:
 12649                           
 12650                           ;display_lcd.c: 349: else {PORTDbits.RD4=0;}
 12651  002C62  9883               	bcf	3971,4,c	;volatile
 12652  002C64                     l647:
 12653                           
 12654                           ;display_lcd.c: 350: if(data&0b00000010){PORTDbits.RD5=1;}
 12655  002C64  A21C               	btfss	escreve_caractere_lcd@data,1,c
 12656  002C66  D002               	goto	l648
 12657  002C68  8A83               	bsf	3971,5,c	;volatile
 12658  002C6A  D001               	goto	l649
 12659  002C6C                     l648:
 12660                           
 12661                           ;display_lcd.c: 351: else {PORTDbits.RD5=0;}
 12662  002C6C  9A83               	bcf	3971,5,c	;volatile
 12663  002C6E                     l649:
 12664                           
 12665                           ;display_lcd.c: 352: if(data&0b00000100){PORTDbits.RD6=1;}
 12666  002C6E  A41C               	btfss	escreve_caractere_lcd@data,2,c
 12667  002C70  D002               	goto	l650
 12668  002C72  8C83               	bsf	3971,6,c	;volatile
 12669  002C74  D001               	goto	l651
 12670  002C76                     l650:
 12671                           
 12672                           ;display_lcd.c: 353: else {PORTDbits.RD6=0;}
 12673  002C76  9C83               	bcf	3971,6,c	;volatile
 12674  002C78                     l651:
 12675                           
 12676                           ;display_lcd.c: 354: if(data&0b00001000){PORTDbits.RD7=1;}
 12677  002C78  A61C               	btfss	escreve_caractere_lcd@data,3,c
 12678  002C7A  D002               	goto	l652
 12679  002C7C  8E83               	bsf	3971,7,c	;volatile
 12680  002C7E  D001               	goto	l653
 12681  002C80                     l652:
 12682                           
 12683                           ;display_lcd.c: 355: else {PORTDbits.RD7=0;}
 12684  002C80  9E83               	bcf	3971,7,c	;volatile
 12685  002C82                     l653:
 12686                           
 12687                           ;display_lcd.c: 358: PORTDbits.RD0 = 1;
 12688  002C82  8083               	bsf	3971,0,c	;volatile
 12689                           
 12690                           ;display_lcd.c: 359: delay();
 12691  002C84  EC65  F018         	call	_delay	;wreg free
 12692                           
 12693                           ;display_lcd.c: 360: PORTDbits.RD0 = 0;
 12694  002C88  9083               	bcf	3971,0,c	;volatile
 12695                           
 12696                           ;display_lcd.c: 361: delay();
 12697  002C8A  EC65  F018         	call	_delay	;wreg free
 12698  002C8E  0012               	return		;funcret
 12699  002C90                     __end_of_escreve_caractere_lcd:
 12700                           	opt stack 0
 12701                           tosu	equ	0xFFF
 12702                           tosh	equ	0xFFE
 12703                           tosl	equ	0xFFD
 12704                           pclath	equ	0xFFA
 12705                           tblptru	equ	0xFF8
 12706                           tblptrh	equ	0xFF7
 12707                           tblptrl	equ	0xFF6
 12708                           tablat	equ	0xFF5
 12709                           prodh	equ	0xFF4
 12710                           prodl	equ	0xFF3
 12711                           intcon	equ	0xFF2
 12712                           intcon2	equ	0xFF1
 12713                           intcon3	equ	0xFF0
 12714                           indf0	equ	0xFEF
 12715                           postinc0	equ	0xFEE
 12716                           fsr0h	equ	0xFEA
 12717                           fsr0l	equ	0xFE9
 12718                           wreg	equ	0xFE8
 12719                           indf1	equ	0xFE7
 12720                           postinc1	equ	0xFE6
 12721                           postdec1	equ	0xFE5
 12722                           fsr1h	equ	0xFE2
 12723                           fsr1l	equ	0xFE1
 12724                           indf2	equ	0xFDF
 12725                           postinc2	equ	0xFDE
 12726                           postdec2	equ	0xFDD
 12727                           plusw2	equ	0xFDB
 12728                           fsr2h	equ	0xFDA
 12729                           fsr2l	equ	0xFD9
 12730                           status	equ	0xFD8
 12731                           
 12732 ;; *************** function _delay *****************
 12733 ;; Defined at:
 12734 ;;		line 45 in file "bibliotecas/display/display_lcd.c"
 12735 ;; Parameters:    Size  Location     Type
 12736 ;;		None
 12737 ;; Auto vars:     Size  Location     Type
 12738 ;;  contador_int    1   26[COMRAM] unsigned char 
 12739 ;;  contador_ext    1   25[COMRAM] unsigned char 
 12740 ;; Return value:  Size  Location     Type
 12741 ;;                  1    wreg      void 
 12742 ;; Registers used:
 12743 ;;		wreg, status,2, status,0
 12744 ;; Tracked objects:
 12745 ;;		On entry : 0/0
 12746 ;;		On exit  : 0/0
 12747 ;;		Unchanged: 0/0
 12748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12749 ;;      Params:         0       0       0       0       0       0       0       0       0
 12750 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12751 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12752 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12753 ;;Total ram usage:        2 bytes
 12754 ;; Hardware stack levels used:    1
 12755 ;; Hardware stack levels required when called:    2
 12756 ;; This function calls:
 12757 ;;		Nothing
 12758 ;; This function is called by:
 12759 ;;		_init_lcd
 12760 ;;		_escreve_cmd_lcd
 12761 ;;		_endereco_cursor_lcd
 12762 ;;		_escreve_caractere_lcd
 12763 ;; This function uses a non-reentrant model
 12764 ;;
 12765                           
 12766                           	psect	text51
 12767  0030CA                     __ptext51:
 12768                           	opt stack 0
 12769  0030CA                     _delay:
 12770                           	opt stack 25
 12771                           
 12772                           ;display_lcd.c: 47: unsigned char contador_ext, contador_int;
 12773                           ;display_lcd.c: 49: for(contador_ext = 0; contador_ext<100; contador_ext++)
 12774                           
 12775                           ;incstack = 0
 12776  0030CA  0E00               	movlw	0
 12777  0030CC  6E1A               	movwf	delay@contador_ext,c
 12778  0030CE                     l5974:
 12779  0030CE  0E63               	movlw	99
 12780  0030D0  641A               	cpfsgt	delay@contador_ext,c
 12781  0030D2  D001               	goto	l577
 12782  0030D4  0012               	return	
 12783  0030D6                     l577:
 12784                           
 12785                           ;display_lcd.c: 50: {
 12786                           ;display_lcd.c: 51: __nop();
 12787  0030D6  F000               	nop	
 12788                           
 12789                           ;display_lcd.c: 52: for(contador_int = 0; contador_int<50; contador_int++)
 12790  0030D8  0E00               	movlw	0
 12791  0030DA  6E1B               	movwf	delay@contador_int,c
 12792  0030DC                     l5980:
 12793  0030DC  0E31               	movlw	49
 12794  0030DE  641B               	cpfsgt	delay@contador_int,c
 12795  0030E0  D001               	goto	l579
 12796  0030E2  D003               	goto	u6340
 12797  0030E4                     l579:
 12798                           
 12799                           ;display_lcd.c: 53: {
 12800                           ;display_lcd.c: 54: __nop();
 12801  0030E4  F000               	nop	
 12802  0030E6  2A1B               	incf	delay@contador_int,f,c
 12803  0030E8  D7F9               	goto	l5980
 12804  0030EA                     u6340:
 12805  0030EA  2A1A               	incf	delay@contador_ext,f,c
 12806  0030EC  D7F0               	goto	l5974
 12807  0030EE                     __end_of_delay:
 12808                           	opt stack 0
 12809                           tosu	equ	0xFFF
 12810                           tosh	equ	0xFFE
 12811                           tosl	equ	0xFFD
 12812                           pclath	equ	0xFFA
 12813                           tblptru	equ	0xFF8
 12814                           tblptrh	equ	0xFF7
 12815                           tblptrl	equ	0xFF6
 12816                           tablat	equ	0xFF5
 12817                           prodh	equ	0xFF4
 12818                           prodl	equ	0xFF3
 12819                           intcon	equ	0xFF2
 12820                           intcon2	equ	0xFF1
 12821                           intcon3	equ	0xFF0
 12822                           indf0	equ	0xFEF
 12823                           postinc0	equ	0xFEE
 12824                           fsr0h	equ	0xFEA
 12825                           fsr0l	equ	0xFE9
 12826                           wreg	equ	0xFE8
 12827                           indf1	equ	0xFE7
 12828                           postinc1	equ	0xFE6
 12829                           postdec1	equ	0xFE5
 12830                           fsr1h	equ	0xFE2
 12831                           fsr1l	equ	0xFE1
 12832                           indf2	equ	0xFDF
 12833                           postinc2	equ	0xFDE
 12834                           postdec2	equ	0xFDD
 12835                           plusw2	equ	0xFDB
 12836                           fsr2h	equ	0xFDA
 12837                           fsr2l	equ	0xFD9
 12838                           status	equ	0xFD8
 12839                           
 12840 ;; *************** function _WriteSPI_ *****************
 12841 ;; Defined at:
 12842 ;;		line 144 in file "bibliotecas/SPI.c"
 12843 ;; Parameters:    Size  Location     Type
 12844 ;;  dado            1    wreg     unsigned char 
 12845 ;; Auto vars:     Size  Location     Type
 12846 ;;  dado            1   31[COMRAM] unsigned char 
 12847 ;;  TempVar         1   30[COMRAM] unsigned char 
 12848 ;; Return value:  Size  Location     Type
 12849 ;;                  1    wreg      unsigned char 
 12850 ;; Registers used:
 12851 ;;		wreg, status,2, status,0, cstack
 12852 ;; Tracked objects:
 12853 ;;		On entry : 0/0
 12854 ;;		On exit  : 0/0
 12855 ;;		Unchanged: 0/0
 12856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12857 ;;      Params:         0       0       0       0       0       0       0       0       0
 12858 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12859 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12860 ;;      Totals:         4       0       0       0       0       0       0       0       0
 12861 ;;Total ram usage:        4 bytes
 12862 ;; Hardware stack levels used:    1
 12863 ;; Hardware stack levels required when called:    4
 12864 ;; This function calls:
 12865 ;;		_controle_shrc
 12866 ;;		_shrc_seta_bit
 12867 ;; This function is called by:
 12868 ;;		_dummy_clocks
 12869 ;;		_proceed
 12870 ;;		_command
 12871 ;;		_disk_writep
 12872 ;; This function uses a non-reentrant model
 12873 ;;
 12874                           
 12875                           	psect	text52
 12876  002F7E                     __ptext52:
 12877                           	opt stack 0
 12878  002F7E                     _WriteSPI_:
 12879                           	opt stack 23
 12880                           
 12881                           ;incstack = 0
 12882                           ;WriteSPI_@dado stored from wreg
 12883  002F7E  6E20               	movwf	WriteSPI_@dado,c
 12884                           
 12885                           ;SPI.c: 146: unsigned char TempVar;
 12886                           ;SPI.c: 148: TempVar = SSPBUF;
 12887  002F80  CFC9 F01F          	movff	4041,WriteSPI_@TempVar	;volatile
 12888                           
 12889                           ;SPI.c: 150: SSPCON1bits.WCOL = 0;
 12890  002F84  9EC6               	bcf	4038,7,c	;volatile
 12891                           
 12892                           ;SPI.c: 151: SSPSTATbits.BF = 0;
 12893  002F86  90C7               	bcf	4039,0,c	;volatile
 12894                           
 12895                           ;SPI.c: 152: SSPBUF = dado;
 12896  002F88  C020  FFC9         	movff	WriteSPI_@dado,4041	;volatile
 12897                           
 12898                           ;SPI.c: 153: if (SSPCON1 & 0x80 )
 12899  002F8C  BEC6               	btfsc	4038,7,c	;volatile
 12900  002F8E  0012               	return	
 12901  002F90  D010               	goto	l117
 12902  002F92                     
 12903                           ;SPI.c: 162: shrc_seta_bit(2);
 12904  002F92  0E02               	movlw	2
 12905  002F94  ECA8  F018         	call	_shrc_seta_bit
 12906                           
 12907                           ;SPI.c: 163: controle_shrc();
 12908  002F98  EC36  F019         	call	_controle_shrc	;wreg free
 12909                           
 12910                           ;SPI.c: 164: _delay((unsigned long)((1000)*(48000000/4000.0)));
 12911  002F9C  0E3D               	movlw	61
 12912  002F9E  6E1E               	movwf	(??_WriteSPI_+1)& (0+255),c
 12913  002FA0  0EE1               	movlw	225
 12914  002FA2  6E1D               	movwf	??_WriteSPI_& (0+255),c
 12915  002FA4  0E40               	movlw	64
 12916  002FA6                     u9317:
 12917  002FA6  2EE8               	decfsz	wreg,f,c
 12918  002FA8  D7FE               	bra	u9317
 12919  002FAA  2E1D               	decfsz	??_WriteSPI_& (0+255),f,c
 12920  002FAC  D7FC               	bra	u9317
 12921  002FAE  2E1E               	decfsz	(??_WriteSPI_+1)& (0+255),f,c
 12922  002FB0  D7FA               	bra	u9317
 12923  002FB2                     l117:
 12924  002FB2  A0C7               	btfss	4039,0,c	;volatile
 12925  002FB4  D7EE               	goto	l118
 12926                           
 12927                           ;SPI.c: 166: }
 12928                           ;SPI.c: 167: shrc_seta_bit(0);;
 12929  002FB6  0E00               	movlw	0
 12930  002FB8  ECA8  F018         	call	_shrc_seta_bit
 12931                           
 12932                           ;SPI.c: 168: controle_shrc();
 12933  002FBC  EC36  F019         	call	_controle_shrc	;wreg free
 12934                           
 12935                           ;SPI.c: 170: return (0);
 12936                           ;	Return value of _WriteSPI_ is never used
 12937  002FC0  0012               	return	
 12938  002FC2                     __end_of_WriteSPI_:
 12939                           	opt stack 0
 12940                           tosu	equ	0xFFF
 12941                           tosh	equ	0xFFE
 12942                           tosl	equ	0xFFD
 12943                           pclath	equ	0xFFA
 12944                           tblptru	equ	0xFF8
 12945                           tblptrh	equ	0xFF7
 12946                           tblptrl	equ	0xFF6
 12947                           tablat	equ	0xFF5
 12948                           prodh	equ	0xFF4
 12949                           prodl	equ	0xFF3
 12950                           intcon	equ	0xFF2
 12951                           intcon2	equ	0xFF1
 12952                           intcon3	equ	0xFF0
 12953                           indf0	equ	0xFEF
 12954                           postinc0	equ	0xFEE
 12955                           fsr0h	equ	0xFEA
 12956                           fsr0l	equ	0xFE9
 12957                           wreg	equ	0xFE8
 12958                           indf1	equ	0xFE7
 12959                           postinc1	equ	0xFE6
 12960                           postdec1	equ	0xFE5
 12961                           fsr1h	equ	0xFE2
 12962                           fsr1l	equ	0xFE1
 12963                           indf2	equ	0xFDF
 12964                           postinc2	equ	0xFDE
 12965                           postdec2	equ	0xFDD
 12966                           plusw2	equ	0xFDB
 12967                           fsr2h	equ	0xFDA
 12968                           fsr2l	equ	0xFD9
 12969                           status	equ	0xFD8
 12970                           
 12971 ;; *************** function _shrc_seta_bit *****************
 12972 ;; Defined at:
 12973 ;;		line 119 in file "bibliotecas/SHRC.c"
 12974 ;; Parameters:    Size  Location     Type
 12975 ;;  posicao_bit     1    wreg     unsigned char 
 12976 ;; Auto vars:     Size  Location     Type
 12977 ;;  posicao_bit     1   27[COMRAM] unsigned char 
 12978 ;; Return value:  Size  Location     Type
 12979 ;;                  1    wreg      void 
 12980 ;; Registers used:
 12981 ;;		wreg, status,2, status,0
 12982 ;; Tracked objects:
 12983 ;;		On entry : 0/0
 12984 ;;		On exit  : 0/0
 12985 ;;		Unchanged: 0/0
 12986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12987 ;;      Params:         0       0       0       0       0       0       0       0       0
 12988 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12989 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12990 ;;      Totals:         3       0       0       0       0       0       0       0       0
 12991 ;;Total ram usage:        3 bytes
 12992 ;; Hardware stack levels used:    1
 12993 ;; Hardware stack levels required when called:    2
 12994 ;; This function calls:
 12995 ;;		Nothing
 12996 ;; This function is called by:
 12997 ;;		_WriteSPI_
 12998 ;;		_acende_led4
 12999 ;;		_timer_dois
 13000 ;; This function uses a non-reentrant model
 13001 ;;
 13002                           
 13003                           	psect	text53
 13004  003150                     __ptext53:
 13005                           	opt stack 0
 13006  003150                     _shrc_seta_bit:
 13007                           	opt stack 26
 13008                           
 13009                           ;incstack = 0
 13010                           ;shrc_seta_bit@posicao_bit stored from wreg
 13011  003150  6E1C               	movwf	shrc_seta_bit@posicao_bit,c
 13012                           
 13013                           ;SHRC.c: 121: dado |= (1<<posicao_bit);
 13014  003152  C01C  F01A         	movff	shrc_seta_bit@posicao_bit,??_shrc_seta_bit
 13015  003156  0E01               	movlw	1
 13016  003158  6E1B               	movwf	(??_shrc_seta_bit+1)& (0+255),c
 13017  00315A  2A1A               	incf	??_shrc_seta_bit,f,c
 13018  00315C  D002               	goto	u6364
 13019  00315E                     u6365:
 13020  00315E  90D8               	bcf	status,0,c
 13021  003160  361B               	rlcf	??_shrc_seta_bit+1,f,c
 13022  003162                     u6364:
 13023  003162  2E1A               	decfsz	??_shrc_seta_bit,f,c
 13024  003164  D7FC               	goto	u6365
 13025  003166  501B               	movf	??_shrc_seta_bit+1,w,c
 13026  003168  1245               	iorwf	_dado,f,c
 13027  00316A  0012               	return		;funcret
 13028  00316C                     __end_of_shrc_seta_bit:
 13029                           	opt stack 0
 13030                           tosu	equ	0xFFF
 13031                           tosh	equ	0xFFE
 13032                           tosl	equ	0xFFD
 13033                           pclath	equ	0xFFA
 13034                           tblptru	equ	0xFF8
 13035                           tblptrh	equ	0xFF7
 13036                           tblptrl	equ	0xFF6
 13037                           tablat	equ	0xFF5
 13038                           prodh	equ	0xFF4
 13039                           prodl	equ	0xFF3
 13040                           intcon	equ	0xFF2
 13041                           intcon2	equ	0xFF1
 13042                           intcon3	equ	0xFF0
 13043                           indf0	equ	0xFEF
 13044                           postinc0	equ	0xFEE
 13045                           fsr0h	equ	0xFEA
 13046                           fsr0l	equ	0xFE9
 13047                           wreg	equ	0xFE8
 13048                           indf1	equ	0xFE7
 13049                           postinc1	equ	0xFE6
 13050                           postdec1	equ	0xFE5
 13051                           fsr1h	equ	0xFE2
 13052                           fsr1l	equ	0xFE1
 13053                           indf2	equ	0xFDF
 13054                           postinc2	equ	0xFDE
 13055                           postdec2	equ	0xFDD
 13056                           plusw2	equ	0xFDB
 13057                           fsr2h	equ	0xFDA
 13058                           fsr2l	equ	0xFD9
 13059                           status	equ	0xFD8
 13060                           
 13061 ;; *************** function _controle_shrc *****************
 13062 ;; Defined at:
 13063 ;;		line 112 in file "bibliotecas/SHRC.c"
 13064 ;; Parameters:    Size  Location     Type
 13065 ;;		None
 13066 ;; Auto vars:     Size  Location     Type
 13067 ;;		None
 13068 ;; Return value:  Size  Location     Type
 13069 ;;                  1    wreg      void 
 13070 ;; Registers used:
 13071 ;;		wreg, status,2, status,0, cstack
 13072 ;; Tracked objects:
 13073 ;;		On entry : 0/0
 13074 ;;		On exit  : 0/0
 13075 ;;		Unchanged: 0/0
 13076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13077 ;;      Params:         0       0       0       0       0       0       0       0       0
 13078 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13079 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13080 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13081 ;;Total ram usage:        0 bytes
 13082 ;; Hardware stack levels used:    1
 13083 ;; Hardware stack levels required when called:    3
 13084 ;; This function calls:
 13085 ;;		_ativa_latch_shrc
 13086 ;;		_envia_dados_shrc
 13087 ;; This function is called by:
 13088 ;;		_WriteSPI_
 13089 ;;		_main
 13090 ;;		_timer_dois
 13091 ;; This function uses a non-reentrant model
 13092 ;;
 13093                           
 13094                           	psect	text54
 13095  00326C                     __ptext54:
 13096                           	opt stack 0
 13097  00326C                     _controle_shrc:
 13098                           	opt stack 23
 13099                           
 13100                           ;SHRC.c: 115: envia_dados_shrc(dado);
 13101                           
 13102                           ;incstack = 0
 13103  00326C  5045               	movf	_dado,w,c
 13104  00326E  ECE1  F017         	call	_envia_dados_shrc
 13105                           
 13106                           ;SHRC.c: 116: ativa_latch_shrc();
 13107  003272  ECF5  F018         	call	_ativa_latch_shrc	;wreg free
 13108  003276  0012               	return		;funcret
 13109  003278                     __end_of_controle_shrc:
 13110                           	opt stack 0
 13111                           tosu	equ	0xFFF
 13112                           tosh	equ	0xFFE
 13113                           tosl	equ	0xFFD
 13114                           pclath	equ	0xFFA
 13115                           tblptru	equ	0xFF8
 13116                           tblptrh	equ	0xFF7
 13117                           tblptrl	equ	0xFF6
 13118                           tablat	equ	0xFF5
 13119                           prodh	equ	0xFF4
 13120                           prodl	equ	0xFF3
 13121                           intcon	equ	0xFF2
 13122                           intcon2	equ	0xFF1
 13123                           intcon3	equ	0xFF0
 13124                           indf0	equ	0xFEF
 13125                           postinc0	equ	0xFEE
 13126                           fsr0h	equ	0xFEA
 13127                           fsr0l	equ	0xFE9
 13128                           wreg	equ	0xFE8
 13129                           indf1	equ	0xFE7
 13130                           postinc1	equ	0xFE6
 13131                           postdec1	equ	0xFE5
 13132                           fsr1h	equ	0xFE2
 13133                           fsr1l	equ	0xFE1
 13134                           indf2	equ	0xFDF
 13135                           postinc2	equ	0xFDE
 13136                           postdec2	equ	0xFDD
 13137                           plusw2	equ	0xFDB
 13138                           fsr2h	equ	0xFDA
 13139                           fsr2l	equ	0xFD9
 13140                           status	equ	0xFD8
 13141                           
 13142 ;; *************** function _envia_dados_shrc *****************
 13143 ;; Defined at:
 13144 ;;		line 62 in file "bibliotecas/SHRC.c"
 13145 ;; Parameters:    Size  Location     Type
 13146 ;;  data_to_shrc    1    wreg     unsigned char 
 13147 ;; Auto vars:     Size  Location     Type
 13148 ;;  data_to_shrc    1   26[COMRAM] unsigned char 
 13149 ;;  contador        1   25[COMRAM] unsigned char 
 13150 ;; Return value:  Size  Location     Type
 13151 ;;                  1    wreg      void 
 13152 ;; Registers used:
 13153 ;;		wreg, status,2, status,0
 13154 ;; Tracked objects:
 13155 ;;		On entry : 0/0
 13156 ;;		On exit  : 0/0
 13157 ;;		Unchanged: 0/0
 13158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13159 ;;      Params:         0       0       0       0       0       0       0       0       0
 13160 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13161 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13162 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13163 ;;Total ram usage:        2 bytes
 13164 ;; Hardware stack levels used:    1
 13165 ;; Hardware stack levels required when called:    2
 13166 ;; This function calls:
 13167 ;;		Nothing
 13168 ;; This function is called by:
 13169 ;;		_controle_shrc
 13170 ;; This function uses a non-reentrant model
 13171 ;;
 13172                           
 13173                           	psect	text55
 13174  002FC2                     __ptext55:
 13175                           	opt stack 0
 13176  002FC2                     _envia_dados_shrc:
 13177                           	opt stack 23
 13178                           
 13179                           ;incstack = 0
 13180                           ;envia_dados_shrc@data_to_shrc stored from wreg
 13181  002FC2  6E1B               	movwf	envia_dados_shrc@data_to_shrc,c
 13182                           
 13183                           ;SHRC.c: 64: unsigned char contador=0;
 13184  002FC4  0E00               	movlw	0
 13185  002FC6  6E1A               	movwf	envia_dados_shrc@contador,c
 13186                           
 13187                           ;SHRC.c: 65: (INTCONbits.GIE = 0);
 13188  002FC8  9EF2               	bcf	intcon,7,c	;volatile
 13189                           
 13190                           ;SHRC.c: 67: while(contador<=7)
 13191  002FCA  D018               	goto	l41
 13192  002FCC                     
 13193                           ;SHRC.c: 68: {
 13194                           ;SHRC.c: 69: if((data_to_shrc & 0x80) == 0)
 13195  002FCC  BE1B               	btfsc	envia_dados_shrc@data_to_shrc,7,c
 13196  002FCE  D002               	goto	l43
 13197                           
 13198                           ;SHRC.c: 70: {
 13199                           ;SHRC.c: 71: LATBbits.LATB7 = 0;
 13200  002FD0  9E8A               	bcf	3978,7,c	;volatile
 13201                           
 13202                           ;SHRC.c: 72: }
 13203  002FD2  D001               	goto	l44
 13204  002FD4                     l43:
 13205                           
 13206                           ;SHRC.c: 73: else
 13207                           ;SHRC.c: 74: {
 13208                           ;SHRC.c: 75: LATBbits.LATB7 = 1;
 13209  002FD4  8E8A               	bsf	3978,7,c	;volatile
 13210  002FD6                     l44:
 13211                           
 13212                           ;SHRC.c: 76: }
 13213                           ;SHRC.c: 77: data_to_shrc = data_to_shrc << 1;
 13214  002FD6  501B               	movf	envia_dados_shrc@data_to_shrc,w,c
 13215  002FD8  241B               	addwf	envia_dados_shrc@data_to_shrc,w,c
 13216  002FDA  6E1B               	movwf	envia_dados_shrc@data_to_shrc,c
 13217                           
 13218                           ;SHRC.c: 78: _delay((unsigned long)((30)*(48000000/4000000.0)));
 13219  002FDC  0E78               	movlw	120
 13220  002FDE                     u9327:
 13221  002FDE  2EE8               	decfsz	wreg,f,c
 13222  002FE0  D7FE               	bra	u9327
 13223                           
 13224                           ;SHRC.c: 79: LATBbits.LATB6 = 1;
 13225  002FE2  8C8A               	bsf	3978,6,c	;volatile
 13226                           
 13227                           ;SHRC.c: 80: _delay((unsigned long)((30)*(48000000/4000000.0)));
 13228  002FE4  0E78               	movlw	120
 13229  002FE6                     u9337:
 13230  002FE6  2EE8               	decfsz	wreg,f,c
 13231  002FE8  D7FE               	bra	u9337
 13232                           
 13233                           ;SHRC.c: 81: LATBbits.LATB7 = 0;
 13234  002FEA  9E8A               	bcf	3978,7,c	;volatile
 13235                           
 13236                           ;SHRC.c: 82: _delay((unsigned long)((30)*(48000000/4000000.0)));
 13237  002FEC  0E78               	movlw	120
 13238  002FEE                     u9347:
 13239  002FEE  2EE8               	decfsz	wreg,f,c
 13240  002FF0  D7FE               	bra	u9347
 13241                           
 13242                           ;SHRC.c: 83: LATBbits.LATB6 = 0;
 13243  002FF2  9C8A               	bcf	3978,6,c	;volatile
 13244                           
 13245                           ;SHRC.c: 84: _delay((unsigned long)((30)*(48000000/4000000.0)));
 13246  002FF4  0E78               	movlw	120
 13247  002FF6                     u9357:
 13248  002FF6  2EE8               	decfsz	wreg,f,c
 13249  002FF8  D7FE               	bra	u9357
 13250                           
 13251                           ;SHRC.c: 85: contador++;
 13252  002FFA  2A1A               	incf	envia_dados_shrc@contador,f,c
 13253  002FFC                     l41:
 13254  002FFC  0E07               	movlw	7
 13255  002FFE  641A               	cpfsgt	envia_dados_shrc@contador,c
 13256  003000  D7E5               	goto	l42
 13257                           
 13258                           ;SHRC.c: 86: }
 13259                           ;SHRC.c: 87: (INTCONbits.GIE = 1);
 13260  003002  8EF2               	bsf	intcon,7,c	;volatile
 13261  003004  0012               	return		;funcret
 13262  003006                     __end_of_envia_dados_shrc:
 13263                           	opt stack 0
 13264                           tosu	equ	0xFFF
 13265                           tosh	equ	0xFFE
 13266                           tosl	equ	0xFFD
 13267                           pclath	equ	0xFFA
 13268                           tblptru	equ	0xFF8
 13269                           tblptrh	equ	0xFF7
 13270                           tblptrl	equ	0xFF6
 13271                           tablat	equ	0xFF5
 13272                           prodh	equ	0xFF4
 13273                           prodl	equ	0xFF3
 13274                           intcon	equ	0xFF2
 13275                           intcon2	equ	0xFF1
 13276                           intcon3	equ	0xFF0
 13277                           indf0	equ	0xFEF
 13278                           postinc0	equ	0xFEE
 13279                           fsr0h	equ	0xFEA
 13280                           fsr0l	equ	0xFE9
 13281                           wreg	equ	0xFE8
 13282                           indf1	equ	0xFE7
 13283                           postinc1	equ	0xFE6
 13284                           postdec1	equ	0xFE5
 13285                           fsr1h	equ	0xFE2
 13286                           fsr1l	equ	0xFE1
 13287                           indf2	equ	0xFDF
 13288                           postinc2	equ	0xFDE
 13289                           postdec2	equ	0xFDD
 13290                           plusw2	equ	0xFDB
 13291                           fsr2h	equ	0xFDA
 13292                           fsr2l	equ	0xFD9
 13293                           status	equ	0xFD8
 13294                           
 13295 ;; *************** function _ativa_latch_shrc *****************
 13296 ;; Defined at:
 13297 ;;		line 96 in file "bibliotecas/SHRC.c"
 13298 ;; Parameters:    Size  Location     Type
 13299 ;;		None
 13300 ;; Auto vars:     Size  Location     Type
 13301 ;;		None
 13302 ;; Return value:  Size  Location     Type
 13303 ;;                  1    wreg      void 
 13304 ;; Registers used:
 13305 ;;		wreg
 13306 ;; Tracked objects:
 13307 ;;		On entry : 0/0
 13308 ;;		On exit  : 0/0
 13309 ;;		Unchanged: 0/0
 13310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13311 ;;      Params:         0       0       0       0       0       0       0       0       0
 13312 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13313 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13314 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13315 ;;Total ram usage:        0 bytes
 13316 ;; Hardware stack levels used:    1
 13317 ;; Hardware stack levels required when called:    2
 13318 ;; This function calls:
 13319 ;;		Nothing
 13320 ;; This function is called by:
 13321 ;;		_controle_shrc
 13322 ;; This function uses a non-reentrant model
 13323 ;;
 13324                           
 13325                           	psect	text56
 13326  0031EA                     __ptext56:
 13327                           	opt stack 0
 13328  0031EA                     _ativa_latch_shrc:
 13329                           	opt stack 23
 13330                           
 13331                           ;SHRC.c: 99: LATBbits.LATB5 = 0;
 13332                           
 13333                           ;incstack = 0
 13334  0031EA  9A8A               	bcf	3978,5,c	;volatile
 13335                           
 13336                           ;SHRC.c: 100: _delay((unsigned long)((30)*(48000000/4000000.0)));
 13337  0031EC  0E78               	movlw	120
 13338  0031EE                     u9367:
 13339  0031EE  2EE8               	decfsz	wreg,f,c
 13340  0031F0  D7FE               	bra	u9367
 13341                           
 13342                           ;SHRC.c: 101: LATBbits.LATB5 = 1;
 13343  0031F2  8A8A               	bsf	3978,5,c	;volatile
 13344                           
 13345                           ;SHRC.c: 102: _delay((unsigned long)((60)*(48000000/4000000.0)));
 13346  0031F4  0EF0               	movlw	240
 13347  0031F6                     u9377:
 13348  0031F6  2EE8               	decfsz	wreg,f,c
 13349  0031F8  D7FE               	bra	u9377
 13350                           
 13351                           ;SHRC.c: 103: LATBbits.LATB5 = 0;
 13352  0031FA  9A8A               	bcf	3978,5,c	;volatile
 13353  0031FC  0012               	return		;funcret
 13354  0031FE                     __end_of_ativa_latch_shrc:
 13355                           	opt stack 0
 13356                           tosu	equ	0xFFF
 13357                           tosh	equ	0xFFE
 13358                           tosl	equ	0xFFD
 13359                           pclath	equ	0xFFA
 13360                           tblptru	equ	0xFF8
 13361                           tblptrh	equ	0xFF7
 13362                           tblptrl	equ	0xFF6
 13363                           tablat	equ	0xFF5
 13364                           prodh	equ	0xFF4
 13365                           prodl	equ	0xFF3
 13366                           intcon	equ	0xFF2
 13367                           intcon2	equ	0xFF1
 13368                           intcon3	equ	0xFF0
 13369                           indf0	equ	0xFEF
 13370                           postinc0	equ	0xFEE
 13371                           fsr0h	equ	0xFEA
 13372                           fsr0l	equ	0xFE9
 13373                           wreg	equ	0xFE8
 13374                           indf1	equ	0xFE7
 13375                           postinc1	equ	0xFE6
 13376                           postdec1	equ	0xFE5
 13377                           fsr1h	equ	0xFE2
 13378                           fsr1l	equ	0xFE1
 13379                           indf2	equ	0xFDF
 13380                           postinc2	equ	0xFDE
 13381                           postdec2	equ	0xFDD
 13382                           plusw2	equ	0xFDB
 13383                           fsr2h	equ	0xFDA
 13384                           fsr2l	equ	0xFD9
 13385                           status	equ	0xFD8
 13386                           
 13387 ;; *************** function ___lmul *****************
 13388 ;; Defined at:
 13389 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 13390 ;; Parameters:    Size  Location     Type
 13391 ;;  multiplier      4   25[COMRAM] unsigned long 
 13392 ;;  multiplicand    4   29[COMRAM] unsigned long 
 13393 ;; Auto vars:     Size  Location     Type
 13394 ;;  product         4   33[COMRAM] unsigned long 
 13395 ;; Return value:  Size  Location     Type
 13396 ;;                  4   25[COMRAM] unsigned long 
 13397 ;; Registers used:
 13398 ;;		wreg, status,2, status,0
 13399 ;; Tracked objects:
 13400 ;;		On entry : 0/0
 13401 ;;		On exit  : 0/0
 13402 ;;		Unchanged: 0/0
 13403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13404 ;;      Params:         8       0       0       0       0       0       0       0       0
 13405 ;;      Locals:         4       0       0       0       0       0       0       0       0
 13406 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13407 ;;      Totals:        12       0       0       0       0       0       0       0       0
 13408 ;;Total ram usage:       12 bytes
 13409 ;; Hardware stack levels used:    1
 13410 ;; Hardware stack levels required when called:    2
 13411 ;; This function calls:
 13412 ;;		Nothing
 13413 ;; This function is called by:
 13414 ;;		_clust2sect
 13415 ;;		_pf_mount
 13416 ;; This function uses a non-reentrant model
 13417 ;;
 13418                           
 13419                           	psect	text57
 13420  002E3E                     __ptext57:
 13421                           	opt stack 0
 13422  002E3E                     ___lmul:
 13423                           	opt stack 24
 13424                           
 13425                           ;incstack = 0
 13426  002E3E  0E00               	movlw	0
 13427  002E40  6E22               	movwf	___lmul@product,c
 13428  002E42  0E00               	movlw	0
 13429  002E44  6E23               	movwf	___lmul@product+1,c
 13430  002E46  0E00               	movlw	0
 13431  002E48  6E24               	movwf	___lmul@product+2,c
 13432  002E4A  0E00               	movlw	0
 13433  002E4C  6E25               	movwf	___lmul@product+3,c
 13434  002E4E  A01A               	btfss	___lmul@multiplier,0,c
 13435  002E50  D008               	goto	l1085
 13436  002E52  501E               	movf	___lmul@multiplicand,w,c
 13437  002E54  2622               	addwf	___lmul@product,f,c
 13438  002E56  501F               	movf	___lmul@multiplicand+1,w,c
 13439  002E58  2223               	addwfc	___lmul@product+1,f,c
 13440  002E5A  5020               	movf	___lmul@multiplicand+2,w,c
 13441  002E5C  2224               	addwfc	___lmul@product+2,f,c
 13442  002E5E  5021               	movf	___lmul@multiplicand+3,w,c
 13443  002E60  2225               	addwfc	___lmul@product+3,f,c
 13444  002E62                     l1085:
 13445  002E62  90D8               	bcf	status,0,c
 13446  002E64  361E               	rlcf	___lmul@multiplicand,f,c
 13447  002E66  361F               	rlcf	___lmul@multiplicand+1,f,c
 13448  002E68  3620               	rlcf	___lmul@multiplicand+2,f,c
 13449  002E6A  3621               	rlcf	___lmul@multiplicand+3,f,c
 13450  002E6C  90D8               	bcf	status,0,c
 13451  002E6E  321D               	rrcf	___lmul@multiplier+3,f,c
 13452  002E70  321C               	rrcf	___lmul@multiplier+2,f,c
 13453  002E72  321B               	rrcf	___lmul@multiplier+1,f,c
 13454  002E74  321A               	rrcf	___lmul@multiplier,f,c
 13455  002E76  501A               	movf	___lmul@multiplier,w,c
 13456  002E78  101B               	iorwf	___lmul@multiplier+1,w,c
 13457  002E7A  101C               	iorwf	___lmul@multiplier+2,w,c
 13458  002E7C  101D               	iorwf	___lmul@multiplier+3,w,c
 13459  002E7E  A4D8               	btfss	status,2,c
 13460  002E80  D7E6               	goto	l1084
 13461  002E82  C022  F01A         	movff	___lmul@product,?___lmul
 13462  002E86  C023  F01B         	movff	___lmul@product+1,?___lmul+1
 13463  002E8A  C024  F01C         	movff	___lmul@product+2,?___lmul+2
 13464  002E8E  C025  F01D         	movff	___lmul@product+3,?___lmul+3
 13465  002E92  0012               	return		;funcret
 13466  002E94                     __end_of___lmul:
 13467                           	opt stack 0
 13468                           tosu	equ	0xFFF
 13469                           tosh	equ	0xFFE
 13470                           tosl	equ	0xFFD
 13471                           pclath	equ	0xFFA
 13472                           tblptru	equ	0xFF8
 13473                           tblptrh	equ	0xFF7
 13474                           tblptrl	equ	0xFF6
 13475                           tablat	equ	0xFF5
 13476                           prodh	equ	0xFF4
 13477                           prodl	equ	0xFF3
 13478                           intcon	equ	0xFF2
 13479                           intcon2	equ	0xFF1
 13480                           intcon3	equ	0xFF0
 13481                           indf0	equ	0xFEF
 13482                           postinc0	equ	0xFEE
 13483                           fsr0h	equ	0xFEA
 13484                           fsr0l	equ	0xFE9
 13485                           wreg	equ	0xFE8
 13486                           indf1	equ	0xFE7
 13487                           postinc1	equ	0xFE6
 13488                           postdec1	equ	0xFE5
 13489                           fsr1h	equ	0xFE2
 13490                           fsr1l	equ	0xFE1
 13491                           indf2	equ	0xFDF
 13492                           postinc2	equ	0xFDE
 13493                           postdec2	equ	0xFDD
 13494                           plusw2	equ	0xFDB
 13495                           fsr2h	equ	0xFDA
 13496                           fsr2l	equ	0xFD9
 13497                           status	equ	0xFD8
 13498                           
 13499 ;; *************** function ___lldiv *****************
 13500 ;; Defined at:
 13501 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 13502 ;; Parameters:    Size  Location     Type
 13503 ;;  dividend        4   25[COMRAM] unsigned long 
 13504 ;;  divisor         4   29[COMRAM] unsigned long 
 13505 ;; Auto vars:     Size  Location     Type
 13506 ;;  quotient        4   33[COMRAM] unsigned long 
 13507 ;;  counter         1   37[COMRAM] unsigned char 
 13508 ;; Return value:  Size  Location     Type
 13509 ;;                  4   25[COMRAM] unsigned long 
 13510 ;; Registers used:
 13511 ;;		wreg, status,2, status,0
 13512 ;; Tracked objects:
 13513 ;;		On entry : 0/0
 13514 ;;		On exit  : 0/0
 13515 ;;		Unchanged: 0/0
 13516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13517 ;;      Params:         8       0       0       0       0       0       0       0       0
 13518 ;;      Locals:         5       0       0       0       0       0       0       0       0
 13519 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13520 ;;      Totals:        13       0       0       0       0       0       0       0       0
 13521 ;;Total ram usage:       13 bytes
 13522 ;; Hardware stack levels used:    1
 13523 ;; Hardware stack levels required when called:    2
 13524 ;; This function calls:
 13525 ;;		Nothing
 13526 ;; This function is called by:
 13527 ;;		_pf_mount
 13528 ;;		_pf_lseek
 13529 ;; This function uses a non-reentrant model
 13530 ;;
 13531                           
 13532                           	psect	text58
 13533  002AA6                     __ptext58:
 13534                           	opt stack 0
 13535  002AA6                     ___lldiv:
 13536                           	opt stack 25
 13537                           
 13538                           ;incstack = 0
 13539  002AA6  0E00               	movlw	0
 13540  002AA8  6E22               	movwf	___lldiv@quotient,c
 13541  002AAA  0E00               	movlw	0
 13542  002AAC  6E23               	movwf	___lldiv@quotient+1,c
 13543  002AAE  0E00               	movlw	0
 13544  002AB0  6E24               	movwf	___lldiv@quotient+2,c
 13545  002AB2  0E00               	movlw	0
 13546  002AB4  6E25               	movwf	___lldiv@quotient+3,c
 13547  002AB6  501E               	movf	___lldiv@divisor,w,c
 13548  002AB8  101F               	iorwf	___lldiv@divisor+1,w,c
 13549  002ABA  1020               	iorwf	___lldiv@divisor+2,w,c
 13550  002ABC  1021               	iorwf	___lldiv@divisor+3,w,c
 13551  002ABE  B4D8               	btfsc	status,2,c
 13552  002AC0  D02A               	goto	l1446
 13553  002AC2  0E01               	movlw	1
 13554  002AC4  6E26               	movwf	___lldiv@counter,c
 13555  002AC6  D006               	goto	l1441
 13556  002AC8  90D8               	bcf	status,0,c
 13557  002ACA  361E               	rlcf	___lldiv@divisor,f,c
 13558  002ACC  361F               	rlcf	___lldiv@divisor+1,f,c
 13559  002ACE  3620               	rlcf	___lldiv@divisor+2,f,c
 13560  002AD0  3621               	rlcf	___lldiv@divisor+3,f,c
 13561  002AD2  2A26               	incf	___lldiv@counter,f,c
 13562  002AD4                     l1441:
 13563  002AD4  AE21               	btfss	___lldiv@divisor+3,7,c
 13564  002AD6  D7F8               	goto	l1442
 13565  002AD8                     u4660:
 13566  002AD8  90D8               	bcf	status,0,c
 13567  002ADA  3622               	rlcf	___lldiv@quotient,f,c
 13568  002ADC  3623               	rlcf	___lldiv@quotient+1,f,c
 13569  002ADE  3624               	rlcf	___lldiv@quotient+2,f,c
 13570  002AE0  3625               	rlcf	___lldiv@quotient+3,f,c
 13571  002AE2  501E               	movf	___lldiv@divisor,w,c
 13572  002AE4  5C1A               	subwf	___lldiv@dividend,w,c
 13573  002AE6  501F               	movf	___lldiv@divisor+1,w,c
 13574  002AE8  581B               	subwfb	___lldiv@dividend+1,w,c
 13575  002AEA  5020               	movf	___lldiv@divisor+2,w,c
 13576  002AEC  581C               	subwfb	___lldiv@dividend+2,w,c
 13577  002AEE  5021               	movf	___lldiv@divisor+3,w,c
 13578  002AF0  581D               	subwfb	___lldiv@dividend+3,w,c
 13579  002AF2  A0D8               	btfss	status,0,c
 13580  002AF4  D009               	goto	l1445
 13581  002AF6  501E               	movf	___lldiv@divisor,w,c
 13582  002AF8  5E1A               	subwf	___lldiv@dividend,f,c
 13583  002AFA  501F               	movf	___lldiv@divisor+1,w,c
 13584  002AFC  5A1B               	subwfb	___lldiv@dividend+1,f,c
 13585  002AFE  5020               	movf	___lldiv@divisor+2,w,c
 13586  002B00  5A1C               	subwfb	___lldiv@dividend+2,f,c
 13587  002B02  5021               	movf	___lldiv@divisor+3,w,c
 13588  002B04  5A1D               	subwfb	___lldiv@dividend+3,f,c
 13589  002B06  8022               	bsf	___lldiv@quotient,0,c
 13590  002B08                     l1445:
 13591  002B08  90D8               	bcf	status,0,c
 13592  002B0A  3221               	rrcf	___lldiv@divisor+3,f,c
 13593  002B0C  3220               	rrcf	___lldiv@divisor+2,f,c
 13594  002B0E  321F               	rrcf	___lldiv@divisor+1,f,c
 13595  002B10  321E               	rrcf	___lldiv@divisor,f,c
 13596  002B12  2E26               	decfsz	___lldiv@counter,f,c
 13597  002B14  D7E1               	goto	u4660
 13598  002B16                     l1446:
 13599  002B16  C022  F01A         	movff	___lldiv@quotient,?___lldiv
 13600  002B1A  C023  F01B         	movff	___lldiv@quotient+1,?___lldiv+1
 13601  002B1E  C024  F01C         	movff	___lldiv@quotient+2,?___lldiv+2
 13602  002B22  C025  F01D         	movff	___lldiv@quotient+3,?___lldiv+3
 13603  002B26  0012               	return		;funcret
 13604  002B28                     __end_of___lldiv:
 13605                           	opt stack 0
 13606                           tosu	equ	0xFFF
 13607                           tosh	equ	0xFFE
 13608                           tosl	equ	0xFFD
 13609                           pclath	equ	0xFFA
 13610                           tblptru	equ	0xFF8
 13611                           tblptrh	equ	0xFF7
 13612                           tblptrl	equ	0xFF6
 13613                           tablat	equ	0xFF5
 13614                           prodh	equ	0xFF4
 13615                           prodl	equ	0xFF3
 13616                           intcon	equ	0xFF2
 13617                           intcon2	equ	0xFF1
 13618                           intcon3	equ	0xFF0
 13619                           indf0	equ	0xFEF
 13620                           postinc0	equ	0xFEE
 13621                           fsr0h	equ	0xFEA
 13622                           fsr0l	equ	0xFE9
 13623                           wreg	equ	0xFE8
 13624                           indf1	equ	0xFE7
 13625                           postinc1	equ	0xFE6
 13626                           postdec1	equ	0xFE5
 13627                           fsr1h	equ	0xFE2
 13628                           fsr1l	equ	0xFE1
 13629                           indf2	equ	0xFDF
 13630                           postinc2	equ	0xFDE
 13631                           postdec2	equ	0xFDD
 13632                           plusw2	equ	0xFDB
 13633                           fsr2h	equ	0xFDA
 13634                           fsr2l	equ	0xFD9
 13635                           status	equ	0xFD8
 13636                           
 13637 ;; *************** function _isr *****************
 13638 ;; Defined at:
 13639 ;;		line 120 in file "main.c"
 13640 ;; Parameters:    Size  Location     Type
 13641 ;;		None
 13642 ;; Auto vars:     Size  Location     Type
 13643 ;;  cont            1   24[COMRAM] unsigned char 
 13644 ;; Return value:  Size  Location     Type
 13645 ;;                  1    wreg      void 
 13646 ;; Registers used:
 13647 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13648 ;; Tracked objects:
 13649 ;;		On entry : 0/0
 13650 ;;		On exit  : 0/0
 13651 ;;		Unchanged: 0/0
 13652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13653 ;;      Params:         0       0       0       0       0       0       0       0       0
 13654 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13655 ;;      Temps:         20       0       0       0       0       0       0       0       0
 13656 ;;      Totals:        21       0       0       0       0       0       0       0       0
 13657 ;;Total ram usage:       21 bytes
 13658 ;; Hardware stack levels used:    1
 13659 ;; Hardware stack levels required when called:    1
 13660 ;; This function calls:
 13661 ;;		_recebe_dado_uart
 13662 ;;		i2_write_timer_zero
 13663 ;; This function is called by:
 13664 ;;		Interrupt level 2
 13665 ;; This function uses a non-reentrant model
 13666 ;;
 13667                           
 13668                           	psect	intcode
 13669  000008                     __pintcode:
 13670                           	opt stack 0
 13671  000008                     _isr:
 13672                           	opt stack 17
 13673                           
 13674                           ;incstack = 0
 13675  000008  8246               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 13676  00000A  ED5D  F011         	call	int_func,f	;refresh shadow registers
 13677                           tosu	equ	0xFFF
 13678                           tosh	equ	0xFFE
 13679                           tosl	equ	0xFFD
 13680                           pclath	equ	0xFFA
 13681                           tblptru	equ	0xFF8
 13682                           tblptrh	equ	0xFF7
 13683                           tblptrl	equ	0xFF6
 13684                           tablat	equ	0xFF5
 13685                           prodh	equ	0xFF4
 13686                           prodl	equ	0xFF3
 13687                           intcon	equ	0xFF2
 13688                           intcon2	equ	0xFF1
 13689                           intcon3	equ	0xFF0
 13690                           indf0	equ	0xFEF
 13691                           postinc0	equ	0xFEE
 13692                           fsr0h	equ	0xFEA
 13693                           fsr0l	equ	0xFE9
 13694                           wreg	equ	0xFE8
 13695                           indf1	equ	0xFE7
 13696                           postinc1	equ	0xFE6
 13697                           postdec1	equ	0xFE5
 13698                           fsr1h	equ	0xFE2
 13699                           fsr1l	equ	0xFE1
 13700                           indf2	equ	0xFDF
 13701                           postinc2	equ	0xFDE
 13702                           postdec2	equ	0xFDD
 13703                           plusw2	equ	0xFDB
 13704                           fsr2h	equ	0xFDA
 13705                           fsr2l	equ	0xFD9
 13706                           status	equ	0xFD8
 13707                           
 13708                           	psect	intcode_body
 13709  0022BA                     __pintcode_body:
 13710                           	opt stack 17
 13711  0022BA                     int_func:
 13712                           	opt stack 17
 13713  0022BA  0006               	pop		; remove dummy address from shadow register refresh
 13714  0022BC  CFFA F007          	movff	pclath,??_isr+2
 13715  0022C0  CFFB F008          	movff	pclatu,??_isr+3
 13716  0022C4  CFE9 F009          	movff	fsr0l,??_isr+4
 13717  0022C8  CFEA F00A          	movff	fsr0h,??_isr+5
 13718  0022CC  CFE1 F00B          	movff	fsr1l,??_isr+6
 13719  0022D0  CFE2 F00C          	movff	fsr1h,??_isr+7
 13720  0022D4  CFD9 F00D          	movff	fsr2l,??_isr+8
 13721  0022D8  CFDA F00E          	movff	fsr2h,??_isr+9
 13722  0022DC  CFF3 F00F          	movff	prodl,??_isr+10
 13723  0022E0  CFF4 F010          	movff	prodh,??_isr+11
 13724  0022E4  CFF6 F011          	movff	tblptrl,??_isr+12
 13725  0022E8  CFF7 F012          	movff	tblptrh,??_isr+13
 13726  0022EC  CFF8 F013          	movff	tblptru,??_isr+14
 13727  0022F0  CFF5 F014          	movff	tablat,??_isr+15
 13728  0022F4  C046  F015         	movff	btemp,??_isr+16
 13729  0022F8  C047  F016         	movff	btemp+1,??_isr+17
 13730  0022FC  C048  F017         	movff	btemp+2,??_isr+18
 13731  002300  C049  F018         	movff	btemp+3,??_isr+19
 13732                           
 13733                           ;main.c: 122: unsigned char cont;
 13734                           ;main.c: 125: if (PIE1bits.RCIE && PIR1bits.RCIF)
 13735  002304  BA9D               	btfsc	3997,5,c	;volatile
 13736  002306  AA9E               	btfss	3998,5,c	;volatile
 13737  002308  D004               	goto	i2l486
 13738                           
 13739                           ;main.c: 126: {
 13740                           ;main.c: 127: data_uart_recebe = recebe_dado_uart();
 13741  00230A  EC1A  F019         	call	_recebe_dado_uart	;wreg free
 13742  00230E  6E40               	movwf	_data_uart_recebe,c
 13743                           
 13744                           ;main.c: 128: PIR1bits.RCIF = 0;
 13745  002310  9A9E               	bcf	3998,5,c	;volatile
 13746  002312                     i2l486:
 13747                           
 13748                           ;main.c: 129: }
 13749                           ;main.c: 132: unsigned char cont;
 13750                           ;main.c: 134: if (TMR0IF && T0IF)
 13751  002312  B4F2               	btfsc	intcon,2,c	;volatile
 13752  002314  A4F2               	btfss	intcon,2,c	;volatile
 13753  002316  D036               	goto	i2l487
 13754                           
 13755                           ;main.c: 135: {
 13756                           ;main.c: 136: INTCONbits.TMR0IF = 0;
 13757  002318  94F2               	bcf	intcon,2,c	;volatile
 13758                           
 13759                           ;main.c: 137: sinaliza_int_timer = 1;
 13760  00231A  0E01               	movlw	1
 13761  00231C  6E3F               	movwf	_sinaliza_int_timer,c
 13762                           
 13763                           ;main.c: 139: for(cont= 0; cont<2;cont++)
 13764  00231E  0E00               	movlw	0
 13765  002320  6E19               	movwf	isr@cont,c
 13766  002322                     i2l5640:
 13767  002322  0E01               	movlw	1
 13768  002324  6419               	cpfsgt	isr@cont,c
 13769  002326  D001               	goto	i2l488
 13770  002328  D019               	goto	i2u586_40
 13771  00232A                     i2l488:
 13772                           
 13773                           ;main.c: 140: {
 13774                           ;main.c: 141: if(tempo_tarefa[cont]>0) tempo_tarefa[cont]--;
 13775  00232A  5019               	movf	isr@cont,w,c
 13776  00232C  0D02               	mullw	2
 13777  00232E  0E2D               	movlw	low _tempo_tarefa
 13778  002330  24F3               	addwf	prodl,w,c
 13779  002332  6ED9               	movwf	fsr2l,c
 13780  002334  0E00               	movlw	high _tempo_tarefa
 13781  002336  20F4               	addwfc	prodh,w,c
 13782  002338  6EDA               	movwf	fsr2h,c
 13783  00233A  50DE               	movf	postinc2,w,c
 13784  00233C  10DE               	iorwf	postinc2,w,c
 13785  00233E  B4D8               	btfsc	status,2,c
 13786  002340  D00B               	goto	i2l490
 13787  002342  5019               	movf	isr@cont,w,c
 13788  002344  0D02               	mullw	2
 13789  002346  0E2D               	movlw	low _tempo_tarefa
 13790  002348  24F3               	addwf	prodl,w,c
 13791  00234A  6ED9               	movwf	fsr2l,c
 13792  00234C  0E00               	movlw	high _tempo_tarefa
 13793  00234E  20F4               	addwfc	prodh,w,c
 13794  002350  6EDA               	movwf	fsr2h,c
 13795  002352  06DE               	decf	postinc2,f,c
 13796  002354  0E00               	movlw	0
 13797  002356  5ADD               	subwfb	postdec2,f,c
 13798  002358                     i2l490:
 13799  002358  2A19               	incf	isr@cont,f,c
 13800  00235A  D7E3               	goto	i2l5640
 13801  00235C                     i2u586_40:
 13802                           
 13803                           ;main.c: 142: }
 13804                           ;main.c: 145: if(tarefa_em_execucao == 1)
 13805  00235C  043E               	decf	_tarefa_em_execucao,w,c	;volatile
 13806  00235E  A4D8               	btfss	status,2,c
 13807  002360  D00B               	goto	i2l492
 13808                           
 13809                           ;main.c: 146: {
 13810                           ;main.c: 147: timeout_tarefa--;
 13811  002362  0637               	decf	_timeout_tarefa,f,c
 13812  002364  A0D8               	btfss	status,0,c
 13813  002366  0638               	decf	_timeout_tarefa+1,f,c
 13814                           
 13815                           ;main.c: 148: if(!timeout_tarefa)
 13816  002368  5037               	movf	_timeout_tarefa,w,c
 13817  00236A  1038               	iorwf	_timeout_tarefa+1,w,c
 13818  00236C  A4D8               	btfss	status,2,c
 13819  00236E  D004               	goto	i2l492
 13820                           
 13821                           ;main.c: 149: {
 13822                           ;main.c: 151: PCLATH = 0;
 13823  002370  0E00               	movlw	0
 13824  002372  6EFA               	movwf	pclath,c	;volatile
 13825                           
 13826                           ;main.c: 152: PCL = 0;
 13827  002374  0E00               	movlw	0
 13828  002376  6EF9               	movwf	pcl,c	;volatile
 13829  002378                     i2l492:
 13830                           
 13831                           ;main.c: 153: }
 13832                           ;main.c: 154: }
 13833                           ;main.c: 157: write_timer_zero(0x0083);
 13834  002378  0E00               	movlw	0
 13835  00237A  6E02               	movwf	i2write_timer_zero@timer0+1,c
 13836  00237C  0E83               	movlw	131
 13837  00237E  6E01               	movwf	i2write_timer_zero@timer0,c
 13838  002380  EC11  F019         	call	i2_write_timer_zero	;wreg free
 13839  002384                     i2l487:
 13840                           
 13841                           ;main.c: 159: }
 13842                           ;main.c: 165: if (INT0IF && INT0IE)
 13843  002384  B2F2               	btfsc	intcon,1,c	;volatile
 13844  002386  A8F2               	btfss	intcon,4,c	;volatile
 13845  002388  D001               	goto	i2l493
 13846                           
 13847                           ;main.c: 166: {
 13848                           ;main.c: 167: INT0IF = 0;
 13849  00238A  92F2               	bcf	intcon,1,c	;volatile
 13850  00238C                     i2l493:
 13851  00238C  C018  F049         	movff	??_isr+19,btemp+3
 13852  002390  C017  F048         	movff	??_isr+18,btemp+2
 13853  002394  C016  F047         	movff	??_isr+17,btemp+1
 13854  002398  C015  F046         	movff	??_isr+16,btemp
 13855  00239C  C014  FFF5         	movff	??_isr+15,tablat
 13856  0023A0  C013  FFF8         	movff	??_isr+14,tblptru
 13857  0023A4  C012  FFF7         	movff	??_isr+13,tblptrh
 13858  0023A8  C011  FFF6         	movff	??_isr+12,tblptrl
 13859  0023AC  C010  FFF4         	movff	??_isr+11,prodh
 13860  0023B0  C00F  FFF3         	movff	??_isr+10,prodl
 13861  0023B4  C00E  FFDA         	movff	??_isr+9,fsr2h
 13862  0023B8  C00D  FFD9         	movff	??_isr+8,fsr2l
 13863  0023BC  C00C  FFE2         	movff	??_isr+7,fsr1h
 13864  0023C0  C00B  FFE1         	movff	??_isr+6,fsr1l
 13865  0023C4  C00A  FFEA         	movff	??_isr+5,fsr0h
 13866  0023C8  C009  FFE9         	movff	??_isr+4,fsr0l
 13867  0023CC  C008  FFFB         	movff	??_isr+3,pclatu
 13868  0023D0  C007  FFFA         	movff	??_isr+2,pclath
 13869  0023D4  9246               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 13870  0023D6  0011               	retfie		f
 13871  0023D8                     __end_of_isr:
 13872                           	opt stack 0
 13873                           tosu	equ	0xFFF
 13874                           tosh	equ	0xFFE
 13875                           tosl	equ	0xFFD
 13876                           pclatu	equ	0xFFB
 13877                           pclath	equ	0xFFA
 13878                           pcl	equ	0xFF9
 13879                           tblptru	equ	0xFF8
 13880                           tblptrh	equ	0xFF7
 13881                           tblptrl	equ	0xFF6
 13882                           tablat	equ	0xFF5
 13883                           prodh	equ	0xFF4
 13884                           prodl	equ	0xFF3
 13885                           intcon	equ	0xFF2
 13886                           intcon2	equ	0xFF1
 13887                           intcon3	equ	0xFF0
 13888                           indf0	equ	0xFEF
 13889                           postinc0	equ	0xFEE
 13890                           fsr0h	equ	0xFEA
 13891                           fsr0l	equ	0xFE9
 13892                           wreg	equ	0xFE8
 13893                           indf1	equ	0xFE7
 13894                           postinc1	equ	0xFE6
 13895                           postdec1	equ	0xFE5
 13896                           fsr1h	equ	0xFE2
 13897                           fsr1l	equ	0xFE1
 13898                           indf2	equ	0xFDF
 13899                           postinc2	equ	0xFDE
 13900                           postdec2	equ	0xFDD
 13901                           plusw2	equ	0xFDB
 13902                           fsr2h	equ	0xFDA
 13903                           fsr2l	equ	0xFD9
 13904                           status	equ	0xFD8
 13905                           
 13906 ;; *************** function i2_write_timer_zero *****************
 13907 ;; Defined at:
 13908 ;;		line 143 in file "bibliotecas/hardware.c"
 13909 ;; Parameters:    Size  Location     Type
 13910 ;;  timer0          2    0[COMRAM] unsigned int 
 13911 ;; Auto vars:     Size  Location     Type
 13912 ;;  write_timer_    2    2[COMRAM] struct Timers
 13913 ;; Return value:  Size  Location     Type
 13914 ;;                  1    wreg      void 
 13915 ;; Registers used:
 13916 ;;		None
 13917 ;; Tracked objects:
 13918 ;;		On entry : 0/0
 13919 ;;		On exit  : 0/0
 13920 ;;		Unchanged: 0/0
 13921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13922 ;;      Params:         2       0       0       0       0       0       0       0       0
 13923 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13924 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13925 ;;      Totals:         4       0       0       0       0       0       0       0       0
 13926 ;;Total ram usage:        4 bytes
 13927 ;; Hardware stack levels used:    1
 13928 ;; This function calls:
 13929 ;;		Nothing
 13930 ;; This function is called by:
 13931 ;;		_isr
 13932 ;; This function uses a non-reentrant model
 13933 ;;
 13934                           
 13935                           	psect	text60
 13936  003222                     __ptext60:
 13937                           	opt stack 0
 13938  003222                     i2_write_timer_zero:
 13939                           	opt stack 17
 13940                           
 13941                           ;hardware.c: 145: union Timers timer;
 13942                           ;hardware.c: 147: timer.lt = timer0;
 13943                           
 13944                           ;incstack = 0
 13945  003222  C001  F003         	movff	i2write_timer_zero@timer0,i2write_timer_zero@timer
 13946  003226  C002  F004         	movff	i2write_timer_zero@timer0+1,i2write_timer_zero@timer+1
 13947                           
 13948                           ;hardware.c: 149: TMR0H = timer.bt[1];
 13949  00322A  C004  FFD7         	movff	i2write_timer_zero@timer+1,4055	;volatile
 13950                           
 13951                           ;hardware.c: 150: TMR0L = timer.bt[0];
 13952  00322E  C003  FFD6         	movff	i2write_timer_zero@timer,4054	;volatile
 13953  003232  0012               	return		;funcret
 13954  003234                     __end_ofi2_write_timer_zero:
 13955                           	opt stack 0
 13956                           tosu	equ	0xFFF
 13957                           tosh	equ	0xFFE
 13958                           tosl	equ	0xFFD
 13959                           pclatu	equ	0xFFB
 13960                           pclath	equ	0xFFA
 13961                           pcl	equ	0xFF9
 13962                           tblptru	equ	0xFF8
 13963                           tblptrh	equ	0xFF7
 13964                           tblptrl	equ	0xFF6
 13965                           tablat	equ	0xFF5
 13966                           prodh	equ	0xFF4
 13967                           prodl	equ	0xFF3
 13968                           intcon	equ	0xFF2
 13969                           intcon2	equ	0xFF1
 13970                           intcon3	equ	0xFF0
 13971                           indf0	equ	0xFEF
 13972                           postinc0	equ	0xFEE
 13973                           fsr0h	equ	0xFEA
 13974                           fsr0l	equ	0xFE9
 13975                           wreg	equ	0xFE8
 13976                           indf1	equ	0xFE7
 13977                           postinc1	equ	0xFE6
 13978                           postdec1	equ	0xFE5
 13979                           fsr1h	equ	0xFE2
 13980                           fsr1l	equ	0xFE1
 13981                           indf2	equ	0xFDF
 13982                           postinc2	equ	0xFDE
 13983                           postdec2	equ	0xFDD
 13984                           plusw2	equ	0xFDB
 13985                           fsr2h	equ	0xFDA
 13986                           fsr2l	equ	0xFD9
 13987                           status	equ	0xFD8
 13988                           
 13989 ;; *************** function _recebe_dado_uart *****************
 13990 ;; Defined at:
 13991 ;;		line 138 in file "bibliotecas/uart.c"
 13992 ;; Parameters:    Size  Location     Type
 13993 ;;		None
 13994 ;; Auto vars:     Size  Location     Type
 13995 ;;		None
 13996 ;; Return value:  Size  Location     Type
 13997 ;;                  1    wreg      unsigned char 
 13998 ;; Registers used:
 13999 ;;		wreg, status,2
 14000 ;; Tracked objects:
 14001 ;;		On entry : 0/0
 14002 ;;		On exit  : 0/0
 14003 ;;		Unchanged: 0/0
 14004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14005 ;;      Params:         0       0       0       0       0       0       0       0       0
 14006 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14007 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14008 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14009 ;;Total ram usage:        0 bytes
 14010 ;; Hardware stack levels used:    1
 14011 ;; This function calls:
 14012 ;;		Nothing
 14013 ;; This function is called by:
 14014 ;;		_isr
 14015 ;;		_recebe_string_uart
 14016 ;; This function uses a non-reentrant model
 14017 ;;
 14018                           
 14019                           	psect	text61
 14020  003234                     __ptext61:
 14021                           	opt stack 0
 14022  003234                     _recebe_dado_uart:
 14023                           	opt stack 17
 14024                           
 14025                           ;uart.c: 140: while(RCIF==0);
 14026                           
 14027                           ;incstack = 0
 14028  003234  AA9E               	btfss	3998,5,c	;volatile
 14029  003236  D7FE               	goto	_recebe_dado_uart
 14030                           
 14031                           ;uart.c: 141: if(RCSTAbits.OERR)
 14032  003238  A2AB               	btfss	4011,1,c	;volatile
 14033  00323A  D003               	goto	i2l368
 14034                           
 14035                           ;uart.c: 142: {
 14036                           ;uart.c: 143: CREN = 0;
 14037  00323C  98AB               	bcf	4011,4,c	;volatile
 14038                           
 14039                           ;uart.c: 144: __nop();
 14040  00323E  F000               	nop	
 14041                           
 14042                           ;uart.c: 145: CREN=1;
 14043  003240  88AB               	bsf	4011,4,c	;volatile
 14044  003242                     i2l368:
 14045                           
 14046                           ;uart.c: 146: }
 14047                           ;uart.c: 147: return(RCREG);
 14048  003242  50AE               	movf	4014,w,c	;volatile
 14049  003244  0012               	return	
 14050  003246                     __end_of_recebe_dado_uart:
 14051                           	opt stack 0
 14052                           tosu	equ	0xFFF
 14053                           tosh	equ	0xFFE
 14054                           tosl	equ	0xFFD
 14055                           pclatu	equ	0xFFB
 14056                           pclath	equ	0xFFA
 14057                           pcl	equ	0xFF9
 14058                           tblptru	equ	0xFF8
 14059                           tblptrh	equ	0xFF7
 14060                           tblptrl	equ	0xFF6
 14061                           tablat	equ	0xFF5
 14062                           prodh	equ	0xFF4
 14063                           prodl	equ	0xFF3
 14064                           intcon	equ	0xFF2
 14065                           intcon2	equ	0xFF1
 14066                           intcon3	equ	0xFF0
 14067                           indf0	equ	0xFEF
 14068                           postinc0	equ	0xFEE
 14069                           fsr0h	equ	0xFEA
 14070                           fsr0l	equ	0xFE9
 14071                           wreg	equ	0xFE8
 14072                           indf1	equ	0xFE7
 14073                           postinc1	equ	0xFE6
 14074                           postdec1	equ	0xFE5
 14075                           fsr1h	equ	0xFE2
 14076                           fsr1l	equ	0xFE1
 14077                           indf2	equ	0xFDF
 14078                           postinc2	equ	0xFDE
 14079                           postdec2	equ	0xFDD
 14080                           plusw2	equ	0xFDB
 14081                           fsr2h	equ	0xFDA
 14082                           fsr2l	equ	0xFD9
 14083                           status	equ	0xFD8
 14084                           tosu	equ	0xFFF
 14085                           tosh	equ	0xFFE
 14086                           tosl	equ	0xFFD
 14087                           pclatu	equ	0xFFB
 14088                           pclath	equ	0xFFA
 14089                           pcl	equ	0xFF9
 14090                           tblptru	equ	0xFF8
 14091                           tblptrh	equ	0xFF7
 14092                           tblptrl	equ	0xFF6
 14093                           tablat	equ	0xFF5
 14094                           prodh	equ	0xFF4
 14095                           prodl	equ	0xFF3
 14096                           intcon	equ	0xFF2
 14097                           intcon2	equ	0xFF1
 14098                           intcon3	equ	0xFF0
 14099                           indf0	equ	0xFEF
 14100                           postinc0	equ	0xFEE
 14101                           fsr0h	equ	0xFEA
 14102                           fsr0l	equ	0xFE9
 14103                           wreg	equ	0xFE8
 14104                           indf1	equ	0xFE7
 14105                           postinc1	equ	0xFE6
 14106                           postdec1	equ	0xFE5
 14107                           fsr1h	equ	0xFE2
 14108                           fsr1l	equ	0xFE1
 14109                           indf2	equ	0xFDF
 14110                           postinc2	equ	0xFDE
 14111                           postdec2	equ	0xFDD
 14112                           plusw2	equ	0xFDB
 14113                           fsr2h	equ	0xFDA
 14114                           fsr2l	equ	0xFD9
 14115                           status	equ	0xFD8
 14116                           
 14117                           	psect	text62
 14118  000000                     __ptext62:
 14119                           	opt stack 0
 14120                           tosu	equ	0xFFF
 14121                           tosh	equ	0xFFE
 14122                           tosl	equ	0xFFD
 14123                           pclatu	equ	0xFFB
 14124                           pclath	equ	0xFFA
 14125                           pcl	equ	0xFF9
 14126                           tblptru	equ	0xFF8
 14127                           tblptrh	equ	0xFF7
 14128                           tblptrl	equ	0xFF6
 14129                           tablat	equ	0xFF5
 14130                           prodh	equ	0xFF4
 14131                           prodl	equ	0xFF3
 14132                           intcon	equ	0xFF2
 14133                           intcon2	equ	0xFF1
 14134                           intcon3	equ	0xFF0
 14135                           indf0	equ	0xFEF
 14136                           postinc0	equ	0xFEE
 14137                           fsr0h	equ	0xFEA
 14138                           fsr0l	equ	0xFE9
 14139                           wreg	equ	0xFE8
 14140                           indf1	equ	0xFE7
 14141                           postinc1	equ	0xFE6
 14142                           postdec1	equ	0xFE5
 14143                           fsr1h	equ	0xFE2
 14144                           fsr1l	equ	0xFE1
 14145                           indf2	equ	0xFDF
 14146                           postinc2	equ	0xFDE
 14147                           postdec2	equ	0xFDD
 14148                           plusw2	equ	0xFDB
 14149                           fsr2h	equ	0xFDA
 14150                           fsr2l	equ	0xFD9
 14151                           status	equ	0xFD8
 14152                           
 14153                           	psect	rparam
 14154  0000                     tosu	equ	0xFFF
 14155                           tosh	equ	0xFFE
 14156                           tosl	equ	0xFFD
 14157                           pclatu	equ	0xFFB
 14158                           pclath	equ	0xFFA
 14159                           pcl	equ	0xFF9
 14160                           tblptru	equ	0xFF8
 14161                           tblptrh	equ	0xFF7
 14162                           tblptrl	equ	0xFF6
 14163                           tablat	equ	0xFF5
 14164                           prodh	equ	0xFF4
 14165                           prodl	equ	0xFF3
 14166                           intcon	equ	0xFF2
 14167                           intcon2	equ	0xFF1
 14168                           intcon3	equ	0xFF0
 14169                           indf0	equ	0xFEF
 14170                           postinc0	equ	0xFEE
 14171                           fsr0h	equ	0xFEA
 14172                           fsr0l	equ	0xFE9
 14173                           wreg	equ	0xFE8
 14174                           indf1	equ	0xFE7
 14175                           postinc1	equ	0xFE6
 14176                           postdec1	equ	0xFE5
 14177                           fsr1h	equ	0xFE2
 14178                           fsr1l	equ	0xFE1
 14179                           indf2	equ	0xFDF
 14180                           postinc2	equ	0xFDE
 14181                           postdec2	equ	0xFDD
 14182                           plusw2	equ	0xFDB
 14183                           fsr2h	equ	0xFDA
 14184                           fsr2l	equ	0xFD9
 14185                           status	equ	0xFD8
 14186                           
 14187                           	psect	temp
 14188  000046                     btemp:
 14189                           	opt stack 0
 14190  000046                     	ds	1
 14191  0000                     int$flags	set	btemp
 14192  0000                     wtemp6	set	btemp+1
 14193                           tosu	equ	0xFFF
 14194                           tosh	equ	0xFFE
 14195                           tosl	equ	0xFFD
 14196                           pclatu	equ	0xFFB
 14197                           pclath	equ	0xFFA
 14198                           pcl	equ	0xFF9
 14199                           tblptru	equ	0xFF8
 14200                           tblptrh	equ	0xFF7
 14201                           tblptrl	equ	0xFF6
 14202                           tablat	equ	0xFF5
 14203                           prodh	equ	0xFF4
 14204                           prodl	equ	0xFF3
 14205                           intcon	equ	0xFF2
 14206                           intcon2	equ	0xFF1
 14207                           intcon3	equ	0xFF0
 14208                           indf0	equ	0xFEF
 14209                           postinc0	equ	0xFEE
 14210                           fsr0h	equ	0xFEA
 14211                           fsr0l	equ	0xFE9
 14212                           wreg	equ	0xFE8
 14213                           indf1	equ	0xFE7
 14214                           postinc1	equ	0xFE6
 14215                           postdec1	equ	0xFE5
 14216                           fsr1h	equ	0xFE2
 14217                           fsr1l	equ	0xFE1
 14218                           indf2	equ	0xFDF
 14219                           postinc2	equ	0xFDE
 14220                           postdec2	equ	0xFDD
 14221                           plusw2	equ	0xFDB
 14222                           fsr2h	equ	0xFDA
 14223                           fsr2l	equ	0xFD9
 14224                           status	equ	0xFD8


Data Sizes:
    Strings     195
    Constant    213
    Data        24
    BSS         652
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     44      69
    BANK0           160    117     121
    BANK1           256    108     243
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    pf_open@path	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_9(CODE[10]), 

    rd	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_lcd@texto(COMRAM[7]), escreve_inteiro_uart@valor_final(COMRAM[7]), 

    pf_readdir@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    pf_opendir@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    pf_write@bw	PTR unsigned int  size(2) Largest target is 2
		 -> SDCard@br(BANK1[2]), 

    pf_write@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK1[42]), 

    pf_write@buff	PTR const void  size(2) Largest target is 8
		 -> STR_10(CODE[8]), 

    pf_write@p	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_10(CODE[8]), 

    pf_read$2216	PTR unsigned char  size(2) Largest target is 32
		 -> NULL(NULL[0]), data_buffer_32(BANK1[32]), 

    pf_read@br	PTR unsigned int  size(2) Largest target is 2
		 -> SDCard@br(BANK1[2]), 

    pf_read@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK1[42]), 

    pf_read@buff	PTR void  size(2) Largest target is 32
		 -> data_buffer_32(BANK1[32]), 

    pf_read@rbuff	PTR unsigned char  size(2) Largest target is 32
		 -> data_buffer_32(BANK1[32]), 

    pf_open@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK1[42]), 

    dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    pf_mount@fs	PTR struct . size(2) Largest target is 42
		 -> SDCard@fs(BANK1[42]), 

    check_fs@buf	PTR unsigned char  size(2) Largest target is 36
		 -> pf_mount@buf(BANK0[36]), 

    follow_path@dir	PTR unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK1[32]), 

    follow_path@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    follow_path@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK1[16]), 

    follow_path@path	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_18(CODE[10]), 

    get_fileinfo@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    create_name@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> follow_path@path(BANK0[2]), 

    create_name@p	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_18(CODE[10]), 

    create_name@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    create_name@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK1[16]), 

    create_name@sfn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    dir_read@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    dir_find@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    dir_find@dir	PTR unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK1[32]), 

    dir_find@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK1[16]), 

    dir_next@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    dir_next@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK1[16]), 

    dir_next@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK1[42]), 

    S1905$fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    dir_rewind@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    dir_rewind@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK1[16]), 

    dir_rewind@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK1[42]), 

    get_clust@dir	PTR unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK1[32]), 

    get_clust@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK1[42]), 

    clust2sect@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK1[42]), 

    FatFs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK1[42]), 

    get_fat@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK1[42]), 

    mem_cmp@src	PTR const void  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    mem_cmp@s	PTR const unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    mem_cmp@dst	PTR const void  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK1[32]), 

    mem_cmp@d	PTR const unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK1[32]), 

    mem_set@dst	PTR void  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    mem_set@d	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    disk_writep@wr	PTR const unsigned char  size(3) Largest target is 32767
		 -> ROM(CODE[32767]), STR_10(CODE[8]), 

    disk_readp@rd	PTR unsigned char  size(2) Largest target is 36
		 -> pf_readdir@dir(COMRAM[32]), pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK1[32]), pf_mount@buf(BANK0[36]), 
		 -> NULL(NULL[0]), get_fat@buf(BANK0[4]), data_buffer_32(BANK1[32]), 

    escreve_frase_ram_lcd@buffer	PTR unsigned char  size(2) Largest target is 17
		 -> STR_17(CODE[9]), STR_16(CODE[14]), STR_15(CODE[14]), STR_14(CODE[12]), 
		 -> escreve_inteiro_lcd@texto(COMRAM[7]), STR_13(CODE[14]), STR_12(CODE[13]), STR_11(CODE[17]), 
		 -> STR_8(CODE[17]), STR_7(CODE[15]), STR_6(CODE[14]), STR_5(CODE[14]), 
		 -> mensagem_inicial@msg_dois(BANK0[17]), mensagem_inicial@msg_linha_um(BANK0[17]), leitura_chave@pos_ignicao_on(COMRAM[17]), leitura_chave@pos_ignicao_crank(COMRAM[17]), 
		 -> leitura_chave@pos_ignicao_off(COMRAM[17]), STR_3(CODE[17]), STR_2(CODE[10]), STR_1(CODE[11]), 

    p_tarefas	PTR FTN()void [2] size(2) Largest target is 1
		 -> SDCard(), acende_led4(), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_lcd@texto(COMRAM[7]), escreve_inteiro_uart@valor_final(COMRAM[7]), 


Critical Paths under _main in COMRAM

    _mensagem_inicial->_posicao_cursor_lcd
    _init_lcd->_escreve_cmd_lcd
    _config_timer_zero->_write_timer_zero
    _inicializa_uart->_configura_baudrate_uart
    _configura_baudrate_uart->___aldiv
    _inicializa_SPI->_posicao_cursor_lcd
    _acende_led4->_shrc_apaga_bit
    _acende_led4->_shrc_seta_bit
    _pf_write->_clust2sect
    _pf_write->_disk_writep
    _disk_writep->_command
    _pf_read->_clust2sect
    _pf_read->_disk_readp
    _follow_path->_create_name
    _dir_find->_disk_readp
    _dir_rewind->_clust2sect
    _dir_next->_clust2sect
    _get_fat->_disk_readp
    _clust2sect->___lmul
    _create_name->_mem_set
    _disk_initialize->_reset
    _reset->_command
    _escreve_cmd_lcd->_delay
    _check_fs->_disk_readp
    _disk_readp->_command
    _response->_recebe_dado_SPI
    _proceed->_WriteSPI_
    _dummy_clocks->_WriteSPI_
    _command->_WriteSPI_
    _posicao_cursor_lcd->_endereco_cursor_lcd
    _endereco_cursor_lcd->_delay
    _escreve_frase_ram_lcd->_escreve_caractere_lcd
    _escreve_caractere_lcd->_delay
    _WriteSPI_->_shrc_seta_bit
    _controle_shrc->_envia_dados_shrc

Critical Paths under _isr in COMRAM

    _isr->i2_write_timer_zero

Critical Paths under _main in BANK0

    _main->_escalonador
    _inicializa_uart->_configura_baudrate_uart
    _SDCard->_pf_open
    _pf_write->_get_fat
    _pf_read->_get_fat
    _pf_open->_follow_path
    _follow_path->_dir_find
    _dir_find->_dir_next
    _dir_rewind->_clust2sect
    _dir_next->_get_fat
    _get_fat->_disk_readp
    _pf_mount->_check_fs
    _check_fs->_disk_readp

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _escalonador->_SDCard
    _SDCard->_pf_open

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  218854
                      _controle_shrc
                        _escalonador
                     _inicializa_SPI
                    _inicializa_shrc
                 _inicializa_tarefas
                    _inicializa_uart
                      _init_hardware
                           _init_lcd
                   _mensagem_inicial
 ---------------------------------------------------------------------------------
 (1) _mensagem_inicial                                    36    36      0    5203
                                             31 COMRAM     2     2      0
                                              0 BANK0     34    34      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0     613
                                             28 COMRAM     1     1      0
                              _delay
                    _escreve_cmd_lcd
 ---------------------------------------------------------------------------------
 (1) _init_hardware                                        0     0      0     195
                  _config_timer_dois
                  _config_timer_zero
                     _inicializa_adc
                     _init_interrupt
                     _init_oscilador
                         _init_ports
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_oscilador                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _inicializa_adc                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _config_timer_zero                                    0     0      0     195
                   _write_timer_zero
 ---------------------------------------------------------------------------------
 (3) _write_timer_zero                                     4     2      2     195
                                             25 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _config_timer_dois                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_uart                                      0     0      0    1118
            _configura_baudrate_uart
 ---------------------------------------------------------------------------------
 (2) _configura_baudrate_uart                             14    10      4    1118
                                             39 COMRAM     4     0      4
                                              0 BANK0     10    10      0
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     805
                                             25 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _inicializa_tarefas                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_shrc                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_SPI                                       3     1      2    5427
                                             31 COMRAM     3     1      2
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _escalonador                                          3     3      0  206196
                                            114 BANK0      3     3      0
                             _SDCard *
                        _acende_led4 *
 ---------------------------------------------------------------------------------
 (2) _acende_led4                                          0     0      0      53
                     _shrc_apaga_bit
                      _shrc_seta_bit
 ---------------------------------------------------------------------------------
 (3) _shrc_apaga_bit                                       3     3      0      22
                                             25 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _SDCard                                              45    45      0  205920
                                             63 BANK1     45    45      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                           _pf_mount
                            _pf_open
                            _pf_read
                           _pf_write
                 _posicao_cursor_lcd
                            _proceed
                           _readover
 ---------------------------------------------------------------------------------
 (3) _readover                                             2     0      2      98
                                             25 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _pf_write                                            33    27      6   35864
                                             58 BANK0     33    27      6
                         _clust2sect
                        _disk_writep
                            _get_fat
 ---------------------------------------------------------------------------------
 (4) _disk_writep                                         17    10      7   13322
                                             39 COMRAM     4     4      0
                                              0 BANK0     12     5      7
                          _WriteSPI_
                            _command
                       _dummy_clocks
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (3) _pf_read                                             36    30      6   40179
                                             58 BANK0     36    30      6
                         _clust2sect
                         _disk_readp
                            _get_fat
 ---------------------------------------------------------------------------------
 (3) _pf_open                                             87    85      2   49139
                                             90 BANK0     24    22      2
                                              0 BANK1     63    63      0
                        _follow_path
                          _get_clust
 ---------------------------------------------------------------------------------
 (4) _follow_path                                          7     1      6   47797
                                             83 BANK0      7     1      6
                        _create_name
                           _dir_find
                         _dir_rewind
                          _get_clust
 ---------------------------------------------------------------------------------
 (4) _get_clust                                           18    14      4     471
                                             25 COMRAM    18    14      4
 ---------------------------------------------------------------------------------
 (5) _dir_find                                             8     4      4   42523
                                             75 BANK0      8     4      4
                           _dir_next
                         _dir_rewind
                         _disk_readp
                            _mem_cmp
 ---------------------------------------------------------------------------------
 (6) _mem_cmp                                             15     9      6     468
                                             25 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (5) _dir_rewind                                          16    14      2    2027
                                              5 BANK0     16    14      2
                         _clust2sect
 ---------------------------------------------------------------------------------
 (6) _dir_next                                            17    15      2   21523
                                             58 BANK0     17    15      2
                         _clust2sect
                            _get_fat
 ---------------------------------------------------------------------------------
 (4) _get_fat                                             40    36      4   19437
                                             18 BANK0     40    36      4
                         _disk_readp
 ---------------------------------------------------------------------------------
 (4) _clust2sect                                          11     7      4    1187
                                             37 COMRAM     6     2      4
                                              0 BANK0      5     5      0
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) _create_name                                         20    16      4    1682
                                             33 COMRAM    11     7      4
                                              0 BANK0      9     9      0
                            _mem_set
 ---------------------------------------------------------------------------------
 (6) _mem_set                                              8     2      6     400
                                             25 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (3) _pf_mount                                            77    75      2   74653
                                             28 BANK0     77    75      2
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                         _disk_readp
 ---------------------------------------------------------------------------------
 (4) _disk_initialize                                     10    10      0   34638
                                              0 BANK0     10    10      0
                            _command
                       _dummy_clocks
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                              _reset
                           _response
 ---------------------------------------------------------------------------------
 (5) _reset                                                5     5      0   16954
                                             39 COMRAM     5     5      0
                            _command
                       _dummy_clocks
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (2) _escreve_cmd_lcd                                      1     1      0     477
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _check_fs                                            10     4      6   18577
                                             18 BANK0     10     4      6
                         _disk_readp
 ---------------------------------------------------------------------------------
 (5) _disk_readp                                          25    15     10   17845
                                             39 COMRAM     4     4      0
                                              0 BANK0     18     8     10
                            _command
                       _dummy_clocks
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (6) _response                                             1     1      0      37
                                             26 COMRAM     1     1      0
                    _recebe_dado_SPI
 ---------------------------------------------------------------------------------
 (7) _recebe_dado_SPI                                      1     1      0       3
                                             25 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _proceed                                              0     0      0     167
                          _WriteSPI_
 ---------------------------------------------------------------------------------
 (6) _dummy_clocks                                         5     5      0    4881
                                             32 COMRAM     5     5      0
                          _WriteSPI_
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (6) _command                                              7     2      5    7115
                                             32 COMRAM     7     2      5
                          _WriteSPI_
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (2) _posicao_cursor_lcd                                   3     2      1    2397
                                             28 COMRAM     3     2      1
                _endereco_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _endereco_cursor_lcd                                  1     1      0     353
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _escreve_frase_ram_lcd                                2     0      2    2249
                                             28 COMRAM     2     0      2
              _escreve_caractere_lcd
 ---------------------------------------------------------------------------------
 (3) _escreve_caractere_lcd                                1     1      0     384
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                2     2      0     136
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _WriteSPI_                                            4     4      0     167
                                             28 COMRAM     4     4      0
                      _controle_shrc
                      _shrc_seta_bit
 ---------------------------------------------------------------------------------
 (3) _shrc_seta_bit                                        3     3      0      31
                                             25 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) _controle_shrc                                        0     0      0     102
                   _ativa_latch_shrc
                   _envia_dados_shrc
 ---------------------------------------------------------------------------------
 (6) _envia_dados_shrc                                     2     2      0     102
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _ativa_latch_shrc                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     576
                                             25 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     564
                                             25 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (13) _isr                                                21    21      0     183
                                              4 COMRAM    21    21      0
                   _recebe_dado_uart
                 i2_write_timer_zero
 ---------------------------------------------------------------------------------
 (14) i2_write_timer_zero                                  4     2      2      93
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (14) _recebe_dado_uart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _controle_shrc
     _ativa_latch_shrc
     _envia_dados_shrc
   _escalonador
     _SDCard *
       _escreve_cmd_lcd
         _delay
       _escreve_frase_ram_lcd
         _escreve_caractere_lcd
           _delay
       _pf_mount
         ___lldiv
         ___lmul
         _check_fs
           _disk_readp
             _command
               _WriteSPI_
                 _controle_shrc
                   _ativa_latch_shrc
                   _envia_dados_shrc
                 _shrc_seta_bit
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
             _dummy_clocks
               _WriteSPI_
                 _controle_shrc
                   _ativa_latch_shrc
                   _envia_dados_shrc
                 _shrc_seta_bit
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
             _proceed
               _WriteSPI_
                 _controle_shrc
                   _ativa_latch_shrc
                   _envia_dados_shrc
                 _shrc_seta_bit
             _response
               _recebe_dado_SPI
         _disk_initialize
           _command
             _WriteSPI_
               _controle_shrc
                 _ativa_latch_shrc
                 _envia_dados_shrc
               _shrc_seta_bit
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
           _dummy_clocks
             _WriteSPI_
               _controle_shrc
                 _ativa_latch_shrc
                 _envia_dados_shrc
               _shrc_seta_bit
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
           _escreve_cmd_lcd
             _delay
           _escreve_frase_ram_lcd
             _escreve_caractere_lcd
               _delay
           _posicao_cursor_lcd
             _endereco_cursor_lcd
               _delay
           _proceed
             _WriteSPI_
               _controle_shrc
                 _ativa_latch_shrc
                 _envia_dados_shrc
               _shrc_seta_bit
           _reset
             _command
               _WriteSPI_
                 _controle_shrc
                   _ativa_latch_shrc
                   _envia_dados_shrc
                 _shrc_seta_bit
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
             _dummy_clocks
               _WriteSPI_
                 _controle_shrc
                   _ativa_latch_shrc
                   _envia_dados_shrc
                 _shrc_seta_bit
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _proceed
               _WriteSPI_
                 _controle_shrc
                   _ativa_latch_shrc
                   _envia_dados_shrc
                 _shrc_seta_bit
             _response
               _recebe_dado_SPI
           _response
             _recebe_dado_SPI
         _disk_readp
           _command
             _WriteSPI_
               _controle_shrc
                 _ativa_latch_shrc
                 _envia_dados_shrc
               _shrc_seta_bit
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
           _dummy_clocks
             _WriteSPI_
               _controle_shrc
                 _ativa_latch_shrc
                 _envia_dados_shrc
               _shrc_seta_bit
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
           _proceed
             _WriteSPI_
               _controle_shrc
                 _ativa_latch_shrc
                 _envia_dados_shrc
               _shrc_seta_bit
           _response
             _recebe_dado_SPI
       _pf_open
         _follow_path
           _create_name
             _mem_set
           _dir_find
             _dir_next
               _clust2sect
                 ___lmul
               _get_fat
                 _disk_readp
                   _command
                     _WriteSPI_
                       _controle_shrc
                         _ativa_latch_shrc
                         _envia_dados_shrc
                       _shrc_seta_bit
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                   _dummy_clocks
                     _WriteSPI_
                       _controle_shrc
                         _ativa_latch_shrc
                         _envia_dados_shrc
                       _shrc_seta_bit
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                   _proceed
                     _WriteSPI_
                       _controle_shrc
                         _ativa_latch_shrc
                         _envia_dados_shrc
                       _shrc_seta_bit
                   _response
                     _recebe_dado_SPI
             _dir_rewind
               _clust2sect
                 ___lmul
             _disk_readp
               _command
                 _WriteSPI_
                   _controle_shrc
                     _ativa_latch_shrc
                     _envia_dados_shrc
                   _shrc_seta_bit
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
               _dummy_clocks
                 _WriteSPI_
                   _controle_shrc
                     _ativa_latch_shrc
                     _envia_dados_shrc
                   _shrc_seta_bit
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
               _proceed
                 _WriteSPI_
                   _controle_shrc
                     _ativa_latch_shrc
                     _envia_dados_shrc
                   _shrc_seta_bit
               _response
                 _recebe_dado_SPI
             _mem_cmp
           _dir_rewind
             _clust2sect
               ___lmul
           _get_clust
         _get_clust
       _pf_read
         _clust2sect
           ___lmul
         _disk_readp
           _command
             _WriteSPI_
               _controle_shrc
                 _ativa_latch_shrc
                 _envia_dados_shrc
               _shrc_seta_bit
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
           _dummy_clocks
             _WriteSPI_
               _controle_shrc
                 _ativa_latch_shrc
                 _envia_dados_shrc
               _shrc_seta_bit
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
           _proceed
             _WriteSPI_
               _controle_shrc
                 _ativa_latch_shrc
                 _envia_dados_shrc
               _shrc_seta_bit
           _response
             _recebe_dado_SPI
         _get_fat
           _disk_readp
             _command
               _WriteSPI_
                 _controle_shrc
                   _ativa_latch_shrc
                   _envia_dados_shrc
                 _shrc_seta_bit
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
             _dummy_clocks
               _WriteSPI_
                 _controle_shrc
                   _ativa_latch_shrc
                   _envia_dados_shrc
                 _shrc_seta_bit
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
             _proceed
               _WriteSPI_
                 _controle_shrc
                   _ativa_latch_shrc
                   _envia_dados_shrc
                 _shrc_seta_bit
             _response
               _recebe_dado_SPI
       _pf_write
         _clust2sect
           ___lmul
         _disk_writep
           _WriteSPI_
             _controle_shrc
               _ativa_latch_shrc
               _envia_dados_shrc
             _shrc_seta_bit
           _command
             _WriteSPI_
               _controle_shrc
                 _ativa_latch_shrc
                 _envia_dados_shrc
               _shrc_seta_bit
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
           _dummy_clocks
             _WriteSPI_
               _controle_shrc
                 _ativa_latch_shrc
                 _envia_dados_shrc
               _shrc_seta_bit
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
           _proceed
             _WriteSPI_
               _controle_shrc
                 _ativa_latch_shrc
                 _envia_dados_shrc
               _shrc_seta_bit
           _response
             _recebe_dado_SPI
         _get_fat
           _disk_readp
             _command
               _WriteSPI_
                 _controle_shrc
                   _ativa_latch_shrc
                   _envia_dados_shrc
                 _shrc_seta_bit
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
             _dummy_clocks
               _WriteSPI_
                 _controle_shrc
                   _ativa_latch_shrc
                   _envia_dados_shrc
                 _shrc_seta_bit
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
             _proceed
               _WriteSPI_
                 _controle_shrc
                   _ativa_latch_shrc
                   _envia_dados_shrc
                 _shrc_seta_bit
             _response
               _recebe_dado_SPI
       _posicao_cursor_lcd
         _endereco_cursor_lcd
           _delay
       _proceed
         _WriteSPI_
           _controle_shrc
             _ativa_latch_shrc
             _envia_dados_shrc
           _shrc_seta_bit
       _readover
     _acende_led4 *
       _shrc_apaga_bit
       _shrc_seta_bit
   _inicializa_SPI
     _escreve_cmd_lcd
       _delay
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay
   _inicializa_shrc
   _inicializa_tarefas
   _inicializa_uart
     _configura_baudrate_uart
       ___aldiv
   _init_hardware
     _config_timer_dois
     _config_timer_zero
       _write_timer_zero
     _inicializa_adc
     _init_interrupt
     _init_oscilador
     _init_ports
   _init_lcd
     _delay
     _escreve_cmd_lcd
       _delay
   _mensagem_inicial
     _escreve_cmd_lcd
       _delay
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay

 _isr (ROOT)
   _recebe_dado_uart
   i2_write_timer_zero

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     200      21       25.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     6C      F3       7       94.9%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     75      79       5       75.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2C      45       1       73.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1B1      20        0.0%
DATA                 0      0     3B1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Jan 19 19:47:22 2022

        __end_of_mensagem_inicial 2C1E                       get_fat@clst 0072  
                               _s 0041                      create_name@c 0068  
                    create_name@d 0060                      create_name@i 0067  
                    create_name@p 0061            __size_of_controle_shrc 000C  
                     _SSPSTATbits 000FC7                  ??_init_interrupt 001A  
                              l16 2F6A                                l41 2FFC  
                              l17 2F5C                                l42 2FCC  
                              l43 2FD4                                l44 2FD6  
                              l94 2B4C                                l95 2B42  
                              l97 2B46                                l98 2B48  
                     __CFG_BOR$ON 000000                                _rd 0039  
                   pf_mount@bsect 00C0                       __CFG_BORV$3 000000  
                   pf_mount@mclst 00BC                     pf_mount@fsize 00C4  
                    ?_escalonador 0001                     create_name@dj 0022  
                   pf_mount@tsect 00B8                     create_name@ni 0063  
                   create_name@si 0064                  ?_inicializa_shrc 0001  
                ?_inicializa_uart 0001                               l100 2B70  
                             l101 2B62                               l102 2B80  
                             l103 2B68                               l104 2B6C  
                             l117 2FB2                               l109 321A  
                             l118 2F92                               l500 2856  
                             l502 28E8                               l342 2176  
                             l600 2A74                               l601 2A7C  
                             l610 2D84                               l602 2A7E  
                             l522 1B2A                               l530 1B26  
                             l611 2D8C                               l523 1B28  
                             l620 2DC2                               l612 2D8E  
                             l524 1AA6                               l508 302C  
                             l621 2DCA                               l613 2D96  
                             l509 303A                               l622 2DCC  
                             l614 2D98                               l630 2D1A  
                             l526 1AC2                               l615 2DAC  
                             l631 2D28                               l543 1B2C  
                             l640 2C38                               l616 2DAE  
                             l632 2D36                               l528 1AC4  
                             l641 2C3A                               l617 2DB6  
                             l609 2D82                               l633 2D44  
                             l801 1FBA                               l650 2C76  
                             l642 2C42                               l618 2DB8  
                             l626 2D6A                               l651 2C78  
                             l643 2C44                               l619 2DC0  
                             l627 2D4A                               l803 1FF4  
                             l547 1B34                               l652 2C80  
                             l644 2C4C                               l628 2D0E  
                             l804 1FFA                               l556 30C2  
                             l653 2C82                               l645 2C4E  
                             l629 2D66                               l725 29B0  
                             l805 204C                               l646 2C62  
                             l638 2C2E                               l590 2A36  
                             l726 29EA                               l742 16EA  
                             l734 1608                               l647 2C64  
                             l639 2C30                               l671 2F12  
                             l591 2A3E                               l648 2C6C  
                             l672 2EEA                               l592 2A40  
                             l736 1768                               l912 1E30  
                             l840 0ED4                               l577 30D6  
                             l649 2C6E                               l761 134A  
                             l593 2A48                               l737 1658  
                             l825 2CA8                               l762 1332  
                             l594 2A4A                               l738 1684  
                             l818 3094                               l850 0D9A  
                             l579 30E4                               l771 141C  
                             l595 2A5E                               l587 2A2A  
                             l819 3084                               l843 0CA8  
                             l780 14A2                               l772 1408  
                             l756 13CE                               l764 1390  
                             l596 2A60                               l588 2A2C  
                             l748 17AC                               l916 1EE2  
                             l836 0EB8                               l781 148A  
                             l757 12F0                               l597 2A68  
                             l589 2A34                               l749 17EA  
                             l925 1EBA                               l917 1E8C  
                             l845 0CC8                               l837 0B50  
                             l790 155A                               l774 1462  
                             l766 13AC                               l598 2A6A  
                             l854 27E2                               l838 0BE6  
                             l783 14E4                               l767 13A8  
                             l759 1318                               l599 2A72  
                             l927 1ECA                               l847 0CE6  
                             l951 24EA                               l943 23E0  
                             l792 1592                               l784 14B4  
                             l960 1BAC                               l848 0CF4  
                             l872 2274                               l864 21F6  
                             l944 23DA                               l793 157E  
                             l961 1C1C                               l794 157A  
                             l786 150E                               l962 1C8E  
                             l970 0130                               l882 18C0  
                             l874 2298                               l890 2508  
                             l858 272C                               l954 24BE  
                             l946 240A                               l787 14F6  
                             l971 013C                               l947 244E  
                             l796 15A8                               l980 0550  
                             l972 0146                               l868 222E  
                             l973 017C                               l965 002A  
                             l885 19C0                               l877 1862  
                             l958 1B6E                               l974 021C  
                             l886 194E                               l983 05A0  
                             l975 036A                               l887 1972  
                             l895 2592                               l799 1F74  
                             l976 0464                               l968 0096  
                             l896 25D2                               l977 048C  
                             l978 04A2                               l986 1CA8  
                             l994 0F16                               l979 04AC  
                             l988 1CEC                               l996 0F2A  
                             l989 1CFA                               l998 126C  
                             l999 0FB6                               _PCL 000FF9  
                             _PR2 000FCB                       get_clust@fs 0026  
                ??_init_oscilador 001A                               _isr 0008  
                             _txt 0130                               prod 000FF3  
                             tosl 000FFD                               wreg 000FE8  
                    __CFG_FOSC$HS 000000                      disk_readp@rd 0060  
                  create_name@cvt 60E7         __size_of_write_timer_zero 0012  
                  create_name@sfn 0065                      __CFG_LVP$OFF 000000  
         ??_escreve_frase_ram_lcd 001F                      __CFG_WDT$OFF 000000  
                            l1000 115E                              l1001 10D8  
                            l1010 11C4                              l1002 1066  
                            l1011 1232                              l1003 1096  
                            l1004 10BC                              l1005 112A  
                            l1021 071E                              l1006 11AA  
                            l1030 091A                              l1031 0996  
                            l1015 0674                              l1008 11BC  
                            l1032 09F4                              l1024 07AA  
                            l1033 0A42                              l1025 09A8  
                            l1017 0688                              l1034 0AF8  
                            l1026 08C8                              l1018 06F2  
                            l1035 0AE6                              l1027 0856  
                            l1019 06DC                              l1028 0886  
                            l1140 2692                              l1132 260A  
                            l1029 08AC                              l1141 26A8  
                            l1133 2622                              l1135 2650  
                            l1136 2644                              l1139 2684  
                            l1084 2E4E                              l1085 2E62  
                            l1441 2AD4                              l1442 2AC8  
                            l1445 2B08                              l1446 2B16  
            __size_of_acende_led4 0024                              l7122 08AC  
                            l6406 3084                              l6282 14B4  
                            l7226 10BC                              l6276 148A  
                            l7432 284E                              l6484 194E  
                            l6812 1FAE                              ?_isr 0001  
                            l6910 1C1C                              l6568 2A0A  
                            l6728 16A6                              l6746 170C  
                            l5980 30DC                              l5974 30CE  
                            l6918 1C8E                              l6992 0464  
                            l6998 048C             _escreve_caractere_lcd 2C1E  
                            STR_1 624C                              STR_2 6261  
                            STR_3 61CD                              STR_4 627C  
                            STR_5 6217                              STR_6 6209  
                            STR_7 61DE                              STR_8 61BC  
                            STR_9 6257                    timer_dois@flag 0043  
                            _BRGH 007D62                              _CREN 007D5C  
                            _T0IF 007F92                              _LATB 000F8A  
                            _PIE1 000F9D                              u7020 185E  
                            u7200 2AA0                              u4660 2AD8  
                            u6340 30EA                              u7220 2A0A  
                            _RCIF 007CF5                              u8040 0800  
                            u7065 18CC                              u6364 3162  
                            u6540 2F0A                              u7500 16A6  
                            u7340 25E8                              u4684 3144  
                            u6365 315E                              u8045 07F6  
                            u4685 3140                              u6550 2F32  
                            u8310 2654                              u6615 1298  
                            u7255 271E                              u7520 170C  
                            u6800 0B1E                              u7280 256E  
                            u7600 2002                              u6730 151A  
                            u7450 1F1E                              u6810 0B3E  
                            u7290 2570                              u6547 2F00  
                            u7451 1F1A                              u7275 2546  
                            u9107 2C0A                              u7700 1BA8  
                            u7460 1F20                              u7380 1E72  
                            u6900 0DDC                              u6557 2F28  
                            u9117 290E                              u6830 0B8E  
                            u8190 1010                              u9207 1722  
                            u9127 292A                              u9217 175A  
                            u6905 0DD2                              u6825 0B7A  
                            u8345 2070                              u9137 2946  
                            u6690 1470                              u8450 1B32  
                            u9307 159C                              u6675 13E0  
                            u9227 179E                              u8195 1006  
                            u9147 1F8C                              u8355 20BC  
                            u6940 2CB8                              u8460 30B0  
                            u8540 2BB2                              u9317 2FA6  
                            u9237 17B8                              u9157 201C  
                            u7565 1F48                              u6950 2CF6  
                            u8470 30B2                              u8550 2BCA  
                    get_clust@dir 001A                              u9327 2FDE  
                            u9247 1804                              u9167 15D6  
                            u8375 2100                              u8528 28A6  
                            u9337 2FE6                              u9257 12C0  
                            u9177 1622                              u8529 28BA  
                            u8385 214A                              u6970 21F2  
                            u9347 2FEE                              u9267 1308  
                            u9187 1644                              u7915 05D4  
                            u7860 0476                              u9357 2FF6  
                            u9277 1360                              u9197 16AE  
                            u7845 0382                              u6885 0CD4  
                            u7950 1CF6                              u9367 31EE  
                            u9287 1432                              u7880 049E  
                            u9377 31F6                              u9297 1530  
                            _TMR2 000FCC                              _SPEN 007D5F  
                            _TRMT 007D61                              _TXEN 007D65  
                            _SYNC 007D64                              _dado 0045  
                            _flag 003B                              _main 3006  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            indf0 000FEF                              fsr2h 000FDA  
                            fsr0l 000FE9                              indf1 000FE7  
                            indf2 000FDF                              fsr1l 000FE1  
                            fsr2l 000FD9                              btemp 0046  
                            prodh 000FF4                              prodl 000FF3  
                            start 000E                     __CFG_IESO$OFF 000000  
                   disk_readp@arr 01F3                     disk_readp@ptr 006A  
                    disk_writep@i 0067                      disk_writep@j 0069  
                   __CFG_MCLRE$ON 000000                      ?_follow_path 00B3  
                    ___param_bank 000000                   create_name@path 0024  
                           ??_isr 0005          __size_of_recebe_dado_SPI 0012  
__size_of_configura_baudrate_uart 0132                     __CFG_PLLDIV$5 000000  
                 __end_of___aldiv 26BA                             ?_main 0001  
                           STR_10 6274                             STR_11 61BC  
                           STR_12 6233                             STR_13 6225  
                           STR_14 6240                             STR_15 61ED  
                           STR_16 61FB                             STR_17 626B  
                           STR_18 6257                   __end_of___lldiv 2B28  
                           _T0CON 000FD5                             _T2CON 000FCA  
                  _data_buffer_32 014F                             i2l368 3242  
                           i2l490 2358                             i2l492 2378  
                           i2l493 238C                             i2l486 2312  
                           i2l487 2384                             i2l488 232A  
                           _RCREG 000FAE                             _RCSTA 000FAB  
                   get_clust@clst 0028                             _TMR0H 000FD7  
                           _TMR0L 000FD6                             _SPBRG 000FAF  
                   __CFG_USBDIV$1 000000                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
                           _TRISD 000F95                             _TRISE 000F96  
                           _TXREG 000FAD                             _TXSTA 000FAC  
                           _FatFs 0035            __end_ofcreate_name@cvt 6167  
                   __CFG_PWRT$OFF 000000               ___lmul@multiplicand 001E  
      __size_of_config_timer_dois 000C                    __CFG_FCMEN$OFF 000000  
      __size_of_config_timer_zero 001A                   __end_of_get_fat 0EE8  
                 __end_of_command 2EE8                             _delay 30CA  
                _envia_dados_shrc 2FC2                   __end_of_mem_cmp 2D00  
                 __end_of_mem_set 30A6                   __end_of_pf_read 1278  
                 __end_of_pf_open 1DE2          __size_of_escreve_cmd_lcd 008C  
                           _reset 298A                     _controle_shrc 326C  
                           pclath 000FFA                             tablat 000FF5  
                 __end_of_proceed 326C                             plusw2 000FDB  
                           status 000FD8                             wtemp6 0047  
                  disk_readp@buff 006F                     disk_writep@sc 0063  
                   disk_writep@wr 0060                   __initialization 2DDA  
             disk_initialize@buff 0069               disk_initialize@stat 0066  
                    __end_of_main 3040                      clust2sect@fs 002A  
              _inicializa_tarefas 3040                   escalonador@cont 00D4  
                          ??_main 002D               disk_readp@start_add 006B  
                   __activetblptr 000002               ?_inicializa_tarefas 0001  
                 __CFG_CCP2MX$OFF 000000                            ?_delay 0001  
          ?_escreve_caractere_lcd 0001                            _ADCON0 000FC2  
                          _ADCON1 000FC1                    ?_controle_shrc 0001  
                          _ADRESH 000FC4                            _ADRESL 000FC3  
                          ?_reset 0001                            _INT0IE 007F94  
                          _INT0IF 007F91                     ?_dummy_clocks 0001  
                          _PCLATH 000FFA                            i2l5640 2322  
                          _INTCON 000FF2           __size_of_inicializa_SPI 007C  
                          _TMR0IF 007F92                            _TMR2IF 007CF1  
                          _SDCard 19D4          __end_of_recebe_dado_uart 3246  
         __size_of_inicializa_adc 0022                            _SPPCFG 000F63  
                          _SPPCON 000F65                            _SSPBUF 000FC9  
                __end_of_check_fs 1C92              ??_inicializa_tarefas 001A  
            __size_of_create_name 0144          __size_of_disk_initialize 026C  
      __end_of_posicao_cursor_lcd 2D70                  __end_of_dir_find 25EE  
                __end_of_dir_next 19D4            __size_of_init_hardware 001A  
                          _Result 0042                            ___lmul 2E3E  
                       ??___aldiv 0022                    __CFG_STVREN$ON 000000  
            __size_of_disk_writep 0138                         ??___lldiv 0022  
                          _folder 0100                            _estado 0044  
                __end_of_init_lcd 298A                            clear_0 2E02  
                          clear_1 2E14                            clear_2 2E2A  
                __end_of_pf_mount 0646                  __end_of_readover 3282  
                __end_of_pf_write 0B04          configura_baudrate_uart@x 0068  
                     pf_read@buff 009A                       pf_read@clst 00B5  
                     pf_read@sect 00AD                       pf_read@rcnt 00BA  
                       ??_get_fat 0076                         ??_command 0026  
                       ??_mem_cmp 0020                         ??_mem_set 0020  
                       ??_pf_read 00A0                         ??_pf_open 00BC  
            __size_of_escalonador 00A4                 ??_recebe_dado_SPI 001A  
                 acende_led4@flag 003D                  __end_of_response 3254  
                    __mediumconst 60E6                            reset@i 0028  
           write_timer_zero@timer 001C                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                       ??_proceed 0021                  _write_timer_zero 31FE  
                     pf_open@path 00BA         escreve_caractere_lcd@data 001C  
                  ??_dummy_clocks 0021                        __accesstop 0060  
         __end_of__initialization 2E30                   __CFG_PBADEN$OFF 000000  
              __size_of_WriteSPI_ 0044                       pf_mount@buf 0094  
                     pf_mount@fmt 00C8                   disk_readp@count 0068  
                   ___rparam_used 000001                 ??_escreve_cmd_lcd 001C  
                  __pcstackCOMRAM 0001                 ?_ativa_latch_shrc 0001  
     __end_of_endereco_cursor_lcd 2DDA                      __pidataBANK1 31BA  
               ?_mensagem_inicial 0001           _configura_baudrate_uart 205E  
                   __end_of_delay 30EE              __size_of_follow_path 0116  
              ??_ativa_latch_shrc 001A                     __end_of_reset 2A1A  
              ??_mensagem_inicial 0020                       pf_write@btw 009C  
              _tarefa_em_execucao 003E        __end_ofi2_write_timer_zero 3234  
 configura_baudrate_uart@baudrate 0028                   ??_controle_shrc 001C  
                   _init_hardware 316C                __size_of_get_clust 00C8  
                         ??_delay 001A                           ??_reset 0028  
    mensagem_inicial@msg_linha_um 0060                        __pbssBANK0 00D5  
                      __pbssBANK1 0100                    pf_write@remain 00AE  
  __size_of_escreve_frase_ram_lcd 0052     __end_of_escreve_frase_ram_lcd 2F3A  
                         ?_SDCard 0001         escreve_inteiro_uart@F3956 01EC  
           __end_of_shrc_seta_bit 316C                           ?___lmul 001A  
        __end_of_envia_dados_shrc 3006             mensagem_inicial@F4031 6167  
           mensagem_inicial@F4029 6178           __size_of_shrc_apaga_bit 001E  
               ??_disk_initialize 0060                    ___lmul@product 0022  
               __end_of_WriteSPI_ 2FC2                        _dir_rewind 2190  
                         _INTCON2 000FF1                           _INTCON3 000FF0  
                  ?_init_hardware 0001                         ?_check_fs 0072  
                      _disk_readp 1278                     ??_acende_led4 001D  
                  follow_path@dir 00B5                    follow_path@res 00B9  
                       ?_dir_find 00AB                         ?_dir_next 009A  
                         _SSPCON1 000FC6          __size_of_inicializa_shrc 0008  
        __size_of_inicializa_uart 0022                           _SSPSTAT 000FC7  
                      _clust2sect 2782                    _inicializa_SPI 2B28  
                  _inicializa_adc 30EE                   __CFG_VREGEN$OFF 000000  
                       ?_init_lcd 0001                   __size_of_SDCard 0162  
                       ?_pf_mount 007C                         ?_readover 001A  
                       ?_pf_write 009A                           __Hparam 0000  
       ??_configura_baudrate_uart 0060                           __Lparam 0000  
                 _dir_rewind$2022 006B                 __end_of_get_clust 2782  
                       ?_response 0001                           ___aldiv 25EE  
       shrc_apaga_bit@posicao_bit 001C                   __size_of___lmul 0056  
                         ___lldiv 2AA6              __end_of_dummy_clocks 2F7E  
                         __pcinit 2DDA                        _init_ports 31D2  
                         __ramtop 0800                      _get_fat$1962 008C  
                         __ptext0 3006                           __ptext1 2BA4  
                         __ptext2 28EC                           __ptext3 316C  
                         __ptext4 31D2                           __ptext5 3282  
                         __ptext6 3186                           __ptext7 30EE  
                         __ptext8 31A0                           __ptext9 31FE  
                         _get_fat 0B04                           _command 2E94  
                       _T0CONbits 000FD5                           _mem_cmp 2C90  
         i2write_timer_zero@timer 0003       endereco_cursor_lcd@endereco 001C  
                         _mem_set 307A                           _pf_read 0EE8  
                    __size_of_isr 23D0           ??_escreve_caractere_lcd 001C  
                         _pf_open 1C92                        ??_check_fs 0078  
                ___aldiv@dividend 001A                           _proceed 3260  
         __size_of_init_interrupt 001A                        ??_dir_find 00AF  
                      ??_dir_next 009C            __end_of_inicializa_SPI 2BA4  
                    pf_read@rbuff 00A9            __end_of_inicializa_adc 3110  
                  __pintcode_body 22BA              end_of_initialization 2E30  
                         isr@cont 0019        __end_ofleitura_chave@F3840 61AB  
             __end_of_acende_led4 30CA        __end_ofleitura_chave@F3842 619A  
      __end_ofleitura_chave@F3838 61BC           __size_of_init_oscilador 0008  
                   SDCard@FResult 01AE                     __Lmediumconst 60E6  
                      ??_init_lcd 001D                           int_func 22BA  
               ?_recebe_dado_uart 0001                        ??_pf_mount 007E  
                      ??_readover 001C                        ??_pf_write 00A0  
          write_timer_zero@timer0 001A                   ___lldiv@divisor 001E  
              ??_recebe_dado_uart 0001                   ___lldiv@counter 0026  
        envia_dados_shrc@contador 001A                        ??_response 001B  
                       _RCSTAbits 000FAB          __end_of_write_timer_zero 3210  
                ___aldiv@quotient 0024                           postdec1 000FE5  
                         postdec2 000FDD                   _recebe_dado_SPI 3210  
                         postinc0 000FEE                           postinc1 000FE6  
                         postinc2 000FDE                        dir_find@dj 00AB  
                       _PORTAbits 000F80                         _PORTCbits 000F82  
                       _PORTDbits 000F83                         _PORTEbits 000F84  
                 ??_init_hardware 001E                _posicao_cursor_lcd 2D00  
                     ?_dir_rewind 0065                        dir_next@dj 009A  
                      dir_next@fs 00A3   __end_of_configura_baudrate_uart 2190  
                     ?_disk_readp 0060                         _TRISBbits 000F93  
                       _TRISCbits 000F94                         _TRISDbits 000F95  
                      get_fat@buf 0092                        get_fat@ofs 0090  
                 _escreve_cmd_lcd 2A1A               ?_posicao_cursor_lcd 001D  
                 ?_inicializa_SPI 0020                  WriteSPI_@TempVar 001F  
                 ?_inicializa_adc 0001                       ?_clust2sect 0026  
                      command@CMD 0026                        command@CRC 0025  
                disk_readp@length 0070                  disk_readp@offset 0066  
                disk_readp@sector 0062                     ??_create_name 0026  
                      command@arg 0021                  disk_initialize@i 0062  
                 disk_writep@buff 006B                 ??_inicializa_shrc 001A  
               ??_inicializa_uart 002C       __size_of_inicializa_tarefas 003A  
                  __end_of_SDCard 1B36                     ??_disk_writep 0028  
                 command@argument 0027              ??_posicao_cursor_lcd 001E  
                  _shrc_apaga_bit 3132             disk_initialize@count1 0064  
           disk_initialize@count2 0067                    __end_of___lmul 2E94  
                   ??_escalonador 00D2                       ?_init_ports 0001  
                  clust2sect@clst 0026               start_initialization 2DDA  
                   WriteSPI_@dado 0020         __size_of_ativa_latch_shrc 0014  
                     _acende_led4 30A6                       __end_of_isr 23D8  
       __size_of_mensagem_inicial 007A                        mem_cmp@cnt 001E  
                      mem_cmp@dst 001A                      pf_write@buff 009A  
                      mem_cmp@src 001C                      pf_write@clst 00B2  
                    pf_write@sect 00AA                      pf_write@wcnt 00B7  
                        ??_SDCard 002D                i2_write_timer_zero 3222  
         __end_of_recebe_dado_SPI 3222                   _disk_initialize 15AC  
                      mem_set@cnt 001E                        mem_set@dst 001A  
                      mem_set@val 001C               __size_of_dir_rewind 012A  
                _data_uart_recebe 0040             __size_of_dummy_clocks 0044  
                   ??_follow_path 002D            __end_of_shrc_apaga_bit 3150  
             __size_of_disk_readp 0334               __end_of_create_name 1F26  
             ?i2_write_timer_zero 0001                          ??___lmul 0022  
               ?_envia_dados_shrc 0001                        pf_read@btr 009C  
                     __pdataBANK1 01DB                  __CFG_LPT1OSC$OFF 000000  
             __size_of_clust2sect 00C6               __end_of_disk_writep 205E  
              ??_envia_dados_shrc 001A                        pf_open@dir 017B  
                      pf_open@res 019B           __end_of_escreve_cmd_lcd 2AA6  
    __size_of_endereco_cursor_lcd 006A                       __pbssBIGRAM 01F3  
                      pf_mount@fs 007C                       __pbssCOMRAM 002D  
                    _pf_read$2216 00AB                     __pcstackBANK0 0060  
                   __pcstackBANK1 016F                    _init_interrupt 3186  
            ??i2_write_timer_zero 0003               __end_of_escalonador 28EC  
                       _WriteSPI_ 2F7E                 __size_of_check_fs 015C  
           __end_of_controle_shrc 3278                      check_fs@sect 0074  
                      pf_write@cs 00B6                        pf_write@bw 009E  
                      pf_write@fs 00B9                 __size_of_dir_find 0100  
                    _dummy_clocks 2F3A                    _init_oscilador 3282  
               __size_of_dir_next 01BC               __size_of_init_ports 0018  
           _escreve_frase_ram_lcd 2EE8                 __size_of_init_lcd 009E  
               delay@contador_int 001B                 delay@contador_ext 001A  
               __size_of_pf_mount 0634                 __size_of_readover 000A  
                 ?_shrc_apaga_bit 0001                 __size_of_pf_write 04BE  
                       __pintcode 0008                     __pmediumconst 60E6  
                        SDCard@br 01AF                          SDCard@fs 01B1  
                        ?___aldiv 001A                          ?___lldiv 001A  
               __size_of_response 000E                         _get_clust 26BA  
                   follow_path@dj 00B3                _sinaliza_int_timer 003F  
             __end_of_follow_path 24EE                          ?_get_fat 0072  
                        ?_command 0021                          ?_mem_cmp 001A  
          __end_of_init_interrupt 31A0                          ?_mem_set 001A  
                        ?_pf_read 009A                          ?_pf_open 00BA  
                      reset@count 002A    __size_of_escreve_caractere_lcd 0072  
                      ?_WriteSPI_ 0001     __end_of_escreve_caractere_lcd 2C90  
                        ?_proceed 0001                    __size_of_delay 0024  
         __end_of_disk_initialize 1818            __end_of_init_oscilador 328A  
          __size_of_shrc_seta_bit 001C                    __size_of_reset 0090  
                       _p_tarefas 00D5                   ___aldiv@divisor 001E  
                 ___aldiv@counter 0022                       _create_name 1DE2  
                        _LATBbits 000F8A                  ?_recebe_dado_SPI 0001  
                        _IPR1bits 000F9F                          _PIE1bits 000F9D  
                 follow_path@path 00B7                          _PIR1bits 000F9E  
                     _disk_writep 1F26                          i2u586_40 235C  
                        _RCONbits 000FD0                 ?_write_timer_zero 001A  
                       dir_find@c 00B1                leitura_chave@F3840 619A  
              leitura_chave@F3842 6189                leitura_chave@F3838 61AB  
        posicao_cursor_lcd@coluna 001D                         dir_next@i 00A9  
              ??_write_timer_zero 001C        posicao_cursor_lcd@endereco 001F  
                      ?_get_clust 001A                         get_fat@bc 0096  
                       get_fat@fs 0098         __size_of_recebe_dado_uart 0012  
                       get_fat@wc 008E                       _escalonador 2848  
                      _ADCON0bits 000FC2                        _ADCON1bits 000FC1  
                      _ADCON2bits 000FC0                  ?_escreve_cmd_lcd 0001  
                    ??_dir_rewind 0067       escreve_frase_ram_lcd@buffer 001D  
                ??_inicializa_SPI 0022                   ?_init_interrupt 0001  
                ??_inicializa_adc 001A                      ??_disk_readp 0028  
                _ativa_latch_shrc 31EA                   _inicializa_shrc 328A  
                 _inicializa_uart 3110                  _mensagem_inicial 2BA4  
                 ?_init_oscilador 0001                      ??_clust2sect 0060  
               ___lmul@multiplier 001A                         copy_data0 2DEE  
        ?_configura_baudrate_uart 0028            ?_escreve_frase_ram_lcd 001D  
        escreve_inteiro_lcd@F3966 01E5                          __Hrparam 0000  
              __end_of_dir_rewind 22BA                       _info_chaves 0144  
                        __Lrparam 0000                       _follow_path 23D8  
              __end_of_disk_readp 15AC                         pf_read@br 009E  
                       pf_read@cs 00B9                         pf_read@dr 00A8  
                       pf_read@fs 00BC                     _shrc_seta_bit 3150  
                       pf_open@dj 019E                         pf_open@fs 019C  
                       pf_open@sp 016F                  __size_of___aldiv 00CC  
                __size_of___lldiv 0082                      ??_init_ports 001A  
              __end_of_clust2sect 2848                       check_fs@buf 0072  
                       readover@a 001A                         pf_write@p 00A8  
                __size_of_get_fat 03E4                  __size_of_command 0054  
           __end_of_init_hardware 3186                          _check_fs 1B36  
                __size_of_mem_cmp 0070                  __size_of_mem_set 002C  
                __size_of_pf_read 0390                  __size_of_pf_open 0150  
                    ?_acende_led4 0001                       ??_WriteSPI_ 001D  
                        _fileName 01DB                          __ptext10 3254  
                        __ptext11 3110                          __ptext20 3132  
                        __ptext12 205E                          __ptext21 3278  
                        __ptext13 25EE                          __ptext30 2190  
                        __ptext22 0646                          __ptext14 3040  
                        __ptext31 1818                          __ptext23 1F26  
                        __ptext15 328A                          __ptext40 1B36  
                        __ptext32 0B04                          __ptext24 0EE8  
                        __ptext16 2B28                          __ptext41 1278  
                        __ptext33 2782                          __ptext25 1C92  
                        __ptext17 2848                          __ptext50 2C1E  
                        __ptext42 3246                          __ptext34 1DE2  
                        __ptext26 23D8                          __ptext18 19D4  
                        __ptext51 30CA                          __ptext43 3210  
                        __ptext35 307A                          __ptext27 26BA  
                        __ptext19 30A6                          __ptext60 3222  
                        __ptext52 2F7E                          __ptext44 3260  
                        __ptext36 0012                          __ptext28 24EE  
                        __ptext61 3234                          __ptext53 3150  
                        __ptext45 2F3A                          __ptext37 15AC  
                        __ptext29 2C90                          __ptext62 0000  
                        __ptext54 326C                          __ptext46 2E94  
                        __ptext38 298A                          __ptext55 2FC2  
                        __ptext47 2D00                          __ptext39 2A1A  
                        __ptext56 31EA                          __ptext48 2D70  
                        __ptext57 2E3E                          __ptext49 2EE8  
                        __ptext58 2AA6                          _dir_find 24EE  
                        _fileSize 0031                          _dir_next 1818  
                __size_of_proceed 000C                  ?_disk_initialize 0001  
                  _timeout_tarefa 0037                         reset@buff 002C  
      __end_of_inicializa_tarefas 307A          i2write_timer_zero@timer0 0001  
                        _init_lcd 28EC                     __size_of_main 003A  
                        _pf_mount 0012                          _readover 3278  
             _endereco_cursor_lcd 2D70                          _pf_write 0646  
              __end_of_init_ports 31EA                     dummy_clocks@i 0024  
                   dummy_clocks@n 0023          shrc_seta_bit@posicao_bit 001C  
                  ?_shrc_seta_bit 0001                          _response 3246  
     __size_of_posicao_cursor_lcd 0070                          int$flags 0046  
         posicao_cursor_lcd@linha 001E           inicializa_SPI@smp_phase 0021  
                   pf_read@remain 00B1                       ??_get_clust 001E  
         __end_of_inicializa_shrc 3292           __end_of_inicializa_uart 3132  
           __CFG_CPUDIV$OSC1_PLL2 000000              ?_endereco_cursor_lcd 0001  
                        mem_cmp@d 0023                          mem_cmp@r 0027  
                        mem_cmp@s 0025                        _INTCONbits 000FF2  
         inicializa_SPI@sync_mode 0022                          mem_set@d 0020  
       __size_of_envia_dados_shrc 0044                 _config_timer_dois 3254  
                    _tempo_backup 014B                 _config_timer_zero 31A0  
          inicializa_SPI@bus_mode 0020                          intlevel2 0000  
              ?_config_timer_dois 0001          mensagem_inicial@msg_dois 0071  
              ?_config_timer_zero 0001                      _tempo_tarefa 002D  
    envia_dados_shrc@data_to_shrc 001B                  ??_shrc_apaga_bit 001A  
                ___lldiv@dividend 001A               ??_config_timer_dois 001A  
                      _OSCCONbits 000FD3               ??_config_timer_zero 001E  
                _recebe_dado_uart 3234             ??_endereco_cursor_lcd 001C  
                    response@buff 001B                  ___lldiv@quotient 0022  
                  dir_rewind@clst 0071                       dir_find@dir 00AD  
                     dir_find@res 00B2         __end_of_config_timer_dois 3260  
                    ___aldiv@sign 0023         __end_of_config_timer_zero 31BA  
     __size_ofi2_write_timer_zero 0012                       _SSPCON1bits 000FC6  
                    dir_next@clst 00A5            escreve_cmd_lcd@comando 001C  
         recebe_dado_SPI@temp_var 001A                      ?_create_name 0022  
                    dir_rewind@dj 0065                      dir_rewind@fs 006F  
                 ??_shrc_seta_bit 001A     __end_ofmensagem_inicial@F4031 6178  
   __end_ofmensagem_inicial@F4029 6189                      ?_disk_writep 0060  
        __end_of_ativa_latch_shrc 31FE  
