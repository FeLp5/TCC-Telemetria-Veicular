

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Jan 18 20:59:46 2022

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    76                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    82                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    83  0000                     
    84                           ; Version 1.45
    85                           ; Generated 16/11/2017 GMT
    86                           ; 
    87                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    88                           ; All rights reserved.
    89                           ; 
    90                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    91                           ; 
    92                           ; Redistribution and use in source and binary forms, with or without modification, are
    93                           ; permitted provided that the following conditions are met:
    94                           ; 
    95                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    96                           ;        conditions and the following disclaimer.
    97                           ; 
    98                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    99                           ;        of conditions and the following disclaimer in the documentation and/or other
   100                           ;        materials provided with the distribution.
   101                           ; 
   102                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   103                           ;        software without specific prior written permission.
   104                           ; 
   105                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   106                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   107                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   108                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   109                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   110                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   111                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   112                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   113                           ; 
   114                           ; 
   115                           ; Code-generator required, PIC18F4550 Definitions
   116                           ; 
   117                           ; SFR Addresses
   118  0000                     
   119                           	psect	idataBANK1
   120  0031B2                     __pidataBANK1:
   121                           	opt stack 0
   122                           
   123                           ;initializer for _fileName
   124  0031B2  63                 	db	99
   125  0031B3  68                 	db	104
   126  0031B4  65                 	db	101
   127  0031B5  63                 	db	99
   128  0031B6  6B                 	db	107
   129  0031B7  2E                 	db	46
   130  0031B8  74                 	db	116
   131  0031B9  78                 	db	120
   132  0031BA  74                 	db	116
   133  0031BB  00                 	db	0
   134                           
   135                           ;initializer for escreve_inteiro_lcd@F3966
   136  0031BC  30                 	db	48
   137  0031BD  30                 	db	48
   138  0031BE  30                 	db	48
   139  0031BF  30                 	db	48
   140  0031C0  30                 	db	48
   141  0031C1  30                 	db	48
   142  0031C2  00                 	db	0
   143                           
   144                           ;initializer for escreve_inteiro_uart@F3956
   145  0031C3  30                 	db	48
   146  0031C4  30                 	db	48
   147  0031C5  30                 	db	48
   148  0031C6  30                 	db	48
   149  0031C7  30                 	db	48
   150  0031C8  30                 	db	48
   151  0031C9  00                 	db	0
   152                           
   153                           	psect	mediumconst
   154  007E66                     __pmediumconst:
   155                           	opt stack 0
   156  007E66  00                 	db	0
   157  007E67                     create_name@cvt:
   158                           	opt stack 0
   159  007E67  80                 	db	128
   160  007E68  9A                 	db	154
   161  007E69  90                 	db	144
   162  007E6A  41                 	db	65
   163  007E6B  8E                 	db	142
   164  007E6C  41                 	db	65
   165  007E6D  8F                 	db	143
   166  007E6E  80                 	db	128
   167  007E6F  45                 	db	69
   168  007E70  45                 	db	69
   169  007E71  45                 	db	69
   170  007E72  49                 	db	73
   171  007E73  49                 	db	73
   172  007E74  49                 	db	73
   173  007E75  8E                 	db	142
   174  007E76  8F                 	db	143
   175  007E77  90                 	db	144
   176  007E78  92                 	db	146
   177  007E79  92                 	db	146
   178  007E7A  4F                 	db	79
   179  007E7B  99                 	db	153
   180  007E7C  4F                 	db	79
   181  007E7D  55                 	db	85
   182  007E7E  55                 	db	85
   183  007E7F  59                 	db	89
   184  007E80  99                 	db	153
   185  007E81  9A                 	db	154
   186  007E82  9B                 	db	155
   187  007E83  9C                 	db	156
   188  007E84  9D                 	db	157
   189  007E85  9E                 	db	158
   190  007E86  9F                 	db	159
   191  007E87  41                 	db	65
   192  007E88  49                 	db	73
   193  007E89  4F                 	db	79
   194  007E8A  55                 	db	85
   195  007E8B  A5                 	db	165
   196  007E8C  A5                 	db	165
   197  007E8D  A6                 	db	166
   198  007E8E  A7                 	db	167
   199  007E8F  A8                 	db	168
   200  007E90  A9                 	db	169
   201  007E91  AA                 	db	170
   202  007E92  AB                 	db	171
   203  007E93  AC                 	db	172
   204  007E94  21                 	db	33
   205  007E95  AE                 	db	174
   206  007E96  AF                 	db	175
   207  007E97  B0                 	db	176
   208  007E98  B1                 	db	177
   209  007E99  B2                 	db	178
   210  007E9A  B3                 	db	179
   211  007E9B  B4                 	db	180
   212  007E9C  B5                 	db	181
   213  007E9D  B6                 	db	182
   214  007E9E  B7                 	db	183
   215  007E9F  B8                 	db	184
   216  007EA0  B9                 	db	185
   217  007EA1  BA                 	db	186
   218  007EA2  BB                 	db	187
   219  007EA3  BC                 	db	188
   220  007EA4  BD                 	db	189
   221  007EA5  BE                 	db	190
   222  007EA6  BF                 	db	191
   223  007EA7  C0                 	db	192
   224  007EA8  C1                 	db	193
   225  007EA9  C2                 	db	194
   226  007EAA  C3                 	db	195
   227  007EAB  C4                 	db	196
   228  007EAC  C5                 	db	197
   229  007EAD  C6                 	db	198
   230  007EAE  C7                 	db	199
   231  007EAF  C8                 	db	200
   232  007EB0  C9                 	db	201
   233  007EB1  CA                 	db	202
   234  007EB2  CB                 	db	203
   235  007EB3  CC                 	db	204
   236  007EB4  CD                 	db	205
   237  007EB5  CE                 	db	206
   238  007EB6  CF                 	db	207
   239  007EB7  D0                 	db	208
   240  007EB8  D1                 	db	209
   241  007EB9  D2                 	db	210
   242  007EBA  D3                 	db	211
   243  007EBB  D4                 	db	212
   244  007EBC  D5                 	db	213
   245  007EBD  D6                 	db	214
   246  007EBE  D7                 	db	215
   247  007EBF  D8                 	db	216
   248  007EC0  D9                 	db	217
   249  007EC1  DA                 	db	218
   250  007EC2  DB                 	db	219
   251  007EC3  DC                 	db	220
   252  007EC4  DD                 	db	221
   253  007EC5  DE                 	db	222
   254  007EC6  DF                 	db	223
   255  007EC7  E0                 	db	224
   256  007EC8  E1                 	db	225
   257  007EC9  E2                 	db	226
   258  007ECA  E3                 	db	227
   259  007ECB  E4                 	db	228
   260  007ECC  E5                 	db	229
   261  007ECD  E6                 	db	230
   262  007ECE  E7                 	db	231
   263  007ECF  E8                 	db	232
   264  007ED0  E9                 	db	233
   265  007ED1  EA                 	db	234
   266  007ED2  EB                 	db	235
   267  007ED3  EC                 	db	236
   268  007ED4  ED                 	db	237
   269  007ED5  EE                 	db	238
   270  007ED6  EF                 	db	239
   271  007ED7  F0                 	db	240
   272  007ED8  F1                 	db	241
   273  007ED9  F2                 	db	242
   274  007EDA  F3                 	db	243
   275  007EDB  F4                 	db	244
   276  007EDC  F5                 	db	245
   277  007EDD  F6                 	db	246
   278  007EDE  F7                 	db	247
   279  007EDF  F8                 	db	248
   280  007EE0  F9                 	db	249
   281  007EE1  FA                 	db	250
   282  007EE2  FB                 	db	251
   283  007EE3  FC                 	db	252
   284  007EE4  FD                 	db	253
   285  007EE5  FE                 	db	254
   286  007EE6  FF                 	db	255
   287  007EE7                     __end_ofcreate_name@cvt:
   288                           	opt stack 0
   289  007EE7                     mensagem_inicial@F4029:
   290                           	opt stack 0
   291  007EE7  20                 	db	32
   292  007EE8  31                 	db	49
   293  007EE9  38                 	db	56
   294  007EEA  2F                 	db	47
   295  007EEB  30                 	db	48
   296  007EEC  31                 	db	49
   297  007EED  2F                 	db	47
   298  007EEE  32                 	db	50
   299  007EEF  30                 	db	48
   300  007EF0  32                 	db	50
   301  007EF1  32                 	db	50
   302  007EF2  20                 	db	32
   303  007EF3  20                 	db	32
   304  007EF4  20                 	db	32
   305  007EF5  00                 	db	0
   306  007EF6  00                 	db	0
   307  007EF7  00                 	db	0
   308  007EF8                     __end_ofmensagem_inicial@F4029:
   309                           	opt stack 0
   310  007EF8                     mensagem_inicial@F4027:
   311                           	opt stack 0
   312  007EF8  53                 	db	83
   313  007EF9  44                 	db	68
   314  007EFA  43                 	db	67
   315  007EFB  61                 	db	97
   316  007EFC  72                 	db	114
   317  007EFD  64                 	db	100
   318  007EFE  20                 	db	32
   319  007EFF  49                 	db	73
   320  007F00  6E                 	db	110
   321  007F01  69                 	db	105
   322  007F02  74                 	db	116
   323  007F03  20                 	db	32
   324  007F04  20                 	db	32
   325  007F05  20                 	db	32
   326  007F06  00                 	db	0
   327  007F07  00                 	db	0
   328  007F08  00                 	db	0
   329  007F09                     __end_ofmensagem_inicial@F4027:
   330                           	opt stack 0
   331  007F09                     leitura_chave@F3842:
   332                           	opt stack 0
   333  007F09  20                 	db	32
   334  007F0A  49                 	db	73
   335  007F0B  67                 	db	103
   336  007F0C  6E                 	db	110
   337  007F0D  20                 	db	32
   338  007F0E  4F                 	db	79
   339  007F0F  6E                 	db	110
   340  007F10  00                 	db	0
   341  007F11  00                 	db	0
   342  007F12  00                 	db	0
   343  007F13  00                 	db	0
   344  007F14  00                 	db	0
   345  007F15  00                 	db	0
   346  007F16  00                 	db	0
   347  007F17  00                 	db	0
   348  007F18  00                 	db	0
   349  007F19  00                 	db	0
   350  007F1A                     __end_ofleitura_chave@F3842:
   351                           	opt stack 0
   352  007F1A                     leitura_chave@F3840:
   353                           	opt stack 0
   354  007F1A  20                 	db	32
   355  007F1B  49                 	db	73
   356  007F1C  67                 	db	103
   357  007F1D  6E                 	db	110
   358  007F1E  20                 	db	32
   359  007F1F  43                 	db	67
   360  007F20  72                 	db	114
   361  007F21  61                 	db	97
   362  007F22  6E                 	db	110
   363  007F23  6B                 	db	107
   364  007F24  00                 	db	0
   365  007F25  00                 	db	0
   366  007F26  00                 	db	0
   367  007F27  00                 	db	0
   368  007F28  00                 	db	0
   369  007F29  00                 	db	0
   370  007F2A  00                 	db	0
   371  007F2B                     __end_ofleitura_chave@F3840:
   372                           	opt stack 0
   373  007F2B                     leitura_chave@F3838:
   374                           	opt stack 0
   375  007F2B  20                 	db	32
   376  007F2C  49                 	db	73
   377  007F2D  67                 	db	103
   378  007F2E  6E                 	db	110
   379  007F2F  20                 	db	32
   380  007F30  4F                 	db	79
   381  007F31  66                 	db	102
   382  007F32  66                 	db	102
   383  007F33  00                 	db	0
   384  007F34  00                 	db	0
   385  007F35  00                 	db	0
   386  007F36  00                 	db	0
   387  007F37  00                 	db	0
   388  007F38  00                 	db	0
   389  007F39  00                 	db	0
   390  007F3A  00                 	db	0
   391  007F3B  00                 	db	0
   392  007F3C                     __end_ofleitura_chave@F3838:
   393                           	opt stack 0
   394  0000                     _PORTDbits	set	3971
   395  0000                     _TRISDbits	set	3989
   396  0000                     _PCL	set	4089
   397  0000                     _PCLATH	set	4090
   398  0000                     _RCSTA	set	4011
   399  0000                     _TXSTA	set	4012
   400  0000                     _RCREG	set	4014
   401  0000                     _RCSTAbits	set	4011
   402  0000                     _TXREG	set	4013
   403  0000                     _TRISCbits	set	3988
   404  0000                     _SPBRG	set	4015
   405  0000                     _PR2	set	4043
   406  0000                     _TMR2	set	4044
   407  0000                     _T2CON	set	4042
   408  0000                     _OSCCONbits	set	4051
   409  0000                     _TRISE	set	3990
   410  0000                     _TRISC	set	3988
   411  0000                     _TRISA	set	3986
   412  0000                     _TRISD	set	3989
   413  0000                     _LATB	set	3978
   414  0000                     _TRISB	set	3987
   415  0000                     _T0CONbits	set	4053
   416  0000                     _TMR0L	set	4054
   417  0000                     _TMR0H	set	4055
   418  0000                     _RCONbits	set	4048
   419  0000                     _IPR1bits	set	3999
   420  0000                     _PIE1bits	set	3997
   421  0000                     _PIE1	set	3997
   422  0000                     _INTCON3	set	4080
   423  0000                     _INTCON2	set	4081
   424  0000                     _INTCON	set	4082
   425  0000                     _SPPCFG	set	3939
   426  0000                     _SPPCON	set	3941
   427  0000                     _T0CON	set	4053
   428  0000                     _PORTEbits	set	3972
   429  0000                     _PORTAbits	set	3968
   430  0000                     _PORTCbits	set	3970
   431  0000                     _ADRESL	set	4035
   432  0000                     _ADRESH	set	4036
   433  0000                     _ADCON0	set	4034
   434  0000                     _ADCON0bits	set	4034
   435  0000                     _ADCON2bits	set	4032
   436  0000                     _ADCON1bits	set	4033
   437  0000                     _ADCON1	set	4033
   438  0000                     _SSPCON1	set	4038
   439  0000                     _SSPBUF	set	4041
   440  0000                     _PIR1bits	set	3998
   441  0000                     _SSPSTATbits	set	4039
   442  0000                     _SSPCON1bits	set	4038
   443  0000                     _INTCONbits	set	4082
   444  0000                     _LATBbits	set	3978
   445  0000                     _INT0IE	set	32660
   446  0000                     _INT0IF	set	32657
   447  0000                     _T0IF	set	32658
   448  0000                     _TMR0IF	set	32658
   449  0000                     _RCIF	set	31989
   450  0000                     _TRMT	set	32097
   451  0000                     _TXEN	set	32101
   452  0000                     _CREN	set	32092
   453  0000                     _SPEN	set	32095
   454  0000                     _SYNC	set	32100
   455  0000                     _BRGH	set	32098
   456  0000                     _TMR2IF	set	31985
   457  007F3C                     STR_8:
   458  007F3C  73                 	db	115	;'s'
   459  007F3D  79                 	db	121	;'y'
   460  007F3E  73                 	db	115	;'s'
   461  007F3F  74                 	db	116	;'t'
   462  007F40  20                 	db	32
   463  007F41  69                 	db	105	;'i'
   464  007F42  6E                 	db	110	;'n'
   465  007F43  69                 	db	105	;'i'
   466  007F44  63                 	db	99	;'c'
   467  007F45  69                 	db	105	;'i'
   468  007F46  61                 	db	97	;'a'
   469  007F47  6C                 	db	108	;'l'
   470  007F48  69                 	db	105	;'i'
   471  007F49  7A                 	db	122	;'z'
   472  007F4A  65                 	db	101	;'e'
   473  007F4B  64                 	db	100	;'d'
   474  007F4C  00                 	db	0
   475  007F4D                     STR_3:
   476  007F4D  53                 	db	83	;'S'
   477  007F4E  50                 	db	80	;'P'
   478  007F4F  49                 	db	73	;'I'
   479  007F50  20                 	db	32
   480  007F51  63                 	db	99	;'c'
   481  007F52  6F                 	db	111	;'o'
   482  007F53  6E                 	db	110	;'n'
   483  007F54  66                 	db	102	;'f'
   484  007F55  69                 	db	105	;'i'
   485  007F56  67                 	db	103	;'g'
   486  007F57  75                 	db	117	;'u'
   487  007F58  72                 	db	114	;'r'
   488  007F59  61                 	db	97	;'a'
   489  007F5A  64                 	db	100	;'d'
   490  007F5B  61                 	db	97	;'a'
   491  007F5C  21                 	db	33
   492  007F5D  00                 	db	0
   493  007F5E                     STR_7:
   494  007F5E  6D                 	db	109	;'m'
   495  007F5F  6F                 	db	111	;'o'
   496  007F60  75                 	db	117	;'u'
   497  007F61  6E                 	db	110	;'n'
   498  007F62  74                 	db	116	;'t'
   499  007F63  20                 	db	32
   500  007F64  66                 	db	102	;'f'
   501  007F65  69                 	db	105	;'i'
   502  007F66  6C                 	db	108	;'l'
   503  007F67  65                 	db	101	;'e'
   504  007F68  20                 	db	32
   505  007F69  73                 	db	115	;'s'
   506  007F6A  79                 	db	121	;'y'
   507  007F6B  73                 	db	115	;'s'
   508  007F6C  00                 	db	0
   509  007F6D                     STR_15:
   510  007F6D  74                 	db	116	;'t'
   511  007F6E  72                 	db	114	;'r'
   512  007F6F  61                 	db	97	;'a'
   513  007F70  76                 	db	118	;'v'
   514  007F71  6F                 	db	111	;'o'
   515  007F72  75                 	db	117	;'u'
   516  007F73  20                 	db	32
   517  007F74  61                 	db	97	;'a'
   518  007F75  71                 	db	113	;'q'
   519  007F76  75                 	db	117	;'u'
   520  007F77  69                 	db	105	;'i'
   521  007F78  20                 	db	32
   522  007F79  32                 	db	50	;'2'
   523  007F7A  00                 	db	0
   524  007F7B                     STR_16:
   525  007F7B  43                 	db	67	;'C'
   526  007F7C  61                 	db	97	;'a'
   527  007F7D  72                 	db	114	;'r'
   528  007F7E  74                 	db	116	;'t'
   529  007F7F  E3                 	db	-29
   530  007F80  6F                 	db	111	;'o'
   531  007F81  20                 	db	32
   532  007F82  41                 	db	65	;'A'
   533  007F83  63                 	db	99	;'c'
   534  007F84  65                 	db	101	;'e'
   535  007F85  69                 	db	105	;'i'
   536  007F86  74                 	db	116	;'t'
   537  007F87  6F                 	db	111	;'o'
   538  007F88  00                 	db	0
   539  007F89                     STR_6:
   540  007F89  20                 	db	32
   541  007F8A  20                 	db	32
   542  007F8B  20                 	db	32
   543  007F8C  20                 	db	32
   544  007F8D  20                 	db	32
   545  007F8E  20                 	db	32
   546  007F8F  20                 	db	32
   547  007F90  20                 	db	32
   548  007F91  20                 	db	32
   549  007F92  20                 	db	32
   550  007F93  20                 	db	32
   551  007F94  20                 	db	32
   552  007F95  20                 	db	32
   553  007F96  00                 	db	0
   554  007F97                     STR_5:
   555  007F97  41                 	db	65	;'A'
   556  007F98  74                 	db	116	;'t'
   557  007F99  74                 	db	116	;'t'
   558  007F9A  65                 	db	101	;'e'
   559  007F9B  6D                 	db	109	;'m'
   560  007F9C  70                 	db	112	;'p'
   561  007F9D  74                 	db	116	;'t'
   562  007F9E  69                 	db	105	;'i'
   563  007F9F  6E                 	db	110	;'n'
   564  007FA0  67                 	db	103	;'g'
   565  007FA1  20                 	db	32
   566  007FA2  74                 	db	116	;'t'
   567  007FA3  6F                 	db	111	;'o'
   568  007FA4  00                 	db	0
   569  007FA5                     STR_13:
   570  007FA5  6C                 	db	108	;'l'
   571  007FA6  65                 	db	101	;'e'
   572  007FA7  6E                 	db	110	;'n'
   573  007FA8  64                 	db	100	;'d'
   574  007FA9  6F                 	db	111	;'o'
   575  007FAA  20                 	db	32
   576  007FAB  61                 	db	97	;'a'
   577  007FAC  72                 	db	114	;'r'
   578  007FAD  71                 	db	113	;'q'
   579  007FAE  75                 	db	117	;'u'
   580  007FAF  69                 	db	105	;'i'
   581  007FB0  76                 	db	118	;'v'
   582  007FB1  6F                 	db	111	;'o'
   583  007FB2  00                 	db	0
   584  007FB3                     STR_12:
   585  007FB3  53                 	db	83	;'S'
   586  007FB4  44                 	db	68	;'D'
   587  007FB5  43                 	db	67	;'C'
   588  007FB6  61                 	db	97	;'a'
   589  007FB7  72                 	db	114	;'r'
   590  007FB8  64                 	db	100	;'d'
   591  007FB9  20                 	db	32
   592  007FBA  65                 	db	101	;'e'
   593  007FBB  72                 	db	114	;'r'
   594  007FBC  72                 	db	114	;'r'
   595  007FBD  6F                 	db	111	;'o'
   596  007FBE  72                 	db	114	;'r'
   597  007FBF  00                 	db	0
   598  007FC0                     STR_14:
   599  007FC0  74                 	db	116	;'t'
   600  007FC1  72                 	db	114	;'r'
   601  007FC2  61                 	db	97	;'a'
   602  007FC3  76                 	db	118	;'v'
   603  007FC4  6F                 	db	111	;'o'
   604  007FC5  75                 	db	117	;'u'
   605  007FC6  20                 	db	32
   606  007FC7  61                 	db	97	;'a'
   607  007FC8  71                 	db	113	;'q'
   608  007FC9  75                 	db	117	;'u'
   609  007FCA  69                 	db	105	;'i'
   610  007FCB  00                 	db	0
   611  007FCC                     STR_1:
   612  007FCC  41                 	db	65	;'A'
   613  007FCD  41                 	db	65	;'A'
   614  007FCE  41                 	db	65	;'A'
   615  007FCF  41                 	db	65	;'A'
   616  007FD0  41                 	db	65	;'A'
   617  007FD1  41                 	db	65	;'A'
   618  007FD2  41                 	db	65	;'A'
   619  007FD3  41                 	db	65	;'A'
   620  007FD4  41                 	db	65	;'A'
   621  007FD5  41                 	db	65	;'A'
   622  007FD6  00                 	db	0
   623  007FD7                     STR_9:
   624  007FD7  63                 	db	99	;'c'
   625  007FD8  68                 	db	104	;'h'
   626  007FD9  65                 	db	101	;'e'
   627  007FDA  63                 	db	99	;'c'
   628  007FDB  6B                 	db	107	;'k'
   629  007FDC  2E                 	db	46
   630  007FDD  74                 	db	116	;'t'
   631  007FDE  78                 	db	120	;'x'
   632  007FDF  74                 	db	116	;'t'
   633  007FE0  00                 	db	0
   634  007FE1                     STR_2:
   635  007FE1  4F                 	db	79	;'O'
   636  007FE2  4F                 	db	79	;'O'
   637  007FE3  4F                 	db	79	;'O'
   638  007FE4  4F                 	db	79	;'O'
   639  007FE5  4F                 	db	79	;'O'
   640  007FE6  4F                 	db	79	;'O'
   641  007FE7  4F                 	db	79	;'O'
   642  007FE8  4F                 	db	79	;'O'
   643  007FE9  4F                 	db	79	;'O'
   644  007FEA  00                 	db	0
   645  007FEB                     STR_17:
   646  007FEB  45                 	db	69	;'E'
   647  007FEC  72                 	db	114	;'r'
   648  007FED  72                 	db	114	;'r'
   649  007FEE  6F                 	db	111	;'o'
   650  007FEF  72                 	db	114	;'r'
   651  007FF0  21                 	db	33
   652  007FF1  21                 	db	33
   653  007FF2  21                 	db	33
   654  007FF3  00                 	db	0
   655  007FF4                     STR_10:
   656  007FF4  53                 	db	83	;'S'
   657  007FF5  44                 	db	68	;'D'
   658  007FF6  5F                 	db	95	;'_'
   659  007FF7  43                 	db	67	;'C'
   660  007FF8  61                 	db	97	;'a'
   661  007FF9  72                 	db	114	;'r'
   662  007FFA  64                 	db	100	;'d'
   663  007FFB  00                 	db	0
   664  007FFC  0D                 	db	13
   665  007FFD  0A                 	db	10
   666  007FFE  00                 	db	0
   667  007FFF  00                 	db	0	; dummy byte at the end
   668  0000                     
   669                           ; #config settings
   670                           
   671                           	psect	cinit
   672  002D64                     __pcinit:
   673                           	opt stack 0
   674  002D64                     start_initialization:
   675                           	opt stack 0
   676  002D64                     __initialization:
   677                           	opt stack 0
   678                           
   679                           ; Initialize objects allocated to BANK1 (24 bytes)
   680                           ; load TBLPTR registers with __pidataBANK1
   681  002D64  0EB2               	movlw	low __pidataBANK1
   682  002D66  6EF6               	movwf	tblptrl,c
   683  002D68  0E31               	movlw	high __pidataBANK1
   684  002D6A  6EF7               	movwf	tblptrh,c
   685  002D6C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   686  002D6E  6EF8               	movwf	tblptru,c
   687  002D70  EE01  F0DB         	lfsr	0,__pdataBANK1
   688  002D74  EE10 F018          	lfsr	1,24
   689  002D78                     copy_data0:
   690  002D78  0009               	tblrd		*+
   691  002D7A  CFF5 FFEE          	movff	tablat,postinc0
   692  002D7E  50E5               	movf	postdec1,w,c
   693  002D80  50E1               	movf	fsr1l,w,c
   694  002D82  E1FA               	bnz	copy_data0
   695                           
   696                           ; Clear objects allocated to BIGRAM (512 bytes)
   697  002D84  EE01  F0F3         	lfsr	0,__pbssBIGRAM
   698  002D88  EE12 F000          	lfsr	1,512
   699  002D8C                     clear_0:
   700  002D8C  6AEE               	clrf	postinc0,c
   701  002D8E  50E5               	movf	postdec1,w,c
   702  002D90  50E1               	movf	fsr1l,w,c
   703  002D92  E1FC               	bnz	clear_0
   704  002D94  50E2               	movf	fsr1h,w,c
   705  002D96  E1FA               	bnz	clear_0
   706                           
   707                           ; Clear objects allocated to BANK1 (111 bytes)
   708  002D98  EE01  F000         	lfsr	0,__pbssBANK1
   709  002D9C  0E6F               	movlw	111
   710  002D9E                     clear_1:
   711  002D9E  6AEE               	clrf	postinc0,c
   712  002DA0  06E8               	decf	wreg,f,c
   713  002DA2  E1FD               	bnz	clear_1
   714                           
   715                           ; Clear objects allocated to BANK0 (4 bytes)
   716  002DA4  0100               	movlb	0
   717  002DA6  6BD8               	clrf	(__pbssBANK0+3)& (0+255),b
   718  002DA8  6BD7               	clrf	(__pbssBANK0+2)& (0+255),b
   719  002DAA  6BD6               	clrf	(__pbssBANK0+1)& (0+255),b
   720  002DAC  6BD5               	clrf	__pbssBANK0& (0+255),b
   721                           
   722                           ; Clear objects allocated to COMRAM (25 bytes)
   723  002DAE  EE00  F02D         	lfsr	0,__pbssCOMRAM
   724  002DB2  0E19               	movlw	25
   725  002DB4                     clear_2:
   726  002DB4  6AEE               	clrf	postinc0,c
   727  002DB6  06E8               	decf	wreg,f,c
   728  002DB8  E1FD               	bnz	clear_2
   729  002DBA                     end_of_initialization:
   730                           	opt stack 0
   731  002DBA                     __end_of__initialization:
   732                           	opt stack 0
   733  002DBA  9046               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   734  002DBC  9246               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   735  002DBE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   736  002DC0  6EF8               	movwf	tblptru,c
   737  002DC2  0100               	movlb	0
   738  002DC4  EF13  F018         	goto	_main	;jump to C main() function
   739                           tblptru	equ	0xFF8
   740                           tblptrh	equ	0xFF7
   741                           tblptrl	equ	0xFF6
   742                           tablat	equ	0xFF5
   743                           postinc0	equ	0xFEE
   744                           wreg	equ	0xFE8
   745                           postdec1	equ	0xFE5
   746                           fsr1h	equ	0xFE2
   747                           fsr1l	equ	0xFE1
   748                           
   749                           	psect	bssCOMRAM
   750  00002D                     __pbssCOMRAM:
   751                           	opt stack 0
   752  00002D                     _tempo_tarefa:
   753                           	opt stack 0
   754  00002D                     	ds	4
   755  000031                     _fileSize:
   756                           	opt stack 0
   757  000031                     	ds	4
   758  000035                     _FatFs:
   759                           	opt stack 0
   760  000035                     	ds	2
   761  000037                     _timeout_tarefa:
   762                           	opt stack 0
   763  000037                     	ds	2
   764  000039                     _rd:
   765                           	opt stack 0
   766  000039                     	ds	2
   767  00003B                     _flag:
   768                           	opt stack 0
   769  00003B                     	ds	2
   770  00003D                     acende_led4@flag:
   771                           	opt stack 0
   772  00003D                     	ds	1
   773  00003E                     _tarefa_em_execucao:
   774                           	opt stack 0
   775  00003E                     	ds	1
   776  00003F                     _sinaliza_int_timer:
   777                           	opt stack 0
   778  00003F                     	ds	1
   779  000040                     _data_uart_recebe:
   780                           	opt stack 0
   781  000040                     	ds	1
   782  000041                     _s:
   783                           	opt stack 0
   784  000041                     	ds	1
   785  000042                     _Result:
   786                           	opt stack 0
   787  000042                     	ds	1
   788  000043                     timer_dois@flag:
   789                           	opt stack 0
   790  000043                     	ds	1
   791  000044                     _estado:
   792                           	opt stack 0
   793  000044                     	ds	1
   794  000045                     _dado:
   795                           	opt stack 0
   796  000045                     	ds	1
   797                           tblptru	equ	0xFF8
   798                           tblptrh	equ	0xFF7
   799                           tblptrl	equ	0xFF6
   800                           tablat	equ	0xFF5
   801                           postinc0	equ	0xFEE
   802                           wreg	equ	0xFE8
   803                           postdec1	equ	0xFE5
   804                           fsr1h	equ	0xFE2
   805                           fsr1l	equ	0xFE1
   806                           
   807                           	psect	bssBANK0
   808  0000D5                     __pbssBANK0:
   809                           	opt stack 0
   810  0000D5                     _p_tarefas:
   811                           	opt stack 0
   812  0000D5                     	ds	4
   813                           tblptru	equ	0xFF8
   814                           tblptrh	equ	0xFF7
   815                           tblptrl	equ	0xFF6
   816                           tablat	equ	0xFF5
   817                           postinc0	equ	0xFEE
   818                           wreg	equ	0xFE8
   819                           postdec1	equ	0xFE5
   820                           fsr1h	equ	0xFE2
   821                           fsr1l	equ	0xFE1
   822                           
   823                           	psect	bssBANK1
   824  000100                     __pbssBANK1:
   825                           	opt stack 0
   826  000100                     _folder:
   827                           	opt stack 0
   828  000100                     	ds	48
   829  000130                     _txt:
   830                           	opt stack 0
   831  000130                     	ds	20
   832  000144                     _info_chaves:
   833                           	opt stack 0
   834  000144                     	ds	7
   835  00014B                     _tempo_backup:
   836                           	opt stack 0
   837  00014B                     	ds	4
   838  00014F                     _data_buffer_32:
   839                           	opt stack 0
   840  00014F                     	ds	32
   841                           tblptru	equ	0xFF8
   842                           tblptrh	equ	0xFF7
   843                           tblptrl	equ	0xFF6
   844                           tablat	equ	0xFF5
   845                           postinc0	equ	0xFEE
   846                           wreg	equ	0xFE8
   847                           postdec1	equ	0xFE5
   848                           fsr1h	equ	0xFE2
   849                           fsr1l	equ	0xFE1
   850                           
   851                           	psect	dataBANK1
   852  0001DB                     __pdataBANK1:
   853                           	opt stack 0
   854  0001DB                     _fileName:
   855                           	opt stack 0
   856  0001DB                     	ds	10
   857  0001E5                     escreve_inteiro_lcd@F3966:
   858                           	opt stack 0
   859  0001E5                     	ds	7
   860  0001EC                     escreve_inteiro_uart@F3956:
   861                           	opt stack 0
   862  0001EC                     	ds	7
   863                           tblptru	equ	0xFF8
   864                           tblptrh	equ	0xFF7
   865                           tblptrl	equ	0xFF6
   866                           tablat	equ	0xFF5
   867                           postinc0	equ	0xFEE
   868                           wreg	equ	0xFE8
   869                           postdec1	equ	0xFE5
   870                           fsr1h	equ	0xFE2
   871                           fsr1l	equ	0xFE1
   872                           
   873                           	psect	bssBIGRAM
   874  0001F3                     __pbssBIGRAM:
   875                           	opt stack 0
   876  0001F3                     disk_readp@arr:
   877                           	opt stack 0
   878  0001F3                     	ds	512
   879                           tblptru	equ	0xFF8
   880                           tblptrh	equ	0xFF7
   881                           tblptrl	equ	0xFF6
   882                           tablat	equ	0xFF5
   883                           postinc0	equ	0xFEE
   884                           wreg	equ	0xFE8
   885                           postdec1	equ	0xFE5
   886                           fsr1h	equ	0xFE2
   887                           fsr1l	equ	0xFE1
   888                           
   889                           	psect	cstackBANK1
   890  00016F                     __pcstackBANK1:
   891                           	opt stack 0
   892  00016F                     pf_open@sp:
   893                           	opt stack 0
   894                           
   895                           ; 12 bytes @ 0x0
   896  00016F                     	ds	12
   897  00017B                     pf_open@dir:
   898                           	opt stack 0
   899                           
   900                           ; 32 bytes @ 0xC
   901  00017B                     	ds	32
   902  00019B                     pf_open@res:
   903                           	opt stack 0
   904                           
   905                           ; 1 bytes @ 0x2C
   906  00019B                     	ds	1
   907  00019C                     pf_open@fs:
   908                           	opt stack 0
   909                           
   910                           ; 2 bytes @ 0x2D
   911  00019C                     	ds	2
   912  00019E                     pf_open@dj:
   913                           	opt stack 0
   914                           
   915                           ; 16 bytes @ 0x2F
   916  00019E                     	ds	16
   917  0001AE                     SDCard@FResult:
   918                           	opt stack 0
   919                           
   920                           ; 1 bytes @ 0x3F
   921  0001AE                     	ds	1
   922  0001AF                     SDCard@br:
   923                           	opt stack 0
   924                           
   925                           ; 2 bytes @ 0x40
   926  0001AF                     	ds	2
   927  0001B1                     SDCard@fs:
   928                           	opt stack 0
   929                           
   930                           ; 42 bytes @ 0x42
   931  0001B1                     	ds	42
   932                           tblptru	equ	0xFF8
   933                           tblptrh	equ	0xFF7
   934                           tblptrl	equ	0xFF6
   935                           tablat	equ	0xFF5
   936                           postinc0	equ	0xFEE
   937                           wreg	equ	0xFE8
   938                           postdec1	equ	0xFE5
   939                           fsr1h	equ	0xFE2
   940                           fsr1l	equ	0xFE1
   941                           
   942                           	psect	cstackBANK0
   943  000060                     __pcstackBANK0:
   944                           	opt stack 0
   945  000060                     ??_configura_baudrate_uart:
   946  000060                     ??_disk_initialize:
   947  000060                     ??_clust2sect:
   948  000060                     create_name@d:
   949                           	opt stack 0
   950  000060                     disk_readp@rd:
   951                           	opt stack 0
   952  000060                     disk_writep@wr:
   953                           	opt stack 0
   954  000060                     mensagem_inicial@msg_linha_um:
   955                           	opt stack 0
   956                           
   957                           ; 17 bytes @ 0x0
   958  000060                     	ds	1
   959  000061                     create_name@p:
   960                           	opt stack 0
   961                           
   962                           ; 2 bytes @ 0x1
   963  000061                     	ds	1
   964  000062                     disk_initialize@i:
   965                           	opt stack 0
   966  000062                     disk_readp@sector:
   967                           	opt stack 0
   968                           
   969                           ; 4 bytes @ 0x2
   970  000062                     	ds	1
   971  000063                     create_name@ni:
   972                           	opt stack 0
   973  000063                     disk_writep@sc:
   974                           	opt stack 0
   975                           
   976                           ; 4 bytes @ 0x3
   977  000063                     	ds	1
   978  000064                     create_name@si:
   979                           	opt stack 0
   980  000064                     disk_initialize@count1:
   981                           	opt stack 0
   982                           
   983                           ; 2 bytes @ 0x4
   984  000064                     	ds	1
   985  000065                     dir_rewind@dj:
   986                           	opt stack 0
   987  000065                     create_name@sfn:
   988                           	opt stack 0
   989                           
   990                           ; 2 bytes @ 0x5
   991  000065                     	ds	1
   992  000066                     disk_initialize@stat:
   993                           	opt stack 0
   994  000066                     disk_readp@offset:
   995                           	opt stack 0
   996                           
   997                           ; 2 bytes @ 0x6
   998  000066                     	ds	1
   999  000067                     create_name@i:
  1000                           	opt stack 0
  1001  000067                     disk_initialize@count2:
  1002                           	opt stack 0
  1003  000067                     disk_writep@i:
  1004                           	opt stack 0
  1005                           
  1006                           ; 2 bytes @ 0x7
  1007  000067                     	ds	1
  1008  000068                     create_name@c:
  1009                           	opt stack 0
  1010  000068                     configura_baudrate_uart@x:
  1011                           	opt stack 0
  1012  000068                     disk_readp@count:
  1013                           	opt stack 0
  1014                           
  1015                           ; 2 bytes @ 0x8
  1016  000068                     	ds	1
  1017  000069                     disk_initialize@buff:
  1018                           	opt stack 0
  1019  000069                     disk_writep@j:
  1020                           	opt stack 0
  1021                           
  1022                           ; 2 bytes @ 0x9
  1023  000069                     	ds	1
  1024  00006A                     disk_readp@ptr:
  1025                           	opt stack 0
  1026                           
  1027                           ; 1 bytes @ 0xA
  1028  00006A                     	ds	1
  1029  00006B                     disk_writep@buff:
  1030                           	opt stack 0
  1031  00006B                     disk_readp@start_add:
  1032                           	opt stack 0
  1033  00006B                     _dir_rewind$1957:
  1034                           	opt stack 0
  1035                           
  1036                           ; 4 bytes @ 0xB
  1037  00006B                     	ds	4
  1038  00006F                     disk_readp@buff:
  1039                           	opt stack 0
  1040  00006F                     dir_rewind@fs:
  1041                           	opt stack 0
  1042                           
  1043                           ; 2 bytes @ 0xF
  1044  00006F                     	ds	1
  1045  000070                     disk_readp@length:
  1046                           	opt stack 0
  1047                           
  1048                           ; 2 bytes @ 0x10
  1049  000070                     	ds	1
  1050  000071                     dir_rewind@clst:
  1051                           	opt stack 0
  1052  000071                     mensagem_inicial@msg_dois:
  1053                           	opt stack 0
  1054                           
  1055                           ; 17 bytes @ 0x11
  1056  000071                     	ds	1
  1057  000072                     ?_get_fat:
  1058                           	opt stack 0
  1059  000072                     check_fs@buf:
  1060                           	opt stack 0
  1061  000072                     get_fat@clst:
  1062                           	opt stack 0
  1063                           
  1064                           ; 4 bytes @ 0x12
  1065  000072                     	ds	2
  1066  000074                     check_fs@sect:
  1067                           	opt stack 0
  1068                           
  1069                           ; 4 bytes @ 0x14
  1070  000074                     	ds	2
  1071  000076                     ??_get_fat:
  1072                           
  1073                           ; 1 bytes @ 0x16
  1074  000076                     	ds	2
  1075  000078                     ??_check_fs:
  1076                           
  1077                           ; 1 bytes @ 0x18
  1078  000078                     	ds	4
  1079  00007C                     pf_mount@fs:
  1080                           	opt stack 0
  1081                           
  1082                           ; 2 bytes @ 0x1C
  1083  00007C                     	ds	2
  1084  00007E                     ??_pf_mount:
  1085                           
  1086                           ; 1 bytes @ 0x1E
  1087  00007E                     	ds	14
  1088  00008C                     _get_fat$1897:
  1089                           	opt stack 0
  1090                           
  1091                           ; 2 bytes @ 0x2C
  1092  00008C                     	ds	2
  1093  00008E                     get_fat@wc:
  1094                           	opt stack 0
  1095                           
  1096                           ; 2 bytes @ 0x2E
  1097  00008E                     	ds	2
  1098  000090                     get_fat@ofs:
  1099                           	opt stack 0
  1100                           
  1101                           ; 2 bytes @ 0x30
  1102  000090                     	ds	2
  1103  000092                     get_fat@buf:
  1104                           	opt stack 0
  1105                           
  1106                           ; 4 bytes @ 0x32
  1107  000092                     	ds	2
  1108  000094                     pf_mount@buf:
  1109                           	opt stack 0
  1110                           
  1111                           ; 36 bytes @ 0x34
  1112  000094                     	ds	2
  1113  000096                     get_fat@bc:
  1114                           	opt stack 0
  1115                           
  1116                           ; 2 bytes @ 0x36
  1117  000096                     	ds	2
  1118  000098                     get_fat@fs:
  1119                           	opt stack 0
  1120                           
  1121                           ; 2 bytes @ 0x38
  1122  000098                     	ds	2
  1123  00009A                     dir_next@dj:
  1124                           	opt stack 0
  1125  00009A                     pf_read@buff:
  1126                           	opt stack 0
  1127  00009A                     pf_write@buff:
  1128                           	opt stack 0
  1129                           
  1130                           ; 2 bytes @ 0x3A
  1131  00009A                     	ds	2
  1132  00009C                     ??_dir_next:
  1133  00009C                     pf_read@btr:
  1134                           	opt stack 0
  1135  00009C                     pf_write@btw:
  1136                           	opt stack 0
  1137                           
  1138                           ; 2 bytes @ 0x3C
  1139  00009C                     	ds	2
  1140  00009E                     pf_read@br:
  1141                           	opt stack 0
  1142  00009E                     pf_write@bw:
  1143                           	opt stack 0
  1144                           
  1145                           ; 2 bytes @ 0x3E
  1146  00009E                     	ds	2
  1147  0000A0                     ??_pf_write:
  1148  0000A0                     ??_pf_read:
  1149                           
  1150                           ; 1 bytes @ 0x40
  1151  0000A0                     	ds	3
  1152  0000A3                     dir_next@fs:
  1153                           	opt stack 0
  1154                           
  1155                           ; 2 bytes @ 0x43
  1156  0000A3                     	ds	2
  1157  0000A5                     dir_next@clst:
  1158                           	opt stack 0
  1159                           
  1160                           ; 4 bytes @ 0x45
  1161  0000A5                     	ds	3
  1162  0000A8                     pf_read@dr:
  1163                           	opt stack 0
  1164  0000A8                     pf_write@p:
  1165                           	opt stack 0
  1166                           
  1167                           ; 2 bytes @ 0x48
  1168  0000A8                     	ds	1
  1169  0000A9                     dir_next@i:
  1170                           	opt stack 0
  1171  0000A9                     pf_read@rbuff:
  1172                           	opt stack 0
  1173                           
  1174                           ; 2 bytes @ 0x49
  1175  0000A9                     	ds	1
  1176  0000AA                     pf_write@sect:
  1177                           	opt stack 0
  1178                           
  1179                           ; 4 bytes @ 0x4A
  1180  0000AA                     	ds	1
  1181  0000AB                     dir_find@dj:
  1182                           	opt stack 0
  1183  0000AB                     _pf_read$2151:
  1184                           	opt stack 0
  1185                           
  1186                           ; 2 bytes @ 0x4B
  1187  0000AB                     	ds	2
  1188  0000AD                     dir_find@dir:
  1189                           	opt stack 0
  1190  0000AD                     pf_read@sect:
  1191                           	opt stack 0
  1192                           
  1193                           ; 4 bytes @ 0x4D
  1194  0000AD                     	ds	1
  1195  0000AE                     pf_write@remain:
  1196                           	opt stack 0
  1197                           
  1198                           ; 4 bytes @ 0x4E
  1199  0000AE                     	ds	1
  1200  0000AF                     ??_dir_find:
  1201                           
  1202                           ; 1 bytes @ 0x4F
  1203  0000AF                     	ds	2
  1204  0000B1                     dir_find@c:
  1205                           	opt stack 0
  1206  0000B1                     pf_read@remain:
  1207                           	opt stack 0
  1208                           
  1209                           ; 4 bytes @ 0x51
  1210  0000B1                     	ds	1
  1211  0000B2                     dir_find@res:
  1212                           	opt stack 0
  1213  0000B2                     pf_write@clst:
  1214                           	opt stack 0
  1215                           
  1216                           ; 4 bytes @ 0x52
  1217  0000B2                     	ds	1
  1218  0000B3                     follow_path@dj:
  1219                           	opt stack 0
  1220                           
  1221                           ; 2 bytes @ 0x53
  1222  0000B3                     	ds	2
  1223  0000B5                     follow_path@dir:
  1224                           	opt stack 0
  1225  0000B5                     pf_read@clst:
  1226                           	opt stack 0
  1227                           
  1228                           ; 4 bytes @ 0x55
  1229  0000B5                     	ds	1
  1230  0000B6                     pf_write@cs:
  1231                           	opt stack 0
  1232                           
  1233                           ; 1 bytes @ 0x56
  1234  0000B6                     	ds	1
  1235  0000B7                     follow_path@path:
  1236                           	opt stack 0
  1237  0000B7                     pf_write@wcnt:
  1238                           	opt stack 0
  1239                           
  1240                           ; 2 bytes @ 0x57
  1241  0000B7                     	ds	1
  1242  0000B8                     pf_mount@tsect:
  1243                           	opt stack 0
  1244                           
  1245                           ; 4 bytes @ 0x58
  1246  0000B8                     	ds	1
  1247  0000B9                     follow_path@res:
  1248                           	opt stack 0
  1249  0000B9                     pf_read@cs:
  1250                           	opt stack 0
  1251  0000B9                     pf_write@fs:
  1252                           	opt stack 0
  1253                           
  1254                           ; 2 bytes @ 0x59
  1255  0000B9                     	ds	1
  1256  0000BA                     pf_open@path:
  1257                           	opt stack 0
  1258  0000BA                     pf_read@rcnt:
  1259                           	opt stack 0
  1260                           
  1261                           ; 2 bytes @ 0x5A
  1262  0000BA                     	ds	2
  1263  0000BC                     ??_pf_open:
  1264  0000BC                     pf_read@fs:
  1265                           	opt stack 0
  1266  0000BC                     pf_mount@mclst:
  1267                           	opt stack 0
  1268                           
  1269                           ; 4 bytes @ 0x5C
  1270  0000BC                     	ds	4
  1271  0000C0                     pf_mount@bsect:
  1272                           	opt stack 0
  1273                           
  1274                           ; 4 bytes @ 0x60
  1275  0000C0                     	ds	4
  1276  0000C4                     pf_mount@fsize:
  1277                           	opt stack 0
  1278                           
  1279                           ; 4 bytes @ 0x64
  1280  0000C4                     	ds	4
  1281  0000C8                     pf_mount@fmt:
  1282                           	opt stack 0
  1283                           
  1284                           ; 1 bytes @ 0x68
  1285  0000C8                     	ds	10
  1286  0000D2                     
  1287                           ; 1 bytes @ 0x72
  1288  0000D2                     	ds	2
  1289  0000D4                     escalonador@cont:
  1290                           	opt stack 0
  1291                           
  1292                           ; 1 bytes @ 0x74
  1293  0000D4                     	ds	1
  1294                           tblptru	equ	0xFF8
  1295                           tblptrh	equ	0xFF7
  1296                           tblptrl	equ	0xFF6
  1297                           tablat	equ	0xFF5
  1298                           postinc0	equ	0xFEE
  1299                           wreg	equ	0xFE8
  1300                           postdec1	equ	0xFE5
  1301                           fsr1h	equ	0xFE2
  1302                           fsr1l	equ	0xFE1
  1303                           
  1304                           	psect	cstackCOMRAM
  1305  000001                     __pcstackCOMRAM:
  1306                           	opt stack 0
  1307  000001                     i2write_timer_zero@timer0:
  1308                           	opt stack 0
  1309                           
  1310                           ; 2 bytes @ 0x0
  1311  000001                     	ds	2
  1312  000003                     i2write_timer_zero@timer:
  1313                           	opt stack 0
  1314                           
  1315                           ; 2 bytes @ 0x2
  1316  000003                     	ds	2
  1317  000005                     ??_isr:
  1318                           
  1319                           ; 1 bytes @ 0x4
  1320  000005                     	ds	20
  1321  000019                     isr@cont:
  1322                           	opt stack 0
  1323                           
  1324                           ; 1 bytes @ 0x18
  1325  000019                     	ds	1
  1326  00001A                     ??_shrc_seta_bit:
  1327  00001A                     ??_shrc_apaga_bit:
  1328  00001A                     ?_mem_cmp:
  1329                           	opt stack 0
  1330  00001A                     ?_get_clust:
  1331                           	opt stack 0
  1332  00001A                     ?___lmul:
  1333                           	opt stack 0
  1334  00001A                     ?___aldiv:
  1335                           	opt stack 0
  1336  00001A                     ?___lldiv:
  1337                           	opt stack 0
  1338  00001A                     envia_dados_shrc@contador:
  1339                           	opt stack 0
  1340  00001A                     recebe_dado_SPI@temp_var:
  1341                           	opt stack 0
  1342  00001A                     delay@contador_ext:
  1343                           	opt stack 0
  1344  00001A                     write_timer_zero@timer0:
  1345                           	opt stack 0
  1346  00001A                     readover@a:
  1347                           	opt stack 0
  1348  00001A                     mem_set@dst:
  1349                           	opt stack 0
  1350  00001A                     mem_cmp@dst:
  1351                           	opt stack 0
  1352  00001A                     get_clust@dir:
  1353                           	opt stack 0
  1354  00001A                     ___lmul@multiplier:
  1355                           	opt stack 0
  1356  00001A                     ___aldiv@dividend:
  1357                           	opt stack 0
  1358  00001A                     ___lldiv@dividend:
  1359                           	opt stack 0
  1360                           
  1361                           ; 4 bytes @ 0x19
  1362  00001A                     	ds	1
  1363  00001B                     response@buff:
  1364                           	opt stack 0
  1365  00001B                     envia_dados_shrc@data_to_shrc:
  1366                           	opt stack 0
  1367  00001B                     delay@contador_int:
  1368                           	opt stack 0
  1369                           
  1370                           ; 1 bytes @ 0x1A
  1371  00001B                     	ds	1
  1372  00001C                     shrc_seta_bit@posicao_bit:
  1373                           	opt stack 0
  1374  00001C                     shrc_apaga_bit@posicao_bit:
  1375                           	opt stack 0
  1376  00001C                     escreve_cmd_lcd@comando:
  1377                           	opt stack 0
  1378  00001C                     endereco_cursor_lcd@endereco:
  1379                           	opt stack 0
  1380  00001C                     escreve_caractere_lcd@data:
  1381                           	opt stack 0
  1382  00001C                     write_timer_zero@timer:
  1383                           	opt stack 0
  1384  00001C                     mem_set@val:
  1385                           	opt stack 0
  1386  00001C                     mem_cmp@src:
  1387                           	opt stack 0
  1388                           
  1389                           ; 2 bytes @ 0x1B
  1390  00001C                     	ds	1
  1391  00001D                     ??_WriteSPI_:
  1392  00001D                     ??_init_lcd:
  1393  00001D                     posicao_cursor_lcd@coluna:
  1394                           	opt stack 0
  1395  00001D                     escreve_frase_ram_lcd@buffer:
  1396                           	opt stack 0
  1397                           
  1398                           ; 2 bytes @ 0x1C
  1399  00001D                     	ds	1
  1400  00001E                     ??_get_clust:
  1401  00001E                     posicao_cursor_lcd@linha:
  1402                           	opt stack 0
  1403  00001E                     mem_set@cnt:
  1404                           	opt stack 0
  1405  00001E                     mem_cmp@cnt:
  1406                           	opt stack 0
  1407  00001E                     ___lmul@multiplicand:
  1408                           	opt stack 0
  1409  00001E                     ___aldiv@divisor:
  1410                           	opt stack 0
  1411  00001E                     ___lldiv@divisor:
  1412                           	opt stack 0
  1413                           
  1414                           ; 4 bytes @ 0x1D
  1415  00001E                     	ds	1
  1416  00001F                     WriteSPI_@TempVar:
  1417                           	opt stack 0
  1418  00001F                     posicao_cursor_lcd@endereco:
  1419                           	opt stack 0
  1420                           
  1421                           ; 1 bytes @ 0x1E
  1422  00001F                     	ds	1
  1423  000020                     ??_mensagem_inicial:
  1424  000020                     ??_mem_cmp:
  1425  000020                     inicializa_SPI@SPI_mode:
  1426                           	opt stack 0
  1427  000020                     WriteSPI_@dado:
  1428                           	opt stack 0
  1429  000020                     mem_set@d:
  1430                           	opt stack 0
  1431                           
  1432                           ; 2 bytes @ 0x1F
  1433  000020                     	ds	1
  1434  000021                     ??_dummy_clocks:
  1435  000021                     command@arg:
  1436                           	opt stack 0
  1437                           
  1438                           ; 4 bytes @ 0x20
  1439  000021                     	ds	1
  1440  000022                     ___aldiv@counter:
  1441                           	opt stack 0
  1442  000022                     create_name@dj:
  1443                           	opt stack 0
  1444  000022                     ___lmul@product:
  1445                           	opt stack 0
  1446  000022                     ___lldiv@quotient:
  1447                           	opt stack 0
  1448                           
  1449                           ; 4 bytes @ 0x21
  1450  000022                     	ds	1
  1451  000023                     dummy_clocks@n:
  1452                           	opt stack 0
  1453  000023                     ___aldiv@sign:
  1454                           	opt stack 0
  1455  000023                     mem_cmp@d:
  1456                           	opt stack 0
  1457                           
  1458                           ; 2 bytes @ 0x22
  1459  000023                     	ds	1
  1460  000024                     dummy_clocks@i:
  1461                           	opt stack 0
  1462  000024                     create_name@path:
  1463                           	opt stack 0
  1464  000024                     ___aldiv@quotient:
  1465                           	opt stack 0
  1466                           
  1467                           ; 4 bytes @ 0x23
  1468  000024                     	ds	1
  1469  000025                     command@CRC:
  1470                           	opt stack 0
  1471  000025                     mem_cmp@s:
  1472                           	opt stack 0
  1473                           
  1474                           ; 2 bytes @ 0x24
  1475  000025                     	ds	1
  1476  000026                     ??_create_name:
  1477  000026                     ?_clust2sect:
  1478                           	opt stack 0
  1479  000026                     command@CMD:
  1480                           	opt stack 0
  1481  000026                     ___lldiv@counter:
  1482                           	opt stack 0
  1483  000026                     get_clust@fs:
  1484                           	opt stack 0
  1485  000026                     clust2sect@clst:
  1486                           	opt stack 0
  1487                           
  1488                           ; 4 bytes @ 0x25
  1489  000026                     	ds	1
  1490  000027                     command@argument:
  1491                           	opt stack 0
  1492  000027                     mem_cmp@r:
  1493                           	opt stack 0
  1494                           
  1495                           ; 2 bytes @ 0x26
  1496  000027                     	ds	1
  1497  000028                     ??_disk_readp:
  1498  000028                     ??_disk_writep:
  1499  000028                     reset@i:
  1500                           	opt stack 0
  1501  000028                     configura_baudrate_uart@baudrate:
  1502                           	opt stack 0
  1503  000028                     get_clust@clst:
  1504                           	opt stack 0
  1505                           
  1506                           ; 4 bytes @ 0x27
  1507  000028                     	ds	2
  1508  00002A                     reset@count:
  1509                           	opt stack 0
  1510  00002A                     clust2sect@fs:
  1511                           	opt stack 0
  1512                           
  1513                           ; 2 bytes @ 0x29
  1514  00002A                     	ds	2
  1515  00002C                     reset@buff:
  1516                           	opt stack 0
  1517                           
  1518                           ; 1 bytes @ 0x2B
  1519  00002C                     	ds	1
  1520  00002D                     tblptru	equ	0xFF8
  1521                           tblptrh	equ	0xFF7
  1522                           tblptrl	equ	0xFF6
  1523                           tablat	equ	0xFF5
  1524                           postinc0	equ	0xFEE
  1525                           wreg	equ	0xFE8
  1526                           postdec1	equ	0xFE5
  1527                           fsr1h	equ	0xFE2
  1528                           fsr1l	equ	0xFE1
  1529                           
  1530                           ; 1 bytes @ 0x2C
  1531 ;;
  1532 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1533 ;;
  1534 ;; *************** function _main *****************
  1535 ;; Defined at:
  1536 ;;		line 242 in file "main.c"
  1537 ;; Parameters:    Size  Location     Type
  1538 ;;		None
  1539 ;; Auto vars:     Size  Location     Type
  1540 ;;		None
  1541 ;; Return value:  Size  Location     Type
  1542 ;;                  1    wreg      void 
  1543 ;; Registers used:
  1544 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  1545 ;; Tracked objects:
  1546 ;;		On entry : 0/0
  1547 ;;		On exit  : 0/0
  1548 ;;		Unchanged: 0/0
  1549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1550 ;;      Params:         0       0       0       0       0       0       0       0       0
  1551 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1552 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1553 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1554 ;;Total ram usage:        0 bytes
  1555 ;; Hardware stack levels required when called:   14
  1556 ;; This function calls:
  1557 ;;		_controle_shrc
  1558 ;;		_escalonador
  1559 ;;		_inicializa_SPI
  1560 ;;		_inicializa_shrc
  1561 ;;		_inicializa_tarefas
  1562 ;;		_inicializa_uart
  1563 ;;		_init_hardware
  1564 ;;		_init_lcd
  1565 ;;		_mensagem_inicial
  1566 ;; This function is called by:
  1567 ;;		Startup code after reset
  1568 ;; This function uses a non-reentrant model
  1569 ;;
  1570                           
  1571                           	psect	text0
  1572  003026                     __ptext0:
  1573                           	opt stack 0
  1574  003026                     _main:
  1575                           	opt stack 17
  1576                           
  1577                           ;main.c: 251: init_hardware();
  1578                           
  1579                           ;incstack = 0
  1580  003026  ECA5  F018         	call	_init_hardware	;wreg free
  1581                           
  1582                           ;main.c: 252: inicializa_uart();
  1583  00302A  EC77  F018         	call	_inicializa_uart	;wreg free
  1584                           
  1585                           ;main.c: 253: init_lcd();
  1586  00302E  EC79  F014         	call	_init_lcd	;wreg free
  1587                           
  1588                           ;main.c: 254: inicializa_shrc();
  1589  003032  EC35  F019         	call	_inicializa_shrc	;wreg free
  1590                           
  1591                           ;main.c: 256: mensagem_inicial();
  1592  003036  EC96  F015         	call	_mensagem_inicial	;wreg free
  1593                           
  1594                           ;main.c: 257: inicializa_tarefas();
  1595  00303A  ECF6  F017         	call	_inicializa_tarefas	;wreg free
  1596                           
  1597                           ;main.c: 258: inicializa_SPI(0);
  1598  00303E  0E00               	movlw	0
  1599  003040  ECE4  F016         	call	_inicializa_SPI
  1600  003044                     
  1601                           ;main.c: 261: {
  1602                           ;main.c: 263: if ((sinaliza_int_timer == 1) && (2))
  1603  003044  043F               	decf	_sinaliza_int_timer,w,c
  1604  003046  A4D8               	btfss	status,2,c
  1605  003048  D004               	goto	l499
  1606                           
  1607                           ;main.c: 264: {
  1608                           ;main.c: 265: sinaliza_int_timer = 0;
  1609  00304A  0E00               	movlw	0
  1610  00304C  6E3F               	movwf	_sinaliza_int_timer,c
  1611                           
  1612                           ;main.c: 266: escalonador();
  1613  00304E  EC27  F014         	call	_escalonador	;wreg free
  1614  003052                     l499:
  1615                           
  1616                           ;main.c: 267: }
  1617                           ;main.c: 269: controle_shrc();
  1618  003052  EC26  F019         	call	_controle_shrc	;wreg free
  1619  003056  D7F6               	goto	l498
  1620  003058                     __end_of_main:
  1621                           	opt stack 0
  1622                           tblptru	equ	0xFF8
  1623                           tblptrh	equ	0xFF7
  1624                           tblptrl	equ	0xFF6
  1625                           tablat	equ	0xFF5
  1626                           postinc0	equ	0xFEE
  1627                           wreg	equ	0xFE8
  1628                           postdec1	equ	0xFE5
  1629                           fsr1h	equ	0xFE2
  1630                           fsr1l	equ	0xFE1
  1631                           status	equ	0xFD8
  1632                           
  1633 ;; *************** function _mensagem_inicial *****************
  1634 ;; Defined at:
  1635 ;;		line 282 in file "main.c"
  1636 ;; Parameters:    Size  Location     Type
  1637 ;;		None
  1638 ;; Auto vars:     Size  Location     Type
  1639 ;;  msg_dois       17   17[BANK0 ] const unsigned char [17]
  1640 ;;  msg_linha_um   17    0[BANK0 ] const unsigned char [17]
  1641 ;; Return value:  Size  Location     Type
  1642 ;;                  1    wreg      void 
  1643 ;; Registers used:
  1644 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1645 ;; Tracked objects:
  1646 ;;		On entry : 0/0
  1647 ;;		On exit  : 0/0
  1648 ;;		Unchanged: 0/0
  1649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1650 ;;      Params:         0       0       0       0       0       0       0       0       0
  1651 ;;      Locals:         0      34       0       0       0       0       0       0       0
  1652 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1653 ;;      Totals:         2      34       0       0       0       0       0       0       0
  1654 ;;Total ram usage:       36 bytes
  1655 ;; Hardware stack levels used:    1
  1656 ;; Hardware stack levels required when called:    5
  1657 ;; This function calls:
  1658 ;;		_escreve_cmd_lcd
  1659 ;;		_escreve_frase_ram_lcd
  1660 ;;		_posicao_cursor_lcd
  1661 ;; This function is called by:
  1662 ;;		_main
  1663 ;; This function uses a non-reentrant model
  1664 ;;
  1665                           
  1666                           	psect	text1
  1667  002B2C                     __ptext1:
  1668                           	opt stack 0
  1669  002B2C                     _mensagem_inicial:
  1670                           	opt stack 25
  1671                           
  1672                           ;main.c: 284: const unsigned char msg_linha_um[17] = "SDCard Init   ";
  1673                           
  1674                           ;incstack = 0
  1675  002B2C  0EF8               	movlw	low mensagem_inicial@F4027
  1676  002B2E  6EF6               	movwf	tblptrl,c
  1677  002B30                     	if	1	;There is more than 1 active tblptr byte
  1678  002B30  0E7E               	movlw	high mensagem_inicial@F4027
  1679  002B32  6EF7               	movwf	tblptrh,c
  1680  002B34                     	endif
  1681  002B34                     	if	0	;There are less than 3 active tblptr bytes
  1682  002B34                     	endif
  1683  002B34  EE20  F060         	lfsr	2,mensagem_inicial@msg_linha_um
  1684  002B38  0E10               	movlw	16
  1685  002B3A                     u8540:
  1686  002B3A  0009               	tblrd		*+
  1687  002B3C  CFF5 FFDE          	movff	tablat,postinc2
  1688  002B40  06E8               	decf	wreg,f,c
  1689  002B42  E2FB               	bc	u8540
  1690                           
  1691                           ;main.c: 285: const unsigned char msg_dois[17] = " 18/01/2022   ";
  1692  002B44  0EE7               	movlw	low mensagem_inicial@F4029
  1693  002B46  6EF6               	movwf	tblptrl,c
  1694  002B48                     	if	1	;There is more than 1 active tblptr byte
  1695  002B48  0E7E               	movlw	high mensagem_inicial@F4029
  1696  002B4A  6EF7               	movwf	tblptrh,c
  1697  002B4C                     	endif
  1698  002B4C                     	if	0	;There are less than 3 active tblptr bytes
  1699  002B4C                     	endif
  1700  002B4C  EE20  F071         	lfsr	2,mensagem_inicial@msg_dois
  1701  002B50  0E10               	movlw	16
  1702  002B52                     u8550:
  1703  002B52  0009               	tblrd		*+
  1704  002B54  CFF5 FFDE          	movff	tablat,postinc2
  1705  002B58  06E8               	decf	wreg,f,c
  1706  002B5A  E2FB               	bc	u8550
  1707                           
  1708                           ;main.c: 287: posicao_cursor_lcd(1,0);
  1709  002B5C  0E00               	movlw	0
  1710  002B5E  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  1711  002B60  0E01               	movlw	1
  1712  002B62  EC45  F016         	call	_posicao_cursor_lcd
  1713                           
  1714                           ;main.c: 288: escreve_frase_ram_lcd(msg_linha_um);
  1715  002B66  0E60               	movlw	low mensagem_inicial@msg_linha_um
  1716  002B68  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  1717  002B6A  0E00               	movlw	high mensagem_inicial@msg_linha_um
  1718  002B6C  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  1719  002B6E  EC6B  F017         	call	_escreve_frase_ram_lcd	;wreg free
  1720                           
  1721                           ;main.c: 290: posicao_cursor_lcd(2,0);
  1722  002B72  0E00               	movlw	0
  1723  002B74  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  1724  002B76  0E02               	movlw	2
  1725  002B78  EC45  F016         	call	_posicao_cursor_lcd
  1726                           
  1727                           ;main.c: 291: escreve_frase_ram_lcd(msg_dois);
  1728  002B7C  0E71               	movlw	low mensagem_inicial@msg_dois
  1729  002B7E  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  1730  002B80  0E00               	movlw	high mensagem_inicial@msg_dois
  1731  002B82  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  1732  002B84  EC6B  F017         	call	_escreve_frase_ram_lcd	;wreg free
  1733                           
  1734                           ;main.c: 293: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1735  002B88  0E1A               	movlw	26
  1736  002B8A  6E21               	movwf	(??_mensagem_inicial+1)& (0+255),c
  1737  002B8C  0E5E               	movlw	94
  1738  002B8E  6E20               	movwf	??_mensagem_inicial& (0+255),c
  1739  002B90  0E6E               	movlw	110
  1740  002B92                     u9107:
  1741  002B92  2EE8               	decfsz	wreg,f,c
  1742  002B94  D7FE               	bra	u9107
  1743  002B96  2E20               	decfsz	??_mensagem_inicial& (0+255),f,c
  1744  002B98  D7FC               	bra	u9107
  1745  002B9A  2E21               	decfsz	(??_mensagem_inicial+1)& (0+255),f,c
  1746  002B9C  D7FA               	bra	u9107
  1747  002B9E  D000               	nop2	
  1748                           
  1749                           ;main.c: 294: escreve_cmd_lcd(0b00000001);
  1750  002BA0  0E01               	movlw	1
  1751  002BA2  EC0F  F015         	call	_escreve_cmd_lcd
  1752  002BA6  0012               	return		;funcret
  1753  002BA8                     __end_of_mensagem_inicial:
  1754                           	opt stack 0
  1755                           tblptru	equ	0xFF8
  1756                           tblptrh	equ	0xFF7
  1757                           tblptrl	equ	0xFF6
  1758                           tablat	equ	0xFF5
  1759                           postinc0	equ	0xFEE
  1760                           wreg	equ	0xFE8
  1761                           postdec1	equ	0xFE5
  1762                           fsr1h	equ	0xFE2
  1763                           fsr1l	equ	0xFE1
  1764                           postinc2	equ	0xFDE
  1765                           status	equ	0xFD8
  1766                           
  1767 ;; *************** function _init_lcd *****************
  1768 ;; Defined at:
  1769 ;;		line 71 in file "bibliotecas/display/display_lcd.c"
  1770 ;; Parameters:    Size  Location     Type
  1771 ;;		None
  1772 ;; Auto vars:     Size  Location     Type
  1773 ;;		None
  1774 ;; Return value:  Size  Location     Type
  1775 ;;                  1    wreg      void 
  1776 ;; Registers used:
  1777 ;;		wreg, status,2, status,0, cstack
  1778 ;; Tracked objects:
  1779 ;;		On entry : 0/0
  1780 ;;		On exit  : 0/0
  1781 ;;		Unchanged: 0/0
  1782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1783 ;;      Params:         0       0       0       0       0       0       0       0       0
  1784 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1785 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1786 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1787 ;;Total ram usage:        1 bytes
  1788 ;; Hardware stack levels used:    1
  1789 ;; Hardware stack levels required when called:    4
  1790 ;; This function calls:
  1791 ;;		_delay
  1792 ;;		_escreve_cmd_lcd
  1793 ;; This function is called by:
  1794 ;;		_main
  1795 ;; This function uses a non-reentrant model
  1796 ;;
  1797                           
  1798                           	psect	text2
  1799  0028F2                     __ptext2:
  1800                           	opt stack 0
  1801  0028F2                     _init_lcd:
  1802                           	opt stack 26
  1803                           
  1804                           ;display_lcd.c: 74: TRISDbits.RD2 = 0;
  1805                           
  1806                           ;incstack = 0
  1807  0028F2  9495               	bcf	3989,2,c	;volatile
  1808                           
  1809                           ;display_lcd.c: 75: TRISDbits.RD1 = 0;
  1810  0028F4  9295               	bcf	3989,1,c	;volatile
  1811                           
  1812                           ;display_lcd.c: 76: TRISDbits.RD0 = 0;
  1813  0028F6  9095               	bcf	3989,0,c	;volatile
  1814                           
  1815                           ;display_lcd.c: 79: TRISDbits.RD4=0;
  1816  0028F8  9895               	bcf	3989,4,c	;volatile
  1817                           
  1818                           ;display_lcd.c: 80: TRISDbits.RD5=0;
  1819  0028FA  9A95               	bcf	3989,5,c	;volatile
  1820                           
  1821                           ;display_lcd.c: 81: TRISDbits.RD6=0;
  1822  0028FC  9C95               	bcf	3989,6,c	;volatile
  1823                           
  1824                           ;display_lcd.c: 82: TRISDbits.RD7=0;
  1825  0028FE  9E95               	bcf	3989,7,c	;volatile
  1826                           
  1827                           ;display_lcd.c: 89: PORTDbits.RD2 = 0;
  1828  002900  9483               	bcf	3971,2,c	;volatile
  1829                           
  1830                           ;display_lcd.c: 90: PORTDbits.RD1 = 0;
  1831  002902  9283               	bcf	3971,1,c	;volatile
  1832                           
  1833                           ;display_lcd.c: 91: PORTDbits.RD0 = 0;
  1834  002904  9083               	bcf	3971,0,c	;volatile
  1835                           
  1836                           ;display_lcd.c: 95: PORTDbits.RD7=0;
  1837  002906  9E83               	bcf	3971,7,c	;volatile
  1838                           
  1839                           ;display_lcd.c: 96: PORTDbits.RD6=0;
  1840  002908  9C83               	bcf	3971,6,c	;volatile
  1841                           
  1842                           ;display_lcd.c: 97: PORTDbits.RD5=1;
  1843  00290A  8A83               	bsf	3971,5,c	;volatile
  1844                           
  1845                           ;display_lcd.c: 98: PORTDbits.RD4=1;
  1846  00290C  8883               	bsf	3971,4,c	;volatile
  1847                           
  1848                           ;display_lcd.c: 103: _delay((unsigned long)((15)*(20000000/4000.0)));
  1849  00290E  0E62               	movlw	98
  1850  002910  6E1D               	movwf	??_init_lcd& (0+255),c
  1851  002912  0E66               	movlw	102
  1852  002914                     u9117:
  1853  002914  2EE8               	decfsz	wreg,f,c
  1854  002916  D7FE               	bra	u9117
  1855  002918  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  1856  00291A  D7FC               	bra	u9117
  1857                           
  1858                           ;display_lcd.c: 107: PORTDbits.RD0 = 1;
  1859  00291C  8083               	bsf	3971,0,c	;volatile
  1860                           
  1861                           ;display_lcd.c: 108: delay();
  1862  00291E  EC54  F018         	call	_delay	;wreg free
  1863                           
  1864                           ;display_lcd.c: 109: PORTDbits.RD0 = 0;
  1865  002922  9083               	bcf	3971,0,c	;volatile
  1866                           
  1867                           ;display_lcd.c: 110: delay();
  1868  002924  EC54  F018         	call	_delay	;wreg free
  1869                           
  1870                           ;display_lcd.c: 115: _delay((unsigned long)((5)*(20000000/4000.0)));
  1871  002928  0E21               	movlw	33
  1872  00292A  6E1D               	movwf	??_init_lcd& (0+255),c
  1873  00292C  0E76               	movlw	118
  1874  00292E                     u9127:
  1875  00292E  2EE8               	decfsz	wreg,f,c
  1876  002930  D7FE               	bra	u9127
  1877  002932  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  1878  002934  D7FC               	bra	u9127
  1879  002936  D000               	nop2	
  1880                           
  1881                           ;display_lcd.c: 118: PORTDbits.RD0 = 1;
  1882  002938  8083               	bsf	3971,0,c	;volatile
  1883                           
  1884                           ;display_lcd.c: 119: delay();
  1885  00293A  EC54  F018         	call	_delay	;wreg free
  1886                           
  1887                           ;display_lcd.c: 120: PORTDbits.RD0 = 0;
  1888  00293E  9083               	bcf	3971,0,c	;volatile
  1889                           
  1890                           ;display_lcd.c: 121: delay();
  1891  002940  EC54  F018         	call	_delay	;wreg free
  1892                           
  1893                           ;display_lcd.c: 126: _delay((unsigned long)((5)*(20000000/4000.0)));
  1894  002944  0E21               	movlw	33
  1895  002946  6E1D               	movwf	??_init_lcd& (0+255),c
  1896  002948  0E76               	movlw	118
  1897  00294A                     u9137:
  1898  00294A  2EE8               	decfsz	wreg,f,c
  1899  00294C  D7FE               	bra	u9137
  1900  00294E  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  1901  002950  D7FC               	bra	u9137
  1902  002952  D000               	nop2	
  1903                           
  1904                           ;display_lcd.c: 129: PORTDbits.RD0 = 1;
  1905  002954  8083               	bsf	3971,0,c	;volatile
  1906                           
  1907                           ;display_lcd.c: 130: delay();
  1908  002956  EC54  F018         	call	_delay	;wreg free
  1909                           
  1910                           ;display_lcd.c: 131: PORTDbits.RD0 = 0;
  1911  00295A  9083               	bcf	3971,0,c	;volatile
  1912                           
  1913                           ;display_lcd.c: 132: delay();
  1914  00295C  EC54  F018         	call	_delay	;wreg free
  1915                           
  1916                           ;display_lcd.c: 135: PORTDbits.RD7=0;
  1917  002960  9E83               	bcf	3971,7,c	;volatile
  1918                           
  1919                           ;display_lcd.c: 136: PORTDbits.RD6=0;
  1920  002962  9C83               	bcf	3971,6,c	;volatile
  1921                           
  1922                           ;display_lcd.c: 137: PORTDbits.RD5=1;
  1923  002964  8A83               	bsf	3971,5,c	;volatile
  1924                           
  1925                           ;display_lcd.c: 138: PORTDbits.RD4=0;
  1926  002966  9883               	bcf	3971,4,c	;volatile
  1927                           
  1928                           ;display_lcd.c: 142: PORTDbits.RD0 = 1;
  1929  002968  8083               	bsf	3971,0,c	;volatile
  1930                           
  1931                           ;display_lcd.c: 143: delay();
  1932  00296A  EC54  F018         	call	_delay	;wreg free
  1933                           
  1934                           ;display_lcd.c: 144: PORTDbits.RD0 = 0;
  1935  00296E  9083               	bcf	3971,0,c	;volatile
  1936                           
  1937                           ;display_lcd.c: 145: delay();
  1938  002970  EC54  F018         	call	_delay	;wreg free
  1939                           
  1940                           ;display_lcd.c: 149: escreve_cmd_lcd(0b00101000);
  1941  002974  0E28               	movlw	40
  1942  002976  EC0F  F015         	call	_escreve_cmd_lcd
  1943                           
  1944                           ;display_lcd.c: 150: escreve_cmd_lcd(0b00000110);
  1945  00297A  0E06               	movlw	6
  1946  00297C  EC0F  F015         	call	_escreve_cmd_lcd
  1947                           
  1948                           ;display_lcd.c: 151: escreve_cmd_lcd(0b00001110);
  1949  002980  0E0E               	movlw	14
  1950  002982  EC0F  F015         	call	_escreve_cmd_lcd
  1951                           
  1952                           ;display_lcd.c: 152: escreve_cmd_lcd(0b00000001);
  1953  002986  0E01               	movlw	1
  1954  002988  EC0F  F015         	call	_escreve_cmd_lcd
  1955  00298C  0012               	return		;funcret
  1956  00298E                     __end_of_init_lcd:
  1957                           	opt stack 0
  1958                           tblptru	equ	0xFF8
  1959                           tblptrh	equ	0xFF7
  1960                           tblptrl	equ	0xFF6
  1961                           tablat	equ	0xFF5
  1962                           postinc0	equ	0xFEE
  1963                           wreg	equ	0xFE8
  1964                           postdec1	equ	0xFE5
  1965                           fsr1h	equ	0xFE2
  1966                           fsr1l	equ	0xFE1
  1967                           postinc2	equ	0xFDE
  1968                           status	equ	0xFD8
  1969                           
  1970 ;; *************** function _init_hardware *****************
  1971 ;; Defined at:
  1972 ;;		line 55 in file "bibliotecas/hardware.c"
  1973 ;; Parameters:    Size  Location     Type
  1974 ;;		None
  1975 ;; Auto vars:     Size  Location     Type
  1976 ;;		None
  1977 ;; Return value:  Size  Location     Type
  1978 ;;                  1    wreg      void 
  1979 ;; Registers used:
  1980 ;;		wreg, status,2, cstack
  1981 ;; Tracked objects:
  1982 ;;		On entry : 0/0
  1983 ;;		On exit  : 0/0
  1984 ;;		Unchanged: 0/0
  1985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1986 ;;      Params:         0       0       0       0       0       0       0       0       0
  1987 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1988 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1989 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1990 ;;Total ram usage:        0 bytes
  1991 ;; Hardware stack levels used:    1
  1992 ;; Hardware stack levels required when called:    4
  1993 ;; This function calls:
  1994 ;;		_config_timer_dois
  1995 ;;		_config_timer_zero
  1996 ;;		_inicializa_adc
  1997 ;;		_init_interrupt
  1998 ;;		_init_oscilador
  1999 ;;		_init_ports
  2000 ;; This function is called by:
  2001 ;;		_main
  2002 ;; This function uses a non-reentrant model
  2003 ;;
  2004                           
  2005                           	psect	text3
  2006  00314A                     __ptext3:
  2007                           	opt stack 0
  2008  00314A                     _init_hardware:
  2009                           	opt stack 26
  2010                           
  2011                           ;hardware.c: 58: init_oscilador();
  2012                           
  2013                           ;incstack = 0
  2014  00314A  EC31  F019         	call	_init_oscilador	;wreg free
  2015                           
  2016                           ;hardware.c: 61: init_ports();
  2017  00314E  ECB2  F018         	call	_init_ports	;wreg free
  2018                           
  2019                           ;hardware.c: 64: config_timer_zero();
  2020  003152  ECCC  F018         	call	_config_timer_zero	;wreg free
  2021                           
  2022                           ;hardware.c: 67: config_timer_dois();
  2023  003156  EC1A  F019         	call	_config_timer_dois	;wreg free
  2024                           
  2025                           ;hardware.c: 70: init_interrupt();
  2026  00315A  ECBF  F018         	call	_init_interrupt	;wreg free
  2027                           
  2028                           ;hardware.c: 73: inicializa_adc();
  2029  00315E  EC66  F018         	call	_inicializa_adc	;wreg free
  2030  003162  0012               	return		;funcret
  2031  003164                     __end_of_init_hardware:
  2032                           	opt stack 0
  2033                           tblptru	equ	0xFF8
  2034                           tblptrh	equ	0xFF7
  2035                           tblptrl	equ	0xFF6
  2036                           tablat	equ	0xFF5
  2037                           postinc0	equ	0xFEE
  2038                           wreg	equ	0xFE8
  2039                           postdec1	equ	0xFE5
  2040                           fsr1h	equ	0xFE2
  2041                           fsr1l	equ	0xFE1
  2042                           postinc2	equ	0xFDE
  2043                           status	equ	0xFD8
  2044                           
  2045 ;; *************** function _init_ports *****************
  2046 ;; Defined at:
  2047 ;;		line 159 in file "bibliotecas/hardware.c"
  2048 ;; Parameters:    Size  Location     Type
  2049 ;;		None
  2050 ;; Auto vars:     Size  Location     Type
  2051 ;;		None
  2052 ;; Return value:  Size  Location     Type
  2053 ;;                  1    wreg      void 
  2054 ;; Registers used:
  2055 ;;		wreg, status,2
  2056 ;; Tracked objects:
  2057 ;;		On entry : 0/0
  2058 ;;		On exit  : 0/0
  2059 ;;		Unchanged: 0/0
  2060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2061 ;;      Params:         0       0       0       0       0       0       0       0       0
  2062 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2063 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2064 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2065 ;;Total ram usage:        0 bytes
  2066 ;; Hardware stack levels used:    1
  2067 ;; Hardware stack levels required when called:    2
  2068 ;; This function calls:
  2069 ;;		Nothing
  2070 ;; This function is called by:
  2071 ;;		_init_hardware
  2072 ;; This function uses a non-reentrant model
  2073 ;;
  2074                           
  2075                           	psect	text4
  2076  003164                     __ptext4:
  2077                           	opt stack 0
  2078  003164                     _init_ports:
  2079                           	opt stack 27
  2080                           
  2081                           ;hardware.c: 161: TRISB = 0b00000001;
  2082                           
  2083                           ;incstack = 0
  2084  003164  0E01               	movlw	1
  2085  003166  6E93               	movwf	3987,c	;volatile
  2086                           
  2087                           ;hardware.c: 162: LATB = 0x00;
  2088  003168  0E00               	movlw	0
  2089  00316A  6E8A               	movwf	3978,c	;volatile
  2090                           
  2091                           ;hardware.c: 163: TRISD = 0x00;
  2092  00316C  0E00               	movlw	0
  2093  00316E  6E95               	movwf	3989,c	;volatile
  2094                           
  2095                           ;hardware.c: 164: TRISA = 0b00000111;
  2096  003170  0E07               	movlw	7
  2097  003172  6E92               	movwf	3986,c	;volatile
  2098                           
  2099                           ;hardware.c: 165: TRISC = 0x01111111;
  2100  003174  0E11               	movlw	17
  2101  003176  6E94               	movwf	3988,c	;volatile
  2102                           
  2103                           ;hardware.c: 166: TRISE = 0b00000011;
  2104  003178  0E03               	movlw	3
  2105  00317A  6E96               	movwf	3990,c	;volatile
  2106  00317C  0012               	return		;funcret
  2107  00317E                     __end_of_init_ports:
  2108                           	opt stack 0
  2109                           tblptru	equ	0xFF8
  2110                           tblptrh	equ	0xFF7
  2111                           tblptrl	equ	0xFF6
  2112                           tablat	equ	0xFF5
  2113                           postinc0	equ	0xFEE
  2114                           wreg	equ	0xFE8
  2115                           postdec1	equ	0xFE5
  2116                           fsr1h	equ	0xFE2
  2117                           fsr1l	equ	0xFE1
  2118                           postinc2	equ	0xFDE
  2119                           status	equ	0xFD8
  2120                           
  2121 ;; *************** function _init_oscilador *****************
  2122 ;; Defined at:
  2123 ;;		line 176 in file "bibliotecas/hardware.c"
  2124 ;; Parameters:    Size  Location     Type
  2125 ;;		None
  2126 ;; Auto vars:     Size  Location     Type
  2127 ;;		None
  2128 ;; Return value:  Size  Location     Type
  2129 ;;                  1    wreg      void 
  2130 ;; Registers used:
  2131 ;;		None
  2132 ;; Tracked objects:
  2133 ;;		On entry : 0/0
  2134 ;;		On exit  : 0/0
  2135 ;;		Unchanged: 0/0
  2136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2137 ;;      Params:         0       0       0       0       0       0       0       0       0
  2138 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2139 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2140 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2141 ;;Total ram usage:        0 bytes
  2142 ;; Hardware stack levels used:    1
  2143 ;; Hardware stack levels required when called:    2
  2144 ;; This function calls:
  2145 ;;		Nothing
  2146 ;; This function is called by:
  2147 ;;		_init_hardware
  2148 ;; This function uses a non-reentrant model
  2149 ;;
  2150                           
  2151                           	psect	text5
  2152  003262                     __ptext5:
  2153                           	opt stack 0
  2154  003262                     _init_oscilador:
  2155                           	opt stack 27
  2156                           
  2157                           ;hardware.c: 179: OSCCONbits.IRCF0 = 1;
  2158                           
  2159                           ;incstack = 0
  2160  003262  88D3               	bsf	4051,4,c	;volatile
  2161                           
  2162                           ;hardware.c: 180: OSCCONbits.IRCF1 = 1;
  2163  003264  8AD3               	bsf	4051,5,c	;volatile
  2164                           
  2165                           ;hardware.c: 181: OSCCONbits.IRCF2 = 1;
  2166  003266  8CD3               	bsf	4051,6,c	;volatile
  2167  003268  0012               	return		;funcret
  2168  00326A                     __end_of_init_oscilador:
  2169                           	opt stack 0
  2170                           tblptru	equ	0xFF8
  2171                           tblptrh	equ	0xFF7
  2172                           tblptrl	equ	0xFF6
  2173                           tablat	equ	0xFF5
  2174                           postinc0	equ	0xFEE
  2175                           wreg	equ	0xFE8
  2176                           postdec1	equ	0xFE5
  2177                           fsr1h	equ	0xFE2
  2178                           fsr1l	equ	0xFE1
  2179                           postinc2	equ	0xFDE
  2180                           status	equ	0xFD8
  2181                           
  2182 ;; *************** function _init_interrupt *****************
  2183 ;; Defined at:
  2184 ;;		line 98 in file "bibliotecas/hardware.c"
  2185 ;; Parameters:    Size  Location     Type
  2186 ;;		None
  2187 ;; Auto vars:     Size  Location     Type
  2188 ;;		None
  2189 ;; Return value:  Size  Location     Type
  2190 ;;                  1    wreg      void 
  2191 ;; Registers used:
  2192 ;;		wreg, status,2
  2193 ;; Tracked objects:
  2194 ;;		On entry : 0/0
  2195 ;;		On exit  : 0/0
  2196 ;;		Unchanged: 0/0
  2197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2198 ;;      Params:         0       0       0       0       0       0       0       0       0
  2199 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2200 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2201 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2202 ;;Total ram usage:        0 bytes
  2203 ;; Hardware stack levels used:    1
  2204 ;; Hardware stack levels required when called:    2
  2205 ;; This function calls:
  2206 ;;		Nothing
  2207 ;; This function is called by:
  2208 ;;		_init_hardware
  2209 ;; This function uses a non-reentrant model
  2210 ;;
  2211                           
  2212                           	psect	text6
  2213  00317E                     __ptext6:
  2214                           	opt stack 0
  2215  00317E                     _init_interrupt:
  2216                           	opt stack 27
  2217                           
  2218                           ;hardware.c: 100: INTCON = 0b01100000;
  2219                           
  2220                           ;incstack = 0
  2221  00317E  0E60               	movlw	96
  2222  003180  6EF2               	movwf	intcon,c	;volatile
  2223                           
  2224                           ;hardware.c: 101: INTCON2 = 0b00000000;
  2225  003182  0E00               	movlw	0
  2226  003184  6EF1               	movwf	intcon2,c	;volatile
  2227                           
  2228                           ;hardware.c: 102: INTCON3 = 0b00000000;
  2229  003186  0E00               	movlw	0
  2230  003188  6EF0               	movwf	intcon3,c	;volatile
  2231                           
  2232                           ;hardware.c: 104: PIE1 = 0b00101000;
  2233  00318A  0E28               	movlw	40
  2234  00318C  6E9D               	movwf	3997,c	;volatile
  2235                           
  2236                           ;hardware.c: 106: PIR1bits.SSPIF = 0;
  2237  00318E  969E               	bcf	3998,3,c	;volatile
  2238                           
  2239                           ;hardware.c: 107: PIE1bits.SSPIE = 1;
  2240  003190  869D               	bsf	3997,3,c	;volatile
  2241                           
  2242                           ;hardware.c: 108: IPR1bits.SSPIP = 0;
  2243  003192  969F               	bcf	3999,3,c	;volatile
  2244                           
  2245                           ;hardware.c: 109: RCONbits.IPEN = 1;
  2246  003194  8ED0               	bsf	4048,7,c	;volatile
  2247  003196  0012               	return		;funcret
  2248  003198                     __end_of_init_interrupt:
  2249                           	opt stack 0
  2250                           tblptru	equ	0xFF8
  2251                           tblptrh	equ	0xFF7
  2252                           tblptrl	equ	0xFF6
  2253                           tablat	equ	0xFF5
  2254                           intcon	equ	0xFF2
  2255                           intcon2	equ	0xFF1
  2256                           intcon3	equ	0xFF0
  2257                           postinc0	equ	0xFEE
  2258                           wreg	equ	0xFE8
  2259                           postdec1	equ	0xFE5
  2260                           fsr1h	equ	0xFE2
  2261                           fsr1l	equ	0xFE1
  2262                           postinc2	equ	0xFDE
  2263                           status	equ	0xFD8
  2264                           
  2265 ;; *************** function _inicializa_adc *****************
  2266 ;; Defined at:
  2267 ;;		line 40 in file "bibliotecas/adc.c"
  2268 ;; Parameters:    Size  Location     Type
  2269 ;;		None
  2270 ;; Auto vars:     Size  Location     Type
  2271 ;;		None
  2272 ;; Return value:  Size  Location     Type
  2273 ;;                  1    wreg      void 
  2274 ;; Registers used:
  2275 ;;		wreg, status,2
  2276 ;; Tracked objects:
  2277 ;;		On entry : 0/0
  2278 ;;		On exit  : 0/0
  2279 ;;		Unchanged: 0/0
  2280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2281 ;;      Params:         0       0       0       0       0       0       0       0       0
  2282 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2283 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2284 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2285 ;;Total ram usage:        0 bytes
  2286 ;; Hardware stack levels used:    1
  2287 ;; Hardware stack levels required when called:    2
  2288 ;; This function calls:
  2289 ;;		Nothing
  2290 ;; This function is called by:
  2291 ;;		_init_hardware
  2292 ;; This function uses a non-reentrant model
  2293 ;;
  2294                           
  2295                           	psect	text7
  2296  0030CC                     __ptext7:
  2297                           	opt stack 0
  2298  0030CC                     _inicializa_adc:
  2299                           	opt stack 27
  2300                           
  2301                           ;adc.c: 43: ADCON1=0x0B;
  2302                           
  2303                           ;incstack = 0
  2304  0030CC  0E0B               	movlw	11
  2305  0030CE  6EC1               	movwf	4033,c	;volatile
  2306                           
  2307                           ;adc.c: 44: ADCON1bits.VCFG0 = 0;
  2308  0030D0  98C1               	bcf	4033,4,c	;volatile
  2309                           
  2310                           ;adc.c: 45: ADCON1bits.VCFG1 = 0;
  2311  0030D2  9AC1               	bcf	4033,5,c	;volatile
  2312                           
  2313                           ;adc.c: 47: ADCON1bits.PCFG0 = 1;
  2314  0030D4  80C1               	bsf	4033,0,c	;volatile
  2315                           
  2316                           ;adc.c: 48: ADCON1bits.PCFG1 = 0;
  2317  0030D6  92C1               	bcf	4033,1,c	;volatile
  2318                           
  2319                           ;adc.c: 49: ADCON1bits.PCFG2 = 1;
  2320  0030D8  84C1               	bsf	4033,2,c	;volatile
  2321                           
  2322                           ;adc.c: 50: ADCON1bits.PCFG3 = 1;
  2323  0030DA  86C1               	bsf	4033,3,c	;volatile
  2324                           
  2325                           ;adc.c: 52: ADCON2bits.ADFM = 1;
  2326  0030DC  8EC0               	bsf	4032,7,c	;volatile
  2327                           
  2328                           ;adc.c: 53: ADCON2bits.ADCS0 = 0;
  2329  0030DE  90C0               	bcf	4032,0,c	;volatile
  2330                           
  2331                           ;adc.c: 54: ADCON2bits.ADCS1 = 1;
  2332  0030E0  82C0               	bsf	4032,1,c	;volatile
  2333                           
  2334                           ;adc.c: 55: ADCON2bits.ADCS2 = 1;
  2335  0030E2  84C0               	bsf	4032,2,c	;volatile
  2336                           
  2337                           ;adc.c: 56: ADCON2bits.ACQT0 = 1;
  2338  0030E4  86C0               	bsf	4032,3,c	;volatile
  2339                           
  2340                           ;adc.c: 57: ADCON2bits.ACQT1 = 0;
  2341  0030E6  98C0               	bcf	4032,4,c	;volatile
  2342                           
  2343                           ;adc.c: 58: ADCON2bits.ACQT2 = 0;
  2344  0030E8  9AC0               	bcf	4032,5,c	;volatile
  2345                           
  2346                           ;adc.c: 59: ADCON0bits.ADON = 1;
  2347  0030EA  80C2               	bsf	4034,0,c	;volatile
  2348  0030EC  0012               	return		;funcret
  2349  0030EE                     __end_of_inicializa_adc:
  2350                           	opt stack 0
  2351                           tblptru	equ	0xFF8
  2352                           tblptrh	equ	0xFF7
  2353                           tblptrl	equ	0xFF6
  2354                           tablat	equ	0xFF5
  2355                           intcon	equ	0xFF2
  2356                           intcon2	equ	0xFF1
  2357                           intcon3	equ	0xFF0
  2358                           postinc0	equ	0xFEE
  2359                           wreg	equ	0xFE8
  2360                           postdec1	equ	0xFE5
  2361                           fsr1h	equ	0xFE2
  2362                           fsr1l	equ	0xFE1
  2363                           postinc2	equ	0xFDE
  2364                           status	equ	0xFD8
  2365                           
  2366 ;; *************** function _config_timer_zero *****************
  2367 ;; Defined at:
  2368 ;;		line 83 in file "bibliotecas/hardware.c"
  2369 ;; Parameters:    Size  Location     Type
  2370 ;;		None
  2371 ;; Auto vars:     Size  Location     Type
  2372 ;;		None
  2373 ;; Return value:  Size  Location     Type
  2374 ;;                  1    wreg      void 
  2375 ;; Registers used:
  2376 ;;		wreg, status,2, cstack
  2377 ;; Tracked objects:
  2378 ;;		On entry : 0/0
  2379 ;;		On exit  : 0/0
  2380 ;;		Unchanged: 0/0
  2381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2382 ;;      Params:         0       0       0       0       0       0       0       0       0
  2383 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2384 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2385 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2386 ;;Total ram usage:        0 bytes
  2387 ;; Hardware stack levels used:    1
  2388 ;; Hardware stack levels required when called:    3
  2389 ;; This function calls:
  2390 ;;		_write_timer_zero
  2391 ;; This function is called by:
  2392 ;;		_init_hardware
  2393 ;; This function uses a non-reentrant model
  2394 ;;
  2395                           
  2396                           	psect	text8
  2397  003198                     __ptext8:
  2398                           	opt stack 0
  2399  003198                     _config_timer_zero:
  2400                           	opt stack 26
  2401                           
  2402                           ;hardware.c: 85: T0CON = 0b11000011;
  2403                           
  2404                           ;incstack = 0
  2405  003198  0EC3               	movlw	195
  2406  00319A  6ED5               	movwf	4053,c	;volatile
  2407                           
  2408                           ;hardware.c: 86: SPPCON = 0b00000000;
  2409  00319C  0E00               	movlw	0
  2410  00319E  6E65               	movwf	3941,c	;volatile
  2411                           
  2412                           ;hardware.c: 87: SPPCFG = 0b00000000;
  2413  0031A0  0E00               	movlw	0
  2414  0031A2  6E63               	movwf	3939,c	;volatile
  2415                           
  2416                           ;hardware.c: 88: write_timer_zero(0x0083);
  2417  0031A4  0E00               	movlw	0
  2418  0031A6  6E1B               	movwf	write_timer_zero@timer0+1,c
  2419  0031A8  0E83               	movlw	131
  2420  0031AA  6E1A               	movwf	write_timer_zero@timer0,c
  2421  0031AC  ECEF  F018         	call	_write_timer_zero	;wreg free
  2422  0031B0  0012               	return		;funcret
  2423  0031B2                     __end_of_config_timer_zero:
  2424                           	opt stack 0
  2425                           tblptru	equ	0xFF8
  2426                           tblptrh	equ	0xFF7
  2427                           tblptrl	equ	0xFF6
  2428                           tablat	equ	0xFF5
  2429                           intcon	equ	0xFF2
  2430                           intcon2	equ	0xFF1
  2431                           intcon3	equ	0xFF0
  2432                           postinc0	equ	0xFEE
  2433                           wreg	equ	0xFE8
  2434                           postdec1	equ	0xFE5
  2435                           fsr1h	equ	0xFE2
  2436                           fsr1l	equ	0xFE1
  2437                           postinc2	equ	0xFDE
  2438                           status	equ	0xFD8
  2439                           
  2440 ;; *************** function _write_timer_zero *****************
  2441 ;; Defined at:
  2442 ;;		line 143 in file "bibliotecas/hardware.c"
  2443 ;; Parameters:    Size  Location     Type
  2444 ;;  timer0          2   25[COMRAM] unsigned int 
  2445 ;; Auto vars:     Size  Location     Type
  2446 ;;  timer           2   27[COMRAM] struct Timers
  2447 ;; Return value:  Size  Location     Type
  2448 ;;                  1    wreg      void 
  2449 ;; Registers used:
  2450 ;;		None
  2451 ;; Tracked objects:
  2452 ;;		On entry : 0/0
  2453 ;;		On exit  : 0/0
  2454 ;;		Unchanged: 0/0
  2455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2456 ;;      Params:         2       0       0       0       0       0       0       0       0
  2457 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2458 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2459 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2460 ;;Total ram usage:        4 bytes
  2461 ;; Hardware stack levels used:    1
  2462 ;; Hardware stack levels required when called:    2
  2463 ;; This function calls:
  2464 ;;		Nothing
  2465 ;; This function is called by:
  2466 ;;		_config_timer_zero
  2467 ;; This function uses a non-reentrant model
  2468 ;;
  2469                           
  2470                           	psect	text9
  2471  0031DE                     __ptext9:
  2472                           	opt stack 0
  2473  0031DE                     _write_timer_zero:
  2474                           	opt stack 26
  2475                           
  2476                           ;hardware.c: 145: union Timers timer;
  2477                           ;hardware.c: 147: timer.lt = timer0;
  2478                           
  2479                           ;incstack = 0
  2480  0031DE  C01A  F01C         	movff	write_timer_zero@timer0,write_timer_zero@timer
  2481  0031E2  C01B  F01D         	movff	write_timer_zero@timer0+1,write_timer_zero@timer+1
  2482                           
  2483                           ;hardware.c: 149: TMR0H = timer.bt[1];
  2484  0031E6  C01D  FFD7         	movff	write_timer_zero@timer+1,4055	;volatile
  2485                           
  2486                           ;hardware.c: 150: TMR0L = timer.bt[0];
  2487  0031EA  C01C  FFD6         	movff	write_timer_zero@timer,4054	;volatile
  2488  0031EE  0012               	return		;funcret
  2489  0031F0                     __end_of_write_timer_zero:
  2490                           	opt stack 0
  2491                           tblptru	equ	0xFF8
  2492                           tblptrh	equ	0xFF7
  2493                           tblptrl	equ	0xFF6
  2494                           tablat	equ	0xFF5
  2495                           intcon	equ	0xFF2
  2496                           intcon2	equ	0xFF1
  2497                           intcon3	equ	0xFF0
  2498                           postinc0	equ	0xFEE
  2499                           wreg	equ	0xFE8
  2500                           postdec1	equ	0xFE5
  2501                           fsr1h	equ	0xFE2
  2502                           fsr1l	equ	0xFE1
  2503                           postinc2	equ	0xFDE
  2504                           status	equ	0xFD8
  2505                           
  2506 ;; *************** function _config_timer_dois *****************
  2507 ;; Defined at:
  2508 ;;		line 205 in file "bibliotecas/hardware.c"
  2509 ;; Parameters:    Size  Location     Type
  2510 ;;		None
  2511 ;; Auto vars:     Size  Location     Type
  2512 ;;		None
  2513 ;; Return value:  Size  Location     Type
  2514 ;;                  1    wreg      void 
  2515 ;; Registers used:
  2516 ;;		wreg, status,2
  2517 ;; Tracked objects:
  2518 ;;		On entry : 0/0
  2519 ;;		On exit  : 0/0
  2520 ;;		Unchanged: 0/0
  2521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2522 ;;      Params:         0       0       0       0       0       0       0       0       0
  2523 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2524 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2525 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2526 ;;Total ram usage:        0 bytes
  2527 ;; Hardware stack levels used:    1
  2528 ;; Hardware stack levels required when called:    2
  2529 ;; This function calls:
  2530 ;;		Nothing
  2531 ;; This function is called by:
  2532 ;;		_init_hardware
  2533 ;; This function uses a non-reentrant model
  2534 ;;
  2535                           
  2536                           	psect	text10
  2537  003234                     __ptext10:
  2538                           	opt stack 0
  2539  003234                     _config_timer_dois:
  2540                           	opt stack 27
  2541                           
  2542                           ;hardware.c: 207: T2CON = 0b00000100;
  2543                           
  2544                           ;incstack = 0
  2545  003234  0E04               	movlw	4
  2546  003236  6ECA               	movwf	4042,c	;volatile
  2547                           
  2548                           ;hardware.c: 208: TMR2 = 0;
  2549  003238  0E00               	movlw	0
  2550  00323A  6ECC               	movwf	4044,c	;volatile
  2551                           
  2552                           ;hardware.c: 209: PR2 = 0xFF;
  2553  00323C  68CB               	setf	4043,c	;volatile
  2554  00323E  0012               	return		;funcret
  2555  003240                     __end_of_config_timer_dois:
  2556                           	opt stack 0
  2557                           tblptru	equ	0xFF8
  2558                           tblptrh	equ	0xFF7
  2559                           tblptrl	equ	0xFF6
  2560                           tablat	equ	0xFF5
  2561                           intcon	equ	0xFF2
  2562                           intcon2	equ	0xFF1
  2563                           intcon3	equ	0xFF0
  2564                           postinc0	equ	0xFEE
  2565                           wreg	equ	0xFE8
  2566                           postdec1	equ	0xFE5
  2567                           fsr1h	equ	0xFE2
  2568                           fsr1l	equ	0xFE1
  2569                           postinc2	equ	0xFDE
  2570                           status	equ	0xFD8
  2571                           
  2572 ;; *************** function _inicializa_uart *****************
  2573 ;; Defined at:
  2574 ;;		line 206 in file "bibliotecas/uart.c"
  2575 ;; Parameters:    Size  Location     Type
  2576 ;;		None
  2577 ;; Auto vars:     Size  Location     Type
  2578 ;;		None
  2579 ;; Return value:  Size  Location     Type
  2580 ;;                  1    wreg      void 
  2581 ;; Registers used:
  2582 ;;		wreg, status,2, status,0, cstack
  2583 ;; Tracked objects:
  2584 ;;		On entry : 0/0
  2585 ;;		On exit  : 0/0
  2586 ;;		Unchanged: 0/0
  2587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2588 ;;      Params:         0       0       0       0       0       0       0       0       0
  2589 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2590 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2591 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2592 ;;Total ram usage:        0 bytes
  2593 ;; Hardware stack levels used:    1
  2594 ;; Hardware stack levels required when called:    4
  2595 ;; This function calls:
  2596 ;;		_configura_baudrate_uart
  2597 ;; This function is called by:
  2598 ;;		_main
  2599 ;; This function uses a non-reentrant model
  2600 ;;
  2601                           
  2602                           	psect	text11
  2603  0030EE                     __ptext11:
  2604                           	opt stack 0
  2605  0030EE                     _inicializa_uart:
  2606                           	opt stack 26
  2607                           
  2608                           ;uart.c: 208: TRISCbits.RC6 = 0;
  2609                           
  2610                           ;incstack = 0
  2611  0030EE  9C94               	bcf	3988,6,c	;volatile
  2612                           
  2613                           ;uart.c: 209: TRISCbits.RC7 = 0;
  2614  0030F0  9E94               	bcf	3988,7,c	;volatile
  2615                           
  2616                           ;uart.c: 211: (void)configura_baudrate_uart(9600);
  2617  0030F2  0E80               	movlw	128
  2618  0030F4  6E28               	movwf	configura_baudrate_uart@baudrate,c
  2619  0030F6  0E25               	movlw	37
  2620  0030F8  6E29               	movwf	configura_baudrate_uart@baudrate+1,c
  2621  0030FA  0E00               	movlw	0
  2622  0030FC  6E2A               	movwf	configura_baudrate_uart@baudrate+2,c
  2623  0030FE  0E00               	movlw	0
  2624  003100  6E2B               	movwf	configura_baudrate_uart@baudrate+3,c
  2625  003102  EC32  F010         	call	_configura_baudrate_uart	;wreg free
  2626                           
  2627                           ;uart.c: 213: TXSTA = 0x20;
  2628  003106  0E20               	movlw	32
  2629  003108  6EAC               	movwf	4012,c	;volatile
  2630                           
  2631                           ;uart.c: 214: RCSTA = 0x90;
  2632  00310A  0E90               	movlw	144
  2633  00310C  6EAB               	movwf	4011,c	;volatile
  2634  00310E  0012               	return		;funcret
  2635  003110                     __end_of_inicializa_uart:
  2636                           	opt stack 0
  2637                           tblptru	equ	0xFF8
  2638                           tblptrh	equ	0xFF7
  2639                           tblptrl	equ	0xFF6
  2640                           tablat	equ	0xFF5
  2641                           intcon	equ	0xFF2
  2642                           intcon2	equ	0xFF1
  2643                           intcon3	equ	0xFF0
  2644                           postinc0	equ	0xFEE
  2645                           wreg	equ	0xFE8
  2646                           postdec1	equ	0xFE5
  2647                           fsr1h	equ	0xFE2
  2648                           fsr1l	equ	0xFE1
  2649                           postinc2	equ	0xFDE
  2650                           status	equ	0xFD8
  2651                           
  2652 ;; *************** function _configura_baudrate_uart *****************
  2653 ;; Defined at:
  2654 ;;		line 50 in file "bibliotecas/uart.c"
  2655 ;; Parameters:    Size  Location     Type
  2656 ;;  baudrate        4   39[COMRAM] const long 
  2657 ;; Auto vars:     Size  Location     Type
  2658 ;;  x               2    8[BANK0 ] unsigned int 
  2659 ;; Return value:  Size  Location     Type
  2660 ;;                  1    wreg      unsigned char 
  2661 ;; Registers used:
  2662 ;;		wreg, status,2, status,0, cstack
  2663 ;; Tracked objects:
  2664 ;;		On entry : 0/0
  2665 ;;		On exit  : 0/0
  2666 ;;		Unchanged: 0/0
  2667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2668 ;;      Params:         4       0       0       0       0       0       0       0       0
  2669 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2670 ;;      Temps:          0       8       0       0       0       0       0       0       0
  2671 ;;      Totals:         4      10       0       0       0       0       0       0       0
  2672 ;;Total ram usage:       14 bytes
  2673 ;; Hardware stack levels used:    1
  2674 ;; Hardware stack levels required when called:    3
  2675 ;; This function calls:
  2676 ;;		___aldiv
  2677 ;; This function is called by:
  2678 ;;		_inicializa_uart
  2679 ;; This function uses a non-reentrant model
  2680 ;;
  2681                           
  2682                           	psect	text12
  2683  002064                     __ptext12:
  2684                           	opt stack 0
  2685  002064                     _configura_baudrate_uart:
  2686                           	opt stack 26
  2687                           
  2688                           ;uart.c: 52: unsigned int x;
  2689                           ;uart.c: 54: x = (20000000 - baudrate*64)/(baudrate*64);
  2690                           
  2691                           ;incstack = 0
  2692  002064  C028  F060         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  2693  002068  C029  F061         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  2694  00206C  C02A  F062         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  2695  002070  C02B  F063         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  2696  002074  0E06               	movlw	6
  2697  002076                     u8345:
  2698  002076  90D8               	bcf	status,0,c
  2699  002078  0100               	movlb	0	; () banked
  2700  00207A  3760               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  2701  00207C  3761               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  2702  00207E  3762               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  2703  002080  3763               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  2704  002082  2EE8               	decfsz	wreg,f,c
  2705  002084  D7F8               	goto	u8345
  2706  002086  1F60               	comf	??_configura_baudrate_uart& (0+255),f,b
  2707  002088  1F61               	comf	(??_configura_baudrate_uart+1)& (0+255),f,b
  2708  00208A  1F62               	comf	(??_configura_baudrate_uart+2)& (0+255),f,b
  2709  00208C  1F63               	comf	(??_configura_baudrate_uart+3)& (0+255),f,b
  2710  00208E  2B60               	incf	??_configura_baudrate_uart& (0+255),f,b
  2711  002090  0E00               	movlw	0
  2712  002092  2361               	addwfc	(??_configura_baudrate_uart+1)& (0+255),f,b
  2713  002094  2362               	addwfc	(??_configura_baudrate_uart+2)& (0+255),f,b
  2714  002096  2363               	addwfc	(??_configura_baudrate_uart+3)& (0+255),f,b
  2715  002098  0E00               	movlw	0
  2716  00209A  2560               	addwf	??_configura_baudrate_uart& (0+255),w,b
  2717  00209C  6E1A               	movwf	___aldiv@dividend,c
  2718  00209E  0E2D               	movlw	45
  2719  0020A0  2161               	addwfc	(??_configura_baudrate_uart+1)& (0+255),w,b
  2720  0020A2  6E1B               	movwf	___aldiv@dividend+1,c
  2721  0020A4  0E31               	movlw	49
  2722  0020A6  2162               	addwfc	(??_configura_baudrate_uart+2)& (0+255),w,b
  2723  0020A8  6E1C               	movwf	___aldiv@dividend+2,c
  2724  0020AA  0E01               	movlw	1
  2725  0020AC  2163               	addwfc	(??_configura_baudrate_uart+3)& (0+255),w,b
  2726  0020AE  6E1D               	movwf	___aldiv@dividend+3,c
  2727  0020B0  C028  F064         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  2728  0020B4  C029  F065         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  2729  0020B8  C02A  F066         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  2730  0020BC  C02B  F067         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  2731  0020C0  0E06               	movlw	6
  2732  0020C2                     u8355:
  2733  0020C2  90D8               	bcf	status,0,c
  2734  0020C4  3764               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  2735  0020C6  3765               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  2736  0020C8  3766               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  2737  0020CA  3767               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  2738  0020CC  2EE8               	decfsz	wreg,f,c
  2739  0020CE  D7F9               	goto	u8355
  2740  0020D0  C064  F01E         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  2741  0020D4  C065  F01F         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  2742  0020D8  C066  F020         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  2743  0020DC  C067  F021         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  2744  0020E0  ECFA  F012         	call	___aldiv	;wreg free
  2745  0020E4  C01A  F068         	movff	?___aldiv,configura_baudrate_uart@x
  2746  0020E8  C01B  F069         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  2747                           
  2748                           ;uart.c: 55: if(x > 255)
  2749  0020EC  0100               	movlb	0	; () banked
  2750  0020EE  0569               	decf	(configura_baudrate_uart@x+1)& (0+255),w,b
  2751  0020F0  A0D8               	btfss	status,0,c
  2752  0020F2  D044               	goto	l332
  2753                           
  2754                           ; BSR set to: 0
  2755                           ;uart.c: 56: {
  2756                           ;uart.c: 57: x = (20000000 - baudrate*16)/(baudrate*16);
  2757  0020F4  C028  F060         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  2758  0020F8  C029  F061         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  2759  0020FC  C02A  F062         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  2760  002100  C02B  F063         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  2761  002104  0E04               	movlw	4
  2762  002106                     u8375:
  2763  002106  90D8               	bcf	status,0,c
  2764  002108  3760               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  2765  00210A  3761               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  2766  00210C  3762               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  2767  00210E  3763               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  2768  002110  2EE8               	decfsz	wreg,f,c
  2769  002112  D7F9               	goto	u8375
  2770  002114  1F60               	comf	??_configura_baudrate_uart& (0+255),f,b
  2771  002116  1F61               	comf	(??_configura_baudrate_uart+1)& (0+255),f,b
  2772  002118  1F62               	comf	(??_configura_baudrate_uart+2)& (0+255),f,b
  2773  00211A  1F63               	comf	(??_configura_baudrate_uart+3)& (0+255),f,b
  2774  00211C  2B60               	incf	??_configura_baudrate_uart& (0+255),f,b
  2775  00211E  0E00               	movlw	0
  2776  002120  2361               	addwfc	(??_configura_baudrate_uart+1)& (0+255),f,b
  2777  002122  2362               	addwfc	(??_configura_baudrate_uart+2)& (0+255),f,b
  2778  002124  2363               	addwfc	(??_configura_baudrate_uart+3)& (0+255),f,b
  2779  002126  0E00               	movlw	0
  2780  002128  2560               	addwf	??_configura_baudrate_uart& (0+255),w,b
  2781  00212A  6E1A               	movwf	___aldiv@dividend,c
  2782  00212C  0E2D               	movlw	45
  2783  00212E  2161               	addwfc	(??_configura_baudrate_uart+1)& (0+255),w,b
  2784  002130  6E1B               	movwf	___aldiv@dividend+1,c
  2785  002132  0E31               	movlw	49
  2786  002134  2162               	addwfc	(??_configura_baudrate_uart+2)& (0+255),w,b
  2787  002136  6E1C               	movwf	___aldiv@dividend+2,c
  2788  002138  0E01               	movlw	1
  2789  00213A  2163               	addwfc	(??_configura_baudrate_uart+3)& (0+255),w,b
  2790  00213C  6E1D               	movwf	___aldiv@dividend+3,c
  2791  00213E  C028  F064         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  2792  002142  C029  F065         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  2793  002146  C02A  F066         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  2794  00214A  C02B  F067         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  2795  00214E  0E04               	movlw	4
  2796  002150                     u8385:
  2797  002150  90D8               	bcf	status,0,c
  2798  002152  3764               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  2799  002154  3765               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  2800  002156  3766               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  2801  002158  3767               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  2802  00215A  2EE8               	decfsz	wreg,f,c
  2803  00215C  D7F9               	goto	u8385
  2804  00215E  C064  F01E         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  2805  002162  C065  F01F         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  2806  002166  C066  F020         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  2807  00216A  C067  F021         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  2808  00216E  ECFA  F012         	call	___aldiv	;wreg free
  2809  002172  C01A  F068         	movff	?___aldiv,configura_baudrate_uart@x
  2810  002176  C01B  F069         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  2811                           
  2812                           ;uart.c: 58: BRGH = 1;
  2813  00217A  84AC               	bsf	4012,2,c	;volatile
  2814  00217C                     l332:
  2815                           
  2816                           ;uart.c: 59: }
  2817                           ;uart.c: 60: if(x < 256)
  2818  00217C  0100               	movlb	0	; () banked
  2819  00217E  0569               	decf	(configura_baudrate_uart@x+1)& (0+255),w,b
  2820  002180  B0D8               	btfsc	status,0,c
  2821  002182  0012               	return	
  2822                           
  2823                           ; BSR set to: 0
  2824                           ;uart.c: 61: {
  2825                           ;uart.c: 62: SPBRG = x;
  2826  002184  C068  FFAF         	movff	configura_baudrate_uart@x,4015	;volatile
  2827                           
  2828                           ;uart.c: 63: SYNC = 0;
  2829  002188  98AC               	bcf	4012,4,c	;volatile
  2830                           
  2831                           ;uart.c: 64: SPEN = 1;
  2832  00218A  8EAB               	bsf	4011,7,c	;volatile
  2833                           
  2834                           ;uart.c: 65: TRISCbits.RC7 = 1;
  2835  00218C  8E94               	bsf	3988,7,c	;volatile
  2836                           
  2837                           ;uart.c: 66: TRISCbits.RC6 = 1;
  2838  00218E  8C94               	bsf	3988,6,c	;volatile
  2839                           
  2840                           ;uart.c: 67: CREN = 1;
  2841  002190  88AB               	bsf	4011,4,c	;volatile
  2842                           
  2843                           ;uart.c: 68: TXEN = 1;
  2844  002192  8AAC               	bsf	4012,5,c	;volatile
  2845                           
  2846                           ;uart.c: 70: return (1);
  2847                           ;	Return value of _configura_baudrate_uart is never used
  2848  002194  0012               	return	
  2849  002196                     __end_of_configura_baudrate_uart:
  2850                           	opt stack 0
  2851                           tblptru	equ	0xFF8
  2852                           tblptrh	equ	0xFF7
  2853                           tblptrl	equ	0xFF6
  2854                           tablat	equ	0xFF5
  2855                           intcon	equ	0xFF2
  2856                           intcon2	equ	0xFF1
  2857                           intcon3	equ	0xFF0
  2858                           postinc0	equ	0xFEE
  2859                           wreg	equ	0xFE8
  2860                           postdec1	equ	0xFE5
  2861                           fsr1h	equ	0xFE2
  2862                           fsr1l	equ	0xFE1
  2863                           postinc2	equ	0xFDE
  2864                           status	equ	0xFD8
  2865                           
  2866 ;; *************** function ___aldiv *****************
  2867 ;; Defined at:
  2868 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  2869 ;; Parameters:    Size  Location     Type
  2870 ;;  dividend        4   25[COMRAM] long 
  2871 ;;  divisor         4   29[COMRAM] long 
  2872 ;; Auto vars:     Size  Location     Type
  2873 ;;  quotient        4   35[COMRAM] long 
  2874 ;;  sign            1   34[COMRAM] unsigned char 
  2875 ;;  counter         1   33[COMRAM] unsigned char 
  2876 ;; Return value:  Size  Location     Type
  2877 ;;                  4   25[COMRAM] long 
  2878 ;; Registers used:
  2879 ;;		wreg, status,2, status,0
  2880 ;; Tracked objects:
  2881 ;;		On entry : 0/0
  2882 ;;		On exit  : 0/0
  2883 ;;		Unchanged: 0/0
  2884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2885 ;;      Params:         8       0       0       0       0       0       0       0       0
  2886 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2887 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2888 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2889 ;;Total ram usage:       14 bytes
  2890 ;; Hardware stack levels used:    1
  2891 ;; Hardware stack levels required when called:    2
  2892 ;; This function calls:
  2893 ;;		Nothing
  2894 ;; This function is called by:
  2895 ;;		_configura_baudrate_uart
  2896 ;; This function uses a non-reentrant model
  2897 ;;
  2898                           
  2899                           	psect	text13
  2900  0025F4                     __ptext13:
  2901                           	opt stack 0
  2902  0025F4                     ___aldiv:
  2903                           	opt stack 26
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;incstack = 0
  2907  0025F4  0E00               	movlw	0
  2908  0025F6  6E23               	movwf	___aldiv@sign,c
  2909  0025F8  AE21               	btfss	___aldiv@divisor+3,7,c
  2910  0025FA  D00A               	goto	l1122
  2911  0025FC  1E21               	comf	___aldiv@divisor+3,f,c
  2912  0025FE  1E20               	comf	___aldiv@divisor+2,f,c
  2913  002600  1E1F               	comf	___aldiv@divisor+1,f,c
  2914  002602  6C1E               	negf	___aldiv@divisor,c
  2915  002604  0E00               	movlw	0
  2916  002606  221F               	addwfc	___aldiv@divisor+1,f,c
  2917  002608  2220               	addwfc	___aldiv@divisor+2,f,c
  2918  00260A  2221               	addwfc	___aldiv@divisor+3,f,c
  2919  00260C  0E01               	movlw	1
  2920  00260E  6E23               	movwf	___aldiv@sign,c
  2921  002610                     l1122:
  2922  002610  AE1D               	btfss	___aldiv@dividend+3,7,c
  2923  002612  D00A               	goto	l1123
  2924  002614  1E1D               	comf	___aldiv@dividend+3,f,c
  2925  002616  1E1C               	comf	___aldiv@dividend+2,f,c
  2926  002618  1E1B               	comf	___aldiv@dividend+1,f,c
  2927  00261A  6C1A               	negf	___aldiv@dividend,c
  2928  00261C  0E00               	movlw	0
  2929  00261E  221B               	addwfc	___aldiv@dividend+1,f,c
  2930  002620  221C               	addwfc	___aldiv@dividend+2,f,c
  2931  002622  221D               	addwfc	___aldiv@dividend+3,f,c
  2932  002624  0E01               	movlw	1
  2933  002626  1A23               	xorwf	___aldiv@sign,f,c
  2934  002628                     l1123:
  2935  002628  0E00               	movlw	0
  2936  00262A  6E24               	movwf	___aldiv@quotient,c
  2937  00262C  0E00               	movlw	0
  2938  00262E  6E25               	movwf	___aldiv@quotient+1,c
  2939  002630  0E00               	movlw	0
  2940  002632  6E26               	movwf	___aldiv@quotient+2,c
  2941  002634  0E00               	movlw	0
  2942  002636  6E27               	movwf	___aldiv@quotient+3,c
  2943  002638  501E               	movf	___aldiv@divisor,w,c
  2944  00263A  101F               	iorwf	___aldiv@divisor+1,w,c
  2945  00263C  1020               	iorwf	___aldiv@divisor+2,w,c
  2946  00263E  1021               	iorwf	___aldiv@divisor+3,w,c
  2947  002640  B4D8               	btfsc	status,2,c
  2948  002642  D02A               	goto	l1130
  2949  002644  0E01               	movlw	1
  2950  002646  6E22               	movwf	___aldiv@counter,c
  2951  002648  D006               	goto	l1125
  2952  00264A  90D8               	bcf	status,0,c
  2953  00264C  361E               	rlcf	___aldiv@divisor,f,c
  2954  00264E  361F               	rlcf	___aldiv@divisor+1,f,c
  2955  002650  3620               	rlcf	___aldiv@divisor+2,f,c
  2956  002652  3621               	rlcf	___aldiv@divisor+3,f,c
  2957  002654  2A22               	incf	___aldiv@counter,f,c
  2958  002656                     l1125:
  2959  002656  AE21               	btfss	___aldiv@divisor+3,7,c
  2960  002658  D7F8               	goto	l1126
  2961  00265A                     u8310:
  2962  00265A  90D8               	bcf	status,0,c
  2963  00265C  3624               	rlcf	___aldiv@quotient,f,c
  2964  00265E  3625               	rlcf	___aldiv@quotient+1,f,c
  2965  002660  3626               	rlcf	___aldiv@quotient+2,f,c
  2966  002662  3627               	rlcf	___aldiv@quotient+3,f,c
  2967  002664  501E               	movf	___aldiv@divisor,w,c
  2968  002666  5C1A               	subwf	___aldiv@dividend,w,c
  2969  002668  501F               	movf	___aldiv@divisor+1,w,c
  2970  00266A  581B               	subwfb	___aldiv@dividend+1,w,c
  2971  00266C  5020               	movf	___aldiv@divisor+2,w,c
  2972  00266E  581C               	subwfb	___aldiv@dividend+2,w,c
  2973  002670  5021               	movf	___aldiv@divisor+3,w,c
  2974  002672  581D               	subwfb	___aldiv@dividend+3,w,c
  2975  002674  A0D8               	btfss	status,0,c
  2976  002676  D009               	goto	l1129
  2977  002678  501E               	movf	___aldiv@divisor,w,c
  2978  00267A  5E1A               	subwf	___aldiv@dividend,f,c
  2979  00267C  501F               	movf	___aldiv@divisor+1,w,c
  2980  00267E  5A1B               	subwfb	___aldiv@dividend+1,f,c
  2981  002680  5020               	movf	___aldiv@divisor+2,w,c
  2982  002682  5A1C               	subwfb	___aldiv@dividend+2,f,c
  2983  002684  5021               	movf	___aldiv@divisor+3,w,c
  2984  002686  5A1D               	subwfb	___aldiv@dividend+3,f,c
  2985  002688  8024               	bsf	___aldiv@quotient,0,c
  2986  00268A                     l1129:
  2987  00268A  90D8               	bcf	status,0,c
  2988  00268C  3221               	rrcf	___aldiv@divisor+3,f,c
  2989  00268E  3220               	rrcf	___aldiv@divisor+2,f,c
  2990  002690  321F               	rrcf	___aldiv@divisor+1,f,c
  2991  002692  321E               	rrcf	___aldiv@divisor,f,c
  2992  002694  2E22               	decfsz	___aldiv@counter,f,c
  2993  002696  D7E1               	goto	u8310
  2994  002698                     l1130:
  2995  002698  5023               	movf	___aldiv@sign,w,c
  2996  00269A  B4D8               	btfsc	status,2,c
  2997  00269C  D008               	goto	l1131
  2998  00269E  1E27               	comf	___aldiv@quotient+3,f,c
  2999  0026A0  1E26               	comf	___aldiv@quotient+2,f,c
  3000  0026A2  1E25               	comf	___aldiv@quotient+1,f,c
  3001  0026A4  6C24               	negf	___aldiv@quotient,c
  3002  0026A6  0E00               	movlw	0
  3003  0026A8  2225               	addwfc	___aldiv@quotient+1,f,c
  3004  0026AA  2226               	addwfc	___aldiv@quotient+2,f,c
  3005  0026AC  2227               	addwfc	___aldiv@quotient+3,f,c
  3006  0026AE                     l1131:
  3007  0026AE  C024  F01A         	movff	___aldiv@quotient,?___aldiv
  3008  0026B2  C025  F01B         	movff	___aldiv@quotient+1,?___aldiv+1
  3009  0026B6  C026  F01C         	movff	___aldiv@quotient+2,?___aldiv+2
  3010  0026BA  C027  F01D         	movff	___aldiv@quotient+3,?___aldiv+3
  3011  0026BE  0012               	return	
  3012  0026C0                     __end_of___aldiv:
  3013                           	opt stack 0
  3014                           tblptru	equ	0xFF8
  3015                           tblptrh	equ	0xFF7
  3016                           tblptrl	equ	0xFF6
  3017                           tablat	equ	0xFF5
  3018                           intcon	equ	0xFF2
  3019                           intcon2	equ	0xFF1
  3020                           intcon3	equ	0xFF0
  3021                           postinc0	equ	0xFEE
  3022                           wreg	equ	0xFE8
  3023                           postdec1	equ	0xFE5
  3024                           fsr1h	equ	0xFE2
  3025                           fsr1l	equ	0xFE1
  3026                           postinc2	equ	0xFDE
  3027                           status	equ	0xFD8
  3028                           
  3029 ;; *************** function _inicializa_tarefas *****************
  3030 ;; Defined at:
  3031 ;;		line 181 in file "main.c"
  3032 ;; Parameters:    Size  Location     Type
  3033 ;;		None
  3034 ;; Auto vars:     Size  Location     Type
  3035 ;;		None
  3036 ;; Return value:  Size  Location     Type
  3037 ;;                  1    wreg      void 
  3038 ;; Registers used:
  3039 ;;		wreg, status,2, status,0
  3040 ;; Tracked objects:
  3041 ;;		On entry : 0/0
  3042 ;;		On exit  : 0/0
  3043 ;;		Unchanged: 0/0
  3044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3045 ;;      Params:         0       0       0       0       0       0       0       0       0
  3046 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3047 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3048 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3049 ;;Total ram usage:        0 bytes
  3050 ;; Hardware stack levels used:    1
  3051 ;; Hardware stack levels required when called:    2
  3052 ;; This function calls:
  3053 ;;		Nothing
  3054 ;; This function is called by:
  3055 ;;		_main
  3056 ;; This function uses a non-reentrant model
  3057 ;;
  3058                           
  3059                           	psect	text14
  3060  002FEC                     __ptext14:
  3061                           	opt stack 0
  3062  002FEC                     _inicializa_tarefas:
  3063                           	opt stack 28
  3064                           
  3065                           ;main.c: 184: p_tarefas[0] = acende_led4;
  3066                           
  3067                           ;incstack = 0
  3068  002FEC  0E84               	movlw	low _acende_led4
  3069  002FEE  0100               	movlb	0	; () banked
  3070  002FF0  6FD5               	movwf	_p_tarefas& (0+255),b
  3071  002FF2  0E30               	movlw	high _acende_led4
  3072  002FF4  6FD6               	movwf	(_p_tarefas+1)& (0+255),b
  3073                           
  3074                           ;main.c: 185: p_tarefas[1] = SDCard;
  3075  002FF6  0ED8               	movlw	low _SDCard
  3076  002FF8  6FD7               	movwf	(_p_tarefas+2)& (0+255),b
  3077  002FFA  0E19               	movlw	high _SDCard
  3078  002FFC  6FD8               	movwf	(_p_tarefas+3)& (0+255),b
  3079                           
  3080                           ; BSR set to: 0
  3081                           ;main.c: 191: tempo_backup[0] = 1000;
  3082  002FFE  0E03               	movlw	3
  3083  003000  0101               	movlb	1	; () banked
  3084  003002  6F4C               	movwf	(_tempo_backup+1)& (0+255),b
  3085  003004  0EE8               	movlw	232
  3086  003006  6F4B               	movwf	_tempo_backup& (0+255),b
  3087                           
  3088                           ; BSR set to: 1
  3089                           ;main.c: 192: tempo_backup[1] = 2000;
  3090  003008  0E07               	movlw	7
  3091  00300A  6F4E               	movwf	(_tempo_backup+3)& (0+255),b
  3092  00300C  0ED0               	movlw	208
  3093  00300E  6F4D               	movwf	(_tempo_backup+2)& (0+255),b
  3094                           
  3095                           ; BSR set to: 1
  3096                           ;main.c: 198: tempo_tarefa[0] = 1000;
  3097  003010  0E03               	movlw	3
  3098  003012  6E2E               	movwf	_tempo_tarefa+1,c
  3099  003014  0EE8               	movlw	232
  3100  003016  6E2D               	movwf	_tempo_tarefa,c
  3101                           
  3102                           ; BSR set to: 1
  3103                           ;main.c: 199: tempo_tarefa[1] = 2000;
  3104  003018  0E07               	movlw	7
  3105  00301A  6E30               	movwf	_tempo_tarefa+3,c
  3106  00301C  0ED0               	movlw	208
  3107  00301E  6E2F               	movwf	_tempo_tarefa+2,c
  3108                           
  3109                           ; BSR set to: 1
  3110                           ;main.c: 204: tarefa_em_execucao = 0;
  3111  003020  0E00               	movlw	0
  3112  003022  6E3E               	movwf	_tarefa_em_execucao,c	;volatile
  3113                           
  3114                           ; BSR set to: 1
  3115  003024  0012               	return		;funcret
  3116  003026                     __end_of_inicializa_tarefas:
  3117                           	opt stack 0
  3118                           tblptru	equ	0xFF8
  3119                           tblptrh	equ	0xFF7
  3120                           tblptrl	equ	0xFF6
  3121                           tablat	equ	0xFF5
  3122                           intcon	equ	0xFF2
  3123                           intcon2	equ	0xFF1
  3124                           intcon3	equ	0xFF0
  3125                           postinc0	equ	0xFEE
  3126                           wreg	equ	0xFE8
  3127                           postdec1	equ	0xFE5
  3128                           fsr1h	equ	0xFE2
  3129                           fsr1l	equ	0xFE1
  3130                           postinc2	equ	0xFDE
  3131                           status	equ	0xFD8
  3132                           
  3133 ;; *************** function _inicializa_shrc *****************
  3134 ;; Defined at:
  3135 ;;		line 47 in file "bibliotecas/SHRC.c"
  3136 ;; Parameters:    Size  Location     Type
  3137 ;;		None
  3138 ;; Auto vars:     Size  Location     Type
  3139 ;;		None
  3140 ;; Return value:  Size  Location     Type
  3141 ;;                  1    wreg      void 
  3142 ;; Registers used:
  3143 ;;		None
  3144 ;; Tracked objects:
  3145 ;;		On entry : 0/0
  3146 ;;		On exit  : 0/0
  3147 ;;		Unchanged: 0/0
  3148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3149 ;;      Params:         0       0       0       0       0       0       0       0       0
  3150 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3151 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3152 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3153 ;;Total ram usage:        0 bytes
  3154 ;; Hardware stack levels used:    1
  3155 ;; Hardware stack levels required when called:    2
  3156 ;; This function calls:
  3157 ;;		Nothing
  3158 ;; This function is called by:
  3159 ;;		_main
  3160 ;; This function uses a non-reentrant model
  3161 ;;
  3162                           
  3163                           	psect	text15
  3164  00326A                     __ptext15:
  3165                           	opt stack 0
  3166  00326A                     _inicializa_shrc:
  3167                           	opt stack 28
  3168                           
  3169                           ;SHRC.c: 49: LATBbits.LATB5 = 0;
  3170                           
  3171                           ; BSR set to: 1
  3172                           ;incstack = 0
  3173  00326A  9A8A               	bcf	3978,5,c	;volatile
  3174                           
  3175                           ;SHRC.c: 50: LATBbits.LATB6 = 0;
  3176  00326C  9C8A               	bcf	3978,6,c	;volatile
  3177                           
  3178                           ;SHRC.c: 51: LATBbits.LATB7 = 0;
  3179  00326E  9E8A               	bcf	3978,7,c	;volatile
  3180  003270  0012               	return		;funcret
  3181  003272                     __end_of_inicializa_shrc:
  3182                           	opt stack 0
  3183                           tblptru	equ	0xFF8
  3184                           tblptrh	equ	0xFF7
  3185                           tblptrl	equ	0xFF6
  3186                           tablat	equ	0xFF5
  3187                           intcon	equ	0xFF2
  3188                           intcon2	equ	0xFF1
  3189                           intcon3	equ	0xFF0
  3190                           postinc0	equ	0xFEE
  3191                           wreg	equ	0xFE8
  3192                           postdec1	equ	0xFE5
  3193                           fsr1h	equ	0xFE2
  3194                           fsr1l	equ	0xFE1
  3195                           postinc2	equ	0xFDE
  3196                           status	equ	0xFD8
  3197                           
  3198 ;; *************** function _inicializa_SPI *****************
  3199 ;; Defined at:
  3200 ;;		line 49 in file "bibliotecas/SPI.c"
  3201 ;; Parameters:    Size  Location     Type
  3202 ;;  SPI_mode        1    wreg     unsigned char 
  3203 ;; Auto vars:     Size  Location     Type
  3204 ;;  SPI_mode        1   31[COMRAM] unsigned char 
  3205 ;; Return value:  Size  Location     Type
  3206 ;;                  1    wreg      void 
  3207 ;; Registers used:
  3208 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3209 ;; Tracked objects:
  3210 ;;		On entry : 0/0
  3211 ;;		On exit  : 0/0
  3212 ;;		Unchanged: 0/0
  3213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3214 ;;      Params:         0       0       0       0       0       0       0       0       0
  3215 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3216 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3217 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3218 ;;Total ram usage:        1 bytes
  3219 ;; Hardware stack levels used:    1
  3220 ;; Hardware stack levels required when called:    5
  3221 ;; This function calls:
  3222 ;;		_escreve_cmd_lcd
  3223 ;;		_escreve_frase_ram_lcd
  3224 ;;		_posicao_cursor_lcd
  3225 ;; This function is called by:
  3226 ;;		_main
  3227 ;; This function uses a non-reentrant model
  3228 ;;
  3229                           
  3230                           	psect	text16
  3231  002DC8                     __ptext16:
  3232                           	opt stack 0
  3233  002DC8                     _inicializa_SPI:
  3234                           	opt stack 25
  3235                           
  3236                           ;incstack = 0
  3237                           ;inicializa_SPI@SPI_mode stored from wreg
  3238  002DC8  6E20               	movwf	inicializa_SPI@SPI_mode,c
  3239                           
  3240                           ;SPI.c: 51: SSPCON1bits.SSPEN = 0;
  3241  002DCA  9AC6               	bcf	4038,5,c	;volatile
  3242                           
  3243                           ;SPI.c: 52: switch(SPI_mode)
  3244  002DCC  D00A               	goto	l88
  3245  002DCE                     l91:
  3246                           
  3247                           ;SPI.c: 60: SSPCON1bits.CKP = 1;
  3248  002DCE  88C6               	bsf	4038,4,c	;volatile
  3249  002DD0  D006               	goto	L2
  3250  002DD2                     l92:
  3251                           
  3252                           ;SPI.c: 65: SSPCON1bits.CKP = 0;
  3253  002DD2  98C6               	bcf	4038,4,c	;volatile
  3254                           
  3255                           ;SPI.c: 66: SSPSTATbits.CKE = 1;
  3256  002DD4  8CC7               	bsf	4039,6,c	;volatile
  3257                           
  3258                           ;SPI.c: 67: break;
  3259  002DD6  D013               	goto	l90
  3260  002DD8                     l93:
  3261                           
  3262                           ;SPI.c: 70: SSPCON1bits.CKP = 1;
  3263  002DD8  88C6               	bsf	4038,4,c	;volatile
  3264                           
  3265                           ;SPI.c: 71: SSPSTATbits.CKE = 1;
  3266  002DDA  8CC7               	bsf	4039,6,c	;volatile
  3267  002DDC                     l94:
  3268                           
  3269                           ;SPI.c: 74: SSPCON1bits.CKP = 0;
  3270  002DDC  98C6               	bcf	4038,4,c	;volatile
  3271  002DDE                     L2:
  3272                           
  3273                           ;SPI.c: 75: SSPSTATbits.CKE = 0;
  3274  002DDE  9CC7               	bcf	4039,6,c	;volatile
  3275                           
  3276                           ;SPI.c: 77: }
  3277                           
  3278                           ;SPI.c: 76: break;
  3279  002DE0  D00E               	goto	l90
  3280  002DE2                     l88:
  3281  002DE2  5020               	movf	inicializa_SPI@SPI_mode,w,c
  3282                           
  3283                           ; Switch size 1, requested type "space"
  3284                           ; Number of cases is 4, Range of values is 0 to 3
  3285                           ; switch strategies available:
  3286                           ; Name         Instructions Cycles
  3287                           ; simple_byte           13     7 (average)
  3288                           ;	Chosen strategy is simple_byte
  3289  002DE4  0A00               	xorlw	0	; case 0
  3290  002DE6  B4D8               	btfsc	status,2,c
  3291  002DE8  D7F9               	goto	l94
  3292  002DEA  0A01               	xorlw	1	; case 1
  3293  002DEC  B4D8               	btfsc	status,2,c
  3294  002DEE  D7EF               	goto	l91
  3295  002DF0  0A03               	xorlw	3	; case 2
  3296  002DF2  B4D8               	btfsc	status,2,c
  3297  002DF4  D7EE               	goto	l92
  3298  002DF6  0A01               	xorlw	1	; case 3
  3299  002DF8  B4D8               	btfsc	status,2,c
  3300  002DFA  D7EE               	goto	l93
  3301  002DFC  D7EF               	goto	l94
  3302  002DFE                     l90:
  3303                           
  3304                           ;SPI.c: 81: SSPCON1bits.WCOL = 0;
  3305  002DFE  9EC6               	bcf	4038,7,c	;volatile
  3306                           
  3307                           ;SPI.c: 82: SSPCON1bits.SSPOV = 0;
  3308  002E00  9CC6               	bcf	4038,6,c	;volatile
  3309                           
  3310                           ;SPI.c: 86: SSPCON1bits.SSPM0 = 1;
  3311  002E02  80C6               	bsf	4038,0,c	;volatile
  3312                           
  3313                           ;SPI.c: 87: SSPCON1bits.SSPM1 = 1;
  3314  002E04  82C6               	bsf	4038,1,c	;volatile
  3315                           
  3316                           ;SPI.c: 88: SSPCON1bits.SSPM2 = 0;
  3317  002E06  94C6               	bcf	4038,2,c	;volatile
  3318                           
  3319                           ;SPI.c: 89: SSPCON1bits.SSPM3 = 0;
  3320  002E08  96C6               	bcf	4038,3,c	;volatile
  3321                           
  3322                           ;SPI.c: 93: SSPSTATbits.SMP = 0;
  3323  002E0A  9EC7               	bcf	4039,7,c	;volatile
  3324                           
  3325                           ;SPI.c: 96: SSPCON1bits.SSPEN = 1;
  3326  002E0C  8AC6               	bsf	4038,5,c	;volatile
  3327                           
  3328                           ;SPI.c: 97: posicao_cursor_lcd(1,1);
  3329  002E0E  0E01               	movlw	1
  3330  002E10  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3331  002E12  0E01               	movlw	1
  3332  002E14  EC45  F016         	call	_posicao_cursor_lcd
  3333                           
  3334                           ;SPI.c: 98: escreve_frase_ram_lcd("SPI configurada!");
  3335  002E18  0E4D               	movlw	low STR_3
  3336  002E1A  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3337  002E1C  0E7F               	movlw	high STR_3
  3338  002E1E  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3339  002E20  EC6B  F017         	call	_escreve_frase_ram_lcd	;wreg free
  3340                           
  3341                           ;SPI.c: 99: escreve_cmd_lcd(0b00000001);
  3342  002E24  0E01               	movlw	1
  3343  002E26  EC0F  F015         	call	_escreve_cmd_lcd
  3344  002E2A  0012               	return		;funcret
  3345  002E2C                     __end_of_inicializa_SPI:
  3346                           	opt stack 0
  3347                           tblptru	equ	0xFF8
  3348                           tblptrh	equ	0xFF7
  3349                           tblptrl	equ	0xFF6
  3350                           tablat	equ	0xFF5
  3351                           intcon	equ	0xFF2
  3352                           intcon2	equ	0xFF1
  3353                           intcon3	equ	0xFF0
  3354                           postinc0	equ	0xFEE
  3355                           wreg	equ	0xFE8
  3356                           postdec1	equ	0xFE5
  3357                           fsr1h	equ	0xFE2
  3358                           fsr1l	equ	0xFE1
  3359                           postinc2	equ	0xFDE
  3360                           status	equ	0xFD8
  3361                           
  3362 ;; *************** function _escalonador *****************
  3363 ;; Defined at:
  3364 ;;		line 218 in file "main.c"
  3365 ;; Parameters:    Size  Location     Type
  3366 ;;		None
  3367 ;; Auto vars:     Size  Location     Type
  3368 ;;  cont            1  116[BANK0 ] unsigned char 
  3369 ;; Return value:  Size  Location     Type
  3370 ;;                  1    wreg      void 
  3371 ;; Registers used:
  3372 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3373 ;; Tracked objects:
  3374 ;;		On entry : 0/0
  3375 ;;		On exit  : 0/0
  3376 ;;		Unchanged: 0/0
  3377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3378 ;;      Params:         0       0       0       0       0       0       0       0       0
  3379 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3380 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3381 ;;      Totals:         0       3       0       0       0       0       0       0       0
  3382 ;;Total ram usage:        3 bytes
  3383 ;; Hardware stack levels used:    1
  3384 ;; Hardware stack levels required when called:   13
  3385 ;; This function calls:
  3386 ;;		_SDCard
  3387 ;;		_acende_led4
  3388 ;; This function is called by:
  3389 ;;		_main
  3390 ;; This function uses a non-reentrant model
  3391 ;;
  3392                           
  3393                           	psect	text17
  3394  00284E                     __ptext17:
  3395                           	opt stack 0
  3396  00284E                     _escalonador:
  3397                           	opt stack 17
  3398                           
  3399                           ;main.c: 220: unsigned char cont;
  3400                           ;main.c: 221: for(cont = 0; cont<2;cont++)
  3401                           
  3402                           ;incstack = 0
  3403  00284E  0E00               	movlw	0
  3404  002850  0100               	movlb	0	; () banked
  3405  002852  6FD4               	movwf	escalonador@cont& (0+255),b
  3406  002854                     l7360:
  3407                           
  3408                           ; BSR set to: 0
  3409  002854  0E01               	movlw	1
  3410  002856  65D4               	cpfsgt	escalonador@cont& (0+255),b
  3411  002858  D001               	goto	l490
  3412  00285A  0012               	return	
  3413  00285C                     l490:
  3414                           
  3415                           ; BSR set to: 0
  3416                           ;main.c: 222: {
  3417                           ;main.c: 223: if((p_tarefas[cont]!= 0 ) && tempo_tarefa[cont] == 0)
  3418                           
  3419                           ; BSR set to: 0
  3420  00285C  51D4               	movf	escalonador@cont& (0+255),w,b
  3421  00285E  0D02               	mullw	2
  3422  002860  0ED5               	movlw	low _p_tarefas
  3423  002862  24F3               	addwf	prodl,w,c
  3424  002864  6ED9               	movwf	fsr2l,c
  3425  002866  0E00               	movlw	high _p_tarefas
  3426  002868  20F4               	addwfc	prodh,w,c
  3427  00286A  6EDA               	movwf	fsr2h,c
  3428  00286C  50DE               	movf	postinc2,w,c
  3429  00286E  10DE               	iorwf	postinc2,w,c
  3430  002870  B4D8               	btfsc	status,2,c
  3431  002872  D03D               	goto	l492
  3432                           
  3433                           ; BSR set to: 0
  3434  002874  51D4               	movf	escalonador@cont& (0+255),w,b
  3435  002876  0D02               	mullw	2
  3436  002878  0E2D               	movlw	low _tempo_tarefa
  3437  00287A  24F3               	addwf	prodl,w,c
  3438  00287C  6ED9               	movwf	fsr2l,c
  3439  00287E  0E00               	movlw	high _tempo_tarefa
  3440  002880  20F4               	addwfc	prodh,w,c
  3441  002882  6EDA               	movwf	fsr2h,c
  3442  002884  50DE               	movf	postinc2,w,c
  3443  002886  10DE               	iorwf	postinc2,w,c
  3444  002888  A4D8               	btfss	status,2,c
  3445  00288A  D031               	goto	l492
  3446                           
  3447                           ; BSR set to: 0
  3448                           ;main.c: 224: {
  3449                           ;main.c: 225: tarefa_em_execucao = 1;
  3450  00288C  0E01               	movlw	1
  3451  00288E  6E3E               	movwf	_tarefa_em_execucao,c	;volatile
  3452                           
  3453                           ;main.c: 226: timeout_tarefa = 65000;
  3454  002890  0EFD               	movlw	253
  3455  002892  6E38               	movwf	_timeout_tarefa+1,c
  3456  002894  0EE8               	movlw	232
  3457  002896  6E37               	movwf	_timeout_tarefa,c
  3458                           
  3459                           ; BSR set to: 0
  3460                           ;main.c: 227: p_tarefas[cont]();
  3461  002898  51D4               	movf	escalonador@cont& (0+255),w,b
  3462  00289A  0D02               	mullw	2
  3463  00289C  0ED5               	movlw	low _p_tarefas
  3464  00289E  24F3               	addwf	prodl,w,c
  3465  0028A0  6ED9               	movwf	fsr2l,c
  3466  0028A2  0E00               	movlw	high _p_tarefas
  3467  0028A4  20F4               	addwfc	prodh,w,c
  3468  0028A6  6EDA               	movwf	fsr2h,c
  3469  0028A8  D801               	call	u8528
  3470  0028AA  D00A               	goto	u8529
  3471  0028AC                     u8528:
  3472  0028AC  0005               	push	
  3473  0028AE  6EFA               	movwf	pclath,c
  3474  0028B0  50DE               	movf	postinc2,w,c
  3475  0028B2  6EFD               	movwf	tosl,c
  3476  0028B4  50DE               	movf	postinc2,w,c
  3477  0028B6  6EFE               	movwf	tosh,c
  3478  0028B8  50F8               	movf	tblptru,w,c
  3479  0028BA  6EFF               	movwf	tosu,c
  3480  0028BC  50FA               	movf	pclath,w,c
  3481  0028BE  0012               	return		;indir
  3482  0028C0                     u8529:
  3483                           
  3484                           ;main.c: 228: tarefa_em_execucao = 0;
  3485  0028C0  0E00               	movlw	0
  3486  0028C2  6E3E               	movwf	_tarefa_em_execucao,c	;volatile
  3487                           
  3488                           ;main.c: 229: tempo_tarefa[cont] = tempo_backup[cont];
  3489  0028C4  0100               	movlb	0	; () banked
  3490  0028C6  51D4               	movf	escalonador@cont& (0+255),w,b
  3491  0028C8  0D02               	mullw	2
  3492  0028CA  0E4B               	movlw	low _tempo_backup
  3493  0028CC  24F3               	addwf	prodl,w,c
  3494  0028CE  6ED9               	movwf	fsr2l,c
  3495  0028D0  0E01               	movlw	high _tempo_backup
  3496  0028D2  20F4               	addwfc	prodh,w,c
  3497  0028D4  6EDA               	movwf	fsr2h,c
  3498  0028D6  51D4               	movf	escalonador@cont& (0+255),w,b
  3499  0028D8  0D02               	mullw	2
  3500  0028DA  0E2D               	movlw	low _tempo_tarefa
  3501  0028DC  24F3               	addwf	prodl,w,c
  3502  0028DE  6EE1               	movwf	fsr1l,c
  3503  0028E0  0E00               	movlw	high _tempo_tarefa
  3504  0028E2  20F4               	addwfc	prodh,w,c
  3505  0028E4  6EE2               	movwf	fsr1h,c
  3506  0028E6  CFDE FFE6          	movff	postinc2,postinc1
  3507  0028EA  CFDD FFE5          	movff	postdec2,postdec1
  3508  0028EE                     l492:
  3509                           
  3510                           ; BSR set to: 0
  3511                           
  3512                           ; BSR set to: 0
  3513  0028EE  2BD4               	incf	escalonador@cont& (0+255),f,b
  3514  0028F0  D7B1               	goto	l7360
  3515  0028F2                     __end_of_escalonador:
  3516                           	opt stack 0
  3517                           tosu	equ	0xFFF
  3518                           tosh	equ	0xFFE
  3519                           tosl	equ	0xFFD
  3520                           pclath	equ	0xFFA
  3521                           tblptru	equ	0xFF8
  3522                           tblptrh	equ	0xFF7
  3523                           tblptrl	equ	0xFF6
  3524                           tablat	equ	0xFF5
  3525                           prodh	equ	0xFF4
  3526                           prodl	equ	0xFF3
  3527                           intcon	equ	0xFF2
  3528                           intcon2	equ	0xFF1
  3529                           intcon3	equ	0xFF0
  3530                           postinc0	equ	0xFEE
  3531                           wreg	equ	0xFE8
  3532                           postinc1	equ	0xFE6
  3533                           postdec1	equ	0xFE5
  3534                           fsr1h	equ	0xFE2
  3535                           fsr1l	equ	0xFE1
  3536                           postinc2	equ	0xFDE
  3537                           postdec2	equ	0xFDD
  3538                           fsr2h	equ	0xFDA
  3539                           fsr2l	equ	0xFD9
  3540                           status	equ	0xFD8
  3541                           
  3542 ;; *************** function _SDCard *****************
  3543 ;; Defined at:
  3544 ;;		line 298 in file "main.c"
  3545 ;; Parameters:    Size  Location     Type
  3546 ;;		None
  3547 ;; Auto vars:     Size  Location     Type
  3548 ;;  fs             42   66[BANK1 ] struct .
  3549 ;;  br              2   64[BANK1 ] unsigned short 
  3550 ;;  FResult         1   63[BANK1 ] enum E3838
  3551 ;; Return value:  Size  Location     Type
  3552 ;;                  1    wreg      void 
  3553 ;; Registers used:
  3554 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3555 ;; Tracked objects:
  3556 ;;		On entry : 0/0
  3557 ;;		On exit  : 0/0
  3558 ;;		Unchanged: 0/0
  3559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3560 ;;      Params:         0       0       0       0       0       0       0       0       0
  3561 ;;      Locals:         0       0      45       0       0       0       0       0       0
  3562 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3563 ;;      Totals:         0       0      45       0       0       0       0       0       0
  3564 ;;Total ram usage:       45 bytes
  3565 ;; Hardware stack levels used:    1
  3566 ;; Hardware stack levels required when called:   12
  3567 ;; This function calls:
  3568 ;;		_escreve_cmd_lcd
  3569 ;;		_escreve_frase_ram_lcd
  3570 ;;		_pf_mount
  3571 ;;		_pf_open
  3572 ;;		_pf_read
  3573 ;;		_pf_write
  3574 ;;		_posicao_cursor_lcd
  3575 ;;		_proceed
  3576 ;;		_readover
  3577 ;; This function is called by:
  3578 ;;		_inicializa_tarefas
  3579 ;;		_escalonador
  3580 ;; This function uses a non-reentrant model
  3581 ;;
  3582                           
  3583                           	psect	text18
  3584  0019D8                     __ptext18:
  3585                           	opt stack 0
  3586  0019D8                     _SDCard:
  3587                           	opt stack 17
  3588                           
  3589                           ;main.c: 300: FRESULT FResult;
  3590                           ;main.c: 301: FATFS fs;
  3591                           ;main.c: 302: WORD br;
  3592                           ;main.c: 324: posicao_cursor_lcd(1,0);
  3593                           
  3594                           ; BSR set to: 0
  3595                           ;incstack = 0
  3596  0019D8  0E00               	movlw	0
  3597  0019DA  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3598  0019DC  0E01               	movlw	1
  3599  0019DE  EC45  F016         	call	_posicao_cursor_lcd
  3600                           
  3601                           ;main.c: 325: escreve_frase_ram_lcd("Attempting to");
  3602  0019E2  0E97               	movlw	low STR_5
  3603  0019E4  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3604  0019E6  0E7F               	movlw	high STR_5
  3605  0019E8  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3606  0019EA  EC6B  F017         	call	_escreve_frase_ram_lcd	;wreg free
  3607                           
  3608                           ;main.c: 326: posicao_cursor_lcd(1,0);
  3609  0019EE  0E00               	movlw	0
  3610  0019F0  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3611  0019F2  0E01               	movlw	1
  3612  0019F4  EC45  F016         	call	_posicao_cursor_lcd
  3613                           
  3614                           ;main.c: 327: escreve_frase_ram_lcd("             ");
  3615  0019F8  0E89               	movlw	low STR_6
  3616  0019FA  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3617  0019FC  0E7F               	movlw	high STR_6
  3618  0019FE  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3619  001A00  EC6B  F017         	call	_escreve_frase_ram_lcd	;wreg free
  3620                           
  3621                           ;main.c: 328: posicao_cursor_lcd(1,0);
  3622  001A04  0E00               	movlw	0
  3623  001A06  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3624  001A08  0E01               	movlw	1
  3625  001A0A  EC45  F016         	call	_posicao_cursor_lcd
  3626                           
  3627                           ;main.c: 329: escreve_frase_ram_lcd("mount file sys");
  3628  001A0E  0E5E               	movlw	low STR_7
  3629  001A10  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3630  001A12  0E7F               	movlw	high STR_7
  3631  001A14  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3632  001A16  EC6B  F017         	call	_escreve_frase_ram_lcd	;wreg free
  3633                           
  3634                           ;main.c: 331: escreve_cmd_lcd(0b00000001);
  3635  001A1A  0E01               	movlw	1
  3636  001A1C  EC0F  F015         	call	_escreve_cmd_lcd
  3637                           
  3638                           ;main.c: 333: proceed();
  3639  001A20  EC20  F019         	call	_proceed	;wreg free
  3640                           
  3641                           ;main.c: 334: if((FResult = pf_mount(&fs)) == FR_OK )
  3642  001A24  0EB1               	movlw	low SDCard@fs
  3643  001A26  0100               	movlb	0	; () banked
  3644  001A28  6F7C               	movwf	pf_mount@fs& (0+255),b
  3645  001A2A  0E01               	movlw	high SDCard@fs
  3646  001A2C  6F7D               	movwf	(pf_mount@fs+1)& (0+255),b
  3647  001A2E  EC09  F000         	call	_pf_mount	;wreg free
  3648  001A32  0101               	movlb	1	; () banked
  3649  001A34  6FAE               	movwf	SDCard@FResult& (0+255),b
  3650  001A36  51AE               	movf	SDCard@FResult& (0+255),w,b
  3651  001A38  A4D8               	btfss	status,2,c
  3652  001A3A  D079               	goto	l512
  3653                           
  3654                           ; BSR set to: 1
  3655                           ;main.c: 335: {
  3656                           ;main.c: 336: posicao_cursor_lcd(1,0);
  3657  001A3C  0E00               	movlw	0
  3658  001A3E  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3659  001A40  0E01               	movlw	1
  3660  001A42  EC45  F016         	call	_posicao_cursor_lcd
  3661                           
  3662                           ;main.c: 337: escreve_frase_ram_lcd("syst inicialized");
  3663  001A46  0E3C               	movlw	low STR_8
  3664  001A48  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3665  001A4A  0E7F               	movlw	high STR_8
  3666  001A4C  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3667  001A4E  EC6B  F017         	call	_escreve_frase_ram_lcd	;wreg free
  3668                           
  3669                           ;main.c: 339: FResult = pf_open("check.txt" );
  3670  001A52  0ED7               	movlw	low STR_9
  3671  001A54  0100               	movlb	0	; () banked
  3672  001A56  6FBA               	movwf	pf_open@path& (0+255),b
  3673  001A58  0E7F               	movlw	high STR_9
  3674  001A5A  6FBB               	movwf	(pf_open@path+1)& (0+255),b
  3675  001A5C  EC4B  F00E         	call	_pf_open	;wreg free
  3676  001A60  0101               	movlb	1	; () banked
  3677  001A62  6FAE               	movwf	SDCard@FResult& (0+255),b
  3678                           
  3679                           ; BSR set to: 1
  3680                           ;main.c: 341: if( FResult == FR_OK )
  3681  001A64  51AE               	movf	SDCard@FResult& (0+255),w,b
  3682  001A66  A4D8               	btfss	status,2,c
  3683  001A68  D061               	goto	l513
  3684                           
  3685                           ; BSR set to: 1
  3686                           ;main.c: 342: {
  3687                           ;main.c: 344: if( (FResult = pf_write("SD_Card", 5, &br)) == FR_OK )
  3688  001A6A  0EF4               	movlw	low STR_10
  3689  001A6C  0100               	movlb	0	; () banked
  3690  001A6E  6F9A               	movwf	pf_write@buff& (0+255),b
  3691  001A70  0E7F               	movlw	high STR_10
  3692  001A72  6F9B               	movwf	(pf_write@buff+1)& (0+255),b
  3693  001A74  0E00               	movlw	0
  3694  001A76  6F9D               	movwf	(pf_write@btw+1)& (0+255),b
  3695  001A78  0E05               	movlw	5
  3696  001A7A  6F9C               	movwf	pf_write@btw& (0+255),b
  3697  001A7C  0EAF               	movlw	low SDCard@br
  3698  001A7E  6F9E               	movwf	pf_write@bw& (0+255),b
  3699  001A80  0E01               	movlw	high SDCard@br
  3700  001A82  6F9F               	movwf	(pf_write@bw+1)& (0+255),b
  3701  001A84  EC23  F003         	call	_pf_write	;wreg free
  3702  001A88  0101               	movlb	1	; () banked
  3703  001A8A  6FAE               	movwf	SDCard@FResult& (0+255),b
  3704  001A8C  51AE               	movf	SDCard@FResult& (0+255),w,b
  3705  001A8E  A4D8               	btfss	status,2,c
  3706  001A90  D00C               	goto	l514
  3707                           
  3708                           ; BSR set to: 1
  3709                           ;main.c: 345: {
  3710                           ;main.c: 346: posicao_cursor_lcd(1,0);
  3711  001A92  0E00               	movlw	0
  3712  001A94  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3713  001A96  0E01               	movlw	1
  3714  001A98  EC45  F016         	call	_posicao_cursor_lcd
  3715                           
  3716                           ;main.c: 347: escreve_frase_ram_lcd("syst inicialized");
  3717  001A9C  0E3C               	movlw	low STR_8
  3718  001A9E  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3719  001AA0  0E7F               	movlw	high STR_8
  3720  001AA2  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3721  001AA4  EC6B  F017         	call	_escreve_frase_ram_lcd	;wreg free
  3722                           
  3723                           ;main.c: 348: }
  3724  001AA8  D00F               	goto	l518
  3725  001AAA                     l514:
  3726                           
  3727                           ;main.c: 349: else
  3728                           ;main.c: 350: {
  3729                           ;main.c: 351: escreve_cmd_lcd(0b00000001);
  3730  001AAA  0E01               	movlw	1
  3731  001AAC  EC0F  F015         	call	_escreve_cmd_lcd
  3732                           
  3733                           ;main.c: 352: posicao_cursor_lcd(1,0);
  3734  001AB0  0E00               	movlw	0
  3735  001AB2  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3736  001AB4  0E01               	movlw	1
  3737  001AB6  EC45  F016         	call	_posicao_cursor_lcd
  3738                           
  3739                           ;main.c: 353: escreve_frase_ram_lcd("SDCard error");
  3740  001ABA  0EB3               	movlw	low STR_12
  3741  001ABC  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3742  001ABE  0E7F               	movlw	high STR_12
  3743  001AC0  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3744  001AC2  EC6B  F017         	call	_escreve_frase_ram_lcd	;wreg free
  3745  001AC6                     l516:
  3746  001AC6  D7FF               	goto	l516
  3747  001AC8                     l518:
  3748                           
  3749                           ;main.c: 357: }
  3750                           ;main.c: 358: escreve_cmd_lcd(0b00000001);
  3751  001AC8  0E01               	movlw	1
  3752  001ACA  EC0F  F015         	call	_escreve_cmd_lcd
  3753                           
  3754                           ;main.c: 359: posicao_cursor_lcd(1,0);
  3755  001ACE  0E00               	movlw	0
  3756  001AD0  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3757  001AD2  0E01               	movlw	1
  3758  001AD4  EC45  F016         	call	_posicao_cursor_lcd
  3759                           
  3760                           ;main.c: 360: escreve_frase_ram_lcd("lendo arquivo");
  3761  001AD8  0EA5               	movlw	low STR_13
  3762  001ADA  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3763  001ADC  0E7F               	movlw	high STR_13
  3764  001ADE  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3765  001AE0  EC6B  F017         	call	_escreve_frase_ram_lcd	;wreg free
  3766                           
  3767                           ;main.c: 369: {
  3768                           ;main.c: 370: readover(1);
  3769                           
  3770                           ;main.c: 368: do
  3771  001AE4  0E00               	movlw	0
  3772  001AE6  6E1B               	movwf	readover@a+1,c
  3773  001AE8  0E01               	movlw	1
  3774  001AEA  6E1A               	movwf	readover@a,c
  3775  001AEC  EC2C  F019         	call	_readover	;wreg free
  3776                           
  3777                           ;main.c: 373: if( (FResult = pf_read(data_buffer_32, 31, &br)) == FR_OK )
  3778  001AF0  0E4F               	movlw	low _data_buffer_32
  3779  001AF2  0100               	movlb	0	; () banked
  3780  001AF4  6F9A               	movwf	pf_read@buff& (0+255),b
  3781  001AF6  0E01               	movlw	high _data_buffer_32
  3782  001AF8  6F9B               	movwf	(pf_read@buff+1)& (0+255),b
  3783  001AFA  0E00               	movlw	0
  3784  001AFC  6F9D               	movwf	(pf_read@btr+1)& (0+255),b
  3785  001AFE  0E1F               	movlw	31
  3786  001B00  6F9C               	movwf	pf_read@btr& (0+255),b
  3787  001B02  0EAF               	movlw	low SDCard@br
  3788  001B04  6F9E               	movwf	pf_read@br& (0+255),b
  3789  001B06  0E01               	movlw	high SDCard@br
  3790  001B08  6F9F               	movwf	(pf_read@br+1)& (0+255),b
  3791  001B0A  EC74  F007         	call	_pf_read	;wreg free
  3792  001B0E  0101               	movlb	1	; () banked
  3793  001B10  6FAE               	movwf	SDCard@FResult& (0+255),b
  3794  001B12  51AE               	movf	SDCard@FResult& (0+255),w,b
  3795  001B14  A4D8               	btfss	status,2,c
  3796  001B16  D009               	goto	l520
  3797                           
  3798                           ; BSR set to: 1
  3799                           ;main.c: 374: {
  3800                           ;main.c: 376: data_buffer_32[br] = 0;
  3801  001B18  0E4F               	movlw	low _data_buffer_32
  3802  001B1A  25AF               	addwf	SDCard@br& (0+255),w,b
  3803  001B1C  6ED9               	movwf	fsr2l,c
  3804  001B1E  0E01               	movlw	high _data_buffer_32
  3805  001B20  21B0               	addwfc	(SDCard@br+1)& (0+255),w,b
  3806  001B22  6EDA               	movwf	fsr2h,c
  3807  001B24  0E00               	movlw	0
  3808  001B26  6EDF               	movwf	indf2,c
  3809                           
  3810                           ;main.c: 377: break;
  3811  001B28  D003               	goto	l533
  3812  001B2A                     l520:
  3813                           
  3814                           ; BSR set to: 1
  3815                           ;main.c: 380: else
  3816                           ;main.c: 381: {
  3817                           ;main.c: 388: while( 1 );
  3818  001B2A  D7FF               	goto	l520
  3819  001B2C                     l513:
  3820                           
  3821                           ; BSR set to: 1
  3822                           ;main.c: 392: else
  3823                           ;main.c: 393: {
  3824                           ;main.c: 398: while( 1 );
  3825  001B2C  D7FF               	goto	l513
  3826  001B2E                     l512:
  3827                           
  3828                           ;main.c: 401: else
  3829                           ;main.c: 402: {
  3830                           ;main.c: 404: while( 1 );
  3831  001B2E  D7FF               	goto	l512
  3832  001B30                     l533:
  3833                           
  3834                           ;main.c: 405: }
  3835                           ;main.c: 423: if( FResult != FR_OK )
  3836  001B30  0101               	movlb	1	; () banked
  3837  001B32  51AE               	movf	SDCard@FResult& (0+255),w,b
  3838  001B34  A4D8               	btfss	status,2,c
  3839  001B36                     u8450:
  3840                           
  3841                           ;main.c: 424: {
  3842                           ;main.c: 429: while( 1 );
  3843  001B36  D7FF               	goto	u8450
  3844  001B38                     
  3845                           ;main.c: 430: }
  3846                           ;main.c: 433: while(1);
  3847  001B38  D7FF               	goto	l537
  3848  001B3A                     __end_of_SDCard:
  3849                           	opt stack 0
  3850                           tosu	equ	0xFFF
  3851                           tosh	equ	0xFFE
  3852                           tosl	equ	0xFFD
  3853                           pclath	equ	0xFFA
  3854                           tblptru	equ	0xFF8
  3855                           tblptrh	equ	0xFF7
  3856                           tblptrl	equ	0xFF6
  3857                           tablat	equ	0xFF5
  3858                           prodh	equ	0xFF4
  3859                           prodl	equ	0xFF3
  3860                           intcon	equ	0xFF2
  3861                           intcon2	equ	0xFF1
  3862                           intcon3	equ	0xFF0
  3863                           postinc0	equ	0xFEE
  3864                           wreg	equ	0xFE8
  3865                           postinc1	equ	0xFE6
  3866                           postdec1	equ	0xFE5
  3867                           fsr1h	equ	0xFE2
  3868                           fsr1l	equ	0xFE1
  3869                           indf2	equ	0xFDF
  3870                           postinc2	equ	0xFDE
  3871                           postdec2	equ	0xFDD
  3872                           fsr2h	equ	0xFDA
  3873                           fsr2l	equ	0xFD9
  3874                           status	equ	0xFD8
  3875                           
  3876 ;; *************** function _acende_led4 *****************
  3877 ;; Defined at:
  3878 ;;		line 438 in file "main.c"
  3879 ;; Parameters:    Size  Location     Type
  3880 ;;		None
  3881 ;; Auto vars:     Size  Location     Type
  3882 ;;		None
  3883 ;; Return value:  Size  Location     Type
  3884 ;;                  1    wreg      void 
  3885 ;; Registers used:
  3886 ;;		wreg, status,2, status,0, cstack
  3887 ;; Tracked objects:
  3888 ;;		On entry : 0/0
  3889 ;;		On exit  : 0/0
  3890 ;;		Unchanged: 0/0
  3891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3892 ;;      Params:         0       0       0       0       0       0       0       0       0
  3893 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3894 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3895 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3896 ;;Total ram usage:        0 bytes
  3897 ;; Hardware stack levels used:    1
  3898 ;; Hardware stack levels required when called:    3
  3899 ;; This function calls:
  3900 ;;		_shrc_apaga_bit
  3901 ;;		_shrc_seta_bit
  3902 ;; This function is called by:
  3903 ;;		_inicializa_tarefas
  3904 ;;		_escalonador
  3905 ;; This function uses a non-reentrant model
  3906 ;;
  3907                           
  3908                           	psect	text19
  3909  003084                     __ptext19:
  3910                           	opt stack 0
  3911  003084                     _acende_led4:
  3912                           	opt stack 26
  3913                           
  3914                           ;main.c: 439: static unsigned char flag = 0;
  3915                           ;main.c: 440: flag = !flag;
  3916                           
  3917                           ;incstack = 0
  3918  003084  503D               	movf	acende_led4@flag,w,c
  3919  003086  A4D8               	btfss	status,2,c
  3920  003088  D002               	goto	u8460
  3921  00308A  0E01               	movlw	1
  3922  00308C  D001               	goto	u8470
  3923  00308E                     u8460:
  3924  00308E  0E00               	movlw	0
  3925  003090                     u8470:
  3926  003090  6E3D               	movwf	acende_led4@flag,c
  3927                           
  3928                           ;main.c: 441: if(!flag)
  3929  003092  503D               	movf	acende_led4@flag,w,c
  3930  003094  A4D8               	btfss	status,2,c
  3931  003096  D004               	goto	l546
  3932                           
  3933                           ;main.c: 442: {
  3934                           ;main.c: 443: shrc_seta_bit(0);
  3935  003098  0E00               	movlw	0
  3936  00309A  EC97  F018         	call	_shrc_seta_bit
  3937                           
  3938                           ;main.c: 444: }
  3939  00309E  0012               	return	
  3940  0030A0                     l546:
  3941                           
  3942                           ;main.c: 445: else
  3943                           ;main.c: 446: {
  3944                           ;main.c: 447: shrc_apaga_bit(0);
  3945  0030A0  0E00               	movlw	0
  3946  0030A2  EC88  F018         	call	_shrc_apaga_bit
  3947  0030A6  0012               	return	
  3948  0030A8                     __end_of_acende_led4:
  3949                           	opt stack 0
  3950                           tosu	equ	0xFFF
  3951                           tosh	equ	0xFFE
  3952                           tosl	equ	0xFFD
  3953                           pclath	equ	0xFFA
  3954                           tblptru	equ	0xFF8
  3955                           tblptrh	equ	0xFF7
  3956                           tblptrl	equ	0xFF6
  3957                           tablat	equ	0xFF5
  3958                           prodh	equ	0xFF4
  3959                           prodl	equ	0xFF3
  3960                           intcon	equ	0xFF2
  3961                           intcon2	equ	0xFF1
  3962                           intcon3	equ	0xFF0
  3963                           postinc0	equ	0xFEE
  3964                           wreg	equ	0xFE8
  3965                           postinc1	equ	0xFE6
  3966                           postdec1	equ	0xFE5
  3967                           fsr1h	equ	0xFE2
  3968                           fsr1l	equ	0xFE1
  3969                           indf2	equ	0xFDF
  3970                           postinc2	equ	0xFDE
  3971                           postdec2	equ	0xFDD
  3972                           fsr2h	equ	0xFDA
  3973                           fsr2l	equ	0xFD9
  3974                           status	equ	0xFD8
  3975                           
  3976 ;; *************** function _shrc_apaga_bit *****************
  3977 ;; Defined at:
  3978 ;;		line 124 in file "bibliotecas/SHRC.c"
  3979 ;; Parameters:    Size  Location     Type
  3980 ;;  posicao_bit     1    wreg     unsigned char 
  3981 ;; Auto vars:     Size  Location     Type
  3982 ;;  posicao_bit     1   27[COMRAM] unsigned char 
  3983 ;; Return value:  Size  Location     Type
  3984 ;;                  1    wreg      void 
  3985 ;; Registers used:
  3986 ;;		wreg, status,2, status,0
  3987 ;; Tracked objects:
  3988 ;;		On entry : 0/0
  3989 ;;		On exit  : 0/0
  3990 ;;		Unchanged: 0/0
  3991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3992 ;;      Params:         0       0       0       0       0       0       0       0       0
  3993 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3994 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3995 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3996 ;;Total ram usage:        3 bytes
  3997 ;; Hardware stack levels used:    1
  3998 ;; Hardware stack levels required when called:    2
  3999 ;; This function calls:
  4000 ;;		Nothing
  4001 ;; This function is called by:
  4002 ;;		_acende_led4
  4003 ;;		_timer_dois
  4004 ;; This function uses a non-reentrant model
  4005 ;;
  4006                           
  4007                           	psect	text20
  4008  003110                     __ptext20:
  4009                           	opt stack 0
  4010  003110                     _shrc_apaga_bit:
  4011                           	opt stack 26
  4012                           
  4013                           ;incstack = 0
  4014                           ;shrc_apaga_bit@posicao_bit stored from wreg
  4015  003110  6E1C               	movwf	shrc_apaga_bit@posicao_bit,c
  4016                           
  4017                           ;SHRC.c: 126: dado &= ~(1<<posicao_bit);
  4018  003112  C01C  F01A         	movff	shrc_apaga_bit@posicao_bit,??_shrc_apaga_bit
  4019  003116  0E01               	movlw	1
  4020  003118  6E1B               	movwf	(??_shrc_apaga_bit+1)& (0+255),c
  4021  00311A  2A1A               	incf	??_shrc_apaga_bit,f,c
  4022  00311C  D002               	goto	u4684
  4023  00311E                     u4685:
  4024  00311E  90D8               	bcf	status,0,c
  4025  003120  361B               	rlcf	??_shrc_apaga_bit+1,f,c
  4026  003122                     u4684:
  4027  003122  2E1A               	decfsz	??_shrc_apaga_bit,f,c
  4028  003124  D7FC               	goto	u4685
  4029  003126  501B               	movf	??_shrc_apaga_bit+1,w,c
  4030  003128  0AFF               	xorlw	255
  4031  00312A  1645               	andwf	_dado,f,c
  4032  00312C  0012               	return		;funcret
  4033  00312E                     __end_of_shrc_apaga_bit:
  4034                           	opt stack 0
  4035                           tosu	equ	0xFFF
  4036                           tosh	equ	0xFFE
  4037                           tosl	equ	0xFFD
  4038                           pclath	equ	0xFFA
  4039                           tblptru	equ	0xFF8
  4040                           tblptrh	equ	0xFF7
  4041                           tblptrl	equ	0xFF6
  4042                           tablat	equ	0xFF5
  4043                           prodh	equ	0xFF4
  4044                           prodl	equ	0xFF3
  4045                           intcon	equ	0xFF2
  4046                           intcon2	equ	0xFF1
  4047                           intcon3	equ	0xFF0
  4048                           postinc0	equ	0xFEE
  4049                           wreg	equ	0xFE8
  4050                           postinc1	equ	0xFE6
  4051                           postdec1	equ	0xFE5
  4052                           fsr1h	equ	0xFE2
  4053                           fsr1l	equ	0xFE1
  4054                           indf2	equ	0xFDF
  4055                           postinc2	equ	0xFDE
  4056                           postdec2	equ	0xFDD
  4057                           fsr2h	equ	0xFDA
  4058                           fsr2l	equ	0xFD9
  4059                           status	equ	0xFD8
  4060                           
  4061 ;; *************** function _readover *****************
  4062 ;; Defined at:
  4063 ;;		line 27 in file "diskio.c"
  4064 ;; Parameters:    Size  Location     Type
  4065 ;;  a               2   25[COMRAM] int 
  4066 ;; Auto vars:     Size  Location     Type
  4067 ;;		None
  4068 ;; Return value:  Size  Location     Type
  4069 ;;                  1    wreg      void 
  4070 ;; Registers used:
  4071 ;;		None
  4072 ;; Tracked objects:
  4073 ;;		On entry : 0/0
  4074 ;;		On exit  : 0/0
  4075 ;;		Unchanged: 0/0
  4076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4077 ;;      Params:         2       0       0       0       0       0       0       0       0
  4078 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4079 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4080 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4081 ;;Total ram usage:        2 bytes
  4082 ;; Hardware stack levels used:    1
  4083 ;; Hardware stack levels required when called:    2
  4084 ;; This function calls:
  4085 ;;		Nothing
  4086 ;; This function is called by:
  4087 ;;		_SDCard
  4088 ;; This function uses a non-reentrant model
  4089 ;;
  4090                           
  4091                           	psect	text21
  4092  003258                     __ptext21:
  4093                           	opt stack 0
  4094  003258                     _readover:
  4095                           	opt stack 26
  4096                           
  4097                           ;diskio.c: 29: flag = a;
  4098                           
  4099                           ;incstack = 0
  4100  003258  C01A  F03B         	movff	readover@a,_flag
  4101  00325C  C01B  F03C         	movff	readover@a+1,_flag+1
  4102  003260  0012               	return		;funcret
  4103  003262                     __end_of_readover:
  4104                           	opt stack 0
  4105                           tosu	equ	0xFFF
  4106                           tosh	equ	0xFFE
  4107                           tosl	equ	0xFFD
  4108                           pclath	equ	0xFFA
  4109                           tblptru	equ	0xFF8
  4110                           tblptrh	equ	0xFF7
  4111                           tblptrl	equ	0xFF6
  4112                           tablat	equ	0xFF5
  4113                           prodh	equ	0xFF4
  4114                           prodl	equ	0xFF3
  4115                           intcon	equ	0xFF2
  4116                           intcon2	equ	0xFF1
  4117                           intcon3	equ	0xFF0
  4118                           postinc0	equ	0xFEE
  4119                           wreg	equ	0xFE8
  4120                           postinc1	equ	0xFE6
  4121                           postdec1	equ	0xFE5
  4122                           fsr1h	equ	0xFE2
  4123                           fsr1l	equ	0xFE1
  4124                           indf2	equ	0xFDF
  4125                           postinc2	equ	0xFDE
  4126                           postdec2	equ	0xFDD
  4127                           fsr2h	equ	0xFDA
  4128                           fsr2l	equ	0xFD9
  4129                           status	equ	0xFD8
  4130                           
  4131 ;; *************** function _pf_write *****************
  4132 ;; Defined at:
  4133 ;;		line 919 in file "pff.c"
  4134 ;; Parameters:    Size  Location     Type
  4135 ;;  buff            2   58[BANK0 ] PTR const void 
  4136 ;;		 -> STR_10(8), 
  4137 ;;  btw             2   60[BANK0 ] unsigned int 
  4138 ;;  bw              2   62[BANK0 ] PTR unsigned int 
  4139 ;;		 -> SDCard@br(2), 
  4140 ;; Auto vars:     Size  Location     Type
  4141 ;;  clst            4   82[BANK0 ] unsigned long 
  4142 ;;  remain          4   78[BANK0 ] unsigned long 
  4143 ;;  sect            4   74[BANK0 ] unsigned long 
  4144 ;;  fs              2   89[BANK0 ] PTR struct .
  4145 ;;		 -> NULL(0), SDCard@fs(42), 
  4146 ;;  wcnt            2   87[BANK0 ] unsigned int 
  4147 ;;  p               2   72[BANK0 ] PTR const unsigned char 
  4148 ;;		 -> STR_10(8), 
  4149 ;;  cs              1   86[BANK0 ] unsigned char 
  4150 ;; Return value:  Size  Location     Type
  4151 ;;                  1    wreg      enum E3838
  4152 ;; Registers used:
  4153 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4154 ;; Tracked objects:
  4155 ;;		On entry : 0/0
  4156 ;;		On exit  : 0/0
  4157 ;;		Unchanged: 0/0
  4158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4159 ;;      Params:         0       6       0       0       0       0       0       0       0
  4160 ;;      Locals:         0      19       0       0       0       0       0       0       0
  4161 ;;      Temps:          0       8       0       0       0       0       0       0       0
  4162 ;;      Totals:         0      33       0       0       0       0       0       0       0
  4163 ;;Total ram usage:       33 bytes
  4164 ;; Hardware stack levels used:    1
  4165 ;; Hardware stack levels required when called:    8
  4166 ;; This function calls:
  4167 ;;		_clust2sect
  4168 ;;		_disk_writep
  4169 ;;		_get_fat
  4170 ;; This function is called by:
  4171 ;;		_SDCard
  4172 ;; This function uses a non-reentrant model
  4173 ;;
  4174                           
  4175                           	psect	text22
  4176  000646                     __ptext22:
  4177                           	opt stack 0
  4178  000646                     _pf_write:
  4179                           	opt stack 20
  4180                           
  4181                           ;pff.c: 925: DWORD clst;
  4182                           ;pff.c: 926: DWORD sect, remain;
  4183                           ;pff.c: 927: const BYTE *p = buff;
  4184                           
  4185                           ;incstack = 0
  4186  000646  C09A  F0A8         	movff	pf_write@buff,pf_write@p
  4187  00064A  C09B  F0A9         	movff	pf_write@buff+1,pf_write@p+1
  4188                           
  4189                           ;pff.c: 928: BYTE cs;
  4190                           ;pff.c: 929: UINT wcnt;
  4191                           ;pff.c: 930: FATFS *fs = FatFs;
  4192  00064E  C035  F0B9         	movff	_FatFs,pf_write@fs
  4193  000652  C036  F0BA         	movff	_FatFs+1,pf_write@fs+1
  4194                           
  4195                           ;pff.c: 933: *bw = 0;
  4196  000656  C09E  FFD9         	movff	pf_write@bw,fsr2l
  4197  00065A  C09F  FFDA         	movff	pf_write@bw+1,fsr2h
  4198  00065E  0E00               	movlw	0
  4199  000660  6EDE               	movwf	postinc2,c
  4200  000662  0E00               	movlw	0
  4201  000664  6EDD               	movwf	postdec2,c
  4202                           
  4203                           ;pff.c: 934: if (!fs) return FR_NOT_ENABLED;
  4204  000666  0100               	movlb	0	; () banked
  4205  000668  51B9               	movf	pf_write@fs& (0+255),w,b
  4206  00066A  11BA               	iorwf	(pf_write@fs+1)& (0+255),w,b
  4207  00066C  A4D8               	btfss	status,2,c
  4208  00066E  D002               	goto	l1005
  4209                           
  4210                           ; BSR set to: 0
  4211  000670  0E05               	movlw	5
  4212                           
  4213                           ; BSR set to: 0
  4214  000672  0012               	return	
  4215  000674                     l1005:
  4216                           
  4217                           ; BSR set to: 0
  4218                           ;pff.c: 935: if (!(fs->flag & 0x01))
  4219                           
  4220                           ; BSR set to: 0
  4221  000674  EE20 F001          	lfsr	2,1
  4222  000678  51B9               	movf	pf_write@fs& (0+255),w,b
  4223  00067A  26D9               	addwf	fsr2l,f,c
  4224  00067C  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4225  00067E  22DA               	addwfc	fsr2h,f,c
  4226  000680  B0DF               	btfsc	indf2,0,c
  4227  000682  D002               	goto	l1007
  4228                           
  4229                           ; BSR set to: 0
  4230                           ;pff.c: 936: return FR_NOT_OPENED;
  4231  000684  0E04               	movlw	4
  4232                           
  4233                           ; BSR set to: 0
  4234  000686  0012               	return	
  4235  000688                     l1007:
  4236                           
  4237                           ; BSR set to: 0
  4238                           ;pff.c: 938: if (!btw) {
  4239                           
  4240                           ; BSR set to: 0
  4241  000688  519C               	movf	pf_write@btw& (0+255),w,b
  4242  00068A  119D               	iorwf	(pf_write@btw+1)& (0+255),w,b
  4243  00068C  A4D8               	btfss	status,2,c
  4244  00068E  D031               	goto	l1008
  4245                           
  4246                           ; BSR set to: 0
  4247                           ;pff.c: 939: if ((fs->flag & 0x40) && disk_writep(0, 0)) {fs->flag = 0; return FR_DISK_E
      +                          RR;};
  4248  000690  EE20 F001          	lfsr	2,1
  4249  000694  51B9               	movf	pf_write@fs& (0+255),w,b
  4250  000696  26D9               	addwf	fsr2l,f,c
  4251  000698  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4252  00069A  22DA               	addwfc	fsr2h,f,c
  4253  00069C  ACDF               	btfss	indf2,6,c
  4254  00069E  D01E               	goto	l1009
  4255                           
  4256                           ; BSR set to: 0
  4257  0006A0  0E00               	movlw	0
  4258  0006A2  6F60               	movwf	disk_writep@wr& (0+255),b
  4259  0006A4  0E00               	movlw	0
  4260  0006A6  6F61               	movwf	(disk_writep@wr+1)& (0+255),b
  4261  0006A8  0E00               	movlw	0
  4262  0006AA  6F62               	movwf	(disk_writep@wr+2)& (0+255),b
  4263  0006AC  0E00               	movlw	0
  4264  0006AE  6F63               	movwf	disk_writep@sc& (0+255),b
  4265  0006B0  0E00               	movlw	0
  4266  0006B2  6F64               	movwf	(disk_writep@sc+1)& (0+255),b
  4267  0006B4  0E00               	movlw	0
  4268  0006B6  6F65               	movwf	(disk_writep@sc+2)& (0+255),b
  4269  0006B8  0E00               	movlw	0
  4270  0006BA  6F66               	movwf	(disk_writep@sc+3)& (0+255),b
  4271  0006BC  EC95  F00F         	call	_disk_writep	;wreg free
  4272  0006C0  0900               	iorlw	0
  4273  0006C2  B4D8               	btfsc	status,2,c
  4274  0006C4  D00B               	goto	l1009
  4275  0006C6  0100               	movlb	0	; () banked
  4276  0006C8  EE20 F001          	lfsr	2,1
  4277  0006CC  51B9               	movf	pf_write@fs& (0+255),w,b
  4278  0006CE  26D9               	addwf	fsr2l,f,c
  4279  0006D0  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4280  0006D2  22DA               	addwfc	fsr2h,f,c
  4281  0006D4  0E00               	movlw	0
  4282  0006D6  6EDF               	movwf	indf2,c
  4283                           
  4284                           ; BSR set to: 0
  4285  0006D8  0E01               	movlw	1
  4286                           
  4287                           ; BSR set to: 0
  4288  0006DA  0012               	return	
  4289  0006DC                     l1009:
  4290                           
  4291                           ;pff.c: 940: fs->flag &= ~0x40;
  4292                           
  4293                           ; BSR set to: 0
  4294  0006DC  0100               	movlb	0	; () banked
  4295  0006DE  EE20 F001          	lfsr	2,1
  4296  0006E2  51B9               	movf	pf_write@fs& (0+255),w,b
  4297  0006E4  26D9               	addwf	fsr2l,f,c
  4298  0006E6  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4299  0006E8  22DA               	addwfc	fsr2h,f,c
  4300  0006EA  0EBF               	movlw	191
  4301  0006EC  16DF               	andwf	indf2,f,c
  4302                           
  4303                           ; BSR set to: 0
  4304                           ;pff.c: 941: return FR_OK;
  4305  0006EE  0E00               	movlw	0
  4306                           
  4307                           ; BSR set to: 0
  4308  0006F0  0012               	return	
  4309  0006F2                     l1008:
  4310                           
  4311                           ; BSR set to: 0
  4312                           ;pff.c: 943: if (!(fs->flag & 0x40))
  4313                           
  4314                           ; BSR set to: 0
  4315  0006F2  EE20 F001          	lfsr	2,1
  4316  0006F6  51B9               	movf	pf_write@fs& (0+255),w,b
  4317  0006F8  26D9               	addwf	fsr2l,f,c
  4318  0006FA  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4319  0006FC  22DA               	addwfc	fsr2h,f,c
  4320  0006FE  BCDF               	btfsc	indf2,6,c
  4321  000700  D00E               	goto	l1011
  4322                           
  4323                           ; BSR set to: 0
  4324                           ;pff.c: 944: fs->fptr &= 0xFFFFFE00;
  4325  000702  EE20 F016          	lfsr	2,22
  4326  000706  51B9               	movf	pf_write@fs& (0+255),w,b
  4327  000708  26D9               	addwf	fsr2l,f,c
  4328  00070A  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4329  00070C  22DA               	addwfc	fsr2h,f,c
  4330  00070E  0E00               	movlw	0
  4331  000710  16DE               	andwf	postinc2,f,c
  4332  000712  0EFE               	movlw	254
  4333  000714  16DE               	andwf	postinc2,f,c
  4334  000716  0EFF               	movlw	255
  4335  000718  16DE               	andwf	postinc2,f,c
  4336  00071A  0EFF               	movlw	255
  4337  00071C  16DE               	andwf	postinc2,f,c
  4338  00071E                     l1011:
  4339                           
  4340                           ; BSR set to: 0
  4341                           ;pff.c: 945: }
  4342                           ;pff.c: 946: remain = fs->fsize - fs->fptr;
  4343                           
  4344                           ; BSR set to: 0
  4345  00071E  EE20 F01A          	lfsr	2,26
  4346  000722  51B9               	movf	pf_write@fs& (0+255),w,b
  4347  000724  26D9               	addwf	fsr2l,f,c
  4348  000726  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4349  000728  22DA               	addwfc	fsr2h,f,c
  4350  00072A  CFDE F0A0          	movff	postinc2,??_pf_write
  4351  00072E  CFDE F0A1          	movff	postinc2,??_pf_write+1
  4352  000732  CFDE F0A2          	movff	postinc2,??_pf_write+2
  4353  000736  CFDE F0A3          	movff	postinc2,??_pf_write+3
  4354  00073A  EE20 F016          	lfsr	2,22
  4355  00073E  51B9               	movf	pf_write@fs& (0+255),w,b
  4356  000740  26D9               	addwf	fsr2l,f,c
  4357  000742  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4358  000744  22DA               	addwfc	fsr2h,f,c
  4359  000746  CFDE F0A4          	movff	postinc2,??_pf_write+4
  4360  00074A  CFDE F0A5          	movff	postinc2,??_pf_write+5
  4361  00074E  CFDE F0A6          	movff	postinc2,??_pf_write+6
  4362  000752  CFDE F0A7          	movff	postinc2,??_pf_write+7
  4363  000756  1FA4               	comf	(??_pf_write+4)& (0+255),f,b
  4364  000758  1FA5               	comf	(??_pf_write+5)& (0+255),f,b
  4365  00075A  1FA6               	comf	(??_pf_write+6)& (0+255),f,b
  4366  00075C  1FA7               	comf	(??_pf_write+7)& (0+255),f,b
  4367  00075E  2BA4               	incf	(??_pf_write+4)& (0+255),f,b
  4368  000760  0E00               	movlw	0
  4369  000762  23A5               	addwfc	(??_pf_write+5)& (0+255),f,b
  4370  000764  23A6               	addwfc	(??_pf_write+6)& (0+255),f,b
  4371  000766  23A7               	addwfc	(??_pf_write+7)& (0+255),f,b
  4372  000768  51A0               	movf	??_pf_write& (0+255),w,b
  4373  00076A  25A4               	addwf	(??_pf_write+4)& (0+255),w,b
  4374  00076C  6FAE               	movwf	pf_write@remain& (0+255),b
  4375  00076E  51A1               	movf	(??_pf_write+1)& (0+255),w,b
  4376  000770  21A5               	addwfc	(??_pf_write+5)& (0+255),w,b
  4377  000772  6FAF               	movwf	(pf_write@remain+1)& (0+255),b
  4378  000774  51A2               	movf	(??_pf_write+2)& (0+255),w,b
  4379  000776  21A6               	addwfc	(??_pf_write+6)& (0+255),w,b
  4380  000778  6FB0               	movwf	(pf_write@remain+2)& (0+255),b
  4381  00077A  51A3               	movf	(??_pf_write+3)& (0+255),w,b
  4382  00077C  21A7               	addwfc	(??_pf_write+7)& (0+255),w,b
  4383  00077E  6FB1               	movwf	(pf_write@remain+3)& (0+255),b
  4384                           
  4385                           ; BSR set to: 0
  4386                           ;pff.c: 947: if (btw > remain) btw = (UINT)remain;
  4387  000780  519C               	movf	pf_write@btw& (0+255),w,b
  4388  000782  6FA0               	movwf	??_pf_write& (0+255),b
  4389  000784  519D               	movf	(pf_write@btw+1)& (0+255),w,b
  4390  000786  6FA1               	movwf	(??_pf_write+1)& (0+255),b
  4391  000788  6BA2               	clrf	(??_pf_write+2)& (0+255),b
  4392  00078A  6BA3               	clrf	(??_pf_write+3)& (0+255),b
  4393  00078C  51A0               	movf	??_pf_write& (0+255),w,b
  4394  00078E  5DAE               	subwf	pf_write@remain& (0+255),w,b
  4395  000790  51A1               	movf	(??_pf_write+1)& (0+255),w,b
  4396  000792  59AF               	subwfb	(pf_write@remain+1)& (0+255),w,b
  4397  000794  51A2               	movf	(??_pf_write+2)& (0+255),w,b
  4398  000796  59B0               	subwfb	(pf_write@remain+2)& (0+255),w,b
  4399  000798  51A3               	movf	(??_pf_write+3)& (0+255),w,b
  4400  00079A  59B1               	subwfb	(pf_write@remain+3)& (0+255),w,b
  4401  00079C  B0D8               	btfsc	status,0,c
  4402  00079E  D1AC               	goto	l1024
  4403                           
  4404                           ; BSR set to: 0
  4405  0007A0  C0AE  F09C         	movff	pf_write@remain,pf_write@btw
  4406  0007A4  C0AF  F09D         	movff	pf_write@remain+1,pf_write@btw+1
  4407                           
  4408                           ; BSR set to: 0
  4409                           ;pff.c: 949: while (btw) {
  4410  0007A8  D1A7               	goto	l1024
  4411  0007AA                     
  4412                           ; BSR set to: 0
  4413                           ;pff.c: 950: if ((UINT)fs->fptr % 512 == 0) {
  4414                           
  4415                           ; BSR set to: 0
  4416  0007AA  0EFF               	movlw	255
  4417  0007AC  6FA0               	movwf	??_pf_write& (0+255),b
  4418  0007AE  0E01               	movlw	1
  4419  0007B0  6FA1               	movwf	(??_pf_write+1)& (0+255),b
  4420  0007B2  EE20 F016          	lfsr	2,22
  4421  0007B6  51B9               	movf	pf_write@fs& (0+255),w,b
  4422  0007B8  26D9               	addwf	fsr2l,f,c
  4423  0007BA  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4424  0007BC  22DA               	addwfc	fsr2h,f,c
  4425  0007BE  CFDE F0A2          	movff	postinc2,??_pf_write+2
  4426  0007C2  CFDD F0A3          	movff	postdec2,??_pf_write+3
  4427  0007C6  51A0               	movf	??_pf_write& (0+255),w,b
  4428  0007C8  17A2               	andwf	(??_pf_write+2)& (0+255),f,b
  4429  0007CA  51A1               	movf	(??_pf_write+1)& (0+255),w,b
  4430  0007CC  17A3               	andwf	(??_pf_write+3)& (0+255),f,b
  4431  0007CE  51A2               	movf	(??_pf_write+2)& (0+255),w,b
  4432  0007D0  11A3               	iorwf	(??_pf_write+3)& (0+255),w,b
  4433  0007D2  A4D8               	btfss	status,2,c
  4434  0007D4  D0E9               	goto	l1015
  4435                           
  4436                           ; BSR set to: 0
  4437                           ;pff.c: 951: cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));
  4438  0007D6  EE20 F016          	lfsr	2,22
  4439  0007DA  51B9               	movf	pf_write@fs& (0+255),w,b
  4440  0007DC  26D9               	addwf	fsr2l,f,c
  4441  0007DE  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4442  0007E0  22DA               	addwfc	fsr2h,f,c
  4443  0007E2  CFDE F0A0          	movff	postinc2,??_pf_write
  4444  0007E6  CFDE F0A1          	movff	postinc2,??_pf_write+1
  4445  0007EA  CFDE F0A2          	movff	postinc2,??_pf_write+2
  4446  0007EE  CFDE F0A3          	movff	postinc2,??_pf_write+3
  4447  0007F2  0E0A               	movlw	10
  4448  0007F4  D005               	goto	u8040
  4449  0007F6                     u8045:
  4450  0007F6  90D8               	bcf	status,0,c
  4451  0007F8  33A3               	rrcf	(??_pf_write+3)& (0+255),f,b
  4452  0007FA  33A2               	rrcf	(??_pf_write+2)& (0+255),f,b
  4453  0007FC  33A1               	rrcf	(??_pf_write+1)& (0+255),f,b
  4454  0007FE  33A0               	rrcf	??_pf_write& (0+255),f,b
  4455  000800                     u8040:
  4456  000800  2EE8               	decfsz	wreg,f,c
  4457  000802  D7F9               	goto	u8045
  4458  000804  EE20 F002          	lfsr	2,2
  4459  000808  51B9               	movf	pf_write@fs& (0+255),w,b
  4460  00080A  26D9               	addwf	fsr2l,f,c
  4461  00080C  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4462  00080E  22DA               	addwfc	fsr2h,f,c
  4463  000810  50DF               	movf	indf2,w,c
  4464  000812  6FA4               	movwf	(??_pf_write+4)& (0+255),b
  4465  000814  05A4               	decf	(??_pf_write+4)& (0+255),w,b
  4466  000816  15A0               	andwf	??_pf_write& (0+255),w,b
  4467  000818  6FB6               	movwf	pf_write@cs& (0+255),b
  4468                           
  4469                           ; BSR set to: 0
  4470                           ;pff.c: 952: if (!cs) {
  4471  00081A  51B6               	movf	pf_write@cs& (0+255),w,b
  4472  00081C  A4D8               	btfss	status,2,c
  4473  00081E  D054               	goto	l1016
  4474                           
  4475                           ; BSR set to: 0
  4476                           ;pff.c: 953: if (fs->fptr == 0)
  4477  000820  EE20 F016          	lfsr	2,22
  4478  000824  51B9               	movf	pf_write@fs& (0+255),w,b
  4479  000826  26D9               	addwf	fsr2l,f,c
  4480  000828  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4481  00082A  22DA               	addwfc	fsr2h,f,c
  4482  00082C  50DE               	movf	postinc2,w,c
  4483  00082E  10DE               	iorwf	postinc2,w,c
  4484  000830  10DE               	iorwf	postinc2,w,c
  4485  000832  10DE               	iorwf	postinc2,w,c
  4486  000834  A4D8               	btfss	status,2,c
  4487  000836  D00F               	goto	l1017
  4488                           
  4489                           ; BSR set to: 0
  4490                           ;pff.c: 954: clst = fs->org_clust;
  4491  000838  EE20 F01E          	lfsr	2,30
  4492  00083C  51B9               	movf	pf_write@fs& (0+255),w,b
  4493  00083E  26D9               	addwf	fsr2l,f,c
  4494  000840  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4495  000842  22DA               	addwfc	fsr2h,f,c
  4496  000844  CFDE F0B2          	movff	postinc2,pf_write@clst
  4497  000848  CFDE F0B3          	movff	postinc2,pf_write@clst+1
  4498  00084C  CFDE F0B4          	movff	postinc2,pf_write@clst+2
  4499  000850  CFDE F0B5          	movff	postinc2,pf_write@clst+3
  4500  000854  D018               	goto	l1018
  4501  000856                     l1017:
  4502                           
  4503                           ; BSR set to: 0
  4504                           ;pff.c: 955: else
  4505                           ;pff.c: 956: clst = get_fat(fs->curr_clust);
  4506                           
  4507                           ; BSR set to: 0
  4508  000856  EE20 F022          	lfsr	2,34
  4509  00085A  51B9               	movf	pf_write@fs& (0+255),w,b
  4510  00085C  26D9               	addwf	fsr2l,f,c
  4511  00085E  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4512  000860  22DA               	addwfc	fsr2h,f,c
  4513  000862  CFDE F072          	movff	postinc2,get_fat@clst
  4514  000866  CFDE F073          	movff	postinc2,get_fat@clst+1
  4515  00086A  CFDE F074          	movff	postinc2,get_fat@clst+2
  4516  00086E  CFDE F075          	movff	postinc2,get_fat@clst+3
  4517  000872  EC82  F005         	call	_get_fat	;wreg free
  4518  000876  C072  F0B2         	movff	?_get_fat,pf_write@clst
  4519  00087A  C073  F0B3         	movff	?_get_fat+1,pf_write@clst+1
  4520  00087E  C074  F0B4         	movff	?_get_fat+2,pf_write@clst+2
  4521  000882  C075  F0B5         	movff	?_get_fat+3,pf_write@clst+3
  4522  000886                     l1018:
  4523                           
  4524                           ;pff.c: 957: if (clst <= 1) {fs->flag = 0; return FR_DISK_ERR;};
  4525  000886  0100               	movlb	0	; () banked
  4526  000888  51B5               	movf	(pf_write@clst+3)& (0+255),w,b
  4527  00088A  11B4               	iorwf	(pf_write@clst+2)& (0+255),w,b
  4528  00088C  11B3               	iorwf	(pf_write@clst+1)& (0+255),w,b
  4529  00088E  E10E               	bnz	l7066
  4530  000890  0E02               	movlw	2
  4531  000892  5DB2               	subwf	pf_write@clst& (0+255),w,b
  4532  000894  B0D8               	btfsc	status,0,c
  4533  000896  D00A               	goto	l1019
  4534                           
  4535                           ; BSR set to: 0
  4536  000898  EE20 F001          	lfsr	2,1
  4537  00089C  51B9               	movf	pf_write@fs& (0+255),w,b
  4538  00089E  26D9               	addwf	fsr2l,f,c
  4539  0008A0  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4540  0008A2  22DA               	addwfc	fsr2h,f,c
  4541  0008A4  0E00               	movlw	0
  4542  0008A6  6EDF               	movwf	indf2,c
  4543                           
  4544                           ; BSR set to: 0
  4545  0008A8  0E01               	movlw	1
  4546                           
  4547                           ; BSR set to: 0
  4548  0008AA  0012               	return	
  4549  0008AC                     l1019:
  4550  0008AC                     l7066:
  4551                           
  4552                           ; BSR set to: 0
  4553                           ;pff.c: 958: fs->curr_clust = clst;
  4554  0008AC  EE20 F022          	lfsr	2,34
  4555  0008B0  51B9               	movf	pf_write@fs& (0+255),w,b
  4556  0008B2  26D9               	addwf	fsr2l,f,c
  4557  0008B4  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4558  0008B6  22DA               	addwfc	fsr2h,f,c
  4559  0008B8  C0B2  FFDE         	movff	pf_write@clst,postinc2
  4560  0008BC  C0B3  FFDE         	movff	pf_write@clst+1,postinc2
  4561  0008C0  C0B4  FFDE         	movff	pf_write@clst+2,postinc2
  4562  0008C4  C0B5  FFDE         	movff	pf_write@clst+3,postinc2
  4563  0008C8                     l1016:
  4564                           
  4565                           ; BSR set to: 0
  4566                           ;pff.c: 959: }
  4567                           ;pff.c: 960: sect = clust2sect(fs->curr_clust);
  4568                           
  4569                           ; BSR set to: 0
  4570  0008C8  EE20 F022          	lfsr	2,34
  4571  0008CC  51B9               	movf	pf_write@fs& (0+255),w,b
  4572  0008CE  26D9               	addwf	fsr2l,f,c
  4573  0008D0  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4574  0008D2  22DA               	addwfc	fsr2h,f,c
  4575  0008D4  CFDE F026          	movff	postinc2,clust2sect@clst
  4576  0008D8  CFDE F027          	movff	postinc2,clust2sect@clst+1
  4577  0008DC  CFDE F028          	movff	postinc2,clust2sect@clst+2
  4578  0008E0  CFDE F029          	movff	postinc2,clust2sect@clst+3
  4579  0008E4  ECC4  F013         	call	_clust2sect	;wreg free
  4580  0008E8  C026  F0AA         	movff	?_clust2sect,pf_write@sect
  4581  0008EC  C027  F0AB         	movff	?_clust2sect+1,pf_write@sect+1
  4582  0008F0  C028  F0AC         	movff	?_clust2sect+2,pf_write@sect+2
  4583  0008F4  C029  F0AD         	movff	?_clust2sect+3,pf_write@sect+3
  4584                           
  4585                           ;pff.c: 961: if (!sect) {fs->flag = 0; return FR_DISK_ERR;};
  4586  0008F8  0100               	movlb	0	; () banked
  4587  0008FA  51AA               	movf	pf_write@sect& (0+255),w,b
  4588  0008FC  11AB               	iorwf	(pf_write@sect+1)& (0+255),w,b
  4589  0008FE  11AC               	iorwf	(pf_write@sect+2)& (0+255),w,b
  4590  000900  11AD               	iorwf	(pf_write@sect+3)& (0+255),w,b
  4591  000902  A4D8               	btfss	status,2,c
  4592  000904  D00A               	goto	l1020
  4593                           
  4594                           ; BSR set to: 0
  4595  000906  EE20 F001          	lfsr	2,1
  4596  00090A  51B9               	movf	pf_write@fs& (0+255),w,b
  4597  00090C  26D9               	addwf	fsr2l,f,c
  4598  00090E  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4599  000910  22DA               	addwfc	fsr2h,f,c
  4600  000912  0E00               	movlw	0
  4601  000914  6EDF               	movwf	indf2,c
  4602                           
  4603                           ; BSR set to: 0
  4604  000916  0E01               	movlw	1
  4605                           
  4606                           ; BSR set to: 0
  4607  000918  0012               	return	
  4608  00091A                     l1020:
  4609                           
  4610                           ; BSR set to: 0
  4611                           ;pff.c: 962: fs->dsect = sect + cs;
  4612                           
  4613                           ; BSR set to: 0
  4614  00091A  51B6               	movf	pf_write@cs& (0+255),w,b
  4615  00091C  25AA               	addwf	pf_write@sect& (0+255),w,b
  4616  00091E  6FA0               	movwf	??_pf_write& (0+255),b
  4617  000920  0E00               	movlw	0
  4618  000922  21AB               	addwfc	(pf_write@sect+1)& (0+255),w,b
  4619  000924  6FA1               	movwf	(??_pf_write+1)& (0+255),b
  4620  000926  0E00               	movlw	0
  4621  000928  21AC               	addwfc	(pf_write@sect+2)& (0+255),w,b
  4622  00092A  6FA2               	movwf	(??_pf_write+2)& (0+255),b
  4623  00092C  0E00               	movlw	0
  4624  00092E  21AD               	addwfc	(pf_write@sect+3)& (0+255),w,b
  4625  000930  6FA3               	movwf	(??_pf_write+3)& (0+255),b
  4626  000932  EE20 F026          	lfsr	2,38
  4627  000936  51B9               	movf	pf_write@fs& (0+255),w,b
  4628  000938  26D9               	addwf	fsr2l,f,c
  4629  00093A  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4630  00093C  22DA               	addwfc	fsr2h,f,c
  4631  00093E  C0A0  FFDE         	movff	??_pf_write,postinc2
  4632  000942  C0A1  FFDE         	movff	??_pf_write+1,postinc2
  4633  000946  C0A2  FFDE         	movff	??_pf_write+2,postinc2
  4634  00094A  C0A3  FFDE         	movff	??_pf_write+3,postinc2
  4635                           
  4636                           ; BSR set to: 0
  4637                           ;pff.c: 963: if (disk_writep(0, fs->dsect)) {fs->flag = 0; return FR_DISK_ERR;};
  4638  00094E  0E00               	movlw	0
  4639  000950  6F60               	movwf	disk_writep@wr& (0+255),b
  4640  000952  0E00               	movlw	0
  4641  000954  6F61               	movwf	(disk_writep@wr+1)& (0+255),b
  4642  000956  0E00               	movlw	0
  4643  000958  6F62               	movwf	(disk_writep@wr+2)& (0+255),b
  4644  00095A  EE20 F026          	lfsr	2,38
  4645  00095E  51B9               	movf	pf_write@fs& (0+255),w,b
  4646  000960  26D9               	addwf	fsr2l,f,c
  4647  000962  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4648  000964  22DA               	addwfc	fsr2h,f,c
  4649  000966  CFDE F063          	movff	postinc2,disk_writep@sc
  4650  00096A  CFDE F064          	movff	postinc2,disk_writep@sc+1
  4651  00096E  CFDE F065          	movff	postinc2,disk_writep@sc+2
  4652  000972  CFDE F066          	movff	postinc2,disk_writep@sc+3
  4653  000976  EC95  F00F         	call	_disk_writep	;wreg free
  4654  00097A  0900               	iorlw	0
  4655  00097C  B4D8               	btfsc	status,2,c
  4656  00097E  D00B               	goto	l1021
  4657  000980  0100               	movlb	0	; () banked
  4658  000982  EE20 F001          	lfsr	2,1
  4659  000986  51B9               	movf	pf_write@fs& (0+255),w,b
  4660  000988  26D9               	addwf	fsr2l,f,c
  4661  00098A  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4662  00098C  22DA               	addwfc	fsr2h,f,c
  4663  00098E  0E00               	movlw	0
  4664  000990  6EDF               	movwf	indf2,c
  4665                           
  4666                           ; BSR set to: 0
  4667  000992  0E01               	movlw	1
  4668                           
  4669                           ; BSR set to: 0
  4670  000994  0012               	return	
  4671  000996                     l1021:
  4672                           
  4673                           ;pff.c: 964: fs->flag |= 0x40;
  4674                           
  4675                           ; BSR set to: 0
  4676  000996  0100               	movlb	0	; () banked
  4677  000998  EE20 F001          	lfsr	2,1
  4678  00099C  51B9               	movf	pf_write@fs& (0+255),w,b
  4679  00099E  26D9               	addwf	fsr2l,f,c
  4680  0009A0  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4681  0009A2  22DA               	addwfc	fsr2h,f,c
  4682  0009A4  0E00               	movlw	0
  4683  0009A6  8CDB               	bsf	plusw2,6,c
  4684  0009A8                     l1015:
  4685                           
  4686                           ; BSR set to: 0
  4687                           ;pff.c: 965: }
  4688                           ;pff.c: 966: wcnt = 512 - (UINT)fs->fptr % 512;
  4689  0009A8  0EFF               	movlw	255
  4690  0009AA  6FA0               	movwf	??_pf_write& (0+255),b
  4691  0009AC  0E01               	movlw	1
  4692  0009AE  6FA1               	movwf	(??_pf_write+1)& (0+255),b
  4693  0009B0  EE20 F016          	lfsr	2,22
  4694  0009B4  51B9               	movf	pf_write@fs& (0+255),w,b
  4695  0009B6  26D9               	addwf	fsr2l,f,c
  4696  0009B8  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4697  0009BA  22DA               	addwfc	fsr2h,f,c
  4698  0009BC  CFDE F0A2          	movff	postinc2,??_pf_write+2
  4699  0009C0  CFDD F0A3          	movff	postdec2,??_pf_write+3
  4700  0009C4  51A0               	movf	??_pf_write& (0+255),w,b
  4701  0009C6  17A2               	andwf	(??_pf_write+2)& (0+255),f,b
  4702  0009C8  51A1               	movf	(??_pf_write+1)& (0+255),w,b
  4703  0009CA  17A3               	andwf	(??_pf_write+3)& (0+255),f,b
  4704  0009CC  1FA2               	comf	(??_pf_write+2)& (0+255),f,b
  4705  0009CE  1FA3               	comf	(??_pf_write+3)& (0+255),f,b
  4706  0009D0  4BA2               	infsnz	(??_pf_write+2)& (0+255),f,b
  4707  0009D2  2BA3               	incf	(??_pf_write+3)& (0+255),f,b
  4708  0009D4  0E00               	movlw	0
  4709  0009D6  25A2               	addwf	(??_pf_write+2)& (0+255),w,b
  4710  0009D8  6FB7               	movwf	pf_write@wcnt& (0+255),b
  4711  0009DA  0E02               	movlw	2
  4712  0009DC  21A3               	addwfc	(??_pf_write+3)& (0+255),w,b
  4713  0009DE  6FB8               	movwf	(pf_write@wcnt+1)& (0+255),b
  4714                           
  4715                           ; BSR set to: 0
  4716                           ;pff.c: 967: if (wcnt > btw)wcnt = btw;
  4717  0009E0  51B7               	movf	pf_write@wcnt& (0+255),w,b
  4718  0009E2  5D9C               	subwf	pf_write@btw& (0+255),w,b
  4719  0009E4  51B8               	movf	(pf_write@wcnt+1)& (0+255),w,b
  4720  0009E6  599D               	subwfb	(pf_write@btw+1)& (0+255),w,b
  4721  0009E8  B0D8               	btfsc	status,0,c
  4722  0009EA  D004               	goto	l1022
  4723                           
  4724                           ; BSR set to: 0
  4725  0009EC  C09C  F0B7         	movff	pf_write@btw,pf_write@wcnt
  4726  0009F0  C09D  F0B8         	movff	pf_write@btw+1,pf_write@wcnt+1
  4727  0009F4                     l1022:
  4728                           
  4729                           ; BSR set to: 0
  4730                           ;pff.c: 968: if (disk_writep(p, fs->dsect )) {fs->flag = 0; return FR_DISK_ERR;};
  4731                           
  4732                           ; BSR set to: 0
  4733  0009F4  C0A8  F060         	movff	pf_write@p,disk_writep@wr
  4734  0009F8  C0A9  F061         	movff	pf_write@p+1,disk_writep@wr+1
  4735  0009FC  5160               	movf	disk_writep@wr& (0+255),w,b
  4736  0009FE  1161               	iorwf	(disk_writep@wr+1)& (0+255),w,b
  4737  000A00  A4D8               	btfss	status,2,c
  4738  000A02  0E00               	movlw	low (__mediumconst shr (0+16))
  4739  000A04  6F62               	movwf	(disk_writep@wr+2)& (0+255),b
  4740  000A06  EE20 F026          	lfsr	2,38
  4741  000A0A  51B9               	movf	pf_write@fs& (0+255),w,b
  4742  000A0C  26D9               	addwf	fsr2l,f,c
  4743  000A0E  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4744  000A10  22DA               	addwfc	fsr2h,f,c
  4745  000A12  CFDE F063          	movff	postinc2,disk_writep@sc
  4746  000A16  CFDE F064          	movff	postinc2,disk_writep@sc+1
  4747  000A1A  CFDE F065          	movff	postinc2,disk_writep@sc+2
  4748  000A1E  CFDE F066          	movff	postinc2,disk_writep@sc+3
  4749  000A22  EC95  F00F         	call	_disk_writep	;wreg free
  4750  000A26  0900               	iorlw	0
  4751  000A28  B4D8               	btfsc	status,2,c
  4752  000A2A  D00B               	goto	l1023
  4753  000A2C  0100               	movlb	0	; () banked
  4754  000A2E  EE20 F001          	lfsr	2,1
  4755  000A32  51B9               	movf	pf_write@fs& (0+255),w,b
  4756  000A34  26D9               	addwf	fsr2l,f,c
  4757  000A36  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4758  000A38  22DA               	addwfc	fsr2h,f,c
  4759  000A3A  0E00               	movlw	0
  4760  000A3C  6EDF               	movwf	indf2,c
  4761                           
  4762                           ; BSR set to: 0
  4763  000A3E  0E01               	movlw	1
  4764                           
  4765                           ; BSR set to: 0
  4766  000A40  0012               	return	
  4767  000A42                     l1023:
  4768                           
  4769                           ;pff.c: 969: fs->fptr += wcnt; p += wcnt;
  4770                           
  4771                           ; BSR set to: 0
  4772  000A42  0100               	movlb	0	; () banked
  4773  000A44  EE20 F016          	lfsr	2,22
  4774  000A48  51B9               	movf	pf_write@fs& (0+255),w,b
  4775  000A4A  26D9               	addwf	fsr2l,f,c
  4776  000A4C  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4777  000A4E  22DA               	addwfc	fsr2h,f,c
  4778  000A50  51B7               	movf	pf_write@wcnt& (0+255),w,b
  4779  000A52  26DE               	addwf	postinc2,f,c
  4780  000A54  51B8               	movf	(pf_write@wcnt+1)& (0+255),w,b
  4781  000A56  22DE               	addwfc	postinc2,f,c
  4782  000A58  0E00               	movlw	0
  4783  000A5A  22DE               	addwfc	postinc2,f,c
  4784  000A5C  22DE               	addwfc	postinc2,f,c
  4785                           
  4786                           ; BSR set to: 0
  4787  000A5E  51B7               	movf	pf_write@wcnt& (0+255),w,b
  4788  000A60  27A8               	addwf	pf_write@p& (0+255),f,b
  4789  000A62  51B8               	movf	(pf_write@wcnt+1)& (0+255),w,b
  4790  000A64  23A9               	addwfc	(pf_write@p+1)& (0+255),f,b
  4791                           
  4792                           ; BSR set to: 0
  4793                           ;pff.c: 970: btw -= wcnt; *bw += wcnt;
  4794  000A66  51B7               	movf	pf_write@wcnt& (0+255),w,b
  4795  000A68  5F9C               	subwf	pf_write@btw& (0+255),f,b
  4796  000A6A  51B8               	movf	(pf_write@wcnt+1)& (0+255),w,b
  4797  000A6C  5B9D               	subwfb	(pf_write@btw+1)& (0+255),f,b
  4798                           
  4799                           ; BSR set to: 0
  4800  000A6E  C09E  FFD9         	movff	pf_write@bw,fsr2l
  4801  000A72  C09F  FFDA         	movff	pf_write@bw+1,fsr2h
  4802  000A76  51B7               	movf	pf_write@wcnt& (0+255),w,b
  4803  000A78  26DE               	addwf	postinc2,f,c
  4804  000A7A  51B8               	movf	(pf_write@wcnt+1)& (0+255),w,b
  4805  000A7C  22DD               	addwfc	postdec2,f,c
  4806                           
  4807                           ; BSR set to: 0
  4808                           ;pff.c: 971: if ((UINT)fs->fptr % 512 == 0) {
  4809  000A7E  0EFF               	movlw	255
  4810  000A80  6FA0               	movwf	??_pf_write& (0+255),b
  4811  000A82  0E01               	movlw	1
  4812  000A84  6FA1               	movwf	(??_pf_write+1)& (0+255),b
  4813  000A86  EE20 F016          	lfsr	2,22
  4814  000A8A  51B9               	movf	pf_write@fs& (0+255),w,b
  4815  000A8C  26D9               	addwf	fsr2l,f,c
  4816  000A8E  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4817  000A90  22DA               	addwfc	fsr2h,f,c
  4818  000A92  CFDE F0A2          	movff	postinc2,??_pf_write+2
  4819  000A96  CFDD F0A3          	movff	postdec2,??_pf_write+3
  4820  000A9A  51A0               	movf	??_pf_write& (0+255),w,b
  4821  000A9C  17A2               	andwf	(??_pf_write+2)& (0+255),f,b
  4822  000A9E  51A1               	movf	(??_pf_write+1)& (0+255),w,b
  4823  000AA0  17A3               	andwf	(??_pf_write+3)& (0+255),f,b
  4824  000AA2  51A2               	movf	(??_pf_write+2)& (0+255),w,b
  4825  000AA4  11A3               	iorwf	(??_pf_write+3)& (0+255),w,b
  4826  000AA6  A4D8               	btfss	status,2,c
  4827  000AA8  D027               	goto	l1024
  4828                           
  4829                           ; BSR set to: 0
  4830                           ;pff.c: 972: if (disk_writep(0, 0)) {fs->flag = 0; return FR_DISK_ERR;};
  4831  000AAA  0E00               	movlw	0
  4832  000AAC  6F60               	movwf	disk_writep@wr& (0+255),b
  4833  000AAE  0E00               	movlw	0
  4834  000AB0  6F61               	movwf	(disk_writep@wr+1)& (0+255),b
  4835  000AB2  0E00               	movlw	0
  4836  000AB4  6F62               	movwf	(disk_writep@wr+2)& (0+255),b
  4837  000AB6  0E00               	movlw	0
  4838  000AB8  6F63               	movwf	disk_writep@sc& (0+255),b
  4839  000ABA  0E00               	movlw	0
  4840  000ABC  6F64               	movwf	(disk_writep@sc+1)& (0+255),b
  4841  000ABE  0E00               	movlw	0
  4842  000AC0  6F65               	movwf	(disk_writep@sc+2)& (0+255),b
  4843  000AC2  0E00               	movlw	0
  4844  000AC4  6F66               	movwf	(disk_writep@sc+3)& (0+255),b
  4845  000AC6  EC95  F00F         	call	_disk_writep	;wreg free
  4846  000ACA  0900               	iorlw	0
  4847  000ACC  B4D8               	btfsc	status,2,c
  4848  000ACE  D00B               	goto	l1025
  4849  000AD0  0100               	movlb	0	; () banked
  4850  000AD2  EE20 F001          	lfsr	2,1
  4851  000AD6  51B9               	movf	pf_write@fs& (0+255),w,b
  4852  000AD8  26D9               	addwf	fsr2l,f,c
  4853  000ADA  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4854  000ADC  22DA               	addwfc	fsr2h,f,c
  4855  000ADE  0E00               	movlw	0
  4856  000AE0  6EDF               	movwf	indf2,c
  4857                           
  4858                           ; BSR set to: 0
  4859  000AE2  0E01               	movlw	1
  4860                           
  4861                           ; BSR set to: 0
  4862  000AE4  0012               	return	
  4863  000AE6                     l1025:
  4864                           
  4865                           ;pff.c: 973: fs->flag &= ~0x40;
  4866                           
  4867                           ; BSR set to: 0
  4868  000AE6  0100               	movlb	0	; () banked
  4869  000AE8  EE20 F001          	lfsr	2,1
  4870  000AEC  51B9               	movf	pf_write@fs& (0+255),w,b
  4871  000AEE  26D9               	addwf	fsr2l,f,c
  4872  000AF0  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4873  000AF2  22DA               	addwfc	fsr2h,f,c
  4874  000AF4  0EBF               	movlw	191
  4875  000AF6  16DF               	andwf	indf2,f,c
  4876  000AF8                     l1024:
  4877                           
  4878                           ; BSR set to: 0
  4879                           
  4880                           ; BSR set to: 0
  4881                           
  4882                           ; BSR set to: 0
  4883  000AF8  519C               	movf	pf_write@btw& (0+255),w,b
  4884  000AFA  119D               	iorwf	(pf_write@btw+1)& (0+255),w,b
  4885  000AFC  A4D8               	btfss	status,2,c
  4886  000AFE  D655               	goto	l1014
  4887                           
  4888                           ; BSR set to: 0
  4889                           ;pff.c: 974: }
  4890                           ;pff.c: 975: }
  4891                           ;pff.c: 977: return FR_OK;
  4892                           
  4893                           ; BSR set to: 0
  4894  000B00  0E00               	movlw	0
  4895  000B02  0012               	return	
  4896  000B04                     __end_of_pf_write:
  4897                           	opt stack 0
  4898                           tosu	equ	0xFFF
  4899                           tosh	equ	0xFFE
  4900                           tosl	equ	0xFFD
  4901                           pclath	equ	0xFFA
  4902                           tblptru	equ	0xFF8
  4903                           tblptrh	equ	0xFF7
  4904                           tblptrl	equ	0xFF6
  4905                           tablat	equ	0xFF5
  4906                           prodh	equ	0xFF4
  4907                           prodl	equ	0xFF3
  4908                           intcon	equ	0xFF2
  4909                           intcon2	equ	0xFF1
  4910                           intcon3	equ	0xFF0
  4911                           postinc0	equ	0xFEE
  4912                           wreg	equ	0xFE8
  4913                           postinc1	equ	0xFE6
  4914                           postdec1	equ	0xFE5
  4915                           fsr1h	equ	0xFE2
  4916                           fsr1l	equ	0xFE1
  4917                           indf2	equ	0xFDF
  4918                           postinc2	equ	0xFDE
  4919                           postdec2	equ	0xFDD
  4920                           plusw2	equ	0xFDB
  4921                           fsr2h	equ	0xFDA
  4922                           fsr2l	equ	0xFD9
  4923                           status	equ	0xFD8
  4924                           
  4925 ;; *************** function _disk_writep *****************
  4926 ;; Defined at:
  4927 ;;		line 293 in file "diskio.c"
  4928 ;; Parameters:    Size  Location     Type
  4929 ;;  wr              3    0[BANK0 ] PTR const unsigned char 
  4930 ;;		 -> ROM(32767), STR_10(8), 
  4931 ;;  sc              4    3[BANK0 ] unsigned long 
  4932 ;; Auto vars:     Size  Location     Type
  4933 ;;  j               2    9[BANK0 ] int 
  4934 ;;  i               2    7[BANK0 ] int 
  4935 ;;  buff            1   11[BANK0 ] unsigned char 
  4936 ;;  res             1    0        enum E14
  4937 ;; Return value:  Size  Location     Type
  4938 ;;                  1    wreg      enum E14
  4939 ;; Registers used:
  4940 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4941 ;; Tracked objects:
  4942 ;;		On entry : 0/0
  4943 ;;		On exit  : 0/0
  4944 ;;		Unchanged: 0/0
  4945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4946 ;;      Params:         0       7       0       0       0       0       0       0       0
  4947 ;;      Locals:         0       5       0       0       0       0       0       0       0
  4948 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4949 ;;      Totals:         4      12       0       0       0       0       0       0       0
  4950 ;;Total ram usage:       16 bytes
  4951 ;; Hardware stack levels used:    1
  4952 ;; Hardware stack levels required when called:    6
  4953 ;; This function calls:
  4954 ;;		_WriteSPI_
  4955 ;;		_command
  4956 ;;		_dummy_clocks
  4957 ;;		_proceed
  4958 ;;		_response
  4959 ;; This function is called by:
  4960 ;;		_pf_write
  4961 ;; This function uses a non-reentrant model
  4962 ;;
  4963                           
  4964                           	psect	text23
  4965  001F2A                     __ptext23:
  4966                           	opt stack 0
  4967  001F2A                     _disk_writep:
  4968                           	opt stack 21
  4969                           
  4970                           ;diskio.c: 298: DRESULT res;
  4971                           ;diskio.c: 300: unsigned char buff;
  4972                           ;diskio.c: 301: int i=0,j;
  4973                           
  4974                           ; BSR set to: 0
  4975                           ;incstack = 0
  4976  001F2A  0E00               	movlw	0
  4977  001F2C  0100               	movlb	0	; () banked
  4978  001F2E  6F68               	movwf	(disk_writep@i+1)& (0+255),b
  4979  001F30  0E00               	movlw	0
  4980  001F32  6F67               	movwf	disk_writep@i& (0+255),b
  4981                           
  4982                           ; BSR set to: 0
  4983                           ;diskio.c: 305: dummy_clocks(8);
  4984  001F34  0E08               	movlw	8
  4985  001F36  EC94  F017         	call	_dummy_clocks
  4986                           
  4987                           ;diskio.c: 306: command(0X58, sc*512, 0X00);
  4988  001F3A  C063  F028         	movff	disk_writep@sc,??_disk_writep
  4989  001F3E  C064  F029         	movff	disk_writep@sc+1,??_disk_writep+1
  4990  001F42  C065  F02A         	movff	disk_writep@sc+2,??_disk_writep+2
  4991  001F46  C066  F02B         	movff	disk_writep@sc+3,??_disk_writep+3
  4992  001F4A  0E09               	movlw	9
  4993  001F4C                     u7565:
  4994  001F4C  90D8               	bcf	status,0,c
  4995  001F4E  3628               	rlcf	??_disk_writep,f,c
  4996  001F50  3629               	rlcf	??_disk_writep+1,f,c
  4997  001F52  362A               	rlcf	??_disk_writep+2,f,c
  4998  001F54  362B               	rlcf	??_disk_writep+3,f,c
  4999  001F56  2EE8               	decfsz	wreg,f,c
  5000  001F58  D7F9               	goto	u7565
  5001  001F5A  C028  F021         	movff	??_disk_writep,command@arg
  5002  001F5E  C029  F022         	movff	??_disk_writep+1,command@arg+1
  5003  001F62  C02A  F023         	movff	??_disk_writep+2,command@arg+2
  5004  001F66  C02B  F024         	movff	??_disk_writep+3,command@arg+3
  5005  001F6A  0E00               	movlw	0
  5006  001F6C  6E25               	movwf	command@CRC,c
  5007  001F6E  0E58               	movlw	88
  5008  001F70  EC41  F017         	call	_command
  5009                           
  5010                           ;diskio.c: 307: proceed();
  5011  001F74  EC20  F019         	call	_proceed	;wreg free
  5012  001F78                     
  5013                           ;diskio.c: 309: buff = response();
  5014  001F78  EC13  F019         	call	_response	;wreg free
  5015  001F7C  0100               	movlb	0	; () banked
  5016  001F7E  6F6B               	movwf	disk_writep@buff& (0+255),b
  5017                           
  5018                           ; BSR set to: 0
  5019                           ;diskio.c: 310: }while(buff!=0x00);
  5020  001F80  516B               	movf	disk_writep@buff& (0+255),w,b
  5021  001F82  A4D8               	btfss	status,2,c
  5022  001F84  D7F9               	goto	l789
  5023                           
  5024                           ; BSR set to: 0
  5025                           ;diskio.c: 313: _delay((unsigned long)((2000)*(20000000/4000.0)));
  5026                           
  5027                           ; BSR set to: 0
  5028  001F86  0E33               	movlw	51
  5029  001F88  6E29               	movwf	(??_disk_writep+1)& (0+255),c
  5030  001F8A  0EBB               	movlw	187
  5031  001F8C  6E28               	movwf	??_disk_writep& (0+255),c
  5032  001F8E  0EE0               	movlw	224
  5033  001F90                     u9147:
  5034  001F90  2EE8               	decfsz	wreg,f,c
  5035  001F92  D7FE               	bra	u9147
  5036  001F94  2E28               	decfsz	??_disk_writep& (0+255),f,c
  5037  001F96  D7FC               	bra	u9147
  5038  001F98  2E29               	decfsz	(??_disk_writep+1)& (0+255),f,c
  5039  001F9A  D7FA               	bra	u9147
  5040                           
  5041                           ;diskio.c: 316: dummy_clocks(8);
  5042  001F9C  0E08               	movlw	8
  5043  001F9E  EC94  F017         	call	_dummy_clocks
  5044                           
  5045                           ;diskio.c: 318: WriteSPI_(0XFE);
  5046  001FA2  0EFE               	movlw	254
  5047  001FA4  ECD8  F017         	call	_WriteSPI_
  5048                           
  5049                           ;diskio.c: 320: for(j=0;j<512;j++)
  5050  001FA8  0E00               	movlw	0
  5051  001FAA  0100               	movlb	0	; () banked
  5052  001FAC  6F6A               	movwf	(disk_writep@j+1)& (0+255),b
  5053  001FAE  0E00               	movlw	0
  5054  001FB0  6F69               	movwf	disk_writep@j& (0+255),b
  5055  001FB2                     l6756:
  5056                           
  5057                           ; BSR set to: 0
  5058  001FB2  BF6A               	btfsc	(disk_writep@j+1)& (0+255),7,b
  5059  001FB4  D004               	goto	l791
  5060  001FB6  0E02               	movlw	2
  5061  001FB8  5D6A               	subwf	(disk_writep@j+1)& (0+255),w,b
  5062  001FBA  B0D8               	btfsc	status,0,c
  5063  001FBC  D024               	goto	u7600
  5064  001FBE                     l791:
  5065                           
  5066                           ; BSR set to: 0
  5067                           ;diskio.c: 321: {
  5068                           ;diskio.c: 322: if(*wr!='\0')
  5069                           
  5070                           ; BSR set to: 0
  5071  001FBE  C060  FFF6         	movff	disk_writep@wr,tblptrl
  5072  001FC2  C061  FFF7         	movff	disk_writep@wr+1,tblptrh
  5073  001FC6  C062  FFF8         	movff	disk_writep@wr+2,tblptru
  5074  001FCA  0008               	tblrd		*
  5075  001FCC  50F5               	movf	tablat,w,c
  5076  001FCE  0900               	iorlw	0
  5077  001FD0  B4D8               	btfsc	status,2,c
  5078  001FD2  D012               	goto	l793
  5079                           
  5080                           ; BSR set to: 0
  5081                           ;diskio.c: 323: {
  5082                           ;diskio.c: 324: WriteSPI_(*wr);
  5083  001FD4  C060  FFF6         	movff	disk_writep@wr,tblptrl
  5084  001FD8  C061  FFF7         	movff	disk_writep@wr+1,tblptrh
  5085  001FDC  C062  FFF8         	movff	disk_writep@wr+2,tblptru
  5086  001FE0  0008               	tblrd		*
  5087  001FE2  50F5               	movf	tablat,w,c
  5088  001FE4  ECD8  F017         	call	_WriteSPI_
  5089                           
  5090                           ;diskio.c: 325: wr++;
  5091  001FE8  0100               	movlb	0	; () banked
  5092  001FEA  0E01               	movlw	1
  5093  001FEC  2760               	addwf	disk_writep@wr& (0+255),f,b
  5094  001FEE  0E00               	movlw	0
  5095  001FF0  2361               	addwfc	(disk_writep@wr+1)& (0+255),f,b
  5096  001FF2  0E00               	movlw	0
  5097  001FF4  2362               	addwfc	(disk_writep@wr+2)& (0+255),f,b
  5098                           
  5099                           ;diskio.c: 326: }
  5100  001FF6  D003               	goto	l794
  5101  001FF8                     l793:
  5102                           
  5103                           ; BSR set to: 0
  5104                           ;diskio.c: 327: else
  5105                           ;diskio.c: 328: WriteSPI_(0x00);
  5106                           
  5107                           ; BSR set to: 0
  5108  001FF8  0E00               	movlw	0
  5109  001FFA  ECD8  F017         	call	_WriteSPI_
  5110  001FFE                     l794:
  5111  001FFE  0100               	movlb	0	; () banked
  5112  002000  4B69               	infsnz	disk_writep@j& (0+255),f,b
  5113  002002  2B6A               	incf	(disk_writep@j+1)& (0+255),f,b
  5114  002004  D7D6               	goto	l6756
  5115  002006                     u7600:
  5116                           
  5117                           ; BSR set to: 0
  5118                           ;diskio.c: 329: }
  5119                           ;diskio.c: 330: WriteSPI_(0XFF);
  5120                           
  5121                           ; BSR set to: 0
  5122  002006  0EFF               	movlw	255
  5123  002008  ECD8  F017         	call	_WriteSPI_
  5124                           
  5125                           ;diskio.c: 331: WriteSPI_(0XFF);
  5126  00200C  0EFF               	movlw	255
  5127  00200E  ECD8  F017         	call	_WriteSPI_
  5128                           
  5129                           ;diskio.c: 333: proceed();
  5130  002012  EC20  F019         	call	_proceed	;wreg free
  5131                           
  5132                           ;diskio.c: 335: _delay((unsigned long)((1000)*(20000000/4000.0)));
  5133  002016  0E1A               	movlw	26
  5134  002018  6E29               	movwf	(??_disk_writep+1)& (0+255),c
  5135  00201A  0E5E               	movlw	94
  5136  00201C  6E28               	movwf	??_disk_writep& (0+255),c
  5137  00201E  0E6E               	movlw	110
  5138  002020                     u9157:
  5139  002020  2EE8               	decfsz	wreg,f,c
  5140  002022  D7FE               	bra	u9157
  5141  002024  2E28               	decfsz	??_disk_writep& (0+255),f,c
  5142  002026  D7FC               	bra	u9157
  5143  002028  2E29               	decfsz	(??_disk_writep+1)& (0+255),f,c
  5144  00202A  D7FA               	bra	u9157
  5145  00202C  D000               	nop2	
  5146                           
  5147                           ;diskio.c: 337: dummy_clocks(8);
  5148  00202E  0E08               	movlw	8
  5149  002030  EC94  F017         	call	_dummy_clocks
  5150                           
  5151                           ;diskio.c: 339: command(0X4D,0X00000000,0X00);
  5152  002034  0E00               	movlw	0
  5153  002036  6E21               	movwf	command@arg,c
  5154  002038  0E00               	movlw	0
  5155  00203A  6E22               	movwf	command@arg+1,c
  5156  00203C  0E00               	movlw	0
  5157  00203E  6E23               	movwf	command@arg+2,c
  5158  002040  0E00               	movlw	0
  5159  002042  6E24               	movwf	command@arg+3,c
  5160  002044  0E00               	movlw	0
  5161  002046  6E25               	movwf	command@CRC,c
  5162  002048  0E4D               	movlw	77
  5163  00204A  EC41  F017         	call	_command
  5164                           
  5165                           ;diskio.c: 340: proceed();
  5166  00204E  EC20  F019         	call	_proceed	;wreg free
  5167  002052                     
  5168                           ;diskio.c: 342: buff = response();
  5169  002052  EC13  F019         	call	_response	;wreg free
  5170  002056  0100               	movlb	0	; () banked
  5171  002058  6F6B               	movwf	disk_writep@buff& (0+255),b
  5172                           
  5173                           ; BSR set to: 0
  5174                           ;diskio.c: 343: }while(buff!=0x00);
  5175  00205A  516B               	movf	disk_writep@buff& (0+255),w,b
  5176  00205C  A4D8               	btfss	status,2,c
  5177  00205E  D7F9               	goto	l795
  5178                           
  5179                           ; BSR set to: 0
  5180                           ;diskio.c: 345: return RES_OK;
  5181                           
  5182                           ; BSR set to: 0
  5183  002060  0E00               	movlw	0
  5184  002062  0012               	return	
  5185  002064                     __end_of_disk_writep:
  5186                           	opt stack 0
  5187                           tosu	equ	0xFFF
  5188                           tosh	equ	0xFFE
  5189                           tosl	equ	0xFFD
  5190                           pclath	equ	0xFFA
  5191                           tblptru	equ	0xFF8
  5192                           tblptrh	equ	0xFF7
  5193                           tblptrl	equ	0xFF6
  5194                           tablat	equ	0xFF5
  5195                           prodh	equ	0xFF4
  5196                           prodl	equ	0xFF3
  5197                           intcon	equ	0xFF2
  5198                           intcon2	equ	0xFF1
  5199                           intcon3	equ	0xFF0
  5200                           postinc0	equ	0xFEE
  5201                           wreg	equ	0xFE8
  5202                           postinc1	equ	0xFE6
  5203                           postdec1	equ	0xFE5
  5204                           fsr1h	equ	0xFE2
  5205                           fsr1l	equ	0xFE1
  5206                           indf2	equ	0xFDF
  5207                           postinc2	equ	0xFDE
  5208                           postdec2	equ	0xFDD
  5209                           plusw2	equ	0xFDB
  5210                           fsr2h	equ	0xFDA
  5211                           fsr2l	equ	0xFD9
  5212                           status	equ	0xFD8
  5213                           
  5214 ;; *************** function _pf_read *****************
  5215 ;; Defined at:
  5216 ;;		line 863 in file "pff.c"
  5217 ;; Parameters:    Size  Location     Type
  5218 ;;  buff            2   58[BANK0 ] PTR void 
  5219 ;;		 -> data_buffer_32(32), 
  5220 ;;  btr             2   60[BANK0 ] unsigned int 
  5221 ;;  br              2   62[BANK0 ] PTR unsigned int 
  5222 ;;		 -> SDCard@br(2), 
  5223 ;; Auto vars:     Size  Location     Type
  5224 ;;  clst            4   85[BANK0 ] unsigned long 
  5225 ;;  remain          4   81[BANK0 ] unsigned long 
  5226 ;;  sect            4   77[BANK0 ] unsigned long 
  5227 ;;  fs              2   92[BANK0 ] PTR struct .
  5228 ;;		 -> NULL(0), SDCard@fs(42), 
  5229 ;;  rcnt            2   90[BANK0 ] unsigned int 
  5230 ;;  rbuff           2   73[BANK0 ] PTR unsigned char 
  5231 ;;		 -> data_buffer_32(32), 
  5232 ;;  cs              1   89[BANK0 ] unsigned char 
  5233 ;;  dr              1   72[BANK0 ] enum E73
  5234 ;; Return value:  Size  Location     Type
  5235 ;;                  1    wreg      enum E3838
  5236 ;; Registers used:
  5237 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5238 ;; Tracked objects:
  5239 ;;		On entry : 0/0
  5240 ;;		On exit  : 0/0
  5241 ;;		Unchanged: 0/0
  5242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5243 ;;      Params:         0       6       0       0       0       0       0       0       0
  5244 ;;      Locals:         0      22       0       0       0       0       0       0       0
  5245 ;;      Temps:          0       8       0       0       0       0       0       0       0
  5246 ;;      Totals:         0      36       0       0       0       0       0       0       0
  5247 ;;Total ram usage:       36 bytes
  5248 ;; Hardware stack levels used:    1
  5249 ;; Hardware stack levels required when called:    8
  5250 ;; This function calls:
  5251 ;;		_clust2sect
  5252 ;;		_disk_readp
  5253 ;;		_get_fat
  5254 ;; This function is called by:
  5255 ;;		_SDCard
  5256 ;; This function uses a non-reentrant model
  5257 ;;
  5258                           
  5259                           	psect	text24
  5260  000EE8                     __ptext24:
  5261                           	opt stack 0
  5262  000EE8                     _pf_read:
  5263                           	opt stack 20
  5264                           
  5265                           ;pff.c: 869: DRESULT dr;
  5266                           ;pff.c: 870: DWORD clst;
  5267                           ;pff.c: 871: DWORD sect, remain;
  5268                           ;pff.c: 872: UINT rcnt;
  5269                           ;pff.c: 873: BYTE cs, *rbuff = buff;
  5270                           
  5271                           ; BSR set to: 0
  5272                           ;incstack = 0
  5273  000EE8  C09A  F0A9         	movff	pf_read@buff,pf_read@rbuff
  5274  000EEC  C09B  F0AA         	movff	pf_read@buff+1,pf_read@rbuff+1
  5275                           
  5276                           ;pff.c: 874: FATFS *fs = FatFs;
  5277  000EF0  C035  F0BC         	movff	_FatFs,pf_read@fs
  5278  000EF4  C036  F0BD         	movff	_FatFs+1,pf_read@fs+1
  5279                           
  5280                           ;pff.c: 877: *br = 0;
  5281  000EF8  C09E  FFD9         	movff	pf_read@br,fsr2l
  5282  000EFC  C09F  FFDA         	movff	pf_read@br+1,fsr2h
  5283  000F00  0E00               	movlw	0
  5284  000F02  6EDE               	movwf	postinc2,c
  5285  000F04  0E00               	movlw	0
  5286  000F06  6EDD               	movwf	postdec2,c
  5287                           
  5288                           ;pff.c: 878: if (!fs) return FR_NOT_ENABLED;
  5289  000F08  0100               	movlb	0	; () banked
  5290  000F0A  51BC               	movf	pf_read@fs& (0+255),w,b
  5291  000F0C  11BD               	iorwf	(pf_read@fs+1)& (0+255),w,b
  5292  000F0E  A4D8               	btfss	status,2,c
  5293  000F10  D002               	goto	l984
  5294                           
  5295                           ; BSR set to: 0
  5296  000F12  0E05               	movlw	5
  5297                           
  5298                           ; BSR set to: 0
  5299  000F14  0012               	return	
  5300  000F16                     l984:
  5301                           
  5302                           ; BSR set to: 0
  5303                           ;pff.c: 879: if (!(fs->flag & 0x01))
  5304                           
  5305                           ; BSR set to: 0
  5306  000F16  EE20 F001          	lfsr	2,1
  5307  000F1A  51BC               	movf	pf_read@fs& (0+255),w,b
  5308  000F1C  26D9               	addwf	fsr2l,f,c
  5309  000F1E  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5310  000F20  22DA               	addwfc	fsr2h,f,c
  5311  000F22  B0DF               	btfsc	indf2,0,c
  5312  000F24  D002               	goto	l986
  5313                           
  5314                           ; BSR set to: 0
  5315                           ;pff.c: 880: return FR_NOT_OPENED;
  5316  000F26  0E04               	movlw	4
  5317                           
  5318                           ; BSR set to: 0
  5319  000F28  0012               	return	
  5320  000F2A                     l986:
  5321                           
  5322                           ; BSR set to: 0
  5323                           ;pff.c: 882: remain = fs->fsize - fs->fptr;
  5324                           
  5325                           ; BSR set to: 0
  5326  000F2A  EE20 F01A          	lfsr	2,26
  5327  000F2E  51BC               	movf	pf_read@fs& (0+255),w,b
  5328  000F30  26D9               	addwf	fsr2l,f,c
  5329  000F32  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5330  000F34  22DA               	addwfc	fsr2h,f,c
  5331  000F36  CFDE F0A0          	movff	postinc2,??_pf_read
  5332  000F3A  CFDE F0A1          	movff	postinc2,??_pf_read+1
  5333  000F3E  CFDE F0A2          	movff	postinc2,??_pf_read+2
  5334  000F42  CFDE F0A3          	movff	postinc2,??_pf_read+3
  5335  000F46  EE20 F016          	lfsr	2,22
  5336  000F4A  51BC               	movf	pf_read@fs& (0+255),w,b
  5337  000F4C  26D9               	addwf	fsr2l,f,c
  5338  000F4E  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5339  000F50  22DA               	addwfc	fsr2h,f,c
  5340  000F52  CFDE F0A4          	movff	postinc2,??_pf_read+4
  5341  000F56  CFDE F0A5          	movff	postinc2,??_pf_read+5
  5342  000F5A  CFDE F0A6          	movff	postinc2,??_pf_read+6
  5343  000F5E  CFDE F0A7          	movff	postinc2,??_pf_read+7
  5344  000F62  1FA4               	comf	(??_pf_read+4)& (0+255),f,b
  5345  000F64  1FA5               	comf	(??_pf_read+5)& (0+255),f,b
  5346  000F66  1FA6               	comf	(??_pf_read+6)& (0+255),f,b
  5347  000F68  1FA7               	comf	(??_pf_read+7)& (0+255),f,b
  5348  000F6A  2BA4               	incf	(??_pf_read+4)& (0+255),f,b
  5349  000F6C  0E00               	movlw	0
  5350  000F6E  23A5               	addwfc	(??_pf_read+5)& (0+255),f,b
  5351  000F70  23A6               	addwfc	(??_pf_read+6)& (0+255),f,b
  5352  000F72  23A7               	addwfc	(??_pf_read+7)& (0+255),f,b
  5353  000F74  51A0               	movf	??_pf_read& (0+255),w,b
  5354  000F76  25A4               	addwf	(??_pf_read+4)& (0+255),w,b
  5355  000F78  6FB1               	movwf	pf_read@remain& (0+255),b
  5356  000F7A  51A1               	movf	(??_pf_read+1)& (0+255),w,b
  5357  000F7C  21A5               	addwfc	(??_pf_read+5)& (0+255),w,b
  5358  000F7E  6FB2               	movwf	(pf_read@remain+1)& (0+255),b
  5359  000F80  51A2               	movf	(??_pf_read+2)& (0+255),w,b
  5360  000F82  21A6               	addwfc	(??_pf_read+6)& (0+255),w,b
  5361  000F84  6FB3               	movwf	(pf_read@remain+2)& (0+255),b
  5362  000F86  51A3               	movf	(??_pf_read+3)& (0+255),w,b
  5363  000F88  21A7               	addwfc	(??_pf_read+7)& (0+255),w,b
  5364  000F8A  6FB4               	movwf	(pf_read@remain+3)& (0+255),b
  5365                           
  5366                           ; BSR set to: 0
  5367                           ;pff.c: 883: if (btr > remain) btr = (UINT)remain;
  5368  000F8C  519C               	movf	pf_read@btr& (0+255),w,b
  5369  000F8E  6FA0               	movwf	??_pf_read& (0+255),b
  5370  000F90  519D               	movf	(pf_read@btr+1)& (0+255),w,b
  5371  000F92  6FA1               	movwf	(??_pf_read+1)& (0+255),b
  5372  000F94  6BA2               	clrf	(??_pf_read+2)& (0+255),b
  5373  000F96  6BA3               	clrf	(??_pf_read+3)& (0+255),b
  5374  000F98  51A0               	movf	??_pf_read& (0+255),w,b
  5375  000F9A  5DB1               	subwf	pf_read@remain& (0+255),w,b
  5376  000F9C  51A1               	movf	(??_pf_read+1)& (0+255),w,b
  5377  000F9E  59B2               	subwfb	(pf_read@remain+1)& (0+255),w,b
  5378  000FA0  51A2               	movf	(??_pf_read+2)& (0+255),w,b
  5379  000FA2  59B3               	subwfb	(pf_read@remain+2)& (0+255),w,b
  5380  000FA4  51A3               	movf	(??_pf_read+3)& (0+255),w,b
  5381  000FA6  59B4               	subwfb	(pf_read@remain+3)& (0+255),w,b
  5382  000FA8  B0D8               	btfsc	status,0,c
  5383  000FAA  D160               	goto	l988
  5384                           
  5385                           ; BSR set to: 0
  5386  000FAC  C0B1  F09C         	movff	pf_read@remain,pf_read@btr
  5387  000FB0  C0B2  F09D         	movff	pf_read@remain+1,pf_read@btr+1
  5388                           
  5389                           ; BSR set to: 0
  5390                           ;pff.c: 885: while (btr) {
  5391  000FB4  D15B               	goto	l988
  5392  000FB6                     
  5393                           ; BSR set to: 0
  5394                           ;pff.c: 886: if ((fs->fptr % 512) == 0) {
  5395                           
  5396                           ; BSR set to: 0
  5397  000FB6  EE20 F016          	lfsr	2,22
  5398  000FBA  51BC               	movf	pf_read@fs& (0+255),w,b
  5399  000FBC  26D9               	addwf	fsr2l,f,c
  5400  000FBE  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5401  000FC0  22DA               	addwfc	fsr2h,f,c
  5402  000FC2  0EFF               	movlw	255
  5403  000FC4  14DE               	andwf	postinc2,w,c
  5404  000FC6  6FA0               	movwf	??_pf_read& (0+255),b
  5405  000FC8  0E01               	movlw	1
  5406  000FCA  14DE               	andwf	postinc2,w,c
  5407  000FCC  6FA1               	movwf	(??_pf_read+1)& (0+255),b
  5408  000FCE  0E00               	movlw	0
  5409  000FD0  14DE               	andwf	postinc2,w,c
  5410  000FD2  6FA2               	movwf	(??_pf_read+2)& (0+255),b
  5411  000FD4  0E00               	movlw	0
  5412  000FD6  14DE               	andwf	postinc2,w,c
  5413  000FD8  6FA3               	movwf	(??_pf_read+3)& (0+255),b
  5414  000FDA  51A0               	movf	??_pf_read& (0+255),w,b
  5415  000FDC  11A1               	iorwf	(??_pf_read+1)& (0+255),w,b
  5416  000FDE  11A2               	iorwf	(??_pf_read+2)& (0+255),w,b
  5417  000FE0  11A3               	iorwf	(??_pf_read+3)& (0+255),w,b
  5418  000FE2  A4D8               	btfss	status,2,c
  5419  000FE4  D0BC               	goto	l990
  5420                           
  5421                           ; BSR set to: 0
  5422                           ;pff.c: 887: cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));
  5423  000FE6  EE20 F016          	lfsr	2,22
  5424  000FEA  51BC               	movf	pf_read@fs& (0+255),w,b
  5425  000FEC  26D9               	addwf	fsr2l,f,c
  5426  000FEE  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5427  000FF0  22DA               	addwfc	fsr2h,f,c
  5428  000FF2  CFDE F0A0          	movff	postinc2,??_pf_read
  5429  000FF6  CFDE F0A1          	movff	postinc2,??_pf_read+1
  5430  000FFA  CFDE F0A2          	movff	postinc2,??_pf_read+2
  5431  000FFE  CFDE F0A3          	movff	postinc2,??_pf_read+3
  5432  001002  0E0A               	movlw	10
  5433  001004  D005               	goto	u8190
  5434  001006                     u8195:
  5435  001006  90D8               	bcf	status,0,c
  5436  001008  33A3               	rrcf	(??_pf_read+3)& (0+255),f,b
  5437  00100A  33A2               	rrcf	(??_pf_read+2)& (0+255),f,b
  5438  00100C  33A1               	rrcf	(??_pf_read+1)& (0+255),f,b
  5439  00100E  33A0               	rrcf	??_pf_read& (0+255),f,b
  5440  001010                     u8190:
  5441  001010  2EE8               	decfsz	wreg,f,c
  5442  001012  D7F9               	goto	u8195
  5443  001014  EE20 F002          	lfsr	2,2
  5444  001018  51BC               	movf	pf_read@fs& (0+255),w,b
  5445  00101A  26D9               	addwf	fsr2l,f,c
  5446  00101C  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5447  00101E  22DA               	addwfc	fsr2h,f,c
  5448  001020  50DF               	movf	indf2,w,c
  5449  001022  6FA4               	movwf	(??_pf_read+4)& (0+255),b
  5450  001024  05A4               	decf	(??_pf_read+4)& (0+255),w,b
  5451  001026  15A0               	andwf	??_pf_read& (0+255),w,b
  5452  001028  6FB9               	movwf	pf_read@cs& (0+255),b
  5453                           
  5454                           ; BSR set to: 0
  5455                           ;pff.c: 888: if (!cs) {
  5456  00102A  51B9               	movf	pf_read@cs& (0+255),w,b
  5457  00102C  A4D8               	btfss	status,2,c
  5458  00102E  D054               	goto	l991
  5459                           
  5460                           ; BSR set to: 0
  5461                           ;pff.c: 889: if (fs->fptr == 0)
  5462  001030  EE20 F016          	lfsr	2,22
  5463  001034  51BC               	movf	pf_read@fs& (0+255),w,b
  5464  001036  26D9               	addwf	fsr2l,f,c
  5465  001038  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5466  00103A  22DA               	addwfc	fsr2h,f,c
  5467  00103C  50DE               	movf	postinc2,w,c
  5468  00103E  10DE               	iorwf	postinc2,w,c
  5469  001040  10DE               	iorwf	postinc2,w,c
  5470  001042  10DE               	iorwf	postinc2,w,c
  5471  001044  A4D8               	btfss	status,2,c
  5472  001046  D00F               	goto	l992
  5473                           
  5474                           ; BSR set to: 0
  5475                           ;pff.c: 890: clst = fs->org_clust;
  5476  001048  EE20 F01E          	lfsr	2,30
  5477  00104C  51BC               	movf	pf_read@fs& (0+255),w,b
  5478  00104E  26D9               	addwf	fsr2l,f,c
  5479  001050  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5480  001052  22DA               	addwfc	fsr2h,f,c
  5481  001054  CFDE F0B5          	movff	postinc2,pf_read@clst
  5482  001058  CFDE F0B6          	movff	postinc2,pf_read@clst+1
  5483  00105C  CFDE F0B7          	movff	postinc2,pf_read@clst+2
  5484  001060  CFDE F0B8          	movff	postinc2,pf_read@clst+3
  5485  001064  D018               	goto	l993
  5486  001066                     l992:
  5487                           
  5488                           ; BSR set to: 0
  5489                           ;pff.c: 891: else
  5490                           ;pff.c: 892: clst = get_fat(fs->curr_clust);
  5491                           
  5492                           ; BSR set to: 0
  5493  001066  EE20 F022          	lfsr	2,34
  5494  00106A  51BC               	movf	pf_read@fs& (0+255),w,b
  5495  00106C  26D9               	addwf	fsr2l,f,c
  5496  00106E  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5497  001070  22DA               	addwfc	fsr2h,f,c
  5498  001072  CFDE F072          	movff	postinc2,get_fat@clst
  5499  001076  CFDE F073          	movff	postinc2,get_fat@clst+1
  5500  00107A  CFDE F074          	movff	postinc2,get_fat@clst+2
  5501  00107E  CFDE F075          	movff	postinc2,get_fat@clst+3
  5502  001082  EC82  F005         	call	_get_fat	;wreg free
  5503  001086  C072  F0B5         	movff	?_get_fat,pf_read@clst
  5504  00108A  C073  F0B6         	movff	?_get_fat+1,pf_read@clst+1
  5505  00108E  C074  F0B7         	movff	?_get_fat+2,pf_read@clst+2
  5506  001092  C075  F0B8         	movff	?_get_fat+3,pf_read@clst+3
  5507  001096                     l993:
  5508                           
  5509                           ;pff.c: 893: if (clst <= 1) {fs->flag = 0; return FR_DISK_ERR;};
  5510  001096  0100               	movlb	0	; () banked
  5511  001098  51B8               	movf	(pf_read@clst+3)& (0+255),w,b
  5512  00109A  11B7               	iorwf	(pf_read@clst+2)& (0+255),w,b
  5513  00109C  11B6               	iorwf	(pf_read@clst+1)& (0+255),w,b
  5514  00109E  E10E               	bnz	l7170
  5515  0010A0  0E02               	movlw	2
  5516  0010A2  5DB5               	subwf	pf_read@clst& (0+255),w,b
  5517  0010A4  B0D8               	btfsc	status,0,c
  5518  0010A6  D00A               	goto	l994
  5519                           
  5520                           ; BSR set to: 0
  5521  0010A8  EE20 F001          	lfsr	2,1
  5522  0010AC  51BC               	movf	pf_read@fs& (0+255),w,b
  5523  0010AE  26D9               	addwf	fsr2l,f,c
  5524  0010B0  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5525  0010B2  22DA               	addwfc	fsr2h,f,c
  5526  0010B4  0E00               	movlw	0
  5527  0010B6  6EDF               	movwf	indf2,c
  5528                           
  5529                           ; BSR set to: 0
  5530  0010B8  0E01               	movlw	1
  5531                           
  5532                           ; BSR set to: 0
  5533  0010BA  0012               	return	
  5534  0010BC                     l994:
  5535  0010BC                     l7170:
  5536                           
  5537                           ; BSR set to: 0
  5538                           ;pff.c: 894: fs->curr_clust = clst;
  5539  0010BC  EE20 F022          	lfsr	2,34
  5540  0010C0  51BC               	movf	pf_read@fs& (0+255),w,b
  5541  0010C2  26D9               	addwf	fsr2l,f,c
  5542  0010C4  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5543  0010C6  22DA               	addwfc	fsr2h,f,c
  5544  0010C8  C0B5  FFDE         	movff	pf_read@clst,postinc2
  5545  0010CC  C0B6  FFDE         	movff	pf_read@clst+1,postinc2
  5546  0010D0  C0B7  FFDE         	movff	pf_read@clst+2,postinc2
  5547  0010D4  C0B8  FFDE         	movff	pf_read@clst+3,postinc2
  5548  0010D8                     l991:
  5549                           
  5550                           ; BSR set to: 0
  5551                           ;pff.c: 895: }
  5552                           ;pff.c: 896: sect = clust2sect(fs->curr_clust);
  5553                           
  5554                           ; BSR set to: 0
  5555  0010D8  EE20 F022          	lfsr	2,34
  5556  0010DC  51BC               	movf	pf_read@fs& (0+255),w,b
  5557  0010DE  26D9               	addwf	fsr2l,f,c
  5558  0010E0  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5559  0010E2  22DA               	addwfc	fsr2h,f,c
  5560  0010E4  CFDE F026          	movff	postinc2,clust2sect@clst
  5561  0010E8  CFDE F027          	movff	postinc2,clust2sect@clst+1
  5562  0010EC  CFDE F028          	movff	postinc2,clust2sect@clst+2
  5563  0010F0  CFDE F029          	movff	postinc2,clust2sect@clst+3
  5564  0010F4  ECC4  F013         	call	_clust2sect	;wreg free
  5565  0010F8  C026  F0AD         	movff	?_clust2sect,pf_read@sect
  5566  0010FC  C027  F0AE         	movff	?_clust2sect+1,pf_read@sect+1
  5567  001100  C028  F0AF         	movff	?_clust2sect+2,pf_read@sect+2
  5568  001104  C029  F0B0         	movff	?_clust2sect+3,pf_read@sect+3
  5569                           
  5570                           ;pff.c: 897: if (!sect) {fs->flag = 0; return FR_DISK_ERR;};
  5571  001108  0100               	movlb	0	; () banked
  5572  00110A  51AD               	movf	pf_read@sect& (0+255),w,b
  5573  00110C  11AE               	iorwf	(pf_read@sect+1)& (0+255),w,b
  5574  00110E  11AF               	iorwf	(pf_read@sect+2)& (0+255),w,b
  5575  001110  11B0               	iorwf	(pf_read@sect+3)& (0+255),w,b
  5576  001112  A4D8               	btfss	status,2,c
  5577  001114  D00A               	goto	l995
  5578                           
  5579                           ; BSR set to: 0
  5580  001116  EE20 F001          	lfsr	2,1
  5581  00111A  51BC               	movf	pf_read@fs& (0+255),w,b
  5582  00111C  26D9               	addwf	fsr2l,f,c
  5583  00111E  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5584  001120  22DA               	addwfc	fsr2h,f,c
  5585  001122  0E00               	movlw	0
  5586  001124  6EDF               	movwf	indf2,c
  5587                           
  5588                           ; BSR set to: 0
  5589  001126  0E01               	movlw	1
  5590                           
  5591                           ; BSR set to: 0
  5592  001128  0012               	return	
  5593  00112A                     l995:
  5594                           
  5595                           ; BSR set to: 0
  5596                           ;pff.c: 898: fs->dsect = sect + cs;
  5597                           
  5598                           ; BSR set to: 0
  5599  00112A  51B9               	movf	pf_read@cs& (0+255),w,b
  5600  00112C  25AD               	addwf	pf_read@sect& (0+255),w,b
  5601  00112E  6FA0               	movwf	??_pf_read& (0+255),b
  5602  001130  0E00               	movlw	0
  5603  001132  21AE               	addwfc	(pf_read@sect+1)& (0+255),w,b
  5604  001134  6FA1               	movwf	(??_pf_read+1)& (0+255),b
  5605  001136  0E00               	movlw	0
  5606  001138  21AF               	addwfc	(pf_read@sect+2)& (0+255),w,b
  5607  00113A  6FA2               	movwf	(??_pf_read+2)& (0+255),b
  5608  00113C  0E00               	movlw	0
  5609  00113E  21B0               	addwfc	(pf_read@sect+3)& (0+255),w,b
  5610  001140  6FA3               	movwf	(??_pf_read+3)& (0+255),b
  5611  001142  EE20 F026          	lfsr	2,38
  5612  001146  51BC               	movf	pf_read@fs& (0+255),w,b
  5613  001148  26D9               	addwf	fsr2l,f,c
  5614  00114A  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5615  00114C  22DA               	addwfc	fsr2h,f,c
  5616  00114E  C0A0  FFDE         	movff	??_pf_read,postinc2
  5617  001152  C0A1  FFDE         	movff	??_pf_read+1,postinc2
  5618  001156  C0A2  FFDE         	movff	??_pf_read+2,postinc2
  5619  00115A  C0A3  FFDE         	movff	??_pf_read+3,postinc2
  5620  00115E                     l990:
  5621                           
  5622                           ; BSR set to: 0
  5623                           ;pff.c: 899: }
  5624                           ;pff.c: 900: rcnt = 512 - (UINT)fs->fptr % 512;
  5625  00115E  0EFF               	movlw	255
  5626  001160  6FA0               	movwf	??_pf_read& (0+255),b
  5627  001162  0E01               	movlw	1
  5628  001164  6FA1               	movwf	(??_pf_read+1)& (0+255),b
  5629  001166  EE20 F016          	lfsr	2,22
  5630  00116A  51BC               	movf	pf_read@fs& (0+255),w,b
  5631  00116C  26D9               	addwf	fsr2l,f,c
  5632  00116E  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5633  001170  22DA               	addwfc	fsr2h,f,c
  5634  001172  CFDE F0A2          	movff	postinc2,??_pf_read+2
  5635  001176  CFDD F0A3          	movff	postdec2,??_pf_read+3
  5636  00117A  51A0               	movf	??_pf_read& (0+255),w,b
  5637  00117C  17A2               	andwf	(??_pf_read+2)& (0+255),f,b
  5638  00117E  51A1               	movf	(??_pf_read+1)& (0+255),w,b
  5639  001180  17A3               	andwf	(??_pf_read+3)& (0+255),f,b
  5640  001182  1FA2               	comf	(??_pf_read+2)& (0+255),f,b
  5641  001184  1FA3               	comf	(??_pf_read+3)& (0+255),f,b
  5642  001186  4BA2               	infsnz	(??_pf_read+2)& (0+255),f,b
  5643  001188  2BA3               	incf	(??_pf_read+3)& (0+255),f,b
  5644  00118A  0E00               	movlw	0
  5645  00118C  25A2               	addwf	(??_pf_read+2)& (0+255),w,b
  5646  00118E  6FBA               	movwf	pf_read@rcnt& (0+255),b
  5647  001190  0E02               	movlw	2
  5648  001192  21A3               	addwfc	(??_pf_read+3)& (0+255),w,b
  5649  001194  6FBB               	movwf	(pf_read@rcnt+1)& (0+255),b
  5650                           
  5651                           ; BSR set to: 0
  5652                           ;pff.c: 901: if (rcnt > btr) rcnt = btr;
  5653  001196  51BA               	movf	pf_read@rcnt& (0+255),w,b
  5654  001198  5D9C               	subwf	pf_read@btr& (0+255),w,b
  5655  00119A  51BB               	movf	(pf_read@rcnt+1)& (0+255),w,b
  5656  00119C  599D               	subwfb	(pf_read@btr+1)& (0+255),w,b
  5657  00119E  B0D8               	btfsc	status,0,c
  5658  0011A0  D004               	goto	l996
  5659                           
  5660                           ; BSR set to: 0
  5661  0011A2  C09C  F0BA         	movff	pf_read@btr,pf_read@rcnt
  5662  0011A6  C09D  F0BB         	movff	pf_read@btr+1,pf_read@rcnt+1
  5663  0011AA                     l996:
  5664                           
  5665                           ; BSR set to: 0
  5666                           ;pff.c: 902: dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (UINT)fs->fptr % 512, rcnt);
  5667                           
  5668                           ; BSR set to: 0
  5669  0011AA  519A               	movf	pf_read@buff& (0+255),w,b
  5670  0011AC  119B               	iorwf	(pf_read@buff+1)& (0+255),w,b
  5671  0011AE  B4D8               	btfsc	status,2,c
  5672  0011B0  D005               	goto	l998
  5673                           
  5674                           ; BSR set to: 0
  5675  0011B2  C0A9  F0AB         	movff	pf_read@rbuff,_pf_read$2151
  5676  0011B6  C0AA  F0AC         	movff	pf_read@rbuff+1,_pf_read$2151+1
  5677  0011BA  D004               	goto	l1000
  5678  0011BC                     l998:
  5679                           
  5680                           ; BSR set to: 0
  5681                           
  5682                           ; BSR set to: 0
  5683  0011BC  0E00               	movlw	0
  5684  0011BE  6FAB               	movwf	_pf_read$2151& (0+255),b
  5685  0011C0  0E00               	movlw	0
  5686  0011C2  6FAC               	movwf	(_pf_read$2151+1)& (0+255),b
  5687  0011C4                     l1000:
  5688                           
  5689                           ; BSR set to: 0
  5690                           
  5691                           ; BSR set to: 0
  5692  0011C4  C0AB  F060         	movff	_pf_read$2151,disk_readp@rd
  5693  0011C8  C0AC  F061         	movff	_pf_read$2151+1,disk_readp@rd+1
  5694  0011CC  EE20 F026          	lfsr	2,38
  5695  0011D0  51BC               	movf	pf_read@fs& (0+255),w,b
  5696  0011D2  26D9               	addwf	fsr2l,f,c
  5697  0011D4  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5698  0011D6  22DA               	addwfc	fsr2h,f,c
  5699  0011D8  CFDE F062          	movff	postinc2,disk_readp@sector
  5700  0011DC  CFDE F063          	movff	postinc2,disk_readp@sector+1
  5701  0011E0  CFDE F064          	movff	postinc2,disk_readp@sector+2
  5702  0011E4  CFDE F065          	movff	postinc2,disk_readp@sector+3
  5703  0011E8  EE20 F016          	lfsr	2,22
  5704  0011EC  51BC               	movf	pf_read@fs& (0+255),w,b
  5705  0011EE  26D9               	addwf	fsr2l,f,c
  5706  0011F0  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5707  0011F2  22DA               	addwfc	fsr2h,f,c
  5708  0011F4  CFDE F0A0          	movff	postinc2,??_pf_read
  5709  0011F8  CFDD F0A1          	movff	postdec2,??_pf_read+1
  5710  0011FC  0EFF               	movlw	255
  5711  0011FE  15A0               	andwf	??_pf_read& (0+255),w,b
  5712  001200  6F66               	movwf	disk_readp@offset& (0+255),b
  5713  001202  0E01               	movlw	1
  5714  001204  15A1               	andwf	(??_pf_read+1)& (0+255),w,b
  5715  001206  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
  5716  001208  C0BA  F068         	movff	pf_read@rcnt,disk_readp@count
  5717  00120C  C0BB  F069         	movff	pf_read@rcnt+1,disk_readp@count+1
  5718  001210  EC3C  F009         	call	_disk_readp	;wreg free
  5719  001214  0100               	movlb	0	; () banked
  5720  001216  6FA8               	movwf	pf_read@dr& (0+255),b
  5721                           
  5722                           ; BSR set to: 0
  5723                           ;pff.c: 903: if (dr) {fs->flag = 0; return FR_DISK_ERR;};
  5724  001218  51A8               	movf	pf_read@dr& (0+255),w,b
  5725  00121A  B4D8               	btfsc	status,2,c
  5726  00121C  D00A               	goto	l1001
  5727                           
  5728                           ; BSR set to: 0
  5729  00121E  EE20 F001          	lfsr	2,1
  5730  001222  51BC               	movf	pf_read@fs& (0+255),w,b
  5731  001224  26D9               	addwf	fsr2l,f,c
  5732  001226  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5733  001228  22DA               	addwfc	fsr2h,f,c
  5734  00122A  0E00               	movlw	0
  5735  00122C  6EDF               	movwf	indf2,c
  5736                           
  5737                           ; BSR set to: 0
  5738  00122E  0E01               	movlw	1
  5739                           
  5740                           ; BSR set to: 0
  5741  001230  0012               	return	
  5742  001232                     l1001:
  5743                           
  5744                           ; BSR set to: 0
  5745                           ;pff.c: 904: fs->fptr += rcnt; rbuff += rcnt;
  5746                           
  5747                           ; BSR set to: 0
  5748  001232  EE20 F016          	lfsr	2,22
  5749  001236  51BC               	movf	pf_read@fs& (0+255),w,b
  5750  001238  26D9               	addwf	fsr2l,f,c
  5751  00123A  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5752  00123C  22DA               	addwfc	fsr2h,f,c
  5753  00123E  51BA               	movf	pf_read@rcnt& (0+255),w,b
  5754  001240  26DE               	addwf	postinc2,f,c
  5755  001242  51BB               	movf	(pf_read@rcnt+1)& (0+255),w,b
  5756  001244  22DE               	addwfc	postinc2,f,c
  5757  001246  0E00               	movlw	0
  5758  001248  22DE               	addwfc	postinc2,f,c
  5759  00124A  22DE               	addwfc	postinc2,f,c
  5760                           
  5761                           ; BSR set to: 0
  5762  00124C  51BA               	movf	pf_read@rcnt& (0+255),w,b
  5763  00124E  27A9               	addwf	pf_read@rbuff& (0+255),f,b
  5764  001250  51BB               	movf	(pf_read@rcnt+1)& (0+255),w,b
  5765  001252  23AA               	addwfc	(pf_read@rbuff+1)& (0+255),f,b
  5766                           
  5767                           ; BSR set to: 0
  5768                           ;pff.c: 905: btr -= rcnt; *br += rcnt;
  5769  001254  51BA               	movf	pf_read@rcnt& (0+255),w,b
  5770  001256  5F9C               	subwf	pf_read@btr& (0+255),f,b
  5771  001258  51BB               	movf	(pf_read@rcnt+1)& (0+255),w,b
  5772  00125A  5B9D               	subwfb	(pf_read@btr+1)& (0+255),f,b
  5773                           
  5774                           ; BSR set to: 0
  5775  00125C  C09E  FFD9         	movff	pf_read@br,fsr2l
  5776  001260  C09F  FFDA         	movff	pf_read@br+1,fsr2h
  5777  001264  51BA               	movf	pf_read@rcnt& (0+255),w,b
  5778  001266  26DE               	addwf	postinc2,f,c
  5779  001268  51BB               	movf	(pf_read@rcnt+1)& (0+255),w,b
  5780  00126A  22DD               	addwfc	postdec2,f,c
  5781  00126C                     l988:
  5782                           
  5783                           ; BSR set to: 0
  5784                           
  5785                           ; BSR set to: 0
  5786  00126C  519C               	movf	pf_read@btr& (0+255),w,b
  5787  00126E  119D               	iorwf	(pf_read@btr+1)& (0+255),w,b
  5788  001270  A4D8               	btfss	status,2,c
  5789  001272  D6A1               	goto	l989
  5790                           
  5791                           ; BSR set to: 0
  5792                           ;pff.c: 906: }
  5793                           ;pff.c: 908: return FR_OK;
  5794                           
  5795                           ; BSR set to: 0
  5796  001274  0E00               	movlw	0
  5797  001276  0012               	return	
  5798  001278                     __end_of_pf_read:
  5799                           	opt stack 0
  5800                           tosu	equ	0xFFF
  5801                           tosh	equ	0xFFE
  5802                           tosl	equ	0xFFD
  5803                           pclath	equ	0xFFA
  5804                           tblptru	equ	0xFF8
  5805                           tblptrh	equ	0xFF7
  5806                           tblptrl	equ	0xFF6
  5807                           tablat	equ	0xFF5
  5808                           prodh	equ	0xFF4
  5809                           prodl	equ	0xFF3
  5810                           intcon	equ	0xFF2
  5811                           intcon2	equ	0xFF1
  5812                           intcon3	equ	0xFF0
  5813                           postinc0	equ	0xFEE
  5814                           wreg	equ	0xFE8
  5815                           postinc1	equ	0xFE6
  5816                           postdec1	equ	0xFE5
  5817                           fsr1h	equ	0xFE2
  5818                           fsr1l	equ	0xFE1
  5819                           indf2	equ	0xFDF
  5820                           postinc2	equ	0xFDE
  5821                           postdec2	equ	0xFDD
  5822                           plusw2	equ	0xFDB
  5823                           fsr2h	equ	0xFDA
  5824                           fsr2l	equ	0xFD9
  5825                           status	equ	0xFD8
  5826                           
  5827 ;; *************** function _pf_open *****************
  5828 ;; Defined at:
  5829 ;;		line 829 in file "pff.c"
  5830 ;; Parameters:    Size  Location     Type
  5831 ;;  path            2   90[BANK0 ] PTR const unsigned char 
  5832 ;;		 -> STR_9(10), 
  5833 ;; Auto vars:     Size  Location     Type
  5834 ;;  dir            32   12[BANK1 ] unsigned char [32]
  5835 ;;  dj             16   47[BANK1 ] struct .
  5836 ;;  sp             12    0[BANK1 ] unsigned char [12]
  5837 ;;  fs              2   45[BANK1 ] PTR struct .
  5838 ;;		 -> NULL(0), SDCard@fs(42), 
  5839 ;;  res             1   44[BANK1 ] enum E43
  5840 ;; Return value:  Size  Location     Type
  5841 ;;                  1    wreg      enum E3838
  5842 ;; Registers used:
  5843 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5844 ;; Tracked objects:
  5845 ;;		On entry : 0/0
  5846 ;;		On exit  : 0/0
  5847 ;;		Unchanged: 0/0
  5848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5849 ;;      Params:         0       2       0       0       0       0       0       0       0
  5850 ;;      Locals:         0       0      63       0       0       0       0       0       0
  5851 ;;      Temps:          0      22       0       0       0       0       0       0       0
  5852 ;;      Totals:         0      24      63       0       0       0       0       0       0
  5853 ;;Total ram usage:       87 bytes
  5854 ;; Hardware stack levels used:    1
  5855 ;; Hardware stack levels required when called:   11
  5856 ;; This function calls:
  5857 ;;		_follow_path
  5858 ;;		_get_clust
  5859 ;; This function is called by:
  5860 ;;		_SDCard
  5861 ;; This function uses a non-reentrant model
  5862 ;;
  5863                           
  5864                           	psect	text25
  5865  001C96                     __ptext25:
  5866                           	opt stack 0
  5867  001C96                     _pf_open:
  5868                           	opt stack 17
  5869                           
  5870                           ;pff.c: 833: FRESULT res;
  5871                           ;pff.c: 834: DIR_E dj;
  5872                           ;pff.c: 835: BYTE sp[12], dir[32];
  5873                           ;pff.c: 836: FATFS *fs = FatFs;
  5874                           
  5875                           ; BSR set to: 0
  5876                           ;incstack = 0
  5877  001C96  C035  F19C         	movff	_FatFs,pf_open@fs
  5878  001C9A  C036  F19D         	movff	_FatFs+1,pf_open@fs+1
  5879                           
  5880                           ;pff.c: 838: if (!fs) return FR_NOT_ENABLED;
  5881  001C9E  0101               	movlb	1	; () banked
  5882  001CA0  519C               	movf	pf_open@fs& (0+255),w,b
  5883  001CA2  119D               	iorwf	(pf_open@fs+1)& (0+255),w,b
  5884  001CA4  A4D8               	btfss	status,2,c
  5885  001CA6  D002               	goto	l976
  5886                           
  5887                           ; BSR set to: 1
  5888  001CA8  0E05               	movlw	5
  5889                           
  5890                           ; BSR set to: 1
  5891  001CAA  0012               	return	
  5892  001CAC                     l976:
  5893                           
  5894                           ; BSR set to: 1
  5895                           ;pff.c: 840: fs->flag = 0;
  5896                           
  5897                           ; BSR set to: 1
  5898  001CAC  EE20 F001          	lfsr	2,1
  5899  001CB0  519C               	movf	pf_open@fs& (0+255),w,b
  5900  001CB2  26D9               	addwf	fsr2l,f,c
  5901  001CB4  519D               	movf	(pf_open@fs+1)& (0+255),w,b
  5902  001CB6  22DA               	addwfc	fsr2h,f,c
  5903  001CB8  0E00               	movlw	0
  5904  001CBA  6EDF               	movwf	indf2,c
  5905                           
  5906                           ; BSR set to: 1
  5907                           ;pff.c: 841: dj.fn = sp;
  5908  001CBC  0E6F               	movlw	low pf_open@sp
  5909  001CBE  6FA0               	movwf	(pf_open@dj+2)& (0+255),b
  5910  001CC0  0E01               	movlw	high pf_open@sp
  5911  001CC2  6FA1               	movwf	(pf_open@dj+3)& (0+255),b
  5912                           
  5913                           ; BSR set to: 1
  5914                           ;pff.c: 842: res = follow_path(&dj, dir, "check.txt" );
  5915  001CC4  0E9E               	movlw	low pf_open@dj
  5916  001CC6  0100               	movlb	0	; () banked
  5917  001CC8  6FB3               	movwf	follow_path@dj& (0+255),b
  5918  001CCA  0E01               	movlw	high pf_open@dj
  5919  001CCC  6FB4               	movwf	(follow_path@dj+1)& (0+255),b
  5920  001CCE  0E7B               	movlw	low pf_open@dir
  5921  001CD0  6FB5               	movwf	follow_path@dir& (0+255),b
  5922  001CD2  0E01               	movlw	high pf_open@dir
  5923  001CD4  6FB6               	movwf	(follow_path@dir+1)& (0+255),b
  5924  001CD6  0ED7               	movlw	low STR_9
  5925  001CD8  6FB7               	movwf	follow_path@path& (0+255),b
  5926  001CDA  0E7F               	movlw	high STR_9
  5927  001CDC  6FB8               	movwf	(follow_path@path+1)& (0+255),b
  5928  001CDE  ECEF  F011         	call	_follow_path	;wreg free
  5929  001CE2  0101               	movlb	1	; () banked
  5930  001CE4  6F9B               	movwf	pf_open@res& (0+255),b
  5931                           
  5932                           ; BSR set to: 1
  5933                           ;pff.c: 843: if (res != FR_OK) return res;
  5934  001CE6  519B               	movf	pf_open@res& (0+255),w,b
  5935  001CE8  B4D8               	btfsc	status,2,c
  5936  001CEA  D002               	goto	l978
  5937                           
  5938                           ; BSR set to: 1
  5939  001CEC  519B               	movf	pf_open@res& (0+255),w,b
  5940                           
  5941                           ; BSR set to: 1
  5942  001CEE  0012               	return	
  5943  001CF0                     l978:
  5944                           
  5945                           ; BSR set to: 1
  5946                           ;pff.c: 844: if (!dir[0] || (dir[11] & 0x10))
  5947                           
  5948                           ; BSR set to: 1
  5949  001CF0  517B               	movf	pf_open@dir& (0+255),w,b
  5950  001CF2  B4D8               	btfsc	status,2,c
  5951  001CF4  D002               	goto	u7950
  5952                           
  5953                           ; BSR set to: 1
  5954  001CF6  A986               	btfss	(pf_open@dir+11)& (0+255),4,b
  5955  001CF8  D002               	goto	l979
  5956  001CFA                     u7950:
  5957                           
  5958                           ; BSR set to: 1
  5959                           ;pff.c: 845: return FR_NO_FILE;
  5960                           
  5961                           ; BSR set to: 1
  5962  001CFA  0E03               	movlw	3
  5963                           
  5964                           ; BSR set to: 1
  5965  001CFC  0012               	return	
  5966  001CFE                     l979:
  5967                           
  5968                           ; BSR set to: 1
  5969                           ;pff.c: 847: fs->org_clust = get_clust(dir);
  5970                           
  5971                           ; BSR set to: 1
  5972  001CFE  0E7B               	movlw	low pf_open@dir
  5973  001D00  6E1A               	movwf	get_clust@dir,c
  5974  001D02  0E01               	movlw	high pf_open@dir
  5975  001D04  6E1B               	movwf	get_clust@dir+1,c
  5976  001D06  EC60  F013         	call	_get_clust	;wreg free
  5977  001D0A  0101               	movlb	1	; () banked
  5978  001D0C  EE20 F01E          	lfsr	2,30
  5979  001D10  519C               	movf	pf_open@fs& (0+255),w,b
  5980  001D12  26D9               	addwf	fsr2l,f,c
  5981  001D14  519D               	movf	(pf_open@fs+1)& (0+255),w,b
  5982  001D16  22DA               	addwfc	fsr2h,f,c
  5983  001D18  C01A  FFDE         	movff	?_get_clust,postinc2
  5984  001D1C  C01B  FFDE         	movff	?_get_clust+1,postinc2
  5985  001D20  C01C  FFDE         	movff	?_get_clust+2,postinc2
  5986  001D24  C01D  FFDE         	movff	?_get_clust+3,postinc2
  5987                           
  5988                           ; BSR set to: 1
  5989                           ;pff.c: 848: fs->fsize = (DWORD)(((DWORD)*((BYTE*)(dir+28)+3)<<24)|((DWORD)*((BYTE*)(dir
      +                          +28)+2)<<16)|((WORD)*((BYTE*)(dir+28)+1)<<8)|*(BYTE*)(dir+28));
  5990  001D28  5198               	movf	(pf_open@dir+29)& (0+255),w,b
  5991  001D2A  0100               	movlb	0	; () banked
  5992  001D2C  6FBD               	movwf	(??_pf_open+1)& (0+255),b
  5993  001D2E  6BBC               	clrf	??_pf_open& (0+255),b
  5994  001D30  C199  F0BE         	movff	pf_open@dir+30,??_pf_open+2
  5995  001D34  6BBF               	clrf	(??_pf_open+3)& (0+255),b
  5996  001D36  6BC0               	clrf	(??_pf_open+4)& (0+255),b
  5997  001D38  6BC1               	clrf	(??_pf_open+5)& (0+255),b
  5998  001D3A  C0BF  F0C1         	movff	??_pf_open+3,??_pf_open+5
  5999  001D3E  C0BE  F0C0         	movff	??_pf_open+2,??_pf_open+4
  6000  001D42  6BBF               	clrf	(??_pf_open+3)& (0+255),b
  6001  001D44  6BBE               	clrf	(??_pf_open+2)& (0+255),b
  6002  001D46  C19A  F0C2         	movff	pf_open@dir+31,??_pf_open+6
  6003  001D4A  6BC3               	clrf	(??_pf_open+7)& (0+255),b
  6004  001D4C  6BC4               	clrf	(??_pf_open+8)& (0+255),b
  6005  001D4E  6BC5               	clrf	(??_pf_open+9)& (0+255),b
  6006  001D50  C0C2  F0C5         	movff	??_pf_open+6,??_pf_open+9
  6007  001D54  6BC4               	clrf	(??_pf_open+8)& (0+255),b
  6008  001D56  6BC3               	clrf	(??_pf_open+7)& (0+255),b
  6009  001D58  6BC2               	clrf	(??_pf_open+6)& (0+255),b
  6010  001D5A  51BE               	movf	(??_pf_open+2)& (0+255),w,b
  6011  001D5C  11C2               	iorwf	(??_pf_open+6)& (0+255),w,b
  6012  001D5E  6FC6               	movwf	(??_pf_open+10)& (0+255),b
  6013  001D60  51BF               	movf	(??_pf_open+3)& (0+255),w,b
  6014  001D62  11C3               	iorwf	(??_pf_open+7)& (0+255),w,b
  6015  001D64  6FC7               	movwf	(??_pf_open+11)& (0+255),b
  6016  001D66  51C0               	movf	(??_pf_open+4)& (0+255),w,b
  6017  001D68  11C4               	iorwf	(??_pf_open+8)& (0+255),w,b
  6018  001D6A  6FC8               	movwf	(??_pf_open+12)& (0+255),b
  6019  001D6C  51C1               	movf	(??_pf_open+5)& (0+255),w,b
  6020  001D6E  11C5               	iorwf	(??_pf_open+9)& (0+255),w,b
  6021  001D70  6FC9               	movwf	(??_pf_open+13)& (0+255),b
  6022  001D72  51BC               	movf	??_pf_open& (0+255),w,b
  6023  001D74  11C6               	iorwf	(??_pf_open+10)& (0+255),w,b
  6024  001D76  6FCA               	movwf	(??_pf_open+14)& (0+255),b
  6025  001D78  51BD               	movf	(??_pf_open+1)& (0+255),w,b
  6026  001D7A  11C7               	iorwf	(??_pf_open+11)& (0+255),w,b
  6027  001D7C  6FCB               	movwf	(??_pf_open+15)& (0+255),b
  6028  001D7E  0E00               	movlw	0
  6029  001D80  11C8               	iorwf	(??_pf_open+12)& (0+255),w,b
  6030  001D82  6FCC               	movwf	(??_pf_open+16)& (0+255),b
  6031  001D84  0E00               	movlw	0
  6032  001D86  11C9               	iorwf	(??_pf_open+13)& (0+255),w,b
  6033  001D88  6FCD               	movwf	(??_pf_open+17)& (0+255),b
  6034  001D8A  0101               	movlb	1	; () banked
  6035  001D8C  5197               	movf	(pf_open@dir+28)& (0+255),w,b
  6036  001D8E  0100               	movlb	0	; () banked
  6037  001D90  11CA               	iorwf	(??_pf_open+14)& (0+255),w,b
  6038  001D92  6FCE               	movwf	(??_pf_open+18)& (0+255),b
  6039  001D94  51CB               	movf	(??_pf_open+15)& (0+255),w,b
  6040  001D96  6FCF               	movwf	(??_pf_open+19)& (0+255),b
  6041  001D98  51CC               	movf	(??_pf_open+16)& (0+255),w,b
  6042  001D9A  6FD0               	movwf	(??_pf_open+20)& (0+255),b
  6043  001D9C  51CD               	movf	(??_pf_open+17)& (0+255),w,b
  6044  001D9E  6FD1               	movwf	(??_pf_open+21)& (0+255),b
  6045  001DA0  0101               	movlb	1	; () banked
  6046  001DA2  EE20 F01A          	lfsr	2,26
  6047  001DA6  519C               	movf	pf_open@fs& (0+255),w,b
  6048  001DA8  26D9               	addwf	fsr2l,f,c
  6049  001DAA  519D               	movf	(pf_open@fs+1)& (0+255),w,b
  6050  001DAC  22DA               	addwfc	fsr2h,f,c
  6051  001DAE  C0CE  FFDE         	movff	??_pf_open+18,postinc2
  6052  001DB2  C0CF  FFDE         	movff	??_pf_open+19,postinc2
  6053  001DB6  C0D0  FFDE         	movff	??_pf_open+20,postinc2
  6054  001DBA  C0D1  FFDE         	movff	??_pf_open+21,postinc2
  6055                           
  6056                           ; BSR set to: 1
  6057                           ;pff.c: 849: fs->fptr = 0;
  6058  001DBE  EE20 F016          	lfsr	2,22
  6059  001DC2  519C               	movf	pf_open@fs& (0+255),w,b
  6060  001DC4  26D9               	addwf	fsr2l,f,c
  6061  001DC6  519D               	movf	(pf_open@fs+1)& (0+255),w,b
  6062  001DC8  22DA               	addwfc	fsr2h,f,c
  6063  001DCA  6ADE               	clrf	postinc2,c
  6064  001DCC  6ADE               	clrf	postinc2,c
  6065  001DCE  6ADE               	clrf	postinc2,c
  6066  001DD0  6ADD               	clrf	postdec2,c
  6067                           
  6068                           ; BSR set to: 1
  6069                           ;pff.c: 850: fs->flag = 0x01;
  6070  001DD2  EE20 F001          	lfsr	2,1
  6071  001DD6  519C               	movf	pf_open@fs& (0+255),w,b
  6072  001DD8  26D9               	addwf	fsr2l,f,c
  6073  001DDA  519D               	movf	(pf_open@fs+1)& (0+255),w,b
  6074  001DDC  22DA               	addwfc	fsr2h,f,c
  6075  001DDE  0E01               	movlw	1
  6076  001DE0  6EDF               	movwf	indf2,c
  6077                           
  6078                           ; BSR set to: 1
  6079                           ;pff.c: 852: return FR_OK;
  6080  001DE2  0E00               	movlw	0
  6081  001DE4  0012               	return	
  6082  001DE6                     __end_of_pf_open:
  6083                           	opt stack 0
  6084                           tosu	equ	0xFFF
  6085                           tosh	equ	0xFFE
  6086                           tosl	equ	0xFFD
  6087                           pclath	equ	0xFFA
  6088                           tblptru	equ	0xFF8
  6089                           tblptrh	equ	0xFF7
  6090                           tblptrl	equ	0xFF6
  6091                           tablat	equ	0xFF5
  6092                           prodh	equ	0xFF4
  6093                           prodl	equ	0xFF3
  6094                           intcon	equ	0xFF2
  6095                           intcon2	equ	0xFF1
  6096                           intcon3	equ	0xFF0
  6097                           postinc0	equ	0xFEE
  6098                           wreg	equ	0xFE8
  6099                           postinc1	equ	0xFE6
  6100                           postdec1	equ	0xFE5
  6101                           fsr1h	equ	0xFE2
  6102                           fsr1l	equ	0xFE1
  6103                           indf2	equ	0xFDF
  6104                           postinc2	equ	0xFDE
  6105                           postdec2	equ	0xFDD
  6106                           plusw2	equ	0xFDB
  6107                           fsr2h	equ	0xFDA
  6108                           fsr2l	equ	0xFD9
  6109                           status	equ	0xFD8
  6110                           
  6111 ;; *************** function _follow_path *****************
  6112 ;; Defined at:
  6113 ;;		line 680 in file "pff.c"
  6114 ;; Parameters:    Size  Location     Type
  6115 ;;  dj              2   83[BANK0 ] PTR struct .
  6116 ;;		 -> pf_open@dj(16), 
  6117 ;;  dir             2   85[BANK0 ] PTR unsigned char 
  6118 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  6119 ;;  path            2   87[BANK0 ] PTR const unsigned char 
  6120 ;;		 -> STR_18(10), 
  6121 ;; Auto vars:     Size  Location     Type
  6122 ;;  res             1   89[BANK0 ] enum E43
  6123 ;; Return value:  Size  Location     Type
  6124 ;;                  1    wreg      enum E43
  6125 ;; Registers used:
  6126 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6127 ;; Tracked objects:
  6128 ;;		On entry : 0/0
  6129 ;;		On exit  : 0/0
  6130 ;;		Unchanged: 0/0
  6131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6132 ;;      Params:         0       6       0       0       0       0       0       0       0
  6133 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6134 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6135 ;;      Totals:         0       7       0       0       0       0       0       0       0
  6136 ;;Total ram usage:        7 bytes
  6137 ;; Hardware stack levels used:    1
  6138 ;; Hardware stack levels required when called:   10
  6139 ;; This function calls:
  6140 ;;		_create_name
  6141 ;;		_dir_find
  6142 ;;		_dir_rewind
  6143 ;;		_get_clust
  6144 ;; This function is called by:
  6145 ;;		_pf_open
  6146 ;;		_pf_opendir
  6147 ;; This function uses a non-reentrant model
  6148 ;;
  6149                           
  6150                           	psect	text26
  6151  0023DE                     __ptext26:
  6152                           	opt stack 0
  6153  0023DE                     _follow_path:
  6154                           	opt stack 17
  6155                           
  6156                           ;pff.c: 686: FRESULT res;
  6157                           ;pff.c: 689: while (*path == ' ') path++;
  6158                           
  6159                           ; BSR set to: 1
  6160                           ;incstack = 0
  6161  0023DE  D003               	goto	l933
  6162  0023E0  0100               	movlb	0	; () banked
  6163  0023E2  4BB7               	infsnz	follow_path@path& (0+255),f,b
  6164  0023E4  2BB8               	incf	(follow_path@path+1)& (0+255),f,b
  6165  0023E6                     l933:
  6166                           
  6167                           ; BSR set to: 0
  6168  0023E6  C0B7  FFF6         	movff	follow_path@path,tblptrl
  6169  0023EA  C0B8  FFF7         	movff	follow_path@path+1,tblptrh
  6170  0023EE                     	if	0	;tblptru may be non-zero
  6171  0023EE                     	endif
  6172  0023EE                     	if	0	;tblptru may be non-zero
  6173  0023EE                     	endif
  6174  0023EE  0008               	tblrd		*
  6175  0023F0  50F5               	movf	tablat,w,c
  6176  0023F2  0A20               	xorlw	32
  6177  0023F4  B4D8               	btfsc	status,2,c
  6178  0023F6  D7F4               	goto	l934
  6179                           
  6180                           ;pff.c: 690: if (*path == '/') path++;
  6181  0023F8  C0B7  FFF6         	movff	follow_path@path,tblptrl
  6182  0023FC  C0B8  FFF7         	movff	follow_path@path+1,tblptrh
  6183  002400                     	if	0	;tblptru may be non-zero
  6184  002400                     	endif
  6185  002400                     	if	0	;tblptru may be non-zero
  6186  002400                     	endif
  6187  002400  0008               	tblrd		*
  6188  002402  50F5               	movf	tablat,w,c
  6189  002404  0A2F               	xorlw	47
  6190  002406  A4D8               	btfss	status,2,c
  6191  002408  D003               	goto	l936
  6192  00240A  0100               	movlb	0	; () banked
  6193  00240C  4BB7               	infsnz	follow_path@path& (0+255),f,b
  6194  00240E  2BB8               	incf	(follow_path@path+1)& (0+255),f,b
  6195  002410                     l936:
  6196                           
  6197                           ;pff.c: 691: dj->sclust = 0;
  6198                           
  6199                           ; BSR set to: 0
  6200  002410  0100               	movlb	0	; () banked
  6201  002412  EE20 F004          	lfsr	2,4
  6202  002416  51B3               	movf	follow_path@dj& (0+255),w,b
  6203  002418  26D9               	addwf	fsr2l,f,c
  6204  00241A  51B4               	movf	(follow_path@dj+1)& (0+255),w,b
  6205  00241C  22DA               	addwfc	fsr2h,f,c
  6206  00241E  6ADE               	clrf	postinc2,c
  6207  002420  6ADE               	clrf	postinc2,c
  6208  002422  6ADE               	clrf	postinc2,c
  6209  002424  6ADD               	clrf	postdec2,c
  6210                           
  6211                           ; BSR set to: 0
  6212                           ;pff.c: 693: if ((BYTE)*path < ' ') {
  6213  002426  C0B7  FFF6         	movff	follow_path@path,tblptrl
  6214  00242A  C0B8  FFF7         	movff	follow_path@path+1,tblptrh
  6215  00242E                     	if	0	;tblptru may be non-zero
  6216  00242E                     	endif
  6217  00242E                     	if	0	;tblptru may be non-zero
  6218  00242E                     	endif
  6219  00242E  0E20               	movlw	32
  6220  002430  0008               	tblrd		*
  6221  002432  60F5               	cpfslt	tablat,c
  6222  002434  D00F               	goto	l937
  6223                           
  6224                           ; BSR set to: 0
  6225                           ;pff.c: 694: res = dir_rewind(dj);
  6226  002436  C0B3  F065         	movff	follow_path@dj,dir_rewind@dj
  6227  00243A  C0B4  F066         	movff	follow_path@dj+1,dir_rewind@dj+1
  6228  00243E  ECCB  F010         	call	_dir_rewind	;wreg free
  6229  002442  0100               	movlb	0	; () banked
  6230  002444  6FB9               	movwf	follow_path@res& (0+255),b
  6231                           
  6232                           ; BSR set to: 0
  6233                           ;pff.c: 695: dir[0] = 0;
  6234  002446  C0B5  FFD9         	movff	follow_path@dir,fsr2l
  6235  00244A  C0B6  FFDA         	movff	follow_path@dir+1,fsr2h
  6236  00244E  0E00               	movlw	0
  6237  002450  6EDF               	movwf	indf2,c
  6238                           
  6239                           ;pff.c: 697: } else {
  6240  002452  D04E               	goto	l941
  6241  002454                     l937:
  6242                           
  6243                           ; BSR set to: 0
  6244                           ;pff.c: 699: res = create_name(dj, &path);
  6245                           
  6246                           ; BSR set to: 0
  6247                           
  6248                           ;pff.c: 698: for (;;) {
  6249                           
  6250                           ; BSR set to: 0
  6251  002454  C0B3  F022         	movff	follow_path@dj,create_name@dj
  6252  002458  C0B4  F023         	movff	follow_path@dj+1,create_name@dj+1
  6253  00245C  0EB7               	movlw	low follow_path@path
  6254  00245E  6E24               	movwf	create_name@path,c
  6255  002460  0E00               	movlw	high follow_path@path
  6256  002462  6E25               	movwf	create_name@path+1,c
  6257  002464  ECF3  F00E         	call	_create_name	;wreg free
  6258  002468  0100               	movlb	0	; () banked
  6259  00246A  6FB9               	movwf	follow_path@res& (0+255),b
  6260                           
  6261                           ; BSR set to: 0
  6262                           ;pff.c: 700: if (res != FR_OK) break;
  6263  00246C  51B9               	movf	follow_path@res& (0+255),w,b
  6264  00246E  A4D8               	btfss	status,2,c
  6265  002470  D03F               	goto	l941
  6266                           
  6267                           ; BSR set to: 0
  6268                           ;pff.c: 701: res = dir_find(dj, dir);
  6269                           
  6270                           ; BSR set to: 0
  6271                           
  6272                           ; BSR set to: 0
  6273  002472  C0B3  F0AB         	movff	follow_path@dj,dir_find@dj
  6274  002476  C0B4  F0AC         	movff	follow_path@dj+1,dir_find@dj+1
  6275  00247A  C0B5  F0AD         	movff	follow_path@dir,dir_find@dir
  6276  00247E  C0B6  F0AE         	movff	follow_path@dir+1,dir_find@dir+1
  6277  002482  EC7A  F012         	call	_dir_find	;wreg free
  6278  002486  0100               	movlb	0	; () banked
  6279  002488  6FB9               	movwf	follow_path@res& (0+255),b
  6280                           
  6281                           ; BSR set to: 0
  6282                           ;pff.c: 702: if (res != FR_OK) break;
  6283  00248A  51B9               	movf	follow_path@res& (0+255),w,b
  6284  00248C  A4D8               	btfss	status,2,c
  6285  00248E  D030               	goto	l941
  6286                           
  6287                           ; BSR set to: 0
  6288                           ;pff.c: 703: if (dj->fn[11]) break;
  6289                           
  6290                           ; BSR set to: 0
  6291                           
  6292                           ; BSR set to: 0
  6293  002490  EE20 F002          	lfsr	2,2
  6294  002494  51B3               	movf	follow_path@dj& (0+255),w,b
  6295  002496  26D9               	addwf	fsr2l,f,c
  6296  002498  51B4               	movf	(follow_path@dj+1)& (0+255),w,b
  6297  00249A  22DA               	addwfc	fsr2h,f,c
  6298  00249C  EE10 F00B          	lfsr	1,11
  6299  0024A0  50DE               	movf	postinc2,w,c
  6300  0024A2  26E1               	addwf	fsr1l,f,c
  6301  0024A4  50DD               	movf	postdec2,w,c
  6302  0024A6  22E2               	addwfc	fsr1h,f,c
  6303  0024A8  50E7               	movf	indf1,w,c
  6304  0024AA  A4D8               	btfss	status,2,c
  6305  0024AC  D021               	goto	l941
  6306                           
  6307                           ; BSR set to: 0
  6308                           ;pff.c: 704: if (!(dir[11] & 0x10)) {
  6309                           
  6310                           ; BSR set to: 0
  6311                           
  6312                           ; BSR set to: 0
  6313  0024AE  EE20 F00B          	lfsr	2,11
  6314  0024B2  51B5               	movf	follow_path@dir& (0+255),w,b
  6315  0024B4  26D9               	addwf	fsr2l,f,c
  6316  0024B6  51B6               	movf	(follow_path@dir+1)& (0+255),w,b
  6317  0024B8  22DA               	addwfc	fsr2h,f,c
  6318  0024BA  B8DF               	btfsc	indf2,4,c
  6319  0024BC  D003               	goto	l944
  6320                           
  6321                           ; BSR set to: 0
  6322                           ;pff.c: 705: res = FR_NO_FILE; break;
  6323  0024BE  0E03               	movlw	3
  6324  0024C0  6FB9               	movwf	follow_path@res& (0+255),b
  6325  0024C2  D016               	goto	l941
  6326  0024C4                     l944:
  6327                           
  6328                           ; BSR set to: 0
  6329                           ;pff.c: 706: }
  6330                           ;pff.c: 707: dj->sclust = get_clust(dir);
  6331                           
  6332                           ; BSR set to: 0
  6333  0024C4  C0B5  F01A         	movff	follow_path@dir,get_clust@dir
  6334  0024C8  C0B6  F01B         	movff	follow_path@dir+1,get_clust@dir+1
  6335  0024CC  EC60  F013         	call	_get_clust	;wreg free
  6336  0024D0  0100               	movlb	0	; () banked
  6337  0024D2  EE20 F004          	lfsr	2,4
  6338  0024D6  51B3               	movf	follow_path@dj& (0+255),w,b
  6339  0024D8  26D9               	addwf	fsr2l,f,c
  6340  0024DA  51B4               	movf	(follow_path@dj+1)& (0+255),w,b
  6341  0024DC  22DA               	addwfc	fsr2h,f,c
  6342  0024DE  C01A  FFDE         	movff	?_get_clust,postinc2
  6343  0024E2  C01B  FFDE         	movff	?_get_clust+1,postinc2
  6344  0024E6  C01C  FFDE         	movff	?_get_clust+2,postinc2
  6345  0024EA  C01D  FFDE         	movff	?_get_clust+3,postinc2
  6346                           
  6347                           ;pff.c: 708: }
  6348  0024EE  D7B2               	goto	l937
  6349  0024F0                     l941:
  6350                           
  6351                           ; BSR set to: 0
  6352                           ;pff.c: 709: }
  6353                           ;pff.c: 711: return res;
  6354                           
  6355                           ; BSR set to: 0
  6356                           
  6357                           ; BSR set to: 0
  6358  0024F0  51B9               	movf	follow_path@res& (0+255),w,b
  6359  0024F2  0012               	return	
  6360  0024F4                     __end_of_follow_path:
  6361                           	opt stack 0
  6362                           tosu	equ	0xFFF
  6363                           tosh	equ	0xFFE
  6364                           tosl	equ	0xFFD
  6365                           pclath	equ	0xFFA
  6366                           tblptru	equ	0xFF8
  6367                           tblptrh	equ	0xFF7
  6368                           tblptrl	equ	0xFF6
  6369                           tablat	equ	0xFF5
  6370                           prodh	equ	0xFF4
  6371                           prodl	equ	0xFF3
  6372                           intcon	equ	0xFF2
  6373                           intcon2	equ	0xFF1
  6374                           intcon3	equ	0xFF0
  6375                           postinc0	equ	0xFEE
  6376                           wreg	equ	0xFE8
  6377                           indf1	equ	0xFE7
  6378                           postinc1	equ	0xFE6
  6379                           postdec1	equ	0xFE5
  6380                           fsr1h	equ	0xFE2
  6381                           fsr1l	equ	0xFE1
  6382                           indf2	equ	0xFDF
  6383                           postinc2	equ	0xFDE
  6384                           postdec2	equ	0xFDD
  6385                           plusw2	equ	0xFDB
  6386                           fsr2h	equ	0xFDA
  6387                           fsr2l	equ	0xFD9
  6388                           status	equ	0xFD8
  6389                           
  6390 ;; *************** function _get_clust *****************
  6391 ;; Defined at:
  6392 ;;		line 414 in file "pff.c"
  6393 ;; Parameters:    Size  Location     Type
  6394 ;;  dir             2   25[COMRAM] PTR unsigned char 
  6395 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  6396 ;; Auto vars:     Size  Location     Type
  6397 ;;  clst            4   39[COMRAM] unsigned long 
  6398 ;;  fs              2   37[COMRAM] PTR struct .
  6399 ;;		 -> NULL(0), SDCard@fs(42), 
  6400 ;; Return value:  Size  Location     Type
  6401 ;;                  4   25[COMRAM] unsigned long 
  6402 ;; Registers used:
  6403 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6404 ;; Tracked objects:
  6405 ;;		On entry : 0/0
  6406 ;;		On exit  : 0/0
  6407 ;;		Unchanged: 0/0
  6408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6409 ;;      Params:         4       0       0       0       0       0       0       0       0
  6410 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6411 ;;      Temps:          8       0       0       0       0       0       0       0       0
  6412 ;;      Totals:        18       0       0       0       0       0       0       0       0
  6413 ;;Total ram usage:       18 bytes
  6414 ;; Hardware stack levels used:    1
  6415 ;; Hardware stack levels required when called:    2
  6416 ;; This function calls:
  6417 ;;		Nothing
  6418 ;; This function is called by:
  6419 ;;		_follow_path
  6420 ;;		_pf_open
  6421 ;;		_pf_opendir
  6422 ;; This function uses a non-reentrant model
  6423 ;;
  6424                           
  6425                           	psect	text27
  6426  0026C0                     __ptext27:
  6427                           	opt stack 0
  6428  0026C0                     _get_clust:
  6429                           	opt stack 25
  6430                           
  6431                           ;pff.c: 418: FATFS *fs = FatFs;
  6432                           
  6433                           ; BSR set to: 0
  6434                           ;incstack = 0
  6435  0026C0  C035  F026         	movff	_FatFs,get_clust@fs
  6436  0026C4  C036  F027         	movff	_FatFs+1,get_clust@fs+1
  6437                           
  6438                           ;pff.c: 422: if (0 || (1 && fs->fs_type == 3)) {
  6439  0026C8  0E00               	movlw	0
  6440  0026CA  6E28               	movwf	get_clust@clst,c
  6441  0026CC  0E00               	movlw	0
  6442  0026CE  6E29               	movwf	get_clust@clst+1,c
  6443  0026D0  0E00               	movlw	0
  6444  0026D2  6E2A               	movwf	get_clust@clst+2,c
  6445  0026D4  0E00               	movlw	0
  6446  0026D6  6E2B               	movwf	get_clust@clst+3,c
  6447  0026D8  C026  FFD9         	movff	get_clust@fs,fsr2l
  6448  0026DC  C027  FFDA         	movff	get_clust@fs+1,fsr2h
  6449  0026E0  0E03               	movlw	3
  6450  0026E2  18DE               	xorwf	postinc2,w,c
  6451  0026E4  A4D8               	btfss	status,2,c
  6452  0026E6  D025               	goto	l848
  6453                           
  6454                           ;pff.c: 423: clst = (WORD)(((WORD)*((BYTE*)(dir+20)+1)<<8)|(WORD)*(BYTE*)(dir+20));
  6455  0026E8  EE20 F015          	lfsr	2,21
  6456  0026EC  501A               	movf	get_clust@dir,w,c
  6457  0026EE  26D9               	addwf	fsr2l,f,c
  6458  0026F0  501B               	movf	get_clust@dir+1,w,c
  6459  0026F2  22DA               	addwfc	fsr2h,f,c
  6460  0026F4  50DF               	movf	indf2,w,c
  6461  0026F6  6E1E               	movwf	??_get_clust& (0+255),c
  6462  0026F8  501E               	movf	??_get_clust,w,c
  6463  0026FA  6E20               	movwf	(??_get_clust+2)& (0+255),c
  6464  0026FC  6A1F               	clrf	(??_get_clust+1)& (0+255),c
  6465  0026FE  EE20 F014          	lfsr	2,20
  6466  002702  501A               	movf	get_clust@dir,w,c
  6467  002704  26D9               	addwf	fsr2l,f,c
  6468  002706  501B               	movf	get_clust@dir+1,w,c
  6469  002708  22DA               	addwfc	fsr2h,f,c
  6470  00270A  50DF               	movf	indf2,w,c
  6471  00270C  6E21               	movwf	(??_get_clust+3)& (0+255),c
  6472  00270E  5021               	movf	??_get_clust+3,w,c
  6473  002710  121F               	iorwf	??_get_clust+1,f,c
  6474  002712  0E00               	movlw	0
  6475  002714  1220               	iorwf	??_get_clust+2,f,c
  6476  002716  C01F  F028         	movff	??_get_clust+1,get_clust@clst
  6477  00271A  C020  F029         	movff	??_get_clust+2,get_clust@clst+1
  6478  00271E  6A2A               	clrf	get_clust@clst+2,c
  6479  002720  6A2B               	clrf	get_clust@clst+3,c
  6480                           
  6481                           ;pff.c: 424: clst <<= 16;
  6482  002722  0E10               	movlw	16
  6483  002724                     u7255:
  6484  002724  90D8               	bcf	status,0,c
  6485  002726  3628               	rlcf	get_clust@clst,f,c
  6486  002728  3629               	rlcf	get_clust@clst+1,f,c
  6487  00272A  362A               	rlcf	get_clust@clst+2,f,c
  6488  00272C  362B               	rlcf	get_clust@clst+3,f,c
  6489  00272E  2EE8               	decfsz	wreg,f,c
  6490  002730  D7F9               	goto	u7255
  6491  002732                     l848:
  6492                           
  6493                           ;pff.c: 425: }
  6494                           ;pff.c: 426: clst |= (WORD)(((WORD)*((BYTE*)(dir+26)+1)<<8)|(WORD)*(BYTE*)(dir+26));
  6495  002732  EE20 F01B          	lfsr	2,27
  6496  002736  501A               	movf	get_clust@dir,w,c
  6497  002738  26D9               	addwf	fsr2l,f,c
  6498  00273A  501B               	movf	get_clust@dir+1,w,c
  6499  00273C  22DA               	addwfc	fsr2h,f,c
  6500  00273E  50DF               	movf	indf2,w,c
  6501  002740  6E1E               	movwf	??_get_clust& (0+255),c
  6502  002742  501E               	movf	??_get_clust,w,c
  6503  002744  6E20               	movwf	(??_get_clust+2)& (0+255),c
  6504  002746  6A1F               	clrf	(??_get_clust+1)& (0+255),c
  6505  002748  EE20 F01A          	lfsr	2,26
  6506  00274C  501A               	movf	get_clust@dir,w,c
  6507  00274E  26D9               	addwf	fsr2l,f,c
  6508  002750  501B               	movf	get_clust@dir+1,w,c
  6509  002752  22DA               	addwfc	fsr2h,f,c
  6510  002754  50DF               	movf	indf2,w,c
  6511  002756  6E21               	movwf	(??_get_clust+3)& (0+255),c
  6512  002758  5021               	movf	??_get_clust+3,w,c
  6513  00275A  101F               	iorwf	??_get_clust+1,w,c
  6514  00275C  6E22               	movwf	(??_get_clust+4)& (0+255),c
  6515  00275E  5020               	movf	??_get_clust+2,w,c
  6516  002760  6E23               	movwf	(??_get_clust+5)& (0+255),c
  6517  002762  6A24               	clrf	(??_get_clust+6)& (0+255),c
  6518  002764  6A25               	clrf	(??_get_clust+7)& (0+255),c
  6519  002766  5022               	movf	??_get_clust+4,w,c
  6520  002768  1228               	iorwf	get_clust@clst,f,c
  6521  00276A  5023               	movf	??_get_clust+5,w,c
  6522  00276C  1229               	iorwf	get_clust@clst+1,f,c
  6523  00276E  5024               	movf	??_get_clust+6,w,c
  6524  002770  122A               	iorwf	get_clust@clst+2,f,c
  6525  002772  5025               	movf	??_get_clust+7,w,c
  6526  002774  122B               	iorwf	get_clust@clst+3,f,c
  6527                           
  6528                           ;pff.c: 428: return clst;
  6529  002776  C028  F01A         	movff	get_clust@clst,?_get_clust
  6530  00277A  C029  F01B         	movff	get_clust@clst+1,?_get_clust+1
  6531  00277E  C02A  F01C         	movff	get_clust@clst+2,?_get_clust+2
  6532  002782  C02B  F01D         	movff	get_clust@clst+3,?_get_clust+3
  6533  002786  0012               	return	
  6534  002788                     __end_of_get_clust:
  6535                           	opt stack 0
  6536                           tosu	equ	0xFFF
  6537                           tosh	equ	0xFFE
  6538                           tosl	equ	0xFFD
  6539                           pclath	equ	0xFFA
  6540                           tblptru	equ	0xFF8
  6541                           tblptrh	equ	0xFF7
  6542                           tblptrl	equ	0xFF6
  6543                           tablat	equ	0xFF5
  6544                           prodh	equ	0xFF4
  6545                           prodl	equ	0xFF3
  6546                           intcon	equ	0xFF2
  6547                           intcon2	equ	0xFF1
  6548                           intcon3	equ	0xFF0
  6549                           postinc0	equ	0xFEE
  6550                           wreg	equ	0xFE8
  6551                           indf1	equ	0xFE7
  6552                           postinc1	equ	0xFE6
  6553                           postdec1	equ	0xFE5
  6554                           fsr1h	equ	0xFE2
  6555                           fsr1l	equ	0xFE1
  6556                           indf2	equ	0xFDF
  6557                           postinc2	equ	0xFDE
  6558                           postdec2	equ	0xFDD
  6559                           plusw2	equ	0xFDB
  6560                           fsr2h	equ	0xFDA
  6561                           fsr2l	equ	0xFD9
  6562                           status	equ	0xFD8
  6563                           
  6564 ;; *************** function _dir_find *****************
  6565 ;; Defined at:
  6566 ;;		line 510 in file "pff.c"
  6567 ;; Parameters:    Size  Location     Type
  6568 ;;  dj              2   75[BANK0 ] PTR struct .
  6569 ;;		 -> pf_open@dj(16), 
  6570 ;;  dir             2   77[BANK0 ] PTR unsigned char 
  6571 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  6572 ;; Auto vars:     Size  Location     Type
  6573 ;;  res             1   82[BANK0 ] enum E43
  6574 ;;  c               1   81[BANK0 ] unsigned char 
  6575 ;; Return value:  Size  Location     Type
  6576 ;;                  1    wreg      enum E43
  6577 ;; Registers used:
  6578 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6579 ;; Tracked objects:
  6580 ;;		On entry : 0/0
  6581 ;;		On exit  : 0/0
  6582 ;;		Unchanged: 0/0
  6583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6584 ;;      Params:         0       4       0       0       0       0       0       0       0
  6585 ;;      Locals:         0       2       0       0       0       0       0       0       0
  6586 ;;      Temps:          0       2       0       0       0       0       0       0       0
  6587 ;;      Totals:         0       8       0       0       0       0       0       0       0
  6588 ;;Total ram usage:        8 bytes
  6589 ;; Hardware stack levels used:    1
  6590 ;; Hardware stack levels required when called:    9
  6591 ;; This function calls:
  6592 ;;		_dir_next
  6593 ;;		_dir_rewind
  6594 ;;		_disk_readp
  6595 ;;		_mem_cmp
  6596 ;; This function is called by:
  6597 ;;		_follow_path
  6598 ;; This function uses a non-reentrant model
  6599 ;;
  6600                           
  6601                           	psect	text28
  6602  0024F4                     __ptext28:
  6603                           	opt stack 0
  6604  0024F4                     _dir_find:
  6605                           	opt stack 17
  6606                           
  6607                           ;pff.c: 515: FRESULT res;
  6608                           ;pff.c: 516: BYTE c;
  6609                           ;pff.c: 519: res = dir_rewind(dj);
  6610                           
  6611                           ;incstack = 0
  6612  0024F4  C0AB  F065         	movff	dir_find@dj,dir_rewind@dj
  6613  0024F8  C0AC  F066         	movff	dir_find@dj+1,dir_rewind@dj+1
  6614  0024FC  ECCB  F010         	call	_dir_rewind	;wreg free
  6615  002500  0100               	movlb	0	; () banked
  6616  002502  6FB2               	movwf	dir_find@res& (0+255),b
  6617                           
  6618                           ; BSR set to: 0
  6619                           ;pff.c: 520: if (res != FR_OK) return res;
  6620  002504  51B2               	movf	dir_find@res& (0+255),w,b
  6621  002506  B4D8               	btfsc	status,2,c
  6622  002508  D002               	goto	l880
  6623                           
  6624                           ; BSR set to: 0
  6625  00250A  51B2               	movf	dir_find@res& (0+255),w,b
  6626                           
  6627                           ; BSR set to: 0
  6628  00250C  0012               	return	
  6629  00250E                     l880:
  6630                           
  6631                           ; BSR set to: 0
  6632                           ;pff.c: 523: res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32)
  6633                           ;pff.c: 524: ? FR_DISK_ERR : FR_OK;
  6634                           
  6635                           ; BSR set to: 0
  6636                           
  6637                           ;pff.c: 522: do {
  6638                           
  6639                           ; BSR set to: 0
  6640  00250E  C0AD  F060         	movff	dir_find@dir,disk_readp@rd
  6641  002512  C0AE  F061         	movff	dir_find@dir+1,disk_readp@rd+1
  6642  002516  EE20 F00C          	lfsr	2,12
  6643  00251A  51AB               	movf	dir_find@dj& (0+255),w,b
  6644  00251C  26D9               	addwf	fsr2l,f,c
  6645  00251E  51AC               	movf	(dir_find@dj+1)& (0+255),w,b
  6646  002520  22DA               	addwfc	fsr2h,f,c
  6647  002522  CFDE F062          	movff	postinc2,disk_readp@sector
  6648  002526  CFDE F063          	movff	postinc2,disk_readp@sector+1
  6649  00252A  CFDE F064          	movff	postinc2,disk_readp@sector+2
  6650  00252E  CFDE F065          	movff	postinc2,disk_readp@sector+3
  6651  002532  C0AB  FFD9         	movff	dir_find@dj,fsr2l
  6652  002536  C0AC  FFDA         	movff	dir_find@dj+1,fsr2h
  6653  00253A  CFDE F0AF          	movff	postinc2,??_dir_find
  6654  00253E  CFDD F0B0          	movff	postdec2,??_dir_find+1
  6655  002542  0E0F               	movlw	15
  6656  002544  17AF               	andwf	??_dir_find& (0+255),f,b
  6657  002546  0E00               	movlw	0
  6658  002548  17B0               	andwf	(??_dir_find+1)& (0+255),f,b
  6659  00254A  0E05               	movlw	5
  6660  00254C                     u7275:
  6661  00254C  90D8               	bcf	status,0,c
  6662  00254E  37AF               	rlcf	??_dir_find& (0+255),f,b
  6663  002550  37B0               	rlcf	(??_dir_find+1)& (0+255),f,b
  6664  002552  2EE8               	decfsz	wreg,f,c
  6665  002554  D7FB               	goto	u7275
  6666  002556  C0AF  F066         	movff	??_dir_find,disk_readp@offset
  6667  00255A  C0B0  F067         	movff	??_dir_find+1,disk_readp@offset+1
  6668  00255E  0E00               	movlw	0
  6669  002560  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  6670  002562  0E20               	movlw	32
  6671  002564  6F68               	movwf	disk_readp@count& (0+255),b
  6672  002566  EC3C  F009         	call	_disk_readp	;wreg free
  6673  00256A  0900               	iorlw	0
  6674  00256C  B4D8               	btfsc	status,2,c
  6675  00256E  D002               	goto	u7280
  6676  002570  0E01               	movlw	1
  6677  002572  D001               	goto	u7290
  6678  002574                     u7280:
  6679  002574  0E00               	movlw	0
  6680  002576                     u7290:
  6681  002576  0100               	movlb	0	; () banked
  6682  002578  6FB2               	movwf	dir_find@res& (0+255),b
  6683                           
  6684                           ; BSR set to: 0
  6685                           ;pff.c: 525: if (res != FR_OK) break;
  6686  00257A  51B2               	movf	dir_find@res& (0+255),w,b
  6687  00257C  A4D8               	btfss	status,2,c
  6688  00257E  D037               	goto	u7340
  6689                           
  6690                           ; BSR set to: 0
  6691                           ;pff.c: 526: c = dir[0];
  6692                           
  6693                           ; BSR set to: 0
  6694                           
  6695                           ; BSR set to: 0
  6696  002580  C0AD  FFD9         	movff	dir_find@dir,fsr2l
  6697  002584  C0AE  FFDA         	movff	dir_find@dir+1,fsr2h
  6698  002588  50DF               	movf	indf2,w,c
  6699  00258A  6FB1               	movwf	dir_find@c& (0+255),b
  6700                           
  6701                           ; BSR set to: 0
  6702                           ;pff.c: 527: if (c == 0) { res = FR_NO_FILE; break; }
  6703  00258C  51B1               	movf	dir_find@c& (0+255),w,b
  6704  00258E  A4D8               	btfss	status,2,c
  6705  002590  D003               	goto	l885
  6706                           
  6707                           ; BSR set to: 0
  6708  002592  0E03               	movlw	3
  6709  002594  6FB2               	movwf	dir_find@res& (0+255),b
  6710  002596  D02B               	goto	u7340
  6711  002598                     l885:
  6712                           
  6713                           ; BSR set to: 0
  6714                           ;pff.c: 528: if (!(dir[11] & 0x08) && !mem_cmp(dir, dj->fn, 11))
  6715                           
  6716                           ; BSR set to: 0
  6717  002598  EE20 F00B          	lfsr	2,11
  6718  00259C  51AD               	movf	dir_find@dir& (0+255),w,b
  6719  00259E  26D9               	addwf	fsr2l,f,c
  6720  0025A0  51AE               	movf	(dir_find@dir+1)& (0+255),w,b
  6721  0025A2  22DA               	addwfc	fsr2h,f,c
  6722  0025A4  B6DF               	btfsc	indf2,3,c
  6723  0025A6  D018               	goto	l886
  6724                           
  6725                           ; BSR set to: 0
  6726  0025A8  C0AD  F01A         	movff	dir_find@dir,mem_cmp@dst
  6727  0025AC  C0AE  F01B         	movff	dir_find@dir+1,mem_cmp@dst+1
  6728  0025B0  EE20 F002          	lfsr	2,2
  6729  0025B4  51AB               	movf	dir_find@dj& (0+255),w,b
  6730  0025B6  26D9               	addwf	fsr2l,f,c
  6731  0025B8  51AC               	movf	(dir_find@dj+1)& (0+255),w,b
  6732  0025BA  22DA               	addwfc	fsr2h,f,c
  6733  0025BC  CFDE F01C          	movff	postinc2,mem_cmp@src
  6734  0025C0  CFDD F01D          	movff	postdec2,mem_cmp@src+1
  6735  0025C4  0E00               	movlw	0
  6736  0025C6  6E1F               	movwf	mem_cmp@cnt+1,c
  6737  0025C8  0E0B               	movlw	11
  6738  0025CA  6E1E               	movwf	mem_cmp@cnt,c
  6739  0025CC  EC0D  F016         	call	_mem_cmp	;wreg free
  6740  0025D0  501A               	movf	?_mem_cmp,w,c
  6741  0025D2  101B               	iorwf	?_mem_cmp+1,w,c
  6742  0025D4  B4D8               	btfsc	status,2,c
  6743  0025D6  D00B               	goto	u7340
  6744  0025D8                     l886:
  6745                           
  6746                           ;pff.c: 530: res = dir_next(dj);
  6747  0025D8  C0AB  F09A         	movff	dir_find@dj,dir_next@dj
  6748  0025DC  C0AC  F09B         	movff	dir_find@dj+1,dir_next@dj+1
  6749  0025E0  EC0E  F00C         	call	_dir_next	;wreg free
  6750  0025E4  0100               	movlb	0	; () banked
  6751  0025E6  6FB2               	movwf	dir_find@res& (0+255),b
  6752                           
  6753                           ; BSR set to: 0
  6754                           ;pff.c: 531: } while (res == FR_OK);
  6755  0025E8  51B2               	movf	dir_find@res& (0+255),w,b
  6756  0025EA  B4D8               	btfsc	status,2,c
  6757  0025EC  D790               	goto	l880
  6758  0025EE                     u7340:
  6759                           
  6760                           ;pff.c: 533: return res;
  6761                           
  6762                           ; BSR set to: 0
  6763  0025EE  0100               	movlb	0	; () banked
  6764  0025F0  51B2               	movf	dir_find@res& (0+255),w,b
  6765  0025F2  0012               	return	
  6766  0025F4                     __end_of_dir_find:
  6767                           	opt stack 0
  6768                           tosu	equ	0xFFF
  6769                           tosh	equ	0xFFE
  6770                           tosl	equ	0xFFD
  6771                           pclath	equ	0xFFA
  6772                           tblptru	equ	0xFF8
  6773                           tblptrh	equ	0xFF7
  6774                           tblptrl	equ	0xFF6
  6775                           tablat	equ	0xFF5
  6776                           prodh	equ	0xFF4
  6777                           prodl	equ	0xFF3
  6778                           intcon	equ	0xFF2
  6779                           intcon2	equ	0xFF1
  6780                           intcon3	equ	0xFF0
  6781                           postinc0	equ	0xFEE
  6782                           wreg	equ	0xFE8
  6783                           indf1	equ	0xFE7
  6784                           postinc1	equ	0xFE6
  6785                           postdec1	equ	0xFE5
  6786                           fsr1h	equ	0xFE2
  6787                           fsr1l	equ	0xFE1
  6788                           indf2	equ	0xFDF
  6789                           postinc2	equ	0xFDE
  6790                           postdec2	equ	0xFDD
  6791                           plusw2	equ	0xFDB
  6792                           fsr2h	equ	0xFDA
  6793                           fsr2l	equ	0xFD9
  6794                           status	equ	0xFD8
  6795                           
  6796 ;; *************** function _mem_cmp *****************
  6797 ;; Defined at:
  6798 ;;		line 336 in file "pff.c"
  6799 ;; Parameters:    Size  Location     Type
  6800 ;;  dst             2   25[COMRAM] PTR const void 
  6801 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  6802 ;;  src             2   27[COMRAM] PTR const void 
  6803 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  6804 ;;  cnt             2   29[COMRAM] int 
  6805 ;; Auto vars:     Size  Location     Type
  6806 ;;  r               2   38[COMRAM] int 
  6807 ;;  s               2   36[COMRAM] PTR const unsigned char 
  6808 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  6809 ;;  d               2   34[COMRAM] PTR const unsigned char 
  6810 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  6811 ;; Return value:  Size  Location     Type
  6812 ;;                  2   25[COMRAM] int 
  6813 ;; Registers used:
  6814 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6815 ;; Tracked objects:
  6816 ;;		On entry : 0/0
  6817 ;;		On exit  : 0/0
  6818 ;;		Unchanged: 0/0
  6819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6820 ;;      Params:         6       0       0       0       0       0       0       0       0
  6821 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6822 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6823 ;;      Totals:        15       0       0       0       0       0       0       0       0
  6824 ;;Total ram usage:       15 bytes
  6825 ;; Hardware stack levels used:    1
  6826 ;; Hardware stack levels required when called:    2
  6827 ;; This function calls:
  6828 ;;		Nothing
  6829 ;; This function is called by:
  6830 ;;		_dir_find
  6831 ;; This function uses a non-reentrant model
  6832 ;;
  6833                           
  6834                           	psect	text29
  6835  002C1A                     __ptext29:
  6836                           	opt stack 0
  6837  002C1A                     _mem_cmp:
  6838                           	opt stack 23
  6839                           
  6840                           ;pff.c: 337: const char *d = (const char *)dst, *s = (const char *)src;
  6841                           
  6842                           ; BSR set to: 0
  6843                           ;incstack = 0
  6844  002C1A  C01A  F023         	movff	mem_cmp@dst,mem_cmp@d
  6845  002C1E  C01B  F024         	movff	mem_cmp@dst+1,mem_cmp@d+1
  6846  002C22  C01C  F025         	movff	mem_cmp@src,mem_cmp@s
  6847  002C26  C01D  F026         	movff	mem_cmp@src+1,mem_cmp@s+1
  6848                           
  6849                           ;pff.c: 338: int r = 0;
  6850  002C2A  0E00               	movlw	0
  6851  002C2C  6E28               	movwf	mem_cmp@r+1,c
  6852  002C2E  0E00               	movlw	0
  6853  002C30  6E27               	movwf	mem_cmp@r,c
  6854  002C32  061E               	decf	mem_cmp@cnt,f,c
  6855  002C34  A0D8               	btfss	status,0,c
  6856  002C36  061F               	decf	mem_cmp@cnt+1,f,c
  6857  002C38  281E               	incf	mem_cmp@cnt,w,c
  6858  002C3A  E103               	bnz	u6940
  6859  002C3C  281F               	incf	mem_cmp@cnt+1,w,c
  6860  002C3E  B4D8               	btfsc	status,2,c
  6861  002C40  D01F               	goto	u6950
  6862  002C42                     u6940:
  6863  002C42  C025  FFD9         	movff	mem_cmp@s,fsr2l
  6864  002C46  C026  FFDA         	movff	mem_cmp@s+1,fsr2h
  6865  002C4A  4A25               	infsnz	mem_cmp@s,f,c
  6866  002C4C  2A26               	incf	mem_cmp@s+1,f,c
  6867  002C4E  50DF               	movf	indf2,w,c
  6868  002C50  6E20               	movwf	??_mem_cmp& (0+255),c
  6869  002C52  6A21               	clrf	(??_mem_cmp+1)& (0+255),c
  6870  002C54  1E20               	comf	??_mem_cmp,f,c
  6871  002C56  1E21               	comf	??_mem_cmp+1,f,c
  6872  002C58  4A20               	infsnz	??_mem_cmp,f,c
  6873  002C5A  2A21               	incf	??_mem_cmp+1,f,c
  6874  002C5C  C023  FFD9         	movff	mem_cmp@d,fsr2l
  6875  002C60  C024  FFDA         	movff	mem_cmp@d+1,fsr2h
  6876  002C64  4A23               	infsnz	mem_cmp@d,f,c
  6877  002C66  2A24               	incf	mem_cmp@d+1,f,c
  6878  002C68  50DF               	movf	indf2,w,c
  6879  002C6A  6E22               	movwf	(??_mem_cmp+2)& (0+255),c
  6880  002C6C  5022               	movf	??_mem_cmp+2,w,c
  6881  002C6E  2420               	addwf	??_mem_cmp,w,c
  6882  002C70  6E27               	movwf	mem_cmp@r,c
  6883  002C72  0E00               	movlw	0
  6884  002C74  2021               	addwfc	??_mem_cmp+1,w,c
  6885  002C76  6E28               	movwf	mem_cmp@r+1,c
  6886  002C78  5027               	movf	mem_cmp@r,w,c
  6887  002C7A  1028               	iorwf	mem_cmp@r+1,w,c
  6888  002C7C  B4D8               	btfsc	status,2,c
  6889  002C7E  D7D9               	goto	l815
  6890  002C80                     u6950:
  6891                           
  6892                           ;pff.c: 340: return r;
  6893  002C80  C027  F01A         	movff	mem_cmp@r,?_mem_cmp
  6894  002C84  C028  F01B         	movff	mem_cmp@r+1,?_mem_cmp+1
  6895  002C88  0012               	return		;funcret
  6896  002C8A                     __end_of_mem_cmp:
  6897                           	opt stack 0
  6898                           tosu	equ	0xFFF
  6899                           tosh	equ	0xFFE
  6900                           tosl	equ	0xFFD
  6901                           pclath	equ	0xFFA
  6902                           tblptru	equ	0xFF8
  6903                           tblptrh	equ	0xFF7
  6904                           tblptrl	equ	0xFF6
  6905                           tablat	equ	0xFF5
  6906                           prodh	equ	0xFF4
  6907                           prodl	equ	0xFF3
  6908                           intcon	equ	0xFF2
  6909                           intcon2	equ	0xFF1
  6910                           intcon3	equ	0xFF0
  6911                           postinc0	equ	0xFEE
  6912                           wreg	equ	0xFE8
  6913                           indf1	equ	0xFE7
  6914                           postinc1	equ	0xFE6
  6915                           postdec1	equ	0xFE5
  6916                           fsr1h	equ	0xFE2
  6917                           fsr1l	equ	0xFE1
  6918                           indf2	equ	0xFDF
  6919                           postinc2	equ	0xFDE
  6920                           postdec2	equ	0xFDD
  6921                           plusw2	equ	0xFDB
  6922                           fsr2h	equ	0xFDA
  6923                           fsr2l	equ	0xFD9
  6924                           status	equ	0xFD8
  6925                           
  6926 ;; *************** function _dir_rewind *****************
  6927 ;; Defined at:
  6928 ;;		line 437 in file "pff.c"
  6929 ;; Parameters:    Size  Location     Type
  6930 ;;  dj              2    5[BANK0 ] PTR struct .
  6931 ;;		 -> pf_open@dj(16), 
  6932 ;; Auto vars:     Size  Location     Type
  6933 ;;  clst            4   17[BANK0 ] unsigned long 
  6934 ;;  fs              2   15[BANK0 ] PTR struct .
  6935 ;;		 -> NULL(0), SDCard@fs(42), 
  6936 ;; Return value:  Size  Location     Type
  6937 ;;                  1    wreg      enum E43
  6938 ;; Registers used:
  6939 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6940 ;; Tracked objects:
  6941 ;;		On entry : 0/0
  6942 ;;		On exit  : 0/0
  6943 ;;		Unchanged: 0/0
  6944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6945 ;;      Params:         0       2       0       0       0       0       0       0       0
  6946 ;;      Locals:         0      10       0       0       0       0       0       0       0
  6947 ;;      Temps:          0       4       0       0       0       0       0       0       0
  6948 ;;      Totals:         0      16       0       0       0       0       0       0       0
  6949 ;;Total ram usage:       16 bytes
  6950 ;; Hardware stack levels used:    1
  6951 ;; Hardware stack levels required when called:    4
  6952 ;; This function calls:
  6953 ;;		_clust2sect
  6954 ;; This function is called by:
  6955 ;;		_dir_find
  6956 ;;		_follow_path
  6957 ;;		_pf_opendir
  6958 ;;		_pf_readdir
  6959 ;; This function uses a non-reentrant model
  6960 ;;
  6961                           
  6962                           	psect	text30
  6963  002196                     __ptext30:
  6964                           	opt stack 0
  6965  002196                     _dir_rewind:
  6966                           	opt stack 22
  6967                           
  6968                           ;pff.c: 441: DWORD clst;
  6969                           ;pff.c: 442: FATFS *fs = FatFs;
  6970                           
  6971                           ;incstack = 0
  6972  002196  C035  F06F         	movff	_FatFs,dir_rewind@fs
  6973  00219A  C036  F070         	movff	_FatFs+1,dir_rewind@fs+1
  6974                           
  6975                           ;pff.c: 445: dj->index = 0;
  6976  00219E  C065  FFD9         	movff	dir_rewind@dj,fsr2l
  6977  0021A2  C066  FFDA         	movff	dir_rewind@dj+1,fsr2h
  6978  0021A6  0E00               	movlw	0
  6979  0021A8  6EDE               	movwf	postinc2,c
  6980  0021AA  0E00               	movlw	0
  6981  0021AC  6EDD               	movwf	postdec2,c
  6982                           
  6983                           ;pff.c: 446: clst = dj->sclust;
  6984  0021AE  0100               	movlb	0	; () banked
  6985  0021B0  EE20 F004          	lfsr	2,4
  6986  0021B4  5165               	movf	dir_rewind@dj& (0+255),w,b
  6987  0021B6  26D9               	addwf	fsr2l,f,c
  6988  0021B8  5166               	movf	(dir_rewind@dj+1)& (0+255),w,b
  6989  0021BA  22DA               	addwfc	fsr2h,f,c
  6990  0021BC  CFDE F071          	movff	postinc2,dir_rewind@clst
  6991  0021C0  CFDE F072          	movff	postinc2,dir_rewind@clst+1
  6992  0021C4  CFDE F073          	movff	postinc2,dir_rewind@clst+2
  6993  0021C8  CFDE F074          	movff	postinc2,dir_rewind@clst+3
  6994                           
  6995                           ; BSR set to: 0
  6996                           ;pff.c: 447: if (clst == 1 || clst >= fs->n_fatent)
  6997  0021CC  0571               	decf	dir_rewind@clst& (0+255),w,b
  6998  0021CE  1172               	iorwf	(dir_rewind@clst+1)& (0+255),w,b
  6999  0021D0  1173               	iorwf	(dir_rewind@clst+2)& (0+255),w,b
  7000  0021D2  1174               	iorwf	(dir_rewind@clst+3)& (0+255),w,b
  7001  0021D4  B4D8               	btfsc	status,2,c
  7002  0021D6  D010               	goto	u6970
  7003                           
  7004                           ; BSR set to: 0
  7005  0021D8  EE20 F006          	lfsr	2,6
  7006  0021DC  516F               	movf	dir_rewind@fs& (0+255),w,b
  7007  0021DE  26D9               	addwf	fsr2l,f,c
  7008  0021E0  5170               	movf	(dir_rewind@fs+1)& (0+255),w,b
  7009  0021E2  22DA               	addwfc	fsr2h,f,c
  7010  0021E4  50DE               	movf	postinc2,w,c
  7011  0021E6  5D71               	subwf	dir_rewind@clst& (0+255),w,b
  7012  0021E8  50DE               	movf	postinc2,w,c
  7013  0021EA  5972               	subwfb	(dir_rewind@clst+1)& (0+255),w,b
  7014  0021EC  50DE               	movf	postinc2,w,c
  7015  0021EE  5973               	subwfb	(dir_rewind@clst+2)& (0+255),w,b
  7016  0021F0  50DE               	movf	postinc2,w,c
  7017  0021F2  5974               	subwfb	(dir_rewind@clst+3)& (0+255),w,b
  7018  0021F4  A0D8               	btfss	status,0,c
  7019  0021F6  D002               	goto	l854
  7020  0021F8                     u6970:
  7021                           
  7022                           ; BSR set to: 0
  7023                           ;pff.c: 448: return FR_DISK_ERR;
  7024                           
  7025                           ; BSR set to: 0
  7026  0021F8  0E01               	movlw	1
  7027                           
  7028                           ; BSR set to: 0
  7029  0021FA  0012               	return	
  7030  0021FC                     l854:
  7031                           
  7032                           ; BSR set to: 0
  7033                           
  7034                           ; BSR set to: 0
  7035  0021FC  5171               	movf	dir_rewind@clst& (0+255),w,b
  7036  0021FE  1172               	iorwf	(dir_rewind@clst+1)& (0+255),w,b
  7037  002200  1173               	iorwf	(dir_rewind@clst+2)& (0+255),w,b
  7038  002202  1174               	iorwf	(dir_rewind@clst+3)& (0+255),w,b
  7039  002204  A4D8               	btfss	status,2,c
  7040  002206  D016               	goto	l858
  7041                           
  7042                           ; BSR set to: 0
  7043  002208  C06F  FFD9         	movff	dir_rewind@fs,fsr2l
  7044  00220C  C070  FFDA         	movff	dir_rewind@fs+1,fsr2h
  7045  002210  0E03               	movlw	3
  7046  002212  18DE               	xorwf	postinc2,w,c
  7047  002214  A4D8               	btfss	status,2,c
  7048  002216  D00E               	goto	l858
  7049                           
  7050                           ; BSR set to: 0
  7051                           ;pff.c: 450: clst = (DWORD)fs->dirbase;
  7052                           
  7053                           ; BSR set to: 0
  7054  002218  EE20 F00E          	lfsr	2,14
  7055  00221C  516F               	movf	dir_rewind@fs& (0+255),w,b
  7056  00221E  26D9               	addwf	fsr2l,f,c
  7057  002220  5170               	movf	(dir_rewind@fs+1)& (0+255),w,b
  7058  002222  22DA               	addwfc	fsr2h,f,c
  7059  002224  CFDE F071          	movff	postinc2,dir_rewind@clst
  7060  002228  CFDE F072          	movff	postinc2,dir_rewind@clst+1
  7061  00222C  CFDE F073          	movff	postinc2,dir_rewind@clst+2
  7062  002230  CFDE F074          	movff	postinc2,dir_rewind@clst+3
  7063  002234                     l858:
  7064                           
  7065                           ; BSR set to: 0
  7066                           ;pff.c: 452: dj->sect = (0 || clst) ? clust2sect(clst) : fs->dirbase;
  7067  002234  EE20 F008          	lfsr	2,8
  7068  002238  5165               	movf	dir_rewind@dj& (0+255),w,b
  7069  00223A  26D9               	addwf	fsr2l,f,c
  7070  00223C  5166               	movf	(dir_rewind@dj+1)& (0+255),w,b
  7071  00223E  22DA               	addwfc	fsr2h,f,c
  7072  002240  C071  FFDE         	movff	dir_rewind@clst,postinc2
  7073  002244  C072  FFDE         	movff	dir_rewind@clst+1,postinc2
  7074  002248  C073  FFDE         	movff	dir_rewind@clst+2,postinc2
  7075  00224C  C074  FFDE         	movff	dir_rewind@clst+3,postinc2
  7076                           
  7077                           ; BSR set to: 0
  7078  002250  5171               	movf	dir_rewind@clst& (0+255),w,b
  7079  002252  1172               	iorwf	(dir_rewind@clst+1)& (0+255),w,b
  7080  002254  1173               	iorwf	(dir_rewind@clst+2)& (0+255),w,b
  7081  002256  1174               	iorwf	(dir_rewind@clst+3)& (0+255),w,b
  7082  002258  A4D8               	btfss	status,2,c
  7083  00225A  D00F               	goto	l862
  7084                           
  7085                           ; BSR set to: 0
  7086  00225C  EE20 F00E          	lfsr	2,14
  7087  002260  516F               	movf	dir_rewind@fs& (0+255),w,b
  7088  002262  26D9               	addwf	fsr2l,f,c
  7089  002264  5170               	movf	(dir_rewind@fs+1)& (0+255),w,b
  7090  002266  22DA               	addwfc	fsr2h,f,c
  7091  002268  CFDE F06B          	movff	postinc2,_dir_rewind$1957
  7092  00226C  CFDE F06C          	movff	postinc2,_dir_rewind$1957+1
  7093  002270  CFDE F06D          	movff	postinc2,_dir_rewind$1957+2
  7094  002274  CFDE F06E          	movff	postinc2,_dir_rewind$1957+3
  7095  002278  D012               	goto	l864
  7096  00227A                     l862:
  7097                           
  7098                           ; BSR set to: 0
  7099                           
  7100                           ; BSR set to: 0
  7101  00227A  C071  F026         	movff	dir_rewind@clst,clust2sect@clst
  7102  00227E  C072  F027         	movff	dir_rewind@clst+1,clust2sect@clst+1
  7103  002282  C073  F028         	movff	dir_rewind@clst+2,clust2sect@clst+2
  7104  002286  C074  F029         	movff	dir_rewind@clst+3,clust2sect@clst+3
  7105  00228A  ECC4  F013         	call	_clust2sect	;wreg free
  7106  00228E  C026  F06B         	movff	?_clust2sect,_dir_rewind$1957
  7107  002292  C027  F06C         	movff	?_clust2sect+1,_dir_rewind$1957+1
  7108  002296  C028  F06D         	movff	?_clust2sect+2,_dir_rewind$1957+2
  7109  00229A  C029  F06E         	movff	?_clust2sect+3,_dir_rewind$1957+3
  7110  00229E                     l864:
  7111  00229E  0100               	movlb	0	; () banked
  7112  0022A0  EE20 F00C          	lfsr	2,12
  7113  0022A4  5165               	movf	dir_rewind@dj& (0+255),w,b
  7114  0022A6  26D9               	addwf	fsr2l,f,c
  7115  0022A8  5166               	movf	(dir_rewind@dj+1)& (0+255),w,b
  7116  0022AA  22DA               	addwfc	fsr2h,f,c
  7117  0022AC  C06B  FFDE         	movff	_dir_rewind$1957,postinc2
  7118  0022B0  C06C  FFDE         	movff	_dir_rewind$1957+1,postinc2
  7119  0022B4  C06D  FFDE         	movff	_dir_rewind$1957+2,postinc2
  7120  0022B8  C06E  FFDE         	movff	_dir_rewind$1957+3,postinc2
  7121                           
  7122                           ; BSR set to: 0
  7123                           ;pff.c: 454: return FR_OK;
  7124  0022BC  0E00               	movlw	0
  7125  0022BE  0012               	return	
  7126  0022C0                     __end_of_dir_rewind:
  7127                           	opt stack 0
  7128                           tosu	equ	0xFFF
  7129                           tosh	equ	0xFFE
  7130                           tosl	equ	0xFFD
  7131                           pclath	equ	0xFFA
  7132                           tblptru	equ	0xFF8
  7133                           tblptrh	equ	0xFF7
  7134                           tblptrl	equ	0xFF6
  7135                           tablat	equ	0xFF5
  7136                           prodh	equ	0xFF4
  7137                           prodl	equ	0xFF3
  7138                           intcon	equ	0xFF2
  7139                           intcon2	equ	0xFF1
  7140                           intcon3	equ	0xFF0
  7141                           postinc0	equ	0xFEE
  7142                           wreg	equ	0xFE8
  7143                           indf1	equ	0xFE7
  7144                           postinc1	equ	0xFE6
  7145                           postdec1	equ	0xFE5
  7146                           fsr1h	equ	0xFE2
  7147                           fsr1l	equ	0xFE1
  7148                           indf2	equ	0xFDF
  7149                           postinc2	equ	0xFDE
  7150                           postdec2	equ	0xFDD
  7151                           plusw2	equ	0xFDB
  7152                           fsr2h	equ	0xFDA
  7153                           fsr2l	equ	0xFD9
  7154                           status	equ	0xFD8
  7155                           
  7156 ;; *************** function _dir_next *****************
  7157 ;; Defined at:
  7158 ;;		line 465 in file "pff.c"
  7159 ;; Parameters:    Size  Location     Type
  7160 ;;  dj              2   58[BANK0 ] PTR struct .
  7161 ;;		 -> pf_open@dj(16), 
  7162 ;; Auto vars:     Size  Location     Type
  7163 ;;  clst            4   69[BANK0 ] unsigned long 
  7164 ;;  i               2   73[BANK0 ] unsigned short 
  7165 ;;  fs              2   67[BANK0 ] PTR struct .
  7166 ;;		 -> NULL(0), SDCard@fs(42), 
  7167 ;; Return value:  Size  Location     Type
  7168 ;;                  1    wreg      enum E43
  7169 ;; Registers used:
  7170 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7171 ;; Tracked objects:
  7172 ;;		On entry : 0/0
  7173 ;;		On exit  : 0/0
  7174 ;;		Unchanged: 0/0
  7175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7176 ;;      Params:         0       2       0       0       0       0       0       0       0
  7177 ;;      Locals:         0       8       0       0       0       0       0       0       0
  7178 ;;      Temps:          0       7       0       0       0       0       0       0       0
  7179 ;;      Totals:         0      17       0       0       0       0       0       0       0
  7180 ;;Total ram usage:       17 bytes
  7181 ;; Hardware stack levels used:    1
  7182 ;; Hardware stack levels required when called:    8
  7183 ;; This function calls:
  7184 ;;		_clust2sect
  7185 ;;		_get_fat
  7186 ;; This function is called by:
  7187 ;;		_dir_find
  7188 ;;		_dir_read
  7189 ;;		_pf_readdir
  7190 ;; This function uses a non-reentrant model
  7191 ;;
  7192                           
  7193                           	psect	text31
  7194  00181C                     __ptext31:
  7195                           	opt stack 0
  7196  00181C                     _dir_next:
  7197                           	opt stack 17
  7198                           
  7199                           ;pff.c: 469: DWORD clst;
  7200                           ;pff.c: 470: WORD i;
  7201                           ;pff.c: 471: FATFS *fs = FatFs;
  7202                           
  7203                           ; BSR set to: 0
  7204                           ;incstack = 0
  7205  00181C  C035  F0A3         	movff	_FatFs,dir_next@fs
  7206  001820  C036  F0A4         	movff	_FatFs+1,dir_next@fs+1
  7207                           
  7208                           ;pff.c: 474: i = dj->index + 1;
  7209  001824  C09A  FFD9         	movff	dir_next@dj,fsr2l
  7210  001828  C09B  FFDA         	movff	dir_next@dj+1,fsr2h
  7211  00182C  CFDE F09C          	movff	postinc2,??_dir_next
  7212  001830  CFDD F09D          	movff	postdec2,??_dir_next+1
  7213  001834  0E01               	movlw	1
  7214  001836  0100               	movlb	0	; () banked
  7215  001838  259C               	addwf	??_dir_next& (0+255),w,b
  7216  00183A  6FA9               	movwf	dir_next@i& (0+255),b
  7217  00183C  0E00               	movlw	0
  7218  00183E  219D               	addwfc	(??_dir_next+1)& (0+255),w,b
  7219  001840  6FAA               	movwf	(dir_next@i+1)& (0+255),b
  7220                           
  7221                           ; BSR set to: 0
  7222                           ;pff.c: 475: if (!i || !dj->sect)
  7223  001842  51A9               	movf	dir_next@i& (0+255),w,b
  7224  001844  11AA               	iorwf	(dir_next@i+1)& (0+255),w,b
  7225  001846  B4D8               	btfsc	status,2,c
  7226  001848  D00C               	goto	u7020
  7227                           
  7228                           ; BSR set to: 0
  7229  00184A  EE20 F00C          	lfsr	2,12
  7230  00184E  519A               	movf	dir_next@dj& (0+255),w,b
  7231  001850  26D9               	addwf	fsr2l,f,c
  7232  001852  519B               	movf	(dir_next@dj+1)& (0+255),w,b
  7233  001854  22DA               	addwfc	fsr2h,f,c
  7234  001856  50DE               	movf	postinc2,w,c
  7235  001858  10DE               	iorwf	postinc2,w,c
  7236  00185A  10DE               	iorwf	postinc2,w,c
  7237  00185C  10DE               	iorwf	postinc2,w,c
  7238  00185E  A4D8               	btfss	status,2,c
  7239  001860  D002               	goto	l867
  7240  001862                     u7020:
  7241                           
  7242                           ; BSR set to: 0
  7243                           ;pff.c: 476: return FR_NO_FILE;
  7244                           
  7245                           ; BSR set to: 0
  7246  001862  0E03               	movlw	3
  7247                           
  7248                           ; BSR set to: 0
  7249  001864  0012               	return	
  7250  001866                     l867:
  7251                           
  7252                           ; BSR set to: 0
  7253                           ;pff.c: 478: if (!(i % 16)) {
  7254                           
  7255                           ; BSR set to: 0
  7256  001866  0E0F               	movlw	15
  7257  001868  15A9               	andwf	dir_next@i& (0+255),w,b
  7258  00186A  6F9C               	movwf	??_dir_next& (0+255),b
  7259  00186C  0E00               	movlw	0
  7260  00186E  15AA               	andwf	(dir_next@i+1)& (0+255),w,b
  7261  001870  6F9D               	movwf	(??_dir_next+1)& (0+255),b
  7262  001872  519C               	movf	??_dir_next& (0+255),w,b
  7263  001874  119D               	iorwf	(??_dir_next+1)& (0+255),w,b
  7264  001876  A4D8               	btfss	status,2,c
  7265  001878  D0A5               	goto	l875
  7266                           
  7267                           ; BSR set to: 0
  7268                           ;pff.c: 479: dj->sect++;
  7269  00187A  EE20 F00C          	lfsr	2,12
  7270  00187E  519A               	movf	dir_next@dj& (0+255),w,b
  7271  001880  26D9               	addwf	fsr2l,f,c
  7272  001882  519B               	movf	(dir_next@dj+1)& (0+255),w,b
  7273  001884  22DA               	addwfc	fsr2h,f,c
  7274  001886  2ADE               	incf	postinc2,f,c
  7275  001888  0E00               	movlw	0
  7276  00188A  22DE               	addwfc	postinc2,f,c
  7277  00188C  22DE               	addwfc	postinc2,f,c
  7278  00188E  22DE               	addwfc	postinc2,f,c
  7279                           
  7280                           ;pff.c: 481: if (dj->clust == 0) {
  7281  001890  EE20 F008          	lfsr	2,8
  7282  001894  519A               	movf	dir_next@dj& (0+255),w,b
  7283  001896  26D9               	addwf	fsr2l,f,c
  7284  001898  519B               	movf	(dir_next@dj+1)& (0+255),w,b
  7285  00189A  22DA               	addwfc	fsr2h,f,c
  7286  00189C  50DE               	movf	postinc2,w,c
  7287  00189E  10DE               	iorwf	postinc2,w,c
  7288  0018A0  10DE               	iorwf	postinc2,w,c
  7289  0018A2  10DE               	iorwf	postinc2,w,c
  7290  0018A4  A4D8               	btfss	status,2,c
  7291  0018A6  D00E               	goto	l872
  7292                           
  7293                           ; BSR set to: 0
  7294                           ;pff.c: 482: if (i >= fs->n_rootdir)
  7295  0018A8  EE20 F004          	lfsr	2,4
  7296  0018AC  51A3               	movf	dir_next@fs& (0+255),w,b
  7297  0018AE  26D9               	addwf	fsr2l,f,c
  7298  0018B0  51A4               	movf	(dir_next@fs+1)& (0+255),w,b
  7299  0018B2  22DA               	addwfc	fsr2h,f,c
  7300  0018B4  50DE               	movf	postinc2,w,c
  7301  0018B6  5DA9               	subwf	dir_next@i& (0+255),w,b
  7302  0018B8  50DE               	movf	postinc2,w,c
  7303  0018BA  59AA               	subwfb	(dir_next@i+1)& (0+255),w,b
  7304  0018BC  A0D8               	btfss	status,0,c
  7305  0018BE  D082               	goto	l875
  7306                           
  7307                           ; BSR set to: 0
  7308                           ;pff.c: 483: return FR_NO_FILE;
  7309  0018C0  0E03               	movlw	3
  7310                           
  7311                           ; BSR set to: 0
  7312  0018C2  0012               	return	
  7313  0018C4                     l872:
  7314                           
  7315                           ; BSR set to: 0
  7316                           ;pff.c: 485: else {
  7317                           ;pff.c: 486: if (((i / 16) & (fs->csize - 1)) == 0) {
  7318                           
  7319                           ; BSR set to: 0
  7320  0018C4  C0A9  F09C         	movff	dir_next@i,??_dir_next
  7321  0018C8  C0AA  F09D         	movff	dir_next@i+1,??_dir_next+1
  7322  0018CC  0E04               	movlw	4
  7323  0018CE  6F9E               	movwf	(??_dir_next+2)& (0+255),b
  7324  0018D0                     u7065:
  7325  0018D0  90D8               	bcf	status,0,c
  7326  0018D2  339D               	rrcf	(??_dir_next+1)& (0+255),f,b
  7327  0018D4  339C               	rrcf	??_dir_next& (0+255),f,b
  7328  0018D6  2F9E               	decfsz	(??_dir_next+2)& (0+255),f,b
  7329  0018D8  D7FB               	goto	u7065
  7330  0018DA  0EFF               	movlw	255
  7331  0018DC  6F9F               	movwf	(??_dir_next+3)& (0+255),b
  7332  0018DE  0EFF               	movlw	255
  7333  0018E0  6FA0               	movwf	(??_dir_next+4)& (0+255),b
  7334  0018E2  EE20 F002          	lfsr	2,2
  7335  0018E6  51A3               	movf	dir_next@fs& (0+255),w,b
  7336  0018E8  26D9               	addwf	fsr2l,f,c
  7337  0018EA  51A4               	movf	(dir_next@fs+1)& (0+255),w,b
  7338  0018EC  22DA               	addwfc	fsr2h,f,c
  7339  0018EE  50DF               	movf	indf2,w,c
  7340  0018F0  6FA1               	movwf	(??_dir_next+5)& (0+255),b
  7341  0018F2  6BA2               	clrf	(??_dir_next+6)& (0+255),b
  7342  0018F4  519F               	movf	(??_dir_next+3)& (0+255),w,b
  7343  0018F6  27A1               	addwf	(??_dir_next+5)& (0+255),f,b
  7344  0018F8  51A0               	movf	(??_dir_next+4)& (0+255),w,b
  7345  0018FA  23A2               	addwfc	(??_dir_next+6)& (0+255),f,b
  7346  0018FC  519C               	movf	??_dir_next& (0+255),w,b
  7347  0018FE  17A1               	andwf	(??_dir_next+5)& (0+255),f,b
  7348  001900  519D               	movf	(??_dir_next+1)& (0+255),w,b
  7349  001902  17A2               	andwf	(??_dir_next+6)& (0+255),f,b
  7350  001904  51A1               	movf	(??_dir_next+5)& (0+255),w,b
  7351  001906  11A2               	iorwf	(??_dir_next+6)& (0+255),w,b
  7352  001908  A4D8               	btfss	status,2,c
  7353  00190A  D05C               	goto	l875
  7354                           
  7355                           ; BSR set to: 0
  7356                           ;pff.c: 487: clst = get_fat(dj->clust);
  7357  00190C  EE20 F008          	lfsr	2,8
  7358  001910  519A               	movf	dir_next@dj& (0+255),w,b
  7359  001912  26D9               	addwf	fsr2l,f,c
  7360  001914  519B               	movf	(dir_next@dj+1)& (0+255),w,b
  7361  001916  22DA               	addwfc	fsr2h,f,c
  7362  001918  CFDE F072          	movff	postinc2,get_fat@clst
  7363  00191C  CFDE F073          	movff	postinc2,get_fat@clst+1
  7364  001920  CFDE F074          	movff	postinc2,get_fat@clst+2
  7365  001924  CFDE F075          	movff	postinc2,get_fat@clst+3
  7366  001928  EC82  F005         	call	_get_fat	;wreg free
  7367  00192C  C072  F0A5         	movff	?_get_fat,dir_next@clst
  7368  001930  C073  F0A6         	movff	?_get_fat+1,dir_next@clst+1
  7369  001934  C074  F0A7         	movff	?_get_fat+2,dir_next@clst+2
  7370  001938  C075  F0A8         	movff	?_get_fat+3,dir_next@clst+3
  7371                           
  7372                           ;pff.c: 488: if (clst <= 1) return FR_DISK_ERR;
  7373  00193C  0100               	movlb	0	; () banked
  7374  00193E  51A8               	movf	(dir_next@clst+3)& (0+255),w,b
  7375  001940  11A7               	iorwf	(dir_next@clst+2)& (0+255),w,b
  7376  001942  11A6               	iorwf	(dir_next@clst+1)& (0+255),w,b
  7377  001944  E106               	bnz	l6428
  7378  001946  0E02               	movlw	2
  7379  001948  5DA5               	subwf	dir_next@clst& (0+255),w,b
  7380  00194A  B0D8               	btfsc	status,0,c
  7381  00194C  D002               	goto	l876
  7382                           
  7383                           ; BSR set to: 0
  7384  00194E  0E01               	movlw	1
  7385                           
  7386                           ; BSR set to: 0
  7387  001950  0012               	return	
  7388  001952                     l876:
  7389  001952                     l6428:
  7390                           
  7391                           ; BSR set to: 0
  7392                           ;pff.c: 489: if (clst >= fs->n_fatent)
  7393  001952  EE20 F006          	lfsr	2,6
  7394  001956  51A3               	movf	dir_next@fs& (0+255),w,b
  7395  001958  26D9               	addwf	fsr2l,f,c
  7396  00195A  51A4               	movf	(dir_next@fs+1)& (0+255),w,b
  7397  00195C  22DA               	addwfc	fsr2h,f,c
  7398  00195E  50DE               	movf	postinc2,w,c
  7399  001960  5DA5               	subwf	dir_next@clst& (0+255),w,b
  7400  001962  50DE               	movf	postinc2,w,c
  7401  001964  59A6               	subwfb	(dir_next@clst+1)& (0+255),w,b
  7402  001966  50DE               	movf	postinc2,w,c
  7403  001968  59A7               	subwfb	(dir_next@clst+2)& (0+255),w,b
  7404  00196A  50DE               	movf	postinc2,w,c
  7405  00196C  59A8               	subwfb	(dir_next@clst+3)& (0+255),w,b
  7406  00196E  A0D8               	btfss	status,0,c
  7407  001970  D002               	goto	l877
  7408                           
  7409                           ; BSR set to: 0
  7410                           ;pff.c: 490: return FR_NO_FILE;
  7411  001972  0E03               	movlw	3
  7412                           
  7413                           ; BSR set to: 0
  7414  001974  0012               	return	
  7415  001976                     l877:
  7416                           
  7417                           ; BSR set to: 0
  7418                           ;pff.c: 491: dj->clust = clst;
  7419                           
  7420                           ; BSR set to: 0
  7421  001976  EE20 F008          	lfsr	2,8
  7422  00197A  519A               	movf	dir_next@dj& (0+255),w,b
  7423  00197C  26D9               	addwf	fsr2l,f,c
  7424  00197E  519B               	movf	(dir_next@dj+1)& (0+255),w,b
  7425  001980  22DA               	addwfc	fsr2h,f,c
  7426  001982  C0A5  FFDE         	movff	dir_next@clst,postinc2
  7427  001986  C0A6  FFDE         	movff	dir_next@clst+1,postinc2
  7428  00198A  C0A7  FFDE         	movff	dir_next@clst+2,postinc2
  7429  00198E  C0A8  FFDE         	movff	dir_next@clst+3,postinc2
  7430                           
  7431                           ; BSR set to: 0
  7432                           ;pff.c: 492: dj->sect = clust2sect(clst);
  7433  001992  C0A5  F026         	movff	dir_next@clst,clust2sect@clst
  7434  001996  C0A6  F027         	movff	dir_next@clst+1,clust2sect@clst+1
  7435  00199A  C0A7  F028         	movff	dir_next@clst+2,clust2sect@clst+2
  7436  00199E  C0A8  F029         	movff	dir_next@clst+3,clust2sect@clst+3
  7437  0019A2  ECC4  F013         	call	_clust2sect	;wreg free
  7438  0019A6  0100               	movlb	0	; () banked
  7439  0019A8  EE20 F00C          	lfsr	2,12
  7440  0019AC  519A               	movf	dir_next@dj& (0+255),w,b
  7441  0019AE  26D9               	addwf	fsr2l,f,c
  7442  0019B0  519B               	movf	(dir_next@dj+1)& (0+255),w,b
  7443  0019B2  22DA               	addwfc	fsr2h,f,c
  7444  0019B4  C026  FFDE         	movff	?_clust2sect,postinc2
  7445  0019B8  C027  FFDE         	movff	?_clust2sect+1,postinc2
  7446  0019BC  C028  FFDE         	movff	?_clust2sect+2,postinc2
  7447  0019C0  C029  FFDE         	movff	?_clust2sect+3,postinc2
  7448  0019C4                     l875:
  7449                           
  7450                           ; BSR set to: 0
  7451                           ;pff.c: 493: }
  7452                           ;pff.c: 494: }
  7453                           ;pff.c: 495: }
  7454                           ;pff.c: 497: dj->index = i;
  7455                           
  7456                           ; BSR set to: 0
  7457                           
  7458                           ; BSR set to: 0
  7459                           
  7460                           ; BSR set to: 0
  7461  0019C4  C09A  FFD9         	movff	dir_next@dj,fsr2l
  7462  0019C8  C09B  FFDA         	movff	dir_next@dj+1,fsr2h
  7463  0019CC  C0A9  FFDE         	movff	dir_next@i,postinc2
  7464  0019D0  C0AA  FFDD         	movff	dir_next@i+1,postdec2
  7465                           
  7466                           ; BSR set to: 0
  7467                           ;pff.c: 499: return FR_OK;
  7468  0019D4  0E00               	movlw	0
  7469  0019D6  0012               	return	
  7470  0019D8                     __end_of_dir_next:
  7471                           	opt stack 0
  7472                           tosu	equ	0xFFF
  7473                           tosh	equ	0xFFE
  7474                           tosl	equ	0xFFD
  7475                           pclath	equ	0xFFA
  7476                           tblptru	equ	0xFF8
  7477                           tblptrh	equ	0xFF7
  7478                           tblptrl	equ	0xFF6
  7479                           tablat	equ	0xFF5
  7480                           prodh	equ	0xFF4
  7481                           prodl	equ	0xFF3
  7482                           intcon	equ	0xFF2
  7483                           intcon2	equ	0xFF1
  7484                           intcon3	equ	0xFF0
  7485                           postinc0	equ	0xFEE
  7486                           wreg	equ	0xFE8
  7487                           indf1	equ	0xFE7
  7488                           postinc1	equ	0xFE6
  7489                           postdec1	equ	0xFE5
  7490                           fsr1h	equ	0xFE2
  7491                           fsr1l	equ	0xFE1
  7492                           indf2	equ	0xFDF
  7493                           postinc2	equ	0xFDE
  7494                           postdec2	equ	0xFDD
  7495                           plusw2	equ	0xFDB
  7496                           fsr2h	equ	0xFDA
  7497                           fsr2l	equ	0xFD9
  7498                           status	equ	0xFD8
  7499                           
  7500 ;; *************** function _get_fat *****************
  7501 ;; Defined at:
  7502 ;;		line 350 in file "pff.c"
  7503 ;; Parameters:    Size  Location     Type
  7504 ;;  clst            4   18[BANK0 ] unsigned long 
  7505 ;; Auto vars:     Size  Location     Type
  7506 ;;  bc              2   54[BANK0 ] unsigned int 
  7507 ;;  ofs             2   48[BANK0 ] unsigned int 
  7508 ;;  wc              2   46[BANK0 ] unsigned int 
  7509 ;;  buf             4   50[BANK0 ] unsigned char [4]
  7510 ;;  fs              2   56[BANK0 ] PTR struct .
  7511 ;;		 -> NULL(0), SDCard@fs(42), 
  7512 ;; Return value:  Size  Location     Type
  7513 ;;                  4   18[BANK0 ] unsigned long 
  7514 ;; Registers used:
  7515 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7516 ;; Tracked objects:
  7517 ;;		On entry : 0/0
  7518 ;;		On exit  : 0/0
  7519 ;;		Unchanged: 0/0
  7520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7521 ;;      Params:         0       4       0       0       0       0       0       0       0
  7522 ;;      Locals:         0      14       0       0       0       0       0       0       0
  7523 ;;      Temps:          0      22       0       0       0       0       0       0       0
  7524 ;;      Totals:         0      40       0       0       0       0       0       0       0
  7525 ;;Total ram usage:       40 bytes
  7526 ;; Hardware stack levels used:    1
  7527 ;; Hardware stack levels required when called:    7
  7528 ;; This function calls:
  7529 ;;		_disk_readp
  7530 ;; This function is called by:
  7531 ;;		_dir_next
  7532 ;;		_pf_read
  7533 ;;		_pf_write
  7534 ;;		_pf_lseek
  7535 ;; This function uses a non-reentrant model
  7536 ;;
  7537                           
  7538                           	psect	text32
  7539  000B04                     __ptext32:
  7540                           	opt stack 0
  7541  000B04                     _get_fat:
  7542                           	opt stack 20
  7543                           
  7544                           ;pff.c: 354: BYTE buf[4];
  7545                           ;pff.c: 355: FATFS *fs = FatFs;
  7546                           
  7547                           ; BSR set to: 0
  7548                           ;incstack = 0
  7549  000B04  C035  F098         	movff	_FatFs,get_fat@fs
  7550  000B08  C036  F099         	movff	_FatFs+1,get_fat@fs+1
  7551                           
  7552                           ;pff.c: 357: if (clst < 2 || clst >= fs->n_fatent)
  7553  000B0C  0100               	movlb	0	; () banked
  7554  000B0E  5175               	movf	(get_fat@clst+3)& (0+255),w,b
  7555  000B10  1174               	iorwf	(get_fat@clst+2)& (0+255),w,b
  7556  000B12  1173               	iorwf	(get_fat@clst+1)& (0+255),w,b
  7557  000B14  E104               	bnz	u6800
  7558  000B16  0E02               	movlw	2
  7559  000B18  5D72               	subwf	get_fat@clst& (0+255),w,b
  7560  000B1A  A0D8               	btfss	status,0,c
  7561  000B1C  D010               	goto	u6810
  7562  000B1E                     u6800:
  7563                           
  7564                           ; BSR set to: 0
  7565  000B1E  EE20 F006          	lfsr	2,6
  7566  000B22  5198               	movf	get_fat@fs& (0+255),w,b
  7567  000B24  26D9               	addwf	fsr2l,f,c
  7568  000B26  5199               	movf	(get_fat@fs+1)& (0+255),w,b
  7569  000B28  22DA               	addwfc	fsr2h,f,c
  7570  000B2A  50DE               	movf	postinc2,w,c
  7571  000B2C  5D72               	subwf	get_fat@clst& (0+255),w,b
  7572  000B2E  50DE               	movf	postinc2,w,c
  7573  000B30  5973               	subwfb	(get_fat@clst+1)& (0+255),w,b
  7574  000B32  50DE               	movf	postinc2,w,c
  7575  000B34  5974               	subwfb	(get_fat@clst+2)& (0+255),w,b
  7576  000B36  50DE               	movf	postinc2,w,c
  7577  000B38  5975               	subwfb	(get_fat@clst+3)& (0+255),w,b
  7578  000B3A  A0D8               	btfss	status,0,c
  7579  000B3C  D1BD               	goto	l826
  7580  000B3E                     u6810:
  7581                           
  7582                           ; BSR set to: 0
  7583                           ;pff.c: 358: return 1;
  7584                           
  7585                           ; BSR set to: 0
  7586  000B3E  0E01               	movlw	1
  7587  000B40  6F72               	movwf	?_get_fat& (0+255),b
  7588  000B42  0E00               	movlw	0
  7589  000B44  6F73               	movwf	(?_get_fat+1)& (0+255),b
  7590  000B46  0E00               	movlw	0
  7591  000B48  6F74               	movwf	(?_get_fat+2)& (0+255),b
  7592  000B4A  0E00               	movlw	0
  7593  000B4C  6F75               	movwf	(?_get_fat+3)& (0+255),b
  7594                           
  7595                           ; BSR set to: 0
  7596  000B4E  0012               	return	
  7597  000B50                     l827:
  7598                           
  7599                           ; BSR set to: 0
  7600                           ;pff.c: 363: UINT wc, bc, ofs;
  7601                           ;pff.c: 365: bc = (UINT)clst; bc += bc / 2;
  7602  000B50  C072  F096         	movff	get_fat@clst,get_fat@bc
  7603  000B54  C073  F097         	movff	get_fat@clst+1,get_fat@bc+1
  7604                           
  7605                           ; BSR set to: 0
  7606  000B58  90D8               	bcf	status,0,c
  7607  000B5A  3197               	rrcf	(get_fat@bc+1)& (0+255),w,b
  7608  000B5C  6F77               	movwf	(??_get_fat+1)& (0+255),b
  7609  000B5E  3196               	rrcf	get_fat@bc& (0+255),w,b
  7610  000B60  6F76               	movwf	??_get_fat& (0+255),b
  7611  000B62  5176               	movf	??_get_fat& (0+255),w,b
  7612  000B64  2796               	addwf	get_fat@bc& (0+255),f,b
  7613  000B66  5177               	movf	(??_get_fat+1)& (0+255),w,b
  7614  000B68  2397               	addwfc	(get_fat@bc+1)& (0+255),f,b
  7615                           
  7616                           ;pff.c: 366: ofs = bc % 512; bc /= 512;
  7617  000B6A  0EFF               	movlw	255
  7618  000B6C  1596               	andwf	get_fat@bc& (0+255),w,b
  7619  000B6E  6F90               	movwf	get_fat@ofs& (0+255),b
  7620  000B70  0E01               	movlw	1
  7621  000B72  1597               	andwf	(get_fat@bc+1)& (0+255),w,b
  7622  000B74  6F91               	movwf	(get_fat@ofs+1)& (0+255),b
  7623  000B76  0E09               	movlw	9
  7624  000B78  6F76               	movwf	??_get_fat& (0+255),b
  7625  000B7A                     u6825:
  7626  000B7A  90D8               	bcf	status,0,c
  7627  000B7C  3397               	rrcf	(get_fat@bc+1)& (0+255),f,b
  7628  000B7E  3396               	rrcf	get_fat@bc& (0+255),f,b
  7629  000B80  2F76               	decfsz	??_get_fat& (0+255),f,b
  7630  000B82  D7FB               	goto	u6825
  7631                           
  7632                           ;pff.c: 367: if (ofs != 511) {
  7633  000B84  2990               	incf	get_fat@ofs& (0+255),w,b
  7634  000B86  E103               	bnz	u6830
  7635  000B88  0591               	decf	(get_fat@ofs+1)& (0+255),w,b
  7636  000B8A  B4D8               	btfsc	status,2,c
  7637  000B8C  D02C               	goto	l828
  7638  000B8E                     u6830:
  7639                           
  7640                           ; BSR set to: 0
  7641                           ;pff.c: 368: if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
  7642  000B8E  0E92               	movlw	low get_fat@buf
  7643  000B90  6F60               	movwf	disk_readp@rd& (0+255),b
  7644  000B92  0E00               	movlw	high get_fat@buf
  7645  000B94  6F61               	movwf	(disk_readp@rd+1)& (0+255),b
  7646  000B96  EE20 F00A          	lfsr	2,10
  7647  000B9A  5198               	movf	get_fat@fs& (0+255),w,b
  7648  000B9C  26D9               	addwf	fsr2l,f,c
  7649  000B9E  5199               	movf	(get_fat@fs+1)& (0+255),w,b
  7650  000BA0  22DA               	addwfc	fsr2h,f,c
  7651  000BA2  CFDE F076          	movff	postinc2,??_get_fat
  7652  000BA6  CFDE F077          	movff	postinc2,??_get_fat+1
  7653  000BAA  CFDE F078          	movff	postinc2,??_get_fat+2
  7654  000BAE  CFDE F079          	movff	postinc2,??_get_fat+3
  7655  000BB2  5196               	movf	get_fat@bc& (0+255),w,b
  7656  000BB4  2576               	addwf	??_get_fat& (0+255),w,b
  7657  000BB6  6F62               	movwf	disk_readp@sector& (0+255),b
  7658  000BB8  5197               	movf	(get_fat@bc+1)& (0+255),w,b
  7659  000BBA  2177               	addwfc	(??_get_fat+1)& (0+255),w,b
  7660  000BBC  6F63               	movwf	(disk_readp@sector+1)& (0+255),b
  7661  000BBE  0E00               	movlw	0
  7662  000BC0  2178               	addwfc	(??_get_fat+2)& (0+255),w,b
  7663  000BC2  6F64               	movwf	(disk_readp@sector+2)& (0+255),b
  7664  000BC4  0E00               	movlw	0
  7665  000BC6  2179               	addwfc	(??_get_fat+3)& (0+255),w,b
  7666  000BC8  6F65               	movwf	(disk_readp@sector+3)& (0+255),b
  7667  000BCA  C090  F066         	movff	get_fat@ofs,disk_readp@offset
  7668  000BCE  C091  F067         	movff	get_fat@ofs+1,disk_readp@offset+1
  7669  000BD2  0E00               	movlw	0
  7670  000BD4  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  7671  000BD6  0E02               	movlw	2
  7672  000BD8  6F68               	movwf	disk_readp@count& (0+255),b
  7673  000BDA  EC3C  F009         	call	_disk_readp	;wreg free
  7674  000BDE  0900               	iorlw	0
  7675  000BE0  A4D8               	btfss	status,2,c
  7676  000BE2  D178               	goto	l830
  7677  000BE4  D061               	goto	l833
  7678  000BE6                     l828:
  7679                           
  7680                           ;pff.c: 370: if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
  7681  000BE6  0E92               	movlw	low get_fat@buf
  7682  000BE8  0100               	movlb	0	; () banked
  7683  000BEA  6F60               	movwf	disk_readp@rd& (0+255),b
  7684  000BEC  0E00               	movlw	high get_fat@buf
  7685  000BEE  6F61               	movwf	(disk_readp@rd+1)& (0+255),b
  7686  000BF0  EE20 F00A          	lfsr	2,10
  7687  000BF4  5198               	movf	get_fat@fs& (0+255),w,b
  7688  000BF6  26D9               	addwf	fsr2l,f,c
  7689  000BF8  5199               	movf	(get_fat@fs+1)& (0+255),w,b
  7690  000BFA  22DA               	addwfc	fsr2h,f,c
  7691  000BFC  CFDE F076          	movff	postinc2,??_get_fat
  7692  000C00  CFDE F077          	movff	postinc2,??_get_fat+1
  7693  000C04  CFDE F078          	movff	postinc2,??_get_fat+2
  7694  000C08  CFDE F079          	movff	postinc2,??_get_fat+3
  7695  000C0C  5196               	movf	get_fat@bc& (0+255),w,b
  7696  000C0E  2576               	addwf	??_get_fat& (0+255),w,b
  7697  000C10  6F62               	movwf	disk_readp@sector& (0+255),b
  7698  000C12  5197               	movf	(get_fat@bc+1)& (0+255),w,b
  7699  000C14  2177               	addwfc	(??_get_fat+1)& (0+255),w,b
  7700  000C16  6F63               	movwf	(disk_readp@sector+1)& (0+255),b
  7701  000C18  0E00               	movlw	0
  7702  000C1A  2178               	addwfc	(??_get_fat+2)& (0+255),w,b
  7703  000C1C  6F64               	movwf	(disk_readp@sector+2)& (0+255),b
  7704  000C1E  0E00               	movlw	0
  7705  000C20  2179               	addwfc	(??_get_fat+3)& (0+255),w,b
  7706  000C22  6F65               	movwf	(disk_readp@sector+3)& (0+255),b
  7707  000C24  0E01               	movlw	1
  7708  000C26  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
  7709  000C28  6966               	setf	disk_readp@offset& (0+255),b
  7710  000C2A  0E00               	movlw	0
  7711  000C2C  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  7712  000C2E  0E01               	movlw	1
  7713  000C30  6F68               	movwf	disk_readp@count& (0+255),b
  7714  000C32  EC3C  F009         	call	_disk_readp	;wreg free
  7715  000C36  0900               	iorlw	0
  7716  000C38  A4D8               	btfss	status,2,c
  7717  000C3A  D14C               	goto	l830
  7718                           
  7719                           ;pff.c: 371: if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
  7720  000C3C  0E93               	movlw	low (get_fat@buf+1)
  7721  000C3E  0100               	movlb	0	; () banked
  7722  000C40  6F60               	movwf	disk_readp@rd& (0+255),b
  7723  000C42  0E00               	movlw	high (get_fat@buf+1)
  7724  000C44  6F61               	movwf	(disk_readp@rd+1)& (0+255),b
  7725  000C46  EE20 F00A          	lfsr	2,10
  7726  000C4A  5198               	movf	get_fat@fs& (0+255),w,b
  7727  000C4C  26D9               	addwf	fsr2l,f,c
  7728  000C4E  5199               	movf	(get_fat@fs+1)& (0+255),w,b
  7729  000C50  22DA               	addwfc	fsr2h,f,c
  7730  000C52  CFDE F076          	movff	postinc2,??_get_fat
  7731  000C56  CFDE F077          	movff	postinc2,??_get_fat+1
  7732  000C5A  CFDE F078          	movff	postinc2,??_get_fat+2
  7733  000C5E  CFDE F079          	movff	postinc2,??_get_fat+3
  7734  000C62  5196               	movf	get_fat@bc& (0+255),w,b
  7735  000C64  2576               	addwf	??_get_fat& (0+255),w,b
  7736  000C66  6F7A               	movwf	(??_get_fat+4)& (0+255),b
  7737  000C68  5197               	movf	(get_fat@bc+1)& (0+255),w,b
  7738  000C6A  2177               	addwfc	(??_get_fat+1)& (0+255),w,b
  7739  000C6C  6F7B               	movwf	(??_get_fat+5)& (0+255),b
  7740  000C6E  0E00               	movlw	0
  7741  000C70  2178               	addwfc	(??_get_fat+2)& (0+255),w,b
  7742  000C72  6F7C               	movwf	(??_get_fat+6)& (0+255),b
  7743  000C74  0E00               	movlw	0
  7744  000C76  2179               	addwfc	(??_get_fat+3)& (0+255),w,b
  7745  000C78  6F7D               	movwf	(??_get_fat+7)& (0+255),b
  7746  000C7A  0E01               	movlw	1
  7747  000C7C  257A               	addwf	(??_get_fat+4)& (0+255),w,b
  7748  000C7E  6F62               	movwf	disk_readp@sector& (0+255),b
  7749  000C80  0E00               	movlw	0
  7750  000C82  217B               	addwfc	(??_get_fat+5)& (0+255),w,b
  7751  000C84  6F63               	movwf	(disk_readp@sector+1)& (0+255),b
  7752  000C86  0E00               	movlw	0
  7753  000C88  217C               	addwfc	(??_get_fat+6)& (0+255),w,b
  7754  000C8A  6F64               	movwf	(disk_readp@sector+2)& (0+255),b
  7755  000C8C  0E00               	movlw	0
  7756  000C8E  217D               	addwfc	(??_get_fat+7)& (0+255),w,b
  7757  000C90  6F65               	movwf	(disk_readp@sector+3)& (0+255),b
  7758  000C92  0E00               	movlw	0
  7759  000C94  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
  7760  000C96  0E00               	movlw	0
  7761  000C98  6F66               	movwf	disk_readp@offset& (0+255),b
  7762  000C9A  0E00               	movlw	0
  7763  000C9C  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  7764  000C9E  0E01               	movlw	1
  7765  000CA0  6F68               	movwf	disk_readp@count& (0+255),b
  7766  000CA2  EC3C  F009         	call	_disk_readp	;wreg free
  7767  000CA6  D79B               	goto	L3
  7768  000CA8                     l833:
  7769                           
  7770                           ;pff.c: 372: }
  7771                           ;pff.c: 373: wc = (WORD)(((WORD)*((BYTE*)(buf)+1)<<8)|(WORD)*(BYTE*)(buf));
  7772  000CA8  0100               	movlb	0	; () banked
  7773  000CAA  5193               	movf	(get_fat@buf+1)& (0+255),w,b
  7774  000CAC  6F76               	movwf	??_get_fat& (0+255),b
  7775  000CAE  5192               	movf	get_fat@buf& (0+255),w,b
  7776  000CB0  6F8E               	movwf	get_fat@wc& (0+255),b
  7777  000CB2  C076  F08F         	movff	??_get_fat,get_fat@wc+1
  7778                           
  7779                           ; BSR set to: 0
  7780                           ;pff.c: 374: return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  7781  000CB6  B172               	btfsc	get_fat@clst& (0+255),0,b
  7782  000CB8  D007               	goto	l835
  7783                           
  7784                           ; BSR set to: 0
  7785  000CBA  0EFF               	movlw	255
  7786  000CBC  158E               	andwf	get_fat@wc& (0+255),w,b
  7787  000CBE  6F8C               	movwf	_get_fat$1897& (0+255),b
  7788  000CC0  0E0F               	movlw	15
  7789  000CC2  158F               	andwf	(get_fat@wc+1)& (0+255),w,b
  7790  000CC4  6F8D               	movwf	(_get_fat$1897+1)& (0+255),b
  7791  000CC6  D00F               	goto	l837
  7792  000CC8                     l835:
  7793                           
  7794                           ; BSR set to: 0
  7795                           
  7796                           ; BSR set to: 0
  7797  000CC8  C08E  F076         	movff	get_fat@wc,??_get_fat
  7798  000CCC  C08F  F077         	movff	get_fat@wc+1,??_get_fat+1
  7799  000CD0  0E04               	movlw	4
  7800  000CD2  6F78               	movwf	(??_get_fat+2)& (0+255),b
  7801  000CD4                     u6885:
  7802  000CD4  90D8               	bcf	status,0,c
  7803  000CD6  3377               	rrcf	(??_get_fat+1)& (0+255),f,b
  7804  000CD8  3376               	rrcf	??_get_fat& (0+255),f,b
  7805  000CDA  2F78               	decfsz	(??_get_fat+2)& (0+255),f,b
  7806  000CDC  D7FB               	goto	u6885
  7807  000CDE  C076  F08C         	movff	??_get_fat,_get_fat$1897
  7808  000CE2  C077  F08D         	movff	??_get_fat+1,_get_fat$1897+1
  7809  000CE6                     l837:
  7810                           
  7811                           ; BSR set to: 0
  7812                           
  7813                           ; BSR set to: 0
  7814  000CE6  C08C  F072         	movff	_get_fat$1897,?_get_fat
  7815  000CEA  C08D  F073         	movff	_get_fat$1897+1,?_get_fat+1
  7816  000CEE  6B74               	clrf	(?_get_fat+2)& (0+255),b
  7817  000CF0  6B75               	clrf	(?_get_fat+3)& (0+255),b
  7818                           
  7819                           ; BSR set to: 0
  7820  000CF2  0012               	return	
  7821  000CF4                     
  7822                           ; BSR set to: 0
  7823                           ;pff.c: 379: if (disk_readp(buf, fs->fatbase + clst / 256, ((UINT)clst % 256) * 2, 2)) b
      +                          reak;
  7824                           
  7825                           ; BSR set to: 0
  7826  000CF4  0E92               	movlw	low get_fat@buf
  7827  000CF6  6F60               	movwf	disk_readp@rd& (0+255),b
  7828  000CF8  0E00               	movlw	high get_fat@buf
  7829  000CFA  6F61               	movwf	(disk_readp@rd+1)& (0+255),b
  7830  000CFC  EE20 F00A          	lfsr	2,10
  7831  000D00  5198               	movf	get_fat@fs& (0+255),w,b
  7832  000D02  26D9               	addwf	fsr2l,f,c
  7833  000D04  5199               	movf	(get_fat@fs+1)& (0+255),w,b
  7834  000D06  22DA               	addwfc	fsr2h,f,c
  7835  000D08  CFDE F076          	movff	postinc2,??_get_fat
  7836  000D0C  CFDE F077          	movff	postinc2,??_get_fat+1
  7837  000D10  CFDE F078          	movff	postinc2,??_get_fat+2
  7838  000D14  CFDE F079          	movff	postinc2,??_get_fat+3
  7839  000D18  C072  F07A         	movff	get_fat@clst,??_get_fat+4
  7840  000D1C  C073  F07B         	movff	get_fat@clst+1,??_get_fat+5
  7841  000D20  C074  F07C         	movff	get_fat@clst+2,??_get_fat+6
  7842  000D24  C075  F07D         	movff	get_fat@clst+3,??_get_fat+7
  7843  000D28  C07B  F07A         	movff	??_get_fat+5,??_get_fat+4
  7844  000D2C  C07C  F07B         	movff	??_get_fat+6,??_get_fat+5
  7845  000D30  C07D  F07C         	movff	??_get_fat+7,??_get_fat+6
  7846  000D34  6B7D               	clrf	(??_get_fat+7)& (0+255),b
  7847  000D36  5176               	movf	??_get_fat& (0+255),w,b
  7848  000D38  257A               	addwf	(??_get_fat+4)& (0+255),w,b
  7849  000D3A  6F62               	movwf	disk_readp@sector& (0+255),b
  7850  000D3C  5177               	movf	(??_get_fat+1)& (0+255),w,b
  7851  000D3E  217B               	addwfc	(??_get_fat+5)& (0+255),w,b
  7852  000D40  6F63               	movwf	(disk_readp@sector+1)& (0+255),b
  7853  000D42  5178               	movf	(??_get_fat+2)& (0+255),w,b
  7854  000D44  217C               	addwfc	(??_get_fat+6)& (0+255),w,b
  7855  000D46  6F64               	movwf	(disk_readp@sector+2)& (0+255),b
  7856  000D48  5179               	movf	(??_get_fat+3)& (0+255),w,b
  7857  000D4A  217D               	addwfc	(??_get_fat+7)& (0+255),w,b
  7858  000D4C  6F65               	movwf	(disk_readp@sector+3)& (0+255),b
  7859  000D4E  0EFF               	movlw	255
  7860  000D50  1572               	andwf	get_fat@clst& (0+255),w,b
  7861  000D52  6F7E               	movwf	(??_get_fat+8)& (0+255),b
  7862  000D54  0E00               	movlw	0
  7863  000D56  1573               	andwf	(get_fat@clst+1)& (0+255),w,b
  7864  000D58  6F7F               	movwf	(??_get_fat+9)& (0+255),b
  7865  000D5A  90D8               	bcf	status,0,c
  7866  000D5C  357E               	rlcf	(??_get_fat+8)& (0+255),w,b
  7867  000D5E  6F66               	movwf	disk_readp@offset& (0+255),b
  7868  000D60  357F               	rlcf	(??_get_fat+9)& (0+255),w,b
  7869  000D62  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
  7870  000D64  0E00               	movlw	0
  7871  000D66  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  7872  000D68  0E02               	movlw	2
  7873  000D6A  6F68               	movwf	disk_readp@count& (0+255),b
  7874  000D6C  EC3C  F009         	call	_disk_readp	;wreg free
  7875  000D70  0900               	iorlw	0
  7876  000D72  A4D8               	btfss	status,2,c
  7877  000D74  D0AF               	goto	l830
  7878                           
  7879                           ;pff.c: 380: return (WORD)(((WORD)*((BYTE*)(buf)+1)<<8)|(WORD)*(BYTE*)(buf));
  7880  000D76  0100               	movlb	0	; () banked
  7881  000D78  5192               	movf	get_fat@buf& (0+255),w,b
  7882  000D7A  C093  F076         	movff	get_fat@buf+1,??_get_fat
  7883  000D7E  6B77               	clrf	(??_get_fat+1)& (0+255),b
  7884  000D80  C076  F077         	movff	??_get_fat,??_get_fat+1
  7885  000D84  6B76               	clrf	??_get_fat& (0+255),b
  7886  000D86  1376               	iorwf	??_get_fat& (0+255),f,b
  7887  000D88  0E00               	movlw	0
  7888  000D8A  1377               	iorwf	(??_get_fat+1)& (0+255),f,b
  7889  000D8C  C076  F072         	movff	??_get_fat,?_get_fat
  7890  000D90  C077  F073         	movff	??_get_fat+1,?_get_fat+1
  7891  000D94  6B74               	clrf	(?_get_fat+2)& (0+255),b
  7892  000D96  6B75               	clrf	(?_get_fat+3)& (0+255),b
  7893                           
  7894                           ; BSR set to: 0
  7895  000D98  0012               	return	
  7896  000D9A                     
  7897                           ; BSR set to: 0
  7898                           ;pff.c: 384: if (disk_readp(buf, fs->fatbase + clst / 128, ((UINT)clst % 128) * 4, 4)) b
      +                          reak;
  7899                           
  7900                           ; BSR set to: 0
  7901  000D9A  0E92               	movlw	low get_fat@buf
  7902  000D9C  6F60               	movwf	disk_readp@rd& (0+255),b
  7903  000D9E  0E00               	movlw	high get_fat@buf
  7904  000DA0  6F61               	movwf	(disk_readp@rd+1)& (0+255),b
  7905  000DA2  EE20 F00A          	lfsr	2,10
  7906  000DA6  5198               	movf	get_fat@fs& (0+255),w,b
  7907  000DA8  26D9               	addwf	fsr2l,f,c
  7908  000DAA  5199               	movf	(get_fat@fs+1)& (0+255),w,b
  7909  000DAC  22DA               	addwfc	fsr2h,f,c
  7910  000DAE  CFDE F076          	movff	postinc2,??_get_fat
  7911  000DB2  CFDE F077          	movff	postinc2,??_get_fat+1
  7912  000DB6  CFDE F078          	movff	postinc2,??_get_fat+2
  7913  000DBA  CFDE F079          	movff	postinc2,??_get_fat+3
  7914  000DBE  C072  F07A         	movff	get_fat@clst,??_get_fat+4
  7915  000DC2  C073  F07B         	movff	get_fat@clst+1,??_get_fat+5
  7916  000DC6  C074  F07C         	movff	get_fat@clst+2,??_get_fat+6
  7917  000DCA  C075  F07D         	movff	get_fat@clst+3,??_get_fat+7
  7918  000DCE  0E08               	movlw	8
  7919  000DD0  D005               	goto	u6900
  7920  000DD2                     u6905:
  7921  000DD2  90D8               	bcf	status,0,c
  7922  000DD4  337D               	rrcf	(??_get_fat+7)& (0+255),f,b
  7923  000DD6  337C               	rrcf	(??_get_fat+6)& (0+255),f,b
  7924  000DD8  337B               	rrcf	(??_get_fat+5)& (0+255),f,b
  7925  000DDA  337A               	rrcf	(??_get_fat+4)& (0+255),f,b
  7926  000DDC                     u6900:
  7927  000DDC  2EE8               	decfsz	wreg,f,c
  7928  000DDE  D7F9               	goto	u6905
  7929  000DE0  5176               	movf	??_get_fat& (0+255),w,b
  7930  000DE2  257A               	addwf	(??_get_fat+4)& (0+255),w,b
  7931  000DE4  6F62               	movwf	disk_readp@sector& (0+255),b
  7932  000DE6  5177               	movf	(??_get_fat+1)& (0+255),w,b
  7933  000DE8  217B               	addwfc	(??_get_fat+5)& (0+255),w,b
  7934  000DEA  6F63               	movwf	(disk_readp@sector+1)& (0+255),b
  7935  000DEC  5178               	movf	(??_get_fat+2)& (0+255),w,b
  7936  000DEE  217C               	addwfc	(??_get_fat+6)& (0+255),w,b
  7937  000DF0  6F64               	movwf	(disk_readp@sector+2)& (0+255),b
  7938  000DF2  5179               	movf	(??_get_fat+3)& (0+255),w,b
  7939  000DF4  217D               	addwfc	(??_get_fat+7)& (0+255),w,b
  7940  000DF6  6F65               	movwf	(disk_readp@sector+3)& (0+255),b
  7941  000DF8  0E7F               	movlw	127
  7942  000DFA  1572               	andwf	get_fat@clst& (0+255),w,b
  7943  000DFC  6F7E               	movwf	(??_get_fat+8)& (0+255),b
  7944  000DFE  0E00               	movlw	0
  7945  000E00  1573               	andwf	(get_fat@clst+1)& (0+255),w,b
  7946  000E02  6F7F               	movwf	(??_get_fat+9)& (0+255),b
  7947  000E04  90D8               	bcf	status,0,c
  7948  000E06  377E               	rlcf	(??_get_fat+8)& (0+255),f,b
  7949  000E08  377F               	rlcf	(??_get_fat+9)& (0+255),f,b
  7950  000E0A  90D8               	bcf	status,0,c
  7951  000E0C  377E               	rlcf	(??_get_fat+8)& (0+255),f,b
  7952  000E0E  377F               	rlcf	(??_get_fat+9)& (0+255),f,b
  7953  000E10  C07E  F066         	movff	??_get_fat+8,disk_readp@offset
  7954  000E14  C07F  F067         	movff	??_get_fat+9,disk_readp@offset+1
  7955  000E18  0E00               	movlw	0
  7956  000E1A  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  7957  000E1C  0E04               	movlw	4
  7958  000E1E  6F68               	movwf	disk_readp@count& (0+255),b
  7959  000E20  EC3C  F009         	call	_disk_readp	;wreg free
  7960  000E24  0900               	iorlw	0
  7961  000E26  A4D8               	btfss	status,2,c
  7962  000E28  D055               	goto	l830
  7963                           
  7964                           ;pff.c: 385: return (DWORD)(((DWORD)*((BYTE*)(buf)+3)<<24)|((DWORD)*((BYTE*)(buf)+2)<<16
      +                          )|((WORD)*((BYTE*)(buf)+1)<<8)|*(BYTE*)(buf)) & 0x0FFFFFFF;
  7965  000E2A  0100               	movlb	0	; () banked
  7966  000E2C  5193               	movf	(get_fat@buf+1)& (0+255),w,b
  7967  000E2E  6F77               	movwf	(??_get_fat+1)& (0+255),b
  7968  000E30  6B76               	clrf	??_get_fat& (0+255),b
  7969  000E32  C094  F078         	movff	get_fat@buf+2,??_get_fat+2
  7970  000E36  6B79               	clrf	(??_get_fat+3)& (0+255),b
  7971  000E38  6B7A               	clrf	(??_get_fat+4)& (0+255),b
  7972  000E3A  6B7B               	clrf	(??_get_fat+5)& (0+255),b
  7973  000E3C  C079  F07B         	movff	??_get_fat+3,??_get_fat+5
  7974  000E40  C078  F07A         	movff	??_get_fat+2,??_get_fat+4
  7975  000E44  6B79               	clrf	(??_get_fat+3)& (0+255),b
  7976  000E46  6B78               	clrf	(??_get_fat+2)& (0+255),b
  7977  000E48  C095  F07C         	movff	get_fat@buf+3,??_get_fat+6
  7978  000E4C  6B7D               	clrf	(??_get_fat+7)& (0+255),b
  7979  000E4E  6B7E               	clrf	(??_get_fat+8)& (0+255),b
  7980  000E50  6B7F               	clrf	(??_get_fat+9)& (0+255),b
  7981  000E52  C07C  F07F         	movff	??_get_fat+6,??_get_fat+9
  7982  000E56  6B7E               	clrf	(??_get_fat+8)& (0+255),b
  7983  000E58  6B7D               	clrf	(??_get_fat+7)& (0+255),b
  7984  000E5A  6B7C               	clrf	(??_get_fat+6)& (0+255),b
  7985  000E5C  5178               	movf	(??_get_fat+2)& (0+255),w,b
  7986  000E5E  117C               	iorwf	(??_get_fat+6)& (0+255),w,b
  7987  000E60  6F80               	movwf	(??_get_fat+10)& (0+255),b
  7988  000E62  5179               	movf	(??_get_fat+3)& (0+255),w,b
  7989  000E64  117D               	iorwf	(??_get_fat+7)& (0+255),w,b
  7990  000E66  6F81               	movwf	(??_get_fat+11)& (0+255),b
  7991  000E68  517A               	movf	(??_get_fat+4)& (0+255),w,b
  7992  000E6A  117E               	iorwf	(??_get_fat+8)& (0+255),w,b
  7993  000E6C  6F82               	movwf	(??_get_fat+12)& (0+255),b
  7994  000E6E  517B               	movf	(??_get_fat+5)& (0+255),w,b
  7995  000E70  117F               	iorwf	(??_get_fat+9)& (0+255),w,b
  7996  000E72  6F83               	movwf	(??_get_fat+13)& (0+255),b
  7997  000E74  5176               	movf	??_get_fat& (0+255),w,b
  7998  000E76  1180               	iorwf	(??_get_fat+10)& (0+255),w,b
  7999  000E78  6F84               	movwf	(??_get_fat+14)& (0+255),b
  8000  000E7A  5177               	movf	(??_get_fat+1)& (0+255),w,b
  8001  000E7C  1181               	iorwf	(??_get_fat+11)& (0+255),w,b
  8002  000E7E  6F85               	movwf	(??_get_fat+15)& (0+255),b
  8003  000E80  0E00               	movlw	0
  8004  000E82  1182               	iorwf	(??_get_fat+12)& (0+255),w,b
  8005  000E84  6F86               	movwf	(??_get_fat+16)& (0+255),b
  8006  000E86  0E00               	movlw	0
  8007  000E88  1183               	iorwf	(??_get_fat+13)& (0+255),w,b
  8008  000E8A  6F87               	movwf	(??_get_fat+17)& (0+255),b
  8009  000E8C  5192               	movf	get_fat@buf& (0+255),w,b
  8010  000E8E  1184               	iorwf	(??_get_fat+14)& (0+255),w,b
  8011  000E90  6F88               	movwf	(??_get_fat+18)& (0+255),b
  8012  000E92  5185               	movf	(??_get_fat+15)& (0+255),w,b
  8013  000E94  6F89               	movwf	(??_get_fat+19)& (0+255),b
  8014  000E96  5186               	movf	(??_get_fat+16)& (0+255),w,b
  8015  000E98  6F8A               	movwf	(??_get_fat+20)& (0+255),b
  8016  000E9A  5187               	movf	(??_get_fat+17)& (0+255),w,b
  8017  000E9C  6F8B               	movwf	(??_get_fat+21)& (0+255),b
  8018  000E9E  0EFF               	movlw	255
  8019  000EA0  1588               	andwf	(??_get_fat+18)& (0+255),w,b
  8020  000EA2  6F72               	movwf	?_get_fat& (0+255),b
  8021  000EA4  0EFF               	movlw	255
  8022  000EA6  1589               	andwf	(??_get_fat+19)& (0+255),w,b
  8023  000EA8  6F73               	movwf	(?_get_fat+1)& (0+255),b
  8024  000EAA  0EFF               	movlw	255
  8025  000EAC  158A               	andwf	(??_get_fat+20)& (0+255),w,b
  8026  000EAE  6F74               	movwf	(?_get_fat+2)& (0+255),b
  8027  000EB0  0E0F               	movlw	15
  8028  000EB2  158B               	andwf	(??_get_fat+21)& (0+255),w,b
  8029  000EB4  6F75               	movwf	(?_get_fat+3)& (0+255),b
  8030                           
  8031                           ; BSR set to: 0
  8032  000EB6  0012               	return	
  8033  000EB8                     l826:
  8034                           
  8035                           ; BSR set to: 0
  8036                           
  8037                           ; BSR set to: 0
  8038  000EB8  C098  FFD9         	movff	get_fat@fs,fsr2l
  8039  000EBC  C099  FFDA         	movff	get_fat@fs+1,fsr2h
  8040  000EC0  50DF               	movf	indf2,w,c
  8041                           
  8042                           ; Switch size 1, requested type "space"
  8043                           ; Number of cases is 3, Range of values is 1 to 3
  8044                           ; switch strategies available:
  8045                           ; Name         Instructions Cycles
  8046                           ; simple_byte           10     6 (average)
  8047                           ;	Chosen strategy is simple_byte
  8048  000EC2  0A01               	xorlw	1	; case 1
  8049  000EC4  B4D8               	btfsc	status,2,c
  8050  000EC6  D644               	goto	l827
  8051  000EC8  0A03               	xorlw	3	; case 2
  8052  000ECA  B4D8               	btfsc	status,2,c
  8053  000ECC  D713               	goto	l838
  8054  000ECE  0A01               	xorlw	1	; case 3
  8055  000ED0  B4D8               	btfsc	status,2,c
  8056  000ED2  D763               	goto	l840
  8057  000ED4                     l830:
  8058                           
  8059                           ;pff.c: 389: return 1;
  8060                           
  8061                           ; BSR set to: 0
  8062  000ED4  0E01               	movlw	1
  8063  000ED6  0100               	movlb	0	; () banked
  8064  000ED8  6F72               	movwf	?_get_fat& (0+255),b
  8065  000EDA  0E00               	movlw	0
  8066  000EDC  6F73               	movwf	(?_get_fat+1)& (0+255),b
  8067  000EDE  0E00               	movlw	0
  8068  000EE0  6F74               	movwf	(?_get_fat+2)& (0+255),b
  8069  000EE2  0E00               	movlw	0
  8070  000EE4  6F75               	movwf	(?_get_fat+3)& (0+255),b
  8071  000EE6  0012               	return	
  8072  000EE8                     __end_of_get_fat:
  8073                           	opt stack 0
  8074                           tosu	equ	0xFFF
  8075                           tosh	equ	0xFFE
  8076                           tosl	equ	0xFFD
  8077                           pclath	equ	0xFFA
  8078                           tblptru	equ	0xFF8
  8079                           tblptrh	equ	0xFF7
  8080                           tblptrl	equ	0xFF6
  8081                           tablat	equ	0xFF5
  8082                           prodh	equ	0xFF4
  8083                           prodl	equ	0xFF3
  8084                           intcon	equ	0xFF2
  8085                           intcon2	equ	0xFF1
  8086                           intcon3	equ	0xFF0
  8087                           postinc0	equ	0xFEE
  8088                           wreg	equ	0xFE8
  8089                           indf1	equ	0xFE7
  8090                           postinc1	equ	0xFE6
  8091                           postdec1	equ	0xFE5
  8092                           fsr1h	equ	0xFE2
  8093                           fsr1l	equ	0xFE1
  8094                           indf2	equ	0xFDF
  8095                           postinc2	equ	0xFDE
  8096                           postdec2	equ	0xFDD
  8097                           plusw2	equ	0xFDB
  8098                           fsr2h	equ	0xFDA
  8099                           fsr2l	equ	0xFD9
  8100                           status	equ	0xFD8
  8101                           
  8102 ;; *************** function _clust2sect *****************
  8103 ;; Defined at:
  8104 ;;		line 400 in file "pff.c"
  8105 ;; Parameters:    Size  Location     Type
  8106 ;;  clst            4   37[COMRAM] unsigned long 
  8107 ;; Auto vars:     Size  Location     Type
  8108 ;;  fs              2   41[COMRAM] PTR struct .
  8109 ;;		 -> NULL(0), SDCard@fs(42), 
  8110 ;; Return value:  Size  Location     Type
  8111 ;;                  4   37[COMRAM] unsigned long 
  8112 ;; Registers used:
  8113 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8114 ;; Tracked objects:
  8115 ;;		On entry : 0/0
  8116 ;;		On exit  : 0/0
  8117 ;;		Unchanged: 0/0
  8118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8119 ;;      Params:         4       0       0       0       0       0       0       0       0
  8120 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8121 ;;      Temps:          0       5       0       0       0       0       0       0       0
  8122 ;;      Totals:         6       5       0       0       0       0       0       0       0
  8123 ;;Total ram usage:       11 bytes
  8124 ;; Hardware stack levels used:    1
  8125 ;; Hardware stack levels required when called:    3
  8126 ;; This function calls:
  8127 ;;		___lmul
  8128 ;; This function is called by:
  8129 ;;		_dir_rewind
  8130 ;;		_dir_next
  8131 ;;		_pf_read
  8132 ;;		_pf_write
  8133 ;;		_pf_lseek
  8134 ;; This function uses a non-reentrant model
  8135 ;;
  8136                           
  8137                           	psect	text33
  8138  002788                     __ptext33:
  8139                           	opt stack 0
  8140  002788                     _clust2sect:
  8141                           	opt stack 24
  8142                           
  8143                           ;pff.c: 404: FATFS *fs = FatFs;
  8144                           
  8145                           ; BSR set to: 0
  8146                           ;incstack = 0
  8147  002788  C035  F02A         	movff	_FatFs,clust2sect@fs
  8148  00278C  C036  F02B         	movff	_FatFs+1,clust2sect@fs+1
  8149                           
  8150                           ;pff.c: 407: clst -= 2;
  8151  002790  0E02               	movlw	2
  8152  002792  5E26               	subwf	clust2sect@clst,f,c
  8153  002794  0E00               	movlw	0
  8154  002796  5A27               	subwfb	clust2sect@clst+1,f,c
  8155  002798  5A28               	subwfb	clust2sect@clst+2,f,c
  8156  00279A  5A29               	subwfb	clust2sect@clst+3,f,c
  8157                           
  8158                           ;pff.c: 408: if (clst >= (fs->n_fatent - 2)) return 0;
  8159  00279C  EE20 F006          	lfsr	2,6
  8160  0027A0  502A               	movf	clust2sect@fs,w,c
  8161  0027A2  26D9               	addwf	fsr2l,f,c
  8162  0027A4  502B               	movf	clust2sect@fs+1,w,c
  8163  0027A6  22DA               	addwfc	fsr2h,f,c
  8164  0027A8  0EFE               	movlw	254
  8165  0027AA  24DE               	addwf	postinc2,w,c
  8166  0027AC  0100               	movlb	0	; () banked
  8167  0027AE  6F60               	movwf	??_clust2sect& (0+255),b
  8168  0027B0  0EFF               	movlw	255
  8169  0027B2  20DE               	addwfc	postinc2,w,c
  8170  0027B4  6F61               	movwf	(??_clust2sect+1)& (0+255),b
  8171  0027B6  0EFF               	movlw	255
  8172  0027B8  20DE               	addwfc	postinc2,w,c
  8173  0027BA  6F62               	movwf	(??_clust2sect+2)& (0+255),b
  8174  0027BC  0EFF               	movlw	255
  8175  0027BE  20DE               	addwfc	postinc2,w,c
  8176  0027C0  6F63               	movwf	(??_clust2sect+3)& (0+255),b
  8177  0027C2  5160               	movf	??_clust2sect& (0+255),w,b
  8178  0027C4  5C26               	subwf	clust2sect@clst,w,c
  8179  0027C6  5161               	movf	(??_clust2sect+1)& (0+255),w,b
  8180  0027C8  5827               	subwfb	clust2sect@clst+1,w,c
  8181  0027CA  5162               	movf	(??_clust2sect+2)& (0+255),w,b
  8182  0027CC  5828               	subwfb	clust2sect@clst+2,w,c
  8183  0027CE  5163               	movf	(??_clust2sect+3)& (0+255),w,b
  8184  0027D0  5829               	subwfb	clust2sect@clst+3,w,c
  8185  0027D2  A0D8               	btfss	status,0,c
  8186  0027D4  D009               	goto	l844
  8187                           
  8188                           ; BSR set to: 0
  8189  0027D6  0E00               	movlw	0
  8190  0027D8  6E26               	movwf	?_clust2sect,c
  8191  0027DA  0E00               	movlw	0
  8192  0027DC  6E27               	movwf	?_clust2sect+1,c
  8193  0027DE  0E00               	movlw	0
  8194  0027E0  6E28               	movwf	?_clust2sect+2,c
  8195  0027E2  0E00               	movlw	0
  8196  0027E4  6E29               	movwf	?_clust2sect+3,c
  8197                           
  8198                           ; BSR set to: 0
  8199  0027E6  0012               	return	
  8200  0027E8                     l844:
  8201                           
  8202                           ; BSR set to: 0
  8203                           ;pff.c: 409: return (DWORD)clst * fs->csize + fs->database;
  8204                           
  8205                           ; BSR set to: 0
  8206  0027E8  EE20 F012          	lfsr	2,18
  8207  0027EC  502A               	movf	clust2sect@fs,w,c
  8208  0027EE  26D9               	addwf	fsr2l,f,c
  8209  0027F0  502B               	movf	clust2sect@fs+1,w,c
  8210  0027F2  22DA               	addwfc	fsr2h,f,c
  8211  0027F4  CFDE F060          	movff	postinc2,??_clust2sect
  8212  0027F8  CFDE F061          	movff	postinc2,??_clust2sect+1
  8213  0027FC  CFDE F062          	movff	postinc2,??_clust2sect+2
  8214  002800  CFDE F063          	movff	postinc2,??_clust2sect+3
  8215  002804  EE20 F002          	lfsr	2,2
  8216  002808  502A               	movf	clust2sect@fs,w,c
  8217  00280A  26D9               	addwf	fsr2l,f,c
  8218  00280C  502B               	movf	clust2sect@fs+1,w,c
  8219  00280E  22DA               	addwfc	fsr2h,f,c
  8220  002810  50DF               	movf	indf2,w,c
  8221  002812  6F64               	movwf	(??_clust2sect+4)& (0+255),b
  8222  002814  5164               	movf	(??_clust2sect+4)& (0+255),w,b
  8223  002816  6E1A               	movwf	___lmul@multiplier,c
  8224  002818  6A1B               	clrf	___lmul@multiplier+1,c
  8225  00281A  6A1C               	clrf	___lmul@multiplier+2,c
  8226  00281C  6A1D               	clrf	___lmul@multiplier+3,c
  8227  00281E  C026  F01E         	movff	clust2sect@clst,___lmul@multiplicand
  8228  002822  C027  F01F         	movff	clust2sect@clst+1,___lmul@multiplicand+1
  8229  002826  C028  F020         	movff	clust2sect@clst+2,___lmul@multiplicand+2
  8230  00282A  C029  F021         	movff	clust2sect@clst+3,___lmul@multiplicand+3
  8231  00282E  EC16  F017         	call	___lmul	;wreg free
  8232  002832  0100               	movlb	0	; () banked
  8233  002834  5160               	movf	??_clust2sect& (0+255),w,b
  8234  002836  241A               	addwf	?___lmul,w,c
  8235  002838  6E26               	movwf	?_clust2sect,c
  8236  00283A  5161               	movf	(??_clust2sect+1)& (0+255),w,b
  8237  00283C  201B               	addwfc	?___lmul+1,w,c
  8238  00283E  6E27               	movwf	?_clust2sect+1,c
  8239  002840  5162               	movf	(??_clust2sect+2)& (0+255),w,b
  8240  002842  201C               	addwfc	?___lmul+2,w,c
  8241  002844  6E28               	movwf	?_clust2sect+2,c
  8242  002846  5163               	movf	(??_clust2sect+3)& (0+255),w,b
  8243  002848  201D               	addwfc	?___lmul+3,w,c
  8244  00284A  6E29               	movwf	?_clust2sect+3,c
  8245  00284C  0012               	return	
  8246  00284E                     __end_of_clust2sect:
  8247                           	opt stack 0
  8248                           tosu	equ	0xFFF
  8249                           tosh	equ	0xFFE
  8250                           tosl	equ	0xFFD
  8251                           pclath	equ	0xFFA
  8252                           tblptru	equ	0xFF8
  8253                           tblptrh	equ	0xFF7
  8254                           tblptrl	equ	0xFF6
  8255                           tablat	equ	0xFF5
  8256                           prodh	equ	0xFF4
  8257                           prodl	equ	0xFF3
  8258                           intcon	equ	0xFF2
  8259                           intcon2	equ	0xFF1
  8260                           intcon3	equ	0xFF0
  8261                           postinc0	equ	0xFEE
  8262                           wreg	equ	0xFE8
  8263                           indf1	equ	0xFE7
  8264                           postinc1	equ	0xFE6
  8265                           postdec1	equ	0xFE5
  8266                           fsr1h	equ	0xFE2
  8267                           fsr1l	equ	0xFE1
  8268                           indf2	equ	0xFDF
  8269                           postinc2	equ	0xFDE
  8270                           postdec2	equ	0xFDD
  8271                           plusw2	equ	0xFDB
  8272                           fsr2h	equ	0xFDA
  8273                           fsr2l	equ	0xFD9
  8274                           status	equ	0xFD8
  8275                           
  8276 ;; *************** function _create_name *****************
  8277 ;; Defined at:
  8278 ;;		line 581 in file "pff.c"
  8279 ;; Parameters:    Size  Location     Type
  8280 ;;  dj              2   33[COMRAM] PTR struct .
  8281 ;;		 -> pf_open@dj(16), 
  8282 ;;  path            2   35[COMRAM] PTR PTR const unsigned c
  8283 ;;		 -> follow_path@path(2), 
  8284 ;; Auto vars:     Size  Location     Type
  8285 ;;  d               1    0[BANK0 ] unsigned char 
  8286 ;;  sfn             2    5[BANK0 ] PTR unsigned char 
  8287 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  8288 ;;  p               2    1[BANK0 ] PTR const unsigned char 
  8289 ;;		 -> STR_18(10), 
  8290 ;;  c               1    8[BANK0 ] unsigned char 
  8291 ;;  i               1    7[BANK0 ] unsigned char 
  8292 ;;  si              1    4[BANK0 ] unsigned char 
  8293 ;;  ni              1    3[BANK0 ] unsigned char 
  8294 ;; Return value:  Size  Location     Type
  8295 ;;                  1    wreg      enum E43
  8296 ;; Registers used:
  8297 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8298 ;; Tracked objects:
  8299 ;;		On entry : 0/0
  8300 ;;		On exit  : 0/0
  8301 ;;		Unchanged: 0/0
  8302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8303 ;;      Params:         4       0       0       0       0       0       0       0       0
  8304 ;;      Locals:         0       9       0       0       0       0       0       0       0
  8305 ;;      Temps:          7       0       0       0       0       0       0       0       0
  8306 ;;      Totals:        11       9       0       0       0       0       0       0       0
  8307 ;;Total ram usage:       20 bytes
  8308 ;; Hardware stack levels used:    1
  8309 ;; Hardware stack levels required when called:    3
  8310 ;; This function calls:
  8311 ;;		_mem_set
  8312 ;; This function is called by:
  8313 ;;		_follow_path
  8314 ;; This function uses a non-reentrant model
  8315 ;;
  8316                           
  8317                           	psect	text34
  8318  001DE6                     __ptext34:
  8319                           	opt stack 0
  8320  001DE6                     _create_name:
  8321                           	opt stack 23
  8322                           
  8323                           ;pff.c: 586: BYTE c, ni, si, i, *sfn;
  8324                           ;pff.c: 587: const char *p;
  8325                           ;pff.c: 590: static const BYTE cvt[] = {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x4
      +                          5,0x45,0x49,0x49,0x49,0x8E,0x8F,0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0
      +                          x9B,0x9C,0x9D,0x9E,0x9F, 0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0x
  8326                           ;pff.c: 595: sfn = dj->fn;
  8327                           
  8328                           ; BSR set to: 0
  8329                           ;incstack = 0
  8330  001DE6  EE20 F002          	lfsr	2,2
  8331  001DEA  5022               	movf	create_name@dj,w,c
  8332  001DEC  26D9               	addwf	fsr2l,f,c
  8333  001DEE  5023               	movf	create_name@dj+1,w,c
  8334  001DF0  22DA               	addwfc	fsr2h,f,c
  8335  001DF2  CFDE F065          	movff	postinc2,create_name@sfn
  8336  001DF6  CFDD F066          	movff	postdec2,create_name@sfn+1
  8337                           
  8338                           ;pff.c: 596: mem_set(sfn, ' ', 11);
  8339  001DFA  C065  F01A         	movff	create_name@sfn,mem_set@dst
  8340  001DFE  C066  F01B         	movff	create_name@sfn+1,mem_set@dst+1
  8341  001E02  0E00               	movlw	0
  8342  001E04  6E1D               	movwf	mem_set@val+1,c
  8343  001E06  0E20               	movlw	32
  8344  001E08  6E1C               	movwf	mem_set@val,c
  8345  001E0A  0E00               	movlw	0
  8346  001E0C  6E1F               	movwf	mem_set@cnt+1,c
  8347  001E0E  0E0B               	movlw	11
  8348  001E10  6E1E               	movwf	mem_set@cnt,c
  8349  001E12  EC2C  F018         	call	_mem_set	;wreg free
  8350                           
  8351                           ;pff.c: 597: si = i = 0; ni = 8;
  8352  001E16  0E00               	movlw	0
  8353  001E18  0100               	movlb	0	; () banked
  8354  001E1A  6F67               	movwf	create_name@i& (0+255),b
  8355  001E1C  C067  F064         	movff	create_name@i,create_name@si
  8356                           
  8357                           ; BSR set to: 0
  8358  001E20  0E08               	movlw	8
  8359  001E22  6F63               	movwf	create_name@ni& (0+255),b
  8360                           
  8361                           ; BSR set to: 0
  8362                           ;pff.c: 598: p = *path;
  8363  001E24  C024  FFD9         	movff	create_name@path,fsr2l
  8364  001E28  C025  FFDA         	movff	create_name@path+1,fsr2h
  8365  001E2C  CFDE F061          	movff	postinc2,create_name@p
  8366  001E30  CFDD F062          	movff	postdec2,create_name@p+1
  8367  001E34                     
  8368                           ; BSR set to: 0
  8369                           ;pff.c: 600: c = p[si++];
  8370                           
  8371                           ; BSR set to: 0
  8372  001E34  5164               	movf	create_name@si& (0+255),w,b
  8373  001E36  0D01               	mullw	1
  8374  001E38  C061  F026         	movff	create_name@p,??_create_name
  8375  001E3C  C062  F027         	movff	create_name@p+1,??_create_name+1
  8376  001E40  50F3               	movf	prodl,w,c
  8377  001E42  2626               	addwf	??_create_name,f,c
  8378  001E44  50F4               	movf	prodh,w,c
  8379  001E46  2227               	addwfc	??_create_name+1,f,c
  8380  001E48  C026  FFF6         	movff	??_create_name,tblptrl
  8381  001E4C  C027  FFF7         	movff	??_create_name+1,tblptrh
  8382  001E50                     	if	0	;tblptru may be non-zero
  8383  001E50                     	endif
  8384  001E50                     	if	0	;tblptru may be non-zero
  8385  001E50                     	endif
  8386  001E50  0008               	tblrd		*
  8387  001E52  CFF5 F068          	movff	tablat,create_name@c
  8388                           
  8389                           ; BSR set to: 0
  8390  001E56  2B64               	incf	create_name@si& (0+255),f,b
  8391                           
  8392                           ; BSR set to: 0
  8393                           ;pff.c: 601: if (c <= ' ' || c == '/') break;
  8394  001E58  0E20               	movlw	32
  8395  001E5A  6568               	cpfsgt	create_name@c& (0+255),b
  8396  001E5C  D044               	goto	l906
  8397                           
  8398                           ; BSR set to: 0
  8399  001E5E  0E2F               	movlw	47
  8400  001E60  1968               	xorwf	create_name@c& (0+255),w,b
  8401  001E62  B4D8               	btfsc	status,2,c
  8402  001E64  D040               	goto	l906
  8403                           
  8404                           ; BSR set to: 0
  8405                           ;pff.c: 602: if (c == '.' || i >= ni) {
  8406                           
  8407                           ; BSR set to: 0
  8408                           
  8409                           ; BSR set to: 0
  8410  001E66  0E2E               	movlw	46
  8411  001E68  1968               	xorwf	create_name@c& (0+255),w,b
  8412  001E6A  B4D8               	btfsc	status,2,c
  8413  001E6C  D004               	goto	u7380
  8414                           
  8415                           ; BSR set to: 0
  8416  001E6E  5163               	movf	create_name@ni& (0+255),w,b
  8417  001E70  5D67               	subwf	create_name@i& (0+255),w,b
  8418  001E72  A0D8               	btfss	status,0,c
  8419  001E74  D00D               	goto	l907
  8420  001E76                     u7380:
  8421                           
  8422                           ; BSR set to: 0
  8423                           ;pff.c: 603: if (ni != 8 || c != '.') break;
  8424                           
  8425                           ; BSR set to: 0
  8426  001E76  0E08               	movlw	8
  8427  001E78  1963               	xorwf	create_name@ni& (0+255),w,b
  8428  001E7A  A4D8               	btfss	status,2,c
  8429  001E7C  D034               	goto	l906
  8430                           
  8431                           ; BSR set to: 0
  8432  001E7E  0E2E               	movlw	46
  8433  001E80  1968               	xorwf	create_name@c& (0+255),w,b
  8434  001E82  A4D8               	btfss	status,2,c
  8435  001E84  D030               	goto	l906
  8436                           
  8437                           ; BSR set to: 0
  8438                           ;pff.c: 604: i = 8; ni = 11;
  8439                           
  8440                           ; BSR set to: 0
  8441                           
  8442                           ; BSR set to: 0
  8443  001E86  0E08               	movlw	8
  8444  001E88  6F67               	movwf	create_name@i& (0+255),b
  8445  001E8A  0E0B               	movlw	11
  8446  001E8C  6F63               	movwf	create_name@ni& (0+255),b
  8447                           
  8448                           ;pff.c: 605: continue;
  8449  001E8E  D7D2               	goto	l902
  8450  001E90                     l907:
  8451                           
  8452                           ; BSR set to: 0
  8453                           ;pff.c: 606: }
  8454                           ;pff.c: 609: if (c >= 0x80)
  8455                           
  8456                           ; BSR set to: 0
  8457  001E90  0E7F               	movlw	127
  8458  001E92  6568               	cpfsgt	create_name@c& (0+255),b
  8459  001E94  D014               	goto	l915
  8460                           
  8461                           ; BSR set to: 0
  8462                           ;pff.c: 610: c = cvt[c - 0x80];
  8463  001E96  0E80               	movlw	128
  8464  001E98  6E26               	movwf	??_create_name& (0+255),c
  8465  001E9A  0EFF               	movlw	255
  8466  001E9C  6E27               	movwf	(??_create_name+1)& (0+255),c
  8467  001E9E  5168               	movf	create_name@c& (0+255),w,b
  8468  001EA0  6E28               	movwf	(??_create_name+2)& (0+255),c
  8469  001EA2  6A29               	clrf	(??_create_name+3)& (0+255),c
  8470  001EA4  5026               	movf	??_create_name,w,c
  8471  001EA6  2628               	addwf	??_create_name+2,f,c
  8472  001EA8  5027               	movf	??_create_name+1,w,c
  8473  001EAA  2229               	addwfc	??_create_name+3,f,c
  8474  001EAC  0E67               	movlw	low create_name@cvt
  8475  001EAE  2428               	addwf	??_create_name+2,w,c
  8476  001EB0  6EF6               	movwf	tblptrl,c
  8477  001EB2  0E7E               	movlw	high create_name@cvt
  8478  001EB4  2029               	addwfc	??_create_name+3,w,c
  8479  001EB6  6EF7               	movwf	tblptrh,c
  8480  001EB8                     	if	0	;There are less than 3 active tblptr bytes
  8481  001EB8                     	endif
  8482  001EB8  0008               	tblrd		*
  8483  001EBA  CFF5 F068          	movff	tablat,create_name@c
  8484  001EBE                     l915:
  8485                           
  8486                           ; BSR set to: 0
  8487                           
  8488                           ; BSR set to: 0
  8489  001EBE  0E60               	movlw	96
  8490  001EC0  6568               	cpfsgt	create_name@c& (0+255),b
  8491  001EC2  D005               	goto	l917
  8492                           
  8493                           ; BSR set to: 0
  8494  001EC4  0E7B               	movlw	123
  8495  001EC6  6168               	cpfslt	create_name@c& (0+255),b
  8496  001EC8  D002               	goto	l917
  8497                           
  8498                           ; BSR set to: 0
  8499  001ECA  0E20               	movlw	32
  8500  001ECC  5F68               	subwf	create_name@c& (0+255),f,b
  8501  001ECE                     l917:
  8502                           
  8503                           ; BSR set to: 0
  8504                           ;pff.c: 620: sfn[i++] = c;
  8505                           
  8506                           ; BSR set to: 0
  8507  001ECE  5167               	movf	create_name@i& (0+255),w,b
  8508  001ED0  0D01               	mullw	1
  8509  001ED2  50F3               	movf	prodl,w,c
  8510  001ED4  2565               	addwf	create_name@sfn& (0+255),w,b
  8511  001ED6  6ED9               	movwf	fsr2l,c
  8512  001ED8  50F4               	movf	prodh,w,c
  8513  001EDA  2166               	addwfc	(create_name@sfn+1)& (0+255),w,b
  8514  001EDC  6EDA               	movwf	fsr2h,c
  8515  001EDE  C068  FFDF         	movff	create_name@c,indf2
  8516                           
  8517                           ; BSR set to: 0
  8518  001EE2  2B67               	incf	create_name@i& (0+255),f,b
  8519                           
  8520                           ; BSR set to: 0
  8521                           ;pff.c: 621: }
  8522                           ;pff.c: 622: }
  8523                           
  8524                           ; BSR set to: 0
  8525  001EE4  D7A7               	goto	l902
  8526  001EE6                     l906:
  8527                           
  8528                           ; BSR set to: 0
  8529                           ;pff.c: 623: *path = &p[si];
  8530                           
  8531                           ; BSR set to: 0
  8532  001EE6  5164               	movf	create_name@si& (0+255),w,b
  8533  001EE8  0D01               	mullw	1
  8534  001EEA  C061  F026         	movff	create_name@p,??_create_name
  8535  001EEE  C062  F027         	movff	create_name@p+1,??_create_name+1
  8536  001EF2  50F3               	movf	prodl,w,c
  8537  001EF4  2626               	addwf	??_create_name,f,c
  8538  001EF6  50F4               	movf	prodh,w,c
  8539  001EF8  2227               	addwfc	??_create_name+1,f,c
  8540  001EFA  C024  FFD9         	movff	create_name@path,fsr2l
  8541  001EFE  C025  FFDA         	movff	create_name@path+1,fsr2h
  8542  001F02  C026  FFDE         	movff	??_create_name,postinc2
  8543  001F06  C027  FFDD         	movff	??_create_name+1,postdec2
  8544                           
  8545                           ; BSR set to: 0
  8546                           ;pff.c: 625: sfn[11] = (c <= ' ') ? 1 : 0;
  8547  001F0A  EE20 F00B          	lfsr	2,11
  8548  001F0E  5165               	movf	create_name@sfn& (0+255),w,b
  8549  001F10  26D9               	addwf	fsr2l,f,c
  8550  001F12  5166               	movf	(create_name@sfn+1)& (0+255),w,b
  8551  001F14  22DA               	addwfc	fsr2h,f,c
  8552  001F16  0E20               	movlw	32
  8553  001F18  6568               	cpfsgt	create_name@c& (0+255),b
  8554  001F1A  D001               	goto	u7451
  8555  001F1C  D002               	goto	u7450
  8556  001F1E                     u7451:
  8557  001F1E  0E01               	movlw	1
  8558  001F20  D001               	goto	u7460
  8559  001F22                     u7450:
  8560  001F22  0E00               	movlw	0
  8561  001F24                     u7460:
  8562  001F24  6EDF               	movwf	indf2,c
  8563                           
  8564                           ; BSR set to: 0
  8565                           ;pff.c: 627: return FR_OK;
  8566  001F26  0E00               	movlw	0
  8567  001F28  0012               	return	
  8568  001F2A                     __end_of_create_name:
  8569                           	opt stack 0
  8570                           tosu	equ	0xFFF
  8571                           tosh	equ	0xFFE
  8572                           tosl	equ	0xFFD
  8573                           pclath	equ	0xFFA
  8574                           tblptru	equ	0xFF8
  8575                           tblptrh	equ	0xFF7
  8576                           tblptrl	equ	0xFF6
  8577                           tablat	equ	0xFF5
  8578                           prodh	equ	0xFF4
  8579                           prodl	equ	0xFF3
  8580                           intcon	equ	0xFF2
  8581                           intcon2	equ	0xFF1
  8582                           intcon3	equ	0xFF0
  8583                           postinc0	equ	0xFEE
  8584                           wreg	equ	0xFE8
  8585                           indf1	equ	0xFE7
  8586                           postinc1	equ	0xFE6
  8587                           postdec1	equ	0xFE5
  8588                           fsr1h	equ	0xFE2
  8589                           fsr1l	equ	0xFE1
  8590                           indf2	equ	0xFDF
  8591                           postinc2	equ	0xFDE
  8592                           postdec2	equ	0xFDD
  8593                           plusw2	equ	0xFDB
  8594                           fsr2h	equ	0xFDA
  8595                           fsr2l	equ	0xFD9
  8596                           status	equ	0xFD8
  8597                           
  8598 ;; *************** function _mem_set *****************
  8599 ;; Defined at:
  8600 ;;		line 329 in file "pff.c"
  8601 ;; Parameters:    Size  Location     Type
  8602 ;;  dst             2   25[COMRAM] PTR void 
  8603 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  8604 ;;  val             2   27[COMRAM] int 
  8605 ;;  cnt             2   29[COMRAM] int 
  8606 ;; Auto vars:     Size  Location     Type
  8607 ;;  d               2   31[COMRAM] PTR unsigned char 
  8608 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  8609 ;; Return value:  Size  Location     Type
  8610 ;;                  1    wreg      void 
  8611 ;; Registers used:
  8612 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8613 ;; Tracked objects:
  8614 ;;		On entry : 0/0
  8615 ;;		On exit  : 0/0
  8616 ;;		Unchanged: 0/0
  8617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8618 ;;      Params:         6       0       0       0       0       0       0       0       0
  8619 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8620 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8621 ;;      Totals:         8       0       0       0       0       0       0       0       0
  8622 ;;Total ram usage:        8 bytes
  8623 ;; Hardware stack levels used:    1
  8624 ;; Hardware stack levels required when called:    2
  8625 ;; This function calls:
  8626 ;;		Nothing
  8627 ;; This function is called by:
  8628 ;;		_create_name
  8629 ;; This function uses a non-reentrant model
  8630 ;;
  8631                           
  8632                           	psect	text35
  8633  003058                     __ptext35:
  8634                           	opt stack 0
  8635  003058                     _mem_set:
  8636                           	opt stack 23
  8637                           
  8638                           ;pff.c: 330: char *d = (char*)dst;
  8639                           
  8640                           ; BSR set to: 0
  8641                           ;incstack = 0
  8642  003058  C01A  F020         	movff	mem_set@dst,mem_set@d
  8643  00305C  C01B  F021         	movff	mem_set@dst+1,mem_set@d+1
  8644                           
  8645                           ;pff.c: 331: while (cnt--) *d++ = (char)val;
  8646  003060  D008               	goto	l808
  8647  003062                     l6350:
  8648  003062  C020  FFD9         	movff	mem_set@d,fsr2l
  8649  003066  C021  FFDA         	movff	mem_set@d+1,fsr2h
  8650  00306A  C01C  FFDF         	movff	mem_set@val,indf2
  8651  00306E  4A20               	infsnz	mem_set@d,f,c
  8652  003070  2A21               	incf	mem_set@d+1,f,c
  8653  003072                     l808:
  8654  003072  061E               	decf	mem_set@cnt,f,c
  8655  003074  A0D8               	btfss	status,0,c
  8656  003076  061F               	decf	mem_set@cnt+1,f,c
  8657  003078  281E               	incf	mem_set@cnt,w,c
  8658  00307A  E1F3               	bnz	l6350
  8659  00307C  281F               	incf	mem_set@cnt+1,w,c
  8660  00307E  B4D8               	btfsc	status,2,c
  8661  003080  0012               	return	
  8662  003082  D7EF               	goto	l809
  8663  003084                     __end_of_mem_set:
  8664                           	opt stack 0
  8665                           tosu	equ	0xFFF
  8666                           tosh	equ	0xFFE
  8667                           tosl	equ	0xFFD
  8668                           pclath	equ	0xFFA
  8669                           tblptru	equ	0xFF8
  8670                           tblptrh	equ	0xFF7
  8671                           tblptrl	equ	0xFF6
  8672                           tablat	equ	0xFF5
  8673                           prodh	equ	0xFF4
  8674                           prodl	equ	0xFF3
  8675                           intcon	equ	0xFF2
  8676                           intcon2	equ	0xFF1
  8677                           intcon3	equ	0xFF0
  8678                           postinc0	equ	0xFEE
  8679                           wreg	equ	0xFE8
  8680                           indf1	equ	0xFE7
  8681                           postinc1	equ	0xFE6
  8682                           postdec1	equ	0xFE5
  8683                           fsr1h	equ	0xFE2
  8684                           fsr1l	equ	0xFE1
  8685                           indf2	equ	0xFDF
  8686                           postinc2	equ	0xFDE
  8687                           postdec2	equ	0xFDD
  8688                           plusw2	equ	0xFDB
  8689                           fsr2h	equ	0xFDA
  8690                           fsr2l	equ	0xFD9
  8691                           status	equ	0xFD8
  8692                           
  8693 ;; *************** function _pf_mount *****************
  8694 ;; Defined at:
  8695 ;;		line 755 in file "pff.c"
  8696 ;; Parameters:    Size  Location     Type
  8697 ;;  fs              2   28[BANK0 ] PTR struct .
  8698 ;;		 -> SDCard@fs(42), 
  8699 ;; Auto vars:     Size  Location     Type
  8700 ;;  buf            36   52[BANK0 ] unsigned char [36]
  8701 ;;  fsize           4  100[BANK0 ] unsigned long 
  8702 ;;  bsect           4   96[BANK0 ] unsigned long 
  8703 ;;  mclst           4   92[BANK0 ] unsigned long 
  8704 ;;  tsect           4   88[BANK0 ] unsigned long 
  8705 ;;  fmt             1  104[BANK0 ] unsigned char 
  8706 ;; Return value:  Size  Location     Type
  8707 ;;                  1    wreg      enum E3838
  8708 ;; Registers used:
  8709 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8710 ;; Tracked objects:
  8711 ;;		On entry : 0/0
  8712 ;;		On exit  : 0/0
  8713 ;;		Unchanged: 0/0
  8714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8715 ;;      Params:         0       2       0       0       0       0       0       0       0
  8716 ;;      Locals:         0      53       0       0       0       0       0       0       0
  8717 ;;      Temps:          0      22       0       0       0       0       0       0       0
  8718 ;;      Totals:         0      77       0       0       0       0       0       0       0
  8719 ;;Total ram usage:       77 bytes
  8720 ;; Hardware stack levels used:    1
  8721 ;; Hardware stack levels required when called:    8
  8722 ;; This function calls:
  8723 ;;		___lldiv
  8724 ;;		___lmul
  8725 ;;		_check_fs
  8726 ;;		_disk_initialize
  8727 ;;		_disk_readp
  8728 ;; This function is called by:
  8729 ;;		_SDCard
  8730 ;; This function uses a non-reentrant model
  8731 ;;
  8732                           
  8733                           	psect	text36
  8734  000012                     __ptext36:
  8735                           	opt stack 0
  8736  000012                     _pf_mount:
  8737                           	opt stack 20
  8738                           
  8739                           ;pff.c: 759: BYTE fmt, buf[36];
  8740                           ;pff.c: 760: DWORD bsect, fsize, tsect, mclst;
  8741                           ;pff.c: 763: FatFs = 0;
  8742                           
  8743                           ;incstack = 0
  8744  000012  0E00               	movlw	0
  8745  000014  6E35               	movwf	_FatFs,c
  8746  000016  0E00               	movlw	0
  8747  000018  6E36               	movwf	_FatFs+1,c
  8748                           
  8749                           ;pff.c: 764: if (disk_initialize() & 0x01)
  8750  00001A  ECDB  F00A         	call	_disk_initialize	;wreg free
  8751  00001E  0100               	movlb	0	; () banked
  8752  000020  6F7E               	movwf	??_pf_mount& (0+255),b
  8753  000022  A17E               	btfss	??_pf_mount& (0+255),0,b
  8754  000024  D002               	goto	l955
  8755                           
  8756                           ; BSR set to: 0
  8757                           ;pff.c: 765: return FR_NOT_READY;
  8758  000026  0E02               	movlw	2
  8759                           
  8760                           ; BSR set to: 0
  8761  000028  0012               	return	
  8762  00002A                     l955:
  8763                           
  8764                           ; BSR set to: 0
  8765                           ;pff.c: 767: bsect = 0;
  8766                           
  8767                           ; BSR set to: 0
  8768  00002A  0E00               	movlw	0
  8769  00002C  6FC0               	movwf	pf_mount@bsect& (0+255),b
  8770  00002E  0E00               	movlw	0
  8771  000030  6FC1               	movwf	(pf_mount@bsect+1)& (0+255),b
  8772  000032  0E00               	movlw	0
  8773  000034  6FC2               	movwf	(pf_mount@bsect+2)& (0+255),b
  8774  000036  0E00               	movlw	0
  8775  000038  6FC3               	movwf	(pf_mount@bsect+3)& (0+255),b
  8776                           
  8777                           ; BSR set to: 0
  8778                           ;pff.c: 768: fmt = check_fs(buf, bsect);
  8779  00003A  0E94               	movlw	low pf_mount@buf
  8780  00003C  6F72               	movwf	check_fs@buf& (0+255),b
  8781  00003E  0E00               	movlw	high pf_mount@buf
  8782  000040  6F73               	movwf	(check_fs@buf+1)& (0+255),b
  8783  000042  C0C0  F074         	movff	pf_mount@bsect,check_fs@sect
  8784  000046  C0C1  F075         	movff	pf_mount@bsect+1,check_fs@sect+1
  8785  00004A  C0C2  F076         	movff	pf_mount@bsect+2,check_fs@sect+2
  8786  00004E  C0C3  F077         	movff	pf_mount@bsect+3,check_fs@sect+3
  8787  000052  EC9D  F00D         	call	_check_fs	;wreg free
  8788  000056  0100               	movlb	0	; () banked
  8789  000058  6FC8               	movwf	pf_mount@fmt& (0+255),b
  8790                           
  8791                           ; BSR set to: 0
  8792                           ;pff.c: 769: if (fmt == 1) {
  8793  00005A  05C8               	decf	pf_mount@fmt& (0+255),w,b
  8794  00005C  A4D8               	btfss	status,2,c
  8795  00005E  D068               	goto	l960
  8796                           
  8797                           ; BSR set to: 0
  8798                           ;pff.c: 771: if (disk_readp(buf, bsect, 446, 16)) {
  8799  000060  0E94               	movlw	low pf_mount@buf
  8800  000062  6F60               	movwf	disk_readp@rd& (0+255),b
  8801  000064  0E00               	movlw	high pf_mount@buf
  8802  000066  6F61               	movwf	(disk_readp@rd+1)& (0+255),b
  8803  000068  C0C0  F062         	movff	pf_mount@bsect,disk_readp@sector
  8804  00006C  C0C1  F063         	movff	pf_mount@bsect+1,disk_readp@sector+1
  8805  000070  C0C2  F064         	movff	pf_mount@bsect+2,disk_readp@sector+2
  8806  000074  C0C3  F065         	movff	pf_mount@bsect+3,disk_readp@sector+3
  8807  000078  0E01               	movlw	1
  8808  00007A  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
  8809  00007C  0EBE               	movlw	190
  8810  00007E  6F66               	movwf	disk_readp@offset& (0+255),b
  8811  000080  0E00               	movlw	0
  8812  000082  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  8813  000084  0E10               	movlw	16
  8814  000086  6F68               	movwf	disk_readp@count& (0+255),b
  8815  000088  EC3C  F009         	call	_disk_readp	;wreg free
  8816  00008C  0900               	iorlw	0
  8817  00008E  B4D8               	btfsc	status,2,c
  8818  000090  D002               	goto	l958
  8819                           
  8820                           ;pff.c: 772: fmt = 3;
  8821  000092  0E03               	movlw	3
  8822  000094  D04B               	goto	L4
  8823  000096                     l958:
  8824                           
  8825                           ;pff.c: 774: if (buf[4]) {
  8826                           
  8827                           ; BSR set to: 0
  8828  000096  0100               	movlb	0	; () banked
  8829  000098  5198               	movf	(pf_mount@buf+4)& (0+255),w,b
  8830  00009A  B4D8               	btfsc	status,2,c
  8831  00009C  D049               	goto	l960
  8832                           
  8833                           ; BSR set to: 0
  8834                           ;pff.c: 775: bsect = (DWORD)(((DWORD)*((BYTE*)(&buf[8])+3)<<24)|((DWORD)*((BYTE*)(&buf[8
      +                          ])+2)<<16)|((WORD)*((BYTE*)(&buf[8])+1)<<8)|*(BYTE*)(&buf[8]));
  8835  00009E  519D               	movf	(pf_mount@buf+9)& (0+255),w,b
  8836  0000A0  6F7F               	movwf	(??_pf_mount+1)& (0+255),b
  8837  0000A2  6B7E               	clrf	??_pf_mount& (0+255),b
  8838  0000A4  C09E  F080         	movff	pf_mount@buf+10,??_pf_mount+2
  8839  0000A8  6B81               	clrf	(??_pf_mount+3)& (0+255),b
  8840  0000AA  6B82               	clrf	(??_pf_mount+4)& (0+255),b
  8841  0000AC  6B83               	clrf	(??_pf_mount+5)& (0+255),b
  8842  0000AE  C081  F083         	movff	??_pf_mount+3,??_pf_mount+5
  8843  0000B2  C080  F082         	movff	??_pf_mount+2,??_pf_mount+4
  8844  0000B6  6B81               	clrf	(??_pf_mount+3)& (0+255),b
  8845  0000B8  6B80               	clrf	(??_pf_mount+2)& (0+255),b
  8846  0000BA  C09F  F084         	movff	pf_mount@buf+11,??_pf_mount+6
  8847  0000BE  6B85               	clrf	(??_pf_mount+7)& (0+255),b
  8848  0000C0  6B86               	clrf	(??_pf_mount+8)& (0+255),b
  8849  0000C2  6B87               	clrf	(??_pf_mount+9)& (0+255),b
  8850  0000C4  C084  F087         	movff	??_pf_mount+6,??_pf_mount+9
  8851  0000C8  6B86               	clrf	(??_pf_mount+8)& (0+255),b
  8852  0000CA  6B85               	clrf	(??_pf_mount+7)& (0+255),b
  8853  0000CC  6B84               	clrf	(??_pf_mount+6)& (0+255),b
  8854  0000CE  5180               	movf	(??_pf_mount+2)& (0+255),w,b
  8855  0000D0  1184               	iorwf	(??_pf_mount+6)& (0+255),w,b
  8856  0000D2  6F88               	movwf	(??_pf_mount+10)& (0+255),b
  8857  0000D4  5181               	movf	(??_pf_mount+3)& (0+255),w,b
  8858  0000D6  1185               	iorwf	(??_pf_mount+7)& (0+255),w,b
  8859  0000D8  6F89               	movwf	(??_pf_mount+11)& (0+255),b
  8860  0000DA  5182               	movf	(??_pf_mount+4)& (0+255),w,b
  8861  0000DC  1186               	iorwf	(??_pf_mount+8)& (0+255),w,b
  8862  0000DE  6F8A               	movwf	(??_pf_mount+12)& (0+255),b
  8863  0000E0  5183               	movf	(??_pf_mount+5)& (0+255),w,b
  8864  0000E2  1187               	iorwf	(??_pf_mount+9)& (0+255),w,b
  8865  0000E4  6F8B               	movwf	(??_pf_mount+13)& (0+255),b
  8866  0000E6  517E               	movf	??_pf_mount& (0+255),w,b
  8867  0000E8  1188               	iorwf	(??_pf_mount+10)& (0+255),w,b
  8868  0000EA  6F8C               	movwf	(??_pf_mount+14)& (0+255),b
  8869  0000EC  517F               	movf	(??_pf_mount+1)& (0+255),w,b
  8870  0000EE  1189               	iorwf	(??_pf_mount+11)& (0+255),w,b
  8871  0000F0  6F8D               	movwf	(??_pf_mount+15)& (0+255),b
  8872  0000F2  0E00               	movlw	0
  8873  0000F4  118A               	iorwf	(??_pf_mount+12)& (0+255),w,b
  8874  0000F6  6F8E               	movwf	(??_pf_mount+16)& (0+255),b
  8875  0000F8  0E00               	movlw	0
  8876  0000FA  118B               	iorwf	(??_pf_mount+13)& (0+255),w,b
  8877  0000FC  6F8F               	movwf	(??_pf_mount+17)& (0+255),b
  8878  0000FE  519C               	movf	(pf_mount@buf+8)& (0+255),w,b
  8879  000100  118C               	iorwf	(??_pf_mount+14)& (0+255),w,b
  8880  000102  6FC0               	movwf	pf_mount@bsect& (0+255),b
  8881  000104  518D               	movf	(??_pf_mount+15)& (0+255),w,b
  8882  000106  6FC1               	movwf	(pf_mount@bsect+1)& (0+255),b
  8883  000108  518E               	movf	(??_pf_mount+16)& (0+255),w,b
  8884  00010A  6FC2               	movwf	(pf_mount@bsect+2)& (0+255),b
  8885  00010C  518F               	movf	(??_pf_mount+17)& (0+255),w,b
  8886  00010E  6FC3               	movwf	(pf_mount@bsect+3)& (0+255),b
  8887                           
  8888                           ; BSR set to: 0
  8889                           ;pff.c: 776: fmt = check_fs(buf, bsect);
  8890  000110  0E94               	movlw	low pf_mount@buf
  8891  000112  6F72               	movwf	check_fs@buf& (0+255),b
  8892  000114  0E00               	movlw	high pf_mount@buf
  8893  000116  6F73               	movwf	(check_fs@buf+1)& (0+255),b
  8894  000118  C0C0  F074         	movff	pf_mount@bsect,check_fs@sect
  8895  00011C  C0C1  F075         	movff	pf_mount@bsect+1,check_fs@sect+1
  8896  000120  C0C2  F076         	movff	pf_mount@bsect+2,check_fs@sect+2
  8897  000124  C0C3  F077         	movff	pf_mount@bsect+3,check_fs@sect+3
  8898  000128  EC9D  F00D         	call	_check_fs	;wreg free
  8899  00012C                     L4:
  8900  00012C  0100               	movlb	0	; () banked
  8901  00012E  6FC8               	movwf	pf_mount@fmt& (0+255),b
  8902  000130                     l960:
  8903                           
  8904                           ; BSR set to: 0
  8905                           ;pff.c: 777: }
  8906                           ;pff.c: 778: }
  8907                           ;pff.c: 779: }
  8908                           ;pff.c: 780: if (fmt == 3) return FR_DISK_ERR;
  8909                           
  8910                           ; BSR set to: 0
  8911                           
  8912                           ; BSR set to: 0
  8913                           
  8914                           ; BSR set to: 0
  8915  000130  0E03               	movlw	3
  8916  000132  19C8               	xorwf	pf_mount@fmt& (0+255),w,b
  8917  000134  A4D8               	btfss	status,2,c
  8918  000136  D002               	goto	l961
  8919                           
  8920                           ; BSR set to: 0
  8921  000138  0E01               	movlw	1
  8922                           
  8923                           ; BSR set to: 0
  8924  00013A  0012               	return	
  8925  00013C                     l961:
  8926                           
  8927                           ; BSR set to: 0
  8928                           ;pff.c: 781: if (fmt) return FR_NO_FILESYSTEM;
  8929                           
  8930                           ; BSR set to: 0
  8931  00013C  51C8               	movf	pf_mount@fmt& (0+255),w,b
  8932  00013E  B4D8               	btfsc	status,2,c
  8933  000140  D002               	goto	l962
  8934                           
  8935                           ; BSR set to: 0
  8936  000142  0E06               	movlw	6
  8937                           
  8938                           ; BSR set to: 0
  8939  000144  0012               	return	
  8940  000146                     l962:
  8941                           
  8942                           ; BSR set to: 0
  8943                           ;pff.c: 784: if (disk_readp(buf, bsect, 13, sizeof (buf))) return FR_DISK_ERR;
  8944                           
  8945                           ; BSR set to: 0
  8946  000146  0E94               	movlw	low pf_mount@buf
  8947  000148  6F60               	movwf	disk_readp@rd& (0+255),b
  8948  00014A  0E00               	movlw	high pf_mount@buf
  8949  00014C  6F61               	movwf	(disk_readp@rd+1)& (0+255),b
  8950  00014E  C0C0  F062         	movff	pf_mount@bsect,disk_readp@sector
  8951  000152  C0C1  F063         	movff	pf_mount@bsect+1,disk_readp@sector+1
  8952  000156  C0C2  F064         	movff	pf_mount@bsect+2,disk_readp@sector+2
  8953  00015A  C0C3  F065         	movff	pf_mount@bsect+3,disk_readp@sector+3
  8954  00015E  0E00               	movlw	0
  8955  000160  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
  8956  000162  0E0D               	movlw	13
  8957  000164  6F66               	movwf	disk_readp@offset& (0+255),b
  8958  000166  0E00               	movlw	0
  8959  000168  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  8960  00016A  0E24               	movlw	36
  8961  00016C  6F68               	movwf	disk_readp@count& (0+255),b
  8962  00016E  EC3C  F009         	call	_disk_readp	;wreg free
  8963  000172  0900               	iorlw	0
  8964  000174  B4D8               	btfsc	status,2,c
  8965  000176  D002               	goto	l963
  8966  000178  0E01               	movlw	1
  8967  00017A  0012               	return	
  8968  00017C                     l963:
  8969                           
  8970                           ;pff.c: 786: fsize = (WORD)(((WORD)*((BYTE*)(buf+22-13)+1)<<8)|(WORD)*(BYTE*)(buf+22-13)
      +                          );
  8971  00017C  0100               	movlb	0	; () banked
  8972  00017E  519D               	movf	(pf_mount@buf+9)& (0+255),w,b
  8973  000180  C09E  F07E         	movff	pf_mount@buf+10,??_pf_mount
  8974  000184  6B7F               	clrf	(??_pf_mount+1)& (0+255),b
  8975  000186  C07E  F07F         	movff	??_pf_mount,??_pf_mount+1
  8976  00018A  6B7E               	clrf	??_pf_mount& (0+255),b
  8977  00018C  137E               	iorwf	??_pf_mount& (0+255),f,b
  8978  00018E  0E00               	movlw	0
  8979  000190  137F               	iorwf	(??_pf_mount+1)& (0+255),f,b
  8980  000192  C07E  F0C4         	movff	??_pf_mount,pf_mount@fsize
  8981  000196  C07F  F0C5         	movff	??_pf_mount+1,pf_mount@fsize+1
  8982  00019A  6BC6               	clrf	(pf_mount@fsize+2)& (0+255),b
  8983  00019C  6BC7               	clrf	(pf_mount@fsize+3)& (0+255),b
  8984                           
  8985                           ;pff.c: 787: if (!fsize) fsize = (DWORD)(((DWORD)*((BYTE*)(buf+36-13)+3)<<24)|((DWORD)*(
      +                          (BYTE*)(buf+36-13)+2)<<16)|((WORD)*((BYTE*)(buf+36-13)+1)<<8)|*(BYTE*)(buf+36-13));
  8986  00019E  51C4               	movf	pf_mount@fsize& (0+255),w,b
  8987  0001A0  11C5               	iorwf	(pf_mount@fsize+1)& (0+255),w,b
  8988  0001A2  11C6               	iorwf	(pf_mount@fsize+2)& (0+255),w,b
  8989  0001A4  11C7               	iorwf	(pf_mount@fsize+3)& (0+255),w,b
  8990  0001A6  A4D8               	btfss	status,2,c
  8991  0001A8  D039               	goto	l964
  8992                           
  8993                           ; BSR set to: 0
  8994  0001AA  51AC               	movf	(pf_mount@buf+24)& (0+255),w,b
  8995  0001AC  6F7F               	movwf	(??_pf_mount+1)& (0+255),b
  8996  0001AE  6B7E               	clrf	??_pf_mount& (0+255),b
  8997  0001B0  C0AD  F080         	movff	pf_mount@buf+25,??_pf_mount+2
  8998  0001B4  6B81               	clrf	(??_pf_mount+3)& (0+255),b
  8999  0001B6  6B82               	clrf	(??_pf_mount+4)& (0+255),b
  9000  0001B8  6B83               	clrf	(??_pf_mount+5)& (0+255),b
  9001  0001BA  C081  F083         	movff	??_pf_mount+3,??_pf_mount+5
  9002  0001BE  C080  F082         	movff	??_pf_mount+2,??_pf_mount+4
  9003  0001C2  6B81               	clrf	(??_pf_mount+3)& (0+255),b
  9004  0001C4  6B80               	clrf	(??_pf_mount+2)& (0+255),b
  9005  0001C6  C0AE  F084         	movff	pf_mount@buf+26,??_pf_mount+6
  9006  0001CA  6B85               	clrf	(??_pf_mount+7)& (0+255),b
  9007  0001CC  6B86               	clrf	(??_pf_mount+8)& (0+255),b
  9008  0001CE  6B87               	clrf	(??_pf_mount+9)& (0+255),b
  9009  0001D0  C084  F087         	movff	??_pf_mount+6,??_pf_mount+9
  9010  0001D4  6B86               	clrf	(??_pf_mount+8)& (0+255),b
  9011  0001D6  6B85               	clrf	(??_pf_mount+7)& (0+255),b
  9012  0001D8  6B84               	clrf	(??_pf_mount+6)& (0+255),b
  9013  0001DA  5180               	movf	(??_pf_mount+2)& (0+255),w,b
  9014  0001DC  1184               	iorwf	(??_pf_mount+6)& (0+255),w,b
  9015  0001DE  6F88               	movwf	(??_pf_mount+10)& (0+255),b
  9016  0001E0  5181               	movf	(??_pf_mount+3)& (0+255),w,b
  9017  0001E2  1185               	iorwf	(??_pf_mount+7)& (0+255),w,b
  9018  0001E4  6F89               	movwf	(??_pf_mount+11)& (0+255),b
  9019  0001E6  5182               	movf	(??_pf_mount+4)& (0+255),w,b
  9020  0001E8  1186               	iorwf	(??_pf_mount+8)& (0+255),w,b
  9021  0001EA  6F8A               	movwf	(??_pf_mount+12)& (0+255),b
  9022  0001EC  5183               	movf	(??_pf_mount+5)& (0+255),w,b
  9023  0001EE  1187               	iorwf	(??_pf_mount+9)& (0+255),w,b
  9024  0001F0  6F8B               	movwf	(??_pf_mount+13)& (0+255),b
  9025  0001F2  517E               	movf	??_pf_mount& (0+255),w,b
  9026  0001F4  1188               	iorwf	(??_pf_mount+10)& (0+255),w,b
  9027  0001F6  6F8C               	movwf	(??_pf_mount+14)& (0+255),b
  9028  0001F8  517F               	movf	(??_pf_mount+1)& (0+255),w,b
  9029  0001FA  1189               	iorwf	(??_pf_mount+11)& (0+255),w,b
  9030  0001FC  6F8D               	movwf	(??_pf_mount+15)& (0+255),b
  9031  0001FE  0E00               	movlw	0
  9032  000200  118A               	iorwf	(??_pf_mount+12)& (0+255),w,b
  9033  000202  6F8E               	movwf	(??_pf_mount+16)& (0+255),b
  9034  000204  0E00               	movlw	0
  9035  000206  118B               	iorwf	(??_pf_mount+13)& (0+255),w,b
  9036  000208  6F8F               	movwf	(??_pf_mount+17)& (0+255),b
  9037  00020A  51AB               	movf	(pf_mount@buf+23)& (0+255),w,b
  9038  00020C  118C               	iorwf	(??_pf_mount+14)& (0+255),w,b
  9039  00020E  6FC4               	movwf	pf_mount@fsize& (0+255),b
  9040  000210  518D               	movf	(??_pf_mount+15)& (0+255),w,b
  9041  000212  6FC5               	movwf	(pf_mount@fsize+1)& (0+255),b
  9042  000214  518E               	movf	(??_pf_mount+16)& (0+255),w,b
  9043  000216  6FC6               	movwf	(pf_mount@fsize+2)& (0+255),b
  9044  000218  518F               	movf	(??_pf_mount+17)& (0+255),w,b
  9045  00021A  6FC7               	movwf	(pf_mount@fsize+3)& (0+255),b
  9046  00021C                     l964:
  9047                           
  9048                           ; BSR set to: 0
  9049                           ;pff.c: 789: fsize *= buf[16-13];
  9050                           
  9051                           ; BSR set to: 0
  9052  00021C  C0C4  F01A         	movff	pf_mount@fsize,___lmul@multiplier
  9053  000220  C0C5  F01B         	movff	pf_mount@fsize+1,___lmul@multiplier+1
  9054  000224  C0C6  F01C         	movff	pf_mount@fsize+2,___lmul@multiplier+2
  9055  000228  C0C7  F01D         	movff	pf_mount@fsize+3,___lmul@multiplier+3
  9056  00022C  5197               	movf	(pf_mount@buf+3)& (0+255),w,b
  9057  00022E  6E1E               	movwf	___lmul@multiplicand,c
  9058  000230  6A1F               	clrf	___lmul@multiplicand+1,c
  9059  000232  6A20               	clrf	___lmul@multiplicand+2,c
  9060  000234  6A21               	clrf	___lmul@multiplicand+3,c
  9061  000236  EC16  F017         	call	___lmul	;wreg free
  9062  00023A  C01A  F0C4         	movff	?___lmul,pf_mount@fsize
  9063  00023E  C01B  F0C5         	movff	?___lmul+1,pf_mount@fsize+1
  9064  000242  C01C  F0C6         	movff	?___lmul+2,pf_mount@fsize+2
  9065  000246  C01D  F0C7         	movff	?___lmul+3,pf_mount@fsize+3
  9066                           
  9067                           ;pff.c: 790: fs->fatbase = bsect + (WORD)(((WORD)*((BYTE*)(buf+14-13)+1)<<8)|(WORD)*(BYT
      +                          E*)(buf+14-13));
  9068  00024A  0100               	movlb	0	; () banked
  9069  00024C  5195               	movf	(pf_mount@buf+1)& (0+255),w,b
  9070  00024E  C096  F07E         	movff	pf_mount@buf+2,??_pf_mount
  9071  000252  6B7F               	clrf	(??_pf_mount+1)& (0+255),b
  9072  000254  C07E  F07F         	movff	??_pf_mount,??_pf_mount+1
  9073  000258  6B7E               	clrf	??_pf_mount& (0+255),b
  9074  00025A  137E               	iorwf	??_pf_mount& (0+255),f,b
  9075  00025C  0E00               	movlw	0
  9076  00025E  137F               	iorwf	(??_pf_mount+1)& (0+255),f,b
  9077  000260  517E               	movf	??_pf_mount& (0+255),w,b
  9078  000262  25C0               	addwf	pf_mount@bsect& (0+255),w,b
  9079  000264  6F80               	movwf	(??_pf_mount+2)& (0+255),b
  9080  000266  517F               	movf	(??_pf_mount+1)& (0+255),w,b
  9081  000268  21C1               	addwfc	(pf_mount@bsect+1)& (0+255),w,b
  9082  00026A  6F81               	movwf	(??_pf_mount+3)& (0+255),b
  9083  00026C  0E00               	movlw	0
  9084  00026E  21C2               	addwfc	(pf_mount@bsect+2)& (0+255),w,b
  9085  000270  6F82               	movwf	(??_pf_mount+4)& (0+255),b
  9086  000272  0E00               	movlw	0
  9087  000274  21C3               	addwfc	(pf_mount@bsect+3)& (0+255),w,b
  9088  000276  6F83               	movwf	(??_pf_mount+5)& (0+255),b
  9089  000278  EE20 F00A          	lfsr	2,10
  9090  00027C  517C               	movf	pf_mount@fs& (0+255),w,b
  9091  00027E  26D9               	addwf	fsr2l,f,c
  9092  000280  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9093  000282  22DA               	addwfc	fsr2h,f,c
  9094  000284  C080  FFDE         	movff	??_pf_mount+2,postinc2
  9095  000288  C081  FFDE         	movff	??_pf_mount+3,postinc2
  9096  00028C  C082  FFDE         	movff	??_pf_mount+4,postinc2
  9097  000290  C083  FFDE         	movff	??_pf_mount+5,postinc2
  9098                           
  9099                           ; BSR set to: 0
  9100                           ;pff.c: 791: fs->csize = buf[13-13];
  9101  000294  EE20 F002          	lfsr	2,2
  9102  000298  517C               	movf	pf_mount@fs& (0+255),w,b
  9103  00029A  26D9               	addwf	fsr2l,f,c
  9104  00029C  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9105  00029E  22DA               	addwfc	fsr2h,f,c
  9106  0002A0  C094  FFDF         	movff	pf_mount@buf,indf2
  9107                           
  9108                           ; BSR set to: 0
  9109                           ;pff.c: 792: fs->n_rootdir = (WORD)(((WORD)*((BYTE*)(buf+17-13)+1)<<8)|(WORD)*(BYTE*)(bu
      +                          f+17-13));
  9110  0002A4  5198               	movf	(pf_mount@buf+4)& (0+255),w,b
  9111  0002A6  C099  F07E         	movff	pf_mount@buf+5,??_pf_mount
  9112  0002AA  6B7F               	clrf	(??_pf_mount+1)& (0+255),b
  9113  0002AC  C07E  F07F         	movff	??_pf_mount,??_pf_mount+1
  9114  0002B0  6B7E               	clrf	??_pf_mount& (0+255),b
  9115  0002B2  137E               	iorwf	??_pf_mount& (0+255),f,b
  9116  0002B4  0E00               	movlw	0
  9117  0002B6  137F               	iorwf	(??_pf_mount+1)& (0+255),f,b
  9118  0002B8  EE20 F004          	lfsr	2,4
  9119  0002BC  517C               	movf	pf_mount@fs& (0+255),w,b
  9120  0002BE  26D9               	addwf	fsr2l,f,c
  9121  0002C0  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9122  0002C2  22DA               	addwfc	fsr2h,f,c
  9123  0002C4  C07E  FFDE         	movff	??_pf_mount,postinc2
  9124  0002C8  C07F  FFDD         	movff	??_pf_mount+1,postdec2
  9125                           
  9126                           ; BSR set to: 0
  9127                           ;pff.c: 793: tsect = (WORD)(((WORD)*((BYTE*)(buf+19-13)+1)<<8)|(WORD)*(BYTE*)(buf+19-13)
      +                          );
  9128  0002CC  519A               	movf	(pf_mount@buf+6)& (0+255),w,b
  9129  0002CE  C09B  F07E         	movff	pf_mount@buf+7,??_pf_mount
  9130  0002D2  6B7F               	clrf	(??_pf_mount+1)& (0+255),b
  9131  0002D4  C07E  F07F         	movff	??_pf_mount,??_pf_mount+1
  9132  0002D8  6B7E               	clrf	??_pf_mount& (0+255),b
  9133  0002DA  137E               	iorwf	??_pf_mount& (0+255),f,b
  9134  0002DC  0E00               	movlw	0
  9135  0002DE  137F               	iorwf	(??_pf_mount+1)& (0+255),f,b
  9136  0002E0  C07E  F0B8         	movff	??_pf_mount,pf_mount@tsect
  9137  0002E4  C07F  F0B9         	movff	??_pf_mount+1,pf_mount@tsect+1
  9138  0002E8  6BBA               	clrf	(pf_mount@tsect+2)& (0+255),b
  9139  0002EA  6BBB               	clrf	(pf_mount@tsect+3)& (0+255),b
  9140                           
  9141                           ; BSR set to: 0
  9142                           ;pff.c: 794: if (!tsect) tsect = (DWORD)(((DWORD)*((BYTE*)(buf+32-13)+3)<<24)|((DWORD)*(
      +                          (BYTE*)(buf+32-13)+2)<<16)|((WORD)*((BYTE*)(buf+32-13)+1)<<8)|*(BYTE*)(buf+32-13));
  9143  0002EC  51B8               	movf	pf_mount@tsect& (0+255),w,b
  9144  0002EE  11B9               	iorwf	(pf_mount@tsect+1)& (0+255),w,b
  9145  0002F0  11BA               	iorwf	(pf_mount@tsect+2)& (0+255),w,b
  9146  0002F2  11BB               	iorwf	(pf_mount@tsect+3)& (0+255),w,b
  9147  0002F4  A4D8               	btfss	status,2,c
  9148  0002F6  D039               	goto	l965
  9149                           
  9150                           ; BSR set to: 0
  9151  0002F8  51A8               	movf	(pf_mount@buf+20)& (0+255),w,b
  9152  0002FA  6F7F               	movwf	(??_pf_mount+1)& (0+255),b
  9153  0002FC  6B7E               	clrf	??_pf_mount& (0+255),b
  9154  0002FE  C0A9  F080         	movff	pf_mount@buf+21,??_pf_mount+2
  9155  000302  6B81               	clrf	(??_pf_mount+3)& (0+255),b
  9156  000304  6B82               	clrf	(??_pf_mount+4)& (0+255),b
  9157  000306  6B83               	clrf	(??_pf_mount+5)& (0+255),b
  9158  000308  C081  F083         	movff	??_pf_mount+3,??_pf_mount+5
  9159  00030C  C080  F082         	movff	??_pf_mount+2,??_pf_mount+4
  9160  000310  6B81               	clrf	(??_pf_mount+3)& (0+255),b
  9161  000312  6B80               	clrf	(??_pf_mount+2)& (0+255),b
  9162  000314  C0AA  F084         	movff	pf_mount@buf+22,??_pf_mount+6
  9163  000318  6B85               	clrf	(??_pf_mount+7)& (0+255),b
  9164  00031A  6B86               	clrf	(??_pf_mount+8)& (0+255),b
  9165  00031C  6B87               	clrf	(??_pf_mount+9)& (0+255),b
  9166  00031E  C084  F087         	movff	??_pf_mount+6,??_pf_mount+9
  9167  000322  6B86               	clrf	(??_pf_mount+8)& (0+255),b
  9168  000324  6B85               	clrf	(??_pf_mount+7)& (0+255),b
  9169  000326  6B84               	clrf	(??_pf_mount+6)& (0+255),b
  9170  000328  5180               	movf	(??_pf_mount+2)& (0+255),w,b
  9171  00032A  1184               	iorwf	(??_pf_mount+6)& (0+255),w,b
  9172  00032C  6F88               	movwf	(??_pf_mount+10)& (0+255),b
  9173  00032E  5181               	movf	(??_pf_mount+3)& (0+255),w,b
  9174  000330  1185               	iorwf	(??_pf_mount+7)& (0+255),w,b
  9175  000332  6F89               	movwf	(??_pf_mount+11)& (0+255),b
  9176  000334  5182               	movf	(??_pf_mount+4)& (0+255),w,b
  9177  000336  1186               	iorwf	(??_pf_mount+8)& (0+255),w,b
  9178  000338  6F8A               	movwf	(??_pf_mount+12)& (0+255),b
  9179  00033A  5183               	movf	(??_pf_mount+5)& (0+255),w,b
  9180  00033C  1187               	iorwf	(??_pf_mount+9)& (0+255),w,b
  9181  00033E  6F8B               	movwf	(??_pf_mount+13)& (0+255),b
  9182  000340  517E               	movf	??_pf_mount& (0+255),w,b
  9183  000342  1188               	iorwf	(??_pf_mount+10)& (0+255),w,b
  9184  000344  6F8C               	movwf	(??_pf_mount+14)& (0+255),b
  9185  000346  517F               	movf	(??_pf_mount+1)& (0+255),w,b
  9186  000348  1189               	iorwf	(??_pf_mount+11)& (0+255),w,b
  9187  00034A  6F8D               	movwf	(??_pf_mount+15)& (0+255),b
  9188  00034C  0E00               	movlw	0
  9189  00034E  118A               	iorwf	(??_pf_mount+12)& (0+255),w,b
  9190  000350  6F8E               	movwf	(??_pf_mount+16)& (0+255),b
  9191  000352  0E00               	movlw	0
  9192  000354  118B               	iorwf	(??_pf_mount+13)& (0+255),w,b
  9193  000356  6F8F               	movwf	(??_pf_mount+17)& (0+255),b
  9194  000358  51A7               	movf	(pf_mount@buf+19)& (0+255),w,b
  9195  00035A  118C               	iorwf	(??_pf_mount+14)& (0+255),w,b
  9196  00035C  6FB8               	movwf	pf_mount@tsect& (0+255),b
  9197  00035E  518D               	movf	(??_pf_mount+15)& (0+255),w,b
  9198  000360  6FB9               	movwf	(pf_mount@tsect+1)& (0+255),b
  9199  000362  518E               	movf	(??_pf_mount+16)& (0+255),w,b
  9200  000364  6FBA               	movwf	(pf_mount@tsect+2)& (0+255),b
  9201  000366  518F               	movf	(??_pf_mount+17)& (0+255),w,b
  9202  000368  6FBB               	movwf	(pf_mount@tsect+3)& (0+255),b
  9203  00036A                     l965:
  9204                           
  9205                           ; BSR set to: 0
  9206                           ;pff.c: 795: mclst = (tsect
  9207                           ;pff.c: 796: - (WORD)(((WORD)*((BYTE*)(buf+14-13)+1)<<8)|(WORD)*(BYTE*)(buf+14-13)) - fs
      +                          ize - fs->n_rootdir / 16
  9208                           ;pff.c: 797: ) / fs->csize + 2;
  9209                           
  9210                           ; BSR set to: 0
  9211  00036A  EE20 F004          	lfsr	2,4
  9212  00036E  517C               	movf	pf_mount@fs& (0+255),w,b
  9213  000370  26D9               	addwf	fsr2l,f,c
  9214  000372  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9215  000374  22DA               	addwfc	fsr2h,f,c
  9216  000376  CFDE F07E          	movff	postinc2,??_pf_mount
  9217  00037A  CFDD F07F          	movff	postdec2,??_pf_mount+1
  9218  00037E  0E04               	movlw	4
  9219  000380  6F80               	movwf	(??_pf_mount+2)& (0+255),b
  9220  000382                     u7845:
  9221  000382  90D8               	bcf	status,0,c
  9222  000384  337F               	rrcf	(??_pf_mount+1)& (0+255),f,b
  9223  000386  337E               	rrcf	??_pf_mount& (0+255),f,b
  9224  000388  2F80               	decfsz	(??_pf_mount+2)& (0+255),f,b
  9225  00038A  D7FB               	goto	u7845
  9226  00038C  5195               	movf	(pf_mount@buf+1)& (0+255),w,b
  9227  00038E  C096  F081         	movff	pf_mount@buf+2,??_pf_mount+3
  9228  000392  6B82               	clrf	(??_pf_mount+4)& (0+255),b
  9229  000394  C081  F082         	movff	??_pf_mount+3,??_pf_mount+4
  9230  000398  6B81               	clrf	(??_pf_mount+3)& (0+255),b
  9231  00039A  1381               	iorwf	(??_pf_mount+3)& (0+255),f,b
  9232  00039C  0E00               	movlw	0
  9233  00039E  1382               	iorwf	(??_pf_mount+4)& (0+255),f,b
  9234  0003A0  5181               	movf	(??_pf_mount+3)& (0+255),w,b
  9235  0003A2  257E               	addwf	??_pf_mount& (0+255),w,b
  9236  0003A4  6F83               	movwf	(??_pf_mount+5)& (0+255),b
  9237  0003A6  5182               	movf	(??_pf_mount+4)& (0+255),w,b
  9238  0003A8  217F               	addwfc	(??_pf_mount+1)& (0+255),w,b
  9239  0003AA  6F84               	movwf	(??_pf_mount+6)& (0+255),b
  9240  0003AC  6B85               	clrf	(??_pf_mount+7)& (0+255),b
  9241  0003AE  B0D8               	btfsc	status,0,c
  9242  0003B0  2B85               	incf	(??_pf_mount+7)& (0+255),f,b
  9243  0003B2  6B86               	clrf	(??_pf_mount+8)& (0+255),b
  9244  0003B4  51C4               	movf	pf_mount@fsize& (0+255),w,b
  9245  0003B6  2583               	addwf	(??_pf_mount+5)& (0+255),w,b
  9246  0003B8  6F87               	movwf	(??_pf_mount+9)& (0+255),b
  9247  0003BA  51C5               	movf	(pf_mount@fsize+1)& (0+255),w,b
  9248  0003BC  2184               	addwfc	(??_pf_mount+6)& (0+255),w,b
  9249  0003BE  6F88               	movwf	(??_pf_mount+10)& (0+255),b
  9250  0003C0  51C6               	movf	(pf_mount@fsize+2)& (0+255),w,b
  9251  0003C2  2185               	addwfc	(??_pf_mount+7)& (0+255),w,b
  9252  0003C4  6F89               	movwf	(??_pf_mount+11)& (0+255),b
  9253  0003C6  51C7               	movf	(pf_mount@fsize+3)& (0+255),w,b
  9254  0003C8  2186               	addwfc	(??_pf_mount+8)& (0+255),w,b
  9255  0003CA  6F8A               	movwf	(??_pf_mount+12)& (0+255),b
  9256  0003CC  1F87               	comf	(??_pf_mount+9)& (0+255),f,b
  9257  0003CE  1F88               	comf	(??_pf_mount+10)& (0+255),f,b
  9258  0003D0  1F89               	comf	(??_pf_mount+11)& (0+255),f,b
  9259  0003D2  1F8A               	comf	(??_pf_mount+12)& (0+255),f,b
  9260  0003D4  2B87               	incf	(??_pf_mount+9)& (0+255),f,b
  9261  0003D6  0E00               	movlw	0
  9262  0003D8  2388               	addwfc	(??_pf_mount+10)& (0+255),f,b
  9263  0003DA  2389               	addwfc	(??_pf_mount+11)& (0+255),f,b
  9264  0003DC  238A               	addwfc	(??_pf_mount+12)& (0+255),f,b
  9265  0003DE  51B8               	movf	pf_mount@tsect& (0+255),w,b
  9266  0003E0  2587               	addwf	(??_pf_mount+9)& (0+255),w,b
  9267  0003E2  6E1A               	movwf	___lldiv@dividend,c
  9268  0003E4  51B9               	movf	(pf_mount@tsect+1)& (0+255),w,b
  9269  0003E6  2188               	addwfc	(??_pf_mount+10)& (0+255),w,b
  9270  0003E8  6E1B               	movwf	___lldiv@dividend+1,c
  9271  0003EA  51BA               	movf	(pf_mount@tsect+2)& (0+255),w,b
  9272  0003EC  2189               	addwfc	(??_pf_mount+11)& (0+255),w,b
  9273  0003EE  6E1C               	movwf	___lldiv@dividend+2,c
  9274  0003F0  51BB               	movf	(pf_mount@tsect+3)& (0+255),w,b
  9275  0003F2  218A               	addwfc	(??_pf_mount+12)& (0+255),w,b
  9276  0003F4  6E1D               	movwf	___lldiv@dividend+3,c
  9277  0003F6  EE20 F002          	lfsr	2,2
  9278  0003FA  517C               	movf	pf_mount@fs& (0+255),w,b
  9279  0003FC  26D9               	addwf	fsr2l,f,c
  9280  0003FE  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9281  000400  22DA               	addwfc	fsr2h,f,c
  9282  000402  50DF               	movf	indf2,w,c
  9283  000404  6F8B               	movwf	(??_pf_mount+13)& (0+255),b
  9284  000406  518B               	movf	(??_pf_mount+13)& (0+255),w,b
  9285  000408  6E1E               	movwf	___lldiv@divisor,c
  9286  00040A  6A1F               	clrf	___lldiv@divisor+1,c
  9287  00040C  6A20               	clrf	___lldiv@divisor+2,c
  9288  00040E  6A21               	clrf	___lldiv@divisor+3,c
  9289  000410  EC55  F015         	call	___lldiv	;wreg free
  9290  000414  0E02               	movlw	2
  9291  000416  241A               	addwf	?___lldiv,w,c
  9292  000418  0100               	movlb	0	; () banked
  9293  00041A  6FBC               	movwf	pf_mount@mclst& (0+255),b
  9294  00041C  0E00               	movlw	0
  9295  00041E  201B               	addwfc	?___lldiv+1,w,c
  9296  000420  6FBD               	movwf	(pf_mount@mclst+1)& (0+255),b
  9297  000422  0E00               	movlw	0
  9298  000424  201C               	addwfc	?___lldiv+2,w,c
  9299  000426  6FBE               	movwf	(pf_mount@mclst+2)& (0+255),b
  9300  000428  0E00               	movlw	0
  9301  00042A  201D               	addwfc	?___lldiv+3,w,c
  9302  00042C  6FBF               	movwf	(pf_mount@mclst+3)& (0+255),b
  9303                           
  9304                           ; BSR set to: 0
  9305                           ;pff.c: 798: fs->n_fatent = (DWORD)mclst;
  9306  00042E  EE20 F006          	lfsr	2,6
  9307  000432  517C               	movf	pf_mount@fs& (0+255),w,b
  9308  000434  26D9               	addwf	fsr2l,f,c
  9309  000436  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9310  000438  22DA               	addwfc	fsr2h,f,c
  9311  00043A  C0BC  FFDE         	movff	pf_mount@mclst,postinc2
  9312  00043E  C0BD  FFDE         	movff	pf_mount@mclst+1,postinc2
  9313  000442  C0BE  FFDE         	movff	pf_mount@mclst+2,postinc2
  9314  000446  C0BF  FFDE         	movff	pf_mount@mclst+3,postinc2
  9315                           
  9316                           ; BSR set to: 0
  9317                           ;pff.c: 801: if (1 && mclst < 0xFF7)
  9318  00044A  0E00               	movlw	0
  9319  00044C  6FC8               	movwf	pf_mount@fmt& (0+255),b
  9320                           
  9321                           ; BSR set to: 0
  9322  00044E  51BF               	movf	(pf_mount@mclst+3)& (0+255),w,b
  9323  000450  11BE               	iorwf	(pf_mount@mclst+2)& (0+255),w,b
  9324  000452  E108               	bnz	l6936
  9325  000454  0EF7               	movlw	247
  9326  000456  5DBC               	subwf	pf_mount@mclst& (0+255),w,b
  9327  000458  0E0F               	movlw	15
  9328  00045A  59BD               	subwfb	(pf_mount@mclst+1)& (0+255),w,b
  9329  00045C  B0D8               	btfsc	status,0,c
  9330  00045E  D002               	goto	l966
  9331                           
  9332                           ; BSR set to: 0
  9333                           ;pff.c: 802: fmt = 1;
  9334  000460  0E01               	movlw	1
  9335  000462  6FC8               	movwf	pf_mount@fmt& (0+255),b
  9336  000464                     l966:
  9337  000464                     l6936:
  9338                           
  9339                           ; BSR set to: 0
  9340  000464  51BF               	movf	(pf_mount@mclst+3)& (0+255),w,b
  9341  000466  11BE               	iorwf	(pf_mount@mclst+2)& (0+255),w,b
  9342  000468  E106               	bnz	u7860
  9343  00046A  0EF8               	movlw	248
  9344  00046C  5DBC               	subwf	pf_mount@mclst& (0+255),w,b
  9345  00046E  0E0F               	movlw	15
  9346  000470  59BD               	subwfb	(pf_mount@mclst+1)& (0+255),w,b
  9347  000472  A0D8               	btfss	status,0,c
  9348  000474  D00B               	goto	l967
  9349  000476                     u7860:
  9350                           
  9351                           ; BSR set to: 0
  9352  000476  51BF               	movf	(pf_mount@mclst+3)& (0+255),w,b
  9353  000478  11BE               	iorwf	(pf_mount@mclst+2)& (0+255),w,b
  9354  00047A  E108               	bnz	l6942
  9355  00047C  0EF7               	movlw	247
  9356  00047E  5DBC               	subwf	pf_mount@mclst& (0+255),w,b
  9357  000480  0EFF               	movlw	255
  9358  000482  59BD               	subwfb	(pf_mount@mclst+1)& (0+255),w,b
  9359  000484  B0D8               	btfsc	status,0,c
  9360  000486  D002               	goto	l967
  9361                           
  9362                           ; BSR set to: 0
  9363                           ;pff.c: 804: fmt = 2;
  9364  000488  0E02               	movlw	2
  9365  00048A  6FC8               	movwf	pf_mount@fmt& (0+255),b
  9366  00048C                     l967:
  9367  00048C                     l6942:
  9368                           
  9369                           ; BSR set to: 0
  9370  00048C  51BF               	movf	(pf_mount@mclst+3)& (0+255),w,b
  9371  00048E  11BE               	iorwf	(pf_mount@mclst+2)& (0+255),w,b
  9372  000490  E106               	bnz	u7880
  9373  000492  0EF7               	movlw	247
  9374  000494  5DBC               	subwf	pf_mount@mclst& (0+255),w,b
  9375  000496  0EFF               	movlw	255
  9376  000498  59BD               	subwfb	(pf_mount@mclst+1)& (0+255),w,b
  9377  00049A  A0D8               	btfss	status,0,c
  9378  00049C  D002               	goto	l968
  9379  00049E                     u7880:
  9380                           
  9381                           ; BSR set to: 0
  9382                           ;pff.c: 806: fmt = 3;
  9383  00049E  0E03               	movlw	3
  9384  0004A0  6FC8               	movwf	pf_mount@fmt& (0+255),b
  9385  0004A2                     l968:
  9386                           
  9387                           ; BSR set to: 0
  9388                           ;pff.c: 807: if (!fmt) return FR_NO_FILESYSTEM;
  9389  0004A2  51C8               	movf	pf_mount@fmt& (0+255),w,b
  9390  0004A4  A4D8               	btfss	status,2,c
  9391  0004A6  D002               	goto	l969
  9392                           
  9393                           ; BSR set to: 0
  9394  0004A8  0E06               	movlw	6
  9395                           
  9396                           ; BSR set to: 0
  9397  0004AA  0012               	return	
  9398  0004AC                     l969:
  9399                           
  9400                           ; BSR set to: 0
  9401                           ;pff.c: 810: if (0 || (1 && fmt == 3))
  9402                           
  9403                           ; BSR set to: 0
  9404  0004AC  C07C  FFD9         	movff	pf_mount@fs,fsr2l
  9405  0004B0  C07D  FFDA         	movff	pf_mount@fs+1,fsr2h
  9406  0004B4  C0C8  FFDF         	movff	pf_mount@fmt,indf2
  9407                           
  9408                           ; BSR set to: 0
  9409  0004B8  0E03               	movlw	3
  9410  0004BA  19C8               	xorwf	pf_mount@fmt& (0+255),w,b
  9411  0004BC  A4D8               	btfss	status,2,c
  9412  0004BE  D048               	goto	l970
  9413                           
  9414                           ; BSR set to: 0
  9415                           ;pff.c: 811: fs->dirbase = (DWORD)(((DWORD)*((BYTE*)(buf+(44-13))+3)<<24)|((DWORD)*((BYT
      +                          E*)(buf+(44-13))+2)<<16)|((WORD)*((BYTE*)(buf+(44-13))+1)<<8)|*(BYTE*)(buf+(44-13)));
  9416                           
  9417                           ; BSR set to: 0
  9418  0004C0  51B4               	movf	(pf_mount@buf+32)& (0+255),w,b
  9419  0004C2  6F7F               	movwf	(??_pf_mount+1)& (0+255),b
  9420  0004C4  6B7E               	clrf	??_pf_mount& (0+255),b
  9421  0004C6  C0B5  F080         	movff	pf_mount@buf+33,??_pf_mount+2
  9422  0004CA  6B81               	clrf	(??_pf_mount+3)& (0+255),b
  9423  0004CC  6B82               	clrf	(??_pf_mount+4)& (0+255),b
  9424  0004CE  6B83               	clrf	(??_pf_mount+5)& (0+255),b
  9425  0004D0  C081  F083         	movff	??_pf_mount+3,??_pf_mount+5
  9426  0004D4  C080  F082         	movff	??_pf_mount+2,??_pf_mount+4
  9427  0004D8  6B81               	clrf	(??_pf_mount+3)& (0+255),b
  9428  0004DA  6B80               	clrf	(??_pf_mount+2)& (0+255),b
  9429  0004DC  C0B6  F084         	movff	pf_mount@buf+34,??_pf_mount+6
  9430  0004E0  6B85               	clrf	(??_pf_mount+7)& (0+255),b
  9431  0004E2  6B86               	clrf	(??_pf_mount+8)& (0+255),b
  9432  0004E4  6B87               	clrf	(??_pf_mount+9)& (0+255),b
  9433  0004E6  C084  F087         	movff	??_pf_mount+6,??_pf_mount+9
  9434  0004EA  6B86               	clrf	(??_pf_mount+8)& (0+255),b
  9435  0004EC  6B85               	clrf	(??_pf_mount+7)& (0+255),b
  9436  0004EE  6B84               	clrf	(??_pf_mount+6)& (0+255),b
  9437  0004F0  5180               	movf	(??_pf_mount+2)& (0+255),w,b
  9438  0004F2  1184               	iorwf	(??_pf_mount+6)& (0+255),w,b
  9439  0004F4  6F88               	movwf	(??_pf_mount+10)& (0+255),b
  9440  0004F6  5181               	movf	(??_pf_mount+3)& (0+255),w,b
  9441  0004F8  1185               	iorwf	(??_pf_mount+7)& (0+255),w,b
  9442  0004FA  6F89               	movwf	(??_pf_mount+11)& (0+255),b
  9443  0004FC  5182               	movf	(??_pf_mount+4)& (0+255),w,b
  9444  0004FE  1186               	iorwf	(??_pf_mount+8)& (0+255),w,b
  9445  000500  6F8A               	movwf	(??_pf_mount+12)& (0+255),b
  9446  000502  5183               	movf	(??_pf_mount+5)& (0+255),w,b
  9447  000504  1187               	iorwf	(??_pf_mount+9)& (0+255),w,b
  9448  000506  6F8B               	movwf	(??_pf_mount+13)& (0+255),b
  9449  000508  517E               	movf	??_pf_mount& (0+255),w,b
  9450  00050A  1188               	iorwf	(??_pf_mount+10)& (0+255),w,b
  9451  00050C  6F8C               	movwf	(??_pf_mount+14)& (0+255),b
  9452  00050E  517F               	movf	(??_pf_mount+1)& (0+255),w,b
  9453  000510  1189               	iorwf	(??_pf_mount+11)& (0+255),w,b
  9454  000512  6F8D               	movwf	(??_pf_mount+15)& (0+255),b
  9455  000514  0E00               	movlw	0
  9456  000516  118A               	iorwf	(??_pf_mount+12)& (0+255),w,b
  9457  000518  6F8E               	movwf	(??_pf_mount+16)& (0+255),b
  9458  00051A  0E00               	movlw	0
  9459  00051C  118B               	iorwf	(??_pf_mount+13)& (0+255),w,b
  9460  00051E  6F8F               	movwf	(??_pf_mount+17)& (0+255),b
  9461  000520  51B3               	movf	(pf_mount@buf+31)& (0+255),w,b
  9462  000522  118C               	iorwf	(??_pf_mount+14)& (0+255),w,b
  9463  000524  6F90               	movwf	(??_pf_mount+18)& (0+255),b
  9464  000526  518D               	movf	(??_pf_mount+15)& (0+255),w,b
  9465  000528  6F91               	movwf	(??_pf_mount+19)& (0+255),b
  9466  00052A  518E               	movf	(??_pf_mount+16)& (0+255),w,b
  9467  00052C  6F92               	movwf	(??_pf_mount+20)& (0+255),b
  9468  00052E  518F               	movf	(??_pf_mount+17)& (0+255),w,b
  9469  000530  6F93               	movwf	(??_pf_mount+21)& (0+255),b
  9470  000532  EE20 F00E          	lfsr	2,14
  9471  000536  517C               	movf	pf_mount@fs& (0+255),w,b
  9472  000538  26D9               	addwf	fsr2l,f,c
  9473  00053A  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9474  00053C  22DA               	addwfc	fsr2h,f,c
  9475  00053E  C090  FFDE         	movff	??_pf_mount+18,postinc2
  9476  000542  C091  FFDE         	movff	??_pf_mount+19,postinc2
  9477  000546  C092  FFDE         	movff	??_pf_mount+20,postinc2
  9478  00054A  C093  FFDE         	movff	??_pf_mount+21,postinc2
  9479  00054E  D028               	goto	l973
  9480  000550                     l970:
  9481                           
  9482                           ; BSR set to: 0
  9483                           ;pff.c: 812: else
  9484                           ;pff.c: 813: fs->dirbase = fs->fatbase + fsize;
  9485                           
  9486                           ; BSR set to: 0
  9487  000550  EE20 F00A          	lfsr	2,10
  9488  000554  517C               	movf	pf_mount@fs& (0+255),w,b
  9489  000556  26D9               	addwf	fsr2l,f,c
  9490  000558  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9491  00055A  22DA               	addwfc	fsr2h,f,c
  9492  00055C  CFDE F07E          	movff	postinc2,??_pf_mount
  9493  000560  CFDE F07F          	movff	postinc2,??_pf_mount+1
  9494  000564  CFDE F080          	movff	postinc2,??_pf_mount+2
  9495  000568  CFDE F081          	movff	postinc2,??_pf_mount+3
  9496  00056C  51C4               	movf	pf_mount@fsize& (0+255),w,b
  9497  00056E  257E               	addwf	??_pf_mount& (0+255),w,b
  9498  000570  6F82               	movwf	(??_pf_mount+4)& (0+255),b
  9499  000572  51C5               	movf	(pf_mount@fsize+1)& (0+255),w,b
  9500  000574  217F               	addwfc	(??_pf_mount+1)& (0+255),w,b
  9501  000576  6F83               	movwf	(??_pf_mount+5)& (0+255),b
  9502  000578  51C6               	movf	(pf_mount@fsize+2)& (0+255),w,b
  9503  00057A  2180               	addwfc	(??_pf_mount+2)& (0+255),w,b
  9504  00057C  6F84               	movwf	(??_pf_mount+6)& (0+255),b
  9505  00057E  51C7               	movf	(pf_mount@fsize+3)& (0+255),w,b
  9506  000580  2181               	addwfc	(??_pf_mount+3)& (0+255),w,b
  9507  000582  6F85               	movwf	(??_pf_mount+7)& (0+255),b
  9508  000584  EE20 F00E          	lfsr	2,14
  9509  000588  517C               	movf	pf_mount@fs& (0+255),w,b
  9510  00058A  26D9               	addwf	fsr2l,f,c
  9511  00058C  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9512  00058E  22DA               	addwfc	fsr2h,f,c
  9513  000590  C082  FFDE         	movff	??_pf_mount+4,postinc2
  9514  000594  C083  FFDE         	movff	??_pf_mount+5,postinc2
  9515  000598  C084  FFDE         	movff	??_pf_mount+6,postinc2
  9516  00059C  C085  FFDE         	movff	??_pf_mount+7,postinc2
  9517  0005A0                     l973:
  9518                           
  9519                           ; BSR set to: 0
  9520                           ;pff.c: 814: fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;
  9521  0005A0  EE20 F00A          	lfsr	2,10
  9522  0005A4  517C               	movf	pf_mount@fs& (0+255),w,b
  9523  0005A6  26D9               	addwf	fsr2l,f,c
  9524  0005A8  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9525  0005AA  22DA               	addwfc	fsr2h,f,c
  9526  0005AC  CFDE F07E          	movff	postinc2,??_pf_mount
  9527  0005B0  CFDE F07F          	movff	postinc2,??_pf_mount+1
  9528  0005B4  CFDE F080          	movff	postinc2,??_pf_mount+2
  9529  0005B8  CFDE F081          	movff	postinc2,??_pf_mount+3
  9530  0005BC  EE20 F004          	lfsr	2,4
  9531  0005C0  517C               	movf	pf_mount@fs& (0+255),w,b
  9532  0005C2  26D9               	addwf	fsr2l,f,c
  9533  0005C4  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9534  0005C6  22DA               	addwfc	fsr2h,f,c
  9535  0005C8  CFDE F082          	movff	postinc2,??_pf_mount+4
  9536  0005CC  CFDD F083          	movff	postdec2,??_pf_mount+5
  9537  0005D0  0E04               	movlw	4
  9538  0005D2  6F84               	movwf	(??_pf_mount+6)& (0+255),b
  9539  0005D4                     u7915:
  9540  0005D4  90D8               	bcf	status,0,c
  9541  0005D6  3383               	rrcf	(??_pf_mount+5)& (0+255),f,b
  9542  0005D8  3382               	rrcf	(??_pf_mount+4)& (0+255),f,b
  9543  0005DA  2F84               	decfsz	(??_pf_mount+6)& (0+255),f,b
  9544  0005DC  D7FB               	goto	u7915
  9545  0005DE  5182               	movf	(??_pf_mount+4)& (0+255),w,b
  9546  0005E0  257E               	addwf	??_pf_mount& (0+255),w,b
  9547  0005E2  6F85               	movwf	(??_pf_mount+7)& (0+255),b
  9548  0005E4  5183               	movf	(??_pf_mount+5)& (0+255),w,b
  9549  0005E6  217F               	addwfc	(??_pf_mount+1)& (0+255),w,b
  9550  0005E8  6F86               	movwf	(??_pf_mount+8)& (0+255),b
  9551  0005EA  0E00               	movlw	0
  9552  0005EC  2180               	addwfc	(??_pf_mount+2)& (0+255),w,b
  9553  0005EE  6F87               	movwf	(??_pf_mount+9)& (0+255),b
  9554  0005F0  0E00               	movlw	0
  9555  0005F2  2181               	addwfc	(??_pf_mount+3)& (0+255),w,b
  9556  0005F4  6F88               	movwf	(??_pf_mount+10)& (0+255),b
  9557  0005F6  51C4               	movf	pf_mount@fsize& (0+255),w,b
  9558  0005F8  2585               	addwf	(??_pf_mount+7)& (0+255),w,b
  9559  0005FA  6F89               	movwf	(??_pf_mount+11)& (0+255),b
  9560  0005FC  51C5               	movf	(pf_mount@fsize+1)& (0+255),w,b
  9561  0005FE  2186               	addwfc	(??_pf_mount+8)& (0+255),w,b
  9562  000600  6F8A               	movwf	(??_pf_mount+12)& (0+255),b
  9563  000602  51C6               	movf	(pf_mount@fsize+2)& (0+255),w,b
  9564  000604  2187               	addwfc	(??_pf_mount+9)& (0+255),w,b
  9565  000606  6F8B               	movwf	(??_pf_mount+13)& (0+255),b
  9566  000608  51C7               	movf	(pf_mount@fsize+3)& (0+255),w,b
  9567  00060A  2188               	addwfc	(??_pf_mount+10)& (0+255),w,b
  9568  00060C  6F8C               	movwf	(??_pf_mount+14)& (0+255),b
  9569  00060E  EE20 F012          	lfsr	2,18
  9570  000612  517C               	movf	pf_mount@fs& (0+255),w,b
  9571  000614  26D9               	addwf	fsr2l,f,c
  9572  000616  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9573  000618  22DA               	addwfc	fsr2h,f,c
  9574  00061A  C089  FFDE         	movff	??_pf_mount+11,postinc2
  9575  00061E  C08A  FFDE         	movff	??_pf_mount+12,postinc2
  9576  000622  C08B  FFDE         	movff	??_pf_mount+13,postinc2
  9577  000626  C08C  FFDE         	movff	??_pf_mount+14,postinc2
  9578                           
  9579                           ;pff.c: 816: fs->flag = 0;
  9580  00062A  EE20 F001          	lfsr	2,1
  9581  00062E  517C               	movf	pf_mount@fs& (0+255),w,b
  9582  000630  26D9               	addwf	fsr2l,f,c
  9583  000632  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9584  000634  22DA               	addwfc	fsr2h,f,c
  9585  000636  0E00               	movlw	0
  9586  000638  6EDF               	movwf	indf2,c
  9587                           
  9588                           ; BSR set to: 0
  9589                           ;pff.c: 817: FatFs = fs;
  9590  00063A  C07C  F035         	movff	pf_mount@fs,_FatFs
  9591  00063E  C07D  F036         	movff	pf_mount@fs+1,_FatFs+1
  9592                           
  9593                           ; BSR set to: 0
  9594                           ;pff.c: 819: return FR_OK;
  9595  000642  0E00               	movlw	0
  9596  000644  0012               	return	
  9597  000646                     __end_of_pf_mount:
  9598                           	opt stack 0
  9599                           tosu	equ	0xFFF
  9600                           tosh	equ	0xFFE
  9601                           tosl	equ	0xFFD
  9602                           pclath	equ	0xFFA
  9603                           tblptru	equ	0xFF8
  9604                           tblptrh	equ	0xFF7
  9605                           tblptrl	equ	0xFF6
  9606                           tablat	equ	0xFF5
  9607                           prodh	equ	0xFF4
  9608                           prodl	equ	0xFF3
  9609                           intcon	equ	0xFF2
  9610                           intcon2	equ	0xFF1
  9611                           intcon3	equ	0xFF0
  9612                           postinc0	equ	0xFEE
  9613                           wreg	equ	0xFE8
  9614                           indf1	equ	0xFE7
  9615                           postinc1	equ	0xFE6
  9616                           postdec1	equ	0xFE5
  9617                           fsr1h	equ	0xFE2
  9618                           fsr1l	equ	0xFE1
  9619                           indf2	equ	0xFDF
  9620                           postinc2	equ	0xFDE
  9621                           postdec2	equ	0xFDD
  9622                           plusw2	equ	0xFDB
  9623                           fsr2h	equ	0xFDA
  9624                           fsr2l	equ	0xFD9
  9625                           status	equ	0xFD8
  9626                           
  9627 ;; *************** function _disk_initialize *****************
  9628 ;; Defined at:
  9629 ;;		line 64 in file "diskio.c"
  9630 ;; Parameters:    Size  Location     Type
  9631 ;;		None
  9632 ;; Auto vars:     Size  Location     Type
  9633 ;;  count2          2    7[BANK0 ] int 
  9634 ;;  count1          2    4[BANK0 ] int 
  9635 ;;  i               2    2[BANK0 ] int 
  9636 ;;  buff            1    9[BANK0 ] unsigned char 
  9637 ;;  stat            1    6[BANK0 ] unsigned char 
  9638 ;; Return value:  Size  Location     Type
  9639 ;;                  1    wreg      unsigned char 
  9640 ;; Registers used:
  9641 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9642 ;; Tracked objects:
  9643 ;;		On entry : 0/0
  9644 ;;		On exit  : 0/0
  9645 ;;		Unchanged: 0/0
  9646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9647 ;;      Params:         0       0       0       0       0       0       0       0       0
  9648 ;;      Locals:         0       8       0       0       0       0       0       0       0
  9649 ;;      Temps:          0       2       0       0       0       0       0       0       0
  9650 ;;      Totals:         0      10       0       0       0       0       0       0       0
  9651 ;;Total ram usage:       10 bytes
  9652 ;; Hardware stack levels used:    1
  9653 ;; Hardware stack levels required when called:    7
  9654 ;; This function calls:
  9655 ;;		_command
  9656 ;;		_dummy_clocks
  9657 ;;		_escreve_cmd_lcd
  9658 ;;		_escreve_frase_ram_lcd
  9659 ;;		_posicao_cursor_lcd
  9660 ;;		_proceed
  9661 ;;		_reset
  9662 ;;		_response
  9663 ;; This function is called by:
  9664 ;;		_pf_mount
  9665 ;; This function uses a non-reentrant model
  9666 ;;
  9667                           
  9668                           	psect	text37
  9669  0015B6                     __ptext37:
  9670                           	opt stack 0
  9671  0015B6                     _disk_initialize:
  9672                           	opt stack 20
  9673                           
  9674                           ;diskio.c: 67: DSTATUS stat;
  9675                           ;diskio.c: 68: int i = 0, count1 = 0, count2 = 0;
  9676                           
  9677                           ;incstack = 0
  9678  0015B6  0E00               	movlw	0
  9679  0015B8  0100               	movlb	0	; () banked
  9680  0015BA  6F63               	movwf	(disk_initialize@i+1)& (0+255),b
  9681  0015BC  0E00               	movlw	0
  9682  0015BE  6F62               	movwf	disk_initialize@i& (0+255),b
  9683  0015C0  0E00               	movlw	0
  9684  0015C2  6F65               	movwf	(disk_initialize@count1+1)& (0+255),b
  9685  0015C4  0E00               	movlw	0
  9686  0015C6  6F64               	movwf	disk_initialize@count1& (0+255),b
  9687  0015C8  0E00               	movlw	0
  9688  0015CA  6F68               	movwf	(disk_initialize@count2+1)& (0+255),b
  9689  0015CC  0E00               	movlw	0
  9690  0015CE  6F67               	movwf	disk_initialize@count2& (0+255),b
  9691                           
  9692                           ; BSR set to: 0
  9693                           ;diskio.c: 69: unsigned char buff;
  9694                           ;diskio.c: 70: reset();
  9695  0015D0  ECC7  F014         	call	_reset	;wreg free
  9696                           
  9697                           ;diskio.c: 71: _delay((unsigned long)((500)*(20000000/4000.0)));
  9698  0015D4  0E0D               	movlw	13
  9699  0015D6  0100               	movlb	0	; () banked
  9700  0015D8  6F61               	movwf	(??_disk_initialize+1)& (0+255),b
  9701  0015DA  0EAF               	movlw	175
  9702  0015DC  6F60               	movwf	??_disk_initialize& (0+255),b
  9703  0015DE  0EB6               	movlw	182
  9704  0015E0                     u9167:
  9705  0015E0  2EE8               	decfsz	wreg,f,c
  9706  0015E2  D7FE               	bra	u9167
  9707  0015E4  2F60               	decfsz	??_disk_initialize& (0+255),f,b
  9708  0015E6  D7FC               	bra	u9167
  9709  0015E8  2F61               	decfsz	(??_disk_initialize+1)& (0+255),f,b
  9710  0015EA  D7FA               	bra	u9167
  9711  0015EC  F000               	nop	
  9712                           
  9713                           ;diskio.c: 72: dummy_clocks(8);
  9714  0015EE  0E08               	movlw	8
  9715  0015F0  EC94  F017         	call	_dummy_clocks
  9716                           
  9717                           ;diskio.c: 73: command(0X41, 0X00000000, 0XFF);
  9718  0015F4  0E00               	movlw	0
  9719  0015F6  6E21               	movwf	command@arg,c
  9720  0015F8  0E00               	movlw	0
  9721  0015FA  6E22               	movwf	command@arg+1,c
  9722  0015FC  0E00               	movlw	0
  9723  0015FE  6E23               	movwf	command@arg+2,c
  9724  001600  0E00               	movlw	0
  9725  001602  6E24               	movwf	command@arg+3,c
  9726  001604  0EFF               	movlw	255
  9727  001606  6E25               	movwf	command@CRC,c
  9728  001608  0E41               	movlw	65
  9729  00160A  EC41  F017         	call	_command
  9730                           
  9731                           ;diskio.c: 74: proceed();
  9732  00160E  EC20  F019         	call	_proceed	;wreg free
  9733  001612                     
  9734                           ;diskio.c: 76: buff = response();
  9735  001612  EC13  F019         	call	_response	;wreg free
  9736  001616  0100               	movlb	0	; () banked
  9737  001618  6F69               	movwf	disk_initialize@buff& (0+255),b
  9738                           
  9739                           ; BSR set to: 0
  9740                           ;diskio.c: 77: }while(buff!=0x01);
  9741  00161A  0569               	decf	disk_initialize@buff& (0+255),w,b
  9742  00161C  A4D8               	btfss	status,2,c
  9743  00161E  D7F9               	goto	l724
  9744                           
  9745                           ; BSR set to: 0
  9746                           ;diskio.c: 79: _delay((unsigned long)((1000)*(20000000/4000.0)));
  9747                           
  9748                           ; BSR set to: 0
  9749  001620  0E1A               	movlw	26
  9750  001622  0100               	movlb	0	; () banked
  9751  001624  6F61               	movwf	(??_disk_initialize+1)& (0+255),b
  9752  001626  0E5E               	movlw	94
  9753  001628  6F60               	movwf	??_disk_initialize& (0+255),b
  9754  00162A  0E6E               	movlw	110
  9755  00162C                     u9177:
  9756  00162C  2EE8               	decfsz	wreg,f,c
  9757  00162E  D7FE               	bra	u9177
  9758  001630  2F60               	decfsz	??_disk_initialize& (0+255),f,b
  9759  001632  D7FC               	bra	u9177
  9760  001634  2F61               	decfsz	(??_disk_initialize+1)& (0+255),f,b
  9761  001636  D7FA               	bra	u9177
  9762  001638  F000               	nop	
  9763                           
  9764                           ;diskio.c: 80: proceed();
  9765  00163A  EC20  F019         	call	_proceed	;wreg free
  9766                           
  9767                           ;diskio.c: 81: if (buff == 0x01)
  9768  00163E  0100               	movlb	0	; () banked
  9769  001640  0569               	decf	disk_initialize@buff& (0+255),w,b
  9770  001642  A4D8               	btfss	status,2,c
  9771  001644  D093               	goto	l726
  9772                           
  9773                           ; BSR set to: 0
  9774                           ;diskio.c: 82: {
  9775                           ;diskio.c: 84: _delay((unsigned long)((1)*(20000000/4000.0)));
  9776  001646  0E07               	movlw	7
  9777  001648  0100               	movlb	0	; () banked
  9778  00164A  6F60               	movwf	??_disk_initialize& (0+255),b
  9779  00164C  0E7D               	movlw	125
  9780  00164E                     u9187:
  9781  00164E  2EE8               	decfsz	wreg,f,c
  9782  001650  D7FE               	bra	u9187
  9783  001652  2F60               	decfsz	??_disk_initialize& (0+255),f,b
  9784  001654  D7FC               	bra	u9187
  9785                           
  9786                           ;diskio.c: 85: count1 = 0;
  9787  001656  0E00               	movlw	0
  9788  001658  0100               	movlb	0	; () banked
  9789  00165A  6F65               	movwf	(disk_initialize@count1+1)& (0+255),b
  9790  00165C  0E00               	movlw	0
  9791  00165E  6F64               	movwf	disk_initialize@count1& (0+255),b
  9792  001660                     
  9793                           ; BSR set to: 0
  9794                           ;diskio.c: 87: count2 = 0;
  9795                           
  9796                           ; BSR set to: 0
  9797  001660  0E00               	movlw	0
  9798  001662  6F68               	movwf	(disk_initialize@count2+1)& (0+255),b
  9799  001664  0E00               	movlw	0
  9800  001666  6F67               	movwf	disk_initialize@count2& (0+255),b
  9801                           
  9802                           ; BSR set to: 0
  9803                           ;diskio.c: 88: dummy_clocks(8);
  9804  001668  0E08               	movlw	8
  9805  00166A  EC94  F017         	call	_dummy_clocks
  9806                           
  9807                           ;diskio.c: 89: command(0X77, 0X00000000, 0X95);
  9808  00166E  0E00               	movlw	0
  9809  001670  6E21               	movwf	command@arg,c
  9810  001672  0E00               	movlw	0
  9811  001674  6E22               	movwf	command@arg+1,c
  9812  001676  0E00               	movlw	0
  9813  001678  6E23               	movwf	command@arg+2,c
  9814  00167A  0E00               	movlw	0
  9815  00167C  6E24               	movwf	command@arg+3,c
  9816  00167E  0E95               	movlw	149
  9817  001680  6E25               	movwf	command@CRC,c
  9818  001682  0E77               	movlw	119
  9819  001684  EC41  F017         	call	_command
  9820                           
  9821                           ;diskio.c: 90: buff = 0XFF;
  9822  001688  0100               	movlb	0	; () banked
  9823  00168A  6969               	setf	disk_initialize@buff& (0+255),b
  9824  00168C                     
  9825                           ; BSR set to: 0
  9826                           ;diskio.c: 93: buff = response();
  9827                           
  9828                           ; BSR set to: 0
  9829  00168C  EC13  F019         	call	_response	;wreg free
  9830  001690  0100               	movlb	0	; () banked
  9831  001692  6F69               	movwf	disk_initialize@buff& (0+255),b
  9832                           
  9833                           ; BSR set to: 0
  9834                           ;diskio.c: 94: count2++;
  9835  001694  4B67               	infsnz	disk_initialize@count2& (0+255),f,b
  9836  001696  2B68               	incf	(disk_initialize@count2+1)& (0+255),f,b
  9837                           
  9838                           ; BSR set to: 0
  9839                           ;diskio.c: 95: }while((buff!=0X01)&&(count2<10));
  9840  001698  0569               	decf	disk_initialize@buff& (0+255),w,b
  9841  00169A  B4D8               	btfsc	status,2,c
  9842  00169C  D008               	goto	u7500
  9843                           
  9844                           ; BSR set to: 0
  9845  00169E  BF68               	btfsc	(disk_initialize@count2+1)& (0+255),7,b
  9846  0016A0  D7F5               	goto	l728
  9847  0016A2  5168               	movf	(disk_initialize@count2+1)& (0+255),w,b
  9848  0016A4  E104               	bnz	l6672
  9849  0016A6  0E0A               	movlw	10
  9850  0016A8  5D67               	subwf	disk_initialize@count2& (0+255),w,b
  9851  0016AA  A0D8               	btfss	status,0,c
  9852  0016AC  D7EF               	goto	l728
  9853  0016AE                     u7500:
  9854  0016AE                     l6672:
  9855                           
  9856                           ; BSR set to: 0
  9857                           ;diskio.c: 97: _delay((unsigned long)((1)*(20000000/4000.0)));
  9858  0016AE  0E07               	movlw	7
  9859  0016B0  0100               	movlb	0	; () banked
  9860  0016B2  6F60               	movwf	??_disk_initialize& (0+255),b
  9861  0016B4  0E7D               	movlw	125
  9862  0016B6                     u9197:
  9863  0016B6  2EE8               	decfsz	wreg,f,c
  9864  0016B8  D7FE               	bra	u9197
  9865  0016BA  2F60               	decfsz	??_disk_initialize& (0+255),f,b
  9866  0016BC  D7FC               	bra	u9197
  9867                           
  9868                           ;diskio.c: 98: count2 = 0;
  9869  0016BE  0E00               	movlw	0
  9870  0016C0  0100               	movlb	0	; () banked
  9871  0016C2  6F68               	movwf	(disk_initialize@count2+1)& (0+255),b
  9872  0016C4  0E00               	movlw	0
  9873  0016C6  6F67               	movwf	disk_initialize@count2& (0+255),b
  9874                           
  9875                           ; BSR set to: 0
  9876                           ;diskio.c: 99: dummy_clocks(8);
  9877  0016C8  0E08               	movlw	8
  9878  0016CA  EC94  F017         	call	_dummy_clocks
  9879                           
  9880                           ;diskio.c: 101: command(0X69,0X40000000,0X95);
  9881  0016CE  0E00               	movlw	0
  9882  0016D0  6E21               	movwf	command@arg,c
  9883  0016D2  0E00               	movlw	0
  9884  0016D4  6E22               	movwf	command@arg+1,c
  9885  0016D6  0E00               	movlw	0
  9886  0016D8  6E23               	movwf	command@arg+2,c
  9887  0016DA  0E40               	movlw	64
  9888  0016DC  6E24               	movwf	command@arg+3,c
  9889  0016DE  0E95               	movlw	149
  9890  0016E0  6E25               	movwf	command@CRC,c
  9891  0016E2  0E69               	movlw	105
  9892  0016E4  EC41  F017         	call	_command
  9893                           
  9894                           ;diskio.c: 102: buff = 0XFF;
  9895  0016E8  0100               	movlb	0	; () banked
  9896  0016EA  6969               	setf	disk_initialize@buff& (0+255),b
  9897                           
  9898                           ; BSR set to: 0
  9899                           ;diskio.c: 104: proceed();
  9900  0016EC  EC20  F019         	call	_proceed	;wreg free
  9901  0016F0                     
  9902                           ;diskio.c: 106: buff = response();
  9903  0016F0  EC13  F019         	call	_response	;wreg free
  9904  0016F4  0100               	movlb	0	; () banked
  9905  0016F6  6F69               	movwf	disk_initialize@buff& (0+255),b
  9906                           
  9907                           ;diskio.c: 107: count2++;
  9908  0016F8  4B67               	infsnz	disk_initialize@count2& (0+255),f,b
  9909  0016FA  2B68               	incf	(disk_initialize@count2+1)& (0+255),f,b
  9910                           
  9911                           ; BSR set to: 0
  9912                           ;diskio.c: 110: }while((buff!=0X00) && count2<10);
  9913  0016FC  5169               	movf	disk_initialize@buff& (0+255),w,b
  9914  0016FE  B4D8               	btfsc	status,2,c
  9915  001700  D008               	goto	u7520
  9916                           
  9917                           ; BSR set to: 0
  9918  001702  BF68               	btfsc	(disk_initialize@count2+1)& (0+255),7,b
  9919  001704  D7F5               	goto	l732
  9920  001706  5168               	movf	(disk_initialize@count2+1)& (0+255),w,b
  9921  001708  E104               	bnz	l6690
  9922  00170A  0E0A               	movlw	10
  9923  00170C  5D67               	subwf	disk_initialize@count2& (0+255),w,b
  9924  00170E  A0D8               	btfss	status,0,c
  9925  001710  D7EF               	goto	l732
  9926  001712                     u7520:
  9927  001712                     l6690:
  9928                           
  9929                           ; BSR set to: 0
  9930                           ;diskio.c: 112: }while(buff != 0X00);
  9931  001712  5169               	movf	disk_initialize@buff& (0+255),w,b
  9932  001714  A4D8               	btfss	status,2,c
  9933  001716  D7A4               	goto	l727
  9934                           
  9935                           ; BSR set to: 0
  9936                           ;diskio.c: 114: count1 = 0;
  9937                           
  9938                           ; BSR set to: 0
  9939  001718  0E00               	movlw	0
  9940  00171A  6F65               	movwf	(disk_initialize@count1+1)& (0+255),b
  9941  00171C  0E00               	movlw	0
  9942  00171E  6F64               	movwf	disk_initialize@count1& (0+255),b
  9943                           
  9944                           ; BSR set to: 0
  9945                           ;diskio.c: 116: _delay((unsigned long)((1)*(20000000/4000.0)));
  9946  001720  0E07               	movlw	7
  9947  001722  0100               	movlb	0	; () banked
  9948  001724  6F60               	movwf	??_disk_initialize& (0+255),b
  9949  001726  0E7D               	movlw	125
  9950  001728                     u9207:
  9951  001728  2EE8               	decfsz	wreg,f,c
  9952  00172A  D7FE               	bra	u9207
  9953  00172C  2F60               	decfsz	??_disk_initialize& (0+255),f,b
  9954  00172E  D7FC               	bra	u9207
  9955                           
  9956                           ;diskio.c: 117: stat = 0X00;
  9957  001730  0E00               	movlw	0
  9958  001732  0100               	movlb	0	; () banked
  9959  001734  6F66               	movwf	disk_initialize@stat& (0+255),b
  9960                           
  9961                           ; BSR set to: 0
  9962                           ;diskio.c: 119: escreve_cmd_lcd(0b00000001);
  9963  001736  0E01               	movlw	1
  9964  001738  EC0F  F015         	call	_escreve_cmd_lcd
  9965                           
  9966                           ;diskio.c: 120: posicao_cursor_lcd(1,0);
  9967  00173C  0E00               	movlw	0
  9968  00173E  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  9969  001740  0E01               	movlw	1
  9970  001742  EC45  F016         	call	_posicao_cursor_lcd
  9971                           
  9972                           ;diskio.c: 121: escreve_frase_ram_lcd("Cartão Aceito");
  9973  001746  0E7B               	movlw	low STR_16
  9974  001748  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  9975  00174A  0E7F               	movlw	high STR_16
  9976  00174C  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  9977  00174E  EC6B  F017         	call	_escreve_frase_ram_lcd	;wreg free
  9978                           
  9979                           ;diskio.c: 122: _delay((unsigned long)((2000)*(20000000/4000.0)));
  9980  001752  0E33               	movlw	51
  9981  001754  0100               	movlb	0	; () banked
  9982  001756  6F61               	movwf	(??_disk_initialize+1)& (0+255),b
  9983  001758  0EBB               	movlw	187
  9984  00175A  6F60               	movwf	??_disk_initialize& (0+255),b
  9985  00175C  0EDF               	movlw	223
  9986  00175E                     u9217:
  9987  00175E  2EE8               	decfsz	wreg,f,c
  9988  001760  D7FE               	bra	u9217
  9989  001762  2F60               	decfsz	??_disk_initialize& (0+255),f,b
  9990  001764  D7FC               	bra	u9217
  9991  001766  2F61               	decfsz	(??_disk_initialize+1)& (0+255),f,b
  9992  001768  D7FA               	bra	u9217
  9993  00176A  D021               	goto	L5
  9994  00176C                     l726:
  9995                           
  9996                           ;diskio.c: 125: else if(buff == 0x05)
  9997  00176C  0E05               	movlw	5
  9998  00176E  0100               	movlb	0	; () banked
  9999  001770  1969               	xorwf	disk_initialize@buff& (0+255),w,b
 10000  001772  A4D8               	btfss	status,2,c
 10001  001774  D01D               	goto	l738
 10002                           
 10003                           ; BSR set to: 0
 10004                           ;diskio.c: 126: {
 10005                           ;diskio.c: 127: stat = 0x01;
 10006  001776  0E01               	movlw	1
 10007  001778  6F66               	movwf	disk_initialize@stat& (0+255),b
 10008                           
 10009                           ; BSR set to: 0
 10010                           ;diskio.c: 129: escreve_cmd_lcd(0b00000001);
 10011  00177A  0E01               	movlw	1
 10012  00177C  EC0F  F015         	call	_escreve_cmd_lcd
 10013                           
 10014                           ;diskio.c: 130: posicao_cursor_lcd(1,0);
 10015  001780  0E00               	movlw	0
 10016  001782  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 10017  001784  0E01               	movlw	1
 10018  001786  EC45  F016         	call	_posicao_cursor_lcd
 10019                           
 10020                           ;diskio.c: 131: escreve_frase_ram_lcd("Error!!!");
 10021  00178A  0EEB               	movlw	low STR_17
 10022  00178C  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 10023  00178E  0E7F               	movlw	high STR_17
 10024  001790  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 10025  001792  EC6B  F017         	call	_escreve_frase_ram_lcd	;wreg free
 10026                           
 10027                           ;diskio.c: 133: _delay((unsigned long)((3000)*(20000000/4000.0)));
 10028  001796  0E4D               	movlw	77
 10029  001798  0100               	movlb	0	; () banked
 10030  00179A  6F61               	movwf	(??_disk_initialize+1)& (0+255),b
 10031  00179C  0E19               	movlw	25
 10032  00179E  6F60               	movwf	??_disk_initialize& (0+255),b
 10033  0017A0  0E4F               	movlw	79
 10034  0017A2                     u9227:
 10035  0017A2  2EE8               	decfsz	wreg,f,c
 10036  0017A4  D7FE               	bra	u9227
 10037  0017A6  2F60               	decfsz	??_disk_initialize& (0+255),f,b
 10038  0017A8  D7FC               	bra	u9227
 10039  0017AA  2F61               	decfsz	(??_disk_initialize+1)& (0+255),f,b
 10040  0017AC  D7FA               	bra	u9227
 10041  0017AE                     L5:
 10042  0017AE  D000               	nop2	
 10043  0017B0                     l738:
 10044                           
 10045                           ;diskio.c: 134: }
 10046                           ;diskio.c: 135: _delay((unsigned long)((1000)*(20000000/4000.0)));
 10047  0017B0  0E1A               	movlw	26
 10048  0017B2  0100               	movlb	0	; () banked
 10049  0017B4  6F61               	movwf	(??_disk_initialize+1)& (0+255),b
 10050  0017B6  0E5E               	movlw	94
 10051  0017B8  6F60               	movwf	??_disk_initialize& (0+255),b
 10052  0017BA  0E6E               	movlw	110
 10053  0017BC                     u9237:
 10054  0017BC  2EE8               	decfsz	wreg,f,c
 10055  0017BE  D7FE               	bra	u9237
 10056  0017C0  2F60               	decfsz	??_disk_initialize& (0+255),f,b
 10057  0017C2  D7FC               	bra	u9237
 10058  0017C4  2F61               	decfsz	(??_disk_initialize+1)& (0+255),f,b
 10059  0017C6  D7FA               	bra	u9237
 10060  0017C8  F000               	nop	
 10061                           
 10062                           ;diskio.c: 137: dummy_clocks(8);
 10063  0017CA  0E08               	movlw	8
 10064  0017CC  EC94  F017         	call	_dummy_clocks
 10065                           
 10066                           ;diskio.c: 138: command(0X50,0X00000200,0XFF);
 10067  0017D0  0E00               	movlw	0
 10068  0017D2  6E21               	movwf	command@arg,c
 10069  0017D4  0E02               	movlw	2
 10070  0017D6  6E22               	movwf	command@arg+1,c
 10071  0017D8  0E00               	movlw	0
 10072  0017DA  6E23               	movwf	command@arg+2,c
 10073  0017DC  0E00               	movlw	0
 10074  0017DE  6E24               	movwf	command@arg+3,c
 10075  0017E0  0EFF               	movlw	255
 10076  0017E2  6E25               	movwf	command@CRC,c
 10077  0017E4  0E50               	movlw	80
 10078  0017E6  EC41  F017         	call	_command
 10079                           
 10080                           ;diskio.c: 139: proceed();
 10081  0017EA  EC20  F019         	call	_proceed	;wreg free
 10082  0017EE                     
 10083                           ;diskio.c: 141: buff = response();
 10084  0017EE  EC13  F019         	call	_response	;wreg free
 10085  0017F2  0100               	movlb	0	; () banked
 10086  0017F4  6F69               	movwf	disk_initialize@buff& (0+255),b
 10087                           
 10088                           ; BSR set to: 0
 10089                           ;diskio.c: 142: }while(buff!=0x00);
 10090  0017F6  5169               	movf	disk_initialize@buff& (0+255),w,b
 10091  0017F8  A4D8               	btfss	status,2,c
 10092  0017FA  D7F9               	goto	l739
 10093                           
 10094                           ; BSR set to: 0
 10095                           ;diskio.c: 145: _delay((unsigned long)((2000)*(20000000/4000.0)));
 10096                           
 10097                           ; BSR set to: 0
 10098  0017FC  0E33               	movlw	51
 10099  0017FE  0100               	movlb	0	; () banked
 10100  001800  6F61               	movwf	(??_disk_initialize+1)& (0+255),b
 10101  001802  0EBB               	movlw	187
 10102  001804  6F60               	movwf	??_disk_initialize& (0+255),b
 10103  001806  0EDF               	movlw	223
 10104  001808                     u9247:
 10105  001808  2EE8               	decfsz	wreg,f,c
 10106  00180A  D7FE               	bra	u9247
 10107  00180C  2F60               	decfsz	??_disk_initialize& (0+255),f,b
 10108  00180E  D7FC               	bra	u9247
 10109  001810  2F61               	decfsz	(??_disk_initialize+1)& (0+255),f,b
 10110  001812  D7FA               	bra	u9247
 10111  001814  D000               	nop2	
 10112                           
 10113                           ;diskio.c: 147: return stat;
 10114  001816  0100               	movlb	0	; () banked
 10115  001818  5166               	movf	disk_initialize@stat& (0+255),w,b
 10116  00181A  0012               	return	
 10117  00181C                     __end_of_disk_initialize:
 10118                           	opt stack 0
 10119                           tosu	equ	0xFFF
 10120                           tosh	equ	0xFFE
 10121                           tosl	equ	0xFFD
 10122                           pclath	equ	0xFFA
 10123                           tblptru	equ	0xFF8
 10124                           tblptrh	equ	0xFF7
 10125                           tblptrl	equ	0xFF6
 10126                           tablat	equ	0xFF5
 10127                           prodh	equ	0xFF4
 10128                           prodl	equ	0xFF3
 10129                           intcon	equ	0xFF2
 10130                           intcon2	equ	0xFF1
 10131                           intcon3	equ	0xFF0
 10132                           postinc0	equ	0xFEE
 10133                           wreg	equ	0xFE8
 10134                           indf1	equ	0xFE7
 10135                           postinc1	equ	0xFE6
 10136                           postdec1	equ	0xFE5
 10137                           fsr1h	equ	0xFE2
 10138                           fsr1l	equ	0xFE1
 10139                           indf2	equ	0xFDF
 10140                           postinc2	equ	0xFDE
 10141                           postdec2	equ	0xFDD
 10142                           plusw2	equ	0xFDB
 10143                           fsr2h	equ	0xFDA
 10144                           fsr2l	equ	0xFD9
 10145                           status	equ	0xFD8
 10146                           
 10147 ;; *************** function _reset *****************
 10148 ;; Defined at:
 10149 ;;		line 36 in file "diskio.c"
 10150 ;; Parameters:    Size  Location     Type
 10151 ;;		None
 10152 ;; Auto vars:     Size  Location     Type
 10153 ;;  count           2   41[COMRAM] int 
 10154 ;;  i               2   39[COMRAM] int 
 10155 ;;  buff            1   43[COMRAM] unsigned char 
 10156 ;; Return value:  Size  Location     Type
 10157 ;;                  1    wreg      void 
 10158 ;; Registers used:
 10159 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10160 ;; Tracked objects:
 10161 ;;		On entry : 0/0
 10162 ;;		On exit  : 0/0
 10163 ;;		Unchanged: 0/0
 10164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10165 ;;      Params:         0       0       0       0       0       0       0       0       0
 10166 ;;      Locals:         5       0       0       0       0       0       0       0       0
 10167 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10168 ;;      Totals:         5       0       0       0       0       0       0       0       0
 10169 ;;Total ram usage:        5 bytes
 10170 ;; Hardware stack levels used:    1
 10171 ;; Hardware stack levels required when called:    6
 10172 ;; This function calls:
 10173 ;;		_command
 10174 ;;		_dummy_clocks
 10175 ;;		_escreve_frase_ram_lcd
 10176 ;;		_posicao_cursor_lcd
 10177 ;;		_proceed
 10178 ;;		_response
 10179 ;; This function is called by:
 10180 ;;		_disk_initialize
 10181 ;; This function uses a non-reentrant model
 10182 ;;
 10183                           
 10184                           	psect	text38
 10185  00298E                     __ptext38:
 10186                           	opt stack 0
 10187  00298E                     _reset:
 10188                           	opt stack 20
 10189                           
 10190                           ;diskio.c: 38: int i = 0, count = 0;
 10191                           
 10192                           ; BSR set to: 0
 10193                           ;incstack = 0
 10194  00298E  0E00               	movlw	0
 10195  002990  6E29               	movwf	reset@i+1,c
 10196  002992  0E00               	movlw	0
 10197  002994  6E28               	movwf	reset@i,c
 10198  002996  0E00               	movlw	0
 10199  002998  6E2B               	movwf	reset@count+1,c
 10200  00299A  0E00               	movlw	0
 10201  00299C  6E2A               	movwf	reset@count,c
 10202                           
 10203                           ;diskio.c: 39: unsigned char buff;
 10204                           ;diskio.c: 40: posicao_cursor_lcd(1,0);
 10205  00299E  0E00               	movlw	0
 10206  0029A0  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 10207  0029A2  0E01               	movlw	1
 10208  0029A4  EC45  F016         	call	_posicao_cursor_lcd
 10209                           
 10210                           ;diskio.c: 41: escreve_frase_ram_lcd("travou aqui");
 10211  0029A8  0EC0               	movlw	low STR_14
 10212  0029AA  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 10213  0029AC  0E7F               	movlw	high STR_14
 10214  0029AE  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 10215  0029B0  EC6B  F017         	call	_escreve_frase_ram_lcd	;wreg free
 10216  0029B4                     
 10217                           ;diskio.c: 44: dummy_clocks(8);
 10218  0029B4  0E08               	movlw	8
 10219  0029B6  EC94  F017         	call	_dummy_clocks
 10220                           
 10221                           ;diskio.c: 45: command(0X40, 0X00000000, 0X95);
 10222  0029BA  0E00               	movlw	0
 10223  0029BC  6E21               	movwf	command@arg,c
 10224  0029BE  0E00               	movlw	0
 10225  0029C0  6E22               	movwf	command@arg+1,c
 10226  0029C2  0E00               	movlw	0
 10227  0029C4  6E23               	movwf	command@arg+2,c
 10228  0029C6  0E00               	movlw	0
 10229  0029C8  6E24               	movwf	command@arg+3,c
 10230  0029CA  0E95               	movlw	149
 10231  0029CC  6E25               	movwf	command@CRC,c
 10232  0029CE  0E40               	movlw	64
 10233  0029D0  EC41  F017         	call	_command
 10234                           
 10235                           ;diskio.c: 46: proceed();
 10236  0029D4  EC20  F019         	call	_proceed	;wreg free
 10237                           
 10238                           ;diskio.c: 47: posicao_cursor_lcd(1,0);
 10239  0029D8  0E00               	movlw	0
 10240  0029DA  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 10241  0029DC  0E01               	movlw	1
 10242  0029DE  EC45  F016         	call	_posicao_cursor_lcd
 10243                           
 10244                           ;diskio.c: 48: escreve_frase_ram_lcd("travou aqui 2");
 10245  0029E2  0E6D               	movlw	low STR_15
 10246  0029E4  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 10247  0029E6  0E7F               	movlw	high STR_15
 10248  0029E8  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 10249  0029EA  EC6B  F017         	call	_escreve_frase_ram_lcd	;wreg free
 10250  0029EE                     
 10251                           ;diskio.c: 50: buff = response();
 10252  0029EE  EC13  F019         	call	_response	;wreg free
 10253  0029F2  6E2C               	movwf	reset@buff,c
 10254                           
 10255                           ;diskio.c: 53: count++;
 10256  0029F4  4A2A               	infsnz	reset@count,f,c
 10257  0029F6  2A2B               	incf	reset@count+1,f,c
 10258                           
 10259                           ;diskio.c: 54: }while((buff!=0X01) && (count<10) );
 10260  0029F8  042C               	decf	reset@buff,w,c
 10261  0029FA  B4D8               	btfsc	status,2,c
 10262  0029FC  D008               	goto	u7220
 10263  0029FE  BE2B               	btfsc	reset@count+1,7,c
 10264  002A00  D7F6               	goto	l716
 10265  002A02  502B               	movf	reset@count+1,w,c
 10266  002A04  E104               	bnz	l6512
 10267  002A06  0E0A               	movlw	10
 10268  002A08  5C2A               	subwf	reset@count,w,c
 10269  002A0A  A0D8               	btfss	status,0,c
 10270  002A0C  D7F0               	goto	l716
 10271  002A0E                     u7220:
 10272  002A0E                     l6512:
 10273                           
 10274                           ;diskio.c: 55: count = 0;
 10275  002A0E  0E00               	movlw	0
 10276  002A10  6E2B               	movwf	reset@count+1,c
 10277  002A12  0E00               	movlw	0
 10278  002A14  6E2A               	movwf	reset@count,c
 10279                           
 10280                           ;diskio.c: 56: }while(buff!=0X01);
 10281  002A16  042C               	decf	reset@buff,w,c
 10282  002A18  B4D8               	btfsc	status,2,c
 10283  002A1A  0012               	return	
 10284  002A1C  D7CB               	goto	l715
 10285  002A1E                     __end_of_reset:
 10286                           	opt stack 0
 10287                           tosu	equ	0xFFF
 10288                           tosh	equ	0xFFE
 10289                           tosl	equ	0xFFD
 10290                           pclath	equ	0xFFA
 10291                           tblptru	equ	0xFF8
 10292                           tblptrh	equ	0xFF7
 10293                           tblptrl	equ	0xFF6
 10294                           tablat	equ	0xFF5
 10295                           prodh	equ	0xFF4
 10296                           prodl	equ	0xFF3
 10297                           intcon	equ	0xFF2
 10298                           intcon2	equ	0xFF1
 10299                           intcon3	equ	0xFF0
 10300                           postinc0	equ	0xFEE
 10301                           wreg	equ	0xFE8
 10302                           indf1	equ	0xFE7
 10303                           postinc1	equ	0xFE6
 10304                           postdec1	equ	0xFE5
 10305                           fsr1h	equ	0xFE2
 10306                           fsr1l	equ	0xFE1
 10307                           indf2	equ	0xFDF
 10308                           postinc2	equ	0xFDE
 10309                           postdec2	equ	0xFDD
 10310                           plusw2	equ	0xFDB
 10311                           fsr2h	equ	0xFDA
 10312                           fsr2l	equ	0xFD9
 10313                           status	equ	0xFD8
 10314                           
 10315 ;; *************** function _escreve_cmd_lcd *****************
 10316 ;; Defined at:
 10317 ;;		line 162 in file "bibliotecas/display/display_lcd.c"
 10318 ;; Parameters:    Size  Location     Type
 10319 ;;  comando         1    wreg     unsigned char 
 10320 ;; Auto vars:     Size  Location     Type
 10321 ;;  comando         1   27[COMRAM] unsigned char 
 10322 ;; Return value:  Size  Location     Type
 10323 ;;                  1    wreg      void 
 10324 ;; Registers used:
 10325 ;;		wreg, status,2, status,0, cstack
 10326 ;; Tracked objects:
 10327 ;;		On entry : 0/0
 10328 ;;		On exit  : 0/0
 10329 ;;		Unchanged: 0/0
 10330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10331 ;;      Params:         0       0       0       0       0       0       0       0       0
 10332 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10333 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10334 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10335 ;;Total ram usage:        1 bytes
 10336 ;; Hardware stack levels used:    1
 10337 ;; Hardware stack levels required when called:    3
 10338 ;; This function calls:
 10339 ;;		_delay
 10340 ;; This function is called by:
 10341 ;;		_inicializa_SPI
 10342 ;;		_mensagem_inicial
 10343 ;;		_SDCard
 10344 ;;		_init_lcd
 10345 ;;		_disk_initialize
 10346 ;;		_leitura_chave
 10347 ;;		_cria_caractere_lcd
 10348 ;; This function uses a non-reentrant model
 10349 ;;
 10350                           
 10351                           	psect	text39
 10352  002A1E                     __ptext39:
 10353                           	opt stack 0
 10354  002A1E                     _escreve_cmd_lcd:
 10355                           	opt stack 26
 10356                           
 10357                           ;incstack = 0
 10358                           ;escreve_cmd_lcd@comando stored from wreg
 10359  002A1E  6E1C               	movwf	escreve_cmd_lcd@comando,c
 10360                           
 10361                           ;display_lcd.c: 165: PORTDbits.RD2 = 0;
 10362  002A20  9483               	bcf	3971,2,c	;volatile
 10363                           
 10364                           ;display_lcd.c: 166: PORTDbits.RD1 = 0;
 10365  002A22  9283               	bcf	3971,1,c	;volatile
 10366                           
 10367                           ;display_lcd.c: 167: PORTDbits.RD0 = 0;
 10368  002A24  9083               	bcf	3971,0,c	;volatile
 10369                           
 10370                           ;display_lcd.c: 170: if(comando&0b00010000){PORTDbits.RD4=1;}
 10371  002A26  A81C               	btfss	escreve_cmd_lcd@comando,4,c
 10372  002A28  D002               	goto	l577
 10373  002A2A  8883               	bsf	3971,4,c	;volatile
 10374  002A2C  D001               	goto	l578
 10375  002A2E                     l577:
 10376                           
 10377                           ;display_lcd.c: 171: else {PORTDbits.RD4=0;}
 10378  002A2E  9883               	bcf	3971,4,c	;volatile
 10379  002A30                     l578:
 10380                           
 10381                           ;display_lcd.c: 172: if(comando&0b00100000){PORTDbits.RD5=1;}
 10382  002A30  AA1C               	btfss	escreve_cmd_lcd@comando,5,c
 10383  002A32  D002               	goto	l579
 10384  002A34  8A83               	bsf	3971,5,c	;volatile
 10385  002A36  D001               	goto	l580
 10386  002A38                     l579:
 10387                           
 10388                           ;display_lcd.c: 173: else {PORTDbits.RD5=0;}
 10389  002A38  9A83               	bcf	3971,5,c	;volatile
 10390  002A3A                     l580:
 10391                           
 10392                           ;display_lcd.c: 174: if(comando&0b01000000){PORTDbits.RD6=1;}
 10393  002A3A  AC1C               	btfss	escreve_cmd_lcd@comando,6,c
 10394  002A3C  D002               	goto	l581
 10395  002A3E  8C83               	bsf	3971,6,c	;volatile
 10396  002A40  D001               	goto	l582
 10397  002A42                     l581:
 10398                           
 10399                           ;display_lcd.c: 175: else {PORTDbits.RD6=0;}
 10400  002A42  9C83               	bcf	3971,6,c	;volatile
 10401  002A44                     l582:
 10402                           
 10403                           ;display_lcd.c: 176: if(comando&0b10000000){PORTDbits.RD7=1;}
 10404  002A44  AE1C               	btfss	escreve_cmd_lcd@comando,7,c
 10405  002A46  D002               	goto	l583
 10406  002A48  8E83               	bsf	3971,7,c	;volatile
 10407  002A4A  D001               	goto	l584
 10408  002A4C                     l583:
 10409                           
 10410                           ;display_lcd.c: 177: else {PORTDbits.RD7=0;}
 10411  002A4C  9E83               	bcf	3971,7,c	;volatile
 10412  002A4E                     l584:
 10413                           
 10414                           ;display_lcd.c: 180: PORTDbits.RD0 = 1;
 10415  002A4E  8083               	bsf	3971,0,c	;volatile
 10416                           
 10417                           ;display_lcd.c: 181: delay();
 10418  002A50  EC54  F018         	call	_delay	;wreg free
 10419                           
 10420                           ;display_lcd.c: 182: PORTDbits.RD0 = 0;
 10421  002A54  9083               	bcf	3971,0,c	;volatile
 10422                           
 10423                           ;display_lcd.c: 183: delay();
 10424  002A56  EC54  F018         	call	_delay	;wreg free
 10425                           
 10426                           ;display_lcd.c: 186: if(comando&0b00000001){PORTDbits.RD4=1;}
 10427  002A5A  A01C               	btfss	escreve_cmd_lcd@comando,0,c
 10428  002A5C  D002               	goto	l585
 10429  002A5E  8883               	bsf	3971,4,c	;volatile
 10430  002A60  D001               	goto	l586
 10431  002A62                     l585:
 10432                           
 10433                           ;display_lcd.c: 187: else {PORTDbits.RD4=0;}
 10434  002A62  9883               	bcf	3971,4,c	;volatile
 10435  002A64                     l586:
 10436                           
 10437                           ;display_lcd.c: 188: if(comando&0b00000010){PORTDbits.RD5=1;}
 10438  002A64  A21C               	btfss	escreve_cmd_lcd@comando,1,c
 10439  002A66  D002               	goto	l587
 10440  002A68  8A83               	bsf	3971,5,c	;volatile
 10441  002A6A  D001               	goto	l588
 10442  002A6C                     l587:
 10443                           
 10444                           ;display_lcd.c: 189: else {PORTDbits.RD5=0;}
 10445  002A6C  9A83               	bcf	3971,5,c	;volatile
 10446  002A6E                     l588:
 10447                           
 10448                           ;display_lcd.c: 190: if(comando&0b00000100){PORTDbits.RD6=1;}
 10449  002A6E  A41C               	btfss	escreve_cmd_lcd@comando,2,c
 10450  002A70  D002               	goto	l589
 10451  002A72  8C83               	bsf	3971,6,c	;volatile
 10452  002A74  D001               	goto	l590
 10453  002A76                     l589:
 10454                           
 10455                           ;display_lcd.c: 191: else {PORTDbits.RD6=0;}
 10456  002A76  9C83               	bcf	3971,6,c	;volatile
 10457  002A78                     l590:
 10458                           
 10459                           ;display_lcd.c: 192: if(comando&0b00001000){PORTDbits.RD7=1;}
 10460  002A78  A61C               	btfss	escreve_cmd_lcd@comando,3,c
 10461  002A7A  D002               	goto	l591
 10462  002A7C  8E83               	bsf	3971,7,c	;volatile
 10463  002A7E  D001               	goto	l592
 10464  002A80                     l591:
 10465                           
 10466                           ;display_lcd.c: 193: else {PORTDbits.RD7=0;}
 10467  002A80  9E83               	bcf	3971,7,c	;volatile
 10468  002A82                     l592:
 10469                           
 10470                           ;display_lcd.c: 196: PORTDbits.RD0 = 1;
 10471  002A82  8083               	bsf	3971,0,c	;volatile
 10472                           
 10473                           ;display_lcd.c: 197: delay();
 10474  002A84  EC54  F018         	call	_delay	;wreg free
 10475                           
 10476                           ;display_lcd.c: 198: PORTDbits.RD0 = 0;
 10477  002A88  9083               	bcf	3971,0,c	;volatile
 10478                           
 10479                           ;display_lcd.c: 199: delay();
 10480  002A8A  EC54  F018         	call	_delay	;wreg free
 10481                           
 10482                           ;display_lcd.c: 204: if (comando==0x01 || comando==0x02 || comando==0x03)
 10483  002A8E  041C               	decf	escreve_cmd_lcd@comando,w,c
 10484  002A90  B4D8               	btfsc	status,2,c
 10485  002A92  D008               	goto	u7200
 10486  002A94  0E02               	movlw	2
 10487  002A96  181C               	xorwf	escreve_cmd_lcd@comando,w,c
 10488  002A98  B4D8               	btfsc	status,2,c
 10489  002A9A  D004               	goto	u7200
 10490  002A9C  0E03               	movlw	3
 10491  002A9E  181C               	xorwf	escreve_cmd_lcd@comando,w,c
 10492  002AA0  A4D8               	btfss	status,2,c
 10493  002AA2  0012               	return	
 10494  002AA4                     u7200:
 10495                           
 10496                           ;display_lcd.c: 205: { delay(); }
 10497  002AA4  EC54  F018         	call	_delay	;wreg free
 10498  002AA8  0012               	return	
 10499  002AAA                     __end_of_escreve_cmd_lcd:
 10500                           	opt stack 0
 10501                           tosu	equ	0xFFF
 10502                           tosh	equ	0xFFE
 10503                           tosl	equ	0xFFD
 10504                           pclath	equ	0xFFA
 10505                           tblptru	equ	0xFF8
 10506                           tblptrh	equ	0xFF7
 10507                           tblptrl	equ	0xFF6
 10508                           tablat	equ	0xFF5
 10509                           prodh	equ	0xFF4
 10510                           prodl	equ	0xFF3
 10511                           intcon	equ	0xFF2
 10512                           intcon2	equ	0xFF1
 10513                           intcon3	equ	0xFF0
 10514                           postinc0	equ	0xFEE
 10515                           wreg	equ	0xFE8
 10516                           indf1	equ	0xFE7
 10517                           postinc1	equ	0xFE6
 10518                           postdec1	equ	0xFE5
 10519                           fsr1h	equ	0xFE2
 10520                           fsr1l	equ	0xFE1
 10521                           indf2	equ	0xFDF
 10522                           postinc2	equ	0xFDE
 10523                           postdec2	equ	0xFDD
 10524                           plusw2	equ	0xFDB
 10525                           fsr2h	equ	0xFDA
 10526                           fsr2l	equ	0xFD9
 10527                           status	equ	0xFD8
 10528                           
 10529 ;; *************** function _check_fs *****************
 10530 ;; Defined at:
 10531 ;;		line 722 in file "pff.c"
 10532 ;; Parameters:    Size  Location     Type
 10533 ;;  buf             2   18[BANK0 ] PTR unsigned char 
 10534 ;;		 -> pf_mount@buf(36), 
 10535 ;;  sect            4   20[BANK0 ] unsigned long 
 10536 ;; Auto vars:     Size  Location     Type
 10537 ;;		None
 10538 ;; Return value:  Size  Location     Type
 10539 ;;                  1    wreg      unsigned char 
 10540 ;; Registers used:
 10541 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10542 ;; Tracked objects:
 10543 ;;		On entry : 0/0
 10544 ;;		On exit  : 0/0
 10545 ;;		Unchanged: 0/0
 10546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10547 ;;      Params:         0       6       0       0       0       0       0       0       0
 10548 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10549 ;;      Temps:          0       4       0       0       0       0       0       0       0
 10550 ;;      Totals:         0      10       0       0       0       0       0       0       0
 10551 ;;Total ram usage:       10 bytes
 10552 ;; Hardware stack levels used:    1
 10553 ;; Hardware stack levels required when called:    7
 10554 ;; This function calls:
 10555 ;;		_disk_readp
 10556 ;; This function is called by:
 10557 ;;		_pf_mount
 10558 ;; This function uses a non-reentrant model
 10559 ;;
 10560                           
 10561                           	psect	text40
 10562  001B3A                     __ptext40:
 10563                           	opt stack 0
 10564  001B3A                     _check_fs:
 10565                           	opt stack 20
 10566                           
 10567                           ;pff.c: 727: if (disk_readp(buf, sect, 510, 2))
 10568                           
 10569                           ;incstack = 0
 10570  001B3A  C072  F060         	movff	check_fs@buf,disk_readp@rd
 10571  001B3E  C073  F061         	movff	check_fs@buf+1,disk_readp@rd+1
 10572  001B42  C074  F062         	movff	check_fs@sect,disk_readp@sector
 10573  001B46  C075  F063         	movff	check_fs@sect+1,disk_readp@sector+1
 10574  001B4A  C076  F064         	movff	check_fs@sect+2,disk_readp@sector+2
 10575  001B4E  C077  F065         	movff	check_fs@sect+3,disk_readp@sector+3
 10576  001B52  0E01               	movlw	1
 10577  001B54  0100               	movlb	0	; () banked
 10578  001B56  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
 10579  001B58  0EFE               	movlw	254
 10580  001B5A  6F66               	movwf	disk_readp@offset& (0+255),b
 10581  001B5C  0E00               	movlw	0
 10582  001B5E  6F69               	movwf	(disk_readp@count+1)& (0+255),b
 10583  001B60  0E02               	movlw	2
 10584  001B62  6F68               	movwf	disk_readp@count& (0+255),b
 10585  001B64  EC3C  F009         	call	_disk_readp	;wreg free
 10586  001B68  0900               	iorlw	0
 10587  001B6A  B4D8               	btfsc	status,2,c
 10588  001B6C  D002               	goto	l948
 10589                           
 10590                           ;pff.c: 728: return 3;
 10591  001B6E  0E03               	movlw	3
 10592  001B70  0012               	return	
 10593  001B72                     l948:
 10594                           
 10595                           ;pff.c: 729: if ( (WORD)(((WORD)*((BYTE*)(buf)+1)<<8)|(WORD)*(BYTE*)(buf)) != 0xAA55)
 10596  001B72  0100               	movlb	0	; () banked
 10597  001B74  EE20 F001          	lfsr	2,1
 10598  001B78  5172               	movf	check_fs@buf& (0+255),w,b
 10599  001B7A  26D9               	addwf	fsr2l,f,c
 10600  001B7C  5173               	movf	(check_fs@buf+1)& (0+255),w,b
 10601  001B7E  22DA               	addwfc	fsr2h,f,c
 10602  001B80  50DF               	movf	indf2,w,c
 10603  001B82  6F78               	movwf	??_check_fs& (0+255),b
 10604  001B84  5178               	movf	??_check_fs& (0+255),w,b
 10605  001B86  6F7A               	movwf	(??_check_fs+2)& (0+255),b
 10606  001B88  6B79               	clrf	(??_check_fs+1)& (0+255),b
 10607  001B8A  C072  FFD9         	movff	check_fs@buf,fsr2l
 10608  001B8E  C073  FFDA         	movff	check_fs@buf+1,fsr2h
 10609  001B92  50DF               	movf	indf2,w,c
 10610  001B94  6F7B               	movwf	(??_check_fs+3)& (0+255),b
 10611  001B96  517B               	movf	(??_check_fs+3)& (0+255),w,b
 10612  001B98  1379               	iorwf	(??_check_fs+1)& (0+255),f,b
 10613  001B9A  0E00               	movlw	0
 10614  001B9C  137A               	iorwf	(??_check_fs+2)& (0+255),f,b
 10615  001B9E  0E55               	movlw	85
 10616  001BA0  1979               	xorwf	(??_check_fs+1)& (0+255),w,b
 10617  001BA2  E104               	bnz	u7700
 10618  001BA4  0EAA               	movlw	170
 10619  001BA6  197A               	xorwf	(??_check_fs+2)& (0+255),w,b
 10620  001BA8  B4D8               	btfsc	status,2,c
 10621  001BAA  D002               	goto	l950
 10622  001BAC                     u7700:
 10623                           
 10624                           ; BSR set to: 0
 10625                           ;pff.c: 730: {
 10626                           ;pff.c: 731: return 2;
 10627  001BAC  0E02               	movlw	2
 10628                           
 10629                           ; BSR set to: 0
 10630  001BAE  0012               	return	
 10631  001BB0                     l950:
 10632                           
 10633                           ; BSR set to: 0
 10634                           
 10635                           ; BSR set to: 0
 10636  001BB0  C072  F060         	movff	check_fs@buf,disk_readp@rd
 10637  001BB4  C073  F061         	movff	check_fs@buf+1,disk_readp@rd+1
 10638  001BB8  C074  F062         	movff	check_fs@sect,disk_readp@sector
 10639  001BBC  C075  F063         	movff	check_fs@sect+1,disk_readp@sector+1
 10640  001BC0  C076  F064         	movff	check_fs@sect+2,disk_readp@sector+2
 10641  001BC4  C077  F065         	movff	check_fs@sect+3,disk_readp@sector+3
 10642  001BC8  0E00               	movlw	0
 10643  001BCA  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
 10644  001BCC  0E36               	movlw	54
 10645  001BCE  6F66               	movwf	disk_readp@offset& (0+255),b
 10646  001BD0  0E00               	movlw	0
 10647  001BD2  6F69               	movwf	(disk_readp@count+1)& (0+255),b
 10648  001BD4  0E02               	movlw	2
 10649  001BD6  6F68               	movwf	disk_readp@count& (0+255),b
 10650  001BD8  EC3C  F009         	call	_disk_readp	;wreg free
 10651  001BDC  0900               	iorlw	0
 10652  001BDE  A4D8               	btfss	status,2,c
 10653  001BE0  D01F               	goto	l951
 10654  001BE2  0100               	movlb	0	; () banked
 10655  001BE4  EE20 F001          	lfsr	2,1
 10656  001BE8  5172               	movf	check_fs@buf& (0+255),w,b
 10657  001BEA  26D9               	addwf	fsr2l,f,c
 10658  001BEC  5173               	movf	(check_fs@buf+1)& (0+255),w,b
 10659  001BEE  22DA               	addwfc	fsr2h,f,c
 10660  001BF0  50DF               	movf	indf2,w,c
 10661  001BF2  6F78               	movwf	??_check_fs& (0+255),b
 10662  001BF4  5178               	movf	??_check_fs& (0+255),w,b
 10663  001BF6  6F7A               	movwf	(??_check_fs+2)& (0+255),b
 10664  001BF8  6B79               	clrf	(??_check_fs+1)& (0+255),b
 10665  001BFA  C072  FFD9         	movff	check_fs@buf,fsr2l
 10666  001BFE  C073  FFDA         	movff	check_fs@buf+1,fsr2h
 10667  001C02  50DF               	movf	indf2,w,c
 10668  001C04  6F7B               	movwf	(??_check_fs+3)& (0+255),b
 10669  001C06  517B               	movf	(??_check_fs+3)& (0+255),w,b
 10670  001C08  1379               	iorwf	(??_check_fs+1)& (0+255),f,b
 10671  001C0A  0E00               	movlw	0
 10672  001C0C  137A               	iorwf	(??_check_fs+2)& (0+255),f,b
 10673  001C0E  0E46               	movlw	70
 10674  001C10  1979               	xorwf	(??_check_fs+1)& (0+255),w,b
 10675  001C12  E106               	bnz	l6854
 10676  001C14  0E41               	movlw	65
 10677  001C16  197A               	xorwf	(??_check_fs+2)& (0+255),w,b
 10678  001C18  A4D8               	btfss	status,2,c
 10679  001C1A  D002               	goto	l951
 10680                           
 10681                           ; BSR set to: 0
 10682                           ;pff.c: 734: return 0;
 10683  001C1C  0E00               	movlw	0
 10684                           
 10685                           ; BSR set to: 0
 10686  001C1E  0012               	return	
 10687  001C20                     l951:
 10688  001C20                     l6854:
 10689  001C20  C072  F060         	movff	check_fs@buf,disk_readp@rd
 10690  001C24  C073  F061         	movff	check_fs@buf+1,disk_readp@rd+1
 10691  001C28  C074  F062         	movff	check_fs@sect,disk_readp@sector
 10692  001C2C  C075  F063         	movff	check_fs@sect+1,disk_readp@sector+1
 10693  001C30  C076  F064         	movff	check_fs@sect+2,disk_readp@sector+2
 10694  001C34  C077  F065         	movff	check_fs@sect+3,disk_readp@sector+3
 10695  001C38  0E00               	movlw	0
 10696  001C3A  0100               	movlb	0	; () banked
 10697  001C3C  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
 10698  001C3E  0E52               	movlw	82
 10699  001C40  6F66               	movwf	disk_readp@offset& (0+255),b
 10700  001C42  0E00               	movlw	0
 10701  001C44  6F69               	movwf	(disk_readp@count+1)& (0+255),b
 10702  001C46  0E02               	movlw	2
 10703  001C48  6F68               	movwf	disk_readp@count& (0+255),b
 10704  001C4A  EC3C  F009         	call	_disk_readp	;wreg free
 10705  001C4E  0900               	iorlw	0
 10706  001C50  A4D8               	btfss	status,2,c
 10707  001C52  D01F               	goto	l952
 10708  001C54  0100               	movlb	0	; () banked
 10709  001C56  EE20 F001          	lfsr	2,1
 10710  001C5A  5172               	movf	check_fs@buf& (0+255),w,b
 10711  001C5C  26D9               	addwf	fsr2l,f,c
 10712  001C5E  5173               	movf	(check_fs@buf+1)& (0+255),w,b
 10713  001C60  22DA               	addwfc	fsr2h,f,c
 10714  001C62  50DF               	movf	indf2,w,c
 10715  001C64  6F78               	movwf	??_check_fs& (0+255),b
 10716  001C66  5178               	movf	??_check_fs& (0+255),w,b
 10717  001C68  6F7A               	movwf	(??_check_fs+2)& (0+255),b
 10718  001C6A  6B79               	clrf	(??_check_fs+1)& (0+255),b
 10719  001C6C  C072  FFD9         	movff	check_fs@buf,fsr2l
 10720  001C70  C073  FFDA         	movff	check_fs@buf+1,fsr2h
 10721  001C74  50DF               	movf	indf2,w,c
 10722  001C76  6F7B               	movwf	(??_check_fs+3)& (0+255),b
 10723  001C78  517B               	movf	(??_check_fs+3)& (0+255),w,b
 10724  001C7A  1379               	iorwf	(??_check_fs+1)& (0+255),f,b
 10725  001C7C  0E00               	movlw	0
 10726  001C7E  137A               	iorwf	(??_check_fs+2)& (0+255),f,b
 10727  001C80  0E46               	movlw	70
 10728  001C82  1979               	xorwf	(??_check_fs+1)& (0+255),w,b
 10729  001C84  E106               	bnz	l6862
 10730  001C86  0E41               	movlw	65
 10731  001C88  197A               	xorwf	(??_check_fs+2)& (0+255),w,b
 10732  001C8A  A4D8               	btfss	status,2,c
 10733  001C8C  D002               	goto	l952
 10734                           
 10735                           ; BSR set to: 0
 10736                           ;pff.c: 736: return 0;
 10737  001C8E  0E00               	movlw	0
 10738                           
 10739                           ; BSR set to: 0
 10740  001C90  0012               	return	
 10741  001C92                     l952:
 10742  001C92                     l6862:
 10743                           
 10744                           ;pff.c: 737: return 1;
 10745  001C92  0E01               	movlw	1
 10746  001C94  0012               	return	
 10747  001C96                     __end_of_check_fs:
 10748                           	opt stack 0
 10749                           tosu	equ	0xFFF
 10750                           tosh	equ	0xFFE
 10751                           tosl	equ	0xFFD
 10752                           pclath	equ	0xFFA
 10753                           tblptru	equ	0xFF8
 10754                           tblptrh	equ	0xFF7
 10755                           tblptrl	equ	0xFF6
 10756                           tablat	equ	0xFF5
 10757                           prodh	equ	0xFF4
 10758                           prodl	equ	0xFF3
 10759                           intcon	equ	0xFF2
 10760                           intcon2	equ	0xFF1
 10761                           intcon3	equ	0xFF0
 10762                           postinc0	equ	0xFEE
 10763                           wreg	equ	0xFE8
 10764                           indf1	equ	0xFE7
 10765                           postinc1	equ	0xFE6
 10766                           postdec1	equ	0xFE5
 10767                           fsr1h	equ	0xFE2
 10768                           fsr1l	equ	0xFE1
 10769                           indf2	equ	0xFDF
 10770                           postinc2	equ	0xFDE
 10771                           postdec2	equ	0xFDD
 10772                           plusw2	equ	0xFDB
 10773                           fsr2h	equ	0xFDA
 10774                           fsr2l	equ	0xFD9
 10775                           status	equ	0xFD8
 10776                           
 10777 ;; *************** function _disk_readp *****************
 10778 ;; Defined at:
 10779 ;;		line 155 in file "diskio.c"
 10780 ;; Parameters:    Size  Location     Type
 10781 ;;  rd              2    0[BANK0 ] PTR unsigned char 
 10782 ;;		 -> pf_readdir@dir(32), pf_opendir@dir(32), pf_open@dir(32), pf_mount@buf(36), 
 10783 ;;		 -> NULL(0), get_fat@buf(4), data_buffer_32(32), 
 10784 ;;  sector          4    2[BANK0 ] unsigned long 
 10785 ;;  offset          2    6[BANK0 ] unsigned int 
 10786 ;;  count           2    8[BANK0 ] unsigned int 
 10787 ;; Auto vars:     Size  Location     Type
 10788 ;;  start_add       4   11[BANK0 ] unsigned long 
 10789 ;;  length          2   16[BANK0 ] int 
 10790 ;;  i               2    0        int 
 10791 ;;  buff            1   15[BANK0 ] unsigned char 
 10792 ;;  ptr             1   10[BANK0 ] unsigned char 
 10793 ;;  res             1    0        enum E14
 10794 ;; Return value:  Size  Location     Type
 10795 ;;                  1    wreg      enum E14
 10796 ;; Registers used:
 10797 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10798 ;; Tracked objects:
 10799 ;;		On entry : 0/0
 10800 ;;		On exit  : 0/0
 10801 ;;		Unchanged: 0/0
 10802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10803 ;;      Params:         0      10       0       0       0       0       0       0       0
 10804 ;;      Locals:         0       8       0       0       0       0       0       0       0
 10805 ;;      Temps:          4       0       0       0       0       0       0       0       0
 10806 ;;      Totals:         4      18       0       0       0       0       0       0       0
 10807 ;;Total ram usage:       22 bytes
 10808 ;; Hardware stack levels used:    1
 10809 ;; Hardware stack levels required when called:    6
 10810 ;; This function calls:
 10811 ;;		_command
 10812 ;;		_dummy_clocks
 10813 ;;		_proceed
 10814 ;;		_response
 10815 ;; This function is called by:
 10816 ;;		_get_fat
 10817 ;;		_dir_find
 10818 ;;		_check_fs
 10819 ;;		_pf_mount
 10820 ;;		_pf_read
 10821 ;;		_dir_read
 10822 ;; This function uses a non-reentrant model
 10823 ;;
 10824                           
 10825                           	psect	text41
 10826  001278                     __ptext41:
 10827                           	opt stack 0
 10828  001278                     _disk_readp:
 10829                           	opt stack 20
 10830                           
 10831                           ;diskio.c: 162: DRESULT res;
 10832                           ;diskio.c: 163: unsigned char ptr=0X00,buff;
 10833                           
 10834                           ;incstack = 0
 10835  001278  0E00               	movlw	0
 10836  00127A  0100               	movlb	0	; () banked
 10837  00127C  6F6A               	movwf	disk_readp@ptr& (0+255),b
 10838                           
 10839                           ; BSR set to: 0
 10840                           ;diskio.c: 164: unsigned long int start_add;
 10841                           ;diskio.c: 165: static unsigned char arr[512];
 10842                           ;diskio.c: 166: int length,i;
 10843                           ;diskio.c: 168: if(offset == 0)
 10844  00127E  5166               	movf	disk_readp@offset& (0+255),w,b
 10845  001280  1167               	iorwf	(disk_readp@offset+1)& (0+255),w,b
 10846  001282  A4D8               	btfss	status,2,c
 10847  001284  D0A7               	goto	l746
 10848                           
 10849                           ; BSR set to: 0
 10850                           ;diskio.c: 169: {
 10851                           ;diskio.c: 170: start_add = ((sector*512));
 10852  001286  C062  F028         	movff	disk_readp@sector,??_disk_readp
 10853  00128A  C063  F029         	movff	disk_readp@sector+1,??_disk_readp+1
 10854  00128E  C064  F02A         	movff	disk_readp@sector+2,??_disk_readp+2
 10855  001292  C065  F02B         	movff	disk_readp@sector+3,??_disk_readp+3
 10856  001296  0E09               	movlw	9
 10857  001298                     u6615:
 10858  001298  90D8               	bcf	status,0,c
 10859  00129A  3628               	rlcf	??_disk_readp,f,c
 10860  00129C  3629               	rlcf	??_disk_readp+1,f,c
 10861  00129E  362A               	rlcf	??_disk_readp+2,f,c
 10862  0012A0  362B               	rlcf	??_disk_readp+3,f,c
 10863  0012A2  2EE8               	decfsz	wreg,f,c
 10864  0012A4  D7F9               	goto	u6615
 10865  0012A6  C028  F06B         	movff	??_disk_readp,disk_readp@start_add
 10866  0012AA  C029  F06C         	movff	??_disk_readp+1,disk_readp@start_add+1
 10867  0012AE  C02A  F06D         	movff	??_disk_readp+2,disk_readp@start_add+2
 10868  0012B2  C02B  F06E         	movff	??_disk_readp+3,disk_readp@start_add+3
 10869                           
 10870                           ; BSR set to: 0
 10871                           ;diskio.c: 172: _delay((unsigned long)((1000)*(20000000/4000.0)));
 10872  0012B6  0E1A               	movlw	26
 10873  0012B8  6E29               	movwf	(??_disk_readp+1)& (0+255),c
 10874  0012BA  0E5E               	movlw	94
 10875  0012BC  6E28               	movwf	??_disk_readp& (0+255),c
 10876  0012BE  0E6E               	movlw	110
 10877  0012C0                     u9257:
 10878  0012C0  2EE8               	decfsz	wreg,f,c
 10879  0012C2  D7FE               	bra	u9257
 10880  0012C4  2E28               	decfsz	??_disk_readp& (0+255),f,c
 10881  0012C6  D7FC               	bra	u9257
 10882  0012C8  2E29               	decfsz	(??_disk_readp+1)& (0+255),f,c
 10883  0012CA  D7FA               	bra	u9257
 10884  0012CC  D000               	nop2	
 10885                           
 10886                           ;diskio.c: 174: dummy_clocks(8);
 10887  0012CE  0E08               	movlw	8
 10888  0012D0  EC94  F017         	call	_dummy_clocks
 10889                           
 10890                           ;diskio.c: 175: command(0X52,start_add,0X00);
 10891  0012D4  C06B  F021         	movff	disk_readp@start_add,command@arg
 10892  0012D8  C06C  F022         	movff	disk_readp@start_add+1,command@arg+1
 10893  0012DC  C06D  F023         	movff	disk_readp@start_add+2,command@arg+2
 10894  0012E0  C06E  F024         	movff	disk_readp@start_add+3,command@arg+3
 10895  0012E4  0E00               	movlw	0
 10896  0012E6  6E25               	movwf	command@CRC,c
 10897  0012E8  0E52               	movlw	82
 10898  0012EA  EC41  F017         	call	_command
 10899                           
 10900                           ;diskio.c: 176: proceed();
 10901  0012EE  EC20  F019         	call	_proceed	;wreg free
 10902  0012F2                     
 10903                           ;diskio.c: 178: buff = response();
 10904  0012F2  EC13  F019         	call	_response	;wreg free
 10905  0012F6  0100               	movlb	0	; () banked
 10906  0012F8  6F6F               	movwf	disk_readp@buff& (0+255),b
 10907                           
 10908                           ; BSR set to: 0
 10909                           ;diskio.c: 179: }while(buff!=0x00);
 10910  0012FA  516F               	movf	disk_readp@buff& (0+255),w,b
 10911  0012FC  A4D8               	btfss	status,2,c
 10912  0012FE  D7F9               	goto	l747
 10913                           
 10914                           ; BSR set to: 0
 10915                           ;diskio.c: 180: _delay((unsigned long)((1000)*(20000000/4000.0)));
 10916                           
 10917                           ; BSR set to: 0
 10918  001300  0E1A               	movlw	26
 10919  001302  6E29               	movwf	(??_disk_readp+1)& (0+255),c
 10920  001304  0E5E               	movlw	94
 10921  001306  6E28               	movwf	??_disk_readp& (0+255),c
 10922  001308  0E6E               	movlw	110
 10923  00130A                     u9267:
 10924  00130A  2EE8               	decfsz	wreg,f,c
 10925  00130C  D7FE               	bra	u9267
 10926  00130E  2E28               	decfsz	??_disk_readp& (0+255),f,c
 10927  001310  D7FC               	bra	u9267
 10928  001312  2E29               	decfsz	(??_disk_readp+1)& (0+255),f,c
 10929  001314  D7FA               	bra	u9267
 10930  001316  D000               	nop2	
 10931                           
 10932                           ;diskio.c: 182: proceed();
 10933  001318  EC20  F019         	call	_proceed	;wreg free
 10934  00131C                     
 10935                           ;diskio.c: 184: buff = response();
 10936  00131C  EC13  F019         	call	_response	;wreg free
 10937  001320  0100               	movlb	0	; () banked
 10938  001322  6F6F               	movwf	disk_readp@buff& (0+255),b
 10939                           
 10940                           ; BSR set to: 0
 10941                           ;diskio.c: 185: }while(buff!=0xFE);
 10942  001324  0EFE               	movlw	254
 10943  001326  196F               	xorwf	disk_readp@buff& (0+255),w,b
 10944  001328  A4D8               	btfss	status,2,c
 10945  00132A  D7F8               	goto	l749
 10946                           
 10947                           ; BSR set to: 0
 10948                           ;diskio.c: 186: length = 0;
 10949                           
 10950                           ; BSR set to: 0
 10951  00132C  0E00               	movlw	0
 10952  00132E  6F71               	movwf	(disk_readp@length+1)& (0+255),b
 10953  001330  0E00               	movlw	0
 10954  001332  6F70               	movwf	disk_readp@length& (0+255),b
 10955                           
 10956                           ;diskio.c: 187: while ( length < count )
 10957  001334  D00C               	goto	l751
 10958  001336                     
 10959                           ; BSR set to: 0
 10960                           ;diskio.c: 188: {
 10961                           ;diskio.c: 189: arr[length] = response();
 10962                           
 10963                           ; BSR set to: 0
 10964  001336  0EF3               	movlw	low disk_readp@arr
 10965  001338  2570               	addwf	disk_readp@length& (0+255),w,b
 10966  00133A  6ED9               	movwf	fsr2l,c
 10967  00133C  0E01               	movlw	high disk_readp@arr
 10968  00133E  2171               	addwfc	(disk_readp@length+1)& (0+255),w,b
 10969  001340  6EDA               	movwf	fsr2h,c
 10970  001342  EC13  F019         	call	_response	;wreg free
 10971  001346  6EDF               	movwf	indf2,c
 10972                           
 10973                           ;diskio.c: 190: length++;
 10974  001348  0100               	movlb	0	; () banked
 10975  00134A  4B70               	infsnz	disk_readp@length& (0+255),f,b
 10976  00134C  2B71               	incf	(disk_readp@length+1)& (0+255),f,b
 10977  00134E                     l751:
 10978                           
 10979                           ; BSR set to: 0
 10980                           
 10981                           ; BSR set to: 0
 10982  00134E  5168               	movf	disk_readp@count& (0+255),w,b
 10983  001350  5D70               	subwf	disk_readp@length& (0+255),w,b
 10984  001352  5169               	movf	(disk_readp@count+1)& (0+255),w,b
 10985  001354  5971               	subwfb	(disk_readp@length+1)& (0+255),w,b
 10986  001356  A0D8               	btfss	status,0,c
 10987  001358  D7EE               	goto	l752
 10988                           
 10989                           ; BSR set to: 0
 10990                           ;diskio.c: 191: }
 10991                           ;diskio.c: 193: _delay((unsigned long)((1000)*(20000000/4000.0)));
 10992                           
 10993                           ; BSR set to: 0
 10994  00135A  0E1A               	movlw	26
 10995  00135C  6E29               	movwf	(??_disk_readp+1)& (0+255),c
 10996  00135E  0E5E               	movlw	94
 10997  001360  6E28               	movwf	??_disk_readp& (0+255),c
 10998  001362  0E6E               	movlw	110
 10999  001364                     u9277:
 11000  001364  2EE8               	decfsz	wreg,f,c
 11001  001366  D7FE               	bra	u9277
 11002  001368  2E28               	decfsz	??_disk_readp& (0+255),f,c
 11003  00136A  D7FC               	bra	u9277
 11004  00136C  2E29               	decfsz	(??_disk_readp+1)& (0+255),f,c
 11005  00136E  D7FA               	bra	u9277
 11006  001370  D000               	nop2	
 11007                           
 11008                           ;diskio.c: 195: dummy_clocks(8);
 11009  001372  0E08               	movlw	8
 11010  001374  EC94  F017         	call	_dummy_clocks
 11011                           
 11012                           ;diskio.c: 196: command(0X4C,0X00000000,0X00);
 11013  001378  0E00               	movlw	0
 11014  00137A  6E21               	movwf	command@arg,c
 11015  00137C  0E00               	movlw	0
 11016  00137E  6E22               	movwf	command@arg+1,c
 11017  001380  0E00               	movlw	0
 11018  001382  6E23               	movwf	command@arg+2,c
 11019  001384  0E00               	movlw	0
 11020  001386  6E24               	movwf	command@arg+3,c
 11021  001388  0E00               	movlw	0
 11022  00138A  6E25               	movwf	command@CRC,c
 11023  00138C  0E4C               	movlw	76
 11024  00138E  EC41  F017         	call	_command
 11025                           
 11026                           ;diskio.c: 197: proceed();
 11027  001392  EC20  F019         	call	_proceed	;wreg free
 11028  001396                     
 11029                           ;diskio.c: 199: buff = response();
 11030  001396  EC13  F019         	call	_response	;wreg free
 11031  00139A  0100               	movlb	0	; () banked
 11032  00139C  6F6F               	movwf	disk_readp@buff& (0+255),b
 11033                           
 11034                           ; BSR set to: 0
 11035                           ;diskio.c: 200: }while(buff!=0xFF);
 11036  00139E  296F               	incf	disk_readp@buff& (0+255),w,b
 11037  0013A0  A4D8               	btfss	status,2,c
 11038  0013A2  D7F9               	goto	l754
 11039                           
 11040                           ; BSR set to: 0
 11041                           ;diskio.c: 202: length = 0;
 11042                           
 11043                           ; BSR set to: 0
 11044  0013A4  0E00               	movlw	0
 11045  0013A6  6F71               	movwf	(disk_readp@length+1)& (0+255),b
 11046  0013A8  0E00               	movlw	0
 11047  0013AA  6F70               	movwf	disk_readp@length& (0+255),b
 11048                           
 11049                           ;diskio.c: 204: while(arr[length]!='\0')
 11050  0013AC  D002               	goto	l756
 11051  0013AE                     
 11052                           ; BSR set to: 0
 11053                           ;diskio.c: 205: {
 11054                           ;diskio.c: 207: length++;
 11055                           
 11056                           ; BSR set to: 0
 11057  0013AE  4B70               	infsnz	disk_readp@length& (0+255),f,b
 11058  0013B0  2B71               	incf	(disk_readp@length+1)& (0+255),f,b
 11059  0013B2                     l756:
 11060                           
 11061                           ; BSR set to: 0
 11062                           
 11063                           ; BSR set to: 0
 11064  0013B2  0EF3               	movlw	low disk_readp@arr
 11065  0013B4  2570               	addwf	disk_readp@length& (0+255),w,b
 11066  0013B6  6ED9               	movwf	fsr2l,c
 11067  0013B8  0E01               	movlw	high disk_readp@arr
 11068  0013BA  2171               	addwfc	(disk_readp@length+1)& (0+255),w,b
 11069  0013BC  6EDA               	movwf	fsr2h,c
 11070  0013BE  50DF               	movf	indf2,w,c
 11071  0013C0  A4D8               	btfss	status,2,c
 11072  0013C2  D7F5               	goto	l757
 11073                           
 11074                           ; BSR set to: 0
 11075                           ;diskio.c: 208: }
 11076                           ;diskio.c: 210: *rd = length;
 11077                           
 11078                           ; BSR set to: 0
 11079  0013C4  C060  FFD9         	movff	disk_readp@rd,fsr2l
 11080  0013C8  C061  FFDA         	movff	disk_readp@rd+1,fsr2h
 11081  0013CC  C070  FFDF         	movff	disk_readp@length,indf2
 11082                           
 11083                           ; BSR set to: 0
 11084                           ;diskio.c: 211: return RES_OK;
 11085  0013D0  0E00               	movlw	0
 11086                           
 11087                           ; BSR set to: 0
 11088                           ;diskio.c: 212: }
 11089                           
 11090                           ; BSR set to: 0
 11091  0013D2  0012               	return	
 11092  0013D4                     l746:
 11093                           
 11094                           ; BSR set to: 0
 11095                           ;diskio.c: 213: else
 11096                           ;diskio.c: 214: {
 11097                           ;diskio.c: 215: start_add = (sector*512);
 11098                           
 11099                           ; BSR set to: 0
 11100  0013D4  C062  F028         	movff	disk_readp@sector,??_disk_readp
 11101  0013D8  C063  F029         	movff	disk_readp@sector+1,??_disk_readp+1
 11102  0013DC  C064  F02A         	movff	disk_readp@sector+2,??_disk_readp+2
 11103  0013E0  C065  F02B         	movff	disk_readp@sector+3,??_disk_readp+3
 11104  0013E4  0E09               	movlw	9
 11105  0013E6                     u6675:
 11106  0013E6  90D8               	bcf	status,0,c
 11107  0013E8  3628               	rlcf	??_disk_readp,f,c
 11108  0013EA  3629               	rlcf	??_disk_readp+1,f,c
 11109  0013EC  362A               	rlcf	??_disk_readp+2,f,c
 11110  0013EE  362B               	rlcf	??_disk_readp+3,f,c
 11111  0013F0  2EE8               	decfsz	wreg,f,c
 11112  0013F2  D7F9               	goto	u6675
 11113  0013F4  C028  F06B         	movff	??_disk_readp,disk_readp@start_add
 11114  0013F8  C029  F06C         	movff	??_disk_readp+1,disk_readp@start_add+1
 11115  0013FC  C02A  F06D         	movff	??_disk_readp+2,disk_readp@start_add+2
 11116  001400  C02B  F06E         	movff	??_disk_readp+3,disk_readp@start_add+3
 11117                           
 11118                           ; BSR set to: 0
 11119                           ;diskio.c: 217: length = 0;
 11120  001404  0E00               	movlw	0
 11121  001406  6F71               	movwf	(disk_readp@length+1)& (0+255),b
 11122  001408  0E00               	movlw	0
 11123  00140A  6F70               	movwf	disk_readp@length& (0+255),b
 11124                           
 11125                           ;diskio.c: 218: while(length<512)
 11126  00140C  D00A               	goto	l761
 11127  00140E                     
 11128                           ; BSR set to: 0
 11129                           ;diskio.c: 219: {
 11130                           ;diskio.c: 220: arr[length] = 0;
 11131                           
 11132                           ; BSR set to: 0
 11133  00140E  0EF3               	movlw	low disk_readp@arr
 11134  001410  2570               	addwf	disk_readp@length& (0+255),w,b
 11135  001412  6ED9               	movwf	fsr2l,c
 11136  001414  0E01               	movlw	high disk_readp@arr
 11137  001416  2171               	addwfc	(disk_readp@length+1)& (0+255),w,b
 11138  001418  6EDA               	movwf	fsr2h,c
 11139  00141A  0E00               	movlw	0
 11140  00141C  6EDF               	movwf	indf2,c
 11141                           
 11142                           ; BSR set to: 0
 11143                           ;diskio.c: 221: length++;
 11144  00141E  4B70               	infsnz	disk_readp@length& (0+255),f,b
 11145  001420  2B71               	incf	(disk_readp@length+1)& (0+255),f,b
 11146  001422                     l761:
 11147                           
 11148                           ; BSR set to: 0
 11149                           
 11150                           ; BSR set to: 0
 11151  001422  BF71               	btfsc	(disk_readp@length+1)& (0+255),7,b
 11152  001424  D7F4               	goto	l762
 11153  001426  0E02               	movlw	2
 11154  001428  5D71               	subwf	(disk_readp@length+1)& (0+255),w,b
 11155  00142A  A0D8               	btfss	status,0,c
 11156  00142C  D7F0               	goto	l762
 11157                           
 11158                           ; BSR set to: 0
 11159                           ;diskio.c: 222: }
 11160                           ;diskio.c: 224: _delay((unsigned long)((1000)*(20000000/4000.0)));
 11161                           
 11162                           ; BSR set to: 0
 11163  00142E  0E1A               	movlw	26
 11164  001430  6E29               	movwf	(??_disk_readp+1)& (0+255),c
 11165  001432  0E5E               	movlw	94
 11166  001434  6E28               	movwf	??_disk_readp& (0+255),c
 11167  001436  0E6E               	movlw	110
 11168  001438                     u9287:
 11169  001438  2EE8               	decfsz	wreg,f,c
 11170  00143A  D7FE               	bra	u9287
 11171  00143C  2E28               	decfsz	??_disk_readp& (0+255),f,c
 11172  00143E  D7FC               	bra	u9287
 11173  001440  2E29               	decfsz	(??_disk_readp+1)& (0+255),f,c
 11174  001442  D7FA               	bra	u9287
 11175  001444  D000               	nop2	
 11176                           
 11177                           ;diskio.c: 226: dummy_clocks(8);
 11178  001446  0E08               	movlw	8
 11179  001448  EC94  F017         	call	_dummy_clocks
 11180                           
 11181                           ;diskio.c: 228: command(0X51,start_add,0X00);
 11182  00144C  C06B  F021         	movff	disk_readp@start_add,command@arg
 11183  001450  C06C  F022         	movff	disk_readp@start_add+1,command@arg+1
 11184  001454  C06D  F023         	movff	disk_readp@start_add+2,command@arg+2
 11185  001458  C06E  F024         	movff	disk_readp@start_add+3,command@arg+3
 11186  00145C  0E00               	movlw	0
 11187  00145E  6E25               	movwf	command@CRC,c
 11188  001460  0E51               	movlw	81
 11189  001462  EC41  F017         	call	_command
 11190                           
 11191                           ;diskio.c: 229: proceed();
 11192  001466  EC20  F019         	call	_proceed	;wreg free
 11193  00146A                     
 11194                           ;diskio.c: 231: buff = response();
 11195  00146A  EC13  F019         	call	_response	;wreg free
 11196  00146E  0100               	movlb	0	; () banked
 11197  001470  6F6F               	movwf	disk_readp@buff& (0+255),b
 11198                           
 11199                           ; BSR set to: 0
 11200                           ;diskio.c: 232: }while(buff!=0x00);
 11201  001472  516F               	movf	disk_readp@buff& (0+255),w,b
 11202  001474  A4D8               	btfss	status,2,c
 11203  001476  D7F9               	goto	l764
 11204  001478                     u6690:
 11205                           
 11206                           ; BSR set to: 0
 11207                           ;diskio.c: 234: buff = response();
 11208                           
 11209                           ; BSR set to: 0
 11210                           
 11211                           ;diskio.c: 233: do{
 11212                           
 11213                           ; BSR set to: 0
 11214  001478  EC13  F019         	call	_response	;wreg free
 11215  00147C  0100               	movlb	0	; () banked
 11216  00147E  6F6F               	movwf	disk_readp@buff& (0+255),b
 11217                           
 11218                           ; BSR set to: 0
 11219                           ;diskio.c: 235: }while(buff!=0xFE);
 11220  001480  0EFE               	movlw	254
 11221  001482  196F               	xorwf	disk_readp@buff& (0+255),w,b
 11222  001484  A4D8               	btfss	status,2,c
 11223  001486  D7F8               	goto	u6690
 11224                           
 11225                           ; BSR set to: 0
 11226                           ;diskio.c: 237: length = 0;
 11227                           
 11228                           ; BSR set to: 0
 11229  001488  0E00               	movlw	0
 11230  00148A  6F71               	movwf	(disk_readp@length+1)& (0+255),b
 11231  00148C  0E00               	movlw	0
 11232  00148E  6F70               	movwf	disk_readp@length& (0+255),b
 11233                           
 11234                           ;diskio.c: 238: while ( length < 512 )
 11235  001490  D048               	goto	u6730
 11236  001492                     l6220:
 11237                           
 11238                           ; BSR set to: 0
 11239                           ;diskio.c: 241: {
 11240                           ;diskio.c: 242: arr[length] = response();
 11241  001492  0EF3               	movlw	low disk_readp@arr
 11242  001494  2570               	addwf	disk_readp@length& (0+255),w,b
 11243  001496  6ED9               	movwf	fsr2l,c
 11244  001498  0E01               	movlw	high disk_readp@arr
 11245  00149A  2171               	addwfc	(disk_readp@length+1)& (0+255),w,b
 11246  00149C  6EDA               	movwf	fsr2h,c
 11247  00149E  EC13  F019         	call	_response	;wreg free
 11248  0014A2  6EDF               	movwf	indf2,c
 11249                           
 11250                           ;diskio.c: 243: length++;
 11251  0014A4  0100               	movlb	0	; () banked
 11252  0014A6  4B70               	infsnz	disk_readp@length& (0+255),f,b
 11253  0014A8  2B71               	incf	(disk_readp@length+1)& (0+255),f,b
 11254  0014AA                     
 11255                           ; BSR set to: 0
 11256                           
 11257                           ; BSR set to: 0
 11258  0014AA  0766               	decf	disk_readp@offset& (0+255),f,b
 11259  0014AC  A0D8               	btfss	status,0,c
 11260  0014AE  0767               	decf	(disk_readp@offset+1)& (0+255),f,b
 11261  0014B0  2966               	incf	disk_readp@offset& (0+255),w,b
 11262  0014B2  E1EF               	bnz	l6220
 11263  0014B4  2967               	incf	(disk_readp@offset+1)& (0+255),w,b
 11264  0014B6  B4D8               	btfsc	status,2,c
 11265  0014B8  D019               	goto	l773
 11266  0014BA  D7EB               	goto	l771
 11267  0014BC                     l6226:
 11268                           
 11269                           ; BSR set to: 0
 11270                           ;diskio.c: 246: {
 11271                           ;diskio.c: 247: *rd = response();
 11272  0014BC  EC13  F019         	call	_response	;wreg free
 11273  0014C0  C060  FFD9         	movff	disk_readp@rd,fsr2l
 11274  0014C4  C061  FFDA         	movff	disk_readp@rd+1,fsr2h
 11275  0014C8  6EDF               	movwf	indf2,c
 11276                           
 11277                           ;diskio.c: 248: arr[length] = *rd;
 11278  0014CA  C060  FFD9         	movff	disk_readp@rd,fsr2l
 11279  0014CE  C061  FFDA         	movff	disk_readp@rd+1,fsr2h
 11280  0014D2  0EF3               	movlw	low disk_readp@arr
 11281  0014D4  0100               	movlb	0	; () banked
 11282  0014D6  2570               	addwf	disk_readp@length& (0+255),w,b
 11283  0014D8  6EE1               	movwf	fsr1l,c
 11284  0014DA  0E01               	movlw	high disk_readp@arr
 11285  0014DC  2171               	addwfc	(disk_readp@length+1)& (0+255),w,b
 11286  0014DE  6EE2               	movwf	fsr1h,c
 11287  0014E0  CFDF FFE7          	movff	indf2,indf1
 11288                           
 11289                           ; BSR set to: 0
 11290                           ;diskio.c: 249: rd++;
 11291  0014E4  4B60               	infsnz	disk_readp@rd& (0+255),f,b
 11292  0014E6  2B61               	incf	(disk_readp@rd+1)& (0+255),f,b
 11293                           
 11294                           ; BSR set to: 0
 11295                           ;diskio.c: 250: length++;
 11296  0014E8  4B70               	infsnz	disk_readp@length& (0+255),f,b
 11297  0014EA  2B71               	incf	(disk_readp@length+1)& (0+255),f,b
 11298  0014EC                     l773:
 11299                           
 11300                           ; BSR set to: 0
 11301                           
 11302                           ; BSR set to: 0
 11303  0014EC  0768               	decf	disk_readp@count& (0+255),f,b
 11304  0014EE  A0D8               	btfss	status,0,c
 11305  0014F0  0769               	decf	(disk_readp@count+1)& (0+255),f,b
 11306  0014F2  2968               	incf	disk_readp@count& (0+255),w,b
 11307  0014F4  E1E3               	bnz	l6226
 11308  0014F6  2969               	incf	(disk_readp@count+1)& (0+255),w,b
 11309  0014F8  B4D8               	btfsc	status,2,c
 11310  0014FA  D00D               	goto	l776
 11311  0014FC  D7DF               	goto	l774
 11312  0014FE                     
 11313                           ; BSR set to: 0
 11314                           ;diskio.c: 253: {
 11315                           ;diskio.c: 254: arr[length] = response();
 11316                           
 11317                           ; BSR set to: 0
 11318  0014FE  0EF3               	movlw	low disk_readp@arr
 11319  001500  2570               	addwf	disk_readp@length& (0+255),w,b
 11320  001502  6ED9               	movwf	fsr2l,c
 11321  001504  0E01               	movlw	high disk_readp@arr
 11322  001506  2171               	addwfc	(disk_readp@length+1)& (0+255),w,b
 11323  001508  6EDA               	movwf	fsr2h,c
 11324  00150A  EC13  F019         	call	_response	;wreg free
 11325  00150E  6EDF               	movwf	indf2,c
 11326                           
 11327                           ;diskio.c: 255: length++;
 11328  001510  0100               	movlb	0	; () banked
 11329  001512  4B70               	infsnz	disk_readp@length& (0+255),f,b
 11330  001514  2B71               	incf	(disk_readp@length+1)& (0+255),f,b
 11331  001516                     l776:
 11332                           
 11333                           ; BSR set to: 0
 11334                           
 11335                           ; BSR set to: 0
 11336  001516  BF71               	btfsc	(disk_readp@length+1)& (0+255),7,b
 11337  001518  D7F2               	goto	l777
 11338  00151A  0E02               	movlw	2
 11339  00151C  5D71               	subwf	(disk_readp@length+1)& (0+255),w,b
 11340  00151E  A0D8               	btfss	status,0,c
 11341  001520  D7EE               	goto	l777
 11342  001522                     u6730:
 11343                           
 11344                           ; BSR set to: 0
 11345                           
 11346                           ; BSR set to: 0
 11347                           
 11348                           ; BSR set to: 0
 11349  001522  BF71               	btfsc	(disk_readp@length+1)& (0+255),7,b
 11350  001524  D7C2               	goto	l770
 11351  001526  0E02               	movlw	2
 11352  001528  5D71               	subwf	(disk_readp@length+1)& (0+255),w,b
 11353  00152A  A0D8               	btfss	status,0,c
 11354  00152C  D7BE               	goto	l770
 11355                           
 11356                           ; BSR set to: 0
 11357                           ;diskio.c: 256: }
 11358                           ;diskio.c: 257: }
 11359                           ;diskio.c: 258: _delay((unsigned long)((1000)*(20000000/4000.0)));
 11360                           
 11361                           ; BSR set to: 0
 11362  00152E  0E1A               	movlw	26
 11363  001530  6E29               	movwf	(??_disk_readp+1)& (0+255),c
 11364  001532  0E5E               	movlw	94
 11365  001534  6E28               	movwf	??_disk_readp& (0+255),c
 11366  001536  0E6E               	movlw	110
 11367  001538                     u9297:
 11368  001538  2EE8               	decfsz	wreg,f,c
 11369  00153A  D7FE               	bra	u9297
 11370  00153C  2E28               	decfsz	??_disk_readp& (0+255),f,c
 11371  00153E  D7FC               	bra	u9297
 11372  001540  2E29               	decfsz	(??_disk_readp+1)& (0+255),f,c
 11373  001542  D7FA               	bra	u9297
 11374  001544  D000               	nop2	
 11375                           
 11376                           ;diskio.c: 264: command(0X4C,0X00000000,0X00);
 11377  001546  0E00               	movlw	0
 11378  001548  6E21               	movwf	command@arg,c
 11379  00154A  0E00               	movlw	0
 11380  00154C  6E22               	movwf	command@arg+1,c
 11381  00154E  0E00               	movlw	0
 11382  001550  6E23               	movwf	command@arg+2,c
 11383  001552  0E00               	movlw	0
 11384  001554  6E24               	movwf	command@arg+3,c
 11385  001556  0E00               	movlw	0
 11386  001558  6E25               	movwf	command@CRC,c
 11387  00155A  0E4C               	movlw	76
 11388  00155C  EC41  F017         	call	_command
 11389                           
 11390                           ;diskio.c: 265: proceed();
 11391  001560  EC20  F019         	call	_proceed	;wreg free
 11392  001564                     
 11393                           ;diskio.c: 267: buff = response();
 11394  001564  EC13  F019         	call	_response	;wreg free
 11395  001568  0100               	movlb	0	; () banked
 11396  00156A  6F6F               	movwf	disk_readp@buff& (0+255),b
 11397                           
 11398                           ; BSR set to: 0
 11399                           ;diskio.c: 268: }while(buff!=0xFF);
 11400  00156C  296F               	incf	disk_readp@buff& (0+255),w,b
 11401  00156E  A4D8               	btfss	status,2,c
 11402  001570  D7F9               	goto	l780
 11403                           
 11404                           ; BSR set to: 0
 11405                           ;diskio.c: 270: length = 0;
 11406                           
 11407                           ; BSR set to: 0
 11408  001572  0E00               	movlw	0
 11409  001574  6F71               	movwf	(disk_readp@length+1)& (0+255),b
 11410  001576  0E00               	movlw	0
 11411  001578  6F70               	movwf	disk_readp@length& (0+255),b
 11412                           
 11413                           ; BSR set to: 0
 11414                           ;diskio.c: 272: if(flag == 1){
 11415  00157A  043B               	decf	_flag,w,c
 11416  00157C  103C               	iorwf	_flag+1,w,c
 11417  00157E  B4D8               	btfsc	status,2,c
 11418  001580  D003               	goto	l783
 11419  001582  D00C               	goto	l782
 11420  001584                     
 11421                           ; BSR set to: 0
 11422                           ;diskio.c: 274: {
 11423                           ;diskio.c: 276: length++;
 11424                           
 11425                           ; BSR set to: 0
 11426  001584  4B70               	infsnz	disk_readp@length& (0+255),f,b
 11427  001586  2B71               	incf	(disk_readp@length+1)& (0+255),f,b
 11428  001588                     l783:
 11429                           
 11430                           ; BSR set to: 0
 11431                           
 11432                           ; BSR set to: 0
 11433  001588  0EF3               	movlw	low disk_readp@arr
 11434  00158A  2570               	addwf	disk_readp@length& (0+255),w,b
 11435  00158C  6ED9               	movwf	fsr2l,c
 11436  00158E  0E01               	movlw	high disk_readp@arr
 11437  001590  2171               	addwfc	(disk_readp@length+1)& (0+255),w,b
 11438  001592  6EDA               	movwf	fsr2h,c
 11439  001594  50DF               	movf	indf2,w,c
 11440  001596  B4D8               	btfsc	status,2,c
 11441  001598  D00C               	goto	l786
 11442  00159A  D7F4               	goto	l784
 11443  00159C                     l782:
 11444                           
 11445                           ; BSR set to: 0
 11446                           ;diskio.c: 279: else
 11447                           ;diskio.c: 282: _delay((unsigned long)((2000)*(20000000/4000.0)));
 11448                           
 11449                           ; BSR set to: 0
 11450  00159C  0E33               	movlw	51
 11451  00159E  6E29               	movwf	(??_disk_readp+1)& (0+255),c
 11452  0015A0  0EBB               	movlw	187
 11453  0015A2  6E28               	movwf	??_disk_readp& (0+255),c
 11454  0015A4  0EE0               	movlw	224
 11455  0015A6                     u9307:
 11456  0015A6  2EE8               	decfsz	wreg,f,c
 11457  0015A8  D7FE               	bra	u9307
 11458  0015AA  2E28               	decfsz	??_disk_readp& (0+255),f,c
 11459  0015AC  D7FC               	bra	u9307
 11460  0015AE  2E29               	decfsz	(??_disk_readp+1)& (0+255),f,c
 11461  0015B0  D7FA               	bra	u9307
 11462  0015B2                     l786:
 11463                           
 11464                           ;diskio.c: 285: return RES_OK;
 11465  0015B2  0E00               	movlw	0
 11466  0015B4  0012               	return	
 11467  0015B6                     __end_of_disk_readp:
 11468                           	opt stack 0
 11469                           tosu	equ	0xFFF
 11470                           tosh	equ	0xFFE
 11471                           tosl	equ	0xFFD
 11472                           pclath	equ	0xFFA
 11473                           tblptru	equ	0xFF8
 11474                           tblptrh	equ	0xFF7
 11475                           tblptrl	equ	0xFF6
 11476                           tablat	equ	0xFF5
 11477                           prodh	equ	0xFF4
 11478                           prodl	equ	0xFF3
 11479                           intcon	equ	0xFF2
 11480                           intcon2	equ	0xFF1
 11481                           intcon3	equ	0xFF0
 11482                           postinc0	equ	0xFEE
 11483                           wreg	equ	0xFE8
 11484                           indf1	equ	0xFE7
 11485                           postinc1	equ	0xFE6
 11486                           postdec1	equ	0xFE5
 11487                           fsr1h	equ	0xFE2
 11488                           fsr1l	equ	0xFE1
 11489                           indf2	equ	0xFDF
 11490                           postinc2	equ	0xFDE
 11491                           postdec2	equ	0xFDD
 11492                           plusw2	equ	0xFDB
 11493                           fsr2h	equ	0xFDA
 11494                           fsr2l	equ	0xFD9
 11495                           status	equ	0xFD8
 11496                           
 11497 ;; *************** function _response *****************
 11498 ;; Defined at:
 11499 ;;		line 311 in file "bibliotecas/SDCard.c"
 11500 ;; Parameters:    Size  Location     Type
 11501 ;;		None
 11502 ;; Auto vars:     Size  Location     Type
 11503 ;;  buff            1   26[COMRAM] unsigned char 
 11504 ;; Return value:  Size  Location     Type
 11505 ;;                  1    wreg      unsigned char 
 11506 ;; Registers used:
 11507 ;;		wreg, status,2, cstack
 11508 ;; Tracked objects:
 11509 ;;		On entry : 0/0
 11510 ;;		On exit  : 0/0
 11511 ;;		Unchanged: 0/0
 11512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11513 ;;      Params:         0       0       0       0       0       0       0       0       0
 11514 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11515 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11516 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11517 ;;Total ram usage:        1 bytes
 11518 ;; Hardware stack levels used:    1
 11519 ;; Hardware stack levels required when called:    3
 11520 ;; This function calls:
 11521 ;;		_recebe_dado_SPI
 11522 ;; This function is called by:
 11523 ;;		_reset
 11524 ;;		_disk_initialize
 11525 ;;		_disk_readp
 11526 ;;		_disk_writep
 11527 ;; This function uses a non-reentrant model
 11528 ;;
 11529                           
 11530                           	psect	text42
 11531  003226                     __ptext42:
 11532                           	opt stack 0
 11533  003226                     _response:
 11534                           	opt stack 22
 11535                           
 11536                           ;SDCard.c: 314: unsigned char buff;
 11537                           ;SDCard.c: 315: LATBbits.LATB4 = 0;
 11538                           
 11539                           ;incstack = 0
 11540  003226  988A               	bcf	3978,4,c	;volatile
 11541                           
 11542                           ;SDCard.c: 316: buff= recebe_dado_SPI();
 11543  003228  ECF8  F018         	call	_recebe_dado_SPI	;wreg free
 11544  00322C  6E1B               	movwf	response@buff,c
 11545                           
 11546                           ;SDCard.c: 317: LATBbits.LATB4 = 1;
 11547  00322E  888A               	bsf	3978,4,c	;volatile
 11548                           
 11549                           ;SDCard.c: 318: return buff;
 11550  003230  501B               	movf	response@buff,w,c
 11551  003232  0012               	return	
 11552  003234                     __end_of_response:
 11553                           	opt stack 0
 11554                           tosu	equ	0xFFF
 11555                           tosh	equ	0xFFE
 11556                           tosl	equ	0xFFD
 11557                           pclath	equ	0xFFA
 11558                           tblptru	equ	0xFF8
 11559                           tblptrh	equ	0xFF7
 11560                           tblptrl	equ	0xFF6
 11561                           tablat	equ	0xFF5
 11562                           prodh	equ	0xFF4
 11563                           prodl	equ	0xFF3
 11564                           intcon	equ	0xFF2
 11565                           intcon2	equ	0xFF1
 11566                           intcon3	equ	0xFF0
 11567                           postinc0	equ	0xFEE
 11568                           wreg	equ	0xFE8
 11569                           indf1	equ	0xFE7
 11570                           postinc1	equ	0xFE6
 11571                           postdec1	equ	0xFE5
 11572                           fsr1h	equ	0xFE2
 11573                           fsr1l	equ	0xFE1
 11574                           indf2	equ	0xFDF
 11575                           postinc2	equ	0xFDE
 11576                           postdec2	equ	0xFDD
 11577                           plusw2	equ	0xFDB
 11578                           fsr2h	equ	0xFDA
 11579                           fsr2l	equ	0xFD9
 11580                           status	equ	0xFD8
 11581                           
 11582 ;; *************** function _recebe_dado_SPI *****************
 11583 ;; Defined at:
 11584 ;;		line 110 in file "bibliotecas/SPI.c"
 11585 ;; Parameters:    Size  Location     Type
 11586 ;;		None
 11587 ;; Auto vars:     Size  Location     Type
 11588 ;;  temp_var        1   25[COMRAM] unsigned char 
 11589 ;; Return value:  Size  Location     Type
 11590 ;;                  1    wreg      unsigned char 
 11591 ;; Registers used:
 11592 ;;		wreg, status,2
 11593 ;; Tracked objects:
 11594 ;;		On entry : 0/0
 11595 ;;		On exit  : 0/0
 11596 ;;		Unchanged: 0/0
 11597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11598 ;;      Params:         0       0       0       0       0       0       0       0       0
 11599 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11600 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11601 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11602 ;;Total ram usage:        1 bytes
 11603 ;; Hardware stack levels used:    1
 11604 ;; Hardware stack levels required when called:    2
 11605 ;; This function calls:
 11606 ;;		Nothing
 11607 ;; This function is called by:
 11608 ;;		_response
 11609 ;; This function uses a non-reentrant model
 11610 ;;
 11611                           
 11612                           	psect	text43
 11613  0031F0                     __ptext43:
 11614                           	opt stack 0
 11615  0031F0                     _recebe_dado_SPI:
 11616                           	opt stack 22
 11617                           
 11618                           ;SPI.c: 112: PIR1bits.SSPIF = 0;
 11619                           
 11620                           ;incstack = 0
 11621  0031F0  969E               	bcf	3998,3,c	;volatile
 11622                           
 11623                           ;SPI.c: 113: unsigned char temp_var;
 11624                           ;SPI.c: 114: temp_var = SSPBUF;
 11625  0031F2  CFC9 F01A          	movff	4041,recebe_dado_SPI@temp_var	;volatile
 11626                           
 11627                           ;SPI.c: 117: SSPBUF = 0x00;
 11628  0031F6  0E00               	movlw	0
 11629  0031F8  6EC9               	movwf	4041,c	;volatile
 11630  0031FA  A69E               	btfss	3998,3,c	;volatile
 11631  0031FC  D7FE               	goto	l99
 11632                           
 11633                           ;SPI.c: 120: return (SSPBUF);
 11634  0031FE  50C9               	movf	4041,w,c	;volatile
 11635  003200  0012               	return	
 11636  003202                     __end_of_recebe_dado_SPI:
 11637                           	opt stack 0
 11638                           tosu	equ	0xFFF
 11639                           tosh	equ	0xFFE
 11640                           tosl	equ	0xFFD
 11641                           pclath	equ	0xFFA
 11642                           tblptru	equ	0xFF8
 11643                           tblptrh	equ	0xFF7
 11644                           tblptrl	equ	0xFF6
 11645                           tablat	equ	0xFF5
 11646                           prodh	equ	0xFF4
 11647                           prodl	equ	0xFF3
 11648                           intcon	equ	0xFF2
 11649                           intcon2	equ	0xFF1
 11650                           intcon3	equ	0xFF0
 11651                           postinc0	equ	0xFEE
 11652                           wreg	equ	0xFE8
 11653                           indf1	equ	0xFE7
 11654                           postinc1	equ	0xFE6
 11655                           postdec1	equ	0xFE5
 11656                           fsr1h	equ	0xFE2
 11657                           fsr1l	equ	0xFE1
 11658                           indf2	equ	0xFDF
 11659                           postinc2	equ	0xFDE
 11660                           postdec2	equ	0xFDD
 11661                           plusw2	equ	0xFDB
 11662                           fsr2h	equ	0xFDA
 11663                           fsr2l	equ	0xFD9
 11664                           status	equ	0xFD8
 11665                           
 11666 ;; *************** function _proceed *****************
 11667 ;; Defined at:
 11668 ;;		line 336 in file "bibliotecas/SDCard.c"
 11669 ;; Parameters:    Size  Location     Type
 11670 ;;		None
 11671 ;; Auto vars:     Size  Location     Type
 11672 ;;		None
 11673 ;; Return value:  Size  Location     Type
 11674 ;;                  1    wreg      void 
 11675 ;; Registers used:
 11676 ;;		wreg, status,2, status,0, cstack
 11677 ;; Tracked objects:
 11678 ;;		On entry : 0/0
 11679 ;;		On exit  : 0/0
 11680 ;;		Unchanged: 0/0
 11681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11682 ;;      Params:         0       0       0       0       0       0       0       0       0
 11683 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11684 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11685 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11686 ;;Total ram usage:        0 bytes
 11687 ;; Hardware stack levels used:    1
 11688 ;; Hardware stack levels required when called:    5
 11689 ;; This function calls:
 11690 ;;		_WriteSPI_
 11691 ;; This function is called by:
 11692 ;;		_SDCard
 11693 ;;		_reset
 11694 ;;		_disk_initialize
 11695 ;;		_disk_readp
 11696 ;;		_disk_writep
 11697 ;; This function uses a non-reentrant model
 11698 ;;
 11699                           
 11700                           	psect	text44
 11701  003240                     __ptext44:
 11702                           	opt stack 0
 11703  003240                     _proceed:
 11704                           	opt stack 23
 11705                           
 11706                           ;SDCard.c: 338: LATBbits.LATB4 = 0;
 11707                           
 11708                           ;incstack = 0
 11709  003240  988A               	bcf	3978,4,c	;volatile
 11710                           
 11711                           ;SDCard.c: 339: WriteSPI_(0xFF);
 11712  003242  0EFF               	movlw	255
 11713  003244  ECD8  F017         	call	_WriteSPI_
 11714                           
 11715                           ;SDCard.c: 340: LATBbits.LATB4 = 1;
 11716  003248  888A               	bsf	3978,4,c	;volatile
 11717  00324A  0012               	return		;funcret
 11718  00324C                     __end_of_proceed:
 11719                           	opt stack 0
 11720                           tosu	equ	0xFFF
 11721                           tosh	equ	0xFFE
 11722                           tosl	equ	0xFFD
 11723                           pclath	equ	0xFFA
 11724                           tblptru	equ	0xFF8
 11725                           tblptrh	equ	0xFF7
 11726                           tblptrl	equ	0xFF6
 11727                           tablat	equ	0xFF5
 11728                           prodh	equ	0xFF4
 11729                           prodl	equ	0xFF3
 11730                           intcon	equ	0xFF2
 11731                           intcon2	equ	0xFF1
 11732                           intcon3	equ	0xFF0
 11733                           postinc0	equ	0xFEE
 11734                           wreg	equ	0xFE8
 11735                           indf1	equ	0xFE7
 11736                           postinc1	equ	0xFE6
 11737                           postdec1	equ	0xFE5
 11738                           fsr1h	equ	0xFE2
 11739                           fsr1l	equ	0xFE1
 11740                           indf2	equ	0xFDF
 11741                           postinc2	equ	0xFDE
 11742                           postdec2	equ	0xFDD
 11743                           plusw2	equ	0xFDB
 11744                           fsr2h	equ	0xFDA
 11745                           fsr2l	equ	0xFD9
 11746                           status	equ	0xFD8
 11747                           
 11748 ;; *************** function _dummy_clocks *****************
 11749 ;; Defined at:
 11750 ;;		line 322 in file "bibliotecas/SDCard.c"
 11751 ;; Parameters:    Size  Location     Type
 11752 ;;  n               1    wreg     unsigned char 
 11753 ;; Auto vars:     Size  Location     Type
 11754 ;;  n               1   34[COMRAM] unsigned char 
 11755 ;;  i               2   35[COMRAM] unsigned int 
 11756 ;; Return value:  Size  Location     Type
 11757 ;;                  1    wreg      void 
 11758 ;; Registers used:
 11759 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11760 ;; Tracked objects:
 11761 ;;		On entry : 0/0
 11762 ;;		On exit  : 0/0
 11763 ;;		Unchanged: 0/0
 11764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11765 ;;      Params:         0       0       0       0       0       0       0       0       0
 11766 ;;      Locals:         3       0       0       0       0       0       0       0       0
 11767 ;;      Temps:          2       0       0       0       0       0       0       0       0
 11768 ;;      Totals:         5       0       0       0       0       0       0       0       0
 11769 ;;Total ram usage:        5 bytes
 11770 ;; Hardware stack levels used:    1
 11771 ;; Hardware stack levels required when called:    5
 11772 ;; This function calls:
 11773 ;;		_WriteSPI_
 11774 ;;		_escreve_frase_ram_lcd
 11775 ;;		_posicao_cursor_lcd
 11776 ;; This function is called by:
 11777 ;;		_reset
 11778 ;;		_disk_initialize
 11779 ;;		_disk_readp
 11780 ;;		_disk_writep
 11781 ;; This function uses a non-reentrant model
 11782 ;;
 11783                           
 11784                           	psect	text45
 11785  002F28                     __ptext45:
 11786                           	opt stack 0
 11787  002F28                     _dummy_clocks:
 11788                           	opt stack 20
 11789                           
 11790                           ;incstack = 0
 11791                           ;dummy_clocks@n stored from wreg
 11792  002F28  6E23               	movwf	dummy_clocks@n,c
 11793                           
 11794                           ;SDCard.c: 324: posicao_cursor_lcd(1,0);
 11795  002F2A  0E00               	movlw	0
 11796  002F2C  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 11797  002F2E  0E01               	movlw	1
 11798  002F30  EC45  F016         	call	_posicao_cursor_lcd
 11799                           
 11800                           ;SDCard.c: 325: escreve_frase_ram_lcd("AAAAAAAAAA");
 11801  002F34  0ECC               	movlw	low STR_1
 11802  002F36  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 11803  002F38  0E7F               	movlw	high STR_1
 11804  002F3A  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 11805  002F3C  EC6B  F017         	call	_escreve_frase_ram_lcd	;wreg free
 11806                           
 11807                           ;SDCard.c: 326: unsigned int i;
 11808                           ;SDCard.c: 327: for(i=0;i<n;i++)
 11809  002F40  0E00               	movlw	0
 11810  002F42  6E25               	movwf	dummy_clocks@i+1,c
 11811  002F44  0E00               	movlw	0
 11812  002F46  6E24               	movwf	dummy_clocks@i,c
 11813  002F48  D007               	goto	l16
 11814  002F4A                     l17:
 11815                           
 11816                           ;SDCard.c: 328: {
 11817                           ;SDCard.c: 329: LATBbits.LATB4 = 1;
 11818  002F4A  888A               	bsf	3978,4,c	;volatile
 11819                           
 11820                           ;SDCard.c: 330: WriteSPI_(0XFF);
 11821  002F4C  0EFF               	movlw	255
 11822  002F4E  ECD8  F017         	call	_WriteSPI_
 11823                           
 11824                           ;SDCard.c: 331: LATBbits.LATB4 = 0;
 11825  002F52  988A               	bcf	3978,4,c	;volatile
 11826  002F54  4A24               	infsnz	dummy_clocks@i,f,c
 11827  002F56  2A25               	incf	dummy_clocks@i+1,f,c
 11828  002F58                     l16:
 11829  002F58  5023               	movf	dummy_clocks@n,w,c
 11830  002F5A  6E21               	movwf	??_dummy_clocks& (0+255),c
 11831  002F5C  6A22               	clrf	(??_dummy_clocks+1)& (0+255),c
 11832  002F5E  5021               	movf	??_dummy_clocks,w,c
 11833  002F60  5C24               	subwf	dummy_clocks@i,w,c
 11834  002F62  5022               	movf	??_dummy_clocks+1,w,c
 11835  002F64  5825               	subwfb	dummy_clocks@i+1,w,c
 11836  002F66  B0D8               	btfsc	status,0,c
 11837  002F68  0012               	return	
 11838  002F6A  D7EF               	goto	l17
 11839  002F6C                     __end_of_dummy_clocks:
 11840                           	opt stack 0
 11841                           tosu	equ	0xFFF
 11842                           tosh	equ	0xFFE
 11843                           tosl	equ	0xFFD
 11844                           pclath	equ	0xFFA
 11845                           tblptru	equ	0xFF8
 11846                           tblptrh	equ	0xFF7
 11847                           tblptrl	equ	0xFF6
 11848                           tablat	equ	0xFF5
 11849                           prodh	equ	0xFF4
 11850                           prodl	equ	0xFF3
 11851                           intcon	equ	0xFF2
 11852                           intcon2	equ	0xFF1
 11853                           intcon3	equ	0xFF0
 11854                           postinc0	equ	0xFEE
 11855                           wreg	equ	0xFE8
 11856                           indf1	equ	0xFE7
 11857                           postinc1	equ	0xFE6
 11858                           postdec1	equ	0xFE5
 11859                           fsr1h	equ	0xFE2
 11860                           fsr1l	equ	0xFE1
 11861                           indf2	equ	0xFDF
 11862                           postinc2	equ	0xFDE
 11863                           postdec2	equ	0xFDD
 11864                           plusw2	equ	0xFDB
 11865                           fsr2h	equ	0xFDA
 11866                           fsr2l	equ	0xFD9
 11867                           status	equ	0xFD8
 11868                           
 11869 ;; *************** function _command *****************
 11870 ;; Defined at:
 11871 ;;		line 345 in file "bibliotecas/SDCard.c"
 11872 ;; Parameters:    Size  Location     Type
 11873 ;;  CMD             1    wreg     unsigned char 
 11874 ;;  arg             4   32[COMRAM] unsigned long 
 11875 ;;  CRC             1   36[COMRAM] unsigned char 
 11876 ;; Auto vars:     Size  Location     Type
 11877 ;;  CMD             1   37[COMRAM] unsigned char 
 11878 ;;  argument        1   38[COMRAM] unsigned char 
 11879 ;; Return value:  Size  Location     Type
 11880 ;;                  1    wreg      void 
 11881 ;; Registers used:
 11882 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11883 ;; Tracked objects:
 11884 ;;		On entry : 0/0
 11885 ;;		On exit  : 0/0
 11886 ;;		Unchanged: 0/0
 11887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11888 ;;      Params:         5       0       0       0       0       0       0       0       0
 11889 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11890 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11891 ;;      Totals:         7       0       0       0       0       0       0       0       0
 11892 ;;Total ram usage:        7 bytes
 11893 ;; Hardware stack levels used:    1
 11894 ;; Hardware stack levels required when called:    5
 11895 ;; This function calls:
 11896 ;;		_WriteSPI_
 11897 ;;		_escreve_frase_ram_lcd
 11898 ;;		_posicao_cursor_lcd
 11899 ;; This function is called by:
 11900 ;;		_reset
 11901 ;;		_disk_initialize
 11902 ;;		_disk_readp
 11903 ;;		_disk_writep
 11904 ;; This function uses a non-reentrant model
 11905 ;;
 11906                           
 11907                           	psect	text46
 11908  002E82                     __ptext46:
 11909                           	opt stack 0
 11910  002E82                     _command:
 11911                           	opt stack 20
 11912                           
 11913                           ;incstack = 0
 11914                           ;command@CMD stored from wreg
 11915  002E82  6E26               	movwf	command@CMD,c
 11916                           
 11917                           ;SDCard.c: 347: posicao_cursor_lcd(1,0);
 11918  002E84  0E00               	movlw	0
 11919  002E86  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 11920  002E88  0E01               	movlw	1
 11921  002E8A  EC45  F016         	call	_posicao_cursor_lcd
 11922                           
 11923                           ;SDCard.c: 348: escreve_frase_ram_lcd("OOOOOOOOO");
 11924  002E8E  0EE1               	movlw	low STR_2
 11925  002E90  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 11926  002E92  0E7F               	movlw	high STR_2
 11927  002E94  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 11928  002E96  EC6B  F017         	call	_escreve_frase_ram_lcd	;wreg free
 11929                           
 11930                           ;SDCard.c: 349: unsigned char argument = arg>>24;
 11931  002E9A  C024  F027         	movff	command@arg+3,command@argument
 11932                           
 11933                           ;SDCard.c: 350: WriteSPI_(0xFF);
 11934  002E9E  0EFF               	movlw	255
 11935  002EA0  ECD8  F017         	call	_WriteSPI_
 11936                           
 11937                           ;SDCard.c: 351: WriteSPI_(CMD);
 11938  002EA4  5026               	movf	command@CMD,w,c
 11939  002EA6  ECD8  F017         	call	_WriteSPI_
 11940                           
 11941                           ;SDCard.c: 352: WriteSPI_(argument);
 11942  002EAA  5027               	movf	command@argument,w,c
 11943  002EAC  ECD8  F017         	call	_WriteSPI_
 11944                           
 11945                           ;SDCard.c: 353: argument = arg>>16;
 11946  002EB0  C023  F027         	movff	command@arg+2,command@argument
 11947                           
 11948                           ;SDCard.c: 354: WriteSPI_(argument);
 11949  002EB4  5027               	movf	command@argument,w,c
 11950  002EB6  ECD8  F017         	call	_WriteSPI_
 11951                           
 11952                           ;SDCard.c: 355: argument = arg>>8;
 11953  002EBA  C022  F027         	movff	command@arg+1,command@argument
 11954                           
 11955                           ;SDCard.c: 356: WriteSPI_(argument);
 11956  002EBE  5027               	movf	command@argument,w,c
 11957  002EC0  ECD8  F017         	call	_WriteSPI_
 11958                           
 11959                           ;SDCard.c: 357: argument = arg;
 11960  002EC4  C021  F027         	movff	command@arg,command@argument
 11961                           
 11962                           ;SDCard.c: 358: WriteSPI_(argument);
 11963  002EC8  5027               	movf	command@argument,w,c
 11964  002ECA  ECD8  F017         	call	_WriteSPI_
 11965                           
 11966                           ;SDCard.c: 359: WriteSPI_(CRC);
 11967  002ECE  5025               	movf	command@CRC,w,c
 11968  002ED0  ECD8  F017         	call	_WriteSPI_
 11969  002ED4  0012               	return		;funcret
 11970  002ED6                     __end_of_command:
 11971                           	opt stack 0
 11972                           tosu	equ	0xFFF
 11973                           tosh	equ	0xFFE
 11974                           tosl	equ	0xFFD
 11975                           pclath	equ	0xFFA
 11976                           tblptru	equ	0xFF8
 11977                           tblptrh	equ	0xFF7
 11978                           tblptrl	equ	0xFF6
 11979                           tablat	equ	0xFF5
 11980                           prodh	equ	0xFF4
 11981                           prodl	equ	0xFF3
 11982                           intcon	equ	0xFF2
 11983                           intcon2	equ	0xFF1
 11984                           intcon3	equ	0xFF0
 11985                           postinc0	equ	0xFEE
 11986                           wreg	equ	0xFE8
 11987                           indf1	equ	0xFE7
 11988                           postinc1	equ	0xFE6
 11989                           postdec1	equ	0xFE5
 11990                           fsr1h	equ	0xFE2
 11991                           fsr1l	equ	0xFE1
 11992                           indf2	equ	0xFDF
 11993                           postinc2	equ	0xFDE
 11994                           postdec2	equ	0xFDD
 11995                           plusw2	equ	0xFDB
 11996                           fsr2h	equ	0xFDA
 11997                           fsr2l	equ	0xFD9
 11998                           status	equ	0xFD8
 11999                           
 12000 ;; *************** function _posicao_cursor_lcd *****************
 12001 ;; Defined at:
 12002 ;;		line 271 in file "bibliotecas/display/display_lcd.c"
 12003 ;; Parameters:    Size  Location     Type
 12004 ;;  linha           1    wreg     unsigned char 
 12005 ;;  coluna          1   28[COMRAM] unsigned char 
 12006 ;; Auto vars:     Size  Location     Type
 12007 ;;  linha           1   29[COMRAM] unsigned char 
 12008 ;;  endereco        1   30[COMRAM] unsigned char 
 12009 ;; Return value:  Size  Location     Type
 12010 ;;                  1    wreg      void 
 12011 ;; Registers used:
 12012 ;;		wreg, status,2, status,0, cstack
 12013 ;; Tracked objects:
 12014 ;;		On entry : 0/0
 12015 ;;		On exit  : 0/0
 12016 ;;		Unchanged: 0/0
 12017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12018 ;;      Params:         1       0       0       0       0       0       0       0       0
 12019 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12020 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12021 ;;      Totals:         3       0       0       0       0       0       0       0       0
 12022 ;;Total ram usage:        3 bytes
 12023 ;; Hardware stack levels used:    1
 12024 ;; Hardware stack levels required when called:    4
 12025 ;; This function calls:
 12026 ;;		_endereco_cursor_lcd
 12027 ;; This function is called by:
 12028 ;;		_dummy_clocks
 12029 ;;		_command
 12030 ;;		_inicializa_SPI
 12031 ;;		_mensagem_inicial
 12032 ;;		_SDCard
 12033 ;;		_reset
 12034 ;;		_disk_initialize
 12035 ;;		_leitura_chave
 12036 ;; This function uses a non-reentrant model
 12037 ;;
 12038                           
 12039                           	psect	text47
 12040  002C8A                     __ptext47:
 12041                           	opt stack 0
 12042  002C8A                     _posicao_cursor_lcd:
 12043                           	opt stack 25
 12044                           
 12045                           ;incstack = 0
 12046                           ;posicao_cursor_lcd@linha stored from wreg
 12047  002C8A  6E1E               	movwf	posicao_cursor_lcd@linha,c
 12048                           
 12049                           ;display_lcd.c: 273: unsigned char endereco = 0x00;
 12050  002C8C  0E00               	movlw	0
 12051  002C8E  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 12052                           
 12053                           ;display_lcd.c: 275: if(coluna <= 0x10U)
 12054  002C90  0E11               	movlw	17
 12055  002C92  601D               	cpfslt	posicao_cursor_lcd@coluna,c
 12056  002C94  D02F               	goto	l616
 12057  002C96  D01E               	goto	l617
 12058  002C98                     l618:
 12059                           
 12060                           ;display_lcd.c: 282: endereco = 0x00U + coluna;
 12061  002C98  C01D  F01F         	movff	posicao_cursor_lcd@coluna,posicao_cursor_lcd@endereco
 12062                           
 12063                           ;display_lcd.c: 283: endereco_cursor_lcd(endereco);
 12064  002C9C  501F               	movf	posicao_cursor_lcd@endereco,w,c
 12065  002C9E  EC7D  F016         	call	_endereco_cursor_lcd
 12066                           
 12067                           ;display_lcd.c: 284: break;
 12068  002CA2  D026               	goto	l619
 12069  002CA4                     
 12070                           ;display_lcd.c: 287: endereco = 0x40U + coluna;
 12071  002CA4  501D               	movf	posicao_cursor_lcd@coluna,w,c
 12072  002CA6  0F40               	addlw	64
 12073  002CA8  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 12074                           
 12075                           ;display_lcd.c: 288: endereco_cursor_lcd(endereco);
 12076  002CAA  501F               	movf	posicao_cursor_lcd@endereco,w,c
 12077  002CAC  EC7D  F016         	call	_endereco_cursor_lcd
 12078                           
 12079                           ;display_lcd.c: 289: break;
 12080  002CB0  D01F               	goto	l619
 12081  002CB2                     
 12082                           ;display_lcd.c: 292: endereco = 0x14U + coluna;
 12083  002CB2  501D               	movf	posicao_cursor_lcd@coluna,w,c
 12084  002CB4  0F14               	addlw	20
 12085  002CB6  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 12086                           
 12087                           ;display_lcd.c: 293: endereco_cursor_lcd(endereco);
 12088  002CB8  501F               	movf	posicao_cursor_lcd@endereco,w,c
 12089  002CBA  EC7D  F016         	call	_endereco_cursor_lcd
 12090                           
 12091                           ;display_lcd.c: 294: break;
 12092  002CBE  D018               	goto	l619
 12093  002CC0                     
 12094                           ;display_lcd.c: 297: endereco = 0x54U + coluna;
 12095  002CC0  501D               	movf	posicao_cursor_lcd@coluna,w,c
 12096  002CC2  0F54               	addlw	84
 12097  002CC4  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 12098                           
 12099                           ;display_lcd.c: 298: endereco_cursor_lcd(endereco);
 12100  002CC6  501F               	movf	posicao_cursor_lcd@endereco,w,c
 12101  002CC8  EC7D  F016         	call	_endereco_cursor_lcd
 12102                           
 12103                           ;display_lcd.c: 299: break;
 12104  002CCC  D011               	goto	l619
 12105  002CCE                     
 12106                           ;display_lcd.c: 302: endereco = 0x00U;
 12107  002CCE  0E00               	movlw	0
 12108  002CD0  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 12109                           
 12110                           ;display_lcd.c: 304: }
 12111                           
 12112                           ;display_lcd.c: 303: break;
 12113  002CD2  D00E               	goto	l619
 12114  002CD4                     l617:
 12115  002CD4  501E               	movf	posicao_cursor_lcd@linha,w,c
 12116                           
 12117                           ; Switch size 1, requested type "space"
 12118                           ; Number of cases is 4, Range of values is 1 to 4
 12119                           ; switch strategies available:
 12120                           ; Name         Instructions Cycles
 12121                           ; simple_byte           13     7 (average)
 12122                           ;	Chosen strategy is simple_byte
 12123  002CD6  0A01               	xorlw	1	; case 1
 12124  002CD8  B4D8               	btfsc	status,2,c
 12125  002CDA  D7DE               	goto	l618
 12126  002CDC  0A03               	xorlw	3	; case 2
 12127  002CDE  B4D8               	btfsc	status,2,c
 12128  002CE0  D7E1               	goto	l620
 12129  002CE2  0A01               	xorlw	1	; case 3
 12130  002CE4  B4D8               	btfsc	status,2,c
 12131  002CE6  D7E5               	goto	l621
 12132  002CE8  0A07               	xorlw	7	; case 4
 12133  002CEA  B4D8               	btfsc	status,2,c
 12134  002CEC  D7E9               	goto	l622
 12135  002CEE  D7EF               	goto	l623
 12136  002CF0                     l619:
 12137                           
 12138                           ;display_lcd.c: 306: coluna++;
 12139  002CF0  2A1D               	incf	posicao_cursor_lcd@coluna,f,c
 12140                           
 12141                           ;display_lcd.c: 307: }
 12142  002CF2  0012               	return	
 12143  002CF4                     l616:
 12144                           
 12145                           ;display_lcd.c: 308: else
 12146                           ;display_lcd.c: 309: {
 12147                           ;display_lcd.c: 310: endereco = 0x00U;
 12148  002CF4  0E00               	movlw	0
 12149  002CF6  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 12150  002CF8  0012               	return	
 12151  002CFA                     __end_of_posicao_cursor_lcd:
 12152                           	opt stack 0
 12153                           tosu	equ	0xFFF
 12154                           tosh	equ	0xFFE
 12155                           tosl	equ	0xFFD
 12156                           pclath	equ	0xFFA
 12157                           tblptru	equ	0xFF8
 12158                           tblptrh	equ	0xFF7
 12159                           tblptrl	equ	0xFF6
 12160                           tablat	equ	0xFF5
 12161                           prodh	equ	0xFF4
 12162                           prodl	equ	0xFF3
 12163                           intcon	equ	0xFF2
 12164                           intcon2	equ	0xFF1
 12165                           intcon3	equ	0xFF0
 12166                           postinc0	equ	0xFEE
 12167                           wreg	equ	0xFE8
 12168                           indf1	equ	0xFE7
 12169                           postinc1	equ	0xFE6
 12170                           postdec1	equ	0xFE5
 12171                           fsr1h	equ	0xFE2
 12172                           fsr1l	equ	0xFE1
 12173                           indf2	equ	0xFDF
 12174                           postinc2	equ	0xFDE
 12175                           postdec2	equ	0xFDD
 12176                           plusw2	equ	0xFDB
 12177                           fsr2h	equ	0xFDA
 12178                           fsr2l	equ	0xFD9
 12179                           status	equ	0xFD8
 12180                           
 12181 ;; *************** function _endereco_cursor_lcd *****************
 12182 ;; Defined at:
 12183 ;;		line 218 in file "bibliotecas/display/display_lcd.c"
 12184 ;; Parameters:    Size  Location     Type
 12185 ;;  endereco        1    wreg     unsigned char 
 12186 ;; Auto vars:     Size  Location     Type
 12187 ;;  endereco        1   27[COMRAM] unsigned char 
 12188 ;; Return value:  Size  Location     Type
 12189 ;;                  1    wreg      void 
 12190 ;; Registers used:
 12191 ;;		wreg, status,2, status,0, cstack
 12192 ;; Tracked objects:
 12193 ;;		On entry : 0/0
 12194 ;;		On exit  : 0/0
 12195 ;;		Unchanged: 0/0
 12196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12197 ;;      Params:         0       0       0       0       0       0       0       0       0
 12198 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12199 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12200 ;;      Totals:         1       0       0       0       0       0       0       0       0
 12201 ;;Total ram usage:        1 bytes
 12202 ;; Hardware stack levels used:    1
 12203 ;; Hardware stack levels required when called:    3
 12204 ;; This function calls:
 12205 ;;		_delay
 12206 ;; This function is called by:
 12207 ;;		_posicao_cursor_lcd
 12208 ;;		_cria_caractere_lcd
 12209 ;; This function uses a non-reentrant model
 12210 ;;
 12211                           
 12212                           	psect	text48
 12213  002CFA                     __ptext48:
 12214                           	opt stack 0
 12215  002CFA                     _endereco_cursor_lcd:
 12216                           	opt stack 25
 12217                           
 12218                           ;incstack = 0
 12219                           ;endereco_cursor_lcd@endereco stored from wreg
 12220  002CFA  6E1C               	movwf	endereco_cursor_lcd@endereco,c
 12221                           
 12222                           ;display_lcd.c: 221: PORTDbits.RD2 = 0;
 12223  002CFC  9483               	bcf	3971,2,c	;volatile
 12224                           
 12225                           ;display_lcd.c: 222: PORTDbits.RD1 = 0;
 12226  002CFE  9283               	bcf	3971,1,c	;volatile
 12227                           
 12228                           ;display_lcd.c: 223: PORTDbits.RD0 = 0;
 12229  002D00  9083               	bcf	3971,0,c	;volatile
 12230                           
 12231                           ;display_lcd.c: 226: PORTDbits.RD7 = 1;
 12232  002D02  8E83               	bsf	3971,7,c	;volatile
 12233                           
 12234                           ;display_lcd.c: 227: if(endereco&0b00010000){PORTDbits.RD4=1;}
 12235  002D04  A81C               	btfss	endereco_cursor_lcd@endereco,4,c
 12236  002D06  D002               	goto	l599
 12237  002D08  8883               	bsf	3971,4,c	;volatile
 12238  002D0A  D001               	goto	l600
 12239  002D0C                     l599:
 12240                           
 12241                           ;display_lcd.c: 228: else {PORTDbits.RD4=0;}
 12242  002D0C  9883               	bcf	3971,4,c	;volatile
 12243  002D0E                     l600:
 12244                           
 12245                           ;display_lcd.c: 229: if(endereco&0b00100000){PORTDbits.RD5=1;}
 12246  002D0E  AA1C               	btfss	endereco_cursor_lcd@endereco,5,c
 12247  002D10  D002               	goto	l601
 12248  002D12  8A83               	bsf	3971,5,c	;volatile
 12249  002D14  D001               	goto	l602
 12250  002D16                     l601:
 12251                           
 12252                           ;display_lcd.c: 230: else {PORTDbits.RD5=0;}
 12253  002D16  9A83               	bcf	3971,5,c	;volatile
 12254  002D18                     l602:
 12255                           
 12256                           ;display_lcd.c: 231: if(endereco&0b01000000){PORTDbits.RD6=1;}
 12257  002D18  AC1C               	btfss	endereco_cursor_lcd@endereco,6,c
 12258  002D1A  D002               	goto	l603
 12259  002D1C  8C83               	bsf	3971,6,c	;volatile
 12260  002D1E  D001               	goto	l604
 12261  002D20                     l603:
 12262                           
 12263                           ;display_lcd.c: 232: else {PORTDbits.RD6=0;}
 12264  002D20  9C83               	bcf	3971,6,c	;volatile
 12265  002D22                     l604:
 12266                           
 12267                           ;display_lcd.c: 235: PORTDbits.RD0 = 1;
 12268  002D22  8083               	bsf	3971,0,c	;volatile
 12269                           
 12270                           ;display_lcd.c: 236: delay();
 12271  002D24  EC54  F018         	call	_delay	;wreg free
 12272                           
 12273                           ;display_lcd.c: 237: PORTDbits.RD0 = 0;
 12274  002D28  9083               	bcf	3971,0,c	;volatile
 12275                           
 12276                           ;display_lcd.c: 238: delay();
 12277  002D2A  EC54  F018         	call	_delay	;wreg free
 12278                           
 12279                           ;display_lcd.c: 241: if(endereco&0b00000001){PORTDbits.RD4=1;}
 12280  002D2E  A01C               	btfss	endereco_cursor_lcd@endereco,0,c
 12281  002D30  D002               	goto	l605
 12282  002D32  8883               	bsf	3971,4,c	;volatile
 12283  002D34  D001               	goto	l606
 12284  002D36                     l605:
 12285                           
 12286                           ;display_lcd.c: 242: else {PORTDbits.RD4=0;}
 12287  002D36  9883               	bcf	3971,4,c	;volatile
 12288  002D38                     l606:
 12289                           
 12290                           ;display_lcd.c: 243: if(endereco&0b00000010){PORTDbits.RD5=1;}
 12291  002D38  A21C               	btfss	endereco_cursor_lcd@endereco,1,c
 12292  002D3A  D002               	goto	l607
 12293  002D3C  8A83               	bsf	3971,5,c	;volatile
 12294  002D3E  D001               	goto	l608
 12295  002D40                     l607:
 12296                           
 12297                           ;display_lcd.c: 244: else {PORTDbits.RD5=0;}
 12298  002D40  9A83               	bcf	3971,5,c	;volatile
 12299  002D42                     l608:
 12300                           
 12301                           ;display_lcd.c: 245: if(endereco&0b00000100){PORTDbits.RD6=1;}
 12302  002D42  A41C               	btfss	endereco_cursor_lcd@endereco,2,c
 12303  002D44  D002               	goto	l609
 12304  002D46  8C83               	bsf	3971,6,c	;volatile
 12305  002D48  D001               	goto	l610
 12306  002D4A                     l609:
 12307                           
 12308                           ;display_lcd.c: 246: else {PORTDbits.RD6=0;}
 12309  002D4A  9C83               	bcf	3971,6,c	;volatile
 12310  002D4C                     l610:
 12311                           
 12312                           ;display_lcd.c: 247: if(endereco&0b00001000){PORTDbits.RD7=1;}
 12313  002D4C  A61C               	btfss	endereco_cursor_lcd@endereco,3,c
 12314  002D4E  D002               	goto	l611
 12315  002D50  8E83               	bsf	3971,7,c	;volatile
 12316  002D52  D001               	goto	l612
 12317  002D54                     l611:
 12318                           
 12319                           ;display_lcd.c: 248: else {PORTDbits.RD7=0;}
 12320  002D54  9E83               	bcf	3971,7,c	;volatile
 12321  002D56                     l612:
 12322                           
 12323                           ;display_lcd.c: 251: PORTDbits.RD0 = 1;
 12324  002D56  8083               	bsf	3971,0,c	;volatile
 12325                           
 12326                           ;display_lcd.c: 252: delay();
 12327  002D58  EC54  F018         	call	_delay	;wreg free
 12328                           
 12329                           ;display_lcd.c: 253: PORTDbits.RD0 = 0;
 12330  002D5C  9083               	bcf	3971,0,c	;volatile
 12331                           
 12332                           ;display_lcd.c: 254: delay();
 12333  002D5E  EC54  F018         	call	_delay	;wreg free
 12334  002D62  0012               	return		;funcret
 12335  002D64                     __end_of_endereco_cursor_lcd:
 12336                           	opt stack 0
 12337                           tosu	equ	0xFFF
 12338                           tosh	equ	0xFFE
 12339                           tosl	equ	0xFFD
 12340                           pclath	equ	0xFFA
 12341                           tblptru	equ	0xFF8
 12342                           tblptrh	equ	0xFF7
 12343                           tblptrl	equ	0xFF6
 12344                           tablat	equ	0xFF5
 12345                           prodh	equ	0xFF4
 12346                           prodl	equ	0xFF3
 12347                           intcon	equ	0xFF2
 12348                           intcon2	equ	0xFF1
 12349                           intcon3	equ	0xFF0
 12350                           postinc0	equ	0xFEE
 12351                           wreg	equ	0xFE8
 12352                           indf1	equ	0xFE7
 12353                           postinc1	equ	0xFE6
 12354                           postdec1	equ	0xFE5
 12355                           fsr1h	equ	0xFE2
 12356                           fsr1l	equ	0xFE1
 12357                           indf2	equ	0xFDF
 12358                           postinc2	equ	0xFDE
 12359                           postdec2	equ	0xFDD
 12360                           plusw2	equ	0xFDB
 12361                           fsr2h	equ	0xFDA
 12362                           fsr2l	equ	0xFD9
 12363                           status	equ	0xFD8
 12364                           
 12365 ;; *************** function _escreve_frase_ram_lcd *****************
 12366 ;; Defined at:
 12367 ;;		line 445 in file "bibliotecas/display/display_lcd.c"
 12368 ;; Parameters:    Size  Location     Type
 12369 ;;  buffer          2   28[COMRAM] PTR unsigned char 
 12370 ;;		 -> STR_17(9), STR_16(14), STR_15(14), STR_14(12), 
 12371 ;;		 -> escreve_inteiro_lcd@texto(7), STR_13(14), STR_12(13), STR_11(17), 
 12372 ;;		 -> STR_8(17), STR_7(15), STR_6(14), STR_5(14), 
 12373 ;;		 -> mensagem_inicial@msg_dois(17), mensagem_inicial@msg_linha_um(17), leitura_chave@pos_ignicao_on(17), leitura_chav
      +e@pos_ignicao_crank(17), 
 12374 ;;		 -> leitura_chave@pos_ignicao_off(17), STR_3(17), STR_2(10), STR_1(11), 
 12375 ;; Auto vars:     Size  Location     Type
 12376 ;;		None
 12377 ;; Return value:  Size  Location     Type
 12378 ;;                  1    wreg      void 
 12379 ;; Registers used:
 12380 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12381 ;; Tracked objects:
 12382 ;;		On entry : 0/0
 12383 ;;		On exit  : 0/0
 12384 ;;		Unchanged: 0/0
 12385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12386 ;;      Params:         2       0       0       0       0       0       0       0       0
 12387 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12388 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12389 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12390 ;;Total ram usage:        2 bytes
 12391 ;; Hardware stack levels used:    1
 12392 ;; Hardware stack levels required when called:    4
 12393 ;; This function calls:
 12394 ;;		_escreve_caractere_lcd
 12395 ;; This function is called by:
 12396 ;;		_dummy_clocks
 12397 ;;		_command
 12398 ;;		_inicializa_SPI
 12399 ;;		_mensagem_inicial
 12400 ;;		_SDCard
 12401 ;;		_reset
 12402 ;;		_disk_initialize
 12403 ;;		_leitura_chave
 12404 ;;		_escreve_inteiro_lcd
 12405 ;; This function uses a non-reentrant model
 12406 ;;
 12407                           
 12408                           	psect	text49
 12409  002ED6                     __ptext49:
 12410                           	opt stack 0
 12411  002ED6                     _escreve_frase_ram_lcd:
 12412                           	opt stack 25
 12413                           
 12414                           ;display_lcd.c: 447: while(*buffer)
 12415                           
 12416                           ;incstack = 0
 12417  002ED6  D014               	goto	l661
 12418  002ED8                     
 12419                           ;display_lcd.c: 448: {
 12420                           ;display_lcd.c: 449: escreve_caractere_lcd(*buffer);
 12421  002ED8  C01D  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 12422  002EDC  C01E  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 12423  002EE0  6AF8               	clrf	tblptru,c
 12424  002EE2  0E07               	movlw	(high __ramtop+-1)
 12425  002EE4  64F7               	cpfsgt	tblptrh,c
 12426  002EE6  D003               	bra	u6547
 12427  002EE8  0008               	tblrd		*
 12428  002EEA  50F5               	movf	tablat,w,c
 12429  002EEC  D005               	bra	u6540
 12430  002EEE                     u6547:
 12431  002EEE  CFF6 FFE9          	movff	tblptrl,fsr0l
 12432  002EF2  CFF7 FFEA          	movff	tblptrh,fsr0h
 12433  002EF6  50EF               	movf	indf0,w,c
 12434  002EF8                     u6540:
 12435  002EF8  ECD4  F015         	call	_escreve_caractere_lcd
 12436                           
 12437                           ;display_lcd.c: 450: buffer++;
 12438  002EFC  4A1D               	infsnz	escreve_frase_ram_lcd@buffer,f,c
 12439  002EFE  2A1E               	incf	escreve_frase_ram_lcd@buffer+1,f,c
 12440  002F00                     l661:
 12441  002F00  C01D  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 12442  002F04  C01E  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 12443  002F08  6AF8               	clrf	tblptru,c
 12444  002F0A  0E07               	movlw	(high __ramtop+-1)
 12445  002F0C  64F7               	cpfsgt	tblptrh,c
 12446  002F0E  D003               	bra	u6557
 12447  002F10  0008               	tblrd		*
 12448  002F12  50F5               	movf	tablat,w,c
 12449  002F14  D005               	bra	u6550
 12450  002F16                     u6557:
 12451  002F16  CFF6 FFE9          	movff	tblptrl,fsr0l
 12452  002F1A  CFF7 FFEA          	movff	tblptrh,fsr0h
 12453  002F1E  50EF               	movf	indf0,w,c
 12454  002F20                     u6550:
 12455  002F20  0900               	iorlw	0
 12456  002F22  B4D8               	btfsc	status,2,c
 12457  002F24  0012               	return	
 12458  002F26  D7D8               	goto	l662
 12459  002F28                     __end_of_escreve_frase_ram_lcd:
 12460                           	opt stack 0
 12461                           tosu	equ	0xFFF
 12462                           tosh	equ	0xFFE
 12463                           tosl	equ	0xFFD
 12464                           pclath	equ	0xFFA
 12465                           tblptru	equ	0xFF8
 12466                           tblptrh	equ	0xFF7
 12467                           tblptrl	equ	0xFF6
 12468                           tablat	equ	0xFF5
 12469                           prodh	equ	0xFF4
 12470                           prodl	equ	0xFF3
 12471                           intcon	equ	0xFF2
 12472                           intcon2	equ	0xFF1
 12473                           intcon3	equ	0xFF0
 12474                           indf0	equ	0xFEF
 12475                           postinc0	equ	0xFEE
 12476                           fsr0h	equ	0xFEA
 12477                           fsr0l	equ	0xFE9
 12478                           wreg	equ	0xFE8
 12479                           indf1	equ	0xFE7
 12480                           postinc1	equ	0xFE6
 12481                           postdec1	equ	0xFE5
 12482                           fsr1h	equ	0xFE2
 12483                           fsr1l	equ	0xFE1
 12484                           indf2	equ	0xFDF
 12485                           postinc2	equ	0xFDE
 12486                           postdec2	equ	0xFDD
 12487                           plusw2	equ	0xFDB
 12488                           fsr2h	equ	0xFDA
 12489                           fsr2l	equ	0xFD9
 12490                           status	equ	0xFD8
 12491                           
 12492 ;; *************** function _escreve_caractere_lcd *****************
 12493 ;; Defined at:
 12494 ;;		line 323 in file "bibliotecas/display/display_lcd.c"
 12495 ;; Parameters:    Size  Location     Type
 12496 ;;  data            1    wreg     unsigned char 
 12497 ;; Auto vars:     Size  Location     Type
 12498 ;;  data            1   27[COMRAM] unsigned char 
 12499 ;; Return value:  Size  Location     Type
 12500 ;;                  1    wreg      void 
 12501 ;; Registers used:
 12502 ;;		wreg, status,2, status,0, cstack
 12503 ;; Tracked objects:
 12504 ;;		On entry : 0/0
 12505 ;;		On exit  : 0/0
 12506 ;;		Unchanged: 0/0
 12507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12508 ;;      Params:         0       0       0       0       0       0       0       0       0
 12509 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12510 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12511 ;;      Totals:         1       0       0       0       0       0       0       0       0
 12512 ;;Total ram usage:        1 bytes
 12513 ;; Hardware stack levels used:    1
 12514 ;; Hardware stack levels required when called:    3
 12515 ;; This function calls:
 12516 ;;		_delay
 12517 ;; This function is called by:
 12518 ;;		_escreve_frase_ram_lcd
 12519 ;;		_escreve_float_lcd
 12520 ;;		_escreve_frase_lcd
 12521 ;;		_cria_caractere_lcd
 12522 ;; This function uses a non-reentrant model
 12523 ;;
 12524                           
 12525                           	psect	text50
 12526  002BA8                     __ptext50:
 12527                           	opt stack 0
 12528  002BA8                     _escreve_caractere_lcd:
 12529                           	opt stack 25
 12530                           
 12531                           ;incstack = 0
 12532                           ;escreve_caractere_lcd@data stored from wreg
 12533  002BA8  6E1C               	movwf	escreve_caractere_lcd@data,c
 12534                           
 12535                           ;display_lcd.c: 326: PORTDbits.RD2 = 0;
 12536  002BAA  9483               	bcf	3971,2,c	;volatile
 12537                           
 12538                           ;display_lcd.c: 327: PORTDbits.RD1 = 1;
 12539  002BAC  8283               	bsf	3971,1,c	;volatile
 12540                           
 12541                           ;display_lcd.c: 328: PORTDbits.RD0 = 0;
 12542  002BAE  9083               	bcf	3971,0,c	;volatile
 12543                           
 12544                           ;display_lcd.c: 331: if(data&0b00010000){PORTDbits.RD4=1;}
 12545  002BB0  A81C               	btfss	escreve_caractere_lcd@data,4,c
 12546  002BB2  D002               	goto	l628
 12547  002BB4  8883               	bsf	3971,4,c	;volatile
 12548  002BB6  D001               	goto	l629
 12549  002BB8                     l628:
 12550                           
 12551                           ;display_lcd.c: 332: else {PORTDbits.RD4=0;}
 12552  002BB8  9883               	bcf	3971,4,c	;volatile
 12553  002BBA                     l629:
 12554                           
 12555                           ;display_lcd.c: 333: if(data&0b00100000){PORTDbits.RD5=1;}
 12556  002BBA  AA1C               	btfss	escreve_caractere_lcd@data,5,c
 12557  002BBC  D002               	goto	l630
 12558  002BBE  8A83               	bsf	3971,5,c	;volatile
 12559  002BC0  D001               	goto	l631
 12560  002BC2                     l630:
 12561                           
 12562                           ;display_lcd.c: 334: else {PORTDbits.RD5=0;}
 12563  002BC2  9A83               	bcf	3971,5,c	;volatile
 12564  002BC4                     l631:
 12565                           
 12566                           ;display_lcd.c: 335: if(data&0b01000000){PORTDbits.RD6=1;}
 12567  002BC4  AC1C               	btfss	escreve_caractere_lcd@data,6,c
 12568  002BC6  D002               	goto	l632
 12569  002BC8  8C83               	bsf	3971,6,c	;volatile
 12570  002BCA  D001               	goto	l633
 12571  002BCC                     l632:
 12572                           
 12573                           ;display_lcd.c: 336: else {PORTDbits.RD6=0;}
 12574  002BCC  9C83               	bcf	3971,6,c	;volatile
 12575  002BCE                     l633:
 12576                           
 12577                           ;display_lcd.c: 337: if(data&0b10000000){PORTDbits.RD7=1;}
 12578  002BCE  AE1C               	btfss	escreve_caractere_lcd@data,7,c
 12579  002BD0  D002               	goto	l634
 12580  002BD2  8E83               	bsf	3971,7,c	;volatile
 12581  002BD4  D001               	goto	l635
 12582  002BD6                     l634:
 12583                           
 12584                           ;display_lcd.c: 338: else {PORTDbits.RD7=0;}
 12585  002BD6  9E83               	bcf	3971,7,c	;volatile
 12586  002BD8                     l635:
 12587                           
 12588                           ;display_lcd.c: 341: PORTDbits.RD0 = 1;
 12589  002BD8  8083               	bsf	3971,0,c	;volatile
 12590                           
 12591                           ;display_lcd.c: 342: delay();
 12592  002BDA  EC54  F018         	call	_delay	;wreg free
 12593                           
 12594                           ;display_lcd.c: 343: PORTDbits.RD0 = 0;
 12595  002BDE  9083               	bcf	3971,0,c	;volatile
 12596                           
 12597                           ;display_lcd.c: 344: delay();
 12598  002BE0  EC54  F018         	call	_delay	;wreg free
 12599                           
 12600                           ;display_lcd.c: 348: if(data&0b00000001){PORTDbits.RD4=1;}
 12601  002BE4  A01C               	btfss	escreve_caractere_lcd@data,0,c
 12602  002BE6  D002               	goto	l636
 12603  002BE8  8883               	bsf	3971,4,c	;volatile
 12604  002BEA  D001               	goto	l637
 12605  002BEC                     l636:
 12606                           
 12607                           ;display_lcd.c: 349: else {PORTDbits.RD4=0;}
 12608  002BEC  9883               	bcf	3971,4,c	;volatile
 12609  002BEE                     l637:
 12610                           
 12611                           ;display_lcd.c: 350: if(data&0b00000010){PORTDbits.RD5=1;}
 12612  002BEE  A21C               	btfss	escreve_caractere_lcd@data,1,c
 12613  002BF0  D002               	goto	l638
 12614  002BF2  8A83               	bsf	3971,5,c	;volatile
 12615  002BF4  D001               	goto	l639
 12616  002BF6                     l638:
 12617                           
 12618                           ;display_lcd.c: 351: else {PORTDbits.RD5=0;}
 12619  002BF6  9A83               	bcf	3971,5,c	;volatile
 12620  002BF8                     l639:
 12621                           
 12622                           ;display_lcd.c: 352: if(data&0b00000100){PORTDbits.RD6=1;}
 12623  002BF8  A41C               	btfss	escreve_caractere_lcd@data,2,c
 12624  002BFA  D002               	goto	l640
 12625  002BFC  8C83               	bsf	3971,6,c	;volatile
 12626  002BFE  D001               	goto	l641
 12627  002C00                     l640:
 12628                           
 12629                           ;display_lcd.c: 353: else {PORTDbits.RD6=0;}
 12630  002C00  9C83               	bcf	3971,6,c	;volatile
 12631  002C02                     l641:
 12632                           
 12633                           ;display_lcd.c: 354: if(data&0b00001000){PORTDbits.RD7=1;}
 12634  002C02  A61C               	btfss	escreve_caractere_lcd@data,3,c
 12635  002C04  D002               	goto	l642
 12636  002C06  8E83               	bsf	3971,7,c	;volatile
 12637  002C08  D001               	goto	l643
 12638  002C0A                     l642:
 12639                           
 12640                           ;display_lcd.c: 355: else {PORTDbits.RD7=0;}
 12641  002C0A  9E83               	bcf	3971,7,c	;volatile
 12642  002C0C                     l643:
 12643                           
 12644                           ;display_lcd.c: 358: PORTDbits.RD0 = 1;
 12645  002C0C  8083               	bsf	3971,0,c	;volatile
 12646                           
 12647                           ;display_lcd.c: 359: delay();
 12648  002C0E  EC54  F018         	call	_delay	;wreg free
 12649                           
 12650                           ;display_lcd.c: 360: PORTDbits.RD0 = 0;
 12651  002C12  9083               	bcf	3971,0,c	;volatile
 12652                           
 12653                           ;display_lcd.c: 361: delay();
 12654  002C14  EC54  F018         	call	_delay	;wreg free
 12655  002C18  0012               	return		;funcret
 12656  002C1A                     __end_of_escreve_caractere_lcd:
 12657                           	opt stack 0
 12658                           tosu	equ	0xFFF
 12659                           tosh	equ	0xFFE
 12660                           tosl	equ	0xFFD
 12661                           pclath	equ	0xFFA
 12662                           tblptru	equ	0xFF8
 12663                           tblptrh	equ	0xFF7
 12664                           tblptrl	equ	0xFF6
 12665                           tablat	equ	0xFF5
 12666                           prodh	equ	0xFF4
 12667                           prodl	equ	0xFF3
 12668                           intcon	equ	0xFF2
 12669                           intcon2	equ	0xFF1
 12670                           intcon3	equ	0xFF0
 12671                           indf0	equ	0xFEF
 12672                           postinc0	equ	0xFEE
 12673                           fsr0h	equ	0xFEA
 12674                           fsr0l	equ	0xFE9
 12675                           wreg	equ	0xFE8
 12676                           indf1	equ	0xFE7
 12677                           postinc1	equ	0xFE6
 12678                           postdec1	equ	0xFE5
 12679                           fsr1h	equ	0xFE2
 12680                           fsr1l	equ	0xFE1
 12681                           indf2	equ	0xFDF
 12682                           postinc2	equ	0xFDE
 12683                           postdec2	equ	0xFDD
 12684                           plusw2	equ	0xFDB
 12685                           fsr2h	equ	0xFDA
 12686                           fsr2l	equ	0xFD9
 12687                           status	equ	0xFD8
 12688                           
 12689 ;; *************** function _delay *****************
 12690 ;; Defined at:
 12691 ;;		line 45 in file "bibliotecas/display/display_lcd.c"
 12692 ;; Parameters:    Size  Location     Type
 12693 ;;		None
 12694 ;; Auto vars:     Size  Location     Type
 12695 ;;  contador_int    1   26[COMRAM] unsigned char 
 12696 ;;  contador_ext    1   25[COMRAM] unsigned char 
 12697 ;; Return value:  Size  Location     Type
 12698 ;;                  1    wreg      void 
 12699 ;; Registers used:
 12700 ;;		wreg, status,2, status,0
 12701 ;; Tracked objects:
 12702 ;;		On entry : 0/0
 12703 ;;		On exit  : 0/0
 12704 ;;		Unchanged: 0/0
 12705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12706 ;;      Params:         0       0       0       0       0       0       0       0       0
 12707 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12708 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12709 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12710 ;;Total ram usage:        2 bytes
 12711 ;; Hardware stack levels used:    1
 12712 ;; Hardware stack levels required when called:    2
 12713 ;; This function calls:
 12714 ;;		Nothing
 12715 ;; This function is called by:
 12716 ;;		_init_lcd
 12717 ;;		_escreve_cmd_lcd
 12718 ;;		_endereco_cursor_lcd
 12719 ;;		_escreve_caractere_lcd
 12720 ;; This function uses a non-reentrant model
 12721 ;;
 12722                           
 12723                           	psect	text51
 12724  0030A8                     __ptext51:
 12725                           	opt stack 0
 12726  0030A8                     _delay:
 12727                           	opt stack 25
 12728                           
 12729                           ;display_lcd.c: 47: unsigned char contador_ext, contador_int;
 12730                           ;display_lcd.c: 49: for(contador_ext = 0; contador_ext<100; contador_ext++)
 12731                           
 12732                           ;incstack = 0
 12733  0030A8  0E00               	movlw	0
 12734  0030AA  6E1A               	movwf	delay@contador_ext,c
 12735  0030AC                     l5922:
 12736  0030AC  0E63               	movlw	99
 12737  0030AE  641A               	cpfsgt	delay@contador_ext,c
 12738  0030B0  D001               	goto	l567
 12739  0030B2  0012               	return	
 12740  0030B4                     l567:
 12741                           
 12742                           ;display_lcd.c: 50: {
 12743                           ;display_lcd.c: 51: __nop();
 12744  0030B4  F000               	nop	
 12745                           
 12746                           ;display_lcd.c: 52: for(contador_int = 0; contador_int<50; contador_int++)
 12747  0030B6  0E00               	movlw	0
 12748  0030B8  6E1B               	movwf	delay@contador_int,c
 12749  0030BA                     l5928:
 12750  0030BA  0E31               	movlw	49
 12751  0030BC  641B               	cpfsgt	delay@contador_int,c
 12752  0030BE  D001               	goto	l569
 12753  0030C0  D003               	goto	u6340
 12754  0030C2                     l569:
 12755                           
 12756                           ;display_lcd.c: 53: {
 12757                           ;display_lcd.c: 54: __nop();
 12758  0030C2  F000               	nop	
 12759  0030C4  2A1B               	incf	delay@contador_int,f,c
 12760  0030C6  D7F9               	goto	l5928
 12761  0030C8                     u6340:
 12762  0030C8  2A1A               	incf	delay@contador_ext,f,c
 12763  0030CA  D7F0               	goto	l5922
 12764  0030CC                     __end_of_delay:
 12765                           	opt stack 0
 12766                           tosu	equ	0xFFF
 12767                           tosh	equ	0xFFE
 12768                           tosl	equ	0xFFD
 12769                           pclath	equ	0xFFA
 12770                           tblptru	equ	0xFF8
 12771                           tblptrh	equ	0xFF7
 12772                           tblptrl	equ	0xFF6
 12773                           tablat	equ	0xFF5
 12774                           prodh	equ	0xFF4
 12775                           prodl	equ	0xFF3
 12776                           intcon	equ	0xFF2
 12777                           intcon2	equ	0xFF1
 12778                           intcon3	equ	0xFF0
 12779                           indf0	equ	0xFEF
 12780                           postinc0	equ	0xFEE
 12781                           fsr0h	equ	0xFEA
 12782                           fsr0l	equ	0xFE9
 12783                           wreg	equ	0xFE8
 12784                           indf1	equ	0xFE7
 12785                           postinc1	equ	0xFE6
 12786                           postdec1	equ	0xFE5
 12787                           fsr1h	equ	0xFE2
 12788                           fsr1l	equ	0xFE1
 12789                           indf2	equ	0xFDF
 12790                           postinc2	equ	0xFDE
 12791                           postdec2	equ	0xFDD
 12792                           plusw2	equ	0xFDB
 12793                           fsr2h	equ	0xFDA
 12794                           fsr2l	equ	0xFD9
 12795                           status	equ	0xFD8
 12796                           
 12797 ;; *************** function _WriteSPI_ *****************
 12798 ;; Defined at:
 12799 ;;		line 130 in file "bibliotecas/SPI.c"
 12800 ;; Parameters:    Size  Location     Type
 12801 ;;  dado            1    wreg     unsigned char 
 12802 ;; Auto vars:     Size  Location     Type
 12803 ;;  dado            1   31[COMRAM] unsigned char 
 12804 ;;  TempVar         1   30[COMRAM] unsigned char 
 12805 ;; Return value:  Size  Location     Type
 12806 ;;                  1    wreg      unsigned char 
 12807 ;; Registers used:
 12808 ;;		wreg, status,2, status,0, cstack
 12809 ;; Tracked objects:
 12810 ;;		On entry : 0/0
 12811 ;;		On exit  : 0/0
 12812 ;;		Unchanged: 0/0
 12813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12814 ;;      Params:         0       0       0       0       0       0       0       0       0
 12815 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12816 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12817 ;;      Totals:         4       0       0       0       0       0       0       0       0
 12818 ;;Total ram usage:        4 bytes
 12819 ;; Hardware stack levels used:    1
 12820 ;; Hardware stack levels required when called:    4
 12821 ;; This function calls:
 12822 ;;		_controle_shrc
 12823 ;;		_shrc_seta_bit
 12824 ;; This function is called by:
 12825 ;;		_dummy_clocks
 12826 ;;		_proceed
 12827 ;;		_command
 12828 ;;		_disk_writep
 12829 ;; This function uses a non-reentrant model
 12830 ;;
 12831                           
 12832                           	psect	text52
 12833  002FB0                     __ptext52:
 12834                           	opt stack 0
 12835  002FB0                     _WriteSPI_:
 12836                           	opt stack 23
 12837                           
 12838                           ;incstack = 0
 12839                           ;WriteSPI_@dado stored from wreg
 12840  002FB0  6E20               	movwf	WriteSPI_@dado,c
 12841                           
 12842                           ;SPI.c: 132: unsigned char TempVar;
 12843                           ;SPI.c: 134: TempVar = SSPBUF;
 12844  002FB2  CFC9 F01F          	movff	4041,WriteSPI_@TempVar	;volatile
 12845                           
 12846                           ;SPI.c: 135: PIR1bits.SSPIF = 0;
 12847  002FB6  969E               	bcf	3998,3,c	;volatile
 12848                           
 12849                           ;SPI.c: 136: SSPCON1bits.WCOL = 0;
 12850  002FB8  9EC6               	bcf	4038,7,c	;volatile
 12851                           
 12852                           ;SPI.c: 138: SSPBUF = dado;
 12853  002FBA  C020  FFC9         	movff	WriteSPI_@dado,4041	;volatile
 12854                           
 12855                           ;SPI.c: 139: if (SSPCON1 & 0x80 )
 12856  002FBE  BEC6               	btfsc	4038,7,c	;volatile
 12857  002FC0  0012               	return	
 12858  002FC2  D011               	goto	l107
 12859  002FC4                     
 12860                           ;SPI.c: 148: shrc_seta_bit(2);
 12861  002FC4  0E02               	movlw	2
 12862  002FC6  EC97  F018         	call	_shrc_seta_bit
 12863                           
 12864                           ;SPI.c: 149: controle_shrc();
 12865  002FCA  EC26  F019         	call	_controle_shrc	;wreg free
 12866                           
 12867                           ;SPI.c: 150: _delay((unsigned long)((1000)*(20000000/4000.0)));
 12868  002FCE  0E1A               	movlw	26
 12869  002FD0  6E1E               	movwf	(??_WriteSPI_+1)& (0+255),c
 12870  002FD2  0E5E               	movlw	94
 12871  002FD4  6E1D               	movwf	??_WriteSPI_& (0+255),c
 12872  002FD6  0E6E               	movlw	110
 12873  002FD8                     u9317:
 12874  002FD8  2EE8               	decfsz	wreg,f,c
 12875  002FDA  D7FE               	bra	u9317
 12876  002FDC  2E1D               	decfsz	??_WriteSPI_& (0+255),f,c
 12877  002FDE  D7FC               	bra	u9317
 12878  002FE0  2E1E               	decfsz	(??_WriteSPI_+1)& (0+255),f,c
 12879  002FE2  D7FA               	bra	u9317
 12880  002FE4  D000               	nop2	
 12881  002FE6                     l107:
 12882  002FE6  B69E               	btfsc	3998,3,c	;volatile
 12883  002FE8  0012               	return	
 12884  002FEA  D7EC               	goto	l108
 12885  002FEC                     __end_of_WriteSPI_:
 12886                           	opt stack 0
 12887                           tosu	equ	0xFFF
 12888                           tosh	equ	0xFFE
 12889                           tosl	equ	0xFFD
 12890                           pclath	equ	0xFFA
 12891                           tblptru	equ	0xFF8
 12892                           tblptrh	equ	0xFF7
 12893                           tblptrl	equ	0xFF6
 12894                           tablat	equ	0xFF5
 12895                           prodh	equ	0xFF4
 12896                           prodl	equ	0xFF3
 12897                           intcon	equ	0xFF2
 12898                           intcon2	equ	0xFF1
 12899                           intcon3	equ	0xFF0
 12900                           indf0	equ	0xFEF
 12901                           postinc0	equ	0xFEE
 12902                           fsr0h	equ	0xFEA
 12903                           fsr0l	equ	0xFE9
 12904                           wreg	equ	0xFE8
 12905                           indf1	equ	0xFE7
 12906                           postinc1	equ	0xFE6
 12907                           postdec1	equ	0xFE5
 12908                           fsr1h	equ	0xFE2
 12909                           fsr1l	equ	0xFE1
 12910                           indf2	equ	0xFDF
 12911                           postinc2	equ	0xFDE
 12912                           postdec2	equ	0xFDD
 12913                           plusw2	equ	0xFDB
 12914                           fsr2h	equ	0xFDA
 12915                           fsr2l	equ	0xFD9
 12916                           status	equ	0xFD8
 12917                           
 12918 ;; *************** function _shrc_seta_bit *****************
 12919 ;; Defined at:
 12920 ;;		line 119 in file "bibliotecas/SHRC.c"
 12921 ;; Parameters:    Size  Location     Type
 12922 ;;  posicao_bit     1    wreg     unsigned char 
 12923 ;; Auto vars:     Size  Location     Type
 12924 ;;  posicao_bit     1   27[COMRAM] unsigned char 
 12925 ;; Return value:  Size  Location     Type
 12926 ;;                  1    wreg      void 
 12927 ;; Registers used:
 12928 ;;		wreg, status,2, status,0
 12929 ;; Tracked objects:
 12930 ;;		On entry : 0/0
 12931 ;;		On exit  : 0/0
 12932 ;;		Unchanged: 0/0
 12933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12934 ;;      Params:         0       0       0       0       0       0       0       0       0
 12935 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12936 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12937 ;;      Totals:         3       0       0       0       0       0       0       0       0
 12938 ;;Total ram usage:        3 bytes
 12939 ;; Hardware stack levels used:    1
 12940 ;; Hardware stack levels required when called:    2
 12941 ;; This function calls:
 12942 ;;		Nothing
 12943 ;; This function is called by:
 12944 ;;		_WriteSPI_
 12945 ;;		_acende_led4
 12946 ;;		_timer_dois
 12947 ;; This function uses a non-reentrant model
 12948 ;;
 12949                           
 12950                           	psect	text53
 12951  00312E                     __ptext53:
 12952                           	opt stack 0
 12953  00312E                     _shrc_seta_bit:
 12954                           	opt stack 26
 12955                           
 12956                           ;incstack = 0
 12957                           ;shrc_seta_bit@posicao_bit stored from wreg
 12958  00312E  6E1C               	movwf	shrc_seta_bit@posicao_bit,c
 12959                           
 12960                           ;SHRC.c: 121: dado |= (1<<posicao_bit);
 12961  003130  C01C  F01A         	movff	shrc_seta_bit@posicao_bit,??_shrc_seta_bit
 12962  003134  0E01               	movlw	1
 12963  003136  6E1B               	movwf	(??_shrc_seta_bit+1)& (0+255),c
 12964  003138  2A1A               	incf	??_shrc_seta_bit,f,c
 12965  00313A  D002               	goto	u6364
 12966  00313C                     u6365:
 12967  00313C  90D8               	bcf	status,0,c
 12968  00313E  361B               	rlcf	??_shrc_seta_bit+1,f,c
 12969  003140                     u6364:
 12970  003140  2E1A               	decfsz	??_shrc_seta_bit,f,c
 12971  003142  D7FC               	goto	u6365
 12972  003144  501B               	movf	??_shrc_seta_bit+1,w,c
 12973  003146  1245               	iorwf	_dado,f,c
 12974  003148  0012               	return		;funcret
 12975  00314A                     __end_of_shrc_seta_bit:
 12976                           	opt stack 0
 12977                           tosu	equ	0xFFF
 12978                           tosh	equ	0xFFE
 12979                           tosl	equ	0xFFD
 12980                           pclath	equ	0xFFA
 12981                           tblptru	equ	0xFF8
 12982                           tblptrh	equ	0xFF7
 12983                           tblptrl	equ	0xFF6
 12984                           tablat	equ	0xFF5
 12985                           prodh	equ	0xFF4
 12986                           prodl	equ	0xFF3
 12987                           intcon	equ	0xFF2
 12988                           intcon2	equ	0xFF1
 12989                           intcon3	equ	0xFF0
 12990                           indf0	equ	0xFEF
 12991                           postinc0	equ	0xFEE
 12992                           fsr0h	equ	0xFEA
 12993                           fsr0l	equ	0xFE9
 12994                           wreg	equ	0xFE8
 12995                           indf1	equ	0xFE7
 12996                           postinc1	equ	0xFE6
 12997                           postdec1	equ	0xFE5
 12998                           fsr1h	equ	0xFE2
 12999                           fsr1l	equ	0xFE1
 13000                           indf2	equ	0xFDF
 13001                           postinc2	equ	0xFDE
 13002                           postdec2	equ	0xFDD
 13003                           plusw2	equ	0xFDB
 13004                           fsr2h	equ	0xFDA
 13005                           fsr2l	equ	0xFD9
 13006                           status	equ	0xFD8
 13007                           
 13008 ;; *************** function _controle_shrc *****************
 13009 ;; Defined at:
 13010 ;;		line 112 in file "bibliotecas/SHRC.c"
 13011 ;; Parameters:    Size  Location     Type
 13012 ;;		None
 13013 ;; Auto vars:     Size  Location     Type
 13014 ;;		None
 13015 ;; Return value:  Size  Location     Type
 13016 ;;                  1    wreg      void 
 13017 ;; Registers used:
 13018 ;;		wreg, status,2, status,0, cstack
 13019 ;; Tracked objects:
 13020 ;;		On entry : 0/0
 13021 ;;		On exit  : 0/0
 13022 ;;		Unchanged: 0/0
 13023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13024 ;;      Params:         0       0       0       0       0       0       0       0       0
 13025 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13026 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13027 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13028 ;;Total ram usage:        0 bytes
 13029 ;; Hardware stack levels used:    1
 13030 ;; Hardware stack levels required when called:    3
 13031 ;; This function calls:
 13032 ;;		_ativa_latch_shrc
 13033 ;;		_envia_dados_shrc
 13034 ;; This function is called by:
 13035 ;;		_WriteSPI_
 13036 ;;		_main
 13037 ;;		_timer_dois
 13038 ;; This function uses a non-reentrant model
 13039 ;;
 13040                           
 13041                           	psect	text54
 13042  00324C                     __ptext54:
 13043                           	opt stack 0
 13044  00324C                     _controle_shrc:
 13045                           	opt stack 23
 13046                           
 13047                           ;SHRC.c: 115: envia_dados_shrc(dado);
 13048                           
 13049                           ;incstack = 0
 13050  00324C  5045               	movf	_dado,w,c
 13051  00324E  ECB6  F017         	call	_envia_dados_shrc
 13052                           
 13053                           ;SHRC.c: 116: ativa_latch_shrc();
 13054  003252  ECE5  F018         	call	_ativa_latch_shrc	;wreg free
 13055  003256  0012               	return		;funcret
 13056  003258                     __end_of_controle_shrc:
 13057                           	opt stack 0
 13058                           tosu	equ	0xFFF
 13059                           tosh	equ	0xFFE
 13060                           tosl	equ	0xFFD
 13061                           pclath	equ	0xFFA
 13062                           tblptru	equ	0xFF8
 13063                           tblptrh	equ	0xFF7
 13064                           tblptrl	equ	0xFF6
 13065                           tablat	equ	0xFF5
 13066                           prodh	equ	0xFF4
 13067                           prodl	equ	0xFF3
 13068                           intcon	equ	0xFF2
 13069                           intcon2	equ	0xFF1
 13070                           intcon3	equ	0xFF0
 13071                           indf0	equ	0xFEF
 13072                           postinc0	equ	0xFEE
 13073                           fsr0h	equ	0xFEA
 13074                           fsr0l	equ	0xFE9
 13075                           wreg	equ	0xFE8
 13076                           indf1	equ	0xFE7
 13077                           postinc1	equ	0xFE6
 13078                           postdec1	equ	0xFE5
 13079                           fsr1h	equ	0xFE2
 13080                           fsr1l	equ	0xFE1
 13081                           indf2	equ	0xFDF
 13082                           postinc2	equ	0xFDE
 13083                           postdec2	equ	0xFDD
 13084                           plusw2	equ	0xFDB
 13085                           fsr2h	equ	0xFDA
 13086                           fsr2l	equ	0xFD9
 13087                           status	equ	0xFD8
 13088                           
 13089 ;; *************** function _envia_dados_shrc *****************
 13090 ;; Defined at:
 13091 ;;		line 62 in file "bibliotecas/SHRC.c"
 13092 ;; Parameters:    Size  Location     Type
 13093 ;;  data_to_shrc    1    wreg     unsigned char 
 13094 ;; Auto vars:     Size  Location     Type
 13095 ;;  data_to_shrc    1   26[COMRAM] unsigned char 
 13096 ;;  contador        1   25[COMRAM] unsigned char 
 13097 ;; Return value:  Size  Location     Type
 13098 ;;                  1    wreg      void 
 13099 ;; Registers used:
 13100 ;;		wreg, status,2, status,0
 13101 ;; Tracked objects:
 13102 ;;		On entry : 0/0
 13103 ;;		On exit  : 0/0
 13104 ;;		Unchanged: 0/0
 13105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13106 ;;      Params:         0       0       0       0       0       0       0       0       0
 13107 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13108 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13109 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13110 ;;Total ram usage:        2 bytes
 13111 ;; Hardware stack levels used:    1
 13112 ;; Hardware stack levels required when called:    2
 13113 ;; This function calls:
 13114 ;;		Nothing
 13115 ;; This function is called by:
 13116 ;;		_controle_shrc
 13117 ;; This function uses a non-reentrant model
 13118 ;;
 13119                           
 13120                           	psect	text55
 13121  002F6C                     __ptext55:
 13122                           	opt stack 0
 13123  002F6C                     _envia_dados_shrc:
 13124                           	opt stack 23
 13125                           
 13126                           ;incstack = 0
 13127                           ;envia_dados_shrc@data_to_shrc stored from wreg
 13128  002F6C  6E1B               	movwf	envia_dados_shrc@data_to_shrc,c
 13129                           
 13130                           ;SHRC.c: 64: unsigned char contador=0;
 13131  002F6E  0E00               	movlw	0
 13132  002F70  6E1A               	movwf	envia_dados_shrc@contador,c
 13133                           
 13134                           ;SHRC.c: 65: (INTCONbits.GIE = 0);
 13135  002F72  9EF2               	bcf	intcon,7,c	;volatile
 13136                           
 13137                           ;SHRC.c: 67: while(contador<=7)
 13138  002F74  D018               	goto	l41
 13139  002F76                     
 13140                           ;SHRC.c: 68: {
 13141                           ;SHRC.c: 69: if((data_to_shrc & 0x80) == 0)
 13142  002F76  BE1B               	btfsc	envia_dados_shrc@data_to_shrc,7,c
 13143  002F78  D002               	goto	l43
 13144                           
 13145                           ;SHRC.c: 70: {
 13146                           ;SHRC.c: 71: LATBbits.LATB7 = 0;
 13147  002F7A  9E8A               	bcf	3978,7,c	;volatile
 13148                           
 13149                           ;SHRC.c: 72: }
 13150  002F7C  D001               	goto	l44
 13151  002F7E                     l43:
 13152                           
 13153                           ;SHRC.c: 73: else
 13154                           ;SHRC.c: 74: {
 13155                           ;SHRC.c: 75: LATBbits.LATB7 = 1;
 13156  002F7E  8E8A               	bsf	3978,7,c	;volatile
 13157  002F80                     l44:
 13158                           
 13159                           ;SHRC.c: 76: }
 13160                           ;SHRC.c: 77: data_to_shrc = data_to_shrc << 1;
 13161  002F80  501B               	movf	envia_dados_shrc@data_to_shrc,w,c
 13162  002F82  241B               	addwf	envia_dados_shrc@data_to_shrc,w,c
 13163  002F84  6E1B               	movwf	envia_dados_shrc@data_to_shrc,c
 13164                           
 13165                           ;SHRC.c: 78: _delay((unsigned long)((30)*(20000000/4000000.0)));
 13166  002F86  0E32               	movlw	50
 13167  002F88                     u9327:
 13168  002F88  2EE8               	decfsz	wreg,f,c
 13169  002F8A  D7FE               	bra	u9327
 13170                           
 13171                           ;SHRC.c: 79: LATBbits.LATB6 = 1;
 13172  002F8C  8C8A               	bsf	3978,6,c	;volatile
 13173                           
 13174                           ;SHRC.c: 80: _delay((unsigned long)((30)*(20000000/4000000.0)));
 13175  002F8E  0E32               	movlw	50
 13176  002F90                     u9337:
 13177  002F90  2EE8               	decfsz	wreg,f,c
 13178  002F92  D7FE               	bra	u9337
 13179                           
 13180                           ;SHRC.c: 81: LATBbits.LATB7 = 0;
 13181  002F94  9E8A               	bcf	3978,7,c	;volatile
 13182                           
 13183                           ;SHRC.c: 82: _delay((unsigned long)((30)*(20000000/4000000.0)));
 13184  002F96  0E32               	movlw	50
 13185  002F98                     u9347:
 13186  002F98  2EE8               	decfsz	wreg,f,c
 13187  002F9A  D7FE               	bra	u9347
 13188                           
 13189                           ;SHRC.c: 83: LATBbits.LATB6 = 0;
 13190  002F9C  9C8A               	bcf	3978,6,c	;volatile
 13191                           
 13192                           ;SHRC.c: 84: _delay((unsigned long)((30)*(20000000/4000000.0)));
 13193  002F9E  0E32               	movlw	50
 13194  002FA0                     u9357:
 13195  002FA0  2EE8               	decfsz	wreg,f,c
 13196  002FA2  D7FE               	bra	u9357
 13197                           
 13198                           ;SHRC.c: 85: contador++;
 13199  002FA4  2A1A               	incf	envia_dados_shrc@contador,f,c
 13200  002FA6                     l41:
 13201  002FA6  0E07               	movlw	7
 13202  002FA8  641A               	cpfsgt	envia_dados_shrc@contador,c
 13203  002FAA  D7E5               	goto	l42
 13204                           
 13205                           ;SHRC.c: 86: }
 13206                           ;SHRC.c: 87: (INTCONbits.GIE = 1);
 13207  002FAC  8EF2               	bsf	intcon,7,c	;volatile
 13208  002FAE  0012               	return		;funcret
 13209  002FB0                     __end_of_envia_dados_shrc:
 13210                           	opt stack 0
 13211                           tosu	equ	0xFFF
 13212                           tosh	equ	0xFFE
 13213                           tosl	equ	0xFFD
 13214                           pclath	equ	0xFFA
 13215                           tblptru	equ	0xFF8
 13216                           tblptrh	equ	0xFF7
 13217                           tblptrl	equ	0xFF6
 13218                           tablat	equ	0xFF5
 13219                           prodh	equ	0xFF4
 13220                           prodl	equ	0xFF3
 13221                           intcon	equ	0xFF2
 13222                           intcon2	equ	0xFF1
 13223                           intcon3	equ	0xFF0
 13224                           indf0	equ	0xFEF
 13225                           postinc0	equ	0xFEE
 13226                           fsr0h	equ	0xFEA
 13227                           fsr0l	equ	0xFE9
 13228                           wreg	equ	0xFE8
 13229                           indf1	equ	0xFE7
 13230                           postinc1	equ	0xFE6
 13231                           postdec1	equ	0xFE5
 13232                           fsr1h	equ	0xFE2
 13233                           fsr1l	equ	0xFE1
 13234                           indf2	equ	0xFDF
 13235                           postinc2	equ	0xFDE
 13236                           postdec2	equ	0xFDD
 13237                           plusw2	equ	0xFDB
 13238                           fsr2h	equ	0xFDA
 13239                           fsr2l	equ	0xFD9
 13240                           status	equ	0xFD8
 13241                           
 13242 ;; *************** function _ativa_latch_shrc *****************
 13243 ;; Defined at:
 13244 ;;		line 96 in file "bibliotecas/SHRC.c"
 13245 ;; Parameters:    Size  Location     Type
 13246 ;;		None
 13247 ;; Auto vars:     Size  Location     Type
 13248 ;;		None
 13249 ;; Return value:  Size  Location     Type
 13250 ;;                  1    wreg      void 
 13251 ;; Registers used:
 13252 ;;		wreg
 13253 ;; Tracked objects:
 13254 ;;		On entry : 0/0
 13255 ;;		On exit  : 0/0
 13256 ;;		Unchanged: 0/0
 13257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13258 ;;      Params:         0       0       0       0       0       0       0       0       0
 13259 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13260 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13261 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13262 ;;Total ram usage:        0 bytes
 13263 ;; Hardware stack levels used:    1
 13264 ;; Hardware stack levels required when called:    2
 13265 ;; This function calls:
 13266 ;;		Nothing
 13267 ;; This function is called by:
 13268 ;;		_controle_shrc
 13269 ;; This function uses a non-reentrant model
 13270 ;;
 13271                           
 13272                           	psect	text56
 13273  0031CA                     __ptext56:
 13274                           	opt stack 0
 13275  0031CA                     _ativa_latch_shrc:
 13276                           	opt stack 23
 13277                           
 13278                           ;SHRC.c: 99: LATBbits.LATB5 = 0;
 13279                           
 13280                           ;incstack = 0
 13281  0031CA  9A8A               	bcf	3978,5,c	;volatile
 13282                           
 13283                           ;SHRC.c: 100: _delay((unsigned long)((30)*(20000000/4000000.0)));
 13284  0031CC  0E32               	movlw	50
 13285  0031CE                     u9367:
 13286  0031CE  2EE8               	decfsz	wreg,f,c
 13287  0031D0  D7FE               	bra	u9367
 13288                           
 13289                           ;SHRC.c: 101: LATBbits.LATB5 = 1;
 13290  0031D2  8A8A               	bsf	3978,5,c	;volatile
 13291                           
 13292                           ;SHRC.c: 102: _delay((unsigned long)((60)*(20000000/4000000.0)));
 13293  0031D4  0E64               	movlw	100
 13294  0031D6                     u9377:
 13295  0031D6  2EE8               	decfsz	wreg,f,c
 13296  0031D8  D7FE               	bra	u9377
 13297                           
 13298                           ;SHRC.c: 103: LATBbits.LATB5 = 0;
 13299  0031DA  9A8A               	bcf	3978,5,c	;volatile
 13300  0031DC  0012               	return		;funcret
 13301  0031DE                     __end_of_ativa_latch_shrc:
 13302                           	opt stack 0
 13303                           tosu	equ	0xFFF
 13304                           tosh	equ	0xFFE
 13305                           tosl	equ	0xFFD
 13306                           pclath	equ	0xFFA
 13307                           tblptru	equ	0xFF8
 13308                           tblptrh	equ	0xFF7
 13309                           tblptrl	equ	0xFF6
 13310                           tablat	equ	0xFF5
 13311                           prodh	equ	0xFF4
 13312                           prodl	equ	0xFF3
 13313                           intcon	equ	0xFF2
 13314                           intcon2	equ	0xFF1
 13315                           intcon3	equ	0xFF0
 13316                           indf0	equ	0xFEF
 13317                           postinc0	equ	0xFEE
 13318                           fsr0h	equ	0xFEA
 13319                           fsr0l	equ	0xFE9
 13320                           wreg	equ	0xFE8
 13321                           indf1	equ	0xFE7
 13322                           postinc1	equ	0xFE6
 13323                           postdec1	equ	0xFE5
 13324                           fsr1h	equ	0xFE2
 13325                           fsr1l	equ	0xFE1
 13326                           indf2	equ	0xFDF
 13327                           postinc2	equ	0xFDE
 13328                           postdec2	equ	0xFDD
 13329                           plusw2	equ	0xFDB
 13330                           fsr2h	equ	0xFDA
 13331                           fsr2l	equ	0xFD9
 13332                           status	equ	0xFD8
 13333                           
 13334 ;; *************** function ___lmul *****************
 13335 ;; Defined at:
 13336 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 13337 ;; Parameters:    Size  Location     Type
 13338 ;;  multiplier      4   25[COMRAM] unsigned long 
 13339 ;;  multiplicand    4   29[COMRAM] unsigned long 
 13340 ;; Auto vars:     Size  Location     Type
 13341 ;;  product         4   33[COMRAM] unsigned long 
 13342 ;; Return value:  Size  Location     Type
 13343 ;;                  4   25[COMRAM] unsigned long 
 13344 ;; Registers used:
 13345 ;;		wreg, status,2, status,0
 13346 ;; Tracked objects:
 13347 ;;		On entry : 0/0
 13348 ;;		On exit  : 0/0
 13349 ;;		Unchanged: 0/0
 13350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13351 ;;      Params:         8       0       0       0       0       0       0       0       0
 13352 ;;      Locals:         4       0       0       0       0       0       0       0       0
 13353 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13354 ;;      Totals:        12       0       0       0       0       0       0       0       0
 13355 ;;Total ram usage:       12 bytes
 13356 ;; Hardware stack levels used:    1
 13357 ;; Hardware stack levels required when called:    2
 13358 ;; This function calls:
 13359 ;;		Nothing
 13360 ;; This function is called by:
 13361 ;;		_clust2sect
 13362 ;;		_pf_mount
 13363 ;; This function uses a non-reentrant model
 13364 ;;
 13365                           
 13366                           	psect	text57
 13367  002E2C                     __ptext57:
 13368                           	opt stack 0
 13369  002E2C                     ___lmul:
 13370                           	opt stack 24
 13371                           
 13372                           ;incstack = 0
 13373  002E2C  0E00               	movlw	0
 13374  002E2E  6E22               	movwf	___lmul@product,c
 13375  002E30  0E00               	movlw	0
 13376  002E32  6E23               	movwf	___lmul@product+1,c
 13377  002E34  0E00               	movlw	0
 13378  002E36  6E24               	movwf	___lmul@product+2,c
 13379  002E38  0E00               	movlw	0
 13380  002E3A  6E25               	movwf	___lmul@product+3,c
 13381  002E3C  A01A               	btfss	___lmul@multiplier,0,c
 13382  002E3E  D008               	goto	l1075
 13383  002E40  501E               	movf	___lmul@multiplicand,w,c
 13384  002E42  2622               	addwf	___lmul@product,f,c
 13385  002E44  501F               	movf	___lmul@multiplicand+1,w,c
 13386  002E46  2223               	addwfc	___lmul@product+1,f,c
 13387  002E48  5020               	movf	___lmul@multiplicand+2,w,c
 13388  002E4A  2224               	addwfc	___lmul@product+2,f,c
 13389  002E4C  5021               	movf	___lmul@multiplicand+3,w,c
 13390  002E4E  2225               	addwfc	___lmul@product+3,f,c
 13391  002E50                     l1075:
 13392  002E50  90D8               	bcf	status,0,c
 13393  002E52  361E               	rlcf	___lmul@multiplicand,f,c
 13394  002E54  361F               	rlcf	___lmul@multiplicand+1,f,c
 13395  002E56  3620               	rlcf	___lmul@multiplicand+2,f,c
 13396  002E58  3621               	rlcf	___lmul@multiplicand+3,f,c
 13397  002E5A  90D8               	bcf	status,0,c
 13398  002E5C  321D               	rrcf	___lmul@multiplier+3,f,c
 13399  002E5E  321C               	rrcf	___lmul@multiplier+2,f,c
 13400  002E60  321B               	rrcf	___lmul@multiplier+1,f,c
 13401  002E62  321A               	rrcf	___lmul@multiplier,f,c
 13402  002E64  501A               	movf	___lmul@multiplier,w,c
 13403  002E66  101B               	iorwf	___lmul@multiplier+1,w,c
 13404  002E68  101C               	iorwf	___lmul@multiplier+2,w,c
 13405  002E6A  101D               	iorwf	___lmul@multiplier+3,w,c
 13406  002E6C  A4D8               	btfss	status,2,c
 13407  002E6E  D7E6               	goto	l1074
 13408  002E70  C022  F01A         	movff	___lmul@product,?___lmul
 13409  002E74  C023  F01B         	movff	___lmul@product+1,?___lmul+1
 13410  002E78  C024  F01C         	movff	___lmul@product+2,?___lmul+2
 13411  002E7C  C025  F01D         	movff	___lmul@product+3,?___lmul+3
 13412  002E80  0012               	return		;funcret
 13413  002E82                     __end_of___lmul:
 13414                           	opt stack 0
 13415                           tosu	equ	0xFFF
 13416                           tosh	equ	0xFFE
 13417                           tosl	equ	0xFFD
 13418                           pclath	equ	0xFFA
 13419                           tblptru	equ	0xFF8
 13420                           tblptrh	equ	0xFF7
 13421                           tblptrl	equ	0xFF6
 13422                           tablat	equ	0xFF5
 13423                           prodh	equ	0xFF4
 13424                           prodl	equ	0xFF3
 13425                           intcon	equ	0xFF2
 13426                           intcon2	equ	0xFF1
 13427                           intcon3	equ	0xFF0
 13428                           indf0	equ	0xFEF
 13429                           postinc0	equ	0xFEE
 13430                           fsr0h	equ	0xFEA
 13431                           fsr0l	equ	0xFE9
 13432                           wreg	equ	0xFE8
 13433                           indf1	equ	0xFE7
 13434                           postinc1	equ	0xFE6
 13435                           postdec1	equ	0xFE5
 13436                           fsr1h	equ	0xFE2
 13437                           fsr1l	equ	0xFE1
 13438                           indf2	equ	0xFDF
 13439                           postinc2	equ	0xFDE
 13440                           postdec2	equ	0xFDD
 13441                           plusw2	equ	0xFDB
 13442                           fsr2h	equ	0xFDA
 13443                           fsr2l	equ	0xFD9
 13444                           status	equ	0xFD8
 13445                           
 13446 ;; *************** function ___lldiv *****************
 13447 ;; Defined at:
 13448 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 13449 ;; Parameters:    Size  Location     Type
 13450 ;;  dividend        4   25[COMRAM] unsigned long 
 13451 ;;  divisor         4   29[COMRAM] unsigned long 
 13452 ;; Auto vars:     Size  Location     Type
 13453 ;;  quotient        4   33[COMRAM] unsigned long 
 13454 ;;  counter         1   37[COMRAM] unsigned char 
 13455 ;; Return value:  Size  Location     Type
 13456 ;;                  4   25[COMRAM] unsigned long 
 13457 ;; Registers used:
 13458 ;;		wreg, status,2, status,0
 13459 ;; Tracked objects:
 13460 ;;		On entry : 0/0
 13461 ;;		On exit  : 0/0
 13462 ;;		Unchanged: 0/0
 13463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13464 ;;      Params:         8       0       0       0       0       0       0       0       0
 13465 ;;      Locals:         5       0       0       0       0       0       0       0       0
 13466 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13467 ;;      Totals:        13       0       0       0       0       0       0       0       0
 13468 ;;Total ram usage:       13 bytes
 13469 ;; Hardware stack levels used:    1
 13470 ;; Hardware stack levels required when called:    2
 13471 ;; This function calls:
 13472 ;;		Nothing
 13473 ;; This function is called by:
 13474 ;;		_pf_mount
 13475 ;;		_pf_lseek
 13476 ;; This function uses a non-reentrant model
 13477 ;;
 13478                           
 13479                           	psect	text58
 13480  002AAA                     __ptext58:
 13481                           	opt stack 0
 13482  002AAA                     ___lldiv:
 13483                           	opt stack 25
 13484                           
 13485                           ;incstack = 0
 13486  002AAA  0E00               	movlw	0
 13487  002AAC  6E22               	movwf	___lldiv@quotient,c
 13488  002AAE  0E00               	movlw	0
 13489  002AB0  6E23               	movwf	___lldiv@quotient+1,c
 13490  002AB2  0E00               	movlw	0
 13491  002AB4  6E24               	movwf	___lldiv@quotient+2,c
 13492  002AB6  0E00               	movlw	0
 13493  002AB8  6E25               	movwf	___lldiv@quotient+3,c
 13494  002ABA  501E               	movf	___lldiv@divisor,w,c
 13495  002ABC  101F               	iorwf	___lldiv@divisor+1,w,c
 13496  002ABE  1020               	iorwf	___lldiv@divisor+2,w,c
 13497  002AC0  1021               	iorwf	___lldiv@divisor+3,w,c
 13498  002AC2  B4D8               	btfsc	status,2,c
 13499  002AC4  D02A               	goto	l1436
 13500  002AC6  0E01               	movlw	1
 13501  002AC8  6E26               	movwf	___lldiv@counter,c
 13502  002ACA  D006               	goto	l1431
 13503  002ACC  90D8               	bcf	status,0,c
 13504  002ACE  361E               	rlcf	___lldiv@divisor,f,c
 13505  002AD0  361F               	rlcf	___lldiv@divisor+1,f,c
 13506  002AD2  3620               	rlcf	___lldiv@divisor+2,f,c
 13507  002AD4  3621               	rlcf	___lldiv@divisor+3,f,c
 13508  002AD6  2A26               	incf	___lldiv@counter,f,c
 13509  002AD8                     l1431:
 13510  002AD8  AE21               	btfss	___lldiv@divisor+3,7,c
 13511  002ADA  D7F8               	goto	l1432
 13512  002ADC                     u4660:
 13513  002ADC  90D8               	bcf	status,0,c
 13514  002ADE  3622               	rlcf	___lldiv@quotient,f,c
 13515  002AE0  3623               	rlcf	___lldiv@quotient+1,f,c
 13516  002AE2  3624               	rlcf	___lldiv@quotient+2,f,c
 13517  002AE4  3625               	rlcf	___lldiv@quotient+3,f,c
 13518  002AE6  501E               	movf	___lldiv@divisor,w,c
 13519  002AE8  5C1A               	subwf	___lldiv@dividend,w,c
 13520  002AEA  501F               	movf	___lldiv@divisor+1,w,c
 13521  002AEC  581B               	subwfb	___lldiv@dividend+1,w,c
 13522  002AEE  5020               	movf	___lldiv@divisor+2,w,c
 13523  002AF0  581C               	subwfb	___lldiv@dividend+2,w,c
 13524  002AF2  5021               	movf	___lldiv@divisor+3,w,c
 13525  002AF4  581D               	subwfb	___lldiv@dividend+3,w,c
 13526  002AF6  A0D8               	btfss	status,0,c
 13527  002AF8  D009               	goto	l1435
 13528  002AFA  501E               	movf	___lldiv@divisor,w,c
 13529  002AFC  5E1A               	subwf	___lldiv@dividend,f,c
 13530  002AFE  501F               	movf	___lldiv@divisor+1,w,c
 13531  002B00  5A1B               	subwfb	___lldiv@dividend+1,f,c
 13532  002B02  5020               	movf	___lldiv@divisor+2,w,c
 13533  002B04  5A1C               	subwfb	___lldiv@dividend+2,f,c
 13534  002B06  5021               	movf	___lldiv@divisor+3,w,c
 13535  002B08  5A1D               	subwfb	___lldiv@dividend+3,f,c
 13536  002B0A  8022               	bsf	___lldiv@quotient,0,c
 13537  002B0C                     l1435:
 13538  002B0C  90D8               	bcf	status,0,c
 13539  002B0E  3221               	rrcf	___lldiv@divisor+3,f,c
 13540  002B10  3220               	rrcf	___lldiv@divisor+2,f,c
 13541  002B12  321F               	rrcf	___lldiv@divisor+1,f,c
 13542  002B14  321E               	rrcf	___lldiv@divisor,f,c
 13543  002B16  2E26               	decfsz	___lldiv@counter,f,c
 13544  002B18  D7E1               	goto	u4660
 13545  002B1A                     l1436:
 13546  002B1A  C022  F01A         	movff	___lldiv@quotient,?___lldiv
 13547  002B1E  C023  F01B         	movff	___lldiv@quotient+1,?___lldiv+1
 13548  002B22  C024  F01C         	movff	___lldiv@quotient+2,?___lldiv+2
 13549  002B26  C025  F01D         	movff	___lldiv@quotient+3,?___lldiv+3
 13550  002B2A  0012               	return		;funcret
 13551  002B2C                     __end_of___lldiv:
 13552                           	opt stack 0
 13553                           tosu	equ	0xFFF
 13554                           tosh	equ	0xFFE
 13555                           tosl	equ	0xFFD
 13556                           pclath	equ	0xFFA
 13557                           tblptru	equ	0xFF8
 13558                           tblptrh	equ	0xFF7
 13559                           tblptrl	equ	0xFF6
 13560                           tablat	equ	0xFF5
 13561                           prodh	equ	0xFF4
 13562                           prodl	equ	0xFF3
 13563                           intcon	equ	0xFF2
 13564                           intcon2	equ	0xFF1
 13565                           intcon3	equ	0xFF0
 13566                           indf0	equ	0xFEF
 13567                           postinc0	equ	0xFEE
 13568                           fsr0h	equ	0xFEA
 13569                           fsr0l	equ	0xFE9
 13570                           wreg	equ	0xFE8
 13571                           indf1	equ	0xFE7
 13572                           postinc1	equ	0xFE6
 13573                           postdec1	equ	0xFE5
 13574                           fsr1h	equ	0xFE2
 13575                           fsr1l	equ	0xFE1
 13576                           indf2	equ	0xFDF
 13577                           postinc2	equ	0xFDE
 13578                           postdec2	equ	0xFDD
 13579                           plusw2	equ	0xFDB
 13580                           fsr2h	equ	0xFDA
 13581                           fsr2l	equ	0xFD9
 13582                           status	equ	0xFD8
 13583                           
 13584 ;; *************** function _isr *****************
 13585 ;; Defined at:
 13586 ;;		line 120 in file "main.c"
 13587 ;; Parameters:    Size  Location     Type
 13588 ;;		None
 13589 ;; Auto vars:     Size  Location     Type
 13590 ;;  cont            1   24[COMRAM] unsigned char 
 13591 ;; Return value:  Size  Location     Type
 13592 ;;                  1    wreg      void 
 13593 ;; Registers used:
 13594 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13595 ;; Tracked objects:
 13596 ;;		On entry : 0/0
 13597 ;;		On exit  : 0/0
 13598 ;;		Unchanged: 0/0
 13599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13600 ;;      Params:         0       0       0       0       0       0       0       0       0
 13601 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13602 ;;      Temps:         20       0       0       0       0       0       0       0       0
 13603 ;;      Totals:        21       0       0       0       0       0       0       0       0
 13604 ;;Total ram usage:       21 bytes
 13605 ;; Hardware stack levels used:    1
 13606 ;; Hardware stack levels required when called:    1
 13607 ;; This function calls:
 13608 ;;		_recebe_dado_uart
 13609 ;;		i2_write_timer_zero
 13610 ;; This function is called by:
 13611 ;;		Interrupt level 2
 13612 ;; This function uses a non-reentrant model
 13613 ;;
 13614                           
 13615                           	psect	intcode
 13616  000008                     __pintcode:
 13617                           	opt stack 0
 13618  000008                     _isr:
 13619                           	opt stack 17
 13620                           
 13621                           ;incstack = 0
 13622  000008  8246               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 13623  00000A  ED60  F011         	call	int_func,f	;refresh shadow registers
 13624                           tosu	equ	0xFFF
 13625                           tosh	equ	0xFFE
 13626                           tosl	equ	0xFFD
 13627                           pclath	equ	0xFFA
 13628                           tblptru	equ	0xFF8
 13629                           tblptrh	equ	0xFF7
 13630                           tblptrl	equ	0xFF6
 13631                           tablat	equ	0xFF5
 13632                           prodh	equ	0xFF4
 13633                           prodl	equ	0xFF3
 13634                           intcon	equ	0xFF2
 13635                           intcon2	equ	0xFF1
 13636                           intcon3	equ	0xFF0
 13637                           indf0	equ	0xFEF
 13638                           postinc0	equ	0xFEE
 13639                           fsr0h	equ	0xFEA
 13640                           fsr0l	equ	0xFE9
 13641                           wreg	equ	0xFE8
 13642                           indf1	equ	0xFE7
 13643                           postinc1	equ	0xFE6
 13644                           postdec1	equ	0xFE5
 13645                           fsr1h	equ	0xFE2
 13646                           fsr1l	equ	0xFE1
 13647                           indf2	equ	0xFDF
 13648                           postinc2	equ	0xFDE
 13649                           postdec2	equ	0xFDD
 13650                           plusw2	equ	0xFDB
 13651                           fsr2h	equ	0xFDA
 13652                           fsr2l	equ	0xFD9
 13653                           status	equ	0xFD8
 13654                           
 13655                           	psect	intcode_body
 13656  0022C0                     __pintcode_body:
 13657                           	opt stack 17
 13658  0022C0                     int_func:
 13659                           	opt stack 17
 13660  0022C0  0006               	pop		; remove dummy address from shadow register refresh
 13661  0022C2  CFFA F007          	movff	pclath,??_isr+2
 13662  0022C6  CFFB F008          	movff	pclatu,??_isr+3
 13663  0022CA  CFE9 F009          	movff	fsr0l,??_isr+4
 13664  0022CE  CFEA F00A          	movff	fsr0h,??_isr+5
 13665  0022D2  CFE1 F00B          	movff	fsr1l,??_isr+6
 13666  0022D6  CFE2 F00C          	movff	fsr1h,??_isr+7
 13667  0022DA  CFD9 F00D          	movff	fsr2l,??_isr+8
 13668  0022DE  CFDA F00E          	movff	fsr2h,??_isr+9
 13669  0022E2  CFF3 F00F          	movff	prodl,??_isr+10
 13670  0022E6  CFF4 F010          	movff	prodh,??_isr+11
 13671  0022EA  CFF6 F011          	movff	tblptrl,??_isr+12
 13672  0022EE  CFF7 F012          	movff	tblptrh,??_isr+13
 13673  0022F2  CFF8 F013          	movff	tblptru,??_isr+14
 13674  0022F6  CFF5 F014          	movff	tablat,??_isr+15
 13675  0022FA  C046  F015         	movff	btemp,??_isr+16
 13676  0022FE  C047  F016         	movff	btemp+1,??_isr+17
 13677  002302  C048  F017         	movff	btemp+2,??_isr+18
 13678  002306  C049  F018         	movff	btemp+3,??_isr+19
 13679                           
 13680                           ;main.c: 122: unsigned char cont;
 13681                           ;main.c: 125: if (PIE1bits.RCIE && PIR1bits.RCIF)
 13682  00230A  BA9D               	btfsc	3997,5,c	;volatile
 13683  00230C  AA9E               	btfss	3998,5,c	;volatile
 13684  00230E  D004               	goto	i2l476
 13685                           
 13686                           ;main.c: 126: {
 13687                           ;main.c: 127: data_uart_recebe = recebe_dado_uart();
 13688  002310  EC0A  F019         	call	_recebe_dado_uart	;wreg free
 13689  002314  6E40               	movwf	_data_uart_recebe,c
 13690                           
 13691                           ;main.c: 128: PIR1bits.RCIF = 0;
 13692  002316  9A9E               	bcf	3998,5,c	;volatile
 13693  002318                     i2l476:
 13694                           
 13695                           ;main.c: 129: }
 13696                           ;main.c: 132: unsigned char cont;
 13697                           ;main.c: 134: if (TMR0IF && T0IF)
 13698  002318  B4F2               	btfsc	intcon,2,c	;volatile
 13699  00231A  A4F2               	btfss	intcon,2,c	;volatile
 13700  00231C  D036               	goto	i2l477
 13701                           
 13702                           ;main.c: 135: {
 13703                           ;main.c: 136: INTCONbits.TMR0IF = 0;
 13704  00231E  94F2               	bcf	intcon,2,c	;volatile
 13705                           
 13706                           ;main.c: 137: sinaliza_int_timer = 1;
 13707  002320  0E01               	movlw	1
 13708  002322  6E3F               	movwf	_sinaliza_int_timer,c
 13709                           
 13710                           ;main.c: 139: for(cont= 0; cont<2;cont++)
 13711  002324  0E00               	movlw	0
 13712  002326  6E19               	movwf	isr@cont,c
 13713  002328                     i2l5588:
 13714  002328  0E01               	movlw	1
 13715  00232A  6419               	cpfsgt	isr@cont,c
 13716  00232C  D001               	goto	i2l478
 13717  00232E  D019               	goto	i2u586_40
 13718  002330                     i2l478:
 13719                           
 13720                           ;main.c: 140: {
 13721                           ;main.c: 141: if(tempo_tarefa[cont]>0) tempo_tarefa[cont]--;
 13722  002330  5019               	movf	isr@cont,w,c
 13723  002332  0D02               	mullw	2
 13724  002334  0E2D               	movlw	low _tempo_tarefa
 13725  002336  24F3               	addwf	prodl,w,c
 13726  002338  6ED9               	movwf	fsr2l,c
 13727  00233A  0E00               	movlw	high _tempo_tarefa
 13728  00233C  20F4               	addwfc	prodh,w,c
 13729  00233E  6EDA               	movwf	fsr2h,c
 13730  002340  50DE               	movf	postinc2,w,c
 13731  002342  10DE               	iorwf	postinc2,w,c
 13732  002344  B4D8               	btfsc	status,2,c
 13733  002346  D00B               	goto	i2l480
 13734  002348  5019               	movf	isr@cont,w,c
 13735  00234A  0D02               	mullw	2
 13736  00234C  0E2D               	movlw	low _tempo_tarefa
 13737  00234E  24F3               	addwf	prodl,w,c
 13738  002350  6ED9               	movwf	fsr2l,c
 13739  002352  0E00               	movlw	high _tempo_tarefa
 13740  002354  20F4               	addwfc	prodh,w,c
 13741  002356  6EDA               	movwf	fsr2h,c
 13742  002358  06DE               	decf	postinc2,f,c
 13743  00235A  0E00               	movlw	0
 13744  00235C  5ADD               	subwfb	postdec2,f,c
 13745  00235E                     i2l480:
 13746  00235E  2A19               	incf	isr@cont,f,c
 13747  002360  D7E3               	goto	i2l5588
 13748  002362                     i2u586_40:
 13749                           
 13750                           ;main.c: 142: }
 13751                           ;main.c: 145: if(tarefa_em_execucao == 1)
 13752  002362  043E               	decf	_tarefa_em_execucao,w,c	;volatile
 13753  002364  A4D8               	btfss	status,2,c
 13754  002366  D00B               	goto	i2l482
 13755                           
 13756                           ;main.c: 146: {
 13757                           ;main.c: 147: timeout_tarefa--;
 13758  002368  0637               	decf	_timeout_tarefa,f,c
 13759  00236A  A0D8               	btfss	status,0,c
 13760  00236C  0638               	decf	_timeout_tarefa+1,f,c
 13761                           
 13762                           ;main.c: 148: if(!timeout_tarefa)
 13763  00236E  5037               	movf	_timeout_tarefa,w,c
 13764  002370  1038               	iorwf	_timeout_tarefa+1,w,c
 13765  002372  A4D8               	btfss	status,2,c
 13766  002374  D004               	goto	i2l482
 13767                           
 13768                           ;main.c: 149: {
 13769                           ;main.c: 151: PCLATH = 0;
 13770  002376  0E00               	movlw	0
 13771  002378  6EFA               	movwf	pclath,c	;volatile
 13772                           
 13773                           ;main.c: 152: PCL = 0;
 13774  00237A  0E00               	movlw	0
 13775  00237C  6EF9               	movwf	pcl,c	;volatile
 13776  00237E                     i2l482:
 13777                           
 13778                           ;main.c: 153: }
 13779                           ;main.c: 154: }
 13780                           ;main.c: 157: write_timer_zero(0x0083);
 13781  00237E  0E00               	movlw	0
 13782  002380  6E02               	movwf	i2write_timer_zero@timer0+1,c
 13783  002382  0E83               	movlw	131
 13784  002384  6E01               	movwf	i2write_timer_zero@timer0,c
 13785  002386  EC01  F019         	call	i2_write_timer_zero	;wreg free
 13786  00238A                     i2l477:
 13787                           
 13788                           ;main.c: 159: }
 13789                           ;main.c: 165: if (INT0IF && INT0IE)
 13790  00238A  B2F2               	btfsc	intcon,1,c	;volatile
 13791  00238C  A8F2               	btfss	intcon,4,c	;volatile
 13792  00238E  D001               	goto	i2l483
 13793                           
 13794                           ;main.c: 166: {
 13795                           ;main.c: 167: INT0IF = 0;
 13796  002390  92F2               	bcf	intcon,1,c	;volatile
 13797  002392                     i2l483:
 13798  002392  C018  F049         	movff	??_isr+19,btemp+3
 13799  002396  C017  F048         	movff	??_isr+18,btemp+2
 13800  00239A  C016  F047         	movff	??_isr+17,btemp+1
 13801  00239E  C015  F046         	movff	??_isr+16,btemp
 13802  0023A2  C014  FFF5         	movff	??_isr+15,tablat
 13803  0023A6  C013  FFF8         	movff	??_isr+14,tblptru
 13804  0023AA  C012  FFF7         	movff	??_isr+13,tblptrh
 13805  0023AE  C011  FFF6         	movff	??_isr+12,tblptrl
 13806  0023B2  C010  FFF4         	movff	??_isr+11,prodh
 13807  0023B6  C00F  FFF3         	movff	??_isr+10,prodl
 13808  0023BA  C00E  FFDA         	movff	??_isr+9,fsr2h
 13809  0023BE  C00D  FFD9         	movff	??_isr+8,fsr2l
 13810  0023C2  C00C  FFE2         	movff	??_isr+7,fsr1h
 13811  0023C6  C00B  FFE1         	movff	??_isr+6,fsr1l
 13812  0023CA  C00A  FFEA         	movff	??_isr+5,fsr0h
 13813  0023CE  C009  FFE9         	movff	??_isr+4,fsr0l
 13814  0023D2  C008  FFFB         	movff	??_isr+3,pclatu
 13815  0023D6  C007  FFFA         	movff	??_isr+2,pclath
 13816  0023DA  9246               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 13817  0023DC  0011               	retfie		f
 13818  0023DE                     __end_of_isr:
 13819                           	opt stack 0
 13820                           tosu	equ	0xFFF
 13821                           tosh	equ	0xFFE
 13822                           tosl	equ	0xFFD
 13823                           pclatu	equ	0xFFB
 13824                           pclath	equ	0xFFA
 13825                           pcl	equ	0xFF9
 13826                           tblptru	equ	0xFF8
 13827                           tblptrh	equ	0xFF7
 13828                           tblptrl	equ	0xFF6
 13829                           tablat	equ	0xFF5
 13830                           prodh	equ	0xFF4
 13831                           prodl	equ	0xFF3
 13832                           intcon	equ	0xFF2
 13833                           intcon2	equ	0xFF1
 13834                           intcon3	equ	0xFF0
 13835                           indf0	equ	0xFEF
 13836                           postinc0	equ	0xFEE
 13837                           fsr0h	equ	0xFEA
 13838                           fsr0l	equ	0xFE9
 13839                           wreg	equ	0xFE8
 13840                           indf1	equ	0xFE7
 13841                           postinc1	equ	0xFE6
 13842                           postdec1	equ	0xFE5
 13843                           fsr1h	equ	0xFE2
 13844                           fsr1l	equ	0xFE1
 13845                           indf2	equ	0xFDF
 13846                           postinc2	equ	0xFDE
 13847                           postdec2	equ	0xFDD
 13848                           plusw2	equ	0xFDB
 13849                           fsr2h	equ	0xFDA
 13850                           fsr2l	equ	0xFD9
 13851                           status	equ	0xFD8
 13852                           
 13853 ;; *************** function i2_write_timer_zero *****************
 13854 ;; Defined at:
 13855 ;;		line 143 in file "bibliotecas/hardware.c"
 13856 ;; Parameters:    Size  Location     Type
 13857 ;;  timer0          2    0[COMRAM] unsigned int 
 13858 ;; Auto vars:     Size  Location     Type
 13859 ;;  write_timer_    2    2[COMRAM] struct Timers
 13860 ;; Return value:  Size  Location     Type
 13861 ;;                  1    wreg      void 
 13862 ;; Registers used:
 13863 ;;		None
 13864 ;; Tracked objects:
 13865 ;;		On entry : 0/0
 13866 ;;		On exit  : 0/0
 13867 ;;		Unchanged: 0/0
 13868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13869 ;;      Params:         2       0       0       0       0       0       0       0       0
 13870 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13871 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13872 ;;      Totals:         4       0       0       0       0       0       0       0       0
 13873 ;;Total ram usage:        4 bytes
 13874 ;; Hardware stack levels used:    1
 13875 ;; This function calls:
 13876 ;;		Nothing
 13877 ;; This function is called by:
 13878 ;;		_isr
 13879 ;; This function uses a non-reentrant model
 13880 ;;
 13881                           
 13882                           	psect	text60
 13883  003202                     __ptext60:
 13884                           	opt stack 0
 13885  003202                     i2_write_timer_zero:
 13886                           	opt stack 17
 13887                           
 13888                           ;hardware.c: 145: union Timers timer;
 13889                           ;hardware.c: 147: timer.lt = timer0;
 13890                           
 13891                           ;incstack = 0
 13892  003202  C001  F003         	movff	i2write_timer_zero@timer0,i2write_timer_zero@timer
 13893  003206  C002  F004         	movff	i2write_timer_zero@timer0+1,i2write_timer_zero@timer+1
 13894                           
 13895                           ;hardware.c: 149: TMR0H = timer.bt[1];
 13896  00320A  C004  FFD7         	movff	i2write_timer_zero@timer+1,4055	;volatile
 13897                           
 13898                           ;hardware.c: 150: TMR0L = timer.bt[0];
 13899  00320E  C003  FFD6         	movff	i2write_timer_zero@timer,4054	;volatile
 13900  003212  0012               	return		;funcret
 13901  003214                     __end_ofi2_write_timer_zero:
 13902                           	opt stack 0
 13903                           tosu	equ	0xFFF
 13904                           tosh	equ	0xFFE
 13905                           tosl	equ	0xFFD
 13906                           pclatu	equ	0xFFB
 13907                           pclath	equ	0xFFA
 13908                           pcl	equ	0xFF9
 13909                           tblptru	equ	0xFF8
 13910                           tblptrh	equ	0xFF7
 13911                           tblptrl	equ	0xFF6
 13912                           tablat	equ	0xFF5
 13913                           prodh	equ	0xFF4
 13914                           prodl	equ	0xFF3
 13915                           intcon	equ	0xFF2
 13916                           intcon2	equ	0xFF1
 13917                           intcon3	equ	0xFF0
 13918                           indf0	equ	0xFEF
 13919                           postinc0	equ	0xFEE
 13920                           fsr0h	equ	0xFEA
 13921                           fsr0l	equ	0xFE9
 13922                           wreg	equ	0xFE8
 13923                           indf1	equ	0xFE7
 13924                           postinc1	equ	0xFE6
 13925                           postdec1	equ	0xFE5
 13926                           fsr1h	equ	0xFE2
 13927                           fsr1l	equ	0xFE1
 13928                           indf2	equ	0xFDF
 13929                           postinc2	equ	0xFDE
 13930                           postdec2	equ	0xFDD
 13931                           plusw2	equ	0xFDB
 13932                           fsr2h	equ	0xFDA
 13933                           fsr2l	equ	0xFD9
 13934                           status	equ	0xFD8
 13935                           
 13936 ;; *************** function _recebe_dado_uart *****************
 13937 ;; Defined at:
 13938 ;;		line 138 in file "bibliotecas/uart.c"
 13939 ;; Parameters:    Size  Location     Type
 13940 ;;		None
 13941 ;; Auto vars:     Size  Location     Type
 13942 ;;		None
 13943 ;; Return value:  Size  Location     Type
 13944 ;;                  1    wreg      unsigned char 
 13945 ;; Registers used:
 13946 ;;		wreg, status,2
 13947 ;; Tracked objects:
 13948 ;;		On entry : 0/0
 13949 ;;		On exit  : 0/0
 13950 ;;		Unchanged: 0/0
 13951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13952 ;;      Params:         0       0       0       0       0       0       0       0       0
 13953 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13954 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13955 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13956 ;;Total ram usage:        0 bytes
 13957 ;; Hardware stack levels used:    1
 13958 ;; This function calls:
 13959 ;;		Nothing
 13960 ;; This function is called by:
 13961 ;;		_isr
 13962 ;;		_recebe_string_uart
 13963 ;; This function uses a non-reentrant model
 13964 ;;
 13965                           
 13966                           	psect	text61
 13967  003214                     __ptext61:
 13968                           	opt stack 0
 13969  003214                     _recebe_dado_uart:
 13970                           	opt stack 17
 13971                           
 13972                           ;uart.c: 140: while(RCIF==0);
 13973                           
 13974                           ;incstack = 0
 13975  003214  AA9E               	btfss	3998,5,c	;volatile
 13976  003216  D7FE               	goto	_recebe_dado_uart
 13977                           
 13978                           ;uart.c: 141: if(RCSTAbits.OERR)
 13979  003218  A2AB               	btfss	4011,1,c	;volatile
 13980  00321A  D003               	goto	i2l358
 13981                           
 13982                           ;uart.c: 142: {
 13983                           ;uart.c: 143: CREN = 0;
 13984  00321C  98AB               	bcf	4011,4,c	;volatile
 13985                           
 13986                           ;uart.c: 144: __nop();
 13987  00321E  F000               	nop	
 13988                           
 13989                           ;uart.c: 145: CREN=1;
 13990  003220  88AB               	bsf	4011,4,c	;volatile
 13991  003222                     i2l358:
 13992                           
 13993                           ;uart.c: 146: }
 13994                           ;uart.c: 147: return(RCREG);
 13995  003222  50AE               	movf	4014,w,c	;volatile
 13996  003224  0012               	return	
 13997  003226                     __end_of_recebe_dado_uart:
 13998                           	opt stack 0
 13999                           tosu	equ	0xFFF
 14000                           tosh	equ	0xFFE
 14001                           tosl	equ	0xFFD
 14002                           pclatu	equ	0xFFB
 14003                           pclath	equ	0xFFA
 14004                           pcl	equ	0xFF9
 14005                           tblptru	equ	0xFF8
 14006                           tblptrh	equ	0xFF7
 14007                           tblptrl	equ	0xFF6
 14008                           tablat	equ	0xFF5
 14009                           prodh	equ	0xFF4
 14010                           prodl	equ	0xFF3
 14011                           intcon	equ	0xFF2
 14012                           intcon2	equ	0xFF1
 14013                           intcon3	equ	0xFF0
 14014                           indf0	equ	0xFEF
 14015                           postinc0	equ	0xFEE
 14016                           fsr0h	equ	0xFEA
 14017                           fsr0l	equ	0xFE9
 14018                           wreg	equ	0xFE8
 14019                           indf1	equ	0xFE7
 14020                           postinc1	equ	0xFE6
 14021                           postdec1	equ	0xFE5
 14022                           fsr1h	equ	0xFE2
 14023                           fsr1l	equ	0xFE1
 14024                           indf2	equ	0xFDF
 14025                           postinc2	equ	0xFDE
 14026                           postdec2	equ	0xFDD
 14027                           plusw2	equ	0xFDB
 14028                           fsr2h	equ	0xFDA
 14029                           fsr2l	equ	0xFD9
 14030                           status	equ	0xFD8
 14031                           tosu	equ	0xFFF
 14032                           tosh	equ	0xFFE
 14033                           tosl	equ	0xFFD
 14034                           pclatu	equ	0xFFB
 14035                           pclath	equ	0xFFA
 14036                           pcl	equ	0xFF9
 14037                           tblptru	equ	0xFF8
 14038                           tblptrh	equ	0xFF7
 14039                           tblptrl	equ	0xFF6
 14040                           tablat	equ	0xFF5
 14041                           prodh	equ	0xFF4
 14042                           prodl	equ	0xFF3
 14043                           intcon	equ	0xFF2
 14044                           intcon2	equ	0xFF1
 14045                           intcon3	equ	0xFF0
 14046                           indf0	equ	0xFEF
 14047                           postinc0	equ	0xFEE
 14048                           fsr0h	equ	0xFEA
 14049                           fsr0l	equ	0xFE9
 14050                           wreg	equ	0xFE8
 14051                           indf1	equ	0xFE7
 14052                           postinc1	equ	0xFE6
 14053                           postdec1	equ	0xFE5
 14054                           fsr1h	equ	0xFE2
 14055                           fsr1l	equ	0xFE1
 14056                           indf2	equ	0xFDF
 14057                           postinc2	equ	0xFDE
 14058                           postdec2	equ	0xFDD
 14059                           plusw2	equ	0xFDB
 14060                           fsr2h	equ	0xFDA
 14061                           fsr2l	equ	0xFD9
 14062                           status	equ	0xFD8
 14063                           
 14064                           	psect	text62
 14065  000000                     __ptext62:
 14066                           	opt stack 0
 14067                           tosu	equ	0xFFF
 14068                           tosh	equ	0xFFE
 14069                           tosl	equ	0xFFD
 14070                           pclatu	equ	0xFFB
 14071                           pclath	equ	0xFFA
 14072                           pcl	equ	0xFF9
 14073                           tblptru	equ	0xFF8
 14074                           tblptrh	equ	0xFF7
 14075                           tblptrl	equ	0xFF6
 14076                           tablat	equ	0xFF5
 14077                           prodh	equ	0xFF4
 14078                           prodl	equ	0xFF3
 14079                           intcon	equ	0xFF2
 14080                           intcon2	equ	0xFF1
 14081                           intcon3	equ	0xFF0
 14082                           indf0	equ	0xFEF
 14083                           postinc0	equ	0xFEE
 14084                           fsr0h	equ	0xFEA
 14085                           fsr0l	equ	0xFE9
 14086                           wreg	equ	0xFE8
 14087                           indf1	equ	0xFE7
 14088                           postinc1	equ	0xFE6
 14089                           postdec1	equ	0xFE5
 14090                           fsr1h	equ	0xFE2
 14091                           fsr1l	equ	0xFE1
 14092                           indf2	equ	0xFDF
 14093                           postinc2	equ	0xFDE
 14094                           postdec2	equ	0xFDD
 14095                           plusw2	equ	0xFDB
 14096                           fsr2h	equ	0xFDA
 14097                           fsr2l	equ	0xFD9
 14098                           status	equ	0xFD8
 14099                           
 14100                           	psect	rparam
 14101  0000                     tosu	equ	0xFFF
 14102                           tosh	equ	0xFFE
 14103                           tosl	equ	0xFFD
 14104                           pclatu	equ	0xFFB
 14105                           pclath	equ	0xFFA
 14106                           pcl	equ	0xFF9
 14107                           tblptru	equ	0xFF8
 14108                           tblptrh	equ	0xFF7
 14109                           tblptrl	equ	0xFF6
 14110                           tablat	equ	0xFF5
 14111                           prodh	equ	0xFF4
 14112                           prodl	equ	0xFF3
 14113                           intcon	equ	0xFF2
 14114                           intcon2	equ	0xFF1
 14115                           intcon3	equ	0xFF0
 14116                           indf0	equ	0xFEF
 14117                           postinc0	equ	0xFEE
 14118                           fsr0h	equ	0xFEA
 14119                           fsr0l	equ	0xFE9
 14120                           wreg	equ	0xFE8
 14121                           indf1	equ	0xFE7
 14122                           postinc1	equ	0xFE6
 14123                           postdec1	equ	0xFE5
 14124                           fsr1h	equ	0xFE2
 14125                           fsr1l	equ	0xFE1
 14126                           indf2	equ	0xFDF
 14127                           postinc2	equ	0xFDE
 14128                           postdec2	equ	0xFDD
 14129                           plusw2	equ	0xFDB
 14130                           fsr2h	equ	0xFDA
 14131                           fsr2l	equ	0xFD9
 14132                           status	equ	0xFD8
 14133                           
 14134                           	psect	temp
 14135  000046                     btemp:
 14136                           	opt stack 0
 14137  000046                     	ds	1
 14138  0000                     int$flags	set	btemp
 14139  0000                     wtemp6	set	btemp+1
 14140                           tosu	equ	0xFFF
 14141                           tosh	equ	0xFFE
 14142                           tosl	equ	0xFFD
 14143                           pclatu	equ	0xFFB
 14144                           pclath	equ	0xFFA
 14145                           pcl	equ	0xFF9
 14146                           tblptru	equ	0xFF8
 14147                           tblptrh	equ	0xFF7
 14148                           tblptrl	equ	0xFF6
 14149                           tablat	equ	0xFF5
 14150                           prodh	equ	0xFF4
 14151                           prodl	equ	0xFF3
 14152                           intcon	equ	0xFF2
 14153                           intcon2	equ	0xFF1
 14154                           intcon3	equ	0xFF0
 14155                           indf0	equ	0xFEF
 14156                           postinc0	equ	0xFEE
 14157                           fsr0h	equ	0xFEA
 14158                           fsr0l	equ	0xFE9
 14159                           wreg	equ	0xFE8
 14160                           indf1	equ	0xFE7
 14161                           postinc1	equ	0xFE6
 14162                           postdec1	equ	0xFE5
 14163                           fsr1h	equ	0xFE2
 14164                           fsr1l	equ	0xFE1
 14165                           indf2	equ	0xFDF
 14166                           postinc2	equ	0xFDE
 14167                           postdec2	equ	0xFDD
 14168                           plusw2	equ	0xFDB
 14169                           fsr2h	equ	0xFDA
 14170                           fsr2l	equ	0xFD9
 14171                           status	equ	0xFD8


Data Sizes:
    Strings     195
    Constant    213
    Data        24
    BSS         652
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     44      69
    BANK0           160    117     121
    BANK1           256    108     243
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    pf_open@path	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_9(CODE[10]), 

    rd	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_lcd@texto(COMRAM[7]), escreve_inteiro_uart@valor_final(COMRAM[7]), 

    pf_readdir@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    pf_opendir@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    pf_write@bw	PTR unsigned int  size(2) Largest target is 2
		 -> SDCard@br(BANK1[2]), 

    pf_write@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK1[42]), 

    pf_write@buff	PTR const void  size(2) Largest target is 8
		 -> STR_10(CODE[8]), 

    pf_write@p	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_10(CODE[8]), 

    pf_read$2151	PTR unsigned char  size(2) Largest target is 32
		 -> NULL(NULL[0]), data_buffer_32(BANK1[32]), 

    pf_read@br	PTR unsigned int  size(2) Largest target is 2
		 -> SDCard@br(BANK1[2]), 

    pf_read@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK1[42]), 

    pf_read@buff	PTR void  size(2) Largest target is 32
		 -> data_buffer_32(BANK1[32]), 

    pf_read@rbuff	PTR unsigned char  size(2) Largest target is 32
		 -> data_buffer_32(BANK1[32]), 

    pf_open@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK1[42]), 

    dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    pf_mount@fs	PTR struct . size(2) Largest target is 42
		 -> SDCard@fs(BANK1[42]), 

    check_fs@buf	PTR unsigned char  size(2) Largest target is 36
		 -> pf_mount@buf(BANK0[36]), 

    follow_path@dir	PTR unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK1[32]), 

    follow_path@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    follow_path@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK1[16]), 

    follow_path@path	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_18(CODE[10]), 

    get_fileinfo@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    create_name@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> follow_path@path(BANK0[2]), 

    create_name@p	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_18(CODE[10]), 

    create_name@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    create_name@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK1[16]), 

    create_name@sfn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    dir_read@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    dir_find@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    dir_find@dir	PTR unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK1[32]), 

    dir_find@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK1[16]), 

    dir_next@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    dir_next@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK1[16]), 

    dir_next@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK1[42]), 

    S1840$fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    dir_rewind@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    dir_rewind@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK1[16]), 

    dir_rewind@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK1[42]), 

    get_clust@dir	PTR unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK1[32]), 

    get_clust@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK1[42]), 

    clust2sect@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK1[42]), 

    FatFs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK1[42]), 

    get_fat@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK1[42]), 

    mem_cmp@src	PTR const void  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    mem_cmp@s	PTR const unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    mem_cmp@dst	PTR const void  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK1[32]), 

    mem_cmp@d	PTR const unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK1[32]), 

    mem_set@dst	PTR void  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    mem_set@d	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    disk_writep@wr	PTR const unsigned char  size(3) Largest target is 32767
		 -> ROM(CODE[32767]), STR_10(CODE[8]), 

    disk_readp@rd	PTR unsigned char  size(2) Largest target is 36
		 -> pf_readdir@dir(COMRAM[32]), pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK1[32]), pf_mount@buf(BANK0[36]), 
		 -> NULL(NULL[0]), get_fat@buf(BANK0[4]), data_buffer_32(BANK1[32]), 

    escreve_frase_ram_lcd@buffer	PTR unsigned char  size(2) Largest target is 17
		 -> STR_17(CODE[9]), STR_16(CODE[14]), STR_15(CODE[14]), STR_14(CODE[12]), 
		 -> escreve_inteiro_lcd@texto(COMRAM[7]), STR_13(CODE[14]), STR_12(CODE[13]), STR_11(CODE[17]), 
		 -> STR_8(CODE[17]), STR_7(CODE[15]), STR_6(CODE[14]), STR_5(CODE[14]), 
		 -> mensagem_inicial@msg_dois(BANK0[17]), mensagem_inicial@msg_linha_um(BANK0[17]), leitura_chave@pos_ignicao_on(COMRAM[17]), leitura_chave@pos_ignicao_crank(COMRAM[17]), 
		 -> leitura_chave@pos_ignicao_off(COMRAM[17]), STR_3(CODE[17]), STR_2(CODE[10]), STR_1(CODE[11]), 

    p_tarefas	PTR FTN()void [2] size(2) Largest target is 1
		 -> SDCard(), acende_led4(), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_lcd@texto(COMRAM[7]), escreve_inteiro_uart@valor_final(COMRAM[7]), 


Critical Paths under _main in COMRAM

    _mensagem_inicial->_posicao_cursor_lcd
    _init_lcd->_escreve_cmd_lcd
    _config_timer_zero->_write_timer_zero
    _inicializa_uart->_configura_baudrate_uart
    _configura_baudrate_uart->___aldiv
    _inicializa_SPI->_posicao_cursor_lcd
    _acende_led4->_shrc_apaga_bit
    _acende_led4->_shrc_seta_bit
    _pf_write->_clust2sect
    _pf_write->_disk_writep
    _disk_writep->_command
    _pf_read->_clust2sect
    _pf_read->_disk_readp
    _follow_path->_create_name
    _dir_find->_disk_readp
    _dir_rewind->_clust2sect
    _dir_next->_clust2sect
    _get_fat->_disk_readp
    _clust2sect->___lmul
    _create_name->_mem_set
    _disk_initialize->_reset
    _reset->_command
    _escreve_cmd_lcd->_delay
    _check_fs->_disk_readp
    _disk_readp->_command
    _response->_recebe_dado_SPI
    _proceed->_WriteSPI_
    _dummy_clocks->_WriteSPI_
    _command->_WriteSPI_
    _posicao_cursor_lcd->_endereco_cursor_lcd
    _endereco_cursor_lcd->_delay
    _escreve_frase_ram_lcd->_escreve_caractere_lcd
    _escreve_caractere_lcd->_delay
    _WriteSPI_->_shrc_seta_bit
    _controle_shrc->_envia_dados_shrc

Critical Paths under _isr in COMRAM

    _isr->i2_write_timer_zero

Critical Paths under _main in BANK0

    _main->_escalonador
    _inicializa_uart->_configura_baudrate_uart
    _SDCard->_pf_open
    _pf_write->_get_fat
    _pf_read->_get_fat
    _pf_open->_follow_path
    _follow_path->_dir_find
    _dir_find->_dir_next
    _dir_rewind->_clust2sect
    _dir_next->_get_fat
    _get_fat->_disk_readp
    _pf_mount->_check_fs
    _check_fs->_disk_readp

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _escalonador->_SDCard
    _SDCard->_pf_open

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  218581
                      _controle_shrc
                        _escalonador
                     _inicializa_SPI
                    _inicializa_shrc
                 _inicializa_tarefas
                    _inicializa_uart
                      _init_hardware
                           _init_lcd
                   _mensagem_inicial
 ---------------------------------------------------------------------------------
 (1) _mensagem_inicial                                    36    36      0    5203
                                             31 COMRAM     2     2      0
                                              0 BANK0     34    34      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0     613
                                             28 COMRAM     1     1      0
                              _delay
                    _escreve_cmd_lcd
 ---------------------------------------------------------------------------------
 (1) _init_hardware                                        0     0      0     195
                  _config_timer_dois
                  _config_timer_zero
                     _inicializa_adc
                     _init_interrupt
                     _init_oscilador
                         _init_ports
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_oscilador                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _inicializa_adc                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _config_timer_zero                                    0     0      0     195
                   _write_timer_zero
 ---------------------------------------------------------------------------------
 (3) _write_timer_zero                                     4     2      2     195
                                             25 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _config_timer_dois                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_uart                                      0     0      0    1118
            _configura_baudrate_uart
 ---------------------------------------------------------------------------------
 (2) _configura_baudrate_uart                             14    10      4    1118
                                             39 COMRAM     4     0      4
                                              0 BANK0     10    10      0
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     805
                                             25 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _inicializa_tarefas                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_shrc                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_SPI                                       1     1      0    5154
                                             31 COMRAM     1     1      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _escalonador                                          3     3      0  206196
                                            114 BANK0      3     3      0
                             _SDCard *
                        _acende_led4 *
 ---------------------------------------------------------------------------------
 (2) _acende_led4                                          0     0      0      53
                     _shrc_apaga_bit
                      _shrc_seta_bit
 ---------------------------------------------------------------------------------
 (3) _shrc_apaga_bit                                       3     3      0      22
                                             25 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _SDCard                                              45    45      0  205920
                                             63 BANK1     45    45      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                           _pf_mount
                            _pf_open
                            _pf_read
                           _pf_write
                 _posicao_cursor_lcd
                            _proceed
                           _readover
 ---------------------------------------------------------------------------------
 (3) _readover                                             2     0      2      98
                                             25 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _pf_write                                            33    27      6   35864
                                             58 BANK0     33    27      6
                         _clust2sect
                        _disk_writep
                            _get_fat
 ---------------------------------------------------------------------------------
 (4) _disk_writep                                         17    10      7   13322
                                             39 COMRAM     4     4      0
                                              0 BANK0     12     5      7
                          _WriteSPI_
                            _command
                       _dummy_clocks
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (3) _pf_read                                             36    30      6   40179
                                             58 BANK0     36    30      6
                         _clust2sect
                         _disk_readp
                            _get_fat
 ---------------------------------------------------------------------------------
 (3) _pf_open                                             87    85      2   49139
                                             90 BANK0     24    22      2
                                              0 BANK1     63    63      0
                        _follow_path
                          _get_clust
 ---------------------------------------------------------------------------------
 (4) _follow_path                                          7     1      6   47797
                                             83 BANK0      7     1      6
                        _create_name
                           _dir_find
                         _dir_rewind
                          _get_clust
 ---------------------------------------------------------------------------------
 (4) _get_clust                                           18    14      4     471
                                             25 COMRAM    18    14      4
 ---------------------------------------------------------------------------------
 (5) _dir_find                                             8     4      4   42523
                                             75 BANK0      8     4      4
                           _dir_next
                         _dir_rewind
                         _disk_readp
                            _mem_cmp
 ---------------------------------------------------------------------------------
 (6) _mem_cmp                                             15     9      6     468
                                             25 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (5) _dir_rewind                                          16    14      2    2027
                                              5 BANK0     16    14      2
                         _clust2sect
 ---------------------------------------------------------------------------------
 (6) _dir_next                                            17    15      2   21523
                                             58 BANK0     17    15      2
                         _clust2sect
                            _get_fat
 ---------------------------------------------------------------------------------
 (4) _get_fat                                             40    36      4   19437
                                             18 BANK0     40    36      4
                         _disk_readp
 ---------------------------------------------------------------------------------
 (4) _clust2sect                                          11     7      4    1187
                                             37 COMRAM     6     2      4
                                              0 BANK0      5     5      0
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) _create_name                                         20    16      4    1682
                                             33 COMRAM    11     7      4
                                              0 BANK0      9     9      0
                            _mem_set
 ---------------------------------------------------------------------------------
 (6) _mem_set                                              8     2      6     400
                                             25 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (3) _pf_mount                                            77    75      2   74653
                                             28 BANK0     77    75      2
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                         _disk_readp
 ---------------------------------------------------------------------------------
 (4) _disk_initialize                                     10    10      0   34638
                                              0 BANK0     10    10      0
                            _command
                       _dummy_clocks
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                              _reset
                           _response
 ---------------------------------------------------------------------------------
 (5) _reset                                                5     5      0   16954
                                             39 COMRAM     5     5      0
                            _command
                       _dummy_clocks
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (2) _escreve_cmd_lcd                                      1     1      0     477
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _check_fs                                            10     4      6   18577
                                             18 BANK0     10     4      6
                         _disk_readp
 ---------------------------------------------------------------------------------
 (5) _disk_readp                                          25    15     10   17845
                                             39 COMRAM     4     4      0
                                              0 BANK0     18     8     10
                            _command
                       _dummy_clocks
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (6) _response                                             1     1      0      37
                                             26 COMRAM     1     1      0
                    _recebe_dado_SPI
 ---------------------------------------------------------------------------------
 (7) _recebe_dado_SPI                                      1     1      0       3
                                             25 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _proceed                                              0     0      0     167
                          _WriteSPI_
 ---------------------------------------------------------------------------------
 (6) _dummy_clocks                                         5     5      0    4881
                                             32 COMRAM     5     5      0
                          _WriteSPI_
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (6) _command                                              7     2      5    7115
                                             32 COMRAM     7     2      5
                          _WriteSPI_
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (2) _posicao_cursor_lcd                                   3     2      1    2397
                                             28 COMRAM     3     2      1
                _endereco_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _endereco_cursor_lcd                                  1     1      0     353
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _escreve_frase_ram_lcd                                2     0      2    2249
                                             28 COMRAM     2     0      2
              _escreve_caractere_lcd
 ---------------------------------------------------------------------------------
 (3) _escreve_caractere_lcd                                1     1      0     384
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                2     2      0     136
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _WriteSPI_                                            4     4      0     167
                                             28 COMRAM     4     4      0
                      _controle_shrc
                      _shrc_seta_bit
 ---------------------------------------------------------------------------------
 (3) _shrc_seta_bit                                        3     3      0      31
                                             25 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) _controle_shrc                                        0     0      0     102
                   _ativa_latch_shrc
                   _envia_dados_shrc
 ---------------------------------------------------------------------------------
 (6) _envia_dados_shrc                                     2     2      0     102
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _ativa_latch_shrc                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     576
                                             25 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     564
                                             25 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (13) _isr                                                21    21      0     183
                                              4 COMRAM    21    21      0
                   _recebe_dado_uart
                 i2_write_timer_zero
 ---------------------------------------------------------------------------------
 (14) i2_write_timer_zero                                  4     2      2      93
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (14) _recebe_dado_uart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _controle_shrc
     _ativa_latch_shrc
     _envia_dados_shrc
   _escalonador
     _SDCard *
       _escreve_cmd_lcd
         _delay
       _escreve_frase_ram_lcd
         _escreve_caractere_lcd
           _delay
       _pf_mount
         ___lldiv
         ___lmul
         _check_fs
           _disk_readp
             _command
               _WriteSPI_
                 _controle_shrc
                   _ativa_latch_shrc
                   _envia_dados_shrc
                 _shrc_seta_bit
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
             _dummy_clocks
               _WriteSPI_
                 _controle_shrc
                   _ativa_latch_shrc
                   _envia_dados_shrc
                 _shrc_seta_bit
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
             _proceed
               _WriteSPI_
                 _controle_shrc
                   _ativa_latch_shrc
                   _envia_dados_shrc
                 _shrc_seta_bit
             _response
               _recebe_dado_SPI
         _disk_initialize
           _command
             _WriteSPI_
               _controle_shrc
                 _ativa_latch_shrc
                 _envia_dados_shrc
               _shrc_seta_bit
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
           _dummy_clocks
             _WriteSPI_
               _controle_shrc
                 _ativa_latch_shrc
                 _envia_dados_shrc
               _shrc_seta_bit
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
           _escreve_cmd_lcd
             _delay
           _escreve_frase_ram_lcd
             _escreve_caractere_lcd
               _delay
           _posicao_cursor_lcd
             _endereco_cursor_lcd
               _delay
           _proceed
             _WriteSPI_
               _controle_shrc
                 _ativa_latch_shrc
                 _envia_dados_shrc
               _shrc_seta_bit
           _reset
             _command
               _WriteSPI_
                 _controle_shrc
                   _ativa_latch_shrc
                   _envia_dados_shrc
                 _shrc_seta_bit
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
             _dummy_clocks
               _WriteSPI_
                 _controle_shrc
                   _ativa_latch_shrc
                   _envia_dados_shrc
                 _shrc_seta_bit
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _proceed
               _WriteSPI_
                 _controle_shrc
                   _ativa_latch_shrc
                   _envia_dados_shrc
                 _shrc_seta_bit
             _response
               _recebe_dado_SPI
           _response
             _recebe_dado_SPI
         _disk_readp
           _command
             _WriteSPI_
               _controle_shrc
                 _ativa_latch_shrc
                 _envia_dados_shrc
               _shrc_seta_bit
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
           _dummy_clocks
             _WriteSPI_
               _controle_shrc
                 _ativa_latch_shrc
                 _envia_dados_shrc
               _shrc_seta_bit
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
           _proceed
             _WriteSPI_
               _controle_shrc
                 _ativa_latch_shrc
                 _envia_dados_shrc
               _shrc_seta_bit
           _response
             _recebe_dado_SPI
       _pf_open
         _follow_path
           _create_name
             _mem_set
           _dir_find
             _dir_next
               _clust2sect
                 ___lmul
               _get_fat
                 _disk_readp
                   _command
                     _WriteSPI_
                       _controle_shrc
                         _ativa_latch_shrc
                         _envia_dados_shrc
                       _shrc_seta_bit
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                   _dummy_clocks
                     _WriteSPI_
                       _controle_shrc
                         _ativa_latch_shrc
                         _envia_dados_shrc
                       _shrc_seta_bit
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                   _proceed
                     _WriteSPI_
                       _controle_shrc
                         _ativa_latch_shrc
                         _envia_dados_shrc
                       _shrc_seta_bit
                   _response
                     _recebe_dado_SPI
             _dir_rewind
               _clust2sect
                 ___lmul
             _disk_readp
               _command
                 _WriteSPI_
                   _controle_shrc
                     _ativa_latch_shrc
                     _envia_dados_shrc
                   _shrc_seta_bit
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
               _dummy_clocks
                 _WriteSPI_
                   _controle_shrc
                     _ativa_latch_shrc
                     _envia_dados_shrc
                   _shrc_seta_bit
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
               _proceed
                 _WriteSPI_
                   _controle_shrc
                     _ativa_latch_shrc
                     _envia_dados_shrc
                   _shrc_seta_bit
               _response
                 _recebe_dado_SPI
             _mem_cmp
           _dir_rewind
             _clust2sect
               ___lmul
           _get_clust
         _get_clust
       _pf_read
         _clust2sect
           ___lmul
         _disk_readp
           _command
             _WriteSPI_
               _controle_shrc
                 _ativa_latch_shrc
                 _envia_dados_shrc
               _shrc_seta_bit
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
           _dummy_clocks
             _WriteSPI_
               _controle_shrc
                 _ativa_latch_shrc
                 _envia_dados_shrc
               _shrc_seta_bit
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
           _proceed
             _WriteSPI_
               _controle_shrc
                 _ativa_latch_shrc
                 _envia_dados_shrc
               _shrc_seta_bit
           _response
             _recebe_dado_SPI
         _get_fat
           _disk_readp
             _command
               _WriteSPI_
                 _controle_shrc
                   _ativa_latch_shrc
                   _envia_dados_shrc
                 _shrc_seta_bit
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
             _dummy_clocks
               _WriteSPI_
                 _controle_shrc
                   _ativa_latch_shrc
                   _envia_dados_shrc
                 _shrc_seta_bit
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
             _proceed
               _WriteSPI_
                 _controle_shrc
                   _ativa_latch_shrc
                   _envia_dados_shrc
                 _shrc_seta_bit
             _response
               _recebe_dado_SPI
       _pf_write
         _clust2sect
           ___lmul
         _disk_writep
           _WriteSPI_
             _controle_shrc
               _ativa_latch_shrc
               _envia_dados_shrc
             _shrc_seta_bit
           _command
             _WriteSPI_
               _controle_shrc
                 _ativa_latch_shrc
                 _envia_dados_shrc
               _shrc_seta_bit
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
           _dummy_clocks
             _WriteSPI_
               _controle_shrc
                 _ativa_latch_shrc
                 _envia_dados_shrc
               _shrc_seta_bit
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
           _proceed
             _WriteSPI_
               _controle_shrc
                 _ativa_latch_shrc
                 _envia_dados_shrc
               _shrc_seta_bit
           _response
             _recebe_dado_SPI
         _get_fat
           _disk_readp
             _command
               _WriteSPI_
                 _controle_shrc
                   _ativa_latch_shrc
                   _envia_dados_shrc
                 _shrc_seta_bit
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
             _dummy_clocks
               _WriteSPI_
                 _controle_shrc
                   _ativa_latch_shrc
                   _envia_dados_shrc
                 _shrc_seta_bit
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
             _proceed
               _WriteSPI_
                 _controle_shrc
                   _ativa_latch_shrc
                   _envia_dados_shrc
                 _shrc_seta_bit
             _response
               _recebe_dado_SPI
       _posicao_cursor_lcd
         _endereco_cursor_lcd
           _delay
       _proceed
         _WriteSPI_
           _controle_shrc
             _ativa_latch_shrc
             _envia_dados_shrc
           _shrc_seta_bit
       _readover
     _acende_led4 *
       _shrc_apaga_bit
       _shrc_seta_bit
   _inicializa_SPI
     _escreve_cmd_lcd
       _delay
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay
   _inicializa_shrc
   _inicializa_tarefas
   _inicializa_uart
     _configura_baudrate_uart
       ___aldiv
   _init_hardware
     _config_timer_dois
     _config_timer_zero
       _write_timer_zero
     _inicializa_adc
     _init_interrupt
     _init_oscilador
     _init_ports
   _init_lcd
     _delay
     _escreve_cmd_lcd
       _delay
   _mensagem_inicial
     _escreve_cmd_lcd
       _delay
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay

 _isr (ROOT)
   _recebe_dado_uart
   i2_write_timer_zero

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     200      21       25.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     6C      F3       7       94.9%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     75      79       5       75.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2C      45       1       73.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1B1      20        0.0%
DATA                 0      0     3B1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Jan 18 20:59:46 2022

        __end_of_mensagem_inicial 2BA8                       get_fat@clst 0072  
                               _s 0041                      create_name@c 0068  
                    create_name@d 0060                      create_name@i 0067  
                    create_name@p 0061            __size_of_controle_shrc 000C  
                     _SSPSTATbits 000FC7                  ??_init_interrupt 001A  
                              l16 2F58                                l41 2FA6  
                              l17 2F4A                                l42 2F76  
                              l43 2F7E                                l44 2F80  
                              l90 2DFE                                l91 2DCE  
                              l92 2DD2                                l93 2DD8  
                              l94 2DDC                                l88 2DE2  
                              l99 31FA                                _rd 0039  
                   pf_mount@bsect 00C0                     pf_mount@mclst 00BC  
                   pf_mount@fsize 00C4                      ?_escalonador 0001  
                   create_name@dj 0022                     pf_mount@tsect 00B8  
                   create_name@ni 0063                     create_name@si 0064  
                ?_inicializa_shrc 0001                  ?_inicializa_uart 0001  
                             l107 2FE6                               l108 2FC4  
                             l332 217C                               l600 2D0E  
                             l512 1B2E                               l520 1B2A  
                             l601 2D16                               l513 1B2C  
                             l610 2D4C                               l602 2D18  
                             l514 1AAA                               l611 2D54  
                             l603 2D20                               l612 2D56  
                             l604 2D22                               l620 2CA4  
                             l516 1AC6                               l605 2D36  
                             l621 2CB2                               l533 1B30  
                             l630 2BC2                               l606 2D38  
                             l622 2CC0                               l518 1AC8  
                             l631 2BC4                               l607 2D40  
                             l623 2CCE                               l640 2C00  
                             l632 2BCC                               l608 2D42  
                             l616 2CF4                               l641 2C02  
                             l633 2BCE                               l609 2D4A  
                             l617 2CD4                               l537 1B38  
                             l642 2C0A                               l634 2BD6  
                             l618 2C98                               l546 30A0  
                             l490 285C                               l643 2C0C  
                             l635 2BD8                               l619 2CF0  
                             l715 29B4                               l636 2BEC  
                             l628 2BB8                               l580 2A3A  
                             l716 29EE                               l732 16F0  
                             l724 1612                               l492 28EE  
                             l637 2BEE                               l629 2BBA  
                             l661 2F00                               l581 2A42  
                             l638 2BF6                               l662 2ED8  
                             l590 2A78                               l582 2A44  
                             l726 176C                               l902 1E34  
                             l830 0ED4                               l567 30B4  
                             l639 2BF8                               l751 134E  
                             l591 2A80                               l583 2A4C  
                             l727 1660                               l815 2C32  
                             l752 1336                               l592 2A82  
                             l584 2A4E                               l728 168C  
                             l808 3072                               l840 0D9A  
                             l569 30C2                               l761 1422  
                             l585 2A62                               l577 2A2E  
                             l809 3062                               l833 0CA8  
                             l770 14AA                               l762 140E  
                             l746 13D4                               l754 1396  
                             l586 2A64                               l578 2A30  
                             l738 17B0                               l906 1EE6  
                             l826 0EB8                               l498 3044  
                             l771 1492                               l747 12F2  
                             l587 2A6C                               l579 2A38  
                             l739 17EE                               l915 1EBE  
                             l907 1E90                               l835 0CC8  
                             l827 0B50                               l499 3052  
                             l780 1564                               l764 146A  
                             l756 13B2                               l588 2A6E  
                             l844 27E8                               l828 0BE6  
                             l773 14EC                               l757 13AE  
                             l749 131C                               l589 2A76  
                             l917 1ECE                               l837 0CE6  
                             l941 24F0                               l933 23E6  
                             l782 159C                               l774 14BC  
                             l950 1BB0                               l838 0CF4  
                             l862 227A                               l854 21FC  
                             l934 23E0                               l599 2D0C  
                             l783 1588                               l951 1C20  
                             l791 1FBE                               l784 1584  
                             l776 1516                               l952 1C92  
                             l960 0130                               l872 18C4  
                             l864 229E                               l880 250E  
                             l848 2732                               l944 24C4  
                             l936 2410                               l777 14FE  
                             l961 013C                               l937 2454  
                             l793 1FF8                               l786 15B2  
                             l970 0550                               l962 0146  
                             l858 2234                               l794 1FFE  
                             l963 017C                               l955 002A  
                             l875 19C4                               l867 1866  
                             l795 2052                               l948 1B72  
                             l964 021C                               l876 1952  
                             l973 05A0                               l965 036A  
                             l877 1976                               l885 2598  
                             l789 1F78                               l966 0464  
                             l958 0096                               l886 25D8  
                             l990 115E                               l967 048C  
                             l991 10D8                               l968 04A2  
                             l976 1CAC                               l992 1066  
                             l984 0F16                               l969 04AC  
                             l993 1096                               l978 1CF0  
                             l994 10BC                               l986 0F2A  
                             l979 1CFE                               l995 112A  
                             l988 126C                               l996 11AA  
                             l989 0FB6                               l998 11BC  
                             _PCL 000FF9                               _PR2 000FCB  
                     get_clust@fs 0026                  ??_init_oscilador 001A  
                             _isr 0008                               _txt 0130  
                             prod 000FF3                               tosl 000FFD  
                             wreg 000FE8                      disk_readp@rd 0060  
                  create_name@cvt 7E67         __size_of_write_timer_zero 0012  
                  create_name@sfn 0065           ??_escreve_frase_ram_lcd 001F  
                            l1000 11C4                              l1001 1232  
                            l1011 071E                              l1020 091A  
                            l1021 0996                              l1005 0674  
                            l1022 09F4                              l1014 07AA  
                            l1023 0A42                              l1015 09A8  
                            l1007 0688                              l1024 0AF8  
                            l1016 08C8                              l1008 06F2  
                            l1025 0AE6                              l1017 0856  
                            l1009 06DC                              l1018 0886  
                            l1130 2698                              l1122 2610  
                            l1019 08AC                              l1131 26AE  
                            l1123 2628                              l1125 2656  
                            l1126 264A                              l1129 268A  
                            l1074 2E3C                              l1075 2E50  
                            l1431 2AD8                              l1432 2ACC  
                            l1435 2B0C                              l1436 2B1A  
            __size_of_acende_led4 0024                              l6220 1492  
                            l6226 14BC                              l6350 3062  
                            l6512 2A0E                              l7170 10BC  
                            l7066 08AC                              l6428 1952  
                            l7360 2854                              l5922 30AC  
                            ?_isr 0001                              l5928 30BA  
                            l6672 16AE                              l6690 1712  
                            l6756 1FB2                              l6862 1C92  
                            l6854 1C20                              l6942 048C  
                            l6936 0464             _escreve_caractere_lcd 2BA8  
                            STR_1 7FCC                              STR_2 7FE1  
                            STR_3 7F4D                              STR_4 7FFC  
                            STR_5 7F97                              STR_6 7F89  
                            STR_7 7F5E                              STR_8 7F3C  
                            STR_9 7FD7                    timer_dois@flag 0043  
                            _BRGH 007D62                              _CREN 007D5C  
                            _T0IF 007F92                              _LATB 000F8A  
                            _PIE1 000F9D                              u7020 1862  
                            u7200 2AA4                              u4660 2ADC  
                            u6340 30C8                              u7220 2A0E  
                            _RCIF 007CF5                              u8040 0800  
                            u7065 18D0                              u6364 3140  
                            u6540 2EF8                              u7500 16AE  
                            u7340 25EE                              u4684 3122  
                            u6365 313C                              u8045 07F6  
                            u4685 311E                              u6550 2F20  
                            u8310 265A                              u6615 1298  
                            u7255 2724                              u7520 1712  
                            u6800 0B1E                              u7280 2574  
                            u7600 2006                              u6730 1522  
                            u7450 1F22                              u6810 0B3E  
                            u7290 2576                              u6547 2EEE  
                            u7451 1F1E                              u7275 254C  
                            u9107 2B92                              u7700 1BAC  
                            u7460 1F24                              u7380 1E76  
                            u6900 0DDC                              u6557 2F16  
                            u9117 2914                              u6830 0B8E  
                            u8190 1010                              u9207 1728  
                            u9127 292E                              u9217 175E  
                            u6905 0DD2                              u6825 0B7A  
                            u8345 2076                              u9137 294A  
                            u6690 1478                              u8450 1B36  
                            u9307 15A6                              u6675 13E6  
                            u9227 17A2                              u8195 1006  
                            u9147 1F90                              u8355 20C2  
                            u6940 2C42                              u8460 308E  
                            u8540 2B3A                              u9317 2FD8  
                            u9237 17BC                              u9157 2020  
                            u7565 1F4C                              u6950 2C80  
                            u8470 3090                              u8550 2B52  
                    get_clust@dir 001A                              u9327 2F88  
                            u9247 1808                              u9167 15E0  
                            u8375 2106                              u8528 28AC  
                            u9337 2F90                              u9257 12C0  
                            u9177 162C                              u8529 28C0  
                            u8385 2150                              u6970 21F8  
                            u9347 2F98                              u9267 130A  
                            u9187 164E                              u7915 05D4  
                            u7860 0476                              u9357 2FA0  
                            u9277 1364                              u9197 16B6  
                            u7845 0382                              u6885 0CD4  
                            u7950 1CFA                              u9367 31CE  
                            u9287 1438                              u7880 049E  
                            u9377 31D6                              u9297 1538  
                            _TMR2 000FCC                              _SPEN 007D5F  
                            _TRMT 007D61                              _TXEN 007D65  
                            _SYNC 007D64                              _dado 0045  
                            _flag 003B                              _main 3026  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            indf0 000FEF                              fsr2h 000FDA  
                            fsr0l 000FE9                              indf1 000FE7  
                            indf2 000FDF                              fsr1l 000FE1  
                            fsr2l 000FD9                              btemp 0046  
                            prodh 000FF4                              prodl 000FF3  
                            start 000E                     disk_readp@arr 01F3  
                   disk_readp@ptr 006A                      disk_writep@i 0067  
                    disk_writep@j 0069                      ?_follow_path 00B3  
                    ___param_bank 000000                   create_name@path 0024  
                           ??_isr 0005          __size_of_recebe_dado_SPI 0012  
__size_of_configura_baudrate_uart 0132                   __end_of___aldiv 26C0  
                           ?_main 0001                             STR_10 7FF4  
                           STR_11 7F3C                             STR_12 7FB3  
                           STR_13 7FA5                             STR_14 7FC0  
                           STR_15 7F6D                             STR_16 7F7B  
                           STR_17 7FEB                             STR_18 7FD7  
                 __end_of___lldiv 2B2C                             _T0CON 000FD5  
                           _T2CON 000FCA                    _data_buffer_32 014F  
                           i2l358 3222                             i2l480 235E  
                           i2l482 237E                             i2l483 2392  
                           i2l476 2318                             i2l477 238A  
                           i2l478 2330                             _RCREG 000FAE  
                           _RCSTA 000FAB                     get_clust@clst 0028  
                           _TMR0H 000FD7                             _TMR0L 000FD6  
                           _SPBRG 000FAF                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
                           _TRISD 000F95                             _TRISE 000F96  
                           _TXREG 000FAD                             _TXSTA 000FAC  
                           _FatFs 0035            __end_ofcreate_name@cvt 7EE7  
             ___lmul@multiplicand 001E        __size_of_config_timer_dois 000C  
      __size_of_config_timer_zero 001A                   __end_of_get_fat 0EE8  
                 __end_of_command 2ED6                             _delay 30A8  
                _envia_dados_shrc 2F6C                   __end_of_mem_cmp 2C8A  
                 __end_of_mem_set 3084                   __end_of_pf_read 1278  
                 __end_of_pf_open 1DE6          __size_of_escreve_cmd_lcd 008C  
                           _reset 298E                     _controle_shrc 324C  
                           pclath 000FFA                             tablat 000FF5  
                 __end_of_proceed 324C                             plusw2 000FDB  
                           status 000FD8                             wtemp6 0047  
                  disk_readp@buff 006F                     disk_writep@sc 0063  
                   disk_writep@wr 0060                   __initialization 2D64  
             disk_initialize@buff 0069               disk_initialize@stat 0066  
                    __end_of_main 3058                      clust2sect@fs 002A  
              _inicializa_tarefas 2FEC                   escalonador@cont 00D4  
                          ??_main 002D               disk_readp@start_add 006B  
                   __activetblptr 000002               ?_inicializa_tarefas 0001  
                          ?_delay 0001            ?_escreve_caractere_lcd 0001  
                          _ADCON0 000FC2                            _ADCON1 000FC1  
                  ?_controle_shrc 0001                            _ADRESH 000FC4  
                          _ADRESL 000FC3                            ?_reset 0001  
                          _INT0IE 007F94                            _INT0IF 007F91  
                   ?_dummy_clocks 0001                            _PCLATH 000FFA  
                          _INTCON 000FF2                            i2l5588 2328  
         __size_of_inicializa_SPI 0064                            _TMR0IF 007F92  
                          _TMR2IF 007CF1                            _SDCard 19D8  
        __end_of_recebe_dado_uart 3226           __size_of_inicializa_adc 0022  
                          _SPPCFG 000F63                            _SPPCON 000F65  
                          _SSPBUF 000FC9                  __end_of_check_fs 1C96  
            ??_inicializa_tarefas 001A              __size_of_create_name 0144  
        __size_of_disk_initialize 0266        __end_of_posicao_cursor_lcd 2CFA  
                __end_of_dir_find 25F4                  __end_of_dir_next 19D8  
          __size_of_init_hardware 001A                            _Result 0042  
                          ___lmul 2E2C                         ??___aldiv 0022  
            __size_of_disk_writep 013A                         ??___lldiv 0022  
                          _folder 0100                            _estado 0044  
                __end_of_init_lcd 298E                            clear_0 2D8C  
                          clear_1 2D9E                            clear_2 2DB4  
                __end_of_pf_mount 0646                  __end_of_readover 3262  
                __end_of_pf_write 0B04          configura_baudrate_uart@x 0068  
                     pf_read@buff 009A                       pf_read@clst 00B5  
                     pf_read@sect 00AD                       pf_read@rcnt 00BA  
                       ??_get_fat 0076                         ??_command 0026  
                       ??_mem_cmp 0020                         ??_mem_set 0020  
                       ??_pf_read 00A0                         ??_pf_open 00BC  
            __size_of_escalonador 00A4                 ??_recebe_dado_SPI 001A  
                 acende_led4@flag 003D                  __end_of_response 3234  
                    __mediumconst 7E66                            reset@i 0028  
           write_timer_zero@timer 001C                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                       ??_proceed 0021                  _write_timer_zero 31DE  
                     pf_open@path 00BA         escreve_caractere_lcd@data 001C  
                  ??_dummy_clocks 0021                        __accesstop 0060  
         __end_of__initialization 2DBA                __size_of_WriteSPI_ 003C  
                     pf_mount@buf 0094                       pf_mount@fmt 00C8  
                 disk_readp@count 0068                     ___rparam_used 000001  
               ??_escreve_cmd_lcd 001C                    __pcstackCOMRAM 0001  
               ?_ativa_latch_shrc 0001       __end_of_endereco_cursor_lcd 2D64  
                    __pidataBANK1 31B2                 ?_mensagem_inicial 0001  
         _configura_baudrate_uart 2064                     __end_of_delay 30CC  
            __size_of_follow_path 0116                ??_ativa_latch_shrc 001A  
                   __end_of_reset 2A1E                ??_mensagem_inicial 0020  
                     pf_write@btw 009C                _tarefa_em_execucao 003E  
      __end_ofi2_write_timer_zero 3214   configura_baudrate_uart@baudrate 0028  
                 ??_controle_shrc 001C                     _init_hardware 314A  
              __size_of_get_clust 00C8                           ??_delay 001A  
                         ??_reset 0028      mensagem_inicial@msg_linha_um 0060  
                      __pbssBANK0 00D5                        __pbssBANK1 0100  
                  pf_write@remain 00AE    __size_of_escreve_frase_ram_lcd 0052  
   __end_of_escreve_frase_ram_lcd 2F28                           ?_SDCard 0001  
       escreve_inteiro_uart@F3956 01EC             __end_of_shrc_seta_bit 314A  
                         ?___lmul 001A          __end_of_envia_dados_shrc 2FB0  
           mensagem_inicial@F4027 7EF8             mensagem_inicial@F4029 7EE7  
         __size_of_shrc_apaga_bit 001E                 ??_disk_initialize 0060  
                  ___lmul@product 0022                 __end_of_WriteSPI_ 2FEC  
                      _dir_rewind 2196                           _INTCON2 000FF1  
                         _INTCON3 000FF0                    ?_init_hardware 0001  
                       ?_check_fs 0072                        _disk_readp 1278  
                   ??_acende_led4 001D                    follow_path@dir 00B5  
                  follow_path@res 00B9                         ?_dir_find 00AB  
                       ?_dir_next 009A                           _SSPCON1 000FC6  
        __size_of_inicializa_shrc 0008          __size_of_inicializa_uart 0022  
                      _clust2sect 2788                    _inicializa_SPI 2DC8  
                  _inicializa_adc 30CC                         ?_init_lcd 0001  
                 __size_of_SDCard 0162                         ?_pf_mount 007C  
                       ?_readover 001A                         ?_pf_write 009A  
                         __Hparam 0000         ??_configura_baudrate_uart 0060  
                         __Lparam 0000                   _dir_rewind$1957 006B  
               __end_of_get_clust 2788                         ?_response 0001  
                         ___aldiv 25F4         shrc_apaga_bit@posicao_bit 001C  
                 __size_of___lmul 0056                           ___lldiv 2AAA  
            __end_of_dummy_clocks 2F6C                           __pcinit 2D64  
                      _init_ports 3164                           __ramtop 0800  
                    _get_fat$1897 008C                           __ptext0 3026  
                         __ptext1 2B2C                           __ptext2 28F2  
                         __ptext3 314A                           __ptext4 3164  
                         __ptext5 3262                           __ptext6 317E  
                         __ptext7 30CC                           __ptext8 3198  
                         __ptext9 31DE                           _get_fat 0B04  
                         _command 2E82                         _T0CONbits 000FD5  
                         _mem_cmp 2C1A           i2write_timer_zero@timer 0003  
     endereco_cursor_lcd@endereco 001C                           _mem_set 3058  
                         _pf_read 0EE8                      __size_of_isr 23D6  
         ??_escreve_caractere_lcd 001C                           _pf_open 1C96  
                      ??_check_fs 0078                  ___aldiv@dividend 001A  
                         _proceed 3240           __size_of_init_interrupt 001A  
                      ??_dir_find 00AF                        ??_dir_next 009C  
          __end_of_inicializa_SPI 2E2C                      pf_read@rbuff 00A9  
          __end_of_inicializa_adc 30EE                    __pintcode_body 22C0  
            end_of_initialization 2DBA                           isr@cont 0019  
      __end_ofleitura_chave@F3840 7F2B               __end_of_acende_led4 30A8  
      __end_ofleitura_chave@F3842 7F1A        __end_ofleitura_chave@F3838 7F3C  
         __size_of_init_oscilador 0008                     SDCard@FResult 01AE  
                   __Lmediumconst 7E66                        ??_init_lcd 001D  
                         int_func 22C0                 ?_recebe_dado_uart 0001  
                      ??_pf_mount 007E                        ??_readover 001C  
                      ??_pf_write 00A0            write_timer_zero@timer0 001A  
                 ___lldiv@divisor 001E                ??_recebe_dado_uart 0001  
                 ___lldiv@counter 0026          envia_dados_shrc@contador 001A  
                      ??_response 001B                         _RCSTAbits 000FAB  
        __end_of_write_timer_zero 31F0                  ___aldiv@quotient 0024  
                         postdec1 000FE5                           postdec2 000FDD  
                 _recebe_dado_SPI 31F0                           postinc0 000FEE  
                         postinc1 000FE6                           postinc2 000FDE  
                      dir_find@dj 00AB                         _PORTAbits 000F80  
                       _PORTCbits 000F82                         _PORTDbits 000F83  
                       _PORTEbits 000F84                   ??_init_hardware 001E  
              _posicao_cursor_lcd 2C8A                       ?_dir_rewind 0065  
                      dir_next@dj 009A                        dir_next@fs 00A3  
 __end_of_configura_baudrate_uart 2196                       ?_disk_readp 0060  
                       _TRISCbits 000F94                         _TRISDbits 000F95  
                      get_fat@buf 0092                        get_fat@ofs 0090  
                 _escreve_cmd_lcd 2A1E               ?_posicao_cursor_lcd 001D  
                 ?_inicializa_SPI 0001                  WriteSPI_@TempVar 001F  
                 ?_inicializa_adc 0001                       ?_clust2sect 0026  
                      command@CMD 0026                        command@CRC 0025  
                disk_readp@length 0070                  disk_readp@offset 0066  
                disk_readp@sector 0062                     ??_create_name 0026  
                      command@arg 0021                  disk_initialize@i 0062  
                 disk_writep@buff 006B                 ??_inicializa_shrc 001A  
               ??_inicializa_uart 002C       __size_of_inicializa_tarefas 003A  
                  __end_of_SDCard 1B3A                     ??_disk_writep 0028  
                 command@argument 0027              ??_posicao_cursor_lcd 001E  
                  _shrc_apaga_bit 3110             disk_initialize@count1 0064  
           disk_initialize@count2 0067                    __end_of___lmul 2E82  
                   ??_escalonador 00D2                       ?_init_ports 0001  
                  clust2sect@clst 0026               start_initialization 2D64  
                   WriteSPI_@dado 0020         __size_of_ativa_latch_shrc 0014  
                     _acende_led4 3084                       __end_of_isr 23DE  
       __size_of_mensagem_inicial 007C                        mem_cmp@cnt 001E  
                      mem_cmp@dst 001A                      pf_write@buff 009A  
                      mem_cmp@src 001C                      pf_write@clst 00B2  
                    pf_write@sect 00AA                      pf_write@wcnt 00B7  
                        ??_SDCard 002D                i2_write_timer_zero 3202  
         __end_of_recebe_dado_SPI 3202                   _disk_initialize 15B6  
                      mem_set@cnt 001E                        mem_set@dst 001A  
                      mem_set@val 001C               __size_of_dir_rewind 012A  
                _data_uart_recebe 0040             __size_of_dummy_clocks 0044  
                   ??_follow_path 002D            __end_of_shrc_apaga_bit 312E  
             __size_of_disk_readp 033E               __end_of_create_name 1F2A  
             ?i2_write_timer_zero 0001                          ??___lmul 0022  
               ?_envia_dados_shrc 0001                        pf_read@btr 009C  
                     __pdataBANK1 01DB               __size_of_clust2sect 00C6  
             __end_of_disk_writep 2064                ??_envia_dados_shrc 001A  
                      pf_open@dir 017B                        pf_open@res 019B  
         __end_of_escreve_cmd_lcd 2AAA      __size_of_endereco_cursor_lcd 006A  
                     __pbssBIGRAM 01F3                        pf_mount@fs 007C  
                     __pbssCOMRAM 002D                      _pf_read$2151 00AB  
                   __pcstackBANK0 0060                     __pcstackBANK1 016F  
                  _init_interrupt 317E              ??i2_write_timer_zero 0003  
             __end_of_escalonador 28F2                         _WriteSPI_ 2FB0  
               __size_of_check_fs 015C             __end_of_controle_shrc 3258  
                    check_fs@sect 0074                        pf_write@cs 00B6  
                      pf_write@bw 009E                        pf_write@fs 00B9  
               __size_of_dir_find 0100                      _dummy_clocks 2F28  
                  _init_oscilador 3262                 __size_of_dir_next 01BC  
             __size_of_init_ports 001A             _escreve_frase_ram_lcd 2ED6  
               __size_of_init_lcd 009C                 delay@contador_int 001B  
               delay@contador_ext 001A                 __size_of_pf_mount 0634  
               __size_of_readover 000A                   ?_shrc_apaga_bit 0001  
               __size_of_pf_write 04BE                         __pintcode 0008  
                   __pmediumconst 7E66                          SDCard@br 01AF  
                        SDCard@fs 01B1                          ?___aldiv 001A  
                        ?___lldiv 001A                 __size_of_response 000E  
                       _get_clust 26C0                     follow_path@dj 00B3  
              _sinaliza_int_timer 003F               __end_of_follow_path 24F4  
                        ?_get_fat 0072                          ?_command 0021  
                        ?_mem_cmp 001A            __end_of_init_interrupt 3198  
                        ?_mem_set 001A                          ?_pf_read 009A  
                        ?_pf_open 00BA                        reset@count 002A  
  __size_of_escreve_caractere_lcd 0072                        ?_WriteSPI_ 0001  
   __end_of_escreve_caractere_lcd 2C1A                          ?_proceed 0001  
                  __size_of_delay 0024           __end_of_disk_initialize 181C  
          __end_of_init_oscilador 326A            __size_of_shrc_seta_bit 001C  
                  __size_of_reset 0090                         _p_tarefas 00D5  
                 ___aldiv@divisor 001E                   ___aldiv@counter 0022  
                     _create_name 1DE6                          _LATBbits 000F8A  
                ?_recebe_dado_SPI 0001                          _IPR1bits 000F9F  
                        _PIE1bits 000F9D                   follow_path@path 00B7  
                        _PIR1bits 000F9E                       _disk_writep 1F2A  
                        i2u586_40 2362                          _RCONbits 000FD0  
               ?_write_timer_zero 001A                         dir_find@c 00B1  
              leitura_chave@F3840 7F1A                leitura_chave@F3842 7F09  
              leitura_chave@F3838 7F2B          posicao_cursor_lcd@coluna 001D  
                       dir_next@i 00A9                ??_write_timer_zero 001C  
      posicao_cursor_lcd@endereco 001F                        ?_get_clust 001A  
                       get_fat@bc 0096                         get_fat@fs 0098  
       __size_of_recebe_dado_uart 0012                         get_fat@wc 008E  
                     _escalonador 284E                        _ADCON0bits 000FC2  
                      _ADCON1bits 000FC1                        _ADCON2bits 000FC0  
                ?_escreve_cmd_lcd 0001                      ??_dir_rewind 0067  
     escreve_frase_ram_lcd@buffer 001D                  ??_inicializa_SPI 0020  
                 ?_init_interrupt 0001                  ??_inicializa_adc 001A  
                    ??_disk_readp 0028                  _ativa_latch_shrc 31CA  
                 _inicializa_shrc 326A                   _inicializa_uart 30EE  
                _mensagem_inicial 2B2C                   ?_init_oscilador 0001  
                    ??_clust2sect 0060                 ___lmul@multiplier 001A  
                       copy_data0 2D78          ?_configura_baudrate_uart 0028  
          ?_escreve_frase_ram_lcd 001D          escreve_inteiro_lcd@F3966 01E5  
                        __Hrparam 0000                __end_of_dir_rewind 22C0  
                     _info_chaves 0144                          __Lrparam 0000  
                     _follow_path 23DE                __end_of_disk_readp 15B6  
                       pf_read@br 009E                         pf_read@cs 00B9  
                       pf_read@dr 00A8                         pf_read@fs 00BC  
                   _shrc_seta_bit 312E                         pf_open@dj 019E  
                       pf_open@fs 019C                         pf_open@sp 016F  
                __size_of___aldiv 00CC                  __size_of___lldiv 0082  
                    ??_init_ports 001A                __end_of_clust2sect 284E  
          inicializa_SPI@SPI_mode 0020                       check_fs@buf 0072  
                       readover@a 001A                         pf_write@p 00A8  
                __size_of_get_fat 03E4                  __size_of_command 0054  
           __end_of_init_hardware 3164                          _check_fs 1B3A  
                __size_of_mem_cmp 0070                  __size_of_mem_set 002C  
                __size_of_pf_read 0390                  __size_of_pf_open 0150  
                    ?_acende_led4 0001                       ??_WriteSPI_ 001D  
                        _fileName 01DB                          __ptext10 3234  
                        __ptext11 30EE                          __ptext20 3110  
                        __ptext12 2064                          __ptext21 3258  
                        __ptext13 25F4                          __ptext30 2196  
                        __ptext22 0646                          __ptext14 2FEC  
                        __ptext31 181C                          __ptext23 1F2A  
                        __ptext15 326A                          __ptext40 1B3A  
                        __ptext32 0B04                          __ptext24 0EE8  
                        __ptext16 2DC8                          __ptext41 1278  
                        __ptext33 2788                          __ptext25 1C96  
                        __ptext17 284E                          __ptext50 2BA8  
                        __ptext42 3226                          __ptext34 1DE6  
                        __ptext26 23DE                          __ptext18 19D8  
                        __ptext51 30A8                          __ptext43 31F0  
                        __ptext35 3058                          __ptext27 26C0  
                        __ptext19 3084                          __ptext60 3202  
                        __ptext52 2FB0                          __ptext44 3240  
                        __ptext36 0012                          __ptext28 24F4  
                        __ptext61 3214                          __ptext53 312E  
                        __ptext45 2F28                          __ptext37 15B6  
                        __ptext29 2C1A                          __ptext62 0000  
                        __ptext54 324C                          __ptext46 2E82  
                        __ptext38 298E                          __ptext55 2F6C  
                        __ptext47 2C8A                          __ptext39 2A1E  
                        __ptext56 31CA                          __ptext48 2CFA  
                        __ptext57 2E2C                          __ptext49 2ED6  
                        __ptext58 2AAA                          _dir_find 24F4  
                        _fileSize 0031                          _dir_next 181C  
                __size_of_proceed 000C                  ?_disk_initialize 0001  
                  _timeout_tarefa 0037                         reset@buff 002C  
      __end_of_inicializa_tarefas 3026          i2write_timer_zero@timer0 0001  
                        _init_lcd 28F2                     __size_of_main 0032  
                        _pf_mount 0012                          _readover 3258  
             _endereco_cursor_lcd 2CFA                          _pf_write 0646  
              __end_of_init_ports 317E                     dummy_clocks@i 0024  
                   dummy_clocks@n 0023          shrc_seta_bit@posicao_bit 001C  
                  ?_shrc_seta_bit 0001                          _response 3226  
     __size_of_posicao_cursor_lcd 0070                          int$flags 0046  
         posicao_cursor_lcd@linha 001E                     pf_read@remain 00B1  
                     ??_get_clust 001E           __end_of_inicializa_shrc 3272  
         __end_of_inicializa_uart 3110              ?_endereco_cursor_lcd 0001  
                        mem_cmp@d 0023                          mem_cmp@r 0027  
                        mem_cmp@s 0025                        _INTCONbits 000FF2  
                        mem_set@d 0020         __size_of_envia_dados_shrc 0044  
               _config_timer_dois 3234                      _tempo_backup 014B  
               _config_timer_zero 3198                          intlevel2 0000  
              ?_config_timer_dois 0001          mensagem_inicial@msg_dois 0071  
              ?_config_timer_zero 0001                      _tempo_tarefa 002D  
    envia_dados_shrc@data_to_shrc 001B                  ??_shrc_apaga_bit 001A  
                ___lldiv@dividend 001A               ??_config_timer_dois 001A  
                      _OSCCONbits 000FD3               ??_config_timer_zero 001E  
                _recebe_dado_uart 3214             ??_endereco_cursor_lcd 001C  
                    response@buff 001B                  ___lldiv@quotient 0022  
                  dir_rewind@clst 0071                       dir_find@dir 00AD  
                     dir_find@res 00B2         __end_of_config_timer_dois 3240  
                    ___aldiv@sign 0023         __end_of_config_timer_zero 31B2  
     __size_ofi2_write_timer_zero 0012                       _SSPCON1bits 000FC6  
                    dir_next@clst 00A5            escreve_cmd_lcd@comando 001C  
         recebe_dado_SPI@temp_var 001A                      ?_create_name 0022  
                    dir_rewind@dj 0065                      dir_rewind@fs 006F  
                 ??_shrc_seta_bit 001A     __end_ofmensagem_inicial@F4027 7F09  
   __end_ofmensagem_inicial@F4029 7EF8                      ?_disk_writep 0060  
        __end_of_ativa_latch_shrc 31DE  
