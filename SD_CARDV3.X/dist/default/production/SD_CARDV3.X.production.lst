

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Jan 20 15:40:50 2022

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    79                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    85                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    86  0000                     
    87                           ; Version 1.45
    88                           ; Generated 16/11/2017 GMT
    89                           ; 
    90                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    91                           ; All rights reserved.
    92                           ; 
    93                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    94                           ; 
    95                           ; Redistribution and use in source and binary forms, with or without modification, are
    96                           ; permitted provided that the following conditions are met:
    97                           ; 
    98                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    99                           ;        conditions and the following disclaimer.
   100                           ; 
   101                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   102                           ;        of conditions and the following disclaimer in the documentation and/or other
   103                           ;        materials provided with the distribution.
   104                           ; 
   105                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   106                           ;        software without specific prior written permission.
   107                           ; 
   108                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   109                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   110                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   111                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   112                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   113                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   114                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   115                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   116                           ; 
   117                           ; 
   118                           ; Code-generator required, PIC18F4550 Definitions
   119                           ; 
   120                           ; SFR Addresses
   121  0000                     
   122                           	psect	idataBANK1
   123  0033F6                     __pidataBANK1:
   124                           	opt stack 0
   125                           
   126                           ;initializer for _fileName
   127  0033F6  63                 	db	99
   128  0033F7  68                 	db	104
   129  0033F8  65                 	db	101
   130  0033F9  63                 	db	99
   131  0033FA  6B                 	db	107
   132  0033FB  2E                 	db	46
   133  0033FC  74                 	db	116
   134  0033FD  78                 	db	120
   135  0033FE  74                 	db	116
   136  0033FF  00                 	db	0
   137                           
   138                           ;initializer for escreve_inteiro_lcd@F3966
   139  003400  30                 	db	48
   140  003401  30                 	db	48
   141  003402  30                 	db	48
   142  003403  30                 	db	48
   143  003404  30                 	db	48
   144  003405  30                 	db	48
   145  003406  00                 	db	0
   146                           
   147                           ;initializer for escreve_inteiro_uart@F3956
   148  003407  30                 	db	48
   149  003408  30                 	db	48
   150  003409  30                 	db	48
   151  00340A  30                 	db	48
   152  00340B  30                 	db	48
   153  00340C  30                 	db	48
   154  00340D  00                 	db	0
   155                           
   156                           	psect	mediumconst
   157  0060D0                     __pmediumconst:
   158                           	opt stack 0
   159  0060D0  00                 	db	0
   160  0060D1                     create_name@cvt:
   161                           	opt stack 0
   162  0060D1  80                 	db	128
   163  0060D2  9A                 	db	154
   164  0060D3  90                 	db	144
   165  0060D4  41                 	db	65
   166  0060D5  8E                 	db	142
   167  0060D6  41                 	db	65
   168  0060D7  8F                 	db	143
   169  0060D8  80                 	db	128
   170  0060D9  45                 	db	69
   171  0060DA  45                 	db	69
   172  0060DB  45                 	db	69
   173  0060DC  49                 	db	73
   174  0060DD  49                 	db	73
   175  0060DE  49                 	db	73
   176  0060DF  8E                 	db	142
   177  0060E0  8F                 	db	143
   178  0060E1  90                 	db	144
   179  0060E2  92                 	db	146
   180  0060E3  92                 	db	146
   181  0060E4  4F                 	db	79
   182  0060E5  99                 	db	153
   183  0060E6  4F                 	db	79
   184  0060E7  55                 	db	85
   185  0060E8  55                 	db	85
   186  0060E9  59                 	db	89
   187  0060EA  99                 	db	153
   188  0060EB  9A                 	db	154
   189  0060EC  9B                 	db	155
   190  0060ED  9C                 	db	156
   191  0060EE  9D                 	db	157
   192  0060EF  9E                 	db	158
   193  0060F0  9F                 	db	159
   194  0060F1  41                 	db	65
   195  0060F2  49                 	db	73
   196  0060F3  4F                 	db	79
   197  0060F4  55                 	db	85
   198  0060F5  A5                 	db	165
   199  0060F6  A5                 	db	165
   200  0060F7  A6                 	db	166
   201  0060F8  A7                 	db	167
   202  0060F9  A8                 	db	168
   203  0060FA  A9                 	db	169
   204  0060FB  AA                 	db	170
   205  0060FC  AB                 	db	171
   206  0060FD  AC                 	db	172
   207  0060FE  21                 	db	33
   208  0060FF  AE                 	db	174
   209  006100  AF                 	db	175
   210  006101  B0                 	db	176
   211  006102  B1                 	db	177
   212  006103  B2                 	db	178
   213  006104  B3                 	db	179
   214  006105  B4                 	db	180
   215  006106  B5                 	db	181
   216  006107  B6                 	db	182
   217  006108  B7                 	db	183
   218  006109  B8                 	db	184
   219  00610A  B9                 	db	185
   220  00610B  BA                 	db	186
   221  00610C  BB                 	db	187
   222  00610D  BC                 	db	188
   223  00610E  BD                 	db	189
   224  00610F  BE                 	db	190
   225  006110  BF                 	db	191
   226  006111  C0                 	db	192
   227  006112  C1                 	db	193
   228  006113  C2                 	db	194
   229  006114  C3                 	db	195
   230  006115  C4                 	db	196
   231  006116  C5                 	db	197
   232  006117  C6                 	db	198
   233  006118  C7                 	db	199
   234  006119  C8                 	db	200
   235  00611A  C9                 	db	201
   236  00611B  CA                 	db	202
   237  00611C  CB                 	db	203
   238  00611D  CC                 	db	204
   239  00611E  CD                 	db	205
   240  00611F  CE                 	db	206
   241  006120  CF                 	db	207
   242  006121  D0                 	db	208
   243  006122  D1                 	db	209
   244  006123  D2                 	db	210
   245  006124  D3                 	db	211
   246  006125  D4                 	db	212
   247  006126  D5                 	db	213
   248  006127  D6                 	db	214
   249  006128  D7                 	db	215
   250  006129  D8                 	db	216
   251  00612A  D9                 	db	217
   252  00612B  DA                 	db	218
   253  00612C  DB                 	db	219
   254  00612D  DC                 	db	220
   255  00612E  DD                 	db	221
   256  00612F  DE                 	db	222
   257  006130  DF                 	db	223
   258  006131  E0                 	db	224
   259  006132  E1                 	db	225
   260  006133  E2                 	db	226
   261  006134  E3                 	db	227
   262  006135  E4                 	db	228
   263  006136  E5                 	db	229
   264  006137  E6                 	db	230
   265  006138  E7                 	db	231
   266  006139  E8                 	db	232
   267  00613A  E9                 	db	233
   268  00613B  EA                 	db	234
   269  00613C  EB                 	db	235
   270  00613D  EC                 	db	236
   271  00613E  ED                 	db	237
   272  00613F  EE                 	db	238
   273  006140  EF                 	db	239
   274  006141  F0                 	db	240
   275  006142  F1                 	db	241
   276  006143  F2                 	db	242
   277  006144  F3                 	db	243
   278  006145  F4                 	db	244
   279  006146  F5                 	db	245
   280  006147  F6                 	db	246
   281  006148  F7                 	db	247
   282  006149  F8                 	db	248
   283  00614A  F9                 	db	249
   284  00614B  FA                 	db	250
   285  00614C  FB                 	db	251
   286  00614D  FC                 	db	252
   287  00614E  FD                 	db	253
   288  00614F  FE                 	db	254
   289  006150  FF                 	db	255
   290  006151                     __end_ofcreate_name@cvt:
   291                           	opt stack 0
   292  006151                     mensagem_inicial@F4039:
   293                           	opt stack 0
   294  006151  20                 	db	32
   295  006152  31                 	db	49
   296  006153  38                 	db	56
   297  006154  2F                 	db	47
   298  006155  30                 	db	48
   299  006156  31                 	db	49
   300  006157  2F                 	db	47
   301  006158  32                 	db	50
   302  006159  30                 	db	48
   303  00615A  32                 	db	50
   304  00615B  32                 	db	50
   305  00615C  20                 	db	32
   306  00615D  20                 	db	32
   307  00615E  20                 	db	32
   308  00615F  00                 	db	0
   309  006160  00                 	db	0
   310  006161  00                 	db	0
   311  006162                     __end_ofmensagem_inicial@F4039:
   312                           	opt stack 0
   313  006162                     mensagem_inicial@F4037:
   314                           	opt stack 0
   315  006162  53                 	db	83
   316  006163  44                 	db	68
   317  006164  43                 	db	67
   318  006165  61                 	db	97
   319  006166  72                 	db	114
   320  006167  64                 	db	100
   321  006168  20                 	db	32
   322  006169  49                 	db	73
   323  00616A  6E                 	db	110
   324  00616B  69                 	db	105
   325  00616C  74                 	db	116
   326  00616D  20                 	db	32
   327  00616E  20                 	db	32
   328  00616F  20                 	db	32
   329  006170  00                 	db	0
   330  006171  00                 	db	0
   331  006172  00                 	db	0
   332  006173                     __end_ofmensagem_inicial@F4037:
   333                           	opt stack 0
   334  006173                     leitura_chave@F3842:
   335                           	opt stack 0
   336  006173  20                 	db	32
   337  006174  49                 	db	73
   338  006175  67                 	db	103
   339  006176  6E                 	db	110
   340  006177  20                 	db	32
   341  006178  4F                 	db	79
   342  006179  6E                 	db	110
   343  00617A  00                 	db	0
   344  00617B  00                 	db	0
   345  00617C  00                 	db	0
   346  00617D  00                 	db	0
   347  00617E  00                 	db	0
   348  00617F  00                 	db	0
   349  006180  00                 	db	0
   350  006181  00                 	db	0
   351  006182  00                 	db	0
   352  006183  00                 	db	0
   353  006184                     __end_ofleitura_chave@F3842:
   354                           	opt stack 0
   355  006184                     leitura_chave@F3840:
   356                           	opt stack 0
   357  006184  20                 	db	32
   358  006185  49                 	db	73
   359  006186  67                 	db	103
   360  006187  6E                 	db	110
   361  006188  20                 	db	32
   362  006189  43                 	db	67
   363  00618A  72                 	db	114
   364  00618B  61                 	db	97
   365  00618C  6E                 	db	110
   366  00618D  6B                 	db	107
   367  00618E  00                 	db	0
   368  00618F  00                 	db	0
   369  006190  00                 	db	0
   370  006191  00                 	db	0
   371  006192  00                 	db	0
   372  006193  00                 	db	0
   373  006194  00                 	db	0
   374  006195                     __end_ofleitura_chave@F3840:
   375                           	opt stack 0
   376  006195                     leitura_chave@F3838:
   377                           	opt stack 0
   378  006195  20                 	db	32
   379  006196  49                 	db	73
   380  006197  67                 	db	103
   381  006198  6E                 	db	110
   382  006199  20                 	db	32
   383  00619A  4F                 	db	79
   384  00619B  66                 	db	102
   385  00619C  66                 	db	102
   386  00619D  00                 	db	0
   387  00619E  00                 	db	0
   388  00619F  00                 	db	0
   389  0061A0  00                 	db	0
   390  0061A1  00                 	db	0
   391  0061A2  00                 	db	0
   392  0061A3  00                 	db	0
   393  0061A4  00                 	db	0
   394  0061A5  00                 	db	0
   395  0061A6                     __end_ofleitura_chave@F3838:
   396                           	opt stack 0
   397  0000                     _PORTDbits	set	3971
   398  0000                     _TRISDbits	set	3989
   399  0000                     _PCL	set	4089
   400  0000                     _PCLATH	set	4090
   401  0000                     _PIE1bits	set	3997
   402  0000                     _RCSTA	set	4011
   403  0000                     _TXSTA	set	4012
   404  0000                     _RCREG	set	4014
   405  0000                     _RCSTAbits	set	4011
   406  0000                     _TXREG	set	4013
   407  0000                     _SPBRG	set	4015
   408  0000                     _PR2	set	4043
   409  0000                     _TMR2	set	4044
   410  0000                     _T2CON	set	4042
   411  0000                     _OSCCONbits	set	4051
   412  0000                     _TRISE	set	3990
   413  0000                     _TRISC	set	3988
   414  0000                     _TRISA	set	3986
   415  0000                     _TRISD	set	3989
   416  0000                     _LATB	set	3978
   417  0000                     _TRISB	set	3987
   418  0000                     _T0CONbits	set	4053
   419  0000                     _TMR0L	set	4054
   420  0000                     _TMR0H	set	4055
   421  0000                     _PIE1	set	3997
   422  0000                     _INTCON3	set	4080
   423  0000                     _INTCON2	set	4081
   424  0000                     _INTCON	set	4082
   425  0000                     _SPPCFG	set	3939
   426  0000                     _SPPCON	set	3941
   427  0000                     _T0CON	set	4053
   428  0000                     _PORTEbits	set	3972
   429  0000                     _PORTAbits	set	3968
   430  0000                     _PORTCbits	set	3970
   431  0000                     _ADRESL	set	4035
   432  0000                     _ADRESH	set	4036
   433  0000                     _ADCON0	set	4034
   434  0000                     _ADCON0bits	set	4034
   435  0000                     _ADCON2bits	set	4032
   436  0000                     _ADCON1bits	set	4033
   437  0000                     _ADCON1	set	4033
   438  0000                     _SSPBUF	set	4041
   439  0000                     _PIR1bits	set	3998
   440  0000                     _TRISCbits	set	3988
   441  0000                     _SSPSTATbits	set	4039
   442  0000                     _TRISBbits	set	3987
   443  0000                     _SSPCON1	set	4038
   444  0000                     _SSPSTAT	set	4039
   445  0000                     _SSPCON1bits	set	4038
   446  0000                     _INTCONbits	set	4082
   447  0000                     _LATBbits	set	3978
   448  0000                     _INT0IE	set	32660
   449  0000                     _INT0IF	set	32657
   450  0000                     _T0IF	set	32658
   451  0000                     _TMR0IF	set	32658
   452  0000                     _RCIF	set	31989
   453  0000                     _TRMT	set	32097
   454  0000                     _TXEN	set	32101
   455  0000                     _CREN	set	32092
   456  0000                     _SPEN	set	32095
   457  0000                     _SYNC	set	32100
   458  0000                     _BRGH	set	32098
   459  0000                     _TMR2IF	set	31985
   460  0061A6                     STR_5:
   461  0061A6  73                 	db	115	;'s'
   462  0061A7  79                 	db	121	;'y'
   463  0061A8  73                 	db	115	;'s'
   464  0061A9  74                 	db	116	;'t'
   465  0061AA  20                 	db	32
   466  0061AB  69                 	db	105	;'i'
   467  0061AC  6E                 	db	110	;'n'
   468  0061AD  69                 	db	105	;'i'
   469  0061AE  63                 	db	99	;'c'
   470  0061AF  69                 	db	105	;'i'
   471  0061B0  61                 	db	97	;'a'
   472  0061B1  6C                 	db	108	;'l'
   473  0061B2  69                 	db	105	;'i'
   474  0061B3  7A                 	db	122	;'z'
   475  0061B4  65                 	db	101	;'e'
   476  0061B5  64                 	db	100	;'d'
   477  0061B6  00                 	db	0
   478  0061B7                     STR_1:
   479  0061B7  53                 	db	83	;'S'
   480  0061B8  50                 	db	80	;'P'
   481  0061B9  49                 	db	73	;'I'
   482  0061BA  20                 	db	32
   483  0061BB  63                 	db	99	;'c'
   484  0061BC  6F                 	db	111	;'o'
   485  0061BD  6E                 	db	110	;'n'
   486  0061BE  66                 	db	102	;'f'
   487  0061BF  69                 	db	105	;'i'
   488  0061C0  67                 	db	103	;'g'
   489  0061C1  75                 	db	117	;'u'
   490  0061C2  72                 	db	114	;'r'
   491  0061C3  61                 	db	97	;'a'
   492  0061C4  64                 	db	100	;'d'
   493  0061C5  61                 	db	97	;'a'
   494  0061C6  21                 	db	33
   495  0061C7  00                 	db	0
   496  0061C8                     STR_14:
   497  0061C8  61                 	db	97	;'a'
   498  0061C9  62                 	db	98	;'b'
   499  0061CA  72                 	db	114	;'r'
   500  0061CB  69                 	db	105	;'i'
   501  0061CC  72                 	db	114	;'r'
   502  0061CD  20                 	db	32
   503  0061CE  6F                 	db	111	;'o'
   504  0061CF  20                 	db	32
   505  0061D0  61                 	db	97	;'a'
   506  0061D1  72                 	db	114	;'r'
   507  0061D2  71                 	db	113	;'q'
   508  0061D3  75                 	db	117	;'u'
   509  0061D4  69                 	db	105	;'i'
   510  0061D5  76                 	db	118	;'v'
   511  0061D6  6F                 	db	111	;'o'
   512  0061D7  00                 	db	0
   513  0061D8                     STR_4:
   514  0061D8  6D                 	db	109	;'m'
   515  0061D9  6F                 	db	111	;'o'
   516  0061DA  75                 	db	117	;'u'
   517  0061DB  6E                 	db	110	;'n'
   518  0061DC  74                 	db	116	;'t'
   519  0061DD  20                 	db	32
   520  0061DE  66                 	db	102	;'f'
   521  0061DF  69                 	db	105	;'i'
   522  0061E0  6C                 	db	108	;'l'
   523  0061E1  65                 	db	101	;'e'
   524  0061E2  20                 	db	32
   525  0061E3  73                 	db	115	;'s'
   526  0061E4  79                 	db	121	;'y'
   527  0061E5  73                 	db	115	;'s'
   528  0061E6  00                 	db	0
   529  0061E7                     STR_18:
   530  0061E7  42                 	db	66	;'B'
   531  0061E8  79                 	db	121	;'y'
   532  0061E9  74                 	db	116	;'t'
   533  0061EA  65                 	db	101	;'e'
   534  0061EB  73                 	db	115	;'s'
   535  0061EC  20                 	db	32
   536  0061ED  63                 	db	99	;'c'
   537  0061EE  72                 	db	114	;'r'
   538  0061EF  69                 	db	105	;'i'
   539  0061F0  61                 	db	97	;'a'
   540  0061F1  64                 	db	100	;'d'
   541  0061F2  6F                 	db	111	;'o'
   542  0061F3  21                 	db	33
   543  0061F4  00                 	db	0
   544  0061F5                     STR_15:
   545  0061F5  43                 	db	67	;'C'
   546  0061F6  61                 	db	97	;'a'
   547  0061F7  72                 	db	114	;'r'
   548  0061F8  74                 	db	116	;'t'
   549  0061F9  E3                 	db	-29
   550  0061FA  6F                 	db	111	;'o'
   551  0061FB  20                 	db	32
   552  0061FC  41                 	db	65	;'A'
   553  0061FD  63                 	db	99	;'c'
   554  0061FE  65                 	db	101	;'e'
   555  0061FF  69                 	db	105	;'i'
   556  006200  74                 	db	116	;'t'
   557  006201  6F                 	db	111	;'o'
   558  006202  00                 	db	0
   559  006203                     STR_11:
   560  006203  45                 	db	69	;'E'
   561  006204  72                 	db	114	;'r'
   562  006205  72                 	db	114	;'r'
   563  006206  6F                 	db	111	;'o'
   564  006207  20                 	db	32
   565  006208  74                 	db	116	;'t'
   566  006209  65                 	db	101	;'e'
   567  00620A  6E                 	db	110	;'n'
   568  00620B  74                 	db	116	;'t'
   569  00620C  61                 	db	97	;'a'
   570  00620D  6E                 	db	110	;'n'
   571  00620E  64                 	db	100	;'d'
   572  00620F  6F                 	db	111	;'o'
   573  006210  00                 	db	0
   574  006211                     STR_3:
   575  006211  41                 	db	65	;'A'
   576  006212  74                 	db	116	;'t'
   577  006213  74                 	db	116	;'t'
   578  006214  65                 	db	101	;'e'
   579  006215  6D                 	db	109	;'m'
   580  006216  70                 	db	112	;'p'
   581  006217  74                 	db	116	;'t'
   582  006218  69                 	db	105	;'i'
   583  006219  6E                 	db	110	;'n'
   584  00621A  67                 	db	103	;'g'
   585  00621B  20                 	db	32
   586  00621C  74                 	db	116	;'t'
   587  00621D  6F                 	db	111	;'o'
   588  00621E  00                 	db	0
   589  00621F                     STR_12:
   590  00621F  6C                 	db	108	;'l'
   591  006220  65                 	db	101	;'e'
   592  006221  72                 	db	114	;'r'
   593  006222  20                 	db	32
   594  006223  6F                 	db	111	;'o'
   595  006224  20                 	db	32
   596  006225  61                 	db	97	;'a'
   597  006226  72                 	db	114	;'r'
   598  006227  71                 	db	113	;'q'
   599  006228  75                 	db	117	;'u'
   600  006229  69                 	db	105	;'i'
   601  00622A  76                 	db	118	;'v'
   602  00622B  6F                 	db	111	;'o'
   603  00622C  00                 	db	0
   604  00622D                     STR_10:
   605  00622D  6C                 	db	108	;'l'
   606  00622E  65                 	db	101	;'e'
   607  00622F  6E                 	db	110	;'n'
   608  006230  64                 	db	100	;'d'
   609  006231  6F                 	db	111	;'o'
   610  006232  20                 	db	32
   611  006233  61                 	db	97	;'a'
   612  006234  72                 	db	114	;'r'
   613  006235  71                 	db	113	;'q'
   614  006236  75                 	db	117	;'u'
   615  006237  69                 	db	105	;'i'
   616  006238  76                 	db	118	;'v'
   617  006239  6F                 	db	111	;'o'
   618  00623A  00                 	db	0
   619  00623B                     STR_17:
   620  00623B  42                 	db	66	;'B'
   621  00623C  6C                 	db	108	;'l'
   622  00623D  6F                 	db	111	;'o'
   623  00623E  63                 	db	99	;'c'
   624  00623F  6F                 	db	111	;'o'
   625  006240  20                 	db	32
   626  006241  64                 	db	100	;'d'
   627  006242  65                 	db	101	;'e'
   628  006243  20                 	db	32
   629  006244  35                 	db	53	;'5'
   630  006245  31                 	db	49	;'1'
   631  006246  32                 	db	50	;'2'
   632  006247  00                 	db	0
   633  006248                     STR_9:
   634  006248  53                 	db	83	;'S'
   635  006249  44                 	db	68	;'D'
   636  00624A  43                 	db	67	;'C'
   637  00624B  61                 	db	97	;'a'
   638  00624C  72                 	db	114	;'r'
   639  00624D  64                 	db	100	;'d'
   640  00624E  20                 	db	32
   641  00624F  65                 	db	101	;'e'
   642  006250  72                 	db	114	;'r'
   643  006251  72                 	db	114	;'r'
   644  006252  6F                 	db	111	;'o'
   645  006253  72                 	db	114	;'r'
   646  006254  00                 	db	0
   647  006255                     STR_6:
   648  006255  63                 	db	99	;'c'
   649  006256  68                 	db	104	;'h'
   650  006257  65                 	db	101	;'e'
   651  006258  63                 	db	99	;'c'
   652  006259  6B                 	db	107	;'k'
   653  00625A  2E                 	db	46
   654  00625B  74                 	db	116	;'t'
   655  00625C  78                 	db	120	;'x'
   656  00625D  74                 	db	116	;'t'
   657  00625E  00                 	db	0
   658  00625F                     STR_16:
   659  00625F  45                 	db	69	;'E'
   660  006260  72                 	db	114	;'r'
   661  006261  72                 	db	114	;'r'
   662  006262  6F                 	db	111	;'o'
   663  006263  72                 	db	114	;'r'
   664  006264  21                 	db	33
   665  006265  21                 	db	33
   666  006266  21                 	db	33
   667  006267  00                 	db	0
   668  006268                     STR_19:
   669  006268  49                 	db	73	;'I'
   670  006269  6E                 	db	110	;'n'
   671  00626A  69                 	db	105	;'i'
   672  00626B  74                 	db	116	;'t'
   673  00626C  20                 	db	32
   674  00626D  4F                 	db	79	;'O'
   675  00626E  4B                 	db	75	;'K'
   676  00626F  00                 	db	0
   677  006270                     STR_7:
   678  006270  53                 	db	83	;'S'
   679  006271  44                 	db	68	;'D'
   680  006272  5F                 	db	95	;'_'
   681  006273  43                 	db	67	;'C'
   682  006274  61                 	db	97	;'a'
   683  006275  72                 	db	114	;'r'
   684  006276  64                 	db	100	;'d'
   685  006277  00                 	db	0
   686  006278                     STR_20:
   687  006278  2E                 	db	46
   688  006279  2E                 	db	46
   689  00627A  00                 	db	0
   690  00627B  0D                 	db	13
   691  00627C  0A                 	db	10
   692  00627D  00                 	db	0
   693  0000                     
   694                           ; #config settings
   695  00627E  00                 	db	0	; dummy byte at the end
   696  0000                     
   697                           	psect	cinit
   698  002FA2                     __pcinit:
   699                           	opt stack 0
   700  002FA2                     start_initialization:
   701                           	opt stack 0
   702  002FA2                     __initialization:
   703                           	opt stack 0
   704                           
   705                           ; Initialize objects allocated to BANK1 (24 bytes)
   706                           ; load TBLPTR registers with __pidataBANK1
   707  002FA2  0EF6               	movlw	low __pidataBANK1
   708  002FA4  6EF6               	movwf	tblptrl,c
   709  002FA6  0E33               	movlw	high __pidataBANK1
   710  002FA8  6EF7               	movwf	tblptrh,c
   711  002FAA  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   712  002FAC  6EF8               	movwf	tblptru,c
   713  002FAE  EE01  F0D0         	lfsr	0,__pdataBANK1
   714  002FB2  EE10 F018          	lfsr	1,24
   715  002FB6                     copy_data0:
   716  002FB6  0009               	tblrd		*+
   717  002FB8  CFF5 FFEE          	movff	tablat,postinc0
   718  002FBC  50E5               	movf	postdec1,w,c
   719  002FBE  50E1               	movf	fsr1l,w,c
   720  002FC0  E1FA               	bnz	copy_data0
   721                           
   722                           ; Clear objects allocated to BIGRAM (512 bytes)
   723  002FC2  EE02  F02D         	lfsr	0,__pbssBIGRAM
   724  002FC6  EE12 F000          	lfsr	1,512
   725  002FCA                     clear_0:
   726  002FCA  6AEE               	clrf	postinc0,c
   727  002FCC  50E5               	movf	postdec1,w,c
   728  002FCE  50E1               	movf	fsr1l,w,c
   729  002FD0  E1FC               	bnz	clear_0
   730  002FD2  50E2               	movf	fsr1h,w,c
   731  002FD4  E1FA               	bnz	clear_0
   732                           
   733                           ; Clear objects allocated to BANK1 (145 bytes)
   734  002FD6  EE01  F000         	lfsr	0,__pbssBANK1
   735  002FDA  0E91               	movlw	145
   736  002FDC                     clear_1:
   737  002FDC  6AEE               	clrf	postinc0,c
   738  002FDE  06E8               	decf	wreg,f,c
   739  002FE0  E1FD               	bnz	clear_1
   740                           
   741                           ; Clear objects allocated to BANK0 (8 bytes)
   742  002FE2  EE00  F0D5         	lfsr	0,__pbssBANK0
   743  002FE6  0E08               	movlw	8
   744  002FE8                     clear_2:
   745  002FE8  6AEE               	clrf	postinc0,c
   746  002FEA  06E8               	decf	wreg,f,c
   747  002FEC  E1FD               	bnz	clear_2
   748                           
   749                           ; Clear objects allocated to COMRAM (25 bytes)
   750  002FEE  EE00  F02D         	lfsr	0,__pbssCOMRAM
   751  002FF2  0E19               	movlw	25
   752  002FF4                     clear_3:
   753  002FF4  6AEE               	clrf	postinc0,c
   754  002FF6  06E8               	decf	wreg,f,c
   755  002FF8  E1FD               	bnz	clear_3
   756  002FFA                     end_of_initialization:
   757                           	opt stack 0
   758  002FFA                     __end_of__initialization:
   759                           	opt stack 0
   760  002FFA  9046               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   761  002FFC  9246               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   762  002FFE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   763  003000  6EF8               	movwf	tblptru,c
   764  003002  0100               	movlb	0
   765  003004  EFFF  F018         	goto	_main	;jump to C main() function
   766                           tblptru	equ	0xFF8
   767                           tblptrh	equ	0xFF7
   768                           tblptrl	equ	0xFF6
   769                           tablat	equ	0xFF5
   770                           postinc0	equ	0xFEE
   771                           wreg	equ	0xFE8
   772                           postdec1	equ	0xFE5
   773                           fsr1h	equ	0xFE2
   774                           fsr1l	equ	0xFE1
   775                           
   776                           	psect	bssCOMRAM
   777  00002D                     __pbssCOMRAM:
   778                           	opt stack 0
   779  00002D                     _tempo_tarefa:
   780                           	opt stack 0
   781  00002D                     	ds	4
   782  000031                     _fileSize:
   783                           	opt stack 0
   784  000031                     	ds	4
   785  000035                     _FatFs:
   786                           	opt stack 0
   787  000035                     	ds	2
   788  000037                     _flag:
   789                           	opt stack 0
   790  000037                     	ds	2
   791  000039                     _timeout_tarefa:
   792                           	opt stack 0
   793  000039                     	ds	2
   794  00003B                     _rd:
   795                           	opt stack 0
   796  00003B                     	ds	2
   797  00003D                     acende_led4@flag:
   798                           	opt stack 0
   799  00003D                     	ds	1
   800  00003E                     _tarefa_em_execucao:
   801                           	opt stack 0
   802  00003E                     	ds	1
   803  00003F                     _sinaliza_int_timer:
   804                           	opt stack 0
   805  00003F                     	ds	1
   806  000040                     _data_uart_recebe:
   807                           	opt stack 0
   808  000040                     	ds	1
   809  000041                     _s:
   810                           	opt stack 0
   811  000041                     	ds	1
   812  000042                     _Result:
   813                           	opt stack 0
   814  000042                     	ds	1
   815  000043                     timer_dois@flag:
   816                           	opt stack 0
   817  000043                     	ds	1
   818  000044                     _estado:
   819                           	opt stack 0
   820  000044                     	ds	1
   821  000045                     _dado:
   822                           	opt stack 0
   823  000045                     	ds	1
   824                           tblptru	equ	0xFF8
   825                           tblptrh	equ	0xFF7
   826                           tblptrl	equ	0xFF6
   827                           tablat	equ	0xFF5
   828                           postinc0	equ	0xFEE
   829                           wreg	equ	0xFE8
   830                           postdec1	equ	0xFE5
   831                           fsr1h	equ	0xFE2
   832                           fsr1l	equ	0xFE1
   833                           
   834                           	psect	bssBANK0
   835  0000D5                     __pbssBANK0:
   836                           	opt stack 0
   837  0000D5                     _tempo_backup:
   838                           	opt stack 0
   839  0000D5                     	ds	4
   840  0000D9                     _p_tarefas:
   841                           	opt stack 0
   842  0000D9                     	ds	4
   843                           tblptru	equ	0xFF8
   844                           tblptrh	equ	0xFF7
   845                           tblptrl	equ	0xFF6
   846                           tablat	equ	0xFF5
   847                           postinc0	equ	0xFEE
   848                           wreg	equ	0xFE8
   849                           postdec1	equ	0xFE5
   850                           fsr1h	equ	0xFE2
   851                           fsr1l	equ	0xFE1
   852                           
   853                           	psect	bssBANK1
   854  000100                     __pbssBANK1:
   855                           	opt stack 0
   856  000100                     _folder:
   857                           	opt stack 0
   858  000100                     	ds	48
   859  000130                     _valor_leitura_adc:
   860                           	opt stack 0
   861  000130                     	ds	38
   862  000156                     _txt:
   863                           	opt stack 0
   864  000156                     	ds	20
   865  00016A                     _info_chaves:
   866                           	opt stack 0
   867  00016A                     	ds	7
   868  000171                     _data_buffer_32:
   869                           	opt stack 0
   870  000171                     	ds	32
   871                           tblptru	equ	0xFF8
   872                           tblptrh	equ	0xFF7
   873                           tblptrl	equ	0xFF6
   874                           tablat	equ	0xFF5
   875                           postinc0	equ	0xFEE
   876                           wreg	equ	0xFE8
   877                           postdec1	equ	0xFE5
   878                           fsr1h	equ	0xFE2
   879                           fsr1l	equ	0xFE1
   880                           
   881                           	psect	dataBANK1
   882  0001D0                     __pdataBANK1:
   883                           	opt stack 0
   884  0001D0                     _fileName:
   885                           	opt stack 0
   886  0001D0                     	ds	10
   887  0001DA                     escreve_inteiro_lcd@F3966:
   888                           	opt stack 0
   889  0001DA                     	ds	7
   890  0001E1                     escreve_inteiro_uart@F3956:
   891                           	opt stack 0
   892  0001E1                     	ds	7
   893                           tblptru	equ	0xFF8
   894                           tblptrh	equ	0xFF7
   895                           tblptrl	equ	0xFF6
   896                           tablat	equ	0xFF5
   897                           postinc0	equ	0xFEE
   898                           wreg	equ	0xFE8
   899                           postdec1	equ	0xFE5
   900                           fsr1h	equ	0xFE2
   901                           fsr1l	equ	0xFE1
   902                           
   903                           	psect	bssBIGRAM
   904  00022D                     __pbssBIGRAM:
   905                           	opt stack 0
   906  00022D                     disk_readp@arr:
   907                           	opt stack 0
   908  00022D                     	ds	512
   909                           tblptru	equ	0xFF8
   910                           tblptrh	equ	0xFF7
   911                           tblptrl	equ	0xFF6
   912                           tablat	equ	0xFF5
   913                           postinc0	equ	0xFEE
   914                           wreg	equ	0xFE8
   915                           postdec1	equ	0xFE5
   916                           fsr1h	equ	0xFE2
   917                           fsr1l	equ	0xFE1
   918                           
   919                           	psect	cstackBANK2
   920  000200                     __pcstackBANK2:
   921                           	opt stack 0
   922  000200                     SDCard@FResult:
   923                           	opt stack 0
   924                           
   925                           ; 1 bytes @ 0x0
   926  000200                     	ds	1
   927  000201                     SDCard@br:
   928                           	opt stack 0
   929                           
   930                           ; 2 bytes @ 0x1
   931  000201                     	ds	2
   932  000203                     SDCard@fs:
   933                           	opt stack 0
   934                           
   935                           ; 42 bytes @ 0x3
   936  000203                     	ds	42
   937                           tblptru	equ	0xFF8
   938                           tblptrh	equ	0xFF7
   939                           tblptrl	equ	0xFF6
   940                           tablat	equ	0xFF5
   941                           postinc0	equ	0xFEE
   942                           wreg	equ	0xFE8
   943                           postdec1	equ	0xFE5
   944                           fsr1h	equ	0xFE2
   945                           fsr1l	equ	0xFE1
   946                           
   947                           	psect	cstackBANK1
   948  000191                     __pcstackBANK1:
   949                           	opt stack 0
   950  000191                     pf_open@sp:
   951                           	opt stack 0
   952                           
   953                           ; 12 bytes @ 0x0
   954  000191                     	ds	12
   955  00019D                     pf_open@dir:
   956                           	opt stack 0
   957                           
   958                           ; 32 bytes @ 0xC
   959  00019D                     	ds	32
   960  0001BD                     pf_open@res:
   961                           	opt stack 0
   962                           
   963                           ; 1 bytes @ 0x2C
   964  0001BD                     	ds	1
   965  0001BE                     pf_open@fs:
   966                           	opt stack 0
   967                           
   968                           ; 2 bytes @ 0x2D
   969  0001BE                     	ds	2
   970  0001C0                     pf_open@dj:
   971                           	opt stack 0
   972                           
   973                           ; 16 bytes @ 0x2F
   974  0001C0                     	ds	16
   975                           tblptru	equ	0xFF8
   976                           tblptrh	equ	0xFF7
   977                           tblptrl	equ	0xFF6
   978                           tablat	equ	0xFF5
   979                           postinc0	equ	0xFEE
   980                           wreg	equ	0xFE8
   981                           postdec1	equ	0xFE5
   982                           fsr1h	equ	0xFE2
   983                           fsr1l	equ	0xFE1
   984                           
   985                           	psect	cstackBANK0
   986  000060                     __pcstackBANK0:
   987                           	opt stack 0
   988  000060                     ??_configura_baudrate_uart:
   989  000060                     ??_disk_initialize:
   990  000060                     ??_disk_writep:
   991  000060                     ??_clust2sect:
   992  000060                     create_name@d:
   993                           	opt stack 0
   994  000060                     disk_readp@rd:
   995                           	opt stack 0
   996  000060                     mensagem_inicial@msg_linha_um:
   997                           	opt stack 0
   998                           
   999                           ; 17 bytes @ 0x0
  1000  000060                     	ds	1
  1001  000061                     create_name@p:
  1002                           	opt stack 0
  1003                           
  1004                           ; 2 bytes @ 0x1
  1005  000061                     	ds	1
  1006  000062                     disk_initialize@i:
  1007                           	opt stack 0
  1008  000062                     disk_readp@sector:
  1009                           	opt stack 0
  1010                           
  1011                           ; 4 bytes @ 0x2
  1012  000062                     	ds	1
  1013  000063                     create_name@ni:
  1014                           	opt stack 0
  1015                           
  1016                           ; 1 bytes @ 0x3
  1017  000063                     	ds	1
  1018  000064                     create_name@si:
  1019                           	opt stack 0
  1020  000064                     disk_initialize@count1:
  1021                           	opt stack 0
  1022  000064                     disk_writep@i:
  1023                           	opt stack 0
  1024                           
  1025                           ; 2 bytes @ 0x4
  1026  000064                     	ds	1
  1027  000065                     dir_rewind@dj:
  1028                           	opt stack 0
  1029  000065                     create_name@sfn:
  1030                           	opt stack 0
  1031                           
  1032                           ; 2 bytes @ 0x5
  1033  000065                     	ds	1
  1034  000066                     disk_initialize@stat:
  1035                           	opt stack 0
  1036  000066                     disk_readp@offset:
  1037                           	opt stack 0
  1038  000066                     disk_writep@j:
  1039                           	opt stack 0
  1040                           
  1041                           ; 2 bytes @ 0x6
  1042  000066                     	ds	1
  1043  000067                     create_name@i:
  1044                           	opt stack 0
  1045  000067                     disk_initialize@count2:
  1046                           	opt stack 0
  1047                           
  1048                           ; 2 bytes @ 0x7
  1049  000067                     	ds	1
  1050  000068                     disk_writep@buff:
  1051                           	opt stack 0
  1052  000068                     create_name@c:
  1053                           	opt stack 0
  1054  000068                     configura_baudrate_uart@x:
  1055                           	opt stack 0
  1056  000068                     disk_readp@count:
  1057                           	opt stack 0
  1058                           
  1059                           ; 2 bytes @ 0x8
  1060  000068                     	ds	1
  1061  000069                     disk_initialize@buff:
  1062                           	opt stack 0
  1063                           
  1064                           ; 1 bytes @ 0x9
  1065  000069                     	ds	1
  1066  00006A                     disk_readp@ptr:
  1067                           	opt stack 0
  1068                           
  1069                           ; 1 bytes @ 0xA
  1070  00006A                     	ds	1
  1071  00006B                     disk_readp@start_add:
  1072                           	opt stack 0
  1073  00006B                     _dir_rewind$1885:
  1074                           	opt stack 0
  1075                           
  1076                           ; 4 bytes @ 0xB
  1077  00006B                     	ds	4
  1078  00006F                     disk_readp@buff:
  1079                           	opt stack 0
  1080  00006F                     dir_rewind@fs:
  1081                           	opt stack 0
  1082                           
  1083                           ; 2 bytes @ 0xF
  1084  00006F                     	ds	1
  1085  000070                     disk_readp@length:
  1086                           	opt stack 0
  1087                           
  1088                           ; 2 bytes @ 0x10
  1089  000070                     	ds	1
  1090  000071                     dir_rewind@clst:
  1091                           	opt stack 0
  1092  000071                     mensagem_inicial@msg_dois:
  1093                           	opt stack 0
  1094                           
  1095                           ; 17 bytes @ 0x11
  1096  000071                     	ds	1
  1097  000072                     ?_get_fat:
  1098                           	opt stack 0
  1099  000072                     check_fs@buf:
  1100                           	opt stack 0
  1101  000072                     get_fat@clst:
  1102                           	opt stack 0
  1103                           
  1104                           ; 4 bytes @ 0x12
  1105  000072                     	ds	2
  1106  000074                     check_fs@sect:
  1107                           	opt stack 0
  1108                           
  1109                           ; 4 bytes @ 0x14
  1110  000074                     	ds	2
  1111  000076                     ??_get_fat:
  1112                           
  1113                           ; 1 bytes @ 0x16
  1114  000076                     	ds	2
  1115  000078                     ??_check_fs:
  1116                           
  1117                           ; 1 bytes @ 0x18
  1118  000078                     	ds	4
  1119  00007C                     pf_mount@fs:
  1120                           	opt stack 0
  1121                           
  1122                           ; 2 bytes @ 0x1C
  1123  00007C                     	ds	2
  1124  00007E                     ??_pf_mount:
  1125                           
  1126                           ; 1 bytes @ 0x1E
  1127  00007E                     	ds	14
  1128  00008C                     _get_fat$1825:
  1129                           	opt stack 0
  1130                           
  1131                           ; 2 bytes @ 0x2C
  1132  00008C                     	ds	2
  1133  00008E                     get_fat@wc:
  1134                           	opt stack 0
  1135                           
  1136                           ; 2 bytes @ 0x2E
  1137  00008E                     	ds	2
  1138  000090                     get_fat@ofs:
  1139                           	opt stack 0
  1140                           
  1141                           ; 2 bytes @ 0x30
  1142  000090                     	ds	2
  1143  000092                     get_fat@buf:
  1144                           	opt stack 0
  1145                           
  1146                           ; 4 bytes @ 0x32
  1147  000092                     	ds	2
  1148  000094                     pf_mount@buf:
  1149                           	opt stack 0
  1150                           
  1151                           ; 36 bytes @ 0x34
  1152  000094                     	ds	2
  1153  000096                     get_fat@bc:
  1154                           	opt stack 0
  1155                           
  1156                           ; 2 bytes @ 0x36
  1157  000096                     	ds	2
  1158  000098                     get_fat@fs:
  1159                           	opt stack 0
  1160                           
  1161                           ; 2 bytes @ 0x38
  1162  000098                     	ds	2
  1163  00009A                     dir_next@dj:
  1164                           	opt stack 0
  1165  00009A                     pf_read@buff:
  1166                           	opt stack 0
  1167  00009A                     pf_write@buff:
  1168                           	opt stack 0
  1169                           
  1170                           ; 2 bytes @ 0x3A
  1171  00009A                     	ds	2
  1172  00009C                     ??_dir_next:
  1173  00009C                     pf_read@btr:
  1174                           	opt stack 0
  1175  00009C                     pf_write@btw:
  1176                           	opt stack 0
  1177                           
  1178                           ; 2 bytes @ 0x3C
  1179  00009C                     	ds	2
  1180  00009E                     pf_read@br:
  1181                           	opt stack 0
  1182  00009E                     pf_write@bw:
  1183                           	opt stack 0
  1184                           
  1185                           ; 2 bytes @ 0x3E
  1186  00009E                     	ds	2
  1187  0000A0                     ??_pf_write:
  1188  0000A0                     ??_pf_read:
  1189                           
  1190                           ; 1 bytes @ 0x40
  1191  0000A0                     	ds	3
  1192  0000A3                     dir_next@fs:
  1193                           	opt stack 0
  1194                           
  1195                           ; 2 bytes @ 0x43
  1196  0000A3                     	ds	2
  1197  0000A5                     dir_next@clst:
  1198                           	opt stack 0
  1199                           
  1200                           ; 4 bytes @ 0x45
  1201  0000A5                     	ds	3
  1202  0000A8                     pf_read@dr:
  1203                           	opt stack 0
  1204  0000A8                     pf_write@p:
  1205                           	opt stack 0
  1206                           
  1207                           ; 2 bytes @ 0x48
  1208  0000A8                     	ds	1
  1209  0000A9                     dir_next@i:
  1210                           	opt stack 0
  1211  0000A9                     pf_read@rbuff:
  1212                           	opt stack 0
  1213                           
  1214                           ; 2 bytes @ 0x49
  1215  0000A9                     	ds	1
  1216  0000AA                     pf_write@sect:
  1217                           	opt stack 0
  1218                           
  1219                           ; 4 bytes @ 0x4A
  1220  0000AA                     	ds	1
  1221  0000AB                     dir_find@dj:
  1222                           	opt stack 0
  1223  0000AB                     _pf_read$2079:
  1224                           	opt stack 0
  1225                           
  1226                           ; 2 bytes @ 0x4B
  1227  0000AB                     	ds	2
  1228  0000AD                     dir_find@dir:
  1229                           	opt stack 0
  1230  0000AD                     pf_read@sect:
  1231                           	opt stack 0
  1232                           
  1233                           ; 4 bytes @ 0x4D
  1234  0000AD                     	ds	1
  1235  0000AE                     pf_write@remain:
  1236                           	opt stack 0
  1237                           
  1238                           ; 4 bytes @ 0x4E
  1239  0000AE                     	ds	1
  1240  0000AF                     ??_dir_find:
  1241                           
  1242                           ; 1 bytes @ 0x4F
  1243  0000AF                     	ds	2
  1244  0000B1                     dir_find@c:
  1245                           	opt stack 0
  1246  0000B1                     pf_read@remain:
  1247                           	opt stack 0
  1248                           
  1249                           ; 4 bytes @ 0x51
  1250  0000B1                     	ds	1
  1251  0000B2                     dir_find@res:
  1252                           	opt stack 0
  1253  0000B2                     pf_write@clst:
  1254                           	opt stack 0
  1255                           
  1256                           ; 4 bytes @ 0x52
  1257  0000B2                     	ds	1
  1258  0000B3                     follow_path@dj:
  1259                           	opt stack 0
  1260                           
  1261                           ; 2 bytes @ 0x53
  1262  0000B3                     	ds	2
  1263  0000B5                     follow_path@dir:
  1264                           	opt stack 0
  1265  0000B5                     pf_read@clst:
  1266                           	opt stack 0
  1267                           
  1268                           ; 4 bytes @ 0x55
  1269  0000B5                     	ds	1
  1270  0000B6                     pf_write@cs:
  1271                           	opt stack 0
  1272                           
  1273                           ; 1 bytes @ 0x56
  1274  0000B6                     	ds	1
  1275  0000B7                     follow_path@path:
  1276                           	opt stack 0
  1277  0000B7                     pf_write@wcnt:
  1278                           	opt stack 0
  1279                           
  1280                           ; 2 bytes @ 0x57
  1281  0000B7                     	ds	1
  1282  0000B8                     pf_mount@tsect:
  1283                           	opt stack 0
  1284                           
  1285                           ; 4 bytes @ 0x58
  1286  0000B8                     	ds	1
  1287  0000B9                     follow_path@res:
  1288                           	opt stack 0
  1289  0000B9                     pf_read@cs:
  1290                           	opt stack 0
  1291  0000B9                     pf_write@fs:
  1292                           	opt stack 0
  1293                           
  1294                           ; 2 bytes @ 0x59
  1295  0000B9                     	ds	1
  1296  0000BA                     pf_open@path:
  1297                           	opt stack 0
  1298  0000BA                     pf_read@rcnt:
  1299                           	opt stack 0
  1300                           
  1301                           ; 2 bytes @ 0x5A
  1302  0000BA                     	ds	2
  1303  0000BC                     ??_pf_open:
  1304  0000BC                     pf_read@fs:
  1305                           	opt stack 0
  1306  0000BC                     pf_mount@mclst:
  1307                           	opt stack 0
  1308                           
  1309                           ; 4 bytes @ 0x5C
  1310  0000BC                     	ds	4
  1311  0000C0                     pf_mount@bsect:
  1312                           	opt stack 0
  1313                           
  1314                           ; 4 bytes @ 0x60
  1315  0000C0                     	ds	4
  1316  0000C4                     pf_mount@fsize:
  1317                           	opt stack 0
  1318                           
  1319                           ; 4 bytes @ 0x64
  1320  0000C4                     	ds	4
  1321  0000C8                     pf_mount@fmt:
  1322                           	opt stack 0
  1323                           
  1324                           ; 1 bytes @ 0x68
  1325  0000C8                     	ds	10
  1326  0000D2                     
  1327                           ; 1 bytes @ 0x72
  1328  0000D2                     	ds	2
  1329  0000D4                     escalonador@cont:
  1330                           	opt stack 0
  1331                           
  1332                           ; 1 bytes @ 0x74
  1333  0000D4                     	ds	1
  1334                           tblptru	equ	0xFF8
  1335                           tblptrh	equ	0xFF7
  1336                           tblptrl	equ	0xFF6
  1337                           tablat	equ	0xFF5
  1338                           postinc0	equ	0xFEE
  1339                           wreg	equ	0xFE8
  1340                           postdec1	equ	0xFE5
  1341                           fsr1h	equ	0xFE2
  1342                           fsr1l	equ	0xFE1
  1343                           
  1344                           	psect	cstackCOMRAM
  1345  000001                     __pcstackCOMRAM:
  1346                           	opt stack 0
  1347  000001                     i2write_timer_zero@timer0:
  1348                           	opt stack 0
  1349                           
  1350                           ; 2 bytes @ 0x0
  1351  000001                     	ds	2
  1352  000003                     i2write_timer_zero@timer:
  1353                           	opt stack 0
  1354                           
  1355                           ; 2 bytes @ 0x2
  1356  000003                     	ds	2
  1357  000005                     ??_isr:
  1358                           
  1359                           ; 1 bytes @ 0x4
  1360  000005                     	ds	20
  1361  000019                     isr@cont:
  1362                           	opt stack 0
  1363                           
  1364                           ; 1 bytes @ 0x18
  1365  000019                     	ds	1
  1366  00001A                     ??_recebe_dado_SPI:
  1367  00001A                     ??_WriteSPI_:
  1368  00001A                     ??_shrc_seta_bit:
  1369  00001A                     ??_shrc_apaga_bit:
  1370  00001A                     ?_leitura_adc:
  1371                           	opt stack 0
  1372  00001A                     ?_mem_cmp:
  1373                           	opt stack 0
  1374  00001A                     ?_get_clust:
  1375                           	opt stack 0
  1376  00001A                     ?___lmul:
  1377                           	opt stack 0
  1378  00001A                     ?___aldiv:
  1379                           	opt stack 0
  1380  00001A                     ?___lldiv:
  1381                           	opt stack 0
  1382  00001A                     envia_dados_shrc@contador:
  1383                           	opt stack 0
  1384  00001A                     delay@contador_ext:
  1385                           	opt stack 0
  1386  00001A                     write_timer_zero@timer0:
  1387                           	opt stack 0
  1388  00001A                     readover@a:
  1389                           	opt stack 0
  1390  00001A                     mem_set@dst:
  1391                           	opt stack 0
  1392  00001A                     mem_cmp@dst:
  1393                           	opt stack 0
  1394  00001A                     get_clust@dir:
  1395                           	opt stack 0
  1396  00001A                     ___lmul@multiplier:
  1397                           	opt stack 0
  1398  00001A                     ___aldiv@dividend:
  1399                           	opt stack 0
  1400  00001A                     ___lldiv@dividend:
  1401                           	opt stack 0
  1402                           
  1403                           ; 4 bytes @ 0x19
  1404  00001A                     	ds	1
  1405  00001B                     envia_dados_shrc@data_to_shrc:
  1406                           	opt stack 0
  1407  00001B                     delay@contador_int:
  1408                           	opt stack 0
  1409                           
  1410                           ; 1 bytes @ 0x1A
  1411  00001B                     	ds	1
  1412  00001C                     ??_leitura_adc:
  1413  00001C                     shrc_seta_bit@posicao_bit:
  1414                           	opt stack 0
  1415  00001C                     shrc_apaga_bit@posicao_bit:
  1416                           	opt stack 0
  1417  00001C                     recebe_dado_SPI@temp_var:
  1418                           	opt stack 0
  1419  00001C                     WriteSPI_@TempVar:
  1420                           	opt stack 0
  1421  00001C                     escreve_cmd_lcd@comando:
  1422                           	opt stack 0
  1423  00001C                     endereco_cursor_lcd@endereco:
  1424                           	opt stack 0
  1425  00001C                     escreve_caractere_lcd@data:
  1426                           	opt stack 0
  1427  00001C                     write_timer_zero@timer:
  1428                           	opt stack 0
  1429  00001C                     mem_set@val:
  1430                           	opt stack 0
  1431  00001C                     mem_cmp@src:
  1432                           	opt stack 0
  1433                           
  1434                           ; 2 bytes @ 0x1B
  1435  00001C                     	ds	1
  1436  00001D                     ??_init_lcd:
  1437  00001D                     response@buff:
  1438                           	opt stack 0
  1439  00001D                     WriteSPI_@dado:
  1440                           	opt stack 0
  1441  00001D                     posicao_cursor_lcd@coluna:
  1442                           	opt stack 0
  1443  00001D                     escreve_frase_ram_lcd@buffer:
  1444                           	opt stack 0
  1445                           
  1446                           ; 2 bytes @ 0x1C
  1447  00001D                     	ds	1
  1448  00001E                     ??_dummy_clocks:
  1449  00001E                     ??_get_clust:
  1450  00001E                     posicao_cursor_lcd@linha:
  1451                           	opt stack 0
  1452  00001E                     mem_set@cnt:
  1453                           	opt stack 0
  1454  00001E                     mem_cmp@cnt:
  1455                           	opt stack 0
  1456  00001E                     command@arg:
  1457                           	opt stack 0
  1458  00001E                     ___lmul@multiplicand:
  1459                           	opt stack 0
  1460  00001E                     ___aldiv@divisor:
  1461                           	opt stack 0
  1462  00001E                     ___lldiv@divisor:
  1463                           	opt stack 0
  1464                           
  1465                           ; 4 bytes @ 0x1D
  1466  00001E                     	ds	1
  1467  00001F                     posicao_cursor_lcd@endereco:
  1468                           	opt stack 0
  1469                           
  1470                           ; 1 bytes @ 0x1E
  1471  00001F                     	ds	1
  1472  000020                     ??_mensagem_inicial:
  1473  000020                     ??_mem_cmp:
  1474  000020                     dummy_clocks@n:
  1475                           	opt stack 0
  1476  000020                     inicializa_SPI@bus_mode:
  1477                           	opt stack 0
  1478  000020                     leitura_adc@canal:
  1479                           	opt stack 0
  1480  000020                     mem_set@d:
  1481                           	opt stack 0
  1482                           
  1483                           ; 2 bytes @ 0x1F
  1484  000020                     	ds	1
  1485  000021                     ??_leitura_continua_adc:
  1486  000021                     inicializa_SPI@smp_phase:
  1487                           	opt stack 0
  1488  000021                     dummy_clocks@i:
  1489                           	opt stack 0
  1490                           
  1491                           ; 2 bytes @ 0x20
  1492  000021                     	ds	1
  1493  000022                     command@CRC:
  1494                           	opt stack 0
  1495  000022                     inicializa_SPI@sync_mode:
  1496                           	opt stack 0
  1497  000022                     ___aldiv@counter:
  1498                           	opt stack 0
  1499  000022                     create_name@dj:
  1500                           	opt stack 0
  1501  000022                     ___lmul@product:
  1502                           	opt stack 0
  1503  000022                     ___lldiv@quotient:
  1504                           	opt stack 0
  1505                           
  1506                           ; 4 bytes @ 0x21
  1507  000022                     	ds	1
  1508  000023                     ??_command:
  1509  000023                     ___aldiv@sign:
  1510                           	opt stack 0
  1511  000023                     mem_cmp@d:
  1512                           	opt stack 0
  1513                           
  1514                           ; 2 bytes @ 0x22
  1515  000023                     	ds	1
  1516  000024                     command@CMD:
  1517                           	opt stack 0
  1518  000024                     create_name@path:
  1519                           	opt stack 0
  1520  000024                     ___aldiv@quotient:
  1521                           	opt stack 0
  1522                           
  1523                           ; 4 bytes @ 0x23
  1524  000024                     	ds	1
  1525  000025                     command@argument:
  1526                           	opt stack 0
  1527  000025                     mem_cmp@s:
  1528                           	opt stack 0
  1529                           
  1530                           ; 2 bytes @ 0x24
  1531  000025                     	ds	1
  1532  000026                     ??_reset:
  1533  000026                     ??_disk_readp:
  1534  000026                     ??_create_name:
  1535  000026                     ?_clust2sect:
  1536                           	opt stack 0
  1537  000026                     ___lldiv@counter:
  1538                           	opt stack 0
  1539  000026                     get_clust@fs:
  1540                           	opt stack 0
  1541  000026                     disk_writep@wr:
  1542                           	opt stack 0
  1543  000026                     clust2sect@clst:
  1544                           	opt stack 0
  1545                           
  1546                           ; 4 bytes @ 0x25
  1547  000026                     	ds	1
  1548  000027                     leitura_continua_adc@cont_int:
  1549                           	opt stack 0
  1550  000027                     mem_cmp@r:
  1551                           	opt stack 0
  1552                           
  1553                           ; 2 bytes @ 0x26
  1554  000027                     	ds	1
  1555  000028                     leitura_continua_adc@cont:
  1556                           	opt stack 0
  1557  000028                     reset@i:
  1558                           	opt stack 0
  1559  000028                     configura_baudrate_uart@baudrate:
  1560                           	opt stack 0
  1561  000028                     get_clust@clst:
  1562                           	opt stack 0
  1563                           
  1564                           ; 4 bytes @ 0x27
  1565  000028                     	ds	1
  1566  000029                     disk_writep@sc:
  1567                           	opt stack 0
  1568                           
  1569                           ; 4 bytes @ 0x28
  1570  000029                     	ds	1
  1571  00002A                     reset@count:
  1572                           	opt stack 0
  1573  00002A                     clust2sect@fs:
  1574                           	opt stack 0
  1575                           
  1576                           ; 2 bytes @ 0x29
  1577  00002A                     	ds	2
  1578  00002C                     reset@buff:
  1579                           	opt stack 0
  1580                           
  1581                           ; 1 bytes @ 0x2B
  1582  00002C                     	ds	1
  1583  00002D                     tblptru	equ	0xFF8
  1584                           tblptrh	equ	0xFF7
  1585                           tblptrl	equ	0xFF6
  1586                           tablat	equ	0xFF5
  1587                           postinc0	equ	0xFEE
  1588                           wreg	equ	0xFE8
  1589                           postdec1	equ	0xFE5
  1590                           fsr1h	equ	0xFE2
  1591                           fsr1l	equ	0xFE1
  1592                           
  1593                           ; 1 bytes @ 0x2C
  1594 ;;
  1595 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1596 ;;
  1597 ;; *************** function _main *****************
  1598 ;; Defined at:
  1599 ;;		line 221 in file "main.c"
  1600 ;; Parameters:    Size  Location     Type
  1601 ;;		None
  1602 ;; Auto vars:     Size  Location     Type
  1603 ;;		None
  1604 ;; Return value:  Size  Location     Type
  1605 ;;                  1    wreg      void 
  1606 ;; Registers used:
  1607 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  1608 ;; Tracked objects:
  1609 ;;		On entry : 0/0
  1610 ;;		On exit  : 0/0
  1611 ;;		Unchanged: 0/0
  1612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1613 ;;      Params:         0       0       0       0       0       0       0       0       0
  1614 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1615 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1616 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1617 ;;Total ram usage:        0 bytes
  1618 ;; Hardware stack levels required when called:   13
  1619 ;; This function calls:
  1620 ;;		_controle_shrc
  1621 ;;		_escalonador
  1622 ;;		_inicializa_SPI
  1623 ;;		_inicializa_shrc
  1624 ;;		_inicializa_tarefas
  1625 ;;		_inicializa_uart
  1626 ;;		_init_hardware
  1627 ;;		_init_lcd
  1628 ;;		_leitura_chaves_sistema
  1629 ;;		_leitura_continua_adc
  1630 ;;		_mensagem_inicial
  1631 ;; This function is called by:
  1632 ;;		Startup code after reset
  1633 ;; This function uses a non-reentrant model
  1634 ;;
  1635                           
  1636                           	psect	text0
  1637  0031FE                     __ptext0:
  1638                           	opt stack 0
  1639  0031FE                     _main:
  1640                           	opt stack 18
  1641                           
  1642                           ;main.c: 223: init_hardware();
  1643                           
  1644                           ;incstack = 0
  1645  0031FE  EC13  F01A         	call	_init_hardware	;wreg free
  1646                           
  1647                           ;main.c: 224: inicializa_uart();
  1648  003202  ECC0  F019         	call	_inicializa_uart	;wreg free
  1649                           
  1650                           ;main.c: 225: init_lcd();
  1651  003206  EC68  F015         	call	_init_lcd	;wreg free
  1652                           
  1653                           ;main.c: 226: inicializa_shrc();
  1654  00320A  EC6E  F01A         	call	_inicializa_shrc	;wreg free
  1655                           
  1656                           ;main.c: 228: mensagem_inicial();
  1657  00320E  EC7C  F016         	call	_mensagem_inicial	;wreg free
  1658                           
  1659                           ;main.c: 229: inicializa_tarefas();
  1660  003212  EC3E  F019         	call	_inicializa_tarefas	;wreg free
  1661                           
  1662                           ;main.c: 230: inicializa_SPI(0,3,1);
  1663  003216  0E03               	movlw	3
  1664  003218  6E20               	movwf	inicializa_SPI@bus_mode,c
  1665  00321A  0E01               	movlw	1
  1666  00321C  6E21               	movwf	inicializa_SPI@smp_phase,c
  1667  00321E  0E00               	movlw	0
  1668  003220  EC3E  F016         	call	_inicializa_SPI
  1669  003224                     
  1670                           ;main.c: 234: {
  1671                           ;main.c: 236: if ((sinaliza_int_timer == 1) && (2))
  1672  003224  043F               	decf	_sinaliza_int_timer,w,c
  1673  003226  A4D8               	btfss	status,2,c
  1674  003228  D004               	goto	l507
  1675                           
  1676                           ;main.c: 237: {
  1677                           ;main.c: 238: sinaliza_int_timer = 0;
  1678  00322A  0E00               	movlw	0
  1679  00322C  6E3F               	movwf	_sinaliza_int_timer,c
  1680                           
  1681                           ;main.c: 239: escalonador();
  1682  00322E  EC16  F015         	call	_escalonador	;wreg free
  1683  003232                     l507:
  1684                           
  1685                           ;main.c: 240: }
  1686                           ;main.c: 241: leitura_chaves_sistema();
  1687  003232  EC20  F019         	call	_leitura_chaves_sistema	;wreg free
  1688                           
  1689                           ;main.c: 242: controle_shrc();
  1690  003236  EC5F  F01A         	call	_controle_shrc	;wreg free
  1691                           
  1692                           ;main.c: 243: leitura_continua_adc();
  1693  00323A  ECBB  F011         	call	_leitura_continua_adc	;wreg free
  1694  00323E  D7F2               	goto	l506
  1695  003240                     __end_of_main:
  1696                           	opt stack 0
  1697                           tblptru	equ	0xFF8
  1698                           tblptrh	equ	0xFF7
  1699                           tblptrl	equ	0xFF6
  1700                           tablat	equ	0xFF5
  1701                           postinc0	equ	0xFEE
  1702                           wreg	equ	0xFE8
  1703                           postdec1	equ	0xFE5
  1704                           fsr1h	equ	0xFE2
  1705                           fsr1l	equ	0xFE1
  1706                           status	equ	0xFD8
  1707                           
  1708 ;; *************** function _mensagem_inicial *****************
  1709 ;; Defined at:
  1710 ;;		line 255 in file "main.c"
  1711 ;; Parameters:    Size  Location     Type
  1712 ;;		None
  1713 ;; Auto vars:     Size  Location     Type
  1714 ;;  msg_dois       17   17[BANK0 ] const unsigned char [17]
  1715 ;;  msg_linha_um   17    0[BANK0 ] const unsigned char [17]
  1716 ;; Return value:  Size  Location     Type
  1717 ;;                  1    wreg      void 
  1718 ;; Registers used:
  1719 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1720 ;; Tracked objects:
  1721 ;;		On entry : 0/0
  1722 ;;		On exit  : 0/0
  1723 ;;		Unchanged: 0/0
  1724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1725 ;;      Params:         0       0       0       0       0       0       0       0       0
  1726 ;;      Locals:         0      34       0       0       0       0       0       0       0
  1727 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1728 ;;      Totals:         2      34       0       0       0       0       0       0       0
  1729 ;;Total ram usage:       36 bytes
  1730 ;; Hardware stack levels used:    1
  1731 ;; Hardware stack levels required when called:    5
  1732 ;; This function calls:
  1733 ;;		_escreve_cmd_lcd
  1734 ;;		_escreve_frase_ram_lcd
  1735 ;;		_posicao_cursor_lcd
  1736 ;; This function is called by:
  1737 ;;		_main
  1738 ;; This function uses a non-reentrant model
  1739 ;;
  1740                           
  1741                           	psect	text1
  1742  002CF8                     __ptext1:
  1743                           	opt stack 0
  1744  002CF8                     _mensagem_inicial:
  1745                           	opt stack 25
  1746                           
  1747                           ;main.c: 257: const unsigned char msg_linha_um[17] = "SDCard Init   ";
  1748                           
  1749                           ;incstack = 0
  1750  002CF8  0E62               	movlw	low mensagem_inicial@F4037
  1751  002CFA  6EF6               	movwf	tblptrl,c
  1752  002CFC                     	if	1	;There is more than 1 active tblptr byte
  1753  002CFC  0E61               	movlw	high mensagem_inicial@F4037
  1754  002CFE  6EF7               	movwf	tblptrh,c
  1755  002D00                     	endif
  1756  002D00                     	if	0	;There are less than 3 active tblptr bytes
  1757  002D00                     	endif
  1758  002D00  EE20  F060         	lfsr	2,mensagem_inicial@msg_linha_um
  1759  002D04  0E10               	movlw	16
  1760  002D06                     u8630:
  1761  002D06  0009               	tblrd		*+
  1762  002D08  CFF5 FFDE          	movff	tablat,postinc2
  1763  002D0C  06E8               	decf	wreg,f,c
  1764  002D0E  E2FB               	bc	u8630
  1765                           
  1766                           ;main.c: 258: const unsigned char msg_dois[17] = " 18/01/2022   ";
  1767  002D10  0E51               	movlw	low mensagem_inicial@F4039
  1768  002D12  6EF6               	movwf	tblptrl,c
  1769  002D14                     	if	1	;There is more than 1 active tblptr byte
  1770  002D14  0E61               	movlw	high mensagem_inicial@F4039
  1771  002D16  6EF7               	movwf	tblptrh,c
  1772  002D18                     	endif
  1773  002D18                     	if	0	;There are less than 3 active tblptr bytes
  1774  002D18                     	endif
  1775  002D18  EE20  F071         	lfsr	2,mensagem_inicial@msg_dois
  1776  002D1C  0E10               	movlw	16
  1777  002D1E                     u8640:
  1778  002D1E  0009               	tblrd		*+
  1779  002D20  CFF5 FFDE          	movff	tablat,postinc2
  1780  002D24  06E8               	decf	wreg,f,c
  1781  002D26  E2FB               	bc	u8640
  1782                           
  1783                           ;main.c: 260: posicao_cursor_lcd(1,0);
  1784  002D28  0E00               	movlw	0
  1785  002D2A  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  1786  002D2C  0E01               	movlw	1
  1787  002D2E  EC64  F017         	call	_posicao_cursor_lcd
  1788                           
  1789                           ;main.c: 261: escreve_frase_ram_lcd(msg_linha_um);
  1790  002D32  0E60               	movlw	low mensagem_inicial@msg_linha_um
  1791  002D34  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  1792  002D36  0E00               	movlw	high mensagem_inicial@msg_linha_um
  1793  002D38  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  1794  002D3A  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
  1795                           
  1796                           ;main.c: 263: posicao_cursor_lcd(2,0);
  1797  002D3E  0E00               	movlw	0
  1798  002D40  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  1799  002D42  0E02               	movlw	2
  1800  002D44  EC64  F017         	call	_posicao_cursor_lcd
  1801                           
  1802                           ;main.c: 264: escreve_frase_ram_lcd(msg_dois);
  1803  002D48  0E71               	movlw	low mensagem_inicial@msg_dois
  1804  002D4A  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  1805  002D4C  0E00               	movlw	high mensagem_inicial@msg_dois
  1806  002D4E  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  1807  002D50  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
  1808                           
  1809                           ;main.c: 266: _delay((unsigned long)((1000)*(48000000/4000.0)));
  1810  002D54  0E3D               	movlw	61
  1811  002D56  6E21               	movwf	(??_mensagem_inicial+1)& (0+255),c
  1812  002D58  0EE1               	movlw	225
  1813  002D5A  6E20               	movwf	??_mensagem_inicial& (0+255),c
  1814  002D5C  0E40               	movlw	64
  1815  002D5E                     u9157:
  1816  002D5E  2EE8               	decfsz	wreg,f,c
  1817  002D60  D7FE               	bra	u9157
  1818  002D62  2E20               	decfsz	??_mensagem_inicial& (0+255),f,c
  1819  002D64  D7FC               	bra	u9157
  1820  002D66  2E21               	decfsz	(??_mensagem_inicial+1)& (0+255),f,c
  1821  002D68  D7FA               	bra	u9157
  1822                           
  1823                           ;main.c: 267: escreve_cmd_lcd(0b00000001);
  1824  002D6A  0E01               	movlw	1
  1825  002D6C  ECB7  F015         	call	_escreve_cmd_lcd
  1826  002D70  0012               	return		;funcret
  1827  002D72                     __end_of_mensagem_inicial:
  1828                           	opt stack 0
  1829                           tblptru	equ	0xFF8
  1830                           tblptrh	equ	0xFF7
  1831                           tblptrl	equ	0xFF6
  1832                           tablat	equ	0xFF5
  1833                           postinc0	equ	0xFEE
  1834                           wreg	equ	0xFE8
  1835                           postdec1	equ	0xFE5
  1836                           fsr1h	equ	0xFE2
  1837                           fsr1l	equ	0xFE1
  1838                           postinc2	equ	0xFDE
  1839                           status	equ	0xFD8
  1840                           
  1841 ;; *************** function _leitura_continua_adc *****************
  1842 ;; Defined at:
  1843 ;;		line 109 in file "bibliotecas/adc.c"
  1844 ;; Parameters:    Size  Location     Type
  1845 ;;		None
  1846 ;; Auto vars:     Size  Location     Type
  1847 ;;  cont_int        1   38[COMRAM] unsigned char 
  1848 ;;  cont            1   39[COMRAM] unsigned char 
  1849 ;; Return value:  Size  Location     Type
  1850 ;;                  1    wreg      void 
  1851 ;; Registers used:
  1852 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1853 ;; Tracked objects:
  1854 ;;		On entry : 0/0
  1855 ;;		On exit  : 0/0
  1856 ;;		Unchanged: 0/0
  1857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1858 ;;      Params:         0       0       0       0       0       0       0       0       0
  1859 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1860 ;;      Temps:          6       0       0       0       0       0       0       0       0
  1861 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1862 ;;Total ram usage:        8 bytes
  1863 ;; Hardware stack levels used:    1
  1864 ;; Hardware stack levels required when called:    3
  1865 ;; This function calls:
  1866 ;;		_leitura_adc
  1867 ;; This function is called by:
  1868 ;;		_main
  1869 ;; This function uses a non-reentrant model
  1870 ;;
  1871                           
  1872                           	psect	text2
  1873  002376                     __ptext2:
  1874                           	opt stack 0
  1875  002376                     _leitura_continua_adc:
  1876                           	opt stack 27
  1877                           
  1878                           ;adc.c: 111: for(unsigned char cont = 0; cont < 2; cont++)
  1879                           
  1880                           ;incstack = 0
  1881  002376  0E00               	movlw	0
  1882  002378  6E28               	movwf	leitura_continua_adc@cont,c
  1883  00237A                     l5426:
  1884  00237A  0E01               	movlw	1
  1885  00237C  6428               	cpfsgt	leitura_continua_adc@cont,c
  1886  00237E  D001               	goto	l143
  1887  002380  0012               	return	
  1888  002382                     l143:
  1889                           
  1890                           ;adc.c: 112: {
  1891                           ;adc.c: 113: for(unsigned char cont_int = 0; cont_int < 8; cont_int++)
  1892  002382  0E00               	movlw	0
  1893  002384  6E27               	movwf	leitura_continua_adc@cont_int,c
  1894  002386                     l5432:
  1895  002386  0E07               	movlw	7
  1896  002388  6427               	cpfsgt	leitura_continua_adc@cont_int,c
  1897  00238A  D001               	goto	l145
  1898  00238C  D05D               	goto	u5530
  1899  00238E                     l145:
  1900                           
  1901                           ;adc.c: 114: {
  1902                           ;adc.c: 115: valor_leitura_adc[cont].leituras[cont_int] = leitura_adc(cont);
  1903  00238E  5028               	movf	leitura_continua_adc@cont,w,c
  1904  002390  EC04  F018         	call	_leitura_adc
  1905  002394  5027               	movf	leitura_continua_adc@cont_int,w,c
  1906  002396  0D02               	mullw	2
  1907  002398  0E01               	movlw	1
  1908  00239A  26F3               	addwf	prodl,f,c
  1909  00239C  0E00               	movlw	0
  1910  00239E  22F4               	addwfc	prodh,f,c
  1911  0023A0  0E30               	movlw	low _valor_leitura_adc
  1912  0023A2  6E21               	movwf	??_leitura_continua_adc& (0+255),c
  1913  0023A4  0E01               	movlw	high _valor_leitura_adc
  1914  0023A6  6E22               	movwf	(??_leitura_continua_adc+1)& (0+255),c
  1915  0023A8  50F3               	movf	prodl,w,c
  1916  0023AA  2621               	addwf	??_leitura_continua_adc,f,c
  1917  0023AC  50F4               	movf	prodh,w,c
  1918  0023AE  2222               	addwfc	??_leitura_continua_adc+1,f,c
  1919  0023B0  5028               	movf	leitura_continua_adc@cont,w,c
  1920  0023B2  0D13               	mullw	19
  1921  0023B4  50F3               	movf	prodl,w,c
  1922  0023B6  2421               	addwf	??_leitura_continua_adc,w,c
  1923  0023B8  6ED9               	movwf	fsr2l,c
  1924  0023BA  50F4               	movf	prodh,w,c
  1925  0023BC  2022               	addwfc	??_leitura_continua_adc+1,w,c
  1926  0023BE  6EDA               	movwf	fsr2h,c
  1927  0023C0  C01A  FFDE         	movff	?_leitura_adc,postinc2
  1928  0023C4  C01B  FFDD         	movff	?_leitura_adc+1,postdec2
  1929                           
  1930                           ;adc.c: 116: valor_leitura_adc[cont].media = valor_leitura_adc[cont].media + valor_leitu
      +                          ra_adc[cont].leituras[cont_int];
  1931  0023C8  5027               	movf	leitura_continua_adc@cont_int,w,c
  1932  0023CA  0D02               	mullw	2
  1933  0023CC  0E01               	movlw	1
  1934  0023CE  26F3               	addwf	prodl,f,c
  1935  0023D0  0E00               	movlw	0
  1936  0023D2  22F4               	addwfc	prodh,f,c
  1937  0023D4  0E30               	movlw	low _valor_leitura_adc
  1938  0023D6  6E21               	movwf	??_leitura_continua_adc& (0+255),c
  1939  0023D8  0E01               	movlw	high _valor_leitura_adc
  1940  0023DA  6E22               	movwf	(??_leitura_continua_adc+1)& (0+255),c
  1941  0023DC  50F3               	movf	prodl,w,c
  1942  0023DE  2621               	addwf	??_leitura_continua_adc,f,c
  1943  0023E0  50F4               	movf	prodh,w,c
  1944  0023E2  2222               	addwfc	??_leitura_continua_adc+1,f,c
  1945  0023E4  5028               	movf	leitura_continua_adc@cont,w,c
  1946  0023E6  0D13               	mullw	19
  1947  0023E8  50F3               	movf	prodl,w,c
  1948  0023EA  2421               	addwf	??_leitura_continua_adc,w,c
  1949  0023EC  6ED9               	movwf	fsr2l,c
  1950  0023EE  50F4               	movf	prodh,w,c
  1951  0023F0  2022               	addwfc	??_leitura_continua_adc+1,w,c
  1952  0023F2  6EDA               	movwf	fsr2h,c
  1953  0023F4  CFDE F023          	movff	postinc2,??_leitura_continua_adc+2
  1954  0023F8  CFDD F024          	movff	postdec2,??_leitura_continua_adc+3
  1955  0023FC  5028               	movf	leitura_continua_adc@cont,w,c
  1956  0023FE  0D13               	mullw	19
  1957  002400  0E11               	movlw	17
  1958  002402  26F3               	addwf	prodl,f,c
  1959  002404  0E00               	movlw	0
  1960  002406  22F4               	addwfc	prodh,f,c
  1961  002408  0E30               	movlw	low _valor_leitura_adc
  1962  00240A  24F3               	addwf	prodl,w,c
  1963  00240C  6ED9               	movwf	fsr2l,c
  1964  00240E  0E01               	movlw	high _valor_leitura_adc
  1965  002410  20F4               	addwfc	prodh,w,c
  1966  002412  6EDA               	movwf	fsr2h,c
  1967  002414  CFDE F025          	movff	postinc2,??_leitura_continua_adc+4
  1968  002418  CFDD F026          	movff	postdec2,??_leitura_continua_adc+5
  1969  00241C  5023               	movf	??_leitura_continua_adc+2,w,c
  1970  00241E  2625               	addwf	??_leitura_continua_adc+4,f,c
  1971  002420  5024               	movf	??_leitura_continua_adc+3,w,c
  1972  002422  2226               	addwfc	??_leitura_continua_adc+5,f,c
  1973  002424  5028               	movf	leitura_continua_adc@cont,w,c
  1974  002426  0D13               	mullw	19
  1975  002428  0E11               	movlw	17
  1976  00242A  26F3               	addwf	prodl,f,c
  1977  00242C  0E00               	movlw	0
  1978  00242E  22F4               	addwfc	prodh,f,c
  1979  002430  0E30               	movlw	low _valor_leitura_adc
  1980  002432  24F3               	addwf	prodl,w,c
  1981  002434  6ED9               	movwf	fsr2l,c
  1982  002436  0E01               	movlw	high _valor_leitura_adc
  1983  002438  20F4               	addwfc	prodh,w,c
  1984  00243A  6EDA               	movwf	fsr2h,c
  1985  00243C  C025  FFDE         	movff	??_leitura_continua_adc+4,postinc2
  1986  002440  C026  FFDD         	movff	??_leitura_continua_adc+5,postdec2
  1987  002444  2A27               	incf	leitura_continua_adc@cont_int,f,c
  1988  002446  D79F               	goto	l5432
  1989  002448                     u5530:
  1990                           
  1991                           ;adc.c: 117: }
  1992                           ;adc.c: 118: valor_leitura_adc[cont].media = valor_leitura_adc[cont].media / 8;
  1993  002448  5028               	movf	leitura_continua_adc@cont,w,c
  1994  00244A  0D13               	mullw	19
  1995  00244C  0E11               	movlw	17
  1996  00244E  26F3               	addwf	prodl,f,c
  1997  002450  0E00               	movlw	0
  1998  002452  22F4               	addwfc	prodh,f,c
  1999  002454  0E30               	movlw	low _valor_leitura_adc
  2000  002456  24F3               	addwf	prodl,w,c
  2001  002458  6ED9               	movwf	fsr2l,c
  2002  00245A  0E01               	movlw	high _valor_leitura_adc
  2003  00245C  20F4               	addwfc	prodh,w,c
  2004  00245E  6EDA               	movwf	fsr2h,c
  2005  002460  CFDE F021          	movff	postinc2,??_leitura_continua_adc
  2006  002464  CFDD F022          	movff	postdec2,??_leitura_continua_adc+1
  2007  002468  90D8               	bcf	status,0,c
  2008  00246A  3222               	rrcf	??_leitura_continua_adc+1,f,c
  2009  00246C  3221               	rrcf	??_leitura_continua_adc,f,c
  2010  00246E  90D8               	bcf	status,0,c
  2011  002470  3222               	rrcf	??_leitura_continua_adc+1,f,c
  2012  002472  3221               	rrcf	??_leitura_continua_adc,f,c
  2013  002474  90D8               	bcf	status,0,c
  2014  002476  3222               	rrcf	??_leitura_continua_adc+1,f,c
  2015  002478  3221               	rrcf	??_leitura_continua_adc,f,c
  2016  00247A  5028               	movf	leitura_continua_adc@cont,w,c
  2017  00247C  0D13               	mullw	19
  2018  00247E  0E11               	movlw	17
  2019  002480  26F3               	addwf	prodl,f,c
  2020  002482  0E00               	movlw	0
  2021  002484  22F4               	addwfc	prodh,f,c
  2022  002486  0E30               	movlw	low _valor_leitura_adc
  2023  002488  24F3               	addwf	prodl,w,c
  2024  00248A  6ED9               	movwf	fsr2l,c
  2025  00248C  0E01               	movlw	high _valor_leitura_adc
  2026  00248E  20F4               	addwfc	prodh,w,c
  2027  002490  6EDA               	movwf	fsr2h,c
  2028  002492  C021  FFDE         	movff	??_leitura_continua_adc,postinc2
  2029  002496  C022  FFDD         	movff	??_leitura_continua_adc+1,postdec2
  2030  00249A  2A28               	incf	leitura_continua_adc@cont,f,c
  2031  00249C  D76E               	goto	l5426
  2032  00249E                     __end_of_leitura_continua_adc:
  2033                           	opt stack 0
  2034                           tblptru	equ	0xFF8
  2035                           tblptrh	equ	0xFF7
  2036                           tblptrl	equ	0xFF6
  2037                           tablat	equ	0xFF5
  2038                           prodh	equ	0xFF4
  2039                           prodl	equ	0xFF3
  2040                           postinc0	equ	0xFEE
  2041                           wreg	equ	0xFE8
  2042                           postdec1	equ	0xFE5
  2043                           fsr1h	equ	0xFE2
  2044                           fsr1l	equ	0xFE1
  2045                           postinc2	equ	0xFDE
  2046                           postdec2	equ	0xFDD
  2047                           fsr2h	equ	0xFDA
  2048                           fsr2l	equ	0xFD9
  2049                           status	equ	0xFD8
  2050                           
  2051 ;; *************** function _leitura_adc *****************
  2052 ;; Defined at:
  2053 ;;		line 76 in file "bibliotecas/adc.c"
  2054 ;; Parameters:    Size  Location     Type
  2055 ;;  canal           1    wreg     unsigned char 
  2056 ;; Auto vars:     Size  Location     Type
  2057 ;;  canal           1   31[COMRAM] unsigned char 
  2058 ;; Return value:  Size  Location     Type
  2059 ;;                  2   25[COMRAM] unsigned int 
  2060 ;; Registers used:
  2061 ;;		wreg, status,2, status,0
  2062 ;; Tracked objects:
  2063 ;;		On entry : 0/0
  2064 ;;		On exit  : 0/0
  2065 ;;		Unchanged: 0/0
  2066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2067 ;;      Params:         2       0       0       0       0       0       0       0       0
  2068 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2069 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2070 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2071 ;;Total ram usage:        7 bytes
  2072 ;; Hardware stack levels used:    1
  2073 ;; Hardware stack levels required when called:    2
  2074 ;; This function calls:
  2075 ;;		Nothing
  2076 ;; This function is called by:
  2077 ;;		_leitura_continua_adc
  2078 ;; This function uses a non-reentrant model
  2079 ;;
  2080                           
  2081                           	psect	text3
  2082  003008                     __ptext3:
  2083                           	opt stack 0
  2084  003008                     _leitura_adc:
  2085                           	opt stack 27
  2086                           
  2087                           ;incstack = 0
  2088                           ;leitura_adc@canal stored from wreg
  2089  003008  6E20               	movwf	leitura_adc@canal,c
  2090                           
  2091                           ;adc.c: 78: switch(canal)
  2092  00300A  D009               	goto	l131
  2093  00300C                     
  2094                           ;adc.c: 81: ADCON0 = 0x01;
  2095  00300C  0E01               	movlw	1
  2096  00300E  D005               	goto	L3
  2097  003010                     
  2098                           ;adc.c: 85: ADCON0 = 0x05;
  2099  003010  0E05               	movlw	5
  2100  003012  D003               	goto	L3
  2101  003014                     
  2102                           ;adc.c: 89: ADCON0 = 0x09;
  2103  003014  0E09               	movlw	9
  2104  003016  D001               	goto	L3
  2105  003018                     
  2106                           ;adc.c: 93: ADCON0 = 0x0D;
  2107  003018  0E0D               	movlw	13
  2108  00301A                     L3:
  2109  00301A  6EC2               	movwf	4034,c	;volatile
  2110                           
  2111                           ;adc.c: 96: }
  2112                           
  2113                           ;adc.c: 94: break;
  2114  00301C  D00D               	goto	l133
  2115  00301E                     l131:
  2116  00301E  5020               	movf	leitura_adc@canal,w,c
  2117                           
  2118                           ; Switch size 1, requested type "space"
  2119                           ; Number of cases is 4, Range of values is 0 to 3
  2120                           ; switch strategies available:
  2121                           ; Name         Instructions Cycles
  2122                           ; simple_byte           13     7 (average)
  2123                           ;	Chosen strategy is simple_byte
  2124  003020  0A00               	xorlw	0	; case 0
  2125  003022  B4D8               	btfsc	status,2,c
  2126  003024  D7F3               	goto	l132
  2127  003026  0A01               	xorlw	1	; case 1
  2128  003028  B4D8               	btfsc	status,2,c
  2129  00302A  D7F2               	goto	l134
  2130  00302C  0A03               	xorlw	3	; case 2
  2131  00302E  B4D8               	btfsc	status,2,c
  2132  003030  D7F1               	goto	l135
  2133  003032  0A01               	xorlw	1	; case 3
  2134  003034  B4D8               	btfsc	status,2,c
  2135  003036  D7F0               	goto	l136
  2136  003038                     l133:
  2137                           
  2138                           ;adc.c: 97: ADCON0bits.GO=1;
  2139  003038  82C2               	bsf	4034,1,c	;volatile
  2140  00303A  B2C2               	btfsc	4034,1,c	;volatile
  2141  00303C  D7FE               	goto	l138
  2142                           
  2143                           ;adc.c: 100: return ((((unsigned int)ADRESH)<<2)|(ADRESL>>6));
  2144  00303E  CFC3 F01C          	movff	4035,??_leitura_adc	;volatile
  2145  003042  0E06               	movlw	6
  2146  003044  6E1D               	movwf	(??_leitura_adc+1)& (0+255),c
  2147  003046                     u5345:
  2148  003046  90D8               	bcf	status,0,c
  2149  003048  321C               	rrcf	??_leitura_adc,f,c
  2150  00304A  2E1D               	decfsz	(??_leitura_adc+1)& (0+255),f,c
  2151  00304C  D7FC               	goto	u5345
  2152  00304E  501C               	movf	??_leitura_adc,w,c
  2153  003050  CFC4 F01E          	movff	4036,??_leitura_adc+2	;volatile
  2154  003054  6A1F               	clrf	(??_leitura_adc+3)& (0+255),c
  2155  003056  90D8               	bcf	status,0,c
  2156  003058  361E               	rlcf	??_leitura_adc+2,f,c
  2157  00305A  361F               	rlcf	??_leitura_adc+3,f,c
  2158  00305C  90D8               	bcf	status,0,c
  2159  00305E  361E               	rlcf	??_leitura_adc+2,f,c
  2160  003060  361F               	rlcf	??_leitura_adc+3,f,c
  2161  003062  101E               	iorwf	??_leitura_adc+2,w,c
  2162  003064  6E1A               	movwf	?_leitura_adc,c
  2163  003066  501F               	movf	??_leitura_adc+3,w,c
  2164  003068  6E1B               	movwf	?_leitura_adc+1,c
  2165  00306A  0012               	return	
  2166  00306C                     __end_of_leitura_adc:
  2167                           	opt stack 0
  2168                           tblptru	equ	0xFF8
  2169                           tblptrh	equ	0xFF7
  2170                           tblptrl	equ	0xFF6
  2171                           tablat	equ	0xFF5
  2172                           prodh	equ	0xFF4
  2173                           prodl	equ	0xFF3
  2174                           postinc0	equ	0xFEE
  2175                           wreg	equ	0xFE8
  2176                           postdec1	equ	0xFE5
  2177                           fsr1h	equ	0xFE2
  2178                           fsr1l	equ	0xFE1
  2179                           postinc2	equ	0xFDE
  2180                           postdec2	equ	0xFDD
  2181                           fsr2h	equ	0xFDA
  2182                           fsr2l	equ	0xFD9
  2183                           status	equ	0xFD8
  2184                           
  2185 ;; *************** function _leitura_chaves_sistema *****************
  2186 ;; Defined at:
  2187 ;;		line 47 in file "bibliotecas/chaves.c"
  2188 ;; Parameters:    Size  Location     Type
  2189 ;;		None
  2190 ;; Auto vars:     Size  Location     Type
  2191 ;;		None
  2192 ;; Return value:  Size  Location     Type
  2193 ;;                  1    wreg      void 
  2194 ;; Registers used:
  2195 ;;		wreg
  2196 ;; Tracked objects:
  2197 ;;		On entry : 0/0
  2198 ;;		On exit  : 0/0
  2199 ;;		Unchanged: 0/0
  2200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2201 ;;      Params:         0       0       0       0       0       0       0       0       0
  2202 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2203 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2204 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2205 ;;Total ram usage:        0 bytes
  2206 ;; Hardware stack levels used:    1
  2207 ;; Hardware stack levels required when called:    2
  2208 ;; This function calls:
  2209 ;;		Nothing
  2210 ;; This function is called by:
  2211 ;;		_main
  2212 ;; This function uses a non-reentrant model
  2213 ;;
  2214                           
  2215                           	psect	text4
  2216  003240                     __ptext4:
  2217                           	opt stack 0
  2218  003240                     _leitura_chaves_sistema:
  2219                           	opt stack 28
  2220                           
  2221                           ;chaves.c: 49: info_chaves[0] = PORTCbits.RC0;
  2222                           
  2223                           ;incstack = 0
  2224  003240  0E00               	movlw	0
  2225  003242  B082               	btfsc	3970,0,c	;volatile
  2226  003244  0E01               	movlw	1
  2227  003246  0101               	movlb	1	; () banked
  2228  003248  6F6A               	movwf	_info_chaves& (0+255),b
  2229                           
  2230                           ;chaves.c: 50: info_chaves[1] = PORTCbits.RC1;
  2231  00324A  0E00               	movlw	0
  2232  00324C  B282               	btfsc	3970,1,c	;volatile
  2233  00324E  0E01               	movlw	1
  2234  003250  6F6B               	movwf	(_info_chaves+1)& (0+255),b
  2235                           
  2236                           ;chaves.c: 51: info_chaves[2] = PORTCbits.RC2;
  2237  003252  0E00               	movlw	0
  2238  003254  B482               	btfsc	3970,2,c	;volatile
  2239  003256  0E01               	movlw	1
  2240  003258  6F6C               	movwf	(_info_chaves+2)& (0+255),b
  2241                           
  2242                           ;chaves.c: 52: info_chaves[3] = PORTAbits.RA2;
  2243  00325A  0E00               	movlw	0
  2244  00325C  B480               	btfsc	3968,2,c	;volatile
  2245  00325E  0E01               	movlw	1
  2246  003260  6F6D               	movwf	(_info_chaves+3)& (0+255),b
  2247                           
  2248                           ;chaves.c: 53: info_chaves[4] = PORTAbits.RA5;
  2249  003262  0E00               	movlw	0
  2250  003264  BA80               	btfsc	3968,5,c	;volatile
  2251  003266  0E01               	movlw	1
  2252  003268  6F6E               	movwf	(_info_chaves+4)& (0+255),b
  2253                           
  2254                           ;chaves.c: 54: info_chaves[5] = PORTEbits.RE0;
  2255  00326A  0E00               	movlw	0
  2256  00326C  B084               	btfsc	3972,0,c	;volatile
  2257  00326E  0E01               	movlw	1
  2258  003270  6F6F               	movwf	(_info_chaves+5)& (0+255),b
  2259                           
  2260                           ;chaves.c: 55: info_chaves[6] = PORTEbits.RE1;
  2261  003272  0E00               	movlw	0
  2262  003274  B284               	btfsc	3972,1,c	;volatile
  2263  003276  0E01               	movlw	1
  2264  003278  6F70               	movwf	(_info_chaves+6)& (0+255),b
  2265                           
  2266                           ; BSR set to: 1
  2267  00327A  0012               	return		;funcret
  2268  00327C                     __end_of_leitura_chaves_sistema:
  2269                           	opt stack 0
  2270                           tblptru	equ	0xFF8
  2271                           tblptrh	equ	0xFF7
  2272                           tblptrl	equ	0xFF6
  2273                           tablat	equ	0xFF5
  2274                           prodh	equ	0xFF4
  2275                           prodl	equ	0xFF3
  2276                           postinc0	equ	0xFEE
  2277                           wreg	equ	0xFE8
  2278                           postdec1	equ	0xFE5
  2279                           fsr1h	equ	0xFE2
  2280                           fsr1l	equ	0xFE1
  2281                           postinc2	equ	0xFDE
  2282                           postdec2	equ	0xFDD
  2283                           fsr2h	equ	0xFDA
  2284                           fsr2l	equ	0xFD9
  2285                           status	equ	0xFD8
  2286                           
  2287 ;; *************** function _init_lcd *****************
  2288 ;; Defined at:
  2289 ;;		line 71 in file "bibliotecas/display/display_lcd.c"
  2290 ;; Parameters:    Size  Location     Type
  2291 ;;		None
  2292 ;; Auto vars:     Size  Location     Type
  2293 ;;		None
  2294 ;; Return value:  Size  Location     Type
  2295 ;;                  1    wreg      void 
  2296 ;; Registers used:
  2297 ;;		wreg, status,2, status,0, cstack
  2298 ;; Tracked objects:
  2299 ;;		On entry : 0/0
  2300 ;;		On exit  : 0/0
  2301 ;;		Unchanged: 0/0
  2302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2303 ;;      Params:         0       0       0       0       0       0       0       0       0
  2304 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2305 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2306 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2307 ;;Total ram usage:        1 bytes
  2308 ;; Hardware stack levels used:    1
  2309 ;; Hardware stack levels required when called:    4
  2310 ;; This function calls:
  2311 ;;		_delay
  2312 ;;		_escreve_cmd_lcd
  2313 ;; This function is called by:
  2314 ;;		_main
  2315 ;; This function uses a non-reentrant model
  2316 ;;
  2317                           
  2318                           	psect	text5
  2319  002AD0                     __ptext5:
  2320                           	opt stack 0
  2321  002AD0                     _init_lcd:
  2322                           	opt stack 26
  2323                           
  2324                           ;display_lcd.c: 74: TRISDbits.RD2 = 0;
  2325                           
  2326                           ; BSR set to: 1
  2327                           ;incstack = 0
  2328  002AD0  9495               	bcf	3989,2,c	;volatile
  2329                           
  2330                           ;display_lcd.c: 75: TRISDbits.RD1 = 0;
  2331  002AD2  9295               	bcf	3989,1,c	;volatile
  2332                           
  2333                           ;display_lcd.c: 76: TRISDbits.RD0 = 0;
  2334  002AD4  9095               	bcf	3989,0,c	;volatile
  2335                           
  2336                           ;display_lcd.c: 79: TRISDbits.RD4=0;
  2337  002AD6  9895               	bcf	3989,4,c	;volatile
  2338                           
  2339                           ;display_lcd.c: 80: TRISDbits.RD5=0;
  2340  002AD8  9A95               	bcf	3989,5,c	;volatile
  2341                           
  2342                           ;display_lcd.c: 81: TRISDbits.RD6=0;
  2343  002ADA  9C95               	bcf	3989,6,c	;volatile
  2344                           
  2345                           ;display_lcd.c: 82: TRISDbits.RD7=0;
  2346  002ADC  9E95               	bcf	3989,7,c	;volatile
  2347                           
  2348                           ;display_lcd.c: 89: PORTDbits.RD2 = 0;
  2349  002ADE  9483               	bcf	3971,2,c	;volatile
  2350                           
  2351                           ;display_lcd.c: 90: PORTDbits.RD1 = 0;
  2352  002AE0  9283               	bcf	3971,1,c	;volatile
  2353                           
  2354                           ;display_lcd.c: 91: PORTDbits.RD0 = 0;
  2355  002AE2  9083               	bcf	3971,0,c	;volatile
  2356                           
  2357                           ;display_lcd.c: 95: PORTDbits.RD7=0;
  2358  002AE4  9E83               	bcf	3971,7,c	;volatile
  2359                           
  2360                           ;display_lcd.c: 96: PORTDbits.RD6=0;
  2361  002AE6  9C83               	bcf	3971,6,c	;volatile
  2362                           
  2363                           ;display_lcd.c: 97: PORTDbits.RD5=1;
  2364  002AE8  8A83               	bsf	3971,5,c	;volatile
  2365                           
  2366                           ;display_lcd.c: 98: PORTDbits.RD4=1;
  2367  002AEA  8883               	bsf	3971,4,c	;volatile
  2368                           
  2369                           ;display_lcd.c: 103: _delay((unsigned long)((15)*(48000000/4000.0)));
  2370  002AEC  0EEA               	movlw	234
  2371  002AEE  6E1D               	movwf	??_init_lcd& (0+255),c
  2372  002AF0  0EC3               	movlw	195
  2373  002AF2                     u9167:
  2374  002AF2  2EE8               	decfsz	wreg,f,c
  2375  002AF4  D7FE               	bra	u9167
  2376  002AF6  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  2377  002AF8  D7FC               	bra	u9167
  2378  002AFA  F000               	nop	
  2379                           
  2380                           ;display_lcd.c: 107: PORTDbits.RD0 = 1;
  2381  002AFC  8083               	bsf	3971,0,c	;volatile
  2382                           
  2383                           ;display_lcd.c: 108: delay();
  2384  002AFE  ECAE  F019         	call	_delay	;wreg free
  2385                           
  2386                           ;display_lcd.c: 109: PORTDbits.RD0 = 0;
  2387  002B02  9083               	bcf	3971,0,c	;volatile
  2388                           
  2389                           ;display_lcd.c: 110: delay();
  2390  002B04  ECAE  F019         	call	_delay	;wreg free
  2391                           
  2392                           ;display_lcd.c: 115: _delay((unsigned long)((5)*(48000000/4000.0)));
  2393  002B08  0E4E               	movlw	78
  2394  002B0A  6E1D               	movwf	??_init_lcd& (0+255),c
  2395  002B0C  0EEB               	movlw	235
  2396  002B0E                     u9177:
  2397  002B0E  2EE8               	decfsz	wreg,f,c
  2398  002B10  D7FE               	bra	u9177
  2399  002B12  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  2400  002B14  D7FC               	bra	u9177
  2401  002B16  F000               	nop	
  2402                           
  2403                           ;display_lcd.c: 118: PORTDbits.RD0 = 1;
  2404  002B18  8083               	bsf	3971,0,c	;volatile
  2405                           
  2406                           ;display_lcd.c: 119: delay();
  2407  002B1A  ECAE  F019         	call	_delay	;wreg free
  2408                           
  2409                           ;display_lcd.c: 120: PORTDbits.RD0 = 0;
  2410  002B1E  9083               	bcf	3971,0,c	;volatile
  2411                           
  2412                           ;display_lcd.c: 121: delay();
  2413  002B20  ECAE  F019         	call	_delay	;wreg free
  2414                           
  2415                           ;display_lcd.c: 126: _delay((unsigned long)((5)*(48000000/4000.0)));
  2416  002B24  0E4E               	movlw	78
  2417  002B26  6E1D               	movwf	??_init_lcd& (0+255),c
  2418  002B28  0EEB               	movlw	235
  2419  002B2A                     u9187:
  2420  002B2A  2EE8               	decfsz	wreg,f,c
  2421  002B2C  D7FE               	bra	u9187
  2422  002B2E  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  2423  002B30  D7FC               	bra	u9187
  2424  002B32  F000               	nop	
  2425                           
  2426                           ;display_lcd.c: 129: PORTDbits.RD0 = 1;
  2427  002B34  8083               	bsf	3971,0,c	;volatile
  2428                           
  2429                           ;display_lcd.c: 130: delay();
  2430  002B36  ECAE  F019         	call	_delay	;wreg free
  2431                           
  2432                           ;display_lcd.c: 131: PORTDbits.RD0 = 0;
  2433  002B3A  9083               	bcf	3971,0,c	;volatile
  2434                           
  2435                           ;display_lcd.c: 132: delay();
  2436  002B3C  ECAE  F019         	call	_delay	;wreg free
  2437                           
  2438                           ;display_lcd.c: 135: PORTDbits.RD7=0;
  2439  002B40  9E83               	bcf	3971,7,c	;volatile
  2440                           
  2441                           ;display_lcd.c: 136: PORTDbits.RD6=0;
  2442  002B42  9C83               	bcf	3971,6,c	;volatile
  2443                           
  2444                           ;display_lcd.c: 137: PORTDbits.RD5=1;
  2445  002B44  8A83               	bsf	3971,5,c	;volatile
  2446                           
  2447                           ;display_lcd.c: 138: PORTDbits.RD4=0;
  2448  002B46  9883               	bcf	3971,4,c	;volatile
  2449                           
  2450                           ;display_lcd.c: 142: PORTDbits.RD0 = 1;
  2451  002B48  8083               	bsf	3971,0,c	;volatile
  2452                           
  2453                           ;display_lcd.c: 143: delay();
  2454  002B4A  ECAE  F019         	call	_delay	;wreg free
  2455                           
  2456                           ;display_lcd.c: 144: PORTDbits.RD0 = 0;
  2457  002B4E  9083               	bcf	3971,0,c	;volatile
  2458                           
  2459                           ;display_lcd.c: 145: delay();
  2460  002B50  ECAE  F019         	call	_delay	;wreg free
  2461                           
  2462                           ;display_lcd.c: 149: escreve_cmd_lcd(0b00101000);
  2463  002B54  0E28               	movlw	40
  2464  002B56  ECB7  F015         	call	_escreve_cmd_lcd
  2465                           
  2466                           ;display_lcd.c: 150: escreve_cmd_lcd(0b00000110);
  2467  002B5A  0E06               	movlw	6
  2468  002B5C  ECB7  F015         	call	_escreve_cmd_lcd
  2469                           
  2470                           ;display_lcd.c: 151: escreve_cmd_lcd(0b00001110);
  2471  002B60  0E0E               	movlw	14
  2472  002B62  ECB7  F015         	call	_escreve_cmd_lcd
  2473                           
  2474                           ;display_lcd.c: 152: escreve_cmd_lcd(0b00000001);
  2475  002B66  0E01               	movlw	1
  2476  002B68  ECB7  F015         	call	_escreve_cmd_lcd
  2477  002B6C  0012               	return		;funcret
  2478  002B6E                     __end_of_init_lcd:
  2479                           	opt stack 0
  2480                           tblptru	equ	0xFF8
  2481                           tblptrh	equ	0xFF7
  2482                           tblptrl	equ	0xFF6
  2483                           tablat	equ	0xFF5
  2484                           prodh	equ	0xFF4
  2485                           prodl	equ	0xFF3
  2486                           postinc0	equ	0xFEE
  2487                           wreg	equ	0xFE8
  2488                           postdec1	equ	0xFE5
  2489                           fsr1h	equ	0xFE2
  2490                           fsr1l	equ	0xFE1
  2491                           postinc2	equ	0xFDE
  2492                           postdec2	equ	0xFDD
  2493                           fsr2h	equ	0xFDA
  2494                           fsr2l	equ	0xFD9
  2495                           status	equ	0xFD8
  2496                           
  2497 ;; *************** function _init_hardware *****************
  2498 ;; Defined at:
  2499 ;;		line 55 in file "bibliotecas/hardware.c"
  2500 ;; Parameters:    Size  Location     Type
  2501 ;;		None
  2502 ;; Auto vars:     Size  Location     Type
  2503 ;;		None
  2504 ;; Return value:  Size  Location     Type
  2505 ;;                  1    wreg      void 
  2506 ;; Registers used:
  2507 ;;		wreg, status,2, cstack
  2508 ;; Tracked objects:
  2509 ;;		On entry : 0/0
  2510 ;;		On exit  : 0/0
  2511 ;;		Unchanged: 0/0
  2512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2513 ;;      Params:         0       0       0       0       0       0       0       0       0
  2514 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2515 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2516 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2517 ;;Total ram usage:        0 bytes
  2518 ;; Hardware stack levels used:    1
  2519 ;; Hardware stack levels required when called:    4
  2520 ;; This function calls:
  2521 ;;		_config_timer_dois
  2522 ;;		_config_timer_zero
  2523 ;;		_init_interrupt
  2524 ;;		_init_oscilador
  2525 ;;		_init_ports
  2526 ;; This function is called by:
  2527 ;;		_main
  2528 ;; This function uses a non-reentrant model
  2529 ;;
  2530                           
  2531                           	psect	text6
  2532  003426                     __ptext6:
  2533                           	opt stack 0
  2534  003426                     _init_hardware:
  2535                           	opt stack 26
  2536                           
  2537                           ;hardware.c: 58: init_oscilador();
  2538                           
  2539                           ;incstack = 0
  2540  003426  EC6A  F01A         	call	_init_oscilador	;wreg free
  2541                           
  2542                           ;hardware.c: 61: init_ports();
  2543  00342A  EC07  F01A         	call	_init_ports	;wreg free
  2544                           
  2545                           ;hardware.c: 64: config_timer_zero();
  2546  00342E  ECEE  F019         	call	_config_timer_zero	;wreg free
  2547                           
  2548                           ;hardware.c: 67: config_timer_dois();
  2549  003432  EC53  F01A         	call	_config_timer_dois	;wreg free
  2550                           
  2551                           ;hardware.c: 70: init_interrupt();
  2552  003436  EC28  F01A         	call	_init_interrupt	;wreg free
  2553  00343A  0012               	return		;funcret
  2554  00343C                     __end_of_init_hardware:
  2555                           	opt stack 0
  2556                           tblptru	equ	0xFF8
  2557                           tblptrh	equ	0xFF7
  2558                           tblptrl	equ	0xFF6
  2559                           tablat	equ	0xFF5
  2560                           prodh	equ	0xFF4
  2561                           prodl	equ	0xFF3
  2562                           postinc0	equ	0xFEE
  2563                           wreg	equ	0xFE8
  2564                           postdec1	equ	0xFE5
  2565                           fsr1h	equ	0xFE2
  2566                           fsr1l	equ	0xFE1
  2567                           postinc2	equ	0xFDE
  2568                           postdec2	equ	0xFDD
  2569                           fsr2h	equ	0xFDA
  2570                           fsr2l	equ	0xFD9
  2571                           status	equ	0xFD8
  2572                           
  2573 ;; *************** function _init_ports *****************
  2574 ;; Defined at:
  2575 ;;		line 154 in file "bibliotecas/hardware.c"
  2576 ;; Parameters:    Size  Location     Type
  2577 ;;		None
  2578 ;; Auto vars:     Size  Location     Type
  2579 ;;		None
  2580 ;; Return value:  Size  Location     Type
  2581 ;;                  1    wreg      void 
  2582 ;; Registers used:
  2583 ;;		wreg, status,2
  2584 ;; Tracked objects:
  2585 ;;		On entry : 0/0
  2586 ;;		On exit  : 0/0
  2587 ;;		Unchanged: 0/0
  2588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2589 ;;      Params:         0       0       0       0       0       0       0       0       0
  2590 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2591 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2592 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2593 ;;Total ram usage:        0 bytes
  2594 ;; Hardware stack levels used:    1
  2595 ;; Hardware stack levels required when called:    2
  2596 ;; This function calls:
  2597 ;;		Nothing
  2598 ;; This function is called by:
  2599 ;;		_init_hardware
  2600 ;; This function uses a non-reentrant model
  2601 ;;
  2602                           
  2603                           	psect	text7
  2604  00340E                     __ptext7:
  2605                           	opt stack 0
  2606  00340E                     _init_ports:
  2607                           	opt stack 27
  2608                           
  2609                           ;hardware.c: 156: TRISB = 0b00000001;
  2610                           
  2611                           ;incstack = 0
  2612  00340E  0E01               	movlw	1
  2613  003410  6E93               	movwf	3987,c	;volatile
  2614                           
  2615                           ;hardware.c: 157: LATB = 0xFF;
  2616  003412  688A               	setf	3978,c	;volatile
  2617                           
  2618                           ;hardware.c: 158: TRISD = 0x00;
  2619  003414  0E00               	movlw	0
  2620  003416  6E95               	movwf	3989,c	;volatile
  2621                           
  2622                           ;hardware.c: 159: TRISA = 0b00000111;
  2623  003418  0E07               	movlw	7
  2624  00341A  6E92               	movwf	3986,c	;volatile
  2625                           
  2626                           ;hardware.c: 160: TRISC = 0x01111111;
  2627  00341C  0E11               	movlw	17
  2628  00341E  6E94               	movwf	3988,c	;volatile
  2629                           
  2630                           ;hardware.c: 161: TRISE = 0b00000011;
  2631  003420  0E03               	movlw	3
  2632  003422  6E96               	movwf	3990,c	;volatile
  2633  003424  0012               	return		;funcret
  2634  003426                     __end_of_init_ports:
  2635                           	opt stack 0
  2636                           tblptru	equ	0xFF8
  2637                           tblptrh	equ	0xFF7
  2638                           tblptrl	equ	0xFF6
  2639                           tablat	equ	0xFF5
  2640                           prodh	equ	0xFF4
  2641                           prodl	equ	0xFF3
  2642                           postinc0	equ	0xFEE
  2643                           wreg	equ	0xFE8
  2644                           postdec1	equ	0xFE5
  2645                           fsr1h	equ	0xFE2
  2646                           fsr1l	equ	0xFE1
  2647                           postinc2	equ	0xFDE
  2648                           postdec2	equ	0xFDD
  2649                           fsr2h	equ	0xFDA
  2650                           fsr2l	equ	0xFD9
  2651                           status	equ	0xFD8
  2652                           
  2653 ;; *************** function _init_oscilador *****************
  2654 ;; Defined at:
  2655 ;;		line 171 in file "bibliotecas/hardware.c"
  2656 ;; Parameters:    Size  Location     Type
  2657 ;;		None
  2658 ;; Auto vars:     Size  Location     Type
  2659 ;;		None
  2660 ;; Return value:  Size  Location     Type
  2661 ;;                  1    wreg      void 
  2662 ;; Registers used:
  2663 ;;		None
  2664 ;; Tracked objects:
  2665 ;;		On entry : 0/0
  2666 ;;		On exit  : 0/0
  2667 ;;		Unchanged: 0/0
  2668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2669 ;;      Params:         0       0       0       0       0       0       0       0       0
  2670 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2671 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2672 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2673 ;;Total ram usage:        0 bytes
  2674 ;; Hardware stack levels used:    1
  2675 ;; Hardware stack levels required when called:    2
  2676 ;; This function calls:
  2677 ;;		Nothing
  2678 ;; This function is called by:
  2679 ;;		_init_hardware
  2680 ;; This function uses a non-reentrant model
  2681 ;;
  2682                           
  2683                           	psect	text8
  2684  0034D4                     __ptext8:
  2685                           	opt stack 0
  2686  0034D4                     _init_oscilador:
  2687                           	opt stack 27
  2688                           
  2689                           ;hardware.c: 174: OSCCONbits.IRCF0 = 1;
  2690                           
  2691                           ;incstack = 0
  2692  0034D4  88D3               	bsf	4051,4,c	;volatile
  2693                           
  2694                           ;hardware.c: 175: OSCCONbits.IRCF1 = 1;
  2695  0034D6  8AD3               	bsf	4051,5,c	;volatile
  2696                           
  2697                           ;hardware.c: 176: OSCCONbits.IRCF2 = 1;
  2698  0034D8  8CD3               	bsf	4051,6,c	;volatile
  2699  0034DA  0012               	return		;funcret
  2700  0034DC                     __end_of_init_oscilador:
  2701                           	opt stack 0
  2702                           tblptru	equ	0xFF8
  2703                           tblptrh	equ	0xFF7
  2704                           tblptrl	equ	0xFF6
  2705                           tablat	equ	0xFF5
  2706                           prodh	equ	0xFF4
  2707                           prodl	equ	0xFF3
  2708                           postinc0	equ	0xFEE
  2709                           wreg	equ	0xFE8
  2710                           postdec1	equ	0xFE5
  2711                           fsr1h	equ	0xFE2
  2712                           fsr1l	equ	0xFE1
  2713                           postinc2	equ	0xFDE
  2714                           postdec2	equ	0xFDD
  2715                           fsr2h	equ	0xFDA
  2716                           fsr2l	equ	0xFD9
  2717                           status	equ	0xFD8
  2718                           
  2719 ;; *************** function _init_interrupt *****************
  2720 ;; Defined at:
  2721 ;;		line 98 in file "bibliotecas/hardware.c"
  2722 ;; Parameters:    Size  Location     Type
  2723 ;;		None
  2724 ;; Auto vars:     Size  Location     Type
  2725 ;;		None
  2726 ;; Return value:  Size  Location     Type
  2727 ;;                  1    wreg      void 
  2728 ;; Registers used:
  2729 ;;		wreg, status,2
  2730 ;; Tracked objects:
  2731 ;;		On entry : 0/0
  2732 ;;		On exit  : 0/0
  2733 ;;		Unchanged: 0/0
  2734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2735 ;;      Params:         0       0       0       0       0       0       0       0       0
  2736 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2737 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2738 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2739 ;;Total ram usage:        0 bytes
  2740 ;; Hardware stack levels used:    1
  2741 ;; Hardware stack levels required when called:    2
  2742 ;; This function calls:
  2743 ;;		Nothing
  2744 ;; This function is called by:
  2745 ;;		_init_hardware
  2746 ;; This function uses a non-reentrant model
  2747 ;;
  2748                           
  2749                           	psect	text9
  2750  003450                     __ptext9:
  2751                           	opt stack 0
  2752  003450                     _init_interrupt:
  2753                           	opt stack 27
  2754                           
  2755                           ;hardware.c: 100: INTCON = 0b11110000;
  2756                           
  2757                           ;incstack = 0
  2758  003450  0EF0               	movlw	240
  2759  003452  6EF2               	movwf	intcon,c	;volatile
  2760                           
  2761                           ;hardware.c: 101: INTCON2 = 0b00000000;
  2762  003454  0E00               	movlw	0
  2763  003456  6EF1               	movwf	intcon2,c	;volatile
  2764                           
  2765                           ;hardware.c: 102: INTCON3 = 0b00000000;
  2766  003458  0E00               	movlw	0
  2767  00345A  6EF0               	movwf	intcon3,c	;volatile
  2768                           
  2769                           ;hardware.c: 104: PIE1 = 0b00100000;
  2770  00345C  0E20               	movlw	32
  2771  00345E  6E9D               	movwf	3997,c	;volatile
  2772  003460  0012               	return		;funcret
  2773  003462                     __end_of_init_interrupt:
  2774                           	opt stack 0
  2775                           tblptru	equ	0xFF8
  2776                           tblptrh	equ	0xFF7
  2777                           tblptrl	equ	0xFF6
  2778                           tablat	equ	0xFF5
  2779                           prodh	equ	0xFF4
  2780                           prodl	equ	0xFF3
  2781                           intcon	equ	0xFF2
  2782                           intcon2	equ	0xFF1
  2783                           intcon3	equ	0xFF0
  2784                           postinc0	equ	0xFEE
  2785                           wreg	equ	0xFE8
  2786                           postdec1	equ	0xFE5
  2787                           fsr1h	equ	0xFE2
  2788                           fsr1l	equ	0xFE1
  2789                           postinc2	equ	0xFDE
  2790                           postdec2	equ	0xFDD
  2791                           fsr2h	equ	0xFDA
  2792                           fsr2l	equ	0xFD9
  2793                           status	equ	0xFD8
  2794                           
  2795 ;; *************** function _config_timer_zero *****************
  2796 ;; Defined at:
  2797 ;;		line 83 in file "bibliotecas/hardware.c"
  2798 ;; Parameters:    Size  Location     Type
  2799 ;;		None
  2800 ;; Auto vars:     Size  Location     Type
  2801 ;;		None
  2802 ;; Return value:  Size  Location     Type
  2803 ;;                  1    wreg      void 
  2804 ;; Registers used:
  2805 ;;		wreg, status,2, cstack
  2806 ;; Tracked objects:
  2807 ;;		On entry : 0/0
  2808 ;;		On exit  : 0/0
  2809 ;;		Unchanged: 0/0
  2810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2811 ;;      Params:         0       0       0       0       0       0       0       0       0
  2812 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2813 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2814 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2815 ;;Total ram usage:        0 bytes
  2816 ;; Hardware stack levels used:    1
  2817 ;; Hardware stack levels required when called:    3
  2818 ;; This function calls:
  2819 ;;		_write_timer_zero
  2820 ;; This function is called by:
  2821 ;;		_init_hardware
  2822 ;; This function uses a non-reentrant model
  2823 ;;
  2824                           
  2825                           	psect	text10
  2826  0033DC                     __ptext10:
  2827                           	opt stack 0
  2828  0033DC                     _config_timer_zero:
  2829                           	opt stack 26
  2830                           
  2831                           ;hardware.c: 85: T0CON = 0b11000011;
  2832                           
  2833                           ;incstack = 0
  2834  0033DC  0EC3               	movlw	195
  2835  0033DE  6ED5               	movwf	4053,c	;volatile
  2836                           
  2837                           ;hardware.c: 86: SPPCON = 0b00000000;
  2838  0033E0  0E00               	movlw	0
  2839  0033E2  6E65               	movwf	3941,c	;volatile
  2840                           
  2841                           ;hardware.c: 87: SPPCFG = 0b00000000;
  2842  0033E4  0E00               	movlw	0
  2843  0033E6  6E63               	movwf	3939,c	;volatile
  2844                           
  2845                           ;hardware.c: 88: write_timer_zero(0x0083);
  2846  0033E8  0E00               	movlw	0
  2847  0033EA  6E1B               	movwf	write_timer_zero@timer0+1,c
  2848  0033EC  0E83               	movlw	131
  2849  0033EE  6E1A               	movwf	write_timer_zero@timer0,c
  2850  0033F0  EC31  F01A         	call	_write_timer_zero	;wreg free
  2851  0033F4  0012               	return		;funcret
  2852  0033F6                     __end_of_config_timer_zero:
  2853                           	opt stack 0
  2854                           tblptru	equ	0xFF8
  2855                           tblptrh	equ	0xFF7
  2856                           tblptrl	equ	0xFF6
  2857                           tablat	equ	0xFF5
  2858                           prodh	equ	0xFF4
  2859                           prodl	equ	0xFF3
  2860                           intcon	equ	0xFF2
  2861                           intcon2	equ	0xFF1
  2862                           intcon3	equ	0xFF0
  2863                           postinc0	equ	0xFEE
  2864                           wreg	equ	0xFE8
  2865                           postdec1	equ	0xFE5
  2866                           fsr1h	equ	0xFE2
  2867                           fsr1l	equ	0xFE1
  2868                           postinc2	equ	0xFDE
  2869                           postdec2	equ	0xFDD
  2870                           fsr2h	equ	0xFDA
  2871                           fsr2l	equ	0xFD9
  2872                           status	equ	0xFD8
  2873                           
  2874 ;; *************** function _write_timer_zero *****************
  2875 ;; Defined at:
  2876 ;;		line 138 in file "bibliotecas/hardware.c"
  2877 ;; Parameters:    Size  Location     Type
  2878 ;;  timer0          2   25[COMRAM] unsigned int 
  2879 ;; Auto vars:     Size  Location     Type
  2880 ;;  timer           2   27[COMRAM] struct Timers
  2881 ;; Return value:  Size  Location     Type
  2882 ;;                  1    wreg      void 
  2883 ;; Registers used:
  2884 ;;		None
  2885 ;; Tracked objects:
  2886 ;;		On entry : 0/0
  2887 ;;		On exit  : 0/0
  2888 ;;		Unchanged: 0/0
  2889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2890 ;;      Params:         2       0       0       0       0       0       0       0       0
  2891 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2892 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2893 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2894 ;;Total ram usage:        4 bytes
  2895 ;; Hardware stack levels used:    1
  2896 ;; Hardware stack levels required when called:    2
  2897 ;; This function calls:
  2898 ;;		Nothing
  2899 ;; This function is called by:
  2900 ;;		_config_timer_zero
  2901 ;; This function uses a non-reentrant model
  2902 ;;
  2903                           
  2904                           	psect	text11
  2905  003462                     __ptext11:
  2906                           	opt stack 0
  2907  003462                     _write_timer_zero:
  2908                           	opt stack 26
  2909                           
  2910                           ;hardware.c: 140: union Timers timer;
  2911                           ;hardware.c: 142: timer.lt = timer0;
  2912                           
  2913                           ;incstack = 0
  2914  003462  C01A  F01C         	movff	write_timer_zero@timer0,write_timer_zero@timer
  2915  003466  C01B  F01D         	movff	write_timer_zero@timer0+1,write_timer_zero@timer+1
  2916                           
  2917                           ;hardware.c: 144: TMR0H = timer.bt[1];
  2918  00346A  C01D  FFD7         	movff	write_timer_zero@timer+1,4055	;volatile
  2919                           
  2920                           ;hardware.c: 145: TMR0L = timer.bt[0];
  2921  00346E  C01C  FFD6         	movff	write_timer_zero@timer,4054	;volatile
  2922  003472  0012               	return		;funcret
  2923  003474                     __end_of_write_timer_zero:
  2924                           	opt stack 0
  2925                           tblptru	equ	0xFF8
  2926                           tblptrh	equ	0xFF7
  2927                           tblptrl	equ	0xFF6
  2928                           tablat	equ	0xFF5
  2929                           prodh	equ	0xFF4
  2930                           prodl	equ	0xFF3
  2931                           intcon	equ	0xFF2
  2932                           intcon2	equ	0xFF1
  2933                           intcon3	equ	0xFF0
  2934                           postinc0	equ	0xFEE
  2935                           wreg	equ	0xFE8
  2936                           postdec1	equ	0xFE5
  2937                           fsr1h	equ	0xFE2
  2938                           fsr1l	equ	0xFE1
  2939                           postinc2	equ	0xFDE
  2940                           postdec2	equ	0xFDD
  2941                           fsr2h	equ	0xFDA
  2942                           fsr2l	equ	0xFD9
  2943                           status	equ	0xFD8
  2944                           
  2945 ;; *************** function _config_timer_dois *****************
  2946 ;; Defined at:
  2947 ;;		line 200 in file "bibliotecas/hardware.c"
  2948 ;; Parameters:    Size  Location     Type
  2949 ;;		None
  2950 ;; Auto vars:     Size  Location     Type
  2951 ;;		None
  2952 ;; Return value:  Size  Location     Type
  2953 ;;                  1    wreg      void 
  2954 ;; Registers used:
  2955 ;;		wreg, status,2
  2956 ;; Tracked objects:
  2957 ;;		On entry : 0/0
  2958 ;;		On exit  : 0/0
  2959 ;;		Unchanged: 0/0
  2960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2961 ;;      Params:         0       0       0       0       0       0       0       0       0
  2962 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2963 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2964 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2965 ;;Total ram usage:        0 bytes
  2966 ;; Hardware stack levels used:    1
  2967 ;; Hardware stack levels required when called:    2
  2968 ;; This function calls:
  2969 ;;		Nothing
  2970 ;; This function is called by:
  2971 ;;		_init_hardware
  2972 ;; This function uses a non-reentrant model
  2973 ;;
  2974                           
  2975                           	psect	text12
  2976  0034A6                     __ptext12:
  2977                           	opt stack 0
  2978  0034A6                     _config_timer_dois:
  2979                           	opt stack 27
  2980                           
  2981                           ;hardware.c: 202: T2CON = 0b00000100;
  2982                           
  2983                           ;incstack = 0
  2984  0034A6  0E04               	movlw	4
  2985  0034A8  6ECA               	movwf	4042,c	;volatile
  2986                           
  2987                           ;hardware.c: 203: TMR2 = 0;
  2988  0034AA  0E00               	movlw	0
  2989  0034AC  6ECC               	movwf	4044,c	;volatile
  2990                           
  2991                           ;hardware.c: 204: PR2 = 0xFF;
  2992  0034AE  68CB               	setf	4043,c	;volatile
  2993  0034B0  0012               	return		;funcret
  2994  0034B2                     __end_of_config_timer_dois:
  2995                           	opt stack 0
  2996                           tblptru	equ	0xFF8
  2997                           tblptrh	equ	0xFF7
  2998                           tblptrl	equ	0xFF6
  2999                           tablat	equ	0xFF5
  3000                           prodh	equ	0xFF4
  3001                           prodl	equ	0xFF3
  3002                           intcon	equ	0xFF2
  3003                           intcon2	equ	0xFF1
  3004                           intcon3	equ	0xFF0
  3005                           postinc0	equ	0xFEE
  3006                           wreg	equ	0xFE8
  3007                           postdec1	equ	0xFE5
  3008                           fsr1h	equ	0xFE2
  3009                           fsr1l	equ	0xFE1
  3010                           postinc2	equ	0xFDE
  3011                           postdec2	equ	0xFDD
  3012                           fsr2h	equ	0xFDA
  3013                           fsr2l	equ	0xFD9
  3014                           status	equ	0xFD8
  3015                           
  3016 ;; *************** function _inicializa_uart *****************
  3017 ;; Defined at:
  3018 ;;		line 206 in file "bibliotecas/uart.c"
  3019 ;; Parameters:    Size  Location     Type
  3020 ;;		None
  3021 ;; Auto vars:     Size  Location     Type
  3022 ;;		None
  3023 ;; Return value:  Size  Location     Type
  3024 ;;                  1    wreg      void 
  3025 ;; Registers used:
  3026 ;;		wreg, status,2, status,0, cstack
  3027 ;; Tracked objects:
  3028 ;;		On entry : 0/0
  3029 ;;		On exit  : 0/0
  3030 ;;		Unchanged: 0/0
  3031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3032 ;;      Params:         0       0       0       0       0       0       0       0       0
  3033 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3034 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3035 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3036 ;;Total ram usage:        0 bytes
  3037 ;; Hardware stack levels used:    1
  3038 ;; Hardware stack levels required when called:    4
  3039 ;; This function calls:
  3040 ;;		_configura_baudrate_uart
  3041 ;; This function is called by:
  3042 ;;		_main
  3043 ;; This function uses a non-reentrant model
  3044 ;;
  3045                           
  3046                           	psect	text13
  3047  003380                     __ptext13:
  3048                           	opt stack 0
  3049  003380                     _inicializa_uart:
  3050                           	opt stack 26
  3051                           
  3052                           ;uart.c: 208: TRISCbits.RC6 = 0;
  3053                           
  3054                           ;incstack = 0
  3055  003380  9C94               	bcf	3988,6,c	;volatile
  3056                           
  3057                           ;uart.c: 209: TRISCbits.RC7 = 0;
  3058  003382  9E94               	bcf	3988,7,c	;volatile
  3059                           
  3060                           ;uart.c: 211: (void)configura_baudrate_uart(9600);
  3061  003384  0E80               	movlw	128
  3062  003386  6E28               	movwf	configura_baudrate_uart@baudrate,c
  3063  003388  0E25               	movlw	37
  3064  00338A  6E29               	movwf	configura_baudrate_uart@baudrate+1,c
  3065  00338C  0E00               	movlw	0
  3066  00338E  6E2A               	movwf	configura_baudrate_uart@baudrate+2,c
  3067  003390  0E00               	movlw	0
  3068  003392  6E2B               	movwf	configura_baudrate_uart@baudrate+3,c
  3069  003394  EC8D  F010         	call	_configura_baudrate_uart	;wreg free
  3070                           
  3071                           ;uart.c: 213: TXSTA = 0x20;
  3072  003398  0E20               	movlw	32
  3073  00339A  6EAC               	movwf	4012,c	;volatile
  3074                           
  3075                           ;uart.c: 214: RCSTA = 0x90;
  3076  00339C  0E90               	movlw	144
  3077  00339E  6EAB               	movwf	4011,c	;volatile
  3078  0033A0  0012               	return		;funcret
  3079  0033A2                     __end_of_inicializa_uart:
  3080                           	opt stack 0
  3081                           tblptru	equ	0xFF8
  3082                           tblptrh	equ	0xFF7
  3083                           tblptrl	equ	0xFF6
  3084                           tablat	equ	0xFF5
  3085                           prodh	equ	0xFF4
  3086                           prodl	equ	0xFF3
  3087                           intcon	equ	0xFF2
  3088                           intcon2	equ	0xFF1
  3089                           intcon3	equ	0xFF0
  3090                           postinc0	equ	0xFEE
  3091                           wreg	equ	0xFE8
  3092                           postdec1	equ	0xFE5
  3093                           fsr1h	equ	0xFE2
  3094                           fsr1l	equ	0xFE1
  3095                           postinc2	equ	0xFDE
  3096                           postdec2	equ	0xFDD
  3097                           fsr2h	equ	0xFDA
  3098                           fsr2l	equ	0xFD9
  3099                           status	equ	0xFD8
  3100                           
  3101 ;; *************** function _configura_baudrate_uart *****************
  3102 ;; Defined at:
  3103 ;;		line 50 in file "bibliotecas/uart.c"
  3104 ;; Parameters:    Size  Location     Type
  3105 ;;  baudrate        4   39[COMRAM] const long 
  3106 ;; Auto vars:     Size  Location     Type
  3107 ;;  x               2    8[BANK0 ] unsigned int 
  3108 ;; Return value:  Size  Location     Type
  3109 ;;                  1    wreg      unsigned char 
  3110 ;; Registers used:
  3111 ;;		wreg, status,2, status,0, cstack
  3112 ;; Tracked objects:
  3113 ;;		On entry : 0/0
  3114 ;;		On exit  : 0/0
  3115 ;;		Unchanged: 0/0
  3116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3117 ;;      Params:         4       0       0       0       0       0       0       0       0
  3118 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3119 ;;      Temps:          0       8       0       0       0       0       0       0       0
  3120 ;;      Totals:         4      10       0       0       0       0       0       0       0
  3121 ;;Total ram usage:       14 bytes
  3122 ;; Hardware stack levels used:    1
  3123 ;; Hardware stack levels required when called:    3
  3124 ;; This function calls:
  3125 ;;		___aldiv
  3126 ;; This function is called by:
  3127 ;;		_inicializa_uart
  3128 ;; This function uses a non-reentrant model
  3129 ;;
  3130                           
  3131                           	psect	text14
  3132  00211A                     __ptext14:
  3133                           	opt stack 0
  3134  00211A                     _configura_baudrate_uart:
  3135                           	opt stack 26
  3136                           
  3137                           ;uart.c: 52: unsigned int x;
  3138                           ;uart.c: 54: x = (48000000 - baudrate*64)/(baudrate*64);
  3139                           
  3140                           ;incstack = 0
  3141  00211A  C028  F060         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  3142  00211E  C029  F061         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  3143  002122  C02A  F062         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  3144  002126  C02B  F063         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  3145  00212A  0E06               	movlw	6
  3146  00212C                     u8465:
  3147  00212C  90D8               	bcf	status,0,c
  3148  00212E  0100               	movlb	0	; () banked
  3149  002130  3760               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  3150  002132  3761               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  3151  002134  3762               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  3152  002136  3763               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  3153  002138  2EE8               	decfsz	wreg,f,c
  3154  00213A  D7F8               	goto	u8465
  3155  00213C  1F60               	comf	??_configura_baudrate_uart& (0+255),f,b
  3156  00213E  1F61               	comf	(??_configura_baudrate_uart+1)& (0+255),f,b
  3157  002140  1F62               	comf	(??_configura_baudrate_uart+2)& (0+255),f,b
  3158  002142  1F63               	comf	(??_configura_baudrate_uart+3)& (0+255),f,b
  3159  002144  2B60               	incf	??_configura_baudrate_uart& (0+255),f,b
  3160  002146  0E00               	movlw	0
  3161  002148  2361               	addwfc	(??_configura_baudrate_uart+1)& (0+255),f,b
  3162  00214A  2362               	addwfc	(??_configura_baudrate_uart+2)& (0+255),f,b
  3163  00214C  2363               	addwfc	(??_configura_baudrate_uart+3)& (0+255),f,b
  3164  00214E  0E00               	movlw	0
  3165  002150  2560               	addwf	??_configura_baudrate_uart& (0+255),w,b
  3166  002152  6E1A               	movwf	___aldiv@dividend,c
  3167  002154  0E6C               	movlw	108
  3168  002156  2161               	addwfc	(??_configura_baudrate_uart+1)& (0+255),w,b
  3169  002158  6E1B               	movwf	___aldiv@dividend+1,c
  3170  00215A  0EDC               	movlw	220
  3171  00215C  2162               	addwfc	(??_configura_baudrate_uart+2)& (0+255),w,b
  3172  00215E  6E1C               	movwf	___aldiv@dividend+2,c
  3173  002160  0E02               	movlw	2
  3174  002162  2163               	addwfc	(??_configura_baudrate_uart+3)& (0+255),w,b
  3175  002164  6E1D               	movwf	___aldiv@dividend+3,c
  3176  002166  C028  F064         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  3177  00216A  C029  F065         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  3178  00216E  C02A  F066         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  3179  002172  C02B  F067         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  3180  002176  0E06               	movlw	6
  3181  002178                     u8475:
  3182  002178  90D8               	bcf	status,0,c
  3183  00217A  3764               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  3184  00217C  3765               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  3185  00217E  3766               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  3186  002180  3767               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  3187  002182  2EE8               	decfsz	wreg,f,c
  3188  002184  D7F9               	goto	u8475
  3189  002186  C064  F01E         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  3190  00218A  C065  F01F         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  3191  00218E  C066  F020         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  3192  002192  C067  F021         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  3193  002196  ECE9  F013         	call	___aldiv	;wreg free
  3194  00219A  C01A  F068         	movff	?___aldiv,configura_baudrate_uart@x
  3195  00219E  C01B  F069         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  3196                           
  3197                           ;uart.c: 55: if(x > 255)
  3198  0021A2  0100               	movlb	0	; () banked
  3199  0021A4  0569               	decf	(configura_baudrate_uart@x+1)& (0+255),w,b
  3200  0021A6  A0D8               	btfss	status,0,c
  3201  0021A8  D044               	goto	l334
  3202                           
  3203                           ; BSR set to: 0
  3204                           ;uart.c: 56: {
  3205                           ;uart.c: 57: x = (48000000 - baudrate*16)/(baudrate*16);
  3206  0021AA  C028  F060         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  3207  0021AE  C029  F061         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  3208  0021B2  C02A  F062         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  3209  0021B6  C02B  F063         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  3210  0021BA  0E04               	movlw	4
  3211  0021BC                     u8495:
  3212  0021BC  90D8               	bcf	status,0,c
  3213  0021BE  3760               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  3214  0021C0  3761               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  3215  0021C2  3762               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  3216  0021C4  3763               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  3217  0021C6  2EE8               	decfsz	wreg,f,c
  3218  0021C8  D7F9               	goto	u8495
  3219  0021CA  1F60               	comf	??_configura_baudrate_uart& (0+255),f,b
  3220  0021CC  1F61               	comf	(??_configura_baudrate_uart+1)& (0+255),f,b
  3221  0021CE  1F62               	comf	(??_configura_baudrate_uart+2)& (0+255),f,b
  3222  0021D0  1F63               	comf	(??_configura_baudrate_uart+3)& (0+255),f,b
  3223  0021D2  2B60               	incf	??_configura_baudrate_uart& (0+255),f,b
  3224  0021D4  0E00               	movlw	0
  3225  0021D6  2361               	addwfc	(??_configura_baudrate_uart+1)& (0+255),f,b
  3226  0021D8  2362               	addwfc	(??_configura_baudrate_uart+2)& (0+255),f,b
  3227  0021DA  2363               	addwfc	(??_configura_baudrate_uart+3)& (0+255),f,b
  3228  0021DC  0E00               	movlw	0
  3229  0021DE  2560               	addwf	??_configura_baudrate_uart& (0+255),w,b
  3230  0021E0  6E1A               	movwf	___aldiv@dividend,c
  3231  0021E2  0E6C               	movlw	108
  3232  0021E4  2161               	addwfc	(??_configura_baudrate_uart+1)& (0+255),w,b
  3233  0021E6  6E1B               	movwf	___aldiv@dividend+1,c
  3234  0021E8  0EDC               	movlw	220
  3235  0021EA  2162               	addwfc	(??_configura_baudrate_uart+2)& (0+255),w,b
  3236  0021EC  6E1C               	movwf	___aldiv@dividend+2,c
  3237  0021EE  0E02               	movlw	2
  3238  0021F0  2163               	addwfc	(??_configura_baudrate_uart+3)& (0+255),w,b
  3239  0021F2  6E1D               	movwf	___aldiv@dividend+3,c
  3240  0021F4  C028  F064         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  3241  0021F8  C029  F065         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  3242  0021FC  C02A  F066         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  3243  002200  C02B  F067         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  3244  002204  0E04               	movlw	4
  3245  002206                     u8505:
  3246  002206  90D8               	bcf	status,0,c
  3247  002208  3764               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  3248  00220A  3765               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  3249  00220C  3766               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  3250  00220E  3767               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  3251  002210  2EE8               	decfsz	wreg,f,c
  3252  002212  D7F9               	goto	u8505
  3253  002214  C064  F01E         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  3254  002218  C065  F01F         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  3255  00221C  C066  F020         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  3256  002220  C067  F021         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  3257  002224  ECE9  F013         	call	___aldiv	;wreg free
  3258  002228  C01A  F068         	movff	?___aldiv,configura_baudrate_uart@x
  3259  00222C  C01B  F069         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  3260                           
  3261                           ;uart.c: 58: BRGH = 1;
  3262  002230  84AC               	bsf	4012,2,c	;volatile
  3263  002232                     l334:
  3264                           
  3265                           ;uart.c: 59: }
  3266                           ;uart.c: 60: if(x < 256)
  3267  002232  0100               	movlb	0	; () banked
  3268  002234  0569               	decf	(configura_baudrate_uart@x+1)& (0+255),w,b
  3269  002236  B0D8               	btfsc	status,0,c
  3270  002238  0012               	return	
  3271                           
  3272                           ; BSR set to: 0
  3273                           ;uart.c: 61: {
  3274                           ;uart.c: 62: SPBRG = x;
  3275  00223A  C068  FFAF         	movff	configura_baudrate_uart@x,4015	;volatile
  3276                           
  3277                           ;uart.c: 63: SYNC = 0;
  3278  00223E  98AC               	bcf	4012,4,c	;volatile
  3279                           
  3280                           ;uart.c: 64: SPEN = 1;
  3281  002240  8EAB               	bsf	4011,7,c	;volatile
  3282                           
  3283                           ;uart.c: 65: TRISCbits.RC7 = 1;
  3284  002242  8E94               	bsf	3988,7,c	;volatile
  3285                           
  3286                           ;uart.c: 66: TRISCbits.RC6 = 1;
  3287  002244  8C94               	bsf	3988,6,c	;volatile
  3288                           
  3289                           ;uart.c: 67: CREN = 1;
  3290  002246  88AB               	bsf	4011,4,c	;volatile
  3291                           
  3292                           ;uart.c: 68: TXEN = 1;
  3293  002248  8AAC               	bsf	4012,5,c	;volatile
  3294                           
  3295                           ;uart.c: 70: return (1);
  3296                           ;	Return value of _configura_baudrate_uart is never used
  3297  00224A  0012               	return	
  3298  00224C                     __end_of_configura_baudrate_uart:
  3299                           	opt stack 0
  3300                           tblptru	equ	0xFF8
  3301                           tblptrh	equ	0xFF7
  3302                           tblptrl	equ	0xFF6
  3303                           tablat	equ	0xFF5
  3304                           prodh	equ	0xFF4
  3305                           prodl	equ	0xFF3
  3306                           intcon	equ	0xFF2
  3307                           intcon2	equ	0xFF1
  3308                           intcon3	equ	0xFF0
  3309                           postinc0	equ	0xFEE
  3310                           wreg	equ	0xFE8
  3311                           postdec1	equ	0xFE5
  3312                           fsr1h	equ	0xFE2
  3313                           fsr1l	equ	0xFE1
  3314                           postinc2	equ	0xFDE
  3315                           postdec2	equ	0xFDD
  3316                           fsr2h	equ	0xFDA
  3317                           fsr2l	equ	0xFD9
  3318                           status	equ	0xFD8
  3319                           
  3320 ;; *************** function ___aldiv *****************
  3321 ;; Defined at:
  3322 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  3323 ;; Parameters:    Size  Location     Type
  3324 ;;  dividend        4   25[COMRAM] long 
  3325 ;;  divisor         4   29[COMRAM] long 
  3326 ;; Auto vars:     Size  Location     Type
  3327 ;;  quotient        4   35[COMRAM] long 
  3328 ;;  sign            1   34[COMRAM] unsigned char 
  3329 ;;  counter         1   33[COMRAM] unsigned char 
  3330 ;; Return value:  Size  Location     Type
  3331 ;;                  4   25[COMRAM] long 
  3332 ;; Registers used:
  3333 ;;		wreg, status,2, status,0
  3334 ;; Tracked objects:
  3335 ;;		On entry : 0/0
  3336 ;;		On exit  : 0/0
  3337 ;;		Unchanged: 0/0
  3338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3339 ;;      Params:         8       0       0       0       0       0       0       0       0
  3340 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3341 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3342 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3343 ;;Total ram usage:       14 bytes
  3344 ;; Hardware stack levels used:    1
  3345 ;; Hardware stack levels required when called:    2
  3346 ;; This function calls:
  3347 ;;		Nothing
  3348 ;; This function is called by:
  3349 ;;		_configura_baudrate_uart
  3350 ;; This function uses a non-reentrant model
  3351 ;;
  3352                           
  3353                           	psect	text15
  3354  0027D2                     __ptext15:
  3355                           	opt stack 0
  3356  0027D2                     ___aldiv:
  3357                           	opt stack 26
  3358                           
  3359                           ; BSR set to: 0
  3360                           ;incstack = 0
  3361  0027D2  0E00               	movlw	0
  3362  0027D4  6E23               	movwf	___aldiv@sign,c
  3363  0027D6  AE21               	btfss	___aldiv@divisor+3,7,c
  3364  0027D8  D00A               	goto	l1130
  3365  0027DA  1E21               	comf	___aldiv@divisor+3,f,c
  3366  0027DC  1E20               	comf	___aldiv@divisor+2,f,c
  3367  0027DE  1E1F               	comf	___aldiv@divisor+1,f,c
  3368  0027E0  6C1E               	negf	___aldiv@divisor,c
  3369  0027E2  0E00               	movlw	0
  3370  0027E4  221F               	addwfc	___aldiv@divisor+1,f,c
  3371  0027E6  2220               	addwfc	___aldiv@divisor+2,f,c
  3372  0027E8  2221               	addwfc	___aldiv@divisor+3,f,c
  3373  0027EA  0E01               	movlw	1
  3374  0027EC  6E23               	movwf	___aldiv@sign,c
  3375  0027EE                     l1130:
  3376  0027EE  AE1D               	btfss	___aldiv@dividend+3,7,c
  3377  0027F0  D00A               	goto	l1131
  3378  0027F2  1E1D               	comf	___aldiv@dividend+3,f,c
  3379  0027F4  1E1C               	comf	___aldiv@dividend+2,f,c
  3380  0027F6  1E1B               	comf	___aldiv@dividend+1,f,c
  3381  0027F8  6C1A               	negf	___aldiv@dividend,c
  3382  0027FA  0E00               	movlw	0
  3383  0027FC  221B               	addwfc	___aldiv@dividend+1,f,c
  3384  0027FE  221C               	addwfc	___aldiv@dividend+2,f,c
  3385  002800  221D               	addwfc	___aldiv@dividend+3,f,c
  3386  002802  0E01               	movlw	1
  3387  002804  1A23               	xorwf	___aldiv@sign,f,c
  3388  002806                     l1131:
  3389  002806  0E00               	movlw	0
  3390  002808  6E24               	movwf	___aldiv@quotient,c
  3391  00280A  0E00               	movlw	0
  3392  00280C  6E25               	movwf	___aldiv@quotient+1,c
  3393  00280E  0E00               	movlw	0
  3394  002810  6E26               	movwf	___aldiv@quotient+2,c
  3395  002812  0E00               	movlw	0
  3396  002814  6E27               	movwf	___aldiv@quotient+3,c
  3397  002816  501E               	movf	___aldiv@divisor,w,c
  3398  002818  101F               	iorwf	___aldiv@divisor+1,w,c
  3399  00281A  1020               	iorwf	___aldiv@divisor+2,w,c
  3400  00281C  1021               	iorwf	___aldiv@divisor+3,w,c
  3401  00281E  B4D8               	btfsc	status,2,c
  3402  002820  D02A               	goto	l1138
  3403  002822  0E01               	movlw	1
  3404  002824  6E22               	movwf	___aldiv@counter,c
  3405  002826  D006               	goto	l1133
  3406  002828  90D8               	bcf	status,0,c
  3407  00282A  361E               	rlcf	___aldiv@divisor,f,c
  3408  00282C  361F               	rlcf	___aldiv@divisor+1,f,c
  3409  00282E  3620               	rlcf	___aldiv@divisor+2,f,c
  3410  002830  3621               	rlcf	___aldiv@divisor+3,f,c
  3411  002832  2A22               	incf	___aldiv@counter,f,c
  3412  002834                     l1133:
  3413  002834  AE21               	btfss	___aldiv@divisor+3,7,c
  3414  002836  D7F8               	goto	l1134
  3415  002838                     u8430:
  3416  002838  90D8               	bcf	status,0,c
  3417  00283A  3624               	rlcf	___aldiv@quotient,f,c
  3418  00283C  3625               	rlcf	___aldiv@quotient+1,f,c
  3419  00283E  3626               	rlcf	___aldiv@quotient+2,f,c
  3420  002840  3627               	rlcf	___aldiv@quotient+3,f,c
  3421  002842  501E               	movf	___aldiv@divisor,w,c
  3422  002844  5C1A               	subwf	___aldiv@dividend,w,c
  3423  002846  501F               	movf	___aldiv@divisor+1,w,c
  3424  002848  581B               	subwfb	___aldiv@dividend+1,w,c
  3425  00284A  5020               	movf	___aldiv@divisor+2,w,c
  3426  00284C  581C               	subwfb	___aldiv@dividend+2,w,c
  3427  00284E  5021               	movf	___aldiv@divisor+3,w,c
  3428  002850  581D               	subwfb	___aldiv@dividend+3,w,c
  3429  002852  A0D8               	btfss	status,0,c
  3430  002854  D009               	goto	l1137
  3431  002856  501E               	movf	___aldiv@divisor,w,c
  3432  002858  5E1A               	subwf	___aldiv@dividend,f,c
  3433  00285A  501F               	movf	___aldiv@divisor+1,w,c
  3434  00285C  5A1B               	subwfb	___aldiv@dividend+1,f,c
  3435  00285E  5020               	movf	___aldiv@divisor+2,w,c
  3436  002860  5A1C               	subwfb	___aldiv@dividend+2,f,c
  3437  002862  5021               	movf	___aldiv@divisor+3,w,c
  3438  002864  5A1D               	subwfb	___aldiv@dividend+3,f,c
  3439  002866  8024               	bsf	___aldiv@quotient,0,c
  3440  002868                     l1137:
  3441  002868  90D8               	bcf	status,0,c
  3442  00286A  3221               	rrcf	___aldiv@divisor+3,f,c
  3443  00286C  3220               	rrcf	___aldiv@divisor+2,f,c
  3444  00286E  321F               	rrcf	___aldiv@divisor+1,f,c
  3445  002870  321E               	rrcf	___aldiv@divisor,f,c
  3446  002872  2E22               	decfsz	___aldiv@counter,f,c
  3447  002874  D7E1               	goto	u8430
  3448  002876                     l1138:
  3449  002876  5023               	movf	___aldiv@sign,w,c
  3450  002878  B4D8               	btfsc	status,2,c
  3451  00287A  D008               	goto	l1139
  3452  00287C  1E27               	comf	___aldiv@quotient+3,f,c
  3453  00287E  1E26               	comf	___aldiv@quotient+2,f,c
  3454  002880  1E25               	comf	___aldiv@quotient+1,f,c
  3455  002882  6C24               	negf	___aldiv@quotient,c
  3456  002884  0E00               	movlw	0
  3457  002886  2225               	addwfc	___aldiv@quotient+1,f,c
  3458  002888  2226               	addwfc	___aldiv@quotient+2,f,c
  3459  00288A  2227               	addwfc	___aldiv@quotient+3,f,c
  3460  00288C                     l1139:
  3461  00288C  C024  F01A         	movff	___aldiv@quotient,?___aldiv
  3462  002890  C025  F01B         	movff	___aldiv@quotient+1,?___aldiv+1
  3463  002894  C026  F01C         	movff	___aldiv@quotient+2,?___aldiv+2
  3464  002898  C027  F01D         	movff	___aldiv@quotient+3,?___aldiv+3
  3465  00289C  0012               	return	
  3466  00289E                     __end_of___aldiv:
  3467                           	opt stack 0
  3468                           tblptru	equ	0xFF8
  3469                           tblptrh	equ	0xFF7
  3470                           tblptrl	equ	0xFF6
  3471                           tablat	equ	0xFF5
  3472                           prodh	equ	0xFF4
  3473                           prodl	equ	0xFF3
  3474                           intcon	equ	0xFF2
  3475                           intcon2	equ	0xFF1
  3476                           intcon3	equ	0xFF0
  3477                           postinc0	equ	0xFEE
  3478                           wreg	equ	0xFE8
  3479                           postdec1	equ	0xFE5
  3480                           fsr1h	equ	0xFE2
  3481                           fsr1l	equ	0xFE1
  3482                           postinc2	equ	0xFDE
  3483                           postdec2	equ	0xFDD
  3484                           fsr2h	equ	0xFDA
  3485                           fsr2l	equ	0xFD9
  3486                           status	equ	0xFD8
  3487                           
  3488 ;; *************** function _inicializa_tarefas *****************
  3489 ;; Defined at:
  3490 ;;		line 169 in file "main.c"
  3491 ;; Parameters:    Size  Location     Type
  3492 ;;		None
  3493 ;; Auto vars:     Size  Location     Type
  3494 ;;		None
  3495 ;; Return value:  Size  Location     Type
  3496 ;;                  1    wreg      void 
  3497 ;; Registers used:
  3498 ;;		wreg, status,2, status,0
  3499 ;; Tracked objects:
  3500 ;;		On entry : 0/0
  3501 ;;		On exit  : 0/0
  3502 ;;		Unchanged: 0/0
  3503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3504 ;;      Params:         0       0       0       0       0       0       0       0       0
  3505 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3506 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3507 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3508 ;;Total ram usage:        0 bytes
  3509 ;; Hardware stack levels used:    1
  3510 ;; Hardware stack levels required when called:    2
  3511 ;; This function calls:
  3512 ;;		Nothing
  3513 ;; This function is called by:
  3514 ;;		_main
  3515 ;; This function uses a non-reentrant model
  3516 ;;
  3517                           
  3518                           	psect	text16
  3519  00327C                     __ptext16:
  3520                           	opt stack 0
  3521  00327C                     _inicializa_tarefas:
  3522                           	opt stack 28
  3523                           
  3524                           ;main.c: 172: p_tarefas[0] = acende_led4;
  3525                           
  3526                           ;incstack = 0
  3527  00327C  0E38               	movlw	low _acende_led4
  3528  00327E  0100               	movlb	0	; () banked
  3529  003280  6FD9               	movwf	_p_tarefas& (0+255),b
  3530  003282  0E33               	movlw	high _acende_led4
  3531  003284  6FDA               	movwf	(_p_tarefas+1)& (0+255),b
  3532                           
  3533                           ;main.c: 173: p_tarefas[1] = SDCard;
  3534  003286  0E38               	movlw	low _SDCard
  3535  003288  6FDB               	movwf	(_p_tarefas+2)& (0+255),b
  3536  00328A  0E1A               	movlw	high _SDCard
  3537  00328C  6FDC               	movwf	(_p_tarefas+3)& (0+255),b
  3538                           
  3539                           ; BSR set to: 0
  3540                           ;main.c: 177: tempo_backup[0] = 1000;
  3541  00328E  0E03               	movlw	3
  3542  003290  6FD6               	movwf	(_tempo_backup+1)& (0+255),b
  3543  003292  0EE8               	movlw	232
  3544  003294  6FD5               	movwf	_tempo_backup& (0+255),b
  3545                           
  3546                           ; BSR set to: 0
  3547                           ;main.c: 178: tempo_backup[1] = 2000;
  3548  003296  0E07               	movlw	7
  3549  003298  6FD8               	movwf	(_tempo_backup+3)& (0+255),b
  3550  00329A  0ED0               	movlw	208
  3551  00329C  6FD7               	movwf	(_tempo_backup+2)& (0+255),b
  3552                           
  3553                           ; BSR set to: 0
  3554                           ;main.c: 182: tempo_tarefa[0] = 1000;
  3555  00329E  0E03               	movlw	3
  3556  0032A0  6E2E               	movwf	_tempo_tarefa+1,c
  3557  0032A2  0EE8               	movlw	232
  3558  0032A4  6E2D               	movwf	_tempo_tarefa,c
  3559                           
  3560                           ; BSR set to: 0
  3561                           ;main.c: 183: tempo_tarefa[1] = 2000;
  3562  0032A6  0E07               	movlw	7
  3563  0032A8  6E30               	movwf	_tempo_tarefa+3,c
  3564  0032AA  0ED0               	movlw	208
  3565  0032AC  6E2F               	movwf	_tempo_tarefa+2,c
  3566                           
  3567                           ; BSR set to: 0
  3568                           ;main.c: 186: tarefa_em_execucao = 0;
  3569  0032AE  0E00               	movlw	0
  3570  0032B0  6E3E               	movwf	_tarefa_em_execucao,c	;volatile
  3571                           
  3572                           ; BSR set to: 0
  3573  0032B2  0012               	return		;funcret
  3574  0032B4                     __end_of_inicializa_tarefas:
  3575                           	opt stack 0
  3576                           tblptru	equ	0xFF8
  3577                           tblptrh	equ	0xFF7
  3578                           tblptrl	equ	0xFF6
  3579                           tablat	equ	0xFF5
  3580                           prodh	equ	0xFF4
  3581                           prodl	equ	0xFF3
  3582                           intcon	equ	0xFF2
  3583                           intcon2	equ	0xFF1
  3584                           intcon3	equ	0xFF0
  3585                           postinc0	equ	0xFEE
  3586                           wreg	equ	0xFE8
  3587                           postdec1	equ	0xFE5
  3588                           fsr1h	equ	0xFE2
  3589                           fsr1l	equ	0xFE1
  3590                           postinc2	equ	0xFDE
  3591                           postdec2	equ	0xFDD
  3592                           fsr2h	equ	0xFDA
  3593                           fsr2l	equ	0xFD9
  3594                           status	equ	0xFD8
  3595                           
  3596 ;; *************** function _inicializa_shrc *****************
  3597 ;; Defined at:
  3598 ;;		line 47 in file "bibliotecas/SHRC.c"
  3599 ;; Parameters:    Size  Location     Type
  3600 ;;		None
  3601 ;; Auto vars:     Size  Location     Type
  3602 ;;		None
  3603 ;; Return value:  Size  Location     Type
  3604 ;;                  1    wreg      void 
  3605 ;; Registers used:
  3606 ;;		None
  3607 ;; Tracked objects:
  3608 ;;		On entry : 0/0
  3609 ;;		On exit  : 0/0
  3610 ;;		Unchanged: 0/0
  3611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3612 ;;      Params:         0       0       0       0       0       0       0       0       0
  3613 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3614 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3615 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3616 ;;Total ram usage:        0 bytes
  3617 ;; Hardware stack levels used:    1
  3618 ;; Hardware stack levels required when called:    2
  3619 ;; This function calls:
  3620 ;;		Nothing
  3621 ;; This function is called by:
  3622 ;;		_main
  3623 ;; This function uses a non-reentrant model
  3624 ;;
  3625                           
  3626                           	psect	text17
  3627  0034DC                     __ptext17:
  3628                           	opt stack 0
  3629  0034DC                     _inicializa_shrc:
  3630                           	opt stack 28
  3631                           
  3632                           ;SHRC.c: 49: LATBbits.LATB5 = 0;
  3633                           
  3634                           ; BSR set to: 0
  3635                           ;incstack = 0
  3636  0034DC  9A8A               	bcf	3978,5,c	;volatile
  3637                           
  3638                           ;SHRC.c: 50: LATBbits.LATB6 = 0;
  3639  0034DE  9C8A               	bcf	3978,6,c	;volatile
  3640                           
  3641                           ;SHRC.c: 51: LATBbits.LATB7 = 0;
  3642  0034E0  9E8A               	bcf	3978,7,c	;volatile
  3643  0034E2  0012               	return		;funcret
  3644  0034E4                     __end_of_inicializa_shrc:
  3645                           	opt stack 0
  3646                           tblptru	equ	0xFF8
  3647                           tblptrh	equ	0xFF7
  3648                           tblptrl	equ	0xFF6
  3649                           tablat	equ	0xFF5
  3650                           prodh	equ	0xFF4
  3651                           prodl	equ	0xFF3
  3652                           intcon	equ	0xFF2
  3653                           intcon2	equ	0xFF1
  3654                           intcon3	equ	0xFF0
  3655                           postinc0	equ	0xFEE
  3656                           wreg	equ	0xFE8
  3657                           postdec1	equ	0xFE5
  3658                           fsr1h	equ	0xFE2
  3659                           fsr1l	equ	0xFE1
  3660                           postinc2	equ	0xFDE
  3661                           postdec2	equ	0xFDD
  3662                           fsr2h	equ	0xFDA
  3663                           fsr2l	equ	0xFD9
  3664                           status	equ	0xFD8
  3665                           
  3666 ;; *************** function _inicializa_SPI *****************
  3667 ;; Defined at:
  3668 ;;		line 49 in file "bibliotecas/SPI.c"
  3669 ;; Parameters:    Size  Location     Type
  3670 ;;  sync_mode       1    wreg     unsigned char 
  3671 ;;  bus_mode        1   31[COMRAM] unsigned char 
  3672 ;;  smp_phase       1   32[COMRAM] unsigned char 
  3673 ;; Auto vars:     Size  Location     Type
  3674 ;;  sync_mode       1   33[COMRAM] unsigned char 
  3675 ;; Return value:  Size  Location     Type
  3676 ;;                  1    wreg      void 
  3677 ;; Registers used:
  3678 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3679 ;; Tracked objects:
  3680 ;;		On entry : 0/0
  3681 ;;		On exit  : 0/0
  3682 ;;		Unchanged: 0/0
  3683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3684 ;;      Params:         2       0       0       0       0       0       0       0       0
  3685 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3686 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3687 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3688 ;;Total ram usage:        3 bytes
  3689 ;; Hardware stack levels used:    1
  3690 ;; Hardware stack levels required when called:    5
  3691 ;; This function calls:
  3692 ;;		_escreve_cmd_lcd
  3693 ;;		_escreve_frase_ram_lcd
  3694 ;;		_posicao_cursor_lcd
  3695 ;; This function is called by:
  3696 ;;		_main
  3697 ;; This function uses a non-reentrant model
  3698 ;;
  3699                           
  3700                           	psect	text18
  3701  002C7C                     __ptext18:
  3702                           	opt stack 0
  3703  002C7C                     _inicializa_SPI:
  3704                           	opt stack 25
  3705                           
  3706                           ;incstack = 0
  3707                           ;inicializa_SPI@sync_mode stored from wreg
  3708  002C7C  6E22               	movwf	inicializa_SPI@sync_mode,c
  3709                           
  3710                           ;SPI.c: 51: SSPCON1bits.SSPEN = 0;
  3711  002C7E  9AC6               	bcf	4038,5,c	;volatile
  3712                           
  3713                           ;SPI.c: 52: SSPSTAT &= 0x3F;
  3714  002C80  0E3F               	movlw	63
  3715  002C82  16C7               	andwf	4039,f,c	;volatile
  3716                           
  3717                           ;SPI.c: 53: SSPCON1 = 0x00;
  3718  002C84  0E00               	movlw	0
  3719  002C86  6EC6               	movwf	4038,c	;volatile
  3720                           
  3721                           ;SPI.c: 54: SSPCON1 |= sync_mode<<7;
  3722  002C88  4022               	rrncf	inicializa_SPI@sync_mode,w,c
  3723  002C8A  0B80               	andlw	128
  3724  002C8C  12C6               	iorwf	4038,f,c	;volatile
  3725                           
  3726                           ;SPI.c: 55: SSPSTAT |= smp_phase;
  3727  002C8E  5021               	movf	inicializa_SPI@smp_phase,w,c
  3728  002C90  12C7               	iorwf	4039,f,c	;volatile
  3729                           
  3730                           ;SPI.c: 56: TRISBbits.RB4 = 0;
  3731  002C92  9893               	bcf	3987,4,c	;volatile
  3732                           
  3733                           ;SPI.c: 57: switch(bus_mode)
  3734  002C94  D005               	goto	l84
  3735  002C96                     l85:
  3736                           
  3737                           ;SPI.c: 60: SSPSTATbits.CKE = 1;
  3738  002C96  8CC7               	bsf	4039,6,c	;volatile
  3739                           
  3740                           ;SPI.c: 61: break;
  3741  002C98  D015               	goto	l90
  3742  002C9A                     l87:
  3743                           
  3744                           ;SPI.c: 63: SSPSTATbits.CKE = 1;
  3745  002C9A  8CC7               	bsf	4039,6,c	;volatile
  3746  002C9C                     l88:
  3747                           
  3748                           ;SPI.c: 67: SSPCON1bits.CKP = 1;
  3749  002C9C  88C6               	bsf	4038,4,c	;volatile
  3750                           
  3751                           ;SPI.c: 71: }
  3752                           
  3753                           ;SPI.c: 70: break;
  3754                           
  3755                           ;SPI.c: 69: default:
  3756                           
  3757                           ;SPI.c: 68: break;
  3758  002C9E  D012               	goto	l90
  3759  002CA0                     l84:
  3760  002CA0  5020               	movf	inicializa_SPI@bus_mode,w,c
  3761                           
  3762                           ; Switch size 1, requested type "space"
  3763                           ; Number of cases is 3, Range of values is 0 to 3
  3764                           ; switch strategies available:
  3765                           ; Name         Instructions Cycles
  3766                           ; simple_byte           10     6 (average)
  3767                           ;	Chosen strategy is simple_byte
  3768  002CA2  0A00               	xorlw	0	; case 0
  3769  002CA4  B4D8               	btfsc	status,2,c
  3770  002CA6  D7F7               	goto	l85
  3771  002CA8  0A02               	xorlw	2	; case 2
  3772  002CAA  B4D8               	btfsc	status,2,c
  3773  002CAC  D7F6               	goto	l87
  3774  002CAE  0A01               	xorlw	1	; case 3
  3775  002CB0  B4D8               	btfsc	status,2,c
  3776  002CB2  D7F4               	goto	l88
  3777                           
  3778                           ;SPI.c: 73: switch( sync_mode )
  3779  002CB4  D007               	goto	l90
  3780  002CB6                     l91:
  3781                           
  3782                           ;SPI.c: 76: TRISBbits.RB1 = 1;
  3783  002CB6  8293               	bsf	3987,1,c	;volatile
  3784                           
  3785                           ;SPI.c: 77: TRISBbits.RB4 = 1;
  3786  002CB8  8893               	bsf	3987,4,c	;volatile
  3787                           
  3788                           ;SPI.c: 78: break;
  3789  002CBA  D00C               	goto	l92
  3790  002CBC                     l93:
  3791                           
  3792                           ;SPI.c: 81: TRISBbits.RB1 = 1;
  3793  002CBC  8293               	bsf	3987,1,c	;volatile
  3794                           
  3795                           ;SPI.c: 82: break;
  3796  002CBE  D00A               	goto	l92
  3797  002CC0                     l94:
  3798                           
  3799                           ;SPI.c: 85: TRISBbits.RB1 = 0;
  3800  002CC0  9293               	bcf	3987,1,c	;volatile
  3801                           
  3802                           ;SPI.c: 87: }
  3803                           
  3804                           ;SPI.c: 86: break;
  3805  002CC2  D008               	goto	l92
  3806  002CC4                     l90:
  3807  002CC4  5022               	movf	inicializa_SPI@sync_mode,w,c
  3808                           
  3809                           ; Switch size 1, requested type "space"
  3810                           ; Number of cases is 2, Range of values is 4 to 5
  3811                           ; switch strategies available:
  3812                           ; Name         Instructions Cycles
  3813                           ; simple_byte            7     4 (average)
  3814                           ;	Chosen strategy is simple_byte
  3815  002CC6  0A04               	xorlw	4	; case 4
  3816  002CC8  B4D8               	btfsc	status,2,c
  3817  002CCA  D7F5               	goto	l91
  3818  002CCC  0A01               	xorlw	1	; case 5
  3819  002CCE  B4D8               	btfsc	status,2,c
  3820  002CD0  D7F5               	goto	l93
  3821  002CD2  D7F6               	goto	l94
  3822  002CD4                     l92:
  3823                           
  3824                           ;SPI.c: 89: TRISBbits.RB0 = 1;
  3825  002CD4  8093               	bsf	3987,0,c	;volatile
  3826                           
  3827                           ;SPI.c: 90: TRISCbits.RC7 = 0;
  3828  002CD6  9E94               	bcf	3988,7,c	;volatile
  3829                           
  3830                           ;SPI.c: 93: SSPCON1 |= 0x20;
  3831  002CD8  8AC6               	bsf	4038,5,c	;volatile
  3832                           
  3833                           ;SPI.c: 94: posicao_cursor_lcd(1,1);
  3834  002CDA  0E01               	movlw	1
  3835  002CDC  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3836  002CDE  0E01               	movlw	1
  3837  002CE0  EC64  F017         	call	_posicao_cursor_lcd
  3838                           
  3839                           ;SPI.c: 95: escreve_frase_ram_lcd("SPI configurada!");
  3840  002CE4  0EB7               	movlw	low STR_1
  3841  002CE6  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3842  002CE8  0E61               	movlw	high STR_1
  3843  002CEA  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3844  002CEC  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
  3845                           
  3846                           ;SPI.c: 96: escreve_cmd_lcd(0b00000001);
  3847  002CF0  0E01               	movlw	1
  3848  002CF2  ECB7  F015         	call	_escreve_cmd_lcd
  3849  002CF6  0012               	return		;funcret
  3850  002CF8                     __end_of_inicializa_SPI:
  3851                           	opt stack 0
  3852                           tblptru	equ	0xFF8
  3853                           tblptrh	equ	0xFF7
  3854                           tblptrl	equ	0xFF6
  3855                           tablat	equ	0xFF5
  3856                           prodh	equ	0xFF4
  3857                           prodl	equ	0xFF3
  3858                           intcon	equ	0xFF2
  3859                           intcon2	equ	0xFF1
  3860                           intcon3	equ	0xFF0
  3861                           postinc0	equ	0xFEE
  3862                           wreg	equ	0xFE8
  3863                           postdec1	equ	0xFE5
  3864                           fsr1h	equ	0xFE2
  3865                           fsr1l	equ	0xFE1
  3866                           postinc2	equ	0xFDE
  3867                           postdec2	equ	0xFDD
  3868                           fsr2h	equ	0xFDA
  3869                           fsr2l	equ	0xFD9
  3870                           status	equ	0xFD8
  3871                           
  3872 ;; *************** function _escalonador *****************
  3873 ;; Defined at:
  3874 ;;		line 197 in file "main.c"
  3875 ;; Parameters:    Size  Location     Type
  3876 ;;		None
  3877 ;; Auto vars:     Size  Location     Type
  3878 ;;  cont            1  116[BANK0 ] unsigned char 
  3879 ;; Return value:  Size  Location     Type
  3880 ;;                  1    wreg      void 
  3881 ;; Registers used:
  3882 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3883 ;; Tracked objects:
  3884 ;;		On entry : 0/0
  3885 ;;		On exit  : 0/0
  3886 ;;		Unchanged: 0/0
  3887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3888 ;;      Params:         0       0       0       0       0       0       0       0       0
  3889 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3890 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3891 ;;      Totals:         0       3       0       0       0       0       0       0       0
  3892 ;;Total ram usage:        3 bytes
  3893 ;; Hardware stack levels used:    1
  3894 ;; Hardware stack levels required when called:   12
  3895 ;; This function calls:
  3896 ;;		_SDCard
  3897 ;;		_acende_led4
  3898 ;; This function is called by:
  3899 ;;		_main
  3900 ;; This function uses a non-reentrant model
  3901 ;;
  3902                           
  3903                           	psect	text19
  3904  002A2C                     __ptext19:
  3905                           	opt stack 0
  3906  002A2C                     _escalonador:
  3907                           	opt stack 18
  3908                           
  3909                           ;main.c: 199: unsigned char cont;
  3910                           ;main.c: 200: for(cont = 0; cont<2;cont++)
  3911                           
  3912                           ;incstack = 0
  3913  002A2C  0E00               	movlw	0
  3914  002A2E  0100               	movlb	0	; () banked
  3915  002A30  6FD4               	movwf	escalonador@cont& (0+255),b
  3916  002A32                     l7498:
  3917                           
  3918                           ; BSR set to: 0
  3919  002A32  0E01               	movlw	1
  3920  002A34  65D4               	cpfsgt	escalonador@cont& (0+255),b
  3921  002A36  D001               	goto	l498
  3922  002A38  0012               	return	
  3923  002A3A                     l498:
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;main.c: 201: {
  3927                           ;main.c: 202: if((p_tarefas[cont]!= 0 ) && tempo_tarefa[cont] == 0)
  3928                           
  3929                           ; BSR set to: 0
  3930  002A3A  51D4               	movf	escalonador@cont& (0+255),w,b
  3931  002A3C  0D02               	mullw	2
  3932  002A3E  0ED9               	movlw	low _p_tarefas
  3933  002A40  24F3               	addwf	prodl,w,c
  3934  002A42  6ED9               	movwf	fsr2l,c
  3935  002A44  0E00               	movlw	high _p_tarefas
  3936  002A46  20F4               	addwfc	prodh,w,c
  3937  002A48  6EDA               	movwf	fsr2h,c
  3938  002A4A  50DE               	movf	postinc2,w,c
  3939  002A4C  10DE               	iorwf	postinc2,w,c
  3940  002A4E  B4D8               	btfsc	status,2,c
  3941  002A50  D03D               	goto	l500
  3942                           
  3943                           ; BSR set to: 0
  3944  002A52  51D4               	movf	escalonador@cont& (0+255),w,b
  3945  002A54  0D02               	mullw	2
  3946  002A56  0E2D               	movlw	low _tempo_tarefa
  3947  002A58  24F3               	addwf	prodl,w,c
  3948  002A5A  6ED9               	movwf	fsr2l,c
  3949  002A5C  0E00               	movlw	high _tempo_tarefa
  3950  002A5E  20F4               	addwfc	prodh,w,c
  3951  002A60  6EDA               	movwf	fsr2h,c
  3952  002A62  50DE               	movf	postinc2,w,c
  3953  002A64  10DE               	iorwf	postinc2,w,c
  3954  002A66  A4D8               	btfss	status,2,c
  3955  002A68  D031               	goto	l500
  3956                           
  3957                           ; BSR set to: 0
  3958                           ;main.c: 203: {
  3959                           ;main.c: 204: tarefa_em_execucao = 1;
  3960  002A6A  0E01               	movlw	1
  3961  002A6C  6E3E               	movwf	_tarefa_em_execucao,c	;volatile
  3962                           
  3963                           ;main.c: 205: timeout_tarefa = 65000;
  3964  002A6E  0EFD               	movlw	253
  3965  002A70  6E3A               	movwf	_timeout_tarefa+1,c
  3966  002A72  0EE8               	movlw	232
  3967  002A74  6E39               	movwf	_timeout_tarefa,c
  3968                           
  3969                           ; BSR set to: 0
  3970                           ;main.c: 206: p_tarefas[cont]();
  3971  002A76  51D4               	movf	escalonador@cont& (0+255),w,b
  3972  002A78  0D02               	mullw	2
  3973  002A7A  0ED9               	movlw	low _p_tarefas
  3974  002A7C  24F3               	addwf	prodl,w,c
  3975  002A7E  6ED9               	movwf	fsr2l,c
  3976  002A80  0E00               	movlw	high _p_tarefas
  3977  002A82  20F4               	addwfc	prodh,w,c
  3978  002A84  6EDA               	movwf	fsr2h,c
  3979  002A86  D801               	call	u8618
  3980  002A88  D00A               	goto	u8619
  3981  002A8A                     u8618:
  3982  002A8A  0005               	push	
  3983  002A8C  6EFA               	movwf	pclath,c
  3984  002A8E  50DE               	movf	postinc2,w,c
  3985  002A90  6EFD               	movwf	tosl,c
  3986  002A92  50DE               	movf	postinc2,w,c
  3987  002A94  6EFE               	movwf	tosh,c
  3988  002A96  50F8               	movf	tblptru,w,c
  3989  002A98  6EFF               	movwf	tosu,c
  3990  002A9A  50FA               	movf	pclath,w,c
  3991  002A9C  0012               	return		;indir
  3992  002A9E                     u8619:
  3993                           
  3994                           ;main.c: 207: tarefa_em_execucao = 0;
  3995  002A9E  0E00               	movlw	0
  3996  002AA0  6E3E               	movwf	_tarefa_em_execucao,c	;volatile
  3997                           
  3998                           ;main.c: 208: tempo_tarefa[cont] = tempo_backup[cont];
  3999  002AA2  0100               	movlb	0	; () banked
  4000  002AA4  51D4               	movf	escalonador@cont& (0+255),w,b
  4001  002AA6  0D02               	mullw	2
  4002  002AA8  0ED5               	movlw	low _tempo_backup
  4003  002AAA  24F3               	addwf	prodl,w,c
  4004  002AAC  6ED9               	movwf	fsr2l,c
  4005  002AAE  0E00               	movlw	high _tempo_backup
  4006  002AB0  20F4               	addwfc	prodh,w,c
  4007  002AB2  6EDA               	movwf	fsr2h,c
  4008  002AB4  51D4               	movf	escalonador@cont& (0+255),w,b
  4009  002AB6  0D02               	mullw	2
  4010  002AB8  0E2D               	movlw	low _tempo_tarefa
  4011  002ABA  24F3               	addwf	prodl,w,c
  4012  002ABC  6EE1               	movwf	fsr1l,c
  4013  002ABE  0E00               	movlw	high _tempo_tarefa
  4014  002AC0  20F4               	addwfc	prodh,w,c
  4015  002AC2  6EE2               	movwf	fsr1h,c
  4016  002AC4  CFDE FFE6          	movff	postinc2,postinc1
  4017  002AC8  CFDD FFE5          	movff	postdec2,postdec1
  4018  002ACC                     l500:
  4019                           
  4020                           ; BSR set to: 0
  4021                           
  4022                           ; BSR set to: 0
  4023  002ACC  2BD4               	incf	escalonador@cont& (0+255),f,b
  4024  002ACE  D7B1               	goto	l7498
  4025  002AD0                     __end_of_escalonador:
  4026                           	opt stack 0
  4027                           tosu	equ	0xFFF
  4028                           tosh	equ	0xFFE
  4029                           tosl	equ	0xFFD
  4030                           pclath	equ	0xFFA
  4031                           tblptru	equ	0xFF8
  4032                           tblptrh	equ	0xFF7
  4033                           tblptrl	equ	0xFF6
  4034                           tablat	equ	0xFF5
  4035                           prodh	equ	0xFF4
  4036                           prodl	equ	0xFF3
  4037                           intcon	equ	0xFF2
  4038                           intcon2	equ	0xFF1
  4039                           intcon3	equ	0xFF0
  4040                           postinc0	equ	0xFEE
  4041                           wreg	equ	0xFE8
  4042                           postinc1	equ	0xFE6
  4043                           postdec1	equ	0xFE5
  4044                           fsr1h	equ	0xFE2
  4045                           fsr1l	equ	0xFE1
  4046                           postinc2	equ	0xFDE
  4047                           postdec2	equ	0xFDD
  4048                           fsr2h	equ	0xFDA
  4049                           fsr2l	equ	0xFD9
  4050                           status	equ	0xFD8
  4051                           
  4052 ;; *************** function _SDCard *****************
  4053 ;; Defined at:
  4054 ;;		line 271 in file "main.c"
  4055 ;; Parameters:    Size  Location     Type
  4056 ;;		None
  4057 ;; Auto vars:     Size  Location     Type
  4058 ;;  fs             42    3[BANK2 ] struct .
  4059 ;;  br              2    1[BANK2 ] unsigned short 
  4060 ;;  FResult         1    0[BANK2 ] enum E3838
  4061 ;; Return value:  Size  Location     Type
  4062 ;;                  1    wreg      void 
  4063 ;; Registers used:
  4064 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4065 ;; Tracked objects:
  4066 ;;		On entry : 0/0
  4067 ;;		On exit  : 0/0
  4068 ;;		Unchanged: 0/0
  4069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4070 ;;      Params:         0       0       0       0       0       0       0       0       0
  4071 ;;      Locals:         0       0       0      45       0       0       0       0       0
  4072 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4073 ;;      Totals:         0       0       0      45       0       0       0       0       0
  4074 ;;Total ram usage:       45 bytes
  4075 ;; Hardware stack levels used:    1
  4076 ;; Hardware stack levels required when called:   11
  4077 ;; This function calls:
  4078 ;;		_escreve_cmd_lcd
  4079 ;;		_escreve_frase_ram_lcd
  4080 ;;		_pf_mount
  4081 ;;		_pf_open
  4082 ;;		_pf_read
  4083 ;;		_pf_write
  4084 ;;		_posicao_cursor_lcd
  4085 ;;		_proceed
  4086 ;;		_readover
  4087 ;; This function is called by:
  4088 ;;		_inicializa_tarefas
  4089 ;;		_escalonador
  4090 ;; This function uses a non-reentrant model
  4091 ;;
  4092                           
  4093                           	psect	text20
  4094  001A38                     __ptext20:
  4095                           	opt stack 0
  4096  001A38                     _SDCard:
  4097                           	opt stack 18
  4098                           
  4099                           ;main.c: 273: T0CONbits.TMR0ON = 0;
  4100                           
  4101                           ; BSR set to: 0
  4102                           ;incstack = 0
  4103  001A38  9ED5               	bcf	4053,7,c	;volatile
  4104                           
  4105                           ;main.c: 274: FRESULT FResult;
  4106                           ;main.c: 275: FATFS fs;
  4107                           ;main.c: 276: WORD br;
  4108                           ;main.c: 278: posicao_cursor_lcd(1,0);
  4109  001A3A  0E00               	movlw	0
  4110  001A3C  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  4111  001A3E  0E01               	movlw	1
  4112  001A40  EC64  F017         	call	_posicao_cursor_lcd
  4113                           
  4114                           ;main.c: 279: escreve_frase_ram_lcd("Attempting to");
  4115  001A44  0E11               	movlw	low STR_3
  4116  001A46  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  4117  001A48  0E62               	movlw	high STR_3
  4118  001A4A  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  4119  001A4C  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
  4120                           
  4121                           ;main.c: 280: posicao_cursor_lcd(2,0);
  4122  001A50  0E00               	movlw	0
  4123  001A52  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  4124  001A54  0E02               	movlw	2
  4125  001A56  EC64  F017         	call	_posicao_cursor_lcd
  4126                           
  4127                           ;main.c: 281: escreve_frase_ram_lcd("mount file sys");
  4128  001A5A  0ED8               	movlw	low STR_4
  4129  001A5C  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  4130  001A5E  0E61               	movlw	high STR_4
  4131  001A60  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  4132  001A62  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
  4133                           
  4134                           ;main.c: 282: escreve_cmd_lcd(0b00000001);
  4135  001A66  0E01               	movlw	1
  4136  001A68  ECB7  F015         	call	_escreve_cmd_lcd
  4137                           
  4138                           ;main.c: 285: proceed();
  4139  001A6C  EC59  F01A         	call	_proceed	;wreg free
  4140                           
  4141                           ;main.c: 286: if((FResult = pf_mount(&fs)) == FR_OK )
  4142  001A70  0E03               	movlw	low SDCard@fs
  4143  001A72  0100               	movlb	0	; () banked
  4144  001A74  6F7C               	movwf	pf_mount@fs& (0+255),b
  4145  001A76  0E02               	movlw	high SDCard@fs
  4146  001A78  6F7D               	movwf	(pf_mount@fs+1)& (0+255),b
  4147  001A7A  EC09  F000         	call	_pf_mount	;wreg free
  4148  001A7E  0102               	movlb	2	; () banked
  4149  001A80  6F00               	movwf	SDCard@FResult& (0+255),b
  4150  001A82  5100               	movf	SDCard@FResult& (0+255),w,b
  4151  001A84  A4D8               	btfss	status,2,c
  4152  001A86  D0AB               	goto	l520
  4153                           
  4154                           ; BSR set to: 2
  4155                           ;main.c: 287: {
  4156                           ;main.c: 288: posicao_cursor_lcd(1,0);
  4157  001A88  0E00               	movlw	0
  4158  001A8A  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  4159  001A8C  0E01               	movlw	1
  4160  001A8E  EC64  F017         	call	_posicao_cursor_lcd
  4161                           
  4162                           ;main.c: 289: escreve_frase_ram_lcd("syst inicialized");
  4163  001A92  0EA6               	movlw	low STR_5
  4164  001A94  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  4165  001A96  0E61               	movlw	high STR_5
  4166  001A98  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  4167  001A9A  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
  4168                           
  4169                           ;main.c: 292: FResult = pf_open("check.txt" );
  4170  001A9E  0E55               	movlw	low STR_6
  4171  001AA0  0100               	movlb	0	; () banked
  4172  001AA2  6FBA               	movwf	pf_open@path& (0+255),b
  4173  001AA4  0E62               	movlw	high STR_6
  4174  001AA6  6FBB               	movwf	(pf_open@path+1)& (0+255),b
  4175  001AA8  ECA3  F00E         	call	_pf_open	;wreg free
  4176  001AAC  0102               	movlb	2	; () banked
  4177  001AAE  6F00               	movwf	SDCard@FResult& (0+255),b
  4178                           
  4179                           ; BSR set to: 2
  4180                           ;main.c: 294: if( FResult == FR_OK )
  4181  001AB0  5100               	movf	SDCard@FResult& (0+255),w,b
  4182  001AB2  A4D8               	btfss	status,2,c
  4183  001AB4  D07A               	goto	l521
  4184                           
  4185                           ; BSR set to: 2
  4186                           ;main.c: 295: {
  4187                           ;main.c: 297: if( (FResult = pf_write("SD_Card", 5, &br)) == FR_OK )
  4188  001AB6  0E70               	movlw	low STR_7
  4189  001AB8  0100               	movlb	0	; () banked
  4190  001ABA  6F9A               	movwf	pf_write@buff& (0+255),b
  4191  001ABC  0E62               	movlw	high STR_7
  4192  001ABE  6F9B               	movwf	(pf_write@buff+1)& (0+255),b
  4193  001AC0  0E00               	movlw	0
  4194  001AC2  6F9D               	movwf	(pf_write@btw+1)& (0+255),b
  4195  001AC4  0E05               	movlw	5
  4196  001AC6  6F9C               	movwf	pf_write@btw& (0+255),b
  4197  001AC8  0E01               	movlw	low SDCard@br
  4198  001ACA  6F9E               	movwf	pf_write@bw& (0+255),b
  4199  001ACC  0E02               	movlw	high SDCard@br
  4200  001ACE  6F9F               	movwf	(pf_write@bw+1)& (0+255),b
  4201  001AD0  EC23  F003         	call	_pf_write	;wreg free
  4202  001AD4  0102               	movlb	2	; () banked
  4203  001AD6  6F00               	movwf	SDCard@FResult& (0+255),b
  4204  001AD8  5100               	movf	SDCard@FResult& (0+255),w,b
  4205  001ADA  A4D8               	btfss	status,2,c
  4206  001ADC  D00C               	goto	l522
  4207                           
  4208                           ; BSR set to: 2
  4209                           ;main.c: 298: {
  4210                           ;main.c: 299: posicao_cursor_lcd(1,0);
  4211  001ADE  0E00               	movlw	0
  4212  001AE0  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  4213  001AE2  0E01               	movlw	1
  4214  001AE4  EC64  F017         	call	_posicao_cursor_lcd
  4215                           
  4216                           ;main.c: 300: escreve_frase_ram_lcd("syst inicialized");
  4217  001AE8  0EA6               	movlw	low STR_5
  4218  001AEA  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  4219  001AEC  0E61               	movlw	high STR_5
  4220  001AEE  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  4221  001AF0  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
  4222                           
  4223                           ;main.c: 301: }
  4224  001AF4  D00F               	goto	l526
  4225  001AF6                     l522:
  4226                           
  4227                           ;main.c: 302: else
  4228                           ;main.c: 303: {
  4229                           ;main.c: 304: escreve_cmd_lcd(0b00000001);
  4230  001AF6  0E01               	movlw	1
  4231  001AF8  ECB7  F015         	call	_escreve_cmd_lcd
  4232                           
  4233                           ;main.c: 305: posicao_cursor_lcd(1,0);
  4234  001AFC  0E00               	movlw	0
  4235  001AFE  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  4236  001B00  0E01               	movlw	1
  4237  001B02  EC64  F017         	call	_posicao_cursor_lcd
  4238                           
  4239                           ;main.c: 306: escreve_frase_ram_lcd("SDCard error");
  4240  001B06  0E48               	movlw	low STR_9
  4241  001B08  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  4242  001B0A  0E62               	movlw	high STR_9
  4243  001B0C  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  4244  001B0E  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
  4245  001B12                     l524:
  4246  001B12  D7FF               	goto	l524
  4247  001B14                     l526:
  4248                           
  4249                           ;main.c: 308: }
  4250                           ;main.c: 309: escreve_cmd_lcd(0b00000001);
  4251  001B14  0E01               	movlw	1
  4252  001B16  ECB7  F015         	call	_escreve_cmd_lcd
  4253                           
  4254                           ;main.c: 312: posicao_cursor_lcd(1,0);
  4255  001B1A  0E00               	movlw	0
  4256  001B1C  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  4257  001B1E  0E01               	movlw	1
  4258  001B20  EC64  F017         	call	_posicao_cursor_lcd
  4259                           
  4260                           ;main.c: 313: escreve_frase_ram_lcd("lendo arquivo");
  4261  001B24  0E2D               	movlw	low STR_10
  4262  001B26  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  4263  001B28  0E62               	movlw	high STR_10
  4264  001B2A  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  4265  001B2C  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
  4266                           
  4267                           ;main.c: 317: {
  4268                           ;main.c: 318: readover(1);
  4269                           
  4270                           ;main.c: 316: do
  4271  001B30  0E00               	movlw	0
  4272  001B32  6E1B               	movwf	readover@a+1,c
  4273  001B34  0E01               	movlw	1
  4274  001B36  6E1A               	movwf	readover@a,c
  4275  001B38  EC65  F01A         	call	_readover	;wreg free
  4276                           
  4277                           ;main.c: 321: if( (FResult = pf_read(data_buffer_32, 31, &br)) == FR_OK )
  4278  001B3C  0E71               	movlw	low _data_buffer_32
  4279  001B3E  0100               	movlb	0	; () banked
  4280  001B40  6F9A               	movwf	pf_read@buff& (0+255),b
  4281  001B42  0E01               	movlw	high _data_buffer_32
  4282  001B44  6F9B               	movwf	(pf_read@buff+1)& (0+255),b
  4283  001B46  0E00               	movlw	0
  4284  001B48  6F9D               	movwf	(pf_read@btr+1)& (0+255),b
  4285  001B4A  0E1F               	movlw	31
  4286  001B4C  6F9C               	movwf	pf_read@btr& (0+255),b
  4287  001B4E  0E01               	movlw	low SDCard@br
  4288  001B50  6F9E               	movwf	pf_read@br& (0+255),b
  4289  001B52  0E02               	movlw	high SDCard@br
  4290  001B54  6F9F               	movwf	(pf_read@br+1)& (0+255),b
  4291  001B56  EC74  F007         	call	_pf_read	;wreg free
  4292  001B5A  0102               	movlb	2	; () banked
  4293  001B5C  6F00               	movwf	SDCard@FResult& (0+255),b
  4294  001B5E  5100               	movf	SDCard@FResult& (0+255),w,b
  4295  001B60  A4D8               	btfss	status,2,c
  4296  001B62  D009               	goto	l528
  4297                           
  4298                           ; BSR set to: 2
  4299                           ;main.c: 322: {
  4300                           ;main.c: 324: data_buffer_32[br] = 0;
  4301  001B64  0E71               	movlw	low _data_buffer_32
  4302  001B66  2501               	addwf	SDCard@br& (0+255),w,b
  4303  001B68  6ED9               	movwf	fsr2l,c
  4304  001B6A  0E01               	movlw	high _data_buffer_32
  4305  001B6C  2102               	addwfc	(SDCard@br+1)& (0+255),w,b
  4306  001B6E  6EDA               	movwf	fsr2h,c
  4307  001B70  0E00               	movlw	0
  4308  001B72  6EDF               	movwf	indf2,c
  4309                           
  4310                           ;main.c: 325: break;
  4311  001B74  D035               	goto	l541
  4312  001B76                     l528:
  4313                           
  4314                           ; BSR set to: 2
  4315                           ;main.c: 328: else
  4316                           ;main.c: 329: {
  4317                           ;main.c: 331: escreve_cmd_lcd(0b00000001);
  4318                           
  4319                           ; BSR set to: 2
  4320  001B76  0E01               	movlw	1
  4321  001B78  ECB7  F015         	call	_escreve_cmd_lcd
  4322                           
  4323                           ;main.c: 332: posicao_cursor_lcd(1,0);
  4324  001B7C  0E00               	movlw	0
  4325  001B7E  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  4326  001B80  0E01               	movlw	1
  4327  001B82  EC64  F017         	call	_posicao_cursor_lcd
  4328                           
  4329                           ;main.c: 333: escreve_frase_ram_lcd("Erro tentando");
  4330  001B86  0E03               	movlw	low STR_11
  4331  001B88  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  4332  001B8A  0E62               	movlw	high STR_11
  4333  001B8C  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  4334  001B8E  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
  4335                           
  4336                           ;main.c: 334: posicao_cursor_lcd(2,0);
  4337  001B92  0E00               	movlw	0
  4338  001B94  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  4339  001B96  0E02               	movlw	2
  4340  001B98  EC64  F017         	call	_posicao_cursor_lcd
  4341                           
  4342                           ;main.c: 335: escreve_frase_ram_lcd("ler o arquivo");
  4343  001B9C  0E1F               	movlw	low STR_12
  4344  001B9E  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  4345  001BA0  0E62               	movlw	high STR_12
  4346  001BA2  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  4347  001BA4  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
  4348  001BA8                     l531:
  4349  001BA8  D7FF               	goto	l531
  4350  001BAA                     l521:
  4351                           
  4352                           ; BSR set to: 2
  4353                           ;main.c: 341: else
  4354                           ;main.c: 342: {
  4355                           ;main.c: 343: escreve_cmd_lcd(0b00000001);
  4356                           
  4357                           ; BSR set to: 2
  4358  001BAA  0E01               	movlw	1
  4359  001BAC  ECB7  F015         	call	_escreve_cmd_lcd
  4360                           
  4361                           ;main.c: 344: posicao_cursor_lcd(1,0);
  4362  001BB0  0E00               	movlw	0
  4363  001BB2  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  4364  001BB4  0E01               	movlw	1
  4365  001BB6  EC64  F017         	call	_posicao_cursor_lcd
  4366                           
  4367                           ;main.c: 345: escreve_frase_ram_lcd("Erro tentando");
  4368  001BBA  0E03               	movlw	low STR_11
  4369  001BBC  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  4370  001BBE  0E62               	movlw	high STR_11
  4371  001BC0  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  4372  001BC2  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
  4373                           
  4374                           ;main.c: 346: posicao_cursor_lcd(2,0);
  4375  001BC6  0E00               	movlw	0
  4376  001BC8  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  4377  001BCA  0E02               	movlw	2
  4378  001BCC  EC64  F017         	call	_posicao_cursor_lcd
  4379                           
  4380                           ;main.c: 347: escreve_frase_ram_lcd("abrir o arquivo");
  4381  001BD0  0EC8               	movlw	low STR_14
  4382  001BD2  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  4383  001BD4  0E61               	movlw	high STR_14
  4384  001BD6  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  4385  001BD8  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
  4386  001BDC                     l535:
  4387  001BDC  D7FF               	goto	l535
  4388  001BDE                     l520:
  4389                           
  4390                           ;main.c: 351: else
  4391                           ;main.c: 352: {
  4392                           ;main.c: 354: while( 1 );
  4393  001BDE  D7FF               	goto	l520
  4394  001BE0                     l541:
  4395                           
  4396                           ;main.c: 355: }
  4397                           ;main.c: 373: if( FResult != FR_OK )
  4398  001BE0  0102               	movlb	2	; () banked
  4399  001BE2  5100               	movf	SDCard@FResult& (0+255),w,b
  4400  001BE4  A4D8               	btfss	status,2,c
  4401  001BE6                     u8570:
  4402                           
  4403                           ;main.c: 374: {
  4404                           ;main.c: 379: while( 1 );
  4405  001BE6  D7FF               	goto	u8570
  4406  001BE8                     
  4407                           ;main.c: 380: }
  4408                           ;main.c: 383: while(1);
  4409  001BE8  D7FF               	goto	l545
  4410  001BEA                     __end_of_SDCard:
  4411                           	opt stack 0
  4412                           tosu	equ	0xFFF
  4413                           tosh	equ	0xFFE
  4414                           tosl	equ	0xFFD
  4415                           pclath	equ	0xFFA
  4416                           tblptru	equ	0xFF8
  4417                           tblptrh	equ	0xFF7
  4418                           tblptrl	equ	0xFF6
  4419                           tablat	equ	0xFF5
  4420                           prodh	equ	0xFF4
  4421                           prodl	equ	0xFF3
  4422                           intcon	equ	0xFF2
  4423                           intcon2	equ	0xFF1
  4424                           intcon3	equ	0xFF0
  4425                           postinc0	equ	0xFEE
  4426                           wreg	equ	0xFE8
  4427                           postinc1	equ	0xFE6
  4428                           postdec1	equ	0xFE5
  4429                           fsr1h	equ	0xFE2
  4430                           fsr1l	equ	0xFE1
  4431                           indf2	equ	0xFDF
  4432                           postinc2	equ	0xFDE
  4433                           postdec2	equ	0xFDD
  4434                           fsr2h	equ	0xFDA
  4435                           fsr2l	equ	0xFD9
  4436                           status	equ	0xFD8
  4437                           
  4438 ;; *************** function _acende_led4 *****************
  4439 ;; Defined at:
  4440 ;;		line 388 in file "main.c"
  4441 ;; Parameters:    Size  Location     Type
  4442 ;;		None
  4443 ;; Auto vars:     Size  Location     Type
  4444 ;;		None
  4445 ;; Return value:  Size  Location     Type
  4446 ;;                  1    wreg      void 
  4447 ;; Registers used:
  4448 ;;		wreg, status,2, status,0, cstack
  4449 ;; Tracked objects:
  4450 ;;		On entry : 0/0
  4451 ;;		On exit  : 0/0
  4452 ;;		Unchanged: 0/0
  4453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4454 ;;      Params:         0       0       0       0       0       0       0       0       0
  4455 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4456 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4457 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4458 ;;Total ram usage:        0 bytes
  4459 ;; Hardware stack levels used:    1
  4460 ;; Hardware stack levels required when called:    3
  4461 ;; This function calls:
  4462 ;;		_shrc_apaga_bit
  4463 ;;		_shrc_seta_bit
  4464 ;; This function is called by:
  4465 ;;		_inicializa_tarefas
  4466 ;;		_escalonador
  4467 ;; This function uses a non-reentrant model
  4468 ;;
  4469                           
  4470                           	psect	text21
  4471  003338                     __ptext21:
  4472                           	opt stack 0
  4473  003338                     _acende_led4:
  4474                           	opt stack 26
  4475                           
  4476                           ;main.c: 389: static unsigned char flag = 0;
  4477                           ;main.c: 390: flag = !flag;
  4478                           
  4479                           ;incstack = 0
  4480  003338  503D               	movf	acende_led4@flag,w,c
  4481  00333A  A4D8               	btfss	status,2,c
  4482  00333C  D002               	goto	u5480
  4483  00333E  0E01               	movlw	1
  4484  003340  D001               	goto	u5490
  4485  003342                     u5480:
  4486  003342  0E00               	movlw	0
  4487  003344                     u5490:
  4488  003344  6E3D               	movwf	acende_led4@flag,c
  4489                           
  4490                           ;main.c: 391: if(!flag)
  4491  003346  503D               	movf	acende_led4@flag,w,c
  4492  003348  A4D8               	btfss	status,2,c
  4493  00334A  D004               	goto	l554
  4494                           
  4495                           ;main.c: 392: {
  4496                           ;main.c: 393: shrc_seta_bit(0);
  4497  00334C  0E00               	movlw	0
  4498  00334E  ECE0  F019         	call	_shrc_seta_bit
  4499                           
  4500                           ;main.c: 394: }
  4501  003352  0012               	return	
  4502  003354                     l554:
  4503                           
  4504                           ;main.c: 395: else
  4505                           ;main.c: 396: {
  4506                           ;main.c: 397: shrc_apaga_bit(0);
  4507  003354  0E00               	movlw	0
  4508  003356  ECD1  F019         	call	_shrc_apaga_bit
  4509  00335A  0012               	return	
  4510  00335C                     __end_of_acende_led4:
  4511                           	opt stack 0
  4512                           tosu	equ	0xFFF
  4513                           tosh	equ	0xFFE
  4514                           tosl	equ	0xFFD
  4515                           pclath	equ	0xFFA
  4516                           tblptru	equ	0xFF8
  4517                           tblptrh	equ	0xFF7
  4518                           tblptrl	equ	0xFF6
  4519                           tablat	equ	0xFF5
  4520                           prodh	equ	0xFF4
  4521                           prodl	equ	0xFF3
  4522                           intcon	equ	0xFF2
  4523                           intcon2	equ	0xFF1
  4524                           intcon3	equ	0xFF0
  4525                           postinc0	equ	0xFEE
  4526                           wreg	equ	0xFE8
  4527                           postinc1	equ	0xFE6
  4528                           postdec1	equ	0xFE5
  4529                           fsr1h	equ	0xFE2
  4530                           fsr1l	equ	0xFE1
  4531                           indf2	equ	0xFDF
  4532                           postinc2	equ	0xFDE
  4533                           postdec2	equ	0xFDD
  4534                           fsr2h	equ	0xFDA
  4535                           fsr2l	equ	0xFD9
  4536                           status	equ	0xFD8
  4537                           
  4538 ;; *************** function _shrc_seta_bit *****************
  4539 ;; Defined at:
  4540 ;;		line 119 in file "bibliotecas/SHRC.c"
  4541 ;; Parameters:    Size  Location     Type
  4542 ;;  posicao_bit     1    wreg     unsigned char 
  4543 ;; Auto vars:     Size  Location     Type
  4544 ;;  posicao_bit     1   27[COMRAM] unsigned char 
  4545 ;; Return value:  Size  Location     Type
  4546 ;;                  1    wreg      void 
  4547 ;; Registers used:
  4548 ;;		wreg, status,2, status,0
  4549 ;; Tracked objects:
  4550 ;;		On entry : 0/0
  4551 ;;		On exit  : 0/0
  4552 ;;		Unchanged: 0/0
  4553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4554 ;;      Params:         0       0       0       0       0       0       0       0       0
  4555 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4556 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4557 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4558 ;;Total ram usage:        3 bytes
  4559 ;; Hardware stack levels used:    1
  4560 ;; Hardware stack levels required when called:    2
  4561 ;; This function calls:
  4562 ;;		Nothing
  4563 ;; This function is called by:
  4564 ;;		_acende_led4
  4565 ;;		_timer_dois
  4566 ;; This function uses a non-reentrant model
  4567 ;;
  4568                           
  4569                           	psect	text22
  4570  0033C0                     __ptext22:
  4571                           	opt stack 0
  4572  0033C0                     _shrc_seta_bit:
  4573                           	opt stack 26
  4574                           
  4575                           ;incstack = 0
  4576                           ;shrc_seta_bit@posicao_bit stored from wreg
  4577  0033C0  6E1C               	movwf	shrc_seta_bit@posicao_bit,c
  4578                           
  4579                           ;SHRC.c: 121: dado |= (1<<posicao_bit);
  4580  0033C2  C01C  F01A         	movff	shrc_seta_bit@posicao_bit,??_shrc_seta_bit
  4581  0033C6  0E01               	movlw	1
  4582  0033C8  6E1B               	movwf	(??_shrc_seta_bit+1)& (0+255),c
  4583  0033CA  2A1A               	incf	??_shrc_seta_bit,f,c
  4584  0033CC  D002               	goto	u4724
  4585  0033CE                     u4725:
  4586  0033CE  90D8               	bcf	status,0,c
  4587  0033D0  361B               	rlcf	??_shrc_seta_bit+1,f,c
  4588  0033D2                     u4724:
  4589  0033D2  2E1A               	decfsz	??_shrc_seta_bit,f,c
  4590  0033D4  D7FC               	goto	u4725
  4591  0033D6  501B               	movf	??_shrc_seta_bit+1,w,c
  4592  0033D8  1245               	iorwf	_dado,f,c
  4593  0033DA  0012               	return		;funcret
  4594  0033DC                     __end_of_shrc_seta_bit:
  4595                           	opt stack 0
  4596                           tosu	equ	0xFFF
  4597                           tosh	equ	0xFFE
  4598                           tosl	equ	0xFFD
  4599                           pclath	equ	0xFFA
  4600                           tblptru	equ	0xFF8
  4601                           tblptrh	equ	0xFF7
  4602                           tblptrl	equ	0xFF6
  4603                           tablat	equ	0xFF5
  4604                           prodh	equ	0xFF4
  4605                           prodl	equ	0xFF3
  4606                           intcon	equ	0xFF2
  4607                           intcon2	equ	0xFF1
  4608                           intcon3	equ	0xFF0
  4609                           postinc0	equ	0xFEE
  4610                           wreg	equ	0xFE8
  4611                           postinc1	equ	0xFE6
  4612                           postdec1	equ	0xFE5
  4613                           fsr1h	equ	0xFE2
  4614                           fsr1l	equ	0xFE1
  4615                           indf2	equ	0xFDF
  4616                           postinc2	equ	0xFDE
  4617                           postdec2	equ	0xFDD
  4618                           fsr2h	equ	0xFDA
  4619                           fsr2l	equ	0xFD9
  4620                           status	equ	0xFD8
  4621                           
  4622 ;; *************** function _shrc_apaga_bit *****************
  4623 ;; Defined at:
  4624 ;;		line 124 in file "bibliotecas/SHRC.c"
  4625 ;; Parameters:    Size  Location     Type
  4626 ;;  posicao_bit     1    wreg     unsigned char 
  4627 ;; Auto vars:     Size  Location     Type
  4628 ;;  posicao_bit     1   27[COMRAM] unsigned char 
  4629 ;; Return value:  Size  Location     Type
  4630 ;;                  1    wreg      void 
  4631 ;; Registers used:
  4632 ;;		wreg, status,2, status,0
  4633 ;; Tracked objects:
  4634 ;;		On entry : 0/0
  4635 ;;		On exit  : 0/0
  4636 ;;		Unchanged: 0/0
  4637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4638 ;;      Params:         0       0       0       0       0       0       0       0       0
  4639 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4640 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4641 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4642 ;;Total ram usage:        3 bytes
  4643 ;; Hardware stack levels used:    1
  4644 ;; Hardware stack levels required when called:    2
  4645 ;; This function calls:
  4646 ;;		Nothing
  4647 ;; This function is called by:
  4648 ;;		_acende_led4
  4649 ;;		_timer_dois
  4650 ;; This function uses a non-reentrant model
  4651 ;;
  4652                           
  4653                           	psect	text23
  4654  0033A2                     __ptext23:
  4655                           	opt stack 0
  4656  0033A2                     _shrc_apaga_bit:
  4657                           	opt stack 26
  4658                           
  4659                           ;incstack = 0
  4660                           ;shrc_apaga_bit@posicao_bit stored from wreg
  4661  0033A2  6E1C               	movwf	shrc_apaga_bit@posicao_bit,c
  4662                           
  4663                           ;SHRC.c: 126: dado &= ~(1<<posicao_bit);
  4664  0033A4  C01C  F01A         	movff	shrc_apaga_bit@posicao_bit,??_shrc_apaga_bit
  4665  0033A8  0E01               	movlw	1
  4666  0033AA  6E1B               	movwf	(??_shrc_apaga_bit+1)& (0+255),c
  4667  0033AC  2A1A               	incf	??_shrc_apaga_bit,f,c
  4668  0033AE  D002               	goto	u4734
  4669  0033B0                     u4735:
  4670  0033B0  90D8               	bcf	status,0,c
  4671  0033B2  361B               	rlcf	??_shrc_apaga_bit+1,f,c
  4672  0033B4                     u4734:
  4673  0033B4  2E1A               	decfsz	??_shrc_apaga_bit,f,c
  4674  0033B6  D7FC               	goto	u4735
  4675  0033B8  501B               	movf	??_shrc_apaga_bit+1,w,c
  4676  0033BA  0AFF               	xorlw	255
  4677  0033BC  1645               	andwf	_dado,f,c
  4678  0033BE  0012               	return		;funcret
  4679  0033C0                     __end_of_shrc_apaga_bit:
  4680                           	opt stack 0
  4681                           tosu	equ	0xFFF
  4682                           tosh	equ	0xFFE
  4683                           tosl	equ	0xFFD
  4684                           pclath	equ	0xFFA
  4685                           tblptru	equ	0xFF8
  4686                           tblptrh	equ	0xFF7
  4687                           tblptrl	equ	0xFF6
  4688                           tablat	equ	0xFF5
  4689                           prodh	equ	0xFF4
  4690                           prodl	equ	0xFF3
  4691                           intcon	equ	0xFF2
  4692                           intcon2	equ	0xFF1
  4693                           intcon3	equ	0xFF0
  4694                           postinc0	equ	0xFEE
  4695                           wreg	equ	0xFE8
  4696                           postinc1	equ	0xFE6
  4697                           postdec1	equ	0xFE5
  4698                           fsr1h	equ	0xFE2
  4699                           fsr1l	equ	0xFE1
  4700                           indf2	equ	0xFDF
  4701                           postinc2	equ	0xFDE
  4702                           postdec2	equ	0xFDD
  4703                           fsr2h	equ	0xFDA
  4704                           fsr2l	equ	0xFD9
  4705                           status	equ	0xFD8
  4706                           
  4707 ;; *************** function _readover *****************
  4708 ;; Defined at:
  4709 ;;		line 27 in file "diskio.c"
  4710 ;; Parameters:    Size  Location     Type
  4711 ;;  a               2   25[COMRAM] int 
  4712 ;; Auto vars:     Size  Location     Type
  4713 ;;		None
  4714 ;; Return value:  Size  Location     Type
  4715 ;;                  1    wreg      void 
  4716 ;; Registers used:
  4717 ;;		None
  4718 ;; Tracked objects:
  4719 ;;		On entry : 0/0
  4720 ;;		On exit  : 0/0
  4721 ;;		Unchanged: 0/0
  4722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4723 ;;      Params:         2       0       0       0       0       0       0       0       0
  4724 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4725 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4726 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4727 ;;Total ram usage:        2 bytes
  4728 ;; Hardware stack levels used:    1
  4729 ;; Hardware stack levels required when called:    2
  4730 ;; This function calls:
  4731 ;;		Nothing
  4732 ;; This function is called by:
  4733 ;;		_SDCard
  4734 ;; This function uses a non-reentrant model
  4735 ;;
  4736                           
  4737                           	psect	text24
  4738  0034CA                     __ptext24:
  4739                           	opt stack 0
  4740  0034CA                     _readover:
  4741                           	opt stack 26
  4742                           
  4743                           ;diskio.c: 29: flag = a;
  4744                           
  4745                           ;incstack = 0
  4746  0034CA  C01A  F037         	movff	readover@a,_flag
  4747  0034CE  C01B  F038         	movff	readover@a+1,_flag+1
  4748  0034D2  0012               	return		;funcret
  4749  0034D4                     __end_of_readover:
  4750                           	opt stack 0
  4751                           tosu	equ	0xFFF
  4752                           tosh	equ	0xFFE
  4753                           tosl	equ	0xFFD
  4754                           pclath	equ	0xFFA
  4755                           tblptru	equ	0xFF8
  4756                           tblptrh	equ	0xFF7
  4757                           tblptrl	equ	0xFF6
  4758                           tablat	equ	0xFF5
  4759                           prodh	equ	0xFF4
  4760                           prodl	equ	0xFF3
  4761                           intcon	equ	0xFF2
  4762                           intcon2	equ	0xFF1
  4763                           intcon3	equ	0xFF0
  4764                           postinc0	equ	0xFEE
  4765                           wreg	equ	0xFE8
  4766                           postinc1	equ	0xFE6
  4767                           postdec1	equ	0xFE5
  4768                           fsr1h	equ	0xFE2
  4769                           fsr1l	equ	0xFE1
  4770                           indf2	equ	0xFDF
  4771                           postinc2	equ	0xFDE
  4772                           postdec2	equ	0xFDD
  4773                           fsr2h	equ	0xFDA
  4774                           fsr2l	equ	0xFD9
  4775                           status	equ	0xFD8
  4776                           
  4777 ;; *************** function _pf_write *****************
  4778 ;; Defined at:
  4779 ;;		line 919 in file "pff.c"
  4780 ;; Parameters:    Size  Location     Type
  4781 ;;  buff            2   58[BANK0 ] PTR const void 
  4782 ;;		 -> STR_7(8), 
  4783 ;;  btw             2   60[BANK0 ] unsigned int 
  4784 ;;  bw              2   62[BANK0 ] PTR unsigned int 
  4785 ;;		 -> SDCard@br(2), 
  4786 ;; Auto vars:     Size  Location     Type
  4787 ;;  clst            4   82[BANK0 ] unsigned long 
  4788 ;;  remain          4   78[BANK0 ] unsigned long 
  4789 ;;  sect            4   74[BANK0 ] unsigned long 
  4790 ;;  fs              2   89[BANK0 ] PTR struct .
  4791 ;;		 -> NULL(0), SDCard@fs(42), 
  4792 ;;  wcnt            2   87[BANK0 ] unsigned int 
  4793 ;;  p               2   72[BANK0 ] PTR const unsigned char 
  4794 ;;		 -> STR_7(8), 
  4795 ;;  cs              1   86[BANK0 ] unsigned char 
  4796 ;; Return value:  Size  Location     Type
  4797 ;;                  1    wreg      enum E3838
  4798 ;; Registers used:
  4799 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4800 ;; Tracked objects:
  4801 ;;		On entry : 0/0
  4802 ;;		On exit  : 0/0
  4803 ;;		Unchanged: 0/0
  4804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4805 ;;      Params:         0       6       0       0       0       0       0       0       0
  4806 ;;      Locals:         0      19       0       0       0       0       0       0       0
  4807 ;;      Temps:          0       8       0       0       0       0       0       0       0
  4808 ;;      Totals:         0      33       0       0       0       0       0       0       0
  4809 ;;Total ram usage:       33 bytes
  4810 ;; Hardware stack levels used:    1
  4811 ;; Hardware stack levels required when called:    7
  4812 ;; This function calls:
  4813 ;;		_clust2sect
  4814 ;;		_disk_writep
  4815 ;;		_get_fat
  4816 ;; This function is called by:
  4817 ;;		_SDCard
  4818 ;; This function uses a non-reentrant model
  4819 ;;
  4820                           
  4821                           	psect	text25
  4822  000646                     __ptext25:
  4823                           	opt stack 0
  4824  000646                     _pf_write:
  4825                           	opt stack 21
  4826                           
  4827                           ;pff.c: 925: DWORD clst;
  4828                           ;pff.c: 926: DWORD sect, remain;
  4829                           ;pff.c: 927: const BYTE *p = buff;
  4830                           
  4831                           ;incstack = 0
  4832  000646  C09A  F0A8         	movff	pf_write@buff,pf_write@p
  4833  00064A  C09B  F0A9         	movff	pf_write@buff+1,pf_write@p+1
  4834                           
  4835                           ;pff.c: 928: BYTE cs;
  4836                           ;pff.c: 929: UINT wcnt;
  4837                           ;pff.c: 930: FATFS *fs = FatFs;
  4838  00064E  C035  F0B9         	movff	_FatFs,pf_write@fs
  4839  000652  C036  F0BA         	movff	_FatFs+1,pf_write@fs+1
  4840                           
  4841                           ;pff.c: 933: *bw = 0;
  4842  000656  C09E  FFD9         	movff	pf_write@bw,fsr2l
  4843  00065A  C09F  FFDA         	movff	pf_write@bw+1,fsr2h
  4844  00065E  0E00               	movlw	0
  4845  000660  6EDE               	movwf	postinc2,c
  4846  000662  0E00               	movlw	0
  4847  000664  6EDD               	movwf	postdec2,c
  4848                           
  4849                           ;pff.c: 934: if (!fs) return FR_NOT_ENABLED;
  4850  000666  0100               	movlb	0	; () banked
  4851  000668  51B9               	movf	pf_write@fs& (0+255),w,b
  4852  00066A  11BA               	iorwf	(pf_write@fs+1)& (0+255),w,b
  4853  00066C  A4D8               	btfss	status,2,c
  4854  00066E  D002               	goto	l1013
  4855                           
  4856                           ; BSR set to: 0
  4857  000670  0E05               	movlw	5
  4858                           
  4859                           ; BSR set to: 0
  4860  000672  0012               	return	
  4861  000674                     l1013:
  4862                           
  4863                           ; BSR set to: 0
  4864                           ;pff.c: 935: if (!(fs->flag & 0x01))
  4865                           
  4866                           ; BSR set to: 0
  4867  000674  EE20 F001          	lfsr	2,1
  4868  000678  51B9               	movf	pf_write@fs& (0+255),w,b
  4869  00067A  26D9               	addwf	fsr2l,f,c
  4870  00067C  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4871  00067E  22DA               	addwfc	fsr2h,f,c
  4872  000680  B0DF               	btfsc	indf2,0,c
  4873  000682  D002               	goto	l1015
  4874                           
  4875                           ; BSR set to: 0
  4876                           ;pff.c: 936: return FR_NOT_OPENED;
  4877  000684  0E04               	movlw	4
  4878                           
  4879                           ; BSR set to: 0
  4880  000686  0012               	return	
  4881  000688                     l1015:
  4882                           
  4883                           ; BSR set to: 0
  4884                           ;pff.c: 938: if (!btw) {
  4885                           
  4886                           ; BSR set to: 0
  4887  000688  519C               	movf	pf_write@btw& (0+255),w,b
  4888  00068A  119D               	iorwf	(pf_write@btw+1)& (0+255),w,b
  4889  00068C  A4D8               	btfss	status,2,c
  4890  00068E  D031               	goto	l1016
  4891                           
  4892                           ; BSR set to: 0
  4893                           ;pff.c: 939: if ((fs->flag & 0x40) && disk_writep(0, 0)) {fs->flag = 0; return FR_DISK_E
      +                          RR;};
  4894  000690  EE20 F001          	lfsr	2,1
  4895  000694  51B9               	movf	pf_write@fs& (0+255),w,b
  4896  000696  26D9               	addwf	fsr2l,f,c
  4897  000698  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4898  00069A  22DA               	addwfc	fsr2h,f,c
  4899  00069C  ACDF               	btfss	indf2,6,c
  4900  00069E  D01E               	goto	l1017
  4901                           
  4902                           ; BSR set to: 0
  4903  0006A0  0E00               	movlw	0
  4904  0006A2  6E26               	movwf	disk_writep@wr,c
  4905  0006A4  0E00               	movlw	0
  4906  0006A6  6E27               	movwf	disk_writep@wr+1,c
  4907  0006A8  0E00               	movlw	0
  4908  0006AA  6E28               	movwf	disk_writep@wr+2,c
  4909  0006AC  0E00               	movlw	0
  4910  0006AE  6E29               	movwf	disk_writep@sc,c
  4911  0006B0  0E00               	movlw	0
  4912  0006B2  6E2A               	movwf	disk_writep@sc+1,c
  4913  0006B4  0E00               	movlw	0
  4914  0006B6  6E2B               	movwf	disk_writep@sc+2,c
  4915  0006B8  0E00               	movlw	0
  4916  0006BA  6E2C               	movwf	disk_writep@sc+3,c
  4917  0006BC  ECED  F00F         	call	_disk_writep	;wreg free
  4918  0006C0  0900               	iorlw	0
  4919  0006C2  B4D8               	btfsc	status,2,c
  4920  0006C4  D00B               	goto	l1017
  4921  0006C6  0100               	movlb	0	; () banked
  4922  0006C8  EE20 F001          	lfsr	2,1
  4923  0006CC  51B9               	movf	pf_write@fs& (0+255),w,b
  4924  0006CE  26D9               	addwf	fsr2l,f,c
  4925  0006D0  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4926  0006D2  22DA               	addwfc	fsr2h,f,c
  4927  0006D4  0E00               	movlw	0
  4928  0006D6  6EDF               	movwf	indf2,c
  4929                           
  4930                           ; BSR set to: 0
  4931  0006D8  0E01               	movlw	1
  4932                           
  4933                           ; BSR set to: 0
  4934  0006DA  0012               	return	
  4935  0006DC                     l1017:
  4936                           
  4937                           ;pff.c: 940: fs->flag &= ~0x40;
  4938                           
  4939                           ; BSR set to: 0
  4940  0006DC  0100               	movlb	0	; () banked
  4941  0006DE  EE20 F001          	lfsr	2,1
  4942  0006E2  51B9               	movf	pf_write@fs& (0+255),w,b
  4943  0006E4  26D9               	addwf	fsr2l,f,c
  4944  0006E6  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4945  0006E8  22DA               	addwfc	fsr2h,f,c
  4946  0006EA  0EBF               	movlw	191
  4947  0006EC  16DF               	andwf	indf2,f,c
  4948                           
  4949                           ; BSR set to: 0
  4950                           ;pff.c: 941: return FR_OK;
  4951  0006EE  0E00               	movlw	0
  4952                           
  4953                           ; BSR set to: 0
  4954  0006F0  0012               	return	
  4955  0006F2                     l1016:
  4956                           
  4957                           ; BSR set to: 0
  4958                           ;pff.c: 943: if (!(fs->flag & 0x40))
  4959                           
  4960                           ; BSR set to: 0
  4961  0006F2  EE20 F001          	lfsr	2,1
  4962  0006F6  51B9               	movf	pf_write@fs& (0+255),w,b
  4963  0006F8  26D9               	addwf	fsr2l,f,c
  4964  0006FA  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4965  0006FC  22DA               	addwfc	fsr2h,f,c
  4966  0006FE  BCDF               	btfsc	indf2,6,c
  4967  000700  D00E               	goto	l1019
  4968                           
  4969                           ; BSR set to: 0
  4970                           ;pff.c: 944: fs->fptr &= 0xFFFFFE00;
  4971  000702  EE20 F016          	lfsr	2,22
  4972  000706  51B9               	movf	pf_write@fs& (0+255),w,b
  4973  000708  26D9               	addwf	fsr2l,f,c
  4974  00070A  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4975  00070C  22DA               	addwfc	fsr2h,f,c
  4976  00070E  0E00               	movlw	0
  4977  000710  16DE               	andwf	postinc2,f,c
  4978  000712  0EFE               	movlw	254
  4979  000714  16DE               	andwf	postinc2,f,c
  4980  000716  0EFF               	movlw	255
  4981  000718  16DE               	andwf	postinc2,f,c
  4982  00071A  0EFF               	movlw	255
  4983  00071C  16DE               	andwf	postinc2,f,c
  4984  00071E                     l1019:
  4985                           
  4986                           ; BSR set to: 0
  4987                           ;pff.c: 945: }
  4988                           ;pff.c: 946: remain = fs->fsize - fs->fptr;
  4989                           
  4990                           ; BSR set to: 0
  4991  00071E  EE20 F01A          	lfsr	2,26
  4992  000722  51B9               	movf	pf_write@fs& (0+255),w,b
  4993  000724  26D9               	addwf	fsr2l,f,c
  4994  000726  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4995  000728  22DA               	addwfc	fsr2h,f,c
  4996  00072A  CFDE F0A0          	movff	postinc2,??_pf_write
  4997  00072E  CFDE F0A1          	movff	postinc2,??_pf_write+1
  4998  000732  CFDE F0A2          	movff	postinc2,??_pf_write+2
  4999  000736  CFDE F0A3          	movff	postinc2,??_pf_write+3
  5000  00073A  EE20 F016          	lfsr	2,22
  5001  00073E  51B9               	movf	pf_write@fs& (0+255),w,b
  5002  000740  26D9               	addwf	fsr2l,f,c
  5003  000742  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5004  000744  22DA               	addwfc	fsr2h,f,c
  5005  000746  CFDE F0A4          	movff	postinc2,??_pf_write+4
  5006  00074A  CFDE F0A5          	movff	postinc2,??_pf_write+5
  5007  00074E  CFDE F0A6          	movff	postinc2,??_pf_write+6
  5008  000752  CFDE F0A7          	movff	postinc2,??_pf_write+7
  5009  000756  1FA4               	comf	(??_pf_write+4)& (0+255),f,b
  5010  000758  1FA5               	comf	(??_pf_write+5)& (0+255),f,b
  5011  00075A  1FA6               	comf	(??_pf_write+6)& (0+255),f,b
  5012  00075C  1FA7               	comf	(??_pf_write+7)& (0+255),f,b
  5013  00075E  2BA4               	incf	(??_pf_write+4)& (0+255),f,b
  5014  000760  0E00               	movlw	0
  5015  000762  23A5               	addwfc	(??_pf_write+5)& (0+255),f,b
  5016  000764  23A6               	addwfc	(??_pf_write+6)& (0+255),f,b
  5017  000766  23A7               	addwfc	(??_pf_write+7)& (0+255),f,b
  5018  000768  51A0               	movf	??_pf_write& (0+255),w,b
  5019  00076A  25A4               	addwf	(??_pf_write+4)& (0+255),w,b
  5020  00076C  6FAE               	movwf	pf_write@remain& (0+255),b
  5021  00076E  51A1               	movf	(??_pf_write+1)& (0+255),w,b
  5022  000770  21A5               	addwfc	(??_pf_write+5)& (0+255),w,b
  5023  000772  6FAF               	movwf	(pf_write@remain+1)& (0+255),b
  5024  000774  51A2               	movf	(??_pf_write+2)& (0+255),w,b
  5025  000776  21A6               	addwfc	(??_pf_write+6)& (0+255),w,b
  5026  000778  6FB0               	movwf	(pf_write@remain+2)& (0+255),b
  5027  00077A  51A3               	movf	(??_pf_write+3)& (0+255),w,b
  5028  00077C  21A7               	addwfc	(??_pf_write+7)& (0+255),w,b
  5029  00077E  6FB1               	movwf	(pf_write@remain+3)& (0+255),b
  5030                           
  5031                           ; BSR set to: 0
  5032                           ;pff.c: 947: if (btw > remain) btw = (UINT)remain;
  5033  000780  519C               	movf	pf_write@btw& (0+255),w,b
  5034  000782  6FA0               	movwf	??_pf_write& (0+255),b
  5035  000784  519D               	movf	(pf_write@btw+1)& (0+255),w,b
  5036  000786  6FA1               	movwf	(??_pf_write+1)& (0+255),b
  5037  000788  6BA2               	clrf	(??_pf_write+2)& (0+255),b
  5038  00078A  6BA3               	clrf	(??_pf_write+3)& (0+255),b
  5039  00078C  51A0               	movf	??_pf_write& (0+255),w,b
  5040  00078E  5DAE               	subwf	pf_write@remain& (0+255),w,b
  5041  000790  51A1               	movf	(??_pf_write+1)& (0+255),w,b
  5042  000792  59AF               	subwfb	(pf_write@remain+1)& (0+255),w,b
  5043  000794  51A2               	movf	(??_pf_write+2)& (0+255),w,b
  5044  000796  59B0               	subwfb	(pf_write@remain+2)& (0+255),w,b
  5045  000798  51A3               	movf	(??_pf_write+3)& (0+255),w,b
  5046  00079A  59B1               	subwfb	(pf_write@remain+3)& (0+255),w,b
  5047  00079C  B0D8               	btfsc	status,0,c
  5048  00079E  D1AC               	goto	l1032
  5049                           
  5050                           ; BSR set to: 0
  5051  0007A0  C0AE  F09C         	movff	pf_write@remain,pf_write@btw
  5052  0007A4  C0AF  F09D         	movff	pf_write@remain+1,pf_write@btw+1
  5053                           
  5054                           ; BSR set to: 0
  5055                           ;pff.c: 949: while (btw) {
  5056  0007A8  D1A7               	goto	l1032
  5057  0007AA                     
  5058                           ; BSR set to: 0
  5059                           ;pff.c: 950: if ((UINT)fs->fptr % 512 == 0) {
  5060                           
  5061                           ; BSR set to: 0
  5062  0007AA  0EFF               	movlw	255
  5063  0007AC  6FA0               	movwf	??_pf_write& (0+255),b
  5064  0007AE  0E01               	movlw	1
  5065  0007B0  6FA1               	movwf	(??_pf_write+1)& (0+255),b
  5066  0007B2  EE20 F016          	lfsr	2,22
  5067  0007B6  51B9               	movf	pf_write@fs& (0+255),w,b
  5068  0007B8  26D9               	addwf	fsr2l,f,c
  5069  0007BA  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5070  0007BC  22DA               	addwfc	fsr2h,f,c
  5071  0007BE  CFDE F0A2          	movff	postinc2,??_pf_write+2
  5072  0007C2  CFDD F0A3          	movff	postdec2,??_pf_write+3
  5073  0007C6  51A0               	movf	??_pf_write& (0+255),w,b
  5074  0007C8  17A2               	andwf	(??_pf_write+2)& (0+255),f,b
  5075  0007CA  51A1               	movf	(??_pf_write+1)& (0+255),w,b
  5076  0007CC  17A3               	andwf	(??_pf_write+3)& (0+255),f,b
  5077  0007CE  51A2               	movf	(??_pf_write+2)& (0+255),w,b
  5078  0007D0  11A3               	iorwf	(??_pf_write+3)& (0+255),w,b
  5079  0007D2  A4D8               	btfss	status,2,c
  5080  0007D4  D0E9               	goto	l1023
  5081                           
  5082                           ; BSR set to: 0
  5083                           ;pff.c: 951: cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));
  5084  0007D6  EE20 F016          	lfsr	2,22
  5085  0007DA  51B9               	movf	pf_write@fs& (0+255),w,b
  5086  0007DC  26D9               	addwf	fsr2l,f,c
  5087  0007DE  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5088  0007E0  22DA               	addwfc	fsr2h,f,c
  5089  0007E2  CFDE F0A0          	movff	postinc2,??_pf_write
  5090  0007E6  CFDE F0A1          	movff	postinc2,??_pf_write+1
  5091  0007EA  CFDE F0A2          	movff	postinc2,??_pf_write+2
  5092  0007EE  CFDE F0A3          	movff	postinc2,??_pf_write+3
  5093  0007F2  0E0A               	movlw	10
  5094  0007F4  D005               	goto	u8160
  5095  0007F6                     u8165:
  5096  0007F6  90D8               	bcf	status,0,c
  5097  0007F8  33A3               	rrcf	(??_pf_write+3)& (0+255),f,b
  5098  0007FA  33A2               	rrcf	(??_pf_write+2)& (0+255),f,b
  5099  0007FC  33A1               	rrcf	(??_pf_write+1)& (0+255),f,b
  5100  0007FE  33A0               	rrcf	??_pf_write& (0+255),f,b
  5101  000800                     u8160:
  5102  000800  2EE8               	decfsz	wreg,f,c
  5103  000802  D7F9               	goto	u8165
  5104  000804  EE20 F002          	lfsr	2,2
  5105  000808  51B9               	movf	pf_write@fs& (0+255),w,b
  5106  00080A  26D9               	addwf	fsr2l,f,c
  5107  00080C  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5108  00080E  22DA               	addwfc	fsr2h,f,c
  5109  000810  50DF               	movf	indf2,w,c
  5110  000812  6FA4               	movwf	(??_pf_write+4)& (0+255),b
  5111  000814  05A4               	decf	(??_pf_write+4)& (0+255),w,b
  5112  000816  15A0               	andwf	??_pf_write& (0+255),w,b
  5113  000818  6FB6               	movwf	pf_write@cs& (0+255),b
  5114                           
  5115                           ; BSR set to: 0
  5116                           ;pff.c: 952: if (!cs) {
  5117  00081A  51B6               	movf	pf_write@cs& (0+255),w,b
  5118  00081C  A4D8               	btfss	status,2,c
  5119  00081E  D054               	goto	l1024
  5120                           
  5121                           ; BSR set to: 0
  5122                           ;pff.c: 953: if (fs->fptr == 0)
  5123  000820  EE20 F016          	lfsr	2,22
  5124  000824  51B9               	movf	pf_write@fs& (0+255),w,b
  5125  000826  26D9               	addwf	fsr2l,f,c
  5126  000828  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5127  00082A  22DA               	addwfc	fsr2h,f,c
  5128  00082C  50DE               	movf	postinc2,w,c
  5129  00082E  10DE               	iorwf	postinc2,w,c
  5130  000830  10DE               	iorwf	postinc2,w,c
  5131  000832  10DE               	iorwf	postinc2,w,c
  5132  000834  A4D8               	btfss	status,2,c
  5133  000836  D00F               	goto	l1025
  5134                           
  5135                           ; BSR set to: 0
  5136                           ;pff.c: 954: clst = fs->org_clust;
  5137  000838  EE20 F01E          	lfsr	2,30
  5138  00083C  51B9               	movf	pf_write@fs& (0+255),w,b
  5139  00083E  26D9               	addwf	fsr2l,f,c
  5140  000840  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5141  000842  22DA               	addwfc	fsr2h,f,c
  5142  000844  CFDE F0B2          	movff	postinc2,pf_write@clst
  5143  000848  CFDE F0B3          	movff	postinc2,pf_write@clst+1
  5144  00084C  CFDE F0B4          	movff	postinc2,pf_write@clst+2
  5145  000850  CFDE F0B5          	movff	postinc2,pf_write@clst+3
  5146  000854  D018               	goto	l1026
  5147  000856                     l1025:
  5148                           
  5149                           ; BSR set to: 0
  5150                           ;pff.c: 955: else
  5151                           ;pff.c: 956: clst = get_fat(fs->curr_clust);
  5152                           
  5153                           ; BSR set to: 0
  5154  000856  EE20 F022          	lfsr	2,34
  5155  00085A  51B9               	movf	pf_write@fs& (0+255),w,b
  5156  00085C  26D9               	addwf	fsr2l,f,c
  5157  00085E  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5158  000860  22DA               	addwfc	fsr2h,f,c
  5159  000862  CFDE F072          	movff	postinc2,get_fat@clst
  5160  000866  CFDE F073          	movff	postinc2,get_fat@clst+1
  5161  00086A  CFDE F074          	movff	postinc2,get_fat@clst+2
  5162  00086E  CFDE F075          	movff	postinc2,get_fat@clst+3
  5163  000872  EC82  F005         	call	_get_fat	;wreg free
  5164  000876  C072  F0B2         	movff	?_get_fat,pf_write@clst
  5165  00087A  C073  F0B3         	movff	?_get_fat+1,pf_write@clst+1
  5166  00087E  C074  F0B4         	movff	?_get_fat+2,pf_write@clst+2
  5167  000882  C075  F0B5         	movff	?_get_fat+3,pf_write@clst+3
  5168  000886                     l1026:
  5169                           
  5170                           ;pff.c: 957: if (clst <= 1) {fs->flag = 0; return FR_DISK_ERR;};
  5171  000886  0100               	movlb	0	; () banked
  5172  000888  51B5               	movf	(pf_write@clst+3)& (0+255),w,b
  5173  00088A  11B4               	iorwf	(pf_write@clst+2)& (0+255),w,b
  5174  00088C  11B3               	iorwf	(pf_write@clst+1)& (0+255),w,b
  5175  00088E  E10E               	bnz	l7178
  5176  000890  0E02               	movlw	2
  5177  000892  5DB2               	subwf	pf_write@clst& (0+255),w,b
  5178  000894  B0D8               	btfsc	status,0,c
  5179  000896  D00A               	goto	l1027
  5180                           
  5181                           ; BSR set to: 0
  5182  000898  EE20 F001          	lfsr	2,1
  5183  00089C  51B9               	movf	pf_write@fs& (0+255),w,b
  5184  00089E  26D9               	addwf	fsr2l,f,c
  5185  0008A0  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5186  0008A2  22DA               	addwfc	fsr2h,f,c
  5187  0008A4  0E00               	movlw	0
  5188  0008A6  6EDF               	movwf	indf2,c
  5189                           
  5190                           ; BSR set to: 0
  5191  0008A8  0E01               	movlw	1
  5192                           
  5193                           ; BSR set to: 0
  5194  0008AA  0012               	return	
  5195  0008AC                     l1027:
  5196  0008AC                     l7178:
  5197                           
  5198                           ; BSR set to: 0
  5199                           ;pff.c: 958: fs->curr_clust = clst;
  5200  0008AC  EE20 F022          	lfsr	2,34
  5201  0008B0  51B9               	movf	pf_write@fs& (0+255),w,b
  5202  0008B2  26D9               	addwf	fsr2l,f,c
  5203  0008B4  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5204  0008B6  22DA               	addwfc	fsr2h,f,c
  5205  0008B8  C0B2  FFDE         	movff	pf_write@clst,postinc2
  5206  0008BC  C0B3  FFDE         	movff	pf_write@clst+1,postinc2
  5207  0008C0  C0B4  FFDE         	movff	pf_write@clst+2,postinc2
  5208  0008C4  C0B5  FFDE         	movff	pf_write@clst+3,postinc2
  5209  0008C8                     l1024:
  5210                           
  5211                           ; BSR set to: 0
  5212                           ;pff.c: 959: }
  5213                           ;pff.c: 960: sect = clust2sect(fs->curr_clust);
  5214                           
  5215                           ; BSR set to: 0
  5216  0008C8  EE20 F022          	lfsr	2,34
  5217  0008CC  51B9               	movf	pf_write@fs& (0+255),w,b
  5218  0008CE  26D9               	addwf	fsr2l,f,c
  5219  0008D0  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5220  0008D2  22DA               	addwfc	fsr2h,f,c
  5221  0008D4  CFDE F026          	movff	postinc2,clust2sect@clst
  5222  0008D8  CFDE F027          	movff	postinc2,clust2sect@clst+1
  5223  0008DC  CFDE F028          	movff	postinc2,clust2sect@clst+2
  5224  0008E0  CFDE F029          	movff	postinc2,clust2sect@clst+3
  5225  0008E4  ECB3  F014         	call	_clust2sect	;wreg free
  5226  0008E8  C026  F0AA         	movff	?_clust2sect,pf_write@sect
  5227  0008EC  C027  F0AB         	movff	?_clust2sect+1,pf_write@sect+1
  5228  0008F0  C028  F0AC         	movff	?_clust2sect+2,pf_write@sect+2
  5229  0008F4  C029  F0AD         	movff	?_clust2sect+3,pf_write@sect+3
  5230                           
  5231                           ;pff.c: 961: if (!sect) {fs->flag = 0; return FR_DISK_ERR;};
  5232  0008F8  0100               	movlb	0	; () banked
  5233  0008FA  51AA               	movf	pf_write@sect& (0+255),w,b
  5234  0008FC  11AB               	iorwf	(pf_write@sect+1)& (0+255),w,b
  5235  0008FE  11AC               	iorwf	(pf_write@sect+2)& (0+255),w,b
  5236  000900  11AD               	iorwf	(pf_write@sect+3)& (0+255),w,b
  5237  000902  A4D8               	btfss	status,2,c
  5238  000904  D00A               	goto	l1028
  5239                           
  5240                           ; BSR set to: 0
  5241  000906  EE20 F001          	lfsr	2,1
  5242  00090A  51B9               	movf	pf_write@fs& (0+255),w,b
  5243  00090C  26D9               	addwf	fsr2l,f,c
  5244  00090E  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5245  000910  22DA               	addwfc	fsr2h,f,c
  5246  000912  0E00               	movlw	0
  5247  000914  6EDF               	movwf	indf2,c
  5248                           
  5249                           ; BSR set to: 0
  5250  000916  0E01               	movlw	1
  5251                           
  5252                           ; BSR set to: 0
  5253  000918  0012               	return	
  5254  00091A                     l1028:
  5255                           
  5256                           ; BSR set to: 0
  5257                           ;pff.c: 962: fs->dsect = sect + cs;
  5258                           
  5259                           ; BSR set to: 0
  5260  00091A  51B6               	movf	pf_write@cs& (0+255),w,b
  5261  00091C  25AA               	addwf	pf_write@sect& (0+255),w,b
  5262  00091E  6FA0               	movwf	??_pf_write& (0+255),b
  5263  000920  0E00               	movlw	0
  5264  000922  21AB               	addwfc	(pf_write@sect+1)& (0+255),w,b
  5265  000924  6FA1               	movwf	(??_pf_write+1)& (0+255),b
  5266  000926  0E00               	movlw	0
  5267  000928  21AC               	addwfc	(pf_write@sect+2)& (0+255),w,b
  5268  00092A  6FA2               	movwf	(??_pf_write+2)& (0+255),b
  5269  00092C  0E00               	movlw	0
  5270  00092E  21AD               	addwfc	(pf_write@sect+3)& (0+255),w,b
  5271  000930  6FA3               	movwf	(??_pf_write+3)& (0+255),b
  5272  000932  EE20 F026          	lfsr	2,38
  5273  000936  51B9               	movf	pf_write@fs& (0+255),w,b
  5274  000938  26D9               	addwf	fsr2l,f,c
  5275  00093A  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5276  00093C  22DA               	addwfc	fsr2h,f,c
  5277  00093E  C0A0  FFDE         	movff	??_pf_write,postinc2
  5278  000942  C0A1  FFDE         	movff	??_pf_write+1,postinc2
  5279  000946  C0A2  FFDE         	movff	??_pf_write+2,postinc2
  5280  00094A  C0A3  FFDE         	movff	??_pf_write+3,postinc2
  5281                           
  5282                           ; BSR set to: 0
  5283                           ;pff.c: 963: if (disk_writep(0, fs->dsect)) {fs->flag = 0; return FR_DISK_ERR;};
  5284  00094E  0E00               	movlw	0
  5285  000950  6E26               	movwf	disk_writep@wr,c
  5286  000952  0E00               	movlw	0
  5287  000954  6E27               	movwf	disk_writep@wr+1,c
  5288  000956  0E00               	movlw	0
  5289  000958  6E28               	movwf	disk_writep@wr+2,c
  5290  00095A  EE20 F026          	lfsr	2,38
  5291  00095E  51B9               	movf	pf_write@fs& (0+255),w,b
  5292  000960  26D9               	addwf	fsr2l,f,c
  5293  000962  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5294  000964  22DA               	addwfc	fsr2h,f,c
  5295  000966  CFDE F029          	movff	postinc2,disk_writep@sc
  5296  00096A  CFDE F02A          	movff	postinc2,disk_writep@sc+1
  5297  00096E  CFDE F02B          	movff	postinc2,disk_writep@sc+2
  5298  000972  CFDE F02C          	movff	postinc2,disk_writep@sc+3
  5299  000976  ECED  F00F         	call	_disk_writep	;wreg free
  5300  00097A  0900               	iorlw	0
  5301  00097C  B4D8               	btfsc	status,2,c
  5302  00097E  D00B               	goto	l1029
  5303  000980  0100               	movlb	0	; () banked
  5304  000982  EE20 F001          	lfsr	2,1
  5305  000986  51B9               	movf	pf_write@fs& (0+255),w,b
  5306  000988  26D9               	addwf	fsr2l,f,c
  5307  00098A  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5308  00098C  22DA               	addwfc	fsr2h,f,c
  5309  00098E  0E00               	movlw	0
  5310  000990  6EDF               	movwf	indf2,c
  5311                           
  5312                           ; BSR set to: 0
  5313  000992  0E01               	movlw	1
  5314                           
  5315                           ; BSR set to: 0
  5316  000994  0012               	return	
  5317  000996                     l1029:
  5318                           
  5319                           ;pff.c: 964: fs->flag |= 0x40;
  5320                           
  5321                           ; BSR set to: 0
  5322  000996  0100               	movlb	0	; () banked
  5323  000998  EE20 F001          	lfsr	2,1
  5324  00099C  51B9               	movf	pf_write@fs& (0+255),w,b
  5325  00099E  26D9               	addwf	fsr2l,f,c
  5326  0009A0  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5327  0009A2  22DA               	addwfc	fsr2h,f,c
  5328  0009A4  0E00               	movlw	0
  5329  0009A6  8CDB               	bsf	plusw2,6,c
  5330  0009A8                     l1023:
  5331                           
  5332                           ; BSR set to: 0
  5333                           ;pff.c: 965: }
  5334                           ;pff.c: 966: wcnt = 512 - (UINT)fs->fptr % 512;
  5335  0009A8  0EFF               	movlw	255
  5336  0009AA  6FA0               	movwf	??_pf_write& (0+255),b
  5337  0009AC  0E01               	movlw	1
  5338  0009AE  6FA1               	movwf	(??_pf_write+1)& (0+255),b
  5339  0009B0  EE20 F016          	lfsr	2,22
  5340  0009B4  51B9               	movf	pf_write@fs& (0+255),w,b
  5341  0009B6  26D9               	addwf	fsr2l,f,c
  5342  0009B8  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5343  0009BA  22DA               	addwfc	fsr2h,f,c
  5344  0009BC  CFDE F0A2          	movff	postinc2,??_pf_write+2
  5345  0009C0  CFDD F0A3          	movff	postdec2,??_pf_write+3
  5346  0009C4  51A0               	movf	??_pf_write& (0+255),w,b
  5347  0009C6  17A2               	andwf	(??_pf_write+2)& (0+255),f,b
  5348  0009C8  51A1               	movf	(??_pf_write+1)& (0+255),w,b
  5349  0009CA  17A3               	andwf	(??_pf_write+3)& (0+255),f,b
  5350  0009CC  1FA2               	comf	(??_pf_write+2)& (0+255),f,b
  5351  0009CE  1FA3               	comf	(??_pf_write+3)& (0+255),f,b
  5352  0009D0  4BA2               	infsnz	(??_pf_write+2)& (0+255),f,b
  5353  0009D2  2BA3               	incf	(??_pf_write+3)& (0+255),f,b
  5354  0009D4  0E00               	movlw	0
  5355  0009D6  25A2               	addwf	(??_pf_write+2)& (0+255),w,b
  5356  0009D8  6FB7               	movwf	pf_write@wcnt& (0+255),b
  5357  0009DA  0E02               	movlw	2
  5358  0009DC  21A3               	addwfc	(??_pf_write+3)& (0+255),w,b
  5359  0009DE  6FB8               	movwf	(pf_write@wcnt+1)& (0+255),b
  5360                           
  5361                           ; BSR set to: 0
  5362                           ;pff.c: 967: if (wcnt > btw)wcnt = btw;
  5363  0009E0  51B7               	movf	pf_write@wcnt& (0+255),w,b
  5364  0009E2  5D9C               	subwf	pf_write@btw& (0+255),w,b
  5365  0009E4  51B8               	movf	(pf_write@wcnt+1)& (0+255),w,b
  5366  0009E6  599D               	subwfb	(pf_write@btw+1)& (0+255),w,b
  5367  0009E8  B0D8               	btfsc	status,0,c
  5368  0009EA  D004               	goto	l1030
  5369                           
  5370                           ; BSR set to: 0
  5371  0009EC  C09C  F0B7         	movff	pf_write@btw,pf_write@wcnt
  5372  0009F0  C09D  F0B8         	movff	pf_write@btw+1,pf_write@wcnt+1
  5373  0009F4                     l1030:
  5374                           
  5375                           ; BSR set to: 0
  5376                           ;pff.c: 968: if (disk_writep(p, fs->dsect )) {fs->flag = 0; return FR_DISK_ERR;};
  5377                           
  5378                           ; BSR set to: 0
  5379  0009F4  C0A8  F026         	movff	pf_write@p,disk_writep@wr
  5380  0009F8  C0A9  F027         	movff	pf_write@p+1,disk_writep@wr+1
  5381  0009FC  5026               	movf	disk_writep@wr,w,c
  5382  0009FE  1027               	iorwf	disk_writep@wr+1,w,c
  5383  000A00  A4D8               	btfss	status,2,c
  5384  000A02  0E00               	movlw	low (__mediumconst shr (0+16))
  5385  000A04  6E28               	movwf	disk_writep@wr+2,c
  5386  000A06  EE20 F026          	lfsr	2,38
  5387  000A0A  51B9               	movf	pf_write@fs& (0+255),w,b
  5388  000A0C  26D9               	addwf	fsr2l,f,c
  5389  000A0E  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5390  000A10  22DA               	addwfc	fsr2h,f,c
  5391  000A12  CFDE F029          	movff	postinc2,disk_writep@sc
  5392  000A16  CFDE F02A          	movff	postinc2,disk_writep@sc+1
  5393  000A1A  CFDE F02B          	movff	postinc2,disk_writep@sc+2
  5394  000A1E  CFDE F02C          	movff	postinc2,disk_writep@sc+3
  5395  000A22  ECED  F00F         	call	_disk_writep	;wreg free
  5396  000A26  0900               	iorlw	0
  5397  000A28  B4D8               	btfsc	status,2,c
  5398  000A2A  D00B               	goto	l1031
  5399  000A2C  0100               	movlb	0	; () banked
  5400  000A2E  EE20 F001          	lfsr	2,1
  5401  000A32  51B9               	movf	pf_write@fs& (0+255),w,b
  5402  000A34  26D9               	addwf	fsr2l,f,c
  5403  000A36  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5404  000A38  22DA               	addwfc	fsr2h,f,c
  5405  000A3A  0E00               	movlw	0
  5406  000A3C  6EDF               	movwf	indf2,c
  5407                           
  5408                           ; BSR set to: 0
  5409  000A3E  0E01               	movlw	1
  5410                           
  5411                           ; BSR set to: 0
  5412  000A40  0012               	return	
  5413  000A42                     l1031:
  5414                           
  5415                           ;pff.c: 969: fs->fptr += wcnt; p += wcnt;
  5416                           
  5417                           ; BSR set to: 0
  5418  000A42  0100               	movlb	0	; () banked
  5419  000A44  EE20 F016          	lfsr	2,22
  5420  000A48  51B9               	movf	pf_write@fs& (0+255),w,b
  5421  000A4A  26D9               	addwf	fsr2l,f,c
  5422  000A4C  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5423  000A4E  22DA               	addwfc	fsr2h,f,c
  5424  000A50  51B7               	movf	pf_write@wcnt& (0+255),w,b
  5425  000A52  26DE               	addwf	postinc2,f,c
  5426  000A54  51B8               	movf	(pf_write@wcnt+1)& (0+255),w,b
  5427  000A56  22DE               	addwfc	postinc2,f,c
  5428  000A58  0E00               	movlw	0
  5429  000A5A  22DE               	addwfc	postinc2,f,c
  5430  000A5C  22DE               	addwfc	postinc2,f,c
  5431                           
  5432                           ; BSR set to: 0
  5433  000A5E  51B7               	movf	pf_write@wcnt& (0+255),w,b
  5434  000A60  27A8               	addwf	pf_write@p& (0+255),f,b
  5435  000A62  51B8               	movf	(pf_write@wcnt+1)& (0+255),w,b
  5436  000A64  23A9               	addwfc	(pf_write@p+1)& (0+255),f,b
  5437                           
  5438                           ; BSR set to: 0
  5439                           ;pff.c: 970: btw -= wcnt; *bw += wcnt;
  5440  000A66  51B7               	movf	pf_write@wcnt& (0+255),w,b
  5441  000A68  5F9C               	subwf	pf_write@btw& (0+255),f,b
  5442  000A6A  51B8               	movf	(pf_write@wcnt+1)& (0+255),w,b
  5443  000A6C  5B9D               	subwfb	(pf_write@btw+1)& (0+255),f,b
  5444                           
  5445                           ; BSR set to: 0
  5446  000A6E  C09E  FFD9         	movff	pf_write@bw,fsr2l
  5447  000A72  C09F  FFDA         	movff	pf_write@bw+1,fsr2h
  5448  000A76  51B7               	movf	pf_write@wcnt& (0+255),w,b
  5449  000A78  26DE               	addwf	postinc2,f,c
  5450  000A7A  51B8               	movf	(pf_write@wcnt+1)& (0+255),w,b
  5451  000A7C  22DD               	addwfc	postdec2,f,c
  5452                           
  5453                           ; BSR set to: 0
  5454                           ;pff.c: 971: if ((UINT)fs->fptr % 512 == 0) {
  5455  000A7E  0EFF               	movlw	255
  5456  000A80  6FA0               	movwf	??_pf_write& (0+255),b
  5457  000A82  0E01               	movlw	1
  5458  000A84  6FA1               	movwf	(??_pf_write+1)& (0+255),b
  5459  000A86  EE20 F016          	lfsr	2,22
  5460  000A8A  51B9               	movf	pf_write@fs& (0+255),w,b
  5461  000A8C  26D9               	addwf	fsr2l,f,c
  5462  000A8E  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5463  000A90  22DA               	addwfc	fsr2h,f,c
  5464  000A92  CFDE F0A2          	movff	postinc2,??_pf_write+2
  5465  000A96  CFDD F0A3          	movff	postdec2,??_pf_write+3
  5466  000A9A  51A0               	movf	??_pf_write& (0+255),w,b
  5467  000A9C  17A2               	andwf	(??_pf_write+2)& (0+255),f,b
  5468  000A9E  51A1               	movf	(??_pf_write+1)& (0+255),w,b
  5469  000AA0  17A3               	andwf	(??_pf_write+3)& (0+255),f,b
  5470  000AA2  51A2               	movf	(??_pf_write+2)& (0+255),w,b
  5471  000AA4  11A3               	iorwf	(??_pf_write+3)& (0+255),w,b
  5472  000AA6  A4D8               	btfss	status,2,c
  5473  000AA8  D027               	goto	l1032
  5474                           
  5475                           ; BSR set to: 0
  5476                           ;pff.c: 972: if (disk_writep(0, 0)) {fs->flag = 0; return FR_DISK_ERR;};
  5477  000AAA  0E00               	movlw	0
  5478  000AAC  6E26               	movwf	disk_writep@wr,c
  5479  000AAE  0E00               	movlw	0
  5480  000AB0  6E27               	movwf	disk_writep@wr+1,c
  5481  000AB2  0E00               	movlw	0
  5482  000AB4  6E28               	movwf	disk_writep@wr+2,c
  5483  000AB6  0E00               	movlw	0
  5484  000AB8  6E29               	movwf	disk_writep@sc,c
  5485  000ABA  0E00               	movlw	0
  5486  000ABC  6E2A               	movwf	disk_writep@sc+1,c
  5487  000ABE  0E00               	movlw	0
  5488  000AC0  6E2B               	movwf	disk_writep@sc+2,c
  5489  000AC2  0E00               	movlw	0
  5490  000AC4  6E2C               	movwf	disk_writep@sc+3,c
  5491  000AC6  ECED  F00F         	call	_disk_writep	;wreg free
  5492  000ACA  0900               	iorlw	0
  5493  000ACC  B4D8               	btfsc	status,2,c
  5494  000ACE  D00B               	goto	l1033
  5495  000AD0  0100               	movlb	0	; () banked
  5496  000AD2  EE20 F001          	lfsr	2,1
  5497  000AD6  51B9               	movf	pf_write@fs& (0+255),w,b
  5498  000AD8  26D9               	addwf	fsr2l,f,c
  5499  000ADA  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5500  000ADC  22DA               	addwfc	fsr2h,f,c
  5501  000ADE  0E00               	movlw	0
  5502  000AE0  6EDF               	movwf	indf2,c
  5503                           
  5504                           ; BSR set to: 0
  5505  000AE2  0E01               	movlw	1
  5506                           
  5507                           ; BSR set to: 0
  5508  000AE4  0012               	return	
  5509  000AE6                     l1033:
  5510                           
  5511                           ;pff.c: 973: fs->flag &= ~0x40;
  5512                           
  5513                           ; BSR set to: 0
  5514  000AE6  0100               	movlb	0	; () banked
  5515  000AE8  EE20 F001          	lfsr	2,1
  5516  000AEC  51B9               	movf	pf_write@fs& (0+255),w,b
  5517  000AEE  26D9               	addwf	fsr2l,f,c
  5518  000AF0  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5519  000AF2  22DA               	addwfc	fsr2h,f,c
  5520  000AF4  0EBF               	movlw	191
  5521  000AF6  16DF               	andwf	indf2,f,c
  5522  000AF8                     l1032:
  5523                           
  5524                           ; BSR set to: 0
  5525                           
  5526                           ; BSR set to: 0
  5527                           
  5528                           ; BSR set to: 0
  5529  000AF8  519C               	movf	pf_write@btw& (0+255),w,b
  5530  000AFA  119D               	iorwf	(pf_write@btw+1)& (0+255),w,b
  5531  000AFC  A4D8               	btfss	status,2,c
  5532  000AFE  D655               	goto	l1022
  5533                           
  5534                           ; BSR set to: 0
  5535                           ;pff.c: 974: }
  5536                           ;pff.c: 975: }
  5537                           ;pff.c: 977: return FR_OK;
  5538                           
  5539                           ; BSR set to: 0
  5540  000B00  0E00               	movlw	0
  5541  000B02  0012               	return	
  5542  000B04                     __end_of_pf_write:
  5543                           	opt stack 0
  5544                           tosu	equ	0xFFF
  5545                           tosh	equ	0xFFE
  5546                           tosl	equ	0xFFD
  5547                           pclath	equ	0xFFA
  5548                           tblptru	equ	0xFF8
  5549                           tblptrh	equ	0xFF7
  5550                           tblptrl	equ	0xFF6
  5551                           tablat	equ	0xFF5
  5552                           prodh	equ	0xFF4
  5553                           prodl	equ	0xFF3
  5554                           intcon	equ	0xFF2
  5555                           intcon2	equ	0xFF1
  5556                           intcon3	equ	0xFF0
  5557                           postinc0	equ	0xFEE
  5558                           wreg	equ	0xFE8
  5559                           postinc1	equ	0xFE6
  5560                           postdec1	equ	0xFE5
  5561                           fsr1h	equ	0xFE2
  5562                           fsr1l	equ	0xFE1
  5563                           indf2	equ	0xFDF
  5564                           postinc2	equ	0xFDE
  5565                           postdec2	equ	0xFDD
  5566                           plusw2	equ	0xFDB
  5567                           fsr2h	equ	0xFDA
  5568                           fsr2l	equ	0xFD9
  5569                           status	equ	0xFD8
  5570                           
  5571 ;; *************** function _disk_writep *****************
  5572 ;; Defined at:
  5573 ;;		line 286 in file "diskio.c"
  5574 ;; Parameters:    Size  Location     Type
  5575 ;;  wr              3   37[COMRAM] PTR const unsigned char 
  5576 ;;		 -> ROM(32767), STR_7(8), 
  5577 ;;  sc              4   40[COMRAM] unsigned long 
  5578 ;; Auto vars:     Size  Location     Type
  5579 ;;  j               2    6[BANK0 ] int 
  5580 ;;  i               2    4[BANK0 ] int 
  5581 ;;  buff            1    8[BANK0 ] unsigned char 
  5582 ;;  res             1    0        enum E14
  5583 ;; Return value:  Size  Location     Type
  5584 ;;                  1    wreg      enum E14
  5585 ;; Registers used:
  5586 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5587 ;; Tracked objects:
  5588 ;;		On entry : 0/0
  5589 ;;		On exit  : 0/0
  5590 ;;		Unchanged: 0/0
  5591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5592 ;;      Params:         7       0       0       0       0       0       0       0       0
  5593 ;;      Locals:         0       5       0       0       0       0       0       0       0
  5594 ;;      Temps:          0       4       0       0       0       0       0       0       0
  5595 ;;      Totals:         7       9       0       0       0       0       0       0       0
  5596 ;;Total ram usage:       16 bytes
  5597 ;; Hardware stack levels used:    1
  5598 ;; Hardware stack levels required when called:    4
  5599 ;; This function calls:
  5600 ;;		_WriteSPI_
  5601 ;;		_command
  5602 ;;		_dummy_clocks
  5603 ;;		_proceed
  5604 ;;		_response
  5605 ;; This function is called by:
  5606 ;;		_pf_write
  5607 ;; This function uses a non-reentrant model
  5608 ;;
  5609                           
  5610                           	psect	text26
  5611  001FDA                     __ptext26:
  5612                           	opt stack 0
  5613  001FDA                     _disk_writep:
  5614                           	opt stack 23
  5615                           
  5616                           ;diskio.c: 291: DRESULT res;
  5617                           ;diskio.c: 293: unsigned char buff;
  5618                           ;diskio.c: 294: int i=0,j;
  5619                           
  5620                           ; BSR set to: 0
  5621                           ;incstack = 0
  5622  001FDA  0E00               	movlw	0
  5623  001FDC  0100               	movlb	0	; () banked
  5624  001FDE  6F65               	movwf	(disk_writep@i+1)& (0+255),b
  5625  001FE0  0E00               	movlw	0
  5626  001FE2  6F64               	movwf	disk_writep@i& (0+255),b
  5627                           
  5628                           ; BSR set to: 0
  5629                           ;diskio.c: 298: dummy_clocks(8);
  5630  001FE4  0E08               	movlw	8
  5631  001FE6  EC5A  F019         	call	_dummy_clocks
  5632                           
  5633                           ;diskio.c: 299: command(0X58, sc*512, 0X00);
  5634  001FEA  C029  F060         	movff	disk_writep@sc,??_disk_writep
  5635  001FEE  C02A  F061         	movff	disk_writep@sc+1,??_disk_writep+1
  5636  001FF2  C02B  F062         	movff	disk_writep@sc+2,??_disk_writep+2
  5637  001FF6  C02C  F063         	movff	disk_writep@sc+3,??_disk_writep+3
  5638  001FFA  0E09               	movlw	9
  5639  001FFC                     u7655:
  5640  001FFC  90D8               	bcf	status,0,c
  5641  001FFE  0100               	movlb	0	; () banked
  5642  002000  3760               	rlcf	??_disk_writep& (0+255),f,b
  5643  002002  3761               	rlcf	(??_disk_writep+1)& (0+255),f,b
  5644  002004  3762               	rlcf	(??_disk_writep+2)& (0+255),f,b
  5645  002006  3763               	rlcf	(??_disk_writep+3)& (0+255),f,b
  5646  002008  2EE8               	decfsz	wreg,f,c
  5647  00200A  D7F8               	goto	u7655
  5648  00200C  C060  F01E         	movff	??_disk_writep,command@arg
  5649  002010  C061  F01F         	movff	??_disk_writep+1,command@arg+1
  5650  002014  C062  F020         	movff	??_disk_writep+2,command@arg+2
  5651  002018  C063  F021         	movff	??_disk_writep+3,command@arg+3
  5652  00201C  0E00               	movlw	0
  5653  00201E  6E22               	movwf	command@CRC,c
  5654  002020  0E58               	movlw	88
  5655  002022  EC36  F018         	call	_command
  5656                           
  5657                           ;diskio.c: 300: proceed();
  5658  002026  EC59  F01A         	call	_proceed	;wreg free
  5659  00202A                     
  5660                           ;diskio.c: 302: buff = response();
  5661  00202A  EC4C  F01A         	call	_response	;wreg free
  5662  00202E  0100               	movlb	0	; () banked
  5663  002030  6F68               	movwf	disk_writep@buff& (0+255),b
  5664                           
  5665                           ;diskio.c: 303: }while(buff!=0x00);
  5666  002032  5168               	movf	disk_writep@buff& (0+255),w,b
  5667  002034  A4D8               	btfss	status,2,c
  5668  002036  D7F9               	goto	l797
  5669                           
  5670                           ; BSR set to: 0
  5671                           ;diskio.c: 306: _delay((unsigned long)((2000)*(48000000/4000.0)));
  5672                           
  5673                           ; BSR set to: 0
  5674  002038  0E7A               	movlw	122
  5675  00203A  0100               	movlb	0	; () banked
  5676  00203C  6F61               	movwf	(??_disk_writep+1)& (0+255),b
  5677  00203E  0EC1               	movlw	193
  5678  002040  6F60               	movwf	??_disk_writep& (0+255),b
  5679  002042  0E81               	movlw	129
  5680  002044                     u9197:
  5681  002044  2EE8               	decfsz	wreg,f,c
  5682  002046  D7FE               	bra	u9197
  5683  002048  2F60               	decfsz	??_disk_writep& (0+255),f,b
  5684  00204A  D7FC               	bra	u9197
  5685  00204C  2F61               	decfsz	(??_disk_writep+1)& (0+255),f,b
  5686  00204E  D7FA               	bra	u9197
  5687  002050  D000               	nop2	
  5688                           
  5689                           ;diskio.c: 309: dummy_clocks(8);
  5690  002052  0E08               	movlw	8
  5691  002054  EC5A  F019         	call	_dummy_clocks
  5692                           
  5693                           ;diskio.c: 311: WriteSPI_(0XFE);
  5694  002058  0EFE               	movlw	254
  5695  00205A  ECB8  F018         	call	_WriteSPI_
  5696                           
  5697                           ;diskio.c: 313: for(j=0;j<512;j++)
  5698  00205E  0E00               	movlw	0
  5699  002060  0100               	movlb	0	; () banked
  5700  002062  6F67               	movwf	(disk_writep@j+1)& (0+255),b
  5701  002064  0E00               	movlw	0
  5702  002066  6F66               	movwf	disk_writep@j& (0+255),b
  5703  002068                     l6846:
  5704                           
  5705                           ; BSR set to: 0
  5706  002068  BF67               	btfsc	(disk_writep@j+1)& (0+255),7,b
  5707  00206A  D004               	goto	l799
  5708  00206C  0E02               	movlw	2
  5709  00206E  5D67               	subwf	(disk_writep@j+1)& (0+255),w,b
  5710  002070  B0D8               	btfsc	status,0,c
  5711  002072  D023               	goto	u7690
  5712  002074                     l799:
  5713                           
  5714                           ; BSR set to: 0
  5715                           ;diskio.c: 314: {
  5716                           ;diskio.c: 315: if(*wr!='\0')
  5717                           
  5718                           ; BSR set to: 0
  5719  002074  C026  FFF6         	movff	disk_writep@wr,tblptrl
  5720  002078  C027  FFF7         	movff	disk_writep@wr+1,tblptrh
  5721  00207C  C028  FFF8         	movff	disk_writep@wr+2,tblptru
  5722  002080  0008               	tblrd		*
  5723  002082  50F5               	movf	tablat,w,c
  5724  002084  0900               	iorlw	0
  5725  002086  B4D8               	btfsc	status,2,c
  5726  002088  D011               	goto	l801
  5727                           
  5728                           ; BSR set to: 0
  5729                           ;diskio.c: 316: {
  5730                           ;diskio.c: 317: WriteSPI_(*wr);
  5731  00208A  C026  FFF6         	movff	disk_writep@wr,tblptrl
  5732  00208E  C027  FFF7         	movff	disk_writep@wr+1,tblptrh
  5733  002092  C028  FFF8         	movff	disk_writep@wr+2,tblptru
  5734  002096  0008               	tblrd		*
  5735  002098  50F5               	movf	tablat,w,c
  5736  00209A  ECB8  F018         	call	_WriteSPI_
  5737                           
  5738                           ;diskio.c: 318: wr++;
  5739  00209E  0E01               	movlw	1
  5740  0020A0  2626               	addwf	disk_writep@wr,f,c
  5741  0020A2  0E00               	movlw	0
  5742  0020A4  2227               	addwfc	disk_writep@wr+1,f,c
  5743  0020A6  0E00               	movlw	0
  5744  0020A8  2228               	addwfc	disk_writep@wr+2,f,c
  5745                           
  5746                           ;diskio.c: 319: }
  5747  0020AA  D003               	goto	l802
  5748  0020AC                     l801:
  5749                           
  5750                           ;diskio.c: 320: else
  5751                           ;diskio.c: 321: WriteSPI_(0x00);
  5752  0020AC  0E00               	movlw	0
  5753  0020AE  ECB8  F018         	call	_WriteSPI_
  5754  0020B2                     l802:
  5755  0020B2  0100               	movlb	0	; () banked
  5756  0020B4  4B66               	infsnz	disk_writep@j& (0+255),f,b
  5757  0020B6  2B67               	incf	(disk_writep@j+1)& (0+255),f,b
  5758  0020B8  D7D7               	goto	l6846
  5759  0020BA                     u7690:
  5760                           
  5761                           ; BSR set to: 0
  5762                           ;diskio.c: 322: }
  5763                           ;diskio.c: 323: WriteSPI_(0XFF);
  5764                           
  5765                           ; BSR set to: 0
  5766  0020BA  0EFF               	movlw	255
  5767  0020BC  ECB8  F018         	call	_WriteSPI_
  5768                           
  5769                           ;diskio.c: 324: WriteSPI_(0XFF);
  5770  0020C0  0EFF               	movlw	255
  5771  0020C2  ECB8  F018         	call	_WriteSPI_
  5772                           
  5773                           ;diskio.c: 326: proceed();
  5774  0020C6  EC59  F01A         	call	_proceed	;wreg free
  5775                           
  5776                           ;diskio.c: 328: _delay((unsigned long)((1000)*(48000000/4000.0)));
  5777  0020CA  0E3D               	movlw	61
  5778  0020CC  0100               	movlb	0	; () banked
  5779  0020CE  6F61               	movwf	(??_disk_writep+1)& (0+255),b
  5780  0020D0  0EE1               	movlw	225
  5781  0020D2  6F60               	movwf	??_disk_writep& (0+255),b
  5782  0020D4  0E3F               	movlw	63
  5783  0020D6                     u9207:
  5784  0020D6  2EE8               	decfsz	wreg,f,c
  5785  0020D8  D7FE               	bra	u9207
  5786  0020DA  2F60               	decfsz	??_disk_writep& (0+255),f,b
  5787  0020DC  D7FC               	bra	u9207
  5788  0020DE  2F61               	decfsz	(??_disk_writep+1)& (0+255),f,b
  5789  0020E0  D7FA               	bra	u9207
  5790  0020E2  D000               	nop2	
  5791                           
  5792                           ;diskio.c: 330: dummy_clocks(8);
  5793  0020E4  0E08               	movlw	8
  5794  0020E6  EC5A  F019         	call	_dummy_clocks
  5795                           
  5796                           ;diskio.c: 332: command(0X4D,0X00000000,0X00);
  5797  0020EA  0E00               	movlw	0
  5798  0020EC  6E1E               	movwf	command@arg,c
  5799  0020EE  0E00               	movlw	0
  5800  0020F0  6E1F               	movwf	command@arg+1,c
  5801  0020F2  0E00               	movlw	0
  5802  0020F4  6E20               	movwf	command@arg+2,c
  5803  0020F6  0E00               	movlw	0
  5804  0020F8  6E21               	movwf	command@arg+3,c
  5805  0020FA  0E00               	movlw	0
  5806  0020FC  6E22               	movwf	command@CRC,c
  5807  0020FE  0E4D               	movlw	77
  5808  002100  EC36  F018         	call	_command
  5809                           
  5810                           ;diskio.c: 333: proceed();
  5811  002104  EC59  F01A         	call	_proceed	;wreg free
  5812  002108                     
  5813                           ;diskio.c: 335: buff = response();
  5814  002108  EC4C  F01A         	call	_response	;wreg free
  5815  00210C  0100               	movlb	0	; () banked
  5816  00210E  6F68               	movwf	disk_writep@buff& (0+255),b
  5817                           
  5818                           ; BSR set to: 0
  5819                           ;diskio.c: 336: }while(buff!=0x00);
  5820  002110  5168               	movf	disk_writep@buff& (0+255),w,b
  5821  002112  A4D8               	btfss	status,2,c
  5822  002114  D7F9               	goto	l803
  5823                           
  5824                           ; BSR set to: 0
  5825                           ;diskio.c: 338: return RES_OK;
  5826                           
  5827                           ; BSR set to: 0
  5828  002116  0E00               	movlw	0
  5829  002118  0012               	return	
  5830  00211A                     __end_of_disk_writep:
  5831                           	opt stack 0
  5832                           tosu	equ	0xFFF
  5833                           tosh	equ	0xFFE
  5834                           tosl	equ	0xFFD
  5835                           pclath	equ	0xFFA
  5836                           tblptru	equ	0xFF8
  5837                           tblptrh	equ	0xFF7
  5838                           tblptrl	equ	0xFF6
  5839                           tablat	equ	0xFF5
  5840                           prodh	equ	0xFF4
  5841                           prodl	equ	0xFF3
  5842                           intcon	equ	0xFF2
  5843                           intcon2	equ	0xFF1
  5844                           intcon3	equ	0xFF0
  5845                           postinc0	equ	0xFEE
  5846                           wreg	equ	0xFE8
  5847                           postinc1	equ	0xFE6
  5848                           postdec1	equ	0xFE5
  5849                           fsr1h	equ	0xFE2
  5850                           fsr1l	equ	0xFE1
  5851                           indf2	equ	0xFDF
  5852                           postinc2	equ	0xFDE
  5853                           postdec2	equ	0xFDD
  5854                           plusw2	equ	0xFDB
  5855                           fsr2h	equ	0xFDA
  5856                           fsr2l	equ	0xFD9
  5857                           status	equ	0xFD8
  5858                           
  5859 ;; *************** function _pf_read *****************
  5860 ;; Defined at:
  5861 ;;		line 863 in file "pff.c"
  5862 ;; Parameters:    Size  Location     Type
  5863 ;;  buff            2   58[BANK0 ] PTR void 
  5864 ;;		 -> data_buffer_32(32), 
  5865 ;;  btr             2   60[BANK0 ] unsigned int 
  5866 ;;  br              2   62[BANK0 ] PTR unsigned int 
  5867 ;;		 -> SDCard@br(2), 
  5868 ;; Auto vars:     Size  Location     Type
  5869 ;;  clst            4   85[BANK0 ] unsigned long 
  5870 ;;  remain          4   81[BANK0 ] unsigned long 
  5871 ;;  sect            4   77[BANK0 ] unsigned long 
  5872 ;;  fs              2   92[BANK0 ] PTR struct .
  5873 ;;		 -> NULL(0), SDCard@fs(42), 
  5874 ;;  rcnt            2   90[BANK0 ] unsigned int 
  5875 ;;  rbuff           2   73[BANK0 ] PTR unsigned char 
  5876 ;;		 -> data_buffer_32(32), 
  5877 ;;  cs              1   89[BANK0 ] unsigned char 
  5878 ;;  dr              1   72[BANK0 ] enum E73
  5879 ;; Return value:  Size  Location     Type
  5880 ;;                  1    wreg      enum E3838
  5881 ;; Registers used:
  5882 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5883 ;; Tracked objects:
  5884 ;;		On entry : 0/0
  5885 ;;		On exit  : 0/0
  5886 ;;		Unchanged: 0/0
  5887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5888 ;;      Params:         0       6       0       0       0       0       0       0       0
  5889 ;;      Locals:         0      22       0       0       0       0       0       0       0
  5890 ;;      Temps:          0       8       0       0       0       0       0       0       0
  5891 ;;      Totals:         0      36       0       0       0       0       0       0       0
  5892 ;;Total ram usage:       36 bytes
  5893 ;; Hardware stack levels used:    1
  5894 ;; Hardware stack levels required when called:    7
  5895 ;; This function calls:
  5896 ;;		_clust2sect
  5897 ;;		_disk_readp
  5898 ;;		_get_fat
  5899 ;; This function is called by:
  5900 ;;		_SDCard
  5901 ;; This function uses a non-reentrant model
  5902 ;;
  5903                           
  5904                           	psect	text27
  5905  000EE8                     __ptext27:
  5906                           	opt stack 0
  5907  000EE8                     _pf_read:
  5908                           	opt stack 21
  5909                           
  5910                           ;pff.c: 869: DRESULT dr;
  5911                           ;pff.c: 870: DWORD clst;
  5912                           ;pff.c: 871: DWORD sect, remain;
  5913                           ;pff.c: 872: UINT rcnt;
  5914                           ;pff.c: 873: BYTE cs, *rbuff = buff;
  5915                           
  5916                           ; BSR set to: 0
  5917                           ;incstack = 0
  5918  000EE8  C09A  F0A9         	movff	pf_read@buff,pf_read@rbuff
  5919  000EEC  C09B  F0AA         	movff	pf_read@buff+1,pf_read@rbuff+1
  5920                           
  5921                           ;pff.c: 874: FATFS *fs = FatFs;
  5922  000EF0  C035  F0BC         	movff	_FatFs,pf_read@fs
  5923  000EF4  C036  F0BD         	movff	_FatFs+1,pf_read@fs+1
  5924                           
  5925                           ;pff.c: 877: *br = 0;
  5926  000EF8  C09E  FFD9         	movff	pf_read@br,fsr2l
  5927  000EFC  C09F  FFDA         	movff	pf_read@br+1,fsr2h
  5928  000F00  0E00               	movlw	0
  5929  000F02  6EDE               	movwf	postinc2,c
  5930  000F04  0E00               	movlw	0
  5931  000F06  6EDD               	movwf	postdec2,c
  5932                           
  5933                           ;pff.c: 878: if (!fs) return FR_NOT_ENABLED;
  5934  000F08  0100               	movlb	0	; () banked
  5935  000F0A  51BC               	movf	pf_read@fs& (0+255),w,b
  5936  000F0C  11BD               	iorwf	(pf_read@fs+1)& (0+255),w,b
  5937  000F0E  A4D8               	btfss	status,2,c
  5938  000F10  D002               	goto	l992
  5939                           
  5940                           ; BSR set to: 0
  5941  000F12  0E05               	movlw	5
  5942                           
  5943                           ; BSR set to: 0
  5944  000F14  0012               	return	
  5945  000F16                     l992:
  5946                           
  5947                           ; BSR set to: 0
  5948                           ;pff.c: 879: if (!(fs->flag & 0x01))
  5949                           
  5950                           ; BSR set to: 0
  5951  000F16  EE20 F001          	lfsr	2,1
  5952  000F1A  51BC               	movf	pf_read@fs& (0+255),w,b
  5953  000F1C  26D9               	addwf	fsr2l,f,c
  5954  000F1E  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5955  000F20  22DA               	addwfc	fsr2h,f,c
  5956  000F22  B0DF               	btfsc	indf2,0,c
  5957  000F24  D002               	goto	l994
  5958                           
  5959                           ; BSR set to: 0
  5960                           ;pff.c: 880: return FR_NOT_OPENED;
  5961  000F26  0E04               	movlw	4
  5962                           
  5963                           ; BSR set to: 0
  5964  000F28  0012               	return	
  5965  000F2A                     l994:
  5966                           
  5967                           ; BSR set to: 0
  5968                           ;pff.c: 882: remain = fs->fsize - fs->fptr;
  5969                           
  5970                           ; BSR set to: 0
  5971  000F2A  EE20 F01A          	lfsr	2,26
  5972  000F2E  51BC               	movf	pf_read@fs& (0+255),w,b
  5973  000F30  26D9               	addwf	fsr2l,f,c
  5974  000F32  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5975  000F34  22DA               	addwfc	fsr2h,f,c
  5976  000F36  CFDE F0A0          	movff	postinc2,??_pf_read
  5977  000F3A  CFDE F0A1          	movff	postinc2,??_pf_read+1
  5978  000F3E  CFDE F0A2          	movff	postinc2,??_pf_read+2
  5979  000F42  CFDE F0A3          	movff	postinc2,??_pf_read+3
  5980  000F46  EE20 F016          	lfsr	2,22
  5981  000F4A  51BC               	movf	pf_read@fs& (0+255),w,b
  5982  000F4C  26D9               	addwf	fsr2l,f,c
  5983  000F4E  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5984  000F50  22DA               	addwfc	fsr2h,f,c
  5985  000F52  CFDE F0A4          	movff	postinc2,??_pf_read+4
  5986  000F56  CFDE F0A5          	movff	postinc2,??_pf_read+5
  5987  000F5A  CFDE F0A6          	movff	postinc2,??_pf_read+6
  5988  000F5E  CFDE F0A7          	movff	postinc2,??_pf_read+7
  5989  000F62  1FA4               	comf	(??_pf_read+4)& (0+255),f,b
  5990  000F64  1FA5               	comf	(??_pf_read+5)& (0+255),f,b
  5991  000F66  1FA6               	comf	(??_pf_read+6)& (0+255),f,b
  5992  000F68  1FA7               	comf	(??_pf_read+7)& (0+255),f,b
  5993  000F6A  2BA4               	incf	(??_pf_read+4)& (0+255),f,b
  5994  000F6C  0E00               	movlw	0
  5995  000F6E  23A5               	addwfc	(??_pf_read+5)& (0+255),f,b
  5996  000F70  23A6               	addwfc	(??_pf_read+6)& (0+255),f,b
  5997  000F72  23A7               	addwfc	(??_pf_read+7)& (0+255),f,b
  5998  000F74  51A0               	movf	??_pf_read& (0+255),w,b
  5999  000F76  25A4               	addwf	(??_pf_read+4)& (0+255),w,b
  6000  000F78  6FB1               	movwf	pf_read@remain& (0+255),b
  6001  000F7A  51A1               	movf	(??_pf_read+1)& (0+255),w,b
  6002  000F7C  21A5               	addwfc	(??_pf_read+5)& (0+255),w,b
  6003  000F7E  6FB2               	movwf	(pf_read@remain+1)& (0+255),b
  6004  000F80  51A2               	movf	(??_pf_read+2)& (0+255),w,b
  6005  000F82  21A6               	addwfc	(??_pf_read+6)& (0+255),w,b
  6006  000F84  6FB3               	movwf	(pf_read@remain+2)& (0+255),b
  6007  000F86  51A3               	movf	(??_pf_read+3)& (0+255),w,b
  6008  000F88  21A7               	addwfc	(??_pf_read+7)& (0+255),w,b
  6009  000F8A  6FB4               	movwf	(pf_read@remain+3)& (0+255),b
  6010                           
  6011                           ; BSR set to: 0
  6012                           ;pff.c: 883: if (btr > remain) btr = (UINT)remain;
  6013  000F8C  519C               	movf	pf_read@btr& (0+255),w,b
  6014  000F8E  6FA0               	movwf	??_pf_read& (0+255),b
  6015  000F90  519D               	movf	(pf_read@btr+1)& (0+255),w,b
  6016  000F92  6FA1               	movwf	(??_pf_read+1)& (0+255),b
  6017  000F94  6BA2               	clrf	(??_pf_read+2)& (0+255),b
  6018  000F96  6BA3               	clrf	(??_pf_read+3)& (0+255),b
  6019  000F98  51A0               	movf	??_pf_read& (0+255),w,b
  6020  000F9A  5DB1               	subwf	pf_read@remain& (0+255),w,b
  6021  000F9C  51A1               	movf	(??_pf_read+1)& (0+255),w,b
  6022  000F9E  59B2               	subwfb	(pf_read@remain+1)& (0+255),w,b
  6023  000FA0  51A2               	movf	(??_pf_read+2)& (0+255),w,b
  6024  000FA2  59B3               	subwfb	(pf_read@remain+2)& (0+255),w,b
  6025  000FA4  51A3               	movf	(??_pf_read+3)& (0+255),w,b
  6026  000FA6  59B4               	subwfb	(pf_read@remain+3)& (0+255),w,b
  6027  000FA8  B0D8               	btfsc	status,0,c
  6028  000FAA  D160               	goto	l996
  6029                           
  6030                           ; BSR set to: 0
  6031  000FAC  C0B1  F09C         	movff	pf_read@remain,pf_read@btr
  6032  000FB0  C0B2  F09D         	movff	pf_read@remain+1,pf_read@btr+1
  6033                           
  6034                           ; BSR set to: 0
  6035                           ;pff.c: 885: while (btr) {
  6036  000FB4  D15B               	goto	l996
  6037  000FB6                     
  6038                           ; BSR set to: 0
  6039                           ;pff.c: 886: if ((fs->fptr % 512) == 0) {
  6040                           
  6041                           ; BSR set to: 0
  6042  000FB6  EE20 F016          	lfsr	2,22
  6043  000FBA  51BC               	movf	pf_read@fs& (0+255),w,b
  6044  000FBC  26D9               	addwf	fsr2l,f,c
  6045  000FBE  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  6046  000FC0  22DA               	addwfc	fsr2h,f,c
  6047  000FC2  0EFF               	movlw	255
  6048  000FC4  14DE               	andwf	postinc2,w,c
  6049  000FC6  6FA0               	movwf	??_pf_read& (0+255),b
  6050  000FC8  0E01               	movlw	1
  6051  000FCA  14DE               	andwf	postinc2,w,c
  6052  000FCC  6FA1               	movwf	(??_pf_read+1)& (0+255),b
  6053  000FCE  0E00               	movlw	0
  6054  000FD0  14DE               	andwf	postinc2,w,c
  6055  000FD2  6FA2               	movwf	(??_pf_read+2)& (0+255),b
  6056  000FD4  0E00               	movlw	0
  6057  000FD6  14DE               	andwf	postinc2,w,c
  6058  000FD8  6FA3               	movwf	(??_pf_read+3)& (0+255),b
  6059  000FDA  51A0               	movf	??_pf_read& (0+255),w,b
  6060  000FDC  11A1               	iorwf	(??_pf_read+1)& (0+255),w,b
  6061  000FDE  11A2               	iorwf	(??_pf_read+2)& (0+255),w,b
  6062  000FE0  11A3               	iorwf	(??_pf_read+3)& (0+255),w,b
  6063  000FE2  A4D8               	btfss	status,2,c
  6064  000FE4  D0BC               	goto	l998
  6065                           
  6066                           ; BSR set to: 0
  6067                           ;pff.c: 887: cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));
  6068  000FE6  EE20 F016          	lfsr	2,22
  6069  000FEA  51BC               	movf	pf_read@fs& (0+255),w,b
  6070  000FEC  26D9               	addwf	fsr2l,f,c
  6071  000FEE  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  6072  000FF0  22DA               	addwfc	fsr2h,f,c
  6073  000FF2  CFDE F0A0          	movff	postinc2,??_pf_read
  6074  000FF6  CFDE F0A1          	movff	postinc2,??_pf_read+1
  6075  000FFA  CFDE F0A2          	movff	postinc2,??_pf_read+2
  6076  000FFE  CFDE F0A3          	movff	postinc2,??_pf_read+3
  6077  001002  0E0A               	movlw	10
  6078  001004  D005               	goto	u8310
  6079  001006                     u8315:
  6080  001006  90D8               	bcf	status,0,c
  6081  001008  33A3               	rrcf	(??_pf_read+3)& (0+255),f,b
  6082  00100A  33A2               	rrcf	(??_pf_read+2)& (0+255),f,b
  6083  00100C  33A1               	rrcf	(??_pf_read+1)& (0+255),f,b
  6084  00100E  33A0               	rrcf	??_pf_read& (0+255),f,b
  6085  001010                     u8310:
  6086  001010  2EE8               	decfsz	wreg,f,c
  6087  001012  D7F9               	goto	u8315
  6088  001014  EE20 F002          	lfsr	2,2
  6089  001018  51BC               	movf	pf_read@fs& (0+255),w,b
  6090  00101A  26D9               	addwf	fsr2l,f,c
  6091  00101C  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  6092  00101E  22DA               	addwfc	fsr2h,f,c
  6093  001020  50DF               	movf	indf2,w,c
  6094  001022  6FA4               	movwf	(??_pf_read+4)& (0+255),b
  6095  001024  05A4               	decf	(??_pf_read+4)& (0+255),w,b
  6096  001026  15A0               	andwf	??_pf_read& (0+255),w,b
  6097  001028  6FB9               	movwf	pf_read@cs& (0+255),b
  6098                           
  6099                           ; BSR set to: 0
  6100                           ;pff.c: 888: if (!cs) {
  6101  00102A  51B9               	movf	pf_read@cs& (0+255),w,b
  6102  00102C  A4D8               	btfss	status,2,c
  6103  00102E  D054               	goto	l999
  6104                           
  6105                           ; BSR set to: 0
  6106                           ;pff.c: 889: if (fs->fptr == 0)
  6107  001030  EE20 F016          	lfsr	2,22
  6108  001034  51BC               	movf	pf_read@fs& (0+255),w,b
  6109  001036  26D9               	addwf	fsr2l,f,c
  6110  001038  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  6111  00103A  22DA               	addwfc	fsr2h,f,c
  6112  00103C  50DE               	movf	postinc2,w,c
  6113  00103E  10DE               	iorwf	postinc2,w,c
  6114  001040  10DE               	iorwf	postinc2,w,c
  6115  001042  10DE               	iorwf	postinc2,w,c
  6116  001044  A4D8               	btfss	status,2,c
  6117  001046  D00F               	goto	l1000
  6118                           
  6119                           ; BSR set to: 0
  6120                           ;pff.c: 890: clst = fs->org_clust;
  6121  001048  EE20 F01E          	lfsr	2,30
  6122  00104C  51BC               	movf	pf_read@fs& (0+255),w,b
  6123  00104E  26D9               	addwf	fsr2l,f,c
  6124  001050  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  6125  001052  22DA               	addwfc	fsr2h,f,c
  6126  001054  CFDE F0B5          	movff	postinc2,pf_read@clst
  6127  001058  CFDE F0B6          	movff	postinc2,pf_read@clst+1
  6128  00105C  CFDE F0B7          	movff	postinc2,pf_read@clst+2
  6129  001060  CFDE F0B8          	movff	postinc2,pf_read@clst+3
  6130  001064  D018               	goto	l1001
  6131  001066                     l1000:
  6132                           
  6133                           ; BSR set to: 0
  6134                           ;pff.c: 891: else
  6135                           ;pff.c: 892: clst = get_fat(fs->curr_clust);
  6136                           
  6137                           ; BSR set to: 0
  6138  001066  EE20 F022          	lfsr	2,34
  6139  00106A  51BC               	movf	pf_read@fs& (0+255),w,b
  6140  00106C  26D9               	addwf	fsr2l,f,c
  6141  00106E  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  6142  001070  22DA               	addwfc	fsr2h,f,c
  6143  001072  CFDE F072          	movff	postinc2,get_fat@clst
  6144  001076  CFDE F073          	movff	postinc2,get_fat@clst+1
  6145  00107A  CFDE F074          	movff	postinc2,get_fat@clst+2
  6146  00107E  CFDE F075          	movff	postinc2,get_fat@clst+3
  6147  001082  EC82  F005         	call	_get_fat	;wreg free
  6148  001086  C072  F0B5         	movff	?_get_fat,pf_read@clst
  6149  00108A  C073  F0B6         	movff	?_get_fat+1,pf_read@clst+1
  6150  00108E  C074  F0B7         	movff	?_get_fat+2,pf_read@clst+2
  6151  001092  C075  F0B8         	movff	?_get_fat+3,pf_read@clst+3
  6152  001096                     l1001:
  6153                           
  6154                           ;pff.c: 893: if (clst <= 1) {fs->flag = 0; return FR_DISK_ERR;};
  6155  001096  0100               	movlb	0	; () banked
  6156  001098  51B8               	movf	(pf_read@clst+3)& (0+255),w,b
  6157  00109A  11B7               	iorwf	(pf_read@clst+2)& (0+255),w,b
  6158  00109C  11B6               	iorwf	(pf_read@clst+1)& (0+255),w,b
  6159  00109E  E10E               	bnz	l7284
  6160  0010A0  0E02               	movlw	2
  6161  0010A2  5DB5               	subwf	pf_read@clst& (0+255),w,b
  6162  0010A4  B0D8               	btfsc	status,0,c
  6163  0010A6  D00A               	goto	l1002
  6164                           
  6165                           ; BSR set to: 0
  6166  0010A8  EE20 F001          	lfsr	2,1
  6167  0010AC  51BC               	movf	pf_read@fs& (0+255),w,b
  6168  0010AE  26D9               	addwf	fsr2l,f,c
  6169  0010B0  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  6170  0010B2  22DA               	addwfc	fsr2h,f,c
  6171  0010B4  0E00               	movlw	0
  6172  0010B6  6EDF               	movwf	indf2,c
  6173                           
  6174                           ; BSR set to: 0
  6175  0010B8  0E01               	movlw	1
  6176                           
  6177                           ; BSR set to: 0
  6178  0010BA  0012               	return	
  6179  0010BC                     l1002:
  6180  0010BC                     l7284:
  6181                           
  6182                           ; BSR set to: 0
  6183                           ;pff.c: 894: fs->curr_clust = clst;
  6184  0010BC  EE20 F022          	lfsr	2,34
  6185  0010C0  51BC               	movf	pf_read@fs& (0+255),w,b
  6186  0010C2  26D9               	addwf	fsr2l,f,c
  6187  0010C4  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  6188  0010C6  22DA               	addwfc	fsr2h,f,c
  6189  0010C8  C0B5  FFDE         	movff	pf_read@clst,postinc2
  6190  0010CC  C0B6  FFDE         	movff	pf_read@clst+1,postinc2
  6191  0010D0  C0B7  FFDE         	movff	pf_read@clst+2,postinc2
  6192  0010D4  C0B8  FFDE         	movff	pf_read@clst+3,postinc2
  6193  0010D8                     l999:
  6194                           
  6195                           ; BSR set to: 0
  6196                           ;pff.c: 895: }
  6197                           ;pff.c: 896: sect = clust2sect(fs->curr_clust);
  6198                           
  6199                           ; BSR set to: 0
  6200  0010D8  EE20 F022          	lfsr	2,34
  6201  0010DC  51BC               	movf	pf_read@fs& (0+255),w,b
  6202  0010DE  26D9               	addwf	fsr2l,f,c
  6203  0010E0  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  6204  0010E2  22DA               	addwfc	fsr2h,f,c
  6205  0010E4  CFDE F026          	movff	postinc2,clust2sect@clst
  6206  0010E8  CFDE F027          	movff	postinc2,clust2sect@clst+1
  6207  0010EC  CFDE F028          	movff	postinc2,clust2sect@clst+2
  6208  0010F0  CFDE F029          	movff	postinc2,clust2sect@clst+3
  6209  0010F4  ECB3  F014         	call	_clust2sect	;wreg free
  6210  0010F8  C026  F0AD         	movff	?_clust2sect,pf_read@sect
  6211  0010FC  C027  F0AE         	movff	?_clust2sect+1,pf_read@sect+1
  6212  001100  C028  F0AF         	movff	?_clust2sect+2,pf_read@sect+2
  6213  001104  C029  F0B0         	movff	?_clust2sect+3,pf_read@sect+3
  6214                           
  6215                           ;pff.c: 897: if (!sect) {fs->flag = 0; return FR_DISK_ERR;};
  6216  001108  0100               	movlb	0	; () banked
  6217  00110A  51AD               	movf	pf_read@sect& (0+255),w,b
  6218  00110C  11AE               	iorwf	(pf_read@sect+1)& (0+255),w,b
  6219  00110E  11AF               	iorwf	(pf_read@sect+2)& (0+255),w,b
  6220  001110  11B0               	iorwf	(pf_read@sect+3)& (0+255),w,b
  6221  001112  A4D8               	btfss	status,2,c
  6222  001114  D00A               	goto	l1003
  6223                           
  6224                           ; BSR set to: 0
  6225  001116  EE20 F001          	lfsr	2,1
  6226  00111A  51BC               	movf	pf_read@fs& (0+255),w,b
  6227  00111C  26D9               	addwf	fsr2l,f,c
  6228  00111E  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  6229  001120  22DA               	addwfc	fsr2h,f,c
  6230  001122  0E00               	movlw	0
  6231  001124  6EDF               	movwf	indf2,c
  6232                           
  6233                           ; BSR set to: 0
  6234  001126  0E01               	movlw	1
  6235                           
  6236                           ; BSR set to: 0
  6237  001128  0012               	return	
  6238  00112A                     l1003:
  6239                           
  6240                           ; BSR set to: 0
  6241                           ;pff.c: 898: fs->dsect = sect + cs;
  6242                           
  6243                           ; BSR set to: 0
  6244  00112A  51B9               	movf	pf_read@cs& (0+255),w,b
  6245  00112C  25AD               	addwf	pf_read@sect& (0+255),w,b
  6246  00112E  6FA0               	movwf	??_pf_read& (0+255),b
  6247  001130  0E00               	movlw	0
  6248  001132  21AE               	addwfc	(pf_read@sect+1)& (0+255),w,b
  6249  001134  6FA1               	movwf	(??_pf_read+1)& (0+255),b
  6250  001136  0E00               	movlw	0
  6251  001138  21AF               	addwfc	(pf_read@sect+2)& (0+255),w,b
  6252  00113A  6FA2               	movwf	(??_pf_read+2)& (0+255),b
  6253  00113C  0E00               	movlw	0
  6254  00113E  21B0               	addwfc	(pf_read@sect+3)& (0+255),w,b
  6255  001140  6FA3               	movwf	(??_pf_read+3)& (0+255),b
  6256  001142  EE20 F026          	lfsr	2,38
  6257  001146  51BC               	movf	pf_read@fs& (0+255),w,b
  6258  001148  26D9               	addwf	fsr2l,f,c
  6259  00114A  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  6260  00114C  22DA               	addwfc	fsr2h,f,c
  6261  00114E  C0A0  FFDE         	movff	??_pf_read,postinc2
  6262  001152  C0A1  FFDE         	movff	??_pf_read+1,postinc2
  6263  001156  C0A2  FFDE         	movff	??_pf_read+2,postinc2
  6264  00115A  C0A3  FFDE         	movff	??_pf_read+3,postinc2
  6265  00115E                     l998:
  6266                           
  6267                           ; BSR set to: 0
  6268                           ;pff.c: 899: }
  6269                           ;pff.c: 900: rcnt = 512 - (UINT)fs->fptr % 512;
  6270  00115E  0EFF               	movlw	255
  6271  001160  6FA0               	movwf	??_pf_read& (0+255),b
  6272  001162  0E01               	movlw	1
  6273  001164  6FA1               	movwf	(??_pf_read+1)& (0+255),b
  6274  001166  EE20 F016          	lfsr	2,22
  6275  00116A  51BC               	movf	pf_read@fs& (0+255),w,b
  6276  00116C  26D9               	addwf	fsr2l,f,c
  6277  00116E  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  6278  001170  22DA               	addwfc	fsr2h,f,c
  6279  001172  CFDE F0A2          	movff	postinc2,??_pf_read+2
  6280  001176  CFDD F0A3          	movff	postdec2,??_pf_read+3
  6281  00117A  51A0               	movf	??_pf_read& (0+255),w,b
  6282  00117C  17A2               	andwf	(??_pf_read+2)& (0+255),f,b
  6283  00117E  51A1               	movf	(??_pf_read+1)& (0+255),w,b
  6284  001180  17A3               	andwf	(??_pf_read+3)& (0+255),f,b
  6285  001182  1FA2               	comf	(??_pf_read+2)& (0+255),f,b
  6286  001184  1FA3               	comf	(??_pf_read+3)& (0+255),f,b
  6287  001186  4BA2               	infsnz	(??_pf_read+2)& (0+255),f,b
  6288  001188  2BA3               	incf	(??_pf_read+3)& (0+255),f,b
  6289  00118A  0E00               	movlw	0
  6290  00118C  25A2               	addwf	(??_pf_read+2)& (0+255),w,b
  6291  00118E  6FBA               	movwf	pf_read@rcnt& (0+255),b
  6292  001190  0E02               	movlw	2
  6293  001192  21A3               	addwfc	(??_pf_read+3)& (0+255),w,b
  6294  001194  6FBB               	movwf	(pf_read@rcnt+1)& (0+255),b
  6295                           
  6296                           ; BSR set to: 0
  6297                           ;pff.c: 901: if (rcnt > btr) rcnt = btr;
  6298  001196  51BA               	movf	pf_read@rcnt& (0+255),w,b
  6299  001198  5D9C               	subwf	pf_read@btr& (0+255),w,b
  6300  00119A  51BB               	movf	(pf_read@rcnt+1)& (0+255),w,b
  6301  00119C  599D               	subwfb	(pf_read@btr+1)& (0+255),w,b
  6302  00119E  B0D8               	btfsc	status,0,c
  6303  0011A0  D004               	goto	l1004
  6304                           
  6305                           ; BSR set to: 0
  6306  0011A2  C09C  F0BA         	movff	pf_read@btr,pf_read@rcnt
  6307  0011A6  C09D  F0BB         	movff	pf_read@btr+1,pf_read@rcnt+1
  6308  0011AA                     l1004:
  6309                           
  6310                           ; BSR set to: 0
  6311                           ;pff.c: 902: dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (UINT)fs->fptr % 512, rcnt);
  6312                           
  6313                           ; BSR set to: 0
  6314  0011AA  519A               	movf	pf_read@buff& (0+255),w,b
  6315  0011AC  119B               	iorwf	(pf_read@buff+1)& (0+255),w,b
  6316  0011AE  B4D8               	btfsc	status,2,c
  6317  0011B0  D005               	goto	l1006
  6318                           
  6319                           ; BSR set to: 0
  6320  0011B2  C0A9  F0AB         	movff	pf_read@rbuff,_pf_read$2079
  6321  0011B6  C0AA  F0AC         	movff	pf_read@rbuff+1,_pf_read$2079+1
  6322  0011BA  D004               	goto	l1008
  6323  0011BC                     l1006:
  6324                           
  6325                           ; BSR set to: 0
  6326                           
  6327                           ; BSR set to: 0
  6328  0011BC  0E00               	movlw	0
  6329  0011BE  6FAB               	movwf	_pf_read$2079& (0+255),b
  6330  0011C0  0E00               	movlw	0
  6331  0011C2  6FAC               	movwf	(_pf_read$2079+1)& (0+255),b
  6332  0011C4                     l1008:
  6333                           
  6334                           ; BSR set to: 0
  6335                           
  6336                           ; BSR set to: 0
  6337  0011C4  C0AB  F060         	movff	_pf_read$2079,disk_readp@rd
  6338  0011C8  C0AC  F061         	movff	_pf_read$2079+1,disk_readp@rd+1
  6339  0011CC  EE20 F026          	lfsr	2,38
  6340  0011D0  51BC               	movf	pf_read@fs& (0+255),w,b
  6341  0011D2  26D9               	addwf	fsr2l,f,c
  6342  0011D4  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  6343  0011D6  22DA               	addwfc	fsr2h,f,c
  6344  0011D8  CFDE F062          	movff	postinc2,disk_readp@sector
  6345  0011DC  CFDE F063          	movff	postinc2,disk_readp@sector+1
  6346  0011E0  CFDE F064          	movff	postinc2,disk_readp@sector+2
  6347  0011E4  CFDE F065          	movff	postinc2,disk_readp@sector+3
  6348  0011E8  EE20 F016          	lfsr	2,22
  6349  0011EC  51BC               	movf	pf_read@fs& (0+255),w,b
  6350  0011EE  26D9               	addwf	fsr2l,f,c
  6351  0011F0  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  6352  0011F2  22DA               	addwfc	fsr2h,f,c
  6353  0011F4  CFDE F0A0          	movff	postinc2,??_pf_read
  6354  0011F8  CFDD F0A1          	movff	postdec2,??_pf_read+1
  6355  0011FC  0EFF               	movlw	255
  6356  0011FE  15A0               	andwf	??_pf_read& (0+255),w,b
  6357  001200  6F66               	movwf	disk_readp@offset& (0+255),b
  6358  001202  0E01               	movlw	1
  6359  001204  15A1               	andwf	(??_pf_read+1)& (0+255),w,b
  6360  001206  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
  6361  001208  C0BA  F068         	movff	pf_read@rcnt,disk_readp@count
  6362  00120C  C0BB  F069         	movff	pf_read@rcnt+1,disk_readp@count+1
  6363  001210  EC3C  F009         	call	_disk_readp	;wreg free
  6364  001214  0100               	movlb	0	; () banked
  6365  001216  6FA8               	movwf	pf_read@dr& (0+255),b
  6366                           
  6367                           ; BSR set to: 0
  6368                           ;pff.c: 903: if (dr) {fs->flag = 0; return FR_DISK_ERR;};
  6369  001218  51A8               	movf	pf_read@dr& (0+255),w,b
  6370  00121A  B4D8               	btfsc	status,2,c
  6371  00121C  D00A               	goto	l1009
  6372                           
  6373                           ; BSR set to: 0
  6374  00121E  EE20 F001          	lfsr	2,1
  6375  001222  51BC               	movf	pf_read@fs& (0+255),w,b
  6376  001224  26D9               	addwf	fsr2l,f,c
  6377  001226  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  6378  001228  22DA               	addwfc	fsr2h,f,c
  6379  00122A  0E00               	movlw	0
  6380  00122C  6EDF               	movwf	indf2,c
  6381                           
  6382                           ; BSR set to: 0
  6383  00122E  0E01               	movlw	1
  6384                           
  6385                           ; BSR set to: 0
  6386  001230  0012               	return	
  6387  001232                     l1009:
  6388                           
  6389                           ; BSR set to: 0
  6390                           ;pff.c: 904: fs->fptr += rcnt; rbuff += rcnt;
  6391                           
  6392                           ; BSR set to: 0
  6393  001232  EE20 F016          	lfsr	2,22
  6394  001236  51BC               	movf	pf_read@fs& (0+255),w,b
  6395  001238  26D9               	addwf	fsr2l,f,c
  6396  00123A  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  6397  00123C  22DA               	addwfc	fsr2h,f,c
  6398  00123E  51BA               	movf	pf_read@rcnt& (0+255),w,b
  6399  001240  26DE               	addwf	postinc2,f,c
  6400  001242  51BB               	movf	(pf_read@rcnt+1)& (0+255),w,b
  6401  001244  22DE               	addwfc	postinc2,f,c
  6402  001246  0E00               	movlw	0
  6403  001248  22DE               	addwfc	postinc2,f,c
  6404  00124A  22DE               	addwfc	postinc2,f,c
  6405                           
  6406                           ; BSR set to: 0
  6407  00124C  51BA               	movf	pf_read@rcnt& (0+255),w,b
  6408  00124E  27A9               	addwf	pf_read@rbuff& (0+255),f,b
  6409  001250  51BB               	movf	(pf_read@rcnt+1)& (0+255),w,b
  6410  001252  23AA               	addwfc	(pf_read@rbuff+1)& (0+255),f,b
  6411                           
  6412                           ; BSR set to: 0
  6413                           ;pff.c: 905: btr -= rcnt; *br += rcnt;
  6414  001254  51BA               	movf	pf_read@rcnt& (0+255),w,b
  6415  001256  5F9C               	subwf	pf_read@btr& (0+255),f,b
  6416  001258  51BB               	movf	(pf_read@rcnt+1)& (0+255),w,b
  6417  00125A  5B9D               	subwfb	(pf_read@btr+1)& (0+255),f,b
  6418                           
  6419                           ; BSR set to: 0
  6420  00125C  C09E  FFD9         	movff	pf_read@br,fsr2l
  6421  001260  C09F  FFDA         	movff	pf_read@br+1,fsr2h
  6422  001264  51BA               	movf	pf_read@rcnt& (0+255),w,b
  6423  001266  26DE               	addwf	postinc2,f,c
  6424  001268  51BB               	movf	(pf_read@rcnt+1)& (0+255),w,b
  6425  00126A  22DD               	addwfc	postdec2,f,c
  6426  00126C                     l996:
  6427                           
  6428                           ; BSR set to: 0
  6429                           
  6430                           ; BSR set to: 0
  6431  00126C  519C               	movf	pf_read@btr& (0+255),w,b
  6432  00126E  119D               	iorwf	(pf_read@btr+1)& (0+255),w,b
  6433  001270  A4D8               	btfss	status,2,c
  6434  001272  D6A1               	goto	l997
  6435                           
  6436                           ; BSR set to: 0
  6437                           ;pff.c: 906: }
  6438                           ;pff.c: 908: return FR_OK;
  6439                           
  6440                           ; BSR set to: 0
  6441  001274  0E00               	movlw	0
  6442  001276  0012               	return	
  6443  001278                     __end_of_pf_read:
  6444                           	opt stack 0
  6445                           tosu	equ	0xFFF
  6446                           tosh	equ	0xFFE
  6447                           tosl	equ	0xFFD
  6448                           pclath	equ	0xFFA
  6449                           tblptru	equ	0xFF8
  6450                           tblptrh	equ	0xFF7
  6451                           tblptrl	equ	0xFF6
  6452                           tablat	equ	0xFF5
  6453                           prodh	equ	0xFF4
  6454                           prodl	equ	0xFF3
  6455                           intcon	equ	0xFF2
  6456                           intcon2	equ	0xFF1
  6457                           intcon3	equ	0xFF0
  6458                           postinc0	equ	0xFEE
  6459                           wreg	equ	0xFE8
  6460                           postinc1	equ	0xFE6
  6461                           postdec1	equ	0xFE5
  6462                           fsr1h	equ	0xFE2
  6463                           fsr1l	equ	0xFE1
  6464                           indf2	equ	0xFDF
  6465                           postinc2	equ	0xFDE
  6466                           postdec2	equ	0xFDD
  6467                           plusw2	equ	0xFDB
  6468                           fsr2h	equ	0xFDA
  6469                           fsr2l	equ	0xFD9
  6470                           status	equ	0xFD8
  6471                           
  6472 ;; *************** function _pf_open *****************
  6473 ;; Defined at:
  6474 ;;		line 829 in file "pff.c"
  6475 ;; Parameters:    Size  Location     Type
  6476 ;;  path            2   90[BANK0 ] PTR const unsigned char 
  6477 ;;		 -> STR_6(10), 
  6478 ;; Auto vars:     Size  Location     Type
  6479 ;;  dir            32   12[BANK1 ] unsigned char [32]
  6480 ;;  dj             16   47[BANK1 ] struct .
  6481 ;;  sp             12    0[BANK1 ] unsigned char [12]
  6482 ;;  fs              2   45[BANK1 ] PTR struct .
  6483 ;;		 -> NULL(0), SDCard@fs(42), 
  6484 ;;  res             1   44[BANK1 ] enum E43
  6485 ;; Return value:  Size  Location     Type
  6486 ;;                  1    wreg      enum E3838
  6487 ;; Registers used:
  6488 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6489 ;; Tracked objects:
  6490 ;;		On entry : 0/0
  6491 ;;		On exit  : 0/0
  6492 ;;		Unchanged: 0/0
  6493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6494 ;;      Params:         0       2       0       0       0       0       0       0       0
  6495 ;;      Locals:         0       0      63       0       0       0       0       0       0
  6496 ;;      Temps:          0      22       0       0       0       0       0       0       0
  6497 ;;      Totals:         0      24      63       0       0       0       0       0       0
  6498 ;;Total ram usage:       87 bytes
  6499 ;; Hardware stack levels used:    1
  6500 ;; Hardware stack levels required when called:   10
  6501 ;; This function calls:
  6502 ;;		_follow_path
  6503 ;;		_get_clust
  6504 ;; This function is called by:
  6505 ;;		_SDCard
  6506 ;; This function uses a non-reentrant model
  6507 ;;
  6508                           
  6509                           	psect	text28
  6510  001D46                     __ptext28:
  6511                           	opt stack 0
  6512  001D46                     _pf_open:
  6513                           	opt stack 18
  6514                           
  6515                           ;pff.c: 833: FRESULT res;
  6516                           ;pff.c: 834: DIR_E dj;
  6517                           ;pff.c: 835: BYTE sp[12], dir[32];
  6518                           ;pff.c: 836: FATFS *fs = FatFs;
  6519                           
  6520                           ; BSR set to: 0
  6521                           ;incstack = 0
  6522  001D46  C035  F1BE         	movff	_FatFs,pf_open@fs
  6523  001D4A  C036  F1BF         	movff	_FatFs+1,pf_open@fs+1
  6524                           
  6525                           ;pff.c: 838: if (!fs) return FR_NOT_ENABLED;
  6526  001D4E  0101               	movlb	1	; () banked
  6527  001D50  51BE               	movf	pf_open@fs& (0+255),w,b
  6528  001D52  11BF               	iorwf	(pf_open@fs+1)& (0+255),w,b
  6529  001D54  A4D8               	btfss	status,2,c
  6530  001D56  D002               	goto	l984
  6531                           
  6532                           ; BSR set to: 1
  6533  001D58  0E05               	movlw	5
  6534                           
  6535                           ; BSR set to: 1
  6536  001D5A  0012               	return	
  6537  001D5C                     l984:
  6538                           
  6539                           ; BSR set to: 1
  6540                           ;pff.c: 840: fs->flag = 0;
  6541                           
  6542                           ; BSR set to: 1
  6543  001D5C  EE20 F001          	lfsr	2,1
  6544  001D60  51BE               	movf	pf_open@fs& (0+255),w,b
  6545  001D62  26D9               	addwf	fsr2l,f,c
  6546  001D64  51BF               	movf	(pf_open@fs+1)& (0+255),w,b
  6547  001D66  22DA               	addwfc	fsr2h,f,c
  6548  001D68  0E00               	movlw	0
  6549  001D6A  6EDF               	movwf	indf2,c
  6550                           
  6551                           ; BSR set to: 1
  6552                           ;pff.c: 841: dj.fn = sp;
  6553  001D6C  0E91               	movlw	low pf_open@sp
  6554  001D6E  6FC2               	movwf	(pf_open@dj+2)& (0+255),b
  6555  001D70  0E01               	movlw	high pf_open@sp
  6556  001D72  6FC3               	movwf	(pf_open@dj+3)& (0+255),b
  6557                           
  6558                           ; BSR set to: 1
  6559                           ;pff.c: 842: res = follow_path(&dj, dir, "check.txt" );
  6560  001D74  0EC0               	movlw	low pf_open@dj
  6561  001D76  0100               	movlb	0	; () banked
  6562  001D78  6FB3               	movwf	follow_path@dj& (0+255),b
  6563  001D7A  0E01               	movlw	high pf_open@dj
  6564  001D7C  6FB4               	movwf	(follow_path@dj+1)& (0+255),b
  6565  001D7E  0E9D               	movlw	low pf_open@dir
  6566  001D80  6FB5               	movwf	follow_path@dir& (0+255),b
  6567  001D82  0E01               	movlw	high pf_open@dir
  6568  001D84  6FB6               	movwf	(follow_path@dir+1)& (0+255),b
  6569  001D86  0E55               	movlw	low STR_6
  6570  001D88  6FB7               	movwf	follow_path@path& (0+255),b
  6571  001D8A  0E62               	movlw	high STR_6
  6572  001D8C  6FB8               	movwf	(follow_path@path+1)& (0+255),b
  6573  001D8E  ECDE  F012         	call	_follow_path	;wreg free
  6574  001D92  0101               	movlb	1	; () banked
  6575  001D94  6FBD               	movwf	pf_open@res& (0+255),b
  6576                           
  6577                           ; BSR set to: 1
  6578                           ;pff.c: 843: if (res != FR_OK) return res;
  6579  001D96  51BD               	movf	pf_open@res& (0+255),w,b
  6580  001D98  B4D8               	btfsc	status,2,c
  6581  001D9A  D002               	goto	l986
  6582                           
  6583                           ; BSR set to: 1
  6584  001D9C  51BD               	movf	pf_open@res& (0+255),w,b
  6585                           
  6586                           ; BSR set to: 1
  6587  001D9E  0012               	return	
  6588  001DA0                     l986:
  6589                           
  6590                           ; BSR set to: 1
  6591                           ;pff.c: 844: if (!dir[0] || (dir[11] & 0x10))
  6592                           
  6593                           ; BSR set to: 1
  6594  001DA0  519D               	movf	pf_open@dir& (0+255),w,b
  6595  001DA2  B4D8               	btfsc	status,2,c
  6596  001DA4  D002               	goto	u8070
  6597                           
  6598                           ; BSR set to: 1
  6599  001DA6  A9A8               	btfss	(pf_open@dir+11)& (0+255),4,b
  6600  001DA8  D002               	goto	l987
  6601  001DAA                     u8070:
  6602                           
  6603                           ; BSR set to: 1
  6604                           ;pff.c: 845: return FR_NO_FILE;
  6605                           
  6606                           ; BSR set to: 1
  6607  001DAA  0E03               	movlw	3
  6608                           
  6609                           ; BSR set to: 1
  6610  001DAC  0012               	return	
  6611  001DAE                     l987:
  6612                           
  6613                           ; BSR set to: 1
  6614                           ;pff.c: 847: fs->org_clust = get_clust(dir);
  6615                           
  6616                           ; BSR set to: 1
  6617  001DAE  0E9D               	movlw	low pf_open@dir
  6618  001DB0  6E1A               	movwf	get_clust@dir,c
  6619  001DB2  0E01               	movlw	high pf_open@dir
  6620  001DB4  6E1B               	movwf	get_clust@dir+1,c
  6621  001DB6  EC4F  F014         	call	_get_clust	;wreg free
  6622  001DBA  0101               	movlb	1	; () banked
  6623  001DBC  EE20 F01E          	lfsr	2,30
  6624  001DC0  51BE               	movf	pf_open@fs& (0+255),w,b
  6625  001DC2  26D9               	addwf	fsr2l,f,c
  6626  001DC4  51BF               	movf	(pf_open@fs+1)& (0+255),w,b
  6627  001DC6  22DA               	addwfc	fsr2h,f,c
  6628  001DC8  C01A  FFDE         	movff	?_get_clust,postinc2
  6629  001DCC  C01B  FFDE         	movff	?_get_clust+1,postinc2
  6630  001DD0  C01C  FFDE         	movff	?_get_clust+2,postinc2
  6631  001DD4  C01D  FFDE         	movff	?_get_clust+3,postinc2
  6632                           
  6633                           ; BSR set to: 1
  6634                           ;pff.c: 848: fs->fsize = (DWORD)(((DWORD)*((BYTE*)(dir+28)+3)<<24)|((DWORD)*((BYTE*)(dir
      +                          +28)+2)<<16)|((WORD)*((BYTE*)(dir+28)+1)<<8)|*(BYTE*)(dir+28));
  6635  001DD8  51BA               	movf	(pf_open@dir+29)& (0+255),w,b
  6636  001DDA  0100               	movlb	0	; () banked
  6637  001DDC  6FBD               	movwf	(??_pf_open+1)& (0+255),b
  6638  001DDE  6BBC               	clrf	??_pf_open& (0+255),b
  6639  001DE0  C1BB  F0BE         	movff	pf_open@dir+30,??_pf_open+2
  6640  001DE4  6BBF               	clrf	(??_pf_open+3)& (0+255),b
  6641  001DE6  6BC0               	clrf	(??_pf_open+4)& (0+255),b
  6642  001DE8  6BC1               	clrf	(??_pf_open+5)& (0+255),b
  6643  001DEA  C0BF  F0C1         	movff	??_pf_open+3,??_pf_open+5
  6644  001DEE  C0BE  F0C0         	movff	??_pf_open+2,??_pf_open+4
  6645  001DF2  6BBF               	clrf	(??_pf_open+3)& (0+255),b
  6646  001DF4  6BBE               	clrf	(??_pf_open+2)& (0+255),b
  6647  001DF6  C1BC  F0C2         	movff	pf_open@dir+31,??_pf_open+6
  6648  001DFA  6BC3               	clrf	(??_pf_open+7)& (0+255),b
  6649  001DFC  6BC4               	clrf	(??_pf_open+8)& (0+255),b
  6650  001DFE  6BC5               	clrf	(??_pf_open+9)& (0+255),b
  6651  001E00  C0C2  F0C5         	movff	??_pf_open+6,??_pf_open+9
  6652  001E04  6BC4               	clrf	(??_pf_open+8)& (0+255),b
  6653  001E06  6BC3               	clrf	(??_pf_open+7)& (0+255),b
  6654  001E08  6BC2               	clrf	(??_pf_open+6)& (0+255),b
  6655  001E0A  51BE               	movf	(??_pf_open+2)& (0+255),w,b
  6656  001E0C  11C2               	iorwf	(??_pf_open+6)& (0+255),w,b
  6657  001E0E  6FC6               	movwf	(??_pf_open+10)& (0+255),b
  6658  001E10  51BF               	movf	(??_pf_open+3)& (0+255),w,b
  6659  001E12  11C3               	iorwf	(??_pf_open+7)& (0+255),w,b
  6660  001E14  6FC7               	movwf	(??_pf_open+11)& (0+255),b
  6661  001E16  51C0               	movf	(??_pf_open+4)& (0+255),w,b
  6662  001E18  11C4               	iorwf	(??_pf_open+8)& (0+255),w,b
  6663  001E1A  6FC8               	movwf	(??_pf_open+12)& (0+255),b
  6664  001E1C  51C1               	movf	(??_pf_open+5)& (0+255),w,b
  6665  001E1E  11C5               	iorwf	(??_pf_open+9)& (0+255),w,b
  6666  001E20  6FC9               	movwf	(??_pf_open+13)& (0+255),b
  6667  001E22  51BC               	movf	??_pf_open& (0+255),w,b
  6668  001E24  11C6               	iorwf	(??_pf_open+10)& (0+255),w,b
  6669  001E26  6FCA               	movwf	(??_pf_open+14)& (0+255),b
  6670  001E28  51BD               	movf	(??_pf_open+1)& (0+255),w,b
  6671  001E2A  11C7               	iorwf	(??_pf_open+11)& (0+255),w,b
  6672  001E2C  6FCB               	movwf	(??_pf_open+15)& (0+255),b
  6673  001E2E  0E00               	movlw	0
  6674  001E30  11C8               	iorwf	(??_pf_open+12)& (0+255),w,b
  6675  001E32  6FCC               	movwf	(??_pf_open+16)& (0+255),b
  6676  001E34  0E00               	movlw	0
  6677  001E36  11C9               	iorwf	(??_pf_open+13)& (0+255),w,b
  6678  001E38  6FCD               	movwf	(??_pf_open+17)& (0+255),b
  6679  001E3A  0101               	movlb	1	; () banked
  6680  001E3C  51B9               	movf	(pf_open@dir+28)& (0+255),w,b
  6681  001E3E  0100               	movlb	0	; () banked
  6682  001E40  11CA               	iorwf	(??_pf_open+14)& (0+255),w,b
  6683  001E42  6FCE               	movwf	(??_pf_open+18)& (0+255),b
  6684  001E44  51CB               	movf	(??_pf_open+15)& (0+255),w,b
  6685  001E46  6FCF               	movwf	(??_pf_open+19)& (0+255),b
  6686  001E48  51CC               	movf	(??_pf_open+16)& (0+255),w,b
  6687  001E4A  6FD0               	movwf	(??_pf_open+20)& (0+255),b
  6688  001E4C  51CD               	movf	(??_pf_open+17)& (0+255),w,b
  6689  001E4E  6FD1               	movwf	(??_pf_open+21)& (0+255),b
  6690  001E50  0101               	movlb	1	; () banked
  6691  001E52  EE20 F01A          	lfsr	2,26
  6692  001E56  51BE               	movf	pf_open@fs& (0+255),w,b
  6693  001E58  26D9               	addwf	fsr2l,f,c
  6694  001E5A  51BF               	movf	(pf_open@fs+1)& (0+255),w,b
  6695  001E5C  22DA               	addwfc	fsr2h,f,c
  6696  001E5E  C0CE  FFDE         	movff	??_pf_open+18,postinc2
  6697  001E62  C0CF  FFDE         	movff	??_pf_open+19,postinc2
  6698  001E66  C0D0  FFDE         	movff	??_pf_open+20,postinc2
  6699  001E6A  C0D1  FFDE         	movff	??_pf_open+21,postinc2
  6700                           
  6701                           ; BSR set to: 1
  6702                           ;pff.c: 849: fs->fptr = 0;
  6703  001E6E  EE20 F016          	lfsr	2,22
  6704  001E72  51BE               	movf	pf_open@fs& (0+255),w,b
  6705  001E74  26D9               	addwf	fsr2l,f,c
  6706  001E76  51BF               	movf	(pf_open@fs+1)& (0+255),w,b
  6707  001E78  22DA               	addwfc	fsr2h,f,c
  6708  001E7A  6ADE               	clrf	postinc2,c
  6709  001E7C  6ADE               	clrf	postinc2,c
  6710  001E7E  6ADE               	clrf	postinc2,c
  6711  001E80  6ADD               	clrf	postdec2,c
  6712                           
  6713                           ; BSR set to: 1
  6714                           ;pff.c: 850: fs->flag = 0x01;
  6715  001E82  EE20 F001          	lfsr	2,1
  6716  001E86  51BE               	movf	pf_open@fs& (0+255),w,b
  6717  001E88  26D9               	addwf	fsr2l,f,c
  6718  001E8A  51BF               	movf	(pf_open@fs+1)& (0+255),w,b
  6719  001E8C  22DA               	addwfc	fsr2h,f,c
  6720  001E8E  0E01               	movlw	1
  6721  001E90  6EDF               	movwf	indf2,c
  6722                           
  6723                           ; BSR set to: 1
  6724                           ;pff.c: 852: return FR_OK;
  6725  001E92  0E00               	movlw	0
  6726  001E94  0012               	return	
  6727  001E96                     __end_of_pf_open:
  6728                           	opt stack 0
  6729                           tosu	equ	0xFFF
  6730                           tosh	equ	0xFFE
  6731                           tosl	equ	0xFFD
  6732                           pclath	equ	0xFFA
  6733                           tblptru	equ	0xFF8
  6734                           tblptrh	equ	0xFF7
  6735                           tblptrl	equ	0xFF6
  6736                           tablat	equ	0xFF5
  6737                           prodh	equ	0xFF4
  6738                           prodl	equ	0xFF3
  6739                           intcon	equ	0xFF2
  6740                           intcon2	equ	0xFF1
  6741                           intcon3	equ	0xFF0
  6742                           postinc0	equ	0xFEE
  6743                           wreg	equ	0xFE8
  6744                           postinc1	equ	0xFE6
  6745                           postdec1	equ	0xFE5
  6746                           fsr1h	equ	0xFE2
  6747                           fsr1l	equ	0xFE1
  6748                           indf2	equ	0xFDF
  6749                           postinc2	equ	0xFDE
  6750                           postdec2	equ	0xFDD
  6751                           plusw2	equ	0xFDB
  6752                           fsr2h	equ	0xFDA
  6753                           fsr2l	equ	0xFD9
  6754                           status	equ	0xFD8
  6755                           
  6756 ;; *************** function _follow_path *****************
  6757 ;; Defined at:
  6758 ;;		line 680 in file "pff.c"
  6759 ;; Parameters:    Size  Location     Type
  6760 ;;  dj              2   83[BANK0 ] PTR struct .
  6761 ;;		 -> pf_open@dj(16), 
  6762 ;;  dir             2   85[BANK0 ] PTR unsigned char 
  6763 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  6764 ;;  path            2   87[BANK0 ] PTR const unsigned char 
  6765 ;;		 -> STR_21(10), 
  6766 ;; Auto vars:     Size  Location     Type
  6767 ;;  res             1   89[BANK0 ] enum E43
  6768 ;; Return value:  Size  Location     Type
  6769 ;;                  1    wreg      enum E43
  6770 ;; Registers used:
  6771 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6772 ;; Tracked objects:
  6773 ;;		On entry : 0/0
  6774 ;;		On exit  : 0/0
  6775 ;;		Unchanged: 0/0
  6776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6777 ;;      Params:         0       6       0       0       0       0       0       0       0
  6778 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6779 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6780 ;;      Totals:         0       7       0       0       0       0       0       0       0
  6781 ;;Total ram usage:        7 bytes
  6782 ;; Hardware stack levels used:    1
  6783 ;; Hardware stack levels required when called:    9
  6784 ;; This function calls:
  6785 ;;		_create_name
  6786 ;;		_dir_find
  6787 ;;		_dir_rewind
  6788 ;;		_get_clust
  6789 ;; This function is called by:
  6790 ;;		_pf_open
  6791 ;;		_pf_opendir
  6792 ;; This function uses a non-reentrant model
  6793 ;;
  6794                           
  6795                           	psect	text29
  6796  0025BC                     __ptext29:
  6797                           	opt stack 0
  6798  0025BC                     _follow_path:
  6799                           	opt stack 18
  6800                           
  6801                           ;pff.c: 686: FRESULT res;
  6802                           ;pff.c: 689: while (*path == ' ') path++;
  6803                           
  6804                           ; BSR set to: 1
  6805                           ;incstack = 0
  6806  0025BC  D003               	goto	l941
  6807  0025BE  0100               	movlb	0	; () banked
  6808  0025C0  4BB7               	infsnz	follow_path@path& (0+255),f,b
  6809  0025C2  2BB8               	incf	(follow_path@path+1)& (0+255),f,b
  6810  0025C4                     l941:
  6811                           
  6812                           ; BSR set to: 0
  6813  0025C4  C0B7  FFF6         	movff	follow_path@path,tblptrl
  6814  0025C8  C0B8  FFF7         	movff	follow_path@path+1,tblptrh
  6815  0025CC                     	if	0	;tblptru may be non-zero
  6816  0025CC                     	endif
  6817  0025CC                     	if	0	;tblptru may be non-zero
  6818  0025CC                     	endif
  6819  0025CC  0008               	tblrd		*
  6820  0025CE  50F5               	movf	tablat,w,c
  6821  0025D0  0A20               	xorlw	32
  6822  0025D2  B4D8               	btfsc	status,2,c
  6823  0025D4  D7F4               	goto	l942
  6824                           
  6825                           ;pff.c: 690: if (*path == '/') path++;
  6826  0025D6  C0B7  FFF6         	movff	follow_path@path,tblptrl
  6827  0025DA  C0B8  FFF7         	movff	follow_path@path+1,tblptrh
  6828  0025DE                     	if	0	;tblptru may be non-zero
  6829  0025DE                     	endif
  6830  0025DE                     	if	0	;tblptru may be non-zero
  6831  0025DE                     	endif
  6832  0025DE  0008               	tblrd		*
  6833  0025E0  50F5               	movf	tablat,w,c
  6834  0025E2  0A2F               	xorlw	47
  6835  0025E4  A4D8               	btfss	status,2,c
  6836  0025E6  D003               	goto	l944
  6837  0025E8  0100               	movlb	0	; () banked
  6838  0025EA  4BB7               	infsnz	follow_path@path& (0+255),f,b
  6839  0025EC  2BB8               	incf	(follow_path@path+1)& (0+255),f,b
  6840  0025EE                     l944:
  6841                           
  6842                           ;pff.c: 691: dj->sclust = 0;
  6843                           
  6844                           ; BSR set to: 0
  6845  0025EE  0100               	movlb	0	; () banked
  6846  0025F0  EE20 F004          	lfsr	2,4
  6847  0025F4  51B3               	movf	follow_path@dj& (0+255),w,b
  6848  0025F6  26D9               	addwf	fsr2l,f,c
  6849  0025F8  51B4               	movf	(follow_path@dj+1)& (0+255),w,b
  6850  0025FA  22DA               	addwfc	fsr2h,f,c
  6851  0025FC  6ADE               	clrf	postinc2,c
  6852  0025FE  6ADE               	clrf	postinc2,c
  6853  002600  6ADE               	clrf	postinc2,c
  6854  002602  6ADD               	clrf	postdec2,c
  6855                           
  6856                           ; BSR set to: 0
  6857                           ;pff.c: 693: if ((BYTE)*path < ' ') {
  6858  002604  C0B7  FFF6         	movff	follow_path@path,tblptrl
  6859  002608  C0B8  FFF7         	movff	follow_path@path+1,tblptrh
  6860  00260C                     	if	0	;tblptru may be non-zero
  6861  00260C                     	endif
  6862  00260C                     	if	0	;tblptru may be non-zero
  6863  00260C                     	endif
  6864  00260C  0E20               	movlw	32
  6865  00260E  0008               	tblrd		*
  6866  002610  60F5               	cpfslt	tablat,c
  6867  002612  D00F               	goto	l945
  6868                           
  6869                           ; BSR set to: 0
  6870                           ;pff.c: 694: res = dir_rewind(dj);
  6871  002614  C0B3  F065         	movff	follow_path@dj,dir_rewind@dj
  6872  002618  C0B4  F066         	movff	follow_path@dj+1,dir_rewind@dj+1
  6873  00261C  EC26  F011         	call	_dir_rewind	;wreg free
  6874  002620  0100               	movlb	0	; () banked
  6875  002622  6FB9               	movwf	follow_path@res& (0+255),b
  6876                           
  6877                           ; BSR set to: 0
  6878                           ;pff.c: 695: dir[0] = 0;
  6879  002624  C0B5  FFD9         	movff	follow_path@dir,fsr2l
  6880  002628  C0B6  FFDA         	movff	follow_path@dir+1,fsr2h
  6881  00262C  0E00               	movlw	0
  6882  00262E  6EDF               	movwf	indf2,c
  6883                           
  6884                           ;pff.c: 697: } else {
  6885  002630  D04E               	goto	l949
  6886  002632                     l945:
  6887                           
  6888                           ; BSR set to: 0
  6889                           ;pff.c: 699: res = create_name(dj, &path);
  6890                           
  6891                           ; BSR set to: 0
  6892                           
  6893                           ;pff.c: 698: for (;;) {
  6894                           
  6895                           ; BSR set to: 0
  6896  002632  C0B3  F022         	movff	follow_path@dj,create_name@dj
  6897  002636  C0B4  F023         	movff	follow_path@dj+1,create_name@dj+1
  6898  00263A  0EB7               	movlw	low follow_path@path
  6899  00263C  6E24               	movwf	create_name@path,c
  6900  00263E  0E00               	movlw	high follow_path@path
  6901  002640  6E25               	movwf	create_name@path+1,c
  6902  002642  EC4B  F00F         	call	_create_name	;wreg free
  6903  002646  0100               	movlb	0	; () banked
  6904  002648  6FB9               	movwf	follow_path@res& (0+255),b
  6905                           
  6906                           ; BSR set to: 0
  6907                           ;pff.c: 700: if (res != FR_OK) break;
  6908  00264A  51B9               	movf	follow_path@res& (0+255),w,b
  6909  00264C  A4D8               	btfss	status,2,c
  6910  00264E  D03F               	goto	l949
  6911                           
  6912                           ; BSR set to: 0
  6913                           ;pff.c: 701: res = dir_find(dj, dir);
  6914                           
  6915                           ; BSR set to: 0
  6916                           
  6917                           ; BSR set to: 0
  6918  002650  C0B3  F0AB         	movff	follow_path@dj,dir_find@dj
  6919  002654  C0B4  F0AC         	movff	follow_path@dj+1,dir_find@dj+1
  6920  002658  C0B5  F0AD         	movff	follow_path@dir,dir_find@dir
  6921  00265C  C0B6  F0AE         	movff	follow_path@dir+1,dir_find@dir+1
  6922  002660  EC69  F013         	call	_dir_find	;wreg free
  6923  002664  0100               	movlb	0	; () banked
  6924  002666  6FB9               	movwf	follow_path@res& (0+255),b
  6925                           
  6926                           ; BSR set to: 0
  6927                           ;pff.c: 702: if (res != FR_OK) break;
  6928  002668  51B9               	movf	follow_path@res& (0+255),w,b
  6929  00266A  A4D8               	btfss	status,2,c
  6930  00266C  D030               	goto	l949
  6931                           
  6932                           ; BSR set to: 0
  6933                           ;pff.c: 703: if (dj->fn[11]) break;
  6934                           
  6935                           ; BSR set to: 0
  6936                           
  6937                           ; BSR set to: 0
  6938  00266E  EE20 F002          	lfsr	2,2
  6939  002672  51B3               	movf	follow_path@dj& (0+255),w,b
  6940  002674  26D9               	addwf	fsr2l,f,c
  6941  002676  51B4               	movf	(follow_path@dj+1)& (0+255),w,b
  6942  002678  22DA               	addwfc	fsr2h,f,c
  6943  00267A  EE10 F00B          	lfsr	1,11
  6944  00267E  50DE               	movf	postinc2,w,c
  6945  002680  26E1               	addwf	fsr1l,f,c
  6946  002682  50DD               	movf	postdec2,w,c
  6947  002684  22E2               	addwfc	fsr1h,f,c
  6948  002686  50E7               	movf	indf1,w,c
  6949  002688  A4D8               	btfss	status,2,c
  6950  00268A  D021               	goto	l949
  6951                           
  6952                           ; BSR set to: 0
  6953                           ;pff.c: 704: if (!(dir[11] & 0x10)) {
  6954                           
  6955                           ; BSR set to: 0
  6956                           
  6957                           ; BSR set to: 0
  6958  00268C  EE20 F00B          	lfsr	2,11
  6959  002690  51B5               	movf	follow_path@dir& (0+255),w,b
  6960  002692  26D9               	addwf	fsr2l,f,c
  6961  002694  51B6               	movf	(follow_path@dir+1)& (0+255),w,b
  6962  002696  22DA               	addwfc	fsr2h,f,c
  6963  002698  B8DF               	btfsc	indf2,4,c
  6964  00269A  D003               	goto	l952
  6965                           
  6966                           ; BSR set to: 0
  6967                           ;pff.c: 705: res = FR_NO_FILE; break;
  6968  00269C  0E03               	movlw	3
  6969  00269E  6FB9               	movwf	follow_path@res& (0+255),b
  6970  0026A0  D016               	goto	l949
  6971  0026A2                     l952:
  6972                           
  6973                           ; BSR set to: 0
  6974                           ;pff.c: 706: }
  6975                           ;pff.c: 707: dj->sclust = get_clust(dir);
  6976                           
  6977                           ; BSR set to: 0
  6978  0026A2  C0B5  F01A         	movff	follow_path@dir,get_clust@dir
  6979  0026A6  C0B6  F01B         	movff	follow_path@dir+1,get_clust@dir+1
  6980  0026AA  EC4F  F014         	call	_get_clust	;wreg free
  6981  0026AE  0100               	movlb	0	; () banked
  6982  0026B0  EE20 F004          	lfsr	2,4
  6983  0026B4  51B3               	movf	follow_path@dj& (0+255),w,b
  6984  0026B6  26D9               	addwf	fsr2l,f,c
  6985  0026B8  51B4               	movf	(follow_path@dj+1)& (0+255),w,b
  6986  0026BA  22DA               	addwfc	fsr2h,f,c
  6987  0026BC  C01A  FFDE         	movff	?_get_clust,postinc2
  6988  0026C0  C01B  FFDE         	movff	?_get_clust+1,postinc2
  6989  0026C4  C01C  FFDE         	movff	?_get_clust+2,postinc2
  6990  0026C8  C01D  FFDE         	movff	?_get_clust+3,postinc2
  6991                           
  6992                           ;pff.c: 708: }
  6993  0026CC  D7B2               	goto	l945
  6994  0026CE                     l949:
  6995                           
  6996                           ; BSR set to: 0
  6997                           ;pff.c: 709: }
  6998                           ;pff.c: 711: return res;
  6999                           
  7000                           ; BSR set to: 0
  7001                           
  7002                           ; BSR set to: 0
  7003  0026CE  51B9               	movf	follow_path@res& (0+255),w,b
  7004  0026D0  0012               	return	
  7005  0026D2                     __end_of_follow_path:
  7006                           	opt stack 0
  7007                           tosu	equ	0xFFF
  7008                           tosh	equ	0xFFE
  7009                           tosl	equ	0xFFD
  7010                           pclath	equ	0xFFA
  7011                           tblptru	equ	0xFF8
  7012                           tblptrh	equ	0xFF7
  7013                           tblptrl	equ	0xFF6
  7014                           tablat	equ	0xFF5
  7015                           prodh	equ	0xFF4
  7016                           prodl	equ	0xFF3
  7017                           intcon	equ	0xFF2
  7018                           intcon2	equ	0xFF1
  7019                           intcon3	equ	0xFF0
  7020                           postinc0	equ	0xFEE
  7021                           wreg	equ	0xFE8
  7022                           indf1	equ	0xFE7
  7023                           postinc1	equ	0xFE6
  7024                           postdec1	equ	0xFE5
  7025                           fsr1h	equ	0xFE2
  7026                           fsr1l	equ	0xFE1
  7027                           indf2	equ	0xFDF
  7028                           postinc2	equ	0xFDE
  7029                           postdec2	equ	0xFDD
  7030                           plusw2	equ	0xFDB
  7031                           fsr2h	equ	0xFDA
  7032                           fsr2l	equ	0xFD9
  7033                           status	equ	0xFD8
  7034                           
  7035 ;; *************** function _get_clust *****************
  7036 ;; Defined at:
  7037 ;;		line 414 in file "pff.c"
  7038 ;; Parameters:    Size  Location     Type
  7039 ;;  dir             2   25[COMRAM] PTR unsigned char 
  7040 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  7041 ;; Auto vars:     Size  Location     Type
  7042 ;;  clst            4   39[COMRAM] unsigned long 
  7043 ;;  fs              2   37[COMRAM] PTR struct .
  7044 ;;		 -> NULL(0), SDCard@fs(42), 
  7045 ;; Return value:  Size  Location     Type
  7046 ;;                  4   25[COMRAM] unsigned long 
  7047 ;; Registers used:
  7048 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7049 ;; Tracked objects:
  7050 ;;		On entry : 0/0
  7051 ;;		On exit  : 0/0
  7052 ;;		Unchanged: 0/0
  7053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7054 ;;      Params:         4       0       0       0       0       0       0       0       0
  7055 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7056 ;;      Temps:          8       0       0       0       0       0       0       0       0
  7057 ;;      Totals:        18       0       0       0       0       0       0       0       0
  7058 ;;Total ram usage:       18 bytes
  7059 ;; Hardware stack levels used:    1
  7060 ;; Hardware stack levels required when called:    2
  7061 ;; This function calls:
  7062 ;;		Nothing
  7063 ;; This function is called by:
  7064 ;;		_follow_path
  7065 ;;		_pf_open
  7066 ;;		_pf_opendir
  7067 ;; This function uses a non-reentrant model
  7068 ;;
  7069                           
  7070                           	psect	text30
  7071  00289E                     __ptext30:
  7072                           	opt stack 0
  7073  00289E                     _get_clust:
  7074                           	opt stack 25
  7075                           
  7076                           ;pff.c: 418: FATFS *fs = FatFs;
  7077                           
  7078                           ; BSR set to: 0
  7079                           ;incstack = 0
  7080  00289E  C035  F026         	movff	_FatFs,get_clust@fs
  7081  0028A2  C036  F027         	movff	_FatFs+1,get_clust@fs+1
  7082                           
  7083                           ;pff.c: 422: if (0 || (1 && fs->fs_type == 3)) {
  7084  0028A6  0E00               	movlw	0
  7085  0028A8  6E28               	movwf	get_clust@clst,c
  7086  0028AA  0E00               	movlw	0
  7087  0028AC  6E29               	movwf	get_clust@clst+1,c
  7088  0028AE  0E00               	movlw	0
  7089  0028B0  6E2A               	movwf	get_clust@clst+2,c
  7090  0028B2  0E00               	movlw	0
  7091  0028B4  6E2B               	movwf	get_clust@clst+3,c
  7092  0028B6  C026  FFD9         	movff	get_clust@fs,fsr2l
  7093  0028BA  C027  FFDA         	movff	get_clust@fs+1,fsr2h
  7094  0028BE  0E03               	movlw	3
  7095  0028C0  18DE               	xorwf	postinc2,w,c
  7096  0028C2  A4D8               	btfss	status,2,c
  7097  0028C4  D025               	goto	l856
  7098                           
  7099                           ;pff.c: 423: clst = (WORD)(((WORD)*((BYTE*)(dir+20)+1)<<8)|(WORD)*(BYTE*)(dir+20));
  7100  0028C6  EE20 F015          	lfsr	2,21
  7101  0028CA  501A               	movf	get_clust@dir,w,c
  7102  0028CC  26D9               	addwf	fsr2l,f,c
  7103  0028CE  501B               	movf	get_clust@dir+1,w,c
  7104  0028D0  22DA               	addwfc	fsr2h,f,c
  7105  0028D2  50DF               	movf	indf2,w,c
  7106  0028D4  6E1E               	movwf	??_get_clust& (0+255),c
  7107  0028D6  501E               	movf	??_get_clust,w,c
  7108  0028D8  6E20               	movwf	(??_get_clust+2)& (0+255),c
  7109  0028DA  6A1F               	clrf	(??_get_clust+1)& (0+255),c
  7110  0028DC  EE20 F014          	lfsr	2,20
  7111  0028E0  501A               	movf	get_clust@dir,w,c
  7112  0028E2  26D9               	addwf	fsr2l,f,c
  7113  0028E4  501B               	movf	get_clust@dir+1,w,c
  7114  0028E6  22DA               	addwfc	fsr2h,f,c
  7115  0028E8  50DF               	movf	indf2,w,c
  7116  0028EA  6E21               	movwf	(??_get_clust+3)& (0+255),c
  7117  0028EC  5021               	movf	??_get_clust+3,w,c
  7118  0028EE  121F               	iorwf	??_get_clust+1,f,c
  7119  0028F0  0E00               	movlw	0
  7120  0028F2  1220               	iorwf	??_get_clust+2,f,c
  7121  0028F4  C01F  F028         	movff	??_get_clust+1,get_clust@clst
  7122  0028F8  C020  F029         	movff	??_get_clust+2,get_clust@clst+1
  7123  0028FC  6A2A               	clrf	get_clust@clst+2,c
  7124  0028FE  6A2B               	clrf	get_clust@clst+3,c
  7125                           
  7126                           ;pff.c: 424: clst <<= 16;
  7127  002900  0E10               	movlw	16
  7128  002902                     u7345:
  7129  002902  90D8               	bcf	status,0,c
  7130  002904  3628               	rlcf	get_clust@clst,f,c
  7131  002906  3629               	rlcf	get_clust@clst+1,f,c
  7132  002908  362A               	rlcf	get_clust@clst+2,f,c
  7133  00290A  362B               	rlcf	get_clust@clst+3,f,c
  7134  00290C  2EE8               	decfsz	wreg,f,c
  7135  00290E  D7F9               	goto	u7345
  7136  002910                     l856:
  7137                           
  7138                           ;pff.c: 425: }
  7139                           ;pff.c: 426: clst |= (WORD)(((WORD)*((BYTE*)(dir+26)+1)<<8)|(WORD)*(BYTE*)(dir+26));
  7140  002910  EE20 F01B          	lfsr	2,27
  7141  002914  501A               	movf	get_clust@dir,w,c
  7142  002916  26D9               	addwf	fsr2l,f,c
  7143  002918  501B               	movf	get_clust@dir+1,w,c
  7144  00291A  22DA               	addwfc	fsr2h,f,c
  7145  00291C  50DF               	movf	indf2,w,c
  7146  00291E  6E1E               	movwf	??_get_clust& (0+255),c
  7147  002920  501E               	movf	??_get_clust,w,c
  7148  002922  6E20               	movwf	(??_get_clust+2)& (0+255),c
  7149  002924  6A1F               	clrf	(??_get_clust+1)& (0+255),c
  7150  002926  EE20 F01A          	lfsr	2,26
  7151  00292A  501A               	movf	get_clust@dir,w,c
  7152  00292C  26D9               	addwf	fsr2l,f,c
  7153  00292E  501B               	movf	get_clust@dir+1,w,c
  7154  002930  22DA               	addwfc	fsr2h,f,c
  7155  002932  50DF               	movf	indf2,w,c
  7156  002934  6E21               	movwf	(??_get_clust+3)& (0+255),c
  7157  002936  5021               	movf	??_get_clust+3,w,c
  7158  002938  101F               	iorwf	??_get_clust+1,w,c
  7159  00293A  6E22               	movwf	(??_get_clust+4)& (0+255),c
  7160  00293C  5020               	movf	??_get_clust+2,w,c
  7161  00293E  6E23               	movwf	(??_get_clust+5)& (0+255),c
  7162  002940  6A24               	clrf	(??_get_clust+6)& (0+255),c
  7163  002942  6A25               	clrf	(??_get_clust+7)& (0+255),c
  7164  002944  5022               	movf	??_get_clust+4,w,c
  7165  002946  1228               	iorwf	get_clust@clst,f,c
  7166  002948  5023               	movf	??_get_clust+5,w,c
  7167  00294A  1229               	iorwf	get_clust@clst+1,f,c
  7168  00294C  5024               	movf	??_get_clust+6,w,c
  7169  00294E  122A               	iorwf	get_clust@clst+2,f,c
  7170  002950  5025               	movf	??_get_clust+7,w,c
  7171  002952  122B               	iorwf	get_clust@clst+3,f,c
  7172                           
  7173                           ;pff.c: 428: return clst;
  7174  002954  C028  F01A         	movff	get_clust@clst,?_get_clust
  7175  002958  C029  F01B         	movff	get_clust@clst+1,?_get_clust+1
  7176  00295C  C02A  F01C         	movff	get_clust@clst+2,?_get_clust+2
  7177  002960  C02B  F01D         	movff	get_clust@clst+3,?_get_clust+3
  7178  002964  0012               	return	
  7179  002966                     __end_of_get_clust:
  7180                           	opt stack 0
  7181                           tosu	equ	0xFFF
  7182                           tosh	equ	0xFFE
  7183                           tosl	equ	0xFFD
  7184                           pclath	equ	0xFFA
  7185                           tblptru	equ	0xFF8
  7186                           tblptrh	equ	0xFF7
  7187                           tblptrl	equ	0xFF6
  7188                           tablat	equ	0xFF5
  7189                           prodh	equ	0xFF4
  7190                           prodl	equ	0xFF3
  7191                           intcon	equ	0xFF2
  7192                           intcon2	equ	0xFF1
  7193                           intcon3	equ	0xFF0
  7194                           postinc0	equ	0xFEE
  7195                           wreg	equ	0xFE8
  7196                           indf1	equ	0xFE7
  7197                           postinc1	equ	0xFE6
  7198                           postdec1	equ	0xFE5
  7199                           fsr1h	equ	0xFE2
  7200                           fsr1l	equ	0xFE1
  7201                           indf2	equ	0xFDF
  7202                           postinc2	equ	0xFDE
  7203                           postdec2	equ	0xFDD
  7204                           plusw2	equ	0xFDB
  7205                           fsr2h	equ	0xFDA
  7206                           fsr2l	equ	0xFD9
  7207                           status	equ	0xFD8
  7208                           
  7209 ;; *************** function _dir_find *****************
  7210 ;; Defined at:
  7211 ;;		line 510 in file "pff.c"
  7212 ;; Parameters:    Size  Location     Type
  7213 ;;  dj              2   75[BANK0 ] PTR struct .
  7214 ;;		 -> pf_open@dj(16), 
  7215 ;;  dir             2   77[BANK0 ] PTR unsigned char 
  7216 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  7217 ;; Auto vars:     Size  Location     Type
  7218 ;;  res             1   82[BANK0 ] enum E43
  7219 ;;  c               1   81[BANK0 ] unsigned char 
  7220 ;; Return value:  Size  Location     Type
  7221 ;;                  1    wreg      enum E43
  7222 ;; Registers used:
  7223 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7224 ;; Tracked objects:
  7225 ;;		On entry : 0/0
  7226 ;;		On exit  : 0/0
  7227 ;;		Unchanged: 0/0
  7228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7229 ;;      Params:         0       4       0       0       0       0       0       0       0
  7230 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7231 ;;      Temps:          0       2       0       0       0       0       0       0       0
  7232 ;;      Totals:         0       8       0       0       0       0       0       0       0
  7233 ;;Total ram usage:        8 bytes
  7234 ;; Hardware stack levels used:    1
  7235 ;; Hardware stack levels required when called:    8
  7236 ;; This function calls:
  7237 ;;		_dir_next
  7238 ;;		_dir_rewind
  7239 ;;		_disk_readp
  7240 ;;		_mem_cmp
  7241 ;; This function is called by:
  7242 ;;		_follow_path
  7243 ;; This function uses a non-reentrant model
  7244 ;;
  7245                           
  7246                           	psect	text31
  7247  0026D2                     __ptext31:
  7248                           	opt stack 0
  7249  0026D2                     _dir_find:
  7250                           	opt stack 18
  7251                           
  7252                           ;pff.c: 515: FRESULT res;
  7253                           ;pff.c: 516: BYTE c;
  7254                           ;pff.c: 519: res = dir_rewind(dj);
  7255                           
  7256                           ;incstack = 0
  7257  0026D2  C0AB  F065         	movff	dir_find@dj,dir_rewind@dj
  7258  0026D6  C0AC  F066         	movff	dir_find@dj+1,dir_rewind@dj+1
  7259  0026DA  EC26  F011         	call	_dir_rewind	;wreg free
  7260  0026DE  0100               	movlb	0	; () banked
  7261  0026E0  6FB2               	movwf	dir_find@res& (0+255),b
  7262                           
  7263                           ; BSR set to: 0
  7264                           ;pff.c: 520: if (res != FR_OK) return res;
  7265  0026E2  51B2               	movf	dir_find@res& (0+255),w,b
  7266  0026E4  B4D8               	btfsc	status,2,c
  7267  0026E6  D002               	goto	l888
  7268                           
  7269                           ; BSR set to: 0
  7270  0026E8  51B2               	movf	dir_find@res& (0+255),w,b
  7271                           
  7272                           ; BSR set to: 0
  7273  0026EA  0012               	return	
  7274  0026EC                     l888:
  7275                           
  7276                           ; BSR set to: 0
  7277                           ;pff.c: 523: res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32)
  7278                           ;pff.c: 524: ? FR_DISK_ERR : FR_OK;
  7279                           
  7280                           ; BSR set to: 0
  7281                           
  7282                           ;pff.c: 522: do {
  7283                           
  7284                           ; BSR set to: 0
  7285  0026EC  C0AD  F060         	movff	dir_find@dir,disk_readp@rd
  7286  0026F0  C0AE  F061         	movff	dir_find@dir+1,disk_readp@rd+1
  7287  0026F4  EE20 F00C          	lfsr	2,12
  7288  0026F8  51AB               	movf	dir_find@dj& (0+255),w,b
  7289  0026FA  26D9               	addwf	fsr2l,f,c
  7290  0026FC  51AC               	movf	(dir_find@dj+1)& (0+255),w,b
  7291  0026FE  22DA               	addwfc	fsr2h,f,c
  7292  002700  CFDE F062          	movff	postinc2,disk_readp@sector
  7293  002704  CFDE F063          	movff	postinc2,disk_readp@sector+1
  7294  002708  CFDE F064          	movff	postinc2,disk_readp@sector+2
  7295  00270C  CFDE F065          	movff	postinc2,disk_readp@sector+3
  7296  002710  C0AB  FFD9         	movff	dir_find@dj,fsr2l
  7297  002714  C0AC  FFDA         	movff	dir_find@dj+1,fsr2h
  7298  002718  CFDE F0AF          	movff	postinc2,??_dir_find
  7299  00271C  CFDD F0B0          	movff	postdec2,??_dir_find+1
  7300  002720  0E0F               	movlw	15
  7301  002722  17AF               	andwf	??_dir_find& (0+255),f,b
  7302  002724  0E00               	movlw	0
  7303  002726  17B0               	andwf	(??_dir_find+1)& (0+255),f,b
  7304  002728  0E05               	movlw	5
  7305  00272A                     u7365:
  7306  00272A  90D8               	bcf	status,0,c
  7307  00272C  37AF               	rlcf	??_dir_find& (0+255),f,b
  7308  00272E  37B0               	rlcf	(??_dir_find+1)& (0+255),f,b
  7309  002730  2EE8               	decfsz	wreg,f,c
  7310  002732  D7FB               	goto	u7365
  7311  002734  C0AF  F066         	movff	??_dir_find,disk_readp@offset
  7312  002738  C0B0  F067         	movff	??_dir_find+1,disk_readp@offset+1
  7313  00273C  0E00               	movlw	0
  7314  00273E  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  7315  002740  0E20               	movlw	32
  7316  002742  6F68               	movwf	disk_readp@count& (0+255),b
  7317  002744  EC3C  F009         	call	_disk_readp	;wreg free
  7318  002748  0900               	iorlw	0
  7319  00274A  B4D8               	btfsc	status,2,c
  7320  00274C  D002               	goto	u7370
  7321  00274E  0E01               	movlw	1
  7322  002750  D001               	goto	u7380
  7323  002752                     u7370:
  7324  002752  0E00               	movlw	0
  7325  002754                     u7380:
  7326  002754  0100               	movlb	0	; () banked
  7327  002756  6FB2               	movwf	dir_find@res& (0+255),b
  7328                           
  7329                           ; BSR set to: 0
  7330                           ;pff.c: 525: if (res != FR_OK) break;
  7331  002758  51B2               	movf	dir_find@res& (0+255),w,b
  7332  00275A  A4D8               	btfss	status,2,c
  7333  00275C  D037               	goto	u7430
  7334                           
  7335                           ; BSR set to: 0
  7336                           ;pff.c: 526: c = dir[0];
  7337                           
  7338                           ; BSR set to: 0
  7339                           
  7340                           ; BSR set to: 0
  7341  00275E  C0AD  FFD9         	movff	dir_find@dir,fsr2l
  7342  002762  C0AE  FFDA         	movff	dir_find@dir+1,fsr2h
  7343  002766  50DF               	movf	indf2,w,c
  7344  002768  6FB1               	movwf	dir_find@c& (0+255),b
  7345                           
  7346                           ; BSR set to: 0
  7347                           ;pff.c: 527: if (c == 0) { res = FR_NO_FILE; break; }
  7348  00276A  51B1               	movf	dir_find@c& (0+255),w,b
  7349  00276C  A4D8               	btfss	status,2,c
  7350  00276E  D003               	goto	l893
  7351                           
  7352                           ; BSR set to: 0
  7353  002770  0E03               	movlw	3
  7354  002772  6FB2               	movwf	dir_find@res& (0+255),b
  7355  002774  D02B               	goto	u7430
  7356  002776                     l893:
  7357                           
  7358                           ; BSR set to: 0
  7359                           ;pff.c: 528: if (!(dir[11] & 0x08) && !mem_cmp(dir, dj->fn, 11))
  7360                           
  7361                           ; BSR set to: 0
  7362  002776  EE20 F00B          	lfsr	2,11
  7363  00277A  51AD               	movf	dir_find@dir& (0+255),w,b
  7364  00277C  26D9               	addwf	fsr2l,f,c
  7365  00277E  51AE               	movf	(dir_find@dir+1)& (0+255),w,b
  7366  002780  22DA               	addwfc	fsr2h,f,c
  7367  002782  B6DF               	btfsc	indf2,3,c
  7368  002784  D018               	goto	l894
  7369                           
  7370                           ; BSR set to: 0
  7371  002786  C0AD  F01A         	movff	dir_find@dir,mem_cmp@dst
  7372  00278A  C0AE  F01B         	movff	dir_find@dir+1,mem_cmp@dst+1
  7373  00278E  EE20 F002          	lfsr	2,2
  7374  002792  51AB               	movf	dir_find@dj& (0+255),w,b
  7375  002794  26D9               	addwf	fsr2l,f,c
  7376  002796  51AC               	movf	(dir_find@dj+1)& (0+255),w,b
  7377  002798  22DA               	addwfc	fsr2h,f,c
  7378  00279A  CFDE F01C          	movff	postinc2,mem_cmp@src
  7379  00279E  CFDD F01D          	movff	postdec2,mem_cmp@src+1
  7380  0027A2  0E00               	movlw	0
  7381  0027A4  6E1F               	movwf	mem_cmp@cnt+1,c
  7382  0027A6  0E0B               	movlw	11
  7383  0027A8  6E1E               	movwf	mem_cmp@cnt,c
  7384  0027AA  EC2C  F017         	call	_mem_cmp	;wreg free
  7385  0027AE  501A               	movf	?_mem_cmp,w,c
  7386  0027B0  101B               	iorwf	?_mem_cmp+1,w,c
  7387  0027B2  B4D8               	btfsc	status,2,c
  7388  0027B4  D00B               	goto	u7430
  7389  0027B6                     l894:
  7390                           
  7391                           ;pff.c: 530: res = dir_next(dj);
  7392  0027B6  C0AB  F09A         	movff	dir_find@dj,dir_next@dj
  7393  0027BA  C0AC  F09B         	movff	dir_find@dj+1,dir_next@dj+1
  7394  0027BE  EC3E  F00C         	call	_dir_next	;wreg free
  7395  0027C2  0100               	movlb	0	; () banked
  7396  0027C4  6FB2               	movwf	dir_find@res& (0+255),b
  7397                           
  7398                           ; BSR set to: 0
  7399                           ;pff.c: 531: } while (res == FR_OK);
  7400  0027C6  51B2               	movf	dir_find@res& (0+255),w,b
  7401  0027C8  B4D8               	btfsc	status,2,c
  7402  0027CA  D790               	goto	l888
  7403  0027CC                     u7430:
  7404                           
  7405                           ;pff.c: 533: return res;
  7406                           
  7407                           ; BSR set to: 0
  7408  0027CC  0100               	movlb	0	; () banked
  7409  0027CE  51B2               	movf	dir_find@res& (0+255),w,b
  7410  0027D0  0012               	return	
  7411  0027D2                     __end_of_dir_find:
  7412                           	opt stack 0
  7413                           tosu	equ	0xFFF
  7414                           tosh	equ	0xFFE
  7415                           tosl	equ	0xFFD
  7416                           pclath	equ	0xFFA
  7417                           tblptru	equ	0xFF8
  7418                           tblptrh	equ	0xFF7
  7419                           tblptrl	equ	0xFF6
  7420                           tablat	equ	0xFF5
  7421                           prodh	equ	0xFF4
  7422                           prodl	equ	0xFF3
  7423                           intcon	equ	0xFF2
  7424                           intcon2	equ	0xFF1
  7425                           intcon3	equ	0xFF0
  7426                           postinc0	equ	0xFEE
  7427                           wreg	equ	0xFE8
  7428                           indf1	equ	0xFE7
  7429                           postinc1	equ	0xFE6
  7430                           postdec1	equ	0xFE5
  7431                           fsr1h	equ	0xFE2
  7432                           fsr1l	equ	0xFE1
  7433                           indf2	equ	0xFDF
  7434                           postinc2	equ	0xFDE
  7435                           postdec2	equ	0xFDD
  7436                           plusw2	equ	0xFDB
  7437                           fsr2h	equ	0xFDA
  7438                           fsr2l	equ	0xFD9
  7439                           status	equ	0xFD8
  7440                           
  7441 ;; *************** function _mem_cmp *****************
  7442 ;; Defined at:
  7443 ;;		line 336 in file "pff.c"
  7444 ;; Parameters:    Size  Location     Type
  7445 ;;  dst             2   25[COMRAM] PTR const void 
  7446 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  7447 ;;  src             2   27[COMRAM] PTR const void 
  7448 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  7449 ;;  cnt             2   29[COMRAM] int 
  7450 ;; Auto vars:     Size  Location     Type
  7451 ;;  r               2   38[COMRAM] int 
  7452 ;;  s               2   36[COMRAM] PTR const unsigned char 
  7453 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  7454 ;;  d               2   34[COMRAM] PTR const unsigned char 
  7455 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  7456 ;; Return value:  Size  Location     Type
  7457 ;;                  2   25[COMRAM] int 
  7458 ;; Registers used:
  7459 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7460 ;; Tracked objects:
  7461 ;;		On entry : 0/0
  7462 ;;		On exit  : 0/0
  7463 ;;		Unchanged: 0/0
  7464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7465 ;;      Params:         6       0       0       0       0       0       0       0       0
  7466 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7467 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7468 ;;      Totals:        15       0       0       0       0       0       0       0       0
  7469 ;;Total ram usage:       15 bytes
  7470 ;; Hardware stack levels used:    1
  7471 ;; Hardware stack levels required when called:    2
  7472 ;; This function calls:
  7473 ;;		Nothing
  7474 ;; This function is called by:
  7475 ;;		_dir_find
  7476 ;; This function uses a non-reentrant model
  7477 ;;
  7478                           
  7479                           	psect	text32
  7480  002E58                     __ptext32:
  7481                           	opt stack 0
  7482  002E58                     _mem_cmp:
  7483                           	opt stack 23
  7484                           
  7485                           ;pff.c: 337: const char *d = (const char *)dst, *s = (const char *)src;
  7486                           
  7487                           ; BSR set to: 0
  7488                           ;incstack = 0
  7489  002E58  C01A  F023         	movff	mem_cmp@dst,mem_cmp@d
  7490  002E5C  C01B  F024         	movff	mem_cmp@dst+1,mem_cmp@d+1
  7491  002E60  C01C  F025         	movff	mem_cmp@src,mem_cmp@s
  7492  002E64  C01D  F026         	movff	mem_cmp@src+1,mem_cmp@s+1
  7493                           
  7494                           ;pff.c: 338: int r = 0;
  7495  002E68  0E00               	movlw	0
  7496  002E6A  6E28               	movwf	mem_cmp@r+1,c
  7497  002E6C  0E00               	movlw	0
  7498  002E6E  6E27               	movwf	mem_cmp@r,c
  7499  002E70  061E               	decf	mem_cmp@cnt,f,c
  7500  002E72  A0D8               	btfss	status,0,c
  7501  002E74  061F               	decf	mem_cmp@cnt+1,f,c
  7502  002E76  281E               	incf	mem_cmp@cnt,w,c
  7503  002E78  E103               	bnz	u7030
  7504  002E7A  281F               	incf	mem_cmp@cnt+1,w,c
  7505  002E7C  B4D8               	btfsc	status,2,c
  7506  002E7E  D01F               	goto	u7040
  7507  002E80                     u7030:
  7508  002E80  C025  FFD9         	movff	mem_cmp@s,fsr2l
  7509  002E84  C026  FFDA         	movff	mem_cmp@s+1,fsr2h
  7510  002E88  4A25               	infsnz	mem_cmp@s,f,c
  7511  002E8A  2A26               	incf	mem_cmp@s+1,f,c
  7512  002E8C  50DF               	movf	indf2,w,c
  7513  002E8E  6E20               	movwf	??_mem_cmp& (0+255),c
  7514  002E90  6A21               	clrf	(??_mem_cmp+1)& (0+255),c
  7515  002E92  1E20               	comf	??_mem_cmp,f,c
  7516  002E94  1E21               	comf	??_mem_cmp+1,f,c
  7517  002E96  4A20               	infsnz	??_mem_cmp,f,c
  7518  002E98  2A21               	incf	??_mem_cmp+1,f,c
  7519  002E9A  C023  FFD9         	movff	mem_cmp@d,fsr2l
  7520  002E9E  C024  FFDA         	movff	mem_cmp@d+1,fsr2h
  7521  002EA2  4A23               	infsnz	mem_cmp@d,f,c
  7522  002EA4  2A24               	incf	mem_cmp@d+1,f,c
  7523  002EA6  50DF               	movf	indf2,w,c
  7524  002EA8  6E22               	movwf	(??_mem_cmp+2)& (0+255),c
  7525  002EAA  5022               	movf	??_mem_cmp+2,w,c
  7526  002EAC  2420               	addwf	??_mem_cmp,w,c
  7527  002EAE  6E27               	movwf	mem_cmp@r,c
  7528  002EB0  0E00               	movlw	0
  7529  002EB2  2021               	addwfc	??_mem_cmp+1,w,c
  7530  002EB4  6E28               	movwf	mem_cmp@r+1,c
  7531  002EB6  5027               	movf	mem_cmp@r,w,c
  7532  002EB8  1028               	iorwf	mem_cmp@r+1,w,c
  7533  002EBA  B4D8               	btfsc	status,2,c
  7534  002EBC  D7D9               	goto	l823
  7535  002EBE                     u7040:
  7536                           
  7537                           ;pff.c: 340: return r;
  7538  002EBE  C027  F01A         	movff	mem_cmp@r,?_mem_cmp
  7539  002EC2  C028  F01B         	movff	mem_cmp@r+1,?_mem_cmp+1
  7540  002EC6  0012               	return		;funcret
  7541  002EC8                     __end_of_mem_cmp:
  7542                           	opt stack 0
  7543                           tosu	equ	0xFFF
  7544                           tosh	equ	0xFFE
  7545                           tosl	equ	0xFFD
  7546                           pclath	equ	0xFFA
  7547                           tblptru	equ	0xFF8
  7548                           tblptrh	equ	0xFF7
  7549                           tblptrl	equ	0xFF6
  7550                           tablat	equ	0xFF5
  7551                           prodh	equ	0xFF4
  7552                           prodl	equ	0xFF3
  7553                           intcon	equ	0xFF2
  7554                           intcon2	equ	0xFF1
  7555                           intcon3	equ	0xFF0
  7556                           postinc0	equ	0xFEE
  7557                           wreg	equ	0xFE8
  7558                           indf1	equ	0xFE7
  7559                           postinc1	equ	0xFE6
  7560                           postdec1	equ	0xFE5
  7561                           fsr1h	equ	0xFE2
  7562                           fsr1l	equ	0xFE1
  7563                           indf2	equ	0xFDF
  7564                           postinc2	equ	0xFDE
  7565                           postdec2	equ	0xFDD
  7566                           plusw2	equ	0xFDB
  7567                           fsr2h	equ	0xFDA
  7568                           fsr2l	equ	0xFD9
  7569                           status	equ	0xFD8
  7570                           
  7571 ;; *************** function _dir_rewind *****************
  7572 ;; Defined at:
  7573 ;;		line 437 in file "pff.c"
  7574 ;; Parameters:    Size  Location     Type
  7575 ;;  dj              2    5[BANK0 ] PTR struct .
  7576 ;;		 -> pf_open@dj(16), 
  7577 ;; Auto vars:     Size  Location     Type
  7578 ;;  clst            4   17[BANK0 ] unsigned long 
  7579 ;;  fs              2   15[BANK0 ] PTR struct .
  7580 ;;		 -> NULL(0), SDCard@fs(42), 
  7581 ;; Return value:  Size  Location     Type
  7582 ;;                  1    wreg      enum E43
  7583 ;; Registers used:
  7584 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7585 ;; Tracked objects:
  7586 ;;		On entry : 0/0
  7587 ;;		On exit  : 0/0
  7588 ;;		Unchanged: 0/0
  7589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7590 ;;      Params:         0       2       0       0       0       0       0       0       0
  7591 ;;      Locals:         0      10       0       0       0       0       0       0       0
  7592 ;;      Temps:          0       4       0       0       0       0       0       0       0
  7593 ;;      Totals:         0      16       0       0       0       0       0       0       0
  7594 ;;Total ram usage:       16 bytes
  7595 ;; Hardware stack levels used:    1
  7596 ;; Hardware stack levels required when called:    4
  7597 ;; This function calls:
  7598 ;;		_clust2sect
  7599 ;; This function is called by:
  7600 ;;		_dir_find
  7601 ;;		_follow_path
  7602 ;;		_pf_opendir
  7603 ;;		_pf_readdir
  7604 ;; This function uses a non-reentrant model
  7605 ;;
  7606                           
  7607                           	psect	text33
  7608  00224C                     __ptext33:
  7609                           	opt stack 0
  7610  00224C                     _dir_rewind:
  7611                           	opt stack 22
  7612                           
  7613                           ;pff.c: 441: DWORD clst;
  7614                           ;pff.c: 442: FATFS *fs = FatFs;
  7615                           
  7616                           ;incstack = 0
  7617  00224C  C035  F06F         	movff	_FatFs,dir_rewind@fs
  7618  002250  C036  F070         	movff	_FatFs+1,dir_rewind@fs+1
  7619                           
  7620                           ;pff.c: 445: dj->index = 0;
  7621  002254  C065  FFD9         	movff	dir_rewind@dj,fsr2l
  7622  002258  C066  FFDA         	movff	dir_rewind@dj+1,fsr2h
  7623  00225C  0E00               	movlw	0
  7624  00225E  6EDE               	movwf	postinc2,c
  7625  002260  0E00               	movlw	0
  7626  002262  6EDD               	movwf	postdec2,c
  7627                           
  7628                           ;pff.c: 446: clst = dj->sclust;
  7629  002264  0100               	movlb	0	; () banked
  7630  002266  EE20 F004          	lfsr	2,4
  7631  00226A  5165               	movf	dir_rewind@dj& (0+255),w,b
  7632  00226C  26D9               	addwf	fsr2l,f,c
  7633  00226E  5166               	movf	(dir_rewind@dj+1)& (0+255),w,b
  7634  002270  22DA               	addwfc	fsr2h,f,c
  7635  002272  CFDE F071          	movff	postinc2,dir_rewind@clst
  7636  002276  CFDE F072          	movff	postinc2,dir_rewind@clst+1
  7637  00227A  CFDE F073          	movff	postinc2,dir_rewind@clst+2
  7638  00227E  CFDE F074          	movff	postinc2,dir_rewind@clst+3
  7639                           
  7640                           ; BSR set to: 0
  7641                           ;pff.c: 447: if (clst == 1 || clst >= fs->n_fatent)
  7642  002282  0571               	decf	dir_rewind@clst& (0+255),w,b
  7643  002284  1172               	iorwf	(dir_rewind@clst+1)& (0+255),w,b
  7644  002286  1173               	iorwf	(dir_rewind@clst+2)& (0+255),w,b
  7645  002288  1174               	iorwf	(dir_rewind@clst+3)& (0+255),w,b
  7646  00228A  B4D8               	btfsc	status,2,c
  7647  00228C  D010               	goto	u7060
  7648                           
  7649                           ; BSR set to: 0
  7650  00228E  EE20 F006          	lfsr	2,6
  7651  002292  516F               	movf	dir_rewind@fs& (0+255),w,b
  7652  002294  26D9               	addwf	fsr2l,f,c
  7653  002296  5170               	movf	(dir_rewind@fs+1)& (0+255),w,b
  7654  002298  22DA               	addwfc	fsr2h,f,c
  7655  00229A  50DE               	movf	postinc2,w,c
  7656  00229C  5D71               	subwf	dir_rewind@clst& (0+255),w,b
  7657  00229E  50DE               	movf	postinc2,w,c
  7658  0022A0  5972               	subwfb	(dir_rewind@clst+1)& (0+255),w,b
  7659  0022A2  50DE               	movf	postinc2,w,c
  7660  0022A4  5973               	subwfb	(dir_rewind@clst+2)& (0+255),w,b
  7661  0022A6  50DE               	movf	postinc2,w,c
  7662  0022A8  5974               	subwfb	(dir_rewind@clst+3)& (0+255),w,b
  7663  0022AA  A0D8               	btfss	status,0,c
  7664  0022AC  D002               	goto	l862
  7665  0022AE                     u7060:
  7666                           
  7667                           ; BSR set to: 0
  7668                           ;pff.c: 448: return FR_DISK_ERR;
  7669                           
  7670                           ; BSR set to: 0
  7671  0022AE  0E01               	movlw	1
  7672                           
  7673                           ; BSR set to: 0
  7674  0022B0  0012               	return	
  7675  0022B2                     l862:
  7676                           
  7677                           ; BSR set to: 0
  7678                           
  7679                           ; BSR set to: 0
  7680  0022B2  5171               	movf	dir_rewind@clst& (0+255),w,b
  7681  0022B4  1172               	iorwf	(dir_rewind@clst+1)& (0+255),w,b
  7682  0022B6  1173               	iorwf	(dir_rewind@clst+2)& (0+255),w,b
  7683  0022B8  1174               	iorwf	(dir_rewind@clst+3)& (0+255),w,b
  7684  0022BA  A4D8               	btfss	status,2,c
  7685  0022BC  D016               	goto	l866
  7686                           
  7687                           ; BSR set to: 0
  7688  0022BE  C06F  FFD9         	movff	dir_rewind@fs,fsr2l
  7689  0022C2  C070  FFDA         	movff	dir_rewind@fs+1,fsr2h
  7690  0022C6  0E03               	movlw	3
  7691  0022C8  18DE               	xorwf	postinc2,w,c
  7692  0022CA  A4D8               	btfss	status,2,c
  7693  0022CC  D00E               	goto	l866
  7694                           
  7695                           ; BSR set to: 0
  7696                           ;pff.c: 450: clst = (DWORD)fs->dirbase;
  7697                           
  7698                           ; BSR set to: 0
  7699  0022CE  EE20 F00E          	lfsr	2,14
  7700  0022D2  516F               	movf	dir_rewind@fs& (0+255),w,b
  7701  0022D4  26D9               	addwf	fsr2l,f,c
  7702  0022D6  5170               	movf	(dir_rewind@fs+1)& (0+255),w,b
  7703  0022D8  22DA               	addwfc	fsr2h,f,c
  7704  0022DA  CFDE F071          	movff	postinc2,dir_rewind@clst
  7705  0022DE  CFDE F072          	movff	postinc2,dir_rewind@clst+1
  7706  0022E2  CFDE F073          	movff	postinc2,dir_rewind@clst+2
  7707  0022E6  CFDE F074          	movff	postinc2,dir_rewind@clst+3
  7708  0022EA                     l866:
  7709                           
  7710                           ; BSR set to: 0
  7711                           ;pff.c: 452: dj->sect = (0 || clst) ? clust2sect(clst) : fs->dirbase;
  7712  0022EA  EE20 F008          	lfsr	2,8
  7713  0022EE  5165               	movf	dir_rewind@dj& (0+255),w,b
  7714  0022F0  26D9               	addwf	fsr2l,f,c
  7715  0022F2  5166               	movf	(dir_rewind@dj+1)& (0+255),w,b
  7716  0022F4  22DA               	addwfc	fsr2h,f,c
  7717  0022F6  C071  FFDE         	movff	dir_rewind@clst,postinc2
  7718  0022FA  C072  FFDE         	movff	dir_rewind@clst+1,postinc2
  7719  0022FE  C073  FFDE         	movff	dir_rewind@clst+2,postinc2
  7720  002302  C074  FFDE         	movff	dir_rewind@clst+3,postinc2
  7721                           
  7722                           ; BSR set to: 0
  7723  002306  5171               	movf	dir_rewind@clst& (0+255),w,b
  7724  002308  1172               	iorwf	(dir_rewind@clst+1)& (0+255),w,b
  7725  00230A  1173               	iorwf	(dir_rewind@clst+2)& (0+255),w,b
  7726  00230C  1174               	iorwf	(dir_rewind@clst+3)& (0+255),w,b
  7727  00230E  A4D8               	btfss	status,2,c
  7728  002310  D00F               	goto	l870
  7729                           
  7730                           ; BSR set to: 0
  7731  002312  EE20 F00E          	lfsr	2,14
  7732  002316  516F               	movf	dir_rewind@fs& (0+255),w,b
  7733  002318  26D9               	addwf	fsr2l,f,c
  7734  00231A  5170               	movf	(dir_rewind@fs+1)& (0+255),w,b
  7735  00231C  22DA               	addwfc	fsr2h,f,c
  7736  00231E  CFDE F06B          	movff	postinc2,_dir_rewind$1885
  7737  002322  CFDE F06C          	movff	postinc2,_dir_rewind$1885+1
  7738  002326  CFDE F06D          	movff	postinc2,_dir_rewind$1885+2
  7739  00232A  CFDE F06E          	movff	postinc2,_dir_rewind$1885+3
  7740  00232E  D012               	goto	l872
  7741  002330                     l870:
  7742                           
  7743                           ; BSR set to: 0
  7744                           
  7745                           ; BSR set to: 0
  7746  002330  C071  F026         	movff	dir_rewind@clst,clust2sect@clst
  7747  002334  C072  F027         	movff	dir_rewind@clst+1,clust2sect@clst+1
  7748  002338  C073  F028         	movff	dir_rewind@clst+2,clust2sect@clst+2
  7749  00233C  C074  F029         	movff	dir_rewind@clst+3,clust2sect@clst+3
  7750  002340  ECB3  F014         	call	_clust2sect	;wreg free
  7751  002344  C026  F06B         	movff	?_clust2sect,_dir_rewind$1885
  7752  002348  C027  F06C         	movff	?_clust2sect+1,_dir_rewind$1885+1
  7753  00234C  C028  F06D         	movff	?_clust2sect+2,_dir_rewind$1885+2
  7754  002350  C029  F06E         	movff	?_clust2sect+3,_dir_rewind$1885+3
  7755  002354                     l872:
  7756  002354  0100               	movlb	0	; () banked
  7757  002356  EE20 F00C          	lfsr	2,12
  7758  00235A  5165               	movf	dir_rewind@dj& (0+255),w,b
  7759  00235C  26D9               	addwf	fsr2l,f,c
  7760  00235E  5166               	movf	(dir_rewind@dj+1)& (0+255),w,b
  7761  002360  22DA               	addwfc	fsr2h,f,c
  7762  002362  C06B  FFDE         	movff	_dir_rewind$1885,postinc2
  7763  002366  C06C  FFDE         	movff	_dir_rewind$1885+1,postinc2
  7764  00236A  C06D  FFDE         	movff	_dir_rewind$1885+2,postinc2
  7765  00236E  C06E  FFDE         	movff	_dir_rewind$1885+3,postinc2
  7766                           
  7767                           ; BSR set to: 0
  7768                           ;pff.c: 454: return FR_OK;
  7769  002372  0E00               	movlw	0
  7770  002374  0012               	return	
  7771  002376                     __end_of_dir_rewind:
  7772                           	opt stack 0
  7773                           tosu	equ	0xFFF
  7774                           tosh	equ	0xFFE
  7775                           tosl	equ	0xFFD
  7776                           pclath	equ	0xFFA
  7777                           tblptru	equ	0xFF8
  7778                           tblptrh	equ	0xFF7
  7779                           tblptrl	equ	0xFF6
  7780                           tablat	equ	0xFF5
  7781                           prodh	equ	0xFF4
  7782                           prodl	equ	0xFF3
  7783                           intcon	equ	0xFF2
  7784                           intcon2	equ	0xFF1
  7785                           intcon3	equ	0xFF0
  7786                           postinc0	equ	0xFEE
  7787                           wreg	equ	0xFE8
  7788                           indf1	equ	0xFE7
  7789                           postinc1	equ	0xFE6
  7790                           postdec1	equ	0xFE5
  7791                           fsr1h	equ	0xFE2
  7792                           fsr1l	equ	0xFE1
  7793                           indf2	equ	0xFDF
  7794                           postinc2	equ	0xFDE
  7795                           postdec2	equ	0xFDD
  7796                           plusw2	equ	0xFDB
  7797                           fsr2h	equ	0xFDA
  7798                           fsr2l	equ	0xFD9
  7799                           status	equ	0xFD8
  7800                           
  7801 ;; *************** function _dir_next *****************
  7802 ;; Defined at:
  7803 ;;		line 465 in file "pff.c"
  7804 ;; Parameters:    Size  Location     Type
  7805 ;;  dj              2   58[BANK0 ] PTR struct .
  7806 ;;		 -> pf_open@dj(16), 
  7807 ;; Auto vars:     Size  Location     Type
  7808 ;;  clst            4   69[BANK0 ] unsigned long 
  7809 ;;  i               2   73[BANK0 ] unsigned short 
  7810 ;;  fs              2   67[BANK0 ] PTR struct .
  7811 ;;		 -> NULL(0), SDCard@fs(42), 
  7812 ;; Return value:  Size  Location     Type
  7813 ;;                  1    wreg      enum E43
  7814 ;; Registers used:
  7815 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7816 ;; Tracked objects:
  7817 ;;		On entry : 0/0
  7818 ;;		On exit  : 0/0
  7819 ;;		Unchanged: 0/0
  7820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7821 ;;      Params:         0       2       0       0       0       0       0       0       0
  7822 ;;      Locals:         0       8       0       0       0       0       0       0       0
  7823 ;;      Temps:          0       7       0       0       0       0       0       0       0
  7824 ;;      Totals:         0      17       0       0       0       0       0       0       0
  7825 ;;Total ram usage:       17 bytes
  7826 ;; Hardware stack levels used:    1
  7827 ;; Hardware stack levels required when called:    7
  7828 ;; This function calls:
  7829 ;;		_clust2sect
  7830 ;;		_get_fat
  7831 ;; This function is called by:
  7832 ;;		_dir_find
  7833 ;;		_dir_read
  7834 ;;		_pf_readdir
  7835 ;; This function uses a non-reentrant model
  7836 ;;
  7837                           
  7838                           	psect	text34
  7839  00187C                     __ptext34:
  7840                           	opt stack 0
  7841  00187C                     _dir_next:
  7842                           	opt stack 18
  7843                           
  7844                           ;pff.c: 469: DWORD clst;
  7845                           ;pff.c: 470: WORD i;
  7846                           ;pff.c: 471: FATFS *fs = FatFs;
  7847                           
  7848                           ; BSR set to: 0
  7849                           ;incstack = 0
  7850  00187C  C035  F0A3         	movff	_FatFs,dir_next@fs
  7851  001880  C036  F0A4         	movff	_FatFs+1,dir_next@fs+1
  7852                           
  7853                           ;pff.c: 474: i = dj->index + 1;
  7854  001884  C09A  FFD9         	movff	dir_next@dj,fsr2l
  7855  001888  C09B  FFDA         	movff	dir_next@dj+1,fsr2h
  7856  00188C  CFDE F09C          	movff	postinc2,??_dir_next
  7857  001890  CFDD F09D          	movff	postdec2,??_dir_next+1
  7858  001894  0E01               	movlw	1
  7859  001896  0100               	movlb	0	; () banked
  7860  001898  259C               	addwf	??_dir_next& (0+255),w,b
  7861  00189A  6FA9               	movwf	dir_next@i& (0+255),b
  7862  00189C  0E00               	movlw	0
  7863  00189E  219D               	addwfc	(??_dir_next+1)& (0+255),w,b
  7864  0018A0  6FAA               	movwf	(dir_next@i+1)& (0+255),b
  7865                           
  7866                           ; BSR set to: 0
  7867                           ;pff.c: 475: if (!i || !dj->sect)
  7868  0018A2  51A9               	movf	dir_next@i& (0+255),w,b
  7869  0018A4  11AA               	iorwf	(dir_next@i+1)& (0+255),w,b
  7870  0018A6  B4D8               	btfsc	status,2,c
  7871  0018A8  D00C               	goto	u7110
  7872                           
  7873                           ; BSR set to: 0
  7874  0018AA  EE20 F00C          	lfsr	2,12
  7875  0018AE  519A               	movf	dir_next@dj& (0+255),w,b
  7876  0018B0  26D9               	addwf	fsr2l,f,c
  7877  0018B2  519B               	movf	(dir_next@dj+1)& (0+255),w,b
  7878  0018B4  22DA               	addwfc	fsr2h,f,c
  7879  0018B6  50DE               	movf	postinc2,w,c
  7880  0018B8  10DE               	iorwf	postinc2,w,c
  7881  0018BA  10DE               	iorwf	postinc2,w,c
  7882  0018BC  10DE               	iorwf	postinc2,w,c
  7883  0018BE  A4D8               	btfss	status,2,c
  7884  0018C0  D002               	goto	l875
  7885  0018C2                     u7110:
  7886                           
  7887                           ; BSR set to: 0
  7888                           ;pff.c: 476: return FR_NO_FILE;
  7889                           
  7890                           ; BSR set to: 0
  7891  0018C2  0E03               	movlw	3
  7892                           
  7893                           ; BSR set to: 0
  7894  0018C4  0012               	return	
  7895  0018C6                     l875:
  7896                           
  7897                           ; BSR set to: 0
  7898                           ;pff.c: 478: if (!(i % 16)) {
  7899                           
  7900                           ; BSR set to: 0
  7901  0018C6  0E0F               	movlw	15
  7902  0018C8  15A9               	andwf	dir_next@i& (0+255),w,b
  7903  0018CA  6F9C               	movwf	??_dir_next& (0+255),b
  7904  0018CC  0E00               	movlw	0
  7905  0018CE  15AA               	andwf	(dir_next@i+1)& (0+255),w,b
  7906  0018D0  6F9D               	movwf	(??_dir_next+1)& (0+255),b
  7907  0018D2  519C               	movf	??_dir_next& (0+255),w,b
  7908  0018D4  119D               	iorwf	(??_dir_next+1)& (0+255),w,b
  7909  0018D6  A4D8               	btfss	status,2,c
  7910  0018D8  D0A5               	goto	l883
  7911                           
  7912                           ; BSR set to: 0
  7913                           ;pff.c: 479: dj->sect++;
  7914  0018DA  EE20 F00C          	lfsr	2,12
  7915  0018DE  519A               	movf	dir_next@dj& (0+255),w,b
  7916  0018E0  26D9               	addwf	fsr2l,f,c
  7917  0018E2  519B               	movf	(dir_next@dj+1)& (0+255),w,b
  7918  0018E4  22DA               	addwfc	fsr2h,f,c
  7919  0018E6  2ADE               	incf	postinc2,f,c
  7920  0018E8  0E00               	movlw	0
  7921  0018EA  22DE               	addwfc	postinc2,f,c
  7922  0018EC  22DE               	addwfc	postinc2,f,c
  7923  0018EE  22DE               	addwfc	postinc2,f,c
  7924                           
  7925                           ;pff.c: 481: if (dj->clust == 0) {
  7926  0018F0  EE20 F008          	lfsr	2,8
  7927  0018F4  519A               	movf	dir_next@dj& (0+255),w,b
  7928  0018F6  26D9               	addwf	fsr2l,f,c
  7929  0018F8  519B               	movf	(dir_next@dj+1)& (0+255),w,b
  7930  0018FA  22DA               	addwfc	fsr2h,f,c
  7931  0018FC  50DE               	movf	postinc2,w,c
  7932  0018FE  10DE               	iorwf	postinc2,w,c
  7933  001900  10DE               	iorwf	postinc2,w,c
  7934  001902  10DE               	iorwf	postinc2,w,c
  7935  001904  A4D8               	btfss	status,2,c
  7936  001906  D00E               	goto	l880
  7937                           
  7938                           ; BSR set to: 0
  7939                           ;pff.c: 482: if (i >= fs->n_rootdir)
  7940  001908  EE20 F004          	lfsr	2,4
  7941  00190C  51A3               	movf	dir_next@fs& (0+255),w,b
  7942  00190E  26D9               	addwf	fsr2l,f,c
  7943  001910  51A4               	movf	(dir_next@fs+1)& (0+255),w,b
  7944  001912  22DA               	addwfc	fsr2h,f,c
  7945  001914  50DE               	movf	postinc2,w,c
  7946  001916  5DA9               	subwf	dir_next@i& (0+255),w,b
  7947  001918  50DE               	movf	postinc2,w,c
  7948  00191A  59AA               	subwfb	(dir_next@i+1)& (0+255),w,b
  7949  00191C  A0D8               	btfss	status,0,c
  7950  00191E  D082               	goto	l883
  7951                           
  7952                           ; BSR set to: 0
  7953                           ;pff.c: 483: return FR_NO_FILE;
  7954  001920  0E03               	movlw	3
  7955                           
  7956                           ; BSR set to: 0
  7957  001922  0012               	return	
  7958  001924                     l880:
  7959                           
  7960                           ; BSR set to: 0
  7961                           ;pff.c: 485: else {
  7962                           ;pff.c: 486: if (((i / 16) & (fs->csize - 1)) == 0) {
  7963                           
  7964                           ; BSR set to: 0
  7965  001924  C0A9  F09C         	movff	dir_next@i,??_dir_next
  7966  001928  C0AA  F09D         	movff	dir_next@i+1,??_dir_next+1
  7967  00192C  0E04               	movlw	4
  7968  00192E  6F9E               	movwf	(??_dir_next+2)& (0+255),b
  7969  001930                     u7155:
  7970  001930  90D8               	bcf	status,0,c
  7971  001932  339D               	rrcf	(??_dir_next+1)& (0+255),f,b
  7972  001934  339C               	rrcf	??_dir_next& (0+255),f,b
  7973  001936  2F9E               	decfsz	(??_dir_next+2)& (0+255),f,b
  7974  001938  D7FB               	goto	u7155
  7975  00193A  0EFF               	movlw	255
  7976  00193C  6F9F               	movwf	(??_dir_next+3)& (0+255),b
  7977  00193E  0EFF               	movlw	255
  7978  001940  6FA0               	movwf	(??_dir_next+4)& (0+255),b
  7979  001942  EE20 F002          	lfsr	2,2
  7980  001946  51A3               	movf	dir_next@fs& (0+255),w,b
  7981  001948  26D9               	addwf	fsr2l,f,c
  7982  00194A  51A4               	movf	(dir_next@fs+1)& (0+255),w,b
  7983  00194C  22DA               	addwfc	fsr2h,f,c
  7984  00194E  50DF               	movf	indf2,w,c
  7985  001950  6FA1               	movwf	(??_dir_next+5)& (0+255),b
  7986  001952  6BA2               	clrf	(??_dir_next+6)& (0+255),b
  7987  001954  519F               	movf	(??_dir_next+3)& (0+255),w,b
  7988  001956  27A1               	addwf	(??_dir_next+5)& (0+255),f,b
  7989  001958  51A0               	movf	(??_dir_next+4)& (0+255),w,b
  7990  00195A  23A2               	addwfc	(??_dir_next+6)& (0+255),f,b
  7991  00195C  519C               	movf	??_dir_next& (0+255),w,b
  7992  00195E  17A1               	andwf	(??_dir_next+5)& (0+255),f,b
  7993  001960  519D               	movf	(??_dir_next+1)& (0+255),w,b
  7994  001962  17A2               	andwf	(??_dir_next+6)& (0+255),f,b
  7995  001964  51A1               	movf	(??_dir_next+5)& (0+255),w,b
  7996  001966  11A2               	iorwf	(??_dir_next+6)& (0+255),w,b
  7997  001968  A4D8               	btfss	status,2,c
  7998  00196A  D05C               	goto	l883
  7999                           
  8000                           ; BSR set to: 0
  8001                           ;pff.c: 487: clst = get_fat(dj->clust);
  8002  00196C  EE20 F008          	lfsr	2,8
  8003  001970  519A               	movf	dir_next@dj& (0+255),w,b
  8004  001972  26D9               	addwf	fsr2l,f,c
  8005  001974  519B               	movf	(dir_next@dj+1)& (0+255),w,b
  8006  001976  22DA               	addwfc	fsr2h,f,c
  8007  001978  CFDE F072          	movff	postinc2,get_fat@clst
  8008  00197C  CFDE F073          	movff	postinc2,get_fat@clst+1
  8009  001980  CFDE F074          	movff	postinc2,get_fat@clst+2
  8010  001984  CFDE F075          	movff	postinc2,get_fat@clst+3
  8011  001988  EC82  F005         	call	_get_fat	;wreg free
  8012  00198C  C072  F0A5         	movff	?_get_fat,dir_next@clst
  8013  001990  C073  F0A6         	movff	?_get_fat+1,dir_next@clst+1
  8014  001994  C074  F0A7         	movff	?_get_fat+2,dir_next@clst+2
  8015  001998  C075  F0A8         	movff	?_get_fat+3,dir_next@clst+3
  8016                           
  8017                           ;pff.c: 488: if (clst <= 1) return FR_DISK_ERR;
  8018  00199C  0100               	movlb	0	; () banked
  8019  00199E  51A8               	movf	(dir_next@clst+3)& (0+255),w,b
  8020  0019A0  11A7               	iorwf	(dir_next@clst+2)& (0+255),w,b
  8021  0019A2  11A6               	iorwf	(dir_next@clst+1)& (0+255),w,b
  8022  0019A4  E106               	bnz	l6512
  8023  0019A6  0E02               	movlw	2
  8024  0019A8  5DA5               	subwf	dir_next@clst& (0+255),w,b
  8025  0019AA  B0D8               	btfsc	status,0,c
  8026  0019AC  D002               	goto	l884
  8027                           
  8028                           ; BSR set to: 0
  8029  0019AE  0E01               	movlw	1
  8030                           
  8031                           ; BSR set to: 0
  8032  0019B0  0012               	return	
  8033  0019B2                     l884:
  8034  0019B2                     l6512:
  8035                           
  8036                           ; BSR set to: 0
  8037                           ;pff.c: 489: if (clst >= fs->n_fatent)
  8038  0019B2  EE20 F006          	lfsr	2,6
  8039  0019B6  51A3               	movf	dir_next@fs& (0+255),w,b
  8040  0019B8  26D9               	addwf	fsr2l,f,c
  8041  0019BA  51A4               	movf	(dir_next@fs+1)& (0+255),w,b
  8042  0019BC  22DA               	addwfc	fsr2h,f,c
  8043  0019BE  50DE               	movf	postinc2,w,c
  8044  0019C0  5DA5               	subwf	dir_next@clst& (0+255),w,b
  8045  0019C2  50DE               	movf	postinc2,w,c
  8046  0019C4  59A6               	subwfb	(dir_next@clst+1)& (0+255),w,b
  8047  0019C6  50DE               	movf	postinc2,w,c
  8048  0019C8  59A7               	subwfb	(dir_next@clst+2)& (0+255),w,b
  8049  0019CA  50DE               	movf	postinc2,w,c
  8050  0019CC  59A8               	subwfb	(dir_next@clst+3)& (0+255),w,b
  8051  0019CE  A0D8               	btfss	status,0,c
  8052  0019D0  D002               	goto	l885
  8053                           
  8054                           ; BSR set to: 0
  8055                           ;pff.c: 490: return FR_NO_FILE;
  8056  0019D2  0E03               	movlw	3
  8057                           
  8058                           ; BSR set to: 0
  8059  0019D4  0012               	return	
  8060  0019D6                     l885:
  8061                           
  8062                           ; BSR set to: 0
  8063                           ;pff.c: 491: dj->clust = clst;
  8064                           
  8065                           ; BSR set to: 0
  8066  0019D6  EE20 F008          	lfsr	2,8
  8067  0019DA  519A               	movf	dir_next@dj& (0+255),w,b
  8068  0019DC  26D9               	addwf	fsr2l,f,c
  8069  0019DE  519B               	movf	(dir_next@dj+1)& (0+255),w,b
  8070  0019E0  22DA               	addwfc	fsr2h,f,c
  8071  0019E2  C0A5  FFDE         	movff	dir_next@clst,postinc2
  8072  0019E6  C0A6  FFDE         	movff	dir_next@clst+1,postinc2
  8073  0019EA  C0A7  FFDE         	movff	dir_next@clst+2,postinc2
  8074  0019EE  C0A8  FFDE         	movff	dir_next@clst+3,postinc2
  8075                           
  8076                           ; BSR set to: 0
  8077                           ;pff.c: 492: dj->sect = clust2sect(clst);
  8078  0019F2  C0A5  F026         	movff	dir_next@clst,clust2sect@clst
  8079  0019F6  C0A6  F027         	movff	dir_next@clst+1,clust2sect@clst+1
  8080  0019FA  C0A7  F028         	movff	dir_next@clst+2,clust2sect@clst+2
  8081  0019FE  C0A8  F029         	movff	dir_next@clst+3,clust2sect@clst+3
  8082  001A02  ECB3  F014         	call	_clust2sect	;wreg free
  8083  001A06  0100               	movlb	0	; () banked
  8084  001A08  EE20 F00C          	lfsr	2,12
  8085  001A0C  519A               	movf	dir_next@dj& (0+255),w,b
  8086  001A0E  26D9               	addwf	fsr2l,f,c
  8087  001A10  519B               	movf	(dir_next@dj+1)& (0+255),w,b
  8088  001A12  22DA               	addwfc	fsr2h,f,c
  8089  001A14  C026  FFDE         	movff	?_clust2sect,postinc2
  8090  001A18  C027  FFDE         	movff	?_clust2sect+1,postinc2
  8091  001A1C  C028  FFDE         	movff	?_clust2sect+2,postinc2
  8092  001A20  C029  FFDE         	movff	?_clust2sect+3,postinc2
  8093  001A24                     l883:
  8094                           
  8095                           ; BSR set to: 0
  8096                           ;pff.c: 493: }
  8097                           ;pff.c: 494: }
  8098                           ;pff.c: 495: }
  8099                           ;pff.c: 497: dj->index = i;
  8100                           
  8101                           ; BSR set to: 0
  8102                           
  8103                           ; BSR set to: 0
  8104                           
  8105                           ; BSR set to: 0
  8106  001A24  C09A  FFD9         	movff	dir_next@dj,fsr2l
  8107  001A28  C09B  FFDA         	movff	dir_next@dj+1,fsr2h
  8108  001A2C  C0A9  FFDE         	movff	dir_next@i,postinc2
  8109  001A30  C0AA  FFDD         	movff	dir_next@i+1,postdec2
  8110                           
  8111                           ; BSR set to: 0
  8112                           ;pff.c: 499: return FR_OK;
  8113  001A34  0E00               	movlw	0
  8114  001A36  0012               	return	
  8115  001A38                     __end_of_dir_next:
  8116                           	opt stack 0
  8117                           tosu	equ	0xFFF
  8118                           tosh	equ	0xFFE
  8119                           tosl	equ	0xFFD
  8120                           pclath	equ	0xFFA
  8121                           tblptru	equ	0xFF8
  8122                           tblptrh	equ	0xFF7
  8123                           tblptrl	equ	0xFF6
  8124                           tablat	equ	0xFF5
  8125                           prodh	equ	0xFF4
  8126                           prodl	equ	0xFF3
  8127                           intcon	equ	0xFF2
  8128                           intcon2	equ	0xFF1
  8129                           intcon3	equ	0xFF0
  8130                           postinc0	equ	0xFEE
  8131                           wreg	equ	0xFE8
  8132                           indf1	equ	0xFE7
  8133                           postinc1	equ	0xFE6
  8134                           postdec1	equ	0xFE5
  8135                           fsr1h	equ	0xFE2
  8136                           fsr1l	equ	0xFE1
  8137                           indf2	equ	0xFDF
  8138                           postinc2	equ	0xFDE
  8139                           postdec2	equ	0xFDD
  8140                           plusw2	equ	0xFDB
  8141                           fsr2h	equ	0xFDA
  8142                           fsr2l	equ	0xFD9
  8143                           status	equ	0xFD8
  8144                           
  8145 ;; *************** function _get_fat *****************
  8146 ;; Defined at:
  8147 ;;		line 350 in file "pff.c"
  8148 ;; Parameters:    Size  Location     Type
  8149 ;;  clst            4   18[BANK0 ] unsigned long 
  8150 ;; Auto vars:     Size  Location     Type
  8151 ;;  bc              2   54[BANK0 ] unsigned int 
  8152 ;;  ofs             2   48[BANK0 ] unsigned int 
  8153 ;;  wc              2   46[BANK0 ] unsigned int 
  8154 ;;  buf             4   50[BANK0 ] unsigned char [4]
  8155 ;;  fs              2   56[BANK0 ] PTR struct .
  8156 ;;		 -> NULL(0), SDCard@fs(42), 
  8157 ;; Return value:  Size  Location     Type
  8158 ;;                  4   18[BANK0 ] unsigned long 
  8159 ;; Registers used:
  8160 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8161 ;; Tracked objects:
  8162 ;;		On entry : 0/0
  8163 ;;		On exit  : 0/0
  8164 ;;		Unchanged: 0/0
  8165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8166 ;;      Params:         0       4       0       0       0       0       0       0       0
  8167 ;;      Locals:         0      14       0       0       0       0       0       0       0
  8168 ;;      Temps:          0      22       0       0       0       0       0       0       0
  8169 ;;      Totals:         0      40       0       0       0       0       0       0       0
  8170 ;;Total ram usage:       40 bytes
  8171 ;; Hardware stack levels used:    1
  8172 ;; Hardware stack levels required when called:    6
  8173 ;; This function calls:
  8174 ;;		_disk_readp
  8175 ;; This function is called by:
  8176 ;;		_dir_next
  8177 ;;		_pf_read
  8178 ;;		_pf_write
  8179 ;;		_pf_lseek
  8180 ;; This function uses a non-reentrant model
  8181 ;;
  8182                           
  8183                           	psect	text35
  8184  000B04                     __ptext35:
  8185                           	opt stack 0
  8186  000B04                     _get_fat:
  8187                           	opt stack 21
  8188                           
  8189                           ;pff.c: 354: BYTE buf[4];
  8190                           ;pff.c: 355: FATFS *fs = FatFs;
  8191                           
  8192                           ; BSR set to: 0
  8193                           ;incstack = 0
  8194  000B04  C035  F098         	movff	_FatFs,get_fat@fs
  8195  000B08  C036  F099         	movff	_FatFs+1,get_fat@fs+1
  8196                           
  8197                           ;pff.c: 357: if (clst < 2 || clst >= fs->n_fatent)
  8198  000B0C  0100               	movlb	0	; () banked
  8199  000B0E  5175               	movf	(get_fat@clst+3)& (0+255),w,b
  8200  000B10  1174               	iorwf	(get_fat@clst+2)& (0+255),w,b
  8201  000B12  1173               	iorwf	(get_fat@clst+1)& (0+255),w,b
  8202  000B14  E104               	bnz	u6890
  8203  000B16  0E02               	movlw	2
  8204  000B18  5D72               	subwf	get_fat@clst& (0+255),w,b
  8205  000B1A  A0D8               	btfss	status,0,c
  8206  000B1C  D010               	goto	u6900
  8207  000B1E                     u6890:
  8208                           
  8209                           ; BSR set to: 0
  8210  000B1E  EE20 F006          	lfsr	2,6
  8211  000B22  5198               	movf	get_fat@fs& (0+255),w,b
  8212  000B24  26D9               	addwf	fsr2l,f,c
  8213  000B26  5199               	movf	(get_fat@fs+1)& (0+255),w,b
  8214  000B28  22DA               	addwfc	fsr2h,f,c
  8215  000B2A  50DE               	movf	postinc2,w,c
  8216  000B2C  5D72               	subwf	get_fat@clst& (0+255),w,b
  8217  000B2E  50DE               	movf	postinc2,w,c
  8218  000B30  5973               	subwfb	(get_fat@clst+1)& (0+255),w,b
  8219  000B32  50DE               	movf	postinc2,w,c
  8220  000B34  5974               	subwfb	(get_fat@clst+2)& (0+255),w,b
  8221  000B36  50DE               	movf	postinc2,w,c
  8222  000B38  5975               	subwfb	(get_fat@clst+3)& (0+255),w,b
  8223  000B3A  A0D8               	btfss	status,0,c
  8224  000B3C  D1BD               	goto	l834
  8225  000B3E                     u6900:
  8226                           
  8227                           ; BSR set to: 0
  8228                           ;pff.c: 358: return 1;
  8229                           
  8230                           ; BSR set to: 0
  8231  000B3E  0E01               	movlw	1
  8232  000B40  6F72               	movwf	?_get_fat& (0+255),b
  8233  000B42  0E00               	movlw	0
  8234  000B44  6F73               	movwf	(?_get_fat+1)& (0+255),b
  8235  000B46  0E00               	movlw	0
  8236  000B48  6F74               	movwf	(?_get_fat+2)& (0+255),b
  8237  000B4A  0E00               	movlw	0
  8238  000B4C  6F75               	movwf	(?_get_fat+3)& (0+255),b
  8239                           
  8240                           ; BSR set to: 0
  8241  000B4E  0012               	return	
  8242  000B50                     l835:
  8243                           
  8244                           ; BSR set to: 0
  8245                           ;pff.c: 363: UINT wc, bc, ofs;
  8246                           ;pff.c: 365: bc = (UINT)clst; bc += bc / 2;
  8247  000B50  C072  F096         	movff	get_fat@clst,get_fat@bc
  8248  000B54  C073  F097         	movff	get_fat@clst+1,get_fat@bc+1
  8249                           
  8250                           ; BSR set to: 0
  8251  000B58  90D8               	bcf	status,0,c
  8252  000B5A  3197               	rrcf	(get_fat@bc+1)& (0+255),w,b
  8253  000B5C  6F77               	movwf	(??_get_fat+1)& (0+255),b
  8254  000B5E  3196               	rrcf	get_fat@bc& (0+255),w,b
  8255  000B60  6F76               	movwf	??_get_fat& (0+255),b
  8256  000B62  5176               	movf	??_get_fat& (0+255),w,b
  8257  000B64  2796               	addwf	get_fat@bc& (0+255),f,b
  8258  000B66  5177               	movf	(??_get_fat+1)& (0+255),w,b
  8259  000B68  2397               	addwfc	(get_fat@bc+1)& (0+255),f,b
  8260                           
  8261                           ;pff.c: 366: ofs = bc % 512; bc /= 512;
  8262  000B6A  0EFF               	movlw	255
  8263  000B6C  1596               	andwf	get_fat@bc& (0+255),w,b
  8264  000B6E  6F90               	movwf	get_fat@ofs& (0+255),b
  8265  000B70  0E01               	movlw	1
  8266  000B72  1597               	andwf	(get_fat@bc+1)& (0+255),w,b
  8267  000B74  6F91               	movwf	(get_fat@ofs+1)& (0+255),b
  8268  000B76  0E09               	movlw	9
  8269  000B78  6F76               	movwf	??_get_fat& (0+255),b
  8270  000B7A                     u6915:
  8271  000B7A  90D8               	bcf	status,0,c
  8272  000B7C  3397               	rrcf	(get_fat@bc+1)& (0+255),f,b
  8273  000B7E  3396               	rrcf	get_fat@bc& (0+255),f,b
  8274  000B80  2F76               	decfsz	??_get_fat& (0+255),f,b
  8275  000B82  D7FB               	goto	u6915
  8276                           
  8277                           ;pff.c: 367: if (ofs != 511) {
  8278  000B84  2990               	incf	get_fat@ofs& (0+255),w,b
  8279  000B86  E103               	bnz	u6920
  8280  000B88  0591               	decf	(get_fat@ofs+1)& (0+255),w,b
  8281  000B8A  B4D8               	btfsc	status,2,c
  8282  000B8C  D02C               	goto	l836
  8283  000B8E                     u6920:
  8284                           
  8285                           ; BSR set to: 0
  8286                           ;pff.c: 368: if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
  8287  000B8E  0E92               	movlw	low get_fat@buf
  8288  000B90  6F60               	movwf	disk_readp@rd& (0+255),b
  8289  000B92  0E00               	movlw	high get_fat@buf
  8290  000B94  6F61               	movwf	(disk_readp@rd+1)& (0+255),b
  8291  000B96  EE20 F00A          	lfsr	2,10
  8292  000B9A  5198               	movf	get_fat@fs& (0+255),w,b
  8293  000B9C  26D9               	addwf	fsr2l,f,c
  8294  000B9E  5199               	movf	(get_fat@fs+1)& (0+255),w,b
  8295  000BA0  22DA               	addwfc	fsr2h,f,c
  8296  000BA2  CFDE F076          	movff	postinc2,??_get_fat
  8297  000BA6  CFDE F077          	movff	postinc2,??_get_fat+1
  8298  000BAA  CFDE F078          	movff	postinc2,??_get_fat+2
  8299  000BAE  CFDE F079          	movff	postinc2,??_get_fat+3
  8300  000BB2  5196               	movf	get_fat@bc& (0+255),w,b
  8301  000BB4  2576               	addwf	??_get_fat& (0+255),w,b
  8302  000BB6  6F62               	movwf	disk_readp@sector& (0+255),b
  8303  000BB8  5197               	movf	(get_fat@bc+1)& (0+255),w,b
  8304  000BBA  2177               	addwfc	(??_get_fat+1)& (0+255),w,b
  8305  000BBC  6F63               	movwf	(disk_readp@sector+1)& (0+255),b
  8306  000BBE  0E00               	movlw	0
  8307  000BC0  2178               	addwfc	(??_get_fat+2)& (0+255),w,b
  8308  000BC2  6F64               	movwf	(disk_readp@sector+2)& (0+255),b
  8309  000BC4  0E00               	movlw	0
  8310  000BC6  2179               	addwfc	(??_get_fat+3)& (0+255),w,b
  8311  000BC8  6F65               	movwf	(disk_readp@sector+3)& (0+255),b
  8312  000BCA  C090  F066         	movff	get_fat@ofs,disk_readp@offset
  8313  000BCE  C091  F067         	movff	get_fat@ofs+1,disk_readp@offset+1
  8314  000BD2  0E00               	movlw	0
  8315  000BD4  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  8316  000BD6  0E02               	movlw	2
  8317  000BD8  6F68               	movwf	disk_readp@count& (0+255),b
  8318  000BDA  EC3C  F009         	call	_disk_readp	;wreg free
  8319  000BDE  0900               	iorlw	0
  8320  000BE0  A4D8               	btfss	status,2,c
  8321  000BE2  D178               	goto	l838
  8322  000BE4  D061               	goto	l841
  8323  000BE6                     l836:
  8324                           
  8325                           ;pff.c: 370: if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
  8326  000BE6  0E92               	movlw	low get_fat@buf
  8327  000BE8  0100               	movlb	0	; () banked
  8328  000BEA  6F60               	movwf	disk_readp@rd& (0+255),b
  8329  000BEC  0E00               	movlw	high get_fat@buf
  8330  000BEE  6F61               	movwf	(disk_readp@rd+1)& (0+255),b
  8331  000BF0  EE20 F00A          	lfsr	2,10
  8332  000BF4  5198               	movf	get_fat@fs& (0+255),w,b
  8333  000BF6  26D9               	addwf	fsr2l,f,c
  8334  000BF8  5199               	movf	(get_fat@fs+1)& (0+255),w,b
  8335  000BFA  22DA               	addwfc	fsr2h,f,c
  8336  000BFC  CFDE F076          	movff	postinc2,??_get_fat
  8337  000C00  CFDE F077          	movff	postinc2,??_get_fat+1
  8338  000C04  CFDE F078          	movff	postinc2,??_get_fat+2
  8339  000C08  CFDE F079          	movff	postinc2,??_get_fat+3
  8340  000C0C  5196               	movf	get_fat@bc& (0+255),w,b
  8341  000C0E  2576               	addwf	??_get_fat& (0+255),w,b
  8342  000C10  6F62               	movwf	disk_readp@sector& (0+255),b
  8343  000C12  5197               	movf	(get_fat@bc+1)& (0+255),w,b
  8344  000C14  2177               	addwfc	(??_get_fat+1)& (0+255),w,b
  8345  000C16  6F63               	movwf	(disk_readp@sector+1)& (0+255),b
  8346  000C18  0E00               	movlw	0
  8347  000C1A  2178               	addwfc	(??_get_fat+2)& (0+255),w,b
  8348  000C1C  6F64               	movwf	(disk_readp@sector+2)& (0+255),b
  8349  000C1E  0E00               	movlw	0
  8350  000C20  2179               	addwfc	(??_get_fat+3)& (0+255),w,b
  8351  000C22  6F65               	movwf	(disk_readp@sector+3)& (0+255),b
  8352  000C24  0E01               	movlw	1
  8353  000C26  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
  8354  000C28  6966               	setf	disk_readp@offset& (0+255),b
  8355  000C2A  0E00               	movlw	0
  8356  000C2C  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  8357  000C2E  0E01               	movlw	1
  8358  000C30  6F68               	movwf	disk_readp@count& (0+255),b
  8359  000C32  EC3C  F009         	call	_disk_readp	;wreg free
  8360  000C36  0900               	iorlw	0
  8361  000C38  A4D8               	btfss	status,2,c
  8362  000C3A  D14C               	goto	l838
  8363                           
  8364                           ;pff.c: 371: if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
  8365  000C3C  0E93               	movlw	low (get_fat@buf+1)
  8366  000C3E  0100               	movlb	0	; () banked
  8367  000C40  6F60               	movwf	disk_readp@rd& (0+255),b
  8368  000C42  0E00               	movlw	high (get_fat@buf+1)
  8369  000C44  6F61               	movwf	(disk_readp@rd+1)& (0+255),b
  8370  000C46  EE20 F00A          	lfsr	2,10
  8371  000C4A  5198               	movf	get_fat@fs& (0+255),w,b
  8372  000C4C  26D9               	addwf	fsr2l,f,c
  8373  000C4E  5199               	movf	(get_fat@fs+1)& (0+255),w,b
  8374  000C50  22DA               	addwfc	fsr2h,f,c
  8375  000C52  CFDE F076          	movff	postinc2,??_get_fat
  8376  000C56  CFDE F077          	movff	postinc2,??_get_fat+1
  8377  000C5A  CFDE F078          	movff	postinc2,??_get_fat+2
  8378  000C5E  CFDE F079          	movff	postinc2,??_get_fat+3
  8379  000C62  5196               	movf	get_fat@bc& (0+255),w,b
  8380  000C64  2576               	addwf	??_get_fat& (0+255),w,b
  8381  000C66  6F7A               	movwf	(??_get_fat+4)& (0+255),b
  8382  000C68  5197               	movf	(get_fat@bc+1)& (0+255),w,b
  8383  000C6A  2177               	addwfc	(??_get_fat+1)& (0+255),w,b
  8384  000C6C  6F7B               	movwf	(??_get_fat+5)& (0+255),b
  8385  000C6E  0E00               	movlw	0
  8386  000C70  2178               	addwfc	(??_get_fat+2)& (0+255),w,b
  8387  000C72  6F7C               	movwf	(??_get_fat+6)& (0+255),b
  8388  000C74  0E00               	movlw	0
  8389  000C76  2179               	addwfc	(??_get_fat+3)& (0+255),w,b
  8390  000C78  6F7D               	movwf	(??_get_fat+7)& (0+255),b
  8391  000C7A  0E01               	movlw	1
  8392  000C7C  257A               	addwf	(??_get_fat+4)& (0+255),w,b
  8393  000C7E  6F62               	movwf	disk_readp@sector& (0+255),b
  8394  000C80  0E00               	movlw	0
  8395  000C82  217B               	addwfc	(??_get_fat+5)& (0+255),w,b
  8396  000C84  6F63               	movwf	(disk_readp@sector+1)& (0+255),b
  8397  000C86  0E00               	movlw	0
  8398  000C88  217C               	addwfc	(??_get_fat+6)& (0+255),w,b
  8399  000C8A  6F64               	movwf	(disk_readp@sector+2)& (0+255),b
  8400  000C8C  0E00               	movlw	0
  8401  000C8E  217D               	addwfc	(??_get_fat+7)& (0+255),w,b
  8402  000C90  6F65               	movwf	(disk_readp@sector+3)& (0+255),b
  8403  000C92  0E00               	movlw	0
  8404  000C94  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
  8405  000C96  0E00               	movlw	0
  8406  000C98  6F66               	movwf	disk_readp@offset& (0+255),b
  8407  000C9A  0E00               	movlw	0
  8408  000C9C  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  8409  000C9E  0E01               	movlw	1
  8410  000CA0  6F68               	movwf	disk_readp@count& (0+255),b
  8411  000CA2  EC3C  F009         	call	_disk_readp	;wreg free
  8412  000CA6  D79B               	goto	L4
  8413  000CA8                     l841:
  8414                           
  8415                           ;pff.c: 372: }
  8416                           ;pff.c: 373: wc = (WORD)(((WORD)*((BYTE*)(buf)+1)<<8)|(WORD)*(BYTE*)(buf));
  8417  000CA8  0100               	movlb	0	; () banked
  8418  000CAA  5193               	movf	(get_fat@buf+1)& (0+255),w,b
  8419  000CAC  6F76               	movwf	??_get_fat& (0+255),b
  8420  000CAE  5192               	movf	get_fat@buf& (0+255),w,b
  8421  000CB0  6F8E               	movwf	get_fat@wc& (0+255),b
  8422  000CB2  C076  F08F         	movff	??_get_fat,get_fat@wc+1
  8423                           
  8424                           ; BSR set to: 0
  8425                           ;pff.c: 374: return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  8426  000CB6  B172               	btfsc	get_fat@clst& (0+255),0,b
  8427  000CB8  D007               	goto	l843
  8428                           
  8429                           ; BSR set to: 0
  8430  000CBA  0EFF               	movlw	255
  8431  000CBC  158E               	andwf	get_fat@wc& (0+255),w,b
  8432  000CBE  6F8C               	movwf	_get_fat$1825& (0+255),b
  8433  000CC0  0E0F               	movlw	15
  8434  000CC2  158F               	andwf	(get_fat@wc+1)& (0+255),w,b
  8435  000CC4  6F8D               	movwf	(_get_fat$1825+1)& (0+255),b
  8436  000CC6  D00F               	goto	l845
  8437  000CC8                     l843:
  8438                           
  8439                           ; BSR set to: 0
  8440                           
  8441                           ; BSR set to: 0
  8442  000CC8  C08E  F076         	movff	get_fat@wc,??_get_fat
  8443  000CCC  C08F  F077         	movff	get_fat@wc+1,??_get_fat+1
  8444  000CD0  0E04               	movlw	4
  8445  000CD2  6F78               	movwf	(??_get_fat+2)& (0+255),b
  8446  000CD4                     u6975:
  8447  000CD4  90D8               	bcf	status,0,c
  8448  000CD6  3377               	rrcf	(??_get_fat+1)& (0+255),f,b
  8449  000CD8  3376               	rrcf	??_get_fat& (0+255),f,b
  8450  000CDA  2F78               	decfsz	(??_get_fat+2)& (0+255),f,b
  8451  000CDC  D7FB               	goto	u6975
  8452  000CDE  C076  F08C         	movff	??_get_fat,_get_fat$1825
  8453  000CE2  C077  F08D         	movff	??_get_fat+1,_get_fat$1825+1
  8454  000CE6                     l845:
  8455                           
  8456                           ; BSR set to: 0
  8457                           
  8458                           ; BSR set to: 0
  8459  000CE6  C08C  F072         	movff	_get_fat$1825,?_get_fat
  8460  000CEA  C08D  F073         	movff	_get_fat$1825+1,?_get_fat+1
  8461  000CEE  6B74               	clrf	(?_get_fat+2)& (0+255),b
  8462  000CF0  6B75               	clrf	(?_get_fat+3)& (0+255),b
  8463                           
  8464                           ; BSR set to: 0
  8465  000CF2  0012               	return	
  8466  000CF4                     
  8467                           ; BSR set to: 0
  8468                           ;pff.c: 379: if (disk_readp(buf, fs->fatbase + clst / 256, ((UINT)clst % 256) * 2, 2)) b
      +                          reak;
  8469                           
  8470                           ; BSR set to: 0
  8471  000CF4  0E92               	movlw	low get_fat@buf
  8472  000CF6  6F60               	movwf	disk_readp@rd& (0+255),b
  8473  000CF8  0E00               	movlw	high get_fat@buf
  8474  000CFA  6F61               	movwf	(disk_readp@rd+1)& (0+255),b
  8475  000CFC  EE20 F00A          	lfsr	2,10
  8476  000D00  5198               	movf	get_fat@fs& (0+255),w,b
  8477  000D02  26D9               	addwf	fsr2l,f,c
  8478  000D04  5199               	movf	(get_fat@fs+1)& (0+255),w,b
  8479  000D06  22DA               	addwfc	fsr2h,f,c
  8480  000D08  CFDE F076          	movff	postinc2,??_get_fat
  8481  000D0C  CFDE F077          	movff	postinc2,??_get_fat+1
  8482  000D10  CFDE F078          	movff	postinc2,??_get_fat+2
  8483  000D14  CFDE F079          	movff	postinc2,??_get_fat+3
  8484  000D18  C072  F07A         	movff	get_fat@clst,??_get_fat+4
  8485  000D1C  C073  F07B         	movff	get_fat@clst+1,??_get_fat+5
  8486  000D20  C074  F07C         	movff	get_fat@clst+2,??_get_fat+6
  8487  000D24  C075  F07D         	movff	get_fat@clst+3,??_get_fat+7
  8488  000D28  C07B  F07A         	movff	??_get_fat+5,??_get_fat+4
  8489  000D2C  C07C  F07B         	movff	??_get_fat+6,??_get_fat+5
  8490  000D30  C07D  F07C         	movff	??_get_fat+7,??_get_fat+6
  8491  000D34  6B7D               	clrf	(??_get_fat+7)& (0+255),b
  8492  000D36  5176               	movf	??_get_fat& (0+255),w,b
  8493  000D38  257A               	addwf	(??_get_fat+4)& (0+255),w,b
  8494  000D3A  6F62               	movwf	disk_readp@sector& (0+255),b
  8495  000D3C  5177               	movf	(??_get_fat+1)& (0+255),w,b
  8496  000D3E  217B               	addwfc	(??_get_fat+5)& (0+255),w,b
  8497  000D40  6F63               	movwf	(disk_readp@sector+1)& (0+255),b
  8498  000D42  5178               	movf	(??_get_fat+2)& (0+255),w,b
  8499  000D44  217C               	addwfc	(??_get_fat+6)& (0+255),w,b
  8500  000D46  6F64               	movwf	(disk_readp@sector+2)& (0+255),b
  8501  000D48  5179               	movf	(??_get_fat+3)& (0+255),w,b
  8502  000D4A  217D               	addwfc	(??_get_fat+7)& (0+255),w,b
  8503  000D4C  6F65               	movwf	(disk_readp@sector+3)& (0+255),b
  8504  000D4E  0EFF               	movlw	255
  8505  000D50  1572               	andwf	get_fat@clst& (0+255),w,b
  8506  000D52  6F7E               	movwf	(??_get_fat+8)& (0+255),b
  8507  000D54  0E00               	movlw	0
  8508  000D56  1573               	andwf	(get_fat@clst+1)& (0+255),w,b
  8509  000D58  6F7F               	movwf	(??_get_fat+9)& (0+255),b
  8510  000D5A  90D8               	bcf	status,0,c
  8511  000D5C  357E               	rlcf	(??_get_fat+8)& (0+255),w,b
  8512  000D5E  6F66               	movwf	disk_readp@offset& (0+255),b
  8513  000D60  357F               	rlcf	(??_get_fat+9)& (0+255),w,b
  8514  000D62  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
  8515  000D64  0E00               	movlw	0
  8516  000D66  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  8517  000D68  0E02               	movlw	2
  8518  000D6A  6F68               	movwf	disk_readp@count& (0+255),b
  8519  000D6C  EC3C  F009         	call	_disk_readp	;wreg free
  8520  000D70  0900               	iorlw	0
  8521  000D72  A4D8               	btfss	status,2,c
  8522  000D74  D0AF               	goto	l838
  8523                           
  8524                           ;pff.c: 380: return (WORD)(((WORD)*((BYTE*)(buf)+1)<<8)|(WORD)*(BYTE*)(buf));
  8525  000D76  0100               	movlb	0	; () banked
  8526  000D78  5192               	movf	get_fat@buf& (0+255),w,b
  8527  000D7A  C093  F076         	movff	get_fat@buf+1,??_get_fat
  8528  000D7E  6B77               	clrf	(??_get_fat+1)& (0+255),b
  8529  000D80  C076  F077         	movff	??_get_fat,??_get_fat+1
  8530  000D84  6B76               	clrf	??_get_fat& (0+255),b
  8531  000D86  1376               	iorwf	??_get_fat& (0+255),f,b
  8532  000D88  0E00               	movlw	0
  8533  000D8A  1377               	iorwf	(??_get_fat+1)& (0+255),f,b
  8534  000D8C  C076  F072         	movff	??_get_fat,?_get_fat
  8535  000D90  C077  F073         	movff	??_get_fat+1,?_get_fat+1
  8536  000D94  6B74               	clrf	(?_get_fat+2)& (0+255),b
  8537  000D96  6B75               	clrf	(?_get_fat+3)& (0+255),b
  8538                           
  8539                           ; BSR set to: 0
  8540  000D98  0012               	return	
  8541  000D9A                     
  8542                           ; BSR set to: 0
  8543                           ;pff.c: 384: if (disk_readp(buf, fs->fatbase + clst / 128, ((UINT)clst % 128) * 4, 4)) b
      +                          reak;
  8544                           
  8545                           ; BSR set to: 0
  8546  000D9A  0E92               	movlw	low get_fat@buf
  8547  000D9C  6F60               	movwf	disk_readp@rd& (0+255),b
  8548  000D9E  0E00               	movlw	high get_fat@buf
  8549  000DA0  6F61               	movwf	(disk_readp@rd+1)& (0+255),b
  8550  000DA2  EE20 F00A          	lfsr	2,10
  8551  000DA6  5198               	movf	get_fat@fs& (0+255),w,b
  8552  000DA8  26D9               	addwf	fsr2l,f,c
  8553  000DAA  5199               	movf	(get_fat@fs+1)& (0+255),w,b
  8554  000DAC  22DA               	addwfc	fsr2h,f,c
  8555  000DAE  CFDE F076          	movff	postinc2,??_get_fat
  8556  000DB2  CFDE F077          	movff	postinc2,??_get_fat+1
  8557  000DB6  CFDE F078          	movff	postinc2,??_get_fat+2
  8558  000DBA  CFDE F079          	movff	postinc2,??_get_fat+3
  8559  000DBE  C072  F07A         	movff	get_fat@clst,??_get_fat+4
  8560  000DC2  C073  F07B         	movff	get_fat@clst+1,??_get_fat+5
  8561  000DC6  C074  F07C         	movff	get_fat@clst+2,??_get_fat+6
  8562  000DCA  C075  F07D         	movff	get_fat@clst+3,??_get_fat+7
  8563  000DCE  0E08               	movlw	8
  8564  000DD0  D005               	goto	u6990
  8565  000DD2                     u6995:
  8566  000DD2  90D8               	bcf	status,0,c
  8567  000DD4  337D               	rrcf	(??_get_fat+7)& (0+255),f,b
  8568  000DD6  337C               	rrcf	(??_get_fat+6)& (0+255),f,b
  8569  000DD8  337B               	rrcf	(??_get_fat+5)& (0+255),f,b
  8570  000DDA  337A               	rrcf	(??_get_fat+4)& (0+255),f,b
  8571  000DDC                     u6990:
  8572  000DDC  2EE8               	decfsz	wreg,f,c
  8573  000DDE  D7F9               	goto	u6995
  8574  000DE0  5176               	movf	??_get_fat& (0+255),w,b
  8575  000DE2  257A               	addwf	(??_get_fat+4)& (0+255),w,b
  8576  000DE4  6F62               	movwf	disk_readp@sector& (0+255),b
  8577  000DE6  5177               	movf	(??_get_fat+1)& (0+255),w,b
  8578  000DE8  217B               	addwfc	(??_get_fat+5)& (0+255),w,b
  8579  000DEA  6F63               	movwf	(disk_readp@sector+1)& (0+255),b
  8580  000DEC  5178               	movf	(??_get_fat+2)& (0+255),w,b
  8581  000DEE  217C               	addwfc	(??_get_fat+6)& (0+255),w,b
  8582  000DF0  6F64               	movwf	(disk_readp@sector+2)& (0+255),b
  8583  000DF2  5179               	movf	(??_get_fat+3)& (0+255),w,b
  8584  000DF4  217D               	addwfc	(??_get_fat+7)& (0+255),w,b
  8585  000DF6  6F65               	movwf	(disk_readp@sector+3)& (0+255),b
  8586  000DF8  0E7F               	movlw	127
  8587  000DFA  1572               	andwf	get_fat@clst& (0+255),w,b
  8588  000DFC  6F7E               	movwf	(??_get_fat+8)& (0+255),b
  8589  000DFE  0E00               	movlw	0
  8590  000E00  1573               	andwf	(get_fat@clst+1)& (0+255),w,b
  8591  000E02  6F7F               	movwf	(??_get_fat+9)& (0+255),b
  8592  000E04  90D8               	bcf	status,0,c
  8593  000E06  377E               	rlcf	(??_get_fat+8)& (0+255),f,b
  8594  000E08  377F               	rlcf	(??_get_fat+9)& (0+255),f,b
  8595  000E0A  90D8               	bcf	status,0,c
  8596  000E0C  377E               	rlcf	(??_get_fat+8)& (0+255),f,b
  8597  000E0E  377F               	rlcf	(??_get_fat+9)& (0+255),f,b
  8598  000E10  C07E  F066         	movff	??_get_fat+8,disk_readp@offset
  8599  000E14  C07F  F067         	movff	??_get_fat+9,disk_readp@offset+1
  8600  000E18  0E00               	movlw	0
  8601  000E1A  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  8602  000E1C  0E04               	movlw	4
  8603  000E1E  6F68               	movwf	disk_readp@count& (0+255),b
  8604  000E20  EC3C  F009         	call	_disk_readp	;wreg free
  8605  000E24  0900               	iorlw	0
  8606  000E26  A4D8               	btfss	status,2,c
  8607  000E28  D055               	goto	l838
  8608                           
  8609                           ;pff.c: 385: return (DWORD)(((DWORD)*((BYTE*)(buf)+3)<<24)|((DWORD)*((BYTE*)(buf)+2)<<16
      +                          )|((WORD)*((BYTE*)(buf)+1)<<8)|*(BYTE*)(buf)) & 0x0FFFFFFF;
  8610  000E2A  0100               	movlb	0	; () banked
  8611  000E2C  5193               	movf	(get_fat@buf+1)& (0+255),w,b
  8612  000E2E  6F77               	movwf	(??_get_fat+1)& (0+255),b
  8613  000E30  6B76               	clrf	??_get_fat& (0+255),b
  8614  000E32  C094  F078         	movff	get_fat@buf+2,??_get_fat+2
  8615  000E36  6B79               	clrf	(??_get_fat+3)& (0+255),b
  8616  000E38  6B7A               	clrf	(??_get_fat+4)& (0+255),b
  8617  000E3A  6B7B               	clrf	(??_get_fat+5)& (0+255),b
  8618  000E3C  C079  F07B         	movff	??_get_fat+3,??_get_fat+5
  8619  000E40  C078  F07A         	movff	??_get_fat+2,??_get_fat+4
  8620  000E44  6B79               	clrf	(??_get_fat+3)& (0+255),b
  8621  000E46  6B78               	clrf	(??_get_fat+2)& (0+255),b
  8622  000E48  C095  F07C         	movff	get_fat@buf+3,??_get_fat+6
  8623  000E4C  6B7D               	clrf	(??_get_fat+7)& (0+255),b
  8624  000E4E  6B7E               	clrf	(??_get_fat+8)& (0+255),b
  8625  000E50  6B7F               	clrf	(??_get_fat+9)& (0+255),b
  8626  000E52  C07C  F07F         	movff	??_get_fat+6,??_get_fat+9
  8627  000E56  6B7E               	clrf	(??_get_fat+8)& (0+255),b
  8628  000E58  6B7D               	clrf	(??_get_fat+7)& (0+255),b
  8629  000E5A  6B7C               	clrf	(??_get_fat+6)& (0+255),b
  8630  000E5C  5178               	movf	(??_get_fat+2)& (0+255),w,b
  8631  000E5E  117C               	iorwf	(??_get_fat+6)& (0+255),w,b
  8632  000E60  6F80               	movwf	(??_get_fat+10)& (0+255),b
  8633  000E62  5179               	movf	(??_get_fat+3)& (0+255),w,b
  8634  000E64  117D               	iorwf	(??_get_fat+7)& (0+255),w,b
  8635  000E66  6F81               	movwf	(??_get_fat+11)& (0+255),b
  8636  000E68  517A               	movf	(??_get_fat+4)& (0+255),w,b
  8637  000E6A  117E               	iorwf	(??_get_fat+8)& (0+255),w,b
  8638  000E6C  6F82               	movwf	(??_get_fat+12)& (0+255),b
  8639  000E6E  517B               	movf	(??_get_fat+5)& (0+255),w,b
  8640  000E70  117F               	iorwf	(??_get_fat+9)& (0+255),w,b
  8641  000E72  6F83               	movwf	(??_get_fat+13)& (0+255),b
  8642  000E74  5176               	movf	??_get_fat& (0+255),w,b
  8643  000E76  1180               	iorwf	(??_get_fat+10)& (0+255),w,b
  8644  000E78  6F84               	movwf	(??_get_fat+14)& (0+255),b
  8645  000E7A  5177               	movf	(??_get_fat+1)& (0+255),w,b
  8646  000E7C  1181               	iorwf	(??_get_fat+11)& (0+255),w,b
  8647  000E7E  6F85               	movwf	(??_get_fat+15)& (0+255),b
  8648  000E80  0E00               	movlw	0
  8649  000E82  1182               	iorwf	(??_get_fat+12)& (0+255),w,b
  8650  000E84  6F86               	movwf	(??_get_fat+16)& (0+255),b
  8651  000E86  0E00               	movlw	0
  8652  000E88  1183               	iorwf	(??_get_fat+13)& (0+255),w,b
  8653  000E8A  6F87               	movwf	(??_get_fat+17)& (0+255),b
  8654  000E8C  5192               	movf	get_fat@buf& (0+255),w,b
  8655  000E8E  1184               	iorwf	(??_get_fat+14)& (0+255),w,b
  8656  000E90  6F88               	movwf	(??_get_fat+18)& (0+255),b
  8657  000E92  5185               	movf	(??_get_fat+15)& (0+255),w,b
  8658  000E94  6F89               	movwf	(??_get_fat+19)& (0+255),b
  8659  000E96  5186               	movf	(??_get_fat+16)& (0+255),w,b
  8660  000E98  6F8A               	movwf	(??_get_fat+20)& (0+255),b
  8661  000E9A  5187               	movf	(??_get_fat+17)& (0+255),w,b
  8662  000E9C  6F8B               	movwf	(??_get_fat+21)& (0+255),b
  8663  000E9E  0EFF               	movlw	255
  8664  000EA0  1588               	andwf	(??_get_fat+18)& (0+255),w,b
  8665  000EA2  6F72               	movwf	?_get_fat& (0+255),b
  8666  000EA4  0EFF               	movlw	255
  8667  000EA6  1589               	andwf	(??_get_fat+19)& (0+255),w,b
  8668  000EA8  6F73               	movwf	(?_get_fat+1)& (0+255),b
  8669  000EAA  0EFF               	movlw	255
  8670  000EAC  158A               	andwf	(??_get_fat+20)& (0+255),w,b
  8671  000EAE  6F74               	movwf	(?_get_fat+2)& (0+255),b
  8672  000EB0  0E0F               	movlw	15
  8673  000EB2  158B               	andwf	(??_get_fat+21)& (0+255),w,b
  8674  000EB4  6F75               	movwf	(?_get_fat+3)& (0+255),b
  8675                           
  8676                           ; BSR set to: 0
  8677  000EB6  0012               	return	
  8678  000EB8                     l834:
  8679                           
  8680                           ; BSR set to: 0
  8681                           
  8682                           ; BSR set to: 0
  8683  000EB8  C098  FFD9         	movff	get_fat@fs,fsr2l
  8684  000EBC  C099  FFDA         	movff	get_fat@fs+1,fsr2h
  8685  000EC0  50DF               	movf	indf2,w,c
  8686                           
  8687                           ; Switch size 1, requested type "space"
  8688                           ; Number of cases is 3, Range of values is 1 to 3
  8689                           ; switch strategies available:
  8690                           ; Name         Instructions Cycles
  8691                           ; simple_byte           10     6 (average)
  8692                           ;	Chosen strategy is simple_byte
  8693  000EC2  0A01               	xorlw	1	; case 1
  8694  000EC4  B4D8               	btfsc	status,2,c
  8695  000EC6  D644               	goto	l835
  8696  000EC8  0A03               	xorlw	3	; case 2
  8697  000ECA  B4D8               	btfsc	status,2,c
  8698  000ECC  D713               	goto	l846
  8699  000ECE  0A01               	xorlw	1	; case 3
  8700  000ED0  B4D8               	btfsc	status,2,c
  8701  000ED2  D763               	goto	l848
  8702  000ED4                     l838:
  8703                           
  8704                           ;pff.c: 389: return 1;
  8705                           
  8706                           ; BSR set to: 0
  8707  000ED4  0E01               	movlw	1
  8708  000ED6  0100               	movlb	0	; () banked
  8709  000ED8  6F72               	movwf	?_get_fat& (0+255),b
  8710  000EDA  0E00               	movlw	0
  8711  000EDC  6F73               	movwf	(?_get_fat+1)& (0+255),b
  8712  000EDE  0E00               	movlw	0
  8713  000EE0  6F74               	movwf	(?_get_fat+2)& (0+255),b
  8714  000EE2  0E00               	movlw	0
  8715  000EE4  6F75               	movwf	(?_get_fat+3)& (0+255),b
  8716  000EE6  0012               	return	
  8717  000EE8                     __end_of_get_fat:
  8718                           	opt stack 0
  8719                           tosu	equ	0xFFF
  8720                           tosh	equ	0xFFE
  8721                           tosl	equ	0xFFD
  8722                           pclath	equ	0xFFA
  8723                           tblptru	equ	0xFF8
  8724                           tblptrh	equ	0xFF7
  8725                           tblptrl	equ	0xFF6
  8726                           tablat	equ	0xFF5
  8727                           prodh	equ	0xFF4
  8728                           prodl	equ	0xFF3
  8729                           intcon	equ	0xFF2
  8730                           intcon2	equ	0xFF1
  8731                           intcon3	equ	0xFF0
  8732                           postinc0	equ	0xFEE
  8733                           wreg	equ	0xFE8
  8734                           indf1	equ	0xFE7
  8735                           postinc1	equ	0xFE6
  8736                           postdec1	equ	0xFE5
  8737                           fsr1h	equ	0xFE2
  8738                           fsr1l	equ	0xFE1
  8739                           indf2	equ	0xFDF
  8740                           postinc2	equ	0xFDE
  8741                           postdec2	equ	0xFDD
  8742                           plusw2	equ	0xFDB
  8743                           fsr2h	equ	0xFDA
  8744                           fsr2l	equ	0xFD9
  8745                           status	equ	0xFD8
  8746                           
  8747 ;; *************** function _clust2sect *****************
  8748 ;; Defined at:
  8749 ;;		line 400 in file "pff.c"
  8750 ;; Parameters:    Size  Location     Type
  8751 ;;  clst            4   37[COMRAM] unsigned long 
  8752 ;; Auto vars:     Size  Location     Type
  8753 ;;  fs              2   41[COMRAM] PTR struct .
  8754 ;;		 -> NULL(0), SDCard@fs(42), 
  8755 ;; Return value:  Size  Location     Type
  8756 ;;                  4   37[COMRAM] unsigned long 
  8757 ;; Registers used:
  8758 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8759 ;; Tracked objects:
  8760 ;;		On entry : 0/0
  8761 ;;		On exit  : 0/0
  8762 ;;		Unchanged: 0/0
  8763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8764 ;;      Params:         4       0       0       0       0       0       0       0       0
  8765 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8766 ;;      Temps:          0       5       0       0       0       0       0       0       0
  8767 ;;      Totals:         6       5       0       0       0       0       0       0       0
  8768 ;;Total ram usage:       11 bytes
  8769 ;; Hardware stack levels used:    1
  8770 ;; Hardware stack levels required when called:    3
  8771 ;; This function calls:
  8772 ;;		___lmul
  8773 ;; This function is called by:
  8774 ;;		_dir_rewind
  8775 ;;		_dir_next
  8776 ;;		_pf_read
  8777 ;;		_pf_write
  8778 ;;		_pf_lseek
  8779 ;; This function uses a non-reentrant model
  8780 ;;
  8781                           
  8782                           	psect	text36
  8783  002966                     __ptext36:
  8784                           	opt stack 0
  8785  002966                     _clust2sect:
  8786                           	opt stack 24
  8787                           
  8788                           ;pff.c: 404: FATFS *fs = FatFs;
  8789                           
  8790                           ; BSR set to: 0
  8791                           ;incstack = 0
  8792  002966  C035  F02A         	movff	_FatFs,clust2sect@fs
  8793  00296A  C036  F02B         	movff	_FatFs+1,clust2sect@fs+1
  8794                           
  8795                           ;pff.c: 407: clst -= 2;
  8796  00296E  0E02               	movlw	2
  8797  002970  5E26               	subwf	clust2sect@clst,f,c
  8798  002972  0E00               	movlw	0
  8799  002974  5A27               	subwfb	clust2sect@clst+1,f,c
  8800  002976  5A28               	subwfb	clust2sect@clst+2,f,c
  8801  002978  5A29               	subwfb	clust2sect@clst+3,f,c
  8802                           
  8803                           ;pff.c: 408: if (clst >= (fs->n_fatent - 2)) return 0;
  8804  00297A  EE20 F006          	lfsr	2,6
  8805  00297E  502A               	movf	clust2sect@fs,w,c
  8806  002980  26D9               	addwf	fsr2l,f,c
  8807  002982  502B               	movf	clust2sect@fs+1,w,c
  8808  002984  22DA               	addwfc	fsr2h,f,c
  8809  002986  0EFE               	movlw	254
  8810  002988  24DE               	addwf	postinc2,w,c
  8811  00298A  0100               	movlb	0	; () banked
  8812  00298C  6F60               	movwf	??_clust2sect& (0+255),b
  8813  00298E  0EFF               	movlw	255
  8814  002990  20DE               	addwfc	postinc2,w,c
  8815  002992  6F61               	movwf	(??_clust2sect+1)& (0+255),b
  8816  002994  0EFF               	movlw	255
  8817  002996  20DE               	addwfc	postinc2,w,c
  8818  002998  6F62               	movwf	(??_clust2sect+2)& (0+255),b
  8819  00299A  0EFF               	movlw	255
  8820  00299C  20DE               	addwfc	postinc2,w,c
  8821  00299E  6F63               	movwf	(??_clust2sect+3)& (0+255),b
  8822  0029A0  5160               	movf	??_clust2sect& (0+255),w,b
  8823  0029A2  5C26               	subwf	clust2sect@clst,w,c
  8824  0029A4  5161               	movf	(??_clust2sect+1)& (0+255),w,b
  8825  0029A6  5827               	subwfb	clust2sect@clst+1,w,c
  8826  0029A8  5162               	movf	(??_clust2sect+2)& (0+255),w,b
  8827  0029AA  5828               	subwfb	clust2sect@clst+2,w,c
  8828  0029AC  5163               	movf	(??_clust2sect+3)& (0+255),w,b
  8829  0029AE  5829               	subwfb	clust2sect@clst+3,w,c
  8830  0029B0  A0D8               	btfss	status,0,c
  8831  0029B2  D009               	goto	l852
  8832                           
  8833                           ; BSR set to: 0
  8834  0029B4  0E00               	movlw	0
  8835  0029B6  6E26               	movwf	?_clust2sect,c
  8836  0029B8  0E00               	movlw	0
  8837  0029BA  6E27               	movwf	?_clust2sect+1,c
  8838  0029BC  0E00               	movlw	0
  8839  0029BE  6E28               	movwf	?_clust2sect+2,c
  8840  0029C0  0E00               	movlw	0
  8841  0029C2  6E29               	movwf	?_clust2sect+3,c
  8842                           
  8843                           ; BSR set to: 0
  8844  0029C4  0012               	return	
  8845  0029C6                     l852:
  8846                           
  8847                           ; BSR set to: 0
  8848                           ;pff.c: 409: return (DWORD)clst * fs->csize + fs->database;
  8849                           
  8850                           ; BSR set to: 0
  8851  0029C6  EE20 F012          	lfsr	2,18
  8852  0029CA  502A               	movf	clust2sect@fs,w,c
  8853  0029CC  26D9               	addwf	fsr2l,f,c
  8854  0029CE  502B               	movf	clust2sect@fs+1,w,c
  8855  0029D0  22DA               	addwfc	fsr2h,f,c
  8856  0029D2  CFDE F060          	movff	postinc2,??_clust2sect
  8857  0029D6  CFDE F061          	movff	postinc2,??_clust2sect+1
  8858  0029DA  CFDE F062          	movff	postinc2,??_clust2sect+2
  8859  0029DE  CFDE F063          	movff	postinc2,??_clust2sect+3
  8860  0029E2  EE20 F002          	lfsr	2,2
  8861  0029E6  502A               	movf	clust2sect@fs,w,c
  8862  0029E8  26D9               	addwf	fsr2l,f,c
  8863  0029EA  502B               	movf	clust2sect@fs+1,w,c
  8864  0029EC  22DA               	addwfc	fsr2h,f,c
  8865  0029EE  50DF               	movf	indf2,w,c
  8866  0029F0  6F64               	movwf	(??_clust2sect+4)& (0+255),b
  8867  0029F2  5164               	movf	(??_clust2sect+4)& (0+255),w,b
  8868  0029F4  6E1A               	movwf	___lmul@multiplier,c
  8869  0029F6  6A1B               	clrf	___lmul@multiplier+1,c
  8870  0029F8  6A1C               	clrf	___lmul@multiplier+2,c
  8871  0029FA  6A1D               	clrf	___lmul@multiplier+3,c
  8872  0029FC  C026  F01E         	movff	clust2sect@clst,___lmul@multiplicand
  8873  002A00  C027  F01F         	movff	clust2sect@clst+1,___lmul@multiplicand+1
  8874  002A04  C028  F020         	movff	clust2sect@clst+2,___lmul@multiplicand+2
  8875  002A08  C029  F021         	movff	clust2sect@clst+3,___lmul@multiplicand+3
  8876  002A0C  EC64  F018         	call	___lmul	;wreg free
  8877  002A10  0100               	movlb	0	; () banked
  8878  002A12  5160               	movf	??_clust2sect& (0+255),w,b
  8879  002A14  241A               	addwf	?___lmul,w,c
  8880  002A16  6E26               	movwf	?_clust2sect,c
  8881  002A18  5161               	movf	(??_clust2sect+1)& (0+255),w,b
  8882  002A1A  201B               	addwfc	?___lmul+1,w,c
  8883  002A1C  6E27               	movwf	?_clust2sect+1,c
  8884  002A1E  5162               	movf	(??_clust2sect+2)& (0+255),w,b
  8885  002A20  201C               	addwfc	?___lmul+2,w,c
  8886  002A22  6E28               	movwf	?_clust2sect+2,c
  8887  002A24  5163               	movf	(??_clust2sect+3)& (0+255),w,b
  8888  002A26  201D               	addwfc	?___lmul+3,w,c
  8889  002A28  6E29               	movwf	?_clust2sect+3,c
  8890  002A2A  0012               	return	
  8891  002A2C                     __end_of_clust2sect:
  8892                           	opt stack 0
  8893                           tosu	equ	0xFFF
  8894                           tosh	equ	0xFFE
  8895                           tosl	equ	0xFFD
  8896                           pclath	equ	0xFFA
  8897                           tblptru	equ	0xFF8
  8898                           tblptrh	equ	0xFF7
  8899                           tblptrl	equ	0xFF6
  8900                           tablat	equ	0xFF5
  8901                           prodh	equ	0xFF4
  8902                           prodl	equ	0xFF3
  8903                           intcon	equ	0xFF2
  8904                           intcon2	equ	0xFF1
  8905                           intcon3	equ	0xFF0
  8906                           postinc0	equ	0xFEE
  8907                           wreg	equ	0xFE8
  8908                           indf1	equ	0xFE7
  8909                           postinc1	equ	0xFE6
  8910                           postdec1	equ	0xFE5
  8911                           fsr1h	equ	0xFE2
  8912                           fsr1l	equ	0xFE1
  8913                           indf2	equ	0xFDF
  8914                           postinc2	equ	0xFDE
  8915                           postdec2	equ	0xFDD
  8916                           plusw2	equ	0xFDB
  8917                           fsr2h	equ	0xFDA
  8918                           fsr2l	equ	0xFD9
  8919                           status	equ	0xFD8
  8920                           
  8921 ;; *************** function _create_name *****************
  8922 ;; Defined at:
  8923 ;;		line 581 in file "pff.c"
  8924 ;; Parameters:    Size  Location     Type
  8925 ;;  dj              2   33[COMRAM] PTR struct .
  8926 ;;		 -> pf_open@dj(16), 
  8927 ;;  path            2   35[COMRAM] PTR PTR const unsigned c
  8928 ;;		 -> follow_path@path(2), 
  8929 ;; Auto vars:     Size  Location     Type
  8930 ;;  d               1    0[BANK0 ] unsigned char 
  8931 ;;  sfn             2    5[BANK0 ] PTR unsigned char 
  8932 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  8933 ;;  p               2    1[BANK0 ] PTR const unsigned char 
  8934 ;;		 -> STR_21(10), 
  8935 ;;  c               1    8[BANK0 ] unsigned char 
  8936 ;;  i               1    7[BANK0 ] unsigned char 
  8937 ;;  si              1    4[BANK0 ] unsigned char 
  8938 ;;  ni              1    3[BANK0 ] unsigned char 
  8939 ;; Return value:  Size  Location     Type
  8940 ;;                  1    wreg      enum E43
  8941 ;; Registers used:
  8942 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8943 ;; Tracked objects:
  8944 ;;		On entry : 0/0
  8945 ;;		On exit  : 0/0
  8946 ;;		Unchanged: 0/0
  8947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8948 ;;      Params:         4       0       0       0       0       0       0       0       0
  8949 ;;      Locals:         0       9       0       0       0       0       0       0       0
  8950 ;;      Temps:          7       0       0       0       0       0       0       0       0
  8951 ;;      Totals:        11       9       0       0       0       0       0       0       0
  8952 ;;Total ram usage:       20 bytes
  8953 ;; Hardware stack levels used:    1
  8954 ;; Hardware stack levels required when called:    3
  8955 ;; This function calls:
  8956 ;;		_mem_set
  8957 ;; This function is called by:
  8958 ;;		_follow_path
  8959 ;; This function uses a non-reentrant model
  8960 ;;
  8961                           
  8962                           	psect	text37
  8963  001E96                     __ptext37:
  8964                           	opt stack 0
  8965  001E96                     _create_name:
  8966                           	opt stack 23
  8967                           
  8968                           ;pff.c: 586: BYTE c, ni, si, i, *sfn;
  8969                           ;pff.c: 587: const char *p;
  8970                           ;pff.c: 590: static const BYTE cvt[] = {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x4
      +                          5,0x45,0x49,0x49,0x49,0x8E,0x8F,0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0
      +                          x9B,0x9C,0x9D,0x9E,0x9F, 0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0x
  8971                           ;pff.c: 595: sfn = dj->fn;
  8972                           
  8973                           ; BSR set to: 0
  8974                           ;incstack = 0
  8975  001E96  EE20 F002          	lfsr	2,2
  8976  001E9A  5022               	movf	create_name@dj,w,c
  8977  001E9C  26D9               	addwf	fsr2l,f,c
  8978  001E9E  5023               	movf	create_name@dj+1,w,c
  8979  001EA0  22DA               	addwfc	fsr2h,f,c
  8980  001EA2  CFDE F065          	movff	postinc2,create_name@sfn
  8981  001EA6  CFDD F066          	movff	postdec2,create_name@sfn+1
  8982                           
  8983                           ;pff.c: 596: mem_set(sfn, ' ', 11);
  8984  001EAA  C065  F01A         	movff	create_name@sfn,mem_set@dst
  8985  001EAE  C066  F01B         	movff	create_name@sfn+1,mem_set@dst+1
  8986  001EB2  0E00               	movlw	0
  8987  001EB4  6E1D               	movwf	mem_set@val+1,c
  8988  001EB6  0E20               	movlw	32
  8989  001EB8  6E1C               	movwf	mem_set@val,c
  8990  001EBA  0E00               	movlw	0
  8991  001EBC  6E1F               	movwf	mem_set@cnt+1,c
  8992  001EBE  0E0B               	movlw	11
  8993  001EC0  6E1E               	movwf	mem_set@cnt,c
  8994  001EC2  EC71  F019         	call	_mem_set	;wreg free
  8995                           
  8996                           ;pff.c: 597: si = i = 0; ni = 8;
  8997  001EC6  0E00               	movlw	0
  8998  001EC8  0100               	movlb	0	; () banked
  8999  001ECA  6F67               	movwf	create_name@i& (0+255),b
  9000  001ECC  C067  F064         	movff	create_name@i,create_name@si
  9001                           
  9002                           ; BSR set to: 0
  9003  001ED0  0E08               	movlw	8
  9004  001ED2  6F63               	movwf	create_name@ni& (0+255),b
  9005                           
  9006                           ; BSR set to: 0
  9007                           ;pff.c: 598: p = *path;
  9008  001ED4  C024  FFD9         	movff	create_name@path,fsr2l
  9009  001ED8  C025  FFDA         	movff	create_name@path+1,fsr2h
  9010  001EDC  CFDE F061          	movff	postinc2,create_name@p
  9011  001EE0  CFDD F062          	movff	postdec2,create_name@p+1
  9012  001EE4                     
  9013                           ; BSR set to: 0
  9014                           ;pff.c: 600: c = p[si++];
  9015                           
  9016                           ; BSR set to: 0
  9017  001EE4  5164               	movf	create_name@si& (0+255),w,b
  9018  001EE6  0D01               	mullw	1
  9019  001EE8  C061  F026         	movff	create_name@p,??_create_name
  9020  001EEC  C062  F027         	movff	create_name@p+1,??_create_name+1
  9021  001EF0  50F3               	movf	prodl,w,c
  9022  001EF2  2626               	addwf	??_create_name,f,c
  9023  001EF4  50F4               	movf	prodh,w,c
  9024  001EF6  2227               	addwfc	??_create_name+1,f,c
  9025  001EF8  C026  FFF6         	movff	??_create_name,tblptrl
  9026  001EFC  C027  FFF7         	movff	??_create_name+1,tblptrh
  9027  001F00                     	if	0	;tblptru may be non-zero
  9028  001F00                     	endif
  9029  001F00                     	if	0	;tblptru may be non-zero
  9030  001F00                     	endif
  9031  001F00  0008               	tblrd		*
  9032  001F02  CFF5 F068          	movff	tablat,create_name@c
  9033                           
  9034                           ; BSR set to: 0
  9035  001F06  2B64               	incf	create_name@si& (0+255),f,b
  9036                           
  9037                           ; BSR set to: 0
  9038                           ;pff.c: 601: if (c <= ' ' || c == '/') break;
  9039  001F08  0E20               	movlw	32
  9040  001F0A  6568               	cpfsgt	create_name@c& (0+255),b
  9041  001F0C  D044               	goto	l914
  9042                           
  9043                           ; BSR set to: 0
  9044  001F0E  0E2F               	movlw	47
  9045  001F10  1968               	xorwf	create_name@c& (0+255),w,b
  9046  001F12  B4D8               	btfsc	status,2,c
  9047  001F14  D040               	goto	l914
  9048                           
  9049                           ; BSR set to: 0
  9050                           ;pff.c: 602: if (c == '.' || i >= ni) {
  9051                           
  9052                           ; BSR set to: 0
  9053                           
  9054                           ; BSR set to: 0
  9055  001F16  0E2E               	movlw	46
  9056  001F18  1968               	xorwf	create_name@c& (0+255),w,b
  9057  001F1A  B4D8               	btfsc	status,2,c
  9058  001F1C  D004               	goto	u7470
  9059                           
  9060                           ; BSR set to: 0
  9061  001F1E  5163               	movf	create_name@ni& (0+255),w,b
  9062  001F20  5D67               	subwf	create_name@i& (0+255),w,b
  9063  001F22  A0D8               	btfss	status,0,c
  9064  001F24  D00D               	goto	l915
  9065  001F26                     u7470:
  9066                           
  9067                           ; BSR set to: 0
  9068                           ;pff.c: 603: if (ni != 8 || c != '.') break;
  9069                           
  9070                           ; BSR set to: 0
  9071  001F26  0E08               	movlw	8
  9072  001F28  1963               	xorwf	create_name@ni& (0+255),w,b
  9073  001F2A  A4D8               	btfss	status,2,c
  9074  001F2C  D034               	goto	l914
  9075                           
  9076                           ; BSR set to: 0
  9077  001F2E  0E2E               	movlw	46
  9078  001F30  1968               	xorwf	create_name@c& (0+255),w,b
  9079  001F32  A4D8               	btfss	status,2,c
  9080  001F34  D030               	goto	l914
  9081                           
  9082                           ; BSR set to: 0
  9083                           ;pff.c: 604: i = 8; ni = 11;
  9084                           
  9085                           ; BSR set to: 0
  9086                           
  9087                           ; BSR set to: 0
  9088  001F36  0E08               	movlw	8
  9089  001F38  6F67               	movwf	create_name@i& (0+255),b
  9090  001F3A  0E0B               	movlw	11
  9091  001F3C  6F63               	movwf	create_name@ni& (0+255),b
  9092                           
  9093                           ;pff.c: 605: continue;
  9094  001F3E  D7D2               	goto	l910
  9095  001F40                     l915:
  9096                           
  9097                           ; BSR set to: 0
  9098                           ;pff.c: 606: }
  9099                           ;pff.c: 609: if (c >= 0x80)
  9100                           
  9101                           ; BSR set to: 0
  9102  001F40  0E7F               	movlw	127
  9103  001F42  6568               	cpfsgt	create_name@c& (0+255),b
  9104  001F44  D014               	goto	l923
  9105                           
  9106                           ; BSR set to: 0
  9107                           ;pff.c: 610: c = cvt[c - 0x80];
  9108  001F46  0E80               	movlw	128
  9109  001F48  6E26               	movwf	??_create_name& (0+255),c
  9110  001F4A  0EFF               	movlw	255
  9111  001F4C  6E27               	movwf	(??_create_name+1)& (0+255),c
  9112  001F4E  5168               	movf	create_name@c& (0+255),w,b
  9113  001F50  6E28               	movwf	(??_create_name+2)& (0+255),c
  9114  001F52  6A29               	clrf	(??_create_name+3)& (0+255),c
  9115  001F54  5026               	movf	??_create_name,w,c
  9116  001F56  2628               	addwf	??_create_name+2,f,c
  9117  001F58  5027               	movf	??_create_name+1,w,c
  9118  001F5A  2229               	addwfc	??_create_name+3,f,c
  9119  001F5C  0ED1               	movlw	low create_name@cvt
  9120  001F5E  2428               	addwf	??_create_name+2,w,c
  9121  001F60  6EF6               	movwf	tblptrl,c
  9122  001F62  0E60               	movlw	high create_name@cvt
  9123  001F64  2029               	addwfc	??_create_name+3,w,c
  9124  001F66  6EF7               	movwf	tblptrh,c
  9125  001F68                     	if	0	;There are less than 3 active tblptr bytes
  9126  001F68                     	endif
  9127  001F68  0008               	tblrd		*
  9128  001F6A  CFF5 F068          	movff	tablat,create_name@c
  9129  001F6E                     l923:
  9130                           
  9131                           ; BSR set to: 0
  9132                           
  9133                           ; BSR set to: 0
  9134  001F6E  0E60               	movlw	96
  9135  001F70  6568               	cpfsgt	create_name@c& (0+255),b
  9136  001F72  D005               	goto	l925
  9137                           
  9138                           ; BSR set to: 0
  9139  001F74  0E7B               	movlw	123
  9140  001F76  6168               	cpfslt	create_name@c& (0+255),b
  9141  001F78  D002               	goto	l925
  9142                           
  9143                           ; BSR set to: 0
  9144  001F7A  0E20               	movlw	32
  9145  001F7C  5F68               	subwf	create_name@c& (0+255),f,b
  9146  001F7E                     l925:
  9147                           
  9148                           ; BSR set to: 0
  9149                           ;pff.c: 620: sfn[i++] = c;
  9150                           
  9151                           ; BSR set to: 0
  9152  001F7E  5167               	movf	create_name@i& (0+255),w,b
  9153  001F80  0D01               	mullw	1
  9154  001F82  50F3               	movf	prodl,w,c
  9155  001F84  2565               	addwf	create_name@sfn& (0+255),w,b
  9156  001F86  6ED9               	movwf	fsr2l,c
  9157  001F88  50F4               	movf	prodh,w,c
  9158  001F8A  2166               	addwfc	(create_name@sfn+1)& (0+255),w,b
  9159  001F8C  6EDA               	movwf	fsr2h,c
  9160  001F8E  C068  FFDF         	movff	create_name@c,indf2
  9161                           
  9162                           ; BSR set to: 0
  9163  001F92  2B67               	incf	create_name@i& (0+255),f,b
  9164                           
  9165                           ; BSR set to: 0
  9166                           ;pff.c: 621: }
  9167                           ;pff.c: 622: }
  9168                           
  9169                           ; BSR set to: 0
  9170  001F94  D7A7               	goto	l910
  9171  001F96                     l914:
  9172                           
  9173                           ; BSR set to: 0
  9174                           ;pff.c: 623: *path = &p[si];
  9175                           
  9176                           ; BSR set to: 0
  9177  001F96  5164               	movf	create_name@si& (0+255),w,b
  9178  001F98  0D01               	mullw	1
  9179  001F9A  C061  F026         	movff	create_name@p,??_create_name
  9180  001F9E  C062  F027         	movff	create_name@p+1,??_create_name+1
  9181  001FA2  50F3               	movf	prodl,w,c
  9182  001FA4  2626               	addwf	??_create_name,f,c
  9183  001FA6  50F4               	movf	prodh,w,c
  9184  001FA8  2227               	addwfc	??_create_name+1,f,c
  9185  001FAA  C024  FFD9         	movff	create_name@path,fsr2l
  9186  001FAE  C025  FFDA         	movff	create_name@path+1,fsr2h
  9187  001FB2  C026  FFDE         	movff	??_create_name,postinc2
  9188  001FB6  C027  FFDD         	movff	??_create_name+1,postdec2
  9189                           
  9190                           ; BSR set to: 0
  9191                           ;pff.c: 625: sfn[11] = (c <= ' ') ? 1 : 0;
  9192  001FBA  EE20 F00B          	lfsr	2,11
  9193  001FBE  5165               	movf	create_name@sfn& (0+255),w,b
  9194  001FC0  26D9               	addwf	fsr2l,f,c
  9195  001FC2  5166               	movf	(create_name@sfn+1)& (0+255),w,b
  9196  001FC4  22DA               	addwfc	fsr2h,f,c
  9197  001FC6  0E20               	movlw	32
  9198  001FC8  6568               	cpfsgt	create_name@c& (0+255),b
  9199  001FCA  D001               	goto	u7541
  9200  001FCC  D002               	goto	u7540
  9201  001FCE                     u7541:
  9202  001FCE  0E01               	movlw	1
  9203  001FD0  D001               	goto	u7550
  9204  001FD2                     u7540:
  9205  001FD2  0E00               	movlw	0
  9206  001FD4                     u7550:
  9207  001FD4  6EDF               	movwf	indf2,c
  9208                           
  9209                           ; BSR set to: 0
  9210                           ;pff.c: 627: return FR_OK;
  9211  001FD6  0E00               	movlw	0
  9212  001FD8  0012               	return	
  9213  001FDA                     __end_of_create_name:
  9214                           	opt stack 0
  9215                           tosu	equ	0xFFF
  9216                           tosh	equ	0xFFE
  9217                           tosl	equ	0xFFD
  9218                           pclath	equ	0xFFA
  9219                           tblptru	equ	0xFF8
  9220                           tblptrh	equ	0xFF7
  9221                           tblptrl	equ	0xFF6
  9222                           tablat	equ	0xFF5
  9223                           prodh	equ	0xFF4
  9224                           prodl	equ	0xFF3
  9225                           intcon	equ	0xFF2
  9226                           intcon2	equ	0xFF1
  9227                           intcon3	equ	0xFF0
  9228                           postinc0	equ	0xFEE
  9229                           wreg	equ	0xFE8
  9230                           indf1	equ	0xFE7
  9231                           postinc1	equ	0xFE6
  9232                           postdec1	equ	0xFE5
  9233                           fsr1h	equ	0xFE2
  9234                           fsr1l	equ	0xFE1
  9235                           indf2	equ	0xFDF
  9236                           postinc2	equ	0xFDE
  9237                           postdec2	equ	0xFDD
  9238                           plusw2	equ	0xFDB
  9239                           fsr2h	equ	0xFDA
  9240                           fsr2l	equ	0xFD9
  9241                           status	equ	0xFD8
  9242                           
  9243 ;; *************** function _mem_set *****************
  9244 ;; Defined at:
  9245 ;;		line 329 in file "pff.c"
  9246 ;; Parameters:    Size  Location     Type
  9247 ;;  dst             2   25[COMRAM] PTR void 
  9248 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  9249 ;;  val             2   27[COMRAM] int 
  9250 ;;  cnt             2   29[COMRAM] int 
  9251 ;; Auto vars:     Size  Location     Type
  9252 ;;  d               2   31[COMRAM] PTR unsigned char 
  9253 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  9254 ;; Return value:  Size  Location     Type
  9255 ;;                  1    wreg      void 
  9256 ;; Registers used:
  9257 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9258 ;; Tracked objects:
  9259 ;;		On entry : 0/0
  9260 ;;		On exit  : 0/0
  9261 ;;		Unchanged: 0/0
  9262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9263 ;;      Params:         6       0       0       0       0       0       0       0       0
  9264 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9265 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9266 ;;      Totals:         8       0       0       0       0       0       0       0       0
  9267 ;;Total ram usage:        8 bytes
  9268 ;; Hardware stack levels used:    1
  9269 ;; Hardware stack levels required when called:    2
  9270 ;; This function calls:
  9271 ;;		Nothing
  9272 ;; This function is called by:
  9273 ;;		_create_name
  9274 ;; This function uses a non-reentrant model
  9275 ;;
  9276                           
  9277                           	psect	text38
  9278  0032E2                     __ptext38:
  9279                           	opt stack 0
  9280  0032E2                     _mem_set:
  9281                           	opt stack 23
  9282                           
  9283                           ;pff.c: 330: char *d = (char*)dst;
  9284                           
  9285                           ; BSR set to: 0
  9286                           ;incstack = 0
  9287  0032E2  C01A  F020         	movff	mem_set@dst,mem_set@d
  9288  0032E6  C01B  F021         	movff	mem_set@dst+1,mem_set@d+1
  9289                           
  9290                           ;pff.c: 331: while (cnt--) *d++ = (char)val;
  9291  0032EA  D008               	goto	l816
  9292  0032EC                     l6434:
  9293  0032EC  C020  FFD9         	movff	mem_set@d,fsr2l
  9294  0032F0  C021  FFDA         	movff	mem_set@d+1,fsr2h
  9295  0032F4  C01C  FFDF         	movff	mem_set@val,indf2
  9296  0032F8  4A20               	infsnz	mem_set@d,f,c
  9297  0032FA  2A21               	incf	mem_set@d+1,f,c
  9298  0032FC                     l816:
  9299  0032FC  061E               	decf	mem_set@cnt,f,c
  9300  0032FE  A0D8               	btfss	status,0,c
  9301  003300  061F               	decf	mem_set@cnt+1,f,c
  9302  003302  281E               	incf	mem_set@cnt,w,c
  9303  003304  E1F3               	bnz	l6434
  9304  003306  281F               	incf	mem_set@cnt+1,w,c
  9305  003308  B4D8               	btfsc	status,2,c
  9306  00330A  0012               	return	
  9307  00330C  D7EF               	goto	l817
  9308  00330E                     __end_of_mem_set:
  9309                           	opt stack 0
  9310                           tosu	equ	0xFFF
  9311                           tosh	equ	0xFFE
  9312                           tosl	equ	0xFFD
  9313                           pclath	equ	0xFFA
  9314                           tblptru	equ	0xFF8
  9315                           tblptrh	equ	0xFF7
  9316                           tblptrl	equ	0xFF6
  9317                           tablat	equ	0xFF5
  9318                           prodh	equ	0xFF4
  9319                           prodl	equ	0xFF3
  9320                           intcon	equ	0xFF2
  9321                           intcon2	equ	0xFF1
  9322                           intcon3	equ	0xFF0
  9323                           postinc0	equ	0xFEE
  9324                           wreg	equ	0xFE8
  9325                           indf1	equ	0xFE7
  9326                           postinc1	equ	0xFE6
  9327                           postdec1	equ	0xFE5
  9328                           fsr1h	equ	0xFE2
  9329                           fsr1l	equ	0xFE1
  9330                           indf2	equ	0xFDF
  9331                           postinc2	equ	0xFDE
  9332                           postdec2	equ	0xFDD
  9333                           plusw2	equ	0xFDB
  9334                           fsr2h	equ	0xFDA
  9335                           fsr2l	equ	0xFD9
  9336                           status	equ	0xFD8
  9337                           
  9338 ;; *************** function _pf_mount *****************
  9339 ;; Defined at:
  9340 ;;		line 755 in file "pff.c"
  9341 ;; Parameters:    Size  Location     Type
  9342 ;;  fs              2   28[BANK0 ] PTR struct .
  9343 ;;		 -> SDCard@fs(42), 
  9344 ;; Auto vars:     Size  Location     Type
  9345 ;;  buf            36   52[BANK0 ] unsigned char [36]
  9346 ;;  fsize           4  100[BANK0 ] unsigned long 
  9347 ;;  bsect           4   96[BANK0 ] unsigned long 
  9348 ;;  mclst           4   92[BANK0 ] unsigned long 
  9349 ;;  tsect           4   88[BANK0 ] unsigned long 
  9350 ;;  fmt             1  104[BANK0 ] unsigned char 
  9351 ;; Return value:  Size  Location     Type
  9352 ;;                  1    wreg      enum E3838
  9353 ;; Registers used:
  9354 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9355 ;; Tracked objects:
  9356 ;;		On entry : 0/0
  9357 ;;		On exit  : 0/0
  9358 ;;		Unchanged: 0/0
  9359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9360 ;;      Params:         0       2       0       0       0       0       0       0       0
  9361 ;;      Locals:         0      53       0       0       0       0       0       0       0
  9362 ;;      Temps:          0      22       0       0       0       0       0       0       0
  9363 ;;      Totals:         0      77       0       0       0       0       0       0       0
  9364 ;;Total ram usage:       77 bytes
  9365 ;; Hardware stack levels used:    1
  9366 ;; Hardware stack levels required when called:    7
  9367 ;; This function calls:
  9368 ;;		___lldiv
  9369 ;;		___lmul
  9370 ;;		_check_fs
  9371 ;;		_disk_initialize
  9372 ;;		_disk_readp
  9373 ;; This function is called by:
  9374 ;;		_SDCard
  9375 ;; This function uses a non-reentrant model
  9376 ;;
  9377                           
  9378                           	psect	text39
  9379  000012                     __ptext39:
  9380                           	opt stack 0
  9381  000012                     _pf_mount:
  9382                           	opt stack 21
  9383                           
  9384                           ;pff.c: 759: BYTE fmt, buf[36];
  9385                           ;pff.c: 760: DWORD bsect, fsize, tsect, mclst;
  9386                           ;pff.c: 763: FatFs = 0;
  9387                           
  9388                           ;incstack = 0
  9389  000012  0E00               	movlw	0
  9390  000014  6E35               	movwf	_FatFs,c
  9391  000016  0E00               	movlw	0
  9392  000018  6E36               	movwf	_FatFs+1,c
  9393                           
  9394                           ;pff.c: 764: if (disk_initialize() & 0x01)
  9395  00001A  ECE1  F00A         	call	_disk_initialize	;wreg free
  9396  00001E  0100               	movlb	0	; () banked
  9397  000020  6F7E               	movwf	??_pf_mount& (0+255),b
  9398  000022  A17E               	btfss	??_pf_mount& (0+255),0,b
  9399  000024  D002               	goto	l963
  9400                           
  9401                           ; BSR set to: 0
  9402                           ;pff.c: 765: return FR_NOT_READY;
  9403  000026  0E02               	movlw	2
  9404                           
  9405                           ; BSR set to: 0
  9406  000028  0012               	return	
  9407  00002A                     l963:
  9408                           
  9409                           ; BSR set to: 0
  9410                           ;pff.c: 767: bsect = 0;
  9411                           
  9412                           ; BSR set to: 0
  9413  00002A  0E00               	movlw	0
  9414  00002C  6FC0               	movwf	pf_mount@bsect& (0+255),b
  9415  00002E  0E00               	movlw	0
  9416  000030  6FC1               	movwf	(pf_mount@bsect+1)& (0+255),b
  9417  000032  0E00               	movlw	0
  9418  000034  6FC2               	movwf	(pf_mount@bsect+2)& (0+255),b
  9419  000036  0E00               	movlw	0
  9420  000038  6FC3               	movwf	(pf_mount@bsect+3)& (0+255),b
  9421                           
  9422                           ; BSR set to: 0
  9423                           ;pff.c: 768: fmt = check_fs(buf, bsect);
  9424  00003A  0E94               	movlw	low pf_mount@buf
  9425  00003C  6F72               	movwf	check_fs@buf& (0+255),b
  9426  00003E  0E00               	movlw	high pf_mount@buf
  9427  000040  6F73               	movwf	(check_fs@buf+1)& (0+255),b
  9428  000042  C0C0  F074         	movff	pf_mount@bsect,check_fs@sect
  9429  000046  C0C1  F075         	movff	pf_mount@bsect+1,check_fs@sect+1
  9430  00004A  C0C2  F076         	movff	pf_mount@bsect+2,check_fs@sect+2
  9431  00004E  C0C3  F077         	movff	pf_mount@bsect+3,check_fs@sect+3
  9432  000052  ECF5  F00D         	call	_check_fs	;wreg free
  9433  000056  0100               	movlb	0	; () banked
  9434  000058  6FC8               	movwf	pf_mount@fmt& (0+255),b
  9435                           
  9436                           ; BSR set to: 0
  9437                           ;pff.c: 769: if (fmt == 1) {
  9438  00005A  05C8               	decf	pf_mount@fmt& (0+255),w,b
  9439  00005C  A4D8               	btfss	status,2,c
  9440  00005E  D068               	goto	l968
  9441                           
  9442                           ; BSR set to: 0
  9443                           ;pff.c: 771: if (disk_readp(buf, bsect, 446, 16)) {
  9444  000060  0E94               	movlw	low pf_mount@buf
  9445  000062  6F60               	movwf	disk_readp@rd& (0+255),b
  9446  000064  0E00               	movlw	high pf_mount@buf
  9447  000066  6F61               	movwf	(disk_readp@rd+1)& (0+255),b
  9448  000068  C0C0  F062         	movff	pf_mount@bsect,disk_readp@sector
  9449  00006C  C0C1  F063         	movff	pf_mount@bsect+1,disk_readp@sector+1
  9450  000070  C0C2  F064         	movff	pf_mount@bsect+2,disk_readp@sector+2
  9451  000074  C0C3  F065         	movff	pf_mount@bsect+3,disk_readp@sector+3
  9452  000078  0E01               	movlw	1
  9453  00007A  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
  9454  00007C  0EBE               	movlw	190
  9455  00007E  6F66               	movwf	disk_readp@offset& (0+255),b
  9456  000080  0E00               	movlw	0
  9457  000082  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  9458  000084  0E10               	movlw	16
  9459  000086  6F68               	movwf	disk_readp@count& (0+255),b
  9460  000088  EC3C  F009         	call	_disk_readp	;wreg free
  9461  00008C  0900               	iorlw	0
  9462  00008E  B4D8               	btfsc	status,2,c
  9463  000090  D002               	goto	l966
  9464                           
  9465                           ;pff.c: 772: fmt = 3;
  9466  000092  0E03               	movlw	3
  9467  000094  D04B               	goto	L5
  9468  000096                     l966:
  9469                           
  9470                           ;pff.c: 774: if (buf[4]) {
  9471                           
  9472                           ; BSR set to: 0
  9473  000096  0100               	movlb	0	; () banked
  9474  000098  5198               	movf	(pf_mount@buf+4)& (0+255),w,b
  9475  00009A  B4D8               	btfsc	status,2,c
  9476  00009C  D049               	goto	l968
  9477                           
  9478                           ; BSR set to: 0
  9479                           ;pff.c: 775: bsect = (DWORD)(((DWORD)*((BYTE*)(&buf[8])+3)<<24)|((DWORD)*((BYTE*)(&buf[8
      +                          ])+2)<<16)|((WORD)*((BYTE*)(&buf[8])+1)<<8)|*(BYTE*)(&buf[8]));
  9480  00009E  519D               	movf	(pf_mount@buf+9)& (0+255),w,b
  9481  0000A0  6F7F               	movwf	(??_pf_mount+1)& (0+255),b
  9482  0000A2  6B7E               	clrf	??_pf_mount& (0+255),b
  9483  0000A4  C09E  F080         	movff	pf_mount@buf+10,??_pf_mount+2
  9484  0000A8  6B81               	clrf	(??_pf_mount+3)& (0+255),b
  9485  0000AA  6B82               	clrf	(??_pf_mount+4)& (0+255),b
  9486  0000AC  6B83               	clrf	(??_pf_mount+5)& (0+255),b
  9487  0000AE  C081  F083         	movff	??_pf_mount+3,??_pf_mount+5
  9488  0000B2  C080  F082         	movff	??_pf_mount+2,??_pf_mount+4
  9489  0000B6  6B81               	clrf	(??_pf_mount+3)& (0+255),b
  9490  0000B8  6B80               	clrf	(??_pf_mount+2)& (0+255),b
  9491  0000BA  C09F  F084         	movff	pf_mount@buf+11,??_pf_mount+6
  9492  0000BE  6B85               	clrf	(??_pf_mount+7)& (0+255),b
  9493  0000C0  6B86               	clrf	(??_pf_mount+8)& (0+255),b
  9494  0000C2  6B87               	clrf	(??_pf_mount+9)& (0+255),b
  9495  0000C4  C084  F087         	movff	??_pf_mount+6,??_pf_mount+9
  9496  0000C8  6B86               	clrf	(??_pf_mount+8)& (0+255),b
  9497  0000CA  6B85               	clrf	(??_pf_mount+7)& (0+255),b
  9498  0000CC  6B84               	clrf	(??_pf_mount+6)& (0+255),b
  9499  0000CE  5180               	movf	(??_pf_mount+2)& (0+255),w,b
  9500  0000D0  1184               	iorwf	(??_pf_mount+6)& (0+255),w,b
  9501  0000D2  6F88               	movwf	(??_pf_mount+10)& (0+255),b
  9502  0000D4  5181               	movf	(??_pf_mount+3)& (0+255),w,b
  9503  0000D6  1185               	iorwf	(??_pf_mount+7)& (0+255),w,b
  9504  0000D8  6F89               	movwf	(??_pf_mount+11)& (0+255),b
  9505  0000DA  5182               	movf	(??_pf_mount+4)& (0+255),w,b
  9506  0000DC  1186               	iorwf	(??_pf_mount+8)& (0+255),w,b
  9507  0000DE  6F8A               	movwf	(??_pf_mount+12)& (0+255),b
  9508  0000E0  5183               	movf	(??_pf_mount+5)& (0+255),w,b
  9509  0000E2  1187               	iorwf	(??_pf_mount+9)& (0+255),w,b
  9510  0000E4  6F8B               	movwf	(??_pf_mount+13)& (0+255),b
  9511  0000E6  517E               	movf	??_pf_mount& (0+255),w,b
  9512  0000E8  1188               	iorwf	(??_pf_mount+10)& (0+255),w,b
  9513  0000EA  6F8C               	movwf	(??_pf_mount+14)& (0+255),b
  9514  0000EC  517F               	movf	(??_pf_mount+1)& (0+255),w,b
  9515  0000EE  1189               	iorwf	(??_pf_mount+11)& (0+255),w,b
  9516  0000F0  6F8D               	movwf	(??_pf_mount+15)& (0+255),b
  9517  0000F2  0E00               	movlw	0
  9518  0000F4  118A               	iorwf	(??_pf_mount+12)& (0+255),w,b
  9519  0000F6  6F8E               	movwf	(??_pf_mount+16)& (0+255),b
  9520  0000F8  0E00               	movlw	0
  9521  0000FA  118B               	iorwf	(??_pf_mount+13)& (0+255),w,b
  9522  0000FC  6F8F               	movwf	(??_pf_mount+17)& (0+255),b
  9523  0000FE  519C               	movf	(pf_mount@buf+8)& (0+255),w,b
  9524  000100  118C               	iorwf	(??_pf_mount+14)& (0+255),w,b
  9525  000102  6FC0               	movwf	pf_mount@bsect& (0+255),b
  9526  000104  518D               	movf	(??_pf_mount+15)& (0+255),w,b
  9527  000106  6FC1               	movwf	(pf_mount@bsect+1)& (0+255),b
  9528  000108  518E               	movf	(??_pf_mount+16)& (0+255),w,b
  9529  00010A  6FC2               	movwf	(pf_mount@bsect+2)& (0+255),b
  9530  00010C  518F               	movf	(??_pf_mount+17)& (0+255),w,b
  9531  00010E  6FC3               	movwf	(pf_mount@bsect+3)& (0+255),b
  9532                           
  9533                           ; BSR set to: 0
  9534                           ;pff.c: 776: fmt = check_fs(buf, bsect);
  9535  000110  0E94               	movlw	low pf_mount@buf
  9536  000112  6F72               	movwf	check_fs@buf& (0+255),b
  9537  000114  0E00               	movlw	high pf_mount@buf
  9538  000116  6F73               	movwf	(check_fs@buf+1)& (0+255),b
  9539  000118  C0C0  F074         	movff	pf_mount@bsect,check_fs@sect
  9540  00011C  C0C1  F075         	movff	pf_mount@bsect+1,check_fs@sect+1
  9541  000120  C0C2  F076         	movff	pf_mount@bsect+2,check_fs@sect+2
  9542  000124  C0C3  F077         	movff	pf_mount@bsect+3,check_fs@sect+3
  9543  000128  ECF5  F00D         	call	_check_fs	;wreg free
  9544  00012C                     L5:
  9545  00012C  0100               	movlb	0	; () banked
  9546  00012E  6FC8               	movwf	pf_mount@fmt& (0+255),b
  9547  000130                     l968:
  9548                           
  9549                           ; BSR set to: 0
  9550                           ;pff.c: 777: }
  9551                           ;pff.c: 778: }
  9552                           ;pff.c: 779: }
  9553                           ;pff.c: 780: if (fmt == 3) return FR_DISK_ERR;
  9554                           
  9555                           ; BSR set to: 0
  9556                           
  9557                           ; BSR set to: 0
  9558                           
  9559                           ; BSR set to: 0
  9560  000130  0E03               	movlw	3
  9561  000132  19C8               	xorwf	pf_mount@fmt& (0+255),w,b
  9562  000134  A4D8               	btfss	status,2,c
  9563  000136  D002               	goto	l969
  9564                           
  9565                           ; BSR set to: 0
  9566  000138  0E01               	movlw	1
  9567                           
  9568                           ; BSR set to: 0
  9569  00013A  0012               	return	
  9570  00013C                     l969:
  9571                           
  9572                           ; BSR set to: 0
  9573                           ;pff.c: 781: if (fmt) return FR_NO_FILESYSTEM;
  9574                           
  9575                           ; BSR set to: 0
  9576  00013C  51C8               	movf	pf_mount@fmt& (0+255),w,b
  9577  00013E  B4D8               	btfsc	status,2,c
  9578  000140  D002               	goto	l970
  9579                           
  9580                           ; BSR set to: 0
  9581  000142  0E06               	movlw	6
  9582                           
  9583                           ; BSR set to: 0
  9584  000144  0012               	return	
  9585  000146                     l970:
  9586                           
  9587                           ; BSR set to: 0
  9588                           ;pff.c: 784: if (disk_readp(buf, bsect, 13, sizeof (buf))) return FR_DISK_ERR;
  9589                           
  9590                           ; BSR set to: 0
  9591  000146  0E94               	movlw	low pf_mount@buf
  9592  000148  6F60               	movwf	disk_readp@rd& (0+255),b
  9593  00014A  0E00               	movlw	high pf_mount@buf
  9594  00014C  6F61               	movwf	(disk_readp@rd+1)& (0+255),b
  9595  00014E  C0C0  F062         	movff	pf_mount@bsect,disk_readp@sector
  9596  000152  C0C1  F063         	movff	pf_mount@bsect+1,disk_readp@sector+1
  9597  000156  C0C2  F064         	movff	pf_mount@bsect+2,disk_readp@sector+2
  9598  00015A  C0C3  F065         	movff	pf_mount@bsect+3,disk_readp@sector+3
  9599  00015E  0E00               	movlw	0
  9600  000160  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
  9601  000162  0E0D               	movlw	13
  9602  000164  6F66               	movwf	disk_readp@offset& (0+255),b
  9603  000166  0E00               	movlw	0
  9604  000168  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  9605  00016A  0E24               	movlw	36
  9606  00016C  6F68               	movwf	disk_readp@count& (0+255),b
  9607  00016E  EC3C  F009         	call	_disk_readp	;wreg free
  9608  000172  0900               	iorlw	0
  9609  000174  B4D8               	btfsc	status,2,c
  9610  000176  D002               	goto	l971
  9611  000178  0E01               	movlw	1
  9612  00017A  0012               	return	
  9613  00017C                     l971:
  9614                           
  9615                           ;pff.c: 786: fsize = (WORD)(((WORD)*((BYTE*)(buf+22-13)+1)<<8)|(WORD)*(BYTE*)(buf+22-13)
      +                          );
  9616  00017C  0100               	movlb	0	; () banked
  9617  00017E  519D               	movf	(pf_mount@buf+9)& (0+255),w,b
  9618  000180  C09E  F07E         	movff	pf_mount@buf+10,??_pf_mount
  9619  000184  6B7F               	clrf	(??_pf_mount+1)& (0+255),b
  9620  000186  C07E  F07F         	movff	??_pf_mount,??_pf_mount+1
  9621  00018A  6B7E               	clrf	??_pf_mount& (0+255),b
  9622  00018C  137E               	iorwf	??_pf_mount& (0+255),f,b
  9623  00018E  0E00               	movlw	0
  9624  000190  137F               	iorwf	(??_pf_mount+1)& (0+255),f,b
  9625  000192  C07E  F0C4         	movff	??_pf_mount,pf_mount@fsize
  9626  000196  C07F  F0C5         	movff	??_pf_mount+1,pf_mount@fsize+1
  9627  00019A  6BC6               	clrf	(pf_mount@fsize+2)& (0+255),b
  9628  00019C  6BC7               	clrf	(pf_mount@fsize+3)& (0+255),b
  9629                           
  9630                           ;pff.c: 787: if (!fsize) fsize = (DWORD)(((DWORD)*((BYTE*)(buf+36-13)+3)<<24)|((DWORD)*(
      +                          (BYTE*)(buf+36-13)+2)<<16)|((WORD)*((BYTE*)(buf+36-13)+1)<<8)|*(BYTE*)(buf+36-13));
  9631  00019E  51C4               	movf	pf_mount@fsize& (0+255),w,b
  9632  0001A0  11C5               	iorwf	(pf_mount@fsize+1)& (0+255),w,b
  9633  0001A2  11C6               	iorwf	(pf_mount@fsize+2)& (0+255),w,b
  9634  0001A4  11C7               	iorwf	(pf_mount@fsize+3)& (0+255),w,b
  9635  0001A6  A4D8               	btfss	status,2,c
  9636  0001A8  D039               	goto	l972
  9637                           
  9638                           ; BSR set to: 0
  9639  0001AA  51AC               	movf	(pf_mount@buf+24)& (0+255),w,b
  9640  0001AC  6F7F               	movwf	(??_pf_mount+1)& (0+255),b
  9641  0001AE  6B7E               	clrf	??_pf_mount& (0+255),b
  9642  0001B0  C0AD  F080         	movff	pf_mount@buf+25,??_pf_mount+2
  9643  0001B4  6B81               	clrf	(??_pf_mount+3)& (0+255),b
  9644  0001B6  6B82               	clrf	(??_pf_mount+4)& (0+255),b
  9645  0001B8  6B83               	clrf	(??_pf_mount+5)& (0+255),b
  9646  0001BA  C081  F083         	movff	??_pf_mount+3,??_pf_mount+5
  9647  0001BE  C080  F082         	movff	??_pf_mount+2,??_pf_mount+4
  9648  0001C2  6B81               	clrf	(??_pf_mount+3)& (0+255),b
  9649  0001C4  6B80               	clrf	(??_pf_mount+2)& (0+255),b
  9650  0001C6  C0AE  F084         	movff	pf_mount@buf+26,??_pf_mount+6
  9651  0001CA  6B85               	clrf	(??_pf_mount+7)& (0+255),b
  9652  0001CC  6B86               	clrf	(??_pf_mount+8)& (0+255),b
  9653  0001CE  6B87               	clrf	(??_pf_mount+9)& (0+255),b
  9654  0001D0  C084  F087         	movff	??_pf_mount+6,??_pf_mount+9
  9655  0001D4  6B86               	clrf	(??_pf_mount+8)& (0+255),b
  9656  0001D6  6B85               	clrf	(??_pf_mount+7)& (0+255),b
  9657  0001D8  6B84               	clrf	(??_pf_mount+6)& (0+255),b
  9658  0001DA  5180               	movf	(??_pf_mount+2)& (0+255),w,b
  9659  0001DC  1184               	iorwf	(??_pf_mount+6)& (0+255),w,b
  9660  0001DE  6F88               	movwf	(??_pf_mount+10)& (0+255),b
  9661  0001E0  5181               	movf	(??_pf_mount+3)& (0+255),w,b
  9662  0001E2  1185               	iorwf	(??_pf_mount+7)& (0+255),w,b
  9663  0001E4  6F89               	movwf	(??_pf_mount+11)& (0+255),b
  9664  0001E6  5182               	movf	(??_pf_mount+4)& (0+255),w,b
  9665  0001E8  1186               	iorwf	(??_pf_mount+8)& (0+255),w,b
  9666  0001EA  6F8A               	movwf	(??_pf_mount+12)& (0+255),b
  9667  0001EC  5183               	movf	(??_pf_mount+5)& (0+255),w,b
  9668  0001EE  1187               	iorwf	(??_pf_mount+9)& (0+255),w,b
  9669  0001F0  6F8B               	movwf	(??_pf_mount+13)& (0+255),b
  9670  0001F2  517E               	movf	??_pf_mount& (0+255),w,b
  9671  0001F4  1188               	iorwf	(??_pf_mount+10)& (0+255),w,b
  9672  0001F6  6F8C               	movwf	(??_pf_mount+14)& (0+255),b
  9673  0001F8  517F               	movf	(??_pf_mount+1)& (0+255),w,b
  9674  0001FA  1189               	iorwf	(??_pf_mount+11)& (0+255),w,b
  9675  0001FC  6F8D               	movwf	(??_pf_mount+15)& (0+255),b
  9676  0001FE  0E00               	movlw	0
  9677  000200  118A               	iorwf	(??_pf_mount+12)& (0+255),w,b
  9678  000202  6F8E               	movwf	(??_pf_mount+16)& (0+255),b
  9679  000204  0E00               	movlw	0
  9680  000206  118B               	iorwf	(??_pf_mount+13)& (0+255),w,b
  9681  000208  6F8F               	movwf	(??_pf_mount+17)& (0+255),b
  9682  00020A  51AB               	movf	(pf_mount@buf+23)& (0+255),w,b
  9683  00020C  118C               	iorwf	(??_pf_mount+14)& (0+255),w,b
  9684  00020E  6FC4               	movwf	pf_mount@fsize& (0+255),b
  9685  000210  518D               	movf	(??_pf_mount+15)& (0+255),w,b
  9686  000212  6FC5               	movwf	(pf_mount@fsize+1)& (0+255),b
  9687  000214  518E               	movf	(??_pf_mount+16)& (0+255),w,b
  9688  000216  6FC6               	movwf	(pf_mount@fsize+2)& (0+255),b
  9689  000218  518F               	movf	(??_pf_mount+17)& (0+255),w,b
  9690  00021A  6FC7               	movwf	(pf_mount@fsize+3)& (0+255),b
  9691  00021C                     l972:
  9692                           
  9693                           ; BSR set to: 0
  9694                           ;pff.c: 789: fsize *= buf[16-13];
  9695                           
  9696                           ; BSR set to: 0
  9697  00021C  C0C4  F01A         	movff	pf_mount@fsize,___lmul@multiplier
  9698  000220  C0C5  F01B         	movff	pf_mount@fsize+1,___lmul@multiplier+1
  9699  000224  C0C6  F01C         	movff	pf_mount@fsize+2,___lmul@multiplier+2
  9700  000228  C0C7  F01D         	movff	pf_mount@fsize+3,___lmul@multiplier+3
  9701  00022C  5197               	movf	(pf_mount@buf+3)& (0+255),w,b
  9702  00022E  6E1E               	movwf	___lmul@multiplicand,c
  9703  000230  6A1F               	clrf	___lmul@multiplicand+1,c
  9704  000232  6A20               	clrf	___lmul@multiplicand+2,c
  9705  000234  6A21               	clrf	___lmul@multiplicand+3,c
  9706  000236  EC64  F018         	call	___lmul	;wreg free
  9707  00023A  C01A  F0C4         	movff	?___lmul,pf_mount@fsize
  9708  00023E  C01B  F0C5         	movff	?___lmul+1,pf_mount@fsize+1
  9709  000242  C01C  F0C6         	movff	?___lmul+2,pf_mount@fsize+2
  9710  000246  C01D  F0C7         	movff	?___lmul+3,pf_mount@fsize+3
  9711                           
  9712                           ;pff.c: 790: fs->fatbase = bsect + (WORD)(((WORD)*((BYTE*)(buf+14-13)+1)<<8)|(WORD)*(BYT
      +                          E*)(buf+14-13));
  9713  00024A  0100               	movlb	0	; () banked
  9714  00024C  5195               	movf	(pf_mount@buf+1)& (0+255),w,b
  9715  00024E  C096  F07E         	movff	pf_mount@buf+2,??_pf_mount
  9716  000252  6B7F               	clrf	(??_pf_mount+1)& (0+255),b
  9717  000254  C07E  F07F         	movff	??_pf_mount,??_pf_mount+1
  9718  000258  6B7E               	clrf	??_pf_mount& (0+255),b
  9719  00025A  137E               	iorwf	??_pf_mount& (0+255),f,b
  9720  00025C  0E00               	movlw	0
  9721  00025E  137F               	iorwf	(??_pf_mount+1)& (0+255),f,b
  9722  000260  517E               	movf	??_pf_mount& (0+255),w,b
  9723  000262  25C0               	addwf	pf_mount@bsect& (0+255),w,b
  9724  000264  6F80               	movwf	(??_pf_mount+2)& (0+255),b
  9725  000266  517F               	movf	(??_pf_mount+1)& (0+255),w,b
  9726  000268  21C1               	addwfc	(pf_mount@bsect+1)& (0+255),w,b
  9727  00026A  6F81               	movwf	(??_pf_mount+3)& (0+255),b
  9728  00026C  0E00               	movlw	0
  9729  00026E  21C2               	addwfc	(pf_mount@bsect+2)& (0+255),w,b
  9730  000270  6F82               	movwf	(??_pf_mount+4)& (0+255),b
  9731  000272  0E00               	movlw	0
  9732  000274  21C3               	addwfc	(pf_mount@bsect+3)& (0+255),w,b
  9733  000276  6F83               	movwf	(??_pf_mount+5)& (0+255),b
  9734  000278  EE20 F00A          	lfsr	2,10
  9735  00027C  517C               	movf	pf_mount@fs& (0+255),w,b
  9736  00027E  26D9               	addwf	fsr2l,f,c
  9737  000280  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9738  000282  22DA               	addwfc	fsr2h,f,c
  9739  000284  C080  FFDE         	movff	??_pf_mount+2,postinc2
  9740  000288  C081  FFDE         	movff	??_pf_mount+3,postinc2
  9741  00028C  C082  FFDE         	movff	??_pf_mount+4,postinc2
  9742  000290  C083  FFDE         	movff	??_pf_mount+5,postinc2
  9743                           
  9744                           ; BSR set to: 0
  9745                           ;pff.c: 791: fs->csize = buf[13-13];
  9746  000294  EE20 F002          	lfsr	2,2
  9747  000298  517C               	movf	pf_mount@fs& (0+255),w,b
  9748  00029A  26D9               	addwf	fsr2l,f,c
  9749  00029C  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9750  00029E  22DA               	addwfc	fsr2h,f,c
  9751  0002A0  C094  FFDF         	movff	pf_mount@buf,indf2
  9752                           
  9753                           ; BSR set to: 0
  9754                           ;pff.c: 792: fs->n_rootdir = (WORD)(((WORD)*((BYTE*)(buf+17-13)+1)<<8)|(WORD)*(BYTE*)(bu
      +                          f+17-13));
  9755  0002A4  5198               	movf	(pf_mount@buf+4)& (0+255),w,b
  9756  0002A6  C099  F07E         	movff	pf_mount@buf+5,??_pf_mount
  9757  0002AA  6B7F               	clrf	(??_pf_mount+1)& (0+255),b
  9758  0002AC  C07E  F07F         	movff	??_pf_mount,??_pf_mount+1
  9759  0002B0  6B7E               	clrf	??_pf_mount& (0+255),b
  9760  0002B2  137E               	iorwf	??_pf_mount& (0+255),f,b
  9761  0002B4  0E00               	movlw	0
  9762  0002B6  137F               	iorwf	(??_pf_mount+1)& (0+255),f,b
  9763  0002B8  EE20 F004          	lfsr	2,4
  9764  0002BC  517C               	movf	pf_mount@fs& (0+255),w,b
  9765  0002BE  26D9               	addwf	fsr2l,f,c
  9766  0002C0  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9767  0002C2  22DA               	addwfc	fsr2h,f,c
  9768  0002C4  C07E  FFDE         	movff	??_pf_mount,postinc2
  9769  0002C8  C07F  FFDD         	movff	??_pf_mount+1,postdec2
  9770                           
  9771                           ; BSR set to: 0
  9772                           ;pff.c: 793: tsect = (WORD)(((WORD)*((BYTE*)(buf+19-13)+1)<<8)|(WORD)*(BYTE*)(buf+19-13)
      +                          );
  9773  0002CC  519A               	movf	(pf_mount@buf+6)& (0+255),w,b
  9774  0002CE  C09B  F07E         	movff	pf_mount@buf+7,??_pf_mount
  9775  0002D2  6B7F               	clrf	(??_pf_mount+1)& (0+255),b
  9776  0002D4  C07E  F07F         	movff	??_pf_mount,??_pf_mount+1
  9777  0002D8  6B7E               	clrf	??_pf_mount& (0+255),b
  9778  0002DA  137E               	iorwf	??_pf_mount& (0+255),f,b
  9779  0002DC  0E00               	movlw	0
  9780  0002DE  137F               	iorwf	(??_pf_mount+1)& (0+255),f,b
  9781  0002E0  C07E  F0B8         	movff	??_pf_mount,pf_mount@tsect
  9782  0002E4  C07F  F0B9         	movff	??_pf_mount+1,pf_mount@tsect+1
  9783  0002E8  6BBA               	clrf	(pf_mount@tsect+2)& (0+255),b
  9784  0002EA  6BBB               	clrf	(pf_mount@tsect+3)& (0+255),b
  9785                           
  9786                           ; BSR set to: 0
  9787                           ;pff.c: 794: if (!tsect) tsect = (DWORD)(((DWORD)*((BYTE*)(buf+32-13)+3)<<24)|((DWORD)*(
      +                          (BYTE*)(buf+32-13)+2)<<16)|((WORD)*((BYTE*)(buf+32-13)+1)<<8)|*(BYTE*)(buf+32-13));
  9788  0002EC  51B8               	movf	pf_mount@tsect& (0+255),w,b
  9789  0002EE  11B9               	iorwf	(pf_mount@tsect+1)& (0+255),w,b
  9790  0002F0  11BA               	iorwf	(pf_mount@tsect+2)& (0+255),w,b
  9791  0002F2  11BB               	iorwf	(pf_mount@tsect+3)& (0+255),w,b
  9792  0002F4  A4D8               	btfss	status,2,c
  9793  0002F6  D039               	goto	l973
  9794                           
  9795                           ; BSR set to: 0
  9796  0002F8  51A8               	movf	(pf_mount@buf+20)& (0+255),w,b
  9797  0002FA  6F7F               	movwf	(??_pf_mount+1)& (0+255),b
  9798  0002FC  6B7E               	clrf	??_pf_mount& (0+255),b
  9799  0002FE  C0A9  F080         	movff	pf_mount@buf+21,??_pf_mount+2
  9800  000302  6B81               	clrf	(??_pf_mount+3)& (0+255),b
  9801  000304  6B82               	clrf	(??_pf_mount+4)& (0+255),b
  9802  000306  6B83               	clrf	(??_pf_mount+5)& (0+255),b
  9803  000308  C081  F083         	movff	??_pf_mount+3,??_pf_mount+5
  9804  00030C  C080  F082         	movff	??_pf_mount+2,??_pf_mount+4
  9805  000310  6B81               	clrf	(??_pf_mount+3)& (0+255),b
  9806  000312  6B80               	clrf	(??_pf_mount+2)& (0+255),b
  9807  000314  C0AA  F084         	movff	pf_mount@buf+22,??_pf_mount+6
  9808  000318  6B85               	clrf	(??_pf_mount+7)& (0+255),b
  9809  00031A  6B86               	clrf	(??_pf_mount+8)& (0+255),b
  9810  00031C  6B87               	clrf	(??_pf_mount+9)& (0+255),b
  9811  00031E  C084  F087         	movff	??_pf_mount+6,??_pf_mount+9
  9812  000322  6B86               	clrf	(??_pf_mount+8)& (0+255),b
  9813  000324  6B85               	clrf	(??_pf_mount+7)& (0+255),b
  9814  000326  6B84               	clrf	(??_pf_mount+6)& (0+255),b
  9815  000328  5180               	movf	(??_pf_mount+2)& (0+255),w,b
  9816  00032A  1184               	iorwf	(??_pf_mount+6)& (0+255),w,b
  9817  00032C  6F88               	movwf	(??_pf_mount+10)& (0+255),b
  9818  00032E  5181               	movf	(??_pf_mount+3)& (0+255),w,b
  9819  000330  1185               	iorwf	(??_pf_mount+7)& (0+255),w,b
  9820  000332  6F89               	movwf	(??_pf_mount+11)& (0+255),b
  9821  000334  5182               	movf	(??_pf_mount+4)& (0+255),w,b
  9822  000336  1186               	iorwf	(??_pf_mount+8)& (0+255),w,b
  9823  000338  6F8A               	movwf	(??_pf_mount+12)& (0+255),b
  9824  00033A  5183               	movf	(??_pf_mount+5)& (0+255),w,b
  9825  00033C  1187               	iorwf	(??_pf_mount+9)& (0+255),w,b
  9826  00033E  6F8B               	movwf	(??_pf_mount+13)& (0+255),b
  9827  000340  517E               	movf	??_pf_mount& (0+255),w,b
  9828  000342  1188               	iorwf	(??_pf_mount+10)& (0+255),w,b
  9829  000344  6F8C               	movwf	(??_pf_mount+14)& (0+255),b
  9830  000346  517F               	movf	(??_pf_mount+1)& (0+255),w,b
  9831  000348  1189               	iorwf	(??_pf_mount+11)& (0+255),w,b
  9832  00034A  6F8D               	movwf	(??_pf_mount+15)& (0+255),b
  9833  00034C  0E00               	movlw	0
  9834  00034E  118A               	iorwf	(??_pf_mount+12)& (0+255),w,b
  9835  000350  6F8E               	movwf	(??_pf_mount+16)& (0+255),b
  9836  000352  0E00               	movlw	0
  9837  000354  118B               	iorwf	(??_pf_mount+13)& (0+255),w,b
  9838  000356  6F8F               	movwf	(??_pf_mount+17)& (0+255),b
  9839  000358  51A7               	movf	(pf_mount@buf+19)& (0+255),w,b
  9840  00035A  118C               	iorwf	(??_pf_mount+14)& (0+255),w,b
  9841  00035C  6FB8               	movwf	pf_mount@tsect& (0+255),b
  9842  00035E  518D               	movf	(??_pf_mount+15)& (0+255),w,b
  9843  000360  6FB9               	movwf	(pf_mount@tsect+1)& (0+255),b
  9844  000362  518E               	movf	(??_pf_mount+16)& (0+255),w,b
  9845  000364  6FBA               	movwf	(pf_mount@tsect+2)& (0+255),b
  9846  000366  518F               	movf	(??_pf_mount+17)& (0+255),w,b
  9847  000368  6FBB               	movwf	(pf_mount@tsect+3)& (0+255),b
  9848  00036A                     l973:
  9849                           
  9850                           ; BSR set to: 0
  9851                           ;pff.c: 795: mclst = (tsect
  9852                           ;pff.c: 796: - (WORD)(((WORD)*((BYTE*)(buf+14-13)+1)<<8)|(WORD)*(BYTE*)(buf+14-13)) - fs
      +                          ize - fs->n_rootdir / 16
  9853                           ;pff.c: 797: ) / fs->csize + 2;
  9854                           
  9855                           ; BSR set to: 0
  9856  00036A  EE20 F004          	lfsr	2,4
  9857  00036E  517C               	movf	pf_mount@fs& (0+255),w,b
  9858  000370  26D9               	addwf	fsr2l,f,c
  9859  000372  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9860  000374  22DA               	addwfc	fsr2h,f,c
  9861  000376  CFDE F07E          	movff	postinc2,??_pf_mount
  9862  00037A  CFDD F07F          	movff	postdec2,??_pf_mount+1
  9863  00037E  0E04               	movlw	4
  9864  000380  6F80               	movwf	(??_pf_mount+2)& (0+255),b
  9865  000382                     u7965:
  9866  000382  90D8               	bcf	status,0,c
  9867  000384  337F               	rrcf	(??_pf_mount+1)& (0+255),f,b
  9868  000386  337E               	rrcf	??_pf_mount& (0+255),f,b
  9869  000388  2F80               	decfsz	(??_pf_mount+2)& (0+255),f,b
  9870  00038A  D7FB               	goto	u7965
  9871  00038C  5195               	movf	(pf_mount@buf+1)& (0+255),w,b
  9872  00038E  C096  F081         	movff	pf_mount@buf+2,??_pf_mount+3
  9873  000392  6B82               	clrf	(??_pf_mount+4)& (0+255),b
  9874  000394  C081  F082         	movff	??_pf_mount+3,??_pf_mount+4
  9875  000398  6B81               	clrf	(??_pf_mount+3)& (0+255),b
  9876  00039A  1381               	iorwf	(??_pf_mount+3)& (0+255),f,b
  9877  00039C  0E00               	movlw	0
  9878  00039E  1382               	iorwf	(??_pf_mount+4)& (0+255),f,b
  9879  0003A0  5181               	movf	(??_pf_mount+3)& (0+255),w,b
  9880  0003A2  257E               	addwf	??_pf_mount& (0+255),w,b
  9881  0003A4  6F83               	movwf	(??_pf_mount+5)& (0+255),b
  9882  0003A6  5182               	movf	(??_pf_mount+4)& (0+255),w,b
  9883  0003A8  217F               	addwfc	(??_pf_mount+1)& (0+255),w,b
  9884  0003AA  6F84               	movwf	(??_pf_mount+6)& (0+255),b
  9885  0003AC  6B85               	clrf	(??_pf_mount+7)& (0+255),b
  9886  0003AE  B0D8               	btfsc	status,0,c
  9887  0003B0  2B85               	incf	(??_pf_mount+7)& (0+255),f,b
  9888  0003B2  6B86               	clrf	(??_pf_mount+8)& (0+255),b
  9889  0003B4  51C4               	movf	pf_mount@fsize& (0+255),w,b
  9890  0003B6  2583               	addwf	(??_pf_mount+5)& (0+255),w,b
  9891  0003B8  6F87               	movwf	(??_pf_mount+9)& (0+255),b
  9892  0003BA  51C5               	movf	(pf_mount@fsize+1)& (0+255),w,b
  9893  0003BC  2184               	addwfc	(??_pf_mount+6)& (0+255),w,b
  9894  0003BE  6F88               	movwf	(??_pf_mount+10)& (0+255),b
  9895  0003C0  51C6               	movf	(pf_mount@fsize+2)& (0+255),w,b
  9896  0003C2  2185               	addwfc	(??_pf_mount+7)& (0+255),w,b
  9897  0003C4  6F89               	movwf	(??_pf_mount+11)& (0+255),b
  9898  0003C6  51C7               	movf	(pf_mount@fsize+3)& (0+255),w,b
  9899  0003C8  2186               	addwfc	(??_pf_mount+8)& (0+255),w,b
  9900  0003CA  6F8A               	movwf	(??_pf_mount+12)& (0+255),b
  9901  0003CC  1F87               	comf	(??_pf_mount+9)& (0+255),f,b
  9902  0003CE  1F88               	comf	(??_pf_mount+10)& (0+255),f,b
  9903  0003D0  1F89               	comf	(??_pf_mount+11)& (0+255),f,b
  9904  0003D2  1F8A               	comf	(??_pf_mount+12)& (0+255),f,b
  9905  0003D4  2B87               	incf	(??_pf_mount+9)& (0+255),f,b
  9906  0003D6  0E00               	movlw	0
  9907  0003D8  2388               	addwfc	(??_pf_mount+10)& (0+255),f,b
  9908  0003DA  2389               	addwfc	(??_pf_mount+11)& (0+255),f,b
  9909  0003DC  238A               	addwfc	(??_pf_mount+12)& (0+255),f,b
  9910  0003DE  51B8               	movf	pf_mount@tsect& (0+255),w,b
  9911  0003E0  2587               	addwf	(??_pf_mount+9)& (0+255),w,b
  9912  0003E2  6E1A               	movwf	___lldiv@dividend,c
  9913  0003E4  51B9               	movf	(pf_mount@tsect+1)& (0+255),w,b
  9914  0003E6  2188               	addwfc	(??_pf_mount+10)& (0+255),w,b
  9915  0003E8  6E1B               	movwf	___lldiv@dividend+1,c
  9916  0003EA  51BA               	movf	(pf_mount@tsect+2)& (0+255),w,b
  9917  0003EC  2189               	addwfc	(??_pf_mount+11)& (0+255),w,b
  9918  0003EE  6E1C               	movwf	___lldiv@dividend+2,c
  9919  0003F0  51BB               	movf	(pf_mount@tsect+3)& (0+255),w,b
  9920  0003F2  218A               	addwfc	(??_pf_mount+12)& (0+255),w,b
  9921  0003F4  6E1D               	movwf	___lldiv@dividend+3,c
  9922  0003F6  EE20 F002          	lfsr	2,2
  9923  0003FA  517C               	movf	pf_mount@fs& (0+255),w,b
  9924  0003FC  26D9               	addwf	fsr2l,f,c
  9925  0003FE  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9926  000400  22DA               	addwfc	fsr2h,f,c
  9927  000402  50DF               	movf	indf2,w,c
  9928  000404  6F8B               	movwf	(??_pf_mount+13)& (0+255),b
  9929  000406  518B               	movf	(??_pf_mount+13)& (0+255),w,b
  9930  000408  6E1E               	movwf	___lldiv@divisor,c
  9931  00040A  6A1F               	clrf	___lldiv@divisor+1,c
  9932  00040C  6A20               	clrf	___lldiv@divisor+2,c
  9933  00040E  6A21               	clrf	___lldiv@divisor+3,c
  9934  000410  ECFD  F015         	call	___lldiv	;wreg free
  9935  000414  0E02               	movlw	2
  9936  000416  241A               	addwf	?___lldiv,w,c
  9937  000418  0100               	movlb	0	; () banked
  9938  00041A  6FBC               	movwf	pf_mount@mclst& (0+255),b
  9939  00041C  0E00               	movlw	0
  9940  00041E  201B               	addwfc	?___lldiv+1,w,c
  9941  000420  6FBD               	movwf	(pf_mount@mclst+1)& (0+255),b
  9942  000422  0E00               	movlw	0
  9943  000424  201C               	addwfc	?___lldiv+2,w,c
  9944  000426  6FBE               	movwf	(pf_mount@mclst+2)& (0+255),b
  9945  000428  0E00               	movlw	0
  9946  00042A  201D               	addwfc	?___lldiv+3,w,c
  9947  00042C  6FBF               	movwf	(pf_mount@mclst+3)& (0+255),b
  9948                           
  9949                           ; BSR set to: 0
  9950                           ;pff.c: 798: fs->n_fatent = (DWORD)mclst;
  9951  00042E  EE20 F006          	lfsr	2,6
  9952  000432  517C               	movf	pf_mount@fs& (0+255),w,b
  9953  000434  26D9               	addwf	fsr2l,f,c
  9954  000436  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9955  000438  22DA               	addwfc	fsr2h,f,c
  9956  00043A  C0BC  FFDE         	movff	pf_mount@mclst,postinc2
  9957  00043E  C0BD  FFDE         	movff	pf_mount@mclst+1,postinc2
  9958  000442  C0BE  FFDE         	movff	pf_mount@mclst+2,postinc2
  9959  000446  C0BF  FFDE         	movff	pf_mount@mclst+3,postinc2
  9960                           
  9961                           ; BSR set to: 0
  9962                           ;pff.c: 801: if (1 && mclst < 0xFF7)
  9963  00044A  0E00               	movlw	0
  9964  00044C  6FC8               	movwf	pf_mount@fmt& (0+255),b
  9965                           
  9966                           ; BSR set to: 0
  9967  00044E  51BF               	movf	(pf_mount@mclst+3)& (0+255),w,b
  9968  000450  11BE               	iorwf	(pf_mount@mclst+2)& (0+255),w,b
  9969  000452  E108               	bnz	l7048
  9970  000454  0EF7               	movlw	247
  9971  000456  5DBC               	subwf	pf_mount@mclst& (0+255),w,b
  9972  000458  0E0F               	movlw	15
  9973  00045A  59BD               	subwfb	(pf_mount@mclst+1)& (0+255),w,b
  9974  00045C  B0D8               	btfsc	status,0,c
  9975  00045E  D002               	goto	l974
  9976                           
  9977                           ; BSR set to: 0
  9978                           ;pff.c: 802: fmt = 1;
  9979  000460  0E01               	movlw	1
  9980  000462  6FC8               	movwf	pf_mount@fmt& (0+255),b
  9981  000464                     l974:
  9982  000464                     l7048:
  9983                           
  9984                           ; BSR set to: 0
  9985  000464  51BF               	movf	(pf_mount@mclst+3)& (0+255),w,b
  9986  000466  11BE               	iorwf	(pf_mount@mclst+2)& (0+255),w,b
  9987  000468  E106               	bnz	u7980
  9988  00046A  0EF8               	movlw	248
  9989  00046C  5DBC               	subwf	pf_mount@mclst& (0+255),w,b
  9990  00046E  0E0F               	movlw	15
  9991  000470  59BD               	subwfb	(pf_mount@mclst+1)& (0+255),w,b
  9992  000472  A0D8               	btfss	status,0,c
  9993  000474  D00B               	goto	l975
  9994  000476                     u7980:
  9995                           
  9996                           ; BSR set to: 0
  9997  000476  51BF               	movf	(pf_mount@mclst+3)& (0+255),w,b
  9998  000478  11BE               	iorwf	(pf_mount@mclst+2)& (0+255),w,b
  9999  00047A  E108               	bnz	l7054
 10000  00047C  0EF7               	movlw	247
 10001  00047E  5DBC               	subwf	pf_mount@mclst& (0+255),w,b
 10002  000480  0EFF               	movlw	255
 10003  000482  59BD               	subwfb	(pf_mount@mclst+1)& (0+255),w,b
 10004  000484  B0D8               	btfsc	status,0,c
 10005  000486  D002               	goto	l975
 10006                           
 10007                           ; BSR set to: 0
 10008                           ;pff.c: 804: fmt = 2;
 10009  000488  0E02               	movlw	2
 10010  00048A  6FC8               	movwf	pf_mount@fmt& (0+255),b
 10011  00048C                     l975:
 10012  00048C                     l7054:
 10013                           
 10014                           ; BSR set to: 0
 10015  00048C  51BF               	movf	(pf_mount@mclst+3)& (0+255),w,b
 10016  00048E  11BE               	iorwf	(pf_mount@mclst+2)& (0+255),w,b
 10017  000490  E106               	bnz	u8000
 10018  000492  0EF7               	movlw	247
 10019  000494  5DBC               	subwf	pf_mount@mclst& (0+255),w,b
 10020  000496  0EFF               	movlw	255
 10021  000498  59BD               	subwfb	(pf_mount@mclst+1)& (0+255),w,b
 10022  00049A  A0D8               	btfss	status,0,c
 10023  00049C  D002               	goto	l976
 10024  00049E                     u8000:
 10025                           
 10026                           ; BSR set to: 0
 10027                           ;pff.c: 806: fmt = 3;
 10028  00049E  0E03               	movlw	3
 10029  0004A0  6FC8               	movwf	pf_mount@fmt& (0+255),b
 10030  0004A2                     l976:
 10031                           
 10032                           ; BSR set to: 0
 10033                           ;pff.c: 807: if (!fmt) return FR_NO_FILESYSTEM;
 10034  0004A2  51C8               	movf	pf_mount@fmt& (0+255),w,b
 10035  0004A4  A4D8               	btfss	status,2,c
 10036  0004A6  D002               	goto	l977
 10037                           
 10038                           ; BSR set to: 0
 10039  0004A8  0E06               	movlw	6
 10040                           
 10041                           ; BSR set to: 0
 10042  0004AA  0012               	return	
 10043  0004AC                     l977:
 10044                           
 10045                           ; BSR set to: 0
 10046                           ;pff.c: 810: if (0 || (1 && fmt == 3))
 10047                           
 10048                           ; BSR set to: 0
 10049  0004AC  C07C  FFD9         	movff	pf_mount@fs,fsr2l
 10050  0004B0  C07D  FFDA         	movff	pf_mount@fs+1,fsr2h
 10051  0004B4  C0C8  FFDF         	movff	pf_mount@fmt,indf2
 10052                           
 10053                           ; BSR set to: 0
 10054  0004B8  0E03               	movlw	3
 10055  0004BA  19C8               	xorwf	pf_mount@fmt& (0+255),w,b
 10056  0004BC  A4D8               	btfss	status,2,c
 10057  0004BE  D048               	goto	l978
 10058                           
 10059                           ; BSR set to: 0
 10060                           ;pff.c: 811: fs->dirbase = (DWORD)(((DWORD)*((BYTE*)(buf+(44-13))+3)<<24)|((DWORD)*((BYT
      +                          E*)(buf+(44-13))+2)<<16)|((WORD)*((BYTE*)(buf+(44-13))+1)<<8)|*(BYTE*)(buf+(44-13)));
 10061                           
 10062                           ; BSR set to: 0
 10063  0004C0  51B4               	movf	(pf_mount@buf+32)& (0+255),w,b
 10064  0004C2  6F7F               	movwf	(??_pf_mount+1)& (0+255),b
 10065  0004C4  6B7E               	clrf	??_pf_mount& (0+255),b
 10066  0004C6  C0B5  F080         	movff	pf_mount@buf+33,??_pf_mount+2
 10067  0004CA  6B81               	clrf	(??_pf_mount+3)& (0+255),b
 10068  0004CC  6B82               	clrf	(??_pf_mount+4)& (0+255),b
 10069  0004CE  6B83               	clrf	(??_pf_mount+5)& (0+255),b
 10070  0004D0  C081  F083         	movff	??_pf_mount+3,??_pf_mount+5
 10071  0004D4  C080  F082         	movff	??_pf_mount+2,??_pf_mount+4
 10072  0004D8  6B81               	clrf	(??_pf_mount+3)& (0+255),b
 10073  0004DA  6B80               	clrf	(??_pf_mount+2)& (0+255),b
 10074  0004DC  C0B6  F084         	movff	pf_mount@buf+34,??_pf_mount+6
 10075  0004E0  6B85               	clrf	(??_pf_mount+7)& (0+255),b
 10076  0004E2  6B86               	clrf	(??_pf_mount+8)& (0+255),b
 10077  0004E4  6B87               	clrf	(??_pf_mount+9)& (0+255),b
 10078  0004E6  C084  F087         	movff	??_pf_mount+6,??_pf_mount+9
 10079  0004EA  6B86               	clrf	(??_pf_mount+8)& (0+255),b
 10080  0004EC  6B85               	clrf	(??_pf_mount+7)& (0+255),b
 10081  0004EE  6B84               	clrf	(??_pf_mount+6)& (0+255),b
 10082  0004F0  5180               	movf	(??_pf_mount+2)& (0+255),w,b
 10083  0004F2  1184               	iorwf	(??_pf_mount+6)& (0+255),w,b
 10084  0004F4  6F88               	movwf	(??_pf_mount+10)& (0+255),b
 10085  0004F6  5181               	movf	(??_pf_mount+3)& (0+255),w,b
 10086  0004F8  1185               	iorwf	(??_pf_mount+7)& (0+255),w,b
 10087  0004FA  6F89               	movwf	(??_pf_mount+11)& (0+255),b
 10088  0004FC  5182               	movf	(??_pf_mount+4)& (0+255),w,b
 10089  0004FE  1186               	iorwf	(??_pf_mount+8)& (0+255),w,b
 10090  000500  6F8A               	movwf	(??_pf_mount+12)& (0+255),b
 10091  000502  5183               	movf	(??_pf_mount+5)& (0+255),w,b
 10092  000504  1187               	iorwf	(??_pf_mount+9)& (0+255),w,b
 10093  000506  6F8B               	movwf	(??_pf_mount+13)& (0+255),b
 10094  000508  517E               	movf	??_pf_mount& (0+255),w,b
 10095  00050A  1188               	iorwf	(??_pf_mount+10)& (0+255),w,b
 10096  00050C  6F8C               	movwf	(??_pf_mount+14)& (0+255),b
 10097  00050E  517F               	movf	(??_pf_mount+1)& (0+255),w,b
 10098  000510  1189               	iorwf	(??_pf_mount+11)& (0+255),w,b
 10099  000512  6F8D               	movwf	(??_pf_mount+15)& (0+255),b
 10100  000514  0E00               	movlw	0
 10101  000516  118A               	iorwf	(??_pf_mount+12)& (0+255),w,b
 10102  000518  6F8E               	movwf	(??_pf_mount+16)& (0+255),b
 10103  00051A  0E00               	movlw	0
 10104  00051C  118B               	iorwf	(??_pf_mount+13)& (0+255),w,b
 10105  00051E  6F8F               	movwf	(??_pf_mount+17)& (0+255),b
 10106  000520  51B3               	movf	(pf_mount@buf+31)& (0+255),w,b
 10107  000522  118C               	iorwf	(??_pf_mount+14)& (0+255),w,b
 10108  000524  6F90               	movwf	(??_pf_mount+18)& (0+255),b
 10109  000526  518D               	movf	(??_pf_mount+15)& (0+255),w,b
 10110  000528  6F91               	movwf	(??_pf_mount+19)& (0+255),b
 10111  00052A  518E               	movf	(??_pf_mount+16)& (0+255),w,b
 10112  00052C  6F92               	movwf	(??_pf_mount+20)& (0+255),b
 10113  00052E  518F               	movf	(??_pf_mount+17)& (0+255),w,b
 10114  000530  6F93               	movwf	(??_pf_mount+21)& (0+255),b
 10115  000532  EE20 F00E          	lfsr	2,14
 10116  000536  517C               	movf	pf_mount@fs& (0+255),w,b
 10117  000538  26D9               	addwf	fsr2l,f,c
 10118  00053A  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
 10119  00053C  22DA               	addwfc	fsr2h,f,c
 10120  00053E  C090  FFDE         	movff	??_pf_mount+18,postinc2
 10121  000542  C091  FFDE         	movff	??_pf_mount+19,postinc2
 10122  000546  C092  FFDE         	movff	??_pf_mount+20,postinc2
 10123  00054A  C093  FFDE         	movff	??_pf_mount+21,postinc2
 10124  00054E  D028               	goto	l981
 10125  000550                     l978:
 10126                           
 10127                           ; BSR set to: 0
 10128                           ;pff.c: 812: else
 10129                           ;pff.c: 813: fs->dirbase = fs->fatbase + fsize;
 10130                           
 10131                           ; BSR set to: 0
 10132  000550  EE20 F00A          	lfsr	2,10
 10133  000554  517C               	movf	pf_mount@fs& (0+255),w,b
 10134  000556  26D9               	addwf	fsr2l,f,c
 10135  000558  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
 10136  00055A  22DA               	addwfc	fsr2h,f,c
 10137  00055C  CFDE F07E          	movff	postinc2,??_pf_mount
 10138  000560  CFDE F07F          	movff	postinc2,??_pf_mount+1
 10139  000564  CFDE F080          	movff	postinc2,??_pf_mount+2
 10140  000568  CFDE F081          	movff	postinc2,??_pf_mount+3
 10141  00056C  51C4               	movf	pf_mount@fsize& (0+255),w,b
 10142  00056E  257E               	addwf	??_pf_mount& (0+255),w,b
 10143  000570  6F82               	movwf	(??_pf_mount+4)& (0+255),b
 10144  000572  51C5               	movf	(pf_mount@fsize+1)& (0+255),w,b
 10145  000574  217F               	addwfc	(??_pf_mount+1)& (0+255),w,b
 10146  000576  6F83               	movwf	(??_pf_mount+5)& (0+255),b
 10147  000578  51C6               	movf	(pf_mount@fsize+2)& (0+255),w,b
 10148  00057A  2180               	addwfc	(??_pf_mount+2)& (0+255),w,b
 10149  00057C  6F84               	movwf	(??_pf_mount+6)& (0+255),b
 10150  00057E  51C7               	movf	(pf_mount@fsize+3)& (0+255),w,b
 10151  000580  2181               	addwfc	(??_pf_mount+3)& (0+255),w,b
 10152  000582  6F85               	movwf	(??_pf_mount+7)& (0+255),b
 10153  000584  EE20 F00E          	lfsr	2,14
 10154  000588  517C               	movf	pf_mount@fs& (0+255),w,b
 10155  00058A  26D9               	addwf	fsr2l,f,c
 10156  00058C  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
 10157  00058E  22DA               	addwfc	fsr2h,f,c
 10158  000590  C082  FFDE         	movff	??_pf_mount+4,postinc2
 10159  000594  C083  FFDE         	movff	??_pf_mount+5,postinc2
 10160  000598  C084  FFDE         	movff	??_pf_mount+6,postinc2
 10161  00059C  C085  FFDE         	movff	??_pf_mount+7,postinc2
 10162  0005A0                     l981:
 10163                           
 10164                           ; BSR set to: 0
 10165                           ;pff.c: 814: fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;
 10166  0005A0  EE20 F00A          	lfsr	2,10
 10167  0005A4  517C               	movf	pf_mount@fs& (0+255),w,b
 10168  0005A6  26D9               	addwf	fsr2l,f,c
 10169  0005A8  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
 10170  0005AA  22DA               	addwfc	fsr2h,f,c
 10171  0005AC  CFDE F07E          	movff	postinc2,??_pf_mount
 10172  0005B0  CFDE F07F          	movff	postinc2,??_pf_mount+1
 10173  0005B4  CFDE F080          	movff	postinc2,??_pf_mount+2
 10174  0005B8  CFDE F081          	movff	postinc2,??_pf_mount+3
 10175  0005BC  EE20 F004          	lfsr	2,4
 10176  0005C0  517C               	movf	pf_mount@fs& (0+255),w,b
 10177  0005C2  26D9               	addwf	fsr2l,f,c
 10178  0005C4  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
 10179  0005C6  22DA               	addwfc	fsr2h,f,c
 10180  0005C8  CFDE F082          	movff	postinc2,??_pf_mount+4
 10181  0005CC  CFDD F083          	movff	postdec2,??_pf_mount+5
 10182  0005D0  0E04               	movlw	4
 10183  0005D2  6F84               	movwf	(??_pf_mount+6)& (0+255),b
 10184  0005D4                     u8035:
 10185  0005D4  90D8               	bcf	status,0,c
 10186  0005D6  3383               	rrcf	(??_pf_mount+5)& (0+255),f,b
 10187  0005D8  3382               	rrcf	(??_pf_mount+4)& (0+255),f,b
 10188  0005DA  2F84               	decfsz	(??_pf_mount+6)& (0+255),f,b
 10189  0005DC  D7FB               	goto	u8035
 10190  0005DE  5182               	movf	(??_pf_mount+4)& (0+255),w,b
 10191  0005E0  257E               	addwf	??_pf_mount& (0+255),w,b
 10192  0005E2  6F85               	movwf	(??_pf_mount+7)& (0+255),b
 10193  0005E4  5183               	movf	(??_pf_mount+5)& (0+255),w,b
 10194  0005E6  217F               	addwfc	(??_pf_mount+1)& (0+255),w,b
 10195  0005E8  6F86               	movwf	(??_pf_mount+8)& (0+255),b
 10196  0005EA  0E00               	movlw	0
 10197  0005EC  2180               	addwfc	(??_pf_mount+2)& (0+255),w,b
 10198  0005EE  6F87               	movwf	(??_pf_mount+9)& (0+255),b
 10199  0005F0  0E00               	movlw	0
 10200  0005F2  2181               	addwfc	(??_pf_mount+3)& (0+255),w,b
 10201  0005F4  6F88               	movwf	(??_pf_mount+10)& (0+255),b
 10202  0005F6  51C4               	movf	pf_mount@fsize& (0+255),w,b
 10203  0005F8  2585               	addwf	(??_pf_mount+7)& (0+255),w,b
 10204  0005FA  6F89               	movwf	(??_pf_mount+11)& (0+255),b
 10205  0005FC  51C5               	movf	(pf_mount@fsize+1)& (0+255),w,b
 10206  0005FE  2186               	addwfc	(??_pf_mount+8)& (0+255),w,b
 10207  000600  6F8A               	movwf	(??_pf_mount+12)& (0+255),b
 10208  000602  51C6               	movf	(pf_mount@fsize+2)& (0+255),w,b
 10209  000604  2187               	addwfc	(??_pf_mount+9)& (0+255),w,b
 10210  000606  6F8B               	movwf	(??_pf_mount+13)& (0+255),b
 10211  000608  51C7               	movf	(pf_mount@fsize+3)& (0+255),w,b
 10212  00060A  2188               	addwfc	(??_pf_mount+10)& (0+255),w,b
 10213  00060C  6F8C               	movwf	(??_pf_mount+14)& (0+255),b
 10214  00060E  EE20 F012          	lfsr	2,18
 10215  000612  517C               	movf	pf_mount@fs& (0+255),w,b
 10216  000614  26D9               	addwf	fsr2l,f,c
 10217  000616  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
 10218  000618  22DA               	addwfc	fsr2h,f,c
 10219  00061A  C089  FFDE         	movff	??_pf_mount+11,postinc2
 10220  00061E  C08A  FFDE         	movff	??_pf_mount+12,postinc2
 10221  000622  C08B  FFDE         	movff	??_pf_mount+13,postinc2
 10222  000626  C08C  FFDE         	movff	??_pf_mount+14,postinc2
 10223                           
 10224                           ;pff.c: 816: fs->flag = 0;
 10225  00062A  EE20 F001          	lfsr	2,1
 10226  00062E  517C               	movf	pf_mount@fs& (0+255),w,b
 10227  000630  26D9               	addwf	fsr2l,f,c
 10228  000632  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
 10229  000634  22DA               	addwfc	fsr2h,f,c
 10230  000636  0E00               	movlw	0
 10231  000638  6EDF               	movwf	indf2,c
 10232                           
 10233                           ; BSR set to: 0
 10234                           ;pff.c: 817: FatFs = fs;
 10235  00063A  C07C  F035         	movff	pf_mount@fs,_FatFs
 10236  00063E  C07D  F036         	movff	pf_mount@fs+1,_FatFs+1
 10237                           
 10238                           ; BSR set to: 0
 10239                           ;pff.c: 819: return FR_OK;
 10240  000642  0E00               	movlw	0
 10241  000644  0012               	return	
 10242  000646                     __end_of_pf_mount:
 10243                           	opt stack 0
 10244                           tosu	equ	0xFFF
 10245                           tosh	equ	0xFFE
 10246                           tosl	equ	0xFFD
 10247                           pclath	equ	0xFFA
 10248                           tblptru	equ	0xFF8
 10249                           tblptrh	equ	0xFF7
 10250                           tblptrl	equ	0xFF6
 10251                           tablat	equ	0xFF5
 10252                           prodh	equ	0xFF4
 10253                           prodl	equ	0xFF3
 10254                           intcon	equ	0xFF2
 10255                           intcon2	equ	0xFF1
 10256                           intcon3	equ	0xFF0
 10257                           postinc0	equ	0xFEE
 10258                           wreg	equ	0xFE8
 10259                           indf1	equ	0xFE7
 10260                           postinc1	equ	0xFE6
 10261                           postdec1	equ	0xFE5
 10262                           fsr1h	equ	0xFE2
 10263                           fsr1l	equ	0xFE1
 10264                           indf2	equ	0xFDF
 10265                           postinc2	equ	0xFDE
 10266                           postdec2	equ	0xFDD
 10267                           plusw2	equ	0xFDB
 10268                           fsr2h	equ	0xFDA
 10269                           fsr2l	equ	0xFD9
 10270                           status	equ	0xFD8
 10271                           
 10272 ;; *************** function _disk_initialize *****************
 10273 ;; Defined at:
 10274 ;;		line 57 in file "diskio.c"
 10275 ;; Parameters:    Size  Location     Type
 10276 ;;		None
 10277 ;; Auto vars:     Size  Location     Type
 10278 ;;  count2          2    7[BANK0 ] int 
 10279 ;;  count1          2    4[BANK0 ] int 
 10280 ;;  i               2    2[BANK0 ] int 
 10281 ;;  buff            1    9[BANK0 ] unsigned char 
 10282 ;;  stat            1    6[BANK0 ] unsigned char 
 10283 ;; Return value:  Size  Location     Type
 10284 ;;                  1    wreg      unsigned char 
 10285 ;; Registers used:
 10286 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10287 ;; Tracked objects:
 10288 ;;		On entry : 0/0
 10289 ;;		On exit  : 0/0
 10290 ;;		Unchanged: 0/0
 10291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10292 ;;      Params:         0       0       0       0       0       0       0       0       0
 10293 ;;      Locals:         0       8       0       0       0       0       0       0       0
 10294 ;;      Temps:          0       2       0       0       0       0       0       0       0
 10295 ;;      Totals:         0      10       0       0       0       0       0       0       0
 10296 ;;Total ram usage:       10 bytes
 10297 ;; Hardware stack levels used:    1
 10298 ;; Hardware stack levels required when called:    5
 10299 ;; This function calls:
 10300 ;;		_command
 10301 ;;		_dummy_clocks
 10302 ;;		_escreve_cmd_lcd
 10303 ;;		_escreve_frase_ram_lcd
 10304 ;;		_posicao_cursor_lcd
 10305 ;;		_proceed
 10306 ;;		_reset
 10307 ;;		_response
 10308 ;; This function is called by:
 10309 ;;		_pf_mount
 10310 ;; This function uses a non-reentrant model
 10311 ;;
 10312                           
 10313                           	psect	text40
 10314  0015C2                     __ptext40:
 10315                           	opt stack 0
 10316  0015C2                     _disk_initialize:
 10317                           	opt stack 22
 10318                           
 10319                           ;diskio.c: 59: DSTATUS stat;
 10320                           ;diskio.c: 60: int i = 0, count1 = 0, count2 = 0;
 10321                           
 10322                           ;incstack = 0
 10323  0015C2  0E00               	movlw	0
 10324  0015C4  0100               	movlb	0	; () banked
 10325  0015C6  6F63               	movwf	(disk_initialize@i+1)& (0+255),b
 10326  0015C8  0E00               	movlw	0
 10327  0015CA  6F62               	movwf	disk_initialize@i& (0+255),b
 10328  0015CC  0E00               	movlw	0
 10329  0015CE  6F65               	movwf	(disk_initialize@count1+1)& (0+255),b
 10330  0015D0  0E00               	movlw	0
 10331  0015D2  6F64               	movwf	disk_initialize@count1& (0+255),b
 10332  0015D4  0E00               	movlw	0
 10333  0015D6  6F68               	movwf	(disk_initialize@count2+1)& (0+255),b
 10334  0015D8  0E00               	movlw	0
 10335  0015DA  6F67               	movwf	disk_initialize@count2& (0+255),b
 10336                           
 10337                           ; BSR set to: 0
 10338                           ;diskio.c: 61: unsigned char buff;
 10339                           ;diskio.c: 62: reset();
 10340  0015DC  ECB9  F016         	call	_reset	;wreg free
 10341                           
 10342                           ;diskio.c: 63: _delay((unsigned long)((500)*(48000000/4000.0)));
 10343  0015E0  0E1F               	movlw	31
 10344  0015E2  0100               	movlb	0	; () banked
 10345  0015E4  6F61               	movwf	(??_disk_initialize+1)& (0+255),b
 10346  0015E6  0E71               	movlw	113
 10347  0015E8  6F60               	movwf	??_disk_initialize& (0+255),b
 10348  0015EA  0E1E               	movlw	30
 10349  0015EC                     u9217:
 10350  0015EC  2EE8               	decfsz	wreg,f,c
 10351  0015EE  D7FE               	bra	u9217
 10352  0015F0  2F60               	decfsz	??_disk_initialize& (0+255),f,b
 10353  0015F2  D7FC               	bra	u9217
 10354  0015F4  2F61               	decfsz	(??_disk_initialize+1)& (0+255),f,b
 10355  0015F6  D7FA               	bra	u9217
 10356  0015F8  F000               	nop	
 10357                           
 10358                           ;diskio.c: 64: dummy_clocks(8);
 10359  0015FA  0E08               	movlw	8
 10360  0015FC  EC5A  F019         	call	_dummy_clocks
 10361                           
 10362                           ;diskio.c: 65: command(0X41, 0X00000000, 0XFF);
 10363  001600  0E00               	movlw	0
 10364  001602  6E1E               	movwf	command@arg,c
 10365  001604  0E00               	movlw	0
 10366  001606  6E1F               	movwf	command@arg+1,c
 10367  001608  0E00               	movlw	0
 10368  00160A  6E20               	movwf	command@arg+2,c
 10369  00160C  0E00               	movlw	0
 10370  00160E  6E21               	movwf	command@arg+3,c
 10371  001610  0EFF               	movlw	255
 10372  001612  6E22               	movwf	command@CRC,c
 10373  001614  0E41               	movlw	65
 10374  001616  EC36  F018         	call	_command
 10375                           
 10376                           ;diskio.c: 66: proceed();
 10377  00161A  EC59  F01A         	call	_proceed	;wreg free
 10378  00161E                     
 10379                           ;diskio.c: 68: buff = response();
 10380  00161E  EC4C  F01A         	call	_response	;wreg free
 10381  001622  0100               	movlb	0	; () banked
 10382  001624  6F69               	movwf	disk_initialize@buff& (0+255),b
 10383                           
 10384                           ; BSR set to: 0
 10385                           ;diskio.c: 69: }while(buff!=0x01);
 10386  001626  0569               	decf	disk_initialize@buff& (0+255),w,b
 10387  001628  A4D8               	btfss	status,2,c
 10388  00162A  D7F9               	goto	l732
 10389                           
 10390                           ; BSR set to: 0
 10391                           ;diskio.c: 71: _delay((unsigned long)((1000)*(48000000/4000.0)));
 10392                           
 10393                           ; BSR set to: 0
 10394  00162C  0E3D               	movlw	61
 10395  00162E  0100               	movlb	0	; () banked
 10396  001630  6F61               	movwf	(??_disk_initialize+1)& (0+255),b
 10397  001632  0EE1               	movlw	225
 10398  001634  6F60               	movwf	??_disk_initialize& (0+255),b
 10399  001636  0E3F               	movlw	63
 10400  001638                     u9227:
 10401  001638  2EE8               	decfsz	wreg,f,c
 10402  00163A  D7FE               	bra	u9227
 10403  00163C  2F60               	decfsz	??_disk_initialize& (0+255),f,b
 10404  00163E  D7FC               	bra	u9227
 10405  001640  2F61               	decfsz	(??_disk_initialize+1)& (0+255),f,b
 10406  001642  D7FA               	bra	u9227
 10407  001644  D000               	nop2	
 10408                           
 10409                           ;diskio.c: 72: proceed();
 10410  001646  EC59  F01A         	call	_proceed	;wreg free
 10411                           
 10412                           ;diskio.c: 73: if (buff == 0x01)
 10413  00164A  0100               	movlb	0	; () banked
 10414  00164C  0569               	decf	disk_initialize@buff& (0+255),w,b
 10415  00164E  A4D8               	btfss	status,2,c
 10416  001650  D096               	goto	l734
 10417                           
 10418                           ; BSR set to: 0
 10419                           ;diskio.c: 74: {
 10420                           ;diskio.c: 76: _delay((unsigned long)((1)*(48000000/4000.0)));
 10421  001652  0E10               	movlw	16
 10422  001654  0100               	movlb	0	; () banked
 10423  001656  6F60               	movwf	??_disk_initialize& (0+255),b
 10424  001658  0E94               	movlw	148
 10425  00165A                     u9237:
 10426  00165A  2EE8               	decfsz	wreg,f,c
 10427  00165C  D7FE               	bra	u9237
 10428  00165E  2F60               	decfsz	??_disk_initialize& (0+255),f,b
 10429  001660  D7FC               	bra	u9237
 10430  001662  F000               	nop	
 10431                           
 10432                           ;diskio.c: 77: count1 = 0;
 10433  001664  0E00               	movlw	0
 10434  001666  0100               	movlb	0	; () banked
 10435  001668  6F65               	movwf	(disk_initialize@count1+1)& (0+255),b
 10436  00166A  0E00               	movlw	0
 10437  00166C  6F64               	movwf	disk_initialize@count1& (0+255),b
 10438  00166E                     
 10439                           ; BSR set to: 0
 10440                           ;diskio.c: 79: count2 = 0;
 10441                           
 10442                           ; BSR set to: 0
 10443  00166E  0E00               	movlw	0
 10444  001670  6F68               	movwf	(disk_initialize@count2+1)& (0+255),b
 10445  001672  0E00               	movlw	0
 10446  001674  6F67               	movwf	disk_initialize@count2& (0+255),b
 10447                           
 10448                           ; BSR set to: 0
 10449                           ;diskio.c: 80: dummy_clocks(8);
 10450  001676  0E08               	movlw	8
 10451  001678  EC5A  F019         	call	_dummy_clocks
 10452                           
 10453                           ;diskio.c: 81: command(0X77, 0X00000000, 0X95);
 10454  00167C  0E00               	movlw	0
 10455  00167E  6E1E               	movwf	command@arg,c
 10456  001680  0E00               	movlw	0
 10457  001682  6E1F               	movwf	command@arg+1,c
 10458  001684  0E00               	movlw	0
 10459  001686  6E20               	movwf	command@arg+2,c
 10460  001688  0E00               	movlw	0
 10461  00168A  6E21               	movwf	command@arg+3,c
 10462  00168C  0E95               	movlw	149
 10463  00168E  6E22               	movwf	command@CRC,c
 10464  001690  0E77               	movlw	119
 10465  001692  EC36  F018         	call	_command
 10466                           
 10467                           ;diskio.c: 82: buff = 0XFF;
 10468  001696  0100               	movlb	0	; () banked
 10469  001698  6969               	setf	disk_initialize@buff& (0+255),b
 10470  00169A                     
 10471                           ; BSR set to: 0
 10472                           ;diskio.c: 85: buff = response();
 10473                           
 10474                           ; BSR set to: 0
 10475  00169A  EC4C  F01A         	call	_response	;wreg free
 10476  00169E  0100               	movlb	0	; () banked
 10477  0016A0  6F69               	movwf	disk_initialize@buff& (0+255),b
 10478                           
 10479                           ; BSR set to: 0
 10480                           ;diskio.c: 86: count2++;
 10481  0016A2  4B67               	infsnz	disk_initialize@count2& (0+255),f,b
 10482  0016A4  2B68               	incf	(disk_initialize@count2+1)& (0+255),f,b
 10483                           
 10484                           ; BSR set to: 0
 10485                           ;diskio.c: 87: }while((buff!=0X01)&&(count2<10));
 10486  0016A6  0569               	decf	disk_initialize@buff& (0+255),w,b
 10487  0016A8  B4D8               	btfsc	status,2,c
 10488  0016AA  D008               	goto	u7590
 10489                           
 10490                           ; BSR set to: 0
 10491  0016AC  BF68               	btfsc	(disk_initialize@count2+1)& (0+255),7,b
 10492  0016AE  D7F5               	goto	l736
 10493  0016B0  5168               	movf	(disk_initialize@count2+1)& (0+255),w,b
 10494  0016B2  E104               	bnz	l6750
 10495  0016B4  0E0A               	movlw	10
 10496  0016B6  5D67               	subwf	disk_initialize@count2& (0+255),w,b
 10497  0016B8  A0D8               	btfss	status,0,c
 10498  0016BA  D7EF               	goto	l736
 10499  0016BC                     u7590:
 10500  0016BC                     l6750:
 10501                           
 10502                           ; BSR set to: 0
 10503                           ;diskio.c: 89: _delay((unsigned long)((1)*(48000000/4000.0)));
 10504  0016BC  0E10               	movlw	16
 10505  0016BE  0100               	movlb	0	; () banked
 10506  0016C0  6F60               	movwf	??_disk_initialize& (0+255),b
 10507  0016C2  0E94               	movlw	148
 10508  0016C4                     u9247:
 10509  0016C4  2EE8               	decfsz	wreg,f,c
 10510  0016C6  D7FE               	bra	u9247
 10511  0016C8  2F60               	decfsz	??_disk_initialize& (0+255),f,b
 10512  0016CA  D7FC               	bra	u9247
 10513  0016CC  F000               	nop	
 10514                           
 10515                           ;diskio.c: 90: count2 = 0;
 10516  0016CE  0E00               	movlw	0
 10517  0016D0  0100               	movlb	0	; () banked
 10518  0016D2  6F68               	movwf	(disk_initialize@count2+1)& (0+255),b
 10519  0016D4  0E00               	movlw	0
 10520  0016D6  6F67               	movwf	disk_initialize@count2& (0+255),b
 10521                           
 10522                           ; BSR set to: 0
 10523                           ;diskio.c: 91: dummy_clocks(8);
 10524  0016D8  0E08               	movlw	8
 10525  0016DA  EC5A  F019         	call	_dummy_clocks
 10526                           
 10527                           ;diskio.c: 93: command(0X69,0X40000000,0X95);
 10528  0016DE  0E00               	movlw	0
 10529  0016E0  6E1E               	movwf	command@arg,c
 10530  0016E2  0E00               	movlw	0
 10531  0016E4  6E1F               	movwf	command@arg+1,c
 10532  0016E6  0E00               	movlw	0
 10533  0016E8  6E20               	movwf	command@arg+2,c
 10534  0016EA  0E40               	movlw	64
 10535  0016EC  6E21               	movwf	command@arg+3,c
 10536  0016EE  0E95               	movlw	149
 10537  0016F0  6E22               	movwf	command@CRC,c
 10538  0016F2  0E69               	movlw	105
 10539  0016F4  EC36  F018         	call	_command
 10540                           
 10541                           ;diskio.c: 94: buff = 0XFF;
 10542  0016F8  0100               	movlb	0	; () banked
 10543  0016FA  6969               	setf	disk_initialize@buff& (0+255),b
 10544                           
 10545                           ; BSR set to: 0
 10546                           ;diskio.c: 96: proceed();
 10547  0016FC  EC59  F01A         	call	_proceed	;wreg free
 10548  001700                     
 10549                           ;diskio.c: 98: buff = response();
 10550  001700  EC4C  F01A         	call	_response	;wreg free
 10551  001704  0100               	movlb	0	; () banked
 10552  001706  6F69               	movwf	disk_initialize@buff& (0+255),b
 10553                           
 10554                           ; BSR set to: 0
 10555                           ;diskio.c: 99: count2++;
 10556  001708  4B67               	infsnz	disk_initialize@count2& (0+255),f,b
 10557  00170A  2B68               	incf	(disk_initialize@count2+1)& (0+255),f,b
 10558                           
 10559                           ; BSR set to: 0
 10560                           ;diskio.c: 100: }while((buff!=0X00) && count2<10);
 10561  00170C  5169               	movf	disk_initialize@buff& (0+255),w,b
 10562  00170E  B4D8               	btfsc	status,2,c
 10563  001710  D008               	goto	u7610
 10564                           
 10565                           ; BSR set to: 0
 10566  001712  BF68               	btfsc	(disk_initialize@count2+1)& (0+255),7,b
 10567  001714  D7F5               	goto	l740
 10568  001716  5168               	movf	(disk_initialize@count2+1)& (0+255),w,b
 10569  001718  E104               	bnz	l6770
 10570  00171A  0E0A               	movlw	10
 10571  00171C  5D67               	subwf	disk_initialize@count2& (0+255),w,b
 10572  00171E  A0D8               	btfss	status,0,c
 10573  001720  D7EF               	goto	l740
 10574  001722                     u7610:
 10575  001722                     l6770:
 10576                           
 10577                           ; BSR set to: 0
 10578                           ;diskio.c: 101: }while(buff != 0X00);
 10579  001722  5169               	movf	disk_initialize@buff& (0+255),w,b
 10580  001724  A4D8               	btfss	status,2,c
 10581  001726  D7A3               	goto	l735
 10582                           
 10583                           ; BSR set to: 0
 10584                           ;diskio.c: 103: count1 = 0;
 10585                           
 10586                           ; BSR set to: 0
 10587  001728  0E00               	movlw	0
 10588  00172A  6F65               	movwf	(disk_initialize@count1+1)& (0+255),b
 10589  00172C  0E00               	movlw	0
 10590  00172E  6F64               	movwf	disk_initialize@count1& (0+255),b
 10591                           
 10592                           ; BSR set to: 0
 10593                           ;diskio.c: 105: _delay((unsigned long)((1)*(48000000/4000.0)));
 10594  001730  0E10               	movlw	16
 10595  001732  0100               	movlb	0	; () banked
 10596  001734  6F60               	movwf	??_disk_initialize& (0+255),b
 10597  001736  0E94               	movlw	148
 10598  001738                     u9257:
 10599  001738  2EE8               	decfsz	wreg,f,c
 10600  00173A  D7FE               	bra	u9257
 10601  00173C  2F60               	decfsz	??_disk_initialize& (0+255),f,b
 10602  00173E  D7FC               	bra	u9257
 10603  001740  F000               	nop	
 10604                           
 10605                           ;diskio.c: 106: stat = 0X00;
 10606  001742  0E00               	movlw	0
 10607  001744  0100               	movlb	0	; () banked
 10608  001746  6F66               	movwf	disk_initialize@stat& (0+255),b
 10609                           
 10610                           ; BSR set to: 0
 10611                           ;diskio.c: 108: escreve_cmd_lcd(0b00000001);
 10612  001748  0E01               	movlw	1
 10613  00174A  ECB7  F015         	call	_escreve_cmd_lcd
 10614                           
 10615                           ;diskio.c: 109: posicao_cursor_lcd(1,0);
 10616  00174E  0E00               	movlw	0
 10617  001750  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 10618  001752  0E01               	movlw	1
 10619  001754  EC64  F017         	call	_posicao_cursor_lcd
 10620                           
 10621                           ;diskio.c: 110: escreve_frase_ram_lcd("Cartão Aceito");
 10622  001758  0EF5               	movlw	low STR_15
 10623  00175A  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 10624  00175C  0E61               	movlw	high STR_15
 10625  00175E  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 10626  001760  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
 10627                           
 10628                           ;diskio.c: 111: _delay((unsigned long)((2000)*(48000000/4000.0)));
 10629  001764  0E7A               	movlw	122
 10630  001766  0100               	movlb	0	; () banked
 10631  001768  6F61               	movwf	(??_disk_initialize+1)& (0+255),b
 10632  00176A  0EC1               	movlw	193
 10633  00176C  6F60               	movwf	??_disk_initialize& (0+255),b
 10634  00176E  0E81               	movlw	129
 10635  001770                     u9267:
 10636  001770  2EE8               	decfsz	wreg,f,c
 10637  001772  D7FE               	bra	u9267
 10638  001774  2F60               	decfsz	??_disk_initialize& (0+255),f,b
 10639  001776  D7FC               	bra	u9267
 10640  001778  2F61               	decfsz	(??_disk_initialize+1)& (0+255),f,b
 10641  00177A  D7FA               	bra	u9267
 10642  00177C  D021               	goto	L6
 10643  00177E                     l734:
 10644                           
 10645                           ;diskio.c: 113: else if(buff == 0x05)
 10646  00177E  0E05               	movlw	5
 10647  001780  0100               	movlb	0	; () banked
 10648  001782  1969               	xorwf	disk_initialize@buff& (0+255),w,b
 10649  001784  A4D8               	btfss	status,2,c
 10650  001786  D01D               	goto	l746
 10651                           
 10652                           ; BSR set to: 0
 10653                           ;diskio.c: 114: {
 10654                           ;diskio.c: 115: stat = 0x01;
 10655  001788  0E01               	movlw	1
 10656  00178A  6F66               	movwf	disk_initialize@stat& (0+255),b
 10657                           
 10658                           ; BSR set to: 0
 10659                           ;diskio.c: 117: escreve_cmd_lcd(0b00000001);
 10660  00178C  0E01               	movlw	1
 10661  00178E  ECB7  F015         	call	_escreve_cmd_lcd
 10662                           
 10663                           ;diskio.c: 118: posicao_cursor_lcd(1,0);
 10664  001792  0E00               	movlw	0
 10665  001794  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 10666  001796  0E01               	movlw	1
 10667  001798  EC64  F017         	call	_posicao_cursor_lcd
 10668                           
 10669                           ;diskio.c: 119: escreve_frase_ram_lcd("Error!!!");
 10670  00179C  0E5F               	movlw	low STR_16
 10671  00179E  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 10672  0017A0  0E62               	movlw	high STR_16
 10673  0017A2  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 10674  0017A4  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
 10675                           
 10676                           ;diskio.c: 121: _delay((unsigned long)((3000)*(48000000/4000.0)));
 10677  0017A8  0EB7               	movlw	183
 10678  0017AA  0100               	movlb	0	; () banked
 10679  0017AC  6F61               	movwf	(??_disk_initialize+1)& (0+255),b
 10680  0017AE  0EA1               	movlw	161
 10681  0017B0  6F60               	movwf	??_disk_initialize& (0+255),b
 10682  0017B2  0EC3               	movlw	195
 10683  0017B4                     u9277:
 10684  0017B4  2EE8               	decfsz	wreg,f,c
 10685  0017B6  D7FE               	bra	u9277
 10686  0017B8  2F60               	decfsz	??_disk_initialize& (0+255),f,b
 10687  0017BA  D7FC               	bra	u9277
 10688  0017BC  2F61               	decfsz	(??_disk_initialize+1)& (0+255),f,b
 10689  0017BE  D7FA               	bra	u9277
 10690  0017C0                     L6:
 10691  0017C0  D000               	nop2	
 10692  0017C2                     l746:
 10693                           
 10694                           ;diskio.c: 122: }
 10695                           ;diskio.c: 123: _delay((unsigned long)((1000)*(48000000/4000.0)));
 10696  0017C2  0E3D               	movlw	61
 10697  0017C4  0100               	movlb	0	; () banked
 10698  0017C6  6F61               	movwf	(??_disk_initialize+1)& (0+255),b
 10699  0017C8  0EE1               	movlw	225
 10700  0017CA  6F60               	movwf	??_disk_initialize& (0+255),b
 10701  0017CC  0E3F               	movlw	63
 10702  0017CE                     u9287:
 10703  0017CE  2EE8               	decfsz	wreg,f,c
 10704  0017D0  D7FE               	bra	u9287
 10705  0017D2  2F60               	decfsz	??_disk_initialize& (0+255),f,b
 10706  0017D4  D7FC               	bra	u9287
 10707  0017D6  2F61               	decfsz	(??_disk_initialize+1)& (0+255),f,b
 10708  0017D8  D7FA               	bra	u9287
 10709  0017DA  D000               	nop2	
 10710                           
 10711                           ;diskio.c: 125: dummy_clocks(8);
 10712  0017DC  0E08               	movlw	8
 10713  0017DE  EC5A  F019         	call	_dummy_clocks
 10714                           
 10715                           ;diskio.c: 126: command(0X50,0X00000200,0XFF);
 10716  0017E2  0E00               	movlw	0
 10717  0017E4  6E1E               	movwf	command@arg,c
 10718  0017E6  0E02               	movlw	2
 10719  0017E8  6E1F               	movwf	command@arg+1,c
 10720  0017EA  0E00               	movlw	0
 10721  0017EC  6E20               	movwf	command@arg+2,c
 10722  0017EE  0E00               	movlw	0
 10723  0017F0  6E21               	movwf	command@arg+3,c
 10724  0017F2  0EFF               	movlw	255
 10725  0017F4  6E22               	movwf	command@CRC,c
 10726  0017F6  0E50               	movlw	80
 10727  0017F8  EC36  F018         	call	_command
 10728                           
 10729                           ;diskio.c: 127: proceed();
 10730  0017FC  EC59  F01A         	call	_proceed	;wreg free
 10731  001800                     
 10732                           ;diskio.c: 129: buff = response();
 10733  001800  EC4C  F01A         	call	_response	;wreg free
 10734  001804  0100               	movlb	0	; () banked
 10735  001806  6F69               	movwf	disk_initialize@buff& (0+255),b
 10736                           
 10737                           ; BSR set to: 0
 10738                           ;diskio.c: 130: }while(buff!=0x00);
 10739  001808  5169               	movf	disk_initialize@buff& (0+255),w,b
 10740  00180A  A4D8               	btfss	status,2,c
 10741  00180C  D7F9               	goto	l747
 10742                           
 10743                           ; BSR set to: 0
 10744                           ;diskio.c: 132: escreve_cmd_lcd(0b00000001);
 10745                           
 10746                           ; BSR set to: 0
 10747  00180E  0E01               	movlw	1
 10748  001810  ECB7  F015         	call	_escreve_cmd_lcd
 10749                           
 10750                           ;diskio.c: 133: posicao_cursor_lcd(1,0);
 10751  001814  0E00               	movlw	0
 10752  001816  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 10753  001818  0E01               	movlw	1
 10754  00181A  EC64  F017         	call	_posicao_cursor_lcd
 10755                           
 10756                           ;diskio.c: 134: escreve_frase_ram_lcd("Bloco de 512");
 10757  00181E  0E3B               	movlw	low STR_17
 10758  001820  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 10759  001822  0E62               	movlw	high STR_17
 10760  001824  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 10761  001826  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
 10762                           
 10763                           ;diskio.c: 135: posicao_cursor_lcd(2,0);
 10764  00182A  0E00               	movlw	0
 10765  00182C  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 10766  00182E  0E02               	movlw	2
 10767  001830  EC64  F017         	call	_posicao_cursor_lcd
 10768                           
 10769                           ;diskio.c: 136: escreve_frase_ram_lcd("Bytes criado!");
 10770  001834  0EE7               	movlw	low STR_18
 10771  001836  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 10772  001838  0E61               	movlw	high STR_18
 10773  00183A  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 10774  00183C  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
 10775                           
 10776                           ;diskio.c: 137: _delay((unsigned long)((2000)*(48000000/4000.0)));
 10777  001840  0E7A               	movlw	122
 10778  001842  0100               	movlb	0	; () banked
 10779  001844  6F61               	movwf	(??_disk_initialize+1)& (0+255),b
 10780  001846  0EC1               	movlw	193
 10781  001848  6F60               	movwf	??_disk_initialize& (0+255),b
 10782  00184A  0E81               	movlw	129
 10783  00184C                     u9297:
 10784  00184C  2EE8               	decfsz	wreg,f,c
 10785  00184E  D7FE               	bra	u9297
 10786  001850  2F60               	decfsz	??_disk_initialize& (0+255),f,b
 10787  001852  D7FC               	bra	u9297
 10788  001854  2F61               	decfsz	(??_disk_initialize+1)& (0+255),f,b
 10789  001856  D7FA               	bra	u9297
 10790  001858  D000               	nop2	
 10791                           
 10792                           ;diskio.c: 138: escreve_cmd_lcd(0b00000001);
 10793  00185A  0E01               	movlw	1
 10794  00185C  ECB7  F015         	call	_escreve_cmd_lcd
 10795                           
 10796                           ;diskio.c: 139: posicao_cursor_lcd(1,0);
 10797  001860  0E00               	movlw	0
 10798  001862  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 10799  001864  0E01               	movlw	1
 10800  001866  EC64  F017         	call	_posicao_cursor_lcd
 10801                           
 10802                           ;diskio.c: 140: escreve_frase_ram_lcd("Init OK");
 10803  00186A  0E68               	movlw	low STR_19
 10804  00186C  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 10805  00186E  0E62               	movlw	high STR_19
 10806  001870  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 10807  001872  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
 10808                           
 10809                           ;diskio.c: 141: return stat;
 10810  001876  0100               	movlb	0	; () banked
 10811  001878  5166               	movf	disk_initialize@stat& (0+255),w,b
 10812  00187A  0012               	return	
 10813  00187C                     __end_of_disk_initialize:
 10814                           	opt stack 0
 10815                           tosu	equ	0xFFF
 10816                           tosh	equ	0xFFE
 10817                           tosl	equ	0xFFD
 10818                           pclath	equ	0xFFA
 10819                           tblptru	equ	0xFF8
 10820                           tblptrh	equ	0xFF7
 10821                           tblptrl	equ	0xFF6
 10822                           tablat	equ	0xFF5
 10823                           prodh	equ	0xFF4
 10824                           prodl	equ	0xFF3
 10825                           intcon	equ	0xFF2
 10826                           intcon2	equ	0xFF1
 10827                           intcon3	equ	0xFF0
 10828                           postinc0	equ	0xFEE
 10829                           wreg	equ	0xFE8
 10830                           indf1	equ	0xFE7
 10831                           postinc1	equ	0xFE6
 10832                           postdec1	equ	0xFE5
 10833                           fsr1h	equ	0xFE2
 10834                           fsr1l	equ	0xFE1
 10835                           indf2	equ	0xFDF
 10836                           postinc2	equ	0xFDE
 10837                           postdec2	equ	0xFDD
 10838                           plusw2	equ	0xFDB
 10839                           fsr2h	equ	0xFDA
 10840                           fsr2l	equ	0xFD9
 10841                           status	equ	0xFD8
 10842                           
 10843 ;; *************** function _reset *****************
 10844 ;; Defined at:
 10845 ;;		line 36 in file "diskio.c"
 10846 ;; Parameters:    Size  Location     Type
 10847 ;;		None
 10848 ;; Auto vars:     Size  Location     Type
 10849 ;;  count           2   41[COMRAM] int 
 10850 ;;  i               2   39[COMRAM] int 
 10851 ;;  buff            1   43[COMRAM] unsigned char 
 10852 ;; Return value:  Size  Location     Type
 10853 ;;                  1    wreg      void 
 10854 ;; Registers used:
 10855 ;;		wreg, status,2, status,0, cstack
 10856 ;; Tracked objects:
 10857 ;;		On entry : 0/0
 10858 ;;		On exit  : 0/0
 10859 ;;		Unchanged: 0/0
 10860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10861 ;;      Params:         0       0       0       0       0       0       0       0       0
 10862 ;;      Locals:         5       0       0       0       0       0       0       0       0
 10863 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10864 ;;      Totals:         7       0       0       0       0       0       0       0       0
 10865 ;;Total ram usage:        7 bytes
 10866 ;; Hardware stack levels used:    1
 10867 ;; Hardware stack levels required when called:    4
 10868 ;; This function calls:
 10869 ;;		_command
 10870 ;;		_dummy_clocks
 10871 ;;		_proceed
 10872 ;; This function is called by:
 10873 ;;		_disk_initialize
 10874 ;; This function uses a non-reentrant model
 10875 ;;
 10876                           
 10877                           	psect	text41
 10878  002D72                     __ptext41:
 10879                           	opt stack 0
 10880  002D72                     _reset:
 10881                           	opt stack 22
 10882                           
 10883                           ;diskio.c: 38: int i = 0, count = 0;
 10884                           
 10885                           ; BSR set to: 0
 10886                           ;incstack = 0
 10887  002D72  0E00               	movlw	0
 10888  002D74  6E29               	movwf	reset@i+1,c
 10889  002D76  0E00               	movlw	0
 10890  002D78  6E28               	movwf	reset@i,c
 10891  002D7A  0E00               	movlw	0
 10892  002D7C  6E2B               	movwf	reset@count+1,c
 10893  002D7E  0E00               	movlw	0
 10894  002D80  6E2A               	movwf	reset@count,c
 10895  002D82                     
 10896                           ;diskio.c: 42: dummy_clocks(8);
 10897  002D82  0E08               	movlw	8
 10898  002D84  EC5A  F019         	call	_dummy_clocks
 10899                           
 10900                           ;diskio.c: 43: command(0X40, 0X00000000, 0X95);
 10901  002D88  0E00               	movlw	0
 10902  002D8A  6E1E               	movwf	command@arg,c
 10903  002D8C  0E00               	movlw	0
 10904  002D8E  6E1F               	movwf	command@arg+1,c
 10905  002D90  0E00               	movlw	0
 10906  002D92  6E20               	movwf	command@arg+2,c
 10907  002D94  0E00               	movlw	0
 10908  002D96  6E21               	movwf	command@arg+3,c
 10909  002D98  0E95               	movlw	149
 10910  002D9A  6E22               	movwf	command@CRC,c
 10911  002D9C  0E40               	movlw	64
 10912  002D9E  EC36  F018         	call	_command
 10913                           
 10914                           ;diskio.c: 44: proceed();
 10915  002DA2  EC59  F01A         	call	_proceed	;wreg free
 10916  002DA6                     
 10917                           ;diskio.c: 46: count++;
 10918  002DA6  4A2A               	infsnz	reset@count,f,c
 10919  002DA8  2A2B               	incf	reset@count+1,f,c
 10920                           
 10921                           ;diskio.c: 47: }while((buff!=0X01) && (count<10) );
 10922  002DAA  042C               	decf	reset@buff,w,c
 10923  002DAC  B4D8               	btfsc	status,2,c
 10924  002DAE  D008               	goto	u7310
 10925  002DB0  BE2B               	btfsc	reset@count+1,7,c
 10926  002DB2  D7F9               	goto	l724
 10927  002DB4  502B               	movf	reset@count+1,w,c
 10928  002DB6  E104               	bnz	l6586
 10929  002DB8  0E0A               	movlw	10
 10930  002DBA  5C2A               	subwf	reset@count,w,c
 10931  002DBC  A0D8               	btfss	status,0,c
 10932  002DBE  D7F3               	goto	l724
 10933  002DC0                     u7310:
 10934  002DC0                     l6586:
 10935                           
 10936                           ;diskio.c: 48: count = 0;
 10937  002DC0  0E00               	movlw	0
 10938  002DC2  6E2B               	movwf	reset@count+1,c
 10939  002DC4  0E00               	movlw	0
 10940  002DC6  6E2A               	movwf	reset@count,c
 10941                           
 10942                           ;diskio.c: 49: }while(buff!=0X01);
 10943  002DC8  042C               	decf	reset@buff,w,c
 10944  002DCA  A4D8               	btfss	status,2,c
 10945  002DCC  D7DA               	goto	l723
 10946                           
 10947                           ;diskio.c: 53: _delay((unsigned long)((2000)*(48000000/4000.0)));
 10948  002DCE  0E7A               	movlw	122
 10949  002DD0  6E27               	movwf	(??_reset+1)& (0+255),c
 10950  002DD2  0EC1               	movlw	193
 10951  002DD4  6E26               	movwf	??_reset& (0+255),c
 10952  002DD6  0E82               	movlw	130
 10953  002DD8                     u9307:
 10954  002DD8  2EE8               	decfsz	wreg,f,c
 10955  002DDA  D7FE               	bra	u9307
 10956  002DDC  2E26               	decfsz	??_reset& (0+255),f,c
 10957  002DDE  D7FC               	bra	u9307
 10958  002DE0  2E27               	decfsz	(??_reset+1)& (0+255),f,c
 10959  002DE2  D7FA               	bra	u9307
 10960  002DE4  0012               	return	
 10961  002DE6                     __end_of_reset:
 10962                           	opt stack 0
 10963                           tosu	equ	0xFFF
 10964                           tosh	equ	0xFFE
 10965                           tosl	equ	0xFFD
 10966                           pclath	equ	0xFFA
 10967                           tblptru	equ	0xFF8
 10968                           tblptrh	equ	0xFF7
 10969                           tblptrl	equ	0xFF6
 10970                           tablat	equ	0xFF5
 10971                           prodh	equ	0xFF4
 10972                           prodl	equ	0xFF3
 10973                           intcon	equ	0xFF2
 10974                           intcon2	equ	0xFF1
 10975                           intcon3	equ	0xFF0
 10976                           postinc0	equ	0xFEE
 10977                           wreg	equ	0xFE8
 10978                           indf1	equ	0xFE7
 10979                           postinc1	equ	0xFE6
 10980                           postdec1	equ	0xFE5
 10981                           fsr1h	equ	0xFE2
 10982                           fsr1l	equ	0xFE1
 10983                           indf2	equ	0xFDF
 10984                           postinc2	equ	0xFDE
 10985                           postdec2	equ	0xFDD
 10986                           plusw2	equ	0xFDB
 10987                           fsr2h	equ	0xFDA
 10988                           fsr2l	equ	0xFD9
 10989                           status	equ	0xFD8
 10990                           
 10991 ;; *************** function _escreve_cmd_lcd *****************
 10992 ;; Defined at:
 10993 ;;		line 162 in file "bibliotecas/display/display_lcd.c"
 10994 ;; Parameters:    Size  Location     Type
 10995 ;;  comando         1    wreg     unsigned char 
 10996 ;; Auto vars:     Size  Location     Type
 10997 ;;  comando         1   27[COMRAM] unsigned char 
 10998 ;; Return value:  Size  Location     Type
 10999 ;;                  1    wreg      void 
 11000 ;; Registers used:
 11001 ;;		wreg, status,2, status,0, cstack
 11002 ;; Tracked objects:
 11003 ;;		On entry : 0/0
 11004 ;;		On exit  : 0/0
 11005 ;;		Unchanged: 0/0
 11006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11007 ;;      Params:         0       0       0       0       0       0       0       0       0
 11008 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11009 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11010 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11011 ;;Total ram usage:        1 bytes
 11012 ;; Hardware stack levels used:    1
 11013 ;; Hardware stack levels required when called:    3
 11014 ;; This function calls:
 11015 ;;		_delay
 11016 ;; This function is called by:
 11017 ;;		_inicializa_SPI
 11018 ;;		_mensagem_inicial
 11019 ;;		_SDCard
 11020 ;;		_init_lcd
 11021 ;;		_disk_initialize
 11022 ;;		_leitura_chave
 11023 ;;		_cria_caractere_lcd
 11024 ;; This function uses a non-reentrant model
 11025 ;;
 11026                           
 11027                           	psect	text42
 11028  002B6E                     __ptext42:
 11029                           	opt stack 0
 11030  002B6E                     _escreve_cmd_lcd:
 11031                           	opt stack 26
 11032                           
 11033                           ;incstack = 0
 11034                           ;escreve_cmd_lcd@comando stored from wreg
 11035  002B6E  6E1C               	movwf	escreve_cmd_lcd@comando,c
 11036                           
 11037                           ;display_lcd.c: 165: PORTDbits.RD2 = 0;
 11038  002B70  9483               	bcf	3971,2,c	;volatile
 11039                           
 11040                           ;display_lcd.c: 166: PORTDbits.RD1 = 0;
 11041  002B72  9283               	bcf	3971,1,c	;volatile
 11042                           
 11043                           ;display_lcd.c: 167: PORTDbits.RD0 = 0;
 11044  002B74  9083               	bcf	3971,0,c	;volatile
 11045                           
 11046                           ;display_lcd.c: 170: if(comando&0b00010000){PORTDbits.RD4=1;}
 11047  002B76  A81C               	btfss	escreve_cmd_lcd@comando,4,c
 11048  002B78  D002               	goto	l585
 11049  002B7A  8883               	bsf	3971,4,c	;volatile
 11050  002B7C  D001               	goto	l586
 11051  002B7E                     l585:
 11052                           
 11053                           ;display_lcd.c: 171: else {PORTDbits.RD4=0;}
 11054  002B7E  9883               	bcf	3971,4,c	;volatile
 11055  002B80                     l586:
 11056                           
 11057                           ;display_lcd.c: 172: if(comando&0b00100000){PORTDbits.RD5=1;}
 11058  002B80  AA1C               	btfss	escreve_cmd_lcd@comando,5,c
 11059  002B82  D002               	goto	l587
 11060  002B84  8A83               	bsf	3971,5,c	;volatile
 11061  002B86  D001               	goto	l588
 11062  002B88                     l587:
 11063                           
 11064                           ;display_lcd.c: 173: else {PORTDbits.RD5=0;}
 11065  002B88  9A83               	bcf	3971,5,c	;volatile
 11066  002B8A                     l588:
 11067                           
 11068                           ;display_lcd.c: 174: if(comando&0b01000000){PORTDbits.RD6=1;}
 11069  002B8A  AC1C               	btfss	escreve_cmd_lcd@comando,6,c
 11070  002B8C  D002               	goto	l589
 11071  002B8E  8C83               	bsf	3971,6,c	;volatile
 11072  002B90  D001               	goto	l590
 11073  002B92                     l589:
 11074                           
 11075                           ;display_lcd.c: 175: else {PORTDbits.RD6=0;}
 11076  002B92  9C83               	bcf	3971,6,c	;volatile
 11077  002B94                     l590:
 11078                           
 11079                           ;display_lcd.c: 176: if(comando&0b10000000){PORTDbits.RD7=1;}
 11080  002B94  AE1C               	btfss	escreve_cmd_lcd@comando,7,c
 11081  002B96  D002               	goto	l591
 11082  002B98  8E83               	bsf	3971,7,c	;volatile
 11083  002B9A  D001               	goto	l592
 11084  002B9C                     l591:
 11085                           
 11086                           ;display_lcd.c: 177: else {PORTDbits.RD7=0;}
 11087  002B9C  9E83               	bcf	3971,7,c	;volatile
 11088  002B9E                     l592:
 11089                           
 11090                           ;display_lcd.c: 180: PORTDbits.RD0 = 1;
 11091  002B9E  8083               	bsf	3971,0,c	;volatile
 11092                           
 11093                           ;display_lcd.c: 181: delay();
 11094  002BA0  ECAE  F019         	call	_delay	;wreg free
 11095                           
 11096                           ;display_lcd.c: 182: PORTDbits.RD0 = 0;
 11097  002BA4  9083               	bcf	3971,0,c	;volatile
 11098                           
 11099                           ;display_lcd.c: 183: delay();
 11100  002BA6  ECAE  F019         	call	_delay	;wreg free
 11101                           
 11102                           ;display_lcd.c: 186: if(comando&0b00000001){PORTDbits.RD4=1;}
 11103  002BAA  A01C               	btfss	escreve_cmd_lcd@comando,0,c
 11104  002BAC  D002               	goto	l593
 11105  002BAE  8883               	bsf	3971,4,c	;volatile
 11106  002BB0  D001               	goto	l594
 11107  002BB2                     l593:
 11108                           
 11109                           ;display_lcd.c: 187: else {PORTDbits.RD4=0;}
 11110  002BB2  9883               	bcf	3971,4,c	;volatile
 11111  002BB4                     l594:
 11112                           
 11113                           ;display_lcd.c: 188: if(comando&0b00000010){PORTDbits.RD5=1;}
 11114  002BB4  A21C               	btfss	escreve_cmd_lcd@comando,1,c
 11115  002BB6  D002               	goto	l595
 11116  002BB8  8A83               	bsf	3971,5,c	;volatile
 11117  002BBA  D001               	goto	l596
 11118  002BBC                     l595:
 11119                           
 11120                           ;display_lcd.c: 189: else {PORTDbits.RD5=0;}
 11121  002BBC  9A83               	bcf	3971,5,c	;volatile
 11122  002BBE                     l596:
 11123                           
 11124                           ;display_lcd.c: 190: if(comando&0b00000100){PORTDbits.RD6=1;}
 11125  002BBE  A41C               	btfss	escreve_cmd_lcd@comando,2,c
 11126  002BC0  D002               	goto	l597
 11127  002BC2  8C83               	bsf	3971,6,c	;volatile
 11128  002BC4  D001               	goto	l598
 11129  002BC6                     l597:
 11130                           
 11131                           ;display_lcd.c: 191: else {PORTDbits.RD6=0;}
 11132  002BC6  9C83               	bcf	3971,6,c	;volatile
 11133  002BC8                     l598:
 11134                           
 11135                           ;display_lcd.c: 192: if(comando&0b00001000){PORTDbits.RD7=1;}
 11136  002BC8  A61C               	btfss	escreve_cmd_lcd@comando,3,c
 11137  002BCA  D002               	goto	l599
 11138  002BCC  8E83               	bsf	3971,7,c	;volatile
 11139  002BCE  D001               	goto	l600
 11140  002BD0                     l599:
 11141                           
 11142                           ;display_lcd.c: 193: else {PORTDbits.RD7=0;}
 11143  002BD0  9E83               	bcf	3971,7,c	;volatile
 11144  002BD2                     l600:
 11145                           
 11146                           ;display_lcd.c: 196: PORTDbits.RD0 = 1;
 11147  002BD2  8083               	bsf	3971,0,c	;volatile
 11148                           
 11149                           ;display_lcd.c: 197: delay();
 11150  002BD4  ECAE  F019         	call	_delay	;wreg free
 11151                           
 11152                           ;display_lcd.c: 198: PORTDbits.RD0 = 0;
 11153  002BD8  9083               	bcf	3971,0,c	;volatile
 11154                           
 11155                           ;display_lcd.c: 199: delay();
 11156  002BDA  ECAE  F019         	call	_delay	;wreg free
 11157                           
 11158                           ;display_lcd.c: 204: if (comando==0x01 || comando==0x02 || comando==0x03)
 11159  002BDE  041C               	decf	escreve_cmd_lcd@comando,w,c
 11160  002BE0  B4D8               	btfsc	status,2,c
 11161  002BE2  D008               	goto	u7290
 11162  002BE4  0E02               	movlw	2
 11163  002BE6  181C               	xorwf	escreve_cmd_lcd@comando,w,c
 11164  002BE8  B4D8               	btfsc	status,2,c
 11165  002BEA  D004               	goto	u7290
 11166  002BEC  0E03               	movlw	3
 11167  002BEE  181C               	xorwf	escreve_cmd_lcd@comando,w,c
 11168  002BF0  A4D8               	btfss	status,2,c
 11169  002BF2  0012               	return	
 11170  002BF4                     u7290:
 11171                           
 11172                           ;display_lcd.c: 205: { delay(); }
 11173  002BF4  ECAE  F019         	call	_delay	;wreg free
 11174  002BF8  0012               	return	
 11175  002BFA                     __end_of_escreve_cmd_lcd:
 11176                           	opt stack 0
 11177                           tosu	equ	0xFFF
 11178                           tosh	equ	0xFFE
 11179                           tosl	equ	0xFFD
 11180                           pclath	equ	0xFFA
 11181                           tblptru	equ	0xFF8
 11182                           tblptrh	equ	0xFF7
 11183                           tblptrl	equ	0xFF6
 11184                           tablat	equ	0xFF5
 11185                           prodh	equ	0xFF4
 11186                           prodl	equ	0xFF3
 11187                           intcon	equ	0xFF2
 11188                           intcon2	equ	0xFF1
 11189                           intcon3	equ	0xFF0
 11190                           postinc0	equ	0xFEE
 11191                           wreg	equ	0xFE8
 11192                           indf1	equ	0xFE7
 11193                           postinc1	equ	0xFE6
 11194                           postdec1	equ	0xFE5
 11195                           fsr1h	equ	0xFE2
 11196                           fsr1l	equ	0xFE1
 11197                           indf2	equ	0xFDF
 11198                           postinc2	equ	0xFDE
 11199                           postdec2	equ	0xFDD
 11200                           plusw2	equ	0xFDB
 11201                           fsr2h	equ	0xFDA
 11202                           fsr2l	equ	0xFD9
 11203                           status	equ	0xFD8
 11204                           
 11205 ;; *************** function _check_fs *****************
 11206 ;; Defined at:
 11207 ;;		line 722 in file "pff.c"
 11208 ;; Parameters:    Size  Location     Type
 11209 ;;  buf             2   18[BANK0 ] PTR unsigned char 
 11210 ;;		 -> pf_mount@buf(36), 
 11211 ;;  sect            4   20[BANK0 ] unsigned long 
 11212 ;; Auto vars:     Size  Location     Type
 11213 ;;		None
 11214 ;; Return value:  Size  Location     Type
 11215 ;;                  1    wreg      unsigned char 
 11216 ;; Registers used:
 11217 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11218 ;; Tracked objects:
 11219 ;;		On entry : 0/0
 11220 ;;		On exit  : 0/0
 11221 ;;		Unchanged: 0/0
 11222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11223 ;;      Params:         0       6       0       0       0       0       0       0       0
 11224 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11225 ;;      Temps:          0       4       0       0       0       0       0       0       0
 11226 ;;      Totals:         0      10       0       0       0       0       0       0       0
 11227 ;;Total ram usage:       10 bytes
 11228 ;; Hardware stack levels used:    1
 11229 ;; Hardware stack levels required when called:    6
 11230 ;; This function calls:
 11231 ;;		_disk_readp
 11232 ;; This function is called by:
 11233 ;;		_pf_mount
 11234 ;; This function uses a non-reentrant model
 11235 ;;
 11236                           
 11237                           	psect	text43
 11238  001BEA                     __ptext43:
 11239                           	opt stack 0
 11240  001BEA                     _check_fs:
 11241                           	opt stack 21
 11242                           
 11243                           ;pff.c: 727: if (disk_readp(buf, sect, 510, 2))
 11244                           
 11245                           ;incstack = 0
 11246  001BEA  C072  F060         	movff	check_fs@buf,disk_readp@rd
 11247  001BEE  C073  F061         	movff	check_fs@buf+1,disk_readp@rd+1
 11248  001BF2  C074  F062         	movff	check_fs@sect,disk_readp@sector
 11249  001BF6  C075  F063         	movff	check_fs@sect+1,disk_readp@sector+1
 11250  001BFA  C076  F064         	movff	check_fs@sect+2,disk_readp@sector+2
 11251  001BFE  C077  F065         	movff	check_fs@sect+3,disk_readp@sector+3
 11252  001C02  0E01               	movlw	1
 11253  001C04  0100               	movlb	0	; () banked
 11254  001C06  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
 11255  001C08  0EFE               	movlw	254
 11256  001C0A  6F66               	movwf	disk_readp@offset& (0+255),b
 11257  001C0C  0E00               	movlw	0
 11258  001C0E  6F69               	movwf	(disk_readp@count+1)& (0+255),b
 11259  001C10  0E02               	movlw	2
 11260  001C12  6F68               	movwf	disk_readp@count& (0+255),b
 11261  001C14  EC3C  F009         	call	_disk_readp	;wreg free
 11262  001C18  0900               	iorlw	0
 11263  001C1A  B4D8               	btfsc	status,2,c
 11264  001C1C  D002               	goto	l956
 11265                           
 11266                           ;pff.c: 728: return 3;
 11267  001C1E  0E03               	movlw	3
 11268  001C20  0012               	return	
 11269  001C22                     l956:
 11270                           
 11271                           ;pff.c: 729: if ( (WORD)(((WORD)*((BYTE*)(buf)+1)<<8)|(WORD)*(BYTE*)(buf)) != 0xAA55)
 11272  001C22  0100               	movlb	0	; () banked
 11273  001C24  EE20 F001          	lfsr	2,1
 11274  001C28  5172               	movf	check_fs@buf& (0+255),w,b
 11275  001C2A  26D9               	addwf	fsr2l,f,c
 11276  001C2C  5173               	movf	(check_fs@buf+1)& (0+255),w,b
 11277  001C2E  22DA               	addwfc	fsr2h,f,c
 11278  001C30  50DF               	movf	indf2,w,c
 11279  001C32  6F78               	movwf	??_check_fs& (0+255),b
 11280  001C34  5178               	movf	??_check_fs& (0+255),w,b
 11281  001C36  6F7A               	movwf	(??_check_fs+2)& (0+255),b
 11282  001C38  6B79               	clrf	(??_check_fs+1)& (0+255),b
 11283  001C3A  C072  FFD9         	movff	check_fs@buf,fsr2l
 11284  001C3E  C073  FFDA         	movff	check_fs@buf+1,fsr2h
 11285  001C42  50DF               	movf	indf2,w,c
 11286  001C44  6F7B               	movwf	(??_check_fs+3)& (0+255),b
 11287  001C46  517B               	movf	(??_check_fs+3)& (0+255),w,b
 11288  001C48  1379               	iorwf	(??_check_fs+1)& (0+255),f,b
 11289  001C4A  0E00               	movlw	0
 11290  001C4C  137A               	iorwf	(??_check_fs+2)& (0+255),f,b
 11291  001C4E  0E55               	movlw	85
 11292  001C50  1979               	xorwf	(??_check_fs+1)& (0+255),w,b
 11293  001C52  E104               	bnz	u7790
 11294  001C54  0EAA               	movlw	170
 11295  001C56  197A               	xorwf	(??_check_fs+2)& (0+255),w,b
 11296  001C58  B4D8               	btfsc	status,2,c
 11297  001C5A  D002               	goto	l958
 11298  001C5C                     u7790:
 11299                           
 11300                           ; BSR set to: 0
 11301                           ;pff.c: 730: {
 11302                           ;pff.c: 731: return 2;
 11303  001C5C  0E02               	movlw	2
 11304                           
 11305                           ; BSR set to: 0
 11306  001C5E  0012               	return	
 11307  001C60                     l958:
 11308                           
 11309                           ; BSR set to: 0
 11310                           
 11311                           ; BSR set to: 0
 11312  001C60  C072  F060         	movff	check_fs@buf,disk_readp@rd
 11313  001C64  C073  F061         	movff	check_fs@buf+1,disk_readp@rd+1
 11314  001C68  C074  F062         	movff	check_fs@sect,disk_readp@sector
 11315  001C6C  C075  F063         	movff	check_fs@sect+1,disk_readp@sector+1
 11316  001C70  C076  F064         	movff	check_fs@sect+2,disk_readp@sector+2
 11317  001C74  C077  F065         	movff	check_fs@sect+3,disk_readp@sector+3
 11318  001C78  0E00               	movlw	0
 11319  001C7A  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
 11320  001C7C  0E36               	movlw	54
 11321  001C7E  6F66               	movwf	disk_readp@offset& (0+255),b
 11322  001C80  0E00               	movlw	0
 11323  001C82  6F69               	movwf	(disk_readp@count+1)& (0+255),b
 11324  001C84  0E02               	movlw	2
 11325  001C86  6F68               	movwf	disk_readp@count& (0+255),b
 11326  001C88  EC3C  F009         	call	_disk_readp	;wreg free
 11327  001C8C  0900               	iorlw	0
 11328  001C8E  A4D8               	btfss	status,2,c
 11329  001C90  D01F               	goto	l959
 11330  001C92  0100               	movlb	0	; () banked
 11331  001C94  EE20 F001          	lfsr	2,1
 11332  001C98  5172               	movf	check_fs@buf& (0+255),w,b
 11333  001C9A  26D9               	addwf	fsr2l,f,c
 11334  001C9C  5173               	movf	(check_fs@buf+1)& (0+255),w,b
 11335  001C9E  22DA               	addwfc	fsr2h,f,c
 11336  001CA0  50DF               	movf	indf2,w,c
 11337  001CA2  6F78               	movwf	??_check_fs& (0+255),b
 11338  001CA4  5178               	movf	??_check_fs& (0+255),w,b
 11339  001CA6  6F7A               	movwf	(??_check_fs+2)& (0+255),b
 11340  001CA8  6B79               	clrf	(??_check_fs+1)& (0+255),b
 11341  001CAA  C072  FFD9         	movff	check_fs@buf,fsr2l
 11342  001CAE  C073  FFDA         	movff	check_fs@buf+1,fsr2h
 11343  001CB2  50DF               	movf	indf2,w,c
 11344  001CB4  6F7B               	movwf	(??_check_fs+3)& (0+255),b
 11345  001CB6  517B               	movf	(??_check_fs+3)& (0+255),w,b
 11346  001CB8  1379               	iorwf	(??_check_fs+1)& (0+255),f,b
 11347  001CBA  0E00               	movlw	0
 11348  001CBC  137A               	iorwf	(??_check_fs+2)& (0+255),f,b
 11349  001CBE  0E46               	movlw	70
 11350  001CC0  1979               	xorwf	(??_check_fs+1)& (0+255),w,b
 11351  001CC2  E106               	bnz	l6944
 11352  001CC4  0E41               	movlw	65
 11353  001CC6  197A               	xorwf	(??_check_fs+2)& (0+255),w,b
 11354  001CC8  A4D8               	btfss	status,2,c
 11355  001CCA  D002               	goto	l959
 11356                           
 11357                           ; BSR set to: 0
 11358                           ;pff.c: 734: return 0;
 11359  001CCC  0E00               	movlw	0
 11360                           
 11361                           ; BSR set to: 0
 11362  001CCE  0012               	return	
 11363  001CD0                     l959:
 11364  001CD0                     l6944:
 11365  001CD0  C072  F060         	movff	check_fs@buf,disk_readp@rd
 11366  001CD4  C073  F061         	movff	check_fs@buf+1,disk_readp@rd+1
 11367  001CD8  C074  F062         	movff	check_fs@sect,disk_readp@sector
 11368  001CDC  C075  F063         	movff	check_fs@sect+1,disk_readp@sector+1
 11369  001CE0  C076  F064         	movff	check_fs@sect+2,disk_readp@sector+2
 11370  001CE4  C077  F065         	movff	check_fs@sect+3,disk_readp@sector+3
 11371  001CE8  0E00               	movlw	0
 11372  001CEA  0100               	movlb	0	; () banked
 11373  001CEC  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
 11374  001CEE  0E52               	movlw	82
 11375  001CF0  6F66               	movwf	disk_readp@offset& (0+255),b
 11376  001CF2  0E00               	movlw	0
 11377  001CF4  6F69               	movwf	(disk_readp@count+1)& (0+255),b
 11378  001CF6  0E02               	movlw	2
 11379  001CF8  6F68               	movwf	disk_readp@count& (0+255),b
 11380  001CFA  EC3C  F009         	call	_disk_readp	;wreg free
 11381  001CFE  0900               	iorlw	0
 11382  001D00  A4D8               	btfss	status,2,c
 11383  001D02  D01F               	goto	l960
 11384  001D04  0100               	movlb	0	; () banked
 11385  001D06  EE20 F001          	lfsr	2,1
 11386  001D0A  5172               	movf	check_fs@buf& (0+255),w,b
 11387  001D0C  26D9               	addwf	fsr2l,f,c
 11388  001D0E  5173               	movf	(check_fs@buf+1)& (0+255),w,b
 11389  001D10  22DA               	addwfc	fsr2h,f,c
 11390  001D12  50DF               	movf	indf2,w,c
 11391  001D14  6F78               	movwf	??_check_fs& (0+255),b
 11392  001D16  5178               	movf	??_check_fs& (0+255),w,b
 11393  001D18  6F7A               	movwf	(??_check_fs+2)& (0+255),b
 11394  001D1A  6B79               	clrf	(??_check_fs+1)& (0+255),b
 11395  001D1C  C072  FFD9         	movff	check_fs@buf,fsr2l
 11396  001D20  C073  FFDA         	movff	check_fs@buf+1,fsr2h
 11397  001D24  50DF               	movf	indf2,w,c
 11398  001D26  6F7B               	movwf	(??_check_fs+3)& (0+255),b
 11399  001D28  517B               	movf	(??_check_fs+3)& (0+255),w,b
 11400  001D2A  1379               	iorwf	(??_check_fs+1)& (0+255),f,b
 11401  001D2C  0E00               	movlw	0
 11402  001D2E  137A               	iorwf	(??_check_fs+2)& (0+255),f,b
 11403  001D30  0E46               	movlw	70
 11404  001D32  1979               	xorwf	(??_check_fs+1)& (0+255),w,b
 11405  001D34  E106               	bnz	l6952
 11406  001D36  0E41               	movlw	65
 11407  001D38  197A               	xorwf	(??_check_fs+2)& (0+255),w,b
 11408  001D3A  A4D8               	btfss	status,2,c
 11409  001D3C  D002               	goto	l960
 11410                           
 11411                           ; BSR set to: 0
 11412                           ;pff.c: 736: return 0;
 11413  001D3E  0E00               	movlw	0
 11414                           
 11415                           ; BSR set to: 0
 11416  001D40  0012               	return	
 11417  001D42                     l960:
 11418  001D42                     l6952:
 11419                           
 11420                           ;pff.c: 737: return 1;
 11421  001D42  0E01               	movlw	1
 11422  001D44  0012               	return	
 11423  001D46                     __end_of_check_fs:
 11424                           	opt stack 0
 11425                           tosu	equ	0xFFF
 11426                           tosh	equ	0xFFE
 11427                           tosl	equ	0xFFD
 11428                           pclath	equ	0xFFA
 11429                           tblptru	equ	0xFF8
 11430                           tblptrh	equ	0xFF7
 11431                           tblptrl	equ	0xFF6
 11432                           tablat	equ	0xFF5
 11433                           prodh	equ	0xFF4
 11434                           prodl	equ	0xFF3
 11435                           intcon	equ	0xFF2
 11436                           intcon2	equ	0xFF1
 11437                           intcon3	equ	0xFF0
 11438                           postinc0	equ	0xFEE
 11439                           wreg	equ	0xFE8
 11440                           indf1	equ	0xFE7
 11441                           postinc1	equ	0xFE6
 11442                           postdec1	equ	0xFE5
 11443                           fsr1h	equ	0xFE2
 11444                           fsr1l	equ	0xFE1
 11445                           indf2	equ	0xFDF
 11446                           postinc2	equ	0xFDE
 11447                           postdec2	equ	0xFDD
 11448                           plusw2	equ	0xFDB
 11449                           fsr2h	equ	0xFDA
 11450                           fsr2l	equ	0xFD9
 11451                           status	equ	0xFD8
 11452                           
 11453 ;; *************** function _disk_readp *****************
 11454 ;; Defined at:
 11455 ;;		line 149 in file "diskio.c"
 11456 ;; Parameters:    Size  Location     Type
 11457 ;;  rd              2    0[BANK0 ] PTR unsigned char 
 11458 ;;		 -> pf_readdir@dir(32), pf_opendir@dir(32), pf_open@dir(32), pf_mount@buf(36), 
 11459 ;;		 -> NULL(0), get_fat@buf(4), data_buffer_32(32), 
 11460 ;;  sector          4    2[BANK0 ] unsigned long 
 11461 ;;  offset          2    6[BANK0 ] unsigned int 
 11462 ;;  count           2    8[BANK0 ] unsigned int 
 11463 ;; Auto vars:     Size  Location     Type
 11464 ;;  start_add       4   11[BANK0 ] unsigned long 
 11465 ;;  length          2   16[BANK0 ] int 
 11466 ;;  i               2    0        int 
 11467 ;;  buff            1   15[BANK0 ] unsigned char 
 11468 ;;  ptr             1   10[BANK0 ] unsigned char 
 11469 ;;  res             1    0        enum E14
 11470 ;; Return value:  Size  Location     Type
 11471 ;;                  1    wreg      enum E14
 11472 ;; Registers used:
 11473 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11474 ;; Tracked objects:
 11475 ;;		On entry : 0/0
 11476 ;;		On exit  : 0/0
 11477 ;;		Unchanged: 0/0
 11478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11479 ;;      Params:         0      10       0       0       0       0       0       0       0
 11480 ;;      Locals:         0       8       0       0       0       0       0       0       0
 11481 ;;      Temps:          4       0       0       0       0       0       0       0       0
 11482 ;;      Totals:         4      18       0       0       0       0       0       0       0
 11483 ;;Total ram usage:       22 bytes
 11484 ;; Hardware stack levels used:    1
 11485 ;; Hardware stack levels required when called:    5
 11486 ;; This function calls:
 11487 ;;		_command
 11488 ;;		_dummy_clocks
 11489 ;;		_escreve_frase_ram_lcd
 11490 ;;		_posicao_cursor_lcd
 11491 ;;		_proceed
 11492 ;;		_response
 11493 ;; This function is called by:
 11494 ;;		_get_fat
 11495 ;;		_dir_find
 11496 ;;		_check_fs
 11497 ;;		_pf_mount
 11498 ;;		_pf_read
 11499 ;;		_dir_read
 11500 ;; This function uses a non-reentrant model
 11501 ;;
 11502                           
 11503                           	psect	text44
 11504  001278                     __ptext44:
 11505                           	opt stack 0
 11506  001278                     _disk_readp:
 11507                           	opt stack 21
 11508                           
 11509                           ;diskio.c: 156: DRESULT res;
 11510                           ;diskio.c: 157: unsigned char ptr=0X00,buff;
 11511                           
 11512                           ;incstack = 0
 11513  001278  0E00               	movlw	0
 11514  00127A  0100               	movlb	0	; () banked
 11515  00127C  6F6A               	movwf	disk_readp@ptr& (0+255),b
 11516                           
 11517                           ; BSR set to: 0
 11518                           ;diskio.c: 158: unsigned long int start_add;
 11519                           ;diskio.c: 159: static unsigned char arr[512];
 11520                           ;diskio.c: 160: int length,i;
 11521                           ;diskio.c: 162: if(offset == 0)
 11522  00127E  5166               	movf	disk_readp@offset& (0+255),w,b
 11523  001280  1167               	iorwf	(disk_readp@offset+1)& (0+255),w,b
 11524  001282  A4D8               	btfss	status,2,c
 11525  001284  D0A4               	goto	l754
 11526                           
 11527                           ; BSR set to: 0
 11528                           ;diskio.c: 163: {
 11529                           ;diskio.c: 164: start_add = ((sector*512));
 11530  001286  C062  F026         	movff	disk_readp@sector,??_disk_readp
 11531  00128A  C063  F027         	movff	disk_readp@sector+1,??_disk_readp+1
 11532  00128E  C064  F028         	movff	disk_readp@sector+2,??_disk_readp+2
 11533  001292  C065  F029         	movff	disk_readp@sector+3,??_disk_readp+3
 11534  001296  0E09               	movlw	9
 11535  001298                     u6705:
 11536  001298  90D8               	bcf	status,0,c
 11537  00129A  3626               	rlcf	??_disk_readp,f,c
 11538  00129C  3627               	rlcf	??_disk_readp+1,f,c
 11539  00129E  3628               	rlcf	??_disk_readp+2,f,c
 11540  0012A0  3629               	rlcf	??_disk_readp+3,f,c
 11541  0012A2  2EE8               	decfsz	wreg,f,c
 11542  0012A4  D7F9               	goto	u6705
 11543  0012A6  C026  F06B         	movff	??_disk_readp,disk_readp@start_add
 11544  0012AA  C027  F06C         	movff	??_disk_readp+1,disk_readp@start_add+1
 11545  0012AE  C028  F06D         	movff	??_disk_readp+2,disk_readp@start_add+2
 11546  0012B2  C029  F06E         	movff	??_disk_readp+3,disk_readp@start_add+3
 11547                           
 11548                           ; BSR set to: 0
 11549                           ;diskio.c: 166: _delay((unsigned long)((1000)*(48000000/4000.0)));
 11550  0012B6  0E3D               	movlw	61
 11551  0012B8  6E27               	movwf	(??_disk_readp+1)& (0+255),c
 11552  0012BA  0EE1               	movlw	225
 11553  0012BC  6E26               	movwf	??_disk_readp& (0+255),c
 11554  0012BE  0E40               	movlw	64
 11555  0012C0                     u9317:
 11556  0012C0  2EE8               	decfsz	wreg,f,c
 11557  0012C2  D7FE               	bra	u9317
 11558  0012C4  2E26               	decfsz	??_disk_readp& (0+255),f,c
 11559  0012C6  D7FC               	bra	u9317
 11560  0012C8  2E27               	decfsz	(??_disk_readp+1)& (0+255),f,c
 11561  0012CA  D7FA               	bra	u9317
 11562                           
 11563                           ;diskio.c: 168: dummy_clocks(8);
 11564  0012CC  0E08               	movlw	8
 11565  0012CE  EC5A  F019         	call	_dummy_clocks
 11566                           
 11567                           ;diskio.c: 169: command(0X52,start_add,0X00);
 11568  0012D2  C06B  F01E         	movff	disk_readp@start_add,command@arg
 11569  0012D6  C06C  F01F         	movff	disk_readp@start_add+1,command@arg+1
 11570  0012DA  C06D  F020         	movff	disk_readp@start_add+2,command@arg+2
 11571  0012DE  C06E  F021         	movff	disk_readp@start_add+3,command@arg+3
 11572  0012E2  0E00               	movlw	0
 11573  0012E4  6E22               	movwf	command@CRC,c
 11574  0012E6  0E52               	movlw	82
 11575  0012E8  EC36  F018         	call	_command
 11576                           
 11577                           ;diskio.c: 170: proceed();
 11578  0012EC  EC59  F01A         	call	_proceed	;wreg free
 11579  0012F0                     
 11580                           ;diskio.c: 172: buff = response();
 11581  0012F0  EC4C  F01A         	call	_response	;wreg free
 11582  0012F4  0100               	movlb	0	; () banked
 11583  0012F6  6F6F               	movwf	disk_readp@buff& (0+255),b
 11584                           
 11585                           ; BSR set to: 0
 11586                           ;diskio.c: 173: }while(buff!=0x00);
 11587  0012F8  516F               	movf	disk_readp@buff& (0+255),w,b
 11588  0012FA  A4D8               	btfss	status,2,c
 11589  0012FC  D7F9               	goto	l755
 11590                           
 11591                           ; BSR set to: 0
 11592                           ;diskio.c: 174: _delay((unsigned long)((1000)*(48000000/4000.0)));
 11593                           
 11594                           ; BSR set to: 0
 11595  0012FE  0E3D               	movlw	61
 11596  001300  6E27               	movwf	(??_disk_readp+1)& (0+255),c
 11597  001302  0EE1               	movlw	225
 11598  001304  6E26               	movwf	??_disk_readp& (0+255),c
 11599  001306  0E40               	movlw	64
 11600  001308                     u9327:
 11601  001308  2EE8               	decfsz	wreg,f,c
 11602  00130A  D7FE               	bra	u9327
 11603  00130C  2E26               	decfsz	??_disk_readp& (0+255),f,c
 11604  00130E  D7FC               	bra	u9327
 11605  001310  2E27               	decfsz	(??_disk_readp+1)& (0+255),f,c
 11606  001312  D7FA               	bra	u9327
 11607                           
 11608                           ;diskio.c: 176: proceed();
 11609  001314  EC59  F01A         	call	_proceed	;wreg free
 11610  001318                     
 11611                           ;diskio.c: 178: buff = response();
 11612  001318  EC4C  F01A         	call	_response	;wreg free
 11613  00131C  0100               	movlb	0	; () banked
 11614  00131E  6F6F               	movwf	disk_readp@buff& (0+255),b
 11615                           
 11616                           ; BSR set to: 0
 11617                           ;diskio.c: 179: }while(buff!=0xFE);
 11618  001320  0EFE               	movlw	254
 11619  001322  196F               	xorwf	disk_readp@buff& (0+255),w,b
 11620  001324  A4D8               	btfss	status,2,c
 11621  001326  D7F8               	goto	l757
 11622                           
 11623                           ; BSR set to: 0
 11624                           ;diskio.c: 180: length = 0;
 11625                           
 11626                           ; BSR set to: 0
 11627  001328  0E00               	movlw	0
 11628  00132A  6F71               	movwf	(disk_readp@length+1)& (0+255),b
 11629  00132C  0E00               	movlw	0
 11630  00132E  6F70               	movwf	disk_readp@length& (0+255),b
 11631                           
 11632                           ;diskio.c: 181: while ( length < count )
 11633  001330  D00C               	goto	l759
 11634  001332                     
 11635                           ; BSR set to: 0
 11636                           ;diskio.c: 182: {
 11637                           ;diskio.c: 183: arr[length] = response();
 11638                           
 11639                           ; BSR set to: 0
 11640  001332  0E2D               	movlw	low disk_readp@arr
 11641  001334  2570               	addwf	disk_readp@length& (0+255),w,b
 11642  001336  6ED9               	movwf	fsr2l,c
 11643  001338  0E02               	movlw	high disk_readp@arr
 11644  00133A  2171               	addwfc	(disk_readp@length+1)& (0+255),w,b
 11645  00133C  6EDA               	movwf	fsr2h,c
 11646  00133E  EC4C  F01A         	call	_response	;wreg free
 11647  001342  6EDF               	movwf	indf2,c
 11648                           
 11649                           ;diskio.c: 184: length++;
 11650  001344  0100               	movlb	0	; () banked
 11651  001346  4B70               	infsnz	disk_readp@length& (0+255),f,b
 11652  001348  2B71               	incf	(disk_readp@length+1)& (0+255),f,b
 11653  00134A                     l759:
 11654                           
 11655                           ; BSR set to: 0
 11656                           
 11657                           ; BSR set to: 0
 11658  00134A  5168               	movf	disk_readp@count& (0+255),w,b
 11659  00134C  5D70               	subwf	disk_readp@length& (0+255),w,b
 11660  00134E  5169               	movf	(disk_readp@count+1)& (0+255),w,b
 11661  001350  5971               	subwfb	(disk_readp@length+1)& (0+255),w,b
 11662  001352  A0D8               	btfss	status,0,c
 11663  001354  D7EE               	goto	l760
 11664                           
 11665                           ; BSR set to: 0
 11666                           ;diskio.c: 185: }
 11667                           ;diskio.c: 187: _delay((unsigned long)((1000)*(48000000/4000.0)));
 11668                           
 11669                           ; BSR set to: 0
 11670  001356  0E3D               	movlw	61
 11671  001358  6E27               	movwf	(??_disk_readp+1)& (0+255),c
 11672  00135A  0EE1               	movlw	225
 11673  00135C  6E26               	movwf	??_disk_readp& (0+255),c
 11674  00135E  0E40               	movlw	64
 11675  001360                     u9337:
 11676  001360  2EE8               	decfsz	wreg,f,c
 11677  001362  D7FE               	bra	u9337
 11678  001364  2E26               	decfsz	??_disk_readp& (0+255),f,c
 11679  001366  D7FC               	bra	u9337
 11680  001368  2E27               	decfsz	(??_disk_readp+1)& (0+255),f,c
 11681  00136A  D7FA               	bra	u9337
 11682                           
 11683                           ;diskio.c: 189: dummy_clocks(8);
 11684  00136C  0E08               	movlw	8
 11685  00136E  EC5A  F019         	call	_dummy_clocks
 11686                           
 11687                           ;diskio.c: 190: command(0X4C,0X00000000,0X00);
 11688  001372  0E00               	movlw	0
 11689  001374  6E1E               	movwf	command@arg,c
 11690  001376  0E00               	movlw	0
 11691  001378  6E1F               	movwf	command@arg+1,c
 11692  00137A  0E00               	movlw	0
 11693  00137C  6E20               	movwf	command@arg+2,c
 11694  00137E  0E00               	movlw	0
 11695  001380  6E21               	movwf	command@arg+3,c
 11696  001382  0E00               	movlw	0
 11697  001384  6E22               	movwf	command@CRC,c
 11698  001386  0E4C               	movlw	76
 11699  001388  EC36  F018         	call	_command
 11700                           
 11701                           ;diskio.c: 191: proceed();
 11702  00138C  EC59  F01A         	call	_proceed	;wreg free
 11703  001390                     
 11704                           ;diskio.c: 193: buff = response();
 11705  001390  EC4C  F01A         	call	_response	;wreg free
 11706  001394  0100               	movlb	0	; () banked
 11707  001396  6F6F               	movwf	disk_readp@buff& (0+255),b
 11708                           
 11709                           ; BSR set to: 0
 11710                           ;diskio.c: 194: }while(buff!=0xFF);
 11711  001398  296F               	incf	disk_readp@buff& (0+255),w,b
 11712  00139A  A4D8               	btfss	status,2,c
 11713  00139C  D7F9               	goto	l762
 11714                           
 11715                           ; BSR set to: 0
 11716                           ;diskio.c: 196: length = 0;
 11717                           
 11718                           ; BSR set to: 0
 11719  00139E  0E00               	movlw	0
 11720  0013A0  6F71               	movwf	(disk_readp@length+1)& (0+255),b
 11721  0013A2  0E00               	movlw	0
 11722  0013A4  6F70               	movwf	disk_readp@length& (0+255),b
 11723                           
 11724                           ;diskio.c: 198: while(arr[length]!='\0')
 11725  0013A6  D002               	goto	l764
 11726  0013A8                     
 11727                           ; BSR set to: 0
 11728                           ;diskio.c: 199: {
 11729                           ;diskio.c: 201: length++;
 11730                           
 11731                           ; BSR set to: 0
 11732  0013A8  4B70               	infsnz	disk_readp@length& (0+255),f,b
 11733  0013AA  2B71               	incf	(disk_readp@length+1)& (0+255),f,b
 11734  0013AC                     l764:
 11735                           
 11736                           ; BSR set to: 0
 11737                           
 11738                           ; BSR set to: 0
 11739  0013AC  0E2D               	movlw	low disk_readp@arr
 11740  0013AE  2570               	addwf	disk_readp@length& (0+255),w,b
 11741  0013B0  6ED9               	movwf	fsr2l,c
 11742  0013B2  0E02               	movlw	high disk_readp@arr
 11743  0013B4  2171               	addwfc	(disk_readp@length+1)& (0+255),w,b
 11744  0013B6  6EDA               	movwf	fsr2h,c
 11745  0013B8  50DF               	movf	indf2,w,c
 11746  0013BA  A4D8               	btfss	status,2,c
 11747  0013BC  D7F5               	goto	l765
 11748                           
 11749                           ; BSR set to: 0
 11750                           ;diskio.c: 202: }
 11751                           ;diskio.c: 204: *rd = length;
 11752                           
 11753                           ; BSR set to: 0
 11754  0013BE  C060  FFD9         	movff	disk_readp@rd,fsr2l
 11755  0013C2  C061  FFDA         	movff	disk_readp@rd+1,fsr2h
 11756  0013C6  C070  FFDF         	movff	disk_readp@length,indf2
 11757                           
 11758                           ; BSR set to: 0
 11759                           ;diskio.c: 205: return RES_OK;
 11760  0013CA  0E00               	movlw	0
 11761                           
 11762                           ; BSR set to: 0
 11763                           ;diskio.c: 206: }
 11764                           
 11765                           ; BSR set to: 0
 11766  0013CC  0012               	return	
 11767  0013CE                     l754:
 11768                           
 11769                           ; BSR set to: 0
 11770                           ;diskio.c: 207: else
 11771                           ;diskio.c: 208: {
 11772                           ;diskio.c: 209: start_add = (sector*512);
 11773                           
 11774                           ; BSR set to: 0
 11775  0013CE  C062  F026         	movff	disk_readp@sector,??_disk_readp
 11776  0013D2  C063  F027         	movff	disk_readp@sector+1,??_disk_readp+1
 11777  0013D6  C064  F028         	movff	disk_readp@sector+2,??_disk_readp+2
 11778  0013DA  C065  F029         	movff	disk_readp@sector+3,??_disk_readp+3
 11779  0013DE  0E09               	movlw	9
 11780  0013E0                     u6765:
 11781  0013E0  90D8               	bcf	status,0,c
 11782  0013E2  3626               	rlcf	??_disk_readp,f,c
 11783  0013E4  3627               	rlcf	??_disk_readp+1,f,c
 11784  0013E6  3628               	rlcf	??_disk_readp+2,f,c
 11785  0013E8  3629               	rlcf	??_disk_readp+3,f,c
 11786  0013EA  2EE8               	decfsz	wreg,f,c
 11787  0013EC  D7F9               	goto	u6765
 11788  0013EE  C026  F06B         	movff	??_disk_readp,disk_readp@start_add
 11789  0013F2  C027  F06C         	movff	??_disk_readp+1,disk_readp@start_add+1
 11790  0013F6  C028  F06D         	movff	??_disk_readp+2,disk_readp@start_add+2
 11791  0013FA  C029  F06E         	movff	??_disk_readp+3,disk_readp@start_add+3
 11792                           
 11793                           ; BSR set to: 0
 11794                           ;diskio.c: 211: length = 0;
 11795  0013FE  0E00               	movlw	0
 11796  001400  6F71               	movwf	(disk_readp@length+1)& (0+255),b
 11797  001402  0E00               	movlw	0
 11798  001404  6F70               	movwf	disk_readp@length& (0+255),b
 11799                           
 11800                           ;diskio.c: 212: while(length<512)
 11801  001406  D00A               	goto	l769
 11802  001408                     
 11803                           ; BSR set to: 0
 11804                           ;diskio.c: 213: {
 11805                           ;diskio.c: 214: arr[length] = 0;
 11806                           
 11807                           ; BSR set to: 0
 11808  001408  0E2D               	movlw	low disk_readp@arr
 11809  00140A  2570               	addwf	disk_readp@length& (0+255),w,b
 11810  00140C  6ED9               	movwf	fsr2l,c
 11811  00140E  0E02               	movlw	high disk_readp@arr
 11812  001410  2171               	addwfc	(disk_readp@length+1)& (0+255),w,b
 11813  001412  6EDA               	movwf	fsr2h,c
 11814  001414  0E00               	movlw	0
 11815  001416  6EDF               	movwf	indf2,c
 11816                           
 11817                           ; BSR set to: 0
 11818                           ;diskio.c: 215: length++;
 11819  001418  4B70               	infsnz	disk_readp@length& (0+255),f,b
 11820  00141A  2B71               	incf	(disk_readp@length+1)& (0+255),f,b
 11821  00141C                     l769:
 11822                           
 11823                           ; BSR set to: 0
 11824                           
 11825                           ; BSR set to: 0
 11826  00141C  BF71               	btfsc	(disk_readp@length+1)& (0+255),7,b
 11827  00141E  D7F4               	goto	l770
 11828  001420  0E02               	movlw	2
 11829  001422  5D71               	subwf	(disk_readp@length+1)& (0+255),w,b
 11830  001424  A0D8               	btfss	status,0,c
 11831  001426  D7F0               	goto	l770
 11832                           
 11833                           ; BSR set to: 0
 11834                           ;diskio.c: 216: }
 11835                           ;diskio.c: 218: _delay((unsigned long)((1000)*(48000000/4000.0)));
 11836                           
 11837                           ; BSR set to: 0
 11838  001428  0E3D               	movlw	61
 11839  00142A  6E27               	movwf	(??_disk_readp+1)& (0+255),c
 11840  00142C  0EE1               	movlw	225
 11841  00142E  6E26               	movwf	??_disk_readp& (0+255),c
 11842  001430  0E40               	movlw	64
 11843  001432                     u9347:
 11844  001432  2EE8               	decfsz	wreg,f,c
 11845  001434  D7FE               	bra	u9347
 11846  001436  2E26               	decfsz	??_disk_readp& (0+255),f,c
 11847  001438  D7FC               	bra	u9347
 11848  00143A  2E27               	decfsz	(??_disk_readp+1)& (0+255),f,c
 11849  00143C  D7FA               	bra	u9347
 11850                           
 11851                           ;diskio.c: 220: dummy_clocks(8);
 11852  00143E  0E08               	movlw	8
 11853  001440  EC5A  F019         	call	_dummy_clocks
 11854                           
 11855                           ;diskio.c: 222: command(0X51,start_add,0X00);
 11856  001444  C06B  F01E         	movff	disk_readp@start_add,command@arg
 11857  001448  C06C  F01F         	movff	disk_readp@start_add+1,command@arg+1
 11858  00144C  C06D  F020         	movff	disk_readp@start_add+2,command@arg+2
 11859  001450  C06E  F021         	movff	disk_readp@start_add+3,command@arg+3
 11860  001454  0E00               	movlw	0
 11861  001456  6E22               	movwf	command@CRC,c
 11862  001458  0E51               	movlw	81
 11863  00145A  EC36  F018         	call	_command
 11864                           
 11865                           ;diskio.c: 223: proceed();
 11866  00145E  EC59  F01A         	call	_proceed	;wreg free
 11867  001462                     
 11868                           ;diskio.c: 225: buff = response();
 11869  001462  EC4C  F01A         	call	_response	;wreg free
 11870  001466  0100               	movlb	0	; () banked
 11871  001468  6F6F               	movwf	disk_readp@buff& (0+255),b
 11872                           
 11873                           ; BSR set to: 0
 11874                           ;diskio.c: 226: }while(buff!=0x00);
 11875  00146A  516F               	movf	disk_readp@buff& (0+255),w,b
 11876  00146C  A4D8               	btfss	status,2,c
 11877  00146E  D7F9               	goto	l772
 11878  001470                     u6780:
 11879                           
 11880                           ; BSR set to: 0
 11881                           ;diskio.c: 228: buff = response();
 11882                           
 11883                           ; BSR set to: 0
 11884                           
 11885                           ;diskio.c: 227: do{
 11886                           
 11887                           ; BSR set to: 0
 11888  001470  EC4C  F01A         	call	_response	;wreg free
 11889  001474  0100               	movlb	0	; () banked
 11890  001476  6F6F               	movwf	disk_readp@buff& (0+255),b
 11891                           
 11892                           ; BSR set to: 0
 11893                           ;diskio.c: 229: }while(buff!=0xFE);
 11894  001478  0EFE               	movlw	254
 11895  00147A  196F               	xorwf	disk_readp@buff& (0+255),w,b
 11896  00147C  A4D8               	btfss	status,2,c
 11897  00147E  D7F8               	goto	u6780
 11898                           
 11899                           ; BSR set to: 0
 11900                           ;diskio.c: 231: length = 0;
 11901                           
 11902                           ; BSR set to: 0
 11903  001480  0E00               	movlw	0
 11904  001482  6F71               	movwf	(disk_readp@length+1)& (0+255),b
 11905  001484  0E00               	movlw	0
 11906  001486  6F70               	movwf	disk_readp@length& (0+255),b
 11907                           
 11908                           ;diskio.c: 232: while ( length < 512 )
 11909  001488  D048               	goto	u6820
 11910  00148A                     l6298:
 11911                           
 11912                           ; BSR set to: 0
 11913                           ;diskio.c: 235: {
 11914                           ;diskio.c: 236: arr[length] = response();
 11915  00148A  0E2D               	movlw	low disk_readp@arr
 11916  00148C  2570               	addwf	disk_readp@length& (0+255),w,b
 11917  00148E  6ED9               	movwf	fsr2l,c
 11918  001490  0E02               	movlw	high disk_readp@arr
 11919  001492  2171               	addwfc	(disk_readp@length+1)& (0+255),w,b
 11920  001494  6EDA               	movwf	fsr2h,c
 11921  001496  EC4C  F01A         	call	_response	;wreg free
 11922  00149A  6EDF               	movwf	indf2,c
 11923                           
 11924                           ;diskio.c: 237: length++;
 11925  00149C  0100               	movlb	0	; () banked
 11926  00149E  4B70               	infsnz	disk_readp@length& (0+255),f,b
 11927  0014A0  2B71               	incf	(disk_readp@length+1)& (0+255),f,b
 11928  0014A2                     
 11929                           ; BSR set to: 0
 11930                           
 11931                           ; BSR set to: 0
 11932  0014A2  0766               	decf	disk_readp@offset& (0+255),f,b
 11933  0014A4  A0D8               	btfss	status,0,c
 11934  0014A6  0767               	decf	(disk_readp@offset+1)& (0+255),f,b
 11935  0014A8  2966               	incf	disk_readp@offset& (0+255),w,b
 11936  0014AA  E1EF               	bnz	l6298
 11937  0014AC  2967               	incf	(disk_readp@offset+1)& (0+255),w,b
 11938  0014AE  B4D8               	btfsc	status,2,c
 11939  0014B0  D019               	goto	l781
 11940  0014B2  D7EB               	goto	l779
 11941  0014B4                     l6304:
 11942                           
 11943                           ; BSR set to: 0
 11944                           ;diskio.c: 240: {
 11945                           ;diskio.c: 241: *rd = response();
 11946  0014B4  EC4C  F01A         	call	_response	;wreg free
 11947  0014B8  C060  FFD9         	movff	disk_readp@rd,fsr2l
 11948  0014BC  C061  FFDA         	movff	disk_readp@rd+1,fsr2h
 11949  0014C0  6EDF               	movwf	indf2,c
 11950                           
 11951                           ;diskio.c: 242: arr[length] = *rd;
 11952  0014C2  C060  FFD9         	movff	disk_readp@rd,fsr2l
 11953  0014C6  C061  FFDA         	movff	disk_readp@rd+1,fsr2h
 11954  0014CA  0E2D               	movlw	low disk_readp@arr
 11955  0014CC  0100               	movlb	0	; () banked
 11956  0014CE  2570               	addwf	disk_readp@length& (0+255),w,b
 11957  0014D0  6EE1               	movwf	fsr1l,c
 11958  0014D2  0E02               	movlw	high disk_readp@arr
 11959  0014D4  2171               	addwfc	(disk_readp@length+1)& (0+255),w,b
 11960  0014D6  6EE2               	movwf	fsr1h,c
 11961  0014D8  CFDF FFE7          	movff	indf2,indf1
 11962                           
 11963                           ; BSR set to: 0
 11964                           ;diskio.c: 243: rd++;
 11965  0014DC  4B60               	infsnz	disk_readp@rd& (0+255),f,b
 11966  0014DE  2B61               	incf	(disk_readp@rd+1)& (0+255),f,b
 11967                           
 11968                           ; BSR set to: 0
 11969                           ;diskio.c: 244: length++;
 11970  0014E0  4B70               	infsnz	disk_readp@length& (0+255),f,b
 11971  0014E2  2B71               	incf	(disk_readp@length+1)& (0+255),f,b
 11972  0014E4                     l781:
 11973                           
 11974                           ; BSR set to: 0
 11975                           
 11976                           ; BSR set to: 0
 11977  0014E4  0768               	decf	disk_readp@count& (0+255),f,b
 11978  0014E6  A0D8               	btfss	status,0,c
 11979  0014E8  0769               	decf	(disk_readp@count+1)& (0+255),f,b
 11980  0014EA  2968               	incf	disk_readp@count& (0+255),w,b
 11981  0014EC  E1E3               	bnz	l6304
 11982  0014EE  2969               	incf	(disk_readp@count+1)& (0+255),w,b
 11983  0014F0  B4D8               	btfsc	status,2,c
 11984  0014F2  D00D               	goto	l784
 11985  0014F4  D7DF               	goto	l782
 11986  0014F6                     
 11987                           ; BSR set to: 0
 11988                           ;diskio.c: 247: {
 11989                           ;diskio.c: 248: arr[length] = response();
 11990                           
 11991                           ; BSR set to: 0
 11992  0014F6  0E2D               	movlw	low disk_readp@arr
 11993  0014F8  2570               	addwf	disk_readp@length& (0+255),w,b
 11994  0014FA  6ED9               	movwf	fsr2l,c
 11995  0014FC  0E02               	movlw	high disk_readp@arr
 11996  0014FE  2171               	addwfc	(disk_readp@length+1)& (0+255),w,b
 11997  001500  6EDA               	movwf	fsr2h,c
 11998  001502  EC4C  F01A         	call	_response	;wreg free
 11999  001506  6EDF               	movwf	indf2,c
 12000                           
 12001                           ;diskio.c: 249: length++;
 12002  001508  0100               	movlb	0	; () banked
 12003  00150A  4B70               	infsnz	disk_readp@length& (0+255),f,b
 12004  00150C  2B71               	incf	(disk_readp@length+1)& (0+255),f,b
 12005  00150E                     l784:
 12006                           
 12007                           ; BSR set to: 0
 12008                           
 12009                           ; BSR set to: 0
 12010  00150E  BF71               	btfsc	(disk_readp@length+1)& (0+255),7,b
 12011  001510  D7F2               	goto	l785
 12012  001512  0E02               	movlw	2
 12013  001514  5D71               	subwf	(disk_readp@length+1)& (0+255),w,b
 12014  001516  A0D8               	btfss	status,0,c
 12015  001518  D7EE               	goto	l785
 12016  00151A                     u6820:
 12017                           
 12018                           ; BSR set to: 0
 12019                           
 12020                           ; BSR set to: 0
 12021                           
 12022                           ; BSR set to: 0
 12023  00151A  BF71               	btfsc	(disk_readp@length+1)& (0+255),7,b
 12024  00151C  D7C2               	goto	l778
 12025  00151E  0E02               	movlw	2
 12026  001520  5D71               	subwf	(disk_readp@length+1)& (0+255),w,b
 12027  001522  A0D8               	btfss	status,0,c
 12028  001524  D7BE               	goto	l778
 12029                           
 12030                           ; BSR set to: 0
 12031                           ;diskio.c: 250: }
 12032                           ;diskio.c: 251: }
 12033                           ;diskio.c: 252: _delay((unsigned long)((1000)*(48000000/4000.0)));
 12034                           
 12035                           ; BSR set to: 0
 12036  001526  0E3D               	movlw	61
 12037  001528  6E27               	movwf	(??_disk_readp+1)& (0+255),c
 12038  00152A  0EE1               	movlw	225
 12039  00152C  6E26               	movwf	??_disk_readp& (0+255),c
 12040  00152E  0E40               	movlw	64
 12041  001530                     u9357:
 12042  001530  2EE8               	decfsz	wreg,f,c
 12043  001532  D7FE               	bra	u9357
 12044  001534  2E26               	decfsz	??_disk_readp& (0+255),f,c
 12045  001536  D7FC               	bra	u9357
 12046  001538  2E27               	decfsz	(??_disk_readp+1)& (0+255),f,c
 12047  00153A  D7FA               	bra	u9357
 12048                           
 12049                           ;diskio.c: 258: command(0X4C,0X00000000,0X00);
 12050  00153C  0E00               	movlw	0
 12051  00153E  6E1E               	movwf	command@arg,c
 12052  001540  0E00               	movlw	0
 12053  001542  6E1F               	movwf	command@arg+1,c
 12054  001544  0E00               	movlw	0
 12055  001546  6E20               	movwf	command@arg+2,c
 12056  001548  0E00               	movlw	0
 12057  00154A  6E21               	movwf	command@arg+3,c
 12058  00154C  0E00               	movlw	0
 12059  00154E  6E22               	movwf	command@CRC,c
 12060  001550  0E4C               	movlw	76
 12061  001552  EC36  F018         	call	_command
 12062                           
 12063                           ;diskio.c: 259: proceed();
 12064  001556  EC59  F01A         	call	_proceed	;wreg free
 12065  00155A                     
 12066                           ;diskio.c: 261: buff = response();
 12067  00155A  EC4C  F01A         	call	_response	;wreg free
 12068  00155E  0100               	movlb	0	; () banked
 12069  001560  6F6F               	movwf	disk_readp@buff& (0+255),b
 12070                           
 12071                           ; BSR set to: 0
 12072                           ;diskio.c: 262: }while(buff!=0xFF);
 12073  001562  296F               	incf	disk_readp@buff& (0+255),w,b
 12074  001564  A4D8               	btfss	status,2,c
 12075  001566  D7F9               	goto	l788
 12076                           
 12077                           ; BSR set to: 0
 12078                           ;diskio.c: 264: length = 0;
 12079                           
 12080                           ; BSR set to: 0
 12081  001568  0E00               	movlw	0
 12082  00156A  6F71               	movwf	(disk_readp@length+1)& (0+255),b
 12083  00156C  0E00               	movlw	0
 12084  00156E  6F70               	movwf	disk_readp@length& (0+255),b
 12085                           
 12086                           ; BSR set to: 0
 12087                           ;diskio.c: 265: if(flag == 1){
 12088  001570  0437               	decf	_flag,w,c
 12089  001572  1038               	iorwf	_flag+1,w,c
 12090  001574  B4D8               	btfsc	status,2,c
 12091  001576  D003               	goto	l791
 12092  001578  D00C               	goto	l790
 12093  00157A                     
 12094                           ; BSR set to: 0
 12095                           ;diskio.c: 267: {
 12096                           ;diskio.c: 269: length++;
 12097                           
 12098                           ; BSR set to: 0
 12099  00157A  4B70               	infsnz	disk_readp@length& (0+255),f,b
 12100  00157C  2B71               	incf	(disk_readp@length+1)& (0+255),f,b
 12101  00157E                     l791:
 12102                           
 12103                           ; BSR set to: 0
 12104                           
 12105                           ; BSR set to: 0
 12106  00157E  0E2D               	movlw	low disk_readp@arr
 12107  001580  2570               	addwf	disk_readp@length& (0+255),w,b
 12108  001582  6ED9               	movwf	fsr2l,c
 12109  001584  0E02               	movlw	high disk_readp@arr
 12110  001586  2171               	addwfc	(disk_readp@length+1)& (0+255),w,b
 12111  001588  6EDA               	movwf	fsr2h,c
 12112  00158A  50DF               	movf	indf2,w,c
 12113  00158C  B4D8               	btfsc	status,2,c
 12114  00158E  D00C               	goto	l794
 12115  001590  D7F4               	goto	l792
 12116  001592                     l790:
 12117                           
 12118                           ; BSR set to: 0
 12119                           ;diskio.c: 272: else
 12120                           ;diskio.c: 273: {
 12121                           ;diskio.c: 274: posicao_cursor_lcd(2,0);
 12122                           
 12123                           ; BSR set to: 0
 12124  001592  0E00               	movlw	0
 12125  001594  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 12126  001596  0E02               	movlw	2
 12127  001598  EC64  F017         	call	_posicao_cursor_lcd
 12128                           
 12129                           ;diskio.c: 275: escreve_frase_ram_lcd("..");
 12130  00159C  0E78               	movlw	low STR_20
 12131  00159E  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 12132  0015A0  0E62               	movlw	high STR_20
 12133  0015A2  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 12134  0015A4  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
 12135  0015A8                     l794:
 12136                           
 12137                           ;diskio.c: 276: }
 12138                           ;diskio.c: 277: _delay((unsigned long)((2000)*(48000000/4000.0)));
 12139  0015A8  0E7A               	movlw	122
 12140  0015AA  6E27               	movwf	(??_disk_readp+1)& (0+255),c
 12141  0015AC  0EC1               	movlw	193
 12142  0015AE  6E26               	movwf	??_disk_readp& (0+255),c
 12143  0015B0  0E82               	movlw	130
 12144  0015B2                     u9367:
 12145  0015B2  2EE8               	decfsz	wreg,f,c
 12146  0015B4  D7FE               	bra	u9367
 12147  0015B6  2E26               	decfsz	??_disk_readp& (0+255),f,c
 12148  0015B8  D7FC               	bra	u9367
 12149  0015BA  2E27               	decfsz	(??_disk_readp+1)& (0+255),f,c
 12150  0015BC  D7FA               	bra	u9367
 12151                           
 12152                           ;diskio.c: 279: return RES_OK;
 12153  0015BE  0E00               	movlw	0
 12154  0015C0  0012               	return	
 12155  0015C2                     __end_of_disk_readp:
 12156                           	opt stack 0
 12157                           tosu	equ	0xFFF
 12158                           tosh	equ	0xFFE
 12159                           tosl	equ	0xFFD
 12160                           pclath	equ	0xFFA
 12161                           tblptru	equ	0xFF8
 12162                           tblptrh	equ	0xFF7
 12163                           tblptrl	equ	0xFF6
 12164                           tablat	equ	0xFF5
 12165                           prodh	equ	0xFF4
 12166                           prodl	equ	0xFF3
 12167                           intcon	equ	0xFF2
 12168                           intcon2	equ	0xFF1
 12169                           intcon3	equ	0xFF0
 12170                           postinc0	equ	0xFEE
 12171                           wreg	equ	0xFE8
 12172                           indf1	equ	0xFE7
 12173                           postinc1	equ	0xFE6
 12174                           postdec1	equ	0xFE5
 12175                           fsr1h	equ	0xFE2
 12176                           fsr1l	equ	0xFE1
 12177                           indf2	equ	0xFDF
 12178                           postinc2	equ	0xFDE
 12179                           postdec2	equ	0xFDD
 12180                           plusw2	equ	0xFDB
 12181                           fsr2h	equ	0xFDA
 12182                           fsr2l	equ	0xFD9
 12183                           status	equ	0xFD8
 12184                           
 12185 ;; *************** function _response *****************
 12186 ;; Defined at:
 12187 ;;		line 319 in file "bibliotecas/SDCard.c"
 12188 ;; Parameters:    Size  Location     Type
 12189 ;;		None
 12190 ;; Auto vars:     Size  Location     Type
 12191 ;;  buff            1   28[COMRAM] unsigned char 
 12192 ;; Return value:  Size  Location     Type
 12193 ;;                  1    wreg      unsigned char 
 12194 ;; Registers used:
 12195 ;;		wreg, status,2, cstack
 12196 ;; Tracked objects:
 12197 ;;		On entry : 0/0
 12198 ;;		On exit  : 0/0
 12199 ;;		Unchanged: 0/0
 12200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12201 ;;      Params:         0       0       0       0       0       0       0       0       0
 12202 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12203 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12204 ;;      Totals:         1       0       0       0       0       0       0       0       0
 12205 ;;Total ram usage:        1 bytes
 12206 ;; Hardware stack levels used:    1
 12207 ;; Hardware stack levels required when called:    3
 12208 ;; This function calls:
 12209 ;;		_recebe_dado_SPI
 12210 ;; This function is called by:
 12211 ;;		_disk_initialize
 12212 ;;		_disk_readp
 12213 ;;		_disk_writep
 12214 ;; This function uses a non-reentrant model
 12215 ;;
 12216                           
 12217                           	psect	text45
 12218  003498                     __ptext45:
 12219                           	opt stack 0
 12220  003498                     _response:
 12221                           	opt stack 22
 12222                           
 12223                           ;SDCard.c: 322: unsigned char buff;
 12224                           ;SDCard.c: 323: LATBbits.LATB4 = 1;
 12225                           
 12226                           ;incstack = 0
 12227  003498  888A               	bsf	3978,4,c	;volatile
 12228                           
 12229                           ;SDCard.c: 324: buff= recebe_dado_SPI();
 12230  00349A  EC87  F019         	call	_recebe_dado_SPI	;wreg free
 12231  00349E  6E1D               	movwf	response@buff,c
 12232                           
 12233                           ;SDCard.c: 325: LATBbits.LATB4 = 0;
 12234  0034A0  988A               	bcf	3978,4,c	;volatile
 12235                           
 12236                           ;SDCard.c: 326: return buff;
 12237  0034A2  501D               	movf	response@buff,w,c
 12238  0034A4  0012               	return	
 12239  0034A6                     __end_of_response:
 12240                           	opt stack 0
 12241                           tosu	equ	0xFFF
 12242                           tosh	equ	0xFFE
 12243                           tosl	equ	0xFFD
 12244                           pclath	equ	0xFFA
 12245                           tblptru	equ	0xFF8
 12246                           tblptrh	equ	0xFF7
 12247                           tblptrl	equ	0xFF6
 12248                           tablat	equ	0xFF5
 12249                           prodh	equ	0xFF4
 12250                           prodl	equ	0xFF3
 12251                           intcon	equ	0xFF2
 12252                           intcon2	equ	0xFF1
 12253                           intcon3	equ	0xFF0
 12254                           postinc0	equ	0xFEE
 12255                           wreg	equ	0xFE8
 12256                           indf1	equ	0xFE7
 12257                           postinc1	equ	0xFE6
 12258                           postdec1	equ	0xFE5
 12259                           fsr1h	equ	0xFE2
 12260                           fsr1l	equ	0xFE1
 12261                           indf2	equ	0xFDF
 12262                           postinc2	equ	0xFDE
 12263                           postdec2	equ	0xFDD
 12264                           plusw2	equ	0xFDB
 12265                           fsr2h	equ	0xFDA
 12266                           fsr2l	equ	0xFD9
 12267                           status	equ	0xFD8
 12268                           
 12269 ;; *************** function _recebe_dado_SPI *****************
 12270 ;; Defined at:
 12271 ;;		line 107 in file "bibliotecas/SPI.c"
 12272 ;; Parameters:    Size  Location     Type
 12273 ;;		None
 12274 ;; Auto vars:     Size  Location     Type
 12275 ;;  temp_var        1   27[COMRAM] unsigned char 
 12276 ;; Return value:  Size  Location     Type
 12277 ;;                  1    wreg      unsigned char 
 12278 ;; Registers used:
 12279 ;;		wreg, status,2
 12280 ;; Tracked objects:
 12281 ;;		On entry : 0/0
 12282 ;;		On exit  : 0/0
 12283 ;;		Unchanged: 0/0
 12284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12285 ;;      Params:         0       0       0       0       0       0       0       0       0
 12286 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12287 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12288 ;;      Totals:         3       0       0       0       0       0       0       0       0
 12289 ;;Total ram usage:        3 bytes
 12290 ;; Hardware stack levels used:    1
 12291 ;; Hardware stack levels required when called:    2
 12292 ;; This function calls:
 12293 ;;		Nothing
 12294 ;; This function is called by:
 12295 ;;		_response
 12296 ;; This function uses a non-reentrant model
 12297 ;;
 12298                           
 12299                           	psect	text46
 12300  00330E                     __ptext46:
 12301                           	opt stack 0
 12302  00330E                     _recebe_dado_SPI:
 12303                           	opt stack 22
 12304                           
 12305                           ;SPI.c: 109: PIR1bits.SSPIF = 0;
 12306                           
 12307                           ;incstack = 0
 12308  00330E  969E               	bcf	3998,3,c	;volatile
 12309                           
 12310                           ;SPI.c: 110: unsigned char temp_var;
 12311                           ;SPI.c: 111: temp_var = SSPBUF;
 12312  003310  CFC9 F01C          	movff	4041,recebe_dado_SPI@temp_var	;volatile
 12313                           
 12314                           ;SPI.c: 112: SSPBUF = 0x00;
 12315  003314  0E00               	movlw	0
 12316  003316  6EC9               	movwf	4041,c	;volatile
 12317                           
 12318                           ;SPI.c: 113: _delay((unsigned long)((500)*(48000000/4000.0)));
 12319  003318  0E1F               	movlw	31
 12320  00331A  6E1B               	movwf	(??_recebe_dado_SPI+1)& (0+255),c
 12321  00331C  0E71               	movlw	113
 12322  00331E  6E1A               	movwf	??_recebe_dado_SPI& (0+255),c
 12323  003320  0E1E               	movlw	30
 12324  003322                     u9377:
 12325  003322  2EE8               	decfsz	wreg,f,c
 12326  003324  D7FE               	bra	u9377
 12327  003326  2E1A               	decfsz	??_recebe_dado_SPI& (0+255),f,c
 12328  003328  D7FC               	bra	u9377
 12329  00332A  2E1B               	decfsz	(??_recebe_dado_SPI+1)& (0+255),f,c
 12330  00332C  D7FA               	bra	u9377
 12331  00332E  D000               	nop2	
 12332  003330  A69E               	btfss	3998,3,c	;volatile
 12333  003332  D7FE               	goto	l99
 12334                           
 12335                           ;SPI.c: 115: return (SSPBUF);
 12336  003334  50C9               	movf	4041,w,c	;volatile
 12337  003336  0012               	return	
 12338  003338                     __end_of_recebe_dado_SPI:
 12339                           	opt stack 0
 12340                           tosu	equ	0xFFF
 12341                           tosh	equ	0xFFE
 12342                           tosl	equ	0xFFD
 12343                           pclath	equ	0xFFA
 12344                           tblptru	equ	0xFF8
 12345                           tblptrh	equ	0xFF7
 12346                           tblptrl	equ	0xFF6
 12347                           tablat	equ	0xFF5
 12348                           prodh	equ	0xFF4
 12349                           prodl	equ	0xFF3
 12350                           intcon	equ	0xFF2
 12351                           intcon2	equ	0xFF1
 12352                           intcon3	equ	0xFF0
 12353                           postinc0	equ	0xFEE
 12354                           wreg	equ	0xFE8
 12355                           indf1	equ	0xFE7
 12356                           postinc1	equ	0xFE6
 12357                           postdec1	equ	0xFE5
 12358                           fsr1h	equ	0xFE2
 12359                           fsr1l	equ	0xFE1
 12360                           indf2	equ	0xFDF
 12361                           postinc2	equ	0xFDE
 12362                           postdec2	equ	0xFDD
 12363                           plusw2	equ	0xFDB
 12364                           fsr2h	equ	0xFDA
 12365                           fsr2l	equ	0xFD9
 12366                           status	equ	0xFD8
 12367                           
 12368 ;; *************** function _proceed *****************
 12369 ;; Defined at:
 12370 ;;		line 342 in file "bibliotecas/SDCard.c"
 12371 ;; Parameters:    Size  Location     Type
 12372 ;;		None
 12373 ;; Auto vars:     Size  Location     Type
 12374 ;;		None
 12375 ;; Return value:  Size  Location     Type
 12376 ;;                  1    wreg      void 
 12377 ;; Registers used:
 12378 ;;		wreg, status,2, cstack
 12379 ;; Tracked objects:
 12380 ;;		On entry : 0/0
 12381 ;;		On exit  : 0/0
 12382 ;;		Unchanged: 0/0
 12383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12384 ;;      Params:         0       0       0       0       0       0       0       0       0
 12385 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12386 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12387 ;;      Totals:         0       0       0       0       0       0       0       0       0
 12388 ;;Total ram usage:        0 bytes
 12389 ;; Hardware stack levels used:    1
 12390 ;; Hardware stack levels required when called:    3
 12391 ;; This function calls:
 12392 ;;		_WriteSPI_
 12393 ;; This function is called by:
 12394 ;;		_SDCard
 12395 ;;		_reset
 12396 ;;		_disk_initialize
 12397 ;;		_disk_readp
 12398 ;;		_disk_writep
 12399 ;; This function uses a non-reentrant model
 12400 ;;
 12401                           
 12402                           	psect	text47
 12403  0034B2                     __ptext47:
 12404                           	opt stack 0
 12405  0034B2                     _proceed:
 12406                           	opt stack 25
 12407                           
 12408                           ;SDCard.c: 344: LATBbits.LATB4 = 1;
 12409                           
 12410                           ;incstack = 0
 12411  0034B2  888A               	bsf	3978,4,c	;volatile
 12412                           
 12413                           ;SDCard.c: 345: WriteSPI_(0xFF);
 12414  0034B4  0EFF               	movlw	255
 12415  0034B6  ECB8  F018         	call	_WriteSPI_
 12416                           
 12417                           ;SDCard.c: 346: LATBbits.LATB4 = 0;
 12418  0034BA  988A               	bcf	3978,4,c	;volatile
 12419  0034BC  0012               	return		;funcret
 12420  0034BE                     __end_of_proceed:
 12421                           	opt stack 0
 12422                           tosu	equ	0xFFF
 12423                           tosh	equ	0xFFE
 12424                           tosl	equ	0xFFD
 12425                           pclath	equ	0xFFA
 12426                           tblptru	equ	0xFF8
 12427                           tblptrh	equ	0xFF7
 12428                           tblptrl	equ	0xFF6
 12429                           tablat	equ	0xFF5
 12430                           prodh	equ	0xFF4
 12431                           prodl	equ	0xFF3
 12432                           intcon	equ	0xFF2
 12433                           intcon2	equ	0xFF1
 12434                           intcon3	equ	0xFF0
 12435                           postinc0	equ	0xFEE
 12436                           wreg	equ	0xFE8
 12437                           indf1	equ	0xFE7
 12438                           postinc1	equ	0xFE6
 12439                           postdec1	equ	0xFE5
 12440                           fsr1h	equ	0xFE2
 12441                           fsr1l	equ	0xFE1
 12442                           indf2	equ	0xFDF
 12443                           postinc2	equ	0xFDE
 12444                           postdec2	equ	0xFDD
 12445                           plusw2	equ	0xFDB
 12446                           fsr2h	equ	0xFDA
 12447                           fsr2l	equ	0xFD9
 12448                           status	equ	0xFD8
 12449                           
 12450 ;; *************** function _posicao_cursor_lcd *****************
 12451 ;; Defined at:
 12452 ;;		line 271 in file "bibliotecas/display/display_lcd.c"
 12453 ;; Parameters:    Size  Location     Type
 12454 ;;  linha           1    wreg     unsigned char 
 12455 ;;  coluna          1   28[COMRAM] unsigned char 
 12456 ;; Auto vars:     Size  Location     Type
 12457 ;;  linha           1   29[COMRAM] unsigned char 
 12458 ;;  endereco        1   30[COMRAM] unsigned char 
 12459 ;; Return value:  Size  Location     Type
 12460 ;;                  1    wreg      void 
 12461 ;; Registers used:
 12462 ;;		wreg, status,2, status,0, cstack
 12463 ;; Tracked objects:
 12464 ;;		On entry : 0/0
 12465 ;;		On exit  : 0/0
 12466 ;;		Unchanged: 0/0
 12467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12468 ;;      Params:         1       0       0       0       0       0       0       0       0
 12469 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12470 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12471 ;;      Totals:         3       0       0       0       0       0       0       0       0
 12472 ;;Total ram usage:        3 bytes
 12473 ;; Hardware stack levels used:    1
 12474 ;; Hardware stack levels required when called:    4
 12475 ;; This function calls:
 12476 ;;		_endereco_cursor_lcd
 12477 ;; This function is called by:
 12478 ;;		_inicializa_SPI
 12479 ;;		_mensagem_inicial
 12480 ;;		_SDCard
 12481 ;;		_disk_initialize
 12482 ;;		_disk_readp
 12483 ;;		_leitura_chave
 12484 ;; This function uses a non-reentrant model
 12485 ;;
 12486                           
 12487                           	psect	text48
 12488  002EC8                     __ptext48:
 12489                           	opt stack 0
 12490  002EC8                     _posicao_cursor_lcd:
 12491                           	opt stack 25
 12492                           
 12493                           ;incstack = 0
 12494                           ;posicao_cursor_lcd@linha stored from wreg
 12495  002EC8  6E1E               	movwf	posicao_cursor_lcd@linha,c
 12496                           
 12497                           ;display_lcd.c: 273: unsigned char endereco = 0x00;
 12498  002ECA  0E00               	movlw	0
 12499  002ECC  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 12500                           
 12501                           ;display_lcd.c: 275: if(coluna <= 0x10U)
 12502  002ECE  0E11               	movlw	17
 12503  002ED0  601D               	cpfslt	posicao_cursor_lcd@coluna,c
 12504  002ED2  D02F               	goto	l624
 12505  002ED4  D01E               	goto	l625
 12506  002ED6                     l626:
 12507                           
 12508                           ;display_lcd.c: 282: endereco = 0x00U + coluna;
 12509  002ED6  C01D  F01F         	movff	posicao_cursor_lcd@coluna,posicao_cursor_lcd@endereco
 12510                           
 12511                           ;display_lcd.c: 283: endereco_cursor_lcd(endereco);
 12512  002EDA  501F               	movf	posicao_cursor_lcd@endereco,w,c
 12513  002EDC  EC9C  F017         	call	_endereco_cursor_lcd
 12514                           
 12515                           ;display_lcd.c: 284: break;
 12516  002EE0  D026               	goto	l627
 12517  002EE2                     
 12518                           ;display_lcd.c: 287: endereco = 0x40U + coluna;
 12519  002EE2  501D               	movf	posicao_cursor_lcd@coluna,w,c
 12520  002EE4  0F40               	addlw	64
 12521  002EE6  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 12522                           
 12523                           ;display_lcd.c: 288: endereco_cursor_lcd(endereco);
 12524  002EE8  501F               	movf	posicao_cursor_lcd@endereco,w,c
 12525  002EEA  EC9C  F017         	call	_endereco_cursor_lcd
 12526                           
 12527                           ;display_lcd.c: 289: break;
 12528  002EEE  D01F               	goto	l627
 12529  002EF0                     
 12530                           ;display_lcd.c: 292: endereco = 0x14U + coluna;
 12531  002EF0  501D               	movf	posicao_cursor_lcd@coluna,w,c
 12532  002EF2  0F14               	addlw	20
 12533  002EF4  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 12534                           
 12535                           ;display_lcd.c: 293: endereco_cursor_lcd(endereco);
 12536  002EF6  501F               	movf	posicao_cursor_lcd@endereco,w,c
 12537  002EF8  EC9C  F017         	call	_endereco_cursor_lcd
 12538                           
 12539                           ;display_lcd.c: 294: break;
 12540  002EFC  D018               	goto	l627
 12541  002EFE                     
 12542                           ;display_lcd.c: 297: endereco = 0x54U + coluna;
 12543  002EFE  501D               	movf	posicao_cursor_lcd@coluna,w,c
 12544  002F00  0F54               	addlw	84
 12545  002F02  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 12546                           
 12547                           ;display_lcd.c: 298: endereco_cursor_lcd(endereco);
 12548  002F04  501F               	movf	posicao_cursor_lcd@endereco,w,c
 12549  002F06  EC9C  F017         	call	_endereco_cursor_lcd
 12550                           
 12551                           ;display_lcd.c: 299: break;
 12552  002F0A  D011               	goto	l627
 12553  002F0C                     
 12554                           ;display_lcd.c: 302: endereco = 0x00U;
 12555  002F0C  0E00               	movlw	0
 12556  002F0E  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 12557                           
 12558                           ;display_lcd.c: 304: }
 12559                           
 12560                           ;display_lcd.c: 303: break;
 12561  002F10  D00E               	goto	l627
 12562  002F12                     l625:
 12563  002F12  501E               	movf	posicao_cursor_lcd@linha,w,c
 12564                           
 12565                           ; Switch size 1, requested type "space"
 12566                           ; Number of cases is 4, Range of values is 1 to 4
 12567                           ; switch strategies available:
 12568                           ; Name         Instructions Cycles
 12569                           ; simple_byte           13     7 (average)
 12570                           ;	Chosen strategy is simple_byte
 12571  002F14  0A01               	xorlw	1	; case 1
 12572  002F16  B4D8               	btfsc	status,2,c
 12573  002F18  D7DE               	goto	l626
 12574  002F1A  0A03               	xorlw	3	; case 2
 12575  002F1C  B4D8               	btfsc	status,2,c
 12576  002F1E  D7E1               	goto	l628
 12577  002F20  0A01               	xorlw	1	; case 3
 12578  002F22  B4D8               	btfsc	status,2,c
 12579  002F24  D7E5               	goto	l629
 12580  002F26  0A07               	xorlw	7	; case 4
 12581  002F28  B4D8               	btfsc	status,2,c
 12582  002F2A  D7E9               	goto	l630
 12583  002F2C  D7EF               	goto	l631
 12584  002F2E                     l627:
 12585                           
 12586                           ;display_lcd.c: 306: coluna++;
 12587  002F2E  2A1D               	incf	posicao_cursor_lcd@coluna,f,c
 12588                           
 12589                           ;display_lcd.c: 307: }
 12590  002F30  0012               	return	
 12591  002F32                     l624:
 12592                           
 12593                           ;display_lcd.c: 308: else
 12594                           ;display_lcd.c: 309: {
 12595                           ;display_lcd.c: 310: endereco = 0x00U;
 12596  002F32  0E00               	movlw	0
 12597  002F34  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 12598  002F36  0012               	return	
 12599  002F38                     __end_of_posicao_cursor_lcd:
 12600                           	opt stack 0
 12601                           tosu	equ	0xFFF
 12602                           tosh	equ	0xFFE
 12603                           tosl	equ	0xFFD
 12604                           pclath	equ	0xFFA
 12605                           tblptru	equ	0xFF8
 12606                           tblptrh	equ	0xFF7
 12607                           tblptrl	equ	0xFF6
 12608                           tablat	equ	0xFF5
 12609                           prodh	equ	0xFF4
 12610                           prodl	equ	0xFF3
 12611                           intcon	equ	0xFF2
 12612                           intcon2	equ	0xFF1
 12613                           intcon3	equ	0xFF0
 12614                           postinc0	equ	0xFEE
 12615                           wreg	equ	0xFE8
 12616                           indf1	equ	0xFE7
 12617                           postinc1	equ	0xFE6
 12618                           postdec1	equ	0xFE5
 12619                           fsr1h	equ	0xFE2
 12620                           fsr1l	equ	0xFE1
 12621                           indf2	equ	0xFDF
 12622                           postinc2	equ	0xFDE
 12623                           postdec2	equ	0xFDD
 12624                           plusw2	equ	0xFDB
 12625                           fsr2h	equ	0xFDA
 12626                           fsr2l	equ	0xFD9
 12627                           status	equ	0xFD8
 12628                           
 12629 ;; *************** function _endereco_cursor_lcd *****************
 12630 ;; Defined at:
 12631 ;;		line 218 in file "bibliotecas/display/display_lcd.c"
 12632 ;; Parameters:    Size  Location     Type
 12633 ;;  endereco        1    wreg     unsigned char 
 12634 ;; Auto vars:     Size  Location     Type
 12635 ;;  endereco        1   27[COMRAM] unsigned char 
 12636 ;; Return value:  Size  Location     Type
 12637 ;;                  1    wreg      void 
 12638 ;; Registers used:
 12639 ;;		wreg, status,2, status,0, cstack
 12640 ;; Tracked objects:
 12641 ;;		On entry : 0/0
 12642 ;;		On exit  : 0/0
 12643 ;;		Unchanged: 0/0
 12644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12645 ;;      Params:         0       0       0       0       0       0       0       0       0
 12646 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12647 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12648 ;;      Totals:         1       0       0       0       0       0       0       0       0
 12649 ;;Total ram usage:        1 bytes
 12650 ;; Hardware stack levels used:    1
 12651 ;; Hardware stack levels required when called:    3
 12652 ;; This function calls:
 12653 ;;		_delay
 12654 ;; This function is called by:
 12655 ;;		_posicao_cursor_lcd
 12656 ;;		_cria_caractere_lcd
 12657 ;; This function uses a non-reentrant model
 12658 ;;
 12659                           
 12660                           	psect	text49
 12661  002F38                     __ptext49:
 12662                           	opt stack 0
 12663  002F38                     _endereco_cursor_lcd:
 12664                           	opt stack 25
 12665                           
 12666                           ;incstack = 0
 12667                           ;endereco_cursor_lcd@endereco stored from wreg
 12668  002F38  6E1C               	movwf	endereco_cursor_lcd@endereco,c
 12669                           
 12670                           ;display_lcd.c: 221: PORTDbits.RD2 = 0;
 12671  002F3A  9483               	bcf	3971,2,c	;volatile
 12672                           
 12673                           ;display_lcd.c: 222: PORTDbits.RD1 = 0;
 12674  002F3C  9283               	bcf	3971,1,c	;volatile
 12675                           
 12676                           ;display_lcd.c: 223: PORTDbits.RD0 = 0;
 12677  002F3E  9083               	bcf	3971,0,c	;volatile
 12678                           
 12679                           ;display_lcd.c: 226: PORTDbits.RD7 = 1;
 12680  002F40  8E83               	bsf	3971,7,c	;volatile
 12681                           
 12682                           ;display_lcd.c: 227: if(endereco&0b00010000){PORTDbits.RD4=1;}
 12683  002F42  A81C               	btfss	endereco_cursor_lcd@endereco,4,c
 12684  002F44  D002               	goto	l607
 12685  002F46  8883               	bsf	3971,4,c	;volatile
 12686  002F48  D001               	goto	l608
 12687  002F4A                     l607:
 12688                           
 12689                           ;display_lcd.c: 228: else {PORTDbits.RD4=0;}
 12690  002F4A  9883               	bcf	3971,4,c	;volatile
 12691  002F4C                     l608:
 12692                           
 12693                           ;display_lcd.c: 229: if(endereco&0b00100000){PORTDbits.RD5=1;}
 12694  002F4C  AA1C               	btfss	endereco_cursor_lcd@endereco,5,c
 12695  002F4E  D002               	goto	l609
 12696  002F50  8A83               	bsf	3971,5,c	;volatile
 12697  002F52  D001               	goto	l610
 12698  002F54                     l609:
 12699                           
 12700                           ;display_lcd.c: 230: else {PORTDbits.RD5=0;}
 12701  002F54  9A83               	bcf	3971,5,c	;volatile
 12702  002F56                     l610:
 12703                           
 12704                           ;display_lcd.c: 231: if(endereco&0b01000000){PORTDbits.RD6=1;}
 12705  002F56  AC1C               	btfss	endereco_cursor_lcd@endereco,6,c
 12706  002F58  D002               	goto	l611
 12707  002F5A  8C83               	bsf	3971,6,c	;volatile
 12708  002F5C  D001               	goto	l612
 12709  002F5E                     l611:
 12710                           
 12711                           ;display_lcd.c: 232: else {PORTDbits.RD6=0;}
 12712  002F5E  9C83               	bcf	3971,6,c	;volatile
 12713  002F60                     l612:
 12714                           
 12715                           ;display_lcd.c: 235: PORTDbits.RD0 = 1;
 12716  002F60  8083               	bsf	3971,0,c	;volatile
 12717                           
 12718                           ;display_lcd.c: 236: delay();
 12719  002F62  ECAE  F019         	call	_delay	;wreg free
 12720                           
 12721                           ;display_lcd.c: 237: PORTDbits.RD0 = 0;
 12722  002F66  9083               	bcf	3971,0,c	;volatile
 12723                           
 12724                           ;display_lcd.c: 238: delay();
 12725  002F68  ECAE  F019         	call	_delay	;wreg free
 12726                           
 12727                           ;display_lcd.c: 241: if(endereco&0b00000001){PORTDbits.RD4=1;}
 12728  002F6C  A01C               	btfss	endereco_cursor_lcd@endereco,0,c
 12729  002F6E  D002               	goto	l613
 12730  002F70  8883               	bsf	3971,4,c	;volatile
 12731  002F72  D001               	goto	l614
 12732  002F74                     l613:
 12733                           
 12734                           ;display_lcd.c: 242: else {PORTDbits.RD4=0;}
 12735  002F74  9883               	bcf	3971,4,c	;volatile
 12736  002F76                     l614:
 12737                           
 12738                           ;display_lcd.c: 243: if(endereco&0b00000010){PORTDbits.RD5=1;}
 12739  002F76  A21C               	btfss	endereco_cursor_lcd@endereco,1,c
 12740  002F78  D002               	goto	l615
 12741  002F7A  8A83               	bsf	3971,5,c	;volatile
 12742  002F7C  D001               	goto	l616
 12743  002F7E                     l615:
 12744                           
 12745                           ;display_lcd.c: 244: else {PORTDbits.RD5=0;}
 12746  002F7E  9A83               	bcf	3971,5,c	;volatile
 12747  002F80                     l616:
 12748                           
 12749                           ;display_lcd.c: 245: if(endereco&0b00000100){PORTDbits.RD6=1;}
 12750  002F80  A41C               	btfss	endereco_cursor_lcd@endereco,2,c
 12751  002F82  D002               	goto	l617
 12752  002F84  8C83               	bsf	3971,6,c	;volatile
 12753  002F86  D001               	goto	l618
 12754  002F88                     l617:
 12755                           
 12756                           ;display_lcd.c: 246: else {PORTDbits.RD6=0;}
 12757  002F88  9C83               	bcf	3971,6,c	;volatile
 12758  002F8A                     l618:
 12759                           
 12760                           ;display_lcd.c: 247: if(endereco&0b00001000){PORTDbits.RD7=1;}
 12761  002F8A  A61C               	btfss	endereco_cursor_lcd@endereco,3,c
 12762  002F8C  D002               	goto	l619
 12763  002F8E  8E83               	bsf	3971,7,c	;volatile
 12764  002F90  D001               	goto	l620
 12765  002F92                     l619:
 12766                           
 12767                           ;display_lcd.c: 248: else {PORTDbits.RD7=0;}
 12768  002F92  9E83               	bcf	3971,7,c	;volatile
 12769  002F94                     l620:
 12770                           
 12771                           ;display_lcd.c: 251: PORTDbits.RD0 = 1;
 12772  002F94  8083               	bsf	3971,0,c	;volatile
 12773                           
 12774                           ;display_lcd.c: 252: delay();
 12775  002F96  ECAE  F019         	call	_delay	;wreg free
 12776                           
 12777                           ;display_lcd.c: 253: PORTDbits.RD0 = 0;
 12778  002F9A  9083               	bcf	3971,0,c	;volatile
 12779                           
 12780                           ;display_lcd.c: 254: delay();
 12781  002F9C  ECAE  F019         	call	_delay	;wreg free
 12782  002FA0  0012               	return		;funcret
 12783  002FA2                     __end_of_endereco_cursor_lcd:
 12784                           	opt stack 0
 12785                           tosu	equ	0xFFF
 12786                           tosh	equ	0xFFE
 12787                           tosl	equ	0xFFD
 12788                           pclath	equ	0xFFA
 12789                           tblptru	equ	0xFF8
 12790                           tblptrh	equ	0xFF7
 12791                           tblptrl	equ	0xFF6
 12792                           tablat	equ	0xFF5
 12793                           prodh	equ	0xFF4
 12794                           prodl	equ	0xFF3
 12795                           intcon	equ	0xFF2
 12796                           intcon2	equ	0xFF1
 12797                           intcon3	equ	0xFF0
 12798                           postinc0	equ	0xFEE
 12799                           wreg	equ	0xFE8
 12800                           indf1	equ	0xFE7
 12801                           postinc1	equ	0xFE6
 12802                           postdec1	equ	0xFE5
 12803                           fsr1h	equ	0xFE2
 12804                           fsr1l	equ	0xFE1
 12805                           indf2	equ	0xFDF
 12806                           postinc2	equ	0xFDE
 12807                           postdec2	equ	0xFDD
 12808                           plusw2	equ	0xFDB
 12809                           fsr2h	equ	0xFDA
 12810                           fsr2l	equ	0xFD9
 12811                           status	equ	0xFD8
 12812                           
 12813 ;; *************** function _escreve_frase_ram_lcd *****************
 12814 ;; Defined at:
 12815 ;;		line 445 in file "bibliotecas/display/display_lcd.c"
 12816 ;; Parameters:    Size  Location     Type
 12817 ;;  buffer          2   28[COMRAM] PTR unsigned char 
 12818 ;;		 -> STR_20(3), STR_19(8), STR_18(14), STR_17(13), 
 12819 ;;		 -> STR_16(9), STR_15(14), escreve_inteiro_lcd@texto(7), STR_14(16), 
 12820 ;;		 -> STR_13(14), STR_12(14), STR_11(14), STR_10(14), 
 12821 ;;		 -> STR_9(13), STR_8(17), STR_5(17), STR_4(15), 
 12822 ;;		 -> STR_3(14), mensagem_inicial@msg_dois(17), mensagem_inicial@msg_linha_um(17), leitura_chave@pos_ignicao_on(17), 
 12823 ;;		 -> leitura_chave@pos_ignicao_crank(17), leitura_chave@pos_ignicao_off(17), STR_1(17), 
 12824 ;; Auto vars:     Size  Location     Type
 12825 ;;		None
 12826 ;; Return value:  Size  Location     Type
 12827 ;;                  1    wreg      void 
 12828 ;; Registers used:
 12829 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12830 ;; Tracked objects:
 12831 ;;		On entry : 0/0
 12832 ;;		On exit  : 0/0
 12833 ;;		Unchanged: 0/0
 12834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12835 ;;      Params:         2       0       0       0       0       0       0       0       0
 12836 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12837 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12838 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12839 ;;Total ram usage:        2 bytes
 12840 ;; Hardware stack levels used:    1
 12841 ;; Hardware stack levels required when called:    4
 12842 ;; This function calls:
 12843 ;;		_escreve_caractere_lcd
 12844 ;; This function is called by:
 12845 ;;		_inicializa_SPI
 12846 ;;		_mensagem_inicial
 12847 ;;		_SDCard
 12848 ;;		_disk_initialize
 12849 ;;		_disk_readp
 12850 ;;		_leitura_chave
 12851 ;;		_escreve_inteiro_lcd
 12852 ;; This function uses a non-reentrant model
 12853 ;;
 12854                           
 12855                           	psect	text50
 12856  00311E                     __ptext50:
 12857                           	opt stack 0
 12858  00311E                     _escreve_frase_ram_lcd:
 12859                           	opt stack 25
 12860                           
 12861                           ;display_lcd.c: 447: while(*buffer)
 12862                           
 12863                           ;incstack = 0
 12864  00311E  D014               	goto	l669
 12865  003120                     
 12866                           ;display_lcd.c: 448: {
 12867                           ;display_lcd.c: 449: escreve_caractere_lcd(*buffer);
 12868  003120  C01D  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 12869  003124  C01E  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 12870  003128  6AF8               	clrf	tblptru,c
 12871  00312A  0E07               	movlw	(high __ramtop+-1)
 12872  00312C  64F7               	cpfsgt	tblptrh,c
 12873  00312E  D003               	bra	u6667
 12874  003130  0008               	tblrd		*
 12875  003132  50F5               	movf	tablat,w,c
 12876  003134  D005               	bra	u6660
 12877  003136                     u6667:
 12878  003136  CFF6 FFE9          	movff	tblptrl,fsr0l
 12879  00313A  CFF7 FFEA          	movff	tblptrh,fsr0h
 12880  00313E  50EF               	movf	indf0,w,c
 12881  003140                     u6660:
 12882  003140  ECF3  F016         	call	_escreve_caractere_lcd
 12883                           
 12884                           ;display_lcd.c: 450: buffer++;
 12885  003144  4A1D               	infsnz	escreve_frase_ram_lcd@buffer,f,c
 12886  003146  2A1E               	incf	escreve_frase_ram_lcd@buffer+1,f,c
 12887  003148                     l669:
 12888  003148  C01D  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 12889  00314C  C01E  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 12890  003150  6AF8               	clrf	tblptru,c
 12891  003152  0E07               	movlw	(high __ramtop+-1)
 12892  003154  64F7               	cpfsgt	tblptrh,c
 12893  003156  D003               	bra	u6677
 12894  003158  0008               	tblrd		*
 12895  00315A  50F5               	movf	tablat,w,c
 12896  00315C  D005               	bra	u6670
 12897  00315E                     u6677:
 12898  00315E  CFF6 FFE9          	movff	tblptrl,fsr0l
 12899  003162  CFF7 FFEA          	movff	tblptrh,fsr0h
 12900  003166  50EF               	movf	indf0,w,c
 12901  003168                     u6670:
 12902  003168  0900               	iorlw	0
 12903  00316A  B4D8               	btfsc	status,2,c
 12904  00316C  0012               	return	
 12905  00316E  D7D8               	goto	l670
 12906  003170                     __end_of_escreve_frase_ram_lcd:
 12907                           	opt stack 0
 12908                           tosu	equ	0xFFF
 12909                           tosh	equ	0xFFE
 12910                           tosl	equ	0xFFD
 12911                           pclath	equ	0xFFA
 12912                           tblptru	equ	0xFF8
 12913                           tblptrh	equ	0xFF7
 12914                           tblptrl	equ	0xFF6
 12915                           tablat	equ	0xFF5
 12916                           prodh	equ	0xFF4
 12917                           prodl	equ	0xFF3
 12918                           intcon	equ	0xFF2
 12919                           intcon2	equ	0xFF1
 12920                           intcon3	equ	0xFF0
 12921                           indf0	equ	0xFEF
 12922                           postinc0	equ	0xFEE
 12923                           fsr0h	equ	0xFEA
 12924                           fsr0l	equ	0xFE9
 12925                           wreg	equ	0xFE8
 12926                           indf1	equ	0xFE7
 12927                           postinc1	equ	0xFE6
 12928                           postdec1	equ	0xFE5
 12929                           fsr1h	equ	0xFE2
 12930                           fsr1l	equ	0xFE1
 12931                           indf2	equ	0xFDF
 12932                           postinc2	equ	0xFDE
 12933                           postdec2	equ	0xFDD
 12934                           plusw2	equ	0xFDB
 12935                           fsr2h	equ	0xFDA
 12936                           fsr2l	equ	0xFD9
 12937                           status	equ	0xFD8
 12938                           
 12939 ;; *************** function _escreve_caractere_lcd *****************
 12940 ;; Defined at:
 12941 ;;		line 323 in file "bibliotecas/display/display_lcd.c"
 12942 ;; Parameters:    Size  Location     Type
 12943 ;;  data            1    wreg     unsigned char 
 12944 ;; Auto vars:     Size  Location     Type
 12945 ;;  data            1   27[COMRAM] unsigned char 
 12946 ;; Return value:  Size  Location     Type
 12947 ;;                  1    wreg      void 
 12948 ;; Registers used:
 12949 ;;		wreg, status,2, status,0, cstack
 12950 ;; Tracked objects:
 12951 ;;		On entry : 0/0
 12952 ;;		On exit  : 0/0
 12953 ;;		Unchanged: 0/0
 12954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12955 ;;      Params:         0       0       0       0       0       0       0       0       0
 12956 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12957 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12958 ;;      Totals:         1       0       0       0       0       0       0       0       0
 12959 ;;Total ram usage:        1 bytes
 12960 ;; Hardware stack levels used:    1
 12961 ;; Hardware stack levels required when called:    3
 12962 ;; This function calls:
 12963 ;;		_delay
 12964 ;; This function is called by:
 12965 ;;		_escreve_frase_ram_lcd
 12966 ;;		_escreve_float_lcd
 12967 ;;		_escreve_frase_lcd
 12968 ;;		_cria_caractere_lcd
 12969 ;; This function uses a non-reentrant model
 12970 ;;
 12971                           
 12972                           	psect	text51
 12973  002DE6                     __ptext51:
 12974                           	opt stack 0
 12975  002DE6                     _escreve_caractere_lcd:
 12976                           	opt stack 25
 12977                           
 12978                           ;incstack = 0
 12979                           ;escreve_caractere_lcd@data stored from wreg
 12980  002DE6  6E1C               	movwf	escreve_caractere_lcd@data,c
 12981                           
 12982                           ;display_lcd.c: 326: PORTDbits.RD2 = 0;
 12983  002DE8  9483               	bcf	3971,2,c	;volatile
 12984                           
 12985                           ;display_lcd.c: 327: PORTDbits.RD1 = 1;
 12986  002DEA  8283               	bsf	3971,1,c	;volatile
 12987                           
 12988                           ;display_lcd.c: 328: PORTDbits.RD0 = 0;
 12989  002DEC  9083               	bcf	3971,0,c	;volatile
 12990                           
 12991                           ;display_lcd.c: 331: if(data&0b00010000){PORTDbits.RD4=1;}
 12992  002DEE  A81C               	btfss	escreve_caractere_lcd@data,4,c
 12993  002DF0  D002               	goto	l636
 12994  002DF2  8883               	bsf	3971,4,c	;volatile
 12995  002DF4  D001               	goto	l637
 12996  002DF6                     l636:
 12997                           
 12998                           ;display_lcd.c: 332: else {PORTDbits.RD4=0;}
 12999  002DF6  9883               	bcf	3971,4,c	;volatile
 13000  002DF8                     l637:
 13001                           
 13002                           ;display_lcd.c: 333: if(data&0b00100000){PORTDbits.RD5=1;}
 13003  002DF8  AA1C               	btfss	escreve_caractere_lcd@data,5,c
 13004  002DFA  D002               	goto	l638
 13005  002DFC  8A83               	bsf	3971,5,c	;volatile
 13006  002DFE  D001               	goto	l639
 13007  002E00                     l638:
 13008                           
 13009                           ;display_lcd.c: 334: else {PORTDbits.RD5=0;}
 13010  002E00  9A83               	bcf	3971,5,c	;volatile
 13011  002E02                     l639:
 13012                           
 13013                           ;display_lcd.c: 335: if(data&0b01000000){PORTDbits.RD6=1;}
 13014  002E02  AC1C               	btfss	escreve_caractere_lcd@data,6,c
 13015  002E04  D002               	goto	l640
 13016  002E06  8C83               	bsf	3971,6,c	;volatile
 13017  002E08  D001               	goto	l641
 13018  002E0A                     l640:
 13019                           
 13020                           ;display_lcd.c: 336: else {PORTDbits.RD6=0;}
 13021  002E0A  9C83               	bcf	3971,6,c	;volatile
 13022  002E0C                     l641:
 13023                           
 13024                           ;display_lcd.c: 337: if(data&0b10000000){PORTDbits.RD7=1;}
 13025  002E0C  AE1C               	btfss	escreve_caractere_lcd@data,7,c
 13026  002E0E  D002               	goto	l642
 13027  002E10  8E83               	bsf	3971,7,c	;volatile
 13028  002E12  D001               	goto	l643
 13029  002E14                     l642:
 13030                           
 13031                           ;display_lcd.c: 338: else {PORTDbits.RD7=0;}
 13032  002E14  9E83               	bcf	3971,7,c	;volatile
 13033  002E16                     l643:
 13034                           
 13035                           ;display_lcd.c: 341: PORTDbits.RD0 = 1;
 13036  002E16  8083               	bsf	3971,0,c	;volatile
 13037                           
 13038                           ;display_lcd.c: 342: delay();
 13039  002E18  ECAE  F019         	call	_delay	;wreg free
 13040                           
 13041                           ;display_lcd.c: 343: PORTDbits.RD0 = 0;
 13042  002E1C  9083               	bcf	3971,0,c	;volatile
 13043                           
 13044                           ;display_lcd.c: 344: delay();
 13045  002E1E  ECAE  F019         	call	_delay	;wreg free
 13046                           
 13047                           ;display_lcd.c: 348: if(data&0b00000001){PORTDbits.RD4=1;}
 13048  002E22  A01C               	btfss	escreve_caractere_lcd@data,0,c
 13049  002E24  D002               	goto	l644
 13050  002E26  8883               	bsf	3971,4,c	;volatile
 13051  002E28  D001               	goto	l645
 13052  002E2A                     l644:
 13053                           
 13054                           ;display_lcd.c: 349: else {PORTDbits.RD4=0;}
 13055  002E2A  9883               	bcf	3971,4,c	;volatile
 13056  002E2C                     l645:
 13057                           
 13058                           ;display_lcd.c: 350: if(data&0b00000010){PORTDbits.RD5=1;}
 13059  002E2C  A21C               	btfss	escreve_caractere_lcd@data,1,c
 13060  002E2E  D002               	goto	l646
 13061  002E30  8A83               	bsf	3971,5,c	;volatile
 13062  002E32  D001               	goto	l647
 13063  002E34                     l646:
 13064                           
 13065                           ;display_lcd.c: 351: else {PORTDbits.RD5=0;}
 13066  002E34  9A83               	bcf	3971,5,c	;volatile
 13067  002E36                     l647:
 13068                           
 13069                           ;display_lcd.c: 352: if(data&0b00000100){PORTDbits.RD6=1;}
 13070  002E36  A41C               	btfss	escreve_caractere_lcd@data,2,c
 13071  002E38  D002               	goto	l648
 13072  002E3A  8C83               	bsf	3971,6,c	;volatile
 13073  002E3C  D001               	goto	l649
 13074  002E3E                     l648:
 13075                           
 13076                           ;display_lcd.c: 353: else {PORTDbits.RD6=0;}
 13077  002E3E  9C83               	bcf	3971,6,c	;volatile
 13078  002E40                     l649:
 13079                           
 13080                           ;display_lcd.c: 354: if(data&0b00001000){PORTDbits.RD7=1;}
 13081  002E40  A61C               	btfss	escreve_caractere_lcd@data,3,c
 13082  002E42  D002               	goto	l650
 13083  002E44  8E83               	bsf	3971,7,c	;volatile
 13084  002E46  D001               	goto	l651
 13085  002E48                     l650:
 13086                           
 13087                           ;display_lcd.c: 355: else {PORTDbits.RD7=0;}
 13088  002E48  9E83               	bcf	3971,7,c	;volatile
 13089  002E4A                     l651:
 13090                           
 13091                           ;display_lcd.c: 358: PORTDbits.RD0 = 1;
 13092  002E4A  8083               	bsf	3971,0,c	;volatile
 13093                           
 13094                           ;display_lcd.c: 359: delay();
 13095  002E4C  ECAE  F019         	call	_delay	;wreg free
 13096                           
 13097                           ;display_lcd.c: 360: PORTDbits.RD0 = 0;
 13098  002E50  9083               	bcf	3971,0,c	;volatile
 13099                           
 13100                           ;display_lcd.c: 361: delay();
 13101  002E52  ECAE  F019         	call	_delay	;wreg free
 13102  002E56  0012               	return		;funcret
 13103  002E58                     __end_of_escreve_caractere_lcd:
 13104                           	opt stack 0
 13105                           tosu	equ	0xFFF
 13106                           tosh	equ	0xFFE
 13107                           tosl	equ	0xFFD
 13108                           pclath	equ	0xFFA
 13109                           tblptru	equ	0xFF8
 13110                           tblptrh	equ	0xFF7
 13111                           tblptrl	equ	0xFF6
 13112                           tablat	equ	0xFF5
 13113                           prodh	equ	0xFF4
 13114                           prodl	equ	0xFF3
 13115                           intcon	equ	0xFF2
 13116                           intcon2	equ	0xFF1
 13117                           intcon3	equ	0xFF0
 13118                           indf0	equ	0xFEF
 13119                           postinc0	equ	0xFEE
 13120                           fsr0h	equ	0xFEA
 13121                           fsr0l	equ	0xFE9
 13122                           wreg	equ	0xFE8
 13123                           indf1	equ	0xFE7
 13124                           postinc1	equ	0xFE6
 13125                           postdec1	equ	0xFE5
 13126                           fsr1h	equ	0xFE2
 13127                           fsr1l	equ	0xFE1
 13128                           indf2	equ	0xFDF
 13129                           postinc2	equ	0xFDE
 13130                           postdec2	equ	0xFDD
 13131                           plusw2	equ	0xFDB
 13132                           fsr2h	equ	0xFDA
 13133                           fsr2l	equ	0xFD9
 13134                           status	equ	0xFD8
 13135                           
 13136 ;; *************** function _delay *****************
 13137 ;; Defined at:
 13138 ;;		line 45 in file "bibliotecas/display/display_lcd.c"
 13139 ;; Parameters:    Size  Location     Type
 13140 ;;		None
 13141 ;; Auto vars:     Size  Location     Type
 13142 ;;  contador_int    1   26[COMRAM] unsigned char 
 13143 ;;  contador_ext    1   25[COMRAM] unsigned char 
 13144 ;; Return value:  Size  Location     Type
 13145 ;;                  1    wreg      void 
 13146 ;; Registers used:
 13147 ;;		wreg, status,2, status,0
 13148 ;; Tracked objects:
 13149 ;;		On entry : 0/0
 13150 ;;		On exit  : 0/0
 13151 ;;		Unchanged: 0/0
 13152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13153 ;;      Params:         0       0       0       0       0       0       0       0       0
 13154 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13155 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13156 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13157 ;;Total ram usage:        2 bytes
 13158 ;; Hardware stack levels used:    1
 13159 ;; Hardware stack levels required when called:    2
 13160 ;; This function calls:
 13161 ;;		Nothing
 13162 ;; This function is called by:
 13163 ;;		_init_lcd
 13164 ;;		_escreve_cmd_lcd
 13165 ;;		_endereco_cursor_lcd
 13166 ;;		_escreve_caractere_lcd
 13167 ;; This function uses a non-reentrant model
 13168 ;;
 13169                           
 13170                           	psect	text52
 13171  00335C                     __ptext52:
 13172                           	opt stack 0
 13173  00335C                     _delay:
 13174                           	opt stack 25
 13175                           
 13176                           ;display_lcd.c: 47: unsigned char contador_ext, contador_int;
 13177                           ;display_lcd.c: 49: for(contador_ext = 0; contador_ext<100; contador_ext++)
 13178                           
 13179                           ;incstack = 0
 13180  00335C  0E00               	movlw	0
 13181  00335E  6E1A               	movwf	delay@contador_ext,c
 13182  003360                     l6008:
 13183  003360  0E63               	movlw	99
 13184  003362  641A               	cpfsgt	delay@contador_ext,c
 13185  003364  D001               	goto	l575
 13186  003366  0012               	return	
 13187  003368                     l575:
 13188                           
 13189                           ;display_lcd.c: 50: {
 13190                           ;display_lcd.c: 51: __nop();
 13191  003368  F000               	nop	
 13192                           
 13193                           ;display_lcd.c: 52: for(contador_int = 0; contador_int<50; contador_int++)
 13194  00336A  0E00               	movlw	0
 13195  00336C  6E1B               	movwf	delay@contador_int,c
 13196  00336E                     l6014:
 13197  00336E  0E31               	movlw	49
 13198  003370  641B               	cpfsgt	delay@contador_int,c
 13199  003372  D001               	goto	l577
 13200  003374  D003               	goto	u6430
 13201  003376                     l577:
 13202                           
 13203                           ;display_lcd.c: 53: {
 13204                           ;display_lcd.c: 54: __nop();
 13205  003376  F000               	nop	
 13206  003378  2A1B               	incf	delay@contador_int,f,c
 13207  00337A  D7F9               	goto	l6014
 13208  00337C                     u6430:
 13209  00337C  2A1A               	incf	delay@contador_ext,f,c
 13210  00337E  D7F0               	goto	l6008
 13211  003380                     __end_of_delay:
 13212                           	opt stack 0
 13213                           tosu	equ	0xFFF
 13214                           tosh	equ	0xFFE
 13215                           tosl	equ	0xFFD
 13216                           pclath	equ	0xFFA
 13217                           tblptru	equ	0xFF8
 13218                           tblptrh	equ	0xFF7
 13219                           tblptrl	equ	0xFF6
 13220                           tablat	equ	0xFF5
 13221                           prodh	equ	0xFF4
 13222                           prodl	equ	0xFF3
 13223                           intcon	equ	0xFF2
 13224                           intcon2	equ	0xFF1
 13225                           intcon3	equ	0xFF0
 13226                           indf0	equ	0xFEF
 13227                           postinc0	equ	0xFEE
 13228                           fsr0h	equ	0xFEA
 13229                           fsr0l	equ	0xFE9
 13230                           wreg	equ	0xFE8
 13231                           indf1	equ	0xFE7
 13232                           postinc1	equ	0xFE6
 13233                           postdec1	equ	0xFE5
 13234                           fsr1h	equ	0xFE2
 13235                           fsr1l	equ	0xFE1
 13236                           indf2	equ	0xFDF
 13237                           postinc2	equ	0xFDE
 13238                           postdec2	equ	0xFDD
 13239                           plusw2	equ	0xFDB
 13240                           fsr2h	equ	0xFDA
 13241                           fsr2l	equ	0xFD9
 13242                           status	equ	0xFD8
 13243                           
 13244 ;; *************** function _dummy_clocks *****************
 13245 ;; Defined at:
 13246 ;;		line 330 in file "bibliotecas/SDCard.c"
 13247 ;; Parameters:    Size  Location     Type
 13248 ;;  n               1    wreg     unsigned char 
 13249 ;; Auto vars:     Size  Location     Type
 13250 ;;  n               1   31[COMRAM] unsigned char 
 13251 ;;  i               2   32[COMRAM] unsigned int 
 13252 ;; Return value:  Size  Location     Type
 13253 ;;                  1    wreg      void 
 13254 ;; Registers used:
 13255 ;;		wreg, status,2, status,0, cstack
 13256 ;; Tracked objects:
 13257 ;;		On entry : 0/0
 13258 ;;		On exit  : 0/0
 13259 ;;		Unchanged: 0/0
 13260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13261 ;;      Params:         0       0       0       0       0       0       0       0       0
 13262 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13263 ;;      Temps:          2       0       0       0       0       0       0       0       0
 13264 ;;      Totals:         5       0       0       0       0       0       0       0       0
 13265 ;;Total ram usage:        5 bytes
 13266 ;; Hardware stack levels used:    1
 13267 ;; Hardware stack levels required when called:    3
 13268 ;; This function calls:
 13269 ;;		_WriteSPI_
 13270 ;; This function is called by:
 13271 ;;		_reset
 13272 ;;		_disk_initialize
 13273 ;;		_disk_readp
 13274 ;;		_disk_writep
 13275 ;; This function uses a non-reentrant model
 13276 ;;
 13277                           
 13278                           	psect	text53
 13279  0032B4                     __ptext53:
 13280                           	opt stack 0
 13281  0032B4                     _dummy_clocks:
 13282                           	opt stack 22
 13283                           
 13284                           ;incstack = 0
 13285                           ;dummy_clocks@n stored from wreg
 13286  0032B4  6E20               	movwf	dummy_clocks@n,c
 13287                           
 13288                           ;SDCard.c: 332: unsigned int i;
 13289                           ;SDCard.c: 333: for(i=0;i<n;i++)
 13290  0032B6  0E00               	movlw	0
 13291  0032B8  6E22               	movwf	dummy_clocks@i+1,c
 13292  0032BA  0E00               	movlw	0
 13293  0032BC  6E21               	movwf	dummy_clocks@i,c
 13294  0032BE  D007               	goto	l12
 13295  0032C0                     l13:
 13296                           
 13297                           ;SDCard.c: 334: {
 13298                           ;SDCard.c: 335: LATBbits.LATB4 = 0;
 13299  0032C0  988A               	bcf	3978,4,c	;volatile
 13300                           
 13301                           ;SDCard.c: 336: WriteSPI_(0XFF);
 13302  0032C2  0EFF               	movlw	255
 13303  0032C4  ECB8  F018         	call	_WriteSPI_
 13304                           
 13305                           ;SDCard.c: 337: LATBbits.LATB4 = 1;
 13306  0032C8  888A               	bsf	3978,4,c	;volatile
 13307  0032CA  4A21               	infsnz	dummy_clocks@i,f,c
 13308  0032CC  2A22               	incf	dummy_clocks@i+1,f,c
 13309  0032CE                     l12:
 13310  0032CE  5020               	movf	dummy_clocks@n,w,c
 13311  0032D0  6E1E               	movwf	??_dummy_clocks& (0+255),c
 13312  0032D2  6A1F               	clrf	(??_dummy_clocks+1)& (0+255),c
 13313  0032D4  501E               	movf	??_dummy_clocks,w,c
 13314  0032D6  5C21               	subwf	dummy_clocks@i,w,c
 13315  0032D8  501F               	movf	??_dummy_clocks+1,w,c
 13316  0032DA  5822               	subwfb	dummy_clocks@i+1,w,c
 13317  0032DC  B0D8               	btfsc	status,0,c
 13318  0032DE  0012               	return	
 13319  0032E0  D7EF               	goto	l13
 13320  0032E2                     __end_of_dummy_clocks:
 13321                           	opt stack 0
 13322                           tosu	equ	0xFFF
 13323                           tosh	equ	0xFFE
 13324                           tosl	equ	0xFFD
 13325                           pclath	equ	0xFFA
 13326                           tblptru	equ	0xFF8
 13327                           tblptrh	equ	0xFF7
 13328                           tblptrl	equ	0xFF6
 13329                           tablat	equ	0xFF5
 13330                           prodh	equ	0xFF4
 13331                           prodl	equ	0xFF3
 13332                           intcon	equ	0xFF2
 13333                           intcon2	equ	0xFF1
 13334                           intcon3	equ	0xFF0
 13335                           indf0	equ	0xFEF
 13336                           postinc0	equ	0xFEE
 13337                           fsr0h	equ	0xFEA
 13338                           fsr0l	equ	0xFE9
 13339                           wreg	equ	0xFE8
 13340                           indf1	equ	0xFE7
 13341                           postinc1	equ	0xFE6
 13342                           postdec1	equ	0xFE5
 13343                           fsr1h	equ	0xFE2
 13344                           fsr1l	equ	0xFE1
 13345                           indf2	equ	0xFDF
 13346                           postinc2	equ	0xFDE
 13347                           postdec2	equ	0xFDD
 13348                           plusw2	equ	0xFDB
 13349                           fsr2h	equ	0xFDA
 13350                           fsr2l	equ	0xFD9
 13351                           status	equ	0xFD8
 13352                           
 13353 ;; *************** function _command *****************
 13354 ;; Defined at:
 13355 ;;		line 351 in file "bibliotecas/SDCard.c"
 13356 ;; Parameters:    Size  Location     Type
 13357 ;;  CMD             1    wreg     unsigned char 
 13358 ;;  arg             4   29[COMRAM] unsigned long 
 13359 ;;  CRC             1   33[COMRAM] unsigned char 
 13360 ;; Auto vars:     Size  Location     Type
 13361 ;;  CMD             1   35[COMRAM] unsigned char 
 13362 ;;  argument        1   36[COMRAM] unsigned char 
 13363 ;; Return value:  Size  Location     Type
 13364 ;;                  1    wreg      void 
 13365 ;; Registers used:
 13366 ;;		wreg, status,2, status,0, cstack
 13367 ;; Tracked objects:
 13368 ;;		On entry : 0/0
 13369 ;;		On exit  : 0/0
 13370 ;;		Unchanged: 0/0
 13371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13372 ;;      Params:         5       0       0       0       0       0       0       0       0
 13373 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13374 ;;      Temps:          1       0       0       0       0       0       0       0       0
 13375 ;;      Totals:         8       0       0       0       0       0       0       0       0
 13376 ;;Total ram usage:        8 bytes
 13377 ;; Hardware stack levels used:    1
 13378 ;; Hardware stack levels required when called:    3
 13379 ;; This function calls:
 13380 ;;		_WriteSPI_
 13381 ;; This function is called by:
 13382 ;;		_reset
 13383 ;;		_disk_initialize
 13384 ;;		_disk_readp
 13385 ;;		_disk_writep
 13386 ;; This function uses a non-reentrant model
 13387 ;;
 13388                           
 13389                           	psect	text54
 13390  00306C                     __ptext54:
 13391                           	opt stack 0
 13392  00306C                     _command:
 13393                           	opt stack 22
 13394                           
 13395                           ;incstack = 0
 13396                           ;command@CMD stored from wreg
 13397  00306C  6E24               	movwf	command@CMD,c
 13398                           
 13399                           ;SDCard.c: 353: LATBbits.LATB3 = ~LATBbits.LATB3;
 13400  00306E  A68A               	btfss	3978,3,c	;volatile
 13401  003070  D002               	goto	u6640
 13402  003072  0E01               	movlw	1
 13403  003074  D001               	goto	u6646
 13404  003076                     u6640:
 13405  003076  0E00               	movlw	0
 13406  003078                     u6646:
 13407  003078  0AFF               	xorlw	255
 13408  00307A  6E23               	movwf	??_command& (0+255),c
 13409  00307C  4623               	rlncf	??_command,f,c
 13410  00307E  4623               	rlncf	??_command,f,c
 13411  003080  4623               	rlncf	??_command,f,c
 13412  003082  508A               	movf	3978,w,c	;volatile
 13413  003084  1823               	xorwf	??_command,w,c
 13414  003086  0BF7               	andlw	-9
 13415  003088  1823               	xorwf	??_command,w,c
 13416  00308A  6E8A               	movwf	3978,c	;volatile
 13417                           
 13418                           ;SDCard.c: 354: unsigned char argument = arg>>24;
 13419  00308C  C021  F025         	movff	command@arg+3,command@argument
 13420                           
 13421                           ;SDCard.c: 355: WriteSPI_(0xFF);
 13422  003090  0EFF               	movlw	255
 13423  003092  ECB8  F018         	call	_WriteSPI_
 13424                           
 13425                           ;SDCard.c: 356: WriteSPI_(CMD);
 13426  003096  5024               	movf	command@CMD,w,c
 13427  003098  ECB8  F018         	call	_WriteSPI_
 13428                           
 13429                           ;SDCard.c: 357: WriteSPI_(argument);
 13430  00309C  5025               	movf	command@argument,w,c
 13431  00309E  ECB8  F018         	call	_WriteSPI_
 13432                           
 13433                           ;SDCard.c: 358: argument = arg>>16;
 13434  0030A2  C020  F025         	movff	command@arg+2,command@argument
 13435                           
 13436                           ;SDCard.c: 359: WriteSPI_(argument);
 13437  0030A6  5025               	movf	command@argument,w,c
 13438  0030A8  ECB8  F018         	call	_WriteSPI_
 13439                           
 13440                           ;SDCard.c: 360: argument = arg>>8;
 13441  0030AC  C01F  F025         	movff	command@arg+1,command@argument
 13442                           
 13443                           ;SDCard.c: 361: WriteSPI_(argument);
 13444  0030B0  5025               	movf	command@argument,w,c
 13445  0030B2  ECB8  F018         	call	_WriteSPI_
 13446                           
 13447                           ;SDCard.c: 362: argument = arg;
 13448  0030B6  C01E  F025         	movff	command@arg,command@argument
 13449                           
 13450                           ;SDCard.c: 363: WriteSPI_(argument);
 13451  0030BA  5025               	movf	command@argument,w,c
 13452  0030BC  ECB8  F018         	call	_WriteSPI_
 13453                           
 13454                           ;SDCard.c: 364: WriteSPI_(CRC);
 13455  0030C0  5022               	movf	command@CRC,w,c
 13456  0030C2  ECB8  F018         	call	_WriteSPI_
 13457  0030C6  0012               	return		;funcret
 13458  0030C8                     __end_of_command:
 13459                           	opt stack 0
 13460                           tosu	equ	0xFFF
 13461                           tosh	equ	0xFFE
 13462                           tosl	equ	0xFFD
 13463                           pclath	equ	0xFFA
 13464                           tblptru	equ	0xFF8
 13465                           tblptrh	equ	0xFF7
 13466                           tblptrl	equ	0xFF6
 13467                           tablat	equ	0xFF5
 13468                           prodh	equ	0xFF4
 13469                           prodl	equ	0xFF3
 13470                           intcon	equ	0xFF2
 13471                           intcon2	equ	0xFF1
 13472                           intcon3	equ	0xFF0
 13473                           indf0	equ	0xFEF
 13474                           postinc0	equ	0xFEE
 13475                           fsr0h	equ	0xFEA
 13476                           fsr0l	equ	0xFE9
 13477                           wreg	equ	0xFE8
 13478                           indf1	equ	0xFE7
 13479                           postinc1	equ	0xFE6
 13480                           postdec1	equ	0xFE5
 13481                           fsr1h	equ	0xFE2
 13482                           fsr1l	equ	0xFE1
 13483                           indf2	equ	0xFDF
 13484                           postinc2	equ	0xFDE
 13485                           postdec2	equ	0xFDD
 13486                           plusw2	equ	0xFDB
 13487                           fsr2h	equ	0xFDA
 13488                           fsr2l	equ	0xFD9
 13489                           status	equ	0xFD8
 13490                           
 13491 ;; *************** function _WriteSPI_ *****************
 13492 ;; Defined at:
 13493 ;;		line 125 in file "bibliotecas/SPI.c"
 13494 ;; Parameters:    Size  Location     Type
 13495 ;;  dado            1    wreg     unsigned char 
 13496 ;; Auto vars:     Size  Location     Type
 13497 ;;  dado            1   28[COMRAM] unsigned char 
 13498 ;;  TempVar         1   27[COMRAM] unsigned char 
 13499 ;; Return value:  Size  Location     Type
 13500 ;;                  1    wreg      unsigned char 
 13501 ;; Registers used:
 13502 ;;		wreg, status,2, cstack
 13503 ;; Tracked objects:
 13504 ;;		On entry : 0/0
 13505 ;;		On exit  : 0/0
 13506 ;;		Unchanged: 0/0
 13507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13508 ;;      Params:         0       0       0       0       0       0       0       0       0
 13509 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13510 ;;      Temps:          2       0       0       0       0       0       0       0       0
 13511 ;;      Totals:         4       0       0       0       0       0       0       0       0
 13512 ;;Total ram usage:        4 bytes
 13513 ;; Hardware stack levels used:    1
 13514 ;; Hardware stack levels required when called:    2
 13515 ;; This function calls:
 13516 ;;		Nothing
 13517 ;; This function is called by:
 13518 ;;		_dummy_clocks
 13519 ;;		_proceed
 13520 ;;		_command
 13521 ;;		_disk_writep
 13522 ;; This function uses a non-reentrant model
 13523 ;;
 13524                           
 13525                           	psect	text55
 13526  003170                     __ptext55:
 13527                           	opt stack 0
 13528  003170                     _WriteSPI_:
 13529                           	opt stack 25
 13530                           
 13531                           ;incstack = 0
 13532                           ;WriteSPI_@dado stored from wreg
 13533  003170  6E1D               	movwf	WriteSPI_@dado,c
 13534                           
 13535                           ;SPI.c: 127: unsigned char TempVar;
 13536                           ;SPI.c: 128: TempVar = SSPBUF;
 13537  003172  CFC9 F01C          	movff	4041,WriteSPI_@TempVar	;volatile
 13538                           
 13539                           ;SPI.c: 129: PIR1bits.SSPIF = 0;
 13540  003176  969E               	bcf	3998,3,c	;volatile
 13541                           
 13542                           ;SPI.c: 130: SSPCON1bits.WCOL = 0;
 13543  003178  9EC6               	bcf	4038,7,c	;volatile
 13544                           
 13545                           ;SPI.c: 131: SSPSTATbits.BF = 0;
 13546  00317A  90C7               	bcf	4039,0,c	;volatile
 13547                           
 13548                           ;SPI.c: 132: SSPBUF = 0x00;
 13549  00317C  0E00               	movlw	0
 13550  00317E  6EC9               	movwf	4041,c	;volatile
 13551                           
 13552                           ;SPI.c: 133: _delay((unsigned long)((50)*(48000000/4000.0)));
 13553  003180  0E04               	movlw	4
 13554  003182  6E1B               	movwf	(??_WriteSPI_+1)& (0+255),c
 13555  003184  0E0C               	movlw	12
 13556  003186  6E1A               	movwf	??_WriteSPI_& (0+255),c
 13557  003188  0E34               	movlw	52
 13558  00318A                     u9387:
 13559  00318A  2EE8               	decfsz	wreg,f,c
 13560  00318C  D7FE               	bra	u9387
 13561  00318E  2E1A               	decfsz	??_WriteSPI_& (0+255),f,c
 13562  003190  D7FC               	bra	u9387
 13563  003192  2E1B               	decfsz	(??_WriteSPI_+1)& (0+255),f,c
 13564  003194  D7FA               	bra	u9387
 13565                           
 13566                           ;SPI.c: 134: SSPBUF = dado;
 13567  003196  C01D  FFC9         	movff	WriteSPI_@dado,4041	;volatile
 13568                           
 13569                           ;SPI.c: 135: if (SSPCON1 & 0x80 )
 13570  00319A  BEC6               	btfsc	4038,7,c	;volatile
 13571  00319C  0012               	return	
 13572  00319E                     
 13573                           ;SPI.c: 139: else
 13574                           ;SPI.c: 140: {
 13575                           ;SPI.c: 141: while(!PIR1bits.SSPIF);
 13576  00319E  A69E               	btfss	3998,3,c	;volatile
 13577  0031A0  D7FE               	goto	l104
 13578                           
 13579                           ;SPI.c: 142: _delay((unsigned long)((1000)*(48000000/4000.0)));
 13580  0031A2  0E3D               	movlw	61
 13581  0031A4  6E1B               	movwf	(??_WriteSPI_+1)& (0+255),c
 13582  0031A6  0EE1               	movlw	225
 13583  0031A8  6E1A               	movwf	??_WriteSPI_& (0+255),c
 13584  0031AA  0E40               	movlw	64
 13585  0031AC                     u9397:
 13586  0031AC  2EE8               	decfsz	wreg,f,c
 13587  0031AE  D7FE               	bra	u9397
 13588  0031B0  2E1A               	decfsz	??_WriteSPI_& (0+255),f,c
 13589  0031B2  D7FC               	bra	u9397
 13590  0031B4  2E1B               	decfsz	(??_WriteSPI_+1)& (0+255),f,c
 13591  0031B6  D7FA               	bra	u9397
 13592                           
 13593                           ;SPI.c: 144: return (0);
 13594                           ;	Return value of _WriteSPI_ is never used
 13595  0031B8  0012               	return	
 13596  0031BA                     __end_of_WriteSPI_:
 13597                           	opt stack 0
 13598                           tosu	equ	0xFFF
 13599                           tosh	equ	0xFFE
 13600                           tosl	equ	0xFFD
 13601                           pclath	equ	0xFFA
 13602                           tblptru	equ	0xFF8
 13603                           tblptrh	equ	0xFF7
 13604                           tblptrl	equ	0xFF6
 13605                           tablat	equ	0xFF5
 13606                           prodh	equ	0xFF4
 13607                           prodl	equ	0xFF3
 13608                           intcon	equ	0xFF2
 13609                           intcon2	equ	0xFF1
 13610                           intcon3	equ	0xFF0
 13611                           indf0	equ	0xFEF
 13612                           postinc0	equ	0xFEE
 13613                           fsr0h	equ	0xFEA
 13614                           fsr0l	equ	0xFE9
 13615                           wreg	equ	0xFE8
 13616                           indf1	equ	0xFE7
 13617                           postinc1	equ	0xFE6
 13618                           postdec1	equ	0xFE5
 13619                           fsr1h	equ	0xFE2
 13620                           fsr1l	equ	0xFE1
 13621                           indf2	equ	0xFDF
 13622                           postinc2	equ	0xFDE
 13623                           postdec2	equ	0xFDD
 13624                           plusw2	equ	0xFDB
 13625                           fsr2h	equ	0xFDA
 13626                           fsr2l	equ	0xFD9
 13627                           status	equ	0xFD8
 13628                           
 13629 ;; *************** function ___lmul *****************
 13630 ;; Defined at:
 13631 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 13632 ;; Parameters:    Size  Location     Type
 13633 ;;  multiplier      4   25[COMRAM] unsigned long 
 13634 ;;  multiplicand    4   29[COMRAM] unsigned long 
 13635 ;; Auto vars:     Size  Location     Type
 13636 ;;  product         4   33[COMRAM] unsigned long 
 13637 ;; Return value:  Size  Location     Type
 13638 ;;                  4   25[COMRAM] unsigned long 
 13639 ;; Registers used:
 13640 ;;		wreg, status,2, status,0
 13641 ;; Tracked objects:
 13642 ;;		On entry : 0/0
 13643 ;;		On exit  : 0/0
 13644 ;;		Unchanged: 0/0
 13645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13646 ;;      Params:         8       0       0       0       0       0       0       0       0
 13647 ;;      Locals:         4       0       0       0       0       0       0       0       0
 13648 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13649 ;;      Totals:        12       0       0       0       0       0       0       0       0
 13650 ;;Total ram usage:       12 bytes
 13651 ;; Hardware stack levels used:    1
 13652 ;; Hardware stack levels required when called:    2
 13653 ;; This function calls:
 13654 ;;		Nothing
 13655 ;; This function is called by:
 13656 ;;		_clust2sect
 13657 ;;		_pf_mount
 13658 ;; This function uses a non-reentrant model
 13659 ;;
 13660                           
 13661                           	psect	text56
 13662  0030C8                     __ptext56:
 13663                           	opt stack 0
 13664  0030C8                     ___lmul:
 13665                           	opt stack 24
 13666                           
 13667                           ;incstack = 0
 13668  0030C8  0E00               	movlw	0
 13669  0030CA  6E22               	movwf	___lmul@product,c
 13670  0030CC  0E00               	movlw	0
 13671  0030CE  6E23               	movwf	___lmul@product+1,c
 13672  0030D0  0E00               	movlw	0
 13673  0030D2  6E24               	movwf	___lmul@product+2,c
 13674  0030D4  0E00               	movlw	0
 13675  0030D6  6E25               	movwf	___lmul@product+3,c
 13676  0030D8  A01A               	btfss	___lmul@multiplier,0,c
 13677  0030DA  D008               	goto	l1083
 13678  0030DC  501E               	movf	___lmul@multiplicand,w,c
 13679  0030DE  2622               	addwf	___lmul@product,f,c
 13680  0030E0  501F               	movf	___lmul@multiplicand+1,w,c
 13681  0030E2  2223               	addwfc	___lmul@product+1,f,c
 13682  0030E4  5020               	movf	___lmul@multiplicand+2,w,c
 13683  0030E6  2224               	addwfc	___lmul@product+2,f,c
 13684  0030E8  5021               	movf	___lmul@multiplicand+3,w,c
 13685  0030EA  2225               	addwfc	___lmul@product+3,f,c
 13686  0030EC                     l1083:
 13687  0030EC  90D8               	bcf	status,0,c
 13688  0030EE  361E               	rlcf	___lmul@multiplicand,f,c
 13689  0030F0  361F               	rlcf	___lmul@multiplicand+1,f,c
 13690  0030F2  3620               	rlcf	___lmul@multiplicand+2,f,c
 13691  0030F4  3621               	rlcf	___lmul@multiplicand+3,f,c
 13692  0030F6  90D8               	bcf	status,0,c
 13693  0030F8  321D               	rrcf	___lmul@multiplier+3,f,c
 13694  0030FA  321C               	rrcf	___lmul@multiplier+2,f,c
 13695  0030FC  321B               	rrcf	___lmul@multiplier+1,f,c
 13696  0030FE  321A               	rrcf	___lmul@multiplier,f,c
 13697  003100  501A               	movf	___lmul@multiplier,w,c
 13698  003102  101B               	iorwf	___lmul@multiplier+1,w,c
 13699  003104  101C               	iorwf	___lmul@multiplier+2,w,c
 13700  003106  101D               	iorwf	___lmul@multiplier+3,w,c
 13701  003108  A4D8               	btfss	status,2,c
 13702  00310A  D7E6               	goto	l1082
 13703  00310C  C022  F01A         	movff	___lmul@product,?___lmul
 13704  003110  C023  F01B         	movff	___lmul@product+1,?___lmul+1
 13705  003114  C024  F01C         	movff	___lmul@product+2,?___lmul+2
 13706  003118  C025  F01D         	movff	___lmul@product+3,?___lmul+3
 13707  00311C  0012               	return		;funcret
 13708  00311E                     __end_of___lmul:
 13709                           	opt stack 0
 13710                           tosu	equ	0xFFF
 13711                           tosh	equ	0xFFE
 13712                           tosl	equ	0xFFD
 13713                           pclath	equ	0xFFA
 13714                           tblptru	equ	0xFF8
 13715                           tblptrh	equ	0xFF7
 13716                           tblptrl	equ	0xFF6
 13717                           tablat	equ	0xFF5
 13718                           prodh	equ	0xFF4
 13719                           prodl	equ	0xFF3
 13720                           intcon	equ	0xFF2
 13721                           intcon2	equ	0xFF1
 13722                           intcon3	equ	0xFF0
 13723                           indf0	equ	0xFEF
 13724                           postinc0	equ	0xFEE
 13725                           fsr0h	equ	0xFEA
 13726                           fsr0l	equ	0xFE9
 13727                           wreg	equ	0xFE8
 13728                           indf1	equ	0xFE7
 13729                           postinc1	equ	0xFE6
 13730                           postdec1	equ	0xFE5
 13731                           fsr1h	equ	0xFE2
 13732                           fsr1l	equ	0xFE1
 13733                           indf2	equ	0xFDF
 13734                           postinc2	equ	0xFDE
 13735                           postdec2	equ	0xFDD
 13736                           plusw2	equ	0xFDB
 13737                           fsr2h	equ	0xFDA
 13738                           fsr2l	equ	0xFD9
 13739                           status	equ	0xFD8
 13740                           
 13741 ;; *************** function ___lldiv *****************
 13742 ;; Defined at:
 13743 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 13744 ;; Parameters:    Size  Location     Type
 13745 ;;  dividend        4   25[COMRAM] unsigned long 
 13746 ;;  divisor         4   29[COMRAM] unsigned long 
 13747 ;; Auto vars:     Size  Location     Type
 13748 ;;  quotient        4   33[COMRAM] unsigned long 
 13749 ;;  counter         1   37[COMRAM] unsigned char 
 13750 ;; Return value:  Size  Location     Type
 13751 ;;                  4   25[COMRAM] unsigned long 
 13752 ;; Registers used:
 13753 ;;		wreg, status,2, status,0
 13754 ;; Tracked objects:
 13755 ;;		On entry : 0/0
 13756 ;;		On exit  : 0/0
 13757 ;;		Unchanged: 0/0
 13758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13759 ;;      Params:         8       0       0       0       0       0       0       0       0
 13760 ;;      Locals:         5       0       0       0       0       0       0       0       0
 13761 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13762 ;;      Totals:        13       0       0       0       0       0       0       0       0
 13763 ;;Total ram usage:       13 bytes
 13764 ;; Hardware stack levels used:    1
 13765 ;; Hardware stack levels required when called:    2
 13766 ;; This function calls:
 13767 ;;		Nothing
 13768 ;; This function is called by:
 13769 ;;		_pf_mount
 13770 ;;		_pf_lseek
 13771 ;; This function uses a non-reentrant model
 13772 ;;
 13773                           
 13774                           	psect	text57
 13775  002BFA                     __ptext57:
 13776                           	opt stack 0
 13777  002BFA                     ___lldiv:
 13778                           	opt stack 25
 13779                           
 13780                           ;incstack = 0
 13781  002BFA  0E00               	movlw	0
 13782  002BFC  6E22               	movwf	___lldiv@quotient,c
 13783  002BFE  0E00               	movlw	0
 13784  002C00  6E23               	movwf	___lldiv@quotient+1,c
 13785  002C02  0E00               	movlw	0
 13786  002C04  6E24               	movwf	___lldiv@quotient+2,c
 13787  002C06  0E00               	movlw	0
 13788  002C08  6E25               	movwf	___lldiv@quotient+3,c
 13789  002C0A  501E               	movf	___lldiv@divisor,w,c
 13790  002C0C  101F               	iorwf	___lldiv@divisor+1,w,c
 13791  002C0E  1020               	iorwf	___lldiv@divisor+2,w,c
 13792  002C10  1021               	iorwf	___lldiv@divisor+3,w,c
 13793  002C12  B4D8               	btfsc	status,2,c
 13794  002C14  D02A               	goto	l1444
 13795  002C16  0E01               	movlw	1
 13796  002C18  6E26               	movwf	___lldiv@counter,c
 13797  002C1A  D006               	goto	l1439
 13798  002C1C  90D8               	bcf	status,0,c
 13799  002C1E  361E               	rlcf	___lldiv@divisor,f,c
 13800  002C20  361F               	rlcf	___lldiv@divisor+1,f,c
 13801  002C22  3620               	rlcf	___lldiv@divisor+2,f,c
 13802  002C24  3621               	rlcf	___lldiv@divisor+3,f,c
 13803  002C26  2A26               	incf	___lldiv@counter,f,c
 13804  002C28                     l1439:
 13805  002C28  AE21               	btfss	___lldiv@divisor+3,7,c
 13806  002C2A  D7F8               	goto	l1440
 13807  002C2C                     u7850:
 13808  002C2C  90D8               	bcf	status,0,c
 13809  002C2E  3622               	rlcf	___lldiv@quotient,f,c
 13810  002C30  3623               	rlcf	___lldiv@quotient+1,f,c
 13811  002C32  3624               	rlcf	___lldiv@quotient+2,f,c
 13812  002C34  3625               	rlcf	___lldiv@quotient+3,f,c
 13813  002C36  501E               	movf	___lldiv@divisor,w,c
 13814  002C38  5C1A               	subwf	___lldiv@dividend,w,c
 13815  002C3A  501F               	movf	___lldiv@divisor+1,w,c
 13816  002C3C  581B               	subwfb	___lldiv@dividend+1,w,c
 13817  002C3E  5020               	movf	___lldiv@divisor+2,w,c
 13818  002C40  581C               	subwfb	___lldiv@dividend+2,w,c
 13819  002C42  5021               	movf	___lldiv@divisor+3,w,c
 13820  002C44  581D               	subwfb	___lldiv@dividend+3,w,c
 13821  002C46  A0D8               	btfss	status,0,c
 13822  002C48  D009               	goto	l1443
 13823  002C4A  501E               	movf	___lldiv@divisor,w,c
 13824  002C4C  5E1A               	subwf	___lldiv@dividend,f,c
 13825  002C4E  501F               	movf	___lldiv@divisor+1,w,c
 13826  002C50  5A1B               	subwfb	___lldiv@dividend+1,f,c
 13827  002C52  5020               	movf	___lldiv@divisor+2,w,c
 13828  002C54  5A1C               	subwfb	___lldiv@dividend+2,f,c
 13829  002C56  5021               	movf	___lldiv@divisor+3,w,c
 13830  002C58  5A1D               	subwfb	___lldiv@dividend+3,f,c
 13831  002C5A  8022               	bsf	___lldiv@quotient,0,c
 13832  002C5C                     l1443:
 13833  002C5C  90D8               	bcf	status,0,c
 13834  002C5E  3221               	rrcf	___lldiv@divisor+3,f,c
 13835  002C60  3220               	rrcf	___lldiv@divisor+2,f,c
 13836  002C62  321F               	rrcf	___lldiv@divisor+1,f,c
 13837  002C64  321E               	rrcf	___lldiv@divisor,f,c
 13838  002C66  2E26               	decfsz	___lldiv@counter,f,c
 13839  002C68  D7E1               	goto	u7850
 13840  002C6A                     l1444:
 13841  002C6A  C022  F01A         	movff	___lldiv@quotient,?___lldiv
 13842  002C6E  C023  F01B         	movff	___lldiv@quotient+1,?___lldiv+1
 13843  002C72  C024  F01C         	movff	___lldiv@quotient+2,?___lldiv+2
 13844  002C76  C025  F01D         	movff	___lldiv@quotient+3,?___lldiv+3
 13845  002C7A  0012               	return		;funcret
 13846  002C7C                     __end_of___lldiv:
 13847                           	opt stack 0
 13848                           tosu	equ	0xFFF
 13849                           tosh	equ	0xFFE
 13850                           tosl	equ	0xFFD
 13851                           pclath	equ	0xFFA
 13852                           tblptru	equ	0xFF8
 13853                           tblptrh	equ	0xFF7
 13854                           tblptrl	equ	0xFF6
 13855                           tablat	equ	0xFF5
 13856                           prodh	equ	0xFF4
 13857                           prodl	equ	0xFF3
 13858                           intcon	equ	0xFF2
 13859                           intcon2	equ	0xFF1
 13860                           intcon3	equ	0xFF0
 13861                           indf0	equ	0xFEF
 13862                           postinc0	equ	0xFEE
 13863                           fsr0h	equ	0xFEA
 13864                           fsr0l	equ	0xFE9
 13865                           wreg	equ	0xFE8
 13866                           indf1	equ	0xFE7
 13867                           postinc1	equ	0xFE6
 13868                           postdec1	equ	0xFE5
 13869                           fsr1h	equ	0xFE2
 13870                           fsr1l	equ	0xFE1
 13871                           indf2	equ	0xFDF
 13872                           postinc2	equ	0xFDE
 13873                           postdec2	equ	0xFDD
 13874                           plusw2	equ	0xFDB
 13875                           fsr2h	equ	0xFDA
 13876                           fsr2l	equ	0xFD9
 13877                           status	equ	0xFD8
 13878                           
 13879 ;; *************** function _controle_shrc *****************
 13880 ;; Defined at:
 13881 ;;		line 112 in file "bibliotecas/SHRC.c"
 13882 ;; Parameters:    Size  Location     Type
 13883 ;;		None
 13884 ;; Auto vars:     Size  Location     Type
 13885 ;;		None
 13886 ;; Return value:  Size  Location     Type
 13887 ;;                  1    wreg      void 
 13888 ;; Registers used:
 13889 ;;		wreg, status,2, status,0, cstack
 13890 ;; Tracked objects:
 13891 ;;		On entry : 0/0
 13892 ;;		On exit  : 0/0
 13893 ;;		Unchanged: 0/0
 13894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13895 ;;      Params:         0       0       0       0       0       0       0       0       0
 13896 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13897 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13898 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13899 ;;Total ram usage:        0 bytes
 13900 ;; Hardware stack levels used:    1
 13901 ;; Hardware stack levels required when called:    3
 13902 ;; This function calls:
 13903 ;;		_ativa_latch_shrc
 13904 ;;		_envia_dados_shrc
 13905 ;; This function is called by:
 13906 ;;		_main
 13907 ;;		_timer_dois
 13908 ;; This function uses a non-reentrant model
 13909 ;;
 13910                           
 13911                           	psect	text58
 13912  0034BE                     __ptext58:
 13913                           	opt stack 0
 13914  0034BE                     _controle_shrc:
 13915                           	opt stack 27
 13916                           
 13917                           ;SHRC.c: 115: envia_dados_shrc(dado);
 13918                           
 13919                           ;incstack = 0
 13920  0034BE  5045               	movf	_dado,w,c
 13921  0034C0  ECDD  F018         	call	_envia_dados_shrc
 13922                           
 13923                           ;SHRC.c: 116: ativa_latch_shrc();
 13924  0034C4  EC1E  F01A         	call	_ativa_latch_shrc	;wreg free
 13925  0034C8  0012               	return		;funcret
 13926  0034CA                     __end_of_controle_shrc:
 13927                           	opt stack 0
 13928                           tosu	equ	0xFFF
 13929                           tosh	equ	0xFFE
 13930                           tosl	equ	0xFFD
 13931                           pclath	equ	0xFFA
 13932                           tblptru	equ	0xFF8
 13933                           tblptrh	equ	0xFF7
 13934                           tblptrl	equ	0xFF6
 13935                           tablat	equ	0xFF5
 13936                           prodh	equ	0xFF4
 13937                           prodl	equ	0xFF3
 13938                           intcon	equ	0xFF2
 13939                           intcon2	equ	0xFF1
 13940                           intcon3	equ	0xFF0
 13941                           indf0	equ	0xFEF
 13942                           postinc0	equ	0xFEE
 13943                           fsr0h	equ	0xFEA
 13944                           fsr0l	equ	0xFE9
 13945                           wreg	equ	0xFE8
 13946                           indf1	equ	0xFE7
 13947                           postinc1	equ	0xFE6
 13948                           postdec1	equ	0xFE5
 13949                           fsr1h	equ	0xFE2
 13950                           fsr1l	equ	0xFE1
 13951                           indf2	equ	0xFDF
 13952                           postinc2	equ	0xFDE
 13953                           postdec2	equ	0xFDD
 13954                           plusw2	equ	0xFDB
 13955                           fsr2h	equ	0xFDA
 13956                           fsr2l	equ	0xFD9
 13957                           status	equ	0xFD8
 13958                           
 13959 ;; *************** function _envia_dados_shrc *****************
 13960 ;; Defined at:
 13961 ;;		line 62 in file "bibliotecas/SHRC.c"
 13962 ;; Parameters:    Size  Location     Type
 13963 ;;  data_to_shrc    1    wreg     unsigned char 
 13964 ;; Auto vars:     Size  Location     Type
 13965 ;;  data_to_shrc    1   26[COMRAM] unsigned char 
 13966 ;;  contador        1   25[COMRAM] unsigned char 
 13967 ;; Return value:  Size  Location     Type
 13968 ;;                  1    wreg      void 
 13969 ;; Registers used:
 13970 ;;		wreg, status,2, status,0
 13971 ;; Tracked objects:
 13972 ;;		On entry : 0/0
 13973 ;;		On exit  : 0/0
 13974 ;;		Unchanged: 0/0
 13975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13976 ;;      Params:         0       0       0       0       0       0       0       0       0
 13977 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13978 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13979 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13980 ;;Total ram usage:        2 bytes
 13981 ;; Hardware stack levels used:    1
 13982 ;; Hardware stack levels required when called:    2
 13983 ;; This function calls:
 13984 ;;		Nothing
 13985 ;; This function is called by:
 13986 ;;		_controle_shrc
 13987 ;; This function uses a non-reentrant model
 13988 ;;
 13989                           
 13990                           	psect	text59
 13991  0031BA                     __ptext59:
 13992                           	opt stack 0
 13993  0031BA                     _envia_dados_shrc:
 13994                           	opt stack 27
 13995                           
 13996                           ;incstack = 0
 13997                           ;envia_dados_shrc@data_to_shrc stored from wreg
 13998  0031BA  6E1B               	movwf	envia_dados_shrc@data_to_shrc,c
 13999                           
 14000                           ;SHRC.c: 64: unsigned char contador=0;
 14001  0031BC  0E00               	movlw	0
 14002  0031BE  6E1A               	movwf	envia_dados_shrc@contador,c
 14003                           
 14004                           ;SHRC.c: 65: (INTCONbits.GIE = 0);
 14005  0031C0  9EF2               	bcf	intcon,7,c	;volatile
 14006                           
 14007                           ;SHRC.c: 67: while(contador<=7)
 14008  0031C2  D018               	goto	l35
 14009  0031C4                     
 14010                           ;SHRC.c: 68: {
 14011                           ;SHRC.c: 69: if((data_to_shrc & 0x80) == 0)
 14012  0031C4  BE1B               	btfsc	envia_dados_shrc@data_to_shrc,7,c
 14013  0031C6  D002               	goto	l37
 14014                           
 14015                           ;SHRC.c: 70: {
 14016                           ;SHRC.c: 71: LATBbits.LATB7 = 0;
 14017  0031C8  9E8A               	bcf	3978,7,c	;volatile
 14018                           
 14019                           ;SHRC.c: 72: }
 14020  0031CA  D001               	goto	l38
 14021  0031CC                     l37:
 14022                           
 14023                           ;SHRC.c: 73: else
 14024                           ;SHRC.c: 74: {
 14025                           ;SHRC.c: 75: LATBbits.LATB7 = 1;
 14026  0031CC  8E8A               	bsf	3978,7,c	;volatile
 14027  0031CE                     l38:
 14028                           
 14029                           ;SHRC.c: 76: }
 14030                           ;SHRC.c: 77: data_to_shrc = data_to_shrc << 1;
 14031  0031CE  501B               	movf	envia_dados_shrc@data_to_shrc,w,c
 14032  0031D0  241B               	addwf	envia_dados_shrc@data_to_shrc,w,c
 14033  0031D2  6E1B               	movwf	envia_dados_shrc@data_to_shrc,c
 14034                           
 14035                           ;SHRC.c: 78: _delay((unsigned long)((30)*(48000000/4000000.0)));
 14036  0031D4  0E78               	movlw	120
 14037  0031D6                     u9407:
 14038  0031D6  2EE8               	decfsz	wreg,f,c
 14039  0031D8  D7FE               	bra	u9407
 14040                           
 14041                           ;SHRC.c: 79: LATBbits.LATB6 = 1;
 14042  0031DA  8C8A               	bsf	3978,6,c	;volatile
 14043                           
 14044                           ;SHRC.c: 80: _delay((unsigned long)((30)*(48000000/4000000.0)));
 14045  0031DC  0E78               	movlw	120
 14046  0031DE                     u9417:
 14047  0031DE  2EE8               	decfsz	wreg,f,c
 14048  0031E0  D7FE               	bra	u9417
 14049                           
 14050                           ;SHRC.c: 81: LATBbits.LATB7 = 0;
 14051  0031E2  9E8A               	bcf	3978,7,c	;volatile
 14052                           
 14053                           ;SHRC.c: 82: _delay((unsigned long)((30)*(48000000/4000000.0)));
 14054  0031E4  0E78               	movlw	120
 14055  0031E6                     u9427:
 14056  0031E6  2EE8               	decfsz	wreg,f,c
 14057  0031E8  D7FE               	bra	u9427
 14058                           
 14059                           ;SHRC.c: 83: LATBbits.LATB6 = 0;
 14060  0031EA  9C8A               	bcf	3978,6,c	;volatile
 14061                           
 14062                           ;SHRC.c: 84: _delay((unsigned long)((30)*(48000000/4000000.0)));
 14063  0031EC  0E78               	movlw	120
 14064  0031EE                     u9437:
 14065  0031EE  2EE8               	decfsz	wreg,f,c
 14066  0031F0  D7FE               	bra	u9437
 14067                           
 14068                           ;SHRC.c: 85: contador++;
 14069  0031F2  2A1A               	incf	envia_dados_shrc@contador,f,c
 14070  0031F4                     l35:
 14071  0031F4  0E07               	movlw	7
 14072  0031F6  641A               	cpfsgt	envia_dados_shrc@contador,c
 14073  0031F8  D7E5               	goto	l36
 14074                           
 14075                           ;SHRC.c: 86: }
 14076                           ;SHRC.c: 87: (INTCONbits.GIE = 1);
 14077  0031FA  8EF2               	bsf	intcon,7,c	;volatile
 14078  0031FC  0012               	return		;funcret
 14079  0031FE                     __end_of_envia_dados_shrc:
 14080                           	opt stack 0
 14081                           tosu	equ	0xFFF
 14082                           tosh	equ	0xFFE
 14083                           tosl	equ	0xFFD
 14084                           pclath	equ	0xFFA
 14085                           tblptru	equ	0xFF8
 14086                           tblptrh	equ	0xFF7
 14087                           tblptrl	equ	0xFF6
 14088                           tablat	equ	0xFF5
 14089                           prodh	equ	0xFF4
 14090                           prodl	equ	0xFF3
 14091                           intcon	equ	0xFF2
 14092                           intcon2	equ	0xFF1
 14093                           intcon3	equ	0xFF0
 14094                           indf0	equ	0xFEF
 14095                           postinc0	equ	0xFEE
 14096                           fsr0h	equ	0xFEA
 14097                           fsr0l	equ	0xFE9
 14098                           wreg	equ	0xFE8
 14099                           indf1	equ	0xFE7
 14100                           postinc1	equ	0xFE6
 14101                           postdec1	equ	0xFE5
 14102                           fsr1h	equ	0xFE2
 14103                           fsr1l	equ	0xFE1
 14104                           indf2	equ	0xFDF
 14105                           postinc2	equ	0xFDE
 14106                           postdec2	equ	0xFDD
 14107                           plusw2	equ	0xFDB
 14108                           fsr2h	equ	0xFDA
 14109                           fsr2l	equ	0xFD9
 14110                           status	equ	0xFD8
 14111                           
 14112 ;; *************** function _ativa_latch_shrc *****************
 14113 ;; Defined at:
 14114 ;;		line 96 in file "bibliotecas/SHRC.c"
 14115 ;; Parameters:    Size  Location     Type
 14116 ;;		None
 14117 ;; Auto vars:     Size  Location     Type
 14118 ;;		None
 14119 ;; Return value:  Size  Location     Type
 14120 ;;                  1    wreg      void 
 14121 ;; Registers used:
 14122 ;;		wreg
 14123 ;; Tracked objects:
 14124 ;;		On entry : 0/0
 14125 ;;		On exit  : 0/0
 14126 ;;		Unchanged: 0/0
 14127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14128 ;;      Params:         0       0       0       0       0       0       0       0       0
 14129 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14130 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14131 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14132 ;;Total ram usage:        0 bytes
 14133 ;; Hardware stack levels used:    1
 14134 ;; Hardware stack levels required when called:    2
 14135 ;; This function calls:
 14136 ;;		Nothing
 14137 ;; This function is called by:
 14138 ;;		_controle_shrc
 14139 ;; This function uses a non-reentrant model
 14140 ;;
 14141                           
 14142                           	psect	text60
 14143  00343C                     __ptext60:
 14144                           	opt stack 0
 14145  00343C                     _ativa_latch_shrc:
 14146                           	opt stack 27
 14147                           
 14148                           ;SHRC.c: 99: LATBbits.LATB5 = 0;
 14149                           
 14150                           ;incstack = 0
 14151  00343C  9A8A               	bcf	3978,5,c	;volatile
 14152                           
 14153                           ;SHRC.c: 100: _delay((unsigned long)((30)*(48000000/4000000.0)));
 14154  00343E  0E78               	movlw	120
 14155  003440                     u9447:
 14156  003440  2EE8               	decfsz	wreg,f,c
 14157  003442  D7FE               	bra	u9447
 14158                           
 14159                           ;SHRC.c: 101: LATBbits.LATB5 = 1;
 14160  003444  8A8A               	bsf	3978,5,c	;volatile
 14161                           
 14162                           ;SHRC.c: 102: _delay((unsigned long)((60)*(48000000/4000000.0)));
 14163  003446  0EF0               	movlw	240
 14164  003448                     u9457:
 14165  003448  2EE8               	decfsz	wreg,f,c
 14166  00344A  D7FE               	bra	u9457
 14167                           
 14168                           ;SHRC.c: 103: LATBbits.LATB5 = 0;
 14169  00344C  9A8A               	bcf	3978,5,c	;volatile
 14170  00344E  0012               	return		;funcret
 14171  003450                     __end_of_ativa_latch_shrc:
 14172                           	opt stack 0
 14173                           tosu	equ	0xFFF
 14174                           tosh	equ	0xFFE
 14175                           tosl	equ	0xFFD
 14176                           pclath	equ	0xFFA
 14177                           tblptru	equ	0xFF8
 14178                           tblptrh	equ	0xFF7
 14179                           tblptrl	equ	0xFF6
 14180                           tablat	equ	0xFF5
 14181                           prodh	equ	0xFF4
 14182                           prodl	equ	0xFF3
 14183                           intcon	equ	0xFF2
 14184                           intcon2	equ	0xFF1
 14185                           intcon3	equ	0xFF0
 14186                           indf0	equ	0xFEF
 14187                           postinc0	equ	0xFEE
 14188                           fsr0h	equ	0xFEA
 14189                           fsr0l	equ	0xFE9
 14190                           wreg	equ	0xFE8
 14191                           indf1	equ	0xFE7
 14192                           postinc1	equ	0xFE6
 14193                           postdec1	equ	0xFE5
 14194                           fsr1h	equ	0xFE2
 14195                           fsr1l	equ	0xFE1
 14196                           indf2	equ	0xFDF
 14197                           postinc2	equ	0xFDE
 14198                           postdec2	equ	0xFDD
 14199                           plusw2	equ	0xFDB
 14200                           fsr2h	equ	0xFDA
 14201                           fsr2l	equ	0xFD9
 14202                           status	equ	0xFD8
 14203                           
 14204 ;; *************** function _isr *****************
 14205 ;; Defined at:
 14206 ;;		line 112 in file "main.c"
 14207 ;; Parameters:    Size  Location     Type
 14208 ;;		None
 14209 ;; Auto vars:     Size  Location     Type
 14210 ;;  cont            1   24[COMRAM] unsigned char 
 14211 ;; Return value:  Size  Location     Type
 14212 ;;                  1    wreg      void 
 14213 ;; Registers used:
 14214 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14215 ;; Tracked objects:
 14216 ;;		On entry : 0/0
 14217 ;;		On exit  : 0/0
 14218 ;;		Unchanged: 0/0
 14219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14220 ;;      Params:         0       0       0       0       0       0       0       0       0
 14221 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14222 ;;      Temps:         20       0       0       0       0       0       0       0       0
 14223 ;;      Totals:        21       0       0       0       0       0       0       0       0
 14224 ;;Total ram usage:       21 bytes
 14225 ;; Hardware stack levels used:    1
 14226 ;; Hardware stack levels required when called:    1
 14227 ;; This function calls:
 14228 ;;		_recebe_dado_uart
 14229 ;;		i2_write_timer_zero
 14230 ;; This function is called by:
 14231 ;;		Interrupt level 2
 14232 ;; This function uses a non-reentrant model
 14233 ;;
 14234                           
 14235                           	psect	intcode
 14236  000008                     __pintcode:
 14237                           	opt stack 0
 14238  000008                     _isr:
 14239                           	opt stack 18
 14240                           
 14241                           ;incstack = 0
 14242  000008  8246               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14243  00000A  ED4F  F012         	call	int_func,f	;refresh shadow registers
 14244                           tosu	equ	0xFFF
 14245                           tosh	equ	0xFFE
 14246                           tosl	equ	0xFFD
 14247                           pclath	equ	0xFFA
 14248                           tblptru	equ	0xFF8
 14249                           tblptrh	equ	0xFF7
 14250                           tblptrl	equ	0xFF6
 14251                           tablat	equ	0xFF5
 14252                           prodh	equ	0xFF4
 14253                           prodl	equ	0xFF3
 14254                           intcon	equ	0xFF2
 14255                           intcon2	equ	0xFF1
 14256                           intcon3	equ	0xFF0
 14257                           indf0	equ	0xFEF
 14258                           postinc0	equ	0xFEE
 14259                           fsr0h	equ	0xFEA
 14260                           fsr0l	equ	0xFE9
 14261                           wreg	equ	0xFE8
 14262                           indf1	equ	0xFE7
 14263                           postinc1	equ	0xFE6
 14264                           postdec1	equ	0xFE5
 14265                           fsr1h	equ	0xFE2
 14266                           fsr1l	equ	0xFE1
 14267                           indf2	equ	0xFDF
 14268                           postinc2	equ	0xFDE
 14269                           postdec2	equ	0xFDD
 14270                           plusw2	equ	0xFDB
 14271                           fsr2h	equ	0xFDA
 14272                           fsr2l	equ	0xFD9
 14273                           status	equ	0xFD8
 14274                           
 14275                           	psect	intcode_body
 14276  00249E                     __pintcode_body:
 14277                           	opt stack 18
 14278  00249E                     int_func:
 14279                           	opt stack 18
 14280  00249E  0006               	pop		; remove dummy address from shadow register refresh
 14281  0024A0  CFFA F007          	movff	pclath,??_isr+2
 14282  0024A4  CFFB F008          	movff	pclatu,??_isr+3
 14283  0024A8  CFE9 F009          	movff	fsr0l,??_isr+4
 14284  0024AC  CFEA F00A          	movff	fsr0h,??_isr+5
 14285  0024B0  CFE1 F00B          	movff	fsr1l,??_isr+6
 14286  0024B4  CFE2 F00C          	movff	fsr1h,??_isr+7
 14287  0024B8  CFD9 F00D          	movff	fsr2l,??_isr+8
 14288  0024BC  CFDA F00E          	movff	fsr2h,??_isr+9
 14289  0024C0  CFF3 F00F          	movff	prodl,??_isr+10
 14290  0024C4  CFF4 F010          	movff	prodh,??_isr+11
 14291  0024C8  CFF6 F011          	movff	tblptrl,??_isr+12
 14292  0024CC  CFF7 F012          	movff	tblptrh,??_isr+13
 14293  0024D0  CFF8 F013          	movff	tblptru,??_isr+14
 14294  0024D4  CFF5 F014          	movff	tablat,??_isr+15
 14295  0024D8  C046  F015         	movff	btemp,??_isr+16
 14296  0024DC  C047  F016         	movff	btemp+1,??_isr+17
 14297  0024E0  C048  F017         	movff	btemp+2,??_isr+18
 14298  0024E4  C049  F018         	movff	btemp+3,??_isr+19
 14299                           
 14300                           ;main.c: 114: unsigned char cont;
 14301                           ;main.c: 117: if (PIE1bits.RCIE && PIR1bits.RCIF)
 14302  0024E8  BA9D               	btfsc	3997,5,c	;volatile
 14303  0024EA  AA9E               	btfss	3998,5,c	;volatile
 14304  0024EC  D004               	goto	i2l484
 14305                           
 14306                           ;main.c: 118: {
 14307                           ;main.c: 119: data_uart_recebe = recebe_dado_uart();
 14308  0024EE  EC43  F01A         	call	_recebe_dado_uart	;wreg free
 14309  0024F2  6E40               	movwf	_data_uart_recebe,c
 14310                           
 14311                           ;main.c: 120: PIR1bits.RCIF = 0;
 14312  0024F4  9A9E               	bcf	3998,5,c	;volatile
 14313  0024F6                     i2l484:
 14314                           
 14315                           ;main.c: 121: }
 14316                           ;main.c: 124: unsigned char cont;
 14317                           ;main.c: 126: if (TMR0IF && T0IF)
 14318  0024F6  B4F2               	btfsc	intcon,2,c	;volatile
 14319  0024F8  A4F2               	btfss	intcon,2,c	;volatile
 14320  0024FA  D036               	goto	i2l485
 14321                           
 14322                           ;main.c: 127: {
 14323                           ;main.c: 128: INTCONbits.TMR0IF = 0;
 14324  0024FC  94F2               	bcf	intcon,2,c	;volatile
 14325                           
 14326                           ;main.c: 129: sinaliza_int_timer = 1;
 14327  0024FE  0E01               	movlw	1
 14328  002500  6E3F               	movwf	_sinaliza_int_timer,c
 14329                           
 14330                           ;main.c: 131: for(cont= 0; cont<2;cont++)
 14331  002502  0E00               	movlw	0
 14332  002504  6E19               	movwf	isr@cont,c
 14333  002506                     i2l5706:
 14334  002506  0E01               	movlw	1
 14335  002508  6419               	cpfsgt	isr@cont,c
 14336  00250A  D001               	goto	i2l486
 14337  00250C  D019               	goto	i2u597_40
 14338  00250E                     i2l486:
 14339                           
 14340                           ;main.c: 132: {
 14341                           ;main.c: 133: if(tempo_tarefa[cont]>0) tempo_tarefa[cont]--;
 14342  00250E  5019               	movf	isr@cont,w,c
 14343  002510  0D02               	mullw	2
 14344  002512  0E2D               	movlw	low _tempo_tarefa
 14345  002514  24F3               	addwf	prodl,w,c
 14346  002516  6ED9               	movwf	fsr2l,c
 14347  002518  0E00               	movlw	high _tempo_tarefa
 14348  00251A  20F4               	addwfc	prodh,w,c
 14349  00251C  6EDA               	movwf	fsr2h,c
 14350  00251E  50DE               	movf	postinc2,w,c
 14351  002520  10DE               	iorwf	postinc2,w,c
 14352  002522  B4D8               	btfsc	status,2,c
 14353  002524  D00B               	goto	i2l488
 14354  002526  5019               	movf	isr@cont,w,c
 14355  002528  0D02               	mullw	2
 14356  00252A  0E2D               	movlw	low _tempo_tarefa
 14357  00252C  24F3               	addwf	prodl,w,c
 14358  00252E  6ED9               	movwf	fsr2l,c
 14359  002530  0E00               	movlw	high _tempo_tarefa
 14360  002532  20F4               	addwfc	prodh,w,c
 14361  002534  6EDA               	movwf	fsr2h,c
 14362  002536  06DE               	decf	postinc2,f,c
 14363  002538  0E00               	movlw	0
 14364  00253A  5ADD               	subwfb	postdec2,f,c
 14365  00253C                     i2l488:
 14366  00253C  2A19               	incf	isr@cont,f,c
 14367  00253E  D7E3               	goto	i2l5706
 14368  002540                     i2u597_40:
 14369                           
 14370                           ;main.c: 134: }
 14371                           ;main.c: 137: if(tarefa_em_execucao == 1)
 14372  002540  043E               	decf	_tarefa_em_execucao,w,c	;volatile
 14373  002542  A4D8               	btfss	status,2,c
 14374  002544  D00B               	goto	i2l490
 14375                           
 14376                           ;main.c: 138: {
 14377                           ;main.c: 139: timeout_tarefa--;
 14378  002546  0639               	decf	_timeout_tarefa,f,c
 14379  002548  A0D8               	btfss	status,0,c
 14380  00254A  063A               	decf	_timeout_tarefa+1,f,c
 14381                           
 14382                           ;main.c: 140: if(!timeout_tarefa)
 14383  00254C  5039               	movf	_timeout_tarefa,w,c
 14384  00254E  103A               	iorwf	_timeout_tarefa+1,w,c
 14385  002550  A4D8               	btfss	status,2,c
 14386  002552  D004               	goto	i2l490
 14387                           
 14388                           ;main.c: 141: {
 14389                           ;main.c: 143: PCLATH = 0;
 14390  002554  0E00               	movlw	0
 14391  002556  6EFA               	movwf	pclath,c	;volatile
 14392                           
 14393                           ;main.c: 144: PCL = 0;
 14394  002558  0E00               	movlw	0
 14395  00255A  6EF9               	movwf	pcl,c	;volatile
 14396  00255C                     i2l490:
 14397                           
 14398                           ;main.c: 145: }
 14399                           ;main.c: 146: }
 14400                           ;main.c: 149: write_timer_zero(0x0083);
 14401  00255C  0E00               	movlw	0
 14402  00255E  6E02               	movwf	i2write_timer_zero@timer0+1,c
 14403  002560  0E83               	movlw	131
 14404  002562  6E01               	movwf	i2write_timer_zero@timer0,c
 14405  002564  EC3A  F01A         	call	i2_write_timer_zero	;wreg free
 14406  002568                     i2l485:
 14407                           
 14408                           ;main.c: 151: }
 14409                           ;main.c: 153: if (INT0IF && INT0IE)
 14410  002568  B2F2               	btfsc	intcon,1,c	;volatile
 14411  00256A  A8F2               	btfss	intcon,4,c	;volatile
 14412  00256C  D001               	goto	i2l491
 14413                           
 14414                           ;main.c: 154: {
 14415                           ;main.c: 155: INT0IF = 0;
 14416  00256E  92F2               	bcf	intcon,1,c	;volatile
 14417  002570                     i2l491:
 14418  002570  C018  F049         	movff	??_isr+19,btemp+3
 14419  002574  C017  F048         	movff	??_isr+18,btemp+2
 14420  002578  C016  F047         	movff	??_isr+17,btemp+1
 14421  00257C  C015  F046         	movff	??_isr+16,btemp
 14422  002580  C014  FFF5         	movff	??_isr+15,tablat
 14423  002584  C013  FFF8         	movff	??_isr+14,tblptru
 14424  002588  C012  FFF7         	movff	??_isr+13,tblptrh
 14425  00258C  C011  FFF6         	movff	??_isr+12,tblptrl
 14426  002590  C010  FFF4         	movff	??_isr+11,prodh
 14427  002594  C00F  FFF3         	movff	??_isr+10,prodl
 14428  002598  C00E  FFDA         	movff	??_isr+9,fsr2h
 14429  00259C  C00D  FFD9         	movff	??_isr+8,fsr2l
 14430  0025A0  C00C  FFE2         	movff	??_isr+7,fsr1h
 14431  0025A4  C00B  FFE1         	movff	??_isr+6,fsr1l
 14432  0025A8  C00A  FFEA         	movff	??_isr+5,fsr0h
 14433  0025AC  C009  FFE9         	movff	??_isr+4,fsr0l
 14434  0025B0  C008  FFFB         	movff	??_isr+3,pclatu
 14435  0025B4  C007  FFFA         	movff	??_isr+2,pclath
 14436  0025B8  9246               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14437  0025BA  0011               	retfie		f
 14438  0025BC                     __end_of_isr:
 14439                           	opt stack 0
 14440                           tosu	equ	0xFFF
 14441                           tosh	equ	0xFFE
 14442                           tosl	equ	0xFFD
 14443                           pclatu	equ	0xFFB
 14444                           pclath	equ	0xFFA
 14445                           pcl	equ	0xFF9
 14446                           tblptru	equ	0xFF8
 14447                           tblptrh	equ	0xFF7
 14448                           tblptrl	equ	0xFF6
 14449                           tablat	equ	0xFF5
 14450                           prodh	equ	0xFF4
 14451                           prodl	equ	0xFF3
 14452                           intcon	equ	0xFF2
 14453                           intcon2	equ	0xFF1
 14454                           intcon3	equ	0xFF0
 14455                           indf0	equ	0xFEF
 14456                           postinc0	equ	0xFEE
 14457                           fsr0h	equ	0xFEA
 14458                           fsr0l	equ	0xFE9
 14459                           wreg	equ	0xFE8
 14460                           indf1	equ	0xFE7
 14461                           postinc1	equ	0xFE6
 14462                           postdec1	equ	0xFE5
 14463                           fsr1h	equ	0xFE2
 14464                           fsr1l	equ	0xFE1
 14465                           indf2	equ	0xFDF
 14466                           postinc2	equ	0xFDE
 14467                           postdec2	equ	0xFDD
 14468                           plusw2	equ	0xFDB
 14469                           fsr2h	equ	0xFDA
 14470                           fsr2l	equ	0xFD9
 14471                           status	equ	0xFD8
 14472                           
 14473 ;; *************** function i2_write_timer_zero *****************
 14474 ;; Defined at:
 14475 ;;		line 138 in file "bibliotecas/hardware.c"
 14476 ;; Parameters:    Size  Location     Type
 14477 ;;  timer0          2    0[COMRAM] unsigned int 
 14478 ;; Auto vars:     Size  Location     Type
 14479 ;;  write_timer_    2    2[COMRAM] struct Timers
 14480 ;; Return value:  Size  Location     Type
 14481 ;;                  1    wreg      void 
 14482 ;; Registers used:
 14483 ;;		None
 14484 ;; Tracked objects:
 14485 ;;		On entry : 0/0
 14486 ;;		On exit  : 0/0
 14487 ;;		Unchanged: 0/0
 14488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14489 ;;      Params:         2       0       0       0       0       0       0       0       0
 14490 ;;      Locals:         2       0       0       0       0       0       0       0       0
 14491 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14492 ;;      Totals:         4       0       0       0       0       0       0       0       0
 14493 ;;Total ram usage:        4 bytes
 14494 ;; Hardware stack levels used:    1
 14495 ;; This function calls:
 14496 ;;		Nothing
 14497 ;; This function is called by:
 14498 ;;		_isr
 14499 ;; This function uses a non-reentrant model
 14500 ;;
 14501                           
 14502                           	psect	text62
 14503  003474                     __ptext62:
 14504                           	opt stack 0
 14505  003474                     i2_write_timer_zero:
 14506                           	opt stack 18
 14507                           
 14508                           ;hardware.c: 140: union Timers timer;
 14509                           ;hardware.c: 142: timer.lt = timer0;
 14510                           
 14511                           ;incstack = 0
 14512  003474  C001  F003         	movff	i2write_timer_zero@timer0,i2write_timer_zero@timer
 14513  003478  C002  F004         	movff	i2write_timer_zero@timer0+1,i2write_timer_zero@timer+1
 14514                           
 14515                           ;hardware.c: 144: TMR0H = timer.bt[1];
 14516  00347C  C004  FFD7         	movff	i2write_timer_zero@timer+1,4055	;volatile
 14517                           
 14518                           ;hardware.c: 145: TMR0L = timer.bt[0];
 14519  003480  C003  FFD6         	movff	i2write_timer_zero@timer,4054	;volatile
 14520  003484  0012               	return		;funcret
 14521  003486                     __end_ofi2_write_timer_zero:
 14522                           	opt stack 0
 14523                           tosu	equ	0xFFF
 14524                           tosh	equ	0xFFE
 14525                           tosl	equ	0xFFD
 14526                           pclatu	equ	0xFFB
 14527                           pclath	equ	0xFFA
 14528                           pcl	equ	0xFF9
 14529                           tblptru	equ	0xFF8
 14530                           tblptrh	equ	0xFF7
 14531                           tblptrl	equ	0xFF6
 14532                           tablat	equ	0xFF5
 14533                           prodh	equ	0xFF4
 14534                           prodl	equ	0xFF3
 14535                           intcon	equ	0xFF2
 14536                           intcon2	equ	0xFF1
 14537                           intcon3	equ	0xFF0
 14538                           indf0	equ	0xFEF
 14539                           postinc0	equ	0xFEE
 14540                           fsr0h	equ	0xFEA
 14541                           fsr0l	equ	0xFE9
 14542                           wreg	equ	0xFE8
 14543                           indf1	equ	0xFE7
 14544                           postinc1	equ	0xFE6
 14545                           postdec1	equ	0xFE5
 14546                           fsr1h	equ	0xFE2
 14547                           fsr1l	equ	0xFE1
 14548                           indf2	equ	0xFDF
 14549                           postinc2	equ	0xFDE
 14550                           postdec2	equ	0xFDD
 14551                           plusw2	equ	0xFDB
 14552                           fsr2h	equ	0xFDA
 14553                           fsr2l	equ	0xFD9
 14554                           status	equ	0xFD8
 14555                           
 14556 ;; *************** function _recebe_dado_uart *****************
 14557 ;; Defined at:
 14558 ;;		line 138 in file "bibliotecas/uart.c"
 14559 ;; Parameters:    Size  Location     Type
 14560 ;;		None
 14561 ;; Auto vars:     Size  Location     Type
 14562 ;;		None
 14563 ;; Return value:  Size  Location     Type
 14564 ;;                  1    wreg      unsigned char 
 14565 ;; Registers used:
 14566 ;;		wreg, status,2
 14567 ;; Tracked objects:
 14568 ;;		On entry : 0/0
 14569 ;;		On exit  : 0/0
 14570 ;;		Unchanged: 0/0
 14571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14572 ;;      Params:         0       0       0       0       0       0       0       0       0
 14573 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14574 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14575 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14576 ;;Total ram usage:        0 bytes
 14577 ;; Hardware stack levels used:    1
 14578 ;; This function calls:
 14579 ;;		Nothing
 14580 ;; This function is called by:
 14581 ;;		_isr
 14582 ;;		_recebe_string_uart
 14583 ;; This function uses a non-reentrant model
 14584 ;;
 14585                           
 14586                           	psect	text63
 14587  003486                     __ptext63:
 14588                           	opt stack 0
 14589  003486                     _recebe_dado_uart:
 14590                           	opt stack 18
 14591                           
 14592                           ;uart.c: 140: while(RCIF==0);
 14593                           
 14594                           ;incstack = 0
 14595  003486  AA9E               	btfss	3998,5,c	;volatile
 14596  003488  D7FE               	goto	_recebe_dado_uart
 14597                           
 14598                           ;uart.c: 141: if(RCSTAbits.OERR)
 14599  00348A  A2AB               	btfss	4011,1,c	;volatile
 14600  00348C  D003               	goto	i2l360
 14601                           
 14602                           ;uart.c: 142: {
 14603                           ;uart.c: 143: CREN = 0;
 14604  00348E  98AB               	bcf	4011,4,c	;volatile
 14605                           
 14606                           ;uart.c: 144: __nop();
 14607  003490  F000               	nop	
 14608                           
 14609                           ;uart.c: 145: CREN=1;
 14610  003492  88AB               	bsf	4011,4,c	;volatile
 14611  003494                     i2l360:
 14612                           
 14613                           ;uart.c: 146: }
 14614                           ;uart.c: 147: return(RCREG);
 14615  003494  50AE               	movf	4014,w,c	;volatile
 14616  003496  0012               	return	
 14617  003498                     __end_of_recebe_dado_uart:
 14618                           	opt stack 0
 14619                           tosu	equ	0xFFF
 14620                           tosh	equ	0xFFE
 14621                           tosl	equ	0xFFD
 14622                           pclatu	equ	0xFFB
 14623                           pclath	equ	0xFFA
 14624                           pcl	equ	0xFF9
 14625                           tblptru	equ	0xFF8
 14626                           tblptrh	equ	0xFF7
 14627                           tblptrl	equ	0xFF6
 14628                           tablat	equ	0xFF5
 14629                           prodh	equ	0xFF4
 14630                           prodl	equ	0xFF3
 14631                           intcon	equ	0xFF2
 14632                           intcon2	equ	0xFF1
 14633                           intcon3	equ	0xFF0
 14634                           indf0	equ	0xFEF
 14635                           postinc0	equ	0xFEE
 14636                           fsr0h	equ	0xFEA
 14637                           fsr0l	equ	0xFE9
 14638                           wreg	equ	0xFE8
 14639                           indf1	equ	0xFE7
 14640                           postinc1	equ	0xFE6
 14641                           postdec1	equ	0xFE5
 14642                           fsr1h	equ	0xFE2
 14643                           fsr1l	equ	0xFE1
 14644                           indf2	equ	0xFDF
 14645                           postinc2	equ	0xFDE
 14646                           postdec2	equ	0xFDD
 14647                           plusw2	equ	0xFDB
 14648                           fsr2h	equ	0xFDA
 14649                           fsr2l	equ	0xFD9
 14650                           status	equ	0xFD8
 14651                           tosu	equ	0xFFF
 14652                           tosh	equ	0xFFE
 14653                           tosl	equ	0xFFD
 14654                           pclatu	equ	0xFFB
 14655                           pclath	equ	0xFFA
 14656                           pcl	equ	0xFF9
 14657                           tblptru	equ	0xFF8
 14658                           tblptrh	equ	0xFF7
 14659                           tblptrl	equ	0xFF6
 14660                           tablat	equ	0xFF5
 14661                           prodh	equ	0xFF4
 14662                           prodl	equ	0xFF3
 14663                           intcon	equ	0xFF2
 14664                           intcon2	equ	0xFF1
 14665                           intcon3	equ	0xFF0
 14666                           indf0	equ	0xFEF
 14667                           postinc0	equ	0xFEE
 14668                           fsr0h	equ	0xFEA
 14669                           fsr0l	equ	0xFE9
 14670                           wreg	equ	0xFE8
 14671                           indf1	equ	0xFE7
 14672                           postinc1	equ	0xFE6
 14673                           postdec1	equ	0xFE5
 14674                           fsr1h	equ	0xFE2
 14675                           fsr1l	equ	0xFE1
 14676                           indf2	equ	0xFDF
 14677                           postinc2	equ	0xFDE
 14678                           postdec2	equ	0xFDD
 14679                           plusw2	equ	0xFDB
 14680                           fsr2h	equ	0xFDA
 14681                           fsr2l	equ	0xFD9
 14682                           status	equ	0xFD8
 14683                           
 14684                           	psect	text64
 14685  000000                     __ptext64:
 14686                           	opt stack 0
 14687                           tosu	equ	0xFFF
 14688                           tosh	equ	0xFFE
 14689                           tosl	equ	0xFFD
 14690                           pclatu	equ	0xFFB
 14691                           pclath	equ	0xFFA
 14692                           pcl	equ	0xFF9
 14693                           tblptru	equ	0xFF8
 14694                           tblptrh	equ	0xFF7
 14695                           tblptrl	equ	0xFF6
 14696                           tablat	equ	0xFF5
 14697                           prodh	equ	0xFF4
 14698                           prodl	equ	0xFF3
 14699                           intcon	equ	0xFF2
 14700                           intcon2	equ	0xFF1
 14701                           intcon3	equ	0xFF0
 14702                           indf0	equ	0xFEF
 14703                           postinc0	equ	0xFEE
 14704                           fsr0h	equ	0xFEA
 14705                           fsr0l	equ	0xFE9
 14706                           wreg	equ	0xFE8
 14707                           indf1	equ	0xFE7
 14708                           postinc1	equ	0xFE6
 14709                           postdec1	equ	0xFE5
 14710                           fsr1h	equ	0xFE2
 14711                           fsr1l	equ	0xFE1
 14712                           indf2	equ	0xFDF
 14713                           postinc2	equ	0xFDE
 14714                           postdec2	equ	0xFDD
 14715                           plusw2	equ	0xFDB
 14716                           fsr2h	equ	0xFDA
 14717                           fsr2l	equ	0xFD9
 14718                           status	equ	0xFD8
 14719                           
 14720                           	psect	rparam
 14721  0000                     tosu	equ	0xFFF
 14722                           tosh	equ	0xFFE
 14723                           tosl	equ	0xFFD
 14724                           pclatu	equ	0xFFB
 14725                           pclath	equ	0xFFA
 14726                           pcl	equ	0xFF9
 14727                           tblptru	equ	0xFF8
 14728                           tblptrh	equ	0xFF7
 14729                           tblptrl	equ	0xFF6
 14730                           tablat	equ	0xFF5
 14731                           prodh	equ	0xFF4
 14732                           prodl	equ	0xFF3
 14733                           intcon	equ	0xFF2
 14734                           intcon2	equ	0xFF1
 14735                           intcon3	equ	0xFF0
 14736                           indf0	equ	0xFEF
 14737                           postinc0	equ	0xFEE
 14738                           fsr0h	equ	0xFEA
 14739                           fsr0l	equ	0xFE9
 14740                           wreg	equ	0xFE8
 14741                           indf1	equ	0xFE7
 14742                           postinc1	equ	0xFE6
 14743                           postdec1	equ	0xFE5
 14744                           fsr1h	equ	0xFE2
 14745                           fsr1l	equ	0xFE1
 14746                           indf2	equ	0xFDF
 14747                           postinc2	equ	0xFDE
 14748                           postdec2	equ	0xFDD
 14749                           plusw2	equ	0xFDB
 14750                           fsr2h	equ	0xFDA
 14751                           fsr2l	equ	0xFD9
 14752                           status	equ	0xFD8
 14753                           
 14754                           	psect	temp
 14755  000046                     btemp:
 14756                           	opt stack 0
 14757  000046                     	ds	1
 14758  0000                     int$flags	set	btemp
 14759  0000                     wtemp6	set	btemp+1
 14760                           tosu	equ	0xFFF
 14761                           tosh	equ	0xFFE
 14762                           tosl	equ	0xFFD
 14763                           pclatu	equ	0xFFB
 14764                           pclath	equ	0xFFA
 14765                           pcl	equ	0xFF9
 14766                           tblptru	equ	0xFF8
 14767                           tblptrh	equ	0xFF7
 14768                           tblptrl	equ	0xFF6
 14769                           tablat	equ	0xFF5
 14770                           prodh	equ	0xFF4
 14771                           prodl	equ	0xFF3
 14772                           intcon	equ	0xFF2
 14773                           intcon2	equ	0xFF1
 14774                           intcon3	equ	0xFF0
 14775                           indf0	equ	0xFEF
 14776                           postinc0	equ	0xFEE
 14777                           fsr0h	equ	0xFEA
 14778                           fsr0l	equ	0xFE9
 14779                           wreg	equ	0xFE8
 14780                           indf1	equ	0xFE7
 14781                           postinc1	equ	0xFE6
 14782                           postdec1	equ	0xFE5
 14783                           fsr1h	equ	0xFE2
 14784                           fsr1l	equ	0xFE1
 14785                           indf2	equ	0xFDF
 14786                           postinc2	equ	0xFDE
 14787                           postdec2	equ	0xFDD
 14788                           plusw2	equ	0xFDB
 14789                           fsr2h	equ	0xFDA
 14790                           fsr2l	equ	0xFD9
 14791                           status	equ	0xFD8


Data Sizes:
    Strings     216
    Constant    213
    Data        24
    BSS         690
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     44      69
    BANK0           160    117     125
    BANK1           256     63     232
    BANK2           256     45      45
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    pf_open@path	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_6(CODE[10]), 

    rd	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_lcd@texto(COMRAM[7]), escreve_inteiro_uart@valor_final(COMRAM[7]), 

    pf_readdir@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    pf_opendir@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    pf_write@bw	PTR unsigned int  size(2) Largest target is 2
		 -> SDCard@br(BANK2[2]), 

    pf_write@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK2[42]), 

    pf_write@buff	PTR const void  size(2) Largest target is 8
		 -> STR_7(CODE[8]), 

    pf_write@p	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_7(CODE[8]), 

    pf_read$2079	PTR unsigned char  size(2) Largest target is 32
		 -> NULL(NULL[0]), data_buffer_32(BANK1[32]), 

    pf_read@br	PTR unsigned int  size(2) Largest target is 2
		 -> SDCard@br(BANK2[2]), 

    pf_read@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK2[42]), 

    pf_read@buff	PTR void  size(2) Largest target is 32
		 -> data_buffer_32(BANK1[32]), 

    pf_read@rbuff	PTR unsigned char  size(2) Largest target is 32
		 -> data_buffer_32(BANK1[32]), 

    pf_open@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK2[42]), 

    dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    pf_mount@fs	PTR struct . size(2) Largest target is 42
		 -> SDCard@fs(BANK2[42]), 

    check_fs@buf	PTR unsigned char  size(2) Largest target is 36
		 -> pf_mount@buf(BANK0[36]), 

    follow_path@dir	PTR unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK1[32]), 

    follow_path@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    follow_path@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK1[16]), 

    follow_path@path	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_21(CODE[10]), 

    get_fileinfo@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    create_name@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> follow_path@path(BANK0[2]), 

    create_name@p	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_21(CODE[10]), 

    create_name@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    create_name@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK1[16]), 

    create_name@sfn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    dir_read@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    dir_find@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    dir_find@dir	PTR unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK1[32]), 

    dir_find@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK1[16]), 

    dir_next@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    dir_next@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK1[16]), 

    dir_next@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK2[42]), 

    S1768$fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    dir_rewind@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    dir_rewind@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK1[16]), 

    dir_rewind@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK2[42]), 

    get_clust@dir	PTR unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK1[32]), 

    get_clust@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK2[42]), 

    clust2sect@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK2[42]), 

    FatFs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK2[42]), 

    get_fat@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK2[42]), 

    mem_cmp@src	PTR const void  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    mem_cmp@s	PTR const unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    mem_cmp@dst	PTR const void  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK1[32]), 

    mem_cmp@d	PTR const unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK1[32]), 

    mem_set@dst	PTR void  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    mem_set@d	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    disk_writep@wr	PTR const unsigned char  size(3) Largest target is 32767
		 -> ROM(CODE[32767]), STR_7(CODE[8]), 

    disk_readp@rd	PTR unsigned char  size(2) Largest target is 36
		 -> pf_readdir@dir(COMRAM[32]), pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK1[32]), pf_mount@buf(BANK0[36]), 
		 -> NULL(NULL[0]), get_fat@buf(BANK0[4]), data_buffer_32(BANK1[32]), 

    escreve_frase_ram_lcd@buffer	PTR unsigned char  size(2) Largest target is 17
		 -> STR_20(CODE[3]), STR_19(CODE[8]), STR_18(CODE[14]), STR_17(CODE[13]), 
		 -> STR_16(CODE[9]), STR_15(CODE[14]), escreve_inteiro_lcd@texto(COMRAM[7]), STR_14(CODE[16]), 
		 -> STR_13(CODE[14]), STR_12(CODE[14]), STR_11(CODE[14]), STR_10(CODE[14]), 
		 -> STR_9(CODE[13]), STR_8(CODE[17]), STR_5(CODE[17]), STR_4(CODE[15]), 
		 -> STR_3(CODE[14]), mensagem_inicial@msg_dois(BANK0[17]), mensagem_inicial@msg_linha_um(BANK0[17]), leitura_chave@pos_ignicao_on(COMRAM[17]), 
		 -> leitura_chave@pos_ignicao_crank(COMRAM[17]), leitura_chave@pos_ignicao_off(COMRAM[17]), STR_1(CODE[17]), 

    p_tarefas	PTR FTN()void [2] size(2) Largest target is 1
		 -> SDCard(), acende_led4(), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_lcd@texto(COMRAM[7]), escreve_inteiro_uart@valor_final(COMRAM[7]), 


Critical Paths under _main in COMRAM

    _mensagem_inicial->_posicao_cursor_lcd
    _leitura_continua_adc->_leitura_adc
    _init_lcd->_escreve_cmd_lcd
    _config_timer_zero->_write_timer_zero
    _inicializa_uart->_configura_baudrate_uart
    _configura_baudrate_uart->___aldiv
    _inicializa_SPI->_posicao_cursor_lcd
    _acende_led4->_shrc_apaga_bit
    _acende_led4->_shrc_seta_bit
    _pf_write->_disk_writep
    _disk_writep->_command
    _pf_read->_clust2sect
    _follow_path->_create_name
    _dir_rewind->_clust2sect
    _dir_next->_clust2sect
    _get_fat->_disk_readp
    _clust2sect->___lmul
    _create_name->_mem_set
    _disk_initialize->_reset
    _reset->_command
    _escreve_cmd_lcd->_delay
    _check_fs->_disk_readp
    _disk_readp->_command
    _response->_recebe_dado_SPI
    _proceed->_WriteSPI_
    _posicao_cursor_lcd->_endereco_cursor_lcd
    _endereco_cursor_lcd->_delay
    _escreve_frase_ram_lcd->_escreve_caractere_lcd
    _escreve_caractere_lcd->_delay
    _dummy_clocks->_WriteSPI_
    _command->_WriteSPI_
    _controle_shrc->_envia_dados_shrc

Critical Paths under _isr in COMRAM

    _isr->i2_write_timer_zero

Critical Paths under _main in BANK0

    _main->_escalonador
    _inicializa_uart->_configura_baudrate_uart
    _SDCard->_pf_open
    _pf_write->_get_fat
    _pf_read->_get_fat
    _pf_open->_follow_path
    _follow_path->_dir_find
    _dir_find->_dir_next
    _dir_rewind->_clust2sect
    _dir_next->_get_fat
    _get_fat->_disk_readp
    _pf_mount->_check_fs
    _check_fs->_disk_readp

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _SDCard->_pf_open

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _escalonador->_SDCard

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  155880
                      _controle_shrc
                        _escalonador
                     _inicializa_SPI
                    _inicializa_shrc
                 _inicializa_tarefas
                    _inicializa_uart
                      _init_hardware
                           _init_lcd
             _leitura_chaves_sistema
               _leitura_continua_adc
                   _mensagem_inicial
 ---------------------------------------------------------------------------------
 (1) _mensagem_inicial                                    36    36      0    5743
                                             31 COMRAM     2     2      0
                                              0 BANK0     34    34      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _leitura_continua_adc                                 8     8      0     312
                                             32 COMRAM     8     8      0
                        _leitura_adc
 ---------------------------------------------------------------------------------
 (2) _leitura_adc                                          7     5      2      22
                                             25 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _leitura_chaves_sistema                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0     613
                                             28 COMRAM     1     1      0
                              _delay
                    _escreve_cmd_lcd
 ---------------------------------------------------------------------------------
 (1) _init_hardware                                        0     0      0     195
                  _config_timer_dois
                  _config_timer_zero
                     _init_interrupt
                     _init_oscilador
                         _init_ports
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_oscilador                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _config_timer_zero                                    0     0      0     195
                   _write_timer_zero
 ---------------------------------------------------------------------------------
 (3) _write_timer_zero                                     4     2      2     195
                                             25 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _config_timer_dois                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_uart                                      0     0      0    1118
            _configura_baudrate_uart
 ---------------------------------------------------------------------------------
 (2) _configura_baudrate_uart                             14    10      4    1118
                                             39 COMRAM     4     0      4
                                              0 BANK0     10    10      0
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     805
                                             25 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _inicializa_tarefas                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_shrc                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_SPI                                       3     1      2    5967
                                             31 COMRAM     3     1      2
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _escalonador                                          3     3      0  141887
                                            114 BANK0      3     3      0
                             _SDCard *
                        _acende_led4 *
 ---------------------------------------------------------------------------------
 (2) _acende_led4                                          0     0      0      44
                     _shrc_apaga_bit
                      _shrc_seta_bit
 ---------------------------------------------------------------------------------
 (3) _shrc_seta_bit                                        3     3      0      22
                                             25 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _shrc_apaga_bit                                       3     3      0      22
                                             25 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _SDCard                                              45    45      0  141620
                                              0 BANK2     45    45      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                           _pf_mount
                            _pf_open
                            _pf_read
                           _pf_write
                 _posicao_cursor_lcd
                            _proceed
                           _readover
 ---------------------------------------------------------------------------------
 (3) _readover                                             2     0      2     121
                                             25 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _pf_write                                            33    27      6   21535
                                             58 BANK0     33    27      6
                         _clust2sect
                        _disk_writep
                            _get_fat
 ---------------------------------------------------------------------------------
 (4) _disk_writep                                         17    10      7    3498
                                             37 COMRAM     7     0      7
                                              0 BANK0      9     9      0
                          _WriteSPI_
                            _command
                       _dummy_clocks
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (3) _pf_read                                             36    30      6   31169
                                             58 BANK0     36    30      6
                         _clust2sect
                         _disk_readp
                            _get_fat
 ---------------------------------------------------------------------------------
 (3) _pf_open                                             87    85      2   40129
                                             90 BANK0     24    22      2
                                              0 BANK1     63    63      0
                        _follow_path
                          _get_clust
 ---------------------------------------------------------------------------------
 (4) _follow_path                                          7     1      6   38787
                                             83 BANK0      7     1      6
                        _create_name
                           _dir_find
                         _dir_rewind
                          _get_clust
 ---------------------------------------------------------------------------------
 (4) _get_clust                                           18    14      4     471
                                             25 COMRAM    18    14      4
 ---------------------------------------------------------------------------------
 (5) _dir_find                                             8     4      4   33513
                                             75 BANK0      8     4      4
                           _dir_next
                         _dir_rewind
                         _disk_readp
                            _mem_cmp
 ---------------------------------------------------------------------------------
 (6) _mem_cmp                                             15     9      6     468
                                             25 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (5) _dir_rewind                                          16    14      2    2027
                                              5 BANK0     16    14      2
                         _clust2sect
 ---------------------------------------------------------------------------------
 (6) _dir_next                                            17    15      2   17018
                                             58 BANK0     17    15      2
                         _clust2sect
                            _get_fat
 ---------------------------------------------------------------------------------
 (4) _get_fat                                             40    36      4   14932
                                             18 BANK0     40    36      4
                         _disk_readp
 ---------------------------------------------------------------------------------
 (4) _clust2sect                                          11     7      4    1187
                                             37 COMRAM     6     2      4
                                              0 BANK0      5     5      0
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) _create_name                                         20    16      4    1682
                                             33 COMRAM    11     7      4
                                              0 BANK0      9     9      0
                            _mem_set
 ---------------------------------------------------------------------------------
 (6) _mem_set                                              8     2      6     400
                                             25 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (3) _pf_mount                                            77    75      2   42272
                                             28 BANK0     77    75      2
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                         _disk_readp
 ---------------------------------------------------------------------------------
 (4) _disk_initialize                                     10    10      0   11110
                                              0 BANK0     10    10      0
                            _command
                       _dummy_clocks
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                              _reset
                           _response
 ---------------------------------------------------------------------------------
 (5) _reset                                                7     7      0    2577
                                             37 COMRAM     7     7      0
                            _command
                       _dummy_clocks
                            _proceed
 ---------------------------------------------------------------------------------
 (2) _escreve_cmd_lcd                                      1     1      0     477
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _check_fs                                            10     4      6   14072
                                             18 BANK0     10     4      6
                         _disk_readp
 ---------------------------------------------------------------------------------
 (5) _disk_readp                                          25    15     10   13340
                                             37 COMRAM     4     4      0
                                              0 BANK0     18     8     10
                            _command
                       _dummy_clocks
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (6) _response                                             1     1      0      37
                                             28 COMRAM     1     1      0
                    _recebe_dado_SPI
 ---------------------------------------------------------------------------------
 (7) _recebe_dado_SPI                                      3     3      0       3
                                             25 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _proceed                                              0     0      0      34
                          _WriteSPI_
 ---------------------------------------------------------------------------------
 (2) _posicao_cursor_lcd                                   3     2      1    2667
                                             28 COMRAM     3     2      1
                _endereco_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _endereco_cursor_lcd                                  1     1      0     353
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _escreve_frase_ram_lcd                                2     0      2    2519
                                             28 COMRAM     2     0      2
              _escreve_caractere_lcd
 ---------------------------------------------------------------------------------
 (3) _escreve_caractere_lcd                                1     1      0     384
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                2     2      0     136
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _dummy_clocks                                         5     5      0     102
                                             29 COMRAM     5     5      0
                          _WriteSPI_
 ---------------------------------------------------------------------------------
 (6) _command                                              8     3      5    2336
                                             29 COMRAM     8     3      5
                          _WriteSPI_
 ---------------------------------------------------------------------------------
 (4) _WriteSPI_                                            4     4      0      34
                                             25 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     576
                                             25 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     721
                                             25 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _controle_shrc                                        0     0      0      45
                   _ativa_latch_shrc
                   _envia_dados_shrc
 ---------------------------------------------------------------------------------
 (2) _envia_dados_shrc                                     2     2      0      45
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _ativa_latch_shrc                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _isr                                                21    21      0     183
                                              4 COMRAM    21    21      0
                   _recebe_dado_uart
                 i2_write_timer_zero
 ---------------------------------------------------------------------------------
 (13) i2_write_timer_zero                                  4     2      2      93
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (13) _recebe_dado_uart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _controle_shrc
     _ativa_latch_shrc
     _envia_dados_shrc
   _escalonador
     _SDCard *
       _escreve_cmd_lcd
         _delay
       _escreve_frase_ram_lcd
         _escreve_caractere_lcd
           _delay
       _pf_mount
         ___lldiv
         ___lmul
         _check_fs
           _disk_readp
             _command
               _WriteSPI_
             _dummy_clocks
               _WriteSPI_
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _proceed
               _WriteSPI_
             _response
               _recebe_dado_SPI
         _disk_initialize
           _command
             _WriteSPI_
           _dummy_clocks
             _WriteSPI_
           _escreve_cmd_lcd
             _delay
           _escreve_frase_ram_lcd
             _escreve_caractere_lcd
               _delay
           _posicao_cursor_lcd
             _endereco_cursor_lcd
               _delay
           _proceed
             _WriteSPI_
           _reset
             _command
               _WriteSPI_
             _dummy_clocks
               _WriteSPI_
             _proceed
               _WriteSPI_
           _response
             _recebe_dado_SPI
         _disk_readp
           _command
             _WriteSPI_
           _dummy_clocks
             _WriteSPI_
           _escreve_frase_ram_lcd
             _escreve_caractere_lcd
               _delay
           _posicao_cursor_lcd
             _endereco_cursor_lcd
               _delay
           _proceed
             _WriteSPI_
           _response
             _recebe_dado_SPI
       _pf_open
         _follow_path
           _create_name
             _mem_set
           _dir_find
             _dir_next
               _clust2sect
                 ___lmul
               _get_fat
                 _disk_readp
                   _command
                     _WriteSPI_
                   _dummy_clocks
                     _WriteSPI_
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _WriteSPI_
                   _response
                     _recebe_dado_SPI
             _dir_rewind
               _clust2sect
                 ___lmul
             _disk_readp
               _command
                 _WriteSPI_
               _dummy_clocks
                 _WriteSPI_
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _proceed
                 _WriteSPI_
               _response
                 _recebe_dado_SPI
             _mem_cmp
           _dir_rewind
             _clust2sect
               ___lmul
           _get_clust
         _get_clust
       _pf_read
         _clust2sect
           ___lmul
         _disk_readp
           _command
             _WriteSPI_
           _dummy_clocks
             _WriteSPI_
           _escreve_frase_ram_lcd
             _escreve_caractere_lcd
               _delay
           _posicao_cursor_lcd
             _endereco_cursor_lcd
               _delay
           _proceed
             _WriteSPI_
           _response
             _recebe_dado_SPI
         _get_fat
           _disk_readp
             _command
               _WriteSPI_
             _dummy_clocks
               _WriteSPI_
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _proceed
               _WriteSPI_
             _response
               _recebe_dado_SPI
       _pf_write
         _clust2sect
           ___lmul
         _disk_writep
           _WriteSPI_
           _command
             _WriteSPI_
           _dummy_clocks
             _WriteSPI_
           _proceed
             _WriteSPI_
           _response
             _recebe_dado_SPI
         _get_fat
           _disk_readp
             _command
               _WriteSPI_
             _dummy_clocks
               _WriteSPI_
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _proceed
               _WriteSPI_
             _response
               _recebe_dado_SPI
       _posicao_cursor_lcd
         _endereco_cursor_lcd
           _delay
       _proceed
         _WriteSPI_
       _readover
     _acende_led4 *
       _shrc_apaga_bit
       _shrc_seta_bit
   _inicializa_SPI
     _escreve_cmd_lcd
       _delay
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay
   _inicializa_shrc
   _inicializa_tarefas
   _inicializa_uart
     _configura_baudrate_uart
       ___aldiv
   _init_hardware
     _config_timer_dois
     _config_timer_zero
       _write_timer_zero
     _init_interrupt
     _init_oscilador
     _init_ports
   _init_lcd
     _delay
     _escreve_cmd_lcd
       _delay
   _leitura_chaves_sistema
   _leitura_continua_adc
     _leitura_adc
   _mensagem_inicial
     _escreve_cmd_lcd
       _delay
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay

 _isr (ROOT)
   _recebe_dado_uart
   i2_write_timer_zero

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     200      21       25.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     2D      2D       9       17.6%
BITBANK1           100      0       0       6        0.0%
BANK1              100     3F      E8       7       90.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     75      7D       5       78.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2C      45       1       73.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1D7      20        0.0%
DATA                 0      0     3D7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Jan 20 15:40:50 2022

        __end_of_mensagem_inicial 2D72                       get_fat@clst 0072  
                               _s 0041                      create_name@c 0068  
                    create_name@d 0060                      create_name@i 0067  
                    create_name@p 0061            __size_of_controle_shrc 000C  
                     _SSPSTATbits 000FC7                  ??_init_interrupt 001A  
                              l12 32CE                                l13 32C0  
                              l35 31F4                                l36 31C4  
                              l37 31CC                                l38 31CE  
                              l90 2CC4                                l91 2CB6  
                              l92 2CD4                                l84 2CA0  
                              l93 2CBC                                l85 2C96  
                              l94 2CC0                                l87 2C9A  
                              l88 2C9C                                l99 3330  
                     __CFG_BOR$ON 000000                                _rd 003B  
                   pf_mount@bsect 00C0                       __CFG_BORV$3 000000  
                   pf_mount@mclst 00BC                     pf_mount@fsize 00C4  
                    ?_escalonador 0001                     create_name@dj 0022  
                   pf_mount@tsect 00B8                     create_name@ni 0063  
                   create_name@si 0064                  ?_inicializa_shrc 0001  
                ?_inicializa_uart 0001                               l104 319E  
                             l131 301E                               l132 300C  
                             l133 3038                               l134 3010  
                             l135 3014                               l143 2382  
                             l136 3018                               l145 238E  
                             l138 303A                               l500 2ACC  
                             l334 2232                               l600 2BD2  
                             l520 1BDE                               l521 1BAA  
                             l610 2F56                               l522 1AF6  
                             l506 3224                               l611 2F5E  
                             l531 1BA8                               l507 3232  
                             l620 2F94                               l612 2F60  
                             l524 1B12                               l613 2F74  
                             l541 1BE0                               l614 2F76  
                             l630 2EFE                               l526 1B14  
                             l615 2F7E                               l607 2F4A  
                             l631 2F0C                               l535 1BDC  
                             l640 2E0A                               l616 2F80  
                             l608 2F4C                               l624 2F32  
                             l528 1B76                               l641 2E0C  
                             l617 2F88                               l609 2F54  
                             l625 2F12                               l801 20AC  
                             l545 1BE8                               l650 2E48  
                             l642 2E14                               l618 2F8A  
                             l626 2ED6                               l802 20B2  
                             l554 3354                               l651 2E4A  
                             l643 2E16                               l619 2F92  
                             l627 2F2E                               l723 2D82  
                             l803 2108                               l644 2E2A  
                             l636 2DF6                               l628 2EE2  
                             l724 2DA6                               l740 1700  
                             l732 161E                               l645 2E2C  
                             l637 2DF8                               l629 2EF0  
                             l646 2E34                               l638 2E00  
                             l670 3120                               l590 2B94  
                             l734 177E                               l910 1EE4  
                             l575 3368                               l647 2E36  
                             l639 2E02                               l591 2B9C  
                             l735 166E                               l823 2E70  
                             l648 2E3E                               l760 1332  
                             l592 2B9E                               l736 169A  
                             l816 32FC                               l577 3376  
                             l649 2E40                               l593 2BB2  
                             l585 2B7E                               l817 32EC  
                             l841 0CA8                               l770 1408  
                             l754 13CE                               l762 1390  
                             l594 2BB4                               l586 2B80  
                             l746 17C2                               l914 1F96  
                             l834 0EB8                               l498 2A3A  
                             l755 12F0                               l595 2BBC  
                             l587 2B88                               l747 1800  
                             l923 1F6E                               l915 1F40  
                             l843 0CC8                               l835 0B50  
                             l772 1462                               l764 13AC  
                             l596 2BBE                               l588 2B8A  
                             l852 29C6                               l836 0BE6  
                             l669 3148                               l781 14E4  
                             l765 13A8                               l757 1318  
                             l597 2BC6                               l589 2B92  
                             l925 1F7E                               l845 0CE6  
                             l941 25C4                               l790 1592  
                             l782 14B4                               l598 2BC8  
                             l838 0ED4                               l846 0CF4  
                             l870 2330                               l862 22B2  
                             l942 25BE                               l791 157E  
                             l759 134A                               l599 2BD0  
                             l792 157A                               l784 150E  
                             l960 1D42                               l848 0D9A  
                             l880 1924                               l872 2354  
                             l856 2910                               l952 26A2  
                             l944 25EE                               l785 14F6  
                             l769 141C                               l945 2632  
                             l794 15A8                               l778 14A2  
                             l970 0146                               l866 22EA  
                             l779 148A                               l971 017C  
                             l963 002A                               l883 1A24  
                             l875 18C6                               l788 155A  
                             l956 1C22                               l972 021C  
                             l884 19B2                               l981 05A0  
                             l973 036A                               l885 19D6  
                             l893 2776                               l949 26CE  
                             l797 202A                               l958 1C60  
                             l974 0464                               l966 0096  
                             l894 27B6                               l959 1CD0  
                             l975 048C                               l799 2074  
                             l976 04A2                               l968 0130  
                             l888 26EC                               l984 1D5C  
                             l992 0F16                               l977 04AC  
                             l969 013C                               l978 0550  
                             l986 1DA0                               l994 0F2A  
                             l987 1DAE                               l996 126C  
                             l997 0FB6                               l998 115E  
                             l999 10D8                               _PCL 000FF9  
                             _PR2 000FCB                       get_clust@fs 0026  
                ??_init_oscilador 001A                               _isr 0008  
                             _txt 0156                               prod 000FF3  
                             tosl 000FFD                               wreg 000FE8  
                    __CFG_FOSC$HS 000000                      disk_readp@rd 0060  
                  create_name@cvt 60D1         __size_of_write_timer_zero 0012  
                  create_name@sfn 0065                      __CFG_LVP$OFF 000000  
         ??_escreve_frase_ram_lcd 001F                      __CFG_WDT$OFF 000000  
                            l1000 1066                              l1001 1096  
                            l1002 10BC                              l1003 112A  
                            l1004 11AA                              l1013 0674  
                            l1006 11BC                              l1030 09F4  
                            l1022 07AA                              l1031 0A42  
                            l1023 09A8                              l1015 0688  
                            l1008 11C4                              l1032 0AF8  
                            l1024 08C8                              l1016 06F2  
                            l1009 1232                              l1033 0AE6  
                            l1025 0856                              l1017 06DC  
                            l1026 0886                              l1130 27EE  
                            l1027 08AC                              l1019 071E  
                            l1131 2806                              l1028 091A  
                            l1029 0996                              l1133 2834  
                            l1134 2828                              l1137 2868  
                            l1082 30D8                              l1138 2876  
                            l1083 30EC                              l1139 288C  
                            l1440 2C1C                              l1443 2C5C  
                            l1444 2C6A                              l1439 2C28  
            __size_of_acende_led4 0024                              l6014 336E  
                            l6008 3360                              l6304 14B4  
                            l5432 2386                              l5426 237A  
                            l7054 048C                              l7048 0464  
                            l6512 19B2                              l6434 32EC  
                            l6298 148A                              l7178 08AC  
                            l7284 10BC                              ?_isr 0001  
                            l6750 16BC                              l6586 2DC0  
                            l6770 1722                              l6846 2068  
                            l6952 1D42                              l6944 1CD0  
                            l7498 2A32             _escreve_caractere_lcd 2DE6  
                            STR_1 61B7                              STR_2 627B  
                            STR_3 6211                              STR_4 61D8  
                            STR_5 61A6                              STR_6 6255  
                            STR_7 6270                              STR_8 61A6  
                            STR_9 6248                    timer_dois@flag 0043  
                            _BRGH 007D62                              _CREN 007D5C  
                            _T0IF 007F92                              _LATB 000F8A  
                            _PIE1 000F9D                              u7110 18C2  
                            u7030 2E80                 _valor_leitura_adc 0130  
                            u8000 049E                              u7040 2EBE  
                            u5345 3046                              u5530 2448  
                            u7060 22AE                              u4724 33D2  
                            _RCIF 007CF5                              u4725 33CE  
                            u6430 337C                              u7310 2DC0  
                            u4734 33B4                              u4735 33B0  
                            u5480 3342                              u5490 3344  
                            u8035 05D4                              u7155 1930  
                            u7430 27CC                              u8070 1DAA  
                            u8310 1010                              u6640 3076  
                            u8160 0800                              u6705 1298  
                            u7345 2902                              u7290 2BF4  
                            u7610 1722                              u7370 2752  
                            u8315 1006                              u6660 3140  
                            u6820 151A                              u7540 1FD2  
                            u6900 0B3E                              u7380 2754  
                            u7541 1FCE                              u7365 272A  
                            u8165 07F6                              u6646 3078  
                            u6670 3168                              u7550 1FD4  
                            u7470 1F26                              u8430 2838  
                            u9207 20D6                              u6920 0B8E  
                            u9217 15EC                              u8505 2206  
                            u6667 3136                              u9307 2DD8  
                            u9227 1638                              u6915 0B7A  
                            u6780 1470                              u6677 315E  
                            u6765 13E0                              u9317 12C0  
                            u9237 165A                              u9157 2D5E  
                            u7590 16BC                              u8630 2D06  
                    get_clust@dir 001A                              u9407 31D6  
                            u9327 1308                              u9247 16C4  
                            u7655 1FFC                              u9167 2AF2  
                            u8640 2D1E                              u9417 31DE  
                            u9337 1360                              u9257 1738  
                            u8465 212C                              u9177 2B0E  
                            u7850 2C2C                              u6890 0B1E  
                            u7690 20BA                              u8570 1BE6  
                            u8618 2A8A                              u9427 31E6  
                            u9347 1432                              u9267 1770  
                            u8619 2A9E                              u8475 2178  
                            u9187 2B2A                              u9437 31EE  
                            u9357 1530                              u9277 17B4  
                            u9197 2044                              u7790 1C5C  
                            u6990 0DDC                              u9447 3440  
                            u9367 15B2                              u9287 17CE  
                            u6975 0CD4                              u8495 21BC  
                            u9457 3448                              u9377 3322  
                            u9297 184C                              u9387 318A  
                            u6995 0DD2                              u7980 0476  
                            u9397 31AC                              u7965 0382  
                            _TMR2 000FCC                              _SPEN 007D5F  
                            _TRMT 007D61                              _TXEN 007D65  
                            _SYNC 007D64                              _dado 0045  
                            _flag 0037                              _main 31FE  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            indf0 000FEF                              fsr2h 000FDA  
                            fsr0l 000FE9                              indf1 000FE7  
                            indf2 000FDF                              fsr1l 000FE1  
                            fsr2l 000FD9                              btemp 0046  
   __size_of_leitura_continua_adc 0128                              prodh 000FF4  
                            prodl 000FF3                              start 000E  
                   __CFG_IESO$OFF 000000                     disk_readp@arr 022D  
                   disk_readp@ptr 006A                      disk_writep@i 0064  
                    disk_writep@j 0066                     __CFG_MCLRE$ON 000000  
                    ?_follow_path 00B3                      ___param_bank 000000  
                 create_name@path 0024                             ??_isr 0005  
        __size_of_recebe_dado_SPI 002A  __size_of_configura_baudrate_uart 0132  
                   __CFG_PLLDIV$5 000000                   __end_of___aldiv 289E  
                           ?_main 0001                             STR_10 622D  
                           STR_11 6203                             STR_20 6278  
                           STR_12 621F                             STR_13 6203  
                           STR_21 6255                             STR_14 61C8  
                           STR_15 61F5                             STR_16 625F  
                           STR_17 623B                             STR_18 61E7  
                           STR_19 6268                   __end_of___lldiv 2C7C  
                           _T0CON 000FD5                             _T2CON 000FCA  
                  _data_buffer_32 0171                      ?_leitura_adc 001A  
 __size_of_leitura_chaves_sistema 003C                             i2l360 3494  
                           i2l490 255C                             i2l491 2570  
                           i2l484 24F6                             i2l485 2568  
                           i2l486 250E                             i2l488 253C  
                           _RCREG 000FAE                             _RCSTA 000FAB  
                   get_clust@clst 0028                             _TMR0H 000FD7  
                           _TMR0L 000FD6                             _SPBRG 000FAF  
                   __CFG_USBDIV$1 000000                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
                           _TRISD 000F95                             _TRISE 000F96  
                           _TXREG 000FAD                             _TXSTA 000FAC  
                           _FatFs 0035            __end_ofcreate_name@cvt 6151  
                   __CFG_PWRT$OFF 000000               ___lmul@multiplicand 001E  
      __size_of_config_timer_dois 000C                    __CFG_FCMEN$OFF 000000  
      __size_of_config_timer_zero 001A                   __end_of_get_fat 0EE8  
                 __end_of_command 30C8                             _delay 335C  
                _envia_dados_shrc 31BA                   __end_of_mem_cmp 2EC8  
                 __end_of_mem_set 330E                   __end_of_pf_read 1278  
                 __end_of_pf_open 1E96          __size_of_escreve_cmd_lcd 008C  
                           _reset 2D72                     _controle_shrc 34BE  
                           pclath 000FFA                             tablat 000FF5  
                 __end_of_proceed 34BE                             plusw2 000FDB  
                           status 000FD8                             wtemp6 0047  
                  disk_readp@buff 006F                     disk_writep@sc 0029  
                   disk_writep@wr 0026                   __initialization 2FA2  
             disk_initialize@buff 0069               disk_initialize@stat 0066  
                    __end_of_main 3240                      clust2sect@fs 002A  
              _inicializa_tarefas 327C                   escalonador@cont 00D4  
                          ??_main 002D               disk_readp@start_add 006B  
                   __activetblptr 000002               ?_inicializa_tarefas 0001  
                 __CFG_CCP2MX$OFF 000000                            ?_delay 0001  
          ?_escreve_caractere_lcd 0001                            _ADCON0 000FC2  
                          _ADCON1 000FC1                    ?_controle_shrc 0001  
                          _ADRESH 000FC4                            _ADRESL 000FC3  
                          ?_reset 0001                            _INT0IE 007F94  
                          _INT0IF 007F91                     ?_dummy_clocks 0001  
                          _PCLATH 000FFA                            _INTCON 000FF2  
                          i2l5706 2506           __size_of_inicializa_SPI 007C  
                          _TMR0IF 007F92                            _TMR2IF 007CF1  
                          _SDCard 1A38          __end_of_recebe_dado_uart 3498  
                          _SPPCFG 000F63                            _SPPCON 000F65  
                          _SSPBUF 000FC9            _leitura_chaves_sistema 3240  
                __end_of_check_fs 1D46              ??_inicializa_tarefas 001A  
            __size_of_create_name 0144          __size_of_disk_initialize 02BA  
      __end_of_posicao_cursor_lcd 2F38                  __end_of_dir_find 27D2  
                __end_of_dir_next 1A38            __size_of_init_hardware 0016  
                          _Result 0042                            ___lmul 30C8  
                       ??___aldiv 0022                    __CFG_STVREN$ON 000000  
            __size_of_disk_writep 0140                         ??___lldiv 0022  
                          _folder 0100                            _estado 0044  
                __end_of_init_lcd 2B6E                            clear_0 2FCA  
                          clear_1 2FDC                            clear_2 2FE8  
                          clear_3 2FF4                  __end_of_pf_mount 0646  
                __end_of_readover 34D4                  __end_of_pf_write 0B04  
        configura_baudrate_uart@x 0068                       pf_read@buff 009A  
                     pf_read@clst 00B5                       pf_read@sect 00AD  
                     pf_read@rcnt 00BA                         ??_get_fat 0076  
                       ??_command 0023                         ??_mem_cmp 0020  
                       ??_mem_set 0020                         ??_pf_read 00A0  
                       ??_pf_open 00BC              __size_of_escalonador 00A4  
               ??_recebe_dado_SPI 001A                   acende_led4@flag 003D  
                __end_of_response 34A6                      __mediumconst 60D0  
                          reset@i 0028             write_timer_zero@timer 001C  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                         ??_proceed 001E  
                _write_timer_zero 3462                       pf_open@path 00BA  
       escreve_caractere_lcd@data 001C                    ??_dummy_clocks 001E  
                      __accesstop 0060           __end_of__initialization 2FFA  
                 __CFG_PBADEN$OFF 000000                __size_of_WriteSPI_ 004A  
                     pf_mount@buf 0094                       pf_mount@fmt 00C8  
                 disk_readp@count 0068                     ___rparam_used 000001  
               ??_escreve_cmd_lcd 001C                    __pcstackCOMRAM 0001  
               ?_ativa_latch_shrc 0001       __end_of_endereco_cursor_lcd 2FA2  
                    __pidataBANK1 33F6                 ?_mensagem_inicial 0001  
         _configura_baudrate_uart 211A                     __end_of_delay 3380  
            __size_of_follow_path 0116                ??_ativa_latch_shrc 001A  
                   __end_of_reset 2DE6                ??_mensagem_inicial 0020  
                     pf_write@btw 009C                _tarefa_em_execucao 003E  
      __end_ofi2_write_timer_zero 3486   configura_baudrate_uart@baudrate 0028  
                 ??_controle_shrc 001C                     _init_hardware 3426  
            __size_of_leitura_adc 0064                __size_of_get_clust 00C8  
                         ??_delay 001A                           ??_reset 0026  
    mensagem_inicial@msg_linha_um 0060                        __pbssBANK0 00D5  
                      __pbssBANK1 0100                    pf_write@remain 00AE  
  __size_of_escreve_frase_ram_lcd 0052     __end_of_escreve_frase_ram_lcd 3170  
                         ?_SDCard 0001         escreve_inteiro_uart@F3956 01E1  
           __end_of_shrc_seta_bit 33DC                           ?___lmul 001A  
        __end_of_envia_dados_shrc 31FE             mensagem_inicial@F4037 6162  
           mensagem_inicial@F4039 6151           __size_of_shrc_apaga_bit 001E  
               ??_disk_initialize 0060                    ___lmul@product 0022  
    __end_of_leitura_continua_adc 249E                 __end_of_WriteSPI_ 31BA  
                      _dir_rewind 224C                           _INTCON2 000FF1  
                         _INTCON3 000FF0                    ?_init_hardware 0001  
                       ?_check_fs 0072                        _disk_readp 1278  
                   ??_acende_led4 001D                    follow_path@dir 00B5  
                  follow_path@res 00B9                         ?_dir_find 00AB  
                       ?_dir_next 009A                           _SSPCON1 000FC6  
        __size_of_inicializa_shrc 0008          __size_of_inicializa_uart 0022  
                         _SSPSTAT 000FC7                        _clust2sect 2966  
                  _inicializa_SPI 2C7C                   __CFG_VREGEN$OFF 000000  
                       ?_init_lcd 0001                   __size_of_SDCard 01B2  
                       ?_pf_mount 007C                         ?_readover 001A  
                       ?_pf_write 009A                           __Hparam 0000  
       ??_configura_baudrate_uart 0060                           __Lparam 0000  
                 _dir_rewind$1885 006B                 __end_of_get_clust 2966  
                       ?_response 0001                           ___aldiv 27D2  
       shrc_apaga_bit@posicao_bit 001C                   __size_of___lmul 0056  
                         ___lldiv 2BFA              __end_of_dummy_clocks 32E2  
                         __pcinit 2FA2                        _init_ports 340E  
                         __ramtop 0800                      _get_fat$1825 008C  
                         __ptext0 31FE                           __ptext1 2CF8  
                         __ptext2 2376                           __ptext3 3008  
                         __ptext4 3240                           __ptext5 2AD0  
                         __ptext6 3426                           __ptext7 340E  
                         __ptext8 34D4                           __ptext9 3450  
                         _get_fat 0B04                           _command 306C  
                       _T0CONbits 000FD5                           _mem_cmp 2E58  
         i2write_timer_zero@timer 0003       endereco_cursor_lcd@endereco 001C  
                         _mem_set 32E2                           _pf_read 0EE8  
                    __size_of_isr 25B4           ??_escreve_caractere_lcd 001C  
                         _pf_open 1D46                        ??_check_fs 0078  
                ___aldiv@dividend 001A                           _proceed 34B2  
         __size_of_init_interrupt 0012                        ??_dir_find 00AF  
                      ??_dir_next 009C            __end_of_inicializa_SPI 2CF8  
                    pf_read@rbuff 00A9                    __pintcode_body 249E  
         ?_leitura_chaves_sistema 0001              end_of_initialization 2FFA  
                         isr@cont 0019        __end_ofleitura_chave@F3840 6195  
             __end_of_acende_led4 335C        __end_ofleitura_chave@F3842 6184  
      __end_ofleitura_chave@F3838 61A6           __size_of_init_oscilador 0008  
                   SDCard@FResult 0200                     __Lmediumconst 60D0  
                      ??_init_lcd 001D                           int_func 249E  
               ?_recebe_dado_uart 0001                        ??_pf_mount 007E  
                      ??_readover 001C                        ??_pf_write 00A0  
          write_timer_zero@timer0 001A                   ___lldiv@divisor 001E  
              ??_recebe_dado_uart 0001                   ___lldiv@counter 0026  
        envia_dados_shrc@contador 001A                        ??_response 001D  
                       _RCSTAbits 000FAB          __end_of_write_timer_zero 3474  
                ___aldiv@quotient 0024                           postdec1 000FE5  
                         postdec2 000FDD                   _recebe_dado_SPI 330E  
                         postinc0 000FEE                           postinc1 000FE6  
                         postinc2 000FDE                        dir_find@dj 00AB  
                       _PORTAbits 000F80                         _PORTCbits 000F82  
                       _PORTDbits 000F83                         _PORTEbits 000F84  
                 ??_init_hardware 001E                _posicao_cursor_lcd 2EC8  
                     ?_dir_rewind 0065                        dir_next@dj 009A  
                      dir_next@fs 00A3   __end_of_configura_baudrate_uart 224C  
                     ?_disk_readp 0060                         _TRISBbits 000F93  
                       _TRISCbits 000F94                         _TRISDbits 000F95  
                      get_fat@buf 0092                        get_fat@ofs 0090  
                 _escreve_cmd_lcd 2B6E    __end_of_leitura_chaves_sistema 327C  
             ?_posicao_cursor_lcd 001D                   ?_inicializa_SPI 0020  
                WriteSPI_@TempVar 001C                       ?_clust2sect 0026  
                      command@CMD 0024                        command@CRC 0022  
                disk_readp@length 0070                  disk_readp@offset 0066  
                disk_readp@sector 0062                     ??_create_name 0026  
                      command@arg 001E                  disk_initialize@i 0062  
                 disk_writep@buff 0068              _leitura_continua_adc 2376  
               ??_inicializa_shrc 001A                 ??_inicializa_uart 002C  
     __size_of_inicializa_tarefas 0038                    __end_of_SDCard 1BEA  
                   ??_disk_writep 0060                   command@argument 0025  
            ??_posicao_cursor_lcd 001E                    _shrc_apaga_bit 33A2  
           disk_initialize@count1 0064             disk_initialize@count2 0067  
                  __end_of___lmul 311E                     ??_escalonador 00D2  
                     ?_init_ports 0001                    clust2sect@clst 0026  
             start_initialization 2FA2                     WriteSPI_@dado 001D  
       __size_of_ativa_latch_shrc 0014                       _acende_led4 3338  
                     __end_of_isr 25BC         __size_of_mensagem_inicial 007A  
                      mem_cmp@cnt 001E                        mem_cmp@dst 001A  
                    pf_write@buff 009A                        mem_cmp@src 001C  
                    pf_write@clst 00B2                      pf_write@sect 00AA  
                    pf_write@wcnt 00B7                          ??_SDCard 002D  
              i2_write_timer_zero 3474             ?_leitura_continua_adc 0001  
         __end_of_recebe_dado_SPI 3338                   _disk_initialize 15C2  
                      mem_set@cnt 001E                        mem_set@dst 001A  
                      mem_set@val 001C               __size_of_dir_rewind 012A  
                _data_uart_recebe 0040             __size_of_dummy_clocks 002E  
                   ??_follow_path 002D            __end_of_shrc_apaga_bit 33C0  
             __size_of_disk_readp 034A               __end_of_create_name 1FDA  
             ?i2_write_timer_zero 0001                          ??___lmul 0022  
               ?_envia_dados_shrc 0001                        pf_read@btr 009C  
                     __pdataBANK1 01D0                  __CFG_LPT1OSC$OFF 000000  
             __size_of_clust2sect 00C6               __end_of_disk_writep 211A  
              ??_envia_dados_shrc 001A                        pf_open@dir 019D  
                      pf_open@res 01BD           __end_of_escreve_cmd_lcd 2BFA  
                   ??_leitura_adc 001C      __size_of_endereco_cursor_lcd 006A  
                     __pbssBIGRAM 022D                        pf_mount@fs 007C  
                     __pbssCOMRAM 002D                      _pf_read$2079 00AB  
                   __pcstackBANK0 0060                     __pcstackBANK1 0191  
                   __pcstackBANK2 0200                    _init_interrupt 3450  
            ??i2_write_timer_zero 0003               __end_of_escalonador 2AD0  
                       _WriteSPI_ 3170                 __size_of_check_fs 015C  
           __end_of_controle_shrc 34CA                      check_fs@sect 0074  
                      pf_write@cs 00B6                        pf_write@bw 009E  
                      pf_write@fs 00B9                 __size_of_dir_find 0100  
                    _dummy_clocks 32B4                    _init_oscilador 34D4  
               __size_of_dir_next 01BC               __size_of_init_ports 0018  
           _escreve_frase_ram_lcd 311E                 __size_of_init_lcd 009E  
               delay@contador_int 001B                 delay@contador_ext 001A  
               __size_of_pf_mount 0634                 __size_of_readover 000A  
                 ?_shrc_apaga_bit 0001                 __size_of_pf_write 04BE  
                       __pintcode 0008                     __pmediumconst 60D0  
                        SDCard@br 0201                          SDCard@fs 0203  
                        ?___aldiv 001A                          ?___lldiv 001A  
               __size_of_response 000E                         _get_clust 289E  
                   follow_path@dj 00B3                _sinaliza_int_timer 003F  
             __end_of_follow_path 26D2                          ?_get_fat 0072  
                        ?_command 001E                          ?_mem_cmp 001A  
          __end_of_init_interrupt 3462                          ?_mem_set 001A  
                        ?_pf_read 009A                          ?_pf_open 00BA  
                      reset@count 002A    __size_of_escreve_caractere_lcd 0072  
                      ?_WriteSPI_ 0001     __end_of_escreve_caractere_lcd 2E58  
                        ?_proceed 0001                    __size_of_delay 0024  
         __end_of_disk_initialize 187C               __end_of_leitura_adc 306C  
          __end_of_init_oscilador 34DC            __size_of_shrc_seta_bit 001C  
                  __size_of_reset 0074                         _p_tarefas 00D9  
          ??_leitura_continua_adc 0021                   ___aldiv@divisor 001E  
                 ___aldiv@counter 0022                       _create_name 1E96  
                        _LATBbits 000F8A                  ?_recebe_dado_SPI 0001  
                        _PIE1bits 000F9D                   follow_path@path 00B7  
                        _PIR1bits 000F9E                       _disk_writep 1FDA  
                        i2u597_40 2540                 ?_write_timer_zero 001A  
                       dir_find@c 00B1                leitura_chave@F3840 6184  
              leitura_chave@F3842 6173                leitura_chave@F3838 6195  
        posicao_cursor_lcd@coluna 001D                         dir_next@i 00A9  
              ??_write_timer_zero 001C        posicao_cursor_lcd@endereco 001F  
                      ?_get_clust 001A                         get_fat@bc 0096  
                       get_fat@fs 0098         __size_of_recebe_dado_uart 0012  
                       get_fat@wc 008E                       _escalonador 2A2C  
                      _ADCON0bits 000FC2                        _ADCON1bits 000FC1  
                      _ADCON2bits 000FC0                  ?_escreve_cmd_lcd 0001  
                    ??_dir_rewind 0067       escreve_frase_ram_lcd@buffer 001D  
                ??_inicializa_SPI 0022                   ?_init_interrupt 0001  
                    ??_disk_readp 0026                  _ativa_latch_shrc 343C  
                 _inicializa_shrc 34DC                   _inicializa_uart 3380  
                _mensagem_inicial 2CF8                   ?_init_oscilador 0001  
                    ??_clust2sect 0060                 ___lmul@multiplier 001A  
                       copy_data0 2FB6          ?_configura_baudrate_uart 0028  
          ?_escreve_frase_ram_lcd 001D      leitura_continua_adc@cont_int 0027  
        escreve_inteiro_lcd@F3966 01DA                          __Hrparam 0000  
              __end_of_dir_rewind 2376                       _info_chaves 016A  
                        __Lrparam 0000                       _follow_path 25BC  
              __end_of_disk_readp 15C2                         pf_read@br 009E  
                       pf_read@cs 00B9                         pf_read@dr 00A8  
                       pf_read@fs 00BC                     _shrc_seta_bit 33C0  
                       pf_open@dj 01C0                         pf_open@fs 01BE  
                       pf_open@sp 0191                  __size_of___aldiv 00CC  
                __size_of___lldiv 0082                      ??_init_ports 001A  
              __end_of_clust2sect 2A2C                       check_fs@buf 0072  
                       readover@a 001A                         pf_write@p 00A8  
                     _leitura_adc 3008                  __size_of_get_fat 03E4  
                __size_of_command 005C             __end_of_init_hardware 343C  
                        _check_fs 1BEA                  __size_of_mem_cmp 0070  
                __size_of_mem_set 002C                  __size_of_pf_read 0390  
                __size_of_pf_open 0150                      ?_acende_led4 0001  
                     ??_WriteSPI_ 001A                          _fileName 01D0  
                        __ptext10 33DC                          __ptext11 3462  
                        __ptext20 1A38                          __ptext12 34A6  
                        __ptext21 3338                          __ptext13 3380  
                        __ptext30 289E                          __ptext22 33C0  
                        __ptext14 211A                          __ptext31 26D2  
                        __ptext23 33A2                          __ptext15 27D2  
                        __ptext40 15C2                          __ptext32 2E58  
                        __ptext24 34CA                          __ptext16 327C  
                        __ptext41 2D72                          __ptext33 224C  
                        __ptext25 0646                          __ptext17 34DC  
                        __ptext50 311E                          __ptext42 2B6E  
                        __ptext34 187C                          __ptext26 1FDA  
                        __ptext18 2C7C                          __ptext51 2DE6  
                        __ptext43 1BEA                          __ptext35 0B04  
                        __ptext27 0EE8                          __ptext19 2A2C  
                        __ptext60 343C                          __ptext52 335C  
                        __ptext44 1278                          __ptext36 2966  
                        __ptext28 1D46                          __ptext53 32B4  
                        __ptext45 3498                          __ptext37 1E96  
                        __ptext29 25BC                          __ptext62 3474  
                        __ptext54 306C                          __ptext46 330E  
                        __ptext38 32E2                          __ptext63 3486  
                        __ptext55 3170                          __ptext47 34B2  
                        __ptext39 0012                          __ptext64 0000  
                        __ptext56 30C8                          __ptext48 2EC8  
                        __ptext57 2BFA                          __ptext49 2F38  
                        __ptext58 34BE                          __ptext59 31BA  
                        _dir_find 26D2                          _fileSize 0031  
                        _dir_next 187C                  __size_of_proceed 000C  
                ?_disk_initialize 0001                    _timeout_tarefa 0039  
                       reset@buff 002C        __end_of_inicializa_tarefas 32B4  
        i2write_timer_zero@timer0 0001                          _init_lcd 2AD0  
                   __size_of_main 0042                          _pf_mount 0012  
                        _readover 34CA               _endereco_cursor_lcd 2F38  
                        _pf_write 0646                __end_of_init_ports 3426  
                   dummy_clocks@i 0021                     dummy_clocks@n 0020  
        shrc_seta_bit@posicao_bit 001C                    ?_shrc_seta_bit 0001  
                        _response 3498       __size_of_posicao_cursor_lcd 0070  
                        int$flags 0046           posicao_cursor_lcd@linha 001E  
         inicializa_SPI@smp_phase 0021                     pf_read@remain 00B1  
                     ??_get_clust 001E          leitura_continua_adc@cont 0028  
         __end_of_inicializa_shrc 34E4           __end_of_inicializa_uart 33A2  
           __CFG_CPUDIV$OSC1_PLL2 000000              ?_endereco_cursor_lcd 0001  
                        mem_cmp@d 0023                          mem_cmp@r 0027  
                        mem_cmp@s 0025                        _INTCONbits 000FF2  
         inicializa_SPI@sync_mode 0022                          mem_set@d 0020  
                leitura_adc@canal 0020         __size_of_envia_dados_shrc 0044  
               _config_timer_dois 34A6                      _tempo_backup 00D5  
               _config_timer_zero 33DC            inicializa_SPI@bus_mode 0020  
                        intlevel2 0000                ?_config_timer_dois 0001  
        mensagem_inicial@msg_dois 0071                ?_config_timer_zero 0001  
                    _tempo_tarefa 002D      envia_dados_shrc@data_to_shrc 001B  
                ??_shrc_apaga_bit 001A                  ___lldiv@dividend 001A  
             ??_config_timer_dois 001A                        _OSCCONbits 000FD3  
             ??_config_timer_zero 001E                  _recebe_dado_uart 3486  
           ??_endereco_cursor_lcd 001C          ??_leitura_chaves_sistema 001A  
                    response@buff 001D                  ___lldiv@quotient 0022  
                  dir_rewind@clst 0071                       dir_find@dir 00AD  
                     dir_find@res 00B2         __end_of_config_timer_dois 34B2  
                    ___aldiv@sign 0023         __end_of_config_timer_zero 33F6  
     __size_ofi2_write_timer_zero 0012                       _SSPCON1bits 000FC6  
                    dir_next@clst 00A5            escreve_cmd_lcd@comando 001C  
         recebe_dado_SPI@temp_var 001C                      ?_create_name 0022  
                    dir_rewind@dj 0065                      dir_rewind@fs 006F  
                 ??_shrc_seta_bit 001A     __end_ofmensagem_inicial@F4037 6173  
   __end_ofmensagem_inicial@F4039 6162                      ?_disk_writep 0026  
        __end_of_ativa_latch_shrc 3450  
