

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Jan 18 20:10:31 2022

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    76                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    82                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    83  0000                     
    84                           ; Version 1.45
    85                           ; Generated 16/11/2017 GMT
    86                           ; 
    87                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    88                           ; All rights reserved.
    89                           ; 
    90                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    91                           ; 
    92                           ; Redistribution and use in source and binary forms, with or without modification, are
    93                           ; permitted provided that the following conditions are met:
    94                           ; 
    95                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    96                           ;        conditions and the following disclaimer.
    97                           ; 
    98                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    99                           ;        of conditions and the following disclaimer in the documentation and/or other
   100                           ;        materials provided with the distribution.
   101                           ; 
   102                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   103                           ;        software without specific prior written permission.
   104                           ; 
   105                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   106                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   107                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   108                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   109                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   110                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   111                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   112                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   113                           ; 
   114                           ; 
   115                           ; Code-generator required, PIC18F4550 Definitions
   116                           ; 
   117                           ; SFR Addresses
   118  0000                     
   119                           	psect	idataBANK1
   120  003178                     __pidataBANK1:
   121                           	opt stack 0
   122                           
   123                           ;initializer for _fileName
   124  003178  63                 	db	99
   125  003179  68                 	db	104
   126  00317A  65                 	db	101
   127  00317B  63                 	db	99
   128  00317C  6B                 	db	107
   129  00317D  2E                 	db	46
   130  00317E  74                 	db	116
   131  00317F  78                 	db	120
   132  003180  74                 	db	116
   133  003181  00                 	db	0
   134                           
   135                           ;initializer for escreve_inteiro_lcd@F3966
   136  003182  30                 	db	48
   137  003183  30                 	db	48
   138  003184  30                 	db	48
   139  003185  30                 	db	48
   140  003186  30                 	db	48
   141  003187  30                 	db	48
   142  003188  00                 	db	0
   143                           
   144                           ;initializer for escreve_inteiro_uart@F3956
   145  003189  30                 	db	48
   146  00318A  30                 	db	48
   147  00318B  30                 	db	48
   148  00318C  30                 	db	48
   149  00318D  30                 	db	48
   150  00318E  30                 	db	48
   151  00318F  00                 	db	0
   152                           
   153                           	psect	mediumconst
   154  007E82                     __pmediumconst:
   155                           	opt stack 0
   156  007E82  00                 	db	0
   157  007E83                     create_name@cvt:
   158                           	opt stack 0
   159  007E83  80                 	db	128
   160  007E84  9A                 	db	154
   161  007E85  90                 	db	144
   162  007E86  41                 	db	65
   163  007E87  8E                 	db	142
   164  007E88  41                 	db	65
   165  007E89  8F                 	db	143
   166  007E8A  80                 	db	128
   167  007E8B  45                 	db	69
   168  007E8C  45                 	db	69
   169  007E8D  45                 	db	69
   170  007E8E  49                 	db	73
   171  007E8F  49                 	db	73
   172  007E90  49                 	db	73
   173  007E91  8E                 	db	142
   174  007E92  8F                 	db	143
   175  007E93  90                 	db	144
   176  007E94  92                 	db	146
   177  007E95  92                 	db	146
   178  007E96  4F                 	db	79
   179  007E97  99                 	db	153
   180  007E98  4F                 	db	79
   181  007E99  55                 	db	85
   182  007E9A  55                 	db	85
   183  007E9B  59                 	db	89
   184  007E9C  99                 	db	153
   185  007E9D  9A                 	db	154
   186  007E9E  9B                 	db	155
   187  007E9F  9C                 	db	156
   188  007EA0  9D                 	db	157
   189  007EA1  9E                 	db	158
   190  007EA2  9F                 	db	159
   191  007EA3  41                 	db	65
   192  007EA4  49                 	db	73
   193  007EA5  4F                 	db	79
   194  007EA6  55                 	db	85
   195  007EA7  A5                 	db	165
   196  007EA8  A5                 	db	165
   197  007EA9  A6                 	db	166
   198  007EAA  A7                 	db	167
   199  007EAB  A8                 	db	168
   200  007EAC  A9                 	db	169
   201  007EAD  AA                 	db	170
   202  007EAE  AB                 	db	171
   203  007EAF  AC                 	db	172
   204  007EB0  21                 	db	33
   205  007EB1  AE                 	db	174
   206  007EB2  AF                 	db	175
   207  007EB3  B0                 	db	176
   208  007EB4  B1                 	db	177
   209  007EB5  B2                 	db	178
   210  007EB6  B3                 	db	179
   211  007EB7  B4                 	db	180
   212  007EB8  B5                 	db	181
   213  007EB9  B6                 	db	182
   214  007EBA  B7                 	db	183
   215  007EBB  B8                 	db	184
   216  007EBC  B9                 	db	185
   217  007EBD  BA                 	db	186
   218  007EBE  BB                 	db	187
   219  007EBF  BC                 	db	188
   220  007EC0  BD                 	db	189
   221  007EC1  BE                 	db	190
   222  007EC2  BF                 	db	191
   223  007EC3  C0                 	db	192
   224  007EC4  C1                 	db	193
   225  007EC5  C2                 	db	194
   226  007EC6  C3                 	db	195
   227  007EC7  C4                 	db	196
   228  007EC8  C5                 	db	197
   229  007EC9  C6                 	db	198
   230  007ECA  C7                 	db	199
   231  007ECB  C8                 	db	200
   232  007ECC  C9                 	db	201
   233  007ECD  CA                 	db	202
   234  007ECE  CB                 	db	203
   235  007ECF  CC                 	db	204
   236  007ED0  CD                 	db	205
   237  007ED1  CE                 	db	206
   238  007ED2  CF                 	db	207
   239  007ED3  D0                 	db	208
   240  007ED4  D1                 	db	209
   241  007ED5  D2                 	db	210
   242  007ED6  D3                 	db	211
   243  007ED7  D4                 	db	212
   244  007ED8  D5                 	db	213
   245  007ED9  D6                 	db	214
   246  007EDA  D7                 	db	215
   247  007EDB  D8                 	db	216
   248  007EDC  D9                 	db	217
   249  007EDD  DA                 	db	218
   250  007EDE  DB                 	db	219
   251  007EDF  DC                 	db	220
   252  007EE0  DD                 	db	221
   253  007EE1  DE                 	db	222
   254  007EE2  DF                 	db	223
   255  007EE3  E0                 	db	224
   256  007EE4  E1                 	db	225
   257  007EE5  E2                 	db	226
   258  007EE6  E3                 	db	227
   259  007EE7  E4                 	db	228
   260  007EE8  E5                 	db	229
   261  007EE9  E6                 	db	230
   262  007EEA  E7                 	db	231
   263  007EEB  E8                 	db	232
   264  007EEC  E9                 	db	233
   265  007EED  EA                 	db	234
   266  007EEE  EB                 	db	235
   267  007EEF  EC                 	db	236
   268  007EF0  ED                 	db	237
   269  007EF1  EE                 	db	238
   270  007EF2  EF                 	db	239
   271  007EF3  F0                 	db	240
   272  007EF4  F1                 	db	241
   273  007EF5  F2                 	db	242
   274  007EF6  F3                 	db	243
   275  007EF7  F4                 	db	244
   276  007EF8  F5                 	db	245
   277  007EF9  F6                 	db	246
   278  007EFA  F7                 	db	247
   279  007EFB  F8                 	db	248
   280  007EFC  F9                 	db	249
   281  007EFD  FA                 	db	250
   282  007EFE  FB                 	db	251
   283  007EFF  FC                 	db	252
   284  007F00  FD                 	db	253
   285  007F01  FE                 	db	254
   286  007F02  FF                 	db	255
   287  007F03                     __end_ofcreate_name@cvt:
   288                           	opt stack 0
   289  007F03                     mensagem_inicial@F4029:
   290                           	opt stack 0
   291  007F03  20                 	db	32
   292  007F04  31                 	db	49
   293  007F05  38                 	db	56
   294  007F06  2F                 	db	47
   295  007F07  30                 	db	48
   296  007F08  31                 	db	49
   297  007F09  2F                 	db	47
   298  007F0A  32                 	db	50
   299  007F0B  30                 	db	48
   300  007F0C  32                 	db	50
   301  007F0D  32                 	db	50
   302  007F0E  20                 	db	32
   303  007F0F  20                 	db	32
   304  007F10  20                 	db	32
   305  007F11  00                 	db	0
   306  007F12  00                 	db	0
   307  007F13  00                 	db	0
   308  007F14                     __end_ofmensagem_inicial@F4029:
   309                           	opt stack 0
   310  007F14                     mensagem_inicial@F4027:
   311                           	opt stack 0
   312  007F14  53                 	db	83
   313  007F15  44                 	db	68
   314  007F16  43                 	db	67
   315  007F17  61                 	db	97
   316  007F18  72                 	db	114
   317  007F19  64                 	db	100
   318  007F1A  20                 	db	32
   319  007F1B  49                 	db	73
   320  007F1C  6E                 	db	110
   321  007F1D  69                 	db	105
   322  007F1E  74                 	db	116
   323  007F1F  20                 	db	32
   324  007F20  20                 	db	32
   325  007F21  20                 	db	32
   326  007F22  00                 	db	0
   327  007F23  00                 	db	0
   328  007F24  00                 	db	0
   329  007F25                     __end_ofmensagem_inicial@F4027:
   330                           	opt stack 0
   331  007F25                     leitura_chave@F3842:
   332                           	opt stack 0
   333  007F25  20                 	db	32
   334  007F26  49                 	db	73
   335  007F27  67                 	db	103
   336  007F28  6E                 	db	110
   337  007F29  20                 	db	32
   338  007F2A  4F                 	db	79
   339  007F2B  6E                 	db	110
   340  007F2C  00                 	db	0
   341  007F2D  00                 	db	0
   342  007F2E  00                 	db	0
   343  007F2F  00                 	db	0
   344  007F30  00                 	db	0
   345  007F31  00                 	db	0
   346  007F32  00                 	db	0
   347  007F33  00                 	db	0
   348  007F34  00                 	db	0
   349  007F35  00                 	db	0
   350  007F36                     __end_ofleitura_chave@F3842:
   351                           	opt stack 0
   352  007F36                     leitura_chave@F3840:
   353                           	opt stack 0
   354  007F36  20                 	db	32
   355  007F37  49                 	db	73
   356  007F38  67                 	db	103
   357  007F39  6E                 	db	110
   358  007F3A  20                 	db	32
   359  007F3B  43                 	db	67
   360  007F3C  72                 	db	114
   361  007F3D  61                 	db	97
   362  007F3E  6E                 	db	110
   363  007F3F  6B                 	db	107
   364  007F40  00                 	db	0
   365  007F41  00                 	db	0
   366  007F42  00                 	db	0
   367  007F43  00                 	db	0
   368  007F44  00                 	db	0
   369  007F45  00                 	db	0
   370  007F46  00                 	db	0
   371  007F47                     __end_ofleitura_chave@F3840:
   372                           	opt stack 0
   373  007F47                     leitura_chave@F3838:
   374                           	opt stack 0
   375  007F47  20                 	db	32
   376  007F48  49                 	db	73
   377  007F49  67                 	db	103
   378  007F4A  6E                 	db	110
   379  007F4B  20                 	db	32
   380  007F4C  4F                 	db	79
   381  007F4D  66                 	db	102
   382  007F4E  66                 	db	102
   383  007F4F  00                 	db	0
   384  007F50  00                 	db	0
   385  007F51  00                 	db	0
   386  007F52  00                 	db	0
   387  007F53  00                 	db	0
   388  007F54  00                 	db	0
   389  007F55  00                 	db	0
   390  007F56  00                 	db	0
   391  007F57  00                 	db	0
   392  007F58                     __end_ofleitura_chave@F3838:
   393                           	opt stack 0
   394  0000                     _PORTDbits	set	3971
   395  0000                     _TRISDbits	set	3989
   396  0000                     _PCL	set	4089
   397  0000                     _PCLATH	set	4090
   398  0000                     _RCSTA	set	4011
   399  0000                     _TXSTA	set	4012
   400  0000                     _RCREG	set	4014
   401  0000                     _RCSTAbits	set	4011
   402  0000                     _TXREG	set	4013
   403  0000                     _TRISCbits	set	3988
   404  0000                     _SPBRG	set	4015
   405  0000                     _PR2	set	4043
   406  0000                     _TMR2	set	4044
   407  0000                     _T2CON	set	4042
   408  0000                     _OSCCONbits	set	4051
   409  0000                     _TRISE	set	3990
   410  0000                     _TRISC	set	3988
   411  0000                     _TRISA	set	3986
   412  0000                     _TRISD	set	3989
   413  0000                     _LATB	set	3978
   414  0000                     _TRISB	set	3987
   415  0000                     _T0CONbits	set	4053
   416  0000                     _TMR0L	set	4054
   417  0000                     _TMR0H	set	4055
   418  0000                     _INTCON2bits	set	4081
   419  0000                     _IPR1bits	set	3999
   420  0000                     _PIE1bits	set	3997
   421  0000                     _PIE1	set	3997
   422  0000                     _INTCON3	set	4080
   423  0000                     _INTCON2	set	4081
   424  0000                     _INTCON	set	4082
   425  0000                     _SPPCFG	set	3939
   426  0000                     _SPPCON	set	3941
   427  0000                     _T0CON	set	4053
   428  0000                     _PORTEbits	set	3972
   429  0000                     _PORTAbits	set	3968
   430  0000                     _PORTCbits	set	3970
   431  0000                     _ADRESL	set	4035
   432  0000                     _ADRESH	set	4036
   433  0000                     _ADCON0	set	4034
   434  0000                     _ADCON0bits	set	4034
   435  0000                     _ADCON2bits	set	4032
   436  0000                     _ADCON1bits	set	4033
   437  0000                     _ADCON1	set	4033
   438  0000                     _SSPCON1	set	4038
   439  0000                     _SSPBUF	set	4041
   440  0000                     _PIR1bits	set	3998
   441  0000                     _SSPSTATbits	set	4039
   442  0000                     _SSPCON1bits	set	4038
   443  0000                     _INTCONbits	set	4082
   444  0000                     _LATBbits	set	3978
   445  0000                     _INT0IE	set	32660
   446  0000                     _INT0IF	set	32657
   447  0000                     _T0IF	set	32658
   448  0000                     _TMR0IF	set	32658
   449  0000                     _RCIF	set	31989
   450  0000                     _TRMT	set	32097
   451  0000                     _TXEN	set	32101
   452  0000                     _CREN	set	32092
   453  0000                     _SPEN	set	32095
   454  0000                     _SYNC	set	32100
   455  0000                     _BRGH	set	32098
   456  0000                     _TMR2IF	set	31985
   457  007F58                     STR_7:
   458  007F58  73                 	db	115	;'s'
   459  007F59  79                 	db	121	;'y'
   460  007F5A  73                 	db	115	;'s'
   461  007F5B  74                 	db	116	;'t'
   462  007F5C  20                 	db	32
   463  007F5D  69                 	db	105	;'i'
   464  007F5E  6E                 	db	110	;'n'
   465  007F5F  69                 	db	105	;'i'
   466  007F60  63                 	db	99	;'c'
   467  007F61  69                 	db	105	;'i'
   468  007F62  61                 	db	97	;'a'
   469  007F63  6C                 	db	108	;'l'
   470  007F64  69                 	db	105	;'i'
   471  007F65  7A                 	db	122	;'z'
   472  007F66  65                 	db	101	;'e'
   473  007F67  64                 	db	100	;'d'
   474  007F68  00                 	db	0
   475  007F69                     STR_1:
   476  007F69  53                 	db	83	;'S'
   477  007F6A  50                 	db	80	;'P'
   478  007F6B  49                 	db	73	;'I'
   479  007F6C  20                 	db	32
   480  007F6D  63                 	db	99	;'c'
   481  007F6E  6F                 	db	111	;'o'
   482  007F6F  6E                 	db	110	;'n'
   483  007F70  66                 	db	102	;'f'
   484  007F71  69                 	db	105	;'i'
   485  007F72  67                 	db	103	;'g'
   486  007F73  75                 	db	117	;'u'
   487  007F74  72                 	db	114	;'r'
   488  007F75  61                 	db	97	;'a'
   489  007F76  64                 	db	100	;'d'
   490  007F77  61                 	db	97	;'a'
   491  007F78  21                 	db	33
   492  007F79  00                 	db	0
   493  007F7A                     STR_6:
   494  007F7A  6D                 	db	109	;'m'
   495  007F7B  6F                 	db	111	;'o'
   496  007F7C  75                 	db	117	;'u'
   497  007F7D  6E                 	db	110	;'n'
   498  007F7E  74                 	db	116	;'t'
   499  007F7F  20                 	db	32
   500  007F80  66                 	db	102	;'f'
   501  007F81  69                 	db	105	;'i'
   502  007F82  6C                 	db	108	;'l'
   503  007F83  65                 	db	101	;'e'
   504  007F84  20                 	db	32
   505  007F85  73                 	db	115	;'s'
   506  007F86  79                 	db	121	;'y'
   507  007F87  73                 	db	115	;'s'
   508  007F88  00                 	db	0
   509  007F89                     STR_14:
   510  007F89  43                 	db	67	;'C'
   511  007F8A  61                 	db	97	;'a'
   512  007F8B  72                 	db	114	;'r'
   513  007F8C  74                 	db	116	;'t'
   514  007F8D  E3                 	db	-29
   515  007F8E  6F                 	db	111	;'o'
   516  007F8F  20                 	db	32
   517  007F90  41                 	db	65	;'A'
   518  007F91  63                 	db	99	;'c'
   519  007F92  65                 	db	101	;'e'
   520  007F93  69                 	db	105	;'i'
   521  007F94  74                 	db	116	;'t'
   522  007F95  6F                 	db	111	;'o'
   523  007F96  00                 	db	0
   524  007F97                     STR_5:
   525  007F97  20                 	db	32
   526  007F98  20                 	db	32
   527  007F99  20                 	db	32
   528  007F9A  20                 	db	32
   529  007F9B  20                 	db	32
   530  007F9C  20                 	db	32
   531  007F9D  20                 	db	32
   532  007F9E  20                 	db	32
   533  007F9F  20                 	db	32
   534  007FA0  20                 	db	32
   535  007FA1  20                 	db	32
   536  007FA2  20                 	db	32
   537  007FA3  20                 	db	32
   538  007FA4  00                 	db	0
   539  007FA5                     STR_4:
   540  007FA5  41                 	db	65	;'A'
   541  007FA6  74                 	db	116	;'t'
   542  007FA7  74                 	db	116	;'t'
   543  007FA8  65                 	db	101	;'e'
   544  007FA9  6D                 	db	109	;'m'
   545  007FAA  70                 	db	112	;'p'
   546  007FAB  74                 	db	116	;'t'
   547  007FAC  69                 	db	105	;'i'
   548  007FAD  6E                 	db	110	;'n'
   549  007FAE  67                 	db	103	;'g'
   550  007FAF  20                 	db	32
   551  007FB0  74                 	db	116	;'t'
   552  007FB1  6F                 	db	111	;'o'
   553  007FB2  00                 	db	0
   554  007FB3                     STR_12:
   555  007FB3  6C                 	db	108	;'l'
   556  007FB4  65                 	db	101	;'e'
   557  007FB5  6E                 	db	110	;'n'
   558  007FB6  64                 	db	100	;'d'
   559  007FB7  6F                 	db	111	;'o'
   560  007FB8  20                 	db	32
   561  007FB9  61                 	db	97	;'a'
   562  007FBA  72                 	db	114	;'r'
   563  007FBB  71                 	db	113	;'q'
   564  007FBC  75                 	db	117	;'u'
   565  007FBD  69                 	db	105	;'i'
   566  007FBE  76                 	db	118	;'v'
   567  007FBF  6F                 	db	111	;'o'
   568  007FC0  00                 	db	0
   569  007FC1                     STR_11:
   570  007FC1  53                 	db	83	;'S'
   571  007FC2  44                 	db	68	;'D'
   572  007FC3  43                 	db	67	;'C'
   573  007FC4  61                 	db	97	;'a'
   574  007FC5  72                 	db	114	;'r'
   575  007FC6  64                 	db	100	;'d'
   576  007FC7  20                 	db	32
   577  007FC8  65                 	db	101	;'e'
   578  007FC9  72                 	db	114	;'r'
   579  007FCA  72                 	db	114	;'r'
   580  007FCB  6F                 	db	111	;'o'
   581  007FCC  72                 	db	114	;'r'
   582  007FCD  00                 	db	0
   583  007FCE                     STR_13:
   584  007FCE  74                 	db	116	;'t'
   585  007FCF  72                 	db	114	;'r'
   586  007FD0  61                 	db	97	;'a'
   587  007FD1  76                 	db	118	;'v'
   588  007FD2  6F                 	db	111	;'o'
   589  007FD3  75                 	db	117	;'u'
   590  007FD4  20                 	db	32
   591  007FD5  61                 	db	97	;'a'
   592  007FD6  71                 	db	113	;'q'
   593  007FD7  75                 	db	117	;'u'
   594  007FD8  69                 	db	105	;'i'
   595  007FD9  00                 	db	0
   596  007FDA                     STR_8:
   597  007FDA  63                 	db	99	;'c'
   598  007FDB  68                 	db	104	;'h'
   599  007FDC  65                 	db	101	;'e'
   600  007FDD  63                 	db	99	;'c'
   601  007FDE  6B                 	db	107	;'k'
   602  007FDF  2E                 	db	46
   603  007FE0  74                 	db	116	;'t'
   604  007FE1  78                 	db	120	;'x'
   605  007FE2  74                 	db	116	;'t'
   606  007FE3  00                 	db	0
   607  007FE4                     STR_15:
   608  007FE4  45                 	db	69	;'E'
   609  007FE5  72                 	db	114	;'r'
   610  007FE6  72                 	db	114	;'r'
   611  007FE7  6F                 	db	111	;'o'
   612  007FE8  72                 	db	114	;'r'
   613  007FE9  21                 	db	33
   614  007FEA  21                 	db	33
   615  007FEB  21                 	db	33
   616  007FEC  00                 	db	0
   617  007FED                     STR_9:
   618  007FED  53                 	db	83	;'S'
   619  007FEE  44                 	db	68	;'D'
   620  007FEF  5F                 	db	95	;'_'
   621  007FF0  43                 	db	67	;'C'
   622  007FF1  61                 	db	97	;'a'
   623  007FF2  72                 	db	114	;'r'
   624  007FF3  64                 	db	100	;'d'
   625  007FF4  00                 	db	0
   626  007FF5                     STR_2:
   627  007FF5  74                 	db	116	;'t'
   628  007FF6  41                 	db	65	;'A'
   629  007FF7  41                 	db	65	;'A'
   630  007FF8  41                 	db	65	;'A'
   631  007FF9  41                 	db	65	;'A'
   632  007FFA  00                 	db	0
   633  007FFB  0D                 	db	13
   634  007FFC  0A                 	db	10
   635  007FFD  00                 	db	0
   636  007FFE  00                 	db	0	; dummy byte at the end
   637  0000                     
   638                           ; #config settings
   639                           
   640                           	psect	cinit
   641  002D4E                     __pcinit:
   642                           	opt stack 0
   643  002D4E                     start_initialization:
   644                           	opt stack 0
   645  002D4E                     __initialization:
   646                           	opt stack 0
   647                           
   648                           ; Initialize objects allocated to BANK1 (24 bytes)
   649                           ; load TBLPTR registers with __pidataBANK1
   650  002D4E  0E78               	movlw	low __pidataBANK1
   651  002D50  6EF6               	movwf	tblptrl,c
   652  002D52  0E31               	movlw	high __pidataBANK1
   653  002D54  6EF7               	movwf	tblptrh,c
   654  002D56  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   655  002D58  6EF8               	movwf	tblptru,c
   656  002D5A  EE01  F0D7         	lfsr	0,__pdataBANK1
   657  002D5E  EE10 F018          	lfsr	1,24
   658  002D62                     copy_data0:
   659  002D62  0009               	tblrd		*+
   660  002D64  CFF5 FFEE          	movff	tablat,postinc0
   661  002D68  50E5               	movf	postdec1,w,c
   662  002D6A  50E1               	movf	fsr1l,w,c
   663  002D6C  E1FA               	bnz	copy_data0
   664                           
   665                           ; Clear objects allocated to BIGRAM (512 bytes)
   666  002D6E  EE01  F0EF         	lfsr	0,__pbssBIGRAM
   667  002D72  EE12 F000          	lfsr	1,512
   668  002D76                     clear_0:
   669  002D76  6AEE               	clrf	postinc0,c
   670  002D78  50E5               	movf	postdec1,w,c
   671  002D7A  50E1               	movf	fsr1l,w,c
   672  002D7C  E1FC               	bnz	clear_0
   673  002D7E  50E2               	movf	fsr1h,w,c
   674  002D80  E1FA               	bnz	clear_0
   675                           
   676                           ; Clear objects allocated to BANK1 (107 bytes)
   677  002D82  EE01  F06C         	lfsr	0,__pbssBANK1
   678  002D86  0E6B               	movlw	107
   679  002D88                     clear_1:
   680  002D88  6AEE               	clrf	postinc0,c
   681  002D8A  06E8               	decf	wreg,f,c
   682  002D8C  E1FD               	bnz	clear_1
   683                           
   684                           ; Clear objects allocated to BANK0 (8 bytes)
   685  002D8E  EE00  F0CF         	lfsr	0,__pbssBANK0
   686  002D92  0E08               	movlw	8
   687  002D94                     clear_2:
   688  002D94  6AEE               	clrf	postinc0,c
   689  002D96  06E8               	decf	wreg,f,c
   690  002D98  E1FD               	bnz	clear_2
   691                           
   692                           ; Clear objects allocated to COMRAM (25 bytes)
   693  002D9A  EE00  F02D         	lfsr	0,__pbssCOMRAM
   694  002D9E  0E19               	movlw	25
   695  002DA0                     clear_3:
   696  002DA0  6AEE               	clrf	postinc0,c
   697  002DA2  06E8               	decf	wreg,f,c
   698  002DA4  E1FD               	bnz	clear_3
   699  002DA6                     end_of_initialization:
   700                           	opt stack 0
   701  002DA6                     __end_of__initialization:
   702                           	opt stack 0
   703  002DA6  9046               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   704  002DA8  9246               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   705  002DAA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   706  002DAC  6EF8               	movwf	tblptru,c
   707  002DAE  0100               	movlb	0
   708  002DB0  EFBD  F017         	goto	_main	;jump to C main() function
   709                           tblptru	equ	0xFF8
   710                           tblptrh	equ	0xFF7
   711                           tblptrl	equ	0xFF6
   712                           tablat	equ	0xFF5
   713                           postinc0	equ	0xFEE
   714                           wreg	equ	0xFE8
   715                           postdec1	equ	0xFE5
   716                           fsr1h	equ	0xFE2
   717                           fsr1l	equ	0xFE1
   718                           
   719                           	psect	bssCOMRAM
   720  00002D                     __pbssCOMRAM:
   721                           	opt stack 0
   722  00002D                     _tempo_tarefa:
   723                           	opt stack 0
   724  00002D                     	ds	4
   725  000031                     _fileSize:
   726                           	opt stack 0
   727  000031                     	ds	4
   728  000035                     _FatFs:
   729                           	opt stack 0
   730  000035                     	ds	2
   731  000037                     _timeout_tarefa:
   732                           	opt stack 0
   733  000037                     	ds	2
   734  000039                     _rd:
   735                           	opt stack 0
   736  000039                     	ds	2
   737  00003B                     _flag:
   738                           	opt stack 0
   739  00003B                     	ds	2
   740  00003D                     acende_led4@flag:
   741                           	opt stack 0
   742  00003D                     	ds	1
   743  00003E                     _tarefa_em_execucao:
   744                           	opt stack 0
   745  00003E                     	ds	1
   746  00003F                     _sinaliza_int_timer:
   747                           	opt stack 0
   748  00003F                     	ds	1
   749  000040                     _data_uart_recebe:
   750                           	opt stack 0
   751  000040                     	ds	1
   752  000041                     _s:
   753                           	opt stack 0
   754  000041                     	ds	1
   755  000042                     _Result:
   756                           	opt stack 0
   757  000042                     	ds	1
   758  000043                     timer_dois@flag:
   759                           	opt stack 0
   760  000043                     	ds	1
   761  000044                     _estado:
   762                           	opt stack 0
   763  000044                     	ds	1
   764  000045                     _dado:
   765                           	opt stack 0
   766  000045                     	ds	1
   767                           tblptru	equ	0xFF8
   768                           tblptrh	equ	0xFF7
   769                           tblptrl	equ	0xFF6
   770                           tablat	equ	0xFF5
   771                           postinc0	equ	0xFEE
   772                           wreg	equ	0xFE8
   773                           postdec1	equ	0xFE5
   774                           fsr1h	equ	0xFE2
   775                           fsr1l	equ	0xFE1
   776                           
   777                           	psect	bssBANK0
   778  0000CF                     __pbssBANK0:
   779                           	opt stack 0
   780  0000CF                     _tempo_backup:
   781                           	opt stack 0
   782  0000CF                     	ds	4
   783  0000D3                     _p_tarefas:
   784                           	opt stack 0
   785  0000D3                     	ds	4
   786                           tblptru	equ	0xFF8
   787                           tblptrh	equ	0xFF7
   788                           tblptrl	equ	0xFF6
   789                           tablat	equ	0xFF5
   790                           postinc0	equ	0xFEE
   791                           wreg	equ	0xFE8
   792                           postdec1	equ	0xFE5
   793                           fsr1h	equ	0xFE2
   794                           fsr1l	equ	0xFE1
   795                           
   796                           	psect	bssBANK1
   797  00016C                     __pbssBANK1:
   798                           	opt stack 0
   799  00016C                     _folder:
   800                           	opt stack 0
   801  00016C                     	ds	48
   802  00019C                     _txt:
   803                           	opt stack 0
   804  00019C                     	ds	20
   805  0001B0                     _info_chaves:
   806                           	opt stack 0
   807  0001B0                     	ds	7
   808  0001B7                     _data_buffer_32:
   809                           	opt stack 0
   810  0001B7                     	ds	32
   811                           tblptru	equ	0xFF8
   812                           tblptrh	equ	0xFF7
   813                           tblptrl	equ	0xFF6
   814                           tablat	equ	0xFF5
   815                           postinc0	equ	0xFEE
   816                           wreg	equ	0xFE8
   817                           postdec1	equ	0xFE5
   818                           fsr1h	equ	0xFE2
   819                           fsr1l	equ	0xFE1
   820                           
   821                           	psect	dataBANK1
   822  0001D7                     __pdataBANK1:
   823                           	opt stack 0
   824  0001D7                     _fileName:
   825                           	opt stack 0
   826  0001D7                     	ds	10
   827  0001E1                     escreve_inteiro_lcd@F3966:
   828                           	opt stack 0
   829  0001E1                     	ds	7
   830  0001E8                     escreve_inteiro_uart@F3956:
   831                           	opt stack 0
   832  0001E8                     	ds	7
   833                           tblptru	equ	0xFF8
   834                           tblptrh	equ	0xFF7
   835                           tblptrl	equ	0xFF6
   836                           tablat	equ	0xFF5
   837                           postinc0	equ	0xFEE
   838                           wreg	equ	0xFE8
   839                           postdec1	equ	0xFE5
   840                           fsr1h	equ	0xFE2
   841                           fsr1l	equ	0xFE1
   842                           
   843                           	psect	bssBIGRAM
   844  0001EF                     __pbssBIGRAM:
   845                           	opt stack 0
   846  0001EF                     disk_readp@arr:
   847                           	opt stack 0
   848  0001EF                     	ds	512
   849                           tblptru	equ	0xFF8
   850                           tblptrh	equ	0xFF7
   851                           tblptrl	equ	0xFF6
   852                           tablat	equ	0xFF5
   853                           postinc0	equ	0xFEE
   854                           wreg	equ	0xFE8
   855                           postdec1	equ	0xFE5
   856                           fsr1h	equ	0xFE2
   857                           fsr1l	equ	0xFE1
   858                           
   859                           	psect	cstackBANK1
   860  000100                     __pcstackBANK1:
   861                           	opt stack 0
   862  000100                     pf_open@sp:
   863                           	opt stack 0
   864                           
   865                           ; 12 bytes @ 0x0
   866  000100                     	ds	12
   867  00010C                     pf_open@dir:
   868                           	opt stack 0
   869                           
   870                           ; 32 bytes @ 0xC
   871  00010C                     	ds	32
   872  00012C                     pf_open@res:
   873                           	opt stack 0
   874                           
   875                           ; 1 bytes @ 0x2C
   876  00012C                     	ds	1
   877  00012D                     pf_open@fs:
   878                           	opt stack 0
   879                           
   880                           ; 2 bytes @ 0x2D
   881  00012D                     	ds	2
   882  00012F                     pf_open@dj:
   883                           	opt stack 0
   884                           
   885                           ; 16 bytes @ 0x2F
   886  00012F                     	ds	16
   887  00013F                     SDCard@FResult:
   888                           	opt stack 0
   889                           
   890                           ; 1 bytes @ 0x3F
   891  00013F                     	ds	1
   892  000140                     SDCard@br:
   893                           	opt stack 0
   894                           
   895                           ; 2 bytes @ 0x40
   896  000140                     	ds	2
   897  000142                     SDCard@fs:
   898                           	opt stack 0
   899                           
   900                           ; 42 bytes @ 0x42
   901  000142                     	ds	42
   902                           tblptru	equ	0xFF8
   903                           tblptrh	equ	0xFF7
   904                           tblptrl	equ	0xFF6
   905                           tablat	equ	0xFF5
   906                           postinc0	equ	0xFEE
   907                           wreg	equ	0xFE8
   908                           postdec1	equ	0xFE5
   909                           fsr1h	equ	0xFE2
   910                           fsr1l	equ	0xFE1
   911                           
   912                           	psect	cstackBANK0
   913  000060                     __pcstackBANK0:
   914                           	opt stack 0
   915  000060                     ??_configura_baudrate_uart:
   916  000060                     ??_disk_readp:
   917  000060                     ??_disk_writep:
   918  000060                     ??_clust2sect:
   919  000060                     create_name@d:
   920                           	opt stack 0
   921  000060                     disk_initialize@i:
   922                           	opt stack 0
   923  000060                     mensagem_inicial@msg_linha_um:
   924                           	opt stack 0
   925                           
   926                           ; 17 bytes @ 0x0
   927  000060                     	ds	1
   928  000061                     create_name@p:
   929                           	opt stack 0
   930                           
   931                           ; 2 bytes @ 0x1
   932  000061                     	ds	1
   933  000062                     disk_initialize@count1:
   934                           	opt stack 0
   935                           
   936                           ; 2 bytes @ 0x2
   937  000062                     	ds	1
   938  000063                     create_name@ni:
   939                           	opt stack 0
   940                           
   941                           ; 1 bytes @ 0x3
   942  000063                     	ds	1
   943  000064                     disk_initialize@stat:
   944                           	opt stack 0
   945  000064                     disk_readp@ptr:
   946                           	opt stack 0
   947  000064                     create_name@si:
   948                           	opt stack 0
   949  000064                     disk_writep@i:
   950                           	opt stack 0
   951                           
   952                           ; 2 bytes @ 0x4
   953  000064                     	ds	1
   954  000065                     disk_initialize@count2:
   955                           	opt stack 0
   956  000065                     dir_rewind@dj:
   957                           	opt stack 0
   958  000065                     create_name@sfn:
   959                           	opt stack 0
   960  000065                     disk_readp@start_add:
   961                           	opt stack 0
   962                           
   963                           ; 4 bytes @ 0x5
   964  000065                     	ds	1
   965  000066                     disk_writep@j:
   966                           	opt stack 0
   967                           
   968                           ; 2 bytes @ 0x6
   969  000066                     	ds	1
   970  000067                     disk_initialize@buff:
   971                           	opt stack 0
   972  000067                     create_name@i:
   973                           	opt stack 0
   974                           
   975                           ; 1 bytes @ 0x7
   976  000067                     	ds	1
   977  000068                     disk_writep@buff:
   978                           	opt stack 0
   979  000068                     create_name@c:
   980                           	opt stack 0
   981  000068                     configura_baudrate_uart@x:
   982                           	opt stack 0
   983                           
   984                           ; 2 bytes @ 0x8
   985  000068                     	ds	1
   986  000069                     disk_readp@buff:
   987                           	opt stack 0
   988                           
   989                           ; 1 bytes @ 0x9
   990  000069                     	ds	1
   991  00006A                     disk_readp@length:
   992                           	opt stack 0
   993                           
   994                           ; 2 bytes @ 0xA
   995  00006A                     	ds	1
   996  00006B                     _dir_rewind$1906:
   997                           	opt stack 0
   998                           
   999                           ; 4 bytes @ 0xB
  1000  00006B                     	ds	1
  1001  00006C                     ?_get_fat:
  1002                           	opt stack 0
  1003  00006C                     check_fs@buf:
  1004                           	opt stack 0
  1005  00006C                     get_fat@clst:
  1006                           	opt stack 0
  1007                           
  1008                           ; 4 bytes @ 0xC
  1009  00006C                     	ds	2
  1010  00006E                     check_fs@sect:
  1011                           	opt stack 0
  1012                           
  1013                           ; 4 bytes @ 0xE
  1014  00006E                     	ds	1
  1015  00006F                     dir_rewind@fs:
  1016                           	opt stack 0
  1017                           
  1018                           ; 2 bytes @ 0xF
  1019  00006F                     	ds	1
  1020  000070                     ??_get_fat:
  1021                           
  1022                           ; 1 bytes @ 0x10
  1023  000070                     	ds	1
  1024  000071                     dir_rewind@clst:
  1025                           	opt stack 0
  1026  000071                     mensagem_inicial@msg_dois:
  1027                           	opt stack 0
  1028                           
  1029                           ; 17 bytes @ 0x11
  1030  000071                     	ds	1
  1031  000072                     ??_check_fs:
  1032                           
  1033                           ; 1 bytes @ 0x12
  1034  000072                     	ds	4
  1035  000076                     pf_mount@fs:
  1036                           	opt stack 0
  1037                           
  1038                           ; 2 bytes @ 0x16
  1039  000076                     	ds	2
  1040  000078                     ??_pf_mount:
  1041                           
  1042                           ; 1 bytes @ 0x18
  1043  000078                     	ds	14
  1044  000086                     _get_fat$1846:
  1045                           	opt stack 0
  1046                           
  1047                           ; 2 bytes @ 0x26
  1048  000086                     	ds	2
  1049  000088                     get_fat@wc:
  1050                           	opt stack 0
  1051                           
  1052                           ; 2 bytes @ 0x28
  1053  000088                     	ds	2
  1054  00008A                     get_fat@ofs:
  1055                           	opt stack 0
  1056                           
  1057                           ; 2 bytes @ 0x2A
  1058  00008A                     	ds	2
  1059  00008C                     get_fat@buf:
  1060                           	opt stack 0
  1061                           
  1062                           ; 4 bytes @ 0x2C
  1063  00008C                     	ds	2
  1064  00008E                     pf_mount@buf:
  1065                           	opt stack 0
  1066                           
  1067                           ; 36 bytes @ 0x2E
  1068  00008E                     	ds	2
  1069  000090                     get_fat@bc:
  1070                           	opt stack 0
  1071                           
  1072                           ; 2 bytes @ 0x30
  1073  000090                     	ds	2
  1074  000092                     get_fat@fs:
  1075                           	opt stack 0
  1076                           
  1077                           ; 2 bytes @ 0x32
  1078  000092                     	ds	2
  1079  000094                     dir_next@dj:
  1080                           	opt stack 0
  1081  000094                     pf_read@buff:
  1082                           	opt stack 0
  1083  000094                     pf_write@buff:
  1084                           	opt stack 0
  1085                           
  1086                           ; 2 bytes @ 0x34
  1087  000094                     	ds	2
  1088  000096                     ??_dir_next:
  1089  000096                     pf_read@btr:
  1090                           	opt stack 0
  1091  000096                     pf_write@btw:
  1092                           	opt stack 0
  1093                           
  1094                           ; 2 bytes @ 0x36
  1095  000096                     	ds	2
  1096  000098                     pf_read@br:
  1097                           	opt stack 0
  1098  000098                     pf_write@bw:
  1099                           	opt stack 0
  1100                           
  1101                           ; 2 bytes @ 0x38
  1102  000098                     	ds	2
  1103  00009A                     ??_pf_write:
  1104  00009A                     ??_pf_read:
  1105                           
  1106                           ; 1 bytes @ 0x3A
  1107  00009A                     	ds	3
  1108  00009D                     dir_next@fs:
  1109                           	opt stack 0
  1110                           
  1111                           ; 2 bytes @ 0x3D
  1112  00009D                     	ds	2
  1113  00009F                     dir_next@clst:
  1114                           	opt stack 0
  1115                           
  1116                           ; 4 bytes @ 0x3F
  1117  00009F                     	ds	3
  1118  0000A2                     pf_read@dr:
  1119                           	opt stack 0
  1120  0000A2                     pf_write@p:
  1121                           	opt stack 0
  1122                           
  1123                           ; 2 bytes @ 0x42
  1124  0000A2                     	ds	1
  1125  0000A3                     dir_next@i:
  1126                           	opt stack 0
  1127  0000A3                     pf_read@rbuff:
  1128                           	opt stack 0
  1129                           
  1130                           ; 2 bytes @ 0x43
  1131  0000A3                     	ds	1
  1132  0000A4                     pf_write@sect:
  1133                           	opt stack 0
  1134                           
  1135                           ; 4 bytes @ 0x44
  1136  0000A4                     	ds	1
  1137  0000A5                     dir_find@dj:
  1138                           	opt stack 0
  1139  0000A5                     _pf_read$2100:
  1140                           	opt stack 0
  1141                           
  1142                           ; 2 bytes @ 0x45
  1143  0000A5                     	ds	2
  1144  0000A7                     dir_find@dir:
  1145                           	opt stack 0
  1146  0000A7                     pf_read@sect:
  1147                           	opt stack 0
  1148                           
  1149                           ; 4 bytes @ 0x47
  1150  0000A7                     	ds	1
  1151  0000A8                     pf_write@remain:
  1152                           	opt stack 0
  1153                           
  1154                           ; 4 bytes @ 0x48
  1155  0000A8                     	ds	1
  1156  0000A9                     ??_dir_find:
  1157                           
  1158                           ; 1 bytes @ 0x49
  1159  0000A9                     	ds	2
  1160  0000AB                     dir_find@c:
  1161                           	opt stack 0
  1162  0000AB                     pf_read@remain:
  1163                           	opt stack 0
  1164                           
  1165                           ; 4 bytes @ 0x4B
  1166  0000AB                     	ds	1
  1167  0000AC                     dir_find@res:
  1168                           	opt stack 0
  1169  0000AC                     pf_write@clst:
  1170                           	opt stack 0
  1171                           
  1172                           ; 4 bytes @ 0x4C
  1173  0000AC                     	ds	1
  1174  0000AD                     follow_path@dj:
  1175                           	opt stack 0
  1176                           
  1177                           ; 2 bytes @ 0x4D
  1178  0000AD                     	ds	2
  1179  0000AF                     follow_path@dir:
  1180                           	opt stack 0
  1181  0000AF                     pf_read@clst:
  1182                           	opt stack 0
  1183                           
  1184                           ; 4 bytes @ 0x4F
  1185  0000AF                     	ds	1
  1186  0000B0                     pf_write@cs:
  1187                           	opt stack 0
  1188                           
  1189                           ; 1 bytes @ 0x50
  1190  0000B0                     	ds	1
  1191  0000B1                     follow_path@path:
  1192                           	opt stack 0
  1193  0000B1                     pf_write@wcnt:
  1194                           	opt stack 0
  1195                           
  1196                           ; 2 bytes @ 0x51
  1197  0000B1                     	ds	1
  1198  0000B2                     pf_mount@tsect:
  1199                           	opt stack 0
  1200                           
  1201                           ; 4 bytes @ 0x52
  1202  0000B2                     	ds	1
  1203  0000B3                     follow_path@res:
  1204                           	opt stack 0
  1205  0000B3                     pf_read@cs:
  1206                           	opt stack 0
  1207  0000B3                     pf_write@fs:
  1208                           	opt stack 0
  1209                           
  1210                           ; 2 bytes @ 0x53
  1211  0000B3                     	ds	1
  1212  0000B4                     pf_open@path:
  1213                           	opt stack 0
  1214  0000B4                     pf_read@rcnt:
  1215                           	opt stack 0
  1216                           
  1217                           ; 2 bytes @ 0x54
  1218  0000B4                     	ds	2
  1219  0000B6                     ??_pf_open:
  1220  0000B6                     pf_read@fs:
  1221                           	opt stack 0
  1222  0000B6                     pf_mount@mclst:
  1223                           	opt stack 0
  1224                           
  1225                           ; 4 bytes @ 0x56
  1226  0000B6                     	ds	4
  1227  0000BA                     pf_mount@bsect:
  1228                           	opt stack 0
  1229                           
  1230                           ; 4 bytes @ 0x5A
  1231  0000BA                     	ds	4
  1232  0000BE                     pf_mount@fsize:
  1233                           	opt stack 0
  1234                           
  1235                           ; 4 bytes @ 0x5E
  1236  0000BE                     	ds	4
  1237  0000C2                     pf_mount@fmt:
  1238                           	opt stack 0
  1239                           
  1240                           ; 1 bytes @ 0x62
  1241  0000C2                     	ds	10
  1242  0000CC                     
  1243                           ; 1 bytes @ 0x6C
  1244  0000CC                     	ds	2
  1245  0000CE                     escalonador@cont:
  1246                           	opt stack 0
  1247                           
  1248                           ; 1 bytes @ 0x6E
  1249  0000CE                     	ds	1
  1250                           tblptru	equ	0xFF8
  1251                           tblptrh	equ	0xFF7
  1252                           tblptrl	equ	0xFF6
  1253                           tablat	equ	0xFF5
  1254                           postinc0	equ	0xFEE
  1255                           wreg	equ	0xFE8
  1256                           postdec1	equ	0xFE5
  1257                           fsr1h	equ	0xFE2
  1258                           fsr1l	equ	0xFE1
  1259                           
  1260                           	psect	cstackCOMRAM
  1261  000001                     __pcstackCOMRAM:
  1262                           	opt stack 0
  1263  000001                     i2write_timer_zero@timer0:
  1264                           	opt stack 0
  1265                           
  1266                           ; 2 bytes @ 0x0
  1267  000001                     	ds	2
  1268  000003                     i2write_timer_zero@timer:
  1269                           	opt stack 0
  1270                           
  1271                           ; 2 bytes @ 0x2
  1272  000003                     	ds	2
  1273  000005                     ??_isr:
  1274                           
  1275                           ; 1 bytes @ 0x4
  1276  000005                     	ds	20
  1277  000019                     isr@cont:
  1278                           	opt stack 0
  1279                           
  1280                           ; 1 bytes @ 0x18
  1281  000019                     	ds	1
  1282  00001A                     ??_shrc_seta_bit:
  1283  00001A                     ??_shrc_apaga_bit:
  1284  00001A                     ?_mem_cmp:
  1285                           	opt stack 0
  1286  00001A                     ?_get_clust:
  1287                           	opt stack 0
  1288  00001A                     ?___lmul:
  1289                           	opt stack 0
  1290  00001A                     ?___aldiv:
  1291                           	opt stack 0
  1292  00001A                     ?___lldiv:
  1293                           	opt stack 0
  1294  00001A                     envia_dados_shrc@contador:
  1295                           	opt stack 0
  1296  00001A                     WriteSPI_@TempVar:
  1297                           	opt stack 0
  1298  00001A                     delay@contador_ext:
  1299                           	opt stack 0
  1300  00001A                     write_timer_zero@timer0:
  1301                           	opt stack 0
  1302  00001A                     readover@a:
  1303                           	opt stack 0
  1304  00001A                     mem_set@dst:
  1305                           	opt stack 0
  1306  00001A                     mem_cmp@dst:
  1307                           	opt stack 0
  1308  00001A                     get_clust@dir:
  1309                           	opt stack 0
  1310  00001A                     ___lmul@multiplier:
  1311                           	opt stack 0
  1312  00001A                     ___aldiv@dividend:
  1313                           	opt stack 0
  1314  00001A                     ___lldiv@dividend:
  1315                           	opt stack 0
  1316                           
  1317                           ; 4 bytes @ 0x19
  1318  00001A                     	ds	1
  1319  00001B                     envia_dados_shrc@data_to_shrc:
  1320                           	opt stack 0
  1321  00001B                     WriteSPI_@dado:
  1322                           	opt stack 0
  1323  00001B                     delay@contador_int:
  1324                           	opt stack 0
  1325                           
  1326                           ; 1 bytes @ 0x1A
  1327  00001B                     	ds	1
  1328  00001C                     ??_dummy_clocks:
  1329  00001C                     shrc_seta_bit@posicao_bit:
  1330                           	opt stack 0
  1331  00001C                     shrc_apaga_bit@posicao_bit:
  1332                           	opt stack 0
  1333  00001C                     escreve_cmd_lcd@comando:
  1334                           	opt stack 0
  1335  00001C                     endereco_cursor_lcd@endereco:
  1336                           	opt stack 0
  1337  00001C                     escreve_caractere_lcd@data:
  1338                           	opt stack 0
  1339  00001C                     write_timer_zero@timer:
  1340                           	opt stack 0
  1341  00001C                     mem_set@val:
  1342                           	opt stack 0
  1343  00001C                     mem_cmp@src:
  1344                           	opt stack 0
  1345  00001C                     command@arg:
  1346                           	opt stack 0
  1347                           
  1348                           ; 4 bytes @ 0x1B
  1349  00001C                     	ds	1
  1350  00001D                     ??_init_lcd:
  1351  00001D                     posicao_cursor_lcd@coluna:
  1352                           	opt stack 0
  1353  00001D                     escreve_frase_ram_lcd@buffer:
  1354                           	opt stack 0
  1355                           
  1356                           ; 2 bytes @ 0x1C
  1357  00001D                     	ds	1
  1358  00001E                     ??_get_clust:
  1359  00001E                     dummy_clocks@n:
  1360                           	opt stack 0
  1361  00001E                     posicao_cursor_lcd@linha:
  1362                           	opt stack 0
  1363  00001E                     mem_set@cnt:
  1364                           	opt stack 0
  1365  00001E                     mem_cmp@cnt:
  1366                           	opt stack 0
  1367  00001E                     ___lmul@multiplicand:
  1368                           	opt stack 0
  1369  00001E                     ___aldiv@divisor:
  1370                           	opt stack 0
  1371  00001E                     ___lldiv@divisor:
  1372                           	opt stack 0
  1373                           
  1374                           ; 4 bytes @ 0x1D
  1375  00001E                     	ds	1
  1376  00001F                     posicao_cursor_lcd@endereco:
  1377                           	opt stack 0
  1378  00001F                     dummy_clocks@i:
  1379                           	opt stack 0
  1380                           
  1381                           ; 2 bytes @ 0x1E
  1382  00001F                     	ds	1
  1383  000020                     ??_mensagem_inicial:
  1384  000020                     ??_mem_cmp:
  1385  000020                     command@CRC:
  1386                           	opt stack 0
  1387  000020                     inicializa_SPI@SPI_mode:
  1388                           	opt stack 0
  1389  000020                     recebe_dado_SPI@temp_var:
  1390                           	opt stack 0
  1391  000020                     mem_set@d:
  1392                           	opt stack 0
  1393                           
  1394                           ; 2 bytes @ 0x1F
  1395  000020                     	ds	1
  1396  000021                     response@buff:
  1397                           	opt stack 0
  1398  000021                     command@CMD:
  1399                           	opt stack 0
  1400                           
  1401                           ; 1 bytes @ 0x20
  1402  000021                     	ds	1
  1403  000022                     command@argument:
  1404                           	opt stack 0
  1405  000022                     ___aldiv@counter:
  1406                           	opt stack 0
  1407  000022                     create_name@dj:
  1408                           	opt stack 0
  1409  000022                     ___lmul@product:
  1410                           	opt stack 0
  1411  000022                     ___lldiv@quotient:
  1412                           	opt stack 0
  1413                           
  1414                           ; 4 bytes @ 0x21
  1415  000022                     	ds	1
  1416  000023                     ___aldiv@sign:
  1417                           	opt stack 0
  1418  000023                     reset@i:
  1419                           	opt stack 0
  1420  000023                     disk_readp@rd:
  1421                           	opt stack 0
  1422  000023                     mem_cmp@d:
  1423                           	opt stack 0
  1424  000023                     disk_writep@wr:
  1425                           	opt stack 0
  1426                           
  1427                           ; 3 bytes @ 0x22
  1428  000023                     	ds	1
  1429  000024                     create_name@path:
  1430                           	opt stack 0
  1431  000024                     ___aldiv@quotient:
  1432                           	opt stack 0
  1433                           
  1434                           ; 4 bytes @ 0x23
  1435  000024                     	ds	1
  1436  000025                     reset@count:
  1437                           	opt stack 0
  1438  000025                     mem_cmp@s:
  1439                           	opt stack 0
  1440  000025                     disk_readp@sector:
  1441                           	opt stack 0
  1442                           
  1443                           ; 4 bytes @ 0x24
  1444  000025                     	ds	1
  1445  000026                     ??_create_name:
  1446  000026                     ?_clust2sect:
  1447                           	opt stack 0
  1448  000026                     ___lldiv@counter:
  1449                           	opt stack 0
  1450  000026                     get_clust@fs:
  1451                           	opt stack 0
  1452  000026                     disk_writep@sc:
  1453                           	opt stack 0
  1454  000026                     clust2sect@clst:
  1455                           	opt stack 0
  1456                           
  1457                           ; 4 bytes @ 0x25
  1458  000026                     	ds	1
  1459  000027                     reset@buff:
  1460                           	opt stack 0
  1461  000027                     mem_cmp@r:
  1462                           	opt stack 0
  1463                           
  1464                           ; 2 bytes @ 0x26
  1465  000027                     	ds	1
  1466  000028                     ??_disk_initialize:
  1467  000028                     configura_baudrate_uart@baudrate:
  1468                           	opt stack 0
  1469  000028                     get_clust@clst:
  1470                           	opt stack 0
  1471                           
  1472                           ; 4 bytes @ 0x27
  1473  000028                     	ds	1
  1474  000029                     disk_readp@offset:
  1475                           	opt stack 0
  1476                           
  1477                           ; 2 bytes @ 0x28
  1478  000029                     	ds	1
  1479  00002A                     clust2sect@fs:
  1480                           	opt stack 0
  1481                           
  1482                           ; 2 bytes @ 0x29
  1483  00002A                     	ds	1
  1484  00002B                     disk_readp@count:
  1485                           	opt stack 0
  1486                           
  1487                           ; 2 bytes @ 0x2A
  1488  00002B                     	ds	1
  1489  00002C                     
  1490                           ; 1 bytes @ 0x2B
  1491  00002C                     	ds	1
  1492  00002D                     tblptru	equ	0xFF8
  1493                           tblptrh	equ	0xFF7
  1494                           tblptrl	equ	0xFF6
  1495                           tablat	equ	0xFF5
  1496                           postinc0	equ	0xFEE
  1497                           wreg	equ	0xFE8
  1498                           postdec1	equ	0xFE5
  1499                           fsr1h	equ	0xFE2
  1500                           fsr1l	equ	0xFE1
  1501                           
  1502                           ; 1 bytes @ 0x2C
  1503 ;;
  1504 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1505 ;;
  1506 ;; *************** function _main *****************
  1507 ;; Defined at:
  1508 ;;		line 242 in file "main.c"
  1509 ;; Parameters:    Size  Location     Type
  1510 ;;		None
  1511 ;; Auto vars:     Size  Location     Type
  1512 ;;		None
  1513 ;; Return value:  Size  Location     Type
  1514 ;;                  1    wreg      void 
  1515 ;; Registers used:
  1516 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  1517 ;; Tracked objects:
  1518 ;;		On entry : 0/0
  1519 ;;		On exit  : 0/0
  1520 ;;		Unchanged: 0/0
  1521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1522 ;;      Params:         0       0       0       0       0       0       0       0       0
  1523 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1524 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1525 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1526 ;;Total ram usage:        0 bytes
  1527 ;; Hardware stack levels required when called:   15
  1528 ;; This function calls:
  1529 ;;		_controle_shrc
  1530 ;;		_escalonador
  1531 ;;		_inicializa_SPI
  1532 ;;		_inicializa_shrc
  1533 ;;		_inicializa_tarefas
  1534 ;;		_inicializa_uart
  1535 ;;		_init_hardware
  1536 ;;		_init_lcd
  1537 ;;		_mensagem_inicial
  1538 ;; This function is called by:
  1539 ;;		Startup code after reset
  1540 ;; This function uses a non-reentrant model
  1541 ;;
  1542                           
  1543                           	psect	text0
  1544  002F7A                     __ptext0:
  1545                           	opt stack 0
  1546  002F7A                     _main:
  1547                           	opt stack 16
  1548                           
  1549                           ;main.c: 251: init_hardware();
  1550                           
  1551                           ;incstack = 0
  1552  002F7A  EC88  F018         	call	_init_hardware	;wreg free
  1553                           
  1554                           ;main.c: 252: inicializa_uart();
  1555  002F7E  EC4C  F018         	call	_inicializa_uart	;wreg free
  1556                           
  1557                           ;main.c: 253: init_lcd();
  1558  002F82  EC79  F014         	call	_init_lcd	;wreg free
  1559                           
  1560                           ;main.c: 254: inicializa_shrc();
  1561  002F86  EC0F  F019         	call	_inicializa_shrc	;wreg free
  1562                           
  1563                           ;main.c: 256: mensagem_inicial();
  1564  002F8A  EC4E  F015         	call	_mensagem_inicial	;wreg free
  1565                           
  1566                           ;main.c: 257: inicializa_tarefas();
  1567  002F8E  ECA1  F017         	call	_inicializa_tarefas	;wreg free
  1568                           
  1569                           ;main.c: 258: inicializa_SPI(0);
  1570  002F92  0E00               	movlw	0
  1571  002F94  ECDA  F016         	call	_inicializa_SPI
  1572  002F98                     
  1573                           ;main.c: 261: {
  1574                           ;main.c: 263: if ((sinaliza_int_timer == 1) && (2))
  1575  002F98  043F               	decf	_sinaliza_int_timer,w,c
  1576  002F9A  A4D8               	btfss	status,2,c
  1577  002F9C  D004               	goto	l489
  1578                           
  1579                           ;main.c: 264: {
  1580                           ;main.c: 265: sinaliza_int_timer = 0;
  1581  002F9E  0E00               	movlw	0
  1582  002FA0  6E3F               	movwf	_sinaliza_int_timer,c
  1583                           
  1584                           ;main.c: 266: escalonador();
  1585  002FA2  EC27  F014         	call	_escalonador	;wreg free
  1586  002FA6                     l489:
  1587                           
  1588                           ;main.c: 267: }
  1589                           ;main.c: 269: controle_shrc();
  1590  002FA6  EC00  F019         	call	_controle_shrc	;wreg free
  1591  002FAA  D7F6               	goto	l488
  1592  002FAC                     __end_of_main:
  1593                           	opt stack 0
  1594                           tblptru	equ	0xFF8
  1595                           tblptrh	equ	0xFF7
  1596                           tblptrl	equ	0xFF6
  1597                           tablat	equ	0xFF5
  1598                           postinc0	equ	0xFEE
  1599                           wreg	equ	0xFE8
  1600                           postdec1	equ	0xFE5
  1601                           fsr1h	equ	0xFE2
  1602                           fsr1l	equ	0xFE1
  1603                           status	equ	0xFD8
  1604                           
  1605 ;; *************** function _mensagem_inicial *****************
  1606 ;; Defined at:
  1607 ;;		line 282 in file "main.c"
  1608 ;; Parameters:    Size  Location     Type
  1609 ;;		None
  1610 ;; Auto vars:     Size  Location     Type
  1611 ;;  msg_dois       17   17[BANK0 ] const unsigned char [17]
  1612 ;;  msg_linha_um   17    0[BANK0 ] const unsigned char [17]
  1613 ;; Return value:  Size  Location     Type
  1614 ;;                  1    wreg      void 
  1615 ;; Registers used:
  1616 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1617 ;; Tracked objects:
  1618 ;;		On entry : 0/0
  1619 ;;		On exit  : 0/0
  1620 ;;		Unchanged: 0/0
  1621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1622 ;;      Params:         0       0       0       0       0       0       0       0       0
  1623 ;;      Locals:         0      34       0       0       0       0       0       0       0
  1624 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1625 ;;      Totals:         2      34       0       0       0       0       0       0       0
  1626 ;;Total ram usage:       36 bytes
  1627 ;; Hardware stack levels used:    1
  1628 ;; Hardware stack levels required when called:    5
  1629 ;; This function calls:
  1630 ;;		_escreve_cmd_lcd
  1631 ;;		_escreve_frase_ram_lcd
  1632 ;;		_posicao_cursor_lcd
  1633 ;; This function is called by:
  1634 ;;		_main
  1635 ;; This function uses a non-reentrant model
  1636 ;;
  1637                           
  1638                           	psect	text1
  1639  002A9C                     __ptext1:
  1640                           	opt stack 0
  1641  002A9C                     _mensagem_inicial:
  1642                           	opt stack 25
  1643                           
  1644                           ;main.c: 284: const unsigned char msg_linha_um[17] = "SDCard Init   ";
  1645                           
  1646                           ;incstack = 0
  1647  002A9C  0E14               	movlw	low mensagem_inicial@F4027
  1648  002A9E  6EF6               	movwf	tblptrl,c
  1649  002AA0                     	if	1	;There is more than 1 active tblptr byte
  1650  002AA0  0E7F               	movlw	high mensagem_inicial@F4027
  1651  002AA2  6EF7               	movwf	tblptrh,c
  1652  002AA4                     	endif
  1653  002AA4                     	if	0	;There are less than 3 active tblptr bytes
  1654  002AA4                     	endif
  1655  002AA4  EE20  F060         	lfsr	2,mensagem_inicial@msg_linha_um
  1656  002AA8  0E10               	movlw	16
  1657  002AAA                     u8460:
  1658  002AAA  0009               	tblrd		*+
  1659  002AAC  CFF5 FFDE          	movff	tablat,postinc2
  1660  002AB0  06E8               	decf	wreg,f,c
  1661  002AB2  E2FB               	bc	u8460
  1662                           
  1663                           ;main.c: 285: const unsigned char msg_dois[17] = " 18/01/2022   ";
  1664  002AB4  0E03               	movlw	low mensagem_inicial@F4029
  1665  002AB6  6EF6               	movwf	tblptrl,c
  1666  002AB8                     	if	1	;There is more than 1 active tblptr byte
  1667  002AB8  0E7F               	movlw	high mensagem_inicial@F4029
  1668  002ABA  6EF7               	movwf	tblptrh,c
  1669  002ABC                     	endif
  1670  002ABC                     	if	0	;There are less than 3 active tblptr bytes
  1671  002ABC                     	endif
  1672  002ABC  EE20  F071         	lfsr	2,mensagem_inicial@msg_dois
  1673  002AC0  0E10               	movlw	16
  1674  002AC2                     u8470:
  1675  002AC2  0009               	tblrd		*+
  1676  002AC4  CFF5 FFDE          	movff	tablat,postinc2
  1677  002AC8  06E8               	decf	wreg,f,c
  1678  002ACA  E2FB               	bc	u8470
  1679                           
  1680                           ;main.c: 287: posicao_cursor_lcd(1,0);
  1681  002ACC  0E00               	movlw	0
  1682  002ACE  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  1683  002AD0  0E01               	movlw	1
  1684  002AD2  EC3A  F016         	call	_posicao_cursor_lcd
  1685                           
  1686                           ;main.c: 288: escreve_frase_ram_lcd(msg_linha_um);
  1687  002AD6  0E60               	movlw	low mensagem_inicial@msg_linha_um
  1688  002AD8  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  1689  002ADA  0E00               	movlw	high mensagem_inicial@msg_linha_um
  1690  002ADC  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  1691  002ADE  EC37  F017         	call	_escreve_frase_ram_lcd	;wreg free
  1692                           
  1693                           ;main.c: 290: posicao_cursor_lcd(2,0);
  1694  002AE2  0E00               	movlw	0
  1695  002AE4  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  1696  002AE6  0E02               	movlw	2
  1697  002AE8  EC3A  F016         	call	_posicao_cursor_lcd
  1698                           
  1699                           ;main.c: 291: escreve_frase_ram_lcd(msg_dois);
  1700  002AEC  0E71               	movlw	low mensagem_inicial@msg_dois
  1701  002AEE  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  1702  002AF0  0E00               	movlw	high mensagem_inicial@msg_dois
  1703  002AF2  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  1704  002AF4  EC37  F017         	call	_escreve_frase_ram_lcd	;wreg free
  1705                           
  1706                           ;main.c: 293: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1707  002AF8  0E1A               	movlw	26
  1708  002AFA  6E21               	movwf	(??_mensagem_inicial+1)& (0+255),c
  1709  002AFC  0E5E               	movlw	94
  1710  002AFE  6E20               	movwf	??_mensagem_inicial& (0+255),c
  1711  002B00  0E6E               	movlw	110
  1712  002B02                     u8987:
  1713  002B02  2EE8               	decfsz	wreg,f,c
  1714  002B04  D7FE               	bra	u8987
  1715  002B06  2E20               	decfsz	??_mensagem_inicial& (0+255),f,c
  1716  002B08  D7FC               	bra	u8987
  1717  002B0A  2E21               	decfsz	(??_mensagem_inicial+1)& (0+255),f,c
  1718  002B0C  D7FA               	bra	u8987
  1719  002B0E  D000               	nop2	
  1720                           
  1721                           ;main.c: 294: escreve_cmd_lcd(0b00000001);
  1722  002B10  0E01               	movlw	1
  1723  002B12  ECC7  F014         	call	_escreve_cmd_lcd
  1724  002B16  0012               	return		;funcret
  1725  002B18                     __end_of_mensagem_inicial:
  1726                           	opt stack 0
  1727                           tblptru	equ	0xFF8
  1728                           tblptrh	equ	0xFF7
  1729                           tblptrl	equ	0xFF6
  1730                           tablat	equ	0xFF5
  1731                           postinc0	equ	0xFEE
  1732                           wreg	equ	0xFE8
  1733                           postdec1	equ	0xFE5
  1734                           fsr1h	equ	0xFE2
  1735                           fsr1l	equ	0xFE1
  1736                           postinc2	equ	0xFDE
  1737                           status	equ	0xFD8
  1738                           
  1739 ;; *************** function _init_lcd *****************
  1740 ;; Defined at:
  1741 ;;		line 71 in file "bibliotecas/display/display_lcd.c"
  1742 ;; Parameters:    Size  Location     Type
  1743 ;;		None
  1744 ;; Auto vars:     Size  Location     Type
  1745 ;;		None
  1746 ;; Return value:  Size  Location     Type
  1747 ;;                  1    wreg      void 
  1748 ;; Registers used:
  1749 ;;		wreg, status,2, status,0, cstack
  1750 ;; Tracked objects:
  1751 ;;		On entry : 0/0
  1752 ;;		On exit  : 0/0
  1753 ;;		Unchanged: 0/0
  1754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1755 ;;      Params:         0       0       0       0       0       0       0       0       0
  1756 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1757 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1758 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1759 ;;Total ram usage:        1 bytes
  1760 ;; Hardware stack levels used:    1
  1761 ;; Hardware stack levels required when called:    4
  1762 ;; This function calls:
  1763 ;;		_delay
  1764 ;;		_escreve_cmd_lcd
  1765 ;; This function is called by:
  1766 ;;		_main
  1767 ;; This function uses a non-reentrant model
  1768 ;;
  1769                           
  1770                           	psect	text2
  1771  0028F2                     __ptext2:
  1772                           	opt stack 0
  1773  0028F2                     _init_lcd:
  1774                           	opt stack 26
  1775                           
  1776                           ;display_lcd.c: 74: TRISDbits.RD2 = 0;
  1777                           
  1778                           ;incstack = 0
  1779  0028F2  9495               	bcf	3989,2,c	;volatile
  1780                           
  1781                           ;display_lcd.c: 75: TRISDbits.RD1 = 0;
  1782  0028F4  9295               	bcf	3989,1,c	;volatile
  1783                           
  1784                           ;display_lcd.c: 76: TRISDbits.RD0 = 0;
  1785  0028F6  9095               	bcf	3989,0,c	;volatile
  1786                           
  1787                           ;display_lcd.c: 79: TRISDbits.RD4=0;
  1788  0028F8  9895               	bcf	3989,4,c	;volatile
  1789                           
  1790                           ;display_lcd.c: 80: TRISDbits.RD5=0;
  1791  0028FA  9A95               	bcf	3989,5,c	;volatile
  1792                           
  1793                           ;display_lcd.c: 81: TRISDbits.RD6=0;
  1794  0028FC  9C95               	bcf	3989,6,c	;volatile
  1795                           
  1796                           ;display_lcd.c: 82: TRISDbits.RD7=0;
  1797  0028FE  9E95               	bcf	3989,7,c	;volatile
  1798                           
  1799                           ;display_lcd.c: 89: PORTDbits.RD2 = 0;
  1800  002900  9483               	bcf	3971,2,c	;volatile
  1801                           
  1802                           ;display_lcd.c: 90: PORTDbits.RD1 = 0;
  1803  002902  9283               	bcf	3971,1,c	;volatile
  1804                           
  1805                           ;display_lcd.c: 91: PORTDbits.RD0 = 0;
  1806  002904  9083               	bcf	3971,0,c	;volatile
  1807                           
  1808                           ;display_lcd.c: 95: PORTDbits.RD7=0;
  1809  002906  9E83               	bcf	3971,7,c	;volatile
  1810                           
  1811                           ;display_lcd.c: 96: PORTDbits.RD6=0;
  1812  002908  9C83               	bcf	3971,6,c	;volatile
  1813                           
  1814                           ;display_lcd.c: 97: PORTDbits.RD5=1;
  1815  00290A  8A83               	bsf	3971,5,c	;volatile
  1816                           
  1817                           ;display_lcd.c: 98: PORTDbits.RD4=1;
  1818  00290C  8883               	bsf	3971,4,c	;volatile
  1819                           
  1820                           ;display_lcd.c: 103: _delay((unsigned long)((15)*(20000000/4000.0)));
  1821  00290E  0E62               	movlw	98
  1822  002910  6E1D               	movwf	??_init_lcd& (0+255),c
  1823  002912  0E66               	movlw	102
  1824  002914                     u8997:
  1825  002914  2EE8               	decfsz	wreg,f,c
  1826  002916  D7FE               	bra	u8997
  1827  002918  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  1828  00291A  D7FC               	bra	u8997
  1829                           
  1830                           ;display_lcd.c: 107: PORTDbits.RD0 = 1;
  1831  00291C  8083               	bsf	3971,0,c	;volatile
  1832                           
  1833                           ;display_lcd.c: 108: delay();
  1834  00291E  EC29  F018         	call	_delay	;wreg free
  1835                           
  1836                           ;display_lcd.c: 109: PORTDbits.RD0 = 0;
  1837  002922  9083               	bcf	3971,0,c	;volatile
  1838                           
  1839                           ;display_lcd.c: 110: delay();
  1840  002924  EC29  F018         	call	_delay	;wreg free
  1841                           
  1842                           ;display_lcd.c: 115: _delay((unsigned long)((5)*(20000000/4000.0)));
  1843  002928  0E21               	movlw	33
  1844  00292A  6E1D               	movwf	??_init_lcd& (0+255),c
  1845  00292C  0E76               	movlw	118
  1846  00292E                     u9007:
  1847  00292E  2EE8               	decfsz	wreg,f,c
  1848  002930  D7FE               	bra	u9007
  1849  002932  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  1850  002934  D7FC               	bra	u9007
  1851  002936  D000               	nop2	
  1852                           
  1853                           ;display_lcd.c: 118: PORTDbits.RD0 = 1;
  1854  002938  8083               	bsf	3971,0,c	;volatile
  1855                           
  1856                           ;display_lcd.c: 119: delay();
  1857  00293A  EC29  F018         	call	_delay	;wreg free
  1858                           
  1859                           ;display_lcd.c: 120: PORTDbits.RD0 = 0;
  1860  00293E  9083               	bcf	3971,0,c	;volatile
  1861                           
  1862                           ;display_lcd.c: 121: delay();
  1863  002940  EC29  F018         	call	_delay	;wreg free
  1864                           
  1865                           ;display_lcd.c: 126: _delay((unsigned long)((5)*(20000000/4000.0)));
  1866  002944  0E21               	movlw	33
  1867  002946  6E1D               	movwf	??_init_lcd& (0+255),c
  1868  002948  0E76               	movlw	118
  1869  00294A                     u9017:
  1870  00294A  2EE8               	decfsz	wreg,f,c
  1871  00294C  D7FE               	bra	u9017
  1872  00294E  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  1873  002950  D7FC               	bra	u9017
  1874  002952  D000               	nop2	
  1875                           
  1876                           ;display_lcd.c: 129: PORTDbits.RD0 = 1;
  1877  002954  8083               	bsf	3971,0,c	;volatile
  1878                           
  1879                           ;display_lcd.c: 130: delay();
  1880  002956  EC29  F018         	call	_delay	;wreg free
  1881                           
  1882                           ;display_lcd.c: 131: PORTDbits.RD0 = 0;
  1883  00295A  9083               	bcf	3971,0,c	;volatile
  1884                           
  1885                           ;display_lcd.c: 132: delay();
  1886  00295C  EC29  F018         	call	_delay	;wreg free
  1887                           
  1888                           ;display_lcd.c: 135: PORTDbits.RD7=0;
  1889  002960  9E83               	bcf	3971,7,c	;volatile
  1890                           
  1891                           ;display_lcd.c: 136: PORTDbits.RD6=0;
  1892  002962  9C83               	bcf	3971,6,c	;volatile
  1893                           
  1894                           ;display_lcd.c: 137: PORTDbits.RD5=1;
  1895  002964  8A83               	bsf	3971,5,c	;volatile
  1896                           
  1897                           ;display_lcd.c: 138: PORTDbits.RD4=0;
  1898  002966  9883               	bcf	3971,4,c	;volatile
  1899                           
  1900                           ;display_lcd.c: 142: PORTDbits.RD0 = 1;
  1901  002968  8083               	bsf	3971,0,c	;volatile
  1902                           
  1903                           ;display_lcd.c: 143: delay();
  1904  00296A  EC29  F018         	call	_delay	;wreg free
  1905                           
  1906                           ;display_lcd.c: 144: PORTDbits.RD0 = 0;
  1907  00296E  9083               	bcf	3971,0,c	;volatile
  1908                           
  1909                           ;display_lcd.c: 145: delay();
  1910  002970  EC29  F018         	call	_delay	;wreg free
  1911                           
  1912                           ;display_lcd.c: 149: escreve_cmd_lcd(0b00101000);
  1913  002974  0E28               	movlw	40
  1914  002976  ECC7  F014         	call	_escreve_cmd_lcd
  1915                           
  1916                           ;display_lcd.c: 150: escreve_cmd_lcd(0b00000110);
  1917  00297A  0E06               	movlw	6
  1918  00297C  ECC7  F014         	call	_escreve_cmd_lcd
  1919                           
  1920                           ;display_lcd.c: 151: escreve_cmd_lcd(0b00001110);
  1921  002980  0E0E               	movlw	14
  1922  002982  ECC7  F014         	call	_escreve_cmd_lcd
  1923                           
  1924                           ;display_lcd.c: 152: escreve_cmd_lcd(0b00000001);
  1925  002986  0E01               	movlw	1
  1926  002988  ECC7  F014         	call	_escreve_cmd_lcd
  1927  00298C  0012               	return		;funcret
  1928  00298E                     __end_of_init_lcd:
  1929                           	opt stack 0
  1930                           tblptru	equ	0xFF8
  1931                           tblptrh	equ	0xFF7
  1932                           tblptrl	equ	0xFF6
  1933                           tablat	equ	0xFF5
  1934                           postinc0	equ	0xFEE
  1935                           wreg	equ	0xFE8
  1936                           postdec1	equ	0xFE5
  1937                           fsr1h	equ	0xFE2
  1938                           fsr1l	equ	0xFE1
  1939                           postinc2	equ	0xFDE
  1940                           status	equ	0xFD8
  1941                           
  1942 ;; *************** function _init_hardware *****************
  1943 ;; Defined at:
  1944 ;;		line 55 in file "bibliotecas/hardware.c"
  1945 ;; Parameters:    Size  Location     Type
  1946 ;;		None
  1947 ;; Auto vars:     Size  Location     Type
  1948 ;;		None
  1949 ;; Return value:  Size  Location     Type
  1950 ;;                  1    wreg      void 
  1951 ;; Registers used:
  1952 ;;		wreg, status,2, cstack
  1953 ;; Tracked objects:
  1954 ;;		On entry : 0/0
  1955 ;;		On exit  : 0/0
  1956 ;;		Unchanged: 0/0
  1957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1958 ;;      Params:         0       0       0       0       0       0       0       0       0
  1959 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1960 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1961 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1962 ;;Total ram usage:        0 bytes
  1963 ;; Hardware stack levels used:    1
  1964 ;; Hardware stack levels required when called:    4
  1965 ;; This function calls:
  1966 ;;		_config_timer_dois
  1967 ;;		_config_timer_zero
  1968 ;;		_inicializa_adc
  1969 ;;		_init_interrupt
  1970 ;;		_init_oscilador
  1971 ;;		_init_ports
  1972 ;; This function is called by:
  1973 ;;		_main
  1974 ;; This function uses a non-reentrant model
  1975 ;;
  1976                           
  1977                           	psect	text3
  1978  003110                     __ptext3:
  1979                           	opt stack 0
  1980  003110                     _init_hardware:
  1981                           	opt stack 26
  1982                           
  1983                           ;hardware.c: 58: init_oscilador();
  1984                           
  1985                           ;incstack = 0
  1986  003110  EC0B  F019         	call	_init_oscilador	;wreg free
  1987                           
  1988                           ;hardware.c: 61: init_ports();
  1989  003114  EC95  F018         	call	_init_ports	;wreg free
  1990                           
  1991                           ;hardware.c: 64: config_timer_zero();
  1992  003118  ECAF  F018         	call	_config_timer_zero	;wreg free
  1993                           
  1994                           ;hardware.c: 67: config_timer_dois();
  1995  00311C  ECF4  F018         	call	_config_timer_dois	;wreg free
  1996                           
  1997                           ;hardware.c: 70: init_interrupt();
  1998  003120  ECA2  F018         	call	_init_interrupt	;wreg free
  1999                           
  2000                           ;hardware.c: 73: inicializa_adc();
  2001  003124  EC3B  F018         	call	_inicializa_adc	;wreg free
  2002  003128  0012               	return		;funcret
  2003  00312A                     __end_of_init_hardware:
  2004                           	opt stack 0
  2005                           tblptru	equ	0xFF8
  2006                           tblptrh	equ	0xFF7
  2007                           tblptrl	equ	0xFF6
  2008                           tablat	equ	0xFF5
  2009                           postinc0	equ	0xFEE
  2010                           wreg	equ	0xFE8
  2011                           postdec1	equ	0xFE5
  2012                           fsr1h	equ	0xFE2
  2013                           fsr1l	equ	0xFE1
  2014                           postinc2	equ	0xFDE
  2015                           status	equ	0xFD8
  2016                           
  2017 ;; *************** function _init_ports *****************
  2018 ;; Defined at:
  2019 ;;		line 159 in file "bibliotecas/hardware.c"
  2020 ;; Parameters:    Size  Location     Type
  2021 ;;		None
  2022 ;; Auto vars:     Size  Location     Type
  2023 ;;		None
  2024 ;; Return value:  Size  Location     Type
  2025 ;;                  1    wreg      void 
  2026 ;; Registers used:
  2027 ;;		wreg, status,2
  2028 ;; Tracked objects:
  2029 ;;		On entry : 0/0
  2030 ;;		On exit  : 0/0
  2031 ;;		Unchanged: 0/0
  2032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2033 ;;      Params:         0       0       0       0       0       0       0       0       0
  2034 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2035 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2036 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2037 ;;Total ram usage:        0 bytes
  2038 ;; Hardware stack levels used:    1
  2039 ;; Hardware stack levels required when called:    2
  2040 ;; This function calls:
  2041 ;;		Nothing
  2042 ;; This function is called by:
  2043 ;;		_init_hardware
  2044 ;; This function uses a non-reentrant model
  2045 ;;
  2046                           
  2047                           	psect	text4
  2048  00312A                     __ptext4:
  2049                           	opt stack 0
  2050  00312A                     _init_ports:
  2051                           	opt stack 27
  2052                           
  2053                           ;hardware.c: 161: TRISB = 0b00000001;
  2054                           
  2055                           ;incstack = 0
  2056  00312A  0E01               	movlw	1
  2057  00312C  6E93               	movwf	3987,c	;volatile
  2058                           
  2059                           ;hardware.c: 162: LATB = 0x00;
  2060  00312E  0E00               	movlw	0
  2061  003130  6E8A               	movwf	3978,c	;volatile
  2062                           
  2063                           ;hardware.c: 163: TRISD = 0x00;
  2064  003132  0E00               	movlw	0
  2065  003134  6E95               	movwf	3989,c	;volatile
  2066                           
  2067                           ;hardware.c: 164: TRISA = 0b00000111;
  2068  003136  0E07               	movlw	7
  2069  003138  6E92               	movwf	3986,c	;volatile
  2070                           
  2071                           ;hardware.c: 165: TRISC = 0x01111111;
  2072  00313A  0E11               	movlw	17
  2073  00313C  6E94               	movwf	3988,c	;volatile
  2074                           
  2075                           ;hardware.c: 166: TRISE = 0b00000011;
  2076  00313E  0E03               	movlw	3
  2077  003140  6E96               	movwf	3990,c	;volatile
  2078  003142  0012               	return		;funcret
  2079  003144                     __end_of_init_ports:
  2080                           	opt stack 0
  2081                           tblptru	equ	0xFF8
  2082                           tblptrh	equ	0xFF7
  2083                           tblptrl	equ	0xFF6
  2084                           tablat	equ	0xFF5
  2085                           postinc0	equ	0xFEE
  2086                           wreg	equ	0xFE8
  2087                           postdec1	equ	0xFE5
  2088                           fsr1h	equ	0xFE2
  2089                           fsr1l	equ	0xFE1
  2090                           postinc2	equ	0xFDE
  2091                           status	equ	0xFD8
  2092                           
  2093 ;; *************** function _init_oscilador *****************
  2094 ;; Defined at:
  2095 ;;		line 176 in file "bibliotecas/hardware.c"
  2096 ;; Parameters:    Size  Location     Type
  2097 ;;		None
  2098 ;; Auto vars:     Size  Location     Type
  2099 ;;		None
  2100 ;; Return value:  Size  Location     Type
  2101 ;;                  1    wreg      void 
  2102 ;; Registers used:
  2103 ;;		None
  2104 ;; Tracked objects:
  2105 ;;		On entry : 0/0
  2106 ;;		On exit  : 0/0
  2107 ;;		Unchanged: 0/0
  2108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2109 ;;      Params:         0       0       0       0       0       0       0       0       0
  2110 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2111 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2112 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2113 ;;Total ram usage:        0 bytes
  2114 ;; Hardware stack levels used:    1
  2115 ;; Hardware stack levels required when called:    2
  2116 ;; This function calls:
  2117 ;;		Nothing
  2118 ;; This function is called by:
  2119 ;;		_init_hardware
  2120 ;; This function uses a non-reentrant model
  2121 ;;
  2122                           
  2123                           	psect	text5
  2124  003216                     __ptext5:
  2125                           	opt stack 0
  2126  003216                     _init_oscilador:
  2127                           	opt stack 27
  2128                           
  2129                           ;hardware.c: 179: OSCCONbits.IRCF0 = 1;
  2130                           
  2131                           ;incstack = 0
  2132  003216  88D3               	bsf	4051,4,c	;volatile
  2133                           
  2134                           ;hardware.c: 180: OSCCONbits.IRCF1 = 1;
  2135  003218  8AD3               	bsf	4051,5,c	;volatile
  2136                           
  2137                           ;hardware.c: 181: OSCCONbits.IRCF2 = 1;
  2138  00321A  8CD3               	bsf	4051,6,c	;volatile
  2139  00321C  0012               	return		;funcret
  2140  00321E                     __end_of_init_oscilador:
  2141                           	opt stack 0
  2142                           tblptru	equ	0xFF8
  2143                           tblptrh	equ	0xFF7
  2144                           tblptrl	equ	0xFF6
  2145                           tablat	equ	0xFF5
  2146                           postinc0	equ	0xFEE
  2147                           wreg	equ	0xFE8
  2148                           postdec1	equ	0xFE5
  2149                           fsr1h	equ	0xFE2
  2150                           fsr1l	equ	0xFE1
  2151                           postinc2	equ	0xFDE
  2152                           status	equ	0xFD8
  2153                           
  2154 ;; *************** function _init_interrupt *****************
  2155 ;; Defined at:
  2156 ;;		line 98 in file "bibliotecas/hardware.c"
  2157 ;; Parameters:    Size  Location     Type
  2158 ;;		None
  2159 ;; Auto vars:     Size  Location     Type
  2160 ;;		None
  2161 ;; Return value:  Size  Location     Type
  2162 ;;                  1    wreg      void 
  2163 ;; Registers used:
  2164 ;;		wreg, status,2
  2165 ;; Tracked objects:
  2166 ;;		On entry : 0/0
  2167 ;;		On exit  : 0/0
  2168 ;;		Unchanged: 0/0
  2169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2170 ;;      Params:         0       0       0       0       0       0       0       0       0
  2171 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2172 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2173 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2174 ;;Total ram usage:        0 bytes
  2175 ;; Hardware stack levels used:    1
  2176 ;; Hardware stack levels required when called:    2
  2177 ;; This function calls:
  2178 ;;		Nothing
  2179 ;; This function is called by:
  2180 ;;		_init_hardware
  2181 ;; This function uses a non-reentrant model
  2182 ;;
  2183                           
  2184                           	psect	text6
  2185  003144                     __ptext6:
  2186                           	opt stack 0
  2187  003144                     _init_interrupt:
  2188                           	opt stack 27
  2189                           
  2190                           ;hardware.c: 100: INTCON = 0b11110000;
  2191                           
  2192                           ;incstack = 0
  2193  003144  0EF0               	movlw	240
  2194  003146  6EF2               	movwf	intcon,c	;volatile
  2195                           
  2196                           ;hardware.c: 101: INTCON2 = 0b00000000;
  2197  003148  0E00               	movlw	0
  2198  00314A  6EF1               	movwf	intcon2,c	;volatile
  2199                           
  2200                           ;hardware.c: 102: INTCON3 = 0b00000000;
  2201  00314C  0E00               	movlw	0
  2202  00314E  6EF0               	movwf	intcon3,c	;volatile
  2203                           
  2204                           ;hardware.c: 104: PIE1 = 0b00101000;
  2205  003150  0E28               	movlw	40
  2206  003152  6E9D               	movwf	3997,c	;volatile
  2207                           
  2208                           ;hardware.c: 106: PIR1bits.SSPIF = 0;
  2209  003154  969E               	bcf	3998,3,c	;volatile
  2210                           
  2211                           ;hardware.c: 107: PIE1bits.SSPIE = 1;
  2212  003156  869D               	bsf	3997,3,c	;volatile
  2213                           
  2214                           ;hardware.c: 108: IPR1bits.SSPIP = 1;
  2215  003158  869F               	bsf	3999,3,c	;volatile
  2216                           
  2217                           ;hardware.c: 109: INTCON2bits.RBPU=0;
  2218  00315A  9EF1               	bcf	intcon2,7,c	;volatile
  2219  00315C  0012               	return		;funcret
  2220  00315E                     __end_of_init_interrupt:
  2221                           	opt stack 0
  2222                           tblptru	equ	0xFF8
  2223                           tblptrh	equ	0xFF7
  2224                           tblptrl	equ	0xFF6
  2225                           tablat	equ	0xFF5
  2226                           intcon	equ	0xFF2
  2227                           intcon2	equ	0xFF1
  2228                           intcon3	equ	0xFF0
  2229                           postinc0	equ	0xFEE
  2230                           wreg	equ	0xFE8
  2231                           postdec1	equ	0xFE5
  2232                           fsr1h	equ	0xFE2
  2233                           fsr1l	equ	0xFE1
  2234                           postinc2	equ	0xFDE
  2235                           status	equ	0xFD8
  2236                           
  2237 ;; *************** function _inicializa_adc *****************
  2238 ;; Defined at:
  2239 ;;		line 40 in file "bibliotecas/adc.c"
  2240 ;; Parameters:    Size  Location     Type
  2241 ;;		None
  2242 ;; Auto vars:     Size  Location     Type
  2243 ;;		None
  2244 ;; Return value:  Size  Location     Type
  2245 ;;                  1    wreg      void 
  2246 ;; Registers used:
  2247 ;;		wreg, status,2
  2248 ;; Tracked objects:
  2249 ;;		On entry : 0/0
  2250 ;;		On exit  : 0/0
  2251 ;;		Unchanged: 0/0
  2252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2253 ;;      Params:         0       0       0       0       0       0       0       0       0
  2254 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2255 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2256 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2257 ;;Total ram usage:        0 bytes
  2258 ;; Hardware stack levels used:    1
  2259 ;; Hardware stack levels required when called:    2
  2260 ;; This function calls:
  2261 ;;		Nothing
  2262 ;; This function is called by:
  2263 ;;		_init_hardware
  2264 ;; This function uses a non-reentrant model
  2265 ;;
  2266                           
  2267                           	psect	text7
  2268  003076                     __ptext7:
  2269                           	opt stack 0
  2270  003076                     _inicializa_adc:
  2271                           	opt stack 27
  2272                           
  2273                           ;adc.c: 43: ADCON1=0x0B;
  2274                           
  2275                           ;incstack = 0
  2276  003076  0E0B               	movlw	11
  2277  003078  6EC1               	movwf	4033,c	;volatile
  2278                           
  2279                           ;adc.c: 44: ADCON1bits.VCFG0 = 0;
  2280  00307A  98C1               	bcf	4033,4,c	;volatile
  2281                           
  2282                           ;adc.c: 45: ADCON1bits.VCFG1 = 0;
  2283  00307C  9AC1               	bcf	4033,5,c	;volatile
  2284                           
  2285                           ;adc.c: 47: ADCON1bits.PCFG0 = 1;
  2286  00307E  80C1               	bsf	4033,0,c	;volatile
  2287                           
  2288                           ;adc.c: 48: ADCON1bits.PCFG1 = 0;
  2289  003080  92C1               	bcf	4033,1,c	;volatile
  2290                           
  2291                           ;adc.c: 49: ADCON1bits.PCFG2 = 1;
  2292  003082  84C1               	bsf	4033,2,c	;volatile
  2293                           
  2294                           ;adc.c: 50: ADCON1bits.PCFG3 = 1;
  2295  003084  86C1               	bsf	4033,3,c	;volatile
  2296                           
  2297                           ;adc.c: 52: ADCON2bits.ADFM = 1;
  2298  003086  8EC0               	bsf	4032,7,c	;volatile
  2299                           
  2300                           ;adc.c: 53: ADCON2bits.ADCS0 = 0;
  2301  003088  90C0               	bcf	4032,0,c	;volatile
  2302                           
  2303                           ;adc.c: 54: ADCON2bits.ADCS1 = 1;
  2304  00308A  82C0               	bsf	4032,1,c	;volatile
  2305                           
  2306                           ;adc.c: 55: ADCON2bits.ADCS2 = 1;
  2307  00308C  84C0               	bsf	4032,2,c	;volatile
  2308                           
  2309                           ;adc.c: 56: ADCON2bits.ACQT0 = 1;
  2310  00308E  86C0               	bsf	4032,3,c	;volatile
  2311                           
  2312                           ;adc.c: 57: ADCON2bits.ACQT1 = 0;
  2313  003090  98C0               	bcf	4032,4,c	;volatile
  2314                           
  2315                           ;adc.c: 58: ADCON2bits.ACQT2 = 0;
  2316  003092  9AC0               	bcf	4032,5,c	;volatile
  2317                           
  2318                           ;adc.c: 59: ADCON0bits.ADON = 1;
  2319  003094  80C2               	bsf	4034,0,c	;volatile
  2320  003096  0012               	return		;funcret
  2321  003098                     __end_of_inicializa_adc:
  2322                           	opt stack 0
  2323                           tblptru	equ	0xFF8
  2324                           tblptrh	equ	0xFF7
  2325                           tblptrl	equ	0xFF6
  2326                           tablat	equ	0xFF5
  2327                           intcon	equ	0xFF2
  2328                           intcon2	equ	0xFF1
  2329                           intcon3	equ	0xFF0
  2330                           postinc0	equ	0xFEE
  2331                           wreg	equ	0xFE8
  2332                           postdec1	equ	0xFE5
  2333                           fsr1h	equ	0xFE2
  2334                           fsr1l	equ	0xFE1
  2335                           postinc2	equ	0xFDE
  2336                           status	equ	0xFD8
  2337                           
  2338 ;; *************** function _config_timer_zero *****************
  2339 ;; Defined at:
  2340 ;;		line 83 in file "bibliotecas/hardware.c"
  2341 ;; Parameters:    Size  Location     Type
  2342 ;;		None
  2343 ;; Auto vars:     Size  Location     Type
  2344 ;;		None
  2345 ;; Return value:  Size  Location     Type
  2346 ;;                  1    wreg      void 
  2347 ;; Registers used:
  2348 ;;		wreg, status,2, cstack
  2349 ;; Tracked objects:
  2350 ;;		On entry : 0/0
  2351 ;;		On exit  : 0/0
  2352 ;;		Unchanged: 0/0
  2353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2354 ;;      Params:         0       0       0       0       0       0       0       0       0
  2355 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2356 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2357 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2358 ;;Total ram usage:        0 bytes
  2359 ;; Hardware stack levels used:    1
  2360 ;; Hardware stack levels required when called:    3
  2361 ;; This function calls:
  2362 ;;		_write_timer_zero
  2363 ;; This function is called by:
  2364 ;;		_init_hardware
  2365 ;; This function uses a non-reentrant model
  2366 ;;
  2367                           
  2368                           	psect	text8
  2369  00315E                     __ptext8:
  2370                           	opt stack 0
  2371  00315E                     _config_timer_zero:
  2372                           	opt stack 26
  2373                           
  2374                           ;hardware.c: 85: T0CON = 0b11000011;
  2375                           
  2376                           ;incstack = 0
  2377  00315E  0EC3               	movlw	195
  2378  003160  6ED5               	movwf	4053,c	;volatile
  2379                           
  2380                           ;hardware.c: 86: SPPCON = 0b00000000;
  2381  003162  0E00               	movlw	0
  2382  003164  6E65               	movwf	3941,c	;volatile
  2383                           
  2384                           ;hardware.c: 87: SPPCFG = 0b00000000;
  2385  003166  0E00               	movlw	0
  2386  003168  6E63               	movwf	3939,c	;volatile
  2387                           
  2388                           ;hardware.c: 88: write_timer_zero(0x0083);
  2389  00316A  0E00               	movlw	0
  2390  00316C  6E1B               	movwf	write_timer_zero@timer0+1,c
  2391  00316E  0E83               	movlw	131
  2392  003170  6E1A               	movwf	write_timer_zero@timer0,c
  2393  003172  ECD2  F018         	call	_write_timer_zero	;wreg free
  2394  003176  0012               	return		;funcret
  2395  003178                     __end_of_config_timer_zero:
  2396                           	opt stack 0
  2397                           tblptru	equ	0xFF8
  2398                           tblptrh	equ	0xFF7
  2399                           tblptrl	equ	0xFF6
  2400                           tablat	equ	0xFF5
  2401                           intcon	equ	0xFF2
  2402                           intcon2	equ	0xFF1
  2403                           intcon3	equ	0xFF0
  2404                           postinc0	equ	0xFEE
  2405                           wreg	equ	0xFE8
  2406                           postdec1	equ	0xFE5
  2407                           fsr1h	equ	0xFE2
  2408                           fsr1l	equ	0xFE1
  2409                           postinc2	equ	0xFDE
  2410                           status	equ	0xFD8
  2411                           
  2412 ;; *************** function _write_timer_zero *****************
  2413 ;; Defined at:
  2414 ;;		line 143 in file "bibliotecas/hardware.c"
  2415 ;; Parameters:    Size  Location     Type
  2416 ;;  timer0          2   25[COMRAM] unsigned int 
  2417 ;; Auto vars:     Size  Location     Type
  2418 ;;  timer           2   27[COMRAM] struct Timers
  2419 ;; Return value:  Size  Location     Type
  2420 ;;                  1    wreg      void 
  2421 ;; Registers used:
  2422 ;;		None
  2423 ;; Tracked objects:
  2424 ;;		On entry : 0/0
  2425 ;;		On exit  : 0/0
  2426 ;;		Unchanged: 0/0
  2427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2428 ;;      Params:         2       0       0       0       0       0       0       0       0
  2429 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2430 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2431 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2432 ;;Total ram usage:        4 bytes
  2433 ;; Hardware stack levels used:    1
  2434 ;; Hardware stack levels required when called:    2
  2435 ;; This function calls:
  2436 ;;		Nothing
  2437 ;; This function is called by:
  2438 ;;		_config_timer_zero
  2439 ;; This function uses a non-reentrant model
  2440 ;;
  2441                           
  2442                           	psect	text9
  2443  0031A4                     __ptext9:
  2444                           	opt stack 0
  2445  0031A4                     _write_timer_zero:
  2446                           	opt stack 26
  2447                           
  2448                           ;hardware.c: 145: union Timers timer;
  2449                           ;hardware.c: 147: timer.lt = timer0;
  2450                           
  2451                           ;incstack = 0
  2452  0031A4  C01A  F01C         	movff	write_timer_zero@timer0,write_timer_zero@timer
  2453  0031A8  C01B  F01D         	movff	write_timer_zero@timer0+1,write_timer_zero@timer+1
  2454                           
  2455                           ;hardware.c: 149: TMR0H = timer.bt[1];
  2456  0031AC  C01D  FFD7         	movff	write_timer_zero@timer+1,4055	;volatile
  2457                           
  2458                           ;hardware.c: 150: TMR0L = timer.bt[0];
  2459  0031B0  C01C  FFD6         	movff	write_timer_zero@timer,4054	;volatile
  2460  0031B4  0012               	return		;funcret
  2461  0031B6                     __end_of_write_timer_zero:
  2462                           	opt stack 0
  2463                           tblptru	equ	0xFF8
  2464                           tblptrh	equ	0xFF7
  2465                           tblptrl	equ	0xFF6
  2466                           tablat	equ	0xFF5
  2467                           intcon	equ	0xFF2
  2468                           intcon2	equ	0xFF1
  2469                           intcon3	equ	0xFF0
  2470                           postinc0	equ	0xFEE
  2471                           wreg	equ	0xFE8
  2472                           postdec1	equ	0xFE5
  2473                           fsr1h	equ	0xFE2
  2474                           fsr1l	equ	0xFE1
  2475                           postinc2	equ	0xFDE
  2476                           status	equ	0xFD8
  2477                           
  2478 ;; *************** function _config_timer_dois *****************
  2479 ;; Defined at:
  2480 ;;		line 205 in file "bibliotecas/hardware.c"
  2481 ;; Parameters:    Size  Location     Type
  2482 ;;		None
  2483 ;; Auto vars:     Size  Location     Type
  2484 ;;		None
  2485 ;; Return value:  Size  Location     Type
  2486 ;;                  1    wreg      void 
  2487 ;; Registers used:
  2488 ;;		wreg, status,2
  2489 ;; Tracked objects:
  2490 ;;		On entry : 0/0
  2491 ;;		On exit  : 0/0
  2492 ;;		Unchanged: 0/0
  2493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2494 ;;      Params:         0       0       0       0       0       0       0       0       0
  2495 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2496 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2497 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2498 ;;Total ram usage:        0 bytes
  2499 ;; Hardware stack levels used:    1
  2500 ;; Hardware stack levels required when called:    2
  2501 ;; This function calls:
  2502 ;;		Nothing
  2503 ;; This function is called by:
  2504 ;;		_init_hardware
  2505 ;; This function uses a non-reentrant model
  2506 ;;
  2507                           
  2508                           	psect	text10
  2509  0031E8                     __ptext10:
  2510                           	opt stack 0
  2511  0031E8                     _config_timer_dois:
  2512                           	opt stack 27
  2513                           
  2514                           ;hardware.c: 207: T2CON = 0b00000100;
  2515                           
  2516                           ;incstack = 0
  2517  0031E8  0E04               	movlw	4
  2518  0031EA  6ECA               	movwf	4042,c	;volatile
  2519                           
  2520                           ;hardware.c: 208: TMR2 = 0;
  2521  0031EC  0E00               	movlw	0
  2522  0031EE  6ECC               	movwf	4044,c	;volatile
  2523                           
  2524                           ;hardware.c: 209: PR2 = 0xFF;
  2525  0031F0  68CB               	setf	4043,c	;volatile
  2526  0031F2  0012               	return		;funcret
  2527  0031F4                     __end_of_config_timer_dois:
  2528                           	opt stack 0
  2529                           tblptru	equ	0xFF8
  2530                           tblptrh	equ	0xFF7
  2531                           tblptrl	equ	0xFF6
  2532                           tablat	equ	0xFF5
  2533                           intcon	equ	0xFF2
  2534                           intcon2	equ	0xFF1
  2535                           intcon3	equ	0xFF0
  2536                           postinc0	equ	0xFEE
  2537                           wreg	equ	0xFE8
  2538                           postdec1	equ	0xFE5
  2539                           fsr1h	equ	0xFE2
  2540                           fsr1l	equ	0xFE1
  2541                           postinc2	equ	0xFDE
  2542                           status	equ	0xFD8
  2543                           
  2544 ;; *************** function _inicializa_uart *****************
  2545 ;; Defined at:
  2546 ;;		line 206 in file "bibliotecas/uart.c"
  2547 ;; Parameters:    Size  Location     Type
  2548 ;;		None
  2549 ;; Auto vars:     Size  Location     Type
  2550 ;;		None
  2551 ;; Return value:  Size  Location     Type
  2552 ;;                  1    wreg      void 
  2553 ;; Registers used:
  2554 ;;		wreg, status,2, status,0, cstack
  2555 ;; Tracked objects:
  2556 ;;		On entry : 0/0
  2557 ;;		On exit  : 0/0
  2558 ;;		Unchanged: 0/0
  2559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2560 ;;      Params:         0       0       0       0       0       0       0       0       0
  2561 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2562 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2563 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2564 ;;Total ram usage:        0 bytes
  2565 ;; Hardware stack levels used:    1
  2566 ;; Hardware stack levels required when called:    4
  2567 ;; This function calls:
  2568 ;;		_configura_baudrate_uart
  2569 ;; This function is called by:
  2570 ;;		_main
  2571 ;; This function uses a non-reentrant model
  2572 ;;
  2573                           
  2574                           	psect	text11
  2575  003098                     __ptext11:
  2576                           	opt stack 0
  2577  003098                     _inicializa_uart:
  2578                           	opt stack 26
  2579                           
  2580                           ;uart.c: 208: TRISCbits.RC6 = 0;
  2581                           
  2582                           ;incstack = 0
  2583  003098  9C94               	bcf	3988,6,c	;volatile
  2584                           
  2585                           ;uart.c: 209: TRISCbits.RC7 = 0;
  2586  00309A  9E94               	bcf	3988,7,c	;volatile
  2587                           
  2588                           ;uart.c: 211: (void)configura_baudrate_uart(9600);
  2589  00309C  0E80               	movlw	128
  2590  00309E  6E28               	movwf	configura_baudrate_uart@baudrate,c
  2591  0030A0  0E25               	movlw	37
  2592  0030A2  6E29               	movwf	configura_baudrate_uart@baudrate+1,c
  2593  0030A4  0E00               	movlw	0
  2594  0030A6  6E2A               	movwf	configura_baudrate_uart@baudrate+2,c
  2595  0030A8  0E00               	movlw	0
  2596  0030AA  6E2B               	movwf	configura_baudrate_uart@baudrate+3,c
  2597  0030AC  EC32  F010         	call	_configura_baudrate_uart	;wreg free
  2598                           
  2599                           ;uart.c: 213: TXSTA = 0x20;
  2600  0030B0  0E20               	movlw	32
  2601  0030B2  6EAC               	movwf	4012,c	;volatile
  2602                           
  2603                           ;uart.c: 214: RCSTA = 0x90;
  2604  0030B4  0E90               	movlw	144
  2605  0030B6  6EAB               	movwf	4011,c	;volatile
  2606  0030B8  0012               	return		;funcret
  2607  0030BA                     __end_of_inicializa_uart:
  2608                           	opt stack 0
  2609                           tblptru	equ	0xFF8
  2610                           tblptrh	equ	0xFF7
  2611                           tblptrl	equ	0xFF6
  2612                           tablat	equ	0xFF5
  2613                           intcon	equ	0xFF2
  2614                           intcon2	equ	0xFF1
  2615                           intcon3	equ	0xFF0
  2616                           postinc0	equ	0xFEE
  2617                           wreg	equ	0xFE8
  2618                           postdec1	equ	0xFE5
  2619                           fsr1h	equ	0xFE2
  2620                           fsr1l	equ	0xFE1
  2621                           postinc2	equ	0xFDE
  2622                           status	equ	0xFD8
  2623                           
  2624 ;; *************** function _configura_baudrate_uart *****************
  2625 ;; Defined at:
  2626 ;;		line 50 in file "bibliotecas/uart.c"
  2627 ;; Parameters:    Size  Location     Type
  2628 ;;  baudrate        4   39[COMRAM] const long 
  2629 ;; Auto vars:     Size  Location     Type
  2630 ;;  x               2    8[BANK0 ] unsigned int 
  2631 ;; Return value:  Size  Location     Type
  2632 ;;                  1    wreg      unsigned char 
  2633 ;; Registers used:
  2634 ;;		wreg, status,2, status,0, cstack
  2635 ;; Tracked objects:
  2636 ;;		On entry : 0/0
  2637 ;;		On exit  : 0/0
  2638 ;;		Unchanged: 0/0
  2639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2640 ;;      Params:         4       0       0       0       0       0       0       0       0
  2641 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2642 ;;      Temps:          0       8       0       0       0       0       0       0       0
  2643 ;;      Totals:         4      10       0       0       0       0       0       0       0
  2644 ;;Total ram usage:       14 bytes
  2645 ;; Hardware stack levels used:    1
  2646 ;; Hardware stack levels required when called:    3
  2647 ;; This function calls:
  2648 ;;		___aldiv
  2649 ;; This function is called by:
  2650 ;;		_inicializa_uart
  2651 ;; This function uses a non-reentrant model
  2652 ;;
  2653                           
  2654                           	psect	text12
  2655  002064                     __ptext12:
  2656                           	opt stack 0
  2657  002064                     _configura_baudrate_uart:
  2658                           	opt stack 26
  2659                           
  2660                           ;uart.c: 52: unsigned int x;
  2661                           ;uart.c: 54: x = (20000000 - baudrate*64)/(baudrate*64);
  2662                           
  2663                           ;incstack = 0
  2664  002064  C028  F060         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  2665  002068  C029  F061         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  2666  00206C  C02A  F062         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  2667  002070  C02B  F063         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  2668  002074  0E06               	movlw	6
  2669  002076                     u8295:
  2670  002076  90D8               	bcf	status,0,c
  2671  002078  0100               	movlb	0	; () banked
  2672  00207A  3760               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  2673  00207C  3761               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  2674  00207E  3762               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  2675  002080  3763               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  2676  002082  2EE8               	decfsz	wreg,f,c
  2677  002084  D7F8               	goto	u8295
  2678  002086  1F60               	comf	??_configura_baudrate_uart& (0+255),f,b
  2679  002088  1F61               	comf	(??_configura_baudrate_uart+1)& (0+255),f,b
  2680  00208A  1F62               	comf	(??_configura_baudrate_uart+2)& (0+255),f,b
  2681  00208C  1F63               	comf	(??_configura_baudrate_uart+3)& (0+255),f,b
  2682  00208E  2B60               	incf	??_configura_baudrate_uart& (0+255),f,b
  2683  002090  0E00               	movlw	0
  2684  002092  2361               	addwfc	(??_configura_baudrate_uart+1)& (0+255),f,b
  2685  002094  2362               	addwfc	(??_configura_baudrate_uart+2)& (0+255),f,b
  2686  002096  2363               	addwfc	(??_configura_baudrate_uart+3)& (0+255),f,b
  2687  002098  0E00               	movlw	0
  2688  00209A  2560               	addwf	??_configura_baudrate_uart& (0+255),w,b
  2689  00209C  6E1A               	movwf	___aldiv@dividend,c
  2690  00209E  0E2D               	movlw	45
  2691  0020A0  2161               	addwfc	(??_configura_baudrate_uart+1)& (0+255),w,b
  2692  0020A2  6E1B               	movwf	___aldiv@dividend+1,c
  2693  0020A4  0E31               	movlw	49
  2694  0020A6  2162               	addwfc	(??_configura_baudrate_uart+2)& (0+255),w,b
  2695  0020A8  6E1C               	movwf	___aldiv@dividend+2,c
  2696  0020AA  0E01               	movlw	1
  2697  0020AC  2163               	addwfc	(??_configura_baudrate_uart+3)& (0+255),w,b
  2698  0020AE  6E1D               	movwf	___aldiv@dividend+3,c
  2699  0020B0  C028  F064         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  2700  0020B4  C029  F065         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  2701  0020B8  C02A  F066         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  2702  0020BC  C02B  F067         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  2703  0020C0  0E06               	movlw	6
  2704  0020C2                     u8305:
  2705  0020C2  90D8               	bcf	status,0,c
  2706  0020C4  3764               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  2707  0020C6  3765               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  2708  0020C8  3766               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  2709  0020CA  3767               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  2710  0020CC  2EE8               	decfsz	wreg,f,c
  2711  0020CE  D7F9               	goto	u8305
  2712  0020D0  C064  F01E         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  2713  0020D4  C065  F01F         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  2714  0020D8  C066  F020         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  2715  0020DC  C067  F021         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  2716  0020E0  ECFA  F012         	call	___aldiv	;wreg free
  2717  0020E4  C01A  F068         	movff	?___aldiv,configura_baudrate_uart@x
  2718  0020E8  C01B  F069         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  2719                           
  2720                           ;uart.c: 55: if(x > 255)
  2721  0020EC  0100               	movlb	0	; () banked
  2722  0020EE  0569               	decf	(configura_baudrate_uart@x+1)& (0+255),w,b
  2723  0020F0  A0D8               	btfss	status,0,c
  2724  0020F2  D044               	goto	l322
  2725                           
  2726                           ; BSR set to: 0
  2727                           ;uart.c: 56: {
  2728                           ;uart.c: 57: x = (20000000 - baudrate*16)/(baudrate*16);
  2729  0020F4  C028  F060         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  2730  0020F8  C029  F061         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  2731  0020FC  C02A  F062         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  2732  002100  C02B  F063         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  2733  002104  0E04               	movlw	4
  2734  002106                     u8325:
  2735  002106  90D8               	bcf	status,0,c
  2736  002108  3760               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  2737  00210A  3761               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  2738  00210C  3762               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  2739  00210E  3763               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  2740  002110  2EE8               	decfsz	wreg,f,c
  2741  002112  D7F9               	goto	u8325
  2742  002114  1F60               	comf	??_configura_baudrate_uart& (0+255),f,b
  2743  002116  1F61               	comf	(??_configura_baudrate_uart+1)& (0+255),f,b
  2744  002118  1F62               	comf	(??_configura_baudrate_uart+2)& (0+255),f,b
  2745  00211A  1F63               	comf	(??_configura_baudrate_uart+3)& (0+255),f,b
  2746  00211C  2B60               	incf	??_configura_baudrate_uart& (0+255),f,b
  2747  00211E  0E00               	movlw	0
  2748  002120  2361               	addwfc	(??_configura_baudrate_uart+1)& (0+255),f,b
  2749  002122  2362               	addwfc	(??_configura_baudrate_uart+2)& (0+255),f,b
  2750  002124  2363               	addwfc	(??_configura_baudrate_uart+3)& (0+255),f,b
  2751  002126  0E00               	movlw	0
  2752  002128  2560               	addwf	??_configura_baudrate_uart& (0+255),w,b
  2753  00212A  6E1A               	movwf	___aldiv@dividend,c
  2754  00212C  0E2D               	movlw	45
  2755  00212E  2161               	addwfc	(??_configura_baudrate_uart+1)& (0+255),w,b
  2756  002130  6E1B               	movwf	___aldiv@dividend+1,c
  2757  002132  0E31               	movlw	49
  2758  002134  2162               	addwfc	(??_configura_baudrate_uart+2)& (0+255),w,b
  2759  002136  6E1C               	movwf	___aldiv@dividend+2,c
  2760  002138  0E01               	movlw	1
  2761  00213A  2163               	addwfc	(??_configura_baudrate_uart+3)& (0+255),w,b
  2762  00213C  6E1D               	movwf	___aldiv@dividend+3,c
  2763  00213E  C028  F064         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  2764  002142  C029  F065         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  2765  002146  C02A  F066         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  2766  00214A  C02B  F067         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  2767  00214E  0E04               	movlw	4
  2768  002150                     u8335:
  2769  002150  90D8               	bcf	status,0,c
  2770  002152  3764               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  2771  002154  3765               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  2772  002156  3766               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  2773  002158  3767               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  2774  00215A  2EE8               	decfsz	wreg,f,c
  2775  00215C  D7F9               	goto	u8335
  2776  00215E  C064  F01E         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  2777  002162  C065  F01F         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  2778  002166  C066  F020         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  2779  00216A  C067  F021         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  2780  00216E  ECFA  F012         	call	___aldiv	;wreg free
  2781  002172  C01A  F068         	movff	?___aldiv,configura_baudrate_uart@x
  2782  002176  C01B  F069         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  2783                           
  2784                           ;uart.c: 58: BRGH = 1;
  2785  00217A  84AC               	bsf	4012,2,c	;volatile
  2786  00217C                     l322:
  2787                           
  2788                           ;uart.c: 59: }
  2789                           ;uart.c: 60: if(x < 256)
  2790  00217C  0100               	movlb	0	; () banked
  2791  00217E  0569               	decf	(configura_baudrate_uart@x+1)& (0+255),w,b
  2792  002180  B0D8               	btfsc	status,0,c
  2793  002182  0012               	return	
  2794                           
  2795                           ; BSR set to: 0
  2796                           ;uart.c: 61: {
  2797                           ;uart.c: 62: SPBRG = x;
  2798  002184  C068  FFAF         	movff	configura_baudrate_uart@x,4015	;volatile
  2799                           
  2800                           ;uart.c: 63: SYNC = 0;
  2801  002188  98AC               	bcf	4012,4,c	;volatile
  2802                           
  2803                           ;uart.c: 64: SPEN = 1;
  2804  00218A  8EAB               	bsf	4011,7,c	;volatile
  2805                           
  2806                           ;uart.c: 65: TRISCbits.RC7 = 1;
  2807  00218C  8E94               	bsf	3988,7,c	;volatile
  2808                           
  2809                           ;uart.c: 66: TRISCbits.RC6 = 1;
  2810  00218E  8C94               	bsf	3988,6,c	;volatile
  2811                           
  2812                           ;uart.c: 67: CREN = 1;
  2813  002190  88AB               	bsf	4011,4,c	;volatile
  2814                           
  2815                           ;uart.c: 68: TXEN = 1;
  2816  002192  8AAC               	bsf	4012,5,c	;volatile
  2817                           
  2818                           ;uart.c: 70: return (1);
  2819                           ;	Return value of _configura_baudrate_uart is never used
  2820  002194  0012               	return	
  2821  002196                     __end_of_configura_baudrate_uart:
  2822                           	opt stack 0
  2823                           tblptru	equ	0xFF8
  2824                           tblptrh	equ	0xFF7
  2825                           tblptrl	equ	0xFF6
  2826                           tablat	equ	0xFF5
  2827                           intcon	equ	0xFF2
  2828                           intcon2	equ	0xFF1
  2829                           intcon3	equ	0xFF0
  2830                           postinc0	equ	0xFEE
  2831                           wreg	equ	0xFE8
  2832                           postdec1	equ	0xFE5
  2833                           fsr1h	equ	0xFE2
  2834                           fsr1l	equ	0xFE1
  2835                           postinc2	equ	0xFDE
  2836                           status	equ	0xFD8
  2837                           
  2838 ;; *************** function ___aldiv *****************
  2839 ;; Defined at:
  2840 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  2841 ;; Parameters:    Size  Location     Type
  2842 ;;  dividend        4   25[COMRAM] long 
  2843 ;;  divisor         4   29[COMRAM] long 
  2844 ;; Auto vars:     Size  Location     Type
  2845 ;;  quotient        4   35[COMRAM] long 
  2846 ;;  sign            1   34[COMRAM] unsigned char 
  2847 ;;  counter         1   33[COMRAM] unsigned char 
  2848 ;; Return value:  Size  Location     Type
  2849 ;;                  4   25[COMRAM] long 
  2850 ;; Registers used:
  2851 ;;		wreg, status,2, status,0
  2852 ;; Tracked objects:
  2853 ;;		On entry : 0/0
  2854 ;;		On exit  : 0/0
  2855 ;;		Unchanged: 0/0
  2856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2857 ;;      Params:         8       0       0       0       0       0       0       0       0
  2858 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2859 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2860 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2861 ;;Total ram usage:       14 bytes
  2862 ;; Hardware stack levels used:    1
  2863 ;; Hardware stack levels required when called:    2
  2864 ;; This function calls:
  2865 ;;		Nothing
  2866 ;; This function is called by:
  2867 ;;		_configura_baudrate_uart
  2868 ;; This function uses a non-reentrant model
  2869 ;;
  2870                           
  2871                           	psect	text13
  2872  0025F4                     __ptext13:
  2873                           	opt stack 0
  2874  0025F4                     ___aldiv:
  2875                           	opt stack 26
  2876                           
  2877                           ; BSR set to: 0
  2878                           ;incstack = 0
  2879  0025F4  0E00               	movlw	0
  2880  0025F6  6E23               	movwf	___aldiv@sign,c
  2881  0025F8  AE21               	btfss	___aldiv@divisor+3,7,c
  2882  0025FA  D00A               	goto	l1112
  2883  0025FC  1E21               	comf	___aldiv@divisor+3,f,c
  2884  0025FE  1E20               	comf	___aldiv@divisor+2,f,c
  2885  002600  1E1F               	comf	___aldiv@divisor+1,f,c
  2886  002602  6C1E               	negf	___aldiv@divisor,c
  2887  002604  0E00               	movlw	0
  2888  002606  221F               	addwfc	___aldiv@divisor+1,f,c
  2889  002608  2220               	addwfc	___aldiv@divisor+2,f,c
  2890  00260A  2221               	addwfc	___aldiv@divisor+3,f,c
  2891  00260C  0E01               	movlw	1
  2892  00260E  6E23               	movwf	___aldiv@sign,c
  2893  002610                     l1112:
  2894  002610  AE1D               	btfss	___aldiv@dividend+3,7,c
  2895  002612  D00A               	goto	l1113
  2896  002614  1E1D               	comf	___aldiv@dividend+3,f,c
  2897  002616  1E1C               	comf	___aldiv@dividend+2,f,c
  2898  002618  1E1B               	comf	___aldiv@dividend+1,f,c
  2899  00261A  6C1A               	negf	___aldiv@dividend,c
  2900  00261C  0E00               	movlw	0
  2901  00261E  221B               	addwfc	___aldiv@dividend+1,f,c
  2902  002620  221C               	addwfc	___aldiv@dividend+2,f,c
  2903  002622  221D               	addwfc	___aldiv@dividend+3,f,c
  2904  002624  0E01               	movlw	1
  2905  002626  1A23               	xorwf	___aldiv@sign,f,c
  2906  002628                     l1113:
  2907  002628  0E00               	movlw	0
  2908  00262A  6E24               	movwf	___aldiv@quotient,c
  2909  00262C  0E00               	movlw	0
  2910  00262E  6E25               	movwf	___aldiv@quotient+1,c
  2911  002630  0E00               	movlw	0
  2912  002632  6E26               	movwf	___aldiv@quotient+2,c
  2913  002634  0E00               	movlw	0
  2914  002636  6E27               	movwf	___aldiv@quotient+3,c
  2915  002638  501E               	movf	___aldiv@divisor,w,c
  2916  00263A  101F               	iorwf	___aldiv@divisor+1,w,c
  2917  00263C  1020               	iorwf	___aldiv@divisor+2,w,c
  2918  00263E  1021               	iorwf	___aldiv@divisor+3,w,c
  2919  002640  B4D8               	btfsc	status,2,c
  2920  002642  D02A               	goto	l1120
  2921  002644  0E01               	movlw	1
  2922  002646  6E22               	movwf	___aldiv@counter,c
  2923  002648  D006               	goto	l1115
  2924  00264A  90D8               	bcf	status,0,c
  2925  00264C  361E               	rlcf	___aldiv@divisor,f,c
  2926  00264E  361F               	rlcf	___aldiv@divisor+1,f,c
  2927  002650  3620               	rlcf	___aldiv@divisor+2,f,c
  2928  002652  3621               	rlcf	___aldiv@divisor+3,f,c
  2929  002654  2A22               	incf	___aldiv@counter,f,c
  2930  002656                     l1115:
  2931  002656  AE21               	btfss	___aldiv@divisor+3,7,c
  2932  002658  D7F8               	goto	l1116
  2933  00265A                     u8260:
  2934  00265A  90D8               	bcf	status,0,c
  2935  00265C  3624               	rlcf	___aldiv@quotient,f,c
  2936  00265E  3625               	rlcf	___aldiv@quotient+1,f,c
  2937  002660  3626               	rlcf	___aldiv@quotient+2,f,c
  2938  002662  3627               	rlcf	___aldiv@quotient+3,f,c
  2939  002664  501E               	movf	___aldiv@divisor,w,c
  2940  002666  5C1A               	subwf	___aldiv@dividend,w,c
  2941  002668  501F               	movf	___aldiv@divisor+1,w,c
  2942  00266A  581B               	subwfb	___aldiv@dividend+1,w,c
  2943  00266C  5020               	movf	___aldiv@divisor+2,w,c
  2944  00266E  581C               	subwfb	___aldiv@dividend+2,w,c
  2945  002670  5021               	movf	___aldiv@divisor+3,w,c
  2946  002672  581D               	subwfb	___aldiv@dividend+3,w,c
  2947  002674  A0D8               	btfss	status,0,c
  2948  002676  D009               	goto	l1119
  2949  002678  501E               	movf	___aldiv@divisor,w,c
  2950  00267A  5E1A               	subwf	___aldiv@dividend,f,c
  2951  00267C  501F               	movf	___aldiv@divisor+1,w,c
  2952  00267E  5A1B               	subwfb	___aldiv@dividend+1,f,c
  2953  002680  5020               	movf	___aldiv@divisor+2,w,c
  2954  002682  5A1C               	subwfb	___aldiv@dividend+2,f,c
  2955  002684  5021               	movf	___aldiv@divisor+3,w,c
  2956  002686  5A1D               	subwfb	___aldiv@dividend+3,f,c
  2957  002688  8024               	bsf	___aldiv@quotient,0,c
  2958  00268A                     l1119:
  2959  00268A  90D8               	bcf	status,0,c
  2960  00268C  3221               	rrcf	___aldiv@divisor+3,f,c
  2961  00268E  3220               	rrcf	___aldiv@divisor+2,f,c
  2962  002690  321F               	rrcf	___aldiv@divisor+1,f,c
  2963  002692  321E               	rrcf	___aldiv@divisor,f,c
  2964  002694  2E22               	decfsz	___aldiv@counter,f,c
  2965  002696  D7E1               	goto	u8260
  2966  002698                     l1120:
  2967  002698  5023               	movf	___aldiv@sign,w,c
  2968  00269A  B4D8               	btfsc	status,2,c
  2969  00269C  D008               	goto	l1121
  2970  00269E  1E27               	comf	___aldiv@quotient+3,f,c
  2971  0026A0  1E26               	comf	___aldiv@quotient+2,f,c
  2972  0026A2  1E25               	comf	___aldiv@quotient+1,f,c
  2973  0026A4  6C24               	negf	___aldiv@quotient,c
  2974  0026A6  0E00               	movlw	0
  2975  0026A8  2225               	addwfc	___aldiv@quotient+1,f,c
  2976  0026AA  2226               	addwfc	___aldiv@quotient+2,f,c
  2977  0026AC  2227               	addwfc	___aldiv@quotient+3,f,c
  2978  0026AE                     l1121:
  2979  0026AE  C024  F01A         	movff	___aldiv@quotient,?___aldiv
  2980  0026B2  C025  F01B         	movff	___aldiv@quotient+1,?___aldiv+1
  2981  0026B6  C026  F01C         	movff	___aldiv@quotient+2,?___aldiv+2
  2982  0026BA  C027  F01D         	movff	___aldiv@quotient+3,?___aldiv+3
  2983  0026BE  0012               	return	
  2984  0026C0                     __end_of___aldiv:
  2985                           	opt stack 0
  2986                           tblptru	equ	0xFF8
  2987                           tblptrh	equ	0xFF7
  2988                           tblptrl	equ	0xFF6
  2989                           tablat	equ	0xFF5
  2990                           intcon	equ	0xFF2
  2991                           intcon2	equ	0xFF1
  2992                           intcon3	equ	0xFF0
  2993                           postinc0	equ	0xFEE
  2994                           wreg	equ	0xFE8
  2995                           postdec1	equ	0xFE5
  2996                           fsr1h	equ	0xFE2
  2997                           fsr1l	equ	0xFE1
  2998                           postinc2	equ	0xFDE
  2999                           status	equ	0xFD8
  3000                           
  3001 ;; *************** function _inicializa_tarefas *****************
  3002 ;; Defined at:
  3003 ;;		line 181 in file "main.c"
  3004 ;; Parameters:    Size  Location     Type
  3005 ;;		None
  3006 ;; Auto vars:     Size  Location     Type
  3007 ;;		None
  3008 ;; Return value:  Size  Location     Type
  3009 ;;                  1    wreg      void 
  3010 ;; Registers used:
  3011 ;;		wreg, status,2, status,0
  3012 ;; Tracked objects:
  3013 ;;		On entry : 0/0
  3014 ;;		On exit  : 0/0
  3015 ;;		Unchanged: 0/0
  3016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3017 ;;      Params:         0       0       0       0       0       0       0       0       0
  3018 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3019 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3020 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3021 ;;Total ram usage:        0 bytes
  3022 ;; Hardware stack levels used:    1
  3023 ;; Hardware stack levels required when called:    2
  3024 ;; This function calls:
  3025 ;;		Nothing
  3026 ;; This function is called by:
  3027 ;;		_main
  3028 ;; This function uses a non-reentrant model
  3029 ;;
  3030                           
  3031                           	psect	text14
  3032  002F42                     __ptext14:
  3033                           	opt stack 0
  3034  002F42                     _inicializa_tarefas:
  3035                           	opt stack 28
  3036                           
  3037                           ;main.c: 184: p_tarefas[0] = acende_led4;
  3038                           
  3039                           ;incstack = 0
  3040  002F42  0E2E               	movlw	low _acende_led4
  3041  002F44  0100               	movlb	0	; () banked
  3042  002F46  6FD3               	movwf	_p_tarefas& (0+255),b
  3043  002F48  0E30               	movlw	high _acende_led4
  3044  002F4A  6FD4               	movwf	(_p_tarefas+1)& (0+255),b
  3045                           
  3046                           ;main.c: 185: p_tarefas[1] = SDCard;
  3047  002F4C  0ED6               	movlw	low _SDCard
  3048  002F4E  6FD5               	movwf	(_p_tarefas+2)& (0+255),b
  3049  002F50  0E19               	movlw	high _SDCard
  3050  002F52  6FD6               	movwf	(_p_tarefas+3)& (0+255),b
  3051                           
  3052                           ; BSR set to: 0
  3053                           ;main.c: 191: tempo_backup[0] = 1000;
  3054  002F54  0E03               	movlw	3
  3055  002F56  6FD0               	movwf	(_tempo_backup+1)& (0+255),b
  3056  002F58  0EE8               	movlw	232
  3057  002F5A  6FCF               	movwf	_tempo_backup& (0+255),b
  3058                           
  3059                           ; BSR set to: 0
  3060                           ;main.c: 192: tempo_backup[1] = 2000;
  3061  002F5C  0E07               	movlw	7
  3062  002F5E  6FD2               	movwf	(_tempo_backup+3)& (0+255),b
  3063  002F60  0ED0               	movlw	208
  3064  002F62  6FD1               	movwf	(_tempo_backup+2)& (0+255),b
  3065                           
  3066                           ; BSR set to: 0
  3067                           ;main.c: 198: tempo_tarefa[0] = 1000;
  3068  002F64  0E03               	movlw	3
  3069  002F66  6E2E               	movwf	_tempo_tarefa+1,c
  3070  002F68  0EE8               	movlw	232
  3071  002F6A  6E2D               	movwf	_tempo_tarefa,c
  3072                           
  3073                           ; BSR set to: 0
  3074                           ;main.c: 199: tempo_tarefa[1] = 2000;
  3075  002F6C  0E07               	movlw	7
  3076  002F6E  6E30               	movwf	_tempo_tarefa+3,c
  3077  002F70  0ED0               	movlw	208
  3078  002F72  6E2F               	movwf	_tempo_tarefa+2,c
  3079                           
  3080                           ; BSR set to: 0
  3081                           ;main.c: 204: tarefa_em_execucao = 0;
  3082  002F74  0E00               	movlw	0
  3083  002F76  6E3E               	movwf	_tarefa_em_execucao,c	;volatile
  3084                           
  3085                           ; BSR set to: 0
  3086  002F78  0012               	return		;funcret
  3087  002F7A                     __end_of_inicializa_tarefas:
  3088                           	opt stack 0
  3089                           tblptru	equ	0xFF8
  3090                           tblptrh	equ	0xFF7
  3091                           tblptrl	equ	0xFF6
  3092                           tablat	equ	0xFF5
  3093                           intcon	equ	0xFF2
  3094                           intcon2	equ	0xFF1
  3095                           intcon3	equ	0xFF0
  3096                           postinc0	equ	0xFEE
  3097                           wreg	equ	0xFE8
  3098                           postdec1	equ	0xFE5
  3099                           fsr1h	equ	0xFE2
  3100                           fsr1l	equ	0xFE1
  3101                           postinc2	equ	0xFDE
  3102                           status	equ	0xFD8
  3103                           
  3104 ;; *************** function _inicializa_shrc *****************
  3105 ;; Defined at:
  3106 ;;		line 47 in file "bibliotecas/SHRC.c"
  3107 ;; Parameters:    Size  Location     Type
  3108 ;;		None
  3109 ;; Auto vars:     Size  Location     Type
  3110 ;;		None
  3111 ;; Return value:  Size  Location     Type
  3112 ;;                  1    wreg      void 
  3113 ;; Registers used:
  3114 ;;		None
  3115 ;; Tracked objects:
  3116 ;;		On entry : 0/0
  3117 ;;		On exit  : 0/0
  3118 ;;		Unchanged: 0/0
  3119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3120 ;;      Params:         0       0       0       0       0       0       0       0       0
  3121 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3122 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3123 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3124 ;;Total ram usage:        0 bytes
  3125 ;; Hardware stack levels used:    1
  3126 ;; Hardware stack levels required when called:    2
  3127 ;; This function calls:
  3128 ;;		Nothing
  3129 ;; This function is called by:
  3130 ;;		_main
  3131 ;; This function uses a non-reentrant model
  3132 ;;
  3133                           
  3134                           	psect	text15
  3135  00321E                     __ptext15:
  3136                           	opt stack 0
  3137  00321E                     _inicializa_shrc:
  3138                           	opt stack 28
  3139                           
  3140                           ;SHRC.c: 49: LATBbits.LATB5 = 0;
  3141                           
  3142                           ; BSR set to: 0
  3143                           ;incstack = 0
  3144  00321E  9A8A               	bcf	3978,5,c	;volatile
  3145                           
  3146                           ;SHRC.c: 50: LATBbits.LATB6 = 0;
  3147  003220  9C8A               	bcf	3978,6,c	;volatile
  3148                           
  3149                           ;SHRC.c: 51: LATBbits.LATB7 = 0;
  3150  003222  9E8A               	bcf	3978,7,c	;volatile
  3151  003224  0012               	return		;funcret
  3152  003226                     __end_of_inicializa_shrc:
  3153                           	opt stack 0
  3154                           tblptru	equ	0xFF8
  3155                           tblptrh	equ	0xFF7
  3156                           tblptrl	equ	0xFF6
  3157                           tablat	equ	0xFF5
  3158                           intcon	equ	0xFF2
  3159                           intcon2	equ	0xFF1
  3160                           intcon3	equ	0xFF0
  3161                           postinc0	equ	0xFEE
  3162                           wreg	equ	0xFE8
  3163                           postdec1	equ	0xFE5
  3164                           fsr1h	equ	0xFE2
  3165                           fsr1l	equ	0xFE1
  3166                           postinc2	equ	0xFDE
  3167                           status	equ	0xFD8
  3168                           
  3169 ;; *************** function _inicializa_SPI *****************
  3170 ;; Defined at:
  3171 ;;		line 48 in file "bibliotecas/SPI.c"
  3172 ;; Parameters:    Size  Location     Type
  3173 ;;  SPI_mode        1    wreg     unsigned char 
  3174 ;; Auto vars:     Size  Location     Type
  3175 ;;  SPI_mode        1   31[COMRAM] unsigned char 
  3176 ;; Return value:  Size  Location     Type
  3177 ;;                  1    wreg      void 
  3178 ;; Registers used:
  3179 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3180 ;; Tracked objects:
  3181 ;;		On entry : 0/0
  3182 ;;		On exit  : 0/0
  3183 ;;		Unchanged: 0/0
  3184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3185 ;;      Params:         0       0       0       0       0       0       0       0       0
  3186 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3187 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3188 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3189 ;;Total ram usage:        1 bytes
  3190 ;; Hardware stack levels used:    1
  3191 ;; Hardware stack levels required when called:    5
  3192 ;; This function calls:
  3193 ;;		_escreve_cmd_lcd
  3194 ;;		_escreve_frase_ram_lcd
  3195 ;;		_posicao_cursor_lcd
  3196 ;; This function is called by:
  3197 ;;		_main
  3198 ;; This function uses a non-reentrant model
  3199 ;;
  3200                           
  3201                           	psect	text16
  3202  002DB4                     __ptext16:
  3203                           	opt stack 0
  3204  002DB4                     _inicializa_SPI:
  3205                           	opt stack 25
  3206                           
  3207                           ;incstack = 0
  3208                           ;inicializa_SPI@SPI_mode stored from wreg
  3209  002DB4  6E20               	movwf	inicializa_SPI@SPI_mode,c
  3210                           
  3211                           ;SPI.c: 50: SSPCON1bits.SSPEN = 0;
  3212  002DB6  9AC6               	bcf	4038,5,c	;volatile
  3213                           
  3214                           ;SPI.c: 51: switch(SPI_mode)
  3215  002DB8  D00A               	goto	l78
  3216  002DBA                     l81:
  3217                           
  3218                           ;SPI.c: 59: SSPCON1bits.CKP = 1;
  3219  002DBA  88C6               	bsf	4038,4,c	;volatile
  3220  002DBC  D006               	goto	L2
  3221  002DBE                     l82:
  3222                           
  3223                           ;SPI.c: 64: SSPCON1bits.CKP = 0;
  3224  002DBE  98C6               	bcf	4038,4,c	;volatile
  3225                           
  3226                           ;SPI.c: 65: SSPSTATbits.CKE = 1;
  3227  002DC0  8CC7               	bsf	4039,6,c	;volatile
  3228                           
  3229                           ;SPI.c: 66: break;
  3230  002DC2  D013               	goto	l80
  3231  002DC4                     l83:
  3232                           
  3233                           ;SPI.c: 69: SSPCON1bits.CKP = 1;
  3234  002DC4  88C6               	bsf	4038,4,c	;volatile
  3235                           
  3236                           ;SPI.c: 70: SSPSTATbits.CKE = 1;
  3237  002DC6  8CC7               	bsf	4039,6,c	;volatile
  3238  002DC8                     l84:
  3239                           
  3240                           ;SPI.c: 73: SSPCON1bits.CKP = 0;
  3241  002DC8  98C6               	bcf	4038,4,c	;volatile
  3242  002DCA                     L2:
  3243                           
  3244                           ;SPI.c: 74: SSPSTATbits.CKE = 0;
  3245  002DCA  9CC7               	bcf	4039,6,c	;volatile
  3246                           
  3247                           ;SPI.c: 76: }
  3248                           
  3249                           ;SPI.c: 75: break;
  3250  002DCC  D00E               	goto	l80
  3251  002DCE                     l78:
  3252  002DCE  5020               	movf	inicializa_SPI@SPI_mode,w,c
  3253                           
  3254                           ; Switch size 1, requested type "space"
  3255                           ; Number of cases is 4, Range of values is 0 to 3
  3256                           ; switch strategies available:
  3257                           ; Name         Instructions Cycles
  3258                           ; simple_byte           13     7 (average)
  3259                           ;	Chosen strategy is simple_byte
  3260  002DD0  0A00               	xorlw	0	; case 0
  3261  002DD2  B4D8               	btfsc	status,2,c
  3262  002DD4  D7F9               	goto	l84
  3263  002DD6  0A01               	xorlw	1	; case 1
  3264  002DD8  B4D8               	btfsc	status,2,c
  3265  002DDA  D7EF               	goto	l81
  3266  002DDC  0A03               	xorlw	3	; case 2
  3267  002DDE  B4D8               	btfsc	status,2,c
  3268  002DE0  D7EE               	goto	l82
  3269  002DE2  0A01               	xorlw	1	; case 3
  3270  002DE4  B4D8               	btfsc	status,2,c
  3271  002DE6  D7EE               	goto	l83
  3272  002DE8  D7EF               	goto	l84
  3273  002DEA                     l80:
  3274                           
  3275                           ;SPI.c: 80: SSPCON1bits.WCOL = 0;
  3276  002DEA  9EC6               	bcf	4038,7,c	;volatile
  3277                           
  3278                           ;SPI.c: 81: SSPCON1bits.SSPOV = 0;
  3279  002DEC  9CC6               	bcf	4038,6,c	;volatile
  3280                           
  3281                           ;SPI.c: 85: SSPCON1bits.SSPM0 = 1;
  3282  002DEE  80C6               	bsf	4038,0,c	;volatile
  3283                           
  3284                           ;SPI.c: 86: SSPCON1bits.SSPM1 = 1;
  3285  002DF0  82C6               	bsf	4038,1,c	;volatile
  3286                           
  3287                           ;SPI.c: 87: SSPCON1bits.SSPM2 = 0;
  3288  002DF2  94C6               	bcf	4038,2,c	;volatile
  3289                           
  3290                           ;SPI.c: 88: SSPCON1bits.SSPM3 = 0;
  3291  002DF4  96C6               	bcf	4038,3,c	;volatile
  3292                           
  3293                           ;SPI.c: 92: SSPSTATbits.SMP = 0;
  3294  002DF6  9EC7               	bcf	4039,7,c	;volatile
  3295                           
  3296                           ;SPI.c: 95: SSPCON1bits.SSPEN = 1;
  3297  002DF8  8AC6               	bsf	4038,5,c	;volatile
  3298                           
  3299                           ;SPI.c: 96: posicao_cursor_lcd(1,1);
  3300  002DFA  0E01               	movlw	1
  3301  002DFC  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3302  002DFE  0E01               	movlw	1
  3303  002E00  EC3A  F016         	call	_posicao_cursor_lcd
  3304                           
  3305                           ;SPI.c: 97: escreve_frase_ram_lcd("SPI configurada!");
  3306  002E04  0E69               	movlw	low STR_1
  3307  002E06  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3308  002E08  0E7F               	movlw	high STR_1
  3309  002E0A  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3310  002E0C  EC37  F017         	call	_escreve_frase_ram_lcd	;wreg free
  3311                           
  3312                           ;SPI.c: 98: escreve_cmd_lcd(0b00000001);
  3313  002E10  0E01               	movlw	1
  3314  002E12  ECC7  F014         	call	_escreve_cmd_lcd
  3315  002E16  0012               	return		;funcret
  3316  002E18                     __end_of_inicializa_SPI:
  3317                           	opt stack 0
  3318                           tblptru	equ	0xFF8
  3319                           tblptrh	equ	0xFF7
  3320                           tblptrl	equ	0xFF6
  3321                           tablat	equ	0xFF5
  3322                           intcon	equ	0xFF2
  3323                           intcon2	equ	0xFF1
  3324                           intcon3	equ	0xFF0
  3325                           postinc0	equ	0xFEE
  3326                           wreg	equ	0xFE8
  3327                           postdec1	equ	0xFE5
  3328                           fsr1h	equ	0xFE2
  3329                           fsr1l	equ	0xFE1
  3330                           postinc2	equ	0xFDE
  3331                           status	equ	0xFD8
  3332                           
  3333 ;; *************** function _escalonador *****************
  3334 ;; Defined at:
  3335 ;;		line 218 in file "main.c"
  3336 ;; Parameters:    Size  Location     Type
  3337 ;;		None
  3338 ;; Auto vars:     Size  Location     Type
  3339 ;;  cont            1  110[BANK0 ] unsigned char 
  3340 ;; Return value:  Size  Location     Type
  3341 ;;                  1    wreg      void 
  3342 ;; Registers used:
  3343 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3344 ;; Tracked objects:
  3345 ;;		On entry : 0/0
  3346 ;;		On exit  : 0/0
  3347 ;;		Unchanged: 0/0
  3348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3349 ;;      Params:         0       0       0       0       0       0       0       0       0
  3350 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3351 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3352 ;;      Totals:         0       3       0       0       0       0       0       0       0
  3353 ;;Total ram usage:        3 bytes
  3354 ;; Hardware stack levels used:    1
  3355 ;; Hardware stack levels required when called:   14
  3356 ;; This function calls:
  3357 ;;		_SDCard
  3358 ;;		_acende_led4
  3359 ;; This function is called by:
  3360 ;;		_main
  3361 ;; This function uses a non-reentrant model
  3362 ;;
  3363                           
  3364                           	psect	text17
  3365  00284E                     __ptext17:
  3366                           	opt stack 0
  3367  00284E                     _escalonador:
  3368                           	opt stack 16
  3369                           
  3370                           ;main.c: 220: unsigned char cont;
  3371                           ;main.c: 221: for(cont = 0; cont<2;cont++)
  3372                           
  3373                           ;incstack = 0
  3374  00284E  0E00               	movlw	0
  3375  002850  0100               	movlb	0	; () banked
  3376  002852  6FCE               	movwf	escalonador@cont& (0+255),b
  3377  002854                     l7208:
  3378                           
  3379                           ; BSR set to: 0
  3380  002854  0E01               	movlw	1
  3381  002856  65CE               	cpfsgt	escalonador@cont& (0+255),b
  3382  002858  D001               	goto	l480
  3383  00285A  0012               	return	
  3384  00285C                     l480:
  3385                           
  3386                           ; BSR set to: 0
  3387                           ;main.c: 222: {
  3388                           ;main.c: 223: if((p_tarefas[cont]!= 0 ) && tempo_tarefa[cont] == 0)
  3389                           
  3390                           ; BSR set to: 0
  3391  00285C  51CE               	movf	escalonador@cont& (0+255),w,b
  3392  00285E  0D02               	mullw	2
  3393  002860  0ED3               	movlw	low _p_tarefas
  3394  002862  24F3               	addwf	prodl,w,c
  3395  002864  6ED9               	movwf	fsr2l,c
  3396  002866  0E00               	movlw	high _p_tarefas
  3397  002868  20F4               	addwfc	prodh,w,c
  3398  00286A  6EDA               	movwf	fsr2h,c
  3399  00286C  50DE               	movf	postinc2,w,c
  3400  00286E  10DE               	iorwf	postinc2,w,c
  3401  002870  B4D8               	btfsc	status,2,c
  3402  002872  D03D               	goto	l482
  3403                           
  3404                           ; BSR set to: 0
  3405  002874  51CE               	movf	escalonador@cont& (0+255),w,b
  3406  002876  0D02               	mullw	2
  3407  002878  0E2D               	movlw	low _tempo_tarefa
  3408  00287A  24F3               	addwf	prodl,w,c
  3409  00287C  6ED9               	movwf	fsr2l,c
  3410  00287E  0E00               	movlw	high _tempo_tarefa
  3411  002880  20F4               	addwfc	prodh,w,c
  3412  002882  6EDA               	movwf	fsr2h,c
  3413  002884  50DE               	movf	postinc2,w,c
  3414  002886  10DE               	iorwf	postinc2,w,c
  3415  002888  A4D8               	btfss	status,2,c
  3416  00288A  D031               	goto	l482
  3417                           
  3418                           ; BSR set to: 0
  3419                           ;main.c: 224: {
  3420                           ;main.c: 225: tarefa_em_execucao = 1;
  3421  00288C  0E01               	movlw	1
  3422  00288E  6E3E               	movwf	_tarefa_em_execucao,c	;volatile
  3423                           
  3424                           ;main.c: 226: timeout_tarefa = 65000;
  3425  002890  0EFD               	movlw	253
  3426  002892  6E38               	movwf	_timeout_tarefa+1,c
  3427  002894  0EE8               	movlw	232
  3428  002896  6E37               	movwf	_timeout_tarefa,c
  3429                           
  3430                           ; BSR set to: 0
  3431                           ;main.c: 227: p_tarefas[cont]();
  3432  002898  51CE               	movf	escalonador@cont& (0+255),w,b
  3433  00289A  0D02               	mullw	2
  3434  00289C  0ED3               	movlw	low _p_tarefas
  3435  00289E  24F3               	addwf	prodl,w,c
  3436  0028A0  6ED9               	movwf	fsr2l,c
  3437  0028A2  0E00               	movlw	high _p_tarefas
  3438  0028A4  20F4               	addwfc	prodh,w,c
  3439  0028A6  6EDA               	movwf	fsr2h,c
  3440  0028A8  D801               	call	u8448
  3441  0028AA  D00A               	goto	u8449
  3442  0028AC                     u8448:
  3443  0028AC  0005               	push	
  3444  0028AE  6EFA               	movwf	pclath,c
  3445  0028B0  50DE               	movf	postinc2,w,c
  3446  0028B2  6EFD               	movwf	tosl,c
  3447  0028B4  50DE               	movf	postinc2,w,c
  3448  0028B6  6EFE               	movwf	tosh,c
  3449  0028B8  50F8               	movf	tblptru,w,c
  3450  0028BA  6EFF               	movwf	tosu,c
  3451  0028BC  50FA               	movf	pclath,w,c
  3452  0028BE  0012               	return		;indir
  3453  0028C0                     u8449:
  3454                           
  3455                           ;main.c: 228: tarefa_em_execucao = 0;
  3456  0028C0  0E00               	movlw	0
  3457  0028C2  6E3E               	movwf	_tarefa_em_execucao,c	;volatile
  3458                           
  3459                           ;main.c: 229: tempo_tarefa[cont] = tempo_backup[cont];
  3460  0028C4  0100               	movlb	0	; () banked
  3461  0028C6  51CE               	movf	escalonador@cont& (0+255),w,b
  3462  0028C8  0D02               	mullw	2
  3463  0028CA  0ECF               	movlw	low _tempo_backup
  3464  0028CC  24F3               	addwf	prodl,w,c
  3465  0028CE  6ED9               	movwf	fsr2l,c
  3466  0028D0  0E00               	movlw	high _tempo_backup
  3467  0028D2  20F4               	addwfc	prodh,w,c
  3468  0028D4  6EDA               	movwf	fsr2h,c
  3469  0028D6  51CE               	movf	escalonador@cont& (0+255),w,b
  3470  0028D8  0D02               	mullw	2
  3471  0028DA  0E2D               	movlw	low _tempo_tarefa
  3472  0028DC  24F3               	addwf	prodl,w,c
  3473  0028DE  6EE1               	movwf	fsr1l,c
  3474  0028E0  0E00               	movlw	high _tempo_tarefa
  3475  0028E2  20F4               	addwfc	prodh,w,c
  3476  0028E4  6EE2               	movwf	fsr1h,c
  3477  0028E6  CFDE FFE6          	movff	postinc2,postinc1
  3478  0028EA  CFDD FFE5          	movff	postdec2,postdec1
  3479  0028EE                     l482:
  3480                           
  3481                           ; BSR set to: 0
  3482                           
  3483                           ; BSR set to: 0
  3484  0028EE  2BCE               	incf	escalonador@cont& (0+255),f,b
  3485  0028F0  D7B1               	goto	l7208
  3486  0028F2                     __end_of_escalonador:
  3487                           	opt stack 0
  3488                           tosu	equ	0xFFF
  3489                           tosh	equ	0xFFE
  3490                           tosl	equ	0xFFD
  3491                           pclath	equ	0xFFA
  3492                           tblptru	equ	0xFF8
  3493                           tblptrh	equ	0xFF7
  3494                           tblptrl	equ	0xFF6
  3495                           tablat	equ	0xFF5
  3496                           prodh	equ	0xFF4
  3497                           prodl	equ	0xFF3
  3498                           intcon	equ	0xFF2
  3499                           intcon2	equ	0xFF1
  3500                           intcon3	equ	0xFF0
  3501                           postinc0	equ	0xFEE
  3502                           wreg	equ	0xFE8
  3503                           postinc1	equ	0xFE6
  3504                           postdec1	equ	0xFE5
  3505                           fsr1h	equ	0xFE2
  3506                           fsr1l	equ	0xFE1
  3507                           postinc2	equ	0xFDE
  3508                           postdec2	equ	0xFDD
  3509                           fsr2h	equ	0xFDA
  3510                           fsr2l	equ	0xFD9
  3511                           status	equ	0xFD8
  3512                           
  3513 ;; *************** function _SDCard *****************
  3514 ;; Defined at:
  3515 ;;		line 298 in file "main.c"
  3516 ;; Parameters:    Size  Location     Type
  3517 ;;		None
  3518 ;; Auto vars:     Size  Location     Type
  3519 ;;  fs             42   66[BANK1 ] struct .
  3520 ;;  br              2   64[BANK1 ] unsigned short 
  3521 ;;  FResult         1   63[BANK1 ] enum E3838
  3522 ;; Return value:  Size  Location     Type
  3523 ;;                  1    wreg      void 
  3524 ;; Registers used:
  3525 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3526 ;; Tracked objects:
  3527 ;;		On entry : 0/0
  3528 ;;		On exit  : 0/0
  3529 ;;		Unchanged: 0/0
  3530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3531 ;;      Params:         0       0       0       0       0       0       0       0       0
  3532 ;;      Locals:         0       0      45       0       0       0       0       0       0
  3533 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3534 ;;      Totals:         0       0      45       0       0       0       0       0       0
  3535 ;;Total ram usage:       45 bytes
  3536 ;; Hardware stack levels used:    1
  3537 ;; Hardware stack levels required when called:   13
  3538 ;; This function calls:
  3539 ;;		_escreve_cmd_lcd
  3540 ;;		_escreve_frase_ram_lcd
  3541 ;;		_pf_mount
  3542 ;;		_pf_open
  3543 ;;		_pf_read
  3544 ;;		_pf_write
  3545 ;;		_posicao_cursor_lcd
  3546 ;;		_proceed
  3547 ;;		_readover
  3548 ;; This function is called by:
  3549 ;;		_inicializa_tarefas
  3550 ;;		_escalonador
  3551 ;; This function uses a non-reentrant model
  3552 ;;
  3553                           
  3554                           	psect	text18
  3555  0019D6                     __ptext18:
  3556                           	opt stack 0
  3557  0019D6                     _SDCard:
  3558                           	opt stack 16
  3559                           
  3560                           ;main.c: 300: FRESULT FResult;
  3561                           ;main.c: 301: FATFS fs;
  3562                           ;main.c: 302: WORD br;
  3563                           ;main.c: 324: posicao_cursor_lcd(1,0);
  3564                           
  3565                           ; BSR set to: 0
  3566                           ;incstack = 0
  3567  0019D6  0E00               	movlw	0
  3568  0019D8  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3569  0019DA  0E01               	movlw	1
  3570  0019DC  EC3A  F016         	call	_posicao_cursor_lcd
  3571                           
  3572                           ;main.c: 325: escreve_frase_ram_lcd("Attempting to");
  3573  0019E0  0EA5               	movlw	low STR_4
  3574  0019E2  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3575  0019E4  0E7F               	movlw	high STR_4
  3576  0019E6  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3577  0019E8  EC37  F017         	call	_escreve_frase_ram_lcd	;wreg free
  3578                           
  3579                           ;main.c: 326: posicao_cursor_lcd(1,0);
  3580  0019EC  0E00               	movlw	0
  3581  0019EE  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3582  0019F0  0E01               	movlw	1
  3583  0019F2  EC3A  F016         	call	_posicao_cursor_lcd
  3584                           
  3585                           ;main.c: 327: escreve_frase_ram_lcd("             ");
  3586  0019F6  0E97               	movlw	low STR_5
  3587  0019F8  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3588  0019FA  0E7F               	movlw	high STR_5
  3589  0019FC  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3590  0019FE  EC37  F017         	call	_escreve_frase_ram_lcd	;wreg free
  3591                           
  3592                           ;main.c: 328: posicao_cursor_lcd(1,0);
  3593  001A02  0E00               	movlw	0
  3594  001A04  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3595  001A06  0E01               	movlw	1
  3596  001A08  EC3A  F016         	call	_posicao_cursor_lcd
  3597                           
  3598                           ;main.c: 329: escreve_frase_ram_lcd("mount file sys");
  3599  001A0C  0E7A               	movlw	low STR_6
  3600  001A0E  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3601  001A10  0E7F               	movlw	high STR_6
  3602  001A12  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3603  001A14  EC37  F017         	call	_escreve_frase_ram_lcd	;wreg free
  3604                           
  3605                           ;main.c: 331: escreve_cmd_lcd(0b00000001);
  3606  001A18  0E01               	movlw	1
  3607  001A1A  ECC7  F014         	call	_escreve_cmd_lcd
  3608                           
  3609                           ;main.c: 333: proceed();
  3610  001A1E  ECFA  F018         	call	_proceed	;wreg free
  3611                           
  3612                           ;main.c: 334: if((FResult = pf_mount(&fs)) == FR_OK )
  3613  001A22  0E42               	movlw	low SDCard@fs
  3614  001A24  0100               	movlb	0	; () banked
  3615  001A26  6F76               	movwf	pf_mount@fs& (0+255),b
  3616  001A28  0E01               	movlw	high SDCard@fs
  3617  001A2A  6F77               	movwf	(pf_mount@fs+1)& (0+255),b
  3618  001A2C  EC09  F000         	call	_pf_mount	;wreg free
  3619  001A30  0101               	movlb	1	; () banked
  3620  001A32  6F3F               	movwf	SDCard@FResult& (0+255),b
  3621  001A34  513F               	movf	SDCard@FResult& (0+255),w,b
  3622  001A36  A4D8               	btfss	status,2,c
  3623  001A38  D079               	goto	l502
  3624                           
  3625                           ; BSR set to: 1
  3626                           ;main.c: 335: {
  3627                           ;main.c: 336: posicao_cursor_lcd(1,0);
  3628  001A3A  0E00               	movlw	0
  3629  001A3C  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3630  001A3E  0E01               	movlw	1
  3631  001A40  EC3A  F016         	call	_posicao_cursor_lcd
  3632                           
  3633                           ;main.c: 337: escreve_frase_ram_lcd("syst inicialized");
  3634  001A44  0E58               	movlw	low STR_7
  3635  001A46  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3636  001A48  0E7F               	movlw	high STR_7
  3637  001A4A  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3638  001A4C  EC37  F017         	call	_escreve_frase_ram_lcd	;wreg free
  3639                           
  3640                           ;main.c: 339: FResult = pf_open("check.txt" );
  3641  001A50  0EDA               	movlw	low STR_8
  3642  001A52  0100               	movlb	0	; () banked
  3643  001A54  6FB4               	movwf	pf_open@path& (0+255),b
  3644  001A56  0E7F               	movlw	high STR_8
  3645  001A58  6FB5               	movwf	(pf_open@path+1)& (0+255),b
  3646  001A5A  EC48  F00E         	call	_pf_open	;wreg free
  3647  001A5E  0101               	movlb	1	; () banked
  3648  001A60  6F3F               	movwf	SDCard@FResult& (0+255),b
  3649                           
  3650                           ; BSR set to: 1
  3651                           ;main.c: 341: if( FResult == FR_OK )
  3652  001A62  513F               	movf	SDCard@FResult& (0+255),w,b
  3653  001A64  A4D8               	btfss	status,2,c
  3654  001A66  D061               	goto	l503
  3655                           
  3656                           ; BSR set to: 1
  3657                           ;main.c: 342: {
  3658                           ;main.c: 344: if( (FResult = pf_write("SD_Card", 5, &br)) == FR_OK )
  3659  001A68  0EED               	movlw	low STR_9
  3660  001A6A  0100               	movlb	0	; () banked
  3661  001A6C  6F94               	movwf	pf_write@buff& (0+255),b
  3662  001A6E  0E7F               	movlw	high STR_9
  3663  001A70  6F95               	movwf	(pf_write@buff+1)& (0+255),b
  3664  001A72  0E00               	movlw	0
  3665  001A74  6F97               	movwf	(pf_write@btw+1)& (0+255),b
  3666  001A76  0E05               	movlw	5
  3667  001A78  6F96               	movwf	pf_write@btw& (0+255),b
  3668  001A7A  0E40               	movlw	low SDCard@br
  3669  001A7C  6F98               	movwf	pf_write@bw& (0+255),b
  3670  001A7E  0E01               	movlw	high SDCard@br
  3671  001A80  6F99               	movwf	(pf_write@bw+1)& (0+255),b
  3672  001A82  EC23  F003         	call	_pf_write	;wreg free
  3673  001A86  0101               	movlb	1	; () banked
  3674  001A88  6F3F               	movwf	SDCard@FResult& (0+255),b
  3675  001A8A  513F               	movf	SDCard@FResult& (0+255),w,b
  3676  001A8C  A4D8               	btfss	status,2,c
  3677  001A8E  D00C               	goto	l504
  3678                           
  3679                           ; BSR set to: 1
  3680                           ;main.c: 345: {
  3681                           ;main.c: 346: posicao_cursor_lcd(1,0);
  3682  001A90  0E00               	movlw	0
  3683  001A92  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3684  001A94  0E01               	movlw	1
  3685  001A96  EC3A  F016         	call	_posicao_cursor_lcd
  3686                           
  3687                           ;main.c: 347: escreve_frase_ram_lcd("syst inicialized");
  3688  001A9A  0E58               	movlw	low STR_7
  3689  001A9C  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3690  001A9E  0E7F               	movlw	high STR_7
  3691  001AA0  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3692  001AA2  EC37  F017         	call	_escreve_frase_ram_lcd	;wreg free
  3693                           
  3694                           ;main.c: 348: }
  3695  001AA6  D00F               	goto	l508
  3696  001AA8                     l504:
  3697                           
  3698                           ;main.c: 349: else
  3699                           ;main.c: 350: {
  3700                           ;main.c: 351: escreve_cmd_lcd(0b00000001);
  3701  001AA8  0E01               	movlw	1
  3702  001AAA  ECC7  F014         	call	_escreve_cmd_lcd
  3703                           
  3704                           ;main.c: 352: posicao_cursor_lcd(1,0);
  3705  001AAE  0E00               	movlw	0
  3706  001AB0  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3707  001AB2  0E01               	movlw	1
  3708  001AB4  EC3A  F016         	call	_posicao_cursor_lcd
  3709                           
  3710                           ;main.c: 353: escreve_frase_ram_lcd("SDCard error");
  3711  001AB8  0EC1               	movlw	low STR_11
  3712  001ABA  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3713  001ABC  0E7F               	movlw	high STR_11
  3714  001ABE  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3715  001AC0  EC37  F017         	call	_escreve_frase_ram_lcd	;wreg free
  3716  001AC4                     l506:
  3717  001AC4  D7FF               	goto	l506
  3718  001AC6                     l508:
  3719                           
  3720                           ;main.c: 357: }
  3721                           ;main.c: 358: escreve_cmd_lcd(0b00000001);
  3722  001AC6  0E01               	movlw	1
  3723  001AC8  ECC7  F014         	call	_escreve_cmd_lcd
  3724                           
  3725                           ;main.c: 359: posicao_cursor_lcd(1,0);
  3726  001ACC  0E00               	movlw	0
  3727  001ACE  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3728  001AD0  0E01               	movlw	1
  3729  001AD2  EC3A  F016         	call	_posicao_cursor_lcd
  3730                           
  3731                           ;main.c: 360: escreve_frase_ram_lcd("lendo arquivo");
  3732  001AD6  0EB3               	movlw	low STR_12
  3733  001AD8  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3734  001ADA  0E7F               	movlw	high STR_12
  3735  001ADC  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3736  001ADE  EC37  F017         	call	_escreve_frase_ram_lcd	;wreg free
  3737                           
  3738                           ;main.c: 369: {
  3739                           ;main.c: 370: readover(1);
  3740                           
  3741                           ;main.c: 368: do
  3742  001AE2  0E00               	movlw	0
  3743  001AE4  6E1B               	movwf	readover@a+1,c
  3744  001AE6  0E01               	movlw	1
  3745  001AE8  6E1A               	movwf	readover@a,c
  3746  001AEA  EC06  F019         	call	_readover	;wreg free
  3747                           
  3748                           ;main.c: 373: if( (FResult = pf_read(data_buffer_32, 31, &br)) == FR_OK )
  3749  001AEE  0EB7               	movlw	low _data_buffer_32
  3750  001AF0  0100               	movlb	0	; () banked
  3751  001AF2  6F94               	movwf	pf_read@buff& (0+255),b
  3752  001AF4  0E01               	movlw	high _data_buffer_32
  3753  001AF6  6F95               	movwf	(pf_read@buff+1)& (0+255),b
  3754  001AF8  0E00               	movlw	0
  3755  001AFA  6F97               	movwf	(pf_read@btr+1)& (0+255),b
  3756  001AFC  0E1F               	movlw	31
  3757  001AFE  6F96               	movwf	pf_read@btr& (0+255),b
  3758  001B00  0E40               	movlw	low SDCard@br
  3759  001B02  6F98               	movwf	pf_read@br& (0+255),b
  3760  001B04  0E01               	movlw	high SDCard@br
  3761  001B06  6F99               	movwf	(pf_read@br+1)& (0+255),b
  3762  001B08  EC74  F007         	call	_pf_read	;wreg free
  3763  001B0C  0101               	movlb	1	; () banked
  3764  001B0E  6F3F               	movwf	SDCard@FResult& (0+255),b
  3765  001B10  513F               	movf	SDCard@FResult& (0+255),w,b
  3766  001B12  A4D8               	btfss	status,2,c
  3767  001B14  D009               	goto	l510
  3768                           
  3769                           ; BSR set to: 1
  3770                           ;main.c: 374: {
  3771                           ;main.c: 376: data_buffer_32[br] = 0;
  3772  001B16  0EB7               	movlw	low _data_buffer_32
  3773  001B18  2540               	addwf	SDCard@br& (0+255),w,b
  3774  001B1A  6ED9               	movwf	fsr2l,c
  3775  001B1C  0E01               	movlw	high _data_buffer_32
  3776  001B1E  2141               	addwfc	(SDCard@br+1)& (0+255),w,b
  3777  001B20  6EDA               	movwf	fsr2h,c
  3778  001B22  0E00               	movlw	0
  3779  001B24  6EDF               	movwf	indf2,c
  3780                           
  3781                           ;main.c: 377: break;
  3782  001B26  D003               	goto	l523
  3783  001B28                     l510:
  3784                           
  3785                           ; BSR set to: 1
  3786                           ;main.c: 380: else
  3787                           ;main.c: 381: {
  3788                           ;main.c: 388: while( 1 );
  3789  001B28  D7FF               	goto	l510
  3790  001B2A                     l503:
  3791                           
  3792                           ; BSR set to: 1
  3793                           ;main.c: 392: else
  3794                           ;main.c: 393: {
  3795                           ;main.c: 398: while( 1 );
  3796  001B2A  D7FF               	goto	l503
  3797  001B2C                     l502:
  3798                           
  3799                           ;main.c: 401: else
  3800                           ;main.c: 402: {
  3801                           ;main.c: 404: while( 1 );
  3802  001B2C  D7FF               	goto	l502
  3803  001B2E                     l523:
  3804                           
  3805                           ;main.c: 405: }
  3806                           ;main.c: 423: if( FResult != FR_OK )
  3807  001B2E  0101               	movlb	1	; () banked
  3808  001B30  513F               	movf	SDCard@FResult& (0+255),w,b
  3809  001B32  A4D8               	btfss	status,2,c
  3810  001B34                     u8400:
  3811                           
  3812                           ;main.c: 424: {
  3813                           ;main.c: 429: while( 1 );
  3814  001B34  D7FF               	goto	u8400
  3815  001B36                     
  3816                           ;main.c: 430: }
  3817                           ;main.c: 433: while(1);
  3818  001B36  D7FF               	goto	l527
  3819  001B38                     __end_of_SDCard:
  3820                           	opt stack 0
  3821                           tosu	equ	0xFFF
  3822                           tosh	equ	0xFFE
  3823                           tosl	equ	0xFFD
  3824                           pclath	equ	0xFFA
  3825                           tblptru	equ	0xFF8
  3826                           tblptrh	equ	0xFF7
  3827                           tblptrl	equ	0xFF6
  3828                           tablat	equ	0xFF5
  3829                           prodh	equ	0xFF4
  3830                           prodl	equ	0xFF3
  3831                           intcon	equ	0xFF2
  3832                           intcon2	equ	0xFF1
  3833                           intcon3	equ	0xFF0
  3834                           postinc0	equ	0xFEE
  3835                           wreg	equ	0xFE8
  3836                           postinc1	equ	0xFE6
  3837                           postdec1	equ	0xFE5
  3838                           fsr1h	equ	0xFE2
  3839                           fsr1l	equ	0xFE1
  3840                           indf2	equ	0xFDF
  3841                           postinc2	equ	0xFDE
  3842                           postdec2	equ	0xFDD
  3843                           fsr2h	equ	0xFDA
  3844                           fsr2l	equ	0xFD9
  3845                           status	equ	0xFD8
  3846                           
  3847 ;; *************** function _acende_led4 *****************
  3848 ;; Defined at:
  3849 ;;		line 438 in file "main.c"
  3850 ;; Parameters:    Size  Location     Type
  3851 ;;		None
  3852 ;; Auto vars:     Size  Location     Type
  3853 ;;		None
  3854 ;; Return value:  Size  Location     Type
  3855 ;;                  1    wreg      void 
  3856 ;; Registers used:
  3857 ;;		wreg, status,2, status,0, cstack
  3858 ;; Tracked objects:
  3859 ;;		On entry : 0/0
  3860 ;;		On exit  : 0/0
  3861 ;;		Unchanged: 0/0
  3862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3863 ;;      Params:         0       0       0       0       0       0       0       0       0
  3864 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3865 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3866 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3867 ;;Total ram usage:        0 bytes
  3868 ;; Hardware stack levels used:    1
  3869 ;; Hardware stack levels required when called:    3
  3870 ;; This function calls:
  3871 ;;		_shrc_apaga_bit
  3872 ;;		_shrc_seta_bit
  3873 ;; This function is called by:
  3874 ;;		_inicializa_tarefas
  3875 ;;		_escalonador
  3876 ;; This function uses a non-reentrant model
  3877 ;;
  3878                           
  3879                           	psect	text19
  3880  00302E                     __ptext19:
  3881                           	opt stack 0
  3882  00302E                     _acende_led4:
  3883                           	opt stack 26
  3884                           
  3885                           ;main.c: 439: static unsigned char flag = 0;
  3886                           ;main.c: 440: flag = !flag;
  3887                           
  3888                           ;incstack = 0
  3889  00302E  503D               	movf	acende_led4@flag,w,c
  3890  003030  A4D8               	btfss	status,2,c
  3891  003032  D002               	goto	u5390
  3892  003034  0E01               	movlw	1
  3893  003036  D001               	goto	u5400
  3894  003038                     u5390:
  3895  003038  0E00               	movlw	0
  3896  00303A                     u5400:
  3897  00303A  6E3D               	movwf	acende_led4@flag,c
  3898                           
  3899                           ;main.c: 441: if(!flag)
  3900  00303C  503D               	movf	acende_led4@flag,w,c
  3901  00303E  A4D8               	btfss	status,2,c
  3902  003040  D004               	goto	l536
  3903                           
  3904                           ;main.c: 442: {
  3905                           ;main.c: 443: shrc_seta_bit(0);
  3906  003042  0E00               	movlw	0
  3907  003044  EC6C  F018         	call	_shrc_seta_bit
  3908                           
  3909                           ;main.c: 444: }
  3910  003048  0012               	return	
  3911  00304A                     l536:
  3912                           
  3913                           ;main.c: 445: else
  3914                           ;main.c: 446: {
  3915                           ;main.c: 447: shrc_apaga_bit(0);
  3916  00304A  0E00               	movlw	0
  3917  00304C  EC5D  F018         	call	_shrc_apaga_bit
  3918  003050  0012               	return	
  3919  003052                     __end_of_acende_led4:
  3920                           	opt stack 0
  3921                           tosu	equ	0xFFF
  3922                           tosh	equ	0xFFE
  3923                           tosl	equ	0xFFD
  3924                           pclath	equ	0xFFA
  3925                           tblptru	equ	0xFF8
  3926                           tblptrh	equ	0xFF7
  3927                           tblptrl	equ	0xFF6
  3928                           tablat	equ	0xFF5
  3929                           prodh	equ	0xFF4
  3930                           prodl	equ	0xFF3
  3931                           intcon	equ	0xFF2
  3932                           intcon2	equ	0xFF1
  3933                           intcon3	equ	0xFF0
  3934                           postinc0	equ	0xFEE
  3935                           wreg	equ	0xFE8
  3936                           postinc1	equ	0xFE6
  3937                           postdec1	equ	0xFE5
  3938                           fsr1h	equ	0xFE2
  3939                           fsr1l	equ	0xFE1
  3940                           indf2	equ	0xFDF
  3941                           postinc2	equ	0xFDE
  3942                           postdec2	equ	0xFDD
  3943                           fsr2h	equ	0xFDA
  3944                           fsr2l	equ	0xFD9
  3945                           status	equ	0xFD8
  3946                           
  3947 ;; *************** function _shrc_seta_bit *****************
  3948 ;; Defined at:
  3949 ;;		line 119 in file "bibliotecas/SHRC.c"
  3950 ;; Parameters:    Size  Location     Type
  3951 ;;  posicao_bit     1    wreg     unsigned char 
  3952 ;; Auto vars:     Size  Location     Type
  3953 ;;  posicao_bit     1   27[COMRAM] unsigned char 
  3954 ;; Return value:  Size  Location     Type
  3955 ;;                  1    wreg      void 
  3956 ;; Registers used:
  3957 ;;		wreg, status,2, status,0
  3958 ;; Tracked objects:
  3959 ;;		On entry : 0/0
  3960 ;;		On exit  : 0/0
  3961 ;;		Unchanged: 0/0
  3962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3963 ;;      Params:         0       0       0       0       0       0       0       0       0
  3964 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3965 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3966 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3967 ;;Total ram usage:        3 bytes
  3968 ;; Hardware stack levels used:    1
  3969 ;; Hardware stack levels required when called:    2
  3970 ;; This function calls:
  3971 ;;		Nothing
  3972 ;; This function is called by:
  3973 ;;		_acende_led4
  3974 ;;		_timer_dois
  3975 ;; This function uses a non-reentrant model
  3976 ;;
  3977                           
  3978                           	psect	text20
  3979  0030D8                     __ptext20:
  3980                           	opt stack 0
  3981  0030D8                     _shrc_seta_bit:
  3982                           	opt stack 26
  3983                           
  3984                           ;incstack = 0
  3985                           ;shrc_seta_bit@posicao_bit stored from wreg
  3986  0030D8  6E1C               	movwf	shrc_seta_bit@posicao_bit,c
  3987                           
  3988                           ;SHRC.c: 121: dado |= (1<<posicao_bit);
  3989  0030DA  C01C  F01A         	movff	shrc_seta_bit@posicao_bit,??_shrc_seta_bit
  3990  0030DE  0E01               	movlw	1
  3991  0030E0  6E1B               	movwf	(??_shrc_seta_bit+1)& (0+255),c
  3992  0030E2  2A1A               	incf	??_shrc_seta_bit,f,c
  3993  0030E4  D002               	goto	u4654
  3994  0030E6                     u4655:
  3995  0030E6  90D8               	bcf	status,0,c
  3996  0030E8  361B               	rlcf	??_shrc_seta_bit+1,f,c
  3997  0030EA                     u4654:
  3998  0030EA  2E1A               	decfsz	??_shrc_seta_bit,f,c
  3999  0030EC  D7FC               	goto	u4655
  4000  0030EE  501B               	movf	??_shrc_seta_bit+1,w,c
  4001  0030F0  1245               	iorwf	_dado,f,c
  4002  0030F2  0012               	return		;funcret
  4003  0030F4                     __end_of_shrc_seta_bit:
  4004                           	opt stack 0
  4005                           tosu	equ	0xFFF
  4006                           tosh	equ	0xFFE
  4007                           tosl	equ	0xFFD
  4008                           pclath	equ	0xFFA
  4009                           tblptru	equ	0xFF8
  4010                           tblptrh	equ	0xFF7
  4011                           tblptrl	equ	0xFF6
  4012                           tablat	equ	0xFF5
  4013                           prodh	equ	0xFF4
  4014                           prodl	equ	0xFF3
  4015                           intcon	equ	0xFF2
  4016                           intcon2	equ	0xFF1
  4017                           intcon3	equ	0xFF0
  4018                           postinc0	equ	0xFEE
  4019                           wreg	equ	0xFE8
  4020                           postinc1	equ	0xFE6
  4021                           postdec1	equ	0xFE5
  4022                           fsr1h	equ	0xFE2
  4023                           fsr1l	equ	0xFE1
  4024                           indf2	equ	0xFDF
  4025                           postinc2	equ	0xFDE
  4026                           postdec2	equ	0xFDD
  4027                           fsr2h	equ	0xFDA
  4028                           fsr2l	equ	0xFD9
  4029                           status	equ	0xFD8
  4030                           
  4031 ;; *************** function _shrc_apaga_bit *****************
  4032 ;; Defined at:
  4033 ;;		line 124 in file "bibliotecas/SHRC.c"
  4034 ;; Parameters:    Size  Location     Type
  4035 ;;  posicao_bit     1    wreg     unsigned char 
  4036 ;; Auto vars:     Size  Location     Type
  4037 ;;  posicao_bit     1   27[COMRAM] unsigned char 
  4038 ;; Return value:  Size  Location     Type
  4039 ;;                  1    wreg      void 
  4040 ;; Registers used:
  4041 ;;		wreg, status,2, status,0
  4042 ;; Tracked objects:
  4043 ;;		On entry : 0/0
  4044 ;;		On exit  : 0/0
  4045 ;;		Unchanged: 0/0
  4046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4047 ;;      Params:         0       0       0       0       0       0       0       0       0
  4048 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4049 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4050 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4051 ;;Total ram usage:        3 bytes
  4052 ;; Hardware stack levels used:    1
  4053 ;; Hardware stack levels required when called:    2
  4054 ;; This function calls:
  4055 ;;		Nothing
  4056 ;; This function is called by:
  4057 ;;		_acende_led4
  4058 ;;		_timer_dois
  4059 ;; This function uses a non-reentrant model
  4060 ;;
  4061                           
  4062                           	psect	text21
  4063  0030BA                     __ptext21:
  4064                           	opt stack 0
  4065  0030BA                     _shrc_apaga_bit:
  4066                           	opt stack 26
  4067                           
  4068                           ;incstack = 0
  4069                           ;shrc_apaga_bit@posicao_bit stored from wreg
  4070  0030BA  6E1C               	movwf	shrc_apaga_bit@posicao_bit,c
  4071                           
  4072                           ;SHRC.c: 126: dado &= ~(1<<posicao_bit);
  4073  0030BC  C01C  F01A         	movff	shrc_apaga_bit@posicao_bit,??_shrc_apaga_bit
  4074  0030C0  0E01               	movlw	1
  4075  0030C2  6E1B               	movwf	(??_shrc_apaga_bit+1)& (0+255),c
  4076  0030C4  2A1A               	incf	??_shrc_apaga_bit,f,c
  4077  0030C6  D002               	goto	u4664
  4078  0030C8                     u4665:
  4079  0030C8  90D8               	bcf	status,0,c
  4080  0030CA  361B               	rlcf	??_shrc_apaga_bit+1,f,c
  4081  0030CC                     u4664:
  4082  0030CC  2E1A               	decfsz	??_shrc_apaga_bit,f,c
  4083  0030CE  D7FC               	goto	u4665
  4084  0030D0  501B               	movf	??_shrc_apaga_bit+1,w,c
  4085  0030D2  0AFF               	xorlw	255
  4086  0030D4  1645               	andwf	_dado,f,c
  4087  0030D6  0012               	return		;funcret
  4088  0030D8                     __end_of_shrc_apaga_bit:
  4089                           	opt stack 0
  4090                           tosu	equ	0xFFF
  4091                           tosh	equ	0xFFE
  4092                           tosl	equ	0xFFD
  4093                           pclath	equ	0xFFA
  4094                           tblptru	equ	0xFF8
  4095                           tblptrh	equ	0xFF7
  4096                           tblptrl	equ	0xFF6
  4097                           tablat	equ	0xFF5
  4098                           prodh	equ	0xFF4
  4099                           prodl	equ	0xFF3
  4100                           intcon	equ	0xFF2
  4101                           intcon2	equ	0xFF1
  4102                           intcon3	equ	0xFF0
  4103                           postinc0	equ	0xFEE
  4104                           wreg	equ	0xFE8
  4105                           postinc1	equ	0xFE6
  4106                           postdec1	equ	0xFE5
  4107                           fsr1h	equ	0xFE2
  4108                           fsr1l	equ	0xFE1
  4109                           indf2	equ	0xFDF
  4110                           postinc2	equ	0xFDE
  4111                           postdec2	equ	0xFDD
  4112                           fsr2h	equ	0xFDA
  4113                           fsr2l	equ	0xFD9
  4114                           status	equ	0xFD8
  4115                           
  4116 ;; *************** function _readover *****************
  4117 ;; Defined at:
  4118 ;;		line 27 in file "diskio.c"
  4119 ;; Parameters:    Size  Location     Type
  4120 ;;  a               2   25[COMRAM] int 
  4121 ;; Auto vars:     Size  Location     Type
  4122 ;;		None
  4123 ;; Return value:  Size  Location     Type
  4124 ;;                  1    wreg      void 
  4125 ;; Registers used:
  4126 ;;		None
  4127 ;; Tracked objects:
  4128 ;;		On entry : 0/0
  4129 ;;		On exit  : 0/0
  4130 ;;		Unchanged: 0/0
  4131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4132 ;;      Params:         2       0       0       0       0       0       0       0       0
  4133 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4134 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4135 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4136 ;;Total ram usage:        2 bytes
  4137 ;; Hardware stack levels used:    1
  4138 ;; Hardware stack levels required when called:    2
  4139 ;; This function calls:
  4140 ;;		Nothing
  4141 ;; This function is called by:
  4142 ;;		_SDCard
  4143 ;; This function uses a non-reentrant model
  4144 ;;
  4145                           
  4146                           	psect	text22
  4147  00320C                     __ptext22:
  4148                           	opt stack 0
  4149  00320C                     _readover:
  4150                           	opt stack 26
  4151                           
  4152                           ;diskio.c: 29: flag = a;
  4153                           
  4154                           ;incstack = 0
  4155  00320C  C01A  F03B         	movff	readover@a,_flag
  4156  003210  C01B  F03C         	movff	readover@a+1,_flag+1
  4157  003214  0012               	return		;funcret
  4158  003216                     __end_of_readover:
  4159                           	opt stack 0
  4160                           tosu	equ	0xFFF
  4161                           tosh	equ	0xFFE
  4162                           tosl	equ	0xFFD
  4163                           pclath	equ	0xFFA
  4164                           tblptru	equ	0xFF8
  4165                           tblptrh	equ	0xFF7
  4166                           tblptrl	equ	0xFF6
  4167                           tablat	equ	0xFF5
  4168                           prodh	equ	0xFF4
  4169                           prodl	equ	0xFF3
  4170                           intcon	equ	0xFF2
  4171                           intcon2	equ	0xFF1
  4172                           intcon3	equ	0xFF0
  4173                           postinc0	equ	0xFEE
  4174                           wreg	equ	0xFE8
  4175                           postinc1	equ	0xFE6
  4176                           postdec1	equ	0xFE5
  4177                           fsr1h	equ	0xFE2
  4178                           fsr1l	equ	0xFE1
  4179                           indf2	equ	0xFDF
  4180                           postinc2	equ	0xFDE
  4181                           postdec2	equ	0xFDD
  4182                           fsr2h	equ	0xFDA
  4183                           fsr2l	equ	0xFD9
  4184                           status	equ	0xFD8
  4185                           
  4186 ;; *************** function _pf_write *****************
  4187 ;; Defined at:
  4188 ;;		line 919 in file "pff.c"
  4189 ;; Parameters:    Size  Location     Type
  4190 ;;  buff            2   52[BANK0 ] PTR const void 
  4191 ;;		 -> STR_9(8), 
  4192 ;;  btw             2   54[BANK0 ] unsigned int 
  4193 ;;  bw              2   56[BANK0 ] PTR unsigned int 
  4194 ;;		 -> SDCard@br(2), 
  4195 ;; Auto vars:     Size  Location     Type
  4196 ;;  clst            4   76[BANK0 ] unsigned long 
  4197 ;;  remain          4   72[BANK0 ] unsigned long 
  4198 ;;  sect            4   68[BANK0 ] unsigned long 
  4199 ;;  fs              2   83[BANK0 ] PTR struct .
  4200 ;;		 -> NULL(0), SDCard@fs(42), 
  4201 ;;  wcnt            2   81[BANK0 ] unsigned int 
  4202 ;;  p               2   66[BANK0 ] PTR const unsigned char 
  4203 ;;		 -> STR_9(8), 
  4204 ;;  cs              1   80[BANK0 ] unsigned char 
  4205 ;; Return value:  Size  Location     Type
  4206 ;;                  1    wreg      enum E3838
  4207 ;; Registers used:
  4208 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4209 ;; Tracked objects:
  4210 ;;		On entry : 0/0
  4211 ;;		On exit  : 0/0
  4212 ;;		Unchanged: 0/0
  4213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4214 ;;      Params:         0       6       0       0       0       0       0       0       0
  4215 ;;      Locals:         0      19       0       0       0       0       0       0       0
  4216 ;;      Temps:          0       8       0       0       0       0       0       0       0
  4217 ;;      Totals:         0      33       0       0       0       0       0       0       0
  4218 ;;Total ram usage:       33 bytes
  4219 ;; Hardware stack levels used:    1
  4220 ;; Hardware stack levels required when called:    9
  4221 ;; This function calls:
  4222 ;;		_clust2sect
  4223 ;;		_disk_writep
  4224 ;;		_get_fat
  4225 ;; This function is called by:
  4226 ;;		_SDCard
  4227 ;; This function uses a non-reentrant model
  4228 ;;
  4229                           
  4230                           	psect	text23
  4231  000646                     __ptext23:
  4232                           	opt stack 0
  4233  000646                     _pf_write:
  4234                           	opt stack 19
  4235                           
  4236                           ;pff.c: 925: DWORD clst;
  4237                           ;pff.c: 926: DWORD sect, remain;
  4238                           ;pff.c: 927: const BYTE *p = buff;
  4239                           
  4240                           ;incstack = 0
  4241  000646  C094  F0A2         	movff	pf_write@buff,pf_write@p
  4242  00064A  C095  F0A3         	movff	pf_write@buff+1,pf_write@p+1
  4243                           
  4244                           ;pff.c: 928: BYTE cs;
  4245                           ;pff.c: 929: UINT wcnt;
  4246                           ;pff.c: 930: FATFS *fs = FatFs;
  4247  00064E  C035  F0B3         	movff	_FatFs,pf_write@fs
  4248  000652  C036  F0B4         	movff	_FatFs+1,pf_write@fs+1
  4249                           
  4250                           ;pff.c: 933: *bw = 0;
  4251  000656  C098  FFD9         	movff	pf_write@bw,fsr2l
  4252  00065A  C099  FFDA         	movff	pf_write@bw+1,fsr2h
  4253  00065E  0E00               	movlw	0
  4254  000660  6EDE               	movwf	postinc2,c
  4255  000662  0E00               	movlw	0
  4256  000664  6EDD               	movwf	postdec2,c
  4257                           
  4258                           ;pff.c: 934: if (!fs) return FR_NOT_ENABLED;
  4259  000666  0100               	movlb	0	; () banked
  4260  000668  51B3               	movf	pf_write@fs& (0+255),w,b
  4261  00066A  11B4               	iorwf	(pf_write@fs+1)& (0+255),w,b
  4262  00066C  A4D8               	btfss	status,2,c
  4263  00066E  D002               	goto	l995
  4264                           
  4265                           ; BSR set to: 0
  4266  000670  0E05               	movlw	5
  4267                           
  4268                           ; BSR set to: 0
  4269  000672  0012               	return	
  4270  000674                     l995:
  4271                           
  4272                           ; BSR set to: 0
  4273                           ;pff.c: 935: if (!(fs->flag & 0x01))
  4274                           
  4275                           ; BSR set to: 0
  4276  000674  EE20 F001          	lfsr	2,1
  4277  000678  51B3               	movf	pf_write@fs& (0+255),w,b
  4278  00067A  26D9               	addwf	fsr2l,f,c
  4279  00067C  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4280  00067E  22DA               	addwfc	fsr2h,f,c
  4281  000680  B0DF               	btfsc	indf2,0,c
  4282  000682  D002               	goto	l997
  4283                           
  4284                           ; BSR set to: 0
  4285                           ;pff.c: 936: return FR_NOT_OPENED;
  4286  000684  0E04               	movlw	4
  4287                           
  4288                           ; BSR set to: 0
  4289  000686  0012               	return	
  4290  000688                     l997:
  4291                           
  4292                           ; BSR set to: 0
  4293                           ;pff.c: 938: if (!btw) {
  4294                           
  4295                           ; BSR set to: 0
  4296  000688  5196               	movf	pf_write@btw& (0+255),w,b
  4297  00068A  1197               	iorwf	(pf_write@btw+1)& (0+255),w,b
  4298  00068C  A4D8               	btfss	status,2,c
  4299  00068E  D031               	goto	l998
  4300                           
  4301                           ; BSR set to: 0
  4302                           ;pff.c: 939: if ((fs->flag & 0x40) && disk_writep(0, 0)) {fs->flag = 0; return FR_DISK_E
      +                          RR;};
  4303  000690  EE20 F001          	lfsr	2,1
  4304  000694  51B3               	movf	pf_write@fs& (0+255),w,b
  4305  000696  26D9               	addwf	fsr2l,f,c
  4306  000698  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4307  00069A  22DA               	addwfc	fsr2h,f,c
  4308  00069C  ACDF               	btfss	indf2,6,c
  4309  00069E  D01E               	goto	l999
  4310                           
  4311                           ; BSR set to: 0
  4312  0006A0  0E00               	movlw	0
  4313  0006A2  6E23               	movwf	disk_writep@wr,c
  4314  0006A4  0E00               	movlw	0
  4315  0006A6  6E24               	movwf	disk_writep@wr+1,c
  4316  0006A8  0E00               	movlw	0
  4317  0006AA  6E25               	movwf	disk_writep@wr+2,c
  4318  0006AC  0E00               	movlw	0
  4319  0006AE  6E26               	movwf	disk_writep@sc,c
  4320  0006B0  0E00               	movlw	0
  4321  0006B2  6E27               	movwf	disk_writep@sc+1,c
  4322  0006B4  0E00               	movlw	0
  4323  0006B6  6E28               	movwf	disk_writep@sc+2,c
  4324  0006B8  0E00               	movlw	0
  4325  0006BA  6E29               	movwf	disk_writep@sc+3,c
  4326  0006BC  EC92  F00F         	call	_disk_writep	;wreg free
  4327  0006C0  0900               	iorlw	0
  4328  0006C2  B4D8               	btfsc	status,2,c
  4329  0006C4  D00B               	goto	l999
  4330  0006C6  0100               	movlb	0	; () banked
  4331  0006C8  EE20 F001          	lfsr	2,1
  4332  0006CC  51B3               	movf	pf_write@fs& (0+255),w,b
  4333  0006CE  26D9               	addwf	fsr2l,f,c
  4334  0006D0  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4335  0006D2  22DA               	addwfc	fsr2h,f,c
  4336  0006D4  0E00               	movlw	0
  4337  0006D6  6EDF               	movwf	indf2,c
  4338                           
  4339                           ; BSR set to: 0
  4340  0006D8  0E01               	movlw	1
  4341                           
  4342                           ; BSR set to: 0
  4343  0006DA  0012               	return	
  4344  0006DC                     l999:
  4345                           
  4346                           ;pff.c: 940: fs->flag &= ~0x40;
  4347                           
  4348                           ; BSR set to: 0
  4349  0006DC  0100               	movlb	0	; () banked
  4350  0006DE  EE20 F001          	lfsr	2,1
  4351  0006E2  51B3               	movf	pf_write@fs& (0+255),w,b
  4352  0006E4  26D9               	addwf	fsr2l,f,c
  4353  0006E6  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4354  0006E8  22DA               	addwfc	fsr2h,f,c
  4355  0006EA  0EBF               	movlw	191
  4356  0006EC  16DF               	andwf	indf2,f,c
  4357                           
  4358                           ; BSR set to: 0
  4359                           ;pff.c: 941: return FR_OK;
  4360  0006EE  0E00               	movlw	0
  4361                           
  4362                           ; BSR set to: 0
  4363  0006F0  0012               	return	
  4364  0006F2                     l998:
  4365                           
  4366                           ; BSR set to: 0
  4367                           ;pff.c: 943: if (!(fs->flag & 0x40))
  4368                           
  4369                           ; BSR set to: 0
  4370  0006F2  EE20 F001          	lfsr	2,1
  4371  0006F6  51B3               	movf	pf_write@fs& (0+255),w,b
  4372  0006F8  26D9               	addwf	fsr2l,f,c
  4373  0006FA  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4374  0006FC  22DA               	addwfc	fsr2h,f,c
  4375  0006FE  BCDF               	btfsc	indf2,6,c
  4376  000700  D00E               	goto	l1001
  4377                           
  4378                           ; BSR set to: 0
  4379                           ;pff.c: 944: fs->fptr &= 0xFFFFFE00;
  4380  000702  EE20 F016          	lfsr	2,22
  4381  000706  51B3               	movf	pf_write@fs& (0+255),w,b
  4382  000708  26D9               	addwf	fsr2l,f,c
  4383  00070A  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4384  00070C  22DA               	addwfc	fsr2h,f,c
  4385  00070E  0E00               	movlw	0
  4386  000710  16DE               	andwf	postinc2,f,c
  4387  000712  0EFE               	movlw	254
  4388  000714  16DE               	andwf	postinc2,f,c
  4389  000716  0EFF               	movlw	255
  4390  000718  16DE               	andwf	postinc2,f,c
  4391  00071A  0EFF               	movlw	255
  4392  00071C  16DE               	andwf	postinc2,f,c
  4393  00071E                     l1001:
  4394                           
  4395                           ; BSR set to: 0
  4396                           ;pff.c: 945: }
  4397                           ;pff.c: 946: remain = fs->fsize - fs->fptr;
  4398                           
  4399                           ; BSR set to: 0
  4400  00071E  EE20 F01A          	lfsr	2,26
  4401  000722  51B3               	movf	pf_write@fs& (0+255),w,b
  4402  000724  26D9               	addwf	fsr2l,f,c
  4403  000726  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4404  000728  22DA               	addwfc	fsr2h,f,c
  4405  00072A  CFDE F09A          	movff	postinc2,??_pf_write
  4406  00072E  CFDE F09B          	movff	postinc2,??_pf_write+1
  4407  000732  CFDE F09C          	movff	postinc2,??_pf_write+2
  4408  000736  CFDE F09D          	movff	postinc2,??_pf_write+3
  4409  00073A  EE20 F016          	lfsr	2,22
  4410  00073E  51B3               	movf	pf_write@fs& (0+255),w,b
  4411  000740  26D9               	addwf	fsr2l,f,c
  4412  000742  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4413  000744  22DA               	addwfc	fsr2h,f,c
  4414  000746  CFDE F09E          	movff	postinc2,??_pf_write+4
  4415  00074A  CFDE F09F          	movff	postinc2,??_pf_write+5
  4416  00074E  CFDE F0A0          	movff	postinc2,??_pf_write+6
  4417  000752  CFDE F0A1          	movff	postinc2,??_pf_write+7
  4418  000756  1F9E               	comf	(??_pf_write+4)& (0+255),f,b
  4419  000758  1F9F               	comf	(??_pf_write+5)& (0+255),f,b
  4420  00075A  1FA0               	comf	(??_pf_write+6)& (0+255),f,b
  4421  00075C  1FA1               	comf	(??_pf_write+7)& (0+255),f,b
  4422  00075E  2B9E               	incf	(??_pf_write+4)& (0+255),f,b
  4423  000760  0E00               	movlw	0
  4424  000762  239F               	addwfc	(??_pf_write+5)& (0+255),f,b
  4425  000764  23A0               	addwfc	(??_pf_write+6)& (0+255),f,b
  4426  000766  23A1               	addwfc	(??_pf_write+7)& (0+255),f,b
  4427  000768  519A               	movf	??_pf_write& (0+255),w,b
  4428  00076A  259E               	addwf	(??_pf_write+4)& (0+255),w,b
  4429  00076C  6FA8               	movwf	pf_write@remain& (0+255),b
  4430  00076E  519B               	movf	(??_pf_write+1)& (0+255),w,b
  4431  000770  219F               	addwfc	(??_pf_write+5)& (0+255),w,b
  4432  000772  6FA9               	movwf	(pf_write@remain+1)& (0+255),b
  4433  000774  519C               	movf	(??_pf_write+2)& (0+255),w,b
  4434  000776  21A0               	addwfc	(??_pf_write+6)& (0+255),w,b
  4435  000778  6FAA               	movwf	(pf_write@remain+2)& (0+255),b
  4436  00077A  519D               	movf	(??_pf_write+3)& (0+255),w,b
  4437  00077C  21A1               	addwfc	(??_pf_write+7)& (0+255),w,b
  4438  00077E  6FAB               	movwf	(pf_write@remain+3)& (0+255),b
  4439                           
  4440                           ; BSR set to: 0
  4441                           ;pff.c: 947: if (btw > remain) btw = (UINT)remain;
  4442  000780  5196               	movf	pf_write@btw& (0+255),w,b
  4443  000782  6F9A               	movwf	??_pf_write& (0+255),b
  4444  000784  5197               	movf	(pf_write@btw+1)& (0+255),w,b
  4445  000786  6F9B               	movwf	(??_pf_write+1)& (0+255),b
  4446  000788  6B9C               	clrf	(??_pf_write+2)& (0+255),b
  4447  00078A  6B9D               	clrf	(??_pf_write+3)& (0+255),b
  4448  00078C  519A               	movf	??_pf_write& (0+255),w,b
  4449  00078E  5DA8               	subwf	pf_write@remain& (0+255),w,b
  4450  000790  519B               	movf	(??_pf_write+1)& (0+255),w,b
  4451  000792  59A9               	subwfb	(pf_write@remain+1)& (0+255),w,b
  4452  000794  519C               	movf	(??_pf_write+2)& (0+255),w,b
  4453  000796  59AA               	subwfb	(pf_write@remain+2)& (0+255),w,b
  4454  000798  519D               	movf	(??_pf_write+3)& (0+255),w,b
  4455  00079A  59AB               	subwfb	(pf_write@remain+3)& (0+255),w,b
  4456  00079C  B0D8               	btfsc	status,0,c
  4457  00079E  D1AC               	goto	l1014
  4458                           
  4459                           ; BSR set to: 0
  4460  0007A0  C0A8  F096         	movff	pf_write@remain,pf_write@btw
  4461  0007A4  C0A9  F097         	movff	pf_write@remain+1,pf_write@btw+1
  4462                           
  4463                           ; BSR set to: 0
  4464                           ;pff.c: 949: while (btw) {
  4465  0007A8  D1A7               	goto	l1014
  4466  0007AA                     
  4467                           ; BSR set to: 0
  4468                           ;pff.c: 950: if ((UINT)fs->fptr % 512 == 0) {
  4469                           
  4470                           ; BSR set to: 0
  4471  0007AA  0EFF               	movlw	255
  4472  0007AC  6F9A               	movwf	??_pf_write& (0+255),b
  4473  0007AE  0E01               	movlw	1
  4474  0007B0  6F9B               	movwf	(??_pf_write+1)& (0+255),b
  4475  0007B2  EE20 F016          	lfsr	2,22
  4476  0007B6  51B3               	movf	pf_write@fs& (0+255),w,b
  4477  0007B8  26D9               	addwf	fsr2l,f,c
  4478  0007BA  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4479  0007BC  22DA               	addwfc	fsr2h,f,c
  4480  0007BE  CFDE F09C          	movff	postinc2,??_pf_write+2
  4481  0007C2  CFDD F09D          	movff	postdec2,??_pf_write+3
  4482  0007C6  519A               	movf	??_pf_write& (0+255),w,b
  4483  0007C8  179C               	andwf	(??_pf_write+2)& (0+255),f,b
  4484  0007CA  519B               	movf	(??_pf_write+1)& (0+255),w,b
  4485  0007CC  179D               	andwf	(??_pf_write+3)& (0+255),f,b
  4486  0007CE  519C               	movf	(??_pf_write+2)& (0+255),w,b
  4487  0007D0  119D               	iorwf	(??_pf_write+3)& (0+255),w,b
  4488  0007D2  A4D8               	btfss	status,2,c
  4489  0007D4  D0E9               	goto	l1005
  4490                           
  4491                           ; BSR set to: 0
  4492                           ;pff.c: 951: cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));
  4493  0007D6  EE20 F016          	lfsr	2,22
  4494  0007DA  51B3               	movf	pf_write@fs& (0+255),w,b
  4495  0007DC  26D9               	addwf	fsr2l,f,c
  4496  0007DE  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4497  0007E0  22DA               	addwfc	fsr2h,f,c
  4498  0007E2  CFDE F09A          	movff	postinc2,??_pf_write
  4499  0007E6  CFDE F09B          	movff	postinc2,??_pf_write+1
  4500  0007EA  CFDE F09C          	movff	postinc2,??_pf_write+2
  4501  0007EE  CFDE F09D          	movff	postinc2,??_pf_write+3
  4502  0007F2  0E0A               	movlw	10
  4503  0007F4  D005               	goto	u7990
  4504  0007F6                     u7995:
  4505  0007F6  90D8               	bcf	status,0,c
  4506  0007F8  339D               	rrcf	(??_pf_write+3)& (0+255),f,b
  4507  0007FA  339C               	rrcf	(??_pf_write+2)& (0+255),f,b
  4508  0007FC  339B               	rrcf	(??_pf_write+1)& (0+255),f,b
  4509  0007FE  339A               	rrcf	??_pf_write& (0+255),f,b
  4510  000800                     u7990:
  4511  000800  2EE8               	decfsz	wreg,f,c
  4512  000802  D7F9               	goto	u7995
  4513  000804  EE20 F002          	lfsr	2,2
  4514  000808  51B3               	movf	pf_write@fs& (0+255),w,b
  4515  00080A  26D9               	addwf	fsr2l,f,c
  4516  00080C  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4517  00080E  22DA               	addwfc	fsr2h,f,c
  4518  000810  50DF               	movf	indf2,w,c
  4519  000812  6F9E               	movwf	(??_pf_write+4)& (0+255),b
  4520  000814  059E               	decf	(??_pf_write+4)& (0+255),w,b
  4521  000816  159A               	andwf	??_pf_write& (0+255),w,b
  4522  000818  6FB0               	movwf	pf_write@cs& (0+255),b
  4523                           
  4524                           ; BSR set to: 0
  4525                           ;pff.c: 952: if (!cs) {
  4526  00081A  51B0               	movf	pf_write@cs& (0+255),w,b
  4527  00081C  A4D8               	btfss	status,2,c
  4528  00081E  D054               	goto	l1006
  4529                           
  4530                           ; BSR set to: 0
  4531                           ;pff.c: 953: if (fs->fptr == 0)
  4532  000820  EE20 F016          	lfsr	2,22
  4533  000824  51B3               	movf	pf_write@fs& (0+255),w,b
  4534  000826  26D9               	addwf	fsr2l,f,c
  4535  000828  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4536  00082A  22DA               	addwfc	fsr2h,f,c
  4537  00082C  50DE               	movf	postinc2,w,c
  4538  00082E  10DE               	iorwf	postinc2,w,c
  4539  000830  10DE               	iorwf	postinc2,w,c
  4540  000832  10DE               	iorwf	postinc2,w,c
  4541  000834  A4D8               	btfss	status,2,c
  4542  000836  D00F               	goto	l1007
  4543                           
  4544                           ; BSR set to: 0
  4545                           ;pff.c: 954: clst = fs->org_clust;
  4546  000838  EE20 F01E          	lfsr	2,30
  4547  00083C  51B3               	movf	pf_write@fs& (0+255),w,b
  4548  00083E  26D9               	addwf	fsr2l,f,c
  4549  000840  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4550  000842  22DA               	addwfc	fsr2h,f,c
  4551  000844  CFDE F0AC          	movff	postinc2,pf_write@clst
  4552  000848  CFDE F0AD          	movff	postinc2,pf_write@clst+1
  4553  00084C  CFDE F0AE          	movff	postinc2,pf_write@clst+2
  4554  000850  CFDE F0AF          	movff	postinc2,pf_write@clst+3
  4555  000854  D018               	goto	l1008
  4556  000856                     l1007:
  4557                           
  4558                           ; BSR set to: 0
  4559                           ;pff.c: 955: else
  4560                           ;pff.c: 956: clst = get_fat(fs->curr_clust);
  4561                           
  4562                           ; BSR set to: 0
  4563  000856  EE20 F022          	lfsr	2,34
  4564  00085A  51B3               	movf	pf_write@fs& (0+255),w,b
  4565  00085C  26D9               	addwf	fsr2l,f,c
  4566  00085E  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4567  000860  22DA               	addwfc	fsr2h,f,c
  4568  000862  CFDE F06C          	movff	postinc2,get_fat@clst
  4569  000866  CFDE F06D          	movff	postinc2,get_fat@clst+1
  4570  00086A  CFDE F06E          	movff	postinc2,get_fat@clst+2
  4571  00086E  CFDE F06F          	movff	postinc2,get_fat@clst+3
  4572  000872  EC82  F005         	call	_get_fat	;wreg free
  4573  000876  C06C  F0AC         	movff	?_get_fat,pf_write@clst
  4574  00087A  C06D  F0AD         	movff	?_get_fat+1,pf_write@clst+1
  4575  00087E  C06E  F0AE         	movff	?_get_fat+2,pf_write@clst+2
  4576  000882  C06F  F0AF         	movff	?_get_fat+3,pf_write@clst+3
  4577  000886                     l1008:
  4578                           
  4579                           ;pff.c: 957: if (clst <= 1) {fs->flag = 0; return FR_DISK_ERR;};
  4580  000886  0100               	movlb	0	; () banked
  4581  000888  51AF               	movf	(pf_write@clst+3)& (0+255),w,b
  4582  00088A  11AE               	iorwf	(pf_write@clst+2)& (0+255),w,b
  4583  00088C  11AD               	iorwf	(pf_write@clst+1)& (0+255),w,b
  4584  00088E  E10E               	bnz	l6918
  4585  000890  0E02               	movlw	2
  4586  000892  5DAC               	subwf	pf_write@clst& (0+255),w,b
  4587  000894  B0D8               	btfsc	status,0,c
  4588  000896  D00A               	goto	l1009
  4589                           
  4590                           ; BSR set to: 0
  4591  000898  EE20 F001          	lfsr	2,1
  4592  00089C  51B3               	movf	pf_write@fs& (0+255),w,b
  4593  00089E  26D9               	addwf	fsr2l,f,c
  4594  0008A0  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4595  0008A2  22DA               	addwfc	fsr2h,f,c
  4596  0008A4  0E00               	movlw	0
  4597  0008A6  6EDF               	movwf	indf2,c
  4598                           
  4599                           ; BSR set to: 0
  4600  0008A8  0E01               	movlw	1
  4601                           
  4602                           ; BSR set to: 0
  4603  0008AA  0012               	return	
  4604  0008AC                     l1009:
  4605  0008AC                     l6918:
  4606                           
  4607                           ; BSR set to: 0
  4608                           ;pff.c: 958: fs->curr_clust = clst;
  4609  0008AC  EE20 F022          	lfsr	2,34
  4610  0008B0  51B3               	movf	pf_write@fs& (0+255),w,b
  4611  0008B2  26D9               	addwf	fsr2l,f,c
  4612  0008B4  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4613  0008B6  22DA               	addwfc	fsr2h,f,c
  4614  0008B8  C0AC  FFDE         	movff	pf_write@clst,postinc2
  4615  0008BC  C0AD  FFDE         	movff	pf_write@clst+1,postinc2
  4616  0008C0  C0AE  FFDE         	movff	pf_write@clst+2,postinc2
  4617  0008C4  C0AF  FFDE         	movff	pf_write@clst+3,postinc2
  4618  0008C8                     l1006:
  4619                           
  4620                           ; BSR set to: 0
  4621                           ;pff.c: 959: }
  4622                           ;pff.c: 960: sect = clust2sect(fs->curr_clust);
  4623                           
  4624                           ; BSR set to: 0
  4625  0008C8  EE20 F022          	lfsr	2,34
  4626  0008CC  51B3               	movf	pf_write@fs& (0+255),w,b
  4627  0008CE  26D9               	addwf	fsr2l,f,c
  4628  0008D0  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4629  0008D2  22DA               	addwfc	fsr2h,f,c
  4630  0008D4  CFDE F026          	movff	postinc2,clust2sect@clst
  4631  0008D8  CFDE F027          	movff	postinc2,clust2sect@clst+1
  4632  0008DC  CFDE F028          	movff	postinc2,clust2sect@clst+2
  4633  0008E0  CFDE F029          	movff	postinc2,clust2sect@clst+3
  4634  0008E4  ECC4  F013         	call	_clust2sect	;wreg free
  4635  0008E8  C026  F0A4         	movff	?_clust2sect,pf_write@sect
  4636  0008EC  C027  F0A5         	movff	?_clust2sect+1,pf_write@sect+1
  4637  0008F0  C028  F0A6         	movff	?_clust2sect+2,pf_write@sect+2
  4638  0008F4  C029  F0A7         	movff	?_clust2sect+3,pf_write@sect+3
  4639                           
  4640                           ;pff.c: 961: if (!sect) {fs->flag = 0; return FR_DISK_ERR;};
  4641  0008F8  0100               	movlb	0	; () banked
  4642  0008FA  51A4               	movf	pf_write@sect& (0+255),w,b
  4643  0008FC  11A5               	iorwf	(pf_write@sect+1)& (0+255),w,b
  4644  0008FE  11A6               	iorwf	(pf_write@sect+2)& (0+255),w,b
  4645  000900  11A7               	iorwf	(pf_write@sect+3)& (0+255),w,b
  4646  000902  A4D8               	btfss	status,2,c
  4647  000904  D00A               	goto	l1010
  4648                           
  4649                           ; BSR set to: 0
  4650  000906  EE20 F001          	lfsr	2,1
  4651  00090A  51B3               	movf	pf_write@fs& (0+255),w,b
  4652  00090C  26D9               	addwf	fsr2l,f,c
  4653  00090E  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4654  000910  22DA               	addwfc	fsr2h,f,c
  4655  000912  0E00               	movlw	0
  4656  000914  6EDF               	movwf	indf2,c
  4657                           
  4658                           ; BSR set to: 0
  4659  000916  0E01               	movlw	1
  4660                           
  4661                           ; BSR set to: 0
  4662  000918  0012               	return	
  4663  00091A                     l1010:
  4664                           
  4665                           ; BSR set to: 0
  4666                           ;pff.c: 962: fs->dsect = sect + cs;
  4667                           
  4668                           ; BSR set to: 0
  4669  00091A  51B0               	movf	pf_write@cs& (0+255),w,b
  4670  00091C  25A4               	addwf	pf_write@sect& (0+255),w,b
  4671  00091E  6F9A               	movwf	??_pf_write& (0+255),b
  4672  000920  0E00               	movlw	0
  4673  000922  21A5               	addwfc	(pf_write@sect+1)& (0+255),w,b
  4674  000924  6F9B               	movwf	(??_pf_write+1)& (0+255),b
  4675  000926  0E00               	movlw	0
  4676  000928  21A6               	addwfc	(pf_write@sect+2)& (0+255),w,b
  4677  00092A  6F9C               	movwf	(??_pf_write+2)& (0+255),b
  4678  00092C  0E00               	movlw	0
  4679  00092E  21A7               	addwfc	(pf_write@sect+3)& (0+255),w,b
  4680  000930  6F9D               	movwf	(??_pf_write+3)& (0+255),b
  4681  000932  EE20 F026          	lfsr	2,38
  4682  000936  51B3               	movf	pf_write@fs& (0+255),w,b
  4683  000938  26D9               	addwf	fsr2l,f,c
  4684  00093A  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4685  00093C  22DA               	addwfc	fsr2h,f,c
  4686  00093E  C09A  FFDE         	movff	??_pf_write,postinc2
  4687  000942  C09B  FFDE         	movff	??_pf_write+1,postinc2
  4688  000946  C09C  FFDE         	movff	??_pf_write+2,postinc2
  4689  00094A  C09D  FFDE         	movff	??_pf_write+3,postinc2
  4690                           
  4691                           ; BSR set to: 0
  4692                           ;pff.c: 963: if (disk_writep(0, fs->dsect)) {fs->flag = 0; return FR_DISK_ERR;};
  4693  00094E  0E00               	movlw	0
  4694  000950  6E23               	movwf	disk_writep@wr,c
  4695  000952  0E00               	movlw	0
  4696  000954  6E24               	movwf	disk_writep@wr+1,c
  4697  000956  0E00               	movlw	0
  4698  000958  6E25               	movwf	disk_writep@wr+2,c
  4699  00095A  EE20 F026          	lfsr	2,38
  4700  00095E  51B3               	movf	pf_write@fs& (0+255),w,b
  4701  000960  26D9               	addwf	fsr2l,f,c
  4702  000962  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4703  000964  22DA               	addwfc	fsr2h,f,c
  4704  000966  CFDE F026          	movff	postinc2,disk_writep@sc
  4705  00096A  CFDE F027          	movff	postinc2,disk_writep@sc+1
  4706  00096E  CFDE F028          	movff	postinc2,disk_writep@sc+2
  4707  000972  CFDE F029          	movff	postinc2,disk_writep@sc+3
  4708  000976  EC92  F00F         	call	_disk_writep	;wreg free
  4709  00097A  0900               	iorlw	0
  4710  00097C  B4D8               	btfsc	status,2,c
  4711  00097E  D00B               	goto	l1011
  4712  000980  0100               	movlb	0	; () banked
  4713  000982  EE20 F001          	lfsr	2,1
  4714  000986  51B3               	movf	pf_write@fs& (0+255),w,b
  4715  000988  26D9               	addwf	fsr2l,f,c
  4716  00098A  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4717  00098C  22DA               	addwfc	fsr2h,f,c
  4718  00098E  0E00               	movlw	0
  4719  000990  6EDF               	movwf	indf2,c
  4720                           
  4721                           ; BSR set to: 0
  4722  000992  0E01               	movlw	1
  4723                           
  4724                           ; BSR set to: 0
  4725  000994  0012               	return	
  4726  000996                     l1011:
  4727                           
  4728                           ;pff.c: 964: fs->flag |= 0x40;
  4729                           
  4730                           ; BSR set to: 0
  4731  000996  0100               	movlb	0	; () banked
  4732  000998  EE20 F001          	lfsr	2,1
  4733  00099C  51B3               	movf	pf_write@fs& (0+255),w,b
  4734  00099E  26D9               	addwf	fsr2l,f,c
  4735  0009A0  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4736  0009A2  22DA               	addwfc	fsr2h,f,c
  4737  0009A4  0E00               	movlw	0
  4738  0009A6  8CDB               	bsf	plusw2,6,c
  4739  0009A8                     l1005:
  4740                           
  4741                           ; BSR set to: 0
  4742                           ;pff.c: 965: }
  4743                           ;pff.c: 966: wcnt = 512 - (UINT)fs->fptr % 512;
  4744  0009A8  0EFF               	movlw	255
  4745  0009AA  6F9A               	movwf	??_pf_write& (0+255),b
  4746  0009AC  0E01               	movlw	1
  4747  0009AE  6F9B               	movwf	(??_pf_write+1)& (0+255),b
  4748  0009B0  EE20 F016          	lfsr	2,22
  4749  0009B4  51B3               	movf	pf_write@fs& (0+255),w,b
  4750  0009B6  26D9               	addwf	fsr2l,f,c
  4751  0009B8  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4752  0009BA  22DA               	addwfc	fsr2h,f,c
  4753  0009BC  CFDE F09C          	movff	postinc2,??_pf_write+2
  4754  0009C0  CFDD F09D          	movff	postdec2,??_pf_write+3
  4755  0009C4  519A               	movf	??_pf_write& (0+255),w,b
  4756  0009C6  179C               	andwf	(??_pf_write+2)& (0+255),f,b
  4757  0009C8  519B               	movf	(??_pf_write+1)& (0+255),w,b
  4758  0009CA  179D               	andwf	(??_pf_write+3)& (0+255),f,b
  4759  0009CC  1F9C               	comf	(??_pf_write+2)& (0+255),f,b
  4760  0009CE  1F9D               	comf	(??_pf_write+3)& (0+255),f,b
  4761  0009D0  4B9C               	infsnz	(??_pf_write+2)& (0+255),f,b
  4762  0009D2  2B9D               	incf	(??_pf_write+3)& (0+255),f,b
  4763  0009D4  0E00               	movlw	0
  4764  0009D6  259C               	addwf	(??_pf_write+2)& (0+255),w,b
  4765  0009D8  6FB1               	movwf	pf_write@wcnt& (0+255),b
  4766  0009DA  0E02               	movlw	2
  4767  0009DC  219D               	addwfc	(??_pf_write+3)& (0+255),w,b
  4768  0009DE  6FB2               	movwf	(pf_write@wcnt+1)& (0+255),b
  4769                           
  4770                           ; BSR set to: 0
  4771                           ;pff.c: 967: if (wcnt > btw)wcnt = btw;
  4772  0009E0  51B1               	movf	pf_write@wcnt& (0+255),w,b
  4773  0009E2  5D96               	subwf	pf_write@btw& (0+255),w,b
  4774  0009E4  51B2               	movf	(pf_write@wcnt+1)& (0+255),w,b
  4775  0009E6  5997               	subwfb	(pf_write@btw+1)& (0+255),w,b
  4776  0009E8  B0D8               	btfsc	status,0,c
  4777  0009EA  D004               	goto	l1012
  4778                           
  4779                           ; BSR set to: 0
  4780  0009EC  C096  F0B1         	movff	pf_write@btw,pf_write@wcnt
  4781  0009F0  C097  F0B2         	movff	pf_write@btw+1,pf_write@wcnt+1
  4782  0009F4                     l1012:
  4783                           
  4784                           ; BSR set to: 0
  4785                           ;pff.c: 968: if (disk_writep(p, fs->dsect )) {fs->flag = 0; return FR_DISK_ERR;};
  4786                           
  4787                           ; BSR set to: 0
  4788  0009F4  C0A2  F023         	movff	pf_write@p,disk_writep@wr
  4789  0009F8  C0A3  F024         	movff	pf_write@p+1,disk_writep@wr+1
  4790  0009FC  5023               	movf	disk_writep@wr,w,c
  4791  0009FE  1024               	iorwf	disk_writep@wr+1,w,c
  4792  000A00  A4D8               	btfss	status,2,c
  4793  000A02  0E00               	movlw	low (__mediumconst shr (0+16))
  4794  000A04  6E25               	movwf	disk_writep@wr+2,c
  4795  000A06  EE20 F026          	lfsr	2,38
  4796  000A0A  51B3               	movf	pf_write@fs& (0+255),w,b
  4797  000A0C  26D9               	addwf	fsr2l,f,c
  4798  000A0E  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4799  000A10  22DA               	addwfc	fsr2h,f,c
  4800  000A12  CFDE F026          	movff	postinc2,disk_writep@sc
  4801  000A16  CFDE F027          	movff	postinc2,disk_writep@sc+1
  4802  000A1A  CFDE F028          	movff	postinc2,disk_writep@sc+2
  4803  000A1E  CFDE F029          	movff	postinc2,disk_writep@sc+3
  4804  000A22  EC92  F00F         	call	_disk_writep	;wreg free
  4805  000A26  0900               	iorlw	0
  4806  000A28  B4D8               	btfsc	status,2,c
  4807  000A2A  D00B               	goto	l1013
  4808  000A2C  0100               	movlb	0	; () banked
  4809  000A2E  EE20 F001          	lfsr	2,1
  4810  000A32  51B3               	movf	pf_write@fs& (0+255),w,b
  4811  000A34  26D9               	addwf	fsr2l,f,c
  4812  000A36  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4813  000A38  22DA               	addwfc	fsr2h,f,c
  4814  000A3A  0E00               	movlw	0
  4815  000A3C  6EDF               	movwf	indf2,c
  4816                           
  4817                           ; BSR set to: 0
  4818  000A3E  0E01               	movlw	1
  4819                           
  4820                           ; BSR set to: 0
  4821  000A40  0012               	return	
  4822  000A42                     l1013:
  4823                           
  4824                           ;pff.c: 969: fs->fptr += wcnt; p += wcnt;
  4825                           
  4826                           ; BSR set to: 0
  4827  000A42  0100               	movlb	0	; () banked
  4828  000A44  EE20 F016          	lfsr	2,22
  4829  000A48  51B3               	movf	pf_write@fs& (0+255),w,b
  4830  000A4A  26D9               	addwf	fsr2l,f,c
  4831  000A4C  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4832  000A4E  22DA               	addwfc	fsr2h,f,c
  4833  000A50  51B1               	movf	pf_write@wcnt& (0+255),w,b
  4834  000A52  26DE               	addwf	postinc2,f,c
  4835  000A54  51B2               	movf	(pf_write@wcnt+1)& (0+255),w,b
  4836  000A56  22DE               	addwfc	postinc2,f,c
  4837  000A58  0E00               	movlw	0
  4838  000A5A  22DE               	addwfc	postinc2,f,c
  4839  000A5C  22DE               	addwfc	postinc2,f,c
  4840                           
  4841                           ; BSR set to: 0
  4842  000A5E  51B1               	movf	pf_write@wcnt& (0+255),w,b
  4843  000A60  27A2               	addwf	pf_write@p& (0+255),f,b
  4844  000A62  51B2               	movf	(pf_write@wcnt+1)& (0+255),w,b
  4845  000A64  23A3               	addwfc	(pf_write@p+1)& (0+255),f,b
  4846                           
  4847                           ; BSR set to: 0
  4848                           ;pff.c: 970: btw -= wcnt; *bw += wcnt;
  4849  000A66  51B1               	movf	pf_write@wcnt& (0+255),w,b
  4850  000A68  5F96               	subwf	pf_write@btw& (0+255),f,b
  4851  000A6A  51B2               	movf	(pf_write@wcnt+1)& (0+255),w,b
  4852  000A6C  5B97               	subwfb	(pf_write@btw+1)& (0+255),f,b
  4853                           
  4854                           ; BSR set to: 0
  4855  000A6E  C098  FFD9         	movff	pf_write@bw,fsr2l
  4856  000A72  C099  FFDA         	movff	pf_write@bw+1,fsr2h
  4857  000A76  51B1               	movf	pf_write@wcnt& (0+255),w,b
  4858  000A78  26DE               	addwf	postinc2,f,c
  4859  000A7A  51B2               	movf	(pf_write@wcnt+1)& (0+255),w,b
  4860  000A7C  22DD               	addwfc	postdec2,f,c
  4861                           
  4862                           ; BSR set to: 0
  4863                           ;pff.c: 971: if ((UINT)fs->fptr % 512 == 0) {
  4864  000A7E  0EFF               	movlw	255
  4865  000A80  6F9A               	movwf	??_pf_write& (0+255),b
  4866  000A82  0E01               	movlw	1
  4867  000A84  6F9B               	movwf	(??_pf_write+1)& (0+255),b
  4868  000A86  EE20 F016          	lfsr	2,22
  4869  000A8A  51B3               	movf	pf_write@fs& (0+255),w,b
  4870  000A8C  26D9               	addwf	fsr2l,f,c
  4871  000A8E  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4872  000A90  22DA               	addwfc	fsr2h,f,c
  4873  000A92  CFDE F09C          	movff	postinc2,??_pf_write+2
  4874  000A96  CFDD F09D          	movff	postdec2,??_pf_write+3
  4875  000A9A  519A               	movf	??_pf_write& (0+255),w,b
  4876  000A9C  179C               	andwf	(??_pf_write+2)& (0+255),f,b
  4877  000A9E  519B               	movf	(??_pf_write+1)& (0+255),w,b
  4878  000AA0  179D               	andwf	(??_pf_write+3)& (0+255),f,b
  4879  000AA2  519C               	movf	(??_pf_write+2)& (0+255),w,b
  4880  000AA4  119D               	iorwf	(??_pf_write+3)& (0+255),w,b
  4881  000AA6  A4D8               	btfss	status,2,c
  4882  000AA8  D027               	goto	l1014
  4883                           
  4884                           ; BSR set to: 0
  4885                           ;pff.c: 972: if (disk_writep(0, 0)) {fs->flag = 0; return FR_DISK_ERR;};
  4886  000AAA  0E00               	movlw	0
  4887  000AAC  6E23               	movwf	disk_writep@wr,c
  4888  000AAE  0E00               	movlw	0
  4889  000AB0  6E24               	movwf	disk_writep@wr+1,c
  4890  000AB2  0E00               	movlw	0
  4891  000AB4  6E25               	movwf	disk_writep@wr+2,c
  4892  000AB6  0E00               	movlw	0
  4893  000AB8  6E26               	movwf	disk_writep@sc,c
  4894  000ABA  0E00               	movlw	0
  4895  000ABC  6E27               	movwf	disk_writep@sc+1,c
  4896  000ABE  0E00               	movlw	0
  4897  000AC0  6E28               	movwf	disk_writep@sc+2,c
  4898  000AC2  0E00               	movlw	0
  4899  000AC4  6E29               	movwf	disk_writep@sc+3,c
  4900  000AC6  EC92  F00F         	call	_disk_writep	;wreg free
  4901  000ACA  0900               	iorlw	0
  4902  000ACC  B4D8               	btfsc	status,2,c
  4903  000ACE  D00B               	goto	l1015
  4904  000AD0  0100               	movlb	0	; () banked
  4905  000AD2  EE20 F001          	lfsr	2,1
  4906  000AD6  51B3               	movf	pf_write@fs& (0+255),w,b
  4907  000AD8  26D9               	addwf	fsr2l,f,c
  4908  000ADA  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4909  000ADC  22DA               	addwfc	fsr2h,f,c
  4910  000ADE  0E00               	movlw	0
  4911  000AE0  6EDF               	movwf	indf2,c
  4912                           
  4913                           ; BSR set to: 0
  4914  000AE2  0E01               	movlw	1
  4915                           
  4916                           ; BSR set to: 0
  4917  000AE4  0012               	return	
  4918  000AE6                     l1015:
  4919                           
  4920                           ;pff.c: 973: fs->flag &= ~0x40;
  4921                           
  4922                           ; BSR set to: 0
  4923  000AE6  0100               	movlb	0	; () banked
  4924  000AE8  EE20 F001          	lfsr	2,1
  4925  000AEC  51B3               	movf	pf_write@fs& (0+255),w,b
  4926  000AEE  26D9               	addwf	fsr2l,f,c
  4927  000AF0  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4928  000AF2  22DA               	addwfc	fsr2h,f,c
  4929  000AF4  0EBF               	movlw	191
  4930  000AF6  16DF               	andwf	indf2,f,c
  4931  000AF8                     l1014:
  4932                           
  4933                           ; BSR set to: 0
  4934                           
  4935                           ; BSR set to: 0
  4936                           
  4937                           ; BSR set to: 0
  4938  000AF8  5196               	movf	pf_write@btw& (0+255),w,b
  4939  000AFA  1197               	iorwf	(pf_write@btw+1)& (0+255),w,b
  4940  000AFC  A4D8               	btfss	status,2,c
  4941  000AFE  D655               	goto	l1004
  4942                           
  4943                           ; BSR set to: 0
  4944                           ;pff.c: 974: }
  4945                           ;pff.c: 975: }
  4946                           ;pff.c: 977: return FR_OK;
  4947                           
  4948                           ; BSR set to: 0
  4949  000B00  0E00               	movlw	0
  4950  000B02  0012               	return	
  4951  000B04                     __end_of_pf_write:
  4952                           	opt stack 0
  4953                           tosu	equ	0xFFF
  4954                           tosh	equ	0xFFE
  4955                           tosl	equ	0xFFD
  4956                           pclath	equ	0xFFA
  4957                           tblptru	equ	0xFF8
  4958                           tblptrh	equ	0xFF7
  4959                           tblptrl	equ	0xFF6
  4960                           tablat	equ	0xFF5
  4961                           prodh	equ	0xFF4
  4962                           prodl	equ	0xFF3
  4963                           intcon	equ	0xFF2
  4964                           intcon2	equ	0xFF1
  4965                           intcon3	equ	0xFF0
  4966                           postinc0	equ	0xFEE
  4967                           wreg	equ	0xFE8
  4968                           postinc1	equ	0xFE6
  4969                           postdec1	equ	0xFE5
  4970                           fsr1h	equ	0xFE2
  4971                           fsr1l	equ	0xFE1
  4972                           indf2	equ	0xFDF
  4973                           postinc2	equ	0xFDE
  4974                           postdec2	equ	0xFDD
  4975                           plusw2	equ	0xFDB
  4976                           fsr2h	equ	0xFDA
  4977                           fsr2l	equ	0xFD9
  4978                           status	equ	0xFD8
  4979                           
  4980 ;; *************** function _disk_writep *****************
  4981 ;; Defined at:
  4982 ;;		line 291 in file "diskio.c"
  4983 ;; Parameters:    Size  Location     Type
  4984 ;;  wr              3   34[COMRAM] PTR const unsigned char 
  4985 ;;		 -> ROM(32767), STR_9(8), 
  4986 ;;  sc              4   37[COMRAM] unsigned long 
  4987 ;; Auto vars:     Size  Location     Type
  4988 ;;  j               2    6[BANK0 ] int 
  4989 ;;  i               2    4[BANK0 ] int 
  4990 ;;  buff            1    8[BANK0 ] unsigned char 
  4991 ;;  res             1    0        enum E14
  4992 ;; Return value:  Size  Location     Type
  4993 ;;                  1    wreg      enum E14
  4994 ;; Registers used:
  4995 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4996 ;; Tracked objects:
  4997 ;;		On entry : 0/0
  4998 ;;		On exit  : 0/0
  4999 ;;		Unchanged: 0/0
  5000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5001 ;;      Params:         7       0       0       0       0       0       0       0       0
  5002 ;;      Locals:         0       5       0       0       0       0       0       0       0
  5003 ;;      Temps:          0       4       0       0       0       0       0       0       0
  5004 ;;      Totals:         7       9       0       0       0       0       0       0       0
  5005 ;;Total ram usage:       16 bytes
  5006 ;; Hardware stack levels used:    1
  5007 ;; Hardware stack levels required when called:    7
  5008 ;; This function calls:
  5009 ;;		_WriteSPI_
  5010 ;;		_command
  5011 ;;		_dummy_clocks
  5012 ;;		_proceed
  5013 ;;		_response
  5014 ;; This function is called by:
  5015 ;;		_pf_write
  5016 ;; This function uses a non-reentrant model
  5017 ;;
  5018                           
  5019                           	psect	text24
  5020  001F24                     __ptext24:
  5021                           	opt stack 0
  5022  001F24                     _disk_writep:
  5023                           	opt stack 20
  5024                           
  5025                           ;diskio.c: 296: DRESULT res;
  5026                           ;diskio.c: 298: unsigned char buff;
  5027                           ;diskio.c: 299: int i=0,j;
  5028                           
  5029                           ; BSR set to: 0
  5030                           ;incstack = 0
  5031  001F24  0E00               	movlw	0
  5032  001F26  0100               	movlb	0	; () banked
  5033  001F28  6F65               	movwf	(disk_writep@i+1)& (0+255),b
  5034  001F2A  0E00               	movlw	0
  5035  001F2C  6F64               	movwf	disk_writep@i& (0+255),b
  5036                           
  5037                           ; BSR set to: 0
  5038                           ;diskio.c: 303: dummy_clocks(8);
  5039  001F2E  0E08               	movlw	8
  5040  001F30  ECD6  F017         	call	_dummy_clocks
  5041                           
  5042                           ;diskio.c: 304: command(0X58, sc*512, 0X00);
  5043  001F34  C026  F060         	movff	disk_writep@sc,??_disk_writep
  5044  001F38  C027  F061         	movff	disk_writep@sc+1,??_disk_writep+1
  5045  001F3C  C028  F062         	movff	disk_writep@sc+2,??_disk_writep+2
  5046  001F40  C029  F063         	movff	disk_writep@sc+3,??_disk_writep+3
  5047  001F44  0E09               	movlw	9
  5048  001F46                     u7515:
  5049  001F46  90D8               	bcf	status,0,c
  5050  001F48  0100               	movlb	0	; () banked
  5051  001F4A  3760               	rlcf	??_disk_writep& (0+255),f,b
  5052  001F4C  3761               	rlcf	(??_disk_writep+1)& (0+255),f,b
  5053  001F4E  3762               	rlcf	(??_disk_writep+2)& (0+255),f,b
  5054  001F50  3763               	rlcf	(??_disk_writep+3)& (0+255),f,b
  5055  001F52  2EE8               	decfsz	wreg,f,c
  5056  001F54  D7F8               	goto	u7515
  5057  001F56  C060  F01C         	movff	??_disk_writep,command@arg
  5058  001F5A  C061  F01D         	movff	??_disk_writep+1,command@arg+1
  5059  001F5E  C062  F01E         	movff	??_disk_writep+2,command@arg+2
  5060  001F62  C063  F01F         	movff	??_disk_writep+3,command@arg+3
  5061  001F66  0E00               	movlw	0
  5062  001F68  6E20               	movwf	command@CRC,c
  5063  001F6A  0E58               	movlw	88
  5064  001F6C  EC82  F017         	call	_command
  5065                           
  5066                           ;diskio.c: 305: proceed();
  5067  001F70  ECFA  F018         	call	_proceed	;wreg free
  5068  001F74                     
  5069                           ;diskio.c: 307: buff = response();
  5070  001F74  ECED  F018         	call	_response	;wreg free
  5071  001F78  0100               	movlb	0	; () banked
  5072  001F7A  6F68               	movwf	disk_writep@buff& (0+255),b
  5073                           
  5074                           ; BSR set to: 0
  5075                           ;diskio.c: 308: }while(buff!=0x00);
  5076  001F7C  5168               	movf	disk_writep@buff& (0+255),w,b
  5077  001F7E  A4D8               	btfss	status,2,c
  5078  001F80  D7F9               	goto	l779
  5079                           
  5080                           ; BSR set to: 0
  5081                           ;diskio.c: 311: _delay((unsigned long)((2000)*(20000000/4000.0)));
  5082                           
  5083                           ; BSR set to: 0
  5084  001F82  0E33               	movlw	51
  5085  001F84  0100               	movlb	0	; () banked
  5086  001F86  6F61               	movwf	(??_disk_writep+1)& (0+255),b
  5087  001F88  0EBB               	movlw	187
  5088  001F8A  6F60               	movwf	??_disk_writep& (0+255),b
  5089  001F8C  0EDF               	movlw	223
  5090  001F8E                     u9027:
  5091  001F8E  2EE8               	decfsz	wreg,f,c
  5092  001F90  D7FE               	bra	u9027
  5093  001F92  2F60               	decfsz	??_disk_writep& (0+255),f,b
  5094  001F94  D7FC               	bra	u9027
  5095  001F96  2F61               	decfsz	(??_disk_writep+1)& (0+255),f,b
  5096  001F98  D7FA               	bra	u9027
  5097  001F9A  D000               	nop2	
  5098                           
  5099                           ;diskio.c: 314: dummy_clocks(8);
  5100  001F9C  0E08               	movlw	8
  5101  001F9E  ECD6  F017         	call	_dummy_clocks
  5102                           
  5103                           ;diskio.c: 316: WriteSPI_(0XFE);
  5104  001FA2  0EFE               	movlw	254
  5105  001FA4  EC7A  F018         	call	_WriteSPI_
  5106                           
  5107                           ;diskio.c: 318: for(j=0;j<512;j++)
  5108  001FA8  0E00               	movlw	0
  5109  001FAA  0100               	movlb	0	; () banked
  5110  001FAC  6F67               	movwf	(disk_writep@j+1)& (0+255),b
  5111  001FAE  0E00               	movlw	0
  5112  001FB0  6F66               	movwf	disk_writep@j& (0+255),b
  5113  001FB2                     l6608:
  5114                           
  5115                           ; BSR set to: 0
  5116  001FB2  BF67               	btfsc	(disk_writep@j+1)& (0+255),7,b
  5117  001FB4  D004               	goto	l781
  5118  001FB6  0E02               	movlw	2
  5119  001FB8  5D67               	subwf	(disk_writep@j+1)& (0+255),w,b
  5120  001FBA  B0D8               	btfsc	status,0,c
  5121  001FBC  D023               	goto	u7550
  5122  001FBE                     l781:
  5123                           
  5124                           ; BSR set to: 0
  5125                           ;diskio.c: 319: {
  5126                           ;diskio.c: 320: if(*wr!='\0')
  5127                           
  5128                           ; BSR set to: 0
  5129  001FBE  C023  FFF6         	movff	disk_writep@wr,tblptrl
  5130  001FC2  C024  FFF7         	movff	disk_writep@wr+1,tblptrh
  5131  001FC6  C025  FFF8         	movff	disk_writep@wr+2,tblptru
  5132  001FCA  0008               	tblrd		*
  5133  001FCC  50F5               	movf	tablat,w,c
  5134  001FCE  0900               	iorlw	0
  5135  001FD0  B4D8               	btfsc	status,2,c
  5136  001FD2  D011               	goto	l783
  5137                           
  5138                           ; BSR set to: 0
  5139                           ;diskio.c: 321: {
  5140                           ;diskio.c: 322: WriteSPI_(*wr);
  5141  001FD4  C023  FFF6         	movff	disk_writep@wr,tblptrl
  5142  001FD8  C024  FFF7         	movff	disk_writep@wr+1,tblptrh
  5143  001FDC  C025  FFF8         	movff	disk_writep@wr+2,tblptru
  5144  001FE0  0008               	tblrd		*
  5145  001FE2  50F5               	movf	tablat,w,c
  5146  001FE4  EC7A  F018         	call	_WriteSPI_
  5147                           
  5148                           ;diskio.c: 323: wr++;
  5149  001FE8  0E01               	movlw	1
  5150  001FEA  2623               	addwf	disk_writep@wr,f,c
  5151  001FEC  0E00               	movlw	0
  5152  001FEE  2224               	addwfc	disk_writep@wr+1,f,c
  5153  001FF0  0E00               	movlw	0
  5154  001FF2  2225               	addwfc	disk_writep@wr+2,f,c
  5155                           
  5156                           ;diskio.c: 324: }
  5157  001FF4  D003               	goto	l784
  5158  001FF6                     l783:
  5159                           
  5160                           ;diskio.c: 325: else
  5161                           ;diskio.c: 326: WriteSPI_(0x00);
  5162  001FF6  0E00               	movlw	0
  5163  001FF8  EC7A  F018         	call	_WriteSPI_
  5164  001FFC                     l784:
  5165  001FFC  0100               	movlb	0	; () banked
  5166  001FFE  4B66               	infsnz	disk_writep@j& (0+255),f,b
  5167  002000  2B67               	incf	(disk_writep@j+1)& (0+255),f,b
  5168  002002  D7D7               	goto	l6608
  5169  002004                     u7550:
  5170                           
  5171                           ; BSR set to: 0
  5172                           ;diskio.c: 327: }
  5173                           ;diskio.c: 328: WriteSPI_(0XFF);
  5174                           
  5175                           ; BSR set to: 0
  5176  002004  0EFF               	movlw	255
  5177  002006  EC7A  F018         	call	_WriteSPI_
  5178                           
  5179                           ;diskio.c: 329: WriteSPI_(0XFF);
  5180  00200A  0EFF               	movlw	255
  5181  00200C  EC7A  F018         	call	_WriteSPI_
  5182                           
  5183                           ;diskio.c: 331: proceed();
  5184  002010  ECFA  F018         	call	_proceed	;wreg free
  5185                           
  5186                           ;diskio.c: 333: _delay((unsigned long)((1000)*(20000000/4000.0)));
  5187  002014  0E1A               	movlw	26
  5188  002016  0100               	movlb	0	; () banked
  5189  002018  6F61               	movwf	(??_disk_writep+1)& (0+255),b
  5190  00201A  0E5E               	movlw	94
  5191  00201C  6F60               	movwf	??_disk_writep& (0+255),b
  5192  00201E  0E6E               	movlw	110
  5193  002020                     u9037:
  5194  002020  2EE8               	decfsz	wreg,f,c
  5195  002022  D7FE               	bra	u9037
  5196  002024  2F60               	decfsz	??_disk_writep& (0+255),f,b
  5197  002026  D7FC               	bra	u9037
  5198  002028  2F61               	decfsz	(??_disk_writep+1)& (0+255),f,b
  5199  00202A  D7FA               	bra	u9037
  5200  00202C  F000               	nop	
  5201                           
  5202                           ;diskio.c: 335: dummy_clocks(8);
  5203  00202E  0E08               	movlw	8
  5204  002030  ECD6  F017         	call	_dummy_clocks
  5205                           
  5206                           ;diskio.c: 337: command(0X4D,0X00000000,0X00);
  5207  002034  0E00               	movlw	0
  5208  002036  6E1C               	movwf	command@arg,c
  5209  002038  0E00               	movlw	0
  5210  00203A  6E1D               	movwf	command@arg+1,c
  5211  00203C  0E00               	movlw	0
  5212  00203E  6E1E               	movwf	command@arg+2,c
  5213  002040  0E00               	movlw	0
  5214  002042  6E1F               	movwf	command@arg+3,c
  5215  002044  0E00               	movlw	0
  5216  002046  6E20               	movwf	command@CRC,c
  5217  002048  0E4D               	movlw	77
  5218  00204A  EC82  F017         	call	_command
  5219                           
  5220                           ;diskio.c: 338: proceed();
  5221  00204E  ECFA  F018         	call	_proceed	;wreg free
  5222  002052                     
  5223                           ;diskio.c: 340: buff = response();
  5224  002052  ECED  F018         	call	_response	;wreg free
  5225  002056  0100               	movlb	0	; () banked
  5226  002058  6F68               	movwf	disk_writep@buff& (0+255),b
  5227                           
  5228                           ; BSR set to: 0
  5229                           ;diskio.c: 341: }while(buff!=0x00);
  5230  00205A  5168               	movf	disk_writep@buff& (0+255),w,b
  5231  00205C  A4D8               	btfss	status,2,c
  5232  00205E  D7F9               	goto	l785
  5233                           
  5234                           ; BSR set to: 0
  5235                           ;diskio.c: 343: return RES_OK;
  5236                           
  5237                           ; BSR set to: 0
  5238  002060  0E00               	movlw	0
  5239  002062  0012               	return	
  5240  002064                     __end_of_disk_writep:
  5241                           	opt stack 0
  5242                           tosu	equ	0xFFF
  5243                           tosh	equ	0xFFE
  5244                           tosl	equ	0xFFD
  5245                           pclath	equ	0xFFA
  5246                           tblptru	equ	0xFF8
  5247                           tblptrh	equ	0xFF7
  5248                           tblptrl	equ	0xFF6
  5249                           tablat	equ	0xFF5
  5250                           prodh	equ	0xFF4
  5251                           prodl	equ	0xFF3
  5252                           intcon	equ	0xFF2
  5253                           intcon2	equ	0xFF1
  5254                           intcon3	equ	0xFF0
  5255                           postinc0	equ	0xFEE
  5256                           wreg	equ	0xFE8
  5257                           postinc1	equ	0xFE6
  5258                           postdec1	equ	0xFE5
  5259                           fsr1h	equ	0xFE2
  5260                           fsr1l	equ	0xFE1
  5261                           indf2	equ	0xFDF
  5262                           postinc2	equ	0xFDE
  5263                           postdec2	equ	0xFDD
  5264                           plusw2	equ	0xFDB
  5265                           fsr2h	equ	0xFDA
  5266                           fsr2l	equ	0xFD9
  5267                           status	equ	0xFD8
  5268                           
  5269 ;; *************** function _pf_read *****************
  5270 ;; Defined at:
  5271 ;;		line 863 in file "pff.c"
  5272 ;; Parameters:    Size  Location     Type
  5273 ;;  buff            2   52[BANK0 ] PTR void 
  5274 ;;		 -> data_buffer_32(32), 
  5275 ;;  btr             2   54[BANK0 ] unsigned int 
  5276 ;;  br              2   56[BANK0 ] PTR unsigned int 
  5277 ;;		 -> SDCard@br(2), 
  5278 ;; Auto vars:     Size  Location     Type
  5279 ;;  clst            4   79[BANK0 ] unsigned long 
  5280 ;;  remain          4   75[BANK0 ] unsigned long 
  5281 ;;  sect            4   71[BANK0 ] unsigned long 
  5282 ;;  fs              2   86[BANK0 ] PTR struct .
  5283 ;;		 -> NULL(0), SDCard@fs(42), 
  5284 ;;  rcnt            2   84[BANK0 ] unsigned int 
  5285 ;;  rbuff           2   67[BANK0 ] PTR unsigned char 
  5286 ;;		 -> data_buffer_32(32), 
  5287 ;;  cs              1   83[BANK0 ] unsigned char 
  5288 ;;  dr              1   66[BANK0 ] enum E73
  5289 ;; Return value:  Size  Location     Type
  5290 ;;                  1    wreg      enum E3838
  5291 ;; Registers used:
  5292 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5293 ;; Tracked objects:
  5294 ;;		On entry : 0/0
  5295 ;;		On exit  : 0/0
  5296 ;;		Unchanged: 0/0
  5297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5298 ;;      Params:         0       6       0       0       0       0       0       0       0
  5299 ;;      Locals:         0      22       0       0       0       0       0       0       0
  5300 ;;      Temps:          0       8       0       0       0       0       0       0       0
  5301 ;;      Totals:         0      36       0       0       0       0       0       0       0
  5302 ;;Total ram usage:       36 bytes
  5303 ;; Hardware stack levels used:    1
  5304 ;; Hardware stack levels required when called:    9
  5305 ;; This function calls:
  5306 ;;		_clust2sect
  5307 ;;		_disk_readp
  5308 ;;		_get_fat
  5309 ;; This function is called by:
  5310 ;;		_SDCard
  5311 ;; This function uses a non-reentrant model
  5312 ;;
  5313                           
  5314                           	psect	text25
  5315  000EE8                     __ptext25:
  5316                           	opt stack 0
  5317  000EE8                     _pf_read:
  5318                           	opt stack 19
  5319                           
  5320                           ;pff.c: 869: DRESULT dr;
  5321                           ;pff.c: 870: DWORD clst;
  5322                           ;pff.c: 871: DWORD sect, remain;
  5323                           ;pff.c: 872: UINT rcnt;
  5324                           ;pff.c: 873: BYTE cs, *rbuff = buff;
  5325                           
  5326                           ; BSR set to: 0
  5327                           ;incstack = 0
  5328  000EE8  C094  F0A3         	movff	pf_read@buff,pf_read@rbuff
  5329  000EEC  C095  F0A4         	movff	pf_read@buff+1,pf_read@rbuff+1
  5330                           
  5331                           ;pff.c: 874: FATFS *fs = FatFs;
  5332  000EF0  C035  F0B6         	movff	_FatFs,pf_read@fs
  5333  000EF4  C036  F0B7         	movff	_FatFs+1,pf_read@fs+1
  5334                           
  5335                           ;pff.c: 877: *br = 0;
  5336  000EF8  C098  FFD9         	movff	pf_read@br,fsr2l
  5337  000EFC  C099  FFDA         	movff	pf_read@br+1,fsr2h
  5338  000F00  0E00               	movlw	0
  5339  000F02  6EDE               	movwf	postinc2,c
  5340  000F04  0E00               	movlw	0
  5341  000F06  6EDD               	movwf	postdec2,c
  5342                           
  5343                           ;pff.c: 878: if (!fs) return FR_NOT_ENABLED;
  5344  000F08  0100               	movlb	0	; () banked
  5345  000F0A  51B6               	movf	pf_read@fs& (0+255),w,b
  5346  000F0C  11B7               	iorwf	(pf_read@fs+1)& (0+255),w,b
  5347  000F0E  A4D8               	btfss	status,2,c
  5348  000F10  D002               	goto	l974
  5349                           
  5350                           ; BSR set to: 0
  5351  000F12  0E05               	movlw	5
  5352                           
  5353                           ; BSR set to: 0
  5354  000F14  0012               	return	
  5355  000F16                     l974:
  5356                           
  5357                           ; BSR set to: 0
  5358                           ;pff.c: 879: if (!(fs->flag & 0x01))
  5359                           
  5360                           ; BSR set to: 0
  5361  000F16  EE20 F001          	lfsr	2,1
  5362  000F1A  51B6               	movf	pf_read@fs& (0+255),w,b
  5363  000F1C  26D9               	addwf	fsr2l,f,c
  5364  000F1E  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  5365  000F20  22DA               	addwfc	fsr2h,f,c
  5366  000F22  B0DF               	btfsc	indf2,0,c
  5367  000F24  D002               	goto	l976
  5368                           
  5369                           ; BSR set to: 0
  5370                           ;pff.c: 880: return FR_NOT_OPENED;
  5371  000F26  0E04               	movlw	4
  5372                           
  5373                           ; BSR set to: 0
  5374  000F28  0012               	return	
  5375  000F2A                     l976:
  5376                           
  5377                           ; BSR set to: 0
  5378                           ;pff.c: 882: remain = fs->fsize - fs->fptr;
  5379                           
  5380                           ; BSR set to: 0
  5381  000F2A  EE20 F01A          	lfsr	2,26
  5382  000F2E  51B6               	movf	pf_read@fs& (0+255),w,b
  5383  000F30  26D9               	addwf	fsr2l,f,c
  5384  000F32  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  5385  000F34  22DA               	addwfc	fsr2h,f,c
  5386  000F36  CFDE F09A          	movff	postinc2,??_pf_read
  5387  000F3A  CFDE F09B          	movff	postinc2,??_pf_read+1
  5388  000F3E  CFDE F09C          	movff	postinc2,??_pf_read+2
  5389  000F42  CFDE F09D          	movff	postinc2,??_pf_read+3
  5390  000F46  EE20 F016          	lfsr	2,22
  5391  000F4A  51B6               	movf	pf_read@fs& (0+255),w,b
  5392  000F4C  26D9               	addwf	fsr2l,f,c
  5393  000F4E  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  5394  000F50  22DA               	addwfc	fsr2h,f,c
  5395  000F52  CFDE F09E          	movff	postinc2,??_pf_read+4
  5396  000F56  CFDE F09F          	movff	postinc2,??_pf_read+5
  5397  000F5A  CFDE F0A0          	movff	postinc2,??_pf_read+6
  5398  000F5E  CFDE F0A1          	movff	postinc2,??_pf_read+7
  5399  000F62  1F9E               	comf	(??_pf_read+4)& (0+255),f,b
  5400  000F64  1F9F               	comf	(??_pf_read+5)& (0+255),f,b
  5401  000F66  1FA0               	comf	(??_pf_read+6)& (0+255),f,b
  5402  000F68  1FA1               	comf	(??_pf_read+7)& (0+255),f,b
  5403  000F6A  2B9E               	incf	(??_pf_read+4)& (0+255),f,b
  5404  000F6C  0E00               	movlw	0
  5405  000F6E  239F               	addwfc	(??_pf_read+5)& (0+255),f,b
  5406  000F70  23A0               	addwfc	(??_pf_read+6)& (0+255),f,b
  5407  000F72  23A1               	addwfc	(??_pf_read+7)& (0+255),f,b
  5408  000F74  519A               	movf	??_pf_read& (0+255),w,b
  5409  000F76  259E               	addwf	(??_pf_read+4)& (0+255),w,b
  5410  000F78  6FAB               	movwf	pf_read@remain& (0+255),b
  5411  000F7A  519B               	movf	(??_pf_read+1)& (0+255),w,b
  5412  000F7C  219F               	addwfc	(??_pf_read+5)& (0+255),w,b
  5413  000F7E  6FAC               	movwf	(pf_read@remain+1)& (0+255),b
  5414  000F80  519C               	movf	(??_pf_read+2)& (0+255),w,b
  5415  000F82  21A0               	addwfc	(??_pf_read+6)& (0+255),w,b
  5416  000F84  6FAD               	movwf	(pf_read@remain+2)& (0+255),b
  5417  000F86  519D               	movf	(??_pf_read+3)& (0+255),w,b
  5418  000F88  21A1               	addwfc	(??_pf_read+7)& (0+255),w,b
  5419  000F8A  6FAE               	movwf	(pf_read@remain+3)& (0+255),b
  5420                           
  5421                           ; BSR set to: 0
  5422                           ;pff.c: 883: if (btr > remain) btr = (UINT)remain;
  5423  000F8C  5196               	movf	pf_read@btr& (0+255),w,b
  5424  000F8E  6F9A               	movwf	??_pf_read& (0+255),b
  5425  000F90  5197               	movf	(pf_read@btr+1)& (0+255),w,b
  5426  000F92  6F9B               	movwf	(??_pf_read+1)& (0+255),b
  5427  000F94  6B9C               	clrf	(??_pf_read+2)& (0+255),b
  5428  000F96  6B9D               	clrf	(??_pf_read+3)& (0+255),b
  5429  000F98  519A               	movf	??_pf_read& (0+255),w,b
  5430  000F9A  5DAB               	subwf	pf_read@remain& (0+255),w,b
  5431  000F9C  519B               	movf	(??_pf_read+1)& (0+255),w,b
  5432  000F9E  59AC               	subwfb	(pf_read@remain+1)& (0+255),w,b
  5433  000FA0  519C               	movf	(??_pf_read+2)& (0+255),w,b
  5434  000FA2  59AD               	subwfb	(pf_read@remain+2)& (0+255),w,b
  5435  000FA4  519D               	movf	(??_pf_read+3)& (0+255),w,b
  5436  000FA6  59AE               	subwfb	(pf_read@remain+3)& (0+255),w,b
  5437  000FA8  B0D8               	btfsc	status,0,c
  5438  000FAA  D160               	goto	l978
  5439                           
  5440                           ; BSR set to: 0
  5441  000FAC  C0AB  F096         	movff	pf_read@remain,pf_read@btr
  5442  000FB0  C0AC  F097         	movff	pf_read@remain+1,pf_read@btr+1
  5443                           
  5444                           ; BSR set to: 0
  5445                           ;pff.c: 885: while (btr) {
  5446  000FB4  D15B               	goto	l978
  5447  000FB6                     
  5448                           ; BSR set to: 0
  5449                           ;pff.c: 886: if ((fs->fptr % 512) == 0) {
  5450                           
  5451                           ; BSR set to: 0
  5452  000FB6  EE20 F016          	lfsr	2,22
  5453  000FBA  51B6               	movf	pf_read@fs& (0+255),w,b
  5454  000FBC  26D9               	addwf	fsr2l,f,c
  5455  000FBE  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  5456  000FC0  22DA               	addwfc	fsr2h,f,c
  5457  000FC2  0EFF               	movlw	255
  5458  000FC4  14DE               	andwf	postinc2,w,c
  5459  000FC6  6F9A               	movwf	??_pf_read& (0+255),b
  5460  000FC8  0E01               	movlw	1
  5461  000FCA  14DE               	andwf	postinc2,w,c
  5462  000FCC  6F9B               	movwf	(??_pf_read+1)& (0+255),b
  5463  000FCE  0E00               	movlw	0
  5464  000FD0  14DE               	andwf	postinc2,w,c
  5465  000FD2  6F9C               	movwf	(??_pf_read+2)& (0+255),b
  5466  000FD4  0E00               	movlw	0
  5467  000FD6  14DE               	andwf	postinc2,w,c
  5468  000FD8  6F9D               	movwf	(??_pf_read+3)& (0+255),b
  5469  000FDA  519A               	movf	??_pf_read& (0+255),w,b
  5470  000FDC  119B               	iorwf	(??_pf_read+1)& (0+255),w,b
  5471  000FDE  119C               	iorwf	(??_pf_read+2)& (0+255),w,b
  5472  000FE0  119D               	iorwf	(??_pf_read+3)& (0+255),w,b
  5473  000FE2  A4D8               	btfss	status,2,c
  5474  000FE4  D0BC               	goto	l980
  5475                           
  5476                           ; BSR set to: 0
  5477                           ;pff.c: 887: cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));
  5478  000FE6  EE20 F016          	lfsr	2,22
  5479  000FEA  51B6               	movf	pf_read@fs& (0+255),w,b
  5480  000FEC  26D9               	addwf	fsr2l,f,c
  5481  000FEE  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  5482  000FF0  22DA               	addwfc	fsr2h,f,c
  5483  000FF2  CFDE F09A          	movff	postinc2,??_pf_read
  5484  000FF6  CFDE F09B          	movff	postinc2,??_pf_read+1
  5485  000FFA  CFDE F09C          	movff	postinc2,??_pf_read+2
  5486  000FFE  CFDE F09D          	movff	postinc2,??_pf_read+3
  5487  001002  0E0A               	movlw	10
  5488  001004  D005               	goto	u8140
  5489  001006                     u8145:
  5490  001006  90D8               	bcf	status,0,c
  5491  001008  339D               	rrcf	(??_pf_read+3)& (0+255),f,b
  5492  00100A  339C               	rrcf	(??_pf_read+2)& (0+255),f,b
  5493  00100C  339B               	rrcf	(??_pf_read+1)& (0+255),f,b
  5494  00100E  339A               	rrcf	??_pf_read& (0+255),f,b
  5495  001010                     u8140:
  5496  001010  2EE8               	decfsz	wreg,f,c
  5497  001012  D7F9               	goto	u8145
  5498  001014  EE20 F002          	lfsr	2,2
  5499  001018  51B6               	movf	pf_read@fs& (0+255),w,b
  5500  00101A  26D9               	addwf	fsr2l,f,c
  5501  00101C  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  5502  00101E  22DA               	addwfc	fsr2h,f,c
  5503  001020  50DF               	movf	indf2,w,c
  5504  001022  6F9E               	movwf	(??_pf_read+4)& (0+255),b
  5505  001024  059E               	decf	(??_pf_read+4)& (0+255),w,b
  5506  001026  159A               	andwf	??_pf_read& (0+255),w,b
  5507  001028  6FB3               	movwf	pf_read@cs& (0+255),b
  5508                           
  5509                           ; BSR set to: 0
  5510                           ;pff.c: 888: if (!cs) {
  5511  00102A  51B3               	movf	pf_read@cs& (0+255),w,b
  5512  00102C  A4D8               	btfss	status,2,c
  5513  00102E  D054               	goto	l981
  5514                           
  5515                           ; BSR set to: 0
  5516                           ;pff.c: 889: if (fs->fptr == 0)
  5517  001030  EE20 F016          	lfsr	2,22
  5518  001034  51B6               	movf	pf_read@fs& (0+255),w,b
  5519  001036  26D9               	addwf	fsr2l,f,c
  5520  001038  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  5521  00103A  22DA               	addwfc	fsr2h,f,c
  5522  00103C  50DE               	movf	postinc2,w,c
  5523  00103E  10DE               	iorwf	postinc2,w,c
  5524  001040  10DE               	iorwf	postinc2,w,c
  5525  001042  10DE               	iorwf	postinc2,w,c
  5526  001044  A4D8               	btfss	status,2,c
  5527  001046  D00F               	goto	l982
  5528                           
  5529                           ; BSR set to: 0
  5530                           ;pff.c: 890: clst = fs->org_clust;
  5531  001048  EE20 F01E          	lfsr	2,30
  5532  00104C  51B6               	movf	pf_read@fs& (0+255),w,b
  5533  00104E  26D9               	addwf	fsr2l,f,c
  5534  001050  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  5535  001052  22DA               	addwfc	fsr2h,f,c
  5536  001054  CFDE F0AF          	movff	postinc2,pf_read@clst
  5537  001058  CFDE F0B0          	movff	postinc2,pf_read@clst+1
  5538  00105C  CFDE F0B1          	movff	postinc2,pf_read@clst+2
  5539  001060  CFDE F0B2          	movff	postinc2,pf_read@clst+3
  5540  001064  D018               	goto	l983
  5541  001066                     l982:
  5542                           
  5543                           ; BSR set to: 0
  5544                           ;pff.c: 891: else
  5545                           ;pff.c: 892: clst = get_fat(fs->curr_clust);
  5546                           
  5547                           ; BSR set to: 0
  5548  001066  EE20 F022          	lfsr	2,34
  5549  00106A  51B6               	movf	pf_read@fs& (0+255),w,b
  5550  00106C  26D9               	addwf	fsr2l,f,c
  5551  00106E  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  5552  001070  22DA               	addwfc	fsr2h,f,c
  5553  001072  CFDE F06C          	movff	postinc2,get_fat@clst
  5554  001076  CFDE F06D          	movff	postinc2,get_fat@clst+1
  5555  00107A  CFDE F06E          	movff	postinc2,get_fat@clst+2
  5556  00107E  CFDE F06F          	movff	postinc2,get_fat@clst+3
  5557  001082  EC82  F005         	call	_get_fat	;wreg free
  5558  001086  C06C  F0AF         	movff	?_get_fat,pf_read@clst
  5559  00108A  C06D  F0B0         	movff	?_get_fat+1,pf_read@clst+1
  5560  00108E  C06E  F0B1         	movff	?_get_fat+2,pf_read@clst+2
  5561  001092  C06F  F0B2         	movff	?_get_fat+3,pf_read@clst+3
  5562  001096                     l983:
  5563                           
  5564                           ;pff.c: 893: if (clst <= 1) {fs->flag = 0; return FR_DISK_ERR;};
  5565  001096  0100               	movlb	0	; () banked
  5566  001098  51B2               	movf	(pf_read@clst+3)& (0+255),w,b
  5567  00109A  11B1               	iorwf	(pf_read@clst+2)& (0+255),w,b
  5568  00109C  11B0               	iorwf	(pf_read@clst+1)& (0+255),w,b
  5569  00109E  E10E               	bnz	l7022
  5570  0010A0  0E02               	movlw	2
  5571  0010A2  5DAF               	subwf	pf_read@clst& (0+255),w,b
  5572  0010A4  B0D8               	btfsc	status,0,c
  5573  0010A6  D00A               	goto	l984
  5574                           
  5575                           ; BSR set to: 0
  5576  0010A8  EE20 F001          	lfsr	2,1
  5577  0010AC  51B6               	movf	pf_read@fs& (0+255),w,b
  5578  0010AE  26D9               	addwf	fsr2l,f,c
  5579  0010B0  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  5580  0010B2  22DA               	addwfc	fsr2h,f,c
  5581  0010B4  0E00               	movlw	0
  5582  0010B6  6EDF               	movwf	indf2,c
  5583                           
  5584                           ; BSR set to: 0
  5585  0010B8  0E01               	movlw	1
  5586                           
  5587                           ; BSR set to: 0
  5588  0010BA  0012               	return	
  5589  0010BC                     l984:
  5590  0010BC                     l7022:
  5591                           
  5592                           ; BSR set to: 0
  5593                           ;pff.c: 894: fs->curr_clust = clst;
  5594  0010BC  EE20 F022          	lfsr	2,34
  5595  0010C0  51B6               	movf	pf_read@fs& (0+255),w,b
  5596  0010C2  26D9               	addwf	fsr2l,f,c
  5597  0010C4  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  5598  0010C6  22DA               	addwfc	fsr2h,f,c
  5599  0010C8  C0AF  FFDE         	movff	pf_read@clst,postinc2
  5600  0010CC  C0B0  FFDE         	movff	pf_read@clst+1,postinc2
  5601  0010D0  C0B1  FFDE         	movff	pf_read@clst+2,postinc2
  5602  0010D4  C0B2  FFDE         	movff	pf_read@clst+3,postinc2
  5603  0010D8                     l981:
  5604                           
  5605                           ; BSR set to: 0
  5606                           ;pff.c: 895: }
  5607                           ;pff.c: 896: sect = clust2sect(fs->curr_clust);
  5608                           
  5609                           ; BSR set to: 0
  5610  0010D8  EE20 F022          	lfsr	2,34
  5611  0010DC  51B6               	movf	pf_read@fs& (0+255),w,b
  5612  0010DE  26D9               	addwf	fsr2l,f,c
  5613  0010E0  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  5614  0010E2  22DA               	addwfc	fsr2h,f,c
  5615  0010E4  CFDE F026          	movff	postinc2,clust2sect@clst
  5616  0010E8  CFDE F027          	movff	postinc2,clust2sect@clst+1
  5617  0010EC  CFDE F028          	movff	postinc2,clust2sect@clst+2
  5618  0010F0  CFDE F029          	movff	postinc2,clust2sect@clst+3
  5619  0010F4  ECC4  F013         	call	_clust2sect	;wreg free
  5620  0010F8  C026  F0A7         	movff	?_clust2sect,pf_read@sect
  5621  0010FC  C027  F0A8         	movff	?_clust2sect+1,pf_read@sect+1
  5622  001100  C028  F0A9         	movff	?_clust2sect+2,pf_read@sect+2
  5623  001104  C029  F0AA         	movff	?_clust2sect+3,pf_read@sect+3
  5624                           
  5625                           ;pff.c: 897: if (!sect) {fs->flag = 0; return FR_DISK_ERR;};
  5626  001108  0100               	movlb	0	; () banked
  5627  00110A  51A7               	movf	pf_read@sect& (0+255),w,b
  5628  00110C  11A8               	iorwf	(pf_read@sect+1)& (0+255),w,b
  5629  00110E  11A9               	iorwf	(pf_read@sect+2)& (0+255),w,b
  5630  001110  11AA               	iorwf	(pf_read@sect+3)& (0+255),w,b
  5631  001112  A4D8               	btfss	status,2,c
  5632  001114  D00A               	goto	l985
  5633                           
  5634                           ; BSR set to: 0
  5635  001116  EE20 F001          	lfsr	2,1
  5636  00111A  51B6               	movf	pf_read@fs& (0+255),w,b
  5637  00111C  26D9               	addwf	fsr2l,f,c
  5638  00111E  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  5639  001120  22DA               	addwfc	fsr2h,f,c
  5640  001122  0E00               	movlw	0
  5641  001124  6EDF               	movwf	indf2,c
  5642                           
  5643                           ; BSR set to: 0
  5644  001126  0E01               	movlw	1
  5645                           
  5646                           ; BSR set to: 0
  5647  001128  0012               	return	
  5648  00112A                     l985:
  5649                           
  5650                           ; BSR set to: 0
  5651                           ;pff.c: 898: fs->dsect = sect + cs;
  5652                           
  5653                           ; BSR set to: 0
  5654  00112A  51B3               	movf	pf_read@cs& (0+255),w,b
  5655  00112C  25A7               	addwf	pf_read@sect& (0+255),w,b
  5656  00112E  6F9A               	movwf	??_pf_read& (0+255),b
  5657  001130  0E00               	movlw	0
  5658  001132  21A8               	addwfc	(pf_read@sect+1)& (0+255),w,b
  5659  001134  6F9B               	movwf	(??_pf_read+1)& (0+255),b
  5660  001136  0E00               	movlw	0
  5661  001138  21A9               	addwfc	(pf_read@sect+2)& (0+255),w,b
  5662  00113A  6F9C               	movwf	(??_pf_read+2)& (0+255),b
  5663  00113C  0E00               	movlw	0
  5664  00113E  21AA               	addwfc	(pf_read@sect+3)& (0+255),w,b
  5665  001140  6F9D               	movwf	(??_pf_read+3)& (0+255),b
  5666  001142  EE20 F026          	lfsr	2,38
  5667  001146  51B6               	movf	pf_read@fs& (0+255),w,b
  5668  001148  26D9               	addwf	fsr2l,f,c
  5669  00114A  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  5670  00114C  22DA               	addwfc	fsr2h,f,c
  5671  00114E  C09A  FFDE         	movff	??_pf_read,postinc2
  5672  001152  C09B  FFDE         	movff	??_pf_read+1,postinc2
  5673  001156  C09C  FFDE         	movff	??_pf_read+2,postinc2
  5674  00115A  C09D  FFDE         	movff	??_pf_read+3,postinc2
  5675  00115E                     l980:
  5676                           
  5677                           ; BSR set to: 0
  5678                           ;pff.c: 899: }
  5679                           ;pff.c: 900: rcnt = 512 - (UINT)fs->fptr % 512;
  5680  00115E  0EFF               	movlw	255
  5681  001160  6F9A               	movwf	??_pf_read& (0+255),b
  5682  001162  0E01               	movlw	1
  5683  001164  6F9B               	movwf	(??_pf_read+1)& (0+255),b
  5684  001166  EE20 F016          	lfsr	2,22
  5685  00116A  51B6               	movf	pf_read@fs& (0+255),w,b
  5686  00116C  26D9               	addwf	fsr2l,f,c
  5687  00116E  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  5688  001170  22DA               	addwfc	fsr2h,f,c
  5689  001172  CFDE F09C          	movff	postinc2,??_pf_read+2
  5690  001176  CFDD F09D          	movff	postdec2,??_pf_read+3
  5691  00117A  519A               	movf	??_pf_read& (0+255),w,b
  5692  00117C  179C               	andwf	(??_pf_read+2)& (0+255),f,b
  5693  00117E  519B               	movf	(??_pf_read+1)& (0+255),w,b
  5694  001180  179D               	andwf	(??_pf_read+3)& (0+255),f,b
  5695  001182  1F9C               	comf	(??_pf_read+2)& (0+255),f,b
  5696  001184  1F9D               	comf	(??_pf_read+3)& (0+255),f,b
  5697  001186  4B9C               	infsnz	(??_pf_read+2)& (0+255),f,b
  5698  001188  2B9D               	incf	(??_pf_read+3)& (0+255),f,b
  5699  00118A  0E00               	movlw	0
  5700  00118C  259C               	addwf	(??_pf_read+2)& (0+255),w,b
  5701  00118E  6FB4               	movwf	pf_read@rcnt& (0+255),b
  5702  001190  0E02               	movlw	2
  5703  001192  219D               	addwfc	(??_pf_read+3)& (0+255),w,b
  5704  001194  6FB5               	movwf	(pf_read@rcnt+1)& (0+255),b
  5705                           
  5706                           ; BSR set to: 0
  5707                           ;pff.c: 901: if (rcnt > btr) rcnt = btr;
  5708  001196  51B4               	movf	pf_read@rcnt& (0+255),w,b
  5709  001198  5D96               	subwf	pf_read@btr& (0+255),w,b
  5710  00119A  51B5               	movf	(pf_read@rcnt+1)& (0+255),w,b
  5711  00119C  5997               	subwfb	(pf_read@btr+1)& (0+255),w,b
  5712  00119E  B0D8               	btfsc	status,0,c
  5713  0011A0  D004               	goto	l986
  5714                           
  5715                           ; BSR set to: 0
  5716  0011A2  C096  F0B4         	movff	pf_read@btr,pf_read@rcnt
  5717  0011A6  C097  F0B5         	movff	pf_read@btr+1,pf_read@rcnt+1
  5718  0011AA                     l986:
  5719                           
  5720                           ; BSR set to: 0
  5721                           ;pff.c: 902: dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (UINT)fs->fptr % 512, rcnt);
  5722                           
  5723                           ; BSR set to: 0
  5724  0011AA  5194               	movf	pf_read@buff& (0+255),w,b
  5725  0011AC  1195               	iorwf	(pf_read@buff+1)& (0+255),w,b
  5726  0011AE  B4D8               	btfsc	status,2,c
  5727  0011B0  D005               	goto	l988
  5728                           
  5729                           ; BSR set to: 0
  5730  0011B2  C0A3  F0A5         	movff	pf_read@rbuff,_pf_read$2100
  5731  0011B6  C0A4  F0A6         	movff	pf_read@rbuff+1,_pf_read$2100+1
  5732  0011BA  D004               	goto	l990
  5733  0011BC                     l988:
  5734                           
  5735                           ; BSR set to: 0
  5736                           
  5737                           ; BSR set to: 0
  5738  0011BC  0E00               	movlw	0
  5739  0011BE  6FA5               	movwf	_pf_read$2100& (0+255),b
  5740  0011C0  0E00               	movlw	0
  5741  0011C2  6FA6               	movwf	(_pf_read$2100+1)& (0+255),b
  5742  0011C4                     l990:
  5743                           
  5744                           ; BSR set to: 0
  5745                           
  5746                           ; BSR set to: 0
  5747  0011C4  C0A5  F023         	movff	_pf_read$2100,disk_readp@rd
  5748  0011C8  C0A6  F024         	movff	_pf_read$2100+1,disk_readp@rd+1
  5749  0011CC  EE20 F026          	lfsr	2,38
  5750  0011D0  51B6               	movf	pf_read@fs& (0+255),w,b
  5751  0011D2  26D9               	addwf	fsr2l,f,c
  5752  0011D4  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  5753  0011D6  22DA               	addwfc	fsr2h,f,c
  5754  0011D8  CFDE F025          	movff	postinc2,disk_readp@sector
  5755  0011DC  CFDE F026          	movff	postinc2,disk_readp@sector+1
  5756  0011E0  CFDE F027          	movff	postinc2,disk_readp@sector+2
  5757  0011E4  CFDE F028          	movff	postinc2,disk_readp@sector+3
  5758  0011E8  EE20 F016          	lfsr	2,22
  5759  0011EC  51B6               	movf	pf_read@fs& (0+255),w,b
  5760  0011EE  26D9               	addwf	fsr2l,f,c
  5761  0011F0  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  5762  0011F2  22DA               	addwfc	fsr2h,f,c
  5763  0011F4  CFDE F09A          	movff	postinc2,??_pf_read
  5764  0011F8  CFDD F09B          	movff	postdec2,??_pf_read+1
  5765  0011FC  0EFF               	movlw	255
  5766  0011FE  159A               	andwf	??_pf_read& (0+255),w,b
  5767  001200  6E29               	movwf	disk_readp@offset,c
  5768  001202  0E01               	movlw	1
  5769  001204  159B               	andwf	(??_pf_read+1)& (0+255),w,b
  5770  001206  6E2A               	movwf	disk_readp@offset+1,c
  5771  001208  C0B4  F02B         	movff	pf_read@rcnt,disk_readp@count
  5772  00120C  C0B5  F02C         	movff	pf_read@rcnt+1,disk_readp@count+1
  5773  001210  EC3C  F009         	call	_disk_readp	;wreg free
  5774  001214  0100               	movlb	0	; () banked
  5775  001216  6FA2               	movwf	pf_read@dr& (0+255),b
  5776                           
  5777                           ; BSR set to: 0
  5778                           ;pff.c: 903: if (dr) {fs->flag = 0; return FR_DISK_ERR;};
  5779  001218  51A2               	movf	pf_read@dr& (0+255),w,b
  5780  00121A  B4D8               	btfsc	status,2,c
  5781  00121C  D00A               	goto	l991
  5782                           
  5783                           ; BSR set to: 0
  5784  00121E  EE20 F001          	lfsr	2,1
  5785  001222  51B6               	movf	pf_read@fs& (0+255),w,b
  5786  001224  26D9               	addwf	fsr2l,f,c
  5787  001226  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  5788  001228  22DA               	addwfc	fsr2h,f,c
  5789  00122A  0E00               	movlw	0
  5790  00122C  6EDF               	movwf	indf2,c
  5791                           
  5792                           ; BSR set to: 0
  5793  00122E  0E01               	movlw	1
  5794                           
  5795                           ; BSR set to: 0
  5796  001230  0012               	return	
  5797  001232                     l991:
  5798                           
  5799                           ; BSR set to: 0
  5800                           ;pff.c: 904: fs->fptr += rcnt; rbuff += rcnt;
  5801                           
  5802                           ; BSR set to: 0
  5803  001232  EE20 F016          	lfsr	2,22
  5804  001236  51B6               	movf	pf_read@fs& (0+255),w,b
  5805  001238  26D9               	addwf	fsr2l,f,c
  5806  00123A  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  5807  00123C  22DA               	addwfc	fsr2h,f,c
  5808  00123E  51B4               	movf	pf_read@rcnt& (0+255),w,b
  5809  001240  26DE               	addwf	postinc2,f,c
  5810  001242  51B5               	movf	(pf_read@rcnt+1)& (0+255),w,b
  5811  001244  22DE               	addwfc	postinc2,f,c
  5812  001246  0E00               	movlw	0
  5813  001248  22DE               	addwfc	postinc2,f,c
  5814  00124A  22DE               	addwfc	postinc2,f,c
  5815                           
  5816                           ; BSR set to: 0
  5817  00124C  51B4               	movf	pf_read@rcnt& (0+255),w,b
  5818  00124E  27A3               	addwf	pf_read@rbuff& (0+255),f,b
  5819  001250  51B5               	movf	(pf_read@rcnt+1)& (0+255),w,b
  5820  001252  23A4               	addwfc	(pf_read@rbuff+1)& (0+255),f,b
  5821                           
  5822                           ; BSR set to: 0
  5823                           ;pff.c: 905: btr -= rcnt; *br += rcnt;
  5824  001254  51B4               	movf	pf_read@rcnt& (0+255),w,b
  5825  001256  5F96               	subwf	pf_read@btr& (0+255),f,b
  5826  001258  51B5               	movf	(pf_read@rcnt+1)& (0+255),w,b
  5827  00125A  5B97               	subwfb	(pf_read@btr+1)& (0+255),f,b
  5828                           
  5829                           ; BSR set to: 0
  5830  00125C  C098  FFD9         	movff	pf_read@br,fsr2l
  5831  001260  C099  FFDA         	movff	pf_read@br+1,fsr2h
  5832  001264  51B4               	movf	pf_read@rcnt& (0+255),w,b
  5833  001266  26DE               	addwf	postinc2,f,c
  5834  001268  51B5               	movf	(pf_read@rcnt+1)& (0+255),w,b
  5835  00126A  22DD               	addwfc	postdec2,f,c
  5836  00126C                     l978:
  5837                           
  5838                           ; BSR set to: 0
  5839                           
  5840                           ; BSR set to: 0
  5841  00126C  5196               	movf	pf_read@btr& (0+255),w,b
  5842  00126E  1197               	iorwf	(pf_read@btr+1)& (0+255),w,b
  5843  001270  A4D8               	btfss	status,2,c
  5844  001272  D6A1               	goto	l979
  5845                           
  5846                           ; BSR set to: 0
  5847                           ;pff.c: 906: }
  5848                           ;pff.c: 908: return FR_OK;
  5849                           
  5850                           ; BSR set to: 0
  5851  001274  0E00               	movlw	0
  5852  001276  0012               	return	
  5853  001278                     __end_of_pf_read:
  5854                           	opt stack 0
  5855                           tosu	equ	0xFFF
  5856                           tosh	equ	0xFFE
  5857                           tosl	equ	0xFFD
  5858                           pclath	equ	0xFFA
  5859                           tblptru	equ	0xFF8
  5860                           tblptrh	equ	0xFF7
  5861                           tblptrl	equ	0xFF6
  5862                           tablat	equ	0xFF5
  5863                           prodh	equ	0xFF4
  5864                           prodl	equ	0xFF3
  5865                           intcon	equ	0xFF2
  5866                           intcon2	equ	0xFF1
  5867                           intcon3	equ	0xFF0
  5868                           postinc0	equ	0xFEE
  5869                           wreg	equ	0xFE8
  5870                           postinc1	equ	0xFE6
  5871                           postdec1	equ	0xFE5
  5872                           fsr1h	equ	0xFE2
  5873                           fsr1l	equ	0xFE1
  5874                           indf2	equ	0xFDF
  5875                           postinc2	equ	0xFDE
  5876                           postdec2	equ	0xFDD
  5877                           plusw2	equ	0xFDB
  5878                           fsr2h	equ	0xFDA
  5879                           fsr2l	equ	0xFD9
  5880                           status	equ	0xFD8
  5881                           
  5882 ;; *************** function _pf_open *****************
  5883 ;; Defined at:
  5884 ;;		line 829 in file "pff.c"
  5885 ;; Parameters:    Size  Location     Type
  5886 ;;  path            2   84[BANK0 ] PTR const unsigned char 
  5887 ;;		 -> STR_8(10), 
  5888 ;; Auto vars:     Size  Location     Type
  5889 ;;  dir            32   12[BANK1 ] unsigned char [32]
  5890 ;;  dj             16   47[BANK1 ] struct .
  5891 ;;  sp             12    0[BANK1 ] unsigned char [12]
  5892 ;;  fs              2   45[BANK1 ] PTR struct .
  5893 ;;		 -> NULL(0), SDCard@fs(42), 
  5894 ;;  res             1   44[BANK1 ] enum E43
  5895 ;; Return value:  Size  Location     Type
  5896 ;;                  1    wreg      enum E3838
  5897 ;; Registers used:
  5898 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5899 ;; Tracked objects:
  5900 ;;		On entry : 0/0
  5901 ;;		On exit  : 0/0
  5902 ;;		Unchanged: 0/0
  5903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5904 ;;      Params:         0       2       0       0       0       0       0       0       0
  5905 ;;      Locals:         0       0      63       0       0       0       0       0       0
  5906 ;;      Temps:          0      22       0       0       0       0       0       0       0
  5907 ;;      Totals:         0      24      63       0       0       0       0       0       0
  5908 ;;Total ram usage:       87 bytes
  5909 ;; Hardware stack levels used:    1
  5910 ;; Hardware stack levels required when called:   12
  5911 ;; This function calls:
  5912 ;;		_follow_path
  5913 ;;		_get_clust
  5914 ;; This function is called by:
  5915 ;;		_SDCard
  5916 ;; This function uses a non-reentrant model
  5917 ;;
  5918                           
  5919                           	psect	text26
  5920  001C90                     __ptext26:
  5921                           	opt stack 0
  5922  001C90                     _pf_open:
  5923                           	opt stack 16
  5924                           
  5925                           ;pff.c: 833: FRESULT res;
  5926                           ;pff.c: 834: DIR_E dj;
  5927                           ;pff.c: 835: BYTE sp[12], dir[32];
  5928                           ;pff.c: 836: FATFS *fs = FatFs;
  5929                           
  5930                           ; BSR set to: 0
  5931                           ;incstack = 0
  5932  001C90  C035  F12D         	movff	_FatFs,pf_open@fs
  5933  001C94  C036  F12E         	movff	_FatFs+1,pf_open@fs+1
  5934                           
  5935                           ;pff.c: 838: if (!fs) return FR_NOT_ENABLED;
  5936  001C98  0101               	movlb	1	; () banked
  5937  001C9A  512D               	movf	pf_open@fs& (0+255),w,b
  5938  001C9C  112E               	iorwf	(pf_open@fs+1)& (0+255),w,b
  5939  001C9E  A4D8               	btfss	status,2,c
  5940  001CA0  D002               	goto	l966
  5941                           
  5942                           ; BSR set to: 1
  5943  001CA2  0E05               	movlw	5
  5944                           
  5945                           ; BSR set to: 1
  5946  001CA4  0012               	return	
  5947  001CA6                     l966:
  5948                           
  5949                           ; BSR set to: 1
  5950                           ;pff.c: 840: fs->flag = 0;
  5951                           
  5952                           ; BSR set to: 1
  5953  001CA6  EE20 F001          	lfsr	2,1
  5954  001CAA  512D               	movf	pf_open@fs& (0+255),w,b
  5955  001CAC  26D9               	addwf	fsr2l,f,c
  5956  001CAE  512E               	movf	(pf_open@fs+1)& (0+255),w,b
  5957  001CB0  22DA               	addwfc	fsr2h,f,c
  5958  001CB2  0E00               	movlw	0
  5959  001CB4  6EDF               	movwf	indf2,c
  5960                           
  5961                           ; BSR set to: 1
  5962                           ;pff.c: 841: dj.fn = sp;
  5963  001CB6  0E00               	movlw	low pf_open@sp
  5964  001CB8  6F31               	movwf	(pf_open@dj+2)& (0+255),b
  5965  001CBA  0E01               	movlw	high pf_open@sp
  5966  001CBC  6F32               	movwf	(pf_open@dj+3)& (0+255),b
  5967                           
  5968                           ; BSR set to: 1
  5969                           ;pff.c: 842: res = follow_path(&dj, dir, "check.txt" );
  5970  001CBE  0E2F               	movlw	low pf_open@dj
  5971  001CC0  0100               	movlb	0	; () banked
  5972  001CC2  6FAD               	movwf	follow_path@dj& (0+255),b
  5973  001CC4  0E01               	movlw	high pf_open@dj
  5974  001CC6  6FAE               	movwf	(follow_path@dj+1)& (0+255),b
  5975  001CC8  0E0C               	movlw	low pf_open@dir
  5976  001CCA  6FAF               	movwf	follow_path@dir& (0+255),b
  5977  001CCC  0E01               	movlw	high pf_open@dir
  5978  001CCE  6FB0               	movwf	(follow_path@dir+1)& (0+255),b
  5979  001CD0  0EDA               	movlw	low STR_8
  5980  001CD2  6FB1               	movwf	follow_path@path& (0+255),b
  5981  001CD4  0E7F               	movlw	high STR_8
  5982  001CD6  6FB2               	movwf	(follow_path@path+1)& (0+255),b
  5983  001CD8  ECEF  F011         	call	_follow_path	;wreg free
  5984  001CDC  0101               	movlb	1	; () banked
  5985  001CDE  6F2C               	movwf	pf_open@res& (0+255),b
  5986                           
  5987                           ; BSR set to: 1
  5988                           ;pff.c: 843: if (res != FR_OK) return res;
  5989  001CE0  512C               	movf	pf_open@res& (0+255),w,b
  5990  001CE2  B4D8               	btfsc	status,2,c
  5991  001CE4  D002               	goto	l968
  5992                           
  5993                           ; BSR set to: 1
  5994  001CE6  512C               	movf	pf_open@res& (0+255),w,b
  5995                           
  5996                           ; BSR set to: 1
  5997  001CE8  0012               	return	
  5998  001CEA                     l968:
  5999                           
  6000                           ; BSR set to: 1
  6001                           ;pff.c: 844: if (!dir[0] || (dir[11] & 0x10))
  6002                           
  6003                           ; BSR set to: 1
  6004  001CEA  510C               	movf	pf_open@dir& (0+255),w,b
  6005  001CEC  B4D8               	btfsc	status,2,c
  6006  001CEE  D002               	goto	u7900
  6007                           
  6008                           ; BSR set to: 1
  6009  001CF0  A917               	btfss	(pf_open@dir+11)& (0+255),4,b
  6010  001CF2  D002               	goto	l969
  6011  001CF4                     u7900:
  6012                           
  6013                           ; BSR set to: 1
  6014                           ;pff.c: 845: return FR_NO_FILE;
  6015                           
  6016                           ; BSR set to: 1
  6017  001CF4  0E03               	movlw	3
  6018                           
  6019                           ; BSR set to: 1
  6020  001CF6  0012               	return	
  6021  001CF8                     l969:
  6022                           
  6023                           ; BSR set to: 1
  6024                           ;pff.c: 847: fs->org_clust = get_clust(dir);
  6025                           
  6026                           ; BSR set to: 1
  6027  001CF8  0E0C               	movlw	low pf_open@dir
  6028  001CFA  6E1A               	movwf	get_clust@dir,c
  6029  001CFC  0E01               	movlw	high pf_open@dir
  6030  001CFE  6E1B               	movwf	get_clust@dir+1,c
  6031  001D00  EC60  F013         	call	_get_clust	;wreg free
  6032  001D04  0101               	movlb	1	; () banked
  6033  001D06  EE20 F01E          	lfsr	2,30
  6034  001D0A  512D               	movf	pf_open@fs& (0+255),w,b
  6035  001D0C  26D9               	addwf	fsr2l,f,c
  6036  001D0E  512E               	movf	(pf_open@fs+1)& (0+255),w,b
  6037  001D10  22DA               	addwfc	fsr2h,f,c
  6038  001D12  C01A  FFDE         	movff	?_get_clust,postinc2
  6039  001D16  C01B  FFDE         	movff	?_get_clust+1,postinc2
  6040  001D1A  C01C  FFDE         	movff	?_get_clust+2,postinc2
  6041  001D1E  C01D  FFDE         	movff	?_get_clust+3,postinc2
  6042                           
  6043                           ; BSR set to: 1
  6044                           ;pff.c: 848: fs->fsize = (DWORD)(((DWORD)*((BYTE*)(dir+28)+3)<<24)|((DWORD)*((BYTE*)(dir
      +                          +28)+2)<<16)|((WORD)*((BYTE*)(dir+28)+1)<<8)|*(BYTE*)(dir+28));
  6045  001D22  5129               	movf	(pf_open@dir+29)& (0+255),w,b
  6046  001D24  0100               	movlb	0	; () banked
  6047  001D26  6FB7               	movwf	(??_pf_open+1)& (0+255),b
  6048  001D28  6BB6               	clrf	??_pf_open& (0+255),b
  6049  001D2A  C12A  F0B8         	movff	pf_open@dir+30,??_pf_open+2
  6050  001D2E  6BB9               	clrf	(??_pf_open+3)& (0+255),b
  6051  001D30  6BBA               	clrf	(??_pf_open+4)& (0+255),b
  6052  001D32  6BBB               	clrf	(??_pf_open+5)& (0+255),b
  6053  001D34  C0B9  F0BB         	movff	??_pf_open+3,??_pf_open+5
  6054  001D38  C0B8  F0BA         	movff	??_pf_open+2,??_pf_open+4
  6055  001D3C  6BB9               	clrf	(??_pf_open+3)& (0+255),b
  6056  001D3E  6BB8               	clrf	(??_pf_open+2)& (0+255),b
  6057  001D40  C12B  F0BC         	movff	pf_open@dir+31,??_pf_open+6
  6058  001D44  6BBD               	clrf	(??_pf_open+7)& (0+255),b
  6059  001D46  6BBE               	clrf	(??_pf_open+8)& (0+255),b
  6060  001D48  6BBF               	clrf	(??_pf_open+9)& (0+255),b
  6061  001D4A  C0BC  F0BF         	movff	??_pf_open+6,??_pf_open+9
  6062  001D4E  6BBE               	clrf	(??_pf_open+8)& (0+255),b
  6063  001D50  6BBD               	clrf	(??_pf_open+7)& (0+255),b
  6064  001D52  6BBC               	clrf	(??_pf_open+6)& (0+255),b
  6065  001D54  51B8               	movf	(??_pf_open+2)& (0+255),w,b
  6066  001D56  11BC               	iorwf	(??_pf_open+6)& (0+255),w,b
  6067  001D58  6FC0               	movwf	(??_pf_open+10)& (0+255),b
  6068  001D5A  51B9               	movf	(??_pf_open+3)& (0+255),w,b
  6069  001D5C  11BD               	iorwf	(??_pf_open+7)& (0+255),w,b
  6070  001D5E  6FC1               	movwf	(??_pf_open+11)& (0+255),b
  6071  001D60  51BA               	movf	(??_pf_open+4)& (0+255),w,b
  6072  001D62  11BE               	iorwf	(??_pf_open+8)& (0+255),w,b
  6073  001D64  6FC2               	movwf	(??_pf_open+12)& (0+255),b
  6074  001D66  51BB               	movf	(??_pf_open+5)& (0+255),w,b
  6075  001D68  11BF               	iorwf	(??_pf_open+9)& (0+255),w,b
  6076  001D6A  6FC3               	movwf	(??_pf_open+13)& (0+255),b
  6077  001D6C  51B6               	movf	??_pf_open& (0+255),w,b
  6078  001D6E  11C0               	iorwf	(??_pf_open+10)& (0+255),w,b
  6079  001D70  6FC4               	movwf	(??_pf_open+14)& (0+255),b
  6080  001D72  51B7               	movf	(??_pf_open+1)& (0+255),w,b
  6081  001D74  11C1               	iorwf	(??_pf_open+11)& (0+255),w,b
  6082  001D76  6FC5               	movwf	(??_pf_open+15)& (0+255),b
  6083  001D78  0E00               	movlw	0
  6084  001D7A  11C2               	iorwf	(??_pf_open+12)& (0+255),w,b
  6085  001D7C  6FC6               	movwf	(??_pf_open+16)& (0+255),b
  6086  001D7E  0E00               	movlw	0
  6087  001D80  11C3               	iorwf	(??_pf_open+13)& (0+255),w,b
  6088  001D82  6FC7               	movwf	(??_pf_open+17)& (0+255),b
  6089  001D84  0101               	movlb	1	; () banked
  6090  001D86  5128               	movf	(pf_open@dir+28)& (0+255),w,b
  6091  001D88  0100               	movlb	0	; () banked
  6092  001D8A  11C4               	iorwf	(??_pf_open+14)& (0+255),w,b
  6093  001D8C  6FC8               	movwf	(??_pf_open+18)& (0+255),b
  6094  001D8E  51C5               	movf	(??_pf_open+15)& (0+255),w,b
  6095  001D90  6FC9               	movwf	(??_pf_open+19)& (0+255),b
  6096  001D92  51C6               	movf	(??_pf_open+16)& (0+255),w,b
  6097  001D94  6FCA               	movwf	(??_pf_open+20)& (0+255),b
  6098  001D96  51C7               	movf	(??_pf_open+17)& (0+255),w,b
  6099  001D98  6FCB               	movwf	(??_pf_open+21)& (0+255),b
  6100  001D9A  0101               	movlb	1	; () banked
  6101  001D9C  EE20 F01A          	lfsr	2,26
  6102  001DA0  512D               	movf	pf_open@fs& (0+255),w,b
  6103  001DA2  26D9               	addwf	fsr2l,f,c
  6104  001DA4  512E               	movf	(pf_open@fs+1)& (0+255),w,b
  6105  001DA6  22DA               	addwfc	fsr2h,f,c
  6106  001DA8  C0C8  FFDE         	movff	??_pf_open+18,postinc2
  6107  001DAC  C0C9  FFDE         	movff	??_pf_open+19,postinc2
  6108  001DB0  C0CA  FFDE         	movff	??_pf_open+20,postinc2
  6109  001DB4  C0CB  FFDE         	movff	??_pf_open+21,postinc2
  6110                           
  6111                           ; BSR set to: 1
  6112                           ;pff.c: 849: fs->fptr = 0;
  6113  001DB8  EE20 F016          	lfsr	2,22
  6114  001DBC  512D               	movf	pf_open@fs& (0+255),w,b
  6115  001DBE  26D9               	addwf	fsr2l,f,c
  6116  001DC0  512E               	movf	(pf_open@fs+1)& (0+255),w,b
  6117  001DC2  22DA               	addwfc	fsr2h,f,c
  6118  001DC4  6ADE               	clrf	postinc2,c
  6119  001DC6  6ADE               	clrf	postinc2,c
  6120  001DC8  6ADE               	clrf	postinc2,c
  6121  001DCA  6ADD               	clrf	postdec2,c
  6122                           
  6123                           ; BSR set to: 1
  6124                           ;pff.c: 850: fs->flag = 0x01;
  6125  001DCC  EE20 F001          	lfsr	2,1
  6126  001DD0  512D               	movf	pf_open@fs& (0+255),w,b
  6127  001DD2  26D9               	addwf	fsr2l,f,c
  6128  001DD4  512E               	movf	(pf_open@fs+1)& (0+255),w,b
  6129  001DD6  22DA               	addwfc	fsr2h,f,c
  6130  001DD8  0E01               	movlw	1
  6131  001DDA  6EDF               	movwf	indf2,c
  6132                           
  6133                           ; BSR set to: 1
  6134                           ;pff.c: 852: return FR_OK;
  6135  001DDC  0E00               	movlw	0
  6136  001DDE  0012               	return	
  6137  001DE0                     __end_of_pf_open:
  6138                           	opt stack 0
  6139                           tosu	equ	0xFFF
  6140                           tosh	equ	0xFFE
  6141                           tosl	equ	0xFFD
  6142                           pclath	equ	0xFFA
  6143                           tblptru	equ	0xFF8
  6144                           tblptrh	equ	0xFF7
  6145                           tblptrl	equ	0xFF6
  6146                           tablat	equ	0xFF5
  6147                           prodh	equ	0xFF4
  6148                           prodl	equ	0xFF3
  6149                           intcon	equ	0xFF2
  6150                           intcon2	equ	0xFF1
  6151                           intcon3	equ	0xFF0
  6152                           postinc0	equ	0xFEE
  6153                           wreg	equ	0xFE8
  6154                           postinc1	equ	0xFE6
  6155                           postdec1	equ	0xFE5
  6156                           fsr1h	equ	0xFE2
  6157                           fsr1l	equ	0xFE1
  6158                           indf2	equ	0xFDF
  6159                           postinc2	equ	0xFDE
  6160                           postdec2	equ	0xFDD
  6161                           plusw2	equ	0xFDB
  6162                           fsr2h	equ	0xFDA
  6163                           fsr2l	equ	0xFD9
  6164                           status	equ	0xFD8
  6165                           
  6166 ;; *************** function _follow_path *****************
  6167 ;; Defined at:
  6168 ;;		line 680 in file "pff.c"
  6169 ;; Parameters:    Size  Location     Type
  6170 ;;  dj              2   77[BANK0 ] PTR struct .
  6171 ;;		 -> pf_open@dj(16), 
  6172 ;;  dir             2   79[BANK0 ] PTR unsigned char 
  6173 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  6174 ;;  path            2   81[BANK0 ] PTR const unsigned char 
  6175 ;;		 -> STR_16(10), 
  6176 ;; Auto vars:     Size  Location     Type
  6177 ;;  res             1   83[BANK0 ] enum E43
  6178 ;; Return value:  Size  Location     Type
  6179 ;;                  1    wreg      enum E43
  6180 ;; Registers used:
  6181 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6182 ;; Tracked objects:
  6183 ;;		On entry : 0/0
  6184 ;;		On exit  : 0/0
  6185 ;;		Unchanged: 0/0
  6186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6187 ;;      Params:         0       6       0       0       0       0       0       0       0
  6188 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6189 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6190 ;;      Totals:         0       7       0       0       0       0       0       0       0
  6191 ;;Total ram usage:        7 bytes
  6192 ;; Hardware stack levels used:    1
  6193 ;; Hardware stack levels required when called:   11
  6194 ;; This function calls:
  6195 ;;		_create_name
  6196 ;;		_dir_find
  6197 ;;		_dir_rewind
  6198 ;;		_get_clust
  6199 ;; This function is called by:
  6200 ;;		_pf_open
  6201 ;;		_pf_opendir
  6202 ;; This function uses a non-reentrant model
  6203 ;;
  6204                           
  6205                           	psect	text27
  6206  0023DE                     __ptext27:
  6207                           	opt stack 0
  6208  0023DE                     _follow_path:
  6209                           	opt stack 16
  6210                           
  6211                           ;pff.c: 686: FRESULT res;
  6212                           ;pff.c: 689: while (*path == ' ') path++;
  6213                           
  6214                           ; BSR set to: 1
  6215                           ;incstack = 0
  6216  0023DE  D003               	goto	l923
  6217  0023E0  0100               	movlb	0	; () banked
  6218  0023E2  4BB1               	infsnz	follow_path@path& (0+255),f,b
  6219  0023E4  2BB2               	incf	(follow_path@path+1)& (0+255),f,b
  6220  0023E6                     l923:
  6221                           
  6222                           ; BSR set to: 0
  6223  0023E6  C0B1  FFF6         	movff	follow_path@path,tblptrl
  6224  0023EA  C0B2  FFF7         	movff	follow_path@path+1,tblptrh
  6225  0023EE                     	if	0	;tblptru may be non-zero
  6226  0023EE                     	endif
  6227  0023EE                     	if	0	;tblptru may be non-zero
  6228  0023EE                     	endif
  6229  0023EE  0008               	tblrd		*
  6230  0023F0  50F5               	movf	tablat,w,c
  6231  0023F2  0A20               	xorlw	32
  6232  0023F4  B4D8               	btfsc	status,2,c
  6233  0023F6  D7F4               	goto	l924
  6234                           
  6235                           ;pff.c: 690: if (*path == '/') path++;
  6236  0023F8  C0B1  FFF6         	movff	follow_path@path,tblptrl
  6237  0023FC  C0B2  FFF7         	movff	follow_path@path+1,tblptrh
  6238  002400                     	if	0	;tblptru may be non-zero
  6239  002400                     	endif
  6240  002400                     	if	0	;tblptru may be non-zero
  6241  002400                     	endif
  6242  002400  0008               	tblrd		*
  6243  002402  50F5               	movf	tablat,w,c
  6244  002404  0A2F               	xorlw	47
  6245  002406  A4D8               	btfss	status,2,c
  6246  002408  D003               	goto	l926
  6247  00240A  0100               	movlb	0	; () banked
  6248  00240C  4BB1               	infsnz	follow_path@path& (0+255),f,b
  6249  00240E  2BB2               	incf	(follow_path@path+1)& (0+255),f,b
  6250  002410                     l926:
  6251                           
  6252                           ;pff.c: 691: dj->sclust = 0;
  6253                           
  6254                           ; BSR set to: 0
  6255  002410  0100               	movlb	0	; () banked
  6256  002412  EE20 F004          	lfsr	2,4
  6257  002416  51AD               	movf	follow_path@dj& (0+255),w,b
  6258  002418  26D9               	addwf	fsr2l,f,c
  6259  00241A  51AE               	movf	(follow_path@dj+1)& (0+255),w,b
  6260  00241C  22DA               	addwfc	fsr2h,f,c
  6261  00241E  6ADE               	clrf	postinc2,c
  6262  002420  6ADE               	clrf	postinc2,c
  6263  002422  6ADE               	clrf	postinc2,c
  6264  002424  6ADD               	clrf	postdec2,c
  6265                           
  6266                           ; BSR set to: 0
  6267                           ;pff.c: 693: if ((BYTE)*path < ' ') {
  6268  002426  C0B1  FFF6         	movff	follow_path@path,tblptrl
  6269  00242A  C0B2  FFF7         	movff	follow_path@path+1,tblptrh
  6270  00242E                     	if	0	;tblptru may be non-zero
  6271  00242E                     	endif
  6272  00242E                     	if	0	;tblptru may be non-zero
  6273  00242E                     	endif
  6274  00242E  0E20               	movlw	32
  6275  002430  0008               	tblrd		*
  6276  002432  60F5               	cpfslt	tablat,c
  6277  002434  D00F               	goto	l927
  6278                           
  6279                           ; BSR set to: 0
  6280                           ;pff.c: 694: res = dir_rewind(dj);
  6281  002436  C0AD  F065         	movff	follow_path@dj,dir_rewind@dj
  6282  00243A  C0AE  F066         	movff	follow_path@dj+1,dir_rewind@dj+1
  6283  00243E  ECCB  F010         	call	_dir_rewind	;wreg free
  6284  002442  0100               	movlb	0	; () banked
  6285  002444  6FB3               	movwf	follow_path@res& (0+255),b
  6286                           
  6287                           ; BSR set to: 0
  6288                           ;pff.c: 695: dir[0] = 0;
  6289  002446  C0AF  FFD9         	movff	follow_path@dir,fsr2l
  6290  00244A  C0B0  FFDA         	movff	follow_path@dir+1,fsr2h
  6291  00244E  0E00               	movlw	0
  6292  002450  6EDF               	movwf	indf2,c
  6293                           
  6294                           ;pff.c: 697: } else {
  6295  002452  D04E               	goto	l931
  6296  002454                     l927:
  6297                           
  6298                           ; BSR set to: 0
  6299                           ;pff.c: 699: res = create_name(dj, &path);
  6300                           
  6301                           ; BSR set to: 0
  6302                           
  6303                           ;pff.c: 698: for (;;) {
  6304                           
  6305                           ; BSR set to: 0
  6306  002454  C0AD  F022         	movff	follow_path@dj,create_name@dj
  6307  002458  C0AE  F023         	movff	follow_path@dj+1,create_name@dj+1
  6308  00245C  0EB1               	movlw	low follow_path@path
  6309  00245E  6E24               	movwf	create_name@path,c
  6310  002460  0E00               	movlw	high follow_path@path
  6311  002462  6E25               	movwf	create_name@path+1,c
  6312  002464  ECF0  F00E         	call	_create_name	;wreg free
  6313  002468  0100               	movlb	0	; () banked
  6314  00246A  6FB3               	movwf	follow_path@res& (0+255),b
  6315                           
  6316                           ; BSR set to: 0
  6317                           ;pff.c: 700: if (res != FR_OK) break;
  6318  00246C  51B3               	movf	follow_path@res& (0+255),w,b
  6319  00246E  A4D8               	btfss	status,2,c
  6320  002470  D03F               	goto	l931
  6321                           
  6322                           ; BSR set to: 0
  6323                           ;pff.c: 701: res = dir_find(dj, dir);
  6324                           
  6325                           ; BSR set to: 0
  6326                           
  6327                           ; BSR set to: 0
  6328  002472  C0AD  F0A5         	movff	follow_path@dj,dir_find@dj
  6329  002476  C0AE  F0A6         	movff	follow_path@dj+1,dir_find@dj+1
  6330  00247A  C0AF  F0A7         	movff	follow_path@dir,dir_find@dir
  6331  00247E  C0B0  F0A8         	movff	follow_path@dir+1,dir_find@dir+1
  6332  002482  EC7A  F012         	call	_dir_find	;wreg free
  6333  002486  0100               	movlb	0	; () banked
  6334  002488  6FB3               	movwf	follow_path@res& (0+255),b
  6335                           
  6336                           ; BSR set to: 0
  6337                           ;pff.c: 702: if (res != FR_OK) break;
  6338  00248A  51B3               	movf	follow_path@res& (0+255),w,b
  6339  00248C  A4D8               	btfss	status,2,c
  6340  00248E  D030               	goto	l931
  6341                           
  6342                           ; BSR set to: 0
  6343                           ;pff.c: 703: if (dj->fn[11]) break;
  6344                           
  6345                           ; BSR set to: 0
  6346                           
  6347                           ; BSR set to: 0
  6348  002490  EE20 F002          	lfsr	2,2
  6349  002494  51AD               	movf	follow_path@dj& (0+255),w,b
  6350  002496  26D9               	addwf	fsr2l,f,c
  6351  002498  51AE               	movf	(follow_path@dj+1)& (0+255),w,b
  6352  00249A  22DA               	addwfc	fsr2h,f,c
  6353  00249C  EE10 F00B          	lfsr	1,11
  6354  0024A0  50DE               	movf	postinc2,w,c
  6355  0024A2  26E1               	addwf	fsr1l,f,c
  6356  0024A4  50DD               	movf	postdec2,w,c
  6357  0024A6  22E2               	addwfc	fsr1h,f,c
  6358  0024A8  50E7               	movf	indf1,w,c
  6359  0024AA  A4D8               	btfss	status,2,c
  6360  0024AC  D021               	goto	l931
  6361                           
  6362                           ; BSR set to: 0
  6363                           ;pff.c: 704: if (!(dir[11] & 0x10)) {
  6364                           
  6365                           ; BSR set to: 0
  6366                           
  6367                           ; BSR set to: 0
  6368  0024AE  EE20 F00B          	lfsr	2,11
  6369  0024B2  51AF               	movf	follow_path@dir& (0+255),w,b
  6370  0024B4  26D9               	addwf	fsr2l,f,c
  6371  0024B6  51B0               	movf	(follow_path@dir+1)& (0+255),w,b
  6372  0024B8  22DA               	addwfc	fsr2h,f,c
  6373  0024BA  B8DF               	btfsc	indf2,4,c
  6374  0024BC  D003               	goto	l934
  6375                           
  6376                           ; BSR set to: 0
  6377                           ;pff.c: 705: res = FR_NO_FILE; break;
  6378  0024BE  0E03               	movlw	3
  6379  0024C0  6FB3               	movwf	follow_path@res& (0+255),b
  6380  0024C2  D016               	goto	l931
  6381  0024C4                     l934:
  6382                           
  6383                           ; BSR set to: 0
  6384                           ;pff.c: 706: }
  6385                           ;pff.c: 707: dj->sclust = get_clust(dir);
  6386                           
  6387                           ; BSR set to: 0
  6388  0024C4  C0AF  F01A         	movff	follow_path@dir,get_clust@dir
  6389  0024C8  C0B0  F01B         	movff	follow_path@dir+1,get_clust@dir+1
  6390  0024CC  EC60  F013         	call	_get_clust	;wreg free
  6391  0024D0  0100               	movlb	0	; () banked
  6392  0024D2  EE20 F004          	lfsr	2,4
  6393  0024D6  51AD               	movf	follow_path@dj& (0+255),w,b
  6394  0024D8  26D9               	addwf	fsr2l,f,c
  6395  0024DA  51AE               	movf	(follow_path@dj+1)& (0+255),w,b
  6396  0024DC  22DA               	addwfc	fsr2h,f,c
  6397  0024DE  C01A  FFDE         	movff	?_get_clust,postinc2
  6398  0024E2  C01B  FFDE         	movff	?_get_clust+1,postinc2
  6399  0024E6  C01C  FFDE         	movff	?_get_clust+2,postinc2
  6400  0024EA  C01D  FFDE         	movff	?_get_clust+3,postinc2
  6401                           
  6402                           ;pff.c: 708: }
  6403  0024EE  D7B2               	goto	l927
  6404  0024F0                     l931:
  6405                           
  6406                           ; BSR set to: 0
  6407                           ;pff.c: 709: }
  6408                           ;pff.c: 711: return res;
  6409                           
  6410                           ; BSR set to: 0
  6411                           
  6412                           ; BSR set to: 0
  6413  0024F0  51B3               	movf	follow_path@res& (0+255),w,b
  6414  0024F2  0012               	return	
  6415  0024F4                     __end_of_follow_path:
  6416                           	opt stack 0
  6417                           tosu	equ	0xFFF
  6418                           tosh	equ	0xFFE
  6419                           tosl	equ	0xFFD
  6420                           pclath	equ	0xFFA
  6421                           tblptru	equ	0xFF8
  6422                           tblptrh	equ	0xFF7
  6423                           tblptrl	equ	0xFF6
  6424                           tablat	equ	0xFF5
  6425                           prodh	equ	0xFF4
  6426                           prodl	equ	0xFF3
  6427                           intcon	equ	0xFF2
  6428                           intcon2	equ	0xFF1
  6429                           intcon3	equ	0xFF0
  6430                           postinc0	equ	0xFEE
  6431                           wreg	equ	0xFE8
  6432                           indf1	equ	0xFE7
  6433                           postinc1	equ	0xFE6
  6434                           postdec1	equ	0xFE5
  6435                           fsr1h	equ	0xFE2
  6436                           fsr1l	equ	0xFE1
  6437                           indf2	equ	0xFDF
  6438                           postinc2	equ	0xFDE
  6439                           postdec2	equ	0xFDD
  6440                           plusw2	equ	0xFDB
  6441                           fsr2h	equ	0xFDA
  6442                           fsr2l	equ	0xFD9
  6443                           status	equ	0xFD8
  6444                           
  6445 ;; *************** function _get_clust *****************
  6446 ;; Defined at:
  6447 ;;		line 414 in file "pff.c"
  6448 ;; Parameters:    Size  Location     Type
  6449 ;;  dir             2   25[COMRAM] PTR unsigned char 
  6450 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  6451 ;; Auto vars:     Size  Location     Type
  6452 ;;  clst            4   39[COMRAM] unsigned long 
  6453 ;;  fs              2   37[COMRAM] PTR struct .
  6454 ;;		 -> NULL(0), SDCard@fs(42), 
  6455 ;; Return value:  Size  Location     Type
  6456 ;;                  4   25[COMRAM] unsigned long 
  6457 ;; Registers used:
  6458 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6459 ;; Tracked objects:
  6460 ;;		On entry : 0/0
  6461 ;;		On exit  : 0/0
  6462 ;;		Unchanged: 0/0
  6463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6464 ;;      Params:         4       0       0       0       0       0       0       0       0
  6465 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6466 ;;      Temps:          8       0       0       0       0       0       0       0       0
  6467 ;;      Totals:        18       0       0       0       0       0       0       0       0
  6468 ;;Total ram usage:       18 bytes
  6469 ;; Hardware stack levels used:    1
  6470 ;; Hardware stack levels required when called:    2
  6471 ;; This function calls:
  6472 ;;		Nothing
  6473 ;; This function is called by:
  6474 ;;		_follow_path
  6475 ;;		_pf_open
  6476 ;;		_pf_opendir
  6477 ;; This function uses a non-reentrant model
  6478 ;;
  6479                           
  6480                           	psect	text28
  6481  0026C0                     __ptext28:
  6482                           	opt stack 0
  6483  0026C0                     _get_clust:
  6484                           	opt stack 25
  6485                           
  6486                           ;pff.c: 418: FATFS *fs = FatFs;
  6487                           
  6488                           ; BSR set to: 0
  6489                           ;incstack = 0
  6490  0026C0  C035  F026         	movff	_FatFs,get_clust@fs
  6491  0026C4  C036  F027         	movff	_FatFs+1,get_clust@fs+1
  6492                           
  6493                           ;pff.c: 422: if (0 || (1 && fs->fs_type == 3)) {
  6494  0026C8  0E00               	movlw	0
  6495  0026CA  6E28               	movwf	get_clust@clst,c
  6496  0026CC  0E00               	movlw	0
  6497  0026CE  6E29               	movwf	get_clust@clst+1,c
  6498  0026D0  0E00               	movlw	0
  6499  0026D2  6E2A               	movwf	get_clust@clst+2,c
  6500  0026D4  0E00               	movlw	0
  6501  0026D6  6E2B               	movwf	get_clust@clst+3,c
  6502  0026D8  C026  FFD9         	movff	get_clust@fs,fsr2l
  6503  0026DC  C027  FFDA         	movff	get_clust@fs+1,fsr2h
  6504  0026E0  0E03               	movlw	3
  6505  0026E2  18DE               	xorwf	postinc2,w,c
  6506  0026E4  A4D8               	btfss	status,2,c
  6507  0026E6  D025               	goto	l838
  6508                           
  6509                           ;pff.c: 423: clst = (WORD)(((WORD)*((BYTE*)(dir+20)+1)<<8)|(WORD)*(BYTE*)(dir+20));
  6510  0026E8  EE20 F015          	lfsr	2,21
  6511  0026EC  501A               	movf	get_clust@dir,w,c
  6512  0026EE  26D9               	addwf	fsr2l,f,c
  6513  0026F0  501B               	movf	get_clust@dir+1,w,c
  6514  0026F2  22DA               	addwfc	fsr2h,f,c
  6515  0026F4  50DF               	movf	indf2,w,c
  6516  0026F6  6E1E               	movwf	??_get_clust& (0+255),c
  6517  0026F8  501E               	movf	??_get_clust,w,c
  6518  0026FA  6E20               	movwf	(??_get_clust+2)& (0+255),c
  6519  0026FC  6A1F               	clrf	(??_get_clust+1)& (0+255),c
  6520  0026FE  EE20 F014          	lfsr	2,20
  6521  002702  501A               	movf	get_clust@dir,w,c
  6522  002704  26D9               	addwf	fsr2l,f,c
  6523  002706  501B               	movf	get_clust@dir+1,w,c
  6524  002708  22DA               	addwfc	fsr2h,f,c
  6525  00270A  50DF               	movf	indf2,w,c
  6526  00270C  6E21               	movwf	(??_get_clust+3)& (0+255),c
  6527  00270E  5021               	movf	??_get_clust+3,w,c
  6528  002710  121F               	iorwf	??_get_clust+1,f,c
  6529  002712  0E00               	movlw	0
  6530  002714  1220               	iorwf	??_get_clust+2,f,c
  6531  002716  C01F  F028         	movff	??_get_clust+1,get_clust@clst
  6532  00271A  C020  F029         	movff	??_get_clust+2,get_clust@clst+1
  6533  00271E  6A2A               	clrf	get_clust@clst+2,c
  6534  002720  6A2B               	clrf	get_clust@clst+3,c
  6535                           
  6536                           ;pff.c: 424: clst <<= 16;
  6537  002722  0E10               	movlw	16
  6538  002724                     u7205:
  6539  002724  90D8               	bcf	status,0,c
  6540  002726  3628               	rlcf	get_clust@clst,f,c
  6541  002728  3629               	rlcf	get_clust@clst+1,f,c
  6542  00272A  362A               	rlcf	get_clust@clst+2,f,c
  6543  00272C  362B               	rlcf	get_clust@clst+3,f,c
  6544  00272E  2EE8               	decfsz	wreg,f,c
  6545  002730  D7F9               	goto	u7205
  6546  002732                     l838:
  6547                           
  6548                           ;pff.c: 425: }
  6549                           ;pff.c: 426: clst |= (WORD)(((WORD)*((BYTE*)(dir+26)+1)<<8)|(WORD)*(BYTE*)(dir+26));
  6550  002732  EE20 F01B          	lfsr	2,27
  6551  002736  501A               	movf	get_clust@dir,w,c
  6552  002738  26D9               	addwf	fsr2l,f,c
  6553  00273A  501B               	movf	get_clust@dir+1,w,c
  6554  00273C  22DA               	addwfc	fsr2h,f,c
  6555  00273E  50DF               	movf	indf2,w,c
  6556  002740  6E1E               	movwf	??_get_clust& (0+255),c
  6557  002742  501E               	movf	??_get_clust,w,c
  6558  002744  6E20               	movwf	(??_get_clust+2)& (0+255),c
  6559  002746  6A1F               	clrf	(??_get_clust+1)& (0+255),c
  6560  002748  EE20 F01A          	lfsr	2,26
  6561  00274C  501A               	movf	get_clust@dir,w,c
  6562  00274E  26D9               	addwf	fsr2l,f,c
  6563  002750  501B               	movf	get_clust@dir+1,w,c
  6564  002752  22DA               	addwfc	fsr2h,f,c
  6565  002754  50DF               	movf	indf2,w,c
  6566  002756  6E21               	movwf	(??_get_clust+3)& (0+255),c
  6567  002758  5021               	movf	??_get_clust+3,w,c
  6568  00275A  101F               	iorwf	??_get_clust+1,w,c
  6569  00275C  6E22               	movwf	(??_get_clust+4)& (0+255),c
  6570  00275E  5020               	movf	??_get_clust+2,w,c
  6571  002760  6E23               	movwf	(??_get_clust+5)& (0+255),c
  6572  002762  6A24               	clrf	(??_get_clust+6)& (0+255),c
  6573  002764  6A25               	clrf	(??_get_clust+7)& (0+255),c
  6574  002766  5022               	movf	??_get_clust+4,w,c
  6575  002768  1228               	iorwf	get_clust@clst,f,c
  6576  00276A  5023               	movf	??_get_clust+5,w,c
  6577  00276C  1229               	iorwf	get_clust@clst+1,f,c
  6578  00276E  5024               	movf	??_get_clust+6,w,c
  6579  002770  122A               	iorwf	get_clust@clst+2,f,c
  6580  002772  5025               	movf	??_get_clust+7,w,c
  6581  002774  122B               	iorwf	get_clust@clst+3,f,c
  6582                           
  6583                           ;pff.c: 428: return clst;
  6584  002776  C028  F01A         	movff	get_clust@clst,?_get_clust
  6585  00277A  C029  F01B         	movff	get_clust@clst+1,?_get_clust+1
  6586  00277E  C02A  F01C         	movff	get_clust@clst+2,?_get_clust+2
  6587  002782  C02B  F01D         	movff	get_clust@clst+3,?_get_clust+3
  6588  002786  0012               	return	
  6589  002788                     __end_of_get_clust:
  6590                           	opt stack 0
  6591                           tosu	equ	0xFFF
  6592                           tosh	equ	0xFFE
  6593                           tosl	equ	0xFFD
  6594                           pclath	equ	0xFFA
  6595                           tblptru	equ	0xFF8
  6596                           tblptrh	equ	0xFF7
  6597                           tblptrl	equ	0xFF6
  6598                           tablat	equ	0xFF5
  6599                           prodh	equ	0xFF4
  6600                           prodl	equ	0xFF3
  6601                           intcon	equ	0xFF2
  6602                           intcon2	equ	0xFF1
  6603                           intcon3	equ	0xFF0
  6604                           postinc0	equ	0xFEE
  6605                           wreg	equ	0xFE8
  6606                           indf1	equ	0xFE7
  6607                           postinc1	equ	0xFE6
  6608                           postdec1	equ	0xFE5
  6609                           fsr1h	equ	0xFE2
  6610                           fsr1l	equ	0xFE1
  6611                           indf2	equ	0xFDF
  6612                           postinc2	equ	0xFDE
  6613                           postdec2	equ	0xFDD
  6614                           plusw2	equ	0xFDB
  6615                           fsr2h	equ	0xFDA
  6616                           fsr2l	equ	0xFD9
  6617                           status	equ	0xFD8
  6618                           
  6619 ;; *************** function _dir_find *****************
  6620 ;; Defined at:
  6621 ;;		line 510 in file "pff.c"
  6622 ;; Parameters:    Size  Location     Type
  6623 ;;  dj              2   69[BANK0 ] PTR struct .
  6624 ;;		 -> pf_open@dj(16), 
  6625 ;;  dir             2   71[BANK0 ] PTR unsigned char 
  6626 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  6627 ;; Auto vars:     Size  Location     Type
  6628 ;;  res             1   76[BANK0 ] enum E43
  6629 ;;  c               1   75[BANK0 ] unsigned char 
  6630 ;; Return value:  Size  Location     Type
  6631 ;;                  1    wreg      enum E43
  6632 ;; Registers used:
  6633 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6634 ;; Tracked objects:
  6635 ;;		On entry : 0/0
  6636 ;;		On exit  : 0/0
  6637 ;;		Unchanged: 0/0
  6638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6639 ;;      Params:         0       4       0       0       0       0       0       0       0
  6640 ;;      Locals:         0       2       0       0       0       0       0       0       0
  6641 ;;      Temps:          0       2       0       0       0       0       0       0       0
  6642 ;;      Totals:         0       8       0       0       0       0       0       0       0
  6643 ;;Total ram usage:        8 bytes
  6644 ;; Hardware stack levels used:    1
  6645 ;; Hardware stack levels required when called:   10
  6646 ;; This function calls:
  6647 ;;		_dir_next
  6648 ;;		_dir_rewind
  6649 ;;		_disk_readp
  6650 ;;		_mem_cmp
  6651 ;; This function is called by:
  6652 ;;		_follow_path
  6653 ;; This function uses a non-reentrant model
  6654 ;;
  6655                           
  6656                           	psect	text29
  6657  0024F4                     __ptext29:
  6658                           	opt stack 0
  6659  0024F4                     _dir_find:
  6660                           	opt stack 16
  6661                           
  6662                           ;pff.c: 515: FRESULT res;
  6663                           ;pff.c: 516: BYTE c;
  6664                           ;pff.c: 519: res = dir_rewind(dj);
  6665                           
  6666                           ;incstack = 0
  6667  0024F4  C0A5  F065         	movff	dir_find@dj,dir_rewind@dj
  6668  0024F8  C0A6  F066         	movff	dir_find@dj+1,dir_rewind@dj+1
  6669  0024FC  ECCB  F010         	call	_dir_rewind	;wreg free
  6670  002500  0100               	movlb	0	; () banked
  6671  002502  6FAC               	movwf	dir_find@res& (0+255),b
  6672                           
  6673                           ; BSR set to: 0
  6674                           ;pff.c: 520: if (res != FR_OK) return res;
  6675  002504  51AC               	movf	dir_find@res& (0+255),w,b
  6676  002506  B4D8               	btfsc	status,2,c
  6677  002508  D002               	goto	l870
  6678                           
  6679                           ; BSR set to: 0
  6680  00250A  51AC               	movf	dir_find@res& (0+255),w,b
  6681                           
  6682                           ; BSR set to: 0
  6683  00250C  0012               	return	
  6684  00250E                     l870:
  6685                           
  6686                           ; BSR set to: 0
  6687                           ;pff.c: 523: res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32)
  6688                           ;pff.c: 524: ? FR_DISK_ERR : FR_OK;
  6689                           
  6690                           ; BSR set to: 0
  6691                           
  6692                           ;pff.c: 522: do {
  6693                           
  6694                           ; BSR set to: 0
  6695  00250E  C0A7  F023         	movff	dir_find@dir,disk_readp@rd
  6696  002512  C0A8  F024         	movff	dir_find@dir+1,disk_readp@rd+1
  6697  002516  EE20 F00C          	lfsr	2,12
  6698  00251A  51A5               	movf	dir_find@dj& (0+255),w,b
  6699  00251C  26D9               	addwf	fsr2l,f,c
  6700  00251E  51A6               	movf	(dir_find@dj+1)& (0+255),w,b
  6701  002520  22DA               	addwfc	fsr2h,f,c
  6702  002522  CFDE F025          	movff	postinc2,disk_readp@sector
  6703  002526  CFDE F026          	movff	postinc2,disk_readp@sector+1
  6704  00252A  CFDE F027          	movff	postinc2,disk_readp@sector+2
  6705  00252E  CFDE F028          	movff	postinc2,disk_readp@sector+3
  6706  002532  C0A5  FFD9         	movff	dir_find@dj,fsr2l
  6707  002536  C0A6  FFDA         	movff	dir_find@dj+1,fsr2h
  6708  00253A  CFDE F0A9          	movff	postinc2,??_dir_find
  6709  00253E  CFDD F0AA          	movff	postdec2,??_dir_find+1
  6710  002542  0E0F               	movlw	15
  6711  002544  17A9               	andwf	??_dir_find& (0+255),f,b
  6712  002546  0E00               	movlw	0
  6713  002548  17AA               	andwf	(??_dir_find+1)& (0+255),f,b
  6714  00254A  0E05               	movlw	5
  6715  00254C                     u7225:
  6716  00254C  90D8               	bcf	status,0,c
  6717  00254E  37A9               	rlcf	??_dir_find& (0+255),f,b
  6718  002550  37AA               	rlcf	(??_dir_find+1)& (0+255),f,b
  6719  002552  2EE8               	decfsz	wreg,f,c
  6720  002554  D7FB               	goto	u7225
  6721  002556  C0A9  F029         	movff	??_dir_find,disk_readp@offset
  6722  00255A  C0AA  F02A         	movff	??_dir_find+1,disk_readp@offset+1
  6723  00255E  0E00               	movlw	0
  6724  002560  6E2C               	movwf	disk_readp@count+1,c
  6725  002562  0E20               	movlw	32
  6726  002564  6E2B               	movwf	disk_readp@count,c
  6727  002566  EC3C  F009         	call	_disk_readp	;wreg free
  6728  00256A  0900               	iorlw	0
  6729  00256C  B4D8               	btfsc	status,2,c
  6730  00256E  D002               	goto	u7230
  6731  002570  0E01               	movlw	1
  6732  002572  D001               	goto	u7240
  6733  002574                     u7230:
  6734  002574  0E00               	movlw	0
  6735  002576                     u7240:
  6736  002576  0100               	movlb	0	; () banked
  6737  002578  6FAC               	movwf	dir_find@res& (0+255),b
  6738                           
  6739                           ; BSR set to: 0
  6740                           ;pff.c: 525: if (res != FR_OK) break;
  6741  00257A  51AC               	movf	dir_find@res& (0+255),w,b
  6742  00257C  A4D8               	btfss	status,2,c
  6743  00257E  D037               	goto	u7290
  6744                           
  6745                           ; BSR set to: 0
  6746                           ;pff.c: 526: c = dir[0];
  6747                           
  6748                           ; BSR set to: 0
  6749                           
  6750                           ; BSR set to: 0
  6751  002580  C0A7  FFD9         	movff	dir_find@dir,fsr2l
  6752  002584  C0A8  FFDA         	movff	dir_find@dir+1,fsr2h
  6753  002588  50DF               	movf	indf2,w,c
  6754  00258A  6FAB               	movwf	dir_find@c& (0+255),b
  6755                           
  6756                           ; BSR set to: 0
  6757                           ;pff.c: 527: if (c == 0) { res = FR_NO_FILE; break; }
  6758  00258C  51AB               	movf	dir_find@c& (0+255),w,b
  6759  00258E  A4D8               	btfss	status,2,c
  6760  002590  D003               	goto	l875
  6761                           
  6762                           ; BSR set to: 0
  6763  002592  0E03               	movlw	3
  6764  002594  6FAC               	movwf	dir_find@res& (0+255),b
  6765  002596  D02B               	goto	u7290
  6766  002598                     l875:
  6767                           
  6768                           ; BSR set to: 0
  6769                           ;pff.c: 528: if (!(dir[11] & 0x08) && !mem_cmp(dir, dj->fn, 11))
  6770                           
  6771                           ; BSR set to: 0
  6772  002598  EE20 F00B          	lfsr	2,11
  6773  00259C  51A7               	movf	dir_find@dir& (0+255),w,b
  6774  00259E  26D9               	addwf	fsr2l,f,c
  6775  0025A0  51A8               	movf	(dir_find@dir+1)& (0+255),w,b
  6776  0025A2  22DA               	addwfc	fsr2h,f,c
  6777  0025A4  B6DF               	btfsc	indf2,3,c
  6778  0025A6  D018               	goto	l876
  6779                           
  6780                           ; BSR set to: 0
  6781  0025A8  C0A7  F01A         	movff	dir_find@dir,mem_cmp@dst
  6782  0025AC  C0A8  F01B         	movff	dir_find@dir+1,mem_cmp@dst+1
  6783  0025B0  EE20 F002          	lfsr	2,2
  6784  0025B4  51A5               	movf	dir_find@dj& (0+255),w,b
  6785  0025B6  26D9               	addwf	fsr2l,f,c
  6786  0025B8  51A6               	movf	(dir_find@dj+1)& (0+255),w,b
  6787  0025BA  22DA               	addwfc	fsr2h,f,c
  6788  0025BC  CFDE F01C          	movff	postinc2,mem_cmp@src
  6789  0025C0  CFDD F01D          	movff	postdec2,mem_cmp@src+1
  6790  0025C4  0E00               	movlw	0
  6791  0025C6  6E1F               	movwf	mem_cmp@cnt+1,c
  6792  0025C8  0E0B               	movlw	11
  6793  0025CA  6E1E               	movwf	mem_cmp@cnt,c
  6794  0025CC  EC02  F016         	call	_mem_cmp	;wreg free
  6795  0025D0  501A               	movf	?_mem_cmp,w,c
  6796  0025D2  101B               	iorwf	?_mem_cmp+1,w,c
  6797  0025D4  B4D8               	btfsc	status,2,c
  6798  0025D6  D00B               	goto	u7290
  6799  0025D8                     l876:
  6800                           
  6801                           ;pff.c: 530: res = dir_next(dj);
  6802  0025D8  C0A5  F094         	movff	dir_find@dj,dir_next@dj
  6803  0025DC  C0A6  F095         	movff	dir_find@dj+1,dir_next@dj+1
  6804  0025E0  EC0D  F00C         	call	_dir_next	;wreg free
  6805  0025E4  0100               	movlb	0	; () banked
  6806  0025E6  6FAC               	movwf	dir_find@res& (0+255),b
  6807                           
  6808                           ; BSR set to: 0
  6809                           ;pff.c: 531: } while (res == FR_OK);
  6810  0025E8  51AC               	movf	dir_find@res& (0+255),w,b
  6811  0025EA  B4D8               	btfsc	status,2,c
  6812  0025EC  D790               	goto	l870
  6813  0025EE                     u7290:
  6814                           
  6815                           ;pff.c: 533: return res;
  6816                           
  6817                           ; BSR set to: 0
  6818  0025EE  0100               	movlb	0	; () banked
  6819  0025F0  51AC               	movf	dir_find@res& (0+255),w,b
  6820  0025F2  0012               	return	
  6821  0025F4                     __end_of_dir_find:
  6822                           	opt stack 0
  6823                           tosu	equ	0xFFF
  6824                           tosh	equ	0xFFE
  6825                           tosl	equ	0xFFD
  6826                           pclath	equ	0xFFA
  6827                           tblptru	equ	0xFF8
  6828                           tblptrh	equ	0xFF7
  6829                           tblptrl	equ	0xFF6
  6830                           tablat	equ	0xFF5
  6831                           prodh	equ	0xFF4
  6832                           prodl	equ	0xFF3
  6833                           intcon	equ	0xFF2
  6834                           intcon2	equ	0xFF1
  6835                           intcon3	equ	0xFF0
  6836                           postinc0	equ	0xFEE
  6837                           wreg	equ	0xFE8
  6838                           indf1	equ	0xFE7
  6839                           postinc1	equ	0xFE6
  6840                           postdec1	equ	0xFE5
  6841                           fsr1h	equ	0xFE2
  6842                           fsr1l	equ	0xFE1
  6843                           indf2	equ	0xFDF
  6844                           postinc2	equ	0xFDE
  6845                           postdec2	equ	0xFDD
  6846                           plusw2	equ	0xFDB
  6847                           fsr2h	equ	0xFDA
  6848                           fsr2l	equ	0xFD9
  6849                           status	equ	0xFD8
  6850                           
  6851 ;; *************** function _mem_cmp *****************
  6852 ;; Defined at:
  6853 ;;		line 336 in file "pff.c"
  6854 ;; Parameters:    Size  Location     Type
  6855 ;;  dst             2   25[COMRAM] PTR const void 
  6856 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  6857 ;;  src             2   27[COMRAM] PTR const void 
  6858 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  6859 ;;  cnt             2   29[COMRAM] int 
  6860 ;; Auto vars:     Size  Location     Type
  6861 ;;  r               2   38[COMRAM] int 
  6862 ;;  s               2   36[COMRAM] PTR const unsigned char 
  6863 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  6864 ;;  d               2   34[COMRAM] PTR const unsigned char 
  6865 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  6866 ;; Return value:  Size  Location     Type
  6867 ;;                  2   25[COMRAM] int 
  6868 ;; Registers used:
  6869 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6870 ;; Tracked objects:
  6871 ;;		On entry : 0/0
  6872 ;;		On exit  : 0/0
  6873 ;;		Unchanged: 0/0
  6874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6875 ;;      Params:         6       0       0       0       0       0       0       0       0
  6876 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6877 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6878 ;;      Totals:        15       0       0       0       0       0       0       0       0
  6879 ;;Total ram usage:       15 bytes
  6880 ;; Hardware stack levels used:    1
  6881 ;; Hardware stack levels required when called:    2
  6882 ;; This function calls:
  6883 ;;		Nothing
  6884 ;; This function is called by:
  6885 ;;		_dir_find
  6886 ;; This function uses a non-reentrant model
  6887 ;;
  6888                           
  6889                           	psect	text30
  6890  002C04                     __ptext30:
  6891                           	opt stack 0
  6892  002C04                     _mem_cmp:
  6893                           	opt stack 23
  6894                           
  6895                           ;pff.c: 337: const char *d = (const char *)dst, *s = (const char *)src;
  6896                           
  6897                           ; BSR set to: 0
  6898                           ;incstack = 0
  6899  002C04  C01A  F023         	movff	mem_cmp@dst,mem_cmp@d
  6900  002C08  C01B  F024         	movff	mem_cmp@dst+1,mem_cmp@d+1
  6901  002C0C  C01C  F025         	movff	mem_cmp@src,mem_cmp@s
  6902  002C10  C01D  F026         	movff	mem_cmp@src+1,mem_cmp@s+1
  6903                           
  6904                           ;pff.c: 338: int r = 0;
  6905  002C14  0E00               	movlw	0
  6906  002C16  6E28               	movwf	mem_cmp@r+1,c
  6907  002C18  0E00               	movlw	0
  6908  002C1A  6E27               	movwf	mem_cmp@r,c
  6909  002C1C  061E               	decf	mem_cmp@cnt,f,c
  6910  002C1E  A0D8               	btfss	status,0,c
  6911  002C20  061F               	decf	mem_cmp@cnt+1,f,c
  6912  002C22  281E               	incf	mem_cmp@cnt,w,c
  6913  002C24  E103               	bnz	u6890
  6914  002C26  281F               	incf	mem_cmp@cnt+1,w,c
  6915  002C28  B4D8               	btfsc	status,2,c
  6916  002C2A  D01F               	goto	u6900
  6917  002C2C                     u6890:
  6918  002C2C  C025  FFD9         	movff	mem_cmp@s,fsr2l
  6919  002C30  C026  FFDA         	movff	mem_cmp@s+1,fsr2h
  6920  002C34  4A25               	infsnz	mem_cmp@s,f,c
  6921  002C36  2A26               	incf	mem_cmp@s+1,f,c
  6922  002C38  50DF               	movf	indf2,w,c
  6923  002C3A  6E20               	movwf	??_mem_cmp& (0+255),c
  6924  002C3C  6A21               	clrf	(??_mem_cmp+1)& (0+255),c
  6925  002C3E  1E20               	comf	??_mem_cmp,f,c
  6926  002C40  1E21               	comf	??_mem_cmp+1,f,c
  6927  002C42  4A20               	infsnz	??_mem_cmp,f,c
  6928  002C44  2A21               	incf	??_mem_cmp+1,f,c
  6929  002C46  C023  FFD9         	movff	mem_cmp@d,fsr2l
  6930  002C4A  C024  FFDA         	movff	mem_cmp@d+1,fsr2h
  6931  002C4E  4A23               	infsnz	mem_cmp@d,f,c
  6932  002C50  2A24               	incf	mem_cmp@d+1,f,c
  6933  002C52  50DF               	movf	indf2,w,c
  6934  002C54  6E22               	movwf	(??_mem_cmp+2)& (0+255),c
  6935  002C56  5022               	movf	??_mem_cmp+2,w,c
  6936  002C58  2420               	addwf	??_mem_cmp,w,c
  6937  002C5A  6E27               	movwf	mem_cmp@r,c
  6938  002C5C  0E00               	movlw	0
  6939  002C5E  2021               	addwfc	??_mem_cmp+1,w,c
  6940  002C60  6E28               	movwf	mem_cmp@r+1,c
  6941  002C62  5027               	movf	mem_cmp@r,w,c
  6942  002C64  1028               	iorwf	mem_cmp@r+1,w,c
  6943  002C66  B4D8               	btfsc	status,2,c
  6944  002C68  D7D9               	goto	l805
  6945  002C6A                     u6900:
  6946                           
  6947                           ;pff.c: 340: return r;
  6948  002C6A  C027  F01A         	movff	mem_cmp@r,?_mem_cmp
  6949  002C6E  C028  F01B         	movff	mem_cmp@r+1,?_mem_cmp+1
  6950  002C72  0012               	return		;funcret
  6951  002C74                     __end_of_mem_cmp:
  6952                           	opt stack 0
  6953                           tosu	equ	0xFFF
  6954                           tosh	equ	0xFFE
  6955                           tosl	equ	0xFFD
  6956                           pclath	equ	0xFFA
  6957                           tblptru	equ	0xFF8
  6958                           tblptrh	equ	0xFF7
  6959                           tblptrl	equ	0xFF6
  6960                           tablat	equ	0xFF5
  6961                           prodh	equ	0xFF4
  6962                           prodl	equ	0xFF3
  6963                           intcon	equ	0xFF2
  6964                           intcon2	equ	0xFF1
  6965                           intcon3	equ	0xFF0
  6966                           postinc0	equ	0xFEE
  6967                           wreg	equ	0xFE8
  6968                           indf1	equ	0xFE7
  6969                           postinc1	equ	0xFE6
  6970                           postdec1	equ	0xFE5
  6971                           fsr1h	equ	0xFE2
  6972                           fsr1l	equ	0xFE1
  6973                           indf2	equ	0xFDF
  6974                           postinc2	equ	0xFDE
  6975                           postdec2	equ	0xFDD
  6976                           plusw2	equ	0xFDB
  6977                           fsr2h	equ	0xFDA
  6978                           fsr2l	equ	0xFD9
  6979                           status	equ	0xFD8
  6980                           
  6981 ;; *************** function _dir_rewind *****************
  6982 ;; Defined at:
  6983 ;;		line 437 in file "pff.c"
  6984 ;; Parameters:    Size  Location     Type
  6985 ;;  dj              2    5[BANK0 ] PTR struct .
  6986 ;;		 -> pf_open@dj(16), 
  6987 ;; Auto vars:     Size  Location     Type
  6988 ;;  clst            4   17[BANK0 ] unsigned long 
  6989 ;;  fs              2   15[BANK0 ] PTR struct .
  6990 ;;		 -> NULL(0), SDCard@fs(42), 
  6991 ;; Return value:  Size  Location     Type
  6992 ;;                  1    wreg      enum E43
  6993 ;; Registers used:
  6994 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6995 ;; Tracked objects:
  6996 ;;		On entry : 0/0
  6997 ;;		On exit  : 0/0
  6998 ;;		Unchanged: 0/0
  6999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7000 ;;      Params:         0       2       0       0       0       0       0       0       0
  7001 ;;      Locals:         0      10       0       0       0       0       0       0       0
  7002 ;;      Temps:          0       4       0       0       0       0       0       0       0
  7003 ;;      Totals:         0      16       0       0       0       0       0       0       0
  7004 ;;Total ram usage:       16 bytes
  7005 ;; Hardware stack levels used:    1
  7006 ;; Hardware stack levels required when called:    4
  7007 ;; This function calls:
  7008 ;;		_clust2sect
  7009 ;; This function is called by:
  7010 ;;		_dir_find
  7011 ;;		_follow_path
  7012 ;;		_pf_opendir
  7013 ;;		_pf_readdir
  7014 ;; This function uses a non-reentrant model
  7015 ;;
  7016                           
  7017                           	psect	text31
  7018  002196                     __ptext31:
  7019                           	opt stack 0
  7020  002196                     _dir_rewind:
  7021                           	opt stack 22
  7022                           
  7023                           ;pff.c: 441: DWORD clst;
  7024                           ;pff.c: 442: FATFS *fs = FatFs;
  7025                           
  7026                           ;incstack = 0
  7027  002196  C035  F06F         	movff	_FatFs,dir_rewind@fs
  7028  00219A  C036  F070         	movff	_FatFs+1,dir_rewind@fs+1
  7029                           
  7030                           ;pff.c: 445: dj->index = 0;
  7031  00219E  C065  FFD9         	movff	dir_rewind@dj,fsr2l
  7032  0021A2  C066  FFDA         	movff	dir_rewind@dj+1,fsr2h
  7033  0021A6  0E00               	movlw	0
  7034  0021A8  6EDE               	movwf	postinc2,c
  7035  0021AA  0E00               	movlw	0
  7036  0021AC  6EDD               	movwf	postdec2,c
  7037                           
  7038                           ;pff.c: 446: clst = dj->sclust;
  7039  0021AE  0100               	movlb	0	; () banked
  7040  0021B0  EE20 F004          	lfsr	2,4
  7041  0021B4  5165               	movf	dir_rewind@dj& (0+255),w,b
  7042  0021B6  26D9               	addwf	fsr2l,f,c
  7043  0021B8  5166               	movf	(dir_rewind@dj+1)& (0+255),w,b
  7044  0021BA  22DA               	addwfc	fsr2h,f,c
  7045  0021BC  CFDE F071          	movff	postinc2,dir_rewind@clst
  7046  0021C0  CFDE F072          	movff	postinc2,dir_rewind@clst+1
  7047  0021C4  CFDE F073          	movff	postinc2,dir_rewind@clst+2
  7048  0021C8  CFDE F074          	movff	postinc2,dir_rewind@clst+3
  7049                           
  7050                           ; BSR set to: 0
  7051                           ;pff.c: 447: if (clst == 1 || clst >= fs->n_fatent)
  7052  0021CC  0571               	decf	dir_rewind@clst& (0+255),w,b
  7053  0021CE  1172               	iorwf	(dir_rewind@clst+1)& (0+255),w,b
  7054  0021D0  1173               	iorwf	(dir_rewind@clst+2)& (0+255),w,b
  7055  0021D2  1174               	iorwf	(dir_rewind@clst+3)& (0+255),w,b
  7056  0021D4  B4D8               	btfsc	status,2,c
  7057  0021D6  D010               	goto	u6920
  7058                           
  7059                           ; BSR set to: 0
  7060  0021D8  EE20 F006          	lfsr	2,6
  7061  0021DC  516F               	movf	dir_rewind@fs& (0+255),w,b
  7062  0021DE  26D9               	addwf	fsr2l,f,c
  7063  0021E0  5170               	movf	(dir_rewind@fs+1)& (0+255),w,b
  7064  0021E2  22DA               	addwfc	fsr2h,f,c
  7065  0021E4  50DE               	movf	postinc2,w,c
  7066  0021E6  5D71               	subwf	dir_rewind@clst& (0+255),w,b
  7067  0021E8  50DE               	movf	postinc2,w,c
  7068  0021EA  5972               	subwfb	(dir_rewind@clst+1)& (0+255),w,b
  7069  0021EC  50DE               	movf	postinc2,w,c
  7070  0021EE  5973               	subwfb	(dir_rewind@clst+2)& (0+255),w,b
  7071  0021F0  50DE               	movf	postinc2,w,c
  7072  0021F2  5974               	subwfb	(dir_rewind@clst+3)& (0+255),w,b
  7073  0021F4  A0D8               	btfss	status,0,c
  7074  0021F6  D002               	goto	l844
  7075  0021F8                     u6920:
  7076                           
  7077                           ; BSR set to: 0
  7078                           ;pff.c: 448: return FR_DISK_ERR;
  7079                           
  7080                           ; BSR set to: 0
  7081  0021F8  0E01               	movlw	1
  7082                           
  7083                           ; BSR set to: 0
  7084  0021FA  0012               	return	
  7085  0021FC                     l844:
  7086                           
  7087                           ; BSR set to: 0
  7088                           
  7089                           ; BSR set to: 0
  7090  0021FC  5171               	movf	dir_rewind@clst& (0+255),w,b
  7091  0021FE  1172               	iorwf	(dir_rewind@clst+1)& (0+255),w,b
  7092  002200  1173               	iorwf	(dir_rewind@clst+2)& (0+255),w,b
  7093  002202  1174               	iorwf	(dir_rewind@clst+3)& (0+255),w,b
  7094  002204  A4D8               	btfss	status,2,c
  7095  002206  D016               	goto	l848
  7096                           
  7097                           ; BSR set to: 0
  7098  002208  C06F  FFD9         	movff	dir_rewind@fs,fsr2l
  7099  00220C  C070  FFDA         	movff	dir_rewind@fs+1,fsr2h
  7100  002210  0E03               	movlw	3
  7101  002212  18DE               	xorwf	postinc2,w,c
  7102  002214  A4D8               	btfss	status,2,c
  7103  002216  D00E               	goto	l848
  7104                           
  7105                           ; BSR set to: 0
  7106                           ;pff.c: 450: clst = (DWORD)fs->dirbase;
  7107                           
  7108                           ; BSR set to: 0
  7109  002218  EE20 F00E          	lfsr	2,14
  7110  00221C  516F               	movf	dir_rewind@fs& (0+255),w,b
  7111  00221E  26D9               	addwf	fsr2l,f,c
  7112  002220  5170               	movf	(dir_rewind@fs+1)& (0+255),w,b
  7113  002222  22DA               	addwfc	fsr2h,f,c
  7114  002224  CFDE F071          	movff	postinc2,dir_rewind@clst
  7115  002228  CFDE F072          	movff	postinc2,dir_rewind@clst+1
  7116  00222C  CFDE F073          	movff	postinc2,dir_rewind@clst+2
  7117  002230  CFDE F074          	movff	postinc2,dir_rewind@clst+3
  7118  002234                     l848:
  7119                           
  7120                           ; BSR set to: 0
  7121                           ;pff.c: 452: dj->sect = (0 || clst) ? clust2sect(clst) : fs->dirbase;
  7122  002234  EE20 F008          	lfsr	2,8
  7123  002238  5165               	movf	dir_rewind@dj& (0+255),w,b
  7124  00223A  26D9               	addwf	fsr2l,f,c
  7125  00223C  5166               	movf	(dir_rewind@dj+1)& (0+255),w,b
  7126  00223E  22DA               	addwfc	fsr2h,f,c
  7127  002240  C071  FFDE         	movff	dir_rewind@clst,postinc2
  7128  002244  C072  FFDE         	movff	dir_rewind@clst+1,postinc2
  7129  002248  C073  FFDE         	movff	dir_rewind@clst+2,postinc2
  7130  00224C  C074  FFDE         	movff	dir_rewind@clst+3,postinc2
  7131                           
  7132                           ; BSR set to: 0
  7133  002250  5171               	movf	dir_rewind@clst& (0+255),w,b
  7134  002252  1172               	iorwf	(dir_rewind@clst+1)& (0+255),w,b
  7135  002254  1173               	iorwf	(dir_rewind@clst+2)& (0+255),w,b
  7136  002256  1174               	iorwf	(dir_rewind@clst+3)& (0+255),w,b
  7137  002258  A4D8               	btfss	status,2,c
  7138  00225A  D00F               	goto	l852
  7139                           
  7140                           ; BSR set to: 0
  7141  00225C  EE20 F00E          	lfsr	2,14
  7142  002260  516F               	movf	dir_rewind@fs& (0+255),w,b
  7143  002262  26D9               	addwf	fsr2l,f,c
  7144  002264  5170               	movf	(dir_rewind@fs+1)& (0+255),w,b
  7145  002266  22DA               	addwfc	fsr2h,f,c
  7146  002268  CFDE F06B          	movff	postinc2,_dir_rewind$1906
  7147  00226C  CFDE F06C          	movff	postinc2,_dir_rewind$1906+1
  7148  002270  CFDE F06D          	movff	postinc2,_dir_rewind$1906+2
  7149  002274  CFDE F06E          	movff	postinc2,_dir_rewind$1906+3
  7150  002278  D012               	goto	l854
  7151  00227A                     l852:
  7152                           
  7153                           ; BSR set to: 0
  7154                           
  7155                           ; BSR set to: 0
  7156  00227A  C071  F026         	movff	dir_rewind@clst,clust2sect@clst
  7157  00227E  C072  F027         	movff	dir_rewind@clst+1,clust2sect@clst+1
  7158  002282  C073  F028         	movff	dir_rewind@clst+2,clust2sect@clst+2
  7159  002286  C074  F029         	movff	dir_rewind@clst+3,clust2sect@clst+3
  7160  00228A  ECC4  F013         	call	_clust2sect	;wreg free
  7161  00228E  C026  F06B         	movff	?_clust2sect,_dir_rewind$1906
  7162  002292  C027  F06C         	movff	?_clust2sect+1,_dir_rewind$1906+1
  7163  002296  C028  F06D         	movff	?_clust2sect+2,_dir_rewind$1906+2
  7164  00229A  C029  F06E         	movff	?_clust2sect+3,_dir_rewind$1906+3
  7165  00229E                     l854:
  7166  00229E  0100               	movlb	0	; () banked
  7167  0022A0  EE20 F00C          	lfsr	2,12
  7168  0022A4  5165               	movf	dir_rewind@dj& (0+255),w,b
  7169  0022A6  26D9               	addwf	fsr2l,f,c
  7170  0022A8  5166               	movf	(dir_rewind@dj+1)& (0+255),w,b
  7171  0022AA  22DA               	addwfc	fsr2h,f,c
  7172  0022AC  C06B  FFDE         	movff	_dir_rewind$1906,postinc2
  7173  0022B0  C06C  FFDE         	movff	_dir_rewind$1906+1,postinc2
  7174  0022B4  C06D  FFDE         	movff	_dir_rewind$1906+2,postinc2
  7175  0022B8  C06E  FFDE         	movff	_dir_rewind$1906+3,postinc2
  7176                           
  7177                           ; BSR set to: 0
  7178                           ;pff.c: 454: return FR_OK;
  7179  0022BC  0E00               	movlw	0
  7180  0022BE  0012               	return	
  7181  0022C0                     __end_of_dir_rewind:
  7182                           	opt stack 0
  7183                           tosu	equ	0xFFF
  7184                           tosh	equ	0xFFE
  7185                           tosl	equ	0xFFD
  7186                           pclath	equ	0xFFA
  7187                           tblptru	equ	0xFF8
  7188                           tblptrh	equ	0xFF7
  7189                           tblptrl	equ	0xFF6
  7190                           tablat	equ	0xFF5
  7191                           prodh	equ	0xFF4
  7192                           prodl	equ	0xFF3
  7193                           intcon	equ	0xFF2
  7194                           intcon2	equ	0xFF1
  7195                           intcon3	equ	0xFF0
  7196                           postinc0	equ	0xFEE
  7197                           wreg	equ	0xFE8
  7198                           indf1	equ	0xFE7
  7199                           postinc1	equ	0xFE6
  7200                           postdec1	equ	0xFE5
  7201                           fsr1h	equ	0xFE2
  7202                           fsr1l	equ	0xFE1
  7203                           indf2	equ	0xFDF
  7204                           postinc2	equ	0xFDE
  7205                           postdec2	equ	0xFDD
  7206                           plusw2	equ	0xFDB
  7207                           fsr2h	equ	0xFDA
  7208                           fsr2l	equ	0xFD9
  7209                           status	equ	0xFD8
  7210                           
  7211 ;; *************** function _dir_next *****************
  7212 ;; Defined at:
  7213 ;;		line 465 in file "pff.c"
  7214 ;; Parameters:    Size  Location     Type
  7215 ;;  dj              2   52[BANK0 ] PTR struct .
  7216 ;;		 -> pf_open@dj(16), 
  7217 ;; Auto vars:     Size  Location     Type
  7218 ;;  clst            4   63[BANK0 ] unsigned long 
  7219 ;;  i               2   67[BANK0 ] unsigned short 
  7220 ;;  fs              2   61[BANK0 ] PTR struct .
  7221 ;;		 -> NULL(0), SDCard@fs(42), 
  7222 ;; Return value:  Size  Location     Type
  7223 ;;                  1    wreg      enum E43
  7224 ;; Registers used:
  7225 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7226 ;; Tracked objects:
  7227 ;;		On entry : 0/0
  7228 ;;		On exit  : 0/0
  7229 ;;		Unchanged: 0/0
  7230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7231 ;;      Params:         0       2       0       0       0       0       0       0       0
  7232 ;;      Locals:         0       8       0       0       0       0       0       0       0
  7233 ;;      Temps:          0       7       0       0       0       0       0       0       0
  7234 ;;      Totals:         0      17       0       0       0       0       0       0       0
  7235 ;;Total ram usage:       17 bytes
  7236 ;; Hardware stack levels used:    1
  7237 ;; Hardware stack levels required when called:    9
  7238 ;; This function calls:
  7239 ;;		_clust2sect
  7240 ;;		_get_fat
  7241 ;; This function is called by:
  7242 ;;		_dir_find
  7243 ;;		_dir_read
  7244 ;;		_pf_readdir
  7245 ;; This function uses a non-reentrant model
  7246 ;;
  7247                           
  7248                           	psect	text32
  7249  00181A                     __ptext32:
  7250                           	opt stack 0
  7251  00181A                     _dir_next:
  7252                           	opt stack 16
  7253                           
  7254                           ;pff.c: 469: DWORD clst;
  7255                           ;pff.c: 470: WORD i;
  7256                           ;pff.c: 471: FATFS *fs = FatFs;
  7257                           
  7258                           ; BSR set to: 0
  7259                           ;incstack = 0
  7260  00181A  C035  F09D         	movff	_FatFs,dir_next@fs
  7261  00181E  C036  F09E         	movff	_FatFs+1,dir_next@fs+1
  7262                           
  7263                           ;pff.c: 474: i = dj->index + 1;
  7264  001822  C094  FFD9         	movff	dir_next@dj,fsr2l
  7265  001826  C095  FFDA         	movff	dir_next@dj+1,fsr2h
  7266  00182A  CFDE F096          	movff	postinc2,??_dir_next
  7267  00182E  CFDD F097          	movff	postdec2,??_dir_next+1
  7268  001832  0E01               	movlw	1
  7269  001834  0100               	movlb	0	; () banked
  7270  001836  2596               	addwf	??_dir_next& (0+255),w,b
  7271  001838  6FA3               	movwf	dir_next@i& (0+255),b
  7272  00183A  0E00               	movlw	0
  7273  00183C  2197               	addwfc	(??_dir_next+1)& (0+255),w,b
  7274  00183E  6FA4               	movwf	(dir_next@i+1)& (0+255),b
  7275                           
  7276                           ; BSR set to: 0
  7277                           ;pff.c: 475: if (!i || !dj->sect)
  7278  001840  51A3               	movf	dir_next@i& (0+255),w,b
  7279  001842  11A4               	iorwf	(dir_next@i+1)& (0+255),w,b
  7280  001844  B4D8               	btfsc	status,2,c
  7281  001846  D00C               	goto	u6970
  7282                           
  7283                           ; BSR set to: 0
  7284  001848  EE20 F00C          	lfsr	2,12
  7285  00184C  5194               	movf	dir_next@dj& (0+255),w,b
  7286  00184E  26D9               	addwf	fsr2l,f,c
  7287  001850  5195               	movf	(dir_next@dj+1)& (0+255),w,b
  7288  001852  22DA               	addwfc	fsr2h,f,c
  7289  001854  50DE               	movf	postinc2,w,c
  7290  001856  10DE               	iorwf	postinc2,w,c
  7291  001858  10DE               	iorwf	postinc2,w,c
  7292  00185A  10DE               	iorwf	postinc2,w,c
  7293  00185C  A4D8               	btfss	status,2,c
  7294  00185E  D002               	goto	l857
  7295  001860                     u6970:
  7296                           
  7297                           ; BSR set to: 0
  7298                           ;pff.c: 476: return FR_NO_FILE;
  7299                           
  7300                           ; BSR set to: 0
  7301  001860  0E03               	movlw	3
  7302                           
  7303                           ; BSR set to: 0
  7304  001862  0012               	return	
  7305  001864                     l857:
  7306                           
  7307                           ; BSR set to: 0
  7308                           ;pff.c: 478: if (!(i % 16)) {
  7309                           
  7310                           ; BSR set to: 0
  7311  001864  0E0F               	movlw	15
  7312  001866  15A3               	andwf	dir_next@i& (0+255),w,b
  7313  001868  6F96               	movwf	??_dir_next& (0+255),b
  7314  00186A  0E00               	movlw	0
  7315  00186C  15A4               	andwf	(dir_next@i+1)& (0+255),w,b
  7316  00186E  6F97               	movwf	(??_dir_next+1)& (0+255),b
  7317  001870  5196               	movf	??_dir_next& (0+255),w,b
  7318  001872  1197               	iorwf	(??_dir_next+1)& (0+255),w,b
  7319  001874  A4D8               	btfss	status,2,c
  7320  001876  D0A5               	goto	l865
  7321                           
  7322                           ; BSR set to: 0
  7323                           ;pff.c: 479: dj->sect++;
  7324  001878  EE20 F00C          	lfsr	2,12
  7325  00187C  5194               	movf	dir_next@dj& (0+255),w,b
  7326  00187E  26D9               	addwf	fsr2l,f,c
  7327  001880  5195               	movf	(dir_next@dj+1)& (0+255),w,b
  7328  001882  22DA               	addwfc	fsr2h,f,c
  7329  001884  2ADE               	incf	postinc2,f,c
  7330  001886  0E00               	movlw	0
  7331  001888  22DE               	addwfc	postinc2,f,c
  7332  00188A  22DE               	addwfc	postinc2,f,c
  7333  00188C  22DE               	addwfc	postinc2,f,c
  7334                           
  7335                           ;pff.c: 481: if (dj->clust == 0) {
  7336  00188E  EE20 F008          	lfsr	2,8
  7337  001892  5194               	movf	dir_next@dj& (0+255),w,b
  7338  001894  26D9               	addwf	fsr2l,f,c
  7339  001896  5195               	movf	(dir_next@dj+1)& (0+255),w,b
  7340  001898  22DA               	addwfc	fsr2h,f,c
  7341  00189A  50DE               	movf	postinc2,w,c
  7342  00189C  10DE               	iorwf	postinc2,w,c
  7343  00189E  10DE               	iorwf	postinc2,w,c
  7344  0018A0  10DE               	iorwf	postinc2,w,c
  7345  0018A2  A4D8               	btfss	status,2,c
  7346  0018A4  D00E               	goto	l862
  7347                           
  7348                           ; BSR set to: 0
  7349                           ;pff.c: 482: if (i >= fs->n_rootdir)
  7350  0018A6  EE20 F004          	lfsr	2,4
  7351  0018AA  519D               	movf	dir_next@fs& (0+255),w,b
  7352  0018AC  26D9               	addwf	fsr2l,f,c
  7353  0018AE  519E               	movf	(dir_next@fs+1)& (0+255),w,b
  7354  0018B0  22DA               	addwfc	fsr2h,f,c
  7355  0018B2  50DE               	movf	postinc2,w,c
  7356  0018B4  5DA3               	subwf	dir_next@i& (0+255),w,b
  7357  0018B6  50DE               	movf	postinc2,w,c
  7358  0018B8  59A4               	subwfb	(dir_next@i+1)& (0+255),w,b
  7359  0018BA  A0D8               	btfss	status,0,c
  7360  0018BC  D082               	goto	l865
  7361                           
  7362                           ; BSR set to: 0
  7363                           ;pff.c: 483: return FR_NO_FILE;
  7364  0018BE  0E03               	movlw	3
  7365                           
  7366                           ; BSR set to: 0
  7367  0018C0  0012               	return	
  7368  0018C2                     l862:
  7369                           
  7370                           ; BSR set to: 0
  7371                           ;pff.c: 485: else {
  7372                           ;pff.c: 486: if (((i / 16) & (fs->csize - 1)) == 0) {
  7373                           
  7374                           ; BSR set to: 0
  7375  0018C2  C0A3  F096         	movff	dir_next@i,??_dir_next
  7376  0018C6  C0A4  F097         	movff	dir_next@i+1,??_dir_next+1
  7377  0018CA  0E04               	movlw	4
  7378  0018CC  6F98               	movwf	(??_dir_next+2)& (0+255),b
  7379  0018CE                     u7015:
  7380  0018CE  90D8               	bcf	status,0,c
  7381  0018D0  3397               	rrcf	(??_dir_next+1)& (0+255),f,b
  7382  0018D2  3396               	rrcf	??_dir_next& (0+255),f,b
  7383  0018D4  2F98               	decfsz	(??_dir_next+2)& (0+255),f,b
  7384  0018D6  D7FB               	goto	u7015
  7385  0018D8  0EFF               	movlw	255
  7386  0018DA  6F99               	movwf	(??_dir_next+3)& (0+255),b
  7387  0018DC  0EFF               	movlw	255
  7388  0018DE  6F9A               	movwf	(??_dir_next+4)& (0+255),b
  7389  0018E0  EE20 F002          	lfsr	2,2
  7390  0018E4  519D               	movf	dir_next@fs& (0+255),w,b
  7391  0018E6  26D9               	addwf	fsr2l,f,c
  7392  0018E8  519E               	movf	(dir_next@fs+1)& (0+255),w,b
  7393  0018EA  22DA               	addwfc	fsr2h,f,c
  7394  0018EC  50DF               	movf	indf2,w,c
  7395  0018EE  6F9B               	movwf	(??_dir_next+5)& (0+255),b
  7396  0018F0  6B9C               	clrf	(??_dir_next+6)& (0+255),b
  7397  0018F2  5199               	movf	(??_dir_next+3)& (0+255),w,b
  7398  0018F4  279B               	addwf	(??_dir_next+5)& (0+255),f,b
  7399  0018F6  519A               	movf	(??_dir_next+4)& (0+255),w,b
  7400  0018F8  239C               	addwfc	(??_dir_next+6)& (0+255),f,b
  7401  0018FA  5196               	movf	??_dir_next& (0+255),w,b
  7402  0018FC  179B               	andwf	(??_dir_next+5)& (0+255),f,b
  7403  0018FE  5197               	movf	(??_dir_next+1)& (0+255),w,b
  7404  001900  179C               	andwf	(??_dir_next+6)& (0+255),f,b
  7405  001902  519B               	movf	(??_dir_next+5)& (0+255),w,b
  7406  001904  119C               	iorwf	(??_dir_next+6)& (0+255),w,b
  7407  001906  A4D8               	btfss	status,2,c
  7408  001908  D05C               	goto	l865
  7409                           
  7410                           ; BSR set to: 0
  7411                           ;pff.c: 487: clst = get_fat(dj->clust);
  7412  00190A  EE20 F008          	lfsr	2,8
  7413  00190E  5194               	movf	dir_next@dj& (0+255),w,b
  7414  001910  26D9               	addwf	fsr2l,f,c
  7415  001912  5195               	movf	(dir_next@dj+1)& (0+255),w,b
  7416  001914  22DA               	addwfc	fsr2h,f,c
  7417  001916  CFDE F06C          	movff	postinc2,get_fat@clst
  7418  00191A  CFDE F06D          	movff	postinc2,get_fat@clst+1
  7419  00191E  CFDE F06E          	movff	postinc2,get_fat@clst+2
  7420  001922  CFDE F06F          	movff	postinc2,get_fat@clst+3
  7421  001926  EC82  F005         	call	_get_fat	;wreg free
  7422  00192A  C06C  F09F         	movff	?_get_fat,dir_next@clst
  7423  00192E  C06D  F0A0         	movff	?_get_fat+1,dir_next@clst+1
  7424  001932  C06E  F0A1         	movff	?_get_fat+2,dir_next@clst+2
  7425  001936  C06F  F0A2         	movff	?_get_fat+3,dir_next@clst+3
  7426                           
  7427                           ;pff.c: 488: if (clst <= 1) return FR_DISK_ERR;
  7428  00193A  0100               	movlb	0	; () banked
  7429  00193C  51A2               	movf	(dir_next@clst+3)& (0+255),w,b
  7430  00193E  11A1               	iorwf	(dir_next@clst+2)& (0+255),w,b
  7431  001940  11A0               	iorwf	(dir_next@clst+1)& (0+255),w,b
  7432  001942  E106               	bnz	l6282
  7433  001944  0E02               	movlw	2
  7434  001946  5D9F               	subwf	dir_next@clst& (0+255),w,b
  7435  001948  B0D8               	btfsc	status,0,c
  7436  00194A  D002               	goto	l866
  7437                           
  7438                           ; BSR set to: 0
  7439  00194C  0E01               	movlw	1
  7440                           
  7441                           ; BSR set to: 0
  7442  00194E  0012               	return	
  7443  001950                     l866:
  7444  001950                     l6282:
  7445                           
  7446                           ; BSR set to: 0
  7447                           ;pff.c: 489: if (clst >= fs->n_fatent)
  7448  001950  EE20 F006          	lfsr	2,6
  7449  001954  519D               	movf	dir_next@fs& (0+255),w,b
  7450  001956  26D9               	addwf	fsr2l,f,c
  7451  001958  519E               	movf	(dir_next@fs+1)& (0+255),w,b
  7452  00195A  22DA               	addwfc	fsr2h,f,c
  7453  00195C  50DE               	movf	postinc2,w,c
  7454  00195E  5D9F               	subwf	dir_next@clst& (0+255),w,b
  7455  001960  50DE               	movf	postinc2,w,c
  7456  001962  59A0               	subwfb	(dir_next@clst+1)& (0+255),w,b
  7457  001964  50DE               	movf	postinc2,w,c
  7458  001966  59A1               	subwfb	(dir_next@clst+2)& (0+255),w,b
  7459  001968  50DE               	movf	postinc2,w,c
  7460  00196A  59A2               	subwfb	(dir_next@clst+3)& (0+255),w,b
  7461  00196C  A0D8               	btfss	status,0,c
  7462  00196E  D002               	goto	l867
  7463                           
  7464                           ; BSR set to: 0
  7465                           ;pff.c: 490: return FR_NO_FILE;
  7466  001970  0E03               	movlw	3
  7467                           
  7468                           ; BSR set to: 0
  7469  001972  0012               	return	
  7470  001974                     l867:
  7471                           
  7472                           ; BSR set to: 0
  7473                           ;pff.c: 491: dj->clust = clst;
  7474                           
  7475                           ; BSR set to: 0
  7476  001974  EE20 F008          	lfsr	2,8
  7477  001978  5194               	movf	dir_next@dj& (0+255),w,b
  7478  00197A  26D9               	addwf	fsr2l,f,c
  7479  00197C  5195               	movf	(dir_next@dj+1)& (0+255),w,b
  7480  00197E  22DA               	addwfc	fsr2h,f,c
  7481  001980  C09F  FFDE         	movff	dir_next@clst,postinc2
  7482  001984  C0A0  FFDE         	movff	dir_next@clst+1,postinc2
  7483  001988  C0A1  FFDE         	movff	dir_next@clst+2,postinc2
  7484  00198C  C0A2  FFDE         	movff	dir_next@clst+3,postinc2
  7485                           
  7486                           ; BSR set to: 0
  7487                           ;pff.c: 492: dj->sect = clust2sect(clst);
  7488  001990  C09F  F026         	movff	dir_next@clst,clust2sect@clst
  7489  001994  C0A0  F027         	movff	dir_next@clst+1,clust2sect@clst+1
  7490  001998  C0A1  F028         	movff	dir_next@clst+2,clust2sect@clst+2
  7491  00199C  C0A2  F029         	movff	dir_next@clst+3,clust2sect@clst+3
  7492  0019A0  ECC4  F013         	call	_clust2sect	;wreg free
  7493  0019A4  0100               	movlb	0	; () banked
  7494  0019A6  EE20 F00C          	lfsr	2,12
  7495  0019AA  5194               	movf	dir_next@dj& (0+255),w,b
  7496  0019AC  26D9               	addwf	fsr2l,f,c
  7497  0019AE  5195               	movf	(dir_next@dj+1)& (0+255),w,b
  7498  0019B0  22DA               	addwfc	fsr2h,f,c
  7499  0019B2  C026  FFDE         	movff	?_clust2sect,postinc2
  7500  0019B6  C027  FFDE         	movff	?_clust2sect+1,postinc2
  7501  0019BA  C028  FFDE         	movff	?_clust2sect+2,postinc2
  7502  0019BE  C029  FFDE         	movff	?_clust2sect+3,postinc2
  7503  0019C2                     l865:
  7504                           
  7505                           ; BSR set to: 0
  7506                           ;pff.c: 493: }
  7507                           ;pff.c: 494: }
  7508                           ;pff.c: 495: }
  7509                           ;pff.c: 497: dj->index = i;
  7510                           
  7511                           ; BSR set to: 0
  7512                           
  7513                           ; BSR set to: 0
  7514                           
  7515                           ; BSR set to: 0
  7516  0019C2  C094  FFD9         	movff	dir_next@dj,fsr2l
  7517  0019C6  C095  FFDA         	movff	dir_next@dj+1,fsr2h
  7518  0019CA  C0A3  FFDE         	movff	dir_next@i,postinc2
  7519  0019CE  C0A4  FFDD         	movff	dir_next@i+1,postdec2
  7520                           
  7521                           ; BSR set to: 0
  7522                           ;pff.c: 499: return FR_OK;
  7523  0019D2  0E00               	movlw	0
  7524  0019D4  0012               	return	
  7525  0019D6                     __end_of_dir_next:
  7526                           	opt stack 0
  7527                           tosu	equ	0xFFF
  7528                           tosh	equ	0xFFE
  7529                           tosl	equ	0xFFD
  7530                           pclath	equ	0xFFA
  7531                           tblptru	equ	0xFF8
  7532                           tblptrh	equ	0xFF7
  7533                           tblptrl	equ	0xFF6
  7534                           tablat	equ	0xFF5
  7535                           prodh	equ	0xFF4
  7536                           prodl	equ	0xFF3
  7537                           intcon	equ	0xFF2
  7538                           intcon2	equ	0xFF1
  7539                           intcon3	equ	0xFF0
  7540                           postinc0	equ	0xFEE
  7541                           wreg	equ	0xFE8
  7542                           indf1	equ	0xFE7
  7543                           postinc1	equ	0xFE6
  7544                           postdec1	equ	0xFE5
  7545                           fsr1h	equ	0xFE2
  7546                           fsr1l	equ	0xFE1
  7547                           indf2	equ	0xFDF
  7548                           postinc2	equ	0xFDE
  7549                           postdec2	equ	0xFDD
  7550                           plusw2	equ	0xFDB
  7551                           fsr2h	equ	0xFDA
  7552                           fsr2l	equ	0xFD9
  7553                           status	equ	0xFD8
  7554                           
  7555 ;; *************** function _get_fat *****************
  7556 ;; Defined at:
  7557 ;;		line 350 in file "pff.c"
  7558 ;; Parameters:    Size  Location     Type
  7559 ;;  clst            4   12[BANK0 ] unsigned long 
  7560 ;; Auto vars:     Size  Location     Type
  7561 ;;  bc              2   48[BANK0 ] unsigned int 
  7562 ;;  ofs             2   42[BANK0 ] unsigned int 
  7563 ;;  wc              2   40[BANK0 ] unsigned int 
  7564 ;;  buf             4   44[BANK0 ] unsigned char [4]
  7565 ;;  fs              2   50[BANK0 ] PTR struct .
  7566 ;;		 -> NULL(0), SDCard@fs(42), 
  7567 ;; Return value:  Size  Location     Type
  7568 ;;                  4   12[BANK0 ] unsigned long 
  7569 ;; Registers used:
  7570 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7571 ;; Tracked objects:
  7572 ;;		On entry : 0/0
  7573 ;;		On exit  : 0/0
  7574 ;;		Unchanged: 0/0
  7575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7576 ;;      Params:         0       4       0       0       0       0       0       0       0
  7577 ;;      Locals:         0      14       0       0       0       0       0       0       0
  7578 ;;      Temps:          0      22       0       0       0       0       0       0       0
  7579 ;;      Totals:         0      40       0       0       0       0       0       0       0
  7580 ;;Total ram usage:       40 bytes
  7581 ;; Hardware stack levels used:    1
  7582 ;; Hardware stack levels required when called:    8
  7583 ;; This function calls:
  7584 ;;		_disk_readp
  7585 ;; This function is called by:
  7586 ;;		_dir_next
  7587 ;;		_pf_read
  7588 ;;		_pf_write
  7589 ;;		_pf_lseek
  7590 ;; This function uses a non-reentrant model
  7591 ;;
  7592                           
  7593                           	psect	text33
  7594  000B04                     __ptext33:
  7595                           	opt stack 0
  7596  000B04                     _get_fat:
  7597                           	opt stack 19
  7598                           
  7599                           ;pff.c: 354: BYTE buf[4];
  7600                           ;pff.c: 355: FATFS *fs = FatFs;
  7601                           
  7602                           ; BSR set to: 0
  7603                           ;incstack = 0
  7604  000B04  C035  F092         	movff	_FatFs,get_fat@fs
  7605  000B08  C036  F093         	movff	_FatFs+1,get_fat@fs+1
  7606                           
  7607                           ;pff.c: 357: if (clst < 2 || clst >= fs->n_fatent)
  7608  000B0C  0100               	movlb	0	; () banked
  7609  000B0E  516F               	movf	(get_fat@clst+3)& (0+255),w,b
  7610  000B10  116E               	iorwf	(get_fat@clst+2)& (0+255),w,b
  7611  000B12  116D               	iorwf	(get_fat@clst+1)& (0+255),w,b
  7612  000B14  E104               	bnz	u6750
  7613  000B16  0E02               	movlw	2
  7614  000B18  5D6C               	subwf	get_fat@clst& (0+255),w,b
  7615  000B1A  A0D8               	btfss	status,0,c
  7616  000B1C  D010               	goto	u6760
  7617  000B1E                     u6750:
  7618                           
  7619                           ; BSR set to: 0
  7620  000B1E  EE20 F006          	lfsr	2,6
  7621  000B22  5192               	movf	get_fat@fs& (0+255),w,b
  7622  000B24  26D9               	addwf	fsr2l,f,c
  7623  000B26  5193               	movf	(get_fat@fs+1)& (0+255),w,b
  7624  000B28  22DA               	addwfc	fsr2h,f,c
  7625  000B2A  50DE               	movf	postinc2,w,c
  7626  000B2C  5D6C               	subwf	get_fat@clst& (0+255),w,b
  7627  000B2E  50DE               	movf	postinc2,w,c
  7628  000B30  596D               	subwfb	(get_fat@clst+1)& (0+255),w,b
  7629  000B32  50DE               	movf	postinc2,w,c
  7630  000B34  596E               	subwfb	(get_fat@clst+2)& (0+255),w,b
  7631  000B36  50DE               	movf	postinc2,w,c
  7632  000B38  596F               	subwfb	(get_fat@clst+3)& (0+255),w,b
  7633  000B3A  A0D8               	btfss	status,0,c
  7634  000B3C  D1BD               	goto	l816
  7635  000B3E                     u6760:
  7636                           
  7637                           ; BSR set to: 0
  7638                           ;pff.c: 358: return 1;
  7639                           
  7640                           ; BSR set to: 0
  7641  000B3E  0E01               	movlw	1
  7642  000B40  6F6C               	movwf	?_get_fat& (0+255),b
  7643  000B42  0E00               	movlw	0
  7644  000B44  6F6D               	movwf	(?_get_fat+1)& (0+255),b
  7645  000B46  0E00               	movlw	0
  7646  000B48  6F6E               	movwf	(?_get_fat+2)& (0+255),b
  7647  000B4A  0E00               	movlw	0
  7648  000B4C  6F6F               	movwf	(?_get_fat+3)& (0+255),b
  7649                           
  7650                           ; BSR set to: 0
  7651  000B4E  0012               	return	
  7652  000B50                     l817:
  7653                           
  7654                           ; BSR set to: 0
  7655                           ;pff.c: 363: UINT wc, bc, ofs;
  7656                           ;pff.c: 365: bc = (UINT)clst; bc += bc / 2;
  7657  000B50  C06C  F090         	movff	get_fat@clst,get_fat@bc
  7658  000B54  C06D  F091         	movff	get_fat@clst+1,get_fat@bc+1
  7659                           
  7660                           ; BSR set to: 0
  7661  000B58  90D8               	bcf	status,0,c
  7662  000B5A  3191               	rrcf	(get_fat@bc+1)& (0+255),w,b
  7663  000B5C  6F71               	movwf	(??_get_fat+1)& (0+255),b
  7664  000B5E  3190               	rrcf	get_fat@bc& (0+255),w,b
  7665  000B60  6F70               	movwf	??_get_fat& (0+255),b
  7666  000B62  5170               	movf	??_get_fat& (0+255),w,b
  7667  000B64  2790               	addwf	get_fat@bc& (0+255),f,b
  7668  000B66  5171               	movf	(??_get_fat+1)& (0+255),w,b
  7669  000B68  2391               	addwfc	(get_fat@bc+1)& (0+255),f,b
  7670                           
  7671                           ;pff.c: 366: ofs = bc % 512; bc /= 512;
  7672  000B6A  0EFF               	movlw	255
  7673  000B6C  1590               	andwf	get_fat@bc& (0+255),w,b
  7674  000B6E  6F8A               	movwf	get_fat@ofs& (0+255),b
  7675  000B70  0E01               	movlw	1
  7676  000B72  1591               	andwf	(get_fat@bc+1)& (0+255),w,b
  7677  000B74  6F8B               	movwf	(get_fat@ofs+1)& (0+255),b
  7678  000B76  0E09               	movlw	9
  7679  000B78  6F70               	movwf	??_get_fat& (0+255),b
  7680  000B7A                     u6775:
  7681  000B7A  90D8               	bcf	status,0,c
  7682  000B7C  3391               	rrcf	(get_fat@bc+1)& (0+255),f,b
  7683  000B7E  3390               	rrcf	get_fat@bc& (0+255),f,b
  7684  000B80  2F70               	decfsz	??_get_fat& (0+255),f,b
  7685  000B82  D7FB               	goto	u6775
  7686                           
  7687                           ;pff.c: 367: if (ofs != 511) {
  7688  000B84  298A               	incf	get_fat@ofs& (0+255),w,b
  7689  000B86  E103               	bnz	u6780
  7690  000B88  058B               	decf	(get_fat@ofs+1)& (0+255),w,b
  7691  000B8A  B4D8               	btfsc	status,2,c
  7692  000B8C  D02C               	goto	l818
  7693  000B8E                     u6780:
  7694                           
  7695                           ; BSR set to: 0
  7696                           ;pff.c: 368: if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
  7697  000B8E  0E8C               	movlw	low get_fat@buf
  7698  000B90  6E23               	movwf	disk_readp@rd,c
  7699  000B92  0E00               	movlw	high get_fat@buf
  7700  000B94  6E24               	movwf	disk_readp@rd+1,c
  7701  000B96  EE20 F00A          	lfsr	2,10
  7702  000B9A  5192               	movf	get_fat@fs& (0+255),w,b
  7703  000B9C  26D9               	addwf	fsr2l,f,c
  7704  000B9E  5193               	movf	(get_fat@fs+1)& (0+255),w,b
  7705  000BA0  22DA               	addwfc	fsr2h,f,c
  7706  000BA2  CFDE F070          	movff	postinc2,??_get_fat
  7707  000BA6  CFDE F071          	movff	postinc2,??_get_fat+1
  7708  000BAA  CFDE F072          	movff	postinc2,??_get_fat+2
  7709  000BAE  CFDE F073          	movff	postinc2,??_get_fat+3
  7710  000BB2  5190               	movf	get_fat@bc& (0+255),w,b
  7711  000BB4  2570               	addwf	??_get_fat& (0+255),w,b
  7712  000BB6  6E25               	movwf	disk_readp@sector,c
  7713  000BB8  5191               	movf	(get_fat@bc+1)& (0+255),w,b
  7714  000BBA  2171               	addwfc	(??_get_fat+1)& (0+255),w,b
  7715  000BBC  6E26               	movwf	disk_readp@sector+1,c
  7716  000BBE  0E00               	movlw	0
  7717  000BC0  2172               	addwfc	(??_get_fat+2)& (0+255),w,b
  7718  000BC2  6E27               	movwf	disk_readp@sector+2,c
  7719  000BC4  0E00               	movlw	0
  7720  000BC6  2173               	addwfc	(??_get_fat+3)& (0+255),w,b
  7721  000BC8  6E28               	movwf	disk_readp@sector+3,c
  7722  000BCA  C08A  F029         	movff	get_fat@ofs,disk_readp@offset
  7723  000BCE  C08B  F02A         	movff	get_fat@ofs+1,disk_readp@offset+1
  7724  000BD2  0E00               	movlw	0
  7725  000BD4  6E2C               	movwf	disk_readp@count+1,c
  7726  000BD6  0E02               	movlw	2
  7727  000BD8  6E2B               	movwf	disk_readp@count,c
  7728  000BDA  EC3C  F009         	call	_disk_readp	;wreg free
  7729  000BDE  0900               	iorlw	0
  7730  000BE0  A4D8               	btfss	status,2,c
  7731  000BE2  D178               	goto	l820
  7732  000BE4  D061               	goto	l823
  7733  000BE6                     l818:
  7734                           
  7735                           ;pff.c: 370: if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
  7736  000BE6  0E8C               	movlw	low get_fat@buf
  7737  000BE8  6E23               	movwf	disk_readp@rd,c
  7738  000BEA  0E00               	movlw	high get_fat@buf
  7739  000BEC  6E24               	movwf	disk_readp@rd+1,c
  7740  000BEE  0100               	movlb	0	; () banked
  7741  000BF0  EE20 F00A          	lfsr	2,10
  7742  000BF4  5192               	movf	get_fat@fs& (0+255),w,b
  7743  000BF6  26D9               	addwf	fsr2l,f,c
  7744  000BF8  5193               	movf	(get_fat@fs+1)& (0+255),w,b
  7745  000BFA  22DA               	addwfc	fsr2h,f,c
  7746  000BFC  CFDE F070          	movff	postinc2,??_get_fat
  7747  000C00  CFDE F071          	movff	postinc2,??_get_fat+1
  7748  000C04  CFDE F072          	movff	postinc2,??_get_fat+2
  7749  000C08  CFDE F073          	movff	postinc2,??_get_fat+3
  7750  000C0C  5190               	movf	get_fat@bc& (0+255),w,b
  7751  000C0E  2570               	addwf	??_get_fat& (0+255),w,b
  7752  000C10  6E25               	movwf	disk_readp@sector,c
  7753  000C12  5191               	movf	(get_fat@bc+1)& (0+255),w,b
  7754  000C14  2171               	addwfc	(??_get_fat+1)& (0+255),w,b
  7755  000C16  6E26               	movwf	disk_readp@sector+1,c
  7756  000C18  0E00               	movlw	0
  7757  000C1A  2172               	addwfc	(??_get_fat+2)& (0+255),w,b
  7758  000C1C  6E27               	movwf	disk_readp@sector+2,c
  7759  000C1E  0E00               	movlw	0
  7760  000C20  2173               	addwfc	(??_get_fat+3)& (0+255),w,b
  7761  000C22  6E28               	movwf	disk_readp@sector+3,c
  7762  000C24  0E01               	movlw	1
  7763  000C26  6E2A               	movwf	disk_readp@offset+1,c
  7764  000C28  6829               	setf	disk_readp@offset,c
  7765  000C2A  0E00               	movlw	0
  7766  000C2C  6E2C               	movwf	disk_readp@count+1,c
  7767  000C2E  0E01               	movlw	1
  7768  000C30  6E2B               	movwf	disk_readp@count,c
  7769  000C32  EC3C  F009         	call	_disk_readp	;wreg free
  7770  000C36  0900               	iorlw	0
  7771  000C38  A4D8               	btfss	status,2,c
  7772  000C3A  D14C               	goto	l820
  7773                           
  7774                           ;pff.c: 371: if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
  7775  000C3C  0E8D               	movlw	low (get_fat@buf+1)
  7776  000C3E  6E23               	movwf	disk_readp@rd,c
  7777  000C40  0E00               	movlw	high (get_fat@buf+1)
  7778  000C42  6E24               	movwf	disk_readp@rd+1,c
  7779  000C44  0100               	movlb	0	; () banked
  7780  000C46  EE20 F00A          	lfsr	2,10
  7781  000C4A  5192               	movf	get_fat@fs& (0+255),w,b
  7782  000C4C  26D9               	addwf	fsr2l,f,c
  7783  000C4E  5193               	movf	(get_fat@fs+1)& (0+255),w,b
  7784  000C50  22DA               	addwfc	fsr2h,f,c
  7785  000C52  CFDE F070          	movff	postinc2,??_get_fat
  7786  000C56  CFDE F071          	movff	postinc2,??_get_fat+1
  7787  000C5A  CFDE F072          	movff	postinc2,??_get_fat+2
  7788  000C5E  CFDE F073          	movff	postinc2,??_get_fat+3
  7789  000C62  5190               	movf	get_fat@bc& (0+255),w,b
  7790  000C64  2570               	addwf	??_get_fat& (0+255),w,b
  7791  000C66  6F74               	movwf	(??_get_fat+4)& (0+255),b
  7792  000C68  5191               	movf	(get_fat@bc+1)& (0+255),w,b
  7793  000C6A  2171               	addwfc	(??_get_fat+1)& (0+255),w,b
  7794  000C6C  6F75               	movwf	(??_get_fat+5)& (0+255),b
  7795  000C6E  0E00               	movlw	0
  7796  000C70  2172               	addwfc	(??_get_fat+2)& (0+255),w,b
  7797  000C72  6F76               	movwf	(??_get_fat+6)& (0+255),b
  7798  000C74  0E00               	movlw	0
  7799  000C76  2173               	addwfc	(??_get_fat+3)& (0+255),w,b
  7800  000C78  6F77               	movwf	(??_get_fat+7)& (0+255),b
  7801  000C7A  0E01               	movlw	1
  7802  000C7C  2574               	addwf	(??_get_fat+4)& (0+255),w,b
  7803  000C7E  6E25               	movwf	disk_readp@sector,c
  7804  000C80  0E00               	movlw	0
  7805  000C82  2175               	addwfc	(??_get_fat+5)& (0+255),w,b
  7806  000C84  6E26               	movwf	disk_readp@sector+1,c
  7807  000C86  0E00               	movlw	0
  7808  000C88  2176               	addwfc	(??_get_fat+6)& (0+255),w,b
  7809  000C8A  6E27               	movwf	disk_readp@sector+2,c
  7810  000C8C  0E00               	movlw	0
  7811  000C8E  2177               	addwfc	(??_get_fat+7)& (0+255),w,b
  7812  000C90  6E28               	movwf	disk_readp@sector+3,c
  7813  000C92  0E00               	movlw	0
  7814  000C94  6E2A               	movwf	disk_readp@offset+1,c
  7815  000C96  0E00               	movlw	0
  7816  000C98  6E29               	movwf	disk_readp@offset,c
  7817  000C9A  0E00               	movlw	0
  7818  000C9C  6E2C               	movwf	disk_readp@count+1,c
  7819  000C9E  0E01               	movlw	1
  7820  000CA0  6E2B               	movwf	disk_readp@count,c
  7821  000CA2  EC3C  F009         	call	_disk_readp	;wreg free
  7822  000CA6  D79B               	goto	L3
  7823  000CA8                     l823:
  7824                           
  7825                           ;pff.c: 372: }
  7826                           ;pff.c: 373: wc = (WORD)(((WORD)*((BYTE*)(buf)+1)<<8)|(WORD)*(BYTE*)(buf));
  7827  000CA8  0100               	movlb	0	; () banked
  7828  000CAA  518D               	movf	(get_fat@buf+1)& (0+255),w,b
  7829  000CAC  6F70               	movwf	??_get_fat& (0+255),b
  7830  000CAE  518C               	movf	get_fat@buf& (0+255),w,b
  7831  000CB0  6F88               	movwf	get_fat@wc& (0+255),b
  7832  000CB2  C070  F089         	movff	??_get_fat,get_fat@wc+1
  7833                           
  7834                           ; BSR set to: 0
  7835                           ;pff.c: 374: return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  7836  000CB6  B16C               	btfsc	get_fat@clst& (0+255),0,b
  7837  000CB8  D007               	goto	l825
  7838                           
  7839                           ; BSR set to: 0
  7840  000CBA  0EFF               	movlw	255
  7841  000CBC  1588               	andwf	get_fat@wc& (0+255),w,b
  7842  000CBE  6F86               	movwf	_get_fat$1846& (0+255),b
  7843  000CC0  0E0F               	movlw	15
  7844  000CC2  1589               	andwf	(get_fat@wc+1)& (0+255),w,b
  7845  000CC4  6F87               	movwf	(_get_fat$1846+1)& (0+255),b
  7846  000CC6  D00F               	goto	l827
  7847  000CC8                     l825:
  7848                           
  7849                           ; BSR set to: 0
  7850                           
  7851                           ; BSR set to: 0
  7852  000CC8  C088  F070         	movff	get_fat@wc,??_get_fat
  7853  000CCC  C089  F071         	movff	get_fat@wc+1,??_get_fat+1
  7854  000CD0  0E04               	movlw	4
  7855  000CD2  6F72               	movwf	(??_get_fat+2)& (0+255),b
  7856  000CD4                     u6835:
  7857  000CD4  90D8               	bcf	status,0,c
  7858  000CD6  3371               	rrcf	(??_get_fat+1)& (0+255),f,b
  7859  000CD8  3370               	rrcf	??_get_fat& (0+255),f,b
  7860  000CDA  2F72               	decfsz	(??_get_fat+2)& (0+255),f,b
  7861  000CDC  D7FB               	goto	u6835
  7862  000CDE  C070  F086         	movff	??_get_fat,_get_fat$1846
  7863  000CE2  C071  F087         	movff	??_get_fat+1,_get_fat$1846+1
  7864  000CE6                     l827:
  7865                           
  7866                           ; BSR set to: 0
  7867                           
  7868                           ; BSR set to: 0
  7869  000CE6  C086  F06C         	movff	_get_fat$1846,?_get_fat
  7870  000CEA  C087  F06D         	movff	_get_fat$1846+1,?_get_fat+1
  7871  000CEE  6B6E               	clrf	(?_get_fat+2)& (0+255),b
  7872  000CF0  6B6F               	clrf	(?_get_fat+3)& (0+255),b
  7873                           
  7874                           ; BSR set to: 0
  7875  000CF2  0012               	return	
  7876  000CF4                     
  7877                           ; BSR set to: 0
  7878                           ;pff.c: 379: if (disk_readp(buf, fs->fatbase + clst / 256, ((UINT)clst % 256) * 2, 2)) b
      +                          reak;
  7879                           
  7880                           ; BSR set to: 0
  7881  000CF4  0E8C               	movlw	low get_fat@buf
  7882  000CF6  6E23               	movwf	disk_readp@rd,c
  7883  000CF8  0E00               	movlw	high get_fat@buf
  7884  000CFA  6E24               	movwf	disk_readp@rd+1,c
  7885  000CFC  EE20 F00A          	lfsr	2,10
  7886  000D00  5192               	movf	get_fat@fs& (0+255),w,b
  7887  000D02  26D9               	addwf	fsr2l,f,c
  7888  000D04  5193               	movf	(get_fat@fs+1)& (0+255),w,b
  7889  000D06  22DA               	addwfc	fsr2h,f,c
  7890  000D08  CFDE F070          	movff	postinc2,??_get_fat
  7891  000D0C  CFDE F071          	movff	postinc2,??_get_fat+1
  7892  000D10  CFDE F072          	movff	postinc2,??_get_fat+2
  7893  000D14  CFDE F073          	movff	postinc2,??_get_fat+3
  7894  000D18  C06C  F074         	movff	get_fat@clst,??_get_fat+4
  7895  000D1C  C06D  F075         	movff	get_fat@clst+1,??_get_fat+5
  7896  000D20  C06E  F076         	movff	get_fat@clst+2,??_get_fat+6
  7897  000D24  C06F  F077         	movff	get_fat@clst+3,??_get_fat+7
  7898  000D28  C075  F074         	movff	??_get_fat+5,??_get_fat+4
  7899  000D2C  C076  F075         	movff	??_get_fat+6,??_get_fat+5
  7900  000D30  C077  F076         	movff	??_get_fat+7,??_get_fat+6
  7901  000D34  6B77               	clrf	(??_get_fat+7)& (0+255),b
  7902  000D36  5170               	movf	??_get_fat& (0+255),w,b
  7903  000D38  2574               	addwf	(??_get_fat+4)& (0+255),w,b
  7904  000D3A  6E25               	movwf	disk_readp@sector,c
  7905  000D3C  5171               	movf	(??_get_fat+1)& (0+255),w,b
  7906  000D3E  2175               	addwfc	(??_get_fat+5)& (0+255),w,b
  7907  000D40  6E26               	movwf	disk_readp@sector+1,c
  7908  000D42  5172               	movf	(??_get_fat+2)& (0+255),w,b
  7909  000D44  2176               	addwfc	(??_get_fat+6)& (0+255),w,b
  7910  000D46  6E27               	movwf	disk_readp@sector+2,c
  7911  000D48  5173               	movf	(??_get_fat+3)& (0+255),w,b
  7912  000D4A  2177               	addwfc	(??_get_fat+7)& (0+255),w,b
  7913  000D4C  6E28               	movwf	disk_readp@sector+3,c
  7914  000D4E  0EFF               	movlw	255
  7915  000D50  156C               	andwf	get_fat@clst& (0+255),w,b
  7916  000D52  6F78               	movwf	(??_get_fat+8)& (0+255),b
  7917  000D54  0E00               	movlw	0
  7918  000D56  156D               	andwf	(get_fat@clst+1)& (0+255),w,b
  7919  000D58  6F79               	movwf	(??_get_fat+9)& (0+255),b
  7920  000D5A  90D8               	bcf	status,0,c
  7921  000D5C  3578               	rlcf	(??_get_fat+8)& (0+255),w,b
  7922  000D5E  6E29               	movwf	disk_readp@offset,c
  7923  000D60  3579               	rlcf	(??_get_fat+9)& (0+255),w,b
  7924  000D62  6E2A               	movwf	disk_readp@offset+1,c
  7925  000D64  0E00               	movlw	0
  7926  000D66  6E2C               	movwf	disk_readp@count+1,c
  7927  000D68  0E02               	movlw	2
  7928  000D6A  6E2B               	movwf	disk_readp@count,c
  7929  000D6C  EC3C  F009         	call	_disk_readp	;wreg free
  7930  000D70  0900               	iorlw	0
  7931  000D72  A4D8               	btfss	status,2,c
  7932  000D74  D0AF               	goto	l820
  7933                           
  7934                           ;pff.c: 380: return (WORD)(((WORD)*((BYTE*)(buf)+1)<<8)|(WORD)*(BYTE*)(buf));
  7935  000D76  0100               	movlb	0	; () banked
  7936  000D78  518C               	movf	get_fat@buf& (0+255),w,b
  7937  000D7A  C08D  F070         	movff	get_fat@buf+1,??_get_fat
  7938  000D7E  6B71               	clrf	(??_get_fat+1)& (0+255),b
  7939  000D80  C070  F071         	movff	??_get_fat,??_get_fat+1
  7940  000D84  6B70               	clrf	??_get_fat& (0+255),b
  7941  000D86  1370               	iorwf	??_get_fat& (0+255),f,b
  7942  000D88  0E00               	movlw	0
  7943  000D8A  1371               	iorwf	(??_get_fat+1)& (0+255),f,b
  7944  000D8C  C070  F06C         	movff	??_get_fat,?_get_fat
  7945  000D90  C071  F06D         	movff	??_get_fat+1,?_get_fat+1
  7946  000D94  6B6E               	clrf	(?_get_fat+2)& (0+255),b
  7947  000D96  6B6F               	clrf	(?_get_fat+3)& (0+255),b
  7948                           
  7949                           ; BSR set to: 0
  7950  000D98  0012               	return	
  7951  000D9A                     
  7952                           ; BSR set to: 0
  7953                           ;pff.c: 384: if (disk_readp(buf, fs->fatbase + clst / 128, ((UINT)clst % 128) * 4, 4)) b
      +                          reak;
  7954                           
  7955                           ; BSR set to: 0
  7956  000D9A  0E8C               	movlw	low get_fat@buf
  7957  000D9C  6E23               	movwf	disk_readp@rd,c
  7958  000D9E  0E00               	movlw	high get_fat@buf
  7959  000DA0  6E24               	movwf	disk_readp@rd+1,c
  7960  000DA2  EE20 F00A          	lfsr	2,10
  7961  000DA6  5192               	movf	get_fat@fs& (0+255),w,b
  7962  000DA8  26D9               	addwf	fsr2l,f,c
  7963  000DAA  5193               	movf	(get_fat@fs+1)& (0+255),w,b
  7964  000DAC  22DA               	addwfc	fsr2h,f,c
  7965  000DAE  CFDE F070          	movff	postinc2,??_get_fat
  7966  000DB2  CFDE F071          	movff	postinc2,??_get_fat+1
  7967  000DB6  CFDE F072          	movff	postinc2,??_get_fat+2
  7968  000DBA  CFDE F073          	movff	postinc2,??_get_fat+3
  7969  000DBE  C06C  F074         	movff	get_fat@clst,??_get_fat+4
  7970  000DC2  C06D  F075         	movff	get_fat@clst+1,??_get_fat+5
  7971  000DC6  C06E  F076         	movff	get_fat@clst+2,??_get_fat+6
  7972  000DCA  C06F  F077         	movff	get_fat@clst+3,??_get_fat+7
  7973  000DCE  0E08               	movlw	8
  7974  000DD0  D005               	goto	u6850
  7975  000DD2                     u6855:
  7976  000DD2  90D8               	bcf	status,0,c
  7977  000DD4  3377               	rrcf	(??_get_fat+7)& (0+255),f,b
  7978  000DD6  3376               	rrcf	(??_get_fat+6)& (0+255),f,b
  7979  000DD8  3375               	rrcf	(??_get_fat+5)& (0+255),f,b
  7980  000DDA  3374               	rrcf	(??_get_fat+4)& (0+255),f,b
  7981  000DDC                     u6850:
  7982  000DDC  2EE8               	decfsz	wreg,f,c
  7983  000DDE  D7F9               	goto	u6855
  7984  000DE0  5170               	movf	??_get_fat& (0+255),w,b
  7985  000DE2  2574               	addwf	(??_get_fat+4)& (0+255),w,b
  7986  000DE4  6E25               	movwf	disk_readp@sector,c
  7987  000DE6  5171               	movf	(??_get_fat+1)& (0+255),w,b
  7988  000DE8  2175               	addwfc	(??_get_fat+5)& (0+255),w,b
  7989  000DEA  6E26               	movwf	disk_readp@sector+1,c
  7990  000DEC  5172               	movf	(??_get_fat+2)& (0+255),w,b
  7991  000DEE  2176               	addwfc	(??_get_fat+6)& (0+255),w,b
  7992  000DF0  6E27               	movwf	disk_readp@sector+2,c
  7993  000DF2  5173               	movf	(??_get_fat+3)& (0+255),w,b
  7994  000DF4  2177               	addwfc	(??_get_fat+7)& (0+255),w,b
  7995  000DF6  6E28               	movwf	disk_readp@sector+3,c
  7996  000DF8  0E7F               	movlw	127
  7997  000DFA  156C               	andwf	get_fat@clst& (0+255),w,b
  7998  000DFC  6F78               	movwf	(??_get_fat+8)& (0+255),b
  7999  000DFE  0E00               	movlw	0
  8000  000E00  156D               	andwf	(get_fat@clst+1)& (0+255),w,b
  8001  000E02  6F79               	movwf	(??_get_fat+9)& (0+255),b
  8002  000E04  90D8               	bcf	status,0,c
  8003  000E06  3778               	rlcf	(??_get_fat+8)& (0+255),f,b
  8004  000E08  3779               	rlcf	(??_get_fat+9)& (0+255),f,b
  8005  000E0A  90D8               	bcf	status,0,c
  8006  000E0C  3778               	rlcf	(??_get_fat+8)& (0+255),f,b
  8007  000E0E  3779               	rlcf	(??_get_fat+9)& (0+255),f,b
  8008  000E10  C078  F029         	movff	??_get_fat+8,disk_readp@offset
  8009  000E14  C079  F02A         	movff	??_get_fat+9,disk_readp@offset+1
  8010  000E18  0E00               	movlw	0
  8011  000E1A  6E2C               	movwf	disk_readp@count+1,c
  8012  000E1C  0E04               	movlw	4
  8013  000E1E  6E2B               	movwf	disk_readp@count,c
  8014  000E20  EC3C  F009         	call	_disk_readp	;wreg free
  8015  000E24  0900               	iorlw	0
  8016  000E26  A4D8               	btfss	status,2,c
  8017  000E28  D055               	goto	l820
  8018                           
  8019                           ;pff.c: 385: return (DWORD)(((DWORD)*((BYTE*)(buf)+3)<<24)|((DWORD)*((BYTE*)(buf)+2)<<16
      +                          )|((WORD)*((BYTE*)(buf)+1)<<8)|*(BYTE*)(buf)) & 0x0FFFFFFF;
  8020  000E2A  0100               	movlb	0	; () banked
  8021  000E2C  518D               	movf	(get_fat@buf+1)& (0+255),w,b
  8022  000E2E  6F71               	movwf	(??_get_fat+1)& (0+255),b
  8023  000E30  6B70               	clrf	??_get_fat& (0+255),b
  8024  000E32  C08E  F072         	movff	get_fat@buf+2,??_get_fat+2
  8025  000E36  6B73               	clrf	(??_get_fat+3)& (0+255),b
  8026  000E38  6B74               	clrf	(??_get_fat+4)& (0+255),b
  8027  000E3A  6B75               	clrf	(??_get_fat+5)& (0+255),b
  8028  000E3C  C073  F075         	movff	??_get_fat+3,??_get_fat+5
  8029  000E40  C072  F074         	movff	??_get_fat+2,??_get_fat+4
  8030  000E44  6B73               	clrf	(??_get_fat+3)& (0+255),b
  8031  000E46  6B72               	clrf	(??_get_fat+2)& (0+255),b
  8032  000E48  C08F  F076         	movff	get_fat@buf+3,??_get_fat+6
  8033  000E4C  6B77               	clrf	(??_get_fat+7)& (0+255),b
  8034  000E4E  6B78               	clrf	(??_get_fat+8)& (0+255),b
  8035  000E50  6B79               	clrf	(??_get_fat+9)& (0+255),b
  8036  000E52  C076  F079         	movff	??_get_fat+6,??_get_fat+9
  8037  000E56  6B78               	clrf	(??_get_fat+8)& (0+255),b
  8038  000E58  6B77               	clrf	(??_get_fat+7)& (0+255),b
  8039  000E5A  6B76               	clrf	(??_get_fat+6)& (0+255),b
  8040  000E5C  5172               	movf	(??_get_fat+2)& (0+255),w,b
  8041  000E5E  1176               	iorwf	(??_get_fat+6)& (0+255),w,b
  8042  000E60  6F7A               	movwf	(??_get_fat+10)& (0+255),b
  8043  000E62  5173               	movf	(??_get_fat+3)& (0+255),w,b
  8044  000E64  1177               	iorwf	(??_get_fat+7)& (0+255),w,b
  8045  000E66  6F7B               	movwf	(??_get_fat+11)& (0+255),b
  8046  000E68  5174               	movf	(??_get_fat+4)& (0+255),w,b
  8047  000E6A  1178               	iorwf	(??_get_fat+8)& (0+255),w,b
  8048  000E6C  6F7C               	movwf	(??_get_fat+12)& (0+255),b
  8049  000E6E  5175               	movf	(??_get_fat+5)& (0+255),w,b
  8050  000E70  1179               	iorwf	(??_get_fat+9)& (0+255),w,b
  8051  000E72  6F7D               	movwf	(??_get_fat+13)& (0+255),b
  8052  000E74  5170               	movf	??_get_fat& (0+255),w,b
  8053  000E76  117A               	iorwf	(??_get_fat+10)& (0+255),w,b
  8054  000E78  6F7E               	movwf	(??_get_fat+14)& (0+255),b
  8055  000E7A  5171               	movf	(??_get_fat+1)& (0+255),w,b
  8056  000E7C  117B               	iorwf	(??_get_fat+11)& (0+255),w,b
  8057  000E7E  6F7F               	movwf	(??_get_fat+15)& (0+255),b
  8058  000E80  0E00               	movlw	0
  8059  000E82  117C               	iorwf	(??_get_fat+12)& (0+255),w,b
  8060  000E84  6F80               	movwf	(??_get_fat+16)& (0+255),b
  8061  000E86  0E00               	movlw	0
  8062  000E88  117D               	iorwf	(??_get_fat+13)& (0+255),w,b
  8063  000E8A  6F81               	movwf	(??_get_fat+17)& (0+255),b
  8064  000E8C  518C               	movf	get_fat@buf& (0+255),w,b
  8065  000E8E  117E               	iorwf	(??_get_fat+14)& (0+255),w,b
  8066  000E90  6F82               	movwf	(??_get_fat+18)& (0+255),b
  8067  000E92  517F               	movf	(??_get_fat+15)& (0+255),w,b
  8068  000E94  6F83               	movwf	(??_get_fat+19)& (0+255),b
  8069  000E96  5180               	movf	(??_get_fat+16)& (0+255),w,b
  8070  000E98  6F84               	movwf	(??_get_fat+20)& (0+255),b
  8071  000E9A  5181               	movf	(??_get_fat+17)& (0+255),w,b
  8072  000E9C  6F85               	movwf	(??_get_fat+21)& (0+255),b
  8073  000E9E  0EFF               	movlw	255
  8074  000EA0  1582               	andwf	(??_get_fat+18)& (0+255),w,b
  8075  000EA2  6F6C               	movwf	?_get_fat& (0+255),b
  8076  000EA4  0EFF               	movlw	255
  8077  000EA6  1583               	andwf	(??_get_fat+19)& (0+255),w,b
  8078  000EA8  6F6D               	movwf	(?_get_fat+1)& (0+255),b
  8079  000EAA  0EFF               	movlw	255
  8080  000EAC  1584               	andwf	(??_get_fat+20)& (0+255),w,b
  8081  000EAE  6F6E               	movwf	(?_get_fat+2)& (0+255),b
  8082  000EB0  0E0F               	movlw	15
  8083  000EB2  1585               	andwf	(??_get_fat+21)& (0+255),w,b
  8084  000EB4  6F6F               	movwf	(?_get_fat+3)& (0+255),b
  8085                           
  8086                           ; BSR set to: 0
  8087  000EB6  0012               	return	
  8088  000EB8                     l816:
  8089                           
  8090                           ; BSR set to: 0
  8091                           
  8092                           ; BSR set to: 0
  8093  000EB8  C092  FFD9         	movff	get_fat@fs,fsr2l
  8094  000EBC  C093  FFDA         	movff	get_fat@fs+1,fsr2h
  8095  000EC0  50DF               	movf	indf2,w,c
  8096                           
  8097                           ; Switch size 1, requested type "space"
  8098                           ; Number of cases is 3, Range of values is 1 to 3
  8099                           ; switch strategies available:
  8100                           ; Name         Instructions Cycles
  8101                           ; simple_byte           10     6 (average)
  8102                           ;	Chosen strategy is simple_byte
  8103  000EC2  0A01               	xorlw	1	; case 1
  8104  000EC4  B4D8               	btfsc	status,2,c
  8105  000EC6  D644               	goto	l817
  8106  000EC8  0A03               	xorlw	3	; case 2
  8107  000ECA  B4D8               	btfsc	status,2,c
  8108  000ECC  D713               	goto	l828
  8109  000ECE  0A01               	xorlw	1	; case 3
  8110  000ED0  B4D8               	btfsc	status,2,c
  8111  000ED2  D763               	goto	l830
  8112  000ED4                     l820:
  8113                           
  8114                           ;pff.c: 389: return 1;
  8115                           
  8116                           ; BSR set to: 0
  8117  000ED4  0E01               	movlw	1
  8118  000ED6  0100               	movlb	0	; () banked
  8119  000ED8  6F6C               	movwf	?_get_fat& (0+255),b
  8120  000EDA  0E00               	movlw	0
  8121  000EDC  6F6D               	movwf	(?_get_fat+1)& (0+255),b
  8122  000EDE  0E00               	movlw	0
  8123  000EE0  6F6E               	movwf	(?_get_fat+2)& (0+255),b
  8124  000EE2  0E00               	movlw	0
  8125  000EE4  6F6F               	movwf	(?_get_fat+3)& (0+255),b
  8126  000EE6  0012               	return	
  8127  000EE8                     __end_of_get_fat:
  8128                           	opt stack 0
  8129                           tosu	equ	0xFFF
  8130                           tosh	equ	0xFFE
  8131                           tosl	equ	0xFFD
  8132                           pclath	equ	0xFFA
  8133                           tblptru	equ	0xFF8
  8134                           tblptrh	equ	0xFF7
  8135                           tblptrl	equ	0xFF6
  8136                           tablat	equ	0xFF5
  8137                           prodh	equ	0xFF4
  8138                           prodl	equ	0xFF3
  8139                           intcon	equ	0xFF2
  8140                           intcon2	equ	0xFF1
  8141                           intcon3	equ	0xFF0
  8142                           postinc0	equ	0xFEE
  8143                           wreg	equ	0xFE8
  8144                           indf1	equ	0xFE7
  8145                           postinc1	equ	0xFE6
  8146                           postdec1	equ	0xFE5
  8147                           fsr1h	equ	0xFE2
  8148                           fsr1l	equ	0xFE1
  8149                           indf2	equ	0xFDF
  8150                           postinc2	equ	0xFDE
  8151                           postdec2	equ	0xFDD
  8152                           plusw2	equ	0xFDB
  8153                           fsr2h	equ	0xFDA
  8154                           fsr2l	equ	0xFD9
  8155                           status	equ	0xFD8
  8156                           
  8157 ;; *************** function _clust2sect *****************
  8158 ;; Defined at:
  8159 ;;		line 400 in file "pff.c"
  8160 ;; Parameters:    Size  Location     Type
  8161 ;;  clst            4   37[COMRAM] unsigned long 
  8162 ;; Auto vars:     Size  Location     Type
  8163 ;;  fs              2   41[COMRAM] PTR struct .
  8164 ;;		 -> NULL(0), SDCard@fs(42), 
  8165 ;; Return value:  Size  Location     Type
  8166 ;;                  4   37[COMRAM] unsigned long 
  8167 ;; Registers used:
  8168 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8169 ;; Tracked objects:
  8170 ;;		On entry : 0/0
  8171 ;;		On exit  : 0/0
  8172 ;;		Unchanged: 0/0
  8173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8174 ;;      Params:         4       0       0       0       0       0       0       0       0
  8175 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8176 ;;      Temps:          0       5       0       0       0       0       0       0       0
  8177 ;;      Totals:         6       5       0       0       0       0       0       0       0
  8178 ;;Total ram usage:       11 bytes
  8179 ;; Hardware stack levels used:    1
  8180 ;; Hardware stack levels required when called:    3
  8181 ;; This function calls:
  8182 ;;		___lmul
  8183 ;; This function is called by:
  8184 ;;		_dir_rewind
  8185 ;;		_dir_next
  8186 ;;		_pf_read
  8187 ;;		_pf_write
  8188 ;;		_pf_lseek
  8189 ;; This function uses a non-reentrant model
  8190 ;;
  8191                           
  8192                           	psect	text34
  8193  002788                     __ptext34:
  8194                           	opt stack 0
  8195  002788                     _clust2sect:
  8196                           	opt stack 24
  8197                           
  8198                           ;pff.c: 404: FATFS *fs = FatFs;
  8199                           
  8200                           ; BSR set to: 0
  8201                           ;incstack = 0
  8202  002788  C035  F02A         	movff	_FatFs,clust2sect@fs
  8203  00278C  C036  F02B         	movff	_FatFs+1,clust2sect@fs+1
  8204                           
  8205                           ;pff.c: 407: clst -= 2;
  8206  002790  0E02               	movlw	2
  8207  002792  5E26               	subwf	clust2sect@clst,f,c
  8208  002794  0E00               	movlw	0
  8209  002796  5A27               	subwfb	clust2sect@clst+1,f,c
  8210  002798  5A28               	subwfb	clust2sect@clst+2,f,c
  8211  00279A  5A29               	subwfb	clust2sect@clst+3,f,c
  8212                           
  8213                           ;pff.c: 408: if (clst >= (fs->n_fatent - 2)) return 0;
  8214  00279C  EE20 F006          	lfsr	2,6
  8215  0027A0  502A               	movf	clust2sect@fs,w,c
  8216  0027A2  26D9               	addwf	fsr2l,f,c
  8217  0027A4  502B               	movf	clust2sect@fs+1,w,c
  8218  0027A6  22DA               	addwfc	fsr2h,f,c
  8219  0027A8  0EFE               	movlw	254
  8220  0027AA  24DE               	addwf	postinc2,w,c
  8221  0027AC  0100               	movlb	0	; () banked
  8222  0027AE  6F60               	movwf	??_clust2sect& (0+255),b
  8223  0027B0  0EFF               	movlw	255
  8224  0027B2  20DE               	addwfc	postinc2,w,c
  8225  0027B4  6F61               	movwf	(??_clust2sect+1)& (0+255),b
  8226  0027B6  0EFF               	movlw	255
  8227  0027B8  20DE               	addwfc	postinc2,w,c
  8228  0027BA  6F62               	movwf	(??_clust2sect+2)& (0+255),b
  8229  0027BC  0EFF               	movlw	255
  8230  0027BE  20DE               	addwfc	postinc2,w,c
  8231  0027C0  6F63               	movwf	(??_clust2sect+3)& (0+255),b
  8232  0027C2  5160               	movf	??_clust2sect& (0+255),w,b
  8233  0027C4  5C26               	subwf	clust2sect@clst,w,c
  8234  0027C6  5161               	movf	(??_clust2sect+1)& (0+255),w,b
  8235  0027C8  5827               	subwfb	clust2sect@clst+1,w,c
  8236  0027CA  5162               	movf	(??_clust2sect+2)& (0+255),w,b
  8237  0027CC  5828               	subwfb	clust2sect@clst+2,w,c
  8238  0027CE  5163               	movf	(??_clust2sect+3)& (0+255),w,b
  8239  0027D0  5829               	subwfb	clust2sect@clst+3,w,c
  8240  0027D2  A0D8               	btfss	status,0,c
  8241  0027D4  D009               	goto	l834
  8242                           
  8243                           ; BSR set to: 0
  8244  0027D6  0E00               	movlw	0
  8245  0027D8  6E26               	movwf	?_clust2sect,c
  8246  0027DA  0E00               	movlw	0
  8247  0027DC  6E27               	movwf	?_clust2sect+1,c
  8248  0027DE  0E00               	movlw	0
  8249  0027E0  6E28               	movwf	?_clust2sect+2,c
  8250  0027E2  0E00               	movlw	0
  8251  0027E4  6E29               	movwf	?_clust2sect+3,c
  8252                           
  8253                           ; BSR set to: 0
  8254  0027E6  0012               	return	
  8255  0027E8                     l834:
  8256                           
  8257                           ; BSR set to: 0
  8258                           ;pff.c: 409: return (DWORD)clst * fs->csize + fs->database;
  8259                           
  8260                           ; BSR set to: 0
  8261  0027E8  EE20 F012          	lfsr	2,18
  8262  0027EC  502A               	movf	clust2sect@fs,w,c
  8263  0027EE  26D9               	addwf	fsr2l,f,c
  8264  0027F0  502B               	movf	clust2sect@fs+1,w,c
  8265  0027F2  22DA               	addwfc	fsr2h,f,c
  8266  0027F4  CFDE F060          	movff	postinc2,??_clust2sect
  8267  0027F8  CFDE F061          	movff	postinc2,??_clust2sect+1
  8268  0027FC  CFDE F062          	movff	postinc2,??_clust2sect+2
  8269  002800  CFDE F063          	movff	postinc2,??_clust2sect+3
  8270  002804  EE20 F002          	lfsr	2,2
  8271  002808  502A               	movf	clust2sect@fs,w,c
  8272  00280A  26D9               	addwf	fsr2l,f,c
  8273  00280C  502B               	movf	clust2sect@fs+1,w,c
  8274  00280E  22DA               	addwfc	fsr2h,f,c
  8275  002810  50DF               	movf	indf2,w,c
  8276  002812  6F64               	movwf	(??_clust2sect+4)& (0+255),b
  8277  002814  5164               	movf	(??_clust2sect+4)& (0+255),w,b
  8278  002816  6E1A               	movwf	___lmul@multiplier,c
  8279  002818  6A1B               	clrf	___lmul@multiplier+1,c
  8280  00281A  6A1C               	clrf	___lmul@multiplier+2,c
  8281  00281C  6A1D               	clrf	___lmul@multiplier+3,c
  8282  00281E  C026  F01E         	movff	clust2sect@clst,___lmul@multiplicand
  8283  002822  C027  F01F         	movff	clust2sect@clst+1,___lmul@multiplicand+1
  8284  002826  C028  F020         	movff	clust2sect@clst+2,___lmul@multiplicand+2
  8285  00282A  C029  F021         	movff	clust2sect@clst+3,___lmul@multiplicand+3
  8286  00282E  EC0C  F017         	call	___lmul	;wreg free
  8287  002832  0100               	movlb	0	; () banked
  8288  002834  5160               	movf	??_clust2sect& (0+255),w,b
  8289  002836  241A               	addwf	?___lmul,w,c
  8290  002838  6E26               	movwf	?_clust2sect,c
  8291  00283A  5161               	movf	(??_clust2sect+1)& (0+255),w,b
  8292  00283C  201B               	addwfc	?___lmul+1,w,c
  8293  00283E  6E27               	movwf	?_clust2sect+1,c
  8294  002840  5162               	movf	(??_clust2sect+2)& (0+255),w,b
  8295  002842  201C               	addwfc	?___lmul+2,w,c
  8296  002844  6E28               	movwf	?_clust2sect+2,c
  8297  002846  5163               	movf	(??_clust2sect+3)& (0+255),w,b
  8298  002848  201D               	addwfc	?___lmul+3,w,c
  8299  00284A  6E29               	movwf	?_clust2sect+3,c
  8300  00284C  0012               	return	
  8301  00284E                     __end_of_clust2sect:
  8302                           	opt stack 0
  8303                           tosu	equ	0xFFF
  8304                           tosh	equ	0xFFE
  8305                           tosl	equ	0xFFD
  8306                           pclath	equ	0xFFA
  8307                           tblptru	equ	0xFF8
  8308                           tblptrh	equ	0xFF7
  8309                           tblptrl	equ	0xFF6
  8310                           tablat	equ	0xFF5
  8311                           prodh	equ	0xFF4
  8312                           prodl	equ	0xFF3
  8313                           intcon	equ	0xFF2
  8314                           intcon2	equ	0xFF1
  8315                           intcon3	equ	0xFF0
  8316                           postinc0	equ	0xFEE
  8317                           wreg	equ	0xFE8
  8318                           indf1	equ	0xFE7
  8319                           postinc1	equ	0xFE6
  8320                           postdec1	equ	0xFE5
  8321                           fsr1h	equ	0xFE2
  8322                           fsr1l	equ	0xFE1
  8323                           indf2	equ	0xFDF
  8324                           postinc2	equ	0xFDE
  8325                           postdec2	equ	0xFDD
  8326                           plusw2	equ	0xFDB
  8327                           fsr2h	equ	0xFDA
  8328                           fsr2l	equ	0xFD9
  8329                           status	equ	0xFD8
  8330                           
  8331 ;; *************** function _create_name *****************
  8332 ;; Defined at:
  8333 ;;		line 581 in file "pff.c"
  8334 ;; Parameters:    Size  Location     Type
  8335 ;;  dj              2   33[COMRAM] PTR struct .
  8336 ;;		 -> pf_open@dj(16), 
  8337 ;;  path            2   35[COMRAM] PTR PTR const unsigned c
  8338 ;;		 -> follow_path@path(2), 
  8339 ;; Auto vars:     Size  Location     Type
  8340 ;;  d               1    0[BANK0 ] unsigned char 
  8341 ;;  sfn             2    5[BANK0 ] PTR unsigned char 
  8342 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  8343 ;;  p               2    1[BANK0 ] PTR const unsigned char 
  8344 ;;		 -> STR_16(10), 
  8345 ;;  c               1    8[BANK0 ] unsigned char 
  8346 ;;  i               1    7[BANK0 ] unsigned char 
  8347 ;;  si              1    4[BANK0 ] unsigned char 
  8348 ;;  ni              1    3[BANK0 ] unsigned char 
  8349 ;; Return value:  Size  Location     Type
  8350 ;;                  1    wreg      enum E43
  8351 ;; Registers used:
  8352 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8353 ;; Tracked objects:
  8354 ;;		On entry : 0/0
  8355 ;;		On exit  : 0/0
  8356 ;;		Unchanged: 0/0
  8357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8358 ;;      Params:         4       0       0       0       0       0       0       0       0
  8359 ;;      Locals:         0       9       0       0       0       0       0       0       0
  8360 ;;      Temps:          7       0       0       0       0       0       0       0       0
  8361 ;;      Totals:        11       9       0       0       0       0       0       0       0
  8362 ;;Total ram usage:       20 bytes
  8363 ;; Hardware stack levels used:    1
  8364 ;; Hardware stack levels required when called:    3
  8365 ;; This function calls:
  8366 ;;		_mem_set
  8367 ;; This function is called by:
  8368 ;;		_follow_path
  8369 ;; This function uses a non-reentrant model
  8370 ;;
  8371                           
  8372                           	psect	text35
  8373  001DE0                     __ptext35:
  8374                           	opt stack 0
  8375  001DE0                     _create_name:
  8376                           	opt stack 23
  8377                           
  8378                           ;pff.c: 586: BYTE c, ni, si, i, *sfn;
  8379                           ;pff.c: 587: const char *p;
  8380                           ;pff.c: 590: static const BYTE cvt[] = {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x4
      +                          5,0x45,0x49,0x49,0x49,0x8E,0x8F,0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0
      +                          x9B,0x9C,0x9D,0x9E,0x9F, 0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0x
  8381                           ;pff.c: 595: sfn = dj->fn;
  8382                           
  8383                           ; BSR set to: 0
  8384                           ;incstack = 0
  8385  001DE0  EE20 F002          	lfsr	2,2
  8386  001DE4  5022               	movf	create_name@dj,w,c
  8387  001DE6  26D9               	addwf	fsr2l,f,c
  8388  001DE8  5023               	movf	create_name@dj+1,w,c
  8389  001DEA  22DA               	addwfc	fsr2h,f,c
  8390  001DEC  CFDE F065          	movff	postinc2,create_name@sfn
  8391  001DF0  CFDD F066          	movff	postdec2,create_name@sfn+1
  8392                           
  8393                           ;pff.c: 596: mem_set(sfn, ' ', 11);
  8394  001DF4  C065  F01A         	movff	create_name@sfn,mem_set@dst
  8395  001DF8  C066  F01B         	movff	create_name@sfn+1,mem_set@dst+1
  8396  001DFC  0E00               	movlw	0
  8397  001DFE  6E1D               	movwf	mem_set@val+1,c
  8398  001E00  0E20               	movlw	32
  8399  001E02  6E1C               	movwf	mem_set@val,c
  8400  001E04  0E00               	movlw	0
  8401  001E06  6E1F               	movwf	mem_set@cnt+1,c
  8402  001E08  0E0B               	movlw	11
  8403  001E0A  6E1E               	movwf	mem_set@cnt,c
  8404  001E0C  ECED  F017         	call	_mem_set	;wreg free
  8405                           
  8406                           ;pff.c: 597: si = i = 0; ni = 8;
  8407  001E10  0E00               	movlw	0
  8408  001E12  0100               	movlb	0	; () banked
  8409  001E14  6F67               	movwf	create_name@i& (0+255),b
  8410  001E16  C067  F064         	movff	create_name@i,create_name@si
  8411                           
  8412                           ; BSR set to: 0
  8413  001E1A  0E08               	movlw	8
  8414  001E1C  6F63               	movwf	create_name@ni& (0+255),b
  8415                           
  8416                           ; BSR set to: 0
  8417                           ;pff.c: 598: p = *path;
  8418  001E1E  C024  FFD9         	movff	create_name@path,fsr2l
  8419  001E22  C025  FFDA         	movff	create_name@path+1,fsr2h
  8420  001E26  CFDE F061          	movff	postinc2,create_name@p
  8421  001E2A  CFDD F062          	movff	postdec2,create_name@p+1
  8422  001E2E                     
  8423                           ; BSR set to: 0
  8424                           ;pff.c: 600: c = p[si++];
  8425                           
  8426                           ; BSR set to: 0
  8427  001E2E  5164               	movf	create_name@si& (0+255),w,b
  8428  001E30  0D01               	mullw	1
  8429  001E32  C061  F026         	movff	create_name@p,??_create_name
  8430  001E36  C062  F027         	movff	create_name@p+1,??_create_name+1
  8431  001E3A  50F3               	movf	prodl,w,c
  8432  001E3C  2626               	addwf	??_create_name,f,c
  8433  001E3E  50F4               	movf	prodh,w,c
  8434  001E40  2227               	addwfc	??_create_name+1,f,c
  8435  001E42  C026  FFF6         	movff	??_create_name,tblptrl
  8436  001E46  C027  FFF7         	movff	??_create_name+1,tblptrh
  8437  001E4A                     	if	0	;tblptru may be non-zero
  8438  001E4A                     	endif
  8439  001E4A                     	if	0	;tblptru may be non-zero
  8440  001E4A                     	endif
  8441  001E4A  0008               	tblrd		*
  8442  001E4C  CFF5 F068          	movff	tablat,create_name@c
  8443                           
  8444                           ; BSR set to: 0
  8445  001E50  2B64               	incf	create_name@si& (0+255),f,b
  8446                           
  8447                           ; BSR set to: 0
  8448                           ;pff.c: 601: if (c <= ' ' || c == '/') break;
  8449  001E52  0E20               	movlw	32
  8450  001E54  6568               	cpfsgt	create_name@c& (0+255),b
  8451  001E56  D044               	goto	l896
  8452                           
  8453                           ; BSR set to: 0
  8454  001E58  0E2F               	movlw	47
  8455  001E5A  1968               	xorwf	create_name@c& (0+255),w,b
  8456  001E5C  B4D8               	btfsc	status,2,c
  8457  001E5E  D040               	goto	l896
  8458                           
  8459                           ; BSR set to: 0
  8460                           ;pff.c: 602: if (c == '.' || i >= ni) {
  8461                           
  8462                           ; BSR set to: 0
  8463                           
  8464                           ; BSR set to: 0
  8465  001E60  0E2E               	movlw	46
  8466  001E62  1968               	xorwf	create_name@c& (0+255),w,b
  8467  001E64  B4D8               	btfsc	status,2,c
  8468  001E66  D004               	goto	u7330
  8469                           
  8470                           ; BSR set to: 0
  8471  001E68  5163               	movf	create_name@ni& (0+255),w,b
  8472  001E6A  5D67               	subwf	create_name@i& (0+255),w,b
  8473  001E6C  A0D8               	btfss	status,0,c
  8474  001E6E  D00D               	goto	l897
  8475  001E70                     u7330:
  8476                           
  8477                           ; BSR set to: 0
  8478                           ;pff.c: 603: if (ni != 8 || c != '.') break;
  8479                           
  8480                           ; BSR set to: 0
  8481  001E70  0E08               	movlw	8
  8482  001E72  1963               	xorwf	create_name@ni& (0+255),w,b
  8483  001E74  A4D8               	btfss	status,2,c
  8484  001E76  D034               	goto	l896
  8485                           
  8486                           ; BSR set to: 0
  8487  001E78  0E2E               	movlw	46
  8488  001E7A  1968               	xorwf	create_name@c& (0+255),w,b
  8489  001E7C  A4D8               	btfss	status,2,c
  8490  001E7E  D030               	goto	l896
  8491                           
  8492                           ; BSR set to: 0
  8493                           ;pff.c: 604: i = 8; ni = 11;
  8494                           
  8495                           ; BSR set to: 0
  8496                           
  8497                           ; BSR set to: 0
  8498  001E80  0E08               	movlw	8
  8499  001E82  6F67               	movwf	create_name@i& (0+255),b
  8500  001E84  0E0B               	movlw	11
  8501  001E86  6F63               	movwf	create_name@ni& (0+255),b
  8502                           
  8503                           ;pff.c: 605: continue;
  8504  001E88  D7D2               	goto	l892
  8505  001E8A                     l897:
  8506                           
  8507                           ; BSR set to: 0
  8508                           ;pff.c: 606: }
  8509                           ;pff.c: 609: if (c >= 0x80)
  8510                           
  8511                           ; BSR set to: 0
  8512  001E8A  0E7F               	movlw	127
  8513  001E8C  6568               	cpfsgt	create_name@c& (0+255),b
  8514  001E8E  D014               	goto	l905
  8515                           
  8516                           ; BSR set to: 0
  8517                           ;pff.c: 610: c = cvt[c - 0x80];
  8518  001E90  0E80               	movlw	128
  8519  001E92  6E26               	movwf	??_create_name& (0+255),c
  8520  001E94  0EFF               	movlw	255
  8521  001E96  6E27               	movwf	(??_create_name+1)& (0+255),c
  8522  001E98  5168               	movf	create_name@c& (0+255),w,b
  8523  001E9A  6E28               	movwf	(??_create_name+2)& (0+255),c
  8524  001E9C  6A29               	clrf	(??_create_name+3)& (0+255),c
  8525  001E9E  5026               	movf	??_create_name,w,c
  8526  001EA0  2628               	addwf	??_create_name+2,f,c
  8527  001EA2  5027               	movf	??_create_name+1,w,c
  8528  001EA4  2229               	addwfc	??_create_name+3,f,c
  8529  001EA6  0E83               	movlw	low create_name@cvt
  8530  001EA8  2428               	addwf	??_create_name+2,w,c
  8531  001EAA  6EF6               	movwf	tblptrl,c
  8532  001EAC  0E7E               	movlw	high create_name@cvt
  8533  001EAE  2029               	addwfc	??_create_name+3,w,c
  8534  001EB0  6EF7               	movwf	tblptrh,c
  8535  001EB2                     	if	0	;There are less than 3 active tblptr bytes
  8536  001EB2                     	endif
  8537  001EB2  0008               	tblrd		*
  8538  001EB4  CFF5 F068          	movff	tablat,create_name@c
  8539  001EB8                     l905:
  8540                           
  8541                           ; BSR set to: 0
  8542                           
  8543                           ; BSR set to: 0
  8544  001EB8  0E60               	movlw	96
  8545  001EBA  6568               	cpfsgt	create_name@c& (0+255),b
  8546  001EBC  D005               	goto	l907
  8547                           
  8548                           ; BSR set to: 0
  8549  001EBE  0E7B               	movlw	123
  8550  001EC0  6168               	cpfslt	create_name@c& (0+255),b
  8551  001EC2  D002               	goto	l907
  8552                           
  8553                           ; BSR set to: 0
  8554  001EC4  0E20               	movlw	32
  8555  001EC6  5F68               	subwf	create_name@c& (0+255),f,b
  8556  001EC8                     l907:
  8557                           
  8558                           ; BSR set to: 0
  8559                           ;pff.c: 620: sfn[i++] = c;
  8560                           
  8561                           ; BSR set to: 0
  8562  001EC8  5167               	movf	create_name@i& (0+255),w,b
  8563  001ECA  0D01               	mullw	1
  8564  001ECC  50F3               	movf	prodl,w,c
  8565  001ECE  2565               	addwf	create_name@sfn& (0+255),w,b
  8566  001ED0  6ED9               	movwf	fsr2l,c
  8567  001ED2  50F4               	movf	prodh,w,c
  8568  001ED4  2166               	addwfc	(create_name@sfn+1)& (0+255),w,b
  8569  001ED6  6EDA               	movwf	fsr2h,c
  8570  001ED8  C068  FFDF         	movff	create_name@c,indf2
  8571                           
  8572                           ; BSR set to: 0
  8573  001EDC  2B67               	incf	create_name@i& (0+255),f,b
  8574                           
  8575                           ; BSR set to: 0
  8576                           ;pff.c: 621: }
  8577                           ;pff.c: 622: }
  8578                           
  8579                           ; BSR set to: 0
  8580  001EDE  D7A7               	goto	l892
  8581  001EE0                     l896:
  8582                           
  8583                           ; BSR set to: 0
  8584                           ;pff.c: 623: *path = &p[si];
  8585                           
  8586                           ; BSR set to: 0
  8587  001EE0  5164               	movf	create_name@si& (0+255),w,b
  8588  001EE2  0D01               	mullw	1
  8589  001EE4  C061  F026         	movff	create_name@p,??_create_name
  8590  001EE8  C062  F027         	movff	create_name@p+1,??_create_name+1
  8591  001EEC  50F3               	movf	prodl,w,c
  8592  001EEE  2626               	addwf	??_create_name,f,c
  8593  001EF0  50F4               	movf	prodh,w,c
  8594  001EF2  2227               	addwfc	??_create_name+1,f,c
  8595  001EF4  C024  FFD9         	movff	create_name@path,fsr2l
  8596  001EF8  C025  FFDA         	movff	create_name@path+1,fsr2h
  8597  001EFC  C026  FFDE         	movff	??_create_name,postinc2
  8598  001F00  C027  FFDD         	movff	??_create_name+1,postdec2
  8599                           
  8600                           ; BSR set to: 0
  8601                           ;pff.c: 625: sfn[11] = (c <= ' ') ? 1 : 0;
  8602  001F04  EE20 F00B          	lfsr	2,11
  8603  001F08  5165               	movf	create_name@sfn& (0+255),w,b
  8604  001F0A  26D9               	addwf	fsr2l,f,c
  8605  001F0C  5166               	movf	(create_name@sfn+1)& (0+255),w,b
  8606  001F0E  22DA               	addwfc	fsr2h,f,c
  8607  001F10  0E20               	movlw	32
  8608  001F12  6568               	cpfsgt	create_name@c& (0+255),b
  8609  001F14  D001               	goto	u7401
  8610  001F16  D002               	goto	u7400
  8611  001F18                     u7401:
  8612  001F18  0E01               	movlw	1
  8613  001F1A  D001               	goto	u7410
  8614  001F1C                     u7400:
  8615  001F1C  0E00               	movlw	0
  8616  001F1E                     u7410:
  8617  001F1E  6EDF               	movwf	indf2,c
  8618                           
  8619                           ; BSR set to: 0
  8620                           ;pff.c: 627: return FR_OK;
  8621  001F20  0E00               	movlw	0
  8622  001F22  0012               	return	
  8623  001F24                     __end_of_create_name:
  8624                           	opt stack 0
  8625                           tosu	equ	0xFFF
  8626                           tosh	equ	0xFFE
  8627                           tosl	equ	0xFFD
  8628                           pclath	equ	0xFFA
  8629                           tblptru	equ	0xFF8
  8630                           tblptrh	equ	0xFF7
  8631                           tblptrl	equ	0xFF6
  8632                           tablat	equ	0xFF5
  8633                           prodh	equ	0xFF4
  8634                           prodl	equ	0xFF3
  8635                           intcon	equ	0xFF2
  8636                           intcon2	equ	0xFF1
  8637                           intcon3	equ	0xFF0
  8638                           postinc0	equ	0xFEE
  8639                           wreg	equ	0xFE8
  8640                           indf1	equ	0xFE7
  8641                           postinc1	equ	0xFE6
  8642                           postdec1	equ	0xFE5
  8643                           fsr1h	equ	0xFE2
  8644                           fsr1l	equ	0xFE1
  8645                           indf2	equ	0xFDF
  8646                           postinc2	equ	0xFDE
  8647                           postdec2	equ	0xFDD
  8648                           plusw2	equ	0xFDB
  8649                           fsr2h	equ	0xFDA
  8650                           fsr2l	equ	0xFD9
  8651                           status	equ	0xFD8
  8652                           
  8653 ;; *************** function _mem_set *****************
  8654 ;; Defined at:
  8655 ;;		line 329 in file "pff.c"
  8656 ;; Parameters:    Size  Location     Type
  8657 ;;  dst             2   25[COMRAM] PTR void 
  8658 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  8659 ;;  val             2   27[COMRAM] int 
  8660 ;;  cnt             2   29[COMRAM] int 
  8661 ;; Auto vars:     Size  Location     Type
  8662 ;;  d               2   31[COMRAM] PTR unsigned char 
  8663 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  8664 ;; Return value:  Size  Location     Type
  8665 ;;                  1    wreg      void 
  8666 ;; Registers used:
  8667 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8668 ;; Tracked objects:
  8669 ;;		On entry : 0/0
  8670 ;;		On exit  : 0/0
  8671 ;;		Unchanged: 0/0
  8672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8673 ;;      Params:         6       0       0       0       0       0       0       0       0
  8674 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8675 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8676 ;;      Totals:         8       0       0       0       0       0       0       0       0
  8677 ;;Total ram usage:        8 bytes
  8678 ;; Hardware stack levels used:    1
  8679 ;; Hardware stack levels required when called:    2
  8680 ;; This function calls:
  8681 ;;		Nothing
  8682 ;; This function is called by:
  8683 ;;		_create_name
  8684 ;; This function uses a non-reentrant model
  8685 ;;
  8686                           
  8687                           	psect	text36
  8688  002FDA                     __ptext36:
  8689                           	opt stack 0
  8690  002FDA                     _mem_set:
  8691                           	opt stack 23
  8692                           
  8693                           ;pff.c: 330: char *d = (char*)dst;
  8694                           
  8695                           ; BSR set to: 0
  8696                           ;incstack = 0
  8697  002FDA  C01A  F020         	movff	mem_set@dst,mem_set@d
  8698  002FDE  C01B  F021         	movff	mem_set@dst+1,mem_set@d+1
  8699                           
  8700                           ;pff.c: 331: while (cnt--) *d++ = (char)val;
  8701  002FE2  D008               	goto	l798
  8702  002FE4                     l6204:
  8703  002FE4  C020  FFD9         	movff	mem_set@d,fsr2l
  8704  002FE8  C021  FFDA         	movff	mem_set@d+1,fsr2h
  8705  002FEC  C01C  FFDF         	movff	mem_set@val,indf2
  8706  002FF0  4A20               	infsnz	mem_set@d,f,c
  8707  002FF2  2A21               	incf	mem_set@d+1,f,c
  8708  002FF4                     l798:
  8709  002FF4  061E               	decf	mem_set@cnt,f,c
  8710  002FF6  A0D8               	btfss	status,0,c
  8711  002FF8  061F               	decf	mem_set@cnt+1,f,c
  8712  002FFA  281E               	incf	mem_set@cnt,w,c
  8713  002FFC  E1F3               	bnz	l6204
  8714  002FFE  281F               	incf	mem_set@cnt+1,w,c
  8715  003000  B4D8               	btfsc	status,2,c
  8716  003002  0012               	return	
  8717  003004  D7EF               	goto	l799
  8718  003006                     __end_of_mem_set:
  8719                           	opt stack 0
  8720                           tosu	equ	0xFFF
  8721                           tosh	equ	0xFFE
  8722                           tosl	equ	0xFFD
  8723                           pclath	equ	0xFFA
  8724                           tblptru	equ	0xFF8
  8725                           tblptrh	equ	0xFF7
  8726                           tblptrl	equ	0xFF6
  8727                           tablat	equ	0xFF5
  8728                           prodh	equ	0xFF4
  8729                           prodl	equ	0xFF3
  8730                           intcon	equ	0xFF2
  8731                           intcon2	equ	0xFF1
  8732                           intcon3	equ	0xFF0
  8733                           postinc0	equ	0xFEE
  8734                           wreg	equ	0xFE8
  8735                           indf1	equ	0xFE7
  8736                           postinc1	equ	0xFE6
  8737                           postdec1	equ	0xFE5
  8738                           fsr1h	equ	0xFE2
  8739                           fsr1l	equ	0xFE1
  8740                           indf2	equ	0xFDF
  8741                           postinc2	equ	0xFDE
  8742                           postdec2	equ	0xFDD
  8743                           plusw2	equ	0xFDB
  8744                           fsr2h	equ	0xFDA
  8745                           fsr2l	equ	0xFD9
  8746                           status	equ	0xFD8
  8747                           
  8748 ;; *************** function _pf_mount *****************
  8749 ;; Defined at:
  8750 ;;		line 755 in file "pff.c"
  8751 ;; Parameters:    Size  Location     Type
  8752 ;;  fs              2   22[BANK0 ] PTR struct .
  8753 ;;		 -> SDCard@fs(42), 
  8754 ;; Auto vars:     Size  Location     Type
  8755 ;;  buf            36   46[BANK0 ] unsigned char [36]
  8756 ;;  fsize           4   94[BANK0 ] unsigned long 
  8757 ;;  bsect           4   90[BANK0 ] unsigned long 
  8758 ;;  mclst           4   86[BANK0 ] unsigned long 
  8759 ;;  tsect           4   82[BANK0 ] unsigned long 
  8760 ;;  fmt             1   98[BANK0 ] unsigned char 
  8761 ;; Return value:  Size  Location     Type
  8762 ;;                  1    wreg      enum E3838
  8763 ;; Registers used:
  8764 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8765 ;; Tracked objects:
  8766 ;;		On entry : 0/0
  8767 ;;		On exit  : 0/0
  8768 ;;		Unchanged: 0/0
  8769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8770 ;;      Params:         0       2       0       0       0       0       0       0       0
  8771 ;;      Locals:         0      53       0       0       0       0       0       0       0
  8772 ;;      Temps:          0      22       0       0       0       0       0       0       0
  8773 ;;      Totals:         0      77       0       0       0       0       0       0       0
  8774 ;;Total ram usage:       77 bytes
  8775 ;; Hardware stack levels used:    1
  8776 ;; Hardware stack levels required when called:    9
  8777 ;; This function calls:
  8778 ;;		___lldiv
  8779 ;;		___lmul
  8780 ;;		_check_fs
  8781 ;;		_disk_initialize
  8782 ;;		_disk_readp
  8783 ;; This function is called by:
  8784 ;;		_SDCard
  8785 ;; This function uses a non-reentrant model
  8786 ;;
  8787                           
  8788                           	psect	text37
  8789  000012                     __ptext37:
  8790                           	opt stack 0
  8791  000012                     _pf_mount:
  8792                           	opt stack 19
  8793                           
  8794                           ;pff.c: 759: BYTE fmt, buf[36];
  8795                           ;pff.c: 760: DWORD bsect, fsize, tsect, mclst;
  8796                           ;pff.c: 763: FatFs = 0;
  8797                           
  8798                           ;incstack = 0
  8799  000012  0E00               	movlw	0
  8800  000014  6E35               	movwf	_FatFs,c
  8801  000016  0E00               	movlw	0
  8802  000018  6E36               	movwf	_FatFs+1,c
  8803                           
  8804                           ;pff.c: 764: if (disk_initialize() & 0x01)
  8805  00001A  ECE2  F00A         	call	_disk_initialize	;wreg free
  8806  00001E  0100               	movlb	0	; () banked
  8807  000020  6F78               	movwf	??_pf_mount& (0+255),b
  8808  000022  A178               	btfss	??_pf_mount& (0+255),0,b
  8809  000024  D002               	goto	l945
  8810                           
  8811                           ; BSR set to: 0
  8812                           ;pff.c: 765: return FR_NOT_READY;
  8813  000026  0E02               	movlw	2
  8814                           
  8815                           ; BSR set to: 0
  8816  000028  0012               	return	
  8817  00002A                     l945:
  8818                           
  8819                           ; BSR set to: 0
  8820                           ;pff.c: 767: bsect = 0;
  8821                           
  8822                           ; BSR set to: 0
  8823  00002A  0E00               	movlw	0
  8824  00002C  6FBA               	movwf	pf_mount@bsect& (0+255),b
  8825  00002E  0E00               	movlw	0
  8826  000030  6FBB               	movwf	(pf_mount@bsect+1)& (0+255),b
  8827  000032  0E00               	movlw	0
  8828  000034  6FBC               	movwf	(pf_mount@bsect+2)& (0+255),b
  8829  000036  0E00               	movlw	0
  8830  000038  6FBD               	movwf	(pf_mount@bsect+3)& (0+255),b
  8831                           
  8832                           ; BSR set to: 0
  8833                           ;pff.c: 768: fmt = check_fs(buf, bsect);
  8834  00003A  0E8E               	movlw	low pf_mount@buf
  8835  00003C  6F6C               	movwf	check_fs@buf& (0+255),b
  8836  00003E  0E00               	movlw	high pf_mount@buf
  8837  000040  6F6D               	movwf	(check_fs@buf+1)& (0+255),b
  8838  000042  C0BA  F06E         	movff	pf_mount@bsect,check_fs@sect
  8839  000046  C0BB  F06F         	movff	pf_mount@bsect+1,check_fs@sect+1
  8840  00004A  C0BC  F070         	movff	pf_mount@bsect+2,check_fs@sect+2
  8841  00004E  C0BD  F071         	movff	pf_mount@bsect+3,check_fs@sect+3
  8842  000052  EC9C  F00D         	call	_check_fs	;wreg free
  8843  000056  0100               	movlb	0	; () banked
  8844  000058  6FC2               	movwf	pf_mount@fmt& (0+255),b
  8845                           
  8846                           ; BSR set to: 0
  8847                           ;pff.c: 769: if (fmt == 1) {
  8848  00005A  05C2               	decf	pf_mount@fmt& (0+255),w,b
  8849  00005C  A4D8               	btfss	status,2,c
  8850  00005E  D068               	goto	l950
  8851                           
  8852                           ; BSR set to: 0
  8853                           ;pff.c: 771: if (disk_readp(buf, bsect, 446, 16)) {
  8854  000060  0E8E               	movlw	low pf_mount@buf
  8855  000062  6E23               	movwf	disk_readp@rd,c
  8856  000064  0E00               	movlw	high pf_mount@buf
  8857  000066  6E24               	movwf	disk_readp@rd+1,c
  8858  000068  C0BA  F025         	movff	pf_mount@bsect,disk_readp@sector
  8859  00006C  C0BB  F026         	movff	pf_mount@bsect+1,disk_readp@sector+1
  8860  000070  C0BC  F027         	movff	pf_mount@bsect+2,disk_readp@sector+2
  8861  000074  C0BD  F028         	movff	pf_mount@bsect+3,disk_readp@sector+3
  8862  000078  0E01               	movlw	1
  8863  00007A  6E2A               	movwf	disk_readp@offset+1,c
  8864  00007C  0EBE               	movlw	190
  8865  00007E  6E29               	movwf	disk_readp@offset,c
  8866  000080  0E00               	movlw	0
  8867  000082  6E2C               	movwf	disk_readp@count+1,c
  8868  000084  0E10               	movlw	16
  8869  000086  6E2B               	movwf	disk_readp@count,c
  8870  000088  EC3C  F009         	call	_disk_readp	;wreg free
  8871  00008C  0900               	iorlw	0
  8872  00008E  B4D8               	btfsc	status,2,c
  8873  000090  D002               	goto	l948
  8874                           
  8875                           ;pff.c: 772: fmt = 3;
  8876  000092  0E03               	movlw	3
  8877  000094  D04B               	goto	L4
  8878  000096                     l948:
  8879                           
  8880                           ;pff.c: 774: if (buf[4]) {
  8881                           
  8882                           ; BSR set to: 0
  8883  000096  0100               	movlb	0	; () banked
  8884  000098  5192               	movf	(pf_mount@buf+4)& (0+255),w,b
  8885  00009A  B4D8               	btfsc	status,2,c
  8886  00009C  D049               	goto	l950
  8887                           
  8888                           ; BSR set to: 0
  8889                           ;pff.c: 775: bsect = (DWORD)(((DWORD)*((BYTE*)(&buf[8])+3)<<24)|((DWORD)*((BYTE*)(&buf[8
      +                          ])+2)<<16)|((WORD)*((BYTE*)(&buf[8])+1)<<8)|*(BYTE*)(&buf[8]));
  8890  00009E  5197               	movf	(pf_mount@buf+9)& (0+255),w,b
  8891  0000A0  6F79               	movwf	(??_pf_mount+1)& (0+255),b
  8892  0000A2  6B78               	clrf	??_pf_mount& (0+255),b
  8893  0000A4  C098  F07A         	movff	pf_mount@buf+10,??_pf_mount+2
  8894  0000A8  6B7B               	clrf	(??_pf_mount+3)& (0+255),b
  8895  0000AA  6B7C               	clrf	(??_pf_mount+4)& (0+255),b
  8896  0000AC  6B7D               	clrf	(??_pf_mount+5)& (0+255),b
  8897  0000AE  C07B  F07D         	movff	??_pf_mount+3,??_pf_mount+5
  8898  0000B2  C07A  F07C         	movff	??_pf_mount+2,??_pf_mount+4
  8899  0000B6  6B7B               	clrf	(??_pf_mount+3)& (0+255),b
  8900  0000B8  6B7A               	clrf	(??_pf_mount+2)& (0+255),b
  8901  0000BA  C099  F07E         	movff	pf_mount@buf+11,??_pf_mount+6
  8902  0000BE  6B7F               	clrf	(??_pf_mount+7)& (0+255),b
  8903  0000C0  6B80               	clrf	(??_pf_mount+8)& (0+255),b
  8904  0000C2  6B81               	clrf	(??_pf_mount+9)& (0+255),b
  8905  0000C4  C07E  F081         	movff	??_pf_mount+6,??_pf_mount+9
  8906  0000C8  6B80               	clrf	(??_pf_mount+8)& (0+255),b
  8907  0000CA  6B7F               	clrf	(??_pf_mount+7)& (0+255),b
  8908  0000CC  6B7E               	clrf	(??_pf_mount+6)& (0+255),b
  8909  0000CE  517A               	movf	(??_pf_mount+2)& (0+255),w,b
  8910  0000D0  117E               	iorwf	(??_pf_mount+6)& (0+255),w,b
  8911  0000D2  6F82               	movwf	(??_pf_mount+10)& (0+255),b
  8912  0000D4  517B               	movf	(??_pf_mount+3)& (0+255),w,b
  8913  0000D6  117F               	iorwf	(??_pf_mount+7)& (0+255),w,b
  8914  0000D8  6F83               	movwf	(??_pf_mount+11)& (0+255),b
  8915  0000DA  517C               	movf	(??_pf_mount+4)& (0+255),w,b
  8916  0000DC  1180               	iorwf	(??_pf_mount+8)& (0+255),w,b
  8917  0000DE  6F84               	movwf	(??_pf_mount+12)& (0+255),b
  8918  0000E0  517D               	movf	(??_pf_mount+5)& (0+255),w,b
  8919  0000E2  1181               	iorwf	(??_pf_mount+9)& (0+255),w,b
  8920  0000E4  6F85               	movwf	(??_pf_mount+13)& (0+255),b
  8921  0000E6  5178               	movf	??_pf_mount& (0+255),w,b
  8922  0000E8  1182               	iorwf	(??_pf_mount+10)& (0+255),w,b
  8923  0000EA  6F86               	movwf	(??_pf_mount+14)& (0+255),b
  8924  0000EC  5179               	movf	(??_pf_mount+1)& (0+255),w,b
  8925  0000EE  1183               	iorwf	(??_pf_mount+11)& (0+255),w,b
  8926  0000F0  6F87               	movwf	(??_pf_mount+15)& (0+255),b
  8927  0000F2  0E00               	movlw	0
  8928  0000F4  1184               	iorwf	(??_pf_mount+12)& (0+255),w,b
  8929  0000F6  6F88               	movwf	(??_pf_mount+16)& (0+255),b
  8930  0000F8  0E00               	movlw	0
  8931  0000FA  1185               	iorwf	(??_pf_mount+13)& (0+255),w,b
  8932  0000FC  6F89               	movwf	(??_pf_mount+17)& (0+255),b
  8933  0000FE  5196               	movf	(pf_mount@buf+8)& (0+255),w,b
  8934  000100  1186               	iorwf	(??_pf_mount+14)& (0+255),w,b
  8935  000102  6FBA               	movwf	pf_mount@bsect& (0+255),b
  8936  000104  5187               	movf	(??_pf_mount+15)& (0+255),w,b
  8937  000106  6FBB               	movwf	(pf_mount@bsect+1)& (0+255),b
  8938  000108  5188               	movf	(??_pf_mount+16)& (0+255),w,b
  8939  00010A  6FBC               	movwf	(pf_mount@bsect+2)& (0+255),b
  8940  00010C  5189               	movf	(??_pf_mount+17)& (0+255),w,b
  8941  00010E  6FBD               	movwf	(pf_mount@bsect+3)& (0+255),b
  8942                           
  8943                           ; BSR set to: 0
  8944                           ;pff.c: 776: fmt = check_fs(buf, bsect);
  8945  000110  0E8E               	movlw	low pf_mount@buf
  8946  000112  6F6C               	movwf	check_fs@buf& (0+255),b
  8947  000114  0E00               	movlw	high pf_mount@buf
  8948  000116  6F6D               	movwf	(check_fs@buf+1)& (0+255),b
  8949  000118  C0BA  F06E         	movff	pf_mount@bsect,check_fs@sect
  8950  00011C  C0BB  F06F         	movff	pf_mount@bsect+1,check_fs@sect+1
  8951  000120  C0BC  F070         	movff	pf_mount@bsect+2,check_fs@sect+2
  8952  000124  C0BD  F071         	movff	pf_mount@bsect+3,check_fs@sect+3
  8953  000128  EC9C  F00D         	call	_check_fs	;wreg free
  8954  00012C                     L4:
  8955  00012C  0100               	movlb	0	; () banked
  8956  00012E  6FC2               	movwf	pf_mount@fmt& (0+255),b
  8957  000130                     l950:
  8958                           
  8959                           ; BSR set to: 0
  8960                           ;pff.c: 777: }
  8961                           ;pff.c: 778: }
  8962                           ;pff.c: 779: }
  8963                           ;pff.c: 780: if (fmt == 3) return FR_DISK_ERR;
  8964                           
  8965                           ; BSR set to: 0
  8966                           
  8967                           ; BSR set to: 0
  8968                           
  8969                           ; BSR set to: 0
  8970  000130  0E03               	movlw	3
  8971  000132  19C2               	xorwf	pf_mount@fmt& (0+255),w,b
  8972  000134  A4D8               	btfss	status,2,c
  8973  000136  D002               	goto	l951
  8974                           
  8975                           ; BSR set to: 0
  8976  000138  0E01               	movlw	1
  8977                           
  8978                           ; BSR set to: 0
  8979  00013A  0012               	return	
  8980  00013C                     l951:
  8981                           
  8982                           ; BSR set to: 0
  8983                           ;pff.c: 781: if (fmt) return FR_NO_FILESYSTEM;
  8984                           
  8985                           ; BSR set to: 0
  8986  00013C  51C2               	movf	pf_mount@fmt& (0+255),w,b
  8987  00013E  B4D8               	btfsc	status,2,c
  8988  000140  D002               	goto	l952
  8989                           
  8990                           ; BSR set to: 0
  8991  000142  0E06               	movlw	6
  8992                           
  8993                           ; BSR set to: 0
  8994  000144  0012               	return	
  8995  000146                     l952:
  8996                           
  8997                           ; BSR set to: 0
  8998                           ;pff.c: 784: if (disk_readp(buf, bsect, 13, sizeof (buf))) return FR_DISK_ERR;
  8999                           
  9000                           ; BSR set to: 0
  9001  000146  0E8E               	movlw	low pf_mount@buf
  9002  000148  6E23               	movwf	disk_readp@rd,c
  9003  00014A  0E00               	movlw	high pf_mount@buf
  9004  00014C  6E24               	movwf	disk_readp@rd+1,c
  9005  00014E  C0BA  F025         	movff	pf_mount@bsect,disk_readp@sector
  9006  000152  C0BB  F026         	movff	pf_mount@bsect+1,disk_readp@sector+1
  9007  000156  C0BC  F027         	movff	pf_mount@bsect+2,disk_readp@sector+2
  9008  00015A  C0BD  F028         	movff	pf_mount@bsect+3,disk_readp@sector+3
  9009  00015E  0E00               	movlw	0
  9010  000160  6E2A               	movwf	disk_readp@offset+1,c
  9011  000162  0E0D               	movlw	13
  9012  000164  6E29               	movwf	disk_readp@offset,c
  9013  000166  0E00               	movlw	0
  9014  000168  6E2C               	movwf	disk_readp@count+1,c
  9015  00016A  0E24               	movlw	36
  9016  00016C  6E2B               	movwf	disk_readp@count,c
  9017  00016E  EC3C  F009         	call	_disk_readp	;wreg free
  9018  000172  0900               	iorlw	0
  9019  000174  B4D8               	btfsc	status,2,c
  9020  000176  D002               	goto	l953
  9021  000178  0E01               	movlw	1
  9022  00017A  0012               	return	
  9023  00017C                     l953:
  9024                           
  9025                           ;pff.c: 786: fsize = (WORD)(((WORD)*((BYTE*)(buf+22-13)+1)<<8)|(WORD)*(BYTE*)(buf+22-13)
      +                          );
  9026  00017C  0100               	movlb	0	; () banked
  9027  00017E  5197               	movf	(pf_mount@buf+9)& (0+255),w,b
  9028  000180  C098  F078         	movff	pf_mount@buf+10,??_pf_mount
  9029  000184  6B79               	clrf	(??_pf_mount+1)& (0+255),b
  9030  000186  C078  F079         	movff	??_pf_mount,??_pf_mount+1
  9031  00018A  6B78               	clrf	??_pf_mount& (0+255),b
  9032  00018C  1378               	iorwf	??_pf_mount& (0+255),f,b
  9033  00018E  0E00               	movlw	0
  9034  000190  1379               	iorwf	(??_pf_mount+1)& (0+255),f,b
  9035  000192  C078  F0BE         	movff	??_pf_mount,pf_mount@fsize
  9036  000196  C079  F0BF         	movff	??_pf_mount+1,pf_mount@fsize+1
  9037  00019A  6BC0               	clrf	(pf_mount@fsize+2)& (0+255),b
  9038  00019C  6BC1               	clrf	(pf_mount@fsize+3)& (0+255),b
  9039                           
  9040                           ;pff.c: 787: if (!fsize) fsize = (DWORD)(((DWORD)*((BYTE*)(buf+36-13)+3)<<24)|((DWORD)*(
      +                          (BYTE*)(buf+36-13)+2)<<16)|((WORD)*((BYTE*)(buf+36-13)+1)<<8)|*(BYTE*)(buf+36-13));
  9041  00019E  51BE               	movf	pf_mount@fsize& (0+255),w,b
  9042  0001A0  11BF               	iorwf	(pf_mount@fsize+1)& (0+255),w,b
  9043  0001A2  11C0               	iorwf	(pf_mount@fsize+2)& (0+255),w,b
  9044  0001A4  11C1               	iorwf	(pf_mount@fsize+3)& (0+255),w,b
  9045  0001A6  A4D8               	btfss	status,2,c
  9046  0001A8  D039               	goto	l954
  9047                           
  9048                           ; BSR set to: 0
  9049  0001AA  51A6               	movf	(pf_mount@buf+24)& (0+255),w,b
  9050  0001AC  6F79               	movwf	(??_pf_mount+1)& (0+255),b
  9051  0001AE  6B78               	clrf	??_pf_mount& (0+255),b
  9052  0001B0  C0A7  F07A         	movff	pf_mount@buf+25,??_pf_mount+2
  9053  0001B4  6B7B               	clrf	(??_pf_mount+3)& (0+255),b
  9054  0001B6  6B7C               	clrf	(??_pf_mount+4)& (0+255),b
  9055  0001B8  6B7D               	clrf	(??_pf_mount+5)& (0+255),b
  9056  0001BA  C07B  F07D         	movff	??_pf_mount+3,??_pf_mount+5
  9057  0001BE  C07A  F07C         	movff	??_pf_mount+2,??_pf_mount+4
  9058  0001C2  6B7B               	clrf	(??_pf_mount+3)& (0+255),b
  9059  0001C4  6B7A               	clrf	(??_pf_mount+2)& (0+255),b
  9060  0001C6  C0A8  F07E         	movff	pf_mount@buf+26,??_pf_mount+6
  9061  0001CA  6B7F               	clrf	(??_pf_mount+7)& (0+255),b
  9062  0001CC  6B80               	clrf	(??_pf_mount+8)& (0+255),b
  9063  0001CE  6B81               	clrf	(??_pf_mount+9)& (0+255),b
  9064  0001D0  C07E  F081         	movff	??_pf_mount+6,??_pf_mount+9
  9065  0001D4  6B80               	clrf	(??_pf_mount+8)& (0+255),b
  9066  0001D6  6B7F               	clrf	(??_pf_mount+7)& (0+255),b
  9067  0001D8  6B7E               	clrf	(??_pf_mount+6)& (0+255),b
  9068  0001DA  517A               	movf	(??_pf_mount+2)& (0+255),w,b
  9069  0001DC  117E               	iorwf	(??_pf_mount+6)& (0+255),w,b
  9070  0001DE  6F82               	movwf	(??_pf_mount+10)& (0+255),b
  9071  0001E0  517B               	movf	(??_pf_mount+3)& (0+255),w,b
  9072  0001E2  117F               	iorwf	(??_pf_mount+7)& (0+255),w,b
  9073  0001E4  6F83               	movwf	(??_pf_mount+11)& (0+255),b
  9074  0001E6  517C               	movf	(??_pf_mount+4)& (0+255),w,b
  9075  0001E8  1180               	iorwf	(??_pf_mount+8)& (0+255),w,b
  9076  0001EA  6F84               	movwf	(??_pf_mount+12)& (0+255),b
  9077  0001EC  517D               	movf	(??_pf_mount+5)& (0+255),w,b
  9078  0001EE  1181               	iorwf	(??_pf_mount+9)& (0+255),w,b
  9079  0001F0  6F85               	movwf	(??_pf_mount+13)& (0+255),b
  9080  0001F2  5178               	movf	??_pf_mount& (0+255),w,b
  9081  0001F4  1182               	iorwf	(??_pf_mount+10)& (0+255),w,b
  9082  0001F6  6F86               	movwf	(??_pf_mount+14)& (0+255),b
  9083  0001F8  5179               	movf	(??_pf_mount+1)& (0+255),w,b
  9084  0001FA  1183               	iorwf	(??_pf_mount+11)& (0+255),w,b
  9085  0001FC  6F87               	movwf	(??_pf_mount+15)& (0+255),b
  9086  0001FE  0E00               	movlw	0
  9087  000200  1184               	iorwf	(??_pf_mount+12)& (0+255),w,b
  9088  000202  6F88               	movwf	(??_pf_mount+16)& (0+255),b
  9089  000204  0E00               	movlw	0
  9090  000206  1185               	iorwf	(??_pf_mount+13)& (0+255),w,b
  9091  000208  6F89               	movwf	(??_pf_mount+17)& (0+255),b
  9092  00020A  51A5               	movf	(pf_mount@buf+23)& (0+255),w,b
  9093  00020C  1186               	iorwf	(??_pf_mount+14)& (0+255),w,b
  9094  00020E  6FBE               	movwf	pf_mount@fsize& (0+255),b
  9095  000210  5187               	movf	(??_pf_mount+15)& (0+255),w,b
  9096  000212  6FBF               	movwf	(pf_mount@fsize+1)& (0+255),b
  9097  000214  5188               	movf	(??_pf_mount+16)& (0+255),w,b
  9098  000216  6FC0               	movwf	(pf_mount@fsize+2)& (0+255),b
  9099  000218  5189               	movf	(??_pf_mount+17)& (0+255),w,b
  9100  00021A  6FC1               	movwf	(pf_mount@fsize+3)& (0+255),b
  9101  00021C                     l954:
  9102                           
  9103                           ; BSR set to: 0
  9104                           ;pff.c: 789: fsize *= buf[16-13];
  9105                           
  9106                           ; BSR set to: 0
  9107  00021C  C0BE  F01A         	movff	pf_mount@fsize,___lmul@multiplier
  9108  000220  C0BF  F01B         	movff	pf_mount@fsize+1,___lmul@multiplier+1
  9109  000224  C0C0  F01C         	movff	pf_mount@fsize+2,___lmul@multiplier+2
  9110  000228  C0C1  F01D         	movff	pf_mount@fsize+3,___lmul@multiplier+3
  9111  00022C  5191               	movf	(pf_mount@buf+3)& (0+255),w,b
  9112  00022E  6E1E               	movwf	___lmul@multiplicand,c
  9113  000230  6A1F               	clrf	___lmul@multiplicand+1,c
  9114  000232  6A20               	clrf	___lmul@multiplicand+2,c
  9115  000234  6A21               	clrf	___lmul@multiplicand+3,c
  9116  000236  EC0C  F017         	call	___lmul	;wreg free
  9117  00023A  C01A  F0BE         	movff	?___lmul,pf_mount@fsize
  9118  00023E  C01B  F0BF         	movff	?___lmul+1,pf_mount@fsize+1
  9119  000242  C01C  F0C0         	movff	?___lmul+2,pf_mount@fsize+2
  9120  000246  C01D  F0C1         	movff	?___lmul+3,pf_mount@fsize+3
  9121                           
  9122                           ;pff.c: 790: fs->fatbase = bsect + (WORD)(((WORD)*((BYTE*)(buf+14-13)+1)<<8)|(WORD)*(BYT
      +                          E*)(buf+14-13));
  9123  00024A  0100               	movlb	0	; () banked
  9124  00024C  518F               	movf	(pf_mount@buf+1)& (0+255),w,b
  9125  00024E  C090  F078         	movff	pf_mount@buf+2,??_pf_mount
  9126  000252  6B79               	clrf	(??_pf_mount+1)& (0+255),b
  9127  000254  C078  F079         	movff	??_pf_mount,??_pf_mount+1
  9128  000258  6B78               	clrf	??_pf_mount& (0+255),b
  9129  00025A  1378               	iorwf	??_pf_mount& (0+255),f,b
  9130  00025C  0E00               	movlw	0
  9131  00025E  1379               	iorwf	(??_pf_mount+1)& (0+255),f,b
  9132  000260  5178               	movf	??_pf_mount& (0+255),w,b
  9133  000262  25BA               	addwf	pf_mount@bsect& (0+255),w,b
  9134  000264  6F7A               	movwf	(??_pf_mount+2)& (0+255),b
  9135  000266  5179               	movf	(??_pf_mount+1)& (0+255),w,b
  9136  000268  21BB               	addwfc	(pf_mount@bsect+1)& (0+255),w,b
  9137  00026A  6F7B               	movwf	(??_pf_mount+3)& (0+255),b
  9138  00026C  0E00               	movlw	0
  9139  00026E  21BC               	addwfc	(pf_mount@bsect+2)& (0+255),w,b
  9140  000270  6F7C               	movwf	(??_pf_mount+4)& (0+255),b
  9141  000272  0E00               	movlw	0
  9142  000274  21BD               	addwfc	(pf_mount@bsect+3)& (0+255),w,b
  9143  000276  6F7D               	movwf	(??_pf_mount+5)& (0+255),b
  9144  000278  EE20 F00A          	lfsr	2,10
  9145  00027C  5176               	movf	pf_mount@fs& (0+255),w,b
  9146  00027E  26D9               	addwf	fsr2l,f,c
  9147  000280  5177               	movf	(pf_mount@fs+1)& (0+255),w,b
  9148  000282  22DA               	addwfc	fsr2h,f,c
  9149  000284  C07A  FFDE         	movff	??_pf_mount+2,postinc2
  9150  000288  C07B  FFDE         	movff	??_pf_mount+3,postinc2
  9151  00028C  C07C  FFDE         	movff	??_pf_mount+4,postinc2
  9152  000290  C07D  FFDE         	movff	??_pf_mount+5,postinc2
  9153                           
  9154                           ; BSR set to: 0
  9155                           ;pff.c: 791: fs->csize = buf[13-13];
  9156  000294  EE20 F002          	lfsr	2,2
  9157  000298  5176               	movf	pf_mount@fs& (0+255),w,b
  9158  00029A  26D9               	addwf	fsr2l,f,c
  9159  00029C  5177               	movf	(pf_mount@fs+1)& (0+255),w,b
  9160  00029E  22DA               	addwfc	fsr2h,f,c
  9161  0002A0  C08E  FFDF         	movff	pf_mount@buf,indf2
  9162                           
  9163                           ; BSR set to: 0
  9164                           ;pff.c: 792: fs->n_rootdir = (WORD)(((WORD)*((BYTE*)(buf+17-13)+1)<<8)|(WORD)*(BYTE*)(bu
      +                          f+17-13));
  9165  0002A4  5192               	movf	(pf_mount@buf+4)& (0+255),w,b
  9166  0002A6  C093  F078         	movff	pf_mount@buf+5,??_pf_mount
  9167  0002AA  6B79               	clrf	(??_pf_mount+1)& (0+255),b
  9168  0002AC  C078  F079         	movff	??_pf_mount,??_pf_mount+1
  9169  0002B0  6B78               	clrf	??_pf_mount& (0+255),b
  9170  0002B2  1378               	iorwf	??_pf_mount& (0+255),f,b
  9171  0002B4  0E00               	movlw	0
  9172  0002B6  1379               	iorwf	(??_pf_mount+1)& (0+255),f,b
  9173  0002B8  EE20 F004          	lfsr	2,4
  9174  0002BC  5176               	movf	pf_mount@fs& (0+255),w,b
  9175  0002BE  26D9               	addwf	fsr2l,f,c
  9176  0002C0  5177               	movf	(pf_mount@fs+1)& (0+255),w,b
  9177  0002C2  22DA               	addwfc	fsr2h,f,c
  9178  0002C4  C078  FFDE         	movff	??_pf_mount,postinc2
  9179  0002C8  C079  FFDD         	movff	??_pf_mount+1,postdec2
  9180                           
  9181                           ; BSR set to: 0
  9182                           ;pff.c: 793: tsect = (WORD)(((WORD)*((BYTE*)(buf+19-13)+1)<<8)|(WORD)*(BYTE*)(buf+19-13)
      +                          );
  9183  0002CC  5194               	movf	(pf_mount@buf+6)& (0+255),w,b
  9184  0002CE  C095  F078         	movff	pf_mount@buf+7,??_pf_mount
  9185  0002D2  6B79               	clrf	(??_pf_mount+1)& (0+255),b
  9186  0002D4  C078  F079         	movff	??_pf_mount,??_pf_mount+1
  9187  0002D8  6B78               	clrf	??_pf_mount& (0+255),b
  9188  0002DA  1378               	iorwf	??_pf_mount& (0+255),f,b
  9189  0002DC  0E00               	movlw	0
  9190  0002DE  1379               	iorwf	(??_pf_mount+1)& (0+255),f,b
  9191  0002E0  C078  F0B2         	movff	??_pf_mount,pf_mount@tsect
  9192  0002E4  C079  F0B3         	movff	??_pf_mount+1,pf_mount@tsect+1
  9193  0002E8  6BB4               	clrf	(pf_mount@tsect+2)& (0+255),b
  9194  0002EA  6BB5               	clrf	(pf_mount@tsect+3)& (0+255),b
  9195                           
  9196                           ; BSR set to: 0
  9197                           ;pff.c: 794: if (!tsect) tsect = (DWORD)(((DWORD)*((BYTE*)(buf+32-13)+3)<<24)|((DWORD)*(
      +                          (BYTE*)(buf+32-13)+2)<<16)|((WORD)*((BYTE*)(buf+32-13)+1)<<8)|*(BYTE*)(buf+32-13));
  9198  0002EC  51B2               	movf	pf_mount@tsect& (0+255),w,b
  9199  0002EE  11B3               	iorwf	(pf_mount@tsect+1)& (0+255),w,b
  9200  0002F0  11B4               	iorwf	(pf_mount@tsect+2)& (0+255),w,b
  9201  0002F2  11B5               	iorwf	(pf_mount@tsect+3)& (0+255),w,b
  9202  0002F4  A4D8               	btfss	status,2,c
  9203  0002F6  D039               	goto	l955
  9204                           
  9205                           ; BSR set to: 0
  9206  0002F8  51A2               	movf	(pf_mount@buf+20)& (0+255),w,b
  9207  0002FA  6F79               	movwf	(??_pf_mount+1)& (0+255),b
  9208  0002FC  6B78               	clrf	??_pf_mount& (0+255),b
  9209  0002FE  C0A3  F07A         	movff	pf_mount@buf+21,??_pf_mount+2
  9210  000302  6B7B               	clrf	(??_pf_mount+3)& (0+255),b
  9211  000304  6B7C               	clrf	(??_pf_mount+4)& (0+255),b
  9212  000306  6B7D               	clrf	(??_pf_mount+5)& (0+255),b
  9213  000308  C07B  F07D         	movff	??_pf_mount+3,??_pf_mount+5
  9214  00030C  C07A  F07C         	movff	??_pf_mount+2,??_pf_mount+4
  9215  000310  6B7B               	clrf	(??_pf_mount+3)& (0+255),b
  9216  000312  6B7A               	clrf	(??_pf_mount+2)& (0+255),b
  9217  000314  C0A4  F07E         	movff	pf_mount@buf+22,??_pf_mount+6
  9218  000318  6B7F               	clrf	(??_pf_mount+7)& (0+255),b
  9219  00031A  6B80               	clrf	(??_pf_mount+8)& (0+255),b
  9220  00031C  6B81               	clrf	(??_pf_mount+9)& (0+255),b
  9221  00031E  C07E  F081         	movff	??_pf_mount+6,??_pf_mount+9
  9222  000322  6B80               	clrf	(??_pf_mount+8)& (0+255),b
  9223  000324  6B7F               	clrf	(??_pf_mount+7)& (0+255),b
  9224  000326  6B7E               	clrf	(??_pf_mount+6)& (0+255),b
  9225  000328  517A               	movf	(??_pf_mount+2)& (0+255),w,b
  9226  00032A  117E               	iorwf	(??_pf_mount+6)& (0+255),w,b
  9227  00032C  6F82               	movwf	(??_pf_mount+10)& (0+255),b
  9228  00032E  517B               	movf	(??_pf_mount+3)& (0+255),w,b
  9229  000330  117F               	iorwf	(??_pf_mount+7)& (0+255),w,b
  9230  000332  6F83               	movwf	(??_pf_mount+11)& (0+255),b
  9231  000334  517C               	movf	(??_pf_mount+4)& (0+255),w,b
  9232  000336  1180               	iorwf	(??_pf_mount+8)& (0+255),w,b
  9233  000338  6F84               	movwf	(??_pf_mount+12)& (0+255),b
  9234  00033A  517D               	movf	(??_pf_mount+5)& (0+255),w,b
  9235  00033C  1181               	iorwf	(??_pf_mount+9)& (0+255),w,b
  9236  00033E  6F85               	movwf	(??_pf_mount+13)& (0+255),b
  9237  000340  5178               	movf	??_pf_mount& (0+255),w,b
  9238  000342  1182               	iorwf	(??_pf_mount+10)& (0+255),w,b
  9239  000344  6F86               	movwf	(??_pf_mount+14)& (0+255),b
  9240  000346  5179               	movf	(??_pf_mount+1)& (0+255),w,b
  9241  000348  1183               	iorwf	(??_pf_mount+11)& (0+255),w,b
  9242  00034A  6F87               	movwf	(??_pf_mount+15)& (0+255),b
  9243  00034C  0E00               	movlw	0
  9244  00034E  1184               	iorwf	(??_pf_mount+12)& (0+255),w,b
  9245  000350  6F88               	movwf	(??_pf_mount+16)& (0+255),b
  9246  000352  0E00               	movlw	0
  9247  000354  1185               	iorwf	(??_pf_mount+13)& (0+255),w,b
  9248  000356  6F89               	movwf	(??_pf_mount+17)& (0+255),b
  9249  000358  51A1               	movf	(pf_mount@buf+19)& (0+255),w,b
  9250  00035A  1186               	iorwf	(??_pf_mount+14)& (0+255),w,b
  9251  00035C  6FB2               	movwf	pf_mount@tsect& (0+255),b
  9252  00035E  5187               	movf	(??_pf_mount+15)& (0+255),w,b
  9253  000360  6FB3               	movwf	(pf_mount@tsect+1)& (0+255),b
  9254  000362  5188               	movf	(??_pf_mount+16)& (0+255),w,b
  9255  000364  6FB4               	movwf	(pf_mount@tsect+2)& (0+255),b
  9256  000366  5189               	movf	(??_pf_mount+17)& (0+255),w,b
  9257  000368  6FB5               	movwf	(pf_mount@tsect+3)& (0+255),b
  9258  00036A                     l955:
  9259                           
  9260                           ; BSR set to: 0
  9261                           ;pff.c: 795: mclst = (tsect
  9262                           ;pff.c: 796: - (WORD)(((WORD)*((BYTE*)(buf+14-13)+1)<<8)|(WORD)*(BYTE*)(buf+14-13)) - fs
      +                          ize - fs->n_rootdir / 16
  9263                           ;pff.c: 797: ) / fs->csize + 2;
  9264                           
  9265                           ; BSR set to: 0
  9266  00036A  EE20 F004          	lfsr	2,4
  9267  00036E  5176               	movf	pf_mount@fs& (0+255),w,b
  9268  000370  26D9               	addwf	fsr2l,f,c
  9269  000372  5177               	movf	(pf_mount@fs+1)& (0+255),w,b
  9270  000374  22DA               	addwfc	fsr2h,f,c
  9271  000376  CFDE F078          	movff	postinc2,??_pf_mount
  9272  00037A  CFDD F079          	movff	postdec2,??_pf_mount+1
  9273  00037E  0E04               	movlw	4
  9274  000380  6F7A               	movwf	(??_pf_mount+2)& (0+255),b
  9275  000382                     u7795:
  9276  000382  90D8               	bcf	status,0,c
  9277  000384  3379               	rrcf	(??_pf_mount+1)& (0+255),f,b
  9278  000386  3378               	rrcf	??_pf_mount& (0+255),f,b
  9279  000388  2F7A               	decfsz	(??_pf_mount+2)& (0+255),f,b
  9280  00038A  D7FB               	goto	u7795
  9281  00038C  518F               	movf	(pf_mount@buf+1)& (0+255),w,b
  9282  00038E  C090  F07B         	movff	pf_mount@buf+2,??_pf_mount+3
  9283  000392  6B7C               	clrf	(??_pf_mount+4)& (0+255),b
  9284  000394  C07B  F07C         	movff	??_pf_mount+3,??_pf_mount+4
  9285  000398  6B7B               	clrf	(??_pf_mount+3)& (0+255),b
  9286  00039A  137B               	iorwf	(??_pf_mount+3)& (0+255),f,b
  9287  00039C  0E00               	movlw	0
  9288  00039E  137C               	iorwf	(??_pf_mount+4)& (0+255),f,b
  9289  0003A0  517B               	movf	(??_pf_mount+3)& (0+255),w,b
  9290  0003A2  2578               	addwf	??_pf_mount& (0+255),w,b
  9291  0003A4  6F7D               	movwf	(??_pf_mount+5)& (0+255),b
  9292  0003A6  517C               	movf	(??_pf_mount+4)& (0+255),w,b
  9293  0003A8  2179               	addwfc	(??_pf_mount+1)& (0+255),w,b
  9294  0003AA  6F7E               	movwf	(??_pf_mount+6)& (0+255),b
  9295  0003AC  6B7F               	clrf	(??_pf_mount+7)& (0+255),b
  9296  0003AE  B0D8               	btfsc	status,0,c
  9297  0003B0  2B7F               	incf	(??_pf_mount+7)& (0+255),f,b
  9298  0003B2  6B80               	clrf	(??_pf_mount+8)& (0+255),b
  9299  0003B4  51BE               	movf	pf_mount@fsize& (0+255),w,b
  9300  0003B6  257D               	addwf	(??_pf_mount+5)& (0+255),w,b
  9301  0003B8  6F81               	movwf	(??_pf_mount+9)& (0+255),b
  9302  0003BA  51BF               	movf	(pf_mount@fsize+1)& (0+255),w,b
  9303  0003BC  217E               	addwfc	(??_pf_mount+6)& (0+255),w,b
  9304  0003BE  6F82               	movwf	(??_pf_mount+10)& (0+255),b
  9305  0003C0  51C0               	movf	(pf_mount@fsize+2)& (0+255),w,b
  9306  0003C2  217F               	addwfc	(??_pf_mount+7)& (0+255),w,b
  9307  0003C4  6F83               	movwf	(??_pf_mount+11)& (0+255),b
  9308  0003C6  51C1               	movf	(pf_mount@fsize+3)& (0+255),w,b
  9309  0003C8  2180               	addwfc	(??_pf_mount+8)& (0+255),w,b
  9310  0003CA  6F84               	movwf	(??_pf_mount+12)& (0+255),b
  9311  0003CC  1F81               	comf	(??_pf_mount+9)& (0+255),f,b
  9312  0003CE  1F82               	comf	(??_pf_mount+10)& (0+255),f,b
  9313  0003D0  1F83               	comf	(??_pf_mount+11)& (0+255),f,b
  9314  0003D2  1F84               	comf	(??_pf_mount+12)& (0+255),f,b
  9315  0003D4  2B81               	incf	(??_pf_mount+9)& (0+255),f,b
  9316  0003D6  0E00               	movlw	0
  9317  0003D8  2382               	addwfc	(??_pf_mount+10)& (0+255),f,b
  9318  0003DA  2383               	addwfc	(??_pf_mount+11)& (0+255),f,b
  9319  0003DC  2384               	addwfc	(??_pf_mount+12)& (0+255),f,b
  9320  0003DE  51B2               	movf	pf_mount@tsect& (0+255),w,b
  9321  0003E0  2581               	addwf	(??_pf_mount+9)& (0+255),w,b
  9322  0003E2  6E1A               	movwf	___lldiv@dividend,c
  9323  0003E4  51B3               	movf	(pf_mount@tsect+1)& (0+255),w,b
  9324  0003E6  2182               	addwfc	(??_pf_mount+10)& (0+255),w,b
  9325  0003E8  6E1B               	movwf	___lldiv@dividend+1,c
  9326  0003EA  51B4               	movf	(pf_mount@tsect+2)& (0+255),w,b
  9327  0003EC  2183               	addwfc	(??_pf_mount+11)& (0+255),w,b
  9328  0003EE  6E1C               	movwf	___lldiv@dividend+2,c
  9329  0003F0  51B5               	movf	(pf_mount@tsect+3)& (0+255),w,b
  9330  0003F2  2184               	addwfc	(??_pf_mount+12)& (0+255),w,b
  9331  0003F4  6E1D               	movwf	___lldiv@dividend+3,c
  9332  0003F6  EE20 F002          	lfsr	2,2
  9333  0003FA  5176               	movf	pf_mount@fs& (0+255),w,b
  9334  0003FC  26D9               	addwf	fsr2l,f,c
  9335  0003FE  5177               	movf	(pf_mount@fs+1)& (0+255),w,b
  9336  000400  22DA               	addwfc	fsr2h,f,c
  9337  000402  50DF               	movf	indf2,w,c
  9338  000404  6F85               	movwf	(??_pf_mount+13)& (0+255),b
  9339  000406  5185               	movf	(??_pf_mount+13)& (0+255),w,b
  9340  000408  6E1E               	movwf	___lldiv@divisor,c
  9341  00040A  6A1F               	clrf	___lldiv@divisor+1,c
  9342  00040C  6A20               	clrf	___lldiv@divisor+2,c
  9343  00040E  6A21               	clrf	___lldiv@divisor+3,c
  9344  000410  EC0D  F015         	call	___lldiv	;wreg free
  9345  000414  0E02               	movlw	2
  9346  000416  241A               	addwf	?___lldiv,w,c
  9347  000418  0100               	movlb	0	; () banked
  9348  00041A  6FB6               	movwf	pf_mount@mclst& (0+255),b
  9349  00041C  0E00               	movlw	0
  9350  00041E  201B               	addwfc	?___lldiv+1,w,c
  9351  000420  6FB7               	movwf	(pf_mount@mclst+1)& (0+255),b
  9352  000422  0E00               	movlw	0
  9353  000424  201C               	addwfc	?___lldiv+2,w,c
  9354  000426  6FB8               	movwf	(pf_mount@mclst+2)& (0+255),b
  9355  000428  0E00               	movlw	0
  9356  00042A  201D               	addwfc	?___lldiv+3,w,c
  9357  00042C  6FB9               	movwf	(pf_mount@mclst+3)& (0+255),b
  9358                           
  9359                           ; BSR set to: 0
  9360                           ;pff.c: 798: fs->n_fatent = (DWORD)mclst;
  9361  00042E  EE20 F006          	lfsr	2,6
  9362  000432  5176               	movf	pf_mount@fs& (0+255),w,b
  9363  000434  26D9               	addwf	fsr2l,f,c
  9364  000436  5177               	movf	(pf_mount@fs+1)& (0+255),w,b
  9365  000438  22DA               	addwfc	fsr2h,f,c
  9366  00043A  C0B6  FFDE         	movff	pf_mount@mclst,postinc2
  9367  00043E  C0B7  FFDE         	movff	pf_mount@mclst+1,postinc2
  9368  000442  C0B8  FFDE         	movff	pf_mount@mclst+2,postinc2
  9369  000446  C0B9  FFDE         	movff	pf_mount@mclst+3,postinc2
  9370                           
  9371                           ; BSR set to: 0
  9372                           ;pff.c: 801: if (1 && mclst < 0xFF7)
  9373  00044A  0E00               	movlw	0
  9374  00044C  6FC2               	movwf	pf_mount@fmt& (0+255),b
  9375                           
  9376                           ; BSR set to: 0
  9377  00044E  51B9               	movf	(pf_mount@mclst+3)& (0+255),w,b
  9378  000450  11B8               	iorwf	(pf_mount@mclst+2)& (0+255),w,b
  9379  000452  E108               	bnz	l6788
  9380  000454  0EF7               	movlw	247
  9381  000456  5DB6               	subwf	pf_mount@mclst& (0+255),w,b
  9382  000458  0E0F               	movlw	15
  9383  00045A  59B7               	subwfb	(pf_mount@mclst+1)& (0+255),w,b
  9384  00045C  B0D8               	btfsc	status,0,c
  9385  00045E  D002               	goto	l956
  9386                           
  9387                           ; BSR set to: 0
  9388                           ;pff.c: 802: fmt = 1;
  9389  000460  0E01               	movlw	1
  9390  000462  6FC2               	movwf	pf_mount@fmt& (0+255),b
  9391  000464                     l956:
  9392  000464                     l6788:
  9393                           
  9394                           ; BSR set to: 0
  9395  000464  51B9               	movf	(pf_mount@mclst+3)& (0+255),w,b
  9396  000466  11B8               	iorwf	(pf_mount@mclst+2)& (0+255),w,b
  9397  000468  E106               	bnz	u7810
  9398  00046A  0EF8               	movlw	248
  9399  00046C  5DB6               	subwf	pf_mount@mclst& (0+255),w,b
  9400  00046E  0E0F               	movlw	15
  9401  000470  59B7               	subwfb	(pf_mount@mclst+1)& (0+255),w,b
  9402  000472  A0D8               	btfss	status,0,c
  9403  000474  D00B               	goto	l957
  9404  000476                     u7810:
  9405                           
  9406                           ; BSR set to: 0
  9407  000476  51B9               	movf	(pf_mount@mclst+3)& (0+255),w,b
  9408  000478  11B8               	iorwf	(pf_mount@mclst+2)& (0+255),w,b
  9409  00047A  E108               	bnz	l6794
  9410  00047C  0EF7               	movlw	247
  9411  00047E  5DB6               	subwf	pf_mount@mclst& (0+255),w,b
  9412  000480  0EFF               	movlw	255
  9413  000482  59B7               	subwfb	(pf_mount@mclst+1)& (0+255),w,b
  9414  000484  B0D8               	btfsc	status,0,c
  9415  000486  D002               	goto	l957
  9416                           
  9417                           ; BSR set to: 0
  9418                           ;pff.c: 804: fmt = 2;
  9419  000488  0E02               	movlw	2
  9420  00048A  6FC2               	movwf	pf_mount@fmt& (0+255),b
  9421  00048C                     l957:
  9422  00048C                     l6794:
  9423                           
  9424                           ; BSR set to: 0
  9425  00048C  51B9               	movf	(pf_mount@mclst+3)& (0+255),w,b
  9426  00048E  11B8               	iorwf	(pf_mount@mclst+2)& (0+255),w,b
  9427  000490  E106               	bnz	u7830
  9428  000492  0EF7               	movlw	247
  9429  000494  5DB6               	subwf	pf_mount@mclst& (0+255),w,b
  9430  000496  0EFF               	movlw	255
  9431  000498  59B7               	subwfb	(pf_mount@mclst+1)& (0+255),w,b
  9432  00049A  A0D8               	btfss	status,0,c
  9433  00049C  D002               	goto	l958
  9434  00049E                     u7830:
  9435                           
  9436                           ; BSR set to: 0
  9437                           ;pff.c: 806: fmt = 3;
  9438  00049E  0E03               	movlw	3
  9439  0004A0  6FC2               	movwf	pf_mount@fmt& (0+255),b
  9440  0004A2                     l958:
  9441                           
  9442                           ; BSR set to: 0
  9443                           ;pff.c: 807: if (!fmt) return FR_NO_FILESYSTEM;
  9444  0004A2  51C2               	movf	pf_mount@fmt& (0+255),w,b
  9445  0004A4  A4D8               	btfss	status,2,c
  9446  0004A6  D002               	goto	l959
  9447                           
  9448                           ; BSR set to: 0
  9449  0004A8  0E06               	movlw	6
  9450                           
  9451                           ; BSR set to: 0
  9452  0004AA  0012               	return	
  9453  0004AC                     l959:
  9454                           
  9455                           ; BSR set to: 0
  9456                           ;pff.c: 810: if (0 || (1 && fmt == 3))
  9457                           
  9458                           ; BSR set to: 0
  9459  0004AC  C076  FFD9         	movff	pf_mount@fs,fsr2l
  9460  0004B0  C077  FFDA         	movff	pf_mount@fs+1,fsr2h
  9461  0004B4  C0C2  FFDF         	movff	pf_mount@fmt,indf2
  9462                           
  9463                           ; BSR set to: 0
  9464  0004B8  0E03               	movlw	3
  9465  0004BA  19C2               	xorwf	pf_mount@fmt& (0+255),w,b
  9466  0004BC  A4D8               	btfss	status,2,c
  9467  0004BE  D048               	goto	l960
  9468                           
  9469                           ; BSR set to: 0
  9470                           ;pff.c: 811: fs->dirbase = (DWORD)(((DWORD)*((BYTE*)(buf+(44-13))+3)<<24)|((DWORD)*((BYT
      +                          E*)(buf+(44-13))+2)<<16)|((WORD)*((BYTE*)(buf+(44-13))+1)<<8)|*(BYTE*)(buf+(44-13)));
  9471                           
  9472                           ; BSR set to: 0
  9473  0004C0  51AE               	movf	(pf_mount@buf+32)& (0+255),w,b
  9474  0004C2  6F79               	movwf	(??_pf_mount+1)& (0+255),b
  9475  0004C4  6B78               	clrf	??_pf_mount& (0+255),b
  9476  0004C6  C0AF  F07A         	movff	pf_mount@buf+33,??_pf_mount+2
  9477  0004CA  6B7B               	clrf	(??_pf_mount+3)& (0+255),b
  9478  0004CC  6B7C               	clrf	(??_pf_mount+4)& (0+255),b
  9479  0004CE  6B7D               	clrf	(??_pf_mount+5)& (0+255),b
  9480  0004D0  C07B  F07D         	movff	??_pf_mount+3,??_pf_mount+5
  9481  0004D4  C07A  F07C         	movff	??_pf_mount+2,??_pf_mount+4
  9482  0004D8  6B7B               	clrf	(??_pf_mount+3)& (0+255),b
  9483  0004DA  6B7A               	clrf	(??_pf_mount+2)& (0+255),b
  9484  0004DC  C0B0  F07E         	movff	pf_mount@buf+34,??_pf_mount+6
  9485  0004E0  6B7F               	clrf	(??_pf_mount+7)& (0+255),b
  9486  0004E2  6B80               	clrf	(??_pf_mount+8)& (0+255),b
  9487  0004E4  6B81               	clrf	(??_pf_mount+9)& (0+255),b
  9488  0004E6  C07E  F081         	movff	??_pf_mount+6,??_pf_mount+9
  9489  0004EA  6B80               	clrf	(??_pf_mount+8)& (0+255),b
  9490  0004EC  6B7F               	clrf	(??_pf_mount+7)& (0+255),b
  9491  0004EE  6B7E               	clrf	(??_pf_mount+6)& (0+255),b
  9492  0004F0  517A               	movf	(??_pf_mount+2)& (0+255),w,b
  9493  0004F2  117E               	iorwf	(??_pf_mount+6)& (0+255),w,b
  9494  0004F4  6F82               	movwf	(??_pf_mount+10)& (0+255),b
  9495  0004F6  517B               	movf	(??_pf_mount+3)& (0+255),w,b
  9496  0004F8  117F               	iorwf	(??_pf_mount+7)& (0+255),w,b
  9497  0004FA  6F83               	movwf	(??_pf_mount+11)& (0+255),b
  9498  0004FC  517C               	movf	(??_pf_mount+4)& (0+255),w,b
  9499  0004FE  1180               	iorwf	(??_pf_mount+8)& (0+255),w,b
  9500  000500  6F84               	movwf	(??_pf_mount+12)& (0+255),b
  9501  000502  517D               	movf	(??_pf_mount+5)& (0+255),w,b
  9502  000504  1181               	iorwf	(??_pf_mount+9)& (0+255),w,b
  9503  000506  6F85               	movwf	(??_pf_mount+13)& (0+255),b
  9504  000508  5178               	movf	??_pf_mount& (0+255),w,b
  9505  00050A  1182               	iorwf	(??_pf_mount+10)& (0+255),w,b
  9506  00050C  6F86               	movwf	(??_pf_mount+14)& (0+255),b
  9507  00050E  5179               	movf	(??_pf_mount+1)& (0+255),w,b
  9508  000510  1183               	iorwf	(??_pf_mount+11)& (0+255),w,b
  9509  000512  6F87               	movwf	(??_pf_mount+15)& (0+255),b
  9510  000514  0E00               	movlw	0
  9511  000516  1184               	iorwf	(??_pf_mount+12)& (0+255),w,b
  9512  000518  6F88               	movwf	(??_pf_mount+16)& (0+255),b
  9513  00051A  0E00               	movlw	0
  9514  00051C  1185               	iorwf	(??_pf_mount+13)& (0+255),w,b
  9515  00051E  6F89               	movwf	(??_pf_mount+17)& (0+255),b
  9516  000520  51AD               	movf	(pf_mount@buf+31)& (0+255),w,b
  9517  000522  1186               	iorwf	(??_pf_mount+14)& (0+255),w,b
  9518  000524  6F8A               	movwf	(??_pf_mount+18)& (0+255),b
  9519  000526  5187               	movf	(??_pf_mount+15)& (0+255),w,b
  9520  000528  6F8B               	movwf	(??_pf_mount+19)& (0+255),b
  9521  00052A  5188               	movf	(??_pf_mount+16)& (0+255),w,b
  9522  00052C  6F8C               	movwf	(??_pf_mount+20)& (0+255),b
  9523  00052E  5189               	movf	(??_pf_mount+17)& (0+255),w,b
  9524  000530  6F8D               	movwf	(??_pf_mount+21)& (0+255),b
  9525  000532  EE20 F00E          	lfsr	2,14
  9526  000536  5176               	movf	pf_mount@fs& (0+255),w,b
  9527  000538  26D9               	addwf	fsr2l,f,c
  9528  00053A  5177               	movf	(pf_mount@fs+1)& (0+255),w,b
  9529  00053C  22DA               	addwfc	fsr2h,f,c
  9530  00053E  C08A  FFDE         	movff	??_pf_mount+18,postinc2
  9531  000542  C08B  FFDE         	movff	??_pf_mount+19,postinc2
  9532  000546  C08C  FFDE         	movff	??_pf_mount+20,postinc2
  9533  00054A  C08D  FFDE         	movff	??_pf_mount+21,postinc2
  9534  00054E  D028               	goto	l963
  9535  000550                     l960:
  9536                           
  9537                           ; BSR set to: 0
  9538                           ;pff.c: 812: else
  9539                           ;pff.c: 813: fs->dirbase = fs->fatbase + fsize;
  9540                           
  9541                           ; BSR set to: 0
  9542  000550  EE20 F00A          	lfsr	2,10
  9543  000554  5176               	movf	pf_mount@fs& (0+255),w,b
  9544  000556  26D9               	addwf	fsr2l,f,c
  9545  000558  5177               	movf	(pf_mount@fs+1)& (0+255),w,b
  9546  00055A  22DA               	addwfc	fsr2h,f,c
  9547  00055C  CFDE F078          	movff	postinc2,??_pf_mount
  9548  000560  CFDE F079          	movff	postinc2,??_pf_mount+1
  9549  000564  CFDE F07A          	movff	postinc2,??_pf_mount+2
  9550  000568  CFDE F07B          	movff	postinc2,??_pf_mount+3
  9551  00056C  51BE               	movf	pf_mount@fsize& (0+255),w,b
  9552  00056E  2578               	addwf	??_pf_mount& (0+255),w,b
  9553  000570  6F7C               	movwf	(??_pf_mount+4)& (0+255),b
  9554  000572  51BF               	movf	(pf_mount@fsize+1)& (0+255),w,b
  9555  000574  2179               	addwfc	(??_pf_mount+1)& (0+255),w,b
  9556  000576  6F7D               	movwf	(??_pf_mount+5)& (0+255),b
  9557  000578  51C0               	movf	(pf_mount@fsize+2)& (0+255),w,b
  9558  00057A  217A               	addwfc	(??_pf_mount+2)& (0+255),w,b
  9559  00057C  6F7E               	movwf	(??_pf_mount+6)& (0+255),b
  9560  00057E  51C1               	movf	(pf_mount@fsize+3)& (0+255),w,b
  9561  000580  217B               	addwfc	(??_pf_mount+3)& (0+255),w,b
  9562  000582  6F7F               	movwf	(??_pf_mount+7)& (0+255),b
  9563  000584  EE20 F00E          	lfsr	2,14
  9564  000588  5176               	movf	pf_mount@fs& (0+255),w,b
  9565  00058A  26D9               	addwf	fsr2l,f,c
  9566  00058C  5177               	movf	(pf_mount@fs+1)& (0+255),w,b
  9567  00058E  22DA               	addwfc	fsr2h,f,c
  9568  000590  C07C  FFDE         	movff	??_pf_mount+4,postinc2
  9569  000594  C07D  FFDE         	movff	??_pf_mount+5,postinc2
  9570  000598  C07E  FFDE         	movff	??_pf_mount+6,postinc2
  9571  00059C  C07F  FFDE         	movff	??_pf_mount+7,postinc2
  9572  0005A0                     l963:
  9573                           
  9574                           ; BSR set to: 0
  9575                           ;pff.c: 814: fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;
  9576  0005A0  EE20 F00A          	lfsr	2,10
  9577  0005A4  5176               	movf	pf_mount@fs& (0+255),w,b
  9578  0005A6  26D9               	addwf	fsr2l,f,c
  9579  0005A8  5177               	movf	(pf_mount@fs+1)& (0+255),w,b
  9580  0005AA  22DA               	addwfc	fsr2h,f,c
  9581  0005AC  CFDE F078          	movff	postinc2,??_pf_mount
  9582  0005B0  CFDE F079          	movff	postinc2,??_pf_mount+1
  9583  0005B4  CFDE F07A          	movff	postinc2,??_pf_mount+2
  9584  0005B8  CFDE F07B          	movff	postinc2,??_pf_mount+3
  9585  0005BC  EE20 F004          	lfsr	2,4
  9586  0005C0  5176               	movf	pf_mount@fs& (0+255),w,b
  9587  0005C2  26D9               	addwf	fsr2l,f,c
  9588  0005C4  5177               	movf	(pf_mount@fs+1)& (0+255),w,b
  9589  0005C6  22DA               	addwfc	fsr2h,f,c
  9590  0005C8  CFDE F07C          	movff	postinc2,??_pf_mount+4
  9591  0005CC  CFDD F07D          	movff	postdec2,??_pf_mount+5
  9592  0005D0  0E04               	movlw	4
  9593  0005D2  6F7E               	movwf	(??_pf_mount+6)& (0+255),b
  9594  0005D4                     u7865:
  9595  0005D4  90D8               	bcf	status,0,c
  9596  0005D6  337D               	rrcf	(??_pf_mount+5)& (0+255),f,b
  9597  0005D8  337C               	rrcf	(??_pf_mount+4)& (0+255),f,b
  9598  0005DA  2F7E               	decfsz	(??_pf_mount+6)& (0+255),f,b
  9599  0005DC  D7FB               	goto	u7865
  9600  0005DE  517C               	movf	(??_pf_mount+4)& (0+255),w,b
  9601  0005E0  2578               	addwf	??_pf_mount& (0+255),w,b
  9602  0005E2  6F7F               	movwf	(??_pf_mount+7)& (0+255),b
  9603  0005E4  517D               	movf	(??_pf_mount+5)& (0+255),w,b
  9604  0005E6  2179               	addwfc	(??_pf_mount+1)& (0+255),w,b
  9605  0005E8  6F80               	movwf	(??_pf_mount+8)& (0+255),b
  9606  0005EA  0E00               	movlw	0
  9607  0005EC  217A               	addwfc	(??_pf_mount+2)& (0+255),w,b
  9608  0005EE  6F81               	movwf	(??_pf_mount+9)& (0+255),b
  9609  0005F0  0E00               	movlw	0
  9610  0005F2  217B               	addwfc	(??_pf_mount+3)& (0+255),w,b
  9611  0005F4  6F82               	movwf	(??_pf_mount+10)& (0+255),b
  9612  0005F6  51BE               	movf	pf_mount@fsize& (0+255),w,b
  9613  0005F8  257F               	addwf	(??_pf_mount+7)& (0+255),w,b
  9614  0005FA  6F83               	movwf	(??_pf_mount+11)& (0+255),b
  9615  0005FC  51BF               	movf	(pf_mount@fsize+1)& (0+255),w,b
  9616  0005FE  2180               	addwfc	(??_pf_mount+8)& (0+255),w,b
  9617  000600  6F84               	movwf	(??_pf_mount+12)& (0+255),b
  9618  000602  51C0               	movf	(pf_mount@fsize+2)& (0+255),w,b
  9619  000604  2181               	addwfc	(??_pf_mount+9)& (0+255),w,b
  9620  000606  6F85               	movwf	(??_pf_mount+13)& (0+255),b
  9621  000608  51C1               	movf	(pf_mount@fsize+3)& (0+255),w,b
  9622  00060A  2182               	addwfc	(??_pf_mount+10)& (0+255),w,b
  9623  00060C  6F86               	movwf	(??_pf_mount+14)& (0+255),b
  9624  00060E  EE20 F012          	lfsr	2,18
  9625  000612  5176               	movf	pf_mount@fs& (0+255),w,b
  9626  000614  26D9               	addwf	fsr2l,f,c
  9627  000616  5177               	movf	(pf_mount@fs+1)& (0+255),w,b
  9628  000618  22DA               	addwfc	fsr2h,f,c
  9629  00061A  C083  FFDE         	movff	??_pf_mount+11,postinc2
  9630  00061E  C084  FFDE         	movff	??_pf_mount+12,postinc2
  9631  000622  C085  FFDE         	movff	??_pf_mount+13,postinc2
  9632  000626  C086  FFDE         	movff	??_pf_mount+14,postinc2
  9633                           
  9634                           ;pff.c: 816: fs->flag = 0;
  9635  00062A  EE20 F001          	lfsr	2,1
  9636  00062E  5176               	movf	pf_mount@fs& (0+255),w,b
  9637  000630  26D9               	addwf	fsr2l,f,c
  9638  000632  5177               	movf	(pf_mount@fs+1)& (0+255),w,b
  9639  000634  22DA               	addwfc	fsr2h,f,c
  9640  000636  0E00               	movlw	0
  9641  000638  6EDF               	movwf	indf2,c
  9642                           
  9643                           ; BSR set to: 0
  9644                           ;pff.c: 817: FatFs = fs;
  9645  00063A  C076  F035         	movff	pf_mount@fs,_FatFs
  9646  00063E  C077  F036         	movff	pf_mount@fs+1,_FatFs+1
  9647                           
  9648                           ; BSR set to: 0
  9649                           ;pff.c: 819: return FR_OK;
  9650  000642  0E00               	movlw	0
  9651  000644  0012               	return	
  9652  000646                     __end_of_pf_mount:
  9653                           	opt stack 0
  9654                           tosu	equ	0xFFF
  9655                           tosh	equ	0xFFE
  9656                           tosl	equ	0xFFD
  9657                           pclath	equ	0xFFA
  9658                           tblptru	equ	0xFF8
  9659                           tblptrh	equ	0xFF7
  9660                           tblptrl	equ	0xFF6
  9661                           tablat	equ	0xFF5
  9662                           prodh	equ	0xFF4
  9663                           prodl	equ	0xFF3
  9664                           intcon	equ	0xFF2
  9665                           intcon2	equ	0xFF1
  9666                           intcon3	equ	0xFF0
  9667                           postinc0	equ	0xFEE
  9668                           wreg	equ	0xFE8
  9669                           indf1	equ	0xFE7
  9670                           postinc1	equ	0xFE6
  9671                           postdec1	equ	0xFE5
  9672                           fsr1h	equ	0xFE2
  9673                           fsr1l	equ	0xFE1
  9674                           indf2	equ	0xFDF
  9675                           postinc2	equ	0xFDE
  9676                           postdec2	equ	0xFDD
  9677                           plusw2	equ	0xFDB
  9678                           fsr2h	equ	0xFDA
  9679                           fsr2l	equ	0xFD9
  9680                           status	equ	0xFD8
  9681                           
  9682 ;; *************** function _disk_initialize *****************
  9683 ;; Defined at:
  9684 ;;		line 62 in file "diskio.c"
  9685 ;; Parameters:    Size  Location     Type
  9686 ;;		None
  9687 ;; Auto vars:     Size  Location     Type
  9688 ;;  count2          2    5[BANK0 ] int 
  9689 ;;  count1          2    2[BANK0 ] int 
  9690 ;;  i               2    0[BANK0 ] int 
  9691 ;;  buff            1    7[BANK0 ] unsigned char 
  9692 ;;  stat            1    4[BANK0 ] unsigned char 
  9693 ;; Return value:  Size  Location     Type
  9694 ;;                  1    wreg      unsigned char 
  9695 ;; Registers used:
  9696 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9697 ;; Tracked objects:
  9698 ;;		On entry : 0/0
  9699 ;;		On exit  : 0/0
  9700 ;;		Unchanged: 0/0
  9701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9702 ;;      Params:         0       0       0       0       0       0       0       0       0
  9703 ;;      Locals:         0       8       0       0       0       0       0       0       0
  9704 ;;      Temps:          2       0       0       0       0       0       0       0       0
  9705 ;;      Totals:         2       8       0       0       0       0       0       0       0
  9706 ;;Total ram usage:       10 bytes
  9707 ;; Hardware stack levels used:    1
  9708 ;; Hardware stack levels required when called:    8
  9709 ;; This function calls:
  9710 ;;		_command
  9711 ;;		_dummy_clocks
  9712 ;;		_escreve_cmd_lcd
  9713 ;;		_escreve_frase_ram_lcd
  9714 ;;		_posicao_cursor_lcd
  9715 ;;		_proceed
  9716 ;;		_reset
  9717 ;;		_response
  9718 ;; This function is called by:
  9719 ;;		_pf_mount
  9720 ;; This function uses a non-reentrant model
  9721 ;;
  9722                           
  9723                           	psect	text38
  9724  0015C4                     __ptext38:
  9725                           	opt stack 0
  9726  0015C4                     _disk_initialize:
  9727                           	opt stack 19
  9728                           
  9729                           ;diskio.c: 65: DSTATUS stat;
  9730                           ;diskio.c: 66: int i = 0, count1 = 0, count2 = 0;
  9731                           
  9732                           ;incstack = 0
  9733  0015C4  0E00               	movlw	0
  9734  0015C6  0100               	movlb	0	; () banked
  9735  0015C8  6F61               	movwf	(disk_initialize@i+1)& (0+255),b
  9736  0015CA  0E00               	movlw	0
  9737  0015CC  6F60               	movwf	disk_initialize@i& (0+255),b
  9738  0015CE  0E00               	movlw	0
  9739  0015D0  6F63               	movwf	(disk_initialize@count1+1)& (0+255),b
  9740  0015D2  0E00               	movlw	0
  9741  0015D4  6F62               	movwf	disk_initialize@count1& (0+255),b
  9742  0015D6  0E00               	movlw	0
  9743  0015D8  6F66               	movwf	(disk_initialize@count2+1)& (0+255),b
  9744  0015DA  0E00               	movlw	0
  9745  0015DC  6F65               	movwf	disk_initialize@count2& (0+255),b
  9746                           
  9747                           ; BSR set to: 0
  9748                           ;diskio.c: 67: unsigned char buff;
  9749                           ;diskio.c: 68: reset();
  9750  0015DE  EC8C  F015         	call	_reset	;wreg free
  9751                           
  9752                           ;diskio.c: 69: _delay((unsigned long)((500)*(20000000/4000.0)));
  9753  0015E2  0E0D               	movlw	13
  9754  0015E4  6E29               	movwf	(??_disk_initialize+1)& (0+255),c
  9755  0015E6  0EAF               	movlw	175
  9756  0015E8  6E28               	movwf	??_disk_initialize& (0+255),c
  9757  0015EA  0EB6               	movlw	182
  9758  0015EC                     u9047:
  9759  0015EC  2EE8               	decfsz	wreg,f,c
  9760  0015EE  D7FE               	bra	u9047
  9761  0015F0  2E28               	decfsz	??_disk_initialize& (0+255),f,c
  9762  0015F2  D7FC               	bra	u9047
  9763  0015F4  2E29               	decfsz	(??_disk_initialize+1)& (0+255),f,c
  9764  0015F6  D7FA               	bra	u9047
  9765  0015F8  D000               	nop2	
  9766                           
  9767                           ;diskio.c: 70: dummy_clocks(8);
  9768  0015FA  0E08               	movlw	8
  9769  0015FC  ECD6  F017         	call	_dummy_clocks
  9770                           
  9771                           ;diskio.c: 71: command(0X41, 0X00000000, 0XFF);
  9772  001600  0E00               	movlw	0
  9773  001602  6E1C               	movwf	command@arg,c
  9774  001604  0E00               	movlw	0
  9775  001606  6E1D               	movwf	command@arg+1,c
  9776  001608  0E00               	movlw	0
  9777  00160A  6E1E               	movwf	command@arg+2,c
  9778  00160C  0E00               	movlw	0
  9779  00160E  6E1F               	movwf	command@arg+3,c
  9780  001610  0EFF               	movlw	255
  9781  001612  6E20               	movwf	command@CRC,c
  9782  001614  0E41               	movlw	65
  9783  001616  EC82  F017         	call	_command
  9784                           
  9785                           ;diskio.c: 72: proceed();
  9786  00161A  ECFA  F018         	call	_proceed	;wreg free
  9787  00161E                     
  9788                           ;diskio.c: 74: buff = response();
  9789  00161E  ECED  F018         	call	_response	;wreg free
  9790  001622  0100               	movlb	0	; () banked
  9791  001624  6F67               	movwf	disk_initialize@buff& (0+255),b
  9792                           
  9793                           ; BSR set to: 0
  9794                           ;diskio.c: 75: }while(buff!=0x01);
  9795  001626  0567               	decf	disk_initialize@buff& (0+255),w,b
  9796  001628  A4D8               	btfss	status,2,c
  9797  00162A  D7F9               	goto	l714
  9798                           
  9799                           ; BSR set to: 0
  9800                           ;diskio.c: 77: _delay((unsigned long)((1000)*(20000000/4000.0)));
  9801                           
  9802                           ; BSR set to: 0
  9803  00162C  0E1A               	movlw	26
  9804  00162E  6E29               	movwf	(??_disk_initialize+1)& (0+255),c
  9805  001630  0E5E               	movlw	94
  9806  001632  6E28               	movwf	??_disk_initialize& (0+255),c
  9807  001634  0E6E               	movlw	110
  9808  001636                     u9057:
  9809  001636  2EE8               	decfsz	wreg,f,c
  9810  001638  D7FE               	bra	u9057
  9811  00163A  2E28               	decfsz	??_disk_initialize& (0+255),f,c
  9812  00163C  D7FC               	bra	u9057
  9813  00163E  2E29               	decfsz	(??_disk_initialize+1)& (0+255),f,c
  9814  001640  D7FA               	bra	u9057
  9815  001642  D000               	nop2	
  9816                           
  9817                           ;diskio.c: 78: proceed();
  9818  001644  ECFA  F018         	call	_proceed	;wreg free
  9819                           
  9820                           ;diskio.c: 79: if (buff == 0x01)
  9821  001648  0100               	movlb	0	; () banked
  9822  00164A  0567               	decf	disk_initialize@buff& (0+255),w,b
  9823  00164C  A4D8               	btfss	status,2,c
  9824  00164E  D092               	goto	l716
  9825                           
  9826                           ; BSR set to: 0
  9827                           ;diskio.c: 80: {
  9828                           ;diskio.c: 82: _delay((unsigned long)((1)*(20000000/4000.0)));
  9829  001650  0E07               	movlw	7
  9830  001652  6E28               	movwf	??_disk_initialize& (0+255),c
  9831  001654  0E7D               	movlw	125
  9832  001656                     u9067:
  9833  001656  2EE8               	decfsz	wreg,f,c
  9834  001658  D7FE               	bra	u9067
  9835  00165A  2E28               	decfsz	??_disk_initialize& (0+255),f,c
  9836  00165C  D7FC               	bra	u9067
  9837  00165E  F000               	nop	
  9838                           
  9839                           ;diskio.c: 83: count1 = 0;
  9840  001660  0E00               	movlw	0
  9841  001662  0100               	movlb	0	; () banked
  9842  001664  6F63               	movwf	(disk_initialize@count1+1)& (0+255),b
  9843  001666  0E00               	movlw	0
  9844  001668  6F62               	movwf	disk_initialize@count1& (0+255),b
  9845  00166A                     
  9846                           ; BSR set to: 0
  9847                           ;diskio.c: 85: count2 = 0;
  9848                           
  9849                           ; BSR set to: 0
  9850  00166A  0E00               	movlw	0
  9851  00166C  6F66               	movwf	(disk_initialize@count2+1)& (0+255),b
  9852  00166E  0E00               	movlw	0
  9853  001670  6F65               	movwf	disk_initialize@count2& (0+255),b
  9854                           
  9855                           ; BSR set to: 0
  9856                           ;diskio.c: 86: dummy_clocks(8);
  9857  001672  0E08               	movlw	8
  9858  001674  ECD6  F017         	call	_dummy_clocks
  9859                           
  9860                           ;diskio.c: 87: command(0X77, 0X00000000, 0X95);
  9861  001678  0E00               	movlw	0
  9862  00167A  6E1C               	movwf	command@arg,c
  9863  00167C  0E00               	movlw	0
  9864  00167E  6E1D               	movwf	command@arg+1,c
  9865  001680  0E00               	movlw	0
  9866  001682  6E1E               	movwf	command@arg+2,c
  9867  001684  0E00               	movlw	0
  9868  001686  6E1F               	movwf	command@arg+3,c
  9869  001688  0E95               	movlw	149
  9870  00168A  6E20               	movwf	command@CRC,c
  9871  00168C  0E77               	movlw	119
  9872  00168E  EC82  F017         	call	_command
  9873                           
  9874                           ;diskio.c: 88: buff = 0XFF;
  9875  001692  0100               	movlb	0	; () banked
  9876  001694  6967               	setf	disk_initialize@buff& (0+255),b
  9877  001696                     
  9878                           ; BSR set to: 0
  9879                           ;diskio.c: 91: buff = response();
  9880                           
  9881                           ; BSR set to: 0
  9882  001696  ECED  F018         	call	_response	;wreg free
  9883  00169A  0100               	movlb	0	; () banked
  9884  00169C  6F67               	movwf	disk_initialize@buff& (0+255),b
  9885                           
  9886                           ; BSR set to: 0
  9887                           ;diskio.c: 92: count2++;
  9888  00169E  4B65               	infsnz	disk_initialize@count2& (0+255),f,b
  9889  0016A0  2B66               	incf	(disk_initialize@count2+1)& (0+255),f,b
  9890                           
  9891                           ; BSR set to: 0
  9892                           ;diskio.c: 93: }while((buff!=0X01)&&(count2<10));
  9893  0016A2  0567               	decf	disk_initialize@buff& (0+255),w,b
  9894  0016A4  B4D8               	btfsc	status,2,c
  9895  0016A6  D008               	goto	u7450
  9896                           
  9897                           ; BSR set to: 0
  9898  0016A8  BF66               	btfsc	(disk_initialize@count2+1)& (0+255),7,b
  9899  0016AA  D7F5               	goto	l718
  9900  0016AC  5166               	movf	(disk_initialize@count2+1)& (0+255),w,b
  9901  0016AE  E104               	bnz	l6522
  9902  0016B0  0E0A               	movlw	10
  9903  0016B2  5D65               	subwf	disk_initialize@count2& (0+255),w,b
  9904  0016B4  A0D8               	btfss	status,0,c
  9905  0016B6  D7EF               	goto	l718
  9906  0016B8                     u7450:
  9907  0016B8                     l6522:
  9908                           
  9909                           ; BSR set to: 0
  9910                           ;diskio.c: 95: _delay((unsigned long)((1)*(20000000/4000.0)));
  9911  0016B8  0E07               	movlw	7
  9912  0016BA  6E28               	movwf	??_disk_initialize& (0+255),c
  9913  0016BC  0E7D               	movlw	125
  9914  0016BE                     u9077:
  9915  0016BE  2EE8               	decfsz	wreg,f,c
  9916  0016C0  D7FE               	bra	u9077
  9917  0016C2  2E28               	decfsz	??_disk_initialize& (0+255),f,c
  9918  0016C4  D7FC               	bra	u9077
  9919  0016C6  F000               	nop	
  9920                           
  9921                           ;diskio.c: 96: count2 = 0;
  9922  0016C8  0E00               	movlw	0
  9923  0016CA  0100               	movlb	0	; () banked
  9924  0016CC  6F66               	movwf	(disk_initialize@count2+1)& (0+255),b
  9925  0016CE  0E00               	movlw	0
  9926  0016D0  6F65               	movwf	disk_initialize@count2& (0+255),b
  9927                           
  9928                           ; BSR set to: 0
  9929                           ;diskio.c: 97: dummy_clocks(8);
  9930  0016D2  0E08               	movlw	8
  9931  0016D4  ECD6  F017         	call	_dummy_clocks
  9932                           
  9933                           ;diskio.c: 99: command(0X69,0X40000000,0X95);
  9934  0016D8  0E00               	movlw	0
  9935  0016DA  6E1C               	movwf	command@arg,c
  9936  0016DC  0E00               	movlw	0
  9937  0016DE  6E1D               	movwf	command@arg+1,c
  9938  0016E0  0E00               	movlw	0
  9939  0016E2  6E1E               	movwf	command@arg+2,c
  9940  0016E4  0E40               	movlw	64
  9941  0016E6  6E1F               	movwf	command@arg+3,c
  9942  0016E8  0E95               	movlw	149
  9943  0016EA  6E20               	movwf	command@CRC,c
  9944  0016EC  0E69               	movlw	105
  9945  0016EE  EC82  F017         	call	_command
  9946                           
  9947                           ;diskio.c: 100: buff = 0XFF;
  9948  0016F2  0100               	movlb	0	; () banked
  9949  0016F4  6967               	setf	disk_initialize@buff& (0+255),b
  9950                           
  9951                           ; BSR set to: 0
  9952                           ;diskio.c: 102: proceed();
  9953  0016F6  ECFA  F018         	call	_proceed	;wreg free
  9954  0016FA                     
  9955                           ;diskio.c: 104: buff = response();
  9956  0016FA  ECED  F018         	call	_response	;wreg free
  9957  0016FE  0100               	movlb	0	; () banked
  9958  001700  6F67               	movwf	disk_initialize@buff& (0+255),b
  9959                           
  9960                           ; BSR set to: 0
  9961                           ;diskio.c: 105: count2++;
  9962  001702  4B65               	infsnz	disk_initialize@count2& (0+255),f,b
  9963  001704  2B66               	incf	(disk_initialize@count2+1)& (0+255),f,b
  9964                           
  9965                           ; BSR set to: 0
  9966                           ;diskio.c: 108: }while((buff!=0X00) && count2<10);
  9967  001706  5167               	movf	disk_initialize@buff& (0+255),w,b
  9968  001708  B4D8               	btfsc	status,2,c
  9969  00170A  D008               	goto	u7470
  9970                           
  9971                           ; BSR set to: 0
  9972  00170C  BF66               	btfsc	(disk_initialize@count2+1)& (0+255),7,b
  9973  00170E  D7F5               	goto	l722
  9974  001710  5166               	movf	(disk_initialize@count2+1)& (0+255),w,b
  9975  001712  E104               	bnz	l6542
  9976  001714  0E0A               	movlw	10
  9977  001716  5D65               	subwf	disk_initialize@count2& (0+255),w,b
  9978  001718  A0D8               	btfss	status,0,c
  9979  00171A  D7EF               	goto	l722
  9980  00171C                     u7470:
  9981  00171C                     l6542:
  9982                           
  9983                           ; BSR set to: 0
  9984                           ;diskio.c: 110: }while(buff != 0X00);
  9985  00171C  5167               	movf	disk_initialize@buff& (0+255),w,b
  9986  00171E  A4D8               	btfss	status,2,c
  9987  001720  D7A4               	goto	l717
  9988                           
  9989                           ; BSR set to: 0
  9990                           ;diskio.c: 112: count1 = 0;
  9991                           
  9992                           ; BSR set to: 0
  9993  001722  0E00               	movlw	0
  9994  001724  6F63               	movwf	(disk_initialize@count1+1)& (0+255),b
  9995  001726  0E00               	movlw	0
  9996  001728  6F62               	movwf	disk_initialize@count1& (0+255),b
  9997                           
  9998                           ; BSR set to: 0
  9999                           ;diskio.c: 114: _delay((unsigned long)((1)*(20000000/4000.0)));
 10000  00172A  0E07               	movlw	7
 10001  00172C  6E28               	movwf	??_disk_initialize& (0+255),c
 10002  00172E  0E7D               	movlw	125
 10003  001730                     u9087:
 10004  001730  2EE8               	decfsz	wreg,f,c
 10005  001732  D7FE               	bra	u9087
 10006  001734  2E28               	decfsz	??_disk_initialize& (0+255),f,c
 10007  001736  D7FC               	bra	u9087
 10008  001738  F000               	nop	
 10009                           
 10010                           ;diskio.c: 115: stat = 0X00;
 10011  00173A  0E00               	movlw	0
 10012  00173C  0100               	movlb	0	; () banked
 10013  00173E  6F64               	movwf	disk_initialize@stat& (0+255),b
 10014                           
 10015                           ; BSR set to: 0
 10016                           ;diskio.c: 117: escreve_cmd_lcd(0b00000001);
 10017  001740  0E01               	movlw	1
 10018  001742  ECC7  F014         	call	_escreve_cmd_lcd
 10019                           
 10020                           ;diskio.c: 118: posicao_cursor_lcd(1,0);
 10021  001746  0E00               	movlw	0
 10022  001748  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 10023  00174A  0E01               	movlw	1
 10024  00174C  EC3A  F016         	call	_posicao_cursor_lcd
 10025                           
 10026                           ;diskio.c: 119: escreve_frase_ram_lcd("Cartão Aceito");
 10027  001750  0E89               	movlw	low STR_14
 10028  001752  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 10029  001754  0E7F               	movlw	high STR_14
 10030  001756  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 10031  001758  EC37  F017         	call	_escreve_frase_ram_lcd	;wreg free
 10032                           
 10033                           ;diskio.c: 120: _delay((unsigned long)((2000)*(20000000/4000.0)));
 10034  00175C  0E33               	movlw	51
 10035  00175E  6E29               	movwf	(??_disk_initialize+1)& (0+255),c
 10036  001760  0EBB               	movlw	187
 10037  001762  6E28               	movwf	??_disk_initialize& (0+255),c
 10038  001764  0EE0               	movlw	224
 10039  001766                     u9097:
 10040  001766  2EE8               	decfsz	wreg,f,c
 10041  001768  D7FE               	bra	u9097
 10042  00176A  2E28               	decfsz	??_disk_initialize& (0+255),f,c
 10043  00176C  D7FC               	bra	u9097
 10044  00176E  2E29               	decfsz	(??_disk_initialize+1)& (0+255),f,c
 10045  001770  D7FA               	bra	u9097
 10046                           
 10047                           ;diskio.c: 121: }
 10048  001772  D020               	goto	l728
 10049  001774                     l716:
 10050                           
 10051                           ;diskio.c: 123: else if(buff == 0x05)
 10052  001774  0E05               	movlw	5
 10053  001776  0100               	movlb	0	; () banked
 10054  001778  1967               	xorwf	disk_initialize@buff& (0+255),w,b
 10055  00177A  A4D8               	btfss	status,2,c
 10056  00177C  D01B               	goto	l728
 10057                           
 10058                           ; BSR set to: 0
 10059                           ;diskio.c: 124: {
 10060                           ;diskio.c: 125: stat = 0x01;
 10061  00177E  0E01               	movlw	1
 10062  001780  6F64               	movwf	disk_initialize@stat& (0+255),b
 10063                           
 10064                           ; BSR set to: 0
 10065                           ;diskio.c: 127: escreve_cmd_lcd(0b00000001);
 10066  001782  0E01               	movlw	1
 10067  001784  ECC7  F014         	call	_escreve_cmd_lcd
 10068                           
 10069                           ;diskio.c: 128: posicao_cursor_lcd(1,0);
 10070  001788  0E00               	movlw	0
 10071  00178A  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 10072  00178C  0E01               	movlw	1
 10073  00178E  EC3A  F016         	call	_posicao_cursor_lcd
 10074                           
 10075                           ;diskio.c: 129: escreve_frase_ram_lcd("Error!!!");
 10076  001792  0EE4               	movlw	low STR_15
 10077  001794  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 10078  001796  0E7F               	movlw	high STR_15
 10079  001798  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 10080  00179A  EC37  F017         	call	_escreve_frase_ram_lcd	;wreg free
 10081                           
 10082                           ;diskio.c: 131: _delay((unsigned long)((3000)*(20000000/4000.0)));
 10083  00179E  0E4D               	movlw	77
 10084  0017A0  6E29               	movwf	(??_disk_initialize+1)& (0+255),c
 10085  0017A2  0E19               	movlw	25
 10086  0017A4  6E28               	movwf	??_disk_initialize& (0+255),c
 10087  0017A6  0E50               	movlw	80
 10088  0017A8                     u9107:
 10089  0017A8  2EE8               	decfsz	wreg,f,c
 10090  0017AA  D7FE               	bra	u9107
 10091  0017AC  2E28               	decfsz	??_disk_initialize& (0+255),f,c
 10092  0017AE  D7FC               	bra	u9107
 10093  0017B0  2E29               	decfsz	(??_disk_initialize+1)& (0+255),f,c
 10094  0017B2  D7FA               	bra	u9107
 10095  0017B4                     l728:
 10096                           
 10097                           ;diskio.c: 132: }
 10098                           ;diskio.c: 133: _delay((unsigned long)((1000)*(20000000/4000.0)));
 10099  0017B4  0E1A               	movlw	26
 10100  0017B6  6E29               	movwf	(??_disk_initialize+1)& (0+255),c
 10101  0017B8  0E5E               	movlw	94
 10102  0017BA  6E28               	movwf	??_disk_initialize& (0+255),c
 10103  0017BC  0E6E               	movlw	110
 10104  0017BE                     u9117:
 10105  0017BE  2EE8               	decfsz	wreg,f,c
 10106  0017C0  D7FE               	bra	u9117
 10107  0017C2  2E28               	decfsz	??_disk_initialize& (0+255),f,c
 10108  0017C4  D7FC               	bra	u9117
 10109  0017C6  2E29               	decfsz	(??_disk_initialize+1)& (0+255),f,c
 10110  0017C8  D7FA               	bra	u9117
 10111  0017CA  D000               	nop2	
 10112                           
 10113                           ;diskio.c: 135: dummy_clocks(8);
 10114  0017CC  0E08               	movlw	8
 10115  0017CE  ECD6  F017         	call	_dummy_clocks
 10116                           
 10117                           ;diskio.c: 136: command(0X50,0X00000200,0XFF);
 10118  0017D2  0E00               	movlw	0
 10119  0017D4  6E1C               	movwf	command@arg,c
 10120  0017D6  0E02               	movlw	2
 10121  0017D8  6E1D               	movwf	command@arg+1,c
 10122  0017DA  0E00               	movlw	0
 10123  0017DC  6E1E               	movwf	command@arg+2,c
 10124  0017DE  0E00               	movlw	0
 10125  0017E0  6E1F               	movwf	command@arg+3,c
 10126  0017E2  0EFF               	movlw	255
 10127  0017E4  6E20               	movwf	command@CRC,c
 10128  0017E6  0E50               	movlw	80
 10129  0017E8  EC82  F017         	call	_command
 10130                           
 10131                           ;diskio.c: 137: proceed();
 10132  0017EC  ECFA  F018         	call	_proceed	;wreg free
 10133  0017F0                     
 10134                           ;diskio.c: 139: buff = response();
 10135  0017F0  ECED  F018         	call	_response	;wreg free
 10136  0017F4  0100               	movlb	0	; () banked
 10137  0017F6  6F67               	movwf	disk_initialize@buff& (0+255),b
 10138                           
 10139                           ; BSR set to: 0
 10140                           ;diskio.c: 140: }while(buff!=0x00);
 10141  0017F8  5167               	movf	disk_initialize@buff& (0+255),w,b
 10142  0017FA  A4D8               	btfss	status,2,c
 10143  0017FC  D7F9               	goto	l729
 10144                           
 10145                           ; BSR set to: 0
 10146                           ;diskio.c: 143: _delay((unsigned long)((2000)*(20000000/4000.0)));
 10147                           
 10148                           ; BSR set to: 0
 10149  0017FE  0E33               	movlw	51
 10150  001800  6E29               	movwf	(??_disk_initialize+1)& (0+255),c
 10151  001802  0EBB               	movlw	187
 10152  001804  6E28               	movwf	??_disk_initialize& (0+255),c
 10153  001806  0EE0               	movlw	224
 10154  001808                     u9127:
 10155  001808  2EE8               	decfsz	wreg,f,c
 10156  00180A  D7FE               	bra	u9127
 10157  00180C  2E28               	decfsz	??_disk_initialize& (0+255),f,c
 10158  00180E  D7FC               	bra	u9127
 10159  001810  2E29               	decfsz	(??_disk_initialize+1)& (0+255),f,c
 10160  001812  D7FA               	bra	u9127
 10161                           
 10162                           ;diskio.c: 145: return stat;
 10163  001814  0100               	movlb	0	; () banked
 10164  001816  5164               	movf	disk_initialize@stat& (0+255),w,b
 10165  001818  0012               	return	
 10166  00181A                     __end_of_disk_initialize:
 10167                           	opt stack 0
 10168                           tosu	equ	0xFFF
 10169                           tosh	equ	0xFFE
 10170                           tosl	equ	0xFFD
 10171                           pclath	equ	0xFFA
 10172                           tblptru	equ	0xFF8
 10173                           tblptrh	equ	0xFF7
 10174                           tblptrl	equ	0xFF6
 10175                           tablat	equ	0xFF5
 10176                           prodh	equ	0xFF4
 10177                           prodl	equ	0xFF3
 10178                           intcon	equ	0xFF2
 10179                           intcon2	equ	0xFF1
 10180                           intcon3	equ	0xFF0
 10181                           postinc0	equ	0xFEE
 10182                           wreg	equ	0xFE8
 10183                           indf1	equ	0xFE7
 10184                           postinc1	equ	0xFE6
 10185                           postdec1	equ	0xFE5
 10186                           fsr1h	equ	0xFE2
 10187                           fsr1l	equ	0xFE1
 10188                           indf2	equ	0xFDF
 10189                           postinc2	equ	0xFDE
 10190                           postdec2	equ	0xFDD
 10191                           plusw2	equ	0xFDB
 10192                           fsr2h	equ	0xFDA
 10193                           fsr2l	equ	0xFD9
 10194                           status	equ	0xFD8
 10195                           
 10196 ;; *************** function _reset *****************
 10197 ;; Defined at:
 10198 ;;		line 36 in file "diskio.c"
 10199 ;; Parameters:    Size  Location     Type
 10200 ;;		None
 10201 ;; Auto vars:     Size  Location     Type
 10202 ;;  count           2   36[COMRAM] int 
 10203 ;;  i               2   34[COMRAM] int 
 10204 ;;  buff            1   38[COMRAM] unsigned char 
 10205 ;; Return value:  Size  Location     Type
 10206 ;;                  1    wreg      void 
 10207 ;; Registers used:
 10208 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10209 ;; Tracked objects:
 10210 ;;		On entry : 0/0
 10211 ;;		On exit  : 0/0
 10212 ;;		Unchanged: 0/0
 10213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10214 ;;      Params:         0       0       0       0       0       0       0       0       0
 10215 ;;      Locals:         5       0       0       0       0       0       0       0       0
 10216 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10217 ;;      Totals:         5       0       0       0       0       0       0       0       0
 10218 ;;Total ram usage:        5 bytes
 10219 ;; Hardware stack levels used:    1
 10220 ;; Hardware stack levels required when called:    7
 10221 ;; This function calls:
 10222 ;;		_command
 10223 ;;		_dummy_clocks
 10224 ;;		_escreve_frase_ram_lcd
 10225 ;;		_posicao_cursor_lcd
 10226 ;;		_proceed
 10227 ;;		_response
 10228 ;; This function is called by:
 10229 ;;		_disk_initialize
 10230 ;; This function uses a non-reentrant model
 10231 ;;
 10232                           
 10233                           	psect	text39
 10234  002B18                     __ptext39:
 10235                           	opt stack 0
 10236  002B18                     _reset:
 10237                           	opt stack 19
 10238                           
 10239                           ;diskio.c: 38: int i = 0, count = 0;
 10240                           
 10241                           ; BSR set to: 0
 10242                           ;incstack = 0
 10243  002B18  0E00               	movlw	0
 10244  002B1A  6E24               	movwf	reset@i+1,c
 10245  002B1C  0E00               	movlw	0
 10246  002B1E  6E23               	movwf	reset@i,c
 10247  002B20  0E00               	movlw	0
 10248  002B22  6E26               	movwf	reset@count+1,c
 10249  002B24  0E00               	movlw	0
 10250  002B26  6E25               	movwf	reset@count,c
 10251                           
 10252                           ;diskio.c: 39: unsigned char buff;
 10253                           ;diskio.c: 40: posicao_cursor_lcd(1,0);
 10254  002B28  0E00               	movlw	0
 10255  002B2A  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 10256  002B2C  0E01               	movlw	1
 10257  002B2E  EC3A  F016         	call	_posicao_cursor_lcd
 10258                           
 10259                           ;diskio.c: 41: escreve_frase_ram_lcd("travou aqui");
 10260  002B32  0ECE               	movlw	low STR_13
 10261  002B34  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 10262  002B36  0E7F               	movlw	high STR_13
 10263  002B38  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 10264  002B3A  EC37  F017         	call	_escreve_frase_ram_lcd	;wreg free
 10265  002B3E                     
 10266                           ;diskio.c: 44: dummy_clocks(8);
 10267  002B3E  0E08               	movlw	8
 10268  002B40  ECD6  F017         	call	_dummy_clocks
 10269                           
 10270                           ;diskio.c: 45: command(0X40, 0X00000000, 0X95);
 10271  002B44  0E00               	movlw	0
 10272  002B46  6E1C               	movwf	command@arg,c
 10273  002B48  0E00               	movlw	0
 10274  002B4A  6E1D               	movwf	command@arg+1,c
 10275  002B4C  0E00               	movlw	0
 10276  002B4E  6E1E               	movwf	command@arg+2,c
 10277  002B50  0E00               	movlw	0
 10278  002B52  6E1F               	movwf	command@arg+3,c
 10279  002B54  0E95               	movlw	149
 10280  002B56  6E20               	movwf	command@CRC,c
 10281  002B58  0E40               	movlw	64
 10282  002B5A  EC82  F017         	call	_command
 10283                           
 10284                           ;diskio.c: 46: proceed();
 10285  002B5E  ECFA  F018         	call	_proceed	;wreg free
 10286  002B62                     
 10287                           ;diskio.c: 48: buff = response();
 10288  002B62  ECED  F018         	call	_response	;wreg free
 10289  002B66  6E27               	movwf	reset@buff,c
 10290                           
 10291                           ;diskio.c: 51: count++;
 10292  002B68  4A25               	infsnz	reset@count,f,c
 10293  002B6A  2A26               	incf	reset@count+1,f,c
 10294                           
 10295                           ;diskio.c: 52: }while((buff!=0X01) && (count<10) );
 10296  002B6C  0427               	decf	reset@buff,w,c
 10297  002B6E  B4D8               	btfsc	status,2,c
 10298  002B70  D008               	goto	u7170
 10299  002B72  BE26               	btfsc	reset@count+1,7,c
 10300  002B74  D7F6               	goto	l706
 10301  002B76  5026               	movf	reset@count+1,w,c
 10302  002B78  E104               	bnz	l6362
 10303  002B7A  0E0A               	movlw	10
 10304  002B7C  5C25               	subwf	reset@count,w,c
 10305  002B7E  A0D8               	btfss	status,0,c
 10306  002B80  D7F0               	goto	l706
 10307  002B82                     u7170:
 10308  002B82                     l6362:
 10309                           
 10310                           ;diskio.c: 53: count = 0;
 10311  002B82  0E00               	movlw	0
 10312  002B84  6E26               	movwf	reset@count+1,c
 10313  002B86  0E00               	movlw	0
 10314  002B88  6E25               	movwf	reset@count,c
 10315                           
 10316                           ;diskio.c: 54: }while(buff!=0X01);
 10317  002B8A  0427               	decf	reset@buff,w,c
 10318  002B8C  B4D8               	btfsc	status,2,c
 10319  002B8E  0012               	return	
 10320  002B90  D7D6               	goto	l705
 10321  002B92                     __end_of_reset:
 10322                           	opt stack 0
 10323                           tosu	equ	0xFFF
 10324                           tosh	equ	0xFFE
 10325                           tosl	equ	0xFFD
 10326                           pclath	equ	0xFFA
 10327                           tblptru	equ	0xFF8
 10328                           tblptrh	equ	0xFF7
 10329                           tblptrl	equ	0xFF6
 10330                           tablat	equ	0xFF5
 10331                           prodh	equ	0xFF4
 10332                           prodl	equ	0xFF3
 10333                           intcon	equ	0xFF2
 10334                           intcon2	equ	0xFF1
 10335                           intcon3	equ	0xFF0
 10336                           postinc0	equ	0xFEE
 10337                           wreg	equ	0xFE8
 10338                           indf1	equ	0xFE7
 10339                           postinc1	equ	0xFE6
 10340                           postdec1	equ	0xFE5
 10341                           fsr1h	equ	0xFE2
 10342                           fsr1l	equ	0xFE1
 10343                           indf2	equ	0xFDF
 10344                           postinc2	equ	0xFDE
 10345                           postdec2	equ	0xFDD
 10346                           plusw2	equ	0xFDB
 10347                           fsr2h	equ	0xFDA
 10348                           fsr2l	equ	0xFD9
 10349                           status	equ	0xFD8
 10350                           
 10351 ;; *************** function _escreve_cmd_lcd *****************
 10352 ;; Defined at:
 10353 ;;		line 162 in file "bibliotecas/display/display_lcd.c"
 10354 ;; Parameters:    Size  Location     Type
 10355 ;;  comando         1    wreg     unsigned char 
 10356 ;; Auto vars:     Size  Location     Type
 10357 ;;  comando         1   27[COMRAM] unsigned char 
 10358 ;; Return value:  Size  Location     Type
 10359 ;;                  1    wreg      void 
 10360 ;; Registers used:
 10361 ;;		wreg, status,2, status,0, cstack
 10362 ;; Tracked objects:
 10363 ;;		On entry : 0/0
 10364 ;;		On exit  : 0/0
 10365 ;;		Unchanged: 0/0
 10366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10367 ;;      Params:         0       0       0       0       0       0       0       0       0
 10368 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10369 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10370 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10371 ;;Total ram usage:        1 bytes
 10372 ;; Hardware stack levels used:    1
 10373 ;; Hardware stack levels required when called:    3
 10374 ;; This function calls:
 10375 ;;		_delay
 10376 ;; This function is called by:
 10377 ;;		_inicializa_SPI
 10378 ;;		_mensagem_inicial
 10379 ;;		_SDCard
 10380 ;;		_init_lcd
 10381 ;;		_disk_initialize
 10382 ;;		_leitura_chave
 10383 ;;		_cria_caractere_lcd
 10384 ;; This function uses a non-reentrant model
 10385 ;;
 10386                           
 10387                           	psect	text40
 10388  00298E                     __ptext40:
 10389                           	opt stack 0
 10390  00298E                     _escreve_cmd_lcd:
 10391                           	opt stack 26
 10392                           
 10393                           ;incstack = 0
 10394                           ;escreve_cmd_lcd@comando stored from wreg
 10395  00298E  6E1C               	movwf	escreve_cmd_lcd@comando,c
 10396                           
 10397                           ;display_lcd.c: 165: PORTDbits.RD2 = 0;
 10398  002990  9483               	bcf	3971,2,c	;volatile
 10399                           
 10400                           ;display_lcd.c: 166: PORTDbits.RD1 = 0;
 10401  002992  9283               	bcf	3971,1,c	;volatile
 10402                           
 10403                           ;display_lcd.c: 167: PORTDbits.RD0 = 0;
 10404  002994  9083               	bcf	3971,0,c	;volatile
 10405                           
 10406                           ;display_lcd.c: 170: if(comando&0b00010000){PORTDbits.RD4=1;}
 10407  002996  A81C               	btfss	escreve_cmd_lcd@comando,4,c
 10408  002998  D002               	goto	l567
 10409  00299A  8883               	bsf	3971,4,c	;volatile
 10410  00299C  D001               	goto	l568
 10411  00299E                     l567:
 10412                           
 10413                           ;display_lcd.c: 171: else {PORTDbits.RD4=0;}
 10414  00299E  9883               	bcf	3971,4,c	;volatile
 10415  0029A0                     l568:
 10416                           
 10417                           ;display_lcd.c: 172: if(comando&0b00100000){PORTDbits.RD5=1;}
 10418  0029A0  AA1C               	btfss	escreve_cmd_lcd@comando,5,c
 10419  0029A2  D002               	goto	l569
 10420  0029A4  8A83               	bsf	3971,5,c	;volatile
 10421  0029A6  D001               	goto	l570
 10422  0029A8                     l569:
 10423                           
 10424                           ;display_lcd.c: 173: else {PORTDbits.RD5=0;}
 10425  0029A8  9A83               	bcf	3971,5,c	;volatile
 10426  0029AA                     l570:
 10427                           
 10428                           ;display_lcd.c: 174: if(comando&0b01000000){PORTDbits.RD6=1;}
 10429  0029AA  AC1C               	btfss	escreve_cmd_lcd@comando,6,c
 10430  0029AC  D002               	goto	l571
 10431  0029AE  8C83               	bsf	3971,6,c	;volatile
 10432  0029B0  D001               	goto	l572
 10433  0029B2                     l571:
 10434                           
 10435                           ;display_lcd.c: 175: else {PORTDbits.RD6=0;}
 10436  0029B2  9C83               	bcf	3971,6,c	;volatile
 10437  0029B4                     l572:
 10438                           
 10439                           ;display_lcd.c: 176: if(comando&0b10000000){PORTDbits.RD7=1;}
 10440  0029B4  AE1C               	btfss	escreve_cmd_lcd@comando,7,c
 10441  0029B6  D002               	goto	l573
 10442  0029B8  8E83               	bsf	3971,7,c	;volatile
 10443  0029BA  D001               	goto	l574
 10444  0029BC                     l573:
 10445                           
 10446                           ;display_lcd.c: 177: else {PORTDbits.RD7=0;}
 10447  0029BC  9E83               	bcf	3971,7,c	;volatile
 10448  0029BE                     l574:
 10449                           
 10450                           ;display_lcd.c: 180: PORTDbits.RD0 = 1;
 10451  0029BE  8083               	bsf	3971,0,c	;volatile
 10452                           
 10453                           ;display_lcd.c: 181: delay();
 10454  0029C0  EC29  F018         	call	_delay	;wreg free
 10455                           
 10456                           ;display_lcd.c: 182: PORTDbits.RD0 = 0;
 10457  0029C4  9083               	bcf	3971,0,c	;volatile
 10458                           
 10459                           ;display_lcd.c: 183: delay();
 10460  0029C6  EC29  F018         	call	_delay	;wreg free
 10461                           
 10462                           ;display_lcd.c: 186: if(comando&0b00000001){PORTDbits.RD4=1;}
 10463  0029CA  A01C               	btfss	escreve_cmd_lcd@comando,0,c
 10464  0029CC  D002               	goto	l575
 10465  0029CE  8883               	bsf	3971,4,c	;volatile
 10466  0029D0  D001               	goto	l576
 10467  0029D2                     l575:
 10468                           
 10469                           ;display_lcd.c: 187: else {PORTDbits.RD4=0;}
 10470  0029D2  9883               	bcf	3971,4,c	;volatile
 10471  0029D4                     l576:
 10472                           
 10473                           ;display_lcd.c: 188: if(comando&0b00000010){PORTDbits.RD5=1;}
 10474  0029D4  A21C               	btfss	escreve_cmd_lcd@comando,1,c
 10475  0029D6  D002               	goto	l577
 10476  0029D8  8A83               	bsf	3971,5,c	;volatile
 10477  0029DA  D001               	goto	l578
 10478  0029DC                     l577:
 10479                           
 10480                           ;display_lcd.c: 189: else {PORTDbits.RD5=0;}
 10481  0029DC  9A83               	bcf	3971,5,c	;volatile
 10482  0029DE                     l578:
 10483                           
 10484                           ;display_lcd.c: 190: if(comando&0b00000100){PORTDbits.RD6=1;}
 10485  0029DE  A41C               	btfss	escreve_cmd_lcd@comando,2,c
 10486  0029E0  D002               	goto	l579
 10487  0029E2  8C83               	bsf	3971,6,c	;volatile
 10488  0029E4  D001               	goto	l580
 10489  0029E6                     l579:
 10490                           
 10491                           ;display_lcd.c: 191: else {PORTDbits.RD6=0;}
 10492  0029E6  9C83               	bcf	3971,6,c	;volatile
 10493  0029E8                     l580:
 10494                           
 10495                           ;display_lcd.c: 192: if(comando&0b00001000){PORTDbits.RD7=1;}
 10496  0029E8  A61C               	btfss	escreve_cmd_lcd@comando,3,c
 10497  0029EA  D002               	goto	l581
 10498  0029EC  8E83               	bsf	3971,7,c	;volatile
 10499  0029EE  D001               	goto	l582
 10500  0029F0                     l581:
 10501                           
 10502                           ;display_lcd.c: 193: else {PORTDbits.RD7=0;}
 10503  0029F0  9E83               	bcf	3971,7,c	;volatile
 10504  0029F2                     l582:
 10505                           
 10506                           ;display_lcd.c: 196: PORTDbits.RD0 = 1;
 10507  0029F2  8083               	bsf	3971,0,c	;volatile
 10508                           
 10509                           ;display_lcd.c: 197: delay();
 10510  0029F4  EC29  F018         	call	_delay	;wreg free
 10511                           
 10512                           ;display_lcd.c: 198: PORTDbits.RD0 = 0;
 10513  0029F8  9083               	bcf	3971,0,c	;volatile
 10514                           
 10515                           ;display_lcd.c: 199: delay();
 10516  0029FA  EC29  F018         	call	_delay	;wreg free
 10517                           
 10518                           ;display_lcd.c: 204: if (comando==0x01 || comando==0x02 || comando==0x03)
 10519  0029FE  041C               	decf	escreve_cmd_lcd@comando,w,c
 10520  002A00  B4D8               	btfsc	status,2,c
 10521  002A02  D008               	goto	u7150
 10522  002A04  0E02               	movlw	2
 10523  002A06  181C               	xorwf	escreve_cmd_lcd@comando,w,c
 10524  002A08  B4D8               	btfsc	status,2,c
 10525  002A0A  D004               	goto	u7150
 10526  002A0C  0E03               	movlw	3
 10527  002A0E  181C               	xorwf	escreve_cmd_lcd@comando,w,c
 10528  002A10  A4D8               	btfss	status,2,c
 10529  002A12  0012               	return	
 10530  002A14                     u7150:
 10531                           
 10532                           ;display_lcd.c: 205: { delay(); }
 10533  002A14  EC29  F018         	call	_delay	;wreg free
 10534  002A18  0012               	return	
 10535  002A1A                     __end_of_escreve_cmd_lcd:
 10536                           	opt stack 0
 10537                           tosu	equ	0xFFF
 10538                           tosh	equ	0xFFE
 10539                           tosl	equ	0xFFD
 10540                           pclath	equ	0xFFA
 10541                           tblptru	equ	0xFF8
 10542                           tblptrh	equ	0xFF7
 10543                           tblptrl	equ	0xFF6
 10544                           tablat	equ	0xFF5
 10545                           prodh	equ	0xFF4
 10546                           prodl	equ	0xFF3
 10547                           intcon	equ	0xFF2
 10548                           intcon2	equ	0xFF1
 10549                           intcon3	equ	0xFF0
 10550                           postinc0	equ	0xFEE
 10551                           wreg	equ	0xFE8
 10552                           indf1	equ	0xFE7
 10553                           postinc1	equ	0xFE6
 10554                           postdec1	equ	0xFE5
 10555                           fsr1h	equ	0xFE2
 10556                           fsr1l	equ	0xFE1
 10557                           indf2	equ	0xFDF
 10558                           postinc2	equ	0xFDE
 10559                           postdec2	equ	0xFDD
 10560                           plusw2	equ	0xFDB
 10561                           fsr2h	equ	0xFDA
 10562                           fsr2l	equ	0xFD9
 10563                           status	equ	0xFD8
 10564                           
 10565 ;; *************** function _check_fs *****************
 10566 ;; Defined at:
 10567 ;;		line 722 in file "pff.c"
 10568 ;; Parameters:    Size  Location     Type
 10569 ;;  buf             2   12[BANK0 ] PTR unsigned char 
 10570 ;;		 -> pf_mount@buf(36), 
 10571 ;;  sect            4   14[BANK0 ] unsigned long 
 10572 ;; Auto vars:     Size  Location     Type
 10573 ;;		None
 10574 ;; Return value:  Size  Location     Type
 10575 ;;                  1    wreg      unsigned char 
 10576 ;; Registers used:
 10577 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10578 ;; Tracked objects:
 10579 ;;		On entry : 0/0
 10580 ;;		On exit  : 0/0
 10581 ;;		Unchanged: 0/0
 10582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10583 ;;      Params:         0       6       0       0       0       0       0       0       0
 10584 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10585 ;;      Temps:          0       4       0       0       0       0       0       0       0
 10586 ;;      Totals:         0      10       0       0       0       0       0       0       0
 10587 ;;Total ram usage:       10 bytes
 10588 ;; Hardware stack levels used:    1
 10589 ;; Hardware stack levels required when called:    8
 10590 ;; This function calls:
 10591 ;;		_disk_readp
 10592 ;; This function is called by:
 10593 ;;		_pf_mount
 10594 ;; This function uses a non-reentrant model
 10595 ;;
 10596                           
 10597                           	psect	text41
 10598  001B38                     __ptext41:
 10599                           	opt stack 0
 10600  001B38                     _check_fs:
 10601                           	opt stack 19
 10602                           
 10603                           ;pff.c: 727: if (disk_readp(buf, sect, 510, 2))
 10604                           
 10605                           ;incstack = 0
 10606  001B38  C06C  F023         	movff	check_fs@buf,disk_readp@rd
 10607  001B3C  C06D  F024         	movff	check_fs@buf+1,disk_readp@rd+1
 10608  001B40  C06E  F025         	movff	check_fs@sect,disk_readp@sector
 10609  001B44  C06F  F026         	movff	check_fs@sect+1,disk_readp@sector+1
 10610  001B48  C070  F027         	movff	check_fs@sect+2,disk_readp@sector+2
 10611  001B4C  C071  F028         	movff	check_fs@sect+3,disk_readp@sector+3
 10612  001B50  0E01               	movlw	1
 10613  001B52  6E2A               	movwf	disk_readp@offset+1,c
 10614  001B54  0EFE               	movlw	254
 10615  001B56  6E29               	movwf	disk_readp@offset,c
 10616  001B58  0E00               	movlw	0
 10617  001B5A  6E2C               	movwf	disk_readp@count+1,c
 10618  001B5C  0E02               	movlw	2
 10619  001B5E  6E2B               	movwf	disk_readp@count,c
 10620  001B60  EC3C  F009         	call	_disk_readp	;wreg free
 10621  001B64  0900               	iorlw	0
 10622  001B66  B4D8               	btfsc	status,2,c
 10623  001B68  D002               	goto	l938
 10624                           
 10625                           ;pff.c: 728: return 3;
 10626  001B6A  0E03               	movlw	3
 10627  001B6C  0012               	return	
 10628  001B6E                     l938:
 10629                           
 10630                           ;pff.c: 729: if ( (WORD)(((WORD)*((BYTE*)(buf)+1)<<8)|(WORD)*(BYTE*)(buf)) != 0xAA55)
 10631  001B6E  0100               	movlb	0	; () banked
 10632  001B70  EE20 F001          	lfsr	2,1
 10633  001B74  516C               	movf	check_fs@buf& (0+255),w,b
 10634  001B76  26D9               	addwf	fsr2l,f,c
 10635  001B78  516D               	movf	(check_fs@buf+1)& (0+255),w,b
 10636  001B7A  22DA               	addwfc	fsr2h,f,c
 10637  001B7C  50DF               	movf	indf2,w,c
 10638  001B7E  6F72               	movwf	??_check_fs& (0+255),b
 10639  001B80  5172               	movf	??_check_fs& (0+255),w,b
 10640  001B82  6F74               	movwf	(??_check_fs+2)& (0+255),b
 10641  001B84  6B73               	clrf	(??_check_fs+1)& (0+255),b
 10642  001B86  C06C  FFD9         	movff	check_fs@buf,fsr2l
 10643  001B8A  C06D  FFDA         	movff	check_fs@buf+1,fsr2h
 10644  001B8E  50DF               	movf	indf2,w,c
 10645  001B90  6F75               	movwf	(??_check_fs+3)& (0+255),b
 10646  001B92  5175               	movf	(??_check_fs+3)& (0+255),w,b
 10647  001B94  1373               	iorwf	(??_check_fs+1)& (0+255),f,b
 10648  001B96  0E00               	movlw	0
 10649  001B98  1374               	iorwf	(??_check_fs+2)& (0+255),f,b
 10650  001B9A  0E55               	movlw	85
 10651  001B9C  1973               	xorwf	(??_check_fs+1)& (0+255),w,b
 10652  001B9E  E104               	bnz	u7650
 10653  001BA0  0EAA               	movlw	170
 10654  001BA2  1974               	xorwf	(??_check_fs+2)& (0+255),w,b
 10655  001BA4  B4D8               	btfsc	status,2,c
 10656  001BA6  D002               	goto	l940
 10657  001BA8                     u7650:
 10658                           
 10659                           ; BSR set to: 0
 10660                           ;pff.c: 730: {
 10661                           ;pff.c: 731: return 2;
 10662  001BA8  0E02               	movlw	2
 10663                           
 10664                           ; BSR set to: 0
 10665  001BAA  0012               	return	
 10666  001BAC                     l940:
 10667                           
 10668                           ; BSR set to: 0
 10669                           
 10670                           ; BSR set to: 0
 10671  001BAC  C06C  F023         	movff	check_fs@buf,disk_readp@rd
 10672  001BB0  C06D  F024         	movff	check_fs@buf+1,disk_readp@rd+1
 10673  001BB4  C06E  F025         	movff	check_fs@sect,disk_readp@sector
 10674  001BB8  C06F  F026         	movff	check_fs@sect+1,disk_readp@sector+1
 10675  001BBC  C070  F027         	movff	check_fs@sect+2,disk_readp@sector+2
 10676  001BC0  C071  F028         	movff	check_fs@sect+3,disk_readp@sector+3
 10677  001BC4  0E00               	movlw	0
 10678  001BC6  6E2A               	movwf	disk_readp@offset+1,c
 10679  001BC8  0E36               	movlw	54
 10680  001BCA  6E29               	movwf	disk_readp@offset,c
 10681  001BCC  0E00               	movlw	0
 10682  001BCE  6E2C               	movwf	disk_readp@count+1,c
 10683  001BD0  0E02               	movlw	2
 10684  001BD2  6E2B               	movwf	disk_readp@count,c
 10685  001BD4  EC3C  F009         	call	_disk_readp	;wreg free
 10686  001BD8  0900               	iorlw	0
 10687  001BDA  A4D8               	btfss	status,2,c
 10688  001BDC  D01F               	goto	l941
 10689  001BDE  0100               	movlb	0	; () banked
 10690  001BE0  EE20 F001          	lfsr	2,1
 10691  001BE4  516C               	movf	check_fs@buf& (0+255),w,b
 10692  001BE6  26D9               	addwf	fsr2l,f,c
 10693  001BE8  516D               	movf	(check_fs@buf+1)& (0+255),w,b
 10694  001BEA  22DA               	addwfc	fsr2h,f,c
 10695  001BEC  50DF               	movf	indf2,w,c
 10696  001BEE  6F72               	movwf	??_check_fs& (0+255),b
 10697  001BF0  5172               	movf	??_check_fs& (0+255),w,b
 10698  001BF2  6F74               	movwf	(??_check_fs+2)& (0+255),b
 10699  001BF4  6B73               	clrf	(??_check_fs+1)& (0+255),b
 10700  001BF6  C06C  FFD9         	movff	check_fs@buf,fsr2l
 10701  001BFA  C06D  FFDA         	movff	check_fs@buf+1,fsr2h
 10702  001BFE  50DF               	movf	indf2,w,c
 10703  001C00  6F75               	movwf	(??_check_fs+3)& (0+255),b
 10704  001C02  5175               	movf	(??_check_fs+3)& (0+255),w,b
 10705  001C04  1373               	iorwf	(??_check_fs+1)& (0+255),f,b
 10706  001C06  0E00               	movlw	0
 10707  001C08  1374               	iorwf	(??_check_fs+2)& (0+255),f,b
 10708  001C0A  0E46               	movlw	70
 10709  001C0C  1973               	xorwf	(??_check_fs+1)& (0+255),w,b
 10710  001C0E  E106               	bnz	l6706
 10711  001C10  0E41               	movlw	65
 10712  001C12  1974               	xorwf	(??_check_fs+2)& (0+255),w,b
 10713  001C14  A4D8               	btfss	status,2,c
 10714  001C16  D002               	goto	l941
 10715                           
 10716                           ; BSR set to: 0
 10717                           ;pff.c: 734: return 0;
 10718  001C18  0E00               	movlw	0
 10719                           
 10720                           ; BSR set to: 0
 10721  001C1A  0012               	return	
 10722  001C1C                     l941:
 10723  001C1C                     l6706:
 10724  001C1C  C06C  F023         	movff	check_fs@buf,disk_readp@rd
 10725  001C20  C06D  F024         	movff	check_fs@buf+1,disk_readp@rd+1
 10726  001C24  C06E  F025         	movff	check_fs@sect,disk_readp@sector
 10727  001C28  C06F  F026         	movff	check_fs@sect+1,disk_readp@sector+1
 10728  001C2C  C070  F027         	movff	check_fs@sect+2,disk_readp@sector+2
 10729  001C30  C071  F028         	movff	check_fs@sect+3,disk_readp@sector+3
 10730  001C34  0E00               	movlw	0
 10731  001C36  6E2A               	movwf	disk_readp@offset+1,c
 10732  001C38  0E52               	movlw	82
 10733  001C3A  6E29               	movwf	disk_readp@offset,c
 10734  001C3C  0E00               	movlw	0
 10735  001C3E  6E2C               	movwf	disk_readp@count+1,c
 10736  001C40  0E02               	movlw	2
 10737  001C42  6E2B               	movwf	disk_readp@count,c
 10738  001C44  EC3C  F009         	call	_disk_readp	;wreg free
 10739  001C48  0900               	iorlw	0
 10740  001C4A  A4D8               	btfss	status,2,c
 10741  001C4C  D01F               	goto	l942
 10742  001C4E  0100               	movlb	0	; () banked
 10743  001C50  EE20 F001          	lfsr	2,1
 10744  001C54  516C               	movf	check_fs@buf& (0+255),w,b
 10745  001C56  26D9               	addwf	fsr2l,f,c
 10746  001C58  516D               	movf	(check_fs@buf+1)& (0+255),w,b
 10747  001C5A  22DA               	addwfc	fsr2h,f,c
 10748  001C5C  50DF               	movf	indf2,w,c
 10749  001C5E  6F72               	movwf	??_check_fs& (0+255),b
 10750  001C60  5172               	movf	??_check_fs& (0+255),w,b
 10751  001C62  6F74               	movwf	(??_check_fs+2)& (0+255),b
 10752  001C64  6B73               	clrf	(??_check_fs+1)& (0+255),b
 10753  001C66  C06C  FFD9         	movff	check_fs@buf,fsr2l
 10754  001C6A  C06D  FFDA         	movff	check_fs@buf+1,fsr2h
 10755  001C6E  50DF               	movf	indf2,w,c
 10756  001C70  6F75               	movwf	(??_check_fs+3)& (0+255),b
 10757  001C72  5175               	movf	(??_check_fs+3)& (0+255),w,b
 10758  001C74  1373               	iorwf	(??_check_fs+1)& (0+255),f,b
 10759  001C76  0E00               	movlw	0
 10760  001C78  1374               	iorwf	(??_check_fs+2)& (0+255),f,b
 10761  001C7A  0E46               	movlw	70
 10762  001C7C  1973               	xorwf	(??_check_fs+1)& (0+255),w,b
 10763  001C7E  E106               	bnz	l6714
 10764  001C80  0E41               	movlw	65
 10765  001C82  1974               	xorwf	(??_check_fs+2)& (0+255),w,b
 10766  001C84  A4D8               	btfss	status,2,c
 10767  001C86  D002               	goto	l942
 10768                           
 10769                           ; BSR set to: 0
 10770                           ;pff.c: 736: return 0;
 10771  001C88  0E00               	movlw	0
 10772                           
 10773                           ; BSR set to: 0
 10774  001C8A  0012               	return	
 10775  001C8C                     l942:
 10776  001C8C                     l6714:
 10777                           
 10778                           ;pff.c: 737: return 1;
 10779  001C8C  0E01               	movlw	1
 10780  001C8E  0012               	return	
 10781  001C90                     __end_of_check_fs:
 10782                           	opt stack 0
 10783                           tosu	equ	0xFFF
 10784                           tosh	equ	0xFFE
 10785                           tosl	equ	0xFFD
 10786                           pclath	equ	0xFFA
 10787                           tblptru	equ	0xFF8
 10788                           tblptrh	equ	0xFF7
 10789                           tblptrl	equ	0xFF6
 10790                           tablat	equ	0xFF5
 10791                           prodh	equ	0xFF4
 10792                           prodl	equ	0xFF3
 10793                           intcon	equ	0xFF2
 10794                           intcon2	equ	0xFF1
 10795                           intcon3	equ	0xFF0
 10796                           postinc0	equ	0xFEE
 10797                           wreg	equ	0xFE8
 10798                           indf1	equ	0xFE7
 10799                           postinc1	equ	0xFE6
 10800                           postdec1	equ	0xFE5
 10801                           fsr1h	equ	0xFE2
 10802                           fsr1l	equ	0xFE1
 10803                           indf2	equ	0xFDF
 10804                           postinc2	equ	0xFDE
 10805                           postdec2	equ	0xFDD
 10806                           plusw2	equ	0xFDB
 10807                           fsr2h	equ	0xFDA
 10808                           fsr2l	equ	0xFD9
 10809                           status	equ	0xFD8
 10810                           
 10811 ;; *************** function _disk_readp *****************
 10812 ;; Defined at:
 10813 ;;		line 153 in file "diskio.c"
 10814 ;; Parameters:    Size  Location     Type
 10815 ;;  rd              2   34[COMRAM] PTR unsigned char 
 10816 ;;		 -> pf_readdir@dir(32), pf_opendir@dir(32), pf_open@dir(32), pf_mount@buf(36), 
 10817 ;;		 -> NULL(0), get_fat@buf(4), data_buffer_32(32), 
 10818 ;;  sector          4   36[COMRAM] unsigned long 
 10819 ;;  offset          2   40[COMRAM] unsigned int 
 10820 ;;  count           2   42[COMRAM] unsigned int 
 10821 ;; Auto vars:     Size  Location     Type
 10822 ;;  start_add       4    5[BANK0 ] unsigned long 
 10823 ;;  length          2   10[BANK0 ] int 
 10824 ;;  i               2    0        int 
 10825 ;;  buff            1    9[BANK0 ] unsigned char 
 10826 ;;  ptr             1    4[BANK0 ] unsigned char 
 10827 ;;  res             1    0        enum E14
 10828 ;; Return value:  Size  Location     Type
 10829 ;;                  1    wreg      enum E14
 10830 ;; Registers used:
 10831 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10832 ;; Tracked objects:
 10833 ;;		On entry : 0/0
 10834 ;;		On exit  : 0/0
 10835 ;;		Unchanged: 0/0
 10836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10837 ;;      Params:        10       0       0       0       0       0       0       0       0
 10838 ;;      Locals:         0       8       0       0       0       0       0       0       0
 10839 ;;      Temps:          0       4       0       0       0       0       0       0       0
 10840 ;;      Totals:        10      12       0       0       0       0       0       0       0
 10841 ;;Total ram usage:       22 bytes
 10842 ;; Hardware stack levels used:    1
 10843 ;; Hardware stack levels required when called:    7
 10844 ;; This function calls:
 10845 ;;		_command
 10846 ;;		_dummy_clocks
 10847 ;;		_proceed
 10848 ;;		_response
 10849 ;; This function is called by:
 10850 ;;		_get_fat
 10851 ;;		_dir_find
 10852 ;;		_check_fs
 10853 ;;		_pf_mount
 10854 ;;		_pf_read
 10855 ;;		_dir_read
 10856 ;; This function uses a non-reentrant model
 10857 ;;
 10858                           
 10859                           	psect	text42
 10860  001278                     __ptext42:
 10861                           	opt stack 0
 10862  001278                     _disk_readp:
 10863                           	opt stack 19
 10864                           
 10865                           ;diskio.c: 160: DRESULT res;
 10866                           ;diskio.c: 161: unsigned char ptr=0X00,buff;
 10867                           
 10868                           ;incstack = 0
 10869  001278  0E00               	movlw	0
 10870  00127A  0100               	movlb	0	; () banked
 10871  00127C  6F64               	movwf	disk_readp@ptr& (0+255),b
 10872                           
 10873                           ; BSR set to: 0
 10874                           ;diskio.c: 162: unsigned long int start_add;
 10875                           ;diskio.c: 163: static unsigned char arr[512];
 10876                           ;diskio.c: 164: int length,i;
 10877                           ;diskio.c: 166: if(offset == 0)
 10878  00127E  5029               	movf	disk_readp@offset,w,c
 10879  001280  102A               	iorwf	disk_readp@offset+1,w,c
 10880  001282  A4D8               	btfss	status,2,c
 10881  001284  D0AA               	goto	l736
 10882                           
 10883                           ; BSR set to: 0
 10884                           ;diskio.c: 167: {
 10885                           ;diskio.c: 168: start_add = ((sector*512));
 10886  001286  C025  F060         	movff	disk_readp@sector,??_disk_readp
 10887  00128A  C026  F061         	movff	disk_readp@sector+1,??_disk_readp+1
 10888  00128E  C027  F062         	movff	disk_readp@sector+2,??_disk_readp+2
 10889  001292  C028  F063         	movff	disk_readp@sector+3,??_disk_readp+3
 10890  001296  0E09               	movlw	9
 10891  001298                     u6565:
 10892  001298  90D8               	bcf	status,0,c
 10893  00129A  3760               	rlcf	??_disk_readp& (0+255),f,b
 10894  00129C  3761               	rlcf	(??_disk_readp+1)& (0+255),f,b
 10895  00129E  3762               	rlcf	(??_disk_readp+2)& (0+255),f,b
 10896  0012A0  3763               	rlcf	(??_disk_readp+3)& (0+255),f,b
 10897  0012A2  2EE8               	decfsz	wreg,f,c
 10898  0012A4  D7F9               	goto	u6565
 10899  0012A6  C060  F065         	movff	??_disk_readp,disk_readp@start_add
 10900  0012AA  C061  F066         	movff	??_disk_readp+1,disk_readp@start_add+1
 10901  0012AE  C062  F067         	movff	??_disk_readp+2,disk_readp@start_add+2
 10902  0012B2  C063  F068         	movff	??_disk_readp+3,disk_readp@start_add+3
 10903                           
 10904                           ; BSR set to: 0
 10905                           ;diskio.c: 170: _delay((unsigned long)((1000)*(20000000/4000.0)));
 10906  0012B6  0E1A               	movlw	26
 10907  0012B8  0100               	movlb	0	; () banked
 10908  0012BA  6F61               	movwf	(??_disk_readp+1)& (0+255),b
 10909  0012BC  0E5E               	movlw	94
 10910  0012BE  6F60               	movwf	??_disk_readp& (0+255),b
 10911  0012C0  0E6E               	movlw	110
 10912  0012C2                     u9137:
 10913  0012C2  2EE8               	decfsz	wreg,f,c
 10914  0012C4  D7FE               	bra	u9137
 10915  0012C6  2F60               	decfsz	??_disk_readp& (0+255),f,b
 10916  0012C8  D7FC               	bra	u9137
 10917  0012CA  2F61               	decfsz	(??_disk_readp+1)& (0+255),f,b
 10918  0012CC  D7FA               	bra	u9137
 10919  0012CE  F000               	nop	
 10920                           
 10921                           ;diskio.c: 172: dummy_clocks(8);
 10922  0012D0  0E08               	movlw	8
 10923  0012D2  ECD6  F017         	call	_dummy_clocks
 10924                           
 10925                           ;diskio.c: 173: command(0X52,start_add,0X00);
 10926  0012D6  C065  F01C         	movff	disk_readp@start_add,command@arg
 10927  0012DA  C066  F01D         	movff	disk_readp@start_add+1,command@arg+1
 10928  0012DE  C067  F01E         	movff	disk_readp@start_add+2,command@arg+2
 10929  0012E2  C068  F01F         	movff	disk_readp@start_add+3,command@arg+3
 10930  0012E6  0E00               	movlw	0
 10931  0012E8  6E20               	movwf	command@CRC,c
 10932  0012EA  0E52               	movlw	82
 10933  0012EC  EC82  F017         	call	_command
 10934                           
 10935                           ;diskio.c: 174: proceed();
 10936  0012F0  ECFA  F018         	call	_proceed	;wreg free
 10937  0012F4                     
 10938                           ;diskio.c: 176: buff = response();
 10939  0012F4  ECED  F018         	call	_response	;wreg free
 10940  0012F8  0100               	movlb	0	; () banked
 10941  0012FA  6F69               	movwf	disk_readp@buff& (0+255),b
 10942                           
 10943                           ; BSR set to: 0
 10944                           ;diskio.c: 177: }while(buff!=0x00);
 10945  0012FC  5169               	movf	disk_readp@buff& (0+255),w,b
 10946  0012FE  A4D8               	btfss	status,2,c
 10947  001300  D7F9               	goto	l737
 10948                           
 10949                           ; BSR set to: 0
 10950                           ;diskio.c: 178: _delay((unsigned long)((1000)*(20000000/4000.0)));
 10951                           
 10952                           ; BSR set to: 0
 10953  001302  0E1A               	movlw	26
 10954  001304  0100               	movlb	0	; () banked
 10955  001306  6F61               	movwf	(??_disk_readp+1)& (0+255),b
 10956  001308  0E5E               	movlw	94
 10957  00130A  6F60               	movwf	??_disk_readp& (0+255),b
 10958  00130C  0E6E               	movlw	110
 10959  00130E                     u9147:
 10960  00130E  2EE8               	decfsz	wreg,f,c
 10961  001310  D7FE               	bra	u9147
 10962  001312  2F60               	decfsz	??_disk_readp& (0+255),f,b
 10963  001314  D7FC               	bra	u9147
 10964  001316  2F61               	decfsz	(??_disk_readp+1)& (0+255),f,b
 10965  001318  D7FA               	bra	u9147
 10966  00131A  F000               	nop	
 10967                           
 10968                           ;diskio.c: 180: proceed();
 10969  00131C  ECFA  F018         	call	_proceed	;wreg free
 10970  001320                     
 10971                           ;diskio.c: 182: buff = response();
 10972  001320  ECED  F018         	call	_response	;wreg free
 10973  001324  0100               	movlb	0	; () banked
 10974  001326  6F69               	movwf	disk_readp@buff& (0+255),b
 10975                           
 10976                           ; BSR set to: 0
 10977                           ;diskio.c: 183: }while(buff!=0xFE);
 10978  001328  0EFE               	movlw	254
 10979  00132A  1969               	xorwf	disk_readp@buff& (0+255),w,b
 10980  00132C  A4D8               	btfss	status,2,c
 10981  00132E  D7F8               	goto	l739
 10982                           
 10983                           ; BSR set to: 0
 10984                           ;diskio.c: 184: length = 0;
 10985                           
 10986                           ; BSR set to: 0
 10987  001330  0E00               	movlw	0
 10988  001332  6F6B               	movwf	(disk_readp@length+1)& (0+255),b
 10989  001334  0E00               	movlw	0
 10990  001336  6F6A               	movwf	disk_readp@length& (0+255),b
 10991                           
 10992                           ;diskio.c: 185: while ( length < count )
 10993  001338  D00C               	goto	l741
 10994  00133A                     
 10995                           ; BSR set to: 0
 10996                           ;diskio.c: 186: {
 10997                           ;diskio.c: 187: arr[length] = response();
 10998                           
 10999                           ; BSR set to: 0
 11000  00133A  0EEF               	movlw	low disk_readp@arr
 11001  00133C  256A               	addwf	disk_readp@length& (0+255),w,b
 11002  00133E  6ED9               	movwf	fsr2l,c
 11003  001340  0E01               	movlw	high disk_readp@arr
 11004  001342  216B               	addwfc	(disk_readp@length+1)& (0+255),w,b
 11005  001344  6EDA               	movwf	fsr2h,c
 11006  001346  ECED  F018         	call	_response	;wreg free
 11007  00134A  6EDF               	movwf	indf2,c
 11008                           
 11009                           ;diskio.c: 188: length++;
 11010  00134C  0100               	movlb	0	; () banked
 11011  00134E  4B6A               	infsnz	disk_readp@length& (0+255),f,b
 11012  001350  2B6B               	incf	(disk_readp@length+1)& (0+255),f,b
 11013  001352                     l741:
 11014                           
 11015                           ; BSR set to: 0
 11016                           
 11017                           ; BSR set to: 0
 11018  001352  502B               	movf	disk_readp@count,w,c
 11019  001354  5D6A               	subwf	disk_readp@length& (0+255),w,b
 11020  001356  502C               	movf	disk_readp@count+1,w,c
 11021  001358  596B               	subwfb	(disk_readp@length+1)& (0+255),w,b
 11022  00135A  A0D8               	btfss	status,0,c
 11023  00135C  D7EE               	goto	l742
 11024                           
 11025                           ; BSR set to: 0
 11026                           ;diskio.c: 189: }
 11027                           ;diskio.c: 191: _delay((unsigned long)((1000)*(20000000/4000.0)));
 11028                           
 11029                           ; BSR set to: 0
 11030  00135E  0E1A               	movlw	26
 11031  001360  0100               	movlb	0	; () banked
 11032  001362  6F61               	movwf	(??_disk_readp+1)& (0+255),b
 11033  001364  0E5E               	movlw	94
 11034  001366  6F60               	movwf	??_disk_readp& (0+255),b
 11035  001368  0E6E               	movlw	110
 11036  00136A                     u9157:
 11037  00136A  2EE8               	decfsz	wreg,f,c
 11038  00136C  D7FE               	bra	u9157
 11039  00136E  2F60               	decfsz	??_disk_readp& (0+255),f,b
 11040  001370  D7FC               	bra	u9157
 11041  001372  2F61               	decfsz	(??_disk_readp+1)& (0+255),f,b
 11042  001374  D7FA               	bra	u9157
 11043  001376  F000               	nop	
 11044                           
 11045                           ;diskio.c: 193: dummy_clocks(8);
 11046  001378  0E08               	movlw	8
 11047  00137A  ECD6  F017         	call	_dummy_clocks
 11048                           
 11049                           ;diskio.c: 194: command(0X4C,0X00000000,0X00);
 11050  00137E  0E00               	movlw	0
 11051  001380  6E1C               	movwf	command@arg,c
 11052  001382  0E00               	movlw	0
 11053  001384  6E1D               	movwf	command@arg+1,c
 11054  001386  0E00               	movlw	0
 11055  001388  6E1E               	movwf	command@arg+2,c
 11056  00138A  0E00               	movlw	0
 11057  00138C  6E1F               	movwf	command@arg+3,c
 11058  00138E  0E00               	movlw	0
 11059  001390  6E20               	movwf	command@CRC,c
 11060  001392  0E4C               	movlw	76
 11061  001394  EC82  F017         	call	_command
 11062                           
 11063                           ;diskio.c: 195: proceed();
 11064  001398  ECFA  F018         	call	_proceed	;wreg free
 11065  00139C                     
 11066                           ;diskio.c: 197: buff = response();
 11067  00139C  ECED  F018         	call	_response	;wreg free
 11068  0013A0  0100               	movlb	0	; () banked
 11069  0013A2  6F69               	movwf	disk_readp@buff& (0+255),b
 11070                           
 11071                           ; BSR set to: 0
 11072                           ;diskio.c: 198: }while(buff!=0xFF);
 11073  0013A4  2969               	incf	disk_readp@buff& (0+255),w,b
 11074  0013A6  A4D8               	btfss	status,2,c
 11075  0013A8  D7F9               	goto	l744
 11076                           
 11077                           ; BSR set to: 0
 11078                           ;diskio.c: 200: length = 0;
 11079                           
 11080                           ; BSR set to: 0
 11081  0013AA  0E00               	movlw	0
 11082  0013AC  6F6B               	movwf	(disk_readp@length+1)& (0+255),b
 11083  0013AE  0E00               	movlw	0
 11084  0013B0  6F6A               	movwf	disk_readp@length& (0+255),b
 11085                           
 11086                           ;diskio.c: 202: while(arr[length]!='\0')
 11087  0013B2  D002               	goto	l746
 11088  0013B4                     
 11089                           ; BSR set to: 0
 11090                           ;diskio.c: 203: {
 11091                           ;diskio.c: 205: length++;
 11092                           
 11093                           ; BSR set to: 0
 11094  0013B4  4B6A               	infsnz	disk_readp@length& (0+255),f,b
 11095  0013B6  2B6B               	incf	(disk_readp@length+1)& (0+255),f,b
 11096  0013B8                     l746:
 11097                           
 11098                           ; BSR set to: 0
 11099                           
 11100                           ; BSR set to: 0
 11101  0013B8  0EEF               	movlw	low disk_readp@arr
 11102  0013BA  256A               	addwf	disk_readp@length& (0+255),w,b
 11103  0013BC  6ED9               	movwf	fsr2l,c
 11104  0013BE  0E01               	movlw	high disk_readp@arr
 11105  0013C0  216B               	addwfc	(disk_readp@length+1)& (0+255),w,b
 11106  0013C2  6EDA               	movwf	fsr2h,c
 11107  0013C4  50DF               	movf	indf2,w,c
 11108  0013C6  A4D8               	btfss	status,2,c
 11109  0013C8  D7F5               	goto	l747
 11110                           
 11111                           ; BSR set to: 0
 11112                           ;diskio.c: 206: }
 11113                           ;diskio.c: 208: *rd = length;
 11114                           
 11115                           ; BSR set to: 0
 11116  0013CA  C023  FFD9         	movff	disk_readp@rd,fsr2l
 11117  0013CE  C024  FFDA         	movff	disk_readp@rd+1,fsr2h
 11118  0013D2  C06A  FFDF         	movff	disk_readp@length,indf2
 11119                           
 11120                           ; BSR set to: 0
 11121                           ;diskio.c: 209: return RES_OK;
 11122  0013D6  0E00               	movlw	0
 11123                           
 11124                           ; BSR set to: 0
 11125                           ;diskio.c: 210: }
 11126                           
 11127                           ; BSR set to: 0
 11128  0013D8  0012               	return	
 11129  0013DA                     l736:
 11130                           
 11131                           ; BSR set to: 0
 11132                           ;diskio.c: 211: else
 11133                           ;diskio.c: 212: {
 11134                           ;diskio.c: 213: start_add = (sector*512);
 11135                           
 11136                           ; BSR set to: 0
 11137  0013DA  C025  F060         	movff	disk_readp@sector,??_disk_readp
 11138  0013DE  C026  F061         	movff	disk_readp@sector+1,??_disk_readp+1
 11139  0013E2  C027  F062         	movff	disk_readp@sector+2,??_disk_readp+2
 11140  0013E6  C028  F063         	movff	disk_readp@sector+3,??_disk_readp+3
 11141  0013EA  0E09               	movlw	9
 11142  0013EC                     u6625:
 11143  0013EC  90D8               	bcf	status,0,c
 11144  0013EE  3760               	rlcf	??_disk_readp& (0+255),f,b
 11145  0013F0  3761               	rlcf	(??_disk_readp+1)& (0+255),f,b
 11146  0013F2  3762               	rlcf	(??_disk_readp+2)& (0+255),f,b
 11147  0013F4  3763               	rlcf	(??_disk_readp+3)& (0+255),f,b
 11148  0013F6  2EE8               	decfsz	wreg,f,c
 11149  0013F8  D7F9               	goto	u6625
 11150  0013FA  C060  F065         	movff	??_disk_readp,disk_readp@start_add
 11151  0013FE  C061  F066         	movff	??_disk_readp+1,disk_readp@start_add+1
 11152  001402  C062  F067         	movff	??_disk_readp+2,disk_readp@start_add+2
 11153  001406  C063  F068         	movff	??_disk_readp+3,disk_readp@start_add+3
 11154                           
 11155                           ; BSR set to: 0
 11156                           ;diskio.c: 215: length = 0;
 11157  00140A  0E00               	movlw	0
 11158  00140C  6F6B               	movwf	(disk_readp@length+1)& (0+255),b
 11159  00140E  0E00               	movlw	0
 11160  001410  6F6A               	movwf	disk_readp@length& (0+255),b
 11161                           
 11162                           ;diskio.c: 216: while(length<512)
 11163  001412  D00A               	goto	l751
 11164  001414                     
 11165                           ; BSR set to: 0
 11166                           ;diskio.c: 217: {
 11167                           ;diskio.c: 218: arr[length] = 0;
 11168                           
 11169                           ; BSR set to: 0
 11170  001414  0EEF               	movlw	low disk_readp@arr
 11171  001416  256A               	addwf	disk_readp@length& (0+255),w,b
 11172  001418  6ED9               	movwf	fsr2l,c
 11173  00141A  0E01               	movlw	high disk_readp@arr
 11174  00141C  216B               	addwfc	(disk_readp@length+1)& (0+255),w,b
 11175  00141E  6EDA               	movwf	fsr2h,c
 11176  001420  0E00               	movlw	0
 11177  001422  6EDF               	movwf	indf2,c
 11178                           
 11179                           ; BSR set to: 0
 11180                           ;diskio.c: 219: length++;
 11181  001424  4B6A               	infsnz	disk_readp@length& (0+255),f,b
 11182  001426  2B6B               	incf	(disk_readp@length+1)& (0+255),f,b
 11183  001428                     l751:
 11184                           
 11185                           ; BSR set to: 0
 11186                           
 11187                           ; BSR set to: 0
 11188  001428  BF6B               	btfsc	(disk_readp@length+1)& (0+255),7,b
 11189  00142A  D7F4               	goto	l752
 11190  00142C  0E02               	movlw	2
 11191  00142E  5D6B               	subwf	(disk_readp@length+1)& (0+255),w,b
 11192  001430  A0D8               	btfss	status,0,c
 11193  001432  D7F0               	goto	l752
 11194                           
 11195                           ; BSR set to: 0
 11196                           ;diskio.c: 220: }
 11197                           ;diskio.c: 222: _delay((unsigned long)((1000)*(20000000/4000.0)));
 11198                           
 11199                           ; BSR set to: 0
 11200  001434  0E1A               	movlw	26
 11201  001436  0100               	movlb	0	; () banked
 11202  001438  6F61               	movwf	(??_disk_readp+1)& (0+255),b
 11203  00143A  0E5E               	movlw	94
 11204  00143C  6F60               	movwf	??_disk_readp& (0+255),b
 11205  00143E  0E6E               	movlw	110
 11206  001440                     u9167:
 11207  001440  2EE8               	decfsz	wreg,f,c
 11208  001442  D7FE               	bra	u9167
 11209  001444  2F60               	decfsz	??_disk_readp& (0+255),f,b
 11210  001446  D7FC               	bra	u9167
 11211  001448  2F61               	decfsz	(??_disk_readp+1)& (0+255),f,b
 11212  00144A  D7FA               	bra	u9167
 11213  00144C  F000               	nop	
 11214                           
 11215                           ;diskio.c: 224: dummy_clocks(8);
 11216  00144E  0E08               	movlw	8
 11217  001450  ECD6  F017         	call	_dummy_clocks
 11218                           
 11219                           ;diskio.c: 226: command(0X51,start_add,0X00);
 11220  001454  C065  F01C         	movff	disk_readp@start_add,command@arg
 11221  001458  C066  F01D         	movff	disk_readp@start_add+1,command@arg+1
 11222  00145C  C067  F01E         	movff	disk_readp@start_add+2,command@arg+2
 11223  001460  C068  F01F         	movff	disk_readp@start_add+3,command@arg+3
 11224  001464  0E00               	movlw	0
 11225  001466  6E20               	movwf	command@CRC,c
 11226  001468  0E51               	movlw	81
 11227  00146A  EC82  F017         	call	_command
 11228                           
 11229                           ;diskio.c: 227: proceed();
 11230  00146E  ECFA  F018         	call	_proceed	;wreg free
 11231  001472                     
 11232                           ;diskio.c: 229: buff = response();
 11233  001472  ECED  F018         	call	_response	;wreg free
 11234  001476  0100               	movlb	0	; () banked
 11235  001478  6F69               	movwf	disk_readp@buff& (0+255),b
 11236                           
 11237                           ; BSR set to: 0
 11238                           ;diskio.c: 230: }while(buff!=0x00);
 11239  00147A  5169               	movf	disk_readp@buff& (0+255),w,b
 11240  00147C  A4D8               	btfss	status,2,c
 11241  00147E  D7F9               	goto	l754
 11242  001480                     u6640:
 11243                           
 11244                           ; BSR set to: 0
 11245                           ;diskio.c: 232: buff = response();
 11246                           
 11247                           ; BSR set to: 0
 11248                           
 11249                           ;diskio.c: 231: do{
 11250                           
 11251                           ; BSR set to: 0
 11252  001480  ECED  F018         	call	_response	;wreg free
 11253  001484  0100               	movlb	0	; () banked
 11254  001486  6F69               	movwf	disk_readp@buff& (0+255),b
 11255                           
 11256                           ; BSR set to: 0
 11257                           ;diskio.c: 233: }while(buff!=0xFE);
 11258  001488  0EFE               	movlw	254
 11259  00148A  1969               	xorwf	disk_readp@buff& (0+255),w,b
 11260  00148C  A4D8               	btfss	status,2,c
 11261  00148E  D7F8               	goto	u6640
 11262                           
 11263                           ; BSR set to: 0
 11264                           ;diskio.c: 235: length = 0;
 11265                           
 11266                           ; BSR set to: 0
 11267  001490  0E00               	movlw	0
 11268  001492  6F6B               	movwf	(disk_readp@length+1)& (0+255),b
 11269  001494  0E00               	movlw	0
 11270  001496  6F6A               	movwf	disk_readp@length& (0+255),b
 11271                           
 11272                           ;diskio.c: 236: while ( length < 512 )
 11273  001498  D048               	goto	u6680
 11274  00149A                     l6074:
 11275                           
 11276                           ; BSR set to: 0
 11277                           ;diskio.c: 239: {
 11278                           ;diskio.c: 240: arr[length] = response();
 11279  00149A  0EEF               	movlw	low disk_readp@arr
 11280  00149C  256A               	addwf	disk_readp@length& (0+255),w,b
 11281  00149E  6ED9               	movwf	fsr2l,c
 11282  0014A0  0E01               	movlw	high disk_readp@arr
 11283  0014A2  216B               	addwfc	(disk_readp@length+1)& (0+255),w,b
 11284  0014A4  6EDA               	movwf	fsr2h,c
 11285  0014A6  ECED  F018         	call	_response	;wreg free
 11286  0014AA  6EDF               	movwf	indf2,c
 11287                           
 11288                           ;diskio.c: 241: length++;
 11289  0014AC  0100               	movlb	0	; () banked
 11290  0014AE  4B6A               	infsnz	disk_readp@length& (0+255),f,b
 11291  0014B0  2B6B               	incf	(disk_readp@length+1)& (0+255),f,b
 11292  0014B2                     
 11293                           ; BSR set to: 0
 11294                           
 11295                           ; BSR set to: 0
 11296  0014B2  0629               	decf	disk_readp@offset,f,c
 11297  0014B4  A0D8               	btfss	status,0,c
 11298  0014B6  062A               	decf	disk_readp@offset+1,f,c
 11299  0014B8  2829               	incf	disk_readp@offset,w,c
 11300  0014BA  E1EF               	bnz	l6074
 11301  0014BC  282A               	incf	disk_readp@offset+1,w,c
 11302  0014BE  B4D8               	btfsc	status,2,c
 11303  0014C0  D019               	goto	l763
 11304  0014C2  D7EB               	goto	l761
 11305  0014C4                     l6080:
 11306                           
 11307                           ; BSR set to: 0
 11308                           ;diskio.c: 244: {
 11309                           ;diskio.c: 245: *rd = response();
 11310  0014C4  ECED  F018         	call	_response	;wreg free
 11311  0014C8  C023  FFD9         	movff	disk_readp@rd,fsr2l
 11312  0014CC  C024  FFDA         	movff	disk_readp@rd+1,fsr2h
 11313  0014D0  6EDF               	movwf	indf2,c
 11314                           
 11315                           ;diskio.c: 246: arr[length] = *rd;
 11316  0014D2  C023  FFD9         	movff	disk_readp@rd,fsr2l
 11317  0014D6  C024  FFDA         	movff	disk_readp@rd+1,fsr2h
 11318  0014DA  0EEF               	movlw	low disk_readp@arr
 11319  0014DC  0100               	movlb	0	; () banked
 11320  0014DE  256A               	addwf	disk_readp@length& (0+255),w,b
 11321  0014E0  6EE1               	movwf	fsr1l,c
 11322  0014E2  0E01               	movlw	high disk_readp@arr
 11323  0014E4  216B               	addwfc	(disk_readp@length+1)& (0+255),w,b
 11324  0014E6  6EE2               	movwf	fsr1h,c
 11325  0014E8  CFDF FFE7          	movff	indf2,indf1
 11326                           
 11327                           ; BSR set to: 0
 11328                           ;diskio.c: 247: rd++;
 11329  0014EC  4A23               	infsnz	disk_readp@rd,f,c
 11330  0014EE  2A24               	incf	disk_readp@rd+1,f,c
 11331                           
 11332                           ; BSR set to: 0
 11333                           ;diskio.c: 248: length++;
 11334  0014F0  4B6A               	infsnz	disk_readp@length& (0+255),f,b
 11335  0014F2  2B6B               	incf	(disk_readp@length+1)& (0+255),f,b
 11336  0014F4                     l763:
 11337                           
 11338                           ; BSR set to: 0
 11339                           
 11340                           ; BSR set to: 0
 11341  0014F4  062B               	decf	disk_readp@count,f,c
 11342  0014F6  A0D8               	btfss	status,0,c
 11343  0014F8  062C               	decf	disk_readp@count+1,f,c
 11344  0014FA  282B               	incf	disk_readp@count,w,c
 11345  0014FC  E1E3               	bnz	l6080
 11346  0014FE  282C               	incf	disk_readp@count+1,w,c
 11347  001500  B4D8               	btfsc	status,2,c
 11348  001502  D00D               	goto	l766
 11349  001504  D7DF               	goto	l764
 11350  001506                     
 11351                           ; BSR set to: 0
 11352                           ;diskio.c: 251: {
 11353                           ;diskio.c: 252: arr[length] = response();
 11354                           
 11355                           ; BSR set to: 0
 11356  001506  0EEF               	movlw	low disk_readp@arr
 11357  001508  256A               	addwf	disk_readp@length& (0+255),w,b
 11358  00150A  6ED9               	movwf	fsr2l,c
 11359  00150C  0E01               	movlw	high disk_readp@arr
 11360  00150E  216B               	addwfc	(disk_readp@length+1)& (0+255),w,b
 11361  001510  6EDA               	movwf	fsr2h,c
 11362  001512  ECED  F018         	call	_response	;wreg free
 11363  001516  6EDF               	movwf	indf2,c
 11364                           
 11365                           ;diskio.c: 253: length++;
 11366  001518  0100               	movlb	0	; () banked
 11367  00151A  4B6A               	infsnz	disk_readp@length& (0+255),f,b
 11368  00151C  2B6B               	incf	(disk_readp@length+1)& (0+255),f,b
 11369  00151E                     l766:
 11370                           
 11371                           ; BSR set to: 0
 11372                           
 11373                           ; BSR set to: 0
 11374  00151E  BF6B               	btfsc	(disk_readp@length+1)& (0+255),7,b
 11375  001520  D7F2               	goto	l767
 11376  001522  0E02               	movlw	2
 11377  001524  5D6B               	subwf	(disk_readp@length+1)& (0+255),w,b
 11378  001526  A0D8               	btfss	status,0,c
 11379  001528  D7EE               	goto	l767
 11380  00152A                     u6680:
 11381                           
 11382                           ; BSR set to: 0
 11383                           
 11384                           ; BSR set to: 0
 11385                           
 11386                           ; BSR set to: 0
 11387  00152A  BF6B               	btfsc	(disk_readp@length+1)& (0+255),7,b
 11388  00152C  D7C2               	goto	l760
 11389  00152E  0E02               	movlw	2
 11390  001530  5D6B               	subwf	(disk_readp@length+1)& (0+255),w,b
 11391  001532  A0D8               	btfss	status,0,c
 11392  001534  D7BE               	goto	l760
 11393                           
 11394                           ; BSR set to: 0
 11395                           ;diskio.c: 254: }
 11396                           ;diskio.c: 255: }
 11397                           ;diskio.c: 256: _delay((unsigned long)((1000)*(20000000/4000.0)));
 11398                           
 11399                           ; BSR set to: 0
 11400  001536  0E1A               	movlw	26
 11401  001538  0100               	movlb	0	; () banked
 11402  00153A  6F61               	movwf	(??_disk_readp+1)& (0+255),b
 11403  00153C  0E5E               	movlw	94
 11404  00153E  6F60               	movwf	??_disk_readp& (0+255),b
 11405  001540  0E6E               	movlw	110
 11406  001542                     u9177:
 11407  001542  2EE8               	decfsz	wreg,f,c
 11408  001544  D7FE               	bra	u9177
 11409  001546  2F60               	decfsz	??_disk_readp& (0+255),f,b
 11410  001548  D7FC               	bra	u9177
 11411  00154A  2F61               	decfsz	(??_disk_readp+1)& (0+255),f,b
 11412  00154C  D7FA               	bra	u9177
 11413  00154E  F000               	nop	
 11414                           
 11415                           ;diskio.c: 262: command(0X4C,0X00000000,0X00);
 11416  001550  0E00               	movlw	0
 11417  001552  6E1C               	movwf	command@arg,c
 11418  001554  0E00               	movlw	0
 11419  001556  6E1D               	movwf	command@arg+1,c
 11420  001558  0E00               	movlw	0
 11421  00155A  6E1E               	movwf	command@arg+2,c
 11422  00155C  0E00               	movlw	0
 11423  00155E  6E1F               	movwf	command@arg+3,c
 11424  001560  0E00               	movlw	0
 11425  001562  6E20               	movwf	command@CRC,c
 11426  001564  0E4C               	movlw	76
 11427  001566  EC82  F017         	call	_command
 11428                           
 11429                           ;diskio.c: 263: proceed();
 11430  00156A  ECFA  F018         	call	_proceed	;wreg free
 11431  00156E                     
 11432                           ;diskio.c: 265: buff = response();
 11433  00156E  ECED  F018         	call	_response	;wreg free
 11434  001572  0100               	movlb	0	; () banked
 11435  001574  6F69               	movwf	disk_readp@buff& (0+255),b
 11436                           
 11437                           ; BSR set to: 0
 11438                           ;diskio.c: 266: }while(buff!=0xFF);
 11439  001576  2969               	incf	disk_readp@buff& (0+255),w,b
 11440  001578  A4D8               	btfss	status,2,c
 11441  00157A  D7F9               	goto	l770
 11442                           
 11443                           ; BSR set to: 0
 11444                           ;diskio.c: 268: length = 0;
 11445                           
 11446                           ; BSR set to: 0
 11447  00157C  0E00               	movlw	0
 11448  00157E  6F6B               	movwf	(disk_readp@length+1)& (0+255),b
 11449  001580  0E00               	movlw	0
 11450  001582  6F6A               	movwf	disk_readp@length& (0+255),b
 11451                           
 11452                           ; BSR set to: 0
 11453                           ;diskio.c: 270: if(flag == 1){
 11454  001584  043B               	decf	_flag,w,c
 11455  001586  103C               	iorwf	_flag+1,w,c
 11456  001588  B4D8               	btfsc	status,2,c
 11457  00158A  D003               	goto	l773
 11458  00158C  D00C               	goto	l772
 11459  00158E                     
 11460                           ; BSR set to: 0
 11461                           ;diskio.c: 272: {
 11462                           ;diskio.c: 274: length++;
 11463                           
 11464                           ; BSR set to: 0
 11465  00158E  4B6A               	infsnz	disk_readp@length& (0+255),f,b
 11466  001590  2B6B               	incf	(disk_readp@length+1)& (0+255),f,b
 11467  001592                     l773:
 11468                           
 11469                           ; BSR set to: 0
 11470                           
 11471                           ; BSR set to: 0
 11472  001592  0EEF               	movlw	low disk_readp@arr
 11473  001594  256A               	addwf	disk_readp@length& (0+255),w,b
 11474  001596  6ED9               	movwf	fsr2l,c
 11475  001598  0E01               	movlw	high disk_readp@arr
 11476  00159A  216B               	addwfc	(disk_readp@length+1)& (0+255),w,b
 11477  00159C  6EDA               	movwf	fsr2h,c
 11478  00159E  50DF               	movf	indf2,w,c
 11479  0015A0  B4D8               	btfsc	status,2,c
 11480  0015A2  D00E               	goto	l776
 11481  0015A4  D7F4               	goto	l774
 11482  0015A6                     l772:
 11483                           
 11484                           ; BSR set to: 0
 11485                           ;diskio.c: 277: else
 11486                           ;diskio.c: 280: _delay((unsigned long)((2000)*(20000000/4000.0)));
 11487                           
 11488                           ; BSR set to: 0
 11489  0015A6  0E33               	movlw	51
 11490  0015A8  0100               	movlb	0	; () banked
 11491  0015AA  6F61               	movwf	(??_disk_readp+1)& (0+255),b
 11492  0015AC  0EBB               	movlw	187
 11493  0015AE  6F60               	movwf	??_disk_readp& (0+255),b
 11494  0015B0  0EDF               	movlw	223
 11495  0015B2                     u9187:
 11496  0015B2  2EE8               	decfsz	wreg,f,c
 11497  0015B4  D7FE               	bra	u9187
 11498  0015B6  2F60               	decfsz	??_disk_readp& (0+255),f,b
 11499  0015B8  D7FC               	bra	u9187
 11500  0015BA  2F61               	decfsz	(??_disk_readp+1)& (0+255),f,b
 11501  0015BC  D7FA               	bra	u9187
 11502  0015BE  D000               	nop2	
 11503  0015C0                     l776:
 11504                           
 11505                           ;diskio.c: 283: return RES_OK;
 11506  0015C0  0E00               	movlw	0
 11507  0015C2  0012               	return	
 11508  0015C4                     __end_of_disk_readp:
 11509                           	opt stack 0
 11510                           tosu	equ	0xFFF
 11511                           tosh	equ	0xFFE
 11512                           tosl	equ	0xFFD
 11513                           pclath	equ	0xFFA
 11514                           tblptru	equ	0xFF8
 11515                           tblptrh	equ	0xFF7
 11516                           tblptrl	equ	0xFF6
 11517                           tablat	equ	0xFF5
 11518                           prodh	equ	0xFF4
 11519                           prodl	equ	0xFF3
 11520                           intcon	equ	0xFF2
 11521                           intcon2	equ	0xFF1
 11522                           intcon3	equ	0xFF0
 11523                           postinc0	equ	0xFEE
 11524                           wreg	equ	0xFE8
 11525                           indf1	equ	0xFE7
 11526                           postinc1	equ	0xFE6
 11527                           postdec1	equ	0xFE5
 11528                           fsr1h	equ	0xFE2
 11529                           fsr1l	equ	0xFE1
 11530                           indf2	equ	0xFDF
 11531                           postinc2	equ	0xFDE
 11532                           postdec2	equ	0xFDD
 11533                           plusw2	equ	0xFDB
 11534                           fsr2h	equ	0xFDA
 11535                           fsr2l	equ	0xFD9
 11536                           status	equ	0xFD8
 11537                           
 11538 ;; *************** function _response *****************
 11539 ;; Defined at:
 11540 ;;		line 310 in file "bibliotecas/SDCard.c"
 11541 ;; Parameters:    Size  Location     Type
 11542 ;;		None
 11543 ;; Auto vars:     Size  Location     Type
 11544 ;;  buff            1   32[COMRAM] unsigned char 
 11545 ;; Return value:  Size  Location     Type
 11546 ;;                  1    wreg      unsigned char 
 11547 ;; Registers used:
 11548 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11549 ;; Tracked objects:
 11550 ;;		On entry : 0/0
 11551 ;;		On exit  : 0/0
 11552 ;;		Unchanged: 0/0
 11553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11554 ;;      Params:         0       0       0       0       0       0       0       0       0
 11555 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11556 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11557 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11558 ;;Total ram usage:        1 bytes
 11559 ;; Hardware stack levels used:    1
 11560 ;; Hardware stack levels required when called:    6
 11561 ;; This function calls:
 11562 ;;		_recebe_dado_SPI
 11563 ;; This function is called by:
 11564 ;;		_reset
 11565 ;;		_disk_initialize
 11566 ;;		_disk_readp
 11567 ;;		_disk_writep
 11568 ;; This function uses a non-reentrant model
 11569 ;;
 11570                           
 11571                           	psect	text43
 11572  0031DA                     __ptext43:
 11573                           	opt stack 0
 11574  0031DA                     _response:
 11575                           	opt stack 19
 11576                           
 11577                           ;SDCard.c: 313: unsigned char buff;
 11578                           ;SDCard.c: 314: LATBbits.LATB4 = 0;
 11579                           
 11580                           ;incstack = 0
 11581  0031DA  988A               	bcf	3978,4,c	;volatile
 11582                           
 11583                           ;SDCard.c: 315: buff= recebe_dado_SPI();
 11584  0031DC  EC03  F018         	call	_recebe_dado_SPI	;wreg free
 11585  0031E0  6E21               	movwf	response@buff,c
 11586                           
 11587                           ;SDCard.c: 316: LATBbits.LATB4 = 1;
 11588  0031E2  888A               	bsf	3978,4,c	;volatile
 11589                           
 11590                           ;SDCard.c: 317: return buff;
 11591  0031E4  5021               	movf	response@buff,w,c
 11592  0031E6  0012               	return	
 11593  0031E8                     __end_of_response:
 11594                           	opt stack 0
 11595                           tosu	equ	0xFFF
 11596                           tosh	equ	0xFFE
 11597                           tosl	equ	0xFFD
 11598                           pclath	equ	0xFFA
 11599                           tblptru	equ	0xFF8
 11600                           tblptrh	equ	0xFF7
 11601                           tblptrl	equ	0xFF6
 11602                           tablat	equ	0xFF5
 11603                           prodh	equ	0xFF4
 11604                           prodl	equ	0xFF3
 11605                           intcon	equ	0xFF2
 11606                           intcon2	equ	0xFF1
 11607                           intcon3	equ	0xFF0
 11608                           postinc0	equ	0xFEE
 11609                           wreg	equ	0xFE8
 11610                           indf1	equ	0xFE7
 11611                           postinc1	equ	0xFE6
 11612                           postdec1	equ	0xFE5
 11613                           fsr1h	equ	0xFE2
 11614                           fsr1l	equ	0xFE1
 11615                           indf2	equ	0xFDF
 11616                           postinc2	equ	0xFDE
 11617                           postdec2	equ	0xFDD
 11618                           plusw2	equ	0xFDB
 11619                           fsr2h	equ	0xFDA
 11620                           fsr2l	equ	0xFD9
 11621                           status	equ	0xFD8
 11622                           
 11623 ;; *************** function _recebe_dado_SPI *****************
 11624 ;; Defined at:
 11625 ;;		line 109 in file "bibliotecas/SPI.c"
 11626 ;; Parameters:    Size  Location     Type
 11627 ;;		None
 11628 ;; Auto vars:     Size  Location     Type
 11629 ;;  temp_var        1   31[COMRAM] unsigned char 
 11630 ;; Return value:  Size  Location     Type
 11631 ;;                  1    wreg      unsigned char 
 11632 ;; Registers used:
 11633 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11634 ;; Tracked objects:
 11635 ;;		On entry : 0/0
 11636 ;;		On exit  : 0/0
 11637 ;;		Unchanged: 0/0
 11638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11639 ;;      Params:         0       0       0       0       0       0       0       0       0
 11640 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11641 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11642 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11643 ;;Total ram usage:        1 bytes
 11644 ;; Hardware stack levels used:    1
 11645 ;; Hardware stack levels required when called:    5
 11646 ;; This function calls:
 11647 ;;		_escreve_frase_ram_lcd
 11648 ;;		_posicao_cursor_lcd
 11649 ;; This function is called by:
 11650 ;;		_response
 11651 ;; This function uses a non-reentrant model
 11652 ;;
 11653                           
 11654                           	psect	text44
 11655  003006                     __ptext44:
 11656                           	opt stack 0
 11657  003006                     _recebe_dado_SPI:
 11658                           	opt stack 19
 11659                           
 11660                           ;SPI.c: 111: PIR1bits.SSPIF = 0;
 11661                           
 11662                           ;incstack = 0
 11663  003006  969E               	bcf	3998,3,c	;volatile
 11664                           
 11665                           ;SPI.c: 112: unsigned char temp_var;
 11666                           ;SPI.c: 113: temp_var = SSPBUF;
 11667  003008  CFC9 F020          	movff	4041,recebe_dado_SPI@temp_var	;volatile
 11668                           
 11669                           ;SPI.c: 116: SSPBUF = 0x00;
 11670  00300C  0E00               	movlw	0
 11671  00300E  6EC9               	movwf	4041,c	;volatile
 11672  003010  A69E               	btfss	3998,3,c	;volatile
 11673  003012  D7FE               	goto	l89
 11674                           
 11675                           ;SPI.c: 119: posicao_cursor_lcd(1,0);
 11676  003014  0E00               	movlw	0
 11677  003016  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 11678  003018  0E01               	movlw	1
 11679  00301A  EC3A  F016         	call	_posicao_cursor_lcd
 11680                           
 11681                           ;SPI.c: 120: escreve_frase_ram_lcd("tAAAA");
 11682  00301E  0EF5               	movlw	low STR_2
 11683  003020  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 11684  003022  0E7F               	movlw	high STR_2
 11685  003024  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 11686  003026  EC37  F017         	call	_escreve_frase_ram_lcd	;wreg free
 11687                           
 11688                           ;SPI.c: 121: return (SSPBUF);
 11689  00302A  50C9               	movf	4041,w,c	;volatile
 11690  00302C  0012               	return	
 11691  00302E                     __end_of_recebe_dado_SPI:
 11692                           	opt stack 0
 11693                           tosu	equ	0xFFF
 11694                           tosh	equ	0xFFE
 11695                           tosl	equ	0xFFD
 11696                           pclath	equ	0xFFA
 11697                           tblptru	equ	0xFF8
 11698                           tblptrh	equ	0xFF7
 11699                           tblptrl	equ	0xFF6
 11700                           tablat	equ	0xFF5
 11701                           prodh	equ	0xFF4
 11702                           prodl	equ	0xFF3
 11703                           intcon	equ	0xFF2
 11704                           intcon2	equ	0xFF1
 11705                           intcon3	equ	0xFF0
 11706                           postinc0	equ	0xFEE
 11707                           wreg	equ	0xFE8
 11708                           indf1	equ	0xFE7
 11709                           postinc1	equ	0xFE6
 11710                           postdec1	equ	0xFE5
 11711                           fsr1h	equ	0xFE2
 11712                           fsr1l	equ	0xFE1
 11713                           indf2	equ	0xFDF
 11714                           postinc2	equ	0xFDE
 11715                           postdec2	equ	0xFDD
 11716                           plusw2	equ	0xFDB
 11717                           fsr2h	equ	0xFDA
 11718                           fsr2l	equ	0xFD9
 11719                           status	equ	0xFD8
 11720                           
 11721 ;; *************** function _posicao_cursor_lcd *****************
 11722 ;; Defined at:
 11723 ;;		line 271 in file "bibliotecas/display/display_lcd.c"
 11724 ;; Parameters:    Size  Location     Type
 11725 ;;  linha           1    wreg     unsigned char 
 11726 ;;  coluna          1   28[COMRAM] unsigned char 
 11727 ;; Auto vars:     Size  Location     Type
 11728 ;;  linha           1   29[COMRAM] unsigned char 
 11729 ;;  endereco        1   30[COMRAM] unsigned char 
 11730 ;; Return value:  Size  Location     Type
 11731 ;;                  1    wreg      void 
 11732 ;; Registers used:
 11733 ;;		wreg, status,2, status,0, cstack
 11734 ;; Tracked objects:
 11735 ;;		On entry : 0/0
 11736 ;;		On exit  : 0/0
 11737 ;;		Unchanged: 0/0
 11738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11739 ;;      Params:         1       0       0       0       0       0       0       0       0
 11740 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11741 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11742 ;;      Totals:         3       0       0       0       0       0       0       0       0
 11743 ;;Total ram usage:        3 bytes
 11744 ;; Hardware stack levels used:    1
 11745 ;; Hardware stack levels required when called:    4
 11746 ;; This function calls:
 11747 ;;		_endereco_cursor_lcd
 11748 ;; This function is called by:
 11749 ;;		_inicializa_SPI
 11750 ;;		_recebe_dado_SPI
 11751 ;;		_mensagem_inicial
 11752 ;;		_SDCard
 11753 ;;		_reset
 11754 ;;		_disk_initialize
 11755 ;;		_leitura_chave
 11756 ;; This function uses a non-reentrant model
 11757 ;;
 11758                           
 11759                           	psect	text45
 11760  002C74                     __ptext45:
 11761                           	opt stack 0
 11762  002C74                     _posicao_cursor_lcd:
 11763                           	opt stack 25
 11764                           
 11765                           ;incstack = 0
 11766                           ;posicao_cursor_lcd@linha stored from wreg
 11767  002C74  6E1E               	movwf	posicao_cursor_lcd@linha,c
 11768                           
 11769                           ;display_lcd.c: 273: unsigned char endereco = 0x00;
 11770  002C76  0E00               	movlw	0
 11771  002C78  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 11772                           
 11773                           ;display_lcd.c: 275: if(coluna <= 0x10U)
 11774  002C7A  0E11               	movlw	17
 11775  002C7C  601D               	cpfslt	posicao_cursor_lcd@coluna,c
 11776  002C7E  D02F               	goto	l606
 11777  002C80  D01E               	goto	l607
 11778  002C82                     l608:
 11779                           
 11780                           ;display_lcd.c: 282: endereco = 0x00U + coluna;
 11781  002C82  C01D  F01F         	movff	posicao_cursor_lcd@coluna,posicao_cursor_lcd@endereco
 11782                           
 11783                           ;display_lcd.c: 283: endereco_cursor_lcd(endereco);
 11784  002C86  501F               	movf	posicao_cursor_lcd@endereco,w,c
 11785  002C88  EC72  F016         	call	_endereco_cursor_lcd
 11786                           
 11787                           ;display_lcd.c: 284: break;
 11788  002C8C  D026               	goto	l609
 11789  002C8E                     
 11790                           ;display_lcd.c: 287: endereco = 0x40U + coluna;
 11791  002C8E  501D               	movf	posicao_cursor_lcd@coluna,w,c
 11792  002C90  0F40               	addlw	64
 11793  002C92  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 11794                           
 11795                           ;display_lcd.c: 288: endereco_cursor_lcd(endereco);
 11796  002C94  501F               	movf	posicao_cursor_lcd@endereco,w,c
 11797  002C96  EC72  F016         	call	_endereco_cursor_lcd
 11798                           
 11799                           ;display_lcd.c: 289: break;
 11800  002C9A  D01F               	goto	l609
 11801  002C9C                     
 11802                           ;display_lcd.c: 292: endereco = 0x14U + coluna;
 11803  002C9C  501D               	movf	posicao_cursor_lcd@coluna,w,c
 11804  002C9E  0F14               	addlw	20
 11805  002CA0  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 11806                           
 11807                           ;display_lcd.c: 293: endereco_cursor_lcd(endereco);
 11808  002CA2  501F               	movf	posicao_cursor_lcd@endereco,w,c
 11809  002CA4  EC72  F016         	call	_endereco_cursor_lcd
 11810                           
 11811                           ;display_lcd.c: 294: break;
 11812  002CA8  D018               	goto	l609
 11813  002CAA                     
 11814                           ;display_lcd.c: 297: endereco = 0x54U + coluna;
 11815  002CAA  501D               	movf	posicao_cursor_lcd@coluna,w,c
 11816  002CAC  0F54               	addlw	84
 11817  002CAE  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 11818                           
 11819                           ;display_lcd.c: 298: endereco_cursor_lcd(endereco);
 11820  002CB0  501F               	movf	posicao_cursor_lcd@endereco,w,c
 11821  002CB2  EC72  F016         	call	_endereco_cursor_lcd
 11822                           
 11823                           ;display_lcd.c: 299: break;
 11824  002CB6  D011               	goto	l609
 11825  002CB8                     
 11826                           ;display_lcd.c: 302: endereco = 0x00U;
 11827  002CB8  0E00               	movlw	0
 11828  002CBA  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 11829                           
 11830                           ;display_lcd.c: 304: }
 11831                           
 11832                           ;display_lcd.c: 303: break;
 11833  002CBC  D00E               	goto	l609
 11834  002CBE                     l607:
 11835  002CBE  501E               	movf	posicao_cursor_lcd@linha,w,c
 11836                           
 11837                           ; Switch size 1, requested type "space"
 11838                           ; Number of cases is 4, Range of values is 1 to 4
 11839                           ; switch strategies available:
 11840                           ; Name         Instructions Cycles
 11841                           ; simple_byte           13     7 (average)
 11842                           ;	Chosen strategy is simple_byte
 11843  002CC0  0A01               	xorlw	1	; case 1
 11844  002CC2  B4D8               	btfsc	status,2,c
 11845  002CC4  D7DE               	goto	l608
 11846  002CC6  0A03               	xorlw	3	; case 2
 11847  002CC8  B4D8               	btfsc	status,2,c
 11848  002CCA  D7E1               	goto	l610
 11849  002CCC  0A01               	xorlw	1	; case 3
 11850  002CCE  B4D8               	btfsc	status,2,c
 11851  002CD0  D7E5               	goto	l611
 11852  002CD2  0A07               	xorlw	7	; case 4
 11853  002CD4  B4D8               	btfsc	status,2,c
 11854  002CD6  D7E9               	goto	l612
 11855  002CD8  D7EF               	goto	l613
 11856  002CDA                     l609:
 11857                           
 11858                           ;display_lcd.c: 306: coluna++;
 11859  002CDA  2A1D               	incf	posicao_cursor_lcd@coluna,f,c
 11860                           
 11861                           ;display_lcd.c: 307: }
 11862  002CDC  0012               	return	
 11863  002CDE                     l606:
 11864                           
 11865                           ;display_lcd.c: 308: else
 11866                           ;display_lcd.c: 309: {
 11867                           ;display_lcd.c: 310: endereco = 0x00U;
 11868  002CDE  0E00               	movlw	0
 11869  002CE0  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 11870  002CE2  0012               	return	
 11871  002CE4                     __end_of_posicao_cursor_lcd:
 11872                           	opt stack 0
 11873                           tosu	equ	0xFFF
 11874                           tosh	equ	0xFFE
 11875                           tosl	equ	0xFFD
 11876                           pclath	equ	0xFFA
 11877                           tblptru	equ	0xFF8
 11878                           tblptrh	equ	0xFF7
 11879                           tblptrl	equ	0xFF6
 11880                           tablat	equ	0xFF5
 11881                           prodh	equ	0xFF4
 11882                           prodl	equ	0xFF3
 11883                           intcon	equ	0xFF2
 11884                           intcon2	equ	0xFF1
 11885                           intcon3	equ	0xFF0
 11886                           postinc0	equ	0xFEE
 11887                           wreg	equ	0xFE8
 11888                           indf1	equ	0xFE7
 11889                           postinc1	equ	0xFE6
 11890                           postdec1	equ	0xFE5
 11891                           fsr1h	equ	0xFE2
 11892                           fsr1l	equ	0xFE1
 11893                           indf2	equ	0xFDF
 11894                           postinc2	equ	0xFDE
 11895                           postdec2	equ	0xFDD
 11896                           plusw2	equ	0xFDB
 11897                           fsr2h	equ	0xFDA
 11898                           fsr2l	equ	0xFD9
 11899                           status	equ	0xFD8
 11900                           
 11901 ;; *************** function _endereco_cursor_lcd *****************
 11902 ;; Defined at:
 11903 ;;		line 218 in file "bibliotecas/display/display_lcd.c"
 11904 ;; Parameters:    Size  Location     Type
 11905 ;;  endereco        1    wreg     unsigned char 
 11906 ;; Auto vars:     Size  Location     Type
 11907 ;;  endereco        1   27[COMRAM] unsigned char 
 11908 ;; Return value:  Size  Location     Type
 11909 ;;                  1    wreg      void 
 11910 ;; Registers used:
 11911 ;;		wreg, status,2, status,0, cstack
 11912 ;; Tracked objects:
 11913 ;;		On entry : 0/0
 11914 ;;		On exit  : 0/0
 11915 ;;		Unchanged: 0/0
 11916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11917 ;;      Params:         0       0       0       0       0       0       0       0       0
 11918 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11919 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11920 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11921 ;;Total ram usage:        1 bytes
 11922 ;; Hardware stack levels used:    1
 11923 ;; Hardware stack levels required when called:    3
 11924 ;; This function calls:
 11925 ;;		_delay
 11926 ;; This function is called by:
 11927 ;;		_posicao_cursor_lcd
 11928 ;;		_cria_caractere_lcd
 11929 ;; This function uses a non-reentrant model
 11930 ;;
 11931                           
 11932                           	psect	text46
 11933  002CE4                     __ptext46:
 11934                           	opt stack 0
 11935  002CE4                     _endereco_cursor_lcd:
 11936                           	opt stack 25
 11937                           
 11938                           ;incstack = 0
 11939                           ;endereco_cursor_lcd@endereco stored from wreg
 11940  002CE4  6E1C               	movwf	endereco_cursor_lcd@endereco,c
 11941                           
 11942                           ;display_lcd.c: 221: PORTDbits.RD2 = 0;
 11943  002CE6  9483               	bcf	3971,2,c	;volatile
 11944                           
 11945                           ;display_lcd.c: 222: PORTDbits.RD1 = 0;
 11946  002CE8  9283               	bcf	3971,1,c	;volatile
 11947                           
 11948                           ;display_lcd.c: 223: PORTDbits.RD0 = 0;
 11949  002CEA  9083               	bcf	3971,0,c	;volatile
 11950                           
 11951                           ;display_lcd.c: 226: PORTDbits.RD7 = 1;
 11952  002CEC  8E83               	bsf	3971,7,c	;volatile
 11953                           
 11954                           ;display_lcd.c: 227: if(endereco&0b00010000){PORTDbits.RD4=1;}
 11955  002CEE  A81C               	btfss	endereco_cursor_lcd@endereco,4,c
 11956  002CF0  D002               	goto	l589
 11957  002CF2  8883               	bsf	3971,4,c	;volatile
 11958  002CF4  D001               	goto	l590
 11959  002CF6                     l589:
 11960                           
 11961                           ;display_lcd.c: 228: else {PORTDbits.RD4=0;}
 11962  002CF6  9883               	bcf	3971,4,c	;volatile
 11963  002CF8                     l590:
 11964                           
 11965                           ;display_lcd.c: 229: if(endereco&0b00100000){PORTDbits.RD5=1;}
 11966  002CF8  AA1C               	btfss	endereco_cursor_lcd@endereco,5,c
 11967  002CFA  D002               	goto	l591
 11968  002CFC  8A83               	bsf	3971,5,c	;volatile
 11969  002CFE  D001               	goto	l592
 11970  002D00                     l591:
 11971                           
 11972                           ;display_lcd.c: 230: else {PORTDbits.RD5=0;}
 11973  002D00  9A83               	bcf	3971,5,c	;volatile
 11974  002D02                     l592:
 11975                           
 11976                           ;display_lcd.c: 231: if(endereco&0b01000000){PORTDbits.RD6=1;}
 11977  002D02  AC1C               	btfss	endereco_cursor_lcd@endereco,6,c
 11978  002D04  D002               	goto	l593
 11979  002D06  8C83               	bsf	3971,6,c	;volatile
 11980  002D08  D001               	goto	l594
 11981  002D0A                     l593:
 11982                           
 11983                           ;display_lcd.c: 232: else {PORTDbits.RD6=0;}
 11984  002D0A  9C83               	bcf	3971,6,c	;volatile
 11985  002D0C                     l594:
 11986                           
 11987                           ;display_lcd.c: 235: PORTDbits.RD0 = 1;
 11988  002D0C  8083               	bsf	3971,0,c	;volatile
 11989                           
 11990                           ;display_lcd.c: 236: delay();
 11991  002D0E  EC29  F018         	call	_delay	;wreg free
 11992                           
 11993                           ;display_lcd.c: 237: PORTDbits.RD0 = 0;
 11994  002D12  9083               	bcf	3971,0,c	;volatile
 11995                           
 11996                           ;display_lcd.c: 238: delay();
 11997  002D14  EC29  F018         	call	_delay	;wreg free
 11998                           
 11999                           ;display_lcd.c: 241: if(endereco&0b00000001){PORTDbits.RD4=1;}
 12000  002D18  A01C               	btfss	endereco_cursor_lcd@endereco,0,c
 12001  002D1A  D002               	goto	l595
 12002  002D1C  8883               	bsf	3971,4,c	;volatile
 12003  002D1E  D001               	goto	l596
 12004  002D20                     l595:
 12005                           
 12006                           ;display_lcd.c: 242: else {PORTDbits.RD4=0;}
 12007  002D20  9883               	bcf	3971,4,c	;volatile
 12008  002D22                     l596:
 12009                           
 12010                           ;display_lcd.c: 243: if(endereco&0b00000010){PORTDbits.RD5=1;}
 12011  002D22  A21C               	btfss	endereco_cursor_lcd@endereco,1,c
 12012  002D24  D002               	goto	l597
 12013  002D26  8A83               	bsf	3971,5,c	;volatile
 12014  002D28  D001               	goto	l598
 12015  002D2A                     l597:
 12016                           
 12017                           ;display_lcd.c: 244: else {PORTDbits.RD5=0;}
 12018  002D2A  9A83               	bcf	3971,5,c	;volatile
 12019  002D2C                     l598:
 12020                           
 12021                           ;display_lcd.c: 245: if(endereco&0b00000100){PORTDbits.RD6=1;}
 12022  002D2C  A41C               	btfss	endereco_cursor_lcd@endereco,2,c
 12023  002D2E  D002               	goto	l599
 12024  002D30  8C83               	bsf	3971,6,c	;volatile
 12025  002D32  D001               	goto	l600
 12026  002D34                     l599:
 12027                           
 12028                           ;display_lcd.c: 246: else {PORTDbits.RD6=0;}
 12029  002D34  9C83               	bcf	3971,6,c	;volatile
 12030  002D36                     l600:
 12031                           
 12032                           ;display_lcd.c: 247: if(endereco&0b00001000){PORTDbits.RD7=1;}
 12033  002D36  A61C               	btfss	endereco_cursor_lcd@endereco,3,c
 12034  002D38  D002               	goto	l601
 12035  002D3A  8E83               	bsf	3971,7,c	;volatile
 12036  002D3C  D001               	goto	l602
 12037  002D3E                     l601:
 12038                           
 12039                           ;display_lcd.c: 248: else {PORTDbits.RD7=0;}
 12040  002D3E  9E83               	bcf	3971,7,c	;volatile
 12041  002D40                     l602:
 12042                           
 12043                           ;display_lcd.c: 251: PORTDbits.RD0 = 1;
 12044  002D40  8083               	bsf	3971,0,c	;volatile
 12045                           
 12046                           ;display_lcd.c: 252: delay();
 12047  002D42  EC29  F018         	call	_delay	;wreg free
 12048                           
 12049                           ;display_lcd.c: 253: PORTDbits.RD0 = 0;
 12050  002D46  9083               	bcf	3971,0,c	;volatile
 12051                           
 12052                           ;display_lcd.c: 254: delay();
 12053  002D48  EC29  F018         	call	_delay	;wreg free
 12054  002D4C  0012               	return		;funcret
 12055  002D4E                     __end_of_endereco_cursor_lcd:
 12056                           	opt stack 0
 12057                           tosu	equ	0xFFF
 12058                           tosh	equ	0xFFE
 12059                           tosl	equ	0xFFD
 12060                           pclath	equ	0xFFA
 12061                           tblptru	equ	0xFF8
 12062                           tblptrh	equ	0xFF7
 12063                           tblptrl	equ	0xFF6
 12064                           tablat	equ	0xFF5
 12065                           prodh	equ	0xFF4
 12066                           prodl	equ	0xFF3
 12067                           intcon	equ	0xFF2
 12068                           intcon2	equ	0xFF1
 12069                           intcon3	equ	0xFF0
 12070                           postinc0	equ	0xFEE
 12071                           wreg	equ	0xFE8
 12072                           indf1	equ	0xFE7
 12073                           postinc1	equ	0xFE6
 12074                           postdec1	equ	0xFE5
 12075                           fsr1h	equ	0xFE2
 12076                           fsr1l	equ	0xFE1
 12077                           indf2	equ	0xFDF
 12078                           postinc2	equ	0xFDE
 12079                           postdec2	equ	0xFDD
 12080                           plusw2	equ	0xFDB
 12081                           fsr2h	equ	0xFDA
 12082                           fsr2l	equ	0xFD9
 12083                           status	equ	0xFD8
 12084                           
 12085 ;; *************** function _escreve_frase_ram_lcd *****************
 12086 ;; Defined at:
 12087 ;;		line 445 in file "bibliotecas/display/display_lcd.c"
 12088 ;; Parameters:    Size  Location     Type
 12089 ;;  buffer          2   28[COMRAM] PTR unsigned char 
 12090 ;;		 -> STR_15(9), STR_14(14), STR_13(12), escreve_inteiro_lcd@texto(7), 
 12091 ;;		 -> STR_12(14), STR_11(13), STR_10(17), STR_7(17), 
 12092 ;;		 -> STR_6(15), STR_5(14), STR_4(14), mensagem_inicial@msg_dois(17), 
 12093 ;;		 -> mensagem_inicial@msg_linha_um(17), leitura_chave@pos_ignicao_on(17), leitura_chave@pos_ignicao_crank(17), leitur
      +a_chave@pos_ignicao_off(17), 
 12094 ;;		 -> STR_2(6), STR_1(17), 
 12095 ;; Auto vars:     Size  Location     Type
 12096 ;;		None
 12097 ;; Return value:  Size  Location     Type
 12098 ;;                  1    wreg      void 
 12099 ;; Registers used:
 12100 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12101 ;; Tracked objects:
 12102 ;;		On entry : 0/0
 12103 ;;		On exit  : 0/0
 12104 ;;		Unchanged: 0/0
 12105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12106 ;;      Params:         2       0       0       0       0       0       0       0       0
 12107 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12108 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12109 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12110 ;;Total ram usage:        2 bytes
 12111 ;; Hardware stack levels used:    1
 12112 ;; Hardware stack levels required when called:    4
 12113 ;; This function calls:
 12114 ;;		_escreve_caractere_lcd
 12115 ;; This function is called by:
 12116 ;;		_inicializa_SPI
 12117 ;;		_recebe_dado_SPI
 12118 ;;		_mensagem_inicial
 12119 ;;		_SDCard
 12120 ;;		_reset
 12121 ;;		_disk_initialize
 12122 ;;		_leitura_chave
 12123 ;;		_escreve_inteiro_lcd
 12124 ;; This function uses a non-reentrant model
 12125 ;;
 12126                           
 12127                           	psect	text47
 12128  002E6E                     __ptext47:
 12129                           	opt stack 0
 12130  002E6E                     _escreve_frase_ram_lcd:
 12131                           	opt stack 25
 12132                           
 12133                           ;display_lcd.c: 447: while(*buffer)
 12134                           
 12135                           ;incstack = 0
 12136  002E6E  D014               	goto	l651
 12137  002E70                     
 12138                           ;display_lcd.c: 448: {
 12139                           ;display_lcd.c: 449: escreve_caractere_lcd(*buffer);
 12140  002E70  C01D  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 12141  002E74  C01E  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 12142  002E78  6AF8               	clrf	tblptru,c
 12143  002E7A  0E07               	movlw	(high __ramtop+-1)
 12144  002E7C  64F7               	cpfsgt	tblptrh,c
 12145  002E7E  D003               	bra	u6487
 12146  002E80  0008               	tblrd		*
 12147  002E82  50F5               	movf	tablat,w,c
 12148  002E84  D005               	bra	u6480
 12149  002E86                     u6487:
 12150  002E86  CFF6 FFE9          	movff	tblptrl,fsr0l
 12151  002E8A  CFF7 FFEA          	movff	tblptrh,fsr0h
 12152  002E8E  50EF               	movf	indf0,w,c
 12153  002E90                     u6480:
 12154  002E90  ECC9  F015         	call	_escreve_caractere_lcd
 12155                           
 12156                           ;display_lcd.c: 450: buffer++;
 12157  002E94  4A1D               	infsnz	escreve_frase_ram_lcd@buffer,f,c
 12158  002E96  2A1E               	incf	escreve_frase_ram_lcd@buffer+1,f,c
 12159  002E98                     l651:
 12160  002E98  C01D  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 12161  002E9C  C01E  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 12162  002EA0  6AF8               	clrf	tblptru,c
 12163  002EA2  0E07               	movlw	(high __ramtop+-1)
 12164  002EA4  64F7               	cpfsgt	tblptrh,c
 12165  002EA6  D003               	bra	u6497
 12166  002EA8  0008               	tblrd		*
 12167  002EAA  50F5               	movf	tablat,w,c
 12168  002EAC  D005               	bra	u6490
 12169  002EAE                     u6497:
 12170  002EAE  CFF6 FFE9          	movff	tblptrl,fsr0l
 12171  002EB2  CFF7 FFEA          	movff	tblptrh,fsr0h
 12172  002EB6  50EF               	movf	indf0,w,c
 12173  002EB8                     u6490:
 12174  002EB8  0900               	iorlw	0
 12175  002EBA  B4D8               	btfsc	status,2,c
 12176  002EBC  0012               	return	
 12177  002EBE  D7D8               	goto	l652
 12178  002EC0                     __end_of_escreve_frase_ram_lcd:
 12179                           	opt stack 0
 12180                           tosu	equ	0xFFF
 12181                           tosh	equ	0xFFE
 12182                           tosl	equ	0xFFD
 12183                           pclath	equ	0xFFA
 12184                           tblptru	equ	0xFF8
 12185                           tblptrh	equ	0xFF7
 12186                           tblptrl	equ	0xFF6
 12187                           tablat	equ	0xFF5
 12188                           prodh	equ	0xFF4
 12189                           prodl	equ	0xFF3
 12190                           intcon	equ	0xFF2
 12191                           intcon2	equ	0xFF1
 12192                           intcon3	equ	0xFF0
 12193                           indf0	equ	0xFEF
 12194                           postinc0	equ	0xFEE
 12195                           fsr0h	equ	0xFEA
 12196                           fsr0l	equ	0xFE9
 12197                           wreg	equ	0xFE8
 12198                           indf1	equ	0xFE7
 12199                           postinc1	equ	0xFE6
 12200                           postdec1	equ	0xFE5
 12201                           fsr1h	equ	0xFE2
 12202                           fsr1l	equ	0xFE1
 12203                           indf2	equ	0xFDF
 12204                           postinc2	equ	0xFDE
 12205                           postdec2	equ	0xFDD
 12206                           plusw2	equ	0xFDB
 12207                           fsr2h	equ	0xFDA
 12208                           fsr2l	equ	0xFD9
 12209                           status	equ	0xFD8
 12210                           
 12211 ;; *************** function _escreve_caractere_lcd *****************
 12212 ;; Defined at:
 12213 ;;		line 323 in file "bibliotecas/display/display_lcd.c"
 12214 ;; Parameters:    Size  Location     Type
 12215 ;;  data            1    wreg     unsigned char 
 12216 ;; Auto vars:     Size  Location     Type
 12217 ;;  data            1   27[COMRAM] unsigned char 
 12218 ;; Return value:  Size  Location     Type
 12219 ;;                  1    wreg      void 
 12220 ;; Registers used:
 12221 ;;		wreg, status,2, status,0, cstack
 12222 ;; Tracked objects:
 12223 ;;		On entry : 0/0
 12224 ;;		On exit  : 0/0
 12225 ;;		Unchanged: 0/0
 12226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12227 ;;      Params:         0       0       0       0       0       0       0       0       0
 12228 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12229 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12230 ;;      Totals:         1       0       0       0       0       0       0       0       0
 12231 ;;Total ram usage:        1 bytes
 12232 ;; Hardware stack levels used:    1
 12233 ;; Hardware stack levels required when called:    3
 12234 ;; This function calls:
 12235 ;;		_delay
 12236 ;; This function is called by:
 12237 ;;		_escreve_frase_ram_lcd
 12238 ;;		_escreve_float_lcd
 12239 ;;		_escreve_frase_lcd
 12240 ;;		_cria_caractere_lcd
 12241 ;; This function uses a non-reentrant model
 12242 ;;
 12243                           
 12244                           	psect	text48
 12245  002B92                     __ptext48:
 12246                           	opt stack 0
 12247  002B92                     _escreve_caractere_lcd:
 12248                           	opt stack 25
 12249                           
 12250                           ;incstack = 0
 12251                           ;escreve_caractere_lcd@data stored from wreg
 12252  002B92  6E1C               	movwf	escreve_caractere_lcd@data,c
 12253                           
 12254                           ;display_lcd.c: 326: PORTDbits.RD2 = 0;
 12255  002B94  9483               	bcf	3971,2,c	;volatile
 12256                           
 12257                           ;display_lcd.c: 327: PORTDbits.RD1 = 1;
 12258  002B96  8283               	bsf	3971,1,c	;volatile
 12259                           
 12260                           ;display_lcd.c: 328: PORTDbits.RD0 = 0;
 12261  002B98  9083               	bcf	3971,0,c	;volatile
 12262                           
 12263                           ;display_lcd.c: 331: if(data&0b00010000){PORTDbits.RD4=1;}
 12264  002B9A  A81C               	btfss	escreve_caractere_lcd@data,4,c
 12265  002B9C  D002               	goto	l618
 12266  002B9E  8883               	bsf	3971,4,c	;volatile
 12267  002BA0  D001               	goto	l619
 12268  002BA2                     l618:
 12269                           
 12270                           ;display_lcd.c: 332: else {PORTDbits.RD4=0;}
 12271  002BA2  9883               	bcf	3971,4,c	;volatile
 12272  002BA4                     l619:
 12273                           
 12274                           ;display_lcd.c: 333: if(data&0b00100000){PORTDbits.RD5=1;}
 12275  002BA4  AA1C               	btfss	escreve_caractere_lcd@data,5,c
 12276  002BA6  D002               	goto	l620
 12277  002BA8  8A83               	bsf	3971,5,c	;volatile
 12278  002BAA  D001               	goto	l621
 12279  002BAC                     l620:
 12280                           
 12281                           ;display_lcd.c: 334: else {PORTDbits.RD5=0;}
 12282  002BAC  9A83               	bcf	3971,5,c	;volatile
 12283  002BAE                     l621:
 12284                           
 12285                           ;display_lcd.c: 335: if(data&0b01000000){PORTDbits.RD6=1;}
 12286  002BAE  AC1C               	btfss	escreve_caractere_lcd@data,6,c
 12287  002BB0  D002               	goto	l622
 12288  002BB2  8C83               	bsf	3971,6,c	;volatile
 12289  002BB4  D001               	goto	l623
 12290  002BB6                     l622:
 12291                           
 12292                           ;display_lcd.c: 336: else {PORTDbits.RD6=0;}
 12293  002BB6  9C83               	bcf	3971,6,c	;volatile
 12294  002BB8                     l623:
 12295                           
 12296                           ;display_lcd.c: 337: if(data&0b10000000){PORTDbits.RD7=1;}
 12297  002BB8  AE1C               	btfss	escreve_caractere_lcd@data,7,c
 12298  002BBA  D002               	goto	l624
 12299  002BBC  8E83               	bsf	3971,7,c	;volatile
 12300  002BBE  D001               	goto	l625
 12301  002BC0                     l624:
 12302                           
 12303                           ;display_lcd.c: 338: else {PORTDbits.RD7=0;}
 12304  002BC0  9E83               	bcf	3971,7,c	;volatile
 12305  002BC2                     l625:
 12306                           
 12307                           ;display_lcd.c: 341: PORTDbits.RD0 = 1;
 12308  002BC2  8083               	bsf	3971,0,c	;volatile
 12309                           
 12310                           ;display_lcd.c: 342: delay();
 12311  002BC4  EC29  F018         	call	_delay	;wreg free
 12312                           
 12313                           ;display_lcd.c: 343: PORTDbits.RD0 = 0;
 12314  002BC8  9083               	bcf	3971,0,c	;volatile
 12315                           
 12316                           ;display_lcd.c: 344: delay();
 12317  002BCA  EC29  F018         	call	_delay	;wreg free
 12318                           
 12319                           ;display_lcd.c: 348: if(data&0b00000001){PORTDbits.RD4=1;}
 12320  002BCE  A01C               	btfss	escreve_caractere_lcd@data,0,c
 12321  002BD0  D002               	goto	l626
 12322  002BD2  8883               	bsf	3971,4,c	;volatile
 12323  002BD4  D001               	goto	l627
 12324  002BD6                     l626:
 12325                           
 12326                           ;display_lcd.c: 349: else {PORTDbits.RD4=0;}
 12327  002BD6  9883               	bcf	3971,4,c	;volatile
 12328  002BD8                     l627:
 12329                           
 12330                           ;display_lcd.c: 350: if(data&0b00000010){PORTDbits.RD5=1;}
 12331  002BD8  A21C               	btfss	escreve_caractere_lcd@data,1,c
 12332  002BDA  D002               	goto	l628
 12333  002BDC  8A83               	bsf	3971,5,c	;volatile
 12334  002BDE  D001               	goto	l629
 12335  002BE0                     l628:
 12336                           
 12337                           ;display_lcd.c: 351: else {PORTDbits.RD5=0;}
 12338  002BE0  9A83               	bcf	3971,5,c	;volatile
 12339  002BE2                     l629:
 12340                           
 12341                           ;display_lcd.c: 352: if(data&0b00000100){PORTDbits.RD6=1;}
 12342  002BE2  A41C               	btfss	escreve_caractere_lcd@data,2,c
 12343  002BE4  D002               	goto	l630
 12344  002BE6  8C83               	bsf	3971,6,c	;volatile
 12345  002BE8  D001               	goto	l631
 12346  002BEA                     l630:
 12347                           
 12348                           ;display_lcd.c: 353: else {PORTDbits.RD6=0;}
 12349  002BEA  9C83               	bcf	3971,6,c	;volatile
 12350  002BEC                     l631:
 12351                           
 12352                           ;display_lcd.c: 354: if(data&0b00001000){PORTDbits.RD7=1;}
 12353  002BEC  A61C               	btfss	escreve_caractere_lcd@data,3,c
 12354  002BEE  D002               	goto	l632
 12355  002BF0  8E83               	bsf	3971,7,c	;volatile
 12356  002BF2  D001               	goto	l633
 12357  002BF4                     l632:
 12358                           
 12359                           ;display_lcd.c: 355: else {PORTDbits.RD7=0;}
 12360  002BF4  9E83               	bcf	3971,7,c	;volatile
 12361  002BF6                     l633:
 12362                           
 12363                           ;display_lcd.c: 358: PORTDbits.RD0 = 1;
 12364  002BF6  8083               	bsf	3971,0,c	;volatile
 12365                           
 12366                           ;display_lcd.c: 359: delay();
 12367  002BF8  EC29  F018         	call	_delay	;wreg free
 12368                           
 12369                           ;display_lcd.c: 360: PORTDbits.RD0 = 0;
 12370  002BFC  9083               	bcf	3971,0,c	;volatile
 12371                           
 12372                           ;display_lcd.c: 361: delay();
 12373  002BFE  EC29  F018         	call	_delay	;wreg free
 12374  002C02  0012               	return		;funcret
 12375  002C04                     __end_of_escreve_caractere_lcd:
 12376                           	opt stack 0
 12377                           tosu	equ	0xFFF
 12378                           tosh	equ	0xFFE
 12379                           tosl	equ	0xFFD
 12380                           pclath	equ	0xFFA
 12381                           tblptru	equ	0xFF8
 12382                           tblptrh	equ	0xFF7
 12383                           tblptrl	equ	0xFF6
 12384                           tablat	equ	0xFF5
 12385                           prodh	equ	0xFF4
 12386                           prodl	equ	0xFF3
 12387                           intcon	equ	0xFF2
 12388                           intcon2	equ	0xFF1
 12389                           intcon3	equ	0xFF0
 12390                           indf0	equ	0xFEF
 12391                           postinc0	equ	0xFEE
 12392                           fsr0h	equ	0xFEA
 12393                           fsr0l	equ	0xFE9
 12394                           wreg	equ	0xFE8
 12395                           indf1	equ	0xFE7
 12396                           postinc1	equ	0xFE6
 12397                           postdec1	equ	0xFE5
 12398                           fsr1h	equ	0xFE2
 12399                           fsr1l	equ	0xFE1
 12400                           indf2	equ	0xFDF
 12401                           postinc2	equ	0xFDE
 12402                           postdec2	equ	0xFDD
 12403                           plusw2	equ	0xFDB
 12404                           fsr2h	equ	0xFDA
 12405                           fsr2l	equ	0xFD9
 12406                           status	equ	0xFD8
 12407                           
 12408 ;; *************** function _delay *****************
 12409 ;; Defined at:
 12410 ;;		line 45 in file "bibliotecas/display/display_lcd.c"
 12411 ;; Parameters:    Size  Location     Type
 12412 ;;		None
 12413 ;; Auto vars:     Size  Location     Type
 12414 ;;  contador_int    1   26[COMRAM] unsigned char 
 12415 ;;  contador_ext    1   25[COMRAM] unsigned char 
 12416 ;; Return value:  Size  Location     Type
 12417 ;;                  1    wreg      void 
 12418 ;; Registers used:
 12419 ;;		wreg, status,2, status,0
 12420 ;; Tracked objects:
 12421 ;;		On entry : 0/0
 12422 ;;		On exit  : 0/0
 12423 ;;		Unchanged: 0/0
 12424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12425 ;;      Params:         0       0       0       0       0       0       0       0       0
 12426 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12427 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12428 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12429 ;;Total ram usage:        2 bytes
 12430 ;; Hardware stack levels used:    1
 12431 ;; Hardware stack levels required when called:    2
 12432 ;; This function calls:
 12433 ;;		Nothing
 12434 ;; This function is called by:
 12435 ;;		_init_lcd
 12436 ;;		_escreve_cmd_lcd
 12437 ;;		_endereco_cursor_lcd
 12438 ;;		_escreve_caractere_lcd
 12439 ;; This function uses a non-reentrant model
 12440 ;;
 12441                           
 12442                           	psect	text49
 12443  003052                     __ptext49:
 12444                           	opt stack 0
 12445  003052                     _delay:
 12446                           	opt stack 25
 12447                           
 12448                           ;display_lcd.c: 47: unsigned char contador_ext, contador_int;
 12449                           ;display_lcd.c: 49: for(contador_ext = 0; contador_ext<100; contador_ext++)
 12450                           
 12451                           ;incstack = 0
 12452  003052  0E00               	movlw	0
 12453  003054  6E1A               	movwf	delay@contador_ext,c
 12454  003056                     l5800:
 12455  003056  0E63               	movlw	99
 12456  003058  641A               	cpfsgt	delay@contador_ext,c
 12457  00305A  D001               	goto	l557
 12458  00305C  0012               	return	
 12459  00305E                     l557:
 12460                           
 12461                           ;display_lcd.c: 50: {
 12462                           ;display_lcd.c: 51: __nop();
 12463  00305E  F000               	nop	
 12464                           
 12465                           ;display_lcd.c: 52: for(contador_int = 0; contador_int<50; contador_int++)
 12466  003060  0E00               	movlw	0
 12467  003062  6E1B               	movwf	delay@contador_int,c
 12468  003064                     l5806:
 12469  003064  0E31               	movlw	49
 12470  003066  641B               	cpfsgt	delay@contador_int,c
 12471  003068  D001               	goto	l559
 12472  00306A  D003               	goto	u6300
 12473  00306C                     l559:
 12474                           
 12475                           ;display_lcd.c: 53: {
 12476                           ;display_lcd.c: 54: __nop();
 12477  00306C  F000               	nop	
 12478  00306E  2A1B               	incf	delay@contador_int,f,c
 12479  003070  D7F9               	goto	l5806
 12480  003072                     u6300:
 12481  003072  2A1A               	incf	delay@contador_ext,f,c
 12482  003074  D7F0               	goto	l5800
 12483  003076                     __end_of_delay:
 12484                           	opt stack 0
 12485                           tosu	equ	0xFFF
 12486                           tosh	equ	0xFFE
 12487                           tosl	equ	0xFFD
 12488                           pclath	equ	0xFFA
 12489                           tblptru	equ	0xFF8
 12490                           tblptrh	equ	0xFF7
 12491                           tblptrl	equ	0xFF6
 12492                           tablat	equ	0xFF5
 12493                           prodh	equ	0xFF4
 12494                           prodl	equ	0xFF3
 12495                           intcon	equ	0xFF2
 12496                           intcon2	equ	0xFF1
 12497                           intcon3	equ	0xFF0
 12498                           indf0	equ	0xFEF
 12499                           postinc0	equ	0xFEE
 12500                           fsr0h	equ	0xFEA
 12501                           fsr0l	equ	0xFE9
 12502                           wreg	equ	0xFE8
 12503                           indf1	equ	0xFE7
 12504                           postinc1	equ	0xFE6
 12505                           postdec1	equ	0xFE5
 12506                           fsr1h	equ	0xFE2
 12507                           fsr1l	equ	0xFE1
 12508                           indf2	equ	0xFDF
 12509                           postinc2	equ	0xFDE
 12510                           postdec2	equ	0xFDD
 12511                           plusw2	equ	0xFDB
 12512                           fsr2h	equ	0xFDA
 12513                           fsr2l	equ	0xFD9
 12514                           status	equ	0xFD8
 12515                           
 12516 ;; *************** function _proceed *****************
 12517 ;; Defined at:
 12518 ;;		line 333 in file "bibliotecas/SDCard.c"
 12519 ;; Parameters:    Size  Location     Type
 12520 ;;		None
 12521 ;; Auto vars:     Size  Location     Type
 12522 ;;		None
 12523 ;; Return value:  Size  Location     Type
 12524 ;;                  1    wreg      void 
 12525 ;; Registers used:
 12526 ;;		wreg, status,2, cstack
 12527 ;; Tracked objects:
 12528 ;;		On entry : 0/0
 12529 ;;		On exit  : 0/0
 12530 ;;		Unchanged: 0/0
 12531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12532 ;;      Params:         0       0       0       0       0       0       0       0       0
 12533 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12534 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12535 ;;      Totals:         0       0       0       0       0       0       0       0       0
 12536 ;;Total ram usage:        0 bytes
 12537 ;; Hardware stack levels used:    1
 12538 ;; Hardware stack levels required when called:    3
 12539 ;; This function calls:
 12540 ;;		_WriteSPI_
 12541 ;; This function is called by:
 12542 ;;		_SDCard
 12543 ;;		_reset
 12544 ;;		_disk_initialize
 12545 ;;		_disk_readp
 12546 ;;		_disk_writep
 12547 ;; This function uses a non-reentrant model
 12548 ;;
 12549                           
 12550                           	psect	text50
 12551  0031F4                     __ptext50:
 12552                           	opt stack 0
 12553  0031F4                     _proceed:
 12554                           	opt stack 25
 12555                           
 12556                           ;SDCard.c: 335: LATBbits.LATB4 = 0;
 12557                           
 12558                           ;incstack = 0
 12559  0031F4  988A               	bcf	3978,4,c	;volatile
 12560                           
 12561                           ;SDCard.c: 336: WriteSPI_(0xFF);
 12562  0031F6  0EFF               	movlw	255
 12563  0031F8  EC7A  F018         	call	_WriteSPI_
 12564                           
 12565                           ;SDCard.c: 337: LATBbits.LATB4 = 1;
 12566  0031FC  888A               	bsf	3978,4,c	;volatile
 12567  0031FE  0012               	return		;funcret
 12568  003200                     __end_of_proceed:
 12569                           	opt stack 0
 12570                           tosu	equ	0xFFF
 12571                           tosh	equ	0xFFE
 12572                           tosl	equ	0xFFD
 12573                           pclath	equ	0xFFA
 12574                           tblptru	equ	0xFF8
 12575                           tblptrh	equ	0xFF7
 12576                           tblptrl	equ	0xFF6
 12577                           tablat	equ	0xFF5
 12578                           prodh	equ	0xFF4
 12579                           prodl	equ	0xFF3
 12580                           intcon	equ	0xFF2
 12581                           intcon2	equ	0xFF1
 12582                           intcon3	equ	0xFF0
 12583                           indf0	equ	0xFEF
 12584                           postinc0	equ	0xFEE
 12585                           fsr0h	equ	0xFEA
 12586                           fsr0l	equ	0xFE9
 12587                           wreg	equ	0xFE8
 12588                           indf1	equ	0xFE7
 12589                           postinc1	equ	0xFE6
 12590                           postdec1	equ	0xFE5
 12591                           fsr1h	equ	0xFE2
 12592                           fsr1l	equ	0xFE1
 12593                           indf2	equ	0xFDF
 12594                           postinc2	equ	0xFDE
 12595                           postdec2	equ	0xFDD
 12596                           plusw2	equ	0xFDB
 12597                           fsr2h	equ	0xFDA
 12598                           fsr2l	equ	0xFD9
 12599                           status	equ	0xFD8
 12600                           
 12601 ;; *************** function _dummy_clocks *****************
 12602 ;; Defined at:
 12603 ;;		line 321 in file "bibliotecas/SDCard.c"
 12604 ;; Parameters:    Size  Location     Type
 12605 ;;  n               1    wreg     unsigned char 
 12606 ;; Auto vars:     Size  Location     Type
 12607 ;;  n               1   29[COMRAM] unsigned char 
 12608 ;;  i               2   30[COMRAM] unsigned int 
 12609 ;; Return value:  Size  Location     Type
 12610 ;;                  1    wreg      void 
 12611 ;; Registers used:
 12612 ;;		wreg, status,2, status,0, cstack
 12613 ;; Tracked objects:
 12614 ;;		On entry : 0/0
 12615 ;;		On exit  : 0/0
 12616 ;;		Unchanged: 0/0
 12617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12618 ;;      Params:         0       0       0       0       0       0       0       0       0
 12619 ;;      Locals:         3       0       0       0       0       0       0       0       0
 12620 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12621 ;;      Totals:         5       0       0       0       0       0       0       0       0
 12622 ;;Total ram usage:        5 bytes
 12623 ;; Hardware stack levels used:    1
 12624 ;; Hardware stack levels required when called:    3
 12625 ;; This function calls:
 12626 ;;		_WriteSPI_
 12627 ;; This function is called by:
 12628 ;;		_reset
 12629 ;;		_disk_initialize
 12630 ;;		_disk_readp
 12631 ;;		_disk_writep
 12632 ;; This function uses a non-reentrant model
 12633 ;;
 12634                           
 12635                           	psect	text51
 12636  002FAC                     __ptext51:
 12637                           	opt stack 0
 12638  002FAC                     _dummy_clocks:
 12639                           	opt stack 22
 12640                           
 12641                           ;incstack = 0
 12642                           ;dummy_clocks@n stored from wreg
 12643  002FAC  6E1E               	movwf	dummy_clocks@n,c
 12644                           
 12645                           ;SDCard.c: 323: unsigned int i;
 12646                           ;SDCard.c: 324: for(i=0;i<n;i++)
 12647  002FAE  0E00               	movlw	0
 12648  002FB0  6E20               	movwf	dummy_clocks@i+1,c
 12649  002FB2  0E00               	movlw	0
 12650  002FB4  6E1F               	movwf	dummy_clocks@i,c
 12651  002FB6  D007               	goto	l12
 12652  002FB8                     l13:
 12653                           
 12654                           ;SDCard.c: 325: {
 12655                           ;SDCard.c: 326: LATBbits.LATB4 = 1;
 12656  002FB8  888A               	bsf	3978,4,c	;volatile
 12657                           
 12658                           ;SDCard.c: 327: WriteSPI_(0XFF);
 12659  002FBA  0EFF               	movlw	255
 12660  002FBC  EC7A  F018         	call	_WriteSPI_
 12661                           
 12662                           ;SDCard.c: 328: LATBbits.LATB4 = 0;
 12663  002FC0  988A               	bcf	3978,4,c	;volatile
 12664  002FC2  4A1F               	infsnz	dummy_clocks@i,f,c
 12665  002FC4  2A20               	incf	dummy_clocks@i+1,f,c
 12666  002FC6                     l12:
 12667  002FC6  501E               	movf	dummy_clocks@n,w,c
 12668  002FC8  6E1C               	movwf	??_dummy_clocks& (0+255),c
 12669  002FCA  6A1D               	clrf	(??_dummy_clocks+1)& (0+255),c
 12670  002FCC  501C               	movf	??_dummy_clocks,w,c
 12671  002FCE  5C1F               	subwf	dummy_clocks@i,w,c
 12672  002FD0  501D               	movf	??_dummy_clocks+1,w,c
 12673  002FD2  5820               	subwfb	dummy_clocks@i+1,w,c
 12674  002FD4  B0D8               	btfsc	status,0,c
 12675  002FD6  0012               	return	
 12676  002FD8  D7EF               	goto	l13
 12677  002FDA                     __end_of_dummy_clocks:
 12678                           	opt stack 0
 12679                           tosu	equ	0xFFF
 12680                           tosh	equ	0xFFE
 12681                           tosl	equ	0xFFD
 12682                           pclath	equ	0xFFA
 12683                           tblptru	equ	0xFF8
 12684                           tblptrh	equ	0xFF7
 12685                           tblptrl	equ	0xFF6
 12686                           tablat	equ	0xFF5
 12687                           prodh	equ	0xFF4
 12688                           prodl	equ	0xFF3
 12689                           intcon	equ	0xFF2
 12690                           intcon2	equ	0xFF1
 12691                           intcon3	equ	0xFF0
 12692                           indf0	equ	0xFEF
 12693                           postinc0	equ	0xFEE
 12694                           fsr0h	equ	0xFEA
 12695                           fsr0l	equ	0xFE9
 12696                           wreg	equ	0xFE8
 12697                           indf1	equ	0xFE7
 12698                           postinc1	equ	0xFE6
 12699                           postdec1	equ	0xFE5
 12700                           fsr1h	equ	0xFE2
 12701                           fsr1l	equ	0xFE1
 12702                           indf2	equ	0xFDF
 12703                           postinc2	equ	0xFDE
 12704                           postdec2	equ	0xFDD
 12705                           plusw2	equ	0xFDB
 12706                           fsr2h	equ	0xFDA
 12707                           fsr2l	equ	0xFD9
 12708                           status	equ	0xFD8
 12709                           
 12710 ;; *************** function _command *****************
 12711 ;; Defined at:
 12712 ;;		line 342 in file "bibliotecas/SDCard.c"
 12713 ;; Parameters:    Size  Location     Type
 12714 ;;  CMD             1    wreg     unsigned char 
 12715 ;;  arg             4   27[COMRAM] unsigned long 
 12716 ;;  CRC             1   31[COMRAM] unsigned char 
 12717 ;; Auto vars:     Size  Location     Type
 12718 ;;  CMD             1   32[COMRAM] unsigned char 
 12719 ;;  argument        1   33[COMRAM] unsigned char 
 12720 ;; Return value:  Size  Location     Type
 12721 ;;                  1    wreg      void 
 12722 ;; Registers used:
 12723 ;;		wreg, status,2, cstack
 12724 ;; Tracked objects:
 12725 ;;		On entry : 0/0
 12726 ;;		On exit  : 0/0
 12727 ;;		Unchanged: 0/0
 12728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12729 ;;      Params:         5       0       0       0       0       0       0       0       0
 12730 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12731 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12732 ;;      Totals:         7       0       0       0       0       0       0       0       0
 12733 ;;Total ram usage:        7 bytes
 12734 ;; Hardware stack levels used:    1
 12735 ;; Hardware stack levels required when called:    3
 12736 ;; This function calls:
 12737 ;;		_WriteSPI_
 12738 ;; This function is called by:
 12739 ;;		_reset
 12740 ;;		_disk_initialize
 12741 ;;		_disk_readp
 12742 ;;		_disk_writep
 12743 ;; This function uses a non-reentrant model
 12744 ;;
 12745                           
 12746                           	psect	text52
 12747  002F04                     __ptext52:
 12748                           	opt stack 0
 12749  002F04                     _command:
 12750                           	opt stack 22
 12751                           
 12752                           ;incstack = 0
 12753                           ;command@CMD stored from wreg
 12754  002F04  6E21               	movwf	command@CMD,c
 12755                           
 12756                           ;SDCard.c: 344: unsigned char argument = arg>>24;
 12757  002F06  C01F  F022         	movff	command@arg+3,command@argument
 12758                           
 12759                           ;SDCard.c: 345: WriteSPI_(0xFF);
 12760  002F0A  0EFF               	movlw	255
 12761  002F0C  EC7A  F018         	call	_WriteSPI_
 12762                           
 12763                           ;SDCard.c: 346: WriteSPI_(CMD);
 12764  002F10  5021               	movf	command@CMD,w,c
 12765  002F12  EC7A  F018         	call	_WriteSPI_
 12766                           
 12767                           ;SDCard.c: 347: WriteSPI_(argument);
 12768  002F16  5022               	movf	command@argument,w,c
 12769  002F18  EC7A  F018         	call	_WriteSPI_
 12770                           
 12771                           ;SDCard.c: 348: argument = arg>>16;
 12772  002F1C  C01E  F022         	movff	command@arg+2,command@argument
 12773                           
 12774                           ;SDCard.c: 349: WriteSPI_(argument);
 12775  002F20  5022               	movf	command@argument,w,c
 12776  002F22  EC7A  F018         	call	_WriteSPI_
 12777                           
 12778                           ;SDCard.c: 350: argument = arg>>8;
 12779  002F26  C01D  F022         	movff	command@arg+1,command@argument
 12780                           
 12781                           ;SDCard.c: 351: WriteSPI_(argument);
 12782  002F2A  5022               	movf	command@argument,w,c
 12783  002F2C  EC7A  F018         	call	_WriteSPI_
 12784                           
 12785                           ;SDCard.c: 352: argument = arg;
 12786  002F30  C01C  F022         	movff	command@arg,command@argument
 12787                           
 12788                           ;SDCard.c: 353: WriteSPI_(argument);
 12789  002F34  5022               	movf	command@argument,w,c
 12790  002F36  EC7A  F018         	call	_WriteSPI_
 12791                           
 12792                           ;SDCard.c: 354: WriteSPI_(CRC);
 12793  002F3A  5020               	movf	command@CRC,w,c
 12794  002F3C  EC7A  F018         	call	_WriteSPI_
 12795  002F40  0012               	return		;funcret
 12796  002F42                     __end_of_command:
 12797                           	opt stack 0
 12798                           tosu	equ	0xFFF
 12799                           tosh	equ	0xFFE
 12800                           tosl	equ	0xFFD
 12801                           pclath	equ	0xFFA
 12802                           tblptru	equ	0xFF8
 12803                           tblptrh	equ	0xFF7
 12804                           tblptrl	equ	0xFF6
 12805                           tablat	equ	0xFF5
 12806                           prodh	equ	0xFF4
 12807                           prodl	equ	0xFF3
 12808                           intcon	equ	0xFF2
 12809                           intcon2	equ	0xFF1
 12810                           intcon3	equ	0xFF0
 12811                           indf0	equ	0xFEF
 12812                           postinc0	equ	0xFEE
 12813                           fsr0h	equ	0xFEA
 12814                           fsr0l	equ	0xFE9
 12815                           wreg	equ	0xFE8
 12816                           indf1	equ	0xFE7
 12817                           postinc1	equ	0xFE6
 12818                           postdec1	equ	0xFE5
 12819                           fsr1h	equ	0xFE2
 12820                           fsr1l	equ	0xFE1
 12821                           indf2	equ	0xFDF
 12822                           postinc2	equ	0xFDE
 12823                           postdec2	equ	0xFDD
 12824                           plusw2	equ	0xFDB
 12825                           fsr2h	equ	0xFDA
 12826                           fsr2l	equ	0xFD9
 12827                           status	equ	0xFD8
 12828                           
 12829 ;; *************** function _WriteSPI_ *****************
 12830 ;; Defined at:
 12831 ;;		line 131 in file "bibliotecas/SPI.c"
 12832 ;; Parameters:    Size  Location     Type
 12833 ;;  dado            1    wreg     unsigned char 
 12834 ;; Auto vars:     Size  Location     Type
 12835 ;;  dado            1   26[COMRAM] unsigned char 
 12836 ;;  TempVar         1   25[COMRAM] unsigned char 
 12837 ;; Return value:  Size  Location     Type
 12838 ;;                  1    wreg      unsigned char 
 12839 ;; Registers used:
 12840 ;;		wreg, status,2
 12841 ;; Tracked objects:
 12842 ;;		On entry : 0/0
 12843 ;;		On exit  : 0/0
 12844 ;;		Unchanged: 0/0
 12845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12846 ;;      Params:         0       0       0       0       0       0       0       0       0
 12847 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12848 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12849 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12850 ;;Total ram usage:        2 bytes
 12851 ;; Hardware stack levels used:    1
 12852 ;; Hardware stack levels required when called:    2
 12853 ;; This function calls:
 12854 ;;		Nothing
 12855 ;; This function is called by:
 12856 ;;		_dummy_clocks
 12857 ;;		_proceed
 12858 ;;		_command
 12859 ;;		_disk_writep
 12860 ;; This function uses a non-reentrant model
 12861 ;;
 12862                           
 12863                           	psect	text53
 12864  0030F4                     __ptext53:
 12865                           	opt stack 0
 12866  0030F4                     _WriteSPI_:
 12867                           	opt stack 25
 12868                           
 12869                           ;incstack = 0
 12870                           ;WriteSPI_@dado stored from wreg
 12871  0030F4  6E1B               	movwf	WriteSPI_@dado,c
 12872                           
 12873                           ;SPI.c: 133: unsigned char TempVar;
 12874                           ;SPI.c: 135: TempVar = SSPBUF;
 12875  0030F6  CFC9 F01A          	movff	4041,WriteSPI_@TempVar	;volatile
 12876                           
 12877                           ;SPI.c: 137: SSPCON1bits.WCOL = 0;
 12878  0030FA  9EC6               	bcf	4038,7,c	;volatile
 12879                           
 12880                           ;SPI.c: 138: SSPSTATbits.BF = 0;
 12881  0030FC  90C7               	bcf	4039,0,c	;volatile
 12882                           
 12883                           ;SPI.c: 139: SSPBUF = dado;
 12884  0030FE  C01B  FFC9         	movff	WriteSPI_@dado,4041	;volatile
 12885                           
 12886                           ;SPI.c: 140: if (SSPCON1 & 0x80 )
 12887  003102  BEC6               	btfsc	4038,7,c	;volatile
 12888  003104  0012               	return	
 12889  003106                     
 12890                           ;SPI.c: 144: else
 12891                           ;SPI.c: 145: {
 12892                           ;SPI.c: 146: while( !SSPSTATbits.BF );
 12893  003106  A0C7               	btfss	4039,0,c	;volatile
 12894  003108  D7FE               	goto	l94
 12895                           
 12896                           ;SPI.c: 149: dado = 2;
 12897  00310A  0E02               	movlw	2
 12898  00310C  6E1B               	movwf	WriteSPI_@dado,c
 12899                           
 12900                           ;SPI.c: 150: return (0);
 12901                           ;	Return value of _WriteSPI_ is never used
 12902  00310E  0012               	return	
 12903  003110                     __end_of_WriteSPI_:
 12904                           	opt stack 0
 12905                           tosu	equ	0xFFF
 12906                           tosh	equ	0xFFE
 12907                           tosl	equ	0xFFD
 12908                           pclath	equ	0xFFA
 12909                           tblptru	equ	0xFF8
 12910                           tblptrh	equ	0xFF7
 12911                           tblptrl	equ	0xFF6
 12912                           tablat	equ	0xFF5
 12913                           prodh	equ	0xFF4
 12914                           prodl	equ	0xFF3
 12915                           intcon	equ	0xFF2
 12916                           intcon2	equ	0xFF1
 12917                           intcon3	equ	0xFF0
 12918                           indf0	equ	0xFEF
 12919                           postinc0	equ	0xFEE
 12920                           fsr0h	equ	0xFEA
 12921                           fsr0l	equ	0xFE9
 12922                           wreg	equ	0xFE8
 12923                           indf1	equ	0xFE7
 12924                           postinc1	equ	0xFE6
 12925                           postdec1	equ	0xFE5
 12926                           fsr1h	equ	0xFE2
 12927                           fsr1l	equ	0xFE1
 12928                           indf2	equ	0xFDF
 12929                           postinc2	equ	0xFDE
 12930                           postdec2	equ	0xFDD
 12931                           plusw2	equ	0xFDB
 12932                           fsr2h	equ	0xFDA
 12933                           fsr2l	equ	0xFD9
 12934                           status	equ	0xFD8
 12935                           
 12936 ;; *************** function ___lmul *****************
 12937 ;; Defined at:
 12938 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 12939 ;; Parameters:    Size  Location     Type
 12940 ;;  multiplier      4   25[COMRAM] unsigned long 
 12941 ;;  multiplicand    4   29[COMRAM] unsigned long 
 12942 ;; Auto vars:     Size  Location     Type
 12943 ;;  product         4   33[COMRAM] unsigned long 
 12944 ;; Return value:  Size  Location     Type
 12945 ;;                  4   25[COMRAM] unsigned long 
 12946 ;; Registers used:
 12947 ;;		wreg, status,2, status,0
 12948 ;; Tracked objects:
 12949 ;;		On entry : 0/0
 12950 ;;		On exit  : 0/0
 12951 ;;		Unchanged: 0/0
 12952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12953 ;;      Params:         8       0       0       0       0       0       0       0       0
 12954 ;;      Locals:         4       0       0       0       0       0       0       0       0
 12955 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12956 ;;      Totals:        12       0       0       0       0       0       0       0       0
 12957 ;;Total ram usage:       12 bytes
 12958 ;; Hardware stack levels used:    1
 12959 ;; Hardware stack levels required when called:    2
 12960 ;; This function calls:
 12961 ;;		Nothing
 12962 ;; This function is called by:
 12963 ;;		_clust2sect
 12964 ;;		_pf_mount
 12965 ;; This function uses a non-reentrant model
 12966 ;;
 12967                           
 12968                           	psect	text54
 12969  002E18                     __ptext54:
 12970                           	opt stack 0
 12971  002E18                     ___lmul:
 12972                           	opt stack 24
 12973                           
 12974                           ;incstack = 0
 12975  002E18  0E00               	movlw	0
 12976  002E1A  6E22               	movwf	___lmul@product,c
 12977  002E1C  0E00               	movlw	0
 12978  002E1E  6E23               	movwf	___lmul@product+1,c
 12979  002E20  0E00               	movlw	0
 12980  002E22  6E24               	movwf	___lmul@product+2,c
 12981  002E24  0E00               	movlw	0
 12982  002E26  6E25               	movwf	___lmul@product+3,c
 12983  002E28  A01A               	btfss	___lmul@multiplier,0,c
 12984  002E2A  D008               	goto	l1065
 12985  002E2C  501E               	movf	___lmul@multiplicand,w,c
 12986  002E2E  2622               	addwf	___lmul@product,f,c
 12987  002E30  501F               	movf	___lmul@multiplicand+1,w,c
 12988  002E32  2223               	addwfc	___lmul@product+1,f,c
 12989  002E34  5020               	movf	___lmul@multiplicand+2,w,c
 12990  002E36  2224               	addwfc	___lmul@product+2,f,c
 12991  002E38  5021               	movf	___lmul@multiplicand+3,w,c
 12992  002E3A  2225               	addwfc	___lmul@product+3,f,c
 12993  002E3C                     l1065:
 12994  002E3C  90D8               	bcf	status,0,c
 12995  002E3E  361E               	rlcf	___lmul@multiplicand,f,c
 12996  002E40  361F               	rlcf	___lmul@multiplicand+1,f,c
 12997  002E42  3620               	rlcf	___lmul@multiplicand+2,f,c
 12998  002E44  3621               	rlcf	___lmul@multiplicand+3,f,c
 12999  002E46  90D8               	bcf	status,0,c
 13000  002E48  321D               	rrcf	___lmul@multiplier+3,f,c
 13001  002E4A  321C               	rrcf	___lmul@multiplier+2,f,c
 13002  002E4C  321B               	rrcf	___lmul@multiplier+1,f,c
 13003  002E4E  321A               	rrcf	___lmul@multiplier,f,c
 13004  002E50  501A               	movf	___lmul@multiplier,w,c
 13005  002E52  101B               	iorwf	___lmul@multiplier+1,w,c
 13006  002E54  101C               	iorwf	___lmul@multiplier+2,w,c
 13007  002E56  101D               	iorwf	___lmul@multiplier+3,w,c
 13008  002E58  A4D8               	btfss	status,2,c
 13009  002E5A  D7E6               	goto	l1064
 13010  002E5C  C022  F01A         	movff	___lmul@product,?___lmul
 13011  002E60  C023  F01B         	movff	___lmul@product+1,?___lmul+1
 13012  002E64  C024  F01C         	movff	___lmul@product+2,?___lmul+2
 13013  002E68  C025  F01D         	movff	___lmul@product+3,?___lmul+3
 13014  002E6C  0012               	return		;funcret
 13015  002E6E                     __end_of___lmul:
 13016                           	opt stack 0
 13017                           tosu	equ	0xFFF
 13018                           tosh	equ	0xFFE
 13019                           tosl	equ	0xFFD
 13020                           pclath	equ	0xFFA
 13021                           tblptru	equ	0xFF8
 13022                           tblptrh	equ	0xFF7
 13023                           tblptrl	equ	0xFF6
 13024                           tablat	equ	0xFF5
 13025                           prodh	equ	0xFF4
 13026                           prodl	equ	0xFF3
 13027                           intcon	equ	0xFF2
 13028                           intcon2	equ	0xFF1
 13029                           intcon3	equ	0xFF0
 13030                           indf0	equ	0xFEF
 13031                           postinc0	equ	0xFEE
 13032                           fsr0h	equ	0xFEA
 13033                           fsr0l	equ	0xFE9
 13034                           wreg	equ	0xFE8
 13035                           indf1	equ	0xFE7
 13036                           postinc1	equ	0xFE6
 13037                           postdec1	equ	0xFE5
 13038                           fsr1h	equ	0xFE2
 13039                           fsr1l	equ	0xFE1
 13040                           indf2	equ	0xFDF
 13041                           postinc2	equ	0xFDE
 13042                           postdec2	equ	0xFDD
 13043                           plusw2	equ	0xFDB
 13044                           fsr2h	equ	0xFDA
 13045                           fsr2l	equ	0xFD9
 13046                           status	equ	0xFD8
 13047                           
 13048 ;; *************** function ___lldiv *****************
 13049 ;; Defined at:
 13050 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 13051 ;; Parameters:    Size  Location     Type
 13052 ;;  dividend        4   25[COMRAM] unsigned long 
 13053 ;;  divisor         4   29[COMRAM] unsigned long 
 13054 ;; Auto vars:     Size  Location     Type
 13055 ;;  quotient        4   33[COMRAM] unsigned long 
 13056 ;;  counter         1   37[COMRAM] unsigned char 
 13057 ;; Return value:  Size  Location     Type
 13058 ;;                  4   25[COMRAM] unsigned long 
 13059 ;; Registers used:
 13060 ;;		wreg, status,2, status,0
 13061 ;; Tracked objects:
 13062 ;;		On entry : 0/0
 13063 ;;		On exit  : 0/0
 13064 ;;		Unchanged: 0/0
 13065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13066 ;;      Params:         8       0       0       0       0       0       0       0       0
 13067 ;;      Locals:         5       0       0       0       0       0       0       0       0
 13068 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13069 ;;      Totals:        13       0       0       0       0       0       0       0       0
 13070 ;;Total ram usage:       13 bytes
 13071 ;; Hardware stack levels used:    1
 13072 ;; Hardware stack levels required when called:    2
 13073 ;; This function calls:
 13074 ;;		Nothing
 13075 ;; This function is called by:
 13076 ;;		_pf_mount
 13077 ;;		_pf_lseek
 13078 ;; This function uses a non-reentrant model
 13079 ;;
 13080                           
 13081                           	psect	text55
 13082  002A1A                     __ptext55:
 13083                           	opt stack 0
 13084  002A1A                     ___lldiv:
 13085                           	opt stack 25
 13086                           
 13087                           ;incstack = 0
 13088  002A1A  0E00               	movlw	0
 13089  002A1C  6E22               	movwf	___lldiv@quotient,c
 13090  002A1E  0E00               	movlw	0
 13091  002A20  6E23               	movwf	___lldiv@quotient+1,c
 13092  002A22  0E00               	movlw	0
 13093  002A24  6E24               	movwf	___lldiv@quotient+2,c
 13094  002A26  0E00               	movlw	0
 13095  002A28  6E25               	movwf	___lldiv@quotient+3,c
 13096  002A2A  501E               	movf	___lldiv@divisor,w,c
 13097  002A2C  101F               	iorwf	___lldiv@divisor+1,w,c
 13098  002A2E  1020               	iorwf	___lldiv@divisor+2,w,c
 13099  002A30  1021               	iorwf	___lldiv@divisor+3,w,c
 13100  002A32  B4D8               	btfsc	status,2,c
 13101  002A34  D02A               	goto	l1426
 13102  002A36  0E01               	movlw	1
 13103  002A38  6E26               	movwf	___lldiv@counter,c
 13104  002A3A  D006               	goto	l1421
 13105  002A3C  90D8               	bcf	status,0,c
 13106  002A3E  361E               	rlcf	___lldiv@divisor,f,c
 13107  002A40  361F               	rlcf	___lldiv@divisor+1,f,c
 13108  002A42  3620               	rlcf	___lldiv@divisor+2,f,c
 13109  002A44  3621               	rlcf	___lldiv@divisor+3,f,c
 13110  002A46  2A26               	incf	___lldiv@counter,f,c
 13111  002A48                     l1421:
 13112  002A48  AE21               	btfss	___lldiv@divisor+3,7,c
 13113  002A4A  D7F8               	goto	l1422
 13114  002A4C                     u4630:
 13115  002A4C  90D8               	bcf	status,0,c
 13116  002A4E  3622               	rlcf	___lldiv@quotient,f,c
 13117  002A50  3623               	rlcf	___lldiv@quotient+1,f,c
 13118  002A52  3624               	rlcf	___lldiv@quotient+2,f,c
 13119  002A54  3625               	rlcf	___lldiv@quotient+3,f,c
 13120  002A56  501E               	movf	___lldiv@divisor,w,c
 13121  002A58  5C1A               	subwf	___lldiv@dividend,w,c
 13122  002A5A  501F               	movf	___lldiv@divisor+1,w,c
 13123  002A5C  581B               	subwfb	___lldiv@dividend+1,w,c
 13124  002A5E  5020               	movf	___lldiv@divisor+2,w,c
 13125  002A60  581C               	subwfb	___lldiv@dividend+2,w,c
 13126  002A62  5021               	movf	___lldiv@divisor+3,w,c
 13127  002A64  581D               	subwfb	___lldiv@dividend+3,w,c
 13128  002A66  A0D8               	btfss	status,0,c
 13129  002A68  D009               	goto	l1425
 13130  002A6A  501E               	movf	___lldiv@divisor,w,c
 13131  002A6C  5E1A               	subwf	___lldiv@dividend,f,c
 13132  002A6E  501F               	movf	___lldiv@divisor+1,w,c
 13133  002A70  5A1B               	subwfb	___lldiv@dividend+1,f,c
 13134  002A72  5020               	movf	___lldiv@divisor+2,w,c
 13135  002A74  5A1C               	subwfb	___lldiv@dividend+2,f,c
 13136  002A76  5021               	movf	___lldiv@divisor+3,w,c
 13137  002A78  5A1D               	subwfb	___lldiv@dividend+3,f,c
 13138  002A7A  8022               	bsf	___lldiv@quotient,0,c
 13139  002A7C                     l1425:
 13140  002A7C  90D8               	bcf	status,0,c
 13141  002A7E  3221               	rrcf	___lldiv@divisor+3,f,c
 13142  002A80  3220               	rrcf	___lldiv@divisor+2,f,c
 13143  002A82  321F               	rrcf	___lldiv@divisor+1,f,c
 13144  002A84  321E               	rrcf	___lldiv@divisor,f,c
 13145  002A86  2E26               	decfsz	___lldiv@counter,f,c
 13146  002A88  D7E1               	goto	u4630
 13147  002A8A                     l1426:
 13148  002A8A  C022  F01A         	movff	___lldiv@quotient,?___lldiv
 13149  002A8E  C023  F01B         	movff	___lldiv@quotient+1,?___lldiv+1
 13150  002A92  C024  F01C         	movff	___lldiv@quotient+2,?___lldiv+2
 13151  002A96  C025  F01D         	movff	___lldiv@quotient+3,?___lldiv+3
 13152  002A9A  0012               	return		;funcret
 13153  002A9C                     __end_of___lldiv:
 13154                           	opt stack 0
 13155                           tosu	equ	0xFFF
 13156                           tosh	equ	0xFFE
 13157                           tosl	equ	0xFFD
 13158                           pclath	equ	0xFFA
 13159                           tblptru	equ	0xFF8
 13160                           tblptrh	equ	0xFF7
 13161                           tblptrl	equ	0xFF6
 13162                           tablat	equ	0xFF5
 13163                           prodh	equ	0xFF4
 13164                           prodl	equ	0xFF3
 13165                           intcon	equ	0xFF2
 13166                           intcon2	equ	0xFF1
 13167                           intcon3	equ	0xFF0
 13168                           indf0	equ	0xFEF
 13169                           postinc0	equ	0xFEE
 13170                           fsr0h	equ	0xFEA
 13171                           fsr0l	equ	0xFE9
 13172                           wreg	equ	0xFE8
 13173                           indf1	equ	0xFE7
 13174                           postinc1	equ	0xFE6
 13175                           postdec1	equ	0xFE5
 13176                           fsr1h	equ	0xFE2
 13177                           fsr1l	equ	0xFE1
 13178                           indf2	equ	0xFDF
 13179                           postinc2	equ	0xFDE
 13180                           postdec2	equ	0xFDD
 13181                           plusw2	equ	0xFDB
 13182                           fsr2h	equ	0xFDA
 13183                           fsr2l	equ	0xFD9
 13184                           status	equ	0xFD8
 13185                           
 13186 ;; *************** function _controle_shrc *****************
 13187 ;; Defined at:
 13188 ;;		line 112 in file "bibliotecas/SHRC.c"
 13189 ;; Parameters:    Size  Location     Type
 13190 ;;		None
 13191 ;; Auto vars:     Size  Location     Type
 13192 ;;		None
 13193 ;; Return value:  Size  Location     Type
 13194 ;;                  1    wreg      void 
 13195 ;; Registers used:
 13196 ;;		wreg, status,2, status,0, cstack
 13197 ;; Tracked objects:
 13198 ;;		On entry : 0/0
 13199 ;;		On exit  : 0/0
 13200 ;;		Unchanged: 0/0
 13201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13202 ;;      Params:         0       0       0       0       0       0       0       0       0
 13203 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13204 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13205 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13206 ;;Total ram usage:        0 bytes
 13207 ;; Hardware stack levels used:    1
 13208 ;; Hardware stack levels required when called:    3
 13209 ;; This function calls:
 13210 ;;		_ativa_latch_shrc
 13211 ;;		_envia_dados_shrc
 13212 ;; This function is called by:
 13213 ;;		_main
 13214 ;;		_timer_dois
 13215 ;; This function uses a non-reentrant model
 13216 ;;
 13217                           
 13218                           	psect	text56
 13219  003200                     __ptext56:
 13220                           	opt stack 0
 13221  003200                     _controle_shrc:
 13222                           	opt stack 27
 13223                           
 13224                           ;SHRC.c: 115: envia_dados_shrc(dado);
 13225                           
 13226                           ;incstack = 0
 13227  003200  5045               	movf	_dado,w,c
 13228  003202  EC60  F017         	call	_envia_dados_shrc
 13229                           
 13230                           ;SHRC.c: 116: ativa_latch_shrc();
 13231  003206  ECC8  F018         	call	_ativa_latch_shrc	;wreg free
 13232  00320A  0012               	return		;funcret
 13233  00320C                     __end_of_controle_shrc:
 13234                           	opt stack 0
 13235                           tosu	equ	0xFFF
 13236                           tosh	equ	0xFFE
 13237                           tosl	equ	0xFFD
 13238                           pclath	equ	0xFFA
 13239                           tblptru	equ	0xFF8
 13240                           tblptrh	equ	0xFF7
 13241                           tblptrl	equ	0xFF6
 13242                           tablat	equ	0xFF5
 13243                           prodh	equ	0xFF4
 13244                           prodl	equ	0xFF3
 13245                           intcon	equ	0xFF2
 13246                           intcon2	equ	0xFF1
 13247                           intcon3	equ	0xFF0
 13248                           indf0	equ	0xFEF
 13249                           postinc0	equ	0xFEE
 13250                           fsr0h	equ	0xFEA
 13251                           fsr0l	equ	0xFE9
 13252                           wreg	equ	0xFE8
 13253                           indf1	equ	0xFE7
 13254                           postinc1	equ	0xFE6
 13255                           postdec1	equ	0xFE5
 13256                           fsr1h	equ	0xFE2
 13257                           fsr1l	equ	0xFE1
 13258                           indf2	equ	0xFDF
 13259                           postinc2	equ	0xFDE
 13260                           postdec2	equ	0xFDD
 13261                           plusw2	equ	0xFDB
 13262                           fsr2h	equ	0xFDA
 13263                           fsr2l	equ	0xFD9
 13264                           status	equ	0xFD8
 13265                           
 13266 ;; *************** function _envia_dados_shrc *****************
 13267 ;; Defined at:
 13268 ;;		line 62 in file "bibliotecas/SHRC.c"
 13269 ;; Parameters:    Size  Location     Type
 13270 ;;  data_to_shrc    1    wreg     unsigned char 
 13271 ;; Auto vars:     Size  Location     Type
 13272 ;;  data_to_shrc    1   26[COMRAM] unsigned char 
 13273 ;;  contador        1   25[COMRAM] unsigned char 
 13274 ;; Return value:  Size  Location     Type
 13275 ;;                  1    wreg      void 
 13276 ;; Registers used:
 13277 ;;		wreg, status,2, status,0
 13278 ;; Tracked objects:
 13279 ;;		On entry : 0/0
 13280 ;;		On exit  : 0/0
 13281 ;;		Unchanged: 0/0
 13282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13283 ;;      Params:         0       0       0       0       0       0       0       0       0
 13284 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13285 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13286 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13287 ;;Total ram usage:        2 bytes
 13288 ;; Hardware stack levels used:    1
 13289 ;; Hardware stack levels required when called:    2
 13290 ;; This function calls:
 13291 ;;		Nothing
 13292 ;; This function is called by:
 13293 ;;		_controle_shrc
 13294 ;; This function uses a non-reentrant model
 13295 ;;
 13296                           
 13297                           	psect	text57
 13298  002EC0                     __ptext57:
 13299                           	opt stack 0
 13300  002EC0                     _envia_dados_shrc:
 13301                           	opt stack 27
 13302                           
 13303                           ;incstack = 0
 13304                           ;envia_dados_shrc@data_to_shrc stored from wreg
 13305  002EC0  6E1B               	movwf	envia_dados_shrc@data_to_shrc,c
 13306                           
 13307                           ;SHRC.c: 64: unsigned char contador=0;
 13308  002EC2  0E00               	movlw	0
 13309  002EC4  6E1A               	movwf	envia_dados_shrc@contador,c
 13310                           
 13311                           ;SHRC.c: 65: (INTCONbits.GIE = 0);
 13312  002EC6  9EF2               	bcf	intcon,7,c	;volatile
 13313                           
 13314                           ;SHRC.c: 67: while(contador<=7)
 13315  002EC8  D018               	goto	l37
 13316  002ECA                     
 13317                           ;SHRC.c: 68: {
 13318                           ;SHRC.c: 69: if((data_to_shrc & 0x80) == 0)
 13319  002ECA  BE1B               	btfsc	envia_dados_shrc@data_to_shrc,7,c
 13320  002ECC  D002               	goto	l39
 13321                           
 13322                           ;SHRC.c: 70: {
 13323                           ;SHRC.c: 71: LATBbits.LATB7 = 0;
 13324  002ECE  9E8A               	bcf	3978,7,c	;volatile
 13325                           
 13326                           ;SHRC.c: 72: }
 13327  002ED0  D001               	goto	l40
 13328  002ED2                     l39:
 13329                           
 13330                           ;SHRC.c: 73: else
 13331                           ;SHRC.c: 74: {
 13332                           ;SHRC.c: 75: LATBbits.LATB7 = 1;
 13333  002ED2  8E8A               	bsf	3978,7,c	;volatile
 13334  002ED4                     l40:
 13335                           
 13336                           ;SHRC.c: 76: }
 13337                           ;SHRC.c: 77: data_to_shrc = data_to_shrc << 1;
 13338  002ED4  501B               	movf	envia_dados_shrc@data_to_shrc,w,c
 13339  002ED6  241B               	addwf	envia_dados_shrc@data_to_shrc,w,c
 13340  002ED8  6E1B               	movwf	envia_dados_shrc@data_to_shrc,c
 13341                           
 13342                           ;SHRC.c: 78: _delay((unsigned long)((30)*(20000000/4000000.0)));
 13343  002EDA  0E32               	movlw	50
 13344  002EDC                     u9197:
 13345  002EDC  2EE8               	decfsz	wreg,f,c
 13346  002EDE  D7FE               	bra	u9197
 13347                           
 13348                           ;SHRC.c: 79: LATBbits.LATB6 = 1;
 13349  002EE0  8C8A               	bsf	3978,6,c	;volatile
 13350                           
 13351                           ;SHRC.c: 80: _delay((unsigned long)((30)*(20000000/4000000.0)));
 13352  002EE2  0E32               	movlw	50
 13353  002EE4                     u9207:
 13354  002EE4  2EE8               	decfsz	wreg,f,c
 13355  002EE6  D7FE               	bra	u9207
 13356                           
 13357                           ;SHRC.c: 81: LATBbits.LATB7 = 0;
 13358  002EE8  9E8A               	bcf	3978,7,c	;volatile
 13359                           
 13360                           ;SHRC.c: 82: _delay((unsigned long)((30)*(20000000/4000000.0)));
 13361  002EEA  0E32               	movlw	50
 13362  002EEC                     u9217:
 13363  002EEC  2EE8               	decfsz	wreg,f,c
 13364  002EEE  D7FE               	bra	u9217
 13365                           
 13366                           ;SHRC.c: 83: LATBbits.LATB6 = 0;
 13367  002EF0  9C8A               	bcf	3978,6,c	;volatile
 13368                           
 13369                           ;SHRC.c: 84: _delay((unsigned long)((30)*(20000000/4000000.0)));
 13370  002EF2  0E32               	movlw	50
 13371  002EF4                     u9227:
 13372  002EF4  2EE8               	decfsz	wreg,f,c
 13373  002EF6  D7FE               	bra	u9227
 13374                           
 13375                           ;SHRC.c: 85: contador++;
 13376  002EF8  2A1A               	incf	envia_dados_shrc@contador,f,c
 13377  002EFA                     l37:
 13378  002EFA  0E07               	movlw	7
 13379  002EFC  641A               	cpfsgt	envia_dados_shrc@contador,c
 13380  002EFE  D7E5               	goto	l38
 13381                           
 13382                           ;SHRC.c: 86: }
 13383                           ;SHRC.c: 87: (INTCONbits.GIE = 1);
 13384  002F00  8EF2               	bsf	intcon,7,c	;volatile
 13385  002F02  0012               	return		;funcret
 13386  002F04                     __end_of_envia_dados_shrc:
 13387                           	opt stack 0
 13388                           tosu	equ	0xFFF
 13389                           tosh	equ	0xFFE
 13390                           tosl	equ	0xFFD
 13391                           pclath	equ	0xFFA
 13392                           tblptru	equ	0xFF8
 13393                           tblptrh	equ	0xFF7
 13394                           tblptrl	equ	0xFF6
 13395                           tablat	equ	0xFF5
 13396                           prodh	equ	0xFF4
 13397                           prodl	equ	0xFF3
 13398                           intcon	equ	0xFF2
 13399                           intcon2	equ	0xFF1
 13400                           intcon3	equ	0xFF0
 13401                           indf0	equ	0xFEF
 13402                           postinc0	equ	0xFEE
 13403                           fsr0h	equ	0xFEA
 13404                           fsr0l	equ	0xFE9
 13405                           wreg	equ	0xFE8
 13406                           indf1	equ	0xFE7
 13407                           postinc1	equ	0xFE6
 13408                           postdec1	equ	0xFE5
 13409                           fsr1h	equ	0xFE2
 13410                           fsr1l	equ	0xFE1
 13411                           indf2	equ	0xFDF
 13412                           postinc2	equ	0xFDE
 13413                           postdec2	equ	0xFDD
 13414                           plusw2	equ	0xFDB
 13415                           fsr2h	equ	0xFDA
 13416                           fsr2l	equ	0xFD9
 13417                           status	equ	0xFD8
 13418                           
 13419 ;; *************** function _ativa_latch_shrc *****************
 13420 ;; Defined at:
 13421 ;;		line 96 in file "bibliotecas/SHRC.c"
 13422 ;; Parameters:    Size  Location     Type
 13423 ;;		None
 13424 ;; Auto vars:     Size  Location     Type
 13425 ;;		None
 13426 ;; Return value:  Size  Location     Type
 13427 ;;                  1    wreg      void 
 13428 ;; Registers used:
 13429 ;;		wreg
 13430 ;; Tracked objects:
 13431 ;;		On entry : 0/0
 13432 ;;		On exit  : 0/0
 13433 ;;		Unchanged: 0/0
 13434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13435 ;;      Params:         0       0       0       0       0       0       0       0       0
 13436 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13437 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13438 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13439 ;;Total ram usage:        0 bytes
 13440 ;; Hardware stack levels used:    1
 13441 ;; Hardware stack levels required when called:    2
 13442 ;; This function calls:
 13443 ;;		Nothing
 13444 ;; This function is called by:
 13445 ;;		_controle_shrc
 13446 ;; This function uses a non-reentrant model
 13447 ;;
 13448                           
 13449                           	psect	text58
 13450  003190                     __ptext58:
 13451                           	opt stack 0
 13452  003190                     _ativa_latch_shrc:
 13453                           	opt stack 27
 13454                           
 13455                           ;SHRC.c: 99: LATBbits.LATB5 = 0;
 13456                           
 13457                           ;incstack = 0
 13458  003190  9A8A               	bcf	3978,5,c	;volatile
 13459                           
 13460                           ;SHRC.c: 100: _delay((unsigned long)((30)*(20000000/4000000.0)));
 13461  003192  0E32               	movlw	50
 13462  003194                     u9237:
 13463  003194  2EE8               	decfsz	wreg,f,c
 13464  003196  D7FE               	bra	u9237
 13465                           
 13466                           ;SHRC.c: 101: LATBbits.LATB5 = 1;
 13467  003198  8A8A               	bsf	3978,5,c	;volatile
 13468                           
 13469                           ;SHRC.c: 102: _delay((unsigned long)((60)*(20000000/4000000.0)));
 13470  00319A  0E64               	movlw	100
 13471  00319C                     u9247:
 13472  00319C  2EE8               	decfsz	wreg,f,c
 13473  00319E  D7FE               	bra	u9247
 13474                           
 13475                           ;SHRC.c: 103: LATBbits.LATB5 = 0;
 13476  0031A0  9A8A               	bcf	3978,5,c	;volatile
 13477  0031A2  0012               	return		;funcret
 13478  0031A4                     __end_of_ativa_latch_shrc:
 13479                           	opt stack 0
 13480                           tosu	equ	0xFFF
 13481                           tosh	equ	0xFFE
 13482                           tosl	equ	0xFFD
 13483                           pclath	equ	0xFFA
 13484                           tblptru	equ	0xFF8
 13485                           tblptrh	equ	0xFF7
 13486                           tblptrl	equ	0xFF6
 13487                           tablat	equ	0xFF5
 13488                           prodh	equ	0xFF4
 13489                           prodl	equ	0xFF3
 13490                           intcon	equ	0xFF2
 13491                           intcon2	equ	0xFF1
 13492                           intcon3	equ	0xFF0
 13493                           indf0	equ	0xFEF
 13494                           postinc0	equ	0xFEE
 13495                           fsr0h	equ	0xFEA
 13496                           fsr0l	equ	0xFE9
 13497                           wreg	equ	0xFE8
 13498                           indf1	equ	0xFE7
 13499                           postinc1	equ	0xFE6
 13500                           postdec1	equ	0xFE5
 13501                           fsr1h	equ	0xFE2
 13502                           fsr1l	equ	0xFE1
 13503                           indf2	equ	0xFDF
 13504                           postinc2	equ	0xFDE
 13505                           postdec2	equ	0xFDD
 13506                           plusw2	equ	0xFDB
 13507                           fsr2h	equ	0xFDA
 13508                           fsr2l	equ	0xFD9
 13509                           status	equ	0xFD8
 13510                           
 13511 ;; *************** function _isr *****************
 13512 ;; Defined at:
 13513 ;;		line 120 in file "main.c"
 13514 ;; Parameters:    Size  Location     Type
 13515 ;;		None
 13516 ;; Auto vars:     Size  Location     Type
 13517 ;;  cont            1   24[COMRAM] unsigned char 
 13518 ;; Return value:  Size  Location     Type
 13519 ;;                  1    wreg      void 
 13520 ;; Registers used:
 13521 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13522 ;; Tracked objects:
 13523 ;;		On entry : 0/0
 13524 ;;		On exit  : 0/0
 13525 ;;		Unchanged: 0/0
 13526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13527 ;;      Params:         0       0       0       0       0       0       0       0       0
 13528 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13529 ;;      Temps:         20       0       0       0       0       0       0       0       0
 13530 ;;      Totals:        21       0       0       0       0       0       0       0       0
 13531 ;;Total ram usage:       21 bytes
 13532 ;; Hardware stack levels used:    1
 13533 ;; Hardware stack levels required when called:    1
 13534 ;; This function calls:
 13535 ;;		_recebe_dado_uart
 13536 ;;		i2_write_timer_zero
 13537 ;; This function is called by:
 13538 ;;		Interrupt level 2
 13539 ;; This function uses a non-reentrant model
 13540 ;;
 13541                           
 13542                           	psect	intcode
 13543  000008                     __pintcode:
 13544                           	opt stack 0
 13545  000008                     _isr:
 13546                           	opt stack 16
 13547                           
 13548                           ;incstack = 0
 13549  000008  8246               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 13550  00000A  ED60  F011         	call	int_func,f	;refresh shadow registers
 13551                           tosu	equ	0xFFF
 13552                           tosh	equ	0xFFE
 13553                           tosl	equ	0xFFD
 13554                           pclath	equ	0xFFA
 13555                           tblptru	equ	0xFF8
 13556                           tblptrh	equ	0xFF7
 13557                           tblptrl	equ	0xFF6
 13558                           tablat	equ	0xFF5
 13559                           prodh	equ	0xFF4
 13560                           prodl	equ	0xFF3
 13561                           intcon	equ	0xFF2
 13562                           intcon2	equ	0xFF1
 13563                           intcon3	equ	0xFF0
 13564                           indf0	equ	0xFEF
 13565                           postinc0	equ	0xFEE
 13566                           fsr0h	equ	0xFEA
 13567                           fsr0l	equ	0xFE9
 13568                           wreg	equ	0xFE8
 13569                           indf1	equ	0xFE7
 13570                           postinc1	equ	0xFE6
 13571                           postdec1	equ	0xFE5
 13572                           fsr1h	equ	0xFE2
 13573                           fsr1l	equ	0xFE1
 13574                           indf2	equ	0xFDF
 13575                           postinc2	equ	0xFDE
 13576                           postdec2	equ	0xFDD
 13577                           plusw2	equ	0xFDB
 13578                           fsr2h	equ	0xFDA
 13579                           fsr2l	equ	0xFD9
 13580                           status	equ	0xFD8
 13581                           
 13582                           	psect	intcode_body
 13583  0022C0                     __pintcode_body:
 13584                           	opt stack 16
 13585  0022C0                     int_func:
 13586                           	opt stack 16
 13587  0022C0  0006               	pop		; remove dummy address from shadow register refresh
 13588  0022C2  CFFA F007          	movff	pclath,??_isr+2
 13589  0022C6  CFFB F008          	movff	pclatu,??_isr+3
 13590  0022CA  CFE9 F009          	movff	fsr0l,??_isr+4
 13591  0022CE  CFEA F00A          	movff	fsr0h,??_isr+5
 13592  0022D2  CFE1 F00B          	movff	fsr1l,??_isr+6
 13593  0022D6  CFE2 F00C          	movff	fsr1h,??_isr+7
 13594  0022DA  CFD9 F00D          	movff	fsr2l,??_isr+8
 13595  0022DE  CFDA F00E          	movff	fsr2h,??_isr+9
 13596  0022E2  CFF3 F00F          	movff	prodl,??_isr+10
 13597  0022E6  CFF4 F010          	movff	prodh,??_isr+11
 13598  0022EA  CFF6 F011          	movff	tblptrl,??_isr+12
 13599  0022EE  CFF7 F012          	movff	tblptrh,??_isr+13
 13600  0022F2  CFF8 F013          	movff	tblptru,??_isr+14
 13601  0022F6  CFF5 F014          	movff	tablat,??_isr+15
 13602  0022FA  C046  F015         	movff	btemp,??_isr+16
 13603  0022FE  C047  F016         	movff	btemp+1,??_isr+17
 13604  002302  C048  F017         	movff	btemp+2,??_isr+18
 13605  002306  C049  F018         	movff	btemp+3,??_isr+19
 13606                           
 13607                           ;main.c: 122: unsigned char cont;
 13608                           ;main.c: 125: if (PIE1bits.RCIE && PIR1bits.RCIF)
 13609  00230A  BA9D               	btfsc	3997,5,c	;volatile
 13610  00230C  AA9E               	btfss	3998,5,c	;volatile
 13611  00230E  D004               	goto	i2l466
 13612                           
 13613                           ;main.c: 126: {
 13614                           ;main.c: 127: data_uart_recebe = recebe_dado_uart();
 13615  002310  ECE4  F018         	call	_recebe_dado_uart	;wreg free
 13616  002314  6E40               	movwf	_data_uart_recebe,c
 13617                           
 13618                           ;main.c: 128: PIR1bits.RCIF = 0;
 13619  002316  9A9E               	bcf	3998,5,c	;volatile
 13620  002318                     i2l466:
 13621                           
 13622                           ;main.c: 129: }
 13623                           ;main.c: 132: unsigned char cont;
 13624                           ;main.c: 134: if (TMR0IF && T0IF)
 13625  002318  B4F2               	btfsc	intcon,2,c	;volatile
 13626  00231A  A4F2               	btfss	intcon,2,c	;volatile
 13627  00231C  D036               	goto	i2l467
 13628                           
 13629                           ;main.c: 135: {
 13630                           ;main.c: 136: INTCONbits.TMR0IF = 0;
 13631  00231E  94F2               	bcf	intcon,2,c	;volatile
 13632                           
 13633                           ;main.c: 137: sinaliza_int_timer = 1;
 13634  002320  0E01               	movlw	1
 13635  002322  6E3F               	movwf	_sinaliza_int_timer,c
 13636                           
 13637                           ;main.c: 139: for(cont= 0; cont<2;cont++)
 13638  002324  0E00               	movlw	0
 13639  002326  6E19               	movwf	isr@cont,c
 13640  002328                     i2l5502:
 13641  002328  0E01               	movlw	1
 13642  00232A  6419               	cpfsgt	isr@cont,c
 13643  00232C  D001               	goto	i2l468
 13644  00232E  D019               	goto	i2u584_40
 13645  002330                     i2l468:
 13646                           
 13647                           ;main.c: 140: {
 13648                           ;main.c: 141: if(tempo_tarefa[cont]>0) tempo_tarefa[cont]--;
 13649  002330  5019               	movf	isr@cont,w,c
 13650  002332  0D02               	mullw	2
 13651  002334  0E2D               	movlw	low _tempo_tarefa
 13652  002336  24F3               	addwf	prodl,w,c
 13653  002338  6ED9               	movwf	fsr2l,c
 13654  00233A  0E00               	movlw	high _tempo_tarefa
 13655  00233C  20F4               	addwfc	prodh,w,c
 13656  00233E  6EDA               	movwf	fsr2h,c
 13657  002340  50DE               	movf	postinc2,w,c
 13658  002342  10DE               	iorwf	postinc2,w,c
 13659  002344  B4D8               	btfsc	status,2,c
 13660  002346  D00B               	goto	i2l470
 13661  002348  5019               	movf	isr@cont,w,c
 13662  00234A  0D02               	mullw	2
 13663  00234C  0E2D               	movlw	low _tempo_tarefa
 13664  00234E  24F3               	addwf	prodl,w,c
 13665  002350  6ED9               	movwf	fsr2l,c
 13666  002352  0E00               	movlw	high _tempo_tarefa
 13667  002354  20F4               	addwfc	prodh,w,c
 13668  002356  6EDA               	movwf	fsr2h,c
 13669  002358  06DE               	decf	postinc2,f,c
 13670  00235A  0E00               	movlw	0
 13671  00235C  5ADD               	subwfb	postdec2,f,c
 13672  00235E                     i2l470:
 13673  00235E  2A19               	incf	isr@cont,f,c
 13674  002360  D7E3               	goto	i2l5502
 13675  002362                     i2u584_40:
 13676                           
 13677                           ;main.c: 142: }
 13678                           ;main.c: 145: if(tarefa_em_execucao == 1)
 13679  002362  043E               	decf	_tarefa_em_execucao,w,c	;volatile
 13680  002364  A4D8               	btfss	status,2,c
 13681  002366  D00B               	goto	i2l472
 13682                           
 13683                           ;main.c: 146: {
 13684                           ;main.c: 147: timeout_tarefa--;
 13685  002368  0637               	decf	_timeout_tarefa,f,c
 13686  00236A  A0D8               	btfss	status,0,c
 13687  00236C  0638               	decf	_timeout_tarefa+1,f,c
 13688                           
 13689                           ;main.c: 148: if(!timeout_tarefa)
 13690  00236E  5037               	movf	_timeout_tarefa,w,c
 13691  002370  1038               	iorwf	_timeout_tarefa+1,w,c
 13692  002372  A4D8               	btfss	status,2,c
 13693  002374  D004               	goto	i2l472
 13694                           
 13695                           ;main.c: 149: {
 13696                           ;main.c: 151: PCLATH = 0;
 13697  002376  0E00               	movlw	0
 13698  002378  6EFA               	movwf	pclath,c	;volatile
 13699                           
 13700                           ;main.c: 152: PCL = 0;
 13701  00237A  0E00               	movlw	0
 13702  00237C  6EF9               	movwf	pcl,c	;volatile
 13703  00237E                     i2l472:
 13704                           
 13705                           ;main.c: 153: }
 13706                           ;main.c: 154: }
 13707                           ;main.c: 157: write_timer_zero(0x0083);
 13708  00237E  0E00               	movlw	0
 13709  002380  6E02               	movwf	i2write_timer_zero@timer0+1,c
 13710  002382  0E83               	movlw	131
 13711  002384  6E01               	movwf	i2write_timer_zero@timer0,c
 13712  002386  ECDB  F018         	call	i2_write_timer_zero	;wreg free
 13713  00238A                     i2l467:
 13714                           
 13715                           ;main.c: 159: }
 13716                           ;main.c: 165: if (INT0IF && INT0IE)
 13717  00238A  B2F2               	btfsc	intcon,1,c	;volatile
 13718  00238C  A8F2               	btfss	intcon,4,c	;volatile
 13719  00238E  D001               	goto	i2l473
 13720                           
 13721                           ;main.c: 166: {
 13722                           ;main.c: 167: INT0IF = 0;
 13723  002390  92F2               	bcf	intcon,1,c	;volatile
 13724  002392                     i2l473:
 13725  002392  C018  F049         	movff	??_isr+19,btemp+3
 13726  002396  C017  F048         	movff	??_isr+18,btemp+2
 13727  00239A  C016  F047         	movff	??_isr+17,btemp+1
 13728  00239E  C015  F046         	movff	??_isr+16,btemp
 13729  0023A2  C014  FFF5         	movff	??_isr+15,tablat
 13730  0023A6  C013  FFF8         	movff	??_isr+14,tblptru
 13731  0023AA  C012  FFF7         	movff	??_isr+13,tblptrh
 13732  0023AE  C011  FFF6         	movff	??_isr+12,tblptrl
 13733  0023B2  C010  FFF4         	movff	??_isr+11,prodh
 13734  0023B6  C00F  FFF3         	movff	??_isr+10,prodl
 13735  0023BA  C00E  FFDA         	movff	??_isr+9,fsr2h
 13736  0023BE  C00D  FFD9         	movff	??_isr+8,fsr2l
 13737  0023C2  C00C  FFE2         	movff	??_isr+7,fsr1h
 13738  0023C6  C00B  FFE1         	movff	??_isr+6,fsr1l
 13739  0023CA  C00A  FFEA         	movff	??_isr+5,fsr0h
 13740  0023CE  C009  FFE9         	movff	??_isr+4,fsr0l
 13741  0023D2  C008  FFFB         	movff	??_isr+3,pclatu
 13742  0023D6  C007  FFFA         	movff	??_isr+2,pclath
 13743  0023DA  9246               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 13744  0023DC  0011               	retfie		f
 13745  0023DE                     __end_of_isr:
 13746                           	opt stack 0
 13747                           tosu	equ	0xFFF
 13748                           tosh	equ	0xFFE
 13749                           tosl	equ	0xFFD
 13750                           pclatu	equ	0xFFB
 13751                           pclath	equ	0xFFA
 13752                           pcl	equ	0xFF9
 13753                           tblptru	equ	0xFF8
 13754                           tblptrh	equ	0xFF7
 13755                           tblptrl	equ	0xFF6
 13756                           tablat	equ	0xFF5
 13757                           prodh	equ	0xFF4
 13758                           prodl	equ	0xFF3
 13759                           intcon	equ	0xFF2
 13760                           intcon2	equ	0xFF1
 13761                           intcon3	equ	0xFF0
 13762                           indf0	equ	0xFEF
 13763                           postinc0	equ	0xFEE
 13764                           fsr0h	equ	0xFEA
 13765                           fsr0l	equ	0xFE9
 13766                           wreg	equ	0xFE8
 13767                           indf1	equ	0xFE7
 13768                           postinc1	equ	0xFE6
 13769                           postdec1	equ	0xFE5
 13770                           fsr1h	equ	0xFE2
 13771                           fsr1l	equ	0xFE1
 13772                           indf2	equ	0xFDF
 13773                           postinc2	equ	0xFDE
 13774                           postdec2	equ	0xFDD
 13775                           plusw2	equ	0xFDB
 13776                           fsr2h	equ	0xFDA
 13777                           fsr2l	equ	0xFD9
 13778                           status	equ	0xFD8
 13779                           
 13780 ;; *************** function i2_write_timer_zero *****************
 13781 ;; Defined at:
 13782 ;;		line 143 in file "bibliotecas/hardware.c"
 13783 ;; Parameters:    Size  Location     Type
 13784 ;;  timer0          2    0[COMRAM] unsigned int 
 13785 ;; Auto vars:     Size  Location     Type
 13786 ;;  write_timer_    2    2[COMRAM] struct Timers
 13787 ;; Return value:  Size  Location     Type
 13788 ;;                  1    wreg      void 
 13789 ;; Registers used:
 13790 ;;		None
 13791 ;; Tracked objects:
 13792 ;;		On entry : 0/0
 13793 ;;		On exit  : 0/0
 13794 ;;		Unchanged: 0/0
 13795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13796 ;;      Params:         2       0       0       0       0       0       0       0       0
 13797 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13798 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13799 ;;      Totals:         4       0       0       0       0       0       0       0       0
 13800 ;;Total ram usage:        4 bytes
 13801 ;; Hardware stack levels used:    1
 13802 ;; This function calls:
 13803 ;;		Nothing
 13804 ;; This function is called by:
 13805 ;;		_isr
 13806 ;; This function uses a non-reentrant model
 13807 ;;
 13808                           
 13809                           	psect	text60
 13810  0031B6                     __ptext60:
 13811                           	opt stack 0
 13812  0031B6                     i2_write_timer_zero:
 13813                           	opt stack 16
 13814                           
 13815                           ;hardware.c: 145: union Timers timer;
 13816                           ;hardware.c: 147: timer.lt = timer0;
 13817                           
 13818                           ;incstack = 0
 13819  0031B6  C001  F003         	movff	i2write_timer_zero@timer0,i2write_timer_zero@timer
 13820  0031BA  C002  F004         	movff	i2write_timer_zero@timer0+1,i2write_timer_zero@timer+1
 13821                           
 13822                           ;hardware.c: 149: TMR0H = timer.bt[1];
 13823  0031BE  C004  FFD7         	movff	i2write_timer_zero@timer+1,4055	;volatile
 13824                           
 13825                           ;hardware.c: 150: TMR0L = timer.bt[0];
 13826  0031C2  C003  FFD6         	movff	i2write_timer_zero@timer,4054	;volatile
 13827  0031C6  0012               	return		;funcret
 13828  0031C8                     __end_ofi2_write_timer_zero:
 13829                           	opt stack 0
 13830                           tosu	equ	0xFFF
 13831                           tosh	equ	0xFFE
 13832                           tosl	equ	0xFFD
 13833                           pclatu	equ	0xFFB
 13834                           pclath	equ	0xFFA
 13835                           pcl	equ	0xFF9
 13836                           tblptru	equ	0xFF8
 13837                           tblptrh	equ	0xFF7
 13838                           tblptrl	equ	0xFF6
 13839                           tablat	equ	0xFF5
 13840                           prodh	equ	0xFF4
 13841                           prodl	equ	0xFF3
 13842                           intcon	equ	0xFF2
 13843                           intcon2	equ	0xFF1
 13844                           intcon3	equ	0xFF0
 13845                           indf0	equ	0xFEF
 13846                           postinc0	equ	0xFEE
 13847                           fsr0h	equ	0xFEA
 13848                           fsr0l	equ	0xFE9
 13849                           wreg	equ	0xFE8
 13850                           indf1	equ	0xFE7
 13851                           postinc1	equ	0xFE6
 13852                           postdec1	equ	0xFE5
 13853                           fsr1h	equ	0xFE2
 13854                           fsr1l	equ	0xFE1
 13855                           indf2	equ	0xFDF
 13856                           postinc2	equ	0xFDE
 13857                           postdec2	equ	0xFDD
 13858                           plusw2	equ	0xFDB
 13859                           fsr2h	equ	0xFDA
 13860                           fsr2l	equ	0xFD9
 13861                           status	equ	0xFD8
 13862                           
 13863 ;; *************** function _recebe_dado_uart *****************
 13864 ;; Defined at:
 13865 ;;		line 138 in file "bibliotecas/uart.c"
 13866 ;; Parameters:    Size  Location     Type
 13867 ;;		None
 13868 ;; Auto vars:     Size  Location     Type
 13869 ;;		None
 13870 ;; Return value:  Size  Location     Type
 13871 ;;                  1    wreg      unsigned char 
 13872 ;; Registers used:
 13873 ;;		wreg, status,2
 13874 ;; Tracked objects:
 13875 ;;		On entry : 0/0
 13876 ;;		On exit  : 0/0
 13877 ;;		Unchanged: 0/0
 13878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13879 ;;      Params:         0       0       0       0       0       0       0       0       0
 13880 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13881 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13882 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13883 ;;Total ram usage:        0 bytes
 13884 ;; Hardware stack levels used:    1
 13885 ;; This function calls:
 13886 ;;		Nothing
 13887 ;; This function is called by:
 13888 ;;		_isr
 13889 ;;		_recebe_string_uart
 13890 ;; This function uses a non-reentrant model
 13891 ;;
 13892                           
 13893                           	psect	text61
 13894  0031C8                     __ptext61:
 13895                           	opt stack 0
 13896  0031C8                     _recebe_dado_uart:
 13897                           	opt stack 16
 13898                           
 13899                           ;uart.c: 140: while(RCIF==0);
 13900                           
 13901                           ;incstack = 0
 13902  0031C8  AA9E               	btfss	3998,5,c	;volatile
 13903  0031CA  D7FE               	goto	_recebe_dado_uart
 13904                           
 13905                           ;uart.c: 141: if(RCSTAbits.OERR)
 13906  0031CC  A2AB               	btfss	4011,1,c	;volatile
 13907  0031CE  D003               	goto	i2l348
 13908                           
 13909                           ;uart.c: 142: {
 13910                           ;uart.c: 143: CREN = 0;
 13911  0031D0  98AB               	bcf	4011,4,c	;volatile
 13912                           
 13913                           ;uart.c: 144: __nop();
 13914  0031D2  F000               	nop	
 13915                           
 13916                           ;uart.c: 145: CREN=1;
 13917  0031D4  88AB               	bsf	4011,4,c	;volatile
 13918  0031D6                     i2l348:
 13919                           
 13920                           ;uart.c: 146: }
 13921                           ;uart.c: 147: return(RCREG);
 13922  0031D6  50AE               	movf	4014,w,c	;volatile
 13923  0031D8  0012               	return	
 13924  0031DA                     __end_of_recebe_dado_uart:
 13925                           	opt stack 0
 13926                           tosu	equ	0xFFF
 13927                           tosh	equ	0xFFE
 13928                           tosl	equ	0xFFD
 13929                           pclatu	equ	0xFFB
 13930                           pclath	equ	0xFFA
 13931                           pcl	equ	0xFF9
 13932                           tblptru	equ	0xFF8
 13933                           tblptrh	equ	0xFF7
 13934                           tblptrl	equ	0xFF6
 13935                           tablat	equ	0xFF5
 13936                           prodh	equ	0xFF4
 13937                           prodl	equ	0xFF3
 13938                           intcon	equ	0xFF2
 13939                           intcon2	equ	0xFF1
 13940                           intcon3	equ	0xFF0
 13941                           indf0	equ	0xFEF
 13942                           postinc0	equ	0xFEE
 13943                           fsr0h	equ	0xFEA
 13944                           fsr0l	equ	0xFE9
 13945                           wreg	equ	0xFE8
 13946                           indf1	equ	0xFE7
 13947                           postinc1	equ	0xFE6
 13948                           postdec1	equ	0xFE5
 13949                           fsr1h	equ	0xFE2
 13950                           fsr1l	equ	0xFE1
 13951                           indf2	equ	0xFDF
 13952                           postinc2	equ	0xFDE
 13953                           postdec2	equ	0xFDD
 13954                           plusw2	equ	0xFDB
 13955                           fsr2h	equ	0xFDA
 13956                           fsr2l	equ	0xFD9
 13957                           status	equ	0xFD8
 13958                           tosu	equ	0xFFF
 13959                           tosh	equ	0xFFE
 13960                           tosl	equ	0xFFD
 13961                           pclatu	equ	0xFFB
 13962                           pclath	equ	0xFFA
 13963                           pcl	equ	0xFF9
 13964                           tblptru	equ	0xFF8
 13965                           tblptrh	equ	0xFF7
 13966                           tblptrl	equ	0xFF6
 13967                           tablat	equ	0xFF5
 13968                           prodh	equ	0xFF4
 13969                           prodl	equ	0xFF3
 13970                           intcon	equ	0xFF2
 13971                           intcon2	equ	0xFF1
 13972                           intcon3	equ	0xFF0
 13973                           indf0	equ	0xFEF
 13974                           postinc0	equ	0xFEE
 13975                           fsr0h	equ	0xFEA
 13976                           fsr0l	equ	0xFE9
 13977                           wreg	equ	0xFE8
 13978                           indf1	equ	0xFE7
 13979                           postinc1	equ	0xFE6
 13980                           postdec1	equ	0xFE5
 13981                           fsr1h	equ	0xFE2
 13982                           fsr1l	equ	0xFE1
 13983                           indf2	equ	0xFDF
 13984                           postinc2	equ	0xFDE
 13985                           postdec2	equ	0xFDD
 13986                           plusw2	equ	0xFDB
 13987                           fsr2h	equ	0xFDA
 13988                           fsr2l	equ	0xFD9
 13989                           status	equ	0xFD8
 13990                           
 13991                           	psect	text62
 13992  000000                     __ptext62:
 13993                           	opt stack 0
 13994                           tosu	equ	0xFFF
 13995                           tosh	equ	0xFFE
 13996                           tosl	equ	0xFFD
 13997                           pclatu	equ	0xFFB
 13998                           pclath	equ	0xFFA
 13999                           pcl	equ	0xFF9
 14000                           tblptru	equ	0xFF8
 14001                           tblptrh	equ	0xFF7
 14002                           tblptrl	equ	0xFF6
 14003                           tablat	equ	0xFF5
 14004                           prodh	equ	0xFF4
 14005                           prodl	equ	0xFF3
 14006                           intcon	equ	0xFF2
 14007                           intcon2	equ	0xFF1
 14008                           intcon3	equ	0xFF0
 14009                           indf0	equ	0xFEF
 14010                           postinc0	equ	0xFEE
 14011                           fsr0h	equ	0xFEA
 14012                           fsr0l	equ	0xFE9
 14013                           wreg	equ	0xFE8
 14014                           indf1	equ	0xFE7
 14015                           postinc1	equ	0xFE6
 14016                           postdec1	equ	0xFE5
 14017                           fsr1h	equ	0xFE2
 14018                           fsr1l	equ	0xFE1
 14019                           indf2	equ	0xFDF
 14020                           postinc2	equ	0xFDE
 14021                           postdec2	equ	0xFDD
 14022                           plusw2	equ	0xFDB
 14023                           fsr2h	equ	0xFDA
 14024                           fsr2l	equ	0xFD9
 14025                           status	equ	0xFD8
 14026                           
 14027                           	psect	rparam
 14028  0000                     tosu	equ	0xFFF
 14029                           tosh	equ	0xFFE
 14030                           tosl	equ	0xFFD
 14031                           pclatu	equ	0xFFB
 14032                           pclath	equ	0xFFA
 14033                           pcl	equ	0xFF9
 14034                           tblptru	equ	0xFF8
 14035                           tblptrh	equ	0xFF7
 14036                           tblptrl	equ	0xFF6
 14037                           tablat	equ	0xFF5
 14038                           prodh	equ	0xFF4
 14039                           prodl	equ	0xFF3
 14040                           intcon	equ	0xFF2
 14041                           intcon2	equ	0xFF1
 14042                           intcon3	equ	0xFF0
 14043                           indf0	equ	0xFEF
 14044                           postinc0	equ	0xFEE
 14045                           fsr0h	equ	0xFEA
 14046                           fsr0l	equ	0xFE9
 14047                           wreg	equ	0xFE8
 14048                           indf1	equ	0xFE7
 14049                           postinc1	equ	0xFE6
 14050                           postdec1	equ	0xFE5
 14051                           fsr1h	equ	0xFE2
 14052                           fsr1l	equ	0xFE1
 14053                           indf2	equ	0xFDF
 14054                           postinc2	equ	0xFDE
 14055                           postdec2	equ	0xFDD
 14056                           plusw2	equ	0xFDB
 14057                           fsr2h	equ	0xFDA
 14058                           fsr2l	equ	0xFD9
 14059                           status	equ	0xFD8
 14060                           
 14061                           	psect	temp
 14062  000046                     btemp:
 14063                           	opt stack 0
 14064  000046                     	ds	1
 14065  0000                     int$flags	set	btemp
 14066  0000                     wtemp6	set	btemp+1
 14067                           tosu	equ	0xFFF
 14068                           tosh	equ	0xFFE
 14069                           tosl	equ	0xFFD
 14070                           pclatu	equ	0xFFB
 14071                           pclath	equ	0xFFA
 14072                           pcl	equ	0xFF9
 14073                           tblptru	equ	0xFF8
 14074                           tblptrh	equ	0xFF7
 14075                           tblptrl	equ	0xFF6
 14076                           tablat	equ	0xFF5
 14077                           prodh	equ	0xFF4
 14078                           prodl	equ	0xFF3
 14079                           intcon	equ	0xFF2
 14080                           intcon2	equ	0xFF1
 14081                           intcon3	equ	0xFF0
 14082                           indf0	equ	0xFEF
 14083                           postinc0	equ	0xFEE
 14084                           fsr0h	equ	0xFEA
 14085                           fsr0l	equ	0xFE9
 14086                           wreg	equ	0xFE8
 14087                           indf1	equ	0xFE7
 14088                           postinc1	equ	0xFE6
 14089                           postdec1	equ	0xFE5
 14090                           fsr1h	equ	0xFE2
 14091                           fsr1l	equ	0xFE1
 14092                           indf2	equ	0xFDF
 14093                           postinc2	equ	0xFDE
 14094                           postdec2	equ	0xFDD
 14095                           plusw2	equ	0xFDB
 14096                           fsr2h	equ	0xFDA
 14097                           fsr2l	equ	0xFD9
 14098                           status	equ	0xFD8


Data Sizes:
    Strings     166
    Constant    213
    Data        24
    BSS         652
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     44      69
    BANK0           160    111     119
    BANK1           256    108     239
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    pf_open@path	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_8(CODE[10]), 

    rd	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_lcd@texto(COMRAM[7]), escreve_inteiro_uart@valor_final(COMRAM[7]), 

    pf_readdir@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    pf_opendir@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    pf_write@bw	PTR unsigned int  size(2) Largest target is 2
		 -> SDCard@br(BANK1[2]), 

    pf_write@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK1[42]), 

    pf_write@buff	PTR const void  size(2) Largest target is 8
		 -> STR_9(CODE[8]), 

    pf_write@p	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_9(CODE[8]), 

    pf_read$2100	PTR unsigned char  size(2) Largest target is 32
		 -> NULL(NULL[0]), data_buffer_32(BANK1[32]), 

    pf_read@br	PTR unsigned int  size(2) Largest target is 2
		 -> SDCard@br(BANK1[2]), 

    pf_read@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK1[42]), 

    pf_read@buff	PTR void  size(2) Largest target is 32
		 -> data_buffer_32(BANK1[32]), 

    pf_read@rbuff	PTR unsigned char  size(2) Largest target is 32
		 -> data_buffer_32(BANK1[32]), 

    pf_open@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK1[42]), 

    dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    pf_mount@fs	PTR struct . size(2) Largest target is 42
		 -> SDCard@fs(BANK1[42]), 

    check_fs@buf	PTR unsigned char  size(2) Largest target is 36
		 -> pf_mount@buf(BANK0[36]), 

    follow_path@dir	PTR unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK1[32]), 

    follow_path@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    follow_path@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK1[16]), 

    follow_path@path	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_16(CODE[10]), 

    get_fileinfo@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    create_name@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> follow_path@path(BANK0[2]), 

    create_name@p	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_16(CODE[10]), 

    create_name@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    create_name@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK1[16]), 

    create_name@sfn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    dir_read@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    dir_find@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    dir_find@dir	PTR unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK1[32]), 

    dir_find@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK1[16]), 

    dir_next@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    dir_next@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK1[16]), 

    dir_next@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK1[42]), 

    S1789$fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    dir_rewind@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    dir_rewind@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK1[16]), 

    dir_rewind@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK1[42]), 

    get_clust@dir	PTR unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK1[32]), 

    get_clust@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK1[42]), 

    clust2sect@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK1[42]), 

    FatFs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK1[42]), 

    get_fat@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK1[42]), 

    mem_cmp@src	PTR const void  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    mem_cmp@s	PTR const unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    mem_cmp@dst	PTR const void  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK1[32]), 

    mem_cmp@d	PTR const unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK1[32]), 

    mem_set@dst	PTR void  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    mem_set@d	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    disk_writep@wr	PTR const unsigned char  size(3) Largest target is 32767
		 -> ROM(CODE[32767]), STR_9(CODE[8]), 

    disk_readp@rd	PTR unsigned char  size(2) Largest target is 36
		 -> pf_readdir@dir(COMRAM[32]), pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK1[32]), pf_mount@buf(BANK0[36]), 
		 -> NULL(NULL[0]), get_fat@buf(BANK0[4]), data_buffer_32(BANK1[32]), 

    escreve_frase_ram_lcd@buffer	PTR unsigned char  size(2) Largest target is 17
		 -> STR_15(CODE[9]), STR_14(CODE[14]), STR_13(CODE[12]), escreve_inteiro_lcd@texto(COMRAM[7]), 
		 -> STR_12(CODE[14]), STR_11(CODE[13]), STR_10(CODE[17]), STR_7(CODE[17]), 
		 -> STR_6(CODE[15]), STR_5(CODE[14]), STR_4(CODE[14]), mensagem_inicial@msg_dois(BANK0[17]), 
		 -> mensagem_inicial@msg_linha_um(BANK0[17]), leitura_chave@pos_ignicao_on(COMRAM[17]), leitura_chave@pos_ignicao_crank(COMRAM[17]), leitura_chave@pos_ignicao_off(COMRAM[17]), 
		 -> STR_2(CODE[6]), STR_1(CODE[17]), 

    p_tarefas	PTR FTN()void [2] size(2) Largest target is 1
		 -> SDCard(), acende_led4(), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_lcd@texto(COMRAM[7]), escreve_inteiro_uart@valor_final(COMRAM[7]), 


Critical Paths under _main in COMRAM

    _mensagem_inicial->_posicao_cursor_lcd
    _init_lcd->_escreve_cmd_lcd
    _config_timer_zero->_write_timer_zero
    _inicializa_uart->_configura_baudrate_uart
    _configura_baudrate_uart->___aldiv
    _inicializa_SPI->_posicao_cursor_lcd
    _acende_led4->_shrc_apaga_bit
    _acende_led4->_shrc_seta_bit
    _disk_writep->_command
    _pf_read->_disk_readp
    _follow_path->_create_name
    _dir_find->_disk_readp
    _dir_rewind->_clust2sect
    _get_fat->_disk_readp
    _clust2sect->___lmul
    _create_name->_mem_set
    _pf_mount->_disk_readp
    _disk_initialize->_reset
    _reset->_command
    _escreve_cmd_lcd->_delay
    _check_fs->_disk_readp
    _disk_readp->_command
    _response->_recebe_dado_SPI
    _recebe_dado_SPI->_posicao_cursor_lcd
    _posicao_cursor_lcd->_endereco_cursor_lcd
    _endereco_cursor_lcd->_delay
    _escreve_frase_ram_lcd->_escreve_caractere_lcd
    _escreve_caractere_lcd->_delay
    _proceed->_WriteSPI_
    _dummy_clocks->_WriteSPI_
    _command->_WriteSPI_
    _controle_shrc->_envia_dados_shrc

Critical Paths under _isr in COMRAM

    _isr->i2_write_timer_zero

Critical Paths under _main in BANK0

    _main->_escalonador
    _inicializa_uart->_configura_baudrate_uart
    _SDCard->_pf_open
    _pf_write->_get_fat
    _pf_read->_get_fat
    _pf_open->_follow_path
    _follow_path->_dir_find
    _dir_find->_dir_next
    _dir_rewind->_clust2sect
    _dir_next->_get_fat
    _get_fat->_disk_readp
    _pf_mount->_check_fs
    _check_fs->_disk_readp

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _escalonador->_SDCard
    _SDCard->_pf_open

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  162495
                      _controle_shrc
                        _escalonador
                     _inicializa_SPI
                    _inicializa_shrc
                 _inicializa_tarefas
                    _inicializa_uart
                      _init_hardware
                           _init_lcd
                   _mensagem_inicial
 ---------------------------------------------------------------------------------
 (1) _mensagem_inicial                                    36    36      0    4843
                                             31 COMRAM     2     2      0
                                              0 BANK0     34    34      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0     613
                                             28 COMRAM     1     1      0
                              _delay
                    _escreve_cmd_lcd
 ---------------------------------------------------------------------------------
 (1) _init_hardware                                        0     0      0     195
                  _config_timer_dois
                  _config_timer_zero
                     _inicializa_adc
                     _init_interrupt
                     _init_oscilador
                         _init_ports
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_oscilador                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _inicializa_adc                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _config_timer_zero                                    0     0      0     195
                   _write_timer_zero
 ---------------------------------------------------------------------------------
 (3) _write_timer_zero                                     4     2      2     195
                                             25 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _config_timer_dois                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_uart                                      0     0      0    1118
            _configura_baudrate_uart
 ---------------------------------------------------------------------------------
 (2) _configura_baudrate_uart                             14    10      4    1118
                                             39 COMRAM     4     0      4
                                              0 BANK0     10    10      0
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     805
                                             25 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _inicializa_tarefas                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_shrc                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_SPI                                       1     1      0    4794
                                             31 COMRAM     1     1      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _escalonador                                          3     3      0  150887
                                            108 BANK0      3     3      0
                             _SDCard *
                        _acende_led4 *
 ---------------------------------------------------------------------------------
 (2) _acende_led4                                          0     0      0      44
                     _shrc_apaga_bit
                      _shrc_seta_bit
 ---------------------------------------------------------------------------------
 (3) _shrc_seta_bit                                        3     3      0      22
                                             25 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _shrc_apaga_bit                                       3     3      0      22
                                             25 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _SDCard                                              45    45      0  150620
                                             63 BANK1     45    45      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                           _pf_mount
                            _pf_open
                            _pf_read
                           _pf_write
                 _posicao_cursor_lcd
                            _proceed
                           _readover
 ---------------------------------------------------------------------------------
 (3) _readover                                             2     0      2      98
                                             25 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _pf_write                                            33    27      6   24942
                                             52 BANK0     33    27      6
                         _clust2sect
                        _disk_writep
                            _get_fat
 ---------------------------------------------------------------------------------
 (4) _disk_writep                                         17    10      7    7796
                                             34 COMRAM     7     0      7
                                              0 BANK0      9     9      0
                          _WriteSPI_
                            _command
                       _dummy_clocks
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (3) _pf_read                                             36    30      6   29387
                                             52 BANK0     36    30      6
                         _clust2sect
                         _disk_readp
                            _get_fat
 ---------------------------------------------------------------------------------
 (3) _pf_open                                             87    85      2   38347
                                             84 BANK0     24    22      2
                                              0 BANK1     63    63      0
                        _follow_path
                          _get_clust
 ---------------------------------------------------------------------------------
 (4) _follow_path                                          7     1      6   37005
                                             77 BANK0      7     1      6
                        _create_name
                           _dir_find
                         _dir_rewind
                          _get_clust
 ---------------------------------------------------------------------------------
 (4) _get_clust                                           18    14      4     471
                                             25 COMRAM    18    14      4
 ---------------------------------------------------------------------------------
 (5) _dir_find                                             8     4      4   31731
                                             69 BANK0      8     4      4
                           _dir_next
                         _dir_rewind
                         _disk_readp
                            _mem_cmp
 ---------------------------------------------------------------------------------
 (6) _mem_cmp                                             15     9      6     468
                                             25 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (5) _dir_rewind                                          16    14      2    2027
                                              5 BANK0     16    14      2
                         _clust2sect
 ---------------------------------------------------------------------------------
 (6) _dir_next                                            17    15      2   16127
                                             52 BANK0     17    15      2
                         _clust2sect
                            _get_fat
 ---------------------------------------------------------------------------------
 (4) _get_fat                                             40    36      4   14041
                                             12 BANK0     40    36      4
                         _disk_readp
 ---------------------------------------------------------------------------------
 (4) _clust2sect                                          11     7      4    1187
                                             37 COMRAM     6     2      4
                                              0 BANK0      5     5      0
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) _create_name                                         20    16      4    1682
                                             33 COMRAM    11     7      4
                                              0 BANK0      9     9      0
                            _mem_set
 ---------------------------------------------------------------------------------
 (6) _mem_set                                              8     2      6     400
                                             25 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (3) _pf_mount                                            77    75      2   52349
                                             22 BANK0     77    75      2
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                         _disk_readp
 ---------------------------------------------------------------------------------
 (4) _disk_initialize                                     10    10      0   23126
                                             39 COMRAM     2     2      0
                                              0 BANK0      8     8      0
                            _command
                       _dummy_clocks
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                              _reset
                           _response
 ---------------------------------------------------------------------------------
 (5) _reset                                                5     5      0   11198
                                             34 COMRAM     5     5      0
                            _command
                       _dummy_clocks
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (2) _escreve_cmd_lcd                                      1     1      0     477
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _check_fs                                            10     4      6   13181
                                             12 BANK0     10     4      6
                         _disk_readp
 ---------------------------------------------------------------------------------
 (5) _disk_readp                                          25    15     10   12449
                                             34 COMRAM    10     0     10
                                              0 BANK0     12    12      0
                            _command
                       _dummy_clocks
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (6) _response                                             1     1      0    4323
                                             32 COMRAM     1     1      0
                    _recebe_dado_SPI
 ---------------------------------------------------------------------------------
 (7) _recebe_dado_SPI                                      1     1      0    4289
                                             31 COMRAM     1     1      0
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (2) _posicao_cursor_lcd                                   3     2      1    2217
                                             28 COMRAM     3     2      1
                _endereco_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _endereco_cursor_lcd                                  1     1      0     353
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _escreve_frase_ram_lcd                                2     0      2    2069
                                             28 COMRAM     2     0      2
              _escreve_caractere_lcd
 ---------------------------------------------------------------------------------
 (3) _escreve_caractere_lcd                                1     1      0     384
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                2     2      0     136
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _proceed                                              0     0      0      37
                          _WriteSPI_
 ---------------------------------------------------------------------------------
 (6) _dummy_clocks                                         5     5      0     105
                                             27 COMRAM     5     5      0
                          _WriteSPI_
 ---------------------------------------------------------------------------------
 (6) _command                                              7     2      5    2339
                                             27 COMRAM     7     2      5
                          _WriteSPI_
 ---------------------------------------------------------------------------------
 (4) _WriteSPI_                                            2     2      0      37
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     576
                                             25 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     564
                                             25 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _controle_shrc                                        0     0      0      45
                   _ativa_latch_shrc
                   _envia_dados_shrc
 ---------------------------------------------------------------------------------
 (2) _envia_dados_shrc                                     2     2      0      45
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _ativa_latch_shrc                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (14) _isr                                                21    21      0     183
                                              4 COMRAM    21    21      0
                   _recebe_dado_uart
                 i2_write_timer_zero
 ---------------------------------------------------------------------------------
 (15) i2_write_timer_zero                                  4     2      2      93
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (15) _recebe_dado_uart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _controle_shrc
     _ativa_latch_shrc
     _envia_dados_shrc
   _escalonador
     _SDCard *
       _escreve_cmd_lcd
         _delay
       _escreve_frase_ram_lcd
         _escreve_caractere_lcd
           _delay
       _pf_mount
         ___lldiv
         ___lmul
         _check_fs
           _disk_readp
             _command
               _WriteSPI_
             _dummy_clocks
               _WriteSPI_
             _proceed
               _WriteSPI_
             _response
               _recebe_dado_SPI
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
         _disk_initialize
           _command
             _WriteSPI_
           _dummy_clocks
             _WriteSPI_
           _escreve_cmd_lcd
             _delay
           _escreve_frase_ram_lcd
             _escreve_caractere_lcd
               _delay
           _posicao_cursor_lcd
             _endereco_cursor_lcd
               _delay
           _proceed
             _WriteSPI_
           _reset
             _command
               _WriteSPI_
             _dummy_clocks
               _WriteSPI_
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _proceed
               _WriteSPI_
             _response
               _recebe_dado_SPI
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
           _response
             _recebe_dado_SPI
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
         _disk_readp
           _command
             _WriteSPI_
           _dummy_clocks
             _WriteSPI_
           _proceed
             _WriteSPI_
           _response
             _recebe_dado_SPI
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
       _pf_open
         _follow_path
           _create_name
             _mem_set
           _dir_find
             _dir_next
               _clust2sect
                 ___lmul
               _get_fat
                 _disk_readp
                   _command
                     _WriteSPI_
                   _dummy_clocks
                     _WriteSPI_
                   _proceed
                     _WriteSPI_
                   _response
                     _recebe_dado_SPI
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
             _dir_rewind
               _clust2sect
                 ___lmul
             _disk_readp
               _command
                 _WriteSPI_
               _dummy_clocks
                 _WriteSPI_
               _proceed
                 _WriteSPI_
               _response
                 _recebe_dado_SPI
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
             _mem_cmp
           _dir_rewind
             _clust2sect
               ___lmul
           _get_clust
         _get_clust
       _pf_read
         _clust2sect
           ___lmul
         _disk_readp
           _command
             _WriteSPI_
           _dummy_clocks
             _WriteSPI_
           _proceed
             _WriteSPI_
           _response
             _recebe_dado_SPI
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
         _get_fat
           _disk_readp
             _command
               _WriteSPI_
             _dummy_clocks
               _WriteSPI_
             _proceed
               _WriteSPI_
             _response
               _recebe_dado_SPI
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
       _pf_write
         _clust2sect
           ___lmul
         _disk_writep
           _WriteSPI_
           _command
             _WriteSPI_
           _dummy_clocks
             _WriteSPI_
           _proceed
             _WriteSPI_
           _response
             _recebe_dado_SPI
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
         _get_fat
           _disk_readp
             _command
               _WriteSPI_
             _dummy_clocks
               _WriteSPI_
             _proceed
               _WriteSPI_
             _response
               _recebe_dado_SPI
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
       _posicao_cursor_lcd
         _endereco_cursor_lcd
           _delay
       _proceed
         _WriteSPI_
       _readover
     _acende_led4 *
       _shrc_apaga_bit
       _shrc_seta_bit
   _inicializa_SPI
     _escreve_cmd_lcd
       _delay
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay
   _inicializa_shrc
   _inicializa_tarefas
   _inicializa_uart
     _configura_baudrate_uart
       ___aldiv
   _init_hardware
     _config_timer_dois
     _config_timer_zero
       _write_timer_zero
     _inicializa_adc
     _init_interrupt
     _init_oscilador
     _init_ports
   _init_lcd
     _delay
     _escreve_cmd_lcd
       _delay
   _mensagem_inicial
     _escreve_cmd_lcd
       _delay
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay

 _isr (ROOT)
   _recebe_dado_uart
   i2_write_timer_zero

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     200      21       25.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     6C      EF       7       93.4%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     6F      77       5       74.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2C      45       1       73.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1AB      20        0.0%
DATA                 0      0     3AB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Jan 18 20:10:31 2022

        __end_of_mensagem_inicial 2B18                       get_fat@clst 006C  
                               _s 0041                      create_name@c 0068  
                    create_name@d 0060                      create_name@i 0067  
                    create_name@p 0061            __size_of_controle_shrc 000C  
                     _SSPSTATbits 000FC7                  ??_init_interrupt 001A  
                              l12 2FC6                                l13 2FB8  
                              l40 2ED4                                l37 2EFA  
                              l38 2ECA                                l39 2ED2  
                              l80 2DEA                                l81 2DBA  
                              l82 2DBE                                l83 2DC4  
                              l84 2DC8                                l94 3106  
                              l78 2DCE                                l89 3010  
                              _rd 0039                     pf_mount@bsect 00BA  
                   pf_mount@mclst 00B6                     pf_mount@fsize 00BE  
                    ?_escalonador 0001                     create_name@dj 0022  
                   pf_mount@tsect 00B2                     create_name@ni 0063  
                   create_name@si 0064                  ?_inicializa_shrc 0001  
                ?_inicializa_uart 0001                               l322 217C  
                             l502 1B2C                               l510 1B28  
                             l503 1B2A                               l600 2D36  
                             l504 1AA8                               l601 2D3E  
                             l602 2D40                               l610 2C8E  
                             l506 1AC4                               l611 2C9C  
                             l523 1B2E                               l620 2BAC  
                             l612 2CAA                               l508 1AC6  
                             l621 2BAE                               l613 2CB8  
                             l630 2BEA                               l622 2BB6  
                             l606 2CDE                               l631 2BEC  
                             l623 2BB8                               l607 2CBE  
                             l527 1B36                               l632 2BF4  
                             l624 2BC0                               l608 2C82  
                             l536 304A                               l480 285C  
                             l633 2BF6                               l625 2BC2  
                             l609 2CDA                               l705 2B3E  
                             l626 2BD6                               l618 2BA2  
                             l570 29AA                               l706 2B62  
                             l722 16FA                               l714 161E  
                             l482 28EE                               l627 2BD8  
                             l619 2BA4                               l651 2E98  
                             l571 29B2                               l628 2BE0  
                             l652 2E70                               l580 29E8  
                             l572 29B4                               l716 1774  
                             l820 0ED4                               l557 305E  
                             l629 2BE2                               l741 1352  
                             l581 29F0                               l573 29BC  
                             l717 166A                               l805 2C1C  
                             l590 2CF8                               l742 133A  
                             l582 29F2                               l574 29BE  
                             l718 1696                               l830 0D9A  
                             l559 306C                               l591 2D00  
                             l751 1428                               l575 29D2  
                             l567 299E                               l823 0CA8  
                             l592 2D02                               l760 14B2  
                             l752 1414                               l736 13DA  
                             l744 139C                               l576 29D4  
                             l568 29A0                               l728 17B4  
                             l816 0EB8                               l488 2F98  
                             l593 2D0A                               l761 149A  
                             l737 12F4                               l577 29DC  
                             l569 29A8                               l729 17F0  
                             l905 1EB8                               l825 0CC8  
                             l817 0B50                               l489 2FA6  
                             l594 2D0C                               l770 156E  
                             l754 1472                               l746 13B8  
                             l578 29DE                               l834 27E8  
                             l818 0BE6                               l595 2D20  
                             l763 14F4                               l747 13B4  
                             l739 1320                               l579 29E6  
                             l907 1EC8                               l827 0CE6  
                             l931 24F0                               l923 23E6  
                             l596 2D22                               l772 15A6  
                             l764 14C4                               l940 1BAC  
                             l828 0CF4                               l852 227A  
                             l844 21FC                               l924 23E0  
                             l597 2D2A                               l589 2CF6  
                             l773 1592                               l941 1C1C  
                             l781 1FBE                               l598 2D2C  
                             l774 158E                               l766 151E  
                             l942 1C8C                               l950 0130  
                             l862 18C2                               l854 229E  
                             l870 250E                               l838 2732  
                             l934 24C4                               l926 2410  
                             l599 2D34                               l767 1506  
                             l951 013C                               l927 2454  
                             l783 1FF6                               l776 15C0  
                             l960 0550                               l952 0146  
                             l848 2234                               l784 1FFC  
                             l953 017C                               l945 002A  
                             l865 19C2                               l857 1864  
                             l785 2052                               l938 1B6E  
                             l954 021C                               l866 1950  
                             l963 05A0                               l955 036A  
                             l867 1974                               l875 2598  
                             l779 1F74                               l956 0464  
                             l948 0096                               l892 1E2E  
                             l876 25D8                               l980 115E  
                             l957 048C                               l981 10D8  
                             l958 04A2                               l798 2FF4  
                             l966 1CA6                               l990 11C4  
                             l982 1066                               l974 0F16  
                             l959 04AC                               l799 2FE4  
                             l991 1232                               l983 1096  
                             l896 1EE0                               l968 1CEA  
                             l984 10BC                               l976 0F2A  
                             l897 1E8A                               l969 1CF8  
                             l985 112A                               l978 126C  
                             l986 11AA                               l979 0FB6  
                             l995 0674                               l988 11BC  
                             l997 0688                               l998 06F2  
                             l999 06DC                               _PCL 000FF9  
                             _PR2 000FCB                       get_clust@fs 0026  
                ??_init_oscilador 001A                               _isr 0008  
                             _txt 019C                               prod 000FF3  
                             tosl 000FFD                               wreg 000FE8  
                    disk_readp@rd 0023                    create_name@cvt 7E83  
       __size_of_write_timer_zero 0012                    create_name@sfn 0065  
         ??_escreve_frase_ram_lcd 001F                              l1001 071E  
                            l1010 091A                              l1011 0996  
                            l1012 09F4                              l1004 07AA  
                            l1013 0A42                              l1005 09A8  
                            l1014 0AF8                              l1006 08C8  
                            l1015 0AE6                              l1007 0856  
                            l1008 0886                              l1120 2698  
                            l1112 2610                              l1009 08AC  
                            l1121 26AE                              l1113 2628  
                            l1115 2656                              l1116 264A  
                            l1119 268A                              l1064 2E28  
                            l1065 2E3C                              l1421 2A48  
                            l1422 2A3C                              l1425 2A7C  
                            l1426 2A8A              __size_of_acende_led4 0024  
                            l6204 2FE4                              l7022 10BC  
                            l6080 14C4                              l6074 149A  
                            l5800 3056                              l7208 2854  
                            l6362 2B82                              l6522 16B8  
                            l6282 1950                              l5806 3064  
                            l6542 171C                              l6608 1FB2  
                            l6714 1C8C                              l6706 1C1C  
                            ?_isr 0001                              l6918 08AC  
                            l6794 048C                              l6788 0464  
           _escreve_caractere_lcd 2B92                              STR_1 7F69  
                            STR_2 7FF5                              STR_3 7FFB  
                            STR_4 7FA5                              STR_5 7F97  
                            STR_6 7F7A                              STR_7 7F58  
                            STR_8 7FDA                              STR_9 7FED  
                  timer_dois@flag 0043                              _BRGH 007D62  
                            _CREN 007D5C                              _T0IF 007F92  
                            _LATB 000F8A                              _PIE1 000F9D  
                            u5400 303A                              u6300 3072  
                            u4630 2A4C                              u7015 18CE  
                            _RCIF 007CF5                              u7205 2724  
                            u7150 2A14                              u7230 2574  
                            u4654 30EA                              u5390 3038  
                            u4655 30E6                              u7400 1F1C  
                            u7240 2576                              u4664 30CC  
                            u7401 1F18                              u7225 254C  
                            u4665 30C8                              u7170 2B82  
                            u7410 1F1E                              u7330 1E70  
                            u8140 1010                              u9007 292E  
                            u6480 2E90                              u6640 1480  
                            u8400 1B34                              u6625 13EC  
                            u8145 1006                              u8305 20C2  
                            u9017 294A                              u6490 2EB8  
                            u7450 16B8                              u7290 25EE  
                            u9107 17A8                              u9027 1F8E  
                            u7515 1F46                              u6900 2C6A  
                            u8260 265A                              u6565 1298  
                            u9117 17BE                              u9037 2020  
                            u8325 2106                              u7470 171C  
                            u6750 0B1E                              u7550 2004  
                            u9207 2EE4                              u6487 2E86  
                            u9127 1808                              u9047 15EC  
                            u8335 2150                              u6680 152A  
                            u6760 0B3E                              u6920 21F8  
                            u9217 2EEC                              u6497 2EAE  
                            u9137 12C2                              u9057 1636  
                            u7650 1BA8                              u7810 0476  
                            u6850 0DDC                              u9227 2EF4  
                            u9147 130E                              u9067 1656  
                            u6835 0CD4                              u6780 0B8E  
                            u7900 1CF4                              u8460 2AAA  
                            u9237 3194                              u9157 136A  
                            u9077 16BE                              u7830 049E  
                            u8470 2AC2                      get_clust@dir 001A  
                            u9247 319C                              u9167 1440  
                            u9087 1730                              u6855 0DD2  
                            u6775 0B7A                              u8295 2076  
                            u8448 28AC                              u9177 1542  
                            u9097 1766                              u8449 28C0  
                            u6970 1860                              u6890 2C2C  
                            u9187 15B2                              u9197 2EDC  
                            u7865 05D4                              u7795 0382  
                            u7990 0800                              u7995 07F6  
                            _TMR2 000FCC                              u8987 2B02  
                            u8997 2914                              _SPEN 007D5F  
                            _TRMT 007D61                              _TXEN 007D65  
                            _SYNC 007D64                              _dado 0045  
                            _flag 003B                              _main 2F7A  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            indf0 000FEF                              fsr2h 000FDA  
                            fsr0l 000FE9                              indf1 000FE7  
                            indf2 000FDF                              fsr1l 000FE1  
                            fsr2l 000FD9                              btemp 0046  
                            prodh 000FF4                              prodl 000FF3  
                            start 000E                     disk_readp@arr 01EF  
                   disk_readp@ptr 0064                      disk_writep@i 0064  
                    disk_writep@j 0066                      ?_follow_path 00AD  
                    ___param_bank 000000                   create_name@path 0024  
                           ??_isr 0005          __size_of_recebe_dado_SPI 0028  
__size_of_configura_baudrate_uart 0132                   __end_of___aldiv 26C0  
                           ?_main 0001                             STR_10 7F58  
                           STR_11 7FC1                             STR_12 7FB3  
                           STR_13 7FCE                             STR_14 7F89  
                           STR_15 7FE4                             STR_16 7FDA  
                 __end_of___lldiv 2A9C                             _T0CON 000FD5  
                           _T2CON 000FCA                    _data_buffer_32 01B7  
                           i2l348 31D6                             i2l470 235E  
                           i2l472 237E                             i2l473 2392  
                           i2l466 2318                             i2l467 238A  
                           i2l468 2330                             _RCREG 000FAE  
                           _RCSTA 000FAB                     get_clust@clst 0028  
                           _TMR0H 000FD7                             _TMR0L 000FD6  
                           _SPBRG 000FAF                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
                           _TRISD 000F95                             _TRISE 000F96  
                           _TXREG 000FAD                             _TXSTA 000FAC  
                           _FatFs 0035            __end_ofcreate_name@cvt 7F03  
             ___lmul@multiplicand 001E        __size_of_config_timer_dois 000C  
      __size_of_config_timer_zero 001A                   __end_of_get_fat 0EE8  
                 __end_of_command 2F42                             _delay 3052  
                _envia_dados_shrc 2EC0                   __end_of_mem_cmp 2C74  
                 __end_of_mem_set 3006                   __end_of_pf_read 1278  
                 __end_of_pf_open 1DE0          __size_of_escreve_cmd_lcd 008C  
                           _reset 2B18                     _controle_shrc 3200  
                           pclath 000FFA                             tablat 000FF5  
                 __end_of_proceed 3200                             plusw2 000FDB  
                           status 000FD8                             wtemp6 0047  
                  disk_readp@buff 0069                     disk_writep@sc 0026  
                   disk_writep@wr 0023                   __initialization 2D4E  
             disk_initialize@buff 0067               disk_initialize@stat 0064  
                    __end_of_main 2FAC                      clust2sect@fs 002A  
              _inicializa_tarefas 2F42                   escalonador@cont 00CE  
                          ??_main 002D               disk_readp@start_add 0065  
                   __activetblptr 000002               ?_inicializa_tarefas 0001  
                          ?_delay 0001            ?_escreve_caractere_lcd 0001  
                          _ADCON0 000FC2                            _ADCON1 000FC1  
                  ?_controle_shrc 0001                            _ADRESH 000FC4  
                          _ADRESL 000FC3                            ?_reset 0001  
                          _INT0IE 007F94                            _INT0IF 007F91  
                   ?_dummy_clocks 0001                            _PCLATH 000FFA  
                          i2l5502 2328                            _INTCON 000FF2  
         __size_of_inicializa_SPI 0064                            _TMR0IF 007F92  
                          _TMR2IF 007CF1                            _SDCard 19D6  
        __end_of_recebe_dado_uart 31DA           __size_of_inicializa_adc 0022  
                          _SPPCFG 000F63                            _SPPCON 000F65  
                          _SSPBUF 000FC9                  __end_of_check_fs 1C90  
            ??_inicializa_tarefas 001A              __size_of_create_name 0144  
        __size_of_disk_initialize 0256        __end_of_posicao_cursor_lcd 2CE4  
                __end_of_dir_find 25F4                  __end_of_dir_next 19D6  
          __size_of_init_hardware 001A                            _Result 0042  
                          ___lmul 2E18                         ??___aldiv 0022  
            __size_of_disk_writep 0140                         ??___lldiv 0022  
                          _folder 016C                            _estado 0044  
                __end_of_init_lcd 298E                            clear_0 2D76  
                          clear_1 2D88                            clear_2 2D94  
                          clear_3 2DA0                  __end_of_pf_mount 0646  
                __end_of_readover 3216                  __end_of_pf_write 0B04  
        configura_baudrate_uart@x 0068                       pf_read@buff 0094  
                     pf_read@clst 00AF                       pf_read@sect 00A7  
                     pf_read@rcnt 00B4                         ??_get_fat 0070  
                       ??_command 0021                         ??_mem_cmp 0020  
                       ??_mem_set 0020                         ??_pf_read 009A  
                       ??_pf_open 00B6              __size_of_escalonador 00A4  
               ??_recebe_dado_SPI 0020                   acende_led4@flag 003D  
                __end_of_response 31E8                      __mediumconst 7E82  
                          reset@i 0023             write_timer_zero@timer 001C  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                         ??_proceed 001C  
                _write_timer_zero 31A4                       pf_open@path 00B4  
       escreve_caractere_lcd@data 001C                    ??_dummy_clocks 001C  
                      __accesstop 0060           __end_of__initialization 2DA6  
              __size_of_WriteSPI_ 001C                       pf_mount@buf 008E  
                     pf_mount@fmt 00C2                   disk_readp@count 002B  
                   ___rparam_used 000001                 ??_escreve_cmd_lcd 001C  
                  __pcstackCOMRAM 0001                 ?_ativa_latch_shrc 0001  
     __end_of_endereco_cursor_lcd 2D4E                      __pidataBANK1 3178  
               ?_mensagem_inicial 0001           _configura_baudrate_uart 2064  
                   __end_of_delay 3076              __size_of_follow_path 0116  
              ??_ativa_latch_shrc 001A                     __end_of_reset 2B92  
              ??_mensagem_inicial 0020                       pf_write@btw 0096  
              _tarefa_em_execucao 003E        __end_ofi2_write_timer_zero 31C8  
 configura_baudrate_uart@baudrate 0028                   ??_controle_shrc 001C  
                   _init_hardware 3110                __size_of_get_clust 00C8  
                         ??_delay 001A                           ??_reset 0023  
    mensagem_inicial@msg_linha_um 0060                        __pbssBANK0 00CF  
                      __pbssBANK1 016C                    pf_write@remain 00A8  
  __size_of_escreve_frase_ram_lcd 0052     __end_of_escreve_frase_ram_lcd 2EC0  
                         ?_SDCard 0001         escreve_inteiro_uart@F3956 01E8  
           __end_of_shrc_seta_bit 30F4                           ?___lmul 001A  
        __end_of_envia_dados_shrc 2F04             mensagem_inicial@F4027 7F14  
           mensagem_inicial@F4029 7F03           __size_of_shrc_apaga_bit 001E  
               ??_disk_initialize 0028                    ___lmul@product 0022  
               __end_of_WriteSPI_ 3110                        _dir_rewind 2196  
                         _INTCON2 000FF1                           _INTCON3 000FF0  
                  ?_init_hardware 0001                         ?_check_fs 006C  
                      _disk_readp 1278                     ??_acende_led4 001D  
                  follow_path@dir 00AF                    follow_path@res 00B3  
                       ?_dir_find 00A5                         ?_dir_next 0094  
                         _SSPCON1 000FC6          __size_of_inicializa_shrc 0008  
        __size_of_inicializa_uart 0022                        _clust2sect 2788  
                  _inicializa_SPI 2DB4                    _inicializa_adc 3076  
                       ?_init_lcd 0001                   __size_of_SDCard 0162  
                       ?_pf_mount 0076                         ?_readover 001A  
                       ?_pf_write 0094                           __Hparam 0000  
       ??_configura_baudrate_uart 0060                           __Lparam 0000  
                 _dir_rewind$1906 006B                 __end_of_get_clust 2788  
                       ?_response 0001                           ___aldiv 25F4  
       shrc_apaga_bit@posicao_bit 001C                   __size_of___lmul 0056  
                         ___lldiv 2A1A              __end_of_dummy_clocks 2FDA  
                         __pcinit 2D4E                        _init_ports 312A  
                         __ramtop 0800                      _get_fat$1846 0086  
                         __ptext0 2F7A                           __ptext1 2A9C  
                         __ptext2 28F2                           __ptext3 3110  
                         __ptext4 312A                           __ptext5 3216  
                         __ptext6 3144                           __ptext7 3076  
                         __ptext8 315E                           __ptext9 31A4  
                         _get_fat 0B04                           _command 2F04  
                       _T0CONbits 000FD5                           _mem_cmp 2C04  
         i2write_timer_zero@timer 0003       endereco_cursor_lcd@endereco 001C  
                         _mem_set 2FDA                           _pf_read 0EE8  
                    __size_of_isr 23D6           ??_escreve_caractere_lcd 001C  
                         _pf_open 1C90                        ??_check_fs 0072  
                ___aldiv@dividend 001A                           _proceed 31F4  
         __size_of_init_interrupt 001A                        ??_dir_find 00A9  
                      ??_dir_next 0096            __end_of_inicializa_SPI 2E18  
                    pf_read@rbuff 00A3            __end_of_inicializa_adc 3098  
                  __pintcode_body 22C0              end_of_initialization 2DA6  
                         isr@cont 0019        __end_ofleitura_chave@F3840 7F47  
             __end_of_acende_led4 3052        __end_ofleitura_chave@F3842 7F36  
      __end_ofleitura_chave@F3838 7F58           __size_of_init_oscilador 0008  
                   SDCard@FResult 013F                     __Lmediumconst 7E82  
                      ??_init_lcd 001D                           int_func 22C0  
               ?_recebe_dado_uart 0001                        ??_pf_mount 0078  
                      ??_readover 001C                        ??_pf_write 009A  
          write_timer_zero@timer0 001A                   ___lldiv@divisor 001E  
              ??_recebe_dado_uart 0001                   ___lldiv@counter 0026  
        envia_dados_shrc@contador 001A                        ??_response 0021  
                       _RCSTAbits 000FAB          __end_of_write_timer_zero 31B6  
                ___aldiv@quotient 0024                           postdec1 000FE5  
                         postdec2 000FDD                   _recebe_dado_SPI 3006  
                         postinc0 000FEE                           postinc1 000FE6  
                         postinc2 000FDE                        dir_find@dj 00A5  
                       _PORTAbits 000F80                         _PORTCbits 000F82  
                       _PORTDbits 000F83                         _PORTEbits 000F84  
                 ??_init_hardware 001E                _posicao_cursor_lcd 2C74  
                     ?_dir_rewind 0065                        dir_next@dj 0094  
                      dir_next@fs 009D   __end_of_configura_baudrate_uart 2196  
                     ?_disk_readp 0023                         _TRISCbits 000F94  
                       _TRISDbits 000F95                        get_fat@buf 008C  
                      get_fat@ofs 008A                   _escreve_cmd_lcd 298E  
             ?_posicao_cursor_lcd 001D                   ?_inicializa_SPI 0001  
                WriteSPI_@TempVar 001A                   ?_inicializa_adc 0001  
                     ?_clust2sect 0026                        command@CMD 0021  
                      command@CRC 0020                  disk_readp@length 006A  
                disk_readp@offset 0029                  disk_readp@sector 0025  
                   ??_create_name 0026                        command@arg 001C  
                disk_initialize@i 0060                   disk_writep@buff 0068  
               ??_inicializa_shrc 001A                 ??_inicializa_uart 002C  
     __size_of_inicializa_tarefas 0038                    __end_of_SDCard 1B38  
                   ??_disk_writep 0060                   command@argument 0022  
            ??_posicao_cursor_lcd 001E                    _shrc_apaga_bit 30BA  
           disk_initialize@count1 0062             disk_initialize@count2 0065  
                  __end_of___lmul 2E6E                     ??_escalonador 00CC  
                     ?_init_ports 0001                    clust2sect@clst 0026  
             start_initialization 2D4E                     WriteSPI_@dado 001B  
       __size_of_ativa_latch_shrc 0014                       _acende_led4 302E  
                     __end_of_isr 23DE         __size_of_mensagem_inicial 007C  
                      mem_cmp@cnt 001E                        mem_cmp@dst 001A  
                    pf_write@buff 0094                        mem_cmp@src 001C  
                    pf_write@clst 00AC                      pf_write@sect 00A4  
                    pf_write@wcnt 00B1                          ??_SDCard 002D  
              i2_write_timer_zero 31B6           __end_of_recebe_dado_SPI 302E  
                 _disk_initialize 15C4                        mem_set@cnt 001E  
                      mem_set@dst 001A                        mem_set@val 001C  
             __size_of_dir_rewind 012A                  _data_uart_recebe 0040  
           __size_of_dummy_clocks 002E                     ??_follow_path 002D  
          __end_of_shrc_apaga_bit 30D8               __size_of_disk_readp 034C  
             __end_of_create_name 1F24               ?i2_write_timer_zero 0001  
                        ??___lmul 0022                 ?_envia_dados_shrc 0001  
                      pf_read@btr 0096                       __pdataBANK1 01D7  
             __size_of_clust2sect 00C6               __end_of_disk_writep 2064  
              ??_envia_dados_shrc 001A                        pf_open@dir 010C  
                      pf_open@res 012C           __end_of_escreve_cmd_lcd 2A1A  
    __size_of_endereco_cursor_lcd 006A                       __pbssBIGRAM 01EF  
                      pf_mount@fs 0076                       __pbssCOMRAM 002D  
                    _pf_read$2100 00A5                     __pcstackBANK0 0060  
                   __pcstackBANK1 0100                    _init_interrupt 3144  
            ??i2_write_timer_zero 0003               __end_of_escalonador 28F2  
                       _WriteSPI_ 30F4                 __size_of_check_fs 0158  
           __end_of_controle_shrc 320C                      check_fs@sect 006E  
                      pf_write@cs 00B0                        pf_write@bw 0098  
                      pf_write@fs 00B3                 __size_of_dir_find 0100  
                    _dummy_clocks 2FAC                    _init_oscilador 3216  
               __size_of_dir_next 01BC               __size_of_init_ports 001A  
           _escreve_frase_ram_lcd 2E6E                 __size_of_init_lcd 009C  
               delay@contador_int 001B                 delay@contador_ext 001A  
               __size_of_pf_mount 0634                 __size_of_readover 000A  
                 ?_shrc_apaga_bit 0001                 __size_of_pf_write 04BE  
                       __pintcode 0008                     __pmediumconst 7E82  
                        SDCard@br 0140                          SDCard@fs 0142  
                        ?___aldiv 001A                          ?___lldiv 001A  
               __size_of_response 000E                         _get_clust 26C0  
                   follow_path@dj 00AD                _sinaliza_int_timer 003F  
             __end_of_follow_path 24F4                          ?_get_fat 006C  
                        ?_command 001C                          ?_mem_cmp 001A  
          __end_of_init_interrupt 315E                          ?_mem_set 001A  
                        ?_pf_read 0094                          ?_pf_open 00B4  
                      reset@count 0025    __size_of_escreve_caractere_lcd 0072  
                      ?_WriteSPI_ 0001     __end_of_escreve_caractere_lcd 2C04  
                        ?_proceed 0001                    __size_of_delay 0024  
         __end_of_disk_initialize 181A            __end_of_init_oscilador 321E  
          __size_of_shrc_seta_bit 001C                    __size_of_reset 007A  
                       _p_tarefas 00D3                   ___aldiv@divisor 001E  
                 ___aldiv@counter 0022                       _create_name 1DE0  
                        _LATBbits 000F8A                  ?_recebe_dado_SPI 0001  
                        _IPR1bits 000F9F                          _PIE1bits 000F9D  
                 follow_path@path 00B1                          _PIR1bits 000F9E  
                     _disk_writep 1F24                          i2u584_40 2362  
               ?_write_timer_zero 001A                         dir_find@c 00AB  
              leitura_chave@F3840 7F36                leitura_chave@F3842 7F25  
              leitura_chave@F3838 7F47          posicao_cursor_lcd@coluna 001D  
                       dir_next@i 00A3                ??_write_timer_zero 001C  
      posicao_cursor_lcd@endereco 001F                        ?_get_clust 001A  
                       get_fat@bc 0090                         get_fat@fs 0092  
       __size_of_recebe_dado_uart 0012                         get_fat@wc 0088  
                     _escalonador 284E                        _ADCON0bits 000FC2  
                      _ADCON1bits 000FC1                        _ADCON2bits 000FC0  
                ?_escreve_cmd_lcd 0001                      ??_dir_rewind 0067  
     escreve_frase_ram_lcd@buffer 001D                  ??_inicializa_SPI 0020  
                 ?_init_interrupt 0001                  ??_inicializa_adc 001A  
                    ??_disk_readp 0060                  _ativa_latch_shrc 3190  
                 _inicializa_shrc 321E                   _inicializa_uart 3098  
                _mensagem_inicial 2A9C                   ?_init_oscilador 0001  
                    ??_clust2sect 0060                 ___lmul@multiplier 001A  
                     _INTCON2bits 000FF1                         copy_data0 2D62  
        ?_configura_baudrate_uart 0028            ?_escreve_frase_ram_lcd 001D  
        escreve_inteiro_lcd@F3966 01E1                          __Hrparam 0000  
              __end_of_dir_rewind 22C0                       _info_chaves 01B0  
                        __Lrparam 0000                       _follow_path 23DE  
              __end_of_disk_readp 15C4                         pf_read@br 0098  
                       pf_read@cs 00B3                         pf_read@dr 00A2  
                       pf_read@fs 00B6                     _shrc_seta_bit 30D8  
                       pf_open@dj 012F                         pf_open@fs 012D  
                       pf_open@sp 0100                  __size_of___aldiv 00CC  
                __size_of___lldiv 0082                      ??_init_ports 001A  
              __end_of_clust2sect 284E            inicializa_SPI@SPI_mode 0020  
                     check_fs@buf 006C                         readover@a 001A  
                       pf_write@p 00A2                  __size_of_get_fat 03E4  
                __size_of_command 003E             __end_of_init_hardware 312A  
                        _check_fs 1B38                  __size_of_mem_cmp 0070  
                __size_of_mem_set 002C                  __size_of_pf_read 0390  
                __size_of_pf_open 0150                      ?_acende_led4 0001  
                     ??_WriteSPI_ 001A                          _fileName 01D7  
                        __ptext10 31E8                          __ptext11 3098  
                        __ptext20 30D8                          __ptext12 2064  
                        __ptext21 30BA                          __ptext13 25F4  
                        __ptext30 2C04                          __ptext22 320C  
                        __ptext14 2F42                          __ptext31 2196  
                        __ptext23 0646                          __ptext15 321E  
                        __ptext40 298E                          __ptext32 181A  
                        __ptext24 1F24                          __ptext16 2DB4  
                        __ptext41 1B38                          __ptext33 0B04  
                        __ptext25 0EE8                          __ptext17 284E  
                        __ptext50 31F4                          __ptext42 1278  
                        __ptext34 2788                          __ptext26 1C90  
                        __ptext18 19D6                          __ptext51 2FAC  
                        __ptext43 31DA                          __ptext35 1DE0  
                        __ptext27 23DE                          __ptext19 302E  
                        __ptext60 31B6                          __ptext52 2F04  
                        __ptext44 3006                          __ptext36 2FDA  
                        __ptext28 26C0                          __ptext61 31C8  
                        __ptext53 30F4                          __ptext45 2C74  
                        __ptext37 0012                          __ptext29 24F4  
                        __ptext62 0000                          __ptext54 2E18  
                        __ptext46 2CE4                          __ptext38 15C4  
                        __ptext55 2A1A                          __ptext47 2E6E  
                        __ptext39 2B18                          __ptext56 3200  
                        __ptext48 2B92                          __ptext57 2EC0  
                        __ptext49 3052                          __ptext58 3190  
                        _dir_find 24F4                          _fileSize 0031  
                        _dir_next 181A                  __size_of_proceed 000C  
                ?_disk_initialize 0001                    _timeout_tarefa 0037  
                       reset@buff 0027        __end_of_inicializa_tarefas 2F7A  
        i2write_timer_zero@timer0 0001                          _init_lcd 28F2  
                   __size_of_main 0032                          _pf_mount 0012  
                        _readover 320C               _endereco_cursor_lcd 2CE4  
                        _pf_write 0646                __end_of_init_ports 3144  
                   dummy_clocks@i 001F                     dummy_clocks@n 001E  
        shrc_seta_bit@posicao_bit 001C                    ?_shrc_seta_bit 0001  
                        _response 31DA       __size_of_posicao_cursor_lcd 0070  
                        int$flags 0046           posicao_cursor_lcd@linha 001E  
                   pf_read@remain 00AB                       ??_get_clust 001E  
         __end_of_inicializa_shrc 3226           __end_of_inicializa_uart 30BA  
            ?_endereco_cursor_lcd 0001                          mem_cmp@d 0023  
                        mem_cmp@r 0027                          mem_cmp@s 0025  
                      _INTCONbits 000FF2                          mem_set@d 0020  
       __size_of_envia_dados_shrc 0044                 _config_timer_dois 31E8  
                    _tempo_backup 00CF                 _config_timer_zero 315E  
                        intlevel2 0000                ?_config_timer_dois 0001  
        mensagem_inicial@msg_dois 0071                ?_config_timer_zero 0001  
                    _tempo_tarefa 002D      envia_dados_shrc@data_to_shrc 001B  
                ??_shrc_apaga_bit 001A                  ___lldiv@dividend 001A  
             ??_config_timer_dois 001A                        _OSCCONbits 000FD3  
             ??_config_timer_zero 001E                  _recebe_dado_uart 31C8  
           ??_endereco_cursor_lcd 001C                      response@buff 0021  
                ___lldiv@quotient 0022                    dir_rewind@clst 0071  
                     dir_find@dir 00A7                       dir_find@res 00AC  
       __end_of_config_timer_dois 31F4                      ___aldiv@sign 0023  
       __end_of_config_timer_zero 3178       __size_ofi2_write_timer_zero 0012  
                     _SSPCON1bits 000FC6                      dir_next@clst 009F  
          escreve_cmd_lcd@comando 001C           recebe_dado_SPI@temp_var 0020  
                    ?_create_name 0022                      dir_rewind@dj 0065  
                    dir_rewind@fs 006F                   ??_shrc_seta_bit 001A  
   __end_ofmensagem_inicial@F4027 7F25     __end_ofmensagem_inicial@F4029 7F14  
                    ?_disk_writep 0023          __end_of_ativa_latch_shrc 31A4  
