

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Thu Feb 03 21:08:39 2022

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    84                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    91                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    92  0000                     
    93                           ; Version 1.41
    94                           ; Generated 25/01/2017 GMT
    95                           ; 
    96                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    97                           ; All rights reserved.
    98                           ; 
    99                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   100                           ; 
   101                           ; Redistribution and use in source and binary forms, with or without modification, are
   102                           ; permitted provided that the following conditions are met:
   103                           ; 
   104                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   105                           ;        conditions and the following disclaimer.
   106                           ; 
   107                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   108                           ;        of conditions and the following disclaimer in the documentation and/or other
   109                           ;        materials provided with the distribution.
   110                           ; 
   111                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   112                           ;        software without specific prior written permission.
   113                           ; 
   114                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   115                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   116                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   117                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   118                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   119                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   120                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   121                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   122                           ; 
   123                           ; 
   124                           ; Code-generator required, PIC18F4550 Definitions
   125                           ; 
   126                           ; SFR Addresses
   127  0000                     
   128                           	psect	idataBANK0
   129  003520                     __pidataBANK0:
   130                           	opt stack 0
   131                           
   132                           ;initializer for _fileName
   133  003520  63                 	db	99
   134  003521  68                 	db	104
   135  003522  65                 	db	101
   136  003523  63                 	db	99
   137  003524  6B                 	db	107
   138  003525  2E                 	db	46
   139  003526  74                 	db	116
   140  003527  78                 	db	120
   141  003528  74                 	db	116
   142  003529  00                 	db	0
   143                           
   144                           ;initializer for escreve_inteiro_uart@F3952
   145  00352A  30                 	db	48
   146  00352B  30                 	db	48
   147  00352C  30                 	db	48
   148  00352D  30                 	db	48
   149  00352E  30                 	db	48
   150  00352F  30                 	db	48
   151  003530  00                 	db	0
   152                           
   153                           ;initializer for escreve_inteiro_lcd@F3962
   154  003531  30                 	db	48
   155  003532  30                 	db	48
   156  003533  30                 	db	48
   157  003534  30                 	db	48
   158  003535  30                 	db	48
   159  003536  30                 	db	48
   160  003537  00                 	db	0
   161                           
   162                           	psect	mediumconst
   163  006040                     __pmediumconst:
   164                           	opt stack 0
   165  006040  00                 	db	0
   166  006041                     create_name@cvt:
   167                           	opt stack 0
   168  006041  80                 	db	128
   169  006042  9A                 	db	154
   170  006043  90                 	db	144
   171  006044  41                 	db	65
   172  006045  8E                 	db	142
   173  006046  41                 	db	65
   174  006047  8F                 	db	143
   175  006048  80                 	db	128
   176  006049  45                 	db	69
   177  00604A  45                 	db	69
   178  00604B  45                 	db	69
   179  00604C  49                 	db	73
   180  00604D  49                 	db	73
   181  00604E  49                 	db	73
   182  00604F  8E                 	db	142
   183  006050  8F                 	db	143
   184  006051  90                 	db	144
   185  006052  92                 	db	146
   186  006053  92                 	db	146
   187  006054  4F                 	db	79
   188  006055  99                 	db	153
   189  006056  4F                 	db	79
   190  006057  55                 	db	85
   191  006058  55                 	db	85
   192  006059  59                 	db	89
   193  00605A  99                 	db	153
   194  00605B  9A                 	db	154
   195  00605C  9B                 	db	155
   196  00605D  9C                 	db	156
   197  00605E  9D                 	db	157
   198  00605F  9E                 	db	158
   199  006060  9F                 	db	159
   200  006061  41                 	db	65
   201  006062  49                 	db	73
   202  006063  4F                 	db	79
   203  006064  55                 	db	85
   204  006065  A5                 	db	165
   205  006066  A5                 	db	165
   206  006067  A6                 	db	166
   207  006068  A7                 	db	167
   208  006069  A8                 	db	168
   209  00606A  A9                 	db	169
   210  00606B  AA                 	db	170
   211  00606C  AB                 	db	171
   212  00606D  AC                 	db	172
   213  00606E  21                 	db	33
   214  00606F  AE                 	db	174
   215  006070  AF                 	db	175
   216  006071  B0                 	db	176
   217  006072  B1                 	db	177
   218  006073  B2                 	db	178
   219  006074  B3                 	db	179
   220  006075  B4                 	db	180
   221  006076  B5                 	db	181
   222  006077  B6                 	db	182
   223  006078  B7                 	db	183
   224  006079  B8                 	db	184
   225  00607A  B9                 	db	185
   226  00607B  BA                 	db	186
   227  00607C  BB                 	db	187
   228  00607D  BC                 	db	188
   229  00607E  BD                 	db	189
   230  00607F  BE                 	db	190
   231  006080  BF                 	db	191
   232  006081  C0                 	db	192
   233  006082  C1                 	db	193
   234  006083  C2                 	db	194
   235  006084  C3                 	db	195
   236  006085  C4                 	db	196
   237  006086  C5                 	db	197
   238  006087  C6                 	db	198
   239  006088  C7                 	db	199
   240  006089  C8                 	db	200
   241  00608A  C9                 	db	201
   242  00608B  CA                 	db	202
   243  00608C  CB                 	db	203
   244  00608D  CC                 	db	204
   245  00608E  CD                 	db	205
   246  00608F  CE                 	db	206
   247  006090  CF                 	db	207
   248  006091  D0                 	db	208
   249  006092  D1                 	db	209
   250  006093  D2                 	db	210
   251  006094  D3                 	db	211
   252  006095  D4                 	db	212
   253  006096  D5                 	db	213
   254  006097  D6                 	db	214
   255  006098  D7                 	db	215
   256  006099  D8                 	db	216
   257  00609A  D9                 	db	217
   258  00609B  DA                 	db	218
   259  00609C  DB                 	db	219
   260  00609D  DC                 	db	220
   261  00609E  DD                 	db	221
   262  00609F  DE                 	db	222
   263  0060A0  DF                 	db	223
   264  0060A1  E0                 	db	224
   265  0060A2  E1                 	db	225
   266  0060A3  E2                 	db	226
   267  0060A4  E3                 	db	227
   268  0060A5  E4                 	db	228
   269  0060A6  E5                 	db	229
   270  0060A7  E6                 	db	230
   271  0060A8  E7                 	db	231
   272  0060A9  E8                 	db	232
   273  0060AA  E9                 	db	233
   274  0060AB  EA                 	db	234
   275  0060AC  EB                 	db	235
   276  0060AD  EC                 	db	236
   277  0060AE  ED                 	db	237
   278  0060AF  EE                 	db	238
   279  0060B0  EF                 	db	239
   280  0060B1  F0                 	db	240
   281  0060B2  F1                 	db	241
   282  0060B3  F2                 	db	242
   283  0060B4  F3                 	db	243
   284  0060B5  F4                 	db	244
   285  0060B6  F5                 	db	245
   286  0060B7  F6                 	db	246
   287  0060B8  F7                 	db	247
   288  0060B9  F8                 	db	248
   289  0060BA  F9                 	db	249
   290  0060BB  FA                 	db	250
   291  0060BC  FB                 	db	251
   292  0060BD  FC                 	db	252
   293  0060BE  FD                 	db	253
   294  0060BF  FE                 	db	254
   295  0060C0  FF                 	db	255
   296  0060C1                     __end_ofcreate_name@cvt:
   297                           	opt stack 0
   298  0060C1                     _dpowers:
   299                           	opt stack 0
   300  0060C1  0001               	dw	1
   301  0060C3  0000               	dw	0
   302  0060C5  000A               	dw	10
   303  0060C7  0000               	dw	0
   304  0060C9  0064               	dw	100
   305  0060CB  0000               	dw	0
   306  0060CD  03E8               	dw	1000
   307  0060CF  0000               	dw	0
   308  0060D1  2710               	dw	10000
   309  0060D3  0000               	dw	0
   310  0060D5  86A0               	dw	34464
   311  0060D7  0001               	dw	1
   312  0060D9  4240               	dw	16960
   313  0060DB  000F               	dw	15
   314  0060DD  9680               	dw	38528
   315  0060DF  0098               	dw	152
   316  0060E1  E100               	dw	57600
   317  0060E3  05F5               	dw	1525
   318  0060E5  CA00               	dw	51712
   319  0060E7  3B9A               	dw	15258
   320  0060E9                     __end_of_dpowers:
   321                           	opt stack 0
   322  0060E9                     __powers_:
   323                           	opt stack 0
   324  0060E9  00                 	db	0
   325  0060EA  80                 	db	128
   326  0060EB  3F                 	db	63
   327  0060EC  00                 	db	0
   328  0060ED  20                 	db	32
   329  0060EE  41                 	db	65
   330  0060EF  00                 	db	0
   331  0060F0  C8                 	db	200
   332  0060F1  42                 	db	66
   333  0060F2  00                 	db	0
   334  0060F3  7A                 	db	122
   335  0060F4  44                 	db	68
   336  0060F5  40                 	db	64
   337  0060F6  1C                 	db	28
   338  0060F7  46                 	db	70
   339  0060F8  50                 	db	80
   340  0060F9  C3                 	db	195
   341  0060FA  47                 	db	71
   342  0060FB  24                 	db	36
   343  0060FC  74                 	db	116
   344  0060FD  49                 	db	73
   345  0060FE  97                 	db	151
   346  0060FF  18                 	db	24
   347  006100  4B                 	db	75
   348  006101  BC                 	db	188
   349  006102  BE                 	db	190
   350  006103  4C                 	db	76
   351  006104  6B                 	db	107
   352  006105  6E                 	db	110
   353  006106  4E                 	db	78
   354  006107  03                 	db	3
   355  006108  15                 	db	21
   356  006109  50                 	db	80
   357  00610A  79                 	db	121
   358  00610B  AD                 	db	173
   359  00610C  60                 	db	96
   360  00610D  F3                 	db	243
   361  00610E  49                 	db	73
   362  00610F  71                 	db	113
   363  006110                     __end_of__powers_:
   364                           	opt stack 0
   365  006110                     __npowers_:
   366                           	opt stack 0
   367  006110  00                 	db	0
   368  006111  80                 	db	128
   369  006112  3F                 	db	63
   370  006113  CD                 	db	205
   371  006114  CC                 	db	204
   372  006115  3D                 	db	61
   373  006116  D7                 	db	215
   374  006117  23                 	db	35
   375  006118  3C                 	db	60
   376  006119  12                 	db	18
   377  00611A  83                 	db	131
   378  00611B  3A                 	db	58
   379  00611C  B7                 	db	183
   380  00611D  D1                 	db	209
   381  00611E  38                 	db	56
   382  00611F  C6                 	db	198
   383  006120  27                 	db	39
   384  006121  37                 	db	55
   385  006122  38                 	db	56
   386  006123  86                 	db	134
   387  006124  35                 	db	53
   388  006125  C0                 	db	192
   389  006126  D6                 	db	214
   390  006127  33                 	db	51
   391  006128  CC                 	db	204
   392  006129  2B                 	db	43
   393  00612A  32                 	db	50
   394  00612B  70                 	db	112
   395  00612C  89                 	db	137
   396  00612D  30                 	db	48
   397  00612E  E7                 	db	231
   398  00612F  DB                 	db	219
   399  006130  2E                 	db	46
   400  006131  E5                 	db	229
   401  006132  3C                 	db	60
   402  006133  1E                 	db	30
   403  006134  42                 	db	66
   404  006135  A2                 	db	162
   405  006136  0D                 	db	13
   406  006137                     __end_of__npowers_:
   407                           	opt stack 0
   408  006137                     leitura_chave@F3838:
   409                           	opt stack 0
   410  006137  20                 	db	32
   411  006138  49                 	db	73
   412  006139  67                 	db	103
   413  00613A  6E                 	db	110
   414  00613B  20                 	db	32
   415  00613C  4F                 	db	79
   416  00613D  6E                 	db	110
   417  00613E  00                 	db	0
   418  00613F  00                 	db	0
   419  006140  00                 	db	0
   420  006141  00                 	db	0
   421  006142  00                 	db	0
   422  006143  00                 	db	0
   423  006144  00                 	db	0
   424  006145  00                 	db	0
   425  006146  00                 	db	0
   426  006147  00                 	db	0
   427  006148                     __end_ofleitura_chave@F3838:
   428                           	opt stack 0
   429  006148                     leitura_chave@F3836:
   430                           	opt stack 0
   431  006148  20                 	db	32
   432  006149  49                 	db	73
   433  00614A  67                 	db	103
   434  00614B  6E                 	db	110
   435  00614C  20                 	db	32
   436  00614D  43                 	db	67
   437  00614E  72                 	db	114
   438  00614F  61                 	db	97
   439  006150  6E                 	db	110
   440  006151  6B                 	db	107
   441  006152  00                 	db	0
   442  006153  00                 	db	0
   443  006154  00                 	db	0
   444  006155  00                 	db	0
   445  006156  00                 	db	0
   446  006157  00                 	db	0
   447  006158  00                 	db	0
   448  006159                     __end_ofleitura_chave@F3836:
   449                           	opt stack 0
   450  006159                     leitura_chave@F3834:
   451                           	opt stack 0
   452  006159  20                 	db	32
   453  00615A  49                 	db	73
   454  00615B  67                 	db	103
   455  00615C  6E                 	db	110
   456  00615D  20                 	db	32
   457  00615E  4F                 	db	79
   458  00615F  66                 	db	102
   459  006160  66                 	db	102
   460  006161  00                 	db	0
   461  006162  00                 	db	0
   462  006163  00                 	db	0
   463  006164  00                 	db	0
   464  006165  00                 	db	0
   465  006166  00                 	db	0
   466  006167  00                 	db	0
   467  006168  00                 	db	0
   468  006169  00                 	db	0
   469  00616A                     __end_ofleitura_chave@F3834:
   470                           	opt stack 0
   471  00616A                     mensagem_inicial@F4020:
   472                           	opt stack 0
   473  00616A  20                 	db	32
   474  00616B  31                 	db	49
   475  00616C  38                 	db	56
   476  00616D  2F                 	db	47
   477  00616E  30                 	db	48
   478  00616F  31                 	db	49
   479  006170  2F                 	db	47
   480  006171  32                 	db	50
   481  006172  30                 	db	48
   482  006173  32                 	db	50
   483  006174  32                 	db	50
   484  006175  20                 	db	32
   485  006176  20                 	db	32
   486  006177  20                 	db	32
   487  006178  00                 	db	0
   488  006179  00                 	db	0
   489  00617A  00                 	db	0
   490  00617B                     __end_ofmensagem_inicial@F4020:
   491                           	opt stack 0
   492  00617B                     mensagem_inicial@F4018:
   493                           	opt stack 0
   494  00617B  53                 	db	83
   495  00617C  44                 	db	68
   496  00617D  43                 	db	67
   497  00617E  61                 	db	97
   498  00617F  72                 	db	114
   499  006180  64                 	db	100
   500  006181  20                 	db	32
   501  006182  49                 	db	73
   502  006183  6E                 	db	110
   503  006184  69                 	db	105
   504  006185  74                 	db	116
   505  006186  20                 	db	32
   506  006187  20                 	db	32
   507  006188  20                 	db	32
   508  006189  00                 	db	0
   509  00618A  00                 	db	0
   510  00618B  00                 	db	0
   511  00618C                     __end_ofmensagem_inicial@F4018:
   512                           	opt stack 0
   513  0000                     _RCSTA	set	4011
   514  0000                     _TXSTA	set	4012
   515  0000                     _RCREG	set	4014
   516  0000                     _RCSTAbits	set	4011
   517  0000                     _TXREG	set	4013
   518  0000                     _SPBRG	set	4015
   519  0000                     _PIR2bits	set	4001
   520  0000                     _EECON2	set	4007
   521  0000                     _EECON1bits	set	4006
   522  0000                     _EEDATA	set	4008
   523  0000                     _EEADR	set	4009
   524  0000                     _PR2	set	4043
   525  0000                     _TMR2	set	4044
   526  0000                     _T2CON	set	4042
   527  0000                     _OSCCONbits	set	4051
   528  0000                     _TRISE	set	3990
   529  0000                     _TRISC	set	3988
   530  0000                     _TRISA	set	3986
   531  0000                     _TRISD	set	3989
   532  0000                     _LATB	set	3978
   533  0000                     _TRISB	set	3987
   534  0000                     _T0CONbits	set	4053
   535  0000                     _TMR0L	set	4054
   536  0000                     _TMR0H	set	4055
   537  0000                     _PIE1	set	3997
   538  0000                     _INTCON3	set	4080
   539  0000                     _INTCON2	set	4081
   540  0000                     _INTCON	set	4082
   541  0000                     _SPPCFG	set	3939
   542  0000                     _SPPCON	set	3941
   543  0000                     _T0CON	set	4053
   544  0000                     _PORTDbits	set	3971
   545  0000                     _TRISDbits	set	3989
   546  0000                     _PORTEbits	set	3972
   547  0000                     _PORTCbits	set	3970
   548  0000                     _ADRESL	set	4035
   549  0000                     _ADRESH	set	4036
   550  0000                     _ADCON0	set	4034
   551  0000                     _ADCON0bits	set	4034
   552  0000                     _ADCON2bits	set	4032
   553  0000                     _ADCON1bits	set	4033
   554  0000                     _ADCON1	set	4033
   555  0000                     _SSPBUF	set	4041
   556  0000                     _TRISCbits	set	3988
   557  0000                     _SSPSTATbits	set	4039
   558  0000                     _TRISBbits	set	3987
   559  0000                     _SSPCON1	set	4038
   560  0000                     _SSPSTAT	set	4039
   561  0000                     _SSPCON1bits	set	4038
   562  0000                     _PORTAbits	set	3968
   563  0000                     _TRISAbits	set	3986
   564  0000                     _PCL	set	4089
   565  0000                     _PCLATH	set	4090
   566  0000                     _INTCONbits	set	4082
   567  0000                     _LATBbits	set	3978
   568  0000                     _PIR1bits	set	3998
   569  0000                     _PIE1bits	set	3997
   570  0000                     _RCIF	set	31989
   571  0000                     _TRMT	set	32097
   572  0000                     _TXEN	set	32101
   573  0000                     _CREN	set	32092
   574  0000                     _SPEN	set	32095
   575  0000                     _SYNC	set	32100
   576  0000                     _BRGH	set	32098
   577  0000                     _TMR2IF	set	31985
   578  0000                     _INT0IE	set	32660
   579  0000                     _INT0IF	set	32657
   580  0000                     _T0IF	set	32658
   581  0000                     _TMR0IF	set	32658
   582  00618C  53                 	db	83	;'S'
   583  00618D  50                 	db	80	;'P'
   584  00618E  49                 	db	73	;'I'
   585  00618F  20                 	db	32
   586  006190  63                 	db	99	;'c'
   587  006191  6F                 	db	111	;'o'
   588  006192  6E                 	db	110	;'n'
   589  006193  66                 	db	102	;'f'
   590  006194  69                 	db	105	;'i'
   591  006195  67                 	db	103	;'g'
   592  006196  75                 	db	117	;'u'
   593  006197  72                 	db	114	;'r'
   594  006198  61                 	db	97	;'a'
   595  006199  64                 	db	100	;'d'
   596  00619A  61                 	db	97	;'a'
   597  00619B  21                 	db	33
   598  00619C  00                 	db	0
   599  00619D                     STR_8:
   600  00619D  73                 	db	115	;'s'
   601  00619E  79                 	db	121	;'y'
   602  00619F  73                 	db	115	;'s'
   603  0061A0  74                 	db	116	;'t'
   604  0061A1  20                 	db	32
   605  0061A2  69                 	db	105	;'i'
   606  0061A3  6E                 	db	110	;'n'
   607  0061A4  69                 	db	105	;'i'
   608  0061A5  63                 	db	99	;'c'
   609  0061A6  69                 	db	105	;'i'
   610  0061A7  61                 	db	97	;'a'
   611  0061A8  6C                 	db	108	;'l'
   612  0061A9  69                 	db	105	;'i'
   613  0061AA  7A                 	db	122	;'z'
   614  0061AB  65                 	db	101	;'e'
   615  0061AC  64                 	db	100	;'d'
   616  0061AD  00                 	db	0
   617  0061AE  61                 	db	97	;'a'
   618  0061AF  62                 	db	98	;'b'
   619  0061B0  72                 	db	114	;'r'
   620  0061B1  69                 	db	105	;'i'
   621  0061B2  72                 	db	114	;'r'
   622  0061B3  20                 	db	32
   623  0061B4  6F                 	db	111	;'o'
   624  0061B5  20                 	db	32
   625  0061B6  61                 	db	97	;'a'
   626  0061B7  72                 	db	114	;'r'
   627  0061B8  71                 	db	113	;'q'
   628  0061B9  75                 	db	117	;'u'
   629  0061BA  69                 	db	105	;'i'
   630  0061BB  76                 	db	118	;'v'
   631  0061BC  6F                 	db	111	;'o'
   632  0061BD  00                 	db	0
   633  0061BE  6D                 	db	109	;'m'
   634  0061BF  6F                 	db	111	;'o'
   635  0061C0  75                 	db	117	;'u'
   636  0061C1  6E                 	db	110	;'n'
   637  0061C2  74                 	db	116	;'t'
   638  0061C3  20                 	db	32
   639  0061C4  66                 	db	102	;'f'
   640  0061C5  69                 	db	105	;'i'
   641  0061C6  6C                 	db	108	;'l'
   642  0061C7  65                 	db	101	;'e'
   643  0061C8  20                 	db	32
   644  0061C9  73                 	db	115	;'s'
   645  0061CA  79                 	db	121	;'y'
   646  0061CB  73                 	db	115	;'s'
   647  0061CC  00                 	db	0
   648  0061CD  42                 	db	66	;'B'
   649  0061CE  79                 	db	121	;'y'
   650  0061CF  74                 	db	116	;'t'
   651  0061D0  65                 	db	101	;'e'
   652  0061D1  73                 	db	115	;'s'
   653  0061D2  20                 	db	32
   654  0061D3  63                 	db	99	;'c'
   655  0061D4  72                 	db	114	;'r'
   656  0061D5  69                 	db	105	;'i'
   657  0061D6  61                 	db	97	;'a'
   658  0061D7  64                 	db	100	;'d'
   659  0061D8  6F                 	db	111	;'o'
   660  0061D9  21                 	db	33
   661  0061DA  00                 	db	0
   662  0061DB  43                 	db	67	;'C'
   663  0061DC  61                 	db	97	;'a'
   664  0061DD  72                 	db	114	;'r'
   665  0061DE  74                 	db	116	;'t'
   666  0061DF  E3                 	db	-29
   667  0061E0  6F                 	db	111	;'o'
   668  0061E1  20                 	db	32
   669  0061E2  41                 	db	65	;'A'
   670  0061E3  63                 	db	99	;'c'
   671  0061E4  65                 	db	101	;'e'
   672  0061E5  69                 	db	105	;'i'
   673  0061E6  74                 	db	116	;'t'
   674  0061E7  6F                 	db	111	;'o'
   675  0061E8  00                 	db	0
   676  0061E9                     STR_14:
   677  0061E9  45                 	db	69	;'E'
   678  0061EA  72                 	db	114	;'r'
   679  0061EB  72                 	db	114	;'r'
   680  0061EC  6F                 	db	111	;'o'
   681  0061ED  20                 	db	32
   682  0061EE  74                 	db	116	;'t'
   683  0061EF  65                 	db	101	;'e'
   684  0061F0  6E                 	db	110	;'n'
   685  0061F1  74                 	db	116	;'t'
   686  0061F2  61                 	db	97	;'a'
   687  0061F3  6E                 	db	110	;'n'
   688  0061F4  64                 	db	100	;'d'
   689  0061F5  6F                 	db	111	;'o'
   690  0061F6  00                 	db	0
   691  0061F7  41                 	db	65	;'A'
   692  0061F8  74                 	db	116	;'t'
   693  0061F9  74                 	db	116	;'t'
   694  0061FA  65                 	db	101	;'e'
   695  0061FB  6D                 	db	109	;'m'
   696  0061FC  70                 	db	112	;'p'
   697  0061FD  74                 	db	116	;'t'
   698  0061FE  69                 	db	105	;'i'
   699  0061FF  6E                 	db	110	;'n'
   700  006200  67                 	db	103	;'g'
   701  006201  20                 	db	32
   702  006202  74                 	db	116	;'t'
   703  006203  6F                 	db	111	;'o'
   704  006204  00                 	db	0
   705  006205  6C                 	db	108	;'l'
   706  006206  65                 	db	101	;'e'
   707  006207  72                 	db	114	;'r'
   708  006208  20                 	db	32
   709  006209  6F                 	db	111	;'o'
   710  00620A  20                 	db	32
   711  00620B  61                 	db	97	;'a'
   712  00620C  72                 	db	114	;'r'
   713  00620D  71                 	db	113	;'q'
   714  00620E  75                 	db	117	;'u'
   715  00620F  69                 	db	105	;'i'
   716  006210  76                 	db	118	;'v'
   717  006211  6F                 	db	111	;'o'
   718  006212  00                 	db	0
   719  006213  6C                 	db	108	;'l'
   720  006214  65                 	db	101	;'e'
   721  006215  6E                 	db	110	;'n'
   722  006216  64                 	db	100	;'d'
   723  006217  6F                 	db	111	;'o'
   724  006218  20                 	db	32
   725  006219  61                 	db	97	;'a'
   726  00621A  72                 	db	114	;'r'
   727  00621B  71                 	db	113	;'q'
   728  00621C  75                 	db	117	;'u'
   729  00621D  69                 	db	105	;'i'
   730  00621E  76                 	db	118	;'v'
   731  00621F  6F                 	db	111	;'o'
   732  006220  00                 	db	0
   733  006221  42                 	db	66	;'B'
   734  006222  6C                 	db	108	;'l'
   735  006223  6F                 	db	111	;'o'
   736  006224  63                 	db	99	;'c'
   737  006225  6F                 	db	111	;'o'
   738  006226  20                 	db	32
   739  006227  64                 	db	100	;'d'
   740  006228  65                 	db	101	;'e'
   741  006229  20                 	db	32
   742  00622A  35                 	db	53	;'5'
   743  00622B  31                 	db	49	;'1'
   744  00622C  32                 	db	50	;'2'
   745  00622D  00                 	db	0
   746  00622E  53                 	db	83	;'S'
   747  00622F  44                 	db	68	;'D'
   748  006230  43                 	db	67	;'C'
   749  006231  61                 	db	97	;'a'
   750  006232  72                 	db	114	;'r'
   751  006233  64                 	db	100	;'d'
   752  006234  20                 	db	32
   753  006235  65                 	db	101	;'e'
   754  006236  72                 	db	114	;'r'
   755  006237  72                 	db	114	;'r'
   756  006238  6F                 	db	111	;'o'
   757  006239  72                 	db	114	;'r'
   758  00623A  00                 	db	0
   759  00623B  63                 	db	99	;'c'
   760  00623C  68                 	db	104	;'h'
   761  00623D  65                 	db	101	;'e'
   762  00623E  63                 	db	99	;'c'
   763  00623F  6B                 	db	107	;'k'
   764  006240  2E                 	db	46
   765  006241  74                 	db	116	;'t'
   766  006242  78                 	db	120	;'x'
   767  006243  74                 	db	116	;'t'
   768  006244  00                 	db	0
   769  006245  45                 	db	69	;'E'
   770  006246  72                 	db	114	;'r'
   771  006247  72                 	db	114	;'r'
   772  006248  6F                 	db	111	;'o'
   773  006249  72                 	db	114	;'r'
   774  00624A  21                 	db	33
   775  00624B  21                 	db	33
   776  00624C  21                 	db	33
   777  00624D  00                 	db	0
   778  00624E  25                 	db	37
   779  00624F  64                 	db	100	;'d'
   780  006250  3A                 	db	58	;':'
   781  006251  25                 	db	37
   782  006252  64                 	db	100	;'d'
   783  006253  3A                 	db	58	;':'
   784  006254  25                 	db	37
   785  006255  64                 	db	100	;'d'
   786  006256  00                 	db	0
   787  006257  49                 	db	73	;'I'
   788  006258  6E                 	db	110	;'n'
   789  006259  69                 	db	105	;'i'
   790  00625A  74                 	db	116	;'t'
   791  00625B  20                 	db	32
   792  00625C  4F                 	db	79	;'O'
   793  00625D  4B                 	db	75	;'K'
   794  00625E  00                 	db	0
   795  00625F  53                 	db	83	;'S'
   796  006260  44                 	db	68	;'D'
   797  006261  5F                 	db	95	;'_'
   798  006262  43                 	db	67	;'C'
   799  006263  61                 	db	97	;'a'
   800  006264  72                 	db	114	;'r'
   801  006265  64                 	db	100	;'d'
   802  006266  00                 	db	0
   803  006267                     STR_3:
   804  006267  25                 	db	37
   805  006268  2E                 	db	46
   806  006269  30                 	db	48	;'0'
   807  00626A  35                 	db	53	;'5'
   808  00626B  66                 	db	102	;'f'
   809  00626C  00                 	db	0
   810  00626D                     STR_2:
   811  00626D  4C                 	db	76	;'L'
   812  00626E  4F                 	db	79	;'O'
   813  00626F  4E                 	db	78	;'N'
   814  006270  47                 	db	71	;'G'
   815  006271  3A                 	db	58	;':'
   816  006272  00                 	db	0
   817  006273                     STR_1:
   818  006273  4C                 	db	76	;'L'
   819  006274  41                 	db	65	;'A'
   820  006275  54                 	db	84	;'T'
   821  006276  3A                 	db	58	;':'
   822  006277  00                 	db	0
   823  006278  0D                 	db	13
   824  006279  0A                 	db	10
   825  00627A  00                 	db	0
   826  00627B  2E                 	db	46
   827  00627C  2E                 	db	46
   828  00627D  00                 	db	0
   829  0000                     
   830                           ; #config settings
   831  00627E  00                 	db	0	; dummy byte at the end
   832  0000                     
   833                           	psect	cinit
   834  002D5C                     __pcinit:
   835                           	opt stack 0
   836  002D5C                     start_initialization:
   837                           	opt stack 0
   838  002D5C                     __initialization:
   839                           	opt stack 0
   840                           
   841                           ; Initialize objects allocated to BANK0 (24 bytes)
   842                           ; load TBLPTR registers with __pidataBANK0
   843  002D5C  0E20               	movlw	low __pidataBANK0
   844  002D5E  6EF6               	movwf	tblptrl,c
   845  002D60  0E35               	movlw	high __pidataBANK0
   846  002D62  6EF7               	movwf	tblptrh,c
   847  002D64  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   848  002D66  6EF8               	movwf	tblptru,c
   849  002D68  EE00  F0DC         	lfsr	0,__pdataBANK0
   850  002D6C  EE10 F018          	lfsr	1,24
   851  002D70                     copy_data0:
   852  002D70  0009               	tblrd		*+
   853  002D72  CFF5 FFEE          	movff	tablat,postinc0
   854  002D76  50E5               	movf	postdec1,w,c
   855  002D78  50E1               	movf	fsr1l,w,c
   856  002D7A  E1FA               	bnz	copy_data0
   857                           
   858                           ; Clear objects allocated to BIGRAM (512 bytes)
   859  002D7C  EE02  F05F         	lfsr	0,__pbssBIGRAM
   860  002D80  EE12 F000          	lfsr	1,512
   861  002D84                     clear_0:
   862  002D84  6AEE               	clrf	postinc0,c
   863  002D86  50E5               	movf	postdec1,w,c
   864  002D88  50E1               	movf	fsr1l,w,c
   865  002D8A  E1FC               	bnz	clear_0
   866  002D8C  50E2               	movf	fsr1h,w,c
   867  002D8E  E1FA               	bnz	clear_0
   868                           
   869                           ; Clear objects allocated to BANK2 (70 bytes)
   870  002D90  EE02  F000         	lfsr	0,__pbssBANK2
   871  002D94  0E46               	movlw	70
   872  002D96                     clear_1:
   873  002D96  6AEE               	clrf	postinc0,c
   874  002D98  06E8               	decf	wreg,f,c
   875  002D9A  E1FD               	bnz	clear_1
   876                           
   877                           ; Clear objects allocated to BANK1 (253 bytes)
   878  002D9C  EE01  F000         	lfsr	0,__pbssBANK1
   879  002DA0  0EFD               	movlw	253
   880  002DA2                     clear_2:
   881  002DA2  6AEE               	clrf	postinc0,c
   882  002DA4  06E8               	decf	wreg,f,c
   883  002DA6  E1FD               	bnz	clear_2
   884                           
   885                           ; Clear objects allocated to BANK0 (46 bytes)
   886  002DA8  EE00  F0AE         	lfsr	0,__pbssBANK0
   887  002DAC  0E2E               	movlw	46
   888  002DAE                     clear_3:
   889  002DAE  6AEE               	clrf	postinc0,c
   890  002DB0  06E8               	decf	wreg,f,c
   891  002DB2  E1FD               	bnz	clear_3
   892                           
   893                           ; Clear objects allocated to COMRAM (21 bytes)
   894  002DB4  EE00  F035         	lfsr	0,__pbssCOMRAM
   895  002DB8  0E15               	movlw	21
   896  002DBA                     clear_4:
   897  002DBA  6AEE               	clrf	postinc0,c
   898  002DBC  06E8               	decf	wreg,f,c
   899  002DBE  E1FD               	bnz	clear_4
   900  002DC0                     end_of_initialization:
   901                           	opt stack 0
   902  002DC0                     __end_of__initialization:
   903                           	opt stack 0
   904  002DC0  904A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   905  002DC2  924A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   906  002DC4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   907  002DC6  6EF8               	movwf	tblptru,c
   908  002DC8  0100               	movlb	0
   909  002DCA  EFBD  F019         	goto	_main	;jump to C main() function
   910                           tblptru	equ	0xFF8
   911                           tblptrh	equ	0xFF7
   912                           tblptrl	equ	0xFF6
   913                           tablat	equ	0xFF5
   914                           postinc0	equ	0xFEE
   915                           wreg	equ	0xFE8
   916                           postdec1	equ	0xFE5
   917                           fsr1h	equ	0xFE2
   918                           fsr1l	equ	0xFE1
   919                           
   920                           	psect	bssCOMRAM
   921  000035                     __pbssCOMRAM:
   922                           	opt stack 0
   923  000035                     _GGA_CODE:
   924                           	opt stack 0
   925  000035                     	ds	3
   926  000038                     _FatFs:
   927                           	opt stack 0
   928  000038                     	ds	2
   929  00003A                     _RMC_Index:
   930                           	opt stack 0
   931  00003A                     	ds	2
   932  00003C                     _GGA_Index:
   933                           	opt stack 0
   934  00003C                     	ds	2
   935  00003E                     timer_dois@flag:
   936                           	opt stack 0
   937  00003E                     	ds	1
   938  00003F                     _estado:
   939                           	opt stack 0
   940  00003F                     	ds	1
   941  000040                     _dado:
   942                           	opt stack 0
   943  000040                     	ds	1
   944  000041                     _s:
   945                           	opt stack 0
   946  000041                     	ds	1
   947  000042                     _Result:
   948                           	opt stack 0
   949  000042                     	ds	1
   950  000043                     _CommaCounter_RMC:
   951                           	opt stack 0
   952  000043                     	ds	1
   953  000044                     _IsItRMCString:
   954                           	opt stack 0
   955  000044                     	ds	1
   956  000045                     _IsItGGAString:
   957                           	opt stack 0
   958  000045                     	ds	1
   959  000046                     _CommaCounter_GGA:
   960                           	opt stack 0
   961  000046                     	ds	1
   962  000047                     _tarefa_em_execucao:
   963                           	opt stack 0
   964  000047                     	ds	1
   965  000048                     _sinaliza_int_timer:
   966                           	opt stack 0
   967  000048                     	ds	1
   968  000049                     _data_uart_recebe:
   969                           	opt stack 0
   970  000049                     	ds	1
   971                           tblptru	equ	0xFF8
   972                           tblptrh	equ	0xFF7
   973                           tblptrl	equ	0xFF6
   974                           tablat	equ	0xFF5
   975                           postinc0	equ	0xFEE
   976                           wreg	equ	0xFE8
   977                           postdec1	equ	0xFE5
   978                           fsr1h	equ	0xFE2
   979                           fsr1l	equ	0xFE1
   980                           
   981                           	psect	bssBANK0
   982  0000AE                     __pbssBANK0:
   983                           	opt stack 0
   984  0000AE                     _RMC_Pointers:
   985                           	opt stack 0
   986  0000AE                     	ds	12
   987  0000BA                     _info_chaves:
   988                           	opt stack 0
   989  0000BA                     	ds	7
   990  0000C1                     _fileSize:
   991                           	opt stack 0
   992  0000C1                     	ds	4
   993  0000C5                     _tempo_tarefa:
   994                           	opt stack 0
   995  0000C5                     	ds	4
   996  0000C9                     _tempo_backup:
   997                           	opt stack 0
   998  0000C9                     	ds	4
   999  0000CD                     _p_tarefas:
  1000                           	opt stack 0
  1001  0000CD                     	ds	4
  1002  0000D1                     _RMC_CODE:
  1003                           	opt stack 0
  1004  0000D1                     	ds	3
  1005  0000D4                     _flag:
  1006                           	opt stack 0
  1007  0000D4                     	ds	2
  1008  0000D6                     _rd:
  1009                           	opt stack 0
  1010  0000D6                     	ds	2
  1011  0000D8                     _timeout_tarefa:
  1012                           	opt stack 0
  1013  0000D8                     	ds	2
  1014  0000DA                     _E_W:
  1015                           	opt stack 0
  1016  0000DA                     	ds	1
  1017  0000DB                     _N_S:
  1018                           	opt stack 0
  1019  0000DB                     	ds	1
  1020                           tblptru	equ	0xFF8
  1021                           tblptrh	equ	0xFF7
  1022                           tblptrl	equ	0xFF6
  1023                           tablat	equ	0xFF5
  1024                           postinc0	equ	0xFEE
  1025                           wreg	equ	0xFE8
  1026                           postdec1	equ	0xFE5
  1027                           fsr1h	equ	0xFE2
  1028                           fsr1l	equ	0xFE1
  1029                           
  1030                           	psect	dataBANK0
  1031  0000DC                     __pdataBANK0:
  1032                           	opt stack 0
  1033  0000DC                     _fileName:
  1034                           	opt stack 0
  1035  0000DC                     	ds	10
  1036  0000E6                     escreve_inteiro_uart@F3952:
  1037                           	opt stack 0
  1038  0000E6                     	ds	7
  1039  0000ED                     escreve_inteiro_lcd@F3962:
  1040                           	opt stack 0
  1041  0000ED                     	ds	7
  1042                           tblptru	equ	0xFF8
  1043                           tblptrh	equ	0xFF7
  1044                           tblptrl	equ	0xFF6
  1045                           tablat	equ	0xFF5
  1046                           postinc0	equ	0xFEE
  1047                           wreg	equ	0xFE8
  1048                           postdec1	equ	0xFE5
  1049                           fsr1h	equ	0xFE2
  1050                           fsr1l	equ	0xFE1
  1051                           
  1052                           	psect	bssBANK1
  1053  000100                     __pbssBANK1:
  1054                           	opt stack 0
  1055  000100                     _GGA_Buffer:
  1056                           	opt stack 0
  1057  000100                     	ds	80
  1058  000150                     _folder:
  1059                           	opt stack 0
  1060  000150                     	ds	48
  1061  000180                     _valor_leitura_adc:
  1062                           	opt stack 0
  1063  000180                     	ds	38
  1064  0001A6                     _txt:
  1065                           	opt stack 0
  1066  0001A6                     	ds	20
  1067  0001BA                     _GGA_Pointers:
  1068                           	opt stack 0
  1069  0001BA                     	ds	20
  1070  0001CE                     _data_buffer_32:
  1071                           	opt stack 0
  1072  0001CE                     	ds	32
  1073  0001EE                     _Data_Buffer:
  1074                           	opt stack 0
  1075  0001EE                     	ds	15
  1076                           tblptru	equ	0xFF8
  1077                           tblptrh	equ	0xFF7
  1078                           tblptrl	equ	0xFF6
  1079                           tablat	equ	0xFF5
  1080                           postinc0	equ	0xFEE
  1081                           wreg	equ	0xFE8
  1082                           postdec1	equ	0xFE5
  1083                           fsr1h	equ	0xFE2
  1084                           fsr1l	equ	0xFE1
  1085                           
  1086                           	psect	bssBANK2
  1087  000200                     __pbssBANK2:
  1088                           	opt stack 0
  1089  000200                     _RMC_Buffer:
  1090                           	opt stack 0
  1091  000200                     	ds	70
  1092                           tblptru	equ	0xFF8
  1093                           tblptrh	equ	0xFF7
  1094                           tblptrl	equ	0xFF6
  1095                           tablat	equ	0xFF5
  1096                           postinc0	equ	0xFEE
  1097                           wreg	equ	0xFE8
  1098                           postdec1	equ	0xFE5
  1099                           fsr1h	equ	0xFE2
  1100                           fsr1l	equ	0xFE1
  1101                           
  1102                           	psect	bssBIGRAM
  1103  00025F                     __pbssBIGRAM:
  1104                           	opt stack 0
  1105  00025F                     disk_readp@arr:
  1106                           	opt stack 0
  1107  00025F                     	ds	512
  1108                           tblptru	equ	0xFF8
  1109                           tblptrh	equ	0xFF7
  1110                           tblptrl	equ	0xFF6
  1111                           tablat	equ	0xFF5
  1112                           postinc0	equ	0xFEE
  1113                           wreg	equ	0xFE8
  1114                           postdec1	equ	0xFE5
  1115                           fsr1h	equ	0xFE2
  1116                           fsr1l	equ	0xFE1
  1117                           
  1118                           	psect	cstackBANK2
  1119  000246                     __pcstackBANK2:
  1120                           	opt stack 0
  1121  000246                     GPS@GPS_Buffer:
  1122                           	opt stack 0
  1123                           
  1124                           ; 15 bytes @ 0x0
  1125  000246                     	ds	15
  1126  000255                     GPS@date:
  1127                           	opt stack 0
  1128                           
  1129                           ; 4 bytes @ 0xF
  1130  000255                     	ds	4
  1131  000259                     GPS@Latitude:
  1132                           	opt stack 0
  1133                           
  1134                           ; 3 bytes @ 0x13
  1135  000259                     	ds	3
  1136  00025C                     GPS@Longitude:
  1137                           	opt stack 0
  1138                           
  1139                           ; 3 bytes @ 0x16
  1140  00025C                     	ds	3
  1141                           tblptru	equ	0xFF8
  1142                           tblptrh	equ	0xFF7
  1143                           tblptrl	equ	0xFF6
  1144                           tablat	equ	0xFF5
  1145                           postinc0	equ	0xFEE
  1146                           wreg	equ	0xFE8
  1147                           postdec1	equ	0xFE5
  1148                           fsr1h	equ	0xFE2
  1149                           fsr1l	equ	0xFE1
  1150                           
  1151                           	psect	cstackBANK0
  1152  000060                     __pcstackBANK0:
  1153                           	opt stack 0
  1154  000060                     ??_get_date:
  1155  000060                     ___ftmul@exp:
  1156                           	opt stack 0
  1157  000060                     escreve_inteiro_lcd@texto:
  1158                           	opt stack 0
  1159  000060                     mensagem_inicial@msg_linha_um:
  1160                           	opt stack 0
  1161                           
  1162                           ; 17 bytes @ 0x0
  1163  000060                     	ds	1
  1164  000061                     ___ftmul@f3_as_product:
  1165                           	opt stack 0
  1166                           
  1167                           ; 3 bytes @ 0x1
  1168  000061                     	ds	1
  1169  000062                     get_date@date_buffer:
  1170                           	opt stack 0
  1171                           
  1172                           ; 6 bytes @ 0x2
  1173  000062                     	ds	2
  1174  000064                     ___ftmul@cntr:
  1175                           	opt stack 0
  1176                           
  1177                           ; 1 bytes @ 0x4
  1178  000064                     	ds	1
  1179  000065                     ___ftmul@sign:
  1180                           	opt stack 0
  1181                           
  1182                           ; 1 bytes @ 0x5
  1183  000065                     	ds	1
  1184  000066                     ?_fround:
  1185                           	opt stack 0
  1186  000066                     ?_scale:
  1187                           	opt stack 0
  1188  000066                     ?___ftneg:
  1189                           	opt stack 0
  1190  000066                     ___ftneg@f1:
  1191                           	opt stack 0
  1192                           
  1193                           ; 3 bytes @ 0x6
  1194  000066                     	ds	2
  1195  000068                     get_date@_date:
  1196                           	opt stack 0
  1197                           
  1198                           ; 4 bytes @ 0x8
  1199  000068                     	ds	1
  1200  000069                     ?_strtod:
  1201                           	opt stack 0
  1202  000069                     strtod@s:
  1203                           	opt stack 0
  1204  000069                     _fround$3376:
  1205                           	opt stack 0
  1206  000069                     _scale$3377:
  1207                           	opt stack 0
  1208                           
  1209                           ; 3 bytes @ 0x9
  1210  000069                     	ds	2
  1211  00006B                     strtod@res:
  1212                           	opt stack 0
  1213                           
  1214                           ; 2 bytes @ 0xB
  1215  00006B                     	ds	1
  1216  00006C                     get_date@date_pointer:
  1217                           	opt stack 0
  1218  00006C                     scale@scl:
  1219                           	opt stack 0
  1220  00006C                     _fround$3375:
  1221                           	opt stack 0
  1222                           
  1223                           ; 3 bytes @ 0xC
  1224  00006C                     	ds	1
  1225  00006D                     ?___fttol:
  1226                           	opt stack 0
  1227  00006D                     get_date@date_index:
  1228                           	opt stack 0
  1229  00006D                     strtod@eexp:
  1230                           	opt stack 0
  1231  00006D                     ___fttol@f1:
  1232                           	opt stack 0
  1233                           
  1234                           ; 3 bytes @ 0xD
  1235  00006D                     	ds	1
  1236  00006E                     get_date@index:
  1237                           	opt stack 0
  1238  00006E                     strtod@flags:
  1239                           	opt stack 0
  1240                           
  1241                           ; 1 bytes @ 0xE
  1242  00006E                     	ds	1
  1243  00006F                     fround@prec:
  1244                           	opt stack 0
  1245  00006F                     strtod@expon:
  1246                           	opt stack 0
  1247  00006F                     get_date@i:
  1248                           	opt stack 0
  1249                           
  1250                           ; 2 bytes @ 0xF
  1251  00006F                     	ds	1
  1252  000070                     ?___ftadd:
  1253                           	opt stack 0
  1254  000070                     ___ftadd@f1:
  1255                           	opt stack 0
  1256  000070                     strtod@_u:
  1257                           	opt stack 0
  1258                           
  1259                           ; 4 bytes @ 0x10
  1260  000070                     	ds	1
  1261  000071                     ??___fttol:
  1262  000071                     mensagem_inicial@msg_dois:
  1263                           	opt stack 0
  1264                           
  1265                           ; 17 bytes @ 0x11
  1266  000071                     	ds	2
  1267  000073                     ___ftadd@f2:
  1268                           	opt stack 0
  1269                           
  1270                           ; 3 bytes @ 0x13
  1271  000073                     	ds	1
  1272  000074                     ?_atof:
  1273                           	opt stack 0
  1274  000074                     atof@s:
  1275                           	opt stack 0
  1276                           
  1277                           ; 2 bytes @ 0x14
  1278  000074                     	ds	2
  1279  000076                     ??___ftadd:
  1280  000076                     ___fttol@sign1:
  1281                           	opt stack 0
  1282                           
  1283                           ; 1 bytes @ 0x16
  1284  000076                     	ds	1
  1285  000077                     ?_get_latitude:
  1286                           	opt stack 0
  1287  000077                     ?_get_longitude:
  1288                           	opt stack 0
  1289  000077                     ___fttol@lval:
  1290                           	opt stack 0
  1291                           
  1292                           ; 4 bytes @ 0x17
  1293  000077                     	ds	2
  1294  000079                     ___ftadd@sign:
  1295                           	opt stack 0
  1296                           
  1297                           ; 1 bytes @ 0x19
  1298  000079                     	ds	1
  1299  00007A                     ___ftadd@exp2:
  1300                           	opt stack 0
  1301  00007A                     get_latitude@Lat_Buffer:
  1302                           	opt stack 0
  1303  00007A                     get_longitude@Long_Buffer:
  1304                           	opt stack 0
  1305                           
  1306                           ; 15 bytes @ 0x1A
  1307  00007A                     	ds	1
  1308  00007B                     ___ftadd@exp1:
  1309                           	opt stack 0
  1310  00007B                     ___fttol@exp1:
  1311                           	opt stack 0
  1312                           
  1313                           ; 1 bytes @ 0x1B
  1314  00007B                     	ds	1
  1315  00007C                     ?_convert_to_degrees:
  1316                           	opt stack 0
  1317  00007C                     ?___ftsub:
  1318                           	opt stack 0
  1319  00007C                     convert_to_degrees@NMEA_lat_long:
  1320                           	opt stack 0
  1321  00007C                     ___ftsub@f1:
  1322                           	opt stack 0
  1323                           
  1324                           ; 3 bytes @ 0x1C
  1325  00007C                     	ds	3
  1326  00007F                     convert_to_degrees@minutes:
  1327                           	opt stack 0
  1328  00007F                     ___ftsub@f2:
  1329                           	opt stack 0
  1330                           
  1331                           ; 3 bytes @ 0x1F
  1332  00007F                     	ds	3
  1333  000082                     ?_sprintf:
  1334                           	opt stack 0
  1335  000082                     sprintf@sp:
  1336                           	opt stack 0
  1337  000082                     convert_to_degrees@dec_deg:
  1338                           	opt stack 0
  1339                           
  1340                           ; 3 bytes @ 0x22
  1341  000082                     	ds	2
  1342  000084                     sprintf@f:
  1343                           	opt stack 0
  1344                           
  1345                           ; 2 bytes @ 0x24
  1346  000084                     	ds	1
  1347  000085                     convert_to_degrees@degrees:
  1348                           	opt stack 0
  1349                           
  1350                           ; 2 bytes @ 0x25
  1351  000085                     	ds	2
  1352  000087                     convert_to_degrees@decimal:
  1353                           	opt stack 0
  1354                           
  1355                           ; 3 bytes @ 0x27
  1356  000087                     	ds	2
  1357  000089                     get_latitude@_latitude:
  1358                           	opt stack 0
  1359  000089                     get_longitude@_longitude:
  1360                           	opt stack 0
  1361                           
  1362                           ; 3 bytes @ 0x29
  1363  000089                     	ds	3
  1364  00008C                     ??_sprintf:
  1365  00008C                     get_latitude@lat_pointer:
  1366                           	opt stack 0
  1367  00008C                     get_longitude@long_pointer:
  1368                           	opt stack 0
  1369                           
  1370                           ; 1 bytes @ 0x2C
  1371  00008C                     	ds	1
  1372  00008D                     get_latitude@index:
  1373                           	opt stack 0
  1374  00008D                     get_longitude@index:
  1375                           	opt stack 0
  1376                           
  1377                           ; 1 bytes @ 0x2D
  1378  00008D                     	ds	1
  1379  00008E                     get_latitude@lat_index:
  1380                           	opt stack 0
  1381  00008E                     get_longitude@long_index:
  1382                           	opt stack 0
  1383                           
  1384                           ; 1 bytes @ 0x2E
  1385  00008E                     	ds	4
  1386  000092                     _sprintf$3378:
  1387                           	opt stack 0
  1388                           
  1389                           ; 3 bytes @ 0x32
  1390  000092                     	ds	3
  1391  000095                     sprintf@ap:
  1392                           	opt stack 0
  1393                           
  1394                           ; 2 bytes @ 0x35
  1395  000095                     	ds	2
  1396  000097                     sprintf@flag:
  1397                           	opt stack 0
  1398                           
  1399                           ; 2 bytes @ 0x37
  1400  000097                     	ds	2
  1401  000099                     sprintf@exp:
  1402                           	opt stack 0
  1403                           
  1404                           ; 2 bytes @ 0x39
  1405  000099                     	ds	2
  1406  00009B                     sprintf@tmpval:
  1407                           	opt stack 0
  1408                           
  1409                           ; 4 bytes @ 0x3B
  1410  00009B                     	ds	4
  1411  00009F                     sprintf@val:
  1412                           	opt stack 0
  1413                           
  1414                           ; 4 bytes @ 0x3F
  1415  00009F                     	ds	4
  1416  0000A3                     sprintf@prec:
  1417                           	opt stack 0
  1418                           
  1419                           ; 2 bytes @ 0x43
  1420  0000A3                     	ds	2
  1421  0000A5                     sprintf@fval:
  1422                           	opt stack 0
  1423                           
  1424                           ; 3 bytes @ 0x45
  1425  0000A5                     	ds	3
  1426  0000A8                     sprintf@c:
  1427                           	opt stack 0
  1428                           
  1429                           ; 1 bytes @ 0x48
  1430  0000A8                     	ds	1
  1431  0000A9                     ??_GPS:
  1432                           
  1433                           ; 1 bytes @ 0x49
  1434  0000A9                     	ds	2
  1435  0000AB                     
  1436                           ; 1 bytes @ 0x4B
  1437  0000AB                     	ds	2
  1438  0000AD                     escalonador@cont:
  1439                           	opt stack 0
  1440                           
  1441                           ; 1 bytes @ 0x4D
  1442  0000AD                     	ds	1
  1443                           tblptru	equ	0xFF8
  1444                           tblptrh	equ	0xFF7
  1445                           tblptrl	equ	0xFF6
  1446                           tablat	equ	0xFF5
  1447                           postinc0	equ	0xFEE
  1448                           wreg	equ	0xFE8
  1449                           postdec1	equ	0xFE5
  1450                           fsr1h	equ	0xFE2
  1451                           fsr1l	equ	0xFE1
  1452                           
  1453                           	psect	cstackCOMRAM
  1454  000001                     __pcstackCOMRAM:
  1455                           	opt stack 0
  1456  000001                     tratamento_uart@received_char:
  1457                           	opt stack 0
  1458  000001                     i2write_timer_zero@timer0:
  1459                           	opt stack 0
  1460                           
  1461                           ; 2 bytes @ 0x0
  1462  000001                     	ds	2
  1463  000003                     i2write_timer_zero@timer:
  1464                           	opt stack 0
  1465                           
  1466                           ; 2 bytes @ 0x2
  1467  000003                     	ds	2
  1468  000005                     ??_isr:
  1469                           
  1470                           ; 1 bytes @ 0x4
  1471  000005                     	ds	16
  1472  000015                     isr@cont:
  1473                           	opt stack 0
  1474                           
  1475                           ; 1 bytes @ 0x14
  1476  000015                     	ds	1
  1477  000016                     ??_isdigit:
  1478  000016                     ??_isspace:
  1479  000016                     ?_leitura_adc:
  1480                           	opt stack 0
  1481  000016                     ?___awmod:
  1482                           	opt stack 0
  1483  000016                     ?___lwdiv:
  1484                           	opt stack 0
  1485  000016                     ?___lwmod:
  1486                           	opt stack 0
  1487  000016                     ?___ftpack:
  1488                           	opt stack 0
  1489  000016                     ?__tdiv_to_l_:
  1490                           	opt stack 0
  1491  000016                     ?__div_to_l_:
  1492                           	opt stack 0
  1493  000016                     ?___lmul:
  1494                           	opt stack 0
  1495  000016                     ?___aldiv:
  1496                           	opt stack 0
  1497  000016                     ?___lldiv:
  1498                           	opt stack 0
  1499  000016                     envia_dados_shrc@contador:
  1500                           	opt stack 0
  1501  000016                     delay@contador_ext:
  1502                           	opt stack 0
  1503  000016                     write_timer_zero@timer0:
  1504                           	opt stack 0
  1505  000016                     ___awmod@dividend:
  1506                           	opt stack 0
  1507  000016                     ___lwdiv@dividend:
  1508                           	opt stack 0
  1509  000016                     ___lwmod@dividend:
  1510                           	opt stack 0
  1511  000016                     memset@p1:
  1512                           	opt stack 0
  1513  000016                     __div_to_l_@f1:
  1514                           	opt stack 0
  1515  000016                     ___ftpack@arg:
  1516                           	opt stack 0
  1517  000016                     __tdiv_to_l_@f1:
  1518                           	opt stack 0
  1519  000016                     ___ftge@ff1:
  1520                           	opt stack 0
  1521  000016                     ___lmul@multiplier:
  1522                           	opt stack 0
  1523  000016                     ___aldiv@dividend:
  1524                           	opt stack 0
  1525  000016                     ___lldiv@dividend:
  1526                           	opt stack 0
  1527                           
  1528                           ; 4 bytes @ 0x15
  1529  000016                     	ds	1
  1530  000017                     envia_dados_shrc@data_to_shrc:
  1531                           	opt stack 0
  1532  000017                     delay@contador_int:
  1533                           	opt stack 0
  1534  000017                     _isdigit$2850:
  1535                           	opt stack 0
  1536  000017                     _isspace$2853:
  1537                           	opt stack 0
  1538                           
  1539                           ; 1 bytes @ 0x16
  1540  000017                     	ds	1
  1541  000018                     ??_leitura_adc:
  1542  000018                     escreve_cmd_lcd@comando:
  1543                           	opt stack 0
  1544  000018                     endereco_cursor_lcd@endereco:
  1545                           	opt stack 0
  1546  000018                     escreve_caractere_lcd@data:
  1547                           	opt stack 0
  1548  000018                     isdigit@c:
  1549                           	opt stack 0
  1550  000018                     isspace@c:
  1551                           	opt stack 0
  1552  000018                     write_timer_zero@timer:
  1553                           	opt stack 0
  1554  000018                     ___awmod@divisor:
  1555                           	opt stack 0
  1556  000018                     ___lwdiv@divisor:
  1557                           	opt stack 0
  1558  000018                     ___lwmod@divisor:
  1559                           	opt stack 0
  1560  000018                     memset@c:
  1561                           	opt stack 0
  1562                           
  1563                           ; 2 bytes @ 0x17
  1564  000018                     	ds	1
  1565  000019                     ??_init_lcd:
  1566  000019                     posicao_cursor_lcd@coluna:
  1567                           	opt stack 0
  1568  000019                     ___ftpack@exp:
  1569                           	opt stack 0
  1570  000019                     escreve_frase_ram_lcd@buffer:
  1571                           	opt stack 0
  1572  000019                     __div_to_l_@f2:
  1573                           	opt stack 0
  1574  000019                     __tdiv_to_l_@f2:
  1575                           	opt stack 0
  1576  000019                     ___ftge@ff2:
  1577                           	opt stack 0
  1578                           
  1579                           ; 3 bytes @ 0x18
  1580  000019                     	ds	1
  1581  00001A                     posicao_cursor_lcd@linha:
  1582                           	opt stack 0
  1583  00001A                     ___awmod@counter:
  1584                           	opt stack 0
  1585  00001A                     ___ftpack@sign:
  1586                           	opt stack 0
  1587  00001A                     ___lwdiv@counter:
  1588                           	opt stack 0
  1589  00001A                     ___lwmod@counter:
  1590                           	opt stack 0
  1591  00001A                     memset@n:
  1592                           	opt stack 0
  1593  00001A                     ___lmul@multiplicand:
  1594                           	opt stack 0
  1595  00001A                     ___aldiv@divisor:
  1596                           	opt stack 0
  1597  00001A                     ___lldiv@divisor:
  1598                           	opt stack 0
  1599                           
  1600                           ; 4 bytes @ 0x19
  1601  00001A                     	ds	1
  1602  00001B                     ??___ftpack:
  1603  00001B                     posicao_cursor_lcd@endereco:
  1604                           	opt stack 0
  1605  00001B                     ___awmod@sign:
  1606                           	opt stack 0
  1607  00001B                     ___lwdiv@quotient:
  1608                           	opt stack 0
  1609                           
  1610                           ; 2 bytes @ 0x1A
  1611  00001B                     	ds	1
  1612  00001C                     ??_mensagem_inicial:
  1613  00001C                     ??__tdiv_to_l_:
  1614  00001C                     ??___ftge:
  1615  00001C                     ?___awdiv:
  1616                           	opt stack 0
  1617  00001C                     leitura_adc@canal:
  1618                           	opt stack 0
  1619  00001C                     ___awdiv@dividend:
  1620                           	opt stack 0
  1621  00001C                     memset@p:
  1622                           	opt stack 0
  1623  00001C                     __div_to_l_@quot:
  1624                           	opt stack 0
  1625                           
  1626                           ; 4 bytes @ 0x1B
  1627  00001C                     	ds	1
  1628  00001D                     ??_leitura_continua_adc:
  1629  00001D                     utoa@buf:
  1630                           	opt stack 0
  1631                           
  1632                           ; 2 bytes @ 0x1C
  1633  00001D                     	ds	1
  1634  00001E                     ?___ftdiv:
  1635                           	opt stack 0
  1636  00001E                     ?___altoft:
  1637                           	opt stack 0
  1638  00001E                     ?___awtoft:
  1639                           	opt stack 0
  1640  00001E                     ?___lltoft:
  1641                           	opt stack 0
  1642  00001E                     ___aldiv@counter:
  1643                           	opt stack 0
  1644  00001E                     ___awdiv@divisor:
  1645                           	opt stack 0
  1646  00001E                     ___awtoft@c:
  1647                           	opt stack 0
  1648  00001E                     ___ftdiv@f1:
  1649                           	opt stack 0
  1650  00001E                     ___lmul@product:
  1651                           	opt stack 0
  1652  00001E                     ___altoft@c:
  1653                           	opt stack 0
  1654  00001E                     ___lldiv@quotient:
  1655                           	opt stack 0
  1656  00001E                     ___lltoft@c:
  1657                           	opt stack 0
  1658                           
  1659                           ; 4 bytes @ 0x1D
  1660  00001E                     	ds	1
  1661  00001F                     ___aldiv@sign:
  1662                           	opt stack 0
  1663  00001F                     utoa@val:
  1664                           	opt stack 0
  1665  00001F                     __tdiv_to_l_@quot:
  1666                           	opt stack 0
  1667                           
  1668                           ; 4 bytes @ 0x1E
  1669  00001F                     	ds	1
  1670  000020                     ___awdiv@counter:
  1671                           	opt stack 0
  1672  000020                     __div_to_l_@cntr:
  1673                           	opt stack 0
  1674  000020                     ___aldiv@quotient:
  1675                           	opt stack 0
  1676                           
  1677                           ; 4 bytes @ 0x1F
  1678  000020                     	ds	1
  1679  000021                     ___awdiv@sign:
  1680                           	opt stack 0
  1681  000021                     ___awtoft@sign:
  1682                           	opt stack 0
  1683  000021                     __div_to_l_@exp1:
  1684                           	opt stack 0
  1685  000021                     utoa@base:
  1686                           	opt stack 0
  1687  000021                     ___ftdiv@f2:
  1688                           	opt stack 0
  1689                           
  1690                           ; 3 bytes @ 0x20
  1691  000021                     	ds	1
  1692  000022                     ??___altoft:
  1693  000022                     ??___lltoft:
  1694  000022                     ?_atol:
  1695                           	opt stack 0
  1696  000022                     ___lldiv@counter:
  1697                           	opt stack 0
  1698  000022                     atol@s:
  1699                           	opt stack 0
  1700  000022                     ___awdiv@quotient:
  1701                           	opt stack 0
  1702                           
  1703                           ; 2 bytes @ 0x21
  1704  000022                     	ds	1
  1705  000023                     ?___llmod:
  1706                           	opt stack 0
  1707  000023                     leitura_continua_adc@cont_int:
  1708                           	opt stack 0
  1709  000023                     __tdiv_to_l_@cntr:
  1710                           	opt stack 0
  1711  000023                     utoa@v:
  1712                           	opt stack 0
  1713  000023                     ___llmod@dividend:
  1714                           	opt stack 0
  1715                           
  1716                           ; 4 bytes @ 0x22
  1717  000023                     	ds	1
  1718  000024                     ??___ftdiv:
  1719  000024                     ?___wmul:
  1720                           	opt stack 0
  1721  000024                     leitura_continua_adc@cont:
  1722                           	opt stack 0
  1723  000024                     __tdiv_to_l_@exp1:
  1724                           	opt stack 0
  1725  000024                     ___wmul@multiplier:
  1726                           	opt stack 0
  1727  000024                     configura_baudrate_uart@baudrate:
  1728                           	opt stack 0
  1729                           
  1730                           ; 4 bytes @ 0x23
  1731  000024                     	ds	1
  1732  000025                     utoa@c:
  1733                           	opt stack 0
  1734                           
  1735                           ; 1 bytes @ 0x24
  1736  000025                     	ds	1
  1737  000026                     ??_atol:
  1738  000026                     ___altoft@exp:
  1739                           	opt stack 0
  1740  000026                     ___lltoft@exp:
  1741                           	opt stack 0
  1742  000026                     ___wmul@multiplicand:
  1743                           	opt stack 0
  1744  000026                     itoa@buf:
  1745                           	opt stack 0
  1746                           
  1747                           ; 2 bytes @ 0x25
  1748  000026                     	ds	1
  1749  000027                     ___altoft@sign:
  1750                           	opt stack 0
  1751  000027                     ___ftdiv@cntr:
  1752                           	opt stack 0
  1753  000027                     ___llmod@divisor:
  1754                           	opt stack 0
  1755                           
  1756                           ; 4 bytes @ 0x26
  1757  000027                     	ds	1
  1758  000028                     ??_configura_baudrate_uart:
  1759  000028                     ___wmul@product:
  1760                           	opt stack 0
  1761  000028                     itoa@val:
  1762                           	opt stack 0
  1763  000028                     ___ftdiv@f3:
  1764                           	opt stack 0
  1765                           
  1766                           ; 3 bytes @ 0x27
  1767  000028                     	ds	2
  1768  00002A                     ?___ftmul:
  1769                           	opt stack 0
  1770  00002A                     atol@sign:
  1771                           	opt stack 0
  1772  00002A                     itoa@base:
  1773                           	opt stack 0
  1774  00002A                     ___ftmul@f1:
  1775                           	opt stack 0
  1776                           
  1777                           ; 3 bytes @ 0x29
  1778  00002A                     	ds	1
  1779  00002B                     ___ftdiv@exp:
  1780                           	opt stack 0
  1781  00002B                     ___llmod@counter:
  1782                           	opt stack 0
  1783  00002B                     atol@a:
  1784                           	opt stack 0
  1785                           
  1786                           ; 4 bytes @ 0x2A
  1787  00002B                     	ds	1
  1788  00002C                     ___ftdiv@sign:
  1789                           	opt stack 0
  1790  00002C                     itoa@cp:
  1791                           	opt stack 0
  1792                           
  1793                           ; 2 bytes @ 0x2B
  1794  00002C                     	ds	1
  1795  00002D                     ___ftmul@f2:
  1796                           	opt stack 0
  1797                           
  1798                           ; 3 bytes @ 0x2C
  1799  00002D                     	ds	1
  1800  00002E                     escreve_inteiro_lcd@valor:
  1801                           	opt stack 0
  1802                           
  1803                           ; 2 bytes @ 0x2D
  1804  00002E                     	ds	1
  1805  00002F                     atol@c:
  1806                           	opt stack 0
  1807                           
  1808                           ; 1 bytes @ 0x2E
  1809  00002F                     	ds	1
  1810  000030                     ??___ftmul:
  1811  000030                     ?_get_date:
  1812                           	opt stack 0
  1813  000030                     configura_baudrate_uart@x:
  1814                           	opt stack 0
  1815                           
  1816                           ; 2 bytes @ 0x2F
  1817  000030                     	ds	2
  1818  000032                     
  1819                           ; 1 bytes @ 0x31
  1820  000032                     	ds	1
  1821  000033                     ??_strtod:
  1822  000033                     
  1823                           ; 1 bytes @ 0x32
  1824  000033                     	ds	1
  1825  000034                     
  1826                           ; 1 bytes @ 0x33
  1827  000034                     	ds	1
  1828  000035                     tblptru	equ	0xFF8
  1829                           tblptrh	equ	0xFF7
  1830                           tblptrl	equ	0xFF6
  1831                           tablat	equ	0xFF5
  1832                           postinc0	equ	0xFEE
  1833                           wreg	equ	0xFE8
  1834                           postdec1	equ	0xFE5
  1835                           fsr1h	equ	0xFE2
  1836                           fsr1l	equ	0xFE1
  1837                           
  1838                           ; 1 bytes @ 0x34
  1839 ;;
  1840 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1841 ;;
  1842 ;; *************** function _main *****************
  1843 ;; Defined at:
  1844 ;;		line 205 in file "main.c"
  1845 ;; Parameters:    Size  Location     Type
  1846 ;;		None
  1847 ;; Auto vars:     Size  Location     Type
  1848 ;;		None
  1849 ;; Return value:  Size  Location     Type
  1850 ;;                  1    wreg      void 
  1851 ;; Registers used:
  1852 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  1853 ;; Tracked objects:
  1854 ;;		On entry : 0/0
  1855 ;;		On exit  : 0/0
  1856 ;;		Unchanged: 0/0
  1857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1858 ;;      Params:         0       0       0       0       0       0       0       0       0
  1859 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1860 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1861 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1862 ;;Total ram usage:        0 bytes
  1863 ;; Hardware stack levels required when called:    9
  1864 ;; This function calls:
  1865 ;;		_controle_shrc
  1866 ;;		_escalonador
  1867 ;;		_inicializa_shrc
  1868 ;;		_inicializa_tarefas
  1869 ;;		_inicializa_uart
  1870 ;;		_init_hardware
  1871 ;;		_init_lcd
  1872 ;;		_leitura_chaves_sistema
  1873 ;;		_leitura_continua_adc
  1874 ;;		_mensagem_inicial
  1875 ;; This function is called by:
  1876 ;;		Startup code after reset
  1877 ;; This function uses a non-reentrant model
  1878 ;;
  1879                           
  1880                           	psect	text0
  1881  00337A                     __ptext0:
  1882                           	opt stack 0
  1883  00337A                     _main:
  1884                           	opt stack 22
  1885                           
  1886                           ;main.c: 207: init_hardware();
  1887                           
  1888                           ;incstack = 0
  1889  00337A  ECA8  F01A         	call	_init_hardware	;wreg free
  1890                           
  1891                           ;main.c: 208: inicializa_uart();
  1892  00337E  EC63  F01A         	call	_inicializa_uart	;wreg free
  1893                           
  1894                           ;main.c: 209: init_lcd();
  1895  003382  EC12  F015         	call	_init_lcd	;wreg free
  1896                           
  1897                           ;main.c: 210: inicializa_shrc();
  1898  003386  ECF1  F01A         	call	_inicializa_shrc	;wreg free
  1899                           
  1900                           ;main.c: 212: mensagem_inicial();
  1901  00338A  ECC9  F013         	call	_mensagem_inicial	;wreg free
  1902                           
  1903                           ;main.c: 213: inicializa_tarefas();
  1904  00338E  EC05  F01A         	call	_inicializa_tarefas	;wreg free
  1905  003392                     l11433:
  1906                           
  1907                           ;main.c: 217: {
  1908                           ;main.c: 219: if ((sinaliza_int_timer == 1) && (2))
  1909  003392  0448               	decf	_sinaliza_int_timer,w,c
  1910  003394  A4D8               	btfss	status,2,c
  1911  003396  D004               	goto	l11439
  1912                           
  1913                           ;main.c: 220: {
  1914                           ;main.c: 221: sinaliza_int_timer = 0;
  1915  003398  0E00               	movlw	0
  1916  00339A  6E48               	movwf	_sinaliza_int_timer,c
  1917                           
  1918                           ;main.c: 222: escalonador();
  1919  00339C  EC19  F013         	call	_escalonador	;wreg free
  1920  0033A0                     l11439:
  1921                           
  1922                           ;main.c: 223: }
  1923                           ;main.c: 224: leitura_chaves_sistema();
  1924  0033A0  ECFB  F018         	call	_leitura_chaves_sistema	;wreg free
  1925                           
  1926                           ;main.c: 225: controle_shrc();
  1927  0033A4  ECE7  F01A         	call	_controle_shrc	;wreg free
  1928                           
  1929                           ;main.c: 226: leitura_continua_adc();
  1930  0033A8  EC6C  F00E         	call	_leitura_continua_adc	;wreg free
  1931  0033AC  D7F2               	goto	l11433
  1932  0033AE                     __end_of_main:
  1933                           	opt stack 0
  1934                           tblptru	equ	0xFF8
  1935                           tblptrh	equ	0xFF7
  1936                           tblptrl	equ	0xFF6
  1937                           tablat	equ	0xFF5
  1938                           postinc0	equ	0xFEE
  1939                           wreg	equ	0xFE8
  1940                           postdec1	equ	0xFE5
  1941                           fsr1h	equ	0xFE2
  1942                           fsr1l	equ	0xFE1
  1943                           status	equ	0xFD8
  1944                           
  1945 ;; *************** function _mensagem_inicial *****************
  1946 ;; Defined at:
  1947 ;;		line 236 in file "main.c"
  1948 ;; Parameters:    Size  Location     Type
  1949 ;;		None
  1950 ;; Auto vars:     Size  Location     Type
  1951 ;;  msg_dois       17   17[BANK0 ] const unsigned char [17]
  1952 ;;  msg_linha_um   17    0[BANK0 ] const unsigned char [17]
  1953 ;; Return value:  Size  Location     Type
  1954 ;;                  1    wreg      void 
  1955 ;; Registers used:
  1956 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1957 ;; Tracked objects:
  1958 ;;		On entry : 0/0
  1959 ;;		On exit  : 0/0
  1960 ;;		Unchanged: 0/0
  1961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1962 ;;      Params:         0       0       0       0       0       0       0       0       0
  1963 ;;      Locals:         0      34       0       0       0       0       0       0       0
  1964 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1965 ;;      Totals:         2      34       0       0       0       0       0       0       0
  1966 ;;Total ram usage:       36 bytes
  1967 ;; Hardware stack levels used:    1
  1968 ;; Hardware stack levels required when called:    5
  1969 ;; This function calls:
  1970 ;;		_escreve_cmd_lcd
  1971 ;;		_escreve_frase_ram_lcd
  1972 ;;		_posicao_cursor_lcd
  1973 ;; This function is called by:
  1974 ;;		_main
  1975 ;; This function uses a non-reentrant model
  1976 ;;
  1977                           
  1978                           	psect	text1
  1979  002792                     __ptext1:
  1980                           	opt stack 0
  1981  002792                     _mensagem_inicial:
  1982                           	opt stack 25
  1983                           
  1984                           ;main.c: 238: const unsigned char msg_linha_um[17] = "SDCard Init   ";
  1985                           
  1986                           ;incstack = 0
  1987  002792  0E7B               	movlw	low mensagem_inicial@F4018
  1988  002794  6EF6               	movwf	tblptrl,c
  1989  002796                     	if	1	;There is more than 1 active tblptr byte
  1990  002796  0E61               	movlw	high mensagem_inicial@F4018
  1991  002798  6EF7               	movwf	tblptrh,c
  1992  00279A                     	endif
  1993  00279A                     	if	0	;There are less than 3 active tblptr bytes
  1994  00279A                     	endif
  1995  00279A  EE20  F060         	lfsr	2,mensagem_inicial@msg_linha_um
  1996  00279E  0E10               	movlw	16
  1997  0027A0                     u13450:
  1998  0027A0  0009               	tblrd		*+
  1999  0027A2  CFF5 FFDE          	movff	tablat,postinc2
  2000  0027A6  06E8               	decf	wreg,f,c
  2001  0027A8  E2FB               	bc	u13450
  2002                           
  2003                           ;main.c: 239: const unsigned char msg_dois[17] = " 18/01/2022   ";
  2004  0027AA  0E6A               	movlw	low mensagem_inicial@F4020
  2005  0027AC  6EF6               	movwf	tblptrl,c
  2006  0027AE                     	if	1	;There is more than 1 active tblptr byte
  2007  0027AE  0E61               	movlw	high mensagem_inicial@F4020
  2008  0027B0  6EF7               	movwf	tblptrh,c
  2009  0027B2                     	endif
  2010  0027B2                     	if	0	;There are less than 3 active tblptr bytes
  2011  0027B2                     	endif
  2012  0027B2  EE20  F071         	lfsr	2,mensagem_inicial@msg_dois
  2013  0027B6  0E10               	movlw	16
  2014  0027B8                     u13460:
  2015  0027B8  0009               	tblrd		*+
  2016  0027BA  CFF5 FFDE          	movff	tablat,postinc2
  2017  0027BE  06E8               	decf	wreg,f,c
  2018  0027C0  E2FB               	bc	u13460
  2019                           
  2020                           ;main.c: 241: posicao_cursor_lcd(1,0);
  2021  0027C2  0E00               	movlw	0
  2022  0027C4  6E19               	movwf	posicao_cursor_lcd@coluna,c
  2023  0027C6  0E01               	movlw	1
  2024  0027C8  EC58  F017         	call	_posicao_cursor_lcd
  2025                           
  2026                           ;main.c: 242: escreve_frase_ram_lcd(msg_linha_um);
  2027  0027CC  0E60               	movlw	low mensagem_inicial@msg_linha_um
  2028  0027CE  6E19               	movwf	escreve_frase_ram_lcd@buffer,c
  2029  0027D0  0E00               	movlw	high mensagem_inicial@msg_linha_um
  2030  0027D2  6E1A               	movwf	escreve_frase_ram_lcd@buffer+1,c
  2031  0027D4  ECAC  F018         	call	_escreve_frase_ram_lcd	;wreg free
  2032                           
  2033                           ;main.c: 244: posicao_cursor_lcd(2,0);
  2034  0027D8  0E00               	movlw	0
  2035  0027DA  6E19               	movwf	posicao_cursor_lcd@coluna,c
  2036  0027DC  0E02               	movlw	2
  2037  0027DE  EC58  F017         	call	_posicao_cursor_lcd
  2038                           
  2039                           ;main.c: 245: escreve_frase_ram_lcd(msg_dois);
  2040  0027E2  0E71               	movlw	low mensagem_inicial@msg_dois
  2041  0027E4  6E19               	movwf	escreve_frase_ram_lcd@buffer,c
  2042  0027E6  0E00               	movlw	high mensagem_inicial@msg_dois
  2043  0027E8  6E1A               	movwf	escreve_frase_ram_lcd@buffer+1,c
  2044  0027EA  ECAC  F018         	call	_escreve_frase_ram_lcd	;wreg free
  2045                           
  2046                           ;main.c: 246: _delay((unsigned long)((1000)*(48000000/4000.0)));
  2047  0027EE  0E3D               	movlw	61
  2048  0027F0  6E1D               	movwf	(??_mensagem_inicial+1)& (0+255),c
  2049  0027F2  0EE1               	movlw	225
  2050  0027F4  6E1C               	movwf	??_mensagem_inicial& (0+255),c
  2051  0027F6  0E40               	movlw	64
  2052  0027F8                     u14867:
  2053  0027F8  2EE8               	decfsz	wreg,f,c
  2054  0027FA  D7FE               	bra	u14867
  2055  0027FC  2E1C               	decfsz	??_mensagem_inicial& (0+255),f,c
  2056  0027FE  D7FC               	bra	u14867
  2057  002800  2E1D               	decfsz	(??_mensagem_inicial+1)& (0+255),f,c
  2058  002802  D7FA               	bra	u14867
  2059                           
  2060                           ;main.c: 247: escreve_cmd_lcd(0b00000001);
  2061  002804  0E01               	movlw	1
  2062  002806  ECA9  F015         	call	_escreve_cmd_lcd
  2063                           
  2064                           ;main.c: 250: posicao_cursor_lcd(1,0);
  2065  00280A  0E00               	movlw	0
  2066  00280C  6E19               	movwf	posicao_cursor_lcd@coluna,c
  2067  00280E  0E01               	movlw	1
  2068  002810  EC58  F017         	call	_posicao_cursor_lcd
  2069                           
  2070                           ;main.c: 251: escreve_frase_ram_lcd("LAT:");
  2071  002814  0E73               	movlw	low STR_1
  2072  002816  6E19               	movwf	escreve_frase_ram_lcd@buffer,c
  2073  002818  0E62               	movlw	high STR_1
  2074  00281A  6E1A               	movwf	escreve_frase_ram_lcd@buffer+1,c
  2075  00281C  ECAC  F018         	call	_escreve_frase_ram_lcd	;wreg free
  2076                           
  2077                           ;main.c: 253: posicao_cursor_lcd(2,0);
  2078  002820  0E00               	movlw	0
  2079  002822  6E19               	movwf	posicao_cursor_lcd@coluna,c
  2080  002824  0E02               	movlw	2
  2081  002826  EC58  F017         	call	_posicao_cursor_lcd
  2082                           
  2083                           ;main.c: 254: escreve_frase_ram_lcd("LONG:");
  2084  00282A  0E6D               	movlw	low STR_2
  2085  00282C  6E19               	movwf	escreve_frase_ram_lcd@buffer,c
  2086  00282E  0E62               	movlw	high STR_2
  2087  002830  6E1A               	movwf	escreve_frase_ram_lcd@buffer+1,c
  2088  002832  ECAC  F018         	call	_escreve_frase_ram_lcd	;wreg free
  2089  002836  0012               	return		;funcret
  2090  002838                     __end_of_mensagem_inicial:
  2091                           	opt stack 0
  2092                           tblptru	equ	0xFF8
  2093                           tblptrh	equ	0xFF7
  2094                           tblptrl	equ	0xFF6
  2095                           tablat	equ	0xFF5
  2096                           postinc0	equ	0xFEE
  2097                           wreg	equ	0xFE8
  2098                           postdec1	equ	0xFE5
  2099                           fsr1h	equ	0xFE2
  2100                           fsr1l	equ	0xFE1
  2101                           postinc2	equ	0xFDE
  2102                           status	equ	0xFD8
  2103                           
  2104 ;; *************** function _leitura_continua_adc *****************
  2105 ;; Defined at:
  2106 ;;		line 109 in file "bibliotecas/adc.c"
  2107 ;; Parameters:    Size  Location     Type
  2108 ;;		None
  2109 ;; Auto vars:     Size  Location     Type
  2110 ;;  cont_int        1   34[COMRAM] unsigned char 
  2111 ;;  cont            1   35[COMRAM] unsigned char 
  2112 ;; Return value:  Size  Location     Type
  2113 ;;                  1    wreg      void 
  2114 ;; Registers used:
  2115 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2116 ;; Tracked objects:
  2117 ;;		On entry : 0/0
  2118 ;;		On exit  : 0/0
  2119 ;;		Unchanged: 0/0
  2120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2121 ;;      Params:         0       0       0       0       0       0       0       0       0
  2122 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2123 ;;      Temps:          6       0       0       0       0       0       0       0       0
  2124 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2125 ;;Total ram usage:        8 bytes
  2126 ;; Hardware stack levels used:    1
  2127 ;; Hardware stack levels required when called:    3
  2128 ;; This function calls:
  2129 ;;		_leitura_adc
  2130 ;; This function is called by:
  2131 ;;		_main
  2132 ;; This function uses a non-reentrant model
  2133 ;;
  2134                           
  2135                           	psect	text2
  2136  001CD8                     __ptext2:
  2137                           	opt stack 0
  2138  001CD8                     _leitura_continua_adc:
  2139                           	opt stack 27
  2140                           
  2141                           ;adc.c: 111: for(unsigned char cont = 0; cont < 2; cont++)
  2142                           
  2143                           ;incstack = 0
  2144  001CD8  0E00               	movlw	0
  2145  001CDA  6E24               	movwf	leitura_continua_adc@cont,c
  2146  001CDC                     l8109:
  2147  001CDC  0E01               	movlw	1
  2148  001CDE  6424               	cpfsgt	leitura_continua_adc@cont,c
  2149  001CE0  D001               	goto	l8113
  2150  001CE2  0012               	return	
  2151  001CE4                     l8113:
  2152                           
  2153                           ;adc.c: 112: {
  2154                           ;adc.c: 113: for(unsigned char cont_int = 0; cont_int < 8; cont_int++)
  2155  001CE4  0E00               	movlw	0
  2156  001CE6  6E23               	movwf	leitura_continua_adc@cont_int,c
  2157  001CE8                     l8115:
  2158  001CE8  0E07               	movlw	7
  2159  001CEA  6423               	cpfsgt	leitura_continua_adc@cont_int,c
  2160  001CEC  D001               	goto	l8119
  2161  001CEE  D05D               	goto	l8127
  2162  001CF0                     l8119:
  2163                           
  2164                           ;adc.c: 114: {
  2165                           ;adc.c: 115: valor_leitura_adc[cont].leituras[cont_int] = leitura_adc(cont);
  2166  001CF0  5024               	movf	leitura_continua_adc@cont,w,c
  2167  001CF2  ECF8  F017         	call	_leitura_adc
  2168  001CF6  5023               	movf	leitura_continua_adc@cont_int,w,c
  2169  001CF8  0D02               	mullw	2
  2170  001CFA  0E01               	movlw	1
  2171  001CFC  26F3               	addwf	prodl,f,c
  2172  001CFE  0E00               	movlw	0
  2173  001D00  22F4               	addwfc	prodh,f,c
  2174  001D02  0E80               	movlw	low _valor_leitura_adc
  2175  001D04  6E1D               	movwf	??_leitura_continua_adc& (0+255),c
  2176  001D06  0E01               	movlw	high _valor_leitura_adc
  2177  001D08  6E1E               	movwf	(??_leitura_continua_adc+1)& (0+255),c
  2178  001D0A  50F3               	movf	prodl,w,c
  2179  001D0C  261D               	addwf	??_leitura_continua_adc,f,c
  2180  001D0E  50F4               	movf	prodh,w,c
  2181  001D10  221E               	addwfc	??_leitura_continua_adc+1,f,c
  2182  001D12  5024               	movf	leitura_continua_adc@cont,w,c
  2183  001D14  0D13               	mullw	19
  2184  001D16  50F3               	movf	prodl,w,c
  2185  001D18  241D               	addwf	??_leitura_continua_adc,w,c
  2186  001D1A  6ED9               	movwf	fsr2l,c
  2187  001D1C  50F4               	movf	prodh,w,c
  2188  001D1E  201E               	addwfc	??_leitura_continua_adc+1,w,c
  2189  001D20  6EDA               	movwf	fsr2h,c
  2190  001D22  C016  FFDE         	movff	?_leitura_adc,postinc2
  2191  001D26  C017  FFDD         	movff	?_leitura_adc+1,postdec2
  2192                           
  2193                           ;adc.c: 116: valor_leitura_adc[cont].media = valor_leitura_adc[cont].media + valor_leitu
      +                          ra_adc[cont].leituras[cont_int];
  2194  001D2A  5023               	movf	leitura_continua_adc@cont_int,w,c
  2195  001D2C  0D02               	mullw	2
  2196  001D2E  0E01               	movlw	1
  2197  001D30  26F3               	addwf	prodl,f,c
  2198  001D32  0E00               	movlw	0
  2199  001D34  22F4               	addwfc	prodh,f,c
  2200  001D36  0E80               	movlw	low _valor_leitura_adc
  2201  001D38  6E1D               	movwf	??_leitura_continua_adc& (0+255),c
  2202  001D3A  0E01               	movlw	high _valor_leitura_adc
  2203  001D3C  6E1E               	movwf	(??_leitura_continua_adc+1)& (0+255),c
  2204  001D3E  50F3               	movf	prodl,w,c
  2205  001D40  261D               	addwf	??_leitura_continua_adc,f,c
  2206  001D42  50F4               	movf	prodh,w,c
  2207  001D44  221E               	addwfc	??_leitura_continua_adc+1,f,c
  2208  001D46  5024               	movf	leitura_continua_adc@cont,w,c
  2209  001D48  0D13               	mullw	19
  2210  001D4A  50F3               	movf	prodl,w,c
  2211  001D4C  241D               	addwf	??_leitura_continua_adc,w,c
  2212  001D4E  6ED9               	movwf	fsr2l,c
  2213  001D50  50F4               	movf	prodh,w,c
  2214  001D52  201E               	addwfc	??_leitura_continua_adc+1,w,c
  2215  001D54  6EDA               	movwf	fsr2h,c
  2216  001D56  CFDE F01F          	movff	postinc2,??_leitura_continua_adc+2
  2217  001D5A  CFDD F020          	movff	postdec2,??_leitura_continua_adc+3
  2218  001D5E  5024               	movf	leitura_continua_adc@cont,w,c
  2219  001D60  0D13               	mullw	19
  2220  001D62  0E11               	movlw	17
  2221  001D64  26F3               	addwf	prodl,f,c
  2222  001D66  0E00               	movlw	0
  2223  001D68  22F4               	addwfc	prodh,f,c
  2224  001D6A  0E80               	movlw	low _valor_leitura_adc
  2225  001D6C  24F3               	addwf	prodl,w,c
  2226  001D6E  6ED9               	movwf	fsr2l,c
  2227  001D70  0E01               	movlw	high _valor_leitura_adc
  2228  001D72  20F4               	addwfc	prodh,w,c
  2229  001D74  6EDA               	movwf	fsr2h,c
  2230  001D76  CFDE F021          	movff	postinc2,??_leitura_continua_adc+4
  2231  001D7A  CFDD F022          	movff	postdec2,??_leitura_continua_adc+5
  2232  001D7E  501F               	movf	??_leitura_continua_adc+2,w,c
  2233  001D80  2621               	addwf	??_leitura_continua_adc+4,f,c
  2234  001D82  5020               	movf	??_leitura_continua_adc+3,w,c
  2235  001D84  2222               	addwfc	??_leitura_continua_adc+5,f,c
  2236  001D86  5024               	movf	leitura_continua_adc@cont,w,c
  2237  001D88  0D13               	mullw	19
  2238  001D8A  0E11               	movlw	17
  2239  001D8C  26F3               	addwf	prodl,f,c
  2240  001D8E  0E00               	movlw	0
  2241  001D90  22F4               	addwfc	prodh,f,c
  2242  001D92  0E80               	movlw	low _valor_leitura_adc
  2243  001D94  24F3               	addwf	prodl,w,c
  2244  001D96  6ED9               	movwf	fsr2l,c
  2245  001D98  0E01               	movlw	high _valor_leitura_adc
  2246  001D9A  20F4               	addwfc	prodh,w,c
  2247  001D9C  6EDA               	movwf	fsr2h,c
  2248  001D9E  C021  FFDE         	movff	??_leitura_continua_adc+4,postinc2
  2249  001DA2  C022  FFDD         	movff	??_leitura_continua_adc+5,postdec2
  2250  001DA6  2A23               	incf	leitura_continua_adc@cont_int,f,c
  2251  001DA8  D79F               	goto	l8115
  2252  001DAA                     l8127:
  2253                           
  2254                           ;adc.c: 117: }
  2255                           ;adc.c: 118: valor_leitura_adc[cont].media = valor_leitura_adc[cont].media / 8;
  2256  001DAA  5024               	movf	leitura_continua_adc@cont,w,c
  2257  001DAC  0D13               	mullw	19
  2258  001DAE  0E11               	movlw	17
  2259  001DB0  26F3               	addwf	prodl,f,c
  2260  001DB2  0E00               	movlw	0
  2261  001DB4  22F4               	addwfc	prodh,f,c
  2262  001DB6  0E80               	movlw	low _valor_leitura_adc
  2263  001DB8  24F3               	addwf	prodl,w,c
  2264  001DBA  6ED9               	movwf	fsr2l,c
  2265  001DBC  0E01               	movlw	high _valor_leitura_adc
  2266  001DBE  20F4               	addwfc	prodh,w,c
  2267  001DC0  6EDA               	movwf	fsr2h,c
  2268  001DC2  CFDE F01D          	movff	postinc2,??_leitura_continua_adc
  2269  001DC6  CFDD F01E          	movff	postdec2,??_leitura_continua_adc+1
  2270  001DCA  90D8               	bcf	status,0,c
  2271  001DCC  321E               	rrcf	??_leitura_continua_adc+1,f,c
  2272  001DCE  321D               	rrcf	??_leitura_continua_adc,f,c
  2273  001DD0  90D8               	bcf	status,0,c
  2274  001DD2  321E               	rrcf	??_leitura_continua_adc+1,f,c
  2275  001DD4  321D               	rrcf	??_leitura_continua_adc,f,c
  2276  001DD6  90D8               	bcf	status,0,c
  2277  001DD8  321E               	rrcf	??_leitura_continua_adc+1,f,c
  2278  001DDA  321D               	rrcf	??_leitura_continua_adc,f,c
  2279  001DDC  5024               	movf	leitura_continua_adc@cont,w,c
  2280  001DDE  0D13               	mullw	19
  2281  001DE0  0E11               	movlw	17
  2282  001DE2  26F3               	addwf	prodl,f,c
  2283  001DE4  0E00               	movlw	0
  2284  001DE6  22F4               	addwfc	prodh,f,c
  2285  001DE8  0E80               	movlw	low _valor_leitura_adc
  2286  001DEA  24F3               	addwf	prodl,w,c
  2287  001DEC  6ED9               	movwf	fsr2l,c
  2288  001DEE  0E01               	movlw	high _valor_leitura_adc
  2289  001DF0  20F4               	addwfc	prodh,w,c
  2290  001DF2  6EDA               	movwf	fsr2h,c
  2291  001DF4  C01D  FFDE         	movff	??_leitura_continua_adc,postinc2
  2292  001DF8  C01E  FFDD         	movff	??_leitura_continua_adc+1,postdec2
  2293  001DFC  2A24               	incf	leitura_continua_adc@cont,f,c
  2294  001DFE  D76E               	goto	l8109
  2295  001E00                     __end_of_leitura_continua_adc:
  2296                           	opt stack 0
  2297                           tblptru	equ	0xFF8
  2298                           tblptrh	equ	0xFF7
  2299                           tblptrl	equ	0xFF6
  2300                           tablat	equ	0xFF5
  2301                           prodh	equ	0xFF4
  2302                           prodl	equ	0xFF3
  2303                           postinc0	equ	0xFEE
  2304                           wreg	equ	0xFE8
  2305                           postdec1	equ	0xFE5
  2306                           fsr1h	equ	0xFE2
  2307                           fsr1l	equ	0xFE1
  2308                           postinc2	equ	0xFDE
  2309                           postdec2	equ	0xFDD
  2310                           fsr2h	equ	0xFDA
  2311                           fsr2l	equ	0xFD9
  2312                           status	equ	0xFD8
  2313                           
  2314 ;; *************** function _leitura_adc *****************
  2315 ;; Defined at:
  2316 ;;		line 76 in file "bibliotecas/adc.c"
  2317 ;; Parameters:    Size  Location     Type
  2318 ;;  canal           1    wreg     unsigned char 
  2319 ;; Auto vars:     Size  Location     Type
  2320 ;;  canal           1   27[COMRAM] unsigned char 
  2321 ;; Return value:  Size  Location     Type
  2322 ;;                  2   21[COMRAM] unsigned int 
  2323 ;; Registers used:
  2324 ;;		wreg, status,2, status,0
  2325 ;; Tracked objects:
  2326 ;;		On entry : 0/0
  2327 ;;		On exit  : 0/0
  2328 ;;		Unchanged: 0/0
  2329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2330 ;;      Params:         2       0       0       0       0       0       0       0       0
  2331 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2332 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2333 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2334 ;;Total ram usage:        7 bytes
  2335 ;; Hardware stack levels used:    1
  2336 ;; Hardware stack levels required when called:    2
  2337 ;; This function calls:
  2338 ;;		Nothing
  2339 ;; This function is called by:
  2340 ;;		_leitura_continua_adc
  2341 ;; This function uses a non-reentrant model
  2342 ;;
  2343                           
  2344                           	psect	text3
  2345  002FF0                     __ptext3:
  2346                           	opt stack 0
  2347  002FF0                     _leitura_adc:
  2348                           	opt stack 27
  2349                           
  2350                           ;incstack = 0
  2351                           ;leitura_adc@canal stored from wreg
  2352  002FF0  6E1C               	movwf	leitura_adc@canal,c
  2353                           
  2354                           ;adc.c: 78: switch(canal)
  2355  002FF2  D009               	goto	l7721
  2356  002FF4                     l7711:
  2357                           
  2358                           ;adc.c: 81: ADCON0 = 0x01;
  2359  002FF4  0E01               	movlw	1
  2360  002FF6  D005               	goto	L3
  2361  002FF8                     l7713:
  2362                           
  2363                           ;adc.c: 85: ADCON0 = 0x05;
  2364  002FF8  0E05               	movlw	5
  2365  002FFA  D003               	goto	L3
  2366  002FFC                     l7715:
  2367                           
  2368                           ;adc.c: 89: ADCON0 = 0x09;
  2369  002FFC  0E09               	movlw	9
  2370  002FFE  D001               	goto	L3
  2371  003000                     l7717:
  2372                           
  2373                           ;adc.c: 93: ADCON0 = 0x0D;
  2374  003000  0E0D               	movlw	13
  2375  003002                     L3:
  2376  003002  6EC2               	movwf	4034,c	;volatile
  2377                           
  2378                           ;adc.c: 96: }
  2379                           
  2380                           ;adc.c: 94: break;
  2381  003004  D00D               	goto	l455
  2382  003006                     l7721:
  2383  003006  501C               	movf	leitura_adc@canal,w,c
  2384                           
  2385                           ; Switch size 1, requested type "space"
  2386                           ; Number of cases is 4, Range of values is 0 to 3
  2387                           ; switch strategies available:
  2388                           ; Name         Instructions Cycles
  2389                           ; simple_byte           13     7 (average)
  2390                           ;	Chosen strategy is simple_byte
  2391  003008  0A00               	xorlw	0	; case 0
  2392  00300A  B4D8               	btfsc	status,2,c
  2393  00300C  D7F3               	goto	l7711
  2394  00300E  0A01               	xorlw	1	; case 1
  2395  003010  B4D8               	btfsc	status,2,c
  2396  003012  D7F2               	goto	l7713
  2397  003014  0A03               	xorlw	3	; case 2
  2398  003016  B4D8               	btfsc	status,2,c
  2399  003018  D7F1               	goto	l7715
  2400  00301A  0A01               	xorlw	1	; case 3
  2401  00301C  B4D8               	btfsc	status,2,c
  2402  00301E  D7F0               	goto	l7717
  2403  003020                     l455:
  2404                           
  2405                           ;adc.c: 97: ADCON0bits.GO=1;
  2406  003020  82C2               	bsf	4034,1,c	;volatile
  2407  003022                     l459:
  2408  003022  B2C2               	btfsc	4034,1,c	;volatile
  2409  003024  D7FE               	goto	l459
  2410                           
  2411                           ;adc.c: 100: return ((((unsigned int)ADRESH)<<2)|(ADRESL>>6));
  2412  003026  CFC3 F018          	movff	4035,??_leitura_adc	;volatile
  2413  00302A  0E06               	movlw	6
  2414  00302C  6E19               	movwf	(??_leitura_adc+1)& (0+255),c
  2415  00302E                     u8265:
  2416  00302E  90D8               	bcf	status,0,c
  2417  003030  3218               	rrcf	??_leitura_adc,f,c
  2418  003032  2E19               	decfsz	(??_leitura_adc+1)& (0+255),f,c
  2419  003034  D7FC               	goto	u8265
  2420  003036  5018               	movf	??_leitura_adc,w,c
  2421  003038  CFC4 F01A          	movff	4036,??_leitura_adc+2	;volatile
  2422  00303C  6A1B               	clrf	(??_leitura_adc+3)& (0+255),c
  2423  00303E  90D8               	bcf	status,0,c
  2424  003040  361A               	rlcf	??_leitura_adc+2,f,c
  2425  003042  361B               	rlcf	??_leitura_adc+3,f,c
  2426  003044  90D8               	bcf	status,0,c
  2427  003046  361A               	rlcf	??_leitura_adc+2,f,c
  2428  003048  361B               	rlcf	??_leitura_adc+3,f,c
  2429  00304A  101A               	iorwf	??_leitura_adc+2,w,c
  2430  00304C  6E16               	movwf	?_leitura_adc,c
  2431  00304E  501B               	movf	??_leitura_adc+3,w,c
  2432  003050  6E17               	movwf	?_leitura_adc+1,c
  2433  003052  0012               	return	
  2434  003054                     __end_of_leitura_adc:
  2435                           	opt stack 0
  2436                           tblptru	equ	0xFF8
  2437                           tblptrh	equ	0xFF7
  2438                           tblptrl	equ	0xFF6
  2439                           tablat	equ	0xFF5
  2440                           prodh	equ	0xFF4
  2441                           prodl	equ	0xFF3
  2442                           postinc0	equ	0xFEE
  2443                           wreg	equ	0xFE8
  2444                           postdec1	equ	0xFE5
  2445                           fsr1h	equ	0xFE2
  2446                           fsr1l	equ	0xFE1
  2447                           postinc2	equ	0xFDE
  2448                           postdec2	equ	0xFDD
  2449                           fsr2h	equ	0xFDA
  2450                           fsr2l	equ	0xFD9
  2451                           status	equ	0xFD8
  2452                           
  2453 ;; *************** function _leitura_chaves_sistema *****************
  2454 ;; Defined at:
  2455 ;;		line 47 in file "bibliotecas/chaves.c"
  2456 ;; Parameters:    Size  Location     Type
  2457 ;;		None
  2458 ;; Auto vars:     Size  Location     Type
  2459 ;;		None
  2460 ;; Return value:  Size  Location     Type
  2461 ;;                  1    wreg      void 
  2462 ;; Registers used:
  2463 ;;		wreg
  2464 ;; Tracked objects:
  2465 ;;		On entry : 0/0
  2466 ;;		On exit  : 0/0
  2467 ;;		Unchanged: 0/0
  2468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2469 ;;      Params:         0       0       0       0       0       0       0       0       0
  2470 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2471 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2472 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2473 ;;Total ram usage:        0 bytes
  2474 ;; Hardware stack levels used:    1
  2475 ;; Hardware stack levels required when called:    2
  2476 ;; This function calls:
  2477 ;;		Nothing
  2478 ;; This function is called by:
  2479 ;;		_main
  2480 ;; This function uses a non-reentrant model
  2481 ;;
  2482                           
  2483                           	psect	text4
  2484  0031F6                     __ptext4:
  2485                           	opt stack 0
  2486  0031F6                     _leitura_chaves_sistema:
  2487                           	opt stack 28
  2488                           
  2489                           ;chaves.c: 49: info_chaves[0] = PORTCbits.RC0;
  2490                           
  2491                           ;incstack = 0
  2492  0031F6  0E00               	movlw	0
  2493  0031F8  B082               	btfsc	3970,0,c	;volatile
  2494  0031FA  0E01               	movlw	1
  2495  0031FC  0100               	movlb	0	; () banked
  2496  0031FE  6FBA               	movwf	_info_chaves& (0+255),b
  2497                           
  2498                           ;chaves.c: 50: info_chaves[1] = PORTCbits.RC1;
  2499  003200  0E00               	movlw	0
  2500  003202  B282               	btfsc	3970,1,c	;volatile
  2501  003204  0E01               	movlw	1
  2502  003206  0100               	movlb	0	; () banked
  2503  003208  6FBB               	movwf	(_info_chaves+1)& (0+255),b
  2504                           
  2505                           ;chaves.c: 51: info_chaves[2] = PORTCbits.RC2;
  2506  00320A  0E00               	movlw	0
  2507  00320C  B482               	btfsc	3970,2,c	;volatile
  2508  00320E  0E01               	movlw	1
  2509  003210  0100               	movlb	0	; () banked
  2510  003212  6FBC               	movwf	(_info_chaves+2)& (0+255),b
  2511                           
  2512                           ;chaves.c: 52: info_chaves[3] = PORTAbits.RA2;
  2513  003214  0E00               	movlw	0
  2514  003216  B480               	btfsc	3968,2,c	;volatile
  2515  003218  0E01               	movlw	1
  2516  00321A  0100               	movlb	0	; () banked
  2517  00321C  6FBD               	movwf	(_info_chaves+3)& (0+255),b
  2518                           
  2519                           ;chaves.c: 53: info_chaves[4] = PORTAbits.RA5;
  2520  00321E  0E00               	movlw	0
  2521  003220  BA80               	btfsc	3968,5,c	;volatile
  2522  003222  0E01               	movlw	1
  2523  003224  0100               	movlb	0	; () banked
  2524  003226  6FBE               	movwf	(_info_chaves+4)& (0+255),b
  2525                           
  2526                           ;chaves.c: 54: info_chaves[5] = PORTEbits.RE0;
  2527  003228  0E00               	movlw	0
  2528  00322A  B084               	btfsc	3972,0,c	;volatile
  2529  00322C  0E01               	movlw	1
  2530  00322E  0100               	movlb	0	; () banked
  2531  003230  6FBF               	movwf	(_info_chaves+5)& (0+255),b
  2532                           
  2533                           ;chaves.c: 55: info_chaves[6] = PORTEbits.RE1;
  2534  003232  0E00               	movlw	0
  2535  003234  B284               	btfsc	3972,1,c	;volatile
  2536  003236  0E01               	movlw	1
  2537  003238  0100               	movlb	0	; () banked
  2538  00323A  6FC0               	movwf	(_info_chaves+6)& (0+255),b
  2539                           
  2540                           ; BSR set to: 0
  2541  00323C  0012               	return		;funcret
  2542  00323E                     __end_of_leitura_chaves_sistema:
  2543                           	opt stack 0
  2544                           tblptru	equ	0xFF8
  2545                           tblptrh	equ	0xFF7
  2546                           tblptrl	equ	0xFF6
  2547                           tablat	equ	0xFF5
  2548                           prodh	equ	0xFF4
  2549                           prodl	equ	0xFF3
  2550                           postinc0	equ	0xFEE
  2551                           wreg	equ	0xFE8
  2552                           postdec1	equ	0xFE5
  2553                           fsr1h	equ	0xFE2
  2554                           fsr1l	equ	0xFE1
  2555                           postinc2	equ	0xFDE
  2556                           postdec2	equ	0xFDD
  2557                           fsr2h	equ	0xFDA
  2558                           fsr2l	equ	0xFD9
  2559                           status	equ	0xFD8
  2560                           
  2561 ;; *************** function _init_lcd *****************
  2562 ;; Defined at:
  2563 ;;		line 71 in file "bibliotecas/display_lcd.c"
  2564 ;; Parameters:    Size  Location     Type
  2565 ;;		None
  2566 ;; Auto vars:     Size  Location     Type
  2567 ;;		None
  2568 ;; Return value:  Size  Location     Type
  2569 ;;                  1    wreg      void 
  2570 ;; Registers used:
  2571 ;;		wreg, status,2, status,0, cstack
  2572 ;; Tracked objects:
  2573 ;;		On entry : 0/0
  2574 ;;		On exit  : 0/0
  2575 ;;		Unchanged: 0/0
  2576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2577 ;;      Params:         0       0       0       0       0       0       0       0       0
  2578 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2579 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2580 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2581 ;;Total ram usage:        1 bytes
  2582 ;; Hardware stack levels used:    1
  2583 ;; Hardware stack levels required when called:    4
  2584 ;; This function calls:
  2585 ;;		_delay
  2586 ;;		_escreve_cmd_lcd
  2587 ;; This function is called by:
  2588 ;;		_main
  2589 ;; This function uses a non-reentrant model
  2590 ;;
  2591                           
  2592                           	psect	text5
  2593  002A24                     __ptext5:
  2594                           	opt stack 0
  2595  002A24                     _init_lcd:
  2596                           	opt stack 26
  2597                           
  2598                           ;display_lcd.c: 74: TRISDbits.RD2 = 0;
  2599                           
  2600                           ; BSR set to: 0
  2601                           ;incstack = 0
  2602  002A24  9495               	bcf	3989,2,c	;volatile
  2603                           
  2604                           ;display_lcd.c: 75: TRISDbits.RD1 = 0;
  2605  002A26  9295               	bcf	3989,1,c	;volatile
  2606                           
  2607                           ;display_lcd.c: 76: TRISDbits.RD0 = 0;
  2608  002A28  9095               	bcf	3989,0,c	;volatile
  2609                           
  2610                           ;display_lcd.c: 79: TRISDbits.RD4=0;
  2611  002A2A  9895               	bcf	3989,4,c	;volatile
  2612                           
  2613                           ;display_lcd.c: 80: TRISDbits.RD5=0;
  2614  002A2C  9A95               	bcf	3989,5,c	;volatile
  2615                           
  2616                           ;display_lcd.c: 81: TRISDbits.RD6=0;
  2617  002A2E  9C95               	bcf	3989,6,c	;volatile
  2618                           
  2619                           ;display_lcd.c: 82: TRISDbits.RD7=0;
  2620  002A30  9E95               	bcf	3989,7,c	;volatile
  2621                           
  2622                           ;display_lcd.c: 89: PORTDbits.RD2 = 0;
  2623  002A32  9483               	bcf	3971,2,c	;volatile
  2624                           
  2625                           ;display_lcd.c: 90: PORTDbits.RD1 = 0;
  2626  002A34  9283               	bcf	3971,1,c	;volatile
  2627                           
  2628                           ;display_lcd.c: 91: PORTDbits.RD0 = 0;
  2629  002A36  9083               	bcf	3971,0,c	;volatile
  2630                           
  2631                           ;display_lcd.c: 95: PORTDbits.RD7=0;
  2632  002A38  9E83               	bcf	3971,7,c	;volatile
  2633                           
  2634                           ;display_lcd.c: 96: PORTDbits.RD6=0;
  2635  002A3A  9C83               	bcf	3971,6,c	;volatile
  2636                           
  2637                           ;display_lcd.c: 97: PORTDbits.RD5=1;
  2638  002A3C  8A83               	bsf	3971,5,c	;volatile
  2639                           
  2640                           ;display_lcd.c: 98: PORTDbits.RD4=1;
  2641  002A3E  8883               	bsf	3971,4,c	;volatile
  2642                           
  2643                           ;display_lcd.c: 103: _delay((unsigned long)((15)*(48000000/4000.0)));
  2644  002A40  0EEA               	movlw	234
  2645  002A42  6E19               	movwf	??_init_lcd& (0+255),c
  2646  002A44  0EC3               	movlw	195
  2647  002A46                     u14877:
  2648  002A46  2EE8               	decfsz	wreg,f,c
  2649  002A48  D7FE               	bra	u14877
  2650  002A4A  2E19               	decfsz	??_init_lcd& (0+255),f,c
  2651  002A4C  D7FC               	bra	u14877
  2652  002A4E  F000               	nop	
  2653                           
  2654                           ;display_lcd.c: 107: PORTDbits.RD0 = 1;
  2655  002A50  8083               	bsf	3971,0,c	;volatile
  2656                           
  2657                           ;display_lcd.c: 108: delay();
  2658  002A52  EC51  F01A         	call	_delay	;wreg free
  2659                           
  2660                           ;display_lcd.c: 109: PORTDbits.RD0 = 0;
  2661  002A56  9083               	bcf	3971,0,c	;volatile
  2662                           
  2663                           ;display_lcd.c: 110: delay();
  2664  002A58  EC51  F01A         	call	_delay	;wreg free
  2665                           
  2666                           ;display_lcd.c: 115: _delay((unsigned long)((5)*(48000000/4000.0)));
  2667  002A5C  0E4E               	movlw	78
  2668  002A5E  6E19               	movwf	??_init_lcd& (0+255),c
  2669  002A60  0EEB               	movlw	235
  2670  002A62                     u14887:
  2671  002A62  2EE8               	decfsz	wreg,f,c
  2672  002A64  D7FE               	bra	u14887
  2673  002A66  2E19               	decfsz	??_init_lcd& (0+255),f,c
  2674  002A68  D7FC               	bra	u14887
  2675  002A6A  F000               	nop	
  2676                           
  2677                           ;display_lcd.c: 118: PORTDbits.RD0 = 1;
  2678  002A6C  8083               	bsf	3971,0,c	;volatile
  2679                           
  2680                           ;display_lcd.c: 119: delay();
  2681  002A6E  EC51  F01A         	call	_delay	;wreg free
  2682                           
  2683                           ;display_lcd.c: 120: PORTDbits.RD0 = 0;
  2684  002A72  9083               	bcf	3971,0,c	;volatile
  2685                           
  2686                           ;display_lcd.c: 121: delay();
  2687  002A74  EC51  F01A         	call	_delay	;wreg free
  2688                           
  2689                           ;display_lcd.c: 126: _delay((unsigned long)((5)*(48000000/4000.0)));
  2690  002A78  0E4E               	movlw	78
  2691  002A7A  6E19               	movwf	??_init_lcd& (0+255),c
  2692  002A7C  0EEB               	movlw	235
  2693  002A7E                     u14897:
  2694  002A7E  2EE8               	decfsz	wreg,f,c
  2695  002A80  D7FE               	bra	u14897
  2696  002A82  2E19               	decfsz	??_init_lcd& (0+255),f,c
  2697  002A84  D7FC               	bra	u14897
  2698  002A86  F000               	nop	
  2699                           
  2700                           ;display_lcd.c: 129: PORTDbits.RD0 = 1;
  2701  002A88  8083               	bsf	3971,0,c	;volatile
  2702                           
  2703                           ;display_lcd.c: 130: delay();
  2704  002A8A  EC51  F01A         	call	_delay	;wreg free
  2705                           
  2706                           ;display_lcd.c: 131: PORTDbits.RD0 = 0;
  2707  002A8E  9083               	bcf	3971,0,c	;volatile
  2708                           
  2709                           ;display_lcd.c: 132: delay();
  2710  002A90  EC51  F01A         	call	_delay	;wreg free
  2711                           
  2712                           ;display_lcd.c: 135: PORTDbits.RD7=0;
  2713  002A94  9E83               	bcf	3971,7,c	;volatile
  2714                           
  2715                           ;display_lcd.c: 136: PORTDbits.RD6=0;
  2716  002A96  9C83               	bcf	3971,6,c	;volatile
  2717                           
  2718                           ;display_lcd.c: 137: PORTDbits.RD5=1;
  2719  002A98  8A83               	bsf	3971,5,c	;volatile
  2720                           
  2721                           ;display_lcd.c: 138: PORTDbits.RD4=0;
  2722  002A9A  9883               	bcf	3971,4,c	;volatile
  2723                           
  2724                           ;display_lcd.c: 142: PORTDbits.RD0 = 1;
  2725  002A9C  8083               	bsf	3971,0,c	;volatile
  2726                           
  2727                           ;display_lcd.c: 143: delay();
  2728  002A9E  EC51  F01A         	call	_delay	;wreg free
  2729                           
  2730                           ;display_lcd.c: 144: PORTDbits.RD0 = 0;
  2731  002AA2  9083               	bcf	3971,0,c	;volatile
  2732                           
  2733                           ;display_lcd.c: 145: delay();
  2734  002AA4  EC51  F01A         	call	_delay	;wreg free
  2735                           
  2736                           ;display_lcd.c: 149: escreve_cmd_lcd(0b00101000);
  2737  002AA8  0E28               	movlw	40
  2738  002AAA  ECA9  F015         	call	_escreve_cmd_lcd
  2739                           
  2740                           ;display_lcd.c: 150: escreve_cmd_lcd(0b00000110);
  2741  002AAE  0E06               	movlw	6
  2742  002AB0  ECA9  F015         	call	_escreve_cmd_lcd
  2743                           
  2744                           ;display_lcd.c: 151: escreve_cmd_lcd(0b00001110);
  2745  002AB4  0E0E               	movlw	14
  2746  002AB6  ECA9  F015         	call	_escreve_cmd_lcd
  2747                           
  2748                           ;display_lcd.c: 152: escreve_cmd_lcd(0b00000001);
  2749  002ABA  0E01               	movlw	1
  2750  002ABC  ECA9  F015         	call	_escreve_cmd_lcd
  2751  002AC0  0012               	return		;funcret
  2752  002AC2                     __end_of_init_lcd:
  2753                           	opt stack 0
  2754                           tblptru	equ	0xFF8
  2755                           tblptrh	equ	0xFF7
  2756                           tblptrl	equ	0xFF6
  2757                           tablat	equ	0xFF5
  2758                           prodh	equ	0xFF4
  2759                           prodl	equ	0xFF3
  2760                           postinc0	equ	0xFEE
  2761                           wreg	equ	0xFE8
  2762                           postdec1	equ	0xFE5
  2763                           fsr1h	equ	0xFE2
  2764                           fsr1l	equ	0xFE1
  2765                           postinc2	equ	0xFDE
  2766                           postdec2	equ	0xFDD
  2767                           fsr2h	equ	0xFDA
  2768                           fsr2l	equ	0xFD9
  2769                           status	equ	0xFD8
  2770                           
  2771 ;; *************** function _init_hardware *****************
  2772 ;; Defined at:
  2773 ;;		line 55 in file "bibliotecas/hardware.c"
  2774 ;; Parameters:    Size  Location     Type
  2775 ;;		None
  2776 ;; Auto vars:     Size  Location     Type
  2777 ;;		None
  2778 ;; Return value:  Size  Location     Type
  2779 ;;                  1    wreg      void 
  2780 ;; Registers used:
  2781 ;;		wreg, status,2, cstack
  2782 ;; Tracked objects:
  2783 ;;		On entry : 0/0
  2784 ;;		On exit  : 0/0
  2785 ;;		Unchanged: 0/0
  2786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2787 ;;      Params:         0       0       0       0       0       0       0       0       0
  2788 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2789 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2790 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2791 ;;Total ram usage:        0 bytes
  2792 ;; Hardware stack levels used:    1
  2793 ;; Hardware stack levels required when called:    4
  2794 ;; This function calls:
  2795 ;;		_config_timer_dois
  2796 ;;		_config_timer_zero
  2797 ;;		_init_interrupt
  2798 ;;		_init_oscilador
  2799 ;;		_init_ports
  2800 ;; This function is called by:
  2801 ;;		_main
  2802 ;; This function uses a non-reentrant model
  2803 ;;
  2804                           
  2805                           	psect	text6
  2806  003550                     __ptext6:
  2807                           	opt stack 0
  2808  003550                     _init_hardware:
  2809                           	opt stack 26
  2810                           
  2811                           ;hardware.c: 58: init_oscilador();
  2812                           
  2813                           ;incstack = 0
  2814  003550  ECED  F01A         	call	_init_oscilador	;wreg free
  2815                           
  2816                           ;hardware.c: 61: init_ports();
  2817  003554  EC9C  F01A         	call	_init_ports	;wreg free
  2818                           
  2819                           ;hardware.c: 64: config_timer_zero();
  2820  003558  EC83  F01A         	call	_config_timer_zero	;wreg free
  2821                           
  2822                           ;hardware.c: 67: config_timer_dois();
  2823  00355C  ECE1  F01A         	call	_config_timer_dois	;wreg free
  2824                           
  2825                           ;hardware.c: 70: init_interrupt();
  2826  003560  ECBD  F01A         	call	_init_interrupt	;wreg free
  2827  003564  0012               	return		;funcret
  2828  003566                     __end_of_init_hardware:
  2829                           	opt stack 0
  2830                           tblptru	equ	0xFF8
  2831                           tblptrh	equ	0xFF7
  2832                           tblptrl	equ	0xFF6
  2833                           tablat	equ	0xFF5
  2834                           prodh	equ	0xFF4
  2835                           prodl	equ	0xFF3
  2836                           postinc0	equ	0xFEE
  2837                           wreg	equ	0xFE8
  2838                           postdec1	equ	0xFE5
  2839                           fsr1h	equ	0xFE2
  2840                           fsr1l	equ	0xFE1
  2841                           postinc2	equ	0xFDE
  2842                           postdec2	equ	0xFDD
  2843                           fsr2h	equ	0xFDA
  2844                           fsr2l	equ	0xFD9
  2845                           status	equ	0xFD8
  2846                           
  2847 ;; *************** function _init_ports *****************
  2848 ;; Defined at:
  2849 ;;		line 154 in file "bibliotecas/hardware.c"
  2850 ;; Parameters:    Size  Location     Type
  2851 ;;		None
  2852 ;; Auto vars:     Size  Location     Type
  2853 ;;		None
  2854 ;; Return value:  Size  Location     Type
  2855 ;;                  1    wreg      void 
  2856 ;; Registers used:
  2857 ;;		wreg, status,2
  2858 ;; Tracked objects:
  2859 ;;		On entry : 0/0
  2860 ;;		On exit  : 0/0
  2861 ;;		Unchanged: 0/0
  2862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2863 ;;      Params:         0       0       0       0       0       0       0       0       0
  2864 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2865 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2866 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2867 ;;Total ram usage:        0 bytes
  2868 ;; Hardware stack levels used:    1
  2869 ;; Hardware stack levels required when called:    2
  2870 ;; This function calls:
  2871 ;;		Nothing
  2872 ;; This function is called by:
  2873 ;;		_init_hardware
  2874 ;; This function uses a non-reentrant model
  2875 ;;
  2876                           
  2877                           	psect	text7
  2878  003538                     __ptext7:
  2879                           	opt stack 0
  2880  003538                     _init_ports:
  2881                           	opt stack 27
  2882                           
  2883                           ;hardware.c: 156: TRISB = 0b00000001;
  2884                           
  2885                           ;incstack = 0
  2886  003538  0E01               	movlw	1
  2887  00353A  6E93               	movwf	3987,c	;volatile
  2888                           
  2889                           ;hardware.c: 157: LATB = 0xFF;
  2890  00353C  688A               	setf	3978,c	;volatile
  2891                           
  2892                           ;hardware.c: 158: TRISD = 0x00;
  2893  00353E  0E00               	movlw	0
  2894  003540  6E95               	movwf	3989,c	;volatile
  2895                           
  2896                           ;hardware.c: 159: TRISA = 0b00000111;
  2897  003542  0E07               	movlw	7
  2898  003544  6E92               	movwf	3986,c	;volatile
  2899                           
  2900                           ;hardware.c: 160: TRISC = 0x11111111;
  2901  003546  0E11               	movlw	17
  2902  003548  6E94               	movwf	3988,c	;volatile
  2903                           
  2904                           ;hardware.c: 161: TRISE = 0b00000011;
  2905  00354A  0E03               	movlw	3
  2906  00354C  6E96               	movwf	3990,c	;volatile
  2907  00354E  0012               	return		;funcret
  2908  003550                     __end_of_init_ports:
  2909                           	opt stack 0
  2910                           tblptru	equ	0xFF8
  2911                           tblptrh	equ	0xFF7
  2912                           tblptrl	equ	0xFF6
  2913                           tablat	equ	0xFF5
  2914                           prodh	equ	0xFF4
  2915                           prodl	equ	0xFF3
  2916                           postinc0	equ	0xFEE
  2917                           wreg	equ	0xFE8
  2918                           postdec1	equ	0xFE5
  2919                           fsr1h	equ	0xFE2
  2920                           fsr1l	equ	0xFE1
  2921                           postinc2	equ	0xFDE
  2922                           postdec2	equ	0xFDD
  2923                           fsr2h	equ	0xFDA
  2924                           fsr2l	equ	0xFD9
  2925                           status	equ	0xFD8
  2926                           
  2927 ;; *************** function _init_oscilador *****************
  2928 ;; Defined at:
  2929 ;;		line 171 in file "bibliotecas/hardware.c"
  2930 ;; Parameters:    Size  Location     Type
  2931 ;;		None
  2932 ;; Auto vars:     Size  Location     Type
  2933 ;;		None
  2934 ;; Return value:  Size  Location     Type
  2935 ;;                  1    wreg      void 
  2936 ;; Registers used:
  2937 ;;		None
  2938 ;; Tracked objects:
  2939 ;;		On entry : 0/0
  2940 ;;		On exit  : 0/0
  2941 ;;		Unchanged: 0/0
  2942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2943 ;;      Params:         0       0       0       0       0       0       0       0       0
  2944 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2945 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2946 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2947 ;;Total ram usage:        0 bytes
  2948 ;; Hardware stack levels used:    1
  2949 ;; Hardware stack levels required when called:    2
  2950 ;; This function calls:
  2951 ;;		Nothing
  2952 ;; This function is called by:
  2953 ;;		_init_hardware
  2954 ;; This function uses a non-reentrant model
  2955 ;;
  2956                           
  2957                           	psect	text8
  2958  0035DA                     __ptext8:
  2959                           	opt stack 0
  2960  0035DA                     _init_oscilador:
  2961                           	opt stack 27
  2962                           
  2963                           ;hardware.c: 174: OSCCONbits.IRCF0 = 1;
  2964                           
  2965                           ;incstack = 0
  2966  0035DA  88D3               	bsf	4051,4,c	;volatile
  2967                           
  2968                           ;hardware.c: 175: OSCCONbits.IRCF1 = 1;
  2969  0035DC  8AD3               	bsf	4051,5,c	;volatile
  2970                           
  2971                           ;hardware.c: 176: OSCCONbits.IRCF2 = 1;
  2972  0035DE  8CD3               	bsf	4051,6,c	;volatile
  2973  0035E0  0012               	return		;funcret
  2974  0035E2                     __end_of_init_oscilador:
  2975                           	opt stack 0
  2976                           tblptru	equ	0xFF8
  2977                           tblptrh	equ	0xFF7
  2978                           tblptrl	equ	0xFF6
  2979                           tablat	equ	0xFF5
  2980                           prodh	equ	0xFF4
  2981                           prodl	equ	0xFF3
  2982                           postinc0	equ	0xFEE
  2983                           wreg	equ	0xFE8
  2984                           postdec1	equ	0xFE5
  2985                           fsr1h	equ	0xFE2
  2986                           fsr1l	equ	0xFE1
  2987                           postinc2	equ	0xFDE
  2988                           postdec2	equ	0xFDD
  2989                           fsr2h	equ	0xFDA
  2990                           fsr2l	equ	0xFD9
  2991                           status	equ	0xFD8
  2992                           
  2993 ;; *************** function _init_interrupt *****************
  2994 ;; Defined at:
  2995 ;;		line 98 in file "bibliotecas/hardware.c"
  2996 ;; Parameters:    Size  Location     Type
  2997 ;;		None
  2998 ;; Auto vars:     Size  Location     Type
  2999 ;;		None
  3000 ;; Return value:  Size  Location     Type
  3001 ;;                  1    wreg      void 
  3002 ;; Registers used:
  3003 ;;		wreg, status,2
  3004 ;; Tracked objects:
  3005 ;;		On entry : 0/0
  3006 ;;		On exit  : 0/0
  3007 ;;		Unchanged: 0/0
  3008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3009 ;;      Params:         0       0       0       0       0       0       0       0       0
  3010 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3011 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3012 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3013 ;;Total ram usage:        0 bytes
  3014 ;; Hardware stack levels used:    1
  3015 ;; Hardware stack levels required when called:    2
  3016 ;; This function calls:
  3017 ;;		Nothing
  3018 ;; This function is called by:
  3019 ;;		_init_hardware
  3020 ;; This function uses a non-reentrant model
  3021 ;;
  3022                           
  3023                           	psect	text9
  3024  00357A                     __ptext9:
  3025                           	opt stack 0
  3026  00357A                     _init_interrupt:
  3027                           	opt stack 27
  3028                           
  3029                           ;hardware.c: 100: INTCON = 0b11110000;
  3030                           
  3031                           ;incstack = 0
  3032  00357A  0EF0               	movlw	240
  3033  00357C  6EF2               	movwf	intcon,c	;volatile
  3034                           
  3035                           ;hardware.c: 101: INTCON2 = 0b00000000;
  3036  00357E  0E00               	movlw	0
  3037  003580  6EF1               	movwf	intcon2,c	;volatile
  3038                           
  3039                           ;hardware.c: 102: INTCON3 = 0b00000000;
  3040  003582  0E00               	movlw	0
  3041  003584  6EF0               	movwf	intcon3,c	;volatile
  3042                           
  3043                           ;hardware.c: 104: PIE1 = 0b00100000;
  3044  003586  0E20               	movlw	32
  3045  003588  6E9D               	movwf	3997,c	;volatile
  3046  00358A  0012               	return		;funcret
  3047  00358C                     __end_of_init_interrupt:
  3048                           	opt stack 0
  3049                           tblptru	equ	0xFF8
  3050                           tblptrh	equ	0xFF7
  3051                           tblptrl	equ	0xFF6
  3052                           tablat	equ	0xFF5
  3053                           prodh	equ	0xFF4
  3054                           prodl	equ	0xFF3
  3055                           intcon	equ	0xFF2
  3056                           intcon2	equ	0xFF1
  3057                           intcon3	equ	0xFF0
  3058                           postinc0	equ	0xFEE
  3059                           wreg	equ	0xFE8
  3060                           postdec1	equ	0xFE5
  3061                           fsr1h	equ	0xFE2
  3062                           fsr1l	equ	0xFE1
  3063                           postinc2	equ	0xFDE
  3064                           postdec2	equ	0xFDD
  3065                           fsr2h	equ	0xFDA
  3066                           fsr2l	equ	0xFD9
  3067                           status	equ	0xFD8
  3068                           
  3069 ;; *************** function _config_timer_zero *****************
  3070 ;; Defined at:
  3071 ;;		line 83 in file "bibliotecas/hardware.c"
  3072 ;; Parameters:    Size  Location     Type
  3073 ;;		None
  3074 ;; Auto vars:     Size  Location     Type
  3075 ;;		None
  3076 ;; Return value:  Size  Location     Type
  3077 ;;                  1    wreg      void 
  3078 ;; Registers used:
  3079 ;;		wreg, status,2, cstack
  3080 ;; Tracked objects:
  3081 ;;		On entry : 0/0
  3082 ;;		On exit  : 0/0
  3083 ;;		Unchanged: 0/0
  3084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3085 ;;      Params:         0       0       0       0       0       0       0       0       0
  3086 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3087 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3088 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3089 ;;Total ram usage:        0 bytes
  3090 ;; Hardware stack levels used:    1
  3091 ;; Hardware stack levels required when called:    3
  3092 ;; This function calls:
  3093 ;;		_write_timer_zero
  3094 ;; This function is called by:
  3095 ;;		_init_hardware
  3096 ;; This function uses a non-reentrant model
  3097 ;;
  3098                           
  3099                           	psect	text10
  3100  003506                     __ptext10:
  3101                           	opt stack 0
  3102  003506                     _config_timer_zero:
  3103                           	opt stack 26
  3104                           
  3105                           ;hardware.c: 85: T0CON = 0b11000011;
  3106                           
  3107                           ;incstack = 0
  3108  003506  0EC3               	movlw	195
  3109  003508  6ED5               	movwf	4053,c	;volatile
  3110                           
  3111                           ;hardware.c: 86: SPPCON = 0b00000000;
  3112  00350A  0E00               	movlw	0
  3113  00350C  6E65               	movwf	3941,c	;volatile
  3114                           
  3115                           ;hardware.c: 87: SPPCFG = 0b00000000;
  3116  00350E  0E00               	movlw	0
  3117  003510  6E63               	movwf	3939,c	;volatile
  3118                           
  3119                           ;hardware.c: 88: write_timer_zero(0x0083);
  3120  003512  0E00               	movlw	0
  3121  003514  6E17               	movwf	write_timer_zero@timer0+1,c
  3122  003516  0E83               	movlw	131
  3123  003518  6E16               	movwf	write_timer_zero@timer0,c
  3124  00351A  ECC6  F01A         	call	_write_timer_zero	;wreg free
  3125  00351E  0012               	return		;funcret
  3126  003520                     __end_of_config_timer_zero:
  3127                           	opt stack 0
  3128                           tblptru	equ	0xFF8
  3129                           tblptrh	equ	0xFF7
  3130                           tblptrl	equ	0xFF6
  3131                           tablat	equ	0xFF5
  3132                           prodh	equ	0xFF4
  3133                           prodl	equ	0xFF3
  3134                           intcon	equ	0xFF2
  3135                           intcon2	equ	0xFF1
  3136                           intcon3	equ	0xFF0
  3137                           postinc0	equ	0xFEE
  3138                           wreg	equ	0xFE8
  3139                           postdec1	equ	0xFE5
  3140                           fsr1h	equ	0xFE2
  3141                           fsr1l	equ	0xFE1
  3142                           postinc2	equ	0xFDE
  3143                           postdec2	equ	0xFDD
  3144                           fsr2h	equ	0xFDA
  3145                           fsr2l	equ	0xFD9
  3146                           status	equ	0xFD8
  3147                           
  3148 ;; *************** function _write_timer_zero *****************
  3149 ;; Defined at:
  3150 ;;		line 138 in file "bibliotecas/hardware.c"
  3151 ;; Parameters:    Size  Location     Type
  3152 ;;  timer0          2   21[COMRAM] unsigned int 
  3153 ;; Auto vars:     Size  Location     Type
  3154 ;;  timer           2   23[COMRAM] struct Timers
  3155 ;; Return value:  Size  Location     Type
  3156 ;;                  1    wreg      void 
  3157 ;; Registers used:
  3158 ;;		None
  3159 ;; Tracked objects:
  3160 ;;		On entry : 0/0
  3161 ;;		On exit  : 0/0
  3162 ;;		Unchanged: 0/0
  3163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3164 ;;      Params:         2       0       0       0       0       0       0       0       0
  3165 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3166 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3167 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3168 ;;Total ram usage:        4 bytes
  3169 ;; Hardware stack levels used:    1
  3170 ;; Hardware stack levels required when called:    2
  3171 ;; This function calls:
  3172 ;;		Nothing
  3173 ;; This function is called by:
  3174 ;;		_config_timer_zero
  3175 ;; This function uses a non-reentrant model
  3176 ;;
  3177                           
  3178                           	psect	text11
  3179  00358C                     __ptext11:
  3180                           	opt stack 0
  3181  00358C                     _write_timer_zero:
  3182                           	opt stack 26
  3183                           
  3184                           ;hardware.c: 140: union Timers timer;
  3185                           ;hardware.c: 142: timer.lt = timer0;
  3186                           
  3187                           ;incstack = 0
  3188  00358C  C016  F018         	movff	write_timer_zero@timer0,write_timer_zero@timer
  3189  003590  C017  F019         	movff	write_timer_zero@timer0+1,write_timer_zero@timer+1
  3190                           
  3191                           ;hardware.c: 144: TMR0H = timer.bt[1];
  3192  003594  C019  FFD7         	movff	write_timer_zero@timer+1,4055	;volatile
  3193                           
  3194                           ;hardware.c: 145: TMR0L = timer.bt[0];
  3195  003598  C018  FFD6         	movff	write_timer_zero@timer,4054	;volatile
  3196  00359C  0012               	return		;funcret
  3197  00359E                     __end_of_write_timer_zero:
  3198                           	opt stack 0
  3199                           tblptru	equ	0xFF8
  3200                           tblptrh	equ	0xFF7
  3201                           tblptrl	equ	0xFF6
  3202                           tablat	equ	0xFF5
  3203                           prodh	equ	0xFF4
  3204                           prodl	equ	0xFF3
  3205                           intcon	equ	0xFF2
  3206                           intcon2	equ	0xFF1
  3207                           intcon3	equ	0xFF0
  3208                           postinc0	equ	0xFEE
  3209                           wreg	equ	0xFE8
  3210                           postdec1	equ	0xFE5
  3211                           fsr1h	equ	0xFE2
  3212                           fsr1l	equ	0xFE1
  3213                           postinc2	equ	0xFDE
  3214                           postdec2	equ	0xFDD
  3215                           fsr2h	equ	0xFDA
  3216                           fsr2l	equ	0xFD9
  3217                           status	equ	0xFD8
  3218                           
  3219 ;; *************** function _config_timer_dois *****************
  3220 ;; Defined at:
  3221 ;;		line 200 in file "bibliotecas/hardware.c"
  3222 ;; Parameters:    Size  Location     Type
  3223 ;;		None
  3224 ;; Auto vars:     Size  Location     Type
  3225 ;;		None
  3226 ;; Return value:  Size  Location     Type
  3227 ;;                  1    wreg      void 
  3228 ;; Registers used:
  3229 ;;		wreg, status,2
  3230 ;; Tracked objects:
  3231 ;;		On entry : 0/0
  3232 ;;		On exit  : 0/0
  3233 ;;		Unchanged: 0/0
  3234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3235 ;;      Params:         0       0       0       0       0       0       0       0       0
  3236 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3237 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3238 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3239 ;;Total ram usage:        0 bytes
  3240 ;; Hardware stack levels used:    1
  3241 ;; Hardware stack levels required when called:    2
  3242 ;; This function calls:
  3243 ;;		Nothing
  3244 ;; This function is called by:
  3245 ;;		_init_hardware
  3246 ;; This function uses a non-reentrant model
  3247 ;;
  3248                           
  3249                           	psect	text12
  3250  0035C2                     __ptext12:
  3251                           	opt stack 0
  3252  0035C2                     _config_timer_dois:
  3253                           	opt stack 27
  3254                           
  3255                           ;hardware.c: 202: T2CON = 0b00000100;
  3256                           
  3257                           ;incstack = 0
  3258  0035C2  0E04               	movlw	4
  3259  0035C4  6ECA               	movwf	4042,c	;volatile
  3260                           
  3261                           ;hardware.c: 203: TMR2 = 0;
  3262  0035C6  0E00               	movlw	0
  3263  0035C8  6ECC               	movwf	4044,c	;volatile
  3264                           
  3265                           ;hardware.c: 204: PR2 = 0xFF;
  3266  0035CA  68CB               	setf	4043,c	;volatile
  3267  0035CC  0012               	return		;funcret
  3268  0035CE                     __end_of_config_timer_dois:
  3269                           	opt stack 0
  3270                           tblptru	equ	0xFF8
  3271                           tblptrh	equ	0xFF7
  3272                           tblptrl	equ	0xFF6
  3273                           tablat	equ	0xFF5
  3274                           prodh	equ	0xFF4
  3275                           prodl	equ	0xFF3
  3276                           intcon	equ	0xFF2
  3277                           intcon2	equ	0xFF1
  3278                           intcon3	equ	0xFF0
  3279                           postinc0	equ	0xFEE
  3280                           wreg	equ	0xFE8
  3281                           postdec1	equ	0xFE5
  3282                           fsr1h	equ	0xFE2
  3283                           fsr1l	equ	0xFE1
  3284                           postinc2	equ	0xFDE
  3285                           postdec2	equ	0xFDD
  3286                           fsr2h	equ	0xFDA
  3287                           fsr2l	equ	0xFD9
  3288                           status	equ	0xFD8
  3289                           
  3290 ;; *************** function _inicializa_uart *****************
  3291 ;; Defined at:
  3292 ;;		line 206 in file "bibliotecas/uart.c"
  3293 ;; Parameters:    Size  Location     Type
  3294 ;;		None
  3295 ;; Auto vars:     Size  Location     Type
  3296 ;;		None
  3297 ;; Return value:  Size  Location     Type
  3298 ;;                  1    wreg      void 
  3299 ;; Registers used:
  3300 ;;		wreg, status,2, status,0, cstack
  3301 ;; Tracked objects:
  3302 ;;		On entry : 0/0
  3303 ;;		On exit  : 0/0
  3304 ;;		Unchanged: 0/0
  3305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3306 ;;      Params:         0       0       0       0       0       0       0       0       0
  3307 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3308 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3309 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3310 ;;Total ram usage:        0 bytes
  3311 ;; Hardware stack levels used:    1
  3312 ;; Hardware stack levels required when called:    4
  3313 ;; This function calls:
  3314 ;;		_configura_baudrate_uart
  3315 ;; This function is called by:
  3316 ;;		_main
  3317 ;; This function uses a non-reentrant model
  3318 ;;
  3319                           
  3320                           	psect	text13
  3321  0034C6                     __ptext13:
  3322                           	opt stack 0
  3323  0034C6                     _inicializa_uart:
  3324                           	opt stack 26
  3325                           
  3326                           ;uart.c: 208: TRISCbits.RC6 = 0;
  3327                           
  3328                           ;incstack = 0
  3329  0034C6  9C94               	bcf	3988,6,c	;volatile
  3330                           
  3331                           ;uart.c: 209: TRISCbits.RC7 = 0;
  3332  0034C8  9E94               	bcf	3988,7,c	;volatile
  3333                           
  3334                           ;uart.c: 211: (void)configura_baudrate_uart(9600);
  3335  0034CA  0E80               	movlw	128
  3336  0034CC  6E24               	movwf	configura_baudrate_uart@baudrate,c
  3337  0034CE  0E25               	movlw	37
  3338  0034D0  6E25               	movwf	configura_baudrate_uart@baudrate+1,c
  3339  0034D2  0E00               	movlw	0
  3340  0034D4  6E26               	movwf	configura_baudrate_uart@baudrate+2,c
  3341  0034D6  0E00               	movlw	0
  3342  0034D8  6E27               	movwf	configura_baudrate_uart@baudrate+3,c
  3343  0034DA  ECD6  F00D         	call	_configura_baudrate_uart	;wreg free
  3344                           
  3345                           ;uart.c: 213: TXSTA = 0x20;
  3346  0034DE  0E20               	movlw	32
  3347  0034E0  6EAC               	movwf	4012,c	;volatile
  3348                           
  3349                           ;uart.c: 214: RCSTA = 0x90;
  3350  0034E2  0E90               	movlw	144
  3351  0034E4  6EAB               	movwf	4011,c	;volatile
  3352  0034E6  0012               	return		;funcret
  3353  0034E8                     __end_of_inicializa_uart:
  3354                           	opt stack 0
  3355                           tblptru	equ	0xFF8
  3356                           tblptrh	equ	0xFF7
  3357                           tblptrl	equ	0xFF6
  3358                           tablat	equ	0xFF5
  3359                           prodh	equ	0xFF4
  3360                           prodl	equ	0xFF3
  3361                           intcon	equ	0xFF2
  3362                           intcon2	equ	0xFF1
  3363                           intcon3	equ	0xFF0
  3364                           postinc0	equ	0xFEE
  3365                           wreg	equ	0xFE8
  3366                           postdec1	equ	0xFE5
  3367                           fsr1h	equ	0xFE2
  3368                           fsr1l	equ	0xFE1
  3369                           postinc2	equ	0xFDE
  3370                           postdec2	equ	0xFDD
  3371                           fsr2h	equ	0xFDA
  3372                           fsr2l	equ	0xFD9
  3373                           status	equ	0xFD8
  3374                           
  3375 ;; *************** function _configura_baudrate_uart *****************
  3376 ;; Defined at:
  3377 ;;		line 50 in file "bibliotecas/uart.c"
  3378 ;; Parameters:    Size  Location     Type
  3379 ;;  baudrate        4   35[COMRAM] const long 
  3380 ;; Auto vars:     Size  Location     Type
  3381 ;;  x               2   47[COMRAM] unsigned int 
  3382 ;; Return value:  Size  Location     Type
  3383 ;;                  1    wreg      unsigned char 
  3384 ;; Registers used:
  3385 ;;		wreg, status,2, status,0, cstack
  3386 ;; Tracked objects:
  3387 ;;		On entry : 0/0
  3388 ;;		On exit  : 0/0
  3389 ;;		Unchanged: 0/0
  3390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3391 ;;      Params:         4       0       0       0       0       0       0       0       0
  3392 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3393 ;;      Temps:          8       0       0       0       0       0       0       0       0
  3394 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3395 ;;Total ram usage:       14 bytes
  3396 ;; Hardware stack levels used:    1
  3397 ;; Hardware stack levels required when called:    3
  3398 ;; This function calls:
  3399 ;;		___aldiv
  3400 ;; This function is called by:
  3401 ;;		_inicializa_uart
  3402 ;; This function uses a non-reentrant model
  3403 ;;
  3404                           
  3405                           	psect	text14
  3406  001BAC                     __ptext14:
  3407                           	opt stack 0
  3408  001BAC                     _configura_baudrate_uart:
  3409                           	opt stack 26
  3410                           
  3411                           ;uart.c: 52: unsigned int x;
  3412                           ;uart.c: 54: x = (48000000 - baudrate*64)/(baudrate*64);
  3413                           
  3414                           ;incstack = 0
  3415  001BAC  C024  F028         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  3416  001BB0  C025  F029         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  3417  001BB4  C026  F02A         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  3418  001BB8  C027  F02B         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  3419  001BBC  0E06               	movlw	6
  3420  001BBE                     u8625:
  3421  001BBE  90D8               	bcf	status,0,c
  3422  001BC0  3628               	rlcf	??_configura_baudrate_uart,f,c
  3423  001BC2  3629               	rlcf	??_configura_baudrate_uart+1,f,c
  3424  001BC4  362A               	rlcf	??_configura_baudrate_uart+2,f,c
  3425  001BC6  362B               	rlcf	??_configura_baudrate_uart+3,f,c
  3426  001BC8  2EE8               	decfsz	wreg,f,c
  3427  001BCA  D7F9               	goto	u8625
  3428  001BCC  1E28               	comf	??_configura_baudrate_uart,f,c
  3429  001BCE  1E29               	comf	??_configura_baudrate_uart+1,f,c
  3430  001BD0  1E2A               	comf	??_configura_baudrate_uart+2,f,c
  3431  001BD2  1E2B               	comf	??_configura_baudrate_uart+3,f,c
  3432  001BD4  2A28               	incf	??_configura_baudrate_uart,f,c
  3433  001BD6  0E00               	movlw	0
  3434  001BD8  2229               	addwfc	??_configura_baudrate_uart+1,f,c
  3435  001BDA  222A               	addwfc	??_configura_baudrate_uart+2,f,c
  3436  001BDC  222B               	addwfc	??_configura_baudrate_uart+3,f,c
  3437  001BDE  0E00               	movlw	0
  3438  001BE0  2428               	addwf	??_configura_baudrate_uart,w,c
  3439  001BE2  6E16               	movwf	___aldiv@dividend,c
  3440  001BE4  0E6C               	movlw	108
  3441  001BE6  2029               	addwfc	??_configura_baudrate_uart+1,w,c
  3442  001BE8  6E17               	movwf	___aldiv@dividend+1,c
  3443  001BEA  0EDC               	movlw	220
  3444  001BEC  202A               	addwfc	??_configura_baudrate_uart+2,w,c
  3445  001BEE  6E18               	movwf	___aldiv@dividend+2,c
  3446  001BF0  0E02               	movlw	2
  3447  001BF2  202B               	addwfc	??_configura_baudrate_uart+3,w,c
  3448  001BF4  6E19               	movwf	___aldiv@dividend+3,c
  3449  001BF6  C024  F02C         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  3450  001BFA  C025  F02D         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  3451  001BFE  C026  F02E         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  3452  001C02  C027  F02F         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  3453  001C06  0E06               	movlw	6
  3454  001C08                     u8635:
  3455  001C08  90D8               	bcf	status,0,c
  3456  001C0A  362C               	rlcf	??_configura_baudrate_uart+4,f,c
  3457  001C0C  362D               	rlcf	??_configura_baudrate_uart+5,f,c
  3458  001C0E  362E               	rlcf	??_configura_baudrate_uart+6,f,c
  3459  001C10  362F               	rlcf	??_configura_baudrate_uart+7,f,c
  3460  001C12  2EE8               	decfsz	wreg,f,c
  3461  001C14  D7F9               	goto	u8635
  3462  001C16  C02C  F01A         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  3463  001C1A  C02D  F01B         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  3464  001C1E  C02E  F01C         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  3465  001C22  C02F  F01D         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  3466  001C26  ECB3  F012         	call	___aldiv	;wreg free
  3467  001C2A  C016  F030         	movff	?___aldiv,configura_baudrate_uart@x
  3468  001C2E  C017  F031         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  3469                           
  3470                           ;uart.c: 55: if(x > 255)
  3471  001C32  0431               	decf	configura_baudrate_uart@x+1,w,c
  3472  001C34  A0D8               	btfss	status,0,c
  3473  001C36  D044               	goto	l7923
  3474                           
  3475                           ;uart.c: 56: {
  3476                           ;uart.c: 57: x = (48000000 - baudrate*16)/(baudrate*16);
  3477  001C38  C024  F028         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  3478  001C3C  C025  F029         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  3479  001C40  C026  F02A         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  3480  001C44  C027  F02B         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  3481  001C48  0E04               	movlw	4
  3482  001C4A                     u8655:
  3483  001C4A  90D8               	bcf	status,0,c
  3484  001C4C  3628               	rlcf	??_configura_baudrate_uart,f,c
  3485  001C4E  3629               	rlcf	??_configura_baudrate_uart+1,f,c
  3486  001C50  362A               	rlcf	??_configura_baudrate_uart+2,f,c
  3487  001C52  362B               	rlcf	??_configura_baudrate_uart+3,f,c
  3488  001C54  2EE8               	decfsz	wreg,f,c
  3489  001C56  D7F9               	goto	u8655
  3490  001C58  1E28               	comf	??_configura_baudrate_uart,f,c
  3491  001C5A  1E29               	comf	??_configura_baudrate_uart+1,f,c
  3492  001C5C  1E2A               	comf	??_configura_baudrate_uart+2,f,c
  3493  001C5E  1E2B               	comf	??_configura_baudrate_uart+3,f,c
  3494  001C60  2A28               	incf	??_configura_baudrate_uart,f,c
  3495  001C62  0E00               	movlw	0
  3496  001C64  2229               	addwfc	??_configura_baudrate_uart+1,f,c
  3497  001C66  222A               	addwfc	??_configura_baudrate_uart+2,f,c
  3498  001C68  222B               	addwfc	??_configura_baudrate_uart+3,f,c
  3499  001C6A  0E00               	movlw	0
  3500  001C6C  2428               	addwf	??_configura_baudrate_uart,w,c
  3501  001C6E  6E16               	movwf	___aldiv@dividend,c
  3502  001C70  0E6C               	movlw	108
  3503  001C72  2029               	addwfc	??_configura_baudrate_uart+1,w,c
  3504  001C74  6E17               	movwf	___aldiv@dividend+1,c
  3505  001C76  0EDC               	movlw	220
  3506  001C78  202A               	addwfc	??_configura_baudrate_uart+2,w,c
  3507  001C7A  6E18               	movwf	___aldiv@dividend+2,c
  3508  001C7C  0E02               	movlw	2
  3509  001C7E  202B               	addwfc	??_configura_baudrate_uart+3,w,c
  3510  001C80  6E19               	movwf	___aldiv@dividend+3,c
  3511  001C82  C024  F02C         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  3512  001C86  C025  F02D         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  3513  001C8A  C026  F02E         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  3514  001C8E  C027  F02F         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  3515  001C92  0E04               	movlw	4
  3516  001C94                     u8665:
  3517  001C94  90D8               	bcf	status,0,c
  3518  001C96  362C               	rlcf	??_configura_baudrate_uart+4,f,c
  3519  001C98  362D               	rlcf	??_configura_baudrate_uart+5,f,c
  3520  001C9A  362E               	rlcf	??_configura_baudrate_uart+6,f,c
  3521  001C9C  362F               	rlcf	??_configura_baudrate_uart+7,f,c
  3522  001C9E  2EE8               	decfsz	wreg,f,c
  3523  001CA0  D7F9               	goto	u8665
  3524  001CA2  C02C  F01A         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  3525  001CA6  C02D  F01B         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  3526  001CAA  C02E  F01C         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  3527  001CAE  C02F  F01D         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  3528  001CB2  ECB3  F012         	call	___aldiv	;wreg free
  3529  001CB6  C016  F030         	movff	?___aldiv,configura_baudrate_uart@x
  3530  001CBA  C017  F031         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  3531                           
  3532                           ;uart.c: 58: BRGH = 1;
  3533  001CBE  84AC               	bsf	4012,2,c	;volatile
  3534  001CC0                     l7923:
  3535                           
  3536                           ;uart.c: 59: }
  3537                           ;uart.c: 60: if(x < 256)
  3538  001CC0  0431               	decf	configura_baudrate_uart@x+1,w,c
  3539  001CC2  B0D8               	btfsc	status,0,c
  3540  001CC4  0012               	return	
  3541                           
  3542                           ;uart.c: 61: {
  3543                           ;uart.c: 62: SPBRG = x;
  3544  001CC6  C030  FFAF         	movff	configura_baudrate_uart@x,4015	;volatile
  3545                           
  3546                           ;uart.c: 63: SYNC = 0;
  3547  001CCA  98AC               	bcf	4012,4,c	;volatile
  3548                           
  3549                           ;uart.c: 64: SPEN = 1;
  3550  001CCC  8EAB               	bsf	4011,7,c	;volatile
  3551                           
  3552                           ;uart.c: 65: TRISCbits.RC7 = 1;
  3553  001CCE  8E94               	bsf	3988,7,c	;volatile
  3554                           
  3555                           ;uart.c: 66: TRISCbits.RC6 = 0;
  3556  001CD0  9C94               	bcf	3988,6,c	;volatile
  3557                           
  3558                           ;uart.c: 67: CREN = 1;
  3559  001CD2  88AB               	bsf	4011,4,c	;volatile
  3560                           
  3561                           ;uart.c: 68: TXEN = 1;
  3562  001CD4  8AAC               	bsf	4012,5,c	;volatile
  3563                           
  3564                           ;uart.c: 70: return (1);
  3565                           ;	Return value of _configura_baudrate_uart is never used
  3566  001CD6  0012               	return	
  3567  001CD8                     __end_of_configura_baudrate_uart:
  3568                           	opt stack 0
  3569                           tblptru	equ	0xFF8
  3570                           tblptrh	equ	0xFF7
  3571                           tblptrl	equ	0xFF6
  3572                           tablat	equ	0xFF5
  3573                           prodh	equ	0xFF4
  3574                           prodl	equ	0xFF3
  3575                           intcon	equ	0xFF2
  3576                           intcon2	equ	0xFF1
  3577                           intcon3	equ	0xFF0
  3578                           postinc0	equ	0xFEE
  3579                           wreg	equ	0xFE8
  3580                           postdec1	equ	0xFE5
  3581                           fsr1h	equ	0xFE2
  3582                           fsr1l	equ	0xFE1
  3583                           postinc2	equ	0xFDE
  3584                           postdec2	equ	0xFDD
  3585                           fsr2h	equ	0xFDA
  3586                           fsr2l	equ	0xFD9
  3587                           status	equ	0xFD8
  3588                           
  3589 ;; *************** function ___aldiv *****************
  3590 ;; Defined at:
  3591 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\aldiv.c"
  3592 ;; Parameters:    Size  Location     Type
  3593 ;;  dividend        4   21[COMRAM] long 
  3594 ;;  divisor         4   25[COMRAM] long 
  3595 ;; Auto vars:     Size  Location     Type
  3596 ;;  quotient        4   31[COMRAM] long 
  3597 ;;  sign            1   30[COMRAM] unsigned char 
  3598 ;;  counter         1   29[COMRAM] unsigned char 
  3599 ;; Return value:  Size  Location     Type
  3600 ;;                  4   21[COMRAM] long 
  3601 ;; Registers used:
  3602 ;;		wreg, status,2, status,0
  3603 ;; Tracked objects:
  3604 ;;		On entry : 0/0
  3605 ;;		On exit  : 0/0
  3606 ;;		Unchanged: 0/0
  3607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3608 ;;      Params:         8       0       0       0       0       0       0       0       0
  3609 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3610 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3611 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3612 ;;Total ram usage:       14 bytes
  3613 ;; Hardware stack levels used:    1
  3614 ;; Hardware stack levels required when called:    2
  3615 ;; This function calls:
  3616 ;;		Nothing
  3617 ;; This function is called by:
  3618 ;;		_configura_baudrate_uart
  3619 ;; This function uses a non-reentrant model
  3620 ;;
  3621                           
  3622                           	psect	text15
  3623  002566                     __ptext15:
  3624                           	opt stack 0
  3625  002566                     ___aldiv:
  3626                           	opt stack 26
  3627                           
  3628                           ;incstack = 0
  3629  002566  0E00               	movlw	0
  3630  002568  6E1F               	movwf	___aldiv@sign,c
  3631  00256A  AE1D               	btfss	___aldiv@divisor+3,7,c
  3632  00256C  D00A               	goto	l7637
  3633  00256E  1E1D               	comf	___aldiv@divisor+3,f,c
  3634  002570  1E1C               	comf	___aldiv@divisor+2,f,c
  3635  002572  1E1B               	comf	___aldiv@divisor+1,f,c
  3636  002574  6C1A               	negf	___aldiv@divisor,c
  3637  002576  0E00               	movlw	0
  3638  002578  221B               	addwfc	___aldiv@divisor+1,f,c
  3639  00257A  221C               	addwfc	___aldiv@divisor+2,f,c
  3640  00257C  221D               	addwfc	___aldiv@divisor+3,f,c
  3641  00257E  0E01               	movlw	1
  3642  002580  6E1F               	movwf	___aldiv@sign,c
  3643  002582                     l7637:
  3644  002582  AE19               	btfss	___aldiv@dividend+3,7,c
  3645  002584  D00A               	goto	l7643
  3646  002586  1E19               	comf	___aldiv@dividend+3,f,c
  3647  002588  1E18               	comf	___aldiv@dividend+2,f,c
  3648  00258A  1E17               	comf	___aldiv@dividend+1,f,c
  3649  00258C  6C16               	negf	___aldiv@dividend,c
  3650  00258E  0E00               	movlw	0
  3651  002590  2217               	addwfc	___aldiv@dividend+1,f,c
  3652  002592  2218               	addwfc	___aldiv@dividend+2,f,c
  3653  002594  2219               	addwfc	___aldiv@dividend+3,f,c
  3654  002596  0E01               	movlw	1
  3655  002598  1A1F               	xorwf	___aldiv@sign,f,c
  3656  00259A                     l7643:
  3657  00259A  0E00               	movlw	0
  3658  00259C  6E20               	movwf	___aldiv@quotient,c
  3659  00259E  0E00               	movlw	0
  3660  0025A0  6E21               	movwf	___aldiv@quotient+1,c
  3661  0025A2  0E00               	movlw	0
  3662  0025A4  6E22               	movwf	___aldiv@quotient+2,c
  3663  0025A6  0E00               	movlw	0
  3664  0025A8  6E23               	movwf	___aldiv@quotient+3,c
  3665  0025AA  501A               	movf	___aldiv@divisor,w,c
  3666  0025AC  101B               	iorwf	___aldiv@divisor+1,w,c
  3667  0025AE  101C               	iorwf	___aldiv@divisor+2,w,c
  3668  0025B0  101D               	iorwf	___aldiv@divisor+3,w,c
  3669  0025B2  B4D8               	btfsc	status,2,c
  3670  0025B4  D02A               	goto	l7665
  3671  0025B6  0E01               	movlw	1
  3672  0025B8  6E1E               	movwf	___aldiv@counter,c
  3673  0025BA  D006               	goto	l7651
  3674  0025BC                     l7649:
  3675  0025BC  90D8               	bcf	status,0,c
  3676  0025BE  361A               	rlcf	___aldiv@divisor,f,c
  3677  0025C0  361B               	rlcf	___aldiv@divisor+1,f,c
  3678  0025C2  361C               	rlcf	___aldiv@divisor+2,f,c
  3679  0025C4  361D               	rlcf	___aldiv@divisor+3,f,c
  3680  0025C6  2A1E               	incf	___aldiv@counter,f,c
  3681  0025C8                     l7651:
  3682  0025C8  AE1D               	btfss	___aldiv@divisor+3,7,c
  3683  0025CA  D7F8               	goto	l7649
  3684  0025CC                     l7653:
  3685  0025CC  90D8               	bcf	status,0,c
  3686  0025CE  3620               	rlcf	___aldiv@quotient,f,c
  3687  0025D0  3621               	rlcf	___aldiv@quotient+1,f,c
  3688  0025D2  3622               	rlcf	___aldiv@quotient+2,f,c
  3689  0025D4  3623               	rlcf	___aldiv@quotient+3,f,c
  3690  0025D6  501A               	movf	___aldiv@divisor,w,c
  3691  0025D8  5C16               	subwf	___aldiv@dividend,w,c
  3692  0025DA  501B               	movf	___aldiv@divisor+1,w,c
  3693  0025DC  5817               	subwfb	___aldiv@dividend+1,w,c
  3694  0025DE  501C               	movf	___aldiv@divisor+2,w,c
  3695  0025E0  5818               	subwfb	___aldiv@dividend+2,w,c
  3696  0025E2  501D               	movf	___aldiv@divisor+3,w,c
  3697  0025E4  5819               	subwfb	___aldiv@dividend+3,w,c
  3698  0025E6  A0D8               	btfss	status,0,c
  3699  0025E8  D009               	goto	l7661
  3700  0025EA  501A               	movf	___aldiv@divisor,w,c
  3701  0025EC  5E16               	subwf	___aldiv@dividend,f,c
  3702  0025EE  501B               	movf	___aldiv@divisor+1,w,c
  3703  0025F0  5A17               	subwfb	___aldiv@dividend+1,f,c
  3704  0025F2  501C               	movf	___aldiv@divisor+2,w,c
  3705  0025F4  5A18               	subwfb	___aldiv@dividend+2,f,c
  3706  0025F6  501D               	movf	___aldiv@divisor+3,w,c
  3707  0025F8  5A19               	subwfb	___aldiv@dividend+3,f,c
  3708  0025FA  8020               	bsf	___aldiv@quotient,0,c
  3709  0025FC                     l7661:
  3710  0025FC  90D8               	bcf	status,0,c
  3711  0025FE  321D               	rrcf	___aldiv@divisor+3,f,c
  3712  002600  321C               	rrcf	___aldiv@divisor+2,f,c
  3713  002602  321B               	rrcf	___aldiv@divisor+1,f,c
  3714  002604  321A               	rrcf	___aldiv@divisor,f,c
  3715  002606  2E1E               	decfsz	___aldiv@counter,f,c
  3716  002608  D7E1               	goto	l7653
  3717  00260A                     l7665:
  3718  00260A  501F               	movf	___aldiv@sign,w,c
  3719  00260C  B4D8               	btfsc	status,2,c
  3720  00260E  D008               	goto	l7669
  3721  002610  1E23               	comf	___aldiv@quotient+3,f,c
  3722  002612  1E22               	comf	___aldiv@quotient+2,f,c
  3723  002614  1E21               	comf	___aldiv@quotient+1,f,c
  3724  002616  6C20               	negf	___aldiv@quotient,c
  3725  002618  0E00               	movlw	0
  3726  00261A  2221               	addwfc	___aldiv@quotient+1,f,c
  3727  00261C  2222               	addwfc	___aldiv@quotient+2,f,c
  3728  00261E  2223               	addwfc	___aldiv@quotient+3,f,c
  3729  002620                     l7669:
  3730  002620  C020  F016         	movff	___aldiv@quotient,?___aldiv
  3731  002624  C021  F017         	movff	___aldiv@quotient+1,?___aldiv+1
  3732  002628  C022  F018         	movff	___aldiv@quotient+2,?___aldiv+2
  3733  00262C  C023  F019         	movff	___aldiv@quotient+3,?___aldiv+3
  3734  002630  0012               	return	
  3735  002632                     __end_of___aldiv:
  3736                           	opt stack 0
  3737                           tblptru	equ	0xFF8
  3738                           tblptrh	equ	0xFF7
  3739                           tblptrl	equ	0xFF6
  3740                           tablat	equ	0xFF5
  3741                           prodh	equ	0xFF4
  3742                           prodl	equ	0xFF3
  3743                           intcon	equ	0xFF2
  3744                           intcon2	equ	0xFF1
  3745                           intcon3	equ	0xFF0
  3746                           postinc0	equ	0xFEE
  3747                           wreg	equ	0xFE8
  3748                           postdec1	equ	0xFE5
  3749                           fsr1h	equ	0xFE2
  3750                           fsr1l	equ	0xFE1
  3751                           postinc2	equ	0xFDE
  3752                           postdec2	equ	0xFDD
  3753                           fsr2h	equ	0xFDA
  3754                           fsr2l	equ	0xFD9
  3755                           status	equ	0xFD8
  3756                           
  3757 ;; *************** function _inicializa_tarefas *****************
  3758 ;; Defined at:
  3759 ;;		line 157 in file "main.c"
  3760 ;; Parameters:    Size  Location     Type
  3761 ;;		None
  3762 ;; Auto vars:     Size  Location     Type
  3763 ;;		None
  3764 ;; Return value:  Size  Location     Type
  3765 ;;                  1    wreg      void 
  3766 ;; Registers used:
  3767 ;;		wreg, status,2, status,0
  3768 ;; Tracked objects:
  3769 ;;		On entry : 0/0
  3770 ;;		On exit  : 0/0
  3771 ;;		Unchanged: 0/0
  3772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3773 ;;      Params:         0       0       0       0       0       0       0       0       0
  3774 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3775 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3776 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3777 ;;Total ram usage:        0 bytes
  3778 ;; Hardware stack levels used:    1
  3779 ;; Hardware stack levels required when called:    2
  3780 ;; This function calls:
  3781 ;;		Nothing
  3782 ;; This function is called by:
  3783 ;;		_main
  3784 ;; This function uses a non-reentrant model
  3785 ;;
  3786                           
  3787                           	psect	text16
  3788  00340A                     __ptext16:
  3789                           	opt stack 0
  3790  00340A                     _inicializa_tarefas:
  3791                           	opt stack 28
  3792                           
  3793                           ;main.c: 160: p_tarefas[0] = GPS;
  3794                           
  3795                           ;incstack = 0
  3796  00340A  0E76               	movlw	low _GPS
  3797  00340C  0100               	movlb	0	; () banked
  3798  00340E  6FCD               	movwf	_p_tarefas& (0+255),b
  3799  003410  0E16               	movlw	high _GPS
  3800  003412  0100               	movlb	0	; () banked
  3801  003414  6FCE               	movwf	(_p_tarefas+1)& (0+255),b
  3802                           
  3803                           ; BSR set to: 0
  3804                           ;main.c: 164: tempo_backup[0] = 5000;
  3805  003416  0E13               	movlw	19
  3806  003418  0100               	movlb	0	; () banked
  3807  00341A  6FCA               	movwf	(_tempo_backup+1)& (0+255),b
  3808  00341C  0E88               	movlw	136
  3809  00341E  6FC9               	movwf	_tempo_backup& (0+255),b
  3810                           
  3811                           ; BSR set to: 0
  3812                           ;main.c: 169: tempo_tarefa[0] = 5000;
  3813  003420  0E13               	movlw	19
  3814  003422  0100               	movlb	0	; () banked
  3815  003424  6FC6               	movwf	(_tempo_tarefa+1)& (0+255),b
  3816  003426  0E88               	movlw	136
  3817  003428  6FC5               	movwf	_tempo_tarefa& (0+255),b
  3818                           
  3819                           ; BSR set to: 0
  3820                           ;main.c: 173: tarefa_em_execucao = 0;
  3821  00342A  0E00               	movlw	0
  3822  00342C  6E47               	movwf	_tarefa_em_execucao,c	;volatile
  3823                           
  3824                           ; BSR set to: 0
  3825  00342E  0012               	return		;funcret
  3826  003430                     __end_of_inicializa_tarefas:
  3827                           	opt stack 0
  3828                           tblptru	equ	0xFF8
  3829                           tblptrh	equ	0xFF7
  3830                           tblptrl	equ	0xFF6
  3831                           tablat	equ	0xFF5
  3832                           prodh	equ	0xFF4
  3833                           prodl	equ	0xFF3
  3834                           intcon	equ	0xFF2
  3835                           intcon2	equ	0xFF1
  3836                           intcon3	equ	0xFF0
  3837                           postinc0	equ	0xFEE
  3838                           wreg	equ	0xFE8
  3839                           postdec1	equ	0xFE5
  3840                           fsr1h	equ	0xFE2
  3841                           fsr1l	equ	0xFE1
  3842                           postinc2	equ	0xFDE
  3843                           postdec2	equ	0xFDD
  3844                           fsr2h	equ	0xFDA
  3845                           fsr2l	equ	0xFD9
  3846                           status	equ	0xFD8
  3847                           
  3848 ;; *************** function _inicializa_shrc *****************
  3849 ;; Defined at:
  3850 ;;		line 47 in file "bibliotecas/SHRC.c"
  3851 ;; Parameters:    Size  Location     Type
  3852 ;;		None
  3853 ;; Auto vars:     Size  Location     Type
  3854 ;;		None
  3855 ;; Return value:  Size  Location     Type
  3856 ;;                  1    wreg      void 
  3857 ;; Registers used:
  3858 ;;		None
  3859 ;; Tracked objects:
  3860 ;;		On entry : 0/0
  3861 ;;		On exit  : 0/0
  3862 ;;		Unchanged: 0/0
  3863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3864 ;;      Params:         0       0       0       0       0       0       0       0       0
  3865 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3866 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3867 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3868 ;;Total ram usage:        0 bytes
  3869 ;; Hardware stack levels used:    1
  3870 ;; Hardware stack levels required when called:    2
  3871 ;; This function calls:
  3872 ;;		Nothing
  3873 ;; This function is called by:
  3874 ;;		_main
  3875 ;; This function uses a non-reentrant model
  3876 ;;
  3877                           
  3878                           	psect	text17
  3879  0035E2                     __ptext17:
  3880                           	opt stack 0
  3881  0035E2                     _inicializa_shrc:
  3882                           	opt stack 28
  3883                           
  3884                           ;SHRC.c: 49: LATBbits.LATB5 = 0;
  3885                           
  3886                           ; BSR set to: 0
  3887                           ;incstack = 0
  3888  0035E2  9A8A               	bcf	3978,5,c	;volatile
  3889                           
  3890                           ;SHRC.c: 50: LATBbits.LATB6 = 0;
  3891  0035E4  9C8A               	bcf	3978,6,c	;volatile
  3892                           
  3893                           ;SHRC.c: 51: LATBbits.LATB7 = 0;
  3894  0035E6  9E8A               	bcf	3978,7,c	;volatile
  3895  0035E8  0012               	return		;funcret
  3896  0035EA                     __end_of_inicializa_shrc:
  3897                           	opt stack 0
  3898                           tblptru	equ	0xFF8
  3899                           tblptrh	equ	0xFF7
  3900                           tblptrl	equ	0xFF6
  3901                           tablat	equ	0xFF5
  3902                           prodh	equ	0xFF4
  3903                           prodl	equ	0xFF3
  3904                           intcon	equ	0xFF2
  3905                           intcon2	equ	0xFF1
  3906                           intcon3	equ	0xFF0
  3907                           postinc0	equ	0xFEE
  3908                           wreg	equ	0xFE8
  3909                           postdec1	equ	0xFE5
  3910                           fsr1h	equ	0xFE2
  3911                           fsr1l	equ	0xFE1
  3912                           postinc2	equ	0xFDE
  3913                           postdec2	equ	0xFDD
  3914                           fsr2h	equ	0xFDA
  3915                           fsr2l	equ	0xFD9
  3916                           status	equ	0xFD8
  3917                           
  3918 ;; *************** function _escalonador *****************
  3919 ;; Defined at:
  3920 ;;		line 184 in file "main.c"
  3921 ;; Parameters:    Size  Location     Type
  3922 ;;		None
  3923 ;; Auto vars:     Size  Location     Type
  3924 ;;  cont            1   77[BANK0 ] unsigned char 
  3925 ;; Return value:  Size  Location     Type
  3926 ;;                  1    wreg      void 
  3927 ;; Registers used:
  3928 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3929 ;; Tracked objects:
  3930 ;;		On entry : 0/0
  3931 ;;		On exit  : 0/0
  3932 ;;		Unchanged: 0/0
  3933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3934 ;;      Params:         0       0       0       0       0       0       0       0       0
  3935 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3936 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3937 ;;      Totals:         0       3       0       0       0       0       0       0       0
  3938 ;;Total ram usage:        3 bytes
  3939 ;; Hardware stack levels used:    1
  3940 ;; Hardware stack levels required when called:    8
  3941 ;; This function calls:
  3942 ;;		_GPS
  3943 ;; This function is called by:
  3944 ;;		_main
  3945 ;; This function uses a non-reentrant model
  3946 ;;
  3947                           
  3948                           	psect	text18
  3949  002632                     __ptext18:
  3950                           	opt stack 0
  3951  002632                     _escalonador:
  3952                           	opt stack 22
  3953                           
  3954                           ;main.c: 186: unsigned char cont;
  3955                           ;main.c: 187: for(cont = 0; cont<2;cont++)
  3956                           
  3957                           ;incstack = 0
  3958  002632  0E00               	movlw	0
  3959  002634  0100               	movlb	0	; () banked
  3960  002636  6FAD               	movwf	escalonador@cont& (0+255),b
  3961  002638                     l11061:
  3962                           
  3963                           ; BSR set to: 0
  3964  002638  0E01               	movlw	1
  3965  00263A  0100               	movlb	0	; () banked
  3966  00263C  65AD               	cpfsgt	escalonador@cont& (0+255),b
  3967  00263E  D001               	goto	l11065
  3968  002640  0012               	return	
  3969  002642                     l11065:
  3970                           
  3971                           ; BSR set to: 0
  3972                           ;main.c: 188: {
  3973                           ;main.c: 189: if((p_tarefas[cont]!= 0 ) && tempo_tarefa[cont] == 0)
  3974  002642  0100               	movlb	0	; () banked
  3975  002644  51AD               	movf	escalonador@cont& (0+255),w,b
  3976  002646  0D02               	mullw	2
  3977  002648  0ECD               	movlw	low _p_tarefas
  3978  00264A  24F3               	addwf	prodl,w,c
  3979  00264C  6ED9               	movwf	fsr2l,c
  3980  00264E  0E00               	movlw	high _p_tarefas
  3981  002650  20F4               	addwfc	prodh,w,c
  3982  002652  6EDA               	movwf	fsr2h,c
  3983  002654  50DE               	movf	postinc2,w,c
  3984  002656  10DE               	iorwf	postinc2,w,c
  3985  002658  B4D8               	btfsc	status,2,c
  3986  00265A  D041               	goto	l11077
  3987                           
  3988                           ; BSR set to: 0
  3989  00265C  0100               	movlb	0	; () banked
  3990  00265E  51AD               	movf	escalonador@cont& (0+255),w,b
  3991  002660  0D02               	mullw	2
  3992  002662  0EC5               	movlw	low _tempo_tarefa
  3993  002664  24F3               	addwf	prodl,w,c
  3994  002666  6ED9               	movwf	fsr2l,c
  3995  002668  0E00               	movlw	high _tempo_tarefa
  3996  00266A  20F4               	addwfc	prodh,w,c
  3997  00266C  6EDA               	movwf	fsr2h,c
  3998  00266E  50DE               	movf	postinc2,w,c
  3999  002670  10DE               	iorwf	postinc2,w,c
  4000  002672  A4D8               	btfss	status,2,c
  4001  002674  D034               	goto	l11077
  4002                           
  4003                           ; BSR set to: 0
  4004                           ;main.c: 190: {
  4005                           ;main.c: 191: tarefa_em_execucao = 1;
  4006  002676  0E01               	movlw	1
  4007  002678  6E47               	movwf	_tarefa_em_execucao,c	;volatile
  4008                           
  4009                           ;main.c: 192: timeout_tarefa = 65000;
  4010  00267A  0EFD               	movlw	253
  4011  00267C  0100               	movlb	0	; () banked
  4012  00267E  6FD9               	movwf	(_timeout_tarefa+1)& (0+255),b
  4013  002680  0EE8               	movlw	232
  4014  002682  6FD8               	movwf	_timeout_tarefa& (0+255),b
  4015                           
  4016                           ; BSR set to: 0
  4017                           ;main.c: 193: p_tarefas[cont]();
  4018  002684  0100               	movlb	0	; () banked
  4019  002686  51AD               	movf	escalonador@cont& (0+255),w,b
  4020  002688  0D02               	mullw	2
  4021  00268A  0ECD               	movlw	low _p_tarefas
  4022  00268C  24F3               	addwf	prodl,w,c
  4023  00268E  6ED9               	movwf	fsr2l,c
  4024  002690  0E00               	movlw	high _p_tarefas
  4025  002692  20F4               	addwfc	prodh,w,c
  4026  002694  6EDA               	movwf	fsr2h,c
  4027  002696  D801               	call	u13438
  4028  002698  D00A               	goto	l11073
  4029  00269A                     u13438:
  4030  00269A  0005               	push	
  4031  00269C  6EFA               	movwf	pclath,c
  4032  00269E  50DE               	movf	postinc2,w,c
  4033  0026A0  6EFD               	movwf	tosl,c
  4034  0026A2  50DE               	movf	postinc2,w,c
  4035  0026A4  6EFE               	movwf	tosh,c
  4036  0026A6  50F8               	movf	tblptru,w,c
  4037  0026A8  6EFF               	movwf	tosu,c
  4038  0026AA  50FA               	movf	pclath,w,c
  4039  0026AC  0012               	return		;indir
  4040  0026AE                     l11073:
  4041                           
  4042                           ;main.c: 194: tarefa_em_execucao = 0;
  4043  0026AE  0E00               	movlw	0
  4044  0026B0  6E47               	movwf	_tarefa_em_execucao,c	;volatile
  4045                           
  4046                           ;main.c: 195: tempo_tarefa[cont] = tempo_backup[cont];
  4047  0026B2  0100               	movlb	0	; () banked
  4048  0026B4  51AD               	movf	escalonador@cont& (0+255),w,b
  4049  0026B6  0D02               	mullw	2
  4050  0026B8  0EC9               	movlw	low _tempo_backup
  4051  0026BA  24F3               	addwf	prodl,w,c
  4052  0026BC  6ED9               	movwf	fsr2l,c
  4053  0026BE  0E00               	movlw	high _tempo_backup
  4054  0026C0  20F4               	addwfc	prodh,w,c
  4055  0026C2  6EDA               	movwf	fsr2h,c
  4056  0026C4  0100               	movlb	0	; () banked
  4057  0026C6  51AD               	movf	escalonador@cont& (0+255),w,b
  4058  0026C8  0D02               	mullw	2
  4059  0026CA  0EC5               	movlw	low _tempo_tarefa
  4060  0026CC  24F3               	addwf	prodl,w,c
  4061  0026CE  6EE1               	movwf	fsr1l,c
  4062  0026D0  0E00               	movlw	high _tempo_tarefa
  4063  0026D2  20F4               	addwfc	prodh,w,c
  4064  0026D4  6EE2               	movwf	fsr1h,c
  4065  0026D6  CFDE FFE6          	movff	postinc2,postinc1
  4066  0026DA  CFDD FFE5          	movff	postdec2,postdec1
  4067  0026DE                     l11077:
  4068                           
  4069                           ; BSR set to: 0
  4070  0026DE  0100               	movlb	0	; () banked
  4071  0026E0  2BAD               	incf	escalonador@cont& (0+255),f,b
  4072  0026E2  D7AA               	goto	l11061
  4073  0026E4                     __end_of_escalonador:
  4074                           	opt stack 0
  4075                           tosu	equ	0xFFF
  4076                           tosh	equ	0xFFE
  4077                           tosl	equ	0xFFD
  4078                           pclath	equ	0xFFA
  4079                           tblptru	equ	0xFF8
  4080                           tblptrh	equ	0xFF7
  4081                           tblptrl	equ	0xFF6
  4082                           tablat	equ	0xFF5
  4083                           prodh	equ	0xFF4
  4084                           prodl	equ	0xFF3
  4085                           intcon	equ	0xFF2
  4086                           intcon2	equ	0xFF1
  4087                           intcon3	equ	0xFF0
  4088                           postinc0	equ	0xFEE
  4089                           wreg	equ	0xFE8
  4090                           postinc1	equ	0xFE6
  4091                           postdec1	equ	0xFE5
  4092                           fsr1h	equ	0xFE2
  4093                           fsr1l	equ	0xFE1
  4094                           postinc2	equ	0xFDE
  4095                           postdec2	equ	0xFDD
  4096                           fsr2h	equ	0xFDA
  4097                           fsr2l	equ	0xFD9
  4098                           status	equ	0xFD8
  4099                           
  4100 ;; *************** function _GPS *****************
  4101 ;; Defined at:
  4102 ;;		line 40 in file "bibliotecas/GPS.c"
  4103 ;; Parameters:    Size  Location     Type
  4104 ;;		None
  4105 ;; Auto vars:     Size  Location     Type
  4106 ;;  data_out       34    0        unsigned char [34]
  4107 ;;  GPS_Buffer     15    0[BANK2 ] unsigned char [15]
  4108 ;;  date            4   15[BANK2 ] unsigned long 
  4109 ;;  Time            4    0        unsigned long 
  4110 ;;  Longitude       3   22[BANK2 ] float 
  4111 ;;  Latitude        3   19[BANK2 ] float 
  4112 ;;  Altitude        3    0        float 
  4113 ;; Return value:  Size  Location     Type
  4114 ;;                  1    wreg      void 
  4115 ;; Registers used:
  4116 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4117 ;; Tracked objects:
  4118 ;;		On entry : 0/0
  4119 ;;		On exit  : 0/0
  4120 ;;		Unchanged: 0/0
  4121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4122 ;;      Params:         0       0       0       0       0       0       0       0       0
  4123 ;;      Locals:         0       0       0      25       0       0       0       0       0
  4124 ;;      Temps:          0       2       0       0       0       0       0       0       0
  4125 ;;      Totals:         0       2       0      25       0       0       0       0       0
  4126 ;;Total ram usage:       27 bytes
  4127 ;; Hardware stack levels used:    1
  4128 ;; Hardware stack levels required when called:    7
  4129 ;; This function calls:
  4130 ;;		_convert_to_degrees
  4131 ;;		_escreve_cmd_lcd
  4132 ;;		_escreve_frase_ram_lcd
  4133 ;;		_escreve_inteiro_lcd
  4134 ;;		_get_date
  4135 ;;		_get_latitude
  4136 ;;		_get_longitude
  4137 ;;		_memset
  4138 ;;		_posicao_cursor_lcd
  4139 ;;		_sprintf
  4140 ;; This function is called by:
  4141 ;;		_inicializa_tarefas
  4142 ;;		_escalonador
  4143 ;; This function uses a non-reentrant model
  4144 ;;
  4145                           
  4146                           	psect	text19
  4147  001676                     __ptext19:
  4148                           	opt stack 0
  4149  001676                     _GPS:
  4150                           	opt stack 22
  4151                           
  4152                           ;GPS.c: 43: unsigned char data_out[34];
  4153                           ;GPS.c: 44: unsigned long int Time;
  4154                           ;GPS.c: 45: unsigned long int date;
  4155                           ;GPS.c: 46: float Latitude, Longitude, Altitude;
  4156                           ;GPS.c: 47: char GPS_Buffer[15];
  4157                           ;GPS.c: 67: Latitude = get_latitude(GGA_Pointers[0]);
  4158                           
  4159                           ; BSR set to: 0
  4160                           ;incstack = 0
  4161  001676  0101               	movlb	1	; () banked
  4162  001678  51BA               	movf	_GGA_Pointers& (0+255),w,b
  4163  00167A  EC6E  F014         	call	_get_latitude
  4164  00167E  C077  F259         	movff	?_get_latitude,GPS@Latitude
  4165  001682  C078  F25A         	movff	?_get_latitude+1,GPS@Latitude+1
  4166  001686  C079  F25B         	movff	?_get_latitude+2,GPS@Latitude+2
  4167                           
  4168                           ;GPS.c: 68: Latitude = convert_to_degrees(Latitude);
  4169  00168A  C259  F07C         	movff	GPS@Latitude,convert_to_degrees@NMEA_lat_long
  4170  00168E  C25A  F07D         	movff	GPS@Latitude+1,convert_to_degrees@NMEA_lat_long+1
  4171  001692  C25B  F07E         	movff	GPS@Latitude+2,convert_to_degrees@NMEA_lat_long+2
  4172  001696  ECA0  F00C         	call	_convert_to_degrees	;wreg free
  4173  00169A  C07C  F259         	movff	?_convert_to_degrees,GPS@Latitude
  4174  00169E  C07D  F25A         	movff	?_convert_to_degrees+1,GPS@Latitude+1
  4175  0016A2  C07E  F25B         	movff	?_convert_to_degrees+2,GPS@Latitude+2
  4176                           
  4177                           ;GPS.c: 69: sprintf(GPS_Buffer,"%.05f",Latitude);
  4178  0016A6  0E46               	movlw	low GPS@GPS_Buffer
  4179  0016A8  0100               	movlb	0	; () banked
  4180  0016AA  6F82               	movwf	sprintf@sp& (0+255),b
  4181  0016AC  0E02               	movlw	high GPS@GPS_Buffer
  4182  0016AE  0100               	movlb	0	; () banked
  4183  0016B0  6F83               	movwf	(sprintf@sp+1)& (0+255),b
  4184  0016B2  0E67               	movlw	low STR_3
  4185  0016B4  0100               	movlb	0	; () banked
  4186  0016B6  6F84               	movwf	sprintf@f& (0+255),b
  4187  0016B8  0E62               	movlw	high STR_3
  4188  0016BA  0100               	movlb	0	; () banked
  4189  0016BC  6F85               	movwf	(sprintf@f+1)& (0+255),b
  4190  0016BE  C259  F086         	movff	GPS@Latitude,?_sprintf+4
  4191  0016C2  C25A  F087         	movff	GPS@Latitude+1,?_sprintf+5
  4192  0016C6  C25B  F088         	movff	GPS@Latitude+2,?_sprintf+6
  4193  0016CA  EC09  F000         	call	_sprintf	;wreg free
  4194                           
  4195                           ;GPS.c: 71: posicao_cursor_lcd(1,5);
  4196  0016CE  0E05               	movlw	5
  4197  0016D0  6E19               	movwf	posicao_cursor_lcd@coluna,c
  4198  0016D2  0E01               	movlw	1
  4199  0016D4  EC58  F017         	call	_posicao_cursor_lcd
  4200                           
  4201                           ;GPS.c: 72: escreve_frase_ram_lcd(GPS_Buffer);
  4202  0016D8  0E46               	movlw	low GPS@GPS_Buffer
  4203  0016DA  6E19               	movwf	escreve_frase_ram_lcd@buffer,c
  4204  0016DC  0E02               	movlw	high GPS@GPS_Buffer
  4205  0016DE  6E1A               	movwf	escreve_frase_ram_lcd@buffer+1,c
  4206  0016E0  ECAC  F018         	call	_escreve_frase_ram_lcd	;wreg free
  4207                           
  4208                           ;GPS.c: 73: memset(GPS_Buffer,0,15);
  4209  0016E4  0E46               	movlw	low GPS@GPS_Buffer
  4210  0016E6  6E16               	movwf	memset@p1,c
  4211  0016E8  0E02               	movlw	high GPS@GPS_Buffer
  4212  0016EA  6E17               	movwf	memset@p1+1,c
  4213  0016EC  0E00               	movlw	0
  4214  0016EE  6E19               	movwf	memset@c+1,c
  4215  0016F0  0E00               	movlw	0
  4216  0016F2  6E18               	movwf	memset@c,c
  4217  0016F4  0E00               	movlw	0
  4218  0016F6  6E1B               	movwf	memset@n+1,c
  4219  0016F8  0E0F               	movlw	15
  4220  0016FA  6E1A               	movwf	memset@n,c
  4221  0016FC  ECEF  F019         	call	_memset	;wreg free
  4222                           
  4223                           ;GPS.c: 78: Longitude = get_longitude(GGA_Pointers[2]);
  4224  001700  0101               	movlb	1	; () banked
  4225  001702  51BC               	movf	(_GGA_Pointers+2)& (0+255),w,b
  4226  001704  EC1C  F014         	call	_get_longitude
  4227  001708  C077  F25C         	movff	?_get_longitude,GPS@Longitude
  4228  00170C  C078  F25D         	movff	?_get_longitude+1,GPS@Longitude+1
  4229  001710  C079  F25E         	movff	?_get_longitude+2,GPS@Longitude+2
  4230                           
  4231                           ;GPS.c: 79: Longitude = convert_to_degrees(Longitude);
  4232  001714  C25C  F07C         	movff	GPS@Longitude,convert_to_degrees@NMEA_lat_long
  4233  001718  C25D  F07D         	movff	GPS@Longitude+1,convert_to_degrees@NMEA_lat_long+1
  4234  00171C  C25E  F07E         	movff	GPS@Longitude+2,convert_to_degrees@NMEA_lat_long+2
  4235  001720  ECA0  F00C         	call	_convert_to_degrees	;wreg free
  4236  001724  C07C  F25C         	movff	?_convert_to_degrees,GPS@Longitude
  4237  001728  C07D  F25D         	movff	?_convert_to_degrees+1,GPS@Longitude+1
  4238  00172C  C07E  F25E         	movff	?_convert_to_degrees+2,GPS@Longitude+2
  4239                           
  4240                           ;GPS.c: 80: sprintf(GPS_Buffer,"%.05f",Longitude);
  4241  001730  0E46               	movlw	low GPS@GPS_Buffer
  4242  001732  0100               	movlb	0	; () banked
  4243  001734  6F82               	movwf	sprintf@sp& (0+255),b
  4244  001736  0E02               	movlw	high GPS@GPS_Buffer
  4245  001738  0100               	movlb	0	; () banked
  4246  00173A  6F83               	movwf	(sprintf@sp+1)& (0+255),b
  4247  00173C  0E67               	movlw	low STR_3
  4248  00173E  0100               	movlb	0	; () banked
  4249  001740  6F84               	movwf	sprintf@f& (0+255),b
  4250  001742  0E62               	movlw	high STR_3
  4251  001744  0100               	movlb	0	; () banked
  4252  001746  6F85               	movwf	(sprintf@f+1)& (0+255),b
  4253  001748  C25C  F086         	movff	GPS@Longitude,?_sprintf+4
  4254  00174C  C25D  F087         	movff	GPS@Longitude+1,?_sprintf+5
  4255  001750  C25E  F088         	movff	GPS@Longitude+2,?_sprintf+6
  4256  001754  EC09  F000         	call	_sprintf	;wreg free
  4257                           
  4258                           ;GPS.c: 82: posicao_cursor_lcd(2,5);
  4259  001758  0E05               	movlw	5
  4260  00175A  6E19               	movwf	posicao_cursor_lcd@coluna,c
  4261  00175C  0E02               	movlw	2
  4262  00175E  EC58  F017         	call	_posicao_cursor_lcd
  4263                           
  4264                           ;GPS.c: 83: escreve_frase_ram_lcd(GPS_Buffer);
  4265  001762  0E46               	movlw	low GPS@GPS_Buffer
  4266  001764  6E19               	movwf	escreve_frase_ram_lcd@buffer,c
  4267  001766  0E02               	movlw	high GPS@GPS_Buffer
  4268  001768  6E1A               	movwf	escreve_frase_ram_lcd@buffer+1,c
  4269  00176A  ECAC  F018         	call	_escreve_frase_ram_lcd	;wreg free
  4270                           
  4271                           ;GPS.c: 85: memset(GPS_Buffer,0,15);
  4272  00176E  0E46               	movlw	low GPS@GPS_Buffer
  4273  001770  6E16               	movwf	memset@p1,c
  4274  001772  0E02               	movlw	high GPS@GPS_Buffer
  4275  001774  6E17               	movwf	memset@p1+1,c
  4276  001776  0E00               	movlw	0
  4277  001778  6E19               	movwf	memset@c+1,c
  4278  00177A  0E00               	movlw	0
  4279  00177C  6E18               	movwf	memset@c,c
  4280  00177E  0E00               	movlw	0
  4281  001780  6E1B               	movwf	memset@n+1,c
  4282  001782  0E0F               	movlw	15
  4283  001784  6E1A               	movwf	memset@n,c
  4284  001786  ECEF  F019         	call	_memset	;wreg free
  4285                           
  4286                           ;GPS.c: 88: _delay((unsigned long)((1000)*(48000000/4000.0)));
  4287  00178A  0E3D               	movlw	61
  4288  00178C  0100               	movlb	0	; () banked
  4289  00178E  6FAA               	movwf	(??_GPS+1)& (0+255),b
  4290  001790  0EE1               	movlw	225
  4291  001792  0100               	movlb	0	; () banked
  4292  001794  6FA9               	movwf	??_GPS& (0+255),b
  4293  001796  0E3F               	movlw	63
  4294  001798                     u14907:
  4295  001798  2EE8               	decfsz	wreg,f,c
  4296  00179A  D7FE               	bra	u14907
  4297  00179C  2FA9               	decfsz	??_GPS& (0+255),f,b
  4298  00179E  D7FC               	bra	u14907
  4299  0017A0  2FAA               	decfsz	(??_GPS+1)& (0+255),f,b
  4300  0017A2  D7FA               	bra	u14907
  4301  0017A4  D000               	nop2	
  4302                           
  4303                           ;GPS.c: 89: escreve_cmd_lcd(0b00000001);
  4304  0017A6  0E01               	movlw	1
  4305  0017A8  ECA9  F015         	call	_escreve_cmd_lcd
  4306                           
  4307                           ;GPS.c: 91: date = get_date(8);
  4308  0017AC  0E08               	movlw	8
  4309  0017AE  EC42  F011         	call	_get_date
  4310  0017B2  C030  F255         	movff	?_get_date,GPS@date
  4311  0017B6  C031  F256         	movff	?_get_date+1,GPS@date+1
  4312  0017BA  C032  F257         	movff	?_get_date+2,GPS@date+2
  4313  0017BE  C033  F258         	movff	?_get_date+3,GPS@date+3
  4314                           
  4315                           ;GPS.c: 94: posicao_cursor_lcd(1,5);
  4316  0017C2  0E05               	movlw	5
  4317  0017C4  6E19               	movwf	posicao_cursor_lcd@coluna,c
  4318  0017C6  0E01               	movlw	1
  4319  0017C8  EC58  F017         	call	_posicao_cursor_lcd
  4320                           
  4321                           ;GPS.c: 95: escreve_inteiro_lcd(date);
  4322  0017CC  C255  F02E         	movff	GPS@date,escreve_inteiro_lcd@valor
  4323  0017D0  C256  F02F         	movff	GPS@date+1,escreve_inteiro_lcd@valor+1
  4324  0017D4  EC83  F019         	call	_escreve_inteiro_lcd	;wreg free
  4325                           
  4326                           ;GPS.c: 96: _delay((unsigned long)((1000)*(48000000/4000.0)));
  4327  0017D8  0E3D               	movlw	61
  4328  0017DA  0100               	movlb	0	; () banked
  4329  0017DC  6FAA               	movwf	(??_GPS+1)& (0+255),b
  4330  0017DE  0EE1               	movlw	225
  4331  0017E0  0100               	movlb	0	; () banked
  4332  0017E2  6FA9               	movwf	??_GPS& (0+255),b
  4333  0017E4  0E3F               	movlw	63
  4334  0017E6                     u14917:
  4335  0017E6  2EE8               	decfsz	wreg,f,c
  4336  0017E8  D7FE               	bra	u14917
  4337  0017EA  2FA9               	decfsz	??_GPS& (0+255),f,b
  4338  0017EC  D7FC               	bra	u14917
  4339  0017EE  2FAA               	decfsz	(??_GPS+1)& (0+255),f,b
  4340  0017F0  D7FA               	bra	u14917
  4341  0017F2  D000               	nop2	
  4342                           
  4343                           ;GPS.c: 97: escreve_cmd_lcd(0b00000001);
  4344  0017F4  0E01               	movlw	1
  4345  0017F6  ECA9  F015         	call	_escreve_cmd_lcd
  4346  0017FA  0012               	return		;funcret
  4347  0017FC                     __end_of_GPS:
  4348                           	opt stack 0
  4349                           tosu	equ	0xFFF
  4350                           tosh	equ	0xFFE
  4351                           tosl	equ	0xFFD
  4352                           pclath	equ	0xFFA
  4353                           tblptru	equ	0xFF8
  4354                           tblptrh	equ	0xFF7
  4355                           tblptrl	equ	0xFF6
  4356                           tablat	equ	0xFF5
  4357                           prodh	equ	0xFF4
  4358                           prodl	equ	0xFF3
  4359                           intcon	equ	0xFF2
  4360                           intcon2	equ	0xFF1
  4361                           intcon3	equ	0xFF0
  4362                           postinc0	equ	0xFEE
  4363                           wreg	equ	0xFE8
  4364                           postinc1	equ	0xFE6
  4365                           postdec1	equ	0xFE5
  4366                           fsr1h	equ	0xFE2
  4367                           fsr1l	equ	0xFE1
  4368                           postinc2	equ	0xFDE
  4369                           postdec2	equ	0xFDD
  4370                           fsr2h	equ	0xFDA
  4371                           fsr2l	equ	0xFD9
  4372                           status	equ	0xFD8
  4373                           
  4374 ;; *************** function _sprintf *****************
  4375 ;; Defined at:
  4376 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  4377 ;; Parameters:    Size  Location     Type
  4378 ;;  sp              2   34[BANK0 ] PTR unsigned char 
  4379 ;;		 -> Data_Buffer(15), GPS@GPS_Buffer(15), 
  4380 ;;  f               2   36[BANK0 ] PTR const unsigned char 
  4381 ;;		 -> STR_5(9), STR_4(6), STR_3(6), 
  4382 ;; Auto vars:     Size  Location     Type
  4383 ;;  val             4   63[BANK0 ] unsigned long 
  4384 ;;  tmpval          4   59[BANK0 ] struct .
  4385 ;;  fval            3   69[BANK0 ] struct .
  4386 ;;  cp              3    0        PTR const unsigned char 
  4387 ;;  prec            2   67[BANK0 ] int 
  4388 ;;  exp             2   57[BANK0 ] int 
  4389 ;;  flag            2   55[BANK0 ] unsigned short 
  4390 ;;  ap              2   53[BANK0 ] PTR void [1]
  4391 ;;		 -> ?_sprintf(2), 
  4392 ;;  len             2    0        unsigned int 
  4393 ;;  width           2    0        int 
  4394 ;;  c               1   72[BANK0 ] char 
  4395 ;;  d               1    0        unsigned char 
  4396 ;; Return value:  Size  Location     Type
  4397 ;;                  2   34[BANK0 ] int 
  4398 ;; Registers used:
  4399 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4400 ;; Tracked objects:
  4401 ;;		On entry : 0/0
  4402 ;;		On exit  : 0/0
  4403 ;;		Unchanged: 0/0
  4404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4405 ;;      Params:         0      10       0       0       0       0       0       0       0
  4406 ;;      Locals:         0      23       0       0       0       0       0       0       0
  4407 ;;      Temps:          0       6       0       0       0       0       0       0       0
  4408 ;;      Totals:         0      39       0       0       0       0       0       0       0
  4409 ;;Total ram usage:       39 bytes
  4410 ;; Hardware stack levels used:    1
  4411 ;; Hardware stack levels required when called:    5
  4412 ;; This function calls:
  4413 ;;		___awdiv
  4414 ;;		___ftadd
  4415 ;;		___ftge
  4416 ;;		___ftmul
  4417 ;;		___ftneg
  4418 ;;		___ftsub
  4419 ;;		___fttol
  4420 ;;		___lldiv
  4421 ;;		___llmod
  4422 ;;		___lltoft
  4423 ;;		___wmul
  4424 ;;		__div_to_l_
  4425 ;;		__tdiv_to_l_
  4426 ;;		_fround
  4427 ;;		_isdigit
  4428 ;;		_scale
  4429 ;; This function is called by:
  4430 ;;		_GPS
  4431 ;;		_convert_time_to_UTC
  4432 ;; This function uses a non-reentrant model
  4433 ;;
  4434                           
  4435                           	psect	text20
  4436  000012                     __ptext20:
  4437                           	opt stack 0
  4438  000012                     _sprintf:
  4439                           	opt stack 23
  4440                           
  4441                           ;doprnt.c: 494: va_list ap;
  4442                           ;doprnt.c: 499: signed char c;
  4443                           ;doprnt.c: 501: int width;
  4444                           ;doprnt.c: 504: int prec;
  4445                           ;doprnt.c: 508: unsigned short flag;
  4446                           ;doprnt.c: 515: char d;
  4447                           ;doprnt.c: 516: double fval;
  4448                           ;doprnt.c: 517: int exp;
  4449                           ;doprnt.c: 523: union {
  4450                           ;doprnt.c: 524: unsigned long vd;
  4451                           ;doprnt.c: 525: double integ;
  4452                           ;doprnt.c: 526: } tmpval;
  4453                           ;doprnt.c: 528: unsigned long val;
  4454                           ;doprnt.c: 529: unsigned len;
  4455                           ;doprnt.c: 530: const char * cp;
  4456                           ;doprnt.c: 533: *ap = __va_start();
  4457                           
  4458                           ;incstack = 0
  4459  000012  0E86               	movlw	low (?_sprintf+4)
  4460  000014  0100               	movlb	0	; () banked
  4461  000016  6F95               	movwf	sprintf@ap& (0+255),b
  4462  000018  0E00               	movlw	high (?_sprintf+4)
  4463  00001A  0100               	movlb	0	; () banked
  4464  00001C  6F96               	movwf	(sprintf@ap+1)& (0+255),b
  4465                           
  4466                           ;doprnt.c: 536: while(c = *f++) {
  4467  00001E  EF97  F004         	goto	l10785
  4468  000022                     l10555:
  4469                           
  4470                           ; BSR set to: 0
  4471                           ;doprnt.c: 538: if(c != '%')
  4472  000022  0E25               	movlw	37
  4473  000024  0100               	movlb	0	; () banked
  4474  000026  19A8               	xorwf	sprintf@c& (0+255),w,b
  4475  000028  B4D8               	btfsc	status,2,c
  4476  00002A  D00B               	goto	l10561
  4477                           
  4478                           ; BSR set to: 0
  4479                           ;doprnt.c: 540: {
  4480                           ;doprnt.c: 541: ((*sp++ = (c)));
  4481  00002C  C082  FFD9         	movff	sprintf@sp,fsr2l
  4482  000030  C083  FFDA         	movff	sprintf@sp+1,fsr2h
  4483  000034  C0A8  FFDF         	movff	sprintf@c,indf2
  4484                           
  4485                           ; BSR set to: 0
  4486  000038  0100               	movlb	0	; () banked
  4487  00003A  4B82               	infsnz	sprintf@sp& (0+255),f,b
  4488  00003C  2B83               	incf	(sprintf@sp+1)& (0+255),f,b
  4489                           
  4490                           ;doprnt.c: 542: continue;
  4491  00003E  EF97  F004         	goto	l10785
  4492  000042                     l10561:
  4493                           
  4494                           ; BSR set to: 0
  4495                           ;doprnt.c: 543: }
  4496                           ;doprnt.c: 548: flag = 0;
  4497  000042  0E00               	movlw	0
  4498  000044  0100               	movlb	0	; () banked
  4499  000046  6F98               	movwf	(sprintf@flag+1)& (0+255),b
  4500  000048  0E00               	movlw	0
  4501  00004A  6F97               	movwf	sprintf@flag& (0+255),b
  4502                           
  4503                           ; BSR set to: 0
  4504                           ;doprnt.c: 611: if(*f == '.') {
  4505  00004C  C084  FFF6         	movff	sprintf@f,tblptrl
  4506  000050  C085  FFF7         	movff	sprintf@f+1,tblptrh
  4507  000054                     	if	0	;tblptru may be non-zero
  4508  000054                     	endif
  4509  000054                     	if	0	;tblptru may be non-zero
  4510  000054                     	endif
  4511  000054  0008               	tblrd		*
  4512  000056  50F5               	movf	tablat,w,c
  4513  000058  0A2E               	xorlw	46
  4514  00005A  A4D8               	btfss	status,2,c
  4515  00005C  D034               	goto	l10575
  4516                           
  4517                           ; BSR set to: 0
  4518                           ;doprnt.c: 612: flag |= 0x4000;
  4519  00005E  0100               	movlb	0	; () banked
  4520  000060  8D98               	bsf	(sprintf@flag+1)& (0+255),6,b
  4521                           
  4522                           ;doprnt.c: 613: f++;
  4523  000062  0100               	movlb	0	; () banked
  4524  000064  4B84               	infsnz	sprintf@f& (0+255),f,b
  4525  000066  2B85               	incf	(sprintf@f+1)& (0+255),f,b
  4526                           
  4527                           ; BSR set to: 0
  4528                           ;doprnt.c: 620: {
  4529                           ;doprnt.c: 621: prec = 0;
  4530  000068  0E00               	movlw	0
  4531  00006A  0100               	movlb	0	; () banked
  4532  00006C  6FA4               	movwf	(sprintf@prec+1)& (0+255),b
  4533  00006E  0E00               	movlw	0
  4534  000070  6FA3               	movwf	sprintf@prec& (0+255),b
  4535                           
  4536                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  4537  000072  D01E               	goto	l10573
  4538  000074                     l10569:
  4539                           
  4540                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  4541  000074  C0A3  F024         	movff	sprintf@prec,___wmul@multiplier
  4542  000078  C0A4  F025         	movff	sprintf@prec+1,___wmul@multiplier+1
  4543  00007C  0E00               	movlw	0
  4544  00007E  6E27               	movwf	___wmul@multiplicand+1,c
  4545  000080  0E0A               	movlw	10
  4546  000082  6E26               	movwf	___wmul@multiplicand,c
  4547  000084  EC18  F01A         	call	___wmul	;wreg free
  4548  000088  C084  FFF6         	movff	sprintf@f,tblptrl
  4549  00008C  C085  FFF7         	movff	sprintf@f+1,tblptrh
  4550  000090                     	if	0	;tblptru may be non-zero
  4551  000090                     	endif
  4552  000090                     	if	0	;tblptru may be non-zero
  4553  000090                     	endif
  4554  000090  0008               	tblrd		*
  4555  000092  50F5               	movf	tablat,w,c
  4556  000094  2624               	addwf	?___wmul,f,c
  4557  000096  0E00               	movlw	0
  4558  000098  2225               	addwfc	?___wmul+1,f,c
  4559  00009A  0ED0               	movlw	208
  4560  00009C  2424               	addwf	?___wmul,w,c
  4561  00009E  0100               	movlb	0	; () banked
  4562  0000A0  6FA3               	movwf	sprintf@prec& (0+255),b
  4563  0000A2  0EFF               	movlw	255
  4564  0000A4  2025               	addwfc	?___wmul+1,w,c
  4565  0000A6  0100               	movlb	0	; () banked
  4566  0000A8  6FA4               	movwf	(sprintf@prec+1)& (0+255),b
  4567                           
  4568                           ; BSR set to: 0
  4569  0000AA  0100               	movlb	0	; () banked
  4570  0000AC  4B84               	infsnz	sprintf@f& (0+255),f,b
  4571  0000AE  2B85               	incf	(sprintf@f+1)& (0+255),f,b
  4572  0000B0                     l10573:
  4573                           
  4574                           ; BSR set to: 0
  4575  0000B0  C084  FFF6         	movff	sprintf@f,tblptrl
  4576  0000B4  C085  FFF7         	movff	sprintf@f+1,tblptrh
  4577  0000B8                     	if	0	;tblptru may be non-zero
  4578  0000B8                     	endif
  4579  0000B8                     	if	0	;tblptru may be non-zero
  4580  0000B8                     	endif
  4581  0000B8  0008               	tblrd		*
  4582  0000BA  50F5               	movf	tablat,w,c
  4583  0000BC  EC74  F01A         	call	_isdigit
  4584  0000C0  A0D8               	btfss	status,0,c
  4585  0000C2  D00C               	goto	l10583
  4586  0000C4  D7D7               	goto	l10569
  4587  0000C6                     l10575:
  4588                           
  4589                           ;doprnt.c: 626: prec = 0;
  4590  0000C6  0E00               	movlw	0
  4591  0000C8  0100               	movlb	0	; () banked
  4592  0000CA  6FA4               	movwf	(sprintf@prec+1)& (0+255),b
  4593  0000CC  0E00               	movlw	0
  4594  0000CE  6FA3               	movwf	sprintf@prec& (0+255),b
  4595                           
  4596                           ; BSR set to: 0
  4597                           ;doprnt.c: 628: flag |= 0x1000;
  4598  0000D0  0100               	movlb	0	; () banked
  4599  0000D2  8998               	bsf	(sprintf@flag+1)& (0+255),4,b
  4600                           
  4601                           ; BSR set to: 0
  4602                           ;doprnt.c: 630: }
  4603                           ;doprnt.c: 635: switch(c = *f++) {
  4604  0000D4  D003               	goto	l10583
  4605  0000D6                     l10579:
  4606                           
  4607                           ; BSR set to: 0
  4608                           ;doprnt.c: 663: flag |= 0x400;
  4609  0000D6  0100               	movlb	0	; () banked
  4610  0000D8  8598               	bsf	(sprintf@flag+1)& (0+255),2,b
  4611                           
  4612                           ; BSR set to: 0
  4613                           ;doprnt.c: 698: case 'i':
  4614                           ;doprnt.c: 699: break;
  4615                           
  4616                           ; BSR set to: 0
  4617                           
  4618                           ;doprnt.c: 697: case 'd':
  4619                           
  4620                           ;doprnt.c: 664: break;
  4621  0000DA  D01A               	goto	l10585
  4622  0000DC                     l10583:
  4623  0000DC  C084  FFF6         	movff	sprintf@f,tblptrl
  4624  0000E0  C085  FFF7         	movff	sprintf@f+1,tblptrh
  4625  0000E4  0100               	movlb	0	; () banked
  4626  0000E6  4B84               	infsnz	sprintf@f& (0+255),f,b
  4627  0000E8  2B85               	incf	(sprintf@f+1)& (0+255),f,b
  4628  0000EA                     	if	0	;tblptru may be non-zero
  4629  0000EA                     	endif
  4630  0000EA                     	if	0	;tblptru may be non-zero
  4631  0000EA                     	endif
  4632  0000EA  0008               	tblrd		*
  4633  0000EC  CFF5 F0A8          	movff	tablat,sprintf@c
  4634  0000F0  0100               	movlb	0	; () banked
  4635  0000F2  51A8               	movf	sprintf@c& (0+255),w,b
  4636                           
  4637                           ; Switch size 1, requested type "space"
  4638                           ; Number of cases is 4, Range of values is 0 to 105
  4639                           ; switch strategies available:
  4640                           ; Name         Instructions Cycles
  4641                           ; simple_byte           13     7 (average)
  4642                           ;	Chosen strategy is simple_byte
  4643  0000F4  0A00               	xorlw	0	; case 0
  4644  0000F6  B4D8               	btfsc	status,2,c
  4645  0000F8  EFA6  F004         	goto	l10787
  4646  0000FC  0A64               	xorlw	100	; case 100
  4647  0000FE  B4D8               	btfsc	status,2,c
  4648  000100  D007               	goto	l10585
  4649  000102  0A02               	xorlw	2	; case 102
  4650  000104  B4D8               	btfsc	status,2,c
  4651  000106  D7E7               	goto	l10579
  4652  000108  0A0F               	xorlw	15	; case 105
  4653  00010A  A4D8               	btfss	status,2,c
  4654  00010C  EF97  F004         	goto	l10785
  4655  000110                     l10585:
  4656                           
  4657                           ; BSR set to: 0
  4658                           ;doprnt.c: 825: if(flag & (0x700)) {
  4659  000110  0E07               	movlw	7
  4660  000112  0100               	movlb	0	; () banked
  4661  000114  1598               	andwf	(sprintf@flag+1)& (0+255),w,b
  4662  000116  B4D8               	btfsc	status,2,c
  4663  000118  D319               	goto	l10733
  4664                           
  4665                           ; BSR set to: 0
  4666                           ;doprnt.c: 827: if(flag & 0x1000)
  4667  00011A  0100               	movlb	0	; () banked
  4668  00011C  A998               	btfss	(sprintf@flag+1)& (0+255),4,b
  4669  00011E  D005               	goto	l10591
  4670                           
  4671                           ; BSR set to: 0
  4672                           ;doprnt.c: 829: prec = 6;
  4673  000120  0E00               	movlw	0
  4674  000122  0100               	movlb	0	; () banked
  4675  000124  6FA4               	movwf	(sprintf@prec+1)& (0+255),b
  4676  000126  0E06               	movlw	6
  4677  000128  6FA3               	movwf	sprintf@prec& (0+255),b
  4678  00012A                     l10591:
  4679                           
  4680                           ; BSR set to: 0
  4681                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4682  00012A  C095  FFD9         	movff	sprintf@ap,fsr2l
  4683  00012E  C096  FFDA         	movff	sprintf@ap+1,fsr2h
  4684  000132  CFDE F0A5          	movff	postinc2,sprintf@fval
  4685  000136  CFDE F0A6          	movff	postinc2,sprintf@fval+1
  4686  00013A  CFDD F0A7          	movff	postdec2,sprintf@fval+2
  4687                           
  4688                           ; BSR set to: 0
  4689  00013E  0E03               	movlw	3
  4690  000140  0100               	movlb	0	; () banked
  4691  000142  2795               	addwf	sprintf@ap& (0+255),f,b
  4692  000144  0E00               	movlw	0
  4693  000146  2396               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4694                           
  4695                           ; BSR set to: 0
  4696                           ;doprnt.c: 831: if(fval < 0.0) {
  4697  000148  0100               	movlb	0	; () banked
  4698  00014A  AFA7               	btfss	(sprintf@fval+2)& (0+255),7,b
  4699  00014C  D011               	goto	l10601
  4700                           
  4701                           ; BSR set to: 0
  4702                           ;doprnt.c: 832: fval = -fval;
  4703  00014E  C0A5  F066         	movff	sprintf@fval,___ftneg@f1
  4704  000152  C0A6  F067         	movff	sprintf@fval+1,___ftneg@f1+1
  4705  000156  C0A7  F068         	movff	sprintf@fval+2,___ftneg@f1+2
  4706  00015A  ECD7  F019         	call	___ftneg	;wreg free
  4707  00015E  C066  F0A5         	movff	?___ftneg,sprintf@fval
  4708  000162  C067  F0A6         	movff	?___ftneg+1,sprintf@fval+1
  4709  000166  C068  F0A7         	movff	?___ftneg+2,sprintf@fval+2
  4710                           
  4711                           ;doprnt.c: 833: flag |= 0x03;
  4712  00016A  0E03               	movlw	3
  4713  00016C  0100               	movlb	0	; () banked
  4714  00016E  1397               	iorwf	sprintf@flag& (0+255),f,b
  4715  000170                     l10601:
  4716                           
  4717                           ; BSR set to: 0
  4718                           ;doprnt.c: 834: }
  4719                           ;doprnt.c: 835: exp = 0;
  4720  000170  0E00               	movlw	0
  4721  000172  0100               	movlb	0	; () banked
  4722  000174  6F9A               	movwf	(sprintf@exp+1)& (0+255),b
  4723  000176  0E00               	movlw	0
  4724  000178  6F99               	movwf	sprintf@exp& (0+255),b
  4725                           
  4726                           ; BSR set to: 0
  4727                           ;doprnt.c: 836: if( fval!=0) {
  4728  00017A  0100               	movlb	0	; () banked
  4729  00017C  51A5               	movf	sprintf@fval& (0+255),w,b
  4730  00017E  0100               	movlb	0	; () banked
  4731  000180  11A6               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4732  000182  0100               	movlb	0	; () banked
  4733  000184  11A7               	iorwf	(sprintf@fval+2)& (0+255),w,b
  4734  000186  B4D8               	btfsc	status,2,c
  4735  000188  D091               	goto	l10629
  4736                           
  4737                           ; BSR set to: 0
  4738                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  4739  00018A  0E82               	movlw	130
  4740  00018C  0100               	movlb	0	; () banked
  4741  00018E  6F8C               	movwf	??_sprintf& (0+255),b
  4742  000190  0EFF               	movlw	255
  4743  000192  0100               	movlb	0	; () banked
  4744  000194  6F8D               	movwf	(??_sprintf+1)& (0+255),b
  4745  000196  C0A5  F08E         	movff	sprintf@fval,??_sprintf+2
  4746  00019A  C0A6  F08F         	movff	sprintf@fval+1,??_sprintf+3
  4747  00019E  C0A7  F090         	movff	sprintf@fval+2,??_sprintf+4
  4748  0001A2  C0A8  F091         	movff	sprintf@fval+3,??_sprintf+5
  4749  0001A6  0E10               	movlw	16
  4750  0001A8  D006               	goto	u12720
  4751  0001AA                     u12725:
  4752  0001AA  0100               	movlb	0	; () banked
  4753  0001AC  90D8               	bcf	status,0,c
  4754  0001AE  3391               	rrcf	(??_sprintf+5)& (0+255),f,b
  4755  0001B0  3390               	rrcf	(??_sprintf+4)& (0+255),f,b
  4756  0001B2  338F               	rrcf	(??_sprintf+3)& (0+255),f,b
  4757  0001B4  338E               	rrcf	(??_sprintf+2)& (0+255),f,b
  4758  0001B6                     u12720:
  4759  0001B6  2EE8               	decfsz	wreg,f,c
  4760  0001B8  D7F8               	goto	u12725
  4761  0001BA  0100               	movlb	0	; () banked
  4762  0001BC  518E               	movf	(??_sprintf+2)& (0+255),w,b
  4763  0001BE  0100               	movlb	0	; () banked
  4764  0001C0  258C               	addwf	??_sprintf& (0+255),w,b
  4765  0001C2  0100               	movlb	0	; () banked
  4766  0001C4  6F99               	movwf	sprintf@exp& (0+255),b
  4767  0001C6  0E00               	movlw	0
  4768  0001C8  0100               	movlb	0	; () banked
  4769  0001CA  218D               	addwfc	(??_sprintf+1)& (0+255),w,b
  4770  0001CC  0100               	movlb	0	; () banked
  4771  0001CE  6F9A               	movwf	(sprintf@exp+1)& (0+255),b
  4772                           
  4773                           ; BSR set to: 0
  4774                           ;doprnt.c: 838: exp--;
  4775  0001D0  0100               	movlb	0	; () banked
  4776  0001D2  0799               	decf	sprintf@exp& (0+255),f,b
  4777  0001D4  A0D8               	btfss	status,0,c
  4778  0001D6  079A               	decf	(sprintf@exp+1)& (0+255),f,b
  4779                           
  4780                           ; BSR set to: 0
  4781                           ;doprnt.c: 839: exp *= 3;
  4782  0001D8  C099  F024         	movff	sprintf@exp,___wmul@multiplier
  4783  0001DC  C09A  F025         	movff	sprintf@exp+1,___wmul@multiplier+1
  4784  0001E0  0E00               	movlw	0
  4785  0001E2  6E27               	movwf	___wmul@multiplicand+1,c
  4786  0001E4  0E03               	movlw	3
  4787  0001E6  6E26               	movwf	___wmul@multiplicand,c
  4788  0001E8  EC18  F01A         	call	___wmul	;wreg free
  4789  0001EC  C024  F099         	movff	?___wmul,sprintf@exp
  4790  0001F0  C025  F09A         	movff	?___wmul+1,sprintf@exp+1
  4791                           
  4792                           ;doprnt.c: 840: exp /= 10;
  4793  0001F4  C099  F01C         	movff	sprintf@exp,___awdiv@dividend
  4794  0001F8  C09A  F01D         	movff	sprintf@exp+1,___awdiv@dividend+1
  4795  0001FC  0E00               	movlw	0
  4796  0001FE  6E1F               	movwf	___awdiv@divisor+1,c
  4797  000200  0E0A               	movlw	10
  4798  000202  6E1E               	movwf	___awdiv@divisor,c
  4799  000204  ECEF  F015         	call	___awdiv	;wreg free
  4800  000208  C01C  F099         	movff	?___awdiv,sprintf@exp
  4801  00020C  C01D  F09A         	movff	?___awdiv+1,sprintf@exp+1
  4802                           
  4803                           ;doprnt.c: 841: if(exp < 0)
  4804  000210  0100               	movlb	0	; () banked
  4805  000212  AF9A               	btfss	(sprintf@exp+1)& (0+255),7,b
  4806  000214  D004               	goto	l10617
  4807                           
  4808                           ; BSR set to: 0
  4809                           ;doprnt.c: 842: exp--;
  4810  000216  0100               	movlb	0	; () banked
  4811  000218  0799               	decf	sprintf@exp& (0+255),f,b
  4812  00021A  A0D8               	btfss	status,0,c
  4813  00021C  079A               	decf	(sprintf@exp+1)& (0+255),f,b
  4814  00021E                     l10617:
  4815                           
  4816                           ; BSR set to: 0
  4817                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  4818  00021E  0100               	movlb	0	; () banked
  4819  000220  5199               	movf	sprintf@exp& (0+255),w,b
  4820  000222  0800               	sublw	0
  4821  000224  ECD5  F006         	call	_scale
  4822  000228  C066  F09B         	movff	?_scale,sprintf@tmpval
  4823  00022C  C067  F09C         	movff	?_scale+1,sprintf@tmpval+1
  4824  000230  C068  F09D         	movff	?_scale+2,sprintf@tmpval+2
  4825                           
  4826                           ;doprnt.c: 847: tmpval.integ *= fval;
  4827  000234  C09B  F02A         	movff	sprintf@tmpval,___ftmul@f1
  4828  000238  C09C  F02B         	movff	sprintf@tmpval+1,___ftmul@f1+1
  4829  00023C  C09D  F02C         	movff	sprintf@tmpval+2,___ftmul@f1+2
  4830  000240  C0A5  F02D         	movff	sprintf@fval,___ftmul@f2
  4831  000244  C0A6  F02E         	movff	sprintf@fval+1,___ftmul@f2+1
  4832  000248  C0A7  F02F         	movff	sprintf@fval+2,___ftmul@f2+2
  4833  00024C  EC26  F010         	call	___ftmul	;wreg free
  4834  000250  C02A  F09B         	movff	?___ftmul,sprintf@tmpval
  4835  000254  C02B  F09C         	movff	?___ftmul+1,sprintf@tmpval+1
  4836  000258  C02C  F09D         	movff	?___ftmul+2,sprintf@tmpval+2
  4837                           
  4838                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  4839  00025C  C09B  F016         	movff	sprintf@tmpval,___ftge@ff1
  4840  000260  C09C  F017         	movff	sprintf@tmpval+1,___ftge@ff1+1
  4841  000264  C09D  F018         	movff	sprintf@tmpval+2,___ftge@ff1+2
  4842  000268  0E00               	movlw	0
  4843  00026A  6E19               	movwf	___ftge@ff2,c
  4844  00026C  0E80               	movlw	128
  4845  00026E  6E1A               	movwf	___ftge@ff2+1,c
  4846  000270  0E3F               	movlw	63
  4847  000272  6E1B               	movwf	___ftge@ff2+2,c
  4848  000274  EC61  F015         	call	___ftge	;wreg free
  4849  000278  B0D8               	btfsc	status,0,c
  4850  00027A  D005               	goto	l10625
  4851                           
  4852                           ;doprnt.c: 849: exp--;
  4853  00027C  0100               	movlb	0	; () banked
  4854  00027E  0799               	decf	sprintf@exp& (0+255),f,b
  4855  000280  A0D8               	btfss	status,0,c
  4856  000282  079A               	decf	(sprintf@exp+1)& (0+255),f,b
  4857  000284  D013               	goto	l10629
  4858  000286                     l10625:
  4859                           
  4860                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  4861  000286  C09B  F016         	movff	sprintf@tmpval,___ftge@ff1
  4862  00028A  C09C  F017         	movff	sprintf@tmpval+1,___ftge@ff1+1
  4863  00028E  C09D  F018         	movff	sprintf@tmpval+2,___ftge@ff1+2
  4864  000292  0E00               	movlw	0
  4865  000294  6E19               	movwf	___ftge@ff2,c
  4866  000296  0E20               	movlw	32
  4867  000298  6E1A               	movwf	___ftge@ff2+1,c
  4868  00029A  0E41               	movlw	65
  4869  00029C  6E1B               	movwf	___ftge@ff2+2,c
  4870  00029E  EC61  F015         	call	___ftge	;wreg free
  4871  0002A2  A0D8               	btfss	status,0,c
  4872  0002A4  D003               	goto	l10629
  4873                           
  4874                           ;doprnt.c: 851: exp++;
  4875  0002A6  0100               	movlb	0	; () banked
  4876  0002A8  4B99               	infsnz	sprintf@exp& (0+255),f,b
  4877  0002AA  2B9A               	incf	(sprintf@exp+1)& (0+255),f,b
  4878  0002AC                     l10629:
  4879                           
  4880                           ;doprnt.c: 852: }
  4881                           ;doprnt.c: 1112: if(prec <= 12)
  4882  0002AC  0100               	movlb	0	; () banked
  4883  0002AE  BFA4               	btfsc	(sprintf@prec+1)& (0+255),7,b
  4884  0002B0  D008               	goto	l10631
  4885  0002B2  0100               	movlb	0	; () banked
  4886  0002B4  51A4               	movf	(sprintf@prec+1)& (0+255),w,b
  4887  0002B6  E11D               	bnz	l10633
  4888  0002B8  0E0D               	movlw	13
  4889  0002BA  0100               	movlb	0	; () banked
  4890  0002BC  5DA3               	subwf	sprintf@prec& (0+255),w,b
  4891  0002BE  B0D8               	btfsc	status,0,c
  4892  0002C0  D018               	goto	l10633
  4893  0002C2                     l10631:
  4894                           
  4895                           ; BSR set to: 0
  4896                           ;doprnt.c: 1113: fval += fround(prec);
  4897  0002C2  C0A5  F070         	movff	sprintf@fval,___ftadd@f1
  4898  0002C6  C0A6  F071         	movff	sprintf@fval+1,___ftadd@f1+1
  4899  0002CA  C0A7  F072         	movff	sprintf@fval+2,___ftadd@f1+2
  4900  0002CE  0100               	movlb	0	; () banked
  4901  0002D0  51A3               	movf	sprintf@prec& (0+255),w,b
  4902  0002D2  EC14  F00A         	call	_fround
  4903  0002D6  C066  F073         	movff	?_fround,___ftadd@f2
  4904  0002DA  C067  F074         	movff	?_fround+1,___ftadd@f2+1
  4905  0002DE  C068  F075         	movff	?_fround+2,___ftadd@f2+2
  4906  0002E2  ECE0  F008         	call	___ftadd	;wreg free
  4907  0002E6  C070  F0A5         	movff	?___ftadd,sprintf@fval
  4908  0002EA  C071  F0A6         	movff	?___ftadd+1,sprintf@fval+1
  4909  0002EE  C072  F0A7         	movff	?___ftadd+2,sprintf@fval+2
  4910  0002F2                     l10633:
  4911                           
  4912                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  4913  0002F2  0100               	movlb	0	; () banked
  4914  0002F4  BF9A               	btfsc	(sprintf@exp+1)& (0+255),7,b
  4915  0002F6  D008               	goto	l10635
  4916  0002F8  0100               	movlb	0	; () banked
  4917  0002FA  519A               	movf	(sprintf@exp+1)& (0+255),w,b
  4918  0002FC  E12A               	bnz	l10641
  4919  0002FE  0E0A               	movlw	10
  4920  000300  0100               	movlb	0	; () banked
  4921  000302  5D99               	subwf	sprintf@exp& (0+255),w,b
  4922  000304  B0D8               	btfsc	status,0,c
  4923  000306  D025               	goto	l10641
  4924  000308                     l10635:
  4925                           
  4926                           ; BSR set to: 0
  4927  000308  0100               	movlb	0	; () banked
  4928  00030A  51A5               	movf	sprintf@fval& (0+255),w,b
  4929  00030C  0100               	movlb	0	; () banked
  4930  00030E  11A6               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4931  000310  0100               	movlb	0	; () banked
  4932  000312  11A7               	iorwf	(sprintf@fval+2)& (0+255),w,b
  4933  000314  B4D8               	btfsc	status,2,c
  4934  000316  D05F               	goto	l10655
  4935                           
  4936                           ; BSR set to: 0
  4937  000318  C0A5  F06D         	movff	sprintf@fval,___fttol@f1
  4938  00031C  C0A6  F06E         	movff	sprintf@fval+1,___fttol@f1+1
  4939  000320  C0A7  F06F         	movff	sprintf@fval+2,___fttol@f1+2
  4940  000324  ECFE  F00B         	call	___fttol	;wreg free
  4941  000328  0100               	movlb	0	; () banked
  4942  00032A  516D               	movf	?___fttol& (0+255),w,b
  4943  00032C  0100               	movlb	0	; () banked
  4944  00032E  116E               	iorwf	(?___fttol+1)& (0+255),w,b
  4945  000330  0100               	movlb	0	; () banked
  4946  000332  116F               	iorwf	(?___fttol+2)& (0+255),w,b
  4947  000334  0100               	movlb	0	; () banked
  4948  000336  1170               	iorwf	(?___fttol+3)& (0+255),w,b
  4949  000338  A4D8               	btfss	status,2,c
  4950  00033A  D04D               	goto	l10655
  4951                           
  4952                           ; BSR set to: 0
  4953  00033C  0100               	movlb	0	; () banked
  4954  00033E  BF9A               	btfsc	(sprintf@exp+1)& (0+255),7,b
  4955  000340  D04A               	goto	l10655
  4956  000342  0100               	movlb	0	; () banked
  4957  000344  519A               	movf	(sprintf@exp+1)& (0+255),w,b
  4958  000346  E105               	bnz	l10641
  4959  000348  0E02               	movlw	2
  4960  00034A  0100               	movlb	0	; () banked
  4961  00034C  5D99               	subwf	sprintf@exp& (0+255),w,b
  4962  00034E  A0D8               	btfss	status,0,c
  4963  000350  D042               	goto	l10655
  4964  000352                     l10641:
  4965                           
  4966                           ; BSR set to: 0
  4967                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  4968  000352  C09B  F016         	movff	sprintf@tmpval,___ftge@ff1
  4969  000356  C09C  F017         	movff	sprintf@tmpval+1,___ftge@ff1+1
  4970  00035A  C09D  F018         	movff	sprintf@tmpval+2,___ftge@ff1+2
  4971  00035E  0E70               	movlw	112
  4972  000360  6E19               	movwf	___ftge@ff2,c
  4973  000362  0E89               	movlw	137
  4974  000364  6E1A               	movwf	___ftge@ff2+1,c
  4975  000366  0E40               	movlw	64
  4976  000368  6E1B               	movwf	___ftge@ff2+2,c
  4977  00036A  EC61  F015         	call	___ftge	;wreg free
  4978  00036E  B0D8               	btfsc	status,0,c
  4979  000370  D003               	goto	l10645
  4980                           
  4981                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  4982  000372  0100               	movlb	0	; () banked
  4983  000374  0EF7               	movlw	247
  4984  000376  D002               	goto	L4
  4985  000378                     l10645:
  4986                           
  4987                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  4988  000378  0100               	movlb	0	; () banked
  4989  00037A  0EF8               	movlw	248
  4990  00037C                     L4:
  4991  00037C  2799               	addwf	sprintf@exp& (0+255),f,b
  4992  00037E  0EFF               	movlw	255
  4993  000380  239A               	addwfc	(sprintf@exp+1)& (0+255),f,b
  4994                           
  4995                           ; BSR set to: 0
  4996                           ;doprnt.c: 1124: }
  4997                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  4998                           
  4999                           ; BSR set to: 0
  5000  000382  0100               	movlb	0	; () banked
  5001  000384  5199               	movf	sprintf@exp& (0+255),w,b
  5002  000386  ECD5  F006         	call	_scale
  5003  00038A  C066  F09B         	movff	?_scale,sprintf@tmpval
  5004  00038E  C067  F09C         	movff	?_scale+1,sprintf@tmpval+1
  5005  000392  C068  F09D         	movff	?_scale+2,sprintf@tmpval+2
  5006                           
  5007                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  5008  000396  C0A5  F016         	movff	sprintf@fval,__tdiv_to_l_@f1
  5009  00039A  C0A6  F017         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  5010  00039E  C0A7  F018         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  5011  0003A2  C09B  F019         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  5012  0003A6  C09C  F01A         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  5013  0003AA  C09D  F01B         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  5014  0003AE  EC3D  F00D         	call	__tdiv_to_l_	;wreg free
  5015  0003B2  C016  F09F         	movff	?__tdiv_to_l_,sprintf@val
  5016  0003B6  C017  F0A0         	movff	?__tdiv_to_l_+1,sprintf@val+1
  5017  0003BA  C018  F0A1         	movff	?__tdiv_to_l_+2,sprintf@val+2
  5018  0003BE  C019  F0A2         	movff	?__tdiv_to_l_+3,sprintf@val+3
  5019                           
  5020                           ;doprnt.c: 1129: fval = 0.0;
  5021  0003C2  0E00               	movlw	0
  5022  0003C4  0100               	movlb	0	; () banked
  5023  0003C6  6FA5               	movwf	sprintf@fval& (0+255),b
  5024  0003C8  0E00               	movlw	0
  5025  0003CA  0100               	movlb	0	; () banked
  5026  0003CC  6FA6               	movwf	(sprintf@fval+1)& (0+255),b
  5027  0003CE  0E00               	movlw	0
  5028  0003D0  0100               	movlb	0	; () banked
  5029  0003D2  6FA7               	movwf	(sprintf@fval+2)& (0+255),b
  5030                           
  5031                           ;doprnt.c: 1130: } else {
  5032  0003D4  D033               	goto	l10659
  5033  0003D6                     l10655:
  5034                           
  5035                           ; BSR set to: 0
  5036                           ;doprnt.c: 1131: val = (unsigned long)fval;
  5037  0003D6  C0A5  F06D         	movff	sprintf@fval,___fttol@f1
  5038  0003DA  C0A6  F06E         	movff	sprintf@fval+1,___fttol@f1+1
  5039  0003DE  C0A7  F06F         	movff	sprintf@fval+2,___fttol@f1+2
  5040  0003E2  ECFE  F00B         	call	___fttol	;wreg free
  5041  0003E6  C06D  F09F         	movff	?___fttol,sprintf@val
  5042  0003EA  C06E  F0A0         	movff	?___fttol+1,sprintf@val+1
  5043  0003EE  C06F  F0A1         	movff	?___fttol+2,sprintf@val+2
  5044  0003F2  C070  F0A2         	movff	?___fttol+3,sprintf@val+3
  5045                           
  5046                           ;doprnt.c: 1132: fval -= (double)val;
  5047  0003F6  C0A5  F07C         	movff	sprintf@fval,___ftsub@f1
  5048  0003FA  C0A6  F07D         	movff	sprintf@fval+1,___ftsub@f1+1
  5049  0003FE  C0A7  F07E         	movff	sprintf@fval+2,___ftsub@f1+2
  5050  000402  C09F  F01E         	movff	sprintf@val,___lltoft@c
  5051  000406  C0A0  F01F         	movff	sprintf@val+1,___lltoft@c+1
  5052  00040A  C0A1  F020         	movff	sprintf@val+2,___lltoft@c+2
  5053  00040E  C0A2  F021         	movff	sprintf@val+3,___lltoft@c+3
  5054  000412  EC2A  F018         	call	___lltoft	;wreg free
  5055  000416  C01E  F07F         	movff	?___lltoft,___ftsub@f2
  5056  00041A  C01F  F080         	movff	?___lltoft+1,___ftsub@f2+1
  5057  00041E  C020  F081         	movff	?___lltoft+2,___ftsub@f2+2
  5058  000422  ECD5  F018         	call	___ftsub	;wreg free
  5059  000426  C07C  F0A5         	movff	?___ftsub,sprintf@fval
  5060  00042A  C07D  F0A6         	movff	?___ftsub+1,sprintf@fval+1
  5061  00042E  C07E  F0A7         	movff	?___ftsub+2,sprintf@fval+2
  5062                           
  5063                           ;doprnt.c: 1133: exp = 0;
  5064  000432  0E00               	movlw	0
  5065  000434  0100               	movlb	0	; () banked
  5066  000436  6F9A               	movwf	(sprintf@exp+1)& (0+255),b
  5067  000438  0E00               	movlw	0
  5068  00043A  6F99               	movwf	sprintf@exp& (0+255),b
  5069  00043C                     l10659:
  5070                           
  5071                           ; BSR set to: 0
  5072                           ;doprnt.c: 1134: }
  5073                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5074  00043C  0E01               	movlw	1
  5075  00043E  0100               	movlb	0	; () banked
  5076  000440  6FA8               	movwf	sprintf@c& (0+255),b
  5077  000442                     l10661:
  5078                           
  5079                           ; BSR set to: 0
  5080  000442  0E0A               	movlw	10
  5081  000444  0100               	movlb	0	; () banked
  5082  000446  19A8               	xorwf	sprintf@c& (0+255),w,b
  5083  000448  B4D8               	btfsc	status,2,c
  5084  00044A  D01E               	goto	l10673
  5085                           
  5086                           ; BSR set to: 0
  5087                           ;doprnt.c: 1137: if(val < dpowers[c])
  5088                           
  5089                           ; BSR set to: 0
  5090                           
  5091                           ; BSR set to: 0
  5092  00044C  0100               	movlb	0	; () banked
  5093  00044E  51A8               	movf	sprintf@c& (0+255),w,b
  5094  000450  0D04               	mullw	4
  5095  000452  0EC1               	movlw	low _dpowers
  5096  000454  24F3               	addwf	prodl,w,c
  5097  000456  6EF6               	movwf	tblptrl,c
  5098  000458  0E60               	movlw	high _dpowers
  5099  00045A  20F4               	addwfc	prodh,w,c
  5100  00045C  6EF7               	movwf	tblptrh,c
  5101  00045E                     	if	0	;There are less than 3 active tblptr bytes
  5102  00045E                     	endif
  5103  00045E  0009               	tblrd		*+
  5104  000460  50F5               	movf	tablat,w,c
  5105  000462  0100               	movlb	0	; () banked
  5106  000464  5D9F               	subwf	sprintf@val& (0+255),w,b
  5107  000466  0009               	tblrd		*+
  5108  000468  50F5               	movf	tablat,w,c
  5109  00046A  0100               	movlb	0	; () banked
  5110  00046C  59A0               	subwfb	(sprintf@val+1)& (0+255),w,b
  5111  00046E  0009               	tblrd		*+
  5112  000470  50F5               	movf	tablat,w,c
  5113  000472  0100               	movlb	0	; () banked
  5114  000474  59A1               	subwfb	(sprintf@val+2)& (0+255),w,b
  5115  000476  0009               	tblrd		*+
  5116  000478  50F5               	movf	tablat,w,c
  5117  00047A  0100               	movlb	0	; () banked
  5118  00047C  59A2               	subwfb	(sprintf@val+3)& (0+255),w,b
  5119  00047E  A0D8               	btfss	status,0,c
  5120  000480  D003               	goto	l10673
  5121                           
  5122                           ; BSR set to: 0
  5123                           
  5124                           ; BSR set to: 0
  5125                           
  5126                           ; BSR set to: 0
  5127                           ;doprnt.c: 1138: break;
  5128  000482  0100               	movlb	0	; () banked
  5129  000484  2BA8               	incf	sprintf@c& (0+255),f,b
  5130  000486  D7DD               	goto	l10661
  5131  000488                     l10673:
  5132                           
  5133                           ; BSR set to: 0
  5134                           ;doprnt.c: 1175: {
  5135                           ;doprnt.c: 1188: if(flag & 0x03)
  5136  000488  0E03               	movlw	3
  5137  00048A  0100               	movlb	0	; () banked
  5138  00048C  1597               	andwf	sprintf@flag& (0+255),w,b
  5139  00048E  0100               	movlb	0	; () banked
  5140  000490  6F8C               	movwf	??_sprintf& (0+255),b
  5141  000492  0E00               	movlw	0
  5142  000494  0100               	movlb	0	; () banked
  5143  000496  1598               	andwf	(sprintf@flag+1)& (0+255),w,b
  5144  000498  0100               	movlb	0	; () banked
  5145  00049A  6F8D               	movwf	(??_sprintf+1)& (0+255),b
  5146  00049C  0100               	movlb	0	; () banked
  5147  00049E  518C               	movf	??_sprintf& (0+255),w,b
  5148  0004A0  0100               	movlb	0	; () banked
  5149  0004A2  118D               	iorwf	(??_sprintf+1)& (0+255),w,b
  5150  0004A4  B4D8               	btfsc	status,2,c
  5151  0004A6  D054               	goto	l10687
  5152                           
  5153                           ; BSR set to: 0
  5154                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  5155  0004A8  C082  FFD9         	movff	sprintf@sp,fsr2l
  5156  0004AC  C083  FFDA         	movff	sprintf@sp+1,fsr2h
  5157  0004B0  0E2D               	movlw	45
  5158  0004B2  D04C               	goto	L5
  5159  0004B4                     l10677:
  5160                           
  5161                           ; BSR set to: 0
  5162  0004B4  0100               	movlb	0	; () banked
  5163  0004B6  4B82               	infsnz	sprintf@sp& (0+255),f,b
  5164  0004B8  2B83               	incf	(sprintf@sp+1)& (0+255),f,b
  5165                           
  5166                           ; BSR set to: 0
  5167                           ;doprnt.c: 1195: }
  5168                           ;doprnt.c: 1196: while(c--) {
  5169  0004BA  D04A               	goto	l10687
  5170  0004BC                     l10679:
  5171                           
  5172                           ; BSR set to: 0
  5173                           ;doprnt.c: 1200: {
  5174                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  5175  0004BC  C09F  F016         	movff	sprintf@val,___lldiv@dividend
  5176  0004C0  C0A0  F017         	movff	sprintf@val+1,___lldiv@dividend+1
  5177  0004C4  C0A1  F018         	movff	sprintf@val+2,___lldiv@dividend+2
  5178  0004C8  C0A2  F019         	movff	sprintf@val+3,___lldiv@dividend+3
  5179  0004CC  0100               	movlb	0	; () banked
  5180  0004CE  51A8               	movf	sprintf@c& (0+255),w,b
  5181  0004D0  0D04               	mullw	4
  5182  0004D2  0EC1               	movlw	low _dpowers
  5183  0004D4  24F3               	addwf	prodl,w,c
  5184  0004D6  6EF6               	movwf	tblptrl,c
  5185  0004D8  0E60               	movlw	high _dpowers
  5186  0004DA  20F4               	addwfc	prodh,w,c
  5187  0004DC  6EF7               	movwf	tblptrh,c
  5188  0004DE                     	if	0	;There are less than 3 active tblptr bytes
  5189  0004DE                     	endif
  5190  0004DE  0009               	tblrd		*+
  5191  0004E0  CFF5 F01A          	movff	tablat,___lldiv@divisor
  5192  0004E4  0009               	tblrd		*+
  5193  0004E6  CFF5 F01B          	movff	tablat,___lldiv@divisor+1
  5194  0004EA  0009               	tblrd		*+
  5195  0004EC  CFF5 F01C          	movff	tablat,___lldiv@divisor+2
  5196  0004F0  000A               	tblrd		*-
  5197  0004F2  CFF5 F01D          	movff	tablat,___lldiv@divisor+3
  5198  0004F6  EC31  F016         	call	___lldiv	;wreg free
  5199  0004FA  C016  F09B         	movff	?___lldiv,sprintf@tmpval
  5200  0004FE  C017  F09C         	movff	?___lldiv+1,sprintf@tmpval+1
  5201  000502  C018  F09D         	movff	?___lldiv+2,sprintf@tmpval+2
  5202  000506  C019  F09E         	movff	?___lldiv+3,sprintf@tmpval+3
  5203                           
  5204                           ;doprnt.c: 1202: tmpval.vd %= 10;
  5205  00050A  C09B  F023         	movff	sprintf@tmpval,___llmod@dividend
  5206  00050E  C09C  F024         	movff	sprintf@tmpval+1,___llmod@dividend+1
  5207  000512  C09D  F025         	movff	sprintf@tmpval+2,___llmod@dividend+2
  5208  000516  C09E  F026         	movff	sprintf@tmpval+3,___llmod@dividend+3
  5209  00051A  0E0A               	movlw	10
  5210  00051C  6E27               	movwf	___llmod@divisor,c
  5211  00051E  0E00               	movlw	0
  5212  000520  6E28               	movwf	___llmod@divisor+1,c
  5213  000522  0E00               	movlw	0
  5214  000524  6E29               	movwf	___llmod@divisor+2,c
  5215  000526  0E00               	movlw	0
  5216  000528  6E2A               	movwf	___llmod@divisor+3,c
  5217  00052A  ECC5  F017         	call	___llmod	;wreg free
  5218  00052E  C023  F09B         	movff	?___llmod,sprintf@tmpval
  5219  000532  C024  F09C         	movff	?___llmod+1,sprintf@tmpval+1
  5220  000536  C025  F09D         	movff	?___llmod+2,sprintf@tmpval+2
  5221  00053A  C026  F09E         	movff	?___llmod+3,sprintf@tmpval+3
  5222                           
  5223                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  5224  00053E  0100               	movlb	0	; () banked
  5225  000540  519B               	movf	sprintf@tmpval& (0+255),w,b
  5226  000542  0F30               	addlw	48
  5227  000544  C082  FFD9         	movff	sprintf@sp,fsr2l
  5228  000548  C083  FFDA         	movff	sprintf@sp+1,fsr2h
  5229  00054C                     L5:
  5230  00054C  6EDF               	movwf	indf2,c
  5231  00054E  D7B2               	goto	l10677
  5232  000550                     l10687:
  5233                           
  5234                           ; BSR set to: 0
  5235  000550  0100               	movlb	0	; () banked
  5236  000552  07A8               	decf	sprintf@c& (0+255),f,b
  5237  000554  0100               	movlb	0	; () banked
  5238  000556  29A8               	incf	sprintf@c& (0+255),w,b
  5239  000558  B4D8               	btfsc	status,2,c
  5240  00055A  D00E               	goto	l10695
  5241  00055C  D7AF               	goto	l10679
  5242  00055E                     l10689:
  5243                           
  5244                           ; BSR set to: 0
  5245                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  5246  00055E  C082  FFD9         	movff	sprintf@sp,fsr2l
  5247  000562  C083  FFDA         	movff	sprintf@sp+1,fsr2h
  5248  000566  0E30               	movlw	48
  5249  000568  6EDF               	movwf	indf2,c
  5250                           
  5251                           ; BSR set to: 0
  5252  00056A  0100               	movlb	0	; () banked
  5253  00056C  4B82               	infsnz	sprintf@sp& (0+255),f,b
  5254  00056E  2B83               	incf	(sprintf@sp+1)& (0+255),f,b
  5255                           
  5256                           ; BSR set to: 0
  5257                           ;doprnt.c: 1209: exp--;
  5258  000570  0100               	movlb	0	; () banked
  5259  000572  0799               	decf	sprintf@exp& (0+255),f,b
  5260  000574  A0D8               	btfss	status,0,c
  5261  000576  079A               	decf	(sprintf@exp+1)& (0+255),f,b
  5262  000578                     l10695:
  5263                           
  5264                           ; BSR set to: 0
  5265  000578  0100               	movlb	0	; () banked
  5266  00057A  BF9A               	btfsc	(sprintf@exp+1)& (0+255),7,b
  5267  00057C  D007               	goto	l10697
  5268  00057E  0100               	movlb	0	; () banked
  5269  000580  519A               	movf	(sprintf@exp+1)& (0+255),w,b
  5270  000582  E1ED               	bnz	l10689
  5271  000584  0100               	movlb	0	; () banked
  5272  000586  0599               	decf	sprintf@exp& (0+255),w,b
  5273  000588  B0D8               	btfsc	status,0,c
  5274  00058A  D7E9               	goto	l10689
  5275  00058C                     l10697:
  5276                           
  5277                           ; BSR set to: 0
  5278                           ;doprnt.c: 1210: }
  5279                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5280  00058C  0100               	movlb	0	; () banked
  5281  00058E  BFA4               	btfsc	(sprintf@prec+1)& (0+255),7,b
  5282  000590  D00C               	goto	l1324
  5283  000592  0100               	movlb	0	; () banked
  5284  000594  51A4               	movf	(sprintf@prec+1)& (0+255),w,b
  5285  000596  E105               	bnz	u12880
  5286  000598  0E09               	movlw	9
  5287  00059A  0100               	movlb	0	; () banked
  5288  00059C  5DA3               	subwf	sprintf@prec& (0+255),w,b
  5289  00059E  A0D8               	btfss	status,0,c
  5290  0005A0  D004               	goto	l1324
  5291  0005A2                     u12880:
  5292                           
  5293                           ; BSR set to: 0
  5294                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5295  0005A2  0E08               	movlw	8
  5296  0005A4  0100               	movlb	0	; () banked
  5297  0005A6  6FA8               	movwf	sprintf@c& (0+255),b
  5298  0005A8  D002               	goto	l10701
  5299  0005AA                     l1324:
  5300                           
  5301                           ; BSR set to: 0
  5302                           ;doprnt.c: 1213: else
  5303                           ;doprnt.c: 1214: c = prec;
  5304  0005AA  C0A3  F0A8         	movff	sprintf@prec,sprintf@c
  5305  0005AE                     l10701:
  5306                           
  5307                           ; BSR set to: 0
  5308                           ;doprnt.c: 1215: prec -= c;
  5309  0005AE  0100               	movlb	0	; () banked
  5310  0005B0  51A8               	movf	sprintf@c& (0+255),w,b
  5311  0005B2  0100               	movlb	0	; () banked
  5312  0005B4  5FA3               	subwf	sprintf@prec& (0+255),f,b
  5313  0005B6  0E00               	movlw	0
  5314  0005B8  0100               	movlb	0	; () banked
  5315  0005BA  BFA8               	btfsc	sprintf@c& (0+255),7,b
  5316  0005BC  0EFF               	movlw	255
  5317  0005BE  0100               	movlb	0	; () banked
  5318  0005C0  5BA4               	subwfb	(sprintf@prec+1)& (0+255),f,b
  5319                           
  5320                           ; BSR set to: 0
  5321                           ;doprnt.c: 1219: if(c)
  5322  0005C2  0100               	movlb	0	; () banked
  5323  0005C4  51A8               	movf	sprintf@c& (0+255),w,b
  5324  0005C6  0100               	movlb	0	; () banked
  5325  0005C8  B4D8               	btfsc	status,2,c
  5326  0005CA  D009               	goto	l10709
  5327                           
  5328                           ; BSR set to: 0
  5329                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  5330  0005CC  C082  FFD9         	movff	sprintf@sp,fsr2l
  5331  0005D0  C083  FFDA         	movff	sprintf@sp+1,fsr2h
  5332  0005D4  0E2E               	movlw	46
  5333  0005D6  6EDF               	movwf	indf2,c
  5334                           
  5335                           ; BSR set to: 0
  5336  0005D8  0100               	movlb	0	; () banked
  5337  0005DA  4B82               	infsnz	sprintf@sp& (0+255),f,b
  5338  0005DC  2B83               	incf	(sprintf@sp+1)& (0+255),f,b
  5339  0005DE                     l10709:
  5340                           
  5341                           ; BSR set to: 0
  5342                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5343  0005DE  0100               	movlb	0	; () banked
  5344  0005E0  51A8               	movf	sprintf@c& (0+255),w,b
  5345  0005E2  ECD5  F006         	call	_scale
  5346  0005E6  C066  F092         	movff	?_scale,_sprintf$3378
  5347  0005EA  C067  F093         	movff	?_scale+1,_sprintf$3378+1
  5348  0005EE  C068  F094         	movff	?_scale+2,_sprintf$3378+2
  5349                           
  5350                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5351  0005F2  C0A5  F02D         	movff	sprintf@fval,___ftmul@f2
  5352  0005F6  C0A6  F02E         	movff	sprintf@fval+1,___ftmul@f2+1
  5353  0005FA  C0A7  F02F         	movff	sprintf@fval+2,___ftmul@f2+2
  5354  0005FE  C092  F02A         	movff	_sprintf$3378,___ftmul@f1
  5355  000602  C093  F02B         	movff	_sprintf$3378+1,___ftmul@f1+1
  5356  000606  C094  F02C         	movff	_sprintf$3378+2,___ftmul@f1+2
  5357  00060A  EC26  F010         	call	___ftmul	;wreg free
  5358  00060E  C02A  F06D         	movff	?___ftmul,___fttol@f1
  5359  000612  C02B  F06E         	movff	?___ftmul+1,___fttol@f1+1
  5360  000616  C02C  F06F         	movff	?___ftmul+2,___fttol@f1+2
  5361  00061A  ECFE  F00B         	call	___fttol	;wreg free
  5362  00061E  C06D  F09F         	movff	?___fttol,sprintf@val
  5363  000622  C06E  F0A0         	movff	?___fttol+1,sprintf@val+1
  5364  000626  C06F  F0A1         	movff	?___fttol+2,sprintf@val+2
  5365  00062A  C070  F0A2         	movff	?___fttol+3,sprintf@val+3
  5366                           
  5367                           ;doprnt.c: 1228: while(c--) {
  5368  00062E  D073               	goto	l10723
  5369  000630                     l10713:
  5370                           
  5371                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  5372  000630  C09F  F016         	movff	sprintf@val,___lldiv@dividend
  5373  000634  C0A0  F017         	movff	sprintf@val+1,___lldiv@dividend+1
  5374  000638  C0A1  F018         	movff	sprintf@val+2,___lldiv@dividend+2
  5375  00063C  C0A2  F019         	movff	sprintf@val+3,___lldiv@dividend+3
  5376  000640  0100               	movlb	0	; () banked
  5377  000642  51A8               	movf	sprintf@c& (0+255),w,b
  5378  000644  0D04               	mullw	4
  5379  000646  0EC1               	movlw	low _dpowers
  5380  000648  24F3               	addwf	prodl,w,c
  5381  00064A  6EF6               	movwf	tblptrl,c
  5382  00064C  0E60               	movlw	high _dpowers
  5383  00064E  20F4               	addwfc	prodh,w,c
  5384  000650  6EF7               	movwf	tblptrh,c
  5385  000652                     	if	0	;There are less than 3 active tblptr bytes
  5386  000652                     	endif
  5387  000652  0009               	tblrd		*+
  5388  000654  CFF5 F01A          	movff	tablat,___lldiv@divisor
  5389  000658  0009               	tblrd		*+
  5390  00065A  CFF5 F01B          	movff	tablat,___lldiv@divisor+1
  5391  00065E  0009               	tblrd		*+
  5392  000660  CFF5 F01C          	movff	tablat,___lldiv@divisor+2
  5393  000664  000A               	tblrd		*-
  5394  000666  CFF5 F01D          	movff	tablat,___lldiv@divisor+3
  5395  00066A  EC31  F016         	call	___lldiv	;wreg free
  5396  00066E  C016  F09B         	movff	?___lldiv,sprintf@tmpval
  5397  000672  C017  F09C         	movff	?___lldiv+1,sprintf@tmpval+1
  5398  000676  C018  F09D         	movff	?___lldiv+2,sprintf@tmpval+2
  5399  00067A  C019  F09E         	movff	?___lldiv+3,sprintf@tmpval+3
  5400                           
  5401                           ;doprnt.c: 1230: tmpval.vd %= 10;
  5402  00067E  C09B  F023         	movff	sprintf@tmpval,___llmod@dividend
  5403  000682  C09C  F024         	movff	sprintf@tmpval+1,___llmod@dividend+1
  5404  000686  C09D  F025         	movff	sprintf@tmpval+2,___llmod@dividend+2
  5405  00068A  C09E  F026         	movff	sprintf@tmpval+3,___llmod@dividend+3
  5406  00068E  0E0A               	movlw	10
  5407  000690  6E27               	movwf	___llmod@divisor,c
  5408  000692  0E00               	movlw	0
  5409  000694  6E28               	movwf	___llmod@divisor+1,c
  5410  000696  0E00               	movlw	0
  5411  000698  6E29               	movwf	___llmod@divisor+2,c
  5412  00069A  0E00               	movlw	0
  5413  00069C  6E2A               	movwf	___llmod@divisor+3,c
  5414  00069E  ECC5  F017         	call	___llmod	;wreg free
  5415  0006A2  C023  F09B         	movff	?___llmod,sprintf@tmpval
  5416  0006A6  C024  F09C         	movff	?___llmod+1,sprintf@tmpval+1
  5417  0006AA  C025  F09D         	movff	?___llmod+2,sprintf@tmpval+2
  5418  0006AE  C026  F09E         	movff	?___llmod+3,sprintf@tmpval+3
  5419                           
  5420                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  5421  0006B2  0100               	movlb	0	; () banked
  5422  0006B4  519B               	movf	sprintf@tmpval& (0+255),w,b
  5423  0006B6  0F30               	addlw	48
  5424  0006B8  C082  FFD9         	movff	sprintf@sp,fsr2l
  5425  0006BC  C083  FFDA         	movff	sprintf@sp+1,fsr2h
  5426  0006C0  6EDF               	movwf	indf2,c
  5427                           
  5428                           ; BSR set to: 0
  5429  0006C2  0100               	movlb	0	; () banked
  5430  0006C4  4B82               	infsnz	sprintf@sp& (0+255),f,b
  5431  0006C6  2B83               	incf	(sprintf@sp+1)& (0+255),f,b
  5432                           
  5433                           ; BSR set to: 0
  5434                           ;doprnt.c: 1232: val %= dpowers[c];
  5435  0006C8  C09F  F023         	movff	sprintf@val,___llmod@dividend
  5436  0006CC  C0A0  F024         	movff	sprintf@val+1,___llmod@dividend+1
  5437  0006D0  C0A1  F025         	movff	sprintf@val+2,___llmod@dividend+2
  5438  0006D4  C0A2  F026         	movff	sprintf@val+3,___llmod@dividend+3
  5439  0006D8  0100               	movlb	0	; () banked
  5440  0006DA  51A8               	movf	sprintf@c& (0+255),w,b
  5441  0006DC  0D04               	mullw	4
  5442  0006DE  0EC1               	movlw	low _dpowers
  5443  0006E0  24F3               	addwf	prodl,w,c
  5444  0006E2  6EF6               	movwf	tblptrl,c
  5445  0006E4  0E60               	movlw	high _dpowers
  5446  0006E6  20F4               	addwfc	prodh,w,c
  5447  0006E8  6EF7               	movwf	tblptrh,c
  5448  0006EA                     	if	0	;There are less than 3 active tblptr bytes
  5449  0006EA                     	endif
  5450  0006EA  0009               	tblrd		*+
  5451  0006EC  CFF5 F027          	movff	tablat,___llmod@divisor
  5452  0006F0  0009               	tblrd		*+
  5453  0006F2  CFF5 F028          	movff	tablat,___llmod@divisor+1
  5454  0006F6  0009               	tblrd		*+
  5455  0006F8  CFF5 F029          	movff	tablat,___llmod@divisor+2
  5456  0006FC  000A               	tblrd		*-
  5457  0006FE  CFF5 F02A          	movff	tablat,___llmod@divisor+3
  5458  000702  ECC5  F017         	call	___llmod	;wreg free
  5459  000706  C023  F09F         	movff	?___llmod,sprintf@val
  5460  00070A  C024  F0A0         	movff	?___llmod+1,sprintf@val+1
  5461  00070E  C025  F0A1         	movff	?___llmod+2,sprintf@val+2
  5462  000712  C026  F0A2         	movff	?___llmod+3,sprintf@val+3
  5463  000716                     l10723:
  5464  000716  0100               	movlb	0	; () banked
  5465  000718  07A8               	decf	sprintf@c& (0+255),f,b
  5466  00071A  0100               	movlb	0	; () banked
  5467  00071C  29A8               	incf	sprintf@c& (0+255),w,b
  5468  00071E  B4D8               	btfsc	status,2,c
  5469  000720  D00E               	goto	l10731
  5470  000722  D786               	goto	l10713
  5471  000724                     l10725:
  5472                           
  5473                           ; BSR set to: 0
  5474                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  5475  000724  C082  FFD9         	movff	sprintf@sp,fsr2l
  5476  000728  C083  FFDA         	movff	sprintf@sp+1,fsr2h
  5477  00072C  0E30               	movlw	48
  5478  00072E  6EDF               	movwf	indf2,c
  5479                           
  5480                           ; BSR set to: 0
  5481  000730  0100               	movlb	0	; () banked
  5482  000732  4B82               	infsnz	sprintf@sp& (0+255),f,b
  5483  000734  2B83               	incf	(sprintf@sp+1)& (0+255),f,b
  5484                           
  5485                           ; BSR set to: 0
  5486                           ;doprnt.c: 1237: prec--;
  5487  000736  0100               	movlb	0	; () banked
  5488  000738  07A3               	decf	sprintf@prec& (0+255),f,b
  5489  00073A  A0D8               	btfss	status,0,c
  5490  00073C  07A4               	decf	(sprintf@prec+1)& (0+255),f,b
  5491  00073E                     l10731:
  5492                           
  5493                           ; BSR set to: 0
  5494  00073E  0100               	movlb	0	; () banked
  5495  000740  51A3               	movf	sprintf@prec& (0+255),w,b
  5496  000742  0100               	movlb	0	; () banked
  5497  000744  11A4               	iorwf	(sprintf@prec+1)& (0+255),w,b
  5498  000746  B4D8               	btfsc	status,2,c
  5499  000748  D0F2               	goto	l10785
  5500  00074A  D7EC               	goto	l10725
  5501  00074C                     l10733:
  5502                           
  5503                           ; BSR set to: 0
  5504                           ;doprnt.c: 1246: }
  5505                           ;doprnt.c: 1253: {
  5506                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  5507  00074C  C095  FFD9         	movff	sprintf@ap,fsr2l
  5508  000750  C096  FFDA         	movff	sprintf@ap+1,fsr2h
  5509  000754  CFDE F09F          	movff	postinc2,sprintf@val
  5510  000758  CFDD F0A0          	movff	postdec2,sprintf@val+1
  5511  00075C  0100               	movlb	0	; () banked
  5512  00075E  0E00               	movlw	0
  5513  000760  BFA0               	btfsc	(sprintf@val+1)& (0+255),7,b
  5514  000762  0EFF               	movlw	-1
  5515  000764  6FA1               	movwf	(sprintf@val+2)& (0+255),b
  5516  000766  6FA2               	movwf	(sprintf@val+3)& (0+255),b
  5517                           
  5518                           ; BSR set to: 0
  5519  000768  0E02               	movlw	2
  5520  00076A  0100               	movlb	0	; () banked
  5521  00076C  2795               	addwf	sprintf@ap& (0+255),f,b
  5522  00076E  0E00               	movlw	0
  5523  000770  2396               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5524                           
  5525                           ; BSR set to: 0
  5526                           ;doprnt.c: 1261: if((long)val < 0) {
  5527  000772  0100               	movlb	0	; () banked
  5528  000774  AFA2               	btfss	(sprintf@val+3)& (0+255),7,b
  5529  000776  D00C               	goto	l10743
  5530                           
  5531                           ; BSR set to: 0
  5532                           ;doprnt.c: 1262: flag |= 0x03;
  5533  000778  0E03               	movlw	3
  5534  00077A  0100               	movlb	0	; () banked
  5535  00077C  1397               	iorwf	sprintf@flag& (0+255),f,b
  5536                           
  5537                           ; BSR set to: 0
  5538                           ;doprnt.c: 1263: val = -val;
  5539  00077E  0100               	movlb	0	; () banked
  5540  000780  1FA2               	comf	(sprintf@val+3)& (0+255),f,b
  5541  000782  1FA1               	comf	(sprintf@val+2)& (0+255),f,b
  5542  000784  1FA0               	comf	(sprintf@val+1)& (0+255),f,b
  5543  000786  6D9F               	negf	sprintf@val& (0+255),b
  5544  000788  0E00               	movlw	0
  5545  00078A  23A0               	addwfc	(sprintf@val+1)& (0+255),f,b
  5546  00078C  23A1               	addwfc	(sprintf@val+2)& (0+255),f,b
  5547  00078E  23A2               	addwfc	(sprintf@val+3)& (0+255),f,b
  5548  000790                     l10743:
  5549                           
  5550                           ; BSR set to: 0
  5551                           ;doprnt.c: 1264: }
  5552                           ;doprnt.c: 1266: }
  5553                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  5554  000790  0100               	movlb	0	; () banked
  5555  000792  51A3               	movf	sprintf@prec& (0+255),w,b
  5556  000794  0100               	movlb	0	; () banked
  5557  000796  11A4               	iorwf	(sprintf@prec+1)& (0+255),w,b
  5558  000798  A4D8               	btfss	status,2,c
  5559  00079A  D00D               	goto	l10749
  5560                           
  5561                           ; BSR set to: 0
  5562  00079C  0100               	movlb	0	; () banked
  5563  00079E  519F               	movf	sprintf@val& (0+255),w,b
  5564  0007A0  0100               	movlb	0	; () banked
  5565  0007A2  11A0               	iorwf	(sprintf@val+1)& (0+255),w,b
  5566  0007A4  0100               	movlb	0	; () banked
  5567  0007A6  11A1               	iorwf	(sprintf@val+2)& (0+255),w,b
  5568  0007A8  0100               	movlb	0	; () banked
  5569  0007AA  11A2               	iorwf	(sprintf@val+3)& (0+255),w,b
  5570  0007AC  A4D8               	btfss	status,2,c
  5571  0007AE  D003               	goto	l10749
  5572                           
  5573                           ; BSR set to: 0
  5574                           ;doprnt.c: 1291: prec++;
  5575  0007B0  0100               	movlb	0	; () banked
  5576  0007B2  4BA3               	infsnz	sprintf@prec& (0+255),f,b
  5577  0007B4  2BA4               	incf	(sprintf@prec+1)& (0+255),f,b
  5578  0007B6                     l10749:
  5579                           
  5580                           ; BSR set to: 0
  5581                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5582  0007B6  0E01               	movlw	1
  5583  0007B8  0100               	movlb	0	; () banked
  5584  0007BA  6FA8               	movwf	sprintf@c& (0+255),b
  5585  0007BC                     l10751:
  5586                           
  5587                           ; BSR set to: 0
  5588  0007BC  0E0A               	movlw	10
  5589  0007BE  0100               	movlb	0	; () banked
  5590  0007C0  19A8               	xorwf	sprintf@c& (0+255),w,b
  5591  0007C2  B4D8               	btfsc	status,2,c
  5592  0007C4  D01E               	goto	l10763
  5593                           
  5594                           ; BSR set to: 0
  5595                           ;doprnt.c: 1306: if(val < dpowers[c])
  5596                           
  5597                           ; BSR set to: 0
  5598                           
  5599                           ; BSR set to: 0
  5600  0007C6  0100               	movlb	0	; () banked
  5601  0007C8  51A8               	movf	sprintf@c& (0+255),w,b
  5602  0007CA  0D04               	mullw	4
  5603  0007CC  0EC1               	movlw	low _dpowers
  5604  0007CE  24F3               	addwf	prodl,w,c
  5605  0007D0  6EF6               	movwf	tblptrl,c
  5606  0007D2  0E60               	movlw	high _dpowers
  5607  0007D4  20F4               	addwfc	prodh,w,c
  5608  0007D6  6EF7               	movwf	tblptrh,c
  5609  0007D8                     	if	0	;There are less than 3 active tblptr bytes
  5610  0007D8                     	endif
  5611  0007D8  0009               	tblrd		*+
  5612  0007DA  50F5               	movf	tablat,w,c
  5613  0007DC  0100               	movlb	0	; () banked
  5614  0007DE  5D9F               	subwf	sprintf@val& (0+255),w,b
  5615  0007E0  0009               	tblrd		*+
  5616  0007E2  50F5               	movf	tablat,w,c
  5617  0007E4  0100               	movlb	0	; () banked
  5618  0007E6  59A0               	subwfb	(sprintf@val+1)& (0+255),w,b
  5619  0007E8  0009               	tblrd		*+
  5620  0007EA  50F5               	movf	tablat,w,c
  5621  0007EC  0100               	movlb	0	; () banked
  5622  0007EE  59A1               	subwfb	(sprintf@val+2)& (0+255),w,b
  5623  0007F0  0009               	tblrd		*+
  5624  0007F2  50F5               	movf	tablat,w,c
  5625  0007F4  0100               	movlb	0	; () banked
  5626  0007F6  59A2               	subwfb	(sprintf@val+3)& (0+255),w,b
  5627  0007F8  A0D8               	btfss	status,0,c
  5628  0007FA  D003               	goto	l10763
  5629                           
  5630                           ; BSR set to: 0
  5631                           
  5632                           ; BSR set to: 0
  5633                           
  5634                           ; BSR set to: 0
  5635                           ;doprnt.c: 1307: break;
  5636  0007FC  0100               	movlb	0	; () banked
  5637  0007FE  2BA8               	incf	sprintf@c& (0+255),f,b
  5638  000800  D7DD               	goto	l10751
  5639  000802                     l10763:
  5640                           
  5641                           ; BSR set to: 0
  5642                           ;doprnt.c: 1339: if(c < prec)
  5643  000802  0E80               	movlw	128
  5644  000804  0100               	movlb	0	; () banked
  5645  000806  BFA8               	btfsc	sprintf@c& (0+255),7,b
  5646  000808  0E7F               	movlw	127
  5647  00080A  0100               	movlb	0	; () banked
  5648  00080C  6F8C               	movwf	??_sprintf& (0+255),b
  5649  00080E  0100               	movlb	0	; () banked
  5650  000810  51A3               	movf	sprintf@prec& (0+255),w,b
  5651  000812  0100               	movlb	0	; () banked
  5652  000814  5DA8               	subwf	sprintf@c& (0+255),w,b
  5653  000816  0100               	movlb	0	; () banked
  5654  000818  51A4               	movf	(sprintf@prec+1)& (0+255),w,b
  5655  00081A  0A80               	xorlw	128
  5656  00081C  0100               	movlb	0	; () banked
  5657  00081E  598C               	subwfb	??_sprintf& (0+255),w,b
  5658  000820  B0D8               	btfsc	status,0,c
  5659  000822  D003               	goto	l10767
  5660                           
  5661                           ; BSR set to: 0
  5662                           ;doprnt.c: 1340: c = prec;
  5663  000824  C0A3  F0A8         	movff	sprintf@prec,sprintf@c
  5664  000828  D018               	goto	l10771
  5665  00082A                     l10767:
  5666                           
  5667                           ; BSR set to: 0
  5668                           ;doprnt.c: 1341: else if(prec < c)
  5669  00082A  0100               	movlb	0	; () banked
  5670  00082C  51A4               	movf	(sprintf@prec+1)& (0+255),w,b
  5671  00082E  0A80               	xorlw	128
  5672  000830  0100               	movlb	0	; () banked
  5673  000832  6F8C               	movwf	??_sprintf& (0+255),b
  5674  000834  0100               	movlb	0	; () banked
  5675  000836  51A8               	movf	sprintf@c& (0+255),w,b
  5676  000838  0100               	movlb	0	; () banked
  5677  00083A  5DA3               	subwf	sprintf@prec& (0+255),w,b
  5678  00083C  0E80               	movlw	128
  5679  00083E  0100               	movlb	0	; () banked
  5680  000840  BFA8               	btfsc	sprintf@c& (0+255),7,b
  5681  000842  0E7F               	movlw	127
  5682  000844  0100               	movlb	0	; () banked
  5683  000846  598C               	subwfb	??_sprintf& (0+255),w,b
  5684  000848  B0D8               	btfsc	status,0,c
  5685  00084A  D007               	goto	l10771
  5686                           
  5687                           ; BSR set to: 0
  5688                           ;doprnt.c: 1342: prec = c;
  5689  00084C  0100               	movlb	0	; () banked
  5690  00084E  51A8               	movf	sprintf@c& (0+255),w,b
  5691  000850  0100               	movlb	0	; () banked
  5692  000852  6FA3               	movwf	sprintf@prec& (0+255),b
  5693  000854  6BA4               	clrf	(sprintf@prec+1)& (0+255),b
  5694  000856  BFA3               	btfsc	sprintf@prec& (0+255),7,b
  5695  000858  07A4               	decf	(sprintf@prec+1)& (0+255),f,b
  5696  00085A                     l10771:
  5697                           
  5698                           ; BSR set to: 0
  5699                           ;doprnt.c: 1422: {
  5700                           ;doprnt.c: 1438: if(flag & 0x03)
  5701  00085A  0E03               	movlw	3
  5702  00085C  0100               	movlb	0	; () banked
  5703  00085E  1597               	andwf	sprintf@flag& (0+255),w,b
  5704  000860  0100               	movlb	0	; () banked
  5705  000862  6F8C               	movwf	??_sprintf& (0+255),b
  5706  000864  0E00               	movlw	0
  5707  000866  0100               	movlb	0	; () banked
  5708  000868  1598               	andwf	(sprintf@flag+1)& (0+255),w,b
  5709  00086A  0100               	movlb	0	; () banked
  5710  00086C  6F8D               	movwf	(??_sprintf+1)& (0+255),b
  5711  00086E  0100               	movlb	0	; () banked
  5712  000870  518C               	movf	??_sprintf& (0+255),w,b
  5713  000872  0100               	movlb	0	; () banked
  5714  000874  118D               	iorwf	(??_sprintf+1)& (0+255),w,b
  5715  000876  B4D8               	btfsc	status,2,c
  5716  000878  D04F               	goto	l10783
  5717                           
  5718                           ; BSR set to: 0
  5719                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5720  00087A  C082  FFD9         	movff	sprintf@sp,fsr2l
  5721  00087E  C083  FFDA         	movff	sprintf@sp+1,fsr2h
  5722  000882  0E2D               	movlw	45
  5723  000884  6EDF               	movwf	indf2,c
  5724  000886  D045               	goto	l10781
  5725  000888                     l10777:
  5726                           
  5727                           ; BSR set to: 0
  5728                           ;doprnt.c: 1478: {
  5729                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5730  000888  C0A3  F08C         	movff	sprintf@prec,??_sprintf
  5731  00088C  C0A4  F08D         	movff	sprintf@prec+1,??_sprintf+1
  5732  000890  0100               	movlb	0	; () banked
  5733  000892  90D8               	bcf	status,0,c
  5734  000894  378C               	rlcf	??_sprintf& (0+255),f,b
  5735  000896  378D               	rlcf	(??_sprintf+1)& (0+255),f,b
  5736  000898  0100               	movlb	0	; () banked
  5737  00089A  90D8               	bcf	status,0,c
  5738  00089C  378C               	rlcf	??_sprintf& (0+255),f,b
  5739  00089E  378D               	rlcf	(??_sprintf+1)& (0+255),f,b
  5740  0008A0  0EC1               	movlw	low _dpowers
  5741  0008A2  0100               	movlb	0	; () banked
  5742  0008A4  258C               	addwf	??_sprintf& (0+255),w,b
  5743  0008A6  6EF6               	movwf	tblptrl,c
  5744  0008A8  0E60               	movlw	high _dpowers
  5745  0008AA  218D               	addwfc	(??_sprintf+1)& (0+255),w,b
  5746  0008AC  6EF7               	movwf	tblptrh,c
  5747  0008AE                     	if	0	;There are less than 3 active tblptr bytes
  5748  0008AE                     	endif
  5749  0008AE  0009               	tblrd		*+
  5750  0008B0  CFF5 F01A          	movff	tablat,___lldiv@divisor
  5751  0008B4  0009               	tblrd		*+
  5752  0008B6  CFF5 F01B          	movff	tablat,___lldiv@divisor+1
  5753  0008BA  0009               	tblrd		*+
  5754  0008BC  CFF5 F01C          	movff	tablat,___lldiv@divisor+2
  5755  0008C0  000A               	tblrd		*-
  5756  0008C2  CFF5 F01D          	movff	tablat,___lldiv@divisor+3
  5757  0008C6  C09F  F016         	movff	sprintf@val,___lldiv@dividend
  5758  0008CA  C0A0  F017         	movff	sprintf@val+1,___lldiv@dividend+1
  5759  0008CE  C0A1  F018         	movff	sprintf@val+2,___lldiv@dividend+2
  5760  0008D2  C0A2  F019         	movff	sprintf@val+3,___lldiv@dividend+3
  5761  0008D6  EC31  F016         	call	___lldiv	;wreg free
  5762  0008DA  C016  F023         	movff	?___lldiv,___llmod@dividend
  5763  0008DE  C017  F024         	movff	?___lldiv+1,___llmod@dividend+1
  5764  0008E2  C018  F025         	movff	?___lldiv+2,___llmod@dividend+2
  5765  0008E6  C019  F026         	movff	?___lldiv+3,___llmod@dividend+3
  5766  0008EA  0E0A               	movlw	10
  5767  0008EC  6E27               	movwf	___llmod@divisor,c
  5768  0008EE  0E00               	movlw	0
  5769  0008F0  6E28               	movwf	___llmod@divisor+1,c
  5770  0008F2  0E00               	movlw	0
  5771  0008F4  6E29               	movwf	___llmod@divisor+2,c
  5772  0008F6  0E00               	movlw	0
  5773  0008F8  6E2A               	movwf	___llmod@divisor+3,c
  5774  0008FA  ECC5  F017         	call	___llmod	;wreg free
  5775  0008FE  5023               	movf	?___llmod,w,c
  5776  000900  0F30               	addlw	48
  5777  000902  0100               	movlb	0	; () banked
  5778  000904  6FA8               	movwf	sprintf@c& (0+255),b
  5779                           
  5780                           ; BSR set to: 0
  5781                           ;doprnt.c: 1523: }
  5782                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5783  000906  C082  FFD9         	movff	sprintf@sp,fsr2l
  5784  00090A  C083  FFDA         	movff	sprintf@sp+1,fsr2h
  5785  00090E  C0A8  FFDF         	movff	sprintf@c,indf2
  5786  000912                     l10781:
  5787                           
  5788                           ; BSR set to: 0
  5789  000912  0100               	movlb	0	; () banked
  5790  000914  4B82               	infsnz	sprintf@sp& (0+255),f,b
  5791  000916  2B83               	incf	(sprintf@sp+1)& (0+255),f,b
  5792  000918                     l10783:
  5793                           
  5794                           ; BSR set to: 0
  5795  000918  0100               	movlb	0	; () banked
  5796  00091A  07A3               	decf	sprintf@prec& (0+255),f,b
  5797  00091C  A0D8               	btfss	status,0,c
  5798  00091E  07A4               	decf	(sprintf@prec+1)& (0+255),f,b
  5799  000920  0100               	movlb	0	; () banked
  5800  000922  29A3               	incf	sprintf@prec& (0+255),w,b
  5801  000924  E1B1               	bnz	l10777
  5802  000926  0100               	movlb	0	; () banked
  5803  000928  29A4               	incf	(sprintf@prec+1)& (0+255),w,b
  5804  00092A  A4D8               	btfss	status,2,c
  5805  00092C  D7AD               	goto	l10777
  5806  00092E                     l10785:
  5807                           
  5808                           ; BSR set to: 0
  5809  00092E  C084  FFF6         	movff	sprintf@f,tblptrl
  5810  000932  C085  FFF7         	movff	sprintf@f+1,tblptrh
  5811  000936  0100               	movlb	0	; () banked
  5812  000938  4B84               	infsnz	sprintf@f& (0+255),f,b
  5813  00093A  2B85               	incf	(sprintf@f+1)& (0+255),f,b
  5814  00093C                     	if	0	;tblptru may be non-zero
  5815  00093C                     	endif
  5816  00093C                     	if	0	;tblptru may be non-zero
  5817  00093C                     	endif
  5818  00093C  0008               	tblrd		*
  5819  00093E  CFF5 F0A8          	movff	tablat,sprintf@c
  5820  000942  0100               	movlb	0	; () banked
  5821  000944  51A8               	movf	sprintf@c& (0+255),w,b
  5822  000946  A4D8               	btfss	status,2,c
  5823  000948  EF11  F000         	goto	l10555
  5824  00094C                     l10787:
  5825                           
  5826                           ; BSR set to: 0
  5827                           ;doprnt.c: 1538: *sp = 0;
  5828  00094C  C082  FFD9         	movff	sprintf@sp,fsr2l
  5829  000950  C083  FFDA         	movff	sprintf@sp+1,fsr2h
  5830  000954  0E00               	movlw	0
  5831  000956  6EDF               	movwf	indf2,c
  5832  000958  0012               	return	
  5833  00095A                     __end_of_sprintf:
  5834                           	opt stack 0
  5835                           tosu	equ	0xFFF
  5836                           tosh	equ	0xFFE
  5837                           tosl	equ	0xFFD
  5838                           pclath	equ	0xFFA
  5839                           tblptru	equ	0xFF8
  5840                           tblptrh	equ	0xFF7
  5841                           tblptrl	equ	0xFF6
  5842                           tablat	equ	0xFF5
  5843                           prodh	equ	0xFF4
  5844                           prodl	equ	0xFF3
  5845                           intcon	equ	0xFF2
  5846                           intcon2	equ	0xFF1
  5847                           intcon3	equ	0xFF0
  5848                           postinc0	equ	0xFEE
  5849                           wreg	equ	0xFE8
  5850                           postinc1	equ	0xFE6
  5851                           postdec1	equ	0xFE5
  5852                           fsr1h	equ	0xFE2
  5853                           fsr1l	equ	0xFE1
  5854                           indf2	equ	0xFDF
  5855                           postinc2	equ	0xFDE
  5856                           postdec2	equ	0xFDD
  5857                           fsr2h	equ	0xFDA
  5858                           fsr2l	equ	0xFD9
  5859                           status	equ	0xFD8
  5860                           
  5861 ;; *************** function _scale *****************
  5862 ;; Defined at:
  5863 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  5864 ;; Parameters:    Size  Location     Type
  5865 ;;  scl             1    wreg     char 
  5866 ;; Auto vars:     Size  Location     Type
  5867 ;;  scl             1   12[BANK0 ] char 
  5868 ;; Return value:  Size  Location     Type
  5869 ;;                  3    6[BANK0 ] char 
  5870 ;; Registers used:
  5871 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5872 ;; Tracked objects:
  5873 ;;		On entry : 0/0
  5874 ;;		On exit  : 0/0
  5875 ;;		Unchanged: 0/0
  5876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5877 ;;      Params:         0       3       0       0       0       0       0       0       0
  5878 ;;      Locals:         0       4       0       0       0       0       0       0       0
  5879 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5880 ;;      Totals:         0       7       0       0       0       0       0       0       0
  5881 ;;Total ram usage:        7 bytes
  5882 ;; Hardware stack levels used:    1
  5883 ;; Hardware stack levels required when called:    4
  5884 ;; This function calls:
  5885 ;;		___awdiv
  5886 ;;		___awmod
  5887 ;;		___ftmul
  5888 ;;		___wmul
  5889 ;; This function is called by:
  5890 ;;		_sprintf
  5891 ;; This function uses a non-reentrant model
  5892 ;;
  5893                           
  5894                           	psect	text21
  5895  000DAA                     __ptext21:
  5896                           	opt stack 0
  5897  000DAA                     _scale:
  5898                           	opt stack 23
  5899                           
  5900                           ; BSR set to: 0
  5901                           ;incstack = 0
  5902                           ;scale@scl stored from wreg
  5903  000DAA  0100               	movlb	0	; () banked
  5904  000DAC  6F6C               	movwf	scale@scl& (0+255),b
  5905                           
  5906                           ;doprnt.c: 428: if(scl < 0) {
  5907  000DAE  0100               	movlb	0	; () banked
  5908  000DB0  AF6C               	btfss	scale@scl& (0+255),7,b
  5909  000DB2  D104               	goto	l10271
  5910                           
  5911                           ; BSR set to: 0
  5912                           ;doprnt.c: 429: scl = -scl;
  5913  000DB4  0100               	movlb	0	; () banked
  5914  000DB6  6D6C               	negf	scale@scl& (0+255),b
  5915                           
  5916                           ;doprnt.c: 430: if(scl>=110)
  5917  000DB8  0100               	movlb	0	; () banked
  5918  000DBA  516C               	movf	scale@scl& (0+255),w,b
  5919  000DBC  0A80               	xorlw	128
  5920  000DBE  0F12               	addlw	-238
  5921  000DC0  A0D8               	btfss	status,0,c
  5922  000DC2  D094               	goto	l10261
  5923                           
  5924                           ; BSR set to: 0
  5925                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5926  000DC4  0E00               	movlw	0
  5927  000DC6  6E27               	movwf	___wmul@multiplicand+1,c
  5928  000DC8  0E03               	movlw	3
  5929  000DCA  6E26               	movwf	___wmul@multiplicand,c
  5930  000DCC  0E00               	movlw	0
  5931  000DCE  6E1F               	movwf	___awdiv@divisor+1,c
  5932  000DD0  0E0A               	movlw	10
  5933  000DD2  6E1E               	movwf	___awdiv@divisor,c
  5934  000DD4  0E00               	movlw	0
  5935  000DD6  6E19               	movwf	___awmod@divisor+1,c
  5936  000DD8  0E64               	movlw	100
  5937  000DDA  6E18               	movwf	___awmod@divisor,c
  5938  000DDC  0100               	movlb	0	; () banked
  5939  000DDE  516C               	movf	scale@scl& (0+255),w,b
  5940  000DE0  6E16               	movwf	___awmod@dividend,c
  5941  000DE2  6A17               	clrf	___awmod@dividend+1,c
  5942  000DE4  BE16               	btfsc	___awmod@dividend,7,c
  5943  000DE6  0617               	decf	___awmod@dividend+1,f,c
  5944  000DE8  EC20  F017         	call	___awmod	;wreg free
  5945  000DEC  C016  F01C         	movff	?___awmod,___awdiv@dividend
  5946  000DF0  C017  F01D         	movff	?___awmod+1,___awdiv@dividend+1
  5947  000DF4  ECEF  F015         	call	___awdiv	;wreg free
  5948  000DF8  0E09               	movlw	9
  5949  000DFA  241C               	addwf	?___awdiv,w,c
  5950  000DFC  6E24               	movwf	___wmul@multiplier,c
  5951  000DFE  0E00               	movlw	0
  5952  000E00  201D               	addwfc	?___awdiv+1,w,c
  5953  000E02  6E25               	movwf	___wmul@multiplier+1,c
  5954  000E04  EC18  F01A         	call	___wmul	;wreg free
  5955  000E08  0E10               	movlw	low __npowers_
  5956  000E0A  2424               	addwf	?___wmul,w,c
  5957  000E0C  6EF6               	movwf	tblptrl,c
  5958  000E0E  0E61               	movlw	high __npowers_
  5959  000E10  2025               	addwfc	?___wmul+1,w,c
  5960  000E12  6EF7               	movwf	tblptrh,c
  5961  000E14                     	if	0	;There are less than 3 active tblptr bytes
  5962  000E14                     	endif
  5963  000E14  0009               	tblrd		*+
  5964  000E16  CFF5 F02D          	movff	tablat,___ftmul@f2
  5965  000E1A  0009               	tblrd		*+
  5966  000E1C  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  5967  000E20  000A               	tblrd		*-
  5968  000E22  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  5969  000E26  0E00               	movlw	0
  5970  000E28  6E1F               	movwf	___awdiv@divisor+1,c
  5971  000E2A  0E64               	movlw	100
  5972  000E2C  6E1E               	movwf	___awdiv@divisor,c
  5973  000E2E  0100               	movlb	0	; () banked
  5974  000E30  516C               	movf	scale@scl& (0+255),w,b
  5975  000E32  6E1C               	movwf	___awdiv@dividend,c
  5976  000E34  6A1D               	clrf	___awdiv@dividend+1,c
  5977  000E36  BE1C               	btfsc	___awdiv@dividend,7,c
  5978  000E38  061D               	decf	___awdiv@dividend+1,f,c
  5979  000E3A  ECEF  F015         	call	___awdiv	;wreg free
  5980  000E3E  0E12               	movlw	18
  5981  000E40  241C               	addwf	?___awdiv,w,c
  5982  000E42  6E24               	movwf	___wmul@multiplier,c
  5983  000E44  0E00               	movlw	0
  5984  000E46  201D               	addwfc	?___awdiv+1,w,c
  5985  000E48  6E25               	movwf	___wmul@multiplier+1,c
  5986  000E4A  0E00               	movlw	0
  5987  000E4C  6E27               	movwf	___wmul@multiplicand+1,c
  5988  000E4E  0E03               	movlw	3
  5989  000E50  6E26               	movwf	___wmul@multiplicand,c
  5990  000E52  EC18  F01A         	call	___wmul	;wreg free
  5991  000E56  0E10               	movlw	low __npowers_
  5992  000E58  2424               	addwf	?___wmul,w,c
  5993  000E5A  6EF6               	movwf	tblptrl,c
  5994  000E5C  0E61               	movlw	high __npowers_
  5995  000E5E  2025               	addwfc	?___wmul+1,w,c
  5996  000E60  6EF7               	movwf	tblptrh,c
  5997  000E62                     	if	0	;There are less than 3 active tblptr bytes
  5998  000E62                     	endif
  5999  000E62  0009               	tblrd		*+
  6000  000E64  CFF5 F02A          	movff	tablat,___ftmul@f1
  6001  000E68  0009               	tblrd		*+
  6002  000E6A  CFF5 F02B          	movff	tablat,___ftmul@f1+1
  6003  000E6E  000A               	tblrd		*-
  6004  000E70  CFF5 F02C          	movff	tablat,___ftmul@f1+2
  6005  000E74  EC26  F010         	call	___ftmul	;wreg free
  6006  000E78  C02A  F069         	movff	?___ftmul,_scale$3377
  6007  000E7C  C02B  F06A         	movff	?___ftmul+1,_scale$3377+1
  6008  000E80  C02C  F06B         	movff	?___ftmul+2,_scale$3377+2
  6009                           
  6010                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6011  000E84  C069  F02A         	movff	_scale$3377,___ftmul@f1
  6012  000E88  C06A  F02B         	movff	_scale$3377+1,___ftmul@f1+1
  6013  000E8C  C06B  F02C         	movff	_scale$3377+2,___ftmul@f1+2
  6014  000E90  0E00               	movlw	0
  6015  000E92  6E27               	movwf	___wmul@multiplicand+1,c
  6016  000E94  0E03               	movlw	3
  6017  000E96  6E26               	movwf	___wmul@multiplicand,c
  6018  000E98  0E00               	movlw	0
  6019  000E9A  6E19               	movwf	___awmod@divisor+1,c
  6020  000E9C  0E0A               	movlw	10
  6021  000E9E  6E18               	movwf	___awmod@divisor,c
  6022  000EA0  0100               	movlb	0	; () banked
  6023  000EA2  516C               	movf	scale@scl& (0+255),w,b
  6024  000EA4  6E16               	movwf	___awmod@dividend,c
  6025  000EA6  6A17               	clrf	___awmod@dividend+1,c
  6026  000EA8  BE16               	btfsc	___awmod@dividend,7,c
  6027  000EAA  0617               	decf	___awmod@dividend+1,f,c
  6028  000EAC  EC20  F017         	call	___awmod	;wreg free
  6029  000EB0  C016  F024         	movff	?___awmod,___wmul@multiplier
  6030  000EB4  C017  F025         	movff	?___awmod+1,___wmul@multiplier+1
  6031  000EB8  EC18  F01A         	call	___wmul	;wreg free
  6032  000EBC  0E10               	movlw	low __npowers_
  6033  000EBE  2424               	addwf	?___wmul,w,c
  6034  000EC0  6EF6               	movwf	tblptrl,c
  6035  000EC2  0E61               	movlw	high __npowers_
  6036  000EC4  2025               	addwfc	?___wmul+1,w,c
  6037  000EC6  6EF7               	movwf	tblptrh,c
  6038  000EC8                     	if	0	;There are less than 3 active tblptr bytes
  6039  000EC8                     	endif
  6040  000EC8  0009               	tblrd		*+
  6041  000ECA  CFF5 F02D          	movff	tablat,___ftmul@f2
  6042  000ECE  0009               	tblrd		*+
  6043  000ED0  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  6044  000ED4  000A               	tblrd		*-
  6045  000ED6  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  6046  000EDA  EC26  F010         	call	___ftmul	;wreg free
  6047  000EDE  C02A  F066         	movff	?___ftmul,?_scale
  6048  000EE2  C02B  F067         	movff	?___ftmul+1,?_scale+1
  6049  000EE6  C02C  F068         	movff	?___ftmul+2,?_scale+2
  6050  000EEA  0012               	return	
  6051  000EEC                     l10261:
  6052                           
  6053                           ;doprnt.c: 432: else if(scl > 10)
  6054  000EEC  0100               	movlb	0	; () banked
  6055  000EEE  516C               	movf	scale@scl& (0+255),w,b
  6056  000EF0  0A80               	xorlw	128
  6057  000EF2  0F75               	addlw	-139
  6058  000EF4  A0D8               	btfss	status,0,c
  6059  000EF6  D04F               	goto	l10267
  6060                           
  6061                           ; BSR set to: 0
  6062                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  6063  000EF8  0E00               	movlw	0
  6064  000EFA  6E1F               	movwf	___awdiv@divisor+1,c
  6065  000EFC  0E0A               	movlw	10
  6066  000EFE  6E1E               	movwf	___awdiv@divisor,c
  6067  000F00  0100               	movlb	0	; () banked
  6068  000F02  516C               	movf	scale@scl& (0+255),w,b
  6069  000F04  6E1C               	movwf	___awdiv@dividend,c
  6070  000F06  6A1D               	clrf	___awdiv@dividend+1,c
  6071  000F08  BE1C               	btfsc	___awdiv@dividend,7,c
  6072  000F0A  061D               	decf	___awdiv@dividend+1,f,c
  6073  000F0C  ECEF  F015         	call	___awdiv	;wreg free
  6074  000F10  0E09               	movlw	9
  6075  000F12  241C               	addwf	?___awdiv,w,c
  6076  000F14  6E24               	movwf	___wmul@multiplier,c
  6077  000F16  0E00               	movlw	0
  6078  000F18  201D               	addwfc	?___awdiv+1,w,c
  6079  000F1A  6E25               	movwf	___wmul@multiplier+1,c
  6080  000F1C  0E00               	movlw	0
  6081  000F1E  6E27               	movwf	___wmul@multiplicand+1,c
  6082  000F20  0E03               	movlw	3
  6083  000F22  6E26               	movwf	___wmul@multiplicand,c
  6084  000F24  EC18  F01A         	call	___wmul	;wreg free
  6085  000F28  0E10               	movlw	low __npowers_
  6086  000F2A  2424               	addwf	?___wmul,w,c
  6087  000F2C  6EF6               	movwf	tblptrl,c
  6088  000F2E  0E61               	movlw	high __npowers_
  6089  000F30  2025               	addwfc	?___wmul+1,w,c
  6090  000F32  6EF7               	movwf	tblptrh,c
  6091  000F34                     	if	0	;There are less than 3 active tblptr bytes
  6092  000F34                     	endif
  6093  000F34  0009               	tblrd		*+
  6094  000F36  CFF5 F02A          	movff	tablat,___ftmul@f1
  6095  000F3A  0009               	tblrd		*+
  6096  000F3C  CFF5 F02B          	movff	tablat,___ftmul@f1+1
  6097  000F40  000A               	tblrd		*-
  6098  000F42  CFF5 F02C          	movff	tablat,___ftmul@f1+2
  6099  000F46  0E00               	movlw	0
  6100  000F48  6E27               	movwf	___wmul@multiplicand+1,c
  6101  000F4A  0E03               	movlw	3
  6102  000F4C  6E26               	movwf	___wmul@multiplicand,c
  6103  000F4E  0E00               	movlw	0
  6104  000F50  6E19               	movwf	___awmod@divisor+1,c
  6105  000F52  0E0A               	movlw	10
  6106  000F54  6E18               	movwf	___awmod@divisor,c
  6107  000F56  0100               	movlb	0	; () banked
  6108  000F58  516C               	movf	scale@scl& (0+255),w,b
  6109  000F5A  6E16               	movwf	___awmod@dividend,c
  6110  000F5C  6A17               	clrf	___awmod@dividend+1,c
  6111  000F5E  BE16               	btfsc	___awmod@dividend,7,c
  6112  000F60  0617               	decf	___awmod@dividend+1,f,c
  6113  000F62  EC20  F017         	call	___awmod	;wreg free
  6114  000F66  C016  F024         	movff	?___awmod,___wmul@multiplier
  6115  000F6A  C017  F025         	movff	?___awmod+1,___wmul@multiplier+1
  6116  000F6E  EC18  F01A         	call	___wmul	;wreg free
  6117  000F72  0E10               	movlw	low __npowers_
  6118  000F74  2424               	addwf	?___wmul,w,c
  6119  000F76  6EF6               	movwf	tblptrl,c
  6120  000F78  0E61               	movlw	high __npowers_
  6121  000F7A  2025               	addwfc	?___wmul+1,w,c
  6122  000F7C  6EF7               	movwf	tblptrh,c
  6123  000F7E                     	if	0	;There are less than 3 active tblptr bytes
  6124  000F7E                     	endif
  6125  000F7E  0009               	tblrd		*+
  6126  000F80  CFF5 F02D          	movff	tablat,___ftmul@f2
  6127  000F84  0009               	tblrd		*+
  6128  000F86  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  6129  000F8A  000A               	tblrd		*-
  6130  000F8C  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  6131  000F90  EC26  F010         	call	___ftmul	;wreg free
  6132  000F94  D7A4               	goto	L6
  6133  000F96                     l10267:
  6134                           
  6135                           ;doprnt.c: 434: return _npowers_[scl];
  6136  000F96  0100               	movlb	0	; () banked
  6137  000F98  516C               	movf	scale@scl& (0+255),w,b
  6138  000F9A  0D03               	mullw	3
  6139  000F9C  0E10               	movlw	low __npowers_
  6140  000F9E  24F3               	addwf	prodl,w,c
  6141  000FA0  6EF6               	movwf	tblptrl,c
  6142  000FA2  0E61               	movlw	high __npowers_
  6143  000FA4  20F4               	addwfc	prodh,w,c
  6144  000FA6  6EF7               	movwf	tblptrh,c
  6145  000FA8                     	if	0	;There are less than 3 active tblptr bytes
  6146  000FA8                     	endif
  6147  000FA8  0009               	tblrd		*+
  6148  000FAA  CFF5 F066          	movff	tablat,?_scale
  6149  000FAE  0009               	tblrd		*+
  6150  000FB0  CFF5 F067          	movff	tablat,?_scale+1
  6151  000FB4  000A               	tblrd		*-
  6152  000FB6  CFF5 F068          	movff	tablat,?_scale+2
  6153                           
  6154                           ; BSR set to: 0
  6155  000FBA  0012               	return	
  6156  000FBC                     l10271:
  6157                           
  6158                           ; BSR set to: 0
  6159                           ;doprnt.c: 435: }
  6160                           ;doprnt.c: 436: if(scl>=110)
  6161  000FBC  0100               	movlb	0	; () banked
  6162  000FBE  516C               	movf	scale@scl& (0+255),w,b
  6163  000FC0  0A80               	xorlw	128
  6164  000FC2  0F12               	addlw	-238
  6165  000FC4  A0D8               	btfss	status,0,c
  6166  000FC6  D094               	goto	l10279
  6167                           
  6168                           ; BSR set to: 0
  6169                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6170  000FC8  0E00               	movlw	0
  6171  000FCA  6E27               	movwf	___wmul@multiplicand+1,c
  6172  000FCC  0E03               	movlw	3
  6173  000FCE  6E26               	movwf	___wmul@multiplicand,c
  6174  000FD0  0E00               	movlw	0
  6175  000FD2  6E1F               	movwf	___awdiv@divisor+1,c
  6176  000FD4  0E0A               	movlw	10
  6177  000FD6  6E1E               	movwf	___awdiv@divisor,c
  6178  000FD8  0E00               	movlw	0
  6179  000FDA  6E19               	movwf	___awmod@divisor+1,c
  6180  000FDC  0E64               	movlw	100
  6181  000FDE  6E18               	movwf	___awmod@divisor,c
  6182  000FE0  0100               	movlb	0	; () banked
  6183  000FE2  516C               	movf	scale@scl& (0+255),w,b
  6184  000FE4  6E16               	movwf	___awmod@dividend,c
  6185  000FE6  6A17               	clrf	___awmod@dividend+1,c
  6186  000FE8  BE16               	btfsc	___awmod@dividend,7,c
  6187  000FEA  0617               	decf	___awmod@dividend+1,f,c
  6188  000FEC  EC20  F017         	call	___awmod	;wreg free
  6189  000FF0  C016  F01C         	movff	?___awmod,___awdiv@dividend
  6190  000FF4  C017  F01D         	movff	?___awmod+1,___awdiv@dividend+1
  6191  000FF8  ECEF  F015         	call	___awdiv	;wreg free
  6192  000FFC  0E09               	movlw	9
  6193  000FFE  241C               	addwf	?___awdiv,w,c
  6194  001000  6E24               	movwf	___wmul@multiplier,c
  6195  001002  0E00               	movlw	0
  6196  001004  201D               	addwfc	?___awdiv+1,w,c
  6197  001006  6E25               	movwf	___wmul@multiplier+1,c
  6198  001008  EC18  F01A         	call	___wmul	;wreg free
  6199  00100C  0EE9               	movlw	low __powers_
  6200  00100E  2424               	addwf	?___wmul,w,c
  6201  001010  6EF6               	movwf	tblptrl,c
  6202  001012  0E60               	movlw	high __powers_
  6203  001014  2025               	addwfc	?___wmul+1,w,c
  6204  001016  6EF7               	movwf	tblptrh,c
  6205  001018                     	if	0	;There are less than 3 active tblptr bytes
  6206  001018                     	endif
  6207  001018  0009               	tblrd		*+
  6208  00101A  CFF5 F02D          	movff	tablat,___ftmul@f2
  6209  00101E  0009               	tblrd		*+
  6210  001020  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  6211  001024  000A               	tblrd		*-
  6212  001026  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  6213  00102A  0E00               	movlw	0
  6214  00102C  6E1F               	movwf	___awdiv@divisor+1,c
  6215  00102E  0E64               	movlw	100
  6216  001030  6E1E               	movwf	___awdiv@divisor,c
  6217  001032  0100               	movlb	0	; () banked
  6218  001034  516C               	movf	scale@scl& (0+255),w,b
  6219  001036  6E1C               	movwf	___awdiv@dividend,c
  6220  001038  6A1D               	clrf	___awdiv@dividend+1,c
  6221  00103A  BE1C               	btfsc	___awdiv@dividend,7,c
  6222  00103C  061D               	decf	___awdiv@dividend+1,f,c
  6223  00103E  ECEF  F015         	call	___awdiv	;wreg free
  6224  001042  0E12               	movlw	18
  6225  001044  241C               	addwf	?___awdiv,w,c
  6226  001046  6E24               	movwf	___wmul@multiplier,c
  6227  001048  0E00               	movlw	0
  6228  00104A  201D               	addwfc	?___awdiv+1,w,c
  6229  00104C  6E25               	movwf	___wmul@multiplier+1,c
  6230  00104E  0E00               	movlw	0
  6231  001050  6E27               	movwf	___wmul@multiplicand+1,c
  6232  001052  0E03               	movlw	3
  6233  001054  6E26               	movwf	___wmul@multiplicand,c
  6234  001056  EC18  F01A         	call	___wmul	;wreg free
  6235  00105A  0EE9               	movlw	low __powers_
  6236  00105C  2424               	addwf	?___wmul,w,c
  6237  00105E  6EF6               	movwf	tblptrl,c
  6238  001060  0E60               	movlw	high __powers_
  6239  001062  2025               	addwfc	?___wmul+1,w,c
  6240  001064  6EF7               	movwf	tblptrh,c
  6241  001066                     	if	0	;There are less than 3 active tblptr bytes
  6242  001066                     	endif
  6243  001066  0009               	tblrd		*+
  6244  001068  CFF5 F02A          	movff	tablat,___ftmul@f1
  6245  00106C  0009               	tblrd		*+
  6246  00106E  CFF5 F02B          	movff	tablat,___ftmul@f1+1
  6247  001072  000A               	tblrd		*-
  6248  001074  CFF5 F02C          	movff	tablat,___ftmul@f1+2
  6249  001078  EC26  F010         	call	___ftmul	;wreg free
  6250  00107C  C02A  F069         	movff	?___ftmul,_scale$3377
  6251  001080  C02B  F06A         	movff	?___ftmul+1,_scale$3377+1
  6252  001084  C02C  F06B         	movff	?___ftmul+2,_scale$3377+2
  6253                           
  6254                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6255  001088  C069  F02A         	movff	_scale$3377,___ftmul@f1
  6256  00108C  C06A  F02B         	movff	_scale$3377+1,___ftmul@f1+1
  6257  001090  C06B  F02C         	movff	_scale$3377+2,___ftmul@f1+2
  6258  001094  0E00               	movlw	0
  6259  001096  6E27               	movwf	___wmul@multiplicand+1,c
  6260  001098  0E03               	movlw	3
  6261  00109A  6E26               	movwf	___wmul@multiplicand,c
  6262  00109C  0E00               	movlw	0
  6263  00109E  6E19               	movwf	___awmod@divisor+1,c
  6264  0010A0  0E0A               	movlw	10
  6265  0010A2  6E18               	movwf	___awmod@divisor,c
  6266  0010A4  0100               	movlb	0	; () banked
  6267  0010A6  516C               	movf	scale@scl& (0+255),w,b
  6268  0010A8  6E16               	movwf	___awmod@dividend,c
  6269  0010AA  6A17               	clrf	___awmod@dividend+1,c
  6270  0010AC  BE16               	btfsc	___awmod@dividend,7,c
  6271  0010AE  0617               	decf	___awmod@dividend+1,f,c
  6272  0010B0  EC20  F017         	call	___awmod	;wreg free
  6273  0010B4  C016  F024         	movff	?___awmod,___wmul@multiplier
  6274  0010B8  C017  F025         	movff	?___awmod+1,___wmul@multiplier+1
  6275  0010BC  EC18  F01A         	call	___wmul	;wreg free
  6276  0010C0  0EE9               	movlw	low __powers_
  6277  0010C2  2424               	addwf	?___wmul,w,c
  6278  0010C4  6EF6               	movwf	tblptrl,c
  6279  0010C6  0E60               	movlw	high __powers_
  6280  0010C8  2025               	addwfc	?___wmul+1,w,c
  6281  0010CA  6EF7               	movwf	tblptrh,c
  6282  0010CC                     	if	0	;There are less than 3 active tblptr bytes
  6283  0010CC                     	endif
  6284  0010CC  0009               	tblrd		*+
  6285  0010CE  CFF5 F02D          	movff	tablat,___ftmul@f2
  6286  0010D2  0009               	tblrd		*+
  6287  0010D4  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  6288  0010D8  000A               	tblrd		*-
  6289  0010DA  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  6290  0010DE  EC26  F010         	call	___ftmul	;wreg free
  6291  0010E2  C02A  F066         	movff	?___ftmul,?_scale
  6292  0010E6  C02B  F067         	movff	?___ftmul+1,?_scale+1
  6293  0010EA  C02C  F068         	movff	?___ftmul+2,?_scale+2
  6294  0010EE  0012               	return	
  6295  0010F0                     l10279:
  6296                           
  6297                           ;doprnt.c: 438: else if(scl > 10)
  6298  0010F0  0100               	movlb	0	; () banked
  6299  0010F2  516C               	movf	scale@scl& (0+255),w,b
  6300  0010F4  0A80               	xorlw	128
  6301  0010F6  0F75               	addlw	-139
  6302  0010F8  A0D8               	btfss	status,0,c
  6303  0010FA  D04F               	goto	l10285
  6304                           
  6305                           ; BSR set to: 0
  6306                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  6307  0010FC  0E00               	movlw	0
  6308  0010FE  6E1F               	movwf	___awdiv@divisor+1,c
  6309  001100  0E0A               	movlw	10
  6310  001102  6E1E               	movwf	___awdiv@divisor,c
  6311  001104  0100               	movlb	0	; () banked
  6312  001106  516C               	movf	scale@scl& (0+255),w,b
  6313  001108  6E1C               	movwf	___awdiv@dividend,c
  6314  00110A  6A1D               	clrf	___awdiv@dividend+1,c
  6315  00110C  BE1C               	btfsc	___awdiv@dividend,7,c
  6316  00110E  061D               	decf	___awdiv@dividend+1,f,c
  6317  001110  ECEF  F015         	call	___awdiv	;wreg free
  6318  001114  0E09               	movlw	9
  6319  001116  241C               	addwf	?___awdiv,w,c
  6320  001118  6E24               	movwf	___wmul@multiplier,c
  6321  00111A  0E00               	movlw	0
  6322  00111C  201D               	addwfc	?___awdiv+1,w,c
  6323  00111E  6E25               	movwf	___wmul@multiplier+1,c
  6324  001120  0E00               	movlw	0
  6325  001122  6E27               	movwf	___wmul@multiplicand+1,c
  6326  001124  0E03               	movlw	3
  6327  001126  6E26               	movwf	___wmul@multiplicand,c
  6328  001128  EC18  F01A         	call	___wmul	;wreg free
  6329  00112C  0EE9               	movlw	low __powers_
  6330  00112E  2424               	addwf	?___wmul,w,c
  6331  001130  6EF6               	movwf	tblptrl,c
  6332  001132  0E60               	movlw	high __powers_
  6333  001134  2025               	addwfc	?___wmul+1,w,c
  6334  001136  6EF7               	movwf	tblptrh,c
  6335  001138                     	if	0	;There are less than 3 active tblptr bytes
  6336  001138                     	endif
  6337  001138  0009               	tblrd		*+
  6338  00113A  CFF5 F02A          	movff	tablat,___ftmul@f1
  6339  00113E  0009               	tblrd		*+
  6340  001140  CFF5 F02B          	movff	tablat,___ftmul@f1+1
  6341  001144  000A               	tblrd		*-
  6342  001146  CFF5 F02C          	movff	tablat,___ftmul@f1+2
  6343  00114A  0E00               	movlw	0
  6344  00114C  6E27               	movwf	___wmul@multiplicand+1,c
  6345  00114E  0E03               	movlw	3
  6346  001150  6E26               	movwf	___wmul@multiplicand,c
  6347  001152  0E00               	movlw	0
  6348  001154  6E19               	movwf	___awmod@divisor+1,c
  6349  001156  0E0A               	movlw	10
  6350  001158  6E18               	movwf	___awmod@divisor,c
  6351  00115A  0100               	movlb	0	; () banked
  6352  00115C  516C               	movf	scale@scl& (0+255),w,b
  6353  00115E  6E16               	movwf	___awmod@dividend,c
  6354  001160  6A17               	clrf	___awmod@dividend+1,c
  6355  001162  BE16               	btfsc	___awmod@dividend,7,c
  6356  001164  0617               	decf	___awmod@dividend+1,f,c
  6357  001166  EC20  F017         	call	___awmod	;wreg free
  6358  00116A  C016  F024         	movff	?___awmod,___wmul@multiplier
  6359  00116E  C017  F025         	movff	?___awmod+1,___wmul@multiplier+1
  6360  001172  EC18  F01A         	call	___wmul	;wreg free
  6361  001176  0EE9               	movlw	low __powers_
  6362  001178  2424               	addwf	?___wmul,w,c
  6363  00117A  6EF6               	movwf	tblptrl,c
  6364  00117C  0E60               	movlw	high __powers_
  6365  00117E  2025               	addwfc	?___wmul+1,w,c
  6366  001180  6EF7               	movwf	tblptrh,c
  6367  001182                     	if	0	;There are less than 3 active tblptr bytes
  6368  001182                     	endif
  6369  001182  0009               	tblrd		*+
  6370  001184  CFF5 F02D          	movff	tablat,___ftmul@f2
  6371  001188  0009               	tblrd		*+
  6372  00118A  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  6373  00118E  000A               	tblrd		*-
  6374  001190  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  6375  001194  EC26  F010         	call	___ftmul	;wreg free
  6376  001198  D7A4               	goto	L7
  6377  00119A                     l10285:
  6378                           
  6379                           ;doprnt.c: 440: return _powers_[scl];
  6380  00119A  0100               	movlb	0	; () banked
  6381  00119C  516C               	movf	scale@scl& (0+255),w,b
  6382  00119E  0D03               	mullw	3
  6383  0011A0  0EE9               	movlw	low __powers_
  6384  0011A2  24F3               	addwf	prodl,w,c
  6385  0011A4  6EF6               	movwf	tblptrl,c
  6386  0011A6  0E60               	movlw	high __powers_
  6387  0011A8  20F4               	addwfc	prodh,w,c
  6388  0011AA  6EF7               	movwf	tblptrh,c
  6389  0011AC                     	if	0	;There are less than 3 active tblptr bytes
  6390  0011AC                     	endif
  6391  0011AC  0009               	tblrd		*+
  6392  0011AE  CFF5 F066          	movff	tablat,?_scale
  6393  0011B2  0009               	tblrd		*+
  6394  0011B4  CFF5 F067          	movff	tablat,?_scale+1
  6395  0011B8  000A               	tblrd		*-
  6396  0011BA  CFF5 F068          	movff	tablat,?_scale+2
  6397  0011BE  0012               	return	
  6398  0011C0                     __end_of_scale:
  6399                           	opt stack 0
  6400                           tosu	equ	0xFFF
  6401                           tosh	equ	0xFFE
  6402                           tosl	equ	0xFFD
  6403                           pclath	equ	0xFFA
  6404                           tblptru	equ	0xFF8
  6405                           tblptrh	equ	0xFF7
  6406                           tblptrl	equ	0xFF6
  6407                           tablat	equ	0xFF5
  6408                           prodh	equ	0xFF4
  6409                           prodl	equ	0xFF3
  6410                           intcon	equ	0xFF2
  6411                           intcon2	equ	0xFF1
  6412                           intcon3	equ	0xFF0
  6413                           postinc0	equ	0xFEE
  6414                           wreg	equ	0xFE8
  6415                           postinc1	equ	0xFE6
  6416                           postdec1	equ	0xFE5
  6417                           fsr1h	equ	0xFE2
  6418                           fsr1l	equ	0xFE1
  6419                           indf2	equ	0xFDF
  6420                           postinc2	equ	0xFDE
  6421                           postdec2	equ	0xFDD
  6422                           fsr2h	equ	0xFDA
  6423                           fsr2l	equ	0xFD9
  6424                           status	equ	0xFD8
  6425                           
  6426 ;; *************** function _fround *****************
  6427 ;; Defined at:
  6428 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  6429 ;; Parameters:    Size  Location     Type
  6430 ;;  prec            1    wreg     unsigned char 
  6431 ;; Auto vars:     Size  Location     Type
  6432 ;;  prec            1   15[BANK0 ] unsigned char 
  6433 ;; Return value:  Size  Location     Type
  6434 ;;                  3    6[BANK0 ] unsigned char 
  6435 ;; Registers used:
  6436 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6437 ;; Tracked objects:
  6438 ;;		On entry : 0/0
  6439 ;;		On exit  : 0/0
  6440 ;;		Unchanged: 0/0
  6441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6442 ;;      Params:         0       3       0       0       0       0       0       0       0
  6443 ;;      Locals:         0       7       0       0       0       0       0       0       0
  6444 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6445 ;;      Totals:         0      10       0       0       0       0       0       0       0
  6446 ;;Total ram usage:       10 bytes
  6447 ;; Hardware stack levels used:    1
  6448 ;; Hardware stack levels required when called:    4
  6449 ;; This function calls:
  6450 ;;		___awdiv
  6451 ;;		___awmod
  6452 ;;		___ftmul
  6453 ;;		___wmul
  6454 ;; This function is called by:
  6455 ;;		_sprintf
  6456 ;; This function uses a non-reentrant model
  6457 ;;
  6458                           
  6459                           	psect	text22
  6460  001428                     __ptext22:
  6461                           	opt stack 0
  6462  001428                     _fround:
  6463                           	opt stack 23
  6464                           
  6465                           ;incstack = 0
  6466                           ;fround@prec stored from wreg
  6467  001428  0100               	movlb	0	; () banked
  6468  00142A  6F6F               	movwf	fround@prec& (0+255),b
  6469                           
  6470                           ;doprnt.c: 413: if(prec>=110)
  6471  00142C  0E6D               	movlw	109
  6472  00142E  0100               	movlb	0	; () banked
  6473  001430  656F               	cpfsgt	fround@prec& (0+255),b
  6474  001432  D09F               	goto	l10239
  6475                           
  6476                           ; BSR set to: 0
  6477                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6478  001434  0E00               	movlw	0
  6479  001436  6E27               	movwf	___wmul@multiplicand+1,c
  6480  001438  0E03               	movlw	3
  6481  00143A  6E26               	movwf	___wmul@multiplicand,c
  6482  00143C  0E00               	movlw	0
  6483  00143E  6E1F               	movwf	___awdiv@divisor+1,c
  6484  001440  0E0A               	movlw	10
  6485  001442  6E1E               	movwf	___awdiv@divisor,c
  6486  001444  0E00               	movlw	0
  6487  001446  6E19               	movwf	___awmod@divisor+1,c
  6488  001448  0E64               	movlw	100
  6489  00144A  6E18               	movwf	___awmod@divisor,c
  6490  00144C  C06F  F016         	movff	fround@prec,___awmod@dividend
  6491  001450  6A17               	clrf	___awmod@dividend+1,c
  6492  001452  EC20  F017         	call	___awmod	;wreg free
  6493  001456  C016  F01C         	movff	?___awmod,___awdiv@dividend
  6494  00145A  C017  F01D         	movff	?___awmod+1,___awdiv@dividend+1
  6495  00145E  ECEF  F015         	call	___awdiv	;wreg free
  6496  001462  0E09               	movlw	9
  6497  001464  241C               	addwf	?___awdiv,w,c
  6498  001466  6E24               	movwf	___wmul@multiplier,c
  6499  001468  0E00               	movlw	0
  6500  00146A  201D               	addwfc	?___awdiv+1,w,c
  6501  00146C  6E25               	movwf	___wmul@multiplier+1,c
  6502  00146E  EC18  F01A         	call	___wmul	;wreg free
  6503  001472  0E10               	movlw	low __npowers_
  6504  001474  2424               	addwf	?___wmul,w,c
  6505  001476  6EF6               	movwf	tblptrl,c
  6506  001478  0E61               	movlw	high __npowers_
  6507  00147A  2025               	addwfc	?___wmul+1,w,c
  6508  00147C  6EF7               	movwf	tblptrh,c
  6509  00147E                     	if	0	;There are less than 3 active tblptr bytes
  6510  00147E                     	endif
  6511  00147E  0009               	tblrd		*+
  6512  001480  CFF5 F02D          	movff	tablat,___ftmul@f2
  6513  001484  0009               	tblrd		*+
  6514  001486  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  6515  00148A  000A               	tblrd		*-
  6516  00148C  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  6517  001490  0E00               	movlw	0
  6518  001492  6E1F               	movwf	___awdiv@divisor+1,c
  6519  001494  0E64               	movlw	100
  6520  001496  6E1E               	movwf	___awdiv@divisor,c
  6521  001498  C06F  F01C         	movff	fround@prec,___awdiv@dividend
  6522  00149C  6A1D               	clrf	___awdiv@dividend+1,c
  6523  00149E  ECEF  F015         	call	___awdiv	;wreg free
  6524  0014A2  0E12               	movlw	18
  6525  0014A4  241C               	addwf	?___awdiv,w,c
  6526  0014A6  6E24               	movwf	___wmul@multiplier,c
  6527  0014A8  0E00               	movlw	0
  6528  0014AA  201D               	addwfc	?___awdiv+1,w,c
  6529  0014AC  6E25               	movwf	___wmul@multiplier+1,c
  6530  0014AE  0E00               	movlw	0
  6531  0014B0  6E27               	movwf	___wmul@multiplicand+1,c
  6532  0014B2  0E03               	movlw	3
  6533  0014B4  6E26               	movwf	___wmul@multiplicand,c
  6534  0014B6  EC18  F01A         	call	___wmul	;wreg free
  6535  0014BA  0E10               	movlw	low __npowers_
  6536  0014BC  2424               	addwf	?___wmul,w,c
  6537  0014BE  6EF6               	movwf	tblptrl,c
  6538  0014C0  0E61               	movlw	high __npowers_
  6539  0014C2  2025               	addwfc	?___wmul+1,w,c
  6540  0014C4  6EF7               	movwf	tblptrh,c
  6541  0014C6                     	if	0	;There are less than 3 active tblptr bytes
  6542  0014C6                     	endif
  6543  0014C6  0009               	tblrd		*+
  6544  0014C8  CFF5 F02A          	movff	tablat,___ftmul@f1
  6545  0014CC  0009               	tblrd		*+
  6546  0014CE  CFF5 F02B          	movff	tablat,___ftmul@f1+1
  6547  0014D2  000A               	tblrd		*-
  6548  0014D4  CFF5 F02C          	movff	tablat,___ftmul@f1+2
  6549  0014D8  EC26  F010         	call	___ftmul	;wreg free
  6550  0014DC  C02A  F06C         	movff	?___ftmul,_fround$3375
  6551  0014E0  C02B  F06D         	movff	?___ftmul+1,_fround$3375+1
  6552  0014E4  C02C  F06E         	movff	?___ftmul+2,_fround$3375+2
  6553                           
  6554                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6555  0014E8  0E00               	movlw	0
  6556  0014EA  6E27               	movwf	___wmul@multiplicand+1,c
  6557  0014EC  0E03               	movlw	3
  6558  0014EE  6E26               	movwf	___wmul@multiplicand,c
  6559  0014F0  0E00               	movlw	0
  6560  0014F2  6E19               	movwf	___awmod@divisor+1,c
  6561  0014F4  0E0A               	movlw	10
  6562  0014F6  6E18               	movwf	___awmod@divisor,c
  6563  0014F8  C06F  F016         	movff	fround@prec,___awmod@dividend
  6564  0014FC  6A17               	clrf	___awmod@dividend+1,c
  6565  0014FE  EC20  F017         	call	___awmod	;wreg free
  6566  001502  C016  F024         	movff	?___awmod,___wmul@multiplier
  6567  001506  C017  F025         	movff	?___awmod+1,___wmul@multiplier+1
  6568  00150A  EC18  F01A         	call	___wmul	;wreg free
  6569  00150E  0E10               	movlw	low __npowers_
  6570  001510  2424               	addwf	?___wmul,w,c
  6571  001512  6EF6               	movwf	tblptrl,c
  6572  001514  0E61               	movlw	high __npowers_
  6573  001516  2025               	addwfc	?___wmul+1,w,c
  6574  001518  6EF7               	movwf	tblptrh,c
  6575  00151A                     	if	0	;There are less than 3 active tblptr bytes
  6576  00151A                     	endif
  6577  00151A  0009               	tblrd		*+
  6578  00151C  CFF5 F02D          	movff	tablat,___ftmul@f2
  6579  001520  0009               	tblrd		*+
  6580  001522  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  6581  001526  000A               	tblrd		*-
  6582  001528  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  6583  00152C  C06C  F02A         	movff	_fround$3375,___ftmul@f1
  6584  001530  C06D  F02B         	movff	_fround$3375+1,___ftmul@f1+1
  6585  001534  C06E  F02C         	movff	_fround$3375+2,___ftmul@f1+2
  6586  001538  EC26  F010         	call	___ftmul	;wreg free
  6587  00153C  C02A  F069         	movff	?___ftmul,_fround$3376
  6588  001540  C02B  F06A         	movff	?___ftmul+1,_fround$3376+1
  6589  001544  C02C  F06B         	movff	?___ftmul+2,_fround$3376+2
  6590                           
  6591                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6592  001548  C069  F02A         	movff	_fround$3376,___ftmul@f1
  6593  00154C  C06A  F02B         	movff	_fround$3376+1,___ftmul@f1+1
  6594  001550  C06B  F02C         	movff	_fround$3376+2,___ftmul@f1+2
  6595  001554  0E00               	movlw	0
  6596  001556  6E2D               	movwf	___ftmul@f2,c
  6597  001558  0E00               	movlw	0
  6598  00155A  6E2E               	movwf	___ftmul@f2+1,c
  6599  00155C  0E3F               	movlw	63
  6600  00155E  6E2F               	movwf	___ftmul@f2+2,c
  6601  001560  EC26  F010         	call	___ftmul	;wreg free
  6602  001564  C02A  F066         	movff	?___ftmul,?_fround
  6603  001568  C02B  F067         	movff	?___ftmul+1,?_fround+1
  6604  00156C  C02C  F068         	movff	?___ftmul+2,?_fround+2
  6605  001570  0012               	return	
  6606  001572                     l10239:
  6607                           
  6608                           ;doprnt.c: 415: else if(prec > 10)
  6609  001572  0E0A               	movlw	10
  6610  001574  0100               	movlb	0	; () banked
  6611  001576  656F               	cpfsgt	fround@prec& (0+255),b
  6612  001578  D05D               	goto	l10247
  6613                           
  6614                           ; BSR set to: 0
  6615                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6616  00157A  0E00               	movlw	0
  6617  00157C  6E27               	movwf	___wmul@multiplicand+1,c
  6618  00157E  0E03               	movlw	3
  6619  001580  6E26               	movwf	___wmul@multiplicand,c
  6620  001582  0E00               	movlw	0
  6621  001584  6E19               	movwf	___awmod@divisor+1,c
  6622  001586  0E0A               	movlw	10
  6623  001588  6E18               	movwf	___awmod@divisor,c
  6624  00158A  C06F  F016         	movff	fround@prec,___awmod@dividend
  6625  00158E  6A17               	clrf	___awmod@dividend+1,c
  6626  001590  EC20  F017         	call	___awmod	;wreg free
  6627  001594  C016  F024         	movff	?___awmod,___wmul@multiplier
  6628  001598  C017  F025         	movff	?___awmod+1,___wmul@multiplier+1
  6629  00159C  EC18  F01A         	call	___wmul	;wreg free
  6630  0015A0  0E10               	movlw	low __npowers_
  6631  0015A2  2424               	addwf	?___wmul,w,c
  6632  0015A4  6EF6               	movwf	tblptrl,c
  6633  0015A6  0E61               	movlw	high __npowers_
  6634  0015A8  2025               	addwfc	?___wmul+1,w,c
  6635  0015AA  6EF7               	movwf	tblptrh,c
  6636  0015AC                     	if	0	;There are less than 3 active tblptr bytes
  6637  0015AC                     	endif
  6638  0015AC  0009               	tblrd		*+
  6639  0015AE  CFF5 F02D          	movff	tablat,___ftmul@f2
  6640  0015B2  0009               	tblrd		*+
  6641  0015B4  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  6642  0015B8  000A               	tblrd		*-
  6643  0015BA  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  6644  0015BE  0E00               	movlw	0
  6645  0015C0  6E1F               	movwf	___awdiv@divisor+1,c
  6646  0015C2  0E0A               	movlw	10
  6647  0015C4  6E1E               	movwf	___awdiv@divisor,c
  6648  0015C6  C06F  F01C         	movff	fround@prec,___awdiv@dividend
  6649  0015CA  6A1D               	clrf	___awdiv@dividend+1,c
  6650  0015CC  ECEF  F015         	call	___awdiv	;wreg free
  6651  0015D0  0E09               	movlw	9
  6652  0015D2  241C               	addwf	?___awdiv,w,c
  6653  0015D4  6E24               	movwf	___wmul@multiplier,c
  6654  0015D6  0E00               	movlw	0
  6655  0015D8  201D               	addwfc	?___awdiv+1,w,c
  6656  0015DA  6E25               	movwf	___wmul@multiplier+1,c
  6657  0015DC  0E00               	movlw	0
  6658  0015DE  6E27               	movwf	___wmul@multiplicand+1,c
  6659  0015E0  0E03               	movlw	3
  6660  0015E2  6E26               	movwf	___wmul@multiplicand,c
  6661  0015E4  EC18  F01A         	call	___wmul	;wreg free
  6662  0015E8  0E10               	movlw	low __npowers_
  6663  0015EA  2424               	addwf	?___wmul,w,c
  6664  0015EC  6EF6               	movwf	tblptrl,c
  6665  0015EE  0E61               	movlw	high __npowers_
  6666  0015F0  2025               	addwfc	?___wmul+1,w,c
  6667  0015F2  6EF7               	movwf	tblptrh,c
  6668  0015F4                     	if	0	;There are less than 3 active tblptr bytes
  6669  0015F4                     	endif
  6670  0015F4  0009               	tblrd		*+
  6671  0015F6  CFF5 F02A          	movff	tablat,___ftmul@f1
  6672  0015FA  0009               	tblrd		*+
  6673  0015FC  CFF5 F02B          	movff	tablat,___ftmul@f1+1
  6674  001600  000A               	tblrd		*-
  6675  001602  CFF5 F02C          	movff	tablat,___ftmul@f1+2
  6676  001606  EC26  F010         	call	___ftmul	;wreg free
  6677  00160A  C02A  F06C         	movff	?___ftmul,_fround$3375
  6678  00160E  C02B  F06D         	movff	?___ftmul+1,_fround$3375+1
  6679  001612  C02C  F06E         	movff	?___ftmul+2,_fround$3375+2
  6680                           
  6681                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6682  001616  C06C  F02A         	movff	_fround$3375,___ftmul@f1
  6683  00161A  C06D  F02B         	movff	_fround$3375+1,___ftmul@f1+1
  6684  00161E  C06E  F02C         	movff	_fround$3375+2,___ftmul@f1+2
  6685  001622  0E00               	movlw	0
  6686  001624  6E2D               	movwf	___ftmul@f2,c
  6687  001626  0E00               	movlw	0
  6688  001628  6E2E               	movwf	___ftmul@f2+1,c
  6689  00162A  0E3F               	movlw	63
  6690  00162C  6E2F               	movwf	___ftmul@f2+2,c
  6691  00162E  EC26  F010         	call	___ftmul	;wreg free
  6692  001632  D798               	goto	L8
  6693  001634                     l10247:
  6694                           
  6695                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  6696  001634  0100               	movlb	0	; () banked
  6697  001636  516F               	movf	fround@prec& (0+255),w,b
  6698  001638  0D03               	mullw	3
  6699  00163A  0E10               	movlw	low __npowers_
  6700  00163C  24F3               	addwf	prodl,w,c
  6701  00163E  6EF6               	movwf	tblptrl,c
  6702  001640  0E61               	movlw	high __npowers_
  6703  001642  20F4               	addwfc	prodh,w,c
  6704  001644  6EF7               	movwf	tblptrh,c
  6705  001646                     	if	0	;There are less than 3 active tblptr bytes
  6706  001646                     	endif
  6707  001646  0009               	tblrd		*+
  6708  001648  CFF5 F02A          	movff	tablat,___ftmul@f1
  6709  00164C  0009               	tblrd		*+
  6710  00164E  CFF5 F02B          	movff	tablat,___ftmul@f1+1
  6711  001652  000A               	tblrd		*-
  6712  001654  CFF5 F02C          	movff	tablat,___ftmul@f1+2
  6713  001658  0E00               	movlw	0
  6714  00165A  6E2D               	movwf	___ftmul@f2,c
  6715  00165C  0E00               	movlw	0
  6716  00165E  6E2E               	movwf	___ftmul@f2+1,c
  6717  001660  0E3F               	movlw	63
  6718  001662  6E2F               	movwf	___ftmul@f2+2,c
  6719  001664  EC26  F010         	call	___ftmul	;wreg free
  6720  001668  C02A  F066         	movff	?___ftmul,?_fround
  6721  00166C  C02B  F067         	movff	?___ftmul+1,?_fround+1
  6722  001670  C02C  F068         	movff	?___ftmul+2,?_fround+2
  6723  001674  0012               	return	
  6724  001676                     __end_of_fround:
  6725                           	opt stack 0
  6726                           tosu	equ	0xFFF
  6727                           tosh	equ	0xFFE
  6728                           tosl	equ	0xFFD
  6729                           pclath	equ	0xFFA
  6730                           tblptru	equ	0xFF8
  6731                           tblptrh	equ	0xFF7
  6732                           tblptrl	equ	0xFF6
  6733                           tablat	equ	0xFF5
  6734                           prodh	equ	0xFF4
  6735                           prodl	equ	0xFF3
  6736                           intcon	equ	0xFF2
  6737                           intcon2	equ	0xFF1
  6738                           intcon3	equ	0xFF0
  6739                           postinc0	equ	0xFEE
  6740                           wreg	equ	0xFE8
  6741                           postinc1	equ	0xFE6
  6742                           postdec1	equ	0xFE5
  6743                           fsr1h	equ	0xFE2
  6744                           fsr1l	equ	0xFE1
  6745                           indf2	equ	0xFDF
  6746                           postinc2	equ	0xFDE
  6747                           postdec2	equ	0xFDD
  6748                           fsr2h	equ	0xFDA
  6749                           fsr2l	equ	0xFD9
  6750                           status	equ	0xFD8
  6751                           
  6752 ;; *************** function ___wmul *****************
  6753 ;; Defined at:
  6754 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  6755 ;; Parameters:    Size  Location     Type
  6756 ;;  multiplier      2   35[COMRAM] unsigned int 
  6757 ;;  multiplicand    2   37[COMRAM] unsigned int 
  6758 ;; Auto vars:     Size  Location     Type
  6759 ;;  product         2   39[COMRAM] unsigned int 
  6760 ;; Return value:  Size  Location     Type
  6761 ;;                  2   35[COMRAM] unsigned int 
  6762 ;; Registers used:
  6763 ;;		wreg, status,2, status,0, prodl, prodh
  6764 ;; Tracked objects:
  6765 ;;		On entry : 0/0
  6766 ;;		On exit  : 0/0
  6767 ;;		Unchanged: 0/0
  6768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6769 ;;      Params:         4       0       0       0       0       0       0       0       0
  6770 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6771 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6772 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6773 ;;Total ram usage:        6 bytes
  6774 ;; Hardware stack levels used:    1
  6775 ;; Hardware stack levels required when called:    2
  6776 ;; This function calls:
  6777 ;;		Nothing
  6778 ;; This function is called by:
  6779 ;;		_fround
  6780 ;;		_scale
  6781 ;;		_sprintf
  6782 ;; This function uses a non-reentrant model
  6783 ;;
  6784                           
  6785                           	psect	text23
  6786  003430                     __ptext23:
  6787                           	opt stack 0
  6788  003430                     ___wmul:
  6789                           	opt stack 24
  6790                           
  6791                           ;incstack = 0
  6792  003430  5024               	movf	___wmul@multiplier,w,c
  6793  003432  0226               	mulwf	___wmul@multiplicand,c
  6794  003434  CFF3 F028          	movff	prodl,___wmul@product
  6795  003438  CFF4 F029          	movff	prodh,___wmul@product+1
  6796  00343C  5024               	movf	___wmul@multiplier,w,c
  6797  00343E  0227               	mulwf	___wmul@multiplicand+1,c
  6798  003440  50F3               	movf	prodl,w,c
  6799  003442  2629               	addwf	___wmul@product+1,f,c
  6800  003444  5025               	movf	___wmul@multiplier+1,w,c
  6801  003446  0226               	mulwf	___wmul@multiplicand,c
  6802  003448  50F3               	movf	prodl,w,c
  6803  00344A  2629               	addwf	___wmul@product+1,f,c
  6804  00344C  C028  F024         	movff	___wmul@product,?___wmul
  6805  003450  C029  F025         	movff	___wmul@product+1,?___wmul+1
  6806  003454  0012               	return	
  6807  003456                     __end_of___wmul:
  6808                           	opt stack 0
  6809                           tosu	equ	0xFFF
  6810                           tosh	equ	0xFFE
  6811                           tosl	equ	0xFFD
  6812                           pclath	equ	0xFFA
  6813                           tblptru	equ	0xFF8
  6814                           tblptrh	equ	0xFF7
  6815                           tblptrl	equ	0xFF6
  6816                           tablat	equ	0xFF5
  6817                           prodh	equ	0xFF4
  6818                           prodl	equ	0xFF3
  6819                           intcon	equ	0xFF2
  6820                           intcon2	equ	0xFF1
  6821                           intcon3	equ	0xFF0
  6822                           postinc0	equ	0xFEE
  6823                           wreg	equ	0xFE8
  6824                           postinc1	equ	0xFE6
  6825                           postdec1	equ	0xFE5
  6826                           fsr1h	equ	0xFE2
  6827                           fsr1l	equ	0xFE1
  6828                           indf2	equ	0xFDF
  6829                           postinc2	equ	0xFDE
  6830                           postdec2	equ	0xFDD
  6831                           fsr2h	equ	0xFDA
  6832                           fsr2l	equ	0xFD9
  6833                           status	equ	0xFD8
  6834                           
  6835 ;; *************** function ___awmod *****************
  6836 ;; Defined at:
  6837 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
  6838 ;; Parameters:    Size  Location     Type
  6839 ;;  dividend        2   21[COMRAM] int 
  6840 ;;  divisor         2   23[COMRAM] int 
  6841 ;; Auto vars:     Size  Location     Type
  6842 ;;  sign            1   26[COMRAM] unsigned char 
  6843 ;;  counter         1   25[COMRAM] unsigned char 
  6844 ;; Return value:  Size  Location     Type
  6845 ;;                  2   21[COMRAM] int 
  6846 ;; Registers used:
  6847 ;;		wreg, status,2, status,0
  6848 ;; Tracked objects:
  6849 ;;		On entry : 0/0
  6850 ;;		On exit  : 0/0
  6851 ;;		Unchanged: 0/0
  6852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6853 ;;      Params:         4       0       0       0       0       0       0       0       0
  6854 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6855 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6856 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6857 ;;Total ram usage:        6 bytes
  6858 ;; Hardware stack levels used:    1
  6859 ;; Hardware stack levels required when called:    2
  6860 ;; This function calls:
  6861 ;;		Nothing
  6862 ;; This function is called by:
  6863 ;;		_fround
  6864 ;;		_scale
  6865 ;; This function uses a non-reentrant model
  6866 ;;
  6867                           
  6868                           	psect	text24
  6869  002E40                     __ptext24:
  6870                           	opt stack 0
  6871  002E40                     ___awmod:
  6872                           	opt stack 24
  6873                           
  6874                           ;incstack = 0
  6875  002E40  0E00               	movlw	0
  6876  002E42  6E1B               	movwf	___awmod@sign,c
  6877  002E44  AE17               	btfss	___awmod@dividend+1,7,c
  6878  002E46  D006               	goto	l9893
  6879  002E48  6C16               	negf	___awmod@dividend,c
  6880  002E4A  1E17               	comf	___awmod@dividend+1,f,c
  6881  002E4C  B0D8               	btfsc	status,0,c
  6882  002E4E  2A17               	incf	___awmod@dividend+1,f,c
  6883  002E50  0E01               	movlw	1
  6884  002E52  6E1B               	movwf	___awmod@sign,c
  6885  002E54                     l9893:
  6886  002E54  AE19               	btfss	___awmod@divisor+1,7,c
  6887  002E56  D004               	goto	l9897
  6888  002E58  6C18               	negf	___awmod@divisor,c
  6889  002E5A  1E19               	comf	___awmod@divisor+1,f,c
  6890  002E5C  B0D8               	btfsc	status,0,c
  6891  002E5E  2A19               	incf	___awmod@divisor+1,f,c
  6892  002E60                     l9897:
  6893  002E60  5018               	movf	___awmod@divisor,w,c
  6894  002E62  1019               	iorwf	___awmod@divisor+1,w,c
  6895  002E64  B4D8               	btfsc	status,2,c
  6896  002E66  D018               	goto	l9913
  6897  002E68  0E01               	movlw	1
  6898  002E6A  6E1A               	movwf	___awmod@counter,c
  6899  002E6C  D004               	goto	l9903
  6900  002E6E                     l9901:
  6901  002E6E  90D8               	bcf	status,0,c
  6902  002E70  3618               	rlcf	___awmod@divisor,f,c
  6903  002E72  3619               	rlcf	___awmod@divisor+1,f,c
  6904  002E74  2A1A               	incf	___awmod@counter,f,c
  6905  002E76                     l9903:
  6906  002E76  AE19               	btfss	___awmod@divisor+1,7,c
  6907  002E78  D7FA               	goto	l9901
  6908  002E7A                     l9905:
  6909  002E7A  5018               	movf	___awmod@divisor,w,c
  6910  002E7C  5C16               	subwf	___awmod@dividend,w,c
  6911  002E7E  5019               	movf	___awmod@divisor+1,w,c
  6912  002E80  5817               	subwfb	___awmod@dividend+1,w,c
  6913  002E82  A0D8               	btfss	status,0,c
  6914  002E84  D004               	goto	l9909
  6915  002E86  5018               	movf	___awmod@divisor,w,c
  6916  002E88  5E16               	subwf	___awmod@dividend,f,c
  6917  002E8A  5019               	movf	___awmod@divisor+1,w,c
  6918  002E8C  5A17               	subwfb	___awmod@dividend+1,f,c
  6919  002E8E                     l9909:
  6920  002E8E  90D8               	bcf	status,0,c
  6921  002E90  3219               	rrcf	___awmod@divisor+1,f,c
  6922  002E92  3218               	rrcf	___awmod@divisor,f,c
  6923  002E94  2E1A               	decfsz	___awmod@counter,f,c
  6924  002E96  D7F1               	goto	l9905
  6925  002E98                     l9913:
  6926  002E98  501B               	movf	___awmod@sign,w,c
  6927  002E9A  B4D8               	btfsc	status,2,c
  6928  002E9C  D004               	goto	l9917
  6929  002E9E  6C16               	negf	___awmod@dividend,c
  6930  002EA0  1E17               	comf	___awmod@dividend+1,f,c
  6931  002EA2  B0D8               	btfsc	status,0,c
  6932  002EA4  2A17               	incf	___awmod@dividend+1,f,c
  6933  002EA6                     l9917:
  6934  002EA6  C016  F016         	movff	___awmod@dividend,?___awmod
  6935  002EAA  C017  F017         	movff	___awmod@dividend+1,?___awmod+1
  6936  002EAE  0012               	return	
  6937  002EB0                     __end_of___awmod:
  6938                           	opt stack 0
  6939                           tosu	equ	0xFFF
  6940                           tosh	equ	0xFFE
  6941                           tosl	equ	0xFFD
  6942                           pclath	equ	0xFFA
  6943                           tblptru	equ	0xFF8
  6944                           tblptrh	equ	0xFF7
  6945                           tblptrl	equ	0xFF6
  6946                           tablat	equ	0xFF5
  6947                           prodh	equ	0xFF4
  6948                           prodl	equ	0xFF3
  6949                           intcon	equ	0xFF2
  6950                           intcon2	equ	0xFF1
  6951                           intcon3	equ	0xFF0
  6952                           postinc0	equ	0xFEE
  6953                           wreg	equ	0xFE8
  6954                           postinc1	equ	0xFE6
  6955                           postdec1	equ	0xFE5
  6956                           fsr1h	equ	0xFE2
  6957                           fsr1l	equ	0xFE1
  6958                           indf2	equ	0xFDF
  6959                           postinc2	equ	0xFDE
  6960                           postdec2	equ	0xFDD
  6961                           fsr2h	equ	0xFDA
  6962                           fsr2l	equ	0xFD9
  6963                           status	equ	0xFD8
  6964                           
  6965 ;; *************** function ___awdiv *****************
  6966 ;; Defined at:
  6967 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  6968 ;; Parameters:    Size  Location     Type
  6969 ;;  dividend        2   27[COMRAM] int 
  6970 ;;  divisor         2   29[COMRAM] int 
  6971 ;; Auto vars:     Size  Location     Type
  6972 ;;  quotient        2   33[COMRAM] int 
  6973 ;;  sign            1   32[COMRAM] unsigned char 
  6974 ;;  counter         1   31[COMRAM] unsigned char 
  6975 ;; Return value:  Size  Location     Type
  6976 ;;                  2   27[COMRAM] int 
  6977 ;; Registers used:
  6978 ;;		wreg, status,2, status,0
  6979 ;; Tracked objects:
  6980 ;;		On entry : 0/0
  6981 ;;		On exit  : 0/0
  6982 ;;		Unchanged: 0/0
  6983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6984 ;;      Params:         4       0       0       0       0       0       0       0       0
  6985 ;;      Locals:         4       0       0       0       0       0       0       0       0
  6986 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6987 ;;      Totals:         8       0       0       0       0       0       0       0       0
  6988 ;;Total ram usage:        8 bytes
  6989 ;; Hardware stack levels used:    1
  6990 ;; Hardware stack levels required when called:    2
  6991 ;; This function calls:
  6992 ;;		Nothing
  6993 ;; This function is called by:
  6994 ;;		_fround
  6995 ;;		_scale
  6996 ;;		_sprintf
  6997 ;; This function uses a non-reentrant model
  6998 ;;
  6999                           
  7000                           	psect	text25
  7001  002BDE                     __ptext25:
  7002                           	opt stack 0
  7003  002BDE                     ___awdiv:
  7004                           	opt stack 24
  7005                           
  7006                           ;incstack = 0
  7007  002BDE  0E00               	movlw	0
  7008  002BE0  6E21               	movwf	___awdiv@sign,c
  7009  002BE2  AE1F               	btfss	___awdiv@divisor+1,7,c
  7010  002BE4  D006               	goto	l9849
  7011  002BE6  6C1E               	negf	___awdiv@divisor,c
  7012  002BE8  1E1F               	comf	___awdiv@divisor+1,f,c
  7013  002BEA  B0D8               	btfsc	status,0,c
  7014  002BEC  2A1F               	incf	___awdiv@divisor+1,f,c
  7015  002BEE  0E01               	movlw	1
  7016  002BF0  6E21               	movwf	___awdiv@sign,c
  7017  002BF2                     l9849:
  7018  002BF2  AE1D               	btfss	___awdiv@dividend+1,7,c
  7019  002BF4  D006               	goto	l9855
  7020  002BF6  6C1C               	negf	___awdiv@dividend,c
  7021  002BF8  1E1D               	comf	___awdiv@dividend+1,f,c
  7022  002BFA  B0D8               	btfsc	status,0,c
  7023  002BFC  2A1D               	incf	___awdiv@dividend+1,f,c
  7024  002BFE  0E01               	movlw	1
  7025  002C00  1A21               	xorwf	___awdiv@sign,f,c
  7026  002C02                     l9855:
  7027  002C02  0E00               	movlw	0
  7028  002C04  6E23               	movwf	___awdiv@quotient+1,c
  7029  002C06  0E00               	movlw	0
  7030  002C08  6E22               	movwf	___awdiv@quotient,c
  7031  002C0A  501E               	movf	___awdiv@divisor,w,c
  7032  002C0C  101F               	iorwf	___awdiv@divisor+1,w,c
  7033  002C0E  B4D8               	btfsc	status,2,c
  7034  002C10  D01C               	goto	l9877
  7035  002C12  0E01               	movlw	1
  7036  002C14  6E20               	movwf	___awdiv@counter,c
  7037  002C16  D004               	goto	l9863
  7038  002C18                     l9861:
  7039  002C18  90D8               	bcf	status,0,c
  7040  002C1A  361E               	rlcf	___awdiv@divisor,f,c
  7041  002C1C  361F               	rlcf	___awdiv@divisor+1,f,c
  7042  002C1E  2A20               	incf	___awdiv@counter,f,c
  7043  002C20                     l9863:
  7044  002C20  AE1F               	btfss	___awdiv@divisor+1,7,c
  7045  002C22  D7FA               	goto	l9861
  7046  002C24                     l9865:
  7047  002C24  90D8               	bcf	status,0,c
  7048  002C26  3622               	rlcf	___awdiv@quotient,f,c
  7049  002C28  3623               	rlcf	___awdiv@quotient+1,f,c
  7050  002C2A  501E               	movf	___awdiv@divisor,w,c
  7051  002C2C  5C1C               	subwf	___awdiv@dividend,w,c
  7052  002C2E  501F               	movf	___awdiv@divisor+1,w,c
  7053  002C30  581D               	subwfb	___awdiv@dividend+1,w,c
  7054  002C32  A0D8               	btfss	status,0,c
  7055  002C34  D005               	goto	l9873
  7056  002C36  501E               	movf	___awdiv@divisor,w,c
  7057  002C38  5E1C               	subwf	___awdiv@dividend,f,c
  7058  002C3A  501F               	movf	___awdiv@divisor+1,w,c
  7059  002C3C  5A1D               	subwfb	___awdiv@dividend+1,f,c
  7060  002C3E  8022               	bsf	___awdiv@quotient,0,c
  7061  002C40                     l9873:
  7062  002C40  90D8               	bcf	status,0,c
  7063  002C42  321F               	rrcf	___awdiv@divisor+1,f,c
  7064  002C44  321E               	rrcf	___awdiv@divisor,f,c
  7065  002C46  2E20               	decfsz	___awdiv@counter,f,c
  7066  002C48  D7ED               	goto	l9865
  7067  002C4A                     l9877:
  7068  002C4A  5021               	movf	___awdiv@sign,w,c
  7069  002C4C  B4D8               	btfsc	status,2,c
  7070  002C4E  D004               	goto	l9881
  7071  002C50  6C22               	negf	___awdiv@quotient,c
  7072  002C52  1E23               	comf	___awdiv@quotient+1,f,c
  7073  002C54  B0D8               	btfsc	status,0,c
  7074  002C56  2A23               	incf	___awdiv@quotient+1,f,c
  7075  002C58                     l9881:
  7076  002C58  C022  F01C         	movff	___awdiv@quotient,?___awdiv
  7077  002C5C  C023  F01D         	movff	___awdiv@quotient+1,?___awdiv+1
  7078  002C60  0012               	return	
  7079  002C62                     __end_of___awdiv:
  7080                           	opt stack 0
  7081                           tosu	equ	0xFFF
  7082                           tosh	equ	0xFFE
  7083                           tosl	equ	0xFFD
  7084                           pclath	equ	0xFFA
  7085                           tblptru	equ	0xFF8
  7086                           tblptrh	equ	0xFF7
  7087                           tblptrl	equ	0xFF6
  7088                           tablat	equ	0xFF5
  7089                           prodh	equ	0xFF4
  7090                           prodl	equ	0xFF3
  7091                           intcon	equ	0xFF2
  7092                           intcon2	equ	0xFF1
  7093                           intcon3	equ	0xFF0
  7094                           postinc0	equ	0xFEE
  7095                           wreg	equ	0xFE8
  7096                           postinc1	equ	0xFE6
  7097                           postdec1	equ	0xFE5
  7098                           fsr1h	equ	0xFE2
  7099                           fsr1l	equ	0xFE1
  7100                           indf2	equ	0xFDF
  7101                           postinc2	equ	0xFDE
  7102                           postdec2	equ	0xFDD
  7103                           fsr2h	equ	0xFDA
  7104                           fsr2l	equ	0xFD9
  7105                           status	equ	0xFD8
  7106                           
  7107 ;; *************** function __tdiv_to_l_ *****************
  7108 ;; Defined at:
  7109 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdivl.c"
  7110 ;; Parameters:    Size  Location     Type
  7111 ;;  f1              3   21[COMRAM] float 
  7112 ;;  f2              3   24[COMRAM] float 
  7113 ;; Auto vars:     Size  Location     Type
  7114 ;;  quot            4   30[COMRAM] unsigned long 
  7115 ;;  exp1            1   35[COMRAM] unsigned char 
  7116 ;;  cntr            1   34[COMRAM] unsigned char 
  7117 ;; Return value:  Size  Location     Type
  7118 ;;                  4   21[COMRAM] unsigned long 
  7119 ;; Registers used:
  7120 ;;		wreg, status,2, status,0
  7121 ;; Tracked objects:
  7122 ;;		On entry : 0/0
  7123 ;;		On exit  : 0/0
  7124 ;;		Unchanged: 0/0
  7125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7126 ;;      Params:         6       0       0       0       0       0       0       0       0
  7127 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7128 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7129 ;;      Totals:        15       0       0       0       0       0       0       0       0
  7130 ;;Total ram usage:       15 bytes
  7131 ;; Hardware stack levels used:    1
  7132 ;; Hardware stack levels required when called:    2
  7133 ;; This function calls:
  7134 ;;		Nothing
  7135 ;; This function is called by:
  7136 ;;		_sprintf
  7137 ;; This function uses a non-reentrant model
  7138 ;;
  7139                           
  7140                           	psect	text26
  7141  001A7A                     __ptext26:
  7142                           	opt stack 0
  7143  001A7A                     __tdiv_to_l_:
  7144                           	opt stack 25
  7145                           
  7146                           ;incstack = 0
  7147  001A7A  C018  F01C         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  7148  001A7E  6A1D               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7149  001A80  6A1E               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7150  001A82  3417               	rlcf	__tdiv_to_l_@f1+1,w,c
  7151  001A84  361C               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7152  001A86  E301               	bnc	u12291
  7153  001A88  801D               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7154  001A8A                     u12291:
  7155  001A8A  501C               	movf	??__tdiv_to_l_,w,c
  7156  001A8C  6E24               	movwf	__tdiv_to_l_@exp1,c
  7157  001A8E  5024               	movf	__tdiv_to_l_@exp1,w,c
  7158  001A90  A4D8               	btfss	status,2,c
  7159  001A92  D009               	goto	l10295
  7160  001A94  0E00               	movlw	0
  7161  001A96  6E16               	movwf	?__tdiv_to_l_,c
  7162  001A98  0E00               	movlw	0
  7163  001A9A  6E17               	movwf	?__tdiv_to_l_+1,c
  7164  001A9C  0E00               	movlw	0
  7165  001A9E  6E18               	movwf	?__tdiv_to_l_+2,c
  7166  001AA0  0E00               	movlw	0
  7167  001AA2  6E19               	movwf	?__tdiv_to_l_+3,c
  7168  001AA4  0012               	return	
  7169  001AA6                     l10295:
  7170  001AA6  C01B  F01C         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  7171  001AAA  6A1D               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7172  001AAC  6A1E               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7173  001AAE  341A               	rlcf	__tdiv_to_l_@f2+1,w,c
  7174  001AB0  361C               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7175  001AB2  E301               	bnc	u12311
  7176  001AB4  801D               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7177  001AB6                     u12311:
  7178  001AB6  501C               	movf	??__tdiv_to_l_,w,c
  7179  001AB8  6E23               	movwf	__tdiv_to_l_@cntr,c
  7180  001ABA  5023               	movf	__tdiv_to_l_@cntr,w,c
  7181  001ABC  A4D8               	btfss	status,2,c
  7182  001ABE  D009               	goto	l10301
  7183  001AC0  0E00               	movlw	0
  7184  001AC2  6E16               	movwf	?__tdiv_to_l_,c
  7185  001AC4  0E00               	movlw	0
  7186  001AC6  6E17               	movwf	?__tdiv_to_l_+1,c
  7187  001AC8  0E00               	movlw	0
  7188  001ACA  6E18               	movwf	?__tdiv_to_l_+2,c
  7189  001ACC  0E00               	movlw	0
  7190  001ACE  6E19               	movwf	?__tdiv_to_l_+3,c
  7191  001AD0  0012               	return	
  7192  001AD2                     l10301:
  7193  001AD2  8E17               	bsf	__tdiv_to_l_@f1+1,7,c
  7194  001AD4  0EFF               	movlw	255
  7195  001AD6  1616               	andwf	__tdiv_to_l_@f1,f,c
  7196  001AD8  0EFF               	movlw	255
  7197  001ADA  1617               	andwf	__tdiv_to_l_@f1+1,f,c
  7198  001ADC  0E00               	movlw	0
  7199  001ADE  1618               	andwf	__tdiv_to_l_@f1+2,f,c
  7200  001AE0  8E1A               	bsf	__tdiv_to_l_@f2+1,7,c
  7201  001AE2  0EFF               	movlw	255
  7202  001AE4  1619               	andwf	__tdiv_to_l_@f2,f,c
  7203  001AE6  0EFF               	movlw	255
  7204  001AE8  161A               	andwf	__tdiv_to_l_@f2+1,f,c
  7205  001AEA  0E00               	movlw	0
  7206  001AEC  161B               	andwf	__tdiv_to_l_@f2+2,f,c
  7207  001AEE  0E00               	movlw	0
  7208  001AF0  6E1F               	movwf	__tdiv_to_l_@quot,c
  7209  001AF2  0E00               	movlw	0
  7210  001AF4  6E20               	movwf	__tdiv_to_l_@quot+1,c
  7211  001AF6  0E00               	movlw	0
  7212  001AF8  6E21               	movwf	__tdiv_to_l_@quot+2,c
  7213  001AFA  0E00               	movlw	0
  7214  001AFC  6E22               	movwf	__tdiv_to_l_@quot+3,c
  7215  001AFE  0E7F               	movlw	127
  7216  001B00  5E24               	subwf	__tdiv_to_l_@exp1,f,c
  7217  001B02  5023               	movf	__tdiv_to_l_@cntr,w,c
  7218  001B04  0F98               	addlw	152
  7219  001B06  5E24               	subwf	__tdiv_to_l_@exp1,f,c
  7220  001B08  0E18               	movlw	24
  7221  001B0A  6E23               	movwf	__tdiv_to_l_@cntr,c
  7222  001B0C                     l1732:
  7223  001B0C  90D8               	bcf	status,0,c
  7224  001B0E  361F               	rlcf	__tdiv_to_l_@quot,f,c
  7225  001B10  3620               	rlcf	__tdiv_to_l_@quot+1,f,c
  7226  001B12  3621               	rlcf	__tdiv_to_l_@quot+2,f,c
  7227  001B14  3622               	rlcf	__tdiv_to_l_@quot+3,f,c
  7228  001B16  5019               	movf	__tdiv_to_l_@f2,w,c
  7229  001B18  5C16               	subwf	__tdiv_to_l_@f1,w,c
  7230  001B1A  501A               	movf	__tdiv_to_l_@f2+1,w,c
  7231  001B1C  5817               	subwfb	__tdiv_to_l_@f1+1,w,c
  7232  001B1E  501B               	movf	__tdiv_to_l_@f2+2,w,c
  7233  001B20  5818               	subwfb	__tdiv_to_l_@f1+2,w,c
  7234  001B22  A0D8               	btfss	status,0,c
  7235  001B24  D007               	goto	l1733
  7236  001B26  5019               	movf	__tdiv_to_l_@f2,w,c
  7237  001B28  5E16               	subwf	__tdiv_to_l_@f1,f,c
  7238  001B2A  501A               	movf	__tdiv_to_l_@f2+1,w,c
  7239  001B2C  5A17               	subwfb	__tdiv_to_l_@f1+1,f,c
  7240  001B2E  501B               	movf	__tdiv_to_l_@f2+2,w,c
  7241  001B30  5A18               	subwfb	__tdiv_to_l_@f1+2,f,c
  7242  001B32  801F               	bsf	__tdiv_to_l_@quot,0,c
  7243  001B34                     l1733:
  7244  001B34  90D8               	bcf	status,0,c
  7245  001B36  3616               	rlcf	__tdiv_to_l_@f1,f,c
  7246  001B38  3617               	rlcf	__tdiv_to_l_@f1+1,f,c
  7247  001B3A  3618               	rlcf	__tdiv_to_l_@f1+2,f,c
  7248  001B3C  2E23               	decfsz	__tdiv_to_l_@cntr,f,c
  7249  001B3E  D7E6               	goto	l1732
  7250  001B40  AE24               	btfss	__tdiv_to_l_@exp1,7,c
  7251  001B42  D016               	goto	l10335
  7252  001B44  5024               	movf	__tdiv_to_l_@exp1,w,c
  7253  001B46  0A80               	xorlw	128
  7254  001B48  0F97               	addlw	151
  7255  001B4A  B0D8               	btfsc	status,0,c
  7256  001B4C  D009               	goto	l10331
  7257  001B4E  0E00               	movlw	0
  7258  001B50  6E16               	movwf	?__tdiv_to_l_,c
  7259  001B52  0E00               	movlw	0
  7260  001B54  6E17               	movwf	?__tdiv_to_l_+1,c
  7261  001B56  0E00               	movlw	0
  7262  001B58  6E18               	movwf	?__tdiv_to_l_+2,c
  7263  001B5A  0E00               	movlw	0
  7264  001B5C  6E19               	movwf	?__tdiv_to_l_+3,c
  7265  001B5E  0012               	return	
  7266  001B60                     l10331:
  7267  001B60  90D8               	bcf	status,0,c
  7268  001B62  3222               	rrcf	__tdiv_to_l_@quot+3,f,c
  7269  001B64  3221               	rrcf	__tdiv_to_l_@quot+2,f,c
  7270  001B66  3220               	rrcf	__tdiv_to_l_@quot+1,f,c
  7271  001B68  321F               	rrcf	__tdiv_to_l_@quot,f,c
  7272  001B6A  3E24               	incfsz	__tdiv_to_l_@exp1,f,c
  7273  001B6C  D7F9               	goto	l10331
  7274  001B6E  D015               	goto	l1739
  7275  001B70                     l10335:
  7276  001B70  0E17               	movlw	23
  7277  001B72  6424               	cpfsgt	__tdiv_to_l_@exp1,c
  7278  001B74  D00F               	goto	l10343
  7279  001B76  0E00               	movlw	0
  7280  001B78  6E16               	movwf	?__tdiv_to_l_,c
  7281  001B7A  0E00               	movlw	0
  7282  001B7C  6E17               	movwf	?__tdiv_to_l_+1,c
  7283  001B7E  0E00               	movlw	0
  7284  001B80  6E18               	movwf	?__tdiv_to_l_+2,c
  7285  001B82  0E00               	movlw	0
  7286  001B84  6E19               	movwf	?__tdiv_to_l_+3,c
  7287  001B86  0012               	return	
  7288  001B88                     l10341:
  7289  001B88  90D8               	bcf	status,0,c
  7290  001B8A  361F               	rlcf	__tdiv_to_l_@quot,f,c
  7291  001B8C  3620               	rlcf	__tdiv_to_l_@quot+1,f,c
  7292  001B8E  3621               	rlcf	__tdiv_to_l_@quot+2,f,c
  7293  001B90  3622               	rlcf	__tdiv_to_l_@quot+3,f,c
  7294  001B92  0624               	decf	__tdiv_to_l_@exp1,f,c
  7295  001B94                     l10343:
  7296  001B94  5024               	movf	__tdiv_to_l_@exp1,w,c
  7297  001B96  A4D8               	btfss	status,2,c
  7298  001B98  D7F7               	goto	l10341
  7299  001B9A                     l1739:
  7300  001B9A  C01F  F016         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  7301  001B9E  C020  F017         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  7302  001BA2  C021  F018         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  7303  001BA6  C022  F019         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  7304  001BAA  0012               	return		;funcret
  7305  001BAC                     __end_of__tdiv_to_l_:
  7306                           	opt stack 0
  7307                           tosu	equ	0xFFF
  7308                           tosh	equ	0xFFE
  7309                           tosl	equ	0xFFD
  7310                           pclath	equ	0xFFA
  7311                           tblptru	equ	0xFF8
  7312                           tblptrh	equ	0xFF7
  7313                           tblptrl	equ	0xFF6
  7314                           tablat	equ	0xFF5
  7315                           prodh	equ	0xFF4
  7316                           prodl	equ	0xFF3
  7317                           intcon	equ	0xFF2
  7318                           intcon2	equ	0xFF1
  7319                           intcon3	equ	0xFF0
  7320                           postinc0	equ	0xFEE
  7321                           wreg	equ	0xFE8
  7322                           postinc1	equ	0xFE6
  7323                           postdec1	equ	0xFE5
  7324                           fsr1h	equ	0xFE2
  7325                           fsr1l	equ	0xFE1
  7326                           indf2	equ	0xFDF
  7327                           postinc2	equ	0xFDE
  7328                           postdec2	equ	0xFDD
  7329                           fsr2h	equ	0xFDA
  7330                           fsr2l	equ	0xFD9
  7331                           status	equ	0xFD8
  7332                           
  7333 ;; *************** function __div_to_l_ *****************
  7334 ;; Defined at:
  7335 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fldivl.c"
  7336 ;; Parameters:    Size  Location     Type
  7337 ;;  f1              3   21[COMRAM] unsigned long 
  7338 ;;  f2              3   24[COMRAM] unsigned long 
  7339 ;; Auto vars:     Size  Location     Type
  7340 ;;  quot            4   27[COMRAM] unsigned long 
  7341 ;;  exp1            1   32[COMRAM] unsigned char 
  7342 ;;  cntr            1   31[COMRAM] unsigned char 
  7343 ;; Return value:  Size  Location     Type
  7344 ;;                  4   21[COMRAM] unsigned long 
  7345 ;; Registers used:
  7346 ;;		wreg, status,2, status,0
  7347 ;; Tracked objects:
  7348 ;;		On entry : 0/0
  7349 ;;		On exit  : 0/0
  7350 ;;		Unchanged: 0/0
  7351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7352 ;;      Params:         6       0       0       0       0       0       0       0       0
  7353 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7354 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7355 ;;      Totals:        12       0       0       0       0       0       0       0       0
  7356 ;;Total ram usage:       12 bytes
  7357 ;; Hardware stack levels used:    1
  7358 ;; Hardware stack levels required when called:    2
  7359 ;; This function calls:
  7360 ;;		Nothing
  7361 ;; This function is called by:
  7362 ;;		_sprintf
  7363 ;; This function uses a non-reentrant model
  7364 ;;
  7365                           
  7366                           	psect	text27
  7367  001E00                     __ptext27:
  7368                           	opt stack 0
  7369  001E00                     __div_to_l_:
  7370                           	opt stack 25
  7371                           
  7372                           ;incstack = 0
  7373  001E00  3418               	rlcf	__div_to_l_@f1+2,w,c
  7374  001E02  3419               	rlcf	__div_to_l_@f1+3,w,c
  7375  001E04  6E21               	movwf	__div_to_l_@exp1,c
  7376  001E06  5021               	movf	__div_to_l_@exp1,w,c
  7377  001E08  A4D8               	btfss	status,2,c
  7378  001E0A  D009               	goto	l10351
  7379  001E0C  0E00               	movlw	0
  7380  001E0E  6E16               	movwf	?__div_to_l_,c
  7381  001E10  0E00               	movlw	0
  7382  001E12  6E17               	movwf	?__div_to_l_+1,c
  7383  001E14  0E00               	movlw	0
  7384  001E16  6E18               	movwf	?__div_to_l_+2,c
  7385  001E18  0E00               	movlw	0
  7386  001E1A  6E19               	movwf	?__div_to_l_+3,c
  7387  001E1C  0012               	return	
  7388  001E1E                     l10351:
  7389  001E1E  341B               	rlcf	__div_to_l_@f2+2,w,c
  7390  001E20  341C               	rlcf	__div_to_l_@f2+3,w,c
  7391  001E22  6E20               	movwf	__div_to_l_@cntr,c
  7392  001E24  5020               	movf	__div_to_l_@cntr,w,c
  7393  001E26  A4D8               	btfss	status,2,c
  7394  001E28  D009               	goto	l10357
  7395  001E2A  0E00               	movlw	0
  7396  001E2C  6E16               	movwf	?__div_to_l_,c
  7397  001E2E  0E00               	movlw	0
  7398  001E30  6E17               	movwf	?__div_to_l_+1,c
  7399  001E32  0E00               	movlw	0
  7400  001E34  6E18               	movwf	?__div_to_l_+2,c
  7401  001E36  0E00               	movlw	0
  7402  001E38  6E19               	movwf	?__div_to_l_+3,c
  7403  001E3A  0012               	return	
  7404  001E3C                     l10357:
  7405  001E3C  8E18               	bsf	__div_to_l_@f1+2,7,c
  7406  001E3E  0EFF               	movlw	255
  7407  001E40  1616               	andwf	__div_to_l_@f1,f,c
  7408  001E42  0EFF               	movlw	255
  7409  001E44  1617               	andwf	__div_to_l_@f1+1,f,c
  7410  001E46  0EFF               	movlw	255
  7411  001E48  1618               	andwf	__div_to_l_@f1+2,f,c
  7412  001E4A  0E00               	movlw	0
  7413  001E4C  1619               	andwf	__div_to_l_@f1+3,f,c
  7414  001E4E  8E1B               	bsf	__div_to_l_@f2+2,7,c
  7415  001E50  0EFF               	movlw	255
  7416  001E52  1619               	andwf	__div_to_l_@f2,f,c
  7417  001E54  0EFF               	movlw	255
  7418  001E56  161A               	andwf	__div_to_l_@f2+1,f,c
  7419  001E58  0EFF               	movlw	255
  7420  001E5A  161B               	andwf	__div_to_l_@f2+2,f,c
  7421  001E5C  0E00               	movlw	0
  7422  001E5E  161C               	andwf	__div_to_l_@f2+3,f,c
  7423  001E60  0E00               	movlw	0
  7424  001E62  6E1C               	movwf	__div_to_l_@quot,c
  7425  001E64  0E00               	movlw	0
  7426  001E66  6E1D               	movwf	__div_to_l_@quot+1,c
  7427  001E68  0E00               	movlw	0
  7428  001E6A  6E1E               	movwf	__div_to_l_@quot+2,c
  7429  001E6C  0E00               	movlw	0
  7430  001E6E  6E1F               	movwf	__div_to_l_@quot+3,c
  7431  001E70  0E7F               	movlw	127
  7432  001E72  5E21               	subwf	__div_to_l_@exp1,f,c
  7433  001E74  5020               	movf	__div_to_l_@cntr,w,c
  7434  001E76  0FA0               	addlw	160
  7435  001E78  5E21               	subwf	__div_to_l_@exp1,f,c
  7436  001E7A  0E20               	movlw	32
  7437  001E7C  6E20               	movwf	__div_to_l_@cntr,c
  7438  001E7E                     l10371:
  7439  001E7E  90D8               	bcf	status,0,c
  7440  001E80  361C               	rlcf	__div_to_l_@quot,f,c
  7441  001E82  361D               	rlcf	__div_to_l_@quot+1,f,c
  7442  001E84  361E               	rlcf	__div_to_l_@quot+2,f,c
  7443  001E86  361F               	rlcf	__div_to_l_@quot+3,f,c
  7444  001E88  5019               	movf	__div_to_l_@f2,w,c
  7445  001E8A  5C16               	subwf	__div_to_l_@f1,w,c
  7446  001E8C  501A               	movf	__div_to_l_@f2+1,w,c
  7447  001E8E  5817               	subwfb	__div_to_l_@f1+1,w,c
  7448  001E90  501B               	movf	__div_to_l_@f2+2,w,c
  7449  001E92  5818               	subwfb	__div_to_l_@f1+2,w,c
  7450  001E94  501C               	movf	__div_to_l_@f2+3,w,c
  7451  001E96  5819               	subwfb	__div_to_l_@f1+3,w,c
  7452  001E98  A0D8               	btfss	status,0,c
  7453  001E9A  D009               	goto	l10379
  7454  001E9C  5019               	movf	__div_to_l_@f2,w,c
  7455  001E9E  5E16               	subwf	__div_to_l_@f1,f,c
  7456  001EA0  501A               	movf	__div_to_l_@f2+1,w,c
  7457  001EA2  5A17               	subwfb	__div_to_l_@f1+1,f,c
  7458  001EA4  501B               	movf	__div_to_l_@f2+2,w,c
  7459  001EA6  5A18               	subwfb	__div_to_l_@f1+2,f,c
  7460  001EA8  501C               	movf	__div_to_l_@f2+3,w,c
  7461  001EAA  5A19               	subwfb	__div_to_l_@f1+3,f,c
  7462  001EAC  801C               	bsf	__div_to_l_@quot,0,c
  7463  001EAE                     l10379:
  7464  001EAE  90D8               	bcf	status,0,c
  7465  001EB0  3616               	rlcf	__div_to_l_@f1,f,c
  7466  001EB2  3617               	rlcf	__div_to_l_@f1+1,f,c
  7467  001EB4  3618               	rlcf	__div_to_l_@f1+2,f,c
  7468  001EB6  3619               	rlcf	__div_to_l_@f1+3,f,c
  7469  001EB8  2E20               	decfsz	__div_to_l_@cntr,f,c
  7470  001EBA  D7E1               	goto	l10371
  7471  001EBC  AE21               	btfss	__div_to_l_@exp1,7,c
  7472  001EBE  D016               	goto	l10395
  7473  001EC0  5021               	movf	__div_to_l_@exp1,w,c
  7474  001EC2  0A80               	xorlw	128
  7475  001EC4  0F9F               	addlw	159
  7476  001EC6  B0D8               	btfsc	status,0,c
  7477  001EC8  D009               	goto	l10391
  7478  001ECA  0E00               	movlw	0
  7479  001ECC  6E16               	movwf	?__div_to_l_,c
  7480  001ECE  0E00               	movlw	0
  7481  001ED0  6E17               	movwf	?__div_to_l_+1,c
  7482  001ED2  0E00               	movlw	0
  7483  001ED4  6E18               	movwf	?__div_to_l_+2,c
  7484  001ED6  0E00               	movlw	0
  7485  001ED8  6E19               	movwf	?__div_to_l_+3,c
  7486  001EDA  0012               	return	
  7487  001EDC                     l10391:
  7488  001EDC  90D8               	bcf	status,0,c
  7489  001EDE  321F               	rrcf	__div_to_l_@quot+3,f,c
  7490  001EE0  321E               	rrcf	__div_to_l_@quot+2,f,c
  7491  001EE2  321D               	rrcf	__div_to_l_@quot+1,f,c
  7492  001EE4  321C               	rrcf	__div_to_l_@quot,f,c
  7493  001EE6  3E21               	incfsz	__div_to_l_@exp1,f,c
  7494  001EE8  D7F9               	goto	l10391
  7495  001EEA  D015               	goto	l1635
  7496  001EEC                     l10395:
  7497  001EEC  0E1F               	movlw	31
  7498  001EEE  6421               	cpfsgt	__div_to_l_@exp1,c
  7499  001EF0  D00F               	goto	l10403
  7500  001EF2  0E00               	movlw	0
  7501  001EF4  6E16               	movwf	?__div_to_l_,c
  7502  001EF6  0E00               	movlw	0
  7503  001EF8  6E17               	movwf	?__div_to_l_+1,c
  7504  001EFA  0E00               	movlw	0
  7505  001EFC  6E18               	movwf	?__div_to_l_+2,c
  7506  001EFE  0E00               	movlw	0
  7507  001F00  6E19               	movwf	?__div_to_l_+3,c
  7508  001F02  0012               	return	
  7509  001F04                     l10401:
  7510  001F04  90D8               	bcf	status,0,c
  7511  001F06  361C               	rlcf	__div_to_l_@quot,f,c
  7512  001F08  361D               	rlcf	__div_to_l_@quot+1,f,c
  7513  001F0A  361E               	rlcf	__div_to_l_@quot+2,f,c
  7514  001F0C  361F               	rlcf	__div_to_l_@quot+3,f,c
  7515  001F0E  0621               	decf	__div_to_l_@exp1,f,c
  7516  001F10                     l10403:
  7517  001F10  5021               	movf	__div_to_l_@exp1,w,c
  7518  001F12  A4D8               	btfss	status,2,c
  7519  001F14  D7F7               	goto	l10401
  7520  001F16                     l1635:
  7521  001F16  C01C  F016         	movff	__div_to_l_@quot,?__div_to_l_
  7522  001F1A  C01D  F017         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  7523  001F1E  C01E  F018         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  7524  001F22  C01F  F019         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  7525  001F26  0012               	return		;funcret
  7526  001F28                     __end_of__div_to_l_:
  7527                           	opt stack 0
  7528                           tosu	equ	0xFFF
  7529                           tosh	equ	0xFFE
  7530                           tosl	equ	0xFFD
  7531                           pclath	equ	0xFFA
  7532                           tblptru	equ	0xFF8
  7533                           tblptrh	equ	0xFF7
  7534                           tblptrl	equ	0xFF6
  7535                           tablat	equ	0xFF5
  7536                           prodh	equ	0xFF4
  7537                           prodl	equ	0xFF3
  7538                           intcon	equ	0xFF2
  7539                           intcon2	equ	0xFF1
  7540                           intcon3	equ	0xFF0
  7541                           postinc0	equ	0xFEE
  7542                           wreg	equ	0xFE8
  7543                           postinc1	equ	0xFE6
  7544                           postdec1	equ	0xFE5
  7545                           fsr1h	equ	0xFE2
  7546                           fsr1l	equ	0xFE1
  7547                           indf2	equ	0xFDF
  7548                           postinc2	equ	0xFDE
  7549                           postdec2	equ	0xFDD
  7550                           fsr2h	equ	0xFDA
  7551                           fsr2l	equ	0xFD9
  7552                           status	equ	0xFD8
  7553                           
  7554 ;; *************** function ___lltoft *****************
  7555 ;; Defined at:
  7556 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lltoft.c"
  7557 ;; Parameters:    Size  Location     Type
  7558 ;;  c               4   29[COMRAM] unsigned long 
  7559 ;; Auto vars:     Size  Location     Type
  7560 ;;  exp             1   37[COMRAM] unsigned char 
  7561 ;; Return value:  Size  Location     Type
  7562 ;;                  3   29[COMRAM] float 
  7563 ;; Registers used:
  7564 ;;		wreg, status,2, status,0, cstack
  7565 ;; Tracked objects:
  7566 ;;		On entry : 0/0
  7567 ;;		On exit  : 0/0
  7568 ;;		Unchanged: 0/0
  7569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7570 ;;      Params:         4       0       0       0       0       0       0       0       0
  7571 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7572 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7573 ;;      Totals:         9       0       0       0       0       0       0       0       0
  7574 ;;Total ram usage:        9 bytes
  7575 ;; Hardware stack levels used:    1
  7576 ;; Hardware stack levels required when called:    3
  7577 ;; This function calls:
  7578 ;;		___ftpack
  7579 ;; This function is called by:
  7580 ;;		_sprintf
  7581 ;; This function uses a non-reentrant model
  7582 ;;
  7583                           
  7584                           	psect	text28
  7585  003054                     __ptext28:
  7586                           	opt stack 0
  7587  003054                     ___lltoft:
  7588                           	opt stack 24
  7589                           
  7590                           ;incstack = 0
  7591  003054  0E8E               	movlw	142
  7592  003056  6E26               	movwf	___lltoft@exp,c
  7593  003058  D006               	goto	l10513
  7594  00305A                     l10511:
  7595  00305A  90D8               	bcf	status,0,c
  7596  00305C  3221               	rrcf	___lltoft@c+3,f,c
  7597  00305E  3220               	rrcf	___lltoft@c+2,f,c
  7598  003060  321F               	rrcf	___lltoft@c+1,f,c
  7599  003062  321E               	rrcf	___lltoft@c,f,c
  7600  003064  2A26               	incf	___lltoft@exp,f,c
  7601  003066                     l10513:
  7602  003066  0E00               	movlw	0
  7603  003068  141E               	andwf	___lltoft@c,w,c
  7604  00306A  6E22               	movwf	??___lltoft& (0+255),c
  7605  00306C  0E00               	movlw	0
  7606  00306E  141F               	andwf	___lltoft@c+1,w,c
  7607  003070  6E23               	movwf	(??___lltoft+1)& (0+255),c
  7608  003072  0E00               	movlw	0
  7609  003074  1420               	andwf	___lltoft@c+2,w,c
  7610  003076  6E24               	movwf	(??___lltoft+2)& (0+255),c
  7611  003078  0EFF               	movlw	255
  7612  00307A  1421               	andwf	___lltoft@c+3,w,c
  7613  00307C  6E25               	movwf	(??___lltoft+3)& (0+255),c
  7614  00307E  5022               	movf	??___lltoft,w,c
  7615  003080  1023               	iorwf	??___lltoft+1,w,c
  7616  003082  1024               	iorwf	??___lltoft+2,w,c
  7617  003084  1025               	iorwf	??___lltoft+3,w,c
  7618  003086  A4D8               	btfss	status,2,c
  7619  003088  D7E8               	goto	l10511
  7620  00308A  C01E  F016         	movff	___lltoft@c,___ftpack@arg
  7621  00308E  C01F  F017         	movff	___lltoft@c+1,___ftpack@arg+1
  7622  003092  C020  F018         	movff	___lltoft@c+2,___ftpack@arg+2
  7623  003096  C026  F019         	movff	___lltoft@exp,___ftpack@exp
  7624  00309A  0E00               	movlw	0
  7625  00309C  6E1A               	movwf	___ftpack@sign,c
  7626  00309E  EC72  F013         	call	___ftpack	;wreg free
  7627  0030A2  C016  F01E         	movff	?___ftpack,?___lltoft
  7628  0030A6  C017  F01F         	movff	?___ftpack+1,?___lltoft+1
  7629  0030AA  C018  F020         	movff	?___ftpack+2,?___lltoft+2
  7630  0030AE  0012               	return	
  7631  0030B0                     __end_of___lltoft:
  7632                           	opt stack 0
  7633                           tosu	equ	0xFFF
  7634                           tosh	equ	0xFFE
  7635                           tosl	equ	0xFFD
  7636                           pclath	equ	0xFFA
  7637                           tblptru	equ	0xFF8
  7638                           tblptrh	equ	0xFF7
  7639                           tblptrl	equ	0xFF6
  7640                           tablat	equ	0xFF5
  7641                           prodh	equ	0xFF4
  7642                           prodl	equ	0xFF3
  7643                           intcon	equ	0xFF2
  7644                           intcon2	equ	0xFF1
  7645                           intcon3	equ	0xFF0
  7646                           postinc0	equ	0xFEE
  7647                           wreg	equ	0xFE8
  7648                           postinc1	equ	0xFE6
  7649                           postdec1	equ	0xFE5
  7650                           fsr1h	equ	0xFE2
  7651                           fsr1l	equ	0xFE1
  7652                           indf2	equ	0xFDF
  7653                           postinc2	equ	0xFDE
  7654                           postdec2	equ	0xFDD
  7655                           fsr2h	equ	0xFDA
  7656                           fsr2l	equ	0xFD9
  7657                           status	equ	0xFD8
  7658                           
  7659 ;; *************** function ___llmod *****************
  7660 ;; Defined at:
  7661 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\llmod.c"
  7662 ;; Parameters:    Size  Location     Type
  7663 ;;  dividend        4   34[COMRAM] unsigned long 
  7664 ;;  divisor         4   38[COMRAM] unsigned long 
  7665 ;; Auto vars:     Size  Location     Type
  7666 ;;  counter         1   42[COMRAM] unsigned char 
  7667 ;; Return value:  Size  Location     Type
  7668 ;;                  4   34[COMRAM] unsigned long 
  7669 ;; Registers used:
  7670 ;;		wreg, status,2, status,0
  7671 ;; Tracked objects:
  7672 ;;		On entry : 0/0
  7673 ;;		On exit  : 0/0
  7674 ;;		Unchanged: 0/0
  7675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7676 ;;      Params:         8       0       0       0       0       0       0       0       0
  7677 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7678 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7679 ;;      Totals:         9       0       0       0       0       0       0       0       0
  7680 ;;Total ram usage:        9 bytes
  7681 ;; Hardware stack levels used:    1
  7682 ;; Hardware stack levels required when called:    2
  7683 ;; This function calls:
  7684 ;;		Nothing
  7685 ;; This function is called by:
  7686 ;;		_sprintf
  7687 ;;		_convert_time_to_UTC
  7688 ;; This function uses a non-reentrant model
  7689 ;;
  7690                           
  7691                           	psect	text29
  7692  002F8A                     __ptext29:
  7693                           	opt stack 0
  7694  002F8A                     ___llmod:
  7695                           	opt stack 25
  7696                           
  7697                           ;incstack = 0
  7698  002F8A  5027               	movf	___llmod@divisor,w,c
  7699  002F8C  1028               	iorwf	___llmod@divisor+1,w,c
  7700  002F8E  1029               	iorwf	___llmod@divisor+2,w,c
  7701  002F90  102A               	iorwf	___llmod@divisor+3,w,c
  7702  002F92  B4D8               	btfsc	status,2,c
  7703  002F94  D024               	goto	l1843
  7704  002F96  0E01               	movlw	1
  7705  002F98  6E2B               	movwf	___llmod@counter,c
  7706  002F9A  D006               	goto	l10499
  7707  002F9C                     l10497:
  7708  002F9C  90D8               	bcf	status,0,c
  7709  002F9E  3627               	rlcf	___llmod@divisor,f,c
  7710  002FA0  3628               	rlcf	___llmod@divisor+1,f,c
  7711  002FA2  3629               	rlcf	___llmod@divisor+2,f,c
  7712  002FA4  362A               	rlcf	___llmod@divisor+3,f,c
  7713  002FA6  2A2B               	incf	___llmod@counter,f,c
  7714  002FA8                     l10499:
  7715  002FA8  AE2A               	btfss	___llmod@divisor+3,7,c
  7716  002FAA  D7F8               	goto	l10497
  7717  002FAC                     l10501:
  7718  002FAC  5027               	movf	___llmod@divisor,w,c
  7719  002FAE  5C23               	subwf	___llmod@dividend,w,c
  7720  002FB0  5028               	movf	___llmod@divisor+1,w,c
  7721  002FB2  5824               	subwfb	___llmod@dividend+1,w,c
  7722  002FB4  5029               	movf	___llmod@divisor+2,w,c
  7723  002FB6  5825               	subwfb	___llmod@dividend+2,w,c
  7724  002FB8  502A               	movf	___llmod@divisor+3,w,c
  7725  002FBA  5826               	subwfb	___llmod@dividend+3,w,c
  7726  002FBC  A0D8               	btfss	status,0,c
  7727  002FBE  D008               	goto	l10505
  7728  002FC0  5027               	movf	___llmod@divisor,w,c
  7729  002FC2  5E23               	subwf	___llmod@dividend,f,c
  7730  002FC4  5028               	movf	___llmod@divisor+1,w,c
  7731  002FC6  5A24               	subwfb	___llmod@dividend+1,f,c
  7732  002FC8  5029               	movf	___llmod@divisor+2,w,c
  7733  002FCA  5A25               	subwfb	___llmod@dividend+2,f,c
  7734  002FCC  502A               	movf	___llmod@divisor+3,w,c
  7735  002FCE  5A26               	subwfb	___llmod@dividend+3,f,c
  7736  002FD0                     l10505:
  7737  002FD0  90D8               	bcf	status,0,c
  7738  002FD2  322A               	rrcf	___llmod@divisor+3,f,c
  7739  002FD4  3229               	rrcf	___llmod@divisor+2,f,c
  7740  002FD6  3228               	rrcf	___llmod@divisor+1,f,c
  7741  002FD8  3227               	rrcf	___llmod@divisor,f,c
  7742  002FDA  2E2B               	decfsz	___llmod@counter,f,c
  7743  002FDC  D7E7               	goto	l10501
  7744  002FDE                     l1843:
  7745  002FDE  C023  F023         	movff	___llmod@dividend,?___llmod
  7746  002FE2  C024  F024         	movff	___llmod@dividend+1,?___llmod+1
  7747  002FE6  C025  F025         	movff	___llmod@dividend+2,?___llmod+2
  7748  002FEA  C026  F026         	movff	___llmod@dividend+3,?___llmod+3
  7749  002FEE  0012               	return		;funcret
  7750  002FF0                     __end_of___llmod:
  7751                           	opt stack 0
  7752                           tosu	equ	0xFFF
  7753                           tosh	equ	0xFFE
  7754                           tosl	equ	0xFFD
  7755                           pclath	equ	0xFFA
  7756                           tblptru	equ	0xFF8
  7757                           tblptrh	equ	0xFF7
  7758                           tblptrl	equ	0xFF6
  7759                           tablat	equ	0xFF5
  7760                           prodh	equ	0xFF4
  7761                           prodl	equ	0xFF3
  7762                           intcon	equ	0xFF2
  7763                           intcon2	equ	0xFF1
  7764                           intcon3	equ	0xFF0
  7765                           postinc0	equ	0xFEE
  7766                           wreg	equ	0xFE8
  7767                           postinc1	equ	0xFE6
  7768                           postdec1	equ	0xFE5
  7769                           fsr1h	equ	0xFE2
  7770                           fsr1l	equ	0xFE1
  7771                           indf2	equ	0xFDF
  7772                           postinc2	equ	0xFDE
  7773                           postdec2	equ	0xFDD
  7774                           fsr2h	equ	0xFDA
  7775                           fsr2l	equ	0xFD9
  7776                           status	equ	0xFD8
  7777                           
  7778 ;; *************** function ___lldiv *****************
  7779 ;; Defined at:
  7780 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  7781 ;; Parameters:    Size  Location     Type
  7782 ;;  dividend        4   21[COMRAM] unsigned long 
  7783 ;;  divisor         4   25[COMRAM] unsigned long 
  7784 ;; Auto vars:     Size  Location     Type
  7785 ;;  quotient        4   29[COMRAM] unsigned long 
  7786 ;;  counter         1   33[COMRAM] unsigned char 
  7787 ;; Return value:  Size  Location     Type
  7788 ;;                  4   21[COMRAM] unsigned long 
  7789 ;; Registers used:
  7790 ;;		wreg, status,2, status,0
  7791 ;; Tracked objects:
  7792 ;;		On entry : 0/0
  7793 ;;		On exit  : 0/0
  7794 ;;		Unchanged: 0/0
  7795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7796 ;;      Params:         8       0       0       0       0       0       0       0       0
  7797 ;;      Locals:         5       0       0       0       0       0       0       0       0
  7798 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7799 ;;      Totals:        13       0       0       0       0       0       0       0       0
  7800 ;;Total ram usage:       13 bytes
  7801 ;; Hardware stack levels used:    1
  7802 ;; Hardware stack levels required when called:    2
  7803 ;; This function calls:
  7804 ;;		Nothing
  7805 ;; This function is called by:
  7806 ;;		_sprintf
  7807 ;;		_convert_time_to_UTC
  7808 ;;		_pf_mount
  7809 ;;		_pf_lseek
  7810 ;; This function uses a non-reentrant model
  7811 ;;
  7812                           
  7813                           	psect	text30
  7814  002C62                     __ptext30:
  7815                           	opt stack 0
  7816  002C62                     ___lldiv:
  7817                           	opt stack 25
  7818                           
  7819                           ;incstack = 0
  7820  002C62  0E00               	movlw	0
  7821  002C64  6E1E               	movwf	___lldiv@quotient,c
  7822  002C66  0E00               	movlw	0
  7823  002C68  6E1F               	movwf	___lldiv@quotient+1,c
  7824  002C6A  0E00               	movlw	0
  7825  002C6C  6E20               	movwf	___lldiv@quotient+2,c
  7826  002C6E  0E00               	movlw	0
  7827  002C70  6E21               	movwf	___lldiv@quotient+3,c
  7828  002C72  501A               	movf	___lldiv@divisor,w,c
  7829  002C74  101B               	iorwf	___lldiv@divisor+1,w,c
  7830  002C76  101C               	iorwf	___lldiv@divisor+2,w,c
  7831  002C78  101D               	iorwf	___lldiv@divisor+3,w,c
  7832  002C7A  B4D8               	btfsc	status,2,c
  7833  002C7C  D02A               	goto	l1833
  7834  002C7E  0E01               	movlw	1
  7835  002C80  6E22               	movwf	___lldiv@counter,c
  7836  002C82  D006               	goto	l10479
  7837  002C84                     l10477:
  7838  002C84  90D8               	bcf	status,0,c
  7839  002C86  361A               	rlcf	___lldiv@divisor,f,c
  7840  002C88  361B               	rlcf	___lldiv@divisor+1,f,c
  7841  002C8A  361C               	rlcf	___lldiv@divisor+2,f,c
  7842  002C8C  361D               	rlcf	___lldiv@divisor+3,f,c
  7843  002C8E  2A22               	incf	___lldiv@counter,f,c
  7844  002C90                     l10479:
  7845  002C90  AE1D               	btfss	___lldiv@divisor+3,7,c
  7846  002C92  D7F8               	goto	l10477
  7847  002C94                     l10481:
  7848  002C94  90D8               	bcf	status,0,c
  7849  002C96  361E               	rlcf	___lldiv@quotient,f,c
  7850  002C98  361F               	rlcf	___lldiv@quotient+1,f,c
  7851  002C9A  3620               	rlcf	___lldiv@quotient+2,f,c
  7852  002C9C  3621               	rlcf	___lldiv@quotient+3,f,c
  7853  002C9E  501A               	movf	___lldiv@divisor,w,c
  7854  002CA0  5C16               	subwf	___lldiv@dividend,w,c
  7855  002CA2  501B               	movf	___lldiv@divisor+1,w,c
  7856  002CA4  5817               	subwfb	___lldiv@dividend+1,w,c
  7857  002CA6  501C               	movf	___lldiv@divisor+2,w,c
  7858  002CA8  5818               	subwfb	___lldiv@dividend+2,w,c
  7859  002CAA  501D               	movf	___lldiv@divisor+3,w,c
  7860  002CAC  5819               	subwfb	___lldiv@dividend+3,w,c
  7861  002CAE  A0D8               	btfss	status,0,c
  7862  002CB0  D009               	goto	l10489
  7863  002CB2  501A               	movf	___lldiv@divisor,w,c
  7864  002CB4  5E16               	subwf	___lldiv@dividend,f,c
  7865  002CB6  501B               	movf	___lldiv@divisor+1,w,c
  7866  002CB8  5A17               	subwfb	___lldiv@dividend+1,f,c
  7867  002CBA  501C               	movf	___lldiv@divisor+2,w,c
  7868  002CBC  5A18               	subwfb	___lldiv@dividend+2,f,c
  7869  002CBE  501D               	movf	___lldiv@divisor+3,w,c
  7870  002CC0  5A19               	subwfb	___lldiv@dividend+3,f,c
  7871  002CC2  801E               	bsf	___lldiv@quotient,0,c
  7872  002CC4                     l10489:
  7873  002CC4  90D8               	bcf	status,0,c
  7874  002CC6  321D               	rrcf	___lldiv@divisor+3,f,c
  7875  002CC8  321C               	rrcf	___lldiv@divisor+2,f,c
  7876  002CCA  321B               	rrcf	___lldiv@divisor+1,f,c
  7877  002CCC  321A               	rrcf	___lldiv@divisor,f,c
  7878  002CCE  2E22               	decfsz	___lldiv@counter,f,c
  7879  002CD0  D7E1               	goto	l10481
  7880  002CD2                     l1833:
  7881  002CD2  C01E  F016         	movff	___lldiv@quotient,?___lldiv
  7882  002CD6  C01F  F017         	movff	___lldiv@quotient+1,?___lldiv+1
  7883  002CDA  C020  F018         	movff	___lldiv@quotient+2,?___lldiv+2
  7884  002CDE  C021  F019         	movff	___lldiv@quotient+3,?___lldiv+3
  7885  002CE2  0012               	return		;funcret
  7886  002CE4                     __end_of___lldiv:
  7887                           	opt stack 0
  7888                           tosu	equ	0xFFF
  7889                           tosh	equ	0xFFE
  7890                           tosl	equ	0xFFD
  7891                           pclath	equ	0xFFA
  7892                           tblptru	equ	0xFF8
  7893                           tblptrh	equ	0xFF7
  7894                           tblptrl	equ	0xFF6
  7895                           tablat	equ	0xFF5
  7896                           prodh	equ	0xFF4
  7897                           prodl	equ	0xFF3
  7898                           intcon	equ	0xFF2
  7899                           intcon2	equ	0xFF1
  7900                           intcon3	equ	0xFF0
  7901                           postinc0	equ	0xFEE
  7902                           wreg	equ	0xFE8
  7903                           postinc1	equ	0xFE6
  7904                           postdec1	equ	0xFE5
  7905                           fsr1h	equ	0xFE2
  7906                           fsr1l	equ	0xFE1
  7907                           indf2	equ	0xFDF
  7908                           postinc2	equ	0xFDE
  7909                           postdec2	equ	0xFDD
  7910                           fsr2h	equ	0xFDA
  7911                           fsr2l	equ	0xFD9
  7912                           status	equ	0xFD8
  7913                           
  7914 ;; *************** function ___ftsub *****************
  7915 ;; Defined at:
  7916 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftsub.c"
  7917 ;; Parameters:    Size  Location     Type
  7918 ;;  f1              3   28[BANK0 ] float 
  7919 ;;  f2              3   31[BANK0 ] float 
  7920 ;; Auto vars:     Size  Location     Type
  7921 ;;		None
  7922 ;; Return value:  Size  Location     Type
  7923 ;;                  3   28[BANK0 ] float 
  7924 ;; Registers used:
  7925 ;;		wreg, status,2, status,0, cstack
  7926 ;; Tracked objects:
  7927 ;;		On entry : 0/0
  7928 ;;		On exit  : 0/0
  7929 ;;		Unchanged: 0/0
  7930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7931 ;;      Params:         0       6       0       0       0       0       0       0       0
  7932 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7933 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7934 ;;      Totals:         0       6       0       0       0       0       0       0       0
  7935 ;;Total ram usage:        6 bytes
  7936 ;; Hardware stack levels used:    1
  7937 ;; Hardware stack levels required when called:    4
  7938 ;; This function calls:
  7939 ;;		___ftadd
  7940 ;; This function is called by:
  7941 ;;		_sprintf
  7942 ;; This function uses a non-reentrant model
  7943 ;;
  7944                           
  7945                           	psect	text31
  7946  0031AA                     __ptext31:
  7947                           	opt stack 0
  7948  0031AA                     ___ftsub:
  7949                           	opt stack 23
  7950                           
  7951                           ;incstack = 0
  7952  0031AA  0100               	movlb	0	; () banked
  7953  0031AC  517F               	movf	___ftsub@f2& (0+255),w,b
  7954  0031AE  0100               	movlb	0	; () banked
  7955  0031B0  1180               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  7956  0031B2  0100               	movlb	0	; () banked
  7957  0031B4  1181               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  7958  0031B6  B4D8               	btfsc	status,2,c
  7959  0031B8  D009               	goto	l10409
  7960                           
  7961                           ; BSR set to: 0
  7962  0031BA  0E00               	movlw	0
  7963  0031BC  0100               	movlb	0	; () banked
  7964  0031BE  1B7F               	xorwf	___ftsub@f2& (0+255),f,b
  7965  0031C0  0E00               	movlw	0
  7966  0031C2  0100               	movlb	0	; () banked
  7967  0031C4  1B80               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  7968  0031C6  0E80               	movlw	128
  7969  0031C8  0100               	movlb	0	; () banked
  7970  0031CA  1B81               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  7971  0031CC                     l10409:
  7972                           
  7973                           ; BSR set to: 0
  7974  0031CC  C07C  F070         	movff	___ftsub@f1,___ftadd@f1
  7975  0031D0  C07D  F071         	movff	___ftsub@f1+1,___ftadd@f1+1
  7976  0031D4  C07E  F072         	movff	___ftsub@f1+2,___ftadd@f1+2
  7977  0031D8  C07F  F073         	movff	___ftsub@f2,___ftadd@f2
  7978  0031DC  C080  F074         	movff	___ftsub@f2+1,___ftadd@f2+1
  7979  0031E0  C081  F075         	movff	___ftsub@f2+2,___ftadd@f2+2
  7980  0031E4  ECE0  F008         	call	___ftadd	;wreg free
  7981  0031E8  C070  F07C         	movff	?___ftadd,?___ftsub
  7982  0031EC  C071  F07D         	movff	?___ftadd+1,?___ftsub+1
  7983  0031F0  C072  F07E         	movff	?___ftadd+2,?___ftsub+2
  7984  0031F4  0012               	return	
  7985  0031F6                     __end_of___ftsub:
  7986                           	opt stack 0
  7987                           tosu	equ	0xFFF
  7988                           tosh	equ	0xFFE
  7989                           tosl	equ	0xFFD
  7990                           pclath	equ	0xFFA
  7991                           tblptru	equ	0xFF8
  7992                           tblptrh	equ	0xFF7
  7993                           tblptrl	equ	0xFF6
  7994                           tablat	equ	0xFF5
  7995                           prodh	equ	0xFF4
  7996                           prodl	equ	0xFF3
  7997                           intcon	equ	0xFF2
  7998                           intcon2	equ	0xFF1
  7999                           intcon3	equ	0xFF0
  8000                           postinc0	equ	0xFEE
  8001                           wreg	equ	0xFE8
  8002                           postinc1	equ	0xFE6
  8003                           postdec1	equ	0xFE5
  8004                           fsr1h	equ	0xFE2
  8005                           fsr1l	equ	0xFE1
  8006                           indf2	equ	0xFDF
  8007                           postinc2	equ	0xFDE
  8008                           postdec2	equ	0xFDD
  8009                           fsr2h	equ	0xFDA
  8010                           fsr2l	equ	0xFD9
  8011                           status	equ	0xFD8
  8012                           
  8013 ;; *************** function _memset *****************
  8014 ;; Defined at:
  8015 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\memset.c"
  8016 ;; Parameters:    Size  Location     Type
  8017 ;;  p1              2   21[COMRAM] PTR void 
  8018 ;;		 -> GPS@GPS_Buffer(15), 
  8019 ;;  c               2   23[COMRAM] int 
  8020 ;;  n               2   25[COMRAM] unsigned int 
  8021 ;; Auto vars:     Size  Location     Type
  8022 ;;  p               2   27[COMRAM] PTR unsigned char 
  8023 ;;		 -> GPS@GPS_Buffer(15), 
  8024 ;; Return value:  Size  Location     Type
  8025 ;;                  2   21[COMRAM] PTR void 
  8026 ;; Registers used:
  8027 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8028 ;; Tracked objects:
  8029 ;;		On entry : 0/0
  8030 ;;		On exit  : 0/0
  8031 ;;		Unchanged: 0/0
  8032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8033 ;;      Params:         6       0       0       0       0       0       0       0       0
  8034 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8035 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8036 ;;      Totals:         8       0       0       0       0       0       0       0       0
  8037 ;;Total ram usage:        8 bytes
  8038 ;; Hardware stack levels used:    1
  8039 ;; Hardware stack levels required when called:    2
  8040 ;; This function calls:
  8041 ;;		Nothing
  8042 ;; This function is called by:
  8043 ;;		_GPS
  8044 ;; This function uses a non-reentrant model
  8045 ;;
  8046                           
  8047                           	psect	text32
  8048  0033DE                     __ptext32:
  8049                           	opt stack 0
  8050  0033DE                     _memset:
  8051                           	opt stack 26
  8052                           
  8053                           ;incstack = 0
  8054  0033DE  C016  F01C         	movff	memset@p1,memset@p
  8055  0033E2  C017  F01D         	movff	memset@p1+1,memset@p+1
  8056  0033E6  D008               	goto	l10797
  8057  0033E8                     l10793:
  8058  0033E8  C01C  FFD9         	movff	memset@p,fsr2l
  8059  0033EC  C01D  FFDA         	movff	memset@p+1,fsr2h
  8060  0033F0  C018  FFDF         	movff	memset@c,indf2
  8061  0033F4  4A1C               	infsnz	memset@p,f,c
  8062  0033F6  2A1D               	incf	memset@p+1,f,c
  8063  0033F8                     l10797:
  8064  0033F8  061A               	decf	memset@n,f,c
  8065  0033FA  A0D8               	btfss	status,0,c
  8066  0033FC  061B               	decf	memset@n+1,f,c
  8067  0033FE  281A               	incf	memset@n,w,c
  8068  003400  E1F3               	bnz	l10793
  8069  003402  281B               	incf	memset@n+1,w,c
  8070  003404  B4D8               	btfsc	status,2,c
  8071  003406  0012               	return	
  8072  003408  D7EF               	goto	l10793
  8073  00340A                     __end_of_memset:
  8074                           	opt stack 0
  8075                           tosu	equ	0xFFF
  8076                           tosh	equ	0xFFE
  8077                           tosl	equ	0xFFD
  8078                           pclath	equ	0xFFA
  8079                           tblptru	equ	0xFF8
  8080                           tblptrh	equ	0xFF7
  8081                           tblptrl	equ	0xFF6
  8082                           tablat	equ	0xFF5
  8083                           prodh	equ	0xFF4
  8084                           prodl	equ	0xFF3
  8085                           intcon	equ	0xFF2
  8086                           intcon2	equ	0xFF1
  8087                           intcon3	equ	0xFF0
  8088                           postinc0	equ	0xFEE
  8089                           wreg	equ	0xFE8
  8090                           postinc1	equ	0xFE6
  8091                           postdec1	equ	0xFE5
  8092                           fsr1h	equ	0xFE2
  8093                           fsr1l	equ	0xFE1
  8094                           indf2	equ	0xFDF
  8095                           postinc2	equ	0xFDE
  8096                           postdec2	equ	0xFDD
  8097                           fsr2h	equ	0xFDA
  8098                           fsr2l	equ	0xFD9
  8099                           status	equ	0xFD8
  8100                           
  8101 ;; *************** function _get_longitude *****************
  8102 ;; Defined at:
  8103 ;;		line 167 in file "bibliotecas/GPS.c"
  8104 ;; Parameters:    Size  Location     Type
  8105 ;;  long_pointer    1    wreg     unsigned char 
  8106 ;; Auto vars:     Size  Location     Type
  8107 ;;  long_pointer    1   44[BANK0 ] unsigned char 
  8108 ;;  Long_Buffer    15   26[BANK0 ] unsigned char [15]
  8109 ;;  _longitude      3   41[BANK0 ] float 
  8110 ;;  long_index      1   46[BANK0 ] unsigned char 
  8111 ;;  index           1   45[BANK0 ] unsigned char 
  8112 ;; Return value:  Size  Location     Type
  8113 ;;                  3   23[BANK0 ] float 
  8114 ;; Registers used:
  8115 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8116 ;; Tracked objects:
  8117 ;;		On entry : 0/0
  8118 ;;		On exit  : 0/0
  8119 ;;		Unchanged: 0/0
  8120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8121 ;;      Params:         0       3       0       0       0       0       0       0       0
  8122 ;;      Locals:         0      21       0       0       0       0       0       0       0
  8123 ;;      Temps:          1       0       0       0       0       0       0       0       0
  8124 ;;      Totals:         1      24       0       0       0       0       0       0       0
  8125 ;;Total ram usage:       25 bytes
  8126 ;; Hardware stack levels used:    1
  8127 ;; Hardware stack levels required when called:    6
  8128 ;; This function calls:
  8129 ;;		_atof
  8130 ;; This function is called by:
  8131 ;;		_GPS
  8132 ;; This function uses a non-reentrant model
  8133 ;;
  8134                           
  8135                           	psect	text33
  8136  002838                     __ptext33:
  8137                           	opt stack 0
  8138  002838                     _get_longitude:
  8139                           	opt stack 22
  8140                           
  8141                           ;incstack = 0
  8142                           ;get_longitude@long_pointer stored from wreg
  8143  002838  0100               	movlb	0	; () banked
  8144  00283A  6F8C               	movwf	get_longitude@long_pointer& (0+255),b
  8145                           
  8146                           ;GPS.c: 169: unsigned char long_index;
  8147                           ;GPS.c: 170: unsigned char index = long_pointer+1;
  8148  00283C  0100               	movlb	0	; () banked
  8149  00283E  298C               	incf	get_longitude@long_pointer& (0+255),w,b
  8150  002840  0100               	movlb	0	; () banked
  8151  002842  6F8D               	movwf	get_longitude@index& (0+255),b
  8152                           
  8153                           ; BSR set to: 0
  8154                           ;GPS.c: 171: char Long_Buffer[15];
  8155                           ;GPS.c: 172: float _longitude;
  8156                           ;GPS.c: 173: long_index=0;
  8157  002844  0E00               	movlw	0
  8158  002846  0100               	movlb	0	; () banked
  8159  002848  6F8E               	movwf	get_longitude@long_index& (0+255),b
  8160                           
  8161                           ;GPS.c: 176: for( ; GGA_Buffer[index]!=','; index++){
  8162  00284A  D018               	goto	l10809
  8163  00284C                     l10803:
  8164                           
  8165                           ; BSR set to: 0
  8166                           ;GPS.c: 177: Long_Buffer[long_index]= GGA_Buffer[index];
  8167  00284C  0100               	movlb	0	; () banked
  8168  00284E  518D               	movf	get_longitude@index& (0+255),w,b
  8169  002850  0D01               	mullw	1
  8170  002852  0E00               	movlw	low _GGA_Buffer
  8171  002854  24F3               	addwf	prodl,w,c
  8172  002856  6ED9               	movwf	fsr2l,c
  8173  002858  0E01               	movlw	high _GGA_Buffer
  8174  00285A  20F4               	addwfc	prodh,w,c
  8175  00285C  6EDA               	movwf	fsr2h,c
  8176  00285E  0100               	movlb	0	; () banked
  8177  002860  518E               	movf	get_longitude@long_index& (0+255),w,b
  8178  002862  0D01               	mullw	1
  8179  002864  0E7A               	movlw	low get_longitude@Long_Buffer
  8180  002866  24F3               	addwf	prodl,w,c
  8181  002868  6EE1               	movwf	fsr1l,c
  8182  00286A  0E00               	movlw	high get_longitude@Long_Buffer
  8183  00286C  20F4               	addwfc	prodh,w,c
  8184  00286E  6EE2               	movwf	fsr1h,c
  8185  002870  CFDF FFE7          	movff	indf2,indf1
  8186                           
  8187                           ; BSR set to: 0
  8188                           ;GPS.c: 178: long_index++;
  8189  002874  0100               	movlb	0	; () banked
  8190  002876  2B8E               	incf	get_longitude@long_index& (0+255),f,b
  8191                           
  8192                           ; BSR set to: 0
  8193  002878  0100               	movlb	0	; () banked
  8194  00287A  2B8D               	incf	get_longitude@index& (0+255),f,b
  8195  00287C                     l10809:
  8196                           
  8197                           ; BSR set to: 0
  8198  00287C  0100               	movlb	0	; () banked
  8199  00287E  518D               	movf	get_longitude@index& (0+255),w,b
  8200  002880  0D01               	mullw	1
  8201  002882  0E00               	movlw	low _GGA_Buffer
  8202  002884  24F3               	addwf	prodl,w,c
  8203  002886  6ED9               	movwf	fsr2l,c
  8204  002888  0E01               	movlw	high _GGA_Buffer
  8205  00288A  20F4               	addwfc	prodh,w,c
  8206  00288C  6EDA               	movwf	fsr2h,c
  8207  00288E  0E2C               	movlw	44
  8208  002890  18DE               	xorwf	postinc2,w,c
  8209  002892  A4D8               	btfss	status,2,c
  8210  002894  D7DB               	goto	l10803
  8211                           
  8212                           ; BSR set to: 0
  8213                           ;GPS.c: 179: }
  8214                           ;GPS.c: 180: long_index++;
  8215                           
  8216                           ; BSR set to: 0
  8217  002896  0100               	movlb	0	; () banked
  8218  002898  2B8E               	incf	get_longitude@long_index& (0+255),f,b
  8219                           
  8220                           ; BSR set to: 0
  8221                           ;GPS.c: 181: E_W = GGA_Buffer[long_index];
  8222  00289A  0100               	movlb	0	; () banked
  8223  00289C  518E               	movf	get_longitude@long_index& (0+255),w,b
  8224  00289E  0D01               	mullw	1
  8225  0028A0  0E00               	movlw	low _GGA_Buffer
  8226  0028A2  24F3               	addwf	prodl,w,c
  8227  0028A4  6ED9               	movwf	fsr2l,c
  8228  0028A6  0E01               	movlw	high _GGA_Buffer
  8229  0028A8  20F4               	addwfc	prodh,w,c
  8230  0028AA  6EDA               	movwf	fsr2h,c
  8231  0028AC  50DF               	movf	indf2,w,c
  8232  0028AE  0100               	movlb	0	; () banked
  8233  0028B0  6FDA               	movwf	_E_W& (0+255),b
  8234                           
  8235                           ; BSR set to: 0
  8236                           ;GPS.c: 182: _longitude = atof(Long_Buffer);
  8237  0028B2  0E7A               	movlw	low get_longitude@Long_Buffer
  8238  0028B4  0100               	movlb	0	; () banked
  8239  0028B6  6F74               	movwf	atof@s& (0+255),b
  8240  0028B8  0E00               	movlw	high get_longitude@Long_Buffer
  8241  0028BA  0100               	movlb	0	; () banked
  8242  0028BC  6F75               	movwf	(atof@s+1)& (0+255),b
  8243  0028BE  EC2B  F01A         	call	_atof	;wreg free
  8244  0028C2  C074  F089         	movff	?_atof,get_longitude@_longitude
  8245  0028C6  C075  F08A         	movff	?_atof+1,get_longitude@_longitude+1
  8246  0028CA  C076  F08B         	movff	?_atof+2,get_longitude@_longitude+2
  8247                           
  8248                           ;GPS.c: 183: return _longitude;
  8249  0028CE  C089  F077         	movff	get_longitude@_longitude,?_get_longitude
  8250  0028D2  C08A  F078         	movff	get_longitude@_longitude+1,?_get_longitude+1
  8251  0028D6  C08B  F079         	movff	get_longitude@_longitude+2,?_get_longitude+2
  8252  0028DA  0012               	return	
  8253  0028DC                     __end_of_get_longitude:
  8254                           	opt stack 0
  8255                           tosu	equ	0xFFF
  8256                           tosh	equ	0xFFE
  8257                           tosl	equ	0xFFD
  8258                           pclath	equ	0xFFA
  8259                           tblptru	equ	0xFF8
  8260                           tblptrh	equ	0xFF7
  8261                           tblptrl	equ	0xFF6
  8262                           tablat	equ	0xFF5
  8263                           prodh	equ	0xFF4
  8264                           prodl	equ	0xFF3
  8265                           intcon	equ	0xFF2
  8266                           intcon2	equ	0xFF1
  8267                           intcon3	equ	0xFF0
  8268                           postinc0	equ	0xFEE
  8269                           wreg	equ	0xFE8
  8270                           indf1	equ	0xFE7
  8271                           postinc1	equ	0xFE6
  8272                           postdec1	equ	0xFE5
  8273                           fsr1h	equ	0xFE2
  8274                           fsr1l	equ	0xFE1
  8275                           indf2	equ	0xFDF
  8276                           postinc2	equ	0xFDE
  8277                           postdec2	equ	0xFDD
  8278                           fsr2h	equ	0xFDA
  8279                           fsr2l	equ	0xFD9
  8280                           status	equ	0xFD8
  8281                           
  8282 ;; *************** function _get_latitude *****************
  8283 ;; Defined at:
  8284 ;;		line 141 in file "bibliotecas/GPS.c"
  8285 ;; Parameters:    Size  Location     Type
  8286 ;;  lat_pointer     1    wreg     unsigned char 
  8287 ;; Auto vars:     Size  Location     Type
  8288 ;;  lat_pointer     1   44[BANK0 ] unsigned char 
  8289 ;;  Lat_Buffer     15   26[BANK0 ] unsigned char [15]
  8290 ;;  _latitude       3   41[BANK0 ] float 
  8291 ;;  lat_index       1   46[BANK0 ] unsigned char 
  8292 ;;  index           1   45[BANK0 ] unsigned char 
  8293 ;; Return value:  Size  Location     Type
  8294 ;;                  3   23[BANK0 ] float 
  8295 ;; Registers used:
  8296 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8297 ;; Tracked objects:
  8298 ;;		On entry : 0/0
  8299 ;;		On exit  : 0/0
  8300 ;;		Unchanged: 0/0
  8301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8302 ;;      Params:         0       3       0       0       0       0       0       0       0
  8303 ;;      Locals:         0      21       0       0       0       0       0       0       0
  8304 ;;      Temps:          1       0       0       0       0       0       0       0       0
  8305 ;;      Totals:         1      24       0       0       0       0       0       0       0
  8306 ;;Total ram usage:       25 bytes
  8307 ;; Hardware stack levels used:    1
  8308 ;; Hardware stack levels required when called:    6
  8309 ;; This function calls:
  8310 ;;		_atof
  8311 ;; This function is called by:
  8312 ;;		_GPS
  8313 ;; This function uses a non-reentrant model
  8314 ;;
  8315                           
  8316                           	psect	text34
  8317  0028DC                     __ptext34:
  8318                           	opt stack 0
  8319  0028DC                     _get_latitude:
  8320                           	opt stack 22
  8321                           
  8322                           ;incstack = 0
  8323                           ;get_latitude@lat_pointer stored from wreg
  8324  0028DC  0100               	movlb	0	; () banked
  8325  0028DE  6F8C               	movwf	get_latitude@lat_pointer& (0+255),b
  8326                           
  8327                           ;GPS.c: 143: unsigned char lat_index = lat_pointer+1;
  8328  0028E0  0100               	movlb	0	; () banked
  8329  0028E2  298C               	incf	get_latitude@lat_pointer& (0+255),w,b
  8330  0028E4  0100               	movlb	0	; () banked
  8331  0028E6  6F8E               	movwf	get_latitude@lat_index& (0+255),b
  8332                           
  8333                           ; BSR set to: 0
  8334                           ;GPS.c: 144: unsigned char index = 0;
  8335  0028E8  0E00               	movlw	0
  8336  0028EA  0100               	movlb	0	; () banked
  8337  0028EC  6F8D               	movwf	get_latitude@index& (0+255),b
  8338                           
  8339                           ;GPS.c: 145: char Lat_Buffer[15];
  8340                           ;GPS.c: 146: float _latitude;
  8341                           ;GPS.c: 149: for(;GGA_Buffer[lat_index]!=',';lat_index++){
  8342  0028EE  D018               	goto	l10529
  8343  0028F0                     l10523:
  8344                           
  8345                           ; BSR set to: 0
  8346                           ;GPS.c: 150: Lat_Buffer[index]= GGA_Buffer[lat_index];
  8347  0028F0  0100               	movlb	0	; () banked
  8348  0028F2  518E               	movf	get_latitude@lat_index& (0+255),w,b
  8349  0028F4  0D01               	mullw	1
  8350  0028F6  0E00               	movlw	low _GGA_Buffer
  8351  0028F8  24F3               	addwf	prodl,w,c
  8352  0028FA  6ED9               	movwf	fsr2l,c
  8353  0028FC  0E01               	movlw	high _GGA_Buffer
  8354  0028FE  20F4               	addwfc	prodh,w,c
  8355  002900  6EDA               	movwf	fsr2h,c
  8356  002902  0100               	movlb	0	; () banked
  8357  002904  518D               	movf	get_latitude@index& (0+255),w,b
  8358  002906  0D01               	mullw	1
  8359  002908  0E7A               	movlw	low get_latitude@Lat_Buffer
  8360  00290A  24F3               	addwf	prodl,w,c
  8361  00290C  6EE1               	movwf	fsr1l,c
  8362  00290E  0E00               	movlw	high get_latitude@Lat_Buffer
  8363  002910  20F4               	addwfc	prodh,w,c
  8364  002912  6EE2               	movwf	fsr1h,c
  8365  002914  CFDF FFE7          	movff	indf2,indf1
  8366                           
  8367                           ; BSR set to: 0
  8368                           ;GPS.c: 151: index++;
  8369  002918  0100               	movlb	0	; () banked
  8370  00291A  2B8D               	incf	get_latitude@index& (0+255),f,b
  8371                           
  8372                           ; BSR set to: 0
  8373  00291C  0100               	movlb	0	; () banked
  8374  00291E  2B8E               	incf	get_latitude@lat_index& (0+255),f,b
  8375  002920                     l10529:
  8376                           
  8377                           ; BSR set to: 0
  8378  002920  0100               	movlb	0	; () banked
  8379  002922  518E               	movf	get_latitude@lat_index& (0+255),w,b
  8380  002924  0D01               	mullw	1
  8381  002926  0E00               	movlw	low _GGA_Buffer
  8382  002928  24F3               	addwf	prodl,w,c
  8383  00292A  6ED9               	movwf	fsr2l,c
  8384  00292C  0E01               	movlw	high _GGA_Buffer
  8385  00292E  20F4               	addwfc	prodh,w,c
  8386  002930  6EDA               	movwf	fsr2h,c
  8387  002932  0E2C               	movlw	44
  8388  002934  18DE               	xorwf	postinc2,w,c
  8389  002936  A4D8               	btfss	status,2,c
  8390  002938  D7DB               	goto	l10523
  8391                           
  8392                           ; BSR set to: 0
  8393                           ;GPS.c: 152: }
  8394                           ;GPS.c: 153: lat_index++;
  8395                           
  8396                           ; BSR set to: 0
  8397  00293A  0100               	movlb	0	; () banked
  8398  00293C  2B8E               	incf	get_latitude@lat_index& (0+255),f,b
  8399                           
  8400                           ; BSR set to: 0
  8401                           ;GPS.c: 154: N_S = GGA_Buffer[lat_index];
  8402  00293E  0100               	movlb	0	; () banked
  8403  002940  518E               	movf	get_latitude@lat_index& (0+255),w,b
  8404  002942  0D01               	mullw	1
  8405  002944  0E00               	movlw	low _GGA_Buffer
  8406  002946  24F3               	addwf	prodl,w,c
  8407  002948  6ED9               	movwf	fsr2l,c
  8408  00294A  0E01               	movlw	high _GGA_Buffer
  8409  00294C  20F4               	addwfc	prodh,w,c
  8410  00294E  6EDA               	movwf	fsr2h,c
  8411  002950  50DF               	movf	indf2,w,c
  8412  002952  0100               	movlb	0	; () banked
  8413  002954  6FDB               	movwf	_N_S& (0+255),b
  8414                           
  8415                           ; BSR set to: 0
  8416                           ;GPS.c: 155: _latitude = atof(Lat_Buffer);
  8417  002956  0E7A               	movlw	low get_latitude@Lat_Buffer
  8418  002958  0100               	movlb	0	; () banked
  8419  00295A  6F74               	movwf	atof@s& (0+255),b
  8420  00295C  0E00               	movlw	high get_latitude@Lat_Buffer
  8421  00295E  0100               	movlb	0	; () banked
  8422  002960  6F75               	movwf	(atof@s+1)& (0+255),b
  8423  002962  EC2B  F01A         	call	_atof	;wreg free
  8424  002966  C074  F089         	movff	?_atof,get_latitude@_latitude
  8425  00296A  C075  F08A         	movff	?_atof+1,get_latitude@_latitude+1
  8426  00296E  C076  F08B         	movff	?_atof+2,get_latitude@_latitude+2
  8427                           
  8428                           ;GPS.c: 156: return _latitude;
  8429  002972  C089  F077         	movff	get_latitude@_latitude,?_get_latitude
  8430  002976  C08A  F078         	movff	get_latitude@_latitude+1,?_get_latitude+1
  8431  00297A  C08B  F079         	movff	get_latitude@_latitude+2,?_get_latitude+2
  8432  00297E  0012               	return	
  8433  002980                     __end_of_get_latitude:
  8434                           	opt stack 0
  8435                           tosu	equ	0xFFF
  8436                           tosh	equ	0xFFE
  8437                           tosl	equ	0xFFD
  8438                           pclath	equ	0xFFA
  8439                           tblptru	equ	0xFF8
  8440                           tblptrh	equ	0xFF7
  8441                           tblptrl	equ	0xFF6
  8442                           tablat	equ	0xFF5
  8443                           prodh	equ	0xFF4
  8444                           prodl	equ	0xFF3
  8445                           intcon	equ	0xFF2
  8446                           intcon2	equ	0xFF1
  8447                           intcon3	equ	0xFF0
  8448                           postinc0	equ	0xFEE
  8449                           wreg	equ	0xFE8
  8450                           indf1	equ	0xFE7
  8451                           postinc1	equ	0xFE6
  8452                           postdec1	equ	0xFE5
  8453                           fsr1h	equ	0xFE2
  8454                           fsr1l	equ	0xFE1
  8455                           indf2	equ	0xFDF
  8456                           postinc2	equ	0xFDE
  8457                           postdec2	equ	0xFDD
  8458                           fsr2h	equ	0xFDA
  8459                           fsr2l	equ	0xFD9
  8460                           status	equ	0xFD8
  8461                           
  8462 ;; *************** function _atof *****************
  8463 ;; Defined at:
  8464 ;;		line 200 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\atof.c"
  8465 ;; Parameters:    Size  Location     Type
  8466 ;;  s               2   20[BANK0 ] PTR const unsigned char 
  8467 ;;		 -> get_sv@date_buffer(15), get_altitude@Alt_Buffer(12), get_longitude@Long_Buffer(15), get_latitude@Lat_Buffer(15),
      + 
  8468 ;; Auto vars:     Size  Location     Type
  8469 ;;		None
  8470 ;; Return value:  Size  Location     Type
  8471 ;;                  3   20[BANK0 ] PTR const unsigned char 
  8472 ;; Registers used:
  8473 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8474 ;; Tracked objects:
  8475 ;;		On entry : 0/0
  8476 ;;		On exit  : 0/0
  8477 ;;		Unchanged: 0/0
  8478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8479 ;;      Params:         0       3       0       0       0       0       0       0       0
  8480 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8481 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8482 ;;      Totals:         0       3       0       0       0       0       0       0       0
  8483 ;;Total ram usage:        3 bytes
  8484 ;; Hardware stack levels used:    1
  8485 ;; Hardware stack levels required when called:    5
  8486 ;; This function calls:
  8487 ;;		_strtod
  8488 ;; This function is called by:
  8489 ;;		_get_latitude
  8490 ;;		_get_longitude
  8491 ;;		_get_altitude
  8492 ;;		_get_sv
  8493 ;; This function uses a non-reentrant model
  8494 ;;
  8495                           
  8496                           	psect	text35
  8497  003456                     __ptext35:
  8498                           	opt stack 0
  8499  003456                     _atof:
  8500                           	opt stack 22
  8501                           
  8502                           ;incstack = 0
  8503  003456  C074  F069         	movff	atof@s,strtod@s
  8504  00345A  C075  F06A         	movff	atof@s+1,strtod@s+1
  8505  00345E  0E00               	movlw	0
  8506  003460  0100               	movlb	0	; () banked
  8507  003462  6F6B               	movwf	strtod@res& (0+255),b
  8508  003464  0E00               	movlw	0
  8509  003466  0100               	movlb	0	; () banked
  8510  003468  6F6C               	movwf	(strtod@res+1)& (0+255),b
  8511  00346A  ECAD  F004         	call	_strtod	;wreg free
  8512  00346E  C069  F074         	movff	?_strtod,?_atof
  8513  003472  C06A  F075         	movff	?_strtod+1,?_atof+1
  8514  003476  C06B  F076         	movff	?_strtod+2,?_atof+2
  8515  00347A  0012               	return	
  8516  00347C                     __end_of_atof:
  8517                           	opt stack 0
  8518                           tosu	equ	0xFFF
  8519                           tosh	equ	0xFFE
  8520                           tosl	equ	0xFFD
  8521                           pclath	equ	0xFFA
  8522                           tblptru	equ	0xFF8
  8523                           tblptrh	equ	0xFF7
  8524                           tblptrl	equ	0xFF6
  8525                           tablat	equ	0xFF5
  8526                           prodh	equ	0xFF4
  8527                           prodl	equ	0xFF3
  8528                           intcon	equ	0xFF2
  8529                           intcon2	equ	0xFF1
  8530                           intcon3	equ	0xFF0
  8531                           postinc0	equ	0xFEE
  8532                           wreg	equ	0xFE8
  8533                           indf1	equ	0xFE7
  8534                           postinc1	equ	0xFE6
  8535                           postdec1	equ	0xFE5
  8536                           fsr1h	equ	0xFE2
  8537                           fsr1l	equ	0xFE1
  8538                           indf2	equ	0xFDF
  8539                           postinc2	equ	0xFDE
  8540                           postdec2	equ	0xFDD
  8541                           fsr2h	equ	0xFDA
  8542                           fsr2l	equ	0xFD9
  8543                           status	equ	0xFD8
  8544                           
  8545 ;; *************** function _strtod *****************
  8546 ;; Defined at:
  8547 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\atof.c"
  8548 ;; Parameters:    Size  Location     Type
  8549 ;;  s               2    9[BANK0 ] PTR const unsigned char 
  8550 ;;		 -> get_sv@date_buffer(15), get_altitude@Alt_Buffer(12), get_longitude@Long_Buffer(15), get_latitude@Lat_Buffer(15),
      + 
  8551 ;;  res             2   11[BANK0 ] PTR PTR const unsigned c
  8552 ;;		 -> NULL(0), 
  8553 ;; Auto vars:     Size  Location     Type
  8554 ;;  _u              4   16[BANK0 ] struct .
  8555 ;;  expon           1   15[BANK0 ] char 
  8556 ;;  flags           1   14[BANK0 ] unsigned char 
  8557 ;;  eexp            1   13[BANK0 ] char 
  8558 ;; Return value:  Size  Location     Type
  8559 ;;                  3    9[BANK0 ] char 
  8560 ;; Registers used:
  8561 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8562 ;; Tracked objects:
  8563 ;;		On entry : 0/0
  8564 ;;		On exit  : 0/0
  8565 ;;		Unchanged: 0/0
  8566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8567 ;;      Params:         0       4       0       0       0       0       0       0       0
  8568 ;;      Locals:         0       7       0       0       0       0       0       0       0
  8569 ;;      Temps:          1       0       0       0       0       0       0       0       0
  8570 ;;      Totals:         1      11       0       0       0       0       0       0       0
  8571 ;;Total ram usage:       12 bytes
  8572 ;; Hardware stack levels used:    1
  8573 ;; Hardware stack levels required when called:    4
  8574 ;; This function calls:
  8575 ;;		___altoft
  8576 ;;		___ftdiv
  8577 ;;		___ftge
  8578 ;;		___ftmul
  8579 ;;		___ftneg
  8580 ;;		___lmul
  8581 ;;		_isdigit
  8582 ;;		_isspace
  8583 ;; This function is called by:
  8584 ;;		_atof
  8585 ;; This function uses a non-reentrant model
  8586 ;;
  8587                           
  8588                           	psect	text36
  8589  00095A                     __ptext36:
  8590                           	opt stack 0
  8591  00095A                     _strtod:
  8592                           	opt stack 22
  8593                           
  8594                           ;incstack = 0
  8595  00095A  0100               	movlb	0	; () banked
  8596  00095C  516B               	movf	strtod@res& (0+255),w,b
  8597  00095E  0100               	movlb	0	; () banked
  8598  000960  116C               	iorwf	(strtod@res+1)& (0+255),w,b
  8599  000962  B4D8               	btfsc	status,2,c
  8600  000964  D00C               	goto	l9681
  8601                           
  8602                           ; BSR set to: 0
  8603  000966  C06B  FFD9         	movff	strtod@res,fsr2l
  8604  00096A  C06C  FFDA         	movff	strtod@res+1,fsr2h
  8605  00096E  C069  FFDE         	movff	strtod@s,postinc2
  8606  000972  C06A  FFDD         	movff	strtod@s+1,postdec2
  8607                           
  8608                           ; BSR set to: 0
  8609  000976  D003               	goto	l9681
  8610  000978                     l9679:
  8611  000978  0100               	movlb	0	; () banked
  8612  00097A  4B69               	infsnz	strtod@s& (0+255),f,b
  8613  00097C  2B6A               	incf	(strtod@s+1)& (0+255),f,b
  8614  00097E                     l9681:
  8615                           
  8616                           ; BSR set to: 0
  8617  00097E  C069  FFD9         	movff	strtod@s,fsr2l
  8618  000982  C06A  FFDA         	movff	strtod@s+1,fsr2h
  8619  000986  50DF               	movf	indf2,w,c
  8620  000988  0100               	movlb	0	; () banked
  8621  00098A  6F6D               	movwf	strtod@eexp& (0+255),b
  8622  00098C  0100               	movlb	0	; () banked
  8623  00098E  516D               	movf	strtod@eexp& (0+255),w,b
  8624  000990  EC3E  F01A         	call	_isspace
  8625  000994  B0D8               	btfsc	status,0,c
  8626  000996  D7F0               	goto	l9679
  8627  000998  0E00               	movlw	0
  8628  00099A  0100               	movlb	0	; () banked
  8629  00099C  6F6E               	movwf	strtod@flags& (0+255),b
  8630                           
  8631                           ; BSR set to: 0
  8632  00099E  0E2D               	movlw	45
  8633  0009A0  0100               	movlb	0	; () banked
  8634  0009A2  196D               	xorwf	strtod@eexp& (0+255),w,b
  8635  0009A4  A4D8               	btfss	status,2,c
  8636  0009A6  D004               	goto	l9691
  8637                           
  8638                           ; BSR set to: 0
  8639  0009A8  0E01               	movlw	1
  8640  0009AA  0100               	movlb	0	; () banked
  8641  0009AC  6F6E               	movwf	strtod@flags& (0+255),b
  8642  0009AE  D005               	goto	l9693
  8643  0009B0                     l9691:
  8644                           
  8645                           ; BSR set to: 0
  8646  0009B0  0E2B               	movlw	43
  8647  0009B2  0100               	movlb	0	; () banked
  8648  0009B4  196D               	xorwf	strtod@eexp& (0+255),w,b
  8649  0009B6  A4D8               	btfss	status,2,c
  8650  0009B8  D003               	goto	l9695
  8651  0009BA                     l9693:
  8652                           
  8653                           ; BSR set to: 0
  8654  0009BA  0100               	movlb	0	; () banked
  8655  0009BC  4B69               	infsnz	strtod@s& (0+255),f,b
  8656  0009BE  2B6A               	incf	(strtod@s+1)& (0+255),f,b
  8657  0009C0                     l9695:
  8658                           
  8659                           ; BSR set to: 0
  8660  0009C0  0E00               	movlw	0
  8661  0009C2  0100               	movlb	0	; () banked
  8662  0009C4  6F6D               	movwf	strtod@eexp& (0+255),b
  8663                           
  8664                           ; BSR set to: 0
  8665  0009C6  0E00               	movlw	0
  8666  0009C8  0100               	movlb	0	; () banked
  8667  0009CA  6F70               	movwf	strtod@_u& (0+255),b
  8668  0009CC  0E00               	movlw	0
  8669  0009CE  6F71               	movwf	(strtod@_u+1)& (0+255),b
  8670  0009D0  0E00               	movlw	0
  8671  0009D2  6F72               	movwf	(strtod@_u+2)& (0+255),b
  8672  0009D4  0E00               	movlw	0
  8673  0009D6  6F73               	movwf	(strtod@_u+3)& (0+255),b
  8674                           
  8675                           ; BSR set to: 0
  8676  0009D8  0E00               	movlw	0
  8677  0009DA  0100               	movlb	0	; () banked
  8678  0009DC  6F6F               	movwf	strtod@expon& (0+255),b
  8679  0009DE                     l9701:
  8680                           
  8681                           ; BSR set to: 0
  8682  0009DE  0100               	movlb	0	; () banked
  8683  0009E0  B96E               	btfsc	strtod@flags& (0+255),4,b
  8684  0009E2  D00B               	goto	l9707
  8685                           
  8686                           ; BSR set to: 0
  8687  0009E4  C069  FFD9         	movff	strtod@s,fsr2l
  8688  0009E8  C06A  FFDA         	movff	strtod@s+1,fsr2h
  8689  0009EC  0E2E               	movlw	46
  8690  0009EE  18DE               	xorwf	postinc2,w,c
  8691  0009F0  A4D8               	btfss	status,2,c
  8692  0009F2  D003               	goto	l9707
  8693                           
  8694                           ; BSR set to: 0
  8695  0009F4  0100               	movlb	0	; () banked
  8696  0009F6  896E               	bsf	strtod@flags& (0+255),4,b
  8697  0009F8  D046               	goto	l1530
  8698  0009FA                     l9707:
  8699                           
  8700                           ; BSR set to: 0
  8701  0009FA  C069  FFD9         	movff	strtod@s,fsr2l
  8702  0009FE  C06A  FFDA         	movff	strtod@s+1,fsr2h
  8703  000A02  50DF               	movf	indf2,w,c
  8704  000A04  EC74  F01A         	call	_isdigit
  8705  000A08  A0D8               	btfss	status,0,c
  8706  000A0A  D041               	goto	l9725
  8707  000A0C  0100               	movlb	0	; () banked
  8708  000A0E  836E               	bsf	strtod@flags& (0+255),1,b
  8709                           
  8710                           ; BSR set to: 0
  8711  000A10  0E08               	movlw	8
  8712  000A12  0100               	movlb	0	; () banked
  8713  000A14  196D               	xorwf	strtod@eexp& (0+255),w,b
  8714  000A16  B4D8               	btfsc	status,2,c
  8715  000A18  D031               	goto	l1528
  8716                           
  8717                           ; BSR set to: 0
  8718  000A1A  0100               	movlb	0	; () banked
  8719  000A1C  A96E               	btfss	strtod@flags& (0+255),4,b
  8720  000A1E  D002               	goto	l1529
  8721                           
  8722                           ; BSR set to: 0
  8723  000A20  0100               	movlb	0	; () banked
  8724  000A22  076F               	decf	strtod@expon& (0+255),f,b
  8725  000A24                     l1529:
  8726                           
  8727                           ; BSR set to: 0
  8728  000A24  0100               	movlb	0	; () banked
  8729  000A26  2B6D               	incf	strtod@eexp& (0+255),f,b
  8730                           
  8731                           ; BSR set to: 0
  8732  000A28  C070  F016         	movff	strtod@_u,___lmul@multiplier
  8733  000A2C  C071  F017         	movff	strtod@_u+1,___lmul@multiplier+1
  8734  000A30  C072  F018         	movff	strtod@_u+2,___lmul@multiplier+2
  8735  000A34  C073  F019         	movff	strtod@_u+3,___lmul@multiplier+3
  8736  000A38  0E0A               	movlw	10
  8737  000A3A  6E1A               	movwf	___lmul@multiplicand,c
  8738  000A3C  0E00               	movlw	0
  8739  000A3E  6E1B               	movwf	___lmul@multiplicand+1,c
  8740  000A40  0E00               	movlw	0
  8741  000A42  6E1C               	movwf	___lmul@multiplicand+2,c
  8742  000A44  0E00               	movlw	0
  8743  000A46  6E1D               	movwf	___lmul@multiplicand+3,c
  8744  000A48  EC58  F018         	call	___lmul	;wreg free
  8745  000A4C  C016  F070         	movff	?___lmul,strtod@_u
  8746  000A50  C017  F071         	movff	?___lmul+1,strtod@_u+1
  8747  000A54  C018  F072         	movff	?___lmul+2,strtod@_u+2
  8748  000A58  C019  F073         	movff	?___lmul+3,strtod@_u+3
  8749  000A5C  C069  FFD9         	movff	strtod@s,fsr2l
  8750  000A60  C06A  FFDA         	movff	strtod@s+1,fsr2h
  8751  000A64  50DF               	movf	indf2,w,c
  8752  000A66  6E33               	movwf	??_strtod& (0+255),c
  8753  000A68  0ED0               	movlw	208
  8754  000A6A  2633               	addwf	??_strtod,f,c
  8755  000A6C  5033               	movf	??_strtod,w,c
  8756  000A6E  0100               	movlb	0	; () banked
  8757  000A70  2770               	addwf	strtod@_u& (0+255),f,b
  8758  000A72  0E00               	movlw	0
  8759  000A74  2371               	addwfc	(strtod@_u+1)& (0+255),f,b
  8760  000A76  2372               	addwfc	(strtod@_u+2)& (0+255),f,b
  8761  000A78  2373               	addwfc	(strtod@_u+3)& (0+255),f,b
  8762  000A7A  D005               	goto	l1530
  8763  000A7C                     l1528:
  8764                           
  8765                           ; BSR set to: 0
  8766  000A7C  0100               	movlb	0	; () banked
  8767  000A7E  B96E               	btfsc	strtod@flags& (0+255),4,b
  8768  000A80  D002               	goto	l1530
  8769                           
  8770                           ; BSR set to: 0
  8771  000A82  0100               	movlb	0	; () banked
  8772  000A84  2B6F               	incf	strtod@expon& (0+255),f,b
  8773  000A86                     l1530:
  8774                           
  8775                           ; BSR set to: 0
  8776  000A86  0100               	movlb	0	; () banked
  8777  000A88  4B69               	infsnz	strtod@s& (0+255),f,b
  8778  000A8A  2B6A               	incf	(strtod@s+1)& (0+255),f,b
  8779                           
  8780                           ; BSR set to: 0
  8781  000A8C  D7A8               	goto	l9701
  8782  000A8E                     l9725:
  8783  000A8E  0E00               	movlw	0
  8784  000A90  0100               	movlb	0	; () banked
  8785  000A92  6F6D               	movwf	strtod@eexp& (0+255),b
  8786                           
  8787                           ; BSR set to: 0
  8788  000A94  C069  FFD9         	movff	strtod@s,fsr2l
  8789  000A98  C06A  FFDA         	movff	strtod@s+1,fsr2h
  8790  000A9C  0E65               	movlw	101
  8791  000A9E  18DE               	xorwf	postinc2,w,c
  8792  000AA0  B4D8               	btfsc	status,2,c
  8793  000AA2  D008               	goto	l9731
  8794                           
  8795                           ; BSR set to: 0
  8796  000AA4  C069  FFD9         	movff	strtod@s,fsr2l
  8797  000AA8  C06A  FFDA         	movff	strtod@s+1,fsr2h
  8798  000AAC  0E45               	movlw	69
  8799  000AAE  18DE               	xorwf	postinc2,w,c
  8800  000AB0  A4D8               	btfss	status,2,c
  8801  000AB2  D06B               	goto	l9763
  8802  000AB4                     l9731:
  8803                           
  8804                           ; BSR set to: 0
  8805  000AB4  0100               	movlb	0	; () banked
  8806  000AB6  4B69               	infsnz	strtod@s& (0+255),f,b
  8807  000AB8  2B6A               	incf	(strtod@s+1)& (0+255),f,b
  8808  000ABA  C069  FFD9         	movff	strtod@s,fsr2l
  8809  000ABE  C06A  FFDA         	movff	strtod@s+1,fsr2h
  8810  000AC2  0E2D               	movlw	45
  8811  000AC4  18DE               	xorwf	postinc2,w,c
  8812  000AC6  A4D8               	btfss	status,2,c
  8813  000AC8  D003               	goto	l9735
  8814                           
  8815                           ; BSR set to: 0
  8816  000ACA  0100               	movlb	0	; () banked
  8817  000ACC  876E               	bsf	strtod@flags& (0+255),3,b
  8818  000ACE  D008               	goto	l9739
  8819  000AD0                     l9735:
  8820                           
  8821                           ; BSR set to: 0
  8822  000AD0  C069  FFD9         	movff	strtod@s,fsr2l
  8823  000AD4  C06A  FFDA         	movff	strtod@s+1,fsr2h
  8824  000AD8  0E2B               	movlw	43
  8825  000ADA  18DE               	xorwf	postinc2,w,c
  8826  000ADC  A4D8               	btfss	status,2,c
  8827  000ADE  D003               	goto	l9741
  8828  000AE0                     l9739:
  8829                           
  8830                           ; BSR set to: 0
  8831  000AE0  0100               	movlb	0	; () banked
  8832  000AE2  4B69               	infsnz	strtod@s& (0+255),f,b
  8833  000AE4  2B6A               	incf	(strtod@s+1)& (0+255),f,b
  8834  000AE6                     l9741:
  8835                           
  8836                           ; BSR set to: 0
  8837  000AE6  C069  FFD9         	movff	strtod@s,fsr2l
  8838  000AEA  C06A  FFDA         	movff	strtod@s+1,fsr2h
  8839  000AEE  0E30               	movlw	48
  8840  000AF0  18DE               	xorwf	postinc2,w,c
  8841  000AF2  B4D8               	btfsc	status,2,c
  8842  000AF4  D7F5               	goto	l9739
  8843                           
  8844                           ; BSR set to: 0
  8845                           
  8846                           ; BSR set to: 0
  8847  000AF6  C069  FFD9         	movff	strtod@s,fsr2l
  8848  000AFA  C06A  FFDA         	movff	strtod@s+1,fsr2h
  8849  000AFE  50DF               	movf	indf2,w,c
  8850  000B00  EC74  F01A         	call	_isdigit
  8851  000B04  A0D8               	btfss	status,0,c
  8852  000B06  D03C               	goto	l9759
  8853  000B08  C069  FFD9         	movff	strtod@s,fsr2l
  8854  000B0C  C06A  FFDA         	movff	strtod@s+1,fsr2h
  8855  000B10  50DF               	movf	indf2,w,c
  8856  000B12  0FD0               	addlw	208
  8857  000B14  0100               	movlb	0	; () banked
  8858  000B16  6F6D               	movwf	strtod@eexp& (0+255),b
  8859                           
  8860                           ; BSR set to: 0
  8861  000B18  0100               	movlb	0	; () banked
  8862  000B1A  4B69               	infsnz	strtod@s& (0+255),f,b
  8863  000B1C  2B6A               	incf	(strtod@s+1)& (0+255),f,b
  8864                           
  8865                           ; BSR set to: 0
  8866  000B1E  C069  FFD9         	movff	strtod@s,fsr2l
  8867  000B22  C06A  FFDA         	movff	strtod@s+1,fsr2h
  8868  000B26  50DF               	movf	indf2,w,c
  8869  000B28  EC74  F01A         	call	_isdigit
  8870  000B2C  A0D8               	btfss	status,0,c
  8871  000B2E  D028               	goto	l9759
  8872  000B30  C069  FFD9         	movff	strtod@s,fsr2l
  8873  000B34  C06A  FFDA         	movff	strtod@s+1,fsr2h
  8874  000B38  50DF               	movf	indf2,w,c
  8875  000B3A  6E33               	movwf	??_strtod& (0+255),c
  8876  000B3C  0100               	movlb	0	; () banked
  8877  000B3E  516D               	movf	strtod@eexp& (0+255),w,b
  8878  000B40  0D0A               	mullw	10
  8879  000B42  50F3               	movf	prodl,w,c
  8880  000B44  2433               	addwf	??_strtod,w,c
  8881  000B46  0FD0               	addlw	208
  8882  000B48  0100               	movlb	0	; () banked
  8883  000B4A  6F6D               	movwf	strtod@eexp& (0+255),b
  8884                           
  8885                           ; BSR set to: 0
  8886  000B4C  0100               	movlb	0	; () banked
  8887  000B4E  4B69               	infsnz	strtod@s& (0+255),f,b
  8888  000B50  2B6A               	incf	(strtod@s+1)& (0+255),f,b
  8889                           
  8890                           ; BSR set to: 0
  8891  000B52  C069  FFD9         	movff	strtod@s,fsr2l
  8892  000B56  C06A  FFDA         	movff	strtod@s+1,fsr2h
  8893  000B5A  50DF               	movf	indf2,w,c
  8894  000B5C  EC74  F01A         	call	_isdigit
  8895  000B60  A0D8               	btfss	status,0,c
  8896  000B62  D00E               	goto	l9759
  8897  000B64  C069  FFD9         	movff	strtod@s,fsr2l
  8898  000B68  C06A  FFDA         	movff	strtod@s+1,fsr2h
  8899  000B6C  50DF               	movf	indf2,w,c
  8900  000B6E  6E33               	movwf	??_strtod& (0+255),c
  8901  000B70  0100               	movlb	0	; () banked
  8902  000B72  516D               	movf	strtod@eexp& (0+255),w,b
  8903  000B74  0D0A               	mullw	10
  8904  000B76  50F3               	movf	prodl,w,c
  8905  000B78  2433               	addwf	??_strtod,w,c
  8906  000B7A  0FD0               	addlw	208
  8907  000B7C  0100               	movlb	0	; () banked
  8908  000B7E  6F6D               	movwf	strtod@eexp& (0+255),b
  8909  000B80                     l9759:
  8910  000B80  0100               	movlb	0	; () banked
  8911  000B82  A76E               	btfss	strtod@flags& (0+255),3,b
  8912  000B84  D002               	goto	l9763
  8913                           
  8914                           ; BSR set to: 0
  8915  000B86  0100               	movlb	0	; () banked
  8916  000B88  6D6D               	negf	strtod@eexp& (0+255),b
  8917  000B8A                     l9763:
  8918                           
  8919                           ; BSR set to: 0
  8920  000B8A  0100               	movlb	0	; () banked
  8921  000B8C  516D               	movf	strtod@eexp& (0+255),w,b
  8922  000B8E  0100               	movlb	0	; () banked
  8923  000B90  276F               	addwf	strtod@expon& (0+255),f,b
  8924                           
  8925                           ; BSR set to: 0
  8926  000B92  0100               	movlb	0	; () banked
  8927  000B94  516B               	movf	strtod@res& (0+255),w,b
  8928  000B96  0100               	movlb	0	; () banked
  8929  000B98  116C               	iorwf	(strtod@res+1)& (0+255),w,b
  8930  000B9A  B4D8               	btfsc	status,2,c
  8931  000B9C  D00B               	goto	l9771
  8932                           
  8933                           ; BSR set to: 0
  8934  000B9E  0100               	movlb	0	; () banked
  8935  000BA0  A36E               	btfss	strtod@flags& (0+255),1,b
  8936  000BA2  D008               	goto	l9771
  8937                           
  8938                           ; BSR set to: 0
  8939  000BA4  C06B  FFD9         	movff	strtod@res,fsr2l
  8940  000BA8  C06C  FFDA         	movff	strtod@res+1,fsr2h
  8941  000BAC  C069  FFDE         	movff	strtod@s,postinc2
  8942  000BB0  C06A  FFDD         	movff	strtod@s+1,postdec2
  8943  000BB4                     l9771:
  8944                           
  8945                           ; BSR set to: 0
  8946  000BB4  C070  F01E         	movff	strtod@_u,___altoft@c
  8947  000BB8  C071  F01F         	movff	strtod@_u+1,___altoft@c+1
  8948  000BBC  C072  F020         	movff	strtod@_u+2,___altoft@c+2
  8949  000BC0  C073  F021         	movff	strtod@_u+3,___altoft@c+3
  8950  000BC4  EC72  F016         	call	___altoft	;wreg free
  8951  000BC8  C01E  F070         	movff	?___altoft,strtod@_u
  8952  000BCC  C01F  F071         	movff	?___altoft+1,strtod@_u+1
  8953  000BD0  C020  F072         	movff	?___altoft+2,strtod@_u+2
  8954  000BD4  0100               	movlb	0	; () banked
  8955  000BD6  5170               	movf	strtod@_u& (0+255),w,b
  8956  000BD8  0100               	movlb	0	; () banked
  8957  000BDA  1171               	iorwf	(strtod@_u+1)& (0+255),w,b
  8958  000BDC  0100               	movlb	0	; () banked
  8959  000BDE  1172               	iorwf	(strtod@_u+2)& (0+255),w,b
  8960  000BE0  A4D8               	btfss	status,2,c
  8961  000BE2  D00A               	goto	l9779
  8962                           
  8963                           ; BSR set to: 0
  8964  000BE4  0E00               	movlw	0
  8965  000BE6  0100               	movlb	0	; () banked
  8966  000BE8  6F69               	movwf	?_strtod& (0+255),b
  8967  000BEA  0E00               	movlw	0
  8968  000BEC  0100               	movlb	0	; () banked
  8969  000BEE  6F6A               	movwf	(?_strtod+1)& (0+255),b
  8970  000BF0  0E00               	movlw	0
  8971  000BF2  0100               	movlb	0	; () banked
  8972  000BF4  6F6B               	movwf	(?_strtod+2)& (0+255),b
  8973                           
  8974                           ; BSR set to: 0
  8975  000BF6  0012               	return	
  8976  000BF8                     l9779:
  8977                           
  8978                           ; BSR set to: 0
  8979  000BF8  0100               	movlb	0	; () banked
  8980  000BFA  AF6F               	btfss	strtod@expon& (0+255),7,b
  8981  000BFC  D063               	goto	l9807
  8982                           
  8983                           ; BSR set to: 0
  8984  000BFE  0100               	movlb	0	; () banked
  8985  000C00  6D6F               	negf	strtod@expon& (0+255),b
  8986  000C02  D017               	goto	l9787
  8987  000C04                     l9783:
  8988                           
  8989                           ; BSR set to: 0
  8990  000C04  C070  F01E         	movff	strtod@_u,___ftdiv@f1
  8991  000C08  C071  F01F         	movff	strtod@_u+1,___ftdiv@f1+1
  8992  000C0C  C072  F020         	movff	strtod@_u+2,___ftdiv@f1+2
  8993  000C10  0E03               	movlw	3
  8994  000C12  6E21               	movwf	___ftdiv@f2,c
  8995  000C14  0E15               	movlw	21
  8996  000C16  6E22               	movwf	___ftdiv@f2+1,c
  8997  000C18  0E50               	movlw	80
  8998  000C1A  6E23               	movwf	___ftdiv@f2+2,c
  8999  000C1C  EC40  F012         	call	___ftdiv	;wreg free
  9000  000C20  C01E  F070         	movff	?___ftdiv,strtod@_u
  9001  000C24  C01F  F071         	movff	?___ftdiv+1,strtod@_u+1
  9002  000C28  C020  F072         	movff	?___ftdiv+2,strtod@_u+2
  9003  000C2C  0EF6               	movlw	246
  9004  000C2E  0100               	movlb	0	; () banked
  9005  000C30  276F               	addwf	strtod@expon& (0+255),f,b
  9006  000C32                     l9787:
  9007                           
  9008                           ; BSR set to: 0
  9009  000C32  0100               	movlb	0	; () banked
  9010  000C34  516F               	movf	strtod@expon& (0+255),w,b
  9011  000C36  0A80               	xorlw	128
  9012  000C38  0F76               	addlw	-138
  9013  000C3A  A0D8               	btfss	status,0,c
  9014  000C3C  D017               	goto	l9793
  9015  000C3E  D7E2               	goto	l9783
  9016  000C40                     l9789:
  9017                           
  9018                           ; BSR set to: 0
  9019  000C40  C070  F01E         	movff	strtod@_u,___ftdiv@f1
  9020  000C44  C071  F01F         	movff	strtod@_u+1,___ftdiv@f1+1
  9021  000C48  C072  F020         	movff	strtod@_u+2,___ftdiv@f1+2
  9022  000C4C  0E00               	movlw	0
  9023  000C4E  6E21               	movwf	___ftdiv@f2,c
  9024  000C50  0E20               	movlw	32
  9025  000C52  6E22               	movwf	___ftdiv@f2+1,c
  9026  000C54  0E41               	movlw	65
  9027  000C56  6E23               	movwf	___ftdiv@f2+2,c
  9028  000C58  EC40  F012         	call	___ftdiv	;wreg free
  9029  000C5C  C01E  F070         	movff	?___ftdiv,strtod@_u
  9030  000C60  C01F  F071         	movff	?___ftdiv+1,strtod@_u+1
  9031  000C64  C020  F072         	movff	?___ftdiv+2,strtod@_u+2
  9032  000C68  0100               	movlb	0	; () banked
  9033  000C6A  076F               	decf	strtod@expon& (0+255),f,b
  9034  000C6C                     l9793:
  9035                           
  9036                           ; BSR set to: 0
  9037  000C6C  0100               	movlb	0	; () banked
  9038  000C6E  516F               	movf	strtod@expon& (0+255),w,b
  9039  000C70  0100               	movlb	0	; () banked
  9040  000C72  A4D8               	btfss	status,2,c
  9041  000C74  D7E5               	goto	l9789
  9042                           
  9043                           ; BSR set to: 0
  9044                           
  9045                           ; BSR set to: 0
  9046  000C76  C070  F016         	movff	strtod@_u,___ftge@ff1
  9047  000C7A  C071  F017         	movff	strtod@_u+1,___ftge@ff1+1
  9048  000C7E  C072  F018         	movff	strtod@_u+2,___ftge@ff1+2
  9049  000C82  0E00               	movlw	0
  9050  000C84  6E19               	movwf	___ftge@ff2,c
  9051  000C86  0E80               	movlw	128
  9052  000C88  6E1A               	movwf	___ftge@ff2+1,c
  9053  000C8A  0E00               	movlw	0
  9054  000C8C  6E1B               	movwf	___ftge@ff2+2,c
  9055  000C8E  EC61  F015         	call	___ftge	;wreg free
  9056  000C92  B0D8               	btfsc	status,0,c
  9057  000C94  D072               	goto	l1557
  9058  000C96  0100               	movlb	0	; () banked
  9059  000C98  A16E               	btfss	strtod@flags& (0+255),0,b
  9060  000C9A  D00A               	goto	l9803
  9061  000C9C                     l9799:
  9062                           
  9063                           ; BSR set to: 0
  9064  000C9C  0E00               	movlw	0
  9065  000C9E  0100               	movlb	0	; () banked
  9066  000CA0  6F69               	movwf	?_strtod& (0+255),b
  9067  000CA2  0E80               	movlw	128
  9068  000CA4  0100               	movlb	0	; () banked
  9069  000CA6  6F6A               	movwf	(?_strtod+1)& (0+255),b
  9070  000CA8  0E80               	movlw	128
  9071  000CAA  0100               	movlb	0	; () banked
  9072  000CAC  6F6B               	movwf	(?_strtod+2)& (0+255),b
  9073                           
  9074                           ; BSR set to: 0
  9075  000CAE  0012               	return	
  9076  000CB0                     l9803:
  9077                           
  9078                           ; BSR set to: 0
  9079  000CB0  0E00               	movlw	0
  9080  000CB2  0100               	movlb	0	; () banked
  9081  000CB4  6F69               	movwf	?_strtod& (0+255),b
  9082  000CB6  0E80               	movlw	128
  9083  000CB8  0100               	movlb	0	; () banked
  9084  000CBA  6F6A               	movwf	(?_strtod+1)& (0+255),b
  9085  000CBC  0E00               	movlw	0
  9086  000CBE  0100               	movlb	0	; () banked
  9087  000CC0  6F6B               	movwf	(?_strtod+2)& (0+255),b
  9088                           
  9089                           ; BSR set to: 0
  9090  000CC2  0012               	return	
  9091  000CC4                     l9807:
  9092                           
  9093                           ; BSR set to: 0
  9094  000CC4  0100               	movlb	0	; () banked
  9095  000CC6  516F               	movf	strtod@expon& (0+255),w,b
  9096  000CC8  0A80               	xorlw	128
  9097  000CCA  0F7F               	addlw	-129
  9098  000CCC  B0D8               	btfsc	status,0,c
  9099  000CCE  D018               	goto	l9815
  9100  000CD0  D054               	goto	l1557
  9101  000CD2                     l9811:
  9102                           
  9103                           ; BSR set to: 0
  9104  000CD2  C070  F02A         	movff	strtod@_u,___ftmul@f1
  9105  000CD6  C071  F02B         	movff	strtod@_u+1,___ftmul@f1+1
  9106  000CDA  C072  F02C         	movff	strtod@_u+2,___ftmul@f1+2
  9107  000CDE  0E03               	movlw	3
  9108  000CE0  6E2D               	movwf	___ftmul@f2,c
  9109  000CE2  0E15               	movlw	21
  9110  000CE4  6E2E               	movwf	___ftmul@f2+1,c
  9111  000CE6  0E50               	movlw	80
  9112  000CE8  6E2F               	movwf	___ftmul@f2+2,c
  9113  000CEA  EC26  F010         	call	___ftmul	;wreg free
  9114  000CEE  C02A  F070         	movff	?___ftmul,strtod@_u
  9115  000CF2  C02B  F071         	movff	?___ftmul+1,strtod@_u+1
  9116  000CF6  C02C  F072         	movff	?___ftmul+2,strtod@_u+2
  9117  000CFA  0EF6               	movlw	246
  9118  000CFC  0100               	movlb	0	; () banked
  9119  000CFE  276F               	addwf	strtod@expon& (0+255),f,b
  9120  000D00                     l9815:
  9121                           
  9122                           ; BSR set to: 0
  9123  000D00  0E0A               	movlw	10
  9124  000D02  0100               	movlb	0	; () banked
  9125  000D04  616F               	cpfslt	strtod@expon& (0+255),b
  9126  000D06  D7E5               	goto	l9811
  9127  000D08  D016               	goto	l9821
  9128  000D0A                     l9817:
  9129                           
  9130                           ; BSR set to: 0
  9131  000D0A  C070  F02A         	movff	strtod@_u,___ftmul@f1
  9132  000D0E  C071  F02B         	movff	strtod@_u+1,___ftmul@f1+1
  9133  000D12  C072  F02C         	movff	strtod@_u+2,___ftmul@f1+2
  9134  000D16  0E00               	movlw	0
  9135  000D18  6E2D               	movwf	___ftmul@f2,c
  9136  000D1A  0E20               	movlw	32
  9137  000D1C  6E2E               	movwf	___ftmul@f2+1,c
  9138  000D1E  0E41               	movlw	65
  9139  000D20  6E2F               	movwf	___ftmul@f2+2,c
  9140  000D22  EC26  F010         	call	___ftmul	;wreg free
  9141  000D26  C02A  F070         	movff	?___ftmul,strtod@_u
  9142  000D2A  C02B  F071         	movff	?___ftmul+1,strtod@_u+1
  9143  000D2E  C02C  F072         	movff	?___ftmul+2,strtod@_u+2
  9144  000D32  0100               	movlb	0	; () banked
  9145  000D34  076F               	decf	strtod@expon& (0+255),f,b
  9146  000D36                     l9821:
  9147                           
  9148                           ; BSR set to: 0
  9149  000D36  0100               	movlb	0	; () banked
  9150  000D38  516F               	movf	strtod@expon& (0+255),w,b
  9151  000D3A  0100               	movlb	0	; () banked
  9152  000D3C  A4D8               	btfss	status,2,c
  9153  000D3E  D7E5               	goto	l9817
  9154                           
  9155                           ; BSR set to: 0
  9156                           
  9157                           ; BSR set to: 0
  9158  000D40  0EFF               	movlw	255
  9159  000D42  6E16               	movwf	___ftge@ff1,c
  9160  000D44  0E7F               	movlw	127
  9161  000D46  6E17               	movwf	___ftge@ff1+1,c
  9162  000D48  0E7F               	movlw	127
  9163  000D4A  6E18               	movwf	___ftge@ff1+2,c
  9164  000D4C  C070  F019         	movff	strtod@_u,___ftge@ff2
  9165  000D50  C071  F01A         	movff	strtod@_u+1,___ftge@ff2+1
  9166  000D54  C072  F01B         	movff	strtod@_u+2,___ftge@ff2+2
  9167  000D58  EC61  F015         	call	___ftge	;wreg free
  9168  000D5C  B0D8               	btfsc	status,0,c
  9169  000D5E  D00D               	goto	l1557
  9170  000D60  0100               	movlb	0	; () banked
  9171  000D62  B16E               	btfsc	strtod@flags& (0+255),0,b
  9172  000D64  D79B               	goto	l9799
  9173                           
  9174                           ; BSR set to: 0
  9175                           
  9176                           ; BSR set to: 0
  9177                           
  9178                           ; BSR set to: 0
  9179                           
  9180                           ; BSR set to: 0
  9181  000D66  0E00               	movlw	0
  9182  000D68  0100               	movlb	0	; () banked
  9183  000D6A  6F69               	movwf	?_strtod& (0+255),b
  9184  000D6C  0E80               	movlw	128
  9185  000D6E  0100               	movlb	0	; () banked
  9186  000D70  6F6A               	movwf	(?_strtod+1)& (0+255),b
  9187  000D72  0E00               	movlw	0
  9188  000D74  0100               	movlb	0	; () banked
  9189  000D76  6F6B               	movwf	(?_strtod+2)& (0+255),b
  9190                           
  9191                           ; BSR set to: 0
  9192  000D78  0012               	return	
  9193  000D7A                     l1557:
  9194  000D7A  0100               	movlb	0	; () banked
  9195  000D7C  A16E               	btfss	strtod@flags& (0+255),0,b
  9196  000D7E  D00E               	goto	l9837
  9197                           
  9198                           ; BSR set to: 0
  9199  000D80  C070  F066         	movff	strtod@_u,___ftneg@f1
  9200  000D84  C071  F067         	movff	strtod@_u+1,___ftneg@f1+1
  9201  000D88  C072  F068         	movff	strtod@_u+2,___ftneg@f1+2
  9202  000D8C  ECD7  F019         	call	___ftneg	;wreg free
  9203  000D90  C066  F070         	movff	?___ftneg,strtod@_u
  9204  000D94  C067  F071         	movff	?___ftneg+1,strtod@_u+1
  9205  000D98  C068  F072         	movff	?___ftneg+2,strtod@_u+2
  9206  000D9C                     l9837:
  9207  000D9C  C070  F069         	movff	strtod@_u,?_strtod
  9208  000DA0  C071  F06A         	movff	strtod@_u+1,?_strtod+1
  9209  000DA4  C072  F06B         	movff	strtod@_u+2,?_strtod+2
  9210  000DA8  0012               	return	
  9211  000DAA                     __end_of_strtod:
  9212                           	opt stack 0
  9213                           tosu	equ	0xFFF
  9214                           tosh	equ	0xFFE
  9215                           tosl	equ	0xFFD
  9216                           pclath	equ	0xFFA
  9217                           tblptru	equ	0xFF8
  9218                           tblptrh	equ	0xFF7
  9219                           tblptrl	equ	0xFF6
  9220                           tablat	equ	0xFF5
  9221                           prodh	equ	0xFF4
  9222                           prodl	equ	0xFF3
  9223                           intcon	equ	0xFF2
  9224                           intcon2	equ	0xFF1
  9225                           intcon3	equ	0xFF0
  9226                           postinc0	equ	0xFEE
  9227                           wreg	equ	0xFE8
  9228                           indf1	equ	0xFE7
  9229                           postinc1	equ	0xFE6
  9230                           postdec1	equ	0xFE5
  9231                           fsr1h	equ	0xFE2
  9232                           fsr1l	equ	0xFE1
  9233                           indf2	equ	0xFDF
  9234                           postinc2	equ	0xFDE
  9235                           postdec2	equ	0xFDD
  9236                           fsr2h	equ	0xFDA
  9237                           fsr2l	equ	0xFD9
  9238                           status	equ	0xFD8
  9239                           
  9240 ;; *************** function _isspace *****************
  9241 ;; Defined at:
  9242 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isspace.c"
  9243 ;; Parameters:    Size  Location     Type
  9244 ;;  c               1    wreg     unsigned char 
  9245 ;; Auto vars:     Size  Location     Type
  9246 ;;  c               1   23[COMRAM] unsigned char 
  9247 ;; Return value:  Size  Location     Type
  9248 ;;		None               void
  9249 ;; Registers used:
  9250 ;;		wreg, status,2, status,0
  9251 ;; Tracked objects:
  9252 ;;		On entry : 0/0
  9253 ;;		On exit  : 0/0
  9254 ;;		Unchanged: 0/0
  9255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9256 ;;      Params:         0       0       0       0       0       0       0       0       0
  9257 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9258 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9259 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9260 ;;Total ram usage:        3 bytes
  9261 ;; Hardware stack levels used:    1
  9262 ;; Hardware stack levels required when called:    2
  9263 ;; This function calls:
  9264 ;;		Nothing
  9265 ;; This function is called by:
  9266 ;;		_strtod
  9267 ;; This function uses a non-reentrant model
  9268 ;;
  9269                           
  9270                           	psect	text37
  9271  00347C                     __ptext37:
  9272                           	opt stack 0
  9273  00347C                     _isspace:
  9274                           	opt stack 23
  9275                           
  9276                           ;incstack = 0
  9277                           ;isspace@c stored from wreg
  9278  00347C  6E18               	movwf	isspace@c,c
  9279  00347E  0E01               	movlw	1
  9280  003480  6E17               	movwf	_isspace$2853,c
  9281  003482  0E20               	movlw	32
  9282  003484  1818               	xorwf	isspace@c,w,c
  9283  003486  B4D8               	btfsc	status,2,c
  9284  003488  D008               	goto	l9467
  9285  00348A  0E0E               	movlw	14
  9286  00348C  6018               	cpfslt	isspace@c,c
  9287  00348E  D003               	goto	l9465
  9288  003490  0E09               	movlw	9
  9289  003492  6018               	cpfslt	isspace@c,c
  9290  003494  D002               	goto	l9467
  9291  003496                     l9465:
  9292  003496  0E00               	movlw	0
  9293  003498  6E17               	movwf	_isspace$2853,c
  9294  00349A                     l9467:
  9295  00349A  C017  F016         	movff	_isspace$2853,??_isspace
  9296  00349E  3016               	rrcf	??_isspace,w,c
  9297  0034A0  0012               	return	
  9298  0034A2                     __end_of_isspace:
  9299                           	opt stack 0
  9300                           tosu	equ	0xFFF
  9301                           tosh	equ	0xFFE
  9302                           tosl	equ	0xFFD
  9303                           pclath	equ	0xFFA
  9304                           tblptru	equ	0xFF8
  9305                           tblptrh	equ	0xFF7
  9306                           tblptrl	equ	0xFF6
  9307                           tablat	equ	0xFF5
  9308                           prodh	equ	0xFF4
  9309                           prodl	equ	0xFF3
  9310                           intcon	equ	0xFF2
  9311                           intcon2	equ	0xFF1
  9312                           intcon3	equ	0xFF0
  9313                           postinc0	equ	0xFEE
  9314                           wreg	equ	0xFE8
  9315                           indf1	equ	0xFE7
  9316                           postinc1	equ	0xFE6
  9317                           postdec1	equ	0xFE5
  9318                           fsr1h	equ	0xFE2
  9319                           fsr1l	equ	0xFE1
  9320                           indf2	equ	0xFDF
  9321                           postinc2	equ	0xFDE
  9322                           postdec2	equ	0xFDD
  9323                           fsr2h	equ	0xFDA
  9324                           fsr2l	equ	0xFD9
  9325                           status	equ	0xFD8
  9326                           
  9327 ;; *************** function ___ftge *****************
  9328 ;; Defined at:
  9329 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
  9330 ;; Parameters:    Size  Location     Type
  9331 ;;  ff1             3   21[COMRAM] float 
  9332 ;;  ff2             3   24[COMRAM] float 
  9333 ;; Auto vars:     Size  Location     Type
  9334 ;;		None
  9335 ;; Return value:  Size  Location     Type
  9336 ;;		None               void
  9337 ;; Registers used:
  9338 ;;		wreg, status,2, status,0
  9339 ;; Tracked objects:
  9340 ;;		On entry : 0/0
  9341 ;;		On exit  : 0/0
  9342 ;;		Unchanged: 0/0
  9343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9344 ;;      Params:         6       0       0       0       0       0       0       0       0
  9345 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9346 ;;      Temps:          3       0       0       0       0       0       0       0       0
  9347 ;;      Totals:         9       0       0       0       0       0       0       0       0
  9348 ;;Total ram usage:        9 bytes
  9349 ;; Hardware stack levels used:    1
  9350 ;; Hardware stack levels required when called:    2
  9351 ;; This function calls:
  9352 ;;		Nothing
  9353 ;; This function is called by:
  9354 ;;		_sprintf
  9355 ;;		_strtod
  9356 ;;		_escreve_float_lcd
  9357 ;; This function uses a non-reentrant model
  9358 ;;
  9359                           
  9360                           	psect	text38
  9361  002AC2                     __ptext38:
  9362                           	opt stack 0
  9363  002AC2                     ___ftge:
  9364                           	opt stack 25
  9365                           
  9366                           ;incstack = 0
  9367  002AC2  AE18               	btfss	___ftge@ff1+2,7,c
  9368  002AC4  D016               	goto	l9475
  9369  002AC6  C016  F01C         	movff	___ftge@ff1,??___ftge
  9370  002ACA  C017  F01D         	movff	___ftge@ff1+1,??___ftge+1
  9371  002ACE  C018  F01E         	movff	___ftge@ff1+2,??___ftge+2
  9372  002AD2  1E1C               	comf	??___ftge,f,c
  9373  002AD4  1E1D               	comf	??___ftge+1,f,c
  9374  002AD6  1E1E               	comf	??___ftge+2,f,c
  9375  002AD8  2A1C               	incf	??___ftge,f,c
  9376  002ADA  0E00               	movlw	0
  9377  002ADC  221D               	addwfc	??___ftge+1,f,c
  9378  002ADE  221E               	addwfc	??___ftge+2,f,c
  9379  002AE0  0E00               	movlw	0
  9380  002AE2  241C               	addwf	??___ftge,w,c
  9381  002AE4  6E16               	movwf	___ftge@ff1,c
  9382  002AE6  0E00               	movlw	0
  9383  002AE8  201D               	addwfc	??___ftge+1,w,c
  9384  002AEA  6E17               	movwf	___ftge@ff1+1,c
  9385  002AEC  0E80               	movlw	128
  9386  002AEE  201E               	addwfc	??___ftge+2,w,c
  9387  002AF0  6E18               	movwf	___ftge@ff1+2,c
  9388  002AF2                     l9475:
  9389  002AF2  AE1B               	btfss	___ftge@ff2+2,7,c
  9390  002AF4  D016               	goto	l9479
  9391  002AF6  C019  F01C         	movff	___ftge@ff2,??___ftge
  9392  002AFA  C01A  F01D         	movff	___ftge@ff2+1,??___ftge+1
  9393  002AFE  C01B  F01E         	movff	___ftge@ff2+2,??___ftge+2
  9394  002B02  1E1C               	comf	??___ftge,f,c
  9395  002B04  1E1D               	comf	??___ftge+1,f,c
  9396  002B06  1E1E               	comf	??___ftge+2,f,c
  9397  002B08  2A1C               	incf	??___ftge,f,c
  9398  002B0A  0E00               	movlw	0
  9399  002B0C  221D               	addwfc	??___ftge+1,f,c
  9400  002B0E  221E               	addwfc	??___ftge+2,f,c
  9401  002B10  0E00               	movlw	0
  9402  002B12  241C               	addwf	??___ftge,w,c
  9403  002B14  6E19               	movwf	___ftge@ff2,c
  9404  002B16  0E00               	movlw	0
  9405  002B18  201D               	addwfc	??___ftge+1,w,c
  9406  002B1A  6E1A               	movwf	___ftge@ff2+1,c
  9407  002B1C  0E80               	movlw	128
  9408  002B1E  201E               	addwfc	??___ftge+2,w,c
  9409  002B20  6E1B               	movwf	___ftge@ff2+2,c
  9410  002B22                     l9479:
  9411  002B22  0E00               	movlw	0
  9412  002B24  1A16               	xorwf	___ftge@ff1,f,c
  9413  002B26  0E00               	movlw	0
  9414  002B28  1A17               	xorwf	___ftge@ff1+1,f,c
  9415  002B2A  0E80               	movlw	128
  9416  002B2C  1A18               	xorwf	___ftge@ff1+2,f,c
  9417  002B2E  0E00               	movlw	0
  9418  002B30  1A19               	xorwf	___ftge@ff2,f,c
  9419  002B32  0E00               	movlw	0
  9420  002B34  1A1A               	xorwf	___ftge@ff2+1,f,c
  9421  002B36  0E80               	movlw	128
  9422  002B38  1A1B               	xorwf	___ftge@ff2+2,f,c
  9423  002B3A  5019               	movf	___ftge@ff2,w,c
  9424  002B3C  5C16               	subwf	___ftge@ff1,w,c
  9425  002B3E  501A               	movf	___ftge@ff2+1,w,c
  9426  002B40  5817               	subwfb	___ftge@ff1+1,w,c
  9427  002B42  501B               	movf	___ftge@ff2+2,w,c
  9428  002B44  5818               	subwfb	___ftge@ff1+2,w,c
  9429  002B46  B0D8               	btfsc	status,0,c
  9430  002B48  D002               	goto	l9485
  9431  002B4A  90D8               	bcf	status,0,c
  9432  002B4C  0012               	return	
  9433  002B4E                     l9485:
  9434  002B4E  80D8               	bsf	status,0,c
  9435  002B50  0012               	return	
  9436  002B52                     __end_of___ftge:
  9437                           	opt stack 0
  9438                           tosu	equ	0xFFF
  9439                           tosh	equ	0xFFE
  9440                           tosl	equ	0xFFD
  9441                           pclath	equ	0xFFA
  9442                           tblptru	equ	0xFF8
  9443                           tblptrh	equ	0xFF7
  9444                           tblptrl	equ	0xFF6
  9445                           tablat	equ	0xFF5
  9446                           prodh	equ	0xFF4
  9447                           prodl	equ	0xFF3
  9448                           intcon	equ	0xFF2
  9449                           intcon2	equ	0xFF1
  9450                           intcon3	equ	0xFF0
  9451                           postinc0	equ	0xFEE
  9452                           wreg	equ	0xFE8
  9453                           indf1	equ	0xFE7
  9454                           postinc1	equ	0xFE6
  9455                           postdec1	equ	0xFE5
  9456                           fsr1h	equ	0xFE2
  9457                           fsr1l	equ	0xFE1
  9458                           indf2	equ	0xFDF
  9459                           postinc2	equ	0xFDE
  9460                           postdec2	equ	0xFDD
  9461                           fsr2h	equ	0xFDA
  9462                           fsr2l	equ	0xFD9
  9463                           status	equ	0xFD8
  9464                           
  9465 ;; *************** function ___altoft *****************
  9466 ;; Defined at:
  9467 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\altoft.c"
  9468 ;; Parameters:    Size  Location     Type
  9469 ;;  c               4   29[COMRAM] long 
  9470 ;; Auto vars:     Size  Location     Type
  9471 ;;  sign            1   38[COMRAM] unsigned char 
  9472 ;;  exp             1   37[COMRAM] unsigned char 
  9473 ;; Return value:  Size  Location     Type
  9474 ;;                  3   29[COMRAM] float 
  9475 ;; Registers used:
  9476 ;;		wreg, status,2, status,0, cstack
  9477 ;; Tracked objects:
  9478 ;;		On entry : 0/0
  9479 ;;		On exit  : 0/0
  9480 ;;		Unchanged: 0/0
  9481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9482 ;;      Params:         4       0       0       0       0       0       0       0       0
  9483 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9484 ;;      Temps:          4       0       0       0       0       0       0       0       0
  9485 ;;      Totals:        10       0       0       0       0       0       0       0       0
  9486 ;;Total ram usage:       10 bytes
  9487 ;; Hardware stack levels used:    1
  9488 ;; Hardware stack levels required when called:    3
  9489 ;; This function calls:
  9490 ;;		___ftpack
  9491 ;; This function is called by:
  9492 ;;		_strtod
  9493 ;; This function uses a non-reentrant model
  9494 ;;
  9495                           
  9496                           	psect	text39
  9497  002CE4                     __ptext39:
  9498                           	opt stack 0
  9499  002CE4                     ___altoft:
  9500                           	opt stack 22
  9501                           
  9502                           ;incstack = 0
  9503  002CE4  0E00               	movlw	0
  9504  002CE6  6E27               	movwf	___altoft@sign,c
  9505  002CE8  0E8E               	movlw	142
  9506  002CEA  6E26               	movwf	___altoft@exp,c
  9507  002CEC  AE21               	btfss	___altoft@c+3,7,c
  9508  002CEE  D011               	goto	l9357
  9509  002CF0  1E21               	comf	___altoft@c+3,f,c
  9510  002CF2  1E20               	comf	___altoft@c+2,f,c
  9511  002CF4  1E1F               	comf	___altoft@c+1,f,c
  9512  002CF6  6C1E               	negf	___altoft@c,c
  9513  002CF8  0E00               	movlw	0
  9514  002CFA  221F               	addwfc	___altoft@c+1,f,c
  9515  002CFC  2220               	addwfc	___altoft@c+2,f,c
  9516  002CFE  2221               	addwfc	___altoft@c+3,f,c
  9517  002D00  0E01               	movlw	1
  9518  002D02  6E27               	movwf	___altoft@sign,c
  9519  002D04  D006               	goto	l9357
  9520  002D06                     l9355:
  9521  002D06  90D8               	bcf	status,0,c
  9522  002D08  3221               	rrcf	___altoft@c+3,f,c
  9523  002D0A  3220               	rrcf	___altoft@c+2,f,c
  9524  002D0C  321F               	rrcf	___altoft@c+1,f,c
  9525  002D0E  321E               	rrcf	___altoft@c,f,c
  9526  002D10  2A26               	incf	___altoft@exp,f,c
  9527  002D12                     l9357:
  9528  002D12  0E00               	movlw	0
  9529  002D14  141E               	andwf	___altoft@c,w,c
  9530  002D16  6E22               	movwf	??___altoft& (0+255),c
  9531  002D18  0E00               	movlw	0
  9532  002D1A  141F               	andwf	___altoft@c+1,w,c
  9533  002D1C  6E23               	movwf	(??___altoft+1)& (0+255),c
  9534  002D1E  0E00               	movlw	0
  9535  002D20  1420               	andwf	___altoft@c+2,w,c
  9536  002D22  6E24               	movwf	(??___altoft+2)& (0+255),c
  9537  002D24  0EFF               	movlw	255
  9538  002D26  1421               	andwf	___altoft@c+3,w,c
  9539  002D28  6E25               	movwf	(??___altoft+3)& (0+255),c
  9540  002D2A  5022               	movf	??___altoft,w,c
  9541  002D2C  1023               	iorwf	??___altoft+1,w,c
  9542  002D2E  1024               	iorwf	??___altoft+2,w,c
  9543  002D30  1025               	iorwf	??___altoft+3,w,c
  9544  002D32  A4D8               	btfss	status,2,c
  9545  002D34  D7E8               	goto	l9355
  9546  002D36  C01E  F016         	movff	___altoft@c,___ftpack@arg
  9547  002D3A  C01F  F017         	movff	___altoft@c+1,___ftpack@arg+1
  9548  002D3E  C020  F018         	movff	___altoft@c+2,___ftpack@arg+2
  9549  002D42  C026  F019         	movff	___altoft@exp,___ftpack@exp
  9550  002D46  C027  F01A         	movff	___altoft@sign,___ftpack@sign
  9551  002D4A  EC72  F013         	call	___ftpack	;wreg free
  9552  002D4E  C016  F01E         	movff	?___ftpack,?___altoft
  9553  002D52  C017  F01F         	movff	?___ftpack+1,?___altoft+1
  9554  002D56  C018  F020         	movff	?___ftpack+2,?___altoft+2
  9555  002D5A  0012               	return	
  9556  002D5C                     __end_of___altoft:
  9557                           	opt stack 0
  9558                           tosu	equ	0xFFF
  9559                           tosh	equ	0xFFE
  9560                           tosl	equ	0xFFD
  9561                           pclath	equ	0xFFA
  9562                           tblptru	equ	0xFF8
  9563                           tblptrh	equ	0xFF7
  9564                           tblptrl	equ	0xFF6
  9565                           tablat	equ	0xFF5
  9566                           prodh	equ	0xFF4
  9567                           prodl	equ	0xFF3
  9568                           intcon	equ	0xFF2
  9569                           intcon2	equ	0xFF1
  9570                           intcon3	equ	0xFF0
  9571                           postinc0	equ	0xFEE
  9572                           wreg	equ	0xFE8
  9573                           indf1	equ	0xFE7
  9574                           postinc1	equ	0xFE6
  9575                           postdec1	equ	0xFE5
  9576                           fsr1h	equ	0xFE2
  9577                           fsr1l	equ	0xFE1
  9578                           indf2	equ	0xFDF
  9579                           postinc2	equ	0xFDE
  9580                           postdec2	equ	0xFDD
  9581                           fsr2h	equ	0xFDA
  9582                           fsr2l	equ	0xFD9
  9583                           status	equ	0xFD8
  9584                           
  9585 ;; *************** function _get_date *****************
  9586 ;; Defined at:
  9587 ;;		line 258 in file "bibliotecas/GPS.c"
  9588 ;; Parameters:    Size  Location     Type
  9589 ;;  date_pointer    1    wreg     unsigned char 
  9590 ;; Auto vars:     Size  Location     Type
  9591 ;;  date_pointer    1   12[BANK0 ] unsigned char 
  9592 ;;  i               2   15[BANK0 ] int 
  9593 ;;  date_buffer     6    2[BANK0 ] unsigned char [6]
  9594 ;;  _date           4    8[BANK0 ] unsigned long 
  9595 ;;  index           1   14[BANK0 ] unsigned char 
  9596 ;;  date_index      1   13[BANK0 ] unsigned char 
  9597 ;; Return value:  Size  Location     Type
  9598 ;;                  4   47[COMRAM] unsigned long 
  9599 ;; Registers used:
  9600 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9601 ;; Tracked objects:
  9602 ;;		On entry : 0/0
  9603 ;;		On exit  : 0/0
  9604 ;;		Unchanged: 0/0
  9605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9606 ;;      Params:         4       0       0       0       0       0       0       0       0
  9607 ;;      Locals:         0      15       0       0       0       0       0       0       0
  9608 ;;      Temps:          0       2       0       0       0       0       0       0       0
  9609 ;;      Totals:         4      17       0       0       0       0       0       0       0
  9610 ;;Total ram usage:       21 bytes
  9611 ;; Hardware stack levels used:    1
  9612 ;; Hardware stack levels required when called:    5
  9613 ;; This function calls:
  9614 ;;		_atol
  9615 ;;		_escreve_cmd_lcd
  9616 ;;		_escreve_frase_ram_lcd
  9617 ;;		_posicao_cursor_lcd
  9618 ;; This function is called by:
  9619 ;;		_GPS
  9620 ;; This function uses a non-reentrant model
  9621 ;;
  9622                           
  9623                           	psect	text40
  9624  002284                     __ptext40:
  9625                           	opt stack 0
  9626  002284                     _get_date:
  9627                           	opt stack 23
  9628                           
  9629                           ;incstack = 0
  9630                           ;get_date@date_pointer stored from wreg
  9631  002284  0100               	movlb	0	; () banked
  9632  002286  6F6C               	movwf	get_date@date_pointer& (0+255),b
  9633                           
  9634                           ;GPS.c: 260: unsigned char date_index;
  9635                           ;GPS.c: 261: unsigned char index = date_pointer +1;
  9636  002288  0100               	movlb	0	; () banked
  9637  00228A  296C               	incf	get_date@date_pointer& (0+255),w,b
  9638  00228C  0100               	movlb	0	; () banked
  9639  00228E  6F6E               	movwf	get_date@index& (0+255),b
  9640                           
  9641                           ; BSR set to: 0
  9642                           ;GPS.c: 262: char date_buffer[6];
  9643                           ;GPS.c: 263: unsigned long int _date;
  9644                           ;GPS.c: 264: date_index=0;
  9645  002290  0E00               	movlw	0
  9646  002292  0100               	movlb	0	; () banked
  9647  002294  6F6D               	movwf	get_date@date_index& (0+255),b
  9648                           
  9649                           ;GPS.c: 267: for(; RMC_Buffer[index]!=','; index++){
  9650  002296  D018               	goto	l10831
  9651  002298                     l10825:
  9652                           
  9653                           ; BSR set to: 0
  9654                           ;GPS.c: 268: date_buffer[date_index]= RMC_Buffer[index];
  9655  002298  0100               	movlb	0	; () banked
  9656  00229A  516E               	movf	get_date@index& (0+255),w,b
  9657  00229C  0D01               	mullw	1
  9658  00229E  0E00               	movlw	low _RMC_Buffer
  9659  0022A0  24F3               	addwf	prodl,w,c
  9660  0022A2  6ED9               	movwf	fsr2l,c
  9661  0022A4  0E02               	movlw	high _RMC_Buffer
  9662  0022A6  20F4               	addwfc	prodh,w,c
  9663  0022A8  6EDA               	movwf	fsr2h,c
  9664  0022AA  0100               	movlb	0	; () banked
  9665  0022AC  516D               	movf	get_date@date_index& (0+255),w,b
  9666  0022AE  0D01               	mullw	1
  9667  0022B0  0E62               	movlw	low get_date@date_buffer
  9668  0022B2  24F3               	addwf	prodl,w,c
  9669  0022B4  6EE1               	movwf	fsr1l,c
  9670  0022B6  0E00               	movlw	high get_date@date_buffer
  9671  0022B8  20F4               	addwfc	prodh,w,c
  9672  0022BA  6EE2               	movwf	fsr1h,c
  9673  0022BC  CFDF FFE7          	movff	indf2,indf1
  9674                           
  9675                           ; BSR set to: 0
  9676                           ;GPS.c: 269: date_index++;
  9677  0022C0  0100               	movlb	0	; () banked
  9678  0022C2  2B6D               	incf	get_date@date_index& (0+255),f,b
  9679                           
  9680                           ; BSR set to: 0
  9681  0022C4  0100               	movlb	0	; () banked
  9682  0022C6  2B6E               	incf	get_date@index& (0+255),f,b
  9683  0022C8                     l10831:
  9684                           
  9685                           ; BSR set to: 0
  9686  0022C8  0100               	movlb	0	; () banked
  9687  0022CA  516E               	movf	get_date@index& (0+255),w,b
  9688  0022CC  0D01               	mullw	1
  9689  0022CE  0E00               	movlw	low _RMC_Buffer
  9690  0022D0  24F3               	addwf	prodl,w,c
  9691  0022D2  6ED9               	movwf	fsr2l,c
  9692  0022D4  0E02               	movlw	high _RMC_Buffer
  9693  0022D6  20F4               	addwfc	prodh,w,c
  9694  0022D8  6EDA               	movwf	fsr2h,c
  9695  0022DA  0E2C               	movlw	44
  9696  0022DC  18DE               	xorwf	postinc2,w,c
  9697  0022DE  A4D8               	btfss	status,2,c
  9698  0022E0  D7DB               	goto	l10825
  9699                           
  9700                           ; BSR set to: 0
  9701                           ;GPS.c: 270: }
  9702                           ;GPS.c: 271: for(int i= 0; i<6;i++){
  9703                           
  9704                           ; BSR set to: 0
  9705  0022E2  0E00               	movlw	0
  9706  0022E4  0100               	movlb	0	; () banked
  9707  0022E6  6F70               	movwf	(get_date@i+1)& (0+255),b
  9708  0022E8  0E00               	movlw	0
  9709  0022EA  6F6F               	movwf	get_date@i& (0+255),b
  9710  0022EC                     l10835:
  9711                           
  9712                           ; BSR set to: 0
  9713  0022EC  0100               	movlb	0	; () banked
  9714  0022EE  BF70               	btfsc	(get_date@i+1)& (0+255),7,b
  9715  0022F0  D008               	goto	l10839
  9716  0022F2  0100               	movlb	0	; () banked
  9717  0022F4  5170               	movf	(get_date@i+1)& (0+255),w,b
  9718  0022F6  E131               	bnz	l10851
  9719  0022F8  0E06               	movlw	6
  9720  0022FA  0100               	movlb	0	; () banked
  9721  0022FC  5D6F               	subwf	get_date@i& (0+255),w,b
  9722  0022FE  B0D8               	btfsc	status,0,c
  9723  002300  D02C               	goto	l10851
  9724  002302                     l10839:
  9725                           
  9726                           ; BSR set to: 0
  9727                           ;GPS.c: 272: posicao_cursor_lcd(1,0);
  9728  002302  0E00               	movlw	0
  9729  002304  6E19               	movwf	posicao_cursor_lcd@coluna,c
  9730  002306  0E01               	movlw	1
  9731  002308  EC58  F017         	call	_posicao_cursor_lcd
  9732                           
  9733                           ;GPS.c: 273: escreve_frase_ram_lcd(date_buffer[i]);
  9734  00230C  0E62               	movlw	low get_date@date_buffer
  9735  00230E  0100               	movlb	0	; () banked
  9736  002310  256F               	addwf	get_date@i& (0+255),w,b
  9737  002312  6ED9               	movwf	fsr2l,c
  9738  002314  0E00               	movlw	high get_date@date_buffer
  9739  002316  0100               	movlb	0	; () banked
  9740  002318  2170               	addwfc	(get_date@i+1)& (0+255),w,b
  9741  00231A  6EDA               	movwf	fsr2h,c
  9742  00231C  50DF               	movf	indf2,w,c
  9743  00231E  0100               	movlb	0	; () banked
  9744  002320  6F60               	movwf	??_get_date& (0+255),b
  9745  002322  6B61               	clrf	(??_get_date+1)& (0+255),b
  9746  002324  C060  F019         	movff	??_get_date,escreve_frase_ram_lcd@buffer
  9747  002328  C061  F01A         	movff	??_get_date+1,escreve_frase_ram_lcd@buffer+1
  9748  00232C  ECAC  F018         	call	_escreve_frase_ram_lcd	;wreg free
  9749                           
  9750                           ;GPS.c: 274: _delay((unsigned long)((300)*(48000000/4000.0)));
  9751  002330  0E13               	movlw	19
  9752  002332  0100               	movlb	0	; () banked
  9753  002334  6F61               	movwf	(??_get_date+1)& (0+255),b
  9754  002336  0E44               	movlw	68
  9755  002338  0100               	movlb	0	; () banked
  9756  00233A  6F60               	movwf	??_get_date& (0+255),b
  9757  00233C  0E44               	movlw	68
  9758  00233E                     u14927:
  9759  00233E  2EE8               	decfsz	wreg,f,c
  9760  002340  D7FE               	bra	u14927
  9761  002342  2F60               	decfsz	??_get_date& (0+255),f,b
  9762  002344  D7FC               	bra	u14927
  9763  002346  2F61               	decfsz	(??_get_date+1)& (0+255),f,b
  9764  002348  D7FA               	bra	u14927
  9765  00234A  F000               	nop	
  9766                           
  9767                           ;GPS.c: 275: escreve_cmd_lcd(0b00000001);
  9768  00234C  0E01               	movlw	1
  9769  00234E  ECA9  F015         	call	_escreve_cmd_lcd
  9770  002352  0100               	movlb	0	; () banked
  9771  002354  4B6F               	infsnz	get_date@i& (0+255),f,b
  9772  002356  2B70               	incf	(get_date@i+1)& (0+255),f,b
  9773  002358  D7C9               	goto	l10835
  9774  00235A                     l10851:
  9775                           
  9776                           ; BSR set to: 0
  9777                           ;GPS.c: 276: }
  9778                           ;GPS.c: 284: _date = atol(date_buffer);
  9779  00235A  0E62               	movlw	low get_date@date_buffer
  9780  00235C  6E22               	movwf	atol@s,c
  9781  00235E  0E00               	movlw	high get_date@date_buffer
  9782  002360  6E23               	movwf	atol@s+1,c
  9783  002362  ECC4  F011         	call	_atol	;wreg free
  9784  002366  C022  F068         	movff	?_atol,get_date@_date
  9785  00236A  C023  F069         	movff	?_atol+1,get_date@_date+1
  9786  00236E  C024  F06A         	movff	?_atol+2,get_date@_date+2
  9787  002372  C025  F06B         	movff	?_atol+3,get_date@_date+3
  9788                           
  9789                           ;GPS.c: 285: return _date;
  9790  002376  C068  F030         	movff	get_date@_date,?_get_date
  9791  00237A  C069  F031         	movff	get_date@_date+1,?_get_date+1
  9792  00237E  C06A  F032         	movff	get_date@_date+2,?_get_date+2
  9793  002382  C06B  F033         	movff	get_date@_date+3,?_get_date+3
  9794  002386  0012               	return	
  9795  002388                     __end_of_get_date:
  9796                           	opt stack 0
  9797                           tosu	equ	0xFFF
  9798                           tosh	equ	0xFFE
  9799                           tosl	equ	0xFFD
  9800                           pclath	equ	0xFFA
  9801                           tblptru	equ	0xFF8
  9802                           tblptrh	equ	0xFF7
  9803                           tblptrl	equ	0xFF6
  9804                           tablat	equ	0xFF5
  9805                           prodh	equ	0xFF4
  9806                           prodl	equ	0xFF3
  9807                           intcon	equ	0xFF2
  9808                           intcon2	equ	0xFF1
  9809                           intcon3	equ	0xFF0
  9810                           postinc0	equ	0xFEE
  9811                           wreg	equ	0xFE8
  9812                           indf1	equ	0xFE7
  9813                           postinc1	equ	0xFE6
  9814                           postdec1	equ	0xFE5
  9815                           fsr1h	equ	0xFE2
  9816                           fsr1l	equ	0xFE1
  9817                           indf2	equ	0xFDF
  9818                           postinc2	equ	0xFDE
  9819                           postdec2	equ	0xFDD
  9820                           fsr2h	equ	0xFDA
  9821                           fsr2l	equ	0xFD9
  9822                           status	equ	0xFD8
  9823                           
  9824 ;; *************** function _posicao_cursor_lcd *****************
  9825 ;; Defined at:
  9826 ;;		line 271 in file "bibliotecas/display_lcd.c"
  9827 ;; Parameters:    Size  Location     Type
  9828 ;;  linha           1    wreg     unsigned char 
  9829 ;;  coluna          1   24[COMRAM] unsigned char 
  9830 ;; Auto vars:     Size  Location     Type
  9831 ;;  linha           1   25[COMRAM] unsigned char 
  9832 ;;  endereco        1   26[COMRAM] unsigned char 
  9833 ;; Return value:  Size  Location     Type
  9834 ;;                  1    wreg      void 
  9835 ;; Registers used:
  9836 ;;		wreg, status,2, status,0, cstack
  9837 ;; Tracked objects:
  9838 ;;		On entry : 0/0
  9839 ;;		On exit  : 0/0
  9840 ;;		Unchanged: 0/0
  9841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9842 ;;      Params:         1       0       0       0       0       0       0       0       0
  9843 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9844 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9845 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9846 ;;Total ram usage:        3 bytes
  9847 ;; Hardware stack levels used:    1
  9848 ;; Hardware stack levels required when called:    4
  9849 ;; This function calls:
  9850 ;;		_endereco_cursor_lcd
  9851 ;; This function is called by:
  9852 ;;		_mensagem_inicial
  9853 ;;		_GPS
  9854 ;;		_get_date
  9855 ;;		_SDCard
  9856 ;;		_inicializa_SPI
  9857 ;;		_leitura_chave
  9858 ;;		_disk_initialize
  9859 ;;		_disk_readp
  9860 ;; This function uses a non-reentrant model
  9861 ;;
  9862                           
  9863                           	psect	text41
  9864  002EB0                     __ptext41:
  9865                           	opt stack 0
  9866  002EB0                     _posicao_cursor_lcd:
  9867                           	opt stack 25
  9868                           
  9869                           ;incstack = 0
  9870                           ;posicao_cursor_lcd@linha stored from wreg
  9871  002EB0  6E1A               	movwf	posicao_cursor_lcd@linha,c
  9872                           
  9873                           ;display_lcd.c: 273: unsigned char endereco = 0x00;
  9874  002EB2  0E00               	movlw	0
  9875  002EB4  6E1B               	movwf	posicao_cursor_lcd@endereco,c
  9876                           
  9877                           ;display_lcd.c: 275: if(coluna <= 0x10U)
  9878  002EB6  0E11               	movlw	17
  9879  002EB8  6019               	cpfslt	posicao_cursor_lcd@coluna,c
  9880  002EBA  D02F               	goto	l9979
  9881  002EBC  D01E               	goto	l9975
  9882  002EBE                     l693:
  9883                           
  9884                           ;display_lcd.c: 282: endereco = 0x00U + coluna;
  9885  002EBE  C019  F01B         	movff	posicao_cursor_lcd@coluna,posicao_cursor_lcd@endereco
  9886                           
  9887                           ;display_lcd.c: 283: endereco_cursor_lcd(endereco);
  9888  002EC2  501B               	movf	posicao_cursor_lcd@endereco,w,c
  9889  002EC4  EC90  F017         	call	_endereco_cursor_lcd
  9890                           
  9891                           ;display_lcd.c: 284: break;
  9892  002EC8  D026               	goto	l9977
  9893  002ECA                     l9959:
  9894                           
  9895                           ;display_lcd.c: 287: endereco = 0x40U + coluna;
  9896  002ECA  5019               	movf	posicao_cursor_lcd@coluna,w,c
  9897  002ECC  0F40               	addlw	64
  9898  002ECE  6E1B               	movwf	posicao_cursor_lcd@endereco,c
  9899                           
  9900                           ;display_lcd.c: 288: endereco_cursor_lcd(endereco);
  9901  002ED0  501B               	movf	posicao_cursor_lcd@endereco,w,c
  9902  002ED2  EC90  F017         	call	_endereco_cursor_lcd
  9903                           
  9904                           ;display_lcd.c: 289: break;
  9905  002ED6  D01F               	goto	l9977
  9906  002ED8                     l9963:
  9907                           
  9908                           ;display_lcd.c: 292: endereco = 0x14U + coluna;
  9909  002ED8  5019               	movf	posicao_cursor_lcd@coluna,w,c
  9910  002EDA  0F14               	addlw	20
  9911  002EDC  6E1B               	movwf	posicao_cursor_lcd@endereco,c
  9912                           
  9913                           ;display_lcd.c: 293: endereco_cursor_lcd(endereco);
  9914  002EDE  501B               	movf	posicao_cursor_lcd@endereco,w,c
  9915  002EE0  EC90  F017         	call	_endereco_cursor_lcd
  9916                           
  9917                           ;display_lcd.c: 294: break;
  9918  002EE4  D018               	goto	l9977
  9919  002EE6                     l9967:
  9920                           
  9921                           ;display_lcd.c: 297: endereco = 0x54U + coluna;
  9922  002EE6  5019               	movf	posicao_cursor_lcd@coluna,w,c
  9923  002EE8  0F54               	addlw	84
  9924  002EEA  6E1B               	movwf	posicao_cursor_lcd@endereco,c
  9925                           
  9926                           ;display_lcd.c: 298: endereco_cursor_lcd(endereco);
  9927  002EEC  501B               	movf	posicao_cursor_lcd@endereco,w,c
  9928  002EEE  EC90  F017         	call	_endereco_cursor_lcd
  9929                           
  9930                           ;display_lcd.c: 299: break;
  9931  002EF2  D011               	goto	l9977
  9932  002EF4                     l9971:
  9933                           
  9934                           ;display_lcd.c: 302: endereco = 0x00U;
  9935  002EF4  0E00               	movlw	0
  9936  002EF6  6E1B               	movwf	posicao_cursor_lcd@endereco,c
  9937                           
  9938                           ;display_lcd.c: 304: }
  9939                           
  9940                           ;display_lcd.c: 303: break;
  9941  002EF8  D00E               	goto	l9977
  9942  002EFA                     l9975:
  9943  002EFA  501A               	movf	posicao_cursor_lcd@linha,w,c
  9944                           
  9945                           ; Switch size 1, requested type "space"
  9946                           ; Number of cases is 4, Range of values is 1 to 4
  9947                           ; switch strategies available:
  9948                           ; Name         Instructions Cycles
  9949                           ; simple_byte           13     7 (average)
  9950                           ;	Chosen strategy is simple_byte
  9951  002EFC  0A01               	xorlw	1	; case 1
  9952  002EFE  B4D8               	btfsc	status,2,c
  9953  002F00  D7DE               	goto	l693
  9954  002F02  0A03               	xorlw	3	; case 2
  9955  002F04  B4D8               	btfsc	status,2,c
  9956  002F06  D7E1               	goto	l9959
  9957  002F08  0A01               	xorlw	1	; case 3
  9958  002F0A  B4D8               	btfsc	status,2,c
  9959  002F0C  D7E5               	goto	l9963
  9960  002F0E  0A07               	xorlw	7	; case 4
  9961  002F10  B4D8               	btfsc	status,2,c
  9962  002F12  D7E9               	goto	l9967
  9963  002F14  D7EF               	goto	l9971
  9964  002F16                     l9977:
  9965                           
  9966                           ;display_lcd.c: 306: coluna++;
  9967  002F16  2A19               	incf	posicao_cursor_lcd@coluna,f,c
  9968                           
  9969                           ;display_lcd.c: 307: }
  9970  002F18  0012               	return	
  9971  002F1A                     l9979:
  9972                           
  9973                           ;display_lcd.c: 308: else
  9974                           ;display_lcd.c: 309: {
  9975                           ;display_lcd.c: 310: endereco = 0x00U;
  9976  002F1A  0E00               	movlw	0
  9977  002F1C  6E1B               	movwf	posicao_cursor_lcd@endereco,c
  9978  002F1E  0012               	return	
  9979  002F20                     __end_of_posicao_cursor_lcd:
  9980                           	opt stack 0
  9981                           tosu	equ	0xFFF
  9982                           tosh	equ	0xFFE
  9983                           tosl	equ	0xFFD
  9984                           pclath	equ	0xFFA
  9985                           tblptru	equ	0xFF8
  9986                           tblptrh	equ	0xFF7
  9987                           tblptrl	equ	0xFF6
  9988                           tablat	equ	0xFF5
  9989                           prodh	equ	0xFF4
  9990                           prodl	equ	0xFF3
  9991                           intcon	equ	0xFF2
  9992                           intcon2	equ	0xFF1
  9993                           intcon3	equ	0xFF0
  9994                           postinc0	equ	0xFEE
  9995                           wreg	equ	0xFE8
  9996                           indf1	equ	0xFE7
  9997                           postinc1	equ	0xFE6
  9998                           postdec1	equ	0xFE5
  9999                           fsr1h	equ	0xFE2
 10000                           fsr1l	equ	0xFE1
 10001                           indf2	equ	0xFDF
 10002                           postinc2	equ	0xFDE
 10003                           postdec2	equ	0xFDD
 10004                           fsr2h	equ	0xFDA
 10005                           fsr2l	equ	0xFD9
 10006                           status	equ	0xFD8
 10007                           
 10008 ;; *************** function _endereco_cursor_lcd *****************
 10009 ;; Defined at:
 10010 ;;		line 218 in file "bibliotecas/display_lcd.c"
 10011 ;; Parameters:    Size  Location     Type
 10012 ;;  endereco        1    wreg     unsigned char 
 10013 ;; Auto vars:     Size  Location     Type
 10014 ;;  endereco        1   23[COMRAM] unsigned char 
 10015 ;; Return value:  Size  Location     Type
 10016 ;;                  1    wreg      void 
 10017 ;; Registers used:
 10018 ;;		wreg, status,2, status,0, cstack
 10019 ;; Tracked objects:
 10020 ;;		On entry : 0/0
 10021 ;;		On exit  : 0/0
 10022 ;;		Unchanged: 0/0
 10023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10024 ;;      Params:         0       0       0       0       0       0       0       0       0
 10025 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10026 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10027 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10028 ;;Total ram usage:        1 bytes
 10029 ;; Hardware stack levels used:    1
 10030 ;; Hardware stack levels required when called:    3
 10031 ;; This function calls:
 10032 ;;		_delay
 10033 ;; This function is called by:
 10034 ;;		_posicao_cursor_lcd
 10035 ;;		_cria_caractere_lcd
 10036 ;; This function uses a non-reentrant model
 10037 ;;
 10038                           
 10039                           	psect	text42
 10040  002F20                     __ptext42:
 10041                           	opt stack 0
 10042  002F20                     _endereco_cursor_lcd:
 10043                           	opt stack 25
 10044                           
 10045                           ;incstack = 0
 10046                           ;endereco_cursor_lcd@endereco stored from wreg
 10047  002F20  6E18               	movwf	endereco_cursor_lcd@endereco,c
 10048                           
 10049                           ;display_lcd.c: 221: PORTDbits.RD2 = 0;
 10050  002F22  9483               	bcf	3971,2,c	;volatile
 10051                           
 10052                           ;display_lcd.c: 222: PORTDbits.RD1 = 0;
 10053  002F24  9283               	bcf	3971,1,c	;volatile
 10054                           
 10055                           ;display_lcd.c: 223: PORTDbits.RD0 = 0;
 10056  002F26  9083               	bcf	3971,0,c	;volatile
 10057                           
 10058                           ;display_lcd.c: 226: PORTDbits.RD7 = 1;
 10059  002F28  8E83               	bsf	3971,7,c	;volatile
 10060                           
 10061                           ;display_lcd.c: 227: if(endereco&0b00010000){PORTDbits.RD4=1;}
 10062  002F2A  A818               	btfss	endereco_cursor_lcd@endereco,4,c
 10063  002F2C  D002               	goto	l674
 10064  002F2E  8883               	bsf	3971,4,c	;volatile
 10065  002F30  D001               	goto	l9537
 10066  002F32                     l674:
 10067                           
 10068                           ;display_lcd.c: 228: else {PORTDbits.RD4=0;}
 10069  002F32  9883               	bcf	3971,4,c	;volatile
 10070  002F34                     l9537:
 10071                           
 10072                           ;display_lcd.c: 229: if(endereco&0b00100000){PORTDbits.RD5=1;}
 10073  002F34  AA18               	btfss	endereco_cursor_lcd@endereco,5,c
 10074  002F36  D002               	goto	l676
 10075  002F38  8A83               	bsf	3971,5,c	;volatile
 10076  002F3A  D001               	goto	l9541
 10077  002F3C                     l676:
 10078                           
 10079                           ;display_lcd.c: 230: else {PORTDbits.RD5=0;}
 10080  002F3C  9A83               	bcf	3971,5,c	;volatile
 10081  002F3E                     l9541:
 10082                           
 10083                           ;display_lcd.c: 231: if(endereco&0b01000000){PORTDbits.RD6=1;}
 10084  002F3E  AC18               	btfss	endereco_cursor_lcd@endereco,6,c
 10085  002F40  D002               	goto	l678
 10086  002F42  8C83               	bsf	3971,6,c	;volatile
 10087  002F44  D001               	goto	l679
 10088  002F46                     l678:
 10089                           
 10090                           ;display_lcd.c: 232: else {PORTDbits.RD6=0;}
 10091  002F46  9C83               	bcf	3971,6,c	;volatile
 10092  002F48                     l679:
 10093                           
 10094                           ;display_lcd.c: 235: PORTDbits.RD0 = 1;
 10095  002F48  8083               	bsf	3971,0,c	;volatile
 10096                           
 10097                           ;display_lcd.c: 236: delay();
 10098  002F4A  EC51  F01A         	call	_delay	;wreg free
 10099                           
 10100                           ;display_lcd.c: 237: PORTDbits.RD0 = 0;
 10101  002F4E  9083               	bcf	3971,0,c	;volatile
 10102                           
 10103                           ;display_lcd.c: 238: delay();
 10104  002F50  EC51  F01A         	call	_delay	;wreg free
 10105                           
 10106                           ;display_lcd.c: 241: if(endereco&0b00000001){PORTDbits.RD4=1;}
 10107  002F54  A018               	btfss	endereco_cursor_lcd@endereco,0,c
 10108  002F56  D002               	goto	l680
 10109  002F58  8883               	bsf	3971,4,c	;volatile
 10110  002F5A  D001               	goto	l681
 10111  002F5C                     l680:
 10112                           
 10113                           ;display_lcd.c: 242: else {PORTDbits.RD4=0;}
 10114  002F5C  9883               	bcf	3971,4,c	;volatile
 10115  002F5E                     l681:
 10116                           
 10117                           ;display_lcd.c: 243: if(endereco&0b00000010){PORTDbits.RD5=1;}
 10118  002F5E  A218               	btfss	endereco_cursor_lcd@endereco,1,c
 10119  002F60  D002               	goto	l682
 10120  002F62  8A83               	bsf	3971,5,c	;volatile
 10121  002F64  D001               	goto	l683
 10122  002F66                     l682:
 10123                           
 10124                           ;display_lcd.c: 244: else {PORTDbits.RD5=0;}
 10125  002F66  9A83               	bcf	3971,5,c	;volatile
 10126  002F68                     l683:
 10127                           
 10128                           ;display_lcd.c: 245: if(endereco&0b00000100){PORTDbits.RD6=1;}
 10129  002F68  A418               	btfss	endereco_cursor_lcd@endereco,2,c
 10130  002F6A  D002               	goto	l684
 10131  002F6C  8C83               	bsf	3971,6,c	;volatile
 10132  002F6E  D001               	goto	l685
 10133  002F70                     l684:
 10134                           
 10135                           ;display_lcd.c: 246: else {PORTDbits.RD6=0;}
 10136  002F70  9C83               	bcf	3971,6,c	;volatile
 10137  002F72                     l685:
 10138                           
 10139                           ;display_lcd.c: 247: if(endereco&0b00001000){PORTDbits.RD7=1;}
 10140  002F72  A618               	btfss	endereco_cursor_lcd@endereco,3,c
 10141  002F74  D002               	goto	l686
 10142  002F76  8E83               	bsf	3971,7,c	;volatile
 10143  002F78  D001               	goto	l687
 10144  002F7A                     l686:
 10145                           
 10146                           ;display_lcd.c: 248: else {PORTDbits.RD7=0;}
 10147  002F7A  9E83               	bcf	3971,7,c	;volatile
 10148  002F7C                     l687:
 10149                           
 10150                           ;display_lcd.c: 251: PORTDbits.RD0 = 1;
 10151  002F7C  8083               	bsf	3971,0,c	;volatile
 10152                           
 10153                           ;display_lcd.c: 252: delay();
 10154  002F7E  EC51  F01A         	call	_delay	;wreg free
 10155                           
 10156                           ;display_lcd.c: 253: PORTDbits.RD0 = 0;
 10157  002F82  9083               	bcf	3971,0,c	;volatile
 10158                           
 10159                           ;display_lcd.c: 254: delay();
 10160  002F84  EC51  F01A         	call	_delay	;wreg free
 10161  002F88  0012               	return		;funcret
 10162  002F8A                     __end_of_endereco_cursor_lcd:
 10163                           	opt stack 0
 10164                           tosu	equ	0xFFF
 10165                           tosh	equ	0xFFE
 10166                           tosl	equ	0xFFD
 10167                           pclath	equ	0xFFA
 10168                           tblptru	equ	0xFF8
 10169                           tblptrh	equ	0xFF7
 10170                           tblptrl	equ	0xFF6
 10171                           tablat	equ	0xFF5
 10172                           prodh	equ	0xFF4
 10173                           prodl	equ	0xFF3
 10174                           intcon	equ	0xFF2
 10175                           intcon2	equ	0xFF1
 10176                           intcon3	equ	0xFF0
 10177                           postinc0	equ	0xFEE
 10178                           wreg	equ	0xFE8
 10179                           indf1	equ	0xFE7
 10180                           postinc1	equ	0xFE6
 10181                           postdec1	equ	0xFE5
 10182                           fsr1h	equ	0xFE2
 10183                           fsr1l	equ	0xFE1
 10184                           indf2	equ	0xFDF
 10185                           postinc2	equ	0xFDE
 10186                           postdec2	equ	0xFDD
 10187                           fsr2h	equ	0xFDA
 10188                           fsr2l	equ	0xFD9
 10189                           status	equ	0xFD8
 10190                           
 10191 ;; *************** function _escreve_cmd_lcd *****************
 10192 ;; Defined at:
 10193 ;;		line 162 in file "bibliotecas/display_lcd.c"
 10194 ;; Parameters:    Size  Location     Type
 10195 ;;  comando         1    wreg     unsigned char 
 10196 ;; Auto vars:     Size  Location     Type
 10197 ;;  comando         1   23[COMRAM] unsigned char 
 10198 ;; Return value:  Size  Location     Type
 10199 ;;                  1    wreg      void 
 10200 ;; Registers used:
 10201 ;;		wreg, status,2, status,0, cstack
 10202 ;; Tracked objects:
 10203 ;;		On entry : 0/0
 10204 ;;		On exit  : 0/0
 10205 ;;		Unchanged: 0/0
 10206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10207 ;;      Params:         0       0       0       0       0       0       0       0       0
 10208 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10209 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10210 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10211 ;;Total ram usage:        1 bytes
 10212 ;; Hardware stack levels used:    1
 10213 ;; Hardware stack levels required when called:    3
 10214 ;; This function calls:
 10215 ;;		_delay
 10216 ;; This function is called by:
 10217 ;;		_mensagem_inicial
 10218 ;;		_GPS
 10219 ;;		_get_date
 10220 ;;		_init_lcd
 10221 ;;		_SDCard
 10222 ;;		_inicializa_SPI
 10223 ;;		_leitura_chave
 10224 ;;		_disk_initialize
 10225 ;;		_cria_caractere_lcd
 10226 ;; This function uses a non-reentrant model
 10227 ;;
 10228                           
 10229                           	psect	text43
 10230  002B52                     __ptext43:
 10231                           	opt stack 0
 10232  002B52                     _escreve_cmd_lcd:
 10233                           	opt stack 26
 10234                           
 10235                           ;incstack = 0
 10236                           ;escreve_cmd_lcd@comando stored from wreg
 10237  002B52  6E18               	movwf	escreve_cmd_lcd@comando,c
 10238                           
 10239                           ;display_lcd.c: 165: PORTDbits.RD2 = 0;
 10240  002B54  9483               	bcf	3971,2,c	;volatile
 10241                           
 10242                           ;display_lcd.c: 166: PORTDbits.RD1 = 0;
 10243  002B56  9283               	bcf	3971,1,c	;volatile
 10244                           
 10245                           ;display_lcd.c: 167: PORTDbits.RD0 = 0;
 10246  002B58  9083               	bcf	3971,0,c	;volatile
 10247                           
 10248                           ;display_lcd.c: 170: if(comando&0b00010000){PORTDbits.RD4=1;}
 10249  002B5A  A818               	btfss	escreve_cmd_lcd@comando,4,c
 10250  002B5C  D002               	goto	l652
 10251  002B5E  8883               	bsf	3971,4,c	;volatile
 10252  002B60  D001               	goto	l9995
 10253  002B62                     l652:
 10254                           
 10255                           ;display_lcd.c: 171: else {PORTDbits.RD4=0;}
 10256  002B62  9883               	bcf	3971,4,c	;volatile
 10257  002B64                     l9995:
 10258                           
 10259                           ;display_lcd.c: 172: if(comando&0b00100000){PORTDbits.RD5=1;}
 10260  002B64  AA18               	btfss	escreve_cmd_lcd@comando,5,c
 10261  002B66  D002               	goto	l654
 10262  002B68  8A83               	bsf	3971,5,c	;volatile
 10263  002B6A  D001               	goto	l9999
 10264  002B6C                     l654:
 10265                           
 10266                           ;display_lcd.c: 173: else {PORTDbits.RD5=0;}
 10267  002B6C  9A83               	bcf	3971,5,c	;volatile
 10268  002B6E                     l9999:
 10269                           
 10270                           ;display_lcd.c: 174: if(comando&0b01000000){PORTDbits.RD6=1;}
 10271  002B6E  AC18               	btfss	escreve_cmd_lcd@comando,6,c
 10272  002B70  D002               	goto	l656
 10273  002B72  8C83               	bsf	3971,6,c	;volatile
 10274  002B74  D001               	goto	l10003
 10275  002B76                     l656:
 10276                           
 10277                           ;display_lcd.c: 175: else {PORTDbits.RD6=0;}
 10278  002B76  9C83               	bcf	3971,6,c	;volatile
 10279  002B78                     l10003:
 10280                           
 10281                           ;display_lcd.c: 176: if(comando&0b10000000){PORTDbits.RD7=1;}
 10282  002B78  AE18               	btfss	escreve_cmd_lcd@comando,7,c
 10283  002B7A  D002               	goto	l658
 10284  002B7C  8E83               	bsf	3971,7,c	;volatile
 10285  002B7E  D001               	goto	l659
 10286  002B80                     l658:
 10287                           
 10288                           ;display_lcd.c: 177: else {PORTDbits.RD7=0;}
 10289  002B80  9E83               	bcf	3971,7,c	;volatile
 10290  002B82                     l659:
 10291                           
 10292                           ;display_lcd.c: 180: PORTDbits.RD0 = 1;
 10293  002B82  8083               	bsf	3971,0,c	;volatile
 10294                           
 10295                           ;display_lcd.c: 181: delay();
 10296  002B84  EC51  F01A         	call	_delay	;wreg free
 10297                           
 10298                           ;display_lcd.c: 182: PORTDbits.RD0 = 0;
 10299  002B88  9083               	bcf	3971,0,c	;volatile
 10300                           
 10301                           ;display_lcd.c: 183: delay();
 10302  002B8A  EC51  F01A         	call	_delay	;wreg free
 10303                           
 10304                           ;display_lcd.c: 186: if(comando&0b00000001){PORTDbits.RD4=1;}
 10305  002B8E  A018               	btfss	escreve_cmd_lcd@comando,0,c
 10306  002B90  D002               	goto	l660
 10307  002B92  8883               	bsf	3971,4,c	;volatile
 10308  002B94  D001               	goto	l661
 10309  002B96                     l660:
 10310                           
 10311                           ;display_lcd.c: 187: else {PORTDbits.RD4=0;}
 10312  002B96  9883               	bcf	3971,4,c	;volatile
 10313  002B98                     l661:
 10314                           
 10315                           ;display_lcd.c: 188: if(comando&0b00000010){PORTDbits.RD5=1;}
 10316  002B98  A218               	btfss	escreve_cmd_lcd@comando,1,c
 10317  002B9A  D002               	goto	l662
 10318  002B9C  8A83               	bsf	3971,5,c	;volatile
 10319  002B9E  D001               	goto	l663
 10320  002BA0                     l662:
 10321                           
 10322                           ;display_lcd.c: 189: else {PORTDbits.RD5=0;}
 10323  002BA0  9A83               	bcf	3971,5,c	;volatile
 10324  002BA2                     l663:
 10325                           
 10326                           ;display_lcd.c: 190: if(comando&0b00000100){PORTDbits.RD6=1;}
 10327  002BA2  A418               	btfss	escreve_cmd_lcd@comando,2,c
 10328  002BA4  D002               	goto	l664
 10329  002BA6  8C83               	bsf	3971,6,c	;volatile
 10330  002BA8  D001               	goto	l665
 10331  002BAA                     l664:
 10332                           
 10333                           ;display_lcd.c: 191: else {PORTDbits.RD6=0;}
 10334  002BAA  9C83               	bcf	3971,6,c	;volatile
 10335  002BAC                     l665:
 10336                           
 10337                           ;display_lcd.c: 192: if(comando&0b00001000){PORTDbits.RD7=1;}
 10338  002BAC  A618               	btfss	escreve_cmd_lcd@comando,3,c
 10339  002BAE  D002               	goto	l666
 10340  002BB0  8E83               	bsf	3971,7,c	;volatile
 10341  002BB2  D001               	goto	l667
 10342  002BB4                     l666:
 10343                           
 10344                           ;display_lcd.c: 193: else {PORTDbits.RD7=0;}
 10345  002BB4  9E83               	bcf	3971,7,c	;volatile
 10346  002BB6                     l667:
 10347                           
 10348                           ;display_lcd.c: 196: PORTDbits.RD0 = 1;
 10349  002BB6  8083               	bsf	3971,0,c	;volatile
 10350                           
 10351                           ;display_lcd.c: 197: delay();
 10352  002BB8  EC51  F01A         	call	_delay	;wreg free
 10353                           
 10354                           ;display_lcd.c: 198: PORTDbits.RD0 = 0;
 10355  002BBC  9083               	bcf	3971,0,c	;volatile
 10356                           
 10357                           ;display_lcd.c: 199: delay();
 10358  002BBE  EC51  F01A         	call	_delay	;wreg free
 10359                           
 10360                           ;display_lcd.c: 204: if (comando==0x01 || comando==0x02 || comando==0x03)
 10361  002BC2  0418               	decf	escreve_cmd_lcd@comando,w,c
 10362  002BC4  B4D8               	btfsc	status,2,c
 10363  002BC6  D008               	goto	l10031
 10364  002BC8  0E02               	movlw	2
 10365  002BCA  1818               	xorwf	escreve_cmd_lcd@comando,w,c
 10366  002BCC  B4D8               	btfsc	status,2,c
 10367  002BCE  D004               	goto	l10031
 10368  002BD0  0E03               	movlw	3
 10369  002BD2  1818               	xorwf	escreve_cmd_lcd@comando,w,c
 10370  002BD4  A4D8               	btfss	status,2,c
 10371  002BD6  0012               	return	
 10372  002BD8                     l10031:
 10373                           
 10374                           ;display_lcd.c: 205: { delay(); }
 10375  002BD8  EC51  F01A         	call	_delay	;wreg free
 10376  002BDC  0012               	return	
 10377  002BDE                     __end_of_escreve_cmd_lcd:
 10378                           	opt stack 0
 10379                           tosu	equ	0xFFF
 10380                           tosh	equ	0xFFE
 10381                           tosl	equ	0xFFD
 10382                           pclath	equ	0xFFA
 10383                           tblptru	equ	0xFF8
 10384                           tblptrh	equ	0xFF7
 10385                           tblptrl	equ	0xFF6
 10386                           tablat	equ	0xFF5
 10387                           prodh	equ	0xFF4
 10388                           prodl	equ	0xFF3
 10389                           intcon	equ	0xFF2
 10390                           intcon2	equ	0xFF1
 10391                           intcon3	equ	0xFF0
 10392                           postinc0	equ	0xFEE
 10393                           wreg	equ	0xFE8
 10394                           indf1	equ	0xFE7
 10395                           postinc1	equ	0xFE6
 10396                           postdec1	equ	0xFE5
 10397                           fsr1h	equ	0xFE2
 10398                           fsr1l	equ	0xFE1
 10399                           indf2	equ	0xFDF
 10400                           postinc2	equ	0xFDE
 10401                           postdec2	equ	0xFDD
 10402                           fsr2h	equ	0xFDA
 10403                           fsr2l	equ	0xFD9
 10404                           status	equ	0xFD8
 10405                           
 10406 ;; *************** function _atol *****************
 10407 ;; Defined at:
 10408 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\atol.c"
 10409 ;; Parameters:    Size  Location     Type
 10410 ;;  s               2   33[COMRAM] PTR const unsigned char 
 10411 ;;		 -> get_date@date_buffer(6), get_gpstime@Time_Buffer(15), 
 10412 ;; Auto vars:     Size  Location     Type
 10413 ;;  a               4   42[COMRAM] long 
 10414 ;;  c               1   46[COMRAM] unsigned char 
 10415 ;;  sign            1   41[COMRAM] unsigned char 
 10416 ;; Return value:  Size  Location     Type
 10417 ;;                  4   33[COMRAM] long 
 10418 ;; Registers used:
 10419 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10420 ;; Tracked objects:
 10421 ;;		On entry : 0/0
 10422 ;;		On exit  : 0/0
 10423 ;;		Unchanged: 0/0
 10424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10425 ;;      Params:         4       0       0       0       0       0       0       0       0
 10426 ;;      Locals:         6       0       0       0       0       0       0       0       0
 10427 ;;      Temps:          4       0       0       0       0       0       0       0       0
 10428 ;;      Totals:        14       0       0       0       0       0       0       0       0
 10429 ;;Total ram usage:       14 bytes
 10430 ;; Hardware stack levels used:    1
 10431 ;; Hardware stack levels required when called:    3
 10432 ;; This function calls:
 10433 ;;		___lmul
 10434 ;;		_isdigit
 10435 ;; This function is called by:
 10436 ;;		_get_date
 10437 ;;		_get_gpstime
 10438 ;; This function uses a non-reentrant model
 10439 ;;
 10440                           
 10441                           	psect	text44
 10442  002388                     __ptext44:
 10443                           	opt stack 0
 10444  002388                     _atol:
 10445                           	opt stack 24
 10446  002388  C022  FFD9         	movff	atol@s,fsr2l
 10447  00238C  C023  FFDA         	movff	atol@s+1,fsr2h
 10448  002390  50DF               	movf	indf2,w,c
 10449  002392  6E2F               	movwf	atol@c,c
 10450  002394  4A22               	infsnz	atol@s,f,c
 10451  002396  2A23               	incf	atol@s+1,f,c
 10452  002398  0E20               	movlw	32
 10453  00239A  182F               	xorwf	atol@c,w,c
 10454  00239C  B4D8               	btfsc	status,2,c
 10455  00239E  D7F4               	goto	l10033
 10456  0023A0  0E09               	movlw	9
 10457  0023A2  182F               	xorwf	atol@c,w,c
 10458  0023A4  B4D8               	btfsc	status,2,c
 10459  0023A6  D7F0               	goto	l10033
 10460  0023A8  0E00               	movlw	0
 10461  0023AA  6E2B               	movwf	atol@a,c
 10462  0023AC  0E00               	movlw	0
 10463  0023AE  6E2C               	movwf	atol@a+1,c
 10464  0023B0  0E00               	movlw	0
 10465  0023B2  6E2D               	movwf	atol@a+2,c
 10466  0023B4  0E00               	movlw	0
 10467  0023B6  6E2E               	movwf	atol@a+3,c
 10468  0023B8  0E00               	movlw	0
 10469  0023BA  6E2A               	movwf	atol@sign,c
 10470  0023BC  0E2D               	movlw	45
 10471  0023BE  182F               	xorwf	atol@c,w,c
 10472  0023C0  A4D8               	btfss	status,2,c
 10473  0023C2  D005               	goto	l10051
 10474  0023C4  2A2A               	incf	atol@sign,f,c
 10475  0023C6  D02A               	goto	l10059
 10476  0023C8                     l10049:
 10477  0023C8  4A22               	infsnz	atol@s,f,c
 10478  0023CA  2A23               	incf	atol@s+1,f,c
 10479  0023CC  D02E               	goto	l10063
 10480  0023CE                     l10051:
 10481  0023CE  0E2B               	movlw	43
 10482  0023D0  182F               	xorwf	atol@c,w,c
 10483  0023D2  A4D8               	btfss	status,2,c
 10484  0023D4  D02A               	goto	l10063
 10485  0023D6  D022               	goto	l10059
 10486  0023D8                     l10057:
 10487  0023D8  C02B  F016         	movff	atol@a,___lmul@multiplier
 10488  0023DC  C02C  F017         	movff	atol@a+1,___lmul@multiplier+1
 10489  0023E0  C02D  F018         	movff	atol@a+2,___lmul@multiplier+2
 10490  0023E4  C02E  F019         	movff	atol@a+3,___lmul@multiplier+3
 10491  0023E8  0E0A               	movlw	10
 10492  0023EA  6E1A               	movwf	___lmul@multiplicand,c
 10493  0023EC  0E00               	movlw	0
 10494  0023EE  6E1B               	movwf	___lmul@multiplicand+1,c
 10495  0023F0  0E00               	movlw	0
 10496  0023F2  6E1C               	movwf	___lmul@multiplicand+2,c
 10497  0023F4  0E00               	movlw	0
 10498  0023F6  6E1D               	movwf	___lmul@multiplicand+3,c
 10499  0023F8  EC58  F018         	call	___lmul	;wreg free
 10500  0023FC  C02F  F026         	movff	atol@c,??_atol
 10501  002400  0ED0               	movlw	208
 10502  002402  2626               	addwf	??_atol,f,c
 10503  002404  5026               	movf	??_atol,w,c
 10504  002406  2416               	addwf	?___lmul,w,c
 10505  002408  6E2B               	movwf	atol@a,c
 10506  00240A  0E00               	movlw	0
 10507  00240C  2017               	addwfc	?___lmul+1,w,c
 10508  00240E  6E2C               	movwf	atol@a+1,c
 10509  002410  0E00               	movlw	0
 10510  002412  2018               	addwfc	?___lmul+2,w,c
 10511  002414  6E2D               	movwf	atol@a+2,c
 10512  002416  0E00               	movlw	0
 10513  002418  2019               	addwfc	?___lmul+3,w,c
 10514  00241A  6E2E               	movwf	atol@a+3,c
 10515  00241C                     l10059:
 10516  00241C  C022  FFD9         	movff	atol@s,fsr2l
 10517  002420  C023  FFDA         	movff	atol@s+1,fsr2h
 10518  002424  50DF               	movf	indf2,w,c
 10519  002426  6E2F               	movwf	atol@c,c
 10520  002428  D7CF               	goto	l10049
 10521  00242A                     l10063:
 10522  00242A  502F               	movf	atol@c,w,c
 10523  00242C  EC74  F01A         	call	_isdigit
 10524  002430  B0D8               	btfsc	status,0,c
 10525  002432  D7D2               	goto	l10057
 10526  002434  502A               	movf	atol@sign,w,c
 10527  002436  B4D8               	btfsc	status,2,c
 10528  002438  D01A               	goto	l1583
 10529  00243A  C02B  F026         	movff	atol@a,??_atol
 10530  00243E  C02C  F027         	movff	atol@a+1,??_atol+1
 10531  002442  C02D  F028         	movff	atol@a+2,??_atol+2
 10532  002446  C02E  F029         	movff	atol@a+3,??_atol+3
 10533  00244A  1E26               	comf	??_atol,f,c
 10534  00244C  1E27               	comf	??_atol+1,f,c
 10535  00244E  1E28               	comf	??_atol+2,f,c
 10536  002450  1E29               	comf	??_atol+3,f,c
 10537  002452  2A26               	incf	??_atol,f,c
 10538  002454  0E00               	movlw	0
 10539  002456  2227               	addwfc	??_atol+1,f,c
 10540  002458  2228               	addwfc	??_atol+2,f,c
 10541  00245A  2229               	addwfc	??_atol+3,f,c
 10542  00245C  C026  F022         	movff	??_atol,?_atol
 10543  002460  C027  F023         	movff	??_atol+1,?_atol+1
 10544  002464  C028  F024         	movff	??_atol+2,?_atol+2
 10545  002468  C029  F025         	movff	??_atol+3,?_atol+3
 10546  00246C  0012               	return	
 10547  00246E                     l1583:
 10548  00246E  C02B  F022         	movff	atol@a,?_atol
 10549  002472  C02C  F023         	movff	atol@a+1,?_atol+1
 10550  002476  C02D  F024         	movff	atol@a+2,?_atol+2
 10551  00247A  C02E  F025         	movff	atol@a+3,?_atol+3
 10552  00247E  0012               	return		;funcret
 10553  002480                     __end_of_atol:
 10554                           	opt stack 0
 10555                           tosu	equ	0xFFF
 10556                           tosh	equ	0xFFE
 10557                           tosl	equ	0xFFD
 10558                           pclath	equ	0xFFA
 10559                           tblptru	equ	0xFF8
 10560                           tblptrh	equ	0xFF7
 10561                           tblptrl	equ	0xFF6
 10562                           tablat	equ	0xFF5
 10563                           prodh	equ	0xFF4
 10564                           prodl	equ	0xFF3
 10565                           intcon	equ	0xFF2
 10566                           intcon2	equ	0xFF1
 10567                           intcon3	equ	0xFF0
 10568                           postinc0	equ	0xFEE
 10569                           wreg	equ	0xFE8
 10570                           indf1	equ	0xFE7
 10571                           postinc1	equ	0xFE6
 10572                           postdec1	equ	0xFE5
 10573                           fsr1h	equ	0xFE2
 10574                           fsr1l	equ	0xFE1
 10575                           indf2	equ	0xFDF
 10576                           postinc2	equ	0xFDE
 10577                           postdec2	equ	0xFDD
 10578                           fsr2h	equ	0xFDA
 10579                           fsr2l	equ	0xFD9
 10580                           status	equ	0xFD8
 10581                           
 10582 ;; *************** function _isdigit *****************
 10583 ;; Defined at:
 10584 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
 10585 ;; Parameters:    Size  Location     Type
 10586 ;;  c               1    wreg     unsigned char 
 10587 ;; Auto vars:     Size  Location     Type
 10588 ;;  c               1   23[COMRAM] unsigned char 
 10589 ;; Return value:  Size  Location     Type
 10590 ;;		None               void
 10591 ;; Registers used:
 10592 ;;		wreg, status,2, status,0
 10593 ;; Tracked objects:
 10594 ;;		On entry : 0/0
 10595 ;;		On exit  : 0/0
 10596 ;;		Unchanged: 0/0
 10597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10598 ;;      Params:         0       0       0       0       0       0       0       0       0
 10599 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10600 ;;      Temps:          1       0       0       0       0       0       0       0       0
 10601 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10602 ;;Total ram usage:        3 bytes
 10603 ;; Hardware stack levels used:    1
 10604 ;; Hardware stack levels required when called:    2
 10605 ;; This function calls:
 10606 ;;		Nothing
 10607 ;; This function is called by:
 10608 ;;		_sprintf
 10609 ;;		_strtod
 10610 ;;		_atol
 10611 ;; This function uses a non-reentrant model
 10612 ;;
 10613                           
 10614                           	psect	text45
 10615  0034E8                     __ptext45:
 10616                           	opt stack 0
 10617  0034E8                     _isdigit:
 10618                           	opt stack 25
 10619                           
 10620                           ;incstack = 0
 10621                           ;isdigit@c stored from wreg
 10622  0034E8  6E18               	movwf	isdigit@c,c
 10623  0034EA  0E00               	movlw	0
 10624  0034EC  6E17               	movwf	_isdigit$2850,c
 10625  0034EE  0E3A               	movlw	58
 10626  0034F0  6018               	cpfslt	isdigit@c,c
 10627  0034F2  D005               	goto	l9333
 10628  0034F4  0E2F               	movlw	47
 10629  0034F6  6418               	cpfsgt	isdigit@c,c
 10630  0034F8  D002               	goto	l9333
 10631  0034FA  0E01               	movlw	1
 10632  0034FC  6E17               	movwf	_isdigit$2850,c
 10633  0034FE                     l9333:
 10634  0034FE  C017  F016         	movff	_isdigit$2850,??_isdigit
 10635  003502  3016               	rrcf	??_isdigit,w,c
 10636  003504  0012               	return	
 10637  003506                     __end_of_isdigit:
 10638                           	opt stack 0
 10639                           tosu	equ	0xFFF
 10640                           tosh	equ	0xFFE
 10641                           tosl	equ	0xFFD
 10642                           pclath	equ	0xFFA
 10643                           tblptru	equ	0xFF8
 10644                           tblptrh	equ	0xFF7
 10645                           tblptrl	equ	0xFF6
 10646                           tablat	equ	0xFF5
 10647                           prodh	equ	0xFF4
 10648                           prodl	equ	0xFF3
 10649                           intcon	equ	0xFF2
 10650                           intcon2	equ	0xFF1
 10651                           intcon3	equ	0xFF0
 10652                           postinc0	equ	0xFEE
 10653                           wreg	equ	0xFE8
 10654                           indf1	equ	0xFE7
 10655                           postinc1	equ	0xFE6
 10656                           postdec1	equ	0xFE5
 10657                           fsr1h	equ	0xFE2
 10658                           fsr1l	equ	0xFE1
 10659                           indf2	equ	0xFDF
 10660                           postinc2	equ	0xFDE
 10661                           postdec2	equ	0xFDD
 10662                           fsr2h	equ	0xFDA
 10663                           fsr2l	equ	0xFD9
 10664                           status	equ	0xFD8
 10665                           
 10666 ;; *************** function ___lmul *****************
 10667 ;; Defined at:
 10668 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
 10669 ;; Parameters:    Size  Location     Type
 10670 ;;  multiplier      4   21[COMRAM] unsigned long 
 10671 ;;  multiplicand    4   25[COMRAM] unsigned long 
 10672 ;; Auto vars:     Size  Location     Type
 10673 ;;  product         4   29[COMRAM] unsigned long 
 10674 ;; Return value:  Size  Location     Type
 10675 ;;                  4   21[COMRAM] unsigned long 
 10676 ;; Registers used:
 10677 ;;		wreg, status,2, status,0
 10678 ;; Tracked objects:
 10679 ;;		On entry : 0/0
 10680 ;;		On exit  : 0/0
 10681 ;;		Unchanged: 0/0
 10682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10683 ;;      Params:         8       0       0       0       0       0       0       0       0
 10684 ;;      Locals:         4       0       0       0       0       0       0       0       0
 10685 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10686 ;;      Totals:        12       0       0       0       0       0       0       0       0
 10687 ;;Total ram usage:       12 bytes
 10688 ;; Hardware stack levels used:    1
 10689 ;; Hardware stack levels required when called:    2
 10690 ;; This function calls:
 10691 ;;		Nothing
 10692 ;; This function is called by:
 10693 ;;		_strtod
 10694 ;;		_atol
 10695 ;;		_clust2sect
 10696 ;;		_pf_mount
 10697 ;; This function uses a non-reentrant model
 10698 ;;
 10699                           
 10700                           	psect	text46
 10701  0030B0                     __ptext46:
 10702                           	opt stack 0
 10703  0030B0                     ___lmul:
 10704                           	opt stack 23
 10705                           
 10706                           ;incstack = 0
 10707  0030B0  0E00               	movlw	0
 10708  0030B2  6E1E               	movwf	___lmul@product,c
 10709  0030B4  0E00               	movlw	0
 10710  0030B6  6E1F               	movwf	___lmul@product+1,c
 10711  0030B8  0E00               	movlw	0
 10712  0030BA  6E20               	movwf	___lmul@product+2,c
 10713  0030BC  0E00               	movlw	0
 10714  0030BE  6E21               	movwf	___lmul@product+3,c
 10715  0030C0                     l9339:
 10716  0030C0  A016               	btfss	___lmul@multiplier,0,c
 10717  0030C2  D008               	goto	l9343
 10718  0030C4  501A               	movf	___lmul@multiplicand,w,c
 10719  0030C6  261E               	addwf	___lmul@product,f,c
 10720  0030C8  501B               	movf	___lmul@multiplicand+1,w,c
 10721  0030CA  221F               	addwfc	___lmul@product+1,f,c
 10722  0030CC  501C               	movf	___lmul@multiplicand+2,w,c
 10723  0030CE  2220               	addwfc	___lmul@product+2,f,c
 10724  0030D0  501D               	movf	___lmul@multiplicand+3,w,c
 10725  0030D2  2221               	addwfc	___lmul@product+3,f,c
 10726  0030D4                     l9343:
 10727  0030D4  90D8               	bcf	status,0,c
 10728  0030D6  361A               	rlcf	___lmul@multiplicand,f,c
 10729  0030D8  361B               	rlcf	___lmul@multiplicand+1,f,c
 10730  0030DA  361C               	rlcf	___lmul@multiplicand+2,f,c
 10731  0030DC  361D               	rlcf	___lmul@multiplicand+3,f,c
 10732  0030DE  90D8               	bcf	status,0,c
 10733  0030E0  3219               	rrcf	___lmul@multiplier+3,f,c
 10734  0030E2  3218               	rrcf	___lmul@multiplier+2,f,c
 10735  0030E4  3217               	rrcf	___lmul@multiplier+1,f,c
 10736  0030E6  3216               	rrcf	___lmul@multiplier,f,c
 10737  0030E8  5016               	movf	___lmul@multiplier,w,c
 10738  0030EA  1017               	iorwf	___lmul@multiplier+1,w,c
 10739  0030EC  1018               	iorwf	___lmul@multiplier+2,w,c
 10740  0030EE  1019               	iorwf	___lmul@multiplier+3,w,c
 10741  0030F0  A4D8               	btfss	status,2,c
 10742  0030F2  D7E6               	goto	l9339
 10743  0030F4  C01E  F016         	movff	___lmul@product,?___lmul
 10744  0030F8  C01F  F017         	movff	___lmul@product+1,?___lmul+1
 10745  0030FC  C020  F018         	movff	___lmul@product+2,?___lmul+2
 10746  003100  C021  F019         	movff	___lmul@product+3,?___lmul+3
 10747  003104  0012               	return		;funcret
 10748  003106                     __end_of___lmul:
 10749                           	opt stack 0
 10750                           tosu	equ	0xFFF
 10751                           tosh	equ	0xFFE
 10752                           tosl	equ	0xFFD
 10753                           pclath	equ	0xFFA
 10754                           tblptru	equ	0xFF8
 10755                           tblptrh	equ	0xFF7
 10756                           tblptrl	equ	0xFF6
 10757                           tablat	equ	0xFF5
 10758                           prodh	equ	0xFF4
 10759                           prodl	equ	0xFF3
 10760                           intcon	equ	0xFF2
 10761                           intcon2	equ	0xFF1
 10762                           intcon3	equ	0xFF0
 10763                           postinc0	equ	0xFEE
 10764                           wreg	equ	0xFE8
 10765                           indf1	equ	0xFE7
 10766                           postinc1	equ	0xFE6
 10767                           postdec1	equ	0xFE5
 10768                           fsr1h	equ	0xFE2
 10769                           fsr1l	equ	0xFE1
 10770                           indf2	equ	0xFDF
 10771                           postinc2	equ	0xFDE
 10772                           postdec2	equ	0xFDD
 10773                           fsr2h	equ	0xFDA
 10774                           fsr2l	equ	0xFD9
 10775                           status	equ	0xFD8
 10776                           
 10777 ;; *************** function _escreve_inteiro_lcd *****************
 10778 ;; Defined at:
 10779 ;;		line 376 in file "bibliotecas/display_lcd.c"
 10780 ;; Parameters:    Size  Location     Type
 10781 ;;  valor           2   45[COMRAM] int 
 10782 ;; Auto vars:     Size  Location     Type
 10783 ;;  texto           7    0[BANK0 ] unsigned char [7]
 10784 ;; Return value:  Size  Location     Type
 10785 ;;                  1    wreg      void 
 10786 ;; Registers used:
 10787 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10788 ;; Tracked objects:
 10789 ;;		On entry : 0/0
 10790 ;;		On exit  : 0/0
 10791 ;;		Unchanged: 0/0
 10792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10793 ;;      Params:         2       0       0       0       0       0       0       0       0
 10794 ;;      Locals:         0       7       0       0       0       0       0       0       0
 10795 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10796 ;;      Totals:         2       7       0       0       0       0       0       0       0
 10797 ;;Total ram usage:        9 bytes
 10798 ;; Hardware stack levels used:    1
 10799 ;; Hardware stack levels required when called:    5
 10800 ;; This function calls:
 10801 ;;		_escreve_frase_ram_lcd
 10802 ;;		_itoa
 10803 ;; This function is called by:
 10804 ;;		_GPS
 10805 ;;		_escreve_float_lcd
 10806 ;; This function uses a non-reentrant model
 10807 ;;
 10808                           
 10809                           	psect	text47
 10810  003306                     __ptext47:
 10811                           	opt stack 0
 10812  003306                     _escreve_inteiro_lcd:
 10813                           	opt stack 23
 10814                           
 10815                           ;display_lcd.c: 378: char texto[7] = "000000";
 10816                           
 10817                           ;incstack = 0
 10818  003306  EE20  F0ED         	lfsr	2,escreve_inteiro_lcd@F3962
 10819  00330A  EE10  F060         	lfsr	1,escreve_inteiro_lcd@texto
 10820  00330E  0E06               	movlw	6
 10821  003310                     u13081:
 10822  003310  CFDB FFE3          	movff	plusw2,plusw1
 10823  003314  06E8               	decf	wreg,f,c
 10824  003316  E2FC               	bc	u13081
 10825                           
 10826                           ;display_lcd.c: 379: itoa(texto,valor, 10);
 10827  003318  0E60               	movlw	low escreve_inteiro_lcd@texto
 10828  00331A  6E26               	movwf	itoa@buf,c
 10829  00331C  0E00               	movlw	high escreve_inteiro_lcd@texto
 10830  00331E  6E27               	movwf	itoa@buf+1,c
 10831  003320  C02E  F028         	movff	escreve_inteiro_lcd@valor,itoa@val
 10832  003324  C02F  F029         	movff	escreve_inteiro_lcd@valor+1,itoa@val+1
 10833  003328  0E00               	movlw	0
 10834  00332A  6E2B               	movwf	itoa@base+1,c
 10835  00332C  0E0A               	movlw	10
 10836  00332E  6E2A               	movwf	itoa@base,c
 10837  003330  EC41  F019         	call	_itoa	;wreg free
 10838                           
 10839                           ;display_lcd.c: 380: escreve_frase_ram_lcd(texto);
 10840  003334  0E60               	movlw	low escreve_inteiro_lcd@texto
 10841  003336  6E19               	movwf	escreve_frase_ram_lcd@buffer,c
 10842  003338  0E00               	movlw	high escreve_inteiro_lcd@texto
 10843  00333A  6E1A               	movwf	escreve_frase_ram_lcd@buffer+1,c
 10844  00333C  ECAC  F018         	call	_escreve_frase_ram_lcd	;wreg free
 10845  003340  0012               	return		;funcret
 10846  003342                     __end_of_escreve_inteiro_lcd:
 10847                           	opt stack 0
 10848                           tosu	equ	0xFFF
 10849                           tosh	equ	0xFFE
 10850                           tosl	equ	0xFFD
 10851                           pclath	equ	0xFFA
 10852                           tblptru	equ	0xFF8
 10853                           tblptrh	equ	0xFF7
 10854                           tblptrl	equ	0xFF6
 10855                           tablat	equ	0xFF5
 10856                           prodh	equ	0xFF4
 10857                           prodl	equ	0xFF3
 10858                           intcon	equ	0xFF2
 10859                           intcon2	equ	0xFF1
 10860                           intcon3	equ	0xFF0
 10861                           postinc0	equ	0xFEE
 10862                           wreg	equ	0xFE8
 10863                           indf1	equ	0xFE7
 10864                           postinc1	equ	0xFE6
 10865                           postdec1	equ	0xFE5
 10866                           plusw1	equ	0xFE3
 10867                           fsr1h	equ	0xFE2
 10868                           fsr1l	equ	0xFE1
 10869                           indf2	equ	0xFDF
 10870                           postinc2	equ	0xFDE
 10871                           postdec2	equ	0xFDD
 10872                           plusw2	equ	0xFDB
 10873                           fsr2h	equ	0xFDA
 10874                           fsr2l	equ	0xFD9
 10875                           status	equ	0xFD8
 10876                           
 10877 ;; *************** function _itoa *****************
 10878 ;; Defined at:
 10879 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\itoa.c"
 10880 ;; Parameters:    Size  Location     Type
 10881 ;;  buf             2   37[COMRAM] PTR unsigned char 
 10882 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
 10883 ;;  val             2   39[COMRAM] int 
 10884 ;;  base            2   41[COMRAM] int 
 10885 ;; Auto vars:     Size  Location     Type
 10886 ;;  cp              2   43[COMRAM] PTR unsigned char 
 10887 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
 10888 ;; Return value:  Size  Location     Type
 10889 ;;                  2   37[COMRAM] PTR unsigned char 
 10890 ;; Registers used:
 10891 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10892 ;; Tracked objects:
 10893 ;;		On entry : 0/0
 10894 ;;		On exit  : 0/0
 10895 ;;		Unchanged: 0/0
 10896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10897 ;;      Params:         6       0       0       0       0       0       0       0       0
 10898 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10899 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10900 ;;      Totals:         8       0       0       0       0       0       0       0       0
 10901 ;;Total ram usage:        8 bytes
 10902 ;; Hardware stack levels used:    1
 10903 ;; Hardware stack levels required when called:    4
 10904 ;; This function calls:
 10905 ;;		_utoa
 10906 ;; This function is called by:
 10907 ;;		_escreve_inteiro_lcd
 10908 ;;		_escreve_inteiro_uart
 10909 ;; This function uses a non-reentrant model
 10910 ;;
 10911                           
 10912                           	psect	text48
 10913  003282                     __ptext48:
 10914                           	opt stack 0
 10915  003282                     _itoa:
 10916                           	opt stack 23
 10917                           
 10918                           ;incstack = 0
 10919  003282  C026  F02C         	movff	itoa@buf,itoa@cp
 10920  003286  C027  F02D         	movff	itoa@buf+1,itoa@cp+1
 10921  00328A  AE29               	btfss	itoa@val+1,7,c
 10922  00328C  D00C               	goto	l10225
 10923  00328E  C026  FFD9         	movff	itoa@buf,fsr2l
 10924  003292  C027  FFDA         	movff	itoa@buf+1,fsr2h
 10925  003296  0E2D               	movlw	45
 10926  003298  6EDF               	movwf	indf2,c
 10927  00329A  4A26               	infsnz	itoa@buf,f,c
 10928  00329C  2A27               	incf	itoa@buf+1,f,c
 10929  00329E  6C28               	negf	itoa@val,c
 10930  0032A0  1E29               	comf	itoa@val+1,f,c
 10931  0032A2  B0D8               	btfsc	status,0,c
 10932  0032A4  2A29               	incf	itoa@val+1,f,c
 10933  0032A6                     l10225:
 10934  0032A6  C026  F01D         	movff	itoa@buf,utoa@buf
 10935  0032AA  C027  F01E         	movff	itoa@buf+1,utoa@buf+1
 10936  0032AE  C028  F01F         	movff	itoa@val,utoa@val
 10937  0032B2  C029  F020         	movff	itoa@val+1,utoa@val+1
 10938  0032B6  C02A  F021         	movff	itoa@base,utoa@base
 10939  0032BA  C02B  F022         	movff	itoa@base+1,utoa@base+1
 10940  0032BE  ECC0  F014         	call	_utoa	;wreg free
 10941  0032C2  0012               	return	
 10942  0032C4                     __end_of_itoa:
 10943                           	opt stack 0
 10944                           tosu	equ	0xFFF
 10945                           tosh	equ	0xFFE
 10946                           tosl	equ	0xFFD
 10947                           pclath	equ	0xFFA
 10948                           tblptru	equ	0xFF8
 10949                           tblptrh	equ	0xFF7
 10950                           tblptrl	equ	0xFF6
 10951                           tablat	equ	0xFF5
 10952                           prodh	equ	0xFF4
 10953                           prodl	equ	0xFF3
 10954                           intcon	equ	0xFF2
 10955                           intcon2	equ	0xFF1
 10956                           intcon3	equ	0xFF0
 10957                           postinc0	equ	0xFEE
 10958                           wreg	equ	0xFE8
 10959                           indf1	equ	0xFE7
 10960                           postinc1	equ	0xFE6
 10961                           postdec1	equ	0xFE5
 10962                           plusw1	equ	0xFE3
 10963                           fsr1h	equ	0xFE2
 10964                           fsr1l	equ	0xFE1
 10965                           indf2	equ	0xFDF
 10966                           postinc2	equ	0xFDE
 10967                           postdec2	equ	0xFDD
 10968                           plusw2	equ	0xFDB
 10969                           fsr2h	equ	0xFDA
 10970                           fsr2l	equ	0xFD9
 10971                           status	equ	0xFD8
 10972                           
 10973 ;; *************** function _utoa *****************
 10974 ;; Defined at:
 10975 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\itoa.c"
 10976 ;; Parameters:    Size  Location     Type
 10977 ;;  buf             2   28[COMRAM] PTR unsigned char 
 10978 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
 10979 ;;  val             2   30[COMRAM] unsigned int 
 10980 ;;  base            2   32[COMRAM] int 
 10981 ;; Auto vars:     Size  Location     Type
 10982 ;;  v               2   34[COMRAM] unsigned int 
 10983 ;;  c               1   36[COMRAM] unsigned char 
 10984 ;; Return value:  Size  Location     Type
 10985 ;;                  2   28[COMRAM] PTR unsigned char 
 10986 ;; Registers used:
 10987 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10988 ;; Tracked objects:
 10989 ;;		On entry : 0/0
 10990 ;;		On exit  : 0/0
 10991 ;;		Unchanged: 0/0
 10992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10993 ;;      Params:         6       0       0       0       0       0       0       0       0
 10994 ;;      Locals:         3       0       0       0       0       0       0       0       0
 10995 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10996 ;;      Totals:         9       0       0       0       0       0       0       0       0
 10997 ;;Total ram usage:        9 bytes
 10998 ;; Hardware stack levels used:    1
 10999 ;; Hardware stack levels required when called:    3
 11000 ;; This function calls:
 11001 ;;		___lwdiv
 11002 ;;		___lwmod
 11003 ;; This function is called by:
 11004 ;;		_itoa
 11005 ;; This function uses a non-reentrant model
 11006 ;;
 11007                           
 11008                           	psect	text49
 11009  002980                     __ptext49:
 11010                           	opt stack 0
 11011  002980                     _utoa:
 11012                           	opt stack 23
 11013                           
 11014                           ;incstack = 0
 11015  002980  C01F  F023         	movff	utoa@val,utoa@v
 11016  002984  C020  F024         	movff	utoa@val+1,utoa@v+1
 11017  002988                     l9923:
 11018  002988  C023  F016         	movff	utoa@v,___lwdiv@dividend
 11019  00298C  C024  F017         	movff	utoa@v+1,___lwdiv@dividend+1
 11020  002990  C021  F018         	movff	utoa@base,___lwdiv@divisor
 11021  002994  C022  F019         	movff	utoa@base+1,___lwdiv@divisor+1
 11022  002998  EC83  F018         	call	___lwdiv	;wreg free
 11023  00299C  C016  F023         	movff	?___lwdiv,utoa@v
 11024  0029A0  C017  F024         	movff	?___lwdiv+1,utoa@v+1
 11025  0029A4  4A1D               	infsnz	utoa@buf,f,c
 11026  0029A6  2A1E               	incf	utoa@buf+1,f,c
 11027  0029A8  5023               	movf	utoa@v,w,c
 11028  0029AA  1024               	iorwf	utoa@v+1,w,c
 11029  0029AC  A4D8               	btfss	status,2,c
 11030  0029AE  D7EC               	goto	l9923
 11031  0029B0  C01D  FFD9         	movff	utoa@buf,fsr2l
 11032  0029B4  C01E  FFDA         	movff	utoa@buf+1,fsr2h
 11033  0029B8  0E00               	movlw	0
 11034  0029BA  6EDF               	movwf	indf2,c
 11035  0029BC  061D               	decf	utoa@buf,f,c
 11036  0029BE  A0D8               	btfss	status,0,c
 11037  0029C0  061E               	decf	utoa@buf+1,f,c
 11038  0029C2                     l9933:
 11039  0029C2  C01F  F016         	movff	utoa@val,___lwmod@dividend
 11040  0029C6  C020  F017         	movff	utoa@val+1,___lwmod@dividend+1
 11041  0029CA  C021  F018         	movff	utoa@base,___lwmod@divisor
 11042  0029CE  C022  F019         	movff	utoa@base+1,___lwmod@divisor+1
 11043  0029D2  EC62  F019         	call	___lwmod	;wreg free
 11044  0029D6  5016               	movf	?___lwmod,w,c
 11045  0029D8  6E25               	movwf	utoa@c,c
 11046  0029DA  C01F  F016         	movff	utoa@val,___lwdiv@dividend
 11047  0029DE  C020  F017         	movff	utoa@val+1,___lwdiv@dividend+1
 11048  0029E2  C021  F018         	movff	utoa@base,___lwdiv@divisor
 11049  0029E6  C022  F019         	movff	utoa@base+1,___lwdiv@divisor+1
 11050  0029EA  EC83  F018         	call	___lwdiv	;wreg free
 11051  0029EE  C016  F01F         	movff	?___lwdiv,utoa@val
 11052  0029F2  C017  F020         	movff	?___lwdiv+1,utoa@val+1
 11053  0029F6  0E09               	movlw	9
 11054  0029F8  6425               	cpfsgt	utoa@c,c
 11055  0029FA  D002               	goto	l1807
 11056  0029FC  0E07               	movlw	7
 11057  0029FE  2625               	addwf	utoa@c,f,c
 11058  002A00                     l1807:
 11059  002A00  0E30               	movlw	48
 11060  002A02  2625               	addwf	utoa@c,f,c
 11061  002A04  C01D  FFD9         	movff	utoa@buf,fsr2l
 11062  002A08  C01E  FFDA         	movff	utoa@buf+1,fsr2h
 11063  002A0C  C025  FFDF         	movff	utoa@c,indf2
 11064  002A10  061D               	decf	utoa@buf,f,c
 11065  002A12  A0D8               	btfss	status,0,c
 11066  002A14  061E               	decf	utoa@buf+1,f,c
 11067  002A16  501F               	movf	utoa@val,w,c
 11068  002A18  1020               	iorwf	utoa@val+1,w,c
 11069  002A1A  A4D8               	btfss	status,2,c
 11070  002A1C  D7D2               	goto	l9933
 11071                           
 11072                           ;	Return value of _utoa is never used
 11073  002A1E  4A1D               	infsnz	utoa@buf,f,c
 11074  002A20  2A1E               	incf	utoa@buf+1,f,c
 11075  002A22  0012               	return	
 11076  002A24                     __end_of_utoa:
 11077                           	opt stack 0
 11078                           tosu	equ	0xFFF
 11079                           tosh	equ	0xFFE
 11080                           tosl	equ	0xFFD
 11081                           pclath	equ	0xFFA
 11082                           tblptru	equ	0xFF8
 11083                           tblptrh	equ	0xFF7
 11084                           tblptrl	equ	0xFF6
 11085                           tablat	equ	0xFF5
 11086                           prodh	equ	0xFF4
 11087                           prodl	equ	0xFF3
 11088                           intcon	equ	0xFF2
 11089                           intcon2	equ	0xFF1
 11090                           intcon3	equ	0xFF0
 11091                           postinc0	equ	0xFEE
 11092                           wreg	equ	0xFE8
 11093                           indf1	equ	0xFE7
 11094                           postinc1	equ	0xFE6
 11095                           postdec1	equ	0xFE5
 11096                           plusw1	equ	0xFE3
 11097                           fsr1h	equ	0xFE2
 11098                           fsr1l	equ	0xFE1
 11099                           indf2	equ	0xFDF
 11100                           postinc2	equ	0xFDE
 11101                           postdec2	equ	0xFDD
 11102                           plusw2	equ	0xFDB
 11103                           fsr2h	equ	0xFDA
 11104                           fsr2l	equ	0xFD9
 11105                           status	equ	0xFD8
 11106                           
 11107 ;; *************** function ___lwmod *****************
 11108 ;; Defined at:
 11109 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
 11110 ;; Parameters:    Size  Location     Type
 11111 ;;  dividend        2   21[COMRAM] unsigned int 
 11112 ;;  divisor         2   23[COMRAM] unsigned int 
 11113 ;; Auto vars:     Size  Location     Type
 11114 ;;  counter         1   25[COMRAM] unsigned char 
 11115 ;; Return value:  Size  Location     Type
 11116 ;;                  2   21[COMRAM] unsigned int 
 11117 ;; Registers used:
 11118 ;;		wreg, status,2, status,0
 11119 ;; Tracked objects:
 11120 ;;		On entry : 0/0
 11121 ;;		On exit  : 0/0
 11122 ;;		Unchanged: 0/0
 11123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11124 ;;      Params:         4       0       0       0       0       0       0       0       0
 11125 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11126 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11127 ;;      Totals:         5       0       0       0       0       0       0       0       0
 11128 ;;Total ram usage:        5 bytes
 11129 ;; Hardware stack levels used:    1
 11130 ;; Hardware stack levels required when called:    2
 11131 ;; This function calls:
 11132 ;;		Nothing
 11133 ;; This function is called by:
 11134 ;;		_utoa
 11135 ;;		_converte_inteiro_matriz
 11136 ;; This function uses a non-reentrant model
 11137 ;;
 11138                           
 11139                           	psect	text50
 11140  0032C4                     __ptext50:
 11141                           	opt stack 0
 11142  0032C4                     ___lwmod:
 11143                           	opt stack 23
 11144                           
 11145                           ;incstack = 0
 11146  0032C4  5018               	movf	___lwmod@divisor,w,c
 11147  0032C6  1019               	iorwf	___lwmod@divisor+1,w,c
 11148  0032C8  B4D8               	btfsc	status,2,c
 11149  0032CA  D018               	goto	l1896
 11150  0032CC  0E01               	movlw	1
 11151  0032CE  6E1A               	movwf	___lwmod@counter,c
 11152  0032D0  D004               	goto	l9521
 11153  0032D2                     l9519:
 11154  0032D2  90D8               	bcf	status,0,c
 11155  0032D4  3618               	rlcf	___lwmod@divisor,f,c
 11156  0032D6  3619               	rlcf	___lwmod@divisor+1,f,c
 11157  0032D8  2A1A               	incf	___lwmod@counter,f,c
 11158  0032DA                     l9521:
 11159  0032DA  AE19               	btfss	___lwmod@divisor+1,7,c
 11160  0032DC  D7FA               	goto	l9519
 11161  0032DE                     l9523:
 11162  0032DE  5018               	movf	___lwmod@divisor,w,c
 11163  0032E0  5C16               	subwf	___lwmod@dividend,w,c
 11164  0032E2  5019               	movf	___lwmod@divisor+1,w,c
 11165  0032E4  5817               	subwfb	___lwmod@dividend+1,w,c
 11166  0032E6  A0D8               	btfss	status,0,c
 11167  0032E8  D004               	goto	l9527
 11168  0032EA  5018               	movf	___lwmod@divisor,w,c
 11169  0032EC  5E16               	subwf	___lwmod@dividend,f,c
 11170  0032EE  5019               	movf	___lwmod@divisor+1,w,c
 11171  0032F0  5A17               	subwfb	___lwmod@dividend+1,f,c
 11172  0032F2                     l9527:
 11173  0032F2  90D8               	bcf	status,0,c
 11174  0032F4  3219               	rrcf	___lwmod@divisor+1,f,c
 11175  0032F6  3218               	rrcf	___lwmod@divisor,f,c
 11176  0032F8  2E1A               	decfsz	___lwmod@counter,f,c
 11177  0032FA  D7F1               	goto	l9523
 11178  0032FC                     l1896:
 11179  0032FC  C016  F016         	movff	___lwmod@dividend,?___lwmod
 11180  003300  C017  F017         	movff	___lwmod@dividend+1,?___lwmod+1
 11181  003304  0012               	return		;funcret
 11182  003306                     __end_of___lwmod:
 11183                           	opt stack 0
 11184                           tosu	equ	0xFFF
 11185                           tosh	equ	0xFFE
 11186                           tosl	equ	0xFFD
 11187                           pclath	equ	0xFFA
 11188                           tblptru	equ	0xFF8
 11189                           tblptrh	equ	0xFF7
 11190                           tblptrl	equ	0xFF6
 11191                           tablat	equ	0xFF5
 11192                           prodh	equ	0xFF4
 11193                           prodl	equ	0xFF3
 11194                           intcon	equ	0xFF2
 11195                           intcon2	equ	0xFF1
 11196                           intcon3	equ	0xFF0
 11197                           postinc0	equ	0xFEE
 11198                           wreg	equ	0xFE8
 11199                           indf1	equ	0xFE7
 11200                           postinc1	equ	0xFE6
 11201                           postdec1	equ	0xFE5
 11202                           plusw1	equ	0xFE3
 11203                           fsr1h	equ	0xFE2
 11204                           fsr1l	equ	0xFE1
 11205                           indf2	equ	0xFDF
 11206                           postinc2	equ	0xFDE
 11207                           postdec2	equ	0xFDD
 11208                           plusw2	equ	0xFDB
 11209                           fsr2h	equ	0xFDA
 11210                           fsr2l	equ	0xFD9
 11211                           status	equ	0xFD8
 11212                           
 11213 ;; *************** function ___lwdiv *****************
 11214 ;; Defined at:
 11215 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
 11216 ;; Parameters:    Size  Location     Type
 11217 ;;  dividend        2   21[COMRAM] unsigned int 
 11218 ;;  divisor         2   23[COMRAM] unsigned int 
 11219 ;; Auto vars:     Size  Location     Type
 11220 ;;  quotient        2   26[COMRAM] unsigned int 
 11221 ;;  counter         1   25[COMRAM] unsigned char 
 11222 ;; Return value:  Size  Location     Type
 11223 ;;                  2   21[COMRAM] unsigned int 
 11224 ;; Registers used:
 11225 ;;		wreg, status,2, status,0
 11226 ;; Tracked objects:
 11227 ;;		On entry : 0/0
 11228 ;;		On exit  : 0/0
 11229 ;;		Unchanged: 0/0
 11230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11231 ;;      Params:         4       0       0       0       0       0       0       0       0
 11232 ;;      Locals:         3       0       0       0       0       0       0       0       0
 11233 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11234 ;;      Totals:         7       0       0       0       0       0       0       0       0
 11235 ;;Total ram usage:        7 bytes
 11236 ;; Hardware stack levels used:    1
 11237 ;; Hardware stack levels required when called:    2
 11238 ;; This function calls:
 11239 ;;		Nothing
 11240 ;; This function is called by:
 11241 ;;		_utoa
 11242 ;;		_converte_inteiro_matriz
 11243 ;; This function uses a non-reentrant model
 11244 ;;
 11245                           
 11246                           	psect	text51
 11247  003106                     __ptext51:
 11248                           	opt stack 0
 11249  003106                     ___lwdiv:
 11250                           	opt stack 23
 11251                           
 11252                           ;incstack = 0
 11253  003106  0E00               	movlw	0
 11254  003108  6E1C               	movwf	___lwdiv@quotient+1,c
 11255  00310A  0E00               	movlw	0
 11256  00310C  6E1B               	movwf	___lwdiv@quotient,c
 11257  00310E  5018               	movf	___lwdiv@divisor,w,c
 11258  003110  1019               	iorwf	___lwdiv@divisor+1,w,c
 11259  003112  B4D8               	btfsc	status,2,c
 11260  003114  D01C               	goto	l1886
 11261  003116  0E01               	movlw	1
 11262  003118  6E1A               	movwf	___lwdiv@counter,c
 11263  00311A  D004               	goto	l9501
 11264  00311C                     l9499:
 11265  00311C  90D8               	bcf	status,0,c
 11266  00311E  3618               	rlcf	___lwdiv@divisor,f,c
 11267  003120  3619               	rlcf	___lwdiv@divisor+1,f,c
 11268  003122  2A1A               	incf	___lwdiv@counter,f,c
 11269  003124                     l9501:
 11270  003124  AE19               	btfss	___lwdiv@divisor+1,7,c
 11271  003126  D7FA               	goto	l9499
 11272  003128                     l9503:
 11273  003128  90D8               	bcf	status,0,c
 11274  00312A  361B               	rlcf	___lwdiv@quotient,f,c
 11275  00312C  361C               	rlcf	___lwdiv@quotient+1,f,c
 11276  00312E  5018               	movf	___lwdiv@divisor,w,c
 11277  003130  5C16               	subwf	___lwdiv@dividend,w,c
 11278  003132  5019               	movf	___lwdiv@divisor+1,w,c
 11279  003134  5817               	subwfb	___lwdiv@dividend+1,w,c
 11280  003136  A0D8               	btfss	status,0,c
 11281  003138  D005               	goto	l9511
 11282  00313A  5018               	movf	___lwdiv@divisor,w,c
 11283  00313C  5E16               	subwf	___lwdiv@dividend,f,c
 11284  00313E  5019               	movf	___lwdiv@divisor+1,w,c
 11285  003140  5A17               	subwfb	___lwdiv@dividend+1,f,c
 11286  003142  801B               	bsf	___lwdiv@quotient,0,c
 11287  003144                     l9511:
 11288  003144  90D8               	bcf	status,0,c
 11289  003146  3219               	rrcf	___lwdiv@divisor+1,f,c
 11290  003148  3218               	rrcf	___lwdiv@divisor,f,c
 11291  00314A  2E1A               	decfsz	___lwdiv@counter,f,c
 11292  00314C  D7ED               	goto	l9503
 11293  00314E                     l1886:
 11294  00314E  C01B  F016         	movff	___lwdiv@quotient,?___lwdiv
 11295  003152  C01C  F017         	movff	___lwdiv@quotient+1,?___lwdiv+1
 11296  003156  0012               	return		;funcret
 11297  003158                     __end_of___lwdiv:
 11298                           	opt stack 0
 11299                           tosu	equ	0xFFF
 11300                           tosh	equ	0xFFE
 11301                           tosl	equ	0xFFD
 11302                           pclath	equ	0xFFA
 11303                           tblptru	equ	0xFF8
 11304                           tblptrh	equ	0xFF7
 11305                           tblptrl	equ	0xFF6
 11306                           tablat	equ	0xFF5
 11307                           prodh	equ	0xFF4
 11308                           prodl	equ	0xFF3
 11309                           intcon	equ	0xFF2
 11310                           intcon2	equ	0xFF1
 11311                           intcon3	equ	0xFF0
 11312                           postinc0	equ	0xFEE
 11313                           wreg	equ	0xFE8
 11314                           indf1	equ	0xFE7
 11315                           postinc1	equ	0xFE6
 11316                           postdec1	equ	0xFE5
 11317                           plusw1	equ	0xFE3
 11318                           fsr1h	equ	0xFE2
 11319                           fsr1l	equ	0xFE1
 11320                           indf2	equ	0xFDF
 11321                           postinc2	equ	0xFDE
 11322                           postdec2	equ	0xFDD
 11323                           plusw2	equ	0xFDB
 11324                           fsr2h	equ	0xFDA
 11325                           fsr2l	equ	0xFD9
 11326                           status	equ	0xFD8
 11327                           
 11328 ;; *************** function _escreve_frase_ram_lcd *****************
 11329 ;; Defined at:
 11330 ;;		line 445 in file "bibliotecas/display_lcd.c"
 11331 ;; Parameters:    Size  Location     Type
 11332 ;;  buffer          2   24[COMRAM] PTR unsigned char 
 11333 ;;		 -> escreve_inteiro_lcd@texto(7), STR_24(3), STR_23(8), STR_22(14), 
 11334 ;;		 -> STR_21(13), STR_20(9), STR_19(14), leitura_chave@pos_ignicao_on(17), 
 11335 ;;		 -> leitura_chave@pos_ignicao_crank(17), leitura_chave@pos_ignicao_off(17), STR_18(17), STR_17(16), 
 11336 ;;		 -> STR_16(14), STR_15(14), STR_14(14), STR_13(14), 
 11337 ;;		 -> STR_12(13), STR_11(17), STR_8(17), STR_7(15), 
 11338 ;;		 -> STR_6(14), RAM(2047), GPS@GPS_Buffer(15), STR_2(6), 
 11339 ;;		 -> STR_1(5), mensagem_inicial@msg_dois(17), mensagem_inicial@msg_linha_um(17), 
 11340 ;; Auto vars:     Size  Location     Type
 11341 ;;		None
 11342 ;; Return value:  Size  Location     Type
 11343 ;;                  1    wreg      void 
 11344 ;; Registers used:
 11345 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11346 ;; Tracked objects:
 11347 ;;		On entry : 0/0
 11348 ;;		On exit  : 0/0
 11349 ;;		Unchanged: 0/0
 11350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11351 ;;      Params:         2       0       0       0       0       0       0       0       0
 11352 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11353 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11354 ;;      Totals:         2       0       0       0       0       0       0       0       0
 11355 ;;Total ram usage:        2 bytes
 11356 ;; Hardware stack levels used:    1
 11357 ;; Hardware stack levels required when called:    4
 11358 ;; This function calls:
 11359 ;;		_escreve_caractere_lcd
 11360 ;; This function is called by:
 11361 ;;		_mensagem_inicial
 11362 ;;		_GPS
 11363 ;;		_get_date
 11364 ;;		_escreve_inteiro_lcd
 11365 ;;		_SDCard
 11366 ;;		_inicializa_SPI
 11367 ;;		_leitura_chave
 11368 ;;		_disk_initialize
 11369 ;;		_disk_readp
 11370 ;; This function uses a non-reentrant model
 11371 ;;
 11372                           
 11373                           	psect	text52
 11374  003158                     __ptext52:
 11375                           	opt stack 0
 11376  003158                     _escreve_frase_ram_lcd:
 11377                           	opt stack 25
 11378                           
 11379                           ;display_lcd.c: 447: while(*buffer)
 11380                           
 11381                           ;incstack = 0
 11382  003158  D014               	goto	l9987
 11383  00315A                     l9983:
 11384                           
 11385                           ;display_lcd.c: 448: {
 11386                           ;display_lcd.c: 449: escreve_caractere_lcd(*buffer);
 11387  00315A  C019  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 11388  00315E  C01A  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 11389  003162  6AF8               	clrf	tblptru,c
 11390  003164  0E07               	movlw	(high __ramtop+-1)
 11391  003166  64F7               	cpfsgt	tblptrh,c
 11392  003168  D003               	bra	u11837
 11393  00316A  0008               	tblrd		*
 11394  00316C  50F5               	movf	tablat,w,c
 11395  00316E  D005               	bra	u11830
 11396  003170                     u11837:
 11397  003170  CFF6 FFE9          	movff	tblptrl,fsr0l
 11398  003174  CFF7 FFEA          	movff	tblptrh,fsr0h
 11399  003178  50EF               	movf	indf0,w,c
 11400  00317A                     u11830:
 11401  00317A  ECE7  F016         	call	_escreve_caractere_lcd
 11402                           
 11403                           ;display_lcd.c: 450: buffer++;
 11404  00317E  4A19               	infsnz	escreve_frase_ram_lcd@buffer,f,c
 11405  003180  2A1A               	incf	escreve_frase_ram_lcd@buffer+1,f,c
 11406  003182                     l9987:
 11407  003182  C019  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 11408  003186  C01A  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 11409  00318A  6AF8               	clrf	tblptru,c
 11410  00318C  0E07               	movlw	(high __ramtop+-1)
 11411  00318E  64F7               	cpfsgt	tblptrh,c
 11412  003190  D003               	bra	u11847
 11413  003192  0008               	tblrd		*
 11414  003194  50F5               	movf	tablat,w,c
 11415  003196  D005               	bra	u11840
 11416  003198                     u11847:
 11417  003198  CFF6 FFE9          	movff	tblptrl,fsr0l
 11418  00319C  CFF7 FFEA          	movff	tblptrh,fsr0h
 11419  0031A0  50EF               	movf	indf0,w,c
 11420  0031A2                     u11840:
 11421  0031A2  0900               	iorlw	0
 11422  0031A4  B4D8               	btfsc	status,2,c
 11423  0031A6  0012               	return	
 11424  0031A8  D7D8               	goto	l9983
 11425  0031AA                     __end_of_escreve_frase_ram_lcd:
 11426                           	opt stack 0
 11427                           tosu	equ	0xFFF
 11428                           tosh	equ	0xFFE
 11429                           tosl	equ	0xFFD
 11430                           pclath	equ	0xFFA
 11431                           tblptru	equ	0xFF8
 11432                           tblptrh	equ	0xFF7
 11433                           tblptrl	equ	0xFF6
 11434                           tablat	equ	0xFF5
 11435                           prodh	equ	0xFF4
 11436                           prodl	equ	0xFF3
 11437                           intcon	equ	0xFF2
 11438                           intcon2	equ	0xFF1
 11439                           intcon3	equ	0xFF0
 11440                           indf0	equ	0xFEF
 11441                           postinc0	equ	0xFEE
 11442                           fsr0h	equ	0xFEA
 11443                           fsr0l	equ	0xFE9
 11444                           wreg	equ	0xFE8
 11445                           indf1	equ	0xFE7
 11446                           postinc1	equ	0xFE6
 11447                           postdec1	equ	0xFE5
 11448                           plusw1	equ	0xFE3
 11449                           fsr1h	equ	0xFE2
 11450                           fsr1l	equ	0xFE1
 11451                           indf2	equ	0xFDF
 11452                           postinc2	equ	0xFDE
 11453                           postdec2	equ	0xFDD
 11454                           plusw2	equ	0xFDB
 11455                           fsr2h	equ	0xFDA
 11456                           fsr2l	equ	0xFD9
 11457                           status	equ	0xFD8
 11458                           
 11459 ;; *************** function _escreve_caractere_lcd *****************
 11460 ;; Defined at:
 11461 ;;		line 323 in file "bibliotecas/display_lcd.c"
 11462 ;; Parameters:    Size  Location     Type
 11463 ;;  data            1    wreg     unsigned char 
 11464 ;; Auto vars:     Size  Location     Type
 11465 ;;  data            1   23[COMRAM] unsigned char 
 11466 ;; Return value:  Size  Location     Type
 11467 ;;                  1    wreg      void 
 11468 ;; Registers used:
 11469 ;;		wreg, status,2, status,0, cstack
 11470 ;; Tracked objects:
 11471 ;;		On entry : 0/0
 11472 ;;		On exit  : 0/0
 11473 ;;		Unchanged: 0/0
 11474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11475 ;;      Params:         0       0       0       0       0       0       0       0       0
 11476 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11477 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11478 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11479 ;;Total ram usage:        1 bytes
 11480 ;; Hardware stack levels used:    1
 11481 ;; Hardware stack levels required when called:    3
 11482 ;; This function calls:
 11483 ;;		_delay
 11484 ;; This function is called by:
 11485 ;;		_escreve_frase_ram_lcd
 11486 ;;		_escreve_float_lcd
 11487 ;;		_escreve_frase_lcd
 11488 ;;		_cria_caractere_lcd
 11489 ;; This function uses a non-reentrant model
 11490 ;;
 11491                           
 11492                           	psect	text53
 11493  002DCE                     __ptext53:
 11494                           	opt stack 0
 11495  002DCE                     _escreve_caractere_lcd:
 11496                           	opt stack 25
 11497                           
 11498                           ;incstack = 0
 11499                           ;escreve_caractere_lcd@data stored from wreg
 11500  002DCE  6E18               	movwf	escreve_caractere_lcd@data,c
 11501                           
 11502                           ;display_lcd.c: 326: PORTDbits.RD2 = 0;
 11503  002DD0  9483               	bcf	3971,2,c	;volatile
 11504                           
 11505                           ;display_lcd.c: 327: PORTDbits.RD1 = 1;
 11506  002DD2  8283               	bsf	3971,1,c	;volatile
 11507                           
 11508                           ;display_lcd.c: 328: PORTDbits.RD0 = 0;
 11509  002DD4  9083               	bcf	3971,0,c	;volatile
 11510                           
 11511                           ;display_lcd.c: 331: if(data&0b00010000){PORTDbits.RD4=1;}
 11512  002DD6  A818               	btfss	escreve_caractere_lcd@data,4,c
 11513  002DD8  D002               	goto	l703
 11514  002DDA  8883               	bsf	3971,4,c	;volatile
 11515  002DDC  D001               	goto	l9569
 11516  002DDE                     l703:
 11517                           
 11518                           ;display_lcd.c: 332: else {PORTDbits.RD4=0;}
 11519  002DDE  9883               	bcf	3971,4,c	;volatile
 11520  002DE0                     l9569:
 11521                           
 11522                           ;display_lcd.c: 333: if(data&0b00100000){PORTDbits.RD5=1;}
 11523  002DE0  AA18               	btfss	escreve_caractere_lcd@data,5,c
 11524  002DE2  D002               	goto	l705
 11525  002DE4  8A83               	bsf	3971,5,c	;volatile
 11526  002DE6  D001               	goto	l9573
 11527  002DE8                     l705:
 11528                           
 11529                           ;display_lcd.c: 334: else {PORTDbits.RD5=0;}
 11530  002DE8  9A83               	bcf	3971,5,c	;volatile
 11531  002DEA                     l9573:
 11532                           
 11533                           ;display_lcd.c: 335: if(data&0b01000000){PORTDbits.RD6=1;}
 11534  002DEA  AC18               	btfss	escreve_caractere_lcd@data,6,c
 11535  002DEC  D002               	goto	l707
 11536  002DEE  8C83               	bsf	3971,6,c	;volatile
 11537  002DF0  D001               	goto	l9577
 11538  002DF2                     l707:
 11539                           
 11540                           ;display_lcd.c: 336: else {PORTDbits.RD6=0;}
 11541  002DF2  9C83               	bcf	3971,6,c	;volatile
 11542  002DF4                     l9577:
 11543                           
 11544                           ;display_lcd.c: 337: if(data&0b10000000){PORTDbits.RD7=1;}
 11545  002DF4  AE18               	btfss	escreve_caractere_lcd@data,7,c
 11546  002DF6  D002               	goto	l709
 11547  002DF8  8E83               	bsf	3971,7,c	;volatile
 11548  002DFA  D001               	goto	l710
 11549  002DFC                     l709:
 11550                           
 11551                           ;display_lcd.c: 338: else {PORTDbits.RD7=0;}
 11552  002DFC  9E83               	bcf	3971,7,c	;volatile
 11553  002DFE                     l710:
 11554                           
 11555                           ;display_lcd.c: 341: PORTDbits.RD0 = 1;
 11556  002DFE  8083               	bsf	3971,0,c	;volatile
 11557                           
 11558                           ;display_lcd.c: 342: delay();
 11559  002E00  EC51  F01A         	call	_delay	;wreg free
 11560                           
 11561                           ;display_lcd.c: 343: PORTDbits.RD0 = 0;
 11562  002E04  9083               	bcf	3971,0,c	;volatile
 11563                           
 11564                           ;display_lcd.c: 344: delay();
 11565  002E06  EC51  F01A         	call	_delay	;wreg free
 11566                           
 11567                           ;display_lcd.c: 348: if(data&0b00000001){PORTDbits.RD4=1;}
 11568  002E0A  A018               	btfss	escreve_caractere_lcd@data,0,c
 11569  002E0C  D002               	goto	l711
 11570  002E0E  8883               	bsf	3971,4,c	;volatile
 11571  002E10  D001               	goto	l712
 11572  002E12                     l711:
 11573                           
 11574                           ;display_lcd.c: 349: else {PORTDbits.RD4=0;}
 11575  002E12  9883               	bcf	3971,4,c	;volatile
 11576  002E14                     l712:
 11577                           
 11578                           ;display_lcd.c: 350: if(data&0b00000010){PORTDbits.RD5=1;}
 11579  002E14  A218               	btfss	escreve_caractere_lcd@data,1,c
 11580  002E16  D002               	goto	l713
 11581  002E18  8A83               	bsf	3971,5,c	;volatile
 11582  002E1A  D001               	goto	l714
 11583  002E1C                     l713:
 11584                           
 11585                           ;display_lcd.c: 351: else {PORTDbits.RD5=0;}
 11586  002E1C  9A83               	bcf	3971,5,c	;volatile
 11587  002E1E                     l714:
 11588                           
 11589                           ;display_lcd.c: 352: if(data&0b00000100){PORTDbits.RD6=1;}
 11590  002E1E  A418               	btfss	escreve_caractere_lcd@data,2,c
 11591  002E20  D002               	goto	l715
 11592  002E22  8C83               	bsf	3971,6,c	;volatile
 11593  002E24  D001               	goto	l716
 11594  002E26                     l715:
 11595                           
 11596                           ;display_lcd.c: 353: else {PORTDbits.RD6=0;}
 11597  002E26  9C83               	bcf	3971,6,c	;volatile
 11598  002E28                     l716:
 11599                           
 11600                           ;display_lcd.c: 354: if(data&0b00001000){PORTDbits.RD7=1;}
 11601  002E28  A618               	btfss	escreve_caractere_lcd@data,3,c
 11602  002E2A  D002               	goto	l717
 11603  002E2C  8E83               	bsf	3971,7,c	;volatile
 11604  002E2E  D001               	goto	l718
 11605  002E30                     l717:
 11606                           
 11607                           ;display_lcd.c: 355: else {PORTDbits.RD7=0;}
 11608  002E30  9E83               	bcf	3971,7,c	;volatile
 11609  002E32                     l718:
 11610                           
 11611                           ;display_lcd.c: 358: PORTDbits.RD0 = 1;
 11612  002E32  8083               	bsf	3971,0,c	;volatile
 11613                           
 11614                           ;display_lcd.c: 359: delay();
 11615  002E34  EC51  F01A         	call	_delay	;wreg free
 11616                           
 11617                           ;display_lcd.c: 360: PORTDbits.RD0 = 0;
 11618  002E38  9083               	bcf	3971,0,c	;volatile
 11619                           
 11620                           ;display_lcd.c: 361: delay();
 11621  002E3A  EC51  F01A         	call	_delay	;wreg free
 11622  002E3E  0012               	return		;funcret
 11623  002E40                     __end_of_escreve_caractere_lcd:
 11624                           	opt stack 0
 11625                           tosu	equ	0xFFF
 11626                           tosh	equ	0xFFE
 11627                           tosl	equ	0xFFD
 11628                           pclath	equ	0xFFA
 11629                           tblptru	equ	0xFF8
 11630                           tblptrh	equ	0xFF7
 11631                           tblptrl	equ	0xFF6
 11632                           tablat	equ	0xFF5
 11633                           prodh	equ	0xFF4
 11634                           prodl	equ	0xFF3
 11635                           intcon	equ	0xFF2
 11636                           intcon2	equ	0xFF1
 11637                           intcon3	equ	0xFF0
 11638                           indf0	equ	0xFEF
 11639                           postinc0	equ	0xFEE
 11640                           fsr0h	equ	0xFEA
 11641                           fsr0l	equ	0xFE9
 11642                           wreg	equ	0xFE8
 11643                           indf1	equ	0xFE7
 11644                           postinc1	equ	0xFE6
 11645                           postdec1	equ	0xFE5
 11646                           plusw1	equ	0xFE3
 11647                           fsr1h	equ	0xFE2
 11648                           fsr1l	equ	0xFE1
 11649                           indf2	equ	0xFDF
 11650                           postinc2	equ	0xFDE
 11651                           postdec2	equ	0xFDD
 11652                           plusw2	equ	0xFDB
 11653                           fsr2h	equ	0xFDA
 11654                           fsr2l	equ	0xFD9
 11655                           status	equ	0xFD8
 11656                           
 11657 ;; *************** function _delay *****************
 11658 ;; Defined at:
 11659 ;;		line 45 in file "bibliotecas/display_lcd.c"
 11660 ;; Parameters:    Size  Location     Type
 11661 ;;		None
 11662 ;; Auto vars:     Size  Location     Type
 11663 ;;  contador_int    1   22[COMRAM] unsigned char 
 11664 ;;  contador_ext    1   21[COMRAM] unsigned char 
 11665 ;; Return value:  Size  Location     Type
 11666 ;;                  1    wreg      void 
 11667 ;; Registers used:
 11668 ;;		wreg, status,2, status,0
 11669 ;; Tracked objects:
 11670 ;;		On entry : 0/0
 11671 ;;		On exit  : 0/0
 11672 ;;		Unchanged: 0/0
 11673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11674 ;;      Params:         0       0       0       0       0       0       0       0       0
 11675 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11676 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11677 ;;      Totals:         2       0       0       0       0       0       0       0       0
 11678 ;;Total ram usage:        2 bytes
 11679 ;; Hardware stack levels used:    1
 11680 ;; Hardware stack levels required when called:    2
 11681 ;; This function calls:
 11682 ;;		Nothing
 11683 ;; This function is called by:
 11684 ;;		_init_lcd
 11685 ;;		_escreve_cmd_lcd
 11686 ;;		_endereco_cursor_lcd
 11687 ;;		_escreve_caractere_lcd
 11688 ;; This function uses a non-reentrant model
 11689 ;;
 11690                           
 11691                           	psect	text54
 11692  0034A2                     __ptext54:
 11693                           	opt stack 0
 11694  0034A2                     _delay:
 11695                           	opt stack 25
 11696                           
 11697                           ;display_lcd.c: 47: unsigned char contador_ext, contador_int;
 11698                           ;display_lcd.c: 49: for(contador_ext = 0; contador_ext<100; contador_ext++)
 11699                           
 11700                           ;incstack = 0
 11701  0034A2  0E00               	movlw	0
 11702  0034A4  6E16               	movwf	delay@contador_ext,c
 11703  0034A6                     l9307:
 11704  0034A6  0E63               	movlw	99
 11705  0034A8  6416               	cpfsgt	delay@contador_ext,c
 11706  0034AA  D001               	goto	l642
 11707  0034AC  0012               	return	
 11708  0034AE                     l642:
 11709                           
 11710                           ;display_lcd.c: 50: {
 11711                           ;display_lcd.c: 51: __nop();
 11712  0034AE  F000               	nop	
 11713                           
 11714                           ;display_lcd.c: 52: for(contador_int = 0; contador_int<50; contador_int++)
 11715  0034B0  0E00               	movlw	0
 11716  0034B2  6E17               	movwf	delay@contador_int,c
 11717  0034B4                     l9313:
 11718  0034B4  0E31               	movlw	49
 11719  0034B6  6417               	cpfsgt	delay@contador_int,c
 11720  0034B8  D001               	goto	l644
 11721  0034BA  D003               	goto	l9321
 11722  0034BC                     l644:
 11723                           
 11724                           ;display_lcd.c: 53: {
 11725                           ;display_lcd.c: 54: __nop();
 11726  0034BC  F000               	nop	
 11727  0034BE  2A17               	incf	delay@contador_int,f,c
 11728  0034C0  D7F9               	goto	l9313
 11729  0034C2                     l9321:
 11730  0034C2  2A16               	incf	delay@contador_ext,f,c
 11731  0034C4  D7F0               	goto	l9307
 11732  0034C6                     __end_of_delay:
 11733                           	opt stack 0
 11734                           tosu	equ	0xFFF
 11735                           tosh	equ	0xFFE
 11736                           tosl	equ	0xFFD
 11737                           pclath	equ	0xFFA
 11738                           tblptru	equ	0xFF8
 11739                           tblptrh	equ	0xFF7
 11740                           tblptrl	equ	0xFF6
 11741                           tablat	equ	0xFF5
 11742                           prodh	equ	0xFF4
 11743                           prodl	equ	0xFF3
 11744                           intcon	equ	0xFF2
 11745                           intcon2	equ	0xFF1
 11746                           intcon3	equ	0xFF0
 11747                           indf0	equ	0xFEF
 11748                           postinc0	equ	0xFEE
 11749                           fsr0h	equ	0xFEA
 11750                           fsr0l	equ	0xFE9
 11751                           wreg	equ	0xFE8
 11752                           indf1	equ	0xFE7
 11753                           postinc1	equ	0xFE6
 11754                           postdec1	equ	0xFE5
 11755                           plusw1	equ	0xFE3
 11756                           fsr1h	equ	0xFE2
 11757                           fsr1l	equ	0xFE1
 11758                           indf2	equ	0xFDF
 11759                           postinc2	equ	0xFDE
 11760                           postdec2	equ	0xFDD
 11761                           plusw2	equ	0xFDB
 11762                           fsr2h	equ	0xFDA
 11763                           fsr2l	equ	0xFD9
 11764                           status	equ	0xFD8
 11765                           
 11766 ;; *************** function _convert_to_degrees *****************
 11767 ;; Defined at:
 11768 ;;		line 231 in file "bibliotecas/GPS.c"
 11769 ;; Parameters:    Size  Location     Type
 11770 ;;  NMEA_lat_lon    3   28[BANK0 ] float 
 11771 ;; Auto vars:     Size  Location     Type
 11772 ;;  decimal         3   39[BANK0 ] float 
 11773 ;;  dec_deg         3   34[BANK0 ] float 
 11774 ;;  minutes         3   31[BANK0 ] float 
 11775 ;;  position        3    0        float 
 11776 ;;  degrees         2   37[BANK0 ] int 
 11777 ;; Return value:  Size  Location     Type
 11778 ;;                  3   28[BANK0 ] float 
 11779 ;; Registers used:
 11780 ;;		wreg, status,2, status,0, cstack
 11781 ;; Tracked objects:
 11782 ;;		On entry : 0/0
 11783 ;;		On exit  : 0/0
 11784 ;;		Unchanged: 0/0
 11785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11786 ;;      Params:         0       3       0       0       0       0       0       0       0
 11787 ;;      Locals:         0      11       0       0       0       0       0       0       0
 11788 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11789 ;;      Totals:         0      14       0       0       0       0       0       0       0
 11790 ;;Total ram usage:       14 bytes
 11791 ;; Hardware stack levels used:    1
 11792 ;; Hardware stack levels required when called:    4
 11793 ;; This function calls:
 11794 ;;		___awtoft
 11795 ;;		___ftadd
 11796 ;;		___ftdiv
 11797 ;;		___ftmul
 11798 ;;		___ftneg
 11799 ;;		___fttol
 11800 ;; This function is called by:
 11801 ;;		_GPS
 11802 ;; This function uses a non-reentrant model
 11803 ;;
 11804                           
 11805                           	psect	text55
 11806  001940                     __ptext55:
 11807                           	opt stack 0
 11808  001940                     _convert_to_degrees:
 11809                           	opt stack 24
 11810                           
 11811                           ;GPS.c: 234: float minutes, dec_deg, decimal;
 11812                           ;GPS.c: 236: int degrees;
 11813                           ;GPS.c: 238: float position;
 11814                           ;GPS.c: 240: degrees = (int)(NMEA_lat_long/100.00);
 11815                           
 11816                           ;incstack = 0
 11817  001940  0E00               	movlw	0
 11818  001942  6E21               	movwf	___ftdiv@f2,c
 11819  001944  0EC8               	movlw	200
 11820  001946  6E22               	movwf	___ftdiv@f2+1,c
 11821  001948  0E42               	movlw	66
 11822  00194A  6E23               	movwf	___ftdiv@f2+2,c
 11823  00194C  C07C  F01E         	movff	convert_to_degrees@NMEA_lat_long,___ftdiv@f1
 11824  001950  C07D  F01F         	movff	convert_to_degrees@NMEA_lat_long+1,___ftdiv@f1+1
 11825  001954  C07E  F020         	movff	convert_to_degrees@NMEA_lat_long+2,___ftdiv@f1+2
 11826  001958  EC40  F012         	call	___ftdiv	;wreg free
 11827  00195C  C01E  F06D         	movff	?___ftdiv,___fttol@f1
 11828  001960  C01F  F06E         	movff	?___ftdiv+1,___fttol@f1+1
 11829  001964  C020  F06F         	movff	?___ftdiv+2,___fttol@f1+2
 11830  001968  ECFE  F00B         	call	___fttol	;wreg free
 11831  00196C  C06D  F085         	movff	?___fttol,convert_to_degrees@degrees
 11832  001970  C06E  F086         	movff	?___fttol+1,convert_to_degrees@degrees+1
 11833                           
 11834                           ;GPS.c: 241: minutes = NMEA_lat_long - degrees*100.00;
 11835  001974  0E00               	movlw	0
 11836  001976  6E2D               	movwf	___ftmul@f2,c
 11837  001978  0EC8               	movlw	200
 11838  00197A  6E2E               	movwf	___ftmul@f2+1,c
 11839  00197C  0E42               	movlw	66
 11840  00197E  6E2F               	movwf	___ftmul@f2+2,c
 11841  001980  C085  F01E         	movff	convert_to_degrees@degrees,___awtoft@c
 11842  001984  C086  F01F         	movff	convert_to_degrees@degrees+1,___awtoft@c+1
 11843  001988  ECA1  F019         	call	___awtoft	;wreg free
 11844  00198C  C01E  F02A         	movff	?___awtoft,___ftmul@f1
 11845  001990  C01F  F02B         	movff	?___awtoft+1,___ftmul@f1+1
 11846  001994  C020  F02C         	movff	?___awtoft+2,___ftmul@f1+2
 11847  001998  EC26  F010         	call	___ftmul	;wreg free
 11848  00199C  C02A  F066         	movff	?___ftmul,___ftneg@f1
 11849  0019A0  C02B  F067         	movff	?___ftmul+1,___ftneg@f1+1
 11850  0019A4  C02C  F068         	movff	?___ftmul+2,___ftneg@f1+2
 11851  0019A8  ECD7  F019         	call	___ftneg	;wreg free
 11852  0019AC  C066  F070         	movff	?___ftneg,___ftadd@f1
 11853  0019B0  C067  F071         	movff	?___ftneg+1,___ftadd@f1+1
 11854  0019B4  C068  F072         	movff	?___ftneg+2,___ftadd@f1+2
 11855  0019B8  C07C  F073         	movff	convert_to_degrees@NMEA_lat_long,___ftadd@f2
 11856  0019BC  C07D  F074         	movff	convert_to_degrees@NMEA_lat_long+1,___ftadd@f2+1
 11857  0019C0  C07E  F075         	movff	convert_to_degrees@NMEA_lat_long+2,___ftadd@f2+2
 11858  0019C4  ECE0  F008         	call	___ftadd	;wreg free
 11859  0019C8  C070  F07F         	movff	?___ftadd,convert_to_degrees@minutes
 11860  0019CC  C071  F080         	movff	?___ftadd+1,convert_to_degrees@minutes+1
 11861  0019D0  C072  F081         	movff	?___ftadd+2,convert_to_degrees@minutes+2
 11862                           
 11863                           ;GPS.c: 242: dec_deg = minutes / 60.00;
 11864  0019D4  C07F  F01E         	movff	convert_to_degrees@minutes,___ftdiv@f1
 11865  0019D8  C080  F01F         	movff	convert_to_degrees@minutes+1,___ftdiv@f1+1
 11866  0019DC  C081  F020         	movff	convert_to_degrees@minutes+2,___ftdiv@f1+2
 11867  0019E0  0E00               	movlw	0
 11868  0019E2  6E21               	movwf	___ftdiv@f2,c
 11869  0019E4  0E70               	movlw	112
 11870  0019E6  6E22               	movwf	___ftdiv@f2+1,c
 11871  0019E8  0E42               	movlw	66
 11872  0019EA  6E23               	movwf	___ftdiv@f2+2,c
 11873  0019EC  EC40  F012         	call	___ftdiv	;wreg free
 11874  0019F0  C01E  F082         	movff	?___ftdiv,convert_to_degrees@dec_deg
 11875  0019F4  C01F  F083         	movff	?___ftdiv+1,convert_to_degrees@dec_deg+1
 11876  0019F8  C020  F084         	movff	?___ftdiv+2,convert_to_degrees@dec_deg+2
 11877                           
 11878                           ;GPS.c: 243: decimal = degrees + dec_deg;
 11879  0019FC  C085  F01E         	movff	convert_to_degrees@degrees,___awtoft@c
 11880  001A00  C086  F01F         	movff	convert_to_degrees@degrees+1,___awtoft@c+1
 11881  001A04  ECA1  F019         	call	___awtoft	;wreg free
 11882  001A08  C01E  F070         	movff	?___awtoft,___ftadd@f1
 11883  001A0C  C01F  F071         	movff	?___awtoft+1,___ftadd@f1+1
 11884  001A10  C020  F072         	movff	?___awtoft+2,___ftadd@f1+2
 11885  001A14  C082  F073         	movff	convert_to_degrees@dec_deg,___ftadd@f2
 11886  001A18  C083  F074         	movff	convert_to_degrees@dec_deg+1,___ftadd@f2+1
 11887  001A1C  C084  F075         	movff	convert_to_degrees@dec_deg+2,___ftadd@f2+2
 11888  001A20  ECE0  F008         	call	___ftadd	;wreg free
 11889  001A24  C070  F087         	movff	?___ftadd,convert_to_degrees@decimal
 11890  001A28  C071  F088         	movff	?___ftadd+1,convert_to_degrees@decimal+1
 11891  001A2C  C072  F089         	movff	?___ftadd+2,convert_to_degrees@decimal+2
 11892                           
 11893                           ;GPS.c: 244: if (N_S == 'S' || E_W == 'W') {
 11894  001A30  0E53               	movlw	83
 11895  001A32  0100               	movlb	0	; () banked
 11896  001A34  19DB               	xorwf	_N_S& (0+255),w,b
 11897  001A36  B4D8               	btfsc	status,2,c
 11898  001A38  D005               	goto	l10547
 11899                           
 11900                           ; BSR set to: 0
 11901  001A3A  0E57               	movlw	87
 11902  001A3C  0100               	movlb	0	; () banked
 11903  001A3E  19DA               	xorwf	_E_W& (0+255),w,b
 11904  001A40  A4D8               	btfss	status,2,c
 11905  001A42  D014               	goto	l10549
 11906  001A44                     l10547:
 11907                           
 11908                           ; BSR set to: 0
 11909                           ;GPS.c: 245: decimal *= -1;
 11910  001A44  C087  F02A         	movff	convert_to_degrees@decimal,___ftmul@f1
 11911  001A48  C088  F02B         	movff	convert_to_degrees@decimal+1,___ftmul@f1+1
 11912  001A4C  C089  F02C         	movff	convert_to_degrees@decimal+2,___ftmul@f1+2
 11913  001A50  0E00               	movlw	0
 11914  001A52  6E2D               	movwf	___ftmul@f2,c
 11915  001A54  0E80               	movlw	128
 11916  001A56  6E2E               	movwf	___ftmul@f2+1,c
 11917  001A58  0EBF               	movlw	191
 11918  001A5A  6E2F               	movwf	___ftmul@f2+2,c
 11919  001A5C  EC26  F010         	call	___ftmul	;wreg free
 11920  001A60  C02A  F087         	movff	?___ftmul,convert_to_degrees@decimal
 11921  001A64  C02B  F088         	movff	?___ftmul+1,convert_to_degrees@decimal+1
 11922  001A68  C02C  F089         	movff	?___ftmul+2,convert_to_degrees@decimal+2
 11923  001A6C                     l10549:
 11924                           
 11925                           ;GPS.c: 246: }
 11926                           ;GPS.c: 248: return decimal;
 11927  001A6C  C087  F07C         	movff	convert_to_degrees@decimal,?_convert_to_degrees
 11928  001A70  C088  F07D         	movff	convert_to_degrees@decimal+1,?_convert_to_degrees+1
 11929  001A74  C089  F07E         	movff	convert_to_degrees@decimal+2,?_convert_to_degrees+2
 11930  001A78  0012               	return	
 11931  001A7A                     __end_of_convert_to_degrees:
 11932                           	opt stack 0
 11933                           tosu	equ	0xFFF
 11934                           tosh	equ	0xFFE
 11935                           tosl	equ	0xFFD
 11936                           pclath	equ	0xFFA
 11937                           tblptru	equ	0xFF8
 11938                           tblptrh	equ	0xFF7
 11939                           tblptrl	equ	0xFF6
 11940                           tablat	equ	0xFF5
 11941                           prodh	equ	0xFF4
 11942                           prodl	equ	0xFF3
 11943                           intcon	equ	0xFF2
 11944                           intcon2	equ	0xFF1
 11945                           intcon3	equ	0xFF0
 11946                           indf0	equ	0xFEF
 11947                           postinc0	equ	0xFEE
 11948                           fsr0h	equ	0xFEA
 11949                           fsr0l	equ	0xFE9
 11950                           wreg	equ	0xFE8
 11951                           indf1	equ	0xFE7
 11952                           postinc1	equ	0xFE6
 11953                           postdec1	equ	0xFE5
 11954                           plusw1	equ	0xFE3
 11955                           fsr1h	equ	0xFE2
 11956                           fsr1l	equ	0xFE1
 11957                           indf2	equ	0xFDF
 11958                           postinc2	equ	0xFDE
 11959                           postdec2	equ	0xFDD
 11960                           plusw2	equ	0xFDB
 11961                           fsr2h	equ	0xFDA
 11962                           fsr2l	equ	0xFD9
 11963                           status	equ	0xFD8
 11964                           
 11965 ;; *************** function ___fttol *****************
 11966 ;; Defined at:
 11967 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
 11968 ;; Parameters:    Size  Location     Type
 11969 ;;  f1              3   13[BANK0 ] float 
 11970 ;; Auto vars:     Size  Location     Type
 11971 ;;  lval            4   23[BANK0 ] unsigned long 
 11972 ;;  exp1            1   27[BANK0 ] unsigned char 
 11973 ;;  sign1           1   22[BANK0 ] unsigned char 
 11974 ;; Return value:  Size  Location     Type
 11975 ;;                  4   13[BANK0 ] long 
 11976 ;; Registers used:
 11977 ;;		wreg, status,2, status,0
 11978 ;; Tracked objects:
 11979 ;;		On entry : 0/0
 11980 ;;		On exit  : 0/0
 11981 ;;		Unchanged: 0/0
 11982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11983 ;;      Params:         0       4       0       0       0       0       0       0       0
 11984 ;;      Locals:         0       6       0       0       0       0       0       0       0
 11985 ;;      Temps:          0       5       0       0       0       0       0       0       0
 11986 ;;      Totals:         0      15       0       0       0       0       0       0       0
 11987 ;;Total ram usage:       15 bytes
 11988 ;; Hardware stack levels used:    1
 11989 ;; Hardware stack levels required when called:    2
 11990 ;; This function calls:
 11991 ;;		Nothing
 11992 ;; This function is called by:
 11993 ;;		_convert_to_degrees
 11994 ;;		_sprintf
 11995 ;;		_get_sv
 11996 ;;		_escreve_float_lcd
 11997 ;; This function uses a non-reentrant model
 11998 ;;
 11999                           
 12000                           	psect	text56
 12001  0017FC                     __ptext56:
 12002                           	opt stack 0
 12003  0017FC                     ___fttol:
 12004                           	opt stack 25
 12005                           
 12006                           ;incstack = 0
 12007  0017FC  C06F  F071         	movff	___fttol@f1+2,??___fttol
 12008  001800  0100               	movlb	0	; () banked
 12009  001802  6B72               	clrf	(??___fttol+1)& (0+255),b
 12010  001804  6B73               	clrf	(??___fttol+2)& (0+255),b
 12011  001806  0100               	movlb	0	; () banked
 12012  001808  356E               	rlcf	(___fttol@f1+1)& (0+255),w,b
 12013  00180A  0100               	movlb	0	; () banked
 12014  00180C  3771               	rlcf	??___fttol& (0+255),f,b
 12015  00180E  E301               	bnc	u12471
 12016  001810  8172               	bsf	(??___fttol+1)& (0+255),0,b
 12017  001812                     u12471:
 12018  001812  0100               	movlb	0	; () banked
 12019  001814  5171               	movf	??___fttol& (0+255),w,b
 12020  001816  0100               	movlb	0	; () banked
 12021  001818  6F7B               	movwf	___fttol@exp1& (0+255),b
 12022  00181A  0100               	movlb	0	; () banked
 12023  00181C  517B               	movf	___fttol@exp1& (0+255),w,b
 12024  00181E  A4D8               	btfss	status,2,c
 12025  001820  D00A               	goto	l10431
 12026                           
 12027                           ; BSR set to: 0
 12028  001822  0E00               	movlw	0
 12029  001824  0100               	movlb	0	; () banked
 12030  001826  6F6D               	movwf	?___fttol& (0+255),b
 12031  001828  0E00               	movlw	0
 12032  00182A  6F6E               	movwf	(?___fttol+1)& (0+255),b
 12033  00182C  0E00               	movlw	0
 12034  00182E  6F6F               	movwf	(?___fttol+2)& (0+255),b
 12035  001830  0E00               	movlw	0
 12036  001832  6F70               	movwf	(?___fttol+3)& (0+255),b
 12037                           
 12038                           ; BSR set to: 0
 12039  001834  0012               	return	
 12040  001836                     l10431:
 12041                           
 12042                           ; BSR set to: 0
 12043  001836  0E17               	movlw	23
 12044  001838  0100               	movlb	0	; () banked
 12045  00183A  6F71               	movwf	??___fttol& (0+255),b
 12046  00183C  C06D  F072         	movff	___fttol@f1,??___fttol+1
 12047  001840  C06E  F073         	movff	___fttol@f1+1,??___fttol+2
 12048  001844  C06F  F074         	movff	___fttol@f1+2,??___fttol+3
 12049  001848  0100               	movlb	0	; () banked
 12050  00184A  2971               	incf	??___fttol& (0+255),w,b
 12051  00184C  0100               	movlb	0	; () banked
 12052  00184E  6F75               	movwf	(??___fttol+4)& (0+255),b
 12053  001850  D005               	goto	u12490
 12054  001852                     u12495:
 12055  001852  0100               	movlb	0	; () banked
 12056  001854  90D8               	bcf	status,0,c
 12057  001856  3374               	rrcf	(??___fttol+3)& (0+255),f,b
 12058  001858  3373               	rrcf	(??___fttol+2)& (0+255),f,b
 12059  00185A  3372               	rrcf	(??___fttol+1)& (0+255),f,b
 12060  00185C                     u12490:
 12061  00185C  0100               	movlb	0	; () banked
 12062  00185E  2F75               	decfsz	(??___fttol+4)& (0+255),f,b
 12063  001860  D7F8               	goto	u12495
 12064  001862  0100               	movlb	0	; () banked
 12065  001864  5172               	movf	(??___fttol+1)& (0+255),w,b
 12066  001866  0100               	movlb	0	; () banked
 12067  001868  6F76               	movwf	___fttol@sign1& (0+255),b
 12068                           
 12069                           ; BSR set to: 0
 12070  00186A  0100               	movlb	0	; () banked
 12071  00186C  8F6E               	bsf	(___fttol@f1+1)& (0+255),7,b
 12072                           
 12073                           ; BSR set to: 0
 12074  00186E  0EFF               	movlw	255
 12075  001870  0100               	movlb	0	; () banked
 12076  001872  176D               	andwf	___fttol@f1& (0+255),f,b
 12077  001874  0EFF               	movlw	255
 12078  001876  0100               	movlb	0	; () banked
 12079  001878  176E               	andwf	(___fttol@f1+1)& (0+255),f,b
 12080  00187A  0E00               	movlw	0
 12081  00187C  0100               	movlb	0	; () banked
 12082  00187E  176F               	andwf	(___fttol@f1+2)& (0+255),f,b
 12083                           
 12084                           ; BSR set to: 0
 12085  001880  0100               	movlb	0	; () banked
 12086  001882  516D               	movf	___fttol@f1& (0+255),w,b
 12087  001884  0100               	movlb	0	; () banked
 12088  001886  6F77               	movwf	___fttol@lval& (0+255),b
 12089  001888  0100               	movlb	0	; () banked
 12090  00188A  516E               	movf	(___fttol@f1+1)& (0+255),w,b
 12091  00188C  0100               	movlb	0	; () banked
 12092  00188E  6F78               	movwf	(___fttol@lval+1)& (0+255),b
 12093  001890  0100               	movlb	0	; () banked
 12094  001892  516F               	movf	(___fttol@f1+2)& (0+255),w,b
 12095  001894  0100               	movlb	0	; () banked
 12096  001896  6F79               	movwf	(___fttol@lval+2)& (0+255),b
 12097  001898  0100               	movlb	0	; () banked
 12098  00189A  6B7A               	clrf	(___fttol@lval+3)& (0+255),b
 12099                           
 12100                           ; BSR set to: 0
 12101  00189C  0E8E               	movlw	142
 12102  00189E  0100               	movlb	0	; () banked
 12103  0018A0  5F7B               	subwf	___fttol@exp1& (0+255),f,b
 12104                           
 12105                           ; BSR set to: 0
 12106  0018A2  0100               	movlb	0	; () banked
 12107  0018A4  AF7B               	btfss	___fttol@exp1& (0+255),7,b
 12108  0018A6  D01A               	goto	l10453
 12109                           
 12110                           ; BSR set to: 0
 12111  0018A8  0100               	movlb	0	; () banked
 12112  0018AA  517B               	movf	___fttol@exp1& (0+255),w,b
 12113  0018AC  0A80               	xorlw	128
 12114  0018AE  0F8F               	addlw	143
 12115  0018B0  B0D8               	btfsc	status,0,c
 12116  0018B2  D00A               	goto	l10449
 12117                           
 12118                           ; BSR set to: 0
 12119  0018B4  0E00               	movlw	0
 12120  0018B6  0100               	movlb	0	; () banked
 12121  0018B8  6F6D               	movwf	?___fttol& (0+255),b
 12122  0018BA  0E00               	movlw	0
 12123  0018BC  6F6E               	movwf	(?___fttol+1)& (0+255),b
 12124  0018BE  0E00               	movlw	0
 12125  0018C0  6F6F               	movwf	(?___fttol+2)& (0+255),b
 12126  0018C2  0E00               	movlw	0
 12127  0018C4  6F70               	movwf	(?___fttol+3)& (0+255),b
 12128                           
 12129                           ; BSR set to: 0
 12130  0018C6  0012               	return	
 12131  0018C8                     l10449:
 12132                           
 12133                           ; BSR set to: 0
 12134  0018C8  0100               	movlb	0	; () banked
 12135  0018CA  90D8               	bcf	status,0,c
 12136  0018CC  337A               	rrcf	(___fttol@lval+3)& (0+255),f,b
 12137  0018CE  3379               	rrcf	(___fttol@lval+2)& (0+255),f,b
 12138  0018D0  3378               	rrcf	(___fttol@lval+1)& (0+255),f,b
 12139  0018D2  3377               	rrcf	___fttol@lval& (0+255),f,b
 12140                           
 12141                           ; BSR set to: 0
 12142  0018D4  0100               	movlb	0	; () banked
 12143  0018D6  3F7B               	incfsz	___fttol@exp1& (0+255),f,b
 12144  0018D8  D7F7               	goto	l10449
 12145                           
 12146                           ; BSR set to: 0
 12147  0018DA  D01B               	goto	l10463
 12148  0018DC                     l10453:
 12149                           
 12150                           ; BSR set to: 0
 12151  0018DC  0E17               	movlw	23
 12152  0018DE  0100               	movlb	0	; () banked
 12153  0018E0  657B               	cpfsgt	___fttol@exp1& (0+255),b
 12154  0018E2  D012               	goto	l10461
 12155                           
 12156                           ; BSR set to: 0
 12157  0018E4  0E00               	movlw	0
 12158  0018E6  0100               	movlb	0	; () banked
 12159  0018E8  6F6D               	movwf	?___fttol& (0+255),b
 12160  0018EA  0E00               	movlw	0
 12161  0018EC  6F6E               	movwf	(?___fttol+1)& (0+255),b
 12162  0018EE  0E00               	movlw	0
 12163  0018F0  6F6F               	movwf	(?___fttol+2)& (0+255),b
 12164  0018F2  0E00               	movlw	0
 12165  0018F4  6F70               	movwf	(?___fttol+3)& (0+255),b
 12166                           
 12167                           ; BSR set to: 0
 12168  0018F6  0012               	return	
 12169  0018F8                     l10459:
 12170                           
 12171                           ; BSR set to: 0
 12172  0018F8  0100               	movlb	0	; () banked
 12173  0018FA  90D8               	bcf	status,0,c
 12174  0018FC  3777               	rlcf	___fttol@lval& (0+255),f,b
 12175  0018FE  3778               	rlcf	(___fttol@lval+1)& (0+255),f,b
 12176  001900  3779               	rlcf	(___fttol@lval+2)& (0+255),f,b
 12177  001902  377A               	rlcf	(___fttol@lval+3)& (0+255),f,b
 12178  001904  0100               	movlb	0	; () banked
 12179  001906  077B               	decf	___fttol@exp1& (0+255),f,b
 12180  001908                     l10461:
 12181                           
 12182                           ; BSR set to: 0
 12183  001908  0100               	movlb	0	; () banked
 12184  00190A  517B               	movf	___fttol@exp1& (0+255),w,b
 12185  00190C  0100               	movlb	0	; () banked
 12186  00190E  A4D8               	btfss	status,2,c
 12187  001910  D7F3               	goto	l10459
 12188  001912                     l10463:
 12189                           
 12190                           ; BSR set to: 0
 12191  001912  0100               	movlb	0	; () banked
 12192  001914  5176               	movf	___fttol@sign1& (0+255),w,b
 12193  001916  0100               	movlb	0	; () banked
 12194  001918  B4D8               	btfsc	status,2,c
 12195  00191A  D009               	goto	l10467
 12196                           
 12197                           ; BSR set to: 0
 12198  00191C  0100               	movlb	0	; () banked
 12199  00191E  1F7A               	comf	(___fttol@lval+3)& (0+255),f,b
 12200  001920  1F79               	comf	(___fttol@lval+2)& (0+255),f,b
 12201  001922  1F78               	comf	(___fttol@lval+1)& (0+255),f,b
 12202  001924  6D77               	negf	___fttol@lval& (0+255),b
 12203  001926  0E00               	movlw	0
 12204  001928  2378               	addwfc	(___fttol@lval+1)& (0+255),f,b
 12205  00192A  2379               	addwfc	(___fttol@lval+2)& (0+255),f,b
 12206  00192C  237A               	addwfc	(___fttol@lval+3)& (0+255),f,b
 12207  00192E                     l10467:
 12208                           
 12209                           ; BSR set to: 0
 12210  00192E  C077  F06D         	movff	___fttol@lval,?___fttol
 12211  001932  C078  F06E         	movff	___fttol@lval+1,?___fttol+1
 12212  001936  C079  F06F         	movff	___fttol@lval+2,?___fttol+2
 12213  00193A  C07A  F070         	movff	___fttol@lval+3,?___fttol+3
 12214  00193E  0012               	return	
 12215  001940                     __end_of___fttol:
 12216                           	opt stack 0
 12217                           tosu	equ	0xFFF
 12218                           tosh	equ	0xFFE
 12219                           tosl	equ	0xFFD
 12220                           pclath	equ	0xFFA
 12221                           tblptru	equ	0xFF8
 12222                           tblptrh	equ	0xFF7
 12223                           tblptrl	equ	0xFF6
 12224                           tablat	equ	0xFF5
 12225                           prodh	equ	0xFF4
 12226                           prodl	equ	0xFF3
 12227                           intcon	equ	0xFF2
 12228                           intcon2	equ	0xFF1
 12229                           intcon3	equ	0xFF0
 12230                           indf0	equ	0xFEF
 12231                           postinc0	equ	0xFEE
 12232                           fsr0h	equ	0xFEA
 12233                           fsr0l	equ	0xFE9
 12234                           wreg	equ	0xFE8
 12235                           indf1	equ	0xFE7
 12236                           postinc1	equ	0xFE6
 12237                           postdec1	equ	0xFE5
 12238                           plusw1	equ	0xFE3
 12239                           fsr1h	equ	0xFE2
 12240                           fsr1l	equ	0xFE1
 12241                           indf2	equ	0xFDF
 12242                           postinc2	equ	0xFDE
 12243                           postdec2	equ	0xFDD
 12244                           plusw2	equ	0xFDB
 12245                           fsr2h	equ	0xFDA
 12246                           fsr2l	equ	0xFD9
 12247                           status	equ	0xFD8
 12248                           
 12249 ;; *************** function ___ftneg *****************
 12250 ;; Defined at:
 12251 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftneg.c"
 12252 ;; Parameters:    Size  Location     Type
 12253 ;;  f1              3    6[BANK0 ] float 
 12254 ;; Auto vars:     Size  Location     Type
 12255 ;;		None
 12256 ;; Return value:  Size  Location     Type
 12257 ;;                  3    6[BANK0 ] float 
 12258 ;; Registers used:
 12259 ;;		wreg, status,2, status,0
 12260 ;; Tracked objects:
 12261 ;;		On entry : 0/0
 12262 ;;		On exit  : 0/0
 12263 ;;		Unchanged: 0/0
 12264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12265 ;;      Params:         0       3       0       0       0       0       0       0       0
 12266 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12267 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12268 ;;      Totals:         0       3       0       0       0       0       0       0       0
 12269 ;;Total ram usage:        3 bytes
 12270 ;; Hardware stack levels used:    1
 12271 ;; Hardware stack levels required when called:    2
 12272 ;; This function calls:
 12273 ;;		Nothing
 12274 ;; This function is called by:
 12275 ;;		_convert_to_degrees
 12276 ;;		_sprintf
 12277 ;;		_strtod
 12278 ;;		_escreve_float_lcd
 12279 ;; This function uses a non-reentrant model
 12280 ;;
 12281                           
 12282                           	psect	text57
 12283  0033AE                     __ptext57:
 12284                           	opt stack 0
 12285  0033AE                     ___ftneg:
 12286                           	opt stack 25
 12287                           
 12288                           ; BSR set to: 0
 12289                           ;incstack = 0
 12290  0033AE  0100               	movlb	0	; () banked
 12291  0033B0  5166               	movf	___ftneg@f1& (0+255),w,b
 12292  0033B2  0100               	movlb	0	; () banked
 12293  0033B4  1167               	iorwf	(___ftneg@f1+1)& (0+255),w,b
 12294  0033B6  0100               	movlb	0	; () banked
 12295  0033B8  1168               	iorwf	(___ftneg@f1+2)& (0+255),w,b
 12296  0033BA  B4D8               	btfsc	status,2,c
 12297  0033BC  D009               	goto	l1764
 12298                           
 12299                           ; BSR set to: 0
 12300  0033BE  0E00               	movlw	0
 12301  0033C0  0100               	movlb	0	; () banked
 12302  0033C2  1B66               	xorwf	___ftneg@f1& (0+255),f,b
 12303  0033C4  0E00               	movlw	0
 12304  0033C6  0100               	movlb	0	; () banked
 12305  0033C8  1B67               	xorwf	(___ftneg@f1+1)& (0+255),f,b
 12306  0033CA  0E80               	movlw	128
 12307  0033CC  0100               	movlb	0	; () banked
 12308  0033CE  1B68               	xorwf	(___ftneg@f1+2)& (0+255),f,b
 12309  0033D0                     l1764:
 12310                           
 12311                           ; BSR set to: 0
 12312  0033D0  C066  F066         	movff	___ftneg@f1,?___ftneg
 12313  0033D4  C067  F067         	movff	___ftneg@f1+1,?___ftneg+1
 12314  0033D8  C068  F068         	movff	___ftneg@f1+2,?___ftneg+2
 12315                           
 12316                           ; BSR set to: 0
 12317  0033DC  0012               	return		;funcret
 12318  0033DE                     __end_of___ftneg:
 12319                           	opt stack 0
 12320                           tosu	equ	0xFFF
 12321                           tosh	equ	0xFFE
 12322                           tosl	equ	0xFFD
 12323                           pclath	equ	0xFFA
 12324                           tblptru	equ	0xFF8
 12325                           tblptrh	equ	0xFF7
 12326                           tblptrl	equ	0xFF6
 12327                           tablat	equ	0xFF5
 12328                           prodh	equ	0xFF4
 12329                           prodl	equ	0xFF3
 12330                           intcon	equ	0xFF2
 12331                           intcon2	equ	0xFF1
 12332                           intcon3	equ	0xFF0
 12333                           indf0	equ	0xFEF
 12334                           postinc0	equ	0xFEE
 12335                           fsr0h	equ	0xFEA
 12336                           fsr0l	equ	0xFE9
 12337                           wreg	equ	0xFE8
 12338                           indf1	equ	0xFE7
 12339                           postinc1	equ	0xFE6
 12340                           postdec1	equ	0xFE5
 12341                           plusw1	equ	0xFE3
 12342                           fsr1h	equ	0xFE2
 12343                           fsr1l	equ	0xFE1
 12344                           indf2	equ	0xFDF
 12345                           postinc2	equ	0xFDE
 12346                           postdec2	equ	0xFDD
 12347                           plusw2	equ	0xFDB
 12348                           fsr2h	equ	0xFDA
 12349                           fsr2l	equ	0xFD9
 12350                           status	equ	0xFD8
 12351                           
 12352 ;; *************** function ___ftmul *****************
 12353 ;; Defined at:
 12354 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
 12355 ;; Parameters:    Size  Location     Type
 12356 ;;  f1              3   41[COMRAM] float 
 12357 ;;  f2              3   44[COMRAM] float 
 12358 ;; Auto vars:     Size  Location     Type
 12359 ;;  f3_as_produc    3    1[BANK0 ] unsigned um
 12360 ;;  sign            1    5[BANK0 ] unsigned char 
 12361 ;;  cntr            1    4[BANK0 ] unsigned char 
 12362 ;;  exp             1    0[BANK0 ] unsigned char 
 12363 ;; Return value:  Size  Location     Type
 12364 ;;                  3   41[COMRAM] float 
 12365 ;; Registers used:
 12366 ;;		wreg, status,2, status,0, cstack
 12367 ;; Tracked objects:
 12368 ;;		On entry : 0/0
 12369 ;;		On exit  : 0/0
 12370 ;;		Unchanged: 0/0
 12371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12372 ;;      Params:         6       0       0       0       0       0       0       0       0
 12373 ;;      Locals:         0       6       0       0       0       0       0       0       0
 12374 ;;      Temps:          3       0       0       0       0       0       0       0       0
 12375 ;;      Totals:         9       6       0       0       0       0       0       0       0
 12376 ;;Total ram usage:       15 bytes
 12377 ;; Hardware stack levels used:    1
 12378 ;; Hardware stack levels required when called:    3
 12379 ;; This function calls:
 12380 ;;		___ftpack
 12381 ;; This function is called by:
 12382 ;;		_convert_to_degrees
 12383 ;;		_fround
 12384 ;;		_scale
 12385 ;;		_sprintf
 12386 ;;		_strtod
 12387 ;;		_escreve_float_lcd
 12388 ;; This function uses a non-reentrant model
 12389 ;;
 12390                           
 12391                           	psect	text58
 12392  00204C                     __ptext58:
 12393                           	opt stack 0
 12394  00204C                     ___ftmul:
 12395                           	opt stack 23
 12396                           
 12397                           ; BSR set to: 0
 12398                           ;incstack = 0
 12399  00204C  C02C  F030         	movff	___ftmul@f1+2,??___ftmul
 12400  002050  6A31               	clrf	(??___ftmul+1)& (0+255),c
 12401  002052  6A32               	clrf	(??___ftmul+2)& (0+255),c
 12402  002054  342B               	rlcf	___ftmul@f1+1,w,c
 12403  002056  3630               	rlcf	??___ftmul& (0+255),f,c
 12404  002058  E301               	bnc	u10791
 12405  00205A  8031               	bsf	(??___ftmul+1)& (0+255),0,c
 12406  00205C                     u10791:
 12407  00205C  5030               	movf	??___ftmul,w,c
 12408  00205E  0100               	movlb	0	; () banked
 12409  002060  6F60               	movwf	___ftmul@exp& (0+255),b
 12410  002062  0100               	movlb	0	; () banked
 12411  002064  5160               	movf	___ftmul@exp& (0+255),w,b
 12412  002066  A4D8               	btfss	status,2,c
 12413  002068  D007               	goto	l9415
 12414                           
 12415                           ; BSR set to: 0
 12416  00206A  0E00               	movlw	0
 12417  00206C  6E2A               	movwf	?___ftmul,c
 12418  00206E  0E00               	movlw	0
 12419  002070  6E2B               	movwf	?___ftmul+1,c
 12420  002072  0E00               	movlw	0
 12421  002074  6E2C               	movwf	?___ftmul+2,c
 12422                           
 12423                           ; BSR set to: 0
 12424  002076  0012               	return	
 12425  002078                     l9415:
 12426                           
 12427                           ; BSR set to: 0
 12428  002078  C02F  F030         	movff	___ftmul@f2+2,??___ftmul
 12429  00207C  6A31               	clrf	(??___ftmul+1)& (0+255),c
 12430  00207E  6A32               	clrf	(??___ftmul+2)& (0+255),c
 12431  002080  342E               	rlcf	___ftmul@f2+1,w,c
 12432  002082  3630               	rlcf	??___ftmul& (0+255),f,c
 12433  002084  E301               	bnc	u10811
 12434  002086  8031               	bsf	(??___ftmul+1)& (0+255),0,c
 12435  002088                     u10811:
 12436  002088  5030               	movf	??___ftmul,w,c
 12437  00208A  0100               	movlb	0	; () banked
 12438  00208C  6F65               	movwf	___ftmul@sign& (0+255),b
 12439  00208E  0100               	movlb	0	; () banked
 12440  002090  5165               	movf	___ftmul@sign& (0+255),w,b
 12441  002092  A4D8               	btfss	status,2,c
 12442  002094  D007               	goto	l9421
 12443                           
 12444                           ; BSR set to: 0
 12445  002096  0E00               	movlw	0
 12446  002098  6E2A               	movwf	?___ftmul,c
 12447  00209A  0E00               	movlw	0
 12448  00209C  6E2B               	movwf	?___ftmul+1,c
 12449  00209E  0E00               	movlw	0
 12450  0020A0  6E2C               	movwf	?___ftmul+2,c
 12451                           
 12452                           ; BSR set to: 0
 12453  0020A2  0012               	return	
 12454  0020A4                     l9421:
 12455                           
 12456                           ; BSR set to: 0
 12457  0020A4  0100               	movlb	0	; () banked
 12458  0020A6  5165               	movf	___ftmul@sign& (0+255),w,b
 12459  0020A8  0F7B               	addlw	123
 12460  0020AA  0100               	movlb	0	; () banked
 12461  0020AC  2760               	addwf	___ftmul@exp& (0+255),f,b
 12462                           
 12463                           ; BSR set to: 0
 12464  0020AE  C02C  F065         	movff	___ftmul@f1+2,___ftmul@sign
 12465  0020B2  502F               	movf	___ftmul@f2+2,w,c
 12466  0020B4  0100               	movlb	0	; () banked
 12467  0020B6  1B65               	xorwf	___ftmul@sign& (0+255),f,b
 12468  0020B8  0E80               	movlw	128
 12469  0020BA  0100               	movlb	0	; () banked
 12470  0020BC  1765               	andwf	___ftmul@sign& (0+255),f,b
 12471                           
 12472                           ; BSR set to: 0
 12473  0020BE  8E2B               	bsf	___ftmul@f1+1,7,c
 12474                           
 12475                           ; BSR set to: 0
 12476  0020C0  8E2E               	bsf	___ftmul@f2+1,7,c
 12477                           
 12478                           ; BSR set to: 0
 12479  0020C2  0EFF               	movlw	255
 12480  0020C4  162D               	andwf	___ftmul@f2,f,c
 12481  0020C6  0EFF               	movlw	255
 12482  0020C8  162E               	andwf	___ftmul@f2+1,f,c
 12483  0020CA  0E00               	movlw	0
 12484  0020CC  162F               	andwf	___ftmul@f2+2,f,c
 12485                           
 12486                           ; BSR set to: 0
 12487  0020CE  0E00               	movlw	0
 12488  0020D0  0100               	movlb	0	; () banked
 12489  0020D2  6F61               	movwf	___ftmul@f3_as_product& (0+255),b
 12490  0020D4  0E00               	movlw	0
 12491  0020D6  0100               	movlb	0	; () banked
 12492  0020D8  6F62               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 12493  0020DA  0E00               	movlw	0
 12494  0020DC  0100               	movlb	0	; () banked
 12495  0020DE  6F63               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 12496                           
 12497                           ; BSR set to: 0
 12498  0020E0  0E07               	movlw	7
 12499  0020E2  0100               	movlb	0	; () banked
 12500  0020E4  6F64               	movwf	___ftmul@cntr& (0+255),b
 12501  0020E6                     l9435:
 12502                           
 12503                           ; BSR set to: 0
 12504  0020E6  A02A               	btfss	___ftmul@f1,0,c
 12505  0020E8  D009               	goto	l9439
 12506                           
 12507                           ; BSR set to: 0
 12508  0020EA  502D               	movf	___ftmul@f2,w,c
 12509  0020EC  0100               	movlb	0	; () banked
 12510  0020EE  2761               	addwf	___ftmul@f3_as_product& (0+255),f,b
 12511  0020F0  502E               	movf	___ftmul@f2+1,w,c
 12512  0020F2  0100               	movlb	0	; () banked
 12513  0020F4  2362               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 12514  0020F6  502F               	movf	___ftmul@f2+2,w,c
 12515  0020F8  0100               	movlb	0	; () banked
 12516  0020FA  2363               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 12517  0020FC                     l9439:
 12518                           
 12519                           ; BSR set to: 0
 12520  0020FC  90D8               	bcf	status,0,c
 12521  0020FE  322C               	rrcf	___ftmul@f1+2,f,c
 12522  002100  322B               	rrcf	___ftmul@f1+1,f,c
 12523  002102  322A               	rrcf	___ftmul@f1,f,c
 12524  002104  90D8               	bcf	status,0,c
 12525  002106  362D               	rlcf	___ftmul@f2,f,c
 12526  002108  362E               	rlcf	___ftmul@f2+1,f,c
 12527  00210A  362F               	rlcf	___ftmul@f2+2,f,c
 12528                           
 12529                           ; BSR set to: 0
 12530  00210C  0100               	movlb	0	; () banked
 12531  00210E  2F64               	decfsz	___ftmul@cntr& (0+255),f,b
 12532  002110  D7EA               	goto	l9435
 12533                           
 12534                           ; BSR set to: 0
 12535                           
 12536                           ; BSR set to: 0
 12537  002112  0E09               	movlw	9
 12538  002114  0100               	movlb	0	; () banked
 12539  002116  6F64               	movwf	___ftmul@cntr& (0+255),b
 12540  002118                     l9445:
 12541                           
 12542                           ; BSR set to: 0
 12543  002118  A02A               	btfss	___ftmul@f1,0,c
 12544  00211A  D009               	goto	l9449
 12545                           
 12546                           ; BSR set to: 0
 12547  00211C  502D               	movf	___ftmul@f2,w,c
 12548  00211E  0100               	movlb	0	; () banked
 12549  002120  2761               	addwf	___ftmul@f3_as_product& (0+255),f,b
 12550  002122  502E               	movf	___ftmul@f2+1,w,c
 12551  002124  0100               	movlb	0	; () banked
 12552  002126  2362               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 12553  002128  502F               	movf	___ftmul@f2+2,w,c
 12554  00212A  0100               	movlb	0	; () banked
 12555  00212C  2363               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 12556  00212E                     l9449:
 12557                           
 12558                           ; BSR set to: 0
 12559  00212E  90D8               	bcf	status,0,c
 12560  002130  322C               	rrcf	___ftmul@f1+2,f,c
 12561  002132  322B               	rrcf	___ftmul@f1+1,f,c
 12562  002134  322A               	rrcf	___ftmul@f1,f,c
 12563  002136  0100               	movlb	0	; () banked
 12564  002138  90D8               	bcf	status,0,c
 12565  00213A  3363               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 12566  00213C  3362               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 12567  00213E  3361               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 12568                           
 12569                           ; BSR set to: 0
 12570  002140  0100               	movlb	0	; () banked
 12571  002142  2F64               	decfsz	___ftmul@cntr& (0+255),f,b
 12572  002144  D7E9               	goto	l9445
 12573                           
 12574                           ; BSR set to: 0
 12575                           
 12576                           ; BSR set to: 0
 12577  002146  C061  F016         	movff	___ftmul@f3_as_product,___ftpack@arg
 12578  00214A  C062  F017         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 12579  00214E  C063  F018         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 12580  002152  C060  F019         	movff	___ftmul@exp,___ftpack@exp
 12581  002156  C065  F01A         	movff	___ftmul@sign,___ftpack@sign
 12582  00215A  EC72  F013         	call	___ftpack	;wreg free
 12583  00215E  C016  F02A         	movff	?___ftpack,?___ftmul
 12584  002162  C017  F02B         	movff	?___ftpack+1,?___ftmul+1
 12585  002166  C018  F02C         	movff	?___ftpack+2,?___ftmul+2
 12586  00216A  0012               	return	
 12587  00216C                     __end_of___ftmul:
 12588                           	opt stack 0
 12589                           tosu	equ	0xFFF
 12590                           tosh	equ	0xFFE
 12591                           tosl	equ	0xFFD
 12592                           pclath	equ	0xFFA
 12593                           tblptru	equ	0xFF8
 12594                           tblptrh	equ	0xFF7
 12595                           tblptrl	equ	0xFF6
 12596                           tablat	equ	0xFF5
 12597                           prodh	equ	0xFF4
 12598                           prodl	equ	0xFF3
 12599                           intcon	equ	0xFF2
 12600                           intcon2	equ	0xFF1
 12601                           intcon3	equ	0xFF0
 12602                           indf0	equ	0xFEF
 12603                           postinc0	equ	0xFEE
 12604                           fsr0h	equ	0xFEA
 12605                           fsr0l	equ	0xFE9
 12606                           wreg	equ	0xFE8
 12607                           indf1	equ	0xFE7
 12608                           postinc1	equ	0xFE6
 12609                           postdec1	equ	0xFE5
 12610                           plusw1	equ	0xFE3
 12611                           fsr1h	equ	0xFE2
 12612                           fsr1l	equ	0xFE1
 12613                           indf2	equ	0xFDF
 12614                           postinc2	equ	0xFDE
 12615                           postdec2	equ	0xFDD
 12616                           plusw2	equ	0xFDB
 12617                           fsr2h	equ	0xFDA
 12618                           fsr2l	equ	0xFD9
 12619                           status	equ	0xFD8
 12620                           
 12621 ;; *************** function ___ftdiv *****************
 12622 ;; Defined at:
 12623 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdiv.c"
 12624 ;; Parameters:    Size  Location     Type
 12625 ;;  f1              3   29[COMRAM] float 
 12626 ;;  f2              3   32[COMRAM] float 
 12627 ;; Auto vars:     Size  Location     Type
 12628 ;;  f3              3   39[COMRAM] float 
 12629 ;;  sign            1   43[COMRAM] unsigned char 
 12630 ;;  exp             1   42[COMRAM] unsigned char 
 12631 ;;  cntr            1   38[COMRAM] unsigned char 
 12632 ;; Return value:  Size  Location     Type
 12633 ;;                  3   29[COMRAM] float 
 12634 ;; Registers used:
 12635 ;;		wreg, status,2, status,0, cstack
 12636 ;; Tracked objects:
 12637 ;;		On entry : 0/0
 12638 ;;		On exit  : 0/0
 12639 ;;		Unchanged: 0/0
 12640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12641 ;;      Params:         6       0       0       0       0       0       0       0       0
 12642 ;;      Locals:         6       0       0       0       0       0       0       0       0
 12643 ;;      Temps:          3       0       0       0       0       0       0       0       0
 12644 ;;      Totals:        15       0       0       0       0       0       0       0       0
 12645 ;;Total ram usage:       15 bytes
 12646 ;; Hardware stack levels used:    1
 12647 ;; Hardware stack levels required when called:    3
 12648 ;; This function calls:
 12649 ;;		___ftpack
 12650 ;; This function is called by:
 12651 ;;		_convert_to_degrees
 12652 ;;		_strtod
 12653 ;; This function uses a non-reentrant model
 12654 ;;
 12655                           
 12656                           	psect	text59
 12657  002480                     __ptext59:
 12658                           	opt stack 0
 12659  002480                     ___ftdiv:
 12660                           	opt stack 22
 12661                           
 12662                           ;incstack = 0
 12663  002480  C020  F024         	movff	___ftdiv@f1+2,??___ftdiv
 12664  002484  6A25               	clrf	(??___ftdiv+1)& (0+255),c
 12665  002486  6A26               	clrf	(??___ftdiv+2)& (0+255),c
 12666  002488  341F               	rlcf	___ftdiv@f1+1,w,c
 12667  00248A  3624               	rlcf	??___ftdiv& (0+255),f,c
 12668  00248C  E301               	bnc	u10741
 12669  00248E  8025               	bsf	(??___ftdiv+1)& (0+255),0,c
 12670  002490                     u10741:
 12671  002490  5024               	movf	??___ftdiv,w,c
 12672  002492  6E2B               	movwf	___ftdiv@exp,c
 12673  002494  502B               	movf	___ftdiv@exp,w,c
 12674  002496  A4D8               	btfss	status,2,c
 12675  002498  D007               	goto	l9369
 12676  00249A  0E00               	movlw	0
 12677  00249C  6E1E               	movwf	?___ftdiv,c
 12678  00249E  0E00               	movlw	0
 12679  0024A0  6E1F               	movwf	?___ftdiv+1,c
 12680  0024A2  0E00               	movlw	0
 12681  0024A4  6E20               	movwf	?___ftdiv+2,c
 12682  0024A6  0012               	return	
 12683  0024A8                     l9369:
 12684  0024A8  C023  F024         	movff	___ftdiv@f2+2,??___ftdiv
 12685  0024AC  6A25               	clrf	(??___ftdiv+1)& (0+255),c
 12686  0024AE  6A26               	clrf	(??___ftdiv+2)& (0+255),c
 12687  0024B0  3422               	rlcf	___ftdiv@f2+1,w,c
 12688  0024B2  3624               	rlcf	??___ftdiv& (0+255),f,c
 12689  0024B4  E301               	bnc	u10761
 12690  0024B6  8025               	bsf	(??___ftdiv+1)& (0+255),0,c
 12691  0024B8                     u10761:
 12692  0024B8  5024               	movf	??___ftdiv,w,c
 12693  0024BA  6E2C               	movwf	___ftdiv@sign,c
 12694  0024BC  502C               	movf	___ftdiv@sign,w,c
 12695  0024BE  A4D8               	btfss	status,2,c
 12696  0024C0  D007               	goto	l9375
 12697  0024C2  0E00               	movlw	0
 12698  0024C4  6E1E               	movwf	?___ftdiv,c
 12699  0024C6  0E00               	movlw	0
 12700  0024C8  6E1F               	movwf	?___ftdiv+1,c
 12701  0024CA  0E00               	movlw	0
 12702  0024CC  6E20               	movwf	?___ftdiv+2,c
 12703  0024CE  0012               	return	
 12704  0024D0                     l9375:
 12705  0024D0  0E00               	movlw	0
 12706  0024D2  6E28               	movwf	___ftdiv@f3,c
 12707  0024D4  0E00               	movlw	0
 12708  0024D6  6E29               	movwf	___ftdiv@f3+1,c
 12709  0024D8  0E00               	movlw	0
 12710  0024DA  6E2A               	movwf	___ftdiv@f3+2,c
 12711  0024DC  502C               	movf	___ftdiv@sign,w,c
 12712  0024DE  0F89               	addlw	137
 12713  0024E0  5E2B               	subwf	___ftdiv@exp,f,c
 12714  0024E2  C020  F02C         	movff	___ftdiv@f1+2,___ftdiv@sign
 12715  0024E6  5023               	movf	___ftdiv@f2+2,w,c
 12716  0024E8  1A2C               	xorwf	___ftdiv@sign,f,c
 12717  0024EA  0E80               	movlw	128
 12718  0024EC  162C               	andwf	___ftdiv@sign,f,c
 12719  0024EE  8E1F               	bsf	___ftdiv@f1+1,7,c
 12720  0024F0  0EFF               	movlw	255
 12721  0024F2  161E               	andwf	___ftdiv@f1,f,c
 12722  0024F4  0EFF               	movlw	255
 12723  0024F6  161F               	andwf	___ftdiv@f1+1,f,c
 12724  0024F8  0E00               	movlw	0
 12725  0024FA  1620               	andwf	___ftdiv@f1+2,f,c
 12726  0024FC  8E22               	bsf	___ftdiv@f2+1,7,c
 12727  0024FE  0EFF               	movlw	255
 12728  002500  1621               	andwf	___ftdiv@f2,f,c
 12729  002502  0EFF               	movlw	255
 12730  002504  1622               	andwf	___ftdiv@f2+1,f,c
 12731  002506  0E00               	movlw	0
 12732  002508  1623               	andwf	___ftdiv@f2+2,f,c
 12733  00250A  0E18               	movlw	24
 12734  00250C  6E27               	movwf	___ftdiv@cntr,c
 12735  00250E                     l9395:
 12736  00250E  90D8               	bcf	status,0,c
 12737  002510  3628               	rlcf	___ftdiv@f3,f,c
 12738  002512  3629               	rlcf	___ftdiv@f3+1,f,c
 12739  002514  362A               	rlcf	___ftdiv@f3+2,f,c
 12740  002516  5021               	movf	___ftdiv@f2,w,c
 12741  002518  5C1E               	subwf	___ftdiv@f1,w,c
 12742  00251A  5022               	movf	___ftdiv@f2+1,w,c
 12743  00251C  581F               	subwfb	___ftdiv@f1+1,w,c
 12744  00251E  5023               	movf	___ftdiv@f2+2,w,c
 12745  002520  5820               	subwfb	___ftdiv@f1+2,w,c
 12746  002522  A0D8               	btfss	status,0,c
 12747  002524  D007               	goto	l1725
 12748  002526  5021               	movf	___ftdiv@f2,w,c
 12749  002528  5E1E               	subwf	___ftdiv@f1,f,c
 12750  00252A  5022               	movf	___ftdiv@f2+1,w,c
 12751  00252C  5A1F               	subwfb	___ftdiv@f1+1,f,c
 12752  00252E  5023               	movf	___ftdiv@f2+2,w,c
 12753  002530  5A20               	subwfb	___ftdiv@f1+2,f,c
 12754  002532  8028               	bsf	___ftdiv@f3,0,c
 12755  002534                     l1725:
 12756  002534  90D8               	bcf	status,0,c
 12757  002536  361E               	rlcf	___ftdiv@f1,f,c
 12758  002538  361F               	rlcf	___ftdiv@f1+1,f,c
 12759  00253A  3620               	rlcf	___ftdiv@f1+2,f,c
 12760  00253C  2E27               	decfsz	___ftdiv@cntr,f,c
 12761  00253E  D7E7               	goto	l9395
 12762  002540  C028  F016         	movff	___ftdiv@f3,___ftpack@arg
 12763  002544  C029  F017         	movff	___ftdiv@f3+1,___ftpack@arg+1
 12764  002548  C02A  F018         	movff	___ftdiv@f3+2,___ftpack@arg+2
 12765  00254C  C02B  F019         	movff	___ftdiv@exp,___ftpack@exp
 12766  002550  C02C  F01A         	movff	___ftdiv@sign,___ftpack@sign
 12767  002554  EC72  F013         	call	___ftpack	;wreg free
 12768  002558  C016  F01E         	movff	?___ftpack,?___ftdiv
 12769  00255C  C017  F01F         	movff	?___ftpack+1,?___ftdiv+1
 12770  002560  C018  F020         	movff	?___ftpack+2,?___ftdiv+2
 12771  002564  0012               	return	
 12772  002566                     __end_of___ftdiv:
 12773                           	opt stack 0
 12774                           tosu	equ	0xFFF
 12775                           tosh	equ	0xFFE
 12776                           tosl	equ	0xFFD
 12777                           pclath	equ	0xFFA
 12778                           tblptru	equ	0xFF8
 12779                           tblptrh	equ	0xFF7
 12780                           tblptrl	equ	0xFF6
 12781                           tablat	equ	0xFF5
 12782                           prodh	equ	0xFF4
 12783                           prodl	equ	0xFF3
 12784                           intcon	equ	0xFF2
 12785                           intcon2	equ	0xFF1
 12786                           intcon3	equ	0xFF0
 12787                           indf0	equ	0xFEF
 12788                           postinc0	equ	0xFEE
 12789                           fsr0h	equ	0xFEA
 12790                           fsr0l	equ	0xFE9
 12791                           wreg	equ	0xFE8
 12792                           indf1	equ	0xFE7
 12793                           postinc1	equ	0xFE6
 12794                           postdec1	equ	0xFE5
 12795                           plusw1	equ	0xFE3
 12796                           fsr1h	equ	0xFE2
 12797                           fsr1l	equ	0xFE1
 12798                           indf2	equ	0xFDF
 12799                           postinc2	equ	0xFDE
 12800                           postdec2	equ	0xFDD
 12801                           plusw2	equ	0xFDB
 12802                           fsr2h	equ	0xFDA
 12803                           fsr2l	equ	0xFD9
 12804                           status	equ	0xFD8
 12805                           
 12806 ;; *************** function ___ftadd *****************
 12807 ;; Defined at:
 12808 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftadd.c"
 12809 ;; Parameters:    Size  Location     Type
 12810 ;;  f1              3   16[BANK0 ] float 
 12811 ;;  f2              3   19[BANK0 ] float 
 12812 ;; Auto vars:     Size  Location     Type
 12813 ;;  exp1            1   27[BANK0 ] unsigned char 
 12814 ;;  exp2            1   26[BANK0 ] unsigned char 
 12815 ;;  sign            1   25[BANK0 ] unsigned char 
 12816 ;; Return value:  Size  Location     Type
 12817 ;;                  3   16[BANK0 ] float 
 12818 ;; Registers used:
 12819 ;;		wreg, status,2, status,0, cstack
 12820 ;; Tracked objects:
 12821 ;;		On entry : 0/0
 12822 ;;		On exit  : 0/0
 12823 ;;		Unchanged: 0/0
 12824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12825 ;;      Params:         0       6       0       0       0       0       0       0       0
 12826 ;;      Locals:         0       3       0       0       0       0       0       0       0
 12827 ;;      Temps:          0       3       0       0       0       0       0       0       0
 12828 ;;      Totals:         0      12       0       0       0       0       0       0       0
 12829 ;;Total ram usage:       12 bytes
 12830 ;; Hardware stack levels used:    1
 12831 ;; Hardware stack levels required when called:    3
 12832 ;; This function calls:
 12833 ;;		___ftpack
 12834 ;; This function is called by:
 12835 ;;		_convert_to_degrees
 12836 ;;		_sprintf
 12837 ;;		___ftsub
 12838 ;;		_escreve_float_lcd
 12839 ;; This function uses a non-reentrant model
 12840 ;;
 12841                           
 12842                           	psect	text60
 12843  0011C0                     __ptext60:
 12844                           	opt stack 0
 12845  0011C0                     ___ftadd:
 12846                           	opt stack 23
 12847                           
 12848                           ;incstack = 0
 12849  0011C0  C072  F076         	movff	___ftadd@f1+2,??___ftadd
 12850  0011C4  0100               	movlb	0	; () banked
 12851  0011C6  6B77               	clrf	(??___ftadd+1)& (0+255),b
 12852  0011C8  6B78               	clrf	(??___ftadd+2)& (0+255),b
 12853  0011CA  0100               	movlb	0	; () banked
 12854  0011CC  3571               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 12855  0011CE  0100               	movlb	0	; () banked
 12856  0011D0  3776               	rlcf	??___ftadd& (0+255),f,b
 12857  0011D2  E301               	bnc	u11131
 12858  0011D4  8177               	bsf	(??___ftadd+1)& (0+255),0,b
 12859  0011D6                     u11131:
 12860  0011D6  0100               	movlb	0	; () banked
 12861  0011D8  5176               	movf	??___ftadd& (0+255),w,b
 12862  0011DA  0100               	movlb	0	; () banked
 12863  0011DC  6F7B               	movwf	___ftadd@exp1& (0+255),b
 12864  0011DE  C075  F076         	movff	___ftadd@f2+2,??___ftadd
 12865  0011E2  0100               	movlb	0	; () banked
 12866  0011E4  6B77               	clrf	(??___ftadd+1)& (0+255),b
 12867  0011E6  6B78               	clrf	(??___ftadd+2)& (0+255),b
 12868  0011E8  0100               	movlb	0	; () banked
 12869  0011EA  3574               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 12870  0011EC  0100               	movlb	0	; () banked
 12871  0011EE  3776               	rlcf	??___ftadd& (0+255),f,b
 12872  0011F0  E301               	bnc	u11141
 12873  0011F2  8177               	bsf	(??___ftadd+1)& (0+255),0,b
 12874  0011F4                     u11141:
 12875  0011F4  0100               	movlb	0	; () banked
 12876  0011F6  5176               	movf	??___ftadd& (0+255),w,b
 12877  0011F8  0100               	movlb	0	; () banked
 12878  0011FA  6F7A               	movwf	___ftadd@exp2& (0+255),b
 12879                           
 12880                           ; BSR set to: 0
 12881  0011FC  0100               	movlb	0	; () banked
 12882  0011FE  517B               	movf	___ftadd@exp1& (0+255),w,b
 12883  001200  0100               	movlb	0	; () banked
 12884  001202  B4D8               	btfsc	status,2,c
 12885  001204  D011               	goto	l1690
 12886                           
 12887                           ; BSR set to: 0
 12888  001206  0100               	movlb	0	; () banked
 12889  001208  517A               	movf	___ftadd@exp2& (0+255),w,b
 12890  00120A  0100               	movlb	0	; () banked
 12891  00120C  5D7B               	subwf	___ftadd@exp1& (0+255),w,b
 12892  00120E  B0D8               	btfsc	status,0,c
 12893  001210  D012               	goto	l9613
 12894                           
 12895                           ; BSR set to: 0
 12896  001212  0100               	movlb	0	; () banked
 12897  001214  517B               	movf	___ftadd@exp1& (0+255),w,b
 12898  001216  0800               	sublw	0
 12899  001218  0100               	movlb	0	; () banked
 12900  00121A  257A               	addwf	___ftadd@exp2& (0+255),w,b
 12901  00121C  0100               	movlb	0	; () banked
 12902  00121E  6F76               	movwf	??___ftadd& (0+255),b
 12903  001220  0E18               	movlw	24
 12904  001222  0100               	movlb	0	; () banked
 12905  001224  6576               	cpfsgt	??___ftadd& (0+255),b
 12906  001226  D007               	goto	l9613
 12907  001228                     l1690:
 12908                           
 12909                           ; BSR set to: 0
 12910  001228  C073  F070         	movff	___ftadd@f2,?___ftadd
 12911  00122C  C074  F071         	movff	___ftadd@f2+1,?___ftadd+1
 12912  001230  C075  F072         	movff	___ftadd@f2+2,?___ftadd+2
 12913  001234  0012               	return	
 12914  001236                     l9613:
 12915                           
 12916                           ; BSR set to: 0
 12917  001236  0100               	movlb	0	; () banked
 12918  001238  517A               	movf	___ftadd@exp2& (0+255),w,b
 12919  00123A  0100               	movlb	0	; () banked
 12920  00123C  B4D8               	btfsc	status,2,c
 12921  00123E  D011               	goto	l1694
 12922                           
 12923                           ; BSR set to: 0
 12924  001240  0100               	movlb	0	; () banked
 12925  001242  517B               	movf	___ftadd@exp1& (0+255),w,b
 12926  001244  0100               	movlb	0	; () banked
 12927  001246  5D7A               	subwf	___ftadd@exp2& (0+255),w,b
 12928  001248  B0D8               	btfsc	status,0,c
 12929  00124A  D012               	goto	l9619
 12930                           
 12931                           ; BSR set to: 0
 12932  00124C  0100               	movlb	0	; () banked
 12933  00124E  517A               	movf	___ftadd@exp2& (0+255),w,b
 12934  001250  0800               	sublw	0
 12935  001252  0100               	movlb	0	; () banked
 12936  001254  257B               	addwf	___ftadd@exp1& (0+255),w,b
 12937  001256  0100               	movlb	0	; () banked
 12938  001258  6F76               	movwf	??___ftadd& (0+255),b
 12939  00125A  0E18               	movlw	24
 12940  00125C  0100               	movlb	0	; () banked
 12941  00125E  6576               	cpfsgt	??___ftadd& (0+255),b
 12942  001260  D007               	goto	l9619
 12943  001262                     l1694:
 12944                           
 12945                           ; BSR set to: 0
 12946  001262  C070  F070         	movff	___ftadd@f1,?___ftadd
 12947  001266  C071  F071         	movff	___ftadd@f1+1,?___ftadd+1
 12948  00126A  C072  F072         	movff	___ftadd@f1+2,?___ftadd+2
 12949  00126E  0012               	return	
 12950  001270                     l9619:
 12951                           
 12952                           ; BSR set to: 0
 12953  001270  0E06               	movlw	6
 12954  001272  0100               	movlb	0	; () banked
 12955  001274  6F79               	movwf	___ftadd@sign& (0+255),b
 12956                           
 12957                           ; BSR set to: 0
 12958  001276  0100               	movlb	0	; () banked
 12959  001278  AF72               	btfss	(___ftadd@f1+2)& (0+255),7,b
 12960  00127A  D002               	goto	l9625
 12961                           
 12962                           ; BSR set to: 0
 12963  00127C  0100               	movlb	0	; () banked
 12964  00127E  8F79               	bsf	___ftadd@sign& (0+255),7,b
 12965  001280                     l9625:
 12966                           
 12967                           ; BSR set to: 0
 12968  001280  0100               	movlb	0	; () banked
 12969  001282  AF75               	btfss	(___ftadd@f2+2)& (0+255),7,b
 12970  001284  D002               	goto	l1696
 12971                           
 12972                           ; BSR set to: 0
 12973  001286  0100               	movlb	0	; () banked
 12974  001288  8D79               	bsf	___ftadd@sign& (0+255),6,b
 12975  00128A                     l1696:
 12976                           
 12977                           ; BSR set to: 0
 12978  00128A  0100               	movlb	0	; () banked
 12979  00128C  8F71               	bsf	(___ftadd@f1+1)& (0+255),7,b
 12980                           
 12981                           ; BSR set to: 0
 12982  00128E  0EFF               	movlw	255
 12983  001290  0100               	movlb	0	; () banked
 12984  001292  1770               	andwf	___ftadd@f1& (0+255),f,b
 12985  001294  0EFF               	movlw	255
 12986  001296  0100               	movlb	0	; () banked
 12987  001298  1771               	andwf	(___ftadd@f1+1)& (0+255),f,b
 12988  00129A  0E00               	movlw	0
 12989  00129C  0100               	movlb	0	; () banked
 12990  00129E  1772               	andwf	(___ftadd@f1+2)& (0+255),f,b
 12991  0012A0  0100               	movlb	0	; () banked
 12992  0012A2  8F74               	bsf	(___ftadd@f2+1)& (0+255),7,b
 12993                           
 12994                           ; BSR set to: 0
 12995  0012A4  0EFF               	movlw	255
 12996  0012A6  0100               	movlb	0	; () banked
 12997  0012A8  1773               	andwf	___ftadd@f2& (0+255),f,b
 12998  0012AA  0EFF               	movlw	255
 12999  0012AC  0100               	movlb	0	; () banked
 13000  0012AE  1774               	andwf	(___ftadd@f2+1)& (0+255),f,b
 13001  0012B0  0E00               	movlw	0
 13002  0012B2  0100               	movlb	0	; () banked
 13003  0012B4  1775               	andwf	(___ftadd@f2+2)& (0+255),f,b
 13004                           
 13005                           ; BSR set to: 0
 13006  0012B6  0100               	movlb	0	; () banked
 13007  0012B8  517A               	movf	___ftadd@exp2& (0+255),w,b
 13008  0012BA  0100               	movlb	0	; () banked
 13009  0012BC  5D7B               	subwf	___ftadd@exp1& (0+255),w,b
 13010  0012BE  B0D8               	btfsc	status,0,c
 13011  0012C0  D025               	goto	l9645
 13012  0012C2                     l9635:
 13013                           
 13014                           ; BSR set to: 0
 13015  0012C2  0100               	movlb	0	; () banked
 13016  0012C4  90D8               	bcf	status,0,c
 13017  0012C6  3773               	rlcf	___ftadd@f2& (0+255),f,b
 13018  0012C8  3774               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 13019  0012CA  3775               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 13020  0012CC  0100               	movlb	0	; () banked
 13021  0012CE  077A               	decf	___ftadd@exp2& (0+255),f,b
 13022                           
 13023                           ; BSR set to: 0
 13024  0012D0  0100               	movlb	0	; () banked
 13025  0012D2  517B               	movf	___ftadd@exp1& (0+255),w,b
 13026  0012D4  0100               	movlb	0	; () banked
 13027  0012D6  197A               	xorwf	___ftadd@exp2& (0+255),w,b
 13028  0012D8  B4D8               	btfsc	status,2,c
 13029  0012DA  D011               	goto	l9643
 13030                           
 13031                           ; BSR set to: 0
 13032  0012DC  0100               	movlb	0	; () banked
 13033  0012DE  0779               	decf	___ftadd@sign& (0+255),f,b
 13034  0012E0  C079  F076         	movff	___ftadd@sign,??___ftadd
 13035  0012E4  0E07               	movlw	7
 13036  0012E6  0100               	movlb	0	; () banked
 13037  0012E8  1776               	andwf	??___ftadd& (0+255),f,b
 13038  0012EA  B4D8               	btfsc	status,2,c
 13039  0012EC  D008               	goto	l9643
 13040  0012EE  D7E9               	goto	l9635
 13041  0012F0                     l9641:
 13042                           
 13043                           ; BSR set to: 0
 13044  0012F0  0100               	movlb	0	; () banked
 13045  0012F2  90D8               	bcf	status,0,c
 13046  0012F4  3372               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 13047  0012F6  3371               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 13048  0012F8  3370               	rrcf	___ftadd@f1& (0+255),f,b
 13049  0012FA  0100               	movlb	0	; () banked
 13050  0012FC  2B7B               	incf	___ftadd@exp1& (0+255),f,b
 13051  0012FE                     l9643:
 13052                           
 13053                           ; BSR set to: 0
 13054  0012FE  0100               	movlb	0	; () banked
 13055  001300  517A               	movf	___ftadd@exp2& (0+255),w,b
 13056  001302  0100               	movlb	0	; () banked
 13057  001304  197B               	xorwf	___ftadd@exp1& (0+255),w,b
 13058  001306  B4D8               	btfsc	status,2,c
 13059  001308  D02B               	goto	l1705
 13060  00130A  D7F2               	goto	l9641
 13061  00130C                     l9645:
 13062                           
 13063                           ; BSR set to: 0
 13064  00130C  0100               	movlb	0	; () banked
 13065  00130E  517B               	movf	___ftadd@exp1& (0+255),w,b
 13066  001310  0100               	movlb	0	; () banked
 13067  001312  5D7A               	subwf	___ftadd@exp2& (0+255),w,b
 13068  001314  B0D8               	btfsc	status,0,c
 13069  001316  D024               	goto	l1705
 13070  001318                     l9647:
 13071                           
 13072                           ; BSR set to: 0
 13073  001318  0100               	movlb	0	; () banked
 13074  00131A  90D8               	bcf	status,0,c
 13075  00131C  3770               	rlcf	___ftadd@f1& (0+255),f,b
 13076  00131E  3771               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 13077  001320  3772               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 13078  001322  0100               	movlb	0	; () banked
 13079  001324  077B               	decf	___ftadd@exp1& (0+255),f,b
 13080                           
 13081                           ; BSR set to: 0
 13082  001326  0100               	movlb	0	; () banked
 13083  001328  517B               	movf	___ftadd@exp1& (0+255),w,b
 13084  00132A  0100               	movlb	0	; () banked
 13085  00132C  197A               	xorwf	___ftadd@exp2& (0+255),w,b
 13086  00132E  B4D8               	btfsc	status,2,c
 13087  001330  D011               	goto	l9655
 13088                           
 13089                           ; BSR set to: 0
 13090  001332  0100               	movlb	0	; () banked
 13091  001334  0779               	decf	___ftadd@sign& (0+255),f,b
 13092  001336  C079  F076         	movff	___ftadd@sign,??___ftadd
 13093  00133A  0E07               	movlw	7
 13094  00133C  0100               	movlb	0	; () banked
 13095  00133E  1776               	andwf	??___ftadd& (0+255),f,b
 13096  001340  B4D8               	btfsc	status,2,c
 13097  001342  D008               	goto	l9655
 13098  001344  D7E9               	goto	l9647
 13099  001346                     l9653:
 13100                           
 13101                           ; BSR set to: 0
 13102  001346  0100               	movlb	0	; () banked
 13103  001348  90D8               	bcf	status,0,c
 13104  00134A  3375               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 13105  00134C  3374               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 13106  00134E  3373               	rrcf	___ftadd@f2& (0+255),f,b
 13107  001350  0100               	movlb	0	; () banked
 13108  001352  2B7A               	incf	___ftadd@exp2& (0+255),f,b
 13109  001354                     l9655:
 13110                           
 13111                           ; BSR set to: 0
 13112  001354  0100               	movlb	0	; () banked
 13113  001356  517A               	movf	___ftadd@exp2& (0+255),w,b
 13114  001358  0100               	movlb	0	; () banked
 13115  00135A  197B               	xorwf	___ftadd@exp1& (0+255),w,b
 13116  00135C  A4D8               	btfss	status,2,c
 13117  00135E  D7F3               	goto	l9653
 13118  001360                     l1705:
 13119                           
 13120                           ; BSR set to: 0
 13121  001360  0100               	movlb	0	; () banked
 13122  001362  AF79               	btfss	___ftadd@sign& (0+255),7,b
 13123  001364  D012               	goto	l1714
 13124                           
 13125                           ; BSR set to: 0
 13126  001366  0EFF               	movlw	255
 13127  001368  0100               	movlb	0	; () banked
 13128  00136A  1B70               	xorwf	___ftadd@f1& (0+255),f,b
 13129  00136C  0EFF               	movlw	255
 13130  00136E  0100               	movlb	0	; () banked
 13131  001370  1B71               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 13132  001372  0EFF               	movlw	255
 13133  001374  0100               	movlb	0	; () banked
 13134  001376  1B72               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 13135  001378  0E01               	movlw	1
 13136  00137A  0100               	movlb	0	; () banked
 13137  00137C  2770               	addwf	___ftadd@f1& (0+255),f,b
 13138  00137E  0E00               	movlw	0
 13139  001380  0100               	movlb	0	; () banked
 13140  001382  2371               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 13141  001384  0E00               	movlw	0
 13142  001386  0100               	movlb	0	; () banked
 13143  001388  2372               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 13144  00138A                     l1714:
 13145                           
 13146                           ; BSR set to: 0
 13147  00138A  0100               	movlb	0	; () banked
 13148  00138C  AD79               	btfss	___ftadd@sign& (0+255),6,b
 13149  00138E  D012               	goto	l9661
 13150                           
 13151                           ; BSR set to: 0
 13152  001390  0EFF               	movlw	255
 13153  001392  0100               	movlb	0	; () banked
 13154  001394  1B73               	xorwf	___ftadd@f2& (0+255),f,b
 13155  001396  0EFF               	movlw	255
 13156  001398  0100               	movlb	0	; () banked
 13157  00139A  1B74               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 13158  00139C  0EFF               	movlw	255
 13159  00139E  0100               	movlb	0	; () banked
 13160  0013A0  1B75               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 13161  0013A2  0E01               	movlw	1
 13162  0013A4  0100               	movlb	0	; () banked
 13163  0013A6  2773               	addwf	___ftadd@f2& (0+255),f,b
 13164  0013A8  0E00               	movlw	0
 13165  0013AA  0100               	movlb	0	; () banked
 13166  0013AC  2374               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 13167  0013AE  0E00               	movlw	0
 13168  0013B0  0100               	movlb	0	; () banked
 13169  0013B2  2375               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 13170  0013B4                     l9661:
 13171                           
 13172                           ; BSR set to: 0
 13173  0013B4  0E00               	movlw	0
 13174  0013B6  0100               	movlb	0	; () banked
 13175  0013B8  6F79               	movwf	___ftadd@sign& (0+255),b
 13176                           
 13177                           ; BSR set to: 0
 13178  0013BA  0100               	movlb	0	; () banked
 13179  0013BC  5170               	movf	___ftadd@f1& (0+255),w,b
 13180  0013BE  0100               	movlb	0	; () banked
 13181  0013C0  2773               	addwf	___ftadd@f2& (0+255),f,b
 13182  0013C2  0100               	movlb	0	; () banked
 13183  0013C4  5171               	movf	(___ftadd@f1+1)& (0+255),w,b
 13184  0013C6  0100               	movlb	0	; () banked
 13185  0013C8  2374               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 13186  0013CA  0100               	movlb	0	; () banked
 13187  0013CC  5172               	movf	(___ftadd@f1+2)& (0+255),w,b
 13188  0013CE  0100               	movlb	0	; () banked
 13189  0013D0  2375               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 13190                           
 13191                           ; BSR set to: 0
 13192  0013D2  0100               	movlb	0	; () banked
 13193  0013D4  AF75               	btfss	(___ftadd@f2+2)& (0+255),7,b
 13194  0013D6  D015               	goto	l9671
 13195                           
 13196                           ; BSR set to: 0
 13197  0013D8  0EFF               	movlw	255
 13198  0013DA  0100               	movlb	0	; () banked
 13199  0013DC  1B73               	xorwf	___ftadd@f2& (0+255),f,b
 13200  0013DE  0EFF               	movlw	255
 13201  0013E0  0100               	movlb	0	; () banked
 13202  0013E2  1B74               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 13203  0013E4  0EFF               	movlw	255
 13204  0013E6  0100               	movlb	0	; () banked
 13205  0013E8  1B75               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 13206  0013EA  0E01               	movlw	1
 13207  0013EC  0100               	movlb	0	; () banked
 13208  0013EE  2773               	addwf	___ftadd@f2& (0+255),f,b
 13209  0013F0  0E00               	movlw	0
 13210  0013F2  0100               	movlb	0	; () banked
 13211  0013F4  2374               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 13212  0013F6  0E00               	movlw	0
 13213  0013F8  0100               	movlb	0	; () banked
 13214  0013FA  2375               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 13215                           
 13216                           ; BSR set to: 0
 13217  0013FC  0E01               	movlw	1
 13218  0013FE  0100               	movlb	0	; () banked
 13219  001400  6F79               	movwf	___ftadd@sign& (0+255),b
 13220  001402                     l9671:
 13221                           
 13222                           ; BSR set to: 0
 13223  001402  C073  F016         	movff	___ftadd@f2,___ftpack@arg
 13224  001406  C074  F017         	movff	___ftadd@f2+1,___ftpack@arg+1
 13225  00140A  C075  F018         	movff	___ftadd@f2+2,___ftpack@arg+2
 13226  00140E  C07B  F019         	movff	___ftadd@exp1,___ftpack@exp
 13227  001412  C079  F01A         	movff	___ftadd@sign,___ftpack@sign
 13228  001416  EC72  F013         	call	___ftpack	;wreg free
 13229  00141A  C016  F070         	movff	?___ftpack,?___ftadd
 13230  00141E  C017  F071         	movff	?___ftpack+1,?___ftadd+1
 13231  001422  C018  F072         	movff	?___ftpack+2,?___ftadd+2
 13232  001426  0012               	return	
 13233  001428                     __end_of___ftadd:
 13234                           	opt stack 0
 13235                           tosu	equ	0xFFF
 13236                           tosh	equ	0xFFE
 13237                           tosl	equ	0xFFD
 13238                           pclath	equ	0xFFA
 13239                           tblptru	equ	0xFF8
 13240                           tblptrh	equ	0xFF7
 13241                           tblptrl	equ	0xFF6
 13242                           tablat	equ	0xFF5
 13243                           prodh	equ	0xFF4
 13244                           prodl	equ	0xFF3
 13245                           intcon	equ	0xFF2
 13246                           intcon2	equ	0xFF1
 13247                           intcon3	equ	0xFF0
 13248                           indf0	equ	0xFEF
 13249                           postinc0	equ	0xFEE
 13250                           fsr0h	equ	0xFEA
 13251                           fsr0l	equ	0xFE9
 13252                           wreg	equ	0xFE8
 13253                           indf1	equ	0xFE7
 13254                           postinc1	equ	0xFE6
 13255                           postdec1	equ	0xFE5
 13256                           plusw1	equ	0xFE3
 13257                           fsr1h	equ	0xFE2
 13258                           fsr1l	equ	0xFE1
 13259                           indf2	equ	0xFDF
 13260                           postinc2	equ	0xFDE
 13261                           postdec2	equ	0xFDD
 13262                           plusw2	equ	0xFDB
 13263                           fsr2h	equ	0xFDA
 13264                           fsr2l	equ	0xFD9
 13265                           status	equ	0xFD8
 13266                           
 13267 ;; *************** function ___awtoft *****************
 13268 ;; Defined at:
 13269 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awtoft.c"
 13270 ;; Parameters:    Size  Location     Type
 13271 ;;  c               2   29[COMRAM] int 
 13272 ;; Auto vars:     Size  Location     Type
 13273 ;;  sign            1   32[COMRAM] unsigned char 
 13274 ;; Return value:  Size  Location     Type
 13275 ;;                  3   29[COMRAM] float 
 13276 ;; Registers used:
 13277 ;;		wreg, status,2, status,0, cstack
 13278 ;; Tracked objects:
 13279 ;;		On entry : 0/0
 13280 ;;		On exit  : 0/0
 13281 ;;		Unchanged: 0/0
 13282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13283 ;;      Params:         3       0       0       0       0       0       0       0       0
 13284 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13285 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13286 ;;      Totals:         4       0       0       0       0       0       0       0       0
 13287 ;;Total ram usage:        4 bytes
 13288 ;; Hardware stack levels used:    1
 13289 ;; Hardware stack levels required when called:    3
 13290 ;; This function calls:
 13291 ;;		___ftpack
 13292 ;; This function is called by:
 13293 ;;		_convert_to_degrees
 13294 ;;		_escreve_float_lcd
 13295 ;; This function uses a non-reentrant model
 13296 ;;
 13297                           
 13298                           	psect	text61
 13299  003342                     __ptext61:
 13300                           	opt stack 0
 13301  003342                     ___awtoft:
 13302                           	opt stack 24
 13303                           
 13304                           ;incstack = 0
 13305  003342  0E00               	movlw	0
 13306  003344  6E21               	movwf	___awtoft@sign,c
 13307  003346  AE1F               	btfss	___awtoft@c+1,7,c
 13308  003348  D006               	goto	l10421
 13309  00334A  6C1E               	negf	___awtoft@c,c
 13310  00334C  1E1F               	comf	___awtoft@c+1,f,c
 13311  00334E  B0D8               	btfsc	status,0,c
 13312  003350  2A1F               	incf	___awtoft@c+1,f,c
 13313  003352  0E01               	movlw	1
 13314  003354  6E21               	movwf	___awtoft@sign,c
 13315  003356                     l10421:
 13316  003356  C01E  F016         	movff	___awtoft@c,___ftpack@arg
 13317  00335A  C01F  F017         	movff	___awtoft@c+1,___ftpack@arg+1
 13318  00335E  6A18               	clrf	___ftpack@arg+2,c
 13319  003360  0E8E               	movlw	142
 13320  003362  6E19               	movwf	___ftpack@exp,c
 13321  003364  C021  F01A         	movff	___awtoft@sign,___ftpack@sign
 13322  003368  EC72  F013         	call	___ftpack	;wreg free
 13323  00336C  C016  F01E         	movff	?___ftpack,?___awtoft
 13324  003370  C017  F01F         	movff	?___ftpack+1,?___awtoft+1
 13325  003374  C018  F020         	movff	?___ftpack+2,?___awtoft+2
 13326  003378  0012               	return	
 13327  00337A                     __end_of___awtoft:
 13328                           	opt stack 0
 13329                           tosu	equ	0xFFF
 13330                           tosh	equ	0xFFE
 13331                           tosl	equ	0xFFD
 13332                           pclath	equ	0xFFA
 13333                           tblptru	equ	0xFF8
 13334                           tblptrh	equ	0xFF7
 13335                           tblptrl	equ	0xFF6
 13336                           tablat	equ	0xFF5
 13337                           prodh	equ	0xFF4
 13338                           prodl	equ	0xFF3
 13339                           intcon	equ	0xFF2
 13340                           intcon2	equ	0xFF1
 13341                           intcon3	equ	0xFF0
 13342                           indf0	equ	0xFEF
 13343                           postinc0	equ	0xFEE
 13344                           fsr0h	equ	0xFEA
 13345                           fsr0l	equ	0xFE9
 13346                           wreg	equ	0xFE8
 13347                           indf1	equ	0xFE7
 13348                           postinc1	equ	0xFE6
 13349                           postdec1	equ	0xFE5
 13350                           plusw1	equ	0xFE3
 13351                           fsr1h	equ	0xFE2
 13352                           fsr1l	equ	0xFE1
 13353                           indf2	equ	0xFDF
 13354                           postinc2	equ	0xFDE
 13355                           postdec2	equ	0xFDD
 13356                           plusw2	equ	0xFDB
 13357                           fsr2h	equ	0xFDA
 13358                           fsr2l	equ	0xFD9
 13359                           status	equ	0xFD8
 13360                           
 13361 ;; *************** function ___ftpack *****************
 13362 ;; Defined at:
 13363 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
 13364 ;; Parameters:    Size  Location     Type
 13365 ;;  arg             3   21[COMRAM] unsigned um
 13366 ;;  exp             1   24[COMRAM] unsigned char 
 13367 ;;  sign            1   25[COMRAM] unsigned char 
 13368 ;; Auto vars:     Size  Location     Type
 13369 ;;		None
 13370 ;; Return value:  Size  Location     Type
 13371 ;;                  3   21[COMRAM] float 
 13372 ;; Registers used:
 13373 ;;		wreg, status,2, status,0
 13374 ;; Tracked objects:
 13375 ;;		On entry : 0/0
 13376 ;;		On exit  : 0/0
 13377 ;;		Unchanged: 0/0
 13378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13379 ;;      Params:         5       0       0       0       0       0       0       0       0
 13380 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13381 ;;      Temps:          3       0       0       0       0       0       0       0       0
 13382 ;;      Totals:         8       0       0       0       0       0       0       0       0
 13383 ;;Total ram usage:        8 bytes
 13384 ;; Hardware stack levels used:    1
 13385 ;; Hardware stack levels required when called:    2
 13386 ;; This function calls:
 13387 ;;		Nothing
 13388 ;; This function is called by:
 13389 ;;		___altoft
 13390 ;;		___awtoft
 13391 ;;		___ftadd
 13392 ;;		___ftdiv
 13393 ;;		___ftmul
 13394 ;;		___lltoft
 13395 ;;		___lwtoft
 13396 ;; This function uses a non-reentrant model
 13397 ;;
 13398                           
 13399                           	psect	text62
 13400  0026E4                     __ptext62:
 13401                           	opt stack 0
 13402  0026E4                     ___ftpack:
 13403                           	opt stack 23
 13404                           
 13405                           ;incstack = 0
 13406  0026E4  5019               	movf	___ftpack@exp,w,c
 13407  0026E6  B4D8               	btfsc	status,2,c
 13408  0026E8  D005               	goto	l9273
 13409  0026EA  5016               	movf	___ftpack@arg,w,c
 13410  0026EC  1017               	iorwf	___ftpack@arg+1,w,c
 13411  0026EE  1018               	iorwf	___ftpack@arg+2,w,c
 13412  0026F0  A4D8               	btfss	status,2,c
 13413  0026F2  D00C               	goto	l9279
 13414  0026F4                     l9273:
 13415  0026F4  0E00               	movlw	0
 13416  0026F6  6E16               	movwf	?___ftpack,c
 13417  0026F8  0E00               	movlw	0
 13418  0026FA  6E17               	movwf	?___ftpack+1,c
 13419  0026FC  0E00               	movlw	0
 13420  0026FE  6E18               	movwf	?___ftpack+2,c
 13421  002700  0012               	return	
 13422  002702                     l9277:
 13423  002702  2A19               	incf	___ftpack@exp,f,c
 13424  002704  90D8               	bcf	status,0,c
 13425  002706  3218               	rrcf	___ftpack@arg+2,f,c
 13426  002708  3217               	rrcf	___ftpack@arg+1,f,c
 13427  00270A  3216               	rrcf	___ftpack@arg,f,c
 13428  00270C                     l9279:
 13429  00270C  0E00               	movlw	0
 13430  00270E  1416               	andwf	___ftpack@arg,w,c
 13431  002710  6E1B               	movwf	??___ftpack& (0+255),c
 13432  002712  0E00               	movlw	0
 13433  002714  1417               	andwf	___ftpack@arg+1,w,c
 13434  002716  6E1C               	movwf	(??___ftpack+1)& (0+255),c
 13435  002718  0EFE               	movlw	254
 13436  00271A  1418               	andwf	___ftpack@arg+2,w,c
 13437  00271C  6E1D               	movwf	(??___ftpack+2)& (0+255),c
 13438  00271E  501B               	movf	??___ftpack,w,c
 13439  002720  101C               	iorwf	??___ftpack+1,w,c
 13440  002722  101D               	iorwf	??___ftpack+2,w,c
 13441  002724  B4D8               	btfsc	status,2,c
 13442  002726  D00C               	goto	l9285
 13443  002728  D7EC               	goto	l9277
 13444  00272A                     l9281:
 13445  00272A  2A19               	incf	___ftpack@exp,f,c
 13446  00272C  0E01               	movlw	1
 13447  00272E  2616               	addwf	___ftpack@arg,f,c
 13448  002730  0E00               	movlw	0
 13449  002732  2217               	addwfc	___ftpack@arg+1,f,c
 13450  002734  0E00               	movlw	0
 13451  002736  2218               	addwfc	___ftpack@arg+2,f,c
 13452  002738  90D8               	bcf	status,0,c
 13453  00273A  3218               	rrcf	___ftpack@arg+2,f,c
 13454  00273C  3217               	rrcf	___ftpack@arg+1,f,c
 13455  00273E  3216               	rrcf	___ftpack@arg,f,c
 13456  002740                     l9285:
 13457  002740  0E00               	movlw	0
 13458  002742  1416               	andwf	___ftpack@arg,w,c
 13459  002744  6E1B               	movwf	??___ftpack& (0+255),c
 13460  002746  0E00               	movlw	0
 13461  002748  1417               	andwf	___ftpack@arg+1,w,c
 13462  00274A  6E1C               	movwf	(??___ftpack+1)& (0+255),c
 13463  00274C  0EFF               	movlw	255
 13464  00274E  1418               	andwf	___ftpack@arg+2,w,c
 13465  002750  6E1D               	movwf	(??___ftpack+2)& (0+255),c
 13466  002752  501B               	movf	??___ftpack,w,c
 13467  002754  101C               	iorwf	??___ftpack+1,w,c
 13468  002756  101D               	iorwf	??___ftpack+2,w,c
 13469  002758  B4D8               	btfsc	status,2,c
 13470  00275A  D006               	goto	l9289
 13471  00275C  D7E6               	goto	l9281
 13472  00275E                     l9287:
 13473  00275E  0619               	decf	___ftpack@exp,f,c
 13474  002760  90D8               	bcf	status,0,c
 13475  002762  3616               	rlcf	___ftpack@arg,f,c
 13476  002764  3617               	rlcf	___ftpack@arg+1,f,c
 13477  002766  3618               	rlcf	___ftpack@arg+2,f,c
 13478  002768                     l9289:
 13479  002768  BE17               	btfsc	___ftpack@arg+1,7,c
 13480  00276A  D003               	goto	l1667
 13481  00276C  0E02               	movlw	2
 13482  00276E  6019               	cpfslt	___ftpack@exp,c
 13483  002770  D7F6               	goto	l9287
 13484  002772                     l1667:
 13485  002772  A019               	btfss	___ftpack@exp,0,c
 13486  002774  9E17               	bcf	___ftpack@arg+1,7,c
 13487  002776  90D8               	bcf	status,0,c
 13488  002778  3219               	rrcf	___ftpack@exp,f,c
 13489  00277A  5019               	movf	___ftpack@exp,w,c
 13490  00277C  1218               	iorwf	___ftpack@arg+2,f,c
 13491  00277E  501A               	movf	___ftpack@sign,w,c
 13492  002780  A4D8               	btfss	status,2,c
 13493  002782  8E18               	bsf	___ftpack@arg+2,7,c
 13494  002784  C016  F016         	movff	___ftpack@arg,?___ftpack
 13495  002788  C017  F017         	movff	___ftpack@arg+1,?___ftpack+1
 13496  00278C  C018  F018         	movff	___ftpack@arg+2,?___ftpack+2
 13497  002790  0012               	return	
 13498  002792                     __end_of___ftpack:
 13499                           	opt stack 0
 13500                           tosu	equ	0xFFF
 13501                           tosh	equ	0xFFE
 13502                           tosl	equ	0xFFD
 13503                           pclath	equ	0xFFA
 13504                           tblptru	equ	0xFF8
 13505                           tblptrh	equ	0xFF7
 13506                           tblptrl	equ	0xFF6
 13507                           tablat	equ	0xFF5
 13508                           prodh	equ	0xFF4
 13509                           prodl	equ	0xFF3
 13510                           intcon	equ	0xFF2
 13511                           intcon2	equ	0xFF1
 13512                           intcon3	equ	0xFF0
 13513                           indf0	equ	0xFEF
 13514                           postinc0	equ	0xFEE
 13515                           fsr0h	equ	0xFEA
 13516                           fsr0l	equ	0xFE9
 13517                           wreg	equ	0xFE8
 13518                           indf1	equ	0xFE7
 13519                           postinc1	equ	0xFE6
 13520                           postdec1	equ	0xFE5
 13521                           plusw1	equ	0xFE3
 13522                           fsr1h	equ	0xFE2
 13523                           fsr1l	equ	0xFE1
 13524                           indf2	equ	0xFDF
 13525                           postinc2	equ	0xFDE
 13526                           postdec2	equ	0xFDD
 13527                           plusw2	equ	0xFDB
 13528                           fsr2h	equ	0xFDA
 13529                           fsr2l	equ	0xFD9
 13530                           status	equ	0xFD8
 13531                           
 13532 ;; *************** function _controle_shrc *****************
 13533 ;; Defined at:
 13534 ;;		line 112 in file "bibliotecas/SHRC.c"
 13535 ;; Parameters:    Size  Location     Type
 13536 ;;		None
 13537 ;; Auto vars:     Size  Location     Type
 13538 ;;		None
 13539 ;; Return value:  Size  Location     Type
 13540 ;;                  1    wreg      void 
 13541 ;; Registers used:
 13542 ;;		wreg, status,2, status,0, cstack
 13543 ;; Tracked objects:
 13544 ;;		On entry : 0/0
 13545 ;;		On exit  : 0/0
 13546 ;;		Unchanged: 0/0
 13547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13548 ;;      Params:         0       0       0       0       0       0       0       0       0
 13549 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13550 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13551 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13552 ;;Total ram usage:        0 bytes
 13553 ;; Hardware stack levels used:    1
 13554 ;; Hardware stack levels required when called:    3
 13555 ;; This function calls:
 13556 ;;		_ativa_latch_shrc
 13557 ;;		_envia_dados_shrc
 13558 ;; This function is called by:
 13559 ;;		_main
 13560 ;;		_timer_dois
 13561 ;; This function uses a non-reentrant model
 13562 ;;
 13563                           
 13564                           	psect	text63
 13565  0035CE                     __ptext63:
 13566                           	opt stack 0
 13567  0035CE                     _controle_shrc:
 13568                           	opt stack 27
 13569                           
 13570                           ;SHRC.c: 115: envia_dados_shrc(dado);
 13571                           
 13572                           ;incstack = 0
 13573  0035CE  5040               	movf	_dado,w,c
 13574  0035D0  EC1F  F019         	call	_envia_dados_shrc
 13575                           
 13576                           ;SHRC.c: 116: ativa_latch_shrc();
 13577  0035D4  ECB3  F01A         	call	_ativa_latch_shrc	;wreg free
 13578  0035D8  0012               	return		;funcret
 13579  0035DA                     __end_of_controle_shrc:
 13580                           	opt stack 0
 13581                           tosu	equ	0xFFF
 13582                           tosh	equ	0xFFE
 13583                           tosl	equ	0xFFD
 13584                           pclath	equ	0xFFA
 13585                           tblptru	equ	0xFF8
 13586                           tblptrh	equ	0xFF7
 13587                           tblptrl	equ	0xFF6
 13588                           tablat	equ	0xFF5
 13589                           prodh	equ	0xFF4
 13590                           prodl	equ	0xFF3
 13591                           intcon	equ	0xFF2
 13592                           intcon2	equ	0xFF1
 13593                           intcon3	equ	0xFF0
 13594                           indf0	equ	0xFEF
 13595                           postinc0	equ	0xFEE
 13596                           fsr0h	equ	0xFEA
 13597                           fsr0l	equ	0xFE9
 13598                           wreg	equ	0xFE8
 13599                           indf1	equ	0xFE7
 13600                           postinc1	equ	0xFE6
 13601                           postdec1	equ	0xFE5
 13602                           plusw1	equ	0xFE3
 13603                           fsr1h	equ	0xFE2
 13604                           fsr1l	equ	0xFE1
 13605                           indf2	equ	0xFDF
 13606                           postinc2	equ	0xFDE
 13607                           postdec2	equ	0xFDD
 13608                           plusw2	equ	0xFDB
 13609                           fsr2h	equ	0xFDA
 13610                           fsr2l	equ	0xFD9
 13611                           status	equ	0xFD8
 13612                           
 13613 ;; *************** function _envia_dados_shrc *****************
 13614 ;; Defined at:
 13615 ;;		line 62 in file "bibliotecas/SHRC.c"
 13616 ;; Parameters:    Size  Location     Type
 13617 ;;  data_to_shrc    1    wreg     unsigned char 
 13618 ;; Auto vars:     Size  Location     Type
 13619 ;;  data_to_shrc    1   22[COMRAM] unsigned char 
 13620 ;;  contador        1   21[COMRAM] unsigned char 
 13621 ;; Return value:  Size  Location     Type
 13622 ;;                  1    wreg      void 
 13623 ;; Registers used:
 13624 ;;		wreg, status,2, status,0
 13625 ;; Tracked objects:
 13626 ;;		On entry : 0/0
 13627 ;;		On exit  : 0/0
 13628 ;;		Unchanged: 0/0
 13629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13630 ;;      Params:         0       0       0       0       0       0       0       0       0
 13631 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13632 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13633 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13634 ;;Total ram usage:        2 bytes
 13635 ;; Hardware stack levels used:    1
 13636 ;; Hardware stack levels required when called:    2
 13637 ;; This function calls:
 13638 ;;		Nothing
 13639 ;; This function is called by:
 13640 ;;		_controle_shrc
 13641 ;; This function uses a non-reentrant model
 13642 ;;
 13643                           
 13644                           	psect	text64
 13645  00323E                     __ptext64:
 13646                           	opt stack 0
 13647  00323E                     _envia_dados_shrc:
 13648                           	opt stack 27
 13649                           
 13650                           ;incstack = 0
 13651                           ;envia_dados_shrc@data_to_shrc stored from wreg
 13652  00323E  6E17               	movwf	envia_dados_shrc@data_to_shrc,c
 13653                           
 13654                           ;SHRC.c: 64: unsigned char contador=0;
 13655  003240  0E00               	movlw	0
 13656  003242  6E16               	movwf	envia_dados_shrc@contador,c
 13657                           
 13658                           ;SHRC.c: 65: (INTCONbits.GIE = 0);
 13659  003244  9EF2               	bcf	intcon,7,c	;volatile
 13660                           
 13661                           ;SHRC.c: 67: while(contador<=7)
 13662  003246  D018               	goto	l4079
 13663  003248                     l4057:
 13664                           
 13665                           ;SHRC.c: 68: {
 13666                           ;SHRC.c: 69: if((data_to_shrc & 0x80) == 0)
 13667  003248  BE17               	btfsc	envia_dados_shrc@data_to_shrc,7,c
 13668  00324A  D002               	goto	l359
 13669                           
 13670                           ;SHRC.c: 70: {
 13671                           ;SHRC.c: 71: LATBbits.LATB7 = 0;
 13672  00324C  9E8A               	bcf	3978,7,c	;volatile
 13673                           
 13674                           ;SHRC.c: 72: }
 13675  00324E  D001               	goto	l4061
 13676  003250                     l359:
 13677                           
 13678                           ;SHRC.c: 73: else
 13679                           ;SHRC.c: 74: {
 13680                           ;SHRC.c: 75: LATBbits.LATB7 = 1;
 13681  003250  8E8A               	bsf	3978,7,c	;volatile
 13682  003252                     l4061:
 13683                           
 13684                           ;SHRC.c: 76: }
 13685                           ;SHRC.c: 77: data_to_shrc = data_to_shrc << 1;
 13686  003252  5017               	movf	envia_dados_shrc@data_to_shrc,w,c
 13687  003254  2417               	addwf	envia_dados_shrc@data_to_shrc,w,c
 13688  003256  6E17               	movwf	envia_dados_shrc@data_to_shrc,c
 13689                           
 13690                           ;SHRC.c: 78: _delay((unsigned long)((30)*(48000000/4000000.0)));
 13691  003258  0E78               	movlw	120
 13692  00325A                     u14937:
 13693  00325A  2EE8               	decfsz	wreg,f,c
 13694  00325C  D7FE               	bra	u14937
 13695                           
 13696                           ;SHRC.c: 79: LATBbits.LATB6 = 1;
 13697  00325E  8C8A               	bsf	3978,6,c	;volatile
 13698                           
 13699                           ;SHRC.c: 80: _delay((unsigned long)((30)*(48000000/4000000.0)));
 13700  003260  0E78               	movlw	120
 13701  003262                     u14947:
 13702  003262  2EE8               	decfsz	wreg,f,c
 13703  003264  D7FE               	bra	u14947
 13704                           
 13705                           ;SHRC.c: 81: LATBbits.LATB7 = 0;
 13706  003266  9E8A               	bcf	3978,7,c	;volatile
 13707                           
 13708                           ;SHRC.c: 82: _delay((unsigned long)((30)*(48000000/4000000.0)));
 13709  003268  0E78               	movlw	120
 13710  00326A                     u14957:
 13711  00326A  2EE8               	decfsz	wreg,f,c
 13712  00326C  D7FE               	bra	u14957
 13713                           
 13714                           ;SHRC.c: 83: LATBbits.LATB6 = 0;
 13715  00326E  9C8A               	bcf	3978,6,c	;volatile
 13716                           
 13717                           ;SHRC.c: 84: _delay((unsigned long)((30)*(48000000/4000000.0)));
 13718  003270  0E78               	movlw	120
 13719  003272                     u14967:
 13720  003272  2EE8               	decfsz	wreg,f,c
 13721  003274  D7FE               	bra	u14967
 13722                           
 13723                           ;SHRC.c: 85: contador++;
 13724  003276  2A16               	incf	envia_dados_shrc@contador,f,c
 13725  003278                     l4079:
 13726  003278  0E07               	movlw	7
 13727  00327A  6416               	cpfsgt	envia_dados_shrc@contador,c
 13728  00327C  D7E5               	goto	l4057
 13729                           
 13730                           ;SHRC.c: 86: }
 13731                           ;SHRC.c: 87: (INTCONbits.GIE = 1);
 13732  00327E  8EF2               	bsf	intcon,7,c	;volatile
 13733  003280  0012               	return		;funcret
 13734  003282                     __end_of_envia_dados_shrc:
 13735                           	opt stack 0
 13736                           tosu	equ	0xFFF
 13737                           tosh	equ	0xFFE
 13738                           tosl	equ	0xFFD
 13739                           pclath	equ	0xFFA
 13740                           tblptru	equ	0xFF8
 13741                           tblptrh	equ	0xFF7
 13742                           tblptrl	equ	0xFF6
 13743                           tablat	equ	0xFF5
 13744                           prodh	equ	0xFF4
 13745                           prodl	equ	0xFF3
 13746                           intcon	equ	0xFF2
 13747                           intcon2	equ	0xFF1
 13748                           intcon3	equ	0xFF0
 13749                           indf0	equ	0xFEF
 13750                           postinc0	equ	0xFEE
 13751                           fsr0h	equ	0xFEA
 13752                           fsr0l	equ	0xFE9
 13753                           wreg	equ	0xFE8
 13754                           indf1	equ	0xFE7
 13755                           postinc1	equ	0xFE6
 13756                           postdec1	equ	0xFE5
 13757                           plusw1	equ	0xFE3
 13758                           fsr1h	equ	0xFE2
 13759                           fsr1l	equ	0xFE1
 13760                           indf2	equ	0xFDF
 13761                           postinc2	equ	0xFDE
 13762                           postdec2	equ	0xFDD
 13763                           plusw2	equ	0xFDB
 13764                           fsr2h	equ	0xFDA
 13765                           fsr2l	equ	0xFD9
 13766                           status	equ	0xFD8
 13767                           
 13768 ;; *************** function _ativa_latch_shrc *****************
 13769 ;; Defined at:
 13770 ;;		line 96 in file "bibliotecas/SHRC.c"
 13771 ;; Parameters:    Size  Location     Type
 13772 ;;		None
 13773 ;; Auto vars:     Size  Location     Type
 13774 ;;		None
 13775 ;; Return value:  Size  Location     Type
 13776 ;;                  1    wreg      void 
 13777 ;; Registers used:
 13778 ;;		wreg
 13779 ;; Tracked objects:
 13780 ;;		On entry : 0/0
 13781 ;;		On exit  : 0/0
 13782 ;;		Unchanged: 0/0
 13783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13784 ;;      Params:         0       0       0       0       0       0       0       0       0
 13785 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13786 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13787 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13788 ;;Total ram usage:        0 bytes
 13789 ;; Hardware stack levels used:    1
 13790 ;; Hardware stack levels required when called:    2
 13791 ;; This function calls:
 13792 ;;		Nothing
 13793 ;; This function is called by:
 13794 ;;		_controle_shrc
 13795 ;; This function uses a non-reentrant model
 13796 ;;
 13797                           
 13798                           	psect	text65
 13799  003566                     __ptext65:
 13800                           	opt stack 0
 13801  003566                     _ativa_latch_shrc:
 13802                           	opt stack 27
 13803                           
 13804                           ;SHRC.c: 99: LATBbits.LATB5 = 0;
 13805                           
 13806                           ;incstack = 0
 13807  003566  9A8A               	bcf	3978,5,c	;volatile
 13808                           
 13809                           ;SHRC.c: 100: _delay((unsigned long)((30)*(48000000/4000000.0)));
 13810  003568  0E78               	movlw	120
 13811  00356A                     u14977:
 13812  00356A  2EE8               	decfsz	wreg,f,c
 13813  00356C  D7FE               	bra	u14977
 13814                           
 13815                           ;SHRC.c: 101: LATBbits.LATB5 = 1;
 13816  00356E  8A8A               	bsf	3978,5,c	;volatile
 13817                           
 13818                           ;SHRC.c: 102: _delay((unsigned long)((60)*(48000000/4000000.0)));
 13819  003570  0EF0               	movlw	240
 13820  003572                     u14987:
 13821  003572  2EE8               	decfsz	wreg,f,c
 13822  003574  D7FE               	bra	u14987
 13823                           
 13824                           ;SHRC.c: 103: LATBbits.LATB5 = 0;
 13825  003576  9A8A               	bcf	3978,5,c	;volatile
 13826  003578  0012               	return		;funcret
 13827  00357A                     __end_of_ativa_latch_shrc:
 13828                           	opt stack 0
 13829                           tosu	equ	0xFFF
 13830                           tosh	equ	0xFFE
 13831                           tosl	equ	0xFFD
 13832                           pclath	equ	0xFFA
 13833                           tblptru	equ	0xFF8
 13834                           tblptrh	equ	0xFF7
 13835                           tblptrl	equ	0xFF6
 13836                           tablat	equ	0xFF5
 13837                           prodh	equ	0xFF4
 13838                           prodl	equ	0xFF3
 13839                           intcon	equ	0xFF2
 13840                           intcon2	equ	0xFF1
 13841                           intcon3	equ	0xFF0
 13842                           indf0	equ	0xFEF
 13843                           postinc0	equ	0xFEE
 13844                           fsr0h	equ	0xFEA
 13845                           fsr0l	equ	0xFE9
 13846                           wreg	equ	0xFE8
 13847                           indf1	equ	0xFE7
 13848                           postinc1	equ	0xFE6
 13849                           postdec1	equ	0xFE5
 13850                           plusw1	equ	0xFE3
 13851                           fsr1h	equ	0xFE2
 13852                           fsr1l	equ	0xFE1
 13853                           indf2	equ	0xFDF
 13854                           postinc2	equ	0xFDE
 13855                           postdec2	equ	0xFDD
 13856                           plusw2	equ	0xFDB
 13857                           fsr2h	equ	0xFDA
 13858                           fsr2l	equ	0xFD9
 13859                           status	equ	0xFD8
 13860                           
 13861 ;; *************** function _isr *****************
 13862 ;; Defined at:
 13863 ;;		line 96 in file "main.c"
 13864 ;; Parameters:    Size  Location     Type
 13865 ;;		None
 13866 ;; Auto vars:     Size  Location     Type
 13867 ;;  cont            1   20[COMRAM] unsigned char 
 13868 ;; Return value:  Size  Location     Type
 13869 ;;                  1    wreg      void 
 13870 ;; Registers used:
 13871 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13872 ;; Tracked objects:
 13873 ;;		On entry : 0/0
 13874 ;;		On exit  : 0/0
 13875 ;;		Unchanged: 0/0
 13876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13877 ;;      Params:         0       0       0       0       0       0       0       0       0
 13878 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13879 ;;      Temps:         16       0       0       0       0       0       0       0       0
 13880 ;;      Totals:        17       0       0       0       0       0       0       0       0
 13881 ;;Total ram usage:       17 bytes
 13882 ;; Hardware stack levels used:    1
 13883 ;; Hardware stack levels required when called:    1
 13884 ;; This function calls:
 13885 ;;		_recebe_dado_uart
 13886 ;;		_tratamento_uart
 13887 ;;		i2_write_timer_zero
 13888 ;; This function is called by:
 13889 ;;		Interrupt level 2
 13890 ;; This function uses a non-reentrant model
 13891 ;;
 13892                           
 13893                           	psect	intcode
 13894  000008                     __pintcode:
 13895                           	opt stack 0
 13896  000008                     _isr:
 13897                           	opt stack 22
 13898                           
 13899                           ;incstack = 0
 13900  000008  824A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 13901  00000A  ED94  F00F         	call	int_func,f	;refresh shadow registers
 13902                           tosu	equ	0xFFF
 13903                           tosh	equ	0xFFE
 13904                           tosl	equ	0xFFD
 13905                           pclath	equ	0xFFA
 13906                           tblptru	equ	0xFF8
 13907                           tblptrh	equ	0xFF7
 13908                           tblptrl	equ	0xFF6
 13909                           tablat	equ	0xFF5
 13910                           prodh	equ	0xFF4
 13911                           prodl	equ	0xFF3
 13912                           intcon	equ	0xFF2
 13913                           intcon2	equ	0xFF1
 13914                           intcon3	equ	0xFF0
 13915                           indf0	equ	0xFEF
 13916                           postinc0	equ	0xFEE
 13917                           fsr0h	equ	0xFEA
 13918                           fsr0l	equ	0xFE9
 13919                           wreg	equ	0xFE8
 13920                           indf1	equ	0xFE7
 13921                           postinc1	equ	0xFE6
 13922                           postdec1	equ	0xFE5
 13923                           plusw1	equ	0xFE3
 13924                           fsr1h	equ	0xFE2
 13925                           fsr1l	equ	0xFE1
 13926                           indf2	equ	0xFDF
 13927                           postinc2	equ	0xFDE
 13928                           postdec2	equ	0xFDD
 13929                           plusw2	equ	0xFDB
 13930                           fsr2h	equ	0xFDA
 13931                           fsr2l	equ	0xFD9
 13932                           status	equ	0xFD8
 13933                           
 13934                           	psect	intcode_body
 13935  001F28                     __pintcode_body:
 13936                           	opt stack 22
 13937  001F28                     int_func:
 13938                           	opt stack 22
 13939  001F28  0006               	pop		; remove dummy address from shadow register refresh
 13940  001F2A  CFFA F007          	movff	pclath,??_isr+2
 13941  001F2E  CFFB F008          	movff	pclatu,??_isr+3
 13942  001F32  CFE9 F009          	movff	fsr0l,??_isr+4
 13943  001F36  CFEA F00A          	movff	fsr0h,??_isr+5
 13944  001F3A  CFE1 F00B          	movff	fsr1l,??_isr+6
 13945  001F3E  CFE2 F00C          	movff	fsr1h,??_isr+7
 13946  001F42  CFD9 F00D          	movff	fsr2l,??_isr+8
 13947  001F46  CFDA F00E          	movff	fsr2h,??_isr+9
 13948  001F4A  CFF3 F00F          	movff	prodl,??_isr+10
 13949  001F4E  CFF4 F010          	movff	prodh,??_isr+11
 13950  001F52  CFF6 F011          	movff	tblptrl,??_isr+12
 13951  001F56  CFF7 F012          	movff	tblptrh,??_isr+13
 13952  001F5A  CFF8 F013          	movff	tblptru,??_isr+14
 13953  001F5E  CFF5 F014          	movff	tablat,??_isr+15
 13954                           
 13955                           ;main.c: 98: unsigned char cont;
 13956                           ;main.c: 101: if (PIE1bits.RCIE && PIR1bits.RCIF)
 13957  001F62  BA9D               	btfsc	3997,5,c	;volatile
 13958  001F64  AA9E               	btfss	3998,5,c	;volatile
 13959  001F66  D014               	goto	i2l8473
 13960                           
 13961                           ;main.c: 102: {
 13962                           ;main.c: 103: data_uart_recebe = recebe_dado_uart();
 13963  001F68  ECD8  F01A         	call	_recebe_dado_uart	;wreg free
 13964  001F6C  6E49               	movwf	_data_uart_recebe,c
 13965                           
 13966                           ;main.c: 104: PIR1bits.RCIF = 0;
 13967  001F6E  9A9E               	bcf	3998,5,c	;volatile
 13968                           
 13969                           ;main.c: 105: tratamento_uart(data_uart_recebe);
 13970  001F70  5049               	movf	_data_uart_recebe,w,c
 13971  001F72  ECB6  F010         	call	_tratamento_uart
 13972                           
 13973                           ;main.c: 106: LATBbits.LATB4 = ~LATBbits.LATB4;
 13974  001F76  A88A               	btfss	3978,4,c	;volatile
 13975  001F78  D002               	goto	i2u941_40
 13976  001F7A  0E01               	movlw	1
 13977  001F7C  D001               	goto	i2u941_46
 13978  001F7E                     i2u941_40:
 13979  001F7E  0E00               	movlw	0
 13980  001F80                     i2u941_46:
 13981  001F80  0AFF               	xorlw	255
 13982  001F82  6E05               	movwf	??_isr& (0+255),c
 13983  001F84  3A05               	swapf	??_isr,f,c
 13984  001F86  508A               	movf	3978,w,c	;volatile
 13985  001F88  1805               	xorwf	??_isr,w,c
 13986  001F8A  0BEF               	andlw	-17
 13987  001F8C  1805               	xorwf	??_isr,w,c
 13988  001F8E  6E8A               	movwf	3978,c	;volatile
 13989  001F90                     i2l8473:
 13990                           
 13991                           ;main.c: 109: }
 13992                           ;main.c: 112: unsigned char cont;
 13993                           ;main.c: 114: if (TMR0IF && T0IF)
 13994  001F90  B4F2               	btfsc	intcon,2,c	;volatile
 13995  001F92  A4F2               	btfss	intcon,2,c	;volatile
 13996  001F94  D039               	goto	i2l8503
 13997                           
 13998                           ;main.c: 115: {
 13999                           ;main.c: 116: INTCONbits.TMR0IF = 0;
 14000  001F96  94F2               	bcf	intcon,2,c	;volatile
 14001                           
 14002                           ;main.c: 117: sinaliza_int_timer = 1;
 14003  001F98  0E01               	movlw	1
 14004  001F9A  6E48               	movwf	_sinaliza_int_timer,c
 14005                           
 14006                           ;main.c: 119: for(cont= 0; cont<2;cont++)
 14007  001F9C  0E00               	movlw	0
 14008  001F9E  6E15               	movwf	isr@cont,c
 14009  001FA0                     i2l8481:
 14010  001FA0  0E01               	movlw	1
 14011  001FA2  6415               	cpfsgt	isr@cont,c
 14012  001FA4  D001               	goto	i2l8485
 14013  001FA6  D019               	goto	i2l8493
 14014  001FA8                     i2l8485:
 14015                           
 14016                           ;main.c: 120: {
 14017                           ;main.c: 121: if(tempo_tarefa[cont]>0) tempo_tarefa[cont]--;
 14018  001FA8  5015               	movf	isr@cont,w,c
 14019  001FAA  0D02               	mullw	2
 14020  001FAC  0EC5               	movlw	low _tempo_tarefa
 14021  001FAE  24F3               	addwf	prodl,w,c
 14022  001FB0  6ED9               	movwf	fsr2l,c
 14023  001FB2  0E00               	movlw	high _tempo_tarefa
 14024  001FB4  20F4               	addwfc	prodh,w,c
 14025  001FB6  6EDA               	movwf	fsr2h,c
 14026  001FB8  50DE               	movf	postinc2,w,c
 14027  001FBA  10DE               	iorwf	postinc2,w,c
 14028  001FBC  B4D8               	btfsc	status,2,c
 14029  001FBE  D00B               	goto	i2l8489
 14030  001FC0  5015               	movf	isr@cont,w,c
 14031  001FC2  0D02               	mullw	2
 14032  001FC4  0EC5               	movlw	low _tempo_tarefa
 14033  001FC6  24F3               	addwf	prodl,w,c
 14034  001FC8  6ED9               	movwf	fsr2l,c
 14035  001FCA  0E00               	movlw	high _tempo_tarefa
 14036  001FCC  20F4               	addwfc	prodh,w,c
 14037  001FCE  6EDA               	movwf	fsr2h,c
 14038  001FD0  06DE               	decf	postinc2,f,c
 14039  001FD2  0E00               	movlw	0
 14040  001FD4  5ADD               	subwfb	postdec2,f,c
 14041  001FD6                     i2l8489:
 14042  001FD6  2A15               	incf	isr@cont,f,c
 14043  001FD8  D7E3               	goto	i2l8481
 14044  001FDA                     i2l8493:
 14045                           
 14046                           ;main.c: 122: }
 14047                           ;main.c: 125: if(tarefa_em_execucao == 1)
 14048  001FDA  0447               	decf	_tarefa_em_execucao,w,c	;volatile
 14049  001FDC  A4D8               	btfss	status,2,c
 14050  001FDE  D00E               	goto	i2l8501
 14051                           
 14052                           ;main.c: 126: {
 14053                           ;main.c: 127: timeout_tarefa--;
 14054  001FE0  0100               	movlb	0	; () banked
 14055  001FE2  07D8               	decf	_timeout_tarefa& (0+255),f,b
 14056  001FE4  A0D8               	btfss	status,0,c
 14057  001FE6  07D9               	decf	(_timeout_tarefa+1)& (0+255),f,b
 14058                           
 14059                           ; BSR set to: 0
 14060                           ;main.c: 128: if(!timeout_tarefa)
 14061  001FE8  0100               	movlb	0	; () banked
 14062  001FEA  51D8               	movf	_timeout_tarefa& (0+255),w,b
 14063  001FEC  0100               	movlb	0	; () banked
 14064  001FEE  11D9               	iorwf	(_timeout_tarefa+1)& (0+255),w,b
 14065  001FF0  A4D8               	btfss	status,2,c
 14066  001FF2  D004               	goto	i2l8501
 14067                           
 14068                           ; BSR set to: 0
 14069                           ;main.c: 129: {
 14070                           ;main.c: 131: PCLATH = 0;
 14071  001FF4  0E00               	movlw	0
 14072  001FF6  6EFA               	movwf	pclath,c	;volatile
 14073                           
 14074                           ;main.c: 132: PCL = 0;
 14075  001FF8  0E00               	movlw	0
 14076  001FFA  6EF9               	movwf	pcl,c	;volatile
 14077  001FFC                     i2l8501:
 14078                           
 14079                           ;main.c: 133: }
 14080                           ;main.c: 134: }
 14081                           ;main.c: 137: write_timer_zero(0x0083);
 14082  001FFC  0E00               	movlw	0
 14083  001FFE  6E02               	movwf	i2write_timer_zero@timer0+1,c
 14084  002000  0E83               	movlw	131
 14085  002002  6E01               	movwf	i2write_timer_zero@timer0,c
 14086  002004  ECCF  F01A         	call	i2_write_timer_zero	;wreg free
 14087  002008                     i2l8503:
 14088                           
 14089                           ;main.c: 139: }
 14090                           ;main.c: 141: if (INT0IF && INT0IE)
 14091  002008  B2F2               	btfsc	intcon,1,c	;volatile
 14092  00200A  A8F2               	btfss	intcon,4,c	;volatile
 14093  00200C  D001               	goto	i2l77
 14094                           
 14095                           ;main.c: 142: {
 14096                           ;main.c: 143: INT0IF = 0;
 14097  00200E  92F2               	bcf	intcon,1,c	;volatile
 14098  002010                     i2l77:
 14099  002010  C014  FFF5         	movff	??_isr+15,tablat
 14100  002014  C013  FFF8         	movff	??_isr+14,tblptru
 14101  002018  C012  FFF7         	movff	??_isr+13,tblptrh
 14102  00201C  C011  FFF6         	movff	??_isr+12,tblptrl
 14103  002020  C010  FFF4         	movff	??_isr+11,prodh
 14104  002024  C00F  FFF3         	movff	??_isr+10,prodl
 14105  002028  C00E  FFDA         	movff	??_isr+9,fsr2h
 14106  00202C  C00D  FFD9         	movff	??_isr+8,fsr2l
 14107  002030  C00C  FFE2         	movff	??_isr+7,fsr1h
 14108  002034  C00B  FFE1         	movff	??_isr+6,fsr1l
 14109  002038  C00A  FFEA         	movff	??_isr+5,fsr0h
 14110  00203C  C009  FFE9         	movff	??_isr+4,fsr0l
 14111  002040  C008  FFFB         	movff	??_isr+3,pclatu
 14112  002044  C007  FFFA         	movff	??_isr+2,pclath
 14113  002048  924A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14114  00204A  0011               	retfie		f
 14115  00204C                     __end_of_isr:
 14116                           	opt stack 0
 14117                           tosu	equ	0xFFF
 14118                           tosh	equ	0xFFE
 14119                           tosl	equ	0xFFD
 14120                           pclatu	equ	0xFFB
 14121                           pclath	equ	0xFFA
 14122                           pcl	equ	0xFF9
 14123                           tblptru	equ	0xFF8
 14124                           tblptrh	equ	0xFF7
 14125                           tblptrl	equ	0xFF6
 14126                           tablat	equ	0xFF5
 14127                           prodh	equ	0xFF4
 14128                           prodl	equ	0xFF3
 14129                           intcon	equ	0xFF2
 14130                           intcon2	equ	0xFF1
 14131                           intcon3	equ	0xFF0
 14132                           indf0	equ	0xFEF
 14133                           postinc0	equ	0xFEE
 14134                           fsr0h	equ	0xFEA
 14135                           fsr0l	equ	0xFE9
 14136                           wreg	equ	0xFE8
 14137                           indf1	equ	0xFE7
 14138                           postinc1	equ	0xFE6
 14139                           postdec1	equ	0xFE5
 14140                           plusw1	equ	0xFE3
 14141                           fsr1h	equ	0xFE2
 14142                           fsr1l	equ	0xFE1
 14143                           indf2	equ	0xFDF
 14144                           postinc2	equ	0xFDE
 14145                           postdec2	equ	0xFDD
 14146                           plusw2	equ	0xFDB
 14147                           fsr2h	equ	0xFDA
 14148                           fsr2l	equ	0xFD9
 14149                           status	equ	0xFD8
 14150                           
 14151 ;; *************** function i2_write_timer_zero *****************
 14152 ;; Defined at:
 14153 ;;		line 138 in file "bibliotecas/hardware.c"
 14154 ;; Parameters:    Size  Location     Type
 14155 ;;  timer0          2    0[COMRAM] unsigned int 
 14156 ;; Auto vars:     Size  Location     Type
 14157 ;;  write_timer_    2    2[COMRAM] struct Timers
 14158 ;; Return value:  Size  Location     Type
 14159 ;;                  1    wreg      void 
 14160 ;; Registers used:
 14161 ;;		None
 14162 ;; Tracked objects:
 14163 ;;		On entry : 0/0
 14164 ;;		On exit  : 0/0
 14165 ;;		Unchanged: 0/0
 14166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14167 ;;      Params:         2       0       0       0       0       0       0       0       0
 14168 ;;      Locals:         2       0       0       0       0       0       0       0       0
 14169 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14170 ;;      Totals:         4       0       0       0       0       0       0       0       0
 14171 ;;Total ram usage:        4 bytes
 14172 ;; Hardware stack levels used:    1
 14173 ;; This function calls:
 14174 ;;		Nothing
 14175 ;; This function is called by:
 14176 ;;		_isr
 14177 ;; This function uses a non-reentrant model
 14178 ;;
 14179                           
 14180                           	psect	text67
 14181  00359E                     __ptext67:
 14182                           	opt stack 0
 14183  00359E                     i2_write_timer_zero:
 14184                           	opt stack 22
 14185                           
 14186                           ;hardware.c: 140: union Timers timer;
 14187                           ;hardware.c: 142: timer.lt = timer0;
 14188                           
 14189                           ;incstack = 0
 14190  00359E  C001  F003         	movff	i2write_timer_zero@timer0,i2write_timer_zero@timer
 14191  0035A2  C002  F004         	movff	i2write_timer_zero@timer0+1,i2write_timer_zero@timer+1
 14192                           
 14193                           ;hardware.c: 144: TMR0H = timer.bt[1];
 14194  0035A6  C004  FFD7         	movff	i2write_timer_zero@timer+1,4055	;volatile
 14195                           
 14196                           ;hardware.c: 145: TMR0L = timer.bt[0];
 14197  0035AA  C003  FFD6         	movff	i2write_timer_zero@timer,4054	;volatile
 14198  0035AE  0012               	return		;funcret
 14199  0035B0                     __end_ofi2_write_timer_zero:
 14200                           	opt stack 0
 14201                           tosu	equ	0xFFF
 14202                           tosh	equ	0xFFE
 14203                           tosl	equ	0xFFD
 14204                           pclatu	equ	0xFFB
 14205                           pclath	equ	0xFFA
 14206                           pcl	equ	0xFF9
 14207                           tblptru	equ	0xFF8
 14208                           tblptrh	equ	0xFF7
 14209                           tblptrl	equ	0xFF6
 14210                           tablat	equ	0xFF5
 14211                           prodh	equ	0xFF4
 14212                           prodl	equ	0xFF3
 14213                           intcon	equ	0xFF2
 14214                           intcon2	equ	0xFF1
 14215                           intcon3	equ	0xFF0
 14216                           indf0	equ	0xFEF
 14217                           postinc0	equ	0xFEE
 14218                           fsr0h	equ	0xFEA
 14219                           fsr0l	equ	0xFE9
 14220                           wreg	equ	0xFE8
 14221                           indf1	equ	0xFE7
 14222                           postinc1	equ	0xFE6
 14223                           postdec1	equ	0xFE5
 14224                           plusw1	equ	0xFE3
 14225                           fsr1h	equ	0xFE2
 14226                           fsr1l	equ	0xFE1
 14227                           indf2	equ	0xFDF
 14228                           postinc2	equ	0xFDE
 14229                           postdec2	equ	0xFDD
 14230                           plusw2	equ	0xFDB
 14231                           fsr2h	equ	0xFDA
 14232                           fsr2l	equ	0xFD9
 14233                           status	equ	0xFD8
 14234                           
 14235 ;; *************** function _tratamento_uart *****************
 14236 ;; Defined at:
 14237 ;;		line 315 in file "bibliotecas/GPS.c"
 14238 ;; Parameters:    Size  Location     Type
 14239 ;;  received_cha    1    wreg     unsigned char 
 14240 ;; Auto vars:     Size  Location     Type
 14241 ;;  received_cha    1    0[COMRAM] unsigned char 
 14242 ;; Return value:  Size  Location     Type
 14243 ;;                  1    wreg      void 
 14244 ;; Registers used:
 14245 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14246 ;; Tracked objects:
 14247 ;;		On entry : 0/0
 14248 ;;		On exit  : 0/0
 14249 ;;		Unchanged: 0/0
 14250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14251 ;;      Params:         0       0       0       0       0       0       0       0       0
 14252 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14253 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14254 ;;      Totals:         1       0       0       0       0       0       0       0       0
 14255 ;;Total ram usage:        1 bytes
 14256 ;; Hardware stack levels used:    1
 14257 ;; This function calls:
 14258 ;;		Nothing
 14259 ;; This function is called by:
 14260 ;;		_isr
 14261 ;; This function uses a non-reentrant model
 14262 ;;
 14263                           
 14264                           	psect	text68
 14265  00216C                     __ptext68:
 14266                           	opt stack 0
 14267  00216C                     _tratamento_uart:
 14268                           	opt stack 22
 14269                           
 14270                           ;incstack = 0
 14271                           ;tratamento_uart@received_char stored from wreg
 14272  00216C  6E01               	movwf	tratamento_uart@received_char,c
 14273                           
 14274                           ;GPS.c: 317: if(received_char =='$'){
 14275  00216E  0E24               	movlw	36
 14276  002170  1801               	xorwf	tratamento_uart@received_char,w,c
 14277  002172  A4D8               	btfss	status,2,c
 14278  002174  D010               	goto	i2l7943
 14279                           
 14280                           ;GPS.c: 318: GGA_Index = 0;
 14281  002176  0E00               	movlw	0
 14282  002178  6E3D               	movwf	_GGA_Index+1,c	;volatile
 14283  00217A  0E00               	movlw	0
 14284  00217C  6E3C               	movwf	_GGA_Index,c	;volatile
 14285                           
 14286                           ;GPS.c: 319: RMC_Index = 0;
 14287  00217E  0E00               	movlw	0
 14288  002180  6E3B               	movwf	_RMC_Index+1,c	;volatile
 14289  002182  0E00               	movlw	0
 14290  002184  6E3A               	movwf	_RMC_Index,c	;volatile
 14291                           
 14292                           ;GPS.c: 320: IsItGGAString = 0;
 14293  002186  0E00               	movlw	0
 14294  002188  6E45               	movwf	_IsItGGAString,c	;volatile
 14295                           
 14296                           ;GPS.c: 321: IsItRMCString = 0;
 14297  00218A  0E00               	movlw	0
 14298  00218C  6E44               	movwf	_IsItRMCString,c	;volatile
 14299                           
 14300                           ;GPS.c: 322: CommaCounter_GGA = 0;
 14301  00218E  0E00               	movlw	0
 14302  002190  6E46               	movwf	_CommaCounter_GGA,c
 14303                           
 14304                           ;GPS.c: 323: CommaCounter_RMC = 0;
 14305  002192  0E00               	movlw	0
 14306  002194  6E43               	movwf	_CommaCounter_RMC,c
 14307  002196                     i2l7943:
 14308                           
 14309                           ;GPS.c: 324: }
 14310                           ;GPS.c: 327: if(IsItGGAString == 1)
 14311  002196  0445               	decf	_IsItGGAString,w,c	;volatile
 14312  002198  A4D8               	btfss	status,2,c
 14313  00219A  D01A               	goto	i2l7955
 14314                           
 14315                           ;GPS.c: 328: {
 14316                           ;GPS.c: 329: if(received_char == ',' )
 14317  00219C  0E2C               	movlw	44
 14318  00219E  1801               	xorwf	tratamento_uart@received_char,w,c
 14319  0021A0  A4D8               	btfss	status,2,c
 14320  0021A2  D00B               	goto	i2l7951
 14321                           
 14322                           ;GPS.c: 330: {
 14323                           ;GPS.c: 331: GGA_Pointers[CommaCounter_GGA++] = GGA_Index;
 14324  0021A4  5046               	movf	_CommaCounter_GGA,w,c
 14325  0021A6  0D01               	mullw	1
 14326  0021A8  0EBA               	movlw	low _GGA_Pointers
 14327  0021AA  24F3               	addwf	prodl,w,c
 14328  0021AC  6ED9               	movwf	fsr2l,c
 14329  0021AE  0E01               	movlw	high _GGA_Pointers
 14330  0021B0  20F4               	addwfc	prodh,w,c
 14331  0021B2  6EDA               	movwf	fsr2h,c
 14332  0021B4  C03C  FFDF         	movff	_GGA_Index,indf2	;volatile
 14333  0021B8  2A46               	incf	_CommaCounter_GGA,f,c
 14334  0021BA                     i2l7951:
 14335                           
 14336                           ;GPS.c: 332: }
 14337                           ;GPS.c: 333: GGA_Buffer[GGA_Index++] = received_char;
 14338  0021BA  0E00               	movlw	low _GGA_Buffer
 14339  0021BC  243C               	addwf	_GGA_Index,w,c	;volatile
 14340  0021BE  6ED9               	movwf	fsr2l,c
 14341  0021C0  0E01               	movlw	high _GGA_Buffer
 14342  0021C2  203D               	addwfc	_GGA_Index+1,w,c	;volatile
 14343  0021C4  6EDA               	movwf	fsr2h,c
 14344  0021C6  C001  FFDF         	movff	tratamento_uart@received_char,indf2
 14345  0021CA  4A3C               	infsnz	_GGA_Index,f,c	;volatile
 14346  0021CC  2A3D               	incf	_GGA_Index+1,f,c	;volatile
 14347                           
 14348                           ;GPS.c: 334: }
 14349  0021CE  D01B               	goto	i2l7963
 14350  0021D0                     i2l7955:
 14351                           
 14352                           ;GPS.c: 335: else if(GGA_CODE[0] == 'G' && GGA_CODE[1] == 'G' && GGA_CODE[2] == 'A'){
 14353  0021D0  0E47               	movlw	71
 14354  0021D2  1835               	xorwf	_GGA_CODE,w,c
 14355  0021D4  A4D8               	btfss	status,2,c
 14356  0021D6  D011               	goto	i2l213
 14357  0021D8  0E47               	movlw	71
 14358  0021DA  1836               	xorwf	_GGA_CODE+1,w,c
 14359  0021DC  A4D8               	btfss	status,2,c
 14360  0021DE  D00D               	goto	i2l213
 14361  0021E0  0E41               	movlw	65
 14362  0021E2  1837               	xorwf	_GGA_CODE+2,w,c
 14363  0021E4  A4D8               	btfss	status,2,c
 14364  0021E6  D009               	goto	i2l213
 14365                           
 14366                           ;GPS.c: 336: IsItGGAString = 1;
 14367  0021E8  0E01               	movlw	1
 14368  0021EA  6E45               	movwf	_IsItGGAString,c	;volatile
 14369                           
 14370                           ;GPS.c: 337: GGA_CODE[0] = 0;
 14371  0021EC  0E00               	movlw	0
 14372  0021EE  6E35               	movwf	_GGA_CODE,c
 14373                           
 14374                           ;GPS.c: 338: GGA_CODE[1] = 0;
 14375  0021F0  0E00               	movlw	0
 14376  0021F2  6E36               	movwf	_GGA_CODE+1,c
 14377                           
 14378                           ;GPS.c: 339: GGA_CODE[2] = 0;
 14379  0021F4  0E00               	movlw	0
 14380  0021F6  6E37               	movwf	_GGA_CODE+2,c
 14381                           
 14382                           ;GPS.c: 340: }
 14383  0021F8  D006               	goto	i2l7963
 14384  0021FA                     i2l213:
 14385                           
 14386                           ;GPS.c: 341: else{
 14387                           ;GPS.c: 342: GGA_CODE[0] = GGA_CODE[1];
 14388  0021FA  C036  F035         	movff	_GGA_CODE+1,_GGA_CODE
 14389                           
 14390                           ;GPS.c: 343: GGA_CODE[1] = GGA_CODE[2];
 14391  0021FE  C037  F036         	movff	_GGA_CODE+2,_GGA_CODE+1
 14392                           
 14393                           ;GPS.c: 344: GGA_CODE[2] = received_char;
 14394  002202  C001  F037         	movff	tratamento_uart@received_char,_GGA_CODE+2
 14395  002206                     i2l7963:
 14396                           
 14397                           ;GPS.c: 345: }
 14398                           ;GPS.c: 349: if(IsItRMCString == 1)
 14399  002206  0444               	decf	_IsItRMCString,w,c	;volatile
 14400  002208  A4D8               	btfss	status,2,c
 14401  00220A  D01A               	goto	i2l7975
 14402                           
 14403                           ;GPS.c: 350: {
 14404                           ;GPS.c: 351: if(received_char == ',' )
 14405  00220C  0E2C               	movlw	44
 14406  00220E  1801               	xorwf	tratamento_uart@received_char,w,c
 14407  002210  A4D8               	btfss	status,2,c
 14408  002212  D00B               	goto	i2l7971
 14409                           
 14410                           ;GPS.c: 352: {
 14411                           ;GPS.c: 353: RMC_Pointers[CommaCounter_RMC++] = RMC_Index;
 14412  002214  5043               	movf	_CommaCounter_RMC,w,c
 14413  002216  0D01               	mullw	1
 14414  002218  0EAE               	movlw	low _RMC_Pointers
 14415  00221A  24F3               	addwf	prodl,w,c
 14416  00221C  6ED9               	movwf	fsr2l,c
 14417  00221E  0E00               	movlw	high _RMC_Pointers
 14418  002220  20F4               	addwfc	prodh,w,c
 14419  002222  6EDA               	movwf	fsr2h,c
 14420  002224  C03A  FFDF         	movff	_RMC_Index,indf2	;volatile
 14421  002228  2A43               	incf	_CommaCounter_RMC,f,c
 14422  00222A                     i2l7971:
 14423                           
 14424                           ;GPS.c: 354: }
 14425                           ;GPS.c: 355: RMC_Buffer[RMC_Index++] = received_char;
 14426  00222A  0E00               	movlw	low _RMC_Buffer
 14427  00222C  243A               	addwf	_RMC_Index,w,c	;volatile
 14428  00222E  6ED9               	movwf	fsr2l,c
 14429  002230  0E02               	movlw	high _RMC_Buffer
 14430  002232  203B               	addwfc	_RMC_Index+1,w,c	;volatile
 14431  002234  6EDA               	movwf	fsr2h,c
 14432  002236  C001  FFDF         	movff	tratamento_uart@received_char,indf2
 14433  00223A  4A3A               	infsnz	_RMC_Index,f,c	;volatile
 14434  00223C  2A3B               	incf	_RMC_Index+1,f,c	;volatile
 14435                           
 14436                           ;GPS.c: 356: }
 14437  00223E  0012               	return	
 14438  002240                     i2l7975:
 14439                           
 14440                           ;GPS.c: 357: else if(RMC_CODE[0] == 'R' && RMC_CODE[1] == 'M' && RMC_CODE[2] == 'C'){
 14441  002240  0E52               	movlw	82
 14442  002242  0100               	movlb	0	; () banked
 14443  002244  19D1               	xorwf	_RMC_CODE& (0+255),w,b
 14444  002246  A4D8               	btfss	status,2,c
 14445  002248  D016               	goto	i2l218
 14446                           
 14447                           ; BSR set to: 0
 14448  00224A  0E4D               	movlw	77
 14449  00224C  0100               	movlb	0	; () banked
 14450  00224E  19D2               	xorwf	(_RMC_CODE+1)& (0+255),w,b
 14451  002250  A4D8               	btfss	status,2,c
 14452  002252  D011               	goto	i2l218
 14453                           
 14454                           ; BSR set to: 0
 14455  002254  0E43               	movlw	67
 14456  002256  0100               	movlb	0	; () banked
 14457  002258  19D3               	xorwf	(_RMC_CODE+2)& (0+255),w,b
 14458  00225A  A4D8               	btfss	status,2,c
 14459  00225C  D00C               	goto	i2l218
 14460                           
 14461                           ; BSR set to: 0
 14462                           ;GPS.c: 358: IsItRMCString = 1;
 14463  00225E  0E01               	movlw	1
 14464  002260  6E44               	movwf	_IsItRMCString,c	;volatile
 14465                           
 14466                           ;GPS.c: 359: RMC_CODE[0] = 0;
 14467  002262  0E00               	movlw	0
 14468  002264  0100               	movlb	0	; () banked
 14469  002266  6FD1               	movwf	_RMC_CODE& (0+255),b
 14470                           
 14471                           ;GPS.c: 360: RMC_CODE[1] = 0;
 14472  002268  0E00               	movlw	0
 14473  00226A  0100               	movlb	0	; () banked
 14474  00226C  6FD2               	movwf	(_RMC_CODE+1)& (0+255),b
 14475                           
 14476                           ;GPS.c: 361: RMC_CODE[2] = 0;
 14477  00226E  0E00               	movlw	0
 14478  002270  0100               	movlb	0	; () banked
 14479  002272  6FD3               	movwf	(_RMC_CODE+2)& (0+255),b
 14480                           
 14481                           ;GPS.c: 362: }
 14482  002274  0012               	return	
 14483  002276                     i2l218:
 14484                           
 14485                           ; BSR set to: 0
 14486                           ;GPS.c: 363: else{
 14487                           ;GPS.c: 364: RMC_CODE[0] = RMC_CODE[1];
 14488  002276  C0D2  F0D1         	movff	_RMC_CODE+1,_RMC_CODE
 14489                           
 14490                           ;GPS.c: 365: RMC_CODE[1] = RMC_CODE[2];
 14491  00227A  C0D3  F0D2         	movff	_RMC_CODE+2,_RMC_CODE+1
 14492                           
 14493                           ;GPS.c: 366: RMC_CODE[2] = received_char;
 14494  00227E  C001  F0D3         	movff	tratamento_uart@received_char,_RMC_CODE+2
 14495                           
 14496                           ; BSR set to: 0
 14497  002282  0012               	return	
 14498  002284                     __end_of_tratamento_uart:
 14499                           	opt stack 0
 14500                           tosu	equ	0xFFF
 14501                           tosh	equ	0xFFE
 14502                           tosl	equ	0xFFD
 14503                           pclatu	equ	0xFFB
 14504                           pclath	equ	0xFFA
 14505                           pcl	equ	0xFF9
 14506                           tblptru	equ	0xFF8
 14507                           tblptrh	equ	0xFF7
 14508                           tblptrl	equ	0xFF6
 14509                           tablat	equ	0xFF5
 14510                           prodh	equ	0xFF4
 14511                           prodl	equ	0xFF3
 14512                           intcon	equ	0xFF2
 14513                           intcon2	equ	0xFF1
 14514                           intcon3	equ	0xFF0
 14515                           indf0	equ	0xFEF
 14516                           postinc0	equ	0xFEE
 14517                           fsr0h	equ	0xFEA
 14518                           fsr0l	equ	0xFE9
 14519                           wreg	equ	0xFE8
 14520                           indf1	equ	0xFE7
 14521                           postinc1	equ	0xFE6
 14522                           postdec1	equ	0xFE5
 14523                           plusw1	equ	0xFE3
 14524                           fsr1h	equ	0xFE2
 14525                           fsr1l	equ	0xFE1
 14526                           indf2	equ	0xFDF
 14527                           postinc2	equ	0xFDE
 14528                           postdec2	equ	0xFDD
 14529                           plusw2	equ	0xFDB
 14530                           fsr2h	equ	0xFDA
 14531                           fsr2l	equ	0xFD9
 14532                           status	equ	0xFD8
 14533                           
 14534 ;; *************** function _recebe_dado_uart *****************
 14535 ;; Defined at:
 14536 ;;		line 138 in file "bibliotecas/uart.c"
 14537 ;; Parameters:    Size  Location     Type
 14538 ;;		None
 14539 ;; Auto vars:     Size  Location     Type
 14540 ;;		None
 14541 ;; Return value:  Size  Location     Type
 14542 ;;                  1    wreg      unsigned char 
 14543 ;; Registers used:
 14544 ;;		wreg, status,2
 14545 ;; Tracked objects:
 14546 ;;		On entry : 0/0
 14547 ;;		On exit  : 0/0
 14548 ;;		Unchanged: 0/0
 14549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14550 ;;      Params:         0       0       0       0       0       0       0       0       0
 14551 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14552 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14553 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14554 ;;Total ram usage:        0 bytes
 14555 ;; Hardware stack levels used:    1
 14556 ;; This function calls:
 14557 ;;		Nothing
 14558 ;; This function is called by:
 14559 ;;		_isr
 14560 ;;		_recebe_string_uart
 14561 ;; This function uses a non-reentrant model
 14562 ;;
 14563                           
 14564                           	psect	text69
 14565  0035B0                     __ptext69:
 14566                           	opt stack 0
 14567  0035B0                     _recebe_dado_uart:
 14568                           	opt stack 22
 14569  0035B0                     i2l1222:
 14570  0035B0  AA9E               	btfss	3998,5,c	;volatile
 14571  0035B2  D7FE               	goto	i2l1222
 14572                           
 14573                           ;uart.c: 141: if(RCSTAbits.OERR)
 14574  0035B4  A2AB               	btfss	4011,1,c	;volatile
 14575  0035B6  D003               	goto	i2l7935
 14576                           
 14577                           ;uart.c: 142: {
 14578                           ;uart.c: 143: CREN = 0;
 14579  0035B8  98AB               	bcf	4011,4,c	;volatile
 14580                           
 14581                           ;uart.c: 144: __nop();
 14582  0035BA  F000               	nop	
 14583                           
 14584                           ;uart.c: 145: CREN=1;
 14585  0035BC  88AB               	bsf	4011,4,c	;volatile
 14586  0035BE                     i2l7935:
 14587                           
 14588                           ;uart.c: 146: }
 14589                           ;uart.c: 147: return(RCREG);
 14590  0035BE  50AE               	movf	4014,w,c	;volatile
 14591  0035C0  0012               	return	
 14592  0035C2                     __end_of_recebe_dado_uart:
 14593                           	opt stack 0
 14594                           tosu	equ	0xFFF
 14595                           tosh	equ	0xFFE
 14596                           tosl	equ	0xFFD
 14597                           pclatu	equ	0xFFB
 14598                           pclath	equ	0xFFA
 14599                           pcl	equ	0xFF9
 14600                           tblptru	equ	0xFF8
 14601                           tblptrh	equ	0xFF7
 14602                           tblptrl	equ	0xFF6
 14603                           tablat	equ	0xFF5
 14604                           prodh	equ	0xFF4
 14605                           prodl	equ	0xFF3
 14606                           intcon	equ	0xFF2
 14607                           intcon2	equ	0xFF1
 14608                           intcon3	equ	0xFF0
 14609                           indf0	equ	0xFEF
 14610                           postinc0	equ	0xFEE
 14611                           fsr0h	equ	0xFEA
 14612                           fsr0l	equ	0xFE9
 14613                           wreg	equ	0xFE8
 14614                           indf1	equ	0xFE7
 14615                           postinc1	equ	0xFE6
 14616                           postdec1	equ	0xFE5
 14617                           plusw1	equ	0xFE3
 14618                           fsr1h	equ	0xFE2
 14619                           fsr1l	equ	0xFE1
 14620                           indf2	equ	0xFDF
 14621                           postinc2	equ	0xFDE
 14622                           postdec2	equ	0xFDD
 14623                           plusw2	equ	0xFDB
 14624                           fsr2h	equ	0xFDA
 14625                           fsr2l	equ	0xFD9
 14626                           status	equ	0xFD8
 14627                           tosu	equ	0xFFF
 14628                           tosh	equ	0xFFE
 14629                           tosl	equ	0xFFD
 14630                           pclatu	equ	0xFFB
 14631                           pclath	equ	0xFFA
 14632                           pcl	equ	0xFF9
 14633                           tblptru	equ	0xFF8
 14634                           tblptrh	equ	0xFF7
 14635                           tblptrl	equ	0xFF6
 14636                           tablat	equ	0xFF5
 14637                           prodh	equ	0xFF4
 14638                           prodl	equ	0xFF3
 14639                           intcon	equ	0xFF2
 14640                           intcon2	equ	0xFF1
 14641                           intcon3	equ	0xFF0
 14642                           indf0	equ	0xFEF
 14643                           postinc0	equ	0xFEE
 14644                           fsr0h	equ	0xFEA
 14645                           fsr0l	equ	0xFE9
 14646                           wreg	equ	0xFE8
 14647                           indf1	equ	0xFE7
 14648                           postinc1	equ	0xFE6
 14649                           postdec1	equ	0xFE5
 14650                           plusw1	equ	0xFE3
 14651                           fsr1h	equ	0xFE2
 14652                           fsr1l	equ	0xFE1
 14653                           indf2	equ	0xFDF
 14654                           postinc2	equ	0xFDE
 14655                           postdec2	equ	0xFDD
 14656                           plusw2	equ	0xFDB
 14657                           fsr2h	equ	0xFDA
 14658                           fsr2l	equ	0xFD9
 14659                           status	equ	0xFD8
 14660                           
 14661                           	psect	text70
 14662  000000                     __ptext70:
 14663                           	opt stack 0
 14664                           tosu	equ	0xFFF
 14665                           tosh	equ	0xFFE
 14666                           tosl	equ	0xFFD
 14667                           pclatu	equ	0xFFB
 14668                           pclath	equ	0xFFA
 14669                           pcl	equ	0xFF9
 14670                           tblptru	equ	0xFF8
 14671                           tblptrh	equ	0xFF7
 14672                           tblptrl	equ	0xFF6
 14673                           tablat	equ	0xFF5
 14674                           prodh	equ	0xFF4
 14675                           prodl	equ	0xFF3
 14676                           intcon	equ	0xFF2
 14677                           intcon2	equ	0xFF1
 14678                           intcon3	equ	0xFF0
 14679                           indf0	equ	0xFEF
 14680                           postinc0	equ	0xFEE
 14681                           fsr0h	equ	0xFEA
 14682                           fsr0l	equ	0xFE9
 14683                           wreg	equ	0xFE8
 14684                           indf1	equ	0xFE7
 14685                           postinc1	equ	0xFE6
 14686                           postdec1	equ	0xFE5
 14687                           plusw1	equ	0xFE3
 14688                           fsr1h	equ	0xFE2
 14689                           fsr1l	equ	0xFE1
 14690                           indf2	equ	0xFDF
 14691                           postinc2	equ	0xFDE
 14692                           postdec2	equ	0xFDD
 14693                           plusw2	equ	0xFDB
 14694                           fsr2h	equ	0xFDA
 14695                           fsr2l	equ	0xFD9
 14696                           status	equ	0xFD8
 14697                           
 14698                           	psect	rparam
 14699  0000                     tosu	equ	0xFFF
 14700                           tosh	equ	0xFFE
 14701                           tosl	equ	0xFFD
 14702                           pclatu	equ	0xFFB
 14703                           pclath	equ	0xFFA
 14704                           pcl	equ	0xFF9
 14705                           tblptru	equ	0xFF8
 14706                           tblptrh	equ	0xFF7
 14707                           tblptrl	equ	0xFF6
 14708                           tablat	equ	0xFF5
 14709                           prodh	equ	0xFF4
 14710                           prodl	equ	0xFF3
 14711                           intcon	equ	0xFF2
 14712                           intcon2	equ	0xFF1
 14713                           intcon3	equ	0xFF0
 14714                           indf0	equ	0xFEF
 14715                           postinc0	equ	0xFEE
 14716                           fsr0h	equ	0xFEA
 14717                           fsr0l	equ	0xFE9
 14718                           wreg	equ	0xFE8
 14719                           indf1	equ	0xFE7
 14720                           postinc1	equ	0xFE6
 14721                           postdec1	equ	0xFE5
 14722                           plusw1	equ	0xFE3
 14723                           fsr1h	equ	0xFE2
 14724                           fsr1l	equ	0xFE1
 14725                           indf2	equ	0xFDF
 14726                           postinc2	equ	0xFDE
 14727                           postdec2	equ	0xFDD
 14728                           plusw2	equ	0xFDB
 14729                           fsr2h	equ	0xFDA
 14730                           fsr2l	equ	0xFD9
 14731                           status	equ	0xFD8
 14732                           
 14733                           	psect	temp
 14734  00004A                     btemp:
 14735                           	opt stack 0
 14736  00004A                     	ds	1
 14737  0000                     int$flags	set	btemp
 14738                           tosu	equ	0xFFF
 14739                           tosh	equ	0xFFE
 14740                           tosl	equ	0xFFD
 14741                           pclatu	equ	0xFFB
 14742                           pclath	equ	0xFFA
 14743                           pcl	equ	0xFF9
 14744                           tblptru	equ	0xFF8
 14745                           tblptrh	equ	0xFF7
 14746                           tblptrl	equ	0xFF6
 14747                           tablat	equ	0xFF5
 14748                           prodh	equ	0xFF4
 14749                           prodl	equ	0xFF3
 14750                           intcon	equ	0xFF2
 14751                           intcon2	equ	0xFF1
 14752                           intcon3	equ	0xFF0
 14753                           indf0	equ	0xFEF
 14754                           postinc0	equ	0xFEE
 14755                           fsr0h	equ	0xFEA
 14756                           fsr0l	equ	0xFE9
 14757                           wreg	equ	0xFE8
 14758                           indf1	equ	0xFE7
 14759                           postinc1	equ	0xFE6
 14760                           postdec1	equ	0xFE5
 14761                           plusw1	equ	0xFE3
 14762                           fsr1h	equ	0xFE2
 14763                           fsr1l	equ	0xFE1
 14764                           indf2	equ	0xFDF
 14765                           postinc2	equ	0xFDE
 14766                           postdec2	equ	0xFDD
 14767                           plusw2	equ	0xFDB
 14768                           fsr2h	equ	0xFDA
 14769                           fsr2l	equ	0xFD9
 14770                           status	equ	0xFD8


Data Sizes:
    Strings     242
    Constant    331
    Data        24
    BSS         902
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     52      73
    BANK0           160     78     148
    BANK1           256      0     253
    BANK2           256     25      95
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    escalonador$3379	PTR FTN()void  size(2) Largest target is 1
		 -> GPS(), 

    rd	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    memset@p1	PTR void  size(2) Largest target is 15
		 -> GPS@GPS_Buffer(BANK2[15]), 

    memset@p	PTR unsigned char  size(2) Largest target is 15
		 -> GPS@GPS_Buffer(BANK2[15]), 

    utoa@buf	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    atol@s	PTR const unsigned char  size(2) Largest target is 15
		 -> get_date@date_buffer(BANK0[6]), get_gpstime@Time_Buffer(COMRAM[15]), 

    atof@s	PTR const unsigned char  size(2) Largest target is 15
		 -> get_sv@date_buffer(COMRAM[15]), get_altitude@Alt_Buffer(COMRAM[12]), get_longitude@Long_Buffer(BANK0[15]), get_latitude@Lat_Buffer(BANK0[15]), 

    strtod@s	PTR const unsigned char  size(2) Largest target is 15
		 -> get_sv@date_buffer(COMRAM[15]), get_altitude@Alt_Buffer(COMRAM[12]), get_longitude@Long_Buffer(BANK0[15]), get_latitude@Lat_Buffer(BANK0[15]), 

    strtod@res	PTR PTR const unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_5(CODE[9]), STR_4(CODE[6]), STR_3(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 15
		 -> Data_Buffer(BANK1[15]), GPS@GPS_Buffer(BANK2[15]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    pf_readdir@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(COMRAM[12]), 

    pf_opendir@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(COMRAM[12]), 

    dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(COMRAM[12]), 

    follow_path@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(COMRAM[12]), 

    get_fileinfo@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(COMRAM[12]), 

    create_name@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(COMRAM[12]), 

    dir_read@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(COMRAM[12]), 

    dir_find@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(COMRAM[12]), 

    dir_next@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(COMRAM[12]), 

    S1991$fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(COMRAM[12]), 

    dir_rewind@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(COMRAM[12]), 

    FatFs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(COMRAM[42]), 

    escreve_frase_ram_lcd@buffer	PTR unsigned char  size(2) Largest target is 2047
		 -> escreve_inteiro_lcd@texto(BANK0[7]), STR_24(CODE[3]), STR_23(CODE[8]), STR_22(CODE[14]), 
		 -> STR_21(CODE[13]), STR_20(CODE[9]), STR_19(CODE[14]), leitura_chave@pos_ignicao_on(COMRAM[17]), 
		 -> leitura_chave@pos_ignicao_crank(COMRAM[17]), leitura_chave@pos_ignicao_off(COMRAM[17]), STR_18(CODE[17]), STR_17(CODE[16]), 
		 -> STR_16(CODE[14]), STR_15(CODE[14]), STR_14(CODE[14]), STR_13(CODE[14]), 
		 -> STR_12(CODE[13]), STR_11(CODE[17]), STR_8(CODE[17]), STR_7(CODE[15]), 
		 -> STR_6(CODE[14]), RAM(DATA[2047]), GPS@GPS_Buffer(BANK2[15]), STR_2(CODE[6]), 
		 -> STR_1(CODE[5]), mensagem_inicial@msg_dois(BANK0[17]), mensagem_inicial@msg_linha_um(BANK0[17]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    sp__memset	PTR void  size(2) Largest target is 15
		 -> GPS@GPS_Buffer(BANK2[15]), 

    p_tarefas	PTR FTN()void [2] size(2) Largest target is 1
		 -> GPS(), 


Critical Paths under _main in COMRAM

    _mensagem_inicial->_posicao_cursor_lcd
    _leitura_continua_adc->_leitura_adc
    _init_lcd->_escreve_cmd_lcd
    _config_timer_zero->_write_timer_zero
    _inicializa_uart->_configura_baudrate_uart
    _configura_baudrate_uart->___aldiv
    _GPS->_get_latitude
    _GPS->_get_longitude
    _sprintf->___ftmul
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    _atof->_strtod
    _strtod->___ftmul
    ___altoft->___ftpack
    _get_date->_atol
    _posicao_cursor_lcd->_endereco_cursor_lcd
    _endereco_cursor_lcd->_delay
    _escreve_cmd_lcd->_delay
    _atol->___lmul
    _escreve_inteiro_lcd->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _escreve_frase_ram_lcd->_escreve_caractere_lcd
    _escreve_caractere_lcd->_delay
    _convert_to_degrees->___ftmul
    ___fttol->___ftmul
    ___ftneg->___ftmul
    ___ftmul->___wmul
    ___ftdiv->___ftpack
    ___ftadd->___ftmul
    ___awtoft->___ftpack
    _controle_shrc->_envia_dados_shrc

Critical Paths under _isr in COMRAM

    _isr->i2_write_timer_zero

Critical Paths under _main in BANK0

    _main->_escalonador
    _escalonador->_GPS
    _GPS->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___ftsub->___ftadd
    _get_longitude->_atof
    _get_latitude->_atof
    _atof->_strtod
    _strtod->___ftneg
    _convert_to_degrees->___ftadd
    _convert_to_degrees->___fttol
    ___fttol->_scale
    ___ftneg->___ftmul
    ___ftadd->_fround

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _escalonador->_GPS

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  145962
                      _controle_shrc
                        _escalonador
                    _inicializa_shrc
                 _inicializa_tarefas
                    _inicializa_uart
                      _init_hardware
                           _init_lcd
             _leitura_chaves_sistema
               _leitura_continua_adc
                   _mensagem_inicial
 ---------------------------------------------------------------------------------
 (1) _mensagem_inicial                                    36    36      0    6005
                                             27 COMRAM     2     2      0
                                              0 BANK0     34    34      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _leitura_continua_adc                                 8     8      0     312
                                             28 COMRAM     8     8      0
                        _leitura_adc
 ---------------------------------------------------------------------------------
 (2) _leitura_adc                                          7     5      2      22
                                             21 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _leitura_chaves_sistema                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0     613
                                             24 COMRAM     1     1      0
                              _delay
                    _escreve_cmd_lcd
 ---------------------------------------------------------------------------------
 (1) _init_hardware                                        0     0      0     171
                  _config_timer_dois
                  _config_timer_zero
                     _init_interrupt
                     _init_oscilador
                         _init_ports
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_oscilador                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _config_timer_zero                                    0     0      0     171
                   _write_timer_zero
 ---------------------------------------------------------------------------------
 (3) _write_timer_zero                                     4     2      2     171
                                             21 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _config_timer_dois                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_uart                                      0     0      0     776
            _configura_baudrate_uart
 ---------------------------------------------------------------------------------
 (2) _configura_baudrate_uart                             14    10      4     776
                                             35 COMRAM    14    10      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     556
                                             21 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _inicializa_tarefas                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_shrc                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _escalonador                                          3     3      0  138040
                                             75 BANK0      3     3      0
                                _GPS *
 ---------------------------------------------------------------------------------
 (2) _GPS                                                 68    68      0  137817
                                             73 BANK0      2     2      0
                                              0 BANK2     25    25      0
                 _convert_to_degrees
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                _escreve_inteiro_lcd
                           _get_date
                       _get_latitude
                      _get_longitude
                             _memset
                 _posicao_cursor_lcd
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             47    37     10   61316
                                             34 BANK0     39    29     10
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                               10     7      3   13727
                                              6 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _fround                                              13    10      3   13448
                                              6 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    3102
                                             35 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    1819
                                             21 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1985
                                             27 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         15     9      6     608
                                             21 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          12     6      6     827
                                             21 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2775
                                             29 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8    1310
                                             34 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8    1435
                                             21 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    5069
                                             28 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     599
                                             21 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (3) _get_longitude                                       25    22      3   17906
                                             51 COMRAM     1     1      0
                                             23 BANK0     24    21      3
                               _atof
 ---------------------------------------------------------------------------------
 (3) _get_latitude                                        25    22      3   17906
                                             51 COMRAM     1     1      0
                                             23 BANK0     24    21      3
                               _atof
 ---------------------------------------------------------------------------------
 (4) _atof                                                 3     0      3   17589
                                             20 BANK0      3     0      3
                             _strtod
 ---------------------------------------------------------------------------------
 (5) _strtod                                              12     8      4   17250
                                             50 COMRAM     1     1      0
                                              9 BANK0     11     7      4
                           ___altoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                             ___lmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (6) _isspace                                              3     3      0     130
                                             21 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6    1122
                                             21 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (6) ___altoft                                            10     6      4    2877
                                             29 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _get_date                                            21    17      4    7859
                                             47 COMRAM     4     0      4
                                              0 BANK0     17    17      0
                               _atol
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (2) _posicao_cursor_lcd                                   3     2      1    2843
                                             24 COMRAM     3     2      1
                _endereco_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _endereco_cursor_lcd                                  1     1      0     353
                                             23 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _escreve_cmd_lcd                                      1     1      0     477
                                             23 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _atol                                                14    10      4    1551
                                             33 COMRAM    14    10      4
                             ___lmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                             21 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     828
                                             21 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) _escreve_inteiro_lcd                                  9     7      2    6489
                                             45 COMRAM     2     0      2
                                              0 BANK0      7     7      0
              _escreve_frase_ram_lcd
                               _itoa
 ---------------------------------------------------------------------------------
 (4) _itoa                                                 8     2      6    3533
                                             37 COMRAM     8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (5) _utoa                                                 9     3      6    2838
                                             28 COMRAM     9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4    1002
                                             21 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4    1165
                                             21 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _escreve_frase_ram_lcd                                2     0      2    2605
                                             24 COMRAM     2     0      2
              _escreve_caractere_lcd
 ---------------------------------------------------------------------------------
 (3) _escreve_caractere_lcd                                1     1      0     384
                                             23 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                2     2      0     136
                                             21 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _convert_to_degrees                                  17    14      3   19389
                                             28 BANK0     14    11      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     987
                                             13 BANK0     15    11      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     373
                                              6 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    6124
                                             41 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             15     9      6    3746
                                             29 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    4705
                                             16 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    3037
                                             29 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2596
                                             21 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _controle_shrc                                        0     0      0      45
                   _ativa_latch_shrc
                   _envia_dados_shrc
 ---------------------------------------------------------------------------------
 (2) _envia_dados_shrc                                     2     2      0      45
                                             21 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _ativa_latch_shrc                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                 17    17      0     337
                                              4 COMRAM    17    17      0
                   _recebe_dado_uart
                    _tratamento_uart
                 i2_write_timer_zero
 ---------------------------------------------------------------------------------
 (9) i2_write_timer_zero                                   4     2      2      93
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) _tratamento_uart                                      1     1      0     154
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) _recebe_dado_uart                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _controle_shrc
     _ativa_latch_shrc
     _envia_dados_shrc
   _escalonador
     _GPS *
       _convert_to_degrees
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___ftpack
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___fttol
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _escreve_cmd_lcd
         _delay
       _escreve_frase_ram_lcd
         _escreve_caractere_lcd
           _delay
       _escreve_inteiro_lcd
         _escreve_frase_ram_lcd
           _escreve_caractere_lcd
             _delay
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
       _get_date
         _atol
           ___lmul
           _isdigit
         _escreve_cmd_lcd
           _delay
         _escreve_frase_ram_lcd
           _escreve_caractere_lcd
             _delay
         _posicao_cursor_lcd
           _endereco_cursor_lcd
             _delay
       _get_latitude
         _atof
           _strtod
             ___altoft
               ___ftpack
             ___ftdiv
               ___ftpack
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lmul
             _isdigit
             _isspace
       _get_longitude
         _atof
           _strtod
             ___altoft
               ___ftpack
             ___ftdiv
               ___ftpack
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lmul
             _isdigit
             _isspace
       _memset
       _posicao_cursor_lcd
         _endereco_cursor_lcd
           _delay
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _inicializa_shrc
   _inicializa_tarefas
   _inicializa_uart
     _configura_baudrate_uart
       ___aldiv
   _init_hardware
     _config_timer_dois
     _config_timer_zero
       _write_timer_zero
     _init_interrupt
     _init_oscilador
     _init_ports
   _init_lcd
     _delay
     _escreve_cmd_lcd
       _delay
   _leitura_chaves_sistema
   _leitura_continua_adc
     _leitura_adc
   _mensagem_inicial
     _escreve_cmd_lcd
       _delay
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay

 _isr (ROOT)
   _recebe_dado_uart
   _tratamento_uart
   i2_write_timer_zero

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     200      21       25.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     19      5F       9       37.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      FD       7       98.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     4E      94       5       92.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     34      49       1       77.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     239      20        0.0%
DATA                 0      0     439       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Feb 03 21:08:39 2022

        __end_of_mensagem_inicial 2838                      ___altoft@exp 0026  
                               _s 0041                    ?_get_longitude 0077  
          __size_of_controle_shrc 000C                       _SSPSTATbits 000FC7  
                   ___altoft@sign 0027                  ??_init_interrupt 0016  
    __size_of_escreve_inteiro_lcd 003C                      ___awdiv@sign 0021  
                     __CFG_BOR$ON 000000                                _rd 00D6  
             ___wmul@multiplicand 0026                       __CFG_BORV$3 000000  
           get_latitude@_latitude 0089                     get_date@_date 0068  
                    ?_escalonador 0001                      ___ftadd@exp1 007B  
                    ___ftadd@exp2 007A                  ?_inicializa_shrc 0001  
                ?_inicializa_uart 0001                      ___ftadd@sign 0079  
                   get_date@index 006E                               l710 2DFE  
                             l359 3250                               l711 2E12  
                             l703 2DDE                               l455 3020  
                             l712 2E14                               l713 2E1C  
                             l705 2DE8                               l642 34AE  
                             l714 2E1E                               l715 2E26  
                             l707 2DF2                               l459 3022  
                             l644 34BC                               l716 2E28  
                             l660 2B96                               l652 2B62  
                             l717 2E30                               l709 2DFC  
                             l661 2B98                               l718 2E32  
                             l662 2BA0                               l654 2B6C  
                             l663 2BA2                               l664 2BAA  
                             l656 2B76                               l680 2F5C  
                             l665 2BAC                               l681 2F5E  
                             l666 2BB4                               l658 2B80  
                             l682 2F66                               l674 2F32  
                             l667 2BB6                               l659 2B82  
                             l683 2F68                               l684 2F70  
                             l676 2F3C                               l685 2F72  
                             l693 2EBE                               l686 2F7A  
                             l678 2F46                               l687 2F7C  
                             l679 2F48                               _GPS 1676  
                             _PCL 000FF9                               _PR2 000FCB  
                             _E_W 00DA                               _N_S 00DB  
                ??_init_oscilador 0016                               _isr 0008  
               ??_tratamento_uart 0001                               _txt 01A6  
                    ___awmod@sign 001B                               prod 000FF3  
                             tosl 000FFD                               wreg 000FE8  
       convert_to_degrees@dec_deg 0082                      __CFG_FOSC$HS 000000  
       convert_to_degrees@decimal 0087         convert_to_degrees@degrees 0085  
                  create_name@cvt 6041         __size_of_write_timer_zero 0012  
                    __CFG_LVP$OFF 000000                              ?_GPS 0001  
                    ___ftdiv@cntr 0027           ??_escreve_frase_ram_lcd 001B  
                    ___ftdiv@sign 002C                      __CFG_WDT$OFF 000000  
                            l1324 05AA                              l1530 0A86  
                            l1528 0A7C                              l1705 1360  
                            l1529 0A24                              l1714 138A  
                            l1635 1F16                              l1732 1B0C  
                            l4061 3252                              l1725 2534  
                            l1557 0D7A                              l1733 1B34  
                            l1807 2A00                              l1583 246E  
                            l4057 3248                              l1833 2CD2  
                            l1690 1228                              l1667 2772  
                            l1843 2FDE                              l1739 1B9A  
                            l1764 33D0                              l1694 1262  
                            l4079 3278                              l1696 128A  
                            l1886 314E                              l1896 32FC  
                            l8113 1CE4                              l8115 1CE8  
                            l8109 1CDC                              l8127 1DAA  
                            l8119 1CF0                              ?_isr 0001  
                            l7711 2FF4                              l9321 34C2  
                            l9313 34B4                              l7713 2FF8  
                            l7721 3006                              l9307 34A6  
                            l7651 25C8                              l7643 259A  
                            l7715 2FFC                              l9421 20A4  
                            l9501 3124                              l9333 34FE  
                            l7661 25FC                              l7653 25CC  
                            l7637 2582                              l7717 3000  
                            l9415 2078                              l9511 3144  
                            l9503 3128                              l9343 30D4  
                            l9281 272A                              l9273 26F4  
                            l9521 32DA                              l7649 25BC  
                            l7665 260A                              l9435 20E6  
                            l9523 32DE                              l9339 30C0  
                            l9355 2D06                              l7923 1CC0  
                            l9285 2740                              l9277 2702  
                            l9613 1236                              l9445 2118  
                            l9541 2F3E                              l9357 2D12  
                            l9701 09DE                              l7669 2620  
                            l9287 275E                              l9279 270C  
                            l9375 24D0                              l9439 20FC  
                            l9527 32F2                              l9519 32D2  
                            l9289 2768                              l9641 12F0  
                            l9625 1280                              l9369 24A8  
                            l9449 212E                              l9537 2F34  
                            l9465 3496                              l9643 12FE  
                            l9635 12C2                              l9619 1270  
                            l9395 250E                              l9475 2AF2  
                            l9467 349A                              l9811 0CD2  
                            l9803 0CB0                              l9731 0AB4  
                            l9707 09FA                              l9661 13B4  
                            l9653 1346                              l9645 130C  
                            l9573 2DEA                              l9485 2B4E  
                            l9821 0D36                              l9741 0AE6  
                            l9725 0A8E                              l9901 2E6E  
                            l9671 1402                              l9655 1354  
                            l9647 1318                              l9479 2B22  
                            l9815 0D00                              l9807 0CC4  
                            l9735 0AD0                              l9903 2E76  
                            l9577 2DF4                              l9569 2DE0  
                            l9817 0D0A                              l9681 097E  
                            l9905 2E7A                              l9913 2E98  
           _escreve_caractere_lcd 2DCE                              l9499 311C  
                            l9923 2988                              l9771 0BB4  
                            l9739 0AE0                              l9763 0B8A  
                            l9691 09B0                              l9933 29C2  
                            l9837 0D9C                              l9693 09BA  
                            l9861 2C18                              l9917 2EA6  
                            l9909 2E8E                              l9783 0C04  
                            l9759 0B80                              l9695 09C0  
                            l9679 0978                              l9863 2C20  
                            l9855 2C02                              STR_1 6273  
                            STR_2 626D                              l9793 0C6C  
                            l9881 2C58                              l9873 2C40  
                            l9865 2C24                              l9849 2BF2  
                            STR_3 6267                              STR_4 6267  
                            l9971 2EF4                              l9963 2ED8  
                            l9787 0C32                              l9779 0BF8  
                            STR_5 624E                              STR_6 61F7  
                            l9789 0C40                              l9877 2C4A  
                            l9893 2E54                              STR_7 61BE  
                            STR_8 619D                              l9983 315A  
                            l9967 2EE6                              l9959 2ECA  
                            l9975 2EFA                              l9799 0C9C  
                            STR_9 623B                              l9977 2F16  
                            l9897 2E60                              l9987 3182  
                            l9995 2B64                              l9979 2F1A  
                            l9999 2B6E                    timer_dois@flag 003E  
                            _BRGH 007D62                              _T0IF 007F92  
                            _CREN 007D5C                              _LATB 000F8A  
                            _PIE1 000F9D                 _valor_leitura_adc 0180  
                            _RCIF 007CF5                              i2l77 2010  
                            u8265 302E                              u8625 1BBE  
                            u8635 1C08                              u8655 1C4A  
                            u8665 1C94                              _TMR2 000FCC  
                            _SPEN 007D5F                              _TRMT 007D61  
                            _TXEN 007D65                              _SYNC 007D64  
       convert_to_degrees@minutes 007F                              _dado 0040  
                            _flag 00D4                              _atof 3456  
                            _atol 2388                              _main 337A  
                    ___ftpack@arg 0016                              _itoa 3282  
                    ___ftpack@exp 0019                              fsr0h 000FEA  
                            fsr1h 000FE2                              indf0 000FEF  
                            fsr2h 000FDA                              fsr0l 000FE9  
                            indf1 000FE7                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                            btemp 004A                              _utoa 2980  
           get_latitude@lat_index 008E     __size_of_leitura_continua_adc 0128  
                  ??_get_latitude 0034                              prodh 000FF4  
                            prodl 000FF3      tratamento_uart@received_char 0001  
                            start 000E                     __CFG_IESO$OFF 000000  
                   disk_readp@arr 025F                      _sprintf$3378 0092  
                   __CFG_MCLRE$ON 000000                      ___ftmul@cntr 0064  
                    ___param_bank 000000                      ___ftmul@sign 0065  
                           ??_GPS 00A9                      ___fttol@exp1 007B  
                    ___fttol@lval 0077                             ??_isr 0005  
                     _Data_Buffer 01EE  __size_of_configura_baudrate_uart 012C  
                   __CFG_PLLDIV$5 000000                             l10003 2B78  
                           l10031 2BD8                             l10033 2388  
                           l10051 23CE                             l10301 1AD2  
                           l10063 242A                             l10225 32A6  
                           l10057 23D8                             l10049 23C8  
                           l10401 1F04                             l10059 241C  
                           l10403 1F10                             l10331 1B60  
                           l10421 3356                             l10501 2FAC  
                           l10341 1B88                             l10261 0EEC  
                           l11061 2638                             l10431 1836  
                           l10511 305A                             l10351 1E1E  
                           l10343 1B94                             l10335 1B70  
                           l10247 1634                             l10239 1572  
                           l10271 0FBC                             l10409 31CC  
                           l10505 2FD0                             l10513 3066  
                           l10601 0170                             l11073 26AE  
                           l11065 2642                             l10523 28F0  
                           l10371 1E7E                             l10267 0F96  
                           l10461 1908                             l10453 18DC  
                           l10357 1E3C                             l10285 119A  
                           l10701 05AE                             l11077 26DE  
                           l10463 1912                             l10391 1EDC  
                           l10295 1AA6                             l10279 10F0  
                           l10631 02C2                             l10449 18C8  
                           l10529 2920                             l10481 2C94  
                           l10713 0630                             l10641 0352  
                           l10633 02F2                             l10625 0286  
                           l10617 021E                             l10561 0042  
                           l11433 3392                             l10467 192E  
                           l10459 18F8                             l10547 1A44  
                           l10803 284C                             l10395 1EEC  
                           l10379 1EAE                             l10731 073E  
                           l10723 0716                             l10635 0308  
                           l10555 0022                             l10549 1A6C  
                           l10477 2C84                             l10725 0724  
                           l10709 05DE                             l10661 0442  
                           l10645 0378                             l10629 02AC  
                           l10733 074C                             l10573 00B0  
                           l10831 22C8                             l10479 2C90  
                           l10751 07BC                             l10743 0790  
                           l10655 03D6                             l10591 012A  
                           l10583 00DC                             l10575 00C6  
                           l11439 33A0                             l10825 2298  
                           l10809 287C                             l10489 2CC4  
                           l10497 2F9C                             l10673 0488  
                           l10585 0110                             l10569 0074  
                           l10851 235A                             l10835 22EC  
                           l10499 2FA8                             l10771 085A  
                           l10763 0802                             l10659 043C  
                           l10579 00D6                             l10781 0912  
                           l10749 07B6                             l10677 04B4  
                           l10839 2302                             l10783 0918  
                           l10767 082A                             l10695 0578  
                           l10679 04BC                             l10687 0550  
                           l10793 33E8                             l10777 0888  
                           l10697 058C                             l10689 055E  
                           l10785 092E                             l10787 094C  
                           l10797 33F8                   __end_of___aldiv 2632  
                           ?_atof 0074                             ?_atol 0022  
                           ?_main 0001                             ?_itoa 0026  
                 __end_of___awdiv 2C62                             _EEADR 000FA9  
                 __end_of___ftadd 1428                             STR_10 625F  
                           STR_20 6245                             STR_12 622E  
                           STR_21 6221                             STR_13 6213  
                           STR_14 61E9                             STR_22 61CD  
                           STR_23 6257                             STR_15 6205  
                           STR_24 627B                             STR_25 6278  
                           STR_17 61AE                             STR_18 618C  
                           STR_19 61DB                   __end_of___awmod 2EB0  
                 __end_of___ftdiv 2566                   __end_of___ftneg 33DE  
                 __end_of___lldiv 2CE4                             ?_utoa 001D  
                           u11131 11D6                             u11141 11F4  
                 __end_of___ftmul 216C                             _T0CON 000FD5  
                 ___awdiv@divisor 001E                             u12311 1AB6  
                 __end_of___llmod 2FF0                             u10811 2088  
                 __end_of___ftsub 31F6                             u10741 2490  
                 __end_of___fttol 1940                             _T2CON 000FCA  
                           u10761 24B8                             u13081 3310  
                           u12291 1A8A                             u11830 317A  
                           u10791 205C                             u12471 1812  
                           u11840 31A2                             u12720 01B6  
                           u12490 185C                             u13450 27A0  
                           u13460 27B8                             u11837 3170  
                           u12725 01AA                             u13438 269A  
                           u12495 1852                             u11847 3198  
                           u12880 05A2                    _data_buffer_32 01CE  
                           u14907 1798                             u14917 17E6  
                           u14927 233E                             u14937 325A  
                           u14947 3262                             u14867 27F8  
                           u14957 326A                             u14877 2A46  
                           u14967 3272                             u14887 2A62  
                           u14977 356A                             u14897 2A7E  
                           u14987 3572                   __end_of___lwdiv 3158  
                    ?_leitura_adc 0016                   __end_of___lwmod 3306  
 __size_of_leitura_chaves_sistema 0048                             i2l213 21FA  
                           i2l218 2276                   ___awdiv@counter 0020  
                           _RCREG 000FAE                             _RCSTA 000FAB  
                           _TMR0H 000FD7                             _TMR0L 000FD6  
                           _SPBRG 000FAF                     __CFG_USBDIV$1 000000  
                           _TRISA 000F92                             _TRISB 000F93  
                           _TRISC 000F94                             _TRISD 000F95  
                           _TRISE 000F96                             _TXREG 000FAD  
                           _TXSTA 000FAC                             _FatFs 0038  
          __end_ofcreate_name@cvt 60C1                     __CFG_PWRT$OFF 000000  
             ___lmul@multiplicand 001A        __size_of_config_timer_dois 000C  
                    ___lltoft@exp 0026                    __CFG_FCMEN$OFF 000000  
      __size_of_config_timer_zero 001A   convert_to_degrees@NMEA_lat_long 007C  
                   ___awtoft@sign 0021                             _delay 34A2  
                _envia_dados_shrc 323E                   __end_of_dpowers 60E9  
                           _scale 0DAA                   __end_of_isdigit 3506  
        get_longitude@Long_Buffer 007A          __size_of_escreve_cmd_lcd 008C  
                   ___ftpack@sign 001A                             atof@s 0074  
                           atol@a 002B                             atol@c 002F  
                   _controle_shrc 35CE                             atol@s 0022  
                 __end_of_isspace 34A2                             pclath 000FFA  
                     GPS@Latitude 0259                             tablat 000FF5  
                           plusw1 000FE3                             plusw2 000FDB  
                           utoa@c 0025                             utoa@v 0023  
                           status 000FD8                   __end_of_sprintf 095A  
                 __initialization 2D5C                   ??_get_longitude 0034  
                    __end_of_atof 347C                      __end_of_atol 2480  
                    __end_of_main 33AE                      __end_of_itoa 32C4  
                    __end_of_utoa 2A24                _inicializa_tarefas 340A  
                 escalonador@cont 00AD                            ??_atof 0034  
                          ??_atol 0026                            ??_main 0035  
                   ___fttol@sign1 0076                            ??_itoa 002C  
                          ??_utoa 0023                     __activetblptr 000002  
             ?_inicializa_tarefas 0001              __size_of__tdiv_to_l_ 0132  
     __size_of_convert_to_degrees 013A                   __CFG_CCP2MX$OFF 000000  
                          ?_delay 0001            ?_escreve_caractere_lcd 0001  
                          _ADCON0 000FC2                            _ADCON1 000FC1  
                  ?_controle_shrc 0001                  __end_of___altoft 2D5C  
                ___llmod@dividend 0023                            ?_scale 0066  
                          _ADRESH 000FC4                            _ADRESL 000FC3  
                          _EEDATA 000FA8                            _EECON2 000FA7  
                ___awdiv@dividend 001C                  __end_of___awtoft 337A  
                __end_of___ftpack 2792                  __end_of___lltoft 30B0  
                          _INT0IE 007F94                            _INT0IF 007F91  
                          i2l1222 35B0                            _PCLATH 000FFA  
                          _INTCON 000FF2                            i2l8501 1FFC  
                          i2l8503 2008                            i2l8481 1FA0  
                          i2l8473 1F90                            i2l8493 1FDA  
                          i2l8485 1FA8                            i2l7935 35BE  
                          i2l7951 21BA                            i2l7943 2196  
                          i2l8489 1FD6                            i2l7971 222A  
                          i2l7963 2206                            i2l7955 21D0  
                          i2l7975 2240                            _TMR0IF 007F92  
                          _TMR2IF 007CF1          __end_of_recebe_dado_uart 35C2  
                          _SPPCFG 000F63                            _SPPCON 000F65  
                          _SSPBUF 000FC9            _leitura_chaves_sistema 31F6  
            ??_inicializa_tarefas 0016                get_longitude@index 008D  
      __end_of_posicao_cursor_lcd 2F20            __size_of_init_hardware 0016  
                __end_of__powers_ 6110                  __end_of_get_date 2388  
                          _Result 0042                            ___ftge 2AC2  
                          ___lmul 30B0                         ??___aldiv 001E  
                          ___wmul 3430                         ??___awdiv 0020  
                       ??___ftadd 0076                    __CFG_STVREN$ON 000000  
                       ??___awmod 001A                         ??___ftdiv 0024  
                       ??___ftneg 0033                         ??___lldiv 001E  
                       ??___ftmul 0030                         ??___llmod 002B  
                       ??___ftsub 0033                         ??___fttol 0071  
                       ??___lwdiv 001A                         ??___lwmod 001A  
                          _folder 0150                            _estado 003F  
                __end_of_init_lcd 2AC2                            _memset 33DE  
                          _fround 1428                            clear_0 2D84  
                          clear_1 2D96                            clear_2 2DA2  
                          clear_3 2DAE                            clear_4 2DBA  
                ___awdiv@quotient 0022               get_date@date_buffer 0062  
                 ___awmod@divisor 0018                   ___awmod@counter 001A  
        configura_baudrate_uart@x 0030                            _strtod 095A  
           ___ftmul@f3_as_product 0061                            itoa@cp 002C  
         get_longitude@_longitude 0089                         ??_isdigit 0016  
            __size_of_escalonador 00B2              __end_of_get_latitude 2980  
                    __mediumconst 6040                         ??_isspace 0016  
           write_timer_zero@timer 0018                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                   GPS@GPS_Buffer 0246           get_latitude@lat_pointer 008C  
                _write_timer_zero 358C         escreve_caractere_lcd@data 0018  
                       ??_sprintf 008C               _escreve_inteiro_lcd 3306  
                    GPS@Longitude 025C                        __accesstop 0060  
         __end_of__initialization 2DC0                        ___altoft@c 001E  
                 __CFG_PBADEN$OFF 000000                        ___ftadd@f1 0070  
                      ___ftadd@f2 0073                        ___ftge@ff1 0016  
                      ___ftge@ff2 0019                     ___rparam_used 000001  
               ??_escreve_cmd_lcd 0018                        ___ftdiv@f1 001E  
                      ___ftdiv@f2 0021                        ___ftdiv@f3 0028  
                      ___ftneg@f1 0066                        ___awtoft@c 001E  
                      ___ftmul@f1 002A                        ___ftmul@f2 002D  
                      ___ftsub@f1 007C                        ___ftsub@f2 007F  
                      ___fttol@f1 006D                    __pcstackCOMRAM 0001  
               ?_ativa_latch_shrc 0001                   _tratamento_uart 216C  
     __end_of_endereco_cursor_lcd 2F8A                      __pidataBANK0 3520  
               ?_mensagem_inicial 0001           _configura_baudrate_uart 1BAC  
                   __end_of_delay 34C6                        ___lltoft@c 001E  
                   __end_of_scale 11C0              ?_escreve_inteiro_lcd 002E  
              ??_ativa_latch_shrc 0016                ??_mensagem_inicial 001C  
                      __div_to_l_ 1E00                _tarefa_em_execucao 0047  
      __end_ofi2_write_timer_zero 35B0   configura_baudrate_uart@baudrate 0024  
                 ??_controle_shrc 0018                     _init_hardware 3550  
            __size_of_leitura_adc 0064                           ??_delay 0016  
                 __div_to_l_@exp1 0021                   __div_to_l_@cntr 0020  
                         ??_scale 0033                   __div_to_l_@quot 001C  
    mensagem_inicial@msg_linha_um 0060                        __pbssBANK0 00AE  
                      __pbssBANK1 0100                        __pbssBANK2 0200  
  __size_of_escreve_frase_ram_lcd 0052     __end_of_escreve_frase_ram_lcd 31AA  
                         GPS@date 0255                     __div_to_l_@f1 0016  
                   __div_to_l_@f2 0019         escreve_inteiro_uart@F3952 00E6  
         get_longitude@long_index 008E                           ?___ftge 0016  
                         ?___lmul 0016          __end_of_envia_dados_shrc 3282  
                         ?___wmul 0024             mensagem_inicial@F4020 616A  
           mensagem_inicial@F4018 617B             ??_escreve_inteiro_lcd 0030  
                       ?___altoft 001E                           ?_memset 0016  
                         ?_fround 0066                    ___lmul@product 001E  
                       ?___awtoft 001E                         ?___ftpack 0016  
                       ?___lltoft 001E      __end_of_leitura_continua_adc 1E00  
                         ?_strtod 0069                           _INTCON2 000FF1  
                         _INTCON3 000FF0                    ?_init_hardware 0001  
                         _SSPCON1 000FC6          __size_of_inicializa_shrc 0008  
        __size_of_inicializa_uart 0022                         ?_get_date 0030  
                         _SSPSTAT 000FC7                   __CFG_VREGEN$OFF 000000  
                       ?_init_lcd 0001           __end_of_tratamento_uart 2284  
                    _GGA_Pointers 01BA                 __end_of__npowers_ 6137  
                         __Hparam 0000         ??_configura_baudrate_uart 0028  
                      _scale$3377 0069                           __Lparam 0000  
                         ___aldiv 2566                   __size_of___ftge 0090  
                         ___awdiv 2BDE                   __size_of___lmul 0056  
                         ___ftadd 11C0                           ___awmod 2E40  
                         ___ftdiv 2480                           ___ftneg 33AE  
                         ___lldiv 2C62                   __size_of___wmul 0026  
                         ___ftmul 204C                           ___llmod 2F8A  
                         ___ftsub 31AA                           ___fttol 17FC  
                         ___lwdiv 3106                           ___lwmod 32C4  
                      ??___altoft 0022             __size_of_get_latitude 00A4  
                         __pcinit 2D5C                        ??___awtoft 0021  
                      ??___ftpack 001B                   __size_of_memset 002C  
                 __size_of_fround 024E                        _init_ports 3538  
                         __ramtop 0800                        ??___lltoft 0022  
                         __ptext0 337A                           __ptext1 2792  
                         __ptext2 1CD8                           __ptext3 2FF0  
                         __ptext4 31F6                           __ptext5 2A24  
                         __ptext6 3550                           __ptext7 3538  
                         __ptext8 35DA                           __ptext9 357A  
                       _GGA_Index 003C                         _T0CONbits 000FD5  
                    __size_of_GPS 0186                       ?__div_to_l_ 0016  
                 __size_of_strtod 0450           i2write_timer_zero@timer 0003  
     endereco_cursor_lcd@endereco 0018                           _dpowers 60C1  
                         _isdigit 34E8                      __size_of_isr 2044  
         ??_escreve_caractere_lcd 0018                  ___awmod@dividend 0016  
                ___aldiv@dividend 0016                           _isspace 347C  
         __size_of_init_interrupt 0012                        ??_get_date 0060  
                         _sprintf 0012                    __pintcode_body 1F28  
         ?_leitura_chaves_sistema 0001              end_of_initialization 2DC0  
            get_date@date_pointer 006C                           isr@cont 0015  
      __end_ofleitura_chave@F3834 616A        __end_ofleitura_chave@F3836 6159  
      __end_ofleitura_chave@F3838 6148           __size_of_init_oscilador 0008  
                         itoa@buf 0026                           memset@c 0018  
                         itoa@val 0028                           memset@n 001A  
                         memset@p 001C                     __Lmediumconst 6040  
                      ??_init_lcd 0019                           int_func 1F28  
               ?_recebe_dado_uart 0001            write_timer_zero@timer0 0016  
                 ___lldiv@divisor 001A                ??_recebe_dado_uart 0001  
                    _get_latitude 28DC                   ___lldiv@counter 0022  
        envia_dados_shrc@contador 0016                         _RCSTAbits 000FAB  
        __end_of_write_timer_zero 359E                  ___aldiv@quotient 0020  
                         postdec1 000FE5                           postdec2 000FDD  
                         postinc0 000FEE                           postinc1 000FE6  
                         postinc2 000FDE             __end_of_get_longitude 28DC  
                         utoa@buf 001D                    __tdiv_to_l_@f1 0016  
                  __tdiv_to_l_@f2 0019                           utoa@val 001F  
                   ??__tdiv_to_l_ 001C                         _RMC_Index 003A  
                         strtod@s 0069                         _PORTAbits 000F80  
                       _PORTCbits 000F82                         _PORTDbits 000F83  
                       _PORTEbits 000F84                   ??_init_hardware 001A  
              _posicao_cursor_lcd 2EB0        __end_of_convert_to_degrees 1A7A  
 __end_of_configura_baudrate_uart 1CD8                         _TRISAbits 000F92  
                       _TRISBbits 000F93                         _TRISCbits 000F94  
                       _TRISDbits 000F95                   _escreve_cmd_lcd 2B52  
  __end_of_leitura_chaves_sistema 323E               ?_posicao_cursor_lcd 0019  
                     ___ftdiv@exp 002B                  ?_tratamento_uart 0001  
            _leitura_continua_adc 1CD8                 ??_inicializa_shrc 0016  
               ??_inicializa_uart 0032       __size_of_inicializa_tarefas 0026  
             __size_of__div_to_l_ 0128                       ___ftmul@exp 0060  
            ??_posicao_cursor_lcd 001A                     _IsItGGAString 0045  
                  __end_of___ftge 2B52                    __end_of___lmul 3106  
                  __end_of___wmul 3456                     ??_escalonador 00AB  
                     ?_init_ports 0001                    __end_of_memset 340A  
                  __end_of_fround 1676                    __end_of_strtod 0DAA  
             start_initialization 2D5C                       __end_of_GPS 17FC  
       __size_of_ativa_latch_shrc 0014               __end_of__tdiv_to_l_ 1BAC  
                     __end_of_isr 204C         __size_of_mensagem_inicial 00A6  
              i2_write_timer_zero 359E             ?_leitura_continua_adc 0001  
                 ___llmod@divisor 0027                   ___llmod@counter 002B  
                _data_uart_recebe 0049               ?i2_write_timer_zero 0001  
                   _IsItRMCString 0044                          ??___ftge 001C  
                        ??___lmul 001E                          ??___wmul 0028  
               ?_envia_dados_shrc 0001                get_date@date_index 006D  
                     __pdataBANK0 00DC                  __CFG_LPT1OSC$OFF 000000  
                        ??_memset 001C                          ??_fround 0033  
              ??_envia_dados_shrc 0016                     sprintf@tmpval 009B  
         __end_of_escreve_cmd_lcd 2BDE                     ??_leitura_adc 0018  
                        ??_strtod 0033                 __size_of___altoft 0078  
    __size_of_endereco_cursor_lcd 006A                        fround@prec 006F  
               __size_of___awtoft 0038                 __size_of___ftpack 00AE  
                     __pbssBIGRAM 025F                 __size_of___lltoft 005C  
                     __pbssCOMRAM 0035                     __pcstackBANK0 0060  
                   __pcstackBANK2 0246                    _init_interrupt 357A  
            ??i2_write_timer_zero 0003               __end_of_escalonador 26E4  
           __end_of_controle_shrc 35DA                      _isdigit$2850 0017  
                  _init_oscilador 35DA                 __size_of_get_date 0104  
                     sprintf@flag 0097                       sprintf@fval 00A5  
                     sprintf@prec 00A3               __size_of_init_ports 0018  
           _escreve_frase_ram_lcd 3158       __end_of_escreve_inteiro_lcd 3342  
               __size_of_init_lcd 009E                  ___lwdiv@dividend 0016  
               delay@contador_int 0017                 delay@contador_ext 0016  
                       __pintcode 0008                     __pmediumconst 6040  
                        ?___aldiv 0016                          ?___awdiv 001C  
                        ?___ftadd 0070                          ?___awmod 0016  
                        ?___ftdiv 001E                          ?___ftneg 0066  
                        ?___lldiv 0016                          ?___ftmul 002A  
                        ?___llmod 0023                          ?___ftsub 007C  
                       __npowers_ 6110                          ?___fttol 006D  
                        ?___lwdiv 0016                          ?___lwmod 0016  
              _sinaliza_int_timer 0048                       __tdiv_to_l_ 1A7A  
                    ??__div_to_l_ 001C            __end_of_init_interrupt 358C  
                        ?_isdigit 0001                          ?_isspace 0001  
  __size_of_escreve_caractere_lcd 0072     __end_of_escreve_caractere_lcd 2E40  
                ___lwdiv@quotient 001B                    __size_of_delay 0024  
                        _GGA_CODE 0035               __end_of_leitura_adc 3054  
          __end_of_init_oscilador 35E2                          ?_sprintf 0082  
                  __size_of_scale 0416                         _p_tarefas 00CD  
          ??_leitura_continua_adc 001D                   ___aldiv@divisor 001A  
                 ___aldiv@counter 001E                    ___wmul@product 0028  
                        _LATBbits 000F8A                          _PIE1bits 000F9D  
                _CommaCounter_GGA 0046                  _CommaCounter_RMC 0043  
                        _PIR1bits 000F9E                __end_of__div_to_l_ 1F28  
                        _PIR2bits 000FA1                          i2u941_40 1F7E  
                        i2u941_46 1F80                          _RMC_CODE 00D1  
               ?_write_timer_zero 0016                       strtod@flags 006E  
              leitura_chave@F3834 6159                leitura_chave@F3836 6148  
              leitura_chave@F3838 6137                       strtod@expon 006F  
        posicao_cursor_lcd@coluna 0019                ??_write_timer_zero 0018  
      posicao_cursor_lcd@endereco 001B                         get_date@i 006F  
       __size_of_recebe_dado_uart 0012                       _escalonador 2632  
                      _ADCON0bits 000FC2                        _ADCON1bits 000FC1  
                      _ADCON2bits 000FC0                 ___wmul@multiplier 0024  
                ?_escreve_cmd_lcd 0001       escreve_frase_ram_lcd@buffer 0019  
                 ?_init_interrupt 0001                  _ativa_latch_shrc 3566  
                 _inicializa_shrc 35E2                   _inicializa_uart 34C6  
                    _isspace$2853 0017                  _mensagem_inicial 2792  
                 ?_init_oscilador 0001                 ___lmul@multiplier 0016  
                       copy_data0 2D70                _convert_to_degrees 1940  
        ?_configura_baudrate_uart 0024            ?_escreve_frase_ram_lcd 0019  
                      _EECON1bits 000FA6      leitura_continua_adc@cont_int 0023  
        escreve_inteiro_lcd@F3962 00ED                          __Hrparam 0000  
             ?_convert_to_degrees 007C                       _info_chaves 00BA  
                        __Lrparam 0000                  __size_of___aldiv 00CC  
                __size_of___awdiv 0084                  __size_of___ftadd 0268  
                __size_of___awmod 0070                  __size_of___ftdiv 00E6  
                __size_of___ftneg 0030                  __size_of___lldiv 0082  
                        ___altoft 2CE4                  __size_of___ftmul 0120  
                __size_of___llmod 0066                  __size_of___ftsub 004C  
                __size_of___fttol 0144                  __size_of___lwdiv 0052  
                __size_of___lwmod 0042                      ??_init_ports 0016  
                        ___awtoft 3342                          ___ftpack 26E4  
                     _fround$3375 006C                       _fround$3376 0069  
        escreve_inteiro_lcd@valor 002E                          ___lltoft 3054  
        escreve_inteiro_lcd@texto 0060            get_latitude@Lat_Buffer 007A  
                     _leitura_adc 2FF0                        sprintf@exp 0099  
                      sprintf@val 009F             __end_of_init_hardware 3566  
            ??_convert_to_degrees 0033                  __size_of_isdigit 001E  
                 ___lwdiv@divisor 0018                  __size_of_isspace 0026  
                 ___lwdiv@counter 001A                          _fileName 00DC  
                        __ptext10 3506                          __ptext11 358C  
                        __ptext20 0012                          __ptext12 35C2  
                        __ptext21 0DAA                          __ptext13 34C6  
                        __ptext30 2C62                          __ptext22 1428  
                        __ptext14 1BAC                          __ptext31 31AA  
                        __ptext23 3430                          __ptext15 2566  
                        __ptext40 2284                          __ptext32 33DE  
                        __ptext24 2E40                          __ptext16 340A  
                        __ptext41 2EB0                          __ptext33 2838  
                        __ptext25 2BDE                          __ptext17 35E2  
                        __ptext50 32C4                          __ptext42 2F20  
                        __ptext34 28DC                          __ptext26 1A7A  
                        __ptext18 2632                          __ptext51 3106  
                        __ptext43 2B52                          __ptext35 3456  
                        __ptext27 1E00                          __ptext19 1676  
                        __ptext60 11C0                          __ptext52 3158  
                        __ptext44 2388                          __ptext36 095A  
                        __ptext28 3054                          __ptext61 3342  
                        __ptext53 2DCE                          __ptext45 34E8  
                        __ptext37 347C                          __ptext29 2F8A  
                        __ptext70 0000                          __ptext62 26E4  
                        __ptext54 34A2                          __ptext46 30B0  
                        __ptext38 2AC2                          __ptext63 35CE  
                        __ptext55 1940                          __ptext47 3306  
                        __ptext39 2CE4                          __ptext64 323E  
                        __ptext56 17FC                          __ptext48 3282  
                        __ptext65 3566                          __ptext57 33AE  
                        __ptext49 2980                          __ptext58 204C  
                        __ptext67 359E                          __ptext59 2480  
                        __ptext68 216C                          __ptext69 35B0  
                        _fileSize 00C1                          __powers_ 60E9  
                        _get_date 2284                        _GGA_Buffer 0100  
                  _timeout_tarefa 00D8                  __size_of_sprintf 0948  
          __size_of_get_longitude 00A4        __end_of_inicializa_tarefas 3430  
        i2write_timer_zero@timer0 0001                          _init_lcd 2A24  
                   __size_of_atof 0026                     __size_of_atol 00F8  
                   __size_of_main 0034                     __size_of_itoa 0042  
                   __size_of_utoa 00A4               _endereco_cursor_lcd 2F20  
              __end_of_init_ports 3550                        strtod@eexp 006D  
     __size_of_posicao_cursor_lcd 0070                          int$flags 004A  
         posicao_cursor_lcd@linha 001A          __size_of_tratamento_uart 0118  
                        atol@sign 002A                      _RMC_Pointers 00AE  
        leitura_continua_adc@cont 0024           __end_of_inicializa_shrc 35EA  
         __end_of_inicializa_uart 34E8             __CFG_CPUDIV$OSC1_PLL2 000000  
            ?_endereco_cursor_lcd 0001                        _INTCONbits 000FF2  
                leitura_adc@canal 001C                          itoa@base 002A  
                        isdigit@c 0018                          memset@p1 0016  
       __size_of_envia_dados_shrc 0044                          scale@scl 006C  
               _config_timer_dois 35C2                      _tempo_backup 00C9  
               _config_timer_zero 3506                          intlevel2 0000  
                       sprintf@ap 0095                  __tdiv_to_l_@exp1 0024  
                __tdiv_to_l_@cntr 0023                         sprintf@sp 0082  
              ?_config_timer_dois 0001          mensagem_inicial@msg_dois 0071  
                __tdiv_to_l_@quot 001F                ?_config_timer_zero 0001  
                    _tempo_tarefa 00C5      envia_dados_shrc@data_to_shrc 0017  
                ___lwmod@dividend 0016                          isspace@c 0018  
                ___lldiv@dividend 0016               ??_config_timer_dois 0016  
                      _OSCCONbits 000FD3               ??_config_timer_zero 001A  
                       strtod@res 006B         get_longitude@long_pointer 008C  
               get_latitude@index 008D                     _get_longitude 2838  
                _recebe_dado_uart 35B0                      ?__tdiv_to_l_ 0016  
                        utoa@base 0021             ??_endereco_cursor_lcd 0018  
        ??_leitura_chaves_sistema 0016                          sprintf@c 00A8  
                        sprintf@f 0084                  ___lldiv@quotient 001E  
                 ___lwmod@divisor 0018                   ___lwmod@counter 001A  
                      _RMC_Buffer 0200         __end_of_config_timer_dois 35CE  
                    ___aldiv@sign 001F         __end_of_config_timer_zero 3520  
                        strtod@_u 0070       __size_ofi2_write_timer_zero 0012  
                     _SSPCON1bits 000FC6            escreve_cmd_lcd@comando 0018  
                   ?_get_latitude 0077     __end_ofmensagem_inicial@F4020 617B  
   __end_ofmensagem_inicial@F4018 618C          __end_of_ativa_latch_shrc 357A  
