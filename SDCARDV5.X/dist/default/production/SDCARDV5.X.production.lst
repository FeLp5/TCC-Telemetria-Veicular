

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Feb 25 12:27:23 2022

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1
    79                           	psect	text59,global,reloc=2,class=CODE,delta=1
    80                           	psect	text60,global,reloc=2,class=CODE,delta=1
    81                           	psect	text61,global,reloc=2,class=CODE,delta=1
    82                           	psect	text62,global,reloc=2,class=CODE,delta=1
    83                           	psect	text63,global,reloc=2,class=CODE,delta=1,group=1
    84                           	psect	text64,global,reloc=2,class=CODE,delta=1,group=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1,group=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1,group=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1
    90                           	psect	text70,global,reloc=2,class=CODE,delta=1
    91                           	psect	text71,global,reloc=2,class=CODE,delta=1
    92                           	psect	text72,global,reloc=2,class=CODE,delta=1
    93                           	psect	text73,global,reloc=2,class=CODE,delta=1
    94                           	psect	text74,global,reloc=2,class=CODE,delta=1
    95                           	psect	text75,global,reloc=2,class=CODE,delta=1
    96                           	psect	text76,global,reloc=2,class=CODE,delta=1
    97                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    98                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    99                           	psect	text78,global,reloc=2,class=CODE,delta=1
   100                           	psect	text79,global,reloc=2,class=CODE,delta=1
   101                           	psect	text80,global,reloc=2,class=CODE,delta=1
   102                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   103                           	psect	text81,global,reloc=2,class=CODE,delta=1
   104                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   105                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   106  0000                     
   107                           ; Version 1.45
   108                           ; Generated 16/11/2017 GMT
   109                           ; 
   110                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   111                           ; All rights reserved.
   112                           ; 
   113                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   114                           ; 
   115                           ; Redistribution and use in source and binary forms, with or without modification, are
   116                           ; permitted provided that the following conditions are met:
   117                           ; 
   118                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   119                           ;        conditions and the following disclaimer.
   120                           ; 
   121                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   122                           ;        of conditions and the following disclaimer in the documentation and/or other
   123                           ;        materials provided with the distribution.
   124                           ; 
   125                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   126                           ;        software without specific prior written permission.
   127                           ; 
   128                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   129                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   130                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   131                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   132                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   133                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   134                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   135                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   136                           ; 
   137                           ; 
   138                           ; Code-generator required, PIC18F4550 Definitions
   139                           ; 
   140                           ; SFR Addresses
   141  0000                     
   142                           	psect	idataBANK0
   143  005BD6                     __pidataBANK0:
   144                           	opt stack 0
   145                           
   146                           ;initializer for _Stat
   147  005BD6  01                 	db	1
   148                           
   149                           	psect	idataBANK1
   150  005AC2                     __pidataBANK1:
   151                           	opt stack 0
   152                           
   153                           ;initializer for _fileName
   154  005AC2  74                 	db	116
   155  005AC3  65                 	db	101
   156  005AC4  73                 	db	115
   157  005AC5  74                 	db	116
   158  005AC6  65                 	db	101
   159  005AC7  2E                 	db	46
   160  005AC8  74                 	db	116
   161  005AC9  78                 	db	120
   162  005ACA  74                 	db	116
   163  005ACB  00                 	db	0
   164  005ACC  00                 	db	0
   165  005ACD  00                 	db	0
   166  005ACE  00                 	db	0
   167  005ACF  00                 	db	0
   168  005AD0  00                 	db	0
   169                           
   170                           ;initializer for escreve_inteiro_uart@F3956
   171  005AD1  30                 	db	48
   172  005AD2  30                 	db	48
   173  005AD3  30                 	db	48
   174  005AD4  30                 	db	48
   175  005AD5  30                 	db	48
   176  005AD6  30                 	db	48
   177  005AD7  00                 	db	0
   178                           
   179                           ;initializer for escreve_inteiro_lcd@F3966
   180  005AD8  30                 	db	48
   181  005AD9  30                 	db	48
   182  005ADA  30                 	db	48
   183  005ADB  30                 	db	48
   184  005ADC  30                 	db	48
   185  005ADD  30                 	db	48
   186  005ADE  00                 	db	0
   187                           
   188                           	psect	mediumconst
   189  00610C                     __pmediumconst:
   190                           	opt stack 0
   191  00610C  00                 	db	0
   192  00610D                     _dpowers:
   193                           	opt stack 0
   194  00610D  0001               	dw	1
   195  00610F  0000               	dw	0
   196  006111  000A               	dw	10
   197  006113  0000               	dw	0
   198  006115  0064               	dw	100
   199  006117  0000               	dw	0
   200  006119  03E8               	dw	1000
   201  00611B  0000               	dw	0
   202  00611D  2710               	dw	10000
   203  00611F  0000               	dw	0
   204  006121  86A0               	dw	34464
   205  006123  0001               	dw	1
   206  006125  4240               	dw	16960
   207  006127  000F               	dw	15
   208  006129  9680               	dw	38528
   209  00612B  0098               	dw	152
   210  00612D  E100               	dw	57600
   211  00612F  05F5               	dw	1525
   212  006131  CA00               	dw	51712
   213  006133  3B9A               	dw	15258
   214  006135                     __end_of_dpowers:
   215                           	opt stack 0
   216  006135                     __powers_:
   217                           	opt stack 0
   218  006135  00                 	db	0
   219  006136  80                 	db	128
   220  006137  3F                 	db	63
   221  006138  00                 	db	0
   222  006139  20                 	db	32
   223  00613A  41                 	db	65
   224  00613B  00                 	db	0
   225  00613C  C8                 	db	200
   226  00613D  42                 	db	66
   227  00613E  00                 	db	0
   228  00613F  7A                 	db	122
   229  006140  44                 	db	68
   230  006141  40                 	db	64
   231  006142  1C                 	db	28
   232  006143  46                 	db	70
   233  006144  50                 	db	80
   234  006145  C3                 	db	195
   235  006146  47                 	db	71
   236  006147  24                 	db	36
   237  006148  74                 	db	116
   238  006149  49                 	db	73
   239  00614A  97                 	db	151
   240  00614B  18                 	db	24
   241  00614C  4B                 	db	75
   242  00614D  BC                 	db	188
   243  00614E  BE                 	db	190
   244  00614F  4C                 	db	76
   245  006150  6B                 	db	107
   246  006151  6E                 	db	110
   247  006152  4E                 	db	78
   248  006153  03                 	db	3
   249  006154  15                 	db	21
   250  006155  50                 	db	80
   251  006156  79                 	db	121
   252  006157  AD                 	db	173
   253  006158  60                 	db	96
   254  006159  F3                 	db	243
   255  00615A  49                 	db	73
   256  00615B  71                 	db	113
   257  00615C                     __end_of__powers_:
   258                           	opt stack 0
   259  00615C                     __npowers_:
   260                           	opt stack 0
   261  00615C  00                 	db	0
   262  00615D  80                 	db	128
   263  00615E  3F                 	db	63
   264  00615F  CD                 	db	205
   265  006160  CC                 	db	204
   266  006161  3D                 	db	61
   267  006162  D7                 	db	215
   268  006163  23                 	db	35
   269  006164  3C                 	db	60
   270  006165  12                 	db	18
   271  006166  83                 	db	131
   272  006167  3A                 	db	58
   273  006168  B7                 	db	183
   274  006169  D1                 	db	209
   275  00616A  38                 	db	56
   276  00616B  C6                 	db	198
   277  00616C  27                 	db	39
   278  00616D  37                 	db	55
   279  00616E  38                 	db	56
   280  00616F  86                 	db	134
   281  006170  35                 	db	53
   282  006171  C0                 	db	192
   283  006172  D6                 	db	214
   284  006173  33                 	db	51
   285  006174  CC                 	db	204
   286  006175  2B                 	db	43
   287  006176  32                 	db	50
   288  006177  70                 	db	112
   289  006178  89                 	db	137
   290  006179  30                 	db	48
   291  00617A  E7                 	db	231
   292  00617B  DB                 	db	219
   293  00617C  2E                 	db	46
   294  00617D  E5                 	db	229
   295  00617E  3C                 	db	60
   296  00617F  1E                 	db	30
   297  006180  42                 	db	66
   298  006181  A2                 	db	162
   299  006182  0D                 	db	13
   300  006183                     __end_of__npowers_:
   301                           	opt stack 0
   302  006183                     leitura_chave@F3842:
   303                           	opt stack 0
   304  006183  20                 	db	32
   305  006184  49                 	db	73
   306  006185  67                 	db	103
   307  006186  6E                 	db	110
   308  006187  20                 	db	32
   309  006188  4F                 	db	79
   310  006189  6E                 	db	110
   311  00618A  00                 	db	0
   312  00618B  00                 	db	0
   313  00618C  00                 	db	0
   314  00618D  00                 	db	0
   315  00618E  00                 	db	0
   316  00618F  00                 	db	0
   317  006190  00                 	db	0
   318  006191  00                 	db	0
   319  006192  00                 	db	0
   320  006193  00                 	db	0
   321  006194                     __end_ofleitura_chave@F3842:
   322                           	opt stack 0
   323  006194                     leitura_chave@F3840:
   324                           	opt stack 0
   325  006194  20                 	db	32
   326  006195  49                 	db	73
   327  006196  67                 	db	103
   328  006197  6E                 	db	110
   329  006198  20                 	db	32
   330  006199  43                 	db	67
   331  00619A  72                 	db	114
   332  00619B  61                 	db	97
   333  00619C  6E                 	db	110
   334  00619D  6B                 	db	107
   335  00619E  00                 	db	0
   336  00619F  00                 	db	0
   337  0061A0  00                 	db	0
   338  0061A1  00                 	db	0
   339  0061A2  00                 	db	0
   340  0061A3  00                 	db	0
   341  0061A4  00                 	db	0
   342  0061A5                     __end_ofleitura_chave@F3840:
   343                           	opt stack 0
   344  0061A5                     leitura_chave@F3838:
   345                           	opt stack 0
   346  0061A5  20                 	db	32
   347  0061A6  49                 	db	73
   348  0061A7  67                 	db	103
   349  0061A8  6E                 	db	110
   350  0061A9  20                 	db	32
   351  0061AA  4F                 	db	79
   352  0061AB  66                 	db	102
   353  0061AC  66                 	db	102
   354  0061AD  00                 	db	0
   355  0061AE  00                 	db	0
   356  0061AF  00                 	db	0
   357  0061B0  00                 	db	0
   358  0061B1  00                 	db	0
   359  0061B2  00                 	db	0
   360  0061B3  00                 	db	0
   361  0061B4  00                 	db	0
   362  0061B5  00                 	db	0
   363  0061B6                     __end_ofleitura_chave@F3838:
   364                           	opt stack 0
   365  0061B6                     mensagem_inicial@F4151:
   366                           	opt stack 0
   367  0061B6  20                 	db	32
   368  0061B7  31                 	db	49
   369  0061B8  38                 	db	56
   370  0061B9  2F                 	db	47
   371  0061BA  30                 	db	48
   372  0061BB  31                 	db	49
   373  0061BC  2F                 	db	47
   374  0061BD  32                 	db	50
   375  0061BE  30                 	db	48
   376  0061BF  32                 	db	50
   377  0061C0  32                 	db	50
   378  0061C1  20                 	db	32
   379  0061C2  20                 	db	32
   380  0061C3  20                 	db	32
   381  0061C4  00                 	db	0
   382  0061C5  00                 	db	0
   383  0061C6  00                 	db	0
   384  0061C7                     __end_ofmensagem_inicial@F4151:
   385                           	opt stack 0
   386  0061C7                     mensagem_inicial@F4149:
   387                           	opt stack 0
   388  0061C7  53                 	db	83
   389  0061C8  44                 	db	68
   390  0061C9  43                 	db	67
   391  0061CA  61                 	db	97
   392  0061CB  72                 	db	114
   393  0061CC  64                 	db	100
   394  0061CD  20                 	db	32
   395  0061CE  49                 	db	73
   396  0061CF  6E                 	db	110
   397  0061D0  69                 	db	105
   398  0061D1  74                 	db	116
   399  0061D2  20                 	db	32
   400  0061D3  20                 	db	32
   401  0061D4  20                 	db	32
   402  0061D5  00                 	db	0
   403  0061D6  00                 	db	0
   404  0061D7  00                 	db	0
   405  0061D8                     __end_ofmensagem_inicial@F4149:
   406                           	opt stack 0
   407  0000                     _RCSTA	set	4011
   408  0000                     _TXSTA	set	4012
   409  0000                     _RCREG	set	4014
   410  0000                     _RCSTAbits	set	4011
   411  0000                     _TXREG	set	4013
   412  0000                     _SPBRG	set	4015
   413  0000                     _PIR2bits	set	4001
   414  0000                     _EECON2	set	4007
   415  0000                     _EECON1bits	set	4006
   416  0000                     _EEDATA	set	4008
   417  0000                     _EEADR	set	4009
   418  0000                     _PR2	set	4043
   419  0000                     _TMR2	set	4044
   420  0000                     _T2CON	set	4042
   421  0000                     _OSCCONbits	set	4051
   422  0000                     _TRISE	set	3990
   423  0000                     _TRISC	set	3988
   424  0000                     _TRISA	set	3986
   425  0000                     _TRISD	set	3989
   426  0000                     _LATB	set	3978
   427  0000                     _TRISB	set	3987
   428  0000                     _TMR0L	set	4054
   429  0000                     _TMR0H	set	4055
   430  0000                     _PIE1	set	3997
   431  0000                     _INTCON3	set	4080
   432  0000                     _INTCON2	set	4081
   433  0000                     _INTCON	set	4082
   434  0000                     _SPPCFG	set	3939
   435  0000                     _SPPCON	set	3941
   436  0000                     _T0CON	set	4053
   437  0000                     _PORTDbits	set	3971
   438  0000                     _TRISDbits	set	3989
   439  0000                     _PORTEbits	set	3972
   440  0000                     _PORTCbits	set	3970
   441  0000                     _ADRESL	set	4035
   442  0000                     _ADRESH	set	4036
   443  0000                     _ADCON0	set	4034
   444  0000                     _ADCON0bits	set	4034
   445  0000                     _ADCON2bits	set	4032
   446  0000                     _ADCON1bits	set	4033
   447  0000                     _SSPBUF	set	4041
   448  0000                     _TRISCbits	set	3988
   449  0000                     _SSPSTATbits	set	4039
   450  0000                     _SSPCON1	set	4038
   451  0000                     _SSPSTAT	set	4039
   452  0000                     _SSPCON1bits	set	4038
   453  0000                     _PORTBbits	set	3969
   454  0000                     _TRISBbits	set	3987
   455  0000                     _T0CONbits	set	4053
   456  0000                     _LATBbits	set	3978
   457  0000                     _PORTAbits	set	3968
   458  0000                     _TRISAbits	set	3986
   459  0000                     _ADCON1	set	4033
   460  0000                     _PCL	set	4089
   461  0000                     _PCLATH	set	4090
   462  0000                     _INTCONbits	set	4082
   463  0000                     _PIR1bits	set	3998
   464  0000                     _PIE1bits	set	3997
   465  0000                     _RCIF	set	31989
   466  0000                     _TRMT	set	32097
   467  0000                     _TXEN	set	32101
   468  0000                     _CREN	set	32092
   469  0000                     _SPEN	set	32095
   470  0000                     _SYNC	set	32100
   471  0000                     _BRGH	set	32098
   472  0000                     _TMR2IF	set	31985
   473  0000                     _INT0IE	set	32660
   474  0000                     _INT0IF	set	32657
   475  0000                     _T0IF	set	32658
   476  0000                     _TMR0IF	set	32658
   477  0061D8  53                 	db	83	;'S'
   478  0061D9  50                 	db	80	;'P'
   479  0061DA  49                 	db	73	;'I'
   480  0061DB  20                 	db	32
   481  0061DC  63                 	db	99	;'c'
   482  0061DD  6F                 	db	111	;'o'
   483  0061DE  6E                 	db	110	;'n'
   484  0061DF  66                 	db	102	;'f'
   485  0061E0  69                 	db	105	;'i'
   486  0061E1  67                 	db	103	;'g'
   487  0061E2  75                 	db	117	;'u'
   488  0061E3  72                 	db	114	;'r'
   489  0061E4  61                 	db	97	;'a'
   490  0061E5  64                 	db	100	;'d'
   491  0061E6  61                 	db	97	;'a'
   492  0061E7  21                 	db	33
   493  0061E8  00                 	db	0
   494  0061E9                     STR_8:
   495  0061E9  6D                 	db	109	;'m'
   496  0061EA  6F                 	db	111	;'o'
   497  0061EB  6E                 	db	110	;'n'
   498  0061EC  74                 	db	116	;'t'
   499  0061ED  61                 	db	97	;'a'
   500  0061EE  6E                 	db	110	;'n'
   501  0061EF  64                 	db	100	;'d'
   502  0061F0  6F                 	db	111	;'o'
   503  0061F1  20                 	db	32
   504  0061F2  73                 	db	115	;'s'
   505  0061F3  69                 	db	105	;'i'
   506  0061F4  73                 	db	115	;'s'
   507  0061F5  74                 	db	116	;'t'
   508  0061F6  65                 	db	101	;'e'
   509  0061F7  6D                 	db	109	;'m'
   510  0061F8  61                 	db	97	;'a'
   511  0061F9  00                 	db	0
   512  0061FA                     STR_10:
   513  0061FA  41                 	db	65	;'A'
   514  0061FB  62                 	db	98	;'b'
   515  0061FC  72                 	db	114	;'r'
   516  0061FD  69                 	db	105	;'i'
   517  0061FE  6E                 	db	110	;'n'
   518  0061FF  64                 	db	100	;'d'
   519  006200  6F                 	db	111	;'o'
   520  006201  20                 	db	32
   521  006202  61                 	db	97	;'a'
   522  006203  72                 	db	114	;'r'
   523  006204  71                 	db	113	;'q'
   524  006205  75                 	db	117	;'u'
   525  006206  69                 	db	105	;'i'
   526  006207  76                 	db	118	;'v'
   527  006208  6F                 	db	111	;'o'
   528  006209  00                 	db	0
   529  00620A                     STR_19:
   530  00620A  22                 	db	34
   531  00620B  2A                 	db	42
   532  00620C  2B                 	db	43
   533  00620D  2C                 	db	44
   534  00620E  3A                 	db	58	;':'
   535  00620F  3B                 	db	59	;';'
   536  006210  3C                 	db	60	;'<'
   537  006211  3D                 	db	61	;'='
   538  006212  3E                 	db	62	;'>'
   539  006213  3F                 	db	63	;'?'
   540  006214  5B                 	db	91	;'['
   541  006215  5D                 	db	93	;']'
   542  006216  7C                 	db	124
   543  006217  7F                 	db	127
   544  006218  00                 	db	0
   545  006219                     STR_14:
   546  006219  48                 	db	72	;'H'
   547  00621A  65                 	db	101	;'e'
   548  00621B  6C                 	db	108	;'l'
   549  00621C  6C                 	db	108	;'l'
   550  00621D  6F                 	db	111	;'o'
   551  00621E  20                 	db	32
   552  00621F  77                 	db	119	;'w'
   553  006220  6F                 	db	111	;'o'
   554  006221  72                 	db	114	;'r'
   555  006222  6C                 	db	108	;'l'
   556  006223  64                 	db	100	;'d'
   557  006224  21                 	db	33
   558  006225  0D                 	db	13
   559  006226  0A                 	db	10
   560  006227  00                 	db	0
   561  006228                     STR_12:
   562  006228  6C                 	db	108	;'l'
   563  006229  65                 	db	101	;'e'
   564  00622A  6E                 	db	110	;'n'
   565  00622B  64                 	db	100	;'d'
   566  00622C  6F                 	db	111	;'o'
   567  00622D  20                 	db	32
   568  00622E  74                 	db	116	;'t'
   569  00622F  61                 	db	97	;'a'
   570  006230  6D                 	db	109	;'m'
   571  006231  61                 	db	97	;'a'
   572  006232  6E                 	db	110	;'n'
   573  006233  68                 	db	104	;'h'
   574  006234  6F                 	db	111	;'o'
   575  006235  00                 	db	0
   576  006236                     STR_13:
   577  006236  65                 	db	101	;'e'
   578  006237  73                 	db	115	;'s'
   579  006238  63                 	db	99	;'c'
   580  006239  72                 	db	114	;'r'
   581  00623A  65                 	db	101	;'e'
   582  00623B  76                 	db	118	;'v'
   583  00623C  65                 	db	101	;'e'
   584  00623D  6E                 	db	110	;'n'
   585  00623E  64                 	db	100	;'d'
   586  00623F  6F                 	db	111	;'o'
   587  006240  00                 	db	0
   588  006241                     STR_11:
   589  006241  74                 	db	116	;'t'
   590  006242  65                 	db	101	;'e'
   591  006243  73                 	db	115	;'s'
   592  006244  74                 	db	116	;'t'
   593  006245  65                 	db	101	;'e'
   594  006246  2E                 	db	46
   595  006247  74                 	db	116	;'t'
   596  006248  78                 	db	120	;'x'
   597  006249  74                 	db	116	;'t'
   598  00624A  00                 	db	0
   599  00624B                     STR_15:
   600  00624B  66                 	db	102	;'f'
   601  00624C  65                 	db	101	;'e'
   602  00624D  63                 	db	99	;'c'
   603  00624E  68                 	db	104	;'h'
   604  00624F  61                 	db	97	;'a'
   605  006250  6E                 	db	110	;'n'
   606  006251  64                 	db	100	;'d'
   607  006252  6F                 	db	111	;'o'
   608  006253  00                 	db	0
   609  006254  25                 	db	37
   610  006255  64                 	db	100	;'d'
   611  006256  3A                 	db	58	;':'
   612  006257  25                 	db	37
   613  006258  64                 	db	100	;'d'
   614  006259  3A                 	db	58	;':'
   615  00625A  25                 	db	37
   616  00625B  64                 	db	100	;'d'
   617  00625C  00                 	db	0
   618  00625D                     STR_18:
   619  00625D  72                 	db	114	;'r'
   620  00625E  65                 	db	101	;'e'
   621  00625F  73                 	db	115	;'s'
   622  006260  65                 	db	101	;'e'
   623  006261  74                 	db	116	;'t'
   624  006262  00                 	db	0
   625  006263  48                 	db	72	;'H'
   626  006264  6F                 	db	111	;'o'
   627  006265  72                 	db	114	;'r'
   628  006266  61                 	db	97	;'a'
   629  006267  3A                 	db	58	;':'
   630  006268  00                 	db	0
   631  006269  44                 	db	68	;'D'
   632  00626A  61                 	db	97	;'a'
   633  00626B  74                 	db	116	;'t'
   634  00626C  61                 	db	97	;'a'
   635  00626D  3A                 	db	58	;':'
   636  00626E  00                 	db	0
   637  00626F                     STR_3:
   638  00626F  25                 	db	37
   639  006270  2E                 	db	46
   640  006271  30                 	db	48	;'0'
   641  006272  37                 	db	55	;'7'
   642  006273  66                 	db	102	;'f'
   643  006274  00                 	db	0
   644  006275  4C                 	db	76	;'L'
   645  006276  6F                 	db	111	;'o'
   646  006277  6E                 	db	110	;'n'
   647  006278  3A                 	db	58	;':'
   648  006279  00                 	db	0
   649  00627A  4C                 	db	76	;'L'
   650  00627B  61                 	db	97	;'a'
   651  00627C  74                 	db	116	;'t'
   652  00627D  3A                 	db	58	;':'
   653  00627E  00                 	db	0
   654  0000                     
   655                           ; #config settings
   656  00627F  00                 	db	0	; dummy byte at the end
   657  0000                     
   658                           	psect	cinit
   659  005332                     __pcinit:
   660                           	opt stack 0
   661  005332                     start_initialization:
   662                           	opt stack 0
   663  005332                     __initialization:
   664                           	opt stack 0
   665                           
   666                           ; Initialize objects allocated to BANK1 (29 bytes)
   667                           ; load TBLPTR registers with __pidataBANK1
   668  005332  0EC2               	movlw	low __pidataBANK1
   669  005334  6EF6               	movwf	tblptrl,c
   670  005336  0E5A               	movlw	high __pidataBANK1
   671  005338  6EF7               	movwf	tblptrh,c
   672  00533A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   673  00533C  6EF8               	movwf	tblptru,c
   674  00533E  EE01  F0C5         	lfsr	0,__pdataBANK1
   675  005342  EE10 F01D          	lfsr	1,29
   676  005346                     copy_data0:
   677  005346  0009               	tblrd		*+
   678  005348  CFF5 FFEE          	movff	tablat,postinc0
   679  00534C  50E5               	movf	postdec1,w,c
   680  00534E  50E1               	movf	fsr1l,w,c
   681  005350  E1FA               	bnz	copy_data0
   682                           
   683                           ; Initialize objects allocated to BANK0 (1 bytes)
   684                           ; load TBLPTR registers with __pidataBANK0
   685  005352  0ED6               	movlw	low __pidataBANK0
   686  005354  6EF6               	movwf	tblptrl,c
   687  005356  0E5B               	movlw	high __pidataBANK0
   688  005358  6EF7               	movwf	tblptrh,c
   689  00535A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   690  00535C  6EF8               	movwf	tblptru,c
   691  00535E  0009               	tblrd		*+	;fetch initializer
   692  005360  CFF5 F0FF          	movff	tablat,__pdataBANK0
   693                           
   694                           ; Clear objects allocated to BIGRAM (558 bytes)
   695  005364  EE03  F050         	lfsr	0,__pbssBIGRAM
   696  005368  EE12 F02E          	lfsr	1,558
   697  00536C                     clear_0:
   698  00536C  6AEE               	clrf	postinc0,c
   699  00536E  50E5               	movf	postdec1,w,c
   700  005370  50E1               	movf	fsr1l,w,c
   701  005372  E1FC               	bnz	clear_0
   702  005374  50E2               	movf	fsr1h,w,c
   703  005376  E1FA               	bnz	clear_0
   704                           
   705                           ; Clear objects allocated to BANK2 (230 bytes)
   706  005378  EE02  F000         	lfsr	0,__pbssBANK2
   707  00537C  0EE6               	movlw	230
   708  00537E                     clear_1:
   709  00537E  6AEE               	clrf	postinc0,c
   710  005380  06E8               	decf	wreg,f,c
   711  005382  E1FD               	bnz	clear_1
   712                           
   713                           ; Clear objects allocated to BANK1 (127 bytes)
   714  005384  EE01  F000         	lfsr	0,__pbssBANK1
   715  005388  0E7F               	movlw	127
   716  00538A                     clear_2:
   717  00538A  6AEE               	clrf	postinc0,c
   718  00538C  06E8               	decf	wreg,f,c
   719  00538E  E1FD               	bnz	clear_2
   720                           
   721                           ; Clear objects allocated to BANK0 (17 bytes)
   722  005390  EE00  F0EE         	lfsr	0,__pbssBANK0
   723  005394  0E11               	movlw	17
   724  005396                     clear_3:
   725  005396  6AEE               	clrf	postinc0,c
   726  005398  06E8               	decf	wreg,f,c
   727  00539A  E1FD               	bnz	clear_3
   728                           
   729                           ; Clear objects allocated to COMRAM (24 bytes)
   730  00539C  EE00  F02E         	lfsr	0,__pbssCOMRAM
   731  0053A0  0E18               	movlw	24
   732  0053A2                     clear_4:
   733  0053A2  6AEE               	clrf	postinc0,c
   734  0053A4  06E8               	decf	wreg,f,c
   735  0053A6  E1FD               	bnz	clear_4
   736  0053A8                     end_of_initialization:
   737                           	opt stack 0
   738  0053A8                     __end_of__initialization:
   739                           	opt stack 0
   740  0053A8  9046               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   741  0053AA  9246               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   742  0053AC  0100               	movlb	0
   743  0053AE  EFE9  F02C         	goto	_main	;jump to C main() function
   744                           tblptru	equ	0xFF8
   745                           tblptrh	equ	0xFF7
   746                           tblptrl	equ	0xFF6
   747                           tablat	equ	0xFF5
   748                           postinc0	equ	0xFEE
   749                           wreg	equ	0xFE8
   750                           postdec1	equ	0xFE5
   751                           fsr1h	equ	0xFE2
   752                           fsr1l	equ	0xFE1
   753                           
   754                           	psect	bssCOMRAM
   755  00002E                     __pbssCOMRAM:
   756                           	opt stack 0
   757  00002E                     _rmc_code:
   758                           	opt stack 0
   759  00002E                     	ds	3
   760  000031                     _gga_code:
   761                           	opt stack 0
   762  000031                     	ds	3
   763  000034                     _rmc_index:
   764                           	opt stack 0
   765  000034                     	ds	2
   766  000036                     _gga_index:
   767                           	opt stack 0
   768  000036                     	ds	2
   769  000038                     timer_dois@flag:
   770                           	opt stack 0
   771  000038                     	ds	1
   772  000039                     _estado:
   773                           	opt stack 0
   774  000039                     	ds	1
   775  00003A                     _dado:
   776                           	opt stack 0
   777  00003A                     	ds	1
   778  00003B                     _s:
   779                           	opt stack 0
   780  00003B                     	ds	1
   781  00003C                     _Result:
   782                           	opt stack 0
   783  00003C                     	ds	1
   784  00003D                     _is_it_rmc_string:
   785                           	opt stack 0
   786  00003D                     	ds	1
   787  00003E                     _is_it_gga_string:
   788                           	opt stack 0
   789  00003E                     	ds	1
   790  00003F                     _comma_counter_rmc:
   791                           	opt stack 0
   792  00003F                     	ds	1
   793  000040                     _comma_counter_gga:
   794                           	opt stack 0
   795  000040                     	ds	1
   796  000041                     _E_W:
   797                           	opt stack 0
   798  000041                     	ds	1
   799  000042                     _n_s:
   800                           	opt stack 0
   801  000042                     	ds	1
   802  000043                     _tarefa_em_execucao:
   803                           	opt stack 0
   804  000043                     	ds	1
   805  000044                     _sinaliza_int_timer:
   806                           	opt stack 0
   807  000044                     	ds	1
   808  000045                     _data_uart_recebe:
   809                           	opt stack 0
   810  000045                     	ds	1
   811                           tblptru	equ	0xFF8
   812                           tblptrh	equ	0xFF7
   813                           tblptrl	equ	0xFF6
   814                           tablat	equ	0xFF5
   815                           postinc0	equ	0xFEE
   816                           wreg	equ	0xFE8
   817                           postdec1	equ	0xFE5
   818                           fsr1h	equ	0xFE2
   819                           fsr1l	equ	0xFE1
   820                           
   821                           	psect	bssBANK0
   822  0000EE                     __pbssBANK0:
   823                           	opt stack 0
   824  0000EE                     _tempo_tarefa:
   825                           	opt stack 0
   826  0000EE                     	ds	4
   827  0000F2                     _p_tarefas:
   828                           	opt stack 0
   829  0000F2                     	ds	4
   830  0000F6                     _Fsid:
   831                           	opt stack 0
   832  0000F6                     	ds	2
   833  0000F8                     _FatFs:
   834                           	opt stack 0
   835  0000F8                     	ds	2
   836  0000FA                     _rd:
   837                           	opt stack 0
   838  0000FA                     	ds	2
   839  0000FC                     _timeout_tarefa:
   840                           	opt stack 0
   841  0000FC                     	ds	2
   842  0000FE                     _CardType:
   843                           	opt stack 0
   844  0000FE                     	ds	1
   845                           tblptru	equ	0xFF8
   846                           tblptrh	equ	0xFF7
   847                           tblptrl	equ	0xFF6
   848                           tablat	equ	0xFF5
   849                           postinc0	equ	0xFEE
   850                           wreg	equ	0xFE8
   851                           postdec1	equ	0xFE5
   852                           fsr1h	equ	0xFE2
   853                           fsr1l	equ	0xFE1
   854                           
   855                           	psect	dataBANK0
   856  0000FF                     __pdataBANK0:
   857                           	opt stack 0
   858  0000FF                     _Stat:
   859                           	opt stack 0
   860  0000FF                     	ds	1
   861                           tblptru	equ	0xFF8
   862                           tblptrh	equ	0xFF7
   863                           tblptrl	equ	0xFF6
   864                           tablat	equ	0xFF5
   865                           postinc0	equ	0xFEE
   866                           wreg	equ	0xFE8
   867                           postdec1	equ	0xFE5
   868                           fsr1h	equ	0xFE2
   869                           fsr1l	equ	0xFE1
   870                           
   871                           	psect	bssBANK1
   872  000100                     __pbssBANK1:
   873                           	opt stack 0
   874  000100                     _valor_leitura_adc:
   875                           	opt stack 0
   876  000100                     	ds	38
   877  000126                     _txt:
   878                           	opt stack 0
   879  000126                     	ds	20
   880  00013A                     _gga_pointers:
   881                           	opt stack 0
   882  00013A                     	ds	20
   883  00014E                     _rmc_pointers:
   884                           	opt stack 0
   885  00014E                     	ds	12
   886  00015A                     _info_chaves:
   887                           	opt stack 0
   888  00015A                     	ds	7
   889  000161                     _fileSize:
   890                           	opt stack 0
   891  000161                     	ds	4
   892  000165                     _tempo_backup:
   893                           	opt stack 0
   894  000165                     	ds	4
   895  000169                     _data_buffer:
   896                           	opt stack 0
   897  000169                     	ds	15
   898  000178                     _dado_buffer:
   899                           	opt stack 0
   900  000178                     	ds	7
   901                           tblptru	equ	0xFF8
   902                           tblptrh	equ	0xFF7
   903                           tblptrl	equ	0xFF6
   904                           tablat	equ	0xFF5
   905                           postinc0	equ	0xFEE
   906                           wreg	equ	0xFE8
   907                           postdec1	equ	0xFE5
   908                           fsr1h	equ	0xFE2
   909                           fsr1l	equ	0xFE1
   910                           
   911                           	psect	dataBANK1
   912  0001C5                     __pdataBANK1:
   913                           	opt stack 0
   914  0001C5                     _fileName:
   915                           	opt stack 0
   916  0001C5                     	ds	15
   917  0001D4                     escreve_inteiro_uart@F3956:
   918                           	opt stack 0
   919  0001D4                     	ds	7
   920  0001DB                     escreve_inteiro_lcd@F3966:
   921                           	opt stack 0
   922  0001DB                     	ds	7
   923                           tblptru	equ	0xFF8
   924                           tblptrh	equ	0xFF7
   925                           tblptrl	equ	0xFF6
   926                           tablat	equ	0xFF5
   927                           postinc0	equ	0xFEE
   928                           wreg	equ	0xFE8
   929                           postdec1	equ	0xFE5
   930                           fsr1h	equ	0xFE2
   931                           fsr1l	equ	0xFE1
   932                           
   933                           	psect	bssBANK2
   934  000200                     __pbssBANK2:
   935                           	opt stack 0
   936  000200                     _gga_buffer:
   937                           	opt stack 0
   938  000200                     	ds	80
   939  000250                     _rmc_buffer:
   940                           	opt stack 0
   941  000250                     	ds	70
   942  000296                     _folder:
   943                           	opt stack 0
   944  000296                     	ds	48
   945  0002C6                     _data_buffer_32:
   946                           	opt stack 0
   947  0002C6                     	ds	32
   948                           tblptru	equ	0xFF8
   949                           tblptrh	equ	0xFF7
   950                           tblptrl	equ	0xFF6
   951                           tablat	equ	0xFF5
   952                           postinc0	equ	0xFEE
   953                           wreg	equ	0xFE8
   954                           postdec1	equ	0xFE5
   955                           fsr1h	equ	0xFE2
   956                           fsr1l	equ	0xFE1
   957                           
   958                           	psect	bssBIGRAM
   959  000350                     __pbssBIGRAM:
   960                           	opt stack 0
   961  000350                     _fs:
   962                           	opt stack 0
   963  000350                     	ds	558
   964                           tblptru	equ	0xFF8
   965                           tblptrh	equ	0xFF7
   966                           tblptrl	equ	0xFF6
   967                           tablat	equ	0xFF5
   968                           postinc0	equ	0xFEE
   969                           wreg	equ	0xFE8
   970                           postdec1	equ	0xFE5
   971                           fsr1h	equ	0xFE2
   972                           fsr1l	equ	0xFE1
   973                           
   974                           	psect	cstackBANK3
   975  000300                     __pcstackBANK3:
   976                           	opt stack 0
   977  000300                     f_open@sfn:
   978                           	opt stack 0
   979                           
   980                           ; 12 bytes @ 0x0
   981  000300                     	ds	12
   982  00030C                     f_open@cl:
   983                           	opt stack 0
   984                           
   985                           ; 4 bytes @ 0xC
   986  00030C                     	ds	4
   987  000310                     f_open@dw:
   988                           	opt stack 0
   989                           
   990                           ; 4 bytes @ 0x10
   991  000310                     	ds	4
   992  000314                     f_open@res:
   993                           	opt stack 0
   994                           
   995                           ; 1 bytes @ 0x14
   996  000314                     	ds	1
   997  000315                     f_open@dir:
   998                           	opt stack 0
   999                           
  1000                           ; 2 bytes @ 0x15
  1001  000315                     	ds	2
  1002  000317                     f_open@dj:
  1003                           	opt stack 0
  1004                           
  1005                           ; 22 bytes @ 0x17
  1006  000317                     	ds	22
  1007  00032D                     SDCard@bw:
  1008                           	opt stack 0
  1009                           
  1010                           ; 2 bytes @ 0x2D
  1011  00032D                     	ds	2
  1012  00032F                     SDCard@FResult:
  1013                           	opt stack 0
  1014                           
  1015                           ; 1 bytes @ 0x2F
  1016  00032F                     	ds	1
  1017  000330                     SDCard@fil:
  1018                           	opt stack 0
  1019                           
  1020                           ; 32 bytes @ 0x30
  1021  000330                     	ds	32
  1022                           tblptru	equ	0xFF8
  1023                           tblptrh	equ	0xFF7
  1024                           tblptrl	equ	0xFF6
  1025                           tablat	equ	0xFF5
  1026                           postinc0	equ	0xFEE
  1027                           wreg	equ	0xFE8
  1028                           postdec1	equ	0xFE5
  1029                           fsr1h	equ	0xFE2
  1030                           fsr1l	equ	0xFE1
  1031                           
  1032                           	psect	cstackBANK1
  1033  00017F                     __pcstackBANK1:
  1034                           	opt stack 0
  1035  00017F                     ??_f_write:
  1036  00017F                     ??_dir_alloc:
  1037  00017F                     dir_find@c:
  1038                           	opt stack 0
  1039  00017F                     f_lseek@ifptr:
  1040                           	opt stack 0
  1041  00017F                     find_volume@br:
  1042                           	opt stack 0
  1043                           
  1044                           ; 16 bytes @ 0x0
  1045  00017F                     	ds	1
  1046  000180                     dir_find@dir:
  1047                           	opt stack 0
  1048                           
  1049                           ; 2 bytes @ 0x1
  1050  000180                     	ds	2
  1051  000182                     dir_find@res:
  1052                           	opt stack 0
  1053  000182                     dir_alloc@n:
  1054                           	opt stack 0
  1055                           
  1056                           ; 2 bytes @ 0x3
  1057  000182                     	ds	1
  1058  000183                     f_lseek@res:
  1059                           	opt stack 0
  1060  000183                     follow_path@dp:
  1061                           	opt stack 0
  1062                           
  1063                           ; 2 bytes @ 0x4
  1064  000183                     	ds	1
  1065  000184                     dir_alloc@res:
  1066                           	opt stack 0
  1067  000184                     f_lseek@nsect:
  1068                           	opt stack 0
  1069                           
  1070                           ; 4 bytes @ 0x5
  1071  000184                     	ds	1
  1072  000185                     dir_register@dp:
  1073                           	opt stack 0
  1074  000185                     follow_path@path:
  1075                           	opt stack 0
  1076                           
  1077                           ; 2 bytes @ 0x6
  1078  000185                     	ds	2
  1079  000187                     dir_register@res:
  1080                           	opt stack 0
  1081  000187                     follow_path@dir:
  1082                           	opt stack 0
  1083                           
  1084                           ; 2 bytes @ 0x8
  1085  000187                     	ds	1
  1086  000188                     f_lseek@bcs:
  1087                           	opt stack 0
  1088                           
  1089                           ; 4 bytes @ 0x9
  1090  000188                     	ds	1
  1091  000189                     follow_path@ns:
  1092                           	opt stack 0
  1093                           
  1094                           ; 1 bytes @ 0xA
  1095  000189                     	ds	1
  1096  00018A                     follow_path@res:
  1097                           	opt stack 0
  1098                           
  1099                           ; 1 bytes @ 0xB
  1100  00018A                     	ds	2
  1101  00018C                     f_lseek@clst:
  1102                           	opt stack 0
  1103                           
  1104                           ; 4 bytes @ 0xD
  1105  00018C                     	ds	3
  1106  00018F                     f_write@res:
  1107                           	opt stack 0
  1108  00018F                     _find_volume$2847:
  1109                           	opt stack 0
  1110                           
  1111                           ; 4 bytes @ 0x10
  1112  00018F                     	ds	1
  1113  000190                     f_write@wbuff:
  1114                           	opt stack 0
  1115                           
  1116                           ; 2 bytes @ 0x11
  1117  000190                     	ds	2
  1118  000192                     f_write@csect:
  1119                           	opt stack 0
  1120                           
  1121                           ; 1 bytes @ 0x13
  1122  000192                     	ds	1
  1123  000193                     _find_volume$2848:
  1124                           	opt stack 0
  1125  000193                     f_write@cc:
  1126                           	opt stack 0
  1127                           
  1128                           ; 2 bytes @ 0x14
  1129  000193                     	ds	2
  1130  000195                     find_volume@szbfat:
  1131                           	opt stack 0
  1132  000195                     f_write@sect:
  1133                           	opt stack 0
  1134                           
  1135                           ; 4 bytes @ 0x16
  1136  000195                     	ds	4
  1137  000199                     find_volume@pt:
  1138                           	opt stack 0
  1139  000199                     f_write@clst:
  1140                           	opt stack 0
  1141                           
  1142                           ; 4 bytes @ 0x1A
  1143  000199                     	ds	2
  1144  00019B                     find_volume@sysect:
  1145                           	opt stack 0
  1146                           
  1147                           ; 4 bytes @ 0x1C
  1148  00019B                     	ds	2
  1149  00019D                     f_write@wcnt:
  1150                           	opt stack 0
  1151                           
  1152                           ; 2 bytes @ 0x1E
  1153  00019D                     	ds	2
  1154  00019F                     find_volume@vol:
  1155                           	opt stack 0
  1156                           
  1157                           ; 2 bytes @ 0x20
  1158  00019F                     	ds	2
  1159  0001A1                     find_volume@nrsv:
  1160                           	opt stack 0
  1161                           
  1162                           ; 2 bytes @ 0x22
  1163  0001A1                     	ds	2
  1164  0001A3                     find_volume@tsect:
  1165                           	opt stack 0
  1166                           
  1167                           ; 4 bytes @ 0x24
  1168  0001A3                     	ds	4
  1169  0001A7                     find_volume@nclst:
  1170                           	opt stack 0
  1171                           
  1172                           ; 4 bytes @ 0x28
  1173  0001A7                     	ds	4
  1174  0001AB                     find_volume@stat:
  1175                           	opt stack 0
  1176                           
  1177                           ; 1 bytes @ 0x2C
  1178  0001AB                     	ds	1
  1179  0001AC                     find_volume@fasize:
  1180                           	opt stack 0
  1181                           
  1182                           ; 4 bytes @ 0x2D
  1183  0001AC                     	ds	4
  1184  0001B0                     find_volume@bsect:
  1185                           	opt stack 0
  1186                           
  1187                           ; 4 bytes @ 0x31
  1188  0001B0                     	ds	4
  1189  0001B4                     find_volume@i:
  1190                           	opt stack 0
  1191                           
  1192                           ; 2 bytes @ 0x35
  1193  0001B4                     	ds	2
  1194  0001B6                     find_volume@fmt:
  1195                           	opt stack 0
  1196                           
  1197                           ; 1 bytes @ 0x37
  1198  0001B6                     	ds	1
  1199  0001B7                     find_volume@fs:
  1200                           	opt stack 0
  1201                           
  1202                           ; 2 bytes @ 0x38
  1203  0001B7                     	ds	2
  1204  0001B9                     f_open@fp:
  1205                           	opt stack 0
  1206                           
  1207                           ; 2 bytes @ 0x3A
  1208  0001B9                     	ds	2
  1209  0001BB                     f_open@path:
  1210                           	opt stack 0
  1211                           
  1212                           ; 2 bytes @ 0x3C
  1213  0001BB                     	ds	2
  1214  0001BD                     f_open@mode:
  1215                           	opt stack 0
  1216                           
  1217                           ; 1 bytes @ 0x3E
  1218  0001BD                     	ds	1
  1219  0001BE                     ??_f_open:
  1220                           
  1221                           ; 1 bytes @ 0x3F
  1222  0001BE                     	ds	4
  1223  0001C2                     ??_escalonador:
  1224                           
  1225                           ; 1 bytes @ 0x43
  1226  0001C2                     	ds	2
  1227  0001C4                     escalonador@cont:
  1228                           	opt stack 0
  1229                           
  1230                           ; 1 bytes @ 0x45
  1231  0001C4                     	ds	1
  1232                           tblptru	equ	0xFF8
  1233                           tblptrh	equ	0xFF7
  1234                           tblptrl	equ	0xFF6
  1235                           tablat	equ	0xFF5
  1236                           postinc0	equ	0xFEE
  1237                           wreg	equ	0xFE8
  1238                           postdec1	equ	0xFE5
  1239                           fsr1h	equ	0xFE2
  1240                           fsr1l	equ	0xFE1
  1241                           
  1242                           	psect	cstackBANK0
  1243  000060                     __pcstackBANK0:
  1244                           	opt stack 0
  1245  000060                     ??_clust2sect:
  1246  000060                     _create_name$2743:
  1247                           	opt stack 0
  1248  000060                     itoa@buf:
  1249                           	opt stack 0
  1250  000060                     mensagem_inicial@msg_linha_um:
  1251                           	opt stack 0
  1252                           
  1253                           ; 17 bytes @ 0x0
  1254  000060                     	ds	2
  1255  000062                     create_name@si:
  1256                           	opt stack 0
  1257  000062                     itoa@val:
  1258                           	opt stack 0
  1259                           
  1260                           ; 2 bytes @ 0x2
  1261  000062                     	ds	2
  1262  000064                     create_name@b:
  1263                           	opt stack 0
  1264  000064                     itoa@base:
  1265                           	opt stack 0
  1266                           
  1267                           ; 2 bytes @ 0x4
  1268  000064                     	ds	1
  1269  000065                     create_name@ni:
  1270                           	opt stack 0
  1271                           
  1272                           ; 2 bytes @ 0x5
  1273  000065                     	ds	1
  1274  000066                     escreve_inteiro_lcd@texto:
  1275                           	opt stack 0
  1276                           
  1277                           ; 7 bytes @ 0x6
  1278  000066                     	ds	1
  1279  000067                     create_name@d:
  1280                           	opt stack 0
  1281                           
  1282                           ; 1 bytes @ 0x7
  1283  000067                     	ds	1
  1284  000068                     create_name@p:
  1285                           	opt stack 0
  1286                           
  1287                           ; 2 bytes @ 0x8
  1288  000068                     	ds	2
  1289  00006A                     create_name@sfn:
  1290                           	opt stack 0
  1291                           
  1292                           ; 2 bytes @ 0xA
  1293  00006A                     	ds	2
  1294  00006C                     create_name@i:
  1295                           	opt stack 0
  1296                           
  1297                           ; 2 bytes @ 0xC
  1298  00006C                     	ds	1
  1299  00006D                     ___send_cmd@arg:
  1300                           	opt stack 0
  1301                           
  1302                           ; 4 bytes @ 0xD
  1303  00006D                     	ds	1
  1304  00006E                     create_name@c:
  1305                           	opt stack 0
  1306                           
  1307                           ; 1 bytes @ 0xE
  1308  00006E                     	ds	3
  1309  000071                     ___send_cmd@n:
  1310                           	opt stack 0
  1311  000071                     mensagem_inicial@msg_dois:
  1312                           	opt stack 0
  1313                           
  1314                           ; 17 bytes @ 0x11
  1315  000071                     	ds	1
  1316  000072                     ___send_cmd@res:
  1317                           	opt stack 0
  1318                           
  1319                           ; 1 bytes @ 0x12
  1320  000072                     	ds	1
  1321  000073                     ___send_cmd@argument:
  1322                           	opt stack 0
  1323                           
  1324                           ; 1 bytes @ 0x13
  1325  000073                     	ds	1
  1326  000074                     ___send_cmd@cmd:
  1327                           	opt stack 0
  1328                           
  1329                           ; 1 bytes @ 0x14
  1330  000074                     	ds	1
  1331  000075                     send_cmd@arg:
  1332                           	opt stack 0
  1333                           
  1334                           ; 4 bytes @ 0x15
  1335  000075                     	ds	4
  1336  000079                     send_cmd@cmd:
  1337                           	opt stack 0
  1338                           
  1339                           ; 1 bytes @ 0x19
  1340  000079                     	ds	1
  1341  00007A                     send_cmd@res:
  1342                           	opt stack 0
  1343                           
  1344                           ; 1 bytes @ 0x1A
  1345  00007A                     	ds	1
  1346  00007B                     ??_disk_initialize:
  1347  00007B                     disk_ioctl@cmd:
  1348                           	opt stack 0
  1349  00007B                     disk_read@buff:
  1350                           	opt stack 0
  1351  00007B                     disk_write@buff:
  1352                           	opt stack 0
  1353                           
  1354                           ; 2 bytes @ 0x1B
  1355  00007B                     	ds	1
  1356  00007C                     disk_ioctl@buff:
  1357                           	opt stack 0
  1358                           
  1359                           ; 2 bytes @ 0x1C
  1360  00007C                     	ds	1
  1361  00007D                     disk_initialize@pdrv:
  1362                           	opt stack 0
  1363  00007D                     disk_read@sector:
  1364                           	opt stack 0
  1365  00007D                     disk_write@sector:
  1366                           	opt stack 0
  1367                           
  1368                           ; 4 bytes @ 0x1D
  1369  00007D                     	ds	1
  1370  00007E                     ??_disk_ioctl:
  1371  00007E                     disk_initialize@ocr:
  1372                           	opt stack 0
  1373                           
  1374                           ; 4 bytes @ 0x1E
  1375  00007E                     	ds	3
  1376  000081                     disk_read@count:
  1377                           	opt stack 0
  1378  000081                     disk_write@count:
  1379                           	opt stack 0
  1380                           
  1381                           ; 2 bytes @ 0x21
  1382  000081                     	ds	1
  1383  000082                     _disk_initialize$2252:
  1384                           	opt stack 0
  1385                           
  1386                           ; 2 bytes @ 0x22
  1387  000082                     	ds	1
  1388  000083                     ??_disk_write:
  1389  000083                     disk_read@pdrv:
  1390                           	opt stack 0
  1391                           
  1392                           ; 1 bytes @ 0x23
  1393  000083                     	ds	1
  1394  000084                     disk_initialize@cmd:
  1395                           	opt stack 0
  1396  000084                     disk_write@pdrv:
  1397                           	opt stack 0
  1398  000084                     _disk_read$2261:
  1399                           	opt stack 0
  1400                           
  1401                           ; 2 bytes @ 0x24
  1402  000084                     	ds	1
  1403  000085                     disk_initialize@ty:
  1404                           	opt stack 0
  1405  000085                     sync_window@fs:
  1406                           	opt stack 0
  1407                           
  1408                           ; 2 bytes @ 0x25
  1409  000085                     	ds	1
  1410  000086                     disk_read@cmd:
  1411                           	opt stack 0
  1412  000086                     disk_initialize@tmr:
  1413                           	opt stack 0
  1414                           
  1415                           ; 2 bytes @ 0x26
  1416  000086                     	ds	1
  1417  000087                     ??_sync_window:
  1418                           
  1419                           ; 1 bytes @ 0x27
  1420  000087                     	ds	1
  1421  000088                     disk_initialize@n:
  1422                           	opt stack 0
  1423                           
  1424                           ; 1 bytes @ 0x28
  1425  000088                     	ds	3
  1426  00008B                     disk_ioctl@pdrv:
  1427                           	opt stack 0
  1428                           
  1429                           ; 1 bytes @ 0x2B
  1430  00008B                     	ds	1
  1431  00008C                     disk_ioctl@csd:
  1432                           	opt stack 0
  1433                           
  1434                           ; 16 bytes @ 0x2C
  1435  00008C                     	ds	7
  1436  000093                     sync_window@res:
  1437                           	opt stack 0
  1438                           
  1439                           ; 1 bytes @ 0x33
  1440  000093                     	ds	1
  1441  000094                     sync_window@nf:
  1442                           	opt stack 0
  1443                           
  1444                           ; 2 bytes @ 0x34
  1445  000094                     	ds	2
  1446  000096                     sync_window@wsect:
  1447                           	opt stack 0
  1448                           
  1449                           ; 4 bytes @ 0x36
  1450  000096                     	ds	4
  1451  00009A                     move_window@fs:
  1452                           	opt stack 0
  1453                           
  1454                           ; 2 bytes @ 0x3A
  1455  00009A                     	ds	2
  1456  00009C                     disk_ioctl@csize:
  1457                           	opt stack 0
  1458  00009C                     move_window@sector:
  1459                           	opt stack 0
  1460                           
  1461                           ; 4 bytes @ 0x3C
  1462  00009C                     	ds	4
  1463  0000A0                     disk_ioctl@res:
  1464                           	opt stack 0
  1465                           
  1466                           ; 1 bytes @ 0x40
  1467  0000A0                     	ds	1
  1468  0000A1                     disk_ioctl@n:
  1469                           	opt stack 0
  1470                           
  1471                           ; 1 bytes @ 0x41
  1472  0000A1                     	ds	1
  1473  0000A2                     disk_ioctl@ptr:
  1474                           	opt stack 0
  1475                           
  1476                           ; 2 bytes @ 0x42
  1477  0000A2                     	ds	2
  1478  0000A4                     move_window@res:
  1479                           	opt stack 0
  1480  0000A4                     sync_fs@fs:
  1481                           	opt stack 0
  1482                           
  1483                           ; 2 bytes @ 0x44
  1484  0000A4                     	ds	1
  1485  0000A5                     ?_get_fat:
  1486                           	opt stack 0
  1487  0000A5                     get_fat@fs:
  1488                           	opt stack 0
  1489  0000A5                     put_fat@fs:
  1490                           	opt stack 0
  1491  0000A5                     check_fs@fs:
  1492                           	opt stack 0
  1493                           
  1494                           ; 2 bytes @ 0x45
  1495  0000A5                     	ds	1
  1496  0000A6                     ??_sync_fs:
  1497                           
  1498                           ; 1 bytes @ 0x46
  1499  0000A6                     	ds	1
  1500  0000A7                     get_fat@clst:
  1501                           	opt stack 0
  1502  0000A7                     put_fat@clst:
  1503                           	opt stack 0
  1504  0000A7                     check_fs@sect:
  1505                           	opt stack 0
  1506                           
  1507                           ; 4 bytes @ 0x47
  1508  0000A7                     	ds	4
  1509  0000AB                     ??_get_fat:
  1510  0000AB                     ??_check_fs:
  1511  0000AB                     put_fat@val:
  1512                           	opt stack 0
  1513                           
  1514                           ; 4 bytes @ 0x4B
  1515  0000AB                     	ds	3
  1516  0000AE                     sync_fs@res:
  1517                           	opt stack 0
  1518                           
  1519                           ; 1 bytes @ 0x4E
  1520  0000AE                     	ds	1
  1521  0000AF                     ??_put_fat:
  1522  0000AF                     find_volume@rfs:
  1523                           	opt stack 0
  1524  0000AF                     f_sync@fp:
  1525                           	opt stack 0
  1526                           
  1527                           ; 2 bytes @ 0x4F
  1528  0000AF                     	ds	2
  1529  0000B1                     find_volume@path:
  1530                           	opt stack 0
  1531  0000B1                     f_sync@tm:
  1532                           	opt stack 0
  1533                           
  1534                           ; 4 bytes @ 0x51
  1535  0000B1                     	ds	2
  1536  0000B3                     find_volume@wmode:
  1537                           	opt stack 0
  1538  0000B3                     _get_fat$2493:
  1539                           	opt stack 0
  1540                           
  1541                           ; 2 bytes @ 0x53
  1542  0000B3                     	ds	1
  1543  0000B4                     ??_find_volume:
  1544                           
  1545                           ; 1 bytes @ 0x54
  1546  0000B4                     	ds	1
  1547  0000B5                     f_sync@res:
  1548                           	opt stack 0
  1549  0000B5                     get_fat@wc:
  1550                           	opt stack 0
  1551                           
  1552                           ; 2 bytes @ 0x55
  1553  0000B5                     	ds	1
  1554  0000B6                     f_sync@dir:
  1555                           	opt stack 0
  1556                           
  1557                           ; 2 bytes @ 0x56
  1558  0000B6                     	ds	1
  1559  0000B7                     get_fat@p:
  1560                           	opt stack 0
  1561  0000B7                     _put_fat$2519:
  1562                           	opt stack 0
  1563                           
  1564                           ; 2 bytes @ 0x57
  1565  0000B7                     	ds	1
  1566  0000B8                     f_close@fp:
  1567                           	opt stack 0
  1568                           
  1569                           ; 2 bytes @ 0x58
  1570  0000B8                     	ds	1
  1571  0000B9                     _put_fat$2520:
  1572                           	opt stack 0
  1573  0000B9                     get_fat@val:
  1574                           	opt stack 0
  1575                           
  1576                           ; 4 bytes @ 0x59
  1577  0000B9                     	ds	1
  1578  0000BA                     f_close@res:
  1579                           	opt stack 0
  1580                           
  1581                           ; 1 bytes @ 0x5A
  1582  0000BA                     	ds	1
  1583  0000BB                     put_fat@bc:
  1584                           	opt stack 0
  1585                           
  1586                           ; 2 bytes @ 0x5B
  1587  0000BB                     	ds	1
  1588  0000BC                     f_mount@fs:
  1589                           	opt stack 0
  1590                           
  1591                           ; 2 bytes @ 0x5C
  1592  0000BC                     	ds	1
  1593  0000BD                     put_fat@res:
  1594                           	opt stack 0
  1595  0000BD                     get_fat@bc:
  1596                           	opt stack 0
  1597                           
  1598                           ; 2 bytes @ 0x5D
  1599  0000BD                     	ds	1
  1600  0000BE                     put_fat@p:
  1601                           	opt stack 0
  1602  0000BE                     f_mount@path:
  1603                           	opt stack 0
  1604                           
  1605                           ; 2 bytes @ 0x5E
  1606  0000BE                     	ds	1
  1607  0000BF                     dir_sdi@dp:
  1608                           	opt stack 0
  1609                           
  1610                           ; 2 bytes @ 0x5F
  1611  0000BF                     	ds	1
  1612  0000C0                     ?_create_chain:
  1613                           	opt stack 0
  1614  0000C0                     f_mount@opt:
  1615                           	opt stack 0
  1616  0000C0                     remove_chain@fs:
  1617                           	opt stack 0
  1618  0000C0                     create_chain@fs:
  1619                           	opt stack 0
  1620                           
  1621                           ; 2 bytes @ 0x60
  1622  0000C0                     	ds	1
  1623  0000C1                     f_mount@res:
  1624                           	opt stack 0
  1625  0000C1                     dir_sdi@idx:
  1626                           	opt stack 0
  1627                           
  1628                           ; 2 bytes @ 0x61
  1629  0000C1                     	ds	1
  1630  0000C2                     f_mount@cfs:
  1631                           	opt stack 0
  1632  0000C2                     remove_chain@clst:
  1633                           	opt stack 0
  1634  0000C2                     create_chain@clst:
  1635                           	opt stack 0
  1636                           
  1637                           ; 4 bytes @ 0x62
  1638  0000C2                     	ds	1
  1639  0000C3                     ??_dir_sdi:
  1640                           
  1641                           ; 1 bytes @ 0x63
  1642  0000C3                     	ds	1
  1643  0000C4                     f_mount@rp:
  1644                           	opt stack 0
  1645                           
  1646                           ; 2 bytes @ 0x64
  1647  0000C4                     	ds	2
  1648  0000C6                     f_mount@vol:
  1649                           	opt stack 0
  1650                           
  1651                           ; 2 bytes @ 0x66
  1652  0000C6                     	ds	4
  1653  0000CA                     remove_chain@res:
  1654                           	opt stack 0
  1655  0000CA                     create_chain@res:
  1656                           	opt stack 0
  1657  0000CA                     dir_sdi@ic:
  1658                           	opt stack 0
  1659                           
  1660                           ; 2 bytes @ 0x6A
  1661  0000CA                     	ds	1
  1662  0000CB                     remove_chain@nxt:
  1663                           	opt stack 0
  1664  0000CB                     create_chain@scl:
  1665                           	opt stack 0
  1666                           
  1667                           ; 4 bytes @ 0x6B
  1668  0000CB                     	ds	1
  1669  0000CC                     dir_sdi@sect:
  1670                           	opt stack 0
  1671                           
  1672                           ; 4 bytes @ 0x6C
  1673  0000CC                     	ds	3
  1674  0000CF                     create_chain@ncl:
  1675                           	opt stack 0
  1676                           
  1677                           ; 4 bytes @ 0x6F
  1678  0000CF                     	ds	1
  1679  0000D0                     dir_sdi@clst:
  1680                           	opt stack 0
  1681                           
  1682                           ; 4 bytes @ 0x70
  1683  0000D0                     	ds	3
  1684  0000D3                     create_chain@cs:
  1685                           	opt stack 0
  1686                           
  1687                           ; 4 bytes @ 0x73
  1688  0000D3                     	ds	4
  1689  0000D7                     dir_next@dp:
  1690                           	opt stack 0
  1691  0000D7                     f_write@fp:
  1692                           	opt stack 0
  1693  0000D7                     f_lseek@fp:
  1694                           	opt stack 0
  1695                           
  1696                           ; 2 bytes @ 0x77
  1697  0000D7                     	ds	2
  1698  0000D9                     dir_next@stretch:
  1699                           	opt stack 0
  1700  0000D9                     f_write@buff:
  1701                           	opt stack 0
  1702  0000D9                     f_lseek@ofs:
  1703                           	opt stack 0
  1704                           
  1705                           ; 4 bytes @ 0x79
  1706  0000D9                     	ds	2
  1707  0000DB                     ??_dir_next:
  1708  0000DB                     f_write@btw:
  1709                           	opt stack 0
  1710                           
  1711                           ; 2 bytes @ 0x7B
  1712  0000DB                     	ds	2
  1713  0000DD                     ??_f_lseek:
  1714  0000DD                     f_write@bw:
  1715                           	opt stack 0
  1716                           
  1717                           ; 2 bytes @ 0x7D
  1718  0000DD                     	ds	5
  1719  0000E2                     dir_next@c:
  1720                           	opt stack 0
  1721                           
  1722                           ; 2 bytes @ 0x82
  1723  0000E2                     	ds	2
  1724  0000E4                     dir_next@i:
  1725                           	opt stack 0
  1726                           
  1727                           ; 2 bytes @ 0x84
  1728  0000E4                     	ds	2
  1729  0000E6                     dir_next@clst:
  1730                           	opt stack 0
  1731                           
  1732                           ; 4 bytes @ 0x86
  1733  0000E6                     	ds	4
  1734  0000EA                     dir_alloc@dp:
  1735                           	opt stack 0
  1736  0000EA                     dir_find@dp:
  1737                           	opt stack 0
  1738                           
  1739                           ; 2 bytes @ 0x8A
  1740  0000EA                     	ds	2
  1741  0000EC                     dir_alloc@nent:
  1742                           	opt stack 0
  1743                           
  1744                           ; 2 bytes @ 0x8C
  1745  0000EC                     	ds	2
  1746                           tblptru	equ	0xFF8
  1747                           tblptrh	equ	0xFF7
  1748                           tblptrl	equ	0xFF6
  1749                           tablat	equ	0xFF5
  1750                           postinc0	equ	0xFEE
  1751                           wreg	equ	0xFE8
  1752                           postdec1	equ	0xFE5
  1753                           fsr1h	equ	0xFE2
  1754                           fsr1l	equ	0xFE1
  1755                           
  1756                           	psect	cstackCOMRAM
  1757  000001                     __pcstackCOMRAM:
  1758                           	opt stack 0
  1759  000001                     tratamento_uart@received_char:
  1760                           	opt stack 0
  1761  000001                     i2write_timer_zero@timer0:
  1762                           	opt stack 0
  1763                           
  1764                           ; 2 bytes @ 0x0
  1765  000001                     	ds	2
  1766  000003                     i2write_timer_zero@timer:
  1767                           	opt stack 0
  1768                           
  1769                           ; 2 bytes @ 0x2
  1770  000003                     	ds	2
  1771  000005                     ??_isr:
  1772                           
  1773                           ; 1 bytes @ 0x4
  1774  000005                     	ds	20
  1775  000019                     isr@cont:
  1776                           	opt stack 0
  1777                           
  1778                           ; 1 bytes @ 0x18
  1779  000019                     	ds	1
  1780  00001A                     ??_recebe_dado_SPI:
  1781  00001A                     ?_mem_cmp:
  1782                           	opt stack 0
  1783  00001A                     ?_chk_chr:
  1784                           	opt stack 0
  1785  00001A                     ?_get_ldnumber:
  1786                           	opt stack 0
  1787  00001A                     ?___wmul:
  1788                           	opt stack 0
  1789  00001A                     ?___lwdiv:
  1790                           	opt stack 0
  1791  00001A                     ?___lwmod:
  1792                           	opt stack 0
  1793  00001A                     ?_ld_clust:
  1794                           	opt stack 0
  1795  00001A                     ?___lmul:
  1796                           	opt stack 0
  1797  00001A                     ?___lldiv:
  1798                           	opt stack 0
  1799  00001A                     escreve_dado_SPI@contador:
  1800                           	opt stack 0
  1801  00001A                     delay@contador_ext:
  1802                           	opt stack 0
  1803  00001A                     disk_status@pdrv:
  1804                           	opt stack 0
  1805  00001A                     write_timer_zero@timer0:
  1806                           	opt stack 0
  1807  00001A                     mem_cpy@dst:
  1808                           	opt stack 0
  1809  00001A                     mem_set@dst:
  1810                           	opt stack 0
  1811  00001A                     mem_cmp@dst:
  1812                           	opt stack 0
  1813  00001A                     chk_chr@str:
  1814                           	opt stack 0
  1815  00001A                     ld_clust@fs:
  1816                           	opt stack 0
  1817  00001A                     st_clust@dir:
  1818                           	opt stack 0
  1819  00001A                     get_ldnumber@path:
  1820                           	opt stack 0
  1821  00001A                     ___wmul@multiplier:
  1822                           	opt stack 0
  1823  00001A                     ___lwdiv@dividend:
  1824                           	opt stack 0
  1825  00001A                     ___lwmod@dividend:
  1826                           	opt stack 0
  1827  00001A                     ___lmul@multiplier:
  1828                           	opt stack 0
  1829  00001A                     ___lldiv@dividend:
  1830                           	opt stack 0
  1831                           
  1832                           ; 4 bytes @ 0x19
  1833  00001A                     	ds	1
  1834  00001B                     escreve_dado_SPI@data_to_shrc:
  1835                           	opt stack 0
  1836  00001B                     delay@contador_int:
  1837                           	opt stack 0
  1838  00001B                     validate@obj:
  1839                           	opt stack 0
  1840                           
  1841                           ; 2 bytes @ 0x1A
  1842  00001B                     	ds	1
  1843  00001C                     ??_dummy_clocks:
  1844  00001C                     ??_get_ldnumber:
  1845  00001C                     recebe_dado_SPI@contador:
  1846                           	opt stack 0
  1847  00001C                     escreve_cmd_lcd@comando:
  1848                           	opt stack 0
  1849  00001C                     endereco_cursor_lcd@endereco:
  1850                           	opt stack 0
  1851  00001C                     escreve_caractere_lcd@data:
  1852                           	opt stack 0
  1853  00001C                     write_timer_zero@timer:
  1854                           	opt stack 0
  1855  00001C                     mem_cpy@src:
  1856                           	opt stack 0
  1857  00001C                     mem_set@val:
  1858                           	opt stack 0
  1859  00001C                     mem_cmp@src:
  1860                           	opt stack 0
  1861  00001C                     chk_chr@chr:
  1862                           	opt stack 0
  1863  00001C                     ld_clust@dir:
  1864                           	opt stack 0
  1865  00001C                     ___wmul@multiplicand:
  1866                           	opt stack 0
  1867  00001C                     ___lwdiv@divisor:
  1868                           	opt stack 0
  1869  00001C                     ___lwmod@divisor:
  1870                           	opt stack 0
  1871  00001C                     st_clust@cl:
  1872                           	opt stack 0
  1873                           
  1874                           ; 4 bytes @ 0x1B
  1875  00001C                     	ds	1
  1876  00001D                     ??_init_lcd:
  1877  00001D                     ??_validate:
  1878  00001D                     response@buff:
  1879                           	opt stack 0
  1880  00001D                     posicao_cursor_lcd@coluna:
  1881                           	opt stack 0
  1882  00001D                     escreve_frase_ram_lcd@buffer:
  1883                           	opt stack 0
  1884  00001D                     wait_ready@tmr:
  1885                           	opt stack 0
  1886                           
  1887                           ; 2 bytes @ 0x1C
  1888  00001D                     	ds	1
  1889  00001E                     ??_chk_chr:
  1890  00001E                     ??_ld_clust:
  1891  00001E                     dummy_clocks@n:
  1892                           	opt stack 0
  1893  00001E                     posicao_cursor_lcd@linha:
  1894                           	opt stack 0
  1895  00001E                     ___lwdiv@counter:
  1896                           	opt stack 0
  1897  00001E                     ___lwmod@counter:
  1898                           	opt stack 0
  1899  00001E                     mem_cpy@cnt:
  1900                           	opt stack 0
  1901  00001E                     mem_set@cnt:
  1902                           	opt stack 0
  1903  00001E                     mem_cmp@cnt:
  1904                           	opt stack 0
  1905  00001E                     _get_ldnumber$2767:
  1906                           	opt stack 0
  1907  00001E                     ___wmul@product:
  1908                           	opt stack 0
  1909  00001E                     ___lmul@multiplicand:
  1910                           	opt stack 0
  1911  00001E                     ___lldiv@divisor:
  1912                           	opt stack 0
  1913                           
  1914                           ; 4 bytes @ 0x1D
  1915  00001E                     	ds	1
  1916  00001F                     posicao_cursor_lcd@endereco:
  1917                           	opt stack 0
  1918  00001F                     dummy_clocks@i:
  1919                           	opt stack 0
  1920  00001F                     ___lwdiv@quotient:
  1921                           	opt stack 0
  1922  00001F                     xmit_datablock@buff:
  1923                           	opt stack 0
  1924                           
  1925                           ; 3 bytes @ 0x1E
  1926  00001F                     	ds	1
  1927  000020                     ??_mensagem_inicial:
  1928  000020                     ??_mem_cpy:
  1929  000020                     ??_mem_cmp:
  1930  000020                     rcvr_datablock@buff:
  1931                           	opt stack 0
  1932  000020                     mem_set@d:
  1933                           	opt stack 0
  1934  000020                     get_ldnumber@tp:
  1935                           	opt stack 0
  1936                           
  1937                           ; 2 bytes @ 0x1F
  1938  000020                     	ds	1
  1939  000021                     validate@fil:
  1940                           	opt stack 0
  1941  000021                     utoa@buf:
  1942                           	opt stack 0
  1943                           
  1944                           ; 2 bytes @ 0x20
  1945  000021                     	ds	1
  1946  000022                     xmit_datablock@token:
  1947                           	opt stack 0
  1948  000022                     rcvr_datablock@btr:
  1949                           	opt stack 0
  1950  000022                     mem_cpy@d:
  1951                           	opt stack 0
  1952  000022                     create_name@dp:
  1953                           	opt stack 0
  1954  000022                     get_ldnumber@vol:
  1955                           	opt stack 0
  1956  000022                     ___lmul@product:
  1957                           	opt stack 0
  1958  000022                     ___lldiv@quotient:
  1959                           	opt stack 0
  1960                           
  1961                           ; 4 bytes @ 0x21
  1962  000022                     	ds	1
  1963  000023                     xmit_datablock@i:
  1964                           	opt stack 0
  1965  000023                     mem_cmp@d:
  1966                           	opt stack 0
  1967  000023                     utoa@val:
  1968                           	opt stack 0
  1969                           
  1970                           ; 2 bytes @ 0x22
  1971  000023                     	ds	1
  1972  000024                     ??_rcvr_datablock:
  1973  000024                     mem_cpy@s:
  1974                           	opt stack 0
  1975  000024                     create_name@path:
  1976                           	opt stack 0
  1977  000024                     get_ldnumber@i:
  1978                           	opt stack 0
  1979  000024                     ld_clust@cl:
  1980                           	opt stack 0
  1981                           
  1982                           ; 4 bytes @ 0x23
  1983  000024                     	ds	1
  1984  000025                     xmit_datablock@resp:
  1985                           	opt stack 0
  1986  000025                     mem_cmp@s:
  1987                           	opt stack 0
  1988  000025                     utoa@base:
  1989                           	opt stack 0
  1990                           
  1991                           ; 2 bytes @ 0x24
  1992  000025                     	ds	1
  1993  000026                     ??_create_name:
  1994  000026                     ?_clust2sect:
  1995                           	opt stack 0
  1996  000026                     ___lldiv@counter:
  1997                           	opt stack 0
  1998  000026                     rcvr_datablock@tmr:
  1999                           	opt stack 0
  2000  000026                     clust2sect@fs:
  2001                           	opt stack 0
  2002  000026                     get_ldnumber@tt:
  2003                           	opt stack 0
  2004                           
  2005                           ; 2 bytes @ 0x25
  2006  000026                     	ds	1
  2007  000027                     mem_cmp@r:
  2008                           	opt stack 0
  2009  000027                     utoa@v:
  2010                           	opt stack 0
  2011                           
  2012                           ; 2 bytes @ 0x26
  2013  000027                     	ds	1
  2014  000028                     rcvr_datablock@token:
  2015                           	opt stack 0
  2016  000028                     clust2sect@clst:
  2017                           	opt stack 0
  2018                           
  2019                           ; 4 bytes @ 0x27
  2020  000028                     	ds	1
  2021  000029                     utoa@c:
  2022                           	opt stack 0
  2023                           
  2024                           ; 1 bytes @ 0x28
  2025  000029                     	ds	1
  2026  00002A                     itoa@cp:
  2027                           	opt stack 0
  2028                           
  2029                           ; 2 bytes @ 0x29
  2030  00002A                     	ds	2
  2031  00002C                     escreve_inteiro_lcd@valor:
  2032                           	opt stack 0
  2033                           
  2034                           ; 2 bytes @ 0x2B
  2035  00002C                     	ds	2
  2036  00002E                     tblptru	equ	0xFF8
  2037                           tblptrh	equ	0xFF7
  2038                           tblptrl	equ	0xFF6
  2039                           tablat	equ	0xFF5
  2040                           postinc0	equ	0xFEE
  2041                           wreg	equ	0xFE8
  2042                           postdec1	equ	0xFE5
  2043                           fsr1h	equ	0xFE2
  2044                           fsr1l	equ	0xFE1
  2045                           
  2046                           ; 1 bytes @ 0x2D
  2047 ;;
  2048 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2049 ;;
  2050 ;; *************** function _main *****************
  2051 ;; Defined at:
  2052 ;;		line 208 in file "main.c"
  2053 ;; Parameters:    Size  Location     Type
  2054 ;;		None
  2055 ;; Auto vars:     Size  Location     Type
  2056 ;;		None
  2057 ;; Return value:  Size  Location     Type
  2058 ;;                  1    wreg      void 
  2059 ;; Registers used:
  2060 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2061 ;; Tracked objects:
  2062 ;;		On entry : 0/0
  2063 ;;		On exit  : 0/0
  2064 ;;		Unchanged: 0/0
  2065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2066 ;;      Params:         0       0       0       0       0       0       0       0       0
  2067 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2068 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2069 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2070 ;;Total ram usage:        0 bytes
  2071 ;; Hardware stack levels required when called:   19
  2072 ;; This function calls:
  2073 ;;		_escalonador
  2074 ;;		_inicializa_shrc
  2075 ;;		_inicializa_tarefas
  2076 ;;		_init_hardware
  2077 ;;		_init_lcd
  2078 ;;		_leitura_chaves_sistema
  2079 ;;		_mensagem_inicial
  2080 ;; This function is called by:
  2081 ;;		Startup code after reset
  2082 ;; This function uses a non-reentrant model
  2083 ;;
  2084                           
  2085                           	psect	text0
  2086  0059D2                     __ptext0:
  2087                           	opt stack 0
  2088  0059D2                     _main:
  2089                           	opt stack 12
  2090                           
  2091                           ;main.c: 210: init_hardware();
  2092                           
  2093                           ;incstack = 0
  2094  0059D2  EC95  F02D         	call	_init_hardware	;wreg free
  2095                           
  2096                           ;main.c: 212: init_lcd();
  2097  0059D6  ECB3  F027         	call	_init_lcd	;wreg free
  2098                           
  2099                           ;main.c: 213: inicializa_shrc();
  2100  0059DA  ECD3  F02D         	call	_inicializa_shrc	;wreg free
  2101                           
  2102                           ;main.c: 215: mensagem_inicial();
  2103  0059DE  ECD6  F028         	call	_mensagem_inicial	;wreg free
  2104                           
  2105                           ;main.c: 216: inicializa_tarefas();
  2106  0059E2  EC3D  F02D         	call	_inicializa_tarefas	;wreg free
  2107                           
  2108                           ;main.c: 218: ADCON1 = 0X0F;
  2109  0059E6  0E0F               	movlw	15
  2110  0059E8  6EC1               	movwf	4033,c	;volatile
  2111  0059EA                     
  2112                           ;main.c: 220: {
  2113                           ;main.c: 222: if ((sinaliza_int_timer == 1) && (2))
  2114  0059EA  0444               	decf	_sinaliza_int_timer,w,c
  2115  0059EC  A4D8               	btfss	status,2,c
  2116  0059EE  D004               	goto	l88
  2117                           
  2118                           ;main.c: 223: {
  2119                           ;main.c: 224: sinaliza_int_timer = 0;
  2120  0059F0  0E00               	movlw	0
  2121  0059F2  6E44               	movwf	_sinaliza_int_timer,c
  2122                           
  2123                           ;main.c: 225: escalonador();
  2124  0059F4  ECB3  F026         	call	_escalonador	;wreg free
  2125  0059F8                     l88:
  2126                           
  2127                           ;main.c: 226: }
  2128                           ;main.c: 227: leitura_chaves_sistema();
  2129  0059F8  ECAE  F02C         	call	_leitura_chaves_sistema	;wreg free
  2130  0059FC  D7F6               	goto	l87
  2131  0059FE                     __end_of_main:
  2132                           	opt stack 0
  2133                           tblptru	equ	0xFF8
  2134                           tblptrh	equ	0xFF7
  2135                           tblptrl	equ	0xFF6
  2136                           tablat	equ	0xFF5
  2137                           postinc0	equ	0xFEE
  2138                           wreg	equ	0xFE8
  2139                           postdec1	equ	0xFE5
  2140                           fsr1h	equ	0xFE2
  2141                           fsr1l	equ	0xFE1
  2142                           status	equ	0xFD8
  2143                           
  2144 ;; *************** function _mensagem_inicial *****************
  2145 ;; Defined at:
  2146 ;;		line 238 in file "main.c"
  2147 ;; Parameters:    Size  Location     Type
  2148 ;;		None
  2149 ;; Auto vars:     Size  Location     Type
  2150 ;;  msg_dois       17   17[BANK0 ] const unsigned char [17]
  2151 ;;  msg_linha_um   17    0[BANK0 ] const unsigned char [17]
  2152 ;; Return value:  Size  Location     Type
  2153 ;;                  1    wreg      void 
  2154 ;; Registers used:
  2155 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2156 ;; Tracked objects:
  2157 ;;		On entry : 0/0
  2158 ;;		On exit  : 0/0
  2159 ;;		Unchanged: 0/0
  2160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2161 ;;      Params:         0       0       0       0       0       0       0       0       0
  2162 ;;      Locals:         0      34       0       0       0       0       0       0       0
  2163 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2164 ;;      Totals:         2      34       0       0       0       0       0       0       0
  2165 ;;Total ram usage:       36 bytes
  2166 ;; Hardware stack levels used:    1
  2167 ;; Hardware stack levels required when called:    5
  2168 ;; This function calls:
  2169 ;;		_escreve_cmd_lcd
  2170 ;;		_escreve_frase_ram_lcd
  2171 ;;		_posicao_cursor_lcd
  2172 ;; This function is called by:
  2173 ;;		_main
  2174 ;; This function uses a non-reentrant model
  2175 ;;
  2176                           
  2177                           	psect	text1
  2178  0051AC                     __ptext1:
  2179                           	opt stack 0
  2180  0051AC                     _mensagem_inicial:
  2181                           	opt stack 25
  2182                           
  2183                           ;main.c: 240: const unsigned char msg_linha_um[17] = "SDCard Init   ";
  2184                           
  2185                           ;incstack = 0
  2186  0051AC  0EC7               	movlw	low mensagem_inicial@F4149
  2187  0051AE  6EF6               	movwf	tblptrl,c
  2188  0051B0                     	if	1	;There is more than 1 active tblptr byte
  2189  0051B0  0E61               	movlw	high mensagem_inicial@F4149
  2190  0051B2  6EF7               	movwf	tblptrh,c
  2191  0051B4                     	endif
  2192  0051B4                     	if	1	;There are 3 active tblptr bytes
  2193  0051B4  0E00               	movlw	low (mensagem_inicial@F4149 shr (0+16))
  2194  0051B6  6EF8               	movwf	tblptru,c
  2195  0051B8                     	endif
  2196  0051B8  EE20  F060         	lfsr	2,mensagem_inicial@msg_linha_um
  2197  0051BC  0E10               	movlw	16
  2198  0051BE                     u18080:
  2199  0051BE  0009               	tblrd		*+
  2200  0051C0  CFF5 FFDE          	movff	tablat,postinc2
  2201  0051C4  06E8               	decf	wreg,f,c
  2202  0051C6  E2FB               	bc	u18080
  2203                           
  2204                           ;main.c: 241: const unsigned char msg_dois[17] = " 18/01/2022   ";
  2205  0051C8  0EB6               	movlw	low mensagem_inicial@F4151
  2206  0051CA  6EF6               	movwf	tblptrl,c
  2207  0051CC                     	if	1	;There is more than 1 active tblptr byte
  2208  0051CC  0E61               	movlw	high mensagem_inicial@F4151
  2209  0051CE  6EF7               	movwf	tblptrh,c
  2210  0051D0                     	endif
  2211  0051D0                     	if	1	;There are 3 active tblptr bytes
  2212  0051D0  0E00               	movlw	low (mensagem_inicial@F4151 shr (0+16))
  2213  0051D2  6EF8               	movwf	tblptru,c
  2214  0051D4                     	endif
  2215  0051D4  EE20  F071         	lfsr	2,mensagem_inicial@msg_dois
  2216  0051D8  0E10               	movlw	16
  2217  0051DA                     u18090:
  2218  0051DA  0009               	tblrd		*+
  2219  0051DC  CFF5 FFDE          	movff	tablat,postinc2
  2220  0051E0  06E8               	decf	wreg,f,c
  2221  0051E2  E2FB               	bc	u18090
  2222                           
  2223                           ;main.c: 243: posicao_cursor_lcd(1,0);
  2224  0051E4  0E00               	movlw	0
  2225  0051E6  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  2226  0051E8  0E01               	movlw	1
  2227  0051EA  EC89  F02A         	call	_posicao_cursor_lcd
  2228                           
  2229                           ;main.c: 244: escreve_frase_ram_lcd(msg_linha_um);
  2230  0051EE  0E60               	movlw	low mensagem_inicial@msg_linha_um
  2231  0051F0  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  2232  0051F2  0E00               	movlw	high mensagem_inicial@msg_linha_um
  2233  0051F4  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  2234  0051F6  EC78  F02B         	call	_escreve_frase_ram_lcd	;wreg free
  2235                           
  2236                           ;main.c: 246: posicao_cursor_lcd(2,0);
  2237  0051FA  0E00               	movlw	0
  2238  0051FC  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  2239  0051FE  0E02               	movlw	2
  2240  005200  EC89  F02A         	call	_posicao_cursor_lcd
  2241                           
  2242                           ;main.c: 247: escreve_frase_ram_lcd(msg_dois);
  2243  005204  0E71               	movlw	low mensagem_inicial@msg_dois
  2244  005206  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  2245  005208  0E00               	movlw	high mensagem_inicial@msg_dois
  2246  00520A  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  2247  00520C  EC78  F02B         	call	_escreve_frase_ram_lcd	;wreg free
  2248                           
  2249                           ;main.c: 248: _delay((unsigned long)((1000)*(48000000/4000.0)));
  2250  005210  0E3D               	movlw	61
  2251  005212  6E21               	movwf	(??_mensagem_inicial+1)& (0+255),c
  2252  005214  0EE1               	movlw	225
  2253  005216  6E20               	movwf	??_mensagem_inicial& (0+255),c
  2254  005218  0E40               	movlw	64
  2255  00521A                     u19387:
  2256  00521A  2EE8               	decfsz	wreg,f,c
  2257  00521C  D7FE               	bra	u19387
  2258  00521E  2E20               	decfsz	??_mensagem_inicial& (0+255),f,c
  2259  005220  D7FC               	bra	u19387
  2260  005222  2E21               	decfsz	(??_mensagem_inicial+1)& (0+255),f,c
  2261  005224  D7FA               	bra	u19387
  2262                           
  2263                           ;main.c: 249: escreve_cmd_lcd(0b00000001);
  2264  005226  0E01               	movlw	1
  2265  005228  EC4C  F028         	call	_escreve_cmd_lcd
  2266  00522C  0012               	return		;funcret
  2267  00522E                     __end_of_mensagem_inicial:
  2268                           	opt stack 0
  2269                           tblptru	equ	0xFF8
  2270                           tblptrh	equ	0xFF7
  2271                           tblptrl	equ	0xFF6
  2272                           tablat	equ	0xFF5
  2273                           postinc0	equ	0xFEE
  2274                           wreg	equ	0xFE8
  2275                           postdec1	equ	0xFE5
  2276                           fsr1h	equ	0xFE2
  2277                           fsr1l	equ	0xFE1
  2278                           postinc2	equ	0xFDE
  2279                           status	equ	0xFD8
  2280                           
  2281 ;; *************** function _leitura_chaves_sistema *****************
  2282 ;; Defined at:
  2283 ;;		line 47 in file "bibliotecas/chaves.c"
  2284 ;; Parameters:    Size  Location     Type
  2285 ;;		None
  2286 ;; Auto vars:     Size  Location     Type
  2287 ;;		None
  2288 ;; Return value:  Size  Location     Type
  2289 ;;                  1    wreg      void 
  2290 ;; Registers used:
  2291 ;;		wreg
  2292 ;; Tracked objects:
  2293 ;;		On entry : 0/0
  2294 ;;		On exit  : 0/0
  2295 ;;		Unchanged: 0/0
  2296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2297 ;;      Params:         0       0       0       0       0       0       0       0       0
  2298 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2299 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2300 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2301 ;;Total ram usage:        0 bytes
  2302 ;; Hardware stack levels used:    1
  2303 ;; Hardware stack levels required when called:    2
  2304 ;; This function calls:
  2305 ;;		Nothing
  2306 ;; This function is called by:
  2307 ;;		_main
  2308 ;; This function uses a non-reentrant model
  2309 ;;
  2310                           
  2311                           	psect	text2
  2312  00595C                     __ptext2:
  2313                           	opt stack 0
  2314  00595C                     _leitura_chaves_sistema:
  2315                           	opt stack 28
  2316                           
  2317                           ;chaves.c: 49: info_chaves[0] = PORTCbits.RC0;
  2318                           
  2319                           ;incstack = 0
  2320  00595C  0E00               	movlw	0
  2321  00595E  B082               	btfsc	3970,0,c	;volatile
  2322  005960  0E01               	movlw	1
  2323  005962  0101               	movlb	1	; () banked
  2324  005964  6F5A               	movwf	_info_chaves& (0+255),b
  2325                           
  2326                           ;chaves.c: 50: info_chaves[1] = PORTCbits.RC1;
  2327  005966  0E00               	movlw	0
  2328  005968  B282               	btfsc	3970,1,c	;volatile
  2329  00596A  0E01               	movlw	1
  2330  00596C  6F5B               	movwf	(_info_chaves+1)& (0+255),b
  2331                           
  2332                           ;chaves.c: 51: info_chaves[2] = PORTCbits.RC2;
  2333  00596E  0E00               	movlw	0
  2334  005970  B482               	btfsc	3970,2,c	;volatile
  2335  005972  0E01               	movlw	1
  2336  005974  6F5C               	movwf	(_info_chaves+2)& (0+255),b
  2337                           
  2338                           ;chaves.c: 52: info_chaves[3] = PORTAbits.RA2;
  2339  005976  0E00               	movlw	0
  2340  005978  B480               	btfsc	3968,2,c	;volatile
  2341  00597A  0E01               	movlw	1
  2342  00597C  6F5D               	movwf	(_info_chaves+3)& (0+255),b
  2343                           
  2344                           ;chaves.c: 53: info_chaves[4] = PORTAbits.RA5;
  2345  00597E  0E00               	movlw	0
  2346  005980  BA80               	btfsc	3968,5,c	;volatile
  2347  005982  0E01               	movlw	1
  2348  005984  6F5E               	movwf	(_info_chaves+4)& (0+255),b
  2349                           
  2350                           ;chaves.c: 54: info_chaves[5] = PORTEbits.RE0;
  2351  005986  0E00               	movlw	0
  2352  005988  B084               	btfsc	3972,0,c	;volatile
  2353  00598A  0E01               	movlw	1
  2354  00598C  6F5F               	movwf	(_info_chaves+5)& (0+255),b
  2355                           
  2356                           ;chaves.c: 55: info_chaves[6] = PORTEbits.RE1;
  2357  00598E  0E00               	movlw	0
  2358  005990  B284               	btfsc	3972,1,c	;volatile
  2359  005992  0E01               	movlw	1
  2360  005994  6F60               	movwf	(_info_chaves+6)& (0+255),b
  2361                           
  2362                           ; BSR set to: 1
  2363  005996  0012               	return		;funcret
  2364  005998                     __end_of_leitura_chaves_sistema:
  2365                           	opt stack 0
  2366                           tblptru	equ	0xFF8
  2367                           tblptrh	equ	0xFF7
  2368                           tblptrl	equ	0xFF6
  2369                           tablat	equ	0xFF5
  2370                           postinc0	equ	0xFEE
  2371                           wreg	equ	0xFE8
  2372                           postdec1	equ	0xFE5
  2373                           fsr1h	equ	0xFE2
  2374                           fsr1l	equ	0xFE1
  2375                           postinc2	equ	0xFDE
  2376                           status	equ	0xFD8
  2377                           
  2378 ;; *************** function _init_lcd *****************
  2379 ;; Defined at:
  2380 ;;		line 71 in file "bibliotecas/display_lcd.c"
  2381 ;; Parameters:    Size  Location     Type
  2382 ;;		None
  2383 ;; Auto vars:     Size  Location     Type
  2384 ;;		None
  2385 ;; Return value:  Size  Location     Type
  2386 ;;                  1    wreg      void 
  2387 ;; Registers used:
  2388 ;;		wreg, status,2, status,0, cstack
  2389 ;; Tracked objects:
  2390 ;;		On entry : 0/0
  2391 ;;		On exit  : 0/0
  2392 ;;		Unchanged: 0/0
  2393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2394 ;;      Params:         0       0       0       0       0       0       0       0       0
  2395 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2396 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2397 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2398 ;;Total ram usage:        1 bytes
  2399 ;; Hardware stack levels used:    1
  2400 ;; Hardware stack levels required when called:    4
  2401 ;; This function calls:
  2402 ;;		_delay
  2403 ;;		_escreve_cmd_lcd
  2404 ;; This function is called by:
  2405 ;;		_main
  2406 ;; This function uses a non-reentrant model
  2407 ;;
  2408                           
  2409                           	psect	text3
  2410  004F66                     __ptext3:
  2411                           	opt stack 0
  2412  004F66                     _init_lcd:
  2413                           	opt stack 26
  2414                           
  2415                           ;display_lcd.c: 74: TRISDbits.RD2 = 0;
  2416                           
  2417                           ; BSR set to: 1
  2418                           ;incstack = 0
  2419  004F66  9495               	bcf	3989,2,c	;volatile
  2420                           
  2421                           ;display_lcd.c: 75: TRISDbits.RD1 = 0;
  2422  004F68  9295               	bcf	3989,1,c	;volatile
  2423                           
  2424                           ;display_lcd.c: 76: TRISDbits.RD0 = 0;
  2425  004F6A  9095               	bcf	3989,0,c	;volatile
  2426                           
  2427                           ;display_lcd.c: 79: TRISDbits.RD4=0;
  2428  004F6C  9895               	bcf	3989,4,c	;volatile
  2429                           
  2430                           ;display_lcd.c: 80: TRISDbits.RD5=0;
  2431  004F6E  9A95               	bcf	3989,5,c	;volatile
  2432                           
  2433                           ;display_lcd.c: 81: TRISDbits.RD6=0;
  2434  004F70  9C95               	bcf	3989,6,c	;volatile
  2435                           
  2436                           ;display_lcd.c: 82: TRISDbits.RD7=0;
  2437  004F72  9E95               	bcf	3989,7,c	;volatile
  2438                           
  2439                           ;display_lcd.c: 89: PORTDbits.RD2 = 0;
  2440  004F74  9483               	bcf	3971,2,c	;volatile
  2441                           
  2442                           ;display_lcd.c: 90: PORTDbits.RD1 = 0;
  2443  004F76  9283               	bcf	3971,1,c	;volatile
  2444                           
  2445                           ;display_lcd.c: 91: PORTDbits.RD0 = 0;
  2446  004F78  9083               	bcf	3971,0,c	;volatile
  2447                           
  2448                           ;display_lcd.c: 95: PORTDbits.RD7=0;
  2449  004F7A  9E83               	bcf	3971,7,c	;volatile
  2450                           
  2451                           ;display_lcd.c: 96: PORTDbits.RD6=0;
  2452  004F7C  9C83               	bcf	3971,6,c	;volatile
  2453                           
  2454                           ;display_lcd.c: 97: PORTDbits.RD5=1;
  2455  004F7E  8A83               	bsf	3971,5,c	;volatile
  2456                           
  2457                           ;display_lcd.c: 98: PORTDbits.RD4=1;
  2458  004F80  8883               	bsf	3971,4,c	;volatile
  2459                           
  2460                           ;display_lcd.c: 103: _delay((unsigned long)((15)*(48000000/4000.0)));
  2461  004F82  0EEA               	movlw	234
  2462  004F84  6E1D               	movwf	??_init_lcd& (0+255),c
  2463  004F86  0EC3               	movlw	195
  2464  004F88                     u19397:
  2465  004F88  2EE8               	decfsz	wreg,f,c
  2466  004F8A  D7FE               	bra	u19397
  2467  004F8C  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  2468  004F8E  D7FC               	bra	u19397
  2469  004F90  F000               	nop	
  2470                           
  2471                           ;display_lcd.c: 107: PORTDbits.RD0 = 1;
  2472  004F92  8083               	bsf	3971,0,c	;volatile
  2473                           
  2474                           ;display_lcd.c: 108: delay();
  2475  004F94  EC4F  F02D         	call	_delay	;wreg free
  2476                           
  2477                           ;display_lcd.c: 109: PORTDbits.RD0 = 0;
  2478  004F98  9083               	bcf	3971,0,c	;volatile
  2479                           
  2480                           ;display_lcd.c: 110: delay();
  2481  004F9A  EC4F  F02D         	call	_delay	;wreg free
  2482                           
  2483                           ;display_lcd.c: 115: _delay((unsigned long)((5)*(48000000/4000.0)));
  2484  004F9E  0E4E               	movlw	78
  2485  004FA0  6E1D               	movwf	??_init_lcd& (0+255),c
  2486  004FA2  0EEB               	movlw	235
  2487  004FA4                     u19407:
  2488  004FA4  2EE8               	decfsz	wreg,f,c
  2489  004FA6  D7FE               	bra	u19407
  2490  004FA8  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  2491  004FAA  D7FC               	bra	u19407
  2492  004FAC  F000               	nop	
  2493                           
  2494                           ;display_lcd.c: 118: PORTDbits.RD0 = 1;
  2495  004FAE  8083               	bsf	3971,0,c	;volatile
  2496                           
  2497                           ;display_lcd.c: 119: delay();
  2498  004FB0  EC4F  F02D         	call	_delay	;wreg free
  2499                           
  2500                           ;display_lcd.c: 120: PORTDbits.RD0 = 0;
  2501  004FB4  9083               	bcf	3971,0,c	;volatile
  2502                           
  2503                           ;display_lcd.c: 121: delay();
  2504  004FB6  EC4F  F02D         	call	_delay	;wreg free
  2505                           
  2506                           ;display_lcd.c: 126: _delay((unsigned long)((5)*(48000000/4000.0)));
  2507  004FBA  0E4E               	movlw	78
  2508  004FBC  6E1D               	movwf	??_init_lcd& (0+255),c
  2509  004FBE  0EEB               	movlw	235
  2510  004FC0                     u19417:
  2511  004FC0  2EE8               	decfsz	wreg,f,c
  2512  004FC2  D7FE               	bra	u19417
  2513  004FC4  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  2514  004FC6  D7FC               	bra	u19417
  2515  004FC8  F000               	nop	
  2516                           
  2517                           ;display_lcd.c: 129: PORTDbits.RD0 = 1;
  2518  004FCA  8083               	bsf	3971,0,c	;volatile
  2519                           
  2520                           ;display_lcd.c: 130: delay();
  2521  004FCC  EC4F  F02D         	call	_delay	;wreg free
  2522                           
  2523                           ;display_lcd.c: 131: PORTDbits.RD0 = 0;
  2524  004FD0  9083               	bcf	3971,0,c	;volatile
  2525                           
  2526                           ;display_lcd.c: 132: delay();
  2527  004FD2  EC4F  F02D         	call	_delay	;wreg free
  2528                           
  2529                           ;display_lcd.c: 135: PORTDbits.RD7=0;
  2530  004FD6  9E83               	bcf	3971,7,c	;volatile
  2531                           
  2532                           ;display_lcd.c: 136: PORTDbits.RD6=0;
  2533  004FD8  9C83               	bcf	3971,6,c	;volatile
  2534                           
  2535                           ;display_lcd.c: 137: PORTDbits.RD5=1;
  2536  004FDA  8A83               	bsf	3971,5,c	;volatile
  2537                           
  2538                           ;display_lcd.c: 138: PORTDbits.RD4=0;
  2539  004FDC  9883               	bcf	3971,4,c	;volatile
  2540                           
  2541                           ;display_lcd.c: 142: PORTDbits.RD0 = 1;
  2542  004FDE  8083               	bsf	3971,0,c	;volatile
  2543                           
  2544                           ;display_lcd.c: 143: delay();
  2545  004FE0  EC4F  F02D         	call	_delay	;wreg free
  2546                           
  2547                           ;display_lcd.c: 144: PORTDbits.RD0 = 0;
  2548  004FE4  9083               	bcf	3971,0,c	;volatile
  2549                           
  2550                           ;display_lcd.c: 145: delay();
  2551  004FE6  EC4F  F02D         	call	_delay	;wreg free
  2552                           
  2553                           ;display_lcd.c: 149: escreve_cmd_lcd(0b00101000);
  2554  004FEA  0E28               	movlw	40
  2555  004FEC  EC4C  F028         	call	_escreve_cmd_lcd
  2556                           
  2557                           ;display_lcd.c: 150: escreve_cmd_lcd(0b00000110);
  2558  004FF0  0E06               	movlw	6
  2559  004FF2  EC4C  F028         	call	_escreve_cmd_lcd
  2560                           
  2561                           ;display_lcd.c: 151: escreve_cmd_lcd(0b00001110);
  2562  004FF6  0E0E               	movlw	14
  2563  004FF8  EC4C  F028         	call	_escreve_cmd_lcd
  2564                           
  2565                           ;display_lcd.c: 152: escreve_cmd_lcd(0b00000001);
  2566  004FFC  0E01               	movlw	1
  2567  004FFE  EC4C  F028         	call	_escreve_cmd_lcd
  2568  005002  0012               	return		;funcret
  2569  005004                     __end_of_init_lcd:
  2570                           	opt stack 0
  2571                           tblptru	equ	0xFF8
  2572                           tblptrh	equ	0xFF7
  2573                           tblptrl	equ	0xFF6
  2574                           tablat	equ	0xFF5
  2575                           postinc0	equ	0xFEE
  2576                           wreg	equ	0xFE8
  2577                           postdec1	equ	0xFE5
  2578                           fsr1h	equ	0xFE2
  2579                           fsr1l	equ	0xFE1
  2580                           postinc2	equ	0xFDE
  2581                           status	equ	0xFD8
  2582                           
  2583 ;; *************** function _init_hardware *****************
  2584 ;; Defined at:
  2585 ;;		line 55 in file "bibliotecas/hardware.c"
  2586 ;; Parameters:    Size  Location     Type
  2587 ;;		None
  2588 ;; Auto vars:     Size  Location     Type
  2589 ;;		None
  2590 ;; Return value:  Size  Location     Type
  2591 ;;                  1    wreg      void 
  2592 ;; Registers used:
  2593 ;;		wreg, status,2, cstack
  2594 ;; Tracked objects:
  2595 ;;		On entry : 0/0
  2596 ;;		On exit  : 0/0
  2597 ;;		Unchanged: 0/0
  2598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2599 ;;      Params:         0       0       0       0       0       0       0       0       0
  2600 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2601 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2602 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2603 ;;Total ram usage:        0 bytes
  2604 ;; Hardware stack levels used:    1
  2605 ;; Hardware stack levels required when called:    4
  2606 ;; This function calls:
  2607 ;;		_config_timer_dois
  2608 ;;		_config_timer_zero
  2609 ;;		_init_interrupt
  2610 ;;		_init_oscilador
  2611 ;;		_init_ports
  2612 ;; This function is called by:
  2613 ;;		_main
  2614 ;; This function uses a non-reentrant model
  2615 ;;
  2616                           
  2617                           	psect	text4
  2618  005B2A                     __ptext4:
  2619                           	opt stack 0
  2620  005B2A                     _init_hardware:
  2621                           	opt stack 26
  2622                           
  2623                           ;hardware.c: 58: init_oscilador();
  2624                           
  2625                           ;incstack = 0
  2626  005B2A  ECE5  F02D         	call	_init_oscilador	;wreg free
  2627                           
  2628                           ;hardware.c: 61: init_ports();
  2629  005B2E  EC7D  F02D         	call	_init_ports	;wreg free
  2630                           
  2631                           ;hardware.c: 64: config_timer_zero();
  2632  005B32  EC70  F02D         	call	_config_timer_zero	;wreg free
  2633                           
  2634                           ;hardware.c: 67: config_timer_dois();
  2635  005B36  ECCD  F02D         	call	_config_timer_dois	;wreg free
  2636                           
  2637                           ;hardware.c: 70: init_interrupt();
  2638  005B3A  ECA0  F02D         	call	_init_interrupt	;wreg free
  2639  005B3E  0012               	return		;funcret
  2640  005B40                     __end_of_init_hardware:
  2641                           	opt stack 0
  2642                           tblptru	equ	0xFF8
  2643                           tblptrh	equ	0xFF7
  2644                           tblptrl	equ	0xFF6
  2645                           tablat	equ	0xFF5
  2646                           postinc0	equ	0xFEE
  2647                           wreg	equ	0xFE8
  2648                           postdec1	equ	0xFE5
  2649                           fsr1h	equ	0xFE2
  2650                           fsr1l	equ	0xFE1
  2651                           postinc2	equ	0xFDE
  2652                           status	equ	0xFD8
  2653                           
  2654 ;; *************** function _init_ports *****************
  2655 ;; Defined at:
  2656 ;;		line 154 in file "bibliotecas/hardware.c"
  2657 ;; Parameters:    Size  Location     Type
  2658 ;;		None
  2659 ;; Auto vars:     Size  Location     Type
  2660 ;;		None
  2661 ;; Return value:  Size  Location     Type
  2662 ;;                  1    wreg      void 
  2663 ;; Registers used:
  2664 ;;		wreg, status,2
  2665 ;; Tracked objects:
  2666 ;;		On entry : 0/0
  2667 ;;		On exit  : 0/0
  2668 ;;		Unchanged: 0/0
  2669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2670 ;;      Params:         0       0       0       0       0       0       0       0       0
  2671 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2672 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2673 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2674 ;;Total ram usage:        0 bytes
  2675 ;; Hardware stack levels used:    1
  2676 ;; Hardware stack levels required when called:    2
  2677 ;; This function calls:
  2678 ;;		Nothing
  2679 ;; This function is called by:
  2680 ;;		_init_hardware
  2681 ;; This function uses a non-reentrant model
  2682 ;;
  2683                           
  2684                           	psect	text5
  2685  005AFA                     __ptext5:
  2686                           	opt stack 0
  2687  005AFA                     _init_ports:
  2688                           	opt stack 27
  2689                           
  2690                           ;hardware.c: 156: TRISB = 0b00100001;
  2691                           
  2692                           ;incstack = 0
  2693  005AFA  0E21               	movlw	33
  2694  005AFC  6E93               	movwf	3987,c	;volatile
  2695                           
  2696                           ;hardware.c: 157: LATB = 0xFF;
  2697  005AFE  688A               	setf	3978,c	;volatile
  2698                           
  2699                           ;hardware.c: 158: TRISD = 0x00;
  2700  005B00  0E00               	movlw	0
  2701  005B02  6E95               	movwf	3989,c	;volatile
  2702                           
  2703                           ;hardware.c: 159: TRISA = 0b00000111;
  2704  005B04  0E07               	movlw	7
  2705  005B06  6E92               	movwf	3986,c	;volatile
  2706                           
  2707                           ;hardware.c: 160: TRISC = 0x01111111;
  2708  005B08  0E11               	movlw	17
  2709  005B0A  6E94               	movwf	3988,c	;volatile
  2710                           
  2711                           ;hardware.c: 161: TRISE = 0b00000011;
  2712  005B0C  0E03               	movlw	3
  2713  005B0E  6E96               	movwf	3990,c	;volatile
  2714  005B10  0012               	return		;funcret
  2715  005B12                     __end_of_init_ports:
  2716                           	opt stack 0
  2717                           tblptru	equ	0xFF8
  2718                           tblptrh	equ	0xFF7
  2719                           tblptrl	equ	0xFF6
  2720                           tablat	equ	0xFF5
  2721                           postinc0	equ	0xFEE
  2722                           wreg	equ	0xFE8
  2723                           postdec1	equ	0xFE5
  2724                           fsr1h	equ	0xFE2
  2725                           fsr1l	equ	0xFE1
  2726                           postinc2	equ	0xFDE
  2727                           status	equ	0xFD8
  2728                           
  2729 ;; *************** function _init_oscilador *****************
  2730 ;; Defined at:
  2731 ;;		line 171 in file "bibliotecas/hardware.c"
  2732 ;; Parameters:    Size  Location     Type
  2733 ;;		None
  2734 ;; Auto vars:     Size  Location     Type
  2735 ;;		None
  2736 ;; Return value:  Size  Location     Type
  2737 ;;                  1    wreg      void 
  2738 ;; Registers used:
  2739 ;;		None
  2740 ;; Tracked objects:
  2741 ;;		On entry : 0/0
  2742 ;;		On exit  : 0/0
  2743 ;;		Unchanged: 0/0
  2744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2745 ;;      Params:         0       0       0       0       0       0       0       0       0
  2746 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2747 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2748 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2749 ;;Total ram usage:        0 bytes
  2750 ;; Hardware stack levels used:    1
  2751 ;; Hardware stack levels required when called:    2
  2752 ;; This function calls:
  2753 ;;		Nothing
  2754 ;; This function is called by:
  2755 ;;		_init_hardware
  2756 ;; This function uses a non-reentrant model
  2757 ;;
  2758                           
  2759                           	psect	text6
  2760  005BCA                     __ptext6:
  2761                           	opt stack 0
  2762  005BCA                     _init_oscilador:
  2763                           	opt stack 27
  2764                           
  2765                           ;hardware.c: 174: OSCCONbits.IRCF0 = 1;
  2766                           
  2767                           ;incstack = 0
  2768  005BCA  88D3               	bsf	4051,4,c	;volatile
  2769                           
  2770                           ;hardware.c: 175: OSCCONbits.IRCF1 = 1;
  2771  005BCC  8AD3               	bsf	4051,5,c	;volatile
  2772                           
  2773                           ;hardware.c: 176: OSCCONbits.IRCF2 = 1;
  2774  005BCE  8CD3               	bsf	4051,6,c	;volatile
  2775  005BD0  0012               	return		;funcret
  2776  005BD2                     __end_of_init_oscilador:
  2777                           	opt stack 0
  2778                           tblptru	equ	0xFF8
  2779                           tblptrh	equ	0xFF7
  2780                           tblptrl	equ	0xFF6
  2781                           tablat	equ	0xFF5
  2782                           postinc0	equ	0xFEE
  2783                           wreg	equ	0xFE8
  2784                           postdec1	equ	0xFE5
  2785                           fsr1h	equ	0xFE2
  2786                           fsr1l	equ	0xFE1
  2787                           postinc2	equ	0xFDE
  2788                           status	equ	0xFD8
  2789                           
  2790 ;; *************** function _init_interrupt *****************
  2791 ;; Defined at:
  2792 ;;		line 98 in file "bibliotecas/hardware.c"
  2793 ;; Parameters:    Size  Location     Type
  2794 ;;		None
  2795 ;; Auto vars:     Size  Location     Type
  2796 ;;		None
  2797 ;; Return value:  Size  Location     Type
  2798 ;;                  1    wreg      void 
  2799 ;; Registers used:
  2800 ;;		wreg, status,2
  2801 ;; Tracked objects:
  2802 ;;		On entry : 0/0
  2803 ;;		On exit  : 0/0
  2804 ;;		Unchanged: 0/0
  2805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2806 ;;      Params:         0       0       0       0       0       0       0       0       0
  2807 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2808 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2809 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2810 ;;Total ram usage:        0 bytes
  2811 ;; Hardware stack levels used:    1
  2812 ;; Hardware stack levels required when called:    2
  2813 ;; This function calls:
  2814 ;;		Nothing
  2815 ;; This function is called by:
  2816 ;;		_init_hardware
  2817 ;; This function uses a non-reentrant model
  2818 ;;
  2819                           
  2820                           	psect	text7
  2821  005B40                     __ptext7:
  2822                           	opt stack 0
  2823  005B40                     _init_interrupt:
  2824                           	opt stack 27
  2825                           
  2826                           ;hardware.c: 100: INTCON = 0b11110000;
  2827                           
  2828                           ;incstack = 0
  2829  005B40  0EF0               	movlw	240
  2830  005B42  6EF2               	movwf	intcon,c	;volatile
  2831                           
  2832                           ;hardware.c: 101: INTCON2 = 0b00000000;
  2833  005B44  0E00               	movlw	0
  2834  005B46  6EF1               	movwf	intcon2,c	;volatile
  2835                           
  2836                           ;hardware.c: 102: INTCON3 = 0b00000000;
  2837  005B48  0E00               	movlw	0
  2838  005B4A  6EF0               	movwf	intcon3,c	;volatile
  2839                           
  2840                           ;hardware.c: 104: PIE1 = 0b00100000;
  2841  005B4C  0E20               	movlw	32
  2842  005B4E  6E9D               	movwf	3997,c	;volatile
  2843  005B50  0012               	return		;funcret
  2844  005B52                     __end_of_init_interrupt:
  2845                           	opt stack 0
  2846                           tblptru	equ	0xFF8
  2847                           tblptrh	equ	0xFF7
  2848                           tblptrl	equ	0xFF6
  2849                           tablat	equ	0xFF5
  2850                           intcon	equ	0xFF2
  2851                           intcon2	equ	0xFF1
  2852                           intcon3	equ	0xFF0
  2853                           postinc0	equ	0xFEE
  2854                           wreg	equ	0xFE8
  2855                           postdec1	equ	0xFE5
  2856                           fsr1h	equ	0xFE2
  2857                           fsr1l	equ	0xFE1
  2858                           postinc2	equ	0xFDE
  2859                           status	equ	0xFD8
  2860                           
  2861 ;; *************** function _config_timer_zero *****************
  2862 ;; Defined at:
  2863 ;;		line 83 in file "bibliotecas/hardware.c"
  2864 ;; Parameters:    Size  Location     Type
  2865 ;;		None
  2866 ;; Auto vars:     Size  Location     Type
  2867 ;;		None
  2868 ;; Return value:  Size  Location     Type
  2869 ;;                  1    wreg      void 
  2870 ;; Registers used:
  2871 ;;		wreg, status,2, cstack
  2872 ;; Tracked objects:
  2873 ;;		On entry : 0/0
  2874 ;;		On exit  : 0/0
  2875 ;;		Unchanged: 0/0
  2876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2877 ;;      Params:         0       0       0       0       0       0       0       0       0
  2878 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2879 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2880 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2881 ;;Total ram usage:        0 bytes
  2882 ;; Hardware stack levels used:    1
  2883 ;; Hardware stack levels required when called:    3
  2884 ;; This function calls:
  2885 ;;		_write_timer_zero
  2886 ;; This function is called by:
  2887 ;;		_init_hardware
  2888 ;; This function uses a non-reentrant model
  2889 ;;
  2890                           
  2891                           	psect	text8
  2892  005AE0                     __ptext8:
  2893                           	opt stack 0
  2894  005AE0                     _config_timer_zero:
  2895                           	opt stack 26
  2896                           
  2897                           ;hardware.c: 85: T0CON = 0b11000011;
  2898                           
  2899                           ;incstack = 0
  2900  005AE0  0EC3               	movlw	195
  2901  005AE2  6ED5               	movwf	4053,c	;volatile
  2902                           
  2903                           ;hardware.c: 86: SPPCON = 0b00000000;
  2904  005AE4  0E00               	movlw	0
  2905  005AE6  6E65               	movwf	3941,c	;volatile
  2906                           
  2907                           ;hardware.c: 87: SPPCFG = 0b00000000;
  2908  005AE8  0E00               	movlw	0
  2909  005AEA  6E63               	movwf	3939,c	;volatile
  2910                           
  2911                           ;hardware.c: 88: write_timer_zero(0x0083);
  2912  005AEC  0E00               	movlw	0
  2913  005AEE  6E1B               	movwf	write_timer_zero@timer0+1,c
  2914  005AF0  0E83               	movlw	131
  2915  005AF2  6E1A               	movwf	write_timer_zero@timer0,c
  2916  005AF4  ECA9  F02D         	call	_write_timer_zero	;wreg free
  2917  005AF8  0012               	return		;funcret
  2918  005AFA                     __end_of_config_timer_zero:
  2919                           	opt stack 0
  2920                           tblptru	equ	0xFF8
  2921                           tblptrh	equ	0xFF7
  2922                           tblptrl	equ	0xFF6
  2923                           tablat	equ	0xFF5
  2924                           intcon	equ	0xFF2
  2925                           intcon2	equ	0xFF1
  2926                           intcon3	equ	0xFF0
  2927                           postinc0	equ	0xFEE
  2928                           wreg	equ	0xFE8
  2929                           postdec1	equ	0xFE5
  2930                           fsr1h	equ	0xFE2
  2931                           fsr1l	equ	0xFE1
  2932                           postinc2	equ	0xFDE
  2933                           status	equ	0xFD8
  2934                           
  2935 ;; *************** function _write_timer_zero *****************
  2936 ;; Defined at:
  2937 ;;		line 138 in file "bibliotecas/hardware.c"
  2938 ;; Parameters:    Size  Location     Type
  2939 ;;  timer0          2   25[COMRAM] unsigned int 
  2940 ;; Auto vars:     Size  Location     Type
  2941 ;;  timer           2   27[COMRAM] struct Timers
  2942 ;; Return value:  Size  Location     Type
  2943 ;;                  1    wreg      void 
  2944 ;; Registers used:
  2945 ;;		None
  2946 ;; Tracked objects:
  2947 ;;		On entry : 0/0
  2948 ;;		On exit  : 0/0
  2949 ;;		Unchanged: 0/0
  2950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2951 ;;      Params:         2       0       0       0       0       0       0       0       0
  2952 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2953 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2954 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2955 ;;Total ram usage:        4 bytes
  2956 ;; Hardware stack levels used:    1
  2957 ;; Hardware stack levels required when called:    2
  2958 ;; This function calls:
  2959 ;;		Nothing
  2960 ;; This function is called by:
  2961 ;;		_config_timer_zero
  2962 ;; This function uses a non-reentrant model
  2963 ;;
  2964                           
  2965                           	psect	text9
  2966  005B52                     __ptext9:
  2967                           	opt stack 0
  2968  005B52                     _write_timer_zero:
  2969                           	opt stack 26
  2970                           
  2971                           ;hardware.c: 140: union Timers timer;
  2972                           ;hardware.c: 142: timer.lt = timer0;
  2973                           
  2974                           ;incstack = 0
  2975  005B52  C01A  F01C         	movff	write_timer_zero@timer0,write_timer_zero@timer
  2976  005B56  C01B  F01D         	movff	write_timer_zero@timer0+1,write_timer_zero@timer+1
  2977                           
  2978                           ;hardware.c: 144: TMR0H = timer.bt[1];
  2979  005B5A  C01D  FFD7         	movff	write_timer_zero@timer+1,4055	;volatile
  2980                           
  2981                           ;hardware.c: 145: TMR0L = timer.bt[0];
  2982  005B5E  C01C  FFD6         	movff	write_timer_zero@timer,4054	;volatile
  2983  005B62  0012               	return		;funcret
  2984  005B64                     __end_of_write_timer_zero:
  2985                           	opt stack 0
  2986                           tblptru	equ	0xFF8
  2987                           tblptrh	equ	0xFF7
  2988                           tblptrl	equ	0xFF6
  2989                           tablat	equ	0xFF5
  2990                           intcon	equ	0xFF2
  2991                           intcon2	equ	0xFF1
  2992                           intcon3	equ	0xFF0
  2993                           postinc0	equ	0xFEE
  2994                           wreg	equ	0xFE8
  2995                           postdec1	equ	0xFE5
  2996                           fsr1h	equ	0xFE2
  2997                           fsr1l	equ	0xFE1
  2998                           postinc2	equ	0xFDE
  2999                           status	equ	0xFD8
  3000                           
  3001 ;; *************** function _config_timer_dois *****************
  3002 ;; Defined at:
  3003 ;;		line 200 in file "bibliotecas/hardware.c"
  3004 ;; Parameters:    Size  Location     Type
  3005 ;;		None
  3006 ;; Auto vars:     Size  Location     Type
  3007 ;;		None
  3008 ;; Return value:  Size  Location     Type
  3009 ;;                  1    wreg      void 
  3010 ;; Registers used:
  3011 ;;		wreg, status,2
  3012 ;; Tracked objects:
  3013 ;;		On entry : 0/0
  3014 ;;		On exit  : 0/0
  3015 ;;		Unchanged: 0/0
  3016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3017 ;;      Params:         0       0       0       0       0       0       0       0       0
  3018 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3019 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3020 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3021 ;;Total ram usage:        0 bytes
  3022 ;; Hardware stack levels used:    1
  3023 ;; Hardware stack levels required when called:    2
  3024 ;; This function calls:
  3025 ;;		Nothing
  3026 ;; This function is called by:
  3027 ;;		_init_hardware
  3028 ;; This function uses a non-reentrant model
  3029 ;;
  3030                           
  3031                           	psect	text10
  3032  005B9A                     __ptext10:
  3033                           	opt stack 0
  3034  005B9A                     _config_timer_dois:
  3035                           	opt stack 27
  3036                           
  3037                           ;hardware.c: 202: T2CON = 0b00000100;
  3038                           
  3039                           ;incstack = 0
  3040  005B9A  0E04               	movlw	4
  3041  005B9C  6ECA               	movwf	4042,c	;volatile
  3042                           
  3043                           ;hardware.c: 203: TMR2 = 0;
  3044  005B9E  0E00               	movlw	0
  3045  005BA0  6ECC               	movwf	4044,c	;volatile
  3046                           
  3047                           ;hardware.c: 204: PR2 = 0xFF;
  3048  005BA2  68CB               	setf	4043,c	;volatile
  3049  005BA4  0012               	return		;funcret
  3050  005BA6                     __end_of_config_timer_dois:
  3051                           	opt stack 0
  3052                           tblptru	equ	0xFF8
  3053                           tblptrh	equ	0xFF7
  3054                           tblptrl	equ	0xFF6
  3055                           tablat	equ	0xFF5
  3056                           intcon	equ	0xFF2
  3057                           intcon2	equ	0xFF1
  3058                           intcon3	equ	0xFF0
  3059                           postinc0	equ	0xFEE
  3060                           wreg	equ	0xFE8
  3061                           postdec1	equ	0xFE5
  3062                           fsr1h	equ	0xFE2
  3063                           fsr1l	equ	0xFE1
  3064                           postinc2	equ	0xFDE
  3065                           status	equ	0xFD8
  3066                           
  3067 ;; *************** function _inicializa_tarefas *****************
  3068 ;; Defined at:
  3069 ;;		line 157 in file "main.c"
  3070 ;; Parameters:    Size  Location     Type
  3071 ;;		None
  3072 ;; Auto vars:     Size  Location     Type
  3073 ;;		None
  3074 ;; Return value:  Size  Location     Type
  3075 ;;                  1    wreg      void 
  3076 ;; Registers used:
  3077 ;;		wreg, status,2, status,0
  3078 ;; Tracked objects:
  3079 ;;		On entry : 0/0
  3080 ;;		On exit  : 0/0
  3081 ;;		Unchanged: 0/0
  3082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3083 ;;      Params:         0       0       0       0       0       0       0       0       0
  3084 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3085 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3086 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3087 ;;Total ram usage:        0 bytes
  3088 ;; Hardware stack levels used:    1
  3089 ;; Hardware stack levels required when called:    2
  3090 ;; This function calls:
  3091 ;;		Nothing
  3092 ;; This function is called by:
  3093 ;;		_main
  3094 ;; This function uses a non-reentrant model
  3095 ;;
  3096                           
  3097                           	psect	text11
  3098  005A7A                     __ptext11:
  3099                           	opt stack 0
  3100  005A7A                     _inicializa_tarefas:
  3101                           	opt stack 28
  3102                           
  3103                           ;main.c: 160: p_tarefas[0] = SDCard;
  3104                           
  3105                           ;incstack = 0
  3106  005A7A  0E18               	movlw	low _SDCard
  3107  005A7C  0100               	movlb	0	; () banked
  3108  005A7E  6FF2               	movwf	_p_tarefas& (0+255),b
  3109  005A80  0E40               	movlw	high _SDCard
  3110  005A82  6FF3               	movwf	(_p_tarefas+1)& (0+255),b
  3111                           
  3112                           ; BSR set to: 0
  3113                           ;main.c: 165: tempo_backup[0] = 5000;
  3114  005A84  0E13               	movlw	19
  3115  005A86  0101               	movlb	1	; () banked
  3116  005A88  6F66               	movwf	(_tempo_backup+1)& (0+255),b
  3117  005A8A  0E88               	movlw	136
  3118  005A8C  6F65               	movwf	_tempo_backup& (0+255),b
  3119                           
  3120                           ; BSR set to: 1
  3121                           ;main.c: 171: tempo_tarefa[0] = 5000;
  3122  005A8E  0E13               	movlw	19
  3123  005A90  0100               	movlb	0	; () banked
  3124  005A92  6FEF               	movwf	(_tempo_tarefa+1)& (0+255),b
  3125  005A94  0E88               	movlw	136
  3126  005A96  6FEE               	movwf	_tempo_tarefa& (0+255),b
  3127                           
  3128                           ; BSR set to: 0
  3129                           ;main.c: 176: tarefa_em_execucao = 0;
  3130  005A98  0E00               	movlw	0
  3131  005A9A  6E43               	movwf	_tarefa_em_execucao,c	;volatile
  3132                           
  3133                           ; BSR set to: 0
  3134  005A9C  0012               	return		;funcret
  3135  005A9E                     __end_of_inicializa_tarefas:
  3136                           	opt stack 0
  3137                           tblptru	equ	0xFF8
  3138                           tblptrh	equ	0xFF7
  3139                           tblptrl	equ	0xFF6
  3140                           tablat	equ	0xFF5
  3141                           intcon	equ	0xFF2
  3142                           intcon2	equ	0xFF1
  3143                           intcon3	equ	0xFF0
  3144                           postinc0	equ	0xFEE
  3145                           wreg	equ	0xFE8
  3146                           postdec1	equ	0xFE5
  3147                           fsr1h	equ	0xFE2
  3148                           fsr1l	equ	0xFE1
  3149                           postinc2	equ	0xFDE
  3150                           status	equ	0xFD8
  3151                           
  3152 ;; *************** function _inicializa_shrc *****************
  3153 ;; Defined at:
  3154 ;;		line 48 in file "bibliotecas/SHRC.c"
  3155 ;; Parameters:    Size  Location     Type
  3156 ;;		None
  3157 ;; Auto vars:     Size  Location     Type
  3158 ;;		None
  3159 ;; Return value:  Size  Location     Type
  3160 ;;                  1    wreg      void 
  3161 ;; Registers used:
  3162 ;;		None
  3163 ;; Tracked objects:
  3164 ;;		On entry : 0/0
  3165 ;;		On exit  : 0/0
  3166 ;;		Unchanged: 0/0
  3167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3168 ;;      Params:         0       0       0       0       0       0       0       0       0
  3169 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3170 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3171 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3172 ;;Total ram usage:        0 bytes
  3173 ;; Hardware stack levels used:    1
  3174 ;; Hardware stack levels required when called:    2
  3175 ;; This function calls:
  3176 ;;		Nothing
  3177 ;; This function is called by:
  3178 ;;		_main
  3179 ;; This function uses a non-reentrant model
  3180 ;;
  3181                           
  3182                           	psect	text12
  3183  005BA6                     __ptext12:
  3184                           	opt stack 0
  3185  005BA6                     _inicializa_shrc:
  3186                           	opt stack 28
  3187                           
  3188                           ;SHRC.c: 51: TRISBbits.RB6 = 0;
  3189                           
  3190                           ; BSR set to: 0
  3191                           ;incstack = 0
  3192  005BA6  9C93               	bcf	3987,6,c	;volatile
  3193                           
  3194                           ;SHRC.c: 52: TRISBbits.RB5 = 1;
  3195  005BA8  8A93               	bsf	3987,5,c	;volatile
  3196                           
  3197                           ;SHRC.c: 53: TRISBbits.RB7 = 0;
  3198  005BAA  9E93               	bcf	3987,7,c	;volatile
  3199                           
  3200                           ;SHRC.c: 56: LATBbits.LATB6 = 0;
  3201  005BAC  9C8A               	bcf	3978,6,c	;volatile
  3202                           
  3203                           ;SHRC.c: 57: LATBbits.LATB7 = 0;
  3204  005BAE  9E8A               	bcf	3978,7,c	;volatile
  3205  005BB0  0012               	return		;funcret
  3206  005BB2                     __end_of_inicializa_shrc:
  3207                           	opt stack 0
  3208                           tblptru	equ	0xFF8
  3209                           tblptrh	equ	0xFF7
  3210                           tblptrl	equ	0xFF6
  3211                           tablat	equ	0xFF5
  3212                           intcon	equ	0xFF2
  3213                           intcon2	equ	0xFF1
  3214                           intcon3	equ	0xFF0
  3215                           postinc0	equ	0xFEE
  3216                           wreg	equ	0xFE8
  3217                           postdec1	equ	0xFE5
  3218                           fsr1h	equ	0xFE2
  3219                           fsr1l	equ	0xFE1
  3220                           postinc2	equ	0xFDE
  3221                           status	equ	0xFD8
  3222                           
  3223 ;; *************** function _escalonador *****************
  3224 ;; Defined at:
  3225 ;;		line 187 in file "main.c"
  3226 ;; Parameters:    Size  Location     Type
  3227 ;;		None
  3228 ;; Auto vars:     Size  Location     Type
  3229 ;;  cont            1   69[BANK1 ] unsigned char 
  3230 ;; Return value:  Size  Location     Type
  3231 ;;                  1    wreg      void 
  3232 ;; Registers used:
  3233 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3234 ;; Tracked objects:
  3235 ;;		On entry : 0/0
  3236 ;;		On exit  : 0/0
  3237 ;;		Unchanged: 0/0
  3238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3239 ;;      Params:         0       0       0       0       0       0       0       0       0
  3240 ;;      Locals:         0       0       1       0       0       0       0       0       0
  3241 ;;      Temps:          0       0       2       0       0       0       0       0       0
  3242 ;;      Totals:         0       0       3       0       0       0       0       0       0
  3243 ;;Total ram usage:        3 bytes
  3244 ;; Hardware stack levels used:    1
  3245 ;; Hardware stack levels required when called:   18
  3246 ;; This function calls:
  3247 ;;		_SDCard
  3248 ;; This function is called by:
  3249 ;;		_main
  3250 ;; This function uses a non-reentrant model
  3251 ;;
  3252                           
  3253                           	psect	text13
  3254  004D66                     __ptext13:
  3255                           	opt stack 0
  3256  004D66                     _escalonador:
  3257                           	opt stack 12
  3258                           
  3259                           ;main.c: 189: unsigned char cont;
  3260                           ;main.c: 190: for(cont = 0; cont<2;cont++)
  3261                           
  3262                           ;incstack = 0
  3263  004D66  0E00               	movlw	0
  3264  004D68  0101               	movlb	1	; () banked
  3265  004D6A  6FC4               	movwf	escalonador@cont& (0+255),b
  3266  004D6C                     l12945:
  3267                           
  3268                           ; BSR set to: 1
  3269  004D6C  0E01               	movlw	1
  3270  004D6E  65C4               	cpfsgt	escalonador@cont& (0+255),b
  3271  004D70  D001               	goto	l79
  3272  004D72  0012               	return	
  3273  004D74                     l79:
  3274                           
  3275                           ; BSR set to: 1
  3276                           ;main.c: 191: {
  3277                           ;main.c: 192: if((p_tarefas[cont]!= 0 ) && tempo_tarefa[cont] == 0)
  3278                           
  3279                           ; BSR set to: 1
  3280  004D74  51C4               	movf	escalonador@cont& (0+255),w,b
  3281  004D76  0D02               	mullw	2
  3282  004D78  0EF2               	movlw	low _p_tarefas
  3283  004D7A  24F3               	addwf	prodl,w,c
  3284  004D7C  6ED9               	movwf	fsr2l,c
  3285  004D7E  0E00               	movlw	high _p_tarefas
  3286  004D80  20F4               	addwfc	prodh,w,c
  3287  004D82  6EDA               	movwf	fsr2h,c
  3288  004D84  50DE               	movf	postinc2,w,c
  3289  004D86  10DE               	iorwf	postinc2,w,c
  3290  004D88  B4D8               	btfsc	status,2,c
  3291  004D8A  D042               	goto	l81
  3292                           
  3293                           ; BSR set to: 1
  3294  004D8C  51C4               	movf	escalonador@cont& (0+255),w,b
  3295  004D8E  0D02               	mullw	2
  3296  004D90  0EEE               	movlw	low _tempo_tarefa
  3297  004D92  24F3               	addwf	prodl,w,c
  3298  004D94  6ED9               	movwf	fsr2l,c
  3299  004D96  0E00               	movlw	high _tempo_tarefa
  3300  004D98  20F4               	addwfc	prodh,w,c
  3301  004D9A  6EDA               	movwf	fsr2h,c
  3302  004D9C  50DE               	movf	postinc2,w,c
  3303  004D9E  10DE               	iorwf	postinc2,w,c
  3304  004DA0  A4D8               	btfss	status,2,c
  3305  004DA2  D036               	goto	l81
  3306                           
  3307                           ; BSR set to: 1
  3308                           ;main.c: 193: {
  3309                           ;main.c: 194: tarefa_em_execucao = 1;
  3310  004DA4  0E01               	movlw	1
  3311  004DA6  6E43               	movwf	_tarefa_em_execucao,c	;volatile
  3312                           
  3313                           ;main.c: 195: timeout_tarefa = 65000;
  3314  004DA8  0EFD               	movlw	253
  3315  004DAA  0100               	movlb	0	; () banked
  3316  004DAC  6FFD               	movwf	(_timeout_tarefa+1)& (0+255),b
  3317  004DAE  0EE8               	movlw	232
  3318  004DB0  6FFC               	movwf	_timeout_tarefa& (0+255),b
  3319                           
  3320                           ; BSR set to: 0
  3321                           ;main.c: 196: p_tarefas[cont]();
  3322  004DB2  0101               	movlb	1	; () banked
  3323  004DB4  51C4               	movf	escalonador@cont& (0+255),w,b
  3324  004DB6  0D02               	mullw	2
  3325  004DB8  0EF2               	movlw	low _p_tarefas
  3326  004DBA  24F3               	addwf	prodl,w,c
  3327  004DBC  6ED9               	movwf	fsr2l,c
  3328  004DBE  0E00               	movlw	high _p_tarefas
  3329  004DC0  20F4               	addwfc	prodh,w,c
  3330  004DC2  6EDA               	movwf	fsr2h,c
  3331  004DC4  CFDE F1C2          	movff	postinc2,??_escalonador
  3332  004DC8  CFDD F1C3          	movff	postdec2,??_escalonador+1
  3333  004DCC  D801               	call	u18068
  3334  004DCE  D009               	goto	u18069
  3335  004DD0                     u18068:
  3336  004DD0  0005               	push	
  3337  004DD2  6EFA               	movwf	pclath,c
  3338  004DD4  51C2               	movf	??_escalonador& (0+255),w,b
  3339  004DD6  6EFD               	movwf	tosl,c
  3340  004DD8  51C3               	movf	(??_escalonador+1)& (0+255),w,b
  3341  004DDA  6EFE               	movwf	tosh,c
  3342  004DDC  6AFF               	clrf	tosu,c
  3343  004DDE  50FA               	movf	pclath,w,c
  3344  004DE0  0012               	return		;indir
  3345  004DE2                     u18069:
  3346                           
  3347                           ;main.c: 197: tarefa_em_execucao = 0;
  3348  004DE2  0E00               	movlw	0
  3349  004DE4  6E43               	movwf	_tarefa_em_execucao,c	;volatile
  3350                           
  3351                           ;main.c: 198: tempo_tarefa[cont] = tempo_backup[cont];
  3352  004DE6  0101               	movlb	1	; () banked
  3353  004DE8  51C4               	movf	escalonador@cont& (0+255),w,b
  3354  004DEA  0D02               	mullw	2
  3355  004DEC  0E65               	movlw	low _tempo_backup
  3356  004DEE  24F3               	addwf	prodl,w,c
  3357  004DF0  6ED9               	movwf	fsr2l,c
  3358  004DF2  0E01               	movlw	high _tempo_backup
  3359  004DF4  20F4               	addwfc	prodh,w,c
  3360  004DF6  6EDA               	movwf	fsr2h,c
  3361  004DF8  51C4               	movf	escalonador@cont& (0+255),w,b
  3362  004DFA  0D02               	mullw	2
  3363  004DFC  0EEE               	movlw	low _tempo_tarefa
  3364  004DFE  24F3               	addwf	prodl,w,c
  3365  004E00  6EE1               	movwf	fsr1l,c
  3366  004E02  0E00               	movlw	high _tempo_tarefa
  3367  004E04  20F4               	addwfc	prodh,w,c
  3368  004E06  6EE2               	movwf	fsr1h,c
  3369  004E08  CFDE FFE6          	movff	postinc2,postinc1
  3370  004E0C  CFDD FFE5          	movff	postdec2,postdec1
  3371  004E10                     l81:
  3372                           
  3373                           ; BSR set to: 1
  3374                           
  3375                           ; BSR set to: 1
  3376  004E10  2BC4               	incf	escalonador@cont& (0+255),f,b
  3377  004E12  D7AC               	goto	l12945
  3378  004E14                     __end_of_escalonador:
  3379                           	opt stack 0
  3380                           tosu	equ	0xFFF
  3381                           tosh	equ	0xFFE
  3382                           tosl	equ	0xFFD
  3383                           pclath	equ	0xFFA
  3384                           tblptru	equ	0xFF8
  3385                           tblptrh	equ	0xFF7
  3386                           tblptrl	equ	0xFF6
  3387                           tablat	equ	0xFF5
  3388                           prodh	equ	0xFF4
  3389                           prodl	equ	0xFF3
  3390                           intcon	equ	0xFF2
  3391                           intcon2	equ	0xFF1
  3392                           intcon3	equ	0xFF0
  3393                           postinc0	equ	0xFEE
  3394                           wreg	equ	0xFE8
  3395                           postinc1	equ	0xFE6
  3396                           postdec1	equ	0xFE5
  3397                           fsr1h	equ	0xFE2
  3398                           fsr1l	equ	0xFE1
  3399                           postinc2	equ	0xFDE
  3400                           postdec2	equ	0xFDD
  3401                           fsr2h	equ	0xFDA
  3402                           fsr2l	equ	0xFD9
  3403                           status	equ	0xFD8
  3404                           
  3405 ;; *************** function _SDCard *****************
  3406 ;; Defined at:
  3407 ;;		line 130 in file "bibliotecas/SDCard.c"
  3408 ;; Parameters:    Size  Location     Type
  3409 ;;		None
  3410 ;; Auto vars:     Size  Location     Type
  3411 ;;  fil            32   48[BANK3 ] struct .
  3412 ;;  bw              2   45[BANK3 ] unsigned short 
  3413 ;;  br              2    0        unsigned short 
  3414 ;;  FResult         1   47[BANK3 ] enum E3916
  3415 ;; Return value:  Size  Location     Type
  3416 ;;                  1    wreg      void 
  3417 ;; Registers used:
  3418 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3419 ;; Tracked objects:
  3420 ;;		On entry : 0/0
  3421 ;;		On exit  : 0/0
  3422 ;;		Unchanged: 0/0
  3423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3424 ;;      Params:         0       0       0       0       0       0       0       0       0
  3425 ;;      Locals:         0       0       0       0      35       0       0       0       0
  3426 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3427 ;;      Totals:         0       0       0       0      35       0       0       0       0
  3428 ;;Total ram usage:       35 bytes
  3429 ;; Hardware stack levels used:    1
  3430 ;; Hardware stack levels required when called:   17
  3431 ;; This function calls:
  3432 ;;		_escreve_cmd_lcd
  3433 ;;		_escreve_frase_ram_lcd
  3434 ;;		_escreve_inteiro_lcd
  3435 ;;		_f_close
  3436 ;;		_f_lseek
  3437 ;;		_f_mount
  3438 ;;		_f_open
  3439 ;;		_f_write
  3440 ;;		_posicao_cursor_lcd
  3441 ;; This function is called by:
  3442 ;;		_inicializa_tarefas
  3443 ;;		_escalonador
  3444 ;; This function uses a non-reentrant model
  3445 ;;
  3446                           
  3447                           	psect	text14
  3448  004018                     __ptext14:
  3449                           	opt stack 0
  3450  004018                     _SDCard:
  3451                           	opt stack 12
  3452                           
  3453                           ;SDCard.c: 132: T0CONbits.TMR0ON = 0;
  3454                           
  3455                           ; BSR set to: 1
  3456                           ;incstack = 0
  3457  004018  9ED5               	bcf	4053,7,c	;volatile
  3458                           
  3459                           ;SDCard.c: 134: FRESULT FResult;
  3460                           ;SDCard.c: 135: FIL fil;
  3461                           ;SDCard.c: 136: WORD br, bw;
  3462                           ;SDCard.c: 146: escreve_cmd_lcd(0b00000001);
  3463  00401A  0E01               	movlw	1
  3464  00401C  EC4C  F028         	call	_escreve_cmd_lcd
  3465                           
  3466                           ;SDCard.c: 150: posicao_cursor_lcd(1,0);
  3467  004020  0E00               	movlw	0
  3468  004022  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3469  004024  0E01               	movlw	1
  3470  004026  EC89  F02A         	call	_posicao_cursor_lcd
  3471                           
  3472                           ;SDCard.c: 151: escreve_frase_ram_lcd("montando sistema");
  3473  00402A  0EE9               	movlw	low STR_8
  3474  00402C  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3475  00402E  0E61               	movlw	high STR_8
  3476  004030  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3477  004032  EC78  F02B         	call	_escreve_frase_ram_lcd	;wreg free
  3478                           
  3479                           ;SDCard.c: 152: if ((FResult = f_mount(&fs, "", 1)) == FR_OK) {
  3480  004036  0E50               	movlw	low _fs
  3481  004038  0100               	movlb	0	; () banked
  3482  00403A  6FBC               	movwf	f_mount@fs& (0+255),b
  3483  00403C  0E03               	movlw	high _fs
  3484  00403E  6FBD               	movwf	(f_mount@fs+1)& (0+255),b
  3485  004040  0E27               	movlw	low (STR_14+14)
  3486  004042  6FBE               	movwf	f_mount@path& (0+255),b
  3487  004044  0E62               	movlw	high (STR_14+14)
  3488  004046  6FBF               	movwf	(f_mount@path+1)& (0+255),b
  3489  004048  0E01               	movlw	1
  3490  00404A  6FC0               	movwf	f_mount@opt& (0+255),b
  3491  00404C  EC59  F026         	call	_f_mount	;wreg free
  3492  004050  0103               	movlb	3	; () banked
  3493  004052  6F2F               	movwf	SDCard@FResult& (0+255),b
  3494  004054  512F               	movf	SDCard@FResult& (0+255),w,b
  3495  004056  A4D8               	btfss	status,2,c
  3496  004058  D07B               	goto	l317
  3497                           
  3498                           ; BSR set to: 3
  3499                           ;SDCard.c: 154: posicao_cursor_lcd(1,0);
  3500  00405A  0E00               	movlw	0
  3501  00405C  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3502  00405E  0E01               	movlw	1
  3503  004060  EC89  F02A         	call	_posicao_cursor_lcd
  3504                           
  3505                           ;SDCard.c: 155: escreve_frase_ram_lcd("Abrindo arquivo");
  3506  004064  0EFA               	movlw	low STR_10
  3507  004066  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3508  004068  0E61               	movlw	high STR_10
  3509  00406A  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3510  00406C  EC78  F02B         	call	_escreve_frase_ram_lcd	;wreg free
  3511                           
  3512                           ;SDCard.c: 156: if ((FResult = f_open(&fil, "teste.txt", 0x10 | 0x01 | 0x02)) == FR_OK) 
      +                          {
  3513  004070  0E30               	movlw	low SDCard@fil
  3514  004072  0101               	movlb	1	; () banked
  3515  004074  6FB9               	movwf	f_open@fp& (0+255),b
  3516  004076  0E03               	movlw	high SDCard@fil
  3517  004078  6FBA               	movwf	(f_open@fp+1)& (0+255),b
  3518  00407A  0E41               	movlw	low STR_11
  3519  00407C  6FBB               	movwf	f_open@path& (0+255),b
  3520  00407E  0E62               	movlw	high STR_11
  3521  004080  6FBC               	movwf	(f_open@path+1)& (0+255),b
  3522  004082  0E13               	movlw	19
  3523  004084  6FBD               	movwf	f_open@mode& (0+255),b
  3524  004086  EC3D  F013         	call	_f_open	;wreg free
  3525  00408A  0103               	movlb	3	; () banked
  3526  00408C  6F2F               	movwf	SDCard@FResult& (0+255),b
  3527  00408E  512F               	movf	SDCard@FResult& (0+255),w,b
  3528  004090  A4D8               	btfss	status,2,c
  3529  004092  D054               	goto	l318
  3530                           
  3531                           ; BSR set to: 3
  3532                           ;SDCard.c: 158: posicao_cursor_lcd(1,0);
  3533  004094  0E00               	movlw	0
  3534  004096  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3535  004098  0E01               	movlw	1
  3536  00409A  EC89  F02A         	call	_posicao_cursor_lcd
  3537                           
  3538                           ;SDCard.c: 159: escreve_frase_ram_lcd("lendo tamanho");
  3539  00409E  0E28               	movlw	low STR_12
  3540  0040A0  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3541  0040A2  0E62               	movlw	high STR_12
  3542  0040A4  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3543  0040A6  EC78  F02B         	call	_escreve_frase_ram_lcd	;wreg free
  3544                           
  3545                           ;SDCard.c: 160: if ((fil.fsize != 0) && (f_lseek(&fil, fil.fsize) != FR_OK)) goto endSD;
  3546  0040AA  0103               	movlb	3	; () banked
  3547  0040AC  513A               	movf	(SDCard@fil+10)& (0+255),w,b
  3548  0040AE  113B               	iorwf	(SDCard@fil+11)& (0+255),w,b
  3549  0040B0  113C               	iorwf	(SDCard@fil+12)& (0+255),w,b
  3550  0040B2  113D               	iorwf	(SDCard@fil+13)& (0+255),w,b
  3551  0040B4  B4D8               	btfsc	status,2,c
  3552  0040B6  D012               	goto	l319
  3553                           
  3554                           ; BSR set to: 3
  3555  0040B8  0E30               	movlw	low SDCard@fil
  3556  0040BA  0100               	movlb	0	; () banked
  3557  0040BC  6FD7               	movwf	f_lseek@fp& (0+255),b
  3558  0040BE  0E03               	movlw	high SDCard@fil
  3559  0040C0  6FD8               	movwf	(f_lseek@fp+1)& (0+255),b
  3560  0040C2  C33A  F0D9         	movff	SDCard@fil+10,f_lseek@ofs
  3561  0040C6  C33B  F0DA         	movff	SDCard@fil+11,f_lseek@ofs+1
  3562  0040CA  C33C  F0DB         	movff	SDCard@fil+12,f_lseek@ofs+2
  3563  0040CE  C33D  F0DC         	movff	SDCard@fil+13,f_lseek@ofs+3
  3564  0040D2  EC79  F009         	call	_f_lseek	;wreg free
  3565  0040D6  0900               	iorlw	0
  3566  0040D8  A4D8               	btfss	status,2,c
  3567  0040DA  D029               	goto	l320
  3568  0040DC                     l319:
  3569                           
  3570                           ;SDCard.c: 161: posicao_cursor_lcd(1,0);
  3571  0040DC  0E00               	movlw	0
  3572  0040DE  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3573  0040E0  0E01               	movlw	1
  3574  0040E2  EC89  F02A         	call	_posicao_cursor_lcd
  3575                           
  3576                           ;SDCard.c: 162: escreve_frase_ram_lcd("escrevendo");
  3577  0040E6  0E36               	movlw	low STR_13
  3578  0040E8  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3579  0040EA  0E62               	movlw	high STR_13
  3580  0040EC  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3581  0040EE  EC78  F02B         	call	_escreve_frase_ram_lcd	;wreg free
  3582                           
  3583                           ;SDCard.c: 163: f_write(&fil, "Hello world!\r\n", 14, &bw);
  3584  0040F2  0E30               	movlw	low SDCard@fil
  3585  0040F4  0100               	movlb	0	; () banked
  3586  0040F6  6FD7               	movwf	f_write@fp& (0+255),b
  3587  0040F8  0E03               	movlw	high SDCard@fil
  3588  0040FA  6FD8               	movwf	(f_write@fp+1)& (0+255),b
  3589  0040FC  0E19               	movlw	low STR_14
  3590  0040FE  6FD9               	movwf	f_write@buff& (0+255),b
  3591  004100  0E62               	movlw	high STR_14
  3592  004102  6FDA               	movwf	(f_write@buff+1)& (0+255),b
  3593  004104  0E00               	movlw	0
  3594  004106  6FDC               	movwf	(f_write@btw+1)& (0+255),b
  3595  004108  0E0E               	movlw	14
  3596  00410A  6FDB               	movwf	f_write@btw& (0+255),b
  3597  00410C  0E2D               	movlw	low SDCard@bw
  3598  00410E  6FDD               	movwf	f_write@bw& (0+255),b
  3599  004110  0E03               	movlw	high SDCard@bw
  3600  004112  6FDE               	movwf	(f_write@bw+1)& (0+255),b
  3601  004114  EC82  F005         	call	_f_write	;wreg free
  3602                           
  3603                           ;SDCard.c: 164: posicao_cursor_lcd(1,0);
  3604  004118  0E00               	movlw	0
  3605  00411A  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3606  00411C  0E01               	movlw	1
  3607  00411E  EC89  F02A         	call	_posicao_cursor_lcd
  3608                           
  3609                           ;SDCard.c: 165: escreve_frase_ram_lcd("fechando");
  3610  004122  0E4B               	movlw	low STR_15
  3611  004124  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3612  004126  0E62               	movlw	high STR_15
  3613  004128  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3614  00412A  EC78  F02B         	call	_escreve_frase_ram_lcd	;wreg free
  3615  00412E                     l320:
  3616  00412E  0E30               	movlw	low SDCard@fil
  3617  004130  0100               	movlb	0	; () banked
  3618  004132  6FB8               	movwf	f_close@fp& (0+255),b
  3619  004134  0E03               	movlw	high SDCard@fil
  3620  004136  6FB9               	movwf	(f_close@fp+1)& (0+255),b
  3621  004138  EC51  F02C         	call	_f_close	;wreg free
  3622  00413C                     l318:
  3623                           
  3624                           ;SDCard.c: 167: }
  3625                           ;SDCard.c: 168: posicao_cursor_lcd(1,0);
  3626  00413C  0E00               	movlw	0
  3627  00413E  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3628  004140  0E01               	movlw	1
  3629  004142  EC89  F02A         	call	_posicao_cursor_lcd
  3630                           
  3631                           ;SDCard.c: 169: escreve_inteiro_lcd(FResult);
  3632  004146  C32F  F02C         	movff	SDCard@FResult,escreve_inteiro_lcd@valor
  3633  00414A  6A2D               	clrf	escreve_inteiro_lcd@valor+1,c
  3634  00414C  EC70  F02C         	call	_escreve_inteiro_lcd	;wreg free
  3635  004150                     l317:
  3636                           
  3637                           ;SDCard.c: 170: }
  3638                           ;SDCard.c: 171: posicao_cursor_lcd(1,0);
  3639  004150  0E00               	movlw	0
  3640  004152  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3641  004154  0E01               	movlw	1
  3642  004156  EC89  F02A         	call	_posicao_cursor_lcd
  3643                           
  3644                           ;SDCard.c: 172: escreve_inteiro_lcd(FResult);
  3645  00415A  C32F  F02C         	movff	SDCard@FResult,escreve_inteiro_lcd@valor
  3646  00415E  6A2D               	clrf	escreve_inteiro_lcd@valor+1,c
  3647  004160  EC70  F02C         	call	_escreve_inteiro_lcd	;wreg free
  3648  004164                     l321:
  3649  004164  D7FF               	goto	l321
  3650  004166                     __end_of_SDCard:
  3651                           	opt stack 0
  3652                           tosu	equ	0xFFF
  3653                           tosh	equ	0xFFE
  3654                           tosl	equ	0xFFD
  3655                           pclath	equ	0xFFA
  3656                           tblptru	equ	0xFF8
  3657                           tblptrh	equ	0xFF7
  3658                           tblptrl	equ	0xFF6
  3659                           tablat	equ	0xFF5
  3660                           prodh	equ	0xFF4
  3661                           prodl	equ	0xFF3
  3662                           intcon	equ	0xFF2
  3663                           intcon2	equ	0xFF1
  3664                           intcon3	equ	0xFF0
  3665                           postinc0	equ	0xFEE
  3666                           wreg	equ	0xFE8
  3667                           postinc1	equ	0xFE6
  3668                           postdec1	equ	0xFE5
  3669                           fsr1h	equ	0xFE2
  3670                           fsr1l	equ	0xFE1
  3671                           postinc2	equ	0xFDE
  3672                           postdec2	equ	0xFDD
  3673                           fsr2h	equ	0xFDA
  3674                           fsr2l	equ	0xFD9
  3675                           status	equ	0xFD8
  3676                           
  3677 ;; *************** function _f_write *****************
  3678 ;; Defined at:
  3679 ;;		line 2691 in file "bibliotecas/ff.c"
  3680 ;; Parameters:    Size  Location     Type
  3681 ;;  fp              2  119[BANK0 ] PTR struct .
  3682 ;;		 -> SDCard@fil(32), 
  3683 ;;  buff            2  121[BANK0 ] PTR const void 
  3684 ;;		 -> STR_14(15), 
  3685 ;;  btw             2  123[BANK0 ] unsigned int 
  3686 ;;  bw              2  125[BANK0 ] PTR unsigned int 
  3687 ;;		 -> SDCard@bw(2), 
  3688 ;; Auto vars:     Size  Location     Type
  3689 ;;  clst            4   26[BANK1 ] unsigned long 
  3690 ;;  sect            4   22[BANK1 ] unsigned long 
  3691 ;;  wcnt            2   30[BANK1 ] unsigned int 
  3692 ;;  cc              2   20[BANK1 ] unsigned int 
  3693 ;;  wbuff           2   17[BANK1 ] PTR const unsigned char 
  3694 ;;		 -> STR_14(15), 
  3695 ;;  csect           1   19[BANK1 ] unsigned char 
  3696 ;;  res             1   16[BANK1 ] enum E75
  3697 ;; Return value:  Size  Location     Type
  3698 ;;                  1    wreg      enum E3916
  3699 ;; Registers used:
  3700 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3701 ;; Tracked objects:
  3702 ;;		On entry : 0/0
  3703 ;;		On exit  : 0/0
  3704 ;;		Unchanged: 0/0
  3705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3706 ;;      Params:         0       8       0       0       0       0       0       0       0
  3707 ;;      Locals:         0       0      16       0       0       0       0       0       0
  3708 ;;      Temps:          0       0      16       0       0       0       0       0       0
  3709 ;;      Totals:         0       8      32       0       0       0       0       0       0
  3710 ;;Total ram usage:       40 bytes
  3711 ;; Hardware stack levels used:    1
  3712 ;; Hardware stack levels required when called:   13
  3713 ;; This function calls:
  3714 ;;		_clust2sect
  3715 ;;		_create_chain
  3716 ;;		_disk_write
  3717 ;;		_mem_cpy
  3718 ;;		_move_window
  3719 ;;		_sync_window
  3720 ;;		_validate
  3721 ;; This function is called by:
  3722 ;;		_SDCard
  3723 ;; This function uses a non-reentrant model
  3724 ;;
  3725                           
  3726                           	psect	text15
  3727  000B04                     __ptext15:
  3728                           	opt stack 0
  3729  000B04                     _f_write:
  3730                           	opt stack 15
  3731                           
  3732                           ;ff.c: 2698: FRESULT res;
  3733                           ;ff.c: 2699: DWORD clst, sect;
  3734                           ;ff.c: 2700: UINT wcnt, cc;
  3735                           ;ff.c: 2701: const BYTE *wbuff = (const BYTE*)buff;
  3736                           
  3737                           ;incstack = 0
  3738  000B04  C0D9  F190         	movff	f_write@buff,f_write@wbuff
  3739  000B08  C0DA  F191         	movff	f_write@buff+1,f_write@wbuff+1
  3740                           
  3741                           ;ff.c: 2702: BYTE csect;
  3742                           ;ff.c: 2705: *bw = 0;
  3743  000B0C  C0DD  FFD9         	movff	f_write@bw,fsr2l
  3744  000B10  C0DE  FFDA         	movff	f_write@bw+1,fsr2h
  3745  000B14  0E00               	movlw	0
  3746  000B16  6EDE               	movwf	postinc2,c
  3747  000B18  0E00               	movlw	0
  3748  000B1A  6EDD               	movwf	postdec2,c
  3749                           
  3750                           ;ff.c: 2707: res = validate(fp);
  3751  000B1C  C0D7  F01B         	movff	f_write@fp,validate@obj
  3752  000B20  C0D8  F01C         	movff	f_write@fp+1,validate@obj+1
  3753  000B24  EC02  F028         	call	_validate	;wreg free
  3754  000B28  0101               	movlb	1	; () banked
  3755  000B2A  6F8F               	movwf	f_write@res& (0+255),b
  3756                           
  3757                           ; BSR set to: 1
  3758                           ;ff.c: 2708: if (res != FR_OK) return res;
  3759  000B2C  518F               	movf	f_write@res& (0+255),w,b
  3760  000B2E  A4D8               	btfss	status,2,c
  3761  000B30  0012               	return	
  3762                           
  3763                           ; BSR set to: 1
  3764                           ;ff.c: 2709: if (fp->err)
  3765                           
  3766                           ; BSR set to: 1
  3767                           
  3768                           ; BSR set to: 1
  3769                           ;	Return value of _f_write is never used
  3770  000B32  0100               	movlb	0	; () banked
  3771  000B34  EE20 F005          	lfsr	2,5
  3772  000B38  51D7               	movf	f_write@fp& (0+255),w,b
  3773  000B3A  26D9               	addwf	fsr2l,f,c
  3774  000B3C  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  3775  000B3E  22DA               	addwfc	fsr2h,f,c
  3776  000B40  50DF               	movf	indf2,w,c
  3777  000B42  A4D8               	btfss	status,2,c
  3778  000B44  0012               	return	
  3779                           
  3780                           ; BSR set to: 0
  3781                           ;ff.c: 2711: if (!(fp->flag & 0x02))
  3782                           
  3783                           ; BSR set to: 0
  3784                           
  3785                           ; BSR set to: 0
  3786                           ;ff.c: 2710: return (FRESULT)fp->err;
  3787                           ;	Return value of _f_write is never used
  3788  000B46  EE20 F004          	lfsr	2,4
  3789  000B4A  51D7               	movf	f_write@fp& (0+255),w,b
  3790  000B4C  26D9               	addwf	fsr2l,f,c
  3791  000B4E  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  3792  000B50  22DA               	addwfc	fsr2h,f,c
  3793  000B52  A2DF               	btfss	indf2,1,c
  3794  000B54  0012               	return	
  3795                           
  3796                           ; BSR set to: 0
  3797                           ;ff.c: 2713: if (fp->fptr + btw < fp->fptr) btw = 0;
  3798                           
  3799                           ; BSR set to: 0
  3800                           
  3801                           ; BSR set to: 0
  3802                           ;ff.c: 2712: return FR_DENIED;
  3803                           ;	Return value of _f_write is never used
  3804  000B56  EE20 F006          	lfsr	2,6
  3805  000B5A  51D7               	movf	f_write@fp& (0+255),w,b
  3806  000B5C  26D9               	addwf	fsr2l,f,c
  3807  000B5E  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  3808  000B60  22DA               	addwfc	fsr2h,f,c
  3809  000B62  EE10 F006          	lfsr	1,6
  3810  000B66  51D7               	movf	f_write@fp& (0+255),w,b
  3811  000B68  26E1               	addwf	fsr1l,f,c
  3812  000B6A  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  3813  000B6C  22E2               	addwfc	fsr1h,f,c
  3814  000B6E  CFE6 F183          	movff	postinc1,??_f_write+4
  3815  000B72  CFE6 F184          	movff	postinc1,??_f_write+5
  3816  000B76  CFE6 F185          	movff	postinc1,??_f_write+6
  3817  000B7A  CFE6 F186          	movff	postinc1,??_f_write+7
  3818  000B7E  51DB               	movf	f_write@btw& (0+255),w,b
  3819  000B80  0101               	movlb	1	; () banked
  3820  000B82  2583               	addwf	(??_f_write+4)& (0+255),w,b
  3821  000B84  6F87               	movwf	(??_f_write+8)& (0+255),b
  3822  000B86  0100               	movlb	0	; () banked
  3823  000B88  51DC               	movf	(f_write@btw+1)& (0+255),w,b
  3824  000B8A  0101               	movlb	1	; () banked
  3825  000B8C  2184               	addwfc	(??_f_write+5)& (0+255),w,b
  3826  000B8E  6F88               	movwf	(??_f_write+9)& (0+255),b
  3827  000B90  0E00               	movlw	0
  3828  000B92  2185               	addwfc	(??_f_write+6)& (0+255),w,b
  3829  000B94  6F89               	movwf	(??_f_write+10)& (0+255),b
  3830  000B96  0E00               	movlw	0
  3831  000B98  2186               	addwfc	(??_f_write+7)& (0+255),w,b
  3832  000B9A  6F8A               	movwf	(??_f_write+11)& (0+255),b
  3833  000B9C  50DE               	movf	postinc2,w,c
  3834  000B9E  5D87               	subwf	(??_f_write+8)& (0+255),w,b
  3835  000BA0  50DE               	movf	postinc2,w,c
  3836  000BA2  5988               	subwfb	(??_f_write+9)& (0+255),w,b
  3837  000BA4  50DE               	movf	postinc2,w,c
  3838  000BA6  5989               	subwfb	(??_f_write+10)& (0+255),w,b
  3839  000BA8  50DE               	movf	postinc2,w,c
  3840  000BAA  598A               	subwfb	(??_f_write+11)& (0+255),w,b
  3841  000BAC  B0D8               	btfsc	status,0,c
  3842  000BAE  D368               	goto	l1477
  3843                           
  3844                           ; BSR set to: 1
  3845  000BB0  0E00               	movlw	0
  3846  000BB2  0100               	movlb	0	; () banked
  3847  000BB4  6FDC               	movwf	(f_write@btw+1)& (0+255),b
  3848  000BB6  0E00               	movlw	0
  3849  000BB8  6FDB               	movwf	f_write@btw& (0+255),b
  3850                           
  3851                           ; BSR set to: 0
  3852                           ;ff.c: 2715: for ( ; btw;
  3853                           ;ff.c: 2716: wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
  3854  000BBA  D362               	goto	l1477
  3855  000BBC                     
  3856                           ; BSR set to: 0
  3857                           ;ff.c: 2717: if ((fp->fptr % ((UINT)512)) == 0) {
  3858                           
  3859                           ; BSR set to: 0
  3860  000BBC  EE20 F006          	lfsr	2,6
  3861  000BC0  51D7               	movf	f_write@fp& (0+255),w,b
  3862  000BC2  26D9               	addwf	fsr2l,f,c
  3863  000BC4  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  3864  000BC6  22DA               	addwfc	fsr2h,f,c
  3865  000BC8  0EFF               	movlw	255
  3866  000BCA  14DE               	andwf	postinc2,w,c
  3867  000BCC  0101               	movlb	1	; () banked
  3868  000BCE  6F7F               	movwf	??_f_write& (0+255),b
  3869  000BD0  0E01               	movlw	1
  3870  000BD2  14DE               	andwf	postinc2,w,c
  3871  000BD4  6F80               	movwf	(??_f_write+1)& (0+255),b
  3872  000BD6  0E00               	movlw	0
  3873  000BD8  14DE               	andwf	postinc2,w,c
  3874  000BDA  6F81               	movwf	(??_f_write+2)& (0+255),b
  3875  000BDC  0E00               	movlw	0
  3876  000BDE  14DE               	andwf	postinc2,w,c
  3877  000BE0  6F82               	movwf	(??_f_write+3)& (0+255),b
  3878  000BE2  517F               	movf	??_f_write& (0+255),w,b
  3879  000BE4  1180               	iorwf	(??_f_write+1)& (0+255),w,b
  3880  000BE6  1181               	iorwf	(??_f_write+2)& (0+255),w,b
  3881  000BE8  1182               	iorwf	(??_f_write+3)& (0+255),w,b
  3882  000BEA  A4D8               	btfss	status,2,c
  3883  000BEC  D298               	goto	l1479
  3884                           
  3885                           ; BSR set to: 1
  3886                           ;ff.c: 2718: csect = (BYTE)(fp->fptr / ((UINT)512) & (fp->fs->csize - 1));
  3887  000BEE  0100               	movlb	0	; () banked
  3888  000BF0  EE20 F006          	lfsr	2,6
  3889  000BF4  51D7               	movf	f_write@fp& (0+255),w,b
  3890  000BF6  26D9               	addwf	fsr2l,f,c
  3891  000BF8  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  3892  000BFA  22DA               	addwfc	fsr2h,f,c
  3893  000BFC  CFDE F17F          	movff	postinc2,??_f_write
  3894  000C00  CFDE F180          	movff	postinc2,??_f_write+1
  3895  000C04  CFDE F181          	movff	postinc2,??_f_write+2
  3896  000C08  CFDE F182          	movff	postinc2,??_f_write+3
  3897  000C0C  0E0A               	movlw	10
  3898  000C0E  D006               	goto	u17730
  3899  000C10                     u17735:
  3900  000C10  0101               	movlb	1	; () banked
  3901  000C12  90D8               	bcf	status,0,c
  3902  000C14  3382               	rrcf	(??_f_write+3)& (0+255),f,b
  3903  000C16  3381               	rrcf	(??_f_write+2)& (0+255),f,b
  3904  000C18  3380               	rrcf	(??_f_write+1)& (0+255),f,b
  3905  000C1A  337F               	rrcf	??_f_write& (0+255),f,b
  3906  000C1C                     u17730:
  3907  000C1C  2EE8               	decfsz	wreg,f,c
  3908  000C1E  D7F8               	goto	u17735
  3909  000C20  C0D7  FFD9         	movff	f_write@fp,fsr2l
  3910  000C24  C0D8  FFDA         	movff	f_write@fp+1,fsr2h
  3911  000C28  EE10 F002          	lfsr	1,2
  3912  000C2C  50DE               	movf	postinc2,w,c
  3913  000C2E  26E1               	addwf	fsr1l,f,c
  3914  000C30  50DD               	movf	postdec2,w,c
  3915  000C32  22E2               	addwfc	fsr1h,f,c
  3916  000C34  50E7               	movf	indf1,w,c
  3917  000C36  6F83               	movwf	(??_f_write+4)& (0+255),b
  3918  000C38  0583               	decf	(??_f_write+4)& (0+255),w,b
  3919  000C3A  157F               	andwf	??_f_write& (0+255),w,b
  3920  000C3C  6F92               	movwf	f_write@csect& (0+255),b
  3921                           
  3922                           ; BSR set to: 1
  3923                           ;ff.c: 2719: if (!csect) {
  3924  000C3E  5192               	movf	f_write@csect& (0+255),w,b
  3925  000C40  A4D8               	btfss	status,2,c
  3926  000C42  D0AB               	goto	l1488
  3927                           
  3928                           ; BSR set to: 1
  3929                           ;ff.c: 2720: if (fp->fptr == 0) {
  3930  000C44  0100               	movlb	0	; () banked
  3931  000C46  EE20 F006          	lfsr	2,6
  3932  000C4A  51D7               	movf	f_write@fp& (0+255),w,b
  3933  000C4C  26D9               	addwf	fsr2l,f,c
  3934  000C4E  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  3935  000C50  22DA               	addwfc	fsr2h,f,c
  3936  000C52  50DE               	movf	postinc2,w,c
  3937  000C54  10DE               	iorwf	postinc2,w,c
  3938  000C56  10DE               	iorwf	postinc2,w,c
  3939  000C58  10DE               	iorwf	postinc2,w,c
  3940  000C5A  A4D8               	btfss	status,2,c
  3941  000C5C  D029               	goto	l1481
  3942                           
  3943                           ; BSR set to: 0
  3944                           ;ff.c: 2721: clst = fp->sclust;
  3945  000C5E  EE20 F00E          	lfsr	2,14
  3946  000C62  51D7               	movf	f_write@fp& (0+255),w,b
  3947  000C64  26D9               	addwf	fsr2l,f,c
  3948  000C66  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  3949  000C68  22DA               	addwfc	fsr2h,f,c
  3950  000C6A  CFDE F199          	movff	postinc2,f_write@clst
  3951  000C6E  CFDE F19A          	movff	postinc2,f_write@clst+1
  3952  000C72  CFDE F19B          	movff	postinc2,f_write@clst+2
  3953  000C76  CFDE F19C          	movff	postinc2,f_write@clst+3
  3954                           
  3955                           ; BSR set to: 0
  3956                           ;ff.c: 2722: if (clst == 0)
  3957  000C7A  0101               	movlb	1	; () banked
  3958  000C7C  5199               	movf	f_write@clst& (0+255),w,b
  3959  000C7E  119A               	iorwf	(f_write@clst+1)& (0+255),w,b
  3960  000C80  119B               	iorwf	(f_write@clst+2)& (0+255),w,b
  3961  000C82  119C               	iorwf	(f_write@clst+3)& (0+255),w,b
  3962  000C84  A4D8               	btfss	status,2,c
  3963  000C86  D035               	goto	l1483
  3964                           
  3965                           ; BSR set to: 1
  3966                           ;ff.c: 2723: clst = create_chain(fp->fs, 0);
  3967  000C88  C0D7  FFD9         	movff	f_write@fp,fsr2l
  3968  000C8C  C0D8  FFDA         	movff	f_write@fp+1,fsr2h
  3969  000C90  CFDE F0C0          	movff	postinc2,create_chain@fs
  3970  000C94  CFDD F0C1          	movff	postdec2,create_chain@fs+1
  3971  000C98  0E00               	movlw	0
  3972  000C9A  0100               	movlb	0	; () banked
  3973  000C9C  6FC2               	movwf	create_chain@clst& (0+255),b
  3974  000C9E  0E00               	movlw	0
  3975  000CA0  6FC3               	movwf	(create_chain@clst+1)& (0+255),b
  3976  000CA2  0E00               	movlw	0
  3977  000CA4  6FC4               	movwf	(create_chain@clst+2)& (0+255),b
  3978  000CA6  0E00               	movlw	0
  3979  000CA8  6FC5               	movwf	(create_chain@clst+3)& (0+255),b
  3980  000CAA  ECF2  F016         	call	_create_chain	;wreg free
  3981  000CAE  D019               	goto	L1
  3982  000CB0                     l1481:
  3983                           
  3984                           ;ff.c: 2730: clst = create_chain(fp->fs, fp->clust);
  3985  000CB0  C0D7  FFD9         	movff	f_write@fp,fsr2l
  3986  000CB4  C0D8  FFDA         	movff	f_write@fp+1,fsr2h
  3987  000CB8  CFDE F0C0          	movff	postinc2,create_chain@fs
  3988  000CBC  CFDD F0C1          	movff	postdec2,create_chain@fs+1
  3989  000CC0  0100               	movlb	0	; () banked
  3990  000CC2  EE20 F012          	lfsr	2,18
  3991  000CC6  51D7               	movf	f_write@fp& (0+255),w,b
  3992  000CC8  26D9               	addwf	fsr2l,f,c
  3993  000CCA  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  3994  000CCC  22DA               	addwfc	fsr2h,f,c
  3995  000CCE  CFDE F0C2          	movff	postinc2,create_chain@clst
  3996  000CD2  CFDE F0C3          	movff	postinc2,create_chain@clst+1
  3997  000CD6  CFDE F0C4          	movff	postinc2,create_chain@clst+2
  3998  000CDA  CFDE F0C5          	movff	postinc2,create_chain@clst+3
  3999  000CDE  ECF2  F016         	call	_create_chain	;wreg free
  4000  000CE2                     L1:
  4001  000CE2  C0C0  F199         	movff	?_create_chain,f_write@clst
  4002  000CE6  C0C1  F19A         	movff	?_create_chain+1,f_write@clst+1
  4003  000CEA  C0C2  F19B         	movff	?_create_chain+2,f_write@clst+2
  4004  000CEE  C0C3  F19C         	movff	?_create_chain+3,f_write@clst+3
  4005  000CF2                     l1483:
  4006                           
  4007                           ;ff.c: 2731: }
  4008                           ;ff.c: 2732: if (clst == 0) break;
  4009  000CF2  0101               	movlb	1	; () banked
  4010  000CF4  5199               	movf	f_write@clst& (0+255),w,b
  4011  000CF6  119A               	iorwf	(f_write@clst+1)& (0+255),w,b
  4012  000CF8  119B               	iorwf	(f_write@clst+2)& (0+255),w,b
  4013  000CFA  119C               	iorwf	(f_write@clst+3)& (0+255),w,b
  4014  000CFC  B4D8               	btfsc	status,2,c
  4015  000CFE  D2C5               	goto	u17950
  4016                           
  4017                           ; BSR set to: 1
  4018                           ;ff.c: 2733: if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  4019                           
  4020                           ; BSR set to: 1
  4021                           
  4022                           ; BSR set to: 1
  4023  000D00  0599               	decf	f_write@clst& (0+255),w,b
  4024  000D02  119A               	iorwf	(f_write@clst+1)& (0+255),w,b
  4025  000D04  119B               	iorwf	(f_write@clst+2)& (0+255),w,b
  4026  000D06  119C               	iorwf	(f_write@clst+3)& (0+255),w,b
  4027  000D08  A4D8               	btfss	status,2,c
  4028  000D0A  D00A               	goto	l1486
  4029                           
  4030                           ; BSR set to: 1
  4031  000D0C  0100               	movlb	0	; () banked
  4032  000D0E  EE20 F005          	lfsr	2,5
  4033  000D12  51D7               	movf	f_write@fp& (0+255),w,b
  4034  000D14  26D9               	addwf	fsr2l,f,c
  4035  000D16  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4036  000D18  22DA               	addwfc	fsr2h,f,c
  4037  000D1A  0E02               	movlw	2
  4038  000D1C  6EDF               	movwf	indf2,c
  4039                           
  4040                           ; BSR set to: 0
  4041                           ;	Return value of _f_write is never used
  4042  000D1E  0012               	return	
  4043  000D20                     l1486:
  4044                           
  4045                           ;ff.c: 2734: if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR
      +                          ; };
  4046                           
  4047                           ; BSR set to: 0
  4048  000D20  0101               	movlb	1	; () banked
  4049  000D22  2999               	incf	f_write@clst& (0+255),w,b
  4050  000D24  E111               	bnz	l12793
  4051  000D26  299A               	incf	(f_write@clst+1)& (0+255),w,b
  4052  000D28  E10F               	bnz	l12793
  4053  000D2A  299B               	incf	(f_write@clst+2)& (0+255),w,b
  4054  000D2C  E10D               	bnz	l12793
  4055  000D2E  299C               	incf	(f_write@clst+3)& (0+255),w,b
  4056  000D30  A4D8               	btfss	status,2,c
  4057  000D32  D00A               	goto	l1487
  4058                           
  4059                           ; BSR set to: 1
  4060  000D34  0100               	movlb	0	; () banked
  4061  000D36  EE20 F005          	lfsr	2,5
  4062  000D3A  51D7               	movf	f_write@fp& (0+255),w,b
  4063  000D3C  26D9               	addwf	fsr2l,f,c
  4064  000D3E  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4065  000D40  22DA               	addwfc	fsr2h,f,c
  4066  000D42  0E01               	movlw	1
  4067  000D44  6EDF               	movwf	indf2,c
  4068                           
  4069                           ; BSR set to: 0
  4070                           ;	Return value of _f_write is never used
  4071  000D46  0012               	return	
  4072  000D48                     l1487:
  4073  000D48                     l12793:
  4074                           
  4075                           ;ff.c: 2735: fp->clust = clst;
  4076  000D48  0100               	movlb	0	; () banked
  4077  000D4A  EE20 F012          	lfsr	2,18
  4078  000D4E  51D7               	movf	f_write@fp& (0+255),w,b
  4079  000D50  26D9               	addwf	fsr2l,f,c
  4080  000D52  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4081  000D54  22DA               	addwfc	fsr2h,f,c
  4082  000D56  C199  FFDE         	movff	f_write@clst,postinc2
  4083  000D5A  C19A  FFDE         	movff	f_write@clst+1,postinc2
  4084  000D5E  C19B  FFDE         	movff	f_write@clst+2,postinc2
  4085  000D62  C19C  FFDE         	movff	f_write@clst+3,postinc2
  4086                           
  4087                           ;ff.c: 2736: if (fp->sclust == 0) fp->sclust = clst;
  4088  000D66  EE20 F00E          	lfsr	2,14
  4089  000D6A  51D7               	movf	f_write@fp& (0+255),w,b
  4090  000D6C  26D9               	addwf	fsr2l,f,c
  4091  000D6E  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4092  000D70  22DA               	addwfc	fsr2h,f,c
  4093  000D72  50DE               	movf	postinc2,w,c
  4094  000D74  10DE               	iorwf	postinc2,w,c
  4095  000D76  10DE               	iorwf	postinc2,w,c
  4096  000D78  10DE               	iorwf	postinc2,w,c
  4097  000D7A  A4D8               	btfss	status,2,c
  4098  000D7C  D00E               	goto	l1488
  4099                           
  4100                           ; BSR set to: 0
  4101  000D7E  EE20 F00E          	lfsr	2,14
  4102  000D82  51D7               	movf	f_write@fp& (0+255),w,b
  4103  000D84  26D9               	addwf	fsr2l,f,c
  4104  000D86  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4105  000D88  22DA               	addwfc	fsr2h,f,c
  4106  000D8A  C199  FFDE         	movff	f_write@clst,postinc2
  4107  000D8E  C19A  FFDE         	movff	f_write@clst+1,postinc2
  4108  000D92  C19B  FFDE         	movff	f_write@clst+2,postinc2
  4109  000D96  C19C  FFDE         	movff	f_write@clst+3,postinc2
  4110  000D9A                     l1488:
  4111                           
  4112                           ;ff.c: 2737: }
  4113                           ;ff.c: 2739: if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))
  4114                           
  4115                           ; BSR set to: 0
  4116                           
  4117                           ; BSR set to: 0
  4118  000D9A  0100               	movlb	0	; () banked
  4119  000D9C  EE20 F016          	lfsr	2,22
  4120  000DA0  51D7               	movf	f_write@fp& (0+255),w,b
  4121  000DA2  26D9               	addwf	fsr2l,f,c
  4122  000DA4  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4123  000DA6  22DA               	addwfc	fsr2h,f,c
  4124  000DA8  C0D7  FFE1         	movff	f_write@fp,fsr1l
  4125  000DAC  C0D8  FFE2         	movff	f_write@fp+1,fsr1h
  4126  000DB0  EE00 F02A          	lfsr	0,42
  4127  000DB4  50E6               	movf	postinc1,w,c
  4128  000DB6  26E9               	addwf	fsr0l,f,c
  4129  000DB8  50E5               	movf	postdec1,w,c
  4130  000DBA  22EA               	addwfc	fsr0h,f,c
  4131  000DBC  50DE               	movf	postinc2,w,c
  4132  000DBE  18EE               	xorwf	postinc0,w,c
  4133  000DC0  E121               	bnz	l12805
  4134  000DC2  50DE               	movf	postinc2,w,c
  4135  000DC4  18EE               	xorwf	postinc0,w,c
  4136  000DC6  E11E               	bnz	l12805
  4137  000DC8  50DE               	movf	postinc2,w,c
  4138  000DCA  18EE               	xorwf	postinc0,w,c
  4139  000DCC  E11B               	bnz	l12805
  4140  000DCE  50DE               	movf	postinc2,w,c
  4141  000DD0  18EE               	xorwf	postinc0,w,c
  4142  000DD2  A4D8               	btfss	status,2,c
  4143  000DD4  D017               	goto	l1489
  4144                           
  4145                           ; BSR set to: 0
  4146  000DD6  C0D7  FFD9         	movff	f_write@fp,fsr2l
  4147  000DDA  C0D8  FFDA         	movff	f_write@fp+1,fsr2h
  4148  000DDE  CFDE F085          	movff	postinc2,sync_window@fs
  4149  000DE2  CFDD F086          	movff	postdec2,sync_window@fs+1
  4150  000DE6  EC4E  F01D         	call	_sync_window	;wreg free
  4151  000DEA  0900               	iorlw	0
  4152  000DEC  B4D8               	btfsc	status,2,c
  4153  000DEE  D00A               	goto	l1489
  4154                           
  4155                           ;ff.c: 2740: { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  4156  000DF0  0100               	movlb	0	; () banked
  4157  000DF2  EE20 F005          	lfsr	2,5
  4158  000DF6  51D7               	movf	f_write@fp& (0+255),w,b
  4159  000DF8  26D9               	addwf	fsr2l,f,c
  4160  000DFA  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4161  000DFC  22DA               	addwfc	fsr2h,f,c
  4162  000DFE  0E01               	movlw	1
  4163  000E00  6EDF               	movwf	indf2,c
  4164                           
  4165                           ; BSR set to: 0
  4166                           ;	Return value of _f_write is never used
  4167  000E02  0012               	return	
  4168  000E04                     l1489:
  4169  000E04                     l12805:
  4170                           
  4171                           ;ff.c: 2748: sect = clust2sect(fp->fs, fp->clust);
  4172  000E04  C0D7  FFD9         	movff	f_write@fp,fsr2l
  4173  000E08  C0D8  FFDA         	movff	f_write@fp+1,fsr2h
  4174  000E0C  CFDE F026          	movff	postinc2,clust2sect@fs
  4175  000E10  CFDD F027          	movff	postdec2,clust2sect@fs+1
  4176  000E14  0100               	movlb	0	; () banked
  4177  000E16  EE20 F012          	lfsr	2,18
  4178  000E1A  51D7               	movf	f_write@fp& (0+255),w,b
  4179  000E1C  26D9               	addwf	fsr2l,f,c
  4180  000E1E  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4181  000E20  22DA               	addwfc	fsr2h,f,c
  4182  000E22  CFDE F028          	movff	postinc2,clust2sect@clst
  4183  000E26  CFDE F029          	movff	postinc2,clust2sect@clst+1
  4184  000E2A  CFDE F02A          	movff	postinc2,clust2sect@clst+2
  4185  000E2E  CFDE F02B          	movff	postinc2,clust2sect@clst+3
  4186  000E32  EC41  F025         	call	_clust2sect	;wreg free
  4187  000E36  C026  F195         	movff	?_clust2sect,f_write@sect
  4188  000E3A  C027  F196         	movff	?_clust2sect+1,f_write@sect+1
  4189  000E3E  C028  F197         	movff	?_clust2sect+2,f_write@sect+2
  4190  000E42  C029  F198         	movff	?_clust2sect+3,f_write@sect+3
  4191                           
  4192                           ;ff.c: 2749: if (!sect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  4193  000E46  0101               	movlb	1	; () banked
  4194  000E48  5195               	movf	f_write@sect& (0+255),w,b
  4195  000E4A  1196               	iorwf	(f_write@sect+1)& (0+255),w,b
  4196  000E4C  1197               	iorwf	(f_write@sect+2)& (0+255),w,b
  4197  000E4E  1198               	iorwf	(f_write@sect+3)& (0+255),w,b
  4198  000E50  A4D8               	btfss	status,2,c
  4199  000E52  D00A               	goto	l1490
  4200                           
  4201                           ; BSR set to: 1
  4202  000E54  0100               	movlb	0	; () banked
  4203  000E56  EE20 F005          	lfsr	2,5
  4204  000E5A  51D7               	movf	f_write@fp& (0+255),w,b
  4205  000E5C  26D9               	addwf	fsr2l,f,c
  4206  000E5E  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4207  000E60  22DA               	addwfc	fsr2h,f,c
  4208  000E62  0E02               	movlw	2
  4209  000E64  6EDF               	movwf	indf2,c
  4210                           
  4211                           ; BSR set to: 0
  4212                           ;	Return value of _f_write is never used
  4213  000E66  0012               	return	
  4214  000E68                     l1490:
  4215                           
  4216                           ;ff.c: 2750: sect += csect;
  4217                           
  4218                           ; BSR set to: 0
  4219  000E68  0101               	movlb	1	; () banked
  4220  000E6A  5192               	movf	f_write@csect& (0+255),w,b
  4221  000E6C  2795               	addwf	f_write@sect& (0+255),f,b
  4222  000E6E  0E00               	movlw	0
  4223  000E70  2396               	addwfc	(f_write@sect+1)& (0+255),f,b
  4224  000E72  2397               	addwfc	(f_write@sect+2)& (0+255),f,b
  4225  000E74  2398               	addwfc	(f_write@sect+3)& (0+255),f,b
  4226                           
  4227                           ;ff.c: 2751: cc = btw / ((UINT)512);
  4228  000E76  C0DB  F17F         	movff	f_write@btw,??_f_write
  4229  000E7A  C0DC  F180         	movff	f_write@btw+1,??_f_write+1
  4230  000E7E  0E09               	movlw	9
  4231  000E80  6F81               	movwf	(??_f_write+2)& (0+255),b
  4232  000E82                     u17845:
  4233  000E82  90D8               	bcf	status,0,c
  4234  000E84  3380               	rrcf	(??_f_write+1)& (0+255),f,b
  4235  000E86  337F               	rrcf	??_f_write& (0+255),f,b
  4236  000E88  2F81               	decfsz	(??_f_write+2)& (0+255),f,b
  4237  000E8A  D7FB               	goto	u17845
  4238  000E8C  C17F  F193         	movff	??_f_write,f_write@cc
  4239  000E90  C180  F194         	movff	??_f_write+1,f_write@cc+1
  4240                           
  4241                           ;ff.c: 2752: if (cc) {
  4242  000E94  5193               	movf	f_write@cc& (0+255),w,b
  4243  000E96  1194               	iorwf	(f_write@cc+1)& (0+255),w,b
  4244  000E98  B4D8               	btfsc	status,2,c
  4245  000E9A  D0F2               	goto	l1491
  4246                           
  4247                           ; BSR set to: 1
  4248                           ;ff.c: 2753: if (csect + cc > fp->fs->csize)
  4249  000E9C  5192               	movf	f_write@csect& (0+255),w,b
  4250  000E9E  2593               	addwf	f_write@cc& (0+255),w,b
  4251  000EA0  6F7F               	movwf	??_f_write& (0+255),b
  4252  000EA2  0E00               	movlw	0
  4253  000EA4  2194               	addwfc	(f_write@cc+1)& (0+255),w,b
  4254  000EA6  6F80               	movwf	(??_f_write+1)& (0+255),b
  4255  000EA8  C0D7  FFD9         	movff	f_write@fp,fsr2l
  4256  000EAC  C0D8  FFDA         	movff	f_write@fp+1,fsr2h
  4257  000EB0  EE10 F002          	lfsr	1,2
  4258  000EB4  50DE               	movf	postinc2,w,c
  4259  000EB6  26E1               	addwf	fsr1l,f,c
  4260  000EB8  50DD               	movf	postdec2,w,c
  4261  000EBA  22E2               	addwfc	fsr1h,f,c
  4262  000EBC  50E7               	movf	indf1,w,c
  4263  000EBE  6F81               	movwf	(??_f_write+2)& (0+255),b
  4264  000EC0  6B82               	clrf	(??_f_write+3)& (0+255),b
  4265  000EC2  517F               	movf	??_f_write& (0+255),w,b
  4266  000EC4  5D81               	subwf	(??_f_write+2)& (0+255),w,b
  4267  000EC6  5180               	movf	(??_f_write+1)& (0+255),w,b
  4268  000EC8  5982               	subwfb	(??_f_write+3)& (0+255),w,b
  4269  000ECA  B0D8               	btfsc	status,0,c
  4270  000ECC  D019               	goto	l1492
  4271                           
  4272                           ; BSR set to: 1
  4273                           ;ff.c: 2754: cc = fp->fs->csize - csect;
  4274  000ECE  5192               	movf	f_write@csect& (0+255),w,b
  4275  000ED0  6F7F               	movwf	??_f_write& (0+255),b
  4276  000ED2  6B80               	clrf	(??_f_write+1)& (0+255),b
  4277  000ED4  1F7F               	comf	??_f_write& (0+255),f,b
  4278  000ED6  1F80               	comf	(??_f_write+1)& (0+255),f,b
  4279  000ED8  4B7F               	infsnz	??_f_write& (0+255),f,b
  4280  000EDA  2B80               	incf	(??_f_write+1)& (0+255),f,b
  4281  000EDC  C0D7  FFD9         	movff	f_write@fp,fsr2l
  4282  000EE0  C0D8  FFDA         	movff	f_write@fp+1,fsr2h
  4283  000EE4  EE10 F002          	lfsr	1,2
  4284  000EE8  50DE               	movf	postinc2,w,c
  4285  000EEA  26E1               	addwf	fsr1l,f,c
  4286  000EEC  50DD               	movf	postdec2,w,c
  4287  000EEE  22E2               	addwfc	fsr1h,f,c
  4288  000EF0  50E7               	movf	indf1,w,c
  4289  000EF2  6F81               	movwf	(??_f_write+2)& (0+255),b
  4290  000EF4  5181               	movf	(??_f_write+2)& (0+255),w,b
  4291  000EF6  257F               	addwf	??_f_write& (0+255),w,b
  4292  000EF8  6F93               	movwf	f_write@cc& (0+255),b
  4293  000EFA  0E00               	movlw	0
  4294  000EFC  2180               	addwfc	(??_f_write+1)& (0+255),w,b
  4295  000EFE  6F94               	movwf	(f_write@cc+1)& (0+255),b
  4296  000F00                     l1492:
  4297                           
  4298                           ; BSR set to: 1
  4299                           ;ff.c: 2755: if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
  4300                           
  4301                           ; BSR set to: 1
  4302  000F00  C190  F07B         	movff	f_write@wbuff,disk_write@buff
  4303  000F04  C191  F07C         	movff	f_write@wbuff+1,disk_write@buff+1
  4304  000F08  C195  F07D         	movff	f_write@sect,disk_write@sector
  4305  000F0C  C196  F07E         	movff	f_write@sect+1,disk_write@sector+1
  4306  000F10  C197  F07F         	movff	f_write@sect+2,disk_write@sector+2
  4307  000F14  C198  F080         	movff	f_write@sect+3,disk_write@sector+3
  4308  000F18  C193  F081         	movff	f_write@cc,disk_write@count
  4309  000F1C  C194  F082         	movff	f_write@cc+1,disk_write@count+1
  4310  000F20  C0D7  FFD9         	movff	f_write@fp,fsr2l
  4311  000F24  C0D8  FFDA         	movff	f_write@fp+1,fsr2h
  4312  000F28  EE10 F001          	lfsr	1,1
  4313  000F2C  50DE               	movf	postinc2,w,c
  4314  000F2E  26E1               	addwf	fsr1l,f,c
  4315  000F30  50DD               	movf	postdec2,w,c
  4316  000F32  22E2               	addwfc	fsr1h,f,c
  4317  000F34  50E7               	movf	indf1,w,c
  4318  000F36  EC07  F01E         	call	_disk_write
  4319  000F3A  0900               	iorlw	0
  4320  000F3C  B4D8               	btfsc	status,2,c
  4321  000F3E  D00A               	goto	l1493
  4322                           
  4323                           ;ff.c: 2756: { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  4324  000F40  0100               	movlb	0	; () banked
  4325  000F42  EE20 F005          	lfsr	2,5
  4326  000F46  51D7               	movf	f_write@fp& (0+255),w,b
  4327  000F48  26D9               	addwf	fsr2l,f,c
  4328  000F4A  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4329  000F4C  22DA               	addwfc	fsr2h,f,c
  4330  000F4E  0E01               	movlw	1
  4331  000F50  6EDF               	movwf	indf2,c
  4332                           
  4333                           ; BSR set to: 0
  4334                           ;	Return value of _f_write is never used
  4335  000F52  0012               	return	
  4336  000F54                     l1493:
  4337                           
  4338                           ;ff.c: 2759: if (fp->fs->winsect - sect < cc) {
  4339                           
  4340                           ; BSR set to: 0
  4341  000F54  0101               	movlb	1	; () banked
  4342  000F56  5193               	movf	f_write@cc& (0+255),w,b
  4343  000F58  6F7F               	movwf	??_f_write& (0+255),b
  4344  000F5A  5194               	movf	(f_write@cc+1)& (0+255),w,b
  4345  000F5C  6F80               	movwf	(??_f_write+1)& (0+255),b
  4346  000F5E  6B81               	clrf	(??_f_write+2)& (0+255),b
  4347  000F60  6B82               	clrf	(??_f_write+3)& (0+255),b
  4348  000F62  C0D7  FFD9         	movff	f_write@fp,fsr2l
  4349  000F66  C0D8  FFDA         	movff	f_write@fp+1,fsr2h
  4350  000F6A  EE10 F02A          	lfsr	1,42
  4351  000F6E  50DE               	movf	postinc2,w,c
  4352  000F70  26E1               	addwf	fsr1l,f,c
  4353  000F72  50DD               	movf	postdec2,w,c
  4354  000F74  22E2               	addwfc	fsr1h,f,c
  4355  000F76  CFE6 F183          	movff	postinc1,??_f_write+4
  4356  000F7A  CFE6 F184          	movff	postinc1,??_f_write+5
  4357  000F7E  CFE6 F185          	movff	postinc1,??_f_write+6
  4358  000F82  CFE6 F186          	movff	postinc1,??_f_write+7
  4359  000F86  C195  F187         	movff	f_write@sect,??_f_write+8
  4360  000F8A  C196  F188         	movff	f_write@sect+1,??_f_write+9
  4361  000F8E  C197  F189         	movff	f_write@sect+2,??_f_write+10
  4362  000F92  C198  F18A         	movff	f_write@sect+3,??_f_write+11
  4363  000F96  1F87               	comf	(??_f_write+8)& (0+255),f,b
  4364  000F98  1F88               	comf	(??_f_write+9)& (0+255),f,b
  4365  000F9A  1F89               	comf	(??_f_write+10)& (0+255),f,b
  4366  000F9C  1F8A               	comf	(??_f_write+11)& (0+255),f,b
  4367  000F9E  2B87               	incf	(??_f_write+8)& (0+255),f,b
  4368  000FA0  0E00               	movlw	0
  4369  000FA2  2388               	addwfc	(??_f_write+9)& (0+255),f,b
  4370  000FA4  2389               	addwfc	(??_f_write+10)& (0+255),f,b
  4371  000FA6  238A               	addwfc	(??_f_write+11)& (0+255),f,b
  4372  000FA8  5183               	movf	(??_f_write+4)& (0+255),w,b
  4373  000FAA  2587               	addwf	(??_f_write+8)& (0+255),w,b
  4374  000FAC  6F8B               	movwf	(??_f_write+12)& (0+255),b
  4375  000FAE  5184               	movf	(??_f_write+5)& (0+255),w,b
  4376  000FB0  2188               	addwfc	(??_f_write+9)& (0+255),w,b
  4377  000FB2  6F8C               	movwf	(??_f_write+13)& (0+255),b
  4378  000FB4  5185               	movf	(??_f_write+6)& (0+255),w,b
  4379  000FB6  2189               	addwfc	(??_f_write+10)& (0+255),w,b
  4380  000FB8  6F8D               	movwf	(??_f_write+14)& (0+255),b
  4381  000FBA  5186               	movf	(??_f_write+7)& (0+255),w,b
  4382  000FBC  218A               	addwfc	(??_f_write+11)& (0+255),w,b
  4383  000FBE  6F8E               	movwf	(??_f_write+15)& (0+255),b
  4384  000FC0  517F               	movf	??_f_write& (0+255),w,b
  4385  000FC2  5D8B               	subwf	(??_f_write+12)& (0+255),w,b
  4386  000FC4  5180               	movf	(??_f_write+1)& (0+255),w,b
  4387  000FC6  598C               	subwfb	(??_f_write+13)& (0+255),w,b
  4388  000FC8  5181               	movf	(??_f_write+2)& (0+255),w,b
  4389  000FCA  598D               	subwfb	(??_f_write+14)& (0+255),w,b
  4390  000FCC  5182               	movf	(??_f_write+3)& (0+255),w,b
  4391  000FCE  598E               	subwfb	(??_f_write+15)& (0+255),w,b
  4392  000FD0  B0D8               	btfsc	status,0,c
  4393  000FD2  D046               	goto	l1494
  4394                           
  4395                           ; BSR set to: 1
  4396                           ;ff.c: 2760: mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * ((UINT)512)), ((UI
      +                          NT)512));
  4397  000FD4  C0D7  FFD9         	movff	f_write@fp,fsr2l
  4398  000FD8  C0D8  FFDA         	movff	f_write@fp+1,fsr2h
  4399  000FDC  CFDE F17F          	movff	postinc2,??_f_write
  4400  000FE0  CFDD F180          	movff	postdec2,??_f_write+1
  4401  000FE4  0E2E               	movlw	46
  4402  000FE6  257F               	addwf	??_f_write& (0+255),w,b
  4403  000FE8  6E1A               	movwf	mem_cpy@dst,c
  4404  000FEA  0E00               	movlw	0
  4405  000FEC  2180               	addwfc	(??_f_write+1)& (0+255),w,b
  4406  000FEE  6E1B               	movwf	mem_cpy@dst+1,c
  4407  000FF0  C0D7  FFD9         	movff	f_write@fp,fsr2l
  4408  000FF4  C0D8  FFDA         	movff	f_write@fp+1,fsr2h
  4409  000FF8  EE10 F02A          	lfsr	1,42
  4410  000FFC  50DE               	movf	postinc2,w,c
  4411  000FFE  26E1               	addwf	fsr1l,f,c
  4412  001000  50DD               	movf	postdec2,w,c
  4413  001002  22E2               	addwfc	fsr1h,f,c
  4414  001004  CFE6 F181          	movff	postinc1,??_f_write+2
  4415  001008  CFE5 F182          	movff	postdec1,??_f_write+3
  4416  00100C  C195  F183         	movff	f_write@sect,??_f_write+4
  4417  001010  C196  F184         	movff	f_write@sect+1,??_f_write+5
  4418  001014  1F83               	comf	(??_f_write+4)& (0+255),f,b
  4419  001016  1F84               	comf	(??_f_write+5)& (0+255),f,b
  4420  001018  4B83               	infsnz	(??_f_write+4)& (0+255),f,b
  4421  00101A  2B84               	incf	(??_f_write+5)& (0+255),f,b
  4422  00101C  5181               	movf	(??_f_write+2)& (0+255),w,b
  4423  00101E  2783               	addwf	(??_f_write+4)& (0+255),f,b
  4424  001020  5182               	movf	(??_f_write+3)& (0+255),w,b
  4425  001022  2384               	addwfc	(??_f_write+5)& (0+255),f,b
  4426  001024  0E09               	movlw	9
  4427  001026                     u17895:
  4428  001026  90D8               	bcf	status,0,c
  4429  001028  3783               	rlcf	(??_f_write+4)& (0+255),f,b
  4430  00102A  3784               	rlcf	(??_f_write+5)& (0+255),f,b
  4431  00102C  2EE8               	decfsz	wreg,f,c
  4432  00102E  D7FB               	goto	u17895
  4433  001030  5183               	movf	(??_f_write+4)& (0+255),w,b
  4434  001032  2590               	addwf	f_write@wbuff& (0+255),w,b
  4435  001034  6E1C               	movwf	mem_cpy@src,c
  4436  001036  5184               	movf	(??_f_write+5)& (0+255),w,b
  4437  001038  2191               	addwfc	(f_write@wbuff+1)& (0+255),w,b
  4438  00103A  6E1D               	movwf	mem_cpy@src+1,c
  4439  00103C  0E02               	movlw	2
  4440  00103E  6E1F               	movwf	mem_cpy@cnt+1,c
  4441  001040  0E00               	movlw	0
  4442  001042  6E1E               	movwf	mem_cpy@cnt,c
  4443  001044  ECA0  F025         	call	_mem_cpy	;wreg free
  4444                           
  4445                           ;ff.c: 2761: fp->fs->wflag = 0;
  4446  001048  C0D7  FFD9         	movff	f_write@fp,fsr2l
  4447  00104C  C0D8  FFDA         	movff	f_write@fp+1,fsr2h
  4448  001050  EE10 F004          	lfsr	1,4
  4449  001054  50DE               	movf	postinc2,w,c
  4450  001056  26E1               	addwf	fsr1l,f,c
  4451  001058  50DD               	movf	postdec2,w,c
  4452  00105A  22E2               	addwfc	fsr1h,f,c
  4453  00105C  0E00               	movlw	0
  4454  00105E  6EE7               	movwf	indf1,c
  4455  001060                     l1494:
  4456                           
  4457                           ;ff.c: 2762: }
  4458                           ;ff.c: 2770: wcnt = ((UINT)512) * cc;
  4459  001060  C193  F17F         	movff	f_write@cc,??_f_write
  4460  001064  C194  F180         	movff	f_write@cc+1,??_f_write+1
  4461  001068  0E09               	movlw	9
  4462  00106A                     u17905:
  4463  00106A  90D8               	bcf	status,0,c
  4464  00106C  0101               	movlb	1	; () banked
  4465  00106E  377F               	rlcf	??_f_write& (0+255),f,b
  4466  001070  3780               	rlcf	(??_f_write+1)& (0+255),f,b
  4467  001072  2EE8               	decfsz	wreg,f,c
  4468  001074  D7FA               	goto	u17905
  4469  001076  C17F  F19D         	movff	??_f_write,f_write@wcnt
  4470  00107A  C180  F19E         	movff	??_f_write+1,f_write@wcnt+1
  4471                           
  4472                           ;ff.c: 2771: continue;
  4473  00107E  D0DD               	goto	l1495
  4474  001080                     l1491:
  4475                           
  4476                           ; BSR set to: 1
  4477                           ;ff.c: 2772: }
  4478                           ;ff.c: 2774: if (fp->fptr >= fp->fsize) {
  4479                           
  4480                           ; BSR set to: 1
  4481  001080  0100               	movlb	0	; () banked
  4482  001082  EE20 F00A          	lfsr	2,10
  4483  001086  51D7               	movf	f_write@fp& (0+255),w,b
  4484  001088  26D9               	addwf	fsr2l,f,c
  4485  00108A  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4486  00108C  22DA               	addwfc	fsr2h,f,c
  4487  00108E  EE10 F006          	lfsr	1,6
  4488  001092  51D7               	movf	f_write@fp& (0+255),w,b
  4489  001094  26E1               	addwf	fsr1l,f,c
  4490  001096  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4491  001098  22E2               	addwfc	fsr1h,f,c
  4492  00109A  50DE               	movf	postinc2,w,c
  4493  00109C  5CE6               	subwf	postinc1,w,c
  4494  00109E  50DE               	movf	postinc2,w,c
  4495  0010A0  58E6               	subwfb	postinc1,w,c
  4496  0010A2  50DE               	movf	postinc2,w,c
  4497  0010A4  58E6               	subwfb	postinc1,w,c
  4498  0010A6  50DE               	movf	postinc2,w,c
  4499  0010A8  58E6               	subwfb	postinc1,w,c
  4500  0010AA  A0D8               	btfss	status,0,c
  4501  0010AC  D029               	goto	l1496
  4502                           
  4503                           ; BSR set to: 0
  4504                           ;ff.c: 2775: if (sync_window(fp->fs)) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ER
      +                          R; };
  4505  0010AE  C0D7  FFD9         	movff	f_write@fp,fsr2l
  4506  0010B2  C0D8  FFDA         	movff	f_write@fp+1,fsr2h
  4507  0010B6  CFDE F085          	movff	postinc2,sync_window@fs
  4508  0010BA  CFDD F086          	movff	postdec2,sync_window@fs+1
  4509  0010BE  EC4E  F01D         	call	_sync_window	;wreg free
  4510  0010C2  0900               	iorlw	0
  4511  0010C4  B4D8               	btfsc	status,2,c
  4512  0010C6  D00A               	goto	l1497
  4513  0010C8  0100               	movlb	0	; () banked
  4514  0010CA  EE20 F005          	lfsr	2,5
  4515  0010CE  51D7               	movf	f_write@fp& (0+255),w,b
  4516  0010D0  26D9               	addwf	fsr2l,f,c
  4517  0010D2  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4518  0010D4  22DA               	addwfc	fsr2h,f,c
  4519  0010D6  0E01               	movlw	1
  4520  0010D8  6EDF               	movwf	indf2,c
  4521                           
  4522                           ; BSR set to: 0
  4523                           ;	Return value of _f_write is never used
  4524  0010DA  0012               	return	
  4525  0010DC                     l1497:
  4526                           
  4527                           ;ff.c: 2776: fp->fs->winsect = sect;
  4528                           
  4529                           ; BSR set to: 0
  4530  0010DC  C0D7  FFD9         	movff	f_write@fp,fsr2l
  4531  0010E0  C0D8  FFDA         	movff	f_write@fp+1,fsr2h
  4532  0010E4  EE10 F02A          	lfsr	1,42
  4533  0010E8  50DE               	movf	postinc2,w,c
  4534  0010EA  26E1               	addwf	fsr1l,f,c
  4535  0010EC  50DD               	movf	postdec2,w,c
  4536  0010EE  22E2               	addwfc	fsr1h,f,c
  4537  0010F0  C195  FFE6         	movff	f_write@sect,postinc1
  4538  0010F4  C196  FFE6         	movff	f_write@sect+1,postinc1
  4539  0010F8  C197  FFE6         	movff	f_write@sect+2,postinc1
  4540  0010FC  C198  FFE6         	movff	f_write@sect+3,postinc1
  4541  001100                     l1496:
  4542                           
  4543                           ;ff.c: 2777: }
  4544                           ;ff.c: 2785: fp->dsect = sect;
  4545  001100  0100               	movlb	0	; () banked
  4546  001102  EE20 F016          	lfsr	2,22
  4547  001106  51D7               	movf	f_write@fp& (0+255),w,b
  4548  001108  26D9               	addwf	fsr2l,f,c
  4549  00110A  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4550  00110C  22DA               	addwfc	fsr2h,f,c
  4551  00110E  C195  FFDE         	movff	f_write@sect,postinc2
  4552  001112  C196  FFDE         	movff	f_write@sect+1,postinc2
  4553  001116  C197  FFDE         	movff	f_write@sect+2,postinc2
  4554  00111A  C198  FFDE         	movff	f_write@sect+3,postinc2
  4555  00111E                     l1479:
  4556                           
  4557                           ;ff.c: 2786: }
  4558                           ;ff.c: 2787: wcnt = ((UINT)512) - ((UINT)fp->fptr % ((UINT)512));
  4559                           
  4560                           ; BSR set to: 0
  4561  00111E  0EFF               	movlw	255
  4562  001120  0101               	movlb	1	; () banked
  4563  001122  6F7F               	movwf	??_f_write& (0+255),b
  4564  001124  0E01               	movlw	1
  4565  001126  6F80               	movwf	(??_f_write+1)& (0+255),b
  4566  001128  0100               	movlb	0	; () banked
  4567  00112A  EE20 F006          	lfsr	2,6
  4568  00112E  51D7               	movf	f_write@fp& (0+255),w,b
  4569  001130  26D9               	addwf	fsr2l,f,c
  4570  001132  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4571  001134  22DA               	addwfc	fsr2h,f,c
  4572  001136  CFDE F181          	movff	postinc2,??_f_write+2
  4573  00113A  CFDD F182          	movff	postdec2,??_f_write+3
  4574  00113E  0101               	movlb	1	; () banked
  4575  001140  517F               	movf	??_f_write& (0+255),w,b
  4576  001142  1781               	andwf	(??_f_write+2)& (0+255),f,b
  4577  001144  5180               	movf	(??_f_write+1)& (0+255),w,b
  4578  001146  1782               	andwf	(??_f_write+3)& (0+255),f,b
  4579  001148  1F81               	comf	(??_f_write+2)& (0+255),f,b
  4580  00114A  1F82               	comf	(??_f_write+3)& (0+255),f,b
  4581  00114C  4B81               	infsnz	(??_f_write+2)& (0+255),f,b
  4582  00114E  2B82               	incf	(??_f_write+3)& (0+255),f,b
  4583  001150  0E00               	movlw	0
  4584  001152  2581               	addwf	(??_f_write+2)& (0+255),w,b
  4585  001154  6F9D               	movwf	f_write@wcnt& (0+255),b
  4586  001156  0E02               	movlw	2
  4587  001158  2182               	addwfc	(??_f_write+3)& (0+255),w,b
  4588  00115A  6F9E               	movwf	(f_write@wcnt+1)& (0+255),b
  4589                           
  4590                           ; BSR set to: 1
  4591                           ;ff.c: 2788: if (wcnt > btw) wcnt = btw;
  4592  00115C  519D               	movf	f_write@wcnt& (0+255),w,b
  4593  00115E  0100               	movlb	0	; () banked
  4594  001160  5DDB               	subwf	f_write@btw& (0+255),w,b
  4595  001162  0101               	movlb	1	; () banked
  4596  001164  519E               	movf	(f_write@wcnt+1)& (0+255),w,b
  4597  001166  0100               	movlb	0	; () banked
  4598  001168  59DC               	subwfb	(f_write@btw+1)& (0+255),w,b
  4599  00116A  B0D8               	btfsc	status,0,c
  4600  00116C  D004               	goto	l1498
  4601                           
  4602                           ; BSR set to: 0
  4603  00116E  C0DB  F19D         	movff	f_write@btw,f_write@wcnt
  4604  001172  C0DC  F19E         	movff	f_write@btw+1,f_write@wcnt+1
  4605  001176                     l1498:
  4606                           
  4607                           ; BSR set to: 0
  4608                           ;ff.c: 2790: if (move_window(fp->fs, fp->dsect) != FR_OK)
  4609                           
  4610                           ; BSR set to: 0
  4611  001176  C0D7  FFD9         	movff	f_write@fp,fsr2l
  4612  00117A  C0D8  FFDA         	movff	f_write@fp+1,fsr2h
  4613  00117E  CFDE F09A          	movff	postinc2,move_window@fs
  4614  001182  CFDD F09B          	movff	postdec2,move_window@fs+1
  4615  001186  EE20 F016          	lfsr	2,22
  4616  00118A  51D7               	movf	f_write@fp& (0+255),w,b
  4617  00118C  26D9               	addwf	fsr2l,f,c
  4618  00118E  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4619  001190  22DA               	addwfc	fsr2h,f,c
  4620  001192  CFDE F09C          	movff	postinc2,move_window@sector
  4621  001196  CFDE F09D          	movff	postinc2,move_window@sector+1
  4622  00119A  CFDE F09E          	movff	postinc2,move_window@sector+2
  4623  00119E  CFDE F09F          	movff	postinc2,move_window@sector+3
  4624  0011A2  EC0A  F027         	call	_move_window	;wreg free
  4625  0011A6  0900               	iorlw	0
  4626  0011A8  B4D8               	btfsc	status,2,c
  4627  0011AA  D00A               	goto	l1499
  4628                           
  4629                           ;ff.c: 2791: { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  4630  0011AC  0100               	movlb	0	; () banked
  4631  0011AE  EE20 F005          	lfsr	2,5
  4632  0011B2  51D7               	movf	f_write@fp& (0+255),w,b
  4633  0011B4  26D9               	addwf	fsr2l,f,c
  4634  0011B6  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4635  0011B8  22DA               	addwfc	fsr2h,f,c
  4636  0011BA  0E01               	movlw	1
  4637  0011BC  6EDF               	movwf	indf2,c
  4638                           
  4639                           ; BSR set to: 0
  4640                           ;	Return value of _f_write is never used
  4641  0011BE  0012               	return	
  4642  0011C0                     l1499:
  4643                           
  4644                           ;ff.c: 2792: mem_cpy(&fp->fs->win[fp->fptr % ((UINT)512)], wbuff, wcnt);
  4645                           
  4646                           ; BSR set to: 0
  4647  0011C0  0EFF               	movlw	255
  4648  0011C2  0101               	movlb	1	; () banked
  4649  0011C4  6F7F               	movwf	??_f_write& (0+255),b
  4650  0011C6  0E01               	movlw	1
  4651  0011C8  6F80               	movwf	(??_f_write+1)& (0+255),b
  4652  0011CA  0100               	movlb	0	; () banked
  4653  0011CC  EE20 F006          	lfsr	2,6
  4654  0011D0  51D7               	movf	f_write@fp& (0+255),w,b
  4655  0011D2  26D9               	addwf	fsr2l,f,c
  4656  0011D4  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4657  0011D6  22DA               	addwfc	fsr2h,f,c
  4658  0011D8  CFDE F181          	movff	postinc2,??_f_write+2
  4659  0011DC  CFDD F182          	movff	postdec2,??_f_write+3
  4660  0011E0  0101               	movlb	1	; () banked
  4661  0011E2  517F               	movf	??_f_write& (0+255),w,b
  4662  0011E4  1781               	andwf	(??_f_write+2)& (0+255),f,b
  4663  0011E6  5180               	movf	(??_f_write+1)& (0+255),w,b
  4664  0011E8  1782               	andwf	(??_f_write+3)& (0+255),f,b
  4665  0011EA  0E2E               	movlw	46
  4666  0011EC  2781               	addwf	(??_f_write+2)& (0+255),f,b
  4667  0011EE  0E00               	movlw	0
  4668  0011F0  2382               	addwfc	(??_f_write+3)& (0+255),f,b
  4669  0011F2  C0D7  FFD9         	movff	f_write@fp,fsr2l
  4670  0011F6  C0D8  FFDA         	movff	f_write@fp+1,fsr2h
  4671  0011FA  CFDE F183          	movff	postinc2,??_f_write+4
  4672  0011FE  CFDD F184          	movff	postdec2,??_f_write+5
  4673  001202  5181               	movf	(??_f_write+2)& (0+255),w,b
  4674  001204  2583               	addwf	(??_f_write+4)& (0+255),w,b
  4675  001206  6E1A               	movwf	mem_cpy@dst,c
  4676  001208  5182               	movf	(??_f_write+3)& (0+255),w,b
  4677  00120A  2184               	addwfc	(??_f_write+5)& (0+255),w,b
  4678  00120C  6E1B               	movwf	mem_cpy@dst+1,c
  4679  00120E  C190  F01C         	movff	f_write@wbuff,mem_cpy@src
  4680  001212  C191  F01D         	movff	f_write@wbuff+1,mem_cpy@src+1
  4681  001216  C19D  F01E         	movff	f_write@wcnt,mem_cpy@cnt
  4682  00121A  C19E  F01F         	movff	f_write@wcnt+1,mem_cpy@cnt+1
  4683  00121E  ECA0  F025         	call	_mem_cpy	;wreg free
  4684                           
  4685                           ;ff.c: 2793: fp->fs->wflag = 1;
  4686  001222  C0D7  FFD9         	movff	f_write@fp,fsr2l
  4687  001226  C0D8  FFDA         	movff	f_write@fp+1,fsr2h
  4688  00122A  EE10 F004          	lfsr	1,4
  4689  00122E  50DE               	movf	postinc2,w,c
  4690  001230  26E1               	addwf	fsr1l,f,c
  4691  001232  50DD               	movf	postdec2,w,c
  4692  001234  22E2               	addwfc	fsr1h,f,c
  4693  001236  0E01               	movlw	1
  4694  001238  6EE7               	movwf	indf1,c
  4695  00123A                     l1495:
  4696  00123A  0101               	movlb	1	; () banked
  4697  00123C  519D               	movf	f_write@wcnt& (0+255),w,b
  4698  00123E  2790               	addwf	f_write@wbuff& (0+255),f,b
  4699  001240  519E               	movf	(f_write@wcnt+1)& (0+255),w,b
  4700  001242  2391               	addwfc	(f_write@wbuff+1)& (0+255),f,b
  4701                           
  4702                           ; BSR set to: 1
  4703  001244  0100               	movlb	0	; () banked
  4704  001246  EE20 F006          	lfsr	2,6
  4705  00124A  51D7               	movf	f_write@fp& (0+255),w,b
  4706  00124C  26D9               	addwf	fsr2l,f,c
  4707  00124E  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4708  001250  22DA               	addwfc	fsr2h,f,c
  4709  001252  0101               	movlb	1	; () banked
  4710  001254  519D               	movf	f_write@wcnt& (0+255),w,b
  4711  001256  26DE               	addwf	postinc2,f,c
  4712  001258  519E               	movf	(f_write@wcnt+1)& (0+255),w,b
  4713  00125A  22DE               	addwfc	postinc2,f,c
  4714  00125C  0E00               	movlw	0
  4715  00125E  22DE               	addwfc	postinc2,f,c
  4716  001260  22DE               	addwfc	postinc2,f,c
  4717                           
  4718                           ; BSR set to: 1
  4719  001262  C0DD  FFD9         	movff	f_write@bw,fsr2l
  4720  001266  C0DE  FFDA         	movff	f_write@bw+1,fsr2h
  4721  00126A  519D               	movf	f_write@wcnt& (0+255),w,b
  4722  00126C  26DE               	addwf	postinc2,f,c
  4723  00126E  519E               	movf	(f_write@wcnt+1)& (0+255),w,b
  4724  001270  22DD               	addwfc	postdec2,f,c
  4725                           
  4726                           ; BSR set to: 1
  4727  001272  519D               	movf	f_write@wcnt& (0+255),w,b
  4728  001274  0100               	movlb	0	; () banked
  4729  001276  5FDB               	subwf	f_write@btw& (0+255),f,b
  4730  001278  0101               	movlb	1	; () banked
  4731  00127A  519E               	movf	(f_write@wcnt+1)& (0+255),w,b
  4732  00127C  0100               	movlb	0	; () banked
  4733  00127E  5BDC               	subwfb	(f_write@btw+1)& (0+255),f,b
  4734  001280                     l1477:
  4735                           
  4736                           ; BSR set to: 0
  4737  001280  0100               	movlb	0	; () banked
  4738  001282  51DB               	movf	f_write@btw& (0+255),w,b
  4739  001284  11DC               	iorwf	(f_write@btw+1)& (0+255),w,b
  4740  001286  A4D8               	btfss	status,2,c
  4741  001288  D499               	goto	l1478
  4742  00128A                     u17950:
  4743                           
  4744                           ;ff.c: 2798: }
  4745                           ;ff.c: 2800: if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
  4746                           
  4747                           ; BSR set to: 0
  4748  00128A  0100               	movlb	0	; () banked
  4749  00128C  EE20 F006          	lfsr	2,6
  4750  001290  51D7               	movf	f_write@fp& (0+255),w,b
  4751  001292  26D9               	addwf	fsr2l,f,c
  4752  001294  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4753  001296  22DA               	addwfc	fsr2h,f,c
  4754  001298  EE10 F00A          	lfsr	1,10
  4755  00129C  51D7               	movf	f_write@fp& (0+255),w,b
  4756  00129E  26E1               	addwf	fsr1l,f,c
  4757  0012A0  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4758  0012A2  22E2               	addwfc	fsr1h,f,c
  4759  0012A4  50DE               	movf	postinc2,w,c
  4760  0012A6  5CE6               	subwf	postinc1,w,c
  4761  0012A8  50DE               	movf	postinc2,w,c
  4762  0012AA  58E6               	subwfb	postinc1,w,c
  4763  0012AC  50DE               	movf	postinc2,w,c
  4764  0012AE  58E6               	subwfb	postinc1,w,c
  4765  0012B0  50DE               	movf	postinc2,w,c
  4766  0012B2  58E6               	subwfb	postinc1,w,c
  4767  0012B4  B0D8               	btfsc	status,0,c
  4768  0012B6  D014               	goto	l1500
  4769                           
  4770                           ; BSR set to: 0
  4771  0012B8  EE20 F006          	lfsr	2,6
  4772  0012BC  51D7               	movf	f_write@fp& (0+255),w,b
  4773  0012BE  26D9               	addwf	fsr2l,f,c
  4774  0012C0  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4775  0012C2  22DA               	addwfc	fsr2h,f,c
  4776  0012C4  EE10 F00A          	lfsr	1,10
  4777  0012C8  51D7               	movf	f_write@fp& (0+255),w,b
  4778  0012CA  26E1               	addwf	fsr1l,f,c
  4779  0012CC  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4780  0012CE  22E2               	addwfc	fsr1h,f,c
  4781  0012D0  CFDE FFE6          	movff	postinc2,postinc1
  4782  0012D4  CFDE FFE6          	movff	postinc2,postinc1
  4783  0012D8  CFDE FFE6          	movff	postinc2,postinc1
  4784  0012DC  CFDE FFE6          	movff	postinc2,postinc1
  4785  0012E0                     l1500:
  4786                           
  4787                           ; BSR set to: 0
  4788                           ;ff.c: 2801: fp->flag |= 0x20;
  4789                           
  4790                           ; BSR set to: 0
  4791  0012E0  EE20 F004          	lfsr	2,4
  4792  0012E4  51D7               	movf	f_write@fp& (0+255),w,b
  4793  0012E6  26D9               	addwf	fsr2l,f,c
  4794  0012E8  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4795  0012EA  22DA               	addwfc	fsr2h,f,c
  4796  0012EC  0E00               	movlw	0
  4797  0012EE  8ADB               	bsf	plusw2,5,c
  4798  0012F0  0012               	return	
  4799  0012F2                     __end_of_f_write:
  4800                           	opt stack 0
  4801                           tosu	equ	0xFFF
  4802                           tosh	equ	0xFFE
  4803                           tosl	equ	0xFFD
  4804                           pclath	equ	0xFFA
  4805                           tblptru	equ	0xFF8
  4806                           tblptrh	equ	0xFF7
  4807                           tblptrl	equ	0xFF6
  4808                           tablat	equ	0xFF5
  4809                           prodh	equ	0xFF4
  4810                           prodl	equ	0xFF3
  4811                           intcon	equ	0xFF2
  4812                           intcon2	equ	0xFF1
  4813                           intcon3	equ	0xFF0
  4814                           postinc0	equ	0xFEE
  4815                           fsr0h	equ	0xFEA
  4816                           fsr0l	equ	0xFE9
  4817                           wreg	equ	0xFE8
  4818                           indf1	equ	0xFE7
  4819                           postinc1	equ	0xFE6
  4820                           postdec1	equ	0xFE5
  4821                           fsr1h	equ	0xFE2
  4822                           fsr1l	equ	0xFE1
  4823                           indf2	equ	0xFDF
  4824                           postinc2	equ	0xFDE
  4825                           postdec2	equ	0xFDD
  4826                           plusw2	equ	0xFDB
  4827                           fsr2h	equ	0xFDA
  4828                           fsr2l	equ	0xFD9
  4829                           status	equ	0xFD8
  4830                           
  4831 ;; *************** function _f_open *****************
  4832 ;; Defined at:
  4833 ;;		line 2449 in file "bibliotecas/ff.c"
  4834 ;; Parameters:    Size  Location     Type
  4835 ;;  fp              2   58[BANK1 ] PTR struct .
  4836 ;;		 -> SDCard@fil(32), 
  4837 ;;  path            2   60[BANK1 ] PTR const unsigned char 
  4838 ;;		 -> STR_11(10), STR_9(1), 
  4839 ;;  mode            1   62[BANK1 ] unsigned char 
  4840 ;; Auto vars:     Size  Location     Type
  4841 ;;  dj             22   23[BANK3 ] struct .
  4842 ;;  sfn            12    0[BANK3 ] unsigned char [12]
  4843 ;;  dw              4   16[BANK3 ] unsigned long 
  4844 ;;  cl              4   12[BANK3 ] unsigned long 
  4845 ;;  dir             2   21[BANK3 ] PTR unsigned char 
  4846 ;;		 -> NULL(0), fs(558), 
  4847 ;;  res             1   20[BANK3 ] enum E75
  4848 ;; Return value:  Size  Location     Type
  4849 ;;                  1    wreg      enum E3916
  4850 ;; Registers used:
  4851 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4852 ;; Tracked objects:
  4853 ;;		On entry : 0/0
  4854 ;;		On exit  : 0/0
  4855 ;;		Unchanged: 0/0
  4856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4857 ;;      Params:         0       0       5       0       0       0       0       0       0
  4858 ;;      Locals:         0       0       0       0      45       0       0       0       0
  4859 ;;      Temps:          0       0       4       0       0       0       0       0       0
  4860 ;;      Totals:         0       0       9       0      45       0       0       0       0
  4861 ;;Total ram usage:       54 bytes
  4862 ;; Hardware stack levels used:    1
  4863 ;; Hardware stack levels required when called:   16
  4864 ;; This function calls:
  4865 ;;		_dir_register
  4866 ;;		_find_volume
  4867 ;;		_follow_path
  4868 ;;		_ld_clust
  4869 ;;		_move_window
  4870 ;;		_remove_chain
  4871 ;;		_st_clust
  4872 ;; This function is called by:
  4873 ;;		_SDCard
  4874 ;; This function uses a non-reentrant model
  4875 ;;
  4876                           
  4877                           	psect	text16
  4878  00267A                     __ptext16:
  4879                           	opt stack 0
  4880  00267A                     _f_open:
  4881                           	opt stack 12
  4882                           
  4883                           ;ff.c: 2455: FRESULT res;
  4884                           ;ff.c: 2456: DIR_E dj;
  4885                           ;ff.c: 2457: BYTE *dir;
  4886                           ;ff.c: 2458: BYTE sfn[12];
  4887                           ;ff.c: 2460: DWORD dw, cl;
  4888                           ;ff.c: 2464: if (!fp) return FR_INVALID_OBJECT;
  4889                           
  4890                           ;incstack = 0
  4891  00267A  0101               	movlb	1	; () banked
  4892  00267C  51B9               	movf	f_open@fp& (0+255),w,b
  4893  00267E  11BA               	iorwf	(f_open@fp+1)& (0+255),w,b
  4894  002680  A4D8               	btfss	status,2,c
  4895  002682  D002               	goto	l1423
  4896                           
  4897                           ; BSR set to: 1
  4898  002684  0E09               	movlw	9
  4899                           
  4900                           ; BSR set to: 1
  4901  002686  0012               	return	
  4902  002688                     l1423:
  4903                           
  4904                           ; BSR set to: 1
  4905                           ;ff.c: 2465: fp->fs = 0;
  4906                           
  4907                           ; BSR set to: 1
  4908  002688  C1B9  FFD9         	movff	f_open@fp,fsr2l
  4909  00268C  C1BA  FFDA         	movff	f_open@fp+1,fsr2h
  4910  002690  0E00               	movlw	0
  4911  002692  6EDE               	movwf	postinc2,c
  4912  002694  0E00               	movlw	0
  4913  002696  6EDD               	movwf	postdec2,c
  4914                           
  4915                           ; BSR set to: 1
  4916                           ;ff.c: 2468: dj.fs = FatFs[0];
  4917  002698  C0F8  F317         	movff	_FatFs,f_open@dj
  4918  00269C  C0F9  F318         	movff	_FatFs+1,f_open@dj+1
  4919                           
  4920                           ; BSR set to: 1
  4921                           ;ff.c: 2473: mode &= 0x01 | 0x02 | 0x08 | 0x10 | 0x04;
  4922  0026A0  0E1F               	movlw	31
  4923  0026A2  17BD               	andwf	f_open@mode& (0+255),f,b
  4924                           
  4925                           ; BSR set to: 1
  4926                           ;ff.c: 2474: res = find_volume(&dj.fs, &path, (BYTE)(mode & ~0x01));
  4927  0026A4  0E17               	movlw	low f_open@dj
  4928  0026A6  0100               	movlb	0	; () banked
  4929  0026A8  6FAF               	movwf	find_volume@rfs& (0+255),b
  4930  0026AA  0E03               	movlw	high f_open@dj
  4931  0026AC  6FB0               	movwf	(find_volume@rfs+1)& (0+255),b
  4932  0026AE  0EBB               	movlw	low f_open@path
  4933  0026B0  6FB1               	movwf	find_volume@path& (0+255),b
  4934  0026B2  0E01               	movlw	high f_open@path
  4935  0026B4  6FB2               	movwf	(find_volume@path+1)& (0+255),b
  4936  0026B6  0101               	movlb	1	; () banked
  4937  0026B8  51BD               	movf	f_open@mode& (0+255),w,b
  4938  0026BA  0BFE               	andlw	254
  4939  0026BC  0100               	movlb	0	; () banked
  4940  0026BE  6FB3               	movwf	find_volume@wmode& (0+255),b
  4941  0026C0  EC09  F000         	call	_find_volume	;wreg free
  4942  0026C4  0103               	movlb	3	; () banked
  4943  0026C6  6F14               	movwf	f_open@res& (0+255),b
  4944                           
  4945                           ; BSR set to: 3
  4946                           ;ff.c: 2479: if (res == FR_OK) {
  4947  0026C8  5114               	movf	f_open@res& (0+255),w,b
  4948  0026CA  A4D8               	btfss	status,2,c
  4949  0026CC  D1C9               	goto	l1445
  4950                           
  4951                           ; BSR set to: 3
  4952                           ;ff.c: 2480: (dj).fn = sfn;
  4953  0026CE  0E00               	movlw	low f_open@sfn
  4954  0026D0  6F2B               	movwf	(f_open@dj+20)& (0+255),b
  4955  0026D2  0E03               	movlw	high f_open@sfn
  4956  0026D4  6F2C               	movwf	(f_open@dj+21)& (0+255),b
  4957                           
  4958                           ; BSR set to: 3
  4959                           ;ff.c: 2481: res = follow_path(&dj, path);
  4960  0026D6  0E17               	movlw	low f_open@dj
  4961  0026D8  0101               	movlb	1	; () banked
  4962  0026DA  6F83               	movwf	follow_path@dp& (0+255),b
  4963  0026DC  0E03               	movlw	high f_open@dj
  4964  0026DE  6F84               	movwf	(follow_path@dp+1)& (0+255),b
  4965  0026E0  C1BB  F185         	movff	f_open@path,follow_path@path
  4966  0026E4  C1BC  F186         	movff	f_open@path+1,follow_path@path+1
  4967  0026E8  EC63  F01F         	call	_follow_path	;wreg free
  4968  0026EC  0103               	movlb	3	; () banked
  4969  0026EE  6F14               	movwf	f_open@res& (0+255),b
  4970                           
  4971                           ; BSR set to: 3
  4972                           ;ff.c: 2482: dir = dj.dir;
  4973  0026F0  C329  F315         	movff	f_open@dj+18,f_open@dir
  4974  0026F4  C32A  F316         	movff	f_open@dj+19,f_open@dir+1
  4975                           
  4976                           ; BSR set to: 3
  4977                           ;ff.c: 2484: if (res == FR_OK) {
  4978  0026F8  5114               	movf	f_open@res& (0+255),w,b
  4979  0026FA  A4D8               	btfss	status,2,c
  4980  0026FC  D006               	goto	l1427
  4981                           
  4982                           ; BSR set to: 3
  4983                           ;ff.c: 2485: if (!dir)
  4984  0026FE  5115               	movf	f_open@dir& (0+255),w,b
  4985  002700  1116               	iorwf	(f_open@dir+1)& (0+255),w,b
  4986  002702  A4D8               	btfss	status,2,c
  4987  002704  D002               	goto	l1427
  4988                           
  4989                           ; BSR set to: 3
  4990                           ;ff.c: 2486: res = FR_INVALID_NAME;
  4991  002706  0E06               	movlw	6
  4992  002708  6F14               	movwf	f_open@res& (0+255),b
  4993  00270A                     l1427:
  4994                           
  4995                           ; BSR set to: 3
  4996                           ;ff.c: 2491: }
  4997                           ;ff.c: 2493: if (mode & (0x08 | 0x10 | 0x04)) {
  4998                           
  4999                           ; BSR set to: 3
  5000                           
  5001                           ; BSR set to: 3
  5002  00270A  C1BD  F1BE         	movff	f_open@mode,??_f_open
  5003  00270E  0E1C               	movlw	28
  5004  002710  0101               	movlb	1	; () banked
  5005  002712  17BE               	andwf	??_f_open& (0+255),f,b
  5006  002714  B4D8               	btfsc	status,2,c
  5007  002716  D0ED               	goto	l1428
  5008                           
  5009                           ; BSR set to: 1
  5010                           ;ff.c: 2494: if (res != FR_OK) {
  5011  002718  0103               	movlb	3	; () banked
  5012  00271A  5114               	movf	f_open@res& (0+255),w,b
  5013  00271C  B4D8               	btfsc	status,2,c
  5014  00271E  D014               	goto	l1429
  5015                           
  5016                           ; BSR set to: 3
  5017                           ;ff.c: 2495: if (res == FR_NO_FILE)
  5018  002720  0E04               	movlw	4
  5019  002722  1914               	xorwf	f_open@res& (0+255),w,b
  5020  002724  A4D8               	btfss	status,2,c
  5021  002726  D009               	goto	l1430
  5022                           
  5023                           ; BSR set to: 3
  5024                           ;ff.c: 2499: res = dir_register(&dj);
  5025  002728  0E17               	movlw	low f_open@dj
  5026  00272A  0101               	movlb	1	; () banked
  5027  00272C  6F85               	movwf	dir_register@dp& (0+255),b
  5028  00272E  0E03               	movlw	high f_open@dj
  5029  002730  6F86               	movwf	(dir_register@dp+1)& (0+255),b
  5030  002732  ECD6  F024         	call	_dir_register	;wreg free
  5031  002736  0103               	movlb	3	; () banked
  5032  002738  6F14               	movwf	f_open@res& (0+255),b
  5033  00273A                     l1430:
  5034                           
  5035                           ; BSR set to: 3
  5036                           ;ff.c: 2501: mode |= 0x08;
  5037                           
  5038                           ; BSR set to: 3
  5039  00273A  0101               	movlb	1	; () banked
  5040  00273C  87BD               	bsf	f_open@mode& (0+255),3,b
  5041                           
  5042                           ; BSR set to: 1
  5043                           ;ff.c: 2502: dir = dj.dir;
  5044  00273E  C329  F315         	movff	f_open@dj+18,f_open@dir
  5045  002742  C32A  F316         	movff	f_open@dj+19,f_open@dir+1
  5046                           
  5047                           ;ff.c: 2503: }
  5048  002746  D015               	goto	l1434
  5049  002748                     l1429:
  5050                           
  5051                           ;ff.c: 2504: else {
  5052                           ;ff.c: 2505: if (dir[11] & (0x01 | 0x10)) {
  5053                           
  5054                           ; BSR set to: 1
  5055  002748  0103               	movlb	3	; () banked
  5056  00274A  EE20 F00B          	lfsr	2,11
  5057  00274E  5115               	movf	f_open@dir& (0+255),w,b
  5058  002750  26D9               	addwf	fsr2l,f,c
  5059  002752  5116               	movf	(f_open@dir+1)& (0+255),w,b
  5060  002754  22DA               	addwfc	fsr2h,f,c
  5061  002756  50DF               	movf	indf2,w,c
  5062  002758  0101               	movlb	1	; () banked
  5063  00275A  6FBE               	movwf	??_f_open& (0+255),b
  5064  00275C  0E11               	movlw	17
  5065  00275E  17BE               	andwf	??_f_open& (0+255),f,b
  5066  002760  B4D8               	btfsc	status,2,c
  5067  002762  D002               	goto	l1432
  5068                           
  5069                           ; BSR set to: 1
  5070                           ;ff.c: 2506: res = FR_DENIED;
  5071  002764  0E07               	movlw	7
  5072  002766  D003               	goto	L2
  5073  002768                     l1432:
  5074                           
  5075                           ; BSR set to: 1
  5076                           ;ff.c: 2508: if (mode & 0x04)
  5077  002768  A5BD               	btfss	f_open@mode& (0+255),2,b
  5078  00276A  D003               	goto	l1434
  5079                           
  5080                           ; BSR set to: 1
  5081                           ;ff.c: 2509: res = FR_EXIST;
  5082  00276C  0E08               	movlw	8
  5083  00276E                     L2:
  5084  00276E  0103               	movlb	3	; () banked
  5085  002770  6F14               	movwf	f_open@res& (0+255),b
  5086  002772                     l1434:
  5087                           
  5088                           ;ff.c: 2510: }
  5089                           ;ff.c: 2511: }
  5090                           ;ff.c: 2512: if (res == FR_OK && (mode & 0x08)) {
  5091                           
  5092                           ; BSR set to: 3
  5093                           
  5094                           ; BSR set to: 3
  5095  002772  0103               	movlb	3	; () banked
  5096  002774  5114               	movf	f_open@res& (0+255),w,b
  5097  002776  A4D8               	btfss	status,2,c
  5098  002778  D0D8               	goto	l1442
  5099                           
  5100                           ; BSR set to: 3
  5101  00277A  0101               	movlb	1	; () banked
  5102  00277C  A7BD               	btfss	f_open@mode& (0+255),3,b
  5103  00277E  D0D5               	goto	l1442
  5104                           
  5105                           ; BSR set to: 1
  5106                           ;ff.c: 2513: dw = ((DWORD)(2015 - 1980) << 25 | (DWORD)1 << 21 | (DWORD)1 << 16);
  5107  002780  0E00               	movlw	0
  5108  002782  0103               	movlb	3	; () banked
  5109  002784  6F10               	movwf	f_open@dw& (0+255),b
  5110  002786  0E00               	movlw	0
  5111  002788  6F11               	movwf	(f_open@dw+1)& (0+255),b
  5112  00278A  0E21               	movlw	33
  5113  00278C  6F12               	movwf	(f_open@dw+2)& (0+255),b
  5114  00278E  0E46               	movlw	70
  5115  002790  6F13               	movwf	(f_open@dw+3)& (0+255),b
  5116                           
  5117                           ; BSR set to: 3
  5118                           ;ff.c: 2514: *(DWORD*)(BYTE*)(dir + 14)=(DWORD)(dw);
  5119  002792  EE20 F00E          	lfsr	2,14
  5120  002796  5115               	movf	f_open@dir& (0+255),w,b
  5121  002798  26D9               	addwf	fsr2l,f,c
  5122  00279A  5116               	movf	(f_open@dir+1)& (0+255),w,b
  5123  00279C  22DA               	addwfc	fsr2h,f,c
  5124  00279E  C310  FFDE         	movff	f_open@dw,postinc2
  5125  0027A2  C311  FFDE         	movff	f_open@dw+1,postinc2
  5126  0027A6  C312  FFDE         	movff	f_open@dw+2,postinc2
  5127  0027AA  C313  FFDE         	movff	f_open@dw+3,postinc2
  5128                           
  5129                           ; BSR set to: 3
  5130                           ;ff.c: 2515: *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(dw);
  5131  0027AE  EE20 F016          	lfsr	2,22
  5132  0027B2  5115               	movf	f_open@dir& (0+255),w,b
  5133  0027B4  26D9               	addwf	fsr2l,f,c
  5134  0027B6  5116               	movf	(f_open@dir+1)& (0+255),w,b
  5135  0027B8  22DA               	addwfc	fsr2h,f,c
  5136  0027BA  C310  FFDE         	movff	f_open@dw,postinc2
  5137  0027BE  C311  FFDE         	movff	f_open@dw+1,postinc2
  5138  0027C2  C312  FFDE         	movff	f_open@dw+2,postinc2
  5139  0027C6  C313  FFDE         	movff	f_open@dw+3,postinc2
  5140                           
  5141                           ; BSR set to: 3
  5142                           ;ff.c: 2516: dir[11] = 0;
  5143  0027CA  EE20 F00B          	lfsr	2,11
  5144  0027CE  5115               	movf	f_open@dir& (0+255),w,b
  5145  0027D0  26D9               	addwf	fsr2l,f,c
  5146  0027D2  5116               	movf	(f_open@dir+1)& (0+255),w,b
  5147  0027D4  22DA               	addwfc	fsr2h,f,c
  5148  0027D6  0E00               	movlw	0
  5149  0027D8  6EDF               	movwf	indf2,c
  5150                           
  5151                           ; BSR set to: 3
  5152                           ;ff.c: 2517: *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(0);
  5153  0027DA  EE20 F01C          	lfsr	2,28
  5154  0027DE  5115               	movf	f_open@dir& (0+255),w,b
  5155  0027E0  26D9               	addwf	fsr2l,f,c
  5156  0027E2  5116               	movf	(f_open@dir+1)& (0+255),w,b
  5157  0027E4  22DA               	addwfc	fsr2h,f,c
  5158  0027E6  6ADE               	clrf	postinc2,c
  5159  0027E8  6ADE               	clrf	postinc2,c
  5160  0027EA  6ADE               	clrf	postinc2,c
  5161  0027EC  6ADD               	clrf	postdec2,c
  5162                           
  5163                           ; BSR set to: 3
  5164                           ;ff.c: 2518: cl = ld_clust(dj.fs, dir);
  5165  0027EE  C317  F01A         	movff	f_open@dj,ld_clust@fs
  5166  0027F2  C318  F01B         	movff	f_open@dj+1,ld_clust@fs+1
  5167  0027F6  C315  F01C         	movff	f_open@dir,ld_clust@dir
  5168  0027FA  C316  F01D         	movff	f_open@dir+1,ld_clust@dir+1
  5169  0027FE  ECD9  F029         	call	_ld_clust	;wreg free
  5170  002802  C01A  F30C         	movff	?_ld_clust,f_open@cl
  5171  002806  C01B  F30D         	movff	?_ld_clust+1,f_open@cl+1
  5172  00280A  C01C  F30E         	movff	?_ld_clust+2,f_open@cl+2
  5173  00280E  C01D  F30F         	movff	?_ld_clust+3,f_open@cl+3
  5174                           
  5175                           ;ff.c: 2519: st_clust(dir, 0);
  5176  002812  C315  F01A         	movff	f_open@dir,st_clust@dir
  5177  002816  C316  F01B         	movff	f_open@dir+1,st_clust@dir+1
  5178  00281A  0E00               	movlw	0
  5179  00281C  6E1C               	movwf	st_clust@cl,c
  5180  00281E  0E00               	movlw	0
  5181  002820  6E1D               	movwf	st_clust@cl+1,c
  5182  002822  0E00               	movlw	0
  5183  002824  6E1E               	movwf	st_clust@cl+2,c
  5184  002826  0E00               	movlw	0
  5185  002828  6E1F               	movwf	st_clust@cl+3,c
  5186  00282A  EC15  F02D         	call	_st_clust	;wreg free
  5187                           
  5188                           ;ff.c: 2520: dj.fs->wflag = 1;
  5189  00282E  0103               	movlb	3	; () banked
  5190  002830  EE20 F004          	lfsr	2,4
  5191  002834  5117               	movf	f_open@dj& (0+255),w,b
  5192  002836  26D9               	addwf	fsr2l,f,c
  5193  002838  5118               	movf	(f_open@dj+1)& (0+255),w,b
  5194  00283A  22DA               	addwfc	fsr2h,f,c
  5195  00283C  0E01               	movlw	1
  5196  00283E  6EDF               	movwf	indf2,c
  5197                           
  5198                           ; BSR set to: 3
  5199                           ;ff.c: 2521: if (cl) {
  5200  002840  510C               	movf	f_open@cl& (0+255),w,b
  5201  002842  110D               	iorwf	(f_open@cl+1)& (0+255),w,b
  5202  002844  110E               	iorwf	(f_open@cl+2)& (0+255),w,b
  5203  002846  110F               	iorwf	(f_open@cl+3)& (0+255),w,b
  5204  002848  B4D8               	btfsc	status,2,c
  5205  00284A  D06F               	goto	l1442
  5206                           
  5207                           ; BSR set to: 3
  5208                           ;ff.c: 2522: dw = dj.fs->winsect;
  5209  00284C  EE20 F02A          	lfsr	2,42
  5210  002850  5117               	movf	f_open@dj& (0+255),w,b
  5211  002852  26D9               	addwf	fsr2l,f,c
  5212  002854  5118               	movf	(f_open@dj+1)& (0+255),w,b
  5213  002856  22DA               	addwfc	fsr2h,f,c
  5214  002858  CFDE F310          	movff	postinc2,f_open@dw
  5215  00285C  CFDE F311          	movff	postinc2,f_open@dw+1
  5216  002860  CFDE F312          	movff	postinc2,f_open@dw+2
  5217  002864  CFDE F313          	movff	postinc2,f_open@dw+3
  5218                           
  5219                           ; BSR set to: 3
  5220                           ;ff.c: 2523: res = remove_chain(dj.fs, cl);
  5221  002868  C317  F0C0         	movff	f_open@dj,remove_chain@fs
  5222  00286C  C318  F0C1         	movff	f_open@dj+1,remove_chain@fs+1
  5223  002870  C30C  F0C2         	movff	f_open@cl,remove_chain@clst
  5224  002874  C30D  F0C3         	movff	f_open@cl+1,remove_chain@clst+1
  5225  002878  C30E  F0C4         	movff	f_open@cl+2,remove_chain@clst+2
  5226  00287C  C30F  F0C5         	movff	f_open@cl+3,remove_chain@clst+3
  5227  002880  ECB3  F020         	call	_remove_chain	;wreg free
  5228  002884  0103               	movlb	3	; () banked
  5229  002886  6F14               	movwf	f_open@res& (0+255),b
  5230                           
  5231                           ; BSR set to: 3
  5232                           ;ff.c: 2524: if (res == FR_OK) {
  5233  002888  5114               	movf	f_open@res& (0+255),w,b
  5234  00288A  A4D8               	btfss	status,2,c
  5235  00288C  D04E               	goto	l1442
  5236                           
  5237                           ; BSR set to: 3
  5238                           ;ff.c: 2525: dj.fs->last_clust = cl - 1;
  5239  00288E  0EFF               	movlw	255
  5240  002890  250C               	addwf	f_open@cl& (0+255),w,b
  5241  002892  0101               	movlb	1	; () banked
  5242  002894  6FBE               	movwf	??_f_open& (0+255),b
  5243  002896  0EFF               	movlw	255
  5244  002898  0103               	movlb	3	; () banked
  5245  00289A  210D               	addwfc	(f_open@cl+1)& (0+255),w,b
  5246  00289C  0101               	movlb	1	; () banked
  5247  00289E  6FBF               	movwf	(??_f_open+1)& (0+255),b
  5248  0028A0  0EFF               	movlw	255
  5249  0028A2  0103               	movlb	3	; () banked
  5250  0028A4  210E               	addwfc	(f_open@cl+2)& (0+255),w,b
  5251  0028A6  0101               	movlb	1	; () banked
  5252  0028A8  6FC0               	movwf	(??_f_open+2)& (0+255),b
  5253  0028AA  0EFF               	movlw	255
  5254  0028AC  0103               	movlb	3	; () banked
  5255  0028AE  210F               	addwfc	(f_open@cl+3)& (0+255),w,b
  5256  0028B0  0101               	movlb	1	; () banked
  5257  0028B2  6FC1               	movwf	(??_f_open+3)& (0+255),b
  5258  0028B4  0103               	movlb	3	; () banked
  5259  0028B6  EE20 F00A          	lfsr	2,10
  5260  0028BA  5117               	movf	f_open@dj& (0+255),w,b
  5261  0028BC  26D9               	addwf	fsr2l,f,c
  5262  0028BE  5118               	movf	(f_open@dj+1)& (0+255),w,b
  5263  0028C0  22DA               	addwfc	fsr2h,f,c
  5264  0028C2  C1BE  FFDE         	movff	??_f_open,postinc2
  5265  0028C6  C1BF  FFDE         	movff	??_f_open+1,postinc2
  5266  0028CA  C1C0  FFDE         	movff	??_f_open+2,postinc2
  5267  0028CE  C1C1  FFDE         	movff	??_f_open+3,postinc2
  5268                           
  5269                           ; BSR set to: 3
  5270                           ;ff.c: 2526: res = move_window(dj.fs, dw);
  5271  0028D2  C317  F09A         	movff	f_open@dj,move_window@fs
  5272  0028D6  C318  F09B         	movff	f_open@dj+1,move_window@fs+1
  5273  0028DA  C310  F09C         	movff	f_open@dw,move_window@sector
  5274  0028DE  C311  F09D         	movff	f_open@dw+1,move_window@sector+1
  5275  0028E2  C312  F09E         	movff	f_open@dw+2,move_window@sector+2
  5276  0028E6  C313  F09F         	movff	f_open@dw+3,move_window@sector+3
  5277  0028EA  EC0A  F027         	call	_move_window	;wreg free
  5278  0028EE  0103               	movlb	3	; () banked
  5279  0028F0  D01B               	goto	L4
  5280  0028F2                     l1428:
  5281                           
  5282                           ;ff.c: 2531: else {
  5283                           ;ff.c: 2532: if (res == FR_OK) {
  5284                           
  5285                           ; BSR set to: 3
  5286  0028F2  0103               	movlb	3	; () banked
  5287  0028F4  5114               	movf	f_open@res& (0+255),w,b
  5288  0028F6  A4D8               	btfss	status,2,c
  5289  0028F8  D018               	goto	l1442
  5290                           
  5291                           ; BSR set to: 3
  5292                           ;ff.c: 2533: if (dir[11] & 0x10) {
  5293  0028FA  EE20 F00B          	lfsr	2,11
  5294  0028FE  5115               	movf	f_open@dir& (0+255),w,b
  5295  002900  26D9               	addwf	fsr2l,f,c
  5296  002902  5116               	movf	(f_open@dir+1)& (0+255),w,b
  5297  002904  22DA               	addwfc	fsr2h,f,c
  5298  002906  A8DF               	btfss	indf2,4,c
  5299  002908  D002               	goto	l1440
  5300                           
  5301                           ; BSR set to: 3
  5302                           ;ff.c: 2534: res = FR_NO_FILE;
  5303  00290A  0E04               	movlw	4
  5304  00290C  D00D               	goto	L4
  5305  00290E                     l1440:
  5306                           
  5307                           ; BSR set to: 3
  5308                           ;ff.c: 2536: if ((mode & 0x02) && (dir[11] & 0x01))
  5309  00290E  0101               	movlb	1	; () banked
  5310  002910  A3BD               	btfss	f_open@mode& (0+255),1,b
  5311  002912  D00B               	goto	l1442
  5312                           
  5313                           ; BSR set to: 1
  5314  002914  0103               	movlb	3	; () banked
  5315  002916  EE20 F00B          	lfsr	2,11
  5316  00291A  5115               	movf	f_open@dir& (0+255),w,b
  5317  00291C  26D9               	addwf	fsr2l,f,c
  5318  00291E  5116               	movf	(f_open@dir+1)& (0+255),w,b
  5319  002920  22DA               	addwfc	fsr2h,f,c
  5320  002922  A0DF               	btfss	indf2,0,c
  5321  002924  D002               	goto	l1442
  5322                           
  5323                           ; BSR set to: 3
  5324                           ;ff.c: 2537: res = FR_DENIED;
  5325  002926  0E07               	movlw	7
  5326  002928                     L4:
  5327  002928  6F14               	movwf	f_open@res& (0+255),b
  5328  00292A                     l1442:
  5329                           
  5330                           ;ff.c: 2538: }
  5331                           ;ff.c: 2539: }
  5332                           ;ff.c: 2540: }
  5333                           ;ff.c: 2541: if (res == FR_OK) {
  5334                           
  5335                           ; BSR set to: 3
  5336                           
  5337                           ; BSR set to: 3
  5338                           
  5339                           ; BSR set to: 3
  5340  00292A  0103               	movlb	3	; () banked
  5341  00292C  5114               	movf	f_open@res& (0+255),w,b
  5342  00292E  A4D8               	btfss	status,2,c
  5343  002930  D023               	goto	l1443
  5344                           
  5345                           ; BSR set to: 3
  5346                           ;ff.c: 2542: if (mode & 0x08)
  5347  002932  0101               	movlb	1	; () banked
  5348  002934  B7BD               	btfsc	f_open@mode& (0+255),3,b
  5349                           
  5350                           ; BSR set to: 1
  5351                           ;ff.c: 2543: mode |= 0x20;
  5352  002936  8BBD               	bsf	f_open@mode& (0+255),5,b
  5353                           
  5354                           ; BSR set to: 1
  5355                           ;ff.c: 2544: fp->dir_sect = dj.fs->winsect;
  5356                           
  5357                           ; BSR set to: 1
  5358  002938  0103               	movlb	3	; () banked
  5359  00293A  EE20 F02A          	lfsr	2,42
  5360  00293E  5117               	movf	f_open@dj& (0+255),w,b
  5361  002940  26D9               	addwf	fsr2l,f,c
  5362  002942  5118               	movf	(f_open@dj+1)& (0+255),w,b
  5363  002944  22DA               	addwfc	fsr2h,f,c
  5364  002946  0101               	movlb	1	; () banked
  5365  002948  EE10 F01A          	lfsr	1,26
  5366  00294C  51B9               	movf	f_open@fp& (0+255),w,b
  5367  00294E  26E1               	addwf	fsr1l,f,c
  5368  002950  51BA               	movf	(f_open@fp+1)& (0+255),w,b
  5369  002952  22E2               	addwfc	fsr1h,f,c
  5370  002954  CFDE FFE6          	movff	postinc2,postinc1
  5371  002958  CFDE FFE6          	movff	postinc2,postinc1
  5372  00295C  CFDE FFE6          	movff	postinc2,postinc1
  5373  002960  CFDE FFE6          	movff	postinc2,postinc1
  5374                           
  5375                           ; BSR set to: 1
  5376                           ;ff.c: 2545: fp->dir_ptr = dir;
  5377  002964  EE20 F01E          	lfsr	2,30
  5378  002968  51B9               	movf	f_open@fp& (0+255),w,b
  5379  00296A  26D9               	addwf	fsr2l,f,c
  5380  00296C  51BA               	movf	(f_open@fp+1)& (0+255),w,b
  5381  00296E  22DA               	addwfc	fsr2h,f,c
  5382  002970  C315  FFDE         	movff	f_open@dir,postinc2
  5383  002974  C316  FFDD         	movff	f_open@dir+1,postdec2
  5384  002978                     l1443:
  5385                           
  5386                           ;ff.c: 2550: }
  5387                           ;ff.c: 2563: ;
  5388                           ;ff.c: 2565: if (res == FR_OK) {
  5389                           
  5390                           ; BSR set to: 1
  5391  002978  0103               	movlb	3	; () banked
  5392  00297A  5114               	movf	f_open@res& (0+255),w,b
  5393  00297C  A4D8               	btfss	status,2,c
  5394  00297E  D070               	goto	l1445
  5395                           
  5396                           ; BSR set to: 3
  5397                           ;ff.c: 2566: fp->flag = mode;
  5398  002980  0101               	movlb	1	; () banked
  5399  002982  EE20 F004          	lfsr	2,4
  5400  002986  51B9               	movf	f_open@fp& (0+255),w,b
  5401  002988  26D9               	addwf	fsr2l,f,c
  5402  00298A  51BA               	movf	(f_open@fp+1)& (0+255),w,b
  5403  00298C  22DA               	addwfc	fsr2h,f,c
  5404  00298E  C1BD  FFDF         	movff	f_open@mode,indf2
  5405                           
  5406                           ;ff.c: 2567: fp->err = 0;
  5407  002992  EE20 F005          	lfsr	2,5
  5408  002996  51B9               	movf	f_open@fp& (0+255),w,b
  5409  002998  26D9               	addwf	fsr2l,f,c
  5410  00299A  51BA               	movf	(f_open@fp+1)& (0+255),w,b
  5411  00299C  22DA               	addwfc	fsr2h,f,c
  5412  00299E  0E00               	movlw	0
  5413  0029A0  6EDF               	movwf	indf2,c
  5414                           
  5415                           ; BSR set to: 1
  5416                           ;ff.c: 2568: fp->sclust = ld_clust(dj.fs, dir);
  5417  0029A2  C317  F01A         	movff	f_open@dj,ld_clust@fs
  5418  0029A6  C318  F01B         	movff	f_open@dj+1,ld_clust@fs+1
  5419  0029AA  C315  F01C         	movff	f_open@dir,ld_clust@dir
  5420  0029AE  C316  F01D         	movff	f_open@dir+1,ld_clust@dir+1
  5421  0029B2  ECD9  F029         	call	_ld_clust	;wreg free
  5422  0029B6  0101               	movlb	1	; () banked
  5423  0029B8  EE20 F00E          	lfsr	2,14
  5424  0029BC  51B9               	movf	f_open@fp& (0+255),w,b
  5425  0029BE  26D9               	addwf	fsr2l,f,c
  5426  0029C0  51BA               	movf	(f_open@fp+1)& (0+255),w,b
  5427  0029C2  22DA               	addwfc	fsr2h,f,c
  5428  0029C4  C01A  FFDE         	movff	?_ld_clust,postinc2
  5429  0029C8  C01B  FFDE         	movff	?_ld_clust+1,postinc2
  5430  0029CC  C01C  FFDE         	movff	?_ld_clust+2,postinc2
  5431  0029D0  C01D  FFDE         	movff	?_ld_clust+3,postinc2
  5432                           
  5433                           ; BSR set to: 1
  5434                           ;ff.c: 2569: fp->fsize = (DWORD)(*(DWORD*)(BYTE*)(dir + 28));
  5435  0029D4  0103               	movlb	3	; () banked
  5436  0029D6  EE20 F01C          	lfsr	2,28
  5437  0029DA  5115               	movf	f_open@dir& (0+255),w,b
  5438  0029DC  26D9               	addwf	fsr2l,f,c
  5439  0029DE  5116               	movf	(f_open@dir+1)& (0+255),w,b
  5440  0029E0  22DA               	addwfc	fsr2h,f,c
  5441  0029E2  0101               	movlb	1	; () banked
  5442  0029E4  EE10 F00A          	lfsr	1,10
  5443  0029E8  51B9               	movf	f_open@fp& (0+255),w,b
  5444  0029EA  26E1               	addwf	fsr1l,f,c
  5445  0029EC  51BA               	movf	(f_open@fp+1)& (0+255),w,b
  5446  0029EE  22E2               	addwfc	fsr1h,f,c
  5447  0029F0  CFDE FFE6          	movff	postinc2,postinc1
  5448  0029F4  CFDE FFE6          	movff	postinc2,postinc1
  5449  0029F8  CFDE FFE6          	movff	postinc2,postinc1
  5450  0029FC  CFDE FFE6          	movff	postinc2,postinc1
  5451                           
  5452                           ; BSR set to: 1
  5453                           ;ff.c: 2570: fp->fptr = 0;
  5454  002A00  EE20 F006          	lfsr	2,6
  5455  002A04  51B9               	movf	f_open@fp& (0+255),w,b
  5456  002A06  26D9               	addwf	fsr2l,f,c
  5457  002A08  51BA               	movf	(f_open@fp+1)& (0+255),w,b
  5458  002A0A  22DA               	addwfc	fsr2h,f,c
  5459  002A0C  6ADE               	clrf	postinc2,c
  5460  002A0E  6ADE               	clrf	postinc2,c
  5461  002A10  6ADE               	clrf	postinc2,c
  5462  002A12  6ADD               	clrf	postdec2,c
  5463                           
  5464                           ; BSR set to: 1
  5465                           ;ff.c: 2571: fp->dsect = 0;
  5466  002A14  EE20 F016          	lfsr	2,22
  5467  002A18  51B9               	movf	f_open@fp& (0+255),w,b
  5468  002A1A  26D9               	addwf	fsr2l,f,c
  5469  002A1C  51BA               	movf	(f_open@fp+1)& (0+255),w,b
  5470  002A1E  22DA               	addwfc	fsr2h,f,c
  5471  002A20  6ADE               	clrf	postinc2,c
  5472  002A22  6ADE               	clrf	postinc2,c
  5473  002A24  6ADE               	clrf	postinc2,c
  5474  002A26  6ADD               	clrf	postdec2,c
  5475                           
  5476                           ; BSR set to: 1
  5477                           ;ff.c: 2575: fp->fs = dj.fs;
  5478  002A28  C1B9  FFD9         	movff	f_open@fp,fsr2l
  5479  002A2C  C1BA  FFDA         	movff	f_open@fp+1,fsr2h
  5480  002A30  C317  FFDE         	movff	f_open@dj,postinc2
  5481  002A34  C318  FFDD         	movff	f_open@dj+1,postdec2
  5482                           
  5483                           ; BSR set to: 1
  5484                           ;ff.c: 2576: fp->id = fp->fs->id;
  5485  002A38  C1B9  FFD9         	movff	f_open@fp,fsr2l
  5486  002A3C  C1BA  FFDA         	movff	f_open@fp+1,fsr2h
  5487  002A40  EE10 F006          	lfsr	1,6
  5488  002A44  50DE               	movf	postinc2,w,c
  5489  002A46  26E1               	addwf	fsr1l,f,c
  5490  002A48  50DD               	movf	postdec2,w,c
  5491  002A4A  22E2               	addwfc	fsr1h,f,c
  5492  002A4C  EE20 F002          	lfsr	2,2
  5493  002A50  51B9               	movf	f_open@fp& (0+255),w,b
  5494  002A52  26D9               	addwf	fsr2l,f,c
  5495  002A54  51BA               	movf	(f_open@fp+1)& (0+255),w,b
  5496  002A56  22DA               	addwfc	fsr2h,f,c
  5497  002A58  CFE6 FFDE          	movff	postinc1,postinc2
  5498  002A5C  CFE5 FFDD          	movff	postdec1,postdec2
  5499  002A60                     l1445:
  5500                           
  5501                           ;ff.c: 2577: }
  5502                           ;ff.c: 2578: }
  5503                           ;ff.c: 2580: return res;
  5504                           
  5505                           ; BSR set to: 1
  5506                           
  5507                           ; BSR set to: 1
  5508  002A60  0103               	movlb	3	; () banked
  5509  002A62  5114               	movf	f_open@res& (0+255),w,b
  5510  002A64  0012               	return	
  5511  002A66                     __end_of_f_open:
  5512                           	opt stack 0
  5513                           tosu	equ	0xFFF
  5514                           tosh	equ	0xFFE
  5515                           tosl	equ	0xFFD
  5516                           pclath	equ	0xFFA
  5517                           tblptru	equ	0xFF8
  5518                           tblptrh	equ	0xFF7
  5519                           tblptrl	equ	0xFF6
  5520                           tablat	equ	0xFF5
  5521                           prodh	equ	0xFF4
  5522                           prodl	equ	0xFF3
  5523                           intcon	equ	0xFF2
  5524                           intcon2	equ	0xFF1
  5525                           intcon3	equ	0xFF0
  5526                           postinc0	equ	0xFEE
  5527                           fsr0h	equ	0xFEA
  5528                           fsr0l	equ	0xFE9
  5529                           wreg	equ	0xFE8
  5530                           indf1	equ	0xFE7
  5531                           postinc1	equ	0xFE6
  5532                           postdec1	equ	0xFE5
  5533                           fsr1h	equ	0xFE2
  5534                           fsr1l	equ	0xFE1
  5535                           indf2	equ	0xFDF
  5536                           postinc2	equ	0xFDE
  5537                           postdec2	equ	0xFDD
  5538                           plusw2	equ	0xFDB
  5539                           fsr2h	equ	0xFDA
  5540                           fsr2l	equ	0xFD9
  5541                           status	equ	0xFD8
  5542                           
  5543 ;; *************** function _remove_chain *****************
  5544 ;; Defined at:
  5545 ;;		line 937 in file "bibliotecas/ff.c"
  5546 ;; Parameters:    Size  Location     Type
  5547 ;;  fs              2   96[BANK0 ] PTR struct .
  5548 ;;		 -> NULL(0), fs(558), 
  5549 ;;  clst            4   98[BANK0 ] unsigned long 
  5550 ;; Auto vars:     Size  Location     Type
  5551 ;;  nxt             4  107[BANK0 ] unsigned long 
  5552 ;;  res             1  106[BANK0 ] enum E75
  5553 ;; Return value:  Size  Location     Type
  5554 ;;                  1    wreg      enum E75
  5555 ;; Registers used:
  5556 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5557 ;; Tracked objects:
  5558 ;;		On entry : 0/0
  5559 ;;		On exit  : 0/0
  5560 ;;		Unchanged: 0/0
  5561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5562 ;;      Params:         0       6       0       0       0       0       0       0       0
  5563 ;;      Locals:         0       5       0       0       0       0       0       0       0
  5564 ;;      Temps:          0       4       0       0       0       0       0       0       0
  5565 ;;      Totals:         0      15       0       0       0       0       0       0       0
  5566 ;;Total ram usage:       15 bytes
  5567 ;; Hardware stack levels used:    1
  5568 ;; Hardware stack levels required when called:   12
  5569 ;; This function calls:
  5570 ;;		_get_fat
  5571 ;;		_put_fat
  5572 ;; This function is called by:
  5573 ;;		_f_open
  5574 ;; This function uses a non-reentrant model
  5575 ;;
  5576                           
  5577                           	psect	text17
  5578  004166                     __ptext17:
  5579                           	opt stack 0
  5580  004166                     _remove_chain:
  5581                           	opt stack 15
  5582                           
  5583                           ;ff.c: 942: FRESULT res;
  5584                           ;ff.c: 943: DWORD nxt;
  5585                           ;ff.c: 948: if (clst < 2 || clst >= fs->n_fatent) {
  5586                           
  5587                           ;incstack = 0
  5588  004166  0100               	movlb	0	; () banked
  5589  004168  51C5               	movf	(remove_chain@clst+3)& (0+255),w,b
  5590  00416A  11C4               	iorwf	(remove_chain@clst+2)& (0+255),w,b
  5591  00416C  11C3               	iorwf	(remove_chain@clst+1)& (0+255),w,b
  5592  00416E  E104               	bnz	u16380
  5593  004170  0E02               	movlw	2
  5594  004172  5DC2               	subwf	remove_chain@clst& (0+255),w,b
  5595  004174  A0D8               	btfss	status,0,c
  5596  004176  D036               	goto	u16410
  5597  004178                     u16380:
  5598                           
  5599                           ; BSR set to: 0
  5600  004178  EE20 F012          	lfsr	2,18
  5601  00417C  51C0               	movf	remove_chain@fs& (0+255),w,b
  5602  00417E  26D9               	addwf	fsr2l,f,c
  5603  004180  51C1               	movf	(remove_chain@fs+1)& (0+255),w,b
  5604  004182  22DA               	addwfc	fsr2h,f,c
  5605  004184  50DE               	movf	postinc2,w,c
  5606  004186  5DC2               	subwf	remove_chain@clst& (0+255),w,b
  5607  004188  50DE               	movf	postinc2,w,c
  5608  00418A  59C3               	subwfb	(remove_chain@clst+1)& (0+255),w,b
  5609  00418C  50DE               	movf	postinc2,w,c
  5610  00418E  59C4               	subwfb	(remove_chain@clst+2)& (0+255),w,b
  5611  004190  50DE               	movf	postinc2,w,c
  5612  004192  59C5               	subwfb	(remove_chain@clst+3)& (0+255),w,b
  5613  004194  B0D8               	btfsc	status,0,c
  5614                           
  5615                           ; BSR set to: 0
  5616  004196  D026               	goto	u16410
  5617                           
  5618                           ; BSR set to: 0
  5619                           ;ff.c: 952: res = FR_OK;
  5620                           
  5621                           ; BSR set to: 0
  5622                           
  5623                           ;ff.c: 951: } else {
  5624                           
  5625                           ; BSR set to: 0
  5626                           ;ff.c: 949: res = FR_INT_ERR;
  5627  004198  0E00               	movlw	0
  5628  00419A  6FCA               	movwf	remove_chain@res& (0+255),b
  5629                           
  5630                           ;ff.c: 953: while (clst < fs->n_fatent) {
  5631  00419C  D076               	goto	l1152
  5632  00419E                     
  5633                           ; BSR set to: 0
  5634                           ;ff.c: 954: nxt = get_fat(fs, clst);
  5635                           
  5636                           ; BSR set to: 0
  5637  00419E  C0C0  F0A5         	movff	remove_chain@fs,get_fat@fs
  5638  0041A2  C0C1  F0A6         	movff	remove_chain@fs+1,get_fat@fs+1
  5639  0041A6  C0C2  F0A7         	movff	remove_chain@clst,get_fat@clst
  5640  0041AA  C0C3  F0A8         	movff	remove_chain@clst+1,get_fat@clst+1
  5641  0041AE  C0C4  F0A9         	movff	remove_chain@clst+2,get_fat@clst+2
  5642  0041B2  C0C5  F0AA         	movff	remove_chain@clst+3,get_fat@clst+3
  5643  0041B6  EC33  F015         	call	_get_fat	;wreg free
  5644  0041BA  C0A5  F0CB         	movff	?_get_fat,remove_chain@nxt
  5645  0041BE  C0A6  F0CC         	movff	?_get_fat+1,remove_chain@nxt+1
  5646  0041C2  C0A7  F0CD         	movff	?_get_fat+2,remove_chain@nxt+2
  5647  0041C6  C0A8  F0CE         	movff	?_get_fat+3,remove_chain@nxt+3
  5648                           
  5649                           ;ff.c: 955: if (nxt == 0) break;
  5650  0041CA  0100               	movlb	0	; () banked
  5651  0041CC  51CB               	movf	remove_chain@nxt& (0+255),w,b
  5652  0041CE  11CC               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  5653  0041D0  11CD               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  5654  0041D2  11CE               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  5655  0041D4  B4D8               	btfsc	status,2,c
  5656  0041D6  D069               	goto	u16450
  5657                           
  5658                           ; BSR set to: 0
  5659                           ;ff.c: 956: if (nxt == 1) { res = FR_INT_ERR; break; }
  5660                           
  5661                           ; BSR set to: 0
  5662                           
  5663                           ; BSR set to: 0
  5664  0041D8  05CB               	decf	remove_chain@nxt& (0+255),w,b
  5665  0041DA  11CC               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  5666  0041DC  11CD               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  5667  0041DE  11CE               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  5668  0041E0  A4D8               	btfss	status,2,c
  5669  0041E2  D002               	goto	l1156
  5670  0041E4                     u16410:
  5671                           
  5672                           ; BSR set to: 0
  5673  0041E4  0E02               	movlw	2
  5674  0041E6  D00A               	goto	L5
  5675  0041E8                     l1156:
  5676                           
  5677                           ; BSR set to: 0
  5678                           ;ff.c: 957: if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
  5679                           
  5680                           ; BSR set to: 0
  5681  0041E8  29CB               	incf	remove_chain@nxt& (0+255),w,b
  5682  0041EA  E10A               	bnz	l12039
  5683  0041EC  29CC               	incf	(remove_chain@nxt+1)& (0+255),w,b
  5684  0041EE  E108               	bnz	l12039
  5685  0041F0  29CD               	incf	(remove_chain@nxt+2)& (0+255),w,b
  5686  0041F2  E106               	bnz	l12039
  5687  0041F4  29CE               	incf	(remove_chain@nxt+3)& (0+255),w,b
  5688  0041F6  A4D8               	btfss	status,2,c
  5689  0041F8  D003               	goto	l1157
  5690                           
  5691                           ; BSR set to: 0
  5692  0041FA  0E01               	movlw	1
  5693  0041FC                     L5:
  5694  0041FC  6FCA               	movwf	remove_chain@res& (0+255),b
  5695  0041FE  D055               	goto	u16450
  5696  004200                     l1157:
  5697  004200                     l12039:
  5698                           
  5699                           ; BSR set to: 0
  5700                           ;ff.c: 958: res = put_fat(fs, clst, 0);
  5701  004200  C0C0  F0A5         	movff	remove_chain@fs,put_fat@fs
  5702  004204  C0C1  F0A6         	movff	remove_chain@fs+1,put_fat@fs+1
  5703  004208  C0C2  F0A7         	movff	remove_chain@clst,put_fat@clst
  5704  00420C  C0C3  F0A8         	movff	remove_chain@clst+1,put_fat@clst+1
  5705  004210  C0C4  F0A9         	movff	remove_chain@clst+2,put_fat@clst+2
  5706  004214  C0C5  F0AA         	movff	remove_chain@clst+3,put_fat@clst+3
  5707  004218  0E00               	movlw	0
  5708  00421A  6FAB               	movwf	put_fat@val& (0+255),b
  5709  00421C  0E00               	movlw	0
  5710  00421E  6FAC               	movwf	(put_fat@val+1)& (0+255),b
  5711  004220  0E00               	movlw	0
  5712  004222  6FAD               	movwf	(put_fat@val+2)& (0+255),b
  5713  004224  0E00               	movlw	0
  5714  004226  6FAE               	movwf	(put_fat@val+3)& (0+255),b
  5715  004228  EC39  F011         	call	_put_fat	;wreg free
  5716  00422C  0100               	movlb	0	; () banked
  5717  00422E  6FCA               	movwf	remove_chain@res& (0+255),b
  5718                           
  5719                           ; BSR set to: 0
  5720                           ;ff.c: 959: if (res != FR_OK) break;
  5721  004230  51CA               	movf	remove_chain@res& (0+255),w,b
  5722  004232  A4D8               	btfss	status,2,c
  5723  004234  D03A               	goto	u16450
  5724                           
  5725                           ; BSR set to: 0
  5726                           ;ff.c: 960: if (fs->free_clust != 0xFFFFFFFF) {
  5727                           
  5728                           ; BSR set to: 0
  5729                           
  5730                           ; BSR set to: 0
  5731  004236  EE20 F00E          	lfsr	2,14
  5732  00423A  51C0               	movf	remove_chain@fs& (0+255),w,b
  5733  00423C  26D9               	addwf	fsr2l,f,c
  5734  00423E  51C1               	movf	(remove_chain@fs+1)& (0+255),w,b
  5735  004240  22DA               	addwfc	fsr2h,f,c
  5736  004242  28DE               	incf	postinc2,w,c
  5737  004244  E107               	bnz	u16440
  5738  004246  28DE               	incf	postinc2,w,c
  5739  004248  E105               	bnz	u16440
  5740  00424A  28DE               	incf	postinc2,w,c
  5741  00424C  E103               	bnz	u16440
  5742  00424E  28DE               	incf	postinc2,w,c
  5743  004250  B4D8               	btfsc	status,2,c
  5744  004252  D013               	goto	l1159
  5745  004254                     u16440:
  5746                           
  5747                           ; BSR set to: 0
  5748                           ;ff.c: 961: fs->free_clust++;
  5749  004254  EE20 F00E          	lfsr	2,14
  5750  004258  51C0               	movf	remove_chain@fs& (0+255),w,b
  5751  00425A  26D9               	addwf	fsr2l,f,c
  5752  00425C  51C1               	movf	(remove_chain@fs+1)& (0+255),w,b
  5753  00425E  22DA               	addwfc	fsr2h,f,c
  5754  004260  2ADE               	incf	postinc2,f,c
  5755  004262  0E00               	movlw	0
  5756  004264  22DE               	addwfc	postinc2,f,c
  5757  004266  22DE               	addwfc	postinc2,f,c
  5758  004268  22DE               	addwfc	postinc2,f,c
  5759                           
  5760                           ;ff.c: 962: fs->fsi_flag |= 1;
  5761  00426A  EE20 F005          	lfsr	2,5
  5762  00426E  51C0               	movf	remove_chain@fs& (0+255),w,b
  5763  004270  26D9               	addwf	fsr2l,f,c
  5764  004272  51C1               	movf	(remove_chain@fs+1)& (0+255),w,b
  5765  004274  22DA               	addwfc	fsr2h,f,c
  5766  004276  0E00               	movlw	0
  5767  004278  80DB               	bsf	plusw2,0,c
  5768  00427A                     l1159:
  5769                           
  5770                           ; BSR set to: 0
  5771                           ;ff.c: 963: }
  5772                           ;ff.c: 974: clst = nxt;
  5773                           
  5774                           ; BSR set to: 0
  5775  00427A  C0CB  F0C2         	movff	remove_chain@nxt,remove_chain@clst
  5776  00427E  C0CC  F0C3         	movff	remove_chain@nxt+1,remove_chain@clst+1
  5777  004282  C0CD  F0C4         	movff	remove_chain@nxt+2,remove_chain@clst+2
  5778  004286  C0CE  F0C5         	movff	remove_chain@nxt+3,remove_chain@clst+3
  5779  00428A                     l1152:
  5780                           
  5781                           ; BSR set to: 0
  5782  00428A  EE20 F012          	lfsr	2,18
  5783  00428E  51C0               	movf	remove_chain@fs& (0+255),w,b
  5784  004290  26D9               	addwf	fsr2l,f,c
  5785  004292  51C1               	movf	(remove_chain@fs+1)& (0+255),w,b
  5786  004294  22DA               	addwfc	fsr2h,f,c
  5787  004296  50DE               	movf	postinc2,w,c
  5788  004298  5DC2               	subwf	remove_chain@clst& (0+255),w,b
  5789  00429A  50DE               	movf	postinc2,w,c
  5790  00429C  59C3               	subwfb	(remove_chain@clst+1)& (0+255),w,b
  5791  00429E  50DE               	movf	postinc2,w,c
  5792  0042A0  59C4               	subwfb	(remove_chain@clst+2)& (0+255),w,b
  5793  0042A2  50DE               	movf	postinc2,w,c
  5794  0042A4  59C5               	subwfb	(remove_chain@clst+3)& (0+255),w,b
  5795  0042A6  A0D8               	btfss	status,0,c
  5796  0042A8  D77A               	goto	l1153
  5797  0042AA                     u16450:
  5798                           
  5799                           ; BSR set to: 0
  5800                           ;ff.c: 975: }
  5801                           ;ff.c: 976: }
  5802                           ;ff.c: 978: return res;
  5803                           
  5804                           ; BSR set to: 0
  5805                           
  5806                           ; BSR set to: 0
  5807  0042AA  51CA               	movf	remove_chain@res& (0+255),w,b
  5808  0042AC  0012               	return	
  5809  0042AE                     __end_of_remove_chain:
  5810                           	opt stack 0
  5811                           tosu	equ	0xFFF
  5812                           tosh	equ	0xFFE
  5813                           tosl	equ	0xFFD
  5814                           pclath	equ	0xFFA
  5815                           tblptru	equ	0xFF8
  5816                           tblptrh	equ	0xFF7
  5817                           tblptrl	equ	0xFF6
  5818                           tablat	equ	0xFF5
  5819                           prodh	equ	0xFF4
  5820                           prodl	equ	0xFF3
  5821                           intcon	equ	0xFF2
  5822                           intcon2	equ	0xFF1
  5823                           intcon3	equ	0xFF0
  5824                           postinc0	equ	0xFEE
  5825                           fsr0h	equ	0xFEA
  5826                           fsr0l	equ	0xFE9
  5827                           wreg	equ	0xFE8
  5828                           indf1	equ	0xFE7
  5829                           postinc1	equ	0xFE6
  5830                           postdec1	equ	0xFE5
  5831                           fsr1h	equ	0xFE2
  5832                           fsr1l	equ	0xFE1
  5833                           indf2	equ	0xFDF
  5834                           postinc2	equ	0xFDE
  5835                           postdec2	equ	0xFDD
  5836                           plusw2	equ	0xFDB
  5837                           fsr2h	equ	0xFDA
  5838                           fsr2l	equ	0xFD9
  5839                           status	equ	0xFD8
  5840                           
  5841 ;; *************** function _follow_path *****************
  5842 ;; Defined at:
  5843 ;;		line 2052 in file "bibliotecas/ff.c"
  5844 ;; Parameters:    Size  Location     Type
  5845 ;;  dp              2    4[BANK1 ] PTR struct .
  5846 ;;		 -> f_open@dj(22), 
  5847 ;;  path            2    6[BANK1 ] PTR const unsigned char 
  5848 ;;		 -> STR_11(10), STR_9(1), 
  5849 ;; Auto vars:     Size  Location     Type
  5850 ;;  dir             2    8[BANK1 ] PTR unsigned char 
  5851 ;;		 -> NULL(0), fs(558), 
  5852 ;;  res             1   11[BANK1 ] enum E75
  5853 ;;  ns              1   10[BANK1 ] unsigned char 
  5854 ;; Return value:  Size  Location     Type
  5855 ;;                  1    wreg      enum E75
  5856 ;; Registers used:
  5857 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5858 ;; Tracked objects:
  5859 ;;		On entry : 0/0
  5860 ;;		On exit  : 0/0
  5861 ;;		Unchanged: 0/0
  5862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5863 ;;      Params:         0       0       4       0       0       0       0       0       0
  5864 ;;      Locals:         0       0       4       0       0       0       0       0       0
  5865 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5866 ;;      Totals:         0       0       8       0       0       0       0       0       0
  5867 ;;Total ram usage:        8 bytes
  5868 ;; Hardware stack levels used:    1
  5869 ;; Hardware stack levels required when called:   15
  5870 ;; This function calls:
  5871 ;;		_create_name
  5872 ;;		_dir_find
  5873 ;;		_dir_sdi
  5874 ;;		_ld_clust
  5875 ;; This function is called by:
  5876 ;;		_f_open
  5877 ;; This function uses a non-reentrant model
  5878 ;;
  5879                           
  5880                           	psect	text18
  5881  003EC6                     __ptext18:
  5882                           	opt stack 0
  5883  003EC6                     _follow_path:
  5884                           	opt stack 12
  5885                           
  5886                           ;ff.c: 2057: FRESULT res;
  5887                           ;ff.c: 2058: BYTE *dir, ns;
  5888                           ;ff.c: 2068: if (*path == '/' || *path == '\\')
  5889                           
  5890                           ; BSR set to: 0
  5891                           ;incstack = 0
  5892  003EC6  C185  FFF6         	movff	follow_path@path,tblptrl
  5893  003ECA  C186  FFF7         	movff	follow_path@path+1,tblptrh
  5894  003ECE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5895  003ECE  6AF8               	clrf	tblptru,c
  5896  003ED0                     	endif
  5897  003ED0                     	if	0	;tblptru may be non-zero
  5898  003ED0                     	endif
  5899  003ED0  0008               	tblrd		*
  5900  003ED2  50F5               	movf	tablat,w,c
  5901  003ED4  0A2F               	xorlw	47
  5902  003ED6  B4D8               	btfsc	status,2,c
  5903  003ED8  D00A               	goto	u16490
  5904  003EDA  C185  FFF6         	movff	follow_path@path,tblptrl
  5905  003EDE  C186  FFF7         	movff	follow_path@path+1,tblptrh
  5906  003EE2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5907  003EE2  6AF8               	clrf	tblptru,c
  5908  003EE4                     	endif
  5909  003EE4                     	if	0	;tblptru may be non-zero
  5910  003EE4                     	endif
  5911  003EE4  0008               	tblrd		*
  5912  003EE6  50F5               	movf	tablat,w,c
  5913  003EE8  0A5C               	xorlw	92
  5914  003EEA  A4D8               	btfss	status,2,c
  5915  003EEC  D003               	goto	l1311
  5916  003EEE                     u16490:
  5917                           
  5918                           ;ff.c: 2069: path++;
  5919  003EEE  0101               	movlb	1	; () banked
  5920  003EF0  4B85               	infsnz	follow_path@path& (0+255),f,b
  5921  003EF2  2B86               	incf	(follow_path@path+1)& (0+255),f,b
  5922  003EF4                     l1311:
  5923                           
  5924                           ;ff.c: 2070: dp->sclust = 0;
  5925                           
  5926                           ; BSR set to: 1
  5927  003EF4  0101               	movlb	1	; () banked
  5928  003EF6  EE20 F006          	lfsr	2,6
  5929  003EFA  5183               	movf	follow_path@dp& (0+255),w,b
  5930  003EFC  26D9               	addwf	fsr2l,f,c
  5931  003EFE  5184               	movf	(follow_path@dp+1)& (0+255),w,b
  5932  003F00  22DA               	addwfc	fsr2h,f,c
  5933  003F02  6ADE               	clrf	postinc2,c
  5934  003F04  6ADE               	clrf	postinc2,c
  5935  003F06  6ADE               	clrf	postinc2,c
  5936  003F08  6ADD               	clrf	postdec2,c
  5937                           
  5938                           ; BSR set to: 1
  5939                           ;ff.c: 2073: if ((UINT)*path < ' ') {
  5940  003F0A  C185  FFF6         	movff	follow_path@path,tblptrl
  5941  003F0E  C186  FFF7         	movff	follow_path@path+1,tblptrh
  5942  003F12                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5943  003F12  6AF8               	clrf	tblptru,c
  5944  003F14                     	endif
  5945  003F14                     	if	0	;tblptru may be non-zero
  5946  003F14                     	endif
  5947  003F14  0E20               	movlw	32
  5948  003F16  0008               	tblrd		*
  5949  003F18  60F5               	cpfslt	tablat,c
  5950  003F1A  D018               	goto	l1314
  5951                           
  5952                           ; BSR set to: 1
  5953                           ;ff.c: 2074: res = dir_sdi(dp, 0);
  5954  003F1C  C183  F0BF         	movff	follow_path@dp,dir_sdi@dp
  5955  003F20  C184  F0C0         	movff	follow_path@dp+1,dir_sdi@dp+1
  5956  003F24  0E00               	movlw	0
  5957  003F26  0100               	movlb	0	; () banked
  5958  003F28  6FC2               	movwf	(dir_sdi@idx+1)& (0+255),b
  5959  003F2A  0E00               	movlw	0
  5960  003F2C  6FC1               	movwf	dir_sdi@idx& (0+255),b
  5961  003F2E  EC8B  F018         	call	_dir_sdi	;wreg free
  5962  003F32  0101               	movlb	1	; () banked
  5963  003F34  6F8A               	movwf	follow_path@res& (0+255),b
  5964                           
  5965                           ; BSR set to: 1
  5966                           ;ff.c: 2075: dp->dir = 0;
  5967  003F36  EE20 F012          	lfsr	2,18
  5968  003F3A  5183               	movf	follow_path@dp& (0+255),w,b
  5969  003F3C  26D9               	addwf	fsr2l,f,c
  5970  003F3E  5184               	movf	(follow_path@dp+1)& (0+255),w,b
  5971  003F40  22DA               	addwfc	fsr2h,f,c
  5972  003F42  0E00               	movlw	0
  5973  003F44  6EDE               	movwf	postinc2,c
  5974  003F46  0E00               	movlw	0
  5975  003F48  6EDD               	movwf	postdec2,c
  5976                           
  5977                           ;ff.c: 2076: } else {
  5978  003F4A  D064               	goto	l1318
  5979  003F4C                     l1314:
  5980                           
  5981                           ; BSR set to: 1
  5982                           ;ff.c: 2078: res = create_name(dp, &path);
  5983                           
  5984                           ; BSR set to: 1
  5985                           
  5986                           ;ff.c: 2077: for (;;) {
  5987                           
  5988                           ; BSR set to: 1
  5989  003F4C  C183  F022         	movff	follow_path@dp,create_name@dp
  5990  003F50  C184  F023         	movff	follow_path@dp+1,create_name@dp+1
  5991  003F54  0E85               	movlw	low follow_path@path
  5992  003F56  6E24               	movwf	create_name@path,c
  5993  003F58  0E01               	movlw	high follow_path@path
  5994  003F5A  6E25               	movwf	create_name@path+1,c
  5995  003F5C  ECF2  F019         	call	_create_name	;wreg free
  5996  003F60  0101               	movlb	1	; () banked
  5997  003F62  6F8A               	movwf	follow_path@res& (0+255),b
  5998                           
  5999                           ; BSR set to: 1
  6000                           ;ff.c: 2079: if (res != FR_OK) break;
  6001  003F64  518A               	movf	follow_path@res& (0+255),w,b
  6002  003F66  A4D8               	btfss	status,2,c
  6003  003F68  D055               	goto	l1318
  6004                           
  6005                           ; BSR set to: 1
  6006                           ;ff.c: 2080: res = dir_find(dp);
  6007                           
  6008                           ; BSR set to: 1
  6009                           
  6010                           ; BSR set to: 1
  6011  003F6A  C183  F0EA         	movff	follow_path@dp,dir_find@dp
  6012  003F6E  C184  F0EB         	movff	follow_path@dp+1,dir_find@dp+1
  6013  003F72  EC73  F023         	call	_dir_find	;wreg free
  6014  003F76  0101               	movlb	1	; () banked
  6015  003F78  6F8A               	movwf	follow_path@res& (0+255),b
  6016                           
  6017                           ; BSR set to: 1
  6018                           ;ff.c: 2081: ns = dp->fn[11];
  6019  003F7A  EE20 F014          	lfsr	2,20
  6020  003F7E  5183               	movf	follow_path@dp& (0+255),w,b
  6021  003F80  26D9               	addwf	fsr2l,f,c
  6022  003F82  5184               	movf	(follow_path@dp+1)& (0+255),w,b
  6023  003F84  22DA               	addwfc	fsr2h,f,c
  6024  003F86  EE10 F00B          	lfsr	1,11
  6025  003F8A  50DE               	movf	postinc2,w,c
  6026  003F8C  26E1               	addwf	fsr1l,f,c
  6027  003F8E  50DD               	movf	postdec2,w,c
  6028  003F90  22E2               	addwfc	fsr1h,f,c
  6029  003F92  50E7               	movf	indf1,w,c
  6030  003F94  6F89               	movwf	follow_path@ns& (0+255),b
  6031                           
  6032                           ; BSR set to: 1
  6033                           ;ff.c: 2082: if (res != FR_OK) {
  6034  003F96  518A               	movf	follow_path@res& (0+255),w,b
  6035  003F98  B4D8               	btfsc	status,2,c
  6036  003F9A  D008               	goto	l1319
  6037                           
  6038                           ; BSR set to: 1
  6039                           ;ff.c: 2083: if (res == FR_NO_FILE) {
  6040  003F9C  0E04               	movlw	4
  6041  003F9E  198A               	xorwf	follow_path@res& (0+255),w,b
  6042  003FA0  B4D8               	btfsc	status,2,c
  6043                           
  6044                           ; BSR set to: 1
  6045                           ;ff.c: 2089: if (!(ns & 0x04)) res = FR_NO_PATH;
  6046                           
  6047                           ;ff.c: 2088: } else {
  6048                           
  6049                           ; BSR set to: 1
  6050                           ;ff.c: 2087: res = FR_OK;
  6051                           
  6052                           ; BSR set to: 1
  6053                           
  6054                           ; BSR set to: 1
  6055                           
  6056                           ; BSR set to: 1
  6057                           ;ff.c: 2086: if (!(ns & 0x04)) continue;
  6058                           
  6059                           ; BSR set to: 1
  6060                           ;ff.c: 2085: dp->sclust = 0; dp->dir = 0;
  6061                           
  6062                           ; BSR set to: 1
  6063                           
  6064                           ; BSR set to: 1
  6065                           ;ff.c: 2084: if (0 && (ns & 0x20)) {
  6066  003FA2  B589               	btfsc	follow_path@ns& (0+255),2,b
  6067  003FA4  D037               	goto	l1318
  6068  003FA6  D016               	goto	u16580
  6069  003FA8                     L6:
  6070  003FA8  6F8A               	movwf	follow_path@res& (0+255),b
  6071                           
  6072                           ; BSR set to: 1
  6073                           ;ff.c: 2090: }
  6074                           ;ff.c: 2091: }
  6075                           ;ff.c: 2092: break;
  6076                           
  6077                           ; BSR set to: 1
  6078                           
  6079                           ; BSR set to: 1
  6080  003FAA  D034               	goto	l1318
  6081  003FAC                     l1319:
  6082                           
  6083                           ; BSR set to: 1
  6084                           ;ff.c: 2093: }
  6085                           ;ff.c: 2094: if (ns & 0x04) break;
  6086  003FAC  B589               	btfsc	follow_path@ns& (0+255),2,b
  6087  003FAE  D032               	goto	l1318
  6088                           
  6089                           ; BSR set to: 1
  6090                           ;ff.c: 2095: dir = dp->dir;
  6091                           
  6092                           ; BSR set to: 1
  6093                           
  6094                           ; BSR set to: 1
  6095  003FB0  EE20 F012          	lfsr	2,18
  6096  003FB4  5183               	movf	follow_path@dp& (0+255),w,b
  6097  003FB6  26D9               	addwf	fsr2l,f,c
  6098  003FB8  5184               	movf	(follow_path@dp+1)& (0+255),w,b
  6099  003FBA  22DA               	addwfc	fsr2h,f,c
  6100  003FBC  CFDE F187          	movff	postinc2,follow_path@dir
  6101  003FC0  CFDD F188          	movff	postdec2,follow_path@dir+1
  6102                           
  6103                           ;ff.c: 2096: if (!(dir[11] & 0x10)) {
  6104  003FC4  EE20 F00B          	lfsr	2,11
  6105  003FC8  5187               	movf	follow_path@dir& (0+255),w,b
  6106  003FCA  26D9               	addwf	fsr2l,f,c
  6107  003FCC  5188               	movf	(follow_path@dir+1)& (0+255),w,b
  6108  003FCE  22DA               	addwfc	fsr2h,f,c
  6109  003FD0  B8DF               	btfsc	indf2,4,c
  6110  003FD2  D002               	goto	l1327
  6111  003FD4                     u16580:
  6112                           
  6113                           ; BSR set to: 1
  6114                           ;ff.c: 2097: res = FR_NO_PATH; break;
  6115  003FD4  0E05               	movlw	5
  6116  003FD6  D7E8               	goto	L6
  6117  003FD8                     l1327:
  6118                           
  6119                           ; BSR set to: 1
  6120                           ;ff.c: 2098: }
  6121                           ;ff.c: 2099: dp->sclust = ld_clust(dp->fs, dir);
  6122                           
  6123                           ; BSR set to: 1
  6124  003FD8  C183  FFD9         	movff	follow_path@dp,fsr2l
  6125  003FDC  C184  FFDA         	movff	follow_path@dp+1,fsr2h
  6126  003FE0  CFDE F01A          	movff	postinc2,ld_clust@fs
  6127  003FE4  CFDD F01B          	movff	postdec2,ld_clust@fs+1
  6128  003FE8  C187  F01C         	movff	follow_path@dir,ld_clust@dir
  6129  003FEC  C188  F01D         	movff	follow_path@dir+1,ld_clust@dir+1
  6130  003FF0  ECD9  F029         	call	_ld_clust	;wreg free
  6131  003FF4  0101               	movlb	1	; () banked
  6132  003FF6  EE20 F006          	lfsr	2,6
  6133  003FFA  5183               	movf	follow_path@dp& (0+255),w,b
  6134  003FFC  26D9               	addwf	fsr2l,f,c
  6135  003FFE  5184               	movf	(follow_path@dp+1)& (0+255),w,b
  6136  004000  22DA               	addwfc	fsr2h,f,c
  6137  004002  C01A  FFDE         	movff	?_ld_clust,postinc2
  6138  004006  C01B  FFDE         	movff	?_ld_clust+1,postinc2
  6139  00400A  C01C  FFDE         	movff	?_ld_clust+2,postinc2
  6140  00400E  C01D  FFDE         	movff	?_ld_clust+3,postinc2
  6141                           
  6142                           ; BSR set to: 1
  6143                           ;ff.c: 2100: }
  6144  004012  D79C               	goto	l1314
  6145  004014                     l1318:
  6146                           
  6147                           ; BSR set to: 1
  6148                           ;ff.c: 2101: }
  6149                           ;ff.c: 2103: return res;
  6150                           
  6151                           ; BSR set to: 1
  6152                           
  6153                           ; BSR set to: 1
  6154  004014  518A               	movf	follow_path@res& (0+255),w,b
  6155  004016  0012               	return	
  6156  004018                     __end_of_follow_path:
  6157                           	opt stack 0
  6158                           tosu	equ	0xFFF
  6159                           tosh	equ	0xFFE
  6160                           tosl	equ	0xFFD
  6161                           pclath	equ	0xFFA
  6162                           tblptru	equ	0xFF8
  6163                           tblptrh	equ	0xFF7
  6164                           tblptrl	equ	0xFF6
  6165                           tablat	equ	0xFF5
  6166                           prodh	equ	0xFF4
  6167                           prodl	equ	0xFF3
  6168                           intcon	equ	0xFF2
  6169                           intcon2	equ	0xFF1
  6170                           intcon3	equ	0xFF0
  6171                           postinc0	equ	0xFEE
  6172                           fsr0h	equ	0xFEA
  6173                           fsr0l	equ	0xFE9
  6174                           wreg	equ	0xFE8
  6175                           indf1	equ	0xFE7
  6176                           postinc1	equ	0xFE6
  6177                           postdec1	equ	0xFE5
  6178                           fsr1h	equ	0xFE2
  6179                           fsr1l	equ	0xFE1
  6180                           indf2	equ	0xFDF
  6181                           postinc2	equ	0xFDE
  6182                           postdec2	equ	0xFDD
  6183                           plusw2	equ	0xFDB
  6184                           fsr2h	equ	0xFDA
  6185                           fsr2l	equ	0xFD9
  6186                           status	equ	0xFD8
  6187                           
  6188 ;; *************** function _ld_clust *****************
  6189 ;; Defined at:
  6190 ;;		line 1235 in file "bibliotecas/ff.c"
  6191 ;; Parameters:    Size  Location     Type
  6192 ;;  fs              2   25[COMRAM] PTR struct .
  6193 ;;		 -> NULL(0), fs(558), 
  6194 ;;  dir             2   27[COMRAM] PTR const unsigned char 
  6195 ;;		 -> NULL(0), fs(558), 
  6196 ;; Auto vars:     Size  Location     Type
  6197 ;;  cl              4   35[COMRAM] unsigned long 
  6198 ;; Return value:  Size  Location     Type
  6199 ;;                  4   25[COMRAM] unsigned long 
  6200 ;; Registers used:
  6201 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6202 ;; Tracked objects:
  6203 ;;		On entry : 0/0
  6204 ;;		On exit  : 0/0
  6205 ;;		Unchanged: 0/0
  6206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6207 ;;      Params:         4       0       0       0       0       0       0       0       0
  6208 ;;      Locals:         4       0       0       0       0       0       0       0       0
  6209 ;;      Temps:          6       0       0       0       0       0       0       0       0
  6210 ;;      Totals:        14       0       0       0       0       0       0       0       0
  6211 ;;Total ram usage:       14 bytes
  6212 ;; Hardware stack levels used:    1
  6213 ;; Hardware stack levels required when called:    2
  6214 ;; This function calls:
  6215 ;;		Nothing
  6216 ;; This function is called by:
  6217 ;;		_follow_path
  6218 ;;		_f_open
  6219 ;; This function uses a non-reentrant model
  6220 ;;
  6221                           
  6222                           	psect	text19
  6223  0053B2                     __ptext19:
  6224                           	opt stack 0
  6225  0053B2                     _ld_clust:
  6226                           	opt stack 25
  6227                           
  6228                           ;ff.c: 1240: DWORD cl;
  6229                           ;ff.c: 1242: cl = (WORD)(*(WORD*)(BYTE*)(dir + 26));
  6230                           
  6231                           ; BSR set to: 1
  6232                           ;incstack = 0
  6233  0053B2  0E1A               	movlw	26
  6234  0053B4  241C               	addwf	ld_clust@dir,w,c
  6235  0053B6  6ED9               	movwf	fsr2l,c
  6236  0053B8  0E00               	movlw	0
  6237  0053BA  201D               	addwfc	ld_clust@dir+1,w,c
  6238  0053BC  6EDA               	movwf	fsr2h,c
  6239  0053BE  CFDE F01E          	movff	postinc2,??_ld_clust
  6240  0053C2  CFDD F01F          	movff	postdec2,??_ld_clust+1
  6241  0053C6  C01E  F024         	movff	??_ld_clust,ld_clust@cl
  6242  0053CA  C01F  F025         	movff	??_ld_clust+1,ld_clust@cl+1
  6243  0053CE  6A26               	clrf	ld_clust@cl+2,c
  6244  0053D0  6A27               	clrf	ld_clust@cl+3,c
  6245                           
  6246                           ;ff.c: 1243: if (fs->fs_type == 3)
  6247  0053D2  C01A  FFD9         	movff	ld_clust@fs,fsr2l
  6248  0053D6  C01B  FFDA         	movff	ld_clust@fs+1,fsr2h
  6249  0053DA  0E03               	movlw	3
  6250  0053DC  18DE               	xorwf	postinc2,w,c
  6251  0053DE  A4D8               	btfss	status,2,c
  6252  0053E0  D01E               	goto	l1245
  6253                           
  6254                           ;ff.c: 1244: cl |= (DWORD)(WORD)(*(WORD*)(BYTE*)(dir + 20)) << 16;
  6255  0053E2  0E14               	movlw	20
  6256  0053E4  241C               	addwf	ld_clust@dir,w,c
  6257  0053E6  6ED9               	movwf	fsr2l,c
  6258  0053E8  0E00               	movlw	0
  6259  0053EA  201D               	addwfc	ld_clust@dir+1,w,c
  6260  0053EC  6EDA               	movwf	fsr2h,c
  6261  0053EE  CFDE F01E          	movff	postinc2,??_ld_clust
  6262  0053F2  CFDD F01F          	movff	postdec2,??_ld_clust+1
  6263  0053F6  501E               	movf	??_ld_clust,w,c
  6264  0053F8  6E20               	movwf	(??_ld_clust+2)& (0+255),c
  6265  0053FA  501F               	movf	??_ld_clust+1,w,c
  6266  0053FC  6E21               	movwf	(??_ld_clust+3)& (0+255),c
  6267  0053FE  6A22               	clrf	(??_ld_clust+4)& (0+255),c
  6268  005400  6A23               	clrf	(??_ld_clust+5)& (0+255),c
  6269  005402  C021  F023         	movff	??_ld_clust+3,??_ld_clust+5
  6270  005406  C020  F022         	movff	??_ld_clust+2,??_ld_clust+4
  6271  00540A  6A21               	clrf	??_ld_clust+3,c
  6272  00540C  6A20               	clrf	??_ld_clust+2,c
  6273  00540E  5020               	movf	??_ld_clust+2,w,c
  6274  005410  1224               	iorwf	ld_clust@cl,f,c
  6275  005412  5021               	movf	??_ld_clust+3,w,c
  6276  005414  1225               	iorwf	ld_clust@cl+1,f,c
  6277  005416  5022               	movf	??_ld_clust+4,w,c
  6278  005418  1226               	iorwf	ld_clust@cl+2,f,c
  6279  00541A  5023               	movf	??_ld_clust+5,w,c
  6280  00541C  1227               	iorwf	ld_clust@cl+3,f,c
  6281  00541E                     l1245:
  6282                           
  6283                           ;ff.c: 1246: return cl;
  6284  00541E  C024  F01A         	movff	ld_clust@cl,?_ld_clust
  6285  005422  C025  F01B         	movff	ld_clust@cl+1,?_ld_clust+1
  6286  005426  C026  F01C         	movff	ld_clust@cl+2,?_ld_clust+2
  6287  00542A  C027  F01D         	movff	ld_clust@cl+3,?_ld_clust+3
  6288  00542E  0012               	return	
  6289  005430                     __end_of_ld_clust:
  6290                           	opt stack 0
  6291                           tosu	equ	0xFFF
  6292                           tosh	equ	0xFFE
  6293                           tosl	equ	0xFFD
  6294                           pclath	equ	0xFFA
  6295                           tblptru	equ	0xFF8
  6296                           tblptrh	equ	0xFF7
  6297                           tblptrl	equ	0xFF6
  6298                           tablat	equ	0xFF5
  6299                           prodh	equ	0xFF4
  6300                           prodl	equ	0xFF3
  6301                           intcon	equ	0xFF2
  6302                           intcon2	equ	0xFF1
  6303                           intcon3	equ	0xFF0
  6304                           postinc0	equ	0xFEE
  6305                           fsr0h	equ	0xFEA
  6306                           fsr0l	equ	0xFE9
  6307                           wreg	equ	0xFE8
  6308                           indf1	equ	0xFE7
  6309                           postinc1	equ	0xFE6
  6310                           postdec1	equ	0xFE5
  6311                           fsr1h	equ	0xFE2
  6312                           fsr1l	equ	0xFE1
  6313                           indf2	equ	0xFDF
  6314                           postinc2	equ	0xFDE
  6315                           postdec2	equ	0xFDD
  6316                           plusw2	equ	0xFDB
  6317                           fsr2h	equ	0xFDA
  6318                           fsr2l	equ	0xFD9
  6319                           status	equ	0xFD8
  6320                           
  6321 ;; *************** function _dir_find *****************
  6322 ;; Defined at:
  6323 ;;		line 1458 in file "bibliotecas/ff.c"
  6324 ;; Parameters:    Size  Location     Type
  6325 ;;  dp              2  138[BANK0 ] PTR struct .
  6326 ;;		 -> f_open@dj(22), 
  6327 ;; Auto vars:     Size  Location     Type
  6328 ;;  dir             2    1[BANK1 ] PTR unsigned char 
  6329 ;;		 -> NULL(0), fs(558), 
  6330 ;;  res             1    3[BANK1 ] enum E75
  6331 ;;  c               1    0[BANK1 ] unsigned char 
  6332 ;; Return value:  Size  Location     Type
  6333 ;;                  1    wreg      enum E75
  6334 ;; Registers used:
  6335 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6336 ;; Tracked objects:
  6337 ;;		On entry : 0/0
  6338 ;;		On exit  : 0/0
  6339 ;;		Unchanged: 0/0
  6340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6341 ;;      Params:         0       2       0       0       0       0       0       0       0
  6342 ;;      Locals:         0       0       4       0       0       0       0       0       0
  6343 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6344 ;;      Totals:         0       2       4       0       0       0       0       0       0
  6345 ;;Total ram usage:        6 bytes
  6346 ;; Hardware stack levels used:    1
  6347 ;; Hardware stack levels required when called:   14
  6348 ;; This function calls:
  6349 ;;		_dir_next
  6350 ;;		_dir_sdi
  6351 ;;		_mem_cmp
  6352 ;;		_move_window
  6353 ;; This function is called by:
  6354 ;;		_follow_path
  6355 ;; This function uses a non-reentrant model
  6356 ;;
  6357                           
  6358                           	psect	text20
  6359  0046E6                     __ptext20:
  6360                           	opt stack 0
  6361  0046E6                     _dir_find:
  6362                           	opt stack 12
  6363                           
  6364                           ;ff.c: 1462: FRESULT res;
  6365                           ;ff.c: 1463: BYTE c, *dir;
  6366                           ;ff.c: 1468: res = dir_sdi(dp, 0);
  6367                           
  6368                           ;incstack = 0
  6369  0046E6  C0EA  F0BF         	movff	dir_find@dp,dir_sdi@dp
  6370  0046EA  C0EB  F0C0         	movff	dir_find@dp+1,dir_sdi@dp+1
  6371  0046EE  0E00               	movlw	0
  6372  0046F0  0100               	movlb	0	; () banked
  6373  0046F2  6FC2               	movwf	(dir_sdi@idx+1)& (0+255),b
  6374  0046F4  0E00               	movlw	0
  6375  0046F6  6FC1               	movwf	dir_sdi@idx& (0+255),b
  6376  0046F8  EC8B  F018         	call	_dir_sdi	;wreg free
  6377  0046FC  0101               	movlb	1	; () banked
  6378  0046FE  6F82               	movwf	dir_find@res& (0+255),b
  6379                           
  6380                           ; BSR set to: 1
  6381                           ;ff.c: 1469: if (res != FR_OK) return res;
  6382  004700  5182               	movf	dir_find@res& (0+255),w,b
  6383  004702  B4D8               	btfsc	status,2,c
  6384  004704  D002               	goto	l1252
  6385                           
  6386                           ; BSR set to: 1
  6387  004706  5182               	movf	dir_find@res& (0+255),w,b
  6388                           
  6389                           ; BSR set to: 1
  6390  004708  0012               	return	
  6391  00470A                     l1252:
  6392                           
  6393                           ; BSR set to: 1
  6394                           ;ff.c: 1475: res = move_window(dp->fs, dp->sect);
  6395                           
  6396                           ; BSR set to: 1
  6397                           
  6398                           ;ff.c: 1474: do {
  6399                           
  6400                           ; BSR set to: 1
  6401  00470A  C0EA  FFD9         	movff	dir_find@dp,fsr2l
  6402  00470E  C0EB  FFDA         	movff	dir_find@dp+1,fsr2h
  6403  004712  CFDE F09A          	movff	postinc2,move_window@fs
  6404  004716  CFDD F09B          	movff	postdec2,move_window@fs+1
  6405  00471A  0100               	movlb	0	; () banked
  6406  00471C  EE20 F00E          	lfsr	2,14
  6407  004720  51EA               	movf	dir_find@dp& (0+255),w,b
  6408  004722  26D9               	addwf	fsr2l,f,c
  6409  004724  51EB               	movf	(dir_find@dp+1)& (0+255),w,b
  6410  004726  22DA               	addwfc	fsr2h,f,c
  6411  004728  CFDE F09C          	movff	postinc2,move_window@sector
  6412  00472C  CFDE F09D          	movff	postinc2,move_window@sector+1
  6413  004730  CFDE F09E          	movff	postinc2,move_window@sector+2
  6414  004734  CFDE F09F          	movff	postinc2,move_window@sector+3
  6415  004738  EC0A  F027         	call	_move_window	;wreg free
  6416  00473C  0101               	movlb	1	; () banked
  6417  00473E  6F82               	movwf	dir_find@res& (0+255),b
  6418                           
  6419                           ; BSR set to: 1
  6420                           ;ff.c: 1476: if (res != FR_OK) break;
  6421  004740  5182               	movf	dir_find@res& (0+255),w,b
  6422  004742  A4D8               	btfss	status,2,c
  6423  004744  D049               	goto	u15880
  6424                           
  6425                           ; BSR set to: 1
  6426                           ;ff.c: 1477: dir = dp->dir;
  6427                           
  6428                           ; BSR set to: 1
  6429                           
  6430                           ; BSR set to: 1
  6431  004746  0100               	movlb	0	; () banked
  6432  004748  EE20 F012          	lfsr	2,18
  6433  00474C  51EA               	movf	dir_find@dp& (0+255),w,b
  6434  00474E  26D9               	addwf	fsr2l,f,c
  6435  004750  51EB               	movf	(dir_find@dp+1)& (0+255),w,b
  6436  004752  22DA               	addwfc	fsr2h,f,c
  6437  004754  CFDE F180          	movff	postinc2,dir_find@dir
  6438  004758  CFDD F181          	movff	postdec2,dir_find@dir+1
  6439                           
  6440                           ; BSR set to: 0
  6441                           ;ff.c: 1478: c = dir[0];
  6442  00475C  C180  FFD9         	movff	dir_find@dir,fsr2l
  6443  004760  C181  FFDA         	movff	dir_find@dir+1,fsr2h
  6444  004764  50DF               	movf	indf2,w,c
  6445  004766  0101               	movlb	1	; () banked
  6446  004768  6F7F               	movwf	dir_find@c& (0+255),b
  6447                           
  6448                           ; BSR set to: 1
  6449                           ;ff.c: 1479: if (c == 0) { res = FR_NO_FILE; break; }
  6450  00476A  517F               	movf	dir_find@c& (0+255),w,b
  6451  00476C  A4D8               	btfss	status,2,c
  6452  00476E  D003               	goto	l1257
  6453                           
  6454                           ; BSR set to: 1
  6455  004770  0E04               	movlw	4
  6456  004772  6F82               	movwf	dir_find@res& (0+255),b
  6457  004774  D031               	goto	u15880
  6458  004776                     l1257:
  6459                           
  6460                           ; BSR set to: 1
  6461                           ;ff.c: 1502: if (!(dir[11] & 0x08) && !mem_cmp(dir, dp->fn, 11))
  6462                           
  6463                           ; BSR set to: 1
  6464  004776  EE20 F00B          	lfsr	2,11
  6465  00477A  5180               	movf	dir_find@dir& (0+255),w,b
  6466  00477C  26D9               	addwf	fsr2l,f,c
  6467  00477E  5181               	movf	(dir_find@dir+1)& (0+255),w,b
  6468  004780  22DA               	addwfc	fsr2h,f,c
  6469  004782  B6DF               	btfsc	indf2,3,c
  6470  004784  D019               	goto	l1258
  6471                           
  6472                           ; BSR set to: 1
  6473  004786  C180  F01A         	movff	dir_find@dir,mem_cmp@dst
  6474  00478A  C181  F01B         	movff	dir_find@dir+1,mem_cmp@dst+1
  6475  00478E  0100               	movlb	0	; () banked
  6476  004790  EE20 F014          	lfsr	2,20
  6477  004794  51EA               	movf	dir_find@dp& (0+255),w,b
  6478  004796  26D9               	addwf	fsr2l,f,c
  6479  004798  51EB               	movf	(dir_find@dp+1)& (0+255),w,b
  6480  00479A  22DA               	addwfc	fsr2h,f,c
  6481  00479C  CFDE F01C          	movff	postinc2,mem_cmp@src
  6482  0047A0  CFDD F01D          	movff	postdec2,mem_cmp@src+1
  6483  0047A4  0E00               	movlw	0
  6484  0047A6  6E1F               	movwf	mem_cmp@cnt+1,c
  6485  0047A8  0E0B               	movlw	11
  6486  0047AA  6E1E               	movwf	mem_cmp@cnt,c
  6487  0047AC  EC51  F02A         	call	_mem_cmp	;wreg free
  6488  0047B0  501A               	movf	?_mem_cmp,w,c
  6489  0047B2  101B               	iorwf	?_mem_cmp+1,w,c
  6490  0047B4  B4D8               	btfsc	status,2,c
  6491  0047B6  D010               	goto	u15880
  6492  0047B8                     l1258:
  6493                           
  6494                           ;ff.c: 1505: res = dir_next(dp, 0);
  6495  0047B8  C0EA  F0D7         	movff	dir_find@dp,dir_next@dp
  6496  0047BC  C0EB  F0D8         	movff	dir_find@dp+1,dir_next@dp+1
  6497  0047C0  0E00               	movlw	0
  6498  0047C2  0100               	movlb	0	; () banked
  6499  0047C4  6FDA               	movwf	(dir_next@stretch+1)& (0+255),b
  6500  0047C6  0E00               	movlw	0
  6501  0047C8  6FD9               	movwf	dir_next@stretch& (0+255),b
  6502  0047CA  EC2B  F00F         	call	_dir_next	;wreg free
  6503  0047CE  0101               	movlb	1	; () banked
  6504  0047D0  6F82               	movwf	dir_find@res& (0+255),b
  6505                           
  6506                           ; BSR set to: 1
  6507                           ;ff.c: 1506: } while (res == FR_OK);
  6508  0047D2  5182               	movf	dir_find@res& (0+255),w,b
  6509  0047D4  B4D8               	btfsc	status,2,c
  6510  0047D6  D799               	goto	l1252
  6511  0047D8                     u15880:
  6512                           
  6513                           ;ff.c: 1508: return res;
  6514                           
  6515                           ; BSR set to: 1
  6516  0047D8  0101               	movlb	1	; () banked
  6517  0047DA  5182               	movf	dir_find@res& (0+255),w,b
  6518  0047DC  0012               	return	
  6519  0047DE                     __end_of_dir_find:
  6520                           	opt stack 0
  6521                           tosu	equ	0xFFF
  6522                           tosh	equ	0xFFE
  6523                           tosl	equ	0xFFD
  6524                           pclath	equ	0xFFA
  6525                           tblptru	equ	0xFF8
  6526                           tblptrh	equ	0xFF7
  6527                           tblptrl	equ	0xFF6
  6528                           tablat	equ	0xFF5
  6529                           prodh	equ	0xFF4
  6530                           prodl	equ	0xFF3
  6531                           intcon	equ	0xFF2
  6532                           intcon2	equ	0xFF1
  6533                           intcon3	equ	0xFF0
  6534                           postinc0	equ	0xFEE
  6535                           fsr0h	equ	0xFEA
  6536                           fsr0l	equ	0xFE9
  6537                           wreg	equ	0xFE8
  6538                           indf1	equ	0xFE7
  6539                           postinc1	equ	0xFE6
  6540                           postdec1	equ	0xFE5
  6541                           fsr1h	equ	0xFE2
  6542                           fsr1l	equ	0xFE1
  6543                           indf2	equ	0xFDF
  6544                           postinc2	equ	0xFDE
  6545                           postdec2	equ	0xFDD
  6546                           plusw2	equ	0xFDB
  6547                           fsr2h	equ	0xFDA
  6548                           fsr2l	equ	0xFD9
  6549                           status	equ	0xFD8
  6550                           
  6551 ;; *************** function _mem_cmp *****************
  6552 ;; Defined at:
  6553 ;;		line 533 in file "bibliotecas/ff.c"
  6554 ;; Parameters:    Size  Location     Type
  6555 ;;  dst             2   25[COMRAM] PTR const void 
  6556 ;;		 -> NULL(0), fs(558), 
  6557 ;;  src             2   27[COMRAM] PTR const void 
  6558 ;;		 -> f_open@sfn(12), 
  6559 ;;  cnt             2   29[COMRAM] unsigned int 
  6560 ;; Auto vars:     Size  Location     Type
  6561 ;;  r               2   38[COMRAM] int 
  6562 ;;  s               2   36[COMRAM] PTR const unsigned char 
  6563 ;;		 -> f_open@sfn(12), 
  6564 ;;  d               2   34[COMRAM] PTR const unsigned char 
  6565 ;;		 -> NULL(0), fs(558), 
  6566 ;; Return value:  Size  Location     Type
  6567 ;;                  2   25[COMRAM] int 
  6568 ;; Registers used:
  6569 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6570 ;; Tracked objects:
  6571 ;;		On entry : 0/0
  6572 ;;		On exit  : 0/0
  6573 ;;		Unchanged: 0/0
  6574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6575 ;;      Params:         6       0       0       0       0       0       0       0       0
  6576 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6577 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6578 ;;      Totals:        15       0       0       0       0       0       0       0       0
  6579 ;;Total ram usage:       15 bytes
  6580 ;; Hardware stack levels used:    1
  6581 ;; Hardware stack levels required when called:    2
  6582 ;; This function calls:
  6583 ;;		Nothing
  6584 ;; This function is called by:
  6585 ;;		_dir_find
  6586 ;; This function uses a non-reentrant model
  6587 ;;
  6588                           
  6589                           	psect	text21
  6590  0054A2                     __ptext21:
  6591                           	opt stack 0
  6592  0054A2                     _mem_cmp:
  6593                           	opt stack 23
  6594                           
  6595                           ;ff.c: 534: const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
  6596                           
  6597                           ; BSR set to: 1
  6598                           ;incstack = 0
  6599  0054A2  C01A  F023         	movff	mem_cmp@dst,mem_cmp@d
  6600  0054A6  C01B  F024         	movff	mem_cmp@dst+1,mem_cmp@d+1
  6601  0054AA  C01C  F025         	movff	mem_cmp@src,mem_cmp@s
  6602  0054AE  C01D  F026         	movff	mem_cmp@src+1,mem_cmp@s+1
  6603                           
  6604                           ;ff.c: 535: int r = 0;
  6605  0054B2  0E00               	movlw	0
  6606  0054B4  6E28               	movwf	mem_cmp@r+1,c
  6607  0054B6  0E00               	movlw	0
  6608  0054B8  6E27               	movwf	mem_cmp@r,c
  6609  0054BA  061E               	decf	mem_cmp@cnt,f,c
  6610  0054BC  A0D8               	btfss	status,0,c
  6611  0054BE  061F               	decf	mem_cmp@cnt+1,f,c
  6612  0054C0  281E               	incf	mem_cmp@cnt,w,c
  6613  0054C2  E103               	bnz	u15110
  6614  0054C4  281F               	incf	mem_cmp@cnt+1,w,c
  6615  0054C6  B4D8               	btfsc	status,2,c
  6616  0054C8  D01F               	goto	u15120
  6617  0054CA                     u15110:
  6618  0054CA  C025  FFD9         	movff	mem_cmp@s,fsr2l
  6619  0054CE  C026  FFDA         	movff	mem_cmp@s+1,fsr2h
  6620  0054D2  4A25               	infsnz	mem_cmp@s,f,c
  6621  0054D4  2A26               	incf	mem_cmp@s+1,f,c
  6622  0054D6  50DF               	movf	indf2,w,c
  6623  0054D8  6E20               	movwf	??_mem_cmp& (0+255),c
  6624  0054DA  6A21               	clrf	(??_mem_cmp+1)& (0+255),c
  6625  0054DC  1E20               	comf	??_mem_cmp,f,c
  6626  0054DE  1E21               	comf	??_mem_cmp+1,f,c
  6627  0054E0  4A20               	infsnz	??_mem_cmp,f,c
  6628  0054E2  2A21               	incf	??_mem_cmp+1,f,c
  6629  0054E4  C023  FFD9         	movff	mem_cmp@d,fsr2l
  6630  0054E8  C024  FFDA         	movff	mem_cmp@d+1,fsr2h
  6631  0054EC  4A23               	infsnz	mem_cmp@d,f,c
  6632  0054EE  2A24               	incf	mem_cmp@d+1,f,c
  6633  0054F0  50DF               	movf	indf2,w,c
  6634  0054F2  6E22               	movwf	(??_mem_cmp+2)& (0+255),c
  6635  0054F4  5022               	movf	??_mem_cmp+2,w,c
  6636  0054F6  2420               	addwf	??_mem_cmp,w,c
  6637  0054F8  6E27               	movwf	mem_cmp@r,c
  6638  0054FA  0E00               	movlw	0
  6639  0054FC  2021               	addwfc	??_mem_cmp+1,w,c
  6640  0054FE  6E28               	movwf	mem_cmp@r+1,c
  6641  005500  5027               	movf	mem_cmp@r,w,c
  6642  005502  1028               	iorwf	mem_cmp@r+1,w,c
  6643  005504  B4D8               	btfsc	status,2,c
  6644  005506  D7D9               	goto	l1062
  6645  005508                     u15120:
  6646                           
  6647                           ;ff.c: 538: return r;
  6648  005508  C027  F01A         	movff	mem_cmp@r,?_mem_cmp
  6649  00550C  C028  F01B         	movff	mem_cmp@r+1,?_mem_cmp+1
  6650  005510  0012               	return		;funcret
  6651  005512                     __end_of_mem_cmp:
  6652                           	opt stack 0
  6653                           tosu	equ	0xFFF
  6654                           tosh	equ	0xFFE
  6655                           tosl	equ	0xFFD
  6656                           pclath	equ	0xFFA
  6657                           tblptru	equ	0xFF8
  6658                           tblptrh	equ	0xFF7
  6659                           tblptrl	equ	0xFF6
  6660                           tablat	equ	0xFF5
  6661                           prodh	equ	0xFF4
  6662                           prodl	equ	0xFF3
  6663                           intcon	equ	0xFF2
  6664                           intcon2	equ	0xFF1
  6665                           intcon3	equ	0xFF0
  6666                           postinc0	equ	0xFEE
  6667                           fsr0h	equ	0xFEA
  6668                           fsr0l	equ	0xFE9
  6669                           wreg	equ	0xFE8
  6670                           indf1	equ	0xFE7
  6671                           postinc1	equ	0xFE6
  6672                           postdec1	equ	0xFE5
  6673                           fsr1h	equ	0xFE2
  6674                           fsr1l	equ	0xFE1
  6675                           indf2	equ	0xFDF
  6676                           postinc2	equ	0xFDE
  6677                           postdec2	equ	0xFDD
  6678                           plusw2	equ	0xFDB
  6679                           fsr2h	equ	0xFDA
  6680                           fsr2l	equ	0xFD9
  6681                           status	equ	0xFD8
  6682                           
  6683 ;; *************** function _create_name *****************
  6684 ;; Defined at:
  6685 ;;		line 1843 in file "bibliotecas/ff.c"
  6686 ;; Parameters:    Size  Location     Type
  6687 ;;  dp              2   33[COMRAM] PTR struct .
  6688 ;;		 -> f_open@dj(22), 
  6689 ;;  path            2   35[COMRAM] PTR PTR const unsigned c
  6690 ;;		 -> follow_path@path(2), 
  6691 ;; Auto vars:     Size  Location     Type
  6692 ;;  i               2   12[BANK0 ] unsigned int 
  6693 ;;  sfn             2   10[BANK0 ] PTR unsigned char 
  6694 ;;		 -> f_open@sfn(12), 
  6695 ;;  p               2    8[BANK0 ] PTR const unsigned char 
  6696 ;;		 -> STR_11(10), STR_9(1), 
  6697 ;;  ni              2    5[BANK0 ] unsigned int 
  6698 ;;  si              2    2[BANK0 ] unsigned int 
  6699 ;;  c               1   14[BANK0 ] unsigned char 
  6700 ;;  d               1    7[BANK0 ] unsigned char 
  6701 ;;  b               1    4[BANK0 ] unsigned char 
  6702 ;; Return value:  Size  Location     Type
  6703 ;;                  1    wreg      enum E75
  6704 ;; Registers used:
  6705 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6706 ;; Tracked objects:
  6707 ;;		On entry : 0/0
  6708 ;;		On exit  : 0/0
  6709 ;;		Unchanged: 0/0
  6710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6711 ;;      Params:         4       0       0       0       0       0       0       0       0
  6712 ;;      Locals:         0      15       0       0       0       0       0       0       0
  6713 ;;      Temps:          4       0       0       0       0       0       0       0       0
  6714 ;;      Totals:         8      15       0       0       0       0       0       0       0
  6715 ;;Total ram usage:       23 bytes
  6716 ;; Hardware stack levels used:    1
  6717 ;; Hardware stack levels required when called:    3
  6718 ;; This function calls:
  6719 ;;		_chk_chr
  6720 ;;		_mem_set
  6721 ;; This function is called by:
  6722 ;;		_follow_path
  6723 ;; This function uses a non-reentrant model
  6724 ;;
  6725                           
  6726                           	psect	text22
  6727  0033E4                     __ptext22:
  6728                           	opt stack 0
  6729  0033E4                     _create_name:
  6730                           	opt stack 23
  6731                           
  6732                           ;ff.c: 1969: BYTE b, c, d, *sfn;
  6733                           ;ff.c: 1970: UINT ni, si, i;
  6734                           ;ff.c: 1971: const char *p;
  6735                           ;ff.c: 1974: for (p = *path; *p == '/' || *p == '\\'; p++) ;
  6736                           
  6737                           ;incstack = 0
  6738  0033E4  C024  FFD9         	movff	create_name@path,fsr2l
  6739  0033E8  C025  FFDA         	movff	create_name@path+1,fsr2h
  6740  0033EC  CFDE F068          	movff	postinc2,create_name@p
  6741  0033F0  CFDD F069          	movff	postdec2,create_name@p+1
  6742  0033F4  D003               	goto	l1266
  6743  0033F6  0100               	movlb	0	; () banked
  6744  0033F8  4B68               	infsnz	create_name@p& (0+255),f,b
  6745  0033FA  2B69               	incf	(create_name@p+1)& (0+255),f,b
  6746  0033FC                     l1266:
  6747                           
  6748                           ; BSR set to: 0
  6749  0033FC  C068  FFF6         	movff	create_name@p,tblptrl
  6750  003400  C069  FFF7         	movff	create_name@p+1,tblptrh
  6751  003404                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6752  003404  6AF8               	clrf	tblptru,c
  6753  003406                     	endif
  6754  003406                     	if	0	;tblptru may be non-zero
  6755  003406                     	endif
  6756  003406  0008               	tblrd		*
  6757  003408  50F5               	movf	tablat,w,c
  6758  00340A  0A2F               	xorlw	47
  6759  00340C  B4D8               	btfsc	status,2,c
  6760  00340E  D7F3               	goto	l1267
  6761  003410  C068  FFF6         	movff	create_name@p,tblptrl
  6762  003414  C069  FFF7         	movff	create_name@p+1,tblptrh
  6763  003418                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6764  003418  6AF8               	clrf	tblptru,c
  6765  00341A                     	endif
  6766  00341A                     	if	0	;tblptru may be non-zero
  6767  00341A                     	endif
  6768  00341A  0008               	tblrd		*
  6769  00341C  50F5               	movf	tablat,w,c
  6770  00341E  0A5C               	xorlw	92
  6771  003420  B4D8               	btfsc	status,2,c
  6772  003422  D7E9               	goto	l1267
  6773                           
  6774                           ;ff.c: 1975: sfn = dp->fn;
  6775  003424  EE20 F014          	lfsr	2,20
  6776  003428  5022               	movf	create_name@dp,w,c
  6777  00342A  26D9               	addwf	fsr2l,f,c
  6778  00342C  5023               	movf	create_name@dp+1,w,c
  6779  00342E  22DA               	addwfc	fsr2h,f,c
  6780  003430  CFDE F06A          	movff	postinc2,create_name@sfn
  6781  003434  CFDD F06B          	movff	postdec2,create_name@sfn+1
  6782                           
  6783                           ;ff.c: 1976: mem_set(sfn, ' ', 11);
  6784  003438  C06A  F01A         	movff	create_name@sfn,mem_set@dst
  6785  00343C  C06B  F01B         	movff	create_name@sfn+1,mem_set@dst+1
  6786  003440  0E00               	movlw	0
  6787  003442  6E1D               	movwf	mem_set@val+1,c
  6788  003444  0E20               	movlw	32
  6789  003446  6E1C               	movwf	mem_set@val,c
  6790  003448  0E00               	movlw	0
  6791  00344A  6E1F               	movwf	mem_set@cnt+1,c
  6792  00344C  0E0B               	movlw	11
  6793  00344E  6E1E               	movwf	mem_set@cnt,c
  6794  003450  ECFF  F02C         	call	_mem_set	;wreg free
  6795                           
  6796                           ;ff.c: 1977: si = i = b = 0; ni = 8;
  6797  003454  0E00               	movlw	0
  6798  003456  0100               	movlb	0	; () banked
  6799  003458  6F64               	movwf	create_name@b& (0+255),b
  6800  00345A  C064  F06C         	movff	create_name@b,create_name@i
  6801  00345E  6B6D               	clrf	(create_name@i+1)& (0+255),b
  6802  003460  C06C  F062         	movff	create_name@i,create_name@si
  6803  003464  C06D  F063         	movff	create_name@i+1,create_name@si+1
  6804                           
  6805                           ; BSR set to: 0
  6806  003468  0E00               	movlw	0
  6807  00346A  6F66               	movwf	(create_name@ni+1)& (0+255),b
  6808  00346C  0E08               	movlw	8
  6809  00346E  6F65               	movwf	create_name@ni& (0+255),b
  6810  003470                     
  6811                           ; BSR set to: 0
  6812                           ;ff.c: 1992: c = (BYTE)p[si++];
  6813                           
  6814                           ; BSR set to: 0
  6815  003470  5162               	movf	create_name@si& (0+255),w,b
  6816  003472  2568               	addwf	create_name@p& (0+255),w,b
  6817  003474  6E26               	movwf	??_create_name& (0+255),c
  6818  003476  5163               	movf	(create_name@si+1)& (0+255),w,b
  6819  003478  2169               	addwfc	(create_name@p+1)& (0+255),w,b
  6820  00347A  6E27               	movwf	(??_create_name+1)& (0+255),c
  6821  00347C  C026  FFF6         	movff	??_create_name,tblptrl
  6822  003480  C027  FFF7         	movff	??_create_name+1,tblptrh
  6823  003484                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6824  003484  6AF8               	clrf	tblptru,c
  6825  003486                     	endif
  6826  003486                     	if	0	;tblptru may be non-zero
  6827  003486                     	endif
  6828  003486  0008               	tblrd		*
  6829  003488  CFF5 F06E          	movff	tablat,create_name@c
  6830                           
  6831                           ; BSR set to: 0
  6832  00348C  4B62               	infsnz	create_name@si& (0+255),f,b
  6833  00348E  2B63               	incf	(create_name@si+1)& (0+255),f,b
  6834                           
  6835                           ; BSR set to: 0
  6836                           ;ff.c: 1993: if (c <= ' ' || c == '/' || c == '\\') break;
  6837  003490  0E20               	movlw	32
  6838  003492  656E               	cpfsgt	create_name@c& (0+255),b
  6839  003494  D0AA               	goto	l1273
  6840                           
  6841                           ; BSR set to: 0
  6842  003496  0E2F               	movlw	47
  6843  003498  196E               	xorwf	create_name@c& (0+255),w,b
  6844  00349A  B4D8               	btfsc	status,2,c
  6845  00349C  D0A6               	goto	l1273
  6846                           
  6847                           ; BSR set to: 0
  6848  00349E  0E5C               	movlw	92
  6849  0034A0  196E               	xorwf	create_name@c& (0+255),w,b
  6850  0034A2  B4D8               	btfsc	status,2,c
  6851  0034A4  D0A2               	goto	l1273
  6852                           
  6853                           ; BSR set to: 0
  6854                           ;ff.c: 1994: if (c == '.' || i >= ni) {
  6855                           
  6856                           ; BSR set to: 0
  6857                           
  6858                           ; BSR set to: 0
  6859  0034A6  0E2E               	movlw	46
  6860  0034A8  196E               	xorwf	create_name@c& (0+255),w,b
  6861  0034AA  B4D8               	btfsc	status,2,c
  6862  0034AC  D006               	goto	u15950
  6863                           
  6864                           ; BSR set to: 0
  6865  0034AE  5165               	movf	create_name@ni& (0+255),w,b
  6866  0034B0  5D6C               	subwf	create_name@i& (0+255),w,b
  6867  0034B2  5166               	movf	(create_name@ni+1)& (0+255),w,b
  6868  0034B4  596D               	subwfb	(create_name@i+1)& (0+255),w,b
  6869  0034B6  A0D8               	btfss	status,0,c
  6870  0034B8  D018               	goto	l1274
  6871  0034BA                     u15950:
  6872                           
  6873                           ; BSR set to: 0
  6874                           ;ff.c: 1995: if (ni != 8 || c != '.') return FR_INVALID_NAME;
  6875                           
  6876                           ; BSR set to: 0
  6877  0034BA  0E08               	movlw	8
  6878  0034BC  1965               	xorwf	create_name@ni& (0+255),w,b
  6879  0034BE  1166               	iorwf	(create_name@ni+1)& (0+255),w,b
  6880  0034C0  A4D8               	btfss	status,2,c
  6881  0034C2  D004               	goto	u15970
  6882                           
  6883                           ; BSR set to: 0
  6884  0034C4  0E2E               	movlw	46
  6885  0034C6  196E               	xorwf	create_name@c& (0+255),w,b
  6886  0034C8  B4D8               	btfsc	status,2,c
  6887  0034CA  D002               	goto	l1277
  6888  0034CC                     u15970:
  6889                           
  6890                           ; BSR set to: 0
  6891                           
  6892                           ; BSR set to: 0
  6893  0034CC  0E06               	movlw	6
  6894                           
  6895                           ; BSR set to: 0
  6896  0034CE  0012               	return	
  6897  0034D0                     l1277:
  6898                           
  6899                           ; BSR set to: 0
  6900                           ;ff.c: 1996: i = 8; ni = 11;
  6901                           
  6902                           ; BSR set to: 0
  6903  0034D0  0E00               	movlw	0
  6904  0034D2  6F6D               	movwf	(create_name@i+1)& (0+255),b
  6905  0034D4  0E08               	movlw	8
  6906  0034D6  6F6C               	movwf	create_name@i& (0+255),b
  6907  0034D8  0E00               	movlw	0
  6908  0034DA  6F66               	movwf	(create_name@ni+1)& (0+255),b
  6909  0034DC  0E0B               	movlw	11
  6910  0034DE  6F65               	movwf	create_name@ni& (0+255),b
  6911                           
  6912                           ; BSR set to: 0
  6913                           ;ff.c: 1997: b <<= 2; continue;
  6914  0034E0  90D8               	bcf	status,0,c
  6915  0034E2  3764               	rlcf	create_name@b& (0+255),f,b
  6916  0034E4  90D8               	bcf	status,0,c
  6917  0034E6  3764               	rlcf	create_name@b& (0+255),f,b
  6918  0034E8  D7C3               	goto	l1269
  6919  0034EA                     l1274:
  6920                           
  6921                           ; BSR set to: 0
  6922                           ;ff.c: 1998: }
  6923                           ;ff.c: 1999: if (c >= 0x80) {
  6924                           
  6925                           ; BSR set to: 0
  6926  0034EA  0E7F               	movlw	127
  6927  0034EC  656E               	cpfsgt	create_name@c& (0+255),b
  6928  0034EE  D002               	goto	l1282
  6929                           
  6930                           ; BSR set to: 0
  6931                           ;ff.c: 2000: b |= 3;
  6932  0034F0  0E03               	movlw	3
  6933  0034F2  1364               	iorwf	create_name@b& (0+255),f,b
  6934  0034F4                     l1282:
  6935                           
  6936                           ; BSR set to: 0
  6937                           ;ff.c: 2008: }
  6938                           ;ff.c: 2009: if ((((BYTE)(c) >= 0x81 && (BYTE)(c) <= 0x9F) || ((BYTE)(c) >= 0xE0 && (BYT
      +                          E)(c) <= 0xFC))) {
  6939  0034F4  0E80               	movlw	128
  6940  0034F6  656E               	cpfsgt	create_name@c& (0+255),b
  6941  0034F8  D003               	goto	u16000
  6942                           
  6943                           ; BSR set to: 0
  6944  0034FA  0E9F               	movlw	159
  6945  0034FC  656E               	cpfsgt	create_name@c& (0+255),b
  6946  0034FE  D006               	goto	u16020
  6947  003500                     u16000:
  6948                           
  6949                           ; BSR set to: 0
  6950                           
  6951                           ; BSR set to: 0
  6952  003500  0EDF               	movlw	223
  6953  003502  656E               	cpfsgt	create_name@c& (0+255),b
  6954  003504  D046               	goto	l1283
  6955                           
  6956                           ; BSR set to: 0
  6957  003506  0EFD               	movlw	253
  6958  003508  616E               	cpfslt	create_name@c& (0+255),b
  6959  00350A  D043               	goto	l1283
  6960  00350C                     u16020:
  6961                           
  6962                           ; BSR set to: 0
  6963                           ;ff.c: 2010: d = (BYTE)p[si++];
  6964                           
  6965                           ; BSR set to: 0
  6966  00350C  5162               	movf	create_name@si& (0+255),w,b
  6967  00350E  2568               	addwf	create_name@p& (0+255),w,b
  6968  003510  6E26               	movwf	??_create_name& (0+255),c
  6969  003512  5163               	movf	(create_name@si+1)& (0+255),w,b
  6970  003514  2169               	addwfc	(create_name@p+1)& (0+255),w,b
  6971  003516  6E27               	movwf	(??_create_name+1)& (0+255),c
  6972  003518  C026  FFF6         	movff	??_create_name,tblptrl
  6973  00351C  C027  FFF7         	movff	??_create_name+1,tblptrh
  6974  003520                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6975  003520  6AF8               	clrf	tblptru,c
  6976  003522                     	endif
  6977  003522                     	if	0	;tblptru may be non-zero
  6978  003522                     	endif
  6979  003522  0008               	tblrd		*
  6980  003524  CFF5 F067          	movff	tablat,create_name@d
  6981                           
  6982                           ; BSR set to: 0
  6983  003528  4B62               	infsnz	create_name@si& (0+255),f,b
  6984  00352A  2B63               	incf	(create_name@si+1)& (0+255),f,b
  6985                           
  6986                           ; BSR set to: 0
  6987                           ;ff.c: 2011: if (!(((BYTE)(d) >= 0x40 && (BYTE)(d) <= 0x7E) || ((BYTE)(d) >= 0x80 && (BY
      +                          TE)(d) <= 0xFC)) || i >= ni - 1)
  6988  00352C  0E3F               	movlw	63
  6989  00352E  6567               	cpfsgt	create_name@d& (0+255),b
  6990  003530  D003               	goto	u16040
  6991                           
  6992                           ; BSR set to: 0
  6993  003532  0E7E               	movlw	126
  6994  003534  6567               	cpfsgt	create_name@d& (0+255),b
  6995  003536  D006               	goto	u16060
  6996  003538                     u16040:
  6997                           
  6998                           ; BSR set to: 0
  6999                           
  7000                           ; BSR set to: 0
  7001  003538  0E7F               	movlw	127
  7002  00353A  6567               	cpfsgt	create_name@d& (0+255),b
  7003  00353C  D015               	goto	u16070
  7004                           
  7005                           ; BSR set to: 0
  7006  00353E  0EFD               	movlw	253
  7007  003540  6167               	cpfslt	create_name@d& (0+255),b
  7008  003542  D012               	goto	u16070
  7009  003544                     u16060:
  7010                           
  7011                           ; BSR set to: 0
  7012                           
  7013                           ; BSR set to: 0
  7014  003544  0EFF               	movlw	255
  7015  003546  6E26               	movwf	??_create_name& (0+255),c
  7016  003548  0EFF               	movlw	255
  7017  00354A  6E27               	movwf	(??_create_name+1)& (0+255),c
  7018  00354C  C065  F028         	movff	create_name@ni,??_create_name+2
  7019  003550  C066  F029         	movff	create_name@ni+1,??_create_name+3
  7020  003554  5026               	movf	??_create_name,w,c
  7021  003556  2628               	addwf	??_create_name+2,f,c
  7022  003558  5027               	movf	??_create_name+1,w,c
  7023  00355A  2229               	addwfc	??_create_name+3,f,c
  7024  00355C  5028               	movf	??_create_name+2,w,c
  7025  00355E  5D6C               	subwf	create_name@i& (0+255),w,b
  7026  003560  5029               	movf	??_create_name+3,w,c
  7027  003562  596D               	subwfb	(create_name@i+1)& (0+255),w,b
  7028  003564  A0D8               	btfss	status,0,c
  7029  003566  D002               	goto	l1288
  7030  003568                     u16070:
  7031                           
  7032                           ; BSR set to: 0
  7033                           ;ff.c: 2012: return FR_INVALID_NAME;
  7034                           
  7035                           ; BSR set to: 0
  7036  003568  0E06               	movlw	6
  7037                           
  7038                           ; BSR set to: 0
  7039  00356A  0012               	return	
  7040  00356C                     l1288:
  7041                           
  7042                           ; BSR set to: 0
  7043                           ;ff.c: 2013: sfn[i++] = c;
  7044                           
  7045                           ; BSR set to: 0
  7046  00356C  516C               	movf	create_name@i& (0+255),w,b
  7047  00356E  256A               	addwf	create_name@sfn& (0+255),w,b
  7048  003570  6ED9               	movwf	fsr2l,c
  7049  003572  516D               	movf	(create_name@i+1)& (0+255),w,b
  7050  003574  216B               	addwfc	(create_name@sfn+1)& (0+255),w,b
  7051  003576  6EDA               	movwf	fsr2h,c
  7052  003578  C06E  FFDF         	movff	create_name@c,indf2
  7053                           
  7054                           ; BSR set to: 0
  7055  00357C  4B6C               	infsnz	create_name@i& (0+255),f,b
  7056  00357E  2B6D               	incf	(create_name@i+1)& (0+255),f,b
  7057                           
  7058                           ; BSR set to: 0
  7059                           ;ff.c: 2014: sfn[i++] = d;
  7060  003580  516C               	movf	create_name@i& (0+255),w,b
  7061  003582  256A               	addwf	create_name@sfn& (0+255),w,b
  7062  003584  6ED9               	movwf	fsr2l,c
  7063  003586  516D               	movf	(create_name@i+1)& (0+255),w,b
  7064  003588  216B               	addwfc	(create_name@sfn+1)& (0+255),w,b
  7065  00358A  6EDA               	movwf	fsr2h,c
  7066  00358C  C067  FFDF         	movff	create_name@d,indf2
  7067  003590  D029               	goto	l11865
  7068  003592                     l1283:
  7069                           
  7070                           ; BSR set to: 0
  7071                           ;ff.c: 2016: if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))
  7072                           
  7073                           ; BSR set to: 0
  7074  003592  0E0A               	movlw	low STR_19
  7075  003594  6E1A               	movwf	chk_chr@str,c
  7076  003596  0E62               	movlw	high STR_19
  7077  003598  6E1B               	movwf	chk_chr@str+1,c
  7078  00359A  C06E  F01C         	movff	create_name@c,chk_chr@chr
  7079  00359E  6A1D               	clrf	chk_chr@chr+1,c
  7080  0035A0  ECA1  F02B         	call	_chk_chr	;wreg free
  7081  0035A4  501A               	movf	?_chk_chr,w,c
  7082  0035A6  101B               	iorwf	?_chk_chr+1,w,c
  7083  0035A8  B4D8               	btfsc	status,2,c
  7084  0035AA  D002               	goto	l1296
  7085                           
  7086                           ;ff.c: 2017: return FR_INVALID_NAME;
  7087  0035AC  0E06               	movlw	6
  7088  0035AE  0012               	return	
  7089  0035B0                     l1296:
  7090                           
  7091                           ;ff.c: 2018: if ((((c)>='A')&&((c)<='Z'))) {
  7092  0035B0  0E40               	movlw	64
  7093  0035B2  0100               	movlb	0	; () banked
  7094  0035B4  656E               	cpfsgt	create_name@c& (0+255),b
  7095  0035B6  D005               	goto	l1297
  7096                           
  7097                           ; BSR set to: 0
  7098  0035B8  0E5B               	movlw	91
  7099  0035BA  616E               	cpfslt	create_name@c& (0+255),b
  7100  0035BC  D002               	goto	l1297
  7101                           
  7102                           ; BSR set to: 0
  7103                           ;ff.c: 2019: b |= 2;
  7104  0035BE  8364               	bsf	create_name@b& (0+255),1,b
  7105                           
  7106                           ;ff.c: 2020: } else {
  7107  0035C0  D009               	goto	l1299
  7108  0035C2                     l1297:
  7109                           
  7110                           ; BSR set to: 0
  7111                           ;ff.c: 2021: if ((((c)>='a')&&((c)<='z'))) {
  7112                           
  7113                           ; BSR set to: 0
  7114  0035C2  0E60               	movlw	96
  7115  0035C4  656E               	cpfsgt	create_name@c& (0+255),b
  7116  0035C6  D006               	goto	l1299
  7117                           
  7118                           ; BSR set to: 0
  7119  0035C8  0E7B               	movlw	123
  7120  0035CA  616E               	cpfslt	create_name@c& (0+255),b
  7121  0035CC  D003               	goto	l1299
  7122                           
  7123                           ; BSR set to: 0
  7124                           ;ff.c: 2022: b |= 1; c -= 0x20;
  7125  0035CE  8164               	bsf	create_name@b& (0+255),0,b
  7126                           
  7127                           ; BSR set to: 0
  7128  0035D0  0E20               	movlw	32
  7129  0035D2  5F6E               	subwf	create_name@c& (0+255),f,b
  7130  0035D4                     l1299:
  7131                           
  7132                           ; BSR set to: 0
  7133                           ;ff.c: 2023: }
  7134                           ;ff.c: 2024: }
  7135                           ;ff.c: 2025: sfn[i++] = c;
  7136                           
  7137                           ; BSR set to: 0
  7138                           
  7139                           ; BSR set to: 0
  7140  0035D4  516C               	movf	create_name@i& (0+255),w,b
  7141  0035D6  256A               	addwf	create_name@sfn& (0+255),w,b
  7142  0035D8  6ED9               	movwf	fsr2l,c
  7143  0035DA  516D               	movf	(create_name@i+1)& (0+255),w,b
  7144  0035DC  216B               	addwfc	(create_name@sfn+1)& (0+255),w,b
  7145  0035DE  6EDA               	movwf	fsr2h,c
  7146  0035E0  C06E  FFDF         	movff	create_name@c,indf2
  7147  0035E4                     l11865:
  7148                           
  7149                           ; BSR set to: 0
  7150  0035E4  4B6C               	infsnz	create_name@i& (0+255),f,b
  7151  0035E6  2B6D               	incf	(create_name@i+1)& (0+255),f,b
  7152                           
  7153                           ; BSR set to: 0
  7154                           ;ff.c: 2026: }
  7155                           ;ff.c: 2027: }
  7156                           
  7157                           ; BSR set to: 0
  7158  0035E8  D743               	goto	l1269
  7159  0035EA                     l1273:
  7160                           
  7161                           ; BSR set to: 0
  7162                           ;ff.c: 2028: *path = &p[si];
  7163                           
  7164                           ; BSR set to: 0
  7165  0035EA  5162               	movf	create_name@si& (0+255),w,b
  7166  0035EC  2568               	addwf	create_name@p& (0+255),w,b
  7167  0035EE  6E26               	movwf	??_create_name& (0+255),c
  7168  0035F0  5163               	movf	(create_name@si+1)& (0+255),w,b
  7169  0035F2  2169               	addwfc	(create_name@p+1)& (0+255),w,b
  7170  0035F4  6E27               	movwf	(??_create_name+1)& (0+255),c
  7171  0035F6  C024  FFD9         	movff	create_name@path,fsr2l
  7172  0035FA  C025  FFDA         	movff	create_name@path+1,fsr2h
  7173  0035FE  C026  FFDE         	movff	??_create_name,postinc2
  7174  003602  C027  FFDD         	movff	??_create_name+1,postdec2
  7175                           
  7176                           ; BSR set to: 0
  7177                           ;ff.c: 2029: c = (c <= ' ') ? 0x04 : 0;
  7178  003606  0E20               	movlw	32
  7179  003608  656E               	cpfsgt	create_name@c& (0+255),b
  7180  00360A  D004               	goto	l1301
  7181                           
  7182                           ; BSR set to: 0
  7183  00360C  0E00               	movlw	0
  7184  00360E  6F61               	movwf	(_create_name$2743+1)& (0+255),b
  7185  003610  0E00               	movlw	0
  7186  003612  D003               	goto	L7
  7187  003614                     l1301:
  7188                           
  7189                           ; BSR set to: 0
  7190                           
  7191                           ; BSR set to: 0
  7192  003614  0E00               	movlw	0
  7193  003616  6F61               	movwf	(_create_name$2743+1)& (0+255),b
  7194  003618  0E04               	movlw	4
  7195  00361A                     L7:
  7196  00361A  6F60               	movwf	_create_name$2743& (0+255),b
  7197                           
  7198                           ; BSR set to: 0
  7199                           
  7200                           ; BSR set to: 0
  7201  00361C  C060  F06E         	movff	_create_name$2743,create_name@c
  7202                           
  7203                           ; BSR set to: 0
  7204                           ;ff.c: 2031: if (!i) return FR_INVALID_NAME;
  7205  003620  516C               	movf	create_name@i& (0+255),w,b
  7206  003622  116D               	iorwf	(create_name@i+1)& (0+255),w,b
  7207  003624  A4D8               	btfss	status,2,c
  7208  003626  D002               	goto	l1304
  7209                           
  7210                           ; BSR set to: 0
  7211  003628  0E06               	movlw	6
  7212                           
  7213                           ; BSR set to: 0
  7214  00362A  0012               	return	
  7215  00362C                     l1304:
  7216                           
  7217                           ; BSR set to: 0
  7218                           ;ff.c: 2032: if (sfn[0] == 0xE5) sfn[0] = 0x05;
  7219                           
  7220                           ; BSR set to: 0
  7221  00362C  C06A  FFD9         	movff	create_name@sfn,fsr2l
  7222  003630  C06B  FFDA         	movff	create_name@sfn+1,fsr2h
  7223  003634  0EE5               	movlw	229
  7224  003636  18DE               	xorwf	postinc2,w,c
  7225  003638  A4D8               	btfss	status,2,c
  7226  00363A  D006               	goto	l1305
  7227                           
  7228                           ; BSR set to: 0
  7229  00363C  C06A  FFD9         	movff	create_name@sfn,fsr2l
  7230  003640  C06B  FFDA         	movff	create_name@sfn+1,fsr2h
  7231  003644  0E05               	movlw	5
  7232  003646  6EDF               	movwf	indf2,c
  7233  003648                     l1305:
  7234                           
  7235                           ; BSR set to: 0
  7236                           ;ff.c: 2034: if (ni == 8) b <<= 2;
  7237                           
  7238                           ; BSR set to: 0
  7239  003648  0E08               	movlw	8
  7240  00364A  1965               	xorwf	create_name@ni& (0+255),w,b
  7241  00364C  1166               	iorwf	(create_name@ni+1)& (0+255),w,b
  7242  00364E  A4D8               	btfss	status,2,c
  7243  003650  D004               	goto	l1306
  7244                           
  7245                           ; BSR set to: 0
  7246  003652  90D8               	bcf	status,0,c
  7247  003654  3764               	rlcf	create_name@b& (0+255),f,b
  7248  003656  90D8               	bcf	status,0,c
  7249  003658  3764               	rlcf	create_name@b& (0+255),f,b
  7250  00365A                     l1306:
  7251                           
  7252                           ; BSR set to: 0
  7253                           ;ff.c: 2035: if ((b & 0x03) == 0x01) c |= 0x10;
  7254  00365A  5164               	movf	create_name@b& (0+255),w,b
  7255  00365C  0B03               	andlw	3
  7256  00365E  06E8               	decf	wreg,f,c
  7257  003660  B4D8               	btfsc	status,2,c
  7258                           
  7259                           ; BSR set to: 0
  7260  003662  896E               	bsf	create_name@c& (0+255),4,b
  7261                           
  7262                           ; BSR set to: 0
  7263                           ;ff.c: 2036: if ((b & 0x0C) == 0x04) c |= 0x08;
  7264                           
  7265                           ; BSR set to: 0
  7266  003664  5164               	movf	create_name@b& (0+255),w,b
  7267  003666  0B0C               	andlw	12
  7268  003668  0A04               	xorlw	4
  7269  00366A  B4D8               	btfsc	status,2,c
  7270                           
  7271                           ; BSR set to: 0
  7272  00366C  876E               	bsf	create_name@c& (0+255),3,b
  7273                           
  7274                           ; BSR set to: 0
  7275                           ;ff.c: 2038: sfn[11] = c;
  7276                           
  7277                           ; BSR set to: 0
  7278  00366E  EE20 F00B          	lfsr	2,11
  7279  003672  516A               	movf	create_name@sfn& (0+255),w,b
  7280  003674  26D9               	addwf	fsr2l,f,c
  7281  003676  516B               	movf	(create_name@sfn+1)& (0+255),w,b
  7282  003678  22DA               	addwfc	fsr2h,f,c
  7283  00367A  C06E  FFDF         	movff	create_name@c,indf2
  7284                           
  7285                           ; BSR set to: 0
  7286                           ;ff.c: 2040: return FR_OK;
  7287  00367E  0E00               	movlw	0
  7288  003680  0012               	return	
  7289  003682                     __end_of_create_name:
  7290                           	opt stack 0
  7291                           tosu	equ	0xFFF
  7292                           tosh	equ	0xFFE
  7293                           tosl	equ	0xFFD
  7294                           pclath	equ	0xFFA
  7295                           tblptru	equ	0xFF8
  7296                           tblptrh	equ	0xFF7
  7297                           tblptrl	equ	0xFF6
  7298                           tablat	equ	0xFF5
  7299                           prodh	equ	0xFF4
  7300                           prodl	equ	0xFF3
  7301                           intcon	equ	0xFF2
  7302                           intcon2	equ	0xFF1
  7303                           intcon3	equ	0xFF0
  7304                           postinc0	equ	0xFEE
  7305                           fsr0h	equ	0xFEA
  7306                           fsr0l	equ	0xFE9
  7307                           wreg	equ	0xFE8
  7308                           indf1	equ	0xFE7
  7309                           postinc1	equ	0xFE6
  7310                           postdec1	equ	0xFE5
  7311                           fsr1h	equ	0xFE2
  7312                           fsr1l	equ	0xFE1
  7313                           indf2	equ	0xFDF
  7314                           postinc2	equ	0xFDE
  7315                           postdec2	equ	0xFDD
  7316                           plusw2	equ	0xFDB
  7317                           fsr2h	equ	0xFDA
  7318                           fsr2l	equ	0xFD9
  7319                           status	equ	0xFD8
  7320                           
  7321 ;; *************** function _chk_chr *****************
  7322 ;; Defined at:
  7323 ;;		line 543 in file "bibliotecas/ff.c"
  7324 ;; Parameters:    Size  Location     Type
  7325 ;;  str             2   25[COMRAM] PTR const unsigned char 
  7326 ;;		 -> STR_19(15), 
  7327 ;;  chr             2   27[COMRAM] int 
  7328 ;; Auto vars:     Size  Location     Type
  7329 ;;		None
  7330 ;; Return value:  Size  Location     Type
  7331 ;;                  2   25[COMRAM] int 
  7332 ;; Registers used:
  7333 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  7334 ;; Tracked objects:
  7335 ;;		On entry : 0/0
  7336 ;;		On exit  : 0/0
  7337 ;;		Unchanged: 0/0
  7338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7339 ;;      Params:         4       0       0       0       0       0       0       0       0
  7340 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7341 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7342 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7343 ;;Total ram usage:        6 bytes
  7344 ;; Hardware stack levels used:    1
  7345 ;; Hardware stack levels required when called:    2
  7346 ;; This function calls:
  7347 ;;		Nothing
  7348 ;; This function is called by:
  7349 ;;		_create_name
  7350 ;; This function uses a non-reentrant model
  7351 ;;
  7352                           
  7353                           	psect	text23
  7354  005742                     __ptext23:
  7355                           	opt stack 0
  7356  005742                     _chk_chr:
  7357                           	opt stack 23
  7358                           
  7359                           ;ff.c: 544: while (*str && *str != chr) str++;
  7360                           
  7361                           ;incstack = 0
  7362  005742  D002               	goto	l1069
  7363  005744                     l11347:
  7364  005744  4A1A               	infsnz	chk_chr@str,f,c
  7365  005746  2A1B               	incf	chk_chr@str+1,f,c
  7366  005748                     l1069:
  7367  005748  C01A  FFF6         	movff	chk_chr@str,tblptrl
  7368  00574C  C01B  FFF7         	movff	chk_chr@str+1,tblptrh
  7369  005750                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7370  005750  6AF8               	clrf	tblptru,c
  7371  005752                     	endif
  7372  005752                     	if	0	;tblptru may be non-zero
  7373  005752                     	endif
  7374  005752  0008               	tblrd		*
  7375  005754  50F5               	movf	tablat,w,c
  7376  005756  0900               	iorlw	0
  7377  005758  B4D8               	btfsc	status,2,c
  7378  00575A  D010               	goto	u15140
  7379  00575C  C01A  FFF6         	movff	chk_chr@str,tblptrl
  7380  005760  C01B  FFF7         	movff	chk_chr@str+1,tblptrh
  7381  005764                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7382  005764  6AF8               	clrf	tblptru,c
  7383  005766                     	endif
  7384  005766                     	if	0	;tblptru may be non-zero
  7385  005766                     	endif
  7386  005766  0008               	tblrd		*
  7387  005768  50F5               	movf	tablat,w,c
  7388  00576A  6E1E               	movwf	??_chk_chr& (0+255),c
  7389  00576C  6A1F               	clrf	(??_chk_chr+1)& (0+255),c
  7390  00576E  501C               	movf	chk_chr@chr,w,c
  7391  005770  181E               	xorwf	??_chk_chr,w,c
  7392  005772  E1E8               	bnz	l11347
  7393  005774  501D               	movf	chk_chr@chr+1,w,c
  7394  005776  181F               	xorwf	??_chk_chr+1,w,c
  7395  005778  A4D8               	btfss	status,2,c
  7396  00577A  D7E4               	goto	l1070
  7397  00577C                     u15140:
  7398                           
  7399                           ;ff.c: 545: return *str;
  7400  00577C  C01A  FFF6         	movff	chk_chr@str,tblptrl
  7401  005780  C01B  FFF7         	movff	chk_chr@str+1,tblptrh
  7402  005784                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7403  005784  6AF8               	clrf	tblptru,c
  7404  005786                     	endif
  7405  005786                     	if	0	;tblptru may be non-zero
  7406  005786                     	endif
  7407  005786  0008               	tblrd		*
  7408  005788  50F5               	movf	tablat,w,c
  7409  00578A  6E1A               	movwf	?_chk_chr,c
  7410  00578C  6A1B               	clrf	?_chk_chr+1,c
  7411  00578E  0012               	return	
  7412  005790                     __end_of_chk_chr:
  7413                           	opt stack 0
  7414                           tosu	equ	0xFFF
  7415                           tosh	equ	0xFFE
  7416                           tosl	equ	0xFFD
  7417                           pclath	equ	0xFFA
  7418                           tblptru	equ	0xFF8
  7419                           tblptrh	equ	0xFF7
  7420                           tblptrl	equ	0xFF6
  7421                           tablat	equ	0xFF5
  7422                           prodh	equ	0xFF4
  7423                           prodl	equ	0xFF3
  7424                           intcon	equ	0xFF2
  7425                           intcon2	equ	0xFF1
  7426                           intcon3	equ	0xFF0
  7427                           postinc0	equ	0xFEE
  7428                           fsr0h	equ	0xFEA
  7429                           fsr0l	equ	0xFE9
  7430                           wreg	equ	0xFE8
  7431                           indf1	equ	0xFE7
  7432                           postinc1	equ	0xFE6
  7433                           postdec1	equ	0xFE5
  7434                           fsr1h	equ	0xFE2
  7435                           fsr1l	equ	0xFE1
  7436                           indf2	equ	0xFDF
  7437                           postinc2	equ	0xFDE
  7438                           postdec2	equ	0xFDD
  7439                           plusw2	equ	0xFDB
  7440                           fsr2h	equ	0xFDA
  7441                           fsr2l	equ	0xFD9
  7442                           status	equ	0xFD8
  7443                           
  7444 ;; *************** function _dir_register *****************
  7445 ;; Defined at:
  7446 ;;		line 1578 in file "bibliotecas/ff.c"
  7447 ;; Parameters:    Size  Location     Type
  7448 ;;  dp              2    6[BANK1 ] PTR struct .
  7449 ;;		 -> f_open@dj(22), 
  7450 ;; Auto vars:     Size  Location     Type
  7451 ;;  res             1    8[BANK1 ] enum E75
  7452 ;; Return value:  Size  Location     Type
  7453 ;;                  1    wreg      enum E75
  7454 ;; Registers used:
  7455 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7456 ;; Tracked objects:
  7457 ;;		On entry : 0/0
  7458 ;;		On exit  : 0/0
  7459 ;;		Unchanged: 0/0
  7460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7461 ;;      Params:         0       0       2       0       0       0       0       0       0
  7462 ;;      Locals:         0       0       1       0       0       0       0       0       0
  7463 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7464 ;;      Totals:         0       0       3       0       0       0       0       0       0
  7465 ;;Total ram usage:        3 bytes
  7466 ;; Hardware stack levels used:    1
  7467 ;; Hardware stack levels required when called:   15
  7468 ;; This function calls:
  7469 ;;		_dir_alloc
  7470 ;;		_mem_cpy
  7471 ;;		_mem_set
  7472 ;;		_move_window
  7473 ;; This function is called by:
  7474 ;;		_f_open
  7475 ;; This function uses a non-reentrant model
  7476 ;;
  7477                           
  7478                           	psect	text24
  7479  0049AC                     __ptext24:
  7480                           	opt stack 0
  7481  0049AC                     _dir_register:
  7482                           	opt stack 12
  7483                           
  7484                           ;ff.c: 1582: FRESULT res;
  7485                           ;ff.c: 1629: res = dir_alloc(dp, 1);
  7486                           
  7487                           ;incstack = 0
  7488  0049AC  C185  F0EA         	movff	dir_register@dp,dir_alloc@dp
  7489  0049B0  C186  F0EB         	movff	dir_register@dp+1,dir_alloc@dp+1
  7490  0049B4  0E00               	movlw	0
  7491  0049B6  0100               	movlb	0	; () banked
  7492  0049B8  6FED               	movwf	(dir_alloc@nent+1)& (0+255),b
  7493  0049BA  0E01               	movlw	1
  7494  0049BC  6FEC               	movwf	dir_alloc@nent& (0+255),b
  7495  0049BE  EC70  F022         	call	_dir_alloc	;wreg free
  7496  0049C2  0101               	movlb	1	; () banked
  7497  0049C4  6F87               	movwf	dir_register@res& (0+255),b
  7498                           
  7499                           ; BSR set to: 1
  7500                           ;ff.c: 1632: if (res == FR_OK) {
  7501  0049C6  5187               	movf	dir_register@res& (0+255),w,b
  7502  0049C8  A4D8               	btfss	status,2,c
  7503  0049CA  D058               	goto	l1262
  7504                           
  7505                           ; BSR set to: 1
  7506                           ;ff.c: 1633: res = move_window(dp->fs, dp->sect);
  7507  0049CC  C185  FFD9         	movff	dir_register@dp,fsr2l
  7508  0049D0  C186  FFDA         	movff	dir_register@dp+1,fsr2h
  7509  0049D4  CFDE F09A          	movff	postinc2,move_window@fs
  7510  0049D8  CFDD F09B          	movff	postdec2,move_window@fs+1
  7511  0049DC  EE20 F00E          	lfsr	2,14
  7512  0049E0  5185               	movf	dir_register@dp& (0+255),w,b
  7513  0049E2  26D9               	addwf	fsr2l,f,c
  7514  0049E4  5186               	movf	(dir_register@dp+1)& (0+255),w,b
  7515  0049E6  22DA               	addwfc	fsr2h,f,c
  7516  0049E8  CFDE F09C          	movff	postinc2,move_window@sector
  7517  0049EC  CFDE F09D          	movff	postinc2,move_window@sector+1
  7518  0049F0  CFDE F09E          	movff	postinc2,move_window@sector+2
  7519  0049F4  CFDE F09F          	movff	postinc2,move_window@sector+3
  7520  0049F8  EC0A  F027         	call	_move_window	;wreg free
  7521  0049FC  0101               	movlb	1	; () banked
  7522  0049FE  6F87               	movwf	dir_register@res& (0+255),b
  7523                           
  7524                           ; BSR set to: 1
  7525                           ;ff.c: 1634: if (res == FR_OK) {
  7526  004A00  5187               	movf	dir_register@res& (0+255),w,b
  7527  004A02  A4D8               	btfss	status,2,c
  7528  004A04  D03B               	goto	l1262
  7529                           
  7530                           ; BSR set to: 1
  7531                           ;ff.c: 1635: mem_set(dp->dir, 0, 32);
  7532  004A06  EE20 F012          	lfsr	2,18
  7533  004A0A  5185               	movf	dir_register@dp& (0+255),w,b
  7534  004A0C  26D9               	addwf	fsr2l,f,c
  7535  004A0E  5186               	movf	(dir_register@dp+1)& (0+255),w,b
  7536  004A10  22DA               	addwfc	fsr2h,f,c
  7537  004A12  CFDE F01A          	movff	postinc2,mem_set@dst
  7538  004A16  CFDD F01B          	movff	postdec2,mem_set@dst+1
  7539  004A1A  0E00               	movlw	0
  7540  004A1C  6E1D               	movwf	mem_set@val+1,c
  7541  004A1E  0E00               	movlw	0
  7542  004A20  6E1C               	movwf	mem_set@val,c
  7543  004A22  0E00               	movlw	0
  7544  004A24  6E1F               	movwf	mem_set@cnt+1,c
  7545  004A26  0E20               	movlw	32
  7546  004A28  6E1E               	movwf	mem_set@cnt,c
  7547  004A2A  ECFF  F02C         	call	_mem_set	;wreg free
  7548                           
  7549                           ;ff.c: 1636: mem_cpy(dp->dir, dp->fn, 11);
  7550  004A2E  0101               	movlb	1	; () banked
  7551  004A30  EE20 F012          	lfsr	2,18
  7552  004A34  5185               	movf	dir_register@dp& (0+255),w,b
  7553  004A36  26D9               	addwf	fsr2l,f,c
  7554  004A38  5186               	movf	(dir_register@dp+1)& (0+255),w,b
  7555  004A3A  22DA               	addwfc	fsr2h,f,c
  7556  004A3C  CFDE F01A          	movff	postinc2,mem_cpy@dst
  7557  004A40  CFDD F01B          	movff	postdec2,mem_cpy@dst+1
  7558  004A44  EE20 F014          	lfsr	2,20
  7559  004A48  5185               	movf	dir_register@dp& (0+255),w,b
  7560  004A4A  26D9               	addwf	fsr2l,f,c
  7561  004A4C  5186               	movf	(dir_register@dp+1)& (0+255),w,b
  7562  004A4E  22DA               	addwfc	fsr2h,f,c
  7563  004A50  CFDE F01C          	movff	postinc2,mem_cpy@src
  7564  004A54  CFDD F01D          	movff	postdec2,mem_cpy@src+1
  7565  004A58  0E00               	movlw	0
  7566  004A5A  6E1F               	movwf	mem_cpy@cnt+1,c
  7567  004A5C  0E0B               	movlw	11
  7568  004A5E  6E1E               	movwf	mem_cpy@cnt,c
  7569  004A60  ECA0  F025         	call	_mem_cpy	;wreg free
  7570                           
  7571                           ;ff.c: 1640: dp->fs->wflag = 1;
  7572  004A64  C185  FFD9         	movff	dir_register@dp,fsr2l
  7573  004A68  C186  FFDA         	movff	dir_register@dp+1,fsr2h
  7574  004A6C  EE10 F004          	lfsr	1,4
  7575  004A70  50DE               	movf	postinc2,w,c
  7576  004A72  26E1               	addwf	fsr1l,f,c
  7577  004A74  50DD               	movf	postdec2,w,c
  7578  004A76  22E2               	addwfc	fsr1h,f,c
  7579  004A78  0E01               	movlw	1
  7580  004A7A  6EE7               	movwf	indf1,c
  7581  004A7C                     l1262:
  7582                           
  7583                           ;ff.c: 1641: }
  7584                           ;ff.c: 1642: }
  7585                           ;ff.c: 1644: return res;
  7586  004A7C  0101               	movlb	1	; () banked
  7587  004A7E  5187               	movf	dir_register@res& (0+255),w,b
  7588  004A80  0012               	return	
  7589  004A82                     __end_of_dir_register:
  7590                           	opt stack 0
  7591                           tosu	equ	0xFFF
  7592                           tosh	equ	0xFFE
  7593                           tosl	equ	0xFFD
  7594                           pclath	equ	0xFFA
  7595                           tblptru	equ	0xFF8
  7596                           tblptrh	equ	0xFF7
  7597                           tblptrl	equ	0xFF6
  7598                           tablat	equ	0xFF5
  7599                           prodh	equ	0xFF4
  7600                           prodl	equ	0xFF3
  7601                           intcon	equ	0xFF2
  7602                           intcon2	equ	0xFF1
  7603                           intcon3	equ	0xFF0
  7604                           postinc0	equ	0xFEE
  7605                           fsr0h	equ	0xFEA
  7606                           fsr0l	equ	0xFE9
  7607                           wreg	equ	0xFE8
  7608                           indf1	equ	0xFE7
  7609                           postinc1	equ	0xFE6
  7610                           postdec1	equ	0xFE5
  7611                           fsr1h	equ	0xFE2
  7612                           fsr1l	equ	0xFE1
  7613                           indf2	equ	0xFDF
  7614                           postinc2	equ	0xFDE
  7615                           postdec2	equ	0xFDD
  7616                           plusw2	equ	0xFDB
  7617                           fsr2h	equ	0xFDA
  7618                           fsr2l	equ	0xFD9
  7619                           status	equ	0xFD8
  7620                           
  7621 ;; *************** function _mem_cpy *****************
  7622 ;; Defined at:
  7623 ;;		line 507 in file "bibliotecas/ff.c"
  7624 ;; Parameters:    Size  Location     Type
  7625 ;;  dst             2   25[COMRAM] PTR void 
  7626 ;;		 -> fs.win(512), NULL(0), fs(558), 
  7627 ;;  src             2   27[COMRAM] PTR const void 
  7628 ;;		 -> f_open@sfn(12), NULL(0), STR_14(15), fs(558), 
  7629 ;;  cnt             2   29[COMRAM] unsigned int 
  7630 ;; Auto vars:     Size  Location     Type
  7631 ;;  s               2   35[COMRAM] PTR const unsigned char 
  7632 ;;		 -> f_open@sfn(12), NULL(0), STR_14(15), fs(558), 
  7633 ;;  d               2   33[COMRAM] PTR unsigned char 
  7634 ;;		 -> fs.win(512), NULL(0), fs(558), 
  7635 ;; Return value:  Size  Location     Type
  7636 ;;                  1    wreg      void 
  7637 ;; Registers used:
  7638 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7639 ;; Tracked objects:
  7640 ;;		On entry : 0/0
  7641 ;;		On exit  : 0/0
  7642 ;;		Unchanged: 0/0
  7643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7644 ;;      Params:         6       0       0       0       0       0       0       0       0
  7645 ;;      Locals:         4       0       0       0       0       0       0       0       0
  7646 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7647 ;;      Totals:        12       0       0       0       0       0       0       0       0
  7648 ;;Total ram usage:       12 bytes
  7649 ;; Hardware stack levels used:    1
  7650 ;; Hardware stack levels required when called:    2
  7651 ;; This function calls:
  7652 ;;		Nothing
  7653 ;; This function is called by:
  7654 ;;		_dir_register
  7655 ;;		_f_write
  7656 ;;		_f_read
  7657 ;; This function uses a non-reentrant model
  7658 ;;
  7659                           
  7660                           	psect	text25
  7661  004B40                     __ptext25:
  7662                           	opt stack 0
  7663  004B40                     _mem_cpy:
  7664                           	opt stack 25
  7665                           
  7666                           ;ff.c: 508: BYTE *d = (BYTE*)dst;
  7667                           
  7668                           ; BSR set to: 1
  7669                           ;incstack = 0
  7670  004B40  C01A  F022         	movff	mem_cpy@dst,mem_cpy@d
  7671  004B44  C01B  F023         	movff	mem_cpy@dst+1,mem_cpy@d+1
  7672                           
  7673                           ;ff.c: 509: const BYTE *s = (const BYTE*)src;
  7674  004B48  C01C  F024         	movff	mem_cpy@src,mem_cpy@s
  7675  004B4C  C01D  F025         	movff	mem_cpy@src+1,mem_cpy@s+1
  7676                           
  7677                           ;ff.c: 512: while (cnt >= sizeof (int)) {
  7678  004B50  D02B               	goto	l1046
  7679  004B52                     l11639:
  7680                           
  7681                           ;ff.c: 513: *(int*)d = *(int*)s;
  7682  004B52  C024  FFF6         	movff	mem_cpy@s,tblptrl
  7683  004B56  C025  FFF7         	movff	mem_cpy@s+1,tblptrh
  7684  004B5A  6AF8               	clrf	tblptru,c
  7685  004B5C  0E07               	movlw	(high __ramtop+-1)
  7686  004B5E  64F7               	cpfsgt	tblptrh,c
  7687  004B60  D007               	bra	u15677
  7688  004B62  0009               	tblrd		*+
  7689  004B64  CFF5 F020          	movff	tablat,??_mem_cpy
  7690  004B68  0009               	tblrd		*+
  7691  004B6A  CFF5 F021          	movff	tablat,??_mem_cpy+1
  7692  004B6E  D008               	bra	u15670
  7693  004B70                     u15677:
  7694  004B70  CFF6 FFE9          	movff	tblptrl,fsr0l
  7695  004B74  CFF7 FFEA          	movff	tblptrh,fsr0h
  7696  004B78  CFEE F020          	movff	postinc0,??_mem_cpy
  7697  004B7C  CFEE F021          	movff	postinc0,??_mem_cpy+1
  7698  004B80                     u15670:
  7699  004B80  C022  FFD9         	movff	mem_cpy@d,fsr2l
  7700  004B84  C023  FFDA         	movff	mem_cpy@d+1,fsr2h
  7701  004B88  C020  FFDE         	movff	??_mem_cpy,postinc2
  7702  004B8C  C021  FFDD         	movff	??_mem_cpy+1,postdec2
  7703                           
  7704                           ;ff.c: 514: d += sizeof (int); s += sizeof (int);
  7705  004B90  0E02               	movlw	2
  7706  004B92  2622               	addwf	mem_cpy@d,f,c
  7707  004B94  0E00               	movlw	0
  7708  004B96  2223               	addwfc	mem_cpy@d+1,f,c
  7709  004B98  0E02               	movlw	2
  7710  004B9A  2624               	addwf	mem_cpy@s,f,c
  7711  004B9C  0E00               	movlw	0
  7712  004B9E  2225               	addwfc	mem_cpy@s+1,f,c
  7713                           
  7714                           ;ff.c: 515: cnt -= sizeof (int);
  7715  004BA0  0E02               	movlw	2
  7716  004BA2  5E1E               	subwf	mem_cpy@cnt,f,c
  7717  004BA4  0E00               	movlw	0
  7718  004BA6  5A1F               	subwfb	mem_cpy@cnt+1,f,c
  7719  004BA8                     l1046:
  7720  004BA8  501F               	movf	mem_cpy@cnt+1,w,c
  7721  004BAA  E1D3               	bnz	l11639
  7722  004BAC  0E02               	movlw	2
  7723  004BAE  5C1E               	subwf	mem_cpy@cnt,w,c
  7724  004BB0  A0D8               	btfss	status,0,c
  7725  004BB2  D01A               	goto	l1049
  7726  004BB4  D7CE               	goto	l1047
  7727  004BB6                     l11649:
  7728                           
  7729                           ;ff.c: 519: *d++ = *s++;
  7730  004BB6  C024  FFF6         	movff	mem_cpy@s,tblptrl
  7731  004BBA  C025  FFF7         	movff	mem_cpy@s+1,tblptrh
  7732  004BBE  6AF8               	clrf	tblptru,c
  7733  004BC0  C022  FFD9         	movff	mem_cpy@d,fsr2l
  7734  004BC4  C023  FFDA         	movff	mem_cpy@d+1,fsr2h
  7735  004BC8  0E07               	movlw	(high __ramtop+-1)
  7736  004BCA  64F7               	cpfsgt	tblptrh,c
  7737  004BCC  D003               	bra	u15697
  7738  004BCE  0008               	tblrd		*
  7739  004BD0  50F5               	movf	tablat,w,c
  7740  004BD2  D005               	bra	u15690
  7741  004BD4                     u15697:
  7742  004BD4  CFF6 FFE9          	movff	tblptrl,fsr0l
  7743  004BD8  CFF7 FFEA          	movff	tblptrh,fsr0h
  7744  004BDC  50EF               	movf	indf0,w,c
  7745  004BDE                     u15690:
  7746  004BDE  6EDF               	movwf	indf2,c
  7747  004BE0  4A24               	infsnz	mem_cpy@s,f,c
  7748  004BE2  2A25               	incf	mem_cpy@s+1,f,c
  7749  004BE4  4A22               	infsnz	mem_cpy@d,f,c
  7750  004BE6  2A23               	incf	mem_cpy@d+1,f,c
  7751  004BE8                     l1049:
  7752  004BE8  061E               	decf	mem_cpy@cnt,f,c
  7753  004BEA  A0D8               	btfss	status,0,c
  7754  004BEC  061F               	decf	mem_cpy@cnt+1,f,c
  7755  004BEE  281E               	incf	mem_cpy@cnt,w,c
  7756  004BF0  E1E2               	bnz	l11649
  7757  004BF2  281F               	incf	mem_cpy@cnt+1,w,c
  7758  004BF4  B4D8               	btfsc	status,2,c
  7759  004BF6  0012               	return	
  7760  004BF8  D7DE               	goto	l1050
  7761  004BFA                     __end_of_mem_cpy:
  7762                           	opt stack 0
  7763                           tosu	equ	0xFFF
  7764                           tosh	equ	0xFFE
  7765                           tosl	equ	0xFFD
  7766                           pclath	equ	0xFFA
  7767                           tblptru	equ	0xFF8
  7768                           tblptrh	equ	0xFF7
  7769                           tblptrl	equ	0xFF6
  7770                           tablat	equ	0xFF5
  7771                           prodh	equ	0xFF4
  7772                           prodl	equ	0xFF3
  7773                           intcon	equ	0xFF2
  7774                           intcon2	equ	0xFF1
  7775                           intcon3	equ	0xFF0
  7776                           indf0	equ	0xFEF
  7777                           postinc0	equ	0xFEE
  7778                           fsr0h	equ	0xFEA
  7779                           fsr0l	equ	0xFE9
  7780                           wreg	equ	0xFE8
  7781                           indf1	equ	0xFE7
  7782                           postinc1	equ	0xFE6
  7783                           postdec1	equ	0xFE5
  7784                           fsr1h	equ	0xFE2
  7785                           fsr1l	equ	0xFE1
  7786                           indf2	equ	0xFDF
  7787                           postinc2	equ	0xFDE
  7788                           postdec2	equ	0xFDD
  7789                           plusw2	equ	0xFDB
  7790                           fsr2h	equ	0xFDA
  7791                           fsr2l	equ	0xFD9
  7792                           status	equ	0xFD8
  7793                           
  7794 ;; *************** function _dir_alloc *****************
  7795 ;; Defined at:
  7796 ;;		line 1199 in file "bibliotecas/ff.c"
  7797 ;; Parameters:    Size  Location     Type
  7798 ;;  dp              2  138[BANK0 ] PTR struct .
  7799 ;;		 -> f_open@dj(22), 
  7800 ;;  nent            2  140[BANK0 ] unsigned int 
  7801 ;; Auto vars:     Size  Location     Type
  7802 ;;  n               2    3[BANK1 ] unsigned int 
  7803 ;;  res             1    5[BANK1 ] enum E75
  7804 ;; Return value:  Size  Location     Type
  7805 ;;                  1    wreg      enum E75
  7806 ;; Registers used:
  7807 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7808 ;; Tracked objects:
  7809 ;;		On entry : 0/0
  7810 ;;		On exit  : 0/0
  7811 ;;		Unchanged: 0/0
  7812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7813 ;;      Params:         0       4       0       0       0       0       0       0       0
  7814 ;;      Locals:         0       0       3       0       0       0       0       0       0
  7815 ;;      Temps:          0       0       3       0       0       0       0       0       0
  7816 ;;      Totals:         0       4       6       0       0       0       0       0       0
  7817 ;;Total ram usage:       10 bytes
  7818 ;; Hardware stack levels used:    1
  7819 ;; Hardware stack levels required when called:   14
  7820 ;; This function calls:
  7821 ;;		_dir_next
  7822 ;;		_dir_sdi
  7823 ;;		_move_window
  7824 ;; This function is called by:
  7825 ;;		_dir_register
  7826 ;; This function uses a non-reentrant model
  7827 ;;
  7828                           
  7829                           	psect	text26
  7830  0044E0                     __ptext26:
  7831                           	opt stack 0
  7832  0044E0                     _dir_alloc:
  7833                           	opt stack 12
  7834                           
  7835                           ;ff.c: 1204: FRESULT res;
  7836                           ;ff.c: 1205: UINT n;
  7837                           ;ff.c: 1208: res = dir_sdi(dp, 0);
  7838                           
  7839                           ;incstack = 0
  7840  0044E0  C0EA  F0BF         	movff	dir_alloc@dp,dir_sdi@dp
  7841  0044E4  C0EB  F0C0         	movff	dir_alloc@dp+1,dir_sdi@dp+1
  7842  0044E8  0E00               	movlw	0
  7843  0044EA  0100               	movlb	0	; () banked
  7844  0044EC  6FC2               	movwf	(dir_sdi@idx+1)& (0+255),b
  7845  0044EE  0E00               	movlw	0
  7846  0044F0  6FC1               	movwf	dir_sdi@idx& (0+255),b
  7847  0044F2  EC8B  F018         	call	_dir_sdi	;wreg free
  7848  0044F6  0101               	movlb	1	; () banked
  7849  0044F8  6F84               	movwf	dir_alloc@res& (0+255),b
  7850                           
  7851                           ; BSR set to: 1
  7852                           ;ff.c: 1209: if (res == FR_OK) {
  7853  0044FA  5184               	movf	dir_alloc@res& (0+255),w,b
  7854  0044FC  A4D8               	btfss	status,2,c
  7855  0044FE  D06A               	goto	u15800
  7856                           
  7857                           ; BSR set to: 1
  7858                           ;ff.c: 1210: n = 0;
  7859  004500  0E00               	movlw	0
  7860  004502  6F83               	movwf	(dir_alloc@n+1)& (0+255),b
  7861  004504  0E00               	movlw	0
  7862  004506  6F82               	movwf	dir_alloc@n& (0+255),b
  7863  004508                     
  7864                           ; BSR set to: 1
  7865                           ;ff.c: 1212: res = move_window(dp->fs, dp->sect);
  7866                           
  7867                           ; BSR set to: 1
  7868  004508  C0EA  FFD9         	movff	dir_alloc@dp,fsr2l
  7869  00450C  C0EB  FFDA         	movff	dir_alloc@dp+1,fsr2h
  7870  004510  CFDE F09A          	movff	postinc2,move_window@fs
  7871  004514  CFDD F09B          	movff	postdec2,move_window@fs+1
  7872  004518  0100               	movlb	0	; () banked
  7873  00451A  EE20 F00E          	lfsr	2,14
  7874  00451E  51EA               	movf	dir_alloc@dp& (0+255),w,b
  7875  004520  26D9               	addwf	fsr2l,f,c
  7876  004522  51EB               	movf	(dir_alloc@dp+1)& (0+255),w,b
  7877  004524  22DA               	addwfc	fsr2h,f,c
  7878  004526  CFDE F09C          	movff	postinc2,move_window@sector
  7879  00452A  CFDE F09D          	movff	postinc2,move_window@sector+1
  7880  00452E  CFDE F09E          	movff	postinc2,move_window@sector+2
  7881  004532  CFDE F09F          	movff	postinc2,move_window@sector+3
  7882  004536  EC0A  F027         	call	_move_window	;wreg free
  7883  00453A  0101               	movlb	1	; () banked
  7884  00453C  6F84               	movwf	dir_alloc@res& (0+255),b
  7885                           
  7886                           ; BSR set to: 1
  7887                           ;ff.c: 1213: if (res != FR_OK) break;
  7888  00453E  5184               	movf	dir_alloc@res& (0+255),w,b
  7889  004540  A4D8               	btfss	status,2,c
  7890  004542  D048               	goto	u15800
  7891                           
  7892                           ; BSR set to: 1
  7893                           ;ff.c: 1214: if (dp->dir[0] == 0xE5 || dp->dir[0] == 0) {
  7894                           
  7895                           ; BSR set to: 1
  7896                           
  7897                           ; BSR set to: 1
  7898  004544  0100               	movlb	0	; () banked
  7899  004546  EE20 F012          	lfsr	2,18
  7900  00454A  51EA               	movf	dir_alloc@dp& (0+255),w,b
  7901  00454C  26D9               	addwf	fsr2l,f,c
  7902  00454E  51EB               	movf	(dir_alloc@dp+1)& (0+255),w,b
  7903  004550  22DA               	addwfc	fsr2h,f,c
  7904  004552  CFDE F17F          	movff	postinc2,??_dir_alloc
  7905  004556  CFDD F180          	movff	postdec2,??_dir_alloc+1
  7906  00455A  C17F  FFD9         	movff	??_dir_alloc,fsr2l
  7907  00455E  C180  FFDA         	movff	??_dir_alloc+1,fsr2h
  7908  004562  0EE5               	movlw	229
  7909  004564  18DE               	xorwf	postinc2,w,c
  7910  004566  B4D8               	btfsc	status,2,c
  7911  004568  D011               	goto	u15780
  7912                           
  7913                           ; BSR set to: 0
  7914  00456A  EE20 F012          	lfsr	2,18
  7915  00456E  51EA               	movf	dir_alloc@dp& (0+255),w,b
  7916  004570  26D9               	addwf	fsr2l,f,c
  7917  004572  51EB               	movf	(dir_alloc@dp+1)& (0+255),w,b
  7918  004574  22DA               	addwfc	fsr2h,f,c
  7919  004576  CFDE F17F          	movff	postinc2,??_dir_alloc
  7920  00457A  CFDD F180          	movff	postdec2,??_dir_alloc+1
  7921  00457E  C17F  FFD9         	movff	??_dir_alloc,fsr2l
  7922  004582  C180  FFDA         	movff	??_dir_alloc+1,fsr2h
  7923  004586  50DF               	movf	indf2,w,c
  7924  004588  A4D8               	btfss	status,2,c
  7925  00458A  D00F               	goto	l1236
  7926  00458C                     u15780:
  7927                           
  7928                           ; BSR set to: 0
  7929                           ;ff.c: 1215: if (++n == nent) break;
  7930                           
  7931                           ; BSR set to: 0
  7932  00458C  0101               	movlb	1	; () banked
  7933  00458E  4B82               	infsnz	dir_alloc@n& (0+255),f,b
  7934  004590  2B83               	incf	(dir_alloc@n+1)& (0+255),f,b
  7935  004592  0100               	movlb	0	; () banked
  7936  004594  51EC               	movf	dir_alloc@nent& (0+255),w,b
  7937  004596  0101               	movlb	1	; () banked
  7938  004598  1982               	xorwf	dir_alloc@n& (0+255),w,b
  7939  00459A  E10C               	bnz	l11711
  7940  00459C  0100               	movlb	0	; () banked
  7941  00459E  51ED               	movf	(dir_alloc@nent+1)& (0+255),w,b
  7942  0045A0  0101               	movlb	1	; () banked
  7943  0045A2  1983               	xorwf	(dir_alloc@n+1)& (0+255),w,b
  7944  0045A4  B4D8               	btfsc	status,2,c
  7945  0045A6  D016               	goto	u15800
  7946  0045A8  D005               	goto	l1240
  7947  0045AA                     l1236:
  7948                           
  7949                           ;ff.c: 1217: n = 0;
  7950                           
  7951                           ; BSR set to: 1
  7952  0045AA  0E00               	movlw	0
  7953  0045AC  0101               	movlb	1	; () banked
  7954  0045AE  6F83               	movwf	(dir_alloc@n+1)& (0+255),b
  7955  0045B0  0E00               	movlw	0
  7956  0045B2  6F82               	movwf	dir_alloc@n& (0+255),b
  7957  0045B4                     l1240:
  7958  0045B4                     l11711:
  7959                           
  7960                           ; BSR set to: 1
  7961                           ;ff.c: 1218: }
  7962                           ;ff.c: 1219: res = dir_next(dp, 1);
  7963  0045B4  C0EA  F0D7         	movff	dir_alloc@dp,dir_next@dp
  7964  0045B8  C0EB  F0D8         	movff	dir_alloc@dp+1,dir_next@dp+1
  7965  0045BC  0E00               	movlw	0
  7966  0045BE  0100               	movlb	0	; () banked
  7967  0045C0  6FDA               	movwf	(dir_next@stretch+1)& (0+255),b
  7968  0045C2  0E01               	movlw	1
  7969  0045C4  6FD9               	movwf	dir_next@stretch& (0+255),b
  7970  0045C6  EC2B  F00F         	call	_dir_next	;wreg free
  7971  0045CA  0101               	movlb	1	; () banked
  7972  0045CC  6F84               	movwf	dir_alloc@res& (0+255),b
  7973                           
  7974                           ; BSR set to: 1
  7975                           ;ff.c: 1220: } while (res == FR_OK);
  7976  0045CE  5184               	movf	dir_alloc@res& (0+255),w,b
  7977  0045D0  B4D8               	btfsc	status,2,c
  7978  0045D2  D79A               	goto	l1233
  7979  0045D4                     u15800:
  7980                           
  7981                           ; BSR set to: 1
  7982                           ;ff.c: 1221: }
  7983                           ;ff.c: 1222: if (res == FR_NO_FILE) res = FR_DENIED;
  7984                           
  7985                           ; BSR set to: 1
  7986                           
  7987                           ; BSR set to: 1
  7988  0045D4  0E04               	movlw	4
  7989  0045D6  1984               	xorwf	dir_alloc@res& (0+255),w,b
  7990  0045D8  A4D8               	btfss	status,2,c
  7991  0045DA  D002               	goto	l1241
  7992                           
  7993                           ; BSR set to: 1
  7994  0045DC  0E07               	movlw	7
  7995  0045DE  6F84               	movwf	dir_alloc@res& (0+255),b
  7996  0045E0                     l1241:
  7997                           
  7998                           ; BSR set to: 1
  7999                           ;ff.c: 1223: return res;
  8000  0045E0  5184               	movf	dir_alloc@res& (0+255),w,b
  8001  0045E2  0012               	return	
  8002  0045E4                     __end_of_dir_alloc:
  8003                           	opt stack 0
  8004                           tosu	equ	0xFFF
  8005                           tosh	equ	0xFFE
  8006                           tosl	equ	0xFFD
  8007                           pclath	equ	0xFFA
  8008                           tblptru	equ	0xFF8
  8009                           tblptrh	equ	0xFF7
  8010                           tblptrl	equ	0xFF6
  8011                           tablat	equ	0xFF5
  8012                           prodh	equ	0xFF4
  8013                           prodl	equ	0xFF3
  8014                           intcon	equ	0xFF2
  8015                           intcon2	equ	0xFF1
  8016                           intcon3	equ	0xFF0
  8017                           indf0	equ	0xFEF
  8018                           postinc0	equ	0xFEE
  8019                           fsr0h	equ	0xFEA
  8020                           fsr0l	equ	0xFE9
  8021                           wreg	equ	0xFE8
  8022                           indf1	equ	0xFE7
  8023                           postinc1	equ	0xFE6
  8024                           postdec1	equ	0xFE5
  8025                           fsr1h	equ	0xFE2
  8026                           fsr1l	equ	0xFE1
  8027                           indf2	equ	0xFDF
  8028                           postinc2	equ	0xFDE
  8029                           postdec2	equ	0xFDD
  8030                           plusw2	equ	0xFDB
  8031                           fsr2h	equ	0xFDA
  8032                           fsr2l	equ	0xFD9
  8033                           status	equ	0xFD8
  8034                           
  8035 ;; *************** function _dir_sdi *****************
  8036 ;; Defined at:
  8037 ;;		line 1080 in file "bibliotecas/ff.c"
  8038 ;; Parameters:    Size  Location     Type
  8039 ;;  dp              2   95[BANK0 ] PTR struct .
  8040 ;;		 -> f_open@dj(22), 
  8041 ;;  idx             2   97[BANK0 ] unsigned int 
  8042 ;; Auto vars:     Size  Location     Type
  8043 ;;  clst            4  112[BANK0 ] unsigned long 
  8044 ;;  sect            4  108[BANK0 ] unsigned long 
  8045 ;;  ic              2  106[BANK0 ] unsigned int 
  8046 ;; Return value:  Size  Location     Type
  8047 ;;                  1    wreg      enum E75
  8048 ;; Registers used:
  8049 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8050 ;; Tracked objects:
  8051 ;;		On entry : 0/0
  8052 ;;		On exit  : 0/0
  8053 ;;		Unchanged: 0/0
  8054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8055 ;;      Params:         0       4       0       0       0       0       0       0       0
  8056 ;;      Locals:         0      10       0       0       0       0       0       0       0
  8057 ;;      Temps:          0       7       0       0       0       0       0       0       0
  8058 ;;      Totals:         0      21       0       0       0       0       0       0       0
  8059 ;;Total ram usage:       21 bytes
  8060 ;; Hardware stack levels used:    1
  8061 ;; Hardware stack levels required when called:   12
  8062 ;; This function calls:
  8063 ;;		_clust2sect
  8064 ;;		_get_fat
  8065 ;; This function is called by:
  8066 ;;		_dir_alloc
  8067 ;;		_dir_find
  8068 ;;		_follow_path
  8069 ;; This function uses a non-reentrant model
  8070 ;;
  8071                           
  8072                           	psect	text27
  8073  003116                     __ptext27:
  8074                           	opt stack 0
  8075  003116                     _dir_sdi:
  8076                           	opt stack 14
  8077                           
  8078                           ;ff.c: 1085: DWORD clst, sect;
  8079                           ;ff.c: 1086: UINT ic;
  8080                           ;ff.c: 1089: dp->index = (WORD)idx;
  8081                           
  8082                           ; BSR set to: 1
  8083                           ;incstack = 0
  8084  003116  0100               	movlb	0	; () banked
  8085  003118  EE20 F004          	lfsr	2,4
  8086  00311C  51BF               	movf	dir_sdi@dp& (0+255),w,b
  8087  00311E  26D9               	addwf	fsr2l,f,c
  8088  003120  51C0               	movf	(dir_sdi@dp+1)& (0+255),w,b
  8089  003122  22DA               	addwfc	fsr2h,f,c
  8090  003124  C0C1  FFDE         	movff	dir_sdi@idx,postinc2
  8091  003128  C0C2  FFDD         	movff	dir_sdi@idx+1,postdec2
  8092                           
  8093                           ;ff.c: 1090: clst = dp->sclust;
  8094  00312C  EE20 F006          	lfsr	2,6
  8095  003130  51BF               	movf	dir_sdi@dp& (0+255),w,b
  8096  003132  26D9               	addwf	fsr2l,f,c
  8097  003134  51C0               	movf	(dir_sdi@dp+1)& (0+255),w,b
  8098  003136  22DA               	addwfc	fsr2h,f,c
  8099  003138  CFDE F0D0          	movff	postinc2,dir_sdi@clst
  8100  00313C  CFDE F0D1          	movff	postinc2,dir_sdi@clst+1
  8101  003140  CFDE F0D2          	movff	postinc2,dir_sdi@clst+2
  8102  003144  CFDE F0D3          	movff	postinc2,dir_sdi@clst+3
  8103                           
  8104                           ; BSR set to: 0
  8105                           ;ff.c: 1091: if (clst == 1 || clst >= dp->fs->n_fatent)
  8106  003148  05D0               	decf	dir_sdi@clst& (0+255),w,b
  8107  00314A  11D1               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  8108  00314C  11D2               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  8109  00314E  11D3               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  8110  003150  B4D8               	btfsc	status,2,c
  8111  003152  D014               	goto	u15160
  8112                           
  8113                           ; BSR set to: 0
  8114  003154  C0BF  FFD9         	movff	dir_sdi@dp,fsr2l
  8115  003158  C0C0  FFDA         	movff	dir_sdi@dp+1,fsr2h
  8116  00315C  EE10 F012          	lfsr	1,18
  8117  003160  50DE               	movf	postinc2,w,c
  8118  003162  26E1               	addwf	fsr1l,f,c
  8119  003164  50DD               	movf	postdec2,w,c
  8120  003166  22E2               	addwfc	fsr1h,f,c
  8121  003168  50E6               	movf	postinc1,w,c
  8122  00316A  5DD0               	subwf	dir_sdi@clst& (0+255),w,b
  8123  00316C  50E6               	movf	postinc1,w,c
  8124  00316E  59D1               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  8125  003170  50E6               	movf	postinc1,w,c
  8126  003172  59D2               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  8127  003174  50E6               	movf	postinc1,w,c
  8128  003176  59D3               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  8129  003178  A0D8               	btfss	status,0,c
  8130  00317A  D002               	goto	l1191
  8131  00317C                     u15160:
  8132                           
  8133                           ; BSR set to: 0
  8134                           ;ff.c: 1092: return FR_INT_ERR;
  8135                           
  8136                           ; BSR set to: 0
  8137  00317C  0E02               	movlw	2
  8138                           
  8139                           ; BSR set to: 0
  8140  00317E  0012               	return	
  8141  003180                     l1191:
  8142                           
  8143                           ; BSR set to: 0
  8144                           ;ff.c: 1093: if (!clst && dp->fs->fs_type == 3)
  8145                           
  8146                           ; BSR set to: 0
  8147  003180  51D0               	movf	dir_sdi@clst& (0+255),w,b
  8148  003182  11D1               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  8149  003184  11D2               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  8150  003186  11D3               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  8151  003188  A4D8               	btfss	status,2,c
  8152  00318A  D022               	goto	l1195
  8153                           
  8154                           ; BSR set to: 0
  8155  00318C  C0BF  FFD9         	movff	dir_sdi@dp,fsr2l
  8156  003190  C0C0  FFDA         	movff	dir_sdi@dp+1,fsr2h
  8157  003194  CFDE F0C3          	movff	postinc2,??_dir_sdi
  8158  003198  CFDD F0C4          	movff	postdec2,??_dir_sdi+1
  8159  00319C  C0C3  FFD9         	movff	??_dir_sdi,fsr2l
  8160  0031A0  C0C4  FFDA         	movff	??_dir_sdi+1,fsr2h
  8161  0031A4  0E03               	movlw	3
  8162  0031A6  18DE               	xorwf	postinc2,w,c
  8163  0031A8  A4D8               	btfss	status,2,c
  8164  0031AA  D012               	goto	l1195
  8165                           
  8166                           ; BSR set to: 0
  8167                           ;ff.c: 1094: clst = dp->fs->dirbase;
  8168  0031AC  C0BF  FFD9         	movff	dir_sdi@dp,fsr2l
  8169  0031B0  C0C0  FFDA         	movff	dir_sdi@dp+1,fsr2h
  8170  0031B4  EE10 F022          	lfsr	1,34
  8171  0031B8  50DE               	movf	postinc2,w,c
  8172  0031BA  26E1               	addwf	fsr1l,f,c
  8173  0031BC  50DD               	movf	postdec2,w,c
  8174  0031BE  22E2               	addwfc	fsr1h,f,c
  8175  0031C0  CFE6 F0D0          	movff	postinc1,dir_sdi@clst
  8176  0031C4  CFE6 F0D1          	movff	postinc1,dir_sdi@clst+1
  8177  0031C8  CFE6 F0D2          	movff	postinc1,dir_sdi@clst+2
  8178  0031CC  CFE6 F0D3          	movff	postinc1,dir_sdi@clst+3
  8179  0031D0                     l1195:
  8180                           
  8181                           ; BSR set to: 0
  8182                           ;ff.c: 1096: if (clst == 0) {
  8183                           
  8184                           ; BSR set to: 0
  8185  0031D0  51D0               	movf	dir_sdi@clst& (0+255),w,b
  8186  0031D2  11D1               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  8187  0031D4  11D2               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  8188  0031D6  11D3               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  8189  0031D8  A4D8               	btfss	status,2,c
  8190  0031DA  D025               	goto	l1196
  8191                           
  8192                           ; BSR set to: 0
  8193                           ;ff.c: 1097: if (idx >= dp->fs->n_rootdir)
  8194  0031DC  C0BF  FFD9         	movff	dir_sdi@dp,fsr2l
  8195  0031E0  C0C0  FFDA         	movff	dir_sdi@dp+1,fsr2h
  8196  0031E4  EE10 F008          	lfsr	1,8
  8197  0031E8  50DE               	movf	postinc2,w,c
  8198  0031EA  26E1               	addwf	fsr1l,f,c
  8199  0031EC  50DD               	movf	postdec2,w,c
  8200  0031EE  22E2               	addwfc	fsr1h,f,c
  8201  0031F0  50E6               	movf	postinc1,w,c
  8202  0031F2  5DC1               	subwf	dir_sdi@idx& (0+255),w,b
  8203  0031F4  50E6               	movf	postinc1,w,c
  8204  0031F6  59C2               	subwfb	(dir_sdi@idx+1)& (0+255),w,b
  8205  0031F8  A0D8               	btfss	status,0,c
  8206  0031FA  D002               	goto	l1197
  8207                           
  8208                           ; BSR set to: 0
  8209                           ;ff.c: 1098: return FR_INT_ERR;
  8210  0031FC  0E02               	movlw	2
  8211                           
  8212                           ; BSR set to: 0
  8213  0031FE  0012               	return	
  8214  003200                     l1197:
  8215                           
  8216                           ; BSR set to: 0
  8217                           ;ff.c: 1099: sect = dp->fs->dirbase;
  8218                           
  8219                           ; BSR set to: 0
  8220  003200  C0BF  FFD9         	movff	dir_sdi@dp,fsr2l
  8221  003204  C0C0  FFDA         	movff	dir_sdi@dp+1,fsr2h
  8222  003208  EE10 F022          	lfsr	1,34
  8223  00320C  50DE               	movf	postinc2,w,c
  8224  00320E  26E1               	addwf	fsr1l,f,c
  8225  003210  50DD               	movf	postdec2,w,c
  8226  003212  22E2               	addwfc	fsr1h,f,c
  8227  003214  CFE6 F0CC          	movff	postinc1,dir_sdi@sect
  8228  003218  CFE6 F0CD          	movff	postinc1,dir_sdi@sect+1
  8229  00321C  CFE6 F0CE          	movff	postinc1,dir_sdi@sect+2
  8230  003220  CFE6 F0CF          	movff	postinc1,dir_sdi@sect+3
  8231                           
  8232                           ;ff.c: 1100: }
  8233  003224  D07B               	goto	l1198
  8234  003226                     l1196:
  8235                           
  8236                           ; BSR set to: 0
  8237                           ;ff.c: 1101: else {
  8238                           ;ff.c: 1102: ic = ((UINT)512) / 32 * dp->fs->csize;
  8239                           
  8240                           ; BSR set to: 0
  8241  003226  C0BF  FFD9         	movff	dir_sdi@dp,fsr2l
  8242  00322A  C0C0  FFDA         	movff	dir_sdi@dp+1,fsr2h
  8243  00322E  EE10 F002          	lfsr	1,2
  8244  003232  50DE               	movf	postinc2,w,c
  8245  003234  26E1               	addwf	fsr1l,f,c
  8246  003236  50DD               	movf	postdec2,w,c
  8247  003238  22E2               	addwfc	fsr1h,f,c
  8248  00323A  50E7               	movf	indf1,w,c
  8249  00323C  6FC3               	movwf	??_dir_sdi& (0+255),b
  8250  00323E  51C3               	movf	??_dir_sdi& (0+255),w,b
  8251  003240  0D10               	mullw	16
  8252  003242  CFF3 F0CA          	movff	prodl,dir_sdi@ic
  8253  003246  CFF4 F0CB          	movff	prodh,dir_sdi@ic+1
  8254                           
  8255                           ;ff.c: 1103: while (idx >= ic) {
  8256  00324A  D048               	goto	l1199
  8257  00324C                     
  8258                           ; BSR set to: 0
  8259                           ;ff.c: 1104: clst = get_fat(dp->fs, clst);
  8260                           
  8261                           ; BSR set to: 0
  8262  00324C  C0BF  FFD9         	movff	dir_sdi@dp,fsr2l
  8263  003250  C0C0  FFDA         	movff	dir_sdi@dp+1,fsr2h
  8264  003254  CFDE F0A5          	movff	postinc2,get_fat@fs
  8265  003258  CFDD F0A6          	movff	postdec2,get_fat@fs+1
  8266  00325C  C0D0  F0A7         	movff	dir_sdi@clst,get_fat@clst
  8267  003260  C0D1  F0A8         	movff	dir_sdi@clst+1,get_fat@clst+1
  8268  003264  C0D2  F0A9         	movff	dir_sdi@clst+2,get_fat@clst+2
  8269  003268  C0D3  F0AA         	movff	dir_sdi@clst+3,get_fat@clst+3
  8270  00326C  EC33  F015         	call	_get_fat	;wreg free
  8271  003270  C0A5  F0D0         	movff	?_get_fat,dir_sdi@clst
  8272  003274  C0A6  F0D1         	movff	?_get_fat+1,dir_sdi@clst+1
  8273  003278  C0A7  F0D2         	movff	?_get_fat+2,dir_sdi@clst+2
  8274  00327C  C0A8  F0D3         	movff	?_get_fat+3,dir_sdi@clst+3
  8275                           
  8276                           ;ff.c: 1105: if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  8277  003280  0100               	movlb	0	; () banked
  8278  003282  29D0               	incf	dir_sdi@clst& (0+255),w,b
  8279  003284  E109               	bnz	l11393
  8280  003286  29D1               	incf	(dir_sdi@clst+1)& (0+255),w,b
  8281  003288  E107               	bnz	l11393
  8282  00328A  29D2               	incf	(dir_sdi@clst+2)& (0+255),w,b
  8283  00328C  E105               	bnz	l11393
  8284  00328E  29D3               	incf	(dir_sdi@clst+3)& (0+255),w,b
  8285  003290  A4D8               	btfss	status,2,c
  8286  003292  D002               	goto	l1201
  8287                           
  8288                           ; BSR set to: 0
  8289  003294  0E01               	movlw	1
  8290                           
  8291                           ; BSR set to: 0
  8292  003296  0012               	return	
  8293  003298                     l1201:
  8294  003298                     l11393:
  8295                           
  8296                           ; BSR set to: 0
  8297                           ;ff.c: 1106: if (clst < 2 || clst >= dp->fs->n_fatent)
  8298  003298  51D3               	movf	(dir_sdi@clst+3)& (0+255),w,b
  8299  00329A  11D2               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  8300  00329C  11D1               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  8301  00329E  E104               	bnz	u15220
  8302  0032A0  0E02               	movlw	2
  8303  0032A2  5DD0               	subwf	dir_sdi@clst& (0+255),w,b
  8304  0032A4  A0D8               	btfss	status,0,c
  8305  0032A6  D014               	goto	u15230
  8306  0032A8                     u15220:
  8307                           
  8308                           ; BSR set to: 0
  8309  0032A8  C0BF  FFD9         	movff	dir_sdi@dp,fsr2l
  8310  0032AC  C0C0  FFDA         	movff	dir_sdi@dp+1,fsr2h
  8311  0032B0  EE10 F012          	lfsr	1,18
  8312  0032B4  50DE               	movf	postinc2,w,c
  8313  0032B6  26E1               	addwf	fsr1l,f,c
  8314  0032B8  50DD               	movf	postdec2,w,c
  8315  0032BA  22E2               	addwfc	fsr1h,f,c
  8316  0032BC  50E6               	movf	postinc1,w,c
  8317  0032BE  5DD0               	subwf	dir_sdi@clst& (0+255),w,b
  8318  0032C0  50E6               	movf	postinc1,w,c
  8319  0032C2  59D1               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  8320  0032C4  50E6               	movf	postinc1,w,c
  8321  0032C6  59D2               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  8322  0032C8  50E6               	movf	postinc1,w,c
  8323  0032CA  59D3               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  8324  0032CC  A0D8               	btfss	status,0,c
  8325  0032CE  D002               	goto	l1202
  8326  0032D0                     u15230:
  8327                           
  8328                           ; BSR set to: 0
  8329                           ;ff.c: 1107: return FR_INT_ERR;
  8330                           
  8331                           ; BSR set to: 0
  8332  0032D0  0E02               	movlw	2
  8333                           
  8334                           ; BSR set to: 0
  8335  0032D2  0012               	return	
  8336  0032D4                     l1202:
  8337                           
  8338                           ; BSR set to: 0
  8339                           ;ff.c: 1108: idx -= ic;
  8340                           
  8341                           ; BSR set to: 0
  8342  0032D4  51CA               	movf	dir_sdi@ic& (0+255),w,b
  8343  0032D6  5FC1               	subwf	dir_sdi@idx& (0+255),f,b
  8344  0032D8  51CB               	movf	(dir_sdi@ic+1)& (0+255),w,b
  8345  0032DA  5BC2               	subwfb	(dir_sdi@idx+1)& (0+255),f,b
  8346  0032DC                     l1199:
  8347                           
  8348                           ; BSR set to: 0
  8349  0032DC  51CA               	movf	dir_sdi@ic& (0+255),w,b
  8350  0032DE  5DC1               	subwf	dir_sdi@idx& (0+255),w,b
  8351  0032E0  51CB               	movf	(dir_sdi@ic+1)& (0+255),w,b
  8352  0032E2  59C2               	subwfb	(dir_sdi@idx+1)& (0+255),w,b
  8353  0032E4  B0D8               	btfsc	status,0,c
  8354  0032E6  D7B2               	goto	l1200
  8355                           
  8356                           ; BSR set to: 0
  8357                           ;ff.c: 1109: }
  8358                           ;ff.c: 1110: sect = clust2sect(dp->fs, clst);
  8359                           
  8360                           ; BSR set to: 0
  8361  0032E8  C0BF  FFD9         	movff	dir_sdi@dp,fsr2l
  8362  0032EC  C0C0  FFDA         	movff	dir_sdi@dp+1,fsr2h
  8363  0032F0  CFDE F026          	movff	postinc2,clust2sect@fs
  8364  0032F4  CFDD F027          	movff	postdec2,clust2sect@fs+1
  8365  0032F8  C0D0  F028         	movff	dir_sdi@clst,clust2sect@clst
  8366  0032FC  C0D1  F029         	movff	dir_sdi@clst+1,clust2sect@clst+1
  8367  003300  C0D2  F02A         	movff	dir_sdi@clst+2,clust2sect@clst+2
  8368  003304  C0D3  F02B         	movff	dir_sdi@clst+3,clust2sect@clst+3
  8369  003308  EC41  F025         	call	_clust2sect	;wreg free
  8370  00330C  C026  F0CC         	movff	?_clust2sect,dir_sdi@sect
  8371  003310  C027  F0CD         	movff	?_clust2sect+1,dir_sdi@sect+1
  8372  003314  C028  F0CE         	movff	?_clust2sect+2,dir_sdi@sect+2
  8373  003318  C029  F0CF         	movff	?_clust2sect+3,dir_sdi@sect+3
  8374  00331C                     l1198:
  8375                           
  8376                           ;ff.c: 1111: }
  8377                           ;ff.c: 1112: dp->clust = clst;
  8378  00331C  0100               	movlb	0	; () banked
  8379  00331E  EE20 F00A          	lfsr	2,10
  8380  003322  51BF               	movf	dir_sdi@dp& (0+255),w,b
  8381  003324  26D9               	addwf	fsr2l,f,c
  8382  003326  51C0               	movf	(dir_sdi@dp+1)& (0+255),w,b
  8383  003328  22DA               	addwfc	fsr2h,f,c
  8384  00332A  C0D0  FFDE         	movff	dir_sdi@clst,postinc2
  8385  00332E  C0D1  FFDE         	movff	dir_sdi@clst+1,postinc2
  8386  003332  C0D2  FFDE         	movff	dir_sdi@clst+2,postinc2
  8387  003336  C0D3  FFDE         	movff	dir_sdi@clst+3,postinc2
  8388                           
  8389                           ; BSR set to: 0
  8390                           ;ff.c: 1113: if (!sect) return FR_INT_ERR;
  8391  00333A  51CC               	movf	dir_sdi@sect& (0+255),w,b
  8392  00333C  11CD               	iorwf	(dir_sdi@sect+1)& (0+255),w,b
  8393  00333E  11CE               	iorwf	(dir_sdi@sect+2)& (0+255),w,b
  8394  003340  11CF               	iorwf	(dir_sdi@sect+3)& (0+255),w,b
  8395  003342  A4D8               	btfss	status,2,c
  8396  003344  D002               	goto	l1206
  8397                           
  8398                           ; BSR set to: 0
  8399  003346  0E02               	movlw	2
  8400                           
  8401                           ; BSR set to: 0
  8402  003348  0012               	return	
  8403  00334A                     l1206:
  8404                           
  8405                           ; BSR set to: 0
  8406                           ;ff.c: 1114: dp->sect = sect + idx / (((UINT)512) / 32);
  8407                           
  8408                           ; BSR set to: 0
  8409  00334A  C0C1  F0C3         	movff	dir_sdi@idx,??_dir_sdi
  8410  00334E  C0C2  F0C4         	movff	dir_sdi@idx+1,??_dir_sdi+1
  8411  003352  0E04               	movlw	4
  8412  003354  6FC5               	movwf	(??_dir_sdi+2)& (0+255),b
  8413  003356                     u15265:
  8414  003356  90D8               	bcf	status,0,c
  8415  003358  33C4               	rrcf	(??_dir_sdi+1)& (0+255),f,b
  8416  00335A  33C3               	rrcf	??_dir_sdi& (0+255),f,b
  8417  00335C  2FC5               	decfsz	(??_dir_sdi+2)& (0+255),f,b
  8418  00335E  D7FB               	goto	u15265
  8419  003360  51C3               	movf	??_dir_sdi& (0+255),w,b
  8420  003362  25CC               	addwf	dir_sdi@sect& (0+255),w,b
  8421  003364  6FC6               	movwf	(??_dir_sdi+3)& (0+255),b
  8422  003366  51C4               	movf	(??_dir_sdi+1)& (0+255),w,b
  8423  003368  21CD               	addwfc	(dir_sdi@sect+1)& (0+255),w,b
  8424  00336A  6FC7               	movwf	(??_dir_sdi+4)& (0+255),b
  8425  00336C  0E00               	movlw	0
  8426  00336E  21CE               	addwfc	(dir_sdi@sect+2)& (0+255),w,b
  8427  003370  6FC8               	movwf	(??_dir_sdi+5)& (0+255),b
  8428  003372  0E00               	movlw	0
  8429  003374  21CF               	addwfc	(dir_sdi@sect+3)& (0+255),w,b
  8430  003376  6FC9               	movwf	(??_dir_sdi+6)& (0+255),b
  8431  003378  EE20 F00E          	lfsr	2,14
  8432  00337C  51BF               	movf	dir_sdi@dp& (0+255),w,b
  8433  00337E  26D9               	addwf	fsr2l,f,c
  8434  003380  51C0               	movf	(dir_sdi@dp+1)& (0+255),w,b
  8435  003382  22DA               	addwfc	fsr2h,f,c
  8436  003384  C0C6  FFDE         	movff	??_dir_sdi+3,postinc2
  8437  003388  C0C7  FFDE         	movff	??_dir_sdi+4,postinc2
  8438  00338C  C0C8  FFDE         	movff	??_dir_sdi+5,postinc2
  8439  003390  C0C9  FFDE         	movff	??_dir_sdi+6,postinc2
  8440                           
  8441                           ;ff.c: 1115: dp->dir = dp->fs->win + (idx % (((UINT)512) / 32)) * 32;
  8442  003394  0E0F               	movlw	15
  8443  003396  15C1               	andwf	dir_sdi@idx& (0+255),w,b
  8444  003398  6FC3               	movwf	??_dir_sdi& (0+255),b
  8445  00339A  0E00               	movlw	0
  8446  00339C  15C2               	andwf	(dir_sdi@idx+1)& (0+255),w,b
  8447  00339E  6FC4               	movwf	(??_dir_sdi+1)& (0+255),b
  8448  0033A0  0E05               	movlw	5
  8449  0033A2                     u15275:
  8450  0033A2  90D8               	bcf	status,0,c
  8451  0033A4  37C3               	rlcf	??_dir_sdi& (0+255),f,b
  8452  0033A6  37C4               	rlcf	(??_dir_sdi+1)& (0+255),f,b
  8453  0033A8  2EE8               	decfsz	wreg,f,c
  8454  0033AA  D7FB               	goto	u15275
  8455  0033AC  0E2E               	movlw	46
  8456  0033AE  27C3               	addwf	??_dir_sdi& (0+255),f,b
  8457  0033B0  0E00               	movlw	0
  8458  0033B2  23C4               	addwfc	(??_dir_sdi+1)& (0+255),f,b
  8459  0033B4  C0BF  FFD9         	movff	dir_sdi@dp,fsr2l
  8460  0033B8  C0C0  FFDA         	movff	dir_sdi@dp+1,fsr2h
  8461  0033BC  CFDE F0C5          	movff	postinc2,??_dir_sdi+2
  8462  0033C0  CFDD F0C6          	movff	postdec2,??_dir_sdi+3
  8463  0033C4  51C3               	movf	??_dir_sdi& (0+255),w,b
  8464  0033C6  27C5               	addwf	(??_dir_sdi+2)& (0+255),f,b
  8465  0033C8  51C4               	movf	(??_dir_sdi+1)& (0+255),w,b
  8466  0033CA  23C6               	addwfc	(??_dir_sdi+3)& (0+255),f,b
  8467  0033CC  EE20 F012          	lfsr	2,18
  8468  0033D0  51BF               	movf	dir_sdi@dp& (0+255),w,b
  8469  0033D2  26D9               	addwf	fsr2l,f,c
  8470  0033D4  51C0               	movf	(dir_sdi@dp+1)& (0+255),w,b
  8471  0033D6  22DA               	addwfc	fsr2h,f,c
  8472  0033D8  C0C5  FFDE         	movff	??_dir_sdi+2,postinc2
  8473  0033DC  C0C6  FFDD         	movff	??_dir_sdi+3,postdec2
  8474                           
  8475                           ; BSR set to: 0
  8476                           ;ff.c: 1117: return FR_OK;
  8477  0033E0  0E00               	movlw	0
  8478  0033E2  0012               	return	
  8479  0033E4                     __end_of_dir_sdi:
  8480                           	opt stack 0
  8481                           tosu	equ	0xFFF
  8482                           tosh	equ	0xFFE
  8483                           tosl	equ	0xFFD
  8484                           pclath	equ	0xFFA
  8485                           tblptru	equ	0xFF8
  8486                           tblptrh	equ	0xFF7
  8487                           tblptrl	equ	0xFF6
  8488                           tablat	equ	0xFF5
  8489                           prodh	equ	0xFF4
  8490                           prodl	equ	0xFF3
  8491                           intcon	equ	0xFF2
  8492                           intcon2	equ	0xFF1
  8493                           intcon3	equ	0xFF0
  8494                           indf0	equ	0xFEF
  8495                           postinc0	equ	0xFEE
  8496                           fsr0h	equ	0xFEA
  8497                           fsr0l	equ	0xFE9
  8498                           wreg	equ	0xFE8
  8499                           indf1	equ	0xFE7
  8500                           postinc1	equ	0xFE6
  8501                           postdec1	equ	0xFE5
  8502                           fsr1h	equ	0xFE2
  8503                           fsr1l	equ	0xFE1
  8504                           indf2	equ	0xFDF
  8505                           postinc2	equ	0xFDE
  8506                           postdec2	equ	0xFDD
  8507                           plusw2	equ	0xFDB
  8508                           fsr2h	equ	0xFDA
  8509                           fsr2l	equ	0xFD9
  8510                           status	equ	0xFD8
  8511                           
  8512 ;; *************** function _dir_next *****************
  8513 ;; Defined at:
  8514 ;;		line 1128 in file "bibliotecas/ff.c"
  8515 ;; Parameters:    Size  Location     Type
  8516 ;;  dp              2  119[BANK0 ] PTR struct .
  8517 ;;		 -> f_open@dj(22), 
  8518 ;;  stretch         2  121[BANK0 ] int 
  8519 ;; Auto vars:     Size  Location     Type
  8520 ;;  clst            4  134[BANK0 ] unsigned long 
  8521 ;;  i               2  132[BANK0 ] unsigned int 
  8522 ;;  c               2  130[BANK0 ] unsigned int 
  8523 ;; Return value:  Size  Location     Type
  8524 ;;                  1    wreg      enum E75
  8525 ;; Registers used:
  8526 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8527 ;; Tracked objects:
  8528 ;;		On entry : 0/0
  8529 ;;		On exit  : 0/0
  8530 ;;		Unchanged: 0/0
  8531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8532 ;;      Params:         0       4       0       0       0       0       0       0       0
  8533 ;;      Locals:         0       8       0       0       0       0       0       0       0
  8534 ;;      Temps:          0       7       0       0       0       0       0       0       0
  8535 ;;      Totals:         0      19       0       0       0       0       0       0       0
  8536 ;;Total ram usage:       19 bytes
  8537 ;; Hardware stack levels used:    1
  8538 ;; Hardware stack levels required when called:   13
  8539 ;; This function calls:
  8540 ;;		_clust2sect
  8541 ;;		_create_chain
  8542 ;;		_get_fat
  8543 ;;		_mem_set
  8544 ;;		_sync_window
  8545 ;; This function is called by:
  8546 ;;		_dir_alloc
  8547 ;;		_dir_find
  8548 ;; This function uses a non-reentrant model
  8549 ;;
  8550                           
  8551                           	psect	text28
  8552  001E56                     __ptext28:
  8553                           	opt stack 0
  8554  001E56                     _dir_next:
  8555                           	opt stack 12
  8556                           
  8557                           ;ff.c: 1133: DWORD clst;
  8558                           ;ff.c: 1134: UINT i;
  8559                           ;ff.c: 1136: UINT c;
  8560                           ;ff.c: 1140: i = dp->index + 1;
  8561                           
  8562                           ; BSR set to: 0
  8563                           ;incstack = 0
  8564  001E56  0100               	movlb	0	; () banked
  8565  001E58  EE20 F004          	lfsr	2,4
  8566  001E5C  51D7               	movf	dir_next@dp& (0+255),w,b
  8567  001E5E  26D9               	addwf	fsr2l,f,c
  8568  001E60  51D8               	movf	(dir_next@dp+1)& (0+255),w,b
  8569  001E62  22DA               	addwfc	fsr2h,f,c
  8570  001E64  CFDE F0DB          	movff	postinc2,??_dir_next
  8571  001E68  CFDD F0DC          	movff	postdec2,??_dir_next+1
  8572  001E6C  0E01               	movlw	1
  8573  001E6E  25DB               	addwf	??_dir_next& (0+255),w,b
  8574  001E70  6FE4               	movwf	dir_next@i& (0+255),b
  8575  001E72  0E00               	movlw	0
  8576  001E74  21DC               	addwfc	(??_dir_next+1)& (0+255),w,b
  8577  001E76  6FE5               	movwf	(dir_next@i+1)& (0+255),b
  8578                           
  8579                           ; BSR set to: 0
  8580                           ;ff.c: 1141: if (!(i & 0xFFFF) || !dp->sect)
  8581  001E78  51E4               	movf	dir_next@i& (0+255),w,b
  8582  001E7A  11E5               	iorwf	(dir_next@i+1)& (0+255),w,b
  8583  001E7C  B4D8               	btfsc	status,2,c
  8584  001E7E  D00C               	goto	u15290
  8585                           
  8586                           ; BSR set to: 0
  8587  001E80  EE20 F00E          	lfsr	2,14
  8588  001E84  51D7               	movf	dir_next@dp& (0+255),w,b
  8589  001E86  26D9               	addwf	fsr2l,f,c
  8590  001E88  51D8               	movf	(dir_next@dp+1)& (0+255),w,b
  8591  001E8A  22DA               	addwfc	fsr2h,f,c
  8592  001E8C  50DE               	movf	postinc2,w,c
  8593  001E8E  10DE               	iorwf	postinc2,w,c
  8594  001E90  10DE               	iorwf	postinc2,w,c
  8595  001E92  10DE               	iorwf	postinc2,w,c
  8596  001E94  A4D8               	btfss	status,2,c
  8597  001E96  D002               	goto	l1209
  8598  001E98                     u15290:
  8599                           
  8600                           ; BSR set to: 0
  8601                           ;ff.c: 1142: return FR_NO_FILE;
  8602                           
  8603                           ; BSR set to: 0
  8604  001E98  0E04               	movlw	4
  8605                           
  8606                           ; BSR set to: 0
  8607  001E9A  0012               	return	
  8608  001E9C                     l1209:
  8609                           
  8610                           ; BSR set to: 0
  8611                           ;ff.c: 1144: if (!(i % (((UINT)512) / 32))) {
  8612                           
  8613                           ; BSR set to: 0
  8614  001E9C  0E0F               	movlw	15
  8615  001E9E  15E4               	andwf	dir_next@i& (0+255),w,b
  8616  001EA0  6FDB               	movwf	??_dir_next& (0+255),b
  8617  001EA2  0E00               	movlw	0
  8618  001EA4  15E5               	andwf	(dir_next@i+1)& (0+255),w,b
  8619  001EA6  6FDC               	movwf	(??_dir_next+1)& (0+255),b
  8620  001EA8  51DB               	movf	??_dir_next& (0+255),w,b
  8621  001EAA  11DC               	iorwf	(??_dir_next+1)& (0+255),w,b
  8622  001EAC  A4D8               	btfss	status,2,c
  8623  001EAE  D1AF               	goto	l1217
  8624                           
  8625                           ; BSR set to: 0
  8626                           ;ff.c: 1145: dp->sect++;
  8627  001EB0  EE20 F00E          	lfsr	2,14
  8628  001EB4  51D7               	movf	dir_next@dp& (0+255),w,b
  8629  001EB6  26D9               	addwf	fsr2l,f,c
  8630  001EB8  51D8               	movf	(dir_next@dp+1)& (0+255),w,b
  8631  001EBA  22DA               	addwfc	fsr2h,f,c
  8632  001EBC  2ADE               	incf	postinc2,f,c
  8633  001EBE  0E00               	movlw	0
  8634  001EC0  22DE               	addwfc	postinc2,f,c
  8635  001EC2  22DE               	addwfc	postinc2,f,c
  8636  001EC4  22DE               	addwfc	postinc2,f,c
  8637                           
  8638                           ;ff.c: 1147: if (!dp->clust) {
  8639  001EC6  EE20 F00A          	lfsr	2,10
  8640  001ECA  51D7               	movf	dir_next@dp& (0+255),w,b
  8641  001ECC  26D9               	addwf	fsr2l,f,c
  8642  001ECE  51D8               	movf	(dir_next@dp+1)& (0+255),w,b
  8643  001ED0  22DA               	addwfc	fsr2h,f,c
  8644  001ED2  50DE               	movf	postinc2,w,c
  8645  001ED4  10DE               	iorwf	postinc2,w,c
  8646  001ED6  10DE               	iorwf	postinc2,w,c
  8647  001ED8  10DE               	iorwf	postinc2,w,c
  8648  001EDA  A4D8               	btfss	status,2,c
  8649  001EDC  D012               	goto	l1214
  8650                           
  8651                           ; BSR set to: 0
  8652                           ;ff.c: 1148: if (i >= dp->fs->n_rootdir)
  8653  001EDE  C0D7  FFD9         	movff	dir_next@dp,fsr2l
  8654  001EE2  C0D8  FFDA         	movff	dir_next@dp+1,fsr2h
  8655  001EE6  EE10 F008          	lfsr	1,8
  8656  001EEA  50DE               	movf	postinc2,w,c
  8657  001EEC  26E1               	addwf	fsr1l,f,c
  8658  001EEE  50DD               	movf	postdec2,w,c
  8659  001EF0  22E2               	addwfc	fsr1h,f,c
  8660  001EF2  50E6               	movf	postinc1,w,c
  8661  001EF4  5DE4               	subwf	dir_next@i& (0+255),w,b
  8662  001EF6  50E6               	movf	postinc1,w,c
  8663  001EF8  59E5               	subwfb	(dir_next@i+1)& (0+255),w,b
  8664  001EFA  A0D8               	btfss	status,0,c
  8665  001EFC  D188               	goto	l1217
  8666                           
  8667                           ; BSR set to: 0
  8668                           ;ff.c: 1149: return FR_NO_FILE;
  8669  001EFE  0E04               	movlw	4
  8670                           
  8671                           ; BSR set to: 0
  8672  001F00  0012               	return	
  8673  001F02                     l1214:
  8674                           
  8675                           ; BSR set to: 0
  8676                           ;ff.c: 1151: else {
  8677                           ;ff.c: 1152: if (((i / (((UINT)512) / 32)) & (dp->fs->csize - 1)) == 0) {
  8678                           
  8679                           ; BSR set to: 0
  8680  001F02  C0E4  F0DB         	movff	dir_next@i,??_dir_next
  8681  001F06  C0E5  F0DC         	movff	dir_next@i+1,??_dir_next+1
  8682  001F0A  0E04               	movlw	4
  8683  001F0C  6FDD               	movwf	(??_dir_next+2)& (0+255),b
  8684  001F0E                     u15335:
  8685  001F0E  90D8               	bcf	status,0,c
  8686  001F10  33DC               	rrcf	(??_dir_next+1)& (0+255),f,b
  8687  001F12  33DB               	rrcf	??_dir_next& (0+255),f,b
  8688  001F14  2FDD               	decfsz	(??_dir_next+2)& (0+255),f,b
  8689  001F16  D7FB               	goto	u15335
  8690  001F18  0EFF               	movlw	255
  8691  001F1A  6FDE               	movwf	(??_dir_next+3)& (0+255),b
  8692  001F1C  0EFF               	movlw	255
  8693  001F1E  6FDF               	movwf	(??_dir_next+4)& (0+255),b
  8694  001F20  C0D7  FFD9         	movff	dir_next@dp,fsr2l
  8695  001F24  C0D8  FFDA         	movff	dir_next@dp+1,fsr2h
  8696  001F28  EE10 F002          	lfsr	1,2
  8697  001F2C  50DE               	movf	postinc2,w,c
  8698  001F2E  26E1               	addwf	fsr1l,f,c
  8699  001F30  50DD               	movf	postdec2,w,c
  8700  001F32  22E2               	addwfc	fsr1h,f,c
  8701  001F34  50E7               	movf	indf1,w,c
  8702  001F36  6FE0               	movwf	(??_dir_next+5)& (0+255),b
  8703  001F38  6BE1               	clrf	(??_dir_next+6)& (0+255),b
  8704  001F3A  51DE               	movf	(??_dir_next+3)& (0+255),w,b
  8705  001F3C  27E0               	addwf	(??_dir_next+5)& (0+255),f,b
  8706  001F3E  51DF               	movf	(??_dir_next+4)& (0+255),w,b
  8707  001F40  23E1               	addwfc	(??_dir_next+6)& (0+255),f,b
  8708  001F42  51DB               	movf	??_dir_next& (0+255),w,b
  8709  001F44  17E0               	andwf	(??_dir_next+5)& (0+255),f,b
  8710  001F46  51DC               	movf	(??_dir_next+1)& (0+255),w,b
  8711  001F48  17E1               	andwf	(??_dir_next+6)& (0+255),f,b
  8712  001F4A  51E0               	movf	(??_dir_next+5)& (0+255),w,b
  8713  001F4C  11E1               	iorwf	(??_dir_next+6)& (0+255),w,b
  8714  001F4E  A4D8               	btfss	status,2,c
  8715  001F50  D15E               	goto	l1217
  8716                           
  8717                           ; BSR set to: 0
  8718                           ;ff.c: 1153: clst = get_fat(dp->fs, dp->clust);
  8719  001F52  C0D7  FFD9         	movff	dir_next@dp,fsr2l
  8720  001F56  C0D8  FFDA         	movff	dir_next@dp+1,fsr2h
  8721  001F5A  CFDE F0A5          	movff	postinc2,get_fat@fs
  8722  001F5E  CFDD F0A6          	movff	postdec2,get_fat@fs+1
  8723  001F62  EE20 F00A          	lfsr	2,10
  8724  001F66  51D7               	movf	dir_next@dp& (0+255),w,b
  8725  001F68  26D9               	addwf	fsr2l,f,c
  8726  001F6A  51D8               	movf	(dir_next@dp+1)& (0+255),w,b
  8727  001F6C  22DA               	addwfc	fsr2h,f,c
  8728  001F6E  CFDE F0A7          	movff	postinc2,get_fat@clst
  8729  001F72  CFDE F0A8          	movff	postinc2,get_fat@clst+1
  8730  001F76  CFDE F0A9          	movff	postinc2,get_fat@clst+2
  8731  001F7A  CFDE F0AA          	movff	postinc2,get_fat@clst+3
  8732  001F7E  EC33  F015         	call	_get_fat	;wreg free
  8733  001F82  C0A5  F0E6         	movff	?_get_fat,dir_next@clst
  8734  001F86  C0A6  F0E7         	movff	?_get_fat+1,dir_next@clst+1
  8735  001F8A  C0A7  F0E8         	movff	?_get_fat+2,dir_next@clst+2
  8736  001F8E  C0A8  F0E9         	movff	?_get_fat+3,dir_next@clst+3
  8737                           
  8738                           ;ff.c: 1154: if (clst <= 1) return FR_INT_ERR;
  8739  001F92  0100               	movlb	0	; () banked
  8740  001F94  51E9               	movf	(dir_next@clst+3)& (0+255),w,b
  8741  001F96  11E8               	iorwf	(dir_next@clst+2)& (0+255),w,b
  8742  001F98  11E7               	iorwf	(dir_next@clst+1)& (0+255),w,b
  8743  001F9A  E106               	bnz	l11449
  8744  001F9C  0E02               	movlw	2
  8745  001F9E  5DE6               	subwf	dir_next@clst& (0+255),w,b
  8746  001FA0  B0D8               	btfsc	status,0,c
  8747  001FA2  D002               	goto	l1218
  8748                           
  8749                           ; BSR set to: 0
  8750  001FA4  0E02               	movlw	2
  8751                           
  8752                           ; BSR set to: 0
  8753  001FA6  0012               	return	
  8754  001FA8                     l1218:
  8755  001FA8                     l11449:
  8756                           
  8757                           ; BSR set to: 0
  8758                           ;ff.c: 1155: if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  8759  001FA8  29E6               	incf	dir_next@clst& (0+255),w,b
  8760  001FAA  E109               	bnz	l11455
  8761  001FAC  29E7               	incf	(dir_next@clst+1)& (0+255),w,b
  8762  001FAE  E107               	bnz	l11455
  8763  001FB0  29E8               	incf	(dir_next@clst+2)& (0+255),w,b
  8764  001FB2  E105               	bnz	l11455
  8765  001FB4  29E9               	incf	(dir_next@clst+3)& (0+255),w,b
  8766  001FB6  A4D8               	btfss	status,2,c
  8767  001FB8  D002               	goto	l1219
  8768                           
  8769                           ; BSR set to: 0
  8770  001FBA  0E01               	movlw	1
  8771                           
  8772                           ; BSR set to: 0
  8773  001FBC  0012               	return	
  8774  001FBE                     l1219:
  8775  001FBE                     l11455:
  8776                           
  8777                           ; BSR set to: 0
  8778                           ;ff.c: 1156: if (clst >= dp->fs->n_fatent) {
  8779  001FBE  C0D7  FFD9         	movff	dir_next@dp,fsr2l
  8780  001FC2  C0D8  FFDA         	movff	dir_next@dp+1,fsr2h
  8781  001FC6  EE10 F012          	lfsr	1,18
  8782  001FCA  50DE               	movf	postinc2,w,c
  8783  001FCC  26E1               	addwf	fsr1l,f,c
  8784  001FCE  50DD               	movf	postdec2,w,c
  8785  001FD0  22E2               	addwfc	fsr1h,f,c
  8786  001FD2  50E6               	movf	postinc1,w,c
  8787  001FD4  5DE6               	subwf	dir_next@clst& (0+255),w,b
  8788  001FD6  50E6               	movf	postinc1,w,c
  8789  001FD8  59E7               	subwfb	(dir_next@clst+1)& (0+255),w,b
  8790  001FDA  50E6               	movf	postinc1,w,c
  8791  001FDC  59E8               	subwfb	(dir_next@clst+2)& (0+255),w,b
  8792  001FDE  50E6               	movf	postinc1,w,c
  8793  001FE0  59E9               	subwfb	(dir_next@clst+3)& (0+255),w,b
  8794  001FE2  A0D8               	btfss	status,0,c
  8795  001FE4  D0E5               	goto	l1220
  8796                           
  8797                           ; BSR set to: 0
  8798                           ;ff.c: 1158: if (!stretch) return FR_NO_FILE;
  8799  001FE6  51D9               	movf	dir_next@stretch& (0+255),w,b
  8800  001FE8  11DA               	iorwf	(dir_next@stretch+1)& (0+255),w,b
  8801  001FEA  A4D8               	btfss	status,2,c
  8802  001FEC  D002               	goto	l1221
  8803                           
  8804                           ; BSR set to: 0
  8805  001FEE  0E04               	movlw	4
  8806                           
  8807                           ; BSR set to: 0
  8808  001FF0  0012               	return	
  8809  001FF2                     l1221:
  8810                           
  8811                           ; BSR set to: 0
  8812                           ;ff.c: 1159: clst = create_chain(dp->fs, dp->clust);
  8813                           
  8814                           ; BSR set to: 0
  8815  001FF2  C0D7  FFD9         	movff	dir_next@dp,fsr2l
  8816  001FF6  C0D8  FFDA         	movff	dir_next@dp+1,fsr2h
  8817  001FFA  CFDE F0C0          	movff	postinc2,create_chain@fs
  8818  001FFE  CFDD F0C1          	movff	postdec2,create_chain@fs+1
  8819  002002  EE20 F00A          	lfsr	2,10
  8820  002006  51D7               	movf	dir_next@dp& (0+255),w,b
  8821  002008  26D9               	addwf	fsr2l,f,c
  8822  00200A  51D8               	movf	(dir_next@dp+1)& (0+255),w,b
  8823  00200C  22DA               	addwfc	fsr2h,f,c
  8824  00200E  CFDE F0C2          	movff	postinc2,create_chain@clst
  8825  002012  CFDE F0C3          	movff	postinc2,create_chain@clst+1
  8826  002016  CFDE F0C4          	movff	postinc2,create_chain@clst+2
  8827  00201A  CFDE F0C5          	movff	postinc2,create_chain@clst+3
  8828  00201E  ECF2  F016         	call	_create_chain	;wreg free
  8829  002022  C0C0  F0E6         	movff	?_create_chain,dir_next@clst
  8830  002026  C0C1  F0E7         	movff	?_create_chain+1,dir_next@clst+1
  8831  00202A  C0C2  F0E8         	movff	?_create_chain+2,dir_next@clst+2
  8832  00202E  C0C3  F0E9         	movff	?_create_chain+3,dir_next@clst+3
  8833                           
  8834                           ;ff.c: 1160: if (clst == 0) return FR_DENIED;
  8835  002032  0100               	movlb	0	; () banked
  8836  002034  51E6               	movf	dir_next@clst& (0+255),w,b
  8837  002036  11E7               	iorwf	(dir_next@clst+1)& (0+255),w,b
  8838  002038  11E8               	iorwf	(dir_next@clst+2)& (0+255),w,b
  8839  00203A  11E9               	iorwf	(dir_next@clst+3)& (0+255),w,b
  8840  00203C  A4D8               	btfss	status,2,c
  8841  00203E  D002               	goto	l1222
  8842                           
  8843                           ; BSR set to: 0
  8844  002040  0E07               	movlw	7
  8845                           
  8846                           ; BSR set to: 0
  8847  002042  0012               	return	
  8848  002044                     l1222:
  8849                           
  8850                           ; BSR set to: 0
  8851                           ;ff.c: 1161: if (clst == 1) return FR_INT_ERR;
  8852                           
  8853                           ; BSR set to: 0
  8854  002044  05E6               	decf	dir_next@clst& (0+255),w,b
  8855  002046  11E7               	iorwf	(dir_next@clst+1)& (0+255),w,b
  8856  002048  11E8               	iorwf	(dir_next@clst+2)& (0+255),w,b
  8857  00204A  11E9               	iorwf	(dir_next@clst+3)& (0+255),w,b
  8858  00204C  A4D8               	btfss	status,2,c
  8859  00204E  D002               	goto	l1223
  8860                           
  8861                           ; BSR set to: 0
  8862  002050  0E02               	movlw	2
  8863                           
  8864                           ; BSR set to: 0
  8865  002052  0012               	return	
  8866  002054                     l1223:
  8867                           
  8868                           ; BSR set to: 0
  8869                           ;ff.c: 1162: if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  8870                           
  8871                           ; BSR set to: 0
  8872  002054  29E6               	incf	dir_next@clst& (0+255),w,b
  8873  002056  E109               	bnz	l11483
  8874  002058  29E7               	incf	(dir_next@clst+1)& (0+255),w,b
  8875  00205A  E107               	bnz	l11483
  8876  00205C  29E8               	incf	(dir_next@clst+2)& (0+255),w,b
  8877  00205E  E105               	bnz	l11483
  8878  002060  29E9               	incf	(dir_next@clst+3)& (0+255),w,b
  8879  002062  A4D8               	btfss	status,2,c
  8880  002064  D002               	goto	l1224
  8881                           
  8882                           ; BSR set to: 0
  8883  002066  0E01               	movlw	1
  8884                           
  8885                           ; BSR set to: 0
  8886  002068  0012               	return	
  8887  00206A                     l1224:
  8888  00206A                     l11483:
  8889                           
  8890                           ; BSR set to: 0
  8891                           ;ff.c: 1164: if (sync_window(dp->fs)) return FR_DISK_ERR;
  8892  00206A  C0D7  FFD9         	movff	dir_next@dp,fsr2l
  8893  00206E  C0D8  FFDA         	movff	dir_next@dp+1,fsr2h
  8894  002072  CFDE F085          	movff	postinc2,sync_window@fs
  8895  002076  CFDD F086          	movff	postdec2,sync_window@fs+1
  8896  00207A  EC4E  F01D         	call	_sync_window	;wreg free
  8897  00207E  0900               	iorlw	0
  8898  002080  B4D8               	btfsc	status,2,c
  8899  002082  D002               	goto	l1225
  8900  002084  0E01               	movlw	1
  8901  002086  0012               	return	
  8902  002088                     l1225:
  8903                           
  8904                           ;ff.c: 1165: mem_set(dp->fs->win, 0, ((UINT)512));
  8905  002088  C0D7  FFD9         	movff	dir_next@dp,fsr2l
  8906  00208C  C0D8  FFDA         	movff	dir_next@dp+1,fsr2h
  8907  002090  CFDE F0DB          	movff	postinc2,??_dir_next
  8908  002094  CFDD F0DC          	movff	postdec2,??_dir_next+1
  8909  002098  0E2E               	movlw	46
  8910  00209A  0100               	movlb	0	; () banked
  8911  00209C  25DB               	addwf	??_dir_next& (0+255),w,b
  8912  00209E  6E1A               	movwf	mem_set@dst,c
  8913  0020A0  0E00               	movlw	0
  8914  0020A2  21DC               	addwfc	(??_dir_next+1)& (0+255),w,b
  8915  0020A4  6E1B               	movwf	mem_set@dst+1,c
  8916  0020A6  0E00               	movlw	0
  8917  0020A8  6E1D               	movwf	mem_set@val+1,c
  8918  0020AA  0E00               	movlw	0
  8919  0020AC  6E1C               	movwf	mem_set@val,c
  8920  0020AE  0E02               	movlw	2
  8921  0020B0  6E1F               	movwf	mem_set@cnt+1,c
  8922  0020B2  0E00               	movlw	0
  8923  0020B4  6E1E               	movwf	mem_set@cnt,c
  8924  0020B6  ECFF  F02C         	call	_mem_set	;wreg free
  8925                           
  8926                           ;ff.c: 1166: dp->fs->winsect = clust2sect(dp->fs, clst);
  8927  0020BA  C0D7  FFD9         	movff	dir_next@dp,fsr2l
  8928  0020BE  C0D8  FFDA         	movff	dir_next@dp+1,fsr2h
  8929  0020C2  CFDE F026          	movff	postinc2,clust2sect@fs
  8930  0020C6  CFDD F027          	movff	postdec2,clust2sect@fs+1
  8931  0020CA  C0E6  F028         	movff	dir_next@clst,clust2sect@clst
  8932  0020CE  C0E7  F029         	movff	dir_next@clst+1,clust2sect@clst+1
  8933  0020D2  C0E8  F02A         	movff	dir_next@clst+2,clust2sect@clst+2
  8934  0020D6  C0E9  F02B         	movff	dir_next@clst+3,clust2sect@clst+3
  8935  0020DA  EC41  F025         	call	_clust2sect	;wreg free
  8936  0020DE  C0D7  FFD9         	movff	dir_next@dp,fsr2l
  8937  0020E2  C0D8  FFDA         	movff	dir_next@dp+1,fsr2h
  8938  0020E6  EE10 F02A          	lfsr	1,42
  8939  0020EA  50DE               	movf	postinc2,w,c
  8940  0020EC  26E1               	addwf	fsr1l,f,c
  8941  0020EE  50DD               	movf	postdec2,w,c
  8942  0020F0  22E2               	addwfc	fsr1h,f,c
  8943  0020F2  C026  FFE6         	movff	?_clust2sect,postinc1
  8944  0020F6  C027  FFE6         	movff	?_clust2sect+1,postinc1
  8945  0020FA  C028  FFE6         	movff	?_clust2sect+2,postinc1
  8946  0020FE  C029  FFE6         	movff	?_clust2sect+3,postinc1
  8947                           
  8948                           ;ff.c: 1167: for (c = 0; c < dp->fs->csize; c++) {
  8949  002102  0E00               	movlw	0
  8950  002104  0100               	movlb	0	; () banked
  8951  002106  6FE3               	movwf	(dir_next@c+1)& (0+255),b
  8952  002108  0E00               	movlw	0
  8953  00210A  6FE2               	movwf	dir_next@c& (0+255),b
  8954  00210C  D02D               	goto	l1226
  8955  00210E                     
  8956                           ; BSR set to: 0
  8957                           ;ff.c: 1168: dp->fs->wflag = 1;
  8958                           
  8959                           ; BSR set to: 0
  8960  00210E  C0D7  FFD9         	movff	dir_next@dp,fsr2l
  8961  002112  C0D8  FFDA         	movff	dir_next@dp+1,fsr2h
  8962  002116  EE10 F004          	lfsr	1,4
  8963  00211A  50DE               	movf	postinc2,w,c
  8964  00211C  26E1               	addwf	fsr1l,f,c
  8965  00211E  50DD               	movf	postdec2,w,c
  8966  002120  22E2               	addwfc	fsr1h,f,c
  8967  002122  0E01               	movlw	1
  8968  002124  6EE7               	movwf	indf1,c
  8969                           
  8970                           ; BSR set to: 0
  8971                           ;ff.c: 1169: if (sync_window(dp->fs)) return FR_DISK_ERR;
  8972  002126  C0D7  FFD9         	movff	dir_next@dp,fsr2l
  8973  00212A  C0D8  FFDA         	movff	dir_next@dp+1,fsr2h
  8974  00212E  CFDE F085          	movff	postinc2,sync_window@fs
  8975  002132  CFDD F086          	movff	postdec2,sync_window@fs+1
  8976  002136  EC4E  F01D         	call	_sync_window	;wreg free
  8977  00213A  0900               	iorlw	0
  8978  00213C  B4D8               	btfsc	status,2,c
  8979  00213E  D002               	goto	l1228
  8980  002140  0E01               	movlw	1
  8981  002142  0012               	return	
  8982  002144                     l1228:
  8983                           
  8984                           ;ff.c: 1170: dp->fs->winsect++;
  8985  002144  C0D7  FFD9         	movff	dir_next@dp,fsr2l
  8986  002148  C0D8  FFDA         	movff	dir_next@dp+1,fsr2h
  8987  00214C  EE10 F02A          	lfsr	1,42
  8988  002150  50DE               	movf	postinc2,w,c
  8989  002152  26E1               	addwf	fsr1l,f,c
  8990  002154  50DD               	movf	postdec2,w,c
  8991  002156  22E2               	addwfc	fsr1h,f,c
  8992  002158  2AE6               	incf	postinc1,f,c
  8993  00215A  0E00               	movlw	0
  8994  00215C  22E6               	addwfc	postinc1,f,c
  8995  00215E  22E6               	addwfc	postinc1,f,c
  8996  002160  22E6               	addwfc	postinc1,f,c
  8997  002162  0100               	movlb	0	; () banked
  8998  002164  4BE2               	infsnz	dir_next@c& (0+255),f,b
  8999  002166  2BE3               	incf	(dir_next@c+1)& (0+255),f,b
  9000  002168                     l1226:
  9001                           
  9002                           ; BSR set to: 0
  9003                           
  9004                           ; BSR set to: 0
  9005  002168  C0D7  FFD9         	movff	dir_next@dp,fsr2l
  9006  00216C  C0D8  FFDA         	movff	dir_next@dp+1,fsr2h
  9007  002170  EE10 F002          	lfsr	1,2
  9008  002174  50DE               	movf	postinc2,w,c
  9009  002176  26E1               	addwf	fsr1l,f,c
  9010  002178  50DD               	movf	postdec2,w,c
  9011  00217A  22E2               	addwfc	fsr1h,f,c
  9012  00217C  50E7               	movf	indf1,w,c
  9013  00217E  6FDB               	movwf	??_dir_next& (0+255),b
  9014  002180  6BDC               	clrf	(??_dir_next+1)& (0+255),b
  9015  002182  51DB               	movf	??_dir_next& (0+255),w,b
  9016  002184  5DE2               	subwf	dir_next@c& (0+255),w,b
  9017  002186  51DC               	movf	(??_dir_next+1)& (0+255),w,b
  9018  002188  59E3               	subwfb	(dir_next@c+1)& (0+255),w,b
  9019  00218A  A0D8               	btfss	status,0,c
  9020  00218C  D7C0               	goto	l1227
  9021                           
  9022                           ; BSR set to: 0
  9023                           ;ff.c: 1171: }
  9024                           ;ff.c: 1172: dp->fs->winsect -= c;
  9025                           
  9026                           ; BSR set to: 0
  9027  00218E  C0D7  FFD9         	movff	dir_next@dp,fsr2l
  9028  002192  C0D8  FFDA         	movff	dir_next@dp+1,fsr2h
  9029  002196  EE10 F02A          	lfsr	1,42
  9030  00219A  50DE               	movf	postinc2,w,c
  9031  00219C  26E1               	addwf	fsr1l,f,c
  9032  00219E  50DD               	movf	postdec2,w,c
  9033  0021A0  22E2               	addwfc	fsr1h,f,c
  9034  0021A2  51E2               	movf	dir_next@c& (0+255),w,b
  9035  0021A4  5EE6               	subwf	postinc1,f,c
  9036  0021A6  51E3               	movf	(dir_next@c+1)& (0+255),w,b
  9037  0021A8  5AE6               	subwfb	postinc1,f,c
  9038  0021AA  0E00               	movlw	0
  9039  0021AC  5AE6               	subwfb	postinc1,f,c
  9040  0021AE  5AE6               	subwfb	postinc1,f,c
  9041  0021B0                     l1220:
  9042                           
  9043                           ; BSR set to: 0
  9044                           ;ff.c: 1177: }
  9045                           ;ff.c: 1178: dp->clust = clst;
  9046                           
  9047                           ; BSR set to: 0
  9048  0021B0  EE20 F00A          	lfsr	2,10
  9049  0021B4  51D7               	movf	dir_next@dp& (0+255),w,b
  9050  0021B6  26D9               	addwf	fsr2l,f,c
  9051  0021B8  51D8               	movf	(dir_next@dp+1)& (0+255),w,b
  9052  0021BA  22DA               	addwfc	fsr2h,f,c
  9053  0021BC  C0E6  FFDE         	movff	dir_next@clst,postinc2
  9054  0021C0  C0E7  FFDE         	movff	dir_next@clst+1,postinc2
  9055  0021C4  C0E8  FFDE         	movff	dir_next@clst+2,postinc2
  9056  0021C8  C0E9  FFDE         	movff	dir_next@clst+3,postinc2
  9057                           
  9058                           ; BSR set to: 0
  9059                           ;ff.c: 1179: dp->sect = clust2sect(dp->fs, clst);
  9060  0021CC  C0D7  FFD9         	movff	dir_next@dp,fsr2l
  9061  0021D0  C0D8  FFDA         	movff	dir_next@dp+1,fsr2h
  9062  0021D4  CFDE F026          	movff	postinc2,clust2sect@fs
  9063  0021D8  CFDD F027          	movff	postdec2,clust2sect@fs+1
  9064  0021DC  C0E6  F028         	movff	dir_next@clst,clust2sect@clst
  9065  0021E0  C0E7  F029         	movff	dir_next@clst+1,clust2sect@clst+1
  9066  0021E4  C0E8  F02A         	movff	dir_next@clst+2,clust2sect@clst+2
  9067  0021E8  C0E9  F02B         	movff	dir_next@clst+3,clust2sect@clst+3
  9068  0021EC  EC41  F025         	call	_clust2sect	;wreg free
  9069  0021F0  0100               	movlb	0	; () banked
  9070  0021F2  EE20 F00E          	lfsr	2,14
  9071  0021F6  51D7               	movf	dir_next@dp& (0+255),w,b
  9072  0021F8  26D9               	addwf	fsr2l,f,c
  9073  0021FA  51D8               	movf	(dir_next@dp+1)& (0+255),w,b
  9074  0021FC  22DA               	addwfc	fsr2h,f,c
  9075  0021FE  C026  FFDE         	movff	?_clust2sect,postinc2
  9076  002202  C027  FFDE         	movff	?_clust2sect+1,postinc2
  9077  002206  C028  FFDE         	movff	?_clust2sect+2,postinc2
  9078  00220A  C029  FFDE         	movff	?_clust2sect+3,postinc2
  9079  00220E                     l1217:
  9080                           
  9081                           ; BSR set to: 0
  9082                           ;ff.c: 1180: }
  9083                           ;ff.c: 1181: }
  9084                           ;ff.c: 1182: }
  9085                           ;ff.c: 1184: dp->index = (WORD)i;
  9086                           
  9087                           ; BSR set to: 0
  9088                           
  9089                           ; BSR set to: 0
  9090                           
  9091                           ; BSR set to: 0
  9092  00220E  EE20 F004          	lfsr	2,4
  9093  002212  51D7               	movf	dir_next@dp& (0+255),w,b
  9094  002214  26D9               	addwf	fsr2l,f,c
  9095  002216  51D8               	movf	(dir_next@dp+1)& (0+255),w,b
  9096  002218  22DA               	addwfc	fsr2h,f,c
  9097  00221A  C0E4  FFDE         	movff	dir_next@i,postinc2
  9098  00221E  C0E5  FFDD         	movff	dir_next@i+1,postdec2
  9099                           
  9100                           ; BSR set to: 0
  9101                           ;ff.c: 1185: dp->dir = dp->fs->win + (i % (((UINT)512) / 32)) * 32;
  9102  002222  0E0F               	movlw	15
  9103  002224  15E4               	andwf	dir_next@i& (0+255),w,b
  9104  002226  6FDB               	movwf	??_dir_next& (0+255),b
  9105  002228  0E00               	movlw	0
  9106  00222A  15E5               	andwf	(dir_next@i+1)& (0+255),w,b
  9107  00222C  6FDC               	movwf	(??_dir_next+1)& (0+255),b
  9108  00222E  0E05               	movlw	5
  9109  002230                     u15455:
  9110  002230  90D8               	bcf	status,0,c
  9111  002232  37DB               	rlcf	??_dir_next& (0+255),f,b
  9112  002234  37DC               	rlcf	(??_dir_next+1)& (0+255),f,b
  9113  002236  2EE8               	decfsz	wreg,f,c
  9114  002238  D7FB               	goto	u15455
  9115  00223A  0E2E               	movlw	46
  9116  00223C  27DB               	addwf	??_dir_next& (0+255),f,b
  9117  00223E  0E00               	movlw	0
  9118  002240  23DC               	addwfc	(??_dir_next+1)& (0+255),f,b
  9119  002242  C0D7  FFD9         	movff	dir_next@dp,fsr2l
  9120  002246  C0D8  FFDA         	movff	dir_next@dp+1,fsr2h
  9121  00224A  CFDE F0DD          	movff	postinc2,??_dir_next+2
  9122  00224E  CFDD F0DE          	movff	postdec2,??_dir_next+3
  9123  002252  51DB               	movf	??_dir_next& (0+255),w,b
  9124  002254  27DD               	addwf	(??_dir_next+2)& (0+255),f,b
  9125  002256  51DC               	movf	(??_dir_next+1)& (0+255),w,b
  9126  002258  23DE               	addwfc	(??_dir_next+3)& (0+255),f,b
  9127  00225A  EE20 F012          	lfsr	2,18
  9128  00225E  51D7               	movf	dir_next@dp& (0+255),w,b
  9129  002260  26D9               	addwf	fsr2l,f,c
  9130  002262  51D8               	movf	(dir_next@dp+1)& (0+255),w,b
  9131  002264  22DA               	addwfc	fsr2h,f,c
  9132  002266  C0DD  FFDE         	movff	??_dir_next+2,postinc2
  9133  00226A  C0DE  FFDD         	movff	??_dir_next+3,postdec2
  9134                           
  9135                           ; BSR set to: 0
  9136                           ;ff.c: 1187: return FR_OK;
  9137  00226E  0E00               	movlw	0
  9138  002270  0012               	return	
  9139  002272                     __end_of_dir_next:
  9140                           	opt stack 0
  9141                           tosu	equ	0xFFF
  9142                           tosh	equ	0xFFE
  9143                           tosl	equ	0xFFD
  9144                           pclath	equ	0xFFA
  9145                           tblptru	equ	0xFF8
  9146                           tblptrh	equ	0xFF7
  9147                           tblptrl	equ	0xFF6
  9148                           tablat	equ	0xFF5
  9149                           prodh	equ	0xFF4
  9150                           prodl	equ	0xFF3
  9151                           intcon	equ	0xFF2
  9152                           intcon2	equ	0xFF1
  9153                           intcon3	equ	0xFF0
  9154                           indf0	equ	0xFEF
  9155                           postinc0	equ	0xFEE
  9156                           fsr0h	equ	0xFEA
  9157                           fsr0l	equ	0xFE9
  9158                           wreg	equ	0xFE8
  9159                           indf1	equ	0xFE7
  9160                           postinc1	equ	0xFE6
  9161                           postdec1	equ	0xFE5
  9162                           fsr1h	equ	0xFE2
  9163                           fsr1l	equ	0xFE1
  9164                           indf2	equ	0xFDF
  9165                           postinc2	equ	0xFDE
  9166                           postdec2	equ	0xFDD
  9167                           plusw2	equ	0xFDB
  9168                           fsr2h	equ	0xFDA
  9169                           fsr2l	equ	0xFD9
  9170                           status	equ	0xFD8
  9171                           
  9172 ;; *************** function _f_mount *****************
  9173 ;; Defined at:
  9174 ;;		line 2402 in file "bibliotecas/ff.c"
  9175 ;; Parameters:    Size  Location     Type
  9176 ;;  fs              2   92[BANK0 ] PTR struct .
  9177 ;;		 -> NULL(0), fs(558), 
  9178 ;;  path            2   94[BANK0 ] PTR const unsigned char 
  9179 ;;		 -> STR_11(10), STR_9(1), 
  9180 ;;  opt             1   96[BANK0 ] unsigned char 
  9181 ;; Auto vars:     Size  Location     Type
  9182 ;;  vol             2  102[BANK0 ] int 
  9183 ;;  rp              2  100[BANK0 ] PTR const unsigned char 
  9184 ;;		 -> STR_11(10), STR_9(1), 
  9185 ;;  cfs             2   98[BANK0 ] PTR struct .
  9186 ;;		 -> NULL(0), fs(558), 
  9187 ;;  res             1   97[BANK0 ] enum E75
  9188 ;; Return value:  Size  Location     Type
  9189 ;;                  1    wreg      enum E3916
  9190 ;; Registers used:
  9191 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9192 ;; Tracked objects:
  9193 ;;		On entry : 0/0
  9194 ;;		On exit  : 0/0
  9195 ;;		Unchanged: 0/0
  9196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9197 ;;      Params:         0       5       0       0       0       0       0       0       0
  9198 ;;      Locals:         0       7       0       0       0       0       0       0       0
  9199 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9200 ;;      Totals:         0      12       0       0       0       0       0       0       0
  9201 ;;Total ram usage:       12 bytes
  9202 ;; Hardware stack levels used:    1
  9203 ;; Hardware stack levels required when called:   13
  9204 ;; This function calls:
  9205 ;;		_find_volume
  9206 ;;		_get_ldnumber
  9207 ;; This function is called by:
  9208 ;;		_SDCard
  9209 ;; This function uses a non-reentrant model
  9210 ;;
  9211                           
  9212                           	psect	text29
  9213  004CB2                     __ptext29:
  9214                           	opt stack 0
  9215  004CB2                     _f_mount:
  9216                           	opt stack 15
  9217                           
  9218                           ;ff.c: 2408: FATFS *cfs;
  9219                           ;ff.c: 2409: int vol;
  9220                           ;ff.c: 2410: FRESULT res;
  9221                           ;ff.c: 2411: const TCHAR *rp = path;
  9222                           
  9223                           ;incstack = 0
  9224  004CB2  C0BE  F0C4         	movff	f_mount@path,f_mount@rp
  9225  004CB6  C0BF  F0C5         	movff	f_mount@path+1,f_mount@rp+1
  9226                           
  9227                           ;ff.c: 2414: vol = get_ldnumber(&rp);
  9228  004CBA  0EC4               	movlw	low f_mount@rp
  9229  004CBC  6E1A               	movwf	get_ldnumber@path,c
  9230  004CBE  0E00               	movlw	high f_mount@rp
  9231  004CC0  6E1B               	movwf	get_ldnumber@path+1,c
  9232  004CC2  ECF2  F022         	call	_get_ldnumber	;wreg free
  9233  004CC6  C01A  F0C6         	movff	?_get_ldnumber,f_mount@vol
  9234  004CCA  C01B  F0C7         	movff	?_get_ldnumber+1,f_mount@vol+1
  9235                           
  9236                           ;ff.c: 2415: if (vol < 0) return FR_INVALID_DRIVE;
  9237  004CCE  0100               	movlb	0	; () banked
  9238  004CD0  AFC7               	btfss	(f_mount@vol+1)& (0+255),7,b
  9239  004CD2  D002               	goto	l1414
  9240                           
  9241                           ; BSR set to: 0
  9242  004CD4  0E0B               	movlw	11
  9243                           
  9244                           ; BSR set to: 0
  9245  004CD6  0012               	return	
  9246  004CD8                     l1414:
  9247                           
  9248                           ; BSR set to: 0
  9249                           ;ff.c: 2416: cfs = FatFs[vol];
  9250                           
  9251                           ; BSR set to: 0
  9252  004CD8  90D8               	bcf	status,0,c
  9253  004CDA  35C6               	rlcf	f_mount@vol& (0+255),w,b
  9254  004CDC  6ED9               	movwf	fsr2l,c
  9255  004CDE  35C7               	rlcf	(f_mount@vol+1)& (0+255),w,b
  9256  004CE0  6EDA               	movwf	fsr2h,c
  9257  004CE2  0EF8               	movlw	low _FatFs
  9258  004CE4  26D9               	addwf	fsr2l,f,c
  9259  004CE6  0E00               	movlw	high _FatFs
  9260  004CE8  22DA               	addwfc	fsr2h,f,c
  9261  004CEA  CFDE F0C2          	movff	postinc2,f_mount@cfs
  9262  004CEE  CFDD F0C3          	movff	postdec2,f_mount@cfs+1
  9263                           
  9264                           ; BSR set to: 0
  9265                           ;ff.c: 2418: if (cfs) {
  9266  004CF2  51C2               	movf	f_mount@cfs& (0+255),w,b
  9267  004CF4  11C3               	iorwf	(f_mount@cfs+1)& (0+255),w,b
  9268  004CF6  B4D8               	btfsc	status,2,c
  9269  004CF8  D006               	goto	l1416
  9270                           
  9271                           ; BSR set to: 0
  9272                           ;ff.c: 2425: cfs->fs_type = 0;
  9273  004CFA  C0C2  FFD9         	movff	f_mount@cfs,fsr2l
  9274  004CFE  C0C3  FFDA         	movff	f_mount@cfs+1,fsr2h
  9275  004D02  0E00               	movlw	0
  9276  004D04  6EDF               	movwf	indf2,c
  9277  004D06                     l1416:
  9278                           
  9279                           ; BSR set to: 0
  9280                           ;ff.c: 2426: }
  9281                           ;ff.c: 2428: if (fs) {
  9282                           
  9283                           ; BSR set to: 0
  9284  004D06  51BC               	movf	f_mount@fs& (0+255),w,b
  9285  004D08  11BD               	iorwf	(f_mount@fs+1)& (0+255),w,b
  9286  004D0A  B4D8               	btfsc	status,2,c
  9287  004D0C  D006               	goto	l1417
  9288                           
  9289                           ; BSR set to: 0
  9290                           ;ff.c: 2429: fs->fs_type = 0;
  9291  004D0E  C0BC  FFD9         	movff	f_mount@fs,fsr2l
  9292  004D12  C0BD  FFDA         	movff	f_mount@fs+1,fsr2h
  9293  004D16  0E00               	movlw	0
  9294  004D18  6EDF               	movwf	indf2,c
  9295  004D1A                     l1417:
  9296                           
  9297                           ; BSR set to: 0
  9298                           ;ff.c: 2433: }
  9299                           ;ff.c: 2434: FatFs[vol] = fs;
  9300                           
  9301                           ; BSR set to: 0
  9302  004D1A  90D8               	bcf	status,0,c
  9303  004D1C  35C6               	rlcf	f_mount@vol& (0+255),w,b
  9304  004D1E  6ED9               	movwf	fsr2l,c
  9305  004D20  35C7               	rlcf	(f_mount@vol+1)& (0+255),w,b
  9306  004D22  6EDA               	movwf	fsr2h,c
  9307  004D24  0EF8               	movlw	low _FatFs
  9308  004D26  26D9               	addwf	fsr2l,f,c
  9309  004D28  0E00               	movlw	high _FatFs
  9310  004D2A  22DA               	addwfc	fsr2h,f,c
  9311  004D2C  C0BC  FFDE         	movff	f_mount@fs,postinc2
  9312  004D30  C0BD  FFDD         	movff	f_mount@fs+1,postdec2
  9313                           
  9314                           ; BSR set to: 0
  9315                           ;ff.c: 2436: if (!fs || opt != 1) return FR_OK;
  9316  004D34  51BC               	movf	f_mount@fs& (0+255),w,b
  9317  004D36  11BD               	iorwf	(f_mount@fs+1)& (0+255),w,b
  9318  004D38  B4D8               	btfsc	status,2,c
  9319  004D3A  D003               	goto	u17230
  9320                           
  9321                           ; BSR set to: 0
  9322  004D3C  05C0               	decf	f_mount@opt& (0+255),w,b
  9323  004D3E  B4D8               	btfsc	status,2,c
  9324  004D40  D002               	goto	l1418
  9325  004D42                     u17230:
  9326                           
  9327                           ; BSR set to: 0
  9328                           
  9329                           ; BSR set to: 0
  9330  004D42  0E00               	movlw	0
  9331                           
  9332                           ; BSR set to: 0
  9333  004D44  0012               	return	
  9334  004D46                     l1418:
  9335                           
  9336                           ; BSR set to: 0
  9337                           ;ff.c: 2438: res = find_volume(&fs, &path, 0);
  9338                           
  9339                           ; BSR set to: 0
  9340  004D46  0EBC               	movlw	low f_mount@fs
  9341  004D48  6FAF               	movwf	find_volume@rfs& (0+255),b
  9342  004D4A  0E00               	movlw	high f_mount@fs
  9343  004D4C  6FB0               	movwf	(find_volume@rfs+1)& (0+255),b
  9344  004D4E  0EBE               	movlw	low f_mount@path
  9345  004D50  6FB1               	movwf	find_volume@path& (0+255),b
  9346  004D52  0E00               	movlw	high f_mount@path
  9347  004D54  6FB2               	movwf	(find_volume@path+1)& (0+255),b
  9348  004D56  0E00               	movlw	0
  9349  004D58  6FB3               	movwf	find_volume@wmode& (0+255),b
  9350  004D5A  EC09  F000         	call	_find_volume	;wreg free
  9351  004D5E  0100               	movlb	0	; () banked
  9352  004D60  6FC1               	movwf	f_mount@res& (0+255),b
  9353                           
  9354                           ; BSR set to: 0
  9355                           ;ff.c: 2439: return res;
  9356  004D62  51C1               	movf	f_mount@res& (0+255),w,b
  9357  004D64  0012               	return	
  9358  004D66                     __end_of_f_mount:
  9359                           	opt stack 0
  9360                           tosu	equ	0xFFF
  9361                           tosh	equ	0xFFE
  9362                           tosl	equ	0xFFD
  9363                           pclath	equ	0xFFA
  9364                           tblptru	equ	0xFF8
  9365                           tblptrh	equ	0xFF7
  9366                           tblptrl	equ	0xFF6
  9367                           tablat	equ	0xFF5
  9368                           prodh	equ	0xFF4
  9369                           prodl	equ	0xFF3
  9370                           intcon	equ	0xFF2
  9371                           intcon2	equ	0xFF1
  9372                           intcon3	equ	0xFF0
  9373                           indf0	equ	0xFEF
  9374                           postinc0	equ	0xFEE
  9375                           fsr0h	equ	0xFEA
  9376                           fsr0l	equ	0xFE9
  9377                           wreg	equ	0xFE8
  9378                           indf1	equ	0xFE7
  9379                           postinc1	equ	0xFE6
  9380                           postdec1	equ	0xFE5
  9381                           fsr1h	equ	0xFE2
  9382                           fsr1l	equ	0xFE1
  9383                           indf2	equ	0xFDF
  9384                           postinc2	equ	0xFDE
  9385                           postdec2	equ	0xFDD
  9386                           plusw2	equ	0xFDB
  9387                           fsr2h	equ	0xFDA
  9388                           fsr2l	equ	0xFD9
  9389                           status	equ	0xFD8
  9390                           
  9391 ;; *************** function _find_volume *****************
  9392 ;; Defined at:
  9393 ;;		line 2203 in file "bibliotecas/ff.c"
  9394 ;; Parameters:    Size  Location     Type
  9395 ;;  rfs             2   79[BANK0 ] PTR PTR struct .
  9396 ;;		 -> f_open@dj(22), f_mount@fs(2), 
  9397 ;;  path            2   81[BANK0 ] PTR PTR const unsigned c
  9398 ;;		 -> f_open@path(2), f_mount@path(2), 
  9399 ;;  wmode           1   83[BANK0 ] unsigned char 
  9400 ;; Auto vars:     Size  Location     Type
  9401 ;;  br             16    0[BANK1 ] unsigned long [4]
  9402 ;;  bsect           4   49[BANK1 ] unsigned long 
  9403 ;;  fasize          4   45[BANK1 ] unsigned long 
  9404 ;;  nclst           4   40[BANK1 ] unsigned long 
  9405 ;;  tsect           4   36[BANK1 ] unsigned long 
  9406 ;;  sysect          4   28[BANK1 ] unsigned long 
  9407 ;;  szbfat          4   22[BANK1 ] unsigned long 
  9408 ;;  fs              2   56[BANK1 ] PTR struct .
  9409 ;;		 -> NULL(0), fs(558), 
  9410 ;;  i               2   53[BANK1 ] unsigned int 
  9411 ;;  nrsv            2   34[BANK1 ] unsigned short 
  9412 ;;  vol             2   32[BANK1 ] int 
  9413 ;;  pt              2   26[BANK1 ] PTR unsigned char 
  9414 ;;		 -> fs.win(512), NULL(0), fs(558), 
  9415 ;;  fmt             1   55[BANK1 ] unsigned char 
  9416 ;;  stat            1   44[BANK1 ] unsigned char 
  9417 ;; Return value:  Size  Location     Type
  9418 ;;                  1    wreg      enum E75
  9419 ;; Registers used:
  9420 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9421 ;; Tracked objects:
  9422 ;;		On entry : 0/0
  9423 ;;		On exit  : 0/0
  9424 ;;		Unchanged: 0/0
  9425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9426 ;;      Params:         0       5       0       0       0       0       0       0       0
  9427 ;;      Locals:         0       0      58       0       0       0       0       0       0
  9428 ;;      Temps:          0       8       0       0       0       0       0       0       0
  9429 ;;      Totals:         0      13      58       0       0       0       0       0       0
  9430 ;;Total ram usage:       71 bytes
  9431 ;; Hardware stack levels used:    1
  9432 ;; Hardware stack levels required when called:   12
  9433 ;; This function calls:
  9434 ;;		___lldiv
  9435 ;;		___lmul
  9436 ;;		_check_fs
  9437 ;;		_disk_initialize
  9438 ;;		_disk_status
  9439 ;;		_get_ldnumber
  9440 ;;		_move_window
  9441 ;; This function is called by:
  9442 ;;		_f_mount
  9443 ;;		_f_open
  9444 ;; This function uses a non-reentrant model
  9445 ;;
  9446                           
  9447                           	psect	text30
  9448  000012                     __ptext30:
  9449                           	opt stack 0
  9450  000012                     _find_volume:
  9451                           	opt stack 15
  9452                           
  9453                           ;ff.c: 2209: BYTE fmt, *pt;
  9454                           ;ff.c: 2210: int vol;
  9455                           ;ff.c: 2211: DSTATUS stat;
  9456                           ;ff.c: 2212: DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];
  9457                           ;ff.c: 2213: WORD nrsv;
  9458                           ;ff.c: 2214: FATFS *fs;
  9459                           ;ff.c: 2215: UINT i;
  9460                           ;ff.c: 2219: *rfs = 0;
  9461                           
  9462                           ; BSR set to: 0
  9463                           ;incstack = 0
  9464  000012  C0AF  FFD9         	movff	find_volume@rfs,fsr2l
  9465  000016  C0B0  FFDA         	movff	find_volume@rfs+1,fsr2h
  9466  00001A  0E00               	movlw	0
  9467  00001C  6EDE               	movwf	postinc2,c
  9468  00001E  0E00               	movlw	0
  9469  000020  6EDD               	movwf	postdec2,c
  9470                           
  9471                           ;ff.c: 2220: vol = get_ldnumber(path);
  9472  000022  C0B1  F01A         	movff	find_volume@path,get_ldnumber@path
  9473  000026  C0B2  F01B         	movff	find_volume@path+1,get_ldnumber@path+1
  9474  00002A  ECF2  F022         	call	_get_ldnumber	;wreg free
  9475  00002E  C01A  F19F         	movff	?_get_ldnumber,find_volume@vol
  9476  000032  C01B  F1A0         	movff	?_get_ldnumber+1,find_volume@vol+1
  9477                           
  9478                           ;ff.c: 2221: if (vol < 0) return FR_INVALID_DRIVE;
  9479  000036  0101               	movlb	1	; () banked
  9480  000038  AFA0               	btfss	(find_volume@vol+1)& (0+255),7,b
  9481  00003A  D002               	goto	l1354
  9482                           
  9483                           ; BSR set to: 1
  9484  00003C  0E0B               	movlw	11
  9485                           
  9486                           ; BSR set to: 1
  9487  00003E  0012               	return	
  9488  000040                     l1354:
  9489                           
  9490                           ; BSR set to: 1
  9491                           ;ff.c: 2224: fs = FatFs[vol];
  9492                           
  9493                           ; BSR set to: 1
  9494  000040  90D8               	bcf	status,0,c
  9495  000042  359F               	rlcf	find_volume@vol& (0+255),w,b
  9496  000044  6ED9               	movwf	fsr2l,c
  9497  000046  35A0               	rlcf	(find_volume@vol+1)& (0+255),w,b
  9498  000048  6EDA               	movwf	fsr2h,c
  9499  00004A  0EF8               	movlw	low _FatFs
  9500  00004C  26D9               	addwf	fsr2l,f,c
  9501  00004E  0E00               	movlw	high _FatFs
  9502  000050  22DA               	addwfc	fsr2h,f,c
  9503  000052  CFDE F1B7          	movff	postinc2,find_volume@fs
  9504  000056  CFDD F1B8          	movff	postdec2,find_volume@fs+1
  9505                           
  9506                           ; BSR set to: 1
  9507                           ;ff.c: 2225: if (!fs) return FR_NOT_ENABLED;
  9508  00005A  51B7               	movf	find_volume@fs& (0+255),w,b
  9509  00005C  11B8               	iorwf	(find_volume@fs+1)& (0+255),w,b
  9510  00005E  A4D8               	btfss	status,2,c
  9511  000060  D002               	goto	l1356
  9512                           
  9513                           ; BSR set to: 1
  9514  000062  0E0C               	movlw	12
  9515                           
  9516                           ; BSR set to: 1
  9517  000064  0012               	return	
  9518  000066                     l1356:
  9519                           
  9520                           ; BSR set to: 1
  9521                           ;ff.c: 2227: ;
  9522                           ;ff.c: 2228: *rfs = fs;
  9523                           
  9524                           ; BSR set to: 1
  9525  000066  C0AF  FFD9         	movff	find_volume@rfs,fsr2l
  9526  00006A  C0B0  FFDA         	movff	find_volume@rfs+1,fsr2h
  9527  00006E  C1B7  FFDE         	movff	find_volume@fs,postinc2
  9528  000072  C1B8  FFDD         	movff	find_volume@fs+1,postdec2
  9529                           
  9530                           ; BSR set to: 1
  9531                           ;ff.c: 2230: if (fs->fs_type) {
  9532  000076  C1B7  FFD9         	movff	find_volume@fs,fsr2l
  9533  00007A  C1B8  FFDA         	movff	find_volume@fs+1,fsr2h
  9534  00007E  50DF               	movf	indf2,w,c
  9535  000080  B4D8               	btfsc	status,2,c
  9536  000082  D018               	goto	l1358
  9537                           
  9538                           ; BSR set to: 1
  9539                           ;ff.c: 2231: stat = disk_status(fs->drv);
  9540  000084  EE20 F001          	lfsr	2,1
  9541  000088  51B7               	movf	find_volume@fs& (0+255),w,b
  9542  00008A  26D9               	addwf	fsr2l,f,c
  9543  00008C  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
  9544  00008E  22DA               	addwfc	fsr2h,f,c
  9545  000090  50DF               	movf	indf2,w,c
  9546  000092  ECB2  F02D         	call	_disk_status
  9547  000096  0101               	movlb	1	; () banked
  9548  000098  6FAB               	movwf	find_volume@stat& (0+255),b
  9549                           
  9550                           ; BSR set to: 1
  9551                           ;ff.c: 2233: if (!0 && wmode && (stat & 0x04))
  9552  00009A  B1AB               	btfsc	find_volume@stat& (0+255),0,b
  9553  00009C  D00B               	goto	l1358
  9554                           
  9555                           ; BSR set to: 1
  9556  00009E  0100               	movlb	0	; () banked
  9557  0000A0  51B3               	movf	find_volume@wmode& (0+255),w,b
  9558  0000A2  B4D8               	btfsc	status,2,c
  9559  0000A4  D005               	goto	l1359
  9560                           
  9561                           ; BSR set to: 0
  9562  0000A6  0101               	movlb	1	; () banked
  9563  0000A8  A5AB               	btfss	find_volume@stat& (0+255),2,b
  9564  0000AA  D002               	goto	l1359
  9565                           
  9566                           ; BSR set to: 1
  9567                           ;ff.c: 2234: return FR_WRITE_PROTECTED;
  9568  0000AC  0E0A               	movlw	10
  9569                           
  9570                           ; BSR set to: 1
  9571  0000AE  0012               	return	
  9572  0000B0                     l1359:
  9573                           
  9574                           ;ff.c: 2235: return FR_OK;
  9575                           
  9576                           ; BSR set to: 1
  9577  0000B0  0E00               	movlw	0
  9578  0000B2  0012               	return	
  9579  0000B4                     l1358:
  9580                           
  9581                           ;ff.c: 2236: }
  9582                           ;ff.c: 2237: }
  9583                           ;ff.c: 2242: fs->fs_type = 0;
  9584  0000B4  C1B7  FFD9         	movff	find_volume@fs,fsr2l
  9585  0000B8  C1B8  FFDA         	movff	find_volume@fs+1,fsr2h
  9586  0000BC  0E00               	movlw	0
  9587  0000BE  6EDF               	movwf	indf2,c
  9588                           
  9589                           ;ff.c: 2243: fs->drv = (BYTE)(vol);
  9590  0000C0  0101               	movlb	1	; () banked
  9591  0000C2  EE20 F001          	lfsr	2,1
  9592  0000C6  51B7               	movf	find_volume@fs& (0+255),w,b
  9593  0000C8  26D9               	addwf	fsr2l,f,c
  9594  0000CA  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
  9595  0000CC  22DA               	addwfc	fsr2h,f,c
  9596  0000CE  C19F  FFDF         	movff	find_volume@vol,indf2
  9597                           
  9598                           ; BSR set to: 1
  9599                           ;ff.c: 2244: stat = disk_initialize(fs->drv);
  9600  0000D2  EE20 F001          	lfsr	2,1
  9601  0000D6  51B7               	movf	find_volume@fs& (0+255),w,b
  9602  0000D8  26D9               	addwf	fsr2l,f,c
  9603  0000DA  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
  9604  0000DC  22DA               	addwfc	fsr2h,f,c
  9605  0000DE  50DF               	movf	indf2,w,c
  9606  0000E0  EC41  F01B         	call	_disk_initialize
  9607  0000E4  0101               	movlb	1	; () banked
  9608  0000E6  6FAB               	movwf	find_volume@stat& (0+255),b
  9609                           
  9610                           ; BSR set to: 1
  9611                           ;ff.c: 2245: if (stat & 0x01)
  9612  0000E8  A1AB               	btfss	find_volume@stat& (0+255),0,b
  9613  0000EA  D002               	goto	l1360
  9614                           
  9615                           ; BSR set to: 1
  9616                           ;ff.c: 2246: return FR_NOT_READY;
  9617  0000EC  0E03               	movlw	3
  9618                           
  9619                           ; BSR set to: 1
  9620  0000EE  0012               	return	
  9621  0000F0                     l1360:
  9622                           
  9623                           ; BSR set to: 1
  9624                           
  9625                           ; BSR set to: 1
  9626  0000F0  0100               	movlb	0	; () banked
  9627  0000F2  51B3               	movf	find_volume@wmode& (0+255),w,b
  9628  0000F4  B4D8               	btfsc	status,2,c
  9629  0000F6  D005               	goto	l1361
  9630                           
  9631                           ; BSR set to: 0
  9632  0000F8  0101               	movlb	1	; () banked
  9633  0000FA  A5AB               	btfss	find_volume@stat& (0+255),2,b
  9634  0000FC  D002               	goto	l1361
  9635                           
  9636                           ; BSR set to: 1
  9637                           ;ff.c: 2248: return FR_WRITE_PROTECTED;
  9638  0000FE  0E0A               	movlw	10
  9639                           
  9640                           ; BSR set to: 1
  9641  000100  0012               	return	
  9642  000102                     l1361:
  9643                           
  9644                           ;ff.c: 2254: bsect = 0;
  9645                           
  9646                           ; BSR set to: 1
  9647  000102  0E00               	movlw	0
  9648  000104  0101               	movlb	1	; () banked
  9649  000106  6FB0               	movwf	find_volume@bsect& (0+255),b
  9650  000108  0E00               	movlw	0
  9651  00010A  6FB1               	movwf	(find_volume@bsect+1)& (0+255),b
  9652  00010C  0E00               	movlw	0
  9653  00010E  6FB2               	movwf	(find_volume@bsect+2)& (0+255),b
  9654  000110  0E00               	movlw	0
  9655  000112  6FB3               	movwf	(find_volume@bsect+3)& (0+255),b
  9656                           
  9657                           ; BSR set to: 1
  9658                           ;ff.c: 2255: fmt = check_fs(fs, bsect);
  9659  000114  C1B7  F0A5         	movff	find_volume@fs,check_fs@fs
  9660  000118  C1B8  F0A6         	movff	find_volume@fs+1,check_fs@fs+1
  9661  00011C  C1B0  F0A7         	movff	find_volume@bsect,check_fs@sect
  9662  000120  C1B1  F0A8         	movff	find_volume@bsect+1,check_fs@sect+1
  9663  000124  C1B2  F0A9         	movff	find_volume@bsect+2,check_fs@sect+2
  9664  000128  C1B3  F0AA         	movff	find_volume@bsect+3,check_fs@sect+3
  9665  00012C  ECEF  F023         	call	_check_fs	;wreg free
  9666  000130  0101               	movlb	1	; () banked
  9667  000132  6FB6               	movwf	find_volume@fmt& (0+255),b
  9668                           
  9669                           ; BSR set to: 1
  9670                           ;ff.c: 2256: if (fmt == 1 || (!fmt && (0))) {
  9671  000134  05B6               	decf	find_volume@fmt& (0+255),w,b
  9672  000136  A4D8               	btfss	status,2,c
  9673  000138  D0BB               	goto	u16750
  9674                           
  9675                           ; BSR set to: 1
  9676                           ;ff.c: 2257: for (i = 0; i < 4; i++) {
  9677                           
  9678                           ; BSR set to: 1
  9679                           
  9680                           ; BSR set to: 1
  9681                           
  9682                           ; BSR set to: 1
  9683  00013A  0E00               	movlw	0
  9684  00013C  6FB5               	movwf	(find_volume@i+1)& (0+255),b
  9685  00013E  0E00               	movlw	0
  9686  000140  6FB4               	movwf	find_volume@i& (0+255),b
  9687  000142                     l12197:
  9688                           
  9689                           ; BSR set to: 1
  9690  000142  51B5               	movf	(find_volume@i+1)& (0+255),w,b
  9691  000144  E162               	bnz	l12213
  9692  000146  0E04               	movlw	4
  9693  000148  5DB4               	subwf	find_volume@i& (0+255),w,b
  9694  00014A  B0D8               	btfsc	status,0,c
  9695  00014C  D05E               	goto	u16710
  9696                           
  9697                           ; BSR set to: 1
  9698                           ;ff.c: 2258: pt = fs->win + 446 + i * 16;
  9699                           
  9700                           ; BSR set to: 1
  9701                           
  9702                           ; BSR set to: 1
  9703  00014E  0EEC               	movlw	236
  9704  000150  0100               	movlb	0	; () banked
  9705  000152  6FB4               	movwf	??_find_volume& (0+255),b
  9706  000154  0E01               	movlw	1
  9707  000156  6FB5               	movwf	(??_find_volume+1)& (0+255),b
  9708  000158  C1B4  F0B6         	movff	find_volume@i,??_find_volume+2
  9709  00015C  C1B5  F0B7         	movff	find_volume@i+1,??_find_volume+3
  9710  000160  3BB6               	swapf	(??_find_volume+2)& (0+255),f,b
  9711  000162  3BB7               	swapf	(??_find_volume+3)& (0+255),f,b
  9712  000164  0EF0               	movlw	240
  9713  000166  17B7               	andwf	(??_find_volume+3)& (0+255),f,b
  9714  000168  51B6               	movf	(??_find_volume+2)& (0+255),w,b
  9715  00016A  0B0F               	andlw	15
  9716  00016C  13B7               	iorwf	(??_find_volume+3)& (0+255),f,b
  9717  00016E  0EF0               	movlw	240
  9718  000170  17B6               	andwf	(??_find_volume+2)& (0+255),f,b
  9719  000172  51B4               	movf	??_find_volume& (0+255),w,b
  9720  000174  27B6               	addwf	(??_find_volume+2)& (0+255),f,b
  9721  000176  51B5               	movf	(??_find_volume+1)& (0+255),w,b
  9722  000178  23B7               	addwfc	(??_find_volume+3)& (0+255),f,b
  9723  00017A  51B6               	movf	(??_find_volume+2)& (0+255),w,b
  9724  00017C  0101               	movlb	1	; () banked
  9725  00017E  25B7               	addwf	find_volume@fs& (0+255),w,b
  9726  000180  6F99               	movwf	find_volume@pt& (0+255),b
  9727  000182  0100               	movlb	0	; () banked
  9728  000184  51B7               	movf	(??_find_volume+3)& (0+255),w,b
  9729  000186  0101               	movlb	1	; () banked
  9730  000188  21B8               	addwfc	(find_volume@fs+1)& (0+255),w,b
  9731  00018A  6F9A               	movwf	(find_volume@pt+1)& (0+255),b
  9732                           
  9733                           ; BSR set to: 1
  9734                           ;ff.c: 2259: br[i] = pt[4] ? (DWORD)(*(DWORD*)(BYTE*)(&pt[8])) : 0;
  9735  00018C  EE20 F004          	lfsr	2,4
  9736  000190  5199               	movf	find_volume@pt& (0+255),w,b
  9737  000192  26D9               	addwf	fsr2l,f,c
  9738  000194  519A               	movf	(find_volume@pt+1)& (0+255),w,b
  9739  000196  22DA               	addwfc	fsr2h,f,c
  9740  000198  50DF               	movf	indf2,w,c
  9741  00019A  A4D8               	btfss	status,2,c
  9742  00019C  D009               	goto	l1368
  9743                           
  9744                           ; BSR set to: 1
  9745  00019E  0E00               	movlw	0
  9746  0001A0  6F8F               	movwf	_find_volume$2847& (0+255),b
  9747  0001A2  0E00               	movlw	0
  9748  0001A4  6F90               	movwf	(_find_volume$2847+1)& (0+255),b
  9749  0001A6  0E00               	movlw	0
  9750  0001A8  6F91               	movwf	(_find_volume$2847+2)& (0+255),b
  9751  0001AA  0E00               	movlw	0
  9752  0001AC  6F92               	movwf	(_find_volume$2847+3)& (0+255),b
  9753  0001AE  D00E               	goto	l1370
  9754  0001B0                     l1368:
  9755                           
  9756                           ; BSR set to: 1
  9757                           
  9758                           ; BSR set to: 1
  9759  0001B0  EE20 F008          	lfsr	2,8
  9760  0001B4  5199               	movf	find_volume@pt& (0+255),w,b
  9761  0001B6  26D9               	addwf	fsr2l,f,c
  9762  0001B8  519A               	movf	(find_volume@pt+1)& (0+255),w,b
  9763  0001BA  22DA               	addwfc	fsr2h,f,c
  9764  0001BC  CFDE F18F          	movff	postinc2,_find_volume$2847
  9765  0001C0  CFDE F190          	movff	postinc2,_find_volume$2847+1
  9766  0001C4  CFDE F191          	movff	postinc2,_find_volume$2847+2
  9767  0001C8  CFDE F192          	movff	postinc2,_find_volume$2847+3
  9768  0001CC                     l1370:
  9769                           
  9770                           ; BSR set to: 1
  9771  0001CC  0E7F               	movlw	low find_volume@br
  9772  0001CE  0100               	movlb	0	; () banked
  9773  0001D0  6FB4               	movwf	??_find_volume& (0+255),b
  9774  0001D2  0E01               	movlw	high find_volume@br
  9775  0001D4  6FB5               	movwf	(??_find_volume+1)& (0+255),b
  9776  0001D6  90D8               	bcf	status,0,c
  9777  0001D8  0101               	movlb	1	; () banked
  9778  0001DA  35B4               	rlcf	find_volume@i& (0+255),w,b
  9779  0001DC  6ED9               	movwf	fsr2l,c
  9780  0001DE  35B5               	rlcf	(find_volume@i+1)& (0+255),w,b
  9781  0001E0  6EDA               	movwf	fsr2h,c
  9782  0001E2  90D8               	bcf	status,0,c
  9783  0001E4  36D9               	rlcf	fsr2l,f,c
  9784  0001E6  36DA               	rlcf	fsr2h,f,c
  9785  0001E8  0100               	movlb	0	; () banked
  9786  0001EA  51B4               	movf	??_find_volume& (0+255),w,b
  9787  0001EC  26D9               	addwf	fsr2l,f,c
  9788  0001EE  51B5               	movf	(??_find_volume+1)& (0+255),w,b
  9789  0001F0  22DA               	addwfc	fsr2h,f,c
  9790  0001F2  C18F  FFDE         	movff	_find_volume$2847,postinc2
  9791  0001F6  C190  FFDE         	movff	_find_volume$2847+1,postinc2
  9792  0001FA  C191  FFDE         	movff	_find_volume$2847+2,postinc2
  9793  0001FE  C192  FFDE         	movff	_find_volume$2847+3,postinc2
  9794                           
  9795                           ; BSR set to: 0
  9796  000202  0101               	movlb	1	; () banked
  9797  000204  4BB4               	infsnz	find_volume@i& (0+255),f,b
  9798  000206  2BB5               	incf	(find_volume@i+1)& (0+255),f,b
  9799  000208  D79C               	goto	l12197
  9800  00020A                     u16710:
  9801  00020A                     l12213:
  9802                           
  9803                           ; BSR set to: 1
  9804                           ;ff.c: 2260: }
  9805                           ;ff.c: 2261: i = 0;
  9806  00020A  0E00               	movlw	0
  9807  00020C  6FB5               	movwf	(find_volume@i+1)& (0+255),b
  9808  00020E  0E00               	movlw	0
  9809  000210  6FB4               	movwf	find_volume@i& (0+255),b
  9810                           
  9811                           ; BSR set to: 1
  9812                           ;ff.c: 2262: if (i) i--;
  9813  000212  51B4               	movf	find_volume@i& (0+255),w,b
  9814  000214  11B5               	iorwf	(find_volume@i+1)& (0+255),w,b
  9815  000216  B4D8               	btfsc	status,2,c
  9816  000218  D003               	goto	l1371
  9817                           
  9818                           ; BSR set to: 1
  9819  00021A  07B4               	decf	find_volume@i& (0+255),f,b
  9820  00021C  A0D8               	btfss	status,0,c
  9821  00021E  07B5               	decf	(find_volume@i+1)& (0+255),f,b
  9822  000220                     l1371:
  9823                           
  9824                           ; BSR set to: 1
  9825                           ;ff.c: 2264: bsect = br[i];
  9826                           
  9827                           ; BSR set to: 1
  9828                           
  9829                           ;ff.c: 2263: do {
  9830                           
  9831                           ; BSR set to: 1
  9832  000220  0E7F               	movlw	low find_volume@br
  9833  000222  0100               	movlb	0	; () banked
  9834  000224  6FB4               	movwf	??_find_volume& (0+255),b
  9835  000226  0E01               	movlw	high find_volume@br
  9836  000228  6FB5               	movwf	(??_find_volume+1)& (0+255),b
  9837  00022A  90D8               	bcf	status,0,c
  9838  00022C  0101               	movlb	1	; () banked
  9839  00022E  35B4               	rlcf	find_volume@i& (0+255),w,b
  9840  000230  6ED9               	movwf	fsr2l,c
  9841  000232  35B5               	rlcf	(find_volume@i+1)& (0+255),w,b
  9842  000234  6EDA               	movwf	fsr2h,c
  9843  000236  90D8               	bcf	status,0,c
  9844  000238  36D9               	rlcf	fsr2l,f,c
  9845  00023A  36DA               	rlcf	fsr2h,f,c
  9846  00023C  0100               	movlb	0	; () banked
  9847  00023E  51B4               	movf	??_find_volume& (0+255),w,b
  9848  000240  26D9               	addwf	fsr2l,f,c
  9849  000242  51B5               	movf	(??_find_volume+1)& (0+255),w,b
  9850  000244  22DA               	addwfc	fsr2h,f,c
  9851  000246  CFDE F1B0          	movff	postinc2,find_volume@bsect
  9852  00024A  CFDE F1B1          	movff	postinc2,find_volume@bsect+1
  9853  00024E  CFDE F1B2          	movff	postinc2,find_volume@bsect+2
  9854  000252  CFDE F1B3          	movff	postinc2,find_volume@bsect+3
  9855                           
  9856                           ; BSR set to: 0
  9857                           ;ff.c: 2265: fmt = bsect ? check_fs(fs, bsect) : 2;
  9858  000256  0101               	movlb	1	; () banked
  9859  000258  51B0               	movf	find_volume@bsect& (0+255),w,b
  9860  00025A  11B1               	iorwf	(find_volume@bsect+1)& (0+255),w,b
  9861  00025C  11B2               	iorwf	(find_volume@bsect+2)& (0+255),w,b
  9862  00025E  11B3               	iorwf	(find_volume@bsect+3)& (0+255),w,b
  9863  000260  A4D8               	btfss	status,2,c
  9864  000262  D005               	goto	l1374
  9865                           
  9866                           ; BSR set to: 1
  9867  000264  0E00               	movlw	0
  9868  000266  6F94               	movwf	(_find_volume$2848+1)& (0+255),b
  9869  000268  0E02               	movlw	2
  9870  00026A  6F93               	movwf	_find_volume$2848& (0+255),b
  9871  00026C  D014               	goto	l1376
  9872  00026E                     l1374:
  9873                           
  9874                           ; BSR set to: 1
  9875                           
  9876                           ; BSR set to: 1
  9877  00026E  C1B7  F0A5         	movff	find_volume@fs,check_fs@fs
  9878  000272  C1B8  F0A6         	movff	find_volume@fs+1,check_fs@fs+1
  9879  000276  C1B0  F0A7         	movff	find_volume@bsect,check_fs@sect
  9880  00027A  C1B1  F0A8         	movff	find_volume@bsect+1,check_fs@sect+1
  9881  00027E  C1B2  F0A9         	movff	find_volume@bsect+2,check_fs@sect+2
  9882  000282  C1B3  F0AA         	movff	find_volume@bsect+3,check_fs@sect+3
  9883  000286  ECEF  F023         	call	_check_fs	;wreg free
  9884  00028A  0100               	movlb	0	; () banked
  9885  00028C  6FB4               	movwf	??_find_volume& (0+255),b
  9886  00028E  51B4               	movf	??_find_volume& (0+255),w,b
  9887  000290  0101               	movlb	1	; () banked
  9888  000292  6F93               	movwf	_find_volume$2848& (0+255),b
  9889  000294  6B94               	clrf	(_find_volume$2848+1)& (0+255),b
  9890  000296                     l1376:
  9891                           
  9892                           ; BSR set to: 1
  9893                           ;ff.c: 2266: } while (!0 && fmt && ++i < 4);
  9894                           
  9895                           ; BSR set to: 1
  9896  000296  C193  F1B6         	movff	_find_volume$2848,find_volume@fmt
  9897                           
  9898                           ; BSR set to: 1
  9899  00029A  51B6               	movf	find_volume@fmt& (0+255),w,b
  9900  00029C  B4D8               	btfsc	status,2,c
  9901  00029E  D008               	goto	u16750
  9902                           
  9903                           ; BSR set to: 1
  9904  0002A0  4BB4               	infsnz	find_volume@i& (0+255),f,b
  9905  0002A2  2BB5               	incf	(find_volume@i+1)& (0+255),f,b
  9906  0002A4  51B5               	movf	(find_volume@i+1)& (0+255),w,b
  9907  0002A6  E104               	bnz	l12233
  9908  0002A8  0E04               	movlw	4
  9909  0002AA  5DB4               	subwf	find_volume@i& (0+255),w,b
  9910  0002AC  A0D8               	btfss	status,0,c
  9911  0002AE  D7B8               	goto	l1371
  9912  0002B0                     u16750:
  9913  0002B0                     l12233:
  9914                           
  9915                           ; BSR set to: 1
  9916                           ;ff.c: 2267: }
  9917                           ;ff.c: 2268: if (fmt == 3) return FR_DISK_ERR;
  9918  0002B0  0E03               	movlw	3
  9919  0002B2  19B6               	xorwf	find_volume@fmt& (0+255),w,b
  9920  0002B4  A4D8               	btfss	status,2,c
  9921  0002B6  D002               	goto	l1380
  9922                           
  9923                           ; BSR set to: 1
  9924  0002B8  0E01               	movlw	1
  9925                           
  9926                           ; BSR set to: 1
  9927  0002BA  0012               	return	
  9928  0002BC                     l1380:
  9929                           
  9930                           ; BSR set to: 1
  9931                           ;ff.c: 2269: if (fmt) return FR_NO_FILESYSTEM;
  9932                           
  9933                           ; BSR set to: 1
  9934  0002BC  51B6               	movf	find_volume@fmt& (0+255),w,b
  9935  0002BE  B4D8               	btfsc	status,2,c
  9936  0002C0  D002               	goto	l1381
  9937                           
  9938                           ; BSR set to: 1
  9939  0002C2  0E0D               	movlw	13
  9940                           
  9941                           ; BSR set to: 1
  9942  0002C4  0012               	return	
  9943  0002C6                     l1381:
  9944                           
  9945                           ; BSR set to: 1
  9946                           ;ff.c: 2273: if ((WORD)(*(WORD*)(BYTE*)(fs->win + 11)) != ((UINT)512))
  9947                           
  9948                           ; BSR set to: 1
  9949  0002C6  EE20 F039          	lfsr	2,57
  9950  0002CA  51B7               	movf	find_volume@fs& (0+255),w,b
  9951  0002CC  26D9               	addwf	fsr2l,f,c
  9952  0002CE  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
  9953  0002D0  22DA               	addwfc	fsr2h,f,c
  9954  0002D2  50DE               	movf	postinc2,w,c
  9955  0002D4  E104               	bnz	u16780
  9956  0002D6  0E02               	movlw	2
  9957  0002D8  18DE               	xorwf	postinc2,w,c
  9958  0002DA  B4D8               	btfsc	status,2,c
  9959  0002DC  D002               	goto	l1382
  9960  0002DE                     u16780:
  9961                           
  9962                           ; BSR set to: 1
  9963                           ;ff.c: 2274: return FR_NO_FILESYSTEM;
  9964  0002DE  0E0D               	movlw	13
  9965                           
  9966                           ; BSR set to: 1
  9967  0002E0  0012               	return	
  9968  0002E2                     l1382:
  9969                           
  9970                           ; BSR set to: 1
  9971                           ;ff.c: 2276: fasize = (WORD)(*(WORD*)(BYTE*)(fs->win + 22));
  9972                           
  9973                           ; BSR set to: 1
  9974  0002E2  EE20 F044          	lfsr	2,68
  9975  0002E6  51B7               	movf	find_volume@fs& (0+255),w,b
  9976  0002E8  26D9               	addwf	fsr2l,f,c
  9977  0002EA  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
  9978  0002EC  22DA               	addwfc	fsr2h,f,c
  9979  0002EE  CFDE F0B4          	movff	postinc2,??_find_volume
  9980  0002F2  CFDD F0B5          	movff	postdec2,??_find_volume+1
  9981  0002F6  C0B4  F1AC         	movff	??_find_volume,find_volume@fasize
  9982  0002FA  C0B5  F1AD         	movff	??_find_volume+1,find_volume@fasize+1
  9983  0002FE  6BAE               	clrf	(find_volume@fasize+2)& (0+255),b
  9984  000300  6BAF               	clrf	(find_volume@fasize+3)& (0+255),b
  9985                           
  9986                           ; BSR set to: 1
  9987                           ;ff.c: 2277: if (!fasize) fasize = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 36));
  9988  000302  51AC               	movf	find_volume@fasize& (0+255),w,b
  9989  000304  11AD               	iorwf	(find_volume@fasize+1)& (0+255),w,b
  9990  000306  11AE               	iorwf	(find_volume@fasize+2)& (0+255),w,b
  9991  000308  11AF               	iorwf	(find_volume@fasize+3)& (0+255),w,b
  9992  00030A  A4D8               	btfss	status,2,c
  9993  00030C  D00E               	goto	l1383
  9994                           
  9995                           ; BSR set to: 1
  9996  00030E  EE20 F052          	lfsr	2,82
  9997  000312  51B7               	movf	find_volume@fs& (0+255),w,b
  9998  000314  26D9               	addwf	fsr2l,f,c
  9999  000316  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10000  000318  22DA               	addwfc	fsr2h,f,c
 10001  00031A  CFDE F1AC          	movff	postinc2,find_volume@fasize
 10002  00031E  CFDE F1AD          	movff	postinc2,find_volume@fasize+1
 10003  000322  CFDE F1AE          	movff	postinc2,find_volume@fasize+2
 10004  000326  CFDE F1AF          	movff	postinc2,find_volume@fasize+3
 10005  00032A                     l1383:
 10006                           
 10007                           ; BSR set to: 1
 10008                           ;ff.c: 2278: fs->fsize = fasize;
 10009  00032A  EE20 F016          	lfsr	2,22
 10010  00032E  51B7               	movf	find_volume@fs& (0+255),w,b
 10011  000330  26D9               	addwf	fsr2l,f,c
 10012  000332  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10013  000334  22DA               	addwfc	fsr2h,f,c
 10014  000336  C1AC  FFDE         	movff	find_volume@fasize,postinc2
 10015  00033A  C1AD  FFDE         	movff	find_volume@fasize+1,postinc2
 10016  00033E  C1AE  FFDE         	movff	find_volume@fasize+2,postinc2
 10017  000342  C1AF  FFDE         	movff	find_volume@fasize+3,postinc2
 10018                           
 10019                           ; BSR set to: 1
 10020                           ;ff.c: 2280: fs->n_fats = fs->win[16];
 10021  000346  EE20 F03E          	lfsr	2,62
 10022  00034A  51B7               	movf	find_volume@fs& (0+255),w,b
 10023  00034C  26D9               	addwf	fsr2l,f,c
 10024  00034E  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10025  000350  22DA               	addwfc	fsr2h,f,c
 10026  000352  EE10 F003          	lfsr	1,3
 10027  000356  51B7               	movf	find_volume@fs& (0+255),w,b
 10028  000358  26E1               	addwf	fsr1l,f,c
 10029  00035A  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10030  00035C  22E2               	addwfc	fsr1h,f,c
 10031  00035E  CFDF FFE7          	movff	indf2,indf1
 10032                           
 10033                           ; BSR set to: 1
 10034                           ;ff.c: 2281: if (fs->n_fats != 1 && fs->n_fats != 2)
 10035  000362  EE20 F003          	lfsr	2,3
 10036  000366  51B7               	movf	find_volume@fs& (0+255),w,b
 10037  000368  26D9               	addwf	fsr2l,f,c
 10038  00036A  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10039  00036C  22DA               	addwfc	fsr2h,f,c
 10040  00036E  04DE               	decf	postinc2,w,c
 10041  000370  B4D8               	btfsc	status,2,c
 10042  000372  D00C               	goto	l1384
 10043                           
 10044                           ; BSR set to: 1
 10045  000374  EE20 F003          	lfsr	2,3
 10046  000378  51B7               	movf	find_volume@fs& (0+255),w,b
 10047  00037A  26D9               	addwf	fsr2l,f,c
 10048  00037C  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10049  00037E  22DA               	addwfc	fsr2h,f,c
 10050  000380  0E02               	movlw	2
 10051  000382  18DE               	xorwf	postinc2,w,c
 10052  000384  B4D8               	btfsc	status,2,c
 10053  000386  D002               	goto	l1384
 10054                           
 10055                           ; BSR set to: 1
 10056                           ;ff.c: 2282: return FR_NO_FILESYSTEM;
 10057  000388  0E0D               	movlw	13
 10058                           
 10059                           ; BSR set to: 1
 10060  00038A  0012               	return	
 10061  00038C                     l1384:
 10062                           
 10063                           ; BSR set to: 1
 10064                           ;ff.c: 2283: fasize *= fs->n_fats;
 10065                           
 10066                           ; BSR set to: 1
 10067  00038C  C1AC  F01A         	movff	find_volume@fasize,___lmul@multiplier
 10068  000390  C1AD  F01B         	movff	find_volume@fasize+1,___lmul@multiplier+1
 10069  000394  C1AE  F01C         	movff	find_volume@fasize+2,___lmul@multiplier+2
 10070  000398  C1AF  F01D         	movff	find_volume@fasize+3,___lmul@multiplier+3
 10071  00039C  EE20 F003          	lfsr	2,3
 10072  0003A0  51B7               	movf	find_volume@fs& (0+255),w,b
 10073  0003A2  26D9               	addwf	fsr2l,f,c
 10074  0003A4  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10075  0003A6  22DA               	addwfc	fsr2h,f,c
 10076  0003A8  50DF               	movf	indf2,w,c
 10077  0003AA  0100               	movlb	0	; () banked
 10078  0003AC  6FB4               	movwf	??_find_volume& (0+255),b
 10079  0003AE  51B4               	movf	??_find_volume& (0+255),w,b
 10080  0003B0  6E1E               	movwf	___lmul@multiplicand,c
 10081  0003B2  6A1F               	clrf	___lmul@multiplicand+1,c
 10082  0003B4  6A20               	clrf	___lmul@multiplicand+2,c
 10083  0003B6  6A21               	clrf	___lmul@multiplicand+3,c
 10084  0003B8  EC24  F02B         	call	___lmul	;wreg free
 10085  0003BC  C01A  F1AC         	movff	?___lmul,find_volume@fasize
 10086  0003C0  C01B  F1AD         	movff	?___lmul+1,find_volume@fasize+1
 10087  0003C4  C01C  F1AE         	movff	?___lmul+2,find_volume@fasize+2
 10088  0003C8  C01D  F1AF         	movff	?___lmul+3,find_volume@fasize+3
 10089                           
 10090                           ;ff.c: 2285: fs->csize = fs->win[13];
 10091  0003CC  0101               	movlb	1	; () banked
 10092  0003CE  EE20 F03B          	lfsr	2,59
 10093  0003D2  51B7               	movf	find_volume@fs& (0+255),w,b
 10094  0003D4  26D9               	addwf	fsr2l,f,c
 10095  0003D6  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10096  0003D8  22DA               	addwfc	fsr2h,f,c
 10097  0003DA  EE10 F002          	lfsr	1,2
 10098  0003DE  51B7               	movf	find_volume@fs& (0+255),w,b
 10099  0003E0  26E1               	addwf	fsr1l,f,c
 10100  0003E2  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10101  0003E4  22E2               	addwfc	fsr1h,f,c
 10102  0003E6  CFDF FFE7          	movff	indf2,indf1
 10103                           
 10104                           ; BSR set to: 1
 10105                           ;ff.c: 2286: if (!fs->csize || (fs->csize & (fs->csize - 1)))
 10106  0003EA  EE20 F002          	lfsr	2,2
 10107  0003EE  51B7               	movf	find_volume@fs& (0+255),w,b
 10108  0003F0  26D9               	addwf	fsr2l,f,c
 10109  0003F2  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10110  0003F4  22DA               	addwfc	fsr2h,f,c
 10111  0003F6  50DF               	movf	indf2,w,c
 10112  0003F8  B4D8               	btfsc	status,2,c
 10113  0003FA  D026               	goto	u16830
 10114                           
 10115                           ; BSR set to: 1
 10116  0003FC  0EFF               	movlw	255
 10117  0003FE  0100               	movlb	0	; () banked
 10118  000400  6FB4               	movwf	??_find_volume& (0+255),b
 10119  000402  0EFF               	movlw	255
 10120  000404  6FB5               	movwf	(??_find_volume+1)& (0+255),b
 10121  000406  0101               	movlb	1	; () banked
 10122  000408  EE20 F002          	lfsr	2,2
 10123  00040C  51B7               	movf	find_volume@fs& (0+255),w,b
 10124  00040E  26D9               	addwf	fsr2l,f,c
 10125  000410  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10126  000412  22DA               	addwfc	fsr2h,f,c
 10127  000414  50DF               	movf	indf2,w,c
 10128  000416  0100               	movlb	0	; () banked
 10129  000418  6FB6               	movwf	(??_find_volume+2)& (0+255),b
 10130  00041A  6BB7               	clrf	(??_find_volume+3)& (0+255),b
 10131  00041C  51B4               	movf	??_find_volume& (0+255),w,b
 10132  00041E  27B6               	addwf	(??_find_volume+2)& (0+255),f,b
 10133  000420  51B5               	movf	(??_find_volume+1)& (0+255),w,b
 10134  000422  23B7               	addwfc	(??_find_volume+3)& (0+255),f,b
 10135  000424  0101               	movlb	1	; () banked
 10136  000426  EE20 F002          	lfsr	2,2
 10137  00042A  51B7               	movf	find_volume@fs& (0+255),w,b
 10138  00042C  26D9               	addwf	fsr2l,f,c
 10139  00042E  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10140  000430  22DA               	addwfc	fsr2h,f,c
 10141  000432  50DF               	movf	indf2,w,c
 10142  000434  0100               	movlb	0	; () banked
 10143  000436  6FB8               	movwf	(??_find_volume+4)& (0+255),b
 10144  000438  51B8               	movf	(??_find_volume+4)& (0+255),w,b
 10145  00043A  17B6               	andwf	(??_find_volume+2)& (0+255),f,b
 10146  00043C  0E00               	movlw	0
 10147  00043E  17B7               	andwf	(??_find_volume+3)& (0+255),f,b
 10148  000440  51B6               	movf	(??_find_volume+2)& (0+255),w,b
 10149  000442  11B7               	iorwf	(??_find_volume+3)& (0+255),w,b
 10150  000444  B4D8               	btfsc	status,2,c
 10151  000446  D002               	goto	l1385
 10152  000448                     u16830:
 10153                           
 10154                           ;ff.c: 2287: return FR_NO_FILESYSTEM;
 10155                           
 10156                           ; BSR set to: 0
 10157  000448  0E0D               	movlw	13
 10158  00044A  0012               	return	
 10159  00044C                     l1385:
 10160                           
 10161                           ;ff.c: 2289: fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(fs->win + 17));
 10162  00044C  0101               	movlb	1	; () banked
 10163  00044E  EE20 F03F          	lfsr	2,63
 10164  000452  51B7               	movf	find_volume@fs& (0+255),w,b
 10165  000454  26D9               	addwf	fsr2l,f,c
 10166  000456  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10167  000458  22DA               	addwfc	fsr2h,f,c
 10168  00045A  EE10 F008          	lfsr	1,8
 10169  00045E  51B7               	movf	find_volume@fs& (0+255),w,b
 10170  000460  26E1               	addwf	fsr1l,f,c
 10171  000462  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10172  000464  22E2               	addwfc	fsr1h,f,c
 10173  000466  CFDE FFE6          	movff	postinc2,postinc1
 10174  00046A  CFDD FFE5          	movff	postdec2,postdec1
 10175                           
 10176                           ; BSR set to: 1
 10177                           ;ff.c: 2290: if (fs->n_rootdir % (((UINT)512) / 32))
 10178  00046E  EE20 F008          	lfsr	2,8
 10179  000472  51B7               	movf	find_volume@fs& (0+255),w,b
 10180  000474  26D9               	addwf	fsr2l,f,c
 10181  000476  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10182  000478  22DA               	addwfc	fsr2h,f,c
 10183  00047A  CFDE F0B4          	movff	postinc2,??_find_volume
 10184  00047E  CFDD F0B5          	movff	postdec2,??_find_volume+1
 10185  000482  0E0F               	movlw	15
 10186  000484  0100               	movlb	0	; () banked
 10187  000486  17B4               	andwf	??_find_volume& (0+255),f,b
 10188  000488  0E00               	movlw	0
 10189  00048A  17B5               	andwf	(??_find_volume+1)& (0+255),f,b
 10190  00048C  51B4               	movf	??_find_volume& (0+255),w,b
 10191  00048E  11B5               	iorwf	(??_find_volume+1)& (0+255),w,b
 10192  000490  B4D8               	btfsc	status,2,c
 10193  000492  D002               	goto	l1388
 10194                           
 10195                           ; BSR set to: 0
 10196                           ;ff.c: 2291: return FR_NO_FILESYSTEM;
 10197  000494  0E0D               	movlw	13
 10198                           
 10199                           ; BSR set to: 0
 10200  000496  0012               	return	
 10201  000498                     l1388:
 10202                           
 10203                           ; BSR set to: 0
 10204                           ;ff.c: 2293: tsect = (WORD)(*(WORD*)(BYTE*)(fs->win + 19));
 10205                           
 10206                           ; BSR set to: 0
 10207  000498  0101               	movlb	1	; () banked
 10208  00049A  EE20 F041          	lfsr	2,65
 10209  00049E  51B7               	movf	find_volume@fs& (0+255),w,b
 10210  0004A0  26D9               	addwf	fsr2l,f,c
 10211  0004A2  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10212  0004A4  22DA               	addwfc	fsr2h,f,c
 10213  0004A6  CFDE F0B4          	movff	postinc2,??_find_volume
 10214  0004AA  CFDD F0B5          	movff	postdec2,??_find_volume+1
 10215  0004AE  C0B4  F1A3         	movff	??_find_volume,find_volume@tsect
 10216  0004B2  C0B5  F1A4         	movff	??_find_volume+1,find_volume@tsect+1
 10217  0004B6  6BA5               	clrf	(find_volume@tsect+2)& (0+255),b
 10218  0004B8  6BA6               	clrf	(find_volume@tsect+3)& (0+255),b
 10219                           
 10220                           ; BSR set to: 1
 10221                           ;ff.c: 2294: if (!tsect) tsect = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 32));
 10222  0004BA  51A3               	movf	find_volume@tsect& (0+255),w,b
 10223  0004BC  11A4               	iorwf	(find_volume@tsect+1)& (0+255),w,b
 10224  0004BE  11A5               	iorwf	(find_volume@tsect+2)& (0+255),w,b
 10225  0004C0  11A6               	iorwf	(find_volume@tsect+3)& (0+255),w,b
 10226  0004C2  A4D8               	btfss	status,2,c
 10227  0004C4  D00E               	goto	l1389
 10228                           
 10229                           ; BSR set to: 1
 10230  0004C6  EE20 F04E          	lfsr	2,78
 10231  0004CA  51B7               	movf	find_volume@fs& (0+255),w,b
 10232  0004CC  26D9               	addwf	fsr2l,f,c
 10233  0004CE  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10234  0004D0  22DA               	addwfc	fsr2h,f,c
 10235  0004D2  CFDE F1A3          	movff	postinc2,find_volume@tsect
 10236  0004D6  CFDE F1A4          	movff	postinc2,find_volume@tsect+1
 10237  0004DA  CFDE F1A5          	movff	postinc2,find_volume@tsect+2
 10238  0004DE  CFDE F1A6          	movff	postinc2,find_volume@tsect+3
 10239  0004E2                     l1389:
 10240                           
 10241                           ; BSR set to: 1
 10242                           ;ff.c: 2296: nrsv = (WORD)(*(WORD*)(BYTE*)(fs->win + 14));
 10243  0004E2  EE20 F03C          	lfsr	2,60
 10244  0004E6  51B7               	movf	find_volume@fs& (0+255),w,b
 10245  0004E8  26D9               	addwf	fsr2l,f,c
 10246  0004EA  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10247  0004EC  22DA               	addwfc	fsr2h,f,c
 10248  0004EE  CFDE F1A1          	movff	postinc2,find_volume@nrsv
 10249  0004F2  CFDD F1A2          	movff	postdec2,find_volume@nrsv+1
 10250                           
 10251                           ; BSR set to: 1
 10252                           ;ff.c: 2297: if (!nrsv) return FR_NO_FILESYSTEM;
 10253  0004F6  51A1               	movf	find_volume@nrsv& (0+255),w,b
 10254  0004F8  11A2               	iorwf	(find_volume@nrsv+1)& (0+255),w,b
 10255  0004FA  A4D8               	btfss	status,2,c
 10256  0004FC  D002               	goto	l1390
 10257                           
 10258                           ; BSR set to: 1
 10259  0004FE  0E0D               	movlw	13
 10260                           
 10261                           ; BSR set to: 1
 10262  000500  0012               	return	
 10263  000502                     l1390:
 10264                           
 10265                           ; BSR set to: 1
 10266                           ;ff.c: 2300: sysect = nrsv + fasize + fs->n_rootdir / (((UINT)512) / 32);
 10267                           
 10268                           ; BSR set to: 1
 10269  000502  EE20 F008          	lfsr	2,8
 10270  000506  51B7               	movf	find_volume@fs& (0+255),w,b
 10271  000508  26D9               	addwf	fsr2l,f,c
 10272  00050A  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10273  00050C  22DA               	addwfc	fsr2h,f,c
 10274  00050E  CFDE F0B4          	movff	postinc2,??_find_volume
 10275  000512  CFDD F0B5          	movff	postdec2,??_find_volume+1
 10276  000516  0E04               	movlw	4
 10277  000518  0100               	movlb	0	; () banked
 10278  00051A  6FB6               	movwf	(??_find_volume+2)& (0+255),b
 10279  00051C                     u16875:
 10280  00051C  90D8               	bcf	status,0,c
 10281  00051E  33B5               	rrcf	(??_find_volume+1)& (0+255),f,b
 10282  000520  33B4               	rrcf	??_find_volume& (0+255),f,b
 10283  000522  2FB6               	decfsz	(??_find_volume+2)& (0+255),f,b
 10284  000524  D7FB               	goto	u16875
 10285  000526  0101               	movlb	1	; () banked
 10286  000528  51A1               	movf	find_volume@nrsv& (0+255),w,b
 10287  00052A  0100               	movlb	0	; () banked
 10288  00052C  25B4               	addwf	??_find_volume& (0+255),w,b
 10289  00052E  6FB7               	movwf	(??_find_volume+3)& (0+255),b
 10290  000530  0101               	movlb	1	; () banked
 10291  000532  51A2               	movf	(find_volume@nrsv+1)& (0+255),w,b
 10292  000534  0100               	movlb	0	; () banked
 10293  000536  21B5               	addwfc	(??_find_volume+1)& (0+255),w,b
 10294  000538  6FB8               	movwf	(??_find_volume+4)& (0+255),b
 10295  00053A  6BB9               	clrf	(??_find_volume+5)& (0+255),b
 10296  00053C  B0D8               	btfsc	status,0,c
 10297  00053E  2BB9               	incf	(??_find_volume+5)& (0+255),f,b
 10298  000540  6BBA               	clrf	(??_find_volume+6)& (0+255),b
 10299  000542  0101               	movlb	1	; () banked
 10300  000544  51AC               	movf	find_volume@fasize& (0+255),w,b
 10301  000546  0100               	movlb	0	; () banked
 10302  000548  25B7               	addwf	(??_find_volume+3)& (0+255),w,b
 10303  00054A  0101               	movlb	1	; () banked
 10304  00054C  6F9B               	movwf	find_volume@sysect& (0+255),b
 10305  00054E  51AD               	movf	(find_volume@fasize+1)& (0+255),w,b
 10306  000550  0100               	movlb	0	; () banked
 10307  000552  21B8               	addwfc	(??_find_volume+4)& (0+255),w,b
 10308  000554  0101               	movlb	1	; () banked
 10309  000556  6F9C               	movwf	(find_volume@sysect+1)& (0+255),b
 10310  000558  51AE               	movf	(find_volume@fasize+2)& (0+255),w,b
 10311  00055A  0100               	movlb	0	; () banked
 10312  00055C  21B9               	addwfc	(??_find_volume+5)& (0+255),w,b
 10313  00055E  0101               	movlb	1	; () banked
 10314  000560  6F9D               	movwf	(find_volume@sysect+2)& (0+255),b
 10315  000562  51AF               	movf	(find_volume@fasize+3)& (0+255),w,b
 10316  000564  0100               	movlb	0	; () banked
 10317  000566  21BA               	addwfc	(??_find_volume+6)& (0+255),w,b
 10318  000568  0101               	movlb	1	; () banked
 10319  00056A  6F9E               	movwf	(find_volume@sysect+3)& (0+255),b
 10320                           
 10321                           ; BSR set to: 1
 10322                           ;ff.c: 2301: if (tsect < sysect) return FR_NO_FILESYSTEM;
 10323  00056C  519B               	movf	find_volume@sysect& (0+255),w,b
 10324  00056E  5DA3               	subwf	find_volume@tsect& (0+255),w,b
 10325  000570  519C               	movf	(find_volume@sysect+1)& (0+255),w,b
 10326  000572  59A4               	subwfb	(find_volume@tsect+1)& (0+255),w,b
 10327  000574  519D               	movf	(find_volume@sysect+2)& (0+255),w,b
 10328  000576  59A5               	subwfb	(find_volume@tsect+2)& (0+255),w,b
 10329  000578  519E               	movf	(find_volume@sysect+3)& (0+255),w,b
 10330  00057A  59A6               	subwfb	(find_volume@tsect+3)& (0+255),w,b
 10331  00057C  B0D8               	btfsc	status,0,c
 10332  00057E  D002               	goto	l1391
 10333                           
 10334                           ; BSR set to: 1
 10335  000580  0E0D               	movlw	13
 10336                           
 10337                           ; BSR set to: 1
 10338  000582  0012               	return	
 10339  000584                     l1391:
 10340                           
 10341                           ; BSR set to: 1
 10342                           ;ff.c: 2302: nclst = (tsect - sysect) / fs->csize;
 10343                           
 10344                           ; BSR set to: 1
 10345  000584  C19B  F0B4         	movff	find_volume@sysect,??_find_volume
 10346  000588  C19C  F0B5         	movff	find_volume@sysect+1,??_find_volume+1
 10347  00058C  C19D  F0B6         	movff	find_volume@sysect+2,??_find_volume+2
 10348  000590  C19E  F0B7         	movff	find_volume@sysect+3,??_find_volume+3
 10349  000594  0100               	movlb	0	; () banked
 10350  000596  1FB4               	comf	??_find_volume& (0+255),f,b
 10351  000598  1FB5               	comf	(??_find_volume+1)& (0+255),f,b
 10352  00059A  1FB6               	comf	(??_find_volume+2)& (0+255),f,b
 10353  00059C  1FB7               	comf	(??_find_volume+3)& (0+255),f,b
 10354  00059E  2BB4               	incf	??_find_volume& (0+255),f,b
 10355  0005A0  0E00               	movlw	0
 10356  0005A2  23B5               	addwfc	(??_find_volume+1)& (0+255),f,b
 10357  0005A4  23B6               	addwfc	(??_find_volume+2)& (0+255),f,b
 10358  0005A6  23B7               	addwfc	(??_find_volume+3)& (0+255),f,b
 10359  0005A8  0101               	movlb	1	; () banked
 10360  0005AA  51A3               	movf	find_volume@tsect& (0+255),w,b
 10361  0005AC  0100               	movlb	0	; () banked
 10362  0005AE  25B4               	addwf	??_find_volume& (0+255),w,b
 10363  0005B0  6E1A               	movwf	___lldiv@dividend,c
 10364  0005B2  0101               	movlb	1	; () banked
 10365  0005B4  51A4               	movf	(find_volume@tsect+1)& (0+255),w,b
 10366  0005B6  0100               	movlb	0	; () banked
 10367  0005B8  21B5               	addwfc	(??_find_volume+1)& (0+255),w,b
 10368  0005BA  6E1B               	movwf	___lldiv@dividend+1,c
 10369  0005BC  0101               	movlb	1	; () banked
 10370  0005BE  51A5               	movf	(find_volume@tsect+2)& (0+255),w,b
 10371  0005C0  0100               	movlb	0	; () banked
 10372  0005C2  21B6               	addwfc	(??_find_volume+2)& (0+255),w,b
 10373  0005C4  6E1C               	movwf	___lldiv@dividend+2,c
 10374  0005C6  0101               	movlb	1	; () banked
 10375  0005C8  51A6               	movf	(find_volume@tsect+3)& (0+255),w,b
 10376  0005CA  0100               	movlb	0	; () banked
 10377  0005CC  21B7               	addwfc	(??_find_volume+3)& (0+255),w,b
 10378  0005CE  6E1D               	movwf	___lldiv@dividend+3,c
 10379  0005D0  0101               	movlb	1	; () banked
 10380  0005D2  EE20 F002          	lfsr	2,2
 10381  0005D6  51B7               	movf	find_volume@fs& (0+255),w,b
 10382  0005D8  26D9               	addwf	fsr2l,f,c
 10383  0005DA  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10384  0005DC  22DA               	addwfc	fsr2h,f,c
 10385  0005DE  50DF               	movf	indf2,w,c
 10386  0005E0  0100               	movlb	0	; () banked
 10387  0005E2  6FB8               	movwf	(??_find_volume+4)& (0+255),b
 10388  0005E4  51B8               	movf	(??_find_volume+4)& (0+255),w,b
 10389  0005E6  6E1E               	movwf	___lldiv@divisor,c
 10390  0005E8  6A1F               	clrf	___lldiv@divisor+1,c
 10391  0005EA  6A20               	clrf	___lldiv@divisor+2,c
 10392  0005EC  6A21               	clrf	___lldiv@divisor+3,c
 10393  0005EE  EC17  F029         	call	___lldiv	;wreg free
 10394  0005F2  C01A  F1A7         	movff	?___lldiv,find_volume@nclst
 10395  0005F6  C01B  F1A8         	movff	?___lldiv+1,find_volume@nclst+1
 10396  0005FA  C01C  F1A9         	movff	?___lldiv+2,find_volume@nclst+2
 10397  0005FE  C01D  F1AA         	movff	?___lldiv+3,find_volume@nclst+3
 10398                           
 10399                           ;ff.c: 2303: if (!nclst) return FR_NO_FILESYSTEM;
 10400  000602  0101               	movlb	1	; () banked
 10401  000604  51A7               	movf	find_volume@nclst& (0+255),w,b
 10402  000606  11A8               	iorwf	(find_volume@nclst+1)& (0+255),w,b
 10403  000608  11A9               	iorwf	(find_volume@nclst+2)& (0+255),w,b
 10404  00060A  11AA               	iorwf	(find_volume@nclst+3)& (0+255),w,b
 10405  00060C  A4D8               	btfss	status,2,c
 10406  00060E  D002               	goto	l1392
 10407                           
 10408                           ; BSR set to: 1
 10409  000610  0E0D               	movlw	13
 10410                           
 10411                           ; BSR set to: 1
 10412  000612  0012               	return	
 10413  000614                     l1392:
 10414                           
 10415                           ; BSR set to: 1
 10416                           ;ff.c: 2304: fmt = 1;
 10417                           
 10418                           ; BSR set to: 1
 10419  000614  0E01               	movlw	1
 10420  000616  6FB6               	movwf	find_volume@fmt& (0+255),b
 10421                           
 10422                           ; BSR set to: 1
 10423                           ;ff.c: 2305: if (nclst >= 4086U) fmt = 2;
 10424  000618  51AA               	movf	(find_volume@nclst+3)& (0+255),w,b
 10425  00061A  11A9               	iorwf	(find_volume@nclst+2)& (0+255),w,b
 10426  00061C  E106               	bnz	u16900
 10427  00061E  0EF6               	movlw	246
 10428  000620  5DA7               	subwf	find_volume@nclst& (0+255),w,b
 10429  000622  0E0F               	movlw	15
 10430  000624  59A8               	subwfb	(find_volume@nclst+1)& (0+255),w,b
 10431  000626  A0D8               	btfss	status,0,c
 10432  000628  D002               	goto	l1393
 10433  00062A                     u16900:
 10434                           
 10435                           ; BSR set to: 1
 10436  00062A  0E02               	movlw	2
 10437  00062C  6FB6               	movwf	find_volume@fmt& (0+255),b
 10438  00062E                     l1393:
 10439                           
 10440                           ; BSR set to: 1
 10441                           ;ff.c: 2306: if (nclst >= 65526U) fmt = 3;
 10442                           
 10443                           ; BSR set to: 1
 10444  00062E  51AA               	movf	(find_volume@nclst+3)& (0+255),w,b
 10445  000630  11A9               	iorwf	(find_volume@nclst+2)& (0+255),w,b
 10446  000632  E106               	bnz	u16910
 10447  000634  0EF6               	movlw	246
 10448  000636  5DA7               	subwf	find_volume@nclst& (0+255),w,b
 10449  000638  0EFF               	movlw	255
 10450  00063A  59A8               	subwfb	(find_volume@nclst+1)& (0+255),w,b
 10451  00063C  A0D8               	btfss	status,0,c
 10452  00063E  D002               	goto	l1394
 10453  000640                     u16910:
 10454                           
 10455                           ; BSR set to: 1
 10456  000640  0E03               	movlw	3
 10457  000642  6FB6               	movwf	find_volume@fmt& (0+255),b
 10458  000644                     l1394:
 10459                           
 10460                           ; BSR set to: 1
 10461                           ;ff.c: 2309: fs->n_fatent = nclst + 2;
 10462                           
 10463                           ; BSR set to: 1
 10464  000644  0E02               	movlw	2
 10465  000646  25A7               	addwf	find_volume@nclst& (0+255),w,b
 10466  000648  0100               	movlb	0	; () banked
 10467  00064A  6FB4               	movwf	??_find_volume& (0+255),b
 10468  00064C  0E00               	movlw	0
 10469  00064E  0101               	movlb	1	; () banked
 10470  000650  21A8               	addwfc	(find_volume@nclst+1)& (0+255),w,b
 10471  000652  0100               	movlb	0	; () banked
 10472  000654  6FB5               	movwf	(??_find_volume+1)& (0+255),b
 10473  000656  0E00               	movlw	0
 10474  000658  0101               	movlb	1	; () banked
 10475  00065A  21A9               	addwfc	(find_volume@nclst+2)& (0+255),w,b
 10476  00065C  0100               	movlb	0	; () banked
 10477  00065E  6FB6               	movwf	(??_find_volume+2)& (0+255),b
 10478  000660  0E00               	movlw	0
 10479  000662  0101               	movlb	1	; () banked
 10480  000664  21AA               	addwfc	(find_volume@nclst+3)& (0+255),w,b
 10481  000666  0100               	movlb	0	; () banked
 10482  000668  6FB7               	movwf	(??_find_volume+3)& (0+255),b
 10483  00066A  0101               	movlb	1	; () banked
 10484  00066C  EE20 F012          	lfsr	2,18
 10485  000670  51B7               	movf	find_volume@fs& (0+255),w,b
 10486  000672  26D9               	addwf	fsr2l,f,c
 10487  000674  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10488  000676  22DA               	addwfc	fsr2h,f,c
 10489  000678  C0B4  FFDE         	movff	??_find_volume,postinc2
 10490  00067C  C0B5  FFDE         	movff	??_find_volume+1,postinc2
 10491  000680  C0B6  FFDE         	movff	??_find_volume+2,postinc2
 10492  000684  C0B7  FFDE         	movff	??_find_volume+3,postinc2
 10493                           
 10494                           ; BSR set to: 1
 10495                           ;ff.c: 2310: fs->volbase = bsect;
 10496  000688  EE20 F01A          	lfsr	2,26
 10497  00068C  51B7               	movf	find_volume@fs& (0+255),w,b
 10498  00068E  26D9               	addwf	fsr2l,f,c
 10499  000690  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10500  000692  22DA               	addwfc	fsr2h,f,c
 10501  000694  C1B0  FFDE         	movff	find_volume@bsect,postinc2
 10502  000698  C1B1  FFDE         	movff	find_volume@bsect+1,postinc2
 10503  00069C  C1B2  FFDE         	movff	find_volume@bsect+2,postinc2
 10504  0006A0  C1B3  FFDE         	movff	find_volume@bsect+3,postinc2
 10505                           
 10506                           ; BSR set to: 1
 10507                           ;ff.c: 2311: fs->fatbase = bsect + nrsv;
 10508  0006A4  51A1               	movf	find_volume@nrsv& (0+255),w,b
 10509  0006A6  25B0               	addwf	find_volume@bsect& (0+255),w,b
 10510  0006A8  0100               	movlb	0	; () banked
 10511  0006AA  6FB4               	movwf	??_find_volume& (0+255),b
 10512  0006AC  0101               	movlb	1	; () banked
 10513  0006AE  51A2               	movf	(find_volume@nrsv+1)& (0+255),w,b
 10514  0006B0  21B1               	addwfc	(find_volume@bsect+1)& (0+255),w,b
 10515  0006B2  0100               	movlb	0	; () banked
 10516  0006B4  6FB5               	movwf	(??_find_volume+1)& (0+255),b
 10517  0006B6  0E00               	movlw	0
 10518  0006B8  0101               	movlb	1	; () banked
 10519  0006BA  21B2               	addwfc	(find_volume@bsect+2)& (0+255),w,b
 10520  0006BC  0100               	movlb	0	; () banked
 10521  0006BE  6FB6               	movwf	(??_find_volume+2)& (0+255),b
 10522  0006C0  0E00               	movlw	0
 10523  0006C2  0101               	movlb	1	; () banked
 10524  0006C4  21B3               	addwfc	(find_volume@bsect+3)& (0+255),w,b
 10525  0006C6  0100               	movlb	0	; () banked
 10526  0006C8  6FB7               	movwf	(??_find_volume+3)& (0+255),b
 10527  0006CA  0101               	movlb	1	; () banked
 10528  0006CC  EE20 F01E          	lfsr	2,30
 10529  0006D0  51B7               	movf	find_volume@fs& (0+255),w,b
 10530  0006D2  26D9               	addwf	fsr2l,f,c
 10531  0006D4  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10532  0006D6  22DA               	addwfc	fsr2h,f,c
 10533  0006D8  C0B4  FFDE         	movff	??_find_volume,postinc2
 10534  0006DC  C0B5  FFDE         	movff	??_find_volume+1,postinc2
 10535  0006E0  C0B6  FFDE         	movff	??_find_volume+2,postinc2
 10536  0006E4  C0B7  FFDE         	movff	??_find_volume+3,postinc2
 10537                           
 10538                           ; BSR set to: 1
 10539                           ;ff.c: 2312: fs->database = bsect + sysect;
 10540  0006E8  519B               	movf	find_volume@sysect& (0+255),w,b
 10541  0006EA  25B0               	addwf	find_volume@bsect& (0+255),w,b
 10542  0006EC  0100               	movlb	0	; () banked
 10543  0006EE  6FB4               	movwf	??_find_volume& (0+255),b
 10544  0006F0  0101               	movlb	1	; () banked
 10545  0006F2  519C               	movf	(find_volume@sysect+1)& (0+255),w,b
 10546  0006F4  21B1               	addwfc	(find_volume@bsect+1)& (0+255),w,b
 10547  0006F6  0100               	movlb	0	; () banked
 10548  0006F8  6FB5               	movwf	(??_find_volume+1)& (0+255),b
 10549  0006FA  0101               	movlb	1	; () banked
 10550  0006FC  519D               	movf	(find_volume@sysect+2)& (0+255),w,b
 10551  0006FE  21B2               	addwfc	(find_volume@bsect+2)& (0+255),w,b
 10552  000700  0100               	movlb	0	; () banked
 10553  000702  6FB6               	movwf	(??_find_volume+2)& (0+255),b
 10554  000704  0101               	movlb	1	; () banked
 10555  000706  519E               	movf	(find_volume@sysect+3)& (0+255),w,b
 10556  000708  21B3               	addwfc	(find_volume@bsect+3)& (0+255),w,b
 10557  00070A  0100               	movlb	0	; () banked
 10558  00070C  6FB7               	movwf	(??_find_volume+3)& (0+255),b
 10559  00070E  0101               	movlb	1	; () banked
 10560  000710  EE20 F026          	lfsr	2,38
 10561  000714  51B7               	movf	find_volume@fs& (0+255),w,b
 10562  000716  26D9               	addwf	fsr2l,f,c
 10563  000718  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10564  00071A  22DA               	addwfc	fsr2h,f,c
 10565  00071C  C0B4  FFDE         	movff	??_find_volume,postinc2
 10566  000720  C0B5  FFDE         	movff	??_find_volume+1,postinc2
 10567  000724  C0B6  FFDE         	movff	??_find_volume+2,postinc2
 10568  000728  C0B7  FFDE         	movff	??_find_volume+3,postinc2
 10569                           
 10570                           ; BSR set to: 1
 10571                           ;ff.c: 2313: if (fmt == 3) {
 10572  00072C  0E03               	movlw	3
 10573  00072E  19B6               	xorwf	find_volume@fmt& (0+255),w,b
 10574  000730  A4D8               	btfss	status,2,c
 10575  000732  D040               	goto	l1395
 10576                           
 10577                           ; BSR set to: 1
 10578                           ;ff.c: 2314: if (fs->n_rootdir) return FR_NO_FILESYSTEM;
 10579  000734  EE20 F008          	lfsr	2,8
 10580  000738  51B7               	movf	find_volume@fs& (0+255),w,b
 10581  00073A  26D9               	addwf	fsr2l,f,c
 10582  00073C  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10583  00073E  22DA               	addwfc	fsr2h,f,c
 10584  000740  50DE               	movf	postinc2,w,c
 10585  000742  10DE               	iorwf	postinc2,w,c
 10586  000744  B4D8               	btfsc	status,2,c
 10587  000746  D002               	goto	l1396
 10588                           
 10589                           ; BSR set to: 1
 10590  000748  0E0D               	movlw	13
 10591                           
 10592                           ; BSR set to: 1
 10593  00074A  0012               	return	
 10594  00074C                     l1396:
 10595                           
 10596                           ; BSR set to: 1
 10597                           ;ff.c: 2315: fs->dirbase = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 44));
 10598                           
 10599                           ; BSR set to: 1
 10600  00074C  EE20 F05A          	lfsr	2,90
 10601  000750  51B7               	movf	find_volume@fs& (0+255),w,b
 10602  000752  26D9               	addwf	fsr2l,f,c
 10603  000754  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10604  000756  22DA               	addwfc	fsr2h,f,c
 10605  000758  EE10 F022          	lfsr	1,34
 10606  00075C  51B7               	movf	find_volume@fs& (0+255),w,b
 10607  00075E  26E1               	addwf	fsr1l,f,c
 10608  000760  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10609  000762  22E2               	addwfc	fsr1h,f,c
 10610  000764  CFDE FFE6          	movff	postinc2,postinc1
 10611  000768  CFDE FFE6          	movff	postinc2,postinc1
 10612  00076C  CFDE FFE6          	movff	postinc2,postinc1
 10613  000770  CFDE FFE6          	movff	postinc2,postinc1
 10614                           
 10615                           ; BSR set to: 1
 10616                           ;ff.c: 2316: szbfat = fs->n_fatent * 4;
 10617  000774  EE20 F012          	lfsr	2,18
 10618  000778  51B7               	movf	find_volume@fs& (0+255),w,b
 10619  00077A  26D9               	addwf	fsr2l,f,c
 10620  00077C  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10621  00077E  22DA               	addwfc	fsr2h,f,c
 10622  000780  CFDE F0B4          	movff	postinc2,??_find_volume
 10623  000784  CFDE F0B5          	movff	postinc2,??_find_volume+1
 10624  000788  CFDE F0B6          	movff	postinc2,??_find_volume+2
 10625  00078C  CFDE F0B7          	movff	postinc2,??_find_volume+3
 10626  000790  0E02               	movlw	2
 10627  000792                     u16945:
 10628  000792  90D8               	bcf	status,0,c
 10629  000794  0100               	movlb	0	; () banked
 10630  000796  37B4               	rlcf	??_find_volume& (0+255),f,b
 10631  000798  37B5               	rlcf	(??_find_volume+1)& (0+255),f,b
 10632  00079A  37B6               	rlcf	(??_find_volume+2)& (0+255),f,b
 10633  00079C  37B7               	rlcf	(??_find_volume+3)& (0+255),f,b
 10634  00079E  2EE8               	decfsz	wreg,f,c
 10635  0007A0  D7F8               	goto	u16945
 10636  0007A2  C0B4  F195         	movff	??_find_volume,find_volume@szbfat
 10637  0007A6  C0B5  F196         	movff	??_find_volume+1,find_volume@szbfat+1
 10638  0007AA  C0B6  F197         	movff	??_find_volume+2,find_volume@szbfat+2
 10639  0007AE  C0B7  F198         	movff	??_find_volume+3,find_volume@szbfat+3
 10640                           
 10641                           ;ff.c: 2317: } else {
 10642  0007B2  D0AC               	goto	l1402
 10643  0007B4                     l1395:
 10644                           
 10645                           ;ff.c: 2318: if (!fs->n_rootdir) return FR_NO_FILESYSTEM;
 10646                           
 10647                           ; BSR set to: 0
 10648  0007B4  0101               	movlb	1	; () banked
 10649  0007B6  EE20 F008          	lfsr	2,8
 10650  0007BA  51B7               	movf	find_volume@fs& (0+255),w,b
 10651  0007BC  26D9               	addwf	fsr2l,f,c
 10652  0007BE  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10653  0007C0  22DA               	addwfc	fsr2h,f,c
 10654  0007C2  50DE               	movf	postinc2,w,c
 10655  0007C4  10DE               	iorwf	postinc2,w,c
 10656  0007C6  A4D8               	btfss	status,2,c
 10657  0007C8  D002               	goto	l1398
 10658                           
 10659                           ; BSR set to: 1
 10660  0007CA  0E0D               	movlw	13
 10661                           
 10662                           ; BSR set to: 1
 10663  0007CC  0012               	return	
 10664  0007CE                     l1398:
 10665                           
 10666                           ; BSR set to: 1
 10667                           ;ff.c: 2319: fs->dirbase = fs->fatbase + fasize;
 10668                           
 10669                           ; BSR set to: 1
 10670  0007CE  EE20 F01E          	lfsr	2,30
 10671  0007D2  51B7               	movf	find_volume@fs& (0+255),w,b
 10672  0007D4  26D9               	addwf	fsr2l,f,c
 10673  0007D6  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10674  0007D8  22DA               	addwfc	fsr2h,f,c
 10675  0007DA  CFDE F0B4          	movff	postinc2,??_find_volume
 10676  0007DE  CFDE F0B5          	movff	postinc2,??_find_volume+1
 10677  0007E2  CFDE F0B6          	movff	postinc2,??_find_volume+2
 10678  0007E6  CFDE F0B7          	movff	postinc2,??_find_volume+3
 10679  0007EA  51AC               	movf	find_volume@fasize& (0+255),w,b
 10680  0007EC  0100               	movlb	0	; () banked
 10681  0007EE  25B4               	addwf	??_find_volume& (0+255),w,b
 10682  0007F0  6FB8               	movwf	(??_find_volume+4)& (0+255),b
 10683  0007F2  0101               	movlb	1	; () banked
 10684  0007F4  51AD               	movf	(find_volume@fasize+1)& (0+255),w,b
 10685  0007F6  0100               	movlb	0	; () banked
 10686  0007F8  21B5               	addwfc	(??_find_volume+1)& (0+255),w,b
 10687  0007FA  6FB9               	movwf	(??_find_volume+5)& (0+255),b
 10688  0007FC  0101               	movlb	1	; () banked
 10689  0007FE  51AE               	movf	(find_volume@fasize+2)& (0+255),w,b
 10690  000800  0100               	movlb	0	; () banked
 10691  000802  21B6               	addwfc	(??_find_volume+2)& (0+255),w,b
 10692  000804  6FBA               	movwf	(??_find_volume+6)& (0+255),b
 10693  000806  0101               	movlb	1	; () banked
 10694  000808  51AF               	movf	(find_volume@fasize+3)& (0+255),w,b
 10695  00080A  0100               	movlb	0	; () banked
 10696  00080C  21B7               	addwfc	(??_find_volume+3)& (0+255),w,b
 10697  00080E  6FBB               	movwf	(??_find_volume+7)& (0+255),b
 10698  000810  0101               	movlb	1	; () banked
 10699  000812  EE20 F022          	lfsr	2,34
 10700  000816  51B7               	movf	find_volume@fs& (0+255),w,b
 10701  000818  26D9               	addwf	fsr2l,f,c
 10702  00081A  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10703  00081C  22DA               	addwfc	fsr2h,f,c
 10704  00081E  C0B8  FFDE         	movff	??_find_volume+4,postinc2
 10705  000822  C0B9  FFDE         	movff	??_find_volume+5,postinc2
 10706  000826  C0BA  FFDE         	movff	??_find_volume+6,postinc2
 10707  00082A  C0BB  FFDE         	movff	??_find_volume+7,postinc2
 10708                           
 10709                           ; BSR set to: 1
 10710                           ;ff.c: 2320: szbfat = (fmt == 2) ?
 10711                           ;ff.c: 2321: fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 10712  00082E  0E02               	movlw	2
 10713  000830  19B6               	xorwf	find_volume@fmt& (0+255),w,b
 10714  000832  B4D8               	btfsc	status,2,c
 10715  000834  D04C               	goto	l1400
 10716                           
 10717                           ; BSR set to: 1
 10718  000836  EE20 F012          	lfsr	2,18
 10719  00083A  51B7               	movf	find_volume@fs& (0+255),w,b
 10720  00083C  26D9               	addwf	fsr2l,f,c
 10721  00083E  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10722  000840  22DA               	addwfc	fsr2h,f,c
 10723  000842  CFDE F0B4          	movff	postinc2,??_find_volume
 10724  000846  CFDE F0B5          	movff	postinc2,??_find_volume+1
 10725  00084A  CFDE F0B6          	movff	postinc2,??_find_volume+2
 10726  00084E  CFDE F0B7          	movff	postinc2,??_find_volume+3
 10727  000852  0E01               	movlw	1
 10728  000854  0100               	movlb	0	; () banked
 10729  000856  15B4               	andwf	??_find_volume& (0+255),w,b
 10730  000858  6FB8               	movwf	(??_find_volume+4)& (0+255),b
 10731  00085A  0E00               	movlw	0
 10732  00085C  15B5               	andwf	(??_find_volume+1)& (0+255),w,b
 10733  00085E  6FB9               	movwf	(??_find_volume+5)& (0+255),b
 10734  000860  0E00               	movlw	0
 10735  000862  15B6               	andwf	(??_find_volume+2)& (0+255),w,b
 10736  000864  6FBA               	movwf	(??_find_volume+6)& (0+255),b
 10737  000866  0E00               	movlw	0
 10738  000868  15B7               	andwf	(??_find_volume+3)& (0+255),w,b
 10739  00086A  6FBB               	movwf	(??_find_volume+7)& (0+255),b
 10740  00086C  0101               	movlb	1	; () banked
 10741  00086E  EE20 F012          	lfsr	2,18
 10742  000872  51B7               	movf	find_volume@fs& (0+255),w,b
 10743  000874  26D9               	addwf	fsr2l,f,c
 10744  000876  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10745  000878  22DA               	addwfc	fsr2h,f,c
 10746  00087A  CFDE F01A          	movff	postinc2,___lmul@multiplier
 10747  00087E  CFDE F01B          	movff	postinc2,___lmul@multiplier+1
 10748  000882  CFDE F01C          	movff	postinc2,___lmul@multiplier+2
 10749  000886  CFDE F01D          	movff	postinc2,___lmul@multiplier+3
 10750  00088A  0E03               	movlw	3
 10751  00088C  6E1E               	movwf	___lmul@multiplicand,c
 10752  00088E  0E00               	movlw	0
 10753  000890  6E1F               	movwf	___lmul@multiplicand+1,c
 10754  000892  0E00               	movlw	0
 10755  000894  6E20               	movwf	___lmul@multiplicand+2,c
 10756  000896  0E00               	movlw	0
 10757  000898  6E21               	movwf	___lmul@multiplicand+3,c
 10758  00089A  EC24  F02B         	call	___lmul	;wreg free
 10759  00089E  90D8               	bcf	status,0,c
 10760  0008A0  321D               	rrcf	?___lmul+3,f,c
 10761  0008A2  321C               	rrcf	?___lmul+2,f,c
 10762  0008A4  321B               	rrcf	?___lmul+1,f,c
 10763  0008A6  321A               	rrcf	?___lmul,f,c
 10764  0008A8  0100               	movlb	0	; () banked
 10765  0008AA  51B8               	movf	(??_find_volume+4)& (0+255),w,b
 10766  0008AC  241A               	addwf	?___lmul,w,c
 10767  0008AE  0101               	movlb	1	; () banked
 10768  0008B0  6F95               	movwf	find_volume@szbfat& (0+255),b
 10769  0008B2  0100               	movlb	0	; () banked
 10770  0008B4  51B9               	movf	(??_find_volume+5)& (0+255),w,b
 10771  0008B6  201B               	addwfc	?___lmul+1,w,c
 10772  0008B8  0101               	movlb	1	; () banked
 10773  0008BA  6F96               	movwf	(find_volume@szbfat+1)& (0+255),b
 10774  0008BC  0100               	movlb	0	; () banked
 10775  0008BE  51BA               	movf	(??_find_volume+6)& (0+255),w,b
 10776  0008C0  201C               	addwfc	?___lmul+2,w,c
 10777  0008C2  0101               	movlb	1	; () banked
 10778  0008C4  6F97               	movwf	(find_volume@szbfat+2)& (0+255),b
 10779  0008C6  0100               	movlb	0	; () banked
 10780  0008C8  51BB               	movf	(??_find_volume+7)& (0+255),w,b
 10781  0008CA  201D               	addwfc	?___lmul+3,w,c
 10782  0008CC  D01D               	goto	L8
 10783  0008CE                     l1400:
 10784                           
 10785                           ; BSR set to: 1
 10786                           
 10787                           ; BSR set to: 1
 10788  0008CE  EE20 F012          	lfsr	2,18
 10789  0008D2  51B7               	movf	find_volume@fs& (0+255),w,b
 10790  0008D4  26D9               	addwf	fsr2l,f,c
 10791  0008D6  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10792  0008D8  22DA               	addwfc	fsr2h,f,c
 10793  0008DA  CFDE F0B4          	movff	postinc2,??_find_volume
 10794  0008DE  CFDE F0B5          	movff	postinc2,??_find_volume+1
 10795  0008E2  CFDE F0B6          	movff	postinc2,??_find_volume+2
 10796  0008E6  CFDE F0B7          	movff	postinc2,??_find_volume+3
 10797  0008EA  90D8               	bcf	status,0,c
 10798  0008EC  0100               	movlb	0	; () banked
 10799  0008EE  35B4               	rlcf	??_find_volume& (0+255),w,b
 10800  0008F0  0101               	movlb	1	; () banked
 10801  0008F2  6F95               	movwf	find_volume@szbfat& (0+255),b
 10802  0008F4  0100               	movlb	0	; () banked
 10803  0008F6  35B5               	rlcf	(??_find_volume+1)& (0+255),w,b
 10804  0008F8  0101               	movlb	1	; () banked
 10805  0008FA  6F96               	movwf	(find_volume@szbfat+1)& (0+255),b
 10806  0008FC  0100               	movlb	0	; () banked
 10807  0008FE  35B6               	rlcf	(??_find_volume+2)& (0+255),w,b
 10808  000900  0101               	movlb	1	; () banked
 10809  000902  6F97               	movwf	(find_volume@szbfat+2)& (0+255),b
 10810  000904  0100               	movlb	0	; () banked
 10811  000906  35B7               	rlcf	(??_find_volume+3)& (0+255),w,b
 10812  000908                     L8:
 10813  000908  0101               	movlb	1	; () banked
 10814  00090A  6F98               	movwf	(find_volume@szbfat+3)& (0+255),b
 10815  00090C                     l1402:
 10816                           
 10817                           ;ff.c: 2322: }
 10818                           ;ff.c: 2323: if (fs->fsize < (szbfat + (((UINT)512) - 1)) / ((UINT)512))
 10819                           
 10820                           ; BSR set to: 1
 10821  00090C  0EFF               	movlw	255
 10822  00090E  0101               	movlb	1	; () banked
 10823  000910  2595               	addwf	find_volume@szbfat& (0+255),w,b
 10824  000912  0100               	movlb	0	; () banked
 10825  000914  6FB4               	movwf	??_find_volume& (0+255),b
 10826  000916  0E01               	movlw	1
 10827  000918  0101               	movlb	1	; () banked
 10828  00091A  2196               	addwfc	(find_volume@szbfat+1)& (0+255),w,b
 10829  00091C  0100               	movlb	0	; () banked
 10830  00091E  6FB5               	movwf	(??_find_volume+1)& (0+255),b
 10831  000920  0E00               	movlw	0
 10832  000922  0101               	movlb	1	; () banked
 10833  000924  2197               	addwfc	(find_volume@szbfat+2)& (0+255),w,b
 10834  000926  0100               	movlb	0	; () banked
 10835  000928  6FB6               	movwf	(??_find_volume+2)& (0+255),b
 10836  00092A  0E00               	movlw	0
 10837  00092C  0101               	movlb	1	; () banked
 10838  00092E  2198               	addwfc	(find_volume@szbfat+3)& (0+255),w,b
 10839  000930  0100               	movlb	0	; () banked
 10840  000932  6FB7               	movwf	(??_find_volume+3)& (0+255),b
 10841  000934  0E0A               	movlw	10
 10842  000936  D005               	goto	u16970
 10843  000938                     u16975:
 10844  000938  90D8               	bcf	status,0,c
 10845  00093A  33B7               	rrcf	(??_find_volume+3)& (0+255),f,b
 10846  00093C  33B6               	rrcf	(??_find_volume+2)& (0+255),f,b
 10847  00093E  33B5               	rrcf	(??_find_volume+1)& (0+255),f,b
 10848  000940  33B4               	rrcf	??_find_volume& (0+255),f,b
 10849  000942                     u16970:
 10850  000942  2EE8               	decfsz	wreg,f,c
 10851  000944  D7F9               	goto	u16975
 10852  000946  0101               	movlb	1	; () banked
 10853  000948  EE20 F016          	lfsr	2,22
 10854  00094C  51B7               	movf	find_volume@fs& (0+255),w,b
 10855  00094E  26D9               	addwf	fsr2l,f,c
 10856  000950  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10857  000952  22DA               	addwfc	fsr2h,f,c
 10858  000954  0100               	movlb	0	; () banked
 10859  000956  51B4               	movf	??_find_volume& (0+255),w,b
 10860  000958  5CDE               	subwf	postinc2,w,c
 10861  00095A  51B5               	movf	(??_find_volume+1)& (0+255),w,b
 10862  00095C  58DE               	subwfb	postinc2,w,c
 10863  00095E  51B6               	movf	(??_find_volume+2)& (0+255),w,b
 10864  000960  58DE               	subwfb	postinc2,w,c
 10865  000962  51B7               	movf	(??_find_volume+3)& (0+255),w,b
 10866  000964  58DE               	subwfb	postinc2,w,c
 10867  000966  B0D8               	btfsc	status,0,c
 10868  000968  D002               	goto	l1403
 10869                           
 10870                           ; BSR set to: 0
 10871                           ;ff.c: 2324: return FR_NO_FILESYSTEM;
 10872  00096A  0E0D               	movlw	13
 10873                           
 10874                           ; BSR set to: 0
 10875  00096C  0012               	return	
 10876  00096E                     l1403:
 10877                           
 10878                           ; BSR set to: 0
 10879                           ;ff.c: 2328: fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 10880                           
 10881                           ; BSR set to: 0
 10882  00096E  0101               	movlb	1	; () banked
 10883  000970  EE20 F00E          	lfsr	2,14
 10884  000974  51B7               	movf	find_volume@fs& (0+255),w,b
 10885  000976  26D9               	addwf	fsr2l,f,c
 10886  000978  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10887  00097A  22DA               	addwfc	fsr2h,f,c
 10888  00097C  0EFF               	movlw	255
 10889  00097E  6EDE               	movwf	postinc2,c
 10890  000980  0EFF               	movlw	255
 10891  000982  6EDE               	movwf	postinc2,c
 10892  000984  0EFF               	movlw	255
 10893  000986  6EDE               	movwf	postinc2,c
 10894  000988  0EFF               	movlw	255
 10895  00098A  6EDD               	movwf	postdec2,c
 10896  00098C  52DD               	movf	postdec2,f,c
 10897  00098E  52DD               	movf	postdec2,f,c
 10898  000990  EE10 F00A          	lfsr	1,10
 10899  000994  51B7               	movf	find_volume@fs& (0+255),w,b
 10900  000996  26E1               	addwf	fsr1l,f,c
 10901  000998  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10902  00099A  22E2               	addwfc	fsr1h,f,c
 10903  00099C  CFDE FFE6          	movff	postinc2,postinc1
 10904  0009A0  CFDE FFE6          	movff	postinc2,postinc1
 10905  0009A4  CFDE FFE6          	movff	postinc2,postinc1
 10906  0009A8  CFDE FFE6          	movff	postinc2,postinc1
 10907                           
 10908                           ; BSR set to: 1
 10909                           ;ff.c: 2331: fs->fsi_flag = 0x80;
 10910  0009AC  EE20 F005          	lfsr	2,5
 10911  0009B0  51B7               	movf	find_volume@fs& (0+255),w,b
 10912  0009B2  26D9               	addwf	fsr2l,f,c
 10913  0009B4  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10914  0009B6  22DA               	addwfc	fsr2h,f,c
 10915  0009B8  0E80               	movlw	128
 10916  0009BA  6EDF               	movwf	indf2,c
 10917                           
 10918                           ; BSR set to: 1
 10919                           ;ff.c: 2333: if (fmt == 3
 10920                           ;ff.c: 2334: && (WORD)(*(WORD*)(BYTE*)(fs->win + 48)) == 1
 10921                           ;ff.c: 2335: && move_window(fs, bsect + 1) == FR_OK)
 10922  0009BC  0E03               	movlw	3
 10923  0009BE  19B6               	xorwf	find_volume@fmt& (0+255),w,b
 10924  0009C0  A4D8               	btfss	status,2,c
 10925  0009C2  D08A               	goto	l1405
 10926                           
 10927                           ; BSR set to: 1
 10928  0009C4  EE20 F05E          	lfsr	2,94
 10929  0009C8  51B7               	movf	find_volume@fs& (0+255),w,b
 10930  0009CA  26D9               	addwf	fsr2l,f,c
 10931  0009CC  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10932  0009CE  22DA               	addwfc	fsr2h,f,c
 10933  0009D0  04DE               	decf	postinc2,w,c
 10934  0009D2  10DE               	iorwf	postinc2,w,c
 10935  0009D4  A4D8               	btfss	status,2,c
 10936  0009D6  D080               	goto	l1405
 10937                           
 10938                           ; BSR set to: 1
 10939  0009D8  C1B7  F09A         	movff	find_volume@fs,move_window@fs
 10940  0009DC  C1B8  F09B         	movff	find_volume@fs+1,move_window@fs+1
 10941  0009E0  0E01               	movlw	1
 10942  0009E2  25B0               	addwf	find_volume@bsect& (0+255),w,b
 10943  0009E4  0100               	movlb	0	; () banked
 10944  0009E6  6F9C               	movwf	move_window@sector& (0+255),b
 10945  0009E8  0E00               	movlw	0
 10946  0009EA  0101               	movlb	1	; () banked
 10947  0009EC  21B1               	addwfc	(find_volume@bsect+1)& (0+255),w,b
 10948  0009EE  0100               	movlb	0	; () banked
 10949  0009F0  6F9D               	movwf	(move_window@sector+1)& (0+255),b
 10950  0009F2  0E00               	movlw	0
 10951  0009F4  0101               	movlb	1	; () banked
 10952  0009F6  21B2               	addwfc	(find_volume@bsect+2)& (0+255),w,b
 10953  0009F8  0100               	movlb	0	; () banked
 10954  0009FA  6F9E               	movwf	(move_window@sector+2)& (0+255),b
 10955  0009FC  0E00               	movlw	0
 10956  0009FE  0101               	movlb	1	; () banked
 10957  000A00  21B3               	addwfc	(find_volume@bsect+3)& (0+255),w,b
 10958  000A02  0100               	movlb	0	; () banked
 10959  000A04  6F9F               	movwf	(move_window@sector+3)& (0+255),b
 10960  000A06  EC0A  F027         	call	_move_window	;wreg free
 10961  000A0A  0900               	iorlw	0
 10962  000A0C  A4D8               	btfss	status,2,c
 10963  000A0E  D064               	goto	l1405
 10964                           
 10965                           ;ff.c: 2336: {
 10966                           ;ff.c: 2337: fs->fsi_flag = 0;
 10967  000A10  0101               	movlb	1	; () banked
 10968  000A12  EE20 F005          	lfsr	2,5
 10969  000A16  51B7               	movf	find_volume@fs& (0+255),w,b
 10970  000A18  26D9               	addwf	fsr2l,f,c
 10971  000A1A  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10972  000A1C  22DA               	addwfc	fsr2h,f,c
 10973  000A1E  0E00               	movlw	0
 10974  000A20  6EDF               	movwf	indf2,c
 10975                           
 10976                           ;ff.c: 2338: if ((WORD)(*(WORD*)(BYTE*)(fs->win + 510)) == 0xAA55
 10977                           ;ff.c: 2339: && (DWORD)(*(DWORD*)(BYTE*)(fs->win + 0)) == 0x41615252
 10978                           ;ff.c: 2340: && (DWORD)(*(DWORD*)(BYTE*)(fs->win + 484)) == 0x61417272)
 10979  000A22  EE22 F02C          	lfsr	2,556
 10980  000A26  51B7               	movf	find_volume@fs& (0+255),w,b
 10981  000A28  26D9               	addwf	fsr2l,f,c
 10982  000A2A  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10983  000A2C  22DA               	addwfc	fsr2h,f,c
 10984  000A2E  0E55               	movlw	85
 10985  000A30  18DE               	xorwf	postinc2,w,c
 10986  000A32  E152               	bnz	l12381
 10987  000A34  0EAA               	movlw	170
 10988  000A36  18DE               	xorwf	postinc2,w,c
 10989  000A38  A4D8               	btfss	status,2,c
 10990  000A3A  D04E               	goto	l1405
 10991                           
 10992                           ; BSR set to: 1
 10993  000A3C  EE20 F02E          	lfsr	2,46
 10994  000A40  51B7               	movf	find_volume@fs& (0+255),w,b
 10995  000A42  26D9               	addwf	fsr2l,f,c
 10996  000A44  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 10997  000A46  22DA               	addwfc	fsr2h,f,c
 10998  000A48  0E52               	movlw	82
 10999  000A4A  18DE               	xorwf	postinc2,w,c
 11000  000A4C  E145               	bnz	l12381
 11001  000A4E  0E52               	movlw	82
 11002  000A50  18DE               	xorwf	postinc2,w,c
 11003  000A52  E142               	bnz	l12381
 11004  000A54  0E61               	movlw	97
 11005  000A56  18DE               	xorwf	postinc2,w,c
 11006  000A58  E13F               	bnz	l12381
 11007  000A5A  0E41               	movlw	65
 11008  000A5C  18DE               	xorwf	postinc2,w,c
 11009  000A5E  A4D8               	btfss	status,2,c
 11010  000A60  D03B               	goto	l1405
 11011                           
 11012                           ; BSR set to: 1
 11013  000A62  EE22 F012          	lfsr	2,530
 11014  000A66  51B7               	movf	find_volume@fs& (0+255),w,b
 11015  000A68  26D9               	addwf	fsr2l,f,c
 11016  000A6A  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 11017  000A6C  22DA               	addwfc	fsr2h,f,c
 11018  000A6E  0E72               	movlw	114
 11019  000A70  18DE               	xorwf	postinc2,w,c
 11020  000A72  E132               	bnz	l12381
 11021  000A74  0E72               	movlw	114
 11022  000A76  18DE               	xorwf	postinc2,w,c
 11023  000A78  E12F               	bnz	l12381
 11024  000A7A  0E41               	movlw	65
 11025  000A7C  18DE               	xorwf	postinc2,w,c
 11026  000A7E  E12C               	bnz	l12381
 11027  000A80  0E61               	movlw	97
 11028  000A82  18DE               	xorwf	postinc2,w,c
 11029  000A84  A4D8               	btfss	status,2,c
 11030  000A86  D028               	goto	l1405
 11031                           
 11032                           ; BSR set to: 1
 11033                           ;ff.c: 2341: {
 11034                           ;ff.c: 2343: fs->free_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 488));
 11035  000A88  EE22 F016          	lfsr	2,534
 11036  000A8C  51B7               	movf	find_volume@fs& (0+255),w,b
 11037  000A8E  26D9               	addwf	fsr2l,f,c
 11038  000A90  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 11039  000A92  22DA               	addwfc	fsr2h,f,c
 11040  000A94  EE10 F00E          	lfsr	1,14
 11041  000A98  51B7               	movf	find_volume@fs& (0+255),w,b
 11042  000A9A  26E1               	addwf	fsr1l,f,c
 11043  000A9C  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 11044  000A9E  22E2               	addwfc	fsr1h,f,c
 11045  000AA0  CFDE FFE6          	movff	postinc2,postinc1
 11046  000AA4  CFDE FFE6          	movff	postinc2,postinc1
 11047  000AA8  CFDE FFE6          	movff	postinc2,postinc1
 11048  000AAC  CFDE FFE6          	movff	postinc2,postinc1
 11049                           
 11050                           ;ff.c: 2346: fs->last_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 492));
 11051  000AB0  EE22 F01A          	lfsr	2,538
 11052  000AB4  51B7               	movf	find_volume@fs& (0+255),w,b
 11053  000AB6  26D9               	addwf	fsr2l,f,c
 11054  000AB8  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 11055  000ABA  22DA               	addwfc	fsr2h,f,c
 11056  000ABC  EE10 F00A          	lfsr	1,10
 11057  000AC0  51B7               	movf	find_volume@fs& (0+255),w,b
 11058  000AC2  26E1               	addwf	fsr1l,f,c
 11059  000AC4  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 11060  000AC6  22E2               	addwfc	fsr1h,f,c
 11061  000AC8  CFDE FFE6          	movff	postinc2,postinc1
 11062  000ACC  CFDE FFE6          	movff	postinc2,postinc1
 11063  000AD0  CFDE FFE6          	movff	postinc2,postinc1
 11064  000AD4  CFDE FFE6          	movff	postinc2,postinc1
 11065  000AD8                     l1405:
 11066  000AD8                     l12381:
 11067                           
 11068                           ;ff.c: 2348: }
 11069                           ;ff.c: 2349: }
 11070                           ;ff.c: 2352: fs->fs_type = fmt;
 11071  000AD8  C1B7  FFD9         	movff	find_volume@fs,fsr2l
 11072  000ADC  C1B8  FFDA         	movff	find_volume@fs+1,fsr2h
 11073  000AE0  C1B6  FFDF         	movff	find_volume@fmt,indf2
 11074                           
 11075                           ;ff.c: 2353: fs->id = ++Fsid;
 11076  000AE4  0100               	movlb	0	; () banked
 11077  000AE6  4BF6               	infsnz	_Fsid& (0+255),f,b
 11078  000AE8  2BF7               	incf	(_Fsid+1)& (0+255),f,b
 11079  000AEA  0101               	movlb	1	; () banked
 11080  000AEC  EE20 F006          	lfsr	2,6
 11081  000AF0  51B7               	movf	find_volume@fs& (0+255),w,b
 11082  000AF2  26D9               	addwf	fsr2l,f,c
 11083  000AF4  51B8               	movf	(find_volume@fs+1)& (0+255),w,b
 11084  000AF6  22DA               	addwfc	fsr2h,f,c
 11085  000AF8  C0F6  FFDE         	movff	_Fsid,postinc2
 11086  000AFC  C0F7  FFDD         	movff	_Fsid+1,postdec2
 11087                           
 11088                           ; BSR set to: 1
 11089                           ;ff.c: 2361: return FR_OK;
 11090  000B00  0E00               	movlw	0
 11091  000B02  0012               	return	
 11092  000B04                     __end_of_find_volume:
 11093                           	opt stack 0
 11094                           tosu	equ	0xFFF
 11095                           tosh	equ	0xFFE
 11096                           tosl	equ	0xFFD
 11097                           pclath	equ	0xFFA
 11098                           tblptru	equ	0xFF8
 11099                           tblptrh	equ	0xFF7
 11100                           tblptrl	equ	0xFF6
 11101                           tablat	equ	0xFF5
 11102                           prodh	equ	0xFF4
 11103                           prodl	equ	0xFF3
 11104                           intcon	equ	0xFF2
 11105                           intcon2	equ	0xFF1
 11106                           intcon3	equ	0xFF0
 11107                           indf0	equ	0xFEF
 11108                           postinc0	equ	0xFEE
 11109                           fsr0h	equ	0xFEA
 11110                           fsr0l	equ	0xFE9
 11111                           wreg	equ	0xFE8
 11112                           indf1	equ	0xFE7
 11113                           postinc1	equ	0xFE6
 11114                           postdec1	equ	0xFE5
 11115                           fsr1h	equ	0xFE2
 11116                           fsr1l	equ	0xFE1
 11117                           indf2	equ	0xFDF
 11118                           postinc2	equ	0xFDE
 11119                           postdec2	equ	0xFDD
 11120                           plusw2	equ	0xFDB
 11121                           fsr2h	equ	0xFDA
 11122                           fsr2l	equ	0xFD9
 11123                           status	equ	0xFD8
 11124                           
 11125 ;; *************** function _get_ldnumber *****************
 11126 ;; Defined at:
 11127 ;;		line 2114 in file "bibliotecas/ff.c"
 11128 ;; Parameters:    Size  Location     Type
 11129 ;;  path            2   25[COMRAM] PTR PTR const unsigned c
 11130 ;;		 -> f_open@path(2), f_mount@path(2), f_mount@rp(2), 
 11131 ;; Auto vars:     Size  Location     Type
 11132 ;;  tt              2   37[COMRAM] PTR const unsigned char 
 11133 ;;		 -> STR_11(10), STR_9(1), 
 11134 ;;  i               2   35[COMRAM] unsigned int 
 11135 ;;  vol             2   33[COMRAM] int 
 11136 ;;  tp              2   31[COMRAM] PTR const unsigned char 
 11137 ;;		 -> STR_11(10), STR_9(1), 
 11138 ;; Return value:  Size  Location     Type
 11139 ;;                  2   25[COMRAM] int 
 11140 ;; Registers used:
 11141 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 11142 ;; Tracked objects:
 11143 ;;		On entry : 0/0
 11144 ;;		On exit  : 0/0
 11145 ;;		Unchanged: 0/0
 11146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11147 ;;      Params:         2       0       0       0       0       0       0       0       0
 11148 ;;      Locals:        10       0       0       0       0       0       0       0       0
 11149 ;;      Temps:          2       0       0       0       0       0       0       0       0
 11150 ;;      Totals:        14       0       0       0       0       0       0       0       0
 11151 ;;Total ram usage:       14 bytes
 11152 ;; Hardware stack levels used:    1
 11153 ;; Hardware stack levels required when called:    2
 11154 ;; This function calls:
 11155 ;;		Nothing
 11156 ;; This function is called by:
 11157 ;;		_find_volume
 11158 ;;		_f_mount
 11159 ;; This function uses a non-reentrant model
 11160 ;;
 11161                           
 11162                           	psect	text31
 11163  0045E4                     __ptext31:
 11164                           	opt stack 0
 11165  0045E4                     _get_ldnumber:
 11166                           	opt stack 24
 11167                           
 11168                           ;ff.c: 2118: const TCHAR *tp, *tt;
 11169                           ;ff.c: 2119: UINT i;
 11170                           ;ff.c: 2120: int vol = -1;
 11171                           
 11172                           ;incstack = 0
 11173  0045E4  6822               	setf	get_ldnumber@vol,c
 11174  0045E6  6823               	setf	get_ldnumber@vol+1,c
 11175                           
 11176                           ;ff.c: 2129: if (*path) {
 11177  0045E8  C01A  FFD9         	movff	get_ldnumber@path,fsr2l
 11178  0045EC  C01B  FFDA         	movff	get_ldnumber@path+1,fsr2h
 11179  0045F0  50DE               	movf	postinc2,w,c
 11180  0045F2  10DE               	iorwf	postinc2,w,c
 11181  0045F4  B4D8               	btfsc	status,2,c
 11182  0045F6  D072               	goto	l1331
 11183                           
 11184                           ;ff.c: 2130: for (tt = *path; (UINT)*tt >= (0 ? ' ' : '!') && *tt != ':'; tt++) ;
 11185  0045F8  C01A  FFD9         	movff	get_ldnumber@path,fsr2l
 11186  0045FC  C01B  FFDA         	movff	get_ldnumber@path+1,fsr2h
 11187  004600  CFDE F026          	movff	postinc2,get_ldnumber@tt
 11188  004604  CFDD F027          	movff	postdec2,get_ldnumber@tt+1
 11189  004608  D002               	goto	l1332
 11190  00460A  4A26               	infsnz	get_ldnumber@tt,f,c
 11191  00460C  2A27               	incf	get_ldnumber@tt+1,f,c
 11192  00460E                     l1332:
 11193  00460E  0E00               	movlw	0
 11194  004610  6E1F               	movwf	_get_ldnumber$2767+1,c
 11195  004612  0E21               	movlw	33
 11196  004614  6E1E               	movwf	_get_ldnumber$2767,c
 11197  004616  C026  FFF6         	movff	get_ldnumber@tt,tblptrl
 11198  00461A  C027  FFF7         	movff	get_ldnumber@tt+1,tblptrh
 11199  00461E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11200  00461E  6AF8               	clrf	tblptru,c
 11201  004620                     	endif
 11202  004620                     	if	0	;tblptru may be non-zero
 11203  004620                     	endif
 11204  004620  0008               	tblrd		*
 11205  004622  50F5               	movf	tablat,w,c
 11206  004624  6E1C               	movwf	??_get_ldnumber& (0+255),c
 11207  004626  6A1D               	clrf	(??_get_ldnumber+1)& (0+255),c
 11208  004628  501E               	movf	_get_ldnumber$2767,w,c
 11209  00462A  5C1C               	subwf	??_get_ldnumber,w,c
 11210  00462C  501F               	movf	_get_ldnumber$2767+1,w,c
 11211  00462E  581D               	subwfb	??_get_ldnumber+1,w,c
 11212  004630  A0D8               	btfss	status,0,c
 11213  004632  D00A               	goto	u16210
 11214  004634  C026  FFF6         	movff	get_ldnumber@tt,tblptrl
 11215  004638  C027  FFF7         	movff	get_ldnumber@tt+1,tblptrh
 11216  00463C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11217  00463C  6AF8               	clrf	tblptru,c
 11218  00463E                     	endif
 11219  00463E                     	if	0	;tblptru may be non-zero
 11220  00463E                     	endif
 11221  00463E  0008               	tblrd		*
 11222  004640  50F5               	movf	tablat,w,c
 11223  004642  0A3A               	xorlw	58
 11224  004644  A4D8               	btfss	status,2,c
 11225  004646  D7E1               	goto	l1333
 11226  004648                     u16210:
 11227                           
 11228                           ;ff.c: 2131: if (*tt == ':') {
 11229  004648  C026  FFF6         	movff	get_ldnumber@tt,tblptrl
 11230  00464C  C027  FFF7         	movff	get_ldnumber@tt+1,tblptrh
 11231  004650                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11232  004650  6AF8               	clrf	tblptru,c
 11233  004652                     	endif
 11234  004652                     	if	0	;tblptru may be non-zero
 11235  004652                     	endif
 11236  004652  0008               	tblrd		*
 11237  004654  50F5               	movf	tablat,w,c
 11238  004656  0A3A               	xorlw	58
 11239  004658  A4D8               	btfss	status,2,c
 11240  00465A  D03C               	goto	l1341
 11241                           
 11242                           ;ff.c: 2132: tp = *path;
 11243  00465C  C01A  FFD9         	movff	get_ldnumber@path,fsr2l
 11244  004660  C01B  FFDA         	movff	get_ldnumber@path+1,fsr2h
 11245  004664  CFDE F020          	movff	postinc2,get_ldnumber@tp
 11246  004668  CFDD F021          	movff	postdec2,get_ldnumber@tp+1
 11247                           
 11248                           ;ff.c: 2133: i = *tp++ - '0';
 11249  00466C  C020  FFF6         	movff	get_ldnumber@tp,tblptrl
 11250  004670  C021  FFF7         	movff	get_ldnumber@tp+1,tblptrh
 11251  004674                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11252  004674  6AF8               	clrf	tblptru,c
 11253  004676                     	endif
 11254  004676                     	if	0	;tblptru may be non-zero
 11255  004676                     	endif
 11256  004676  0008               	tblrd		*
 11257  004678  CFF5 F01C          	movff	tablat,??_get_ldnumber
 11258  00467C  0ED0               	movlw	208
 11259  00467E  241C               	addwf	??_get_ldnumber,w,c
 11260  004680  6E24               	movwf	get_ldnumber@i,c
 11261  004682  6A25               	clrf	get_ldnumber@i+1,c
 11262  004684  0EFF               	movlw	255
 11263  004686  2225               	addwfc	get_ldnumber@i+1,f,c
 11264  004688  4A20               	infsnz	get_ldnumber@tp,f,c
 11265  00468A  2A21               	incf	get_ldnumber@tp+1,f,c
 11266                           
 11267                           ;ff.c: 2134: if (i < 10 && tp == tt) {
 11268  00468C  5025               	movf	get_ldnumber@i+1,w,c
 11269  00468E  E11D               	bnz	l11937
 11270  004690  0E0A               	movlw	10
 11271  004692  5C24               	subwf	get_ldnumber@i,w,c
 11272  004694  B0D8               	btfsc	status,0,c
 11273  004696  D019               	goto	l1343
 11274  004698  5026               	movf	get_ldnumber@tt,w,c
 11275  00469A  1820               	xorwf	get_ldnumber@tp,w,c
 11276  00469C  E116               	bnz	l11937
 11277  00469E  5027               	movf	get_ldnumber@tt+1,w,c
 11278  0046A0  1821               	xorwf	get_ldnumber@tp+1,w,c
 11279  0046A2  A4D8               	btfss	status,2,c
 11280  0046A4  D012               	goto	l1343
 11281                           
 11282                           ;ff.c: 2135: if (i < 1) {
 11283  0046A6  5024               	movf	get_ldnumber@i,w,c
 11284  0046A8  1025               	iorwf	get_ldnumber@i+1,w,c
 11285  0046AA  A4D8               	btfss	status,2,c
 11286  0046AC  D00E               	goto	l1343
 11287                           
 11288                           ;ff.c: 2136: vol = (int)i;
 11289  0046AE  C024  F022         	movff	get_ldnumber@i,get_ldnumber@vol
 11290  0046B2  C025  F023         	movff	get_ldnumber@i+1,get_ldnumber@vol+1
 11291                           
 11292                           ;ff.c: 2137: *path = ++tt;
 11293  0046B6  4A26               	infsnz	get_ldnumber@tt,f,c
 11294  0046B8  2A27               	incf	get_ldnumber@tt+1,f,c
 11295  0046BA  C01A  FFD9         	movff	get_ldnumber@path,fsr2l
 11296  0046BE  C01B  FFDA         	movff	get_ldnumber@path+1,fsr2h
 11297  0046C2  C026  FFDE         	movff	get_ldnumber@tt,postinc2
 11298  0046C6  C027  FFDD         	movff	get_ldnumber@tt+1,postdec2
 11299  0046CA                     l1343:
 11300  0046CA                     l11937:
 11301                           
 11302                           ;ff.c: 2138: }
 11303                           ;ff.c: 2139: }
 11304                           ;ff.c: 2156: return vol;
 11305  0046CA  C022  F01A         	movff	get_ldnumber@vol,?_get_ldnumber
 11306  0046CE  C023  F01B         	movff	get_ldnumber@vol+1,?_get_ldnumber+1
 11307  0046D2  0012               	return	
 11308  0046D4                     l1341:
 11309                           
 11310                           ;ff.c: 2157: }
 11311                           ;ff.c: 2161: vol = 0;
 11312  0046D4  0E00               	movlw	0
 11313  0046D6  6E23               	movwf	get_ldnumber@vol+1,c
 11314  0046D8  0E00               	movlw	0
 11315  0046DA  6E22               	movwf	get_ldnumber@vol,c
 11316  0046DC                     l1331:
 11317                           
 11318                           ;ff.c: 2163: }
 11319                           ;ff.c: 2164: return vol;
 11320  0046DC  C022  F01A         	movff	get_ldnumber@vol,?_get_ldnumber
 11321  0046E0  C023  F01B         	movff	get_ldnumber@vol+1,?_get_ldnumber+1
 11322  0046E4  0012               	return	
 11323  0046E6                     __end_of_get_ldnumber:
 11324                           	opt stack 0
 11325                           tosu	equ	0xFFF
 11326                           tosh	equ	0xFFE
 11327                           tosl	equ	0xFFD
 11328                           pclath	equ	0xFFA
 11329                           tblptru	equ	0xFF8
 11330                           tblptrh	equ	0xFF7
 11331                           tblptrl	equ	0xFF6
 11332                           tablat	equ	0xFF5
 11333                           prodh	equ	0xFF4
 11334                           prodl	equ	0xFF3
 11335                           intcon	equ	0xFF2
 11336                           intcon2	equ	0xFF1
 11337                           intcon3	equ	0xFF0
 11338                           indf0	equ	0xFEF
 11339                           postinc0	equ	0xFEE
 11340                           fsr0h	equ	0xFEA
 11341                           fsr0l	equ	0xFE9
 11342                           wreg	equ	0xFE8
 11343                           indf1	equ	0xFE7
 11344                           postinc1	equ	0xFE6
 11345                           postdec1	equ	0xFE5
 11346                           fsr1h	equ	0xFE2
 11347                           fsr1l	equ	0xFE1
 11348                           indf2	equ	0xFDF
 11349                           postinc2	equ	0xFDE
 11350                           postdec2	equ	0xFDD
 11351                           plusw2	equ	0xFDB
 11352                           fsr2h	equ	0xFDA
 11353                           fsr2l	equ	0xFD9
 11354                           status	equ	0xFD8
 11355                           
 11356 ;; *************** function _disk_initialize *****************
 11357 ;; Defined at:
 11358 ;;		line 321 in file "bibliotecas/diskio.c"
 11359 ;; Parameters:    Size  Location     Type
 11360 ;;  pdrv            1    wreg     unsigned char 
 11361 ;; Auto vars:     Size  Location     Type
 11362 ;;  pdrv            1   29[BANK0 ] unsigned char 
 11363 ;;  ocr             4   30[BANK0 ] unsigned char [4]
 11364 ;;  tmr             2   38[BANK0 ] unsigned int 
 11365 ;;  n               1   40[BANK0 ] unsigned char 
 11366 ;;  ty              1   37[BANK0 ] unsigned char 
 11367 ;;  cmd             1   36[BANK0 ] unsigned char 
 11368 ;; Return value:  Size  Location     Type
 11369 ;;                  1    wreg      unsigned char 
 11370 ;; Registers used:
 11371 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11372 ;; Tracked objects:
 11373 ;;		On entry : 0/0
 11374 ;;		On exit  : 0/0
 11375 ;;		Unchanged: 0/0
 11376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11377 ;;      Params:         0       0       0       0       0       0       0       0       0
 11378 ;;      Locals:         0      12       0       0       0       0       0       0       0
 11379 ;;      Temps:          0       2       0       0       0       0       0       0       0
 11380 ;;      Totals:         0      14       0       0       0       0       0       0       0
 11381 ;;Total ram usage:       14 bytes
 11382 ;; Hardware stack levels used:    1
 11383 ;; Hardware stack levels required when called:    8
 11384 ;; This function calls:
 11385 ;;		_deselect
 11386 ;;		_dummy_clocks
 11387 ;;		_escreve_frase_ram_lcd
 11388 ;;		_posicao_cursor_lcd
 11389 ;;		_recebe_dado_SPI
 11390 ;;		_select
 11391 ;;		_send_cmd
 11392 ;; This function is called by:
 11393 ;;		_find_volume
 11394 ;; This function uses a non-reentrant model
 11395 ;;
 11396                           
 11397                           	psect	text32
 11398  003682                     __ptext32:
 11399                           	opt stack 0
 11400  003682                     _disk_initialize:
 11401                           	opt stack 18
 11402                           
 11403                           ;incstack = 0
 11404                           ;disk_initialize@pdrv stored from wreg
 11405  003682  0100               	movlb	0	; () banked
 11406  003684  6F7D               	movwf	disk_initialize@pdrv& (0+255),b
 11407                           
 11408                           ;diskio.c: 325: BYTE n, cmd, ty, ocr[4];
 11409                           ;diskio.c: 326: UINT tmr;
 11410                           ;diskio.c: 329: if (pdrv) return 0x01;
 11411  003686  0100               	movlb	0	; () banked
 11412  003688  517D               	movf	disk_initialize@pdrv& (0+255),w,b
 11413  00368A  B4D8               	btfsc	status,2,c
 11414  00368C  D002               	goto	l923
 11415                           
 11416                           ; BSR set to: 0
 11417  00368E  0E01               	movlw	1
 11418                           
 11419                           ; BSR set to: 0
 11420  003690  0012               	return	
 11421  003692                     l923:
 11422                           
 11423                           ; BSR set to: 0
 11424                           ;diskio.c: 331: if (Stat & 0x02) return Stat;
 11425  003692  A3FF               	btfss	_Stat& (0+255),1,b
 11426  003694  D002               	goto	l925
 11427                           
 11428                           ; BSR set to: 0
 11429  003696  51FF               	movf	_Stat& (0+255),w,b
 11430                           
 11431                           ; BSR set to: 0
 11432  003698  0012               	return	
 11433  00369A                     l925:
 11434                           
 11435                           ; BSR set to: 0
 11436                           ;diskio.c: 334: _delay((unsigned long)((1000)*(48000000/4000.0)));
 11437                           
 11438                           ; BSR set to: 0
 11439  00369A  0E3D               	movlw	61
 11440  00369C  0100               	movlb	0	; () banked
 11441  00369E  6F7C               	movwf	(??_disk_initialize+1)& (0+255),b
 11442  0036A0  0EE1               	movlw	225
 11443  0036A2  6F7B               	movwf	??_disk_initialize& (0+255),b
 11444  0036A4  0E3F               	movlw	63
 11445  0036A6                     u19427:
 11446  0036A6  2EE8               	decfsz	wreg,f,c
 11447  0036A8  D7FE               	bra	u19427
 11448  0036AA  2F7B               	decfsz	??_disk_initialize& (0+255),f,b
 11449  0036AC  D7FC               	bra	u19427
 11450  0036AE  2F7C               	decfsz	(??_disk_initialize+1)& (0+255),f,b
 11451  0036B0  D7FA               	bra	u19427
 11452  0036B2  D000               	nop2	
 11453                           
 11454                           ;diskio.c: 336: select();
 11455  0036B4  EC89  F02D         	call	_select	;wreg free
 11456                           
 11457                           ;diskio.c: 337: dummy_clocks(10);
 11458  0036B8  0E0A               	movlw	10
 11459  0036BA  EC8F  F02C         	call	_dummy_clocks
 11460                           
 11461                           ;diskio.c: 340: ty = 0;
 11462  0036BE  0E00               	movlw	0
 11463  0036C0  0100               	movlb	0	; () banked
 11464  0036C2  6F85               	movwf	disk_initialize@ty& (0+255),b
 11465                           
 11466                           ; BSR set to: 0
 11467                           ;diskio.c: 341: if (send_cmd((0), 0) == 1) {
 11468  0036C4  0E00               	movlw	0
 11469  0036C6  6F75               	movwf	send_cmd@arg& (0+255),b
 11470  0036C8  0E00               	movlw	0
 11471  0036CA  6F76               	movwf	(send_cmd@arg+1)& (0+255),b
 11472  0036CC  0E00               	movlw	0
 11473  0036CE  6F77               	movwf	(send_cmd@arg+2)& (0+255),b
 11474  0036D0  0E00               	movlw	0
 11475  0036D2  6F78               	movwf	(send_cmd@arg+3)& (0+255),b
 11476  0036D4  0E00               	movlw	0
 11477  0036D6  ECC8  F02B         	call	_send_cmd
 11478  0036DA  06E8               	decf	wreg,f,c
 11479  0036DC  A4D8               	btfss	status,2,c
 11480  0036DE  D0EF               	goto	l949
 11481                           
 11482                           ;diskio.c: 342: posicao_cursor_lcd(1,0);
 11483  0036E0  0E00               	movlw	0
 11484  0036E2  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 11485  0036E4  0E01               	movlw	1
 11486  0036E6  EC89  F02A         	call	_posicao_cursor_lcd
 11487                           
 11488                           ;diskio.c: 343: escreve_frase_ram_lcd("reset");
 11489  0036EA  0E5D               	movlw	low STR_18
 11490  0036EC  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 11491  0036EE  0E62               	movlw	high STR_18
 11492  0036F0  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 11493  0036F2  EC78  F02B         	call	_escreve_frase_ram_lcd	;wreg free
 11494                           
 11495                           ;diskio.c: 344: dummy_clocks(10);
 11496  0036F6  0E0A               	movlw	10
 11497  0036F8  EC8F  F02C         	call	_dummy_clocks
 11498                           
 11499                           ;diskio.c: 345: if (send_cmd((8), 0x1AA) == 1) {
 11500  0036FC  0EAA               	movlw	170
 11501  0036FE  0100               	movlb	0	; () banked
 11502  003700  6F75               	movwf	send_cmd@arg& (0+255),b
 11503  003702  0E01               	movlw	1
 11504  003704  6F76               	movwf	(send_cmd@arg+1)& (0+255),b
 11505  003706  0E00               	movlw	0
 11506  003708  6F77               	movwf	(send_cmd@arg+2)& (0+255),b
 11507  00370A  0E00               	movlw	0
 11508  00370C  6F78               	movwf	(send_cmd@arg+3)& (0+255),b
 11509  00370E  0E08               	movlw	8
 11510  003710  ECC8  F02B         	call	_send_cmd
 11511  003714  06E8               	decf	wreg,f,c
 11512  003716  A4D8               	btfss	status,2,c
 11513  003718  D07C               	goto	l927
 11514                           
 11515                           ;diskio.c: 346: for (n = 0; n < 4; n++){
 11516  00371A  0E00               	movlw	0
 11517  00371C  0100               	movlb	0	; () banked
 11518  00371E  6F88               	movwf	disk_initialize@n& (0+255),b
 11519  003720                     l11553:
 11520                           
 11521                           ; BSR set to: 0
 11522  003720  0E03               	movlw	3
 11523  003722  6588               	cpfsgt	disk_initialize@n& (0+255),b
 11524  003724  D001               	goto	l928
 11525  003726  D00E               	goto	u15510
 11526  003728                     l928:
 11527                           
 11528                           ; BSR set to: 0
 11529                           ;diskio.c: 347: ocr[n] = recebe_dado_SPI();
 11530                           
 11531                           ; BSR set to: 0
 11532  003728  5188               	movf	disk_initialize@n& (0+255),w,b
 11533  00372A  0D01               	mullw	1
 11534  00372C  0E7E               	movlw	low disk_initialize@ocr
 11535  00372E  24F3               	addwf	prodl,w,c
 11536  003730  6ED9               	movwf	fsr2l,c
 11537  003732  0E00               	movlw	high disk_initialize@ocr
 11538  003734  20F4               	addwfc	prodh,w,c
 11539  003736  6EDA               	movwf	fsr2h,c
 11540  003738  ECF6  F02A         	call	_recebe_dado_SPI	;wreg free
 11541  00373C  6EDF               	movwf	indf2,c
 11542  00373E  0100               	movlb	0	; () banked
 11543  003740  2B88               	incf	disk_initialize@n& (0+255),f,b
 11544  003742  D7EE               	goto	l11553
 11545  003744                     u15510:
 11546                           
 11547                           ; BSR set to: 0
 11548                           ;diskio.c: 348: }
 11549                           ;diskio.c: 349: if (ocr[2] == 0x01 && ocr[3] == 0xAA) {
 11550                           
 11551                           ; BSR set to: 0
 11552  003744  0580               	decf	(disk_initialize@ocr+2)& (0+255),w,b
 11553  003746  A4D8               	btfss	status,2,c
 11554  003748  D0BA               	goto	l949
 11555                           
 11556                           ; BSR set to: 0
 11557  00374A  0EAA               	movlw	170
 11558  00374C  1981               	xorwf	(disk_initialize@ocr+3)& (0+255),w,b
 11559  00374E  A4D8               	btfss	status,2,c
 11560  003750  D0B6               	goto	l949
 11561                           
 11562                           ; BSR set to: 0
 11563                           ;diskio.c: 350: for (tmr = 1000; tmr; tmr--) {
 11564  003752  0E03               	movlw	3
 11565  003754  6F87               	movwf	(disk_initialize@tmr+1)& (0+255),b
 11566  003756  0EE8               	movlw	232
 11567  003758  6F86               	movwf	disk_initialize@tmr& (0+255),b
 11568  00375A  D01F               	goto	l931
 11569  00375C                     
 11570                           ; BSR set to: 0
 11571                           ;diskio.c: 351: dummy_clocks(10);
 11572                           
 11573                           ; BSR set to: 0
 11574  00375C  0E0A               	movlw	10
 11575  00375E  EC8F  F02C         	call	_dummy_clocks
 11576                           
 11577                           ;diskio.c: 352: if (send_cmd((0x80+41), 1UL << 30) == 0) break;
 11578  003762  0E00               	movlw	0
 11579  003764  0100               	movlb	0	; () banked
 11580  003766  6F75               	movwf	send_cmd@arg& (0+255),b
 11581  003768  0E00               	movlw	0
 11582  00376A  6F76               	movwf	(send_cmd@arg+1)& (0+255),b
 11583  00376C  0E00               	movlw	0
 11584  00376E  6F77               	movwf	(send_cmd@arg+2)& (0+255),b
 11585  003770  0E40               	movlw	64
 11586  003772  6F78               	movwf	(send_cmd@arg+3)& (0+255),b
 11587  003774  0EA9               	movlw	169
 11588  003776  ECC8  F02B         	call	_send_cmd
 11589  00377A  0900               	iorlw	0
 11590  00377C  B4D8               	btfsc	status,2,c
 11591  00377E  D011               	goto	u15550
 11592                           
 11593                           ;diskio.c: 353: _delay((unsigned long)((1)*(48000000/4000.0)));
 11594  003780  0E10               	movlw	16
 11595  003782  0100               	movlb	0	; () banked
 11596  003784  6F7B               	movwf	??_disk_initialize& (0+255),b
 11597  003786  0E94               	movlw	148
 11598  003788                     u19437:
 11599  003788  2EE8               	decfsz	wreg,f,c
 11600  00378A  D7FE               	bra	u19437
 11601  00378C  2F7B               	decfsz	??_disk_initialize& (0+255),f,b
 11602  00378E  D7FC               	bra	u19437
 11603  003790  F000               	nop	
 11604  003792  0100               	movlb	0	; () banked
 11605  003794  0786               	decf	disk_initialize@tmr& (0+255),f,b
 11606  003796  A0D8               	btfss	status,0,c
 11607  003798  0787               	decf	(disk_initialize@tmr+1)& (0+255),f,b
 11608  00379A                     l931:
 11609                           
 11610                           ; BSR set to: 0
 11611  00379A  5186               	movf	disk_initialize@tmr& (0+255),w,b
 11612  00379C  1187               	iorwf	(disk_initialize@tmr+1)& (0+255),w,b
 11613  00379E  A4D8               	btfss	status,2,c
 11614  0037A0  D7DD               	goto	l932
 11615  0037A2                     u15550:
 11616                           
 11617                           ;diskio.c: 354: }
 11618                           ;diskio.c: 355: dummy_clocks(10);
 11619                           
 11620                           ; BSR set to: 0
 11621  0037A2  0E0A               	movlw	10
 11622  0037A4  EC8F  F02C         	call	_dummy_clocks
 11623                           
 11624                           ;diskio.c: 356: if (tmr && send_cmd((58), 0) == 0) {
 11625  0037A8  0100               	movlb	0	; () banked
 11626  0037AA  5186               	movf	disk_initialize@tmr& (0+255),w,b
 11627  0037AC  1187               	iorwf	(disk_initialize@tmr+1)& (0+255),w,b
 11628  0037AE  B4D8               	btfsc	status,2,c
 11629  0037B0  D086               	goto	l949
 11630                           
 11631                           ; BSR set to: 0
 11632  0037B2  0E00               	movlw	0
 11633  0037B4  6F75               	movwf	send_cmd@arg& (0+255),b
 11634  0037B6  0E00               	movlw	0
 11635  0037B8  6F76               	movwf	(send_cmd@arg+1)& (0+255),b
 11636  0037BA  0E00               	movlw	0
 11637  0037BC  6F77               	movwf	(send_cmd@arg+2)& (0+255),b
 11638  0037BE  0E00               	movlw	0
 11639  0037C0  6F78               	movwf	(send_cmd@arg+3)& (0+255),b
 11640  0037C2  0E3A               	movlw	58
 11641  0037C4  ECC8  F02B         	call	_send_cmd
 11642  0037C8  0900               	iorlw	0
 11643  0037CA  A4D8               	btfss	status,2,c
 11644  0037CC  D078               	goto	l949
 11645                           
 11646                           ;diskio.c: 357: for (n = 0; n < 4; n++) ocr[n] = recebe_dado_SPI();
 11647  0037CE  0E00               	movlw	0
 11648  0037D0  0100               	movlb	0	; () banked
 11649  0037D2  6F88               	movwf	disk_initialize@n& (0+255),b
 11650  0037D4                     l11587:
 11651                           
 11652                           ; BSR set to: 0
 11653  0037D4  0E03               	movlw	3
 11654  0037D6  6588               	cpfsgt	disk_initialize@n& (0+255),b
 11655  0037D8  D001               	goto	l936
 11656  0037DA  D00E               	goto	u15590
 11657  0037DC                     l936:
 11658                           
 11659                           ; BSR set to: 0
 11660                           
 11661                           ; BSR set to: 0
 11662  0037DC  5188               	movf	disk_initialize@n& (0+255),w,b
 11663  0037DE  0D01               	mullw	1
 11664  0037E0  0E7E               	movlw	low disk_initialize@ocr
 11665  0037E2  24F3               	addwf	prodl,w,c
 11666  0037E4  6ED9               	movwf	fsr2l,c
 11667  0037E6  0E00               	movlw	high disk_initialize@ocr
 11668  0037E8  20F4               	addwfc	prodh,w,c
 11669  0037EA  6EDA               	movwf	fsr2h,c
 11670  0037EC  ECF6  F02A         	call	_recebe_dado_SPI	;wreg free
 11671  0037F0  6EDF               	movwf	indf2,c
 11672  0037F2  0100               	movlb	0	; () banked
 11673  0037F4  2B88               	incf	disk_initialize@n& (0+255),f,b
 11674  0037F6  D7EE               	goto	l11587
 11675  0037F8                     u15590:
 11676                           
 11677                           ; BSR set to: 0
 11678                           ;diskio.c: 358: ty = (ocr[0] & 0x40) ? 0x04 | 0x08 : 0x04;
 11679  0037F8  BD7E               	btfsc	disk_initialize@ocr& (0+255),6,b
 11680  0037FA  D004               	goto	l939
 11681                           
 11682                           ; BSR set to: 0
 11683  0037FC  0E00               	movlw	0
 11684  0037FE  6F83               	movwf	(_disk_initialize$2252+1)& (0+255),b
 11685  003800  0E04               	movlw	4
 11686  003802  D003               	goto	L11
 11687  003804                     l939:
 11688                           
 11689                           ; BSR set to: 0
 11690                           
 11691                           ; BSR set to: 0
 11692  003804  0E00               	movlw	0
 11693  003806  6F83               	movwf	(_disk_initialize$2252+1)& (0+255),b
 11694  003808  0E0C               	movlw	12
 11695  00380A                     L11:
 11696  00380A  6F82               	movwf	_disk_initialize$2252& (0+255),b
 11697                           
 11698                           ; BSR set to: 0
 11699                           
 11700                           ; BSR set to: 0
 11701  00380C  C082  F085         	movff	_disk_initialize$2252,disk_initialize@ty
 11702                           
 11703                           ; BSR set to: 0
 11704                           ;diskio.c: 359: }
 11705                           ;diskio.c: 360: }
 11706                           ;diskio.c: 361: } else {
 11707                           
 11708                           ; BSR set to: 0
 11709  003810  D056               	goto	l949
 11710  003812                     l927:
 11711                           
 11712                           ;diskio.c: 362: dummy_clocks(10);
 11713                           
 11714                           ; BSR set to: 0
 11715  003812  0E0A               	movlw	10
 11716  003814  EC8F  F02C         	call	_dummy_clocks
 11717                           
 11718                           ;diskio.c: 363: if (send_cmd((0x80+41), 0) <= 1) {
 11719  003818  0E00               	movlw	0
 11720  00381A  0100               	movlb	0	; () banked
 11721  00381C  6F75               	movwf	send_cmd@arg& (0+255),b
 11722  00381E  0E00               	movlw	0
 11723  003820  6F76               	movwf	(send_cmd@arg+1)& (0+255),b
 11724  003822  0E00               	movlw	0
 11725  003824  6F77               	movwf	(send_cmd@arg+2)& (0+255),b
 11726  003826  0E00               	movlw	0
 11727  003828  6F78               	movwf	(send_cmd@arg+3)& (0+255),b
 11728  00382A  0EA9               	movlw	169
 11729  00382C  ECC8  F02B         	call	_send_cmd
 11730  003830  0100               	movlb	0	; () banked
 11731  003832  6F7B               	movwf	??_disk_initialize& (0+255),b
 11732  003834  0E02               	movlw	2
 11733  003836  617B               	cpfslt	??_disk_initialize& (0+255),b
 11734  003838  D004               	goto	l943
 11735                           
 11736                           ; BSR set to: 0
 11737                           ;diskio.c: 364: ty = 0x02; cmd = (0x80+41);
 11738  00383A  0E02               	movlw	2
 11739  00383C  6F85               	movwf	disk_initialize@ty& (0+255),b
 11740  00383E  0EA9               	movlw	169
 11741  003840  D003               	goto	L10
 11742  003842                     l943:
 11743                           
 11744                           ; BSR set to: 0
 11745                           ;diskio.c: 366: ty = 0x01; cmd = (1);
 11746                           
 11747                           ; BSR set to: 0
 11748  003842  0E01               	movlw	1
 11749  003844  6F85               	movwf	disk_initialize@ty& (0+255),b
 11750  003846  0E01               	movlw	1
 11751  003848                     L10:
 11752  003848  6F84               	movwf	disk_initialize@cmd& (0+255),b
 11753                           
 11754                           ; BSR set to: 0
 11755                           ;diskio.c: 367: }
 11756                           ;diskio.c: 368: for (tmr = 1000; tmr; tmr--) {
 11757  00384A  0E03               	movlw	3
 11758  00384C  6F87               	movwf	(disk_initialize@tmr+1)& (0+255),b
 11759  00384E  0EE8               	movlw	232
 11760  003850  6F86               	movwf	disk_initialize@tmr& (0+255),b
 11761  003852  D01B               	goto	l945
 11762  003854                     
 11763                           ; BSR set to: 0
 11764                           ;diskio.c: 369: if (send_cmd(cmd, 0) == 0) break;
 11765                           
 11766                           ; BSR set to: 0
 11767  003854  0E00               	movlw	0
 11768  003856  6F75               	movwf	send_cmd@arg& (0+255),b
 11769  003858  0E00               	movlw	0
 11770  00385A  6F76               	movwf	(send_cmd@arg+1)& (0+255),b
 11771  00385C  0E00               	movlw	0
 11772  00385E  6F77               	movwf	(send_cmd@arg+2)& (0+255),b
 11773  003860  0E00               	movlw	0
 11774  003862  6F78               	movwf	(send_cmd@arg+3)& (0+255),b
 11775  003864  5184               	movf	disk_initialize@cmd& (0+255),w,b
 11776  003866  ECC8  F02B         	call	_send_cmd
 11777  00386A  0900               	iorlw	0
 11778  00386C  B4D8               	btfsc	status,2,c
 11779  00386E  D011               	goto	u15630
 11780                           
 11781                           ;diskio.c: 370: _delay((unsigned long)((1)*(48000000/4000.0)));
 11782  003870  0E10               	movlw	16
 11783  003872  0100               	movlb	0	; () banked
 11784  003874  6F7B               	movwf	??_disk_initialize& (0+255),b
 11785  003876  0E94               	movlw	148
 11786  003878                     u19447:
 11787  003878  2EE8               	decfsz	wreg,f,c
 11788  00387A  D7FE               	bra	u19447
 11789  00387C  2F7B               	decfsz	??_disk_initialize& (0+255),f,b
 11790  00387E  D7FC               	bra	u19447
 11791  003880  F000               	nop	
 11792  003882  0100               	movlb	0	; () banked
 11793  003884  0786               	decf	disk_initialize@tmr& (0+255),f,b
 11794  003886  A0D8               	btfss	status,0,c
 11795  003888  0787               	decf	(disk_initialize@tmr+1)& (0+255),f,b
 11796  00388A                     l945:
 11797                           
 11798                           ; BSR set to: 0
 11799  00388A  5186               	movf	disk_initialize@tmr& (0+255),w,b
 11800  00388C  1187               	iorwf	(disk_initialize@tmr+1)& (0+255),w,b
 11801  00388E  A4D8               	btfss	status,2,c
 11802  003890  D7E1               	goto	l946
 11803  003892                     u15630:
 11804                           
 11805                           ;diskio.c: 371: }
 11806                           ;diskio.c: 372: if (!tmr || send_cmd((16), 512) != 0)
 11807                           
 11808                           ; BSR set to: 0
 11809  003892  0100               	movlb	0	; () banked
 11810  003894  5186               	movf	disk_initialize@tmr& (0+255),w,b
 11811  003896  1187               	iorwf	(disk_initialize@tmr+1)& (0+255),w,b
 11812  003898  B4D8               	btfsc	status,2,c
 11813  00389A  D00E               	goto	u15650
 11814                           
 11815                           ; BSR set to: 0
 11816  00389C  0E00               	movlw	0
 11817  00389E  6F75               	movwf	send_cmd@arg& (0+255),b
 11818  0038A0  0E02               	movlw	2
 11819  0038A2  6F76               	movwf	(send_cmd@arg+1)& (0+255),b
 11820  0038A4  0E00               	movlw	0
 11821  0038A6  6F77               	movwf	(send_cmd@arg+2)& (0+255),b
 11822  0038A8  0E00               	movlw	0
 11823  0038AA  6F78               	movwf	(send_cmd@arg+3)& (0+255),b
 11824  0038AC  0E10               	movlw	16
 11825  0038AE  ECC8  F02B         	call	_send_cmd
 11826  0038B2  0900               	iorlw	0
 11827  0038B4  B4D8               	btfsc	status,2,c
 11828  0038B6  D003               	goto	l949
 11829  0038B8                     u15650:
 11830                           
 11831                           ;diskio.c: 373: ty = 0;
 11832  0038B8  0E00               	movlw	0
 11833  0038BA  0100               	movlb	0	; () banked
 11834  0038BC  6F85               	movwf	disk_initialize@ty& (0+255),b
 11835  0038BE                     l949:
 11836                           
 11837                           ;diskio.c: 374: }
 11838                           ;diskio.c: 375: }
 11839                           ;diskio.c: 376: CardType = ty;
 11840                           
 11841                           ; BSR set to: 0
 11842                           
 11843                           ; BSR set to: 0
 11844                           
 11845                           ; BSR set to: 0
 11846  0038BE  C085  F0FE         	movff	disk_initialize@ty,_CardType
 11847                           
 11848                           ;diskio.c: 377: deselect();
 11849  0038C2  ECE9  F02D         	call	_deselect	;wreg free
 11850                           
 11851                           ;diskio.c: 379: if (ty) {
 11852  0038C6  0100               	movlb	0	; () banked
 11853  0038C8  5185               	movf	disk_initialize@ty& (0+255),w,b
 11854  0038CA  A4D8               	btfss	status,2,c
 11855                           
 11856                           ; BSR set to: 0
 11857                           ;diskio.c: 380: Stat &= ~0x01;
 11858  0038CC  91FF               	bcf	_Stat& (0+255),0,b
 11859                           
 11860                           ; BSR set to: 0
 11861                           ;diskio.c: 382: }
 11862                           ;diskio.c: 384: return Stat;
 11863                           
 11864                           ; BSR set to: 0
 11865  0038CE  51FF               	movf	_Stat& (0+255),w,b
 11866  0038D0  0012               	return	
 11867  0038D2                     __end_of_disk_initialize:
 11868                           	opt stack 0
 11869                           tosu	equ	0xFFF
 11870                           tosh	equ	0xFFE
 11871                           tosl	equ	0xFFD
 11872                           pclath	equ	0xFFA
 11873                           tblptru	equ	0xFF8
 11874                           tblptrh	equ	0xFF7
 11875                           tblptrl	equ	0xFF6
 11876                           tablat	equ	0xFF5
 11877                           prodh	equ	0xFF4
 11878                           prodl	equ	0xFF3
 11879                           intcon	equ	0xFF2
 11880                           intcon2	equ	0xFF1
 11881                           intcon3	equ	0xFF0
 11882                           indf0	equ	0xFEF
 11883                           postinc0	equ	0xFEE
 11884                           fsr0h	equ	0xFEA
 11885                           fsr0l	equ	0xFE9
 11886                           wreg	equ	0xFE8
 11887                           indf1	equ	0xFE7
 11888                           postinc1	equ	0xFE6
 11889                           postdec1	equ	0xFE5
 11890                           fsr1h	equ	0xFE2
 11891                           fsr1l	equ	0xFE1
 11892                           indf2	equ	0xFDF
 11893                           postinc2	equ	0xFDE
 11894                           postdec2	equ	0xFDD
 11895                           plusw2	equ	0xFDB
 11896                           fsr2h	equ	0xFDA
 11897                           fsr2l	equ	0xFD9
 11898                           status	equ	0xFD8
 11899                           
 11900 ;; *************** function _check_fs *****************
 11901 ;; Defined at:
 11902 ;;		line 2175 in file "bibliotecas/ff.c"
 11903 ;; Parameters:    Size  Location     Type
 11904 ;;  fs              2   69[BANK0 ] PTR struct .
 11905 ;;		 -> NULL(0), fs(558), 
 11906 ;;  sect            4   71[BANK0 ] unsigned long 
 11907 ;; Auto vars:     Size  Location     Type
 11908 ;;		None
 11909 ;; Return value:  Size  Location     Type
 11910 ;;                  1    wreg      unsigned char 
 11911 ;; Registers used:
 11912 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11913 ;; Tracked objects:
 11914 ;;		On entry : 0/0
 11915 ;;		On exit  : 0/0
 11916 ;;		Unchanged: 0/0
 11917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11918 ;;      Params:         0       6       0       0       0       0       0       0       0
 11919 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11920 ;;      Temps:          0       4       0       0       0       0       0       0       0
 11921 ;;      Totals:         0      10       0       0       0       0       0       0       0
 11922 ;;Total ram usage:       10 bytes
 11923 ;; Hardware stack levels used:    1
 11924 ;; Hardware stack levels required when called:   11
 11925 ;; This function calls:
 11926 ;;		_move_window
 11927 ;; This function is called by:
 11928 ;;		_find_volume
 11929 ;; This function uses a non-reentrant model
 11930 ;;
 11931                           
 11932                           	psect	text33
 11933  0047DE                     __ptext33:
 11934                           	opt stack 0
 11935  0047DE                     _check_fs:
 11936                           	opt stack 15
 11937                           
 11938                           ;ff.c: 2180: fs->wflag = 0; fs->winsect = 0xFFFFFFFF;
 11939                           
 11940                           ; BSR set to: 0
 11941                           ;incstack = 0
 11942  0047DE  0100               	movlb	0	; () banked
 11943  0047E0  EE20 F004          	lfsr	2,4
 11944  0047E4  51A5               	movf	check_fs@fs& (0+255),w,b
 11945  0047E6  26D9               	addwf	fsr2l,f,c
 11946  0047E8  51A6               	movf	(check_fs@fs+1)& (0+255),w,b
 11947  0047EA  22DA               	addwfc	fsr2h,f,c
 11948  0047EC  0E00               	movlw	0
 11949  0047EE  6EDF               	movwf	indf2,c
 11950  0047F0  EE20 F02A          	lfsr	2,42
 11951  0047F4  51A5               	movf	check_fs@fs& (0+255),w,b
 11952  0047F6  26D9               	addwf	fsr2l,f,c
 11953  0047F8  51A6               	movf	(check_fs@fs+1)& (0+255),w,b
 11954  0047FA  22DA               	addwfc	fsr2h,f,c
 11955  0047FC  0EFF               	movlw	255
 11956  0047FE  6EDE               	movwf	postinc2,c
 11957  004800  0EFF               	movlw	255
 11958  004802  6EDE               	movwf	postinc2,c
 11959  004804  0EFF               	movlw	255
 11960  004806  6EDE               	movwf	postinc2,c
 11961  004808  0EFF               	movlw	255
 11962  00480A  6EDD               	movwf	postdec2,c
 11963                           
 11964                           ; BSR set to: 0
 11965                           ;ff.c: 2181: if (move_window(fs, sect) != FR_OK)
 11966  00480C  C0A5  F09A         	movff	check_fs@fs,move_window@fs
 11967  004810  C0A6  F09B         	movff	check_fs@fs+1,move_window@fs+1
 11968  004814  C0A7  F09C         	movff	check_fs@sect,move_window@sector
 11969  004818  C0A8  F09D         	movff	check_fs@sect+1,move_window@sector+1
 11970  00481C  C0A9  F09E         	movff	check_fs@sect+2,move_window@sector+2
 11971  004820  C0AA  F09F         	movff	check_fs@sect+3,move_window@sector+3
 11972  004824  EC0A  F027         	call	_move_window	;wreg free
 11973  004828  0900               	iorlw	0
 11974  00482A  B4D8               	btfsc	status,2,c
 11975  00482C  D002               	goto	l1347
 11976                           
 11977                           ;ff.c: 2182: return 3;
 11978  00482E  0E03               	movlw	3
 11979  004830  0012               	return	
 11980  004832                     l1347:
 11981                           
 11982                           ;ff.c: 2184: if ((WORD)(*(WORD*)(BYTE*)(&fs->win[510])) != 0xAA55)
 11983  004832  0100               	movlb	0	; () banked
 11984  004834  EE22 F02C          	lfsr	2,556
 11985  004838  51A5               	movf	check_fs@fs& (0+255),w,b
 11986  00483A  26D9               	addwf	fsr2l,f,c
 11987  00483C  51A6               	movf	(check_fs@fs+1)& (0+255),w,b
 11988  00483E  22DA               	addwfc	fsr2h,f,c
 11989  004840  0E55               	movlw	85
 11990  004842  18DE               	xorwf	postinc2,w,c
 11991  004844  E104               	bnz	u16270
 11992  004846  0EAA               	movlw	170
 11993  004848  18DE               	xorwf	postinc2,w,c
 11994  00484A  B4D8               	btfsc	status,2,c
 11995  00484C  D002               	goto	l1349
 11996  00484E                     u16270:
 11997                           
 11998                           ; BSR set to: 0
 11999                           ;ff.c: 2185: return 2;
 12000  00484E  0E02               	movlw	2
 12001                           
 12002                           ; BSR set to: 0
 12003  004850  0012               	return	
 12004  004852                     l1349:
 12005                           
 12006                           ; BSR set to: 0
 12007                           ;ff.c: 2187: if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[54])) & 0xFFFFFF) == 0x544146)
 12008                           
 12009                           ; BSR set to: 0
 12010  004852  EE20 F064          	lfsr	2,100
 12011  004856  51A5               	movf	check_fs@fs& (0+255),w,b
 12012  004858  26D9               	addwf	fsr2l,f,c
 12013  00485A  51A6               	movf	(check_fs@fs+1)& (0+255),w,b
 12014  00485C  22DA               	addwfc	fsr2h,f,c
 12015  00485E  0EFF               	movlw	255
 12016  004860  14DE               	andwf	postinc2,w,c
 12017  004862  6FAB               	movwf	??_check_fs& (0+255),b
 12018  004864  0EFF               	movlw	255
 12019  004866  14DE               	andwf	postinc2,w,c
 12020  004868  6FAC               	movwf	(??_check_fs+1)& (0+255),b
 12021  00486A  0EFF               	movlw	255
 12022  00486C  14DE               	andwf	postinc2,w,c
 12023  00486E  6FAD               	movwf	(??_check_fs+2)& (0+255),b
 12024  004870  0E00               	movlw	0
 12025  004872  14DE               	andwf	postinc2,w,c
 12026  004874  6FAE               	movwf	(??_check_fs+3)& (0+255),b
 12027  004876  0E46               	movlw	70
 12028  004878  19AB               	xorwf	??_check_fs& (0+255),w,b
 12029  00487A  E10A               	bnz	l11967
 12030  00487C  0E41               	movlw	65
 12031  00487E  19AC               	xorwf	(??_check_fs+1)& (0+255),w,b
 12032  004880  E107               	bnz	l11967
 12033  004882  0E54               	movlw	84
 12034  004884  19AD               	xorwf	(??_check_fs+2)& (0+255),w,b
 12035  004886  11AE               	iorwf	(??_check_fs+3)& (0+255),w,b
 12036  004888  A4D8               	btfss	status,2,c
 12037  00488A  D002               	goto	l1350
 12038                           
 12039                           ; BSR set to: 0
 12040                           ;ff.c: 2188: return 0;
 12041  00488C  0E00               	movlw	0
 12042                           
 12043                           ; BSR set to: 0
 12044  00488E  0012               	return	
 12045  004890                     l1350:
 12046  004890                     l11967:
 12047                           
 12048                           ; BSR set to: 0
 12049                           ;ff.c: 2189: if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[82])) & 0xFFFFFF) == 0x544146)
 12050  004890  EE20 F080          	lfsr	2,128
 12051  004894  51A5               	movf	check_fs@fs& (0+255),w,b
 12052  004896  26D9               	addwf	fsr2l,f,c
 12053  004898  51A6               	movf	(check_fs@fs+1)& (0+255),w,b
 12054  00489A  22DA               	addwfc	fsr2h,f,c
 12055  00489C  0EFF               	movlw	255
 12056  00489E  14DE               	andwf	postinc2,w,c
 12057  0048A0  6FAB               	movwf	??_check_fs& (0+255),b
 12058  0048A2  0EFF               	movlw	255
 12059  0048A4  14DE               	andwf	postinc2,w,c
 12060  0048A6  6FAC               	movwf	(??_check_fs+1)& (0+255),b
 12061  0048A8  0EFF               	movlw	255
 12062  0048AA  14DE               	andwf	postinc2,w,c
 12063  0048AC  6FAD               	movwf	(??_check_fs+2)& (0+255),b
 12064  0048AE  0E00               	movlw	0
 12065  0048B0  14DE               	andwf	postinc2,w,c
 12066  0048B2  6FAE               	movwf	(??_check_fs+3)& (0+255),b
 12067  0048B4  0E46               	movlw	70
 12068  0048B6  19AB               	xorwf	??_check_fs& (0+255),w,b
 12069  0048B8  E10A               	bnz	l11973
 12070  0048BA  0E41               	movlw	65
 12071  0048BC  19AC               	xorwf	(??_check_fs+1)& (0+255),w,b
 12072  0048BE  E107               	bnz	l11973
 12073  0048C0  0E54               	movlw	84
 12074  0048C2  19AD               	xorwf	(??_check_fs+2)& (0+255),w,b
 12075  0048C4  11AE               	iorwf	(??_check_fs+3)& (0+255),w,b
 12076  0048C6  A4D8               	btfss	status,2,c
 12077  0048C8  D002               	goto	l1351
 12078                           
 12079                           ; BSR set to: 0
 12080                           ;ff.c: 2190: return 0;
 12081  0048CA  0E00               	movlw	0
 12082                           
 12083                           ; BSR set to: 0
 12084  0048CC  0012               	return	
 12085  0048CE                     l1351:
 12086  0048CE                     l11973:
 12087                           
 12088                           ; BSR set to: 0
 12089                           ;ff.c: 2192: return 1;
 12090  0048CE  0E01               	movlw	1
 12091  0048D0  0012               	return	
 12092  0048D2                     __end_of_check_fs:
 12093                           	opt stack 0
 12094                           tosu	equ	0xFFF
 12095                           tosh	equ	0xFFE
 12096                           tosl	equ	0xFFD
 12097                           pclath	equ	0xFFA
 12098                           tblptru	equ	0xFF8
 12099                           tblptrh	equ	0xFF7
 12100                           tblptrl	equ	0xFF6
 12101                           tablat	equ	0xFF5
 12102                           prodh	equ	0xFF4
 12103                           prodl	equ	0xFF3
 12104                           intcon	equ	0xFF2
 12105                           intcon2	equ	0xFF1
 12106                           intcon3	equ	0xFF0
 12107                           indf0	equ	0xFEF
 12108                           postinc0	equ	0xFEE
 12109                           fsr0h	equ	0xFEA
 12110                           fsr0l	equ	0xFE9
 12111                           wreg	equ	0xFE8
 12112                           indf1	equ	0xFE7
 12113                           postinc1	equ	0xFE6
 12114                           postdec1	equ	0xFE5
 12115                           fsr1h	equ	0xFE2
 12116                           fsr1l	equ	0xFE1
 12117                           indf2	equ	0xFDF
 12118                           postinc2	equ	0xFDE
 12119                           postdec2	equ	0xFDD
 12120                           plusw2	equ	0xFDB
 12121                           fsr2h	equ	0xFDA
 12122                           fsr2l	equ	0xFD9
 12123                           status	equ	0xFD8
 12124                           
 12125 ;; *************** function _f_lseek *****************
 12126 ;; Defined at:
 12127 ;;		line 3033 in file "bibliotecas/ff.c"
 12128 ;; Parameters:    Size  Location     Type
 12129 ;;  fp              2  119[BANK0 ] PTR struct .
 12130 ;;		 -> SDCard@fil(32), 
 12131 ;;  ofs             4  121[BANK0 ] unsigned long 
 12132 ;; Auto vars:     Size  Location     Type
 12133 ;;  clst            4   13[BANK1 ] unsigned long 
 12134 ;;  bcs             4    9[BANK1 ] unsigned long 
 12135 ;;  nsect           4    5[BANK1 ] unsigned long 
 12136 ;;  ifptr           4    0[BANK1 ] unsigned long 
 12137 ;;  res             1    4[BANK1 ] enum E75
 12138 ;; Return value:  Size  Location     Type
 12139 ;;                  1    wreg      enum E3916
 12140 ;; Registers used:
 12141 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12142 ;; Tracked objects:
 12143 ;;		On entry : 0/0
 12144 ;;		On exit  : 0/0
 12145 ;;		Unchanged: 0/0
 12146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12147 ;;      Params:         0       6       0       0       0       0       0       0       0
 12148 ;;      Locals:         0       0      17       0       0       0       0       0       0
 12149 ;;      Temps:          0      12       0       0       0       0       0       0       0
 12150 ;;      Totals:         0      18      17       0       0       0       0       0       0
 12151 ;;Total ram usage:       35 bytes
 12152 ;; Hardware stack levels used:    1
 12153 ;; Hardware stack levels required when called:   13
 12154 ;; This function calls:
 12155 ;;		___lldiv
 12156 ;;		_clust2sect
 12157 ;;		_create_chain
 12158 ;;		_get_fat
 12159 ;;		_validate
 12160 ;; This function is called by:
 12161 ;;		_SDCard
 12162 ;; This function uses a non-reentrant model
 12163 ;;
 12164                           
 12165                           	psect	text34
 12166  0012F2                     __ptext34:
 12167                           	opt stack 0
 12168  0012F2                     _f_lseek:
 12169                           	opt stack 15
 12170                           
 12171                           ;ff.c: 3038: FRESULT res;
 12172                           ;ff.c: 3039: DWORD clst, bcs, nsect, ifptr;
 12173                           ;ff.c: 3045: res = validate(fp);
 12174                           
 12175                           ;incstack = 0
 12176  0012F2  C0D7  F01B         	movff	f_lseek@fp,validate@obj
 12177  0012F6  C0D8  F01C         	movff	f_lseek@fp+1,validate@obj+1
 12178  0012FA  EC02  F028         	call	_validate	;wreg free
 12179  0012FE  0101               	movlb	1	; () banked
 12180  001300  6F83               	movwf	f_lseek@res& (0+255),b
 12181                           
 12182                           ; BSR set to: 1
 12183                           ;ff.c: 3046: if (res != FR_OK) return res;
 12184  001302  5183               	movf	f_lseek@res& (0+255),w,b
 12185  001304  B4D8               	btfsc	status,2,c
 12186  001306  D002               	goto	l1514
 12187                           
 12188                           ; BSR set to: 1
 12189  001308  5183               	movf	f_lseek@res& (0+255),w,b
 12190                           
 12191                           ; BSR set to: 1
 12192  00130A  0012               	return	
 12193  00130C                     l1514:
 12194                           
 12195                           ; BSR set to: 1
 12196                           ;ff.c: 3047: if (fp->err)
 12197                           
 12198                           ; BSR set to: 1
 12199  00130C  0100               	movlb	0	; () banked
 12200  00130E  EE20 F005          	lfsr	2,5
 12201  001312  51D7               	movf	f_lseek@fp& (0+255),w,b
 12202  001314  26D9               	addwf	fsr2l,f,c
 12203  001316  51D8               	movf	(f_lseek@fp+1)& (0+255),w,b
 12204  001318  22DA               	addwfc	fsr2h,f,c
 12205  00131A  50DF               	movf	indf2,w,c
 12206  00131C  B4D8               	btfsc	status,2,c
 12207  00131E  D008               	goto	l1516
 12208                           
 12209                           ; BSR set to: 0
 12210                           ;ff.c: 3048: return (FRESULT)fp->err;
 12211  001320  EE20 F005          	lfsr	2,5
 12212  001324  51D7               	movf	f_lseek@fp& (0+255),w,b
 12213  001326  26D9               	addwf	fsr2l,f,c
 12214  001328  51D8               	movf	(f_lseek@fp+1)& (0+255),w,b
 12215  00132A  22DA               	addwfc	fsr2h,f,c
 12216  00132C  50DF               	movf	indf2,w,c
 12217                           
 12218                           ; BSR set to: 0
 12219  00132E  0012               	return	
 12220  001330                     l1516:
 12221                           
 12222                           ; BSR set to: 0
 12223                           ;ff.c: 3106: {
 12224                           ;ff.c: 3107: if (ofs > fp->fsize
 12225                           ;ff.c: 3109: && !(fp->flag & 0x02)
 12226                           ;ff.c: 3111: ) ofs = fp->fsize;
 12227                           
 12228                           ; BSR set to: 0
 12229  001330  EE20 F00A          	lfsr	2,10
 12230  001334  51D7               	movf	f_lseek@fp& (0+255),w,b
 12231  001336  26D9               	addwf	fsr2l,f,c
 12232  001338  51D8               	movf	(f_lseek@fp+1)& (0+255),w,b
 12233  00133A  22DA               	addwfc	fsr2h,f,c
 12234  00133C  51D9               	movf	f_lseek@ofs& (0+255),w,b
 12235  00133E  5CDE               	subwf	postinc2,w,c
 12236  001340  51DA               	movf	(f_lseek@ofs+1)& (0+255),w,b
 12237  001342  58DE               	subwfb	postinc2,w,c
 12238  001344  51DB               	movf	(f_lseek@ofs+2)& (0+255),w,b
 12239  001346  58DE               	subwfb	postinc2,w,c
 12240  001348  51DC               	movf	(f_lseek@ofs+3)& (0+255),w,b
 12241  00134A  58DE               	subwfb	postinc2,w,c
 12242  00134C  B0D8               	btfsc	status,0,c
 12243  00134E  D016               	goto	l1517
 12244                           
 12245                           ; BSR set to: 0
 12246  001350  EE20 F004          	lfsr	2,4
 12247  001354  51D7               	movf	f_lseek@fp& (0+255),w,b
 12248  001356  26D9               	addwf	fsr2l,f,c
 12249  001358  51D8               	movf	(f_lseek@fp+1)& (0+255),w,b
 12250  00135A  22DA               	addwfc	fsr2h,f,c
 12251  00135C  B2DF               	btfsc	indf2,1,c
 12252  00135E  D00E               	goto	l1517
 12253                           
 12254                           ; BSR set to: 0
 12255  001360  EE20 F00A          	lfsr	2,10
 12256  001364  51D7               	movf	f_lseek@fp& (0+255),w,b
 12257  001366  26D9               	addwf	fsr2l,f,c
 12258  001368  51D8               	movf	(f_lseek@fp+1)& (0+255),w,b
 12259  00136A  22DA               	addwfc	fsr2h,f,c
 12260  00136C  CFDE F0D9          	movff	postinc2,f_lseek@ofs
 12261  001370  CFDE F0DA          	movff	postinc2,f_lseek@ofs+1
 12262  001374  CFDE F0DB          	movff	postinc2,f_lseek@ofs+2
 12263  001378  CFDE F0DC          	movff	postinc2,f_lseek@ofs+3
 12264  00137C                     l1517:
 12265                           
 12266                           ; BSR set to: 0
 12267                           ;ff.c: 3113: ifptr = fp->fptr;
 12268  00137C  EE20 F006          	lfsr	2,6
 12269  001380  51D7               	movf	f_lseek@fp& (0+255),w,b
 12270  001382  26D9               	addwf	fsr2l,f,c
 12271  001384  51D8               	movf	(f_lseek@fp+1)& (0+255),w,b
 12272  001386  22DA               	addwfc	fsr2h,f,c
 12273  001388  CFDE F17F          	movff	postinc2,f_lseek@ifptr
 12274  00138C  CFDE F180          	movff	postinc2,f_lseek@ifptr+1
 12275  001390  CFDE F181          	movff	postinc2,f_lseek@ifptr+2
 12276  001394  CFDE F182          	movff	postinc2,f_lseek@ifptr+3
 12277                           
 12278                           ;ff.c: 3114: fp->fptr = nsect = 0;
 12279  001398  0E00               	movlw	0
 12280  00139A  0101               	movlb	1	; () banked
 12281  00139C  6F84               	movwf	f_lseek@nsect& (0+255),b
 12282  00139E  0E00               	movlw	0
 12283  0013A0  6F85               	movwf	(f_lseek@nsect+1)& (0+255),b
 12284  0013A2  0E00               	movlw	0
 12285  0013A4  6F86               	movwf	(f_lseek@nsect+2)& (0+255),b
 12286  0013A6  0E00               	movlw	0
 12287  0013A8  6F87               	movwf	(f_lseek@nsect+3)& (0+255),b
 12288  0013AA  0100               	movlb	0	; () banked
 12289  0013AC  EE20 F006          	lfsr	2,6
 12290  0013B0  51D7               	movf	f_lseek@fp& (0+255),w,b
 12291  0013B2  26D9               	addwf	fsr2l,f,c
 12292  0013B4  51D8               	movf	(f_lseek@fp+1)& (0+255),w,b
 12293  0013B6  22DA               	addwfc	fsr2h,f,c
 12294  0013B8  C184  FFDE         	movff	f_lseek@nsect,postinc2
 12295  0013BC  C185  FFDE         	movff	f_lseek@nsect+1,postinc2
 12296  0013C0  C186  FFDE         	movff	f_lseek@nsect+2,postinc2
 12297  0013C4  C187  FFDE         	movff	f_lseek@nsect+3,postinc2
 12298                           
 12299                           ; BSR set to: 0
 12300                           ;ff.c: 3115: if (ofs) {
 12301  0013C8  51D9               	movf	f_lseek@ofs& (0+255),w,b
 12302  0013CA  11DA               	iorwf	(f_lseek@ofs+1)& (0+255),w,b
 12303  0013CC  11DB               	iorwf	(f_lseek@ofs+2)& (0+255),w,b
 12304  0013CE  11DC               	iorwf	(f_lseek@ofs+3)& (0+255),w,b
 12305  0013D0  B4D8               	btfsc	status,2,c
 12306  0013D2  D281               	goto	l1535
 12307                           
 12308                           ; BSR set to: 0
 12309                           ;ff.c: 3116: bcs = (DWORD)fp->fs->csize * ((UINT)512);
 12310  0013D4  C0D7  FFD9         	movff	f_lseek@fp,fsr2l
 12311  0013D8  C0D8  FFDA         	movff	f_lseek@fp+1,fsr2h
 12312  0013DC  EE10 F002          	lfsr	1,2
 12313  0013E0  50DE               	movf	postinc2,w,c
 12314  0013E2  26E1               	addwf	fsr1l,f,c
 12315  0013E4  50DD               	movf	postdec2,w,c
 12316  0013E6  22E2               	addwfc	fsr1h,f,c
 12317  0013E8  50E7               	movf	indf1,w,c
 12318  0013EA  6FDD               	movwf	??_f_lseek& (0+255),b
 12319  0013EC  C0DD  F0DE         	movff	??_f_lseek,??_f_lseek+1
 12320  0013F0  6BDF               	clrf	(??_f_lseek+2)& (0+255),b
 12321  0013F2  6BE0               	clrf	(??_f_lseek+3)& (0+255),b
 12322  0013F4  6BE1               	clrf	(??_f_lseek+4)& (0+255),b
 12323  0013F6  0E09               	movlw	9
 12324  0013F8                     u17495:
 12325  0013F8  90D8               	bcf	status,0,c
 12326  0013FA  37DE               	rlcf	(??_f_lseek+1)& (0+255),f,b
 12327  0013FC  37DF               	rlcf	(??_f_lseek+2)& (0+255),f,b
 12328  0013FE  37E0               	rlcf	(??_f_lseek+3)& (0+255),f,b
 12329  001400  37E1               	rlcf	(??_f_lseek+4)& (0+255),f,b
 12330  001402  2EE8               	decfsz	wreg,f,c
 12331  001404  D7F9               	goto	u17495
 12332  001406  C0DE  F188         	movff	??_f_lseek+1,f_lseek@bcs
 12333  00140A  C0DF  F189         	movff	??_f_lseek+2,f_lseek@bcs+1
 12334  00140E  C0E0  F18A         	movff	??_f_lseek+3,f_lseek@bcs+2
 12335  001412  C0E1  F18B         	movff	??_f_lseek+4,f_lseek@bcs+3
 12336                           
 12337                           ; BSR set to: 0
 12338                           ;ff.c: 3117: if (ifptr > 0 &&
 12339                           ;ff.c: 3118: (ofs - 1) / bcs >= (ifptr - 1) / bcs) {
 12340  001416  0101               	movlb	1	; () banked
 12341  001418  517F               	movf	f_lseek@ifptr& (0+255),w,b
 12342  00141A  1180               	iorwf	(f_lseek@ifptr+1)& (0+255),w,b
 12343  00141C  1181               	iorwf	(f_lseek@ifptr+2)& (0+255),w,b
 12344  00141E  1182               	iorwf	(f_lseek@ifptr+3)& (0+255),w,b
 12345  001420  B4D8               	btfsc	status,2,c
 12346  001422  D0A4               	goto	l1519
 12347                           
 12348                           ; BSR set to: 1
 12349  001424  0EFF               	movlw	255
 12350  001426  0100               	movlb	0	; () banked
 12351  001428  25D9               	addwf	f_lseek@ofs& (0+255),w,b
 12352  00142A  6E1A               	movwf	___lldiv@dividend,c
 12353  00142C  0EFF               	movlw	255
 12354  00142E  21DA               	addwfc	(f_lseek@ofs+1)& (0+255),w,b
 12355  001430  6E1B               	movwf	___lldiv@dividend+1,c
 12356  001432  0EFF               	movlw	255
 12357  001434  21DB               	addwfc	(f_lseek@ofs+2)& (0+255),w,b
 12358  001436  6E1C               	movwf	___lldiv@dividend+2,c
 12359  001438  0EFF               	movlw	255
 12360  00143A  21DC               	addwfc	(f_lseek@ofs+3)& (0+255),w,b
 12361  00143C  6E1D               	movwf	___lldiv@dividend+3,c
 12362  00143E  C188  F01E         	movff	f_lseek@bcs,___lldiv@divisor
 12363  001442  C189  F01F         	movff	f_lseek@bcs+1,___lldiv@divisor+1
 12364  001446  C18A  F020         	movff	f_lseek@bcs+2,___lldiv@divisor+2
 12365  00144A  C18B  F021         	movff	f_lseek@bcs+3,___lldiv@divisor+3
 12366  00144E  EC17  F029         	call	___lldiv	;wreg free
 12367  001452  C01A  F0DD         	movff	?___lldiv,??_f_lseek
 12368  001456  C01B  F0DE         	movff	?___lldiv+1,??_f_lseek+1
 12369  00145A  C01C  F0DF         	movff	?___lldiv+2,??_f_lseek+2
 12370  00145E  C01D  F0E0         	movff	?___lldiv+3,??_f_lseek+3
 12371  001462  0EFF               	movlw	255
 12372  001464  0101               	movlb	1	; () banked
 12373  001466  257F               	addwf	f_lseek@ifptr& (0+255),w,b
 12374  001468  6E1A               	movwf	___lldiv@dividend,c
 12375  00146A  0EFF               	movlw	255
 12376  00146C  2180               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 12377  00146E  6E1B               	movwf	___lldiv@dividend+1,c
 12378  001470  0EFF               	movlw	255
 12379  001472  2181               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 12380  001474  6E1C               	movwf	___lldiv@dividend+2,c
 12381  001476  0EFF               	movlw	255
 12382  001478  2182               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 12383  00147A  6E1D               	movwf	___lldiv@dividend+3,c
 12384  00147C  C188  F01E         	movff	f_lseek@bcs,___lldiv@divisor
 12385  001480  C189  F01F         	movff	f_lseek@bcs+1,___lldiv@divisor+1
 12386  001484  C18A  F020         	movff	f_lseek@bcs+2,___lldiv@divisor+2
 12387  001488  C18B  F021         	movff	f_lseek@bcs+3,___lldiv@divisor+3
 12388  00148C  EC17  F029         	call	___lldiv	;wreg free
 12389  001490  501A               	movf	?___lldiv,w,c
 12390  001492  0100               	movlb	0	; () banked
 12391  001494  5DDD               	subwf	??_f_lseek& (0+255),w,b
 12392  001496  501B               	movf	?___lldiv+1,w,c
 12393  001498  59DE               	subwfb	(??_f_lseek+1)& (0+255),w,b
 12394  00149A  501C               	movf	?___lldiv+2,w,c
 12395  00149C  59DF               	subwfb	(??_f_lseek+2)& (0+255),w,b
 12396  00149E  501D               	movf	?___lldiv+3,w,c
 12397  0014A0  59E0               	subwfb	(??_f_lseek+3)& (0+255),w,b
 12398  0014A2  A0D8               	btfss	status,0,c
 12399  0014A4  D063               	goto	l1519
 12400                           
 12401                           ; BSR set to: 0
 12402                           ;ff.c: 3119: fp->fptr = (ifptr - 1) & ~(bcs - 1);
 12403  0014A6  0EFF               	movlw	255
 12404  0014A8  0101               	movlb	1	; () banked
 12405  0014AA  2588               	addwf	f_lseek@bcs& (0+255),w,b
 12406  0014AC  0100               	movlb	0	; () banked
 12407  0014AE  6FDD               	movwf	??_f_lseek& (0+255),b
 12408  0014B0  0EFF               	movlw	255
 12409  0014B2  0101               	movlb	1	; () banked
 12410  0014B4  2189               	addwfc	(f_lseek@bcs+1)& (0+255),w,b
 12411  0014B6  0100               	movlb	0	; () banked
 12412  0014B8  6FDE               	movwf	(??_f_lseek+1)& (0+255),b
 12413  0014BA  0EFF               	movlw	255
 12414  0014BC  0101               	movlb	1	; () banked
 12415  0014BE  218A               	addwfc	(f_lseek@bcs+2)& (0+255),w,b
 12416  0014C0  0100               	movlb	0	; () banked
 12417  0014C2  6FDF               	movwf	(??_f_lseek+2)& (0+255),b
 12418  0014C4  0EFF               	movlw	255
 12419  0014C6  0101               	movlb	1	; () banked
 12420  0014C8  218B               	addwfc	(f_lseek@bcs+3)& (0+255),w,b
 12421  0014CA  0100               	movlb	0	; () banked
 12422  0014CC  6FE0               	movwf	(??_f_lseek+3)& (0+255),b
 12423  0014CE  1FDD               	comf	??_f_lseek& (0+255),f,b
 12424  0014D0  1FDE               	comf	(??_f_lseek+1)& (0+255),f,b
 12425  0014D2  1FDF               	comf	(??_f_lseek+2)& (0+255),f,b
 12426  0014D4  1FE0               	comf	(??_f_lseek+3)& (0+255),f,b
 12427  0014D6  0EFF               	movlw	255
 12428  0014D8  0101               	movlb	1	; () banked
 12429  0014DA  257F               	addwf	f_lseek@ifptr& (0+255),w,b
 12430  0014DC  0100               	movlb	0	; () banked
 12431  0014DE  6FE1               	movwf	(??_f_lseek+4)& (0+255),b
 12432  0014E0  0EFF               	movlw	255
 12433  0014E2  0101               	movlb	1	; () banked
 12434  0014E4  2180               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 12435  0014E6  0100               	movlb	0	; () banked
 12436  0014E8  6FE2               	movwf	(??_f_lseek+5)& (0+255),b
 12437  0014EA  0EFF               	movlw	255
 12438  0014EC  0101               	movlb	1	; () banked
 12439  0014EE  2181               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 12440  0014F0  0100               	movlb	0	; () banked
 12441  0014F2  6FE3               	movwf	(??_f_lseek+6)& (0+255),b
 12442  0014F4  0EFF               	movlw	255
 12443  0014F6  0101               	movlb	1	; () banked
 12444  0014F8  2182               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 12445  0014FA  0100               	movlb	0	; () banked
 12446  0014FC  6FE4               	movwf	(??_f_lseek+7)& (0+255),b
 12447  0014FE  51DD               	movf	??_f_lseek& (0+255),w,b
 12448  001500  15E1               	andwf	(??_f_lseek+4)& (0+255),w,b
 12449  001502  6FE5               	movwf	(??_f_lseek+8)& (0+255),b
 12450  001504  51DE               	movf	(??_f_lseek+1)& (0+255),w,b
 12451  001506  15E2               	andwf	(??_f_lseek+5)& (0+255),w,b
 12452  001508  6FE6               	movwf	(??_f_lseek+9)& (0+255),b
 12453  00150A  51DF               	movf	(??_f_lseek+2)& (0+255),w,b
 12454  00150C  15E3               	andwf	(??_f_lseek+6)& (0+255),w,b
 12455  00150E  6FE7               	movwf	(??_f_lseek+10)& (0+255),b
 12456  001510  51E0               	movf	(??_f_lseek+3)& (0+255),w,b
 12457  001512  15E4               	andwf	(??_f_lseek+7)& (0+255),w,b
 12458  001514  6FE8               	movwf	(??_f_lseek+11)& (0+255),b
 12459  001516  EE20 F006          	lfsr	2,6
 12460  00151A  51D7               	movf	f_lseek@fp& (0+255),w,b
 12461  00151C  26D9               	addwf	fsr2l,f,c
 12462  00151E  51D8               	movf	(f_lseek@fp+1)& (0+255),w,b
 12463  001520  22DA               	addwfc	fsr2h,f,c
 12464  001522  C0E5  FFDE         	movff	??_f_lseek+8,postinc2
 12465  001526  C0E6  FFDE         	movff	??_f_lseek+9,postinc2
 12466  00152A  C0E7  FFDE         	movff	??_f_lseek+10,postinc2
 12467  00152E  C0E8  FFDE         	movff	??_f_lseek+11,postinc2
 12468                           
 12469                           ;ff.c: 3120: ofs -= fp->fptr;
 12470  001532  EE20 F006          	lfsr	2,6
 12471  001536  51D7               	movf	f_lseek@fp& (0+255),w,b
 12472  001538  26D9               	addwf	fsr2l,f,c
 12473  00153A  51D8               	movf	(f_lseek@fp+1)& (0+255),w,b
 12474  00153C  22DA               	addwfc	fsr2h,f,c
 12475  00153E  50DE               	movf	postinc2,w,c
 12476  001540  5FD9               	subwf	f_lseek@ofs& (0+255),f,b
 12477  001542  50DE               	movf	postinc2,w,c
 12478  001544  5BDA               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 12479  001546  50DE               	movf	postinc2,w,c
 12480  001548  5BDB               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 12481  00154A  50DD               	movf	postdec2,w,c
 12482  00154C  5BDC               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 12483                           
 12484                           ;ff.c: 3121: clst = fp->clust;
 12485  00154E  EE20 F012          	lfsr	2,18
 12486  001552  51D7               	movf	f_lseek@fp& (0+255),w,b
 12487  001554  26D9               	addwf	fsr2l,f,c
 12488  001556  51D8               	movf	(f_lseek@fp+1)& (0+255),w,b
 12489  001558  22DA               	addwfc	fsr2h,f,c
 12490  00155A  CFDE F18C          	movff	postinc2,f_lseek@clst
 12491  00155E  CFDE F18D          	movff	postinc2,f_lseek@clst+1
 12492  001562  CFDE F18E          	movff	postinc2,f_lseek@clst+2
 12493  001566  CFDE F18F          	movff	postinc2,f_lseek@clst+3
 12494                           
 12495                           ;ff.c: 3122: } else {
 12496  00156A  D076               	goto	l1520
 12497  00156C                     l1519:
 12498                           
 12499                           ;ff.c: 3123: clst = fp->sclust;
 12500                           
 12501                           ; BSR set to: 0
 12502  00156C  0100               	movlb	0	; () banked
 12503  00156E  EE20 F00E          	lfsr	2,14
 12504  001572  51D7               	movf	f_lseek@fp& (0+255),w,b
 12505  001574  26D9               	addwf	fsr2l,f,c
 12506  001576  51D8               	movf	(f_lseek@fp+1)& (0+255),w,b
 12507  001578  22DA               	addwfc	fsr2h,f,c
 12508  00157A  CFDE F18C          	movff	postinc2,f_lseek@clst
 12509  00157E  CFDE F18D          	movff	postinc2,f_lseek@clst+1
 12510  001582  CFDE F18E          	movff	postinc2,f_lseek@clst+2
 12511  001586  CFDE F18F          	movff	postinc2,f_lseek@clst+3
 12512                           
 12513                           ; BSR set to: 0
 12514                           ;ff.c: 3125: if (clst == 0) {
 12515  00158A  0101               	movlb	1	; () banked
 12516  00158C  518C               	movf	f_lseek@clst& (0+255),w,b
 12517  00158E  118D               	iorwf	(f_lseek@clst+1)& (0+255),w,b
 12518  001590  118E               	iorwf	(f_lseek@clst+2)& (0+255),w,b
 12519  001592  118F               	iorwf	(f_lseek@clst+3)& (0+255),w,b
 12520  001594  A4D8               	btfss	status,2,c
 12521  001596  D051               	goto	l1521
 12522                           
 12523                           ; BSR set to: 1
 12524                           ;ff.c: 3126: clst = create_chain(fp->fs, 0);
 12525  001598  C0D7  FFD9         	movff	f_lseek@fp,fsr2l
 12526  00159C  C0D8  FFDA         	movff	f_lseek@fp+1,fsr2h
 12527  0015A0  CFDE F0C0          	movff	postinc2,create_chain@fs
 12528  0015A4  CFDD F0C1          	movff	postdec2,create_chain@fs+1
 12529  0015A8  0E00               	movlw	0
 12530  0015AA  0100               	movlb	0	; () banked
 12531  0015AC  6FC2               	movwf	create_chain@clst& (0+255),b
 12532  0015AE  0E00               	movlw	0
 12533  0015B0  6FC3               	movwf	(create_chain@clst+1)& (0+255),b
 12534  0015B2  0E00               	movlw	0
 12535  0015B4  6FC4               	movwf	(create_chain@clst+2)& (0+255),b
 12536  0015B6  0E00               	movlw	0
 12537  0015B8  6FC5               	movwf	(create_chain@clst+3)& (0+255),b
 12538  0015BA  ECF2  F016         	call	_create_chain	;wreg free
 12539  0015BE  C0C0  F18C         	movff	?_create_chain,f_lseek@clst
 12540  0015C2  C0C1  F18D         	movff	?_create_chain+1,f_lseek@clst+1
 12541  0015C6  C0C2  F18E         	movff	?_create_chain+2,f_lseek@clst+2
 12542  0015CA  C0C3  F18F         	movff	?_create_chain+3,f_lseek@clst+3
 12543                           
 12544                           ;ff.c: 3127: if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
 12545  0015CE  0101               	movlb	1	; () banked
 12546  0015D0  058C               	decf	f_lseek@clst& (0+255),w,b
 12547  0015D2  118D               	iorwf	(f_lseek@clst+1)& (0+255),w,b
 12548  0015D4  118E               	iorwf	(f_lseek@clst+2)& (0+255),w,b
 12549  0015D6  118F               	iorwf	(f_lseek@clst+3)& (0+255),w,b
 12550  0015D8  A4D8               	btfss	status,2,c
 12551  0015DA  D00B               	goto	l1522
 12552                           
 12553                           ; BSR set to: 1
 12554  0015DC  0100               	movlb	0	; () banked
 12555  0015DE  EE20 F005          	lfsr	2,5
 12556  0015E2  51D7               	movf	f_lseek@fp& (0+255),w,b
 12557  0015E4  26D9               	addwf	fsr2l,f,c
 12558  0015E6  51D8               	movf	(f_lseek@fp+1)& (0+255),w,b
 12559  0015E8  22DA               	addwfc	fsr2h,f,c
 12560  0015EA  0E02               	movlw	2
 12561  0015EC  6EDF               	movwf	indf2,c
 12562                           
 12563                           ; BSR set to: 0
 12564  0015EE  0E02               	movlw	2
 12565                           
 12566                           ; BSR set to: 0
 12567  0015F0  0012               	return	
 12568  0015F2                     l1522:
 12569                           
 12570                           ;ff.c: 3128: if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR
      +                          ; };
 12571                           
 12572                           ; BSR set to: 0
 12573  0015F2  0101               	movlb	1	; () banked
 12574  0015F4  298C               	incf	f_lseek@clst& (0+255),w,b
 12575  0015F6  E112               	bnz	l12667
 12576  0015F8  298D               	incf	(f_lseek@clst+1)& (0+255),w,b
 12577  0015FA  E110               	bnz	l12667
 12578  0015FC  298E               	incf	(f_lseek@clst+2)& (0+255),w,b
 12579  0015FE  E10E               	bnz	l12667
 12580  001600  298F               	incf	(f_lseek@clst+3)& (0+255),w,b
 12581  001602  A4D8               	btfss	status,2,c
 12582  001604  D00B               	goto	l1523
 12583                           
 12584                           ; BSR set to: 1
 12585  001606  0100               	movlb	0	; () banked
 12586  001608  EE20 F005          	lfsr	2,5
 12587  00160C  51D7               	movf	f_lseek@fp& (0+255),w,b
 12588  00160E  26D9               	addwf	fsr2l,f,c
 12589  001610  51D8               	movf	(f_lseek@fp+1)& (0+255),w,b
 12590  001612  22DA               	addwfc	fsr2h,f,c
 12591  001614  0E01               	movlw	1
 12592  001616  6EDF               	movwf	indf2,c
 12593                           
 12594                           ; BSR set to: 0
 12595  001618  0E01               	movlw	1
 12596                           
 12597                           ; BSR set to: 0
 12598  00161A  0012               	return	
 12599  00161C                     l1523:
 12600  00161C                     l12667:
 12601                           
 12602                           ;ff.c: 3129: fp->sclust = clst;
 12603  00161C  0100               	movlb	0	; () banked
 12604  00161E  EE20 F00E          	lfsr	2,14
 12605  001622  51D7               	movf	f_lseek@fp& (0+255),w,b
 12606  001624  26D9               	addwf	fsr2l,f,c
 12607  001626  51D8               	movf	(f_lseek@fp+1)& (0+255),w,b
 12608  001628  22DA               	addwfc	fsr2h,f,c
 12609  00162A  C18C  FFDE         	movff	f_lseek@clst,postinc2
 12610  00162E  C18D  FFDE         	movff	f_lseek@clst+1,postinc2
 12611  001632  C18E  FFDE         	movff	f_lseek@clst+2,postinc2
 12612  001636  C18F  FFDE         	movff	f_lseek@clst+3,postinc2
 12613  00163A                     l1521:
 12614                           
 12615                           ;ff.c: 3130: }
 12616                           ;ff.c: 3132: fp->clust = clst;
 12617  00163A  0100               	movlb	0	; () banked
 12618  00163C  EE20 F012          	lfsr	2,18
 12619  001640  51D7               	movf	f_lseek@fp& (0+255),w,b
 12620  001642  26D9               	addwf	fsr2l,f,c
 12621  001644  51D8               	movf	(f_lseek@fp+1)& (0+255),w,b
 12622  001646  22DA               	addwfc	fsr2h,f,c
 12623  001648  C18C  FFDE         	movff	f_lseek@clst,postinc2
 12624  00164C  C18D  FFDE         	movff	f_lseek@clst+1,postinc2
 12625  001650  C18E  FFDE         	movff	f_lseek@clst+2,postinc2
 12626  001654  C18F  FFDE         	movff	f_lseek@clst+3,postinc2
 12627  001658                     l1520:
 12628                           
 12629                           ; BSR set to: 0
 12630                           ;ff.c: 3133: }
 12631                           ;ff.c: 3134: if (clst != 0) {
 12632                           
 12633                           ; BSR set to: 0
 12634  001658  0101               	movlb	1	; () banked
 12635  00165A  518C               	movf	f_lseek@clst& (0+255),w,b
 12636  00165C  118D               	iorwf	(f_lseek@clst+1)& (0+255),w,b
 12637  00165E  118E               	iorwf	(f_lseek@clst+2)& (0+255),w,b
 12638  001660  118F               	iorwf	(f_lseek@clst+3)& (0+255),w,b
 12639  001662  A4D8               	btfss	status,2,c
 12640  001664  D0B8               	goto	l1525
 12641  001666  D137               	goto	l1535
 12642  001668                     
 12643                           ; BSR set to: 1
 12644                           ;ff.c: 3137: if (fp->flag & 0x02) {
 12645                           
 12646                           ; BSR set to: 1
 12647  001668  0100               	movlb	0	; () banked
 12648  00166A  EE20 F004          	lfsr	2,4
 12649  00166E  51D7               	movf	f_lseek@fp& (0+255),w,b
 12650  001670  26D9               	addwf	fsr2l,f,c
 12651  001672  51D8               	movf	(f_lseek@fp+1)& (0+255),w,b
 12652  001674  22DA               	addwfc	fsr2h,f,c
 12653  001676  A2DF               	btfss	indf2,1,c
 12654  001678  D02A               	goto	l1527
 12655                           
 12656                           ; BSR set to: 0
 12657                           ;ff.c: 3138: clst = create_chain(fp->fs, clst);
 12658  00167A  C0D7  FFD9         	movff	f_lseek@fp,fsr2l
 12659  00167E  C0D8  FFDA         	movff	f_lseek@fp+1,fsr2h
 12660  001682  CFDE F0C0          	movff	postinc2,create_chain@fs
 12661  001686  CFDD F0C1          	movff	postdec2,create_chain@fs+1
 12662  00168A  C18C  F0C2         	movff	f_lseek@clst,create_chain@clst
 12663  00168E  C18D  F0C3         	movff	f_lseek@clst+1,create_chain@clst+1
 12664  001692  C18E  F0C4         	movff	f_lseek@clst+2,create_chain@clst+2
 12665  001696  C18F  F0C5         	movff	f_lseek@clst+3,create_chain@clst+3
 12666  00169A  ECF2  F016         	call	_create_chain	;wreg free
 12667  00169E  C0C0  F18C         	movff	?_create_chain,f_lseek@clst
 12668  0016A2  C0C1  F18D         	movff	?_create_chain+1,f_lseek@clst+1
 12669  0016A6  C0C2  F18E         	movff	?_create_chain+2,f_lseek@clst+2
 12670  0016AA  C0C3  F18F         	movff	?_create_chain+3,f_lseek@clst+3
 12671                           
 12672                           ;ff.c: 3139: if (clst == 0) {
 12673  0016AE  0101               	movlb	1	; () banked
 12674  0016B0  518C               	movf	f_lseek@clst& (0+255),w,b
 12675  0016B2  118D               	iorwf	(f_lseek@clst+1)& (0+255),w,b
 12676  0016B4  118E               	iorwf	(f_lseek@clst+2)& (0+255),w,b
 12677  0016B6  118F               	iorwf	(f_lseek@clst+3)& (0+255),w,b
 12678  0016B8  A4D8               	btfss	status,2,c
 12679  0016BA  D023               	goto	l1530
 12680                           
 12681                           ; BSR set to: 1
 12682                           ;ff.c: 3140: ofs = bcs; break;
 12683  0016BC  C188  F0D9         	movff	f_lseek@bcs,f_lseek@ofs
 12684  0016C0  C189  F0DA         	movff	f_lseek@bcs+1,f_lseek@ofs+1
 12685  0016C4  C18A  F0DB         	movff	f_lseek@bcs+2,f_lseek@ofs+2
 12686  0016C8  C18B  F0DC         	movff	f_lseek@bcs+3,f_lseek@ofs+3
 12687  0016CC  D096               	goto	u17610
 12688  0016CE                     l1527:
 12689                           
 12690                           ;ff.c: 3144: clst = get_fat(fp->fs, clst);
 12691                           
 12692                           ; BSR set to: 1
 12693  0016CE  C0D7  FFD9         	movff	f_lseek@fp,fsr2l
 12694  0016D2  C0D8  FFDA         	movff	f_lseek@fp+1,fsr2h
 12695  0016D6  CFDE F0A5          	movff	postinc2,get_fat@fs
 12696  0016DA  CFDD F0A6          	movff	postdec2,get_fat@fs+1
 12697  0016DE  C18C  F0A7         	movff	f_lseek@clst,get_fat@clst
 12698  0016E2  C18D  F0A8         	movff	f_lseek@clst+1,get_fat@clst+1
 12699  0016E6  C18E  F0A9         	movff	f_lseek@clst+2,get_fat@clst+2
 12700  0016EA  C18F  F0AA         	movff	f_lseek@clst+3,get_fat@clst+3
 12701  0016EE  EC33  F015         	call	_get_fat	;wreg free
 12702  0016F2  C0A5  F18C         	movff	?_get_fat,f_lseek@clst
 12703  0016F6  C0A6  F18D         	movff	?_get_fat+1,f_lseek@clst+1
 12704  0016FA  C0A7  F18E         	movff	?_get_fat+2,f_lseek@clst+2
 12705  0016FE  C0A8  F18F         	movff	?_get_fat+3,f_lseek@clst+3
 12706  001702                     l1530:
 12707                           
 12708                           ;ff.c: 3145: if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR
      +                          ; };
 12709  001702  0101               	movlb	1	; () banked
 12710  001704  298C               	incf	f_lseek@clst& (0+255),w,b
 12711  001706  E112               	bnz	l12691
 12712  001708  298D               	incf	(f_lseek@clst+1)& (0+255),w,b
 12713  00170A  E110               	bnz	l12691
 12714  00170C  298E               	incf	(f_lseek@clst+2)& (0+255),w,b
 12715  00170E  E10E               	bnz	l12691
 12716  001710  298F               	incf	(f_lseek@clst+3)& (0+255),w,b
 12717  001712  A4D8               	btfss	status,2,c
 12718  001714  D00B               	goto	l1531
 12719                           
 12720                           ; BSR set to: 1
 12721  001716  0100               	movlb	0	; () banked
 12722  001718  EE20 F005          	lfsr	2,5
 12723  00171C  51D7               	movf	f_lseek@fp& (0+255),w,b
 12724  00171E  26D9               	addwf	fsr2l,f,c
 12725  001720  51D8               	movf	(f_lseek@fp+1)& (0+255),w,b
 12726  001722  22DA               	addwfc	fsr2h,f,c
 12727  001724  0E01               	movlw	1
 12728  001726  6EDF               	movwf	indf2,c
 12729                           
 12730                           ; BSR set to: 0
 12731  001728  0E01               	movlw	1
 12732                           
 12733                           ; BSR set to: 0
 12734  00172A  0012               	return	
 12735  00172C                     l1531:
 12736  00172C                     l12691:
 12737                           
 12738                           ;ff.c: 3146: if (clst <= 1 || clst >= fp->fs->n_fatent) { fp->err = (BYTE)(FR_INT_ERR); 
      +                          return FR_INT_ERR; };
 12739  00172C  0101               	movlb	1	; () banked
 12740  00172E  518F               	movf	(f_lseek@clst+3)& (0+255),w,b
 12741  001730  118E               	iorwf	(f_lseek@clst+2)& (0+255),w,b
 12742  001732  118D               	iorwf	(f_lseek@clst+1)& (0+255),w,b
 12743  001734  E104               	bnz	u17590
 12744  001736  0E02               	movlw	2
 12745  001738  5D8C               	subwf	f_lseek@clst& (0+255),w,b
 12746  00173A  A0D8               	btfss	status,0,c
 12747  00173C  D014               	goto	u17600
 12748  00173E                     u17590:
 12749                           
 12750                           ; BSR set to: 1
 12751  00173E  C0D7  FFD9         	movff	f_lseek@fp,fsr2l
 12752  001742  C0D8  FFDA         	movff	f_lseek@fp+1,fsr2h
 12753  001746  EE10 F012          	lfsr	1,18
 12754  00174A  50DE               	movf	postinc2,w,c
 12755  00174C  26E1               	addwf	fsr1l,f,c
 12756  00174E  50DD               	movf	postdec2,w,c
 12757  001750  22E2               	addwfc	fsr1h,f,c
 12758  001752  50E6               	movf	postinc1,w,c
 12759  001754  5D8C               	subwf	f_lseek@clst& (0+255),w,b
 12760  001756  50E6               	movf	postinc1,w,c
 12761  001758  598D               	subwfb	(f_lseek@clst+1)& (0+255),w,b
 12762  00175A  50E6               	movf	postinc1,w,c
 12763  00175C  598E               	subwfb	(f_lseek@clst+2)& (0+255),w,b
 12764  00175E  50E6               	movf	postinc1,w,c
 12765  001760  598F               	subwfb	(f_lseek@clst+3)& (0+255),w,b
 12766  001762  A0D8               	btfss	status,0,c
 12767  001764  D00B               	goto	l1532
 12768  001766                     u17600:
 12769                           
 12770                           ; BSR set to: 1
 12771                           
 12772                           ; BSR set to: 1
 12773  001766  0100               	movlb	0	; () banked
 12774  001768  EE20 F005          	lfsr	2,5
 12775  00176C  51D7               	movf	f_lseek@fp& (0+255),w,b
 12776  00176E  26D9               	addwf	fsr2l,f,c
 12777  001770  51D8               	movf	(f_lseek@fp+1)& (0+255),w,b
 12778  001772  22DA               	addwfc	fsr2h,f,c
 12779  001774  0E02               	movlw	2
 12780  001776  6EDF               	movwf	indf2,c
 12781                           
 12782                           ; BSR set to: 0
 12783  001778  0E02               	movlw	2
 12784                           
 12785                           ; BSR set to: 0
 12786  00177A  0012               	return	
 12787  00177C                     l1532:
 12788                           
 12789                           ;ff.c: 3147: fp->clust = clst;
 12790                           
 12791                           ; BSR set to: 0
 12792  00177C  0100               	movlb	0	; () banked
 12793  00177E  EE20 F012          	lfsr	2,18
 12794  001782  51D7               	movf	f_lseek@fp& (0+255),w,b
 12795  001784  26D9               	addwf	fsr2l,f,c
 12796  001786  51D8               	movf	(f_lseek@fp+1)& (0+255),w,b
 12797  001788  22DA               	addwfc	fsr2h,f,c
 12798  00178A  C18C  FFDE         	movff	f_lseek@clst,postinc2
 12799  00178E  C18D  FFDE         	movff	f_lseek@clst+1,postinc2
 12800  001792  C18E  FFDE         	movff	f_lseek@clst+2,postinc2
 12801  001796  C18F  FFDE         	movff	f_lseek@clst+3,postinc2
 12802                           
 12803                           ;ff.c: 3148: fp->fptr += bcs;
 12804  00179A  EE20 F006          	lfsr	2,6
 12805  00179E  51D7               	movf	f_lseek@fp& (0+255),w,b
 12806  0017A0  26D9               	addwf	fsr2l,f,c
 12807  0017A2  51D8               	movf	(f_lseek@fp+1)& (0+255),w,b
 12808  0017A4  22DA               	addwfc	fsr2h,f,c
 12809  0017A6  0101               	movlb	1	; () banked
 12810  0017A8  5188               	movf	f_lseek@bcs& (0+255),w,b
 12811  0017AA  26DE               	addwf	postinc2,f,c
 12812  0017AC  5189               	movf	(f_lseek@bcs+1)& (0+255),w,b
 12813  0017AE  22DE               	addwfc	postinc2,f,c
 12814  0017B0  518A               	movf	(f_lseek@bcs+2)& (0+255),w,b
 12815  0017B2  22DE               	addwfc	postinc2,f,c
 12816  0017B4  518B               	movf	(f_lseek@bcs+3)& (0+255),w,b
 12817  0017B6  22DE               	addwfc	postinc2,f,c
 12818                           
 12819                           ; BSR set to: 1
 12820                           ;ff.c: 3149: ofs -= bcs;
 12821  0017B8  5188               	movf	f_lseek@bcs& (0+255),w,b
 12822  0017BA  0100               	movlb	0	; () banked
 12823  0017BC  5FD9               	subwf	f_lseek@ofs& (0+255),f,b
 12824  0017BE  0101               	movlb	1	; () banked
 12825  0017C0  5189               	movf	(f_lseek@bcs+1)& (0+255),w,b
 12826  0017C2  0100               	movlb	0	; () banked
 12827  0017C4  5BDA               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 12828  0017C6  0101               	movlb	1	; () banked
 12829  0017C8  518A               	movf	(f_lseek@bcs+2)& (0+255),w,b
 12830  0017CA  0100               	movlb	0	; () banked
 12831  0017CC  5BDB               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 12832  0017CE  0101               	movlb	1	; () banked
 12833  0017D0  518B               	movf	(f_lseek@bcs+3)& (0+255),w,b
 12834  0017D2  0100               	movlb	0	; () banked
 12835  0017D4  5BDC               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 12836  0017D6                     l1525:
 12837                           
 12838                           ; BSR set to: 0
 12839  0017D6  0100               	movlb	0	; () banked
 12840  0017D8  51D9               	movf	f_lseek@ofs& (0+255),w,b
 12841  0017DA  0101               	movlb	1	; () banked
 12842  0017DC  5D88               	subwf	f_lseek@bcs& (0+255),w,b
 12843  0017DE  0100               	movlb	0	; () banked
 12844  0017E0  51DA               	movf	(f_lseek@ofs+1)& (0+255),w,b
 12845  0017E2  0101               	movlb	1	; () banked
 12846  0017E4  5989               	subwfb	(f_lseek@bcs+1)& (0+255),w,b
 12847  0017E6  0100               	movlb	0	; () banked
 12848  0017E8  51DB               	movf	(f_lseek@ofs+2)& (0+255),w,b
 12849  0017EA  0101               	movlb	1	; () banked
 12850  0017EC  598A               	subwfb	(f_lseek@bcs+2)& (0+255),w,b
 12851  0017EE  0100               	movlb	0	; () banked
 12852  0017F0  51DC               	movf	(f_lseek@ofs+3)& (0+255),w,b
 12853  0017F2  0101               	movlb	1	; () banked
 12854  0017F4  598B               	subwfb	(f_lseek@bcs+3)& (0+255),w,b
 12855  0017F6  A0D8               	btfss	status,0,c
 12856  0017F8  D737               	goto	l1526
 12857  0017FA                     u17610:
 12858                           
 12859                           ; BSR set to: 1
 12860                           ;ff.c: 3150: }
 12861                           ;ff.c: 3151: fp->fptr += ofs;
 12862                           
 12863                           ; BSR set to: 1
 12864  0017FA  0100               	movlb	0	; () banked
 12865  0017FC  EE20 F006          	lfsr	2,6
 12866  001800  51D7               	movf	f_lseek@fp& (0+255),w,b
 12867  001802  26D9               	addwf	fsr2l,f,c
 12868  001804  51D8               	movf	(f_lseek@fp+1)& (0+255),w,b
 12869  001806  22DA               	addwfc	fsr2h,f,c
 12870  001808  51D9               	movf	f_lseek@ofs& (0+255),w,b
 12871  00180A  26DE               	addwf	postinc2,f,c
 12872  00180C  51DA               	movf	(f_lseek@ofs+1)& (0+255),w,b
 12873  00180E  22DE               	addwfc	postinc2,f,c
 12874  001810  51DB               	movf	(f_lseek@ofs+2)& (0+255),w,b
 12875  001812  22DE               	addwfc	postinc2,f,c
 12876  001814  51DC               	movf	(f_lseek@ofs+3)& (0+255),w,b
 12877  001816  22DE               	addwfc	postinc2,f,c
 12878                           
 12879                           ; BSR set to: 0
 12880                           ;ff.c: 3152: if (ofs % ((UINT)512)) {
 12881  001818  0EFF               	movlw	255
 12882  00181A  15D9               	andwf	f_lseek@ofs& (0+255),w,b
 12883  00181C  6FDD               	movwf	??_f_lseek& (0+255),b
 12884  00181E  0E01               	movlw	1
 12885  001820  15DA               	andwf	(f_lseek@ofs+1)& (0+255),w,b
 12886  001822  6FDE               	movwf	(??_f_lseek+1)& (0+255),b
 12887  001824  0E00               	movlw	0
 12888  001826  15DB               	andwf	(f_lseek@ofs+2)& (0+255),w,b
 12889  001828  6FDF               	movwf	(??_f_lseek+2)& (0+255),b
 12890  00182A  0E00               	movlw	0
 12891  00182C  15DC               	andwf	(f_lseek@ofs+3)& (0+255),w,b
 12892  00182E  6FE0               	movwf	(??_f_lseek+3)& (0+255),b
 12893  001830  51DD               	movf	??_f_lseek& (0+255),w,b
 12894  001832  11DE               	iorwf	(??_f_lseek+1)& (0+255),w,b
 12895  001834  11DF               	iorwf	(??_f_lseek+2)& (0+255),w,b
 12896  001836  11E0               	iorwf	(??_f_lseek+3)& (0+255),w,b
 12897  001838  B4D8               	btfsc	status,2,c
 12898  00183A  D04D               	goto	l1535
 12899                           
 12900                           ; BSR set to: 0
 12901                           ;ff.c: 3153: nsect = clust2sect(fp->fs, clst);
 12902  00183C  C0D7  FFD9         	movff	f_lseek@fp,fsr2l
 12903  001840  C0D8  FFDA         	movff	f_lseek@fp+1,fsr2h
 12904  001844  CFDE F026          	movff	postinc2,clust2sect@fs
 12905  001848  CFDD F027          	movff	postdec2,clust2sect@fs+1
 12906  00184C  C18C  F028         	movff	f_lseek@clst,clust2sect@clst
 12907  001850  C18D  F029         	movff	f_lseek@clst+1,clust2sect@clst+1
 12908  001854  C18E  F02A         	movff	f_lseek@clst+2,clust2sect@clst+2
 12909  001858  C18F  F02B         	movff	f_lseek@clst+3,clust2sect@clst+3
 12910  00185C  EC41  F025         	call	_clust2sect	;wreg free
 12911  001860  C026  F184         	movff	?_clust2sect,f_lseek@nsect
 12912  001864  C027  F185         	movff	?_clust2sect+1,f_lseek@nsect+1
 12913  001868  C028  F186         	movff	?_clust2sect+2,f_lseek@nsect+2
 12914  00186C  C029  F187         	movff	?_clust2sect+3,f_lseek@nsect+3
 12915                           
 12916                           ;ff.c: 3154: if (!nsect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
 12917  001870  0101               	movlb	1	; () banked
 12918  001872  5184               	movf	f_lseek@nsect& (0+255),w,b
 12919  001874  1185               	iorwf	(f_lseek@nsect+1)& (0+255),w,b
 12920  001876  1186               	iorwf	(f_lseek@nsect+2)& (0+255),w,b
 12921  001878  1187               	iorwf	(f_lseek@nsect+3)& (0+255),w,b
 12922  00187A  A4D8               	btfss	status,2,c
 12923  00187C  D00B               	goto	l1536
 12924                           
 12925                           ; BSR set to: 1
 12926  00187E  0100               	movlb	0	; () banked
 12927  001880  EE20 F005          	lfsr	2,5
 12928  001884  51D7               	movf	f_lseek@fp& (0+255),w,b
 12929  001886  26D9               	addwf	fsr2l,f,c
 12930  001888  51D8               	movf	(f_lseek@fp+1)& (0+255),w,b
 12931  00188A  22DA               	addwfc	fsr2h,f,c
 12932  00188C  0E02               	movlw	2
 12933  00188E  6EDF               	movwf	indf2,c
 12934                           
 12935                           ; BSR set to: 0
 12936  001890  0E02               	movlw	2
 12937                           
 12938                           ; BSR set to: 0
 12939  001892  0012               	return	
 12940  001894                     l1536:
 12941                           
 12942                           ;ff.c: 3155: nsect += ofs / ((UINT)512);
 12943                           
 12944                           ; BSR set to: 0
 12945  001894  C0D9  F0DD         	movff	f_lseek@ofs,??_f_lseek
 12946  001898  C0DA  F0DE         	movff	f_lseek@ofs+1,??_f_lseek+1
 12947  00189C  C0DB  F0DF         	movff	f_lseek@ofs+2,??_f_lseek+2
 12948  0018A0  C0DC  F0E0         	movff	f_lseek@ofs+3,??_f_lseek+3
 12949  0018A4  0E0A               	movlw	10
 12950  0018A6  D006               	goto	u17640
 12951  0018A8                     u17645:
 12952  0018A8  0100               	movlb	0	; () banked
 12953  0018AA  90D8               	bcf	status,0,c
 12954  0018AC  33E0               	rrcf	(??_f_lseek+3)& (0+255),f,b
 12955  0018AE  33DF               	rrcf	(??_f_lseek+2)& (0+255),f,b
 12956  0018B0  33DE               	rrcf	(??_f_lseek+1)& (0+255),f,b
 12957  0018B2  33DD               	rrcf	??_f_lseek& (0+255),f,b
 12958  0018B4                     u17640:
 12959  0018B4  2EE8               	decfsz	wreg,f,c
 12960  0018B6  D7F8               	goto	u17645
 12961  0018B8  51DD               	movf	??_f_lseek& (0+255),w,b
 12962  0018BA  0101               	movlb	1	; () banked
 12963  0018BC  2784               	addwf	f_lseek@nsect& (0+255),f,b
 12964  0018BE  0100               	movlb	0	; () banked
 12965  0018C0  51DE               	movf	(??_f_lseek+1)& (0+255),w,b
 12966  0018C2  0101               	movlb	1	; () banked
 12967  0018C4  2385               	addwfc	(f_lseek@nsect+1)& (0+255),f,b
 12968  0018C6  0100               	movlb	0	; () banked
 12969  0018C8  51DF               	movf	(??_f_lseek+2)& (0+255),w,b
 12970  0018CA  0101               	movlb	1	; () banked
 12971  0018CC  2386               	addwfc	(f_lseek@nsect+2)& (0+255),f,b
 12972  0018CE  0100               	movlb	0	; () banked
 12973  0018D0  51E0               	movf	(??_f_lseek+3)& (0+255),w,b
 12974  0018D2  0101               	movlb	1	; () banked
 12975  0018D4  2387               	addwfc	(f_lseek@nsect+3)& (0+255),f,b
 12976  0018D6                     l1535:
 12977                           
 12978                           ;ff.c: 3156: }
 12979                           ;ff.c: 3157: }
 12980                           ;ff.c: 3158: }
 12981                           ;ff.c: 3159: if (fp->fptr % ((UINT)512) && nsect != fp->dsect) {
 12982                           
 12983                           ; BSR set to: 1
 12984                           
 12985                           ; BSR set to: 1
 12986                           
 12987                           ; BSR set to: 1
 12988  0018D6  0100               	movlb	0	; () banked
 12989  0018D8  EE20 F006          	lfsr	2,6
 12990  0018DC  51D7               	movf	f_lseek@fp& (0+255),w,b
 12991  0018DE  26D9               	addwf	fsr2l,f,c
 12992  0018E0  51D8               	movf	(f_lseek@fp+1)& (0+255),w,b
 12993  0018E2  22DA               	addwfc	fsr2h,f,c
 12994  0018E4  0EFF               	movlw	255
 12995  0018E6  14DE               	andwf	postinc2,w,c
 12996  0018E8  6FDD               	movwf	??_f_lseek& (0+255),b
 12997  0018EA  0E01               	movlw	1
 12998  0018EC  14DE               	andwf	postinc2,w,c
 12999  0018EE  6FDE               	movwf	(??_f_lseek+1)& (0+255),b
 13000  0018F0  0E00               	movlw	0
 13001  0018F2  14DE               	andwf	postinc2,w,c
 13002  0018F4  6FDF               	movwf	(??_f_lseek+2)& (0+255),b
 13003  0018F6  0E00               	movlw	0
 13004  0018F8  14DE               	andwf	postinc2,w,c
 13005  0018FA  6FE0               	movwf	(??_f_lseek+3)& (0+255),b
 13006  0018FC  51DD               	movf	??_f_lseek& (0+255),w,b
 13007  0018FE  11DE               	iorwf	(??_f_lseek+1)& (0+255),w,b
 13008  001900  11DF               	iorwf	(??_f_lseek+2)& (0+255),w,b
 13009  001902  11E0               	iorwf	(??_f_lseek+3)& (0+255),w,b
 13010  001904  B4D8               	btfsc	status,2,c
 13011  001906  D023               	goto	l1537
 13012                           
 13013                           ; BSR set to: 0
 13014  001908  EE20 F016          	lfsr	2,22
 13015  00190C  51D7               	movf	f_lseek@fp& (0+255),w,b
 13016  00190E  26D9               	addwf	fsr2l,f,c
 13017  001910  51D8               	movf	(f_lseek@fp+1)& (0+255),w,b
 13018  001912  22DA               	addwfc	fsr2h,f,c
 13019  001914  0101               	movlb	1	; () banked
 13020  001916  5184               	movf	f_lseek@nsect& (0+255),w,b
 13021  001918  18DE               	xorwf	postinc2,w,c
 13022  00191A  E10A               	bnz	u17660
 13023  00191C  5185               	movf	(f_lseek@nsect+1)& (0+255),w,b
 13024  00191E  18DE               	xorwf	postinc2,w,c
 13025  001920  E107               	bnz	u17660
 13026  001922  5186               	movf	(f_lseek@nsect+2)& (0+255),w,b
 13027  001924  18DE               	xorwf	postinc2,w,c
 13028  001926  E104               	bnz	u17660
 13029  001928  5187               	movf	(f_lseek@nsect+3)& (0+255),w,b
 13030  00192A  18DE               	xorwf	postinc2,w,c
 13031  00192C  B4D8               	btfsc	status,2,c
 13032  00192E  D00F               	goto	l1537
 13033  001930                     u17660:
 13034                           
 13035                           ; BSR set to: 1
 13036                           ;ff.c: 3171: fp->dsect = nsect;
 13037  001930  0100               	movlb	0	; () banked
 13038  001932  EE20 F016          	lfsr	2,22
 13039  001936  51D7               	movf	f_lseek@fp& (0+255),w,b
 13040  001938  26D9               	addwf	fsr2l,f,c
 13041  00193A  51D8               	movf	(f_lseek@fp+1)& (0+255),w,b
 13042  00193C  22DA               	addwfc	fsr2h,f,c
 13043  00193E  C184  FFDE         	movff	f_lseek@nsect,postinc2
 13044  001942  C185  FFDE         	movff	f_lseek@nsect+1,postinc2
 13045  001946  C186  FFDE         	movff	f_lseek@nsect+2,postinc2
 13046  00194A  C187  FFDE         	movff	f_lseek@nsect+3,postinc2
 13047  00194E                     l1537:
 13048                           
 13049                           ;ff.c: 3172: }
 13050                           ;ff.c: 3174: if (fp->fptr > fp->fsize) {
 13051                           
 13052                           ; BSR set to: 0
 13053  00194E  0100               	movlb	0	; () banked
 13054  001950  EE20 F006          	lfsr	2,6
 13055  001954  51D7               	movf	f_lseek@fp& (0+255),w,b
 13056  001956  26D9               	addwf	fsr2l,f,c
 13057  001958  51D8               	movf	(f_lseek@fp+1)& (0+255),w,b
 13058  00195A  22DA               	addwfc	fsr2h,f,c
 13059  00195C  EE10 F00A          	lfsr	1,10
 13060  001960  51D7               	movf	f_lseek@fp& (0+255),w,b
 13061  001962  26E1               	addwf	fsr1l,f,c
 13062  001964  51D8               	movf	(f_lseek@fp+1)& (0+255),w,b
 13063  001966  22E2               	addwfc	fsr1h,f,c
 13064  001968  50DE               	movf	postinc2,w,c
 13065  00196A  5CE6               	subwf	postinc1,w,c
 13066  00196C  50DE               	movf	postinc2,w,c
 13067  00196E  58E6               	subwfb	postinc1,w,c
 13068  001970  50DE               	movf	postinc2,w,c
 13069  001972  58E6               	subwfb	postinc1,w,c
 13070  001974  50DE               	movf	postinc2,w,c
 13071  001976  58E6               	subwfb	postinc1,w,c
 13072  001978  B0D8               	btfsc	status,0,c
 13073  00197A  D01C               	goto	l1538
 13074                           
 13075                           ; BSR set to: 0
 13076                           ;ff.c: 3175: fp->fsize = fp->fptr;
 13077  00197C  EE20 F006          	lfsr	2,6
 13078  001980  51D7               	movf	f_lseek@fp& (0+255),w,b
 13079  001982  26D9               	addwf	fsr2l,f,c
 13080  001984  51D8               	movf	(f_lseek@fp+1)& (0+255),w,b
 13081  001986  22DA               	addwfc	fsr2h,f,c
 13082  001988  EE10 F00A          	lfsr	1,10
 13083  00198C  51D7               	movf	f_lseek@fp& (0+255),w,b
 13084  00198E  26E1               	addwf	fsr1l,f,c
 13085  001990  51D8               	movf	(f_lseek@fp+1)& (0+255),w,b
 13086  001992  22E2               	addwfc	fsr1h,f,c
 13087  001994  CFDE FFE6          	movff	postinc2,postinc1
 13088  001998  CFDE FFE6          	movff	postinc2,postinc1
 13089  00199C  CFDE FFE6          	movff	postinc2,postinc1
 13090  0019A0  CFDE FFE6          	movff	postinc2,postinc1
 13091                           
 13092                           ; BSR set to: 0
 13093                           ;ff.c: 3176: fp->flag |= 0x20;
 13094  0019A4  EE20 F004          	lfsr	2,4
 13095  0019A8  51D7               	movf	f_lseek@fp& (0+255),w,b
 13096  0019AA  26D9               	addwf	fsr2l,f,c
 13097  0019AC  51D8               	movf	(f_lseek@fp+1)& (0+255),w,b
 13098  0019AE  22DA               	addwfc	fsr2h,f,c
 13099  0019B0  0E00               	movlw	0
 13100  0019B2  8ADB               	bsf	plusw2,5,c
 13101  0019B4                     l1538:
 13102                           
 13103                           ; BSR set to: 0
 13104                           ;ff.c: 3177: }
 13105                           ;ff.c: 3179: }
 13106                           ;ff.c: 3181: return res;
 13107                           
 13108                           ; BSR set to: 0
 13109  0019B4  0101               	movlb	1	; () banked
 13110  0019B6  5183               	movf	f_lseek@res& (0+255),w,b
 13111  0019B8  0012               	return	
 13112  0019BA                     __end_of_f_lseek:
 13113                           	opt stack 0
 13114                           tosu	equ	0xFFF
 13115                           tosh	equ	0xFFE
 13116                           tosl	equ	0xFFD
 13117                           pclath	equ	0xFFA
 13118                           tblptru	equ	0xFF8
 13119                           tblptrh	equ	0xFF7
 13120                           tblptrl	equ	0xFF6
 13121                           tablat	equ	0xFF5
 13122                           prodh	equ	0xFF4
 13123                           prodl	equ	0xFF3
 13124                           intcon	equ	0xFF2
 13125                           intcon2	equ	0xFF1
 13126                           intcon3	equ	0xFF0
 13127                           indf0	equ	0xFEF
 13128                           postinc0	equ	0xFEE
 13129                           fsr0h	equ	0xFEA
 13130                           fsr0l	equ	0xFE9
 13131                           wreg	equ	0xFE8
 13132                           indf1	equ	0xFE7
 13133                           postinc1	equ	0xFE6
 13134                           postdec1	equ	0xFE5
 13135                           fsr1h	equ	0xFE2
 13136                           fsr1l	equ	0xFE1
 13137                           indf2	equ	0xFDF
 13138                           postinc2	equ	0xFDE
 13139                           postdec2	equ	0xFDD
 13140                           plusw2	equ	0xFDB
 13141                           fsr2h	equ	0xFDA
 13142                           fsr2l	equ	0xFD9
 13143                           status	equ	0xFD8
 13144                           
 13145 ;; *************** function _create_chain *****************
 13146 ;; Defined at:
 13147 ;;		line 990 in file "bibliotecas/ff.c"
 13148 ;; Parameters:    Size  Location     Type
 13149 ;;  fs              2   96[BANK0 ] PTR struct .
 13150 ;;		 -> NULL(0), fs(558), 
 13151 ;;  clst            4   98[BANK0 ] unsigned long 
 13152 ;; Auto vars:     Size  Location     Type
 13153 ;;  cs              4  115[BANK0 ] unsigned long 
 13154 ;;  ncl             4  111[BANK0 ] unsigned long 
 13155 ;;  scl             4  107[BANK0 ] unsigned long 
 13156 ;;  res             1  106[BANK0 ] enum E75
 13157 ;; Return value:  Size  Location     Type
 13158 ;;                  4   96[BANK0 ] unsigned long 
 13159 ;; Registers used:
 13160 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13161 ;; Tracked objects:
 13162 ;;		On entry : 0/0
 13163 ;;		On exit  : 0/0
 13164 ;;		Unchanged: 0/0
 13165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13166 ;;      Params:         0       6       0       0       0       0       0       0       0
 13167 ;;      Locals:         0      13       0       0       0       0       0       0       0
 13168 ;;      Temps:          0       4       0       0       0       0       0       0       0
 13169 ;;      Totals:         0      23       0       0       0       0       0       0       0
 13170 ;;Total ram usage:       23 bytes
 13171 ;; Hardware stack levels used:    1
 13172 ;; Hardware stack levels required when called:   12
 13173 ;; This function calls:
 13174 ;;		_get_fat
 13175 ;;		_put_fat
 13176 ;; This function is called by:
 13177 ;;		_dir_next
 13178 ;;		_f_write
 13179 ;;		_f_lseek
 13180 ;; This function uses a non-reentrant model
 13181 ;;
 13182                           
 13183                           	psect	text35
 13184  002DE4                     __ptext35:
 13185                           	opt stack 0
 13186  002DE4                     _create_chain:
 13187                           	opt stack 15
 13188                           
 13189                           ;ff.c: 995: DWORD cs, ncl, scl;
 13190                           ;ff.c: 996: FRESULT res;
 13191                           ;ff.c: 999: if (clst == 0) {
 13192                           
 13193                           ;incstack = 0
 13194  002DE4  0100               	movlb	0	; () banked
 13195  002DE6  51C2               	movf	create_chain@clst& (0+255),w,b
 13196  002DE8  11C3               	iorwf	(create_chain@clst+1)& (0+255),w,b
 13197  002DEA  11C4               	iorwf	(create_chain@clst+2)& (0+255),w,b
 13198  002DEC  11C5               	iorwf	(create_chain@clst+3)& (0+255),w,b
 13199  002DEE  A4D8               	btfss	status,2,c
 13200  002DF0  D02D               	goto	l1163
 13201                           
 13202                           ; BSR set to: 0
 13203                           ;ff.c: 1000: scl = fs->last_clust;
 13204  002DF2  EE20 F00A          	lfsr	2,10
 13205  002DF6  51C0               	movf	create_chain@fs& (0+255),w,b
 13206  002DF8  26D9               	addwf	fsr2l,f,c
 13207  002DFA  51C1               	movf	(create_chain@fs+1)& (0+255),w,b
 13208  002DFC  22DA               	addwfc	fsr2h,f,c
 13209  002DFE  CFDE F0CB          	movff	postinc2,create_chain@scl
 13210  002E02  CFDE F0CC          	movff	postinc2,create_chain@scl+1
 13211  002E06  CFDE F0CD          	movff	postinc2,create_chain@scl+2
 13212  002E0A  CFDE F0CE          	movff	postinc2,create_chain@scl+3
 13213                           
 13214                           ; BSR set to: 0
 13215                           ;ff.c: 1001: if (!scl || scl >= fs->n_fatent) scl = 1;
 13216  002E0E  51CB               	movf	create_chain@scl& (0+255),w,b
 13217  002E10  11CC               	iorwf	(create_chain@scl+1)& (0+255),w,b
 13218  002E12  11CD               	iorwf	(create_chain@scl+2)& (0+255),w,b
 13219  002E14  11CE               	iorwf	(create_chain@scl+3)& (0+255),w,b
 13220  002E16  B4D8               	btfsc	status,2,c
 13221  002E18  D010               	goto	u14650
 13222                           
 13223                           ; BSR set to: 0
 13224  002E1A  EE20 F012          	lfsr	2,18
 13225  002E1E  51C0               	movf	create_chain@fs& (0+255),w,b
 13226  002E20  26D9               	addwf	fsr2l,f,c
 13227  002E22  51C1               	movf	(create_chain@fs+1)& (0+255),w,b
 13228  002E24  22DA               	addwfc	fsr2h,f,c
 13229  002E26  50DE               	movf	postinc2,w,c
 13230  002E28  5DCB               	subwf	create_chain@scl& (0+255),w,b
 13231  002E2A  50DE               	movf	postinc2,w,c
 13232  002E2C  59CC               	subwfb	(create_chain@scl+1)& (0+255),w,b
 13233  002E2E  50DE               	movf	postinc2,w,c
 13234  002E30  59CD               	subwfb	(create_chain@scl+2)& (0+255),w,b
 13235  002E32  50DE               	movf	postinc2,w,c
 13236  002E34  59CE               	subwfb	(create_chain@scl+3)& (0+255),w,b
 13237  002E36  A0D8               	btfss	status,0,c
 13238  002E38  D064               	goto	l1167
 13239  002E3A                     u14650:
 13240                           
 13241                           ; BSR set to: 0
 13242                           
 13243                           ; BSR set to: 0
 13244  002E3A  0E01               	movlw	1
 13245  002E3C  6FCB               	movwf	create_chain@scl& (0+255),b
 13246  002E3E  0E00               	movlw	0
 13247  002E40  6FCC               	movwf	(create_chain@scl+1)& (0+255),b
 13248  002E42  0E00               	movlw	0
 13249  002E44  6FCD               	movwf	(create_chain@scl+2)& (0+255),b
 13250  002E46  0E00               	movlw	0
 13251  002E48  6FCE               	movwf	(create_chain@scl+3)& (0+255),b
 13252                           
 13253                           ; BSR set to: 0
 13254                           ;ff.c: 1002: }
 13255  002E4A  D05B               	goto	l1167
 13256  002E4C                     l1163:
 13257                           
 13258                           ; BSR set to: 0
 13259                           ;ff.c: 1003: else {
 13260                           ;ff.c: 1004: cs = get_fat(fs, clst);
 13261                           
 13262                           ; BSR set to: 0
 13263  002E4C  C0C0  F0A5         	movff	create_chain@fs,get_fat@fs
 13264  002E50  C0C1  F0A6         	movff	create_chain@fs+1,get_fat@fs+1
 13265  002E54  C0C2  F0A7         	movff	create_chain@clst,get_fat@clst
 13266  002E58  C0C3  F0A8         	movff	create_chain@clst+1,get_fat@clst+1
 13267  002E5C  C0C4  F0A9         	movff	create_chain@clst+2,get_fat@clst+2
 13268  002E60  C0C5  F0AA         	movff	create_chain@clst+3,get_fat@clst+3
 13269  002E64  EC33  F015         	call	_get_fat	;wreg free
 13270  002E68  C0A5  F0D3         	movff	?_get_fat,create_chain@cs
 13271  002E6C  C0A6  F0D4         	movff	?_get_fat+1,create_chain@cs+1
 13272  002E70  C0A7  F0D5         	movff	?_get_fat+2,create_chain@cs+2
 13273  002E74  C0A8  F0D6         	movff	?_get_fat+3,create_chain@cs+3
 13274                           
 13275                           ;ff.c: 1005: if (cs < 2) return 1;
 13276  002E78  0100               	movlb	0	; () banked
 13277  002E7A  51D6               	movf	(create_chain@cs+3)& (0+255),w,b
 13278  002E7C  11D5               	iorwf	(create_chain@cs+2)& (0+255),w,b
 13279  002E7E  11D4               	iorwf	(create_chain@cs+1)& (0+255),w,b
 13280  002E80  E10D               	bnz	l11153
 13281  002E82  0E02               	movlw	2
 13282  002E84  5DD3               	subwf	create_chain@cs& (0+255),w,b
 13283  002E86  B0D8               	btfsc	status,0,c
 13284  002E88  D009               	goto	l1168
 13285                           
 13286                           ; BSR set to: 0
 13287  002E8A  0E01               	movlw	1
 13288  002E8C  6FC0               	movwf	?_create_chain& (0+255),b
 13289  002E8E  0E00               	movlw	0
 13290  002E90  6FC1               	movwf	(?_create_chain+1)& (0+255),b
 13291  002E92  0E00               	movlw	0
 13292  002E94  6FC2               	movwf	(?_create_chain+2)& (0+255),b
 13293  002E96  0E00               	movlw	0
 13294  002E98  6FC3               	movwf	(?_create_chain+3)& (0+255),b
 13295                           
 13296                           ; BSR set to: 0
 13297  002E9A  0012               	return	
 13298  002E9C                     l1168:
 13299  002E9C                     l11153:
 13300                           
 13301                           ; BSR set to: 0
 13302                           ;ff.c: 1006: if (cs == 0xFFFFFFFF) return cs;
 13303  002E9C  29D3               	incf	create_chain@cs& (0+255),w,b
 13304  002E9E  E110               	bnz	l11157
 13305  002EA0  29D4               	incf	(create_chain@cs+1)& (0+255),w,b
 13306  002EA2  E10E               	bnz	l11157
 13307  002EA4  29D5               	incf	(create_chain@cs+2)& (0+255),w,b
 13308  002EA6  E10C               	bnz	l11157
 13309  002EA8  29D6               	incf	(create_chain@cs+3)& (0+255),w,b
 13310  002EAA  A4D8               	btfss	status,2,c
 13311  002EAC  D009               	goto	l1170
 13312                           
 13313                           ; BSR set to: 0
 13314  002EAE  C0D3  F0C0         	movff	create_chain@cs,?_create_chain
 13315  002EB2  C0D4  F0C1         	movff	create_chain@cs+1,?_create_chain+1
 13316  002EB6  C0D5  F0C2         	movff	create_chain@cs+2,?_create_chain+2
 13317  002EBA  C0D6  F0C3         	movff	create_chain@cs+3,?_create_chain+3
 13318  002EBE  0012               	return	
 13319  002EC0                     l1170:
 13320  002EC0                     l11157:
 13321                           
 13322                           ; BSR set to: 0
 13323                           ;ff.c: 1007: if (cs < fs->n_fatent) return cs;
 13324  002EC0  EE20 F012          	lfsr	2,18
 13325  002EC4  51C0               	movf	create_chain@fs& (0+255),w,b
 13326  002EC6  26D9               	addwf	fsr2l,f,c
 13327  002EC8  51C1               	movf	(create_chain@fs+1)& (0+255),w,b
 13328  002ECA  22DA               	addwfc	fsr2h,f,c
 13329  002ECC  50DE               	movf	postinc2,w,c
 13330  002ECE  5DD3               	subwf	create_chain@cs& (0+255),w,b
 13331  002ED0  50DE               	movf	postinc2,w,c
 13332  002ED2  59D4               	subwfb	(create_chain@cs+1)& (0+255),w,b
 13333  002ED4  50DE               	movf	postinc2,w,c
 13334  002ED6  59D5               	subwfb	(create_chain@cs+2)& (0+255),w,b
 13335  002ED8  50DE               	movf	postinc2,w,c
 13336  002EDA  59D6               	subwfb	(create_chain@cs+3)& (0+255),w,b
 13337  002EDC  B0D8               	btfsc	status,0,c
 13338  002EDE  D009               	goto	l1171
 13339                           
 13340                           ; BSR set to: 0
 13341  002EE0  C0D3  F0C0         	movff	create_chain@cs,?_create_chain
 13342  002EE4  C0D4  F0C1         	movff	create_chain@cs+1,?_create_chain+1
 13343  002EE8  C0D5  F0C2         	movff	create_chain@cs+2,?_create_chain+2
 13344  002EEC  C0D6  F0C3         	movff	create_chain@cs+3,?_create_chain+3
 13345  002EF0  0012               	return	
 13346  002EF2                     l1171:
 13347                           
 13348                           ; BSR set to: 0
 13349                           ;ff.c: 1008: scl = clst;
 13350  002EF2  C0C2  F0CB         	movff	create_chain@clst,create_chain@scl
 13351  002EF6  C0C3  F0CC         	movff	create_chain@clst+1,create_chain@scl+1
 13352  002EFA  C0C4  F0CD         	movff	create_chain@clst+2,create_chain@scl+2
 13353  002EFE  C0C5  F0CE         	movff	create_chain@clst+3,create_chain@scl+3
 13354  002F02                     l1167:
 13355                           
 13356                           ; BSR set to: 0
 13357                           ;ff.c: 1009: }
 13358                           ;ff.c: 1011: ncl = scl;
 13359  002F02  C0CB  F0CF         	movff	create_chain@scl,create_chain@ncl
 13360  002F06  C0CC  F0D0         	movff	create_chain@scl+1,create_chain@ncl+1
 13361  002F0A  C0CD  F0D1         	movff	create_chain@scl+2,create_chain@ncl+2
 13362  002F0E  C0CE  F0D2         	movff	create_chain@scl+3,create_chain@ncl+3
 13363  002F12                     l11161:
 13364                           
 13365                           ; BSR set to: 0
 13366                           ;ff.c: 1013: ncl++;
 13367  002F12  0E01               	movlw	1
 13368  002F14  27CF               	addwf	create_chain@ncl& (0+255),f,b
 13369  002F16  0E00               	movlw	0
 13370  002F18  23D0               	addwfc	(create_chain@ncl+1)& (0+255),f,b
 13371  002F1A  23D1               	addwfc	(create_chain@ncl+2)& (0+255),f,b
 13372  002F1C  23D2               	addwfc	(create_chain@ncl+3)& (0+255),f,b
 13373                           
 13374                           ; BSR set to: 0
 13375                           ;ff.c: 1014: if (ncl >= fs->n_fatent) {
 13376  002F1E  EE20 F012          	lfsr	2,18
 13377  002F22  51C0               	movf	create_chain@fs& (0+255),w,b
 13378  002F24  26D9               	addwf	fsr2l,f,c
 13379  002F26  51C1               	movf	(create_chain@fs+1)& (0+255),w,b
 13380  002F28  22DA               	addwfc	fsr2h,f,c
 13381  002F2A  50DE               	movf	postinc2,w,c
 13382  002F2C  5DCF               	subwf	create_chain@ncl& (0+255),w,b
 13383  002F2E  50DE               	movf	postinc2,w,c
 13384  002F30  59D0               	subwfb	(create_chain@ncl+1)& (0+255),w,b
 13385  002F32  50DE               	movf	postinc2,w,c
 13386  002F34  59D1               	subwfb	(create_chain@ncl+2)& (0+255),w,b
 13387  002F36  50DE               	movf	postinc2,w,c
 13388  002F38  59D2               	subwfb	(create_chain@ncl+3)& (0+255),w,b
 13389  002F3A  A0D8               	btfss	status,0,c
 13390  002F3C  D01B               	goto	l1174
 13391                           
 13392                           ; BSR set to: 0
 13393                           ;ff.c: 1015: ncl = 2;
 13394  002F3E  0E02               	movlw	2
 13395  002F40  6FCF               	movwf	create_chain@ncl& (0+255),b
 13396  002F42  0E00               	movlw	0
 13397  002F44  6FD0               	movwf	(create_chain@ncl+1)& (0+255),b
 13398  002F46  0E00               	movlw	0
 13399  002F48  6FD1               	movwf	(create_chain@ncl+2)& (0+255),b
 13400  002F4A  0E00               	movlw	0
 13401  002F4C  6FD2               	movwf	(create_chain@ncl+3)& (0+255),b
 13402                           
 13403                           ; BSR set to: 0
 13404                           ;ff.c: 1016: if (ncl > scl) return 0;
 13405  002F4E  51CF               	movf	create_chain@ncl& (0+255),w,b
 13406  002F50  5DCB               	subwf	create_chain@scl& (0+255),w,b
 13407  002F52  51D0               	movf	(create_chain@ncl+1)& (0+255),w,b
 13408  002F54  59CC               	subwfb	(create_chain@scl+1)& (0+255),w,b
 13409  002F56  51D1               	movf	(create_chain@ncl+2)& (0+255),w,b
 13410  002F58  59CD               	subwfb	(create_chain@scl+2)& (0+255),w,b
 13411  002F5A  51D2               	movf	(create_chain@ncl+3)& (0+255),w,b
 13412  002F5C  59CE               	subwfb	(create_chain@scl+3)& (0+255),w,b
 13413  002F5E  B0D8               	btfsc	status,0,c
 13414  002F60  D009               	goto	l1174
 13415                           
 13416                           ; BSR set to: 0
 13417  002F62  0E00               	movlw	0
 13418  002F64  6FC0               	movwf	?_create_chain& (0+255),b
 13419  002F66  0E00               	movlw	0
 13420  002F68  6FC1               	movwf	(?_create_chain+1)& (0+255),b
 13421  002F6A  0E00               	movlw	0
 13422  002F6C  6FC2               	movwf	(?_create_chain+2)& (0+255),b
 13423  002F6E  0E00               	movlw	0
 13424  002F70  6FC3               	movwf	(?_create_chain+3)& (0+255),b
 13425                           
 13426                           ; BSR set to: 0
 13427  002F72  0012               	return	
 13428  002F74                     l1174:
 13429                           
 13430                           ; BSR set to: 0
 13431                           ;ff.c: 1017: }
 13432                           ;ff.c: 1018: cs = get_fat(fs, ncl);
 13433                           
 13434                           ; BSR set to: 0
 13435                           
 13436                           ; BSR set to: 0
 13437  002F74  C0C0  F0A5         	movff	create_chain@fs,get_fat@fs
 13438  002F78  C0C1  F0A6         	movff	create_chain@fs+1,get_fat@fs+1
 13439  002F7C  C0CF  F0A7         	movff	create_chain@ncl,get_fat@clst
 13440  002F80  C0D0  F0A8         	movff	create_chain@ncl+1,get_fat@clst+1
 13441  002F84  C0D1  F0A9         	movff	create_chain@ncl+2,get_fat@clst+2
 13442  002F88  C0D2  F0AA         	movff	create_chain@ncl+3,get_fat@clst+3
 13443  002F8C  EC33  F015         	call	_get_fat	;wreg free
 13444  002F90  C0A5  F0D3         	movff	?_get_fat,create_chain@cs
 13445  002F94  C0A6  F0D4         	movff	?_get_fat+1,create_chain@cs+1
 13446  002F98  C0A7  F0D5         	movff	?_get_fat+2,create_chain@cs+2
 13447  002F9C  C0A8  F0D6         	movff	?_get_fat+3,create_chain@cs+3
 13448                           
 13449                           ;ff.c: 1019: if (cs == 0) break;
 13450  002FA0  0100               	movlb	0	; () banked
 13451  002FA2  51D3               	movf	create_chain@cs& (0+255),w,b
 13452  002FA4  11D4               	iorwf	(create_chain@cs+1)& (0+255),w,b
 13453  002FA6  11D5               	iorwf	(create_chain@cs+2)& (0+255),w,b
 13454  002FA8  11D6               	iorwf	(create_chain@cs+3)& (0+255),w,b
 13455  002FAA  B4D8               	btfsc	status,2,c
 13456  002FAC  D02E               	goto	l1176
 13457                           
 13458                           ; BSR set to: 0
 13459                           ;ff.c: 1020: if (cs == 0xFFFFFFFF || cs == 1)
 13460                           
 13461                           ; BSR set to: 0
 13462                           
 13463                           ; BSR set to: 0
 13464  002FAE  29D3               	incf	create_chain@cs& (0+255),w,b
 13465  002FB0  E107               	bnz	u14720
 13466  002FB2  29D4               	incf	(create_chain@cs+1)& (0+255),w,b
 13467  002FB4  E105               	bnz	u14720
 13468  002FB6  29D5               	incf	(create_chain@cs+2)& (0+255),w,b
 13469  002FB8  E103               	bnz	u14720
 13470  002FBA  29D6               	incf	(create_chain@cs+3)& (0+255),w,b
 13471  002FBC  B4D8               	btfsc	status,2,c
 13472  002FBE  D006               	goto	u14730
 13473  002FC0                     u14720:
 13474                           
 13475                           ; BSR set to: 0
 13476  002FC0  05D3               	decf	create_chain@cs& (0+255),w,b
 13477  002FC2  11D4               	iorwf	(create_chain@cs+1)& (0+255),w,b
 13478  002FC4  11D5               	iorwf	(create_chain@cs+2)& (0+255),w,b
 13479  002FC6  11D6               	iorwf	(create_chain@cs+3)& (0+255),w,b
 13480  002FC8  A4D8               	btfss	status,2,c
 13481  002FCA  D009               	goto	l1177
 13482  002FCC                     u14730:
 13483                           
 13484                           ; BSR set to: 0
 13485                           ;ff.c: 1021: return cs;
 13486  002FCC  C0D3  F0C0         	movff	create_chain@cs,?_create_chain
 13487  002FD0  C0D4  F0C1         	movff	create_chain@cs+1,?_create_chain+1
 13488  002FD4  C0D5  F0C2         	movff	create_chain@cs+2,?_create_chain+2
 13489  002FD8  C0D6  F0C3         	movff	create_chain@cs+3,?_create_chain+3
 13490  002FDC  0012               	return	
 13491  002FDE                     l1177:
 13492                           
 13493                           ; BSR set to: 0
 13494                           ;ff.c: 1022: if (ncl == scl) return 0;
 13495                           
 13496                           ; BSR set to: 0
 13497  002FDE  51CB               	movf	create_chain@scl& (0+255),w,b
 13498  002FE0  19CF               	xorwf	create_chain@ncl& (0+255),w,b
 13499  002FE2  E197               	bnz	l11161
 13500  002FE4  51CC               	movf	(create_chain@scl+1)& (0+255),w,b
 13501  002FE6  19D0               	xorwf	(create_chain@ncl+1)& (0+255),w,b
 13502  002FE8  E194               	bnz	l11161
 13503  002FEA  51CD               	movf	(create_chain@scl+2)& (0+255),w,b
 13504  002FEC  19D1               	xorwf	(create_chain@ncl+2)& (0+255),w,b
 13505  002FEE  E191               	bnz	l11161
 13506  002FF0  51CE               	movf	(create_chain@scl+3)& (0+255),w,b
 13507  002FF2  19D2               	xorwf	(create_chain@ncl+3)& (0+255),w,b
 13508  002FF4  A4D8               	btfss	status,2,c
 13509  002FF6  D78D               	goto	l1172
 13510                           
 13511                           ; BSR set to: 0
 13512  002FF8  0E00               	movlw	0
 13513  002FFA  6FC0               	movwf	?_create_chain& (0+255),b
 13514  002FFC  0E00               	movlw	0
 13515  002FFE  6FC1               	movwf	(?_create_chain+1)& (0+255),b
 13516  003000  0E00               	movlw	0
 13517  003002  6FC2               	movwf	(?_create_chain+2)& (0+255),b
 13518  003004  0E00               	movlw	0
 13519  003006  6FC3               	movwf	(?_create_chain+3)& (0+255),b
 13520                           
 13521                           ; BSR set to: 0
 13522  003008  0012               	return	
 13523  00300A                     l1176:
 13524                           
 13525                           ; BSR set to: 0
 13526                           ;ff.c: 1025: res = put_fat(fs, ncl, 0x0FFFFFFF);
 13527                           
 13528                           ; BSR set to: 0
 13529  00300A  C0C0  F0A5         	movff	create_chain@fs,put_fat@fs
 13530  00300E  C0C1  F0A6         	movff	create_chain@fs+1,put_fat@fs+1
 13531  003012  C0CF  F0A7         	movff	create_chain@ncl,put_fat@clst
 13532  003016  C0D0  F0A8         	movff	create_chain@ncl+1,put_fat@clst+1
 13533  00301A  C0D1  F0A9         	movff	create_chain@ncl+2,put_fat@clst+2
 13534  00301E  C0D2  F0AA         	movff	create_chain@ncl+3,put_fat@clst+3
 13535  003022  0EFF               	movlw	255
 13536  003024  6FAB               	movwf	put_fat@val& (0+255),b
 13537  003026  0EFF               	movlw	255
 13538  003028  6FAC               	movwf	(put_fat@val+1)& (0+255),b
 13539  00302A  0EFF               	movlw	255
 13540  00302C  6FAD               	movwf	(put_fat@val+2)& (0+255),b
 13541  00302E  0E0F               	movlw	15
 13542  003030  6FAE               	movwf	(put_fat@val+3)& (0+255),b
 13543  003032  EC39  F011         	call	_put_fat	;wreg free
 13544  003036  0100               	movlb	0	; () banked
 13545  003038  6FCA               	movwf	create_chain@res& (0+255),b
 13546                           
 13547                           ; BSR set to: 0
 13548                           ;ff.c: 1026: if (res == FR_OK && clst != 0) {
 13549  00303A  51CA               	movf	create_chain@res& (0+255),w,b
 13550  00303C  A4D8               	btfss	status,2,c
 13551  00303E  D01E               	goto	l1181
 13552                           
 13553                           ; BSR set to: 0
 13554  003040  51C2               	movf	create_chain@clst& (0+255),w,b
 13555  003042  11C3               	iorwf	(create_chain@clst+1)& (0+255),w,b
 13556  003044  11C4               	iorwf	(create_chain@clst+2)& (0+255),w,b
 13557  003046  11C5               	iorwf	(create_chain@clst+3)& (0+255),w,b
 13558  003048  B4D8               	btfsc	status,2,c
 13559  00304A  D018               	goto	l1181
 13560                           
 13561                           ; BSR set to: 0
 13562                           ;ff.c: 1027: res = put_fat(fs, clst, ncl);
 13563  00304C  C0C0  F0A5         	movff	create_chain@fs,put_fat@fs
 13564  003050  C0C1  F0A6         	movff	create_chain@fs+1,put_fat@fs+1
 13565  003054  C0C2  F0A7         	movff	create_chain@clst,put_fat@clst
 13566  003058  C0C3  F0A8         	movff	create_chain@clst+1,put_fat@clst+1
 13567  00305C  C0C4  F0A9         	movff	create_chain@clst+2,put_fat@clst+2
 13568  003060  C0C5  F0AA         	movff	create_chain@clst+3,put_fat@clst+3
 13569  003064  C0CF  F0AB         	movff	create_chain@ncl,put_fat@val
 13570  003068  C0D0  F0AC         	movff	create_chain@ncl+1,put_fat@val+1
 13571  00306C  C0D1  F0AD         	movff	create_chain@ncl+2,put_fat@val+2
 13572  003070  C0D2  F0AE         	movff	create_chain@ncl+3,put_fat@val+3
 13573  003074  EC39  F011         	call	_put_fat	;wreg free
 13574  003078  0100               	movlb	0	; () banked
 13575  00307A  6FCA               	movwf	create_chain@res& (0+255),b
 13576  00307C                     l1181:
 13577                           
 13578                           ; BSR set to: 0
 13579                           ;ff.c: 1028: }
 13580                           ;ff.c: 1029: if (res == FR_OK) {
 13581                           
 13582                           ; BSR set to: 0
 13583  00307C  51CA               	movf	create_chain@res& (0+255),w,b
 13584  00307E  A4D8               	btfss	status,2,c
 13585  003080  D031               	goto	l1182
 13586                           
 13587                           ; BSR set to: 0
 13588                           ;ff.c: 1030: fs->last_clust = ncl;
 13589  003082  EE20 F00A          	lfsr	2,10
 13590  003086  51C0               	movf	create_chain@fs& (0+255),w,b
 13591  003088  26D9               	addwf	fsr2l,f,c
 13592  00308A  51C1               	movf	(create_chain@fs+1)& (0+255),w,b
 13593  00308C  22DA               	addwfc	fsr2h,f,c
 13594  00308E  C0CF  FFDE         	movff	create_chain@ncl,postinc2
 13595  003092  C0D0  FFDE         	movff	create_chain@ncl+1,postinc2
 13596  003096  C0D1  FFDE         	movff	create_chain@ncl+2,postinc2
 13597  00309A  C0D2  FFDE         	movff	create_chain@ncl+3,postinc2
 13598                           
 13599                           ;ff.c: 1031: if (fs->free_clust != 0xFFFFFFFF) {
 13600  00309E  EE20 F00E          	lfsr	2,14
 13601  0030A2  51C0               	movf	create_chain@fs& (0+255),w,b
 13602  0030A4  26D9               	addwf	fsr2l,f,c
 13603  0030A6  51C1               	movf	(create_chain@fs+1)& (0+255),w,b
 13604  0030A8  22DA               	addwfc	fsr2h,f,c
 13605  0030AA  28DE               	incf	postinc2,w,c
 13606  0030AC  E107               	bnz	u14780
 13607  0030AE  28DE               	incf	postinc2,w,c
 13608  0030B0  E105               	bnz	u14780
 13609  0030B2  28DE               	incf	postinc2,w,c
 13610  0030B4  E103               	bnz	u14780
 13611  0030B6  28DE               	incf	postinc2,w,c
 13612  0030B8  B4D8               	btfsc	status,2,c
 13613  0030BA  D024               	goto	l1188
 13614  0030BC                     u14780:
 13615                           
 13616                           ; BSR set to: 0
 13617                           ;ff.c: 1032: fs->free_clust--;
 13618  0030BC  EE20 F00E          	lfsr	2,14
 13619  0030C0  51C0               	movf	create_chain@fs& (0+255),w,b
 13620  0030C2  26D9               	addwf	fsr2l,f,c
 13621  0030C4  51C1               	movf	(create_chain@fs+1)& (0+255),w,b
 13622  0030C6  22DA               	addwfc	fsr2h,f,c
 13623  0030C8  06DE               	decf	postinc2,f,c
 13624  0030CA  0E00               	movlw	0
 13625  0030CC  5ADE               	subwfb	postinc2,f,c
 13626  0030CE  5ADE               	subwfb	postinc2,f,c
 13627  0030D0  5ADE               	subwfb	postinc2,f,c
 13628                           
 13629                           ;ff.c: 1033: fs->fsi_flag |= 1;
 13630  0030D2  EE20 F005          	lfsr	2,5
 13631  0030D6  51C0               	movf	create_chain@fs& (0+255),w,b
 13632  0030D8  26D9               	addwf	fsr2l,f,c
 13633  0030DA  51C1               	movf	(create_chain@fs+1)& (0+255),w,b
 13634  0030DC  22DA               	addwfc	fsr2h,f,c
 13635  0030DE  0E00               	movlw	0
 13636  0030E0  80DB               	bsf	plusw2,0,c
 13637                           
 13638                           ; BSR set to: 0
 13639                           ;ff.c: 1034: }
 13640                           ;ff.c: 1035: } else {
 13641  0030E2  D010               	goto	l1188
 13642  0030E4                     l1182:
 13643                           
 13644                           ; BSR set to: 0
 13645                           ;ff.c: 1036: ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 13646                           
 13647                           ; BSR set to: 0
 13648  0030E4  05CA               	decf	create_chain@res& (0+255),w,b
 13649  0030E6  B4D8               	btfsc	status,2,c
 13650  0030E8  D009               	goto	l1186
 13651                           
 13652                           ; BSR set to: 0
 13653  0030EA  0E01               	movlw	1
 13654  0030EC  6FCF               	movwf	create_chain@ncl& (0+255),b
 13655  0030EE  0E00               	movlw	0
 13656  0030F0  6FD0               	movwf	(create_chain@ncl+1)& (0+255),b
 13657  0030F2  0E00               	movlw	0
 13658  0030F4  6FD1               	movwf	(create_chain@ncl+2)& (0+255),b
 13659  0030F6  0E00               	movlw	0
 13660  0030F8  6FD2               	movwf	(create_chain@ncl+3)& (0+255),b
 13661  0030FA  D004               	goto	l1188
 13662  0030FC                     l1186:
 13663                           
 13664                           ; BSR set to: 0
 13665  0030FC  69CF               	setf	create_chain@ncl& (0+255),b
 13666  0030FE  69D0               	setf	(create_chain@ncl+1)& (0+255),b
 13667  003100  69D1               	setf	(create_chain@ncl+2)& (0+255),b
 13668  003102  69D2               	setf	(create_chain@ncl+3)& (0+255),b
 13669  003104                     l1188:
 13670                           
 13671                           ; BSR set to: 0
 13672                           ;ff.c: 1037: }
 13673                           ;ff.c: 1039: return ncl;
 13674                           
 13675                           ; BSR set to: 0
 13676  003104  C0CF  F0C0         	movff	create_chain@ncl,?_create_chain
 13677  003108  C0D0  F0C1         	movff	create_chain@ncl+1,?_create_chain+1
 13678  00310C  C0D1  F0C2         	movff	create_chain@ncl+2,?_create_chain+2
 13679  003110  C0D2  F0C3         	movff	create_chain@ncl+3,?_create_chain+3
 13680                           
 13681                           ; BSR set to: 0
 13682  003114  0012               	return		;funcret
 13683  003116                     __end_of_create_chain:
 13684                           	opt stack 0
 13685                           tosu	equ	0xFFF
 13686                           tosh	equ	0xFFE
 13687                           tosl	equ	0xFFD
 13688                           pclath	equ	0xFFA
 13689                           tblptru	equ	0xFF8
 13690                           tblptrh	equ	0xFF7
 13691                           tblptrl	equ	0xFF6
 13692                           tablat	equ	0xFF5
 13693                           prodh	equ	0xFF4
 13694                           prodl	equ	0xFF3
 13695                           intcon	equ	0xFF2
 13696                           intcon2	equ	0xFF1
 13697                           intcon3	equ	0xFF0
 13698                           indf0	equ	0xFEF
 13699                           postinc0	equ	0xFEE
 13700                           fsr0h	equ	0xFEA
 13701                           fsr0l	equ	0xFE9
 13702                           wreg	equ	0xFE8
 13703                           indf1	equ	0xFE7
 13704                           postinc1	equ	0xFE6
 13705                           postdec1	equ	0xFE5
 13706                           fsr1h	equ	0xFE2
 13707                           fsr1l	equ	0xFE1
 13708                           indf2	equ	0xFDF
 13709                           postinc2	equ	0xFDE
 13710                           postdec2	equ	0xFDD
 13711                           plusw2	equ	0xFDB
 13712                           fsr2h	equ	0xFDA
 13713                           fsr2l	equ	0xFD9
 13714                           status	equ	0xFD8
 13715                           
 13716 ;; *************** function _put_fat *****************
 13717 ;; Defined at:
 13718 ;;		line 873 in file "bibliotecas/ff.c"
 13719 ;; Parameters:    Size  Location     Type
 13720 ;;  fs              2   69[BANK0 ] PTR struct .
 13721 ;;		 -> NULL(0), fs(558), 
 13722 ;;  clst            4   71[BANK0 ] unsigned long 
 13723 ;;  val             4   75[BANK0 ] unsigned long 
 13724 ;; Auto vars:     Size  Location     Type
 13725 ;;  p               2   94[BANK0 ] PTR unsigned char 
 13726 ;;		 -> fs.win(512), NULL(0), fs(558), 
 13727 ;;  bc              2   91[BANK0 ] unsigned int 
 13728 ;;  res             1   93[BANK0 ] enum E75
 13729 ;; Return value:  Size  Location     Type
 13730 ;;                  1    wreg      enum E75
 13731 ;; Registers used:
 13732 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13733 ;; Tracked objects:
 13734 ;;		On entry : 0/0
 13735 ;;		On exit  : 0/0
 13736 ;;		Unchanged: 0/0
 13737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13738 ;;      Params:         0      10       0       0       0       0       0       0       0
 13739 ;;      Locals:         0       9       0       0       0       0       0       0       0
 13740 ;;      Temps:          0       8       0       0       0       0       0       0       0
 13741 ;;      Totals:         0      27       0       0       0       0       0       0       0
 13742 ;;Total ram usage:       27 bytes
 13743 ;; Hardware stack levels used:    1
 13744 ;; Hardware stack levels required when called:   11
 13745 ;; This function calls:
 13746 ;;		_move_window
 13747 ;; This function is called by:
 13748 ;;		_remove_chain
 13749 ;;		_create_chain
 13750 ;; This function uses a non-reentrant model
 13751 ;;
 13752                           
 13753                           	psect	text36
 13754  002272                     __ptext36:
 13755                           	opt stack 0
 13756  002272                     _put_fat:
 13757                           	opt stack 15
 13758                           
 13759                           ;ff.c: 879: UINT bc;
 13760                           ;ff.c: 880: BYTE *p;
 13761                           ;ff.c: 881: FRESULT res;
 13762                           ;ff.c: 884: if (clst < 2 || clst >= fs->n_fatent) {
 13763                           
 13764                           ; BSR set to: 0
 13765                           ;incstack = 0
 13766  002272  0100               	movlb	0	; () banked
 13767  002274  51AA               	movf	(put_fat@clst+3)& (0+255),w,b
 13768  002276  11A9               	iorwf	(put_fat@clst+2)& (0+255),w,b
 13769  002278  11A8               	iorwf	(put_fat@clst+1)& (0+255),w,b
 13770  00227A  E104               	bnz	u14470
 13771  00227C  0E02               	movlw	2
 13772  00227E  5DA7               	subwf	put_fat@clst& (0+255),w,b
 13773  002280  A0D8               	btfss	status,0,c
 13774  002282  D1E7               	goto	l1144
 13775  002284                     u14470:
 13776                           
 13777                           ; BSR set to: 0
 13778  002284  EE20 F012          	lfsr	2,18
 13779  002288  51A5               	movf	put_fat@fs& (0+255),w,b
 13780  00228A  26D9               	addwf	fsr2l,f,c
 13781  00228C  51A6               	movf	(put_fat@fs+1)& (0+255),w,b
 13782  00228E  22DA               	addwfc	fsr2h,f,c
 13783  002290  50DE               	movf	postinc2,w,c
 13784  002292  5DA7               	subwf	put_fat@clst& (0+255),w,b
 13785  002294  50DE               	movf	postinc2,w,c
 13786  002296  59A8               	subwfb	(put_fat@clst+1)& (0+255),w,b
 13787  002298  50DE               	movf	postinc2,w,c
 13788  00229A  59A9               	subwfb	(put_fat@clst+2)& (0+255),w,b
 13789  00229C  50DE               	movf	postinc2,w,c
 13790  00229E  59AA               	subwfb	(put_fat@clst+3)& (0+255),w,b
 13791  0022A0  A0D8               	btfss	status,0,c
 13792  0022A2  D1DA               	goto	l1127
 13793                           
 13794                           ; BSR set to: 0
 13795  0022A4  D1D6               	goto	l1144
 13796  0022A6                     l1128:
 13797                           
 13798                           ; BSR set to: 0
 13799                           ;ff.c: 890: bc = (UINT)clst; bc += bc / 2;
 13800  0022A6  C0A7  F0BB         	movff	put_fat@clst,put_fat@bc
 13801  0022AA  C0A8  F0BC         	movff	put_fat@clst+1,put_fat@bc+1
 13802                           
 13803                           ; BSR set to: 0
 13804  0022AE  90D8               	bcf	status,0,c
 13805  0022B0  31BC               	rrcf	(put_fat@bc+1)& (0+255),w,b
 13806  0022B2  6FB0               	movwf	(??_put_fat+1)& (0+255),b
 13807  0022B4  31BB               	rrcf	put_fat@bc& (0+255),w,b
 13808  0022B6  6FAF               	movwf	??_put_fat& (0+255),b
 13809  0022B8  51AF               	movf	??_put_fat& (0+255),w,b
 13810  0022BA  27BB               	addwf	put_fat@bc& (0+255),f,b
 13811  0022BC  51B0               	movf	(??_put_fat+1)& (0+255),w,b
 13812  0022BE  23BC               	addwfc	(put_fat@bc+1)& (0+255),f,b
 13813                           
 13814                           ; BSR set to: 0
 13815                           ;ff.c: 891: res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
 13816  0022C0  C0A5  F09A         	movff	put_fat@fs,move_window@fs
 13817  0022C4  C0A6  F09B         	movff	put_fat@fs+1,move_window@fs+1
 13818  0022C8  EE20 F01E          	lfsr	2,30
 13819  0022CC  51A5               	movf	put_fat@fs& (0+255),w,b
 13820  0022CE  26D9               	addwf	fsr2l,f,c
 13821  0022D0  51A6               	movf	(put_fat@fs+1)& (0+255),w,b
 13822  0022D2  22DA               	addwfc	fsr2h,f,c
 13823  0022D4  CFDE F0AF          	movff	postinc2,??_put_fat
 13824  0022D8  CFDE F0B0          	movff	postinc2,??_put_fat+1
 13825  0022DC  CFDE F0B1          	movff	postinc2,??_put_fat+2
 13826  0022E0  CFDE F0B2          	movff	postinc2,??_put_fat+3
 13827  0022E4  C0BB  F0B3         	movff	put_fat@bc,??_put_fat+4
 13828  0022E8  C0BC  F0B4         	movff	put_fat@bc+1,??_put_fat+5
 13829  0022EC  0E09               	movlw	9
 13830  0022EE  6FB5               	movwf	(??_put_fat+6)& (0+255),b
 13831  0022F0                     u14495:
 13832  0022F0  90D8               	bcf	status,0,c
 13833  0022F2  33B4               	rrcf	(??_put_fat+5)& (0+255),f,b
 13834  0022F4  33B3               	rrcf	(??_put_fat+4)& (0+255),f,b
 13835  0022F6  2FB5               	decfsz	(??_put_fat+6)& (0+255),f,b
 13836  0022F8  D7FB               	goto	u14495
 13837  0022FA  51B3               	movf	(??_put_fat+4)& (0+255),w,b
 13838  0022FC  25AF               	addwf	??_put_fat& (0+255),w,b
 13839  0022FE  6F9C               	movwf	move_window@sector& (0+255),b
 13840  002300  51B4               	movf	(??_put_fat+5)& (0+255),w,b
 13841  002302  21B0               	addwfc	(??_put_fat+1)& (0+255),w,b
 13842  002304  6F9D               	movwf	(move_window@sector+1)& (0+255),b
 13843  002306  0E00               	movlw	0
 13844  002308  21B1               	addwfc	(??_put_fat+2)& (0+255),w,b
 13845  00230A  6F9E               	movwf	(move_window@sector+2)& (0+255),b
 13846  00230C  0E00               	movlw	0
 13847  00230E  21B2               	addwfc	(??_put_fat+3)& (0+255),w,b
 13848  002310  6F9F               	movwf	(move_window@sector+3)& (0+255),b
 13849  002312  EC0A  F027         	call	_move_window	;wreg free
 13850  002316  0100               	movlb	0	; () banked
 13851  002318  6FBD               	movwf	put_fat@res& (0+255),b
 13852                           
 13853                           ; BSR set to: 0
 13854                           ;ff.c: 892: if (res != FR_OK) break;
 13855  00231A  51BD               	movf	put_fat@res& (0+255),w,b
 13856  00231C  A4D8               	btfss	status,2,c
 13857  00231E  D1AB               	goto	l1130
 13858                           
 13859                           ; BSR set to: 0
 13860                           ;ff.c: 893: p = &fs->win[bc++ % ((UINT)512)];
 13861                           
 13862                           ; BSR set to: 0
 13863                           
 13864                           ; BSR set to: 0
 13865  002320  0EFF               	movlw	255
 13866  002322  6FAF               	movwf	??_put_fat& (0+255),b
 13867  002324  0E01               	movlw	1
 13868  002326  6FB0               	movwf	(??_put_fat+1)& (0+255),b
 13869  002328  C0BB  F0B1         	movff	put_fat@bc,??_put_fat+2
 13870  00232C  C0BC  F0B2         	movff	put_fat@bc+1,??_put_fat+3
 13871  002330  51AF               	movf	??_put_fat& (0+255),w,b
 13872  002332  17B1               	andwf	(??_put_fat+2)& (0+255),f,b
 13873  002334  51B0               	movf	(??_put_fat+1)& (0+255),w,b
 13874  002336  17B2               	andwf	(??_put_fat+3)& (0+255),f,b
 13875  002338  0E2E               	movlw	46
 13876  00233A  27B1               	addwf	(??_put_fat+2)& (0+255),f,b
 13877  00233C  0E00               	movlw	0
 13878  00233E  23B2               	addwfc	(??_put_fat+3)& (0+255),f,b
 13879  002340  51B1               	movf	(??_put_fat+2)& (0+255),w,b
 13880  002342  25A5               	addwf	put_fat@fs& (0+255),w,b
 13881  002344  6FBE               	movwf	put_fat@p& (0+255),b
 13882  002346  51B2               	movf	(??_put_fat+3)& (0+255),w,b
 13883  002348  21A6               	addwfc	(put_fat@fs+1)& (0+255),w,b
 13884  00234A  6FBF               	movwf	(put_fat@p+1)& (0+255),b
 13885                           
 13886                           ; BSR set to: 0
 13887  00234C  4BBB               	infsnz	put_fat@bc& (0+255),f,b
 13888  00234E  2BBC               	incf	(put_fat@bc+1)& (0+255),f,b
 13889                           
 13890                           ; BSR set to: 0
 13891                           ;ff.c: 894: *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 13892  002350  B1A7               	btfsc	put_fat@clst& (0+255),0,b
 13893  002352  D004               	goto	l1132
 13894                           
 13895                           ; BSR set to: 0
 13896  002354  C0AB  F0B7         	movff	put_fat@val,_put_fat$2519
 13897  002358  6BB8               	clrf	(_put_fat$2519+1)& (0+255),b
 13898  00235A  D01A               	goto	l1134
 13899  00235C                     l1132:
 13900                           
 13901                           ; BSR set to: 0
 13902                           
 13903                           ; BSR set to: 0
 13904  00235C  51AB               	movf	put_fat@val& (0+255),w,b
 13905  00235E  6FAF               	movwf	??_put_fat& (0+255),b
 13906  002360  6BB0               	clrf	(??_put_fat+1)& (0+255),b
 13907  002362  3BAF               	swapf	??_put_fat& (0+255),f,b
 13908  002364  3BB0               	swapf	(??_put_fat+1)& (0+255),f,b
 13909  002366  0EF0               	movlw	240
 13910  002368  17B0               	andwf	(??_put_fat+1)& (0+255),f,b
 13911  00236A  51AF               	movf	??_put_fat& (0+255),w,b
 13912  00236C  0B0F               	andlw	15
 13913  00236E  13B0               	iorwf	(??_put_fat+1)& (0+255),f,b
 13914  002370  0EF0               	movlw	240
 13915  002372  17AF               	andwf	??_put_fat& (0+255),f,b
 13916  002374  C0BE  FFD9         	movff	put_fat@p,fsr2l
 13917  002378  C0BF  FFDA         	movff	put_fat@p+1,fsr2h
 13918  00237C  50DF               	movf	indf2,w,c
 13919  00237E  0B0F               	andlw	15
 13920  002380  6FB1               	movwf	(??_put_fat+2)& (0+255),b
 13921  002382  6BB2               	clrf	(??_put_fat+3)& (0+255),b
 13922  002384  51AF               	movf	??_put_fat& (0+255),w,b
 13923  002386  11B1               	iorwf	(??_put_fat+2)& (0+255),w,b
 13924  002388  6FB7               	movwf	_put_fat$2519& (0+255),b
 13925  00238A  51B0               	movf	(??_put_fat+1)& (0+255),w,b
 13926  00238C  11B2               	iorwf	(??_put_fat+3)& (0+255),w,b
 13927  00238E  6FB8               	movwf	(_put_fat$2519+1)& (0+255),b
 13928  002390                     l1134:
 13929                           
 13930                           ; BSR set to: 0
 13931                           
 13932                           ; BSR set to: 0
 13933  002390  C0BE  FFD9         	movff	put_fat@p,fsr2l
 13934  002394  C0BF  FFDA         	movff	put_fat@p+1,fsr2h
 13935  002398  C0B7  FFDF         	movff	_put_fat$2519,indf2
 13936                           
 13937                           ; BSR set to: 0
 13938                           ;ff.c: 895: fs->wflag = 1;
 13939  00239C  EE20 F004          	lfsr	2,4
 13940  0023A0  51A5               	movf	put_fat@fs& (0+255),w,b
 13941  0023A2  26D9               	addwf	fsr2l,f,c
 13942  0023A4  51A6               	movf	(put_fat@fs+1)& (0+255),w,b
 13943  0023A6  22DA               	addwfc	fsr2h,f,c
 13944  0023A8  0E01               	movlw	1
 13945  0023AA  6EDF               	movwf	indf2,c
 13946                           
 13947                           ; BSR set to: 0
 13948                           ;ff.c: 896: res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
 13949  0023AC  C0A5  F09A         	movff	put_fat@fs,move_window@fs
 13950  0023B0  C0A6  F09B         	movff	put_fat@fs+1,move_window@fs+1
 13951  0023B4  EE20 F01E          	lfsr	2,30
 13952  0023B8  51A5               	movf	put_fat@fs& (0+255),w,b
 13953  0023BA  26D9               	addwf	fsr2l,f,c
 13954  0023BC  51A6               	movf	(put_fat@fs+1)& (0+255),w,b
 13955  0023BE  22DA               	addwfc	fsr2h,f,c
 13956  0023C0  CFDE F0AF          	movff	postinc2,??_put_fat
 13957  0023C4  CFDE F0B0          	movff	postinc2,??_put_fat+1
 13958  0023C8  CFDE F0B1          	movff	postinc2,??_put_fat+2
 13959  0023CC  CFDE F0B2          	movff	postinc2,??_put_fat+3
 13960  0023D0  C0BB  F0B3         	movff	put_fat@bc,??_put_fat+4
 13961  0023D4  C0BC  F0B4         	movff	put_fat@bc+1,??_put_fat+5
 13962  0023D8  0E09               	movlw	9
 13963  0023DA  6FB5               	movwf	(??_put_fat+6)& (0+255),b
 13964  0023DC                     u14525:
 13965  0023DC  90D8               	bcf	status,0,c
 13966  0023DE  33B4               	rrcf	(??_put_fat+5)& (0+255),f,b
 13967  0023E0  33B3               	rrcf	(??_put_fat+4)& (0+255),f,b
 13968  0023E2  2FB5               	decfsz	(??_put_fat+6)& (0+255),f,b
 13969  0023E4  D7FB               	goto	u14525
 13970  0023E6  51B3               	movf	(??_put_fat+4)& (0+255),w,b
 13971  0023E8  25AF               	addwf	??_put_fat& (0+255),w,b
 13972  0023EA  6F9C               	movwf	move_window@sector& (0+255),b
 13973  0023EC  51B4               	movf	(??_put_fat+5)& (0+255),w,b
 13974  0023EE  21B0               	addwfc	(??_put_fat+1)& (0+255),w,b
 13975  0023F0  6F9D               	movwf	(move_window@sector+1)& (0+255),b
 13976  0023F2  0E00               	movlw	0
 13977  0023F4  21B1               	addwfc	(??_put_fat+2)& (0+255),w,b
 13978  0023F6  6F9E               	movwf	(move_window@sector+2)& (0+255),b
 13979  0023F8  0E00               	movlw	0
 13980  0023FA  21B2               	addwfc	(??_put_fat+3)& (0+255),w,b
 13981  0023FC  6F9F               	movwf	(move_window@sector+3)& (0+255),b
 13982  0023FE  EC0A  F027         	call	_move_window	;wreg free
 13983  002402  0100               	movlb	0	; () banked
 13984  002404  6FBD               	movwf	put_fat@res& (0+255),b
 13985                           
 13986                           ; BSR set to: 0
 13987                           ;ff.c: 897: if (res != FR_OK) break;
 13988  002406  51BD               	movf	put_fat@res& (0+255),w,b
 13989  002408  A4D8               	btfss	status,2,c
 13990  00240A  D135               	goto	l1130
 13991                           
 13992                           ; BSR set to: 0
 13993                           ;ff.c: 898: p = &fs->win[bc % ((UINT)512)];
 13994                           
 13995                           ; BSR set to: 0
 13996                           
 13997                           ; BSR set to: 0
 13998  00240C  0EFF               	movlw	255
 13999  00240E  6FAF               	movwf	??_put_fat& (0+255),b
 14000  002410  0E01               	movlw	1
 14001  002412  6FB0               	movwf	(??_put_fat+1)& (0+255),b
 14002  002414  C0BB  F0B1         	movff	put_fat@bc,??_put_fat+2
 14003  002418  C0BC  F0B2         	movff	put_fat@bc+1,??_put_fat+3
 14004  00241C  51AF               	movf	??_put_fat& (0+255),w,b
 14005  00241E  17B1               	andwf	(??_put_fat+2)& (0+255),f,b
 14006  002420  51B0               	movf	(??_put_fat+1)& (0+255),w,b
 14007  002422  17B2               	andwf	(??_put_fat+3)& (0+255),f,b
 14008  002424  0E2E               	movlw	46
 14009  002426  27B1               	addwf	(??_put_fat+2)& (0+255),f,b
 14010  002428  0E00               	movlw	0
 14011  00242A  23B2               	addwfc	(??_put_fat+3)& (0+255),f,b
 14012  00242C  51B1               	movf	(??_put_fat+2)& (0+255),w,b
 14013  00242E  25A5               	addwf	put_fat@fs& (0+255),w,b
 14014  002430  6FBE               	movwf	put_fat@p& (0+255),b
 14015  002432  51B2               	movf	(??_put_fat+3)& (0+255),w,b
 14016  002434  21A6               	addwfc	(put_fat@fs+1)& (0+255),w,b
 14017  002436  6FBF               	movwf	(put_fat@p+1)& (0+255),b
 14018                           
 14019                           ; BSR set to: 0
 14020                           ;ff.c: 899: *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F
      +                          ));
 14021  002438  B1A7               	btfsc	put_fat@clst& (0+255),0,b
 14022  00243A  D01B               	goto	l1137
 14023                           
 14024                           ; BSR set to: 0
 14025  00243C  C0AB  F0AF         	movff	put_fat@val,??_put_fat
 14026  002440  C0AC  F0B0         	movff	put_fat@val+1,??_put_fat+1
 14027  002444  C0AD  F0B1         	movff	put_fat@val+2,??_put_fat+2
 14028  002448  C0AE  F0B2         	movff	put_fat@val+3,??_put_fat+3
 14029  00244C  C0B0  F0AF         	movff	??_put_fat+1,??_put_fat
 14030  002450  C0B1  F0B0         	movff	??_put_fat+2,??_put_fat+1
 14031  002454  C0B2  F0B1         	movff	??_put_fat+3,??_put_fat+2
 14032  002458  6BB2               	clrf	(??_put_fat+3)& (0+255),b
 14033  00245A  0E0F               	movlw	15
 14034  00245C  17AF               	andwf	??_put_fat& (0+255),f,b
 14035  00245E  C0BE  FFD9         	movff	put_fat@p,fsr2l
 14036  002462  C0BF  FFDA         	movff	put_fat@p+1,fsr2h
 14037  002466  50DF               	movf	indf2,w,c
 14038  002468  0BF0               	andlw	240
 14039  00246A  11AF               	iorwf	??_put_fat& (0+255),w,b
 14040  00246C  6FB3               	movwf	(??_put_fat+4)& (0+255),b
 14041  00246E  51B3               	movf	(??_put_fat+4)& (0+255),w,b
 14042  002470  D012               	goto	L12
 14043  002472                     l1137:
 14044                           
 14045                           ; BSR set to: 0
 14046                           
 14047                           ; BSR set to: 0
 14048  002472  C0AB  F0AF         	movff	put_fat@val,??_put_fat
 14049  002476  C0AC  F0B0         	movff	put_fat@val+1,??_put_fat+1
 14050  00247A  C0AD  F0B1         	movff	put_fat@val+2,??_put_fat+2
 14051  00247E  C0AE  F0B2         	movff	put_fat@val+3,??_put_fat+3
 14052  002482  0E05               	movlw	5
 14053  002484  D005               	goto	u14550
 14054  002486                     u14555:
 14055  002486  90D8               	bcf	status,0,c
 14056  002488  33B2               	rrcf	(??_put_fat+3)& (0+255),f,b
 14057  00248A  33B1               	rrcf	(??_put_fat+2)& (0+255),f,b
 14058  00248C  33B0               	rrcf	(??_put_fat+1)& (0+255),f,b
 14059  00248E  33AF               	rrcf	??_put_fat& (0+255),f,b
 14060  002490                     u14550:
 14061  002490  2EE8               	decfsz	wreg,f,c
 14062  002492  D7F9               	goto	u14555
 14063  002494  51AF               	movf	??_put_fat& (0+255),w,b
 14064  002496                     L12:
 14065  002496  6FB9               	movwf	_put_fat$2520& (0+255),b
 14066  002498  6BBA               	clrf	(_put_fat$2520+1)& (0+255),b
 14067                           
 14068                           ; BSR set to: 0
 14069                           
 14070                           ; BSR set to: 0
 14071  00249A  C0BE  FFD9         	movff	put_fat@p,fsr2l
 14072  00249E  C0BF  FFDA         	movff	put_fat@p+1,fsr2h
 14073  0024A2  C0B9  FFDF         	movff	_put_fat$2520,indf2
 14074  0024A6  D0CC               	goto	l11095
 14075  0024A8                     
 14076                           ; BSR set to: 0
 14077                           ;ff.c: 904: res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2)));
 14078                           
 14079                           ; BSR set to: 0
 14080  0024A8  C0A5  F09A         	movff	put_fat@fs,move_window@fs
 14081  0024AC  C0A6  F09B         	movff	put_fat@fs+1,move_window@fs+1
 14082  0024B0  EE20 F01E          	lfsr	2,30
 14083  0024B4  51A5               	movf	put_fat@fs& (0+255),w,b
 14084  0024B6  26D9               	addwf	fsr2l,f,c
 14085  0024B8  51A6               	movf	(put_fat@fs+1)& (0+255),w,b
 14086  0024BA  22DA               	addwfc	fsr2h,f,c
 14087  0024BC  CFDE F0AF          	movff	postinc2,??_put_fat
 14088  0024C0  CFDE F0B0          	movff	postinc2,??_put_fat+1
 14089  0024C4  CFDE F0B1          	movff	postinc2,??_put_fat+2
 14090  0024C8  CFDE F0B2          	movff	postinc2,??_put_fat+3
 14091  0024CC  C0A7  F0B3         	movff	put_fat@clst,??_put_fat+4
 14092  0024D0  C0A8  F0B4         	movff	put_fat@clst+1,??_put_fat+5
 14093  0024D4  C0A9  F0B5         	movff	put_fat@clst+2,??_put_fat+6
 14094  0024D8  C0AA  F0B6         	movff	put_fat@clst+3,??_put_fat+7
 14095  0024DC  C0B4  F0B3         	movff	??_put_fat+5,??_put_fat+4
 14096  0024E0  C0B5  F0B4         	movff	??_put_fat+6,??_put_fat+5
 14097  0024E4  C0B6  F0B5         	movff	??_put_fat+7,??_put_fat+6
 14098  0024E8  6BB6               	clrf	(??_put_fat+7)& (0+255),b
 14099  0024EA  51AF               	movf	??_put_fat& (0+255),w,b
 14100  0024EC  25B3               	addwf	(??_put_fat+4)& (0+255),w,b
 14101  0024EE  6F9C               	movwf	move_window@sector& (0+255),b
 14102  0024F0  51B0               	movf	(??_put_fat+1)& (0+255),w,b
 14103  0024F2  21B4               	addwfc	(??_put_fat+5)& (0+255),w,b
 14104  0024F4  6F9D               	movwf	(move_window@sector+1)& (0+255),b
 14105  0024F6  51B1               	movf	(??_put_fat+2)& (0+255),w,b
 14106  0024F8  21B5               	addwfc	(??_put_fat+6)& (0+255),w,b
 14107  0024FA  6F9E               	movwf	(move_window@sector+2)& (0+255),b
 14108  0024FC  51B2               	movf	(??_put_fat+3)& (0+255),w,b
 14109  0024FE  21B6               	addwfc	(??_put_fat+7)& (0+255),w,b
 14110  002500  6F9F               	movwf	(move_window@sector+3)& (0+255),b
 14111  002502  EC0A  F027         	call	_move_window	;wreg free
 14112  002506  0100               	movlb	0	; () banked
 14113  002508  6FBD               	movwf	put_fat@res& (0+255),b
 14114                           
 14115                           ; BSR set to: 0
 14116                           ;ff.c: 905: if (res != FR_OK) break;
 14117  00250A  51BD               	movf	put_fat@res& (0+255),w,b
 14118  00250C  A4D8               	btfss	status,2,c
 14119  00250E  D0B3               	goto	l1130
 14120                           
 14121                           ; BSR set to: 0
 14122                           ;ff.c: 906: p = &fs->win[clst * 2 % ((UINT)512)];
 14123                           
 14124                           ; BSR set to: 0
 14125                           
 14126                           ; BSR set to: 0
 14127  002510  0EFF               	movlw	255
 14128  002512  6FAF               	movwf	??_put_fat& (0+255),b
 14129  002514  0E01               	movlw	1
 14130  002516  6FB0               	movwf	(??_put_fat+1)& (0+255),b
 14131  002518  C0A7  F0B1         	movff	put_fat@clst,??_put_fat+2
 14132  00251C  C0A8  F0B2         	movff	put_fat@clst+1,??_put_fat+3
 14133  002520  90D8               	bcf	status,0,c
 14134  002522  37B1               	rlcf	(??_put_fat+2)& (0+255),f,b
 14135  002524  37B2               	rlcf	(??_put_fat+3)& (0+255),f,b
 14136  002526  51AF               	movf	??_put_fat& (0+255),w,b
 14137  002528  17B1               	andwf	(??_put_fat+2)& (0+255),f,b
 14138  00252A  51B0               	movf	(??_put_fat+1)& (0+255),w,b
 14139  00252C  17B2               	andwf	(??_put_fat+3)& (0+255),f,b
 14140  00252E  0E2E               	movlw	46
 14141  002530  27B1               	addwf	(??_put_fat+2)& (0+255),f,b
 14142  002532  0E00               	movlw	0
 14143  002534  23B2               	addwfc	(??_put_fat+3)& (0+255),f,b
 14144  002536  51B1               	movf	(??_put_fat+2)& (0+255),w,b
 14145  002538  25A5               	addwf	put_fat@fs& (0+255),w,b
 14146  00253A  6FBE               	movwf	put_fat@p& (0+255),b
 14147  00253C  51B2               	movf	(??_put_fat+3)& (0+255),w,b
 14148  00253E  21A6               	addwfc	(put_fat@fs+1)& (0+255),w,b
 14149  002540  6FBF               	movwf	(put_fat@p+1)& (0+255),b
 14150                           
 14151                           ; BSR set to: 0
 14152                           ;ff.c: 907: *(WORD*)(BYTE*)(p)=(WORD)((WORD)val);
 14153  002542  C0BE  FFD9         	movff	put_fat@p,fsr2l
 14154  002546  C0BF  FFDA         	movff	put_fat@p+1,fsr2h
 14155  00254A  C0AB  FFDE         	movff	put_fat@val,postinc2
 14156  00254E  C0AC  FFDD         	movff	put_fat@val+1,postdec2
 14157  002552  D076               	goto	l11095
 14158  002554                     
 14159                           ; BSR set to: 0
 14160                           ;ff.c: 912: res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4)));
 14161                           
 14162                           ; BSR set to: 0
 14163  002554  C0A5  F09A         	movff	put_fat@fs,move_window@fs
 14164  002558  C0A6  F09B         	movff	put_fat@fs+1,move_window@fs+1
 14165  00255C  EE20 F01E          	lfsr	2,30
 14166  002560  51A5               	movf	put_fat@fs& (0+255),w,b
 14167  002562  26D9               	addwf	fsr2l,f,c
 14168  002564  51A6               	movf	(put_fat@fs+1)& (0+255),w,b
 14169  002566  22DA               	addwfc	fsr2h,f,c
 14170  002568  CFDE F0AF          	movff	postinc2,??_put_fat
 14171  00256C  CFDE F0B0          	movff	postinc2,??_put_fat+1
 14172  002570  CFDE F0B1          	movff	postinc2,??_put_fat+2
 14173  002574  CFDE F0B2          	movff	postinc2,??_put_fat+3
 14174  002578  C0A7  F0B3         	movff	put_fat@clst,??_put_fat+4
 14175  00257C  C0A8  F0B4         	movff	put_fat@clst+1,??_put_fat+5
 14176  002580  C0A9  F0B5         	movff	put_fat@clst+2,??_put_fat+6
 14177  002584  C0AA  F0B6         	movff	put_fat@clst+3,??_put_fat+7
 14178  002588  0E08               	movlw	8
 14179  00258A  D005               	goto	u14570
 14180  00258C                     u14575:
 14181  00258C  90D8               	bcf	status,0,c
 14182  00258E  33B6               	rrcf	(??_put_fat+7)& (0+255),f,b
 14183  002590  33B5               	rrcf	(??_put_fat+6)& (0+255),f,b
 14184  002592  33B4               	rrcf	(??_put_fat+5)& (0+255),f,b
 14185  002594  33B3               	rrcf	(??_put_fat+4)& (0+255),f,b
 14186  002596                     u14570:
 14187  002596  2EE8               	decfsz	wreg,f,c
 14188  002598  D7F9               	goto	u14575
 14189  00259A  51AF               	movf	??_put_fat& (0+255),w,b
 14190  00259C  25B3               	addwf	(??_put_fat+4)& (0+255),w,b
 14191  00259E  6F9C               	movwf	move_window@sector& (0+255),b
 14192  0025A0  51B0               	movf	(??_put_fat+1)& (0+255),w,b
 14193  0025A2  21B4               	addwfc	(??_put_fat+5)& (0+255),w,b
 14194  0025A4  6F9D               	movwf	(move_window@sector+1)& (0+255),b
 14195  0025A6  51B1               	movf	(??_put_fat+2)& (0+255),w,b
 14196  0025A8  21B5               	addwfc	(??_put_fat+6)& (0+255),w,b
 14197  0025AA  6F9E               	movwf	(move_window@sector+2)& (0+255),b
 14198  0025AC  51B2               	movf	(??_put_fat+3)& (0+255),w,b
 14199  0025AE  21B6               	addwfc	(??_put_fat+7)& (0+255),w,b
 14200  0025B0  6F9F               	movwf	(move_window@sector+3)& (0+255),b
 14201  0025B2  EC0A  F027         	call	_move_window	;wreg free
 14202  0025B6  0100               	movlb	0	; () banked
 14203  0025B8  6FBD               	movwf	put_fat@res& (0+255),b
 14204                           
 14205                           ; BSR set to: 0
 14206                           ;ff.c: 913: if (res != FR_OK) break;
 14207  0025BA  51BD               	movf	put_fat@res& (0+255),w,b
 14208  0025BC  A4D8               	btfss	status,2,c
 14209  0025BE  D05B               	goto	l1130
 14210                           
 14211                           ; BSR set to: 0
 14212                           ;ff.c: 914: p = &fs->win[clst * 4 % ((UINT)512)];
 14213                           
 14214                           ; BSR set to: 0
 14215                           
 14216                           ; BSR set to: 0
 14217  0025C0  0EFF               	movlw	255
 14218  0025C2  6FAF               	movwf	??_put_fat& (0+255),b
 14219  0025C4  0E01               	movlw	1
 14220  0025C6  6FB0               	movwf	(??_put_fat+1)& (0+255),b
 14221  0025C8  C0A7  F0B1         	movff	put_fat@clst,??_put_fat+2
 14222  0025CC  C0A8  F0B2         	movff	put_fat@clst+1,??_put_fat+3
 14223  0025D0  90D8               	bcf	status,0,c
 14224  0025D2  37B1               	rlcf	(??_put_fat+2)& (0+255),f,b
 14225  0025D4  37B2               	rlcf	(??_put_fat+3)& (0+255),f,b
 14226  0025D6  90D8               	bcf	status,0,c
 14227  0025D8  37B1               	rlcf	(??_put_fat+2)& (0+255),f,b
 14228  0025DA  37B2               	rlcf	(??_put_fat+3)& (0+255),f,b
 14229  0025DC  51AF               	movf	??_put_fat& (0+255),w,b
 14230  0025DE  17B1               	andwf	(??_put_fat+2)& (0+255),f,b
 14231  0025E0  51B0               	movf	(??_put_fat+1)& (0+255),w,b
 14232  0025E2  17B2               	andwf	(??_put_fat+3)& (0+255),f,b
 14233  0025E4  0E2E               	movlw	46
 14234  0025E6  27B1               	addwf	(??_put_fat+2)& (0+255),f,b
 14235  0025E8  0E00               	movlw	0
 14236  0025EA  23B2               	addwfc	(??_put_fat+3)& (0+255),f,b
 14237  0025EC  51B1               	movf	(??_put_fat+2)& (0+255),w,b
 14238  0025EE  25A5               	addwf	put_fat@fs& (0+255),w,b
 14239  0025F0  6FBE               	movwf	put_fat@p& (0+255),b
 14240  0025F2  51B2               	movf	(??_put_fat+3)& (0+255),w,b
 14241  0025F4  21A6               	addwfc	(put_fat@fs+1)& (0+255),w,b
 14242  0025F6  6FBF               	movwf	(put_fat@p+1)& (0+255),b
 14243                           
 14244                           ; BSR set to: 0
 14245                           ;ff.c: 915: val |= (DWORD)(*(DWORD*)(BYTE*)(p)) & 0xF0000000;
 14246  0025F8  C0BE  FFD9         	movff	put_fat@p,fsr2l
 14247  0025FC  C0BF  FFDA         	movff	put_fat@p+1,fsr2h
 14248  002600  0E00               	movlw	0
 14249  002602  14DE               	andwf	postinc2,w,c
 14250  002604  6FAF               	movwf	??_put_fat& (0+255),b
 14251  002606  0E00               	movlw	0
 14252  002608  14DE               	andwf	postinc2,w,c
 14253  00260A  6FB0               	movwf	(??_put_fat+1)& (0+255),b
 14254  00260C  0E00               	movlw	0
 14255  00260E  14DE               	andwf	postinc2,w,c
 14256  002610  6FB1               	movwf	(??_put_fat+2)& (0+255),b
 14257  002612  0EF0               	movlw	240
 14258  002614  14DE               	andwf	postinc2,w,c
 14259  002616  6FB2               	movwf	(??_put_fat+3)& (0+255),b
 14260  002618  51AF               	movf	??_put_fat& (0+255),w,b
 14261  00261A  13AB               	iorwf	put_fat@val& (0+255),f,b
 14262  00261C  51B0               	movf	(??_put_fat+1)& (0+255),w,b
 14263  00261E  13AC               	iorwf	(put_fat@val+1)& (0+255),f,b
 14264  002620  51B1               	movf	(??_put_fat+2)& (0+255),w,b
 14265  002622  13AD               	iorwf	(put_fat@val+2)& (0+255),f,b
 14266  002624  51B2               	movf	(??_put_fat+3)& (0+255),w,b
 14267  002626  13AE               	iorwf	(put_fat@val+3)& (0+255),f,b
 14268                           
 14269                           ;ff.c: 916: *(DWORD*)(BYTE*)(p)=(DWORD)(val);
 14270  002628  C0BE  FFD9         	movff	put_fat@p,fsr2l
 14271  00262C  C0BF  FFDA         	movff	put_fat@p+1,fsr2h
 14272  002630  C0AB  FFDE         	movff	put_fat@val,postinc2
 14273  002634  C0AC  FFDE         	movff	put_fat@val+1,postinc2
 14274  002638  C0AD  FFDE         	movff	put_fat@val+2,postinc2
 14275  00263C  C0AE  FFDE         	movff	put_fat@val+3,postinc2
 14276  002640                     l11095:
 14277                           
 14278                           ; BSR set to: 0
 14279                           ;ff.c: 917: fs->wflag = 1;
 14280  002640  EE20 F004          	lfsr	2,4
 14281  002644  51A5               	movf	put_fat@fs& (0+255),w,b
 14282  002646  26D9               	addwf	fsr2l,f,c
 14283  002648  51A6               	movf	(put_fat@fs+1)& (0+255),w,b
 14284  00264A  22DA               	addwfc	fsr2h,f,c
 14285  00264C  0E01               	movlw	1
 14286  00264E  6EDF               	movwf	indf2,c
 14287                           
 14288                           ;ff.c: 918: break;
 14289  002650  D012               	goto	l1130
 14290  002652                     l1144:
 14291                           
 14292                           ; BSR set to: 0
 14293                           ;ff.c: 921: res = FR_INT_ERR;
 14294                           
 14295                           ; BSR set to: 0
 14296  002652  0E02               	movlw	2
 14297  002654  6FBD               	movwf	put_fat@res& (0+255),b
 14298                           
 14299                           ;ff.c: 922: }
 14300  002656  D00F               	goto	l1130
 14301  002658                     l1127:
 14302                           
 14303                           ; BSR set to: 0
 14304                           
 14305                           ; BSR set to: 0
 14306  002658  C0A5  FFD9         	movff	put_fat@fs,fsr2l
 14307  00265C  C0A6  FFDA         	movff	put_fat@fs+1,fsr2h
 14308  002660  50DF               	movf	indf2,w,c
 14309                           
 14310                           ; Switch size 1, requested type "space"
 14311                           ; Number of cases is 3, Range of values is 1 to 3
 14312                           ; switch strategies available:
 14313                           ; Name         Instructions Cycles
 14314                           ; simple_byte           10     6 (average)
 14315                           ;	Chosen strategy is simple_byte
 14316  002662  0A01               	xorlw	1	; case 1
 14317  002664  B4D8               	btfsc	status,2,c
 14318  002666  D61F               	goto	l1128
 14319  002668  0A03               	xorlw	3	; case 2
 14320  00266A  B4D8               	btfsc	status,2,c
 14321  00266C  D71D               	goto	l1140
 14322  00266E  0A01               	xorlw	1	; case 3
 14323  002670  B4D8               	btfsc	status,2,c
 14324  002672  D770               	goto	l1142
 14325  002674  D7EE               	goto	l1144
 14326  002676                     l1130:
 14327                           
 14328                           ; BSR set to: 0
 14329                           ;ff.c: 923: }
 14330                           ;ff.c: 925: return res;
 14331                           
 14332                           ; BSR set to: 0
 14333                           
 14334                           ; BSR set to: 0
 14335  002676  51BD               	movf	put_fat@res& (0+255),w,b
 14336  002678  0012               	return	
 14337  00267A                     __end_of_put_fat:
 14338                           	opt stack 0
 14339                           tosu	equ	0xFFF
 14340                           tosh	equ	0xFFE
 14341                           tosl	equ	0xFFD
 14342                           pclath	equ	0xFFA
 14343                           tblptru	equ	0xFF8
 14344                           tblptrh	equ	0xFF7
 14345                           tblptrl	equ	0xFF6
 14346                           tablat	equ	0xFF5
 14347                           prodh	equ	0xFF4
 14348                           prodl	equ	0xFF3
 14349                           intcon	equ	0xFF2
 14350                           intcon2	equ	0xFF1
 14351                           intcon3	equ	0xFF0
 14352                           indf0	equ	0xFEF
 14353                           postinc0	equ	0xFEE
 14354                           fsr0h	equ	0xFEA
 14355                           fsr0l	equ	0xFE9
 14356                           wreg	equ	0xFE8
 14357                           indf1	equ	0xFE7
 14358                           postinc1	equ	0xFE6
 14359                           postdec1	equ	0xFE5
 14360                           fsr1h	equ	0xFE2
 14361                           fsr1l	equ	0xFE1
 14362                           indf2	equ	0xFDF
 14363                           postinc2	equ	0xFDE
 14364                           postdec2	equ	0xFDD
 14365                           plusw2	equ	0xFDB
 14366                           fsr2h	equ	0xFDA
 14367                           fsr2l	equ	0xFD9
 14368                           status	equ	0xFD8
 14369                           
 14370 ;; *************** function _get_fat *****************
 14371 ;; Defined at:
 14372 ;;		line 818 in file "bibliotecas/ff.c"
 14373 ;; Parameters:    Size  Location     Type
 14374 ;;  fs              2   69[BANK0 ] PTR struct .
 14375 ;;		 -> NULL(0), fs(558), 
 14376 ;;  clst            4   71[BANK0 ] unsigned long 
 14377 ;; Auto vars:     Size  Location     Type
 14378 ;;  val             4   89[BANK0 ] unsigned long 
 14379 ;;  bc              2   93[BANK0 ] unsigned int 
 14380 ;;  p               2   87[BANK0 ] PTR unsigned char 
 14381 ;;		 -> fs.win(512), NULL(0), fs(558), 
 14382 ;;  wc              2   85[BANK0 ] unsigned int 
 14383 ;; Return value:  Size  Location     Type
 14384 ;;                  4   69[BANK0 ] unsigned long 
 14385 ;; Registers used:
 14386 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14387 ;; Tracked objects:
 14388 ;;		On entry : 0/0
 14389 ;;		On exit  : 0/0
 14390 ;;		Unchanged: 0/0
 14391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14392 ;;      Params:         0       6       0       0       0       0       0       0       0
 14393 ;;      Locals:         0      12       0       0       0       0       0       0       0
 14394 ;;      Temps:          0       8       0       0       0       0       0       0       0
 14395 ;;      Totals:         0      26       0       0       0       0       0       0       0
 14396 ;;Total ram usage:       26 bytes
 14397 ;; Hardware stack levels used:    1
 14398 ;; Hardware stack levels required when called:   11
 14399 ;; This function calls:
 14400 ;;		_move_window
 14401 ;; This function is called by:
 14402 ;;		_remove_chain
 14403 ;;		_create_chain
 14404 ;;		_dir_sdi
 14405 ;;		_dir_next
 14406 ;;		_f_lseek
 14407 ;;		_f_read
 14408 ;; This function uses a non-reentrant model
 14409 ;;
 14410                           
 14411                           	psect	text37
 14412  002A66                     __ptext37:
 14413                           	opt stack 0
 14414  002A66                     _get_fat:
 14415                           	opt stack 15
 14416                           
 14417                           ;ff.c: 823: UINT wc, bc;
 14418                           ;ff.c: 824: BYTE *p;
 14419                           ;ff.c: 825: DWORD val;
 14420                           ;ff.c: 828: if (clst < 2 || clst >= fs->n_fatent) {
 14421                           
 14422                           ; BSR set to: 0
 14423                           ;incstack = 0
 14424  002A66  0100               	movlb	0	; () banked
 14425  002A68  51AA               	movf	(get_fat@clst+3)& (0+255),w,b
 14426  002A6A  11A9               	iorwf	(get_fat@clst+2)& (0+255),w,b
 14427  002A6C  11A8               	iorwf	(get_fat@clst+1)& (0+255),w,b
 14428  002A6E  E104               	bnz	u14360
 14429  002A70  0E02               	movlw	2
 14430  002A72  5DA7               	subwf	get_fat@clst& (0+255),w,b
 14431  002A74  A0D8               	btfss	status,0,c
 14432  002A76  D195               	goto	l1119
 14433  002A78                     u14360:
 14434                           
 14435                           ; BSR set to: 0
 14436  002A78  EE20 F012          	lfsr	2,18
 14437  002A7C  51A5               	movf	get_fat@fs& (0+255),w,b
 14438  002A7E  26D9               	addwf	fsr2l,f,c
 14439  002A80  51A6               	movf	(get_fat@fs+1)& (0+255),w,b
 14440  002A82  22DA               	addwfc	fsr2h,f,c
 14441  002A84  50DE               	movf	postinc2,w,c
 14442  002A86  5DA7               	subwf	get_fat@clst& (0+255),w,b
 14443  002A88  50DE               	movf	postinc2,w,c
 14444  002A8A  59A8               	subwfb	(get_fat@clst+1)& (0+255),w,b
 14445  002A8C  50DE               	movf	postinc2,w,c
 14446  002A8E  59A9               	subwfb	(get_fat@clst+2)& (0+255),w,b
 14447  002A90  50DE               	movf	postinc2,w,c
 14448  002A92  59AA               	subwfb	(get_fat@clst+3)& (0+255),w,b
 14449  002A94  B0D8               	btfsc	status,0,c
 14450                           
 14451                           ; BSR set to: 0
 14452  002A96  D185               	goto	l1119
 14453                           
 14454                           ; BSR set to: 0
 14455                           ;ff.c: 832: val = 0xFFFFFFFF;
 14456                           
 14457                           ;ff.c: 831: } else {
 14458                           
 14459                           ; BSR set to: 0
 14460                           ;ff.c: 829: val = 1;
 14461  002A98  69B9               	setf	get_fat@val& (0+255),b
 14462  002A9A  69BA               	setf	(get_fat@val+1)& (0+255),b
 14463  002A9C  69BB               	setf	(get_fat@val+2)& (0+255),b
 14464  002A9E  69BC               	setf	(get_fat@val+3)& (0+255),b
 14465                           
 14466                           ;ff.c: 834: switch (fs->fs_type) {
 14467  002AA0  D189               	goto	l1106
 14468  002AA2                     l1107:
 14469                           
 14470                           ; BSR set to: 0
 14471                           ;ff.c: 836: bc = (UINT)clst; bc += bc / 2;
 14472  002AA2  C0A7  F0BD         	movff	get_fat@clst,get_fat@bc
 14473  002AA6  C0A8  F0BE         	movff	get_fat@clst+1,get_fat@bc+1
 14474                           
 14475                           ; BSR set to: 0
 14476  002AAA  90D8               	bcf	status,0,c
 14477  002AAC  31BE               	rrcf	(get_fat@bc+1)& (0+255),w,b
 14478  002AAE  6FAC               	movwf	(??_get_fat+1)& (0+255),b
 14479  002AB0  31BD               	rrcf	get_fat@bc& (0+255),w,b
 14480  002AB2  6FAB               	movwf	??_get_fat& (0+255),b
 14481  002AB4  51AB               	movf	??_get_fat& (0+255),w,b
 14482  002AB6  27BD               	addwf	get_fat@bc& (0+255),f,b
 14483  002AB8  51AC               	movf	(??_get_fat+1)& (0+255),w,b
 14484  002ABA  23BE               	addwfc	(get_fat@bc+1)& (0+255),f,b
 14485                           
 14486                           ; BSR set to: 0
 14487                           ;ff.c: 837: if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 14488  002ABC  C0A5  F09A         	movff	get_fat@fs,move_window@fs
 14489  002AC0  C0A6  F09B         	movff	get_fat@fs+1,move_window@fs+1
 14490  002AC4  EE20 F01E          	lfsr	2,30
 14491  002AC8  51A5               	movf	get_fat@fs& (0+255),w,b
 14492  002ACA  26D9               	addwf	fsr2l,f,c
 14493  002ACC  51A6               	movf	(get_fat@fs+1)& (0+255),w,b
 14494  002ACE  22DA               	addwfc	fsr2h,f,c
 14495  002AD0  CFDE F0AB          	movff	postinc2,??_get_fat
 14496  002AD4  CFDE F0AC          	movff	postinc2,??_get_fat+1
 14497  002AD8  CFDE F0AD          	movff	postinc2,??_get_fat+2
 14498  002ADC  CFDE F0AE          	movff	postinc2,??_get_fat+3
 14499  002AE0  C0BD  F0AF         	movff	get_fat@bc,??_get_fat+4
 14500  002AE4  C0BE  F0B0         	movff	get_fat@bc+1,??_get_fat+5
 14501  002AE8  0E09               	movlw	9
 14502  002AEA  6FB1               	movwf	(??_get_fat+6)& (0+255),b
 14503  002AEC                     u14385:
 14504  002AEC  90D8               	bcf	status,0,c
 14505  002AEE  33B0               	rrcf	(??_get_fat+5)& (0+255),f,b
 14506  002AF0  33AF               	rrcf	(??_get_fat+4)& (0+255),f,b
 14507  002AF2  2FB1               	decfsz	(??_get_fat+6)& (0+255),f,b
 14508  002AF4  D7FB               	goto	u14385
 14509  002AF6  51AF               	movf	(??_get_fat+4)& (0+255),w,b
 14510  002AF8  25AB               	addwf	??_get_fat& (0+255),w,b
 14511  002AFA  6F9C               	movwf	move_window@sector& (0+255),b
 14512  002AFC  51B0               	movf	(??_get_fat+5)& (0+255),w,b
 14513  002AFE  21AC               	addwfc	(??_get_fat+1)& (0+255),w,b
 14514  002B00  6F9D               	movwf	(move_window@sector+1)& (0+255),b
 14515  002B02  0E00               	movlw	0
 14516  002B04  21AD               	addwfc	(??_get_fat+2)& (0+255),w,b
 14517  002B06  6F9E               	movwf	(move_window@sector+2)& (0+255),b
 14518  002B08  0E00               	movlw	0
 14519  002B0A  21AE               	addwfc	(??_get_fat+3)& (0+255),w,b
 14520  002B0C  6F9F               	movwf	(move_window@sector+3)& (0+255),b
 14521  002B0E  EC0A  F027         	call	_move_window	;wreg free
 14522  002B12  0900               	iorlw	0
 14523  002B14  A4D8               	btfss	status,2,c
 14524  002B16  D15D               	goto	l1109
 14525                           
 14526                           ;ff.c: 838: wc = fs->win[bc++ % ((UINT)512)];
 14527  002B18  0EFF               	movlw	255
 14528  002B1A  0100               	movlb	0	; () banked
 14529  002B1C  6FAB               	movwf	??_get_fat& (0+255),b
 14530  002B1E  0E01               	movlw	1
 14531  002B20  6FAC               	movwf	(??_get_fat+1)& (0+255),b
 14532  002B22  C0BD  F0AD         	movff	get_fat@bc,??_get_fat+2
 14533  002B26  C0BE  F0AE         	movff	get_fat@bc+1,??_get_fat+3
 14534  002B2A  51AB               	movf	??_get_fat& (0+255),w,b
 14535  002B2C  17AD               	andwf	(??_get_fat+2)& (0+255),f,b
 14536  002B2E  51AC               	movf	(??_get_fat+1)& (0+255),w,b
 14537  002B30  17AE               	andwf	(??_get_fat+3)& (0+255),f,b
 14538  002B32  0E2E               	movlw	46
 14539  002B34  27AD               	addwf	(??_get_fat+2)& (0+255),f,b
 14540  002B36  0E00               	movlw	0
 14541  002B38  23AE               	addwfc	(??_get_fat+3)& (0+255),f,b
 14542  002B3A  51AD               	movf	(??_get_fat+2)& (0+255),w,b
 14543  002B3C  25A5               	addwf	get_fat@fs& (0+255),w,b
 14544  002B3E  6ED9               	movwf	fsr2l,c
 14545  002B40  51AE               	movf	(??_get_fat+3)& (0+255),w,b
 14546  002B42  21A6               	addwfc	(get_fat@fs+1)& (0+255),w,b
 14547  002B44  6EDA               	movwf	fsr2h,c
 14548  002B46  50DF               	movf	indf2,w,c
 14549  002B48  6FAF               	movwf	(??_get_fat+4)& (0+255),b
 14550  002B4A  51AF               	movf	(??_get_fat+4)& (0+255),w,b
 14551  002B4C  6FB5               	movwf	get_fat@wc& (0+255),b
 14552  002B4E  6BB6               	clrf	(get_fat@wc+1)& (0+255),b
 14553                           
 14554                           ; BSR set to: 0
 14555  002B50  4BBD               	infsnz	get_fat@bc& (0+255),f,b
 14556  002B52  2BBE               	incf	(get_fat@bc+1)& (0+255),f,b
 14557                           
 14558                           ; BSR set to: 0
 14559                           ;ff.c: 839: if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 14560  002B54  C0A5  F09A         	movff	get_fat@fs,move_window@fs
 14561  002B58  C0A6  F09B         	movff	get_fat@fs+1,move_window@fs+1
 14562  002B5C  EE20 F01E          	lfsr	2,30
 14563  002B60  51A5               	movf	get_fat@fs& (0+255),w,b
 14564  002B62  26D9               	addwf	fsr2l,f,c
 14565  002B64  51A6               	movf	(get_fat@fs+1)& (0+255),w,b
 14566  002B66  22DA               	addwfc	fsr2h,f,c
 14567  002B68  CFDE F0AB          	movff	postinc2,??_get_fat
 14568  002B6C  CFDE F0AC          	movff	postinc2,??_get_fat+1
 14569  002B70  CFDE F0AD          	movff	postinc2,??_get_fat+2
 14570  002B74  CFDE F0AE          	movff	postinc2,??_get_fat+3
 14571  002B78  C0BD  F0AF         	movff	get_fat@bc,??_get_fat+4
 14572  002B7C  C0BE  F0B0         	movff	get_fat@bc+1,??_get_fat+5
 14573  002B80  0E09               	movlw	9
 14574  002B82  6FB1               	movwf	(??_get_fat+6)& (0+255),b
 14575  002B84                     u14405:
 14576  002B84  90D8               	bcf	status,0,c
 14577  002B86  33B0               	rrcf	(??_get_fat+5)& (0+255),f,b
 14578  002B88  33AF               	rrcf	(??_get_fat+4)& (0+255),f,b
 14579  002B8A  2FB1               	decfsz	(??_get_fat+6)& (0+255),f,b
 14580  002B8C  D7FB               	goto	u14405
 14581  002B8E  51AF               	movf	(??_get_fat+4)& (0+255),w,b
 14582  002B90  25AB               	addwf	??_get_fat& (0+255),w,b
 14583  002B92  6F9C               	movwf	move_window@sector& (0+255),b
 14584  002B94  51B0               	movf	(??_get_fat+5)& (0+255),w,b
 14585  002B96  21AC               	addwfc	(??_get_fat+1)& (0+255),w,b
 14586  002B98  6F9D               	movwf	(move_window@sector+1)& (0+255),b
 14587  002B9A  0E00               	movlw	0
 14588  002B9C  21AD               	addwfc	(??_get_fat+2)& (0+255),w,b
 14589  002B9E  6F9E               	movwf	(move_window@sector+2)& (0+255),b
 14590  002BA0  0E00               	movlw	0
 14591  002BA2  21AE               	addwfc	(??_get_fat+3)& (0+255),w,b
 14592  002BA4  6F9F               	movwf	(move_window@sector+3)& (0+255),b
 14593  002BA6  EC0A  F027         	call	_move_window	;wreg free
 14594  002BAA  0900               	iorlw	0
 14595  002BAC  A4D8               	btfss	status,2,c
 14596  002BAE  D111               	goto	l1109
 14597                           
 14598                           ;ff.c: 840: wc |= fs->win[bc % ((UINT)512)] << 8;
 14599  002BB0  0EFF               	movlw	255
 14600  002BB2  0100               	movlb	0	; () banked
 14601  002BB4  6FAB               	movwf	??_get_fat& (0+255),b
 14602  002BB6  0E01               	movlw	1
 14603  002BB8  6FAC               	movwf	(??_get_fat+1)& (0+255),b
 14604  002BBA  C0BD  F0AD         	movff	get_fat@bc,??_get_fat+2
 14605  002BBE  C0BE  F0AE         	movff	get_fat@bc+1,??_get_fat+3
 14606  002BC2  51AB               	movf	??_get_fat& (0+255),w,b
 14607  002BC4  17AD               	andwf	(??_get_fat+2)& (0+255),f,b
 14608  002BC6  51AC               	movf	(??_get_fat+1)& (0+255),w,b
 14609  002BC8  17AE               	andwf	(??_get_fat+3)& (0+255),f,b
 14610  002BCA  0E2E               	movlw	46
 14611  002BCC  27AD               	addwf	(??_get_fat+2)& (0+255),f,b
 14612  002BCE  0E00               	movlw	0
 14613  002BD0  23AE               	addwfc	(??_get_fat+3)& (0+255),f,b
 14614  002BD2  51AD               	movf	(??_get_fat+2)& (0+255),w,b
 14615  002BD4  25A5               	addwf	get_fat@fs& (0+255),w,b
 14616  002BD6  6ED9               	movwf	fsr2l,c
 14617  002BD8  51AE               	movf	(??_get_fat+3)& (0+255),w,b
 14618  002BDA  21A6               	addwfc	(get_fat@fs+1)& (0+255),w,b
 14619  002BDC  6EDA               	movwf	fsr2h,c
 14620  002BDE  50DF               	movf	indf2,w,c
 14621  002BE0  6FAF               	movwf	(??_get_fat+4)& (0+255),b
 14622  002BE2  51AF               	movf	(??_get_fat+4)& (0+255),w,b
 14623  002BE4  6FB1               	movwf	(??_get_fat+6)& (0+255),b
 14624  002BE6  6BB0               	clrf	(??_get_fat+5)& (0+255),b
 14625  002BE8  51B0               	movf	(??_get_fat+5)& (0+255),w,b
 14626  002BEA  13B5               	iorwf	get_fat@wc& (0+255),f,b
 14627  002BEC  51B1               	movf	(??_get_fat+6)& (0+255),w,b
 14628  002BEE  13B6               	iorwf	(get_fat@wc+1)& (0+255),f,b
 14629                           
 14630                           ; BSR set to: 0
 14631                           ;ff.c: 841: val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 14632  002BF0  B1A7               	btfsc	get_fat@clst& (0+255),0,b
 14633  002BF2  D007               	goto	l1112
 14634                           
 14635                           ; BSR set to: 0
 14636  002BF4  0EFF               	movlw	255
 14637  002BF6  15B5               	andwf	get_fat@wc& (0+255),w,b
 14638  002BF8  6FB3               	movwf	_get_fat$2493& (0+255),b
 14639  002BFA  0E0F               	movlw	15
 14640  002BFC  15B6               	andwf	(get_fat@wc+1)& (0+255),w,b
 14641  002BFE  6FB4               	movwf	(_get_fat$2493+1)& (0+255),b
 14642  002C00  D00F               	goto	l1114
 14643  002C02                     l1112:
 14644                           
 14645                           ; BSR set to: 0
 14646                           
 14647                           ; BSR set to: 0
 14648  002C02  C0B5  F0AB         	movff	get_fat@wc,??_get_fat
 14649  002C06  C0B6  F0AC         	movff	get_fat@wc+1,??_get_fat+1
 14650  002C0A  0E04               	movlw	4
 14651  002C0C  6FAD               	movwf	(??_get_fat+2)& (0+255),b
 14652  002C0E                     u14435:
 14653  002C0E  90D8               	bcf	status,0,c
 14654  002C10  33AC               	rrcf	(??_get_fat+1)& (0+255),f,b
 14655  002C12  33AB               	rrcf	??_get_fat& (0+255),f,b
 14656  002C14  2FAD               	decfsz	(??_get_fat+2)& (0+255),f,b
 14657  002C16  D7FB               	goto	u14435
 14658  002C18  C0AB  F0B3         	movff	??_get_fat,_get_fat$2493
 14659  002C1C  C0AC  F0B4         	movff	??_get_fat+1,_get_fat$2493+1
 14660  002C20                     l1114:
 14661                           
 14662                           ; BSR set to: 0
 14663                           
 14664                           ; BSR set to: 0
 14665  002C20  C0B3  F0B9         	movff	_get_fat$2493,get_fat@val
 14666  002C24  C0B4  F0BA         	movff	_get_fat$2493+1,get_fat@val+1
 14667  002C28  D058               	goto	L15
 14668  002C2A                     
 14669                           ; BSR set to: 0
 14670                           ;ff.c: 845: if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2))) != FR_OK) brea
      +                          k;
 14671                           
 14672                           ; BSR set to: 0
 14673  002C2A  C0A5  F09A         	movff	get_fat@fs,move_window@fs
 14674  002C2E  C0A6  F09B         	movff	get_fat@fs+1,move_window@fs+1
 14675  002C32  EE20 F01E          	lfsr	2,30
 14676  002C36  51A5               	movf	get_fat@fs& (0+255),w,b
 14677  002C38  26D9               	addwf	fsr2l,f,c
 14678  002C3A  51A6               	movf	(get_fat@fs+1)& (0+255),w,b
 14679  002C3C  22DA               	addwfc	fsr2h,f,c
 14680  002C3E  CFDE F0AB          	movff	postinc2,??_get_fat
 14681  002C42  CFDE F0AC          	movff	postinc2,??_get_fat+1
 14682  002C46  CFDE F0AD          	movff	postinc2,??_get_fat+2
 14683  002C4A  CFDE F0AE          	movff	postinc2,??_get_fat+3
 14684  002C4E  C0A7  F0AF         	movff	get_fat@clst,??_get_fat+4
 14685  002C52  C0A8  F0B0         	movff	get_fat@clst+1,??_get_fat+5
 14686  002C56  C0A9  F0B1         	movff	get_fat@clst+2,??_get_fat+6
 14687  002C5A  C0AA  F0B2         	movff	get_fat@clst+3,??_get_fat+7
 14688  002C5E  C0B0  F0AF         	movff	??_get_fat+5,??_get_fat+4
 14689  002C62  C0B1  F0B0         	movff	??_get_fat+6,??_get_fat+5
 14690  002C66  C0B2  F0B1         	movff	??_get_fat+7,??_get_fat+6
 14691  002C6A  6BB2               	clrf	(??_get_fat+7)& (0+255),b
 14692  002C6C  51AB               	movf	??_get_fat& (0+255),w,b
 14693  002C6E  25AF               	addwf	(??_get_fat+4)& (0+255),w,b
 14694  002C70  6F9C               	movwf	move_window@sector& (0+255),b
 14695  002C72  51AC               	movf	(??_get_fat+1)& (0+255),w,b
 14696  002C74  21B0               	addwfc	(??_get_fat+5)& (0+255),w,b
 14697  002C76  6F9D               	movwf	(move_window@sector+1)& (0+255),b
 14698  002C78  51AD               	movf	(??_get_fat+2)& (0+255),w,b
 14699  002C7A  21B1               	addwfc	(??_get_fat+6)& (0+255),w,b
 14700  002C7C  6F9E               	movwf	(move_window@sector+2)& (0+255),b
 14701  002C7E  51AE               	movf	(??_get_fat+3)& (0+255),w,b
 14702  002C80  21B2               	addwfc	(??_get_fat+7)& (0+255),w,b
 14703  002C82  6F9F               	movwf	(move_window@sector+3)& (0+255),b
 14704  002C84  EC0A  F027         	call	_move_window	;wreg free
 14705  002C88  0900               	iorlw	0
 14706  002C8A  A4D8               	btfss	status,2,c
 14707  002C8C  D0A2               	goto	l1109
 14708                           
 14709                           ;ff.c: 846: p = &fs->win[clst * 2 % ((UINT)512)];
 14710  002C8E  0EFF               	movlw	255
 14711  002C90  0100               	movlb	0	; () banked
 14712  002C92  6FAB               	movwf	??_get_fat& (0+255),b
 14713  002C94  0E01               	movlw	1
 14714  002C96  6FAC               	movwf	(??_get_fat+1)& (0+255),b
 14715  002C98  C0A7  F0AD         	movff	get_fat@clst,??_get_fat+2
 14716  002C9C  C0A8  F0AE         	movff	get_fat@clst+1,??_get_fat+3
 14717  002CA0  90D8               	bcf	status,0,c
 14718  002CA2  37AD               	rlcf	(??_get_fat+2)& (0+255),f,b
 14719  002CA4  37AE               	rlcf	(??_get_fat+3)& (0+255),f,b
 14720  002CA6  51AB               	movf	??_get_fat& (0+255),w,b
 14721  002CA8  17AD               	andwf	(??_get_fat+2)& (0+255),f,b
 14722  002CAA  51AC               	movf	(??_get_fat+1)& (0+255),w,b
 14723  002CAC  17AE               	andwf	(??_get_fat+3)& (0+255),f,b
 14724  002CAE  0E2E               	movlw	46
 14725  002CB0  27AD               	addwf	(??_get_fat+2)& (0+255),f,b
 14726  002CB2  0E00               	movlw	0
 14727  002CB4  23AE               	addwfc	(??_get_fat+3)& (0+255),f,b
 14728  002CB6  51AD               	movf	(??_get_fat+2)& (0+255),w,b
 14729  002CB8  25A5               	addwf	get_fat@fs& (0+255),w,b
 14730  002CBA  6FB7               	movwf	get_fat@p& (0+255),b
 14731  002CBC  51AE               	movf	(??_get_fat+3)& (0+255),w,b
 14732  002CBE  21A6               	addwfc	(get_fat@fs+1)& (0+255),w,b
 14733  002CC0  6FB8               	movwf	(get_fat@p+1)& (0+255),b
 14734                           
 14735                           ; BSR set to: 0
 14736                           ;ff.c: 847: val = (WORD)(*(WORD*)(BYTE*)(p));
 14737  002CC2  C0B7  FFD9         	movff	get_fat@p,fsr2l
 14738  002CC6  C0B8  FFDA         	movff	get_fat@p+1,fsr2h
 14739  002CCA  CFDE F0AB          	movff	postinc2,??_get_fat
 14740  002CCE  CFDD F0AC          	movff	postdec2,??_get_fat+1
 14741  002CD2  C0AB  F0B9         	movff	??_get_fat,get_fat@val
 14742  002CD6  C0AC  F0BA         	movff	??_get_fat+1,get_fat@val+1
 14743  002CDA                     L15:
 14744  002CDA  6BBB               	clrf	(get_fat@val+2)& (0+255),b
 14745  002CDC  6BBC               	clrf	(get_fat@val+3)& (0+255),b
 14746                           
 14747                           ;ff.c: 848: break;
 14748  002CDE  D079               	goto	l1109
 14749  002CE0                     
 14750                           ; BSR set to: 0
 14751                           ;ff.c: 851: if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4))) != FR_OK) brea
      +                          k;
 14752                           
 14753                           ; BSR set to: 0
 14754  002CE0  C0A5  F09A         	movff	get_fat@fs,move_window@fs
 14755  002CE4  C0A6  F09B         	movff	get_fat@fs+1,move_window@fs+1
 14756  002CE8  EE20 F01E          	lfsr	2,30
 14757  002CEC  51A5               	movf	get_fat@fs& (0+255),w,b
 14758  002CEE  26D9               	addwf	fsr2l,f,c
 14759  002CF0  51A6               	movf	(get_fat@fs+1)& (0+255),w,b
 14760  002CF2  22DA               	addwfc	fsr2h,f,c
 14761  002CF4  CFDE F0AB          	movff	postinc2,??_get_fat
 14762  002CF8  CFDE F0AC          	movff	postinc2,??_get_fat+1
 14763  002CFC  CFDE F0AD          	movff	postinc2,??_get_fat+2
 14764  002D00  CFDE F0AE          	movff	postinc2,??_get_fat+3
 14765  002D04  C0A7  F0AF         	movff	get_fat@clst,??_get_fat+4
 14766  002D08  C0A8  F0B0         	movff	get_fat@clst+1,??_get_fat+5
 14767  002D0C  C0A9  F0B1         	movff	get_fat@clst+2,??_get_fat+6
 14768  002D10  C0AA  F0B2         	movff	get_fat@clst+3,??_get_fat+7
 14769  002D14  0E08               	movlw	8
 14770  002D16  D005               	goto	u14450
 14771  002D18                     u14455:
 14772  002D18  90D8               	bcf	status,0,c
 14773  002D1A  33B2               	rrcf	(??_get_fat+7)& (0+255),f,b
 14774  002D1C  33B1               	rrcf	(??_get_fat+6)& (0+255),f,b
 14775  002D1E  33B0               	rrcf	(??_get_fat+5)& (0+255),f,b
 14776  002D20  33AF               	rrcf	(??_get_fat+4)& (0+255),f,b
 14777  002D22                     u14450:
 14778  002D22  2EE8               	decfsz	wreg,f,c
 14779  002D24  D7F9               	goto	u14455
 14780  002D26  51AB               	movf	??_get_fat& (0+255),w,b
 14781  002D28  25AF               	addwf	(??_get_fat+4)& (0+255),w,b
 14782  002D2A  6F9C               	movwf	move_window@sector& (0+255),b
 14783  002D2C  51AC               	movf	(??_get_fat+1)& (0+255),w,b
 14784  002D2E  21B0               	addwfc	(??_get_fat+5)& (0+255),w,b
 14785  002D30  6F9D               	movwf	(move_window@sector+1)& (0+255),b
 14786  002D32  51AD               	movf	(??_get_fat+2)& (0+255),w,b
 14787  002D34  21B1               	addwfc	(??_get_fat+6)& (0+255),w,b
 14788  002D36  6F9E               	movwf	(move_window@sector+2)& (0+255),b
 14789  002D38  51AE               	movf	(??_get_fat+3)& (0+255),w,b
 14790  002D3A  21B2               	addwfc	(??_get_fat+7)& (0+255),w,b
 14791  002D3C  6F9F               	movwf	(move_window@sector+3)& (0+255),b
 14792  002D3E  EC0A  F027         	call	_move_window	;wreg free
 14793  002D42  0900               	iorlw	0
 14794  002D44  A4D8               	btfss	status,2,c
 14795  002D46  D045               	goto	l1109
 14796                           
 14797                           ;ff.c: 852: p = &fs->win[clst * 4 % ((UINT)512)];
 14798  002D48  0EFF               	movlw	255
 14799  002D4A  0100               	movlb	0	; () banked
 14800  002D4C  6FAB               	movwf	??_get_fat& (0+255),b
 14801  002D4E  0E01               	movlw	1
 14802  002D50  6FAC               	movwf	(??_get_fat+1)& (0+255),b
 14803  002D52  C0A7  F0AD         	movff	get_fat@clst,??_get_fat+2
 14804  002D56  C0A8  F0AE         	movff	get_fat@clst+1,??_get_fat+3
 14805  002D5A  90D8               	bcf	status,0,c
 14806  002D5C  37AD               	rlcf	(??_get_fat+2)& (0+255),f,b
 14807  002D5E  37AE               	rlcf	(??_get_fat+3)& (0+255),f,b
 14808  002D60  90D8               	bcf	status,0,c
 14809  002D62  37AD               	rlcf	(??_get_fat+2)& (0+255),f,b
 14810  002D64  37AE               	rlcf	(??_get_fat+3)& (0+255),f,b
 14811  002D66  51AB               	movf	??_get_fat& (0+255),w,b
 14812  002D68  17AD               	andwf	(??_get_fat+2)& (0+255),f,b
 14813  002D6A  51AC               	movf	(??_get_fat+1)& (0+255),w,b
 14814  002D6C  17AE               	andwf	(??_get_fat+3)& (0+255),f,b
 14815  002D6E  0E2E               	movlw	46
 14816  002D70  27AD               	addwf	(??_get_fat+2)& (0+255),f,b
 14817  002D72  0E00               	movlw	0
 14818  002D74  23AE               	addwfc	(??_get_fat+3)& (0+255),f,b
 14819  002D76  51AD               	movf	(??_get_fat+2)& (0+255),w,b
 14820  002D78  25A5               	addwf	get_fat@fs& (0+255),w,b
 14821  002D7A  6FB7               	movwf	get_fat@p& (0+255),b
 14822  002D7C  51AE               	movf	(??_get_fat+3)& (0+255),w,b
 14823  002D7E  21A6               	addwfc	(get_fat@fs+1)& (0+255),w,b
 14824  002D80  6FB8               	movwf	(get_fat@p+1)& (0+255),b
 14825                           
 14826                           ; BSR set to: 0
 14827                           ;ff.c: 853: val = (DWORD)(*(DWORD*)(BYTE*)(p)) & 0x0FFFFFFF;
 14828  002D82  C0B7  FFD9         	movff	get_fat@p,fsr2l
 14829  002D86  C0B8  FFDA         	movff	get_fat@p+1,fsr2h
 14830  002D8A  0EFF               	movlw	255
 14831  002D8C  14DE               	andwf	postinc2,w,c
 14832  002D8E  6FB9               	movwf	get_fat@val& (0+255),b
 14833  002D90  0EFF               	movlw	255
 14834  002D92  14DE               	andwf	postinc2,w,c
 14835  002D94  6FBA               	movwf	(get_fat@val+1)& (0+255),b
 14836  002D96  0EFF               	movlw	255
 14837  002D98  14DE               	andwf	postinc2,w,c
 14838  002D9A  6FBB               	movwf	(get_fat@val+2)& (0+255),b
 14839  002D9C  0E0F               	movlw	15
 14840  002D9E  14DE               	andwf	postinc2,w,c
 14841  002DA0  D007               	goto	L16
 14842  002DA2                     l1119:
 14843                           
 14844                           ; BSR set to: 0
 14845                           ;ff.c: 857: val = 1;
 14846                           
 14847                           ; BSR set to: 0
 14848  002DA2  0E01               	movlw	1
 14849  002DA4  6FB9               	movwf	get_fat@val& (0+255),b
 14850  002DA6  0E00               	movlw	0
 14851  002DA8  6FBA               	movwf	(get_fat@val+1)& (0+255),b
 14852  002DAA  0E00               	movlw	0
 14853  002DAC  6FBB               	movwf	(get_fat@val+2)& (0+255),b
 14854  002DAE  0E00               	movlw	0
 14855  002DB0                     L16:
 14856  002DB0  6FBC               	movwf	(get_fat@val+3)& (0+255),b
 14857                           
 14858                           ;ff.c: 858: }
 14859  002DB2  D00F               	goto	l1109
 14860  002DB4                     l1106:
 14861                           
 14862                           ; BSR set to: 0
 14863                           
 14864                           ; BSR set to: 0
 14865  002DB4  C0A5  FFD9         	movff	get_fat@fs,fsr2l
 14866  002DB8  C0A6  FFDA         	movff	get_fat@fs+1,fsr2h
 14867  002DBC  50DF               	movf	indf2,w,c
 14868                           
 14869                           ; Switch size 1, requested type "space"
 14870                           ; Number of cases is 3, Range of values is 1 to 3
 14871                           ; switch strategies available:
 14872                           ; Name         Instructions Cycles
 14873                           ; simple_byte           10     6 (average)
 14874                           ;	Chosen strategy is simple_byte
 14875  002DBE  0A01               	xorlw	1	; case 1
 14876  002DC0  B4D8               	btfsc	status,2,c
 14877  002DC2  D66F               	goto	l1107
 14878  002DC4  0A03               	xorlw	3	; case 2
 14879  002DC6  B4D8               	btfsc	status,2,c
 14880  002DC8  D730               	goto	l1115
 14881  002DCA  0A01               	xorlw	1	; case 3
 14882  002DCC  B4D8               	btfsc	status,2,c
 14883  002DCE  D788               	goto	l1117
 14884  002DD0  D7E8               	goto	l1119
 14885  002DD2                     l1109:
 14886                           
 14887                           ;ff.c: 859: }
 14888                           ;ff.c: 861: return val;
 14889                           
 14890                           ; BSR set to: 0
 14891  002DD2  C0B9  F0A5         	movff	get_fat@val,?_get_fat
 14892  002DD6  C0BA  F0A6         	movff	get_fat@val+1,?_get_fat+1
 14893  002DDA  C0BB  F0A7         	movff	get_fat@val+2,?_get_fat+2
 14894  002DDE  C0BC  F0A8         	movff	get_fat@val+3,?_get_fat+3
 14895  002DE2  0012               	return		;funcret
 14896  002DE4                     __end_of_get_fat:
 14897                           	opt stack 0
 14898                           tosu	equ	0xFFF
 14899                           tosh	equ	0xFFE
 14900                           tosl	equ	0xFFD
 14901                           pclath	equ	0xFFA
 14902                           tblptru	equ	0xFF8
 14903                           tblptrh	equ	0xFF7
 14904                           tblptrl	equ	0xFF6
 14905                           tablat	equ	0xFF5
 14906                           prodh	equ	0xFF4
 14907                           prodl	equ	0xFF3
 14908                           intcon	equ	0xFF2
 14909                           intcon2	equ	0xFF1
 14910                           intcon3	equ	0xFF0
 14911                           indf0	equ	0xFEF
 14912                           postinc0	equ	0xFEE
 14913                           fsr0h	equ	0xFEA
 14914                           fsr0l	equ	0xFE9
 14915                           wreg	equ	0xFE8
 14916                           indf1	equ	0xFE7
 14917                           postinc1	equ	0xFE6
 14918                           postdec1	equ	0xFE5
 14919                           fsr1h	equ	0xFE2
 14920                           fsr1l	equ	0xFE1
 14921                           indf2	equ	0xFDF
 14922                           postinc2	equ	0xFDE
 14923                           postdec2	equ	0xFDD
 14924                           plusw2	equ	0xFDB
 14925                           fsr2h	equ	0xFDA
 14926                           fsr2l	equ	0xFD9
 14927                           status	equ	0xFD8
 14928                           
 14929 ;; *************** function _clust2sect *****************
 14930 ;; Defined at:
 14931 ;;		line 800 in file "bibliotecas/ff.c"
 14932 ;; Parameters:    Size  Location     Type
 14933 ;;  fs              2   37[COMRAM] PTR struct .
 14934 ;;		 -> NULL(0), fs(558), 
 14935 ;;  clst            4   39[COMRAM] unsigned long 
 14936 ;; Auto vars:     Size  Location     Type
 14937 ;;		None
 14938 ;; Return value:  Size  Location     Type
 14939 ;;                  4   37[COMRAM] unsigned long 
 14940 ;; Registers used:
 14941 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14942 ;; Tracked objects:
 14943 ;;		On entry : 0/0
 14944 ;;		On exit  : 0/0
 14945 ;;		Unchanged: 0/0
 14946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14947 ;;      Params:         6       0       0       0       0       0       0       0       0
 14948 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14949 ;;      Temps:          0       5       0       0       0       0       0       0       0
 14950 ;;      Totals:         6       5       0       0       0       0       0       0       0
 14951 ;;Total ram usage:       11 bytes
 14952 ;; Hardware stack levels used:    1
 14953 ;; Hardware stack levels required when called:    3
 14954 ;; This function calls:
 14955 ;;		___lmul
 14956 ;; This function is called by:
 14957 ;;		_dir_sdi
 14958 ;;		_dir_next
 14959 ;;		_f_write
 14960 ;;		_f_lseek
 14961 ;;		_f_read
 14962 ;; This function uses a non-reentrant model
 14963 ;;
 14964                           
 14965                           	psect	text38
 14966  004A82                     __ptext38:
 14967                           	opt stack 0
 14968  004A82                     _clust2sect:
 14969                           	opt stack 24
 14970                           
 14971                           ;ff.c: 805: clst -= 2;
 14972                           
 14973                           ;incstack = 0
 14974  004A82  0E02               	movlw	2
 14975  004A84  5E28               	subwf	clust2sect@clst,f,c
 14976  004A86  0E00               	movlw	0
 14977  004A88  5A29               	subwfb	clust2sect@clst+1,f,c
 14978  004A8A  5A2A               	subwfb	clust2sect@clst+2,f,c
 14979  004A8C  5A2B               	subwfb	clust2sect@clst+3,f,c
 14980                           
 14981                           ;ff.c: 806: if (clst >= fs->n_fatent - 2) return 0;
 14982  004A8E  EE20 F012          	lfsr	2,18
 14983  004A92  5026               	movf	clust2sect@fs,w,c
 14984  004A94  26D9               	addwf	fsr2l,f,c
 14985  004A96  5027               	movf	clust2sect@fs+1,w,c
 14986  004A98  22DA               	addwfc	fsr2h,f,c
 14987  004A9A  0EFE               	movlw	254
 14988  004A9C  24DE               	addwf	postinc2,w,c
 14989  004A9E  0100               	movlb	0	; () banked
 14990  004AA0  6F60               	movwf	??_clust2sect& (0+255),b
 14991  004AA2  0EFF               	movlw	255
 14992  004AA4  20DE               	addwfc	postinc2,w,c
 14993  004AA6  6F61               	movwf	(??_clust2sect+1)& (0+255),b
 14994  004AA8  0EFF               	movlw	255
 14995  004AAA  20DE               	addwfc	postinc2,w,c
 14996  004AAC  6F62               	movwf	(??_clust2sect+2)& (0+255),b
 14997  004AAE  0EFF               	movlw	255
 14998  004AB0  20DE               	addwfc	postinc2,w,c
 14999  004AB2  6F63               	movwf	(??_clust2sect+3)& (0+255),b
 15000  004AB4  5160               	movf	??_clust2sect& (0+255),w,b
 15001  004AB6  5C28               	subwf	clust2sect@clst,w,c
 15002  004AB8  5161               	movf	(??_clust2sect+1)& (0+255),w,b
 15003  004ABA  5829               	subwfb	clust2sect@clst+1,w,c
 15004  004ABC  5162               	movf	(??_clust2sect+2)& (0+255),w,b
 15005  004ABE  582A               	subwfb	clust2sect@clst+2,w,c
 15006  004AC0  5163               	movf	(??_clust2sect+3)& (0+255),w,b
 15007  004AC2  582B               	subwfb	clust2sect@clst+3,w,c
 15008  004AC4  A0D8               	btfss	status,0,c
 15009  004AC6  D009               	goto	l1098
 15010                           
 15011                           ; BSR set to: 0
 15012  004AC8  0E00               	movlw	0
 15013  004ACA  6E26               	movwf	?_clust2sect,c
 15014  004ACC  0E00               	movlw	0
 15015  004ACE  6E27               	movwf	?_clust2sect+1,c
 15016  004AD0  0E00               	movlw	0
 15017  004AD2  6E28               	movwf	?_clust2sect+2,c
 15018  004AD4  0E00               	movlw	0
 15019  004AD6  6E29               	movwf	?_clust2sect+3,c
 15020                           
 15021                           ; BSR set to: 0
 15022  004AD8  0012               	return	
 15023  004ADA                     l1098:
 15024                           
 15025                           ; BSR set to: 0
 15026                           ;ff.c: 807: return clst * fs->csize + fs->database;
 15027                           
 15028                           ; BSR set to: 0
 15029  004ADA  EE20 F026          	lfsr	2,38
 15030  004ADE  5026               	movf	clust2sect@fs,w,c
 15031  004AE0  26D9               	addwf	fsr2l,f,c
 15032  004AE2  5027               	movf	clust2sect@fs+1,w,c
 15033  004AE4  22DA               	addwfc	fsr2h,f,c
 15034  004AE6  CFDE F060          	movff	postinc2,??_clust2sect
 15035  004AEA  CFDE F061          	movff	postinc2,??_clust2sect+1
 15036  004AEE  CFDE F062          	movff	postinc2,??_clust2sect+2
 15037  004AF2  CFDE F063          	movff	postinc2,??_clust2sect+3
 15038  004AF6  EE20 F002          	lfsr	2,2
 15039  004AFA  5026               	movf	clust2sect@fs,w,c
 15040  004AFC  26D9               	addwf	fsr2l,f,c
 15041  004AFE  5027               	movf	clust2sect@fs+1,w,c
 15042  004B00  22DA               	addwfc	fsr2h,f,c
 15043  004B02  50DF               	movf	indf2,w,c
 15044  004B04  6F64               	movwf	(??_clust2sect+4)& (0+255),b
 15045  004B06  5164               	movf	(??_clust2sect+4)& (0+255),w,b
 15046  004B08  6E1A               	movwf	___lmul@multiplier,c
 15047  004B0A  6A1B               	clrf	___lmul@multiplier+1,c
 15048  004B0C  6A1C               	clrf	___lmul@multiplier+2,c
 15049  004B0E  6A1D               	clrf	___lmul@multiplier+3,c
 15050  004B10  C028  F01E         	movff	clust2sect@clst,___lmul@multiplicand
 15051  004B14  C029  F01F         	movff	clust2sect@clst+1,___lmul@multiplicand+1
 15052  004B18  C02A  F020         	movff	clust2sect@clst+2,___lmul@multiplicand+2
 15053  004B1C  C02B  F021         	movff	clust2sect@clst+3,___lmul@multiplicand+3
 15054  004B20  EC24  F02B         	call	___lmul	;wreg free
 15055  004B24  0100               	movlb	0	; () banked
 15056  004B26  5160               	movf	??_clust2sect& (0+255),w,b
 15057  004B28  241A               	addwf	?___lmul,w,c
 15058  004B2A  6E26               	movwf	?_clust2sect,c
 15059  004B2C  5161               	movf	(??_clust2sect+1)& (0+255),w,b
 15060  004B2E  201B               	addwfc	?___lmul+1,w,c
 15061  004B30  6E27               	movwf	?_clust2sect+1,c
 15062  004B32  5162               	movf	(??_clust2sect+2)& (0+255),w,b
 15063  004B34  201C               	addwfc	?___lmul+2,w,c
 15064  004B36  6E28               	movwf	?_clust2sect+2,c
 15065  004B38  5163               	movf	(??_clust2sect+3)& (0+255),w,b
 15066  004B3A  201D               	addwfc	?___lmul+3,w,c
 15067  004B3C  6E29               	movwf	?_clust2sect+3,c
 15068  004B3E  0012               	return	
 15069  004B40                     __end_of_clust2sect:
 15070                           	opt stack 0
 15071                           tosu	equ	0xFFF
 15072                           tosh	equ	0xFFE
 15073                           tosl	equ	0xFFD
 15074                           pclath	equ	0xFFA
 15075                           tblptru	equ	0xFF8
 15076                           tblptrh	equ	0xFF7
 15077                           tblptrl	equ	0xFF6
 15078                           tablat	equ	0xFF5
 15079                           prodh	equ	0xFF4
 15080                           prodl	equ	0xFF3
 15081                           intcon	equ	0xFF2
 15082                           intcon2	equ	0xFF1
 15083                           intcon3	equ	0xFF0
 15084                           indf0	equ	0xFEF
 15085                           postinc0	equ	0xFEE
 15086                           fsr0h	equ	0xFEA
 15087                           fsr0l	equ	0xFE9
 15088                           wreg	equ	0xFE8
 15089                           indf1	equ	0xFE7
 15090                           postinc1	equ	0xFE6
 15091                           postdec1	equ	0xFE5
 15092                           fsr1h	equ	0xFE2
 15093                           fsr1l	equ	0xFE1
 15094                           indf2	equ	0xFDF
 15095                           postinc2	equ	0xFDE
 15096                           postdec2	equ	0xFDD
 15097                           plusw2	equ	0xFDB
 15098                           fsr2h	equ	0xFDA
 15099                           fsr2l	equ	0xFD9
 15100                           status	equ	0xFD8
 15101                           
 15102 ;; *************** function ___lmul *****************
 15103 ;; Defined at:
 15104 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 15105 ;; Parameters:    Size  Location     Type
 15106 ;;  multiplier      4   25[COMRAM] unsigned long 
 15107 ;;  multiplicand    4   29[COMRAM] unsigned long 
 15108 ;; Auto vars:     Size  Location     Type
 15109 ;;  product         4   33[COMRAM] unsigned long 
 15110 ;; Return value:  Size  Location     Type
 15111 ;;                  4   25[COMRAM] unsigned long 
 15112 ;; Registers used:
 15113 ;;		wreg, status,2, status,0
 15114 ;; Tracked objects:
 15115 ;;		On entry : 0/0
 15116 ;;		On exit  : 0/0
 15117 ;;		Unchanged: 0/0
 15118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15119 ;;      Params:         8       0       0       0       0       0       0       0       0
 15120 ;;      Locals:         4       0       0       0       0       0       0       0       0
 15121 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15122 ;;      Totals:        12       0       0       0       0       0       0       0       0
 15123 ;;Total ram usage:       12 bytes
 15124 ;; Hardware stack levels used:    1
 15125 ;; Hardware stack levels required when called:    2
 15126 ;; This function calls:
 15127 ;;		Nothing
 15128 ;; This function is called by:
 15129 ;;		_clust2sect
 15130 ;;		_find_volume
 15131 ;;		_strtod
 15132 ;;		_atol
 15133 ;; This function uses a non-reentrant model
 15134 ;;
 15135                           
 15136                           	psect	text39
 15137  005648                     __ptext39:
 15138                           	opt stack 0
 15139  005648                     ___lmul:
 15140                           	opt stack 24
 15141                           
 15142                           ; BSR set to: 0
 15143                           ;incstack = 0
 15144  005648  0E00               	movlw	0
 15145  00564A  6E22               	movwf	___lmul@product,c
 15146  00564C  0E00               	movlw	0
 15147  00564E  6E23               	movwf	___lmul@product+1,c
 15148  005650  0E00               	movlw	0
 15149  005652  6E24               	movwf	___lmul@product+2,c
 15150  005654  0E00               	movlw	0
 15151  005656  6E25               	movwf	___lmul@product+3,c
 15152  005658  A01A               	btfss	___lmul@multiplier,0,c
 15153  00565A  D008               	goto	l1653
 15154  00565C  501E               	movf	___lmul@multiplicand,w,c
 15155  00565E  2622               	addwf	___lmul@product,f,c
 15156  005660  501F               	movf	___lmul@multiplicand+1,w,c
 15157  005662  2223               	addwfc	___lmul@product+1,f,c
 15158  005664  5020               	movf	___lmul@multiplicand+2,w,c
 15159  005666  2224               	addwfc	___lmul@product+2,f,c
 15160  005668  5021               	movf	___lmul@multiplicand+3,w,c
 15161  00566A  2225               	addwfc	___lmul@product+3,f,c
 15162  00566C                     l1653:
 15163  00566C  90D8               	bcf	status,0,c
 15164  00566E  361E               	rlcf	___lmul@multiplicand,f,c
 15165  005670  361F               	rlcf	___lmul@multiplicand+1,f,c
 15166  005672  3620               	rlcf	___lmul@multiplicand+2,f,c
 15167  005674  3621               	rlcf	___lmul@multiplicand+3,f,c
 15168  005676  90D8               	bcf	status,0,c
 15169  005678  321D               	rrcf	___lmul@multiplier+3,f,c
 15170  00567A  321C               	rrcf	___lmul@multiplier+2,f,c
 15171  00567C  321B               	rrcf	___lmul@multiplier+1,f,c
 15172  00567E  321A               	rrcf	___lmul@multiplier,f,c
 15173  005680  501A               	movf	___lmul@multiplier,w,c
 15174  005682  101B               	iorwf	___lmul@multiplier+1,w,c
 15175  005684  101C               	iorwf	___lmul@multiplier+2,w,c
 15176  005686  101D               	iorwf	___lmul@multiplier+3,w,c
 15177  005688  A4D8               	btfss	status,2,c
 15178  00568A  D7E6               	goto	l1652
 15179  00568C  C022  F01A         	movff	___lmul@product,?___lmul
 15180  005690  C023  F01B         	movff	___lmul@product+1,?___lmul+1
 15181  005694  C024  F01C         	movff	___lmul@product+2,?___lmul+2
 15182  005698  C025  F01D         	movff	___lmul@product+3,?___lmul+3
 15183  00569C  0012               	return		;funcret
 15184  00569E                     __end_of___lmul:
 15185                           	opt stack 0
 15186                           tosu	equ	0xFFF
 15187                           tosh	equ	0xFFE
 15188                           tosl	equ	0xFFD
 15189                           pclath	equ	0xFFA
 15190                           tblptru	equ	0xFF8
 15191                           tblptrh	equ	0xFF7
 15192                           tblptrl	equ	0xFF6
 15193                           tablat	equ	0xFF5
 15194                           prodh	equ	0xFF4
 15195                           prodl	equ	0xFF3
 15196                           intcon	equ	0xFF2
 15197                           intcon2	equ	0xFF1
 15198                           intcon3	equ	0xFF0
 15199                           indf0	equ	0xFEF
 15200                           postinc0	equ	0xFEE
 15201                           fsr0h	equ	0xFEA
 15202                           fsr0l	equ	0xFE9
 15203                           wreg	equ	0xFE8
 15204                           indf1	equ	0xFE7
 15205                           postinc1	equ	0xFE6
 15206                           postdec1	equ	0xFE5
 15207                           fsr1h	equ	0xFE2
 15208                           fsr1l	equ	0xFE1
 15209                           indf2	equ	0xFDF
 15210                           postinc2	equ	0xFDE
 15211                           postdec2	equ	0xFDD
 15212                           plusw2	equ	0xFDB
 15213                           fsr2h	equ	0xFDA
 15214                           fsr2l	equ	0xFD9
 15215                           status	equ	0xFD8
 15216                           
 15217 ;; *************** function ___lldiv *****************
 15218 ;; Defined at:
 15219 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 15220 ;; Parameters:    Size  Location     Type
 15221 ;;  dividend        4   25[COMRAM] unsigned long 
 15222 ;;  divisor         4   29[COMRAM] unsigned long 
 15223 ;; Auto vars:     Size  Location     Type
 15224 ;;  quotient        4   33[COMRAM] unsigned long 
 15225 ;;  counter         1   37[COMRAM] unsigned char 
 15226 ;; Return value:  Size  Location     Type
 15227 ;;                  4   25[COMRAM] unsigned long 
 15228 ;; Registers used:
 15229 ;;		wreg, status,2, status,0
 15230 ;; Tracked objects:
 15231 ;;		On entry : 0/0
 15232 ;;		On exit  : 0/0
 15233 ;;		Unchanged: 0/0
 15234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15235 ;;      Params:         8       0       0       0       0       0       0       0       0
 15236 ;;      Locals:         5       0       0       0       0       0       0       0       0
 15237 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15238 ;;      Totals:        13       0       0       0       0       0       0       0       0
 15239 ;;Total ram usage:       13 bytes
 15240 ;; Hardware stack levels used:    1
 15241 ;; Hardware stack levels required when called:    2
 15242 ;; This function calls:
 15243 ;;		Nothing
 15244 ;; This function is called by:
 15245 ;;		_find_volume
 15246 ;;		_f_lseek
 15247 ;;		_convert_time_to_utc
 15248 ;;		_sprintf
 15249 ;; This function uses a non-reentrant model
 15250 ;;
 15251                           
 15252                           	psect	text40
 15253  00522E                     __ptext40:
 15254                           	opt stack 0
 15255  00522E                     ___lldiv:
 15256                           	opt stack 24
 15257                           
 15258                           ;incstack = 0
 15259  00522E  0E00               	movlw	0
 15260  005230  6E22               	movwf	___lldiv@quotient,c
 15261  005232  0E00               	movlw	0
 15262  005234  6E23               	movwf	___lldiv@quotient+1,c
 15263  005236  0E00               	movlw	0
 15264  005238  6E24               	movwf	___lldiv@quotient+2,c
 15265  00523A  0E00               	movlw	0
 15266  00523C  6E25               	movwf	___lldiv@quotient+3,c
 15267  00523E  501E               	movf	___lldiv@divisor,w,c
 15268  005240  101F               	iorwf	___lldiv@divisor+1,w,c
 15269  005242  1020               	iorwf	___lldiv@divisor+2,w,c
 15270  005244  1021               	iorwf	___lldiv@divisor+3,w,c
 15271  005246  B4D8               	btfsc	status,2,c
 15272  005248  D02A               	goto	l2133
 15273  00524A  0E01               	movlw	1
 15274  00524C  6E26               	movwf	___lldiv@counter,c
 15275  00524E  D006               	goto	l2128
 15276  005250  90D8               	bcf	status,0,c
 15277  005252  361E               	rlcf	___lldiv@divisor,f,c
 15278  005254  361F               	rlcf	___lldiv@divisor+1,f,c
 15279  005256  3620               	rlcf	___lldiv@divisor+2,f,c
 15280  005258  3621               	rlcf	___lldiv@divisor+3,f,c
 15281  00525A  2A26               	incf	___lldiv@counter,f,c
 15282  00525C                     l2128:
 15283  00525C  AE21               	btfss	___lldiv@divisor+3,7,c
 15284  00525E  D7F8               	goto	l2129
 15285  005260                     u16360:
 15286  005260  90D8               	bcf	status,0,c
 15287  005262  3622               	rlcf	___lldiv@quotient,f,c
 15288  005264  3623               	rlcf	___lldiv@quotient+1,f,c
 15289  005266  3624               	rlcf	___lldiv@quotient+2,f,c
 15290  005268  3625               	rlcf	___lldiv@quotient+3,f,c
 15291  00526A  501E               	movf	___lldiv@divisor,w,c
 15292  00526C  5C1A               	subwf	___lldiv@dividend,w,c
 15293  00526E  501F               	movf	___lldiv@divisor+1,w,c
 15294  005270  581B               	subwfb	___lldiv@dividend+1,w,c
 15295  005272  5020               	movf	___lldiv@divisor+2,w,c
 15296  005274  581C               	subwfb	___lldiv@dividend+2,w,c
 15297  005276  5021               	movf	___lldiv@divisor+3,w,c
 15298  005278  581D               	subwfb	___lldiv@dividend+3,w,c
 15299  00527A  A0D8               	btfss	status,0,c
 15300  00527C  D009               	goto	l2132
 15301  00527E  501E               	movf	___lldiv@divisor,w,c
 15302  005280  5E1A               	subwf	___lldiv@dividend,f,c
 15303  005282  501F               	movf	___lldiv@divisor+1,w,c
 15304  005284  5A1B               	subwfb	___lldiv@dividend+1,f,c
 15305  005286  5020               	movf	___lldiv@divisor+2,w,c
 15306  005288  5A1C               	subwfb	___lldiv@dividend+2,f,c
 15307  00528A  5021               	movf	___lldiv@divisor+3,w,c
 15308  00528C  5A1D               	subwfb	___lldiv@dividend+3,f,c
 15309  00528E  8022               	bsf	___lldiv@quotient,0,c
 15310  005290                     l2132:
 15311  005290  90D8               	bcf	status,0,c
 15312  005292  3221               	rrcf	___lldiv@divisor+3,f,c
 15313  005294  3220               	rrcf	___lldiv@divisor+2,f,c
 15314  005296  321F               	rrcf	___lldiv@divisor+1,f,c
 15315  005298  321E               	rrcf	___lldiv@divisor,f,c
 15316  00529A  2E26               	decfsz	___lldiv@counter,f,c
 15317  00529C  D7E1               	goto	u16360
 15318  00529E                     l2133:
 15319  00529E  C022  F01A         	movff	___lldiv@quotient,?___lldiv
 15320  0052A2  C023  F01B         	movff	___lldiv@quotient+1,?___lldiv+1
 15321  0052A6  C024  F01C         	movff	___lldiv@quotient+2,?___lldiv+2
 15322  0052AA  C025  F01D         	movff	___lldiv@quotient+3,?___lldiv+3
 15323  0052AE  0012               	return		;funcret
 15324  0052B0                     __end_of___lldiv:
 15325                           	opt stack 0
 15326                           tosu	equ	0xFFF
 15327                           tosh	equ	0xFFE
 15328                           tosl	equ	0xFFD
 15329                           pclath	equ	0xFFA
 15330                           tblptru	equ	0xFF8
 15331                           tblptrh	equ	0xFF7
 15332                           tblptrl	equ	0xFF6
 15333                           tablat	equ	0xFF5
 15334                           prodh	equ	0xFF4
 15335                           prodl	equ	0xFF3
 15336                           intcon	equ	0xFF2
 15337                           intcon2	equ	0xFF1
 15338                           intcon3	equ	0xFF0
 15339                           indf0	equ	0xFEF
 15340                           postinc0	equ	0xFEE
 15341                           fsr0h	equ	0xFEA
 15342                           fsr0l	equ	0xFE9
 15343                           wreg	equ	0xFE8
 15344                           indf1	equ	0xFE7
 15345                           postinc1	equ	0xFE6
 15346                           postdec1	equ	0xFE5
 15347                           fsr1h	equ	0xFE2
 15348                           fsr1l	equ	0xFE1
 15349                           indf2	equ	0xFDF
 15350                           postinc2	equ	0xFDE
 15351                           postdec2	equ	0xFDD
 15352                           plusw2	equ	0xFDB
 15353                           fsr2h	equ	0xFDA
 15354                           fsr2l	equ	0xFD9
 15355                           status	equ	0xFD8
 15356                           
 15357 ;; *************** function _f_close *****************
 15358 ;; Defined at:
 15359 ;;		line 2861 in file "bibliotecas/ff.c"
 15360 ;; Parameters:    Size  Location     Type
 15361 ;;  fp              2   88[BANK0 ] PTR struct .
 15362 ;;		 -> SDCard@fil(32), 
 15363 ;; Auto vars:     Size  Location     Type
 15364 ;;  res             1   90[BANK0 ] enum E75
 15365 ;; Return value:  Size  Location     Type
 15366 ;;                  1    wreg      enum E3916
 15367 ;; Registers used:
 15368 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15369 ;; Tracked objects:
 15370 ;;		On entry : 0/0
 15371 ;;		On exit  : 0/0
 15372 ;;		Unchanged: 0/0
 15373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15374 ;;      Params:         0       2       0       0       0       0       0       0       0
 15375 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15376 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15377 ;;      Totals:         0       3       0       0       0       0       0       0       0
 15378 ;;Total ram usage:        3 bytes
 15379 ;; Hardware stack levels used:    1
 15380 ;; Hardware stack levels required when called:   12
 15381 ;; This function calls:
 15382 ;;		_f_sync
 15383 ;;		_validate
 15384 ;; This function is called by:
 15385 ;;		_SDCard
 15386 ;; This function uses a non-reentrant model
 15387 ;;
 15388                           
 15389                           	psect	text41
 15390  0058A2                     __ptext41:
 15391                           	opt stack 0
 15392  0058A2                     _f_close:
 15393                           	opt stack 16
 15394                           
 15395                           ;ff.c: 2865: FRESULT res;
 15396                           ;ff.c: 2869: res = f_sync(fp);
 15397                           
 15398                           ;incstack = 0
 15399  0058A2  C0B8  F0AF         	movff	f_close@fp,f_sync@fp
 15400  0058A6  C0B9  F0B0         	movff	f_close@fp+1,f_sync@fp+1
 15401  0058AA  ECB6  F01E         	call	_f_sync	;wreg free
 15402  0058AE  0100               	movlb	0	; () banked
 15403  0058B0  6FBA               	movwf	f_close@res& (0+255),b
 15404                           
 15405                           ; BSR set to: 0
 15406                           ;ff.c: 2870: if (res == FR_OK)
 15407  0058B2  51BA               	movf	f_close@res& (0+255),w,b
 15408  0058B4  A4D8               	btfss	status,2,c
 15409  0058B6  0012               	return	
 15410                           
 15411                           ; BSR set to: 0
 15412                           ;ff.c: 2872: {
 15413                           ;ff.c: 2873: res = validate(fp);
 15414  0058B8  C0B8  F01B         	movff	f_close@fp,validate@obj
 15415  0058BC  C0B9  F01C         	movff	f_close@fp+1,validate@obj+1
 15416  0058C0  EC02  F028         	call	_validate	;wreg free
 15417  0058C4  0100               	movlb	0	; () banked
 15418  0058C6  6FBA               	movwf	f_close@res& (0+255),b
 15419                           
 15420                           ; BSR set to: 0
 15421                           ;ff.c: 2874: if (res == FR_OK) {
 15422  0058C8  51BA               	movf	f_close@res& (0+255),w,b
 15423  0058CA  A4D8               	btfss	status,2,c
 15424  0058CC  0012               	return	
 15425                           
 15426                           ; BSR set to: 0
 15427                           ;ff.c: 2882: fp->fs = 0;
 15428  0058CE  C0B8  FFD9         	movff	f_close@fp,fsr2l
 15429  0058D2  C0B9  FFDA         	movff	f_close@fp+1,fsr2h
 15430  0058D6  0E00               	movlw	0
 15431  0058D8  6EDE               	movwf	postinc2,c
 15432  0058DA  0E00               	movlw	0
 15433  0058DC  6EDD               	movwf	postdec2,c
 15434                           
 15435                           ; BSR set to: 0
 15436                           
 15437                           ; BSR set to: 0
 15438  0058DE  0012               	return	
 15439  0058E0                     __end_of_f_close:
 15440                           	opt stack 0
 15441                           tosu	equ	0xFFF
 15442                           tosh	equ	0xFFE
 15443                           tosl	equ	0xFFD
 15444                           pclath	equ	0xFFA
 15445                           tblptru	equ	0xFF8
 15446                           tblptrh	equ	0xFF7
 15447                           tblptrl	equ	0xFF6
 15448                           tablat	equ	0xFF5
 15449                           prodh	equ	0xFF4
 15450                           prodl	equ	0xFF3
 15451                           intcon	equ	0xFF2
 15452                           intcon2	equ	0xFF1
 15453                           intcon3	equ	0xFF0
 15454                           indf0	equ	0xFEF
 15455                           postinc0	equ	0xFEE
 15456                           fsr0h	equ	0xFEA
 15457                           fsr0l	equ	0xFE9
 15458                           wreg	equ	0xFE8
 15459                           indf1	equ	0xFE7
 15460                           postinc1	equ	0xFE6
 15461                           postdec1	equ	0xFE5
 15462                           fsr1h	equ	0xFE2
 15463                           fsr1l	equ	0xFE1
 15464                           indf2	equ	0xFDF
 15465                           postinc2	equ	0xFDE
 15466                           postdec2	equ	0xFDD
 15467                           plusw2	equ	0xFDB
 15468                           fsr2h	equ	0xFDA
 15469                           fsr2l	equ	0xFD9
 15470                           status	equ	0xFD8
 15471                           
 15472 ;; *************** function _f_sync *****************
 15473 ;; Defined at:
 15474 ;;		line 2813 in file "bibliotecas/ff.c"
 15475 ;; Parameters:    Size  Location     Type
 15476 ;;  fp              2   79[BANK0 ] PTR struct .
 15477 ;;		 -> SDCard@fil(32), 
 15478 ;; Auto vars:     Size  Location     Type
 15479 ;;  tm              4   81[BANK0 ] unsigned long 
 15480 ;;  dir             2   86[BANK0 ] PTR unsigned char 
 15481 ;;		 -> NULL(0), fs(558), 
 15482 ;;  res             1   85[BANK0 ] enum E75
 15483 ;; Return value:  Size  Location     Type
 15484 ;;                  1    wreg      enum E75
 15485 ;; Registers used:
 15486 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15487 ;; Tracked objects:
 15488 ;;		On entry : 0/0
 15489 ;;		On exit  : 0/0
 15490 ;;		Unchanged: 0/0
 15491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15492 ;;      Params:         0       2       0       0       0       0       0       0       0
 15493 ;;      Locals:         0       7       0       0       0       0       0       0       0
 15494 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15495 ;;      Totals:         0       9       0       0       0       0       0       0       0
 15496 ;;Total ram usage:        9 bytes
 15497 ;; Hardware stack levels used:    1
 15498 ;; Hardware stack levels required when called:   11
 15499 ;; This function calls:
 15500 ;;		_move_window
 15501 ;;		_st_clust
 15502 ;;		_sync_fs
 15503 ;;		_validate
 15504 ;; This function is called by:
 15505 ;;		_f_close
 15506 ;; This function uses a non-reentrant model
 15507 ;;
 15508                           
 15509                           	psect	text42
 15510  003D6C                     __ptext42:
 15511                           	opt stack 0
 15512  003D6C                     _f_sync:
 15513                           	opt stack 16
 15514                           
 15515                           ;ff.c: 2817: FRESULT res;
 15516                           ;ff.c: 2818: DWORD tm;
 15517                           ;ff.c: 2819: BYTE *dir;
 15518                           ;ff.c: 2822: res = validate(fp);
 15519                           
 15520                           ; BSR set to: 0
 15521                           ;incstack = 0
 15522  003D6C  C0AF  F01B         	movff	f_sync@fp,validate@obj
 15523  003D70  C0B0  F01C         	movff	f_sync@fp+1,validate@obj+1
 15524  003D74  EC02  F028         	call	_validate	;wreg free
 15525  003D78  0100               	movlb	0	; () banked
 15526  003D7A  6FB5               	movwf	f_sync@res& (0+255),b
 15527                           
 15528                           ; BSR set to: 0
 15529                           ;ff.c: 2823: if (res == FR_OK) {
 15530  003D7C  51B5               	movf	f_sync@res& (0+255),w,b
 15531  003D7E  A4D8               	btfss	status,2,c
 15532  003D80  D0A0               	goto	l1505
 15533                           
 15534                           ; BSR set to: 0
 15535                           ;ff.c: 2824: if (fp->flag & 0x20) {
 15536  003D82  EE20 F004          	lfsr	2,4
 15537  003D86  51AF               	movf	f_sync@fp& (0+255),w,b
 15538  003D88  26D9               	addwf	fsr2l,f,c
 15539  003D8A  51B0               	movf	(f_sync@fp+1)& (0+255),w,b
 15540  003D8C  22DA               	addwfc	fsr2h,f,c
 15541  003D8E  AADF               	btfss	indf2,5,c
 15542  003D90  D098               	goto	l1505
 15543                           
 15544                           ; BSR set to: 0
 15545                           ;ff.c: 2833: res = move_window(fp->fs, fp->dir_sect);
 15546  003D92  C0AF  FFD9         	movff	f_sync@fp,fsr2l
 15547  003D96  C0B0  FFDA         	movff	f_sync@fp+1,fsr2h
 15548  003D9A  CFDE F09A          	movff	postinc2,move_window@fs
 15549  003D9E  CFDD F09B          	movff	postdec2,move_window@fs+1
 15550  003DA2  EE20 F01A          	lfsr	2,26
 15551  003DA6  51AF               	movf	f_sync@fp& (0+255),w,b
 15552  003DA8  26D9               	addwf	fsr2l,f,c
 15553  003DAA  51B0               	movf	(f_sync@fp+1)& (0+255),w,b
 15554  003DAC  22DA               	addwfc	fsr2h,f,c
 15555  003DAE  CFDE F09C          	movff	postinc2,move_window@sector
 15556  003DB2  CFDE F09D          	movff	postinc2,move_window@sector+1
 15557  003DB6  CFDE F09E          	movff	postinc2,move_window@sector+2
 15558  003DBA  CFDE F09F          	movff	postinc2,move_window@sector+3
 15559  003DBE  EC0A  F027         	call	_move_window	;wreg free
 15560  003DC2  0100               	movlb	0	; () banked
 15561  003DC4  6FB5               	movwf	f_sync@res& (0+255),b
 15562                           
 15563                           ; BSR set to: 0
 15564                           ;ff.c: 2834: if (res == FR_OK) {
 15565  003DC6  51B5               	movf	f_sync@res& (0+255),w,b
 15566  003DC8  A4D8               	btfss	status,2,c
 15567  003DCA  D07B               	goto	l1505
 15568                           
 15569                           ; BSR set to: 0
 15570                           ;ff.c: 2835: dir = fp->dir_ptr;
 15571  003DCC  EE20 F01E          	lfsr	2,30
 15572  003DD0  51AF               	movf	f_sync@fp& (0+255),w,b
 15573  003DD2  26D9               	addwf	fsr2l,f,c
 15574  003DD4  51B0               	movf	(f_sync@fp+1)& (0+255),w,b
 15575  003DD6  22DA               	addwfc	fsr2h,f,c
 15576  003DD8  CFDE F0B6          	movff	postinc2,f_sync@dir
 15577  003DDC  CFDD F0B7          	movff	postdec2,f_sync@dir+1
 15578                           
 15579                           ;ff.c: 2836: dir[11] |= 0x20;
 15580  003DE0  EE20 F00B          	lfsr	2,11
 15581  003DE4  51B6               	movf	f_sync@dir& (0+255),w,b
 15582  003DE6  26D9               	addwf	fsr2l,f,c
 15583  003DE8  51B7               	movf	(f_sync@dir+1)& (0+255),w,b
 15584  003DEA  22DA               	addwfc	fsr2h,f,c
 15585  003DEC  0E00               	movlw	0
 15586  003DEE  8ADB               	bsf	plusw2,5,c
 15587                           
 15588                           ; BSR set to: 0
 15589                           ;ff.c: 2837: *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(fp->fsize);
 15590  003DF0  EE20 F00A          	lfsr	2,10
 15591  003DF4  51AF               	movf	f_sync@fp& (0+255),w,b
 15592  003DF6  26D9               	addwf	fsr2l,f,c
 15593  003DF8  51B0               	movf	(f_sync@fp+1)& (0+255),w,b
 15594  003DFA  22DA               	addwfc	fsr2h,f,c
 15595  003DFC  EE10 F01C          	lfsr	1,28
 15596  003E00  51B6               	movf	f_sync@dir& (0+255),w,b
 15597  003E02  26E1               	addwf	fsr1l,f,c
 15598  003E04  51B7               	movf	(f_sync@dir+1)& (0+255),w,b
 15599  003E06  22E2               	addwfc	fsr1h,f,c
 15600  003E08  CFDE FFE6          	movff	postinc2,postinc1
 15601  003E0C  CFDE FFE6          	movff	postinc2,postinc1
 15602  003E10  CFDE FFE6          	movff	postinc2,postinc1
 15603  003E14  CFDE FFE6          	movff	postinc2,postinc1
 15604                           
 15605                           ; BSR set to: 0
 15606                           ;ff.c: 2838: st_clust(dir, fp->sclust);
 15607  003E18  C0B6  F01A         	movff	f_sync@dir,st_clust@dir
 15608  003E1C  C0B7  F01B         	movff	f_sync@dir+1,st_clust@dir+1
 15609  003E20  EE20 F00E          	lfsr	2,14
 15610  003E24  51AF               	movf	f_sync@fp& (0+255),w,b
 15611  003E26  26D9               	addwf	fsr2l,f,c
 15612  003E28  51B0               	movf	(f_sync@fp+1)& (0+255),w,b
 15613  003E2A  22DA               	addwfc	fsr2h,f,c
 15614  003E2C  CFDE F01C          	movff	postinc2,st_clust@cl
 15615  003E30  CFDE F01D          	movff	postinc2,st_clust@cl+1
 15616  003E34  CFDE F01E          	movff	postinc2,st_clust@cl+2
 15617  003E38  CFDE F01F          	movff	postinc2,st_clust@cl+3
 15618  003E3C  EC15  F02D         	call	_st_clust	;wreg free
 15619                           
 15620                           ;ff.c: 2839: tm = ((DWORD)(2015 - 1980) << 25 | (DWORD)1 << 21 | (DWORD)1 << 16);
 15621  003E40  0E00               	movlw	0
 15622  003E42  0100               	movlb	0	; () banked
 15623  003E44  6FB1               	movwf	f_sync@tm& (0+255),b
 15624  003E46  0E00               	movlw	0
 15625  003E48  6FB2               	movwf	(f_sync@tm+1)& (0+255),b
 15626  003E4A  0E21               	movlw	33
 15627  003E4C  6FB3               	movwf	(f_sync@tm+2)& (0+255),b
 15628  003E4E  0E46               	movlw	70
 15629  003E50  6FB4               	movwf	(f_sync@tm+3)& (0+255),b
 15630                           
 15631                           ; BSR set to: 0
 15632                           ;ff.c: 2840: *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(tm);
 15633  003E52  EE20 F016          	lfsr	2,22
 15634  003E56  51B6               	movf	f_sync@dir& (0+255),w,b
 15635  003E58  26D9               	addwf	fsr2l,f,c
 15636  003E5A  51B7               	movf	(f_sync@dir+1)& (0+255),w,b
 15637  003E5C  22DA               	addwfc	fsr2h,f,c
 15638  003E5E  C0B1  FFDE         	movff	f_sync@tm,postinc2
 15639  003E62  C0B2  FFDE         	movff	f_sync@tm+1,postinc2
 15640  003E66  C0B3  FFDE         	movff	f_sync@tm+2,postinc2
 15641  003E6A  C0B4  FFDE         	movff	f_sync@tm+3,postinc2
 15642                           
 15643                           ; BSR set to: 0
 15644                           ;ff.c: 2841: *(WORD*)(BYTE*)(dir + 18)=(WORD)(0);
 15645  003E6E  EE20 F012          	lfsr	2,18
 15646  003E72  51B6               	movf	f_sync@dir& (0+255),w,b
 15647  003E74  26D9               	addwf	fsr2l,f,c
 15648  003E76  51B7               	movf	(f_sync@dir+1)& (0+255),w,b
 15649  003E78  22DA               	addwfc	fsr2h,f,c
 15650  003E7A  0E00               	movlw	0
 15651  003E7C  6EDE               	movwf	postinc2,c
 15652  003E7E  0E00               	movlw	0
 15653  003E80  6EDD               	movwf	postdec2,c
 15654                           
 15655                           ; BSR set to: 0
 15656                           ;ff.c: 2842: fp->flag &= ~0x20;
 15657  003E82  EE20 F004          	lfsr	2,4
 15658  003E86  51AF               	movf	f_sync@fp& (0+255),w,b
 15659  003E88  26D9               	addwf	fsr2l,f,c
 15660  003E8A  51B0               	movf	(f_sync@fp+1)& (0+255),w,b
 15661  003E8C  22DA               	addwfc	fsr2h,f,c
 15662  003E8E  0EDF               	movlw	223
 15663  003E90  16DF               	andwf	indf2,f,c
 15664                           
 15665                           ; BSR set to: 0
 15666                           ;ff.c: 2843: fp->fs->wflag = 1;
 15667  003E92  C0AF  FFD9         	movff	f_sync@fp,fsr2l
 15668  003E96  C0B0  FFDA         	movff	f_sync@fp+1,fsr2h
 15669  003E9A  EE10 F004          	lfsr	1,4
 15670  003E9E  50DE               	movf	postinc2,w,c
 15671  003EA0  26E1               	addwf	fsr1l,f,c
 15672  003EA2  50DD               	movf	postdec2,w,c
 15673  003EA4  22E2               	addwfc	fsr1h,f,c
 15674  003EA6  0E01               	movlw	1
 15675  003EA8  6EE7               	movwf	indf1,c
 15676                           
 15677                           ; BSR set to: 0
 15678                           ;ff.c: 2844: res = sync_fs(fp->fs);
 15679  003EAA  C0AF  FFD9         	movff	f_sync@fp,fsr2l
 15680  003EAE  C0B0  FFDA         	movff	f_sync@fp+1,fsr2h
 15681  003EB2  CFDE F0A4          	movff	postinc2,sync_fs@fs
 15682  003EB6  CFDD F0A5          	movff	postdec2,sync_fs@fs+1
 15683  003EBA  EC69  F01C         	call	_sync_fs	;wreg free
 15684  003EBE  0100               	movlb	0	; () banked
 15685  003EC0  6FB5               	movwf	f_sync@res& (0+255),b
 15686  003EC2                     l1505:
 15687                           
 15688                           ; BSR set to: 0
 15689                           ;ff.c: 2845: }
 15690                           ;ff.c: 2846: }
 15691                           ;ff.c: 2847: }
 15692                           ;ff.c: 2849: return res;
 15693                           
 15694                           ; BSR set to: 0
 15695                           
 15696                           ; BSR set to: 0
 15697                           
 15698                           ; BSR set to: 0
 15699  003EC2  51B5               	movf	f_sync@res& (0+255),w,b
 15700  003EC4  0012               	return	
 15701  003EC6                     __end_of_f_sync:
 15702                           	opt stack 0
 15703                           tosu	equ	0xFFF
 15704                           tosh	equ	0xFFE
 15705                           tosl	equ	0xFFD
 15706                           pclath	equ	0xFFA
 15707                           tblptru	equ	0xFF8
 15708                           tblptrh	equ	0xFF7
 15709                           tblptrl	equ	0xFF6
 15710                           tablat	equ	0xFF5
 15711                           prodh	equ	0xFF4
 15712                           prodl	equ	0xFF3
 15713                           intcon	equ	0xFF2
 15714                           intcon2	equ	0xFF1
 15715                           intcon3	equ	0xFF0
 15716                           indf0	equ	0xFEF
 15717                           postinc0	equ	0xFEE
 15718                           fsr0h	equ	0xFEA
 15719                           fsr0l	equ	0xFE9
 15720                           wreg	equ	0xFE8
 15721                           indf1	equ	0xFE7
 15722                           postinc1	equ	0xFE6
 15723                           postdec1	equ	0xFE5
 15724                           fsr1h	equ	0xFE2
 15725                           fsr1l	equ	0xFE1
 15726                           indf2	equ	0xFDF
 15727                           postinc2	equ	0xFDE
 15728                           postdec2	equ	0xFDD
 15729                           plusw2	equ	0xFDB
 15730                           fsr2h	equ	0xFDA
 15731                           fsr2l	equ	0xFD9
 15732                           status	equ	0xFD8
 15733                           
 15734 ;; *************** function _validate *****************
 15735 ;; Defined at:
 15736 ;;		line 2372 in file "bibliotecas/ff.c"
 15737 ;; Parameters:    Size  Location     Type
 15738 ;;  obj             2   26[COMRAM] PTR void 
 15739 ;;		 -> SDCard@fil(32), 
 15740 ;; Auto vars:     Size  Location     Type
 15741 ;;  fil             2   32[COMRAM] PTR struct .
 15742 ;;		 -> SDCard@fil(32), 
 15743 ;; Return value:  Size  Location     Type
 15744 ;;                  1    wreg      enum E75
 15745 ;; Registers used:
 15746 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 15747 ;; Tracked objects:
 15748 ;;		On entry : 0/0
 15749 ;;		On exit  : 0/0
 15750 ;;		Unchanged: 0/0
 15751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15752 ;;      Params:         2       0       0       0       0       0       0       0       0
 15753 ;;      Locals:         2       0       0       0       0       0       0       0       0
 15754 ;;      Temps:          4       0       0       0       0       0       0       0       0
 15755 ;;      Totals:         8       0       0       0       0       0       0       0       0
 15756 ;;Total ram usage:        8 bytes
 15757 ;; Hardware stack levels used:    1
 15758 ;; Hardware stack levels required when called:    3
 15759 ;; This function calls:
 15760 ;;		_disk_status
 15761 ;; This function is called by:
 15762 ;;		_f_write
 15763 ;;		_f_sync
 15764 ;;		_f_close
 15765 ;;		_f_lseek
 15766 ;;		_f_read
 15767 ;; This function uses a non-reentrant model
 15768 ;;
 15769                           
 15770                           	psect	text43
 15771  005004                     __ptext43:
 15772                           	opt stack 0
 15773  005004                     _validate:
 15774                           	opt stack 24
 15775                           
 15776                           ;ff.c: 2376: FIL *fil = (FIL*)obj;
 15777                           
 15778                           ; BSR set to: 0
 15779                           ;incstack = 0
 15780  005004  C01B  F021         	movff	validate@obj,validate@fil
 15781  005008  C01C  F022         	movff	validate@obj+1,validate@fil+1
 15782                           
 15783                           ;ff.c: 2379: if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (dis
      +                          k_status(fil->fs->drv) & 0x01))
 15784  00500C  5021               	movf	validate@fil,w,c
 15785  00500E  1022               	iorwf	validate@fil+1,w,c
 15786  005010  B4D8               	btfsc	status,2,c
 15787  005012  D03E               	goto	u16340
 15788  005014  C021  FFD9         	movff	validate@fil,fsr2l
 15789  005018  C022  FFDA         	movff	validate@fil+1,fsr2h
 15790  00501C  50DE               	movf	postinc2,w,c
 15791  00501E  10DE               	iorwf	postinc2,w,c
 15792  005020  B4D8               	btfsc	status,2,c
 15793  005022  D036               	goto	u16340
 15794  005024  C021  FFD9         	movff	validate@fil,fsr2l
 15795  005028  C022  FFDA         	movff	validate@fil+1,fsr2h
 15796  00502C  CFDE F01D          	movff	postinc2,??_validate
 15797  005030  CFDD F01E          	movff	postdec2,??_validate+1
 15798  005034  C01D  FFD9         	movff	??_validate,fsr2l
 15799  005038  C01E  FFDA         	movff	??_validate+1,fsr2h
 15800  00503C  50DF               	movf	indf2,w,c
 15801  00503E  B4D8               	btfsc	status,2,c
 15802  005040  D027               	goto	u16340
 15803  005042  EE20 F002          	lfsr	2,2
 15804  005046  5021               	movf	validate@fil,w,c
 15805  005048  26D9               	addwf	fsr2l,f,c
 15806  00504A  5022               	movf	validate@fil+1,w,c
 15807  00504C  22DA               	addwfc	fsr2h,f,c
 15808  00504E  C021  FFE1         	movff	validate@fil,fsr1l
 15809  005052  C022  FFE2         	movff	validate@fil+1,fsr1h
 15810  005056  EE00 F006          	lfsr	0,6
 15811  00505A  50E6               	movf	postinc1,w,c
 15812  00505C  26E9               	addwf	fsr0l,f,c
 15813  00505E  50E5               	movf	postdec1,w,c
 15814  005060  22EA               	addwfc	fsr0h,f,c
 15815  005062  50DE               	movf	postinc2,w,c
 15816  005064  18EE               	xorwf	postinc0,w,c
 15817  005066  E114               	bnz	l11987
 15818  005068  50DE               	movf	postinc2,w,c
 15819  00506A  18EE               	xorwf	postinc0,w,c
 15820  00506C  A4D8               	btfss	status,2,c
 15821  00506E  D010               	goto	u16340
 15822  005070  C021  FFD9         	movff	validate@fil,fsr2l
 15823  005074  C022  FFDA         	movff	validate@fil+1,fsr2h
 15824  005078  EE10 F001          	lfsr	1,1
 15825  00507C  50DE               	movf	postinc2,w,c
 15826  00507E  26E1               	addwf	fsr1l,f,c
 15827  005080  50DD               	movf	postdec2,w,c
 15828  005082  22E2               	addwfc	fsr1h,f,c
 15829  005084  50E7               	movf	indf1,w,c
 15830  005086  ECB2  F02D         	call	_disk_status
 15831  00508A  6E1D               	movwf	??_validate& (0+255),c
 15832  00508C  A01D               	btfss	??_validate,0,c
 15833  00508E  D002               	goto	l1408
 15834  005090                     u16340:
 15835  005090                     l11987:
 15836                           
 15837                           ;ff.c: 2380: return FR_INVALID_OBJECT;
 15838  005090  0E09               	movlw	9
 15839  005092  0012               	return	
 15840  005094                     l1408:
 15841                           
 15842                           ;ff.c: 2382: ;
 15843                           ;ff.c: 2384: return FR_OK;
 15844  005094  0E00               	movlw	0
 15845  005096  0012               	return	
 15846  005098                     __end_of_validate:
 15847                           	opt stack 0
 15848                           tosu	equ	0xFFF
 15849                           tosh	equ	0xFFE
 15850                           tosl	equ	0xFFD
 15851                           pclath	equ	0xFFA
 15852                           tblptru	equ	0xFF8
 15853                           tblptrh	equ	0xFF7
 15854                           tblptrl	equ	0xFF6
 15855                           tablat	equ	0xFF5
 15856                           prodh	equ	0xFF4
 15857                           prodl	equ	0xFF3
 15858                           intcon	equ	0xFF2
 15859                           intcon2	equ	0xFF1
 15860                           intcon3	equ	0xFF0
 15861                           indf0	equ	0xFEF
 15862                           postinc0	equ	0xFEE
 15863                           fsr0h	equ	0xFEA
 15864                           fsr0l	equ	0xFE9
 15865                           wreg	equ	0xFE8
 15866                           indf1	equ	0xFE7
 15867                           postinc1	equ	0xFE6
 15868                           postdec1	equ	0xFE5
 15869                           fsr1h	equ	0xFE2
 15870                           fsr1l	equ	0xFE1
 15871                           indf2	equ	0xFDF
 15872                           postinc2	equ	0xFDE
 15873                           postdec2	equ	0xFDD
 15874                           plusw2	equ	0xFDB
 15875                           fsr2h	equ	0xFDA
 15876                           fsr2l	equ	0xFD9
 15877                           status	equ	0xFD8
 15878                           
 15879 ;; *************** function _disk_status *****************
 15880 ;; Defined at:
 15881 ;;		line 393 in file "bibliotecas/diskio.c"
 15882 ;; Parameters:    Size  Location     Type
 15883 ;;  pdrv            1    wreg     unsigned char 
 15884 ;; Auto vars:     Size  Location     Type
 15885 ;;  pdrv            1   25[COMRAM] unsigned char 
 15886 ;; Return value:  Size  Location     Type
 15887 ;;                  1    wreg      unsigned char 
 15888 ;; Registers used:
 15889 ;;		wreg, status,2
 15890 ;; Tracked objects:
 15891 ;;		On entry : 0/0
 15892 ;;		On exit  : 0/0
 15893 ;;		Unchanged: 0/0
 15894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15895 ;;      Params:         0       0       0       0       0       0       0       0       0
 15896 ;;      Locals:         1       0       0       0       0       0       0       0       0
 15897 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15898 ;;      Totals:         1       0       0       0       0       0       0       0       0
 15899 ;;Total ram usage:        1 bytes
 15900 ;; Hardware stack levels used:    1
 15901 ;; Hardware stack levels required when called:    2
 15902 ;; This function calls:
 15903 ;;		Nothing
 15904 ;; This function is called by:
 15905 ;;		_find_volume
 15906 ;;		_validate
 15907 ;; This function uses a non-reentrant model
 15908 ;;
 15909                           
 15910                           	psect	text44
 15911  005B64                     __ptext44:
 15912                           	opt stack 0
 15913  005B64                     _disk_status:
 15914                           	opt stack 24
 15915                           
 15916                           ;incstack = 0
 15917                           ;disk_status@pdrv stored from wreg
 15918  005B64  6E1A               	movwf	disk_status@pdrv,c
 15919                           
 15920                           ;diskio.c: 397: if (pdrv) return 0x01;
 15921  005B66  501A               	movf	disk_status@pdrv,w,c
 15922  005B68  B4D8               	btfsc	status,2,c
 15923  005B6A  D002               	goto	l955
 15924  005B6C  0E01               	movlw	1
 15925  005B6E  0012               	return	
 15926  005B70                     l955:
 15927                           
 15928                           ;diskio.c: 398: return Stat;
 15929  005B70  0100               	movlb	0	; () banked
 15930  005B72  51FF               	movf	_Stat& (0+255),w,b
 15931  005B74  0012               	return	
 15932  005B76                     __end_of_disk_status:
 15933                           	opt stack 0
 15934                           tosu	equ	0xFFF
 15935                           tosh	equ	0xFFE
 15936                           tosl	equ	0xFFD
 15937                           pclath	equ	0xFFA
 15938                           tblptru	equ	0xFF8
 15939                           tblptrh	equ	0xFF7
 15940                           tblptrl	equ	0xFF6
 15941                           tablat	equ	0xFF5
 15942                           prodh	equ	0xFF4
 15943                           prodl	equ	0xFF3
 15944                           intcon	equ	0xFF2
 15945                           intcon2	equ	0xFF1
 15946                           intcon3	equ	0xFF0
 15947                           indf0	equ	0xFEF
 15948                           postinc0	equ	0xFEE
 15949                           fsr0h	equ	0xFEA
 15950                           fsr0l	equ	0xFE9
 15951                           wreg	equ	0xFE8
 15952                           indf1	equ	0xFE7
 15953                           postinc1	equ	0xFE6
 15954                           postdec1	equ	0xFE5
 15955                           fsr1h	equ	0xFE2
 15956                           fsr1l	equ	0xFE1
 15957                           indf2	equ	0xFDF
 15958                           postinc2	equ	0xFDE
 15959                           postdec2	equ	0xFDD
 15960                           plusw2	equ	0xFDB
 15961                           fsr2h	equ	0xFDA
 15962                           fsr2l	equ	0xFD9
 15963                           status	equ	0xFD8
 15964                           
 15965 ;; *************** function _sync_fs *****************
 15966 ;; Defined at:
 15967 ;;		line 760 in file "bibliotecas/ff.c"
 15968 ;; Parameters:    Size  Location     Type
 15969 ;;  fs              2   68[BANK0 ] PTR struct .
 15970 ;;		 -> NULL(0), fs(558), 
 15971 ;; Auto vars:     Size  Location     Type
 15972 ;;  res             1   78[BANK0 ] enum E75
 15973 ;; Return value:  Size  Location     Type
 15974 ;;                  1    wreg      enum E75
 15975 ;; Registers used:
 15976 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15977 ;; Tracked objects:
 15978 ;;		On entry : 0/0
 15979 ;;		On exit  : 0/0
 15980 ;;		Unchanged: 0/0
 15981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15982 ;;      Params:         0       2       0       0       0       0       0       0       0
 15983 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15984 ;;      Temps:          0       8       0       0       0       0       0       0       0
 15985 ;;      Totals:         0      11       0       0       0       0       0       0       0
 15986 ;;Total ram usage:       11 bytes
 15987 ;; Hardware stack levels used:    1
 15988 ;; Hardware stack levels required when called:   10
 15989 ;; This function calls:
 15990 ;;		_disk_ioctl
 15991 ;;		_disk_write
 15992 ;;		_mem_set
 15993 ;;		_sync_window
 15994 ;; This function is called by:
 15995 ;;		_f_sync
 15996 ;; This function uses a non-reentrant model
 15997 ;;
 15998                           
 15999                           	psect	text45
 16000  0038D2                     __ptext45:
 16001                           	opt stack 0
 16002  0038D2                     _sync_fs:
 16003                           	opt stack 16
 16004                           
 16005                           ;ff.c: 764: FRESULT res;
 16006                           ;ff.c: 767: res = sync_window(fs);
 16007                           
 16008                           ;incstack = 0
 16009  0038D2  C0A4  F085         	movff	sync_fs@fs,sync_window@fs
 16010  0038D6  C0A5  F086         	movff	sync_fs@fs+1,sync_window@fs+1
 16011  0038DA  EC4E  F01D         	call	_sync_window	;wreg free
 16012  0038DE  0100               	movlb	0	; () banked
 16013  0038E0  6FAE               	movwf	sync_fs@res& (0+255),b
 16014                           
 16015                           ; BSR set to: 0
 16016                           ;ff.c: 768: if (res == FR_OK) {
 16017  0038E2  51AE               	movf	sync_fs@res& (0+255),w,b
 16018  0038E4  A4D8               	btfss	status,2,c
 16019  0038E6  D0D7               	goto	l1094
 16020                           
 16021                           ; BSR set to: 0
 16022                           ;ff.c: 770: if (fs->fs_type == 3 && fs->fsi_flag == 1) {
 16023  0038E8  C0A4  FFD9         	movff	sync_fs@fs,fsr2l
 16024  0038EC  C0A5  FFDA         	movff	sync_fs@fs+1,fsr2h
 16025  0038F0  0E03               	movlw	3
 16026  0038F2  18DE               	xorwf	postinc2,w,c
 16027  0038F4  A4D8               	btfss	status,2,c
 16028  0038F6  D0BA               	goto	l1093
 16029                           
 16030                           ; BSR set to: 0
 16031  0038F8  EE20 F005          	lfsr	2,5
 16032  0038FC  51A4               	movf	sync_fs@fs& (0+255),w,b
 16033  0038FE  26D9               	addwf	fsr2l,f,c
 16034  003900  51A5               	movf	(sync_fs@fs+1)& (0+255),w,b
 16035  003902  22DA               	addwfc	fsr2h,f,c
 16036  003904  04DE               	decf	postinc2,w,c
 16037  003906  A4D8               	btfss	status,2,c
 16038  003908  D0B1               	goto	l1093
 16039                           
 16040                           ; BSR set to: 0
 16041                           ;ff.c: 772: mem_set(fs->win, 0, ((UINT)512));
 16042  00390A  0E2E               	movlw	46
 16043  00390C  25A4               	addwf	sync_fs@fs& (0+255),w,b
 16044  00390E  6E1A               	movwf	mem_set@dst,c
 16045  003910  0E00               	movlw	0
 16046  003912  21A5               	addwfc	(sync_fs@fs+1)& (0+255),w,b
 16047  003914  6E1B               	movwf	mem_set@dst+1,c
 16048  003916  0E00               	movlw	0
 16049  003918  6E1D               	movwf	mem_set@val+1,c
 16050  00391A  0E00               	movlw	0
 16051  00391C  6E1C               	movwf	mem_set@val,c
 16052  00391E  0E02               	movlw	2
 16053  003920  6E1F               	movwf	mem_set@cnt+1,c
 16054  003922  0E00               	movlw	0
 16055  003924  6E1E               	movwf	mem_set@cnt,c
 16056  003926  ECFF  F02C         	call	_mem_set	;wreg free
 16057                           
 16058                           ;ff.c: 773: *(WORD*)(BYTE*)(fs->win + 510)=(WORD)(0xAA55);
 16059  00392A  0100               	movlb	0	; () banked
 16060  00392C  EE22 F02C          	lfsr	2,556
 16061  003930  51A4               	movf	sync_fs@fs& (0+255),w,b
 16062  003932  26D9               	addwf	fsr2l,f,c
 16063  003934  51A5               	movf	(sync_fs@fs+1)& (0+255),w,b
 16064  003936  22DA               	addwfc	fsr2h,f,c
 16065  003938  0E55               	movlw	85
 16066  00393A  6EDE               	movwf	postinc2,c
 16067  00393C  0EAA               	movlw	170
 16068  00393E  6EDD               	movwf	postdec2,c
 16069                           
 16070                           ; BSR set to: 0
 16071                           ;ff.c: 774: *(DWORD*)(BYTE*)(fs->win + 0)=(DWORD)(0x41615252);
 16072  003940  EE20 F02E          	lfsr	2,46
 16073  003944  51A4               	movf	sync_fs@fs& (0+255),w,b
 16074  003946  26D9               	addwf	fsr2l,f,c
 16075  003948  51A5               	movf	(sync_fs@fs+1)& (0+255),w,b
 16076  00394A  22DA               	addwfc	fsr2h,f,c
 16077  00394C  0E52               	movlw	82
 16078  00394E  6EDE               	movwf	postinc2,c
 16079  003950  0E52               	movlw	82
 16080  003952  6EDE               	movwf	postinc2,c
 16081  003954  0E61               	movlw	97
 16082  003956  6EDE               	movwf	postinc2,c
 16083  003958  0E41               	movlw	65
 16084  00395A  6EDD               	movwf	postdec2,c
 16085                           
 16086                           ; BSR set to: 0
 16087                           ;ff.c: 775: *(DWORD*)(BYTE*)(fs->win + 484)=(DWORD)(0x61417272);
 16088  00395C  EE22 F012          	lfsr	2,530
 16089  003960  51A4               	movf	sync_fs@fs& (0+255),w,b
 16090  003962  26D9               	addwf	fsr2l,f,c
 16091  003964  51A5               	movf	(sync_fs@fs+1)& (0+255),w,b
 16092  003966  22DA               	addwfc	fsr2h,f,c
 16093  003968  0E72               	movlw	114
 16094  00396A  6EDE               	movwf	postinc2,c
 16095  00396C  0E72               	movlw	114
 16096  00396E  6EDE               	movwf	postinc2,c
 16097  003970  0E41               	movlw	65
 16098  003972  6EDE               	movwf	postinc2,c
 16099  003974  0E61               	movlw	97
 16100  003976  6EDD               	movwf	postdec2,c
 16101                           
 16102                           ; BSR set to: 0
 16103                           ;ff.c: 776: *(DWORD*)(BYTE*)(fs->win + 488)=(DWORD)(fs->free_clust);
 16104  003978  EE20 F00E          	lfsr	2,14
 16105  00397C  51A4               	movf	sync_fs@fs& (0+255),w,b
 16106  00397E  26D9               	addwf	fsr2l,f,c
 16107  003980  51A5               	movf	(sync_fs@fs+1)& (0+255),w,b
 16108  003982  22DA               	addwfc	fsr2h,f,c
 16109  003984  EE12 F016          	lfsr	1,534
 16110  003988  51A4               	movf	sync_fs@fs& (0+255),w,b
 16111  00398A  26E1               	addwf	fsr1l,f,c
 16112  00398C  51A5               	movf	(sync_fs@fs+1)& (0+255),w,b
 16113  00398E  22E2               	addwfc	fsr1h,f,c
 16114  003990  CFDE FFE6          	movff	postinc2,postinc1
 16115  003994  CFDE FFE6          	movff	postinc2,postinc1
 16116  003998  CFDE FFE6          	movff	postinc2,postinc1
 16117  00399C  CFDE FFE6          	movff	postinc2,postinc1
 16118                           
 16119                           ; BSR set to: 0
 16120                           ;ff.c: 777: *(DWORD*)(BYTE*)(fs->win + 492)=(DWORD)(fs->last_clust);
 16121  0039A0  EE20 F00A          	lfsr	2,10
 16122  0039A4  51A4               	movf	sync_fs@fs& (0+255),w,b
 16123  0039A6  26D9               	addwf	fsr2l,f,c
 16124  0039A8  51A5               	movf	(sync_fs@fs+1)& (0+255),w,b
 16125  0039AA  22DA               	addwfc	fsr2h,f,c
 16126  0039AC  EE12 F01A          	lfsr	1,538
 16127  0039B0  51A4               	movf	sync_fs@fs& (0+255),w,b
 16128  0039B2  26E1               	addwf	fsr1l,f,c
 16129  0039B4  51A5               	movf	(sync_fs@fs+1)& (0+255),w,b
 16130  0039B6  22E2               	addwfc	fsr1h,f,c
 16131  0039B8  CFDE FFE6          	movff	postinc2,postinc1
 16132  0039BC  CFDE FFE6          	movff	postinc2,postinc1
 16133  0039C0  CFDE FFE6          	movff	postinc2,postinc1
 16134  0039C4  CFDE FFE6          	movff	postinc2,postinc1
 16135                           
 16136                           ; BSR set to: 0
 16137                           ;ff.c: 779: fs->winsect = fs->volbase + 1;
 16138  0039C8  EE20 F01A          	lfsr	2,26
 16139  0039CC  51A4               	movf	sync_fs@fs& (0+255),w,b
 16140  0039CE  26D9               	addwf	fsr2l,f,c
 16141  0039D0  51A5               	movf	(sync_fs@fs+1)& (0+255),w,b
 16142  0039D2  22DA               	addwfc	fsr2h,f,c
 16143  0039D4  CFDE F0A6          	movff	postinc2,??_sync_fs
 16144  0039D8  CFDE F0A7          	movff	postinc2,??_sync_fs+1
 16145  0039DC  CFDE F0A8          	movff	postinc2,??_sync_fs+2
 16146  0039E0  CFDE F0A9          	movff	postinc2,??_sync_fs+3
 16147  0039E4  0E01               	movlw	1
 16148  0039E6  25A6               	addwf	??_sync_fs& (0+255),w,b
 16149  0039E8  6FAA               	movwf	(??_sync_fs+4)& (0+255),b
 16150  0039EA  0E00               	movlw	0
 16151  0039EC  21A7               	addwfc	(??_sync_fs+1)& (0+255),w,b
 16152  0039EE  6FAB               	movwf	(??_sync_fs+5)& (0+255),b
 16153  0039F0  0E00               	movlw	0
 16154  0039F2  21A8               	addwfc	(??_sync_fs+2)& (0+255),w,b
 16155  0039F4  6FAC               	movwf	(??_sync_fs+6)& (0+255),b
 16156  0039F6  0E00               	movlw	0
 16157  0039F8  21A9               	addwfc	(??_sync_fs+3)& (0+255),w,b
 16158  0039FA  6FAD               	movwf	(??_sync_fs+7)& (0+255),b
 16159  0039FC  EE20 F02A          	lfsr	2,42
 16160  003A00  51A4               	movf	sync_fs@fs& (0+255),w,b
 16161  003A02  26D9               	addwf	fsr2l,f,c
 16162  003A04  51A5               	movf	(sync_fs@fs+1)& (0+255),w,b
 16163  003A06  22DA               	addwfc	fsr2h,f,c
 16164  003A08  C0AA  FFDE         	movff	??_sync_fs+4,postinc2
 16165  003A0C  C0AB  FFDE         	movff	??_sync_fs+5,postinc2
 16166  003A10  C0AC  FFDE         	movff	??_sync_fs+6,postinc2
 16167  003A14  C0AD  FFDE         	movff	??_sync_fs+7,postinc2
 16168                           
 16169                           ; BSR set to: 0
 16170                           ;ff.c: 780: disk_write(fs->drv, fs->win, fs->winsect, 1);
 16171  003A18  0E2E               	movlw	46
 16172  003A1A  25A4               	addwf	sync_fs@fs& (0+255),w,b
 16173  003A1C  6F7B               	movwf	disk_write@buff& (0+255),b
 16174  003A1E  0E00               	movlw	0
 16175  003A20  21A5               	addwfc	(sync_fs@fs+1)& (0+255),w,b
 16176  003A22  6F7C               	movwf	(disk_write@buff+1)& (0+255),b
 16177  003A24  EE20 F02A          	lfsr	2,42
 16178  003A28  51A4               	movf	sync_fs@fs& (0+255),w,b
 16179  003A2A  26D9               	addwf	fsr2l,f,c
 16180  003A2C  51A5               	movf	(sync_fs@fs+1)& (0+255),w,b
 16181  003A2E  22DA               	addwfc	fsr2h,f,c
 16182  003A30  CFDE F07D          	movff	postinc2,disk_write@sector
 16183  003A34  CFDE F07E          	movff	postinc2,disk_write@sector+1
 16184  003A38  CFDE F07F          	movff	postinc2,disk_write@sector+2
 16185  003A3C  CFDE F080          	movff	postinc2,disk_write@sector+3
 16186  003A40  0E00               	movlw	0
 16187  003A42  6F82               	movwf	(disk_write@count+1)& (0+255),b
 16188  003A44  0E01               	movlw	1
 16189  003A46  6F81               	movwf	disk_write@count& (0+255),b
 16190  003A48  EE20 F001          	lfsr	2,1
 16191  003A4C  51A4               	movf	sync_fs@fs& (0+255),w,b
 16192  003A4E  26D9               	addwf	fsr2l,f,c
 16193  003A50  51A5               	movf	(sync_fs@fs+1)& (0+255),w,b
 16194  003A52  22DA               	addwfc	fsr2h,f,c
 16195  003A54  50DF               	movf	indf2,w,c
 16196  003A56  EC07  F01E         	call	_disk_write
 16197                           
 16198                           ;ff.c: 781: fs->fsi_flag = 0;
 16199  003A5A  0100               	movlb	0	; () banked
 16200  003A5C  EE20 F005          	lfsr	2,5
 16201  003A60  51A4               	movf	sync_fs@fs& (0+255),w,b
 16202  003A62  26D9               	addwf	fsr2l,f,c
 16203  003A64  51A5               	movf	(sync_fs@fs+1)& (0+255),w,b
 16204  003A66  22DA               	addwfc	fsr2h,f,c
 16205  003A68  0E00               	movlw	0
 16206  003A6A  6EDF               	movwf	indf2,c
 16207  003A6C                     l1093:
 16208                           
 16209                           ; BSR set to: 0
 16210                           ;ff.c: 782: }
 16211                           ;ff.c: 784: if (disk_ioctl(fs->drv, 0, 0) != RES_OK)
 16212                           
 16213                           ; BSR set to: 0
 16214  003A6C  0E00               	movlw	0
 16215  003A6E  6F7B               	movwf	disk_ioctl@cmd& (0+255),b
 16216  003A70  0E00               	movlw	0
 16217  003A72  6F7C               	movwf	disk_ioctl@buff& (0+255),b
 16218  003A74  0E00               	movlw	0
 16219  003A76  6F7D               	movwf	(disk_ioctl@buff+1)& (0+255),b
 16220  003A78  EE20 F001          	lfsr	2,1
 16221  003A7C  51A4               	movf	sync_fs@fs& (0+255),w,b
 16222  003A7E  26D9               	addwf	fsr2l,f,c
 16223  003A80  51A5               	movf	(sync_fs@fs+1)& (0+255),w,b
 16224  003A82  22DA               	addwfc	fsr2h,f,c
 16225  003A84  50DF               	movf	indf2,w,c
 16226  003A86  ECDD  F00C         	call	_disk_ioctl
 16227  003A8A  0900               	iorlw	0
 16228  003A8C  B4D8               	btfsc	status,2,c
 16229  003A8E  D003               	goto	l1094
 16230                           
 16231                           ;ff.c: 785: res = FR_DISK_ERR;
 16232  003A90  0E01               	movlw	1
 16233  003A92  0100               	movlb	0	; () banked
 16234  003A94  6FAE               	movwf	sync_fs@res& (0+255),b
 16235  003A96                     l1094:
 16236                           
 16237                           ;ff.c: 786: }
 16238                           ;ff.c: 788: return res;
 16239                           
 16240                           ; BSR set to: 0
 16241  003A96  0100               	movlb	0	; () banked
 16242  003A98  51AE               	movf	sync_fs@res& (0+255),w,b
 16243  003A9A  0012               	return	
 16244  003A9C                     __end_of_sync_fs:
 16245                           	opt stack 0
 16246                           tosu	equ	0xFFF
 16247                           tosh	equ	0xFFE
 16248                           tosl	equ	0xFFD
 16249                           pclath	equ	0xFFA
 16250                           tblptru	equ	0xFF8
 16251                           tblptrh	equ	0xFF7
 16252                           tblptrl	equ	0xFF6
 16253                           tablat	equ	0xFF5
 16254                           prodh	equ	0xFF4
 16255                           prodl	equ	0xFF3
 16256                           intcon	equ	0xFF2
 16257                           intcon2	equ	0xFF1
 16258                           intcon3	equ	0xFF0
 16259                           indf0	equ	0xFEF
 16260                           postinc0	equ	0xFEE
 16261                           fsr0h	equ	0xFEA
 16262                           fsr0l	equ	0xFE9
 16263                           wreg	equ	0xFE8
 16264                           indf1	equ	0xFE7
 16265                           postinc1	equ	0xFE6
 16266                           postdec1	equ	0xFE5
 16267                           fsr1h	equ	0xFE2
 16268                           fsr1l	equ	0xFE1
 16269                           indf2	equ	0xFDF
 16270                           postinc2	equ	0xFDE
 16271                           postdec2	equ	0xFDD
 16272                           plusw2	equ	0xFDB
 16273                           fsr2h	equ	0xFDA
 16274                           fsr2l	equ	0xFD9
 16275                           status	equ	0xFD8
 16276                           
 16277 ;; *************** function _mem_set *****************
 16278 ;; Defined at:
 16279 ;;		line 524 in file "bibliotecas/ff.c"
 16280 ;; Parameters:    Size  Location     Type
 16281 ;;  dst             2   25[COMRAM] PTR void 
 16282 ;;		 -> f_open@sfn(12), NULL(0), fs(558), 
 16283 ;;  val             2   27[COMRAM] int 
 16284 ;;  cnt             2   29[COMRAM] unsigned int 
 16285 ;; Auto vars:     Size  Location     Type
 16286 ;;  d               2   31[COMRAM] PTR unsigned char 
 16287 ;;		 -> f_open@sfn(12), NULL(0), fs(558), 
 16288 ;; Return value:  Size  Location     Type
 16289 ;;                  1    wreg      void 
 16290 ;; Registers used:
 16291 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16292 ;; Tracked objects:
 16293 ;;		On entry : 0/0
 16294 ;;		On exit  : 0/0
 16295 ;;		Unchanged: 0/0
 16296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16297 ;;      Params:         6       0       0       0       0       0       0       0       0
 16298 ;;      Locals:         2       0       0       0       0       0       0       0       0
 16299 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16300 ;;      Totals:         8       0       0       0       0       0       0       0       0
 16301 ;;Total ram usage:        8 bytes
 16302 ;; Hardware stack levels used:    1
 16303 ;; Hardware stack levels required when called:    2
 16304 ;; This function calls:
 16305 ;;		Nothing
 16306 ;; This function is called by:
 16307 ;;		_sync_fs
 16308 ;;		_dir_next
 16309 ;;		_dir_register
 16310 ;;		_create_name
 16311 ;; This function uses a non-reentrant model
 16312 ;;
 16313                           
 16314                           	psect	text46
 16315  0059FE                     __ptext46:
 16316                           	opt stack 0
 16317  0059FE                     _mem_set:
 16318                           	opt stack 22
 16319                           
 16320                           ;ff.c: 525: BYTE *d = (BYTE*)dst;
 16321                           
 16322                           ; BSR set to: 0
 16323                           ;incstack = 0
 16324  0059FE  C01A  F020         	movff	mem_set@dst,mem_set@d
 16325  005A02  C01B  F021         	movff	mem_set@dst+1,mem_set@d+1
 16326                           
 16327                           ;ff.c: 527: while (cnt--)
 16328  005A06  D008               	goto	l1055
 16329  005A08                     l11117:
 16330                           
 16331                           ;ff.c: 528: *d++ = (BYTE)val;
 16332  005A08  C020  FFD9         	movff	mem_set@d,fsr2l
 16333  005A0C  C021  FFDA         	movff	mem_set@d+1,fsr2h
 16334  005A10  C01C  FFDF         	movff	mem_set@val,indf2
 16335  005A14  4A20               	infsnz	mem_set@d,f,c
 16336  005A16  2A21               	incf	mem_set@d+1,f,c
 16337  005A18                     l1055:
 16338  005A18  061E               	decf	mem_set@cnt,f,c
 16339  005A1A  A0D8               	btfss	status,0,c
 16340  005A1C  061F               	decf	mem_set@cnt+1,f,c
 16341  005A1E  281E               	incf	mem_set@cnt,w,c
 16342  005A20  E1F3               	bnz	l11117
 16343  005A22  281F               	incf	mem_set@cnt+1,w,c
 16344  005A24  B4D8               	btfsc	status,2,c
 16345  005A26  0012               	return	
 16346  005A28  D7EF               	goto	l1056
 16347  005A2A                     __end_of_mem_set:
 16348                           	opt stack 0
 16349                           tosu	equ	0xFFF
 16350                           tosh	equ	0xFFE
 16351                           tosl	equ	0xFFD
 16352                           pclath	equ	0xFFA
 16353                           tblptru	equ	0xFF8
 16354                           tblptrh	equ	0xFF7
 16355                           tblptrl	equ	0xFF6
 16356                           tablat	equ	0xFF5
 16357                           prodh	equ	0xFF4
 16358                           prodl	equ	0xFF3
 16359                           intcon	equ	0xFF2
 16360                           intcon2	equ	0xFF1
 16361                           intcon3	equ	0xFF0
 16362                           indf0	equ	0xFEF
 16363                           postinc0	equ	0xFEE
 16364                           fsr0h	equ	0xFEA
 16365                           fsr0l	equ	0xFE9
 16366                           wreg	equ	0xFE8
 16367                           indf1	equ	0xFE7
 16368                           postinc1	equ	0xFE6
 16369                           postdec1	equ	0xFE5
 16370                           fsr1h	equ	0xFE2
 16371                           fsr1l	equ	0xFE1
 16372                           indf2	equ	0xFDF
 16373                           postinc2	equ	0xFDE
 16374                           postdec2	equ	0xFDD
 16375                           plusw2	equ	0xFDB
 16376                           fsr2h	equ	0xFDA
 16377                           fsr2l	equ	0xFD9
 16378                           status	equ	0xFD8
 16379                           
 16380 ;; *************** function _disk_ioctl *****************
 16381 ;; Defined at:
 16382 ;;		line 487 in file "bibliotecas/diskio.c"
 16383 ;; Parameters:    Size  Location     Type
 16384 ;;  pdrv            1    wreg     unsigned char 
 16385 ;;  cmd             1   27[BANK0 ] unsigned char 
 16386 ;;  buff            2   28[BANK0 ] PTR void 
 16387 ;;		 -> NULL(0), 
 16388 ;; Auto vars:     Size  Location     Type
 16389 ;;  pdrv            1   43[BANK0 ] unsigned char 
 16390 ;;  csd            16   44[BANK0 ] unsigned char [16]
 16391 ;;  csize           4   60[BANK0 ] unsigned long 
 16392 ;;  ptr             2   66[BANK0 ] PTR unsigned char 
 16393 ;;		 -> NULL(0), 
 16394 ;;  n               1   65[BANK0 ] unsigned char 
 16395 ;;  res             1   64[BANK0 ] enum E25
 16396 ;; Return value:  Size  Location     Type
 16397 ;;                  1    wreg      enum E25
 16398 ;; Registers used:
 16399 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16400 ;; Tracked objects:
 16401 ;;		On entry : 0/0
 16402 ;;		On exit  : 0/0
 16403 ;;		Unchanged: 0/0
 16404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16405 ;;      Params:         0       3       0       0       0       0       0       0       0
 16406 ;;      Locals:         0      25       0       0       0       0       0       0       0
 16407 ;;      Temps:          0      13       0       0       0       0       0       0       0
 16408 ;;      Totals:         0      41       0       0       0       0       0       0       0
 16409 ;;Total ram usage:       41 bytes
 16410 ;; Hardware stack levels used:    1
 16411 ;; Hardware stack levels required when called:    8
 16412 ;; This function calls:
 16413 ;;		___wmul
 16414 ;;		_deselect
 16415 ;;		_rcvr_datablock
 16416 ;;		_recebe_dado_SPI
 16417 ;;		_select
 16418 ;;		_send_cmd
 16419 ;; This function is called by:
 16420 ;;		_sync_fs
 16421 ;; This function uses a non-reentrant model
 16422 ;;
 16423                           
 16424                           	psect	text47
 16425  0019BA                     __ptext47:
 16426                           	opt stack 0
 16427  0019BA                     _disk_ioctl:
 16428                           	opt stack 17
 16429                           
 16430                           ;incstack = 0
 16431                           ;disk_ioctl@pdrv stored from wreg
 16432  0019BA  0100               	movlb	0	; () banked
 16433  0019BC  6F8B               	movwf	disk_ioctl@pdrv& (0+255),b
 16434                           
 16435                           ;diskio.c: 493: DRESULT res;
 16436                           ;diskio.c: 494: BYTE n, csd[16], *ptr = buff;
 16437  0019BE  C07C  F0A2         	movff	disk_ioctl@buff,disk_ioctl@ptr
 16438  0019C2  C07D  F0A3         	movff	disk_ioctl@buff+1,disk_ioctl@ptr+1
 16439                           
 16440                           ;diskio.c: 495: DWORD csize;
 16441                           ;diskio.c: 498: if (pdrv) return RES_PARERR;
 16442  0019C6  0100               	movlb	0	; () banked
 16443  0019C8  518B               	movf	disk_ioctl@pdrv& (0+255),w,b
 16444  0019CA  B4D8               	btfsc	status,2,c
 16445  0019CC  D002               	goto	l994
 16446                           
 16447                           ; BSR set to: 0
 16448  0019CE  0E04               	movlw	4
 16449                           
 16450                           ; BSR set to: 0
 16451  0019D0  0012               	return	
 16452  0019D2                     l994:
 16453                           
 16454                           ; BSR set to: 0
 16455                           ;diskio.c: 500: res = RES_ERROR;
 16456                           
 16457                           ; BSR set to: 0
 16458  0019D2  0E01               	movlw	1
 16459  0019D4  6FA0               	movwf	disk_ioctl@res& (0+255),b
 16460                           
 16461                           ; BSR set to: 0
 16462                           ;diskio.c: 502: if (Stat & 0x01) return RES_NOTRDY;
 16463  0019D6  A1FF               	btfss	_Stat& (0+255),0,b
 16464  0019D8  D21F               	goto	l997
 16465                           
 16466                           ; BSR set to: 0
 16467  0019DA  0E03               	movlw	3
 16468                           
 16469                           ; BSR set to: 0
 16470  0019DC  0012               	return	
 16471  0019DE                     
 16472                           ; BSR set to: 0
 16473                           ;diskio.c: 506: if (select()) res = RES_OK;
 16474                           
 16475                           ; BSR set to: 0
 16476  0019DE  EC89  F02D         	call	_select	;wreg free
 16477  0019E2  D212               	goto	L22
 16478  0019E4                     
 16479                           ; BSR set to: 0
 16480                           ;diskio.c: 510: if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 16481                           
 16482                           ; BSR set to: 0
 16483  0019E4  0E00               	movlw	0
 16484  0019E6  6F75               	movwf	send_cmd@arg& (0+255),b
 16485  0019E8  0E00               	movlw	0
 16486  0019EA  6F76               	movwf	(send_cmd@arg+1)& (0+255),b
 16487  0019EC  0E00               	movlw	0
 16488  0019EE  6F77               	movwf	(send_cmd@arg+2)& (0+255),b
 16489  0019F0  0E00               	movlw	0
 16490  0019F2  6F78               	movwf	(send_cmd@arg+3)& (0+255),b
 16491  0019F4  0E09               	movlw	9
 16492  0019F6  ECC8  F02B         	call	_send_cmd
 16493  0019FA  0900               	iorlw	0
 16494  0019FC  A4D8               	btfss	status,2,c
 16495  0019FE  D226               	goto	l1000
 16496  001A00  0E8C               	movlw	low disk_ioctl@csd
 16497  001A02  6E20               	movwf	rcvr_datablock@buff,c
 16498  001A04  0E00               	movlw	high disk_ioctl@csd
 16499  001A06  6E21               	movwf	rcvr_datablock@buff+1,c
 16500  001A08  0E00               	movlw	0
 16501  001A0A  6E23               	movwf	rcvr_datablock@btr+1,c
 16502  001A0C  0E10               	movlw	16
 16503  001A0E  6E22               	movwf	rcvr_datablock@btr,c
 16504  001A10  EC92  F028         	call	_rcvr_datablock	;wreg free
 16505  001A14  0900               	iorlw	0
 16506  001A16  B4D8               	btfsc	status,2,c
 16507  001A18  D219               	goto	l1000
 16508                           
 16509                           ;diskio.c: 511: if ((csd[0] >> 6) == 1) {
 16510  001A1A  0100               	movlb	0	; () banked
 16511  001A1C  458C               	rlncf	disk_ioctl@csd& (0+255),w,b
 16512  001A1E  46E8               	rlncf	wreg,f,c
 16513  001A20  0B03               	andlw	3
 16514  001A22  06E8               	decf	wreg,f,c
 16515  001A24  A4D8               	btfss	status,2,c
 16516  001A26  D04E               	goto	l1003
 16517                           
 16518                           ; BSR set to: 0
 16519                           ;diskio.c: 512: csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 16520  001A28  C093  F07E         	movff	disk_ioctl@csd+7,??_disk_ioctl
 16521  001A2C  0E3F               	movlw	63
 16522  001A2E  177E               	andwf	??_disk_ioctl& (0+255),f,b
 16523  001A30  C07E  F07F         	movff	??_disk_ioctl,??_disk_ioctl+1
 16524  001A34  6B80               	clrf	(??_disk_ioctl+2)& (0+255),b
 16525  001A36  6B81               	clrf	(??_disk_ioctl+3)& (0+255),b
 16526  001A38  6B82               	clrf	(??_disk_ioctl+4)& (0+255),b
 16527  001A3A  C080  F082         	movff	??_disk_ioctl+2,??_disk_ioctl+4
 16528  001A3E  C07F  F081         	movff	??_disk_ioctl+1,??_disk_ioctl+3
 16529  001A42  6B80               	clrf	(??_disk_ioctl+2)& (0+255),b
 16530  001A44  6B7F               	clrf	(??_disk_ioctl+1)& (0+255),b
 16531  001A46  5194               	movf	(disk_ioctl@csd+8)& (0+255),w,b
 16532  001A48  6F84               	movwf	(??_disk_ioctl+6)& (0+255),b
 16533  001A4A  6B83               	clrf	(??_disk_ioctl+5)& (0+255),b
 16534  001A4C  5195               	movf	(disk_ioctl@csd+9)& (0+255),w,b
 16535  001A4E  6F85               	movwf	(??_disk_ioctl+7)& (0+255),b
 16536  001A50  6B86               	clrf	(??_disk_ioctl+8)& (0+255),b
 16537  001A52  5183               	movf	(??_disk_ioctl+5)& (0+255),w,b
 16538  001A54  2785               	addwf	(??_disk_ioctl+7)& (0+255),f,b
 16539  001A56  5184               	movf	(??_disk_ioctl+6)& (0+255),w,b
 16540  001A58  2386               	addwfc	(??_disk_ioctl+8)& (0+255),f,b
 16541  001A5A  5185               	movf	(??_disk_ioctl+7)& (0+255),w,b
 16542  001A5C  257F               	addwf	(??_disk_ioctl+1)& (0+255),w,b
 16543  001A5E  6F87               	movwf	(??_disk_ioctl+9)& (0+255),b
 16544  001A60  5186               	movf	(??_disk_ioctl+8)& (0+255),w,b
 16545  001A62  2180               	addwfc	(??_disk_ioctl+2)& (0+255),w,b
 16546  001A64  6F88               	movwf	(??_disk_ioctl+10)& (0+255),b
 16547  001A66  0E00               	movlw	0
 16548  001A68  2181               	addwfc	(??_disk_ioctl+3)& (0+255),w,b
 16549  001A6A  6F89               	movwf	(??_disk_ioctl+11)& (0+255),b
 16550  001A6C  0E00               	movlw	0
 16551  001A6E  2182               	addwfc	(??_disk_ioctl+4)& (0+255),w,b
 16552  001A70  6F8A               	movwf	(??_disk_ioctl+12)& (0+255),b
 16553  001A72  0E01               	movlw	1
 16554  001A74  2587               	addwf	(??_disk_ioctl+9)& (0+255),w,b
 16555  001A76  6F9C               	movwf	disk_ioctl@csize& (0+255),b
 16556  001A78  0E00               	movlw	0
 16557  001A7A  2188               	addwfc	(??_disk_ioctl+10)& (0+255),w,b
 16558  001A7C  6F9D               	movwf	(disk_ioctl@csize+1)& (0+255),b
 16559  001A7E  0E00               	movlw	0
 16560  001A80  2189               	addwfc	(??_disk_ioctl+11)& (0+255),w,b
 16561  001A82  6F9E               	movwf	(disk_ioctl@csize+2)& (0+255),b
 16562  001A84  0E00               	movlw	0
 16563  001A86  218A               	addwfc	(??_disk_ioctl+12)& (0+255),w,b
 16564  001A88  6F9F               	movwf	(disk_ioctl@csize+3)& (0+255),b
 16565                           
 16566                           ; BSR set to: 0
 16567                           ;diskio.c: 513: *(DWORD*)buff = csize << 10;
 16568  001A8A  C09C  F07E         	movff	disk_ioctl@csize,??_disk_ioctl
 16569  001A8E  C09D  F07F         	movff	disk_ioctl@csize+1,??_disk_ioctl+1
 16570  001A92  C09E  F080         	movff	disk_ioctl@csize+2,??_disk_ioctl+2
 16571  001A96  C09F  F081         	movff	disk_ioctl@csize+3,??_disk_ioctl+3
 16572  001A9A  0E0A               	movlw	10
 16573  001A9C                     u14875:
 16574  001A9C  90D8               	bcf	status,0,c
 16575  001A9E  377E               	rlcf	??_disk_ioctl& (0+255),f,b
 16576  001AA0  377F               	rlcf	(??_disk_ioctl+1)& (0+255),f,b
 16577  001AA2  3780               	rlcf	(??_disk_ioctl+2)& (0+255),f,b
 16578  001AA4  3781               	rlcf	(??_disk_ioctl+3)& (0+255),f,b
 16579  001AA6  2EE8               	decfsz	wreg,f,c
 16580  001AA8  D7F9               	goto	u14875
 16581  001AAA  C07C  FFD9         	movff	disk_ioctl@buff,fsr2l
 16582  001AAE  C07D  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 16583  001AB2  C07E  FFDE         	movff	??_disk_ioctl,postinc2
 16584  001AB6  C07F  FFDE         	movff	??_disk_ioctl+1,postinc2
 16585  001ABA  C080  FFDE         	movff	??_disk_ioctl+2,postinc2
 16586  001ABE  C081  FFDE         	movff	??_disk_ioctl+3,postinc2
 16587                           
 16588                           ;diskio.c: 514: } else {
 16589  001AC2  D053               	goto	l1004
 16590  001AC4                     l1003:
 16591                           
 16592                           ; BSR set to: 0
 16593                           ;diskio.c: 515: n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 16594                           
 16595                           ; BSR set to: 0
 16596  001AC4  C095  F07E         	movff	disk_ioctl@csd+9,??_disk_ioctl
 16597  001AC8  0E03               	movlw	3
 16598  001ACA  177E               	andwf	??_disk_ioctl& (0+255),f,b
 16599  001ACC  90D8               	bcf	status,0,c
 16600  001ACE  357E               	rlcf	??_disk_ioctl& (0+255),w,b
 16601  001AD0  6F7F               	movwf	(??_disk_ioctl+1)& (0+255),b
 16602  001AD2  6B80               	clrf	(??_disk_ioctl+2)& (0+255),b
 16603  001AD4  AF96               	btfss	(disk_ioctl@csd+10)& (0+255),7,b
 16604  001AD6  D001               	bra	u14885
 16605  001AD8  2B80               	incf	(??_disk_ioctl+2)& (0+255),f,b
 16606  001ADA                     u14885:
 16607  001ADA  0E01               	movlw	1
 16608  001ADC  1780               	andwf	(??_disk_ioctl+2)& (0+255),f,b
 16609  001ADE  5191               	movf	(disk_ioctl@csd+5)& (0+255),w,b
 16610  001AE0  0B0F               	andlw	15
 16611  001AE2  2580               	addwf	(??_disk_ioctl+2)& (0+255),w,b
 16612  001AE4  257F               	addwf	(??_disk_ioctl+1)& (0+255),w,b
 16613  001AE6  0F02               	addlw	2
 16614  001AE8  6FA1               	movwf	disk_ioctl@n& (0+255),b
 16615                           
 16616                           ;diskio.c: 516: csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10)
      +                           + 1;
 16617  001AEA  5192               	movf	(disk_ioctl@csd+6)& (0+255),w,b
 16618  001AEC  0B03               	andlw	3
 16619  001AEE  6F7E               	movwf	??_disk_ioctl& (0+255),b
 16620  001AF0  6B7F               	clrf	(??_disk_ioctl+1)& (0+255),b
 16621  001AF2  0E0A               	movlw	10
 16622  001AF4                     u14895:
 16623  001AF4  90D8               	bcf	status,0,c
 16624  001AF6  377E               	rlcf	??_disk_ioctl& (0+255),f,b
 16625  001AF8  377F               	rlcf	(??_disk_ioctl+1)& (0+255),f,b
 16626  001AFA  2EE8               	decfsz	wreg,f,c
 16627  001AFC  D7FB               	goto	u14895
 16628  001AFE  5193               	movf	(disk_ioctl@csd+7)& (0+255),w,b
 16629  001B00  6F80               	movwf	(??_disk_ioctl+2)& (0+255),b
 16630  001B02  6B81               	clrf	(??_disk_ioctl+3)& (0+255),b
 16631  001B04  90D8               	bcf	status,0,c
 16632  001B06  3780               	rlcf	(??_disk_ioctl+2)& (0+255),f,b
 16633  001B08  3781               	rlcf	(??_disk_ioctl+3)& (0+255),f,b
 16634  001B0A  90D8               	bcf	status,0,c
 16635  001B0C  3780               	rlcf	(??_disk_ioctl+2)& (0+255),f,b
 16636  001B0E  3781               	rlcf	(??_disk_ioctl+3)& (0+255),f,b
 16637  001B10  4594               	rlncf	(disk_ioctl@csd+8)& (0+255),w,b
 16638  001B12  46E8               	rlncf	wreg,f,c
 16639  001B14  0B03               	andlw	3
 16640  001B16  6F82               	movwf	(??_disk_ioctl+4)& (0+255),b
 16641  001B18  6B83               	clrf	(??_disk_ioctl+5)& (0+255),b
 16642  001B1A  5180               	movf	(??_disk_ioctl+2)& (0+255),w,b
 16643  001B1C  2782               	addwf	(??_disk_ioctl+4)& (0+255),f,b
 16644  001B1E  5181               	movf	(??_disk_ioctl+3)& (0+255),w,b
 16645  001B20  2383               	addwfc	(??_disk_ioctl+5)& (0+255),f,b
 16646  001B22  517E               	movf	??_disk_ioctl& (0+255),w,b
 16647  001B24  2782               	addwf	(??_disk_ioctl+4)& (0+255),f,b
 16648  001B26  517F               	movf	(??_disk_ioctl+1)& (0+255),w,b
 16649  001B28  2383               	addwfc	(??_disk_ioctl+5)& (0+255),f,b
 16650  001B2A  0E01               	movlw	1
 16651  001B2C  2782               	addwf	(??_disk_ioctl+4)& (0+255),f,b
 16652  001B2E  0E00               	movlw	0
 16653  001B30  2383               	addwfc	(??_disk_ioctl+5)& (0+255),f,b
 16654  001B32  C082  F09C         	movff	??_disk_ioctl+4,disk_ioctl@csize
 16655  001B36  C083  F09D         	movff	??_disk_ioctl+5,disk_ioctl@csize+1
 16656  001B3A  6B9E               	clrf	(disk_ioctl@csize+2)& (0+255),b
 16657  001B3C  6B9F               	clrf	(disk_ioctl@csize+3)& (0+255),b
 16658                           
 16659                           ; BSR set to: 0
 16660                           ;diskio.c: 517: *(DWORD*)buff = csize << (n - 9);
 16661  001B3E  C0A1  F07E         	movff	disk_ioctl@n,??_disk_ioctl
 16662  001B42  0EF7               	movlw	-9
 16663  001B44  277E               	addwf	??_disk_ioctl& (0+255),f,b
 16664  001B46  C09C  F07F         	movff	disk_ioctl@csize,??_disk_ioctl+1
 16665  001B4A  C09D  F080         	movff	disk_ioctl@csize+1,??_disk_ioctl+2
 16666  001B4E  C09E  F081         	movff	disk_ioctl@csize+2,??_disk_ioctl+3
 16667  001B52  C09F  F082         	movff	disk_ioctl@csize+3,??_disk_ioctl+4
 16668  001B56  2B7E               	incf	??_disk_ioctl& (0+255),f,b
 16669  001B58  D005               	goto	u14900
 16670  001B5A                     u14905:
 16671  001B5A  90D8               	bcf	status,0,c
 16672  001B5C  377F               	rlcf	(??_disk_ioctl+1)& (0+255),f,b
 16673  001B5E  3780               	rlcf	(??_disk_ioctl+2)& (0+255),f,b
 16674  001B60  3781               	rlcf	(??_disk_ioctl+3)& (0+255),f,b
 16675  001B62  3782               	rlcf	(??_disk_ioctl+4)& (0+255),f,b
 16676  001B64                     u14900:
 16677  001B64  2F7E               	decfsz	??_disk_ioctl& (0+255),f,b
 16678  001B66  D7F9               	goto	u14905
 16679  001B68  D040               	goto	L18
 16680  001B6A                     l1004:
 16681                           
 16682                           ; BSR set to: 0
 16683                           ;diskio.c: 518: }
 16684                           ;diskio.c: 519: res = RES_OK;
 16685                           
 16686                           ; BSR set to: 0
 16687  001B6A  0E00               	movlw	0
 16688  001B6C                     L17:
 16689  001B6C  6FA0               	movwf	disk_ioctl@res& (0+255),b
 16690                           
 16691                           ; BSR set to: 0
 16692                           ;diskio.c: 520: }
 16693                           ;diskio.c: 521: break;
 16694  001B6E  D16E               	goto	l1000
 16695  001B70                     l1005:
 16696                           
 16697                           ; BSR set to: 0
 16698                           ;diskio.c: 524: if (CardType & 0x04) {
 16699  001B70  A5FE               	btfss	_CardType& (0+255),2,b
 16700  001B72  D048               	goto	l1006
 16701                           
 16702                           ; BSR set to: 0
 16703                           ;diskio.c: 525: if (send_cmd((0x80+13), 0) == 0) {
 16704  001B74  0E00               	movlw	0
 16705  001B76  6F75               	movwf	send_cmd@arg& (0+255),b
 16706  001B78  0E00               	movlw	0
 16707  001B7A  6F76               	movwf	(send_cmd@arg+1)& (0+255),b
 16708  001B7C  0E00               	movlw	0
 16709  001B7E  6F77               	movwf	(send_cmd@arg+2)& (0+255),b
 16710  001B80  0E00               	movlw	0
 16711  001B82  6F78               	movwf	(send_cmd@arg+3)& (0+255),b
 16712  001B84  0E8D               	movlw	141
 16713  001B86  ECC8  F02B         	call	_send_cmd
 16714  001B8A  0900               	iorlw	0
 16715  001B8C  A4D8               	btfss	status,2,c
 16716  001B8E  D15E               	goto	l1000
 16717                           
 16718                           ;diskio.c: 526: recebe_dado_SPI();
 16719  001B90  ECF6  F02A         	call	_recebe_dado_SPI	;wreg free
 16720                           
 16721                           ;diskio.c: 527: if (rcvr_datablock(csd, 16)) {
 16722  001B94  0E8C               	movlw	low disk_ioctl@csd
 16723  001B96  6E20               	movwf	rcvr_datablock@buff,c
 16724  001B98  0E00               	movlw	high disk_ioctl@csd
 16725  001B9A  6E21               	movwf	rcvr_datablock@buff+1,c
 16726  001B9C  0E00               	movlw	0
 16727  001B9E  6E23               	movwf	rcvr_datablock@btr+1,c
 16728  001BA0  0E10               	movlw	16
 16729  001BA2  6E22               	movwf	rcvr_datablock@btr,c
 16730  001BA4  EC92  F028         	call	_rcvr_datablock	;wreg free
 16731  001BA8  0900               	iorlw	0
 16732  001BAA  B4D8               	btfsc	status,2,c
 16733  001BAC  D14F               	goto	l1000
 16734                           
 16735                           ;diskio.c: 528: for (n = 64 - 16; n; n--) recebe_dado_SPI();
 16736  001BAE  0E30               	movlw	48
 16737  001BB0  0100               	movlb	0	; () banked
 16738  001BB2  6FA1               	movwf	disk_ioctl@n& (0+255),b
 16739  001BB4  D004               	goto	l1009
 16740  001BB6                     
 16741                           ; BSR set to: 0
 16742                           
 16743                           ; BSR set to: 0
 16744  001BB6  ECF6  F02A         	call	_recebe_dado_SPI	;wreg free
 16745  001BBA  0100               	movlb	0	; () banked
 16746  001BBC  07A1               	decf	disk_ioctl@n& (0+255),f,b
 16747  001BBE                     l1009:
 16748                           
 16749                           ; BSR set to: 0
 16750                           
 16751                           ; BSR set to: 0
 16752  001BBE  51A1               	movf	disk_ioctl@n& (0+255),w,b
 16753  001BC0  A4D8               	btfss	status,2,c
 16754  001BC2  D7F9               	goto	l1010
 16755                           
 16756                           ; BSR set to: 0
 16757                           ;diskio.c: 529: *(DWORD*)buff = 16UL << (csd[10] >> 4);
 16758                           
 16759                           ; BSR set to: 0
 16760  001BC4  C096  F07E         	movff	disk_ioctl@csd+10,??_disk_ioctl
 16761  001BC8  3B7E               	swapf	??_disk_ioctl& (0+255),f,b
 16762  001BCA  0E0F               	movlw	15
 16763  001BCC  177E               	andwf	??_disk_ioctl& (0+255),f,b
 16764  001BCE  0E10               	movlw	16
 16765  001BD0  6F7F               	movwf	(??_disk_ioctl+1)& (0+255),b
 16766  001BD2  6B80               	clrf	(??_disk_ioctl+2)& (0+255),b
 16767  001BD4  6B81               	clrf	(??_disk_ioctl+3)& (0+255),b
 16768  001BD6  6B82               	clrf	(??_disk_ioctl+4)& (0+255),b
 16769  001BD8  2B7E               	incf	??_disk_ioctl& (0+255),f,b
 16770  001BDA  D005               	goto	u14950
 16771  001BDC                     u14955:
 16772  001BDC  90D8               	bcf	status,0,c
 16773  001BDE  377F               	rlcf	(??_disk_ioctl+1)& (0+255),f,b
 16774  001BE0  3780               	rlcf	(??_disk_ioctl+2)& (0+255),f,b
 16775  001BE2  3781               	rlcf	(??_disk_ioctl+3)& (0+255),f,b
 16776  001BE4  3782               	rlcf	(??_disk_ioctl+4)& (0+255),f,b
 16777  001BE6                     u14950:
 16778  001BE6  2F7E               	decfsz	??_disk_ioctl& (0+255),f,b
 16779  001BE8  D7F9               	goto	u14955
 16780  001BEA                     L18:
 16781  001BEA  C07C  FFD9         	movff	disk_ioctl@buff,fsr2l
 16782  001BEE  C07D  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 16783  001BF2  C07F  FFDE         	movff	??_disk_ioctl+1,postinc2
 16784  001BF6  C080  FFDE         	movff	??_disk_ioctl+2,postinc2
 16785  001BFA  C081  FFDE         	movff	??_disk_ioctl+3,postinc2
 16786  001BFE  C082  FFDE         	movff	??_disk_ioctl+4,postinc2
 16787  001C02  D7B3               	goto	l1004
 16788  001C04                     l1006:
 16789                           
 16790                           ; BSR set to: 0
 16791                           ;diskio.c: 534: if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 16792                           
 16793                           ; BSR set to: 0
 16794  001C04  0E00               	movlw	0
 16795  001C06  6F75               	movwf	send_cmd@arg& (0+255),b
 16796  001C08  0E00               	movlw	0
 16797  001C0A  6F76               	movwf	(send_cmd@arg+1)& (0+255),b
 16798  001C0C  0E00               	movlw	0
 16799  001C0E  6F77               	movwf	(send_cmd@arg+2)& (0+255),b
 16800  001C10  0E00               	movlw	0
 16801  001C12  6F78               	movwf	(send_cmd@arg+3)& (0+255),b
 16802  001C14  0E09               	movlw	9
 16803  001C16  ECC8  F02B         	call	_send_cmd
 16804  001C1A  0900               	iorlw	0
 16805  001C1C  A4D8               	btfss	status,2,c
 16806  001C1E  D116               	goto	l1000
 16807  001C20  0E8C               	movlw	low disk_ioctl@csd
 16808  001C22  6E20               	movwf	rcvr_datablock@buff,c
 16809  001C24  0E00               	movlw	high disk_ioctl@csd
 16810  001C26  6E21               	movwf	rcvr_datablock@buff+1,c
 16811  001C28  0E00               	movlw	0
 16812  001C2A  6E23               	movwf	rcvr_datablock@btr+1,c
 16813  001C2C  0E10               	movlw	16
 16814  001C2E  6E22               	movwf	rcvr_datablock@btr,c
 16815  001C30  EC92  F028         	call	_rcvr_datablock	;wreg free
 16816  001C34  0900               	iorlw	0
 16817  001C36  B4D8               	btfsc	status,2,c
 16818  001C38  D109               	goto	l1000
 16819                           
 16820                           ;diskio.c: 535: if (CardType & 0x02) {
 16821  001C3A  0100               	movlb	0	; () banked
 16822  001C3C  A3FE               	btfss	_CardType& (0+255),1,b
 16823  001C3E  D02B               	goto	l1014
 16824                           
 16825                           ; BSR set to: 0
 16826                           ;diskio.c: 536: *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 
      +                          1) << ((csd[13] >> 6) - 1);
 16827  001C40  C099  F07E         	movff	disk_ioctl@csd+13,??_disk_ioctl
 16828  001C44  0E06               	movlw	6
 16829  001C46  6F7F               	movwf	(??_disk_ioctl+1)& (0+255),b
 16830  001C48                     u14995:
 16831  001C48  90D8               	bcf	status,0,c
 16832  001C4A  337E               	rrcf	??_disk_ioctl& (0+255),f,b
 16833  001C4C  2F7F               	decfsz	(??_disk_ioctl+1)& (0+255),f,b
 16834  001C4E  D7FC               	goto	u14995
 16835  001C50  0EFF               	movlw	-1
 16836  001C52  277E               	addwf	??_disk_ioctl& (0+255),f,b
 16837  001C54  5196               	movf	(disk_ioctl@csd+10)& (0+255),w,b
 16838  001C56  0B3F               	andlw	63
 16839  001C58  6F80               	movwf	(??_disk_ioctl+2)& (0+255),b
 16840  001C5A  6B81               	clrf	(??_disk_ioctl+3)& (0+255),b
 16841  001C5C  90D8               	bcf	status,0,c
 16842  001C5E  3780               	rlcf	(??_disk_ioctl+2)& (0+255),f,b
 16843  001C60  3781               	rlcf	(??_disk_ioctl+3)& (0+255),f,b
 16844  001C62  6B82               	clrf	(??_disk_ioctl+4)& (0+255),b
 16845  001C64  AF97               	btfss	(disk_ioctl@csd+11)& (0+255),7,b
 16846  001C66  D001               	bra	u15005
 16847  001C68  2B82               	incf	(??_disk_ioctl+4)& (0+255),f,b
 16848  001C6A                     u15005:
 16849  001C6A  0E01               	movlw	1
 16850  001C6C  1782               	andwf	(??_disk_ioctl+4)& (0+255),f,b
 16851  001C6E  5182               	movf	(??_disk_ioctl+4)& (0+255),w,b
 16852  001C70  2780               	addwf	(??_disk_ioctl+2)& (0+255),f,b
 16853  001C72  0E00               	movlw	0
 16854  001C74  2381               	addwfc	(??_disk_ioctl+3)& (0+255),f,b
 16855  001C76  0E01               	movlw	1
 16856  001C78  2780               	addwf	(??_disk_ioctl+2)& (0+255),f,b
 16857  001C7A  0E00               	movlw	0
 16858  001C7C  2381               	addwfc	(??_disk_ioctl+3)& (0+255),f,b
 16859  001C7E  2B7E               	incf	??_disk_ioctl& (0+255),f,b
 16860  001C80  D003               	goto	u15014
 16861  001C82                     u15015:
 16862  001C82  90D8               	bcf	status,0,c
 16863  001C84  3780               	rlcf	(??_disk_ioctl+2)& (0+255),f,b
 16864  001C86  3781               	rlcf	(??_disk_ioctl+3)& (0+255),f,b
 16865  001C88                     u15014:
 16866  001C88  2F7E               	decfsz	??_disk_ioctl& (0+255),f,b
 16867  001C8A  D7FB               	goto	u15015
 16868  001C8C  0100               	movlb	0	; () banked
 16869  001C8E  5180               	movf	(??_disk_ioctl+2)& (0+255),w,b
 16870  001C90  6F83               	movwf	(??_disk_ioctl+5)& (0+255),b
 16871  001C92  5181               	movf	(??_disk_ioctl+3)& (0+255),w,b
 16872  001C94  D035               	goto	L19
 16873  001C96                     l1014:
 16874                           
 16875                           ; BSR set to: 0
 16876                           ;diskio.c: 538: *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 
      +                          3) + ((csd[11] & 224) >> 5) + 1);
 16877                           
 16878                           ; BSR set to: 0
 16879  001C96  C096  F07E         	movff	disk_ioctl@csd+10,??_disk_ioctl
 16880  001C9A  90D8               	bcf	status,0,c
 16881  001C9C  337E               	rrcf	??_disk_ioctl& (0+255),f,b
 16882  001C9E  90D8               	bcf	status,0,c
 16883  001CA0  337E               	rrcf	??_disk_ioctl& (0+255),f,b
 16884  001CA2  0E1F               	movlw	31
 16885  001CA4  177E               	andwf	??_disk_ioctl& (0+255),f,b
 16886  001CA6  0E01               	movlw	1
 16887  001CA8  257E               	addwf	??_disk_ioctl& (0+255),w,b
 16888  001CAA  6E1A               	movwf	___wmul@multiplier,c
 16889  001CAC  6A1B               	clrf	___wmul@multiplier+1,c
 16890  001CAE  0E00               	movlw	0
 16891  001CB0  221B               	addwfc	___wmul@multiplier+1,f,c
 16892  001CB2  5197               	movf	(disk_ioctl@csd+11)& (0+255),w,b
 16893  001CB4  0B03               	andlw	3
 16894  001CB6  6F7F               	movwf	(??_disk_ioctl+1)& (0+255),b
 16895  001CB8  6B80               	clrf	(??_disk_ioctl+2)& (0+255),b
 16896  001CBA  90D8               	bcf	status,0,c
 16897  001CBC  377F               	rlcf	(??_disk_ioctl+1)& (0+255),f,b
 16898  001CBE  3780               	rlcf	(??_disk_ioctl+2)& (0+255),f,b
 16899  001CC0  90D8               	bcf	status,0,c
 16900  001CC2  377F               	rlcf	(??_disk_ioctl+1)& (0+255),f,b
 16901  001CC4  3780               	rlcf	(??_disk_ioctl+2)& (0+255),f,b
 16902  001CC6  90D8               	bcf	status,0,c
 16903  001CC8  377F               	rlcf	(??_disk_ioctl+1)& (0+255),f,b
 16904  001CCA  3780               	rlcf	(??_disk_ioctl+2)& (0+255),f,b
 16905  001CCC  C097  F081         	movff	disk_ioctl@csd+11,??_disk_ioctl+3
 16906  001CD0  0E05               	movlw	5
 16907  001CD2  6F82               	movwf	(??_disk_ioctl+4)& (0+255),b
 16908  001CD4                     u15025:
 16909  001CD4  90D8               	bcf	status,0,c
 16910  001CD6  3381               	rrcf	(??_disk_ioctl+3)& (0+255),f,b
 16911  001CD8  2F82               	decfsz	(??_disk_ioctl+4)& (0+255),f,b
 16912  001CDA  D7FC               	goto	u15025
 16913  001CDC  0E07               	movlw	7
 16914  001CDE  1781               	andwf	(??_disk_ioctl+3)& (0+255),f,b
 16915  001CE0  5181               	movf	(??_disk_ioctl+3)& (0+255),w,b
 16916  001CE2  277F               	addwf	(??_disk_ioctl+1)& (0+255),f,b
 16917  001CE4  0E00               	movlw	0
 16918  001CE6  2380               	addwfc	(??_disk_ioctl+2)& (0+255),f,b
 16919  001CE8  0E01               	movlw	1
 16920  001CEA  257F               	addwf	(??_disk_ioctl+1)& (0+255),w,b
 16921  001CEC  6E1C               	movwf	___wmul@multiplicand,c
 16922  001CEE  0E00               	movlw	0
 16923  001CF0  2180               	addwfc	(??_disk_ioctl+2)& (0+255),w,b
 16924  001CF2  6E1D               	movwf	___wmul@multiplicand+1,c
 16925  001CF4  EC2A  F02D         	call	___wmul	;wreg free
 16926  001CF8  501A               	movf	?___wmul,w,c
 16927  001CFA  0100               	movlb	0	; () banked
 16928  001CFC  6F83               	movwf	(??_disk_ioctl+5)& (0+255),b
 16929  001CFE  501B               	movf	?___wmul+1,w,c
 16930  001D00                     L19:
 16931  001D00  6F84               	movwf	(??_disk_ioctl+6)& (0+255),b
 16932  001D02  6B85               	clrf	(??_disk_ioctl+7)& (0+255),b
 16933  001D04  6B86               	clrf	(??_disk_ioctl+8)& (0+255),b
 16934  001D06  C07C  FFD9         	movff	disk_ioctl@buff,fsr2l
 16935  001D0A  C07D  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 16936  001D0E  C083  FFDE         	movff	??_disk_ioctl+5,postinc2
 16937  001D12  C084  FFDE         	movff	??_disk_ioctl+6,postinc2
 16938  001D16  C085  FFDE         	movff	??_disk_ioctl+7,postinc2
 16939  001D1A  C086  FFDE         	movff	??_disk_ioctl+8,postinc2
 16940                           
 16941                           ; BSR set to: 0
 16942  001D1E  D725               	goto	l1004
 16943  001D20                     
 16944                           ; BSR set to: 0
 16945                           ;diskio.c: 548: *ptr = CardType;
 16946                           
 16947                           ; BSR set to: 0
 16948  001D20  C0A2  FFD9         	movff	disk_ioctl@ptr,fsr2l
 16949  001D24  C0A3  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 16950  001D28  C0FE  FFDF         	movff	_CardType,indf2
 16951  001D2C  D71E               	goto	l1004
 16952  001D2E                     
 16953                           ; BSR set to: 0
 16954                           ;diskio.c: 553: if (send_cmd((9), 0) == 0
 16955                           ;diskio.c: 554: && rcvr_datablock(ptr, 16))
 16956                           
 16957                           ; BSR set to: 0
 16958  001D2E  0E00               	movlw	0
 16959  001D30  6F75               	movwf	send_cmd@arg& (0+255),b
 16960  001D32  0E00               	movlw	0
 16961  001D34  6F76               	movwf	(send_cmd@arg+1)& (0+255),b
 16962  001D36  0E00               	movlw	0
 16963  001D38  6F77               	movwf	(send_cmd@arg+2)& (0+255),b
 16964  001D3A  0E00               	movlw	0
 16965  001D3C  6F78               	movwf	(send_cmd@arg+3)& (0+255),b
 16966  001D3E  0E09               	movlw	9
 16967  001D40  ECC8  F02B         	call	_send_cmd
 16968  001D44  0900               	iorlw	0
 16969  001D46  A4D8               	btfss	status,2,c
 16970  001D48  D081               	goto	l1000
 16971  001D4A  C0A2  F020         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 16972  001D4E  C0A3  F021         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 16973  001D52  0E00               	movlw	0
 16974  001D54  6E23               	movwf	rcvr_datablock@btr+1,c
 16975  001D56  0E10               	movlw	16
 16976  001D58  6E22               	movwf	rcvr_datablock@btr,c
 16977  001D5A  EC92  F028         	call	_rcvr_datablock	;wreg free
 16978  001D5E  D054               	goto	L22
 16979  001D60                     
 16980                           ; BSR set to: 0
 16981                           ;diskio.c: 559: if (send_cmd((10), 0) == 0
 16982                           ;diskio.c: 560: && rcvr_datablock(ptr, 16))
 16983                           
 16984                           ; BSR set to: 0
 16985  001D60  0E00               	movlw	0
 16986  001D62  6F75               	movwf	send_cmd@arg& (0+255),b
 16987  001D64  0E00               	movlw	0
 16988  001D66  6F76               	movwf	(send_cmd@arg+1)& (0+255),b
 16989  001D68  0E00               	movlw	0
 16990  001D6A  6F77               	movwf	(send_cmd@arg+2)& (0+255),b
 16991  001D6C  0E00               	movlw	0
 16992  001D6E  6F78               	movwf	(send_cmd@arg+3)& (0+255),b
 16993  001D70  0E0A               	movlw	10
 16994  001D72  ECC8  F02B         	call	_send_cmd
 16995  001D76  0900               	iorlw	0
 16996  001D78  A4D8               	btfss	status,2,c
 16997  001D7A  D068               	goto	l1000
 16998  001D7C  C0A2  F020         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 16999  001D80  C0A3  F021         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 17000  001D84  0E00               	movlw	0
 17001  001D86  6E23               	movwf	rcvr_datablock@btr+1,c
 17002  001D88  0E10               	movlw	16
 17003  001D8A  6E22               	movwf	rcvr_datablock@btr,c
 17004  001D8C  EC92  F028         	call	_rcvr_datablock	;wreg free
 17005  001D90  D03B               	goto	L22
 17006  001D92                     
 17007                           ; BSR set to: 0
 17008                           ;diskio.c: 565: if (send_cmd((58), 0) == 0) {
 17009                           
 17010                           ; BSR set to: 0
 17011  001D92  0E00               	movlw	0
 17012  001D94  6F75               	movwf	send_cmd@arg& (0+255),b
 17013  001D96  0E00               	movlw	0
 17014  001D98  6F76               	movwf	(send_cmd@arg+1)& (0+255),b
 17015  001D9A  0E00               	movlw	0
 17016  001D9C  6F77               	movwf	(send_cmd@arg+2)& (0+255),b
 17017  001D9E  0E00               	movlw	0
 17018  001DA0  6F78               	movwf	(send_cmd@arg+3)& (0+255),b
 17019  001DA2  0E3A               	movlw	58
 17020  001DA4  ECC8  F02B         	call	_send_cmd
 17021  001DA8  0900               	iorlw	0
 17022  001DAA  A4D8               	btfss	status,2,c
 17023  001DAC  D04F               	goto	l1000
 17024                           
 17025                           ;diskio.c: 566: for (n = 4; n; n--) *ptr++ = recebe_dado_SPI();
 17026  001DAE  0E04               	movlw	4
 17027  001DB0  0100               	movlb	0	; () banked
 17028  001DB2  6FA1               	movwf	disk_ioctl@n& (0+255),b
 17029  001DB4  D00B               	goto	l1023
 17030  001DB6                     
 17031                           ; BSR set to: 0
 17032                           
 17033                           ; BSR set to: 0
 17034  001DB6  ECF6  F02A         	call	_recebe_dado_SPI	;wreg free
 17035  001DBA  C0A2  FFD9         	movff	disk_ioctl@ptr,fsr2l
 17036  001DBE  C0A3  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 17037  001DC2  6EDF               	movwf	indf2,c
 17038  001DC4  0100               	movlb	0	; () banked
 17039  001DC6  4BA2               	infsnz	disk_ioctl@ptr& (0+255),f,b
 17040  001DC8  2BA3               	incf	(disk_ioctl@ptr+1)& (0+255),f,b
 17041                           
 17042                           ; BSR set to: 0
 17043  001DCA  07A1               	decf	disk_ioctl@n& (0+255),f,b
 17044  001DCC                     l1023:
 17045                           
 17046                           ; BSR set to: 0
 17047                           
 17048                           ; BSR set to: 0
 17049  001DCC  51A1               	movf	disk_ioctl@n& (0+255),w,b
 17050  001DCE  A4D8               	btfss	status,2,c
 17051  001DD0  D7F2               	goto	l1024
 17052                           
 17053                           ; BSR set to: 0
 17054  001DD2  D6CB               	goto	l1004
 17055  001DD4                     
 17056                           ; BSR set to: 0
 17057                           ;diskio.c: 572: if (send_cmd((0x80+13), 0) == 0) {
 17058                           
 17059                           ; BSR set to: 0
 17060  001DD4  0E00               	movlw	0
 17061  001DD6  6F75               	movwf	send_cmd@arg& (0+255),b
 17062  001DD8  0E00               	movlw	0
 17063  001DDA  6F76               	movwf	(send_cmd@arg+1)& (0+255),b
 17064  001DDC  0E00               	movlw	0
 17065  001DDE  6F77               	movwf	(send_cmd@arg+2)& (0+255),b
 17066  001DE0  0E00               	movlw	0
 17067  001DE2  6F78               	movwf	(send_cmd@arg+3)& (0+255),b
 17068  001DE4  0E8D               	movlw	141
 17069  001DE6  ECC8  F02B         	call	_send_cmd
 17070  001DEA  0900               	iorlw	0
 17071  001DEC  A4D8               	btfss	status,2,c
 17072  001DEE  D02E               	goto	l1000
 17073                           
 17074                           ;diskio.c: 573: recebe_dado_SPI();
 17075  001DF0  ECF6  F02A         	call	_recebe_dado_SPI	;wreg free
 17076                           
 17077                           ;diskio.c: 574: if (rcvr_datablock(ptr, 64))
 17078  001DF4  C0A2  F020         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 17079  001DF8  C0A3  F021         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 17080  001DFC  0E00               	movlw	0
 17081  001DFE  6E23               	movwf	rcvr_datablock@btr+1,c
 17082  001E00  0E40               	movlw	64
 17083  001E02  6E22               	movwf	rcvr_datablock@btr,c
 17084  001E04  EC92  F028         	call	_rcvr_datablock	;wreg free
 17085  001E08                     L22:
 17086  001E08  0900               	iorlw	0
 17087  001E0A  B4D8               	btfsc	status,2,c
 17088  001E0C  D01F               	goto	l1000
 17089                           
 17090                           ;diskio.c: 575: res = RES_OK;
 17091  001E0E  0E00               	movlw	0
 17092  001E10  0100               	movlb	0	; () banked
 17093  001E12  D6AC               	goto	L17
 17094  001E14                     
 17095                           ; BSR set to: 0
 17096                           ;diskio.c: 580: res = RES_PARERR;
 17097                           
 17098                           ; BSR set to: 0
 17099  001E14  0E04               	movlw	4
 17100  001E16  D6AA               	goto	L17
 17101  001E18                     l997:
 17102                           
 17103                           ; BSR set to: 0
 17104                           
 17105                           ; BSR set to: 0
 17106  001E18  517B               	movf	disk_ioctl@cmd& (0+255),w,b
 17107                           
 17108                           ; Switch size 1, requested type "space"
 17109                           ; Number of cases is 8, Range of values is 0 to 14
 17110                           ; switch strategies available:
 17111                           ; Name         Instructions Cycles
 17112                           ; simple_byte           25    13 (average)
 17113                           ;	Chosen strategy is simple_byte
 17114  001E1A  0A00               	xorlw	0	; case 0
 17115  001E1C  B4D8               	btfsc	status,2,c
 17116  001E1E  D5DF               	goto	l998
 17117  001E20  0A01               	xorlw	1	; case 1
 17118  001E22  B4D8               	btfsc	status,2,c
 17119  001E24  D5DF               	goto	l1001
 17120  001E26  0A02               	xorlw	2	; case 3
 17121  001E28  B4D8               	btfsc	status,2,c
 17122  001E2A  D6A2               	goto	l1005
 17123  001E2C  0A09               	xorlw	9	; case 10
 17124  001E2E  B4D8               	btfsc	status,2,c
 17125  001E30  D777               	goto	l1016
 17126  001E32  0A01               	xorlw	1	; case 11
 17127  001E34  B4D8               	btfsc	status,2,c
 17128  001E36  D77B               	goto	l1017
 17129  001E38  0A07               	xorlw	7	; case 12
 17130  001E3A  B4D8               	btfsc	status,2,c
 17131  001E3C  D791               	goto	l1019
 17132  001E3E  0A01               	xorlw	1	; case 13
 17133  001E40  B4D8               	btfsc	status,2,c
 17134  001E42  D7A7               	goto	l1021
 17135  001E44  0A03               	xorlw	3	; case 14
 17136  001E46  B4D8               	btfsc	status,2,c
 17137  001E48  D7C5               	goto	l1026
 17138  001E4A  D7E4               	goto	l1029
 17139  001E4C                     l1000:
 17140                           
 17141                           ;diskio.c: 583: deselect();
 17142                           
 17143                           ; BSR set to: 0
 17144  001E4C  ECE9  F02D         	call	_deselect	;wreg free
 17145                           
 17146                           ;diskio.c: 585: return res;
 17147  001E50  0100               	movlb	0	; () banked
 17148  001E52  51A0               	movf	disk_ioctl@res& (0+255),w,b
 17149  001E54  0012               	return	
 17150  001E56                     __end_of_disk_ioctl:
 17151                           	opt stack 0
 17152                           tosu	equ	0xFFF
 17153                           tosh	equ	0xFFE
 17154                           tosl	equ	0xFFD
 17155                           pclath	equ	0xFFA
 17156                           tblptru	equ	0xFF8
 17157                           tblptrh	equ	0xFF7
 17158                           tblptrl	equ	0xFF6
 17159                           tablat	equ	0xFF5
 17160                           prodh	equ	0xFF4
 17161                           prodl	equ	0xFF3
 17162                           intcon	equ	0xFF2
 17163                           intcon2	equ	0xFF1
 17164                           intcon3	equ	0xFF0
 17165                           indf0	equ	0xFEF
 17166                           postinc0	equ	0xFEE
 17167                           fsr0h	equ	0xFEA
 17168                           fsr0l	equ	0xFE9
 17169                           wreg	equ	0xFE8
 17170                           indf1	equ	0xFE7
 17171                           postinc1	equ	0xFE6
 17172                           postdec1	equ	0xFE5
 17173                           fsr1h	equ	0xFE2
 17174                           fsr1l	equ	0xFE1
 17175                           indf2	equ	0xFDF
 17176                           postinc2	equ	0xFDE
 17177                           postdec2	equ	0xFDD
 17178                           plusw2	equ	0xFDB
 17179                           fsr2h	equ	0xFDA
 17180                           fsr2l	equ	0xFD9
 17181                           status	equ	0xFD8
 17182                           
 17183 ;; *************** function ___wmul *****************
 17184 ;; Defined at:
 17185 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 17186 ;; Parameters:    Size  Location     Type
 17187 ;;  multiplier      2   25[COMRAM] unsigned int 
 17188 ;;  multiplicand    2   27[COMRAM] unsigned int 
 17189 ;; Auto vars:     Size  Location     Type
 17190 ;;  product         2   29[COMRAM] unsigned int 
 17191 ;; Return value:  Size  Location     Type
 17192 ;;                  2   25[COMRAM] unsigned int 
 17193 ;; Registers used:
 17194 ;;		wreg, status,2, status,0, prodl, prodh
 17195 ;; Tracked objects:
 17196 ;;		On entry : 0/0
 17197 ;;		On exit  : 0/0
 17198 ;;		Unchanged: 0/0
 17199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17200 ;;      Params:         4       0       0       0       0       0       0       0       0
 17201 ;;      Locals:         2       0       0       0       0       0       0       0       0
 17202 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17203 ;;      Totals:         6       0       0       0       0       0       0       0       0
 17204 ;;Total ram usage:        6 bytes
 17205 ;; Hardware stack levels used:    1
 17206 ;; Hardware stack levels required when called:    2
 17207 ;; This function calls:
 17208 ;;		Nothing
 17209 ;; This function is called by:
 17210 ;;		_disk_ioctl
 17211 ;;		_sprintf
 17212 ;;		_scale
 17213 ;;		_fround
 17214 ;; This function uses a non-reentrant model
 17215 ;;
 17216                           
 17217                           	psect	text48
 17218  005A54                     __ptext48:
 17219                           	opt stack 0
 17220  005A54                     ___wmul:
 17221                           	opt stack 22
 17222                           
 17223                           ; BSR set to: 0
 17224                           ;incstack = 0
 17225  005A54  501A               	movf	___wmul@multiplier,w,c
 17226  005A56  021C               	mulwf	___wmul@multiplicand,c
 17227  005A58  CFF3 F01E          	movff	prodl,___wmul@product
 17228  005A5C  CFF4 F01F          	movff	prodh,___wmul@product+1
 17229  005A60  501A               	movf	___wmul@multiplier,w,c
 17230  005A62  021D               	mulwf	___wmul@multiplicand+1,c
 17231  005A64  50F3               	movf	prodl,w,c
 17232  005A66  261F               	addwf	___wmul@product+1,f,c
 17233  005A68  501B               	movf	___wmul@multiplier+1,w,c
 17234  005A6A  021C               	mulwf	___wmul@multiplicand,c
 17235  005A6C  50F3               	movf	prodl,w,c
 17236  005A6E  261F               	addwf	___wmul@product+1,f,c
 17237  005A70  C01E  F01A         	movff	___wmul@product,?___wmul
 17238  005A74  C01F  F01B         	movff	___wmul@product+1,?___wmul+1
 17239  005A78  0012               	return	
 17240  005A7A                     __end_of___wmul:
 17241                           	opt stack 0
 17242                           tosu	equ	0xFFF
 17243                           tosh	equ	0xFFE
 17244                           tosl	equ	0xFFD
 17245                           pclath	equ	0xFFA
 17246                           tblptru	equ	0xFF8
 17247                           tblptrh	equ	0xFF7
 17248                           tblptrl	equ	0xFF6
 17249                           tablat	equ	0xFF5
 17250                           prodh	equ	0xFF4
 17251                           prodl	equ	0xFF3
 17252                           intcon	equ	0xFF2
 17253                           intcon2	equ	0xFF1
 17254                           intcon3	equ	0xFF0
 17255                           indf0	equ	0xFEF
 17256                           postinc0	equ	0xFEE
 17257                           fsr0h	equ	0xFEA
 17258                           fsr0l	equ	0xFE9
 17259                           wreg	equ	0xFE8
 17260                           indf1	equ	0xFE7
 17261                           postinc1	equ	0xFE6
 17262                           postdec1	equ	0xFE5
 17263                           fsr1h	equ	0xFE2
 17264                           fsr1l	equ	0xFE1
 17265                           indf2	equ	0xFDF
 17266                           postinc2	equ	0xFDE
 17267                           postdec2	equ	0xFDD
 17268                           plusw2	equ	0xFDB
 17269                           fsr2h	equ	0xFDA
 17270                           fsr2l	equ	0xFD9
 17271                           status	equ	0xFD8
 17272                           
 17273 ;; *************** function _st_clust *****************
 17274 ;; Defined at:
 17275 ;;		line 1252 in file "bibliotecas/ff.c"
 17276 ;; Parameters:    Size  Location     Type
 17277 ;;  dir             2   25[COMRAM] PTR unsigned char 
 17278 ;;		 -> NULL(0), fs(558), 
 17279 ;;  cl              4   27[COMRAM] unsigned long 
 17280 ;; Auto vars:     Size  Location     Type
 17281 ;;		None
 17282 ;; Return value:  Size  Location     Type
 17283 ;;                  1    wreg      void 
 17284 ;; Registers used:
 17285 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17286 ;; Tracked objects:
 17287 ;;		On entry : 0/0
 17288 ;;		On exit  : 0/0
 17289 ;;		Unchanged: 0/0
 17290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17291 ;;      Params:         6       0       0       0       0       0       0       0       0
 17292 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17293 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17294 ;;      Totals:         6       0       0       0       0       0       0       0       0
 17295 ;;Total ram usage:        6 bytes
 17296 ;; Hardware stack levels used:    1
 17297 ;; Hardware stack levels required when called:    2
 17298 ;; This function calls:
 17299 ;;		Nothing
 17300 ;; This function is called by:
 17301 ;;		_f_open
 17302 ;;		_f_sync
 17303 ;; This function uses a non-reentrant model
 17304 ;;
 17305                           
 17306                           	psect	text49
 17307  005A2A                     __ptext49:
 17308                           	opt stack 0
 17309  005A2A                     _st_clust:
 17310                           	opt stack 25
 17311                           
 17312                           ;ff.c: 1257: *(WORD*)(BYTE*)(dir + 26)=(WORD)(cl);
 17313                           
 17314                           ;incstack = 0
 17315  005A2A  EE20 F01A          	lfsr	2,26
 17316  005A2E  501A               	movf	st_clust@dir,w,c
 17317  005A30  26D9               	addwf	fsr2l,f,c
 17318  005A32  501B               	movf	st_clust@dir+1,w,c
 17319  005A34  22DA               	addwfc	fsr2h,f,c
 17320  005A36  C01C  FFDE         	movff	st_clust@cl,postinc2
 17321  005A3A  C01D  FFDD         	movff	st_clust@cl+1,postdec2
 17322                           
 17323                           ;ff.c: 1258: *(WORD*)(BYTE*)(dir + 20)=(WORD)(cl >> 16);
 17324  005A3E  EE20 F014          	lfsr	2,20
 17325  005A42  501A               	movf	st_clust@dir,w,c
 17326  005A44  26D9               	addwf	fsr2l,f,c
 17327  005A46  501B               	movf	st_clust@dir+1,w,c
 17328  005A48  22DA               	addwfc	fsr2h,f,c
 17329  005A4A  C01E  FFDE         	movff	st_clust@cl+2,postinc2
 17330  005A4E  C01F  FFDD         	movff	st_clust@cl+3,postdec2
 17331  005A52  0012               	return		;funcret
 17332  005A54                     __end_of_st_clust:
 17333                           	opt stack 0
 17334                           tosu	equ	0xFFF
 17335                           tosh	equ	0xFFE
 17336                           tosl	equ	0xFFD
 17337                           pclath	equ	0xFFA
 17338                           tblptru	equ	0xFF8
 17339                           tblptrh	equ	0xFF7
 17340                           tblptrl	equ	0xFF6
 17341                           tablat	equ	0xFF5
 17342                           prodh	equ	0xFF4
 17343                           prodl	equ	0xFF3
 17344                           intcon	equ	0xFF2
 17345                           intcon2	equ	0xFF1
 17346                           intcon3	equ	0xFF0
 17347                           indf0	equ	0xFEF
 17348                           postinc0	equ	0xFEE
 17349                           fsr0h	equ	0xFEA
 17350                           fsr0l	equ	0xFE9
 17351                           wreg	equ	0xFE8
 17352                           indf1	equ	0xFE7
 17353                           postinc1	equ	0xFE6
 17354                           postdec1	equ	0xFE5
 17355                           fsr1h	equ	0xFE2
 17356                           fsr1l	equ	0xFE1
 17357                           indf2	equ	0xFDF
 17358                           postinc2	equ	0xFDE
 17359                           postdec2	equ	0xFDD
 17360                           plusw2	equ	0xFDB
 17361                           fsr2h	equ	0xFDA
 17362                           fsr2l	equ	0xFD9
 17363                           status	equ	0xFD8
 17364                           
 17365 ;; *************** function _move_window *****************
 17366 ;; Defined at:
 17367 ;;		line 729 in file "bibliotecas/ff.c"
 17368 ;; Parameters:    Size  Location     Type
 17369 ;;  fs              2   58[BANK0 ] PTR struct .
 17370 ;;		 -> NULL(0), fs(558), 
 17371 ;;  sector          4   60[BANK0 ] unsigned long 
 17372 ;; Auto vars:     Size  Location     Type
 17373 ;;  res             1   68[BANK0 ] enum E75
 17374 ;; Return value:  Size  Location     Type
 17375 ;;                  1    wreg      enum E75
 17376 ;; Registers used:
 17377 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17378 ;; Tracked objects:
 17379 ;;		On entry : 0/0
 17380 ;;		On exit  : 0/0
 17381 ;;		Unchanged: 0/0
 17382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17383 ;;      Params:         0       6       0       0       0       0       0       0       0
 17384 ;;      Locals:         0       1       0       0       0       0       0       0       0
 17385 ;;      Temps:          0       4       0       0       0       0       0       0       0
 17386 ;;      Totals:         0      11       0       0       0       0       0       0       0
 17387 ;;Total ram usage:       11 bytes
 17388 ;; Hardware stack levels used:    1
 17389 ;; Hardware stack levels required when called:   10
 17390 ;; This function calls:
 17391 ;;		_disk_read
 17392 ;;		_sync_window
 17393 ;; This function is called by:
 17394 ;;		_get_fat
 17395 ;;		_put_fat
 17396 ;;		_dir_alloc
 17397 ;;		_dir_find
 17398 ;;		_dir_register
 17399 ;;		_check_fs
 17400 ;;		_find_volume
 17401 ;;		_f_open
 17402 ;;		_f_write
 17403 ;;		_f_sync
 17404 ;;		_f_read
 17405 ;; This function uses a non-reentrant model
 17406 ;;
 17407                           
 17408                           	psect	text50
 17409  004E14                     __ptext50:
 17410                           	opt stack 0
 17411  004E14                     _move_window:
 17412                           	opt stack 17
 17413                           
 17414                           ;ff.c: 734: FRESULT res = FR_OK;
 17415                           
 17416                           ;incstack = 0
 17417  004E14  0E00               	movlw	0
 17418  004E16  0100               	movlb	0	; () banked
 17419  004E18  6FA4               	movwf	move_window@res& (0+255),b
 17420                           
 17421                           ; BSR set to: 0
 17422                           ;ff.c: 737: if (sector != fs->winsect) {
 17423  004E1A  EE20 F02A          	lfsr	2,42
 17424  004E1E  519A               	movf	move_window@fs& (0+255),w,b
 17425  004E20  26D9               	addwf	fsr2l,f,c
 17426  004E22  519B               	movf	(move_window@fs+1)& (0+255),w,b
 17427  004E24  22DA               	addwfc	fsr2h,f,c
 17428  004E26  519C               	movf	move_window@sector& (0+255),w,b
 17429  004E28  18DE               	xorwf	postinc2,w,c
 17430  004E2A  E10A               	bnz	u14330
 17431  004E2C  519D               	movf	(move_window@sector+1)& (0+255),w,b
 17432  004E2E  18DE               	xorwf	postinc2,w,c
 17433  004E30  E107               	bnz	u14330
 17434  004E32  519E               	movf	(move_window@sector+2)& (0+255),w,b
 17435  004E34  18DE               	xorwf	postinc2,w,c
 17436  004E36  E104               	bnz	u14330
 17437  004E38  519F               	movf	(move_window@sector+3)& (0+255),w,b
 17438  004E3A  18DE               	xorwf	postinc2,w,c
 17439  004E3C  B4D8               	btfsc	status,2,c
 17440  004E3E  D03F               	goto	l1087
 17441  004E40                     u14330:
 17442                           
 17443                           ; BSR set to: 0
 17444                           ;ff.c: 739: res = sync_window(fs);
 17445  004E40  C09A  F085         	movff	move_window@fs,sync_window@fs
 17446  004E44  C09B  F086         	movff	move_window@fs+1,sync_window@fs+1
 17447  004E48  EC4E  F01D         	call	_sync_window	;wreg free
 17448  004E4C  0100               	movlb	0	; () banked
 17449  004E4E  6FA4               	movwf	move_window@res& (0+255),b
 17450                           
 17451                           ; BSR set to: 0
 17452                           ;ff.c: 741: if (res == FR_OK) {
 17453  004E50  51A4               	movf	move_window@res& (0+255),w,b
 17454  004E52  A4D8               	btfss	status,2,c
 17455  004E54  D034               	goto	l1087
 17456                           
 17457                           ; BSR set to: 0
 17458                           ;ff.c: 742: if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 17459  004E56  0E2E               	movlw	46
 17460  004E58  259A               	addwf	move_window@fs& (0+255),w,b
 17461  004E5A  6F7B               	movwf	disk_read@buff& (0+255),b
 17462  004E5C  0E00               	movlw	0
 17463  004E5E  219B               	addwfc	(move_window@fs+1)& (0+255),w,b
 17464  004E60  6F7C               	movwf	(disk_read@buff+1)& (0+255),b
 17465  004E62  C09C  F07D         	movff	move_window@sector,disk_read@sector
 17466  004E66  C09D  F07E         	movff	move_window@sector+1,disk_read@sector+1
 17467  004E6A  C09E  F07F         	movff	move_window@sector+2,disk_read@sector+2
 17468  004E6E  C09F  F080         	movff	move_window@sector+3,disk_read@sector+3
 17469  004E72  0E00               	movlw	0
 17470  004E74  6F82               	movwf	(disk_read@count+1)& (0+255),b
 17471  004E76  0E01               	movlw	1
 17472  004E78  6F81               	movwf	disk_read@count& (0+255),b
 17473  004E7A  EE20 F001          	lfsr	2,1
 17474  004E7E  519A               	movf	move_window@fs& (0+255),w,b
 17475  004E80  26D9               	addwf	fsr2l,f,c
 17476  004E82  519B               	movf	(move_window@fs+1)& (0+255),w,b
 17477  004E84  22DA               	addwfc	fsr2h,f,c
 17478  004E86  50DF               	movf	indf2,w,c
 17479  004E88  EC69  F024         	call	_disk_read
 17480  004E8C  0900               	iorlw	0
 17481  004E8E  B4D8               	btfsc	status,2,c
 17482  004E90  D007               	goto	l1088
 17483                           
 17484                           ;ff.c: 743: sector = 0xFFFFFFFF;
 17485  004E92  0100               	movlb	0	; () banked
 17486  004E94  699C               	setf	move_window@sector& (0+255),b
 17487  004E96  699D               	setf	(move_window@sector+1)& (0+255),b
 17488  004E98  699E               	setf	(move_window@sector+2)& (0+255),b
 17489  004E9A  699F               	setf	(move_window@sector+3)& (0+255),b
 17490                           
 17491                           ; BSR set to: 0
 17492                           ;ff.c: 744: res = FR_DISK_ERR;
 17493  004E9C  0E01               	movlw	1
 17494  004E9E  6FA4               	movwf	move_window@res& (0+255),b
 17495  004EA0                     l1088:
 17496                           
 17497                           ;ff.c: 745: }
 17498                           ;ff.c: 746: fs->winsect = sector;
 17499                           
 17500                           ; BSR set to: 0
 17501  004EA0  0100               	movlb	0	; () banked
 17502  004EA2  EE20 F02A          	lfsr	2,42
 17503  004EA6  519A               	movf	move_window@fs& (0+255),w,b
 17504  004EA8  26D9               	addwf	fsr2l,f,c
 17505  004EAA  519B               	movf	(move_window@fs+1)& (0+255),w,b
 17506  004EAC  22DA               	addwfc	fsr2h,f,c
 17507  004EAE  C09C  FFDE         	movff	move_window@sector,postinc2
 17508  004EB2  C09D  FFDE         	movff	move_window@sector+1,postinc2
 17509  004EB6  C09E  FFDE         	movff	move_window@sector+2,postinc2
 17510  004EBA  C09F  FFDE         	movff	move_window@sector+3,postinc2
 17511  004EBE                     l1087:
 17512                           
 17513                           ; BSR set to: 0
 17514                           ;ff.c: 747: }
 17515                           ;ff.c: 748: }
 17516                           ;ff.c: 749: return res;
 17517                           
 17518                           ; BSR set to: 0
 17519                           
 17520                           ; BSR set to: 0
 17521  004EBE  51A4               	movf	move_window@res& (0+255),w,b
 17522  004EC0  0012               	return	
 17523  004EC2                     __end_of_move_window:
 17524                           	opt stack 0
 17525                           tosu	equ	0xFFF
 17526                           tosh	equ	0xFFE
 17527                           tosl	equ	0xFFD
 17528                           pclath	equ	0xFFA
 17529                           tblptru	equ	0xFF8
 17530                           tblptrh	equ	0xFF7
 17531                           tblptrl	equ	0xFF6
 17532                           tablat	equ	0xFF5
 17533                           prodh	equ	0xFF4
 17534                           prodl	equ	0xFF3
 17535                           intcon	equ	0xFF2
 17536                           intcon2	equ	0xFF1
 17537                           intcon3	equ	0xFF0
 17538                           indf0	equ	0xFEF
 17539                           postinc0	equ	0xFEE
 17540                           fsr0h	equ	0xFEA
 17541                           fsr0l	equ	0xFE9
 17542                           wreg	equ	0xFE8
 17543                           indf1	equ	0xFE7
 17544                           postinc1	equ	0xFE6
 17545                           postdec1	equ	0xFE5
 17546                           fsr1h	equ	0xFE2
 17547                           fsr1l	equ	0xFE1
 17548                           indf2	equ	0xFDF
 17549                           postinc2	equ	0xFDE
 17550                           postdec2	equ	0xFDD
 17551                           plusw2	equ	0xFDB
 17552                           fsr2h	equ	0xFDA
 17553                           fsr2l	equ	0xFD9
 17554                           status	equ	0xFD8
 17555                           
 17556 ;; *************** function _sync_window *****************
 17557 ;; Defined at:
 17558 ;;		line 700 in file "bibliotecas/ff.c"
 17559 ;; Parameters:    Size  Location     Type
 17560 ;;  fs              2   37[BANK0 ] PTR struct .
 17561 ;;		 -> NULL(0), fs(558), 
 17562 ;; Auto vars:     Size  Location     Type
 17563 ;;  wsect           4   54[BANK0 ] unsigned long 
 17564 ;;  nf              2   52[BANK0 ] unsigned int 
 17565 ;;  res             1   51[BANK0 ] enum E75
 17566 ;; Return value:  Size  Location     Type
 17567 ;;                  1    wreg      enum E75
 17568 ;; Registers used:
 17569 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17570 ;; Tracked objects:
 17571 ;;		On entry : 0/0
 17572 ;;		On exit  : 0/0
 17573 ;;		Unchanged: 0/0
 17574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17575 ;;      Params:         0       2       0       0       0       0       0       0       0
 17576 ;;      Locals:         0       7       0       0       0       0       0       0       0
 17577 ;;      Temps:          0      12       0       0       0       0       0       0       0
 17578 ;;      Totals:         0      21       0       0       0       0       0       0       0
 17579 ;;Total ram usage:       21 bytes
 17580 ;; Hardware stack levels used:    1
 17581 ;; Hardware stack levels required when called:    9
 17582 ;; This function calls:
 17583 ;;		_disk_write
 17584 ;; This function is called by:
 17585 ;;		_move_window
 17586 ;;		_sync_fs
 17587 ;;		_dir_next
 17588 ;;		_f_write
 17589 ;; This function uses a non-reentrant model
 17590 ;;
 17591                           
 17592                           	psect	text51
 17593  003A9C                     __ptext51:
 17594                           	opt stack 0
 17595  003A9C                     _sync_window:
 17596                           	opt stack 18
 17597                           
 17598                           ;ff.c: 704: DWORD wsect;
 17599                           ;ff.c: 705: UINT nf;
 17600                           ;ff.c: 706: FRESULT res = FR_OK;
 17601                           
 17602                           ; BSR set to: 0
 17603                           ;incstack = 0
 17604  003A9C  0E00               	movlw	0
 17605  003A9E  0100               	movlb	0	; () banked
 17606  003AA0  6F93               	movwf	sync_window@res& (0+255),b
 17607                           
 17608                           ; BSR set to: 0
 17609                           ;ff.c: 709: if (fs->wflag) {
 17610  003AA2  EE20 F004          	lfsr	2,4
 17611  003AA6  5185               	movf	sync_window@fs& (0+255),w,b
 17612  003AA8  26D9               	addwf	fsr2l,f,c
 17613  003AAA  5186               	movf	(sync_window@fs+1)& (0+255),w,b
 17614  003AAC  22DA               	addwfc	fsr2h,f,c
 17615  003AAE  50DF               	movf	indf2,w,c
 17616  003AB0  B4D8               	btfsc	status,2,c
 17617  003AB2  D0AB               	goto	u14320
 17618                           
 17619                           ; BSR set to: 0
 17620                           ;ff.c: 710: wsect = fs->winsect;
 17621  003AB4  EE20 F02A          	lfsr	2,42
 17622  003AB8  5185               	movf	sync_window@fs& (0+255),w,b
 17623  003ABA  26D9               	addwf	fsr2l,f,c
 17624  003ABC  5186               	movf	(sync_window@fs+1)& (0+255),w,b
 17625  003ABE  22DA               	addwfc	fsr2h,f,c
 17626  003AC0  CFDE F096          	movff	postinc2,sync_window@wsect
 17627  003AC4  CFDE F097          	movff	postinc2,sync_window@wsect+1
 17628  003AC8  CFDE F098          	movff	postinc2,sync_window@wsect+2
 17629  003ACC  CFDE F099          	movff	postinc2,sync_window@wsect+3
 17630                           
 17631                           ; BSR set to: 0
 17632                           ;ff.c: 711: if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 17633  003AD0  0E2E               	movlw	46
 17634  003AD2  2585               	addwf	sync_window@fs& (0+255),w,b
 17635  003AD4  6F7B               	movwf	disk_write@buff& (0+255),b
 17636  003AD6  0E00               	movlw	0
 17637  003AD8  2186               	addwfc	(sync_window@fs+1)& (0+255),w,b
 17638  003ADA  6F7C               	movwf	(disk_write@buff+1)& (0+255),b
 17639  003ADC  C096  F07D         	movff	sync_window@wsect,disk_write@sector
 17640  003AE0  C097  F07E         	movff	sync_window@wsect+1,disk_write@sector+1
 17641  003AE4  C098  F07F         	movff	sync_window@wsect+2,disk_write@sector+2
 17642  003AE8  C099  F080         	movff	sync_window@wsect+3,disk_write@sector+3
 17643  003AEC  0E00               	movlw	0
 17644  003AEE  6F82               	movwf	(disk_write@count+1)& (0+255),b
 17645  003AF0  0E01               	movlw	1
 17646  003AF2  6F81               	movwf	disk_write@count& (0+255),b
 17647  003AF4  EE20 F001          	lfsr	2,1
 17648  003AF8  5185               	movf	sync_window@fs& (0+255),w,b
 17649  003AFA  26D9               	addwf	fsr2l,f,c
 17650  003AFC  5186               	movf	(sync_window@fs+1)& (0+255),w,b
 17651  003AFE  22DA               	addwfc	fsr2h,f,c
 17652  003B00  50DF               	movf	indf2,w,c
 17653  003B02  EC07  F01E         	call	_disk_write
 17654  003B06  0900               	iorlw	0
 17655  003B08  B4D8               	btfsc	status,2,c
 17656  003B0A  D004               	goto	l1078
 17657                           
 17658                           ;ff.c: 712: res = FR_DISK_ERR;
 17659  003B0C  0E01               	movlw	1
 17660  003B0E  0100               	movlb	0	; () banked
 17661  003B10  6F93               	movwf	sync_window@res& (0+255),b
 17662                           
 17663                           ;ff.c: 713: } else {
 17664  003B12  D07B               	goto	u14320
 17665  003B14                     l1078:
 17666                           
 17667                           ;ff.c: 714: fs->wflag = 0;
 17668                           
 17669                           ; BSR set to: 0
 17670  003B14  0100               	movlb	0	; () banked
 17671  003B16  EE20 F004          	lfsr	2,4
 17672  003B1A  5185               	movf	sync_window@fs& (0+255),w,b
 17673  003B1C  26D9               	addwf	fsr2l,f,c
 17674  003B1E  5186               	movf	(sync_window@fs+1)& (0+255),w,b
 17675  003B20  22DA               	addwfc	fsr2h,f,c
 17676  003B22  0E00               	movlw	0
 17677  003B24  6EDF               	movwf	indf2,c
 17678                           
 17679                           ; BSR set to: 0
 17680                           ;ff.c: 715: if (wsect - fs->fatbase < fs->fsize) {
 17681  003B26  EE20 F016          	lfsr	2,22
 17682  003B2A  5185               	movf	sync_window@fs& (0+255),w,b
 17683  003B2C  26D9               	addwf	fsr2l,f,c
 17684  003B2E  5186               	movf	(sync_window@fs+1)& (0+255),w,b
 17685  003B30  22DA               	addwfc	fsr2h,f,c
 17686  003B32  EE10 F01E          	lfsr	1,30
 17687  003B36  5185               	movf	sync_window@fs& (0+255),w,b
 17688  003B38  26E1               	addwf	fsr1l,f,c
 17689  003B3A  5186               	movf	(sync_window@fs+1)& (0+255),w,b
 17690  003B3C  22E2               	addwfc	fsr1h,f,c
 17691  003B3E  CFE6 F08B          	movff	postinc1,??_sync_window+4
 17692  003B42  CFE6 F08C          	movff	postinc1,??_sync_window+5
 17693  003B46  CFE6 F08D          	movff	postinc1,??_sync_window+6
 17694  003B4A  CFE6 F08E          	movff	postinc1,??_sync_window+7
 17695  003B4E  1F8B               	comf	(??_sync_window+4)& (0+255),f,b
 17696  003B50  1F8C               	comf	(??_sync_window+5)& (0+255),f,b
 17697  003B52  1F8D               	comf	(??_sync_window+6)& (0+255),f,b
 17698  003B54  1F8E               	comf	(??_sync_window+7)& (0+255),f,b
 17699  003B56  2B8B               	incf	(??_sync_window+4)& (0+255),f,b
 17700  003B58  0E00               	movlw	0
 17701  003B5A  238C               	addwfc	(??_sync_window+5)& (0+255),f,b
 17702  003B5C  238D               	addwfc	(??_sync_window+6)& (0+255),f,b
 17703  003B5E  238E               	addwfc	(??_sync_window+7)& (0+255),f,b
 17704  003B60  5196               	movf	sync_window@wsect& (0+255),w,b
 17705  003B62  258B               	addwf	(??_sync_window+4)& (0+255),w,b
 17706  003B64  6F8F               	movwf	(??_sync_window+8)& (0+255),b
 17707  003B66  5197               	movf	(sync_window@wsect+1)& (0+255),w,b
 17708  003B68  218C               	addwfc	(??_sync_window+5)& (0+255),w,b
 17709  003B6A  6F90               	movwf	(??_sync_window+9)& (0+255),b
 17710  003B6C  5198               	movf	(sync_window@wsect+2)& (0+255),w,b
 17711  003B6E  218D               	addwfc	(??_sync_window+6)& (0+255),w,b
 17712  003B70  6F91               	movwf	(??_sync_window+10)& (0+255),b
 17713  003B72  5199               	movf	(sync_window@wsect+3)& (0+255),w,b
 17714  003B74  218E               	addwfc	(??_sync_window+7)& (0+255),w,b
 17715  003B76  6F92               	movwf	(??_sync_window+11)& (0+255),b
 17716  003B78  50DE               	movf	postinc2,w,c
 17717  003B7A  5D8F               	subwf	(??_sync_window+8)& (0+255),w,b
 17718  003B7C  50DE               	movf	postinc2,w,c
 17719  003B7E  5990               	subwfb	(??_sync_window+9)& (0+255),w,b
 17720  003B80  50DE               	movf	postinc2,w,c
 17721  003B82  5991               	subwfb	(??_sync_window+10)& (0+255),w,b
 17722  003B84  50DE               	movf	postinc2,w,c
 17723  003B86  5992               	subwfb	(??_sync_window+11)& (0+255),w,b
 17724  003B88  B0D8               	btfsc	status,0,c
 17725  003B8A  D03F               	goto	u14320
 17726                           
 17727                           ; BSR set to: 0
 17728                           ;ff.c: 716: for (nf = fs->n_fats; nf >= 2; nf--) {
 17729  003B8C  EE20 F003          	lfsr	2,3
 17730  003B90  5185               	movf	sync_window@fs& (0+255),w,b
 17731  003B92  26D9               	addwf	fsr2l,f,c
 17732  003B94  5186               	movf	(sync_window@fs+1)& (0+255),w,b
 17733  003B96  22DA               	addwfc	fsr2h,f,c
 17734  003B98  50DF               	movf	indf2,w,c
 17735  003B9A  6F87               	movwf	??_sync_window& (0+255),b
 17736  003B9C  5187               	movf	??_sync_window& (0+255),w,b
 17737  003B9E  6F94               	movwf	sync_window@nf& (0+255),b
 17738  003BA0  6B95               	clrf	(sync_window@nf+1)& (0+255),b
 17739  003BA2                     l10945:
 17740                           
 17741                           ; BSR set to: 0
 17742  003BA2  5195               	movf	(sync_window@nf+1)& (0+255),w,b
 17743  003BA4  E104               	bnz	l10949
 17744  003BA6  0E02               	movlw	2
 17745  003BA8  5D94               	subwf	sync_window@nf& (0+255),w,b
 17746  003BAA  A0D8               	btfss	status,0,c
 17747  003BAC  D02E               	goto	u14320
 17748  003BAE                     l10949:
 17749                           
 17750                           ; BSR set to: 0
 17751                           ;ff.c: 717: wsect += fs->fsize;
 17752  003BAE  EE20 F016          	lfsr	2,22
 17753  003BB2  5185               	movf	sync_window@fs& (0+255),w,b
 17754  003BB4  26D9               	addwf	fsr2l,f,c
 17755  003BB6  5186               	movf	(sync_window@fs+1)& (0+255),w,b
 17756  003BB8  22DA               	addwfc	fsr2h,f,c
 17757  003BBA  50DE               	movf	postinc2,w,c
 17758  003BBC  2796               	addwf	sync_window@wsect& (0+255),f,b
 17759  003BBE  50DE               	movf	postinc2,w,c
 17760  003BC0  2397               	addwfc	(sync_window@wsect+1)& (0+255),f,b
 17761  003BC2  50DE               	movf	postinc2,w,c
 17762  003BC4  2398               	addwfc	(sync_window@wsect+2)& (0+255),f,b
 17763  003BC6  50DD               	movf	postdec2,w,c
 17764  003BC8  2399               	addwfc	(sync_window@wsect+3)& (0+255),f,b
 17765                           
 17766                           ; BSR set to: 0
 17767                           ;ff.c: 718: disk_write(fs->drv, fs->win, wsect, 1);
 17768  003BCA  0E2E               	movlw	46
 17769  003BCC  2585               	addwf	sync_window@fs& (0+255),w,b
 17770  003BCE  6F7B               	movwf	disk_write@buff& (0+255),b
 17771  003BD0  0E00               	movlw	0
 17772  003BD2  2186               	addwfc	(sync_window@fs+1)& (0+255),w,b
 17773  003BD4  6F7C               	movwf	(disk_write@buff+1)& (0+255),b
 17774  003BD6  C096  F07D         	movff	sync_window@wsect,disk_write@sector
 17775  003BDA  C097  F07E         	movff	sync_window@wsect+1,disk_write@sector+1
 17776  003BDE  C098  F07F         	movff	sync_window@wsect+2,disk_write@sector+2
 17777  003BE2  C099  F080         	movff	sync_window@wsect+3,disk_write@sector+3
 17778  003BE6  0E00               	movlw	0
 17779  003BE8  6F82               	movwf	(disk_write@count+1)& (0+255),b
 17780  003BEA  0E01               	movlw	1
 17781  003BEC  6F81               	movwf	disk_write@count& (0+255),b
 17782  003BEE  EE20 F001          	lfsr	2,1
 17783  003BF2  5185               	movf	sync_window@fs& (0+255),w,b
 17784  003BF4  26D9               	addwf	fsr2l,f,c
 17785  003BF6  5186               	movf	(sync_window@fs+1)& (0+255),w,b
 17786  003BF8  22DA               	addwfc	fsr2h,f,c
 17787  003BFA  50DF               	movf	indf2,w,c
 17788  003BFC  EC07  F01E         	call	_disk_write
 17789  003C00  0100               	movlb	0	; () banked
 17790  003C02  0794               	decf	sync_window@nf& (0+255),f,b
 17791  003C04  A0D8               	btfss	status,0,c
 17792  003C06  0795               	decf	(sync_window@nf+1)& (0+255),f,b
 17793  003C08  D7CC               	goto	l10945
 17794  003C0A                     u14320:
 17795                           
 17796                           ; BSR set to: 0
 17797                           ;ff.c: 719: }
 17798                           ;ff.c: 720: }
 17799                           ;ff.c: 721: }
 17800                           ;ff.c: 722: }
 17801                           ;ff.c: 723: return res;
 17802                           
 17803                           ; BSR set to: 0
 17804                           
 17805                           ; BSR set to: 0
 17806                           
 17807                           ; BSR set to: 0
 17808                           
 17809                           ; BSR set to: 0
 17810  003C0A  5193               	movf	sync_window@res& (0+255),w,b
 17811  003C0C  0012               	return	
 17812  003C0E                     __end_of_sync_window:
 17813                           	opt stack 0
 17814                           tosu	equ	0xFFF
 17815                           tosh	equ	0xFFE
 17816                           tosl	equ	0xFFD
 17817                           pclath	equ	0xFFA
 17818                           tblptru	equ	0xFF8
 17819                           tblptrh	equ	0xFF7
 17820                           tblptrl	equ	0xFF6
 17821                           tablat	equ	0xFF5
 17822                           prodh	equ	0xFF4
 17823                           prodl	equ	0xFF3
 17824                           intcon	equ	0xFF2
 17825                           intcon2	equ	0xFF1
 17826                           intcon3	equ	0xFF0
 17827                           indf0	equ	0xFEF
 17828                           postinc0	equ	0xFEE
 17829                           fsr0h	equ	0xFEA
 17830                           fsr0l	equ	0xFE9
 17831                           wreg	equ	0xFE8
 17832                           indf1	equ	0xFE7
 17833                           postinc1	equ	0xFE6
 17834                           postdec1	equ	0xFE5
 17835                           fsr1h	equ	0xFE2
 17836                           fsr1l	equ	0xFE1
 17837                           indf2	equ	0xFDF
 17838                           postinc2	equ	0xFDE
 17839                           postdec2	equ	0xFDD
 17840                           plusw2	equ	0xFDB
 17841                           fsr2h	equ	0xFDA
 17842                           fsr2l	equ	0xFD9
 17843                           status	equ	0xFD8
 17844                           
 17845 ;; *************** function _disk_write *****************
 17846 ;; Defined at:
 17847 ;;		line 443 in file "bibliotecas/diskio.c"
 17848 ;; Parameters:    Size  Location     Type
 17849 ;;  pdrv            1    wreg     unsigned char 
 17850 ;;  buff            2   27[BANK0 ] PTR const unsigned char 
 17851 ;;		 -> fs.win(512), NULL(0), STR_14(15), fs(558), 
 17852 ;;  sector          4   29[BANK0 ] unsigned long 
 17853 ;;  count           2   33[BANK0 ] unsigned int 
 17854 ;; Auto vars:     Size  Location     Type
 17855 ;;  pdrv            1   36[BANK0 ] unsigned char 
 17856 ;; Return value:  Size  Location     Type
 17857 ;;                  1    wreg      enum E25
 17858 ;; Registers used:
 17859 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17860 ;; Tracked objects:
 17861 ;;		On entry : 0/0
 17862 ;;		On exit  : 0/0
 17863 ;;		Unchanged: 0/0
 17864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17865 ;;      Params:         0       8       0       0       0       0       0       0       0
 17866 ;;      Locals:         0       1       0       0       0       0       0       0       0
 17867 ;;      Temps:          0       1       0       0       0       0       0       0       0
 17868 ;;      Totals:         0      10       0       0       0       0       0       0       0
 17869 ;;Total ram usage:       10 bytes
 17870 ;; Hardware stack levels used:    1
 17871 ;; Hardware stack levels required when called:    8
 17872 ;; This function calls:
 17873 ;;		_deselect
 17874 ;;		_dummy_clocks
 17875 ;;		_send_cmd
 17876 ;;		_xmit_datablock
 17877 ;; This function is called by:
 17878 ;;		_sync_window
 17879 ;;		_sync_fs
 17880 ;;		_f_write
 17881 ;; This function uses a non-reentrant model
 17882 ;;
 17883                           
 17884                           	psect	text52
 17885  003C0E                     __ptext52:
 17886                           	opt stack 0
 17887  003C0E                     _disk_write:
 17888                           	opt stack 18
 17889                           
 17890                           ; BSR set to: 0
 17891                           ;incstack = 0
 17892                           ;disk_write@pdrv stored from wreg
 17893  003C0E  0100               	movlb	0	; () banked
 17894  003C10  6F84               	movwf	disk_write@pdrv& (0+255),b
 17895                           
 17896                           ;diskio.c: 450: if (pdrv || !count) return RES_PARERR;
 17897  003C12  0100               	movlb	0	; () banked
 17898  003C14  5184               	movf	disk_write@pdrv& (0+255),w,b
 17899  003C16  A4D8               	btfss	status,2,c
 17900  003C18  D004               	goto	u13990
 17901                           
 17902                           ; BSR set to: 0
 17903  003C1A  5181               	movf	disk_write@count& (0+255),w,b
 17904  003C1C  1182               	iorwf	(disk_write@count+1)& (0+255),w,b
 17905  003C1E  A4D8               	btfss	status,2,c
 17906  003C20  D002               	goto	l976
 17907  003C22                     u13990:
 17908                           
 17909                           ; BSR set to: 0
 17910                           
 17911                           ; BSR set to: 0
 17912  003C22  0E04               	movlw	4
 17913                           
 17914                           ; BSR set to: 0
 17915  003C24  0012               	return	
 17916  003C26                     l976:
 17917                           
 17918                           ; BSR set to: 0
 17919                           ;diskio.c: 451: if (Stat & 0x01) return RES_NOTRDY;
 17920  003C26  A1FF               	btfss	_Stat& (0+255),0,b
 17921  003C28  D002               	goto	l980
 17922                           
 17923                           ; BSR set to: 0
 17924  003C2A  0E03               	movlw	3
 17925                           
 17926                           ; BSR set to: 0
 17927  003C2C  0012               	return	
 17928  003C2E                     l980:
 17929                           
 17930                           ; BSR set to: 0
 17931                           ;diskio.c: 452: if (Stat & 0x04) return RES_WRPRT;
 17932  003C2E  A5FF               	btfss	_Stat& (0+255),2,b
 17933  003C30  D002               	goto	l981
 17934                           
 17935                           ; BSR set to: 0
 17936  003C32  0E02               	movlw	2
 17937                           
 17938                           ; BSR set to: 0
 17939  003C34  0012               	return	
 17940  003C36                     l981:
 17941                           
 17942                           ; BSR set to: 0
 17943                           ;diskio.c: 454: if (!(CardType & 0x08)) sector *= 512;
 17944  003C36  B7FE               	btfsc	_CardType& (0+255),3,b
 17945  003C38  D008               	goto	l982
 17946                           
 17947                           ; BSR set to: 0
 17948  003C3A  0E09               	movlw	9
 17949  003C3C                     u14035:
 17950  003C3C  90D8               	bcf	status,0,c
 17951  003C3E  377D               	rlcf	disk_write@sector& (0+255),f,b
 17952  003C40  377E               	rlcf	(disk_write@sector+1)& (0+255),f,b
 17953  003C42  377F               	rlcf	(disk_write@sector+2)& (0+255),f,b
 17954  003C44  3780               	rlcf	(disk_write@sector+3)& (0+255),f,b
 17955  003C46  2EE8               	decfsz	wreg,f,c
 17956  003C48  D7F9               	goto	u14035
 17957  003C4A                     l982:
 17958                           
 17959                           ; BSR set to: 0
 17960                           ;diskio.c: 456: if (count == 1) {
 17961  003C4A  0581               	decf	disk_write@count& (0+255),w,b
 17962  003C4C  1182               	iorwf	(disk_write@count+1)& (0+255),w,b
 17963  003C4E  A4D8               	btfss	status,2,c
 17964  003C50  D02C               	goto	l983
 17965                           
 17966                           ; BSR set to: 0
 17967                           ;diskio.c: 457: dummy_clocks(10);
 17968  003C52  0E0A               	movlw	10
 17969  003C54  EC8F  F02C         	call	_dummy_clocks
 17970                           
 17971                           ;diskio.c: 458: if ((send_cmd((24), sector) == 0)
 17972                           ;diskio.c: 459: && xmit_datablock(buff, 0xFE))
 17973  003C58  C07D  F075         	movff	disk_write@sector,send_cmd@arg
 17974  003C5C  C07E  F076         	movff	disk_write@sector+1,send_cmd@arg+1
 17975  003C60  C07F  F077         	movff	disk_write@sector+2,send_cmd@arg+2
 17976  003C64  C080  F078         	movff	disk_write@sector+3,send_cmd@arg+3
 17977  003C68  0E18               	movlw	24
 17978  003C6A  ECC8  F02B         	call	_send_cmd
 17979  003C6E  0900               	iorlw	0
 17980  003C70  A4D8               	btfss	status,2,c
 17981  003C72  D071               	goto	l991
 17982  003C74  C07B  F01F         	movff	disk_write@buff,xmit_datablock@buff
 17983  003C78  C07C  F020         	movff	disk_write@buff+1,xmit_datablock@buff+1
 17984  003C7C  6A21               	clrf	xmit_datablock@buff+2,c
 17985  003C7E  501F               	movf	xmit_datablock@buff,w,c
 17986  003C80  1020               	iorwf	xmit_datablock@buff+1,w,c
 17987  003C82  B4D8               	btfsc	status,2,c
 17988  003C84  D006               	goto	u14061
 17989  003C86  0E07               	movlw	(high __ramtop+-1)
 17990  003C88  0100               	movlb	0	; () banked
 17991  003C8A  657C               	cpfsgt	(disk_write@buff+1)& (0+255),b
 17992  003C8C  D001               	goto	u140611
 17993  003C8E  D001               	goto	u14061
 17994  003C90                     u140611:
 17995  003C90  8A21               	bsf	xmit_datablock@buff+2,5,c
 17996  003C92                     u14061:
 17997  003C92  0EFE               	movlw	254
 17998  003C94  6E22               	movwf	xmit_datablock@token,c
 17999  003C96  EC58  F029         	call	_xmit_datablock	;wreg free
 18000  003C9A  0900               	iorlw	0
 18001  003C9C  B4D8               	btfsc	status,2,c
 18002  003C9E  D05B               	goto	l991
 18003                           
 18004                           ;diskio.c: 460: count = 0;
 18005  003CA0  0E00               	movlw	0
 18006  003CA2  0100               	movlb	0	; () banked
 18007  003CA4  6F82               	movwf	(disk_write@count+1)& (0+255),b
 18008  003CA6  0E00               	movlw	0
 18009  003CA8  D055               	goto	L23
 18010  003CAA                     l983:
 18011                           
 18012                           ; BSR set to: 0
 18013                           ;diskio.c: 462: else {
 18014                           ;diskio.c: 463: dummy_clocks(10);
 18015                           
 18016                           ; BSR set to: 0
 18017  003CAA  0E0A               	movlw	10
 18018  003CAC  EC8F  F02C         	call	_dummy_clocks
 18019                           
 18020                           ;diskio.c: 464: if (CardType & (0x02|0x04)) send_cmd((0x80+23), count);
 18021  003CB0  C0FE  F083         	movff	_CardType,??_disk_write
 18022  003CB4  0E06               	movlw	6
 18023  003CB6  0100               	movlb	0	; () banked
 18024  003CB8  1783               	andwf	??_disk_write& (0+255),f,b
 18025  003CBA  B4D8               	btfsc	status,2,c
 18026  003CBC  D009               	goto	l986
 18027                           
 18028                           ; BSR set to: 0
 18029  003CBE  C081  F075         	movff	disk_write@count,send_cmd@arg
 18030  003CC2  C082  F076         	movff	disk_write@count+1,send_cmd@arg+1
 18031  003CC6  6B77               	clrf	(send_cmd@arg+2)& (0+255),b
 18032  003CC8  6B78               	clrf	(send_cmd@arg+3)& (0+255),b
 18033  003CCA  0E97               	movlw	151
 18034  003CCC  ECC8  F02B         	call	_send_cmd
 18035  003CD0                     l986:
 18036                           
 18037                           ;diskio.c: 465: dummy_clocks(10);
 18038  003CD0  0E0A               	movlw	10
 18039  003CD2  EC8F  F02C         	call	_dummy_clocks
 18040                           
 18041                           ;diskio.c: 466: if (send_cmd((25), sector) == 0) {
 18042  003CD6  C07D  F075         	movff	disk_write@sector,send_cmd@arg
 18043  003CDA  C07E  F076         	movff	disk_write@sector+1,send_cmd@arg+1
 18044  003CDE  C07F  F077         	movff	disk_write@sector+2,send_cmd@arg+2
 18045  003CE2  C080  F078         	movff	disk_write@sector+3,send_cmd@arg+3
 18046  003CE6  0E19               	movlw	25
 18047  003CE8  ECC8  F02B         	call	_send_cmd
 18048  003CEC  0900               	iorlw	0
 18049  003CEE  A4D8               	btfss	status,2,c
 18050  003CF0  D032               	goto	l991
 18051  003CF2                     u14090:
 18052                           
 18053                           ;diskio.c: 468: if (!xmit_datablock(buff, 0xFC)) break;
 18054                           
 18055                           ;diskio.c: 467: do {
 18056  003CF2  C07B  F01F         	movff	disk_write@buff,xmit_datablock@buff
 18057  003CF6  C07C  F020         	movff	disk_write@buff+1,xmit_datablock@buff+1
 18058  003CFA  6A21               	clrf	xmit_datablock@buff+2,c
 18059  003CFC  501F               	movf	xmit_datablock@buff,w,c
 18060  003CFE  1020               	iorwf	xmit_datablock@buff+1,w,c
 18061  003D00  B4D8               	btfsc	status,2,c
 18062  003D02  D006               	goto	u14101
 18063  003D04  0E07               	movlw	(high __ramtop+-1)
 18064  003D06  0100               	movlb	0	; () banked
 18065  003D08  657C               	cpfsgt	(disk_write@buff+1)& (0+255),b
 18066  003D0A  D001               	goto	u141011
 18067  003D0C  D001               	goto	u14101
 18068  003D0E                     u141011:
 18069  003D0E  8A21               	bsf	xmit_datablock@buff+2,5,c
 18070  003D10                     u14101:
 18071  003D10  0EFC               	movlw	252
 18072  003D12  6E22               	movwf	xmit_datablock@token,c
 18073  003D14  EC58  F029         	call	_xmit_datablock	;wreg free
 18074  003D18  0900               	iorlw	0
 18075  003D1A  B4D8               	btfsc	status,2,c
 18076  003D1C  D00A               	goto	u14120
 18077                           
 18078                           ;diskio.c: 469: buff += 512;
 18079  003D1E  0100               	movlb	0	; () banked
 18080  003D20  0E02               	movlw	2
 18081  003D22  277C               	addwf	(disk_write@buff+1)& (0+255),f,b
 18082                           
 18083                           ;diskio.c: 470: } while (--count);
 18084  003D24  0781               	decf	disk_write@count& (0+255),f,b
 18085  003D26  A0D8               	btfss	status,0,c
 18086  003D28  0782               	decf	(disk_write@count+1)& (0+255),f,b
 18087  003D2A  5181               	movf	disk_write@count& (0+255),w,b
 18088  003D2C  1182               	iorwf	(disk_write@count+1)& (0+255),w,b
 18089  003D2E  A4D8               	btfss	status,2,c
 18090  003D30  D7E0               	goto	u14090
 18091  003D32                     u14120:
 18092                           
 18093                           ;diskio.c: 471: if (!xmit_datablock(0, 0xFD))
 18094                           
 18095                           ; BSR set to: 0
 18096  003D32  0E00               	movlw	0
 18097  003D34  6E1F               	movwf	xmit_datablock@buff,c
 18098  003D36  0E00               	movlw	0
 18099  003D38  6E20               	movwf	xmit_datablock@buff+1,c
 18100  003D3A  0E00               	movlw	0
 18101  003D3C  6E21               	movwf	xmit_datablock@buff+2,c
 18102  003D3E  0EFD               	movlw	253
 18103  003D40  6E22               	movwf	xmit_datablock@token,c
 18104  003D42  EC58  F029         	call	_xmit_datablock	;wreg free
 18105  003D46  0900               	iorlw	0
 18106  003D48  A4D8               	btfss	status,2,c
 18107  003D4A  D005               	goto	l991
 18108                           
 18109                           ;diskio.c: 472: count = 1;
 18110  003D4C  0E00               	movlw	0
 18111  003D4E  0100               	movlb	0	; () banked
 18112  003D50  6F82               	movwf	(disk_write@count+1)& (0+255),b
 18113  003D52  0E01               	movlw	1
 18114  003D54                     L23:
 18115  003D54  6F81               	movwf	disk_write@count& (0+255),b
 18116  003D56                     l991:
 18117                           
 18118                           ;diskio.c: 473: }
 18119                           ;diskio.c: 474: }
 18120                           ;diskio.c: 475: deselect();
 18121                           
 18122                           ; BSR set to: 0
 18123                           
 18124                           ; BSR set to: 0
 18125                           
 18126                           ; BSR set to: 0
 18127  003D56  ECE9  F02D         	call	_deselect	;wreg free
 18128                           
 18129                           ;diskio.c: 477: return count ? RES_ERROR : RES_OK;
 18130  003D5A  0100               	movlb	0	; () banked
 18131  003D5C  5181               	movf	disk_write@count& (0+255),w,b
 18132  003D5E  1182               	iorwf	(disk_write@count+1)& (0+255),w,b
 18133  003D60  B4D8               	btfsc	status,2,c
 18134  003D62  D002               	goto	u14140
 18135  003D64  0E01               	movlw	1
 18136  003D66  0012               	return	
 18137  003D68                     u14140:
 18138  003D68  0E00               	movlw	0
 18139  003D6A  0012               	return	
 18140  003D6C                     __end_of_disk_write:
 18141                           	opt stack 0
 18142                           tosu	equ	0xFFF
 18143                           tosh	equ	0xFFE
 18144                           tosl	equ	0xFFD
 18145                           pclath	equ	0xFFA
 18146                           tblptru	equ	0xFF8
 18147                           tblptrh	equ	0xFF7
 18148                           tblptrl	equ	0xFF6
 18149                           tablat	equ	0xFF5
 18150                           prodh	equ	0xFF4
 18151                           prodl	equ	0xFF3
 18152                           intcon	equ	0xFF2
 18153                           intcon2	equ	0xFF1
 18154                           intcon3	equ	0xFF0
 18155                           indf0	equ	0xFEF
 18156                           postinc0	equ	0xFEE
 18157                           fsr0h	equ	0xFEA
 18158                           fsr0l	equ	0xFE9
 18159                           wreg	equ	0xFE8
 18160                           indf1	equ	0xFE7
 18161                           postinc1	equ	0xFE6
 18162                           postdec1	equ	0xFE5
 18163                           fsr1h	equ	0xFE2
 18164                           fsr1l	equ	0xFE1
 18165                           indf2	equ	0xFDF
 18166                           postinc2	equ	0xFDE
 18167                           postdec2	equ	0xFDD
 18168                           plusw2	equ	0xFDB
 18169                           fsr2h	equ	0xFDA
 18170                           fsr2l	equ	0xFD9
 18171                           status	equ	0xFD8
 18172                           
 18173 ;; *************** function _xmit_datablock *****************
 18174 ;; Defined at:
 18175 ;;		line 174 in file "bibliotecas/diskio.c"
 18176 ;; Parameters:    Size  Location     Type
 18177 ;;  buff            3   30[COMRAM] PTR const unsigned char 
 18178 ;;		 -> fs.win(512), NULL(0), ROM(32767), STR_14(15), 
 18179 ;;		 -> fs(558), 
 18180 ;;  token           1   33[COMRAM] unsigned char 
 18181 ;; Auto vars:     Size  Location     Type
 18182 ;;  i               2   34[COMRAM] unsigned short 
 18183 ;;  resp            1   36[COMRAM] unsigned char 
 18184 ;; Return value:  Size  Location     Type
 18185 ;;                  1    wreg      unsigned char 
 18186 ;; Registers used:
 18187 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18188 ;; Tracked objects:
 18189 ;;		On entry : 0/0
 18190 ;;		On exit  : 0/0
 18191 ;;		Unchanged: 0/0
 18192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18193 ;;      Params:         4       0       0       0       0       0       0       0       0
 18194 ;;      Locals:         3       0       0       0       0       0       0       0       0
 18195 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18196 ;;      Totals:         7       0       0       0       0       0       0       0       0
 18197 ;;Total ram usage:        7 bytes
 18198 ;; Hardware stack levels used:    1
 18199 ;; Hardware stack levels required when called:    4
 18200 ;; This function calls:
 18201 ;;		_escreve_dado_SPI
 18202 ;;		_recebe_dado_SPI
 18203 ;;		_wait_ready
 18204 ;; This function is called by:
 18205 ;;		_disk_write
 18206 ;; This function uses a non-reentrant model
 18207 ;;
 18208                           
 18209                           	psect	text53
 18210  0052B0                     __ptext53:
 18211                           	opt stack 0
 18212  0052B0                     _xmit_datablock:
 18213                           	opt stack 21
 18214                           
 18215                           ;diskio.c: 179: BYTE resp;
 18216                           ;diskio.c: 180: WORD i;
 18217                           ;diskio.c: 183: if (!wait_ready()) return 0;
 18218                           
 18219                           ; BSR set to: 0
 18220                           ;incstack = 0
 18221  0052B0  ECCC  F02C         	call	_wait_ready	;wreg free
 18222  0052B4  0900               	iorlw	0
 18223  0052B6  A4D8               	btfss	status,2,c
 18224  0052B8  D002               	goto	l900
 18225  0052BA  0E00               	movlw	0
 18226  0052BC  0012               	return	
 18227  0052BE                     l900:
 18228                           
 18229                           ;diskio.c: 185: escreve_dado_SPI(token);
 18230  0052BE  5022               	movf	xmit_datablock@token,w,c
 18231  0052C0  EC0E  F02C         	call	_escreve_dado_SPI
 18232                           
 18233                           ;diskio.c: 186: if (token != 0xFD) {
 18234  0052C4  0EFD               	movlw	253
 18235  0052C6  1822               	xorwf	xmit_datablock@token,w,c
 18236  0052C8  B4D8               	btfsc	status,2,c
 18237  0052CA  D031               	goto	l905
 18238                           
 18239                           ;diskio.c: 187: i = 512;
 18240  0052CC  0E02               	movlw	2
 18241  0052CE  6E24               	movwf	xmit_datablock@i+1,c
 18242  0052D0  0E00               	movlw	0
 18243  0052D2  6E23               	movwf	xmit_datablock@i,c
 18244  0052D4                     
 18245                           ;diskio.c: 189: escreve_dado_SPI(*buff++);
 18246  0052D4  C01F  FFF6         	movff	xmit_datablock@buff,tblptrl
 18247  0052D8  C020  FFF7         	movff	xmit_datablock@buff+1,tblptrh
 18248  0052DC  C021  FFF8         	movff	xmit_datablock@buff+2,tblptru
 18249  0052E0  BAF8               	btfsc	tblptru,5,c
 18250  0052E2  D003               	bra	u13897
 18251  0052E4  0008               	tblrd		*
 18252  0052E6  50F5               	movf	tablat,w,c
 18253  0052E8  D005               	bra	u13890
 18254  0052EA                     u13897:
 18255  0052EA  CFF6 FFE9          	movff	tblptrl,fsr0l
 18256  0052EE  CFF7 FFEA          	movff	tblptrh,fsr0h
 18257  0052F2  50EF               	movf	indf0,w,c
 18258  0052F4                     u13890:
 18259  0052F4  EC0E  F02C         	call	_escreve_dado_SPI
 18260  0052F8  0E01               	movlw	1
 18261  0052FA  261F               	addwf	xmit_datablock@buff,f,c
 18262  0052FC  0E00               	movlw	0
 18263  0052FE  2220               	addwfc	xmit_datablock@buff+1,f,c
 18264  005300  0E00               	movlw	0
 18265  005302  2221               	addwfc	xmit_datablock@buff+2,f,c
 18266                           
 18267                           ;diskio.c: 190: while (--i);
 18268  005304  0623               	decf	xmit_datablock@i,f,c
 18269  005306  A0D8               	btfss	status,0,c
 18270  005308  0624               	decf	xmit_datablock@i+1,f,c
 18271  00530A  5023               	movf	xmit_datablock@i,w,c
 18272  00530C  1024               	iorwf	xmit_datablock@i+1,w,c
 18273  00530E  A4D8               	btfss	status,2,c
 18274  005310  D7E1               	goto	l903
 18275                           
 18276                           ;diskio.c: 191: recebe_dado_SPI();
 18277  005312  ECF6  F02A         	call	_recebe_dado_SPI	;wreg free
 18278                           
 18279                           ;diskio.c: 192: recebe_dado_SPI();
 18280  005316  ECF6  F02A         	call	_recebe_dado_SPI	;wreg free
 18281                           
 18282                           ;diskio.c: 193: resp = recebe_dado_SPI();
 18283  00531A  ECF6  F02A         	call	_recebe_dado_SPI	;wreg free
 18284  00531E  6E25               	movwf	xmit_datablock@resp,c
 18285                           
 18286                           ;diskio.c: 194: if ((resp & 0x1F) != 0x05)
 18287  005320  5025               	movf	xmit_datablock@resp,w,c
 18288  005322  0B1F               	andlw	31
 18289  005324  0A05               	xorlw	5
 18290  005326  B4D8               	btfsc	status,2,c
 18291  005328  D002               	goto	l905
 18292                           
 18293                           ;diskio.c: 195: return 0;
 18294  00532A  0E00               	movlw	0
 18295  00532C  0012               	return	
 18296  00532E                     l905:
 18297                           
 18298                           ;diskio.c: 196: }
 18299                           ;diskio.c: 198: return 1;
 18300  00532E  0E01               	movlw	1
 18301  005330  0012               	return	
 18302  005332                     __end_of_xmit_datablock:
 18303                           	opt stack 0
 18304                           tosu	equ	0xFFF
 18305                           tosh	equ	0xFFE
 18306                           tosl	equ	0xFFD
 18307                           pclath	equ	0xFFA
 18308                           tblptru	equ	0xFF8
 18309                           tblptrh	equ	0xFF7
 18310                           tblptrl	equ	0xFF6
 18311                           tablat	equ	0xFF5
 18312                           prodh	equ	0xFF4
 18313                           prodl	equ	0xFF3
 18314                           intcon	equ	0xFF2
 18315                           intcon2	equ	0xFF1
 18316                           intcon3	equ	0xFF0
 18317                           indf0	equ	0xFEF
 18318                           postinc0	equ	0xFEE
 18319                           fsr0h	equ	0xFEA
 18320                           fsr0l	equ	0xFE9
 18321                           wreg	equ	0xFE8
 18322                           indf1	equ	0xFE7
 18323                           postinc1	equ	0xFE6
 18324                           postdec1	equ	0xFE5
 18325                           fsr1h	equ	0xFE2
 18326                           fsr1l	equ	0xFE1
 18327                           indf2	equ	0xFDF
 18328                           postinc2	equ	0xFDE
 18329                           postdec2	equ	0xFDD
 18330                           plusw2	equ	0xFDB
 18331                           fsr2h	equ	0xFDA
 18332                           fsr2l	equ	0xFD9
 18333                           status	equ	0xFD8
 18334                           
 18335 ;; *************** function _disk_read *****************
 18336 ;; Defined at:
 18337 ;;		line 407 in file "bibliotecas/diskio.c"
 18338 ;; Parameters:    Size  Location     Type
 18339 ;;  pdrv            1    wreg     unsigned char 
 18340 ;;  buff            2   27[BANK0 ] PTR unsigned char 
 18341 ;;		 -> NULL(0), fs(558), 
 18342 ;;  sector          4   29[BANK0 ] unsigned long 
 18343 ;;  count           2   33[BANK0 ] unsigned int 
 18344 ;; Auto vars:     Size  Location     Type
 18345 ;;  pdrv            1   35[BANK0 ] unsigned char 
 18346 ;;  cmd             1   38[BANK0 ] unsigned char 
 18347 ;; Return value:  Size  Location     Type
 18348 ;;                  1    wreg      enum E25
 18349 ;; Registers used:
 18350 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18351 ;; Tracked objects:
 18352 ;;		On entry : 0/0
 18353 ;;		On exit  : 0/0
 18354 ;;		Unchanged: 0/0
 18355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18356 ;;      Params:         0       8       0       0       0       0       0       0       0
 18357 ;;      Locals:         0       4       0       0       0       0       0       0       0
 18358 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18359 ;;      Totals:         0      12       0       0       0       0       0       0       0
 18360 ;;Total ram usage:       12 bytes
 18361 ;; Hardware stack levels used:    1
 18362 ;; Hardware stack levels required when called:    8
 18363 ;; This function calls:
 18364 ;;		_deselect
 18365 ;;		_dummy_clocks
 18366 ;;		_rcvr_datablock
 18367 ;;		_send_cmd
 18368 ;; This function is called by:
 18369 ;;		_move_window
 18370 ;;		_f_read
 18371 ;; This function uses a non-reentrant model
 18372 ;;
 18373                           
 18374                           	psect	text54
 18375  0048D2                     __ptext54:
 18376                           	opt stack 0
 18377  0048D2                     _disk_read:
 18378                           	opt stack 18
 18379                           
 18380                           ;incstack = 0
 18381                           ;disk_read@pdrv stored from wreg
 18382  0048D2  0100               	movlb	0	; () banked
 18383  0048D4  6F83               	movwf	disk_read@pdrv& (0+255),b
 18384                           
 18385                           ;diskio.c: 414: BYTE cmd;
 18386                           ;diskio.c: 417: if (pdrv || !count) return RES_PARERR;
 18387  0048D6  0100               	movlb	0	; () banked
 18388  0048D8  5183               	movf	disk_read@pdrv& (0+255),w,b
 18389  0048DA  A4D8               	btfss	status,2,c
 18390  0048DC  D004               	goto	u14170
 18391                           
 18392                           ; BSR set to: 0
 18393  0048DE  5181               	movf	disk_read@count& (0+255),w,b
 18394  0048E0  1182               	iorwf	(disk_read@count+1)& (0+255),w,b
 18395  0048E2  A4D8               	btfss	status,2,c
 18396  0048E4  D002               	goto	l959
 18397  0048E6                     u14170:
 18398                           
 18399                           ; BSR set to: 0
 18400                           
 18401                           ; BSR set to: 0
 18402  0048E6  0E04               	movlw	4
 18403                           
 18404                           ; BSR set to: 0
 18405  0048E8  0012               	return	
 18406  0048EA                     l959:
 18407                           
 18408                           ; BSR set to: 0
 18409                           ;diskio.c: 418: if (Stat & 0x01) return RES_NOTRDY;
 18410  0048EA  A1FF               	btfss	_Stat& (0+255),0,b
 18411  0048EC  D002               	goto	l963
 18412                           
 18413                           ; BSR set to: 0
 18414  0048EE  0E03               	movlw	3
 18415                           
 18416                           ; BSR set to: 0
 18417  0048F0  0012               	return	
 18418  0048F2                     l963:
 18419                           
 18420                           ; BSR set to: 0
 18421                           ;diskio.c: 420: if (!(CardType & 0x08)) sector *= 512;
 18422  0048F2  B7FE               	btfsc	_CardType& (0+255),3,b
 18423  0048F4  D008               	goto	l964
 18424                           
 18425                           ; BSR set to: 0
 18426  0048F6  0E09               	movlw	9
 18427  0048F8                     u14205:
 18428  0048F8  90D8               	bcf	status,0,c
 18429  0048FA  377D               	rlcf	disk_read@sector& (0+255),f,b
 18430  0048FC  377E               	rlcf	(disk_read@sector+1)& (0+255),f,b
 18431  0048FE  377F               	rlcf	(disk_read@sector+2)& (0+255),f,b
 18432  004900  3780               	rlcf	(disk_read@sector+3)& (0+255),f,b
 18433  004902  2EE8               	decfsz	wreg,f,c
 18434  004904  D7F9               	goto	u14205
 18435  004906                     l964:
 18436                           
 18437                           ; BSR set to: 0
 18438                           ;diskio.c: 422: cmd = count > 1 ? (18) : (17);
 18439  004906  5182               	movf	(disk_read@count+1)& (0+255),w,b
 18440  004908  E108               	bnz	l10905
 18441  00490A  0E02               	movlw	2
 18442  00490C  5D81               	subwf	disk_read@count& (0+255),w,b
 18443  00490E  B0D8               	btfsc	status,0,c
 18444  004910  D004               	goto	l966
 18445                           
 18446                           ; BSR set to: 0
 18447  004912  0E00               	movlw	0
 18448  004914  6F85               	movwf	(_disk_read$2261+1)& (0+255),b
 18449  004916  0E11               	movlw	17
 18450  004918  D003               	goto	L24
 18451  00491A                     l966:
 18452  00491A                     l10905:
 18453                           
 18454                           ; BSR set to: 0
 18455  00491A  0E00               	movlw	0
 18456  00491C  6F85               	movwf	(_disk_read$2261+1)& (0+255),b
 18457  00491E  0E12               	movlw	18
 18458  004920                     L24:
 18459  004920  6F84               	movwf	_disk_read$2261& (0+255),b
 18460                           
 18461                           ; BSR set to: 0
 18462                           
 18463                           ; BSR set to: 0
 18464  004922  C084  F086         	movff	_disk_read$2261,disk_read@cmd
 18465                           
 18466                           ; BSR set to: 0
 18467                           ;diskio.c: 423: if (send_cmd(cmd, sector) == 0) {
 18468  004926  C07D  F075         	movff	disk_read@sector,send_cmd@arg
 18469  00492A  C07E  F076         	movff	disk_read@sector+1,send_cmd@arg+1
 18470  00492E  C07F  F077         	movff	disk_read@sector+2,send_cmd@arg+2
 18471  004932  C080  F078         	movff	disk_read@sector+3,send_cmd@arg+3
 18472  004936  5186               	movf	disk_read@cmd& (0+255),w,b
 18473  004938  ECC8  F02B         	call	_send_cmd
 18474  00493C  0900               	iorlw	0
 18475  00493E  A4D8               	btfss	status,2,c
 18476  004940  D02A               	goto	l973
 18477  004942                     u14220:
 18478                           
 18479                           ;diskio.c: 425: if (!rcvr_datablock(buff, 512)) break;
 18480                           
 18481                           ;diskio.c: 424: do {
 18482  004942  C07B  F020         	movff	disk_read@buff,rcvr_datablock@buff
 18483  004946  C07C  F021         	movff	disk_read@buff+1,rcvr_datablock@buff+1
 18484  00494A  0E02               	movlw	2
 18485  00494C  6E23               	movwf	rcvr_datablock@btr+1,c
 18486  00494E  0E00               	movlw	0
 18487  004950  6E22               	movwf	rcvr_datablock@btr,c
 18488  004952  EC92  F028         	call	_rcvr_datablock	;wreg free
 18489  004956  0900               	iorlw	0
 18490  004958  B4D8               	btfsc	status,2,c
 18491  00495A  D00A               	goto	u14240
 18492                           
 18493                           ;diskio.c: 426: buff += 512;
 18494  00495C  0100               	movlb	0	; () banked
 18495  00495E  0E02               	movlw	2
 18496  004960  277C               	addwf	(disk_read@buff+1)& (0+255),f,b
 18497                           
 18498                           ;diskio.c: 427: } while (--count);
 18499  004962  0781               	decf	disk_read@count& (0+255),f,b
 18500  004964  A0D8               	btfss	status,0,c
 18501  004966  0782               	decf	(disk_read@count+1)& (0+255),f,b
 18502  004968  5181               	movf	disk_read@count& (0+255),w,b
 18503  00496A  1182               	iorwf	(disk_read@count+1)& (0+255),w,b
 18504  00496C  A4D8               	btfss	status,2,c
 18505  00496E  D7E9               	goto	u14220
 18506  004970                     u14240:
 18507                           
 18508                           ;diskio.c: 428: dummy_clocks(10);
 18509                           
 18510                           ; BSR set to: 0
 18511  004970  0E0A               	movlw	10
 18512  004972  EC8F  F02C         	call	_dummy_clocks
 18513                           
 18514                           ;diskio.c: 429: if (cmd == (18)) send_cmd((12), 0);
 18515  004976  0E12               	movlw	18
 18516  004978  0100               	movlb	0	; () banked
 18517  00497A  1986               	xorwf	disk_read@cmd& (0+255),w,b
 18518  00497C  A4D8               	btfss	status,2,c
 18519  00497E  D00B               	goto	l973
 18520                           
 18521                           ; BSR set to: 0
 18522  004980  0E00               	movlw	0
 18523  004982  6F75               	movwf	send_cmd@arg& (0+255),b
 18524  004984  0E00               	movlw	0
 18525  004986  6F76               	movwf	(send_cmd@arg+1)& (0+255),b
 18526  004988  0E00               	movlw	0
 18527  00498A  6F77               	movwf	(send_cmd@arg+2)& (0+255),b
 18528  00498C  0E00               	movlw	0
 18529  00498E  6F78               	movwf	(send_cmd@arg+3)& (0+255),b
 18530  004990  0E0C               	movlw	12
 18531  004992  ECC8  F02B         	call	_send_cmd
 18532  004996                     l973:
 18533                           
 18534                           ;diskio.c: 430: }
 18535                           ;diskio.c: 431: deselect();
 18536  004996  ECE9  F02D         	call	_deselect	;wreg free
 18537                           
 18538                           ;diskio.c: 433: return count ? RES_ERROR : RES_OK;
 18539  00499A  0100               	movlb	0	; () banked
 18540  00499C  5181               	movf	disk_read@count& (0+255),w,b
 18541  00499E  1182               	iorwf	(disk_read@count+1)& (0+255),w,b
 18542  0049A0  B4D8               	btfsc	status,2,c
 18543  0049A2  D002               	goto	u14260
 18544  0049A4  0E01               	movlw	1
 18545  0049A6  0012               	return	
 18546  0049A8                     u14260:
 18547  0049A8  0E00               	movlw	0
 18548  0049AA  0012               	return	
 18549  0049AC                     __end_of_disk_read:
 18550                           	opt stack 0
 18551                           tosu	equ	0xFFF
 18552                           tosh	equ	0xFFE
 18553                           tosl	equ	0xFFD
 18554                           pclath	equ	0xFFA
 18555                           tblptru	equ	0xFF8
 18556                           tblptrh	equ	0xFF7
 18557                           tblptrl	equ	0xFF6
 18558                           tablat	equ	0xFF5
 18559                           prodh	equ	0xFF4
 18560                           prodl	equ	0xFF3
 18561                           intcon	equ	0xFF2
 18562                           intcon2	equ	0xFF1
 18563                           intcon3	equ	0xFF0
 18564                           indf0	equ	0xFEF
 18565                           postinc0	equ	0xFEE
 18566                           fsr0h	equ	0xFEA
 18567                           fsr0l	equ	0xFE9
 18568                           wreg	equ	0xFE8
 18569                           indf1	equ	0xFE7
 18570                           postinc1	equ	0xFE6
 18571                           postdec1	equ	0xFE5
 18572                           fsr1h	equ	0xFE2
 18573                           fsr1l	equ	0xFE1
 18574                           indf2	equ	0xFDF
 18575                           postinc2	equ	0xFDE
 18576                           postdec2	equ	0xFDD
 18577                           plusw2	equ	0xFDB
 18578                           fsr2h	equ	0xFDA
 18579                           fsr2l	equ	0xFD9
 18580                           status	equ	0xFD8
 18581                           
 18582 ;; *************** function _send_cmd *****************
 18583 ;; Defined at:
 18584 ;;		line 258 in file "bibliotecas/diskio.c"
 18585 ;; Parameters:    Size  Location     Type
 18586 ;;  cmd             1    wreg     unsigned char 
 18587 ;;  arg             4   21[BANK0 ] unsigned long 
 18588 ;; Auto vars:     Size  Location     Type
 18589 ;;  cmd             1   25[BANK0 ] unsigned char 
 18590 ;;  res             1   26[BANK0 ] unsigned char 
 18591 ;; Return value:  Size  Location     Type
 18592 ;;                  1    wreg      unsigned char 
 18593 ;; Registers used:
 18594 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18595 ;; Tracked objects:
 18596 ;;		On entry : 0/0
 18597 ;;		On exit  : 0/0
 18598 ;;		Unchanged: 0/0
 18599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18600 ;;      Params:         0       4       0       0       0       0       0       0       0
 18601 ;;      Locals:         0       2       0       0       0       0       0       0       0
 18602 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18603 ;;      Totals:         0       6       0       0       0       0       0       0       0
 18604 ;;Total ram usage:        6 bytes
 18605 ;; Hardware stack levels used:    1
 18606 ;; Hardware stack levels required when called:    7
 18607 ;; This function calls:
 18608 ;;		___send_cmd
 18609 ;; This function is called by:
 18610 ;;		_disk_initialize
 18611 ;;		_disk_read
 18612 ;;		_disk_write
 18613 ;;		_disk_ioctl
 18614 ;; This function uses a non-reentrant model
 18615 ;;
 18616                           
 18617                           	psect	text55
 18618  005790                     __ptext55:
 18619                           	opt stack 0
 18620  005790                     _send_cmd:
 18621                           	opt stack 18
 18622                           
 18623                           ; BSR set to: 0
 18624                           ;incstack = 0
 18625                           ;send_cmd@cmd stored from wreg
 18626  005790  0100               	movlb	0	; () banked
 18627  005792  6F79               	movwf	send_cmd@cmd& (0+255),b
 18628                           
 18629                           ;diskio.c: 266: BYTE res;
 18630                           ;diskio.c: 269: if (cmd & 0x80) {
 18631  005794  0100               	movlb	0	; () banked
 18632  005796  AF79               	btfss	send_cmd@cmd& (0+255),7,b
 18633  005798  D013               	goto	l919
 18634                           
 18635                           ; BSR set to: 0
 18636                           ;diskio.c: 270: cmd &= 0x7F;
 18637  00579A  9F79               	bcf	send_cmd@cmd& (0+255),7,b
 18638                           
 18639                           ; BSR set to: 0
 18640                           ;diskio.c: 272: res = __send_cmd((55), 0);
 18641  00579C  0E00               	movlw	0
 18642  00579E  6F6D               	movwf	___send_cmd@arg& (0+255),b
 18643  0057A0  0E00               	movlw	0
 18644  0057A2  6F6E               	movwf	(___send_cmd@arg+1)& (0+255),b
 18645  0057A4  0E00               	movlw	0
 18646  0057A6  6F6F               	movwf	(___send_cmd@arg+2)& (0+255),b
 18647  0057A8  0E00               	movlw	0
 18648  0057AA  6F70               	movwf	(___send_cmd@arg+3)& (0+255),b
 18649  0057AC  0E37               	movlw	55
 18650  0057AE  ECFD  F025         	call	___send_cmd
 18651  0057B2  0100               	movlb	0	; () banked
 18652  0057B4  6F7A               	movwf	send_cmd@res& (0+255),b
 18653                           
 18654                           ; BSR set to: 0
 18655                           ;diskio.c: 276: if (res > 1) return res;
 18656  0057B6  0E01               	movlw	1
 18657  0057B8  657A               	cpfsgt	send_cmd@res& (0+255),b
 18658  0057BA  D002               	goto	l919
 18659                           
 18660                           ; BSR set to: 0
 18661  0057BC  517A               	movf	send_cmd@res& (0+255),w,b
 18662                           
 18663                           ; BSR set to: 0
 18664  0057BE  0012               	return	
 18665  0057C0                     l919:
 18666                           
 18667                           ; BSR set to: 0
 18668                           ;diskio.c: 277: }
 18669                           ;diskio.c: 280: return __send_cmd(cmd, arg);
 18670                           
 18671                           ; BSR set to: 0
 18672                           
 18673                           ; BSR set to: 0
 18674  0057C0  C075  F06D         	movff	send_cmd@arg,___send_cmd@arg
 18675  0057C4  C076  F06E         	movff	send_cmd@arg+1,___send_cmd@arg+1
 18676  0057C8  C077  F06F         	movff	send_cmd@arg+2,___send_cmd@arg+2
 18677  0057CC  C078  F070         	movff	send_cmd@arg+3,___send_cmd@arg+3
 18678  0057D0  5179               	movf	send_cmd@cmd& (0+255),w,b
 18679  0057D2  ECFD  F025         	call	___send_cmd
 18680  0057D6  0012               	return	
 18681  0057D8                     __end_of_send_cmd:
 18682                           	opt stack 0
 18683                           tosu	equ	0xFFF
 18684                           tosh	equ	0xFFE
 18685                           tosl	equ	0xFFD
 18686                           pclath	equ	0xFFA
 18687                           tblptru	equ	0xFF8
 18688                           tblptrh	equ	0xFF7
 18689                           tblptrl	equ	0xFF6
 18690                           tablat	equ	0xFF5
 18691                           prodh	equ	0xFF4
 18692                           prodl	equ	0xFF3
 18693                           intcon	equ	0xFF2
 18694                           intcon2	equ	0xFF1
 18695                           intcon3	equ	0xFF0
 18696                           indf0	equ	0xFEF
 18697                           postinc0	equ	0xFEE
 18698                           fsr0h	equ	0xFEA
 18699                           fsr0l	equ	0xFE9
 18700                           wreg	equ	0xFE8
 18701                           indf1	equ	0xFE7
 18702                           postinc1	equ	0xFE6
 18703                           postdec1	equ	0xFE5
 18704                           fsr1h	equ	0xFE2
 18705                           fsr1l	equ	0xFE1
 18706                           indf2	equ	0xFDF
 18707                           postinc2	equ	0xFDE
 18708                           postdec2	equ	0xFDD
 18709                           plusw2	equ	0xFDB
 18710                           fsr2h	equ	0xFDA
 18711                           fsr2l	equ	0xFD9
 18712                           status	equ	0xFD8
 18713                           
 18714 ;; *************** function ___send_cmd *****************
 18715 ;; Defined at:
 18716 ;;		line 213 in file "bibliotecas/diskio.c"
 18717 ;; Parameters:    Size  Location     Type
 18718 ;;  cmd             1    wreg     unsigned char 
 18719 ;;  arg             4   13[BANK0 ] unsigned long 
 18720 ;; Auto vars:     Size  Location     Type
 18721 ;;  cmd             1   20[BANK0 ] unsigned char 
 18722 ;;  argument        1   19[BANK0 ] unsigned char 
 18723 ;;  res             1   18[BANK0 ] unsigned char 
 18724 ;;  n               1   17[BANK0 ] unsigned char 
 18725 ;; Return value:  Size  Location     Type
 18726 ;;                  1    wreg      unsigned char 
 18727 ;; Registers used:
 18728 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18729 ;; Tracked objects:
 18730 ;;		On entry : 0/0
 18731 ;;		On exit  : 0/0
 18732 ;;		Unchanged: 0/0
 18733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18734 ;;      Params:         0       4       0       0       0       0       0       0       0
 18735 ;;      Locals:         0       4       0       0       0       0       0       0       0
 18736 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18737 ;;      Totals:         0       8       0       0       0       0       0       0       0
 18738 ;;Total ram usage:        8 bytes
 18739 ;; Hardware stack levels used:    1
 18740 ;; Hardware stack levels required when called:    6
 18741 ;; This function calls:
 18742 ;;		_deselect
 18743 ;;		_escreve_dado_SPI
 18744 ;;		_escreve_inteiro_lcd
 18745 ;;		_posicao_cursor_lcd
 18746 ;;		_proceed
 18747 ;;		_response
 18748 ;;		_select
 18749 ;; This function is called by:
 18750 ;;		_send_cmd
 18751 ;; This function uses a non-reentrant model
 18752 ;;
 18753                           
 18754                           	psect	text56
 18755  004BFA                     __ptext56:
 18756                           	opt stack 0
 18757  004BFA                     ___send_cmd:
 18758                           	opt stack 18
 18759                           
 18760                           ;incstack = 0
 18761                           ;___send_cmd@cmd stored from wreg
 18762  004BFA  0100               	movlb	0	; () banked
 18763  004BFC  6F74               	movwf	___send_cmd@cmd& (0+255),b
 18764                           
 18765                           ;diskio.c: 218: BYTE n, res;
 18766                           ;diskio.c: 219: unsigned char argument;
 18767                           ;diskio.c: 222: if (cmd != (12)) {
 18768  004BFE  0E0C               	movlw	12
 18769  004C00  0100               	movlb	0	; () banked
 18770  004C02  1974               	xorwf	___send_cmd@cmd& (0+255),w,b
 18771  004C04  B4D8               	btfsc	status,2,c
 18772  004C06  D009               	goto	l909
 18773                           
 18774                           ; BSR set to: 0
 18775                           ;diskio.c: 223: deselect();
 18776  004C08  ECE9  F02D         	call	_deselect	;wreg free
 18777                           
 18778                           ;diskio.c: 224: if (!select()) return 0xFF;
 18779  004C0C  EC89  F02D         	call	_select	;wreg free
 18780  004C10  0900               	iorlw	0
 18781  004C12  A4D8               	btfss	status,2,c
 18782  004C14  D002               	goto	l909
 18783  004C16  0EFF               	movlw	255
 18784  004C18  0012               	return	
 18785  004C1A                     l909:
 18786                           
 18787                           ;diskio.c: 225: }
 18788                           ;diskio.c: 228: escreve_dado_SPI(0x40 | cmd);
 18789  004C1A  0100               	movlb	0	; () banked
 18790  004C1C  5174               	movf	___send_cmd@cmd& (0+255),w,b
 18791  004C1E  0940               	iorlw	64
 18792  004C20  EC0E  F02C         	call	_escreve_dado_SPI
 18793                           
 18794                           ;diskio.c: 229: argument = arg >> 24;
 18795  004C24  C070  F073         	movff	___send_cmd@arg+3,___send_cmd@argument
 18796                           
 18797                           ;diskio.c: 230: escreve_dado_SPI(argument);
 18798  004C28  0100               	movlb	0	; () banked
 18799  004C2A  5173               	movf	___send_cmd@argument& (0+255),w,b
 18800  004C2C  EC0E  F02C         	call	_escreve_dado_SPI
 18801                           
 18802                           ;diskio.c: 231: argument = arg >> 16;
 18803  004C30  C06F  F073         	movff	___send_cmd@arg+2,___send_cmd@argument
 18804                           
 18805                           ;diskio.c: 232: escreve_dado_SPI(argument);
 18806  004C34  0100               	movlb	0	; () banked
 18807  004C36  5173               	movf	___send_cmd@argument& (0+255),w,b
 18808  004C38  EC0E  F02C         	call	_escreve_dado_SPI
 18809                           
 18810                           ;diskio.c: 233: argument = arg >> 8;
 18811  004C3C  C06E  F073         	movff	___send_cmd@arg+1,___send_cmd@argument
 18812                           
 18813                           ;diskio.c: 234: escreve_dado_SPI(argument);
 18814  004C40  0100               	movlb	0	; () banked
 18815  004C42  5173               	movf	___send_cmd@argument& (0+255),w,b
 18816  004C44  EC0E  F02C         	call	_escreve_dado_SPI
 18817                           
 18818                           ;diskio.c: 235: escreve_dado_SPI(arg);
 18819  004C48  0100               	movlb	0	; () banked
 18820  004C4A  516D               	movf	___send_cmd@arg& (0+255),w,b
 18821  004C4C  EC0E  F02C         	call	_escreve_dado_SPI
 18822                           
 18823                           ;diskio.c: 236: n = 0x01;
 18824  004C50  0E01               	movlw	1
 18825  004C52  0100               	movlb	0	; () banked
 18826  004C54  6F71               	movwf	___send_cmd@n& (0+255),b
 18827                           
 18828                           ; BSR set to: 0
 18829                           ;diskio.c: 237: if (cmd == (0)) n = 0x95;
 18830  004C56  5174               	movf	___send_cmd@cmd& (0+255),w,b
 18831  004C58  A4D8               	btfss	status,2,c
 18832  004C5A  D002               	goto	l911
 18833                           
 18834                           ; BSR set to: 0
 18835  004C5C  0E95               	movlw	149
 18836  004C5E  6F71               	movwf	___send_cmd@n& (0+255),b
 18837  004C60                     l911:
 18838                           
 18839                           ; BSR set to: 0
 18840                           ;diskio.c: 238: if (cmd == (8)) n = 0x87;
 18841                           
 18842                           ; BSR set to: 0
 18843  004C60  0E08               	movlw	8
 18844  004C62  1974               	xorwf	___send_cmd@cmd& (0+255),w,b
 18845  004C64  A4D8               	btfss	status,2,c
 18846  004C66  D002               	goto	l912
 18847                           
 18848                           ; BSR set to: 0
 18849  004C68  0E87               	movlw	135
 18850  004C6A  6F71               	movwf	___send_cmd@n& (0+255),b
 18851  004C6C                     l912:
 18852                           
 18853                           ; BSR set to: 0
 18854                           ;diskio.c: 239: escreve_dado_SPI(n);
 18855                           
 18856                           ; BSR set to: 0
 18857  004C6C  5171               	movf	___send_cmd@n& (0+255),w,b
 18858  004C6E  EC0E  F02C         	call	_escreve_dado_SPI
 18859                           
 18860                           ;diskio.c: 242: deselect();
 18861  004C72  ECE9  F02D         	call	_deselect	;wreg free
 18862                           
 18863                           ;diskio.c: 244: if (cmd == (12)) response();
 18864  004C76  0E0C               	movlw	12
 18865  004C78  0100               	movlb	0	; () banked
 18866  004C7A  1974               	xorwf	___send_cmd@cmd& (0+255),w,b
 18867  004C7C  B4D8               	btfsc	status,2,c
 18868                           
 18869                           ; BSR set to: 0
 18870  004C7E  ECD9  F02D         	call	_response	;wreg free
 18871                           
 18872                           ;diskio.c: 245: n = 10;
 18873  004C82  0E0A               	movlw	10
 18874  004C84  0100               	movlb	0	; () banked
 18875  004C86  6F71               	movwf	___send_cmd@n& (0+255),b
 18876  004C88                     
 18877                           ; BSR set to: 0
 18878                           ;diskio.c: 247: proceed();
 18879                           
 18880                           ; BSR set to: 0
 18881  004C88  ECDF  F02D         	call	_proceed	;wreg free
 18882                           
 18883                           ;diskio.c: 248: res = response();
 18884  004C8C  ECD9  F02D         	call	_response	;wreg free
 18885  004C90  0100               	movlb	0	; () banked
 18886  004C92  6F72               	movwf	___send_cmd@res& (0+255),b
 18887                           
 18888                           ; BSR set to: 0
 18889                           ;diskio.c: 249: posicao_cursor_lcd(1,0);
 18890  004C94  0E00               	movlw	0
 18891  004C96  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 18892  004C98  0E01               	movlw	1
 18893  004C9A  EC89  F02A         	call	_posicao_cursor_lcd
 18894                           
 18895                           ;diskio.c: 250: escreve_inteiro_lcd(res);
 18896  004C9E  C072  F02C         	movff	___send_cmd@res,escreve_inteiro_lcd@valor
 18897  004CA2  6A2D               	clrf	escreve_inteiro_lcd@valor+1,c
 18898  004CA4  EC70  F02C         	call	_escreve_inteiro_lcd	;wreg free
 18899                           
 18900                           ;diskio.c: 251: }while ((res & 0x80));
 18901  004CA8  0100               	movlb	0	; () banked
 18902  004CAA  BF72               	btfsc	___send_cmd@res& (0+255),7,b
 18903  004CAC  D7ED               	goto	l914
 18904                           
 18905                           ; BSR set to: 0
 18906                           ;diskio.c: 253: return res;
 18907                           
 18908                           ; BSR set to: 0
 18909  004CAE  5172               	movf	___send_cmd@res& (0+255),w,b
 18910  004CB0  0012               	return	
 18911  004CB2                     __end_of___send_cmd:
 18912                           	opt stack 0
 18913                           tosu	equ	0xFFF
 18914                           tosh	equ	0xFFE
 18915                           tosl	equ	0xFFD
 18916                           pclath	equ	0xFFA
 18917                           tblptru	equ	0xFF8
 18918                           tblptrh	equ	0xFF7
 18919                           tblptrl	equ	0xFF6
 18920                           tablat	equ	0xFF5
 18921                           prodh	equ	0xFF4
 18922                           prodl	equ	0xFF3
 18923                           intcon	equ	0xFF2
 18924                           intcon2	equ	0xFF1
 18925                           intcon3	equ	0xFF0
 18926                           indf0	equ	0xFEF
 18927                           postinc0	equ	0xFEE
 18928                           fsr0h	equ	0xFEA
 18929                           fsr0l	equ	0xFE9
 18930                           wreg	equ	0xFE8
 18931                           indf1	equ	0xFE7
 18932                           postinc1	equ	0xFE6
 18933                           postdec1	equ	0xFE5
 18934                           fsr1h	equ	0xFE2
 18935                           fsr1l	equ	0xFE1
 18936                           indf2	equ	0xFDF
 18937                           postinc2	equ	0xFDE
 18938                           postdec2	equ	0xFDD
 18939                           plusw2	equ	0xFDB
 18940                           fsr2h	equ	0xFDA
 18941                           fsr2l	equ	0xFD9
 18942                           status	equ	0xFD8
 18943                           
 18944 ;; *************** function _select *****************
 18945 ;; Defined at:
 18946 ;;		line 122 in file "bibliotecas/diskio.c"
 18947 ;; Parameters:    Size  Location     Type
 18948 ;;		None
 18949 ;; Auto vars:     Size  Location     Type
 18950 ;;		None
 18951 ;; Return value:  Size  Location     Type
 18952 ;;                  1    wreg      unsigned char 
 18953 ;; Registers used:
 18954 ;;		wreg, status,2, status,0, cstack
 18955 ;; Tracked objects:
 18956 ;;		On entry : 0/0
 18957 ;;		On exit  : 0/0
 18958 ;;		Unchanged: 0/0
 18959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18960 ;;      Params:         0       0       0       0       0       0       0       0       0
 18961 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18962 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18963 ;;      Totals:         0       0       0       0       0       0       0       0       0
 18964 ;;Total ram usage:        0 bytes
 18965 ;; Hardware stack levels used:    1
 18966 ;; Hardware stack levels required when called:    4
 18967 ;; This function calls:
 18968 ;;		_deselect
 18969 ;;		_wait_ready
 18970 ;; This function is called by:
 18971 ;;		___send_cmd
 18972 ;;		_disk_initialize
 18973 ;;		_disk_ioctl
 18974 ;; This function uses a non-reentrant model
 18975 ;;
 18976                           
 18977                           	psect	text57
 18978  005B12                     __ptext57:
 18979                           	opt stack 0
 18980  005B12                     _select:
 18981                           	opt stack 19
 18982                           
 18983                           ;diskio.c: 124: LATBbits.LATB4 = 0;
 18984                           
 18985                           ;incstack = 0
 18986  005B12  988A               	bcf	3978,4,c	;volatile
 18987                           
 18988                           ;diskio.c: 126: if (wait_ready()) return 1;
 18989  005B14  ECCC  F02C         	call	_wait_ready	;wreg free
 18990  005B18  0900               	iorlw	0
 18991  005B1A  B4D8               	btfsc	status,2,c
 18992  005B1C  D002               	goto	l886
 18993  005B1E  0E01               	movlw	1
 18994  005B20  0012               	return	
 18995  005B22                     l886:
 18996                           
 18997                           ;diskio.c: 128: deselect();
 18998  005B22  ECE9  F02D         	call	_deselect	;wreg free
 18999                           
 19000                           ;diskio.c: 129: return 0;
 19001  005B26  0E00               	movlw	0
 19002  005B28  0012               	return	
 19003  005B2A                     __end_of_select:
 19004                           	opt stack 0
 19005                           tosu	equ	0xFFF
 19006                           tosh	equ	0xFFE
 19007                           tosl	equ	0xFFD
 19008                           pclath	equ	0xFFA
 19009                           tblptru	equ	0xFF8
 19010                           tblptrh	equ	0xFF7
 19011                           tblptrl	equ	0xFF6
 19012                           tablat	equ	0xFF5
 19013                           prodh	equ	0xFF4
 19014                           prodl	equ	0xFF3
 19015                           intcon	equ	0xFF2
 19016                           intcon2	equ	0xFF1
 19017                           intcon3	equ	0xFF0
 19018                           indf0	equ	0xFEF
 19019                           postinc0	equ	0xFEE
 19020                           fsr0h	equ	0xFEA
 19021                           fsr0l	equ	0xFE9
 19022                           wreg	equ	0xFE8
 19023                           indf1	equ	0xFE7
 19024                           postinc1	equ	0xFE6
 19025                           postdec1	equ	0xFE5
 19026                           fsr1h	equ	0xFE2
 19027                           fsr1l	equ	0xFE1
 19028                           indf2	equ	0xFDF
 19029                           postinc2	equ	0xFDE
 19030                           postdec2	equ	0xFDD
 19031                           plusw2	equ	0xFDB
 19032                           fsr2h	equ	0xFDA
 19033                           fsr2l	equ	0xFD9
 19034                           status	equ	0xFD8
 19035                           
 19036 ;; *************** function _wait_ready *****************
 19037 ;; Defined at:
 19038 ;;		line 89 in file "bibliotecas/diskio.c"
 19039 ;; Parameters:    Size  Location     Type
 19040 ;;		None
 19041 ;; Auto vars:     Size  Location     Type
 19042 ;;  tmr             2   28[COMRAM] unsigned int 
 19043 ;; Return value:  Size  Location     Type
 19044 ;;                  1    wreg      unsigned char 
 19045 ;; Registers used:
 19046 ;;		wreg, status,2, status,0, cstack
 19047 ;; Tracked objects:
 19048 ;;		On entry : 0/0
 19049 ;;		On exit  : 0/0
 19050 ;;		Unchanged: 0/0
 19051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19052 ;;      Params:         0       0       0       0       0       0       0       0       0
 19053 ;;      Locals:         2       0       0       0       0       0       0       0       0
 19054 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19055 ;;      Totals:         2       0       0       0       0       0       0       0       0
 19056 ;;Total ram usage:        2 bytes
 19057 ;; Hardware stack levels used:    1
 19058 ;; Hardware stack levels required when called:    3
 19059 ;; This function calls:
 19060 ;;		_recebe_dado_SPI
 19061 ;; This function is called by:
 19062 ;;		_select
 19063 ;;		_xmit_datablock
 19064 ;; This function uses a non-reentrant model
 19065 ;;
 19066                           
 19067                           	psect	text58
 19068  005998                     __ptext58:
 19069                           	opt stack 0
 19070  005998                     _wait_ready:
 19071                           	opt stack 21
 19072                           
 19073                           ;diskio.c: 91: UINT tmr;
 19074                           ;diskio.c: 94: for (tmr = 5000; tmr; tmr--) {
 19075                           
 19076                           ;incstack = 0
 19077  005998  0E13               	movlw	19
 19078  00599A  6E1E               	movwf	wait_ready@tmr+1,c
 19079  00599C  0E88               	movlw	136
 19080  00599E  6E1D               	movwf	wait_ready@tmr,c
 19081  0059A0  D00C               	goto	l876
 19082  0059A2                     
 19083                           ;diskio.c: 95: if (recebe_dado_SPI() == 0xFF) break;
 19084  0059A2  ECF6  F02A         	call	_recebe_dado_SPI	;wreg free
 19085  0059A6  0AFF               	xorlw	255
 19086  0059A8  B4D8               	btfsc	status,2,c
 19087  0059AA  D00B               	goto	u13740
 19088                           
 19089                           ;diskio.c: 96: _delay((unsigned long)((100)*(48000000/4000000.0)));
 19090  0059AC  0EF0               	movlw	240
 19091  0059AE                     u19457:
 19092  0059AE  D000               	nop2	
 19093  0059B0  2EE8               	decfsz	wreg,f,c
 19094  0059B2  D7FD               	bra	u19457
 19095  0059B4  061D               	decf	wait_ready@tmr,f,c
 19096  0059B6  A0D8               	btfss	status,0,c
 19097  0059B8  061E               	decf	wait_ready@tmr+1,f,c
 19098  0059BA                     l876:
 19099  0059BA  501D               	movf	wait_ready@tmr,w,c
 19100  0059BC  101E               	iorwf	wait_ready@tmr+1,w,c
 19101  0059BE  A4D8               	btfss	status,2,c
 19102  0059C0  D7F0               	goto	l877
 19103  0059C2                     u13740:
 19104                           
 19105                           ;diskio.c: 97: }
 19106                           ;diskio.c: 99: return tmr ? 1 : 0;
 19107  0059C2  501D               	movf	wait_ready@tmr,w,c
 19108  0059C4  101E               	iorwf	wait_ready@tmr+1,w,c
 19109  0059C6  B4D8               	btfsc	status,2,c
 19110  0059C8  D002               	goto	u13750
 19111  0059CA  0E01               	movlw	1
 19112  0059CC  0012               	return	
 19113  0059CE                     u13750:
 19114  0059CE  0E00               	movlw	0
 19115  0059D0  0012               	return	
 19116  0059D2                     __end_of_wait_ready:
 19117                           	opt stack 0
 19118                           tosu	equ	0xFFF
 19119                           tosh	equ	0xFFE
 19120                           tosl	equ	0xFFD
 19121                           pclath	equ	0xFFA
 19122                           tblptru	equ	0xFF8
 19123                           tblptrh	equ	0xFF7
 19124                           tblptrl	equ	0xFF6
 19125                           tablat	equ	0xFF5
 19126                           prodh	equ	0xFF4
 19127                           prodl	equ	0xFF3
 19128                           intcon	equ	0xFF2
 19129                           intcon2	equ	0xFF1
 19130                           intcon3	equ	0xFF0
 19131                           indf0	equ	0xFEF
 19132                           postinc0	equ	0xFEE
 19133                           fsr0h	equ	0xFEA
 19134                           fsr0l	equ	0xFE9
 19135                           wreg	equ	0xFE8
 19136                           indf1	equ	0xFE7
 19137                           postinc1	equ	0xFE6
 19138                           postdec1	equ	0xFE5
 19139                           fsr1h	equ	0xFE2
 19140                           fsr1l	equ	0xFE1
 19141                           indf2	equ	0xFDF
 19142                           postinc2	equ	0xFDE
 19143                           postdec2	equ	0xFDD
 19144                           plusw2	equ	0xFDB
 19145                           fsr2h	equ	0xFDA
 19146                           fsr2l	equ	0xFD9
 19147                           status	equ	0xFD8
 19148                           
 19149 ;; *************** function _deselect *****************
 19150 ;; Defined at:
 19151 ;;		line 109 in file "bibliotecas/diskio.c"
 19152 ;; Parameters:    Size  Location     Type
 19153 ;;		None
 19154 ;; Auto vars:     Size  Location     Type
 19155 ;;		None
 19156 ;; Return value:  Size  Location     Type
 19157 ;;                  1    wreg      void 
 19158 ;; Registers used:
 19159 ;;		None
 19160 ;; Tracked objects:
 19161 ;;		On entry : 0/0
 19162 ;;		On exit  : 0/0
 19163 ;;		Unchanged: 0/0
 19164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19165 ;;      Params:         0       0       0       0       0       0       0       0       0
 19166 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19167 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19168 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19169 ;;Total ram usage:        0 bytes
 19170 ;; Hardware stack levels used:    1
 19171 ;; Hardware stack levels required when called:    2
 19172 ;; This function calls:
 19173 ;;		Nothing
 19174 ;; This function is called by:
 19175 ;;		_select
 19176 ;;		___send_cmd
 19177 ;;		_disk_initialize
 19178 ;;		_disk_read
 19179 ;;		_disk_write
 19180 ;;		_disk_ioctl
 19181 ;; This function uses a non-reentrant model
 19182 ;;
 19183                           
 19184                           	psect	text59
 19185  005BD2                     __ptext59:
 19186                           	opt stack 0
 19187  005BD2                     _deselect:
 19188                           	opt stack 20
 19189                           
 19190                           ;diskio.c: 111: LATBbits.LATB4 = 1;
 19191                           
 19192                           ;incstack = 0
 19193  005BD2  888A               	bsf	3978,4,c	;volatile
 19194  005BD4  0012               	return		;funcret
 19195  005BD6                     __end_of_deselect:
 19196                           	opt stack 0
 19197                           tosu	equ	0xFFF
 19198                           tosh	equ	0xFFE
 19199                           tosl	equ	0xFFD
 19200                           pclath	equ	0xFFA
 19201                           tblptru	equ	0xFF8
 19202                           tblptrh	equ	0xFF7
 19203                           tblptrl	equ	0xFF6
 19204                           tablat	equ	0xFF5
 19205                           prodh	equ	0xFF4
 19206                           prodl	equ	0xFF3
 19207                           intcon	equ	0xFF2
 19208                           intcon2	equ	0xFF1
 19209                           intcon3	equ	0xFF0
 19210                           indf0	equ	0xFEF
 19211                           postinc0	equ	0xFEE
 19212                           fsr0h	equ	0xFEA
 19213                           fsr0l	equ	0xFE9
 19214                           wreg	equ	0xFE8
 19215                           indf1	equ	0xFE7
 19216                           postinc1	equ	0xFE6
 19217                           postdec1	equ	0xFE5
 19218                           fsr1h	equ	0xFE2
 19219                           fsr1l	equ	0xFE1
 19220                           indf2	equ	0xFDF
 19221                           postinc2	equ	0xFDE
 19222                           postdec2	equ	0xFDD
 19223                           plusw2	equ	0xFDB
 19224                           fsr2h	equ	0xFDA
 19225                           fsr2l	equ	0xFD9
 19226                           status	equ	0xFD8
 19227                           
 19228 ;; *************** function _response *****************
 19229 ;; Defined at:
 19230 ;;		line 48 in file "bibliotecas/SDCard.c"
 19231 ;; Parameters:    Size  Location     Type
 19232 ;;		None
 19233 ;; Auto vars:     Size  Location     Type
 19234 ;;  buff            1   28[COMRAM] unsigned char 
 19235 ;; Return value:  Size  Location     Type
 19236 ;;                  1    wreg      unsigned char 
 19237 ;; Registers used:
 19238 ;;		wreg, status,2, status,0, cstack
 19239 ;; Tracked objects:
 19240 ;;		On entry : 0/0
 19241 ;;		On exit  : 0/0
 19242 ;;		Unchanged: 0/0
 19243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19244 ;;      Params:         0       0       0       0       0       0       0       0       0
 19245 ;;      Locals:         1       0       0       0       0       0       0       0       0
 19246 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19247 ;;      Totals:         1       0       0       0       0       0       0       0       0
 19248 ;;Total ram usage:        1 bytes
 19249 ;; Hardware stack levels used:    1
 19250 ;; Hardware stack levels required when called:    3
 19251 ;; This function calls:
 19252 ;;		_recebe_dado_SPI
 19253 ;; This function is called by:
 19254 ;;		___send_cmd
 19255 ;; This function uses a non-reentrant model
 19256 ;;
 19257                           
 19258                           	psect	text60
 19259  005BB2                     __ptext60:
 19260                           	opt stack 0
 19261  005BB2                     _response:
 19262                           	opt stack 20
 19263                           
 19264                           ;SDCard.c: 51: unsigned char buff;
 19265                           ;SDCard.c: 52: LATBbits.LATB4 = 0;
 19266                           
 19267                           ;incstack = 0
 19268  005BB2  988A               	bcf	3978,4,c	;volatile
 19269                           
 19270                           ;SDCard.c: 53: buff= recebe_dado_SPI();
 19271  005BB4  ECF6  F02A         	call	_recebe_dado_SPI	;wreg free
 19272  005BB8  6E1D               	movwf	response@buff,c
 19273                           
 19274                           ;SDCard.c: 55: return buff;
 19275  005BBA  501D               	movf	response@buff,w,c
 19276  005BBC  0012               	return	
 19277  005BBE                     __end_of_response:
 19278                           	opt stack 0
 19279                           tosu	equ	0xFFF
 19280                           tosh	equ	0xFFE
 19281                           tosl	equ	0xFFD
 19282                           pclath	equ	0xFFA
 19283                           tblptru	equ	0xFF8
 19284                           tblptrh	equ	0xFF7
 19285                           tblptrl	equ	0xFF6
 19286                           tablat	equ	0xFF5
 19287                           prodh	equ	0xFF4
 19288                           prodl	equ	0xFF3
 19289                           intcon	equ	0xFF2
 19290                           intcon2	equ	0xFF1
 19291                           intcon3	equ	0xFF0
 19292                           indf0	equ	0xFEF
 19293                           postinc0	equ	0xFEE
 19294                           fsr0h	equ	0xFEA
 19295                           fsr0l	equ	0xFE9
 19296                           wreg	equ	0xFE8
 19297                           indf1	equ	0xFE7
 19298                           postinc1	equ	0xFE6
 19299                           postdec1	equ	0xFE5
 19300                           fsr1h	equ	0xFE2
 19301                           fsr1l	equ	0xFE1
 19302                           indf2	equ	0xFDF
 19303                           postinc2	equ	0xFDE
 19304                           postdec2	equ	0xFDD
 19305                           plusw2	equ	0xFDB
 19306                           fsr2h	equ	0xFDA
 19307                           fsr2l	equ	0xFD9
 19308                           status	equ	0xFD8
 19309                           
 19310 ;; *************** function _proceed *****************
 19311 ;; Defined at:
 19312 ;;		line 87 in file "bibliotecas/SDCard.c"
 19313 ;; Parameters:    Size  Location     Type
 19314 ;;		None
 19315 ;; Auto vars:     Size  Location     Type
 19316 ;;		None
 19317 ;; Return value:  Size  Location     Type
 19318 ;;                  1    wreg      void 
 19319 ;; Registers used:
 19320 ;;		wreg, status,2, status,0, cstack
 19321 ;; Tracked objects:
 19322 ;;		On entry : 0/0
 19323 ;;		On exit  : 0/0
 19324 ;;		Unchanged: 0/0
 19325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19326 ;;      Params:         0       0       0       0       0       0       0       0       0
 19327 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19328 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19329 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19330 ;;Total ram usage:        0 bytes
 19331 ;; Hardware stack levels used:    1
 19332 ;; Hardware stack levels required when called:    3
 19333 ;; This function calls:
 19334 ;;		_escreve_dado_SPI
 19335 ;; This function is called by:
 19336 ;;		___send_cmd
 19337 ;; This function uses a non-reentrant model
 19338 ;;
 19339                           
 19340                           	psect	text61
 19341  005BBE                     __ptext61:
 19342                           	opt stack 0
 19343  005BBE                     _proceed:
 19344                           	opt stack 20
 19345                           
 19346                           ;SDCard.c: 89: LATBbits.LATB4 = 0;
 19347                           
 19348                           ;incstack = 0
 19349  005BBE  988A               	bcf	3978,4,c	;volatile
 19350                           
 19351                           ;SDCard.c: 90: escreve_dado_SPI(0xFF);
 19352  005BC0  0EFF               	movlw	255
 19353  005BC2  EC0E  F02C         	call	_escreve_dado_SPI
 19354                           
 19355                           ;SDCard.c: 91: LATBbits.LATB4 = 1;
 19356  005BC6  888A               	bsf	3978,4,c	;volatile
 19357  005BC8  0012               	return		;funcret
 19358  005BCA                     __end_of_proceed:
 19359                           	opt stack 0
 19360                           tosu	equ	0xFFF
 19361                           tosh	equ	0xFFE
 19362                           tosl	equ	0xFFD
 19363                           pclath	equ	0xFFA
 19364                           tblptru	equ	0xFF8
 19365                           tblptrh	equ	0xFF7
 19366                           tblptrl	equ	0xFF6
 19367                           tablat	equ	0xFF5
 19368                           prodh	equ	0xFF4
 19369                           prodl	equ	0xFF3
 19370                           intcon	equ	0xFF2
 19371                           intcon2	equ	0xFF1
 19372                           intcon3	equ	0xFF0
 19373                           indf0	equ	0xFEF
 19374                           postinc0	equ	0xFEE
 19375                           fsr0h	equ	0xFEA
 19376                           fsr0l	equ	0xFE9
 19377                           wreg	equ	0xFE8
 19378                           indf1	equ	0xFE7
 19379                           postinc1	equ	0xFE6
 19380                           postdec1	equ	0xFE5
 19381                           fsr1h	equ	0xFE2
 19382                           fsr1l	equ	0xFE1
 19383                           indf2	equ	0xFDF
 19384                           postinc2	equ	0xFDE
 19385                           postdec2	equ	0xFDD
 19386                           plusw2	equ	0xFDB
 19387                           fsr2h	equ	0xFDA
 19388                           fsr2l	equ	0xFD9
 19389                           status	equ	0xFD8
 19390                           
 19391 ;; *************** function _escreve_inteiro_lcd *****************
 19392 ;; Defined at:
 19393 ;;		line 376 in file "bibliotecas/display_lcd.c"
 19394 ;; Parameters:    Size  Location     Type
 19395 ;;  valor           2   43[COMRAM] int 
 19396 ;; Auto vars:     Size  Location     Type
 19397 ;;  texto           7    6[BANK0 ] unsigned char [7]
 19398 ;; Return value:  Size  Location     Type
 19399 ;;                  1    wreg      void 
 19400 ;; Registers used:
 19401 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19402 ;; Tracked objects:
 19403 ;;		On entry : 0/0
 19404 ;;		On exit  : 0/0
 19405 ;;		Unchanged: 0/0
 19406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19407 ;;      Params:         2       0       0       0       0       0       0       0       0
 19408 ;;      Locals:         0       7       0       0       0       0       0       0       0
 19409 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19410 ;;      Totals:         2       7       0       0       0       0       0       0       0
 19411 ;;Total ram usage:        9 bytes
 19412 ;; Hardware stack levels used:    1
 19413 ;; Hardware stack levels required when called:    5
 19414 ;; This function calls:
 19415 ;;		_escreve_frase_ram_lcd
 19416 ;;		_itoa
 19417 ;; This function is called by:
 19418 ;;		_SDCard
 19419 ;;		___send_cmd
 19420 ;;		_ReadSPI_
 19421 ;;		_escreve_float_lcd
 19422 ;; This function uses a non-reentrant model
 19423 ;;
 19424                           
 19425                           	psect	text62
 19426  0058E0                     __ptext62:
 19427                           	opt stack 0
 19428  0058E0                     _escreve_inteiro_lcd:
 19429                           	opt stack 18
 19430                           
 19431                           ;display_lcd.c: 378: char texto[7] = "000000";
 19432                           
 19433                           ;incstack = 0
 19434  0058E0  EE21  F0DB         	lfsr	2,escreve_inteiro_lcd@F3966
 19435  0058E4  EE10  F066         	lfsr	1,escreve_inteiro_lcd@texto
 19436  0058E8  0E06               	movlw	6
 19437  0058EA                     u13781:
 19438  0058EA  CFDB FFE3          	movff	plusw2,plusw1
 19439  0058EE  06E8               	decf	wreg,f,c
 19440  0058F0  E2FC               	bc	u13781
 19441                           
 19442                           ;display_lcd.c: 379: itoa(texto,valor, 10);
 19443  0058F2  0E66               	movlw	low escreve_inteiro_lcd@texto
 19444  0058F4  0100               	movlb	0	; () banked
 19445  0058F6  6F60               	movwf	itoa@buf& (0+255),b
 19446  0058F8  0E00               	movlw	high escreve_inteiro_lcd@texto
 19447  0058FA  6F61               	movwf	(itoa@buf+1)& (0+255),b
 19448  0058FC  C02C  F062         	movff	escreve_inteiro_lcd@valor,itoa@val
 19449  005900  C02D  F063         	movff	escreve_inteiro_lcd@valor+1,itoa@val+1
 19450  005904  0E00               	movlw	0
 19451  005906  6F65               	movwf	(itoa@base+1)& (0+255),b
 19452  005908  0E0A               	movlw	10
 19453  00590A  6F64               	movwf	itoa@base& (0+255),b
 19454  00590C  ECEC  F02B         	call	_itoa	;wreg free
 19455                           
 19456                           ;display_lcd.c: 380: escreve_frase_ram_lcd(texto);
 19457  005910  0E66               	movlw	low escreve_inteiro_lcd@texto
 19458  005912  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 19459  005914  0E00               	movlw	high escreve_inteiro_lcd@texto
 19460  005916  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 19461  005918  EC78  F02B         	call	_escreve_frase_ram_lcd	;wreg free
 19462  00591C  0012               	return		;funcret
 19463  00591E                     __end_of_escreve_inteiro_lcd:
 19464                           	opt stack 0
 19465                           tosu	equ	0xFFF
 19466                           tosh	equ	0xFFE
 19467                           tosl	equ	0xFFD
 19468                           pclath	equ	0xFFA
 19469                           tblptru	equ	0xFF8
 19470                           tblptrh	equ	0xFF7
 19471                           tblptrl	equ	0xFF6
 19472                           tablat	equ	0xFF5
 19473                           prodh	equ	0xFF4
 19474                           prodl	equ	0xFF3
 19475                           intcon	equ	0xFF2
 19476                           intcon2	equ	0xFF1
 19477                           intcon3	equ	0xFF0
 19478                           indf0	equ	0xFEF
 19479                           postinc0	equ	0xFEE
 19480                           fsr0h	equ	0xFEA
 19481                           fsr0l	equ	0xFE9
 19482                           wreg	equ	0xFE8
 19483                           indf1	equ	0xFE7
 19484                           postinc1	equ	0xFE6
 19485                           postdec1	equ	0xFE5
 19486                           plusw1	equ	0xFE3
 19487                           fsr1h	equ	0xFE2
 19488                           fsr1l	equ	0xFE1
 19489                           indf2	equ	0xFDF
 19490                           postinc2	equ	0xFDE
 19491                           postdec2	equ	0xFDD
 19492                           plusw2	equ	0xFDB
 19493                           fsr2h	equ	0xFDA
 19494                           fsr2l	equ	0xFD9
 19495                           status	equ	0xFD8
 19496                           
 19497 ;; *************** function _itoa *****************
 19498 ;; Defined at:
 19499 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
 19500 ;; Parameters:    Size  Location     Type
 19501 ;;  buf             2    0[BANK0 ] PTR unsigned char 
 19502 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
 19503 ;;  val             2    2[BANK0 ] int 
 19504 ;;  base            2    4[BANK0 ] int 
 19505 ;; Auto vars:     Size  Location     Type
 19506 ;;  cp              2   41[COMRAM] PTR unsigned char 
 19507 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
 19508 ;; Return value:  Size  Location     Type
 19509 ;;                  2    0[BANK0 ] PTR unsigned char 
 19510 ;; Registers used:
 19511 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19512 ;; Tracked objects:
 19513 ;;		On entry : 0/0
 19514 ;;		On exit  : 0/0
 19515 ;;		Unchanged: 0/0
 19516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19517 ;;      Params:         0       6       0       0       0       0       0       0       0
 19518 ;;      Locals:         2       0       0       0       0       0       0       0       0
 19519 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19520 ;;      Totals:         2       6       0       0       0       0       0       0       0
 19521 ;;Total ram usage:        8 bytes
 19522 ;; Hardware stack levels used:    1
 19523 ;; Hardware stack levels required when called:    4
 19524 ;; This function calls:
 19525 ;;		_utoa
 19526 ;; This function is called by:
 19527 ;;		_escreve_inteiro_lcd
 19528 ;;		_escreve_inteiro_uart
 19529 ;; This function uses a non-reentrant model
 19530 ;;
 19531                           
 19532                           	psect	text63
 19533  0057D8                     __ptext63:
 19534                           	opt stack 0
 19535  0057D8                     _itoa:
 19536                           	opt stack 18
 19537                           
 19538                           ;incstack = 0
 19539  0057D8  C060  F02A         	movff	itoa@buf,itoa@cp
 19540  0057DC  C061  F02B         	movff	itoa@buf+1,itoa@cp+1
 19541  0057E0  0100               	movlb	0	; () banked
 19542  0057E2  AF63               	btfss	(itoa@val+1)& (0+255),7,b
 19543  0057E4  D00C               	goto	l2094
 19544                           
 19545                           ; BSR set to: 0
 19546  0057E6  C060  FFD9         	movff	itoa@buf,fsr2l
 19547  0057EA  C061  FFDA         	movff	itoa@buf+1,fsr2h
 19548  0057EE  0E2D               	movlw	45
 19549  0057F0  6EDF               	movwf	indf2,c
 19550                           
 19551                           ; BSR set to: 0
 19552  0057F2  4B60               	infsnz	itoa@buf& (0+255),f,b
 19553  0057F4  2B61               	incf	(itoa@buf+1)& (0+255),f,b
 19554                           
 19555                           ; BSR set to: 0
 19556  0057F6  6D62               	negf	itoa@val& (0+255),b
 19557  0057F8  1F63               	comf	(itoa@val+1)& (0+255),f,b
 19558  0057FA  B0D8               	btfsc	status,0,c
 19559  0057FC  2B63               	incf	(itoa@val+1)& (0+255),f,b
 19560  0057FE                     l2094:
 19561                           
 19562                           ; BSR set to: 0
 19563                           
 19564                           ; BSR set to: 0
 19565  0057FE  C060  F021         	movff	itoa@buf,utoa@buf
 19566  005802  C061  F022         	movff	itoa@buf+1,utoa@buf+1
 19567  005806  C062  F023         	movff	itoa@val,utoa@val
 19568  00580A  C063  F024         	movff	itoa@val+1,utoa@val+1
 19569  00580E  C064  F025         	movff	itoa@base,utoa@base
 19570  005812  C065  F026         	movff	itoa@base+1,utoa@base+1
 19571  005816  EC61  F027         	call	_utoa	;wreg free
 19572  00581A  0012               	return	
 19573  00581C                     __end_of_itoa:
 19574                           	opt stack 0
 19575                           tosu	equ	0xFFF
 19576                           tosh	equ	0xFFE
 19577                           tosl	equ	0xFFD
 19578                           pclath	equ	0xFFA
 19579                           tblptru	equ	0xFF8
 19580                           tblptrh	equ	0xFF7
 19581                           tblptrl	equ	0xFF6
 19582                           tablat	equ	0xFF5
 19583                           prodh	equ	0xFF4
 19584                           prodl	equ	0xFF3
 19585                           intcon	equ	0xFF2
 19586                           intcon2	equ	0xFF1
 19587                           intcon3	equ	0xFF0
 19588                           indf0	equ	0xFEF
 19589                           postinc0	equ	0xFEE
 19590                           fsr0h	equ	0xFEA
 19591                           fsr0l	equ	0xFE9
 19592                           wreg	equ	0xFE8
 19593                           indf1	equ	0xFE7
 19594                           postinc1	equ	0xFE6
 19595                           postdec1	equ	0xFE5
 19596                           plusw1	equ	0xFE3
 19597                           fsr1h	equ	0xFE2
 19598                           fsr1l	equ	0xFE1
 19599                           indf2	equ	0xFDF
 19600                           postinc2	equ	0xFDE
 19601                           postdec2	equ	0xFDD
 19602                           plusw2	equ	0xFDB
 19603                           fsr2h	equ	0xFDA
 19604                           fsr2l	equ	0xFD9
 19605                           status	equ	0xFD8
 19606                           
 19607 ;; *************** function _utoa *****************
 19608 ;; Defined at:
 19609 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
 19610 ;; Parameters:    Size  Location     Type
 19611 ;;  buf             2   32[COMRAM] PTR unsigned char 
 19612 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
 19613 ;;  val             2   34[COMRAM] unsigned int 
 19614 ;;  base            2   36[COMRAM] int 
 19615 ;; Auto vars:     Size  Location     Type
 19616 ;;  v               2   38[COMRAM] unsigned int 
 19617 ;;  c               1   40[COMRAM] unsigned char 
 19618 ;; Return value:  Size  Location     Type
 19619 ;;                  2   32[COMRAM] PTR unsigned char 
 19620 ;; Registers used:
 19621 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19622 ;; Tracked objects:
 19623 ;;		On entry : 0/0
 19624 ;;		On exit  : 0/0
 19625 ;;		Unchanged: 0/0
 19626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19627 ;;      Params:         6       0       0       0       0       0       0       0       0
 19628 ;;      Locals:         3       0       0       0       0       0       0       0       0
 19629 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19630 ;;      Totals:         9       0       0       0       0       0       0       0       0
 19631 ;;Total ram usage:        9 bytes
 19632 ;; Hardware stack levels used:    1
 19633 ;; Hardware stack levels required when called:    3
 19634 ;; This function calls:
 19635 ;;		___lwdiv
 19636 ;;		___lwmod
 19637 ;; This function is called by:
 19638 ;;		_itoa
 19639 ;; This function uses a non-reentrant model
 19640 ;;
 19641                           
 19642                           	psect	text64
 19643  004EC2                     __ptext64:
 19644                           	opt stack 0
 19645  004EC2                     _utoa:
 19646                           	opt stack 18
 19647                           
 19648                           ;incstack = 0
 19649  004EC2  C023  F027         	movff	utoa@val,utoa@v
 19650  004EC6  C024  F028         	movff	utoa@val+1,utoa@v+1
 19651  004ECA  C027  F01A         	movff	utoa@v,___lwdiv@dividend
 19652  004ECE  C028  F01B         	movff	utoa@v+1,___lwdiv@dividend+1
 19653  004ED2  C025  F01C         	movff	utoa@base,___lwdiv@divisor
 19654  004ED6  C026  F01D         	movff	utoa@base+1,___lwdiv@divisor+1
 19655  004EDA  EC4F  F02B         	call	___lwdiv	;wreg free
 19656  004EDE  C01A  F027         	movff	?___lwdiv,utoa@v
 19657  004EE2  C01B  F028         	movff	?___lwdiv+1,utoa@v+1
 19658  004EE6  4A21               	infsnz	utoa@buf,f,c
 19659  004EE8  2A22               	incf	utoa@buf+1,f,c
 19660  004EEA  5027               	movf	utoa@v,w,c
 19661  004EEC  1028               	iorwf	utoa@v+1,w,c
 19662  004EEE  A4D8               	btfss	status,2,c
 19663  004EF0  D7EC               	goto	l2098
 19664  004EF2  C021  FFD9         	movff	utoa@buf,fsr2l
 19665  004EF6  C022  FFDA         	movff	utoa@buf+1,fsr2h
 19666  004EFA  0E00               	movlw	0
 19667  004EFC  6EDF               	movwf	indf2,c
 19668  004EFE  0621               	decf	utoa@buf,f,c
 19669  004F00  A0D8               	btfss	status,0,c
 19670  004F02  0622               	decf	utoa@buf+1,f,c
 19671  004F04  C023  F01A         	movff	utoa@val,___lwmod@dividend
 19672  004F08  C024  F01B         	movff	utoa@val+1,___lwmod@dividend+1
 19673  004F0C  C025  F01C         	movff	utoa@base,___lwmod@divisor
 19674  004F10  C026  F01D         	movff	utoa@base+1,___lwmod@divisor+1
 19675  004F14  EC30  F02C         	call	___lwmod	;wreg free
 19676  004F18  501A               	movf	?___lwmod,w,c
 19677  004F1A  6E29               	movwf	utoa@c,c
 19678  004F1C  C023  F01A         	movff	utoa@val,___lwdiv@dividend
 19679  004F20  C024  F01B         	movff	utoa@val+1,___lwdiv@dividend+1
 19680  004F24  C025  F01C         	movff	utoa@base,___lwdiv@divisor
 19681  004F28  C026  F01D         	movff	utoa@base+1,___lwdiv@divisor+1
 19682  004F2C  EC4F  F02B         	call	___lwdiv	;wreg free
 19683  004F30  C01A  F023         	movff	?___lwdiv,utoa@val
 19684  004F34  C01B  F024         	movff	?___lwdiv+1,utoa@val+1
 19685  004F38  0E09               	movlw	9
 19686  004F3A  6429               	cpfsgt	utoa@c,c
 19687  004F3C  D002               	goto	l2101
 19688  004F3E  0E07               	movlw	7
 19689  004F40  2629               	addwf	utoa@c,f,c
 19690  004F42                     l2101:
 19691  004F42  0E30               	movlw	48
 19692  004F44  2629               	addwf	utoa@c,f,c
 19693  004F46  C021  FFD9         	movff	utoa@buf,fsr2l
 19694  004F4A  C022  FFDA         	movff	utoa@buf+1,fsr2h
 19695  004F4E  C029  FFDF         	movff	utoa@c,indf2
 19696  004F52  0621               	decf	utoa@buf,f,c
 19697  004F54  A0D8               	btfss	status,0,c
 19698  004F56  0622               	decf	utoa@buf+1,f,c
 19699  004F58  5023               	movf	utoa@val,w,c
 19700  004F5A  1024               	iorwf	utoa@val+1,w,c
 19701  004F5C  A4D8               	btfss	status,2,c
 19702  004F5E  D7D2               	goto	l2100
 19703                           
 19704                           ;	Return value of _utoa is never used
 19705  004F60  4A21               	infsnz	utoa@buf,f,c
 19706  004F62  2A22               	incf	utoa@buf+1,f,c
 19707  004F64  0012               	return	
 19708  004F66                     __end_of_utoa:
 19709                           	opt stack 0
 19710                           tosu	equ	0xFFF
 19711                           tosh	equ	0xFFE
 19712                           tosl	equ	0xFFD
 19713                           pclath	equ	0xFFA
 19714                           tblptru	equ	0xFF8
 19715                           tblptrh	equ	0xFF7
 19716                           tblptrl	equ	0xFF6
 19717                           tablat	equ	0xFF5
 19718                           prodh	equ	0xFF4
 19719                           prodl	equ	0xFF3
 19720                           intcon	equ	0xFF2
 19721                           intcon2	equ	0xFF1
 19722                           intcon3	equ	0xFF0
 19723                           indf0	equ	0xFEF
 19724                           postinc0	equ	0xFEE
 19725                           fsr0h	equ	0xFEA
 19726                           fsr0l	equ	0xFE9
 19727                           wreg	equ	0xFE8
 19728                           indf1	equ	0xFE7
 19729                           postinc1	equ	0xFE6
 19730                           postdec1	equ	0xFE5
 19731                           plusw1	equ	0xFE3
 19732                           fsr1h	equ	0xFE2
 19733                           fsr1l	equ	0xFE1
 19734                           indf2	equ	0xFDF
 19735                           postinc2	equ	0xFDE
 19736                           postdec2	equ	0xFDD
 19737                           plusw2	equ	0xFDB
 19738                           fsr2h	equ	0xFDA
 19739                           fsr2l	equ	0xFD9
 19740                           status	equ	0xFD8
 19741                           
 19742 ;; *************** function ___lwmod *****************
 19743 ;; Defined at:
 19744 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 19745 ;; Parameters:    Size  Location     Type
 19746 ;;  dividend        2   25[COMRAM] unsigned int 
 19747 ;;  divisor         2   27[COMRAM] unsigned int 
 19748 ;; Auto vars:     Size  Location     Type
 19749 ;;  counter         1   29[COMRAM] unsigned char 
 19750 ;; Return value:  Size  Location     Type
 19751 ;;                  2   25[COMRAM] unsigned int 
 19752 ;; Registers used:
 19753 ;;		wreg, status,2, status,0
 19754 ;; Tracked objects:
 19755 ;;		On entry : 0/0
 19756 ;;		On exit  : 0/0
 19757 ;;		Unchanged: 0/0
 19758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19759 ;;      Params:         4       0       0       0       0       0       0       0       0
 19760 ;;      Locals:         1       0       0       0       0       0       0       0       0
 19761 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19762 ;;      Totals:         5       0       0       0       0       0       0       0       0
 19763 ;;Total ram usage:        5 bytes
 19764 ;; Hardware stack levels used:    1
 19765 ;; Hardware stack levels required when called:    2
 19766 ;; This function calls:
 19767 ;;		Nothing
 19768 ;; This function is called by:
 19769 ;;		_utoa
 19770 ;;		_converte_inteiro_matriz
 19771 ;; This function uses a non-reentrant model
 19772 ;;
 19773                           
 19774                           	psect	text65
 19775  005860                     __ptext65:
 19776                           	opt stack 0
 19777  005860                     ___lwmod:
 19778                           	opt stack 18
 19779                           
 19780                           ;incstack = 0
 19781  005860  501C               	movf	___lwmod@divisor,w,c
 19782  005862  101D               	iorwf	___lwmod@divisor+1,w,c
 19783  005864  B4D8               	btfsc	status,2,c
 19784  005866  D018               	goto	l2196
 19785  005868  0E01               	movlw	1
 19786  00586A  6E1E               	movwf	___lwmod@counter,c
 19787  00586C  D004               	goto	l2191
 19788  00586E  90D8               	bcf	status,0,c
 19789  005870  361C               	rlcf	___lwmod@divisor,f,c
 19790  005872  361D               	rlcf	___lwmod@divisor+1,f,c
 19791  005874  2A1E               	incf	___lwmod@counter,f,c
 19792  005876                     l2191:
 19793  005876  AE1D               	btfss	___lwmod@divisor+1,7,c
 19794  005878  D7FA               	goto	l2192
 19795  00587A                     u13440:
 19796  00587A  501C               	movf	___lwmod@divisor,w,c
 19797  00587C  5C1A               	subwf	___lwmod@dividend,w,c
 19798  00587E  501D               	movf	___lwmod@divisor+1,w,c
 19799  005880  581B               	subwfb	___lwmod@dividend+1,w,c
 19800  005882  A0D8               	btfss	status,0,c
 19801  005884  D004               	goto	l2195
 19802  005886  501C               	movf	___lwmod@divisor,w,c
 19803  005888  5E1A               	subwf	___lwmod@dividend,f,c
 19804  00588A  501D               	movf	___lwmod@divisor+1,w,c
 19805  00588C  5A1B               	subwfb	___lwmod@dividend+1,f,c
 19806  00588E                     l2195:
 19807  00588E  90D8               	bcf	status,0,c
 19808  005890  321D               	rrcf	___lwmod@divisor+1,f,c
 19809  005892  321C               	rrcf	___lwmod@divisor,f,c
 19810  005894  2E1E               	decfsz	___lwmod@counter,f,c
 19811  005896  D7F1               	goto	u13440
 19812  005898                     l2196:
 19813  005898  C01A  F01A         	movff	___lwmod@dividend,?___lwmod
 19814  00589C  C01B  F01B         	movff	___lwmod@dividend+1,?___lwmod+1
 19815  0058A0  0012               	return		;funcret
 19816  0058A2                     __end_of___lwmod:
 19817                           	opt stack 0
 19818                           tosu	equ	0xFFF
 19819                           tosh	equ	0xFFE
 19820                           tosl	equ	0xFFD
 19821                           pclath	equ	0xFFA
 19822                           tblptru	equ	0xFF8
 19823                           tblptrh	equ	0xFF7
 19824                           tblptrl	equ	0xFF6
 19825                           tablat	equ	0xFF5
 19826                           prodh	equ	0xFF4
 19827                           prodl	equ	0xFF3
 19828                           intcon	equ	0xFF2
 19829                           intcon2	equ	0xFF1
 19830                           intcon3	equ	0xFF0
 19831                           indf0	equ	0xFEF
 19832                           postinc0	equ	0xFEE
 19833                           fsr0h	equ	0xFEA
 19834                           fsr0l	equ	0xFE9
 19835                           wreg	equ	0xFE8
 19836                           indf1	equ	0xFE7
 19837                           postinc1	equ	0xFE6
 19838                           postdec1	equ	0xFE5
 19839                           plusw1	equ	0xFE3
 19840                           fsr1h	equ	0xFE2
 19841                           fsr1l	equ	0xFE1
 19842                           indf2	equ	0xFDF
 19843                           postinc2	equ	0xFDE
 19844                           postdec2	equ	0xFDD
 19845                           plusw2	equ	0xFDB
 19846                           fsr2h	equ	0xFDA
 19847                           fsr2l	equ	0xFD9
 19848                           status	equ	0xFD8
 19849                           
 19850 ;; *************** function ___lwdiv *****************
 19851 ;; Defined at:
 19852 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 19853 ;; Parameters:    Size  Location     Type
 19854 ;;  dividend        2   25[COMRAM] unsigned int 
 19855 ;;  divisor         2   27[COMRAM] unsigned int 
 19856 ;; Auto vars:     Size  Location     Type
 19857 ;;  quotient        2   30[COMRAM] unsigned int 
 19858 ;;  counter         1   29[COMRAM] unsigned char 
 19859 ;; Return value:  Size  Location     Type
 19860 ;;                  2   25[COMRAM] unsigned int 
 19861 ;; Registers used:
 19862 ;;		wreg, status,2, status,0
 19863 ;; Tracked objects:
 19864 ;;		On entry : 0/0
 19865 ;;		On exit  : 0/0
 19866 ;;		Unchanged: 0/0
 19867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19868 ;;      Params:         4       0       0       0       0       0       0       0       0
 19869 ;;      Locals:         3       0       0       0       0       0       0       0       0
 19870 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19871 ;;      Totals:         7       0       0       0       0       0       0       0       0
 19872 ;;Total ram usage:        7 bytes
 19873 ;; Hardware stack levels used:    1
 19874 ;; Hardware stack levels required when called:    2
 19875 ;; This function calls:
 19876 ;;		Nothing
 19877 ;; This function is called by:
 19878 ;;		_utoa
 19879 ;;		_converte_inteiro_matriz
 19880 ;; This function uses a non-reentrant model
 19881 ;;
 19882                           
 19883                           	psect	text66
 19884  00569E                     __ptext66:
 19885                           	opt stack 0
 19886  00569E                     ___lwdiv:
 19887                           	opt stack 18
 19888                           
 19889                           ;incstack = 0
 19890  00569E  0E00               	movlw	0
 19891  0056A0  6E20               	movwf	___lwdiv@quotient+1,c
 19892  0056A2  0E00               	movlw	0
 19893  0056A4  6E1F               	movwf	___lwdiv@quotient,c
 19894  0056A6  501C               	movf	___lwdiv@divisor,w,c
 19895  0056A8  101D               	iorwf	___lwdiv@divisor+1,w,c
 19896  0056AA  B4D8               	btfsc	status,2,c
 19897  0056AC  D01C               	goto	l2186
 19898  0056AE  0E01               	movlw	1
 19899  0056B0  6E1E               	movwf	___lwdiv@counter,c
 19900  0056B2  D004               	goto	l2181
 19901  0056B4  90D8               	bcf	status,0,c
 19902  0056B6  361C               	rlcf	___lwdiv@divisor,f,c
 19903  0056B8  361D               	rlcf	___lwdiv@divisor+1,f,c
 19904  0056BA  2A1E               	incf	___lwdiv@counter,f,c
 19905  0056BC                     l2181:
 19906  0056BC  AE1D               	btfss	___lwdiv@divisor+1,7,c
 19907  0056BE  D7FA               	goto	l2182
 19908  0056C0                     u13410:
 19909  0056C0  90D8               	bcf	status,0,c
 19910  0056C2  361F               	rlcf	___lwdiv@quotient,f,c
 19911  0056C4  3620               	rlcf	___lwdiv@quotient+1,f,c
 19912  0056C6  501C               	movf	___lwdiv@divisor,w,c
 19913  0056C8  5C1A               	subwf	___lwdiv@dividend,w,c
 19914  0056CA  501D               	movf	___lwdiv@divisor+1,w,c
 19915  0056CC  581B               	subwfb	___lwdiv@dividend+1,w,c
 19916  0056CE  A0D8               	btfss	status,0,c
 19917  0056D0  D005               	goto	l2185
 19918  0056D2  501C               	movf	___lwdiv@divisor,w,c
 19919  0056D4  5E1A               	subwf	___lwdiv@dividend,f,c
 19920  0056D6  501D               	movf	___lwdiv@divisor+1,w,c
 19921  0056D8  5A1B               	subwfb	___lwdiv@dividend+1,f,c
 19922  0056DA  801F               	bsf	___lwdiv@quotient,0,c
 19923  0056DC                     l2185:
 19924  0056DC  90D8               	bcf	status,0,c
 19925  0056DE  321D               	rrcf	___lwdiv@divisor+1,f,c
 19926  0056E0  321C               	rrcf	___lwdiv@divisor,f,c
 19927  0056E2  2E1E               	decfsz	___lwdiv@counter,f,c
 19928  0056E4  D7ED               	goto	u13410
 19929  0056E6                     l2186:
 19930  0056E6  C01F  F01A         	movff	___lwdiv@quotient,?___lwdiv
 19931  0056EA  C020  F01B         	movff	___lwdiv@quotient+1,?___lwdiv+1
 19932  0056EE  0012               	return		;funcret
 19933  0056F0                     __end_of___lwdiv:
 19934                           	opt stack 0
 19935                           tosu	equ	0xFFF
 19936                           tosh	equ	0xFFE
 19937                           tosl	equ	0xFFD
 19938                           pclath	equ	0xFFA
 19939                           tblptru	equ	0xFF8
 19940                           tblptrh	equ	0xFF7
 19941                           tblptrl	equ	0xFF6
 19942                           tablat	equ	0xFF5
 19943                           prodh	equ	0xFF4
 19944                           prodl	equ	0xFF3
 19945                           intcon	equ	0xFF2
 19946                           intcon2	equ	0xFF1
 19947                           intcon3	equ	0xFF0
 19948                           indf0	equ	0xFEF
 19949                           postinc0	equ	0xFEE
 19950                           fsr0h	equ	0xFEA
 19951                           fsr0l	equ	0xFE9
 19952                           wreg	equ	0xFE8
 19953                           indf1	equ	0xFE7
 19954                           postinc1	equ	0xFE6
 19955                           postdec1	equ	0xFE5
 19956                           plusw1	equ	0xFE3
 19957                           fsr1h	equ	0xFE2
 19958                           fsr1l	equ	0xFE1
 19959                           indf2	equ	0xFDF
 19960                           postinc2	equ	0xFDE
 19961                           postdec2	equ	0xFDD
 19962                           plusw2	equ	0xFDB
 19963                           fsr2h	equ	0xFDA
 19964                           fsr2l	equ	0xFD9
 19965                           status	equ	0xFD8
 19966                           
 19967 ;; *************** function _rcvr_datablock *****************
 19968 ;; Defined at:
 19969 ;;		line 139 in file "bibliotecas/diskio.c"
 19970 ;; Parameters:    Size  Location     Type
 19971 ;;  buff            2   31[COMRAM] PTR unsigned char 
 19972 ;;		 -> NULL(0), disk_ioctl@csd(16), fs(558), 
 19973 ;;  btr             2   33[COMRAM] unsigned int 
 19974 ;; Auto vars:     Size  Location     Type
 19975 ;;  tmr             2   37[COMRAM] unsigned int 
 19976 ;;  token           1   39[COMRAM] unsigned char 
 19977 ;; Return value:  Size  Location     Type
 19978 ;;                  1    wreg      unsigned char 
 19979 ;; Registers used:
 19980 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19981 ;; Tracked objects:
 19982 ;;		On entry : 0/0
 19983 ;;		On exit  : 0/0
 19984 ;;		Unchanged: 0/0
 19985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19986 ;;      Params:         4       0       0       0       0       0       0       0       0
 19987 ;;      Locals:         3       0       0       0       0       0       0       0       0
 19988 ;;      Temps:          2       0       0       0       0       0       0       0       0
 19989 ;;      Totals:         9       0       0       0       0       0       0       0       0
 19990 ;;Total ram usage:        9 bytes
 19991 ;; Hardware stack levels used:    1
 19992 ;; Hardware stack levels required when called:    5
 19993 ;; This function calls:
 19994 ;;		_escreve_frase_ram_lcd
 19995 ;;		_posicao_cursor_lcd
 19996 ;;		_recebe_dado_SPI
 19997 ;; This function is called by:
 19998 ;;		_disk_read
 19999 ;;		_disk_ioctl
 20000 ;; This function uses a non-reentrant model
 20001 ;;
 20002                           
 20003                           	psect	text67
 20004  005124                     __ptext67:
 20005                           	opt stack 0
 20006  005124                     _rcvr_datablock:
 20007                           	opt stack 20
 20008                           
 20009                           ;diskio.c: 144: BYTE token;
 20010                           ;diskio.c: 145: UINT tmr;
 20011                           ;diskio.c: 148: for (tmr = 2000; tmr; tmr--) {
 20012                           
 20013                           ;incstack = 0
 20014  005124  0E07               	movlw	7
 20015  005126  6E27               	movwf	rcvr_datablock@tmr+1,c
 20016  005128  0ED0               	movlw	208
 20017  00512A  6E26               	movwf	rcvr_datablock@tmr,c
 20018  00512C  D00D               	goto	l890
 20019  00512E                     
 20020                           ;diskio.c: 149: token = recebe_dado_SPI();
 20021  00512E  ECF6  F02A         	call	_recebe_dado_SPI	;wreg free
 20022  005132  6E28               	movwf	rcvr_datablock@token,c
 20023                           
 20024                           ;diskio.c: 150: if (token != 0xFF) break;
 20025  005134  2828               	incf	rcvr_datablock@token,w,c
 20026  005136  A4D8               	btfss	status,2,c
 20027  005138  D00B               	goto	u13950
 20028                           
 20029                           ;diskio.c: 151: _delay((unsigned long)((100)*(48000000/4000000.0)));
 20030  00513A  0EF0               	movlw	240
 20031  00513C                     u19467:
 20032  00513C  D000               	nop2	
 20033  00513E  2EE8               	decfsz	wreg,f,c
 20034  005140  D7FD               	bra	u19467
 20035  005142  0626               	decf	rcvr_datablock@tmr,f,c
 20036  005144  A0D8               	btfss	status,0,c
 20037  005146  0627               	decf	rcvr_datablock@tmr+1,f,c
 20038  005148                     l890:
 20039  005148  5026               	movf	rcvr_datablock@tmr,w,c
 20040  00514A  1027               	iorwf	rcvr_datablock@tmr+1,w,c
 20041  00514C  A4D8               	btfss	status,2,c
 20042  00514E  D7EF               	goto	l891
 20043  005150                     u13950:
 20044                           
 20045                           ;diskio.c: 152: }
 20046                           ;diskio.c: 153: if (token != 0xFE) return 0;
 20047  005150  0EFE               	movlw	254
 20048  005152  1828               	xorwf	rcvr_datablock@token,w,c
 20049  005154  B4D8               	btfsc	status,2,c
 20050  005156  D002               	goto	l894
 20051  005158  0E00               	movlw	0
 20052  00515A  0012               	return	
 20053  00515C                     l894:
 20054                           
 20055                           ;diskio.c: 156: *buff++ = recebe_dado_SPI();
 20056                           
 20057                           ;diskio.c: 155: do{
 20058  00515C  ECF6  F02A         	call	_recebe_dado_SPI	;wreg free
 20059  005160  C020  FFD9         	movff	rcvr_datablock@buff,fsr2l
 20060  005164  C021  FFDA         	movff	rcvr_datablock@buff+1,fsr2h
 20061  005168  6EDF               	movwf	indf2,c
 20062  00516A  4A20               	infsnz	rcvr_datablock@buff,f,c
 20063  00516C  2A21               	incf	rcvr_datablock@buff+1,f,c
 20064                           
 20065                           ;diskio.c: 157: posicao_cursor_lcd(1,0);
 20066  00516E  0E00               	movlw	0
 20067  005170  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 20068  005172  0E01               	movlw	1
 20069  005174  EC89  F02A         	call	_posicao_cursor_lcd
 20070                           
 20071                           ;diskio.c: 158: escreve_frase_ram_lcd(*buff);
 20072  005178  C020  FFD9         	movff	rcvr_datablock@buff,fsr2l
 20073  00517C  C021  FFDA         	movff	rcvr_datablock@buff+1,fsr2h
 20074  005180  50DF               	movf	indf2,w,c
 20075  005182  6E24               	movwf	??_rcvr_datablock& (0+255),c
 20076  005184  6A25               	clrf	(??_rcvr_datablock+1)& (0+255),c
 20077  005186  C024  F01D         	movff	??_rcvr_datablock,escreve_frase_ram_lcd@buffer
 20078  00518A  C025  F01E         	movff	??_rcvr_datablock+1,escreve_frase_ram_lcd@buffer+1
 20079  00518E  EC78  F02B         	call	_escreve_frase_ram_lcd	;wreg free
 20080                           
 20081                           ;diskio.c: 159: }while (--btr);
 20082  005192  0622               	decf	rcvr_datablock@btr,f,c
 20083  005194  A0D8               	btfss	status,0,c
 20084  005196  0623               	decf	rcvr_datablock@btr+1,f,c
 20085  005198  5022               	movf	rcvr_datablock@btr,w,c
 20086  00519A  1023               	iorwf	rcvr_datablock@btr+1,w,c
 20087  00519C  A4D8               	btfss	status,2,c
 20088  00519E  D7DE               	goto	l894
 20089                           
 20090                           ;diskio.c: 160: recebe_dado_SPI();
 20091  0051A0  ECF6  F02A         	call	_recebe_dado_SPI	;wreg free
 20092                           
 20093                           ;diskio.c: 161: recebe_dado_SPI();
 20094  0051A4  ECF6  F02A         	call	_recebe_dado_SPI	;wreg free
 20095                           
 20096                           ;diskio.c: 163: return 1;
 20097  0051A8  0E01               	movlw	1
 20098  0051AA  0012               	return	
 20099  0051AC                     __end_of_rcvr_datablock:
 20100                           	opt stack 0
 20101                           tosu	equ	0xFFF
 20102                           tosh	equ	0xFFE
 20103                           tosl	equ	0xFFD
 20104                           pclath	equ	0xFFA
 20105                           tblptru	equ	0xFF8
 20106                           tblptrh	equ	0xFF7
 20107                           tblptrl	equ	0xFF6
 20108                           tablat	equ	0xFF5
 20109                           prodh	equ	0xFF4
 20110                           prodl	equ	0xFF3
 20111                           intcon	equ	0xFF2
 20112                           intcon2	equ	0xFF1
 20113                           intcon3	equ	0xFF0
 20114                           indf0	equ	0xFEF
 20115                           postinc0	equ	0xFEE
 20116                           fsr0h	equ	0xFEA
 20117                           fsr0l	equ	0xFE9
 20118                           wreg	equ	0xFE8
 20119                           indf1	equ	0xFE7
 20120                           postinc1	equ	0xFE6
 20121                           postdec1	equ	0xFE5
 20122                           plusw1	equ	0xFE3
 20123                           fsr1h	equ	0xFE2
 20124                           fsr1l	equ	0xFE1
 20125                           indf2	equ	0xFDF
 20126                           postinc2	equ	0xFDE
 20127                           postdec2	equ	0xFDD
 20128                           plusw2	equ	0xFDB
 20129                           fsr2h	equ	0xFDA
 20130                           fsr2l	equ	0xFD9
 20131                           status	equ	0xFD8
 20132                           
 20133 ;; *************** function _recebe_dado_SPI *****************
 20134 ;; Defined at:
 20135 ;;		line 143 in file "bibliotecas/SHRC.c"
 20136 ;; Parameters:    Size  Location     Type
 20137 ;;		None
 20138 ;; Auto vars:     Size  Location     Type
 20139 ;;  contador        1   27[COMRAM] unsigned char 
 20140 ;; Return value:  Size  Location     Type
 20141 ;;                  1    wreg      unsigned char 
 20142 ;; Registers used:
 20143 ;;		wreg, status,2, status,0
 20144 ;; Tracked objects:
 20145 ;;		On entry : 0/0
 20146 ;;		On exit  : 0/0
 20147 ;;		Unchanged: 0/0
 20148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20149 ;;      Params:         0       0       0       0       0       0       0       0       0
 20150 ;;      Locals:         1       0       0       0       0       0       0       0       0
 20151 ;;      Temps:          2       0       0       0       0       0       0       0       0
 20152 ;;      Totals:         3       0       0       0       0       0       0       0       0
 20153 ;;Total ram usage:        3 bytes
 20154 ;; Hardware stack levels used:    1
 20155 ;; Hardware stack levels required when called:    2
 20156 ;; This function calls:
 20157 ;;		Nothing
 20158 ;; This function is called by:
 20159 ;;		_response
 20160 ;;		_wait_ready
 20161 ;;		_rcvr_datablock
 20162 ;;		_xmit_datablock
 20163 ;;		_disk_initialize
 20164 ;;		_disk_ioctl
 20165 ;; This function uses a non-reentrant model
 20166 ;;
 20167                           
 20168                           	psect	text68
 20169  0055EC                     __ptext68:
 20170                           	opt stack 0
 20171  0055EC                     _recebe_dado_SPI:
 20172                           	opt stack 21
 20173                           
 20174                           ;SHRC.c: 145: dado = 0;
 20175                           
 20176                           ;incstack = 0
 20177  0055EC  0E00               	movlw	0
 20178  0055EE  6E3A               	movwf	_dado,c
 20179                           
 20180                           ;SHRC.c: 147: unsigned char contador=0;
 20181  0055F0  0E00               	movlw	0
 20182  0055F2  6E1C               	movwf	recebe_dado_SPI@contador,c
 20183                           
 20184                           ;SHRC.c: 149: (INTCONbits.GIE = 0);
 20185  0055F4  9EF2               	bcf	intcon,7,c	;volatile
 20186                           
 20187                           ;SHRC.c: 151: while(contador<=7)
 20188  0055F6  D022               	goto	l350
 20189  0055F8                     
 20190                           ;SHRC.c: 152: {
 20191                           ;SHRC.c: 153: dado |= (PORTBbits.RB5 << (7-contador));
 20192  0055F8  501C               	movf	recebe_dado_SPI@contador,w,c
 20193  0055FA  0800               	sublw	0
 20194  0055FC  6E1A               	movwf	??_recebe_dado_SPI& (0+255),c
 20195  0055FE  0E07               	movlw	7
 20196  005600  261A               	addwf	??_recebe_dado_SPI,f,c
 20197  005602  AA81               	btfss	3969,5,c	;volatile
 20198  005604  D003               	goto	u13460
 20199  005606  6A1B               	clrf	(??_recebe_dado_SPI+1)& (0+255),c
 20200  005608  2A1B               	incf	(??_recebe_dado_SPI+1)& (0+255),f,c
 20201  00560A  D001               	goto	u13468
 20202  00560C                     u13460:
 20203  00560C  6A1B               	clrf	(??_recebe_dado_SPI+1)& (0+255),c
 20204  00560E                     u13468:
 20205  00560E  2A1A               	incf	??_recebe_dado_SPI,f,c
 20206  005610  D002               	goto	u13474
 20207  005612                     u13475:
 20208  005612  90D8               	bcf	status,0,c
 20209  005614  361B               	rlcf	??_recebe_dado_SPI+1,f,c
 20210  005616                     u13474:
 20211  005616  2E1A               	decfsz	??_recebe_dado_SPI,f,c
 20212  005618  D7FC               	goto	u13475
 20213  00561A  501B               	movf	??_recebe_dado_SPI+1,w,c
 20214  00561C  123A               	iorwf	_dado,f,c
 20215                           
 20216                           ;SHRC.c: 155: _delay((unsigned long)((2)*(48000000/4000000.0)));
 20217  00561E  0E08               	movlw	8
 20218  005620                     u19477:
 20219  005620  2EE8               	decfsz	wreg,f,c
 20220  005622  D7FE               	bra	u19477
 20221                           
 20222                           ;SHRC.c: 156: LATBbits.LATB6 = 1;
 20223  005624  8C8A               	bsf	3978,6,c	;volatile
 20224                           
 20225                           ;SHRC.c: 157: _delay((unsigned long)((2)*(48000000/4000000.0)));
 20226  005626  0E08               	movlw	8
 20227  005628                     u19487:
 20228  005628  2EE8               	decfsz	wreg,f,c
 20229  00562A  D7FE               	bra	u19487
 20230                           
 20231                           ;SHRC.c: 158: _delay((unsigned long)((2)*(48000000/4000000.0)));
 20232  00562C  0E08               	movlw	8
 20233  00562E                     u19497:
 20234  00562E  2EE8               	decfsz	wreg,f,c
 20235  005630  D7FE               	bra	u19497
 20236                           
 20237                           ;SHRC.c: 159: LATBbits.LATB6 = 0;
 20238  005632  9C8A               	bcf	3978,6,c	;volatile
 20239                           
 20240                           ;SHRC.c: 160: _delay((unsigned long)((2)*(48000000/4000000.0)));
 20241  005634  0E08               	movlw	8
 20242  005636                     u19507:
 20243  005636  2EE8               	decfsz	wreg,f,c
 20244  005638  D7FE               	bra	u19507
 20245                           
 20246                           ;SHRC.c: 161: contador++;
 20247  00563A  2A1C               	incf	recebe_dado_SPI@contador,f,c
 20248  00563C                     l350:
 20249  00563C  0E07               	movlw	7
 20250  00563E  641C               	cpfsgt	recebe_dado_SPI@contador,c
 20251  005640  D7DB               	goto	l351
 20252                           
 20253                           ;SHRC.c: 162: }
 20254                           ;SHRC.c: 163: (INTCONbits.GIE = 1);
 20255  005642  8EF2               	bsf	intcon,7,c	;volatile
 20256                           
 20257                           ;SHRC.c: 164: return dado;
 20258  005644  503A               	movf	_dado,w,c
 20259  005646  0012               	return	
 20260  005648                     __end_of_recebe_dado_SPI:
 20261                           	opt stack 0
 20262                           tosu	equ	0xFFF
 20263                           tosh	equ	0xFFE
 20264                           tosl	equ	0xFFD
 20265                           pclath	equ	0xFFA
 20266                           tblptru	equ	0xFF8
 20267                           tblptrh	equ	0xFF7
 20268                           tblptrl	equ	0xFF6
 20269                           tablat	equ	0xFF5
 20270                           prodh	equ	0xFF4
 20271                           prodl	equ	0xFF3
 20272                           intcon	equ	0xFF2
 20273                           intcon2	equ	0xFF1
 20274                           intcon3	equ	0xFF0
 20275                           indf0	equ	0xFEF
 20276                           postinc0	equ	0xFEE
 20277                           fsr0h	equ	0xFEA
 20278                           fsr0l	equ	0xFE9
 20279                           wreg	equ	0xFE8
 20280                           indf1	equ	0xFE7
 20281                           postinc1	equ	0xFE6
 20282                           postdec1	equ	0xFE5
 20283                           plusw1	equ	0xFE3
 20284                           fsr1h	equ	0xFE2
 20285                           fsr1l	equ	0xFE1
 20286                           indf2	equ	0xFDF
 20287                           postinc2	equ	0xFDE
 20288                           postdec2	equ	0xFDD
 20289                           plusw2	equ	0xFDB
 20290                           fsr2h	equ	0xFDA
 20291                           fsr2l	equ	0xFD9
 20292                           status	equ	0xFD8
 20293                           
 20294 ;; *************** function _posicao_cursor_lcd *****************
 20295 ;; Defined at:
 20296 ;;		line 271 in file "bibliotecas/display_lcd.c"
 20297 ;; Parameters:    Size  Location     Type
 20298 ;;  linha           1    wreg     unsigned char 
 20299 ;;  coluna          1   28[COMRAM] unsigned char 
 20300 ;; Auto vars:     Size  Location     Type
 20301 ;;  linha           1   29[COMRAM] unsigned char 
 20302 ;;  endereco        1   30[COMRAM] unsigned char 
 20303 ;; Return value:  Size  Location     Type
 20304 ;;                  1    wreg      void 
 20305 ;; Registers used:
 20306 ;;		wreg, status,2, status,0, cstack
 20307 ;; Tracked objects:
 20308 ;;		On entry : 0/0
 20309 ;;		On exit  : 0/0
 20310 ;;		Unchanged: 0/0
 20311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20312 ;;      Params:         1       0       0       0       0       0       0       0       0
 20313 ;;      Locals:         2       0       0       0       0       0       0       0       0
 20314 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20315 ;;      Totals:         3       0       0       0       0       0       0       0       0
 20316 ;;Total ram usage:        3 bytes
 20317 ;; Hardware stack levels used:    1
 20318 ;; Hardware stack levels required when called:    4
 20319 ;; This function calls:
 20320 ;;		_endereco_cursor_lcd
 20321 ;; This function is called by:
 20322 ;;		_mensagem_inicial
 20323 ;;		_SDCard
 20324 ;;		_rcvr_datablock
 20325 ;;		___send_cmd
 20326 ;;		_disk_initialize
 20327 ;;		_gps
 20328 ;;		_inicializa_SPI
 20329 ;;		_ReadSPI_
 20330 ;;		_leitura_chave
 20331 ;; This function uses a non-reentrant model
 20332 ;;
 20333                           
 20334                           	psect	text69
 20335  005512                     __ptext69:
 20336                           	opt stack 0
 20337  005512                     _posicao_cursor_lcd:
 20338                           	opt stack 25
 20339                           
 20340                           ;incstack = 0
 20341                           ;posicao_cursor_lcd@linha stored from wreg
 20342  005512  6E1E               	movwf	posicao_cursor_lcd@linha,c
 20343                           
 20344                           ;display_lcd.c: 273: unsigned char endereco = 0x00;
 20345  005514  0E00               	movlw	0
 20346  005516  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 20347                           
 20348                           ;display_lcd.c: 275: if(coluna <= 0x10U)
 20349  005518  0E11               	movlw	17
 20350  00551A  601D               	cpfslt	posicao_cursor_lcd@coluna,c
 20351  00551C  D02F               	goto	l561
 20352  00551E  D01E               	goto	l562
 20353  005520                     l563:
 20354                           
 20355                           ;display_lcd.c: 282: endereco = 0x00U + coluna;
 20356  005520  C01D  F01F         	movff	posicao_cursor_lcd@coluna,posicao_cursor_lcd@endereco
 20357                           
 20358                           ;display_lcd.c: 283: endereco_cursor_lcd(endereco);
 20359  005524  501F               	movf	posicao_cursor_lcd@endereco,w,c
 20360  005526  ECC1  F02A         	call	_endereco_cursor_lcd
 20361                           
 20362                           ;display_lcd.c: 284: break;
 20363  00552A  D026               	goto	l564
 20364  00552C                     
 20365                           ;display_lcd.c: 287: endereco = 0x40U + coluna;
 20366  00552C  501D               	movf	posicao_cursor_lcd@coluna,w,c
 20367  00552E  0F40               	addlw	64
 20368  005530  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 20369                           
 20370                           ;display_lcd.c: 288: endereco_cursor_lcd(endereco);
 20371  005532  501F               	movf	posicao_cursor_lcd@endereco,w,c
 20372  005534  ECC1  F02A         	call	_endereco_cursor_lcd
 20373                           
 20374                           ;display_lcd.c: 289: break;
 20375  005538  D01F               	goto	l564
 20376  00553A                     
 20377                           ;display_lcd.c: 292: endereco = 0x14U + coluna;
 20378  00553A  501D               	movf	posicao_cursor_lcd@coluna,w,c
 20379  00553C  0F14               	addlw	20
 20380  00553E  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 20381                           
 20382                           ;display_lcd.c: 293: endereco_cursor_lcd(endereco);
 20383  005540  501F               	movf	posicao_cursor_lcd@endereco,w,c
 20384  005542  ECC1  F02A         	call	_endereco_cursor_lcd
 20385                           
 20386                           ;display_lcd.c: 294: break;
 20387  005546  D018               	goto	l564
 20388  005548                     
 20389                           ;display_lcd.c: 297: endereco = 0x54U + coluna;
 20390  005548  501D               	movf	posicao_cursor_lcd@coluna,w,c
 20391  00554A  0F54               	addlw	84
 20392  00554C  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 20393                           
 20394                           ;display_lcd.c: 298: endereco_cursor_lcd(endereco);
 20395  00554E  501F               	movf	posicao_cursor_lcd@endereco,w,c
 20396  005550  ECC1  F02A         	call	_endereco_cursor_lcd
 20397                           
 20398                           ;display_lcd.c: 299: break;
 20399  005554  D011               	goto	l564
 20400  005556                     
 20401                           ;display_lcd.c: 302: endereco = 0x00U;
 20402  005556  0E00               	movlw	0
 20403  005558  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 20404                           
 20405                           ;display_lcd.c: 304: }
 20406                           
 20407                           ;display_lcd.c: 303: break;
 20408  00555A  D00E               	goto	l564
 20409  00555C                     l562:
 20410  00555C  501E               	movf	posicao_cursor_lcd@linha,w,c
 20411                           
 20412                           ; Switch size 1, requested type "space"
 20413                           ; Number of cases is 4, Range of values is 1 to 4
 20414                           ; switch strategies available:
 20415                           ; Name         Instructions Cycles
 20416                           ; simple_byte           13     7 (average)
 20417                           ;	Chosen strategy is simple_byte
 20418  00555E  0A01               	xorlw	1	; case 1
 20419  005560  B4D8               	btfsc	status,2,c
 20420  005562  D7DE               	goto	l563
 20421  005564  0A03               	xorlw	3	; case 2
 20422  005566  B4D8               	btfsc	status,2,c
 20423  005568  D7E1               	goto	l565
 20424  00556A  0A01               	xorlw	1	; case 3
 20425  00556C  B4D8               	btfsc	status,2,c
 20426  00556E  D7E5               	goto	l566
 20427  005570  0A07               	xorlw	7	; case 4
 20428  005572  B4D8               	btfsc	status,2,c
 20429  005574  D7E9               	goto	l567
 20430  005576  D7EF               	goto	l568
 20431  005578                     l564:
 20432                           
 20433                           ;display_lcd.c: 306: coluna++;
 20434  005578  2A1D               	incf	posicao_cursor_lcd@coluna,f,c
 20435                           
 20436                           ;display_lcd.c: 307: }
 20437  00557A  0012               	return	
 20438  00557C                     l561:
 20439                           
 20440                           ;display_lcd.c: 308: else
 20441                           ;display_lcd.c: 309: {
 20442                           ;display_lcd.c: 310: endereco = 0x00U;
 20443  00557C  0E00               	movlw	0
 20444  00557E  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 20445  005580  0012               	return	
 20446  005582                     __end_of_posicao_cursor_lcd:
 20447                           	opt stack 0
 20448                           tosu	equ	0xFFF
 20449                           tosh	equ	0xFFE
 20450                           tosl	equ	0xFFD
 20451                           pclath	equ	0xFFA
 20452                           tblptru	equ	0xFF8
 20453                           tblptrh	equ	0xFF7
 20454                           tblptrl	equ	0xFF6
 20455                           tablat	equ	0xFF5
 20456                           prodh	equ	0xFF4
 20457                           prodl	equ	0xFF3
 20458                           intcon	equ	0xFF2
 20459                           intcon2	equ	0xFF1
 20460                           intcon3	equ	0xFF0
 20461                           indf0	equ	0xFEF
 20462                           postinc0	equ	0xFEE
 20463                           fsr0h	equ	0xFEA
 20464                           fsr0l	equ	0xFE9
 20465                           wreg	equ	0xFE8
 20466                           indf1	equ	0xFE7
 20467                           postinc1	equ	0xFE6
 20468                           postdec1	equ	0xFE5
 20469                           plusw1	equ	0xFE3
 20470                           fsr1h	equ	0xFE2
 20471                           fsr1l	equ	0xFE1
 20472                           indf2	equ	0xFDF
 20473                           postinc2	equ	0xFDE
 20474                           postdec2	equ	0xFDD
 20475                           plusw2	equ	0xFDB
 20476                           fsr2h	equ	0xFDA
 20477                           fsr2l	equ	0xFD9
 20478                           status	equ	0xFD8
 20479                           
 20480 ;; *************** function _endereco_cursor_lcd *****************
 20481 ;; Defined at:
 20482 ;;		line 218 in file "bibliotecas/display_lcd.c"
 20483 ;; Parameters:    Size  Location     Type
 20484 ;;  endereco        1    wreg     unsigned char 
 20485 ;; Auto vars:     Size  Location     Type
 20486 ;;  endereco        1   27[COMRAM] unsigned char 
 20487 ;; Return value:  Size  Location     Type
 20488 ;;                  1    wreg      void 
 20489 ;; Registers used:
 20490 ;;		wreg, status,2, status,0, cstack
 20491 ;; Tracked objects:
 20492 ;;		On entry : 0/0
 20493 ;;		On exit  : 0/0
 20494 ;;		Unchanged: 0/0
 20495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20496 ;;      Params:         0       0       0       0       0       0       0       0       0
 20497 ;;      Locals:         1       0       0       0       0       0       0       0       0
 20498 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20499 ;;      Totals:         1       0       0       0       0       0       0       0       0
 20500 ;;Total ram usage:        1 bytes
 20501 ;; Hardware stack levels used:    1
 20502 ;; Hardware stack levels required when called:    3
 20503 ;; This function calls:
 20504 ;;		_delay
 20505 ;; This function is called by:
 20506 ;;		_posicao_cursor_lcd
 20507 ;;		_cria_caractere_lcd
 20508 ;; This function uses a non-reentrant model
 20509 ;;
 20510                           
 20511                           	psect	text70
 20512  005582                     __ptext70:
 20513                           	opt stack 0
 20514  005582                     _endereco_cursor_lcd:
 20515                           	opt stack 25
 20516                           
 20517                           ;incstack = 0
 20518                           ;endereco_cursor_lcd@endereco stored from wreg
 20519  005582  6E1C               	movwf	endereco_cursor_lcd@endereco,c
 20520                           
 20521                           ;display_lcd.c: 221: PORTDbits.RD2 = 0;
 20522  005584  9483               	bcf	3971,2,c	;volatile
 20523                           
 20524                           ;display_lcd.c: 222: PORTDbits.RD1 = 0;
 20525  005586  9283               	bcf	3971,1,c	;volatile
 20526                           
 20527                           ;display_lcd.c: 223: PORTDbits.RD0 = 0;
 20528  005588  9083               	bcf	3971,0,c	;volatile
 20529                           
 20530                           ;display_lcd.c: 226: PORTDbits.RD7 = 1;
 20531  00558A  8E83               	bsf	3971,7,c	;volatile
 20532                           
 20533                           ;display_lcd.c: 227: if(endereco&0b00010000){PORTDbits.RD4=1;}
 20534  00558C  A81C               	btfss	endereco_cursor_lcd@endereco,4,c
 20535  00558E  D002               	goto	l544
 20536  005590  8883               	bsf	3971,4,c	;volatile
 20537  005592  D001               	goto	l545
 20538  005594                     l544:
 20539                           
 20540                           ;display_lcd.c: 228: else {PORTDbits.RD4=0;}
 20541  005594  9883               	bcf	3971,4,c	;volatile
 20542  005596                     l545:
 20543                           
 20544                           ;display_lcd.c: 229: if(endereco&0b00100000){PORTDbits.RD5=1;}
 20545  005596  AA1C               	btfss	endereco_cursor_lcd@endereco,5,c
 20546  005598  D002               	goto	l546
 20547  00559A  8A83               	bsf	3971,5,c	;volatile
 20548  00559C  D001               	goto	l547
 20549  00559E                     l546:
 20550                           
 20551                           ;display_lcd.c: 230: else {PORTDbits.RD5=0;}
 20552  00559E  9A83               	bcf	3971,5,c	;volatile
 20553  0055A0                     l547:
 20554                           
 20555                           ;display_lcd.c: 231: if(endereco&0b01000000){PORTDbits.RD6=1;}
 20556  0055A0  AC1C               	btfss	endereco_cursor_lcd@endereco,6,c
 20557  0055A2  D002               	goto	l548
 20558  0055A4  8C83               	bsf	3971,6,c	;volatile
 20559  0055A6  D001               	goto	l549
 20560  0055A8                     l548:
 20561                           
 20562                           ;display_lcd.c: 232: else {PORTDbits.RD6=0;}
 20563  0055A8  9C83               	bcf	3971,6,c	;volatile
 20564  0055AA                     l549:
 20565                           
 20566                           ;display_lcd.c: 235: PORTDbits.RD0 = 1;
 20567  0055AA  8083               	bsf	3971,0,c	;volatile
 20568                           
 20569                           ;display_lcd.c: 236: delay();
 20570  0055AC  EC4F  F02D         	call	_delay	;wreg free
 20571                           
 20572                           ;display_lcd.c: 237: PORTDbits.RD0 = 0;
 20573  0055B0  9083               	bcf	3971,0,c	;volatile
 20574                           
 20575                           ;display_lcd.c: 238: delay();
 20576  0055B2  EC4F  F02D         	call	_delay	;wreg free
 20577                           
 20578                           ;display_lcd.c: 241: if(endereco&0b00000001){PORTDbits.RD4=1;}
 20579  0055B6  A01C               	btfss	endereco_cursor_lcd@endereco,0,c
 20580  0055B8  D002               	goto	l550
 20581  0055BA  8883               	bsf	3971,4,c	;volatile
 20582  0055BC  D001               	goto	l551
 20583  0055BE                     l550:
 20584                           
 20585                           ;display_lcd.c: 242: else {PORTDbits.RD4=0;}
 20586  0055BE  9883               	bcf	3971,4,c	;volatile
 20587  0055C0                     l551:
 20588                           
 20589                           ;display_lcd.c: 243: if(endereco&0b00000010){PORTDbits.RD5=1;}
 20590  0055C0  A21C               	btfss	endereco_cursor_lcd@endereco,1,c
 20591  0055C2  D002               	goto	l552
 20592  0055C4  8A83               	bsf	3971,5,c	;volatile
 20593  0055C6  D001               	goto	l553
 20594  0055C8                     l552:
 20595                           
 20596                           ;display_lcd.c: 244: else {PORTDbits.RD5=0;}
 20597  0055C8  9A83               	bcf	3971,5,c	;volatile
 20598  0055CA                     l553:
 20599                           
 20600                           ;display_lcd.c: 245: if(endereco&0b00000100){PORTDbits.RD6=1;}
 20601  0055CA  A41C               	btfss	endereco_cursor_lcd@endereco,2,c
 20602  0055CC  D002               	goto	l554
 20603  0055CE  8C83               	bsf	3971,6,c	;volatile
 20604  0055D0  D001               	goto	l555
 20605  0055D2                     l554:
 20606                           
 20607                           ;display_lcd.c: 246: else {PORTDbits.RD6=0;}
 20608  0055D2  9C83               	bcf	3971,6,c	;volatile
 20609  0055D4                     l555:
 20610                           
 20611                           ;display_lcd.c: 247: if(endereco&0b00001000){PORTDbits.RD7=1;}
 20612  0055D4  A61C               	btfss	endereco_cursor_lcd@endereco,3,c
 20613  0055D6  D002               	goto	l556
 20614  0055D8  8E83               	bsf	3971,7,c	;volatile
 20615  0055DA  D001               	goto	l557
 20616  0055DC                     l556:
 20617                           
 20618                           ;display_lcd.c: 248: else {PORTDbits.RD7=0;}
 20619  0055DC  9E83               	bcf	3971,7,c	;volatile
 20620  0055DE                     l557:
 20621                           
 20622                           ;display_lcd.c: 251: PORTDbits.RD0 = 1;
 20623  0055DE  8083               	bsf	3971,0,c	;volatile
 20624                           
 20625                           ;display_lcd.c: 252: delay();
 20626  0055E0  EC4F  F02D         	call	_delay	;wreg free
 20627                           
 20628                           ;display_lcd.c: 253: PORTDbits.RD0 = 0;
 20629  0055E4  9083               	bcf	3971,0,c	;volatile
 20630                           
 20631                           ;display_lcd.c: 254: delay();
 20632  0055E6  EC4F  F02D         	call	_delay	;wreg free
 20633  0055EA  0012               	return		;funcret
 20634  0055EC                     __end_of_endereco_cursor_lcd:
 20635                           	opt stack 0
 20636                           tosu	equ	0xFFF
 20637                           tosh	equ	0xFFE
 20638                           tosl	equ	0xFFD
 20639                           pclath	equ	0xFFA
 20640                           tblptru	equ	0xFF8
 20641                           tblptrh	equ	0xFF7
 20642                           tblptrl	equ	0xFF6
 20643                           tablat	equ	0xFF5
 20644                           prodh	equ	0xFF4
 20645                           prodl	equ	0xFF3
 20646                           intcon	equ	0xFF2
 20647                           intcon2	equ	0xFF1
 20648                           intcon3	equ	0xFF0
 20649                           indf0	equ	0xFEF
 20650                           postinc0	equ	0xFEE
 20651                           fsr0h	equ	0xFEA
 20652                           fsr0l	equ	0xFE9
 20653                           wreg	equ	0xFE8
 20654                           indf1	equ	0xFE7
 20655                           postinc1	equ	0xFE6
 20656                           postdec1	equ	0xFE5
 20657                           plusw1	equ	0xFE3
 20658                           fsr1h	equ	0xFE2
 20659                           fsr1l	equ	0xFE1
 20660                           indf2	equ	0xFDF
 20661                           postinc2	equ	0xFDE
 20662                           postdec2	equ	0xFDD
 20663                           plusw2	equ	0xFDB
 20664                           fsr2h	equ	0xFDA
 20665                           fsr2l	equ	0xFD9
 20666                           status	equ	0xFD8
 20667                           
 20668 ;; *************** function _escreve_frase_ram_lcd *****************
 20669 ;; Defined at:
 20670 ;;		line 445 in file "bibliotecas/display_lcd.c"
 20671 ;; Parameters:    Size  Location     Type
 20672 ;;  buffer          2   28[COMRAM] PTR unsigned char 
 20673 ;;		 -> STR_18(6), RAM(2047), escreve_inteiro_lcd@texto(7), leitura_chave@pos_ignicao_on(17), 
 20674 ;;		 -> leitura_chave@pos_ignicao_crank(17), leitura_chave@pos_ignicao_off(17), STR_16(17), STR_15(9), 
 20675 ;;		 -> STR_13(11), STR_12(14), STR_10(16), STR_8(17), 
 20676 ;;		 -> STR_6(5), STR_4(5), gps@gps_buffer(15), dado_buffer(7), 
 20677 ;;		 -> STR_2(6), data_buffer(15), STR_1(6), mensagem_inicial@msg_dois(17), 
 20678 ;;		 -> mensagem_inicial@msg_linha_um(17), 
 20679 ;; Auto vars:     Size  Location     Type
 20680 ;;		None
 20681 ;; Return value:  Size  Location     Type
 20682 ;;                  1    wreg      void 
 20683 ;; Registers used:
 20684 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20685 ;; Tracked objects:
 20686 ;;		On entry : 0/0
 20687 ;;		On exit  : 0/0
 20688 ;;		Unchanged: 0/0
 20689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20690 ;;      Params:         2       0       0       0       0       0       0       0       0
 20691 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20692 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20693 ;;      Totals:         2       0       0       0       0       0       0       0       0
 20694 ;;Total ram usage:        2 bytes
 20695 ;; Hardware stack levels used:    1
 20696 ;; Hardware stack levels required when called:    4
 20697 ;; This function calls:
 20698 ;;		_escreve_caractere_lcd
 20699 ;; This function is called by:
 20700 ;;		_mensagem_inicial
 20701 ;;		_SDCard
 20702 ;;		_escreve_inteiro_lcd
 20703 ;;		_rcvr_datablock
 20704 ;;		_disk_initialize
 20705 ;;		_gps
 20706 ;;		_inicializa_SPI
 20707 ;;		_leitura_chave
 20708 ;; This function uses a non-reentrant model
 20709 ;;
 20710                           
 20711                           	psect	text71
 20712  0056F0                     __ptext71:
 20713                           	opt stack 0
 20714  0056F0                     _escreve_frase_ram_lcd:
 20715                           	opt stack 25
 20716                           
 20717                           ;display_lcd.c: 447: while(*buffer)
 20718                           
 20719                           ;incstack = 0
 20720  0056F0  D014               	goto	l606
 20721  0056F2                     
 20722                           ;display_lcd.c: 448: {
 20723                           ;display_lcd.c: 449: escreve_caractere_lcd(*buffer);
 20724  0056F2  C01D  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 20725  0056F6  C01E  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 20726  0056FA  6AF8               	clrf	tblptru,c
 20727  0056FC  0E07               	movlw	(high __ramtop+-1)
 20728  0056FE  64F7               	cpfsgt	tblptrh,c
 20729  005700  D003               	bra	u13607
 20730  005702  0008               	tblrd		*
 20731  005704  50F5               	movf	tablat,w,c
 20732  005706  D005               	bra	u13600
 20733  005708                     u13607:
 20734  005708  CFF6 FFE9          	movff	tblptrl,fsr0l
 20735  00570C  CFF7 FFEA          	movff	tblptrh,fsr0h
 20736  005710  50EF               	movf	indf0,w,c
 20737  005712                     u13600:
 20738  005712  EC18  F02A         	call	_escreve_caractere_lcd
 20739                           
 20740                           ;display_lcd.c: 450: buffer++;
 20741  005716  4A1D               	infsnz	escreve_frase_ram_lcd@buffer,f,c
 20742  005718  2A1E               	incf	escreve_frase_ram_lcd@buffer+1,f,c
 20743  00571A                     l606:
 20744  00571A  C01D  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 20745  00571E  C01E  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 20746  005722  6AF8               	clrf	tblptru,c
 20747  005724  0E07               	movlw	(high __ramtop+-1)
 20748  005726  64F7               	cpfsgt	tblptrh,c
 20749  005728  D003               	bra	u13617
 20750  00572A  0008               	tblrd		*
 20751  00572C  50F5               	movf	tablat,w,c
 20752  00572E  D005               	bra	u13610
 20753  005730                     u13617:
 20754  005730  CFF6 FFE9          	movff	tblptrl,fsr0l
 20755  005734  CFF7 FFEA          	movff	tblptrh,fsr0h
 20756  005738  50EF               	movf	indf0,w,c
 20757  00573A                     u13610:
 20758  00573A  0900               	iorlw	0
 20759  00573C  B4D8               	btfsc	status,2,c
 20760  00573E  0012               	return	
 20761  005740  D7D8               	goto	l607
 20762  005742                     __end_of_escreve_frase_ram_lcd:
 20763                           	opt stack 0
 20764                           tosu	equ	0xFFF
 20765                           tosh	equ	0xFFE
 20766                           tosl	equ	0xFFD
 20767                           pclath	equ	0xFFA
 20768                           tblptru	equ	0xFF8
 20769                           tblptrh	equ	0xFF7
 20770                           tblptrl	equ	0xFF6
 20771                           tablat	equ	0xFF5
 20772                           prodh	equ	0xFF4
 20773                           prodl	equ	0xFF3
 20774                           intcon	equ	0xFF2
 20775                           intcon2	equ	0xFF1
 20776                           intcon3	equ	0xFF0
 20777                           indf0	equ	0xFEF
 20778                           postinc0	equ	0xFEE
 20779                           fsr0h	equ	0xFEA
 20780                           fsr0l	equ	0xFE9
 20781                           wreg	equ	0xFE8
 20782                           indf1	equ	0xFE7
 20783                           postinc1	equ	0xFE6
 20784                           postdec1	equ	0xFE5
 20785                           plusw1	equ	0xFE3
 20786                           fsr1h	equ	0xFE2
 20787                           fsr1l	equ	0xFE1
 20788                           indf2	equ	0xFDF
 20789                           postinc2	equ	0xFDE
 20790                           postdec2	equ	0xFDD
 20791                           plusw2	equ	0xFDB
 20792                           fsr2h	equ	0xFDA
 20793                           fsr2l	equ	0xFD9
 20794                           status	equ	0xFD8
 20795                           
 20796 ;; *************** function _escreve_caractere_lcd *****************
 20797 ;; Defined at:
 20798 ;;		line 323 in file "bibliotecas/display_lcd.c"
 20799 ;; Parameters:    Size  Location     Type
 20800 ;;  data            1    wreg     unsigned char 
 20801 ;; Auto vars:     Size  Location     Type
 20802 ;;  data            1   27[COMRAM] unsigned char 
 20803 ;; Return value:  Size  Location     Type
 20804 ;;                  1    wreg      void 
 20805 ;; Registers used:
 20806 ;;		wreg, status,2, status,0, cstack
 20807 ;; Tracked objects:
 20808 ;;		On entry : 0/0
 20809 ;;		On exit  : 0/0
 20810 ;;		Unchanged: 0/0
 20811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20812 ;;      Params:         0       0       0       0       0       0       0       0       0
 20813 ;;      Locals:         1       0       0       0       0       0       0       0       0
 20814 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20815 ;;      Totals:         1       0       0       0       0       0       0       0       0
 20816 ;;Total ram usage:        1 bytes
 20817 ;; Hardware stack levels used:    1
 20818 ;; Hardware stack levels required when called:    3
 20819 ;; This function calls:
 20820 ;;		_delay
 20821 ;; This function is called by:
 20822 ;;		_escreve_frase_ram_lcd
 20823 ;;		_escreve_float_lcd
 20824 ;;		_escreve_frase_lcd
 20825 ;;		_cria_caractere_lcd
 20826 ;; This function uses a non-reentrant model
 20827 ;;
 20828                           
 20829                           	psect	text72
 20830  005430                     __ptext72:
 20831                           	opt stack 0
 20832  005430                     _escreve_caractere_lcd:
 20833                           	opt stack 25
 20834                           
 20835                           ;incstack = 0
 20836                           ;escreve_caractere_lcd@data stored from wreg
 20837  005430  6E1C               	movwf	escreve_caractere_lcd@data,c
 20838                           
 20839                           ;display_lcd.c: 326: PORTDbits.RD2 = 0;
 20840  005432  9483               	bcf	3971,2,c	;volatile
 20841                           
 20842                           ;display_lcd.c: 327: PORTDbits.RD1 = 1;
 20843  005434  8283               	bsf	3971,1,c	;volatile
 20844                           
 20845                           ;display_lcd.c: 328: PORTDbits.RD0 = 0;
 20846  005436  9083               	bcf	3971,0,c	;volatile
 20847                           
 20848                           ;display_lcd.c: 331: if(data&0b00010000){PORTDbits.RD4=1;}
 20849  005438  A81C               	btfss	escreve_caractere_lcd@data,4,c
 20850  00543A  D002               	goto	l573
 20851  00543C  8883               	bsf	3971,4,c	;volatile
 20852  00543E  D001               	goto	l574
 20853  005440                     l573:
 20854                           
 20855                           ;display_lcd.c: 332: else {PORTDbits.RD4=0;}
 20856  005440  9883               	bcf	3971,4,c	;volatile
 20857  005442                     l574:
 20858                           
 20859                           ;display_lcd.c: 333: if(data&0b00100000){PORTDbits.RD5=1;}
 20860  005442  AA1C               	btfss	escreve_caractere_lcd@data,5,c
 20861  005444  D002               	goto	l575
 20862  005446  8A83               	bsf	3971,5,c	;volatile
 20863  005448  D001               	goto	l576
 20864  00544A                     l575:
 20865                           
 20866                           ;display_lcd.c: 334: else {PORTDbits.RD5=0;}
 20867  00544A  9A83               	bcf	3971,5,c	;volatile
 20868  00544C                     l576:
 20869                           
 20870                           ;display_lcd.c: 335: if(data&0b01000000){PORTDbits.RD6=1;}
 20871  00544C  AC1C               	btfss	escreve_caractere_lcd@data,6,c
 20872  00544E  D002               	goto	l577
 20873  005450  8C83               	bsf	3971,6,c	;volatile
 20874  005452  D001               	goto	l578
 20875  005454                     l577:
 20876                           
 20877                           ;display_lcd.c: 336: else {PORTDbits.RD6=0;}
 20878  005454  9C83               	bcf	3971,6,c	;volatile
 20879  005456                     l578:
 20880                           
 20881                           ;display_lcd.c: 337: if(data&0b10000000){PORTDbits.RD7=1;}
 20882  005456  AE1C               	btfss	escreve_caractere_lcd@data,7,c
 20883  005458  D002               	goto	l579
 20884  00545A  8E83               	bsf	3971,7,c	;volatile
 20885  00545C  D001               	goto	l580
 20886  00545E                     l579:
 20887                           
 20888                           ;display_lcd.c: 338: else {PORTDbits.RD7=0;}
 20889  00545E  9E83               	bcf	3971,7,c	;volatile
 20890  005460                     l580:
 20891                           
 20892                           ;display_lcd.c: 341: PORTDbits.RD0 = 1;
 20893  005460  8083               	bsf	3971,0,c	;volatile
 20894                           
 20895                           ;display_lcd.c: 342: delay();
 20896  005462  EC4F  F02D         	call	_delay	;wreg free
 20897                           
 20898                           ;display_lcd.c: 343: PORTDbits.RD0 = 0;
 20899  005466  9083               	bcf	3971,0,c	;volatile
 20900                           
 20901                           ;display_lcd.c: 344: delay();
 20902  005468  EC4F  F02D         	call	_delay	;wreg free
 20903                           
 20904                           ;display_lcd.c: 348: if(data&0b00000001){PORTDbits.RD4=1;}
 20905  00546C  A01C               	btfss	escreve_caractere_lcd@data,0,c
 20906  00546E  D002               	goto	l581
 20907  005470  8883               	bsf	3971,4,c	;volatile
 20908  005472  D001               	goto	l582
 20909  005474                     l581:
 20910                           
 20911                           ;display_lcd.c: 349: else {PORTDbits.RD4=0;}
 20912  005474  9883               	bcf	3971,4,c	;volatile
 20913  005476                     l582:
 20914                           
 20915                           ;display_lcd.c: 350: if(data&0b00000010){PORTDbits.RD5=1;}
 20916  005476  A21C               	btfss	escreve_caractere_lcd@data,1,c
 20917  005478  D002               	goto	l583
 20918  00547A  8A83               	bsf	3971,5,c	;volatile
 20919  00547C  D001               	goto	l584
 20920  00547E                     l583:
 20921                           
 20922                           ;display_lcd.c: 351: else {PORTDbits.RD5=0;}
 20923  00547E  9A83               	bcf	3971,5,c	;volatile
 20924  005480                     l584:
 20925                           
 20926                           ;display_lcd.c: 352: if(data&0b00000100){PORTDbits.RD6=1;}
 20927  005480  A41C               	btfss	escreve_caractere_lcd@data,2,c
 20928  005482  D002               	goto	l585
 20929  005484  8C83               	bsf	3971,6,c	;volatile
 20930  005486  D001               	goto	l586
 20931  005488                     l585:
 20932                           
 20933                           ;display_lcd.c: 353: else {PORTDbits.RD6=0;}
 20934  005488  9C83               	bcf	3971,6,c	;volatile
 20935  00548A                     l586:
 20936                           
 20937                           ;display_lcd.c: 354: if(data&0b00001000){PORTDbits.RD7=1;}
 20938  00548A  A61C               	btfss	escreve_caractere_lcd@data,3,c
 20939  00548C  D002               	goto	l587
 20940  00548E  8E83               	bsf	3971,7,c	;volatile
 20941  005490  D001               	goto	l588
 20942  005492                     l587:
 20943                           
 20944                           ;display_lcd.c: 355: else {PORTDbits.RD7=0;}
 20945  005492  9E83               	bcf	3971,7,c	;volatile
 20946  005494                     l588:
 20947                           
 20948                           ;display_lcd.c: 358: PORTDbits.RD0 = 1;
 20949  005494  8083               	bsf	3971,0,c	;volatile
 20950                           
 20951                           ;display_lcd.c: 359: delay();
 20952  005496  EC4F  F02D         	call	_delay	;wreg free
 20953                           
 20954                           ;display_lcd.c: 360: PORTDbits.RD0 = 0;
 20955  00549A  9083               	bcf	3971,0,c	;volatile
 20956                           
 20957                           ;display_lcd.c: 361: delay();
 20958  00549C  EC4F  F02D         	call	_delay	;wreg free
 20959  0054A0  0012               	return		;funcret
 20960  0054A2                     __end_of_escreve_caractere_lcd:
 20961                           	opt stack 0
 20962                           tosu	equ	0xFFF
 20963                           tosh	equ	0xFFE
 20964                           tosl	equ	0xFFD
 20965                           pclath	equ	0xFFA
 20966                           tblptru	equ	0xFF8
 20967                           tblptrh	equ	0xFF7
 20968                           tblptrl	equ	0xFF6
 20969                           tablat	equ	0xFF5
 20970                           prodh	equ	0xFF4
 20971                           prodl	equ	0xFF3
 20972                           intcon	equ	0xFF2
 20973                           intcon2	equ	0xFF1
 20974                           intcon3	equ	0xFF0
 20975                           indf0	equ	0xFEF
 20976                           postinc0	equ	0xFEE
 20977                           fsr0h	equ	0xFEA
 20978                           fsr0l	equ	0xFE9
 20979                           wreg	equ	0xFE8
 20980                           indf1	equ	0xFE7
 20981                           postinc1	equ	0xFE6
 20982                           postdec1	equ	0xFE5
 20983                           plusw1	equ	0xFE3
 20984                           fsr1h	equ	0xFE2
 20985                           fsr1l	equ	0xFE1
 20986                           indf2	equ	0xFDF
 20987                           postinc2	equ	0xFDE
 20988                           postdec2	equ	0xFDD
 20989                           plusw2	equ	0xFDB
 20990                           fsr2h	equ	0xFDA
 20991                           fsr2l	equ	0xFD9
 20992                           status	equ	0xFD8
 20993                           
 20994 ;; *************** function _dummy_clocks *****************
 20995 ;; Defined at:
 20996 ;;		line 66 in file "bibliotecas/SDCard.c"
 20997 ;; Parameters:    Size  Location     Type
 20998 ;;  n               1    wreg     unsigned char 
 20999 ;; Auto vars:     Size  Location     Type
 21000 ;;  n               1   29[COMRAM] unsigned char 
 21001 ;;  i               2   30[COMRAM] unsigned int 
 21002 ;; Return value:  Size  Location     Type
 21003 ;;                  1    wreg      void 
 21004 ;; Registers used:
 21005 ;;		wreg, status,2, status,0, cstack
 21006 ;; Tracked objects:
 21007 ;;		On entry : 0/0
 21008 ;;		On exit  : 0/0
 21009 ;;		Unchanged: 0/0
 21010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21011 ;;      Params:         0       0       0       0       0       0       0       0       0
 21012 ;;      Locals:         3       0       0       0       0       0       0       0       0
 21013 ;;      Temps:          2       0       0       0       0       0       0       0       0
 21014 ;;      Totals:         5       0       0       0       0       0       0       0       0
 21015 ;;Total ram usage:        5 bytes
 21016 ;; Hardware stack levels used:    1
 21017 ;; Hardware stack levels required when called:    3
 21018 ;; This function calls:
 21019 ;;		_escreve_dado_SPI
 21020 ;; This function is called by:
 21021 ;;		_disk_initialize
 21022 ;;		_disk_read
 21023 ;;		_disk_write
 21024 ;; This function uses a non-reentrant model
 21025 ;;
 21026                           
 21027                           	psect	text73
 21028  00591E                     __ptext73:
 21029                           	opt stack 0
 21030  00591E                     _dummy_clocks:
 21031                           	opt stack 22
 21032                           
 21033                           ;incstack = 0
 21034                           ;dummy_clocks@n stored from wreg
 21035  00591E  6E1E               	movwf	dummy_clocks@n,c
 21036                           
 21037                           ;SDCard.c: 68: unsigned int i;
 21038                           ;SDCard.c: 69: _delay((unsigned long)((1)*(48000000/4000.0)));
 21039  005920  0E10               	movlw	16
 21040  005922  6E1C               	movwf	??_dummy_clocks& (0+255),c
 21041  005924  0E94               	movlw	148
 21042  005926                     u19517:
 21043  005926  2EE8               	decfsz	wreg,f,c
 21044  005928  D7FE               	bra	u19517
 21045  00592A  2E1C               	decfsz	??_dummy_clocks& (0+255),f,c
 21046  00592C  D7FC               	bra	u19517
 21047  00592E  D000               	nop2	
 21048                           
 21049                           ;SDCard.c: 71: for(i=0;i<n;i++)
 21050  005930  0E00               	movlw	0
 21051  005932  6E20               	movwf	dummy_clocks@i+1,c
 21052  005934  0E00               	movlw	0
 21053  005936  6E1F               	movwf	dummy_clocks@i,c
 21054  005938  D007               	goto	l303
 21055  00593A                     l304:
 21056                           
 21057                           ;SDCard.c: 72: {
 21058                           ;SDCard.c: 73: LATBbits.LATB4 = 1;
 21059  00593A  888A               	bsf	3978,4,c	;volatile
 21060                           
 21061                           ;SDCard.c: 74: escreve_dado_SPI(0XFF);
 21062  00593C  0EFF               	movlw	255
 21063  00593E  EC0E  F02C         	call	_escreve_dado_SPI
 21064                           
 21065                           ;SDCard.c: 75: LATBbits.LATB4 = 0;
 21066  005942  988A               	bcf	3978,4,c	;volatile
 21067  005944  4A1F               	infsnz	dummy_clocks@i,f,c
 21068  005946  2A20               	incf	dummy_clocks@i+1,f,c
 21069  005948                     l303:
 21070  005948  501E               	movf	dummy_clocks@n,w,c
 21071  00594A  6E1C               	movwf	??_dummy_clocks& (0+255),c
 21072  00594C  6A1D               	clrf	(??_dummy_clocks+1)& (0+255),c
 21073  00594E  501C               	movf	??_dummy_clocks,w,c
 21074  005950  5C1F               	subwf	dummy_clocks@i,w,c
 21075  005952  501D               	movf	??_dummy_clocks+1,w,c
 21076  005954  5820               	subwfb	dummy_clocks@i+1,w,c
 21077  005956  B0D8               	btfsc	status,0,c
 21078  005958  0012               	return	
 21079  00595A  D7EF               	goto	l304
 21080  00595C                     __end_of_dummy_clocks:
 21081                           	opt stack 0
 21082                           tosu	equ	0xFFF
 21083                           tosh	equ	0xFFE
 21084                           tosl	equ	0xFFD
 21085                           pclath	equ	0xFFA
 21086                           tblptru	equ	0xFF8
 21087                           tblptrh	equ	0xFF7
 21088                           tblptrl	equ	0xFF6
 21089                           tablat	equ	0xFF5
 21090                           prodh	equ	0xFF4
 21091                           prodl	equ	0xFF3
 21092                           intcon	equ	0xFF2
 21093                           intcon2	equ	0xFF1
 21094                           intcon3	equ	0xFF0
 21095                           indf0	equ	0xFEF
 21096                           postinc0	equ	0xFEE
 21097                           fsr0h	equ	0xFEA
 21098                           fsr0l	equ	0xFE9
 21099                           wreg	equ	0xFE8
 21100                           indf1	equ	0xFE7
 21101                           postinc1	equ	0xFE6
 21102                           postdec1	equ	0xFE5
 21103                           plusw1	equ	0xFE3
 21104                           fsr1h	equ	0xFE2
 21105                           fsr1l	equ	0xFE1
 21106                           indf2	equ	0xFDF
 21107                           postinc2	equ	0xFDE
 21108                           postdec2	equ	0xFDD
 21109                           plusw2	equ	0xFDB
 21110                           fsr2h	equ	0xFDA
 21111                           fsr2l	equ	0xFD9
 21112                           status	equ	0xFD8
 21113                           
 21114 ;; *************** function _escreve_dado_SPI *****************
 21115 ;; Defined at:
 21116 ;;		line 67 in file "bibliotecas/SHRC.c"
 21117 ;; Parameters:    Size  Location     Type
 21118 ;;  data_to_shrc    1    wreg     unsigned char 
 21119 ;; Auto vars:     Size  Location     Type
 21120 ;;  data_to_shrc    1   26[COMRAM] unsigned char 
 21121 ;;  contador        1   25[COMRAM] unsigned char 
 21122 ;; Return value:  Size  Location     Type
 21123 ;;                  1    wreg      void 
 21124 ;; Registers used:
 21125 ;;		wreg, status,2, status,0
 21126 ;; Tracked objects:
 21127 ;;		On entry : 0/0
 21128 ;;		On exit  : 0/0
 21129 ;;		Unchanged: 0/0
 21130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21131 ;;      Params:         0       0       0       0       0       0       0       0       0
 21132 ;;      Locals:         2       0       0       0       0       0       0       0       0
 21133 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21134 ;;      Totals:         2       0       0       0       0       0       0       0       0
 21135 ;;Total ram usage:        2 bytes
 21136 ;; Hardware stack levels used:    1
 21137 ;; Hardware stack levels required when called:    2
 21138 ;; This function calls:
 21139 ;;		Nothing
 21140 ;; This function is called by:
 21141 ;;		_dummy_clocks
 21142 ;;		_proceed
 21143 ;;		_xmit_datablock
 21144 ;;		___send_cmd
 21145 ;;		_command
 21146 ;; This function uses a non-reentrant model
 21147 ;;
 21148                           
 21149                           	psect	text74
 21150  00581C                     __ptext74:
 21151                           	opt stack 0
 21152  00581C                     _escreve_dado_SPI:
 21153                           	opt stack 22
 21154                           
 21155                           ;incstack = 0
 21156                           ;escreve_dado_SPI@data_to_shrc stored from wreg
 21157  00581C  6E1B               	movwf	escreve_dado_SPI@data_to_shrc,c
 21158                           
 21159                           ;SHRC.c: 70: unsigned char contador=0;
 21160  00581E  0E00               	movlw	0
 21161  005820  6E1A               	movwf	escreve_dado_SPI@contador,c
 21162                           
 21163                           ;SHRC.c: 71: (INTCONbits.GIE = 0);
 21164  005822  9EF2               	bcf	intcon,7,c	;volatile
 21165                           
 21166                           ;SHRC.c: 73: while(contador<=7)
 21167  005824  D018               	goto	l342
 21168  005826                     
 21169                           ;SHRC.c: 74: {
 21170                           ;SHRC.c: 75: if((data_to_shrc & 0x80) == 0)
 21171  005826  BE1B               	btfsc	escreve_dado_SPI@data_to_shrc,7,c
 21172  005828  D002               	goto	l344
 21173                           
 21174                           ;SHRC.c: 76: {
 21175                           ;SHRC.c: 77: LATBbits.LATB7 = 0;
 21176  00582A  9E8A               	bcf	3978,7,c	;volatile
 21177                           
 21178                           ;SHRC.c: 78: }
 21179  00582C  D001               	goto	l345
 21180  00582E                     l344:
 21181                           
 21182                           ;SHRC.c: 79: else
 21183                           ;SHRC.c: 80: {
 21184                           ;SHRC.c: 81: LATBbits.LATB7 = 1;
 21185  00582E  8E8A               	bsf	3978,7,c	;volatile
 21186  005830                     l345:
 21187                           
 21188                           ;SHRC.c: 82: }
 21189                           ;SHRC.c: 83: data_to_shrc = data_to_shrc << 1;
 21190  005830  501B               	movf	escreve_dado_SPI@data_to_shrc,w,c
 21191  005832  241B               	addwf	escreve_dado_SPI@data_to_shrc,w,c
 21192  005834  6E1B               	movwf	escreve_dado_SPI@data_to_shrc,c
 21193                           
 21194                           ;SHRC.c: 84: _delay((unsigned long)((2)*(48000000/4000000.0)));
 21195  005836  0E08               	movlw	8
 21196  005838                     u19527:
 21197  005838  2EE8               	decfsz	wreg,f,c
 21198  00583A  D7FE               	bra	u19527
 21199                           
 21200                           ;SHRC.c: 85: LATBbits.LATB6 = 1;
 21201  00583C  8C8A               	bsf	3978,6,c	;volatile
 21202                           
 21203                           ;SHRC.c: 86: _delay((unsigned long)((2)*(48000000/4000000.0)));
 21204  00583E  0E08               	movlw	8
 21205  005840                     u19537:
 21206  005840  2EE8               	decfsz	wreg,f,c
 21207  005842  D7FE               	bra	u19537
 21208                           
 21209                           ;SHRC.c: 87: LATBbits.LATB7 = 0;
 21210  005844  9E8A               	bcf	3978,7,c	;volatile
 21211                           
 21212                           ;SHRC.c: 88: _delay((unsigned long)((2)*(48000000/4000000.0)));
 21213  005846  0E08               	movlw	8
 21214  005848                     u19547:
 21215  005848  2EE8               	decfsz	wreg,f,c
 21216  00584A  D7FE               	bra	u19547
 21217                           
 21218                           ;SHRC.c: 89: LATBbits.LATB6 = 0;
 21219  00584C  9C8A               	bcf	3978,6,c	;volatile
 21220                           
 21221                           ;SHRC.c: 90: _delay((unsigned long)((2)*(48000000/4000000.0)));
 21222  00584E  0E08               	movlw	8
 21223  005850                     u19557:
 21224  005850  2EE8               	decfsz	wreg,f,c
 21225  005852  D7FE               	bra	u19557
 21226                           
 21227                           ;SHRC.c: 91: contador++;
 21228  005854  2A1A               	incf	escreve_dado_SPI@contador,f,c
 21229  005856                     l342:
 21230  005856  0E07               	movlw	7
 21231  005858  641A               	cpfsgt	escreve_dado_SPI@contador,c
 21232  00585A  D7E5               	goto	l343
 21233                           
 21234                           ;SHRC.c: 92: }
 21235                           ;SHRC.c: 93: (INTCONbits.GIE = 1);
 21236  00585C  8EF2               	bsf	intcon,7,c	;volatile
 21237  00585E  0012               	return		;funcret
 21238  005860                     __end_of_escreve_dado_SPI:
 21239                           	opt stack 0
 21240                           tosu	equ	0xFFF
 21241                           tosh	equ	0xFFE
 21242                           tosl	equ	0xFFD
 21243                           pclath	equ	0xFFA
 21244                           tblptru	equ	0xFF8
 21245                           tblptrh	equ	0xFF7
 21246                           tblptrl	equ	0xFF6
 21247                           tablat	equ	0xFF5
 21248                           prodh	equ	0xFF4
 21249                           prodl	equ	0xFF3
 21250                           intcon	equ	0xFF2
 21251                           intcon2	equ	0xFF1
 21252                           intcon3	equ	0xFF0
 21253                           indf0	equ	0xFEF
 21254                           postinc0	equ	0xFEE
 21255                           fsr0h	equ	0xFEA
 21256                           fsr0l	equ	0xFE9
 21257                           wreg	equ	0xFE8
 21258                           indf1	equ	0xFE7
 21259                           postinc1	equ	0xFE6
 21260                           postdec1	equ	0xFE5
 21261                           plusw1	equ	0xFE3
 21262                           fsr1h	equ	0xFE2
 21263                           fsr1l	equ	0xFE1
 21264                           indf2	equ	0xFDF
 21265                           postinc2	equ	0xFDE
 21266                           postdec2	equ	0xFDD
 21267                           plusw2	equ	0xFDB
 21268                           fsr2h	equ	0xFDA
 21269                           fsr2l	equ	0xFD9
 21270                           status	equ	0xFD8
 21271                           
 21272 ;; *************** function _escreve_cmd_lcd *****************
 21273 ;; Defined at:
 21274 ;;		line 162 in file "bibliotecas/display_lcd.c"
 21275 ;; Parameters:    Size  Location     Type
 21276 ;;  comando         1    wreg     unsigned char 
 21277 ;; Auto vars:     Size  Location     Type
 21278 ;;  comando         1   27[COMRAM] unsigned char 
 21279 ;; Return value:  Size  Location     Type
 21280 ;;                  1    wreg      void 
 21281 ;; Registers used:
 21282 ;;		wreg, status,2, status,0, cstack
 21283 ;; Tracked objects:
 21284 ;;		On entry : 0/0
 21285 ;;		On exit  : 0/0
 21286 ;;		Unchanged: 0/0
 21287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21288 ;;      Params:         0       0       0       0       0       0       0       0       0
 21289 ;;      Locals:         1       0       0       0       0       0       0       0       0
 21290 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21291 ;;      Totals:         1       0       0       0       0       0       0       0       0
 21292 ;;Total ram usage:        1 bytes
 21293 ;; Hardware stack levels used:    1
 21294 ;; Hardware stack levels required when called:    3
 21295 ;; This function calls:
 21296 ;;		_delay
 21297 ;; This function is called by:
 21298 ;;		_mensagem_inicial
 21299 ;;		_SDCard
 21300 ;;		_init_lcd
 21301 ;;		_gps
 21302 ;;		_inicializa_SPI
 21303 ;;		_leitura_chave
 21304 ;;		_cria_caractere_lcd
 21305 ;; This function uses a non-reentrant model
 21306 ;;
 21307                           
 21308                           	psect	text75
 21309  005098                     __ptext75:
 21310                           	opt stack 0
 21311  005098                     _escreve_cmd_lcd:
 21312                           	opt stack 26
 21313                           
 21314                           ;incstack = 0
 21315                           ;escreve_cmd_lcd@comando stored from wreg
 21316  005098  6E1C               	movwf	escreve_cmd_lcd@comando,c
 21317                           
 21318                           ;display_lcd.c: 165: PORTDbits.RD2 = 0;
 21319  00509A  9483               	bcf	3971,2,c	;volatile
 21320                           
 21321                           ;display_lcd.c: 166: PORTDbits.RD1 = 0;
 21322  00509C  9283               	bcf	3971,1,c	;volatile
 21323                           
 21324                           ;display_lcd.c: 167: PORTDbits.RD0 = 0;
 21325  00509E  9083               	bcf	3971,0,c	;volatile
 21326                           
 21327                           ;display_lcd.c: 170: if(comando&0b00010000){PORTDbits.RD4=1;}
 21328  0050A0  A81C               	btfss	escreve_cmd_lcd@comando,4,c
 21329  0050A2  D002               	goto	l522
 21330  0050A4  8883               	bsf	3971,4,c	;volatile
 21331  0050A6  D001               	goto	l523
 21332  0050A8                     l522:
 21333                           
 21334                           ;display_lcd.c: 171: else {PORTDbits.RD4=0;}
 21335  0050A8  9883               	bcf	3971,4,c	;volatile
 21336  0050AA                     l523:
 21337                           
 21338                           ;display_lcd.c: 172: if(comando&0b00100000){PORTDbits.RD5=1;}
 21339  0050AA  AA1C               	btfss	escreve_cmd_lcd@comando,5,c
 21340  0050AC  D002               	goto	l524
 21341  0050AE  8A83               	bsf	3971,5,c	;volatile
 21342  0050B0  D001               	goto	l525
 21343  0050B2                     l524:
 21344                           
 21345                           ;display_lcd.c: 173: else {PORTDbits.RD5=0;}
 21346  0050B2  9A83               	bcf	3971,5,c	;volatile
 21347  0050B4                     l525:
 21348                           
 21349                           ;display_lcd.c: 174: if(comando&0b01000000){PORTDbits.RD6=1;}
 21350  0050B4  AC1C               	btfss	escreve_cmd_lcd@comando,6,c
 21351  0050B6  D002               	goto	l526
 21352  0050B8  8C83               	bsf	3971,6,c	;volatile
 21353  0050BA  D001               	goto	l527
 21354  0050BC                     l526:
 21355                           
 21356                           ;display_lcd.c: 175: else {PORTDbits.RD6=0;}
 21357  0050BC  9C83               	bcf	3971,6,c	;volatile
 21358  0050BE                     l527:
 21359                           
 21360                           ;display_lcd.c: 176: if(comando&0b10000000){PORTDbits.RD7=1;}
 21361  0050BE  AE1C               	btfss	escreve_cmd_lcd@comando,7,c
 21362  0050C0  D002               	goto	l528
 21363  0050C2  8E83               	bsf	3971,7,c	;volatile
 21364  0050C4  D001               	goto	l529
 21365  0050C6                     l528:
 21366                           
 21367                           ;display_lcd.c: 177: else {PORTDbits.RD7=0;}
 21368  0050C6  9E83               	bcf	3971,7,c	;volatile
 21369  0050C8                     l529:
 21370                           
 21371                           ;display_lcd.c: 180: PORTDbits.RD0 = 1;
 21372  0050C8  8083               	bsf	3971,0,c	;volatile
 21373                           
 21374                           ;display_lcd.c: 181: delay();
 21375  0050CA  EC4F  F02D         	call	_delay	;wreg free
 21376                           
 21377                           ;display_lcd.c: 182: PORTDbits.RD0 = 0;
 21378  0050CE  9083               	bcf	3971,0,c	;volatile
 21379                           
 21380                           ;display_lcd.c: 183: delay();
 21381  0050D0  EC4F  F02D         	call	_delay	;wreg free
 21382                           
 21383                           ;display_lcd.c: 186: if(comando&0b00000001){PORTDbits.RD4=1;}
 21384  0050D4  A01C               	btfss	escreve_cmd_lcd@comando,0,c
 21385  0050D6  D002               	goto	l530
 21386  0050D8  8883               	bsf	3971,4,c	;volatile
 21387  0050DA  D001               	goto	l531
 21388  0050DC                     l530:
 21389                           
 21390                           ;display_lcd.c: 187: else {PORTDbits.RD4=0;}
 21391  0050DC  9883               	bcf	3971,4,c	;volatile
 21392  0050DE                     l531:
 21393                           
 21394                           ;display_lcd.c: 188: if(comando&0b00000010){PORTDbits.RD5=1;}
 21395  0050DE  A21C               	btfss	escreve_cmd_lcd@comando,1,c
 21396  0050E0  D002               	goto	l532
 21397  0050E2  8A83               	bsf	3971,5,c	;volatile
 21398  0050E4  D001               	goto	l533
 21399  0050E6                     l532:
 21400                           
 21401                           ;display_lcd.c: 189: else {PORTDbits.RD5=0;}
 21402  0050E6  9A83               	bcf	3971,5,c	;volatile
 21403  0050E8                     l533:
 21404                           
 21405                           ;display_lcd.c: 190: if(comando&0b00000100){PORTDbits.RD6=1;}
 21406  0050E8  A41C               	btfss	escreve_cmd_lcd@comando,2,c
 21407  0050EA  D002               	goto	l534
 21408  0050EC  8C83               	bsf	3971,6,c	;volatile
 21409  0050EE  D001               	goto	l535
 21410  0050F0                     l534:
 21411                           
 21412                           ;display_lcd.c: 191: else {PORTDbits.RD6=0;}
 21413  0050F0  9C83               	bcf	3971,6,c	;volatile
 21414  0050F2                     l535:
 21415                           
 21416                           ;display_lcd.c: 192: if(comando&0b00001000){PORTDbits.RD7=1;}
 21417  0050F2  A61C               	btfss	escreve_cmd_lcd@comando,3,c
 21418  0050F4  D002               	goto	l536
 21419  0050F6  8E83               	bsf	3971,7,c	;volatile
 21420  0050F8  D001               	goto	l537
 21421  0050FA                     l536:
 21422                           
 21423                           ;display_lcd.c: 193: else {PORTDbits.RD7=0;}
 21424  0050FA  9E83               	bcf	3971,7,c	;volatile
 21425  0050FC                     l537:
 21426                           
 21427                           ;display_lcd.c: 196: PORTDbits.RD0 = 1;
 21428  0050FC  8083               	bsf	3971,0,c	;volatile
 21429                           
 21430                           ;display_lcd.c: 197: delay();
 21431  0050FE  EC4F  F02D         	call	_delay	;wreg free
 21432                           
 21433                           ;display_lcd.c: 198: PORTDbits.RD0 = 0;
 21434  005102  9083               	bcf	3971,0,c	;volatile
 21435                           
 21436                           ;display_lcd.c: 199: delay();
 21437  005104  EC4F  F02D         	call	_delay	;wreg free
 21438                           
 21439                           ;display_lcd.c: 204: if (comando==0x01 || comando==0x02 || comando==0x03)
 21440  005108  041C               	decf	escreve_cmd_lcd@comando,w,c
 21441  00510A  B4D8               	btfsc	status,2,c
 21442  00510C  D008               	goto	u17180
 21443  00510E  0E02               	movlw	2
 21444  005110  181C               	xorwf	escreve_cmd_lcd@comando,w,c
 21445  005112  B4D8               	btfsc	status,2,c
 21446  005114  D004               	goto	u17180
 21447  005116  0E03               	movlw	3
 21448  005118  181C               	xorwf	escreve_cmd_lcd@comando,w,c
 21449  00511A  A4D8               	btfss	status,2,c
 21450  00511C  0012               	return	
 21451  00511E                     u17180:
 21452                           
 21453                           ;display_lcd.c: 205: { delay(); }
 21454  00511E  EC4F  F02D         	call	_delay	;wreg free
 21455  005122  0012               	return	
 21456  005124                     __end_of_escreve_cmd_lcd:
 21457                           	opt stack 0
 21458                           tosu	equ	0xFFF
 21459                           tosh	equ	0xFFE
 21460                           tosl	equ	0xFFD
 21461                           pclath	equ	0xFFA
 21462                           tblptru	equ	0xFF8
 21463                           tblptrh	equ	0xFF7
 21464                           tblptrl	equ	0xFF6
 21465                           tablat	equ	0xFF5
 21466                           prodh	equ	0xFF4
 21467                           prodl	equ	0xFF3
 21468                           intcon	equ	0xFF2
 21469                           intcon2	equ	0xFF1
 21470                           intcon3	equ	0xFF0
 21471                           indf0	equ	0xFEF
 21472                           postinc0	equ	0xFEE
 21473                           fsr0h	equ	0xFEA
 21474                           fsr0l	equ	0xFE9
 21475                           wreg	equ	0xFE8
 21476                           indf1	equ	0xFE7
 21477                           postinc1	equ	0xFE6
 21478                           postdec1	equ	0xFE5
 21479                           plusw1	equ	0xFE3
 21480                           fsr1h	equ	0xFE2
 21481                           fsr1l	equ	0xFE1
 21482                           indf2	equ	0xFDF
 21483                           postinc2	equ	0xFDE
 21484                           postdec2	equ	0xFDD
 21485                           plusw2	equ	0xFDB
 21486                           fsr2h	equ	0xFDA
 21487                           fsr2l	equ	0xFD9
 21488                           status	equ	0xFD8
 21489                           
 21490 ;; *************** function _delay *****************
 21491 ;; Defined at:
 21492 ;;		line 45 in file "bibliotecas/display_lcd.c"
 21493 ;; Parameters:    Size  Location     Type
 21494 ;;		None
 21495 ;; Auto vars:     Size  Location     Type
 21496 ;;  contador_int    1   26[COMRAM] unsigned char 
 21497 ;;  contador_ext    1   25[COMRAM] unsigned char 
 21498 ;; Return value:  Size  Location     Type
 21499 ;;                  1    wreg      void 
 21500 ;; Registers used:
 21501 ;;		wreg, status,2, status,0
 21502 ;; Tracked objects:
 21503 ;;		On entry : 0/0
 21504 ;;		On exit  : 0/0
 21505 ;;		Unchanged: 0/0
 21506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21507 ;;      Params:         0       0       0       0       0       0       0       0       0
 21508 ;;      Locals:         2       0       0       0       0       0       0       0       0
 21509 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21510 ;;      Totals:         2       0       0       0       0       0       0       0       0
 21511 ;;Total ram usage:        2 bytes
 21512 ;; Hardware stack levels used:    1
 21513 ;; Hardware stack levels required when called:    2
 21514 ;; This function calls:
 21515 ;;		Nothing
 21516 ;; This function is called by:
 21517 ;;		_init_lcd
 21518 ;;		_escreve_cmd_lcd
 21519 ;;		_endereco_cursor_lcd
 21520 ;;		_escreve_caractere_lcd
 21521 ;; This function uses a non-reentrant model
 21522 ;;
 21523                           
 21524                           	psect	text76
 21525  005A9E                     __ptext76:
 21526                           	opt stack 0
 21527  005A9E                     _delay:
 21528                           	opt stack 25
 21529                           
 21530                           ;display_lcd.c: 47: unsigned char contador_ext, contador_int;
 21531                           ;display_lcd.c: 49: for(contador_ext = 0; contador_ext<100; contador_ext++)
 21532                           
 21533                           ;incstack = 0
 21534  005A9E  0E00               	movlw	0
 21535  005AA0  6E1A               	movwf	delay@contador_ext,c
 21536  005AA2                     l10385:
 21537  005AA2  0E63               	movlw	99
 21538  005AA4  641A               	cpfsgt	delay@contador_ext,c
 21539  005AA6  D001               	goto	l512
 21540  005AA8  0012               	return	
 21541  005AAA                     l512:
 21542                           
 21543                           ;display_lcd.c: 50: {
 21544                           ;display_lcd.c: 51: __nop();
 21545  005AAA  F000               	nop	
 21546                           
 21547                           ;display_lcd.c: 52: for(contador_int = 0; contador_int<50; contador_int++)
 21548  005AAC  0E00               	movlw	0
 21549  005AAE  6E1B               	movwf	delay@contador_int,c
 21550  005AB0                     l10391:
 21551  005AB0  0E31               	movlw	49
 21552  005AB2  641B               	cpfsgt	delay@contador_int,c
 21553  005AB4  D001               	goto	l514
 21554  005AB6  D003               	goto	u13380
 21555  005AB8                     l514:
 21556                           
 21557                           ;display_lcd.c: 53: {
 21558                           ;display_lcd.c: 54: __nop();
 21559  005AB8  F000               	nop	
 21560  005ABA  2A1B               	incf	delay@contador_int,f,c
 21561  005ABC  D7F9               	goto	l10391
 21562  005ABE                     u13380:
 21563  005ABE  2A1A               	incf	delay@contador_ext,f,c
 21564  005AC0  D7F0               	goto	l10385
 21565  005AC2                     __end_of_delay:
 21566                           	opt stack 0
 21567                           tosu	equ	0xFFF
 21568                           tosh	equ	0xFFE
 21569                           tosl	equ	0xFFD
 21570                           pclath	equ	0xFFA
 21571                           tblptru	equ	0xFF8
 21572                           tblptrh	equ	0xFF7
 21573                           tblptrl	equ	0xFF6
 21574                           tablat	equ	0xFF5
 21575                           prodh	equ	0xFF4
 21576                           prodl	equ	0xFF3
 21577                           intcon	equ	0xFF2
 21578                           intcon2	equ	0xFF1
 21579                           intcon3	equ	0xFF0
 21580                           indf0	equ	0xFEF
 21581                           postinc0	equ	0xFEE
 21582                           fsr0h	equ	0xFEA
 21583                           fsr0l	equ	0xFE9
 21584                           wreg	equ	0xFE8
 21585                           indf1	equ	0xFE7
 21586                           postinc1	equ	0xFE6
 21587                           postdec1	equ	0xFE5
 21588                           plusw1	equ	0xFE3
 21589                           fsr1h	equ	0xFE2
 21590                           fsr1l	equ	0xFE1
 21591                           indf2	equ	0xFDF
 21592                           postinc2	equ	0xFDE
 21593                           postdec2	equ	0xFDD
 21594                           plusw2	equ	0xFDB
 21595                           fsr2h	equ	0xFDA
 21596                           fsr2l	equ	0xFD9
 21597                           status	equ	0xFD8
 21598                           
 21599 ;; *************** function _isr *****************
 21600 ;; Defined at:
 21601 ;;		line 96 in file "main.c"
 21602 ;; Parameters:    Size  Location     Type
 21603 ;;		None
 21604 ;; Auto vars:     Size  Location     Type
 21605 ;;  cont            1   24[COMRAM] unsigned char 
 21606 ;; Return value:  Size  Location     Type
 21607 ;;                  1    wreg      void 
 21608 ;; Registers used:
 21609 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21610 ;; Tracked objects:
 21611 ;;		On entry : 0/0
 21612 ;;		On exit  : 0/0
 21613 ;;		Unchanged: 0/0
 21614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21615 ;;      Params:         0       0       0       0       0       0       0       0       0
 21616 ;;      Locals:         1       0       0       0       0       0       0       0       0
 21617 ;;      Temps:         20       0       0       0       0       0       0       0       0
 21618 ;;      Totals:        21       0       0       0       0       0       0       0       0
 21619 ;;Total ram usage:       21 bytes
 21620 ;; Hardware stack levels used:    1
 21621 ;; Hardware stack levels required when called:    1
 21622 ;; This function calls:
 21623 ;;		_recebe_dado_uart
 21624 ;;		_tratamento_uart
 21625 ;;		i2_write_timer_zero
 21626 ;; This function is called by:
 21627 ;;		Interrupt level 2
 21628 ;; This function uses a non-reentrant model
 21629 ;;
 21630                           
 21631                           	psect	intcode
 21632  000008                     __pintcode:
 21633                           	opt stack 0
 21634  000008                     _isr:
 21635                           	opt stack 12
 21636                           
 21637                           ;incstack = 0
 21638  000008  8246               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 21639  00000A  ED57  F021         	call	int_func,f	;refresh shadow registers
 21640                           tosu	equ	0xFFF
 21641                           tosh	equ	0xFFE
 21642                           tosl	equ	0xFFD
 21643                           pclath	equ	0xFFA
 21644                           tblptru	equ	0xFF8
 21645                           tblptrh	equ	0xFF7
 21646                           tblptrl	equ	0xFF6
 21647                           tablat	equ	0xFF5
 21648                           prodh	equ	0xFF4
 21649                           prodl	equ	0xFF3
 21650                           intcon	equ	0xFF2
 21651                           intcon2	equ	0xFF1
 21652                           intcon3	equ	0xFF0
 21653                           indf0	equ	0xFEF
 21654                           postinc0	equ	0xFEE
 21655                           fsr0h	equ	0xFEA
 21656                           fsr0l	equ	0xFE9
 21657                           wreg	equ	0xFE8
 21658                           indf1	equ	0xFE7
 21659                           postinc1	equ	0xFE6
 21660                           postdec1	equ	0xFE5
 21661                           plusw1	equ	0xFE3
 21662                           fsr1h	equ	0xFE2
 21663                           fsr1l	equ	0xFE1
 21664                           indf2	equ	0xFDF
 21665                           postinc2	equ	0xFDE
 21666                           postdec2	equ	0xFDD
 21667                           plusw2	equ	0xFDB
 21668                           fsr2h	equ	0xFDA
 21669                           fsr2l	equ	0xFD9
 21670                           status	equ	0xFD8
 21671                           
 21672                           	psect	intcode_body
 21673  0042AE                     __pintcode_body:
 21674                           	opt stack 12
 21675  0042AE                     int_func:
 21676                           	opt stack 12
 21677  0042AE  0006               	pop		; remove dummy address from shadow register refresh
 21678  0042B0  CFFA F007          	movff	pclath,??_isr+2
 21679  0042B4  CFFB F008          	movff	pclatu,??_isr+3
 21680  0042B8  CFE9 F009          	movff	fsr0l,??_isr+4
 21681  0042BC  CFEA F00A          	movff	fsr0h,??_isr+5
 21682  0042C0  CFE1 F00B          	movff	fsr1l,??_isr+6
 21683  0042C4  CFE2 F00C          	movff	fsr1h,??_isr+7
 21684  0042C8  CFD9 F00D          	movff	fsr2l,??_isr+8
 21685  0042CC  CFDA F00E          	movff	fsr2h,??_isr+9
 21686  0042D0  CFF3 F00F          	movff	prodl,??_isr+10
 21687  0042D4  CFF4 F010          	movff	prodh,??_isr+11
 21688  0042D8  CFF6 F011          	movff	tblptrl,??_isr+12
 21689  0042DC  CFF7 F012          	movff	tblptrh,??_isr+13
 21690  0042E0  CFF8 F013          	movff	tblptru,??_isr+14
 21691  0042E4  CFF5 F014          	movff	tablat,??_isr+15
 21692  0042E8  C046  F015         	movff	btemp,??_isr+16
 21693  0042EC  C047  F016         	movff	btemp+1,??_isr+17
 21694  0042F0  C048  F017         	movff	btemp+2,??_isr+18
 21695  0042F4  C049  F018         	movff	btemp+3,??_isr+19
 21696                           
 21697                           ;main.c: 98: unsigned char cont;
 21698                           ;main.c: 101: if (PIE1bits.RCIE && PIR1bits.RCIF)
 21699  0042F8  BA9D               	btfsc	3997,5,c	;volatile
 21700  0042FA  AA9E               	btfss	3998,5,c	;volatile
 21701  0042FC  D007               	goto	i2l65
 21702                           
 21703                           ;main.c: 102: {
 21704                           ;main.c: 103: data_uart_recebe = recebe_dado_uart();
 21705  0042FE  ECC4  F02D         	call	_recebe_dado_uart	;wreg free
 21706  004302  6E45               	movwf	_data_uart_recebe,c
 21707                           
 21708                           ;main.c: 104: PIR1bits.RCIF = 0;
 21709  004304  9A9E               	bcf	3998,5,c	;volatile
 21710                           
 21711                           ;main.c: 105: tratamento_uart(data_uart_recebe);
 21712  004306  5045               	movf	_data_uart_recebe,w,c
 21713  004308  ECEA  F021         	call	_tratamento_uart
 21714  00430C                     i2l65:
 21715                           
 21716                           ;main.c: 109: }
 21717                           ;main.c: 112: unsigned char cont;
 21718                           ;main.c: 114: if (TMR0IF && T0IF)
 21719  00430C  B4F2               	btfsc	intcon,2,c	;volatile
 21720  00430E  A4F2               	btfss	intcon,2,c	;volatile
 21721  004310  D037               	goto	i2l66
 21722                           
 21723                           ;main.c: 115: {
 21724                           ;main.c: 116: INTCONbits.TMR0IF = 0;
 21725  004312  94F2               	bcf	intcon,2,c	;volatile
 21726                           
 21727                           ;main.c: 117: sinaliza_int_timer = 1;
 21728  004314  0E01               	movlw	1
 21729  004316  6E44               	movwf	_sinaliza_int_timer,c
 21730                           
 21731                           ;main.c: 119: for(cont= 0; cont<2;cont++)
 21732  004318  0E00               	movlw	0
 21733  00431A  6E19               	movwf	isr@cont,c
 21734  00431C                     i2l9105:
 21735  00431C  0E01               	movlw	1
 21736  00431E  6419               	cpfsgt	isr@cont,c
 21737  004320  D001               	goto	i2l67
 21738  004322  D019               	goto	i2u1163_40
 21739  004324                     i2l67:
 21740                           
 21741                           ;main.c: 120: {
 21742                           ;main.c: 121: if(tempo_tarefa[cont]>0) tempo_tarefa[cont]--;
 21743  004324  5019               	movf	isr@cont,w,c
 21744  004326  0D02               	mullw	2
 21745  004328  0EEE               	movlw	low _tempo_tarefa
 21746  00432A  24F3               	addwf	prodl,w,c
 21747  00432C  6ED9               	movwf	fsr2l,c
 21748  00432E  0E00               	movlw	high _tempo_tarefa
 21749  004330  20F4               	addwfc	prodh,w,c
 21750  004332  6EDA               	movwf	fsr2h,c
 21751  004334  50DE               	movf	postinc2,w,c
 21752  004336  10DE               	iorwf	postinc2,w,c
 21753  004338  B4D8               	btfsc	status,2,c
 21754  00433A  D00B               	goto	i2l69
 21755  00433C  5019               	movf	isr@cont,w,c
 21756  00433E  0D02               	mullw	2
 21757  004340  0EEE               	movlw	low _tempo_tarefa
 21758  004342  24F3               	addwf	prodl,w,c
 21759  004344  6ED9               	movwf	fsr2l,c
 21760  004346  0E00               	movlw	high _tempo_tarefa
 21761  004348  20F4               	addwfc	prodh,w,c
 21762  00434A  6EDA               	movwf	fsr2h,c
 21763  00434C  06DE               	decf	postinc2,f,c
 21764  00434E  0E00               	movlw	0
 21765  004350  5ADD               	subwfb	postdec2,f,c
 21766  004352                     i2l69:
 21767  004352  2A19               	incf	isr@cont,f,c
 21768  004354  D7E3               	goto	i2l9105
 21769  004356                     i2u1163_40:
 21770                           
 21771                           ;main.c: 122: }
 21772                           ;main.c: 125: if(tarefa_em_execucao == 1)
 21773  004356  0443               	decf	_tarefa_em_execucao,w,c	;volatile
 21774  004358  A4D8               	btfss	status,2,c
 21775  00435A  D00C               	goto	i2l71
 21776                           
 21777                           ;main.c: 126: {
 21778                           ;main.c: 127: timeout_tarefa--;
 21779  00435C  0100               	movlb	0	; () banked
 21780  00435E  07FC               	decf	_timeout_tarefa& (0+255),f,b
 21781  004360  A0D8               	btfss	status,0,c
 21782  004362  07FD               	decf	(_timeout_tarefa+1)& (0+255),f,b
 21783                           
 21784                           ; BSR set to: 0
 21785                           ;main.c: 128: if(!timeout_tarefa)
 21786  004364  51FC               	movf	_timeout_tarefa& (0+255),w,b
 21787  004366  11FD               	iorwf	(_timeout_tarefa+1)& (0+255),w,b
 21788  004368  A4D8               	btfss	status,2,c
 21789  00436A  D004               	goto	i2l71
 21790                           
 21791                           ; BSR set to: 0
 21792                           ;main.c: 129: {
 21793                           ;main.c: 131: PCLATH = 0;
 21794  00436C  0E00               	movlw	0
 21795  00436E  6EFA               	movwf	pclath,c	;volatile
 21796                           
 21797                           ;main.c: 132: PCL = 0;
 21798  004370  0E00               	movlw	0
 21799  004372  6EF9               	movwf	pcl,c	;volatile
 21800  004374                     i2l71:
 21801                           
 21802                           ;main.c: 133: }
 21803                           ;main.c: 134: }
 21804                           ;main.c: 137: write_timer_zero(0x0083);
 21805                           
 21806                           ; BSR set to: 0
 21807                           
 21808                           ; BSR set to: 0
 21809  004374  0E00               	movlw	0
 21810  004376  6E02               	movwf	i2write_timer_zero@timer0+1,c
 21811  004378  0E83               	movlw	131
 21812  00437A  6E01               	movwf	i2write_timer_zero@timer0,c
 21813  00437C  ECBB  F02D         	call	i2_write_timer_zero	;wreg free
 21814  004380                     i2l66:
 21815                           
 21816                           ;main.c: 139: }
 21817                           ;main.c: 141: if (INT0IF && INT0IE)
 21818  004380  B2F2               	btfsc	intcon,1,c	;volatile
 21819  004382  A8F2               	btfss	intcon,4,c	;volatile
 21820  004384  D001               	goto	i2l72
 21821                           
 21822                           ;main.c: 142: {
 21823                           ;main.c: 143: INT0IF = 0;
 21824  004386  92F2               	bcf	intcon,1,c	;volatile
 21825  004388                     i2l72:
 21826  004388  C018  F049         	movff	??_isr+19,btemp+3
 21827  00438C  C017  F048         	movff	??_isr+18,btemp+2
 21828  004390  C016  F047         	movff	??_isr+17,btemp+1
 21829  004394  C015  F046         	movff	??_isr+16,btemp
 21830  004398  C014  FFF5         	movff	??_isr+15,tablat
 21831  00439C  C013  FFF8         	movff	??_isr+14,tblptru
 21832  0043A0  C012  FFF7         	movff	??_isr+13,tblptrh
 21833  0043A4  C011  FFF6         	movff	??_isr+12,tblptrl
 21834  0043A8  C010  FFF4         	movff	??_isr+11,prodh
 21835  0043AC  C00F  FFF3         	movff	??_isr+10,prodl
 21836  0043B0  C00E  FFDA         	movff	??_isr+9,fsr2h
 21837  0043B4  C00D  FFD9         	movff	??_isr+8,fsr2l
 21838  0043B8  C00C  FFE2         	movff	??_isr+7,fsr1h
 21839  0043BC  C00B  FFE1         	movff	??_isr+6,fsr1l
 21840  0043C0  C00A  FFEA         	movff	??_isr+5,fsr0h
 21841  0043C4  C009  FFE9         	movff	??_isr+4,fsr0l
 21842  0043C8  C008  FFFB         	movff	??_isr+3,pclatu
 21843  0043CC  C007  FFFA         	movff	??_isr+2,pclath
 21844  0043D0  9246               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 21845  0043D2  0011               	retfie		f
 21846  0043D4                     __end_of_isr:
 21847                           	opt stack 0
 21848                           tosu	equ	0xFFF
 21849                           tosh	equ	0xFFE
 21850                           tosl	equ	0xFFD
 21851                           pclatu	equ	0xFFB
 21852                           pclath	equ	0xFFA
 21853                           pcl	equ	0xFF9
 21854                           tblptru	equ	0xFF8
 21855                           tblptrh	equ	0xFF7
 21856                           tblptrl	equ	0xFF6
 21857                           tablat	equ	0xFF5
 21858                           prodh	equ	0xFF4
 21859                           prodl	equ	0xFF3
 21860                           intcon	equ	0xFF2
 21861                           intcon2	equ	0xFF1
 21862                           intcon3	equ	0xFF0
 21863                           indf0	equ	0xFEF
 21864                           postinc0	equ	0xFEE
 21865                           fsr0h	equ	0xFEA
 21866                           fsr0l	equ	0xFE9
 21867                           wreg	equ	0xFE8
 21868                           indf1	equ	0xFE7
 21869                           postinc1	equ	0xFE6
 21870                           postdec1	equ	0xFE5
 21871                           plusw1	equ	0xFE3
 21872                           fsr1h	equ	0xFE2
 21873                           fsr1l	equ	0xFE1
 21874                           indf2	equ	0xFDF
 21875                           postinc2	equ	0xFDE
 21876                           postdec2	equ	0xFDD
 21877                           plusw2	equ	0xFDB
 21878                           fsr2h	equ	0xFDA
 21879                           fsr2l	equ	0xFD9
 21880                           status	equ	0xFD8
 21881                           
 21882 ;; *************** function i2_write_timer_zero *****************
 21883 ;; Defined at:
 21884 ;;		line 138 in file "bibliotecas/hardware.c"
 21885 ;; Parameters:    Size  Location     Type
 21886 ;;  timer0          2    0[COMRAM] unsigned int 
 21887 ;; Auto vars:     Size  Location     Type
 21888 ;;  write_timer_    2    2[COMRAM] struct Timers
 21889 ;; Return value:  Size  Location     Type
 21890 ;;                  1    wreg      void 
 21891 ;; Registers used:
 21892 ;;		None
 21893 ;; Tracked objects:
 21894 ;;		On entry : 0/0
 21895 ;;		On exit  : 0/0
 21896 ;;		Unchanged: 0/0
 21897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21898 ;;      Params:         2       0       0       0       0       0       0       0       0
 21899 ;;      Locals:         2       0       0       0       0       0       0       0       0
 21900 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21901 ;;      Totals:         4       0       0       0       0       0       0       0       0
 21902 ;;Total ram usage:        4 bytes
 21903 ;; Hardware stack levels used:    1
 21904 ;; This function calls:
 21905 ;;		Nothing
 21906 ;; This function is called by:
 21907 ;;		_isr
 21908 ;; This function uses a non-reentrant model
 21909 ;;
 21910                           
 21911                           	psect	text78
 21912  005B76                     __ptext78:
 21913                           	opt stack 0
 21914  005B76                     i2_write_timer_zero:
 21915                           	opt stack 12
 21916                           
 21917                           ;hardware.c: 140: union Timers timer;
 21918                           ;hardware.c: 142: timer.lt = timer0;
 21919                           
 21920                           ;incstack = 0
 21921  005B76  C001  F003         	movff	i2write_timer_zero@timer0,i2write_timer_zero@timer
 21922  005B7A  C002  F004         	movff	i2write_timer_zero@timer0+1,i2write_timer_zero@timer+1
 21923                           
 21924                           ;hardware.c: 144: TMR0H = timer.bt[1];
 21925  005B7E  C004  FFD7         	movff	i2write_timer_zero@timer+1,4055	;volatile
 21926                           
 21927                           ;hardware.c: 145: TMR0L = timer.bt[0];
 21928  005B82  C003  FFD6         	movff	i2write_timer_zero@timer,4054	;volatile
 21929  005B86  0012               	return		;funcret
 21930  005B88                     __end_ofi2_write_timer_zero:
 21931                           	opt stack 0
 21932                           tosu	equ	0xFFF
 21933                           tosh	equ	0xFFE
 21934                           tosl	equ	0xFFD
 21935                           pclatu	equ	0xFFB
 21936                           pclath	equ	0xFFA
 21937                           pcl	equ	0xFF9
 21938                           tblptru	equ	0xFF8
 21939                           tblptrh	equ	0xFF7
 21940                           tblptrl	equ	0xFF6
 21941                           tablat	equ	0xFF5
 21942                           prodh	equ	0xFF4
 21943                           prodl	equ	0xFF3
 21944                           intcon	equ	0xFF2
 21945                           intcon2	equ	0xFF1
 21946                           intcon3	equ	0xFF0
 21947                           indf0	equ	0xFEF
 21948                           postinc0	equ	0xFEE
 21949                           fsr0h	equ	0xFEA
 21950                           fsr0l	equ	0xFE9
 21951                           wreg	equ	0xFE8
 21952                           indf1	equ	0xFE7
 21953                           postinc1	equ	0xFE6
 21954                           postdec1	equ	0xFE5
 21955                           plusw1	equ	0xFE3
 21956                           fsr1h	equ	0xFE2
 21957                           fsr1l	equ	0xFE1
 21958                           indf2	equ	0xFDF
 21959                           postinc2	equ	0xFDE
 21960                           postdec2	equ	0xFDD
 21961                           plusw2	equ	0xFDB
 21962                           fsr2h	equ	0xFDA
 21963                           fsr2l	equ	0xFD9
 21964                           status	equ	0xFD8
 21965                           
 21966 ;; *************** function _tratamento_uart *****************
 21967 ;; Defined at:
 21968 ;;		line 363 in file "bibliotecas/GPS.c"
 21969 ;; Parameters:    Size  Location     Type
 21970 ;;  received_cha    1    wreg     unsigned char 
 21971 ;; Auto vars:     Size  Location     Type
 21972 ;;  received_cha    1    0[COMRAM] unsigned char 
 21973 ;; Return value:  Size  Location     Type
 21974 ;;                  1    wreg      void 
 21975 ;; Registers used:
 21976 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 21977 ;; Tracked objects:
 21978 ;;		On entry : 0/0
 21979 ;;		On exit  : 0/0
 21980 ;;		Unchanged: 0/0
 21981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21982 ;;      Params:         0       0       0       0       0       0       0       0       0
 21983 ;;      Locals:         1       0       0       0       0       0       0       0       0
 21984 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21985 ;;      Totals:         1       0       0       0       0       0       0       0       0
 21986 ;;Total ram usage:        1 bytes
 21987 ;; Hardware stack levels used:    1
 21988 ;; This function calls:
 21989 ;;		Nothing
 21990 ;; This function is called by:
 21991 ;;		_isr
 21992 ;; This function uses a non-reentrant model
 21993 ;;
 21994                           
 21995                           	psect	text79
 21996  0043D4                     __ptext79:
 21997                           	opt stack 0
 21998  0043D4                     _tratamento_uart:
 21999                           	opt stack 12
 22000                           
 22001                           ;incstack = 0
 22002                           ;tratamento_uart@received_char stored from wreg
 22003  0043D4  6E01               	movwf	tratamento_uart@received_char,c
 22004                           
 22005                           ;GPS.c: 365: if(received_char =='$'){
 22006  0043D6  0E24               	movlw	36
 22007  0043D8  1801               	xorwf	tratamento_uart@received_char,w,c
 22008  0043DA  A4D8               	btfss	status,2,c
 22009  0043DC  D010               	goto	i2l204
 22010                           
 22011                           ;GPS.c: 366: gga_index = 0;
 22012  0043DE  0E00               	movlw	0
 22013  0043E0  6E37               	movwf	_gga_index+1,c	;volatile
 22014  0043E2  0E00               	movlw	0
 22015  0043E4  6E36               	movwf	_gga_index,c	;volatile
 22016                           
 22017                           ;GPS.c: 367: rmc_index = 0;
 22018  0043E6  0E00               	movlw	0
 22019  0043E8  6E35               	movwf	_rmc_index+1,c	;volatile
 22020  0043EA  0E00               	movlw	0
 22021  0043EC  6E34               	movwf	_rmc_index,c	;volatile
 22022                           
 22023                           ;GPS.c: 368: is_it_gga_string = 0;
 22024  0043EE  0E00               	movlw	0
 22025  0043F0  6E3E               	movwf	_is_it_gga_string,c	;volatile
 22026                           
 22027                           ;GPS.c: 369: is_it_rmc_string = 0;
 22028  0043F2  0E00               	movlw	0
 22029  0043F4  6E3D               	movwf	_is_it_rmc_string,c	;volatile
 22030                           
 22031                           ;GPS.c: 370: comma_counter_gga = 0;
 22032  0043F6  0E00               	movlw	0
 22033  0043F8  6E40               	movwf	_comma_counter_gga,c
 22034                           
 22035                           ;GPS.c: 371: comma_counter_rmc = 0;
 22036  0043FA  0E00               	movlw	0
 22037  0043FC  6E3F               	movwf	_comma_counter_rmc,c
 22038  0043FE                     i2l204:
 22039                           
 22040                           ;GPS.c: 372: }
 22041                           ;GPS.c: 374: if(is_it_gga_string == 1)
 22042  0043FE  043E               	decf	_is_it_gga_string,w,c	;volatile
 22043  004400  A4D8               	btfss	status,2,c
 22044  004402  D01A               	goto	i2l205
 22045                           
 22046                           ;GPS.c: 375: {
 22047                           ;GPS.c: 376: if(received_char == ',' )
 22048  004404  0E2C               	movlw	44
 22049  004406  1801               	xorwf	tratamento_uart@received_char,w,c
 22050  004408  A4D8               	btfss	status,2,c
 22051  00440A  D00B               	goto	i2l206
 22052                           
 22053                           ;GPS.c: 377: {
 22054                           ;GPS.c: 378: gga_pointers[comma_counter_gga++] = gga_index;
 22055  00440C  5040               	movf	_comma_counter_gga,w,c
 22056  00440E  0D01               	mullw	1
 22057  004410  0E3A               	movlw	low _gga_pointers
 22058  004412  24F3               	addwf	prodl,w,c
 22059  004414  6ED9               	movwf	fsr2l,c
 22060  004416  0E01               	movlw	high _gga_pointers
 22061  004418  20F4               	addwfc	prodh,w,c
 22062  00441A  6EDA               	movwf	fsr2h,c
 22063  00441C  C036  FFDF         	movff	_gga_index,indf2	;volatile
 22064  004420  2A40               	incf	_comma_counter_gga,f,c
 22065  004422                     i2l206:
 22066                           
 22067                           ;GPS.c: 379: }
 22068                           ;GPS.c: 380: gga_buffer[gga_index++] = received_char;
 22069  004422  0E00               	movlw	low _gga_buffer
 22070  004424  2436               	addwf	_gga_index,w,c	;volatile
 22071  004426  6ED9               	movwf	fsr2l,c
 22072  004428  0E02               	movlw	high _gga_buffer
 22073  00442A  2037               	addwfc	_gga_index+1,w,c	;volatile
 22074  00442C  6EDA               	movwf	fsr2h,c
 22075  00442E  C001  FFDF         	movff	tratamento_uart@received_char,indf2
 22076  004432  4A36               	infsnz	_gga_index,f,c	;volatile
 22077  004434  2A37               	incf	_gga_index+1,f,c	;volatile
 22078                           
 22079                           ;GPS.c: 381: }
 22080  004436  D01B               	goto	i2l209
 22081  004438                     i2l205:
 22082                           
 22083                           ;GPS.c: 382: else if(gga_code[0] == 'G' && gga_code[1] == 'G' && gga_code[2] == 'A'){
 22084  004438  0E47               	movlw	71
 22085  00443A  1831               	xorwf	_gga_code,w,c
 22086  00443C  A4D8               	btfss	status,2,c
 22087  00443E  D011               	goto	i2l208
 22088  004440  0E47               	movlw	71
 22089  004442  1832               	xorwf	_gga_code+1,w,c
 22090  004444  A4D8               	btfss	status,2,c
 22091  004446  D00D               	goto	i2l208
 22092  004448  0E41               	movlw	65
 22093  00444A  1833               	xorwf	_gga_code+2,w,c
 22094  00444C  A4D8               	btfss	status,2,c
 22095  00444E  D009               	goto	i2l208
 22096                           
 22097                           ;GPS.c: 383: is_it_gga_string = 1;
 22098  004450  0E01               	movlw	1
 22099  004452  6E3E               	movwf	_is_it_gga_string,c	;volatile
 22100                           
 22101                           ;GPS.c: 384: gga_code[0] = 0;
 22102  004454  0E00               	movlw	0
 22103  004456  6E31               	movwf	_gga_code,c
 22104                           
 22105                           ;GPS.c: 385: gga_code[1] = 0;
 22106  004458  0E00               	movlw	0
 22107  00445A  6E32               	movwf	_gga_code+1,c
 22108                           
 22109                           ;GPS.c: 386: gga_code[2] = 0;
 22110  00445C  0E00               	movlw	0
 22111  00445E  6E33               	movwf	_gga_code+2,c
 22112                           
 22113                           ;GPS.c: 387: }
 22114  004460  D006               	goto	i2l209
 22115  004462                     i2l208:
 22116                           
 22117                           ;GPS.c: 388: else{
 22118                           ;GPS.c: 389: gga_code[0] = gga_code[1];
 22119  004462  C032  F031         	movff	_gga_code+1,_gga_code
 22120                           
 22121                           ;GPS.c: 390: gga_code[1] = gga_code[2];
 22122  004466  C033  F032         	movff	_gga_code+2,_gga_code+1
 22123                           
 22124                           ;GPS.c: 391: gga_code[2] = received_char;
 22125  00446A  C001  F033         	movff	tratamento_uart@received_char,_gga_code+2
 22126  00446E                     i2l209:
 22127                           
 22128                           ;GPS.c: 392: }
 22129                           ;GPS.c: 394: if(is_it_rmc_string == 1)
 22130  00446E  043D               	decf	_is_it_rmc_string,w,c	;volatile
 22131  004470  A4D8               	btfss	status,2,c
 22132  004472  D01A               	goto	i2l210
 22133                           
 22134                           ;GPS.c: 395: {
 22135                           ;GPS.c: 396: if(received_char == ',' )
 22136  004474  0E2C               	movlw	44
 22137  004476  1801               	xorwf	tratamento_uart@received_char,w,c
 22138  004478  A4D8               	btfss	status,2,c
 22139  00447A  D00B               	goto	i2l211
 22140                           
 22141                           ;GPS.c: 397: {
 22142                           ;GPS.c: 398: rmc_pointers[comma_counter_rmc++] = rmc_index;
 22143  00447C  503F               	movf	_comma_counter_rmc,w,c
 22144  00447E  0D01               	mullw	1
 22145  004480  0E4E               	movlw	low _rmc_pointers
 22146  004482  24F3               	addwf	prodl,w,c
 22147  004484  6ED9               	movwf	fsr2l,c
 22148  004486  0E01               	movlw	high _rmc_pointers
 22149  004488  20F4               	addwfc	prodh,w,c
 22150  00448A  6EDA               	movwf	fsr2h,c
 22151  00448C  C034  FFDF         	movff	_rmc_index,indf2	;volatile
 22152  004490  2A3F               	incf	_comma_counter_rmc,f,c
 22153  004492                     i2l211:
 22154                           
 22155                           ;GPS.c: 399: }
 22156                           ;GPS.c: 400: rmc_buffer[rmc_index++] = received_char;
 22157  004492  0E50               	movlw	low _rmc_buffer
 22158  004494  2434               	addwf	_rmc_index,w,c	;volatile
 22159  004496  6ED9               	movwf	fsr2l,c
 22160  004498  0E02               	movlw	high _rmc_buffer
 22161  00449A  2035               	addwfc	_rmc_index+1,w,c	;volatile
 22162  00449C  6EDA               	movwf	fsr2h,c
 22163  00449E  C001  FFDF         	movff	tratamento_uart@received_char,indf2
 22164  0044A2  4A34               	infsnz	_rmc_index,f,c	;volatile
 22165  0044A4  2A35               	incf	_rmc_index+1,f,c	;volatile
 22166                           
 22167                           ;GPS.c: 401: }
 22168  0044A6  0012               	return	
 22169  0044A8                     i2l210:
 22170                           
 22171                           ;GPS.c: 402: else if(rmc_code[0] == 'R' && rmc_code[1] == 'M' && rmc_code[2] == 'C'){
 22172  0044A8  0E52               	movlw	82
 22173  0044AA  182E               	xorwf	_rmc_code,w,c
 22174  0044AC  A4D8               	btfss	status,2,c
 22175  0044AE  D011               	goto	i2l213
 22176  0044B0  0E4D               	movlw	77
 22177  0044B2  182F               	xorwf	_rmc_code+1,w,c
 22178  0044B4  A4D8               	btfss	status,2,c
 22179  0044B6  D00D               	goto	i2l213
 22180  0044B8  0E43               	movlw	67
 22181  0044BA  1830               	xorwf	_rmc_code+2,w,c
 22182  0044BC  A4D8               	btfss	status,2,c
 22183  0044BE  D009               	goto	i2l213
 22184                           
 22185                           ;GPS.c: 403: is_it_rmc_string = 1;
 22186  0044C0  0E01               	movlw	1
 22187  0044C2  6E3D               	movwf	_is_it_rmc_string,c	;volatile
 22188                           
 22189                           ;GPS.c: 404: rmc_code[0] = 0;
 22190  0044C4  0E00               	movlw	0
 22191  0044C6  6E2E               	movwf	_rmc_code,c
 22192                           
 22193                           ;GPS.c: 405: rmc_code[1] = 0;
 22194  0044C8  0E00               	movlw	0
 22195  0044CA  6E2F               	movwf	_rmc_code+1,c
 22196                           
 22197                           ;GPS.c: 406: rmc_code[2] = 0;
 22198  0044CC  0E00               	movlw	0
 22199  0044CE  6E30               	movwf	_rmc_code+2,c
 22200                           
 22201                           ;GPS.c: 407: }
 22202  0044D0  0012               	return	
 22203  0044D2                     i2l213:
 22204                           
 22205                           ;GPS.c: 408: else{
 22206                           ;GPS.c: 409: rmc_code[0] = rmc_code[1];
 22207  0044D2  C02F  F02E         	movff	_rmc_code+1,_rmc_code
 22208                           
 22209                           ;GPS.c: 410: rmc_code[1] = rmc_code[2];
 22210  0044D6  C030  F02F         	movff	_rmc_code+2,_rmc_code+1
 22211                           
 22212                           ;GPS.c: 411: rmc_code[2] = received_char;
 22213  0044DA  C001  F030         	movff	tratamento_uart@received_char,_rmc_code+2
 22214  0044DE  0012               	return	
 22215  0044E0                     __end_of_tratamento_uart:
 22216                           	opt stack 0
 22217                           tosu	equ	0xFFF
 22218                           tosh	equ	0xFFE
 22219                           tosl	equ	0xFFD
 22220                           pclatu	equ	0xFFB
 22221                           pclath	equ	0xFFA
 22222                           pcl	equ	0xFF9
 22223                           tblptru	equ	0xFF8
 22224                           tblptrh	equ	0xFF7
 22225                           tblptrl	equ	0xFF6
 22226                           tablat	equ	0xFF5
 22227                           prodh	equ	0xFF4
 22228                           prodl	equ	0xFF3
 22229                           intcon	equ	0xFF2
 22230                           intcon2	equ	0xFF1
 22231                           intcon3	equ	0xFF0
 22232                           indf0	equ	0xFEF
 22233                           postinc0	equ	0xFEE
 22234                           fsr0h	equ	0xFEA
 22235                           fsr0l	equ	0xFE9
 22236                           wreg	equ	0xFE8
 22237                           indf1	equ	0xFE7
 22238                           postinc1	equ	0xFE6
 22239                           postdec1	equ	0xFE5
 22240                           plusw1	equ	0xFE3
 22241                           fsr1h	equ	0xFE2
 22242                           fsr1l	equ	0xFE1
 22243                           indf2	equ	0xFDF
 22244                           postinc2	equ	0xFDE
 22245                           postdec2	equ	0xFDD
 22246                           plusw2	equ	0xFDB
 22247                           fsr2h	equ	0xFDA
 22248                           fsr2l	equ	0xFD9
 22249                           status	equ	0xFD8
 22250                           
 22251 ;; *************** function _recebe_dado_uart *****************
 22252 ;; Defined at:
 22253 ;;		line 138 in file "bibliotecas/uart.c"
 22254 ;; Parameters:    Size  Location     Type
 22255 ;;		None
 22256 ;; Auto vars:     Size  Location     Type
 22257 ;;		None
 22258 ;; Return value:  Size  Location     Type
 22259 ;;                  1    wreg      unsigned char 
 22260 ;; Registers used:
 22261 ;;		wreg, status,2
 22262 ;; Tracked objects:
 22263 ;;		On entry : 0/0
 22264 ;;		On exit  : 0/0
 22265 ;;		Unchanged: 0/0
 22266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22267 ;;      Params:         0       0       0       0       0       0       0       0       0
 22268 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22269 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22270 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22271 ;;Total ram usage:        0 bytes
 22272 ;; Hardware stack levels used:    1
 22273 ;; This function calls:
 22274 ;;		Nothing
 22275 ;; This function is called by:
 22276 ;;		_isr
 22277 ;;		_recebe_string_uart
 22278 ;; This function uses a non-reentrant model
 22279 ;;
 22280                           
 22281                           	psect	text80
 22282  005B88                     __ptext80:
 22283                           	opt stack 0
 22284  005B88                     _recebe_dado_uart:
 22285                           	opt stack 12
 22286                           
 22287                           ;uart.c: 140: while(RCIF==0);
 22288                           
 22289                           ;incstack = 0
 22290  005B88  AA9E               	btfss	3998,5,c	;volatile
 22291  005B8A  D7FE               	goto	_recebe_dado_uart
 22292                           
 22293                           ;uart.c: 141: if(RCSTAbits.OERR)
 22294  005B8C  A2AB               	btfss	4011,1,c	;volatile
 22295  005B8E  D003               	goto	i2l830
 22296                           
 22297                           ;uart.c: 142: {
 22298                           ;uart.c: 143: CREN = 0;
 22299  005B90  98AB               	bcf	4011,4,c	;volatile
 22300                           
 22301                           ;uart.c: 144: __nop();
 22302  005B92  F000               	nop	
 22303                           
 22304                           ;uart.c: 145: CREN=1;
 22305  005B94  88AB               	bsf	4011,4,c	;volatile
 22306  005B96                     i2l830:
 22307                           
 22308                           ;uart.c: 146: }
 22309                           ;uart.c: 147: return(RCREG);
 22310  005B96  50AE               	movf	4014,w,c	;volatile
 22311  005B98  0012               	return	
 22312  005B9A                     __end_of_recebe_dado_uart:
 22313                           	opt stack 0
 22314                           tosu	equ	0xFFF
 22315                           tosh	equ	0xFFE
 22316                           tosl	equ	0xFFD
 22317                           pclatu	equ	0xFFB
 22318                           pclath	equ	0xFFA
 22319                           pcl	equ	0xFF9
 22320                           tblptru	equ	0xFF8
 22321                           tblptrh	equ	0xFF7
 22322                           tblptrl	equ	0xFF6
 22323                           tablat	equ	0xFF5
 22324                           prodh	equ	0xFF4
 22325                           prodl	equ	0xFF3
 22326                           intcon	equ	0xFF2
 22327                           intcon2	equ	0xFF1
 22328                           intcon3	equ	0xFF0
 22329                           indf0	equ	0xFEF
 22330                           postinc0	equ	0xFEE
 22331                           fsr0h	equ	0xFEA
 22332                           fsr0l	equ	0xFE9
 22333                           wreg	equ	0xFE8
 22334                           indf1	equ	0xFE7
 22335                           postinc1	equ	0xFE6
 22336                           postdec1	equ	0xFE5
 22337                           plusw1	equ	0xFE3
 22338                           fsr1h	equ	0xFE2
 22339                           fsr1l	equ	0xFE1
 22340                           indf2	equ	0xFDF
 22341                           postinc2	equ	0xFDE
 22342                           postdec2	equ	0xFDD
 22343                           plusw2	equ	0xFDB
 22344                           fsr2h	equ	0xFDA
 22345                           fsr2l	equ	0xFD9
 22346                           status	equ	0xFD8
 22347                           tosu	equ	0xFFF
 22348                           tosh	equ	0xFFE
 22349                           tosl	equ	0xFFD
 22350                           pclatu	equ	0xFFB
 22351                           pclath	equ	0xFFA
 22352                           pcl	equ	0xFF9
 22353                           tblptru	equ	0xFF8
 22354                           tblptrh	equ	0xFF7
 22355                           tblptrl	equ	0xFF6
 22356                           tablat	equ	0xFF5
 22357                           prodh	equ	0xFF4
 22358                           prodl	equ	0xFF3
 22359                           intcon	equ	0xFF2
 22360                           intcon2	equ	0xFF1
 22361                           intcon3	equ	0xFF0
 22362                           indf0	equ	0xFEF
 22363                           postinc0	equ	0xFEE
 22364                           fsr0h	equ	0xFEA
 22365                           fsr0l	equ	0xFE9
 22366                           wreg	equ	0xFE8
 22367                           indf1	equ	0xFE7
 22368                           postinc1	equ	0xFE6
 22369                           postdec1	equ	0xFE5
 22370                           plusw1	equ	0xFE3
 22371                           fsr1h	equ	0xFE2
 22372                           fsr1l	equ	0xFE1
 22373                           indf2	equ	0xFDF
 22374                           postinc2	equ	0xFDE
 22375                           postdec2	equ	0xFDD
 22376                           plusw2	equ	0xFDB
 22377                           fsr2h	equ	0xFDA
 22378                           fsr2l	equ	0xFD9
 22379                           status	equ	0xFD8
 22380                           
 22381                           	psect	text81
 22382  000000                     __ptext81:
 22383                           	opt stack 0
 22384                           tosu	equ	0xFFF
 22385                           tosh	equ	0xFFE
 22386                           tosl	equ	0xFFD
 22387                           pclatu	equ	0xFFB
 22388                           pclath	equ	0xFFA
 22389                           pcl	equ	0xFF9
 22390                           tblptru	equ	0xFF8
 22391                           tblptrh	equ	0xFF7
 22392                           tblptrl	equ	0xFF6
 22393                           tablat	equ	0xFF5
 22394                           prodh	equ	0xFF4
 22395                           prodl	equ	0xFF3
 22396                           intcon	equ	0xFF2
 22397                           intcon2	equ	0xFF1
 22398                           intcon3	equ	0xFF0
 22399                           indf0	equ	0xFEF
 22400                           postinc0	equ	0xFEE
 22401                           fsr0h	equ	0xFEA
 22402                           fsr0l	equ	0xFE9
 22403                           wreg	equ	0xFE8
 22404                           indf1	equ	0xFE7
 22405                           postinc1	equ	0xFE6
 22406                           postdec1	equ	0xFE5
 22407                           plusw1	equ	0xFE3
 22408                           fsr1h	equ	0xFE2
 22409                           fsr1l	equ	0xFE1
 22410                           indf2	equ	0xFDF
 22411                           postinc2	equ	0xFDE
 22412                           postdec2	equ	0xFDD
 22413                           plusw2	equ	0xFDB
 22414                           fsr2h	equ	0xFDA
 22415                           fsr2l	equ	0xFD9
 22416                           status	equ	0xFD8
 22417                           
 22418                           	psect	rparam
 22419  0000                     tosu	equ	0xFFF
 22420                           tosh	equ	0xFFE
 22421                           tosl	equ	0xFFD
 22422                           pclatu	equ	0xFFB
 22423                           pclath	equ	0xFFA
 22424                           pcl	equ	0xFF9
 22425                           tblptru	equ	0xFF8
 22426                           tblptrh	equ	0xFF7
 22427                           tblptrl	equ	0xFF6
 22428                           tablat	equ	0xFF5
 22429                           prodh	equ	0xFF4
 22430                           prodl	equ	0xFF3
 22431                           intcon	equ	0xFF2
 22432                           intcon2	equ	0xFF1
 22433                           intcon3	equ	0xFF0
 22434                           indf0	equ	0xFEF
 22435                           postinc0	equ	0xFEE
 22436                           fsr0h	equ	0xFEA
 22437                           fsr0l	equ	0xFE9
 22438                           wreg	equ	0xFE8
 22439                           indf1	equ	0xFE7
 22440                           postinc1	equ	0xFE6
 22441                           postdec1	equ	0xFE5
 22442                           plusw1	equ	0xFE3
 22443                           fsr1h	equ	0xFE2
 22444                           fsr1l	equ	0xFE1
 22445                           indf2	equ	0xFDF
 22446                           postinc2	equ	0xFDE
 22447                           postdec2	equ	0xFDD
 22448                           plusw2	equ	0xFDB
 22449                           fsr2h	equ	0xFDA
 22450                           fsr2l	equ	0xFD9
 22451                           status	equ	0xFD8
 22452                           
 22453                           	psect	temp
 22454  000046                     btemp:
 22455                           	opt stack 0
 22456  000046                     	ds	1
 22457  0000                     int$flags	set	btemp
 22458  0000                     wtemp6	set	btemp+1
 22459                           tosu	equ	0xFFF
 22460                           tosh	equ	0xFFE
 22461                           tosl	equ	0xFFD
 22462                           pclatu	equ	0xFFB
 22463                           pclath	equ	0xFFA
 22464                           pcl	equ	0xFF9
 22465                           tblptru	equ	0xFF8
 22466                           tblptrh	equ	0xFF7
 22467                           tblptrl	equ	0xFF6
 22468                           tablat	equ	0xFF5
 22469                           prodh	equ	0xFF4
 22470                           prodl	equ	0xFF3
 22471                           intcon	equ	0xFF2
 22472                           intcon2	equ	0xFF1
 22473                           intcon3	equ	0xFF0
 22474                           indf0	equ	0xFEF
 22475                           postinc0	equ	0xFEE
 22476                           fsr0h	equ	0xFEA
 22477                           fsr0l	equ	0xFE9
 22478                           wreg	equ	0xFE8
 22479                           indf1	equ	0xFE7
 22480                           postinc1	equ	0xFE6
 22481                           postdec1	equ	0xFE5
 22482                           plusw1	equ	0xFE3
 22483                           fsr1h	equ	0xFE2
 22484                           fsr1l	equ	0xFE1
 22485                           indf2	equ	0xFDF
 22486                           postinc2	equ	0xFDE
 22487                           postdec2	equ	0xFDD
 22488                           plusw2	equ	0xFDB
 22489                           fsr2h	equ	0xFDA
 22490                           fsr2l	equ	0xFD9
 22491                           status	equ	0xFD8


Data Sizes:
    Strings     167
    Constant    203
    Data        30
    BSS         956
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     45      69
    BANK0           160    142     160
    BANK1           256     70     226
    BANK2           256      0     230
    BANK3           256     80      80
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    escalonador$4061	PTR FTN()void  size(2) Largest target is 1
		 -> SDCard(), 

    rd	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    utoa@buf	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    f_lseek@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    f_lseek@fp	PTR struct . size(2) Largest target is 34
		 -> SDCard@fil(BANK3[32]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    f_close@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    f_close@fp	PTR struct . size(2) Largest target is 34
		 -> SDCard@fil(BANK3[32]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    f_sync@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    f_sync@fp	PTR struct . size(2) Largest target is 34
		 -> SDCard@fil(BANK3[32]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    f_write@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    f_write@fp	PTR struct . size(2) Largest target is 34
		 -> SDCard@fil(BANK3[32]), 

    f_write@bw	PTR unsigned int  size(2) Largest target is 2
		 -> SDCard@bw(BANK3[2]), 

    f_write@buff	PTR const void  size(2) Largest target is 15
		 -> STR_14(CODE[15]), 

    f_write@wbuff	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_14(CODE[15]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    f_read@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    f_open@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    f_open@path	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_11(CODE[10]), STR_9(CODE[1]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    f_open@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    f_open@fp	PTR struct . size(2) Largest target is 34
		 -> SDCard@fil(BANK3[32]), 

    dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK3[12]), 

    dj.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    dj.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    f_mount@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    f_mount@cfs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    f_mount@path	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_11(CODE[10]), STR_9(CODE[1]), 

    f_mount@rp	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_11(CODE[10]), STR_9(CODE[1]), 

    validate@fil.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    validate@fil.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    validate@obj	PTR void  size(2) Largest target is 34
		 -> SDCard@fil(BANK3[32]), 

    validate@fil	PTR struct . size(2) Largest target is 34
		 -> SDCard@fil(BANK3[32]), 

    find_volume@pt	PTR unsigned char  size(2) Largest target is 558
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[558]), 

    FatFs	PTR struct .[1] size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    find_volume@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    find_volume@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK1[2]), f_mount@path(BANK0[2]), 

    find_volume@rfs	PTR PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK3[22]), f_mount@fs(BANK0[2]), 

    check_fs@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    get_ldnumber@tp	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_11(CODE[10]), STR_9(CODE[1]), 

    get_ldnumber@tt	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_11(CODE[10]), STR_9(CODE[1]), 

    get_ldnumber@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK1[2]), f_mount@path(BANK0[2]), f_mount@rp(BANK0[2]), 

    follow_path@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    follow_path@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK3[12]), 

    follow_path@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    follow_path@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    follow_path@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK3[22]), 

    follow_path@path	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_11(CODE[10]), STR_9(CODE[1]), 

    create_name@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK3[12]), 

    create_name@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    create_name@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    create_name@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK3[22]), 

    create_name@sfn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK3[12]), 

    create_name@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> follow_path@path(BANK1[2]), 

    create_name@p	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_11(CODE[10]), STR_9(CODE[1]), 

    dir_register@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK3[12]), 

    dir_register@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    dir_register@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    dir_register@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK3[22]), 

    dir_find@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    dir_find@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK3[12]), 

    dir_find@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    dir_find@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    dir_find@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK3[22]), 

    st_clust@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    ld_clust@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    ld_clust@dir	PTR const unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    dir_alloc@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK3[12]), 

    dir_alloc@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    dir_alloc@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    dir_alloc@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK3[22]), 

    dir_next@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK3[12]), 

    dir_next@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    dir_next@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    dir_next@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK3[22]), 

    S2328$fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK3[12]), 

    dir_sdi@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK3[12]), 

    S2328$dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    dir_sdi@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    S2328$fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    dir_sdi@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    dir_sdi@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK3[22]), 

    create_chain@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    remove_chain@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    put_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[558]), 

    put_fat@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    get_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[558]), 

    get_fat@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    clust2sect@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    sync_fs@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    move_window@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    sync_window@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    chk_chr@str	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_19(CODE[15]), 

    mem_cmp@src	PTR const void  size(2) Largest target is 12
		 -> f_open@sfn(BANK3[12]), 

    mem_cmp@s	PTR const unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK3[12]), 

    mem_cmp@dst	PTR const void  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    mem_cmp@d	PTR const unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    mem_set@dst	PTR void  size(2) Largest target is 558
		 -> f_open@sfn(BANK3[12]), NULL(NULL[0]), fs(BIGRAM[558]), 

    mem_set@d	PTR unsigned char  size(2) Largest target is 558
		 -> f_open@sfn(BANK3[12]), NULL(NULL[0]), fs(BIGRAM[558]), 

    mem_cpy@src	PTR const void  size(2) Largest target is 558
		 -> f_open@sfn(BANK3[12]), NULL(NULL[0]), STR_14(CODE[15]), fs(BIGRAM[558]), 

    mem_cpy@s	PTR const unsigned char  size(2) Largest target is 558
		 -> f_open@sfn(BANK3[12]), NULL(NULL[0]), STR_14(CODE[15]), fs(BIGRAM[558]), 

    mem_cpy@dst	PTR void  size(2) Largest target is 558
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[558]), 

    mem_cpy@d	PTR unsigned char  size(2) Largest target is 558
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[558]), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_ioctl@ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 558
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), STR_14(CODE[15]), fs(BIGRAM[558]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    xmit_datablock@buff	PTR const unsigned char  size(3) Largest target is 32767
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), ROM(CODE[32767]), STR_14(CODE[15]), 
		 -> fs(BIGRAM[558]), 

    rcvr_datablock@buff	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), disk_ioctl@csd(BANK0[16]), fs(BIGRAM[558]), 

    escreve_frase_ram_lcd@buffer	PTR unsigned char  size(2) Largest target is 2047
		 -> STR_18(CODE[6]), RAM(DATA[2047]), escreve_inteiro_lcd@texto(BANK0[7]), leitura_chave@pos_ignicao_on(COMRAM[17]), 
		 -> leitura_chave@pos_ignicao_crank(COMRAM[17]), leitura_chave@pos_ignicao_off(COMRAM[17]), STR_16(CODE[17]), STR_15(CODE[9]), 
		 -> STR_13(CODE[11]), STR_12(CODE[14]), STR_10(CODE[16]), STR_8(CODE[17]), 
		 -> STR_6(CODE[5]), STR_4(CODE[5]), gps@gps_buffer(COMRAM[15]), dado_buffer(BANK1[7]), 
		 -> STR_2(CODE[6]), data_buffer(BANK1[15]), STR_1(CODE[6]), mensagem_inicial@msg_dois(BANK0[17]), 
		 -> mensagem_inicial@msg_linha_um(BANK0[17]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    S654$dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    fil.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    S654$fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    fil.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    sp__memset	PTR void  size(2) Largest target is 15
		 -> gps@gps_buffer(COMRAM[15]), 

    p_tarefas	PTR FTN()void [2] size(2) Largest target is 1
		 -> SDCard(), 


Critical Paths under _main in COMRAM

    _mensagem_inicial->_posicao_cursor_lcd
    _init_lcd->_escreve_cmd_lcd
    _config_timer_zero->_write_timer_zero
    _SDCard->_escreve_inteiro_lcd
    _create_name->_mem_set
    _clust2sect->___lmul
    _validate->_disk_status
    _xmit_datablock->_wait_ready
    ___send_cmd->_escreve_inteiro_lcd
    _select->_wait_ready
    _wait_ready->_recebe_dado_SPI
    _response->_recebe_dado_SPI
    _proceed->_escreve_dado_SPI
    _escreve_inteiro_lcd->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _rcvr_datablock->_posicao_cursor_lcd
    _posicao_cursor_lcd->_endereco_cursor_lcd
    _endereco_cursor_lcd->_delay
    _escreve_frase_ram_lcd->_escreve_caractere_lcd
    _escreve_caractere_lcd->_delay
    _dummy_clocks->_escreve_dado_SPI
    _escreve_cmd_lcd->_delay

Critical Paths under _isr in COMRAM

    _isr->i2_write_timer_zero

Critical Paths under _main in BANK0

    _f_write->_create_chain
    _remove_chain->_put_fat
    _follow_path->_dir_find
    _dir_find->_dir_next
    _dir_register->_dir_alloc
    _dir_alloc->_dir_next
    _dir_sdi->_get_fat
    _dir_next->_create_chain
    _f_mount->_find_volume
    _find_volume->_check_fs
    _disk_initialize->_send_cmd
    _check_fs->_move_window
    _f_lseek->_create_chain
    _create_chain->_put_fat
    _put_fat->_move_window
    _get_fat->_move_window
    _f_close->_f_sync
    _f_sync->_sync_fs
    _sync_fs->_disk_ioctl
    _disk_ioctl->_send_cmd
    _move_window->_sync_window
    _sync_window->_disk_write
    _disk_write->_send_cmd
    _disk_read->_send_cmd
    _send_cmd->___send_cmd
    ___send_cmd->_escreve_inteiro_lcd
    _escreve_inteiro_lcd->_itoa

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_escalonador
    _SDCard->_f_open
    _f_open->_find_volume
    _follow_path->_dir_find
    _dir_register->_dir_alloc
    _f_mount->_find_volume

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _escalonador->_SDCard
    _SDCard->_f_open

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0 1367019
                        _escalonador
                    _inicializa_shrc
                 _inicializa_tarefas
                      _init_hardware
                           _init_lcd
             _leitura_chaves_sistema
                   _mensagem_inicial
 ---------------------------------------------------------------------------------
 (1) _mensagem_inicial                                    36    36      0    5923
                                             31 COMRAM     2     2      0
                                              0 BANK0     34    34      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _leitura_chaves_sistema                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0     613
                                             28 COMRAM     1     1      0
                              _delay
                    _escreve_cmd_lcd
 ---------------------------------------------------------------------------------
 (1) _init_hardware                                        0     0      0     195
                  _config_timer_dois
                  _config_timer_zero
                     _init_interrupt
                     _init_oscilador
                         _init_ports
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_oscilador                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _config_timer_zero                                    0     0      0     195
                   _write_timer_zero
 ---------------------------------------------------------------------------------
 (3) _write_timer_zero                                     4     2      2     195
                                             25 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _config_timer_dois                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_tarefas                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_shrc                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _escalonador                                          3     3      0 1360288
                                             67 BANK1      3     3      0
                             _SDCard *
 ---------------------------------------------------------------------------------
 (2) _SDCard                                              37    37      0 1360065
                                             45 BANK3     35    35      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                _escreve_inteiro_lcd
                            _f_close
                            _f_lseek
                            _f_mount
                             _f_open
                            _f_write
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _f_write                                             40    32      8  169752
                                            119 BANK0      8     0      8
                                              0 BANK1     32    32      0
                         _clust2sect
                       _create_chain
                         _disk_write
                            _mem_cpy
                        _move_window
                        _sync_window
                           _validate
 ---------------------------------------------------------------------------------
 (3) _f_open                                              54    49      5  823439
                                             58 BANK1      9     4      5
                                              0 BANK3     45    45      0
                       _dir_register
                        _find_volume
                        _follow_path
                           _ld_clust
                        _move_window
                       _remove_chain
                           _st_clust
 ---------------------------------------------------------------------------------
 (4) _remove_chain                                        15     9      6   87415
                                             96 BANK0     15     9      6
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (4) _follow_path                                          8     4      4  295098
                                              4 BANK1      8     4      4
                        _create_name
                           _dir_find
                            _dir_sdi
                           _ld_clust
 ---------------------------------------------------------------------------------
 (4) _ld_clust                                            14    10      4     670
                                             25 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (5) _dir_find                                             6     4      2  242915
                                            138 BANK0      2     0      2
                                              0 BANK1      4     4      0
                           _dir_next
                            _dir_sdi
                            _mem_cmp
                        _move_window
 ---------------------------------------------------------------------------------
 (6) _mem_cmp                                             15     9      6     468
                                             25 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (5) _create_name                                         23    19      4    3483
                                             33 COMRAM     8     4      4
                                              0 BANK0     15    15      0
                            _chk_chr
                            _mem_set
 ---------------------------------------------------------------------------------
 (6) _chk_chr                                              6     2      4     307
                                             25 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _dir_register                                         3     1      2  286636
                                              6 BANK1      3     1      2
                          _dir_alloc
                            _mem_cpy
                            _mem_set
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _mem_cpy                                             12     6      6    1619
                                             25 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (5) _dir_alloc                                           10     6      4  242475
                                            138 BANK0      4     0      4
                                              0 BANK1      6     6      0
                           _dir_next
                            _dir_sdi
                        _move_window
 ---------------------------------------------------------------------------------
 (5) _dir_sdi                                             21    17      4   47039
                                             95 BANK0     21    17      4
                         _clust2sect
                            _get_fat
 ---------------------------------------------------------------------------------
 (6) _dir_next                                            19    15      4  153909
                                            119 BANK0     19    15      4
                         _clust2sect
                       _create_chain
                            _get_fat
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (3) _f_mount                                             12     7      5  111008
                                             92 BANK0     12     7      5
                        _find_volume
                       _get_ldnumber
 ---------------------------------------------------------------------------------
 (4) _find_volume                                         71    66      5  109482
                                             79 BANK0     13     8      5
                                              0 BANK1     58    58      0
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                       _get_ldnumber
                        _move_window
 ---------------------------------------------------------------------------------
 (5) _get_ldnumber                                        14    12      2     737
                                             25 COMRAM    14    12      2
 ---------------------------------------------------------------------------------
 (5) _disk_initialize                                     14    14      0   19404
                                             27 BANK0     14    14      0
                           _deselect
                       _dummy_clocks
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                    _recebe_dado_SPI
                             _select
                           _send_cmd
 ---------------------------------------------------------------------------------
 (5) _check_fs                                            10     4      6   41503
                                             69 BANK0     10     4      6
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _f_lseek                                             35    29      6  139063
                                            119 BANK0     18    12      6
                                              0 BANK1     17    17      0
                            ___lldiv
                         _clust2sect
                       _create_chain
                            _get_fat
                           _validate
 ---------------------------------------------------------------------------------
 (4) _create_chain                                        23    17      6   88894
                                             96 BANK0     23    17      6
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (5) _put_fat                                             27    17     10   43402
                                             69 BANK0     27    17     10
                        _move_window
 ---------------------------------------------------------------------------------
 (5) _get_fat                                             26    20      6   43254
                                             69 BANK0     26    20      6
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _clust2sect                                          11     5      6    2170
                                             37 COMRAM     6     0      6
                                              0 BANK0      5     5      0
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     932
                                             25 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8    1525
                                             25 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _f_close                                              3     1      2  103164
                                             88 BANK0      3     1      2
                             _f_sync
                           _validate
 ---------------------------------------------------------------------------------
 (4) _f_sync                                               9     7      2  102205
                                             79 BANK0      9     7      2
                        _move_window
                           _st_clust
                            _sync_fs
                           _validate
 ---------------------------------------------------------------------------------
 (4) _validate                                             8     6      2     701
                                             26 COMRAM     8     6      2
                        _disk_status
 ---------------------------------------------------------------------------------
 (5) _disk_status                                          1     1      0      31
                                             25 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _sync_fs                                             11     9      2   59400
                                             68 BANK0     11     9      2
                         _disk_ioctl
                         _disk_write
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (7) _mem_set                                              8     2      6    1210
                                             25 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (6) _disk_ioctl                                          41    38      3   25275
                                             27 BANK0     41    38      3
                             ___wmul
                           _deselect
                     _rcvr_datablock
                    _recebe_dado_SPI
                             _select
                           _send_cmd
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4    3698
                                             25 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _st_clust                                             6     0      6     484
                                             25 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (4) _move_window                                         11     5      6   40926
                                             58 BANK0     11     5      6
                          _disk_read
                        _sync_window
 ---------------------------------------------------------------------------------
 (4) _sync_window                                         21    19      2   16642
                                             37 BANK0     21    19      2
                         _disk_write
 ---------------------------------------------------------------------------------
 (5) _disk_write                                          10     2      8   15557
                                             27 BANK0     10     2      8
                           _deselect
                       _dummy_clocks
                           _send_cmd
                     _xmit_datablock
 ---------------------------------------------------------------------------------
 (6) _xmit_datablock                                       7     3      4    1010
                                             30 COMRAM     7     3      4
                   _escreve_dado_SPI
                    _recebe_dado_SPI
                         _wait_ready
 ---------------------------------------------------------------------------------
 (5) _disk_read                                           12     4      8   20902
                                             27 BANK0     12     4      8
                           _deselect
                       _dummy_clocks
                     _rcvr_datablock
                           _send_cmd
 ---------------------------------------------------------------------------------
 (6) _send_cmd                                             6     2      4   12975
                                             21 BANK0      6     2      4
                         ___send_cmd
 ---------------------------------------------------------------------------------
 (7) ___send_cmd                                           8     4      4   11104
                                             13 BANK0      8     4      4
                           _deselect
                   _escreve_dado_SPI
                _escreve_inteiro_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
                             _select
 ---------------------------------------------------------------------------------
 (8) _select                                               0     0      0     136
                           _deselect
                         _wait_ready
 ---------------------------------------------------------------------------------
 (7) _wait_ready                                           2     2      0     136
                                             28 COMRAM     2     2      0
                    _recebe_dado_SPI
 ---------------------------------------------------------------------------------
 (9) _deselect                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _response                                             1     1      0     102
                                             28 COMRAM     1     1      0
                    _recebe_dado_SPI
 ---------------------------------------------------------------------------------
 (8) _proceed                                              0     0      0     102
                   _escreve_dado_SPI
 ---------------------------------------------------------------------------------
 (8) _escreve_inteiro_lcd                                  9     7      2    7025
                                             43 COMRAM     2     0      2
                                              6 BANK0      7     7      0
              _escreve_frase_ram_lcd
                               _itoa
 ---------------------------------------------------------------------------------
 (9) _itoa                                                 8     2      6    3936
                                             41 COMRAM     2     2      0
                                              0 BANK0      6     0      6
                               _utoa
 ---------------------------------------------------------------------------------
 (10) _utoa                                                9     3      6    3163
                                             32 COMRAM     9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (11) ___lwmod                                             5     1      4    1132
                                             25 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) ___lwdiv                                             7     3      4    1321
                                             25 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) _rcvr_datablock                                       9     5      4    6892
                                             31 COMRAM     9     5      4
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                    _recebe_dado_SPI
 ---------------------------------------------------------------------------------
 (8) _recebe_dado_SPI                                      3     3      0      68
                                             25 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _posicao_cursor_lcd                                   3     2      1    2937
                                             28 COMRAM     3     2      1
                _endereco_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _endereco_cursor_lcd                                  1     1      0     353
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _escreve_frase_ram_lcd                                2     0      2    2429
                                             28 COMRAM     2     0      2
              _escreve_caractere_lcd
 ---------------------------------------------------------------------------------
 (3) _escreve_caractere_lcd                                1     1      0     384
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (6) _dummy_clocks                                         5     5      0     170
                                             27 COMRAM     5     5      0
                   _escreve_dado_SPI
 ---------------------------------------------------------------------------------
 (7) _escreve_dado_SPI                                     2     2      0     102
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _escreve_cmd_lcd                                      1     1      0     477
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                2     2      0     136
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (18) _isr                                                21    21      0     337
                                              4 COMRAM    21    21      0
                   _recebe_dado_uart
                    _tratamento_uart
                 i2_write_timer_zero
 ---------------------------------------------------------------------------------
 (19) i2_write_timer_zero                                  4     2      2      93
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (19) _tratamento_uart                                     1     1      0     154
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (19) _recebe_dado_uart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 19
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _escalonador
     _SDCard *
       _escreve_cmd_lcd
         _delay
       _escreve_frase_ram_lcd
         _escreve_caractere_lcd
           _delay
       _escreve_inteiro_lcd
         _escreve_frase_ram_lcd
           _escreve_caractere_lcd
             _delay
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
       _f_close
         _f_sync
           _move_window
             _disk_read
               _deselect
               _dummy_clocks
                 _escreve_dado_SPI
               _rcvr_datablock
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _recebe_dado_SPI
               _send_cmd
                 ___send_cmd
                   _deselect
                   _escreve_dado_SPI
                   _escreve_inteiro_lcd
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _itoa
                       _utoa
                         ___lwdiv
                         ___lwmod
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
                   _select
                     _deselect
                     _wait_ready
                       _recebe_dado_SPI
             _sync_window
               _disk_write
                 _deselect
                 _dummy_clocks
                   _escreve_dado_SPI
                 _send_cmd
                   ___send_cmd
                     _deselect
                     _escreve_dado_SPI
                     _escreve_inteiro_lcd
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _itoa
                         _utoa
                           ___lwdiv
                           ___lwmod
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
                     _select
                       _deselect
                       _wait_ready
                         _recebe_dado_SPI
                 _xmit_datablock
                   _escreve_dado_SPI
                   _recebe_dado_SPI
                   _wait_ready
                     _recebe_dado_SPI
           _st_clust
           _sync_fs
             _disk_ioctl
               ___wmul
               _deselect
               _rcvr_datablock
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _recebe_dado_SPI
               _recebe_dado_SPI
               _select
                 _deselect
                 _wait_ready
                   _recebe_dado_SPI
               _send_cmd
                 ___send_cmd
                   _deselect
                   _escreve_dado_SPI
                   _escreve_inteiro_lcd
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _itoa
                       _utoa
                         ___lwdiv
                         ___lwmod
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
                   _select
                     _deselect
                     _wait_ready
                       _recebe_dado_SPI
             _disk_write
               _deselect
               _dummy_clocks
                 _escreve_dado_SPI
               _send_cmd
                 ___send_cmd
                   _deselect
                   _escreve_dado_SPI
                   _escreve_inteiro_lcd
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _itoa
                       _utoa
                         ___lwdiv
                         ___lwmod
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
                   _select
                     _deselect
                     _wait_ready
                       _recebe_dado_SPI
               _xmit_datablock
                 _escreve_dado_SPI
                 _recebe_dado_SPI
                 _wait_ready
                   _recebe_dado_SPI
             _mem_set
             _sync_window
               _disk_write
                 _deselect
                 _dummy_clocks
                   _escreve_dado_SPI
                 _send_cmd
                   ___send_cmd
                     _deselect
                     _escreve_dado_SPI
                     _escreve_inteiro_lcd
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _itoa
                         _utoa
                           ___lwdiv
                           ___lwmod
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
                     _select
                       _deselect
                       _wait_ready
                         _recebe_dado_SPI
                 _xmit_datablock
                   _escreve_dado_SPI
                   _recebe_dado_SPI
                   _wait_ready
                     _recebe_dado_SPI
           _validate
             _disk_status
         _validate
           _disk_status
       _f_lseek
         ___lldiv
         _clust2sect
           ___lmul
         _create_chain
           _get_fat
             _move_window
               _disk_read
                 _deselect
                 _dummy_clocks
                   _escreve_dado_SPI
                 _rcvr_datablock
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _recebe_dado_SPI
                 _send_cmd
                   ___send_cmd
                     _deselect
                     _escreve_dado_SPI
                     _escreve_inteiro_lcd
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _itoa
                         _utoa
                           ___lwdiv
                           ___lwmod
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
                     _select
                       _deselect
                       _wait_ready
                         _recebe_dado_SPI
               _sync_window
                 _disk_write
                   _deselect
                   _dummy_clocks
                     _escreve_dado_SPI
                   _send_cmd
                     ___send_cmd
                       _deselect
                       _escreve_dado_SPI
                       _escreve_inteiro_lcd
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _itoa
                           _utoa
                             ___lwdiv
                             ___lwmod
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _proceed
                         _escreve_dado_SPI
                       _response
                         _recebe_dado_SPI
                       _select
                         _deselect
                         _wait_ready
                           _recebe_dado_SPI
                   _xmit_datablock
                     _escreve_dado_SPI
                     _recebe_dado_SPI
                     _wait_ready
                       _recebe_dado_SPI
           _put_fat
             _move_window
               _disk_read
                 _deselect
                 _dummy_clocks
                   _escreve_dado_SPI
                 _rcvr_datablock
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _recebe_dado_SPI
                 _send_cmd
                   ___send_cmd
                     _deselect
                     _escreve_dado_SPI
                     _escreve_inteiro_lcd
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _itoa
                         _utoa
                           ___lwdiv
                           ___lwmod
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
                     _select
                       _deselect
                       _wait_ready
                         _recebe_dado_SPI
               _sync_window
                 _disk_write
                   _deselect
                   _dummy_clocks
                     _escreve_dado_SPI
                   _send_cmd
                     ___send_cmd
                       _deselect
                       _escreve_dado_SPI
                       _escreve_inteiro_lcd
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _itoa
                           _utoa
                             ___lwdiv
                             ___lwmod
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _proceed
                         _escreve_dado_SPI
                       _response
                         _recebe_dado_SPI
                       _select
                         _deselect
                         _wait_ready
                           _recebe_dado_SPI
                   _xmit_datablock
                     _escreve_dado_SPI
                     _recebe_dado_SPI
                     _wait_ready
                       _recebe_dado_SPI
         _get_fat
           _move_window
             _disk_read
               _deselect
               _dummy_clocks
                 _escreve_dado_SPI
               _rcvr_datablock
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _recebe_dado_SPI
               _send_cmd
                 ___send_cmd
                   _deselect
                   _escreve_dado_SPI
                   _escreve_inteiro_lcd
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _itoa
                       _utoa
                         ___lwdiv
                         ___lwmod
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
                   _select
                     _deselect
                     _wait_ready
                       _recebe_dado_SPI
             _sync_window
               _disk_write
                 _deselect
                 _dummy_clocks
                   _escreve_dado_SPI
                 _send_cmd
                   ___send_cmd
                     _deselect
                     _escreve_dado_SPI
                     _escreve_inteiro_lcd
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _itoa
                         _utoa
                           ___lwdiv
                           ___lwmod
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
                     _select
                       _deselect
                       _wait_ready
                         _recebe_dado_SPI
                 _xmit_datablock
                   _escreve_dado_SPI
                   _recebe_dado_SPI
                   _wait_ready
                     _recebe_dado_SPI
         _validate
           _disk_status
       _f_mount
         _find_volume
           ___lldiv
           ___lmul
           _check_fs
             _move_window
               _disk_read
                 _deselect
                 _dummy_clocks
                   _escreve_dado_SPI
                 _rcvr_datablock
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _recebe_dado_SPI
                 _send_cmd
                   ___send_cmd
                     _deselect
                     _escreve_dado_SPI
                     _escreve_inteiro_lcd
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _itoa
                         _utoa
                           ___lwdiv
                           ___lwmod
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
                     _select
                       _deselect
                       _wait_ready
                         _recebe_dado_SPI
               _sync_window
                 _disk_write
                   _deselect
                   _dummy_clocks
                     _escreve_dado_SPI
                   _send_cmd
                     ___send_cmd
                       _deselect
                       _escreve_dado_SPI
                       _escreve_inteiro_lcd
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _itoa
                           _utoa
                             ___lwdiv
                             ___lwmod
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _proceed
                         _escreve_dado_SPI
                       _response
                         _recebe_dado_SPI
                       _select
                         _deselect
                         _wait_ready
                           _recebe_dado_SPI
                   _xmit_datablock
                     _escreve_dado_SPI
                     _recebe_dado_SPI
                     _wait_ready
                       _recebe_dado_SPI
           _disk_initialize
             _deselect
             _dummy_clocks
               _escreve_dado_SPI
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _recebe_dado_SPI
             _select
               _deselect
               _wait_ready
                 _recebe_dado_SPI
             _send_cmd
               ___send_cmd
                 _deselect
                 _escreve_dado_SPI
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_dado_SPI
                 _response
                   _recebe_dado_SPI
                 _select
                   _deselect
                   _wait_ready
                     _recebe_dado_SPI
           _disk_status
           _get_ldnumber
           _move_window
             _disk_read
               _deselect
               _dummy_clocks
                 _escreve_dado_SPI
               _rcvr_datablock
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _recebe_dado_SPI
               _send_cmd
                 ___send_cmd
                   _deselect
                   _escreve_dado_SPI
                   _escreve_inteiro_lcd
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _itoa
                       _utoa
                         ___lwdiv
                         ___lwmod
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
                   _select
                     _deselect
                     _wait_ready
                       _recebe_dado_SPI
             _sync_window
               _disk_write
                 _deselect
                 _dummy_clocks
                   _escreve_dado_SPI
                 _send_cmd
                   ___send_cmd
                     _deselect
                     _escreve_dado_SPI
                     _escreve_inteiro_lcd
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _itoa
                         _utoa
                           ___lwdiv
                           ___lwmod
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
                     _select
                       _deselect
                       _wait_ready
                         _recebe_dado_SPI
                 _xmit_datablock
                   _escreve_dado_SPI
                   _recebe_dado_SPI
                   _wait_ready
                     _recebe_dado_SPI
         _get_ldnumber
       _f_open
         _dir_register
           _dir_alloc
             _dir_next
               _clust2sect
                 ___lmul
               _create_chain
                 _get_fat
                   _move_window
                     _disk_read
                       _deselect
                       _dummy_clocks
                         _escreve_dado_SPI
                       _rcvr_datablock
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _posicao_cursor_lcd
                           _endereco_cursor_lcd
                             _delay
                         _recebe_dado_SPI
                       _send_cmd
                         ___send_cmd
                           _deselect
                           _escreve_dado_SPI
                           _escreve_inteiro_lcd
                             _escreve_frase_ram_lcd
                               _escreve_caractere_lcd
                                 _delay
                             _itoa
                               _utoa
                                 ___lwdiv
                                 ___lwmod
                           _posicao_cursor_lcd
                             _endereco_cursor_lcd
                               _delay
                           _proceed
                             _escreve_dado_SPI
                           _response
                             _recebe_dado_SPI
                           _select
                             _deselect
                             _wait_ready
                               _recebe_dado_SPI
                     _sync_window
                       _disk_write
                         _deselect
                         _dummy_clocks
                           _escreve_dado_SPI
                         _send_cmd
                           ___send_cmd
                             _deselect
                             _escreve_dado_SPI
                             _escreve_inteiro_lcd
                               _escreve_frase_ram_lcd
                                 _escreve_caractere_lcd
                                   _delay
                               _itoa
                                 _utoa
                                   ___lwdiv
                                   ___lwmod
                             _posicao_cursor_lcd
                               _endereco_cursor_lcd
                                 _delay
                             _proceed
                               _escreve_dado_SPI
                             _response
                               _recebe_dado_SPI
                             _select
                               _deselect
                               _wait_ready
                                 _recebe_dado_SPI
                         _xmit_datablock
                           _escreve_dado_SPI
                           _recebe_dado_SPI
                           _wait_ready
                             _recebe_dado_SPI
                 _put_fat
                   _move_window
                     _disk_read
                       _deselect
                       _dummy_clocks
                         _escreve_dado_SPI
                       _rcvr_datablock
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _posicao_cursor_lcd
                           _endereco_cursor_lcd
                             _delay
                         _recebe_dado_SPI
                       _send_cmd
                         ___send_cmd
                           _deselect
                           _escreve_dado_SPI
                           _escreve_inteiro_lcd
                             _escreve_frase_ram_lcd
                               _escreve_caractere_lcd
                                 _delay
                             _itoa
                               _utoa
                                 ___lwdiv
                                 ___lwmod
                           _posicao_cursor_lcd
                             _endereco_cursor_lcd
                               _delay
                           _proceed
                             _escreve_dado_SPI
                           _response
                             _recebe_dado_SPI
                           _select
                             _deselect
                             _wait_ready
                               _recebe_dado_SPI
                     _sync_window
                       _disk_write
                         _deselect
                         _dummy_clocks
                           _escreve_dado_SPI
                         _send_cmd
                           ___send_cmd
                             _deselect
                             _escreve_dado_SPI
                             _escreve_inteiro_lcd
                               _escreve_frase_ram_lcd
                                 _escreve_caractere_lcd
                                   _delay
                               _itoa
                                 _utoa
                                   ___lwdiv
                                   ___lwmod
                             _posicao_cursor_lcd
                               _endereco_cursor_lcd
                                 _delay
                             _proceed
                               _escreve_dado_SPI
                             _response
                               _recebe_dado_SPI
                             _select
                               _deselect
                               _wait_ready
                                 _recebe_dado_SPI
                         _xmit_datablock
                           _escreve_dado_SPI
                           _recebe_dado_SPI
                           _wait_ready
                             _recebe_dado_SPI
               _get_fat
                 _move_window
                   _disk_read
                     _deselect
                     _dummy_clocks
                       _escreve_dado_SPI
                     _rcvr_datablock
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _recebe_dado_SPI
                     _send_cmd
                       ___send_cmd
                         _deselect
                         _escreve_dado_SPI
                         _escreve_inteiro_lcd
                           _escreve_frase_ram_lcd
                             _escreve_caractere_lcd
                               _delay
                           _itoa
                             _utoa
                               ___lwdiv
                               ___lwmod
                         _posicao_cursor_lcd
                           _endereco_cursor_lcd
                             _delay
                         _proceed
                           _escreve_dado_SPI
                         _response
                           _recebe_dado_SPI
                         _select
                           _deselect
                           _wait_ready
                             _recebe_dado_SPI
                   _sync_window
                     _disk_write
                       _deselect
                       _dummy_clocks
                         _escreve_dado_SPI
                       _send_cmd
                         ___send_cmd
                           _deselect
                           _escreve_dado_SPI
                           _escreve_inteiro_lcd
                             _escreve_frase_ram_lcd
                               _escreve_caractere_lcd
                                 _delay
                             _itoa
                               _utoa
                                 ___lwdiv
                                 ___lwmod
                           _posicao_cursor_lcd
                             _endereco_cursor_lcd
                               _delay
                           _proceed
                             _escreve_dado_SPI
                           _response
                             _recebe_dado_SPI
                           _select
                             _deselect
                             _wait_ready
                               _recebe_dado_SPI
                       _xmit_datablock
                         _escreve_dado_SPI
                         _recebe_dado_SPI
                         _wait_ready
                           _recebe_dado_SPI
               _mem_set
               _sync_window
                 _disk_write
                   _deselect
                   _dummy_clocks
                     _escreve_dado_SPI
                   _send_cmd
                     ___send_cmd
                       _deselect
                       _escreve_dado_SPI
                       _escreve_inteiro_lcd
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _itoa
                           _utoa
                             ___lwdiv
                             ___lwmod
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _proceed
                         _escreve_dado_SPI
                       _response
                         _recebe_dado_SPI
                       _select
                         _deselect
                         _wait_ready
                           _recebe_dado_SPI
                   _xmit_datablock
                     _escreve_dado_SPI
                     _recebe_dado_SPI
                     _wait_ready
                       _recebe_dado_SPI
             _dir_sdi
               _clust2sect
                 ___lmul
               _get_fat
                 _move_window
                   _disk_read
                     _deselect
                     _dummy_clocks
                       _escreve_dado_SPI
                     _rcvr_datablock
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _recebe_dado_SPI
                     _send_cmd
                       ___send_cmd
                         _deselect
                         _escreve_dado_SPI
                         _escreve_inteiro_lcd
                           _escreve_frase_ram_lcd
                             _escreve_caractere_lcd
                               _delay
                           _itoa
                             _utoa
                               ___lwdiv
                               ___lwmod
                         _posicao_cursor_lcd
                           _endereco_cursor_lcd
                             _delay
                         _proceed
                           _escreve_dado_SPI
                         _response
                           _recebe_dado_SPI
                         _select
                           _deselect
                           _wait_ready
                             _recebe_dado_SPI
                   _sync_window
                     _disk_write
                       _deselect
                       _dummy_clocks
                         _escreve_dado_SPI
                       _send_cmd
                         ___send_cmd
                           _deselect
                           _escreve_dado_SPI
                           _escreve_inteiro_lcd
                             _escreve_frase_ram_lcd
                               _escreve_caractere_lcd
                                 _delay
                             _itoa
                               _utoa
                                 ___lwdiv
                                 ___lwmod
                           _posicao_cursor_lcd
                             _endereco_cursor_lcd
                               _delay
                           _proceed
                             _escreve_dado_SPI
                           _response
                             _recebe_dado_SPI
                           _select
                             _deselect
                             _wait_ready
                               _recebe_dado_SPI
                       _xmit_datablock
                         _escreve_dado_SPI
                         _recebe_dado_SPI
                         _wait_ready
                           _recebe_dado_SPI
             _move_window
               _disk_read
                 _deselect
                 _dummy_clocks
                   _escreve_dado_SPI
                 _rcvr_datablock
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _recebe_dado_SPI
                 _send_cmd
                   ___send_cmd
                     _deselect
                     _escreve_dado_SPI
                     _escreve_inteiro_lcd
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _itoa
                         _utoa
                           ___lwdiv
                           ___lwmod
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
                     _select
                       _deselect
                       _wait_ready
                         _recebe_dado_SPI
               _sync_window
                 _disk_write
                   _deselect
                   _dummy_clocks
                     _escreve_dado_SPI
                   _send_cmd
                     ___send_cmd
                       _deselect
                       _escreve_dado_SPI
                       _escreve_inteiro_lcd
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _itoa
                           _utoa
                             ___lwdiv
                             ___lwmod
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _proceed
                         _escreve_dado_SPI
                       _response
                         _recebe_dado_SPI
                       _select
                         _deselect
                         _wait_ready
                           _recebe_dado_SPI
                   _xmit_datablock
                     _escreve_dado_SPI
                     _recebe_dado_SPI
                     _wait_ready
                       _recebe_dado_SPI
           _mem_cpy
           _mem_set
           _move_window
             _disk_read
               _deselect
               _dummy_clocks
                 _escreve_dado_SPI
               _rcvr_datablock
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _recebe_dado_SPI
               _send_cmd
                 ___send_cmd
                   _deselect
                   _escreve_dado_SPI
                   _escreve_inteiro_lcd
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _itoa
                       _utoa
                         ___lwdiv
                         ___lwmod
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
                   _select
                     _deselect
                     _wait_ready
                       _recebe_dado_SPI
             _sync_window
               _disk_write
                 _deselect
                 _dummy_clocks
                   _escreve_dado_SPI
                 _send_cmd
                   ___send_cmd
                     _deselect
                     _escreve_dado_SPI
                     _escreve_inteiro_lcd
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _itoa
                         _utoa
                           ___lwdiv
                           ___lwmod
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
                     _select
                       _deselect
                       _wait_ready
                         _recebe_dado_SPI
                 _xmit_datablock
                   _escreve_dado_SPI
                   _recebe_dado_SPI
                   _wait_ready
                     _recebe_dado_SPI
         _find_volume
           ___lldiv
           ___lmul
           _check_fs
             _move_window
               _disk_read
                 _deselect
                 _dummy_clocks
                   _escreve_dado_SPI
                 _rcvr_datablock
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _recebe_dado_SPI
                 _send_cmd
                   ___send_cmd
                     _deselect
                     _escreve_dado_SPI
                     _escreve_inteiro_lcd
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _itoa
                         _utoa
                           ___lwdiv
                           ___lwmod
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
                     _select
                       _deselect
                       _wait_ready
                         _recebe_dado_SPI
               _sync_window
                 _disk_write
                   _deselect
                   _dummy_clocks
                     _escreve_dado_SPI
                   _send_cmd
                     ___send_cmd
                       _deselect
                       _escreve_dado_SPI
                       _escreve_inteiro_lcd
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _itoa
                           _utoa
                             ___lwdiv
                             ___lwmod
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _proceed
                         _escreve_dado_SPI
                       _response
                         _recebe_dado_SPI
                       _select
                         _deselect
                         _wait_ready
                           _recebe_dado_SPI
                   _xmit_datablock
                     _escreve_dado_SPI
                     _recebe_dado_SPI
                     _wait_ready
                       _recebe_dado_SPI
           _disk_initialize
             _deselect
             _dummy_clocks
               _escreve_dado_SPI
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _recebe_dado_SPI
             _select
               _deselect
               _wait_ready
                 _recebe_dado_SPI
             _send_cmd
               ___send_cmd
                 _deselect
                 _escreve_dado_SPI
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_dado_SPI
                 _response
                   _recebe_dado_SPI
                 _select
                   _deselect
                   _wait_ready
                     _recebe_dado_SPI
           _disk_status
           _get_ldnumber
           _move_window
             _disk_read
               _deselect
               _dummy_clocks
                 _escreve_dado_SPI
               _rcvr_datablock
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _recebe_dado_SPI
               _send_cmd
                 ___send_cmd
                   _deselect
                   _escreve_dado_SPI
                   _escreve_inteiro_lcd
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _itoa
                       _utoa
                         ___lwdiv
                         ___lwmod
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
                   _select
                     _deselect
                     _wait_ready
                       _recebe_dado_SPI
             _sync_window
               _disk_write
                 _deselect
                 _dummy_clocks
                   _escreve_dado_SPI
                 _send_cmd
                   ___send_cmd
                     _deselect
                     _escreve_dado_SPI
                     _escreve_inteiro_lcd
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _itoa
                         _utoa
                           ___lwdiv
                           ___lwmod
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
                     _select
                       _deselect
                       _wait_ready
                         _recebe_dado_SPI
                 _xmit_datablock
                   _escreve_dado_SPI
                   _recebe_dado_SPI
                   _wait_ready
                     _recebe_dado_SPI
         _follow_path
           _create_name
             _chk_chr
             _mem_set
           _dir_find
             _dir_next
               _clust2sect
                 ___lmul
               _create_chain
                 _get_fat
                   _move_window
                     _disk_read
                       _deselect
                       _dummy_clocks
                         _escreve_dado_SPI
                       _rcvr_datablock
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _posicao_cursor_lcd
                           _endereco_cursor_lcd
                             _delay
                         _recebe_dado_SPI
                       _send_cmd
                         ___send_cmd
                           _deselect
                           _escreve_dado_SPI
                           _escreve_inteiro_lcd
                             _escreve_frase_ram_lcd
                               _escreve_caractere_lcd
                                 _delay
                             _itoa
                               _utoa
                                 ___lwdiv
                                 ___lwmod
                           _posicao_cursor_lcd
                             _endereco_cursor_lcd
                               _delay
                           _proceed
                             _escreve_dado_SPI
                           _response
                             _recebe_dado_SPI
                           _select
                             _deselect
                             _wait_ready
                               _recebe_dado_SPI
                     _sync_window
                       _disk_write
                         _deselect
                         _dummy_clocks
                           _escreve_dado_SPI
                         _send_cmd
                           ___send_cmd
                             _deselect
                             _escreve_dado_SPI
                             _escreve_inteiro_lcd
                               _escreve_frase_ram_lcd
                                 _escreve_caractere_lcd
                                   _delay
                               _itoa
                                 _utoa
                                   ___lwdiv
                                   ___lwmod
                             _posicao_cursor_lcd
                               _endereco_cursor_lcd
                                 _delay
                             _proceed
                               _escreve_dado_SPI
                             _response
                               _recebe_dado_SPI
                             _select
                               _deselect
                               _wait_ready
                                 _recebe_dado_SPI
                         _xmit_datablock
                           _escreve_dado_SPI
                           _recebe_dado_SPI
                           _wait_ready
                             _recebe_dado_SPI
                 _put_fat
                   _move_window
                     _disk_read
                       _deselect
                       _dummy_clocks
                         _escreve_dado_SPI
                       _rcvr_datablock
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _posicao_cursor_lcd
                           _endereco_cursor_lcd
                             _delay
                         _recebe_dado_SPI
                       _send_cmd
                         ___send_cmd
                           _deselect
                           _escreve_dado_SPI
                           _escreve_inteiro_lcd
                             _escreve_frase_ram_lcd
                               _escreve_caractere_lcd
                                 _delay
                             _itoa
                               _utoa
                                 ___lwdiv
                                 ___lwmod
                           _posicao_cursor_lcd
                             _endereco_cursor_lcd
                               _delay
                           _proceed
                             _escreve_dado_SPI
                           _response
                             _recebe_dado_SPI
                           _select
                             _deselect
                             _wait_ready
                               _recebe_dado_SPI
                     _sync_window
                       _disk_write
                         _deselect
                         _dummy_clocks
                           _escreve_dado_SPI
                         _send_cmd
                           ___send_cmd
                             _deselect
                             _escreve_dado_SPI
                             _escreve_inteiro_lcd
                               _escreve_frase_ram_lcd
                                 _escreve_caractere_lcd
                                   _delay
                               _itoa
                                 _utoa
                                   ___lwdiv
                                   ___lwmod
                             _posicao_cursor_lcd
                               _endereco_cursor_lcd
                                 _delay
                             _proceed
                               _escreve_dado_SPI
                             _response
                               _recebe_dado_SPI
                             _select
                               _deselect
                               _wait_ready
                                 _recebe_dado_SPI
                         _xmit_datablock
                           _escreve_dado_SPI
                           _recebe_dado_SPI
                           _wait_ready
                             _recebe_dado_SPI
               _get_fat
                 _move_window
                   _disk_read
                     _deselect
                     _dummy_clocks
                       _escreve_dado_SPI
                     _rcvr_datablock
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _recebe_dado_SPI
                     _send_cmd
                       ___send_cmd
                         _deselect
                         _escreve_dado_SPI
                         _escreve_inteiro_lcd
                           _escreve_frase_ram_lcd
                             _escreve_caractere_lcd
                               _delay
                           _itoa
                             _utoa
                               ___lwdiv
                               ___lwmod
                         _posicao_cursor_lcd
                           _endereco_cursor_lcd
                             _delay
                         _proceed
                           _escreve_dado_SPI
                         _response
                           _recebe_dado_SPI
                         _select
                           _deselect
                           _wait_ready
                             _recebe_dado_SPI
                   _sync_window
                     _disk_write
                       _deselect
                       _dummy_clocks
                         _escreve_dado_SPI
                       _send_cmd
                         ___send_cmd
                           _deselect
                           _escreve_dado_SPI
                           _escreve_inteiro_lcd
                             _escreve_frase_ram_lcd
                               _escreve_caractere_lcd
                                 _delay
                             _itoa
                               _utoa
                                 ___lwdiv
                                 ___lwmod
                           _posicao_cursor_lcd
                             _endereco_cursor_lcd
                               _delay
                           _proceed
                             _escreve_dado_SPI
                           _response
                             _recebe_dado_SPI
                           _select
                             _deselect
                             _wait_ready
                               _recebe_dado_SPI
                       _xmit_datablock
                         _escreve_dado_SPI
                         _recebe_dado_SPI
                         _wait_ready
                           _recebe_dado_SPI
               _mem_set
               _sync_window
                 _disk_write
                   _deselect
                   _dummy_clocks
                     _escreve_dado_SPI
                   _send_cmd
                     ___send_cmd
                       _deselect
                       _escreve_dado_SPI
                       _escreve_inteiro_lcd
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _itoa
                           _utoa
                             ___lwdiv
                             ___lwmod
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _proceed
                         _escreve_dado_SPI
                       _response
                         _recebe_dado_SPI
                       _select
                         _deselect
                         _wait_ready
                           _recebe_dado_SPI
                   _xmit_datablock
                     _escreve_dado_SPI
                     _recebe_dado_SPI
                     _wait_ready
                       _recebe_dado_SPI
             _dir_sdi
               _clust2sect
                 ___lmul
               _get_fat
                 _move_window
                   _disk_read
                     _deselect
                     _dummy_clocks
                       _escreve_dado_SPI
                     _rcvr_datablock
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _recebe_dado_SPI
                     _send_cmd
                       ___send_cmd
                         _deselect
                         _escreve_dado_SPI
                         _escreve_inteiro_lcd
                           _escreve_frase_ram_lcd
                             _escreve_caractere_lcd
                               _delay
                           _itoa
                             _utoa
                               ___lwdiv
                               ___lwmod
                         _posicao_cursor_lcd
                           _endereco_cursor_lcd
                             _delay
                         _proceed
                           _escreve_dado_SPI
                         _response
                           _recebe_dado_SPI
                         _select
                           _deselect
                           _wait_ready
                             _recebe_dado_SPI
                   _sync_window
                     _disk_write
                       _deselect
                       _dummy_clocks
                         _escreve_dado_SPI
                       _send_cmd
                         ___send_cmd
                           _deselect
                           _escreve_dado_SPI
                           _escreve_inteiro_lcd
                             _escreve_frase_ram_lcd
                               _escreve_caractere_lcd
                                 _delay
                             _itoa
                               _utoa
                                 ___lwdiv
                                 ___lwmod
                           _posicao_cursor_lcd
                             _endereco_cursor_lcd
                               _delay
                           _proceed
                             _escreve_dado_SPI
                           _response
                             _recebe_dado_SPI
                           _select
                             _deselect
                             _wait_ready
                               _recebe_dado_SPI
                       _xmit_datablock
                         _escreve_dado_SPI
                         _recebe_dado_SPI
                         _wait_ready
                           _recebe_dado_SPI
             _mem_cmp
             _move_window
               _disk_read
                 _deselect
                 _dummy_clocks
                   _escreve_dado_SPI
                 _rcvr_datablock
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _recebe_dado_SPI
                 _send_cmd
                   ___send_cmd
                     _deselect
                     _escreve_dado_SPI
                     _escreve_inteiro_lcd
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _itoa
                         _utoa
                           ___lwdiv
                           ___lwmod
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
                     _select
                       _deselect
                       _wait_ready
                         _recebe_dado_SPI
               _sync_window
                 _disk_write
                   _deselect
                   _dummy_clocks
                     _escreve_dado_SPI
                   _send_cmd
                     ___send_cmd
                       _deselect
                       _escreve_dado_SPI
                       _escreve_inteiro_lcd
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _itoa
                           _utoa
                             ___lwdiv
                             ___lwmod
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _proceed
                         _escreve_dado_SPI
                       _response
                         _recebe_dado_SPI
                       _select
                         _deselect
                         _wait_ready
                           _recebe_dado_SPI
                   _xmit_datablock
                     _escreve_dado_SPI
                     _recebe_dado_SPI
                     _wait_ready
                       _recebe_dado_SPI
           _dir_sdi
             _clust2sect
               ___lmul
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                   _dummy_clocks
                     _escreve_dado_SPI
                   _rcvr_datablock
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _recebe_dado_SPI
                   _send_cmd
                     ___send_cmd
                       _deselect
                       _escreve_dado_SPI
                       _escreve_inteiro_lcd
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _itoa
                           _utoa
                             ___lwdiv
                             ___lwmod
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _proceed
                         _escreve_dado_SPI
                       _response
                         _recebe_dado_SPI
                       _select
                         _deselect
                         _wait_ready
                           _recebe_dado_SPI
                 _sync_window
                   _disk_write
                     _deselect
                     _dummy_clocks
                       _escreve_dado_SPI
                     _send_cmd
                       ___send_cmd
                         _deselect
                         _escreve_dado_SPI
                         _escreve_inteiro_lcd
                           _escreve_frase_ram_lcd
                             _escreve_caractere_lcd
                               _delay
                           _itoa
                             _utoa
                               ___lwdiv
                               ___lwmod
                         _posicao_cursor_lcd
                           _endereco_cursor_lcd
                             _delay
                         _proceed
                           _escreve_dado_SPI
                         _response
                           _recebe_dado_SPI
                         _select
                           _deselect
                           _wait_ready
                             _recebe_dado_SPI
                     _xmit_datablock
                       _escreve_dado_SPI
                       _recebe_dado_SPI
                       _wait_ready
                         _recebe_dado_SPI
           _ld_clust
         _ld_clust
         _move_window
           _disk_read
             _deselect
             _dummy_clocks
               _escreve_dado_SPI
             _rcvr_datablock
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _recebe_dado_SPI
             _send_cmd
               ___send_cmd
                 _deselect
                 _escreve_dado_SPI
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_dado_SPI
                 _response
                   _recebe_dado_SPI
                 _select
                   _deselect
                   _wait_ready
                     _recebe_dado_SPI
           _sync_window
             _disk_write
               _deselect
               _dummy_clocks
                 _escreve_dado_SPI
               _send_cmd
                 ___send_cmd
                   _deselect
                   _escreve_dado_SPI
                   _escreve_inteiro_lcd
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _itoa
                       _utoa
                         ___lwdiv
                         ___lwmod
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
                   _select
                     _deselect
                     _wait_ready
                       _recebe_dado_SPI
               _xmit_datablock
                 _escreve_dado_SPI
                 _recebe_dado_SPI
                 _wait_ready
                   _recebe_dado_SPI
         _remove_chain
           _get_fat
             _move_window
               _disk_read
                 _deselect
                 _dummy_clocks
                   _escreve_dado_SPI
                 _rcvr_datablock
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _recebe_dado_SPI
                 _send_cmd
                   ___send_cmd
                     _deselect
                     _escreve_dado_SPI
                     _escreve_inteiro_lcd
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _itoa
                         _utoa
                           ___lwdiv
                           ___lwmod
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
                     _select
                       _deselect
                       _wait_ready
                         _recebe_dado_SPI
               _sync_window
                 _disk_write
                   _deselect
                   _dummy_clocks
                     _escreve_dado_SPI
                   _send_cmd
                     ___send_cmd
                       _deselect
                       _escreve_dado_SPI
                       _escreve_inteiro_lcd
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _itoa
                           _utoa
                             ___lwdiv
                             ___lwmod
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _proceed
                         _escreve_dado_SPI
                       _response
                         _recebe_dado_SPI
                       _select
                         _deselect
                         _wait_ready
                           _recebe_dado_SPI
                   _xmit_datablock
                     _escreve_dado_SPI
                     _recebe_dado_SPI
                     _wait_ready
                       _recebe_dado_SPI
           _put_fat
             _move_window
               _disk_read
                 _deselect
                 _dummy_clocks
                   _escreve_dado_SPI
                 _rcvr_datablock
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _recebe_dado_SPI
                 _send_cmd
                   ___send_cmd
                     _deselect
                     _escreve_dado_SPI
                     _escreve_inteiro_lcd
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _itoa
                         _utoa
                           ___lwdiv
                           ___lwmod
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
                     _select
                       _deselect
                       _wait_ready
                         _recebe_dado_SPI
               _sync_window
                 _disk_write
                   _deselect
                   _dummy_clocks
                     _escreve_dado_SPI
                   _send_cmd
                     ___send_cmd
                       _deselect
                       _escreve_dado_SPI
                       _escreve_inteiro_lcd
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _itoa
                           _utoa
                             ___lwdiv
                             ___lwmod
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _proceed
                         _escreve_dado_SPI
                       _response
                         _recebe_dado_SPI
                       _select
                         _deselect
                         _wait_ready
                           _recebe_dado_SPI
                   _xmit_datablock
                     _escreve_dado_SPI
                     _recebe_dado_SPI
                     _wait_ready
                       _recebe_dado_SPI
         _st_clust
       _f_write
         _clust2sect
           ___lmul
         _create_chain
           _get_fat
             _move_window
               _disk_read
                 _deselect
                 _dummy_clocks
                   _escreve_dado_SPI
                 _rcvr_datablock
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _recebe_dado_SPI
                 _send_cmd
                   ___send_cmd
                     _deselect
                     _escreve_dado_SPI
                     _escreve_inteiro_lcd
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _itoa
                         _utoa
                           ___lwdiv
                           ___lwmod
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
                     _select
                       _deselect
                       _wait_ready
                         _recebe_dado_SPI
               _sync_window
                 _disk_write
                   _deselect
                   _dummy_clocks
                     _escreve_dado_SPI
                   _send_cmd
                     ___send_cmd
                       _deselect
                       _escreve_dado_SPI
                       _escreve_inteiro_lcd
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _itoa
                           _utoa
                             ___lwdiv
                             ___lwmod
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _proceed
                         _escreve_dado_SPI
                       _response
                         _recebe_dado_SPI
                       _select
                         _deselect
                         _wait_ready
                           _recebe_dado_SPI
                   _xmit_datablock
                     _escreve_dado_SPI
                     _recebe_dado_SPI
                     _wait_ready
                       _recebe_dado_SPI
           _put_fat
             _move_window
               _disk_read
                 _deselect
                 _dummy_clocks
                   _escreve_dado_SPI
                 _rcvr_datablock
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _recebe_dado_SPI
                 _send_cmd
                   ___send_cmd
                     _deselect
                     _escreve_dado_SPI
                     _escreve_inteiro_lcd
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _itoa
                         _utoa
                           ___lwdiv
                           ___lwmod
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
                     _select
                       _deselect
                       _wait_ready
                         _recebe_dado_SPI
               _sync_window
                 _disk_write
                   _deselect
                   _dummy_clocks
                     _escreve_dado_SPI
                   _send_cmd
                     ___send_cmd
                       _deselect
                       _escreve_dado_SPI
                       _escreve_inteiro_lcd
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _itoa
                           _utoa
                             ___lwdiv
                             ___lwmod
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _proceed
                         _escreve_dado_SPI
                       _response
                         _recebe_dado_SPI
                       _select
                         _deselect
                         _wait_ready
                           _recebe_dado_SPI
                   _xmit_datablock
                     _escreve_dado_SPI
                     _recebe_dado_SPI
                     _wait_ready
                       _recebe_dado_SPI
         _disk_write
           _deselect
           _dummy_clocks
             _escreve_dado_SPI
           _send_cmd
             ___send_cmd
               _deselect
               _escreve_dado_SPI
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _proceed
                 _escreve_dado_SPI
               _response
                 _recebe_dado_SPI
               _select
                 _deselect
                 _wait_ready
                   _recebe_dado_SPI
           _xmit_datablock
             _escreve_dado_SPI
             _recebe_dado_SPI
             _wait_ready
               _recebe_dado_SPI
         _mem_cpy
         _move_window
           _disk_read
             _deselect
             _dummy_clocks
               _escreve_dado_SPI
             _rcvr_datablock
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _recebe_dado_SPI
             _send_cmd
               ___send_cmd
                 _deselect
                 _escreve_dado_SPI
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_dado_SPI
                 _response
                   _recebe_dado_SPI
                 _select
                   _deselect
                   _wait_ready
                     _recebe_dado_SPI
           _sync_window
             _disk_write
               _deselect
               _dummy_clocks
                 _escreve_dado_SPI
               _send_cmd
                 ___send_cmd
                   _deselect
                   _escreve_dado_SPI
                   _escreve_inteiro_lcd
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _itoa
                       _utoa
                         ___lwdiv
                         ___lwmod
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
                   _select
                     _deselect
                     _wait_ready
                       _recebe_dado_SPI
               _xmit_datablock
                 _escreve_dado_SPI
                 _recebe_dado_SPI
                 _wait_ready
                   _recebe_dado_SPI
         _sync_window
           _disk_write
             _deselect
             _dummy_clocks
               _escreve_dado_SPI
             _send_cmd
               ___send_cmd
                 _deselect
                 _escreve_dado_SPI
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_dado_SPI
                 _response
                   _recebe_dado_SPI
                 _select
                   _deselect
                   _wait_ready
                     _recebe_dado_SPI
             _xmit_datablock
               _escreve_dado_SPI
               _recebe_dado_SPI
               _wait_ready
                 _recebe_dado_SPI
         _validate
           _disk_status
       _posicao_cursor_lcd
         _endereco_cursor_lcd
           _delay
   _inicializa_shrc
   _inicializa_tarefas
   _init_hardware
     _config_timer_dois
     _config_timer_zero
       _write_timer_zero
     _init_interrupt
     _init_oscilador
     _init_ports
   _init_lcd
     _delay
     _escreve_cmd_lcd
       _delay
   _leitura_chaves_sistema
   _mensagem_inicial
     _escreve_cmd_lcd
       _delay
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay

 _isr (ROOT)
   _recebe_dado_uart
   _tratamento_uart
   i2_write_timer_zero

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     22E      21       27.3%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100     50      50      11       31.3%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      E6       9       89.8%
BITBANK1           100      0       0       6        0.0%
BANK1              100     46      E2       7       88.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     8E      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2D      45       1       73.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2FD      20        0.0%
DATA                 0      0     52B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Feb 25 12:27:23 2022

       __end_of_mensagem_inicial 522E                      get_fat@clst 00A7  
                              _s 003B                     create_name@b 0064  
                   create_name@c 006E                     create_name@d 0067  
                   create_name@i 006C                     create_name@p 0068  
                    _SSPSTATbits 000FC7                 get_ldnumber@path 001A  
               ??_init_interrupt 001A                               l81 4E10  
                             l79 4D74                               l87 59EA  
                             l88 59F8     __size_of_escreve_inteiro_lcd 003E  
                    __CFG_BOR$ON 000000                               _fs 0350  
                             _rd 00FA                      disk_ioctl@n 00A1  
            ___wmul@multiplicand 001C                      __CFG_BORV$3 000000  
                 ??_dir_register 002E                 disk_write@sector 007D  
                   ?_escalonador 0001                    create_name@dp 0022  
                  create_name@ni 0065                    create_name@si 0062  
                 create_chain@cs 00D3                   create_chain@fs 00C0  
               ?_inicializa_shrc 0001                              l303 5948  
                            l304 593A                              l320 412E  
                            l321 4164                              l317 4150  
                            l342 5856                              l350 563C  
                            l318 413C                              l343 5826  
                            l351 55F8                              l319 40DC  
                            l512 5AAA                              l344 582E  
                            l345 5830                              l514 5AB8  
                            l530 50DC                              l522 50A8  
                            l531 50DE                              l523 50AA  
                            l532 50E6                              l524 50B2  
                            l533 50E8                              l525 50B4  
                            l534 50F0                              l526 50BC  
                            l606 571A                              l550 55BE  
                            l535 50F2                              l527 50BE  
                            l607 56F2                              l551 55C0  
                            l536 50FA                              l528 50C6  
                            l552 55C8                              l544 5594  
                            l537 50FC                              l529 50C8  
                            l553 55CA                              l545 5596  
                            l561 557C                              l554 55D2  
                            l546 559E                              l562 555C  
                            l555 55D4                              l547 55A0  
                            l563 5520                              l580 5460  
                            l556 55DC                              l548 55A8  
                            l564 5578                              l900 52BE  
                            l581 5474                              l573 5440  
                            l557 55DE                              l549 55AA  
                            l565 552C                              l582 5476  
                            l574 5442                              l566 553A  
                            l583 547E                              l575 544A  
                            l567 5548                              l911 4C60  
                            l903 52D4                              l584 5480  
                            l576 544C                              l568 5556  
                            l912 4C6C                              l585 5488  
                            l577 5454                              l905 532E  
                            l586 548A                              l578 5456  
                            l914 4C88                              l587 5492  
                            l579 545E                              l931 379A  
                            l923 3692                              l588 5494  
                            l932 375C                              l909 4C1A  
                            l925 369A                              l919 57C0  
                            l943 3842                              l927 3812  
                            l936 37DC                              l928 3728  
                            l945 388A                              l890 5148  
                            l946 3854                              l891 512E  
                            l963 48F2                              l955 5B70  
                            l939 3804                              l876 59BA  
                            l964 4906                              l980 3C2E  
                            l877 59A2                              l973 4996  
                            l981 3C36                              l949 38BE  
                            l894 515C                              l886 5B22  
                            l966 491A                              l982 3C4A  
                            l959 48EA                              l991 3D56  
                            l983 3CAA                              l976 3C26  
                            l986 3CD0                              l994 19D2  
                            l997 1E18                              l998 19DE  
                            _PCL 000FF9                              _PR2 000FCB  
                            _E_W 0041                 ??_init_oscilador 001A  
                            _n_s 0042                              _isr 0008  
              ??_tratamento_uart 0001                              _txt 0126  
                   disk_read@cmd 0086                              prod 000FF3  
                 ??_create_chain 00C6                              tosl 000FFD  
                            wreg 000FE8                     __CFG_FOSC$HS 000000  
              disk_initialize@ty 0085        __size_of_write_timer_zero 0012  
                 create_name@sfn 006A                  create_chain@ncl 00CF  
                create_chain@scl 00CB                  create_chain@res 00CA  
                    ld_clust@dir 001C                     __CFG_LVP$OFF 000000  
        ??_escreve_frase_ram_lcd 001F                     __CFG_WDT$OFF 000000  
                           l1000 1E4C                             l1001 19E4  
                           l1010 1BB6                             l1003 1AC4  
                           l1004 1B6A                             l1021 1D92  
                           l1005 1B70                             l1014 1C96  
                           l1006 1C04                             l1023 1DCC  
                           l1024 1DB6                             l1016 1D20  
                           l1112 2C02                             l1200 324C  
                           l1017 1D2E                             l1009 1BBE  
                           l1201 3298                             l1026 1DD4  
                           l1106 2DB4                             l1114 2C20  
                           l1130 2676                             l1202 32D4  
                           l1050 4BB6                             l1019 1D60  
                           l1115 2C2A                             l1107 2AA2  
                           l2100 4F04                             l1140 24A8  
                           l1132 235C                             l1220 21B0  
                           l2101 4F42                             l1029 1E14  
                           l1109 2DD2                             l1117 2CE0  
                           l1221 1FF2                             l1301 3614  
                           l1142 2554                             l1134 2390  
                           l1222 2044                             l1214 1F02  
                           l1206 334A                             l1046 4BA8  
                           l1070 5744                             l1062 54BA  
                           l1055 5A18                             l1119 2DA2  
                           l1127 2658                             l1223 2054  
                           l1047 4B52                             l1311 3EF4  
                           l1056 5A08                             l1144 2652  
                           l1128 22A6                             l1400 08CE  
                           l1224 206A                             l1240 45B4  
                           l1304 362C                             l1152 428A  
                           l1137 2472                             l1217 220E  
                           l1225 2088                             l1209 1E9C  
                           l1241 45E0                             l1233 4508  
                           l1049 4BE8                             l1305 3648  
                           l1153 419E                             l1170 2EC0  
                           l1402 090C                             l1226 2168  
                           l1218 1FA8                             l1306 365A  
                           l1314 3F4C                             l1171 2EF2  
                           l1163 2E4C                             l1331 46DC  
                           l1403 096E                             l1227 210E  
                           l1219 1FBE                             l2132 5290  
                           l1172 2F12                             l1332 460E  
                           l1228 2144                             l1236 45AA  
                           l1252 470A                             l1156 41E8  
                           l1500 12E0                             l1093 3A6C  
                           l2133 529E                             l1181 307C  
                           l1341 46D4                             l1333 460A  
                           l1405 0AD8                             l1069 5748  
                           l1245 541E                             l1157 4200  
                           l1078 3B14                             l1094 3A96  
                           l1182 30E4                             l1174 2F74  
                           l1350 4890                             l1414 4CD8  
                           l1262 4A7C                             l1318 4014  
                           l1430 273A                             l1087 4EBE  
                           l1167 2F02                             l1351 48CE  
                           l1343 46CA                             l1191 3180  
                           l1327 3FD8                             l1319 3FAC  
                           l1159 427A                             l1423 2688  
                           l1088 4EA0                             l1408 5094  
                           l2128 525C                             l1176 300A  
                           l1168 2E9C                             l1520 1658  
                           l1360 00F0                             l1416 4D06  
                           l1440 290E                             l1432 2768  
                           l1505 3EC2                             l2129 5250  
                           l1177 2FDE                             l1521 163A  
                           l1361 0102                             l1417 4D1A  
                           l1273 35EA                             l1257 4776  
                           l1098 4ADA                             l1186 30FC  
                           l1530 1702                             l1522 15F2  
                           l1514 130C                             l1370 01CC  
                           l1354 0040                             l1418 4D46  
                           l1282 34F4                             l1274 34EA  
                           l1266 33FC                             l1258 47B8  
                           l1442 292A                             l1434 2772  
                           l1531 172C                             l1523 161C  
                           l1347 4832                             l1371 0220  
                           l1195 31D0                             l1283 3592  
                           l1267 33F6                             l1443 2978  
                           l1427 270A                             l1188 3104  
                           l1532 177C                             l1516 1330  
                           l1380 02BC                             l1356 0066  
                           l1196 3226                             l1428 28F2  
                           l2181 56BC                             l1525 17D6  
                           l1517 137C                             l1349 4852  
                           l1381 02C6                             l1197 3200  
                           l1277 34D0                             l1269 3470  
                           l1445 2A60                             l1429 2748  
                           l2182 56B4                             l2094 57FE  
                           l1526 1668                             l1390 0502  
                           l1382 02E2                             l1374 026E  
                           l1358 00B4                             l1198 331C  
                           l2191 5876                             l1535 18D6  
                           l1527 16CE                             l1519 156C  
                           l1391 0584                             l1383 032A  
                           l1359 00B0                             l1199 32DC  
                           l2192 586E                             l1536 1894  
                           l1392 0614                             l1384 038C  
                           l1376 0296                             l1368 01B0  
                           l1296 35B0                             l1288 356C  
                           l2185 56DC                             l1537 194E  
                           l1393 062E                             l1385 044C  
                           l1297 35C2                             l1481 0CB0  
                           l2186 56E6                             l2098 4ECA  
                           l1538 19B4                             l1394 0644  
                           l1490 0E68                             l2195 588E  
                           l1395 07B4                             l1299 35D4  
                           l1491 1080                             l1483 0CF2  
                           l2196 5898                             l1652 5658  
                           l1396 074C                             l1388 0498  
                           l1492 0F00                             l1653 566C  
                           l1389 04E2                             l1477 1280  
                           l1493 0F54                             l1398 07CE  
                           l1494 1060                             l1486 0D20  
                           l1478 0BBC                             l1495 123A  
                           l1479 111E                             l1487 0D48  
                           l1496 1100                             l1488 0D9A  
                           l1497 10DC                             l1489 0E04  
                           l1498 1176                             l1499 11C0  
                           ?_isr 0001            _escreve_caractere_lcd 5430  
                           STR_1 6263                             STR_2 6269  
                           STR_3 626F                             STR_4 627A  
                           STR_6 6275                             STR_7 6254  
                           STR_8 61E9                             STR_9 6227  
                 timer_dois@flag 0038                             _BRGH 007D62  
                           _T0IF 007F92                             _CREN 007D5C  
                           _LATB 000F8A                             _PIE1 000F9D  
              _valor_leitura_adc 0100                             _RCIF 007CF5  
                           i2l71 4374                             i2l72 4388  
                           i2l65 430C                             i2l66 4380  
                           i2l67 4324                             i2l69 4352  
                           _TMR2 000FCC                             _SPEN 007D5F  
                           _TRMT 007D61                             _TXEN 007D65  
                           _SYNC 007D64                             _Fsid 00F6  
                           _Stat 00FF                             _dado 003A  
                           _main 59D2                     find_volume@i 01B4  
                           _itoa 57D8                             fsr0h 000FEA  
                           fsr1h 000FE2                             indf0 000FEF  
                           fsr2h 000FDA                             fsr0l 000FE9  
                           indf1 000FE7                             indf2 000FDF  
                           fsr1l 000FE1                             fsr2l 000FD9  
                           btemp 0046                             _utoa 4EC2  
                  disk_ioctl@cmd 007B                    disk_ioctl@csd 008C  
                  disk_read@buff 007B                    disk_ioctl@res 00A0  
                  disk_ioctl@ptr 00A2                    disk_read@pdrv 0083  
                           prodh 000FF4                             prodl 000FF3  
                 ??_get_ldnumber 001C     tratamento_uart@received_char 0001  
                           start 000E                    __CFG_IESO$OFF 000000  
                  __CFG_MCLRE$ON 000000               disk_initialize@cmd 0084  
                   ?_follow_path 0183               disk_initialize@ocr 007E  
                   ___param_bank 000000               disk_initialize@tmr 0086  
                create_name@path 0024                 create_chain@clst 00C2  
                          ??_isr 0005         __size_of_recebe_dado_SPI 005C  
                  __CFG_PLLDIV$5 000000                      _sync_window 3A9C  
                          l11117 5A08                            l11161 2F12  
                          l11153 2E9C                            l11157 2EC0  
                          l12213 020A                            l10391 5AB0  
                          l11095 2640                            l12039 4200  
                          l10385 5AA2                            l12233 02B0  
                          l11347 5744                            l11455 1FBE  
                          l11711 45B4                            l10905 491A  
                          l11553 3720                            l11449 1FA8  
                          l11393 3298                            l11483 206A  
                          l12381 0AD8                            l12197 0142  
                          l11639 4B52                            l10945 3BA2  
                          l11649 4BB6                            l11587 37D4  
                          l10949 3BAE                            l12805 0E04  
                          l11937 46CA                            l11865 35E4  
                          l12691 172C                            l12667 161C  
                          l11973 48CE                            l11967 4890  
                          l12793 0D48                            l12945 4D6C  
                          l11987 5090                            ?_main 0001  
                          ?_itoa 0060                            _EEADR 000FA9  
                          STR_10 61FA                            STR_11 6241  
                          STR_12 6228                            STR_13 6236  
                          STR_14 6219                            STR_15 624B  
                          STR_16 61D8                            STR_18 625D  
                          STR_19 620A                  __end_of___lldiv 52B0  
                          ?_utoa 0021                            _T0CON 000FD5  
                          u14101 3D10                            u14120 3D32  
                          _T2CON 000FCA                            u13410 56C0  
                          u14035 3C3C                            u14220 4942  
                          u14140 3D68                            u14205 48F8  
                          u14061 3C92                            u15005 1C6A  
                          u15014 1C88                            u15110 54CA  
                          u15015 1C82                            u13600 5712  
                          u13440 587A                            u14240 4970  
                          u14320 3C0A                            u16000 3500  
                          u15120 5508                            u15025 1CD4  
                          u13610 573A                            u14170 48E6  
                          u14090 3CF2                            u14330 4E40  
                          u13380 5ABE                            u13460 560C  
                          u14260 49A8                            u15220 32A8  
                          u15140 577C                            u16020 350C  
                          u14405 2B84                            u15230 32D0  
                          u13607 5708                            u14360 2A78  
                          u15160 317C                            u16040 3538  
                          u13617 5730                            u13474 5616  
                          u14450 2D22                            u16210 4648  
                          u13475 5612                            u14435 2C0E  
                          u13468 560E                            u13740 59C2  
                          u16060 3544                            u14525 23DC  
                          u13750 59CE                            u14550 2490  
                          u14470 2284                            u15510 3744  
                          u16070 3568                            u14455 2D18  
                          u15335 1F0E                            u14720 2FC0  
                          u14385 2AEC                            u15265 3356  
                          u14570 2596                            u14730 2FCC  
                          u14650 2E3A                            u15290 1E98  
                          u16410 41E4                            u14555 2486  
                          u15275 33A2                   _data_buffer_32 02C6  
                          u14900 1B64                            u16340 5090  
                          u13781 58EA                            u13950 5150  
                          u16270 484E                            u15630 3892  
                          u15550 37A2                            u17230 4D42  
                          u14575 258C                            u14495 22F0  
                          u15455 2230                            u16360 5260  
                          u15800 45D4                            u16440 4254  
                          u14905 1B5A                            u13890 52F4  
                          u15650 38B8                            u16450 42AA  
                          u17180 511E                            u14780 30BC  
                          u16380 4178                            u13990 3C22  
                          u14950 1BE6                            u15590 37F8  
                          u16710 020A                            u15670 4B80  
                          u17600 1766                            u18080 51BE  
                          u13897 52EA                            u17610 17FA  
                          u15690 4BDE                            u16490 3EEE  
                          u18090 51DA                            u14955 1BDC  
                          u14875 1A9C                            u16900 062A  
                          u15780 458C                            u16580 3FD4  
                          u18068 4DD0                            u14885 1ADA  
                          u15677 4B70                            u18069 4DE2  
                          u16910 0640                            u16830 0448  
                          u16750 02B0                            u15950 34BA  
                          u14895 1AF4                            u17640 18B4  
                          u15880 47D8                            u15697 4BD4  
                          u15970 34CC                            u17730 0C1C  
                __end_of___lwdiv 56F0                            u14995 1C48  
                          u17660 1930                            u16780 02DE  
                          u17645 18A8                            u17590 173E  
                          u17495 13F8                            u17735 0C10  
                          u19407 4FA4                            u16945 0792  
                          u17905 106A                            u19417 4FC0  
                          u16970 0942                            u19507 5636  
                          u19427 36A6                            u16875 051C  
                          u19517 5926                            u19437 3788  
                          u17845 0E82                            u17950 128A  
                          u19527 5838                            u19447 3878  
                          u16975 0938                            u19537 5840  
                          u19457 59AE                            u19547 5848  
                          u19467 513C                            u19387 521A  
                          u19557 5850                            u19477 5620  
                          u19397 4F88                            u19487 5628  
                          u17895 1026                            u19497 562E  
                __end_of___lwmod 58A2                            i2l210 44A8  
__size_of_leitura_chaves_sistema 003C                            i2l211 4492  
                          i2l204 43FE                            i2l213 44D2  
                          i2l205 4438                            i2l206 4422  
                          i2l208 4462                            i2l209 446E  
                          i2l830 5B96                            _RCREG 000FAE  
                          _RCSTA 000FAB                            _TMR0H 000FD7  
                          _TMR0L 000FD6                            _SPBRG 000FAF  
                  __CFG_USBDIV$1 000000                            _TRISA 000F92  
                          _TRISB 000F93                            _TRISC 000F94  
                          _TRISD 000F95                            _TRISE 000F96  
                __end_of_f_close 58E0                            _TXREG 000FAD  
                          _TXSTA 000FAC                            _FatFs 00F8  
                __end_of_chk_chr 5790                    __CFG_PWRT$OFF 000000  
                __end_of_f_lseek 19BA              ___lmul@multiplicand 001E  
     __size_of_config_timer_dois 000C                  __end_of_f_mount 4D66  
                 __CFG_FCMEN$OFF 000000                     ___send_cmd@n 0071  
                __end_of_dir_sdi 33E4                  __end_of_f_write 12F2  
     __size_of_config_timer_zero 001A                  __end_of_get_fat 2DE4  
                          _delay 5A9E                  __end_of_mem_cmp 5512  
                __end_of_mem_cpy 4BFA                  __end_of_dpowers 6135  
                __end_of_mem_set 5A2A                    find_volume@br 017F  
                  find_volume@fs 01B7                    find_volume@pt 0199  
       __size_of_escreve_cmd_lcd 008C                   disk_ioctl@buff 007C  
                          pclath 000FFA                   disk_read@count 0081  
                          tablat 000FF5                   disk_ioctl@pdrv 008B  
                __end_of_proceed 5BCA                            plusw1 000FE3  
                          plusw2 000FDB                  __end_of_put_fat 267A  
                          utoa@c 0029                            utoa@v 0027  
                          status 000FD8     escreve_dado_SPI@data_to_shrc 001B  
                          wtemp6 0047                  __end_of_sync_fs 3A9C  
                  get_ldnumber@i 0024                  __initialization 5332  
            disk_initialize@pdrv 007D                     __end_of_main 59FE  
                   clust2sect@fs 0026                     __end_of_itoa 581C  
                   __end_of_utoa 4F66               _inicializa_tarefas 5A7A  
                escalonador@cont 01C4                           ??_main 002E  
                         ??_itoa 002A                           ??_utoa 0027  
                  __activetblptr 000003              ?_inicializa_tarefas 0001  
                __CFG_CCP2MX$OFF 000000                           ?_delay 0001  
         ?_escreve_caractere_lcd 0001                           _ADCON0 000FC2  
                         _ADCON1 000FC1                           _ADRESH 000FC4  
                         _ADRESL 000FC3                           _EEDATA 000FA8  
                         _EECON2 000FA7                           u141011 3D0E  
                         u140611 3C90                           _INT0IE 007F94  
                         _INT0IF 007F91                    ?_dummy_clocks 0001  
                         _PCLATH 000FFA                           _INTCON 000FF2  
                         i2l9105 431C                           _TMR0IF 007F92  
                         _TMR2IF 007CF1                           _SDCard 4018  
       __end_of_recebe_dado_uart 5B9A                           _SPPCFG 000F63  
                         _SPPCON 000F65                 _is_it_gga_string 003E  
                         _SSPBUF 000FC9             __end_of_dir_register 4A82  
         _leitura_chaves_sistema 595C                 __end_of_check_fs 48D2  
           ??_inicializa_tarefas 001A             __size_of_create_name 029E  
       __size_of_disk_initialize 0250                 __end_of_deselect 5BD6  
     __end_of_posicao_cursor_lcd 5582                 __end_of_dir_find 47DE  
               __end_of_dir_next 2272                     ?_move_window 009A  
           __end_of_create_chain 3116           __size_of_init_hardware 0016  
               __end_of__powers_ 615C                           _Result 003C  
               __end_of_ld_clust 5430                           ___lmul 5648  
           __size_of_find_volume 0AF2             __size_of_disk_status 0012  
                         ___wmul 5A54                   __CFG_STVREN$ON 000000  
                      ??___lldiv 0022                           _f_open 267A  
                      ??___lwdiv 001E                           _f_sync 3D6C  
                      ??___lwmod 001E                           _folder 0296  
                         _estado 0039                 __end_of_init_lcd 5004  
                      ??_f_close 002E                   find_volume@fmt 01B6  
                         clear_0 536C                           clear_1 537E  
                         clear_2 538A                           clear_3 5396  
                         clear_4 53A2                   find_volume@rfs 00AF  
                      ??_chk_chr 001E                   find_volume@vol 019F  
                         _select 5B12                        ??_f_lseek 00DD  
                      ??_f_mount 002E                        ??_dir_sdi 00C3  
                      ??_f_write 017F                        ??_get_fat 00AB  
               __end_of_send_cmd 57D8                        ??_mem_cmp 0020  
                      ??_mem_cpy 0020                        ??_mem_set 0020  
                         itoa@cp 002A                  disk_ioctl@csize 009C  
               __end_of_validate 5098             __size_of_escalonador 00AE  
              ??_recebe_dado_SPI 001A             __end_of_get_ldnumber 46E6  
       __end_of_escreve_dado_SPI 5860                 __end_of_response 5BBE  
                   __mediumconst 610C            write_timer_zero@timer 001C  
                disk_read@sector 007D                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
               __end_of_st_clust 5A54                        ??_proceed 001C  
               _write_timer_zero 5B52                        ??_put_fat 00AF  
                xmit_datablock@i 0023        escreve_caractere_lcd@data 001C  
                      ??_sync_fs 00A6                   ??_dummy_clocks 001C  
            _escreve_inteiro_lcd 58E0               rcvr_datablock@buff 0020  
                     __accesstop 0060          __end_of__initialization 53A8  
                __CFG_PBADEN$OFF 000000                   disk_write@buff 007B  
                 get_ldnumber@tp 0020                   get_ldnumber@tt 0026  
                 disk_write@pdrv 0084                    ___rparam_used 000001  
              ??_escreve_cmd_lcd 001C          __size_of_rcvr_datablock 0088  
                 __pcstackCOMRAM 0001                  _tratamento_uart 43D4  
    __end_of_endereco_cursor_lcd 55EC                     __pidataBANK0 5BD6  
                   __pidataBANK1 5AC2                ?_mensagem_inicial 0001  
                  __end_of_delay 5AC2                       ___send_cmd 4BFA  
           __size_of_follow_path 0152             ?_escreve_inteiro_lcd 002C  
             ??_mensagem_inicial 0020               _tarefa_em_execucao 0043  
     __end_ofi2_write_timer_zero 5B88               __size_of_dir_alloc 0104  
                  _init_hardware 5B2A               __size_of_disk_read 00DA  
                        ??_delay 001A                 _is_it_rmc_string 003D  
   mensagem_inicial@msg_linha_um 0060                       __pbssBANK0 00EE  
                     __pbssBANK1 0100                       __pbssBANK2 0200  
 __size_of_escreve_frase_ram_lcd 0052    __end_of_escreve_frase_ram_lcd 5742  
                        ?_SDCard 0001                 _find_volume$2847 018F  
               _find_volume$2848 0193        escreve_inteiro_uart@F3956 01D4  
                     _gga_buffer 0200                          ?___lmul 001A  
                        ?___wmul 001A            mensagem_inicial@F4151 61B6  
          mensagem_inicial@F4149 61C7            ??_escreve_inteiro_lcd 002E  
                        ?_f_open 01B9          __size_of_xmit_datablock 0082  
                        ?_f_sync 00AF                        SDCard@fil 0330  
              ??_disk_initialize 007B                     ?_sync_window 0085  
                 ___lmul@product 0022                          ?_select 0001  
                   _gga_pointers 013A                          _INTCON2 000FF1  
                        _INTCON3 000FF0                   ?_init_hardware 0001  
                      ?_check_fs 00A5                       _disk_ioctl 19BA  
                 follow_path@dir 0187                   follow_path@res 018A  
                     _disk_write 3C0E                      send_cmd@cmd 0079  
                      ?_deselect 0001                      send_cmd@arg 0075  
                    send_cmd@res 007A                   remove_chain@fs 00C0  
                      ?_dir_find 00EA                        ?_dir_next 00D7  
                        _SSPCON1 000FC6            __size_of_dir_register 00D6  
       __size_of_inicializa_shrc 000C                        ?_ld_clust 001A  
                        _SSPSTAT 000FC7                       _clust2sect 4A82  
               sync_window@wsect 0096                  __CFG_VREGEN$OFF 000000  
                  ?_remove_chain 00C0            __size_of_create_chain 0332  
                      ?_init_lcd 0001                  __size_of_SDCard 014E  
        __end_of_tratamento_uart 44E0                __end_of_dir_alloc 45E4  
              __end_of__npowers_ 6183                        ?_send_cmd 0075  
                        __Hparam 0000                   ___send_cmd@cmd 0074  
                 ___send_cmd@arg 006D                   ___send_cmd@res 0072  
                        __Lparam 0000                        ?_validate 001B  
              __end_of_disk_read 49AC                        ?_response 0001  
                     f_close@res 00BA                  __size_of___lmul 0056  
                      ?_st_clust 001A                      ?___send_cmd 006D  
                        ___lldiv 522E                  __size_of___wmul 0026  
           __size_of_move_window 00AE                       check_fs@fs 00A5  
                        ___lwdiv 569E                          ___lwmod 5860  
                __size_of_f_open 03EC                  __size_of_f_sync 015A  
           __end_of_dummy_clocks 595C                          _f_close 58A2  
          __size_of_get_ldnumber 0102                          __pcinit 5332  
                        _chk_chr 5742                          _f_lseek 12F2  
                     _init_ports 5AFA                          __ramtop 0800  
                   _get_fat$2493 00B3                          _f_mount 4CB2  
                __size_of_select 0018                          __ptext0 59D2  
                        __ptext1 51AC                          __ptext2 595C  
                        __ptext3 4F66                          __ptext4 5B2A  
                        __ptext5 5AFA                          __ptext6 5BCA  
                        __ptext7 5B40                          __ptext8 5AE0  
                        __ptext9 5B52                          _dir_sdi 3116  
                    validate@fil 0021                          _f_write 0B04  
                    validate@obj 001B                          _get_fat 2A66  
                      _T0CONbits 000FD5                       chk_chr@chr 001C  
                   _dir_register 49AC                       chk_chr@str 001A  
                        _mem_cmp 54A2          i2write_timer_zero@timer 0003  
                        _mem_cpy 4B40      endereco_cursor_lcd@endereco 001C  
                        _dpowers 610D                          _mem_set 59FE  
                   __size_of_isr 43CC          ??_escreve_caractere_lcd 001C  
                     ??_check_fs 00AB                  find_volume@path 00B1  
                find_volume@nrsv 01A1                  find_volume@stat 01AB  
                   _create_chain 2DE4                       ??_deselect 001A  
                        _proceed 5BBE          __size_of_init_interrupt 0012  
                     ??_dir_find 002E                          _put_fat 2272  
                     ??_dir_next 00DB                       f_lseek@bcs 0188  
                     ??_ld_clust 001E                          _sync_fs 38D2  
                     f_lseek@ofs 00D9                   __pintcode_body 42AE  
                     f_lseek@res 0183          ?_leitura_chaves_sistema 0001  
           end_of_initialization 53A8                       f_open@mode 01BD  
                     f_open@path 01BB                   ??_remove_chain 00C6  
                        isr@cont 0019       __end_ofleitura_chave@F3840 61A5  
     __end_ofleitura_chave@F3842 6194       __end_ofleitura_chave@F3838 61B6  
        __size_of_init_oscilador 0008                          itoa@buf 0060  
                        itoa@val 0062                    SDCard@FResult 032F  
                     ??_init_lcd 001D                          int_func 42AE  
                     _rmc_buffer 0250                ?_recebe_dado_uart 0001  
                disk_status@pdrv 001A                   _rcvr_datablock 5124  
                      i2u1163_40 4356           write_timer_zero@timer0 001A  
                ___lldiv@divisor 001E                       f_mount@cfs 00C2  
                     f_mount@res 00C1                       ??_send_cmd 002E  
                     f_mount@opt 00C0               ??_recebe_dado_uart 0001  
                     f_mount@vol 00C6                  ___lldiv@counter 0026  
                   _get_ldnumber 45E4                       ??_validate 001D  
                     ??_response 001D                        _RCSTAbits 000FAB  
       __end_of_write_timer_zero 5B64                          postdec1 000FE5  
                        postdec2 000FDD                  _recebe_dado_SPI 55EC  
                        postinc0 000FEE                          postinc1 000FE6  
                        postinc2 000FDE                       ??_st_clust 0020  
                 move_window@res 00A4                          utoa@buf 0021  
                        utoa@val 0023                       _wait_ready 5998  
                     dir_alloc@n 0182                 remove_chain@clst 00C2  
                     dir_find@dp 00EA                        _PORTAbits 000F80  
                      _PORTBbits 000F81                        _PORTCbits 000F82  
                      _PORTDbits 000F83                        _PORTEbits 000F84  
                ??_init_hardware 001E               _posicao_cursor_lcd 5512  
                     dir_sdi@idx 00C1                       dir_next@dp 00D7  
                    ?_disk_ioctl 007B              rcvr_datablock@token 0028  
                     f_write@btw 00DB                       f_write@res 018F  
                      _TRISAbits 000F92                        _TRISBbits 000F93  
                    ?_disk_write 007B                        _TRISCbits 000F94  
                      _TRISDbits 000F95                ?_escreve_dado_SPI 0001  
                _escreve_cmd_lcd 5098                       get_fat@val 00B9  
 __end_of_leitura_chaves_sistema 5998              ?_posicao_cursor_lcd 001D  
                get_ldnumber@vol 0022                  disk_write@count 0081  
             ??_escreve_dado_SPI 001A                      ?_clust2sect 0026  
            __size_of___send_cmd 00B8           __end_of_rcvr_datablock 51AC  
                  ??_create_name 0026                 disk_initialize@n 0088  
                     ld_clust@cl 0024                       ld_clust@fs 001A  
               ?_tratamento_uart 0001                ??_inicializa_shrc 001A  
    __size_of_inicializa_tarefas 0024                   __end_of_SDCard 4166  
                  ??_find_volume 00B4                    ??_disk_status 001A  
           ??_posicao_cursor_lcd 001E                   _xmit_datablock 52B0  
                 __end_of___lmul 569E                      st_clust@dir 001A  
                 __end_of___wmul 5A7A                   __end_of_f_open 2A66  
                  ??_escalonador 01C2                      ?_init_ports 0001  
                 __end_of_f_sync 3EC6                   clust2sect@clst 0028  
                 __end_of_select 5B2A             __size_of_sync_window 0172  
            start_initialization 5332                      __end_of_isr 43D4  
      __size_of_mensagem_inicial 0082                       mem_cmp@cnt 001E  
                     mem_cmp@dst 001A                       mem_cmp@src 001C  
                     mem_cpy@cnt 001E                      put_fat@clst 00A7  
                     mem_cpy@dst 001A                       mem_cpy@src 001C  
                ?_rcvr_datablock 0020                         ??_SDCard 002E  
             i2_write_timer_zero 5B76          __end_of_recebe_dado_SPI 5648  
                _disk_initialize 3682                       mem_set@cnt 001E  
                     mem_set@dst 001A                       mem_set@val 001C  
               _data_uart_recebe 0045                      _dado_buffer 0178  
         __end_of_xmit_datablock 5332            __size_of_dummy_clocks 003E  
                  ??_follow_path 002E              __size_of_disk_ioctl 049C  
            __end_of_create_name 3682              ?i2_write_timer_zero 0001  
            __size_of_disk_write 015E                         ??___lmul 0022  
                       ??___wmul 001E                         ??_f_open 01BE  
                       ??_f_sync 002E                      ?_wait_ready 0001  
                    __pdataBANK0 00FF                      __pdataBANK1 01C5  
               __CFG_LPT1OSC$OFF 000000              __end_of_find_volume 0B04  
            __end_of_disk_status 5B76              __size_of_clust2sect 00BE  
                       ??_select 001F             __end_of_remove_chain 42AE  
        __end_of_escreve_cmd_lcd 5124                rcvr_datablock@btr 0022  
   __size_of_endereco_cursor_lcd 006A                rcvr_datablock@tmr 0026  
                    __pbssBIGRAM 0350                      __pbssCOMRAM 002E  
                  __pcstackBANK0 0060                    __pcstackBANK1 017F  
                  __pcstackBANK3 0300                   _init_interrupt 5B40  
           ??i2_write_timer_zero 0003              __end_of_escalonador 4E14  
                    _data_buffer 0169                __size_of_check_fs 00F4  
                   check_fs@sect 00A7                __size_of_deselect 0004  
              __size_of_dir_find 00F8                     _dummy_clocks 591E  
                 _init_oscilador 5BCA                __size_of_dir_next 041C  
              __size_of_ld_clust 007E              __size_of_init_ports 0018  
          _escreve_frase_ram_lcd 56F0      __end_of_escreve_inteiro_lcd 591E  
              __size_of_init_lcd 009E                 ___lwdiv@dividend 001A  
              delay@contador_int 001B                delay@contador_ext 001A  
                ?_xmit_datablock 001F                        _gga_index 0036  
                      __pintcode 0008                    __pmediumconst 610C  
                       SDCard@bw 032D                __size_of_send_cmd 0048  
                   ??___send_cmd 002E                        _dir_alloc 44E0  
                       ?___lldiv 001A                __size_of_validate 0094  
                      __npowers_ 615C                         ?___lwdiv 001A  
                       ?___lwmod 001A                __size_of_response 000C  
                       ?_f_close 00B8                        _disk_read 48D2  
                       ?_chk_chr 001A                    follow_path@dp 0183  
             _sinaliza_int_timer 0044                         ?_f_lseek 00D7  
                  follow_path@ns 0189                __size_of_st_clust 002A  
            __end_of_follow_path 4018                         ?_f_mount 00BC  
                       ?_dir_sdi 00BF                         ?_f_write 00D7  
                       ?_get_fat 00A5                         ?_mem_cmp 001A  
                       ?_mem_cpy 001A           __end_of_init_interrupt 5B52  
                       ?_mem_set 001A              ___send_cmd@argument 0073  
 __size_of_escreve_caractere_lcd 0072    __end_of_escreve_caractere_lcd 54A2  
                       ?_proceed 0001                        f_close@fp 00B8  
                       ?_put_fat 00A5                 ___lwdiv@quotient 001F  
                 __size_of_delay 0024          __end_of_disk_initialize 38D2  
         __end_of_init_oscilador 5BD2                         ?_sync_fs 00A4  
                      _p_tarefas 00F2                find_volume@fasize 01AC  
            __size_of_wait_ready 003A               __end_of___send_cmd 4CB2  
                    _create_name 33E4                   ___wmul@product 001E  
                       _LATBbits 000F8A                        f_lseek@fp 00D7  
              find_volume@szbfat 0195                        f_open@dir 0315  
               ?_recebe_dado_SPI 0001                        f_open@res 0314  
                      f_open@sfn 0300                find_volume@sysect 019B  
                       _PIE1bits 000F9D                        _rmc_index 0034  
                    _find_volume 0012                      _disk_status 5B64  
                  ??_move_window 00A0                        f_mount@fs 00BC  
                      f_mount@rp 00C4                  follow_path@path 0185  
                       _PIR1bits 000F9E                         _PIR2bits 000FA1  
                  move_window@fs 009A                ?_write_timer_zero 001A  
                      dir_find@c 017F                       ?_dir_alloc 00EA  
                remove_chain@res 00CA                  remove_chain@nxt 00CB  
             leitura_chave@F3840 6194               leitura_chave@F3842 6183  
             leitura_chave@F3838 61A5                        f_sync@dir 00B6  
                      f_sync@res 00B5                        dir_sdi@ic 00CA  
                      dir_sdi@dp 00BF         posicao_cursor_lcd@coluna 001D  
                      dir_next@c 00E2                        dir_next@i 00E4  
                     ?_disk_read 007B               ??_write_timer_zero 001C  
                      f_write@cc 0193       posicao_cursor_lcd@endereco 001F  
                      f_write@bw 00DD                        f_write@fp 00D7  
                      get_fat@bc 00BD                        get_fat@fs 00A5  
      __size_of_recebe_dado_uart 0012                        get_fat@wc 00B5  
                    _escalonador 4D66                       _ADCON0bits 000FC2  
                     _ADCON1bits 000FC1                       _ADCON2bits 000FC0  
              ___wmul@multiplier 001A                 ?_escreve_cmd_lcd 0001  
    escreve_frase_ram_lcd@buffer 001D                  ?_init_interrupt 0001  
                       _CardType 00FE                     ??_disk_ioctl 007E  
                   ??_disk_write 0083                   _disk_read$2261 0084  
                _inicializa_shrc 5BA6                     f_lseek@ifptr 017F  
               _mensagem_inicial 51AC                     f_lseek@nsect 0184  
                     st_clust@cl 001C                  ?_init_oscilador 0001  
                   ??_clust2sect 0060                ___lmul@multiplier 001A  
                      copy_data0 5346           ?_escreve_frase_ram_lcd 001D  
                     put_fat@res 00BD                       put_fat@val 00AB  
                     _EECON1bits 000FA6                move_window@sector 009C  
       escreve_dado_SPI@contador 001A                  dir_next@stretch 00D9  
       escreve_inteiro_lcd@F3966 01DB                         __Hrparam 0000  
      __size_of_escreve_dado_SPI 0044                      _info_chaves 015A  
                       __Lrparam 0000                      _follow_path 3EC6  
             __end_of_disk_ioctl 1E56            __size_of_remove_chain 0148  
             __end_of_disk_write 3D6C                 __size_of___lldiv 0082  
               __size_of___lwdiv 0052                 __size_of___lwmod 0042  
                   ??_init_ports 001A              __end_of_move_window 4EC2  
             __end_of_clust2sect 4B40         escreve_inteiro_lcd@valor 002C  
               __size_of_f_close 003E         escreve_inteiro_lcd@texto 0066  
               __size_of_chk_chr 004E                 __size_of_f_lseek 06C8  
               __size_of_f_mount 00B4                 __size_of_dir_sdi 02CE  
               __size_of_f_write 07EE                 __size_of_get_fat 037E  
          __end_of_init_hardware 5B40                         _check_fs 47DE  
              _get_ldnumber$2767 001E             _disk_initialize$2252 0082  
               __size_of_mem_cmp 0070                 __size_of_mem_cpy 00BA  
               __size_of_mem_set 002C              xmit_datablock@token 0022  
                       _gga_code 0031                  ___lwdiv@divisor 001C  
               ??_rcvr_datablock 0024                  dir_register@res 0187  
                       _deselect 5BD2                  ___lwdiv@counter 001E  
                       _fileName 01C5                         __ptext10 5B9A  
                       __ptext11 5A7A                         __ptext20 46E6  
                       __ptext12 5BA6                         __ptext21 54A2  
                       __ptext13 4D66                         __ptext30 0012  
                       __ptext22 33E4                         __ptext14 4018  
                       __ptext31 45E4                         __ptext23 5742  
                       __ptext15 0B04                         __ptext40 522E  
                       __ptext32 3682                         __ptext24 49AC  
                       __ptext16 267A                         __ptext41 58A2  
                       __ptext33 47DE                         __ptext25 4B40  
                       __ptext17 4166                         __ptext50 4E14  
                       __ptext42 3D6C                         __ptext34 12F2  
                       __ptext26 44E0                         __ptext18 3EC6  
                       __ptext51 3A9C                         __ptext43 5004  
                       __ptext35 2DE4                         __ptext27 3116  
                       __ptext19 53B2                         __ptext60 5BB2  
                       __ptext52 3C0E                         __ptext44 5B64  
                       __ptext36 2272                         __ptext28 1E56  
                       __ptext61 5BBE                         __ptext53 52B0  
                       __ptext45 38D2                         __ptext37 2A66  
                       __ptext29 4CB2                         __ptext70 5582  
                       __ptext62 58E0                         __ptext54 48D2  
                       __ptext46 59FE                         __ptext38 4A82  
                       __ptext71 56F0                         __ptext63 57D8  
                       __ptext55 5790                         __ptext47 19BA  
                       __ptext39 5648                         __ptext80 5B88  
                       __ptext72 5430                         __ptext64 4EC2  
                       __ptext56 4BFA                         __ptext48 5A54  
                       __ptext81 0000                         __ptext73 591E  
                       __ptext65 5860                         __ptext57 5B12  
                       __ptext49 5A2A                         __ptext74 581C  
                       __ptext66 569E                         __ptext58 5998  
                       __ptext75 5098                         __ptext67 5124  
                       __ptext59 5BD2                         __ptext76 5A9E  
                       __ptext68 55EC                         _dir_find 46E6  
                       __ptext69 5512                         __ptext78 5B76  
                       __ptext79 43D4                         _fileSize 0161  
                       _dir_next 1E56                         __powers_ 6135  
               __size_of_proceed 000C                    dir_alloc@nent 00EC  
               ?_disk_initialize 0001                         _ld_clust 53B2  
               __size_of_put_fat 0408                   sync_window@res 0093  
                 _timeout_tarefa 00FC                     _rmc_pointers 014E  
               __size_of_sync_fs 01CA       __end_of_inicializa_tarefas 5A9E  
       i2write_timer_zero@timer0 0001                         _init_lcd 4F66  
                  __size_of_main 002C                       sync_fs@res 00AE  
                   _remove_chain 4166                    __size_of_itoa 0044  
                  __size_of_utoa 00A4                 find_volume@bsect 01B0  
            _endereco_cursor_lcd 5582               __end_of_init_ports 5B12  
               find_volume@nclst 01A7                 find_volume@tsect 01A3  
               find_volume@wmode 00B3                _comma_counter_gga 0040  
                  dummy_clocks@i 001F                         f_open@dj 0317  
                       f_open@cl 030C                    dummy_clocks@n 001E  
                       f_open@fp 01B9                         f_open@dw 0310  
              _comma_counter_rmc 003F                         _send_cmd 5790  
                       _rmc_code 002E                         _validate 5004  
                       _response 5BB2                         f_sync@fp 00AF  
                       f_sync@tm 00B1      __size_of_posicao_cursor_lcd 0070  
                       int$flags 0046                      ??_dir_alloc 017F  
        posicao_cursor_lcd@linha 001E                         _st_clust 5A2A  
                       get_fat@p 00B7         __size_of_tratamento_uart 010C  
                   ??_wait_ready 001D                    ??_sync_window 0087  
                    ??_disk_read 002E                      f_lseek@clst 018C  
        __end_of_inicializa_shrc 5BB2            __CFG_CPUDIV$OSC1_PLL2 000000  
           ?_endereco_cursor_lcd 0001                         mem_cmp@d 0023  
                       mem_cmp@r 0027                         mem_cmp@s 0025  
                     _INTCONbits 000FF2                        put_fat@bc 00BB  
                       mem_cpy@d 0022                        put_fat@fs 00A5  
                       mem_cpy@s 0024                         mem_set@d 0020  
                       itoa@base 0064                _config_timer_dois 5B9A  
                   _tempo_backup 0165                _config_timer_zero 5AE0  
                       intlevel2 0000                    wait_ready@tmr 001D  
             xmit_datablock@buff 001F               ?_config_timer_dois 0001  
       mensagem_inicial@msg_dois 0071               xmit_datablock@resp 0025  
             ?_config_timer_zero 0001                     _tempo_tarefa 00EE  
                 dir_register@dp 0185                 ??_xmit_datablock 0023  
               ___lwmod@dividend 001A               __end_of_wait_ready 59D2  
               ___lldiv@dividend 001A                     dir_alloc@res 0184  
                  sync_window@fs 0085                    sync_window@nf 0094  
                    f_mount@path 00BE                        sync_fs@fs 00A4  
            ??_config_timer_dois 001A                       _OSCCONbits 000FD3  
            ??_config_timer_zero 001E                      _move_window 4E14  
                       put_fat@p 00BE                 _recebe_dado_uart 5B88  
        recebe_dado_SPI@contador 001C                         utoa@base 0025  
          ??_endereco_cursor_lcd 001C                    ?_dir_register 0185  
       ??_leitura_chaves_sistema 001A                     response@buff 001D  
                    dir_alloc@dp 00EA                 ___lldiv@quotient 0022  
                ___lwmod@divisor 001C                  ___lwmod@counter 001E  
                    dir_find@dir 0180              __end_of_sync_window 3C0E  
                    dir_find@res 0182        __end_of_config_timer_dois 5BA6  
                  ?_create_chain 00C0        __end_of_config_timer_zero 5AFA  
    __size_ofi2_write_timer_zero 0012                      _SSPCON1bits 000FC6  
                   dir_next@clst 00E6                 _create_name$2743 0060  
         escreve_cmd_lcd@comando 001C                      dir_sdi@clst 00D0  
                    dir_sdi@sect 00CC                     ?_create_name 0022  
                   f_write@csect 0192                     f_write@wbuff 0190  
                   _put_fat$2520 00B9                     _put_fat$2519 00B7  
                    f_write@buff 00D9                      f_write@clst 0199  
                    f_write@sect 0195                     ?_find_volume 00AF  
               _escreve_dado_SPI 581C                      f_write@wcnt 019D  
                  ?_get_ldnumber 001A                     ?_disk_status 0001  
  __end_ofmensagem_inicial@F4151 61C7    __end_ofmensagem_inicial@F4149 61D8  
