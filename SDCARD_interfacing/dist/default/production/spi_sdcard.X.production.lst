

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Dec 14 12:50:16 2021

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    45  0000                     
    46                           ; Version 1.45
    47                           ; Generated 16/11/2017 GMT
    48                           ; 
    49                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    50                           ; All rights reserved.
    51                           ; 
    52                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    53                           ; 
    54                           ; Redistribution and use in source and binary forms, with or without modification, are
    55                           ; permitted provided that the following conditions are met:
    56                           ; 
    57                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    58                           ;        conditions and the following disclaimer.
    59                           ; 
    60                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    61                           ;        of conditions and the following disclaimer in the documentation and/or other
    62                           ;        materials provided with the distribution.
    63                           ; 
    64                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    65                           ;        software without specific prior written permission.
    66                           ; 
    67                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    68                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    69                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    70                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    71                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    72                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    73                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    74                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    75                           ; 
    76                           ; 
    77                           ; Code-generator required, PIC18F4550 Definitions
    78                           ; 
    79                           ; SFR Addresses
    80  0000                     
    81                           	psect	idataBANK1
    82  0000'                    __pidataBANK1:
    83                           	opt stack 0
    84                           
    85                           ;initializer for _fileName
    86  0000' 63                 	db	99
    87  0001' 68                 	db	104
    88  0002' 65                 	db	101
    89  0003' 63                 	db	99
    90  0004' 6B                 	db	107
    91  0005' 2E                 	db	46
    92  0006' 74                 	db	116
    93  0007' 78                 	db	120
    94  0008' 74                 	db	116
    95  0009' 00                 	db	0
    96                           
    97                           	psect	smallconst
    98  0000'                    __psmallconst:
    99                           	opt stack 0
   100  0000' 00                 	db	0
   101  0001'                    create_name@cvt:
   102                           	opt stack 0
   103  0001' 80                 	db	128
   104  0002' 9A                 	db	154
   105  0003' 90                 	db	144
   106  0004' 41                 	db	65
   107  0005' 8E                 	db	142
   108  0006' 41                 	db	65
   109  0007' 8F                 	db	143
   110  0008' 80                 	db	128
   111  0009' 45                 	db	69
   112  000A' 45                 	db	69
   113  000B' 45                 	db	69
   114  000C' 49                 	db	73
   115  000D' 49                 	db	73
   116  000E' 49                 	db	73
   117  000F' 8E                 	db	142
   118  0010' 8F                 	db	143
   119  0011' 90                 	db	144
   120  0012' 92                 	db	146
   121  0013' 92                 	db	146
   122  0014' 4F                 	db	79
   123  0015' 99                 	db	153
   124  0016' 4F                 	db	79
   125  0017' 55                 	db	85
   126  0018' 55                 	db	85
   127  0019' 59                 	db	89
   128  001A' 99                 	db	153
   129  001B' 9A                 	db	154
   130  001C' 9B                 	db	155
   131  001D' 9C                 	db	156
   132  001E' 9D                 	db	157
   133  001F' 9E                 	db	158
   134  0020' 9F                 	db	159
   135  0021' 41                 	db	65
   136  0022' 49                 	db	73
   137  0023' 4F                 	db	79
   138  0024' 55                 	db	85
   139  0025' A5                 	db	165
   140  0026' A5                 	db	165
   141  0027' A6                 	db	166
   142  0028' A7                 	db	167
   143  0029' A8                 	db	168
   144  002A' A9                 	db	169
   145  002B' AA                 	db	170
   146  002C' AB                 	db	171
   147  002D' AC                 	db	172
   148  002E' 21                 	db	33
   149  002F' AE                 	db	174
   150  0030' AF                 	db	175
   151  0031' B0                 	db	176
   152  0032' B1                 	db	177
   153  0033' B2                 	db	178
   154  0034' B3                 	db	179
   155  0035' B4                 	db	180
   156  0036' B5                 	db	181
   157  0037' B6                 	db	182
   158  0038' B7                 	db	183
   159  0039' B8                 	db	184
   160  003A' B9                 	db	185
   161  003B' BA                 	db	186
   162  003C' BB                 	db	187
   163  003D' BC                 	db	188
   164  003E' BD                 	db	189
   165  003F' BE                 	db	190
   166  0040' BF                 	db	191
   167  0041' C0                 	db	192
   168  0042' C1                 	db	193
   169  0043' C2                 	db	194
   170  0044' C3                 	db	195
   171  0045' C4                 	db	196
   172  0046' C5                 	db	197
   173  0047' C6                 	db	198
   174  0048' C7                 	db	199
   175  0049' C8                 	db	200
   176  004A' C9                 	db	201
   177  004B' CA                 	db	202
   178  004C' CB                 	db	203
   179  004D' CC                 	db	204
   180  004E' CD                 	db	205
   181  004F' CE                 	db	206
   182  0050' CF                 	db	207
   183  0051' D0                 	db	208
   184  0052' D1                 	db	209
   185  0053' D2                 	db	210
   186  0054' D3                 	db	211
   187  0055' D4                 	db	212
   188  0056' D5                 	db	213
   189  0057' D6                 	db	214
   190  0058' D7                 	db	215
   191  0059' D8                 	db	216
   192  005A' D9                 	db	217
   193  005B' DA                 	db	218
   194  005C' DB                 	db	219
   195  005D' DC                 	db	220
   196  005E' DD                 	db	221
   197  005F' DE                 	db	222
   198  0060' DF                 	db	223
   199  0061' E0                 	db	224
   200  0062' E1                 	db	225
   201  0063' E2                 	db	226
   202  0064' E3                 	db	227
   203  0065' E4                 	db	228
   204  0066' E5                 	db	229
   205  0067' E6                 	db	230
   206  0068' E7                 	db	231
   207  0069' E8                 	db	232
   208  006A' E9                 	db	233
   209  006B' EA                 	db	234
   210  006C' EB                 	db	235
   211  006D' EC                 	db	236
   212  006E' ED                 	db	237
   213  006F' EE                 	db	238
   214  0070' EF                 	db	239
   215  0071' F0                 	db	240
   216  0072' F1                 	db	241
   217  0073' F2                 	db	242
   218  0074' F3                 	db	243
   219  0075' F4                 	db	244
   220  0076' F5                 	db	245
   221  0077' F6                 	db	246
   222  0078' F7                 	db	247
   223  0079' F8                 	db	248
   224  007A' F9                 	db	249
   225  007B' FA                 	db	250
   226  007C' FB                 	db	251
   227  007D' FC                 	db	252
   228  007E' FD                 	db	253
   229  007F' FE                 	db	254
   230  0080' FF                 	db	255
   231  0081'                    __end_ofcreate_name@cvt:
   232                           	opt stack 0
   233  0000                     _PORTBbits	set	3969
   234  0000                     _PR2	set	4043
   235  0000                     _TMR2	set	4044
   236  0000                     _T2CON	set	4042
   237  0000                     _OSCCONbits	set	4051
   238  0000                     _TRISE	set	3990
   239  0000                     _TRISC	set	3988
   240  0000                     _TRISA	set	3986
   241  0000                     _TRISD	set	3989
   242  0000                     _LATB	set	3978
   243  0000                     _TRISB	set	3987
   244  0000                     _T0CONbits	set	4053
   245  0000                     _INTCONbits	set	4082
   246  0000                     _TMR0L	set	4054
   247  0000                     _TMR0H	set	4055
   248  0000                     _PIE1	set	3997
   249  0000                     _INTCON3	set	4080
   250  0000                     _INTCON2	set	4081
   251  0000                     _INTCON	set	4082
   252  0000                     _SPPCFG	set	3939
   253  0000                     _SPPCON	set	3941
   254  0000                     _T0CON	set	4053
   255  0000                     _LATBbits	set	3978
   256  0000                     _SSPCON1	set	4038
   257  0000                     _SSPBUF	set	4041
   258  0000                     _PIR1bits	set	3998
   259  0000                     _SSPSTATbits	set	4039
   260  0000                     _SSPCON1bits	set	4038
   261  0000                     _TMR2IF	set	31985
   262  0081'                    STR_3:
   263  0081' 53                 	db	83	;'S'
   264  0082' 50                 	db	80	;'P'
   265  0083' 49                 	db	73	;'I'
   266  0084' 20                 	db	32
   267  0085' 63                 	db	99	;'c'
   268  0086' 6F                 	db	111	;'o'
   269  0087' 6E                 	db	110	;'n'
   270  0088' 66                 	db	102	;'f'
   271  0089' 69                 	db	105	;'i'
   272  008A' 67                 	db	103	;'g'
   273  008B' 75                 	db	117	;'u'
   274  008C' 72                 	db	114	;'r'
   275  008D' 61                 	db	97	;'a'
   276  008E' 64                 	db	100	;'d'
   277  008F' 61                 	db	97	;'a'
   278  0090' 21                 	db	33
   279  0091' 00                 	db	0
   280  0092'                    STR_1:
   281  0092' 63                 	db	99	;'c'
   282  0093' 68                 	db	104	;'h'
   283  0094' 65                 	db	101	;'e'
   284  0095' 63                 	db	99	;'c'
   285  0096' 6B                 	db	107	;'k'
   286  0097' 2E                 	db	46
   287  0098' 74                 	db	116	;'t'
   288  0099' 78                 	db	120	;'x'
   289  009A' 74                 	db	116	;'t'
   290  009B' 00                 	db	0
   291  009C'                    STR_2:
   292  009C' 53                 	db	83	;'S'
   293  009D' 44                 	db	68	;'D'
   294  009E' 5F                 	db	95	;'_'
   295  009F' 43                 	db	67	;'C'
   296  00A0' 61                 	db	97	;'a'
   297  00A1' 72                 	db	114	;'r'
   298  00A2' 64                 	db	100	;'d'
   299  00A3' 00                 	db	0
   300  00A4' 00                 	db	0	; dummy byte at the end
   301  0000                     
   302                           ; #config settings
   303                           
   304                           	psect	cinit
   305  0000'                    __pcinit:
   306                           	opt stack 0
   307  0000'                    start_initialization:
   308                           	opt stack 0
   309  0000'                    __initialization:
   310                           	opt stack 0
   311                           
   312                           ; Initialize objects allocated to BANK1 (10 bytes)
   313                           ; load TBLPTR registers with __pidataBANK1
   314  0000' 0E00'              	movlw	low __pidataBANK1
   315  0002' 6EF6               	movwf	tblptrl,c
   316  0004' 0E00'              	movlw	high __pidataBANK1
   317  0006' 6EF7               	movwf	tblptrh,c
   318  0008' 0E00'              	movlw	low (__pidataBANK1 shr (0+16))
   319  000A' 6EF8               	movwf	tblptru,c
   320  000C' EE00' F000'        	lfsr	0,__pdataBANK1
   321  0010' EE10 F00A          	lfsr	1,10
   322  0014'                    copy_data0:
   323  0014' 0009               	tblrd		*+
   324  0016' CFF5 FFEE          	movff	tablat,postinc0
   325  001A' 50E5               	movf	postdec1,w,c
   326  001C' 50E1               	movf	fsr1l,w,c
   327  001E' E1FA               	bnz	copy_data0
   328                           
   329                           ; Clear objects allocated to BIGRAM (1536 bytes)
   330  0020' EE00' F000'        	lfsr	0,__pbssBIGRAM
   331  0024' EE16 F000          	lfsr	1,1536
   332  0028'                    clear_0:
   333  0028' 6AEE               	clrf	postinc0,c
   334  002A' 50E5               	movf	postdec1,w,c
   335  002C' 50E1               	movf	fsr1l,w,c
   336  002E' E1FC               	bnz	clear_0
   337  0030' 50E2               	movf	fsr1h,w,c
   338  0032' E1FA               	bnz	clear_0
   339                           
   340                           ; Clear objects allocated to BANK1 (100 bytes)
   341  0034' EE00' F000'        	lfsr	0,__pbssBANK1
   342  0038' 0E64               	movlw	100
   343  003A'                    clear_1:
   344  003A' 6AEE               	clrf	postinc0,c
   345  003C' 06E8               	decf	wreg,f,c
   346  003E' E1FD               	bnz	clear_1
   347                           
   348                           ; Clear objects allocated to BANK0 (13 bytes)
   349  0040' EE00' F000'        	lfsr	0,__pbssBANK0
   350  0044' 0E0D               	movlw	13
   351  0046'                    clear_2:
   352  0046' 6AEE               	clrf	postinc0,c
   353  0048' 06E8               	decf	wreg,f,c
   354  004A' E1FD               	bnz	clear_2
   355  004C'                    end_of_initialization:
   356                           	opt stack 0
   357  004C'                    __end_of__initialization:
   358                           	opt stack 0
   359  004C' 0E00'              	movlw	low (__Lmediumconst shr (0+16))
   360  004E' 6EF8               	movwf	tblptru,c
   361  0050' 0100               	movlb	0
   362  0052' EF00' F000'        	goto	_main	;jump to C main() function
   363                           tblptru	equ	0xFF8
   364                           tblptrh	equ	0xFF7
   365                           tblptrl	equ	0xFF6
   366                           tablat	equ	0xFF5
   367                           postinc0	equ	0xFEE
   368                           wreg	equ	0xFE8
   369                           postdec1	equ	0xFE5
   370                           fsr1h	equ	0xFE2
   371                           fsr1l	equ	0xFE1
   372                           
   373                           	psect	bssBANK0
   374  0000'                    __pbssBANK0:
   375                           	opt stack 0
   376  0000'                    _fileSize:
   377                           	opt stack 0
   378  0000'                    	ds	4
   379  0004'                    _FatFs:
   380                           	opt stack 0
   381  0004'                    	ds	2
   382  0006'                    _flag:
   383                           	opt stack 0
   384  0006'                    	ds	2
   385  0008'                    _rd:
   386                           	opt stack 0
   387  0008'                    	ds	2
   388  000A'                    _estado:
   389                           	opt stack 0
   390  000A'                    	ds	1
   391  000B'                    _s:
   392                           	opt stack 0
   393  000B'                    	ds	1
   394  000C'                    _Result:
   395                           	opt stack 0
   396  000C'                    	ds	1
   397                           tblptru	equ	0xFF8
   398                           tblptrh	equ	0xFF7
   399                           tblptrl	equ	0xFF6
   400                           tablat	equ	0xFF5
   401                           postinc0	equ	0xFEE
   402                           wreg	equ	0xFE8
   403                           postdec1	equ	0xFE5
   404                           fsr1h	equ	0xFE2
   405                           fsr1l	equ	0xFE1
   406                           
   407                           	psect	bssBANK1
   408  0000'                    __pbssBANK1:
   409                           	opt stack 0
   410  0000'                    _folder:
   411                           	opt stack 0
   412  0000'                    	ds	48
   413  0030'                    _txt:
   414                           	opt stack 0
   415  0030'                    	ds	20
   416  0044'                    _data_buffer_32:
   417                           	opt stack 0
   418  0044'                    	ds	32
   419                           tblptru	equ	0xFF8
   420                           tblptrh	equ	0xFF7
   421                           tblptrl	equ	0xFF6
   422                           tablat	equ	0xFF5
   423                           postinc0	equ	0xFEE
   424                           wreg	equ	0xFE8
   425                           postdec1	equ	0xFE5
   426                           fsr1h	equ	0xFE2
   427                           fsr1l	equ	0xFE1
   428                           
   429                           	psect	dataBANK1
   430  0000'                    __pdataBANK1:
   431                           	opt stack 0
   432  0000'                    _fileName:
   433                           	opt stack 0
   434  0000'                    	ds	10
   435                           tblptru	equ	0xFF8
   436                           tblptrh	equ	0xFF7
   437                           tblptrl	equ	0xFF6
   438                           tablat	equ	0xFF5
   439                           postinc0	equ	0xFEE
   440                           wreg	equ	0xFE8
   441                           postdec1	equ	0xFE5
   442                           fsr1h	equ	0xFE2
   443                           fsr1l	equ	0xFE1
   444                           
   445                           	psect	bssBIGRAM
   446  0000'                    __pbssBIGRAM:
   447                           	opt stack 0
   448  0000'                    disk_readp@arr:
   449                           	opt stack 0
   450  0000'                    	ds	512
   451  0200'                    	ds	512
   452  0400'                    _sector_buffer:
   453                           	opt stack 0
   454  0400'                    	ds	512
   455                           tblptru	equ	0xFF8
   456                           tblptrh	equ	0xFF7
   457                           tblptrl	equ	0xFF6
   458                           tablat	equ	0xFF5
   459                           postinc0	equ	0xFEE
   460                           wreg	equ	0xFE8
   461                           postdec1	equ	0xFE5
   462                           fsr1h	equ	0xFE2
   463                           fsr1l	equ	0xFE1
   464                           
   465                           	psect	cstackBANK0
   466  0000'                    __pcstackBANK0:
   467                           	opt stack 0
   468  0000'                    follow_path@dj:
   469                           	opt stack 0
   470  0000'                    pf_read@rbuff:
   471                           	opt stack 0
   472  0000'                    pf_write@p:
   473                           	opt stack 0
   474  0000'                    pf_mount@buf:
   475                           	opt stack 0
   476                           
   477                           ; 36 bytes @ 0x0
   478  0000'                    	ds	2
   479  0002'                    follow_path@dir:
   480                           	opt stack 0
   481  0002'                    _pf_read$799:
   482                           	opt stack 0
   483  0002'                    pf_write@sect:
   484                           	opt stack 0
   485                           
   486                           ; 4 bytes @ 0x2
   487  0002'                    	ds	2
   488  0004'                    pf_read@dr:
   489                           	opt stack 0
   490  0004'                    follow_path@path:
   491                           	opt stack 0
   492                           
   493                           ; 2 bytes @ 0x4
   494  0004'                    	ds	1
   495  0005'                    pf_read@sect:
   496                           	opt stack 0
   497                           
   498                           ; 4 bytes @ 0x5
   499  0005'                    	ds	1
   500  0006'                    follow_path@res:
   501                           	opt stack 0
   502  0006'                    pf_write@remain:
   503                           	opt stack 0
   504                           
   505                           ; 4 bytes @ 0x6
   506  0006'                    	ds	1
   507  0007'                    pf_open@path:
   508                           	opt stack 0
   509                           
   510                           ; 2 bytes @ 0x7
   511  0007'                    	ds	2
   512  0009'                    ??_pf_open:
   513  0009'                    pf_read@remain:
   514                           	opt stack 0
   515                           
   516                           ; 4 bytes @ 0x9
   517  0009'                    	ds	1
   518  000A'                    pf_write@clst:
   519                           	opt stack 0
   520                           
   521                           ; 4 bytes @ 0xA
   522  000A'                    	ds	3
   523  000D'                    pf_read@clst:
   524                           	opt stack 0
   525                           
   526                           ; 4 bytes @ 0xD
   527  000D'                    	ds	1
   528  000E'                    pf_write@cs:
   529                           	opt stack 0
   530                           
   531                           ; 1 bytes @ 0xE
   532  000E'                    	ds	1
   533  000F'                    pf_write@wcnt:
   534                           	opt stack 0
   535                           
   536                           ; 2 bytes @ 0xF
   537  000F'                    	ds	2
   538  0011'                    pf_read@cs:
   539                           	opt stack 0
   540  0011'                    pf_write@fs:
   541                           	opt stack 0
   542                           
   543                           ; 2 bytes @ 0x11
   544  0011'                    	ds	1
   545  0012'                    pf_read@rcnt:
   546                           	opt stack 0
   547                           
   548                           ; 2 bytes @ 0x12
   549  0012'                    	ds	2
   550  0014'                    pf_read@fs:
   551                           	opt stack 0
   552                           
   553                           ; 2 bytes @ 0x14
   554  0014'                    	ds	11
   555  001F'                    pf_open@sp:
   556                           	opt stack 0
   557                           
   558                           ; 12 bytes @ 0x1F
   559  001F'                    	ds	5
   560  0024'                    pf_mount@tsect:
   561                           	opt stack 0
   562                           
   563                           ; 4 bytes @ 0x24
   564  0024'                    	ds	4
   565  0028'                    pf_mount@mclst:
   566                           	opt stack 0
   567                           
   568                           ; 4 bytes @ 0x28
   569  0028'                    	ds	3
   570  002B'                    pf_open@dir:
   571                           	opt stack 0
   572                           
   573                           ; 32 bytes @ 0x2B
   574  002B'                    	ds	1
   575  002C'                    pf_mount@bsect:
   576                           	opt stack 0
   577                           
   578                           ; 4 bytes @ 0x2C
   579  002C'                    	ds	4
   580  0030'                    pf_mount@fsize:
   581                           	opt stack 0
   582                           
   583                           ; 4 bytes @ 0x30
   584  0030'                    	ds	4
   585  0034'                    pf_mount@fmt:
   586                           	opt stack 0
   587                           
   588                           ; 1 bytes @ 0x34
   589  0034'                    	ds	23
   590  004B'                    pf_open@res:
   591                           	opt stack 0
   592                           
   593                           ; 1 bytes @ 0x4B
   594  004B'                    	ds	1
   595  004C'                    pf_open@fs:
   596                           	opt stack 0
   597                           
   598                           ; 2 bytes @ 0x4C
   599  004C'                    	ds	2
   600  004E'                    pf_open@dj:
   601                           	opt stack 0
   602                           
   603                           ; 16 bytes @ 0x4E
   604  004E'                    	ds	16
   605  005E'                    main@FResult:
   606                           	opt stack 0
   607                           
   608                           ; 1 bytes @ 0x5E
   609  005E'                    	ds	1
   610  005F'                    main@br:
   611                           	opt stack 0
   612                           
   613                           ; 2 bytes @ 0x5F
   614  005F'                    	ds	2
   615  0061'                    main@fs:
   616                           	opt stack 0
   617                           
   618                           ; 42 bytes @ 0x61
   619  0061'                    	ds	42
   620                           tblptru	equ	0xFF8
   621                           tblptrh	equ	0xFF7
   622                           tblptrl	equ	0xFF6
   623                           tablat	equ	0xFF5
   624                           postinc0	equ	0xFEE
   625                           wreg	equ	0xFE8
   626                           postdec1	equ	0xFE5
   627                           fsr1h	equ	0xFE2
   628                           fsr1l	equ	0xFE1
   629                           
   630                           	psect	cstackCOMRAM
   631  0000'                    __pcstackCOMRAM:
   632                           	opt stack 0
   633  0000'                    ?_dummy_clocks:
   634                           	opt stack 0
   635  0000'                    ?_mem_cmp:
   636                           	opt stack 0
   637  0000'                    ?_get_clust:
   638                           	opt stack 0
   639  0000'                    ?___lmul:
   640                           	opt stack 0
   641  0000'                    ?___lldiv:
   642                           	opt stack 0
   643  0000'                    _posicao_cursor_lcd$1:
   644                           	opt stack 0
   645  0000'                    inicializa_SPI@SPI_mode:
   646                           	opt stack 0
   647  0000'                    WriteSPI_@dado:
   648                           	opt stack 0
   649  0000'                    response@buff:
   650                           	opt stack 0
   651  0000'                    _escreve_frase_ram_lcd$0:
   652                           	opt stack 0
   653  0000'                    mem_set@dst:
   654                           	opt stack 0
   655  0000'                    mem_cmp@dst:
   656                           	opt stack 0
   657  0000'                    get_clust@dir:
   658                           	opt stack 0
   659  0000'                    ___lmul@multiplier:
   660                           	opt stack 0
   661  0000'                    ___lldiv@dividend:
   662                           	opt stack 0
   663                           
   664                           ; 4 bytes @ 0x0
   665  0000'                    	ds	1
   666  0001'                    Command@arg:
   667                           	opt stack 0
   668                           
   669                           ; 4 bytes @ 0x1
   670  0001'                    	ds	1
   671  0002'                    mem_set@val:
   672                           	opt stack 0
   673  0002'                    mem_cmp@src:
   674                           	opt stack 0
   675                           
   676                           ; 2 bytes @ 0x2
   677  0002'                    	ds	2
   678  0004'                    ??_get_clust:
   679  0004'                    mem_set@cnt:
   680                           	opt stack 0
   681  0004'                    mem_cmp@cnt:
   682                           	opt stack 0
   683  0004'                    ___lmul@multiplicand:
   684                           	opt stack 0
   685  0004'                    ___lldiv@divisor:
   686                           	opt stack 0
   687                           
   688                           ; 4 bytes @ 0x4
   689  0004'                    	ds	1
   690  0005'                    Command@CRC:
   691                           	opt stack 0
   692                           
   693                           ; 1 bytes @ 0x5
   694  0005'                    	ds	1
   695  0006'                    ??_mem_cmp:
   696  0006'                    Command@CMD:
   697                           	opt stack 0
   698  0006'                    mem_set@d:
   699                           	opt stack 0
   700                           
   701                           ; 2 bytes @ 0x6
   702  0006'                    	ds	1
   703  0007'                    Command@argument:
   704                           	opt stack 0
   705                           
   706                           ; 1 bytes @ 0x7
   707  0007'                    	ds	1
   708  0008'                    reset@i:
   709                           	opt stack 0
   710  0008'                    disk_readp@rd:
   711                           	opt stack 0
   712  0008'                    create_name@dj:
   713                           	opt stack 0
   714  0008'                    disk_writep@wr:
   715                           	opt stack 0
   716  0008'                    ___lmul@product:
   717                           	opt stack 0
   718  0008'                    ___lldiv@quotient:
   719                           	opt stack 0
   720                           
   721                           ; 4 bytes @ 0x8
   722  0008'                    	ds	1
   723  0009'                    mem_cmp@d:
   724                           	opt stack 0
   725                           
   726                           ; 2 bytes @ 0x9
   727  0009'                    	ds	1
   728  000A'                    reset@count:
   729                           	opt stack 0
   730  000A'                    create_name@path:
   731                           	opt stack 0
   732  000A'                    disk_readp@sector:
   733                           	opt stack 0
   734                           
   735                           ; 4 bytes @ 0xA
   736  000A'                    	ds	1
   737  000B'                    mem_cmp@s:
   738                           	opt stack 0
   739  000B'                    disk_writep@sc:
   740                           	opt stack 0
   741                           
   742                           ; 4 bytes @ 0xB
   743  000B'                    	ds	1
   744  000C'                    ??_create_name:
   745  000C'                    ?_clust2sect:
   746                           	opt stack 0
   747  000C'                    reset@buff:
   748                           	opt stack 0
   749  000C'                    ___lldiv@counter:
   750                           	opt stack 0
   751  000C'                    get_clust@fs:
   752                           	opt stack 0
   753  000C'                    clust2sect@clst:
   754                           	opt stack 0
   755                           
   756                           ; 4 bytes @ 0xC
   757  000C'                    	ds	1
   758  000D'                    disk_initialize@i:
   759                           	opt stack 0
   760  000D'                    mem_cmp@r:
   761                           	opt stack 0
   762                           
   763                           ; 2 bytes @ 0xD
   764  000D'                    	ds	1
   765  000E'                    disk_readp@offset:
   766                           	opt stack 0
   767  000E'                    get_clust@clst:
   768                           	opt stack 0
   769                           
   770                           ; 4 bytes @ 0xE
   771  000E'                    	ds	1
   772  000F'                    ??_disk_writep:
   773  000F'                    disk_initialize@count1:
   774                           	opt stack 0
   775                           
   776                           ; 2 bytes @ 0xF
   777  000F'                    	ds	1
   778  0010'                    ??_clust2sect:
   779  0010'                    disk_readp@count:
   780                           	opt stack 0
   781                           
   782                           ; 2 bytes @ 0x10
   783  0010'                    	ds	1
   784  0011'                    disk_initialize@stat:
   785                           	opt stack 0
   786                           
   787                           ; 1 bytes @ 0x11
   788  0011'                    	ds	1
   789  0012'                    ??_disk_readp:
   790  0012'                    disk_initialize@count2:
   791                           	opt stack 0
   792                           
   793                           ; 2 bytes @ 0x12
   794  0012'                    	ds	1
   795  0013'                    create_name@d:
   796                           	opt stack 0
   797  0013'                    disk_writep@i:
   798                           	opt stack 0
   799                           
   800                           ; 2 bytes @ 0x13
   801  0013'                    	ds	1
   802  0014'                    disk_initialize@buff:
   803                           	opt stack 0
   804  0014'                    create_name@p:
   805                           	opt stack 0
   806                           
   807                           ; 2 bytes @ 0x14
   808  0014'                    	ds	1
   809  0015'                    disk_writep@j:
   810                           	opt stack 0
   811  0015'                    clust2sect@fs:
   812                           	opt stack 0
   813                           
   814                           ; 2 bytes @ 0x15
   815  0015'                    	ds	1
   816  0016'                    disk_readp@ptr:
   817                           	opt stack 0
   818  0016'                    create_name@ni:
   819                           	opt stack 0
   820                           
   821                           ; 1 bytes @ 0x16
   822  0016'                    	ds	1
   823  0017'                    disk_writep@buff:
   824                           	opt stack 0
   825  0017'                    create_name@si:
   826                           	opt stack 0
   827  0017'                    dir_rewind@dj:
   828                           	opt stack 0
   829  0017'                    disk_readp@start_add:
   830                           	opt stack 0
   831                           
   832                           ; 4 bytes @ 0x17
   833  0017'                    	ds	1
   834  0018'                    create_name@sfn:
   835                           	opt stack 0
   836                           
   837                           ; 2 bytes @ 0x18
   838  0018'                    	ds	1
   839  0019'                    
   840                           ; 1 bytes @ 0x19
   841  0019'                    	ds	1
   842  001A'                    create_name@i:
   843                           	opt stack 0
   844                           
   845                           ; 1 bytes @ 0x1A
   846  001A'                    	ds	1
   847  001B'                    disk_readp@buff:
   848                           	opt stack 0
   849  001B'                    create_name@c:
   850                           	opt stack 0
   851                           
   852                           ; 1 bytes @ 0x1B
   853  001B'                    	ds	1
   854  001C'                    disk_readp@length:
   855                           	opt stack 0
   856                           
   857                           ; 2 bytes @ 0x1C
   858  001C'                    	ds	1
   859  001D'                    _dir_rewind$605:
   860                           	opt stack 0
   861                           
   862                           ; 4 bytes @ 0x1D
   863  001D'                    	ds	1
   864  001E'                    ?_get_fat:
   865                           	opt stack 0
   866  001E'                    check_fs@buf:
   867                           	opt stack 0
   868  001E'                    get_fat@clst:
   869                           	opt stack 0
   870                           
   871                           ; 4 bytes @ 0x1E
   872  001E'                    	ds	2
   873  0020'                    check_fs@sect:
   874                           	opt stack 0
   875                           
   876                           ; 4 bytes @ 0x20
   877  0020'                    	ds	1
   878  0021'                    dir_rewind@fs:
   879                           	opt stack 0
   880                           
   881                           ; 2 bytes @ 0x21
   882  0021'                    	ds	1
   883  0022'                    ??_get_fat:
   884                           
   885                           ; 1 bytes @ 0x22
   886  0022'                    	ds	1
   887  0023'                    dir_rewind@clst:
   888                           	opt stack 0
   889                           
   890                           ; 4 bytes @ 0x23
   891  0023'                    	ds	1
   892  0024'                    ??_check_fs:
   893                           
   894                           ; 1 bytes @ 0x24
   895  0024'                    	ds	4
   896  0028'                    pf_mount@fs:
   897                           	opt stack 0
   898                           
   899                           ; 2 bytes @ 0x28
   900  0028'                    	ds	2
   901  002A'                    ??_pf_mount:
   902                           
   903                           ; 1 bytes @ 0x2A
   904  002A'                    	ds	14
   905  0038'                    _get_fat$545:
   906                           	opt stack 0
   907                           
   908                           ; 2 bytes @ 0x38
   909  0038'                    	ds	2
   910  003A'                    get_fat@wc:
   911                           	opt stack 0
   912                           
   913                           ; 2 bytes @ 0x3A
   914  003A'                    	ds	2
   915  003C'                    get_fat@ofs:
   916                           	opt stack 0
   917                           
   918                           ; 2 bytes @ 0x3C
   919  003C'                    	ds	2
   920  003E'                    get_fat@buf:
   921                           	opt stack 0
   922                           
   923                           ; 4 bytes @ 0x3E
   924  003E'                    	ds	4
   925  0042'                    get_fat@bc:
   926                           	opt stack 0
   927                           
   928                           ; 2 bytes @ 0x42
   929  0042'                    	ds	2
   930  0044'                    get_fat@fs:
   931                           	opt stack 0
   932                           
   933                           ; 2 bytes @ 0x44
   934  0044'                    	ds	2
   935  0046'                    dir_next@dj:
   936                           	opt stack 0
   937  0046'                    pf_read@buff:
   938                           	opt stack 0
   939  0046'                    pf_write@buff:
   940                           	opt stack 0
   941                           
   942                           ; 2 bytes @ 0x46
   943  0046'                    	ds	2
   944  0048'                    ??_dir_next:
   945  0048'                    pf_read@btr:
   946                           	opt stack 0
   947  0048'                    pf_write@btw:
   948                           	opt stack 0
   949                           
   950                           ; 2 bytes @ 0x48
   951  0048'                    	ds	2
   952  004A'                    pf_read@br:
   953                           	opt stack 0
   954  004A'                    pf_write@bw:
   955                           	opt stack 0
   956                           
   957                           ; 2 bytes @ 0x4A
   958  004A'                    	ds	2
   959  004C'                    ??_pf_write:
   960  004C'                    ??_pf_read:
   961                           
   962                           ; 1 bytes @ 0x4C
   963  004C'                    	ds	3
   964  004F'                    dir_next@fs:
   965                           	opt stack 0
   966                           
   967                           ; 2 bytes @ 0x4F
   968  004F'                    	ds	2
   969  0051'                    dir_next@clst:
   970                           	opt stack 0
   971                           
   972                           ; 4 bytes @ 0x51
   973  0051'                    	ds	4
   974  0055'                    dir_next@i:
   975                           	opt stack 0
   976                           
   977                           ; 2 bytes @ 0x55
   978  0055'                    	ds	2
   979  0057'                    dir_find@dj:
   980                           	opt stack 0
   981                           
   982                           ; 2 bytes @ 0x57
   983  0057'                    	ds	2
   984  0059'                    dir_find@dir:
   985                           	opt stack 0
   986                           
   987                           ; 2 bytes @ 0x59
   988  0059'                    	ds	2
   989  005B'                    ??_dir_find:
   990                           
   991                           ; 1 bytes @ 0x5B
   992  005B'                    	ds	2
   993  005D'                    dir_find@c:
   994                           	opt stack 0
   995                           
   996                           ; 1 bytes @ 0x5D
   997  005D'                    	ds	1
   998  005E'                    dir_find@res:
   999                           	opt stack 0
  1000                           
  1001                           ; 1 bytes @ 0x5E
  1002  005E'                    	ds	1
  1003  005F'                    tblptru	equ	0xFF8
  1004                           tblptrh	equ	0xFF7
  1005                           tblptrl	equ	0xFF6
  1006                           tablat	equ	0xFF5
  1007                           postinc0	equ	0xFEE
  1008                           wreg	equ	0xFE8
  1009                           postdec1	equ	0xFE5
  1010                           fsr1h	equ	0xFE2
  1011                           fsr1l	equ	0xFE1
  1012                           
  1013                           ; 1 bytes @ 0x5F
  1014 ;;
  1015 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1016 ;;
  1017 ;; *************** function _main *****************
  1018 ;; Defined at:
  1019 ;;		line 44 in file "main.c"
  1020 ;; Parameters:    Size  Location     Type
  1021 ;;		None
  1022 ;; Auto vars:     Size  Location     Type
  1023 ;;  fs             42   97[BANK0 ] struct .
  1024 ;;  br              2   95[BANK0 ] unsigned short 
  1025 ;;  FResult         1   94[BANK0 ] enum E43
  1026 ;; Return value:  Size  Location     Type
  1027 ;;                  1    wreg      void 
  1028 ;; Registers used:
  1029 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, b
      +temp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, bsr, cstack
  1030 ;; Tracked objects:
  1031 ;;		On entry : 0/0
  1032 ;;		On exit  : 0/0
  1033 ;;		Unchanged: 0/0
  1034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1035 ;;      Params:         0       0       0       0       0       0       0       0       0
  1036 ;;      Locals:         0      45       0       0       0       0       0       0       0
  1037 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1038 ;;      Totals:         0      45       0       0       0       0       0       0       0
  1039 ;;Total ram usage:       45 bytes
  1040 ;; Hardware stack levels required when called:    8
  1041 ;; This function calls:
  1042 ;;		_pf_mount
  1043 ;;		_pf_open
  1044 ;;		_pf_read
  1045 ;;		_pf_write
  1046 ;;		_prossiga
  1047 ;;		_soft_hard_init
  1048 ;; This function is called by:
  1049 ;;		Startup code after reset
  1050 ;; This function uses a non-reentrant model
  1051 ;;
  1052                           
  1053                           	psect	text0
  1054  0000'                    __ptext0:
  1055                           	opt stack 0
  1056  0000'                    _main:
  1057                           	opt stack 23
  1058                           
  1059                           ;main.c: 46: FRESULT FResult;
  1060                           ;main.c: 47: FATFS fs;
  1061                           ;main.c: 48: WORD br;
  1062                           ;main.c: 49: soft_hard_init();
  1063                           
  1064                           ;incstack = 0
  1065  0000' EC00' F000'        	call	_soft_hard_init	;wreg free
  1066                           
  1067                           ;main.c: 53: prossiga();
  1068  0004' EC00' F000'        	call	_prossiga	;wreg free
  1069                           
  1070                           ;main.c: 54: if( (FResult = pf_mount(&fs)) == FR_OK )
  1071  0008' 0E00'              	movlw	low main@fs
  1072  000A' 6E28'              	movwf	pf_mount@fs,c
  1073  000C' 0E00'              	movlw	high main@fs
  1074  000E' 6E29'              	movwf	pf_mount@fs+1,c
  1075  0010' EC00' F000'        	call	_pf_mount	;wreg free
  1076  0014' 0100               	movlb	0	; () banked
  1077  0016' 6F00'              	movwf	main@FResult& (0+255),b
  1078  0018' 5100'              	movf	main@FResult& (0+255),w,b
  1079  001A' A4D8               	btfss	status,2,c
  1080  001C' D03C               	goto	l40
  1081                           
  1082                           ; BSR set to: 0
  1083                           ;main.c: 55: {
  1084                           ;main.c: 58: FResult = pf_open("check.txt" );
  1085  001E' 0E00'              	movlw	low STR_1
  1086  0020' 6F00'              	movwf	pf_open@path& (0+255),b
  1087  0022' 0E00'              	movlw	high STR_1
  1088  0024' 6F00'              	movwf	(pf_open@path+1)& (0+255),b
  1089  0026' EC00' F000'        	call	_pf_open	;wreg free
  1090  002A' 0100               	movlb	0	; () banked
  1091  002C' 6F00'              	movwf	main@FResult& (0+255),b
  1092                           
  1093                           ; BSR set to: 0
  1094                           ;main.c: 60: if( FResult == FR_OK )
  1095  002E' 5100'              	movf	main@FResult& (0+255),w,b
  1096  0030' A4D8               	btfss	status,2,c
  1097  0032' D030               	goto	l41
  1098                           
  1099                           ; BSR set to: 0
  1100                           ;main.c: 61: {
  1101                           ;main.c: 64: if( (FResult = pf_write("SD_Card", 5, &br)) == FR_OK )
  1102  0034' 0E00'              	movlw	low STR_2
  1103  0036' 6E46'              	movwf	pf_write@buff,c
  1104  0038' 0E00'              	movlw	high STR_2
  1105  003A' 6E47'              	movwf	pf_write@buff+1,c
  1106  003C' 0E00               	movlw	0
  1107  003E' 6E49'              	movwf	pf_write@btw+1,c
  1108  0040' 0E05               	movlw	5
  1109  0042' 6E48'              	movwf	pf_write@btw,c
  1110  0044' 0E00'              	movlw	low main@br
  1111  0046' 6E4A'              	movwf	pf_write@bw,c
  1112  0048' 0E00'              	movlw	high main@br
  1113  004A' 6E4B'              	movwf	pf_write@bw+1,c
  1114  004C' EC00' F000'        	call	_pf_write	;wreg free
  1115  0050' 0100               	movlb	0	; () banked
  1116  0052' 6F00'              	movwf	main@FResult& (0+255),b
  1117  0054' 5100'              	movf	main@FResult& (0+255),w,b
  1118  0056' A4D8               	btfss	status,2,c
  1119  0058'                    
  1120                           ; BSR set to: 0
  1121                           ;main.c: 67: else
  1122                           ;main.c: 68: {
  1123                           ;main.c: 71: while( 1 );
  1124  0058' D7FF               	goto	l42
  1125                           
  1126                           ;main.c: 77: {
  1127                           ;main.c: 79: if( (FResult = pf_read(data_buffer_32, 31, &br)) == FR_OK )
  1128                           
  1129                           ;main.c: 72: }
  1130                           ;main.c: 76: do
  1131  005A' 0E00'              	movlw	low _data_buffer_32
  1132  005C' 6E46'              	movwf	pf_read@buff,c
  1133  005E' 0E00'              	movlw	high _data_buffer_32
  1134  0060' 6E47'              	movwf	pf_read@buff+1,c
  1135  0062' 0E00               	movlw	0
  1136  0064' 6E49'              	movwf	pf_read@btr+1,c
  1137  0066' 0E1F               	movlw	31
  1138  0068' 6E48'              	movwf	pf_read@btr,c
  1139  006A' 0E00'              	movlw	low main@br
  1140  006C' 6E4A'              	movwf	pf_read@br,c
  1141  006E' 0E00'              	movlw	high main@br
  1142  0070' 6E4B'              	movwf	pf_read@br+1,c
  1143  0072' EC00' F000'        	call	_pf_read	;wreg free
  1144  0076' 0100               	movlb	0	; () banked
  1145  0078' 6F00'              	movwf	main@FResult& (0+255),b
  1146  007A' 5100'              	movf	main@FResult& (0+255),w,b
  1147  007C' A4D8               	btfss	status,2,c
  1148  007E' D009               	goto	l48
  1149                           
  1150                           ; BSR set to: 0
  1151                           ;main.c: 80: {
  1152                           ;main.c: 82: data_buffer_32[br] = 0;
  1153  0080' 0E00'              	movlw	low _data_buffer_32
  1154  0082' 2500'              	addwf	main@br& (0+255),w,b
  1155  0084' 6ED9               	movwf	fsr2l,c
  1156  0086' 0E00'              	movlw	high _data_buffer_32
  1157  0088' 2100'              	addwfc	(main@br+1)& (0+255),w,b
  1158  008A' 6EDA               	movwf	fsr2h,c
  1159  008C' 0E00               	movlw	0
  1160  008E' 6EDF               	movwf	indf2,c
  1161                           
  1162                           ;main.c: 83: break;
  1163  0090' D003               	goto	l61
  1164  0092'                    l48:
  1165                           
  1166                           ; BSR set to: 0
  1167                           ;main.c: 86: else
  1168                           ;main.c: 87: {
  1169                           ;main.c: 89: while( 1 );
  1170  0092' D7FF               	goto	l48
  1171  0094'                    l41:
  1172                           
  1173                           ; BSR set to: 0
  1174                           ;main.c: 93: else
  1175                           ;main.c: 94: {
  1176                           ;main.c: 97: while( 1 );
  1177  0094' D7FF               	goto	l41
  1178  0096'                    l40:
  1179                           
  1180                           ;main.c: 100: else
  1181                           ;main.c: 101: {
  1182                           ;main.c: 104: while( 1 );
  1183  0096' D7FF               	goto	l40
  1184  0098'                    l61:
  1185                           
  1186                           ;main.c: 105: }
  1187                           ;main.c: 115: if( FResult != FR_OK )
  1188  0098' 0100               	movlb	0	; () banked
  1189  009A' 5100'              	movf	main@FResult& (0+255),w,b
  1190  009C' A4D8               	btfss	status,2,c
  1191  009E'                    u4050:
  1192                           
  1193                           ;main.c: 116: {
  1194                           ;main.c: 119: while( 1 );
  1195  009E' D7FF               	goto	u4050
  1196  00A0'                    
  1197                           ;main.c: 120: }
  1198                           ;main.c: 122: while(1);
  1199  00A0' D7FF               	goto	l65
  1200  00A2'                    __end_of_main:
  1201                           	opt stack 0
  1202                           tblptru	equ	0xFF8
  1203                           tblptrh	equ	0xFF7
  1204                           tblptrl	equ	0xFF6
  1205                           tablat	equ	0xFF5
  1206                           postinc0	equ	0xFEE
  1207                           wreg	equ	0xFE8
  1208                           postdec1	equ	0xFE5
  1209                           fsr1h	equ	0xFE2
  1210                           fsr1l	equ	0xFE1
  1211                           indf2	equ	0xFDF
  1212                           fsr2h	equ	0xFDA
  1213                           fsr2l	equ	0xFD9
  1214                           status	equ	0xFD8
  1215                           
  1216 ;; *************** function _soft_hard_init *****************
  1217 ;; Defined at:
  1218 ;;		line 31 in file "main.c"
  1219 ;; Parameters:    Size  Location     Type
  1220 ;;		None
  1221 ;; Auto vars:     Size  Location     Type
  1222 ;;		None
  1223 ;; Return value:  Size  Location     Type
  1224 ;;                  1    wreg      void 
  1225 ;; Registers used:
  1226 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, b
      +temp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, bsr, cstack
  1227 ;; Tracked objects:
  1228 ;;		On entry : 0/0
  1229 ;;		On exit  : 0/0
  1230 ;;		Unchanged: 0/0
  1231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1232 ;;      Params:         0       0       0       0       0       0       0       0       0
  1233 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1234 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1235 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1236 ;;Total ram usage:        0 bytes
  1237 ;; Hardware stack levels used:    1
  1238 ;; Hardware stack levels required when called:    2
  1239 ;; This function calls:
  1240 ;;		_inicializa_SPI
  1241 ;; This function is called by:
  1242 ;;		_main
  1243 ;; This function uses a non-reentrant model
  1244 ;;
  1245                           
  1246                           	psect	text1
  1247  0000'                    __ptext1:
  1248                           	opt stack 0
  1249  0000'                    _soft_hard_init:
  1250                           	opt stack 28
  1251                           
  1252                           ;main.c: 33: inicializa_SPI(0);
  1253                           
  1254                           ;incstack = 0
  1255  0000' 0E00               	movlw	0
  1256  0002' EC00' F000'        	call	_inicializa_SPI
  1257  0006' 0012               	return		;funcret
  1258  0008'                    __end_of_soft_hard_init:
  1259                           	opt stack 0
  1260                           tblptru	equ	0xFF8
  1261                           tblptrh	equ	0xFF7
  1262                           tblptrl	equ	0xFF6
  1263                           tablat	equ	0xFF5
  1264                           postinc0	equ	0xFEE
  1265                           wreg	equ	0xFE8
  1266                           postdec1	equ	0xFE5
  1267                           fsr1h	equ	0xFE2
  1268                           fsr1l	equ	0xFE1
  1269                           indf2	equ	0xFDF
  1270                           fsr2h	equ	0xFDA
  1271                           fsr2l	equ	0xFD9
  1272                           status	equ	0xFD8
  1273                           
  1274 ;; *************** function _inicializa_SPI *****************
  1275 ;; Defined at:
  1276 ;;		line 48 in file "SPI.c"
  1277 ;; Parameters:    Size  Location     Type
  1278 ;;  SPI_mode        1    wreg     unsigned char 
  1279 ;; Auto vars:     Size  Location     Type
  1280 ;;  SPI_mode        1    0[COMRAM] unsigned char 
  1281 ;; Return value:  Size  Location     Type
  1282 ;;                  1    wreg      void 
  1283 ;; Registers used:
  1284 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, b
      +temp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, bsr, cstack
  1285 ;; Tracked objects:
  1286 ;;		On entry : 0/0
  1287 ;;		On exit  : 0/0
  1288 ;;		Unchanged: 0/0
  1289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1290 ;;      Params:         0       0       0       0       0       0       0       0       0
  1291 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1292 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1293 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1294 ;;Total ram usage:        1 bytes
  1295 ;; Hardware stack levels used:    1
  1296 ;; Hardware stack levels required when called:    1
  1297 ;; This function calls:
  1298 ;;		_escreve_frase_ram_lcd
  1299 ;;		_posicao_cursor_lcd
  1300 ;; This function is called by:
  1301 ;;		_soft_hard_init
  1302 ;; This function uses a non-reentrant model
  1303 ;;
  1304                           
  1305                           	psect	text2
  1306  0000'                    __ptext2:
  1307                           	opt stack 0
  1308  0000'                    _inicializa_SPI:
  1309                           	opt stack 28
  1310                           
  1311                           ;incstack = 0
  1312                           ;inicializa_SPI@SPI_mode stored from wreg
  1313  0000' 6E00'              	movwf	inicializa_SPI@SPI_mode,c
  1314                           
  1315                           ;SPI.c: 50: switch(SPI_mode)
  1316  0002' D00A               	goto	l88
  1317  0004'                    l91:
  1318                           
  1319                           ;SPI.c: 58: SSPCON1bits.CKP = 1;
  1320  0004' 88C6               	bsf	4038,4,c	;volatile
  1321  0006' D006               	goto	L2
  1322  0008'                    l92:
  1323                           
  1324                           ;SPI.c: 63: SSPCON1bits.CKP = 0;
  1325  0008' 98C6               	bcf	4038,4,c	;volatile
  1326                           
  1327                           ;SPI.c: 64: SSPSTATbits.CKE = 1;
  1328  000A' 8CC7               	bsf	4039,6,c	;volatile
  1329                           
  1330                           ;SPI.c: 65: break;
  1331  000C' D013               	goto	l90
  1332  000E'                    l93:
  1333                           
  1334                           ;SPI.c: 68: SSPCON1bits.CKP = 1;
  1335  000E' 88C6               	bsf	4038,4,c	;volatile
  1336                           
  1337                           ;SPI.c: 69: SSPSTATbits.CKE = 1;
  1338  0010' 8CC7               	bsf	4039,6,c	;volatile
  1339  0012'                    l94:
  1340                           
  1341                           ;SPI.c: 72: SSPCON1bits.CKP = 0;
  1342  0012' 98C6               	bcf	4038,4,c	;volatile
  1343  0014'                    L2:
  1344                           
  1345                           ;SPI.c: 73: SSPSTATbits.CKE = 0;
  1346  0014' 9CC7               	bcf	4039,6,c	;volatile
  1347                           
  1348                           ;SPI.c: 75: }
  1349                           
  1350                           ;SPI.c: 74: break;
  1351  0016' D00E               	goto	l90
  1352  0018'                    l88:
  1353  0018' 5000'              	movf	inicializa_SPI@SPI_mode,w,c
  1354                           
  1355                           ; Switch size 1, requested type "space"
  1356                           ; Number of cases is 4, Range of values is 0 to 3
  1357                           ; switch strategies available:
  1358                           ; Name         Instructions Cycles
  1359                           ; simple_byte           13     7 (average)
  1360                           ;	Chosen strategy is simple_byte
  1361  001A' 0A00               	xorlw	0	; case 0
  1362  001C' B4D8               	btfsc	status,2,c
  1363  001E' D7F9               	goto	l94
  1364  0020' 0A01               	xorlw	1	; case 1
  1365  0022' B4D8               	btfsc	status,2,c
  1366  0024' D7EF               	goto	l91
  1367  0026' 0A03               	xorlw	3	; case 2
  1368  0028' B4D8               	btfsc	status,2,c
  1369  002A' D7EE               	goto	l92
  1370  002C' 0A01               	xorlw	1	; case 3
  1371  002E' B4D8               	btfsc	status,2,c
  1372  0030' D7EE               	goto	l93
  1373  0032' D7EF               	goto	l94
  1374  0034'                    l90:
  1375                           
  1376                           ;SPI.c: 79: SSPCON1bits.WCOL = 0;
  1377  0034' 9EC6               	bcf	4038,7,c	;volatile
  1378                           
  1379                           ;SPI.c: 81: SSPCON1bits.SSPEN = 1;
  1380  0036' 8AC6               	bsf	4038,5,c	;volatile
  1381                           
  1382                           ;SPI.c: 83: SSPCON1bits.SSPM0 = 1;
  1383  0038' 80C6               	bsf	4038,0,c	;volatile
  1384                           
  1385                           ;SPI.c: 84: SSPCON1bits.SSPM1 = 1;
  1386  003A' 82C6               	bsf	4038,1,c	;volatile
  1387                           
  1388                           ;SPI.c: 85: SSPCON1bits.SSPM2 = 0;
  1389  003C' 94C6               	bcf	4038,2,c	;volatile
  1390                           
  1391                           ;SPI.c: 86: SSPCON1bits.SSPM3 = 0;
  1392  003E' 96C6               	bcf	4038,3,c	;volatile
  1393                           
  1394                           ;SPI.c: 89: SSPSTATbits.SMP = 1;
  1395  0040' 8EC7               	bsf	4039,7,c	;volatile
  1396                           
  1397                           ;SPI.c: 92: posicao_cursor_lcd(1,1);
  1398  0042' 0E01               	movlw	1
  1399  0044' 6E00'              	movwf	_posicao_cursor_lcd$1,c
  1400  0046' 0E01               	movlw	1
  1401  0048' EC00' F000'        	call	_posicao_cursor_lcd
  1402                           
  1403                           ;SPI.c: 93: escreve_frase_ram_lcd("SPI configurada!");
  1404  004C' 0E00'              	movlw	low STR_3
  1405  004E' 6E00'              	movwf	_escreve_frase_ram_lcd$0,c
  1406  0050' 0E00'              	movlw	high STR_3
  1407  0052' 6E01'              	movwf	_escreve_frase_ram_lcd$0+1,c
  1408  0054' EC00' F000'        	call	_escreve_frase_ram_lcd	;wreg free
  1409  0058' 0012               	return		;funcret
  1410  005A'                    __end_of_inicializa_SPI:
  1411                           	opt stack 0
  1412                           tblptru	equ	0xFF8
  1413                           tblptrh	equ	0xFF7
  1414                           tblptrl	equ	0xFF6
  1415                           tablat	equ	0xFF5
  1416                           postinc0	equ	0xFEE
  1417                           wreg	equ	0xFE8
  1418                           postdec1	equ	0xFE5
  1419                           fsr1h	equ	0xFE2
  1420                           fsr1l	equ	0xFE1
  1421                           indf2	equ	0xFDF
  1422                           fsr2h	equ	0xFDA
  1423                           fsr2l	equ	0xFD9
  1424                           status	equ	0xFD8
  1425                           
  1426 ;; *************** function _pf_write *****************
  1427 ;; Defined at:
  1428 ;;		line 912 in file "pff.c"
  1429 ;; Parameters:    Size  Location     Type
  1430 ;;  buff            2   70[COMRAM] PTR const void 
  1431 ;;		 -> STR_2(8), 
  1432 ;;  btw             2   72[COMRAM] unsigned int 
  1433 ;;  bw              2   74[COMRAM] PTR unsigned int 
  1434 ;;		 -> main@br(2), 
  1435 ;; Auto vars:     Size  Location     Type
  1436 ;;  clst            4   10[BANK0 ] unsigned long 
  1437 ;;  remain          4    6[BANK0 ] unsigned long 
  1438 ;;  sect            4    2[BANK0 ] unsigned long 
  1439 ;;  fs              2   17[BANK0 ] PTR struct .
  1440 ;;		 -> NULL(0), main@fs(42), 
  1441 ;;  wcnt            2   15[BANK0 ] unsigned int 
  1442 ;;  p               2    0[BANK0 ] PTR const unsigned char 
  1443 ;;		 -> STR_2(8), 
  1444 ;;  cs              1   14[BANK0 ] unsigned char 
  1445 ;; Return value:  Size  Location     Type
  1446 ;;                  1    wreg      enum E43
  1447 ;; Registers used:
  1448 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, b
      +temp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, bsr, cstack
  1449 ;; Tracked objects:
  1450 ;;		On entry : 0/0
  1451 ;;		On exit  : 0/0
  1452 ;;		Unchanged: 0/0
  1453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1454 ;;      Params:         6       0       0       0       0       0       0       0       0
  1455 ;;      Locals:         0      19       0       0       0       0       0       0       0
  1456 ;;      Temps:          8       0       0       0       0       0       0       0       0
  1457 ;;      Totals:        14      19       0       0       0       0       0       0       0
  1458 ;;Total ram usage:       33 bytes
  1459 ;; Hardware stack levels used:    1
  1460 ;; Hardware stack levels required when called:    4
  1461 ;; This function calls:
  1462 ;;		_clust2sect
  1463 ;;		_disk_writep
  1464 ;;		_get_fat
  1465 ;; This function is called by:
  1466 ;;		_main
  1467 ;; This function uses a non-reentrant model
  1468 ;;
  1469                           
  1470                           	psect	text3
  1471  0000'                    __ptext3:
  1472                           	opt stack 0
  1473  0000'                    _pf_write:
  1474                           	opt stack 26
  1475                           
  1476                           ;pff.c: 918: DWORD clst;
  1477                           ;pff.c: 919: DWORD sect, remain;
  1478                           ;pff.c: 920: const BYTE *p = buff;
  1479                           
  1480                           ;incstack = 0
  1481  0000' C046' F000'        	movff	pf_write@buff,pf_write@p
  1482  0004' C047' F001'        	movff	pf_write@buff+1,pf_write@p+1
  1483                           
  1484                           ;pff.c: 921: BYTE cs;
  1485                           ;pff.c: 922: UINT wcnt;
  1486                           ;pff.c: 923: FATFS *fs = FatFs;
  1487  0008' C004' F011'        	movff	_FatFs,pf_write@fs
  1488  000C' C005' F012'        	movff	_FatFs+1,pf_write@fs+1
  1489                           
  1490                           ;pff.c: 926: *bw = 0;
  1491  0010' C04A' FFD9         	movff	pf_write@bw,fsr2l
  1492  0014' C04B' FFDA         	movff	pf_write@bw+1,fsr2h
  1493  0018' 0E00               	movlw	0
  1494  001A' 6EDE               	movwf	postinc2,c
  1495  001C' 0E00               	movlw	0
  1496  001E' 6EDD               	movwf	postdec2,c
  1497                           
  1498                           ;pff.c: 927: if (!fs) return FR_NOT_ENABLED;
  1499  0020' 0100               	movlb	0	; () banked
  1500  0022' 5100'              	movf	pf_write@fs& (0+255),w,b
  1501  0024' 1100'              	iorwf	(pf_write@fs+1)& (0+255),w,b
  1502  0026' A4D8               	btfss	status,2,c
  1503  0028' D002               	goto	l430
  1504                           
  1505                           ; BSR set to: 0
  1506  002A' 0E05               	movlw	5
  1507                           
  1508                           ; BSR set to: 0
  1509  002C' 0012               	return	
  1510  002E'                    l430:
  1511                           
  1512                           ; BSR set to: 0
  1513                           ;pff.c: 928: if (!(fs->flag & 0x01))
  1514                           
  1515                           ; BSR set to: 0
  1516  002E' EE20 F001          	lfsr	2,1
  1517  0032' 5100'              	movf	pf_write@fs& (0+255),w,b
  1518  0034' 26D9               	addwf	fsr2l,f,c
  1519  0036' 5100'              	movf	(pf_write@fs+1)& (0+255),w,b
  1520  0038' 22DA               	addwfc	fsr2h,f,c
  1521  003A' B0DF               	btfsc	indf2,0,c
  1522  003C' D002               	goto	l432
  1523                           
  1524                           ; BSR set to: 0
  1525                           ;pff.c: 929: return FR_NOT_OPENED;
  1526  003E' 0E04               	movlw	4
  1527                           
  1528                           ; BSR set to: 0
  1529  0040' 0012               	return	
  1530  0042'                    l432:
  1531                           
  1532                           ; BSR set to: 0
  1533                           ;pff.c: 931: if (!btw) {
  1534                           
  1535                           ; BSR set to: 0
  1536  0042' 5048'              	movf	pf_write@btw,w,c
  1537  0044' 1049'              	iorwf	pf_write@btw+1,w,c
  1538  0046' A4D8               	btfss	status,2,c
  1539  0048' D031               	goto	l433
  1540                           
  1541                           ; BSR set to: 0
  1542                           ;pff.c: 932: if ((fs->flag & 0x40) && disk_writep(0, 0)) {fs->flag = 0; return FR_DISK_E
      +                          RR;};
  1543  004A' EE20 F001          	lfsr	2,1
  1544  004E' 5100'              	movf	pf_write@fs& (0+255),w,b
  1545  0050' 26D9               	addwf	fsr2l,f,c
  1546  0052' 5100'              	movf	(pf_write@fs+1)& (0+255),w,b
  1547  0054' 22DA               	addwfc	fsr2h,f,c
  1548  0056' ACDF               	btfss	indf2,6,c
  1549  0058' D01E               	goto	l434
  1550                           
  1551                           ; BSR set to: 0
  1552  005A' 0E00               	movlw	0
  1553  005C' 6E08'              	movwf	disk_writep@wr,c
  1554  005E' 0E00               	movlw	0
  1555  0060' 6E09'              	movwf	disk_writep@wr+1,c
  1556  0062' 0E00               	movlw	0
  1557  0064' 6E0A'              	movwf	disk_writep@wr+2,c
  1558  0066' 0E00               	movlw	0
  1559  0068' 6E0B'              	movwf	disk_writep@sc,c
  1560  006A' 0E00               	movlw	0
  1561  006C' 6E0C'              	movwf	disk_writep@sc+1,c
  1562  006E' 0E00               	movlw	0
  1563  0070' 6E0D'              	movwf	disk_writep@sc+2,c
  1564  0072' 0E00               	movlw	0
  1565  0074' 6E0E'              	movwf	disk_writep@sc+3,c
  1566  0076' EC00' F000'        	call	_disk_writep	;wreg free
  1567  007A' 0900               	iorlw	0
  1568  007C' B4D8               	btfsc	status,2,c
  1569  007E' D00B               	goto	l434
  1570  0080' 0100               	movlb	0	; () banked
  1571  0082' EE20 F001          	lfsr	2,1
  1572  0086' 5100'              	movf	pf_write@fs& (0+255),w,b
  1573  0088' 26D9               	addwf	fsr2l,f,c
  1574  008A' 5100'              	movf	(pf_write@fs+1)& (0+255),w,b
  1575  008C' 22DA               	addwfc	fsr2h,f,c
  1576  008E' 0E00               	movlw	0
  1577  0090' 6EDF               	movwf	indf2,c
  1578                           
  1579                           ; BSR set to: 0
  1580  0092' 0E01               	movlw	1
  1581                           
  1582                           ; BSR set to: 0
  1583  0094' 0012               	return	
  1584  0096'                    l434:
  1585                           
  1586                           ;pff.c: 933: fs->flag &= ~0x40;
  1587                           
  1588                           ; BSR set to: 0
  1589  0096' 0100               	movlb	0	; () banked
  1590  0098' EE20 F001          	lfsr	2,1
  1591  009C' 5100'              	movf	pf_write@fs& (0+255),w,b
  1592  009E' 26D9               	addwf	fsr2l,f,c
  1593  00A0' 5100'              	movf	(pf_write@fs+1)& (0+255),w,b
  1594  00A2' 22DA               	addwfc	fsr2h,f,c
  1595  00A4' 0EBF               	movlw	191
  1596  00A6' 16DF               	andwf	indf2,f,c
  1597                           
  1598                           ; BSR set to: 0
  1599                           ;pff.c: 934: return FR_OK;
  1600  00A8' 0E00               	movlw	0
  1601                           
  1602                           ; BSR set to: 0
  1603  00AA' 0012               	return	
  1604  00AC'                    l433:
  1605                           
  1606                           ; BSR set to: 0
  1607                           ;pff.c: 936: if (!(fs->flag & 0x40))
  1608                           
  1609                           ; BSR set to: 0
  1610  00AC' EE20 F001          	lfsr	2,1
  1611  00B0' 5100'              	movf	pf_write@fs& (0+255),w,b
  1612  00B2' 26D9               	addwf	fsr2l,f,c
  1613  00B4' 5100'              	movf	(pf_write@fs+1)& (0+255),w,b
  1614  00B6' 22DA               	addwfc	fsr2h,f,c
  1615  00B8' BCDF               	btfsc	indf2,6,c
  1616  00BA' D00E               	goto	l436
  1617                           
  1618                           ; BSR set to: 0
  1619                           ;pff.c: 937: fs->fptr &= 0xFFFFFE00;
  1620  00BC' EE20 F016          	lfsr	2,22
  1621  00C0' 5100'              	movf	pf_write@fs& (0+255),w,b
  1622  00C2' 26D9               	addwf	fsr2l,f,c
  1623  00C4' 5100'              	movf	(pf_write@fs+1)& (0+255),w,b
  1624  00C6' 22DA               	addwfc	fsr2h,f,c
  1625  00C8' 0E00               	movlw	0
  1626  00CA' 16DE               	andwf	postinc2,f,c
  1627  00CC' 0EFE               	movlw	254
  1628  00CE' 16DE               	andwf	postinc2,f,c
  1629  00D0' 0EFF               	movlw	255
  1630  00D2' 16DE               	andwf	postinc2,f,c
  1631  00D4' 0EFF               	movlw	255
  1632  00D6' 16DE               	andwf	postinc2,f,c
  1633  00D8'                    l436:
  1634                           
  1635                           ; BSR set to: 0
  1636                           ;pff.c: 938: }
  1637                           ;pff.c: 939: remain = fs->fsize - fs->fptr;
  1638                           
  1639                           ; BSR set to: 0
  1640  00D8' EE20 F01A          	lfsr	2,26
  1641  00DC' 5100'              	movf	pf_write@fs& (0+255),w,b
  1642  00DE' 26D9               	addwf	fsr2l,f,c
  1643  00E0' 5100'              	movf	(pf_write@fs+1)& (0+255),w,b
  1644  00E2' 22DA               	addwfc	fsr2h,f,c
  1645  00E4' CFDE F04C'         	movff	postinc2,??_pf_write
  1646  00E8' CFDE F04D'         	movff	postinc2,??_pf_write+1
  1647  00EC' CFDE F04E'         	movff	postinc2,??_pf_write+2
  1648  00F0' CFDE F04F'         	movff	postinc2,??_pf_write+3
  1649  00F4' EE20 F016          	lfsr	2,22
  1650  00F8' 5100'              	movf	pf_write@fs& (0+255),w,b
  1651  00FA' 26D9               	addwf	fsr2l,f,c
  1652  00FC' 5100'              	movf	(pf_write@fs+1)& (0+255),w,b
  1653  00FE' 22DA               	addwfc	fsr2h,f,c
  1654  0100' CFDE F050'         	movff	postinc2,??_pf_write+4
  1655  0104' CFDE F051'         	movff	postinc2,??_pf_write+5
  1656  0108' CFDE F052'         	movff	postinc2,??_pf_write+6
  1657  010C' CFDE F053'         	movff	postinc2,??_pf_write+7
  1658  0110' 1E50'              	comf	??_pf_write+4,f,c
  1659  0112' 1E51'              	comf	??_pf_write+5,f,c
  1660  0114' 1E52'              	comf	??_pf_write+6,f,c
  1661  0116' 1E53'              	comf	??_pf_write+7,f,c
  1662  0118' 2A50'              	incf	??_pf_write+4,f,c
  1663  011A' 0E00               	movlw	0
  1664  011C' 2251'              	addwfc	??_pf_write+5,f,c
  1665  011E' 2252'              	addwfc	??_pf_write+6,f,c
  1666  0120' 2253'              	addwfc	??_pf_write+7,f,c
  1667  0122' 504C'              	movf	??_pf_write,w,c
  1668  0124' 2450'              	addwf	??_pf_write+4,w,c
  1669  0126' 6F00'              	movwf	pf_write@remain& (0+255),b
  1670  0128' 504D'              	movf	??_pf_write+1,w,c
  1671  012A' 2051'              	addwfc	??_pf_write+5,w,c
  1672  012C' 6F00'              	movwf	(pf_write@remain+1)& (0+255),b
  1673  012E' 504E'              	movf	??_pf_write+2,w,c
  1674  0130' 2052'              	addwfc	??_pf_write+6,w,c
  1675  0132' 6F00'              	movwf	(pf_write@remain+2)& (0+255),b
  1676  0134' 504F'              	movf	??_pf_write+3,w,c
  1677  0136' 2053'              	addwfc	??_pf_write+7,w,c
  1678  0138' 6F00'              	movwf	(pf_write@remain+3)& (0+255),b
  1679                           
  1680                           ; BSR set to: 0
  1681                           ;pff.c: 940: if (btw > remain) btw = (UINT)remain;
  1682  013A' 5048'              	movf	pf_write@btw,w,c
  1683  013C' 6E00'              	movwf	??_pf_write& (0+255),c
  1684  013E' 5049'              	movf	pf_write@btw+1,w,c
  1685  0140' 6E00'              	movwf	(??_pf_write+1)& (0+255),c
  1686  0142' 6A00'              	clrf	(??_pf_write+2)& (0+255),c
  1687  0144' 6A00'              	clrf	(??_pf_write+3)& (0+255),c
  1688  0146' 504C'              	movf	??_pf_write,w,c
  1689  0148' 5D00'              	subwf	pf_write@remain& (0+255),w,b
  1690  014A' 504D'              	movf	??_pf_write+1,w,c
  1691  014C' 5900'              	subwfb	(pf_write@remain+1)& (0+255),w,b
  1692  014E' 504E'              	movf	??_pf_write+2,w,c
  1693  0150' 5900'              	subwfb	(pf_write@remain+2)& (0+255),w,b
  1694  0152' 504F'              	movf	??_pf_write+3,w,c
  1695  0154' 5900'              	subwfb	(pf_write@remain+3)& (0+255),w,b
  1696  0156' B0D8               	btfsc	status,0,c
  1697  0158' D1AC               	goto	l449
  1698                           
  1699                           ; BSR set to: 0
  1700  015A' C006' F048'        	movff	pf_write@remain,pf_write@btw
  1701  015E' C007' F049'        	movff	pf_write@remain+1,pf_write@btw+1
  1702                           
  1703                           ; BSR set to: 0
  1704                           ;pff.c: 942: while (btw) {
  1705  0162' D1A7               	goto	l449
  1706  0164'                    
  1707                           ; BSR set to: 0
  1708                           ;pff.c: 943: if ((UINT)fs->fptr % 512 == 0) {
  1709                           
  1710                           ; BSR set to: 0
  1711  0164' 0EFF               	movlw	255
  1712  0166' 6E00'              	movwf	??_pf_write& (0+255),c
  1713  0168' 0E01               	movlw	1
  1714  016A' 6E00'              	movwf	(??_pf_write+1)& (0+255),c
  1715  016C' EE20 F016          	lfsr	2,22
  1716  0170' 5100'              	movf	pf_write@fs& (0+255),w,b
  1717  0172' 26D9               	addwf	fsr2l,f,c
  1718  0174' 5100'              	movf	(pf_write@fs+1)& (0+255),w,b
  1719  0176' 22DA               	addwfc	fsr2h,f,c
  1720  0178' CFDE F04E'         	movff	postinc2,??_pf_write+2
  1721  017C' CFDD F04F'         	movff	postdec2,??_pf_write+3
  1722  0180' 504C'              	movf	??_pf_write,w,c
  1723  0182' 164E'              	andwf	??_pf_write+2,f,c
  1724  0184' 504D'              	movf	??_pf_write+1,w,c
  1725  0186' 164F'              	andwf	??_pf_write+3,f,c
  1726  0188' 504E'              	movf	??_pf_write+2,w,c
  1727  018A' 104F'              	iorwf	??_pf_write+3,w,c
  1728  018C' A4D8               	btfss	status,2,c
  1729  018E' D0E9               	goto	l440
  1730                           
  1731                           ; BSR set to: 0
  1732                           ;pff.c: 944: cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));
  1733  0190' EE20 F016          	lfsr	2,22
  1734  0194' 5100'              	movf	pf_write@fs& (0+255),w,b
  1735  0196' 26D9               	addwf	fsr2l,f,c
  1736  0198' 5100'              	movf	(pf_write@fs+1)& (0+255),w,b
  1737  019A' 22DA               	addwfc	fsr2h,f,c
  1738  019C' CFDE F04C'         	movff	postinc2,??_pf_write
  1739  01A0' CFDE F04D'         	movff	postinc2,??_pf_write+1
  1740  01A4' CFDE F04E'         	movff	postinc2,??_pf_write+2
  1741  01A8' CFDE F04F'         	movff	postinc2,??_pf_write+3
  1742  01AC' 0E0A               	movlw	10
  1743  01AE' D005               	goto	u3570
  1744  01B0'                    u3575:
  1745  01B0' 90D8               	bcf	status,0,c
  1746  01B2' 324F'              	rrcf	??_pf_write+3,f,c
  1747  01B4' 324E'              	rrcf	??_pf_write+2,f,c
  1748  01B6' 324D'              	rrcf	??_pf_write+1,f,c
  1749  01B8' 324C'              	rrcf	??_pf_write,f,c
  1750  01BA'                    u3570:
  1751  01BA' 2EE8               	decfsz	wreg,f,c
  1752  01BC' D7F9               	goto	u3575
  1753  01BE' EE20 F002          	lfsr	2,2
  1754  01C2' 5100'              	movf	pf_write@fs& (0+255),w,b
  1755  01C4' 26D9               	addwf	fsr2l,f,c
  1756  01C6' 5100'              	movf	(pf_write@fs+1)& (0+255),w,b
  1757  01C8' 22DA               	addwfc	fsr2h,f,c
  1758  01CA' 50DF               	movf	indf2,w,c
  1759  01CC' 6E00'              	movwf	(??_pf_write+4)& (0+255),c
  1760  01CE' 0450'              	decf	??_pf_write+4,w,c
  1761  01D0' 144C'              	andwf	??_pf_write,w,c
  1762  01D2' 6F00'              	movwf	pf_write@cs& (0+255),b
  1763                           
  1764                           ; BSR set to: 0
  1765                           ;pff.c: 945: if (!cs) {
  1766  01D4' 5100'              	movf	pf_write@cs& (0+255),w,b
  1767  01D6' A4D8               	btfss	status,2,c
  1768  01D8' D054               	goto	l441
  1769                           
  1770                           ; BSR set to: 0
  1771                           ;pff.c: 946: if (fs->fptr == 0)
  1772  01DA' EE20 F016          	lfsr	2,22
  1773  01DE' 5100'              	movf	pf_write@fs& (0+255),w,b
  1774  01E0' 26D9               	addwf	fsr2l,f,c
  1775  01E2' 5100'              	movf	(pf_write@fs+1)& (0+255),w,b
  1776  01E4' 22DA               	addwfc	fsr2h,f,c
  1777  01E6' 50DE               	movf	postinc2,w,c
  1778  01E8' 10DE               	iorwf	postinc2,w,c
  1779  01EA' 10DE               	iorwf	postinc2,w,c
  1780  01EC' 10DE               	iorwf	postinc2,w,c
  1781  01EE' A4D8               	btfss	status,2,c
  1782  01F0' D00F               	goto	l442
  1783                           
  1784                           ; BSR set to: 0
  1785                           ;pff.c: 947: clst = fs->org_clust;
  1786  01F2' EE20 F01E          	lfsr	2,30
  1787  01F6' 5100'              	movf	pf_write@fs& (0+255),w,b
  1788  01F8' 26D9               	addwf	fsr2l,f,c
  1789  01FA' 5100'              	movf	(pf_write@fs+1)& (0+255),w,b
  1790  01FC' 22DA               	addwfc	fsr2h,f,c
  1791  01FE' CFDE F00A'         	movff	postinc2,pf_write@clst
  1792  0202' CFDE F00B'         	movff	postinc2,pf_write@clst+1
  1793  0206' CFDE F00C'         	movff	postinc2,pf_write@clst+2
  1794  020A' CFDE F00D'         	movff	postinc2,pf_write@clst+3
  1795  020E' D018               	goto	l443
  1796  0210'                    l442:
  1797                           
  1798                           ; BSR set to: 0
  1799                           ;pff.c: 948: else
  1800                           ;pff.c: 949: clst = get_fat(fs->curr_clust);
  1801                           
  1802                           ; BSR set to: 0
  1803  0210' EE20 F022          	lfsr	2,34
  1804  0214' 5100'              	movf	pf_write@fs& (0+255),w,b
  1805  0216' 26D9               	addwf	fsr2l,f,c
  1806  0218' 5100'              	movf	(pf_write@fs+1)& (0+255),w,b
  1807  021A' 22DA               	addwfc	fsr2h,f,c
  1808  021C' CFDE F01E'         	movff	postinc2,get_fat@clst
  1809  0220' CFDE F01F'         	movff	postinc2,get_fat@clst+1
  1810  0224' CFDE F020'         	movff	postinc2,get_fat@clst+2
  1811  0228' CFDE F021'         	movff	postinc2,get_fat@clst+3
  1812  022C' EC00' F000'        	call	_get_fat	;wreg free
  1813  0230' C01E' F00A'        	movff	?_get_fat,pf_write@clst
  1814  0234' C01F' F00B'        	movff	?_get_fat+1,pf_write@clst+1
  1815  0238' C020' F00C'        	movff	?_get_fat+2,pf_write@clst+2
  1816  023C' C021' F00D'        	movff	?_get_fat+3,pf_write@clst+3
  1817  0240'                    l443:
  1818                           
  1819                           ;pff.c: 950: if (clst <= 1) {fs->flag = 0; return FR_DISK_ERR;};
  1820  0240' 0100               	movlb	0	; () banked
  1821  0242' 5100'              	movf	(pf_write@clst+3)& (0+255),w,b
  1822  0244' 1100'              	iorwf	(pf_write@clst+2)& (0+255),w,b
  1823  0246' 1100'              	iorwf	(pf_write@clst+1)& (0+255),w,b
  1824  0248' E10E               	bnz	l3473
  1825  024A' 0E02               	movlw	2
  1826  024C' 5D00'              	subwf	pf_write@clst& (0+255),w,b
  1827  024E' B0D8               	btfsc	status,0,c
  1828  0250' D00A               	goto	l444
  1829                           
  1830                           ; BSR set to: 0
  1831  0252' EE20 F001          	lfsr	2,1
  1832  0256' 5100'              	movf	pf_write@fs& (0+255),w,b
  1833  0258' 26D9               	addwf	fsr2l,f,c
  1834  025A' 5100'              	movf	(pf_write@fs+1)& (0+255),w,b
  1835  025C' 22DA               	addwfc	fsr2h,f,c
  1836  025E' 0E00               	movlw	0
  1837  0260' 6EDF               	movwf	indf2,c
  1838                           
  1839                           ; BSR set to: 0
  1840  0262' 0E01               	movlw	1
  1841                           
  1842                           ; BSR set to: 0
  1843  0264' 0012               	return	
  1844  0266'                    l444:
  1845  0266'                    l3473:
  1846                           
  1847                           ; BSR set to: 0
  1848                           ;pff.c: 951: fs->curr_clust = clst;
  1849  0266' EE20 F022          	lfsr	2,34
  1850  026A' 5100'              	movf	pf_write@fs& (0+255),w,b
  1851  026C' 26D9               	addwf	fsr2l,f,c
  1852  026E' 5100'              	movf	(pf_write@fs+1)& (0+255),w,b
  1853  0270' 22DA               	addwfc	fsr2h,f,c
  1854  0272' C00A' FFDE         	movff	pf_write@clst,postinc2
  1855  0276' C00B' FFDE         	movff	pf_write@clst+1,postinc2
  1856  027A' C00C' FFDE         	movff	pf_write@clst+2,postinc2
  1857  027E' C00D' FFDE         	movff	pf_write@clst+3,postinc2
  1858  0282'                    l441:
  1859                           
  1860                           ; BSR set to: 0
  1861                           ;pff.c: 952: }
  1862                           ;pff.c: 953: sect = clust2sect(fs->curr_clust);
  1863                           
  1864                           ; BSR set to: 0
  1865  0282' EE20 F022          	lfsr	2,34
  1866  0286' 5100'              	movf	pf_write@fs& (0+255),w,b
  1867  0288' 26D9               	addwf	fsr2l,f,c
  1868  028A' 5100'              	movf	(pf_write@fs+1)& (0+255),w,b
  1869  028C' 22DA               	addwfc	fsr2h,f,c
  1870  028E' CFDE F00C'         	movff	postinc2,clust2sect@clst
  1871  0292' CFDE F00D'         	movff	postinc2,clust2sect@clst+1
  1872  0296' CFDE F00E'         	movff	postinc2,clust2sect@clst+2
  1873  029A' CFDE F00F'         	movff	postinc2,clust2sect@clst+3
  1874  029E' EC00' F000'        	call	_clust2sect	;wreg free
  1875  02A2' C00C' F002'        	movff	?_clust2sect,pf_write@sect
  1876  02A6' C00D' F003'        	movff	?_clust2sect+1,pf_write@sect+1
  1877  02AA' C00E' F004'        	movff	?_clust2sect+2,pf_write@sect+2
  1878  02AE' C00F' F005'        	movff	?_clust2sect+3,pf_write@sect+3
  1879                           
  1880                           ;pff.c: 954: if (!sect) {fs->flag = 0; return FR_DISK_ERR;};
  1881  02B2' 0100               	movlb	0	; () banked
  1882  02B4' 5100'              	movf	pf_write@sect& (0+255),w,b
  1883  02B6' 1100'              	iorwf	(pf_write@sect+1)& (0+255),w,b
  1884  02B8' 1100'              	iorwf	(pf_write@sect+2)& (0+255),w,b
  1885  02BA' 1100'              	iorwf	(pf_write@sect+3)& (0+255),w,b
  1886  02BC' A4D8               	btfss	status,2,c
  1887  02BE' D00A               	goto	l445
  1888                           
  1889                           ; BSR set to: 0
  1890  02C0' EE20 F001          	lfsr	2,1
  1891  02C4' 5100'              	movf	pf_write@fs& (0+255),w,b
  1892  02C6' 26D9               	addwf	fsr2l,f,c
  1893  02C8' 5100'              	movf	(pf_write@fs+1)& (0+255),w,b
  1894  02CA' 22DA               	addwfc	fsr2h,f,c
  1895  02CC' 0E00               	movlw	0
  1896  02CE' 6EDF               	movwf	indf2,c
  1897                           
  1898                           ; BSR set to: 0
  1899  02D0' 0E01               	movlw	1
  1900                           
  1901                           ; BSR set to: 0
  1902  02D2' 0012               	return	
  1903  02D4'                    l445:
  1904                           
  1905                           ; BSR set to: 0
  1906                           ;pff.c: 955: fs->dsect = sect + cs;
  1907                           
  1908                           ; BSR set to: 0
  1909  02D4' 5100'              	movf	pf_write@cs& (0+255),w,b
  1910  02D6' 2500'              	addwf	pf_write@sect& (0+255),w,b
  1911  02D8' 6E00'              	movwf	??_pf_write& (0+255),c
  1912  02DA' 0E00               	movlw	0
  1913  02DC' 2100'              	addwfc	(pf_write@sect+1)& (0+255),w,b
  1914  02DE' 6E00'              	movwf	(??_pf_write+1)& (0+255),c
  1915  02E0' 0E00               	movlw	0
  1916  02E2' 2100'              	addwfc	(pf_write@sect+2)& (0+255),w,b
  1917  02E4' 6E00'              	movwf	(??_pf_write+2)& (0+255),c
  1918  02E6' 0E00               	movlw	0
  1919  02E8' 2100'              	addwfc	(pf_write@sect+3)& (0+255),w,b
  1920  02EA' 6E00'              	movwf	(??_pf_write+3)& (0+255),c
  1921  02EC' EE20 F026          	lfsr	2,38
  1922  02F0' 5100'              	movf	pf_write@fs& (0+255),w,b
  1923  02F2' 26D9               	addwf	fsr2l,f,c
  1924  02F4' 5100'              	movf	(pf_write@fs+1)& (0+255),w,b
  1925  02F6' 22DA               	addwfc	fsr2h,f,c
  1926  02F8' C04C' FFDE         	movff	??_pf_write,postinc2
  1927  02FC' C04D' FFDE         	movff	??_pf_write+1,postinc2
  1928  0300' C04E' FFDE         	movff	??_pf_write+2,postinc2
  1929  0304' C04F' FFDE         	movff	??_pf_write+3,postinc2
  1930                           
  1931                           ; BSR set to: 0
  1932                           ;pff.c: 956: if (disk_writep(0, fs->dsect)) {fs->flag = 0; return FR_DISK_ERR;};
  1933  0308' 0E00               	movlw	0
  1934  030A' 6E08'              	movwf	disk_writep@wr,c
  1935  030C' 0E00               	movlw	0
  1936  030E' 6E09'              	movwf	disk_writep@wr+1,c
  1937  0310' 0E00               	movlw	0
  1938  0312' 6E0A'              	movwf	disk_writep@wr+2,c
  1939  0314' EE20 F026          	lfsr	2,38
  1940  0318' 5100'              	movf	pf_write@fs& (0+255),w,b
  1941  031A' 26D9               	addwf	fsr2l,f,c
  1942  031C' 5100'              	movf	(pf_write@fs+1)& (0+255),w,b
  1943  031E' 22DA               	addwfc	fsr2h,f,c
  1944  0320' CFDE F00B'         	movff	postinc2,disk_writep@sc
  1945  0324' CFDE F00C'         	movff	postinc2,disk_writep@sc+1
  1946  0328' CFDE F00D'         	movff	postinc2,disk_writep@sc+2
  1947  032C' CFDE F00E'         	movff	postinc2,disk_writep@sc+3
  1948  0330' EC00' F000'        	call	_disk_writep	;wreg free
  1949  0334' 0900               	iorlw	0
  1950  0336' B4D8               	btfsc	status,2,c
  1951  0338' D00B               	goto	l446
  1952  033A' 0100               	movlb	0	; () banked
  1953  033C' EE20 F001          	lfsr	2,1
  1954  0340' 5100'              	movf	pf_write@fs& (0+255),w,b
  1955  0342' 26D9               	addwf	fsr2l,f,c
  1956  0344' 5100'              	movf	(pf_write@fs+1)& (0+255),w,b
  1957  0346' 22DA               	addwfc	fsr2h,f,c
  1958  0348' 0E00               	movlw	0
  1959  034A' 6EDF               	movwf	indf2,c
  1960                           
  1961                           ; BSR set to: 0
  1962  034C' 0E01               	movlw	1
  1963                           
  1964                           ; BSR set to: 0
  1965  034E' 0012               	return	
  1966  0350'                    l446:
  1967                           
  1968                           ;pff.c: 957: fs->flag |= 0x40;
  1969                           
  1970                           ; BSR set to: 0
  1971  0350' 0100               	movlb	0	; () banked
  1972  0352' EE20 F001          	lfsr	2,1
  1973  0356' 5100'              	movf	pf_write@fs& (0+255),w,b
  1974  0358' 26D9               	addwf	fsr2l,f,c
  1975  035A' 5100'              	movf	(pf_write@fs+1)& (0+255),w,b
  1976  035C' 22DA               	addwfc	fsr2h,f,c
  1977  035E' 0E00               	movlw	0
  1978  0360' 8CDB               	bsf	plusw2,6,c
  1979  0362'                    l440:
  1980                           
  1981                           ; BSR set to: 0
  1982                           ;pff.c: 958: }
  1983                           ;pff.c: 959: wcnt = 512 - (UINT)fs->fptr % 512;
  1984  0362' 0EFF               	movlw	255
  1985  0364' 6E00'              	movwf	??_pf_write& (0+255),c
  1986  0366' 0E01               	movlw	1
  1987  0368' 6E00'              	movwf	(??_pf_write+1)& (0+255),c
  1988  036A' EE20 F016          	lfsr	2,22
  1989  036E' 5100'              	movf	pf_write@fs& (0+255),w,b
  1990  0370' 26D9               	addwf	fsr2l,f,c
  1991  0372' 5100'              	movf	(pf_write@fs+1)& (0+255),w,b
  1992  0374' 22DA               	addwfc	fsr2h,f,c
  1993  0376' CFDE F04E'         	movff	postinc2,??_pf_write+2
  1994  037A' CFDD F04F'         	movff	postdec2,??_pf_write+3
  1995  037E' 504C'              	movf	??_pf_write,w,c
  1996  0380' 164E'              	andwf	??_pf_write+2,f,c
  1997  0382' 504D'              	movf	??_pf_write+1,w,c
  1998  0384' 164F'              	andwf	??_pf_write+3,f,c
  1999  0386' 1E4E'              	comf	??_pf_write+2,f,c
  2000  0388' 1E4F'              	comf	??_pf_write+3,f,c
  2001  038A' 4A4E'              	infsnz	??_pf_write+2,f,c
  2002  038C' 2A4F'              	incf	??_pf_write+3,f,c
  2003  038E' 0E00               	movlw	0
  2004  0390' 244E'              	addwf	??_pf_write+2,w,c
  2005  0392' 6F00'              	movwf	pf_write@wcnt& (0+255),b
  2006  0394' 0E02               	movlw	2
  2007  0396' 204F'              	addwfc	??_pf_write+3,w,c
  2008  0398' 6F00'              	movwf	(pf_write@wcnt+1)& (0+255),b
  2009                           
  2010                           ; BSR set to: 0
  2011                           ;pff.c: 960: if (wcnt > btw)wcnt = btw;
  2012  039A' 5100'              	movf	pf_write@wcnt& (0+255),w,b
  2013  039C' 5C48'              	subwf	pf_write@btw,w,c
  2014  039E' 5100'              	movf	(pf_write@wcnt+1)& (0+255),w,b
  2015  03A0' 5849'              	subwfb	pf_write@btw+1,w,c
  2016  03A2' B0D8               	btfsc	status,0,c
  2017  03A4' D004               	goto	l447
  2018                           
  2019                           ; BSR set to: 0
  2020  03A6' C048' F00F'        	movff	pf_write@btw,pf_write@wcnt
  2021  03AA' C049' F010'        	movff	pf_write@btw+1,pf_write@wcnt+1
  2022  03AE'                    l447:
  2023                           
  2024                           ; BSR set to: 0
  2025                           ;pff.c: 961: if (disk_writep(p, fs->dsect )) {fs->flag = 0; return FR_DISK_ERR;};
  2026                           
  2027                           ; BSR set to: 0
  2028  03AE' C000' F008'        	movff	pf_write@p,disk_writep@wr
  2029  03B2' C001' F009'        	movff	pf_write@p+1,disk_writep@wr+1
  2030  03B6' 5008'              	movf	disk_writep@wr,w,c
  2031  03B8' 1009'              	iorwf	disk_writep@wr+1,w,c
  2032  03BA' A4D8               	btfss	status,2,c
  2033  03BC' 0E00'              	movlw	low (__mediumconst shr (0+16))
  2034  03BE' 6E0A'              	movwf	disk_writep@wr+2,c
  2035  03C0' EE20 F026          	lfsr	2,38
  2036  03C4' 5100'              	movf	pf_write@fs& (0+255),w,b
  2037  03C6' 26D9               	addwf	fsr2l,f,c
  2038  03C8' 5100'              	movf	(pf_write@fs+1)& (0+255),w,b
  2039  03CA' 22DA               	addwfc	fsr2h,f,c
  2040  03CC' CFDE F00B'         	movff	postinc2,disk_writep@sc
  2041  03D0' CFDE F00C'         	movff	postinc2,disk_writep@sc+1
  2042  03D4' CFDE F00D'         	movff	postinc2,disk_writep@sc+2
  2043  03D8' CFDE F00E'         	movff	postinc2,disk_writep@sc+3
  2044  03DC' EC00' F000'        	call	_disk_writep	;wreg free
  2045  03E0' 0900               	iorlw	0
  2046  03E2' B4D8               	btfsc	status,2,c
  2047  03E4' D00B               	goto	l448
  2048  03E6' 0100               	movlb	0	; () banked
  2049  03E8' EE20 F001          	lfsr	2,1
  2050  03EC' 5100'              	movf	pf_write@fs& (0+255),w,b
  2051  03EE' 26D9               	addwf	fsr2l,f,c
  2052  03F0' 5100'              	movf	(pf_write@fs+1)& (0+255),w,b
  2053  03F2' 22DA               	addwfc	fsr2h,f,c
  2054  03F4' 0E00               	movlw	0
  2055  03F6' 6EDF               	movwf	indf2,c
  2056                           
  2057                           ; BSR set to: 0
  2058  03F8' 0E01               	movlw	1
  2059                           
  2060                           ; BSR set to: 0
  2061  03FA' 0012               	return	
  2062  03FC'                    l448:
  2063                           
  2064                           ;pff.c: 962: fs->fptr += wcnt; p += wcnt;
  2065                           
  2066                           ; BSR set to: 0
  2067  03FC' 0100               	movlb	0	; () banked
  2068  03FE' EE20 F016          	lfsr	2,22
  2069  0402' 5100'              	movf	pf_write@fs& (0+255),w,b
  2070  0404' 26D9               	addwf	fsr2l,f,c
  2071  0406' 5100'              	movf	(pf_write@fs+1)& (0+255),w,b
  2072  0408' 22DA               	addwfc	fsr2h,f,c
  2073  040A' 5100'              	movf	pf_write@wcnt& (0+255),w,b
  2074  040C' 26DE               	addwf	postinc2,f,c
  2075  040E' 5100'              	movf	(pf_write@wcnt+1)& (0+255),w,b
  2076  0410' 22DE               	addwfc	postinc2,f,c
  2077  0412' 0E00               	movlw	0
  2078  0414' 22DE               	addwfc	postinc2,f,c
  2079  0416' 22DE               	addwfc	postinc2,f,c
  2080                           
  2081                           ; BSR set to: 0
  2082  0418' 5100'              	movf	pf_write@wcnt& (0+255),w,b
  2083  041A' 2700'              	addwf	pf_write@p& (0+255),f,b
  2084  041C' 5100'              	movf	(pf_write@wcnt+1)& (0+255),w,b
  2085  041E' 2300'              	addwfc	(pf_write@p+1)& (0+255),f,b
  2086                           
  2087                           ; BSR set to: 0
  2088                           ;pff.c: 963: btw -= wcnt; *bw += wcnt;
  2089  0420' 5100'              	movf	pf_write@wcnt& (0+255),w,b
  2090  0422' 5E48'              	subwf	pf_write@btw,f,c
  2091  0424' 5100'              	movf	(pf_write@wcnt+1)& (0+255),w,b
  2092  0426' 5A49'              	subwfb	pf_write@btw+1,f,c
  2093                           
  2094                           ; BSR set to: 0
  2095  0428' C04A' FFD9         	movff	pf_write@bw,fsr2l
  2096  042C' C04B' FFDA         	movff	pf_write@bw+1,fsr2h
  2097  0430' 5100'              	movf	pf_write@wcnt& (0+255),w,b
  2098  0432' 26DE               	addwf	postinc2,f,c
  2099  0434' 5100'              	movf	(pf_write@wcnt+1)& (0+255),w,b
  2100  0436' 22DD               	addwfc	postdec2,f,c
  2101                           
  2102                           ; BSR set to: 0
  2103                           ;pff.c: 964: if ((UINT)fs->fptr % 512 == 0) {
  2104  0438' 0EFF               	movlw	255
  2105  043A' 6E00'              	movwf	??_pf_write& (0+255),c
  2106  043C' 0E01               	movlw	1
  2107  043E' 6E00'              	movwf	(??_pf_write+1)& (0+255),c
  2108  0440' EE20 F016          	lfsr	2,22
  2109  0444' 5100'              	movf	pf_write@fs& (0+255),w,b
  2110  0446' 26D9               	addwf	fsr2l,f,c
  2111  0448' 5100'              	movf	(pf_write@fs+1)& (0+255),w,b
  2112  044A' 22DA               	addwfc	fsr2h,f,c
  2113  044C' CFDE F04E'         	movff	postinc2,??_pf_write+2
  2114  0450' CFDD F04F'         	movff	postdec2,??_pf_write+3
  2115  0454' 504C'              	movf	??_pf_write,w,c
  2116  0456' 164E'              	andwf	??_pf_write+2,f,c
  2117  0458' 504D'              	movf	??_pf_write+1,w,c
  2118  045A' 164F'              	andwf	??_pf_write+3,f,c
  2119  045C' 504E'              	movf	??_pf_write+2,w,c
  2120  045E' 104F'              	iorwf	??_pf_write+3,w,c
  2121  0460' A4D8               	btfss	status,2,c
  2122  0462' D027               	goto	l449
  2123                           
  2124                           ; BSR set to: 0
  2125                           ;pff.c: 965: if (disk_writep(0, 0)) {fs->flag = 0; return FR_DISK_ERR;};
  2126  0464' 0E00               	movlw	0
  2127  0466' 6E08'              	movwf	disk_writep@wr,c
  2128  0468' 0E00               	movlw	0
  2129  046A' 6E09'              	movwf	disk_writep@wr+1,c
  2130  046C' 0E00               	movlw	0
  2131  046E' 6E0A'              	movwf	disk_writep@wr+2,c
  2132  0470' 0E00               	movlw	0
  2133  0472' 6E0B'              	movwf	disk_writep@sc,c
  2134  0474' 0E00               	movlw	0
  2135  0476' 6E0C'              	movwf	disk_writep@sc+1,c
  2136  0478' 0E00               	movlw	0
  2137  047A' 6E0D'              	movwf	disk_writep@sc+2,c
  2138  047C' 0E00               	movlw	0
  2139  047E' 6E0E'              	movwf	disk_writep@sc+3,c
  2140  0480' EC00' F000'        	call	_disk_writep	;wreg free
  2141  0484' 0900               	iorlw	0
  2142  0486' B4D8               	btfsc	status,2,c
  2143  0488' D00B               	goto	l450
  2144  048A' 0100               	movlb	0	; () banked
  2145  048C' EE20 F001          	lfsr	2,1
  2146  0490' 5100'              	movf	pf_write@fs& (0+255),w,b
  2147  0492' 26D9               	addwf	fsr2l,f,c
  2148  0494' 5100'              	movf	(pf_write@fs+1)& (0+255),w,b
  2149  0496' 22DA               	addwfc	fsr2h,f,c
  2150  0498' 0E00               	movlw	0
  2151  049A' 6EDF               	movwf	indf2,c
  2152                           
  2153                           ; BSR set to: 0
  2154  049C' 0E01               	movlw	1
  2155                           
  2156                           ; BSR set to: 0
  2157  049E' 0012               	return	
  2158  04A0'                    l450:
  2159                           
  2160                           ;pff.c: 966: fs->flag &= ~0x40;
  2161                           
  2162                           ; BSR set to: 0
  2163  04A0' 0100               	movlb	0	; () banked
  2164  04A2' EE20 F001          	lfsr	2,1
  2165  04A6' 5100'              	movf	pf_write@fs& (0+255),w,b
  2166  04A8' 26D9               	addwf	fsr2l,f,c
  2167  04AA' 5100'              	movf	(pf_write@fs+1)& (0+255),w,b
  2168  04AC' 22DA               	addwfc	fsr2h,f,c
  2169  04AE' 0EBF               	movlw	191
  2170  04B0' 16DF               	andwf	indf2,f,c
  2171  04B2'                    l449:
  2172                           
  2173                           ; BSR set to: 0
  2174                           
  2175                           ; BSR set to: 0
  2176                           
  2177                           ; BSR set to: 0
  2178  04B2' 5048'              	movf	pf_write@btw,w,c
  2179  04B4' 1049'              	iorwf	pf_write@btw+1,w,c
  2180  04B6' A4D8               	btfss	status,2,c
  2181  04B8' D655               	goto	l439
  2182                           
  2183                           ; BSR set to: 0
  2184                           ;pff.c: 967: }
  2185                           ;pff.c: 968: }
  2186                           ;pff.c: 970: return FR_OK;
  2187                           
  2188                           ; BSR set to: 0
  2189  04BA' 0E00               	movlw	0
  2190  04BC' 0012               	return	
  2191  04BE'                    __end_of_pf_write:
  2192                           	opt stack 0
  2193                           tblptru	equ	0xFF8
  2194                           tblptrh	equ	0xFF7
  2195                           tblptrl	equ	0xFF6
  2196                           tablat	equ	0xFF5
  2197                           postinc0	equ	0xFEE
  2198                           wreg	equ	0xFE8
  2199                           postdec1	equ	0xFE5
  2200                           fsr1h	equ	0xFE2
  2201                           fsr1l	equ	0xFE1
  2202                           indf2	equ	0xFDF
  2203                           postinc2	equ	0xFDE
  2204                           postdec2	equ	0xFDD
  2205                           plusw2	equ	0xFDB
  2206                           fsr2h	equ	0xFDA
  2207                           fsr2l	equ	0xFD9
  2208                           status	equ	0xFD8
  2209                           
  2210 ;; *************** function _disk_writep *****************
  2211 ;; Defined at:
  2212 ;;		line 564 in file "SDCard.c"
  2213 ;; Parameters:    Size  Location     Type
  2214 ;;  wr              3    8[COMRAM] PTR const unsigned char 
  2215 ;;		 -> ROM(32767), STR_2(8), 
  2216 ;;  sc              4   11[COMRAM] unsigned long 
  2217 ;; Auto vars:     Size  Location     Type
  2218 ;;  j               2   21[COMRAM] int 
  2219 ;;  i               2   19[COMRAM] int 
  2220 ;;  buff            1   23[COMRAM] unsigned char 
  2221 ;;  res             1    0        enum E14
  2222 ;; Return value:  Size  Location     Type
  2223 ;;                  1    wreg      enum E14
  2224 ;; Registers used:
  2225 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, b
      +temp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, bsr, cstack
  2226 ;; Tracked objects:
  2227 ;;		On entry : 0/0
  2228 ;;		On exit  : 0/0
  2229 ;;		Unchanged: 0/0
  2230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2231 ;;      Params:         7       0       0       0       0       0       0       0       0
  2232 ;;      Locals:         5       0       0       0       0       0       0       0       0
  2233 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2234 ;;      Totals:        16       0       0       0       0       0       0       0       0
  2235 ;;Total ram usage:       16 bytes
  2236 ;; Hardware stack levels used:    1
  2237 ;; Hardware stack levels required when called:    2
  2238 ;; This function calls:
  2239 ;;		_Command
  2240 ;;		_WriteSPI_
  2241 ;;		_dummy_clocks
  2242 ;;		_proceed
  2243 ;;		_response
  2244 ;; This function is called by:
  2245 ;;		_pf_write
  2246 ;; This function uses a non-reentrant model
  2247 ;;
  2248                           
  2249                           	psect	text4
  2250  0000'                    __ptext4:
  2251                           	opt stack 0
  2252  0000'                    _disk_writep:
  2253                           	opt stack 27
  2254                           
  2255                           ;SDCard.c: 569: DRESULT res;
  2256                           ;SDCard.c: 571: unsigned char buff;
  2257                           ;SDCard.c: 572: int i=0,j;
  2258                           
  2259                           ; BSR set to: 0
  2260                           ;incstack = 0
  2261  0000' 0E00               	movlw	0
  2262  0002' 6E14'              	movwf	disk_writep@i+1,c
  2263  0004' 0E00               	movlw	0
  2264  0006' 6E13'              	movwf	disk_writep@i,c
  2265                           
  2266                           ;SDCard.c: 575: dummy_clocks(8);
  2267  0008' 0E00               	movlw	0
  2268  000A' 6E01'              	movwf	?_dummy_clocks+1,c
  2269  000C' 0E08               	movlw	8
  2270  000E' 6E00'              	movwf	?_dummy_clocks,c
  2271  0010' EC00' F000'        	call	_dummy_clocks	;wreg free
  2272                           
  2273                           ;SDCard.c: 576: Command(0X58, sc*512, 0X00);
  2274  0014' C00B' F00F'        	movff	disk_writep@sc,??_disk_writep
  2275  0018' C00C' F010'        	movff	disk_writep@sc+1,??_disk_writep+1
  2276  001C' C00D' F011'        	movff	disk_writep@sc+2,??_disk_writep+2
  2277  0020' C00E' F012'        	movff	disk_writep@sc+3,??_disk_writep+3
  2278  0024' 0E09               	movlw	9
  2279  0026'                    u3065:
  2280  0026' 90D8               	bcf	status,0,c
  2281  0028' 360F'              	rlcf	??_disk_writep,f,c
  2282  002A' 3610'              	rlcf	??_disk_writep+1,f,c
  2283  002C' 3611'              	rlcf	??_disk_writep+2,f,c
  2284  002E' 3612'              	rlcf	??_disk_writep+3,f,c
  2285  0030' 2EE8               	decfsz	wreg,f,c
  2286  0032' D7F9               	goto	u3065
  2287  0034' C00F' F001'        	movff	??_disk_writep,Command@arg
  2288  0038' C010' F002'        	movff	??_disk_writep+1,Command@arg+1
  2289  003C' C011' F003'        	movff	??_disk_writep+2,Command@arg+2
  2290  0040' C012' F004'        	movff	??_disk_writep+3,Command@arg+3
  2291  0044' 0E00               	movlw	0
  2292  0046' 6E05'              	movwf	Command@CRC,c
  2293  0048' 0E58               	movlw	88
  2294  004A' EC00' F000'        	call	_Command
  2295                           
  2296                           ;SDCard.c: 577: proceed();
  2297  004E' EC00' F000'        	call	_proceed	;wreg free
  2298  0052'                    
  2299                           ;SDCard.c: 579: buff = response();
  2300  0052' EC00' F000'        	call	_response	;wreg free
  2301  0056' 6E17'              	movwf	disk_writep@buff,c
  2302                           
  2303                           ;SDCard.c: 580: }while(buff!=0x00);
  2304  0058' 5017'              	movf	disk_writep@buff,w,c
  2305  005A' A4D8               	btfss	status,2,c
  2306  005C' D7FA               	goto	l214
  2307                           
  2308                           ;SDCard.c: 584: dummy_clocks(8);
  2309  005E' 0E00               	movlw	0
  2310  0060' 6E01'              	movwf	?_dummy_clocks+1,c
  2311  0062' 0E08               	movlw	8
  2312  0064' 6E00'              	movwf	?_dummy_clocks,c
  2313  0066' EC00' F000'        	call	_dummy_clocks	;wreg free
  2314                           
  2315                           ;SDCard.c: 586: WriteSPI_(0XFE);
  2316  006A' 0EFE               	movlw	254
  2317  006C' EC00' F000'        	call	_WriteSPI_
  2318                           
  2319                           ;SDCard.c: 588: for(j=0;j<512;j++)
  2320  0070' 0E00               	movlw	0
  2321  0072' 6E16'              	movwf	disk_writep@j+1,c
  2322  0074' 0E00               	movlw	0
  2323  0076' 6E15'              	movwf	disk_writep@j,c
  2324  0078'                    l3141:
  2325  0078' BE16'              	btfsc	disk_writep@j+1,7,c
  2326  007A' D004               	goto	l216
  2327  007C' 0E02               	movlw	2
  2328  007E' 5C16'              	subwf	disk_writep@j+1,w,c
  2329  0080' B0D8               	btfsc	status,0,c
  2330  0082' D022               	goto	u3100
  2331  0084'                    l216:
  2332                           
  2333                           ;SDCard.c: 589: {
  2334                           ;SDCard.c: 590: if(*wr!='\0')
  2335  0084' C008' FFF6         	movff	disk_writep@wr,tblptrl
  2336  0088' C009' FFF7         	movff	disk_writep@wr+1,tblptrh
  2337  008C' C00A' FFF8         	movff	disk_writep@wr+2,tblptru
  2338  0090' 0008               	tblrd		*
  2339  0092' 50F5               	movf	tablat,w,c
  2340  0094' 0900               	iorlw	0
  2341  0096' B4D8               	btfsc	status,2,c
  2342  0098' D011               	goto	l218
  2343                           
  2344                           ;SDCard.c: 591: {
  2345                           ;SDCard.c: 592: WriteSPI_(*wr);
  2346  009A' C008' FFF6         	movff	disk_writep@wr,tblptrl
  2347  009E' C009' FFF7         	movff	disk_writep@wr+1,tblptrh
  2348  00A2' C00A' FFF8         	movff	disk_writep@wr+2,tblptru
  2349  00A6' 0008               	tblrd		*
  2350  00A8' 50F5               	movf	tablat,w,c
  2351  00AA' EC00' F000'        	call	_WriteSPI_
  2352                           
  2353                           ;SDCard.c: 593: wr++;
  2354  00AE' 0E01               	movlw	1
  2355  00B0' 2608'              	addwf	disk_writep@wr,f,c
  2356  00B2' 0E00               	movlw	0
  2357  00B4' 2209'              	addwfc	disk_writep@wr+1,f,c
  2358  00B6' 0E00               	movlw	0
  2359  00B8' 220A'              	addwfc	disk_writep@wr+2,f,c
  2360                           
  2361                           ;SDCard.c: 594: }
  2362  00BA' D003               	goto	l219
  2363  00BC'                    l218:
  2364                           
  2365                           ;SDCard.c: 595: else
  2366                           ;SDCard.c: 596: WriteSPI_(0x00);
  2367  00BC' 0E00               	movlw	0
  2368  00BE' EC00' F000'        	call	_WriteSPI_
  2369  00C2'                    l219:
  2370  00C2' 4A15'              	infsnz	disk_writep@j,f,c
  2371  00C4' 2A16'              	incf	disk_writep@j+1,f,c
  2372  00C6' D7D8               	goto	l3141
  2373  00C8'                    u3100:
  2374                           
  2375                           ;SDCard.c: 597: }
  2376                           ;SDCard.c: 598: WriteSPI_(0XFF);
  2377  00C8' 0EFF               	movlw	255
  2378  00CA' EC00' F000'        	call	_WriteSPI_
  2379                           
  2380                           ;SDCard.c: 599: WriteSPI_(0XFF);
  2381  00CE' 0EFF               	movlw	255
  2382  00D0' EC00' F000'        	call	_WriteSPI_
  2383                           
  2384                           ;SDCard.c: 601: proceed();
  2385  00D4' EC00' F000'        	call	_proceed	;wreg free
  2386                           
  2387                           ;SDCard.c: 603: dummy_clocks(8);
  2388  00D8' 0E00               	movlw	0
  2389  00DA' 6E01'              	movwf	?_dummy_clocks+1,c
  2390  00DC' 0E08               	movlw	8
  2391  00DE' 6E00'              	movwf	?_dummy_clocks,c
  2392  00E0' EC00' F000'        	call	_dummy_clocks	;wreg free
  2393                           
  2394                           ;SDCard.c: 605: Command(0X4D,0X00000000,0X00);
  2395  00E4' 0E00               	movlw	0
  2396  00E6' 6E01'              	movwf	Command@arg,c
  2397  00E8' 0E00               	movlw	0
  2398  00EA' 6E02'              	movwf	Command@arg+1,c
  2399  00EC' 0E00               	movlw	0
  2400  00EE' 6E03'              	movwf	Command@arg+2,c
  2401  00F0' 0E00               	movlw	0
  2402  00F2' 6E04'              	movwf	Command@arg+3,c
  2403  00F4' 0E00               	movlw	0
  2404  00F6' 6E05'              	movwf	Command@CRC,c
  2405  00F8' 0E4D               	movlw	77
  2406  00FA' EC00' F000'        	call	_Command
  2407                           
  2408                           ;SDCard.c: 606: proceed();
  2409  00FE' EC00' F000'        	call	_proceed	;wreg free
  2410  0102'                    
  2411                           ;SDCard.c: 608: buff = response();
  2412  0102' EC00' F000'        	call	_response	;wreg free
  2413  0106' 6E17'              	movwf	disk_writep@buff,c
  2414                           
  2415                           ;SDCard.c: 609: }while(buff!=0x00);
  2416  0108' 5017'              	movf	disk_writep@buff,w,c
  2417  010A' A4D8               	btfss	status,2,c
  2418  010C' D7FA               	goto	l220
  2419                           
  2420                           ;SDCard.c: 611: return RES_OK;
  2421  010E' 0E00               	movlw	0
  2422  0110' 0012               	return	
  2423  0112'                    __end_of_disk_writep:
  2424                           	opt stack 0
  2425                           tblptru	equ	0xFF8
  2426                           tblptrh	equ	0xFF7
  2427                           tblptrl	equ	0xFF6
  2428                           tablat	equ	0xFF5
  2429                           postinc0	equ	0xFEE
  2430                           wreg	equ	0xFE8
  2431                           postdec1	equ	0xFE5
  2432                           fsr1h	equ	0xFE2
  2433                           fsr1l	equ	0xFE1
  2434                           indf2	equ	0xFDF
  2435                           postinc2	equ	0xFDE
  2436                           postdec2	equ	0xFDD
  2437                           plusw2	equ	0xFDB
  2438                           fsr2h	equ	0xFDA
  2439                           fsr2l	equ	0xFD9
  2440                           status	equ	0xFD8
  2441                           
  2442 ;; *************** function _pf_read *****************
  2443 ;; Defined at:
  2444 ;;		line 856 in file "pff.c"
  2445 ;; Parameters:    Size  Location     Type
  2446 ;;  buff            2   70[COMRAM] PTR void 
  2447 ;;		 -> data_buffer_32(32), 
  2448 ;;  btr             2   72[COMRAM] unsigned int 
  2449 ;;  br              2   74[COMRAM] PTR unsigned int 
  2450 ;;		 -> main@br(2), 
  2451 ;; Auto vars:     Size  Location     Type
  2452 ;;  clst            4   13[BANK0 ] unsigned long 
  2453 ;;  remain          4    9[BANK0 ] unsigned long 
  2454 ;;  sect            4    5[BANK0 ] unsigned long 
  2455 ;;  fs              2   20[BANK0 ] PTR struct .
  2456 ;;		 -> NULL(0), main@fs(42), 
  2457 ;;  rcnt            2   18[BANK0 ] unsigned int 
  2458 ;;  rbuff           2    0[BANK0 ] PTR unsigned char 
  2459 ;;		 -> data_buffer_32(32), 
  2460 ;;  cs              1   17[BANK0 ] unsigned char 
  2461 ;;  dr              1    4[BANK0 ] enum E73
  2462 ;; Return value:  Size  Location     Type
  2463 ;;                  1    wreg      enum E43
  2464 ;; Registers used:
  2465 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, b
      +temp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, bsr, cstack
  2466 ;; Tracked objects:
  2467 ;;		On entry : 0/0
  2468 ;;		On exit  : 0/0
  2469 ;;		Unchanged: 0/0
  2470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2471 ;;      Params:         6       0       0       0       0       0       0       0       0
  2472 ;;      Locals:         0      22       0       0       0       0       0       0       0
  2473 ;;      Temps:          8       0       0       0       0       0       0       0       0
  2474 ;;      Totals:        14      22       0       0       0       0       0       0       0
  2475 ;;Total ram usage:       36 bytes
  2476 ;; Hardware stack levels used:    1
  2477 ;; Hardware stack levels required when called:    4
  2478 ;; This function calls:
  2479 ;;		_clust2sect
  2480 ;;		_disk_readp
  2481 ;;		_get_fat
  2482 ;; This function is called by:
  2483 ;;		_main
  2484 ;; This function uses a non-reentrant model
  2485 ;;
  2486                           
  2487                           	psect	text5
  2488  0000'                    __ptext5:
  2489                           	opt stack 0
  2490  0000'                    _pf_read:
  2491                           	opt stack 26
  2492                           
  2493                           ;pff.c: 862: DRESULT dr;
  2494                           ;pff.c: 863: DWORD clst;
  2495                           ;pff.c: 864: DWORD sect, remain;
  2496                           ;pff.c: 865: UINT rcnt;
  2497                           ;pff.c: 866: BYTE cs, *rbuff = buff;
  2498                           
  2499                           ;incstack = 0
  2500  0000' C046' F000'        	movff	pf_read@buff,pf_read@rbuff
  2501  0004' C047' F001'        	movff	pf_read@buff+1,pf_read@rbuff+1
  2502                           
  2503                           ;pff.c: 867: FATFS *fs = FatFs;
  2504  0008' C004' F014'        	movff	_FatFs,pf_read@fs
  2505  000C' C005' F015'        	movff	_FatFs+1,pf_read@fs+1
  2506                           
  2507                           ;pff.c: 870: *br = 0;
  2508  0010' C04A' FFD9         	movff	pf_read@br,fsr2l
  2509  0014' C04B' FFDA         	movff	pf_read@br+1,fsr2h
  2510  0018' 0E00               	movlw	0
  2511  001A' 6EDE               	movwf	postinc2,c
  2512  001C' 0E00               	movlw	0
  2513  001E' 6EDD               	movwf	postdec2,c
  2514                           
  2515                           ;pff.c: 871: if (!fs) return FR_NOT_ENABLED;
  2516  0020' 0100               	movlb	0	; () banked
  2517  0022' 5100'              	movf	pf_read@fs& (0+255),w,b
  2518  0024' 1100'              	iorwf	(pf_read@fs+1)& (0+255),w,b
  2519  0026' A4D8               	btfss	status,2,c
  2520  0028' D002               	goto	l409
  2521                           
  2522                           ; BSR set to: 0
  2523  002A' 0E05               	movlw	5
  2524                           
  2525                           ; BSR set to: 0
  2526  002C' 0012               	return	
  2527  002E'                    l409:
  2528                           
  2529                           ; BSR set to: 0
  2530                           ;pff.c: 872: if (!(fs->flag & 0x01))
  2531                           
  2532                           ; BSR set to: 0
  2533  002E' EE20 F001          	lfsr	2,1
  2534  0032' 5100'              	movf	pf_read@fs& (0+255),w,b
  2535  0034' 26D9               	addwf	fsr2l,f,c
  2536  0036' 5100'              	movf	(pf_read@fs+1)& (0+255),w,b
  2537  0038' 22DA               	addwfc	fsr2h,f,c
  2538  003A' B0DF               	btfsc	indf2,0,c
  2539  003C' D002               	goto	l411
  2540                           
  2541                           ; BSR set to: 0
  2542                           ;pff.c: 873: return FR_NOT_OPENED;
  2543  003E' 0E04               	movlw	4
  2544                           
  2545                           ; BSR set to: 0
  2546  0040' 0012               	return	
  2547  0042'                    l411:
  2548                           
  2549                           ; BSR set to: 0
  2550                           ;pff.c: 875: remain = fs->fsize - fs->fptr;
  2551                           
  2552                           ; BSR set to: 0
  2553  0042' EE20 F01A          	lfsr	2,26
  2554  0046' 5100'              	movf	pf_read@fs& (0+255),w,b
  2555  0048' 26D9               	addwf	fsr2l,f,c
  2556  004A' 5100'              	movf	(pf_read@fs+1)& (0+255),w,b
  2557  004C' 22DA               	addwfc	fsr2h,f,c
  2558  004E' CFDE F04C'         	movff	postinc2,??_pf_read
  2559  0052' CFDE F04D'         	movff	postinc2,??_pf_read+1
  2560  0056' CFDE F04E'         	movff	postinc2,??_pf_read+2
  2561  005A' CFDE F04F'         	movff	postinc2,??_pf_read+3
  2562  005E' EE20 F016          	lfsr	2,22
  2563  0062' 5100'              	movf	pf_read@fs& (0+255),w,b
  2564  0064' 26D9               	addwf	fsr2l,f,c
  2565  0066' 5100'              	movf	(pf_read@fs+1)& (0+255),w,b
  2566  0068' 22DA               	addwfc	fsr2h,f,c
  2567  006A' CFDE F050'         	movff	postinc2,??_pf_read+4
  2568  006E' CFDE F051'         	movff	postinc2,??_pf_read+5
  2569  0072' CFDE F052'         	movff	postinc2,??_pf_read+6
  2570  0076' CFDE F053'         	movff	postinc2,??_pf_read+7
  2571  007A' 1E50'              	comf	??_pf_read+4,f,c
  2572  007C' 1E51'              	comf	??_pf_read+5,f,c
  2573  007E' 1E52'              	comf	??_pf_read+6,f,c
  2574  0080' 1E53'              	comf	??_pf_read+7,f,c
  2575  0082' 2A50'              	incf	??_pf_read+4,f,c
  2576  0084' 0E00               	movlw	0
  2577  0086' 2251'              	addwfc	??_pf_read+5,f,c
  2578  0088' 2252'              	addwfc	??_pf_read+6,f,c
  2579  008A' 2253'              	addwfc	??_pf_read+7,f,c
  2580  008C' 504C'              	movf	??_pf_read,w,c
  2581  008E' 2450'              	addwf	??_pf_read+4,w,c
  2582  0090' 6F00'              	movwf	pf_read@remain& (0+255),b
  2583  0092' 504D'              	movf	??_pf_read+1,w,c
  2584  0094' 2051'              	addwfc	??_pf_read+5,w,c
  2585  0096' 6F00'              	movwf	(pf_read@remain+1)& (0+255),b
  2586  0098' 504E'              	movf	??_pf_read+2,w,c
  2587  009A' 2052'              	addwfc	??_pf_read+6,w,c
  2588  009C' 6F00'              	movwf	(pf_read@remain+2)& (0+255),b
  2589  009E' 504F'              	movf	??_pf_read+3,w,c
  2590  00A0' 2053'              	addwfc	??_pf_read+7,w,c
  2591  00A2' 6F00'              	movwf	(pf_read@remain+3)& (0+255),b
  2592                           
  2593                           ; BSR set to: 0
  2594                           ;pff.c: 876: if (btr > remain) btr = (UINT)remain;
  2595  00A4' 5048'              	movf	pf_read@btr,w,c
  2596  00A6' 6E00'              	movwf	??_pf_read& (0+255),c
  2597  00A8' 5049'              	movf	pf_read@btr+1,w,c
  2598  00AA' 6E00'              	movwf	(??_pf_read+1)& (0+255),c
  2599  00AC' 6A00'              	clrf	(??_pf_read+2)& (0+255),c
  2600  00AE' 6A00'              	clrf	(??_pf_read+3)& (0+255),c
  2601  00B0' 504C'              	movf	??_pf_read,w,c
  2602  00B2' 5D00'              	subwf	pf_read@remain& (0+255),w,b
  2603  00B4' 504D'              	movf	??_pf_read+1,w,c
  2604  00B6' 5900'              	subwfb	(pf_read@remain+1)& (0+255),w,b
  2605  00B8' 504E'              	movf	??_pf_read+2,w,c
  2606  00BA' 5900'              	subwfb	(pf_read@remain+2)& (0+255),w,b
  2607  00BC' 504F'              	movf	??_pf_read+3,w,c
  2608  00BE' 5900'              	subwfb	(pf_read@remain+3)& (0+255),w,b
  2609  00C0' B0D8               	btfsc	status,0,c
  2610  00C2' D160               	goto	l413
  2611                           
  2612                           ; BSR set to: 0
  2613  00C4' C009' F048'        	movff	pf_read@remain,pf_read@btr
  2614  00C8' C00A' F049'        	movff	pf_read@remain+1,pf_read@btr+1
  2615                           
  2616                           ; BSR set to: 0
  2617                           ;pff.c: 878: while (btr) {
  2618  00CC' D15B               	goto	l413
  2619  00CE'                    
  2620                           ; BSR set to: 0
  2621                           ;pff.c: 879: if ((fs->fptr % 512) == 0) {
  2622                           
  2623                           ; BSR set to: 0
  2624  00CE' EE20 F016          	lfsr	2,22
  2625  00D2' 5100'              	movf	pf_read@fs& (0+255),w,b
  2626  00D4' 26D9               	addwf	fsr2l,f,c
  2627  00D6' 5100'              	movf	(pf_read@fs+1)& (0+255),w,b
  2628  00D8' 22DA               	addwfc	fsr2h,f,c
  2629  00DA' 0EFF               	movlw	255
  2630  00DC' 14DE               	andwf	postinc2,w,c
  2631  00DE' 6E00'              	movwf	??_pf_read& (0+255),c
  2632  00E0' 0E01               	movlw	1
  2633  00E2' 14DE               	andwf	postinc2,w,c
  2634  00E4' 6E00'              	movwf	(??_pf_read+1)& (0+255),c
  2635  00E6' 0E00               	movlw	0
  2636  00E8' 14DE               	andwf	postinc2,w,c
  2637  00EA' 6E00'              	movwf	(??_pf_read+2)& (0+255),c
  2638  00EC' 0E00               	movlw	0
  2639  00EE' 14DE               	andwf	postinc2,w,c
  2640  00F0' 6E00'              	movwf	(??_pf_read+3)& (0+255),c
  2641  00F2' 504C'              	movf	??_pf_read,w,c
  2642  00F4' 104D'              	iorwf	??_pf_read+1,w,c
  2643  00F6' 104E'              	iorwf	??_pf_read+2,w,c
  2644  00F8' 104F'              	iorwf	??_pf_read+3,w,c
  2645  00FA' A4D8               	btfss	status,2,c
  2646  00FC' D0BC               	goto	l415
  2647                           
  2648                           ; BSR set to: 0
  2649                           ;pff.c: 880: cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));
  2650  00FE' EE20 F016          	lfsr	2,22
  2651  0102' 5100'              	movf	pf_read@fs& (0+255),w,b
  2652  0104' 26D9               	addwf	fsr2l,f,c
  2653  0106' 5100'              	movf	(pf_read@fs+1)& (0+255),w,b
  2654  0108' 22DA               	addwfc	fsr2h,f,c
  2655  010A' CFDE F04C'         	movff	postinc2,??_pf_read
  2656  010E' CFDE F04D'         	movff	postinc2,??_pf_read+1
  2657  0112' CFDE F04E'         	movff	postinc2,??_pf_read+2
  2658  0116' CFDE F04F'         	movff	postinc2,??_pf_read+3
  2659  011A' 0E0A               	movlw	10
  2660  011C' D005               	goto	u3720
  2661  011E'                    u3725:
  2662  011E' 90D8               	bcf	status,0,c
  2663  0120' 324F'              	rrcf	??_pf_read+3,f,c
  2664  0122' 324E'              	rrcf	??_pf_read+2,f,c
  2665  0124' 324D'              	rrcf	??_pf_read+1,f,c
  2666  0126' 324C'              	rrcf	??_pf_read,f,c
  2667  0128'                    u3720:
  2668  0128' 2EE8               	decfsz	wreg,f,c
  2669  012A' D7F9               	goto	u3725
  2670  012C' EE20 F002          	lfsr	2,2
  2671  0130' 5100'              	movf	pf_read@fs& (0+255),w,b
  2672  0132' 26D9               	addwf	fsr2l,f,c
  2673  0134' 5100'              	movf	(pf_read@fs+1)& (0+255),w,b
  2674  0136' 22DA               	addwfc	fsr2h,f,c
  2675  0138' 50DF               	movf	indf2,w,c
  2676  013A' 6E00'              	movwf	(??_pf_read+4)& (0+255),c
  2677  013C' 0450'              	decf	??_pf_read+4,w,c
  2678  013E' 144C'              	andwf	??_pf_read,w,c
  2679  0140' 6F00'              	movwf	pf_read@cs& (0+255),b
  2680                           
  2681                           ; BSR set to: 0
  2682                           ;pff.c: 881: if (!cs) {
  2683  0142' 5100'              	movf	pf_read@cs& (0+255),w,b
  2684  0144' A4D8               	btfss	status,2,c
  2685  0146' D054               	goto	l416
  2686                           
  2687                           ; BSR set to: 0
  2688                           ;pff.c: 882: if (fs->fptr == 0)
  2689  0148' EE20 F016          	lfsr	2,22
  2690  014C' 5100'              	movf	pf_read@fs& (0+255),w,b
  2691  014E' 26D9               	addwf	fsr2l,f,c
  2692  0150' 5100'              	movf	(pf_read@fs+1)& (0+255),w,b
  2693  0152' 22DA               	addwfc	fsr2h,f,c
  2694  0154' 50DE               	movf	postinc2,w,c
  2695  0156' 10DE               	iorwf	postinc2,w,c
  2696  0158' 10DE               	iorwf	postinc2,w,c
  2697  015A' 10DE               	iorwf	postinc2,w,c
  2698  015C' A4D8               	btfss	status,2,c
  2699  015E' D00F               	goto	l417
  2700                           
  2701                           ; BSR set to: 0
  2702                           ;pff.c: 883: clst = fs->org_clust;
  2703  0160' EE20 F01E          	lfsr	2,30
  2704  0164' 5100'              	movf	pf_read@fs& (0+255),w,b
  2705  0166' 26D9               	addwf	fsr2l,f,c
  2706  0168' 5100'              	movf	(pf_read@fs+1)& (0+255),w,b
  2707  016A' 22DA               	addwfc	fsr2h,f,c
  2708  016C' CFDE F00D'         	movff	postinc2,pf_read@clst
  2709  0170' CFDE F00E'         	movff	postinc2,pf_read@clst+1
  2710  0174' CFDE F00F'         	movff	postinc2,pf_read@clst+2
  2711  0178' CFDE F010'         	movff	postinc2,pf_read@clst+3
  2712  017C' D018               	goto	l418
  2713  017E'                    l417:
  2714                           
  2715                           ; BSR set to: 0
  2716                           ;pff.c: 884: else
  2717                           ;pff.c: 885: clst = get_fat(fs->curr_clust);
  2718                           
  2719                           ; BSR set to: 0
  2720  017E' EE20 F022          	lfsr	2,34
  2721  0182' 5100'              	movf	pf_read@fs& (0+255),w,b
  2722  0184' 26D9               	addwf	fsr2l,f,c
  2723  0186' 5100'              	movf	(pf_read@fs+1)& (0+255),w,b
  2724  0188' 22DA               	addwfc	fsr2h,f,c
  2725  018A' CFDE F01E'         	movff	postinc2,get_fat@clst
  2726  018E' CFDE F01F'         	movff	postinc2,get_fat@clst+1
  2727  0192' CFDE F020'         	movff	postinc2,get_fat@clst+2
  2728  0196' CFDE F021'         	movff	postinc2,get_fat@clst+3
  2729  019A' EC00' F000'        	call	_get_fat	;wreg free
  2730  019E' C01E' F00D'        	movff	?_get_fat,pf_read@clst
  2731  01A2' C01F' F00E'        	movff	?_get_fat+1,pf_read@clst+1
  2732  01A6' C020' F00F'        	movff	?_get_fat+2,pf_read@clst+2
  2733  01AA' C021' F010'        	movff	?_get_fat+3,pf_read@clst+3
  2734  01AE'                    l418:
  2735                           
  2736                           ;pff.c: 886: if (clst <= 1) {fs->flag = 0; return FR_DISK_ERR;};
  2737  01AE' 0100               	movlb	0	; () banked
  2738  01B0' 5100'              	movf	(pf_read@clst+3)& (0+255),w,b
  2739  01B2' 1100'              	iorwf	(pf_read@clst+2)& (0+255),w,b
  2740  01B4' 1100'              	iorwf	(pf_read@clst+1)& (0+255),w,b
  2741  01B6' E10E               	bnz	l3577
  2742  01B8' 0E02               	movlw	2
  2743  01BA' 5D00'              	subwf	pf_read@clst& (0+255),w,b
  2744  01BC' B0D8               	btfsc	status,0,c
  2745  01BE' D00A               	goto	l419
  2746                           
  2747                           ; BSR set to: 0
  2748  01C0' EE20 F001          	lfsr	2,1
  2749  01C4' 5100'              	movf	pf_read@fs& (0+255),w,b
  2750  01C6' 26D9               	addwf	fsr2l,f,c
  2751  01C8' 5100'              	movf	(pf_read@fs+1)& (0+255),w,b
  2752  01CA' 22DA               	addwfc	fsr2h,f,c
  2753  01CC' 0E00               	movlw	0
  2754  01CE' 6EDF               	movwf	indf2,c
  2755                           
  2756                           ; BSR set to: 0
  2757  01D0' 0E01               	movlw	1
  2758                           
  2759                           ; BSR set to: 0
  2760  01D2' 0012               	return	
  2761  01D4'                    l419:
  2762  01D4'                    l3577:
  2763                           
  2764                           ; BSR set to: 0
  2765                           ;pff.c: 887: fs->curr_clust = clst;
  2766  01D4' EE20 F022          	lfsr	2,34
  2767  01D8' 5100'              	movf	pf_read@fs& (0+255),w,b
  2768  01DA' 26D9               	addwf	fsr2l,f,c
  2769  01DC' 5100'              	movf	(pf_read@fs+1)& (0+255),w,b
  2770  01DE' 22DA               	addwfc	fsr2h,f,c
  2771  01E0' C00D' FFDE         	movff	pf_read@clst,postinc2
  2772  01E4' C00E' FFDE         	movff	pf_read@clst+1,postinc2
  2773  01E8' C00F' FFDE         	movff	pf_read@clst+2,postinc2
  2774  01EC' C010' FFDE         	movff	pf_read@clst+3,postinc2
  2775  01F0'                    l416:
  2776                           
  2777                           ; BSR set to: 0
  2778                           ;pff.c: 888: }
  2779                           ;pff.c: 889: sect = clust2sect(fs->curr_clust);
  2780                           
  2781                           ; BSR set to: 0
  2782  01F0' EE20 F022          	lfsr	2,34
  2783  01F4' 5100'              	movf	pf_read@fs& (0+255),w,b
  2784  01F6' 26D9               	addwf	fsr2l,f,c
  2785  01F8' 5100'              	movf	(pf_read@fs+1)& (0+255),w,b
  2786  01FA' 22DA               	addwfc	fsr2h,f,c
  2787  01FC' CFDE F00C'         	movff	postinc2,clust2sect@clst
  2788  0200' CFDE F00D'         	movff	postinc2,clust2sect@clst+1
  2789  0204' CFDE F00E'         	movff	postinc2,clust2sect@clst+2
  2790  0208' CFDE F00F'         	movff	postinc2,clust2sect@clst+3
  2791  020C' EC00' F000'        	call	_clust2sect	;wreg free
  2792  0210' C00C' F005'        	movff	?_clust2sect,pf_read@sect
  2793  0214' C00D' F006'        	movff	?_clust2sect+1,pf_read@sect+1
  2794  0218' C00E' F007'        	movff	?_clust2sect+2,pf_read@sect+2
  2795  021C' C00F' F008'        	movff	?_clust2sect+3,pf_read@sect+3
  2796                           
  2797                           ;pff.c: 890: if (!sect) {fs->flag = 0; return FR_DISK_ERR;};
  2798  0220' 0100               	movlb	0	; () banked
  2799  0222' 5100'              	movf	pf_read@sect& (0+255),w,b
  2800  0224' 1100'              	iorwf	(pf_read@sect+1)& (0+255),w,b
  2801  0226' 1100'              	iorwf	(pf_read@sect+2)& (0+255),w,b
  2802  0228' 1100'              	iorwf	(pf_read@sect+3)& (0+255),w,b
  2803  022A' A4D8               	btfss	status,2,c
  2804  022C' D00A               	goto	l420
  2805                           
  2806                           ; BSR set to: 0
  2807  022E' EE20 F001          	lfsr	2,1
  2808  0232' 5100'              	movf	pf_read@fs& (0+255),w,b
  2809  0234' 26D9               	addwf	fsr2l,f,c
  2810  0236' 5100'              	movf	(pf_read@fs+1)& (0+255),w,b
  2811  0238' 22DA               	addwfc	fsr2h,f,c
  2812  023A' 0E00               	movlw	0
  2813  023C' 6EDF               	movwf	indf2,c
  2814                           
  2815                           ; BSR set to: 0
  2816  023E' 0E01               	movlw	1
  2817                           
  2818                           ; BSR set to: 0
  2819  0240' 0012               	return	
  2820  0242'                    l420:
  2821                           
  2822                           ; BSR set to: 0
  2823                           ;pff.c: 891: fs->dsect = sect + cs;
  2824                           
  2825                           ; BSR set to: 0
  2826  0242' 5100'              	movf	pf_read@cs& (0+255),w,b
  2827  0244' 2500'              	addwf	pf_read@sect& (0+255),w,b
  2828  0246' 6E00'              	movwf	??_pf_read& (0+255),c
  2829  0248' 0E00               	movlw	0
  2830  024A' 2100'              	addwfc	(pf_read@sect+1)& (0+255),w,b
  2831  024C' 6E00'              	movwf	(??_pf_read+1)& (0+255),c
  2832  024E' 0E00               	movlw	0
  2833  0250' 2100'              	addwfc	(pf_read@sect+2)& (0+255),w,b
  2834  0252' 6E00'              	movwf	(??_pf_read+2)& (0+255),c
  2835  0254' 0E00               	movlw	0
  2836  0256' 2100'              	addwfc	(pf_read@sect+3)& (0+255),w,b
  2837  0258' 6E00'              	movwf	(??_pf_read+3)& (0+255),c
  2838  025A' EE20 F026          	lfsr	2,38
  2839  025E' 5100'              	movf	pf_read@fs& (0+255),w,b
  2840  0260' 26D9               	addwf	fsr2l,f,c
  2841  0262' 5100'              	movf	(pf_read@fs+1)& (0+255),w,b
  2842  0264' 22DA               	addwfc	fsr2h,f,c
  2843  0266' C04C' FFDE         	movff	??_pf_read,postinc2
  2844  026A' C04D' FFDE         	movff	??_pf_read+1,postinc2
  2845  026E' C04E' FFDE         	movff	??_pf_read+2,postinc2
  2846  0272' C04F' FFDE         	movff	??_pf_read+3,postinc2
  2847  0276'                    l415:
  2848                           
  2849                           ; BSR set to: 0
  2850                           ;pff.c: 892: }
  2851                           ;pff.c: 893: rcnt = 512 - (UINT)fs->fptr % 512;
  2852  0276' 0EFF               	movlw	255
  2853  0278' 6E00'              	movwf	??_pf_read& (0+255),c
  2854  027A' 0E01               	movlw	1
  2855  027C' 6E00'              	movwf	(??_pf_read+1)& (0+255),c
  2856  027E' EE20 F016          	lfsr	2,22
  2857  0282' 5100'              	movf	pf_read@fs& (0+255),w,b
  2858  0284' 26D9               	addwf	fsr2l,f,c
  2859  0286' 5100'              	movf	(pf_read@fs+1)& (0+255),w,b
  2860  0288' 22DA               	addwfc	fsr2h,f,c
  2861  028A' CFDE F04E'         	movff	postinc2,??_pf_read+2
  2862  028E' CFDD F04F'         	movff	postdec2,??_pf_read+3
  2863  0292' 504C'              	movf	??_pf_read,w,c
  2864  0294' 164E'              	andwf	??_pf_read+2,f,c
  2865  0296' 504D'              	movf	??_pf_read+1,w,c
  2866  0298' 164F'              	andwf	??_pf_read+3,f,c
  2867  029A' 1E4E'              	comf	??_pf_read+2,f,c
  2868  029C' 1E4F'              	comf	??_pf_read+3,f,c
  2869  029E' 4A4E'              	infsnz	??_pf_read+2,f,c
  2870  02A0' 2A4F'              	incf	??_pf_read+3,f,c
  2871  02A2' 0E00               	movlw	0
  2872  02A4' 244E'              	addwf	??_pf_read+2,w,c
  2873  02A6' 6F00'              	movwf	pf_read@rcnt& (0+255),b
  2874  02A8' 0E02               	movlw	2
  2875  02AA' 204F'              	addwfc	??_pf_read+3,w,c
  2876  02AC' 6F00'              	movwf	(pf_read@rcnt+1)& (0+255),b
  2877                           
  2878                           ; BSR set to: 0
  2879                           ;pff.c: 894: if (rcnt > btr) rcnt = btr;
  2880  02AE' 5100'              	movf	pf_read@rcnt& (0+255),w,b
  2881  02B0' 5C48'              	subwf	pf_read@btr,w,c
  2882  02B2' 5100'              	movf	(pf_read@rcnt+1)& (0+255),w,b
  2883  02B4' 5849'              	subwfb	pf_read@btr+1,w,c
  2884  02B6' B0D8               	btfsc	status,0,c
  2885  02B8' D004               	goto	l421
  2886                           
  2887                           ; BSR set to: 0
  2888  02BA' C048' F012'        	movff	pf_read@btr,pf_read@rcnt
  2889  02BE' C049' F013'        	movff	pf_read@btr+1,pf_read@rcnt+1
  2890  02C2'                    l421:
  2891                           
  2892                           ; BSR set to: 0
  2893                           ;pff.c: 895: dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (UINT)fs->fptr % 512, rcnt);
  2894                           
  2895                           ; BSR set to: 0
  2896  02C2' 5046'              	movf	pf_read@buff,w,c
  2897  02C4' 1047'              	iorwf	pf_read@buff+1,w,c
  2898  02C6' B4D8               	btfsc	status,2,c
  2899  02C8' D005               	goto	l423
  2900                           
  2901                           ; BSR set to: 0
  2902  02CA' C000' F002'        	movff	pf_read@rbuff,_pf_read$799
  2903  02CE' C001' F003'        	movff	pf_read@rbuff+1,_pf_read$799+1
  2904  02D2' D004               	goto	l425
  2905  02D4'                    l423:
  2906                           
  2907                           ; BSR set to: 0
  2908                           
  2909                           ; BSR set to: 0
  2910  02D4' 0E00               	movlw	0
  2911  02D6' 6F00'              	movwf	_pf_read$799& (0+255),b
  2912  02D8' 0E00               	movlw	0
  2913  02DA' 6F00'              	movwf	(_pf_read$799+1)& (0+255),b
  2914  02DC'                    l425:
  2915                           
  2916                           ; BSR set to: 0
  2917                           
  2918                           ; BSR set to: 0
  2919  02DC' C002' F008'        	movff	_pf_read$799,disk_readp@rd
  2920  02E0' C003' F009'        	movff	_pf_read$799+1,disk_readp@rd+1
  2921  02E4' EE20 F026          	lfsr	2,38
  2922  02E8' 5100'              	movf	pf_read@fs& (0+255),w,b
  2923  02EA' 26D9               	addwf	fsr2l,f,c
  2924  02EC' 5100'              	movf	(pf_read@fs+1)& (0+255),w,b
  2925  02EE' 22DA               	addwfc	fsr2h,f,c
  2926  02F0' CFDE F00A'         	movff	postinc2,disk_readp@sector
  2927  02F4' CFDE F00B'         	movff	postinc2,disk_readp@sector+1
  2928  02F8' CFDE F00C'         	movff	postinc2,disk_readp@sector+2
  2929  02FC' CFDE F00D'         	movff	postinc2,disk_readp@sector+3
  2930  0300' EE20 F016          	lfsr	2,22
  2931  0304' 5100'              	movf	pf_read@fs& (0+255),w,b
  2932  0306' 26D9               	addwf	fsr2l,f,c
  2933  0308' 5100'              	movf	(pf_read@fs+1)& (0+255),w,b
  2934  030A' 22DA               	addwfc	fsr2h,f,c
  2935  030C' CFDE F04C'         	movff	postinc2,??_pf_read
  2936  0310' CFDD F04D'         	movff	postdec2,??_pf_read+1
  2937  0314' 0EFF               	movlw	255
  2938  0316' 144C'              	andwf	??_pf_read,w,c
  2939  0318' 6E0E'              	movwf	disk_readp@offset,c
  2940  031A' 0E01               	movlw	1
  2941  031C' 144D'              	andwf	??_pf_read+1,w,c
  2942  031E' 6E0F'              	movwf	disk_readp@offset+1,c
  2943  0320' C012' F010'        	movff	pf_read@rcnt,disk_readp@count
  2944  0324' C013' F011'        	movff	pf_read@rcnt+1,disk_readp@count+1
  2945  0328' EC00' F000'        	call	_disk_readp	;wreg free
  2946  032C' 0100               	movlb	0	; () banked
  2947  032E' 6F00'              	movwf	pf_read@dr& (0+255),b
  2948                           
  2949                           ; BSR set to: 0
  2950                           ;pff.c: 896: if (dr) {fs->flag = 0; return FR_DISK_ERR;};
  2951  0330' 5100'              	movf	pf_read@dr& (0+255),w,b
  2952  0332' B4D8               	btfsc	status,2,c
  2953  0334' D00A               	goto	l426
  2954                           
  2955                           ; BSR set to: 0
  2956  0336' EE20 F001          	lfsr	2,1
  2957  033A' 5100'              	movf	pf_read@fs& (0+255),w,b
  2958  033C' 26D9               	addwf	fsr2l,f,c
  2959  033E' 5100'              	movf	(pf_read@fs+1)& (0+255),w,b
  2960  0340' 22DA               	addwfc	fsr2h,f,c
  2961  0342' 0E00               	movlw	0
  2962  0344' 6EDF               	movwf	indf2,c
  2963                           
  2964                           ; BSR set to: 0
  2965  0346' 0E01               	movlw	1
  2966                           
  2967                           ; BSR set to: 0
  2968  0348' 0012               	return	
  2969  034A'                    l426:
  2970                           
  2971                           ; BSR set to: 0
  2972                           ;pff.c: 897: fs->fptr += rcnt; rbuff += rcnt;
  2973                           
  2974                           ; BSR set to: 0
  2975  034A' EE20 F016          	lfsr	2,22
  2976  034E' 5100'              	movf	pf_read@fs& (0+255),w,b
  2977  0350' 26D9               	addwf	fsr2l,f,c
  2978  0352' 5100'              	movf	(pf_read@fs+1)& (0+255),w,b
  2979  0354' 22DA               	addwfc	fsr2h,f,c
  2980  0356' 5100'              	movf	pf_read@rcnt& (0+255),w,b
  2981  0358' 26DE               	addwf	postinc2,f,c
  2982  035A' 5100'              	movf	(pf_read@rcnt+1)& (0+255),w,b
  2983  035C' 22DE               	addwfc	postinc2,f,c
  2984  035E' 0E00               	movlw	0
  2985  0360' 22DE               	addwfc	postinc2,f,c
  2986  0362' 22DE               	addwfc	postinc2,f,c
  2987                           
  2988                           ; BSR set to: 0
  2989  0364' 5100'              	movf	pf_read@rcnt& (0+255),w,b
  2990  0366' 2700'              	addwf	pf_read@rbuff& (0+255),f,b
  2991  0368' 5100'              	movf	(pf_read@rcnt+1)& (0+255),w,b
  2992  036A' 2300'              	addwfc	(pf_read@rbuff+1)& (0+255),f,b
  2993                           
  2994                           ; BSR set to: 0
  2995                           ;pff.c: 898: btr -= rcnt; *br += rcnt;
  2996  036C' 5100'              	movf	pf_read@rcnt& (0+255),w,b
  2997  036E' 5E48'              	subwf	pf_read@btr,f,c
  2998  0370' 5100'              	movf	(pf_read@rcnt+1)& (0+255),w,b
  2999  0372' 5A49'              	subwfb	pf_read@btr+1,f,c
  3000                           
  3001                           ; BSR set to: 0
  3002  0374' C04A' FFD9         	movff	pf_read@br,fsr2l
  3003  0378' C04B' FFDA         	movff	pf_read@br+1,fsr2h
  3004  037C' 5100'              	movf	pf_read@rcnt& (0+255),w,b
  3005  037E' 26DE               	addwf	postinc2,f,c
  3006  0380' 5100'              	movf	(pf_read@rcnt+1)& (0+255),w,b
  3007  0382' 22DD               	addwfc	postdec2,f,c
  3008  0384'                    l413:
  3009                           
  3010                           ; BSR set to: 0
  3011                           
  3012                           ; BSR set to: 0
  3013  0384' 5048'              	movf	pf_read@btr,w,c
  3014  0386' 1049'              	iorwf	pf_read@btr+1,w,c
  3015  0388' A4D8               	btfss	status,2,c
  3016  038A' D6A1               	goto	l414
  3017                           
  3018                           ; BSR set to: 0
  3019                           ;pff.c: 899: }
  3020                           ;pff.c: 901: return FR_OK;
  3021                           
  3022                           ; BSR set to: 0
  3023  038C' 0E00               	movlw	0
  3024  038E' 0012               	return	
  3025  0390'                    __end_of_pf_read:
  3026                           	opt stack 0
  3027                           tblptru	equ	0xFF8
  3028                           tblptrh	equ	0xFF7
  3029                           tblptrl	equ	0xFF6
  3030                           tablat	equ	0xFF5
  3031                           postinc0	equ	0xFEE
  3032                           wreg	equ	0xFE8
  3033                           postdec1	equ	0xFE5
  3034                           fsr1h	equ	0xFE2
  3035                           fsr1l	equ	0xFE1
  3036                           indf2	equ	0xFDF
  3037                           postinc2	equ	0xFDE
  3038                           postdec2	equ	0xFDD
  3039                           plusw2	equ	0xFDB
  3040                           fsr2h	equ	0xFDA
  3041                           fsr2l	equ	0xFD9
  3042                           status	equ	0xFD8
  3043                           
  3044 ;; *************** function _pf_open *****************
  3045 ;; Defined at:
  3046 ;;		line 822 in file "pff.c"
  3047 ;; Parameters:    Size  Location     Type
  3048 ;;  path            2    7[BANK0 ] PTR const unsigned char 
  3049 ;;		 -> STR_1(10), 
  3050 ;; Auto vars:     Size  Location     Type
  3051 ;;  dir            32   43[BANK0 ] unsigned char [32]
  3052 ;;  dj             16   78[BANK0 ] struct .
  3053 ;;  sp             12   31[BANK0 ] unsigned char [12]
  3054 ;;  fs              2   76[BANK0 ] PTR struct .
  3055 ;;		 -> NULL(0), main@fs(42), 
  3056 ;;  res             1   75[BANK0 ] enum E43
  3057 ;; Return value:  Size  Location     Type
  3058 ;;                  1    wreg      enum E43
  3059 ;; Registers used:
  3060 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, b
      +temp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, bsr, cstack
  3061 ;; Tracked objects:
  3062 ;;		On entry : 0/0
  3063 ;;		On exit  : 0/0
  3064 ;;		Unchanged: 0/0
  3065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3066 ;;      Params:         0       2       0       0       0       0       0       0       0
  3067 ;;      Locals:         0      63       0       0       0       0       0       0       0
  3068 ;;      Temps:          0      22       0       0       0       0       0       0       0
  3069 ;;      Totals:         0      87       0       0       0       0       0       0       0
  3070 ;;Total ram usage:       87 bytes
  3071 ;; Hardware stack levels used:    1
  3072 ;; Hardware stack levels required when called:    7
  3073 ;; This function calls:
  3074 ;;		_follow_path
  3075 ;;		_get_clust
  3076 ;; This function is called by:
  3077 ;;		_main
  3078 ;; This function uses a non-reentrant model
  3079 ;;
  3080                           
  3081                           	psect	text6
  3082  0000'                    __ptext6:
  3083                           	opt stack 0
  3084  0000'                    _pf_open:
  3085                           	opt stack 23
  3086                           
  3087                           ;pff.c: 826: FRESULT res;
  3088                           ;pff.c: 827: DIR dj;
  3089                           ;pff.c: 828: BYTE sp[12], dir[32];
  3090                           ;pff.c: 829: FATFS *fs = FatFs;
  3091                           
  3092                           ; BSR set to: 0
  3093                           ;incstack = 0
  3094  0000' C004' F04C'        	movff	_FatFs,pf_open@fs
  3095  0004' C005' F04D'        	movff	_FatFs+1,pf_open@fs+1
  3096                           
  3097                           ;pff.c: 831: if (!fs) return FR_NOT_ENABLED;
  3098  0008' 0100               	movlb	0	; () banked
  3099  000A' 5100'              	movf	pf_open@fs& (0+255),w,b
  3100  000C' 1100'              	iorwf	(pf_open@fs+1)& (0+255),w,b
  3101  000E' A4D8               	btfss	status,2,c
  3102  0010' D002               	goto	l401
  3103                           
  3104                           ; BSR set to: 0
  3105  0012' 0E05               	movlw	5
  3106                           
  3107                           ; BSR set to: 0
  3108  0014' 0012               	return	
  3109  0016'                    l401:
  3110                           
  3111                           ; BSR set to: 0
  3112                           ;pff.c: 833: fs->flag = 0;
  3113                           
  3114                           ; BSR set to: 0
  3115  0016' EE20 F001          	lfsr	2,1
  3116  001A' 5100'              	movf	pf_open@fs& (0+255),w,b
  3117  001C' 26D9               	addwf	fsr2l,f,c
  3118  001E' 5100'              	movf	(pf_open@fs+1)& (0+255),w,b
  3119  0020' 22DA               	addwfc	fsr2h,f,c
  3120  0022' 0E00               	movlw	0
  3121  0024' 6EDF               	movwf	indf2,c
  3122                           
  3123                           ; BSR set to: 0
  3124                           ;pff.c: 834: dj.fn = sp;
  3125  0026' 0E00'              	movlw	low pf_open@sp
  3126  0028' 6F00'              	movwf	(pf_open@dj+2)& (0+255),b
  3127  002A' 0E00'              	movlw	high pf_open@sp
  3128  002C' 6F00'              	movwf	(pf_open@dj+3)& (0+255),b
  3129                           
  3130                           ; BSR set to: 0
  3131                           ;pff.c: 835: res = follow_path(&dj, dir, "check.txt" );
  3132  002E' 0E00'              	movlw	low pf_open@dj
  3133  0030' 6F00'              	movwf	follow_path@dj& (0+255),b
  3134  0032' 0E00'              	movlw	high pf_open@dj
  3135  0034' 6F00'              	movwf	(follow_path@dj+1)& (0+255),b
  3136  0036' 0E00'              	movlw	low pf_open@dir
  3137  0038' 6F00'              	movwf	follow_path@dir& (0+255),b
  3138  003A' 0E00'              	movlw	high pf_open@dir
  3139  003C' 6F00'              	movwf	(follow_path@dir+1)& (0+255),b
  3140  003E' 0E00'              	movlw	low STR_1
  3141  0040' 6F00'              	movwf	follow_path@path& (0+255),b
  3142  0042' 0E00'              	movlw	high STR_1
  3143  0044' 6F00'              	movwf	(follow_path@path+1)& (0+255),b
  3144  0046' EC00' F000'        	call	_follow_path	;wreg free
  3145  004A' 0100               	movlb	0	; () banked
  3146  004C' 6F00'              	movwf	pf_open@res& (0+255),b
  3147                           
  3148                           ; BSR set to: 0
  3149                           ;pff.c: 836: if (res != FR_OK) return res;
  3150  004E' 5100'              	movf	pf_open@res& (0+255),w,b
  3151  0050' B4D8               	btfsc	status,2,c
  3152  0052' D002               	goto	l403
  3153                           
  3154                           ; BSR set to: 0
  3155  0054' 5100'              	movf	pf_open@res& (0+255),w,b
  3156                           
  3157                           ; BSR set to: 0
  3158  0056' 0012               	return	
  3159  0058'                    l403:
  3160                           
  3161                           ; BSR set to: 0
  3162                           ;pff.c: 837: if (!dir[0] || (dir[11] & 0x10))
  3163                           
  3164                           ; BSR set to: 0
  3165  0058' 5100'              	movf	pf_open@dir& (0+255),w,b
  3166  005A' B4D8               	btfsc	status,2,c
  3167  005C' D002               	goto	u3480
  3168                           
  3169                           ; BSR set to: 0
  3170  005E' A900'              	btfss	(pf_open@dir+11)& (0+255),4,b
  3171  0060' D002               	goto	l404
  3172  0062'                    u3480:
  3173                           
  3174                           ; BSR set to: 0
  3175                           ;pff.c: 838: return FR_NO_FILE;
  3176                           
  3177                           ; BSR set to: 0
  3178  0062' 0E03               	movlw	3
  3179                           
  3180                           ; BSR set to: 0
  3181  0064' 0012               	return	
  3182  0066'                    l404:
  3183                           
  3184                           ; BSR set to: 0
  3185                           ;pff.c: 840: fs->org_clust = get_clust(dir);
  3186                           
  3187                           ; BSR set to: 0
  3188  0066' 0E00'              	movlw	low pf_open@dir
  3189  0068' 6E00'              	movwf	get_clust@dir,c
  3190  006A' 0E00'              	movlw	high pf_open@dir
  3191  006C' 6E01'              	movwf	get_clust@dir+1,c
  3192  006E' EC00' F000'        	call	_get_clust	;wreg free
  3193  0072' 0100               	movlb	0	; () banked
  3194  0074' EE20 F01E          	lfsr	2,30
  3195  0078' 5100'              	movf	pf_open@fs& (0+255),w,b
  3196  007A' 26D9               	addwf	fsr2l,f,c
  3197  007C' 5100'              	movf	(pf_open@fs+1)& (0+255),w,b
  3198  007E' 22DA               	addwfc	fsr2h,f,c
  3199  0080' C000' FFDE         	movff	?_get_clust,postinc2
  3200  0084' C001' FFDE         	movff	?_get_clust+1,postinc2
  3201  0088' C002' FFDE         	movff	?_get_clust+2,postinc2
  3202  008C' C003' FFDE         	movff	?_get_clust+3,postinc2
  3203                           
  3204                           ; BSR set to: 0
  3205                           ;pff.c: 841: fs->fsize = (DWORD)(((DWORD)*((BYTE*)(dir+28)+3)<<24)|((DWORD)*((BYTE*)(dir
      +                          +28)+2)<<16)|((WORD)*((BYTE*)(dir+28)+1)<<8)|*(BYTE*)(dir+28));
  3206  0090' 5100'              	movf	(pf_open@dir+29)& (0+255),w,b
  3207  0092' 6F00'              	movwf	(??_pf_open+1)& (0+255),b
  3208  0094' 6B00'              	clrf	??_pf_open& (0+255),b
  3209  0096' C049' F00B'        	movff	pf_open@dir+30,??_pf_open+2
  3210  009A' 6B00'              	clrf	(??_pf_open+3)& (0+255),b
  3211  009C' 6B00'              	clrf	(??_pf_open+4)& (0+255),b
  3212  009E' 6B00'              	clrf	(??_pf_open+5)& (0+255),b
  3213  00A0' C00C' F00E'        	movff	??_pf_open+3,??_pf_open+5
  3214  00A4' C00B' F00D'        	movff	??_pf_open+2,??_pf_open+4
  3215  00A8' 6B00'              	clrf	(??_pf_open+3)& (0+255),b
  3216  00AA' 6B00'              	clrf	(??_pf_open+2)& (0+255),b
  3217  00AC' C04A' F00F'        	movff	pf_open@dir+31,??_pf_open+6
  3218  00B0' 6B00'              	clrf	(??_pf_open+7)& (0+255),b
  3219  00B2' 6B00'              	clrf	(??_pf_open+8)& (0+255),b
  3220  00B4' 6B00'              	clrf	(??_pf_open+9)& (0+255),b
  3221  00B6' C00F' F012'        	movff	??_pf_open+6,??_pf_open+9
  3222  00BA' 6B00'              	clrf	(??_pf_open+8)& (0+255),b
  3223  00BC' 6B00'              	clrf	(??_pf_open+7)& (0+255),b
  3224  00BE' 6B00'              	clrf	(??_pf_open+6)& (0+255),b
  3225  00C0' 5100'              	movf	(??_pf_open+2)& (0+255),w,b
  3226  00C2' 1100'              	iorwf	(??_pf_open+6)& (0+255),w,b
  3227  00C4' 6F00'              	movwf	(??_pf_open+10)& (0+255),b
  3228  00C6' 5100'              	movf	(??_pf_open+3)& (0+255),w,b
  3229  00C8' 1100'              	iorwf	(??_pf_open+7)& (0+255),w,b
  3230  00CA' 6F00'              	movwf	(??_pf_open+11)& (0+255),b
  3231  00CC' 5100'              	movf	(??_pf_open+4)& (0+255),w,b
  3232  00CE' 1100'              	iorwf	(??_pf_open+8)& (0+255),w,b
  3233  00D0' 6F00'              	movwf	(??_pf_open+12)& (0+255),b
  3234  00D2' 5100'              	movf	(??_pf_open+5)& (0+255),w,b
  3235  00D4' 1100'              	iorwf	(??_pf_open+9)& (0+255),w,b
  3236  00D6' 6F00'              	movwf	(??_pf_open+13)& (0+255),b
  3237  00D8' 5100'              	movf	??_pf_open& (0+255),w,b
  3238  00DA' 1100'              	iorwf	(??_pf_open+10)& (0+255),w,b
  3239  00DC' 6F00'              	movwf	(??_pf_open+14)& (0+255),b
  3240  00DE' 5100'              	movf	(??_pf_open+1)& (0+255),w,b
  3241  00E0' 1100'              	iorwf	(??_pf_open+11)& (0+255),w,b
  3242  00E2' 6F00'              	movwf	(??_pf_open+15)& (0+255),b
  3243  00E4' 0E00               	movlw	0
  3244  00E6' 1100'              	iorwf	(??_pf_open+12)& (0+255),w,b
  3245  00E8' 6F00'              	movwf	(??_pf_open+16)& (0+255),b
  3246  00EA' 0E00               	movlw	0
  3247  00EC' 1100'              	iorwf	(??_pf_open+13)& (0+255),w,b
  3248  00EE' 6F00'              	movwf	(??_pf_open+17)& (0+255),b
  3249  00F0' 5100'              	movf	(pf_open@dir+28)& (0+255),w,b
  3250  00F2' 1100'              	iorwf	(??_pf_open+14)& (0+255),w,b
  3251  00F4' 6F00'              	movwf	(??_pf_open+18)& (0+255),b
  3252  00F6' 5100'              	movf	(??_pf_open+15)& (0+255),w,b
  3253  00F8' 6F00'              	movwf	(??_pf_open+19)& (0+255),b
  3254  00FA' 5100'              	movf	(??_pf_open+16)& (0+255),w,b
  3255  00FC' 6F00'              	movwf	(??_pf_open+20)& (0+255),b
  3256  00FE' 5100'              	movf	(??_pf_open+17)& (0+255),w,b
  3257  0100' 6F00'              	movwf	(??_pf_open+21)& (0+255),b
  3258  0102' EE20 F01A          	lfsr	2,26
  3259  0106' 5100'              	movf	pf_open@fs& (0+255),w,b
  3260  0108' 26D9               	addwf	fsr2l,f,c
  3261  010A' 5100'              	movf	(pf_open@fs+1)& (0+255),w,b
  3262  010C' 22DA               	addwfc	fsr2h,f,c
  3263  010E' C01B' FFDE         	movff	??_pf_open+18,postinc2
  3264  0112' C01C' FFDE         	movff	??_pf_open+19,postinc2
  3265  0116' C01D' FFDE         	movff	??_pf_open+20,postinc2
  3266  011A' C01E' FFDE         	movff	??_pf_open+21,postinc2
  3267                           
  3268                           ; BSR set to: 0
  3269                           ;pff.c: 842: fs->fptr = 0;
  3270  011E' EE20 F016          	lfsr	2,22
  3271  0122' 5100'              	movf	pf_open@fs& (0+255),w,b
  3272  0124' 26D9               	addwf	fsr2l,f,c
  3273  0126' 5100'              	movf	(pf_open@fs+1)& (0+255),w,b
  3274  0128' 22DA               	addwfc	fsr2h,f,c
  3275  012A' 6ADE               	clrf	postinc2,c
  3276  012C' 6ADE               	clrf	postinc2,c
  3277  012E' 6ADE               	clrf	postinc2,c
  3278  0130' 6ADD               	clrf	postdec2,c
  3279                           
  3280                           ; BSR set to: 0
  3281                           ;pff.c: 843: fs->flag = 0x01;
  3282  0132' EE20 F001          	lfsr	2,1
  3283  0136' 5100'              	movf	pf_open@fs& (0+255),w,b
  3284  0138' 26D9               	addwf	fsr2l,f,c
  3285  013A' 5100'              	movf	(pf_open@fs+1)& (0+255),w,b
  3286  013C' 22DA               	addwfc	fsr2h,f,c
  3287  013E' 0E01               	movlw	1
  3288  0140' 6EDF               	movwf	indf2,c
  3289                           
  3290                           ; BSR set to: 0
  3291                           ;pff.c: 845: return FR_OK;
  3292  0142' 0E00               	movlw	0
  3293  0144' 0012               	return	
  3294  0146'                    __end_of_pf_open:
  3295                           	opt stack 0
  3296                           tblptru	equ	0xFF8
  3297                           tblptrh	equ	0xFF7
  3298                           tblptrl	equ	0xFF6
  3299                           tablat	equ	0xFF5
  3300                           postinc0	equ	0xFEE
  3301                           wreg	equ	0xFE8
  3302                           postdec1	equ	0xFE5
  3303                           fsr1h	equ	0xFE2
  3304                           fsr1l	equ	0xFE1
  3305                           indf2	equ	0xFDF
  3306                           postinc2	equ	0xFDE
  3307                           postdec2	equ	0xFDD
  3308                           plusw2	equ	0xFDB
  3309                           fsr2h	equ	0xFDA
  3310                           fsr2l	equ	0xFD9
  3311                           status	equ	0xFD8
  3312                           
  3313 ;; *************** function _follow_path *****************
  3314 ;; Defined at:
  3315 ;;		line 675 in file "pff.c"
  3316 ;; Parameters:    Size  Location     Type
  3317 ;;  dj              2    0[BANK0 ] PTR struct .
  3318 ;;		 -> pf_open@dj(16), 
  3319 ;;  dir             2    2[BANK0 ] PTR unsigned char 
  3320 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  3321 ;;  path            2    4[BANK0 ] PTR const unsigned char 
  3322 ;;		 -> STR_4(10), 
  3323 ;; Auto vars:     Size  Location     Type
  3324 ;;  res             1    6[BANK0 ] enum E43
  3325 ;; Return value:  Size  Location     Type
  3326 ;;                  1    wreg      enum E43
  3327 ;; Registers used:
  3328 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, b
      +temp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, bsr, cstack
  3329 ;; Tracked objects:
  3330 ;;		On entry : 0/0
  3331 ;;		On exit  : 0/0
  3332 ;;		Unchanged: 0/0
  3333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3334 ;;      Params:         0       6       0       0       0       0       0       0       0
  3335 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3336 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3337 ;;      Totals:         0       7       0       0       0       0       0       0       0
  3338 ;;Total ram usage:        7 bytes
  3339 ;; Hardware stack levels used:    1
  3340 ;; Hardware stack levels required when called:    6
  3341 ;; This function calls:
  3342 ;;		_create_name
  3343 ;;		_dir_find
  3344 ;;		_dir_rewind
  3345 ;;		_get_clust
  3346 ;; This function is called by:
  3347 ;;		_pf_open
  3348 ;;		_pf_opendir
  3349 ;; This function uses a non-reentrant model
  3350 ;;
  3351                           
  3352                           	psect	text7
  3353  0000'                    __ptext7:
  3354                           	opt stack 0
  3355  0000'                    _follow_path:
  3356                           	opt stack 23
  3357                           
  3358                           ;pff.c: 681: FRESULT res;
  3359                           ;pff.c: 684: while (*path == ' ') path++;
  3360                           
  3361                           ; BSR set to: 0
  3362                           ;incstack = 0
  3363  0000' D003               	goto	l358
  3364  0002' 0100               	movlb	0	; () banked
  3365  0004' 4B00'              	infsnz	follow_path@path& (0+255),f,b
  3366  0006' 2B00'              	incf	(follow_path@path+1)& (0+255),f,b
  3367  0008'                    l358:
  3368                           
  3369                           ; BSR set to: 0
  3370  0008' C004' FFF6         	movff	follow_path@path,tblptrl
  3371  000C' C005' FFF7         	movff	follow_path@path+1,tblptrh
  3372  0010'                    	if	0	;tblptru may be non-zero
  3373  0010'                    	endif
  3374  0010'                    	if	0	;tblptru may be non-zero
  3375  0010'                    	endif
  3376  0010' 0008               	tblrd		*
  3377  0012' 50F5               	movf	tablat,w,c
  3378  0014' 0A20               	xorlw	32
  3379  0016' B4D8               	btfsc	status,2,c
  3380  0018' D7F4               	goto	l359
  3381                           
  3382                           ;pff.c: 685: if (*path == '/') path++;
  3383  001A' C004' FFF6         	movff	follow_path@path,tblptrl
  3384  001E' C005' FFF7         	movff	follow_path@path+1,tblptrh
  3385  0022'                    	if	0	;tblptru may be non-zero
  3386  0022'                    	endif
  3387  0022'                    	if	0	;tblptru may be non-zero
  3388  0022'                    	endif
  3389  0022' 0008               	tblrd		*
  3390  0024' 50F5               	movf	tablat,w,c
  3391  0026' 0A2F               	xorlw	47
  3392  0028' A4D8               	btfss	status,2,c
  3393  002A' D003               	goto	l361
  3394  002C' 0100               	movlb	0	; () banked
  3395  002E' 4B00'              	infsnz	follow_path@path& (0+255),f,b
  3396  0030' 2B00'              	incf	(follow_path@path+1)& (0+255),f,b
  3397  0032'                    l361:
  3398                           
  3399                           ;pff.c: 686: dj->sclust = 0;
  3400                           
  3401                           ; BSR set to: 0
  3402  0032' 0100               	movlb	0	; () banked
  3403  0034' EE20 F004          	lfsr	2,4
  3404  0038' 5100'              	movf	follow_path@dj& (0+255),w,b
  3405  003A' 26D9               	addwf	fsr2l,f,c
  3406  003C' 5100'              	movf	(follow_path@dj+1)& (0+255),w,b
  3407  003E' 22DA               	addwfc	fsr2h,f,c
  3408  0040' 6ADE               	clrf	postinc2,c
  3409  0042' 6ADE               	clrf	postinc2,c
  3410  0044' 6ADE               	clrf	postinc2,c
  3411  0046' 6ADD               	clrf	postdec2,c
  3412                           
  3413                           ; BSR set to: 0
  3414                           ;pff.c: 688: if ((BYTE)*path < ' ') {
  3415  0048' C004' FFF6         	movff	follow_path@path,tblptrl
  3416  004C' C005' FFF7         	movff	follow_path@path+1,tblptrh
  3417  0050'                    	if	0	;tblptru may be non-zero
  3418  0050'                    	endif
  3419  0050'                    	if	0	;tblptru may be non-zero
  3420  0050'                    	endif
  3421  0050' 0E20               	movlw	32
  3422  0052' 0008               	tblrd		*
  3423  0054' 60F5               	cpfslt	tablat,c
  3424  0056' D00F               	goto	l362
  3425                           
  3426                           ; BSR set to: 0
  3427                           ;pff.c: 689: res = dir_rewind(dj);
  3428  0058' C000' F017'        	movff	follow_path@dj,dir_rewind@dj
  3429  005C' C001' F018'        	movff	follow_path@dj+1,dir_rewind@dj+1
  3430  0060' EC00' F000'        	call	_dir_rewind	;wreg free
  3431  0064' 0100               	movlb	0	; () banked
  3432  0066' 6F00'              	movwf	follow_path@res& (0+255),b
  3433                           
  3434                           ; BSR set to: 0
  3435                           ;pff.c: 690: dir[0] = 0;
  3436  0068' C002' FFD9         	movff	follow_path@dir,fsr2l
  3437  006C' C003' FFDA         	movff	follow_path@dir+1,fsr2h
  3438  0070' 0E00               	movlw	0
  3439  0072' 6EDF               	movwf	indf2,c
  3440                           
  3441                           ;pff.c: 692: } else {
  3442  0074' D04E               	goto	l366
  3443  0076'                    l362:
  3444                           
  3445                           ; BSR set to: 0
  3446                           ;pff.c: 694: res = create_name(dj, &path);
  3447                           
  3448                           ; BSR set to: 0
  3449                           
  3450                           ;pff.c: 693: for (;;) {
  3451                           
  3452                           ; BSR set to: 0
  3453  0076' C000' F008'        	movff	follow_path@dj,create_name@dj
  3454  007A' C001' F009'        	movff	follow_path@dj+1,create_name@dj+1
  3455  007E' 0E00'              	movlw	low follow_path@path
  3456  0080' 6E0A'              	movwf	create_name@path,c
  3457  0082' 0E00'              	movlw	high follow_path@path
  3458  0084' 6E0B'              	movwf	create_name@path+1,c
  3459  0086' EC00' F000'        	call	_create_name	;wreg free
  3460  008A' 0100               	movlb	0	; () banked
  3461  008C' 6F00'              	movwf	follow_path@res& (0+255),b
  3462                           
  3463                           ; BSR set to: 0
  3464                           ;pff.c: 695: if (res != FR_OK) break;
  3465  008E' 5100'              	movf	follow_path@res& (0+255),w,b
  3466  0090' A4D8               	btfss	status,2,c
  3467  0092' D03F               	goto	l366
  3468                           
  3469                           ; BSR set to: 0
  3470                           ;pff.c: 696: res = dir_find(dj, dir);
  3471                           
  3472                           ; BSR set to: 0
  3473                           
  3474                           ; BSR set to: 0
  3475  0094' C000' F057'        	movff	follow_path@dj,dir_find@dj
  3476  0098' C001' F058'        	movff	follow_path@dj+1,dir_find@dj+1
  3477  009C' C002' F059'        	movff	follow_path@dir,dir_find@dir
  3478  00A0' C003' F05A'        	movff	follow_path@dir+1,dir_find@dir+1
  3479  00A4' EC00' F000'        	call	_dir_find	;wreg free
  3480  00A8' 0100               	movlb	0	; () banked
  3481  00AA' 6F00'              	movwf	follow_path@res& (0+255),b
  3482                           
  3483                           ; BSR set to: 0
  3484                           ;pff.c: 697: if (res != FR_OK) break;
  3485  00AC' 5100'              	movf	follow_path@res& (0+255),w,b
  3486  00AE' A4D8               	btfss	status,2,c
  3487  00B0' D030               	goto	l366
  3488                           
  3489                           ; BSR set to: 0
  3490                           ;pff.c: 698: if (dj->fn[11]) break;
  3491                           
  3492                           ; BSR set to: 0
  3493                           
  3494                           ; BSR set to: 0
  3495  00B2' EE20 F002          	lfsr	2,2
  3496  00B6' 5100'              	movf	follow_path@dj& (0+255),w,b
  3497  00B8' 26D9               	addwf	fsr2l,f,c
  3498  00BA' 5100'              	movf	(follow_path@dj+1)& (0+255),w,b
  3499  00BC' 22DA               	addwfc	fsr2h,f,c
  3500  00BE' EE10 F00B          	lfsr	1,11
  3501  00C2' 50DE               	movf	postinc2,w,c
  3502  00C4' 26E1               	addwf	fsr1l,f,c
  3503  00C6' 50DD               	movf	postdec2,w,c
  3504  00C8' 22E2               	addwfc	fsr1h,f,c
  3505  00CA' 50E7               	movf	indf1,w,c
  3506  00CC' A4D8               	btfss	status,2,c
  3507  00CE' D021               	goto	l366
  3508                           
  3509                           ; BSR set to: 0
  3510                           ;pff.c: 699: if (!(dir[11] & 0x10)) {
  3511                           
  3512                           ; BSR set to: 0
  3513                           
  3514                           ; BSR set to: 0
  3515  00D0' EE20 F00B          	lfsr	2,11
  3516  00D4' 5100'              	movf	follow_path@dir& (0+255),w,b
  3517  00D6' 26D9               	addwf	fsr2l,f,c
  3518  00D8' 5100'              	movf	(follow_path@dir+1)& (0+255),w,b
  3519  00DA' 22DA               	addwfc	fsr2h,f,c
  3520  00DC' B8DF               	btfsc	indf2,4,c
  3521  00DE' D003               	goto	l369
  3522                           
  3523                           ; BSR set to: 0
  3524                           ;pff.c: 700: res = FR_NO_FILE; break;
  3525  00E0' 0E03               	movlw	3
  3526  00E2' 6F00'              	movwf	follow_path@res& (0+255),b
  3527  00E4' D016               	goto	l366
  3528  00E6'                    l369:
  3529                           
  3530                           ; BSR set to: 0
  3531                           ;pff.c: 701: }
  3532                           ;pff.c: 702: dj->sclust = get_clust(dir);
  3533                           
  3534                           ; BSR set to: 0
  3535  00E6' C002' F000'        	movff	follow_path@dir,get_clust@dir
  3536  00EA' C003' F001'        	movff	follow_path@dir+1,get_clust@dir+1
  3537  00EE' EC00' F000'        	call	_get_clust	;wreg free
  3538  00F2' 0100               	movlb	0	; () banked
  3539  00F4' EE20 F004          	lfsr	2,4
  3540  00F8' 5100'              	movf	follow_path@dj& (0+255),w,b
  3541  00FA' 26D9               	addwf	fsr2l,f,c
  3542  00FC' 5100'              	movf	(follow_path@dj+1)& (0+255),w,b
  3543  00FE' 22DA               	addwfc	fsr2h,f,c
  3544  0100' C000' FFDE         	movff	?_get_clust,postinc2
  3545  0104' C001' FFDE         	movff	?_get_clust+1,postinc2
  3546  0108' C002' FFDE         	movff	?_get_clust+2,postinc2
  3547  010C' C003' FFDE         	movff	?_get_clust+3,postinc2
  3548                           
  3549                           ;pff.c: 703: }
  3550  0110' D7B2               	goto	l362
  3551  0112'                    l366:
  3552                           
  3553                           ; BSR set to: 0
  3554                           ;pff.c: 704: }
  3555                           ;pff.c: 706: return res;
  3556                           
  3557                           ; BSR set to: 0
  3558                           
  3559                           ; BSR set to: 0
  3560  0112' 5100'              	movf	follow_path@res& (0+255),w,b
  3561  0114' 0012               	return	
  3562  0116'                    __end_of_follow_path:
  3563                           	opt stack 0
  3564                           tblptru	equ	0xFF8
  3565                           tblptrh	equ	0xFF7
  3566                           tblptrl	equ	0xFF6
  3567                           tablat	equ	0xFF5
  3568                           postinc0	equ	0xFEE
  3569                           wreg	equ	0xFE8
  3570                           indf1	equ	0xFE7
  3571                           postdec1	equ	0xFE5
  3572                           fsr1h	equ	0xFE2
  3573                           fsr1l	equ	0xFE1
  3574                           indf2	equ	0xFDF
  3575                           postinc2	equ	0xFDE
  3576                           postdec2	equ	0xFDD
  3577                           plusw2	equ	0xFDB
  3578                           fsr2h	equ	0xFDA
  3579                           fsr2l	equ	0xFD9
  3580                           status	equ	0xFD8
  3581                           
  3582 ;; *************** function _get_clust *****************
  3583 ;; Defined at:
  3584 ;;		line 409 in file "pff.c"
  3585 ;; Parameters:    Size  Location     Type
  3586 ;;  dir             2    0[COMRAM] PTR unsigned char 
  3587 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  3588 ;; Auto vars:     Size  Location     Type
  3589 ;;  clst            4   14[COMRAM] unsigned long 
  3590 ;;  fs              2   12[COMRAM] PTR struct .
  3591 ;;		 -> NULL(0), main@fs(42), 
  3592 ;; Return value:  Size  Location     Type
  3593 ;;                  4    0[COMRAM] unsigned long 
  3594 ;; Registers used:
  3595 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3596 ;; Tracked objects:
  3597 ;;		On entry : 0/0
  3598 ;;		On exit  : 0/0
  3599 ;;		Unchanged: 0/0
  3600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3601 ;;      Params:         4       0       0       0       0       0       0       0       0
  3602 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3603 ;;      Temps:          8       0       0       0       0       0       0       0       0
  3604 ;;      Totals:        18       0       0       0       0       0       0       0       0
  3605 ;;Total ram usage:       18 bytes
  3606 ;; Hardware stack levels used:    1
  3607 ;; This function calls:
  3608 ;;		Nothing
  3609 ;; This function is called by:
  3610 ;;		_follow_path
  3611 ;;		_pf_open
  3612 ;;		_pf_opendir
  3613 ;; This function uses a non-reentrant model
  3614 ;;
  3615                           
  3616                           	psect	text8
  3617  0000'                    __ptext8:
  3618                           	opt stack 0
  3619  0000'                    _get_clust:
  3620                           	opt stack 29
  3621                           
  3622                           ;pff.c: 413: FATFS *fs = FatFs;
  3623                           
  3624                           ; BSR set to: 0
  3625                           ;incstack = 0
  3626  0000' C004' F00C'        	movff	_FatFs,get_clust@fs
  3627  0004' C005' F00D'        	movff	_FatFs+1,get_clust@fs+1
  3628                           
  3629                           ;pff.c: 417: if (0 || (1 && fs->fs_type == 3)) {
  3630  0008' 0E00               	movlw	0
  3631  000A' 6E0E'              	movwf	get_clust@clst,c
  3632  000C' 0E00               	movlw	0
  3633  000E' 6E0F'              	movwf	get_clust@clst+1,c
  3634  0010' 0E00               	movlw	0
  3635  0012' 6E10'              	movwf	get_clust@clst+2,c
  3636  0014' 0E00               	movlw	0
  3637  0016' 6E11'              	movwf	get_clust@clst+3,c
  3638  0018' C00C' FFD9         	movff	get_clust@fs,fsr2l
  3639  001C' C00D' FFDA         	movff	get_clust@fs+1,fsr2h
  3640  0020' 0E03               	movlw	3
  3641  0022' 18DE               	xorwf	postinc2,w,c
  3642  0024' A4D8               	btfss	status,2,c
  3643  0026' D025               	goto	l273
  3644                           
  3645                           ;pff.c: 418: clst = (WORD)(((WORD)*((BYTE*)(dir+20)+1)<<8)|(WORD)*(BYTE*)(dir+20));
  3646  0028' EE20 F015          	lfsr	2,21
  3647  002C' 5000'              	movf	get_clust@dir,w,c
  3648  002E' 26D9               	addwf	fsr2l,f,c
  3649  0030' 5001'              	movf	get_clust@dir+1,w,c
  3650  0032' 22DA               	addwfc	fsr2h,f,c
  3651  0034' 50DF               	movf	indf2,w,c
  3652  0036' 6E00'              	movwf	??_get_clust& (0+255),c
  3653  0038' 5004'              	movf	??_get_clust,w,c
  3654  003A' 6E00'              	movwf	(??_get_clust+2)& (0+255),c
  3655  003C' 6A00'              	clrf	(??_get_clust+1)& (0+255),c
  3656  003E' EE20 F014          	lfsr	2,20
  3657  0042' 5000'              	movf	get_clust@dir,w,c
  3658  0044' 26D9               	addwf	fsr2l,f,c
  3659  0046' 5001'              	movf	get_clust@dir+1,w,c
  3660  0048' 22DA               	addwfc	fsr2h,f,c
  3661  004A' 50DF               	movf	indf2,w,c
  3662  004C' 6E00'              	movwf	(??_get_clust+3)& (0+255),c
  3663  004E' 5007'              	movf	??_get_clust+3,w,c
  3664  0050' 1205'              	iorwf	??_get_clust+1,f,c
  3665  0052' 0E00               	movlw	0
  3666  0054' 1206'              	iorwf	??_get_clust+2,f,c
  3667  0056' C005' F00E'        	movff	??_get_clust+1,get_clust@clst
  3668  005A' C006' F00F'        	movff	??_get_clust+2,get_clust@clst+1
  3669  005E' 6A10'              	clrf	get_clust@clst+2,c
  3670  0060' 6A11'              	clrf	get_clust@clst+3,c
  3671                           
  3672                           ;pff.c: 419: clst <<= 16;
  3673  0062' 0E10               	movlw	16
  3674  0064'                    u2755:
  3675  0064' 90D8               	bcf	status,0,c
  3676  0066' 360E'              	rlcf	get_clust@clst,f,c
  3677  0068' 360F'              	rlcf	get_clust@clst+1,f,c
  3678  006A' 3610'              	rlcf	get_clust@clst+2,f,c
  3679  006C' 3611'              	rlcf	get_clust@clst+3,f,c
  3680  006E' 2EE8               	decfsz	wreg,f,c
  3681  0070' D7F9               	goto	u2755
  3682  0072'                    l273:
  3683                           
  3684                           ;pff.c: 420: }
  3685                           ;pff.c: 421: clst |= (WORD)(((WORD)*((BYTE*)(dir+26)+1)<<8)|(WORD)*(BYTE*)(dir+26));
  3686  0072' EE20 F01B          	lfsr	2,27
  3687  0076' 5000'              	movf	get_clust@dir,w,c
  3688  0078' 26D9               	addwf	fsr2l,f,c
  3689  007A' 5001'              	movf	get_clust@dir+1,w,c
  3690  007C' 22DA               	addwfc	fsr2h,f,c
  3691  007E' 50DF               	movf	indf2,w,c
  3692  0080' 6E00'              	movwf	??_get_clust& (0+255),c
  3693  0082' 5004'              	movf	??_get_clust,w,c
  3694  0084' 6E00'              	movwf	(??_get_clust+2)& (0+255),c
  3695  0086' 6A00'              	clrf	(??_get_clust+1)& (0+255),c
  3696  0088' EE20 F01A          	lfsr	2,26
  3697  008C' 5000'              	movf	get_clust@dir,w,c
  3698  008E' 26D9               	addwf	fsr2l,f,c
  3699  0090' 5001'              	movf	get_clust@dir+1,w,c
  3700  0092' 22DA               	addwfc	fsr2h,f,c
  3701  0094' 50DF               	movf	indf2,w,c
  3702  0096' 6E00'              	movwf	(??_get_clust+3)& (0+255),c
  3703  0098' 5007'              	movf	??_get_clust+3,w,c
  3704  009A' 1005'              	iorwf	??_get_clust+1,w,c
  3705  009C' 6E00'              	movwf	(??_get_clust+4)& (0+255),c
  3706  009E' 5006'              	movf	??_get_clust+2,w,c
  3707  00A0' 6E00'              	movwf	(??_get_clust+5)& (0+255),c
  3708  00A2' 6A00'              	clrf	(??_get_clust+6)& (0+255),c
  3709  00A4' 6A00'              	clrf	(??_get_clust+7)& (0+255),c
  3710  00A6' 5008'              	movf	??_get_clust+4,w,c
  3711  00A8' 120E'              	iorwf	get_clust@clst,f,c
  3712  00AA' 5009'              	movf	??_get_clust+5,w,c
  3713  00AC' 120F'              	iorwf	get_clust@clst+1,f,c
  3714  00AE' 500A'              	movf	??_get_clust+6,w,c
  3715  00B0' 1210'              	iorwf	get_clust@clst+2,f,c
  3716  00B2' 500B'              	movf	??_get_clust+7,w,c
  3717  00B4' 1211'              	iorwf	get_clust@clst+3,f,c
  3718                           
  3719                           ;pff.c: 423: return clst;
  3720  00B6' C00E' F000'        	movff	get_clust@clst,?_get_clust
  3721  00BA' C00F' F001'        	movff	get_clust@clst+1,?_get_clust+1
  3722  00BE' C010' F002'        	movff	get_clust@clst+2,?_get_clust+2
  3723  00C2' C011' F003'        	movff	get_clust@clst+3,?_get_clust+3
  3724  00C6' 0012               	return	
  3725  00C8'                    __end_of_get_clust:
  3726                           	opt stack 0
  3727                           tblptru	equ	0xFF8
  3728                           tblptrh	equ	0xFF7
  3729                           tblptrl	equ	0xFF6
  3730                           tablat	equ	0xFF5
  3731                           postinc0	equ	0xFEE
  3732                           wreg	equ	0xFE8
  3733                           indf1	equ	0xFE7
  3734                           postdec1	equ	0xFE5
  3735                           fsr1h	equ	0xFE2
  3736                           fsr1l	equ	0xFE1
  3737                           indf2	equ	0xFDF
  3738                           postinc2	equ	0xFDE
  3739                           postdec2	equ	0xFDD
  3740                           plusw2	equ	0xFDB
  3741                           fsr2h	equ	0xFDA
  3742                           fsr2l	equ	0xFD9
  3743                           status	equ	0xFD8
  3744                           
  3745 ;; *************** function _dir_find *****************
  3746 ;; Defined at:
  3747 ;;		line 505 in file "pff.c"
  3748 ;; Parameters:    Size  Location     Type
  3749 ;;  dj              2   87[COMRAM] PTR struct .
  3750 ;;		 -> pf_open@dj(16), 
  3751 ;;  dir             2   89[COMRAM] PTR unsigned char 
  3752 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  3753 ;; Auto vars:     Size  Location     Type
  3754 ;;  res             1   94[COMRAM] enum E43
  3755 ;;  c               1   93[COMRAM] unsigned char 
  3756 ;; Return value:  Size  Location     Type
  3757 ;;                  1    wreg      enum E43
  3758 ;; Registers used:
  3759 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, b
      +temp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, bsr, cstack
  3760 ;; Tracked objects:
  3761 ;;		On entry : 0/0
  3762 ;;		On exit  : 0/0
  3763 ;;		Unchanged: 0/0
  3764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3765 ;;      Params:         4       0       0       0       0       0       0       0       0
  3766 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3767 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3768 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3769 ;;Total ram usage:        8 bytes
  3770 ;; Hardware stack levels used:    1
  3771 ;; Hardware stack levels required when called:    5
  3772 ;; This function calls:
  3773 ;;		_dir_next
  3774 ;;		_dir_rewind
  3775 ;;		_disk_readp
  3776 ;;		_mem_cmp
  3777 ;; This function is called by:
  3778 ;;		_follow_path
  3779 ;; This function uses a non-reentrant model
  3780 ;;
  3781                           
  3782                           	psect	text9
  3783  0000'                    __ptext9:
  3784                           	opt stack 0
  3785  0000'                    _dir_find:
  3786                           	opt stack 23
  3787                           
  3788                           ;pff.c: 510: FRESULT res;
  3789                           ;pff.c: 511: BYTE c;
  3790                           ;pff.c: 514: res = dir_rewind(dj);
  3791                           
  3792                           ;incstack = 0
  3793  0000' C057' F017'        	movff	dir_find@dj,dir_rewind@dj
  3794  0004' C058' F018'        	movff	dir_find@dj+1,dir_rewind@dj+1
  3795  0008' EC00' F000'        	call	_dir_rewind	;wreg free
  3796  000C' 6E5E'              	movwf	dir_find@res,c
  3797                           
  3798                           ;pff.c: 515: if (res != FR_OK) return res;
  3799  000E' 505E'              	movf	dir_find@res,w,c
  3800  0010' B4D8               	btfsc	status,2,c
  3801  0012' D002               	goto	l305
  3802  0014' 505E'              	movf	dir_find@res,w,c
  3803  0016' 0012               	return	
  3804  0018'                    l305:
  3805                           
  3806                           ;pff.c: 518: res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32)
  3807                           ;pff.c: 519: ? FR_DISK_ERR : FR_OK;
  3808                           
  3809                           ;pff.c: 517: do {
  3810  0018' C059' F008'        	movff	dir_find@dir,disk_readp@rd
  3811  001C' C05A' F009'        	movff	dir_find@dir+1,disk_readp@rd+1
  3812  0020' EE20 F00C          	lfsr	2,12
  3813  0024' 5057'              	movf	dir_find@dj,w,c
  3814  0026' 26D9               	addwf	fsr2l,f,c
  3815  0028' 5058'              	movf	dir_find@dj+1,w,c
  3816  002A' 22DA               	addwfc	fsr2h,f,c
  3817  002C' CFDE F00A'         	movff	postinc2,disk_readp@sector
  3818  0030' CFDE F00B'         	movff	postinc2,disk_readp@sector+1
  3819  0034' CFDE F00C'         	movff	postinc2,disk_readp@sector+2
  3820  0038' CFDE F00D'         	movff	postinc2,disk_readp@sector+3
  3821  003C' C057' FFD9         	movff	dir_find@dj,fsr2l
  3822  0040' C058' FFDA         	movff	dir_find@dj+1,fsr2h
  3823  0044' CFDE F05B'         	movff	postinc2,??_dir_find
  3824  0048' CFDD F05C'         	movff	postdec2,??_dir_find+1
  3825  004C' 0E0F               	movlw	15
  3826  004E' 165B'              	andwf	??_dir_find,f,c
  3827  0050' 0E00               	movlw	0
  3828  0052' 165C'              	andwf	??_dir_find+1,f,c
  3829  0054' 0E05               	movlw	5
  3830  0056'                    u2775:
  3831  0056' 90D8               	bcf	status,0,c
  3832  0058' 365B'              	rlcf	??_dir_find,f,c
  3833  005A' 365C'              	rlcf	??_dir_find+1,f,c
  3834  005C' 2EE8               	decfsz	wreg,f,c
  3835  005E' D7FB               	goto	u2775
  3836  0060' C05B' F00E'        	movff	??_dir_find,disk_readp@offset
  3837  0064' C05C' F00F'        	movff	??_dir_find+1,disk_readp@offset+1
  3838  0068' 0E00               	movlw	0
  3839  006A' 6E11'              	movwf	disk_readp@count+1,c
  3840  006C' 0E20               	movlw	32
  3841  006E' 6E10'              	movwf	disk_readp@count,c
  3842  0070' EC00' F000'        	call	_disk_readp	;wreg free
  3843  0074' 0900               	iorlw	0
  3844  0076' B4D8               	btfsc	status,2,c
  3845  0078' D002               	goto	u2780
  3846  007A' 0E01               	movlw	1
  3847  007C' D001               	goto	u2790
  3848  007E'                    u2780:
  3849  007E' 0E00               	movlw	0
  3850  0080'                    u2790:
  3851  0080' 6E5E'              	movwf	dir_find@res,c
  3852                           
  3853                           ;pff.c: 520: if (res != FR_OK) break;
  3854  0082' 505E'              	movf	dir_find@res,w,c
  3855  0084' A4D8               	btfss	status,2,c
  3856  0086' D036               	goto	u2840
  3857                           
  3858                           ;pff.c: 521: c = dir[0];
  3859  0088' C059' FFD9         	movff	dir_find@dir,fsr2l
  3860  008C' C05A' FFDA         	movff	dir_find@dir+1,fsr2h
  3861  0090' 50DF               	movf	indf2,w,c
  3862  0092' 6E5D'              	movwf	dir_find@c,c
  3863                           
  3864                           ;pff.c: 522: if (c == 0) { res = FR_NO_FILE; break; }
  3865  0094' 505D'              	movf	dir_find@c,w,c
  3866  0096' A4D8               	btfss	status,2,c
  3867  0098' D003               	goto	l310
  3868  009A' 0E03               	movlw	3
  3869  009C' 6E5E'              	movwf	dir_find@res,c
  3870  009E' D02A               	goto	u2840
  3871  00A0'                    l310:
  3872                           
  3873                           ;pff.c: 523: if (!(dir[11] & 0x08) && !mem_cmp(dir, dj->fn, 11))
  3874  00A0' EE20 F00B          	lfsr	2,11
  3875  00A4' 5059'              	movf	dir_find@dir,w,c
  3876  00A6' 26D9               	addwf	fsr2l,f,c
  3877  00A8' 505A'              	movf	dir_find@dir+1,w,c
  3878  00AA' 22DA               	addwfc	fsr2h,f,c
  3879  00AC' B6DF               	btfsc	indf2,3,c
  3880  00AE' D018               	goto	l311
  3881  00B0' C059' F000'        	movff	dir_find@dir,mem_cmp@dst
  3882  00B4' C05A' F001'        	movff	dir_find@dir+1,mem_cmp@dst+1
  3883  00B8' EE20 F002          	lfsr	2,2
  3884  00BC' 5057'              	movf	dir_find@dj,w,c
  3885  00BE' 26D9               	addwf	fsr2l,f,c
  3886  00C0' 5058'              	movf	dir_find@dj+1,w,c
  3887  00C2' 22DA               	addwfc	fsr2h,f,c
  3888  00C4' CFDE F002'         	movff	postinc2,mem_cmp@src
  3889  00C8' CFDD F003'         	movff	postdec2,mem_cmp@src+1
  3890  00CC' 0E00               	movlw	0
  3891  00CE' 6E05'              	movwf	mem_cmp@cnt+1,c
  3892  00D0' 0E0B               	movlw	11
  3893  00D2' 6E04'              	movwf	mem_cmp@cnt,c
  3894  00D4' EC00' F000'        	call	_mem_cmp	;wreg free
  3895  00D8' 5000'              	movf	?_mem_cmp,w,c
  3896  00DA' 1001'              	iorwf	?_mem_cmp+1,w,c
  3897  00DC' B4D8               	btfsc	status,2,c
  3898  00DE' D00A               	goto	u2840
  3899  00E0'                    l311:
  3900                           
  3901                           ;pff.c: 525: res = dir_next(dj);
  3902  00E0' C057' F046'        	movff	dir_find@dj,dir_next@dj
  3903  00E4' C058' F047'        	movff	dir_find@dj+1,dir_next@dj+1
  3904  00E8' EC00' F000'        	call	_dir_next	;wreg free
  3905  00EC' 6E5E'              	movwf	dir_find@res,c
  3906                           
  3907                           ;pff.c: 526: } while (res == FR_OK);
  3908  00EE' 505E'              	movf	dir_find@res,w,c
  3909  00F0' B4D8               	btfsc	status,2,c
  3910  00F2' D792               	goto	l305
  3911  00F4'                    u2840:
  3912                           
  3913                           ;pff.c: 528: return res;
  3914  00F4' 505E'              	movf	dir_find@res,w,c
  3915  00F6' 0012               	return	
  3916  00F8'                    __end_of_dir_find:
  3917                           	opt stack 0
  3918                           tblptru	equ	0xFF8
  3919                           tblptrh	equ	0xFF7
  3920                           tblptrl	equ	0xFF6
  3921                           tablat	equ	0xFF5
  3922                           postinc0	equ	0xFEE
  3923                           wreg	equ	0xFE8
  3924                           indf1	equ	0xFE7
  3925                           postdec1	equ	0xFE5
  3926                           fsr1h	equ	0xFE2
  3927                           fsr1l	equ	0xFE1
  3928                           indf2	equ	0xFDF
  3929                           postinc2	equ	0xFDE
  3930                           postdec2	equ	0xFDD
  3931                           plusw2	equ	0xFDB
  3932                           fsr2h	equ	0xFDA
  3933                           fsr2l	equ	0xFD9
  3934                           status	equ	0xFD8
  3935                           
  3936 ;; *************** function _mem_cmp *****************
  3937 ;; Defined at:
  3938 ;;		line 331 in file "pff.c"
  3939 ;; Parameters:    Size  Location     Type
  3940 ;;  dst             2    0[COMRAM] PTR const void 
  3941 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  3942 ;;  src             2    2[COMRAM] PTR const void 
  3943 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  3944 ;;  cnt             2    4[COMRAM] int 
  3945 ;; Auto vars:     Size  Location     Type
  3946 ;;  r               2   13[COMRAM] int 
  3947 ;;  s               2   11[COMRAM] PTR const unsigned char 
  3948 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  3949 ;;  d               2    9[COMRAM] PTR const unsigned char 
  3950 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  3951 ;; Return value:  Size  Location     Type
  3952 ;;                  2    0[COMRAM] int 
  3953 ;; Registers used:
  3954 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3955 ;; Tracked objects:
  3956 ;;		On entry : 0/0
  3957 ;;		On exit  : 0/0
  3958 ;;		Unchanged: 0/0
  3959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3960 ;;      Params:         6       0       0       0       0       0       0       0       0
  3961 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3962 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3963 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3964 ;;Total ram usage:       15 bytes
  3965 ;; Hardware stack levels used:    1
  3966 ;; This function calls:
  3967 ;;		Nothing
  3968 ;; This function is called by:
  3969 ;;		_dir_find
  3970 ;; This function uses a non-reentrant model
  3971 ;;
  3972                           
  3973                           	psect	text10
  3974  0000'                    __ptext10:
  3975                           	opt stack 0
  3976  0000'                    _mem_cmp:
  3977                           	opt stack 27
  3978                           
  3979                           ;pff.c: 332: const char *d = (const char *)dst, *s = (const char *)src;
  3980                           
  3981                           ;incstack = 0
  3982  0000' C000' F009'        	movff	mem_cmp@dst,mem_cmp@d
  3983  0004' C001' F00A'        	movff	mem_cmp@dst+1,mem_cmp@d+1
  3984  0008' C002' F00B'        	movff	mem_cmp@src,mem_cmp@s
  3985  000C' C003' F00C'        	movff	mem_cmp@src+1,mem_cmp@s+1
  3986                           
  3987                           ;pff.c: 333: int r = 0;
  3988  0010' 0E00               	movlw	0
  3989  0012' 6E0E'              	movwf	mem_cmp@r+1,c
  3990  0014' 0E00               	movlw	0
  3991  0016' 6E0D'              	movwf	mem_cmp@r,c
  3992  0018' 0604'              	decf	mem_cmp@cnt,f,c
  3993  001A' A0D8               	btfss	status,0,c
  3994  001C' 0605'              	decf	mem_cmp@cnt+1,f,c
  3995  001E' 2804'              	incf	mem_cmp@cnt,w,c
  3996  0020' E103               	bnz	u2550
  3997  0022' 2805'              	incf	mem_cmp@cnt+1,w,c
  3998  0024' B4D8               	btfsc	status,2,c
  3999  0026' D01F               	goto	u2560
  4000  0028'                    u2550:
  4001  0028' C00B' FFD9         	movff	mem_cmp@s,fsr2l
  4002  002C' C00C' FFDA         	movff	mem_cmp@s+1,fsr2h
  4003  0030' 4A0B'              	infsnz	mem_cmp@s,f,c
  4004  0032' 2A0C'              	incf	mem_cmp@s+1,f,c
  4005  0034' 50DF               	movf	indf2,w,c
  4006  0036' 6E00'              	movwf	??_mem_cmp& (0+255),c
  4007  0038' 6A00'              	clrf	(??_mem_cmp+1)& (0+255),c
  4008  003A' 1E06'              	comf	??_mem_cmp,f,c
  4009  003C' 1E07'              	comf	??_mem_cmp+1,f,c
  4010  003E' 4A06'              	infsnz	??_mem_cmp,f,c
  4011  0040' 2A07'              	incf	??_mem_cmp+1,f,c
  4012  0042' C009' FFD9         	movff	mem_cmp@d,fsr2l
  4013  0046' C00A' FFDA         	movff	mem_cmp@d+1,fsr2h
  4014  004A' 4A09'              	infsnz	mem_cmp@d,f,c
  4015  004C' 2A0A'              	incf	mem_cmp@d+1,f,c
  4016  004E' 50DF               	movf	indf2,w,c
  4017  0050' 6E00'              	movwf	(??_mem_cmp+2)& (0+255),c
  4018  0052' 5008'              	movf	??_mem_cmp+2,w,c
  4019  0054' 2406'              	addwf	??_mem_cmp,w,c
  4020  0056' 6E0D'              	movwf	mem_cmp@r,c
  4021  0058' 0E00               	movlw	0
  4022  005A' 2007'              	addwfc	??_mem_cmp+1,w,c
  4023  005C' 6E0E'              	movwf	mem_cmp@r+1,c
  4024  005E' 500D'              	movf	mem_cmp@r,w,c
  4025  0060' 100E'              	iorwf	mem_cmp@r+1,w,c
  4026  0062' B4D8               	btfsc	status,2,c
  4027  0064' D7D9               	goto	l240
  4028  0066'                    u2560:
  4029                           
  4030                           ;pff.c: 335: return r;
  4031  0066' C00D' F000'        	movff	mem_cmp@r,?_mem_cmp
  4032  006A' C00E' F001'        	movff	mem_cmp@r+1,?_mem_cmp+1
  4033  006E' 0012               	return		;funcret
  4034  0070'                    __end_of_mem_cmp:
  4035                           	opt stack 0
  4036                           tblptru	equ	0xFF8
  4037                           tblptrh	equ	0xFF7
  4038                           tblptrl	equ	0xFF6
  4039                           tablat	equ	0xFF5
  4040                           postinc0	equ	0xFEE
  4041                           wreg	equ	0xFE8
  4042                           indf1	equ	0xFE7
  4043                           postdec1	equ	0xFE5
  4044                           fsr1h	equ	0xFE2
  4045                           fsr1l	equ	0xFE1
  4046                           indf2	equ	0xFDF
  4047                           postinc2	equ	0xFDE
  4048                           postdec2	equ	0xFDD
  4049                           plusw2	equ	0xFDB
  4050                           fsr2h	equ	0xFDA
  4051                           fsr2l	equ	0xFD9
  4052                           status	equ	0xFD8
  4053                           
  4054 ;; *************** function _dir_rewind *****************
  4055 ;; Defined at:
  4056 ;;		line 432 in file "pff.c"
  4057 ;; Parameters:    Size  Location     Type
  4058 ;;  dj              2   23[COMRAM] PTR struct .
  4059 ;;		 -> pf_open@dj(16), 
  4060 ;; Auto vars:     Size  Location     Type
  4061 ;;  clst            4   35[COMRAM] unsigned long 
  4062 ;;  fs              2   33[COMRAM] PTR struct .
  4063 ;;		 -> NULL(0), main@fs(42), 
  4064 ;; Return value:  Size  Location     Type
  4065 ;;                  1    wreg      enum E43
  4066 ;; Registers used:
  4067 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4068 ;; Tracked objects:
  4069 ;;		On entry : 0/0
  4070 ;;		On exit  : 0/0
  4071 ;;		Unchanged: 0/0
  4072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4073 ;;      Params:         2       0       0       0       0       0       0       0       0
  4074 ;;      Locals:        10       0       0       0       0       0       0       0       0
  4075 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4076 ;;      Totals:        16       0       0       0       0       0       0       0       0
  4077 ;;Total ram usage:       16 bytes
  4078 ;; Hardware stack levels used:    1
  4079 ;; Hardware stack levels required when called:    2
  4080 ;; This function calls:
  4081 ;;		_clust2sect
  4082 ;; This function is called by:
  4083 ;;		_dir_find
  4084 ;;		_follow_path
  4085 ;;		_pf_opendir
  4086 ;;		_pf_readdir
  4087 ;; This function uses a non-reentrant model
  4088 ;;
  4089                           
  4090                           	psect	text11
  4091  0000'                    __ptext11:
  4092                           	opt stack 0
  4093  0000'                    _dir_rewind:
  4094                           	opt stack 26
  4095                           
  4096                           ;pff.c: 436: DWORD clst;
  4097                           ;pff.c: 437: FATFS *fs = FatFs;
  4098                           
  4099                           ;incstack = 0
  4100  0000' C004' F021'        	movff	_FatFs,dir_rewind@fs
  4101  0004' C005' F022'        	movff	_FatFs+1,dir_rewind@fs+1
  4102                           
  4103                           ;pff.c: 440: dj->index = 0;
  4104  0008' C017' FFD9         	movff	dir_rewind@dj,fsr2l
  4105  000C' C018' FFDA         	movff	dir_rewind@dj+1,fsr2h
  4106  0010' 0E00               	movlw	0
  4107  0012' 6EDE               	movwf	postinc2,c
  4108  0014' 0E00               	movlw	0
  4109  0016' 6EDD               	movwf	postdec2,c
  4110                           
  4111                           ;pff.c: 441: clst = dj->sclust;
  4112  0018' EE20 F004          	lfsr	2,4
  4113  001C' 5017'              	movf	dir_rewind@dj,w,c
  4114  001E' 26D9               	addwf	fsr2l,f,c
  4115  0020' 5018'              	movf	dir_rewind@dj+1,w,c
  4116  0022' 22DA               	addwfc	fsr2h,f,c
  4117  0024' CFDE F023'         	movff	postinc2,dir_rewind@clst
  4118  0028' CFDE F024'         	movff	postinc2,dir_rewind@clst+1
  4119  002C' CFDE F025'         	movff	postinc2,dir_rewind@clst+2
  4120  0030' CFDE F026'         	movff	postinc2,dir_rewind@clst+3
  4121                           
  4122                           ;pff.c: 442: if (clst == 1 || clst >= fs->n_fatent)
  4123  0034' 0423'              	decf	dir_rewind@clst,w,c
  4124  0036' 1024'              	iorwf	dir_rewind@clst+1,w,c
  4125  0038' 1025'              	iorwf	dir_rewind@clst+2,w,c
  4126  003A' 1026'              	iorwf	dir_rewind@clst+3,w,c
  4127  003C' B4D8               	btfsc	status,2,c
  4128  003E' D010               	goto	u2580
  4129  0040' EE20 F006          	lfsr	2,6
  4130  0044' 5021'              	movf	dir_rewind@fs,w,c
  4131  0046' 26D9               	addwf	fsr2l,f,c
  4132  0048' 5022'              	movf	dir_rewind@fs+1,w,c
  4133  004A' 22DA               	addwfc	fsr2h,f,c
  4134  004C' 50DE               	movf	postinc2,w,c
  4135  004E' 5C23'              	subwf	dir_rewind@clst,w,c
  4136  0050' 50DE               	movf	postinc2,w,c
  4137  0052' 5824'              	subwfb	dir_rewind@clst+1,w,c
  4138  0054' 50DE               	movf	postinc2,w,c
  4139  0056' 5825'              	subwfb	dir_rewind@clst+2,w,c
  4140  0058' 50DE               	movf	postinc2,w,c
  4141  005A' 5826'              	subwfb	dir_rewind@clst+3,w,c
  4142  005C' A0D8               	btfss	status,0,c
  4143  005E' D002               	goto	l279
  4144  0060'                    u2580:
  4145                           
  4146                           ;pff.c: 443: return FR_DISK_ERR;
  4147  0060' 0E01               	movlw	1
  4148  0062' 0012               	return	
  4149  0064'                    l279:
  4150  0064' 5023'              	movf	dir_rewind@clst,w,c
  4151  0066' 1024'              	iorwf	dir_rewind@clst+1,w,c
  4152  0068' 1025'              	iorwf	dir_rewind@clst+2,w,c
  4153  006A' 1026'              	iorwf	dir_rewind@clst+3,w,c
  4154  006C' A4D8               	btfss	status,2,c
  4155  006E' D016               	goto	l283
  4156  0070' C021' FFD9         	movff	dir_rewind@fs,fsr2l
  4157  0074' C022' FFDA         	movff	dir_rewind@fs+1,fsr2h
  4158  0078' 0E03               	movlw	3
  4159  007A' 18DE               	xorwf	postinc2,w,c
  4160  007C' A4D8               	btfss	status,2,c
  4161  007E' D00E               	goto	l283
  4162                           
  4163                           ;pff.c: 445: clst = (DWORD)fs->dirbase;
  4164  0080' EE20 F00E          	lfsr	2,14
  4165  0084' 5021'              	movf	dir_rewind@fs,w,c
  4166  0086' 26D9               	addwf	fsr2l,f,c
  4167  0088' 5022'              	movf	dir_rewind@fs+1,w,c
  4168  008A' 22DA               	addwfc	fsr2h,f,c
  4169  008C' CFDE F023'         	movff	postinc2,dir_rewind@clst
  4170  0090' CFDE F024'         	movff	postinc2,dir_rewind@clst+1
  4171  0094' CFDE F025'         	movff	postinc2,dir_rewind@clst+2
  4172  0098' CFDE F026'         	movff	postinc2,dir_rewind@clst+3
  4173  009C'                    l283:
  4174                           
  4175                           ;pff.c: 447: dj->sect = (0 || clst) ? clust2sect(clst) : fs->dirbase;
  4176  009C' EE20 F008          	lfsr	2,8
  4177  00A0' 5017'              	movf	dir_rewind@dj,w,c
  4178  00A2' 26D9               	addwf	fsr2l,f,c
  4179  00A4' 5018'              	movf	dir_rewind@dj+1,w,c
  4180  00A6' 22DA               	addwfc	fsr2h,f,c
  4181  00A8' C023' FFDE         	movff	dir_rewind@clst,postinc2
  4182  00AC' C024' FFDE         	movff	dir_rewind@clst+1,postinc2
  4183  00B0' C025' FFDE         	movff	dir_rewind@clst+2,postinc2
  4184  00B4' C026' FFDE         	movff	dir_rewind@clst+3,postinc2
  4185  00B8' 5023'              	movf	dir_rewind@clst,w,c
  4186  00BA' 1024'              	iorwf	dir_rewind@clst+1,w,c
  4187  00BC' 1025'              	iorwf	dir_rewind@clst+2,w,c
  4188  00BE' 1026'              	iorwf	dir_rewind@clst+3,w,c
  4189  00C0' A4D8               	btfss	status,2,c
  4190  00C2' D00F               	goto	l287
  4191  00C4' EE20 F00E          	lfsr	2,14
  4192  00C8' 5021'              	movf	dir_rewind@fs,w,c
  4193  00CA' 26D9               	addwf	fsr2l,f,c
  4194  00CC' 5022'              	movf	dir_rewind@fs+1,w,c
  4195  00CE' 22DA               	addwfc	fsr2h,f,c
  4196  00D0' CFDE F01D'         	movff	postinc2,_dir_rewind$605
  4197  00D4' CFDE F01E'         	movff	postinc2,_dir_rewind$605+1
  4198  00D8' CFDE F01F'         	movff	postinc2,_dir_rewind$605+2
  4199  00DC' CFDE F020'         	movff	postinc2,_dir_rewind$605+3
  4200  00E0' D012               	goto	l289
  4201  00E2'                    l287:
  4202  00E2' C023' F00C'        	movff	dir_rewind@clst,clust2sect@clst
  4203  00E6' C024' F00D'        	movff	dir_rewind@clst+1,clust2sect@clst+1
  4204  00EA' C025' F00E'        	movff	dir_rewind@clst+2,clust2sect@clst+2
  4205  00EE' C026' F00F'        	movff	dir_rewind@clst+3,clust2sect@clst+3
  4206  00F2' EC00' F000'        	call	_clust2sect	;wreg free
  4207  00F6' C00C' F01D'        	movff	?_clust2sect,_dir_rewind$605
  4208  00FA' C00D' F01E'        	movff	?_clust2sect+1,_dir_rewind$605+1
  4209  00FE' C00E' F01F'        	movff	?_clust2sect+2,_dir_rewind$605+2
  4210  0102' C00F' F020'        	movff	?_clust2sect+3,_dir_rewind$605+3
  4211  0106'                    l289:
  4212  0106' EE20 F00C          	lfsr	2,12
  4213  010A' 5017'              	movf	dir_rewind@dj,w,c
  4214  010C' 26D9               	addwf	fsr2l,f,c
  4215  010E' 5018'              	movf	dir_rewind@dj+1,w,c
  4216  0110' 22DA               	addwfc	fsr2h,f,c
  4217  0112' C01D' FFDE         	movff	_dir_rewind$605,postinc2
  4218  0116' C01E' FFDE         	movff	_dir_rewind$605+1,postinc2
  4219  011A' C01F' FFDE         	movff	_dir_rewind$605+2,postinc2
  4220  011E' C020' FFDE         	movff	_dir_rewind$605+3,postinc2
  4221                           
  4222                           ;pff.c: 449: return FR_OK;
  4223  0122' 0E00               	movlw	0
  4224  0124' 0012               	return	
  4225  0126'                    __end_of_dir_rewind:
  4226                           	opt stack 0
  4227                           tblptru	equ	0xFF8
  4228                           tblptrh	equ	0xFF7
  4229                           tblptrl	equ	0xFF6
  4230                           tablat	equ	0xFF5
  4231                           postinc0	equ	0xFEE
  4232                           wreg	equ	0xFE8
  4233                           indf1	equ	0xFE7
  4234                           postdec1	equ	0xFE5
  4235                           fsr1h	equ	0xFE2
  4236                           fsr1l	equ	0xFE1
  4237                           indf2	equ	0xFDF
  4238                           postinc2	equ	0xFDE
  4239                           postdec2	equ	0xFDD
  4240                           plusw2	equ	0xFDB
  4241                           fsr2h	equ	0xFDA
  4242                           fsr2l	equ	0xFD9
  4243                           status	equ	0xFD8
  4244                           
  4245 ;; *************** function _dir_next *****************
  4246 ;; Defined at:
  4247 ;;		line 460 in file "pff.c"
  4248 ;; Parameters:    Size  Location     Type
  4249 ;;  dj              2   70[COMRAM] PTR struct .
  4250 ;;		 -> pf_open@dj(16), 
  4251 ;; Auto vars:     Size  Location     Type
  4252 ;;  clst            4   81[COMRAM] unsigned long 
  4253 ;;  i               2   85[COMRAM] unsigned short 
  4254 ;;  fs              2   79[COMRAM] PTR struct .
  4255 ;;		 -> NULL(0), main@fs(42), 
  4256 ;; Return value:  Size  Location     Type
  4257 ;;                  1    wreg      enum E43
  4258 ;; Registers used:
  4259 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, b
      +temp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, bsr, cstack
  4260 ;; Tracked objects:
  4261 ;;		On entry : 0/0
  4262 ;;		On exit  : 0/0
  4263 ;;		Unchanged: 0/0
  4264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4265 ;;      Params:         2       0       0       0       0       0       0       0       0
  4266 ;;      Locals:         8       0       0       0       0       0       0       0       0
  4267 ;;      Temps:          7       0       0       0       0       0       0       0       0
  4268 ;;      Totals:        17       0       0       0       0       0       0       0       0
  4269 ;;Total ram usage:       17 bytes
  4270 ;; Hardware stack levels used:    1
  4271 ;; Hardware stack levels required when called:    4
  4272 ;; This function calls:
  4273 ;;		_clust2sect
  4274 ;;		_get_fat
  4275 ;; This function is called by:
  4276 ;;		_dir_find
  4277 ;;		_dir_read
  4278 ;;		_pf_readdir
  4279 ;; This function uses a non-reentrant model
  4280 ;;
  4281                           
  4282                           	psect	text12
  4283  0000'                    __ptext12:
  4284                           	opt stack 0
  4285  0000'                    _dir_next:
  4286                           	opt stack 23
  4287                           
  4288                           ;pff.c: 464: DWORD clst;
  4289                           ;pff.c: 465: WORD i;
  4290                           ;pff.c: 466: FATFS *fs = FatFs;
  4291                           
  4292                           ;incstack = 0
  4293  0000' C004' F04F'        	movff	_FatFs,dir_next@fs
  4294  0004' C005' F050'        	movff	_FatFs+1,dir_next@fs+1
  4295                           
  4296                           ;pff.c: 469: i = dj->index + 1;
  4297  0008' C046' FFD9         	movff	dir_next@dj,fsr2l
  4298  000C' C047' FFDA         	movff	dir_next@dj+1,fsr2h
  4299  0010' CFDE F048'         	movff	postinc2,??_dir_next
  4300  0014' CFDD F049'         	movff	postdec2,??_dir_next+1
  4301  0018' 0E01               	movlw	1
  4302  001A' 2448'              	addwf	??_dir_next,w,c
  4303  001C' 6E55'              	movwf	dir_next@i,c
  4304  001E' 0E00               	movlw	0
  4305  0020' 2049'              	addwfc	??_dir_next+1,w,c
  4306  0022' 6E56'              	movwf	dir_next@i+1,c
  4307                           
  4308                           ;pff.c: 470: if (!i || !dj->sect)
  4309  0024' 5055'              	movf	dir_next@i,w,c
  4310  0026' 1056'              	iorwf	dir_next@i+1,w,c
  4311  0028' B4D8               	btfsc	status,2,c
  4312  002A' D00C               	goto	u2630
  4313  002C' EE20 F00C          	lfsr	2,12
  4314  0030' 5046'              	movf	dir_next@dj,w,c
  4315  0032' 26D9               	addwf	fsr2l,f,c
  4316  0034' 5047'              	movf	dir_next@dj+1,w,c
  4317  0036' 22DA               	addwfc	fsr2h,f,c
  4318  0038' 50DE               	movf	postinc2,w,c
  4319  003A' 10DE               	iorwf	postinc2,w,c
  4320  003C' 10DE               	iorwf	postinc2,w,c
  4321  003E' 10DE               	iorwf	postinc2,w,c
  4322  0040' A4D8               	btfss	status,2,c
  4323  0042' D002               	goto	l292
  4324  0044'                    u2630:
  4325                           
  4326                           ;pff.c: 471: return FR_NO_FILE;
  4327  0044' 0E03               	movlw	3
  4328  0046' 0012               	return	
  4329  0048'                    l292:
  4330                           
  4331                           ;pff.c: 473: if (!(i % 16)) {
  4332  0048' 0E0F               	movlw	15
  4333  004A' 1455'              	andwf	dir_next@i,w,c
  4334  004C' 6E00'              	movwf	??_dir_next& (0+255),c
  4335  004E' 0E00               	movlw	0
  4336  0050' 1456'              	andwf	dir_next@i+1,w,c
  4337  0052' 6E00'              	movwf	(??_dir_next+1)& (0+255),c
  4338  0054' 5048'              	movf	??_dir_next,w,c
  4339  0056' 1049'              	iorwf	??_dir_next+1,w,c
  4340  0058' A4D8               	btfss	status,2,c
  4341  005A' D0A3               	goto	l300
  4342                           
  4343                           ;pff.c: 474: dj->sect++;
  4344  005C' EE20 F00C          	lfsr	2,12
  4345  0060' 5046'              	movf	dir_next@dj,w,c
  4346  0062' 26D9               	addwf	fsr2l,f,c
  4347  0064' 5047'              	movf	dir_next@dj+1,w,c
  4348  0066' 22DA               	addwfc	fsr2h,f,c
  4349  0068' 2ADE               	incf	postinc2,f,c
  4350  006A' 0E00               	movlw	0
  4351  006C' 22DE               	addwfc	postinc2,f,c
  4352  006E' 22DE               	addwfc	postinc2,f,c
  4353  0070' 22DE               	addwfc	postinc2,f,c
  4354                           
  4355                           ;pff.c: 476: if (dj->clust == 0) {
  4356  0072' EE20 F008          	lfsr	2,8
  4357  0076' 5046'              	movf	dir_next@dj,w,c
  4358  0078' 26D9               	addwf	fsr2l,f,c
  4359  007A' 5047'              	movf	dir_next@dj+1,w,c
  4360  007C' 22DA               	addwfc	fsr2h,f,c
  4361  007E' 50DE               	movf	postinc2,w,c
  4362  0080' 10DE               	iorwf	postinc2,w,c
  4363  0082' 10DE               	iorwf	postinc2,w,c
  4364  0084' 10DE               	iorwf	postinc2,w,c
  4365  0086' A4D8               	btfss	status,2,c
  4366  0088' D00E               	goto	l297
  4367                           
  4368                           ;pff.c: 477: if (i >= fs->n_rootdir)
  4369  008A' EE20 F004          	lfsr	2,4
  4370  008E' 504F'              	movf	dir_next@fs,w,c
  4371  0090' 26D9               	addwf	fsr2l,f,c
  4372  0092' 5050'              	movf	dir_next@fs+1,w,c
  4373  0094' 22DA               	addwfc	fsr2h,f,c
  4374  0096' 50DE               	movf	postinc2,w,c
  4375  0098' 5C55'              	subwf	dir_next@i,w,c
  4376  009A' 50DE               	movf	postinc2,w,c
  4377  009C' 5856'              	subwfb	dir_next@i+1,w,c
  4378  009E' A0D8               	btfss	status,0,c
  4379  00A0' D080               	goto	l300
  4380                           
  4381                           ;pff.c: 478: return FR_NO_FILE;
  4382  00A2' 0E03               	movlw	3
  4383  00A4' 0012               	return	
  4384  00A6'                    l297:
  4385                           
  4386                           ;pff.c: 480: else {
  4387                           ;pff.c: 481: if (((i / 16) & (fs->csize - 1)) == 0) {
  4388  00A6' C055' F048'        	movff	dir_next@i,??_dir_next
  4389  00AA' C056' F049'        	movff	dir_next@i+1,??_dir_next+1
  4390  00AE' 0E04               	movlw	4
  4391  00B0' 6E00'              	movwf	(??_dir_next+2)& (0+255),c
  4392  00B2'                    u2675:
  4393  00B2' 90D8               	bcf	status,0,c
  4394  00B4' 3249'              	rrcf	??_dir_next+1,f,c
  4395  00B6' 3248'              	rrcf	??_dir_next,f,c
  4396  00B8' 2E00'              	decfsz	(??_dir_next+2)& (0+255),f,c
  4397  00BA' D7FB               	goto	u2675
  4398  00BC' 0EFF               	movlw	255
  4399  00BE' 6E00'              	movwf	(??_dir_next+3)& (0+255),c
  4400  00C0' 0EFF               	movlw	255
  4401  00C2' 6E00'              	movwf	(??_dir_next+4)& (0+255),c
  4402  00C4' EE20 F002          	lfsr	2,2
  4403  00C8' 504F'              	movf	dir_next@fs,w,c
  4404  00CA' 26D9               	addwf	fsr2l,f,c
  4405  00CC' 5050'              	movf	dir_next@fs+1,w,c
  4406  00CE' 22DA               	addwfc	fsr2h,f,c
  4407  00D0' 50DF               	movf	indf2,w,c
  4408  00D2' 6E00'              	movwf	(??_dir_next+5)& (0+255),c
  4409  00D4' 6A00'              	clrf	(??_dir_next+6)& (0+255),c
  4410  00D6' 504B'              	movf	??_dir_next+3,w,c
  4411  00D8' 264D'              	addwf	??_dir_next+5,f,c
  4412  00DA' 504C'              	movf	??_dir_next+4,w,c
  4413  00DC' 224E'              	addwfc	??_dir_next+6,f,c
  4414  00DE' 5048'              	movf	??_dir_next,w,c
  4415  00E0' 164D'              	andwf	??_dir_next+5,f,c
  4416  00E2' 5049'              	movf	??_dir_next+1,w,c
  4417  00E4' 164E'              	andwf	??_dir_next+6,f,c
  4418  00E6' 504D'              	movf	??_dir_next+5,w,c
  4419  00E8' 104E'              	iorwf	??_dir_next+6,w,c
  4420  00EA' A4D8               	btfss	status,2,c
  4421  00EC' D05A               	goto	l300
  4422                           
  4423                           ;pff.c: 482: clst = get_fat(dj->clust);
  4424  00EE' EE20 F008          	lfsr	2,8
  4425  00F2' 5046'              	movf	dir_next@dj,w,c
  4426  00F4' 26D9               	addwf	fsr2l,f,c
  4427  00F6' 5047'              	movf	dir_next@dj+1,w,c
  4428  00F8' 22DA               	addwfc	fsr2h,f,c
  4429  00FA' CFDE F01E'         	movff	postinc2,get_fat@clst
  4430  00FE' CFDE F01F'         	movff	postinc2,get_fat@clst+1
  4431  0102' CFDE F020'         	movff	postinc2,get_fat@clst+2
  4432  0106' CFDE F021'         	movff	postinc2,get_fat@clst+3
  4433  010A' EC00' F000'        	call	_get_fat	;wreg free
  4434  010E' C01E' F051'        	movff	?_get_fat,dir_next@clst
  4435  0112' C01F' F052'        	movff	?_get_fat+1,dir_next@clst+1
  4436  0116' C020' F053'        	movff	?_get_fat+2,dir_next@clst+2
  4437  011A' C021' F054'        	movff	?_get_fat+3,dir_next@clst+3
  4438                           
  4439                           ;pff.c: 483: if (clst <= 1) return FR_DISK_ERR;
  4440  011E' 5054'              	movf	dir_next@clst+3,w,c
  4441  0120' 1053'              	iorwf	dir_next@clst+2,w,c
  4442  0122' 1052'              	iorwf	dir_next@clst+1,w,c
  4443  0124' E106               	bnz	l2891
  4444  0126' 0E02               	movlw	2
  4445  0128' 5C51'              	subwf	dir_next@clst,w,c
  4446  012A' B0D8               	btfsc	status,0,c
  4447  012C' D002               	goto	l301
  4448  012E' 0E01               	movlw	1
  4449  0130' 0012               	return	
  4450  0132'                    l301:
  4451  0132'                    l2891:
  4452                           
  4453                           ;pff.c: 484: if (clst >= fs->n_fatent)
  4454  0132' EE20 F006          	lfsr	2,6
  4455  0136' 504F'              	movf	dir_next@fs,w,c
  4456  0138' 26D9               	addwf	fsr2l,f,c
  4457  013A' 5050'              	movf	dir_next@fs+1,w,c
  4458  013C' 22DA               	addwfc	fsr2h,f,c
  4459  013E' 50DE               	movf	postinc2,w,c
  4460  0140' 5C51'              	subwf	dir_next@clst,w,c
  4461  0142' 50DE               	movf	postinc2,w,c
  4462  0144' 5852'              	subwfb	dir_next@clst+1,w,c
  4463  0146' 50DE               	movf	postinc2,w,c
  4464  0148' 5853'              	subwfb	dir_next@clst+2,w,c
  4465  014A' 50DE               	movf	postinc2,w,c
  4466  014C' 5854'              	subwfb	dir_next@clst+3,w,c
  4467  014E' A0D8               	btfss	status,0,c
  4468  0150' D002               	goto	l302
  4469                           
  4470                           ;pff.c: 485: return FR_NO_FILE;
  4471  0152' 0E03               	movlw	3
  4472  0154' 0012               	return	
  4473  0156'                    l302:
  4474                           
  4475                           ;pff.c: 486: dj->clust = clst;
  4476  0156' EE20 F008          	lfsr	2,8
  4477  015A' 5046'              	movf	dir_next@dj,w,c
  4478  015C' 26D9               	addwf	fsr2l,f,c
  4479  015E' 5047'              	movf	dir_next@dj+1,w,c
  4480  0160' 22DA               	addwfc	fsr2h,f,c
  4481  0162' C051' FFDE         	movff	dir_next@clst,postinc2
  4482  0166' C052' FFDE         	movff	dir_next@clst+1,postinc2
  4483  016A' C053' FFDE         	movff	dir_next@clst+2,postinc2
  4484  016E' C054' FFDE         	movff	dir_next@clst+3,postinc2
  4485                           
  4486                           ;pff.c: 487: dj->sect = clust2sect(clst);
  4487  0172' C051' F00C'        	movff	dir_next@clst,clust2sect@clst
  4488  0176' C052' F00D'        	movff	dir_next@clst+1,clust2sect@clst+1
  4489  017A' C053' F00E'        	movff	dir_next@clst+2,clust2sect@clst+2
  4490  017E' C054' F00F'        	movff	dir_next@clst+3,clust2sect@clst+3
  4491  0182' EC00' F000'        	call	_clust2sect	;wreg free
  4492  0186' EE20 F00C          	lfsr	2,12
  4493  018A' 5046'              	movf	dir_next@dj,w,c
  4494  018C' 26D9               	addwf	fsr2l,f,c
  4495  018E' 5047'              	movf	dir_next@dj+1,w,c
  4496  0190' 22DA               	addwfc	fsr2h,f,c
  4497  0192' C00C' FFDE         	movff	?_clust2sect,postinc2
  4498  0196' C00D' FFDE         	movff	?_clust2sect+1,postinc2
  4499  019A' C00E' FFDE         	movff	?_clust2sect+2,postinc2
  4500  019E' C00F' FFDE         	movff	?_clust2sect+3,postinc2
  4501  01A2'                    l300:
  4502                           
  4503                           ;pff.c: 488: }
  4504                           ;pff.c: 489: }
  4505                           ;pff.c: 490: }
  4506                           ;pff.c: 492: dj->index = i;
  4507  01A2' C046' FFD9         	movff	dir_next@dj,fsr2l
  4508  01A6' C047' FFDA         	movff	dir_next@dj+1,fsr2h
  4509  01AA' C055' FFDE         	movff	dir_next@i,postinc2
  4510  01AE' C056' FFDD         	movff	dir_next@i+1,postdec2
  4511                           
  4512                           ;pff.c: 494: return FR_OK;
  4513  01B2' 0E00               	movlw	0
  4514  01B4' 0012               	return	
  4515  01B6'                    __end_of_dir_next:
  4516                           	opt stack 0
  4517                           tblptru	equ	0xFF8
  4518                           tblptrh	equ	0xFF7
  4519                           tblptrl	equ	0xFF6
  4520                           tablat	equ	0xFF5
  4521                           postinc0	equ	0xFEE
  4522                           wreg	equ	0xFE8
  4523                           indf1	equ	0xFE7
  4524                           postdec1	equ	0xFE5
  4525                           fsr1h	equ	0xFE2
  4526                           fsr1l	equ	0xFE1
  4527                           indf2	equ	0xFDF
  4528                           postinc2	equ	0xFDE
  4529                           postdec2	equ	0xFDD
  4530                           plusw2	equ	0xFDB
  4531                           fsr2h	equ	0xFDA
  4532                           fsr2l	equ	0xFD9
  4533                           status	equ	0xFD8
  4534                           
  4535 ;; *************** function _get_fat *****************
  4536 ;; Defined at:
  4537 ;;		line 345 in file "pff.c"
  4538 ;; Parameters:    Size  Location     Type
  4539 ;;  clst            4   30[COMRAM] unsigned long 
  4540 ;; Auto vars:     Size  Location     Type
  4541 ;;  bc              2   66[COMRAM] unsigned int 
  4542 ;;  ofs             2   60[COMRAM] unsigned int 
  4543 ;;  wc              2   58[COMRAM] unsigned int 
  4544 ;;  buf             4   62[COMRAM] unsigned char [4]
  4545 ;;  fs              2   68[COMRAM] PTR struct .
  4546 ;;		 -> NULL(0), main@fs(42), 
  4547 ;; Return value:  Size  Location     Type
  4548 ;;                  4   30[COMRAM] unsigned long 
  4549 ;; Registers used:
  4550 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, b
      +temp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, bsr, cstack
  4551 ;; Tracked objects:
  4552 ;;		On entry : 0/0
  4553 ;;		On exit  : 0/0
  4554 ;;		Unchanged: 0/0
  4555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4556 ;;      Params:         4       0       0       0       0       0       0       0       0
  4557 ;;      Locals:        14       0       0       0       0       0       0       0       0
  4558 ;;      Temps:         22       0       0       0       0       0       0       0       0
  4559 ;;      Totals:        40       0       0       0       0       0       0       0       0
  4560 ;;Total ram usage:       40 bytes
  4561 ;; Hardware stack levels used:    1
  4562 ;; Hardware stack levels required when called:    3
  4563 ;; This function calls:
  4564 ;;		_disk_readp
  4565 ;; This function is called by:
  4566 ;;		_dir_next
  4567 ;;		_pf_read
  4568 ;;		_pf_write
  4569 ;;		_pf_lseek
  4570 ;; This function uses a non-reentrant model
  4571 ;;
  4572                           
  4573                           	psect	text13
  4574  0000'                    __ptext13:
  4575                           	opt stack 0
  4576  0000'                    _get_fat:
  4577                           	opt stack 26
  4578                           
  4579                           ;pff.c: 349: BYTE buf[4];
  4580                           ;pff.c: 350: FATFS *fs = FatFs;
  4581                           
  4582                           ;incstack = 0
  4583  0000' C004' F044'        	movff	_FatFs,get_fat@fs
  4584  0004' C005' F045'        	movff	_FatFs+1,get_fat@fs+1
  4585                           
  4586                           ;pff.c: 352: if (clst < 2 || clst >= fs->n_fatent)
  4587  0008' 5021'              	movf	get_fat@clst+3,w,c
  4588  000A' 1020'              	iorwf	get_fat@clst+2,w,c
  4589  000C' 101F'              	iorwf	get_fat@clst+1,w,c
  4590  000E' E104               	bnz	u2410
  4591  0010' 0E02               	movlw	2
  4592  0012' 5C1E'              	subwf	get_fat@clst,w,c
  4593  0014' A0D8               	btfss	status,0,c
  4594  0016' D010               	goto	u2420
  4595  0018'                    u2410:
  4596  0018' EE20 F006          	lfsr	2,6
  4597  001C' 5044'              	movf	get_fat@fs,w,c
  4598  001E' 26D9               	addwf	fsr2l,f,c
  4599  0020' 5045'              	movf	get_fat@fs+1,w,c
  4600  0022' 22DA               	addwfc	fsr2h,f,c
  4601  0024' 50DE               	movf	postinc2,w,c
  4602  0026' 5C1E'              	subwf	get_fat@clst,w,c
  4603  0028' 50DE               	movf	postinc2,w,c
  4604  002A' 581F'              	subwfb	get_fat@clst+1,w,c
  4605  002C' 50DE               	movf	postinc2,w,c
  4606  002E' 5820'              	subwfb	get_fat@clst+2,w,c
  4607  0030' 50DE               	movf	postinc2,w,c
  4608  0032' 5821'              	subwfb	get_fat@clst+3,w,c
  4609  0034' A0D8               	btfss	status,0,c
  4610  0036' D1B8               	goto	l251
  4611  0038'                    u2420:
  4612                           
  4613                           ;pff.c: 353: return 1;
  4614  0038' 0E01               	movlw	1
  4615  003A' 6E1E'              	movwf	?_get_fat,c
  4616  003C' 0E00               	movlw	0
  4617  003E' 6E1F'              	movwf	?_get_fat+1,c
  4618  0040' 0E00               	movlw	0
  4619  0042' 6E20'              	movwf	?_get_fat+2,c
  4620  0044' 0E00               	movlw	0
  4621  0046' 6E21'              	movwf	?_get_fat+3,c
  4622  0048' 0012               	return	
  4623  004A'                    l252:
  4624                           
  4625                           ;pff.c: 358: UINT wc, bc, ofs;
  4626                           ;pff.c: 360: bc = (UINT)clst; bc += bc / 2;
  4627  004A' C01E' F042'        	movff	get_fat@clst,get_fat@bc
  4628  004E' C01F' F043'        	movff	get_fat@clst+1,get_fat@bc+1
  4629  0052' 90D8               	bcf	status,0,c
  4630  0054' 3043'              	rrcf	get_fat@bc+1,w,c
  4631  0056' 6E00'              	movwf	(??_get_fat+1)& (0+255),c
  4632  0058' 3042'              	rrcf	get_fat@bc,w,c
  4633  005A' 6E00'              	movwf	??_get_fat& (0+255),c
  4634  005C' 5022'              	movf	??_get_fat,w,c
  4635  005E' 2642'              	addwf	get_fat@bc,f,c
  4636  0060' 5023'              	movf	??_get_fat+1,w,c
  4637  0062' 2243'              	addwfc	get_fat@bc+1,f,c
  4638                           
  4639                           ;pff.c: 361: ofs = bc % 512; bc /= 512;
  4640  0064' 0EFF               	movlw	255
  4641  0066' 1442'              	andwf	get_fat@bc,w,c
  4642  0068' 6E3C'              	movwf	get_fat@ofs,c
  4643  006A' 0E01               	movlw	1
  4644  006C' 1443'              	andwf	get_fat@bc+1,w,c
  4645  006E' 6E3D'              	movwf	get_fat@ofs+1,c
  4646  0070' 0E09               	movlw	9
  4647  0072' 6E00'              	movwf	??_get_fat& (0+255),c
  4648  0074'                    u2435:
  4649  0074' 90D8               	bcf	status,0,c
  4650  0076' 3243'              	rrcf	get_fat@bc+1,f,c
  4651  0078' 3242'              	rrcf	get_fat@bc,f,c
  4652  007A' 2E00'              	decfsz	??_get_fat& (0+255),f,c
  4653  007C' D7FB               	goto	u2435
  4654                           
  4655                           ;pff.c: 362: if (ofs != 511) {
  4656  007E' 283C'              	incf	get_fat@ofs,w,c
  4657  0080' E103               	bnz	u2440
  4658  0082' 043D'              	decf	get_fat@ofs+1,w,c
  4659  0084' B4D8               	btfsc	status,2,c
  4660  0086' D02C               	goto	l253
  4661  0088'                    u2440:
  4662                           
  4663                           ;pff.c: 363: if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
  4664  0088' 0E00'              	movlw	low get_fat@buf
  4665  008A' 6E08'              	movwf	disk_readp@rd,c
  4666  008C' 0E00'              	movlw	high get_fat@buf
  4667  008E' 6E09'              	movwf	disk_readp@rd+1,c
  4668  0090' EE20 F00A          	lfsr	2,10
  4669  0094' 5044'              	movf	get_fat@fs,w,c
  4670  0096' 26D9               	addwf	fsr2l,f,c
  4671  0098' 5045'              	movf	get_fat@fs+1,w,c
  4672  009A' 22DA               	addwfc	fsr2h,f,c
  4673  009C' CFDE F022'         	movff	postinc2,??_get_fat
  4674  00A0' CFDE F023'         	movff	postinc2,??_get_fat+1
  4675  00A4' CFDE F024'         	movff	postinc2,??_get_fat+2
  4676  00A8' CFDE F025'         	movff	postinc2,??_get_fat+3
  4677  00AC' 5042'              	movf	get_fat@bc,w,c
  4678  00AE' 2422'              	addwf	??_get_fat,w,c
  4679  00B0' 6E0A'              	movwf	disk_readp@sector,c
  4680  00B2' 5043'              	movf	get_fat@bc+1,w,c
  4681  00B4' 2023'              	addwfc	??_get_fat+1,w,c
  4682  00B6' 6E0B'              	movwf	disk_readp@sector+1,c
  4683  00B8' 0E00               	movlw	0
  4684  00BA' 2024'              	addwfc	??_get_fat+2,w,c
  4685  00BC' 6E0C'              	movwf	disk_readp@sector+2,c
  4686  00BE' 0E00               	movlw	0
  4687  00C0' 2025'              	addwfc	??_get_fat+3,w,c
  4688  00C2' 6E0D'              	movwf	disk_readp@sector+3,c
  4689  00C4' C03C' F00E'        	movff	get_fat@ofs,disk_readp@offset
  4690  00C8' C03D' F00F'        	movff	get_fat@ofs+1,disk_readp@offset+1
  4691  00CC' 0E00               	movlw	0
  4692  00CE' 6E11'              	movwf	disk_readp@count+1,c
  4693  00D0' 0E02               	movlw	2
  4694  00D2' 6E10'              	movwf	disk_readp@count,c
  4695  00D4' EC00' F000'        	call	_disk_readp	;wreg free
  4696  00D8' 0900               	iorlw	0
  4697  00DA' A4D8               	btfss	status,2,c
  4698  00DC' D173               	goto	l255
  4699  00DE' D05F               	goto	l258
  4700  00E0'                    l253:
  4701                           
  4702                           ;pff.c: 365: if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
  4703  00E0' 0E00'              	movlw	low get_fat@buf
  4704  00E2' 6E08'              	movwf	disk_readp@rd,c
  4705  00E4' 0E00'              	movlw	high get_fat@buf
  4706  00E6' 6E09'              	movwf	disk_readp@rd+1,c
  4707  00E8' EE20 F00A          	lfsr	2,10
  4708  00EC' 5044'              	movf	get_fat@fs,w,c
  4709  00EE' 26D9               	addwf	fsr2l,f,c
  4710  00F0' 5045'              	movf	get_fat@fs+1,w,c
  4711  00F2' 22DA               	addwfc	fsr2h,f,c
  4712  00F4' CFDE F022'         	movff	postinc2,??_get_fat
  4713  00F8' CFDE F023'         	movff	postinc2,??_get_fat+1
  4714  00FC' CFDE F024'         	movff	postinc2,??_get_fat+2
  4715  0100' CFDE F025'         	movff	postinc2,??_get_fat+3
  4716  0104' 5042'              	movf	get_fat@bc,w,c
  4717  0106' 2422'              	addwf	??_get_fat,w,c
  4718  0108' 6E0A'              	movwf	disk_readp@sector,c
  4719  010A' 5043'              	movf	get_fat@bc+1,w,c
  4720  010C' 2023'              	addwfc	??_get_fat+1,w,c
  4721  010E' 6E0B'              	movwf	disk_readp@sector+1,c
  4722  0110' 0E00               	movlw	0
  4723  0112' 2024'              	addwfc	??_get_fat+2,w,c
  4724  0114' 6E0C'              	movwf	disk_readp@sector+2,c
  4725  0116' 0E00               	movlw	0
  4726  0118' 2025'              	addwfc	??_get_fat+3,w,c
  4727  011A' 6E0D'              	movwf	disk_readp@sector+3,c
  4728  011C' 0E01               	movlw	1
  4729  011E' 6E0F'              	movwf	disk_readp@offset+1,c
  4730  0120' 680E'              	setf	disk_readp@offset,c
  4731  0122' 0E00               	movlw	0
  4732  0124' 6E11'              	movwf	disk_readp@count+1,c
  4733  0126' 0E01               	movlw	1
  4734  0128' 6E10'              	movwf	disk_readp@count,c
  4735  012A' EC00' F000'        	call	_disk_readp	;wreg free
  4736  012E' 0900               	iorlw	0
  4737  0130' A4D8               	btfss	status,2,c
  4738  0132' D148               	goto	l255
  4739                           
  4740                           ;pff.c: 366: if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
  4741  0134' 0E00'              	movlw	low (get_fat@buf+1)
  4742  0136' 6E08'              	movwf	disk_readp@rd,c
  4743  0138' 0E00'              	movlw	high (get_fat@buf+1)
  4744  013A' 6E09'              	movwf	disk_readp@rd+1,c
  4745  013C' EE20 F00A          	lfsr	2,10
  4746  0140' 5044'              	movf	get_fat@fs,w,c
  4747  0142' 26D9               	addwf	fsr2l,f,c
  4748  0144' 5045'              	movf	get_fat@fs+1,w,c
  4749  0146' 22DA               	addwfc	fsr2h,f,c
  4750  0148' CFDE F022'         	movff	postinc2,??_get_fat
  4751  014C' CFDE F023'         	movff	postinc2,??_get_fat+1
  4752  0150' CFDE F024'         	movff	postinc2,??_get_fat+2
  4753  0154' CFDE F025'         	movff	postinc2,??_get_fat+3
  4754  0158' 5042'              	movf	get_fat@bc,w,c
  4755  015A' 2422'              	addwf	??_get_fat,w,c
  4756  015C' 6E00'              	movwf	(??_get_fat+4)& (0+255),c
  4757  015E' 5043'              	movf	get_fat@bc+1,w,c
  4758  0160' 2023'              	addwfc	??_get_fat+1,w,c
  4759  0162' 6E00'              	movwf	(??_get_fat+5)& (0+255),c
  4760  0164' 0E00               	movlw	0
  4761  0166' 2024'              	addwfc	??_get_fat+2,w,c
  4762  0168' 6E00'              	movwf	(??_get_fat+6)& (0+255),c
  4763  016A' 0E00               	movlw	0
  4764  016C' 2025'              	addwfc	??_get_fat+3,w,c
  4765  016E' 6E00'              	movwf	(??_get_fat+7)& (0+255),c
  4766  0170' 0E01               	movlw	1
  4767  0172' 2426'              	addwf	??_get_fat+4,w,c
  4768  0174' 6E0A'              	movwf	disk_readp@sector,c
  4769  0176' 0E00               	movlw	0
  4770  0178' 2027'              	addwfc	??_get_fat+5,w,c
  4771  017A' 6E0B'              	movwf	disk_readp@sector+1,c
  4772  017C' 0E00               	movlw	0
  4773  017E' 2028'              	addwfc	??_get_fat+6,w,c
  4774  0180' 6E0C'              	movwf	disk_readp@sector+2,c
  4775  0182' 0E00               	movlw	0
  4776  0184' 2029'              	addwfc	??_get_fat+7,w,c
  4777  0186' 6E0D'              	movwf	disk_readp@sector+3,c
  4778  0188' 0E00               	movlw	0
  4779  018A' 6E0F'              	movwf	disk_readp@offset+1,c
  4780  018C' 0E00               	movlw	0
  4781  018E' 6E0E'              	movwf	disk_readp@offset,c
  4782  0190' 0E00               	movlw	0
  4783  0192' 6E11'              	movwf	disk_readp@count+1,c
  4784  0194' 0E01               	movlw	1
  4785  0196' 6E10'              	movwf	disk_readp@count,c
  4786  0198' EC00' F000'        	call	_disk_readp	;wreg free
  4787  019C' D79D               	goto	L3
  4788  019E'                    l258:
  4789                           
  4790                           ;pff.c: 367: }
  4791                           ;pff.c: 368: wc = (WORD)(((WORD)*((BYTE*)(buf)+1)<<8)|(WORD)*(BYTE*)(buf));
  4792  019E' 503F'              	movf	get_fat@buf+1,w,c
  4793  01A0' 6E00'              	movwf	??_get_fat& (0+255),c
  4794  01A2' 503E'              	movf	get_fat@buf,w,c
  4795  01A4' 6E3A'              	movwf	get_fat@wc,c
  4796  01A6' C022' F03B'        	movff	??_get_fat,get_fat@wc+1
  4797                           
  4798                           ;pff.c: 369: return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  4799  01AA' B01E'              	btfsc	get_fat@clst,0,c
  4800  01AC' D007               	goto	l260
  4801  01AE' 0EFF               	movlw	255
  4802  01B0' 143A'              	andwf	get_fat@wc,w,c
  4803  01B2' 6E38'              	movwf	_get_fat$545,c
  4804  01B4' 0E0F               	movlw	15
  4805  01B6' 143B'              	andwf	get_fat@wc+1,w,c
  4806  01B8' 6E39'              	movwf	_get_fat$545+1,c
  4807  01BA' D00F               	goto	l262
  4808  01BC'                    l260:
  4809  01BC' C03A' F022'        	movff	get_fat@wc,??_get_fat
  4810  01C0' C03B' F023'        	movff	get_fat@wc+1,??_get_fat+1
  4811  01C4' 0E04               	movlw	4
  4812  01C6' 6E00'              	movwf	(??_get_fat+2)& (0+255),c
  4813  01C8'                    u2495:
  4814  01C8' 90D8               	bcf	status,0,c
  4815  01CA' 3223'              	rrcf	??_get_fat+1,f,c
  4816  01CC' 3222'              	rrcf	??_get_fat,f,c
  4817  01CE' 2E00'              	decfsz	(??_get_fat+2)& (0+255),f,c
  4818  01D0' D7FB               	goto	u2495
  4819  01D2' C022' F038'        	movff	??_get_fat,_get_fat$545
  4820  01D6' C023' F039'        	movff	??_get_fat+1,_get_fat$545+1
  4821  01DA'                    l262:
  4822  01DA' C038' F01E'        	movff	_get_fat$545,?_get_fat
  4823  01DE' C039' F01F'        	movff	_get_fat$545+1,?_get_fat+1
  4824  01E2' 6A20'              	clrf	?_get_fat+2,c
  4825  01E4' 6A21'              	clrf	?_get_fat+3,c
  4826  01E6' 0012               	return	
  4827  01E8'                    
  4828                           ;pff.c: 374: if (disk_readp(buf, fs->fatbase + clst / 256, ((UINT)clst % 256) * 2, 2)) b
      +                          reak;
  4829  01E8' 0E00'              	movlw	low get_fat@buf
  4830  01EA' 6E08'              	movwf	disk_readp@rd,c
  4831  01EC' 0E00'              	movlw	high get_fat@buf
  4832  01EE' 6E09'              	movwf	disk_readp@rd+1,c
  4833  01F0' EE20 F00A          	lfsr	2,10
  4834  01F4' 5044'              	movf	get_fat@fs,w,c
  4835  01F6' 26D9               	addwf	fsr2l,f,c
  4836  01F8' 5045'              	movf	get_fat@fs+1,w,c
  4837  01FA' 22DA               	addwfc	fsr2h,f,c
  4838  01FC' CFDE F022'         	movff	postinc2,??_get_fat
  4839  0200' CFDE F023'         	movff	postinc2,??_get_fat+1
  4840  0204' CFDE F024'         	movff	postinc2,??_get_fat+2
  4841  0208' CFDE F025'         	movff	postinc2,??_get_fat+3
  4842  020C' C01E' F026'        	movff	get_fat@clst,??_get_fat+4
  4843  0210' C01F' F027'        	movff	get_fat@clst+1,??_get_fat+5
  4844  0214' C020' F028'        	movff	get_fat@clst+2,??_get_fat+6
  4845  0218' C021' F029'        	movff	get_fat@clst+3,??_get_fat+7
  4846  021C' C027' F026'        	movff	??_get_fat+5,??_get_fat+4
  4847  0220' C028' F027'        	movff	??_get_fat+6,??_get_fat+5
  4848  0224' C029' F028'        	movff	??_get_fat+7,??_get_fat+6
  4849  0228' 6A29'              	clrf	??_get_fat+7,c
  4850  022A' 5022'              	movf	??_get_fat,w,c
  4851  022C' 2426'              	addwf	??_get_fat+4,w,c
  4852  022E' 6E0A'              	movwf	disk_readp@sector,c
  4853  0230' 5023'              	movf	??_get_fat+1,w,c
  4854  0232' 2027'              	addwfc	??_get_fat+5,w,c
  4855  0234' 6E0B'              	movwf	disk_readp@sector+1,c
  4856  0236' 5024'              	movf	??_get_fat+2,w,c
  4857  0238' 2028'              	addwfc	??_get_fat+6,w,c
  4858  023A' 6E0C'              	movwf	disk_readp@sector+2,c
  4859  023C' 5025'              	movf	??_get_fat+3,w,c
  4860  023E' 2029'              	addwfc	??_get_fat+7,w,c
  4861  0240' 6E0D'              	movwf	disk_readp@sector+3,c
  4862  0242' 0EFF               	movlw	255
  4863  0244' 141E'              	andwf	get_fat@clst,w,c
  4864  0246' 6E00'              	movwf	(??_get_fat+8)& (0+255),c
  4865  0248' 0E00               	movlw	0
  4866  024A' 141F'              	andwf	get_fat@clst+1,w,c
  4867  024C' 6E00'              	movwf	(??_get_fat+9)& (0+255),c
  4868  024E' 90D8               	bcf	status,0,c
  4869  0250' 342A'              	rlcf	??_get_fat+8,w,c
  4870  0252' 6E0E'              	movwf	disk_readp@offset,c
  4871  0254' 342B'              	rlcf	??_get_fat+9,w,c
  4872  0256' 6E0F'              	movwf	disk_readp@offset+1,c
  4873  0258' 0E00               	movlw	0
  4874  025A' 6E11'              	movwf	disk_readp@count+1,c
  4875  025C' 0E02               	movlw	2
  4876  025E' 6E10'              	movwf	disk_readp@count,c
  4877  0260' EC00' F000'        	call	_disk_readp	;wreg free
  4878  0264' 0900               	iorlw	0
  4879  0266' A4D8               	btfss	status,2,c
  4880  0268' D0AD               	goto	l255
  4881                           
  4882                           ;pff.c: 375: return (WORD)(((WORD)*((BYTE*)(buf)+1)<<8)|(WORD)*(BYTE*)(buf));
  4883  026A' 503E'              	movf	get_fat@buf,w,c
  4884  026C' C03F' F022'        	movff	get_fat@buf+1,??_get_fat
  4885  0270' 6A00'              	clrf	(??_get_fat+1)& (0+255),c
  4886  0272' C022' F023'        	movff	??_get_fat,??_get_fat+1
  4887  0276' 6A22'              	clrf	??_get_fat,c
  4888  0278' 1222'              	iorwf	??_get_fat,f,c
  4889  027A' 0E00               	movlw	0
  4890  027C' 1223'              	iorwf	??_get_fat+1,f,c
  4891  027E' C022' F01E'        	movff	??_get_fat,?_get_fat
  4892  0282' C023' F01F'        	movff	??_get_fat+1,?_get_fat+1
  4893  0286' 6A20'              	clrf	?_get_fat+2,c
  4894  0288' 6A21'              	clrf	?_get_fat+3,c
  4895  028A' 0012               	return	
  4896  028C'                    
  4897                           ;pff.c: 379: if (disk_readp(buf, fs->fatbase + clst / 128, ((UINT)clst % 128) * 4, 4)) b
      +                          reak;
  4898  028C' 0E00'              	movlw	low get_fat@buf
  4899  028E' 6E08'              	movwf	disk_readp@rd,c
  4900  0290' 0E00'              	movlw	high get_fat@buf
  4901  0292' 6E09'              	movwf	disk_readp@rd+1,c
  4902  0294' EE20 F00A          	lfsr	2,10
  4903  0298' 5044'              	movf	get_fat@fs,w,c
  4904  029A' 26D9               	addwf	fsr2l,f,c
  4905  029C' 5045'              	movf	get_fat@fs+1,w,c
  4906  029E' 22DA               	addwfc	fsr2h,f,c
  4907  02A0' CFDE F022'         	movff	postinc2,??_get_fat
  4908  02A4' CFDE F023'         	movff	postinc2,??_get_fat+1
  4909  02A8' CFDE F024'         	movff	postinc2,??_get_fat+2
  4910  02AC' CFDE F025'         	movff	postinc2,??_get_fat+3
  4911  02B0' C01E' F026'        	movff	get_fat@clst,??_get_fat+4
  4912  02B4' C01F' F027'        	movff	get_fat@clst+1,??_get_fat+5
  4913  02B8' C020' F028'        	movff	get_fat@clst+2,??_get_fat+6
  4914  02BC' C021' F029'        	movff	get_fat@clst+3,??_get_fat+7
  4915  02C0' 0E08               	movlw	8
  4916  02C2' D005               	goto	u2510
  4917  02C4'                    u2515:
  4918  02C4' 90D8               	bcf	status,0,c
  4919  02C6' 3229'              	rrcf	??_get_fat+7,f,c
  4920  02C8' 3228'              	rrcf	??_get_fat+6,f,c
  4921  02CA' 3227'              	rrcf	??_get_fat+5,f,c
  4922  02CC' 3226'              	rrcf	??_get_fat+4,f,c
  4923  02CE'                    u2510:
  4924  02CE' 2EE8               	decfsz	wreg,f,c
  4925  02D0' D7F9               	goto	u2515
  4926  02D2' 5022'              	movf	??_get_fat,w,c
  4927  02D4' 2426'              	addwf	??_get_fat+4,w,c
  4928  02D6' 6E0A'              	movwf	disk_readp@sector,c
  4929  02D8' 5023'              	movf	??_get_fat+1,w,c
  4930  02DA' 2027'              	addwfc	??_get_fat+5,w,c
  4931  02DC' 6E0B'              	movwf	disk_readp@sector+1,c
  4932  02DE' 5024'              	movf	??_get_fat+2,w,c
  4933  02E0' 2028'              	addwfc	??_get_fat+6,w,c
  4934  02E2' 6E0C'              	movwf	disk_readp@sector+2,c
  4935  02E4' 5025'              	movf	??_get_fat+3,w,c
  4936  02E6' 2029'              	addwfc	??_get_fat+7,w,c
  4937  02E8' 6E0D'              	movwf	disk_readp@sector+3,c
  4938  02EA' 0E7F               	movlw	127
  4939  02EC' 141E'              	andwf	get_fat@clst,w,c
  4940  02EE' 6E00'              	movwf	(??_get_fat+8)& (0+255),c
  4941  02F0' 0E00               	movlw	0
  4942  02F2' 141F'              	andwf	get_fat@clst+1,w,c
  4943  02F4' 6E00'              	movwf	(??_get_fat+9)& (0+255),c
  4944  02F6' 90D8               	bcf	status,0,c
  4945  02F8' 362A'              	rlcf	??_get_fat+8,f,c
  4946  02FA' 362B'              	rlcf	??_get_fat+9,f,c
  4947  02FC' 90D8               	bcf	status,0,c
  4948  02FE' 362A'              	rlcf	??_get_fat+8,f,c
  4949  0300' 362B'              	rlcf	??_get_fat+9,f,c
  4950  0302' C02A' F00E'        	movff	??_get_fat+8,disk_readp@offset
  4951  0306' C02B' F00F'        	movff	??_get_fat+9,disk_readp@offset+1
  4952  030A' 0E00               	movlw	0
  4953  030C' 6E11'              	movwf	disk_readp@count+1,c
  4954  030E' 0E04               	movlw	4
  4955  0310' 6E10'              	movwf	disk_readp@count,c
  4956  0312' EC00' F000'        	call	_disk_readp	;wreg free
  4957  0316' 0900               	iorlw	0
  4958  0318' A4D8               	btfss	status,2,c
  4959  031A' D054               	goto	l255
  4960                           
  4961                           ;pff.c: 380: return (DWORD)(((DWORD)*((BYTE*)(buf)+3)<<24)|((DWORD)*((BYTE*)(buf)+2)<<16
      +                          )|((WORD)*((BYTE*)(buf)+1)<<8)|*(BYTE*)(buf)) & 0x0FFFFFFF;
  4962  031C' 503F'              	movf	get_fat@buf+1,w,c
  4963  031E' 6E00'              	movwf	(??_get_fat+1)& (0+255),c
  4964  0320' 6A00'              	clrf	??_get_fat& (0+255),c
  4965  0322' C040' F024'        	movff	get_fat@buf+2,??_get_fat+2
  4966  0326' 6A00'              	clrf	(??_get_fat+3)& (0+255),c
  4967  0328' 6A00'              	clrf	(??_get_fat+4)& (0+255),c
  4968  032A' 6A00'              	clrf	(??_get_fat+5)& (0+255),c
  4969  032C' C025' F027'        	movff	??_get_fat+3,??_get_fat+5
  4970  0330' C024' F026'        	movff	??_get_fat+2,??_get_fat+4
  4971  0334' 6A25'              	clrf	??_get_fat+3,c
  4972  0336' 6A24'              	clrf	??_get_fat+2,c
  4973  0338' C041' F028'        	movff	get_fat@buf+3,??_get_fat+6
  4974  033C' 6A00'              	clrf	(??_get_fat+7)& (0+255),c
  4975  033E' 6A00'              	clrf	(??_get_fat+8)& (0+255),c
  4976  0340' 6A00'              	clrf	(??_get_fat+9)& (0+255),c
  4977  0342' C028' F02B'        	movff	??_get_fat+6,??_get_fat+9
  4978  0346' 6A2A'              	clrf	??_get_fat+8,c
  4979  0348' 6A29'              	clrf	??_get_fat+7,c
  4980  034A' 6A28'              	clrf	??_get_fat+6,c
  4981  034C' 5024'              	movf	??_get_fat+2,w,c
  4982  034E' 1028'              	iorwf	??_get_fat+6,w,c
  4983  0350' 6E00'              	movwf	(??_get_fat+10)& (0+255),c
  4984  0352' 5025'              	movf	??_get_fat+3,w,c
  4985  0354' 1029'              	iorwf	??_get_fat+7,w,c
  4986  0356' 6E00'              	movwf	(??_get_fat+11)& (0+255),c
  4987  0358' 5026'              	movf	??_get_fat+4,w,c
  4988  035A' 102A'              	iorwf	??_get_fat+8,w,c
  4989  035C' 6E00'              	movwf	(??_get_fat+12)& (0+255),c
  4990  035E' 5027'              	movf	??_get_fat+5,w,c
  4991  0360' 102B'              	iorwf	??_get_fat+9,w,c
  4992  0362' 6E00'              	movwf	(??_get_fat+13)& (0+255),c
  4993  0364' 5022'              	movf	??_get_fat,w,c
  4994  0366' 102C'              	iorwf	??_get_fat+10,w,c
  4995  0368' 6E00'              	movwf	(??_get_fat+14)& (0+255),c
  4996  036A' 5023'              	movf	??_get_fat+1,w,c
  4997  036C' 102D'              	iorwf	??_get_fat+11,w,c
  4998  036E' 6E00'              	movwf	(??_get_fat+15)& (0+255),c
  4999  0370' 0E00               	movlw	0
  5000  0372' 102E'              	iorwf	??_get_fat+12,w,c
  5001  0374' 6E00'              	movwf	(??_get_fat+16)& (0+255),c
  5002  0376' 0E00               	movlw	0
  5003  0378' 102F'              	iorwf	??_get_fat+13,w,c
  5004  037A' 6E00'              	movwf	(??_get_fat+17)& (0+255),c
  5005  037C' 503E'              	movf	get_fat@buf,w,c
  5006  037E' 1030'              	iorwf	??_get_fat+14,w,c
  5007  0380' 6E00'              	movwf	(??_get_fat+18)& (0+255),c
  5008  0382' 5031'              	movf	??_get_fat+15,w,c
  5009  0384' 6E00'              	movwf	(??_get_fat+19)& (0+255),c
  5010  0386' 5032'              	movf	??_get_fat+16,w,c
  5011  0388' 6E00'              	movwf	(??_get_fat+20)& (0+255),c
  5012  038A' 5033'              	movf	??_get_fat+17,w,c
  5013  038C' 6E00'              	movwf	(??_get_fat+21)& (0+255),c
  5014  038E' 0EFF               	movlw	255
  5015  0390' 1434'              	andwf	??_get_fat+18,w,c
  5016  0392' 6E1E'              	movwf	?_get_fat,c
  5017  0394' 0EFF               	movlw	255
  5018  0396' 1435'              	andwf	??_get_fat+19,w,c
  5019  0398' 6E1F'              	movwf	?_get_fat+1,c
  5020  039A' 0EFF               	movlw	255
  5021  039C' 1436'              	andwf	??_get_fat+20,w,c
  5022  039E' 6E20'              	movwf	?_get_fat+2,c
  5023  03A0' 0E0F               	movlw	15
  5024  03A2' 1437'              	andwf	??_get_fat+21,w,c
  5025  03A4' 6E21'              	movwf	?_get_fat+3,c
  5026  03A6' 0012               	return	
  5027  03A8'                    l251:
  5028  03A8' C044' FFD9         	movff	get_fat@fs,fsr2l
  5029  03AC' C045' FFDA         	movff	get_fat@fs+1,fsr2h
  5030  03B0' 50DF               	movf	indf2,w,c
  5031                           
  5032                           ; Switch size 1, requested type "space"
  5033                           ; Number of cases is 3, Range of values is 1 to 3
  5034                           ; switch strategies available:
  5035                           ; Name         Instructions Cycles
  5036                           ; simple_byte           10     6 (average)
  5037                           ;	Chosen strategy is simple_byte
  5038  03B2' 0A01               	xorlw	1	; case 1
  5039  03B4' B4D8               	btfsc	status,2,c
  5040  03B6' D649               	goto	l252
  5041  03B8' 0A03               	xorlw	3	; case 2
  5042  03BA' B4D8               	btfsc	status,2,c
  5043  03BC' D715               	goto	l263
  5044  03BE' 0A01               	xorlw	1	; case 3
  5045  03C0' B4D8               	btfsc	status,2,c
  5046  03C2' D764               	goto	l265
  5047  03C4'                    l255:
  5048                           
  5049                           ;pff.c: 384: return 1;
  5050  03C4' 0E01               	movlw	1
  5051  03C6' 6E1E'              	movwf	?_get_fat,c
  5052  03C8' 0E00               	movlw	0
  5053  03CA' 6E1F'              	movwf	?_get_fat+1,c
  5054  03CC' 0E00               	movlw	0
  5055  03CE' 6E20'              	movwf	?_get_fat+2,c
  5056  03D0' 0E00               	movlw	0
  5057  03D2' 6E21'              	movwf	?_get_fat+3,c
  5058  03D4' 0012               	return	
  5059  03D6'                    __end_of_get_fat:
  5060                           	opt stack 0
  5061                           tblptru	equ	0xFF8
  5062                           tblptrh	equ	0xFF7
  5063                           tblptrl	equ	0xFF6
  5064                           tablat	equ	0xFF5
  5065                           postinc0	equ	0xFEE
  5066                           wreg	equ	0xFE8
  5067                           indf1	equ	0xFE7
  5068                           postdec1	equ	0xFE5
  5069                           fsr1h	equ	0xFE2
  5070                           fsr1l	equ	0xFE1
  5071                           indf2	equ	0xFDF
  5072                           postinc2	equ	0xFDE
  5073                           postdec2	equ	0xFDD
  5074                           plusw2	equ	0xFDB
  5075                           fsr2h	equ	0xFDA
  5076                           fsr2l	equ	0xFD9
  5077                           status	equ	0xFD8
  5078                           
  5079 ;; *************** function _clust2sect *****************
  5080 ;; Defined at:
  5081 ;;		line 395 in file "pff.c"
  5082 ;; Parameters:    Size  Location     Type
  5083 ;;  clst            4   12[COMRAM] unsigned long 
  5084 ;; Auto vars:     Size  Location     Type
  5085 ;;  fs              2   21[COMRAM] PTR struct .
  5086 ;;		 -> NULL(0), main@fs(42), 
  5087 ;; Return value:  Size  Location     Type
  5088 ;;                  4   12[COMRAM] unsigned long 
  5089 ;; Registers used:
  5090 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5091 ;; Tracked objects:
  5092 ;;		On entry : 0/0
  5093 ;;		On exit  : 0/0
  5094 ;;		Unchanged: 0/0
  5095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5096 ;;      Params:         4       0       0       0       0       0       0       0       0
  5097 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5098 ;;      Temps:          5       0       0       0       0       0       0       0       0
  5099 ;;      Totals:        11       0       0       0       0       0       0       0       0
  5100 ;;Total ram usage:       11 bytes
  5101 ;; Hardware stack levels used:    1
  5102 ;; Hardware stack levels required when called:    1
  5103 ;; This function calls:
  5104 ;;		___lmul
  5105 ;; This function is called by:
  5106 ;;		_dir_rewind
  5107 ;;		_dir_next
  5108 ;;		_pf_read
  5109 ;;		_pf_write
  5110 ;;		_pf_lseek
  5111 ;; This function uses a non-reentrant model
  5112 ;;
  5113                           
  5114                           	psect	text14
  5115  0000'                    __ptext14:
  5116                           	opt stack 0
  5117  0000'                    _clust2sect:
  5118                           	opt stack 28
  5119                           
  5120                           ;pff.c: 399: FATFS *fs = FatFs;
  5121                           
  5122                           ;incstack = 0
  5123  0000' C004' F015'        	movff	_FatFs,clust2sect@fs
  5124  0004' C005' F016'        	movff	_FatFs+1,clust2sect@fs+1
  5125                           
  5126                           ;pff.c: 402: clst -= 2;
  5127  0008' 0E02               	movlw	2
  5128  000A' 5E0C'              	subwf	clust2sect@clst,f,c
  5129  000C' 0E00               	movlw	0
  5130  000E' 5A0D'              	subwfb	clust2sect@clst+1,f,c
  5131  0010' 5A0E'              	subwfb	clust2sect@clst+2,f,c
  5132  0012' 5A0F'              	subwfb	clust2sect@clst+3,f,c
  5133                           
  5134                           ;pff.c: 403: if (clst >= (fs->n_fatent - 2)) return 0;
  5135  0014' EE20 F006          	lfsr	2,6
  5136  0018' 5015'              	movf	clust2sect@fs,w,c
  5137  001A' 26D9               	addwf	fsr2l,f,c
  5138  001C' 5016'              	movf	clust2sect@fs+1,w,c
  5139  001E' 22DA               	addwfc	fsr2h,f,c
  5140  0020' 0EFE               	movlw	254
  5141  0022' 24DE               	addwf	postinc2,w,c
  5142  0024' 6E00'              	movwf	??_clust2sect& (0+255),c
  5143  0026' 0EFF               	movlw	255
  5144  0028' 20DE               	addwfc	postinc2,w,c
  5145  002A' 6E00'              	movwf	(??_clust2sect+1)& (0+255),c
  5146  002C' 0EFF               	movlw	255
  5147  002E' 20DE               	addwfc	postinc2,w,c
  5148  0030' 6E00'              	movwf	(??_clust2sect+2)& (0+255),c
  5149  0032' 0EFF               	movlw	255
  5150  0034' 20DE               	addwfc	postinc2,w,c
  5151  0036' 6E00'              	movwf	(??_clust2sect+3)& (0+255),c
  5152  0038' 5010'              	movf	??_clust2sect,w,c
  5153  003A' 5C0C'              	subwf	clust2sect@clst,w,c
  5154  003C' 5011'              	movf	??_clust2sect+1,w,c
  5155  003E' 580D'              	subwfb	clust2sect@clst+1,w,c
  5156  0040' 5012'              	movf	??_clust2sect+2,w,c
  5157  0042' 580E'              	subwfb	clust2sect@clst+2,w,c
  5158  0044' 5013'              	movf	??_clust2sect+3,w,c
  5159  0046' 580F'              	subwfb	clust2sect@clst+3,w,c
  5160  0048' A0D8               	btfss	status,0,c
  5161  004A' D009               	goto	l269
  5162  004C' 0E00               	movlw	0
  5163  004E' 6E0C'              	movwf	?_clust2sect,c
  5164  0050' 0E00               	movlw	0
  5165  0052' 6E0D'              	movwf	?_clust2sect+1,c
  5166  0054' 0E00               	movlw	0
  5167  0056' 6E0E'              	movwf	?_clust2sect+2,c
  5168  0058' 0E00               	movlw	0
  5169  005A' 6E0F'              	movwf	?_clust2sect+3,c
  5170  005C' 0012               	return	
  5171  005E'                    l269:
  5172                           
  5173                           ;pff.c: 404: return (DWORD)clst * fs->csize + fs->database;
  5174  005E' EE20 F012          	lfsr	2,18
  5175  0062' 5015'              	movf	clust2sect@fs,w,c
  5176  0064' 26D9               	addwf	fsr2l,f,c
  5177  0066' 5016'              	movf	clust2sect@fs+1,w,c
  5178  0068' 22DA               	addwfc	fsr2h,f,c
  5179  006A' CFDE F010'         	movff	postinc2,??_clust2sect
  5180  006E' CFDE F011'         	movff	postinc2,??_clust2sect+1
  5181  0072' CFDE F012'         	movff	postinc2,??_clust2sect+2
  5182  0076' CFDE F013'         	movff	postinc2,??_clust2sect+3
  5183  007A' EE20 F002          	lfsr	2,2
  5184  007E' 5015'              	movf	clust2sect@fs,w,c
  5185  0080' 26D9               	addwf	fsr2l,f,c
  5186  0082' 5016'              	movf	clust2sect@fs+1,w,c
  5187  0084' 22DA               	addwfc	fsr2h,f,c
  5188  0086' 50DF               	movf	indf2,w,c
  5189  0088' 6E00'              	movwf	(??_clust2sect+4)& (0+255),c
  5190  008A' 5014'              	movf	??_clust2sect+4,w,c
  5191  008C' 6E00'              	movwf	___lmul@multiplier,c
  5192  008E' 6A01'              	clrf	___lmul@multiplier+1,c
  5193  0090' 6A02'              	clrf	___lmul@multiplier+2,c
  5194  0092' 6A03'              	clrf	___lmul@multiplier+3,c
  5195  0094' C00C' F004'        	movff	clust2sect@clst,___lmul@multiplicand
  5196  0098' C00D' F005'        	movff	clust2sect@clst+1,___lmul@multiplicand+1
  5197  009C' C00E' F006'        	movff	clust2sect@clst+2,___lmul@multiplicand+2
  5198  00A0' C00F' F007'        	movff	clust2sect@clst+3,___lmul@multiplicand+3
  5199  00A4' EC00' F000'        	call	___lmul	;wreg free
  5200  00A8' 5010'              	movf	??_clust2sect,w,c
  5201  00AA' 2400'              	addwf	?___lmul,w,c
  5202  00AC' 6E0C'              	movwf	?_clust2sect,c
  5203  00AE' 5011'              	movf	??_clust2sect+1,w,c
  5204  00B0' 2001'              	addwfc	?___lmul+1,w,c
  5205  00B2' 6E0D'              	movwf	?_clust2sect+1,c
  5206  00B4' 5012'              	movf	??_clust2sect+2,w,c
  5207  00B6' 2002'              	addwfc	?___lmul+2,w,c
  5208  00B8' 6E0E'              	movwf	?_clust2sect+2,c
  5209  00BA' 5013'              	movf	??_clust2sect+3,w,c
  5210  00BC' 2003'              	addwfc	?___lmul+3,w,c
  5211  00BE' 6E0F'              	movwf	?_clust2sect+3,c
  5212  00C0' 0012               	return	
  5213  00C2'                    __end_of_clust2sect:
  5214                           	opt stack 0
  5215                           tblptru	equ	0xFF8
  5216                           tblptrh	equ	0xFF7
  5217                           tblptrl	equ	0xFF6
  5218                           tablat	equ	0xFF5
  5219                           postinc0	equ	0xFEE
  5220                           wreg	equ	0xFE8
  5221                           indf1	equ	0xFE7
  5222                           postdec1	equ	0xFE5
  5223                           fsr1h	equ	0xFE2
  5224                           fsr1l	equ	0xFE1
  5225                           indf2	equ	0xFDF
  5226                           postinc2	equ	0xFDE
  5227                           postdec2	equ	0xFDD
  5228                           plusw2	equ	0xFDB
  5229                           fsr2h	equ	0xFDA
  5230                           fsr2l	equ	0xFD9
  5231                           status	equ	0xFD8
  5232                           
  5233 ;; *************** function _create_name *****************
  5234 ;; Defined at:
  5235 ;;		line 576 in file "pff.c"
  5236 ;; Parameters:    Size  Location     Type
  5237 ;;  dj              2    8[COMRAM] PTR struct .
  5238 ;;		 -> pf_open@dj(16), 
  5239 ;;  path            2   10[COMRAM] PTR PTR const unsigned c
  5240 ;;		 -> follow_path@path(2), 
  5241 ;; Auto vars:     Size  Location     Type
  5242 ;;  d               1   19[COMRAM] unsigned char 
  5243 ;;  sfn             2   24[COMRAM] PTR unsigned char 
  5244 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  5245 ;;  p               2   20[COMRAM] PTR const unsigned char 
  5246 ;;		 -> STR_4(10), 
  5247 ;;  c               1   27[COMRAM] unsigned char 
  5248 ;;  i               1   26[COMRAM] unsigned char 
  5249 ;;  si              1   23[COMRAM] unsigned char 
  5250 ;;  ni              1   22[COMRAM] unsigned char 
  5251 ;; Return value:  Size  Location     Type
  5252 ;;                  1    wreg      enum E43
  5253 ;; Registers used:
  5254 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5255 ;; Tracked objects:
  5256 ;;		On entry : 0/0
  5257 ;;		On exit  : 0/0
  5258 ;;		Unchanged: 0/0
  5259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5260 ;;      Params:         4       0       0       0       0       0       0       0       0
  5261 ;;      Locals:         9       0       0       0       0       0       0       0       0
  5262 ;;      Temps:          7       0       0       0       0       0       0       0       0
  5263 ;;      Totals:        20       0       0       0       0       0       0       0       0
  5264 ;;Total ram usage:       20 bytes
  5265 ;; Hardware stack levels used:    1
  5266 ;; Hardware stack levels required when called:    1
  5267 ;; This function calls:
  5268 ;;		_mem_set
  5269 ;; This function is called by:
  5270 ;;		_follow_path
  5271 ;; This function uses a non-reentrant model
  5272 ;;
  5273                           
  5274                           	psect	text15
  5275  0000'                    __ptext15:
  5276                           	opt stack 0
  5277  0000'                    _create_name:
  5278                           	opt stack 27
  5279                           
  5280                           ;pff.c: 581: BYTE c, ni, si, i, *sfn;
  5281                           ;pff.c: 582: const char *p;
  5282                           ;pff.c: 585: static const BYTE cvt[] = {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x4
      +                          5,0x45,0x49,0x49,0x49,0x8E,0x8F,0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0
      +                          x9B,0x9C,0x9D,0x9E,0x9F, 0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0x
  5283                           ;pff.c: 590: sfn = dj->fn;
  5284                           
  5285                           ;incstack = 0
  5286  0000' EE20 F002          	lfsr	2,2
  5287  0004' 5008'              	movf	create_name@dj,w,c
  5288  0006' 26D9               	addwf	fsr2l,f,c
  5289  0008' 5009'              	movf	create_name@dj+1,w,c
  5290  000A' 22DA               	addwfc	fsr2h,f,c
  5291  000C' CFDE F018'         	movff	postinc2,create_name@sfn
  5292  0010' CFDD F019'         	movff	postdec2,create_name@sfn+1
  5293                           
  5294                           ;pff.c: 591: mem_set(sfn, ' ', 11);
  5295  0014' C018' F000'        	movff	create_name@sfn,mem_set@dst
  5296  0018' C019' F001'        	movff	create_name@sfn+1,mem_set@dst+1
  5297  001C' 0E00               	movlw	0
  5298  001E' 6E03'              	movwf	mem_set@val+1,c
  5299  0020' 0E20               	movlw	32
  5300  0022' 6E02'              	movwf	mem_set@val,c
  5301  0024' 0E00               	movlw	0
  5302  0026' 6E05'              	movwf	mem_set@cnt+1,c
  5303  0028' 0E0B               	movlw	11
  5304  002A' 6E04'              	movwf	mem_set@cnt,c
  5305  002C' EC00' F000'        	call	_mem_set	;wreg free
  5306                           
  5307                           ;pff.c: 592: si = i = 0; ni = 8;
  5308  0030' 0E00               	movlw	0
  5309  0032' 6E1A'              	movwf	create_name@i,c
  5310  0034' C01A' F017'        	movff	create_name@i,create_name@si
  5311  0038' 0E08               	movlw	8
  5312  003A' 6E16'              	movwf	create_name@ni,c
  5313                           
  5314                           ;pff.c: 593: p = *path;
  5315  003C' C00A' FFD9         	movff	create_name@path,fsr2l
  5316  0040' C00B' FFDA         	movff	create_name@path+1,fsr2h
  5317  0044' CFDE F014'         	movff	postinc2,create_name@p
  5318  0048' CFDD F015'         	movff	postdec2,create_name@p+1
  5319  004C'                    
  5320                           ;pff.c: 595: c = p[si++];
  5321  004C' 5017'              	movf	create_name@si,w,c
  5322  004E' 0D01               	mullw	1
  5323  0050' C014' F00C'        	movff	create_name@p,??_create_name
  5324  0054' C015' F00D'        	movff	create_name@p+1,??_create_name+1
  5325  0058' 50F3               	movf	prodl,w,c
  5326  005A' 260C'              	addwf	??_create_name,f,c
  5327  005C' 50F4               	movf	prodh,w,c
  5328  005E' 220D'              	addwfc	??_create_name+1,f,c
  5329  0060' C00C' FFF6         	movff	??_create_name,tblptrl
  5330  0064' C00D' FFF7         	movff	??_create_name+1,tblptrh
  5331  0068'                    	if	0	;tblptru may be non-zero
  5332  0068'                    	endif
  5333  0068'                    	if	0	;tblptru may be non-zero
  5334  0068'                    	endif
  5335  0068' 0008               	tblrd		*
  5336  006A' CFF5 F01B'         	movff	tablat,create_name@c
  5337  006E' 2A17'              	incf	create_name@si,f,c
  5338                           
  5339                           ;pff.c: 596: if (c <= ' ' || c == '/') break;
  5340  0070' 0E20               	movlw	32
  5341  0072' 641B'              	cpfsgt	create_name@c,c
  5342  0074' D044               	goto	l331
  5343  0076' 0E2F               	movlw	47
  5344  0078' 181B'              	xorwf	create_name@c,w,c
  5345  007A' B4D8               	btfsc	status,2,c
  5346  007C' D040               	goto	l331
  5347                           
  5348                           ;pff.c: 597: if (c == '.' || i >= ni) {
  5349  007E' 0E2E               	movlw	46
  5350  0080' 181B'              	xorwf	create_name@c,w,c
  5351  0082' B4D8               	btfsc	status,2,c
  5352  0084' D004               	goto	u2880
  5353  0086' 5016'              	movf	create_name@ni,w,c
  5354  0088' 5C1A'              	subwf	create_name@i,w,c
  5355  008A' A0D8               	btfss	status,0,c
  5356  008C' D00D               	goto	l332
  5357  008E'                    u2880:
  5358                           
  5359                           ;pff.c: 598: if (ni != 8 || c != '.') break;
  5360  008E' 0E08               	movlw	8
  5361  0090' 1816'              	xorwf	create_name@ni,w,c
  5362  0092' A4D8               	btfss	status,2,c
  5363  0094' D034               	goto	l331
  5364  0096' 0E2E               	movlw	46
  5365  0098' 181B'              	xorwf	create_name@c,w,c
  5366  009A' A4D8               	btfss	status,2,c
  5367  009C' D030               	goto	l331
  5368                           
  5369                           ;pff.c: 599: i = 8; ni = 11;
  5370  009E' 0E08               	movlw	8
  5371  00A0' 6E1A'              	movwf	create_name@i,c
  5372  00A2' 0E0B               	movlw	11
  5373  00A4' 6E16'              	movwf	create_name@ni,c
  5374                           
  5375                           ;pff.c: 600: continue;
  5376  00A6' D7D2               	goto	l327
  5377  00A8'                    l332:
  5378                           
  5379                           ;pff.c: 601: }
  5380                           ;pff.c: 604: if (c >= 0x80)
  5381  00A8' 0E7F               	movlw	127
  5382  00AA' 641B'              	cpfsgt	create_name@c,c
  5383  00AC' D014               	goto	l340
  5384                           
  5385                           ;pff.c: 605: c = cvt[c - 0x80];
  5386  00AE' 0E80               	movlw	128
  5387  00B0' 6E00'              	movwf	??_create_name& (0+255),c
  5388  00B2' 0EFF               	movlw	255
  5389  00B4' 6E00'              	movwf	(??_create_name+1)& (0+255),c
  5390  00B6' 501B'              	movf	create_name@c,w,c
  5391  00B8' 6E00'              	movwf	(??_create_name+2)& (0+255),c
  5392  00BA' 6A00'              	clrf	(??_create_name+3)& (0+255),c
  5393  00BC' 500C'              	movf	??_create_name,w,c
  5394  00BE' 260E'              	addwf	??_create_name+2,f,c
  5395  00C0' 500D'              	movf	??_create_name+1,w,c
  5396  00C2' 220F'              	addwfc	??_create_name+3,f,c
  5397  00C4' 0E00'              	movlw	low create_name@cvt
  5398  00C6' 240E'              	addwf	??_create_name+2,w,c
  5399  00C8' 6EF6               	movwf	tblptrl,c
  5400  00CA' 0E00'              	movlw	high create_name@cvt
  5401  00CC' 200F'              	addwfc	??_create_name+3,w,c
  5402  00CE' 6EF7               	movwf	tblptrh,c
  5403  00D0'                    	if	0	;There are less than 3 active tblptr bytes
  5404  00D0'                    	endif
  5405  00D0' 0008               	tblrd		*
  5406  00D2' CFF5 F01B'         	movff	tablat,create_name@c
  5407  00D6'                    l340:
  5408  00D6' 0E60               	movlw	96
  5409  00D8' 641B'              	cpfsgt	create_name@c,c
  5410  00DA' D005               	goto	l342
  5411  00DC' 0E7B               	movlw	123
  5412  00DE' 601B'              	cpfslt	create_name@c,c
  5413  00E0' D002               	goto	l342
  5414  00E2' 0E20               	movlw	32
  5415  00E4' 5E1B'              	subwf	create_name@c,f,c
  5416  00E6'                    l342:
  5417                           
  5418                           ;pff.c: 615: sfn[i++] = c;
  5419  00E6' 501A'              	movf	create_name@i,w,c
  5420  00E8' 0D01               	mullw	1
  5421  00EA' 50F3               	movf	prodl,w,c
  5422  00EC' 2418'              	addwf	create_name@sfn,w,c
  5423  00EE' 6ED9               	movwf	fsr2l,c
  5424  00F0' 50F4               	movf	prodh,w,c
  5425  00F2' 2019'              	addwfc	create_name@sfn+1,w,c
  5426  00F4' 6EDA               	movwf	fsr2h,c
  5427  00F6' C01B' FFDF         	movff	create_name@c,indf2
  5428  00FA' 2A1A'              	incf	create_name@i,f,c
  5429                           
  5430                           ;pff.c: 616: }
  5431                           ;pff.c: 617: }
  5432  00FC' D7A7               	goto	l327
  5433  00FE'                    l331:
  5434                           
  5435                           ;pff.c: 618: *path = &p[si];
  5436  00FE' 5017'              	movf	create_name@si,w,c
  5437  0100' 0D01               	mullw	1
  5438  0102' C014' F00C'        	movff	create_name@p,??_create_name
  5439  0106' C015' F00D'        	movff	create_name@p+1,??_create_name+1
  5440  010A' 50F3               	movf	prodl,w,c
  5441  010C' 260C'              	addwf	??_create_name,f,c
  5442  010E' 50F4               	movf	prodh,w,c
  5443  0110' 220D'              	addwfc	??_create_name+1,f,c
  5444  0112' C00A' FFD9         	movff	create_name@path,fsr2l
  5445  0116' C00B' FFDA         	movff	create_name@path+1,fsr2h
  5446  011A' C00C' FFDE         	movff	??_create_name,postinc2
  5447  011E' C00D' FFDD         	movff	??_create_name+1,postdec2
  5448                           
  5449                           ;pff.c: 620: sfn[11] = (c <= ' ') ? 1 : 0;
  5450  0122' EE20 F00B          	lfsr	2,11
  5451  0126' 5018'              	movf	create_name@sfn,w,c
  5452  0128' 26D9               	addwf	fsr2l,f,c
  5453  012A' 5019'              	movf	create_name@sfn+1,w,c
  5454  012C' 22DA               	addwfc	fsr2h,f,c
  5455  012E' 0E20               	movlw	32
  5456  0130' 641B'              	cpfsgt	create_name@c,c
  5457  0132' D001               	goto	u2951
  5458  0134' D002               	goto	u2950
  5459  0136'                    u2951:
  5460  0136' 0E01               	movlw	1
  5461  0138' D001               	goto	u2960
  5462  013A'                    u2950:
  5463  013A' 0E00               	movlw	0
  5464  013C'                    u2960:
  5465  013C' 6EDF               	movwf	indf2,c
  5466                           
  5467                           ;pff.c: 622: return FR_OK;
  5468  013E' 0E00               	movlw	0
  5469  0140' 0012               	return	
  5470  0142'                    __end_of_create_name:
  5471                           	opt stack 0
  5472                           tblptru	equ	0xFF8
  5473                           tblptrh	equ	0xFF7
  5474                           tblptrl	equ	0xFF6
  5475                           tablat	equ	0xFF5
  5476                           prodh	equ	0xFF4
  5477                           prodl	equ	0xFF3
  5478                           postinc0	equ	0xFEE
  5479                           wreg	equ	0xFE8
  5480                           indf1	equ	0xFE7
  5481                           postdec1	equ	0xFE5
  5482                           fsr1h	equ	0xFE2
  5483                           fsr1l	equ	0xFE1
  5484                           indf2	equ	0xFDF
  5485                           postinc2	equ	0xFDE
  5486                           postdec2	equ	0xFDD
  5487                           plusw2	equ	0xFDB
  5488                           fsr2h	equ	0xFDA
  5489                           fsr2l	equ	0xFD9
  5490                           status	equ	0xFD8
  5491                           
  5492 ;; *************** function _mem_set *****************
  5493 ;; Defined at:
  5494 ;;		line 324 in file "pff.c"
  5495 ;; Parameters:    Size  Location     Type
  5496 ;;  dst             2    0[COMRAM] PTR void 
  5497 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  5498 ;;  val             2    2[COMRAM] int 
  5499 ;;  cnt             2    4[COMRAM] int 
  5500 ;; Auto vars:     Size  Location     Type
  5501 ;;  d               2    6[COMRAM] PTR unsigned char 
  5502 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  5503 ;; Return value:  Size  Location     Type
  5504 ;;                  1    wreg      void 
  5505 ;; Registers used:
  5506 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5507 ;; Tracked objects:
  5508 ;;		On entry : 0/0
  5509 ;;		On exit  : 0/0
  5510 ;;		Unchanged: 0/0
  5511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5512 ;;      Params:         6       0       0       0       0       0       0       0       0
  5513 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5514 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5515 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5516 ;;Total ram usage:        8 bytes
  5517 ;; Hardware stack levels used:    1
  5518 ;; This function calls:
  5519 ;;		Nothing
  5520 ;; This function is called by:
  5521 ;;		_create_name
  5522 ;; This function uses a non-reentrant model
  5523 ;;
  5524                           
  5525                           	psect	text16
  5526  0000'                    __ptext16:
  5527                           	opt stack 0
  5528  0000'                    _mem_set:
  5529                           	opt stack 27
  5530                           
  5531                           ;pff.c: 325: char *d = (char*)dst;
  5532                           
  5533                           ;incstack = 0
  5534  0000' C000' F006'        	movff	mem_set@dst,mem_set@d
  5535  0004' C001' F007'        	movff	mem_set@dst+1,mem_set@d+1
  5536                           
  5537                           ;pff.c: 326: while (cnt--) *d++ = (char)val;
  5538  0008' D008               	goto	l233
  5539  000A'                    l2813:
  5540  000A' C006' FFD9         	movff	mem_set@d,fsr2l
  5541  000E' C007' FFDA         	movff	mem_set@d+1,fsr2h
  5542  0012' C002' FFDF         	movff	mem_set@val,indf2
  5543  0016' 4A06'              	infsnz	mem_set@d,f,c
  5544  0018' 2A07'              	incf	mem_set@d+1,f,c
  5545  001A'                    l233:
  5546  001A' 0604'              	decf	mem_set@cnt,f,c
  5547  001C' A0D8               	btfss	status,0,c
  5548  001E' 0605'              	decf	mem_set@cnt+1,f,c
  5549  0020' 2804'              	incf	mem_set@cnt,w,c
  5550  0022' E1F3               	bnz	l2813
  5551  0024' 2805'              	incf	mem_set@cnt+1,w,c
  5552  0026' B4D8               	btfsc	status,2,c
  5553  0028' 0012               	return	
  5554  002A' D7EF               	goto	l234
  5555  002C'                    __end_of_mem_set:
  5556                           	opt stack 0
  5557                           tblptru	equ	0xFF8
  5558                           tblptrh	equ	0xFF7
  5559                           tblptrl	equ	0xFF6
  5560                           tablat	equ	0xFF5
  5561                           prodh	equ	0xFF4
  5562                           prodl	equ	0xFF3
  5563                           postinc0	equ	0xFEE
  5564                           wreg	equ	0xFE8
  5565                           indf1	equ	0xFE7
  5566                           postdec1	equ	0xFE5
  5567                           fsr1h	equ	0xFE2
  5568                           fsr1l	equ	0xFE1
  5569                           indf2	equ	0xFDF
  5570                           postinc2	equ	0xFDE
  5571                           postdec2	equ	0xFDD
  5572                           plusw2	equ	0xFDB
  5573                           fsr2h	equ	0xFDA
  5574                           fsr2l	equ	0xFD9
  5575                           status	equ	0xFD8
  5576                           
  5577 ;; *************** function _pf_mount *****************
  5578 ;; Defined at:
  5579 ;;		line 748 in file "pff.c"
  5580 ;; Parameters:    Size  Location     Type
  5581 ;;  fs              2   40[COMRAM] PTR struct .
  5582 ;;		 -> main@fs(42), 
  5583 ;; Auto vars:     Size  Location     Type
  5584 ;;  buf            36    0[BANK0 ] unsigned char [36]
  5585 ;;  fsize           4   48[BANK0 ] unsigned long 
  5586 ;;  bsect           4   44[BANK0 ] unsigned long 
  5587 ;;  mclst           4   40[BANK0 ] unsigned long 
  5588 ;;  tsect           4   36[BANK0 ] unsigned long 
  5589 ;;  fmt             1   52[BANK0 ] unsigned char 
  5590 ;; Return value:  Size  Location     Type
  5591 ;;                  1    wreg      enum E43
  5592 ;; Registers used:
  5593 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, b
      +temp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, bsr, cstack
  5594 ;; Tracked objects:
  5595 ;;		On entry : 0/0
  5596 ;;		On exit  : 0/0
  5597 ;;		Unchanged: 0/0
  5598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5599 ;;      Params:         2       0       0       0       0       0       0       0       0
  5600 ;;      Locals:         0      53       0       0       0       0       0       0       0
  5601 ;;      Temps:         22       0       0       0       0       0       0       0       0
  5602 ;;      Totals:        24      53       0       0       0       0       0       0       0
  5603 ;;Total ram usage:       77 bytes
  5604 ;; Hardware stack levels used:    1
  5605 ;; Hardware stack levels required when called:    4
  5606 ;; This function calls:
  5607 ;;		___lldiv
  5608 ;;		___lmul
  5609 ;;		_check_fs
  5610 ;;		_disk_initialize
  5611 ;;		_disk_readp
  5612 ;; This function is called by:
  5613 ;;		_main
  5614 ;; This function uses a non-reentrant model
  5615 ;;
  5616                           
  5617                           	psect	text17
  5618  0000'                    __ptext17:
  5619                           	opt stack 0
  5620  0000'                    _pf_mount:
  5621                           	opt stack 26
  5622                           
  5623                           ;pff.c: 752: BYTE fmt, buf[36];
  5624                           ;pff.c: 753: DWORD bsect, fsize, tsect, mclst;
  5625                           ;pff.c: 756: FatFs = 0;
  5626                           
  5627                           ;incstack = 0
  5628  0000' 0E00               	movlw	0
  5629  0002' 0100               	movlb	0	; () banked
  5630  0004' 6F00'              	movwf	_FatFs& (0+255),b
  5631  0006' 0E00               	movlw	0
  5632  0008' 6F00'              	movwf	(_FatFs+1)& (0+255),b
  5633                           
  5634                           ; BSR set to: 0
  5635                           ;pff.c: 757: if (disk_initialize() & 0x01)
  5636  000A' EC00' F000'        	call	_disk_initialize	;wreg free
  5637  000E' 6E00'              	movwf	??_pf_mount& (0+255),c
  5638  0010' A02A'              	btfss	??_pf_mount,0,c
  5639  0012' D002               	goto	l380
  5640                           
  5641                           ;pff.c: 758: return FR_NOT_READY;
  5642  0014' 0E02               	movlw	2
  5643  0016' 0012               	return	
  5644  0018'                    l380:
  5645                           
  5646                           ;pff.c: 760: bsect = 0;
  5647  0018' 0E00               	movlw	0
  5648  001A' 0100               	movlb	0	; () banked
  5649  001C' 6F00'              	movwf	pf_mount@bsect& (0+255),b
  5650  001E' 0E00               	movlw	0
  5651  0020' 6F00'              	movwf	(pf_mount@bsect+1)& (0+255),b
  5652  0022' 0E00               	movlw	0
  5653  0024' 6F00'              	movwf	(pf_mount@bsect+2)& (0+255),b
  5654  0026' 0E00               	movlw	0
  5655  0028' 6F00'              	movwf	(pf_mount@bsect+3)& (0+255),b
  5656                           
  5657                           ; BSR set to: 0
  5658                           ;pff.c: 761: fmt = check_fs(buf, bsect);
  5659  002A' 0E00'              	movlw	low pf_mount@buf
  5660  002C' 6E1E'              	movwf	check_fs@buf,c
  5661  002E' 0E00'              	movlw	high pf_mount@buf
  5662  0030' 6E1F'              	movwf	check_fs@buf+1,c
  5663  0032' C02C' F020'        	movff	pf_mount@bsect,check_fs@sect
  5664  0036' C02D' F021'        	movff	pf_mount@bsect+1,check_fs@sect+1
  5665  003A' C02E' F022'        	movff	pf_mount@bsect+2,check_fs@sect+2
  5666  003E' C02F' F023'        	movff	pf_mount@bsect+3,check_fs@sect+3
  5667  0042' EC00' F000'        	call	_check_fs	;wreg free
  5668  0046' 0100               	movlb	0	; () banked
  5669  0048' 6F00'              	movwf	pf_mount@fmt& (0+255),b
  5670                           
  5671                           ; BSR set to: 0
  5672                           ;pff.c: 762: if (fmt == 1) {
  5673  004A' 0500'              	decf	pf_mount@fmt& (0+255),w,b
  5674  004C' A4D8               	btfss	status,2,c
  5675  004E' D068               	goto	l385
  5676                           
  5677                           ; BSR set to: 0
  5678                           ;pff.c: 764: if (disk_readp(buf, bsect, 446, 16)) {
  5679  0050' 0E00'              	movlw	low pf_mount@buf
  5680  0052' 6E08'              	movwf	disk_readp@rd,c
  5681  0054' 0E00'              	movlw	high pf_mount@buf
  5682  0056' 6E09'              	movwf	disk_readp@rd+1,c
  5683  0058' C02C' F00A'        	movff	pf_mount@bsect,disk_readp@sector
  5684  005C' C02D' F00B'        	movff	pf_mount@bsect+1,disk_readp@sector+1
  5685  0060' C02E' F00C'        	movff	pf_mount@bsect+2,disk_readp@sector+2
  5686  0064' C02F' F00D'        	movff	pf_mount@bsect+3,disk_readp@sector+3
  5687  0068' 0E01               	movlw	1
  5688  006A' 6E0F'              	movwf	disk_readp@offset+1,c
  5689  006C' 0EBE               	movlw	190
  5690  006E' 6E0E'              	movwf	disk_readp@offset,c
  5691  0070' 0E00               	movlw	0
  5692  0072' 6E11'              	movwf	disk_readp@count+1,c
  5693  0074' 0E10               	movlw	16
  5694  0076' 6E10'              	movwf	disk_readp@count,c
  5695  0078' EC00' F000'        	call	_disk_readp	;wreg free
  5696  007C' 0900               	iorlw	0
  5697  007E' B4D8               	btfsc	status,2,c
  5698  0080' D002               	goto	l383
  5699                           
  5700                           ;pff.c: 765: fmt = 3;
  5701  0082' 0E03               	movlw	3
  5702  0084' D04B               	goto	L4
  5703  0086'                    l383:
  5704                           
  5705                           ;pff.c: 767: if (buf[4]) {
  5706                           
  5707                           ; BSR set to: 0
  5708  0086' 0100               	movlb	0	; () banked
  5709  0088' 5100'              	movf	(pf_mount@buf+4)& (0+255),w,b
  5710  008A' B4D8               	btfsc	status,2,c
  5711  008C' D049               	goto	l385
  5712                           
  5713                           ; BSR set to: 0
  5714                           ;pff.c: 768: bsect = (DWORD)(((DWORD)*((BYTE*)(&buf[8])+3)<<24)|((DWORD)*((BYTE*)(&buf[8
      +                          ])+2)<<16)|((WORD)*((BYTE*)(&buf[8])+1)<<8)|*(BYTE*)(&buf[8]));
  5715  008E' 5100'              	movf	(pf_mount@buf+9)& (0+255),w,b
  5716  0090' 6E00'              	movwf	(??_pf_mount+1)& (0+255),c
  5717  0092' 6A00'              	clrf	??_pf_mount& (0+255),c
  5718  0094' C00A' F02C'        	movff	pf_mount@buf+10,??_pf_mount+2
  5719  0098' 6A00'              	clrf	(??_pf_mount+3)& (0+255),c
  5720  009A' 6A00'              	clrf	(??_pf_mount+4)& (0+255),c
  5721  009C' 6A00'              	clrf	(??_pf_mount+5)& (0+255),c
  5722  009E' C02D' F02F'        	movff	??_pf_mount+3,??_pf_mount+5
  5723  00A2' C02C' F02E'        	movff	??_pf_mount+2,??_pf_mount+4
  5724  00A6' 6A2D'              	clrf	??_pf_mount+3,c
  5725  00A8' 6A2C'              	clrf	??_pf_mount+2,c
  5726  00AA' C00B' F030'        	movff	pf_mount@buf+11,??_pf_mount+6
  5727  00AE' 6A00'              	clrf	(??_pf_mount+7)& (0+255),c
  5728  00B0' 6A00'              	clrf	(??_pf_mount+8)& (0+255),c
  5729  00B2' 6A00'              	clrf	(??_pf_mount+9)& (0+255),c
  5730  00B4' C030' F033'        	movff	??_pf_mount+6,??_pf_mount+9
  5731  00B8' 6A32'              	clrf	??_pf_mount+8,c
  5732  00BA' 6A31'              	clrf	??_pf_mount+7,c
  5733  00BC' 6A30'              	clrf	??_pf_mount+6,c
  5734  00BE' 502C'              	movf	??_pf_mount+2,w,c
  5735  00C0' 1030'              	iorwf	??_pf_mount+6,w,c
  5736  00C2' 6E00'              	movwf	(??_pf_mount+10)& (0+255),c
  5737  00C4' 502D'              	movf	??_pf_mount+3,w,c
  5738  00C6' 1031'              	iorwf	??_pf_mount+7,w,c
  5739  00C8' 6E00'              	movwf	(??_pf_mount+11)& (0+255),c
  5740  00CA' 502E'              	movf	??_pf_mount+4,w,c
  5741  00CC' 1032'              	iorwf	??_pf_mount+8,w,c
  5742  00CE' 6E00'              	movwf	(??_pf_mount+12)& (0+255),c
  5743  00D0' 502F'              	movf	??_pf_mount+5,w,c
  5744  00D2' 1033'              	iorwf	??_pf_mount+9,w,c
  5745  00D4' 6E00'              	movwf	(??_pf_mount+13)& (0+255),c
  5746  00D6' 502A'              	movf	??_pf_mount,w,c
  5747  00D8' 1034'              	iorwf	??_pf_mount+10,w,c
  5748  00DA' 6E00'              	movwf	(??_pf_mount+14)& (0+255),c
  5749  00DC' 502B'              	movf	??_pf_mount+1,w,c
  5750  00DE' 1035'              	iorwf	??_pf_mount+11,w,c
  5751  00E0' 6E00'              	movwf	(??_pf_mount+15)& (0+255),c
  5752  00E2' 0E00               	movlw	0
  5753  00E4' 1036'              	iorwf	??_pf_mount+12,w,c
  5754  00E6' 6E00'              	movwf	(??_pf_mount+16)& (0+255),c
  5755  00E8' 0E00               	movlw	0
  5756  00EA' 1037'              	iorwf	??_pf_mount+13,w,c
  5757  00EC' 6E00'              	movwf	(??_pf_mount+17)& (0+255),c
  5758  00EE' 5100'              	movf	(pf_mount@buf+8)& (0+255),w,b
  5759  00F0' 1038'              	iorwf	??_pf_mount+14,w,c
  5760  00F2' 6F00'              	movwf	pf_mount@bsect& (0+255),b
  5761  00F4' 5039'              	movf	??_pf_mount+15,w,c
  5762  00F6' 6F00'              	movwf	(pf_mount@bsect+1)& (0+255),b
  5763  00F8' 503A'              	movf	??_pf_mount+16,w,c
  5764  00FA' 6F00'              	movwf	(pf_mount@bsect+2)& (0+255),b
  5765  00FC' 503B'              	movf	??_pf_mount+17,w,c
  5766  00FE' 6F00'              	movwf	(pf_mount@bsect+3)& (0+255),b
  5767                           
  5768                           ; BSR set to: 0
  5769                           ;pff.c: 769: fmt = check_fs(buf, bsect);
  5770  0100' 0E00'              	movlw	low pf_mount@buf
  5771  0102' 6E1E'              	movwf	check_fs@buf,c
  5772  0104' 0E00'              	movlw	high pf_mount@buf
  5773  0106' 6E1F'              	movwf	check_fs@buf+1,c
  5774  0108' C02C' F020'        	movff	pf_mount@bsect,check_fs@sect
  5775  010C' C02D' F021'        	movff	pf_mount@bsect+1,check_fs@sect+1
  5776  0110' C02E' F022'        	movff	pf_mount@bsect+2,check_fs@sect+2
  5777  0114' C02F' F023'        	movff	pf_mount@bsect+3,check_fs@sect+3
  5778  0118' EC00' F000'        	call	_check_fs	;wreg free
  5779  011C'                    L4:
  5780  011C' 0100               	movlb	0	; () banked
  5781  011E' 6F00'              	movwf	pf_mount@fmt& (0+255),b
  5782  0120'                    l385:
  5783                           
  5784                           ; BSR set to: 0
  5785                           ;pff.c: 770: }
  5786                           ;pff.c: 771: }
  5787                           ;pff.c: 772: }
  5788                           ;pff.c: 773: if (fmt == 3) return FR_DISK_ERR;
  5789                           
  5790                           ; BSR set to: 0
  5791                           
  5792                           ; BSR set to: 0
  5793                           
  5794                           ; BSR set to: 0
  5795  0120' 0E03               	movlw	3
  5796  0122' 1900'              	xorwf	pf_mount@fmt& (0+255),w,b
  5797  0124' A4D8               	btfss	status,2,c
  5798  0126' D002               	goto	l386
  5799                           
  5800                           ; BSR set to: 0
  5801  0128' 0E01               	movlw	1
  5802                           
  5803                           ; BSR set to: 0
  5804  012A' 0012               	return	
  5805  012C'                    l386:
  5806                           
  5807                           ; BSR set to: 0
  5808                           ;pff.c: 774: if (fmt) return FR_NO_FILESYSTEM;
  5809                           
  5810                           ; BSR set to: 0
  5811  012C' 5100'              	movf	pf_mount@fmt& (0+255),w,b
  5812  012E' B4D8               	btfsc	status,2,c
  5813  0130' D002               	goto	l387
  5814                           
  5815                           ; BSR set to: 0
  5816  0132' 0E06               	movlw	6
  5817                           
  5818                           ; BSR set to: 0
  5819  0134' 0012               	return	
  5820  0136'                    l387:
  5821                           
  5822                           ; BSR set to: 0
  5823                           ;pff.c: 777: if (disk_readp(buf, bsect, 13, sizeof (buf))) return FR_DISK_ERR;
  5824                           
  5825                           ; BSR set to: 0
  5826  0136' 0E00'              	movlw	low pf_mount@buf
  5827  0138' 6E08'              	movwf	disk_readp@rd,c
  5828  013A' 0E00'              	movlw	high pf_mount@buf
  5829  013C' 6E09'              	movwf	disk_readp@rd+1,c
  5830  013E' C02C' F00A'        	movff	pf_mount@bsect,disk_readp@sector
  5831  0142' C02D' F00B'        	movff	pf_mount@bsect+1,disk_readp@sector+1
  5832  0146' C02E' F00C'        	movff	pf_mount@bsect+2,disk_readp@sector+2
  5833  014A' C02F' F00D'        	movff	pf_mount@bsect+3,disk_readp@sector+3
  5834  014E' 0E00               	movlw	0
  5835  0150' 6E0F'              	movwf	disk_readp@offset+1,c
  5836  0152' 0E0D               	movlw	13
  5837  0154' 6E0E'              	movwf	disk_readp@offset,c
  5838  0156' 0E00               	movlw	0
  5839  0158' 6E11'              	movwf	disk_readp@count+1,c
  5840  015A' 0E24               	movlw	36
  5841  015C' 6E10'              	movwf	disk_readp@count,c
  5842  015E' EC00' F000'        	call	_disk_readp	;wreg free
  5843  0162' 0900               	iorlw	0
  5844  0164' B4D8               	btfsc	status,2,c
  5845  0166' D002               	goto	l388
  5846  0168' 0E01               	movlw	1
  5847  016A' 0012               	return	
  5848  016C'                    l388:
  5849                           
  5850                           ;pff.c: 779: fsize = (WORD)(((WORD)*((BYTE*)(buf+22-13)+1)<<8)|(WORD)*(BYTE*)(buf+22-13)
      +                          );
  5851  016C' 0100               	movlb	0	; () banked
  5852  016E' 5100'              	movf	(pf_mount@buf+9)& (0+255),w,b
  5853  0170' C00A' F02A'        	movff	pf_mount@buf+10,??_pf_mount
  5854  0174' 6A00'              	clrf	(??_pf_mount+1)& (0+255),c
  5855  0176' C02A' F02B'        	movff	??_pf_mount,??_pf_mount+1
  5856  017A' 6A2A'              	clrf	??_pf_mount,c
  5857  017C' 122A'              	iorwf	??_pf_mount,f,c
  5858  017E' 0E00               	movlw	0
  5859  0180' 122B'              	iorwf	??_pf_mount+1,f,c
  5860  0182' C02A' F030'        	movff	??_pf_mount,pf_mount@fsize
  5861  0186' C02B' F031'        	movff	??_pf_mount+1,pf_mount@fsize+1
  5862  018A' 6B00'              	clrf	(pf_mount@fsize+2)& (0+255),b
  5863  018C' 6B00'              	clrf	(pf_mount@fsize+3)& (0+255),b
  5864                           
  5865                           ;pff.c: 780: if (!fsize) fsize = (DWORD)(((DWORD)*((BYTE*)(buf+36-13)+3)<<24)|((DWORD)*(
      +                          (BYTE*)(buf+36-13)+2)<<16)|((WORD)*((BYTE*)(buf+36-13)+1)<<8)|*(BYTE*)(buf+36-13));
  5866  018E' 5100'              	movf	pf_mount@fsize& (0+255),w,b
  5867  0190' 1100'              	iorwf	(pf_mount@fsize+1)& (0+255),w,b
  5868  0192' 1100'              	iorwf	(pf_mount@fsize+2)& (0+255),w,b
  5869  0194' 1100'              	iorwf	(pf_mount@fsize+3)& (0+255),w,b
  5870  0196' A4D8               	btfss	status,2,c
  5871  0198' D039               	goto	l389
  5872                           
  5873                           ; BSR set to: 0
  5874  019A' 5100'              	movf	(pf_mount@buf+24)& (0+255),w,b
  5875  019C' 6E00'              	movwf	(??_pf_mount+1)& (0+255),c
  5876  019E' 6A00'              	clrf	??_pf_mount& (0+255),c
  5877  01A0' C019' F02C'        	movff	pf_mount@buf+25,??_pf_mount+2
  5878  01A4' 6A00'              	clrf	(??_pf_mount+3)& (0+255),c
  5879  01A6' 6A00'              	clrf	(??_pf_mount+4)& (0+255),c
  5880  01A8' 6A00'              	clrf	(??_pf_mount+5)& (0+255),c
  5881  01AA' C02D' F02F'        	movff	??_pf_mount+3,??_pf_mount+5
  5882  01AE' C02C' F02E'        	movff	??_pf_mount+2,??_pf_mount+4
  5883  01B2' 6A2D'              	clrf	??_pf_mount+3,c
  5884  01B4' 6A2C'              	clrf	??_pf_mount+2,c
  5885  01B6' C01A' F030'        	movff	pf_mount@buf+26,??_pf_mount+6
  5886  01BA' 6A00'              	clrf	(??_pf_mount+7)& (0+255),c
  5887  01BC' 6A00'              	clrf	(??_pf_mount+8)& (0+255),c
  5888  01BE' 6A00'              	clrf	(??_pf_mount+9)& (0+255),c
  5889  01C0' C030' F033'        	movff	??_pf_mount+6,??_pf_mount+9
  5890  01C4' 6A32'              	clrf	??_pf_mount+8,c
  5891  01C6' 6A31'              	clrf	??_pf_mount+7,c
  5892  01C8' 6A30'              	clrf	??_pf_mount+6,c
  5893  01CA' 502C'              	movf	??_pf_mount+2,w,c
  5894  01CC' 1030'              	iorwf	??_pf_mount+6,w,c
  5895  01CE' 6E00'              	movwf	(??_pf_mount+10)& (0+255),c
  5896  01D0' 502D'              	movf	??_pf_mount+3,w,c
  5897  01D2' 1031'              	iorwf	??_pf_mount+7,w,c
  5898  01D4' 6E00'              	movwf	(??_pf_mount+11)& (0+255),c
  5899  01D6' 502E'              	movf	??_pf_mount+4,w,c
  5900  01D8' 1032'              	iorwf	??_pf_mount+8,w,c
  5901  01DA' 6E00'              	movwf	(??_pf_mount+12)& (0+255),c
  5902  01DC' 502F'              	movf	??_pf_mount+5,w,c
  5903  01DE' 1033'              	iorwf	??_pf_mount+9,w,c
  5904  01E0' 6E00'              	movwf	(??_pf_mount+13)& (0+255),c
  5905  01E2' 502A'              	movf	??_pf_mount,w,c
  5906  01E4' 1034'              	iorwf	??_pf_mount+10,w,c
  5907  01E6' 6E00'              	movwf	(??_pf_mount+14)& (0+255),c
  5908  01E8' 502B'              	movf	??_pf_mount+1,w,c
  5909  01EA' 1035'              	iorwf	??_pf_mount+11,w,c
  5910  01EC' 6E00'              	movwf	(??_pf_mount+15)& (0+255),c
  5911  01EE' 0E00               	movlw	0
  5912  01F0' 1036'              	iorwf	??_pf_mount+12,w,c
  5913  01F2' 6E00'              	movwf	(??_pf_mount+16)& (0+255),c
  5914  01F4' 0E00               	movlw	0
  5915  01F6' 1037'              	iorwf	??_pf_mount+13,w,c
  5916  01F8' 6E00'              	movwf	(??_pf_mount+17)& (0+255),c
  5917  01FA' 5100'              	movf	(pf_mount@buf+23)& (0+255),w,b
  5918  01FC' 1038'              	iorwf	??_pf_mount+14,w,c
  5919  01FE' 6F00'              	movwf	pf_mount@fsize& (0+255),b
  5920  0200' 5039'              	movf	??_pf_mount+15,w,c
  5921  0202' 6F00'              	movwf	(pf_mount@fsize+1)& (0+255),b
  5922  0204' 503A'              	movf	??_pf_mount+16,w,c
  5923  0206' 6F00'              	movwf	(pf_mount@fsize+2)& (0+255),b
  5924  0208' 503B'              	movf	??_pf_mount+17,w,c
  5925  020A' 6F00'              	movwf	(pf_mount@fsize+3)& (0+255),b
  5926  020C'                    l389:
  5927                           
  5928                           ; BSR set to: 0
  5929                           ;pff.c: 782: fsize *= buf[16-13];
  5930                           
  5931                           ; BSR set to: 0
  5932  020C' C030' F000'        	movff	pf_mount@fsize,___lmul@multiplier
  5933  0210' C031' F001'        	movff	pf_mount@fsize+1,___lmul@multiplier+1
  5934  0214' C032' F002'        	movff	pf_mount@fsize+2,___lmul@multiplier+2
  5935  0218' C033' F003'        	movff	pf_mount@fsize+3,___lmul@multiplier+3
  5936  021C' 5100'              	movf	(pf_mount@buf+3)& (0+255),w,b
  5937  021E' 6E04'              	movwf	___lmul@multiplicand,c
  5938  0220' 6A05'              	clrf	___lmul@multiplicand+1,c
  5939  0222' 6A06'              	clrf	___lmul@multiplicand+2,c
  5940  0224' 6A07'              	clrf	___lmul@multiplicand+3,c
  5941  0226' EC00' F000'        	call	___lmul	;wreg free
  5942  022A' C000' F030'        	movff	?___lmul,pf_mount@fsize
  5943  022E' C001' F031'        	movff	?___lmul+1,pf_mount@fsize+1
  5944  0232' C002' F032'        	movff	?___lmul+2,pf_mount@fsize+2
  5945  0236' C003' F033'        	movff	?___lmul+3,pf_mount@fsize+3
  5946                           
  5947                           ;pff.c: 783: fs->fatbase = bsect + (WORD)(((WORD)*((BYTE*)(buf+14-13)+1)<<8)|(WORD)*(BYT
      +                          E*)(buf+14-13));
  5948  023A' 0100               	movlb	0	; () banked
  5949  023C' 5100'              	movf	(pf_mount@buf+1)& (0+255),w,b
  5950  023E' C002' F02A'        	movff	pf_mount@buf+2,??_pf_mount
  5951  0242' 6A00'              	clrf	(??_pf_mount+1)& (0+255),c
  5952  0244' C02A' F02B'        	movff	??_pf_mount,??_pf_mount+1
  5953  0248' 6A2A'              	clrf	??_pf_mount,c
  5954  024A' 122A'              	iorwf	??_pf_mount,f,c
  5955  024C' 0E00               	movlw	0
  5956  024E' 122B'              	iorwf	??_pf_mount+1,f,c
  5957  0250' 502A'              	movf	??_pf_mount,w,c
  5958  0252' 2500'              	addwf	pf_mount@bsect& (0+255),w,b
  5959  0254' 6E00'              	movwf	(??_pf_mount+2)& (0+255),c
  5960  0256' 502B'              	movf	??_pf_mount+1,w,c
  5961  0258' 2100'              	addwfc	(pf_mount@bsect+1)& (0+255),w,b
  5962  025A' 6E00'              	movwf	(??_pf_mount+3)& (0+255),c
  5963  025C' 0E00               	movlw	0
  5964  025E' 2100'              	addwfc	(pf_mount@bsect+2)& (0+255),w,b
  5965  0260' 6E00'              	movwf	(??_pf_mount+4)& (0+255),c
  5966  0262' 0E00               	movlw	0
  5967  0264' 2100'              	addwfc	(pf_mount@bsect+3)& (0+255),w,b
  5968  0266' 6E00'              	movwf	(??_pf_mount+5)& (0+255),c
  5969  0268' EE20 F00A          	lfsr	2,10
  5970  026C' 5028'              	movf	pf_mount@fs,w,c
  5971  026E' 26D9               	addwf	fsr2l,f,c
  5972  0270' 5029'              	movf	pf_mount@fs+1,w,c
  5973  0272' 22DA               	addwfc	fsr2h,f,c
  5974  0274' C02C' FFDE         	movff	??_pf_mount+2,postinc2
  5975  0278' C02D' FFDE         	movff	??_pf_mount+3,postinc2
  5976  027C' C02E' FFDE         	movff	??_pf_mount+4,postinc2
  5977  0280' C02F' FFDE         	movff	??_pf_mount+5,postinc2
  5978                           
  5979                           ; BSR set to: 0
  5980                           ;pff.c: 784: fs->csize = buf[13-13];
  5981  0284' EE20 F002          	lfsr	2,2
  5982  0288' 5028'              	movf	pf_mount@fs,w,c
  5983  028A' 26D9               	addwf	fsr2l,f,c
  5984  028C' 5029'              	movf	pf_mount@fs+1,w,c
  5985  028E' 22DA               	addwfc	fsr2h,f,c
  5986  0290' C000' FFDF         	movff	pf_mount@buf,indf2
  5987                           
  5988                           ; BSR set to: 0
  5989                           ;pff.c: 785: fs->n_rootdir = (WORD)(((WORD)*((BYTE*)(buf+17-13)+1)<<8)|(WORD)*(BYTE*)(bu
      +                          f+17-13));
  5990  0294' 5100'              	movf	(pf_mount@buf+4)& (0+255),w,b
  5991  0296' C005' F02A'        	movff	pf_mount@buf+5,??_pf_mount
  5992  029A' 6A00'              	clrf	(??_pf_mount+1)& (0+255),c
  5993  029C' C02A' F02B'        	movff	??_pf_mount,??_pf_mount+1
  5994  02A0' 6A2A'              	clrf	??_pf_mount,c
  5995  02A2' 122A'              	iorwf	??_pf_mount,f,c
  5996  02A4' 0E00               	movlw	0
  5997  02A6' 122B'              	iorwf	??_pf_mount+1,f,c
  5998  02A8' EE20 F004          	lfsr	2,4
  5999  02AC' 5028'              	movf	pf_mount@fs,w,c
  6000  02AE' 26D9               	addwf	fsr2l,f,c
  6001  02B0' 5029'              	movf	pf_mount@fs+1,w,c
  6002  02B2' 22DA               	addwfc	fsr2h,f,c
  6003  02B4' C02A' FFDE         	movff	??_pf_mount,postinc2
  6004  02B8' C02B' FFDD         	movff	??_pf_mount+1,postdec2
  6005                           
  6006                           ; BSR set to: 0
  6007                           ;pff.c: 786: tsect = (WORD)(((WORD)*((BYTE*)(buf+19-13)+1)<<8)|(WORD)*(BYTE*)(buf+19-13)
      +                          );
  6008  02BC' 5100'              	movf	(pf_mount@buf+6)& (0+255),w,b
  6009  02BE' C007' F02A'        	movff	pf_mount@buf+7,??_pf_mount
  6010  02C2' 6A00'              	clrf	(??_pf_mount+1)& (0+255),c
  6011  02C4' C02A' F02B'        	movff	??_pf_mount,??_pf_mount+1
  6012  02C8' 6A2A'              	clrf	??_pf_mount,c
  6013  02CA' 122A'              	iorwf	??_pf_mount,f,c
  6014  02CC' 0E00               	movlw	0
  6015  02CE' 122B'              	iorwf	??_pf_mount+1,f,c
  6016  02D0' C02A' F024'        	movff	??_pf_mount,pf_mount@tsect
  6017  02D4' C02B' F025'        	movff	??_pf_mount+1,pf_mount@tsect+1
  6018  02D8' 6B00'              	clrf	(pf_mount@tsect+2)& (0+255),b
  6019  02DA' 6B00'              	clrf	(pf_mount@tsect+3)& (0+255),b
  6020                           
  6021                           ; BSR set to: 0
  6022                           ;pff.c: 787: if (!tsect) tsect = (DWORD)(((DWORD)*((BYTE*)(buf+32-13)+3)<<24)|((DWORD)*(
      +                          (BYTE*)(buf+32-13)+2)<<16)|((WORD)*((BYTE*)(buf+32-13)+1)<<8)|*(BYTE*)(buf+32-13));
  6023  02DC' 5100'              	movf	pf_mount@tsect& (0+255),w,b
  6024  02DE' 1100'              	iorwf	(pf_mount@tsect+1)& (0+255),w,b
  6025  02E0' 1100'              	iorwf	(pf_mount@tsect+2)& (0+255),w,b
  6026  02E2' 1100'              	iorwf	(pf_mount@tsect+3)& (0+255),w,b
  6027  02E4' A4D8               	btfss	status,2,c
  6028  02E6' D039               	goto	l390
  6029                           
  6030                           ; BSR set to: 0
  6031  02E8' 5100'              	movf	(pf_mount@buf+20)& (0+255),w,b
  6032  02EA' 6E00'              	movwf	(??_pf_mount+1)& (0+255),c
  6033  02EC' 6A00'              	clrf	??_pf_mount& (0+255),c
  6034  02EE' C015' F02C'        	movff	pf_mount@buf+21,??_pf_mount+2
  6035  02F2' 6A00'              	clrf	(??_pf_mount+3)& (0+255),c
  6036  02F4' 6A00'              	clrf	(??_pf_mount+4)& (0+255),c
  6037  02F6' 6A00'              	clrf	(??_pf_mount+5)& (0+255),c
  6038  02F8' C02D' F02F'        	movff	??_pf_mount+3,??_pf_mount+5
  6039  02FC' C02C' F02E'        	movff	??_pf_mount+2,??_pf_mount+4
  6040  0300' 6A2D'              	clrf	??_pf_mount+3,c
  6041  0302' 6A2C'              	clrf	??_pf_mount+2,c
  6042  0304' C016' F030'        	movff	pf_mount@buf+22,??_pf_mount+6
  6043  0308' 6A00'              	clrf	(??_pf_mount+7)& (0+255),c
  6044  030A' 6A00'              	clrf	(??_pf_mount+8)& (0+255),c
  6045  030C' 6A00'              	clrf	(??_pf_mount+9)& (0+255),c
  6046  030E' C030' F033'        	movff	??_pf_mount+6,??_pf_mount+9
  6047  0312' 6A32'              	clrf	??_pf_mount+8,c
  6048  0314' 6A31'              	clrf	??_pf_mount+7,c
  6049  0316' 6A30'              	clrf	??_pf_mount+6,c
  6050  0318' 502C'              	movf	??_pf_mount+2,w,c
  6051  031A' 1030'              	iorwf	??_pf_mount+6,w,c
  6052  031C' 6E00'              	movwf	(??_pf_mount+10)& (0+255),c
  6053  031E' 502D'              	movf	??_pf_mount+3,w,c
  6054  0320' 1031'              	iorwf	??_pf_mount+7,w,c
  6055  0322' 6E00'              	movwf	(??_pf_mount+11)& (0+255),c
  6056  0324' 502E'              	movf	??_pf_mount+4,w,c
  6057  0326' 1032'              	iorwf	??_pf_mount+8,w,c
  6058  0328' 6E00'              	movwf	(??_pf_mount+12)& (0+255),c
  6059  032A' 502F'              	movf	??_pf_mount+5,w,c
  6060  032C' 1033'              	iorwf	??_pf_mount+9,w,c
  6061  032E' 6E00'              	movwf	(??_pf_mount+13)& (0+255),c
  6062  0330' 502A'              	movf	??_pf_mount,w,c
  6063  0332' 1034'              	iorwf	??_pf_mount+10,w,c
  6064  0334' 6E00'              	movwf	(??_pf_mount+14)& (0+255),c
  6065  0336' 502B'              	movf	??_pf_mount+1,w,c
  6066  0338' 1035'              	iorwf	??_pf_mount+11,w,c
  6067  033A' 6E00'              	movwf	(??_pf_mount+15)& (0+255),c
  6068  033C' 0E00               	movlw	0
  6069  033E' 1036'              	iorwf	??_pf_mount+12,w,c
  6070  0340' 6E00'              	movwf	(??_pf_mount+16)& (0+255),c
  6071  0342' 0E00               	movlw	0
  6072  0344' 1037'              	iorwf	??_pf_mount+13,w,c
  6073  0346' 6E00'              	movwf	(??_pf_mount+17)& (0+255),c
  6074  0348' 5100'              	movf	(pf_mount@buf+19)& (0+255),w,b
  6075  034A' 1038'              	iorwf	??_pf_mount+14,w,c
  6076  034C' 6F00'              	movwf	pf_mount@tsect& (0+255),b
  6077  034E' 5039'              	movf	??_pf_mount+15,w,c
  6078  0350' 6F00'              	movwf	(pf_mount@tsect+1)& (0+255),b
  6079  0352' 503A'              	movf	??_pf_mount+16,w,c
  6080  0354' 6F00'              	movwf	(pf_mount@tsect+2)& (0+255),b
  6081  0356' 503B'              	movf	??_pf_mount+17,w,c
  6082  0358' 6F00'              	movwf	(pf_mount@tsect+3)& (0+255),b
  6083  035A'                    l390:
  6084                           
  6085                           ; BSR set to: 0
  6086                           ;pff.c: 788: mclst = (tsect
  6087                           ;pff.c: 789: - (WORD)(((WORD)*((BYTE*)(buf+14-13)+1)<<8)|(WORD)*(BYTE*)(buf+14-13)) - fs
      +                          ize - fs->n_rootdir / 16
  6088                           ;pff.c: 790: ) / fs->csize + 2;
  6089                           
  6090                           ; BSR set to: 0
  6091  035A' EE20 F004          	lfsr	2,4
  6092  035E' 5028'              	movf	pf_mount@fs,w,c
  6093  0360' 26D9               	addwf	fsr2l,f,c
  6094  0362' 5029'              	movf	pf_mount@fs+1,w,c
  6095  0364' 22DA               	addwfc	fsr2h,f,c
  6096  0366' CFDE F02A'         	movff	postinc2,??_pf_mount
  6097  036A' CFDD F02B'         	movff	postdec2,??_pf_mount+1
  6098  036E' 0E04               	movlw	4
  6099  0370' 6E00'              	movwf	(??_pf_mount+2)& (0+255),c
  6100  0372'                    u3375:
  6101  0372' 90D8               	bcf	status,0,c
  6102  0374' 322B'              	rrcf	??_pf_mount+1,f,c
  6103  0376' 322A'              	rrcf	??_pf_mount,f,c
  6104  0378' 2E00'              	decfsz	(??_pf_mount+2)& (0+255),f,c
  6105  037A' D7FB               	goto	u3375
  6106  037C' 5100'              	movf	(pf_mount@buf+1)& (0+255),w,b
  6107  037E' C002' F02D'        	movff	pf_mount@buf+2,??_pf_mount+3
  6108  0382' 6A00'              	clrf	(??_pf_mount+4)& (0+255),c
  6109  0384' C02D' F02E'        	movff	??_pf_mount+3,??_pf_mount+4
  6110  0388' 6A2D'              	clrf	??_pf_mount+3,c
  6111  038A' 122D'              	iorwf	??_pf_mount+3,f,c
  6112  038C' 0E00               	movlw	0
  6113  038E' 122E'              	iorwf	??_pf_mount+4,f,c
  6114  0390' 502D'              	movf	??_pf_mount+3,w,c
  6115  0392' 242A'              	addwf	??_pf_mount,w,c
  6116  0394' 6E00'              	movwf	(??_pf_mount+5)& (0+255),c
  6117  0396' 502E'              	movf	??_pf_mount+4,w,c
  6118  0398' 202B'              	addwfc	??_pf_mount+1,w,c
  6119  039A' 6E00'              	movwf	(??_pf_mount+6)& (0+255),c
  6120  039C' 6A00'              	clrf	(??_pf_mount+7)& (0+255),c
  6121  039E' B0D8               	btfsc	status,0,c
  6122  03A0' 2A00'              	incf	(??_pf_mount+7)& (0+255),f,c
  6123  03A2' 6A00'              	clrf	(??_pf_mount+8)& (0+255),c
  6124  03A4' 5100'              	movf	pf_mount@fsize& (0+255),w,b
  6125  03A6' 242F'              	addwf	??_pf_mount+5,w,c
  6126  03A8' 6E00'              	movwf	(??_pf_mount+9)& (0+255),c
  6127  03AA' 5100'              	movf	(pf_mount@fsize+1)& (0+255),w,b
  6128  03AC' 2030'              	addwfc	??_pf_mount+6,w,c
  6129  03AE' 6E00'              	movwf	(??_pf_mount+10)& (0+255),c
  6130  03B0' 5100'              	movf	(pf_mount@fsize+2)& (0+255),w,b
  6131  03B2' 2031'              	addwfc	??_pf_mount+7,w,c
  6132  03B4' 6E00'              	movwf	(??_pf_mount+11)& (0+255),c
  6133  03B6' 5100'              	movf	(pf_mount@fsize+3)& (0+255),w,b
  6134  03B8' 2032'              	addwfc	??_pf_mount+8,w,c
  6135  03BA' 6E00'              	movwf	(??_pf_mount+12)& (0+255),c
  6136  03BC' 1E33'              	comf	??_pf_mount+9,f,c
  6137  03BE' 1E34'              	comf	??_pf_mount+10,f,c
  6138  03C0' 1E35'              	comf	??_pf_mount+11,f,c
  6139  03C2' 1E36'              	comf	??_pf_mount+12,f,c
  6140  03C4' 2A33'              	incf	??_pf_mount+9,f,c
  6141  03C6' 0E00               	movlw	0
  6142  03C8' 2234'              	addwfc	??_pf_mount+10,f,c
  6143  03CA' 2235'              	addwfc	??_pf_mount+11,f,c
  6144  03CC' 2236'              	addwfc	??_pf_mount+12,f,c
  6145  03CE' 5100'              	movf	pf_mount@tsect& (0+255),w,b
  6146  03D0' 2433'              	addwf	??_pf_mount+9,w,c
  6147  03D2' 6E00'              	movwf	___lldiv@dividend,c
  6148  03D4' 5100'              	movf	(pf_mount@tsect+1)& (0+255),w,b
  6149  03D6' 2034'              	addwfc	??_pf_mount+10,w,c
  6150  03D8' 6E01'              	movwf	___lldiv@dividend+1,c
  6151  03DA' 5100'              	movf	(pf_mount@tsect+2)& (0+255),w,b
  6152  03DC' 2035'              	addwfc	??_pf_mount+11,w,c
  6153  03DE' 6E02'              	movwf	___lldiv@dividend+2,c
  6154  03E0' 5100'              	movf	(pf_mount@tsect+3)& (0+255),w,b
  6155  03E2' 2036'              	addwfc	??_pf_mount+12,w,c
  6156  03E4' 6E03'              	movwf	___lldiv@dividend+3,c
  6157  03E6' EE20 F002          	lfsr	2,2
  6158  03EA' 5028'              	movf	pf_mount@fs,w,c
  6159  03EC' 26D9               	addwf	fsr2l,f,c
  6160  03EE' 5029'              	movf	pf_mount@fs+1,w,c
  6161  03F0' 22DA               	addwfc	fsr2h,f,c
  6162  03F2' 50DF               	movf	indf2,w,c
  6163  03F4' 6E00'              	movwf	(??_pf_mount+13)& (0+255),c
  6164  03F6' 5037'              	movf	??_pf_mount+13,w,c
  6165  03F8' 6E04'              	movwf	___lldiv@divisor,c
  6166  03FA' 6A05'              	clrf	___lldiv@divisor+1,c
  6167  03FC' 6A06'              	clrf	___lldiv@divisor+2,c
  6168  03FE' 6A07'              	clrf	___lldiv@divisor+3,c
  6169  0400' EC00' F000'        	call	___lldiv	;wreg free
  6170  0404' 0E02               	movlw	2
  6171  0406' 2400'              	addwf	?___lldiv,w,c
  6172  0408' 0100               	movlb	0	; () banked
  6173  040A' 6F00'              	movwf	pf_mount@mclst& (0+255),b
  6174  040C' 0E00               	movlw	0
  6175  040E' 2001'              	addwfc	?___lldiv+1,w,c
  6176  0410' 6F00'              	movwf	(pf_mount@mclst+1)& (0+255),b
  6177  0412' 0E00               	movlw	0
  6178  0414' 2002'              	addwfc	?___lldiv+2,w,c
  6179  0416' 6F00'              	movwf	(pf_mount@mclst+2)& (0+255),b
  6180  0418' 0E00               	movlw	0
  6181  041A' 2003'              	addwfc	?___lldiv+3,w,c
  6182  041C' 6F00'              	movwf	(pf_mount@mclst+3)& (0+255),b
  6183                           
  6184                           ; BSR set to: 0
  6185                           ;pff.c: 791: fs->n_fatent = (DWORD)mclst;
  6186  041E' EE20 F006          	lfsr	2,6
  6187  0422' 5028'              	movf	pf_mount@fs,w,c
  6188  0424' 26D9               	addwf	fsr2l,f,c
  6189  0426' 5029'              	movf	pf_mount@fs+1,w,c
  6190  0428' 22DA               	addwfc	fsr2h,f,c
  6191  042A' C028' FFDE         	movff	pf_mount@mclst,postinc2
  6192  042E' C029' FFDE         	movff	pf_mount@mclst+1,postinc2
  6193  0432' C02A' FFDE         	movff	pf_mount@mclst+2,postinc2
  6194  0436' C02B' FFDE         	movff	pf_mount@mclst+3,postinc2
  6195                           
  6196                           ; BSR set to: 0
  6197                           ;pff.c: 794: if (1 && mclst < 0xFF7)
  6198  043A' 0E00               	movlw	0
  6199  043C' 6F00'              	movwf	pf_mount@fmt& (0+255),b
  6200                           
  6201                           ; BSR set to: 0
  6202  043E' 5100'              	movf	(pf_mount@mclst+3)& (0+255),w,b
  6203  0440' 1100'              	iorwf	(pf_mount@mclst+2)& (0+255),w,b
  6204  0442' E108               	bnz	l3343
  6205  0444' 0EF7               	movlw	247
  6206  0446' 5D00'              	subwf	pf_mount@mclst& (0+255),w,b
  6207  0448' 0E0F               	movlw	15
  6208  044A' 5900'              	subwfb	(pf_mount@mclst+1)& (0+255),w,b
  6209  044C' B0D8               	btfsc	status,0,c
  6210  044E' D002               	goto	l391
  6211                           
  6212                           ; BSR set to: 0
  6213                           ;pff.c: 795: fmt = 1;
  6214  0450' 0E01               	movlw	1
  6215  0452' 6F00'              	movwf	pf_mount@fmt& (0+255),b
  6216  0454'                    l391:
  6217  0454'                    l3343:
  6218                           
  6219                           ; BSR set to: 0
  6220  0454' 5100'              	movf	(pf_mount@mclst+3)& (0+255),w,b
  6221  0456' 1100'              	iorwf	(pf_mount@mclst+2)& (0+255),w,b
  6222  0458' E106               	bnz	u3390
  6223  045A' 0EF8               	movlw	248
  6224  045C' 5D00'              	subwf	pf_mount@mclst& (0+255),w,b
  6225  045E' 0E0F               	movlw	15
  6226  0460' 5900'              	subwfb	(pf_mount@mclst+1)& (0+255),w,b
  6227  0462' A0D8               	btfss	status,0,c
  6228  0464' D00B               	goto	l392
  6229  0466'                    u3390:
  6230                           
  6231                           ; BSR set to: 0
  6232  0466' 5100'              	movf	(pf_mount@mclst+3)& (0+255),w,b
  6233  0468' 1100'              	iorwf	(pf_mount@mclst+2)& (0+255),w,b
  6234  046A' E108               	bnz	l3349
  6235  046C' 0EF7               	movlw	247
  6236  046E' 5D00'              	subwf	pf_mount@mclst& (0+255),w,b
  6237  0470' 0EFF               	movlw	255
  6238  0472' 5900'              	subwfb	(pf_mount@mclst+1)& (0+255),w,b
  6239  0474' B0D8               	btfsc	status,0,c
  6240  0476' D002               	goto	l392
  6241                           
  6242                           ; BSR set to: 0
  6243                           ;pff.c: 797: fmt = 2;
  6244  0478' 0E02               	movlw	2
  6245  047A' 6F00'              	movwf	pf_mount@fmt& (0+255),b
  6246  047C'                    l392:
  6247  047C'                    l3349:
  6248                           
  6249                           ; BSR set to: 0
  6250  047C' 5100'              	movf	(pf_mount@mclst+3)& (0+255),w,b
  6251  047E' 1100'              	iorwf	(pf_mount@mclst+2)& (0+255),w,b
  6252  0480' E106               	bnz	u3410
  6253  0482' 0EF7               	movlw	247
  6254  0484' 5D00'              	subwf	pf_mount@mclst& (0+255),w,b
  6255  0486' 0EFF               	movlw	255
  6256  0488' 5900'              	subwfb	(pf_mount@mclst+1)& (0+255),w,b
  6257  048A' A0D8               	btfss	status,0,c
  6258  048C' D002               	goto	l393
  6259  048E'                    u3410:
  6260                           
  6261                           ; BSR set to: 0
  6262                           ;pff.c: 799: fmt = 3;
  6263  048E' 0E03               	movlw	3
  6264  0490' 6F00'              	movwf	pf_mount@fmt& (0+255),b
  6265  0492'                    l393:
  6266                           
  6267                           ; BSR set to: 0
  6268                           ;pff.c: 800: if (!fmt) return FR_NO_FILESYSTEM;
  6269  0492' 5100'              	movf	pf_mount@fmt& (0+255),w,b
  6270  0494' A4D8               	btfss	status,2,c
  6271  0496' D002               	goto	l394
  6272                           
  6273                           ; BSR set to: 0
  6274  0498' 0E06               	movlw	6
  6275                           
  6276                           ; BSR set to: 0
  6277  049A' 0012               	return	
  6278  049C'                    l394:
  6279                           
  6280                           ; BSR set to: 0
  6281                           ;pff.c: 803: if (0 || (1 && fmt == 3))
  6282                           
  6283                           ; BSR set to: 0
  6284  049C' C028' FFD9         	movff	pf_mount@fs,fsr2l
  6285  04A0' C029' FFDA         	movff	pf_mount@fs+1,fsr2h
  6286  04A4' C034' FFDF         	movff	pf_mount@fmt,indf2
  6287                           
  6288                           ; BSR set to: 0
  6289  04A8' 0E03               	movlw	3
  6290  04AA' 1900'              	xorwf	pf_mount@fmt& (0+255),w,b
  6291  04AC' A4D8               	btfss	status,2,c
  6292  04AE' D048               	goto	l395
  6293                           
  6294                           ; BSR set to: 0
  6295                           ;pff.c: 804: fs->dirbase = (DWORD)(((DWORD)*((BYTE*)(buf+(44-13))+3)<<24)|((DWORD)*((BYT
      +                          E*)(buf+(44-13))+2)<<16)|((WORD)*((BYTE*)(buf+(44-13))+1)<<8)|*(BYTE*)(buf+(44-13)));
  6296                           
  6297                           ; BSR set to: 0
  6298  04B0' 5100'              	movf	(pf_mount@buf+32)& (0+255),w,b
  6299  04B2' 6E00'              	movwf	(??_pf_mount+1)& (0+255),c
  6300  04B4' 6A00'              	clrf	??_pf_mount& (0+255),c
  6301  04B6' C021' F02C'        	movff	pf_mount@buf+33,??_pf_mount+2
  6302  04BA' 6A00'              	clrf	(??_pf_mount+3)& (0+255),c
  6303  04BC' 6A00'              	clrf	(??_pf_mount+4)& (0+255),c
  6304  04BE' 6A00'              	clrf	(??_pf_mount+5)& (0+255),c
  6305  04C0' C02D' F02F'        	movff	??_pf_mount+3,??_pf_mount+5
  6306  04C4' C02C' F02E'        	movff	??_pf_mount+2,??_pf_mount+4
  6307  04C8' 6A2D'              	clrf	??_pf_mount+3,c
  6308  04CA' 6A2C'              	clrf	??_pf_mount+2,c
  6309  04CC' C022' F030'        	movff	pf_mount@buf+34,??_pf_mount+6
  6310  04D0' 6A00'              	clrf	(??_pf_mount+7)& (0+255),c
  6311  04D2' 6A00'              	clrf	(??_pf_mount+8)& (0+255),c
  6312  04D4' 6A00'              	clrf	(??_pf_mount+9)& (0+255),c
  6313  04D6' C030' F033'        	movff	??_pf_mount+6,??_pf_mount+9
  6314  04DA' 6A32'              	clrf	??_pf_mount+8,c
  6315  04DC' 6A31'              	clrf	??_pf_mount+7,c
  6316  04DE' 6A30'              	clrf	??_pf_mount+6,c
  6317  04E0' 502C'              	movf	??_pf_mount+2,w,c
  6318  04E2' 1030'              	iorwf	??_pf_mount+6,w,c
  6319  04E4' 6E00'              	movwf	(??_pf_mount+10)& (0+255),c
  6320  04E6' 502D'              	movf	??_pf_mount+3,w,c
  6321  04E8' 1031'              	iorwf	??_pf_mount+7,w,c
  6322  04EA' 6E00'              	movwf	(??_pf_mount+11)& (0+255),c
  6323  04EC' 502E'              	movf	??_pf_mount+4,w,c
  6324  04EE' 1032'              	iorwf	??_pf_mount+8,w,c
  6325  04F0' 6E00'              	movwf	(??_pf_mount+12)& (0+255),c
  6326  04F2' 502F'              	movf	??_pf_mount+5,w,c
  6327  04F4' 1033'              	iorwf	??_pf_mount+9,w,c
  6328  04F6' 6E00'              	movwf	(??_pf_mount+13)& (0+255),c
  6329  04F8' 502A'              	movf	??_pf_mount,w,c
  6330  04FA' 1034'              	iorwf	??_pf_mount+10,w,c
  6331  04FC' 6E00'              	movwf	(??_pf_mount+14)& (0+255),c
  6332  04FE' 502B'              	movf	??_pf_mount+1,w,c
  6333  0500' 1035'              	iorwf	??_pf_mount+11,w,c
  6334  0502' 6E00'              	movwf	(??_pf_mount+15)& (0+255),c
  6335  0504' 0E00               	movlw	0
  6336  0506' 1036'              	iorwf	??_pf_mount+12,w,c
  6337  0508' 6E00'              	movwf	(??_pf_mount+16)& (0+255),c
  6338  050A' 0E00               	movlw	0
  6339  050C' 1037'              	iorwf	??_pf_mount+13,w,c
  6340  050E' 6E00'              	movwf	(??_pf_mount+17)& (0+255),c
  6341  0510' 5100'              	movf	(pf_mount@buf+31)& (0+255),w,b
  6342  0512' 1038'              	iorwf	??_pf_mount+14,w,c
  6343  0514' 6E00'              	movwf	(??_pf_mount+18)& (0+255),c
  6344  0516' 5039'              	movf	??_pf_mount+15,w,c
  6345  0518' 6E00'              	movwf	(??_pf_mount+19)& (0+255),c
  6346  051A' 503A'              	movf	??_pf_mount+16,w,c
  6347  051C' 6E00'              	movwf	(??_pf_mount+20)& (0+255),c
  6348  051E' 503B'              	movf	??_pf_mount+17,w,c
  6349  0520' 6E00'              	movwf	(??_pf_mount+21)& (0+255),c
  6350  0522' EE20 F00E          	lfsr	2,14
  6351  0526' 5028'              	movf	pf_mount@fs,w,c
  6352  0528' 26D9               	addwf	fsr2l,f,c
  6353  052A' 5029'              	movf	pf_mount@fs+1,w,c
  6354  052C' 22DA               	addwfc	fsr2h,f,c
  6355  052E' C03C' FFDE         	movff	??_pf_mount+18,postinc2
  6356  0532' C03D' FFDE         	movff	??_pf_mount+19,postinc2
  6357  0536' C03E' FFDE         	movff	??_pf_mount+20,postinc2
  6358  053A' C03F' FFDE         	movff	??_pf_mount+21,postinc2
  6359  053E' D028               	goto	l398
  6360  0540'                    l395:
  6361                           
  6362                           ; BSR set to: 0
  6363                           ;pff.c: 805: else
  6364                           ;pff.c: 806: fs->dirbase = fs->fatbase + fsize;
  6365                           
  6366                           ; BSR set to: 0
  6367  0540' EE20 F00A          	lfsr	2,10
  6368  0544' 5028'              	movf	pf_mount@fs,w,c
  6369  0546' 26D9               	addwf	fsr2l,f,c
  6370  0548' 5029'              	movf	pf_mount@fs+1,w,c
  6371  054A' 22DA               	addwfc	fsr2h,f,c
  6372  054C' CFDE F02A'         	movff	postinc2,??_pf_mount
  6373  0550' CFDE F02B'         	movff	postinc2,??_pf_mount+1
  6374  0554' CFDE F02C'         	movff	postinc2,??_pf_mount+2
  6375  0558' CFDE F02D'         	movff	postinc2,??_pf_mount+3
  6376  055C' 5100'              	movf	pf_mount@fsize& (0+255),w,b
  6377  055E' 242A'              	addwf	??_pf_mount,w,c
  6378  0560' 6E00'              	movwf	(??_pf_mount+4)& (0+255),c
  6379  0562' 5100'              	movf	(pf_mount@fsize+1)& (0+255),w,b
  6380  0564' 202B'              	addwfc	??_pf_mount+1,w,c
  6381  0566' 6E00'              	movwf	(??_pf_mount+5)& (0+255),c
  6382  0568' 5100'              	movf	(pf_mount@fsize+2)& (0+255),w,b
  6383  056A' 202C'              	addwfc	??_pf_mount+2,w,c
  6384  056C' 6E00'              	movwf	(??_pf_mount+6)& (0+255),c
  6385  056E' 5100'              	movf	(pf_mount@fsize+3)& (0+255),w,b
  6386  0570' 202D'              	addwfc	??_pf_mount+3,w,c
  6387  0572' 6E00'              	movwf	(??_pf_mount+7)& (0+255),c
  6388  0574' EE20 F00E          	lfsr	2,14
  6389  0578' 5028'              	movf	pf_mount@fs,w,c
  6390  057A' 26D9               	addwf	fsr2l,f,c
  6391  057C' 5029'              	movf	pf_mount@fs+1,w,c
  6392  057E' 22DA               	addwfc	fsr2h,f,c
  6393  0580' C02E' FFDE         	movff	??_pf_mount+4,postinc2
  6394  0584' C02F' FFDE         	movff	??_pf_mount+5,postinc2
  6395  0588' C030' FFDE         	movff	??_pf_mount+6,postinc2
  6396  058C' C031' FFDE         	movff	??_pf_mount+7,postinc2
  6397  0590'                    l398:
  6398                           
  6399                           ; BSR set to: 0
  6400                           ;pff.c: 807: fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;
  6401  0590' EE20 F00A          	lfsr	2,10
  6402  0594' 5028'              	movf	pf_mount@fs,w,c
  6403  0596' 26D9               	addwf	fsr2l,f,c
  6404  0598' 5029'              	movf	pf_mount@fs+1,w,c
  6405  059A' 22DA               	addwfc	fsr2h,f,c
  6406  059C' CFDE F02A'         	movff	postinc2,??_pf_mount
  6407  05A0' CFDE F02B'         	movff	postinc2,??_pf_mount+1
  6408  05A4' CFDE F02C'         	movff	postinc2,??_pf_mount+2
  6409  05A8' CFDE F02D'         	movff	postinc2,??_pf_mount+3
  6410  05AC' EE20 F004          	lfsr	2,4
  6411  05B0' 5028'              	movf	pf_mount@fs,w,c
  6412  05B2' 26D9               	addwf	fsr2l,f,c
  6413  05B4' 5029'              	movf	pf_mount@fs+1,w,c
  6414  05B6' 22DA               	addwfc	fsr2h,f,c
  6415  05B8' CFDE F02E'         	movff	postinc2,??_pf_mount+4
  6416  05BC' CFDD F02F'         	movff	postdec2,??_pf_mount+5
  6417  05C0' 0E04               	movlw	4
  6418  05C2' 6E00'              	movwf	(??_pf_mount+6)& (0+255),c
  6419  05C4'                    u3445:
  6420  05C4' 90D8               	bcf	status,0,c
  6421  05C6' 322F'              	rrcf	??_pf_mount+5,f,c
  6422  05C8' 322E'              	rrcf	??_pf_mount+4,f,c
  6423  05CA' 2E00'              	decfsz	(??_pf_mount+6)& (0+255),f,c
  6424  05CC' D7FB               	goto	u3445
  6425  05CE' 502E'              	movf	??_pf_mount+4,w,c
  6426  05D0' 242A'              	addwf	??_pf_mount,w,c
  6427  05D2' 6E00'              	movwf	(??_pf_mount+7)& (0+255),c
  6428  05D4' 502F'              	movf	??_pf_mount+5,w,c
  6429  05D6' 202B'              	addwfc	??_pf_mount+1,w,c
  6430  05D8' 6E00'              	movwf	(??_pf_mount+8)& (0+255),c
  6431  05DA' 0E00               	movlw	0
  6432  05DC' 202C'              	addwfc	??_pf_mount+2,w,c
  6433  05DE' 6E00'              	movwf	(??_pf_mount+9)& (0+255),c
  6434  05E0' 0E00               	movlw	0
  6435  05E2' 202D'              	addwfc	??_pf_mount+3,w,c
  6436  05E4' 6E00'              	movwf	(??_pf_mount+10)& (0+255),c
  6437  05E6' 5100'              	movf	pf_mount@fsize& (0+255),w,b
  6438  05E8' 2431'              	addwf	??_pf_mount+7,w,c
  6439  05EA' 6E00'              	movwf	(??_pf_mount+11)& (0+255),c
  6440  05EC' 5100'              	movf	(pf_mount@fsize+1)& (0+255),w,b
  6441  05EE' 2032'              	addwfc	??_pf_mount+8,w,c
  6442  05F0' 6E00'              	movwf	(??_pf_mount+12)& (0+255),c
  6443  05F2' 5100'              	movf	(pf_mount@fsize+2)& (0+255),w,b
  6444  05F4' 2033'              	addwfc	??_pf_mount+9,w,c
  6445  05F6' 6E00'              	movwf	(??_pf_mount+13)& (0+255),c
  6446  05F8' 5100'              	movf	(pf_mount@fsize+3)& (0+255),w,b
  6447  05FA' 2034'              	addwfc	??_pf_mount+10,w,c
  6448  05FC' 6E00'              	movwf	(??_pf_mount+14)& (0+255),c
  6449  05FE' EE20 F012          	lfsr	2,18
  6450  0602' 5028'              	movf	pf_mount@fs,w,c
  6451  0604' 26D9               	addwf	fsr2l,f,c
  6452  0606' 5029'              	movf	pf_mount@fs+1,w,c
  6453  0608' 22DA               	addwfc	fsr2h,f,c
  6454  060A' C035' FFDE         	movff	??_pf_mount+11,postinc2
  6455  060E' C036' FFDE         	movff	??_pf_mount+12,postinc2
  6456  0612' C037' FFDE         	movff	??_pf_mount+13,postinc2
  6457  0616' C038' FFDE         	movff	??_pf_mount+14,postinc2
  6458                           
  6459                           ;pff.c: 809: fs->flag = 0;
  6460  061A' EE20 F001          	lfsr	2,1
  6461  061E' 5028'              	movf	pf_mount@fs,w,c
  6462  0620' 26D9               	addwf	fsr2l,f,c
  6463  0622' 5029'              	movf	pf_mount@fs+1,w,c
  6464  0624' 22DA               	addwfc	fsr2h,f,c
  6465  0626' 0E00               	movlw	0
  6466  0628' 6EDF               	movwf	indf2,c
  6467                           
  6468                           ; BSR set to: 0
  6469                           ;pff.c: 810: FatFs = fs;
  6470  062A' C028' F004'        	movff	pf_mount@fs,_FatFs
  6471  062E' C029' F005'        	movff	pf_mount@fs+1,_FatFs+1
  6472                           
  6473                           ; BSR set to: 0
  6474                           ;pff.c: 812: return FR_OK;
  6475  0632' 0E00               	movlw	0
  6476  0634' 0012               	return	
  6477  0636'                    __end_of_pf_mount:
  6478                           	opt stack 0
  6479                           tblptru	equ	0xFF8
  6480                           tblptrh	equ	0xFF7
  6481                           tblptrl	equ	0xFF6
  6482                           tablat	equ	0xFF5
  6483                           prodh	equ	0xFF4
  6484                           prodl	equ	0xFF3
  6485                           postinc0	equ	0xFEE
  6486                           wreg	equ	0xFE8
  6487                           indf1	equ	0xFE7
  6488                           postdec1	equ	0xFE5
  6489                           fsr1h	equ	0xFE2
  6490                           fsr1l	equ	0xFE1
  6491                           indf2	equ	0xFDF
  6492                           postinc2	equ	0xFDE
  6493                           postdec2	equ	0xFDD
  6494                           plusw2	equ	0xFDB
  6495                           fsr2h	equ	0xFDA
  6496                           fsr2l	equ	0xFD9
  6497                           status	equ	0xFD8
  6498                           
  6499 ;; *************** function _disk_initialize *****************
  6500 ;; Defined at:
  6501 ;;		line 375 in file "SDCard.c"
  6502 ;; Parameters:    Size  Location     Type
  6503 ;;		None
  6504 ;; Auto vars:     Size  Location     Type
  6505 ;;  count2          2   18[COMRAM] int 
  6506 ;;  count1          2   15[COMRAM] int 
  6507 ;;  i               2   13[COMRAM] int 
  6508 ;;  buff            1   20[COMRAM] unsigned char 
  6509 ;;  stat            1   17[COMRAM] unsigned char 
  6510 ;; Return value:  Size  Location     Type
  6511 ;;                  1    wreg      unsigned char 
  6512 ;; Registers used:
  6513 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, b
      +temp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, bsr, cstack
  6514 ;; Tracked objects:
  6515 ;;		On entry : 0/0
  6516 ;;		On exit  : 0/0
  6517 ;;		Unchanged: 0/0
  6518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6519 ;;      Params:         0       0       0       0       0       0       0       0       0
  6520 ;;      Locals:         8       0       0       0       0       0       0       0       0
  6521 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6522 ;;      Totals:         8       0       0       0       0       0       0       0       0
  6523 ;;Total ram usage:        8 bytes
  6524 ;; Hardware stack levels used:    1
  6525 ;; Hardware stack levels required when called:    3
  6526 ;; This function calls:
  6527 ;;		_Command
  6528 ;;		_dummy_clocks
  6529 ;;		_proceed
  6530 ;;		_reset
  6531 ;;		_response
  6532 ;; This function is called by:
  6533 ;;		_pf_mount
  6534 ;; This function uses a non-reentrant model
  6535 ;;
  6536                           
  6537                           	psect	text18
  6538  0000'                    __ptext18:
  6539                           	opt stack 0
  6540  0000'                    _disk_initialize:
  6541                           	opt stack 26
  6542                           
  6543                           ;SDCard.c: 377: DSTATUS stat;
  6544                           ;SDCard.c: 378: int i = 0, count1 = 0, count2 = 0;
  6545                           
  6546                           ;incstack = 0
  6547  0000' 0E00               	movlw	0
  6548  0002' 6E0E'              	movwf	disk_initialize@i+1,c
  6549  0004' 0E00               	movlw	0
  6550  0006' 6E0D'              	movwf	disk_initialize@i,c
  6551  0008' 0E00               	movlw	0
  6552  000A' 6E10'              	movwf	disk_initialize@count1+1,c
  6553  000C' 0E00               	movlw	0
  6554  000E' 6E0F'              	movwf	disk_initialize@count1,c
  6555  0010' 0E00               	movlw	0
  6556  0012' 6E13'              	movwf	disk_initialize@count2+1,c
  6557  0014' 0E00               	movlw	0
  6558  0016' 6E12'              	movwf	disk_initialize@count2,c
  6559                           
  6560                           ;SDCard.c: 379: unsigned char buff;
  6561                           ;SDCard.c: 380: reset();
  6562  0018' EC00' F000'        	call	_reset	;wreg free
  6563                           
  6564                           ;SDCard.c: 381: dummy_clocks(8);
  6565  001C' 0E00               	movlw	0
  6566  001E' 6E01'              	movwf	?_dummy_clocks+1,c
  6567  0020' 0E08               	movlw	8
  6568  0022' 6E00'              	movwf	?_dummy_clocks,c
  6569  0024' EC00' F000'        	call	_dummy_clocks	;wreg free
  6570                           
  6571                           ;SDCard.c: 382: Command(0X41, 0X00000000, 0XFF);
  6572  0028' 0E00               	movlw	0
  6573  002A' 6E01'              	movwf	Command@arg,c
  6574  002C' 0E00               	movlw	0
  6575  002E' 6E02'              	movwf	Command@arg+1,c
  6576  0030' 0E00               	movlw	0
  6577  0032' 6E03'              	movwf	Command@arg+2,c
  6578  0034' 0E00               	movlw	0
  6579  0036' 6E04'              	movwf	Command@arg+3,c
  6580  0038' 0EFF               	movlw	255
  6581  003A' 6E05'              	movwf	Command@CRC,c
  6582  003C' 0E41               	movlw	65
  6583  003E' EC00' F000'        	call	_Command
  6584                           
  6585                           ;SDCard.c: 383: proceed();
  6586  0042' EC00' F000'        	call	_proceed	;wreg free
  6587  0046'                    
  6588                           ;SDCard.c: 385: buff = response();
  6589  0046' EC00' F000'        	call	_response	;wreg free
  6590  004A' 6E14'              	movwf	disk_initialize@buff,c
  6591                           
  6592                           ;SDCard.c: 386: }while(buff!=0x01);
  6593  004C' 0414'              	decf	disk_initialize@buff,w,c
  6594  004E' A4D8               	btfss	status,2,c
  6595  0050' D7FA               	goto	l149
  6596                           
  6597                           ;SDCard.c: 388: proceed();
  6598  0052' EC00' F000'        	call	_proceed	;wreg free
  6599                           
  6600                           ;SDCard.c: 389: if (buff == 0x01)
  6601  0056' 0414'              	decf	disk_initialize@buff,w,c
  6602  0058' A4D8               	btfss	status,2,c
  6603  005A' D05F               	goto	l151
  6604                           
  6605                           ;SDCard.c: 390: {
  6606                           ;SDCard.c: 392: count1 = 0;
  6607  005C' 0E00               	movlw	0
  6608  005E' 6E10'              	movwf	disk_initialize@count1+1,c
  6609  0060' 0E00               	movlw	0
  6610  0062' 6E0F'              	movwf	disk_initialize@count1,c
  6611  0064'                    l152:
  6612                           
  6613                           ;SDCard.c: 394: count2 = 0;
  6614  0064' 0E00               	movlw	0
  6615  0066' 6E13'              	movwf	disk_initialize@count2+1,c
  6616  0068' 0E00               	movlw	0
  6617  006A' 6E12'              	movwf	disk_initialize@count2,c
  6618                           
  6619                           ;SDCard.c: 395: dummy_clocks(8);
  6620  006C' 0E00               	movlw	0
  6621  006E' 6E01'              	movwf	?_dummy_clocks+1,c
  6622  0070' 0E08               	movlw	8
  6623  0072' 6E00'              	movwf	?_dummy_clocks,c
  6624  0074' EC00' F000'        	call	_dummy_clocks	;wreg free
  6625                           
  6626                           ;SDCard.c: 396: Command(0X77, 0X00000000, 0X95);
  6627  0078' 0E00               	movlw	0
  6628  007A' 6E01'              	movwf	Command@arg,c
  6629  007C' 0E00               	movlw	0
  6630  007E' 6E02'              	movwf	Command@arg+1,c
  6631  0080' 0E00               	movlw	0
  6632  0082' 6E03'              	movwf	Command@arg+2,c
  6633  0084' 0E00               	movlw	0
  6634  0086' 6E04'              	movwf	Command@arg+3,c
  6635  0088' 0E95               	movlw	149
  6636  008A' 6E05'              	movwf	Command@CRC,c
  6637  008C' 0E77               	movlw	119
  6638  008E' EC00' F000'        	call	_Command
  6639                           
  6640                           ;SDCard.c: 397: buff = 0XFF;
  6641  0092' 6814'              	setf	disk_initialize@buff,c
  6642  0094'                    
  6643                           ;SDCard.c: 400: buff = response();
  6644  0094' EC00' F000'        	call	_response	;wreg free
  6645  0098' 6E14'              	movwf	disk_initialize@buff,c
  6646                           
  6647                           ;SDCard.c: 401: count2++;
  6648  009A' 4A12'              	infsnz	disk_initialize@count2,f,c
  6649  009C' 2A13'              	incf	disk_initialize@count2+1,f,c
  6650                           
  6651                           ;SDCard.c: 402: }while((buff!=0X01)&&(count2<10));
  6652  009E' 0414'              	decf	disk_initialize@buff,w,c
  6653  00A0' B4D8               	btfsc	status,2,c
  6654  00A2' D008               	goto	u3000
  6655  00A4' BE13'              	btfsc	disk_initialize@count2+1,7,c
  6656  00A6' D7F6               	goto	l153
  6657  00A8' 5013'              	movf	disk_initialize@count2+1,w,c
  6658  00AA' E104               	bnz	l3083
  6659  00AC' 0E0A               	movlw	10
  6660  00AE' 5C12'              	subwf	disk_initialize@count2,w,c
  6661  00B0' A0D8               	btfss	status,0,c
  6662  00B2' D7F0               	goto	l153
  6663  00B4'                    u3000:
  6664  00B4'                    l3083:
  6665                           
  6666                           ;SDCard.c: 404: count2 = 0;
  6667  00B4' 0E00               	movlw	0
  6668  00B6' 6E13'              	movwf	disk_initialize@count2+1,c
  6669  00B8' 0E00               	movlw	0
  6670  00BA' 6E12'              	movwf	disk_initialize@count2,c
  6671                           
  6672                           ;SDCard.c: 405: dummy_clocks(8);
  6673  00BC' 0E00               	movlw	0
  6674  00BE' 6E01'              	movwf	?_dummy_clocks+1,c
  6675  00C0' 0E08               	movlw	8
  6676  00C2' 6E00'              	movwf	?_dummy_clocks,c
  6677  00C4' EC00' F000'        	call	_dummy_clocks	;wreg free
  6678                           
  6679                           ;SDCard.c: 407: Command(0X69,0X40000000,0X95);
  6680  00C8' 0E00               	movlw	0
  6681  00CA' 6E01'              	movwf	Command@arg,c
  6682  00CC' 0E00               	movlw	0
  6683  00CE' 6E02'              	movwf	Command@arg+1,c
  6684  00D0' 0E00               	movlw	0
  6685  00D2' 6E03'              	movwf	Command@arg+2,c
  6686  00D4' 0E40               	movlw	64
  6687  00D6' 6E04'              	movwf	Command@arg+3,c
  6688  00D8' 0E95               	movlw	149
  6689  00DA' 6E05'              	movwf	Command@CRC,c
  6690  00DC' 0E69               	movlw	105
  6691  00DE' EC00' F000'        	call	_Command
  6692                           
  6693                           ;SDCard.c: 408: buff = 0XFF;
  6694  00E2' 6814'              	setf	disk_initialize@buff,c
  6695                           
  6696                           ;SDCard.c: 410: proceed();
  6697  00E4' EC00' F000'        	call	_proceed	;wreg free
  6698  00E8'                    
  6699                           ;SDCard.c: 412: buff = response();
  6700  00E8' EC00' F000'        	call	_response	;wreg free
  6701  00EC' 6E14'              	movwf	disk_initialize@buff,c
  6702                           
  6703                           ;SDCard.c: 413: count2++;
  6704  00EE' 4A12'              	infsnz	disk_initialize@count2,f,c
  6705  00F0' 2A13'              	incf	disk_initialize@count2+1,f,c
  6706                           
  6707                           ;SDCard.c: 414: }while((buff!=0X00)&&(count2<10));
  6708  00F2' 5014'              	movf	disk_initialize@buff,w,c
  6709  00F4' B4D8               	btfsc	status,2,c
  6710  00F6' D008               	goto	u3020
  6711  00F8' BE13'              	btfsc	disk_initialize@count2+1,7,c
  6712  00FA' D7F6               	goto	l157
  6713  00FC' 5013'              	movf	disk_initialize@count2+1,w,c
  6714  00FE' E104               	bnz	l3101
  6715  0100' 0E0A               	movlw	10
  6716  0102' 5C12'              	subwf	disk_initialize@count2,w,c
  6717  0104' A0D8               	btfss	status,0,c
  6718  0106' D7F0               	goto	l157
  6719  0108'                    u3020:
  6720  0108'                    l3101:
  6721                           
  6722                           ;SDCard.c: 415: }while(buff != 0X00);
  6723  0108' 5014'              	movf	disk_initialize@buff,w,c
  6724  010A' A4D8               	btfss	status,2,c
  6725  010C' D7AB               	goto	l152
  6726                           
  6727                           ;SDCard.c: 417: count1 = 0;
  6728  010E' 0E00               	movlw	0
  6729  0110' 6E10'              	movwf	disk_initialize@count1+1,c
  6730  0112' 0E00               	movlw	0
  6731  0114' 6E0F'              	movwf	disk_initialize@count1,c
  6732                           
  6733                           ;SDCard.c: 419: stat = 0X00;
  6734  0116' 0E00               	movlw	0
  6735  0118' D005               	goto	L5
  6736  011A'                    l151:
  6737                           
  6738                           ;SDCard.c: 423: else if(buff == 0x05)
  6739  011A' 0E05               	movlw	5
  6740  011C' 1814'              	xorwf	disk_initialize@buff,w,c
  6741  011E' A4D8               	btfss	status,2,c
  6742  0120' D002               	goto	l163
  6743                           
  6744                           ;SDCard.c: 424: {
  6745                           ;SDCard.c: 425: stat = 0x01;
  6746  0122' 0E01               	movlw	1
  6747  0124'                    L5:
  6748  0124' 6E11'              	movwf	disk_initialize@stat,c
  6749  0126'                    l163:
  6750                           
  6751                           ;SDCard.c: 426: }
  6752                           ;SDCard.c: 428: dummy_clocks(8);
  6753  0126' 0E00               	movlw	0
  6754  0128' 6E01'              	movwf	?_dummy_clocks+1,c
  6755  012A' 0E08               	movlw	8
  6756  012C' 6E00'              	movwf	?_dummy_clocks,c
  6757  012E' EC00' F000'        	call	_dummy_clocks	;wreg free
  6758                           
  6759                           ;SDCard.c: 429: Command(0X50,0X00000200,0XFF);
  6760  0132' 0E00               	movlw	0
  6761  0134' 6E01'              	movwf	Command@arg,c
  6762  0136' 0E02               	movlw	2
  6763  0138' 6E02'              	movwf	Command@arg+1,c
  6764  013A' 0E00               	movlw	0
  6765  013C' 6E03'              	movwf	Command@arg+2,c
  6766  013E' 0E00               	movlw	0
  6767  0140' 6E04'              	movwf	Command@arg+3,c
  6768  0142' 0EFF               	movlw	255
  6769  0144' 6E05'              	movwf	Command@CRC,c
  6770  0146' 0E50               	movlw	80
  6771  0148' EC00' F000'        	call	_Command
  6772                           
  6773                           ;SDCard.c: 430: proceed();
  6774  014C' EC00' F000'        	call	_proceed	;wreg free
  6775  0150'                    
  6776                           ;SDCard.c: 432: buff = response();
  6777  0150' EC00' F000'        	call	_response	;wreg free
  6778  0154' 6E14'              	movwf	disk_initialize@buff,c
  6779                           
  6780                           ;SDCard.c: 433: }while(buff!=0x00);
  6781  0156' 5014'              	movf	disk_initialize@buff,w,c
  6782  0158' A4D8               	btfss	status,2,c
  6783  015A' D7FA               	goto	l164
  6784                           
  6785                           ;SDCard.c: 435: return stat;
  6786  015C' 5011'              	movf	disk_initialize@stat,w,c
  6787  015E' 0012               	return	
  6788  0160'                    __end_of_disk_initialize:
  6789                           	opt stack 0
  6790                           tblptru	equ	0xFF8
  6791                           tblptrh	equ	0xFF7
  6792                           tblptrl	equ	0xFF6
  6793                           tablat	equ	0xFF5
  6794                           prodh	equ	0xFF4
  6795                           prodl	equ	0xFF3
  6796                           postinc0	equ	0xFEE
  6797                           wreg	equ	0xFE8
  6798                           indf1	equ	0xFE7
  6799                           postdec1	equ	0xFE5
  6800                           fsr1h	equ	0xFE2
  6801                           fsr1l	equ	0xFE1
  6802                           indf2	equ	0xFDF
  6803                           postinc2	equ	0xFDE
  6804                           postdec2	equ	0xFDD
  6805                           plusw2	equ	0xFDB
  6806                           fsr2h	equ	0xFDA
  6807                           fsr2l	equ	0xFD9
  6808                           status	equ	0xFD8
  6809                           
  6810 ;; *************** function _reset *****************
  6811 ;; Defined at:
  6812 ;;		line 356 in file "SDCard.c"
  6813 ;; Parameters:    Size  Location     Type
  6814 ;;		None
  6815 ;; Auto vars:     Size  Location     Type
  6816 ;;  count           2   10[COMRAM] int 
  6817 ;;  i               2    8[COMRAM] int 
  6818 ;;  buff            1   12[COMRAM] unsigned char 
  6819 ;; Return value:  Size  Location     Type
  6820 ;;                  1    wreg      void 
  6821 ;; Registers used:
  6822 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, b
      +temp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, bsr, cstack
  6823 ;; Tracked objects:
  6824 ;;		On entry : 0/0
  6825 ;;		On exit  : 0/0
  6826 ;;		Unchanged: 0/0
  6827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6828 ;;      Params:         0       0       0       0       0       0       0       0       0
  6829 ;;      Locals:         5       0       0       0       0       0       0       0       0
  6830 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6831 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6832 ;;Total ram usage:        5 bytes
  6833 ;; Hardware stack levels used:    1
  6834 ;; Hardware stack levels required when called:    2
  6835 ;; This function calls:
  6836 ;;		_Command
  6837 ;;		_dummy_clocks
  6838 ;;		_proceed
  6839 ;;		_response
  6840 ;; This function is called by:
  6841 ;;		_disk_initialize
  6842 ;; This function uses a non-reentrant model
  6843 ;;
  6844                           
  6845                           	psect	text19
  6846  0000'                    __ptext19:
  6847                           	opt stack 0
  6848  0000'                    _reset:
  6849                           	opt stack 26
  6850                           
  6851                           ;SDCard.c: 358: int i = 0, count = 0;
  6852                           
  6853                           ;incstack = 0
  6854  0000' 0E00               	movlw	0
  6855  0002' 6E09'              	movwf	reset@i+1,c
  6856  0004' 0E00               	movlw	0
  6857  0006' 6E08'              	movwf	reset@i,c
  6858  0008' 0E00               	movlw	0
  6859  000A' 6E0B'              	movwf	reset@count+1,c
  6860  000C' 0E00               	movlw	0
  6861  000E' 6E0A'              	movwf	reset@count,c
  6862  0010'                    
  6863                           ;SDCard.c: 362: dummy_clocks(8);
  6864  0010' 0E00               	movlw	0
  6865  0012' 6E01'              	movwf	?_dummy_clocks+1,c
  6866  0014' 0E08               	movlw	8
  6867  0016' 6E00'              	movwf	?_dummy_clocks,c
  6868  0018' EC00' F000'        	call	_dummy_clocks	;wreg free
  6869                           
  6870                           ;SDCard.c: 363: Command(0X40, 0X00000000, 0X95);
  6871  001C' 0E00               	movlw	0
  6872  001E' 6E01'              	movwf	Command@arg,c
  6873  0020' 0E00               	movlw	0
  6874  0022' 6E02'              	movwf	Command@arg+1,c
  6875  0024' 0E00               	movlw	0
  6876  0026' 6E03'              	movwf	Command@arg+2,c
  6877  0028' 0E00               	movlw	0
  6878  002A' 6E04'              	movwf	Command@arg+3,c
  6879  002C' 0E95               	movlw	149
  6880  002E' 6E05'              	movwf	Command@CRC,c
  6881  0030' 0E40               	movlw	64
  6882  0032' EC00' F000'        	call	_Command
  6883                           
  6884                           ;SDCard.c: 364: proceed();
  6885  0036' EC00' F000'        	call	_proceed	;wreg free
  6886  003A'                    
  6887                           ;SDCard.c: 366: buff = response();
  6888  003A' EC00' F000'        	call	_response	;wreg free
  6889  003E' 6E0C'              	movwf	reset@buff,c
  6890                           
  6891                           ;SDCard.c: 367: count++;
  6892  0040' 4A0A'              	infsnz	reset@count,f,c
  6893  0042' 2A0B'              	incf	reset@count+1,f,c
  6894                           
  6895                           ;SDCard.c: 368: }while((buff!=0X01) && (count<10) );
  6896  0044' 040C'              	decf	reset@buff,w,c
  6897  0046' B4D8               	btfsc	status,2,c
  6898  0048' D008               	goto	u2720
  6899  004A' BE0B'              	btfsc	reset@count+1,7,c
  6900  004C' D7F6               	goto	l141
  6901  004E' 500B'              	movf	reset@count+1,w,c
  6902  0050' E104               	bnz	l2923
  6903  0052' 0E0A               	movlw	10
  6904  0054' 5C0A'              	subwf	reset@count,w,c
  6905  0056' A0D8               	btfss	status,0,c
  6906  0058' D7F0               	goto	l141
  6907  005A'                    u2720:
  6908  005A'                    l2923:
  6909                           
  6910                           ;SDCard.c: 369: count = 0;
  6911  005A' 0E00               	movlw	0
  6912  005C' 6E0B'              	movwf	reset@count+1,c
  6913  005E' 0E00               	movlw	0
  6914  0060' 6E0A'              	movwf	reset@count,c
  6915                           
  6916                           ;SDCard.c: 370: }while(buff!=0X01);
  6917  0062' 040C'              	decf	reset@buff,w,c
  6918  0064' B4D8               	btfsc	status,2,c
  6919  0066' 0012               	return	
  6920  0068' D7D3               	goto	l140
  6921  006A'                    __end_of_reset:
  6922                           	opt stack 0
  6923                           tblptru	equ	0xFF8
  6924                           tblptrh	equ	0xFF7
  6925                           tblptrl	equ	0xFF6
  6926                           tablat	equ	0xFF5
  6927                           prodh	equ	0xFF4
  6928                           prodl	equ	0xFF3
  6929                           postinc0	equ	0xFEE
  6930                           wreg	equ	0xFE8
  6931                           indf1	equ	0xFE7
  6932                           postdec1	equ	0xFE5
  6933                           fsr1h	equ	0xFE2
  6934                           fsr1l	equ	0xFE1
  6935                           indf2	equ	0xFDF
  6936                           postinc2	equ	0xFDE
  6937                           postdec2	equ	0xFDD
  6938                           plusw2	equ	0xFDB
  6939                           fsr2h	equ	0xFDA
  6940                           fsr2l	equ	0xFD9
  6941                           status	equ	0xFD8
  6942                           
  6943 ;; *************** function _check_fs *****************
  6944 ;; Defined at:
  6945 ;;		line 717 in file "pff.c"
  6946 ;; Parameters:    Size  Location     Type
  6947 ;;  buf             2   30[COMRAM] PTR unsigned char 
  6948 ;;		 -> pf_mount@buf(36), 
  6949 ;;  sect            4   32[COMRAM] unsigned long 
  6950 ;; Auto vars:     Size  Location     Type
  6951 ;;		None
  6952 ;; Return value:  Size  Location     Type
  6953 ;;                  1    wreg      unsigned char 
  6954 ;; Registers used:
  6955 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, b
      +temp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, bsr, cstack
  6956 ;; Tracked objects:
  6957 ;;		On entry : 0/0
  6958 ;;		On exit  : 0/0
  6959 ;;		Unchanged: 0/0
  6960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6961 ;;      Params:         6       0       0       0       0       0       0       0       0
  6962 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6963 ;;      Temps:          4       0       0       0       0       0       0       0       0
  6964 ;;      Totals:        10       0       0       0       0       0       0       0       0
  6965 ;;Total ram usage:       10 bytes
  6966 ;; Hardware stack levels used:    1
  6967 ;; Hardware stack levels required when called:    3
  6968 ;; This function calls:
  6969 ;;		_disk_readp
  6970 ;; This function is called by:
  6971 ;;		_pf_mount
  6972 ;; This function uses a non-reentrant model
  6973 ;;
  6974                           
  6975                           	psect	text20
  6976  0000'                    __ptext20:
  6977                           	opt stack 0
  6978  0000'                    _check_fs:
  6979                           	opt stack 26
  6980                           
  6981                           ;pff.c: 722: if (disk_readp(buf, sect, 510, 2))
  6982                           
  6983                           ;incstack = 0
  6984  0000' C01E' F008'        	movff	check_fs@buf,disk_readp@rd
  6985  0004' C01F' F009'        	movff	check_fs@buf+1,disk_readp@rd+1
  6986  0008' C020' F00A'        	movff	check_fs@sect,disk_readp@sector
  6987  000C' C021' F00B'        	movff	check_fs@sect+1,disk_readp@sector+1
  6988  0010' C022' F00C'        	movff	check_fs@sect+2,disk_readp@sector+2
  6989  0014' C023' F00D'        	movff	check_fs@sect+3,disk_readp@sector+3
  6990  0018' 0E01               	movlw	1
  6991  001A' 6E0F'              	movwf	disk_readp@offset+1,c
  6992  001C' 0EFE               	movlw	254
  6993  001E' 6E0E'              	movwf	disk_readp@offset,c
  6994  0020' 0E00               	movlw	0
  6995  0022' 6E11'              	movwf	disk_readp@count+1,c
  6996  0024' 0E02               	movlw	2
  6997  0026' 6E10'              	movwf	disk_readp@count,c
  6998  0028' EC00' F000'        	call	_disk_readp	;wreg free
  6999  002C' 0900               	iorlw	0
  7000  002E' B4D8               	btfsc	status,2,c
  7001  0030' D002               	goto	l373
  7002                           
  7003                           ;pff.c: 723: return 3;
  7004  0032' 0E03               	movlw	3
  7005  0034' 0012               	return	
  7006  0036'                    l373:
  7007                           
  7008                           ;pff.c: 724: if ( (WORD)(((WORD)*((BYTE*)(buf)+1)<<8)|(WORD)*(BYTE*)(buf)) != 0xAA55)
  7009  0036' EE20 F001          	lfsr	2,1
  7010  003A' 501E'              	movf	check_fs@buf,w,c
  7011  003C' 26D9               	addwf	fsr2l,f,c
  7012  003E' 501F'              	movf	check_fs@buf+1,w,c
  7013  0040' 22DA               	addwfc	fsr2h,f,c
  7014  0042' 50DF               	movf	indf2,w,c
  7015  0044' 6E00'              	movwf	??_check_fs& (0+255),c
  7016  0046' 5024'              	movf	??_check_fs,w,c
  7017  0048' 6E00'              	movwf	(??_check_fs+2)& (0+255),c
  7018  004A' 6A00'              	clrf	(??_check_fs+1)& (0+255),c
  7019  004C' C01E' FFD9         	movff	check_fs@buf,fsr2l
  7020  0050' C01F' FFDA         	movff	check_fs@buf+1,fsr2h
  7021  0054' 50DF               	movf	indf2,w,c
  7022  0056' 6E00'              	movwf	(??_check_fs+3)& (0+255),c
  7023  0058' 5027'              	movf	??_check_fs+3,w,c
  7024  005A' 1225'              	iorwf	??_check_fs+1,f,c
  7025  005C' 0E00               	movlw	0
  7026  005E' 1226'              	iorwf	??_check_fs+2,f,c
  7027  0060' 0E55               	movlw	85
  7028  0062' 1825'              	xorwf	??_check_fs+1,w,c
  7029  0064' E104               	bnz	u3200
  7030  0066' 0EAA               	movlw	170
  7031  0068' 1826'              	xorwf	??_check_fs+2,w,c
  7032  006A' B4D8               	btfsc	status,2,c
  7033  006C' D002               	goto	l375
  7034  006E'                    u3200:
  7035                           
  7036                           ;pff.c: 725: {
  7037                           ;pff.c: 726: return 2;
  7038  006E' 0E02               	movlw	2
  7039  0070' 0012               	return	
  7040  0072'                    l375:
  7041  0072' C01E' F008'        	movff	check_fs@buf,disk_readp@rd
  7042  0076' C01F' F009'        	movff	check_fs@buf+1,disk_readp@rd+1
  7043  007A' C020' F00A'        	movff	check_fs@sect,disk_readp@sector
  7044  007E' C021' F00B'        	movff	check_fs@sect+1,disk_readp@sector+1
  7045  0082' C022' F00C'        	movff	check_fs@sect+2,disk_readp@sector+2
  7046  0086' C023' F00D'        	movff	check_fs@sect+3,disk_readp@sector+3
  7047  008A' 0E00               	movlw	0
  7048  008C' 6E0F'              	movwf	disk_readp@offset+1,c
  7049  008E' 0E36               	movlw	54
  7050  0090' 6E0E'              	movwf	disk_readp@offset,c
  7051  0092' 0E00               	movlw	0
  7052  0094' 6E11'              	movwf	disk_readp@count+1,c
  7053  0096' 0E02               	movlw	2
  7054  0098' 6E10'              	movwf	disk_readp@count,c
  7055  009A' EC00' F000'        	call	_disk_readp	;wreg free
  7056  009E' 0900               	iorlw	0
  7057  00A0' A4D8               	btfss	status,2,c
  7058  00A2' D01E               	goto	l376
  7059  00A4' EE20 F001          	lfsr	2,1
  7060  00A8' 501E'              	movf	check_fs@buf,w,c
  7061  00AA' 26D9               	addwf	fsr2l,f,c
  7062  00AC' 501F'              	movf	check_fs@buf+1,w,c
  7063  00AE' 22DA               	addwfc	fsr2h,f,c
  7064  00B0' 50DF               	movf	indf2,w,c
  7065  00B2' 6E00'              	movwf	??_check_fs& (0+255),c
  7066  00B4' 5024'              	movf	??_check_fs,w,c
  7067  00B6' 6E00'              	movwf	(??_check_fs+2)& (0+255),c
  7068  00B8' 6A00'              	clrf	(??_check_fs+1)& (0+255),c
  7069  00BA' C01E' FFD9         	movff	check_fs@buf,fsr2l
  7070  00BE' C01F' FFDA         	movff	check_fs@buf+1,fsr2h
  7071  00C2' 50DF               	movf	indf2,w,c
  7072  00C4' 6E00'              	movwf	(??_check_fs+3)& (0+255),c
  7073  00C6' 5027'              	movf	??_check_fs+3,w,c
  7074  00C8' 1225'              	iorwf	??_check_fs+1,f,c
  7075  00CA' 0E00               	movlw	0
  7076  00CC' 1226'              	iorwf	??_check_fs+2,f,c
  7077  00CE' 0E46               	movlw	70
  7078  00D0' 1825'              	xorwf	??_check_fs+1,w,c
  7079  00D2' E106               	bnz	l3237
  7080  00D4' 0E41               	movlw	65
  7081  00D6' 1826'              	xorwf	??_check_fs+2,w,c
  7082  00D8' A4D8               	btfss	status,2,c
  7083  00DA' D002               	goto	l376
  7084                           
  7085                           ;pff.c: 729: return 0;
  7086  00DC' 0E00               	movlw	0
  7087  00DE' 0012               	return	
  7088  00E0'                    l376:
  7089  00E0'                    l3237:
  7090  00E0' C01E' F008'        	movff	check_fs@buf,disk_readp@rd
  7091  00E4' C01F' F009'        	movff	check_fs@buf+1,disk_readp@rd+1
  7092  00E8' C020' F00A'        	movff	check_fs@sect,disk_readp@sector
  7093  00EC' C021' F00B'        	movff	check_fs@sect+1,disk_readp@sector+1
  7094  00F0' C022' F00C'        	movff	check_fs@sect+2,disk_readp@sector+2
  7095  00F4' C023' F00D'        	movff	check_fs@sect+3,disk_readp@sector+3
  7096  00F8' 0E00               	movlw	0
  7097  00FA' 6E0F'              	movwf	disk_readp@offset+1,c
  7098  00FC' 0E52               	movlw	82
  7099  00FE' 6E0E'              	movwf	disk_readp@offset,c
  7100  0100' 0E00               	movlw	0
  7101  0102' 6E11'              	movwf	disk_readp@count+1,c
  7102  0104' 0E02               	movlw	2
  7103  0106' 6E10'              	movwf	disk_readp@count,c
  7104  0108' EC00' F000'        	call	_disk_readp	;wreg free
  7105  010C' 0900               	iorlw	0
  7106  010E' A4D8               	btfss	status,2,c
  7107  0110' D01E               	goto	l377
  7108  0112' EE20 F001          	lfsr	2,1
  7109  0116' 501E'              	movf	check_fs@buf,w,c
  7110  0118' 26D9               	addwf	fsr2l,f,c
  7111  011A' 501F'              	movf	check_fs@buf+1,w,c
  7112  011C' 22DA               	addwfc	fsr2h,f,c
  7113  011E' 50DF               	movf	indf2,w,c
  7114  0120' 6E00'              	movwf	??_check_fs& (0+255),c
  7115  0122' 5024'              	movf	??_check_fs,w,c
  7116  0124' 6E00'              	movwf	(??_check_fs+2)& (0+255),c
  7117  0126' 6A00'              	clrf	(??_check_fs+1)& (0+255),c
  7118  0128' C01E' FFD9         	movff	check_fs@buf,fsr2l
  7119  012C' C01F' FFDA         	movff	check_fs@buf+1,fsr2h
  7120  0130' 50DF               	movf	indf2,w,c
  7121  0132' 6E00'              	movwf	(??_check_fs+3)& (0+255),c
  7122  0134' 5027'              	movf	??_check_fs+3,w,c
  7123  0136' 1225'              	iorwf	??_check_fs+1,f,c
  7124  0138' 0E00               	movlw	0
  7125  013A' 1226'              	iorwf	??_check_fs+2,f,c
  7126  013C' 0E46               	movlw	70
  7127  013E' 1825'              	xorwf	??_check_fs+1,w,c
  7128  0140' E106               	bnz	l3245
  7129  0142' 0E41               	movlw	65
  7130  0144' 1826'              	xorwf	??_check_fs+2,w,c
  7131  0146' A4D8               	btfss	status,2,c
  7132  0148' D002               	goto	l377
  7133                           
  7134                           ;pff.c: 731: return 0;
  7135  014A' 0E00               	movlw	0
  7136  014C' 0012               	return	
  7137  014E'                    l377:
  7138  014E'                    l3245:
  7139                           
  7140                           ;pff.c: 732: return 1;
  7141  014E' 0E01               	movlw	1
  7142  0150' 0012               	return	
  7143  0152'                    __end_of_check_fs:
  7144                           	opt stack 0
  7145                           tblptru	equ	0xFF8
  7146                           tblptrh	equ	0xFF7
  7147                           tblptrl	equ	0xFF6
  7148                           tablat	equ	0xFF5
  7149                           prodh	equ	0xFF4
  7150                           prodl	equ	0xFF3
  7151                           postinc0	equ	0xFEE
  7152                           wreg	equ	0xFE8
  7153                           indf1	equ	0xFE7
  7154                           postdec1	equ	0xFE5
  7155                           fsr1h	equ	0xFE2
  7156                           fsr1l	equ	0xFE1
  7157                           indf2	equ	0xFDF
  7158                           postinc2	equ	0xFDE
  7159                           postdec2	equ	0xFDD
  7160                           plusw2	equ	0xFDB
  7161                           fsr2h	equ	0xFDA
  7162                           fsr2l	equ	0xFD9
  7163                           status	equ	0xFD8
  7164                           
  7165 ;; *************** function _disk_readp *****************
  7166 ;; Defined at:
  7167 ;;		line 443 in file "SDCard.c"
  7168 ;; Parameters:    Size  Location     Type
  7169 ;;  rd              2    8[COMRAM] PTR unsigned char 
  7170 ;;		 -> pf_readdir@dir(32), pf_opendir@dir(32), pf_open@dir(32), pf_mount@buf(36), 
  7171 ;;		 -> NULL(0), get_fat@buf(4), data_buffer_32(32), 
  7172 ;;  sector          4   10[COMRAM] unsigned long 
  7173 ;;  offset          2   14[COMRAM] unsigned int 
  7174 ;;  count           2   16[COMRAM] unsigned int 
  7175 ;; Auto vars:     Size  Location     Type
  7176 ;;  start_add       4   23[COMRAM] unsigned long 
  7177 ;;  length          2   28[COMRAM] int 
  7178 ;;  i               2    0        int 
  7179 ;;  buff            1   27[COMRAM] unsigned char 
  7180 ;;  ptr             1   22[COMRAM] unsigned char 
  7181 ;;  res             1    0        enum E14
  7182 ;; Return value:  Size  Location     Type
  7183 ;;                  1    wreg      enum E14
  7184 ;; Registers used:
  7185 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, b
      +temp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, bsr, cstack
  7186 ;; Tracked objects:
  7187 ;;		On entry : 0/0
  7188 ;;		On exit  : 0/0
  7189 ;;		Unchanged: 0/0
  7190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7191 ;;      Params:        10       0       0       0       0       0       0       0       0
  7192 ;;      Locals:         8       0       0       0       0       0       0       0       0
  7193 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7194 ;;      Totals:        22       0       0       0       0       0       0       0       0
  7195 ;;Total ram usage:       22 bytes
  7196 ;; Hardware stack levels used:    1
  7197 ;; Hardware stack levels required when called:    2
  7198 ;; This function calls:
  7199 ;;		_Command
  7200 ;;		_dummy_clocks
  7201 ;;		_proceed
  7202 ;;		_response
  7203 ;; This function is called by:
  7204 ;;		_get_fat
  7205 ;;		_dir_find
  7206 ;;		_check_fs
  7207 ;;		_pf_mount
  7208 ;;		_pf_read
  7209 ;;		_dir_read
  7210 ;; This function uses a non-reentrant model
  7211 ;;
  7212                           
  7213                           	psect	text21
  7214  0000'                    __ptext21:
  7215                           	opt stack 0
  7216  0000'                    _disk_readp:
  7217                           	opt stack 26
  7218                           
  7219                           ;SDCard.c: 450: DRESULT res;
  7220                           ;SDCard.c: 451: unsigned char ptr=0X00,buff;
  7221                           
  7222                           ;incstack = 0
  7223  0000' 0E00               	movlw	0
  7224  0002' 6E16'              	movwf	disk_readp@ptr,c
  7225                           
  7226                           ;SDCard.c: 452: unsigned long int start_add;
  7227                           ;SDCard.c: 453: static unsigned char arr[512];
  7228                           ;SDCard.c: 454: int length,i;
  7229                           ;SDCard.c: 456: if(offset == 0){
  7230  0004' 500E'              	movf	disk_readp@offset,w,c
  7231  0006' 100F'              	iorwf	disk_readp@offset+1,w,c
  7232  0008' A4D8               	btfss	status,2,c
  7233  000A' D085               	goto	l171
  7234                           
  7235                           ;SDCard.c: 457: start_add = ((sector*512));
  7236  000C' C00A' F012'        	movff	disk_readp@sector,??_disk_readp
  7237  0010' C00B' F013'        	movff	disk_readp@sector+1,??_disk_readp+1
  7238  0014' C00C' F014'        	movff	disk_readp@sector+2,??_disk_readp+2
  7239  0018' C00D' F015'        	movff	disk_readp@sector+3,??_disk_readp+3
  7240  001C' 0E09               	movlw	9
  7241  001E'                    u2225:
  7242  001E' 90D8               	bcf	status,0,c
  7243  0020' 3612'              	rlcf	??_disk_readp,f,c
  7244  0022' 3613'              	rlcf	??_disk_readp+1,f,c
  7245  0024' 3614'              	rlcf	??_disk_readp+2,f,c
  7246  0026' 3615'              	rlcf	??_disk_readp+3,f,c
  7247  0028' 2EE8               	decfsz	wreg,f,c
  7248  002A' D7F9               	goto	u2225
  7249  002C' C012' F017'        	movff	??_disk_readp,disk_readp@start_add
  7250  0030' C013' F018'        	movff	??_disk_readp+1,disk_readp@start_add+1
  7251  0034' C014' F019'        	movff	??_disk_readp+2,disk_readp@start_add+2
  7252  0038' C015' F01A'        	movff	??_disk_readp+3,disk_readp@start_add+3
  7253                           
  7254                           ;SDCard.c: 459: dummy_clocks(8);
  7255  003C' 0E00               	movlw	0
  7256  003E' 6E01'              	movwf	?_dummy_clocks+1,c
  7257  0040' 0E08               	movlw	8
  7258  0042' 6E00'              	movwf	?_dummy_clocks,c
  7259  0044' EC00' F000'        	call	_dummy_clocks	;wreg free
  7260                           
  7261                           ;SDCard.c: 460: Command(0X52,start_add,0X00);
  7262  0048' C017' F001'        	movff	disk_readp@start_add,Command@arg
  7263  004C' C018' F002'        	movff	disk_readp@start_add+1,Command@arg+1
  7264  0050' C019' F003'        	movff	disk_readp@start_add+2,Command@arg+2
  7265  0054' C01A' F004'        	movff	disk_readp@start_add+3,Command@arg+3
  7266  0058' 0E00               	movlw	0
  7267  005A' 6E05'              	movwf	Command@CRC,c
  7268  005C' 0E52               	movlw	82
  7269  005E' EC00' F000'        	call	_Command
  7270                           
  7271                           ;SDCard.c: 461: proceed();
  7272  0062' EC00' F000'        	call	_proceed	;wreg free
  7273  0066'                    
  7274                           ;SDCard.c: 463: buff = response();
  7275  0066' EC00' F000'        	call	_response	;wreg free
  7276  006A' 6E1B'              	movwf	disk_readp@buff,c
  7277                           
  7278                           ;SDCard.c: 464: }while(buff!=0x00);
  7279  006C' 501B'              	movf	disk_readp@buff,w,c
  7280  006E' A4D8               	btfss	status,2,c
  7281  0070' D7FA               	goto	l172
  7282                           
  7283                           ;SDCard.c: 465: proceed();
  7284  0072' EC00' F000'        	call	_proceed	;wreg free
  7285  0076'                    
  7286                           ;SDCard.c: 467: buff = response();
  7287  0076' EC00' F000'        	call	_response	;wreg free
  7288  007A' 6E1B'              	movwf	disk_readp@buff,c
  7289                           
  7290                           ;SDCard.c: 468: }while(buff!=0xFE);
  7291  007C' 0EFE               	movlw	254
  7292  007E' 181B'              	xorwf	disk_readp@buff,w,c
  7293  0080' A4D8               	btfss	status,2,c
  7294  0082' D7F9               	goto	l174
  7295                           
  7296                           ;SDCard.c: 469: length = 0;
  7297  0084' 0E00               	movlw	0
  7298  0086' 6E1D'              	movwf	disk_readp@length+1,c
  7299  0088' 0E00               	movlw	0
  7300  008A' 6E1C'              	movwf	disk_readp@length,c
  7301                           
  7302                           ;SDCard.c: 470: while ( length < count )
  7303  008C' D00B               	goto	l176
  7304  008E'                    
  7305                           ;SDCard.c: 471: {
  7306                           ;SDCard.c: 472: arr[length] = response();
  7307  008E' 0E00'              	movlw	low disk_readp@arr
  7308  0090' 241C'              	addwf	disk_readp@length,w,c
  7309  0092' 6ED9               	movwf	fsr2l,c
  7310  0094' 0E00'              	movlw	high disk_readp@arr
  7311  0096' 201D'              	addwfc	disk_readp@length+1,w,c
  7312  0098' 6EDA               	movwf	fsr2h,c
  7313  009A' EC00' F000'        	call	_response	;wreg free
  7314  009E' 6EDF               	movwf	indf2,c
  7315                           
  7316                           ;SDCard.c: 473: length++;
  7317  00A0' 4A1C'              	infsnz	disk_readp@length,f,c
  7318  00A2' 2A1D'              	incf	disk_readp@length+1,f,c
  7319  00A4'                    l176:
  7320  00A4' 5010'              	movf	disk_readp@count,w,c
  7321  00A6' 5C1C'              	subwf	disk_readp@length,w,c
  7322  00A8' 5011'              	movf	disk_readp@count+1,w,c
  7323  00AA' 581D'              	subwfb	disk_readp@length+1,w,c
  7324  00AC' A0D8               	btfss	status,0,c
  7325  00AE' D7EF               	goto	l177
  7326                           
  7327                           ;SDCard.c: 474: }
  7328                           ;SDCard.c: 476: dummy_clocks(8);
  7329  00B0' 0E00               	movlw	0
  7330  00B2' 6E01'              	movwf	?_dummy_clocks+1,c
  7331  00B4' 0E08               	movlw	8
  7332  00B6' 6E00'              	movwf	?_dummy_clocks,c
  7333  00B8' EC00' F000'        	call	_dummy_clocks	;wreg free
  7334                           
  7335                           ;SDCard.c: 477: Command(0X4C,0X00000000,0X00);
  7336  00BC' 0E00               	movlw	0
  7337  00BE' 6E01'              	movwf	Command@arg,c
  7338  00C0' 0E00               	movlw	0
  7339  00C2' 6E02'              	movwf	Command@arg+1,c
  7340  00C4' 0E00               	movlw	0
  7341  00C6' 6E03'              	movwf	Command@arg+2,c
  7342  00C8' 0E00               	movlw	0
  7343  00CA' 6E04'              	movwf	Command@arg+3,c
  7344  00CC' 0E00               	movlw	0
  7345  00CE' 6E05'              	movwf	Command@CRC,c
  7346  00D0' 0E4C               	movlw	76
  7347  00D2' EC00' F000'        	call	_Command
  7348                           
  7349                           ;SDCard.c: 478: proceed();
  7350  00D6' EC00' F000'        	call	_proceed	;wreg free
  7351  00DA'                    
  7352                           ;SDCard.c: 480: buff = response();
  7353  00DA' EC00' F000'        	call	_response	;wreg free
  7354  00DE' 6E1B'              	movwf	disk_readp@buff,c
  7355                           
  7356                           ;SDCard.c: 481: }while(buff!=0xFF);
  7357  00E0' 281B'              	incf	disk_readp@buff,w,c
  7358  00E2' A4D8               	btfss	status,2,c
  7359  00E4' D7FA               	goto	l179
  7360                           
  7361                           ;SDCard.c: 483: length = 0;
  7362  00E6' 0E00               	movlw	0
  7363  00E8' 6E1D'              	movwf	disk_readp@length+1,c
  7364  00EA' 0E00               	movlw	0
  7365  00EC' 6E1C'              	movwf	disk_readp@length,c
  7366                           
  7367                           ;SDCard.c: 485: while(arr[length]!='\0')
  7368  00EE' D002               	goto	l181
  7369  00F0'                    
  7370                           ;SDCard.c: 486: {
  7371                           ;SDCard.c: 488: length++;
  7372  00F0' 4A1C'              	infsnz	disk_readp@length,f,c
  7373  00F2' 2A1D'              	incf	disk_readp@length+1,f,c
  7374  00F4'                    l181:
  7375  00F4' 0E00'              	movlw	low disk_readp@arr
  7376  00F6' 241C'              	addwf	disk_readp@length,w,c
  7377  00F8' 6ED9               	movwf	fsr2l,c
  7378  00FA' 0E00'              	movlw	high disk_readp@arr
  7379  00FC' 201D'              	addwfc	disk_readp@length+1,w,c
  7380  00FE' 6EDA               	movwf	fsr2h,c
  7381  0100' 50DF               	movf	indf2,w,c
  7382  0102' A4D8               	btfss	status,2,c
  7383  0104' D7F5               	goto	l182
  7384                           
  7385                           ;SDCard.c: 489: }
  7386                           ;SDCard.c: 491: *rd = length;
  7387  0106' C008' FFD9         	movff	disk_readp@rd,fsr2l
  7388  010A' C009' FFDA         	movff	disk_readp@rd+1,fsr2h
  7389  010E' C01C' FFDF         	movff	disk_readp@length,indf2
  7390                           
  7391                           ;SDCard.c: 492: return RES_OK;
  7392  0112' 0E00               	movlw	0
  7393                           
  7394                           ;SDCard.c: 493: }
  7395  0114' 0012               	return	
  7396  0116'                    l171:
  7397                           
  7398                           ;SDCard.c: 494: else
  7399                           ;SDCard.c: 495: {
  7400                           ;SDCard.c: 496: start_add = (sector*512);
  7401  0116' C00A' F012'        	movff	disk_readp@sector,??_disk_readp
  7402  011A' C00B' F013'        	movff	disk_readp@sector+1,??_disk_readp+1
  7403  011E' C00C' F014'        	movff	disk_readp@sector+2,??_disk_readp+2
  7404  0122' C00D' F015'        	movff	disk_readp@sector+3,??_disk_readp+3
  7405  0126' 0E09               	movlw	9
  7406  0128'                    u2285:
  7407  0128' 90D8               	bcf	status,0,c
  7408  012A' 3612'              	rlcf	??_disk_readp,f,c
  7409  012C' 3613'              	rlcf	??_disk_readp+1,f,c
  7410  012E' 3614'              	rlcf	??_disk_readp+2,f,c
  7411  0130' 3615'              	rlcf	??_disk_readp+3,f,c
  7412  0132' 2EE8               	decfsz	wreg,f,c
  7413  0134' D7F9               	goto	u2285
  7414  0136' C012' F017'        	movff	??_disk_readp,disk_readp@start_add
  7415  013A' C013' F018'        	movff	??_disk_readp+1,disk_readp@start_add+1
  7416  013E' C014' F019'        	movff	??_disk_readp+2,disk_readp@start_add+2
  7417  0142' C015' F01A'        	movff	??_disk_readp+3,disk_readp@start_add+3
  7418                           
  7419                           ;SDCard.c: 498: length = 0;
  7420  0146' 0E00               	movlw	0
  7421  0148' 6E1D'              	movwf	disk_readp@length+1,c
  7422  014A' 0E00               	movlw	0
  7423  014C' 6E1C'              	movwf	disk_readp@length,c
  7424                           
  7425                           ;SDCard.c: 499: while(length<512)
  7426  014E' D00A               	goto	l186
  7427  0150'                    
  7428                           ;SDCard.c: 500: {
  7429                           ;SDCard.c: 501: arr[length] = 0;
  7430  0150' 0E00'              	movlw	low disk_readp@arr
  7431  0152' 241C'              	addwf	disk_readp@length,w,c
  7432  0154' 6ED9               	movwf	fsr2l,c
  7433  0156' 0E00'              	movlw	high disk_readp@arr
  7434  0158' 201D'              	addwfc	disk_readp@length+1,w,c
  7435  015A' 6EDA               	movwf	fsr2h,c
  7436  015C' 0E00               	movlw	0
  7437  015E' 6EDF               	movwf	indf2,c
  7438                           
  7439                           ;SDCard.c: 502: length++;
  7440  0160' 4A1C'              	infsnz	disk_readp@length,f,c
  7441  0162' 2A1D'              	incf	disk_readp@length+1,f,c
  7442  0164'                    l186:
  7443  0164' BE1D'              	btfsc	disk_readp@length+1,7,c
  7444  0166' D7F4               	goto	l187
  7445  0168' 0E02               	movlw	2
  7446  016A' 5C1D'              	subwf	disk_readp@length+1,w,c
  7447  016C' A0D8               	btfss	status,0,c
  7448  016E' D7F0               	goto	l187
  7449                           
  7450                           ;SDCard.c: 503: }
  7451                           ;SDCard.c: 505: dummy_clocks(8);
  7452  0170' 0E00               	movlw	0
  7453  0172' 6E01'              	movwf	?_dummy_clocks+1,c
  7454  0174' 0E08               	movlw	8
  7455  0176' 6E00'              	movwf	?_dummy_clocks,c
  7456  0178' EC00' F000'        	call	_dummy_clocks	;wreg free
  7457                           
  7458                           ;SDCard.c: 507: Command(0X51,start_add,0X00);
  7459  017C' C017' F001'        	movff	disk_readp@start_add,Command@arg
  7460  0180' C018' F002'        	movff	disk_readp@start_add+1,Command@arg+1
  7461  0184' C019' F003'        	movff	disk_readp@start_add+2,Command@arg+2
  7462  0188' C01A' F004'        	movff	disk_readp@start_add+3,Command@arg+3
  7463  018C' 0E00               	movlw	0
  7464  018E' 6E05'              	movwf	Command@CRC,c
  7465  0190' 0E51               	movlw	81
  7466  0192' EC00' F000'        	call	_Command
  7467                           
  7468                           ;SDCard.c: 508: proceed();
  7469  0196' EC00' F000'        	call	_proceed	;wreg free
  7470  019A'                    
  7471                           ;SDCard.c: 510: buff = response();
  7472  019A' EC00' F000'        	call	_response	;wreg free
  7473  019E' 6E1B'              	movwf	disk_readp@buff,c
  7474                           
  7475                           ;SDCard.c: 511: }while(buff!=0x00);
  7476  01A0' 501B'              	movf	disk_readp@buff,w,c
  7477  01A2' A4D8               	btfss	status,2,c
  7478  01A4' D7FA               	goto	l189
  7479  01A6'                    u2300:
  7480                           
  7481                           ;SDCard.c: 513: buff = response();
  7482                           
  7483                           ;SDCard.c: 512: do{
  7484  01A6' EC00' F000'        	call	_response	;wreg free
  7485  01AA' 6E1B'              	movwf	disk_readp@buff,c
  7486                           
  7487                           ;SDCard.c: 514: }while(buff!=0xFE);
  7488  01AC' 0EFE               	movlw	254
  7489  01AE' 181B'              	xorwf	disk_readp@buff,w,c
  7490  01B0' A4D8               	btfss	status,2,c
  7491  01B2' D7F9               	goto	u2300
  7492                           
  7493                           ;SDCard.c: 516: length = 0;
  7494  01B4' 0E00               	movlw	0
  7495  01B6' 6E1D'              	movwf	disk_readp@length+1,c
  7496  01B8' 0E00               	movlw	0
  7497  01BA' 6E1C'              	movwf	disk_readp@length,c
  7498                           
  7499                           ;SDCard.c: 517: while ( length < 512 )
  7500  01BC' D045               	goto	u2340
  7501  01BE'                    l2685:
  7502                           
  7503                           ;SDCard.c: 520: {
  7504                           ;SDCard.c: 521: arr[length] = response();
  7505  01BE' 0E00'              	movlw	low disk_readp@arr
  7506  01C0' 241C'              	addwf	disk_readp@length,w,c
  7507  01C2' 6ED9               	movwf	fsr2l,c
  7508  01C4' 0E00'              	movlw	high disk_readp@arr
  7509  01C6' 201D'              	addwfc	disk_readp@length+1,w,c
  7510  01C8' 6EDA               	movwf	fsr2h,c
  7511  01CA' EC00' F000'        	call	_response	;wreg free
  7512  01CE' 6EDF               	movwf	indf2,c
  7513                           
  7514                           ;SDCard.c: 522: length++;
  7515  01D0' 4A1C'              	infsnz	disk_readp@length,f,c
  7516  01D2' 2A1D'              	incf	disk_readp@length+1,f,c
  7517  01D4' 060E'              	decf	disk_readp@offset,f,c
  7518  01D6' A0D8               	btfss	status,0,c
  7519  01D8' 060F'              	decf	disk_readp@offset+1,f,c
  7520  01DA' 280E'              	incf	disk_readp@offset,w,c
  7521  01DC' E1F0               	bnz	l2685
  7522  01DE' 280F'              	incf	disk_readp@offset+1,w,c
  7523  01E0' B4D8               	btfsc	status,2,c
  7524  01E2' D018               	goto	l198
  7525  01E4' D7EC               	goto	l196
  7526  01E6'                    l2691:
  7527                           
  7528                           ;SDCard.c: 525: {
  7529                           ;SDCard.c: 526: *rd = response();
  7530  01E6' EC00' F000'        	call	_response	;wreg free
  7531  01EA' C008' FFD9         	movff	disk_readp@rd,fsr2l
  7532  01EE' C009' FFDA         	movff	disk_readp@rd+1,fsr2h
  7533  01F2' 6EDF               	movwf	indf2,c
  7534                           
  7535                           ;SDCard.c: 527: arr[length] = *rd;
  7536  01F4' C008' FFD9         	movff	disk_readp@rd,fsr2l
  7537  01F8' C009' FFDA         	movff	disk_readp@rd+1,fsr2h
  7538  01FC' 0E00'              	movlw	low disk_readp@arr
  7539  01FE' 241C'              	addwf	disk_readp@length,w,c
  7540  0200' 6EE1               	movwf	fsr1l,c
  7541  0202' 0E00'              	movlw	high disk_readp@arr
  7542  0204' 201D'              	addwfc	disk_readp@length+1,w,c
  7543  0206' 6EE2               	movwf	fsr1h,c
  7544  0208' CFDF FFE7          	movff	indf2,indf1
  7545                           
  7546                           ;SDCard.c: 528: rd++;
  7547  020C' 4A08'              	infsnz	disk_readp@rd,f,c
  7548  020E' 2A09'              	incf	disk_readp@rd+1,f,c
  7549                           
  7550                           ;SDCard.c: 529: length++;
  7551  0210' 4A1C'              	infsnz	disk_readp@length,f,c
  7552  0212' 2A1D'              	incf	disk_readp@length+1,f,c
  7553  0214'                    l198:
  7554  0214' 0610'              	decf	disk_readp@count,f,c
  7555  0216' A0D8               	btfss	status,0,c
  7556  0218' 0611'              	decf	disk_readp@count+1,f,c
  7557  021A' 2810'              	incf	disk_readp@count,w,c
  7558  021C' E1E4               	bnz	l2691
  7559  021E' 2811'              	incf	disk_readp@count+1,w,c
  7560  0220' B4D8               	btfsc	status,2,c
  7561  0222' D00C               	goto	l201
  7562  0224' D7E0               	goto	l199
  7563  0226'                    
  7564                           ;SDCard.c: 532: {
  7565                           ;SDCard.c: 533: arr[length] = response();
  7566  0226' 0E00'              	movlw	low disk_readp@arr
  7567  0228' 241C'              	addwf	disk_readp@length,w,c
  7568  022A' 6ED9               	movwf	fsr2l,c
  7569  022C' 0E00'              	movlw	high disk_readp@arr
  7570  022E' 201D'              	addwfc	disk_readp@length+1,w,c
  7571  0230' 6EDA               	movwf	fsr2h,c
  7572  0232' EC00' F000'        	call	_response	;wreg free
  7573  0236' 6EDF               	movwf	indf2,c
  7574                           
  7575                           ;SDCard.c: 534: length++;
  7576  0238' 4A1C'              	infsnz	disk_readp@length,f,c
  7577  023A' 2A1D'              	incf	disk_readp@length+1,f,c
  7578  023C'                    l201:
  7579  023C' BE1D'              	btfsc	disk_readp@length+1,7,c
  7580  023E' D7F3               	goto	l202
  7581  0240' 0E02               	movlw	2
  7582  0242' 5C1D'              	subwf	disk_readp@length+1,w,c
  7583  0244' A0D8               	btfss	status,0,c
  7584  0246' D7EF               	goto	l202
  7585  0248'                    u2340:
  7586  0248' BE1D'              	btfsc	disk_readp@length+1,7,c
  7587  024A' D7C4               	goto	l195
  7588  024C' 0E02               	movlw	2
  7589  024E' 5C1D'              	subwf	disk_readp@length+1,w,c
  7590  0250' A0D8               	btfss	status,0,c
  7591  0252' D7C0               	goto	l195
  7592                           
  7593                           ;SDCard.c: 535: }
  7594                           ;SDCard.c: 536: }
  7595                           ;SDCard.c: 539: Command(0X4C,0X00000000,0X00);
  7596  0254' 0E00               	movlw	0
  7597  0256' 6E01'              	movwf	Command@arg,c
  7598  0258' 0E00               	movlw	0
  7599  025A' 6E02'              	movwf	Command@arg+1,c
  7600  025C' 0E00               	movlw	0
  7601  025E' 6E03'              	movwf	Command@arg+2,c
  7602  0260' 0E00               	movlw	0
  7603  0262' 6E04'              	movwf	Command@arg+3,c
  7604  0264' 0E00               	movlw	0
  7605  0266' 6E05'              	movwf	Command@CRC,c
  7606  0268' 0E4C               	movlw	76
  7607  026A' EC00' F000'        	call	_Command
  7608                           
  7609                           ;SDCard.c: 540: proceed();
  7610  026E' EC00' F000'        	call	_proceed	;wreg free
  7611  0272'                    
  7612                           ;SDCard.c: 542: buff = response();
  7613  0272' EC00' F000'        	call	_response	;wreg free
  7614  0276' 6E1B'              	movwf	disk_readp@buff,c
  7615                           
  7616                           ;SDCard.c: 543: }while(buff!=0xFF);
  7617  0278' 281B'              	incf	disk_readp@buff,w,c
  7618  027A' A4D8               	btfss	status,2,c
  7619  027C' D7FA               	goto	l205
  7620                           
  7621                           ;SDCard.c: 545: length = 0;
  7622  027E' 0E00               	movlw	0
  7623  0280' 6E1D'              	movwf	disk_readp@length+1,c
  7624  0282' 0E00               	movlw	0
  7625  0284' 6E1C'              	movwf	disk_readp@length,c
  7626                           
  7627                           ;SDCard.c: 547: if(flag == 1){
  7628  0286' 0100               	movlb	0	; () banked
  7629  0288' 0500'              	decf	_flag& (0+255),w,b
  7630  028A' 1100'              	iorwf	(_flag+1)& (0+255),w,b
  7631  028C' B4D8               	btfsc	status,2,c
  7632  028E' D003               	goto	l208
  7633  0290' D00C               	goto	l207
  7634  0292'                    
  7635                           ;SDCard.c: 549: {
  7636                           ;SDCard.c: 550: length++;
  7637                           
  7638                           ; BSR set to: 0
  7639  0292' 4A1C'              	infsnz	disk_readp@length,f,c
  7640  0294' 2A1D'              	incf	disk_readp@length+1,f,c
  7641  0296'                    l208:
  7642  0296' 0E00'              	movlw	low disk_readp@arr
  7643  0298' 241C'              	addwf	disk_readp@length,w,c
  7644  029A' 6ED9               	movwf	fsr2l,c
  7645  029C' 0E00'              	movlw	high disk_readp@arr
  7646  029E' 201D'              	addwfc	disk_readp@length+1,w,c
  7647  02A0' 6EDA               	movwf	fsr2h,c
  7648  02A2' 50DF               	movf	indf2,w,c
  7649  02A4' B4D8               	btfsc	status,2,c
  7650  02A6' 0012               	return	
  7651  02A8' D7F4               	goto	l209
  7652  02AA'                    l207:
  7653                           
  7654                           ;SDCard.c: 553: else
  7655                           ;SDCard.c: 556: return RES_OK;
  7656  02AA' 0E00               	movlw	0
  7657  02AC' 0012               	return	
  7658  02AE'                    __end_of_disk_readp:
  7659                           	opt stack 0
  7660                           tblptru	equ	0xFF8
  7661                           tblptrh	equ	0xFF7
  7662                           tblptrl	equ	0xFF6
  7663                           tablat	equ	0xFF5
  7664                           prodh	equ	0xFF4
  7665                           prodl	equ	0xFF3
  7666                           postinc0	equ	0xFEE
  7667                           wreg	equ	0xFE8
  7668                           indf1	equ	0xFE7
  7669                           postdec1	equ	0xFE5
  7670                           fsr1h	equ	0xFE2
  7671                           fsr1l	equ	0xFE1
  7672                           indf2	equ	0xFDF
  7673                           postinc2	equ	0xFDE
  7674                           postdec2	equ	0xFDD
  7675                           plusw2	equ	0xFDB
  7676                           fsr2h	equ	0xFDA
  7677                           fsr2l	equ	0xFD9
  7678                           status	equ	0xFD8
  7679                           
  7680 ;; *************** function _response *****************
  7681 ;; Defined at:
  7682 ;;		line 300 in file "SDCard.c"
  7683 ;; Parameters:    Size  Location     Type
  7684 ;;		None
  7685 ;; Auto vars:     Size  Location     Type
  7686 ;;  buff            1    0[COMRAM] unsigned char 
  7687 ;; Return value:  Size  Location     Type
  7688 ;;                  1    wreg      unsigned char 
  7689 ;; Registers used:
  7690 ;;		wreg, status,2, cstack
  7691 ;; Tracked objects:
  7692 ;;		On entry : 0/0
  7693 ;;		On exit  : 0/0
  7694 ;;		Unchanged: 0/0
  7695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7696 ;;      Params:         0       0       0       0       0       0       0       0       0
  7697 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7698 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7699 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7700 ;;Total ram usage:        1 bytes
  7701 ;; Hardware stack levels used:    1
  7702 ;; Hardware stack levels required when called:    1
  7703 ;; This function calls:
  7704 ;;		_recebe_dado_SPI
  7705 ;; This function is called by:
  7706 ;;		_reset
  7707 ;;		_disk_initialize
  7708 ;;		_disk_readp
  7709 ;;		_disk_writep
  7710 ;; This function uses a non-reentrant model
  7711 ;;
  7712                           
  7713                           	psect	text22
  7714  0000'                    __ptext22:
  7715                           	opt stack 0
  7716  0000'                    _response:
  7717                           	opt stack 26
  7718                           
  7719                           ;SDCard.c: 302: unsigned char buff;
  7720                           ;SDCard.c: 303: LATBbits.LATB4 = 0;
  7721                           
  7722                           ;incstack = 0
  7723  0000' 988A               	bcf	3978,4,c	;volatile
  7724                           
  7725                           ;SDCard.c: 304: buff= recebe_dado_SPI();
  7726  0002' EC00' F000'        	call	_recebe_dado_SPI	;wreg free
  7727  0006' 6E00'              	movwf	response@buff,c
  7728                           
  7729                           ;SDCard.c: 305: LATBbits.LATB4 = 1;
  7730  0008' 888A               	bsf	3978,4,c	;volatile
  7731                           
  7732                           ;SDCard.c: 306: return buff;
  7733  000A' 5000'              	movf	response@buff,w,c
  7734  000C' 0012               	return	
  7735  000E'                    __end_of_response:
  7736                           	opt stack 0
  7737                           tblptru	equ	0xFF8
  7738                           tblptrh	equ	0xFF7
  7739                           tblptrl	equ	0xFF6
  7740                           tablat	equ	0xFF5
  7741                           prodh	equ	0xFF4
  7742                           prodl	equ	0xFF3
  7743                           postinc0	equ	0xFEE
  7744                           wreg	equ	0xFE8
  7745                           indf1	equ	0xFE7
  7746                           postdec1	equ	0xFE5
  7747                           fsr1h	equ	0xFE2
  7748                           fsr1l	equ	0xFE1
  7749                           indf2	equ	0xFDF
  7750                           postinc2	equ	0xFDE
  7751                           postdec2	equ	0xFDD
  7752                           plusw2	equ	0xFDB
  7753                           fsr2h	equ	0xFDA
  7754                           fsr2l	equ	0xFD9
  7755                           status	equ	0xFD8
  7756                           
  7757 ;; *************** function _recebe_dado_SPI *****************
  7758 ;; Defined at:
  7759 ;;		line 104 in file "SPI.c"
  7760 ;; Parameters:    Size  Location     Type
  7761 ;;		None
  7762 ;; Auto vars:     Size  Location     Type
  7763 ;;		None
  7764 ;; Return value:  Size  Location     Type
  7765 ;;                  1    wreg      unsigned char 
  7766 ;; Registers used:
  7767 ;;		wreg, status,2
  7768 ;; Tracked objects:
  7769 ;;		On entry : 0/0
  7770 ;;		On exit  : 0/0
  7771 ;;		Unchanged: 0/0
  7772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7773 ;;      Params:         0       0       0       0       0       0       0       0       0
  7774 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7775 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7776 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7777 ;;Total ram usage:        0 bytes
  7778 ;; Hardware stack levels used:    1
  7779 ;; This function calls:
  7780 ;;		Nothing
  7781 ;; This function is called by:
  7782 ;;		_response
  7783 ;; This function uses a non-reentrant model
  7784 ;;
  7785                           
  7786                           	psect	text23
  7787  0000'                    __ptext23:
  7788                           	opt stack 0
  7789  0000'                    _recebe_dado_SPI:
  7790                           	opt stack 26
  7791                           
  7792                           ;SPI.c: 106: PIR1bits.SSPIF = 0;
  7793                           
  7794                           ;incstack = 0
  7795  0000' 969E               	bcf	3998,3,c	;volatile
  7796                           
  7797                           ;SPI.c: 107: SSPBUF = 0x00;
  7798  0002' 0E00               	movlw	0
  7799  0004' 6EC9               	movwf	4041,c	;volatile
  7800  0006' A69E               	btfss	3998,3,c	;volatile
  7801  0008' D7FE               	goto	l99
  7802                           
  7803                           ;SPI.c: 109: return (SSPBUF);
  7804  000A' 50C9               	movf	4041,w,c	;volatile
  7805  000C' 0012               	return	
  7806  000E'                    __end_of_recebe_dado_SPI:
  7807                           	opt stack 0
  7808                           tblptru	equ	0xFF8
  7809                           tblptrh	equ	0xFF7
  7810                           tblptrl	equ	0xFF6
  7811                           tablat	equ	0xFF5
  7812                           prodh	equ	0xFF4
  7813                           prodl	equ	0xFF3
  7814                           postinc0	equ	0xFEE
  7815                           wreg	equ	0xFE8
  7816                           indf1	equ	0xFE7
  7817                           postdec1	equ	0xFE5
  7818                           fsr1h	equ	0xFE2
  7819                           fsr1l	equ	0xFE1
  7820                           indf2	equ	0xFDF
  7821                           postinc2	equ	0xFDE
  7822                           postdec2	equ	0xFDD
  7823                           plusw2	equ	0xFDB
  7824                           fsr2h	equ	0xFDA
  7825                           fsr2l	equ	0xFD9
  7826                           status	equ	0xFD8
  7827                           
  7828 ;; *************** function _proceed *****************
  7829 ;; Defined at:
  7830 ;;		line 321 in file "SDCard.c"
  7831 ;; Parameters:    Size  Location     Type
  7832 ;;		None
  7833 ;; Auto vars:     Size  Location     Type
  7834 ;;		None
  7835 ;; Return value:  Size  Location     Type
  7836 ;;                  1    wreg      void 
  7837 ;; Registers used:
  7838 ;;		wreg, cstack
  7839 ;; Tracked objects:
  7840 ;;		On entry : 0/0
  7841 ;;		On exit  : 0/0
  7842 ;;		Unchanged: 0/0
  7843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7844 ;;      Params:         0       0       0       0       0       0       0       0       0
  7845 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7846 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7847 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7848 ;;Total ram usage:        0 bytes
  7849 ;; Hardware stack levels used:    1
  7850 ;; Hardware stack levels required when called:    1
  7851 ;; This function calls:
  7852 ;;		_WriteSPI_
  7853 ;; This function is called by:
  7854 ;;		_reset
  7855 ;;		_disk_initialize
  7856 ;;		_disk_readp
  7857 ;;		_disk_writep
  7858 ;; This function uses a non-reentrant model
  7859 ;;
  7860                           
  7861                           	psect	text24
  7862  0000'                    __ptext24:
  7863                           	opt stack 0
  7864  0000'                    _proceed:
  7865                           	opt stack 26
  7866                           
  7867                           ;SDCard.c: 323: LATBbits.LATB4 = 0;
  7868                           
  7869                           ;incstack = 0
  7870  0000' 988A               	bcf	3978,4,c	;volatile
  7871                           
  7872                           ;SDCard.c: 324: WriteSPI_(0XFF);
  7873  0002' 0EFF               	movlw	255
  7874  0004' EC00' F000'        	call	_WriteSPI_
  7875                           
  7876                           ;SDCard.c: 325: LATBbits.LATB4 = 1;
  7877  0008' 888A               	bsf	3978,4,c	;volatile
  7878  000A' 0012               	return		;funcret
  7879  000C'                    __end_of_proceed:
  7880                           	opt stack 0
  7881                           tblptru	equ	0xFF8
  7882                           tblptrh	equ	0xFF7
  7883                           tblptrl	equ	0xFF6
  7884                           tablat	equ	0xFF5
  7885                           prodh	equ	0xFF4
  7886                           prodl	equ	0xFF3
  7887                           postinc0	equ	0xFEE
  7888                           wreg	equ	0xFE8
  7889                           indf1	equ	0xFE7
  7890                           postdec1	equ	0xFE5
  7891                           fsr1h	equ	0xFE2
  7892                           fsr1l	equ	0xFE1
  7893                           indf2	equ	0xFDF
  7894                           postinc2	equ	0xFDE
  7895                           postdec2	equ	0xFDD
  7896                           plusw2	equ	0xFDB
  7897                           fsr2h	equ	0xFDA
  7898                           fsr2l	equ	0xFD9
  7899                           status	equ	0xFD8
  7900                           
  7901 ;; *************** function _Command *****************
  7902 ;; Defined at:
  7903 ;;		line 330 in file "SDCard.c"
  7904 ;; Parameters:    Size  Location     Type
  7905 ;;  CMD             1    wreg     unsigned char 
  7906 ;;  arg             4    1[COMRAM] unsigned long 
  7907 ;;  CRC             1    5[COMRAM] unsigned char 
  7908 ;; Auto vars:     Size  Location     Type
  7909 ;;  CMD             1    6[COMRAM] unsigned char 
  7910 ;;  argument        1    7[COMRAM] unsigned char 
  7911 ;; Return value:  Size  Location     Type
  7912 ;;                  1    wreg      void 
  7913 ;; Registers used:
  7914 ;;		wreg, status,2, cstack
  7915 ;; Tracked objects:
  7916 ;;		On entry : 0/0
  7917 ;;		On exit  : 0/0
  7918 ;;		Unchanged: 0/0
  7919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7920 ;;      Params:         5       0       0       0       0       0       0       0       0
  7921 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7922 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7923 ;;      Totals:         7       0       0       0       0       0       0       0       0
  7924 ;;Total ram usage:        7 bytes
  7925 ;; Hardware stack levels used:    1
  7926 ;; Hardware stack levels required when called:    1
  7927 ;; This function calls:
  7928 ;;		_WriteSPI_
  7929 ;; This function is called by:
  7930 ;;		_reset
  7931 ;;		_disk_initialize
  7932 ;;		_disk_readp
  7933 ;;		_disk_writep
  7934 ;; This function uses a non-reentrant model
  7935 ;;
  7936                           
  7937                           	psect	text25
  7938  0000'                    __ptext25:
  7939                           	opt stack 0
  7940  0000'                    _Command:
  7941                           	opt stack 26
  7942                           
  7943                           ;incstack = 0
  7944                           ;Command@CMD stored from wreg
  7945  0000' 6E06'              	movwf	Command@CMD,c
  7946                           
  7947                           ;SDCard.c: 332: unsigned char argument = arg>>24;
  7948  0002' C004' F007'        	movff	Command@arg+3,Command@argument
  7949                           
  7950                           ;SDCard.c: 333: WriteSPI_(0xFF);
  7951  0006' 0EFF               	movlw	255
  7952  0008' EC00' F000'        	call	_WriteSPI_
  7953                           
  7954                           ;SDCard.c: 334: WriteSPI_(CMD);
  7955  000C' 5006'              	movf	Command@CMD,w,c
  7956  000E' EC00' F000'        	call	_WriteSPI_
  7957                           
  7958                           ;SDCard.c: 335: WriteSPI_(argument);
  7959  0012' 5007'              	movf	Command@argument,w,c
  7960  0014' EC00' F000'        	call	_WriteSPI_
  7961                           
  7962                           ;SDCard.c: 336: argument = arg>>16;
  7963  0018' C003' F007'        	movff	Command@arg+2,Command@argument
  7964                           
  7965                           ;SDCard.c: 337: WriteSPI_(argument);
  7966  001C' 5007'              	movf	Command@argument,w,c
  7967  001E' EC00' F000'        	call	_WriteSPI_
  7968                           
  7969                           ;SDCard.c: 338: argument = arg>>8;
  7970  0022' C002' F007'        	movff	Command@arg+1,Command@argument
  7971                           
  7972                           ;SDCard.c: 339: WriteSPI_(argument);
  7973  0026' 5007'              	movf	Command@argument,w,c
  7974  0028' EC00' F000'        	call	_WriteSPI_
  7975                           
  7976                           ;SDCard.c: 340: argument = arg;
  7977  002C' C001' F007'        	movff	Command@arg,Command@argument
  7978                           
  7979                           ;SDCard.c: 341: WriteSPI_(argument);
  7980  0030' 5007'              	movf	Command@argument,w,c
  7981  0032' EC00' F000'        	call	_WriteSPI_
  7982                           
  7983                           ;SDCard.c: 342: WriteSPI_(CRC);
  7984  0036' 5005'              	movf	Command@CRC,w,c
  7985  0038' EC00' F000'        	call	_WriteSPI_
  7986  003C' 0012               	return		;funcret
  7987  003E'                    __end_of_Command:
  7988                           	opt stack 0
  7989                           tblptru	equ	0xFF8
  7990                           tblptrh	equ	0xFF7
  7991                           tblptrl	equ	0xFF6
  7992                           tablat	equ	0xFF5
  7993                           prodh	equ	0xFF4
  7994                           prodl	equ	0xFF3
  7995                           postinc0	equ	0xFEE
  7996                           wreg	equ	0xFE8
  7997                           indf1	equ	0xFE7
  7998                           postdec1	equ	0xFE5
  7999                           fsr1h	equ	0xFE2
  8000                           fsr1l	equ	0xFE1
  8001                           indf2	equ	0xFDF
  8002                           postinc2	equ	0xFDE
  8003                           postdec2	equ	0xFDD
  8004                           plusw2	equ	0xFDB
  8005                           fsr2h	equ	0xFDA
  8006                           fsr2l	equ	0xFD9
  8007                           status	equ	0xFD8
  8008                           
  8009 ;; *************** function _WriteSPI_ *****************
  8010 ;; Defined at:
  8011 ;;		line 119 in file "SPI.c"
  8012 ;; Parameters:    Size  Location     Type
  8013 ;;  dado            1    wreg     unsigned char 
  8014 ;; Auto vars:     Size  Location     Type
  8015 ;;  dado            1    0[COMRAM] unsigned char 
  8016 ;; Return value:  Size  Location     Type
  8017 ;;                  1    wreg      unsigned char 
  8018 ;; Registers used:
  8019 ;;		wreg
  8020 ;; Tracked objects:
  8021 ;;		On entry : 0/0
  8022 ;;		On exit  : 0/0
  8023 ;;		Unchanged: 0/0
  8024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8025 ;;      Params:         0       0       0       0       0       0       0       0       0
  8026 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8027 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8028 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8029 ;;Total ram usage:        1 bytes
  8030 ;; Hardware stack levels used:    1
  8031 ;; This function calls:
  8032 ;;		Nothing
  8033 ;; This function is called by:
  8034 ;;		_proceed
  8035 ;;		_Command
  8036 ;;		_disk_writep
  8037 ;;		_clock_simulado
  8038 ;; This function uses a non-reentrant model
  8039 ;;
  8040                           
  8041                           	psect	text26
  8042  0000'                    __ptext26:
  8043                           	opt stack 0
  8044  0000'                    _WriteSPI_:
  8045                           	opt stack 26
  8046                           
  8047                           ;incstack = 0
  8048                           ;WriteSPI_@dado stored from wreg
  8049  0000' 6E00'              	movwf	WriteSPI_@dado,c
  8050                           
  8051                           ;SPI.c: 121: PIR1bits.SSPIF = 0;
  8052  0002' 969E               	bcf	3998,3,c	;volatile
  8053                           
  8054                           ;SPI.c: 122: SSPCON1bits.WCOL = 0;
  8055  0004' 9EC6               	bcf	4038,7,c	;volatile
  8056                           
  8057                           ;SPI.c: 123: SSPBUF = dado;
  8058  0006' C000' FFC9         	movff	WriteSPI_@dado,4041	;volatile
  8059                           
  8060                           ;SPI.c: 124: if (SSPCON1 & 0x80 )
  8061  000A' BEC6               	btfsc	4038,7,c	;volatile
  8062  000C' 0012               	return	
  8063  000E'                    
  8064                           ;SPI.c: 128: else
  8065                           ;SPI.c: 129: {
  8066                           ;SPI.c: 131: while(!PIR1bits.SSPIF );
  8067  000E' B69E               	btfsc	3998,3,c	;volatile
  8068  0010' 0012               	return	
  8069  0012' D7FD               	goto	l104
  8070  0014'                    __end_of_WriteSPI_:
  8071                           	opt stack 0
  8072                           tblptru	equ	0xFF8
  8073                           tblptrh	equ	0xFF7
  8074                           tblptrl	equ	0xFF6
  8075                           tablat	equ	0xFF5
  8076                           prodh	equ	0xFF4
  8077                           prodl	equ	0xFF3
  8078                           postinc0	equ	0xFEE
  8079                           wreg	equ	0xFE8
  8080                           indf1	equ	0xFE7
  8081                           postdec1	equ	0xFE5
  8082                           fsr1h	equ	0xFE2
  8083                           fsr1l	equ	0xFE1
  8084                           indf2	equ	0xFDF
  8085                           postinc2	equ	0xFDE
  8086                           postdec2	equ	0xFDD
  8087                           plusw2	equ	0xFDB
  8088                           fsr2h	equ	0xFDA
  8089                           fsr2l	equ	0xFD9
  8090                           status	equ	0xFD8
  8091                           
  8092 ;; *************** function ___lmul *****************
  8093 ;; Defined at:
  8094 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  8095 ;; Parameters:    Size  Location     Type
  8096 ;;  multiplier      4    0[COMRAM] unsigned long 
  8097 ;;  multiplicand    4    4[COMRAM] unsigned long 
  8098 ;; Auto vars:     Size  Location     Type
  8099 ;;  product         4    8[COMRAM] unsigned long 
  8100 ;; Return value:  Size  Location     Type
  8101 ;;                  4    0[COMRAM] unsigned long 
  8102 ;; Registers used:
  8103 ;;		wreg, status,2, status,0
  8104 ;; Tracked objects:
  8105 ;;		On entry : 0/0
  8106 ;;		On exit  : 0/0
  8107 ;;		Unchanged: 0/0
  8108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8109 ;;      Params:         8       0       0       0       0       0       0       0       0
  8110 ;;      Locals:         4       0       0       0       0       0       0       0       0
  8111 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8112 ;;      Totals:        12       0       0       0       0       0       0       0       0
  8113 ;;Total ram usage:       12 bytes
  8114 ;; Hardware stack levels used:    1
  8115 ;; This function calls:
  8116 ;;		Nothing
  8117 ;; This function is called by:
  8118 ;;		_clust2sect
  8119 ;;		_pf_mount
  8120 ;; This function uses a non-reentrant model
  8121 ;;
  8122                           
  8123                           	psect	text27
  8124  0000'                    __ptext27:
  8125                           	opt stack 0
  8126  0000'                    ___lmul:
  8127                           	opt stack 28
  8128                           
  8129                           ;incstack = 0
  8130  0000' 0E00               	movlw	0
  8131  0002' 6E08'              	movwf	___lmul@product,c
  8132  0004' 0E00               	movlw	0
  8133  0006' 6E09'              	movwf	___lmul@product+1,c
  8134  0008' 0E00               	movlw	0
  8135  000A' 6E0A'              	movwf	___lmul@product+2,c
  8136  000C' 0E00               	movlw	0
  8137  000E' 6E0B'              	movwf	___lmul@product+3,c
  8138  0010' A000'              	btfss	___lmul@multiplier,0,c
  8139  0012' D008               	goto	l596
  8140  0014' 5004'              	movf	___lmul@multiplicand,w,c
  8141  0016' 2608'              	addwf	___lmul@product,f,c
  8142  0018' 5005'              	movf	___lmul@multiplicand+1,w,c
  8143  001A' 2209'              	addwfc	___lmul@product+1,f,c
  8144  001C' 5006'              	movf	___lmul@multiplicand+2,w,c
  8145  001E' 220A'              	addwfc	___lmul@product+2,f,c
  8146  0020' 5007'              	movf	___lmul@multiplicand+3,w,c
  8147  0022' 220B'              	addwfc	___lmul@product+3,f,c
  8148  0024'                    l596:
  8149  0024' 90D8               	bcf	status,0,c
  8150  0026' 3604'              	rlcf	___lmul@multiplicand,f,c
  8151  0028' 3605'              	rlcf	___lmul@multiplicand+1,f,c
  8152  002A' 3606'              	rlcf	___lmul@multiplicand+2,f,c
  8153  002C' 3607'              	rlcf	___lmul@multiplicand+3,f,c
  8154  002E' 90D8               	bcf	status,0,c
  8155  0030' 3203'              	rrcf	___lmul@multiplier+3,f,c
  8156  0032' 3202'              	rrcf	___lmul@multiplier+2,f,c
  8157  0034' 3201'              	rrcf	___lmul@multiplier+1,f,c
  8158  0036' 3200'              	rrcf	___lmul@multiplier,f,c
  8159  0038' 5000'              	movf	___lmul@multiplier,w,c
  8160  003A' 1001'              	iorwf	___lmul@multiplier+1,w,c
  8161  003C' 1002'              	iorwf	___lmul@multiplier+2,w,c
  8162  003E' 1003'              	iorwf	___lmul@multiplier+3,w,c
  8163  0040' A4D8               	btfss	status,2,c
  8164  0042' D7E6               	goto	l595
  8165  0044' C008' F000'        	movff	___lmul@product,?___lmul
  8166  0048' C009' F001'        	movff	___lmul@product+1,?___lmul+1
  8167  004C' C00A' F002'        	movff	___lmul@product+2,?___lmul+2
  8168  0050' C00B' F003'        	movff	___lmul@product+3,?___lmul+3
  8169  0054' 0012               	return		;funcret
  8170  0056'                    __end_of___lmul:
  8171                           	opt stack 0
  8172                           tblptru	equ	0xFF8
  8173                           tblptrh	equ	0xFF7
  8174                           tblptrl	equ	0xFF6
  8175                           tablat	equ	0xFF5
  8176                           prodh	equ	0xFF4
  8177                           prodl	equ	0xFF3
  8178                           postinc0	equ	0xFEE
  8179                           wreg	equ	0xFE8
  8180                           indf1	equ	0xFE7
  8181                           postdec1	equ	0xFE5
  8182                           fsr1h	equ	0xFE2
  8183                           fsr1l	equ	0xFE1
  8184                           indf2	equ	0xFDF
  8185                           postinc2	equ	0xFDE
  8186                           postdec2	equ	0xFDD
  8187                           plusw2	equ	0xFDB
  8188                           fsr2h	equ	0xFDA
  8189                           fsr2l	equ	0xFD9
  8190                           status	equ	0xFD8
  8191                           
  8192 ;; *************** function ___lldiv *****************
  8193 ;; Defined at:
  8194 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  8195 ;; Parameters:    Size  Location     Type
  8196 ;;  dividend        4    0[COMRAM] unsigned long 
  8197 ;;  divisor         4    4[COMRAM] unsigned long 
  8198 ;; Auto vars:     Size  Location     Type
  8199 ;;  quotient        4    8[COMRAM] unsigned long 
  8200 ;;  counter         1   12[COMRAM] unsigned char 
  8201 ;; Return value:  Size  Location     Type
  8202 ;;                  4    0[COMRAM] unsigned long 
  8203 ;; Registers used:
  8204 ;;		wreg, status,2, status,0
  8205 ;; Tracked objects:
  8206 ;;		On entry : 0/0
  8207 ;;		On exit  : 0/0
  8208 ;;		Unchanged: 0/0
  8209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8210 ;;      Params:         8       0       0       0       0       0       0       0       0
  8211 ;;      Locals:         5       0       0       0       0       0       0       0       0
  8212 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8213 ;;      Totals:        13       0       0       0       0       0       0       0       0
  8214 ;;Total ram usage:       13 bytes
  8215 ;; Hardware stack levels used:    1
  8216 ;; This function calls:
  8217 ;;		Nothing
  8218 ;; This function is called by:
  8219 ;;		_pf_mount
  8220 ;;		_pf_lseek
  8221 ;; This function uses a non-reentrant model
  8222 ;;
  8223                           
  8224                           	psect	text28
  8225  0000'                    __ptext28:
  8226                           	opt stack 0
  8227  0000'                    ___lldiv:
  8228                           	opt stack 29
  8229                           
  8230                           ;incstack = 0
  8231  0000' 0E00               	movlw	0
  8232  0002' 6E08'              	movwf	___lldiv@quotient,c
  8233  0004' 0E00               	movlw	0
  8234  0006' 6E09'              	movwf	___lldiv@quotient+1,c
  8235  0008' 0E00               	movlw	0
  8236  000A' 6E0A'              	movwf	___lldiv@quotient+2,c
  8237  000C' 0E00               	movlw	0
  8238  000E' 6E0B'              	movwf	___lldiv@quotient+3,c
  8239  0010' 5004'              	movf	___lldiv@divisor,w,c
  8240  0012' 1005'              	iorwf	___lldiv@divisor+1,w,c
  8241  0014' 1006'              	iorwf	___lldiv@divisor+2,w,c
  8242  0016' 1007'              	iorwf	___lldiv@divisor+3,w,c
  8243  0018' B4D8               	btfsc	status,2,c
  8244  001A' D02A               	goto	l939
  8245  001C' 0E01               	movlw	1
  8246  001E' 6E0C'              	movwf	___lldiv@counter,c
  8247  0020' D006               	goto	l934
  8248  0022' 90D8               	bcf	status,0,c
  8249  0024' 3604'              	rlcf	___lldiv@divisor,f,c
  8250  0026' 3605'              	rlcf	___lldiv@divisor+1,f,c
  8251  0028' 3606'              	rlcf	___lldiv@divisor+2,f,c
  8252  002A' 3607'              	rlcf	___lldiv@divisor+3,f,c
  8253  002C' 2A0C'              	incf	___lldiv@counter,f,c
  8254  002E'                    l934:
  8255  002E' AE07'              	btfss	___lldiv@divisor+3,7,c
  8256  0030' D7F8               	goto	l935
  8257  0032'                    u3260:
  8258  0032' 90D8               	bcf	status,0,c
  8259  0034' 3608'              	rlcf	___lldiv@quotient,f,c
  8260  0036' 3609'              	rlcf	___lldiv@quotient+1,f,c
  8261  0038' 360A'              	rlcf	___lldiv@quotient+2,f,c
  8262  003A' 360B'              	rlcf	___lldiv@quotient+3,f,c
  8263  003C' 5004'              	movf	___lldiv@divisor,w,c
  8264  003E' 5C00'              	subwf	___lldiv@dividend,w,c
  8265  0040' 5005'              	movf	___lldiv@divisor+1,w,c
  8266  0042' 5801'              	subwfb	___lldiv@dividend+1,w,c
  8267  0044' 5006'              	movf	___lldiv@divisor+2,w,c
  8268  0046' 5802'              	subwfb	___lldiv@dividend+2,w,c
  8269  0048' 5007'              	movf	___lldiv@divisor+3,w,c
  8270  004A' 5803'              	subwfb	___lldiv@dividend+3,w,c
  8271  004C' A0D8               	btfss	status,0,c
  8272  004E' D009               	goto	l938
  8273  0050' 5004'              	movf	___lldiv@divisor,w,c
  8274  0052' 5E00'              	subwf	___lldiv@dividend,f,c
  8275  0054' 5005'              	movf	___lldiv@divisor+1,w,c
  8276  0056' 5A01'              	subwfb	___lldiv@dividend+1,f,c
  8277  0058' 5006'              	movf	___lldiv@divisor+2,w,c
  8278  005A' 5A02'              	subwfb	___lldiv@dividend+2,f,c
  8279  005C' 5007'              	movf	___lldiv@divisor+3,w,c
  8280  005E' 5A03'              	subwfb	___lldiv@dividend+3,f,c
  8281  0060' 8008'              	bsf	___lldiv@quotient,0,c
  8282  0062'                    l938:
  8283  0062' 90D8               	bcf	status,0,c
  8284  0064' 3207'              	rrcf	___lldiv@divisor+3,f,c
  8285  0066' 3206'              	rrcf	___lldiv@divisor+2,f,c
  8286  0068' 3205'              	rrcf	___lldiv@divisor+1,f,c
  8287  006A' 3204'              	rrcf	___lldiv@divisor,f,c
  8288  006C' 2E0C'              	decfsz	___lldiv@counter,f,c
  8289  006E' D7E1               	goto	u3260
  8290  0070'                    l939:
  8291  0070' C008' F000'        	movff	___lldiv@quotient,?___lldiv
  8292  0074' C009' F001'        	movff	___lldiv@quotient+1,?___lldiv+1
  8293  0078' C00A' F002'        	movff	___lldiv@quotient+2,?___lldiv+2
  8294  007C' C00B' F003'        	movff	___lldiv@quotient+3,?___lldiv+3
  8295  0080' 0012               	return		;funcret
  8296  0082'                    __end_of___lldiv:
  8297                           	opt stack 0
  8298                           tblptru	equ	0xFF8
  8299                           tblptrh	equ	0xFF7
  8300                           tblptrl	equ	0xFF6
  8301                           tablat	equ	0xFF5
  8302                           prodh	equ	0xFF4
  8303                           prodl	equ	0xFF3
  8304                           postinc0	equ	0xFEE
  8305                           wreg	equ	0xFE8
  8306                           indf1	equ	0xFE7
  8307                           postdec1	equ	0xFE5
  8308                           fsr1h	equ	0xFE2
  8309                           fsr1l	equ	0xFE1
  8310                           indf2	equ	0xFDF
  8311                           postinc2	equ	0xFDE
  8312                           postdec2	equ	0xFDD
  8313                           plusw2	equ	0xFDB
  8314                           fsr2h	equ	0xFDA
  8315                           fsr2l	equ	0xFD9
  8316                           status	equ	0xFD8
  8317                           tblptru	equ	0xFF8
  8318                           tblptrh	equ	0xFF7
  8319                           tblptrl	equ	0xFF6
  8320                           tablat	equ	0xFF5
  8321                           prodh	equ	0xFF4
  8322                           prodl	equ	0xFF3
  8323                           postinc0	equ	0xFEE
  8324                           wreg	equ	0xFE8
  8325                           indf1	equ	0xFE7
  8326                           postdec1	equ	0xFE5
  8327                           fsr1h	equ	0xFE2
  8328                           fsr1l	equ	0xFE1
  8329                           indf2	equ	0xFDF
  8330                           postinc2	equ	0xFDE
  8331                           postdec2	equ	0xFDD
  8332                           plusw2	equ	0xFDB
  8333                           fsr2h	equ	0xFDA
  8334                           fsr2l	equ	0xFD9
  8335                           status	equ	0xFD8
  8336                           
  8337                           	psect	rparam
  8338  0000                     tblptru	equ	0xFF8
  8339                           tblptrh	equ	0xFF7
  8340                           tblptrl	equ	0xFF6
  8341                           tablat	equ	0xFF5
  8342                           prodh	equ	0xFF4
  8343                           prodl	equ	0xFF3
  8344                           postinc0	equ	0xFEE
  8345                           wreg	equ	0xFE8
  8346                           indf1	equ	0xFE7
  8347                           postdec1	equ	0xFE5
  8348                           fsr1h	equ	0xFE2
  8349                           fsr1l	equ	0xFE1
  8350                           indf2	equ	0xFDF
  8351                           postinc2	equ	0xFDE
  8352                           postdec2	equ	0xFDD
  8353                           plusw2	equ	0xFDB
  8354                           fsr2h	equ	0xFDA
  8355                           fsr2l	equ	0xFD9
  8356                           status	equ	0xFD8


Data Sizes:
    Strings     35
    Constant    128
    Data        10
    BSS         1649
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160    139     152
    BANK1           256      0     110
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    escreve_frase_ram_lcd$0	PTR unsigned char  size(2) Largest target is 17
		 -> STR_3(CODE[17]), 

    pf_open@path	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_1(CODE[10]), 

    rd	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pf_readdir@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    pf_opendir@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    pf_write@bw	PTR unsigned int  size(2) Largest target is 2
		 -> main@br(BANK0[2]), 

    pf_write@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), main@fs(BANK0[42]), 

    pf_write@buff	PTR const void  size(2) Largest target is 8
		 -> STR_2(CODE[8]), 

    pf_write@p	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_2(CODE[8]), 

    pf_read$799	PTR unsigned char  size(2) Largest target is 32
		 -> NULL(NULL[0]), data_buffer_32(BANK1[32]), 

    pf_read@br	PTR unsigned int  size(2) Largest target is 2
		 -> main@br(BANK0[2]), 

    pf_read@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), main@fs(BANK0[42]), 

    pf_read@buff	PTR void  size(2) Largest target is 32
		 -> data_buffer_32(BANK1[32]), 

    pf_read@rbuff	PTR unsigned char  size(2) Largest target is 32
		 -> data_buffer_32(BANK1[32]), 

    pf_open@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), main@fs(BANK0[42]), 

    dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    pf_mount@fs	PTR struct . size(2) Largest target is 42
		 -> main@fs(BANK0[42]), 

    check_fs@buf	PTR unsigned char  size(2) Largest target is 36
		 -> pf_mount@buf(BANK0[36]), 

    follow_path@dir	PTR unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK0[32]), 

    follow_path@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    follow_path@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK0[16]), 

    follow_path@path	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_4(CODE[10]), 

    get_fileinfo@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    create_name@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> follow_path@path(BANK0[2]), 

    create_name@p	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_4(CODE[10]), 

    create_name@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    create_name@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK0[16]), 

    create_name@sfn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    dir_read@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    dir_find@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    dir_find@dir	PTR unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK0[32]), 

    dir_find@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK0[16]), 

    dir_next@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    dir_next@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK0[16]), 

    dir_next@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), main@fs(BANK0[42]), 

    S488$fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    dir_rewind@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    dir_rewind@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK0[16]), 

    dir_rewind@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), main@fs(BANK0[42]), 

    get_clust@dir	PTR unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK0[32]), 

    get_clust@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), main@fs(BANK0[42]), 

    clust2sect@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), main@fs(BANK0[42]), 

    FatFs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), main@fs(BANK0[42]), 

    get_fat@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), main@fs(BANK0[42]), 

    mem_cmp@src	PTR const void  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    mem_cmp@s	PTR const unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    mem_cmp@dst	PTR const void  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK0[32]), 

    mem_cmp@d	PTR const unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK0[32]), 

    mem_set@dst	PTR void  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    mem_set@d	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    disk_writep@wr	PTR const unsigned char  size(3) Largest target is 32767
		 -> ROM(CODE[32767]), STR_2(CODE[8]), 

    disk_readp@rd	PTR unsigned char  size(2) Largest target is 36
		 -> pf_readdir@dir(COMRAM[32]), pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK0[32]), pf_mount@buf(BANK0[36]), 
		 -> NULL(NULL[0]), get_fat@buf(COMRAM[4]), data_buffer_32(BANK1[32]), 


Critical Paths under _main in COMRAM

    _soft_hard_init->_inicializa_SPI
    _pf_write->_get_fat
    _disk_writep->_Command
    _pf_read->_get_fat
    _follow_path->_dir_find
    _dir_find->_dir_next
    _dir_rewind->_clust2sect
    _dir_next->_get_fat
    _get_fat->_disk_readp
    _clust2sect->___lmul
    _create_name->_mem_set
    _pf_mount->_check_fs
    _disk_initialize->_reset
    _reset->_Command
    _check_fs->_disk_readp
    _disk_readp->_Command
    _proceed->_WriteSPI_
    _Command->_WriteSPI_

Critical Paths under _main in BANK0

    _main->_pf_open
    _pf_open->_follow_path

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                45    45      0   73716
                                             94 BANK0     45    45      0
                           _pf_mount
                            _pf_open
                            _pf_read
                           _pf_write
                           _prossiga
                     _soft_hard_init
 ---------------------------------------------------------------------------------
 (1) _soft_hard_init                                       0     0      0      46
                     _inicializa_SPI
 ---------------------------------------------------------------------------------
 (2) _inicializa_SPI                                       1     1      0      46
                                              0 COMRAM     1     1      0
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _posicao_cursor_lcd                                   1     0      1      12
 ---------------------------------------------------------------------------------
 (3) _escreve_frase_ram_lcd                                2     0      2      12
 ---------------------------------------------------------------------------------
 (1) _prossiga                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _pf_write                                            33    27      6   12830
                                             70 COMRAM    14     8      6
                                              0 BANK0     19    19      0
                         _clust2sect
                        _disk_writep
                            _get_fat
 ---------------------------------------------------------------------------------
 (2) _disk_writep                                         17    10      7    2753
                                              8 COMRAM    16     9      7
                            _Command
                          _WriteSPI_
                       _dummy_clocks
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (1) _pf_read                                             36    30      6   16501
                                             70 COMRAM    14     8      6
                                              0 BANK0     22    22      0
                         _clust2sect
                         _disk_readp
                            _get_fat
 ---------------------------------------------------------------------------------
 (1) _pf_open                                             87    85      2   23349
                                              7 BANK0     87    85      2
                        _follow_path
                          _get_clust
 ---------------------------------------------------------------------------------
 (2) _follow_path                                          7     1      6   22426
                                              0 BANK0      7     1      6
                        _create_name
                           _dir_find
                         _dir_rewind
                          _get_clust
 ---------------------------------------------------------------------------------
 (2) _get_clust                                           18    14      4     365
                                              0 COMRAM    18    14      4
 ---------------------------------------------------------------------------------
 (3) _dir_find                                             8     4      4   18389
                                             87 COMRAM     8     4      4
                           _dir_next
                         _dir_rewind
                         _disk_readp
                            _mem_cmp
 ---------------------------------------------------------------------------------
 (4) _mem_cmp                                             15     9      6     364
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) _dir_rewind                                          16    14      2    1599
                                             23 COMRAM    16    14      2
                         _clust2sect
 ---------------------------------------------------------------------------------
 (4) _dir_next                                            17    15      2    9364
                                             70 COMRAM    17    15      2
                         _clust2sect
                            _get_fat
 ---------------------------------------------------------------------------------
 (2) _get_fat                                             40    36      4    7733
                                             30 COMRAM    40    36      4
                         _disk_readp
 ---------------------------------------------------------------------------------
 (2) _clust2sect                                          11     7      4     960
                                             12 COMRAM    11     7      4
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) _create_name                                         20    16      4    1234
                                              8 COMRAM    20    16      4
                            _mem_set
 ---------------------------------------------------------------------------------
 (4) _mem_set                                              8     2      6     318
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _pf_mount                                            77    75      2   20676
                                             40 COMRAM    24    22      2
                                              0 BANK0     53    53      0
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                         _disk_readp
 ---------------------------------------------------------------------------------
 (2) _disk_initialize                                      8     8      0    4234
                                             13 COMRAM     8     8      0
                            _Command
                       _dummy_clocks
                            _proceed
                              _reset
                           _response
 ---------------------------------------------------------------------------------
 (3) _reset                                                5     5      0    2034
                                              8 COMRAM     5     5      0
                            _Command
                       _dummy_clocks
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (2) _check_fs                                            10     4      6    7143
                                             30 COMRAM    10     4      6
                         _disk_readp
 ---------------------------------------------------------------------------------
 (3) _disk_readp                                          25    15     10    6575
                                              8 COMRAM    22    12     10
                            _Command
                       _dummy_clocks
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (4) _response                                             1     1      0      23
                                              0 COMRAM     1     1      0
                    _recebe_dado_SPI
 ---------------------------------------------------------------------------------
 (5) _recebe_dado_SPI                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _proceed                                              0     0      0      22
                          _WriteSPI_
 ---------------------------------------------------------------------------------
 (4) _dummy_clocks                                         2     0      2       0
 ---------------------------------------------------------------------------------
 (4) _Command                                              7     2      5    1918
                                              1 COMRAM     7     2      5
                          _WriteSPI_
 ---------------------------------------------------------------------------------
 (5) _WriteSPI_                                            1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     468
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     564
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _pf_mount
     ___lldiv
     ___lmul
     _check_fs
       _disk_readp
         _Command
           _WriteSPI_
         _dummy_clocks
         _proceed
           _WriteSPI_
         _response
           _recebe_dado_SPI
     _disk_initialize
       _Command
         _WriteSPI_
       _dummy_clocks
       _proceed
         _WriteSPI_
       _reset
         _Command
           _WriteSPI_
         _dummy_clocks
         _proceed
           _WriteSPI_
         _response
           _recebe_dado_SPI
       _response
         _recebe_dado_SPI
     _disk_readp
       _Command
         _WriteSPI_
       _dummy_clocks
       _proceed
         _WriteSPI_
       _response
         _recebe_dado_SPI
   _pf_open
     _follow_path
       _create_name
         _mem_set
       _dir_find
         _dir_next
           _clust2sect
             ___lmul
           _get_fat
             _disk_readp
               _Command
                 _WriteSPI_
               _dummy_clocks
               _proceed
                 _WriteSPI_
               _response
                 _recebe_dado_SPI
         _dir_rewind
           _clust2sect
             ___lmul
         _disk_readp
           _Command
             _WriteSPI_
           _dummy_clocks
           _proceed
             _WriteSPI_
           _response
             _recebe_dado_SPI
         _mem_cmp
       _dir_rewind
         _clust2sect
           ___lmul
       _get_clust
     _get_clust
   _pf_read
     _clust2sect
       ___lmul
     _disk_readp
       _Command
         _WriteSPI_
       _dummy_clocks
       _proceed
         _WriteSPI_
       _response
         _recebe_dado_SPI
     _get_fat
       _disk_readp
         _Command
           _WriteSPI_
         _dummy_clocks
         _proceed
           _WriteSPI_
         _response
           _recebe_dado_SPI
   _pf_write
     _clust2sect
       ___lmul
     _disk_writep
       _Command
         _WriteSPI_
       _WriteSPI_
       _dummy_clocks
       _proceed
         _WriteSPI_
       _response
         _recebe_dado_SPI
     _get_fat
       _disk_readp
         _Command
           _WriteSPI_
         _dummy_clocks
         _proceed
           _WriteSPI_
         _response
           _recebe_dado_SPI
   _prossiga
   _soft_hard_init
     _inicializa_SPI
       _escreve_frase_ram_lcd
       _posicao_cursor_lcd

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     600      21       75.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      6E       7       43.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     8B      98       5       95.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     165      20        0.0%
DATA                 0      0     765       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Dec 14 12:50:16 2021

             get_fat@clst 00001E                         _s 00000B              create_name@c 00001B  
            create_name@d 000013              create_name@i 00001A              create_name@p 000014  
             _SSPSTATbits 000FC7                        l40 000096                        l41 000094  
                      l42 000058                        l61 000098                        l48 000092  
                      l65 0000A0                        l90 000034                        l91 000004  
                      l92 000008                        l93 00000E                        l94 000012  
                      l88 000018                        l99 000006                        _rd 000008  
           pf_mount@bsect 00002C             pf_mount@mclst 000028             pf_mount@fsize 000030  
           create_name@dj 000008             pf_mount@tsect 000024             create_name@ni 000016  
           create_name@si 000017                       l104 00000E                       l201 00023C  
                     l202 000226                       l140 000010                       l300 0001A2  
                     l220 000102                       l205 000272                       l141 00003A  
                     l301 000132                       l302 000156                       l310 0000A0  
                     l214 000052                       l207 0002AA                       l151 00011A  
                     l311 0000E0                       l208 000296                       l152 000064  
                     l240 000018                       l216 000084                       l209 000292  
                     l153 000094                       l233 00001A                       l305 000018  
                     l401 000016                       l234 00000A                       l218 0000BC  
                     l171 000116                       l163 000126                       l331 0000FE  
                     l251 0003A8                       l403 000058                       l411 000042  
                     l219 0000C2                       l172 000066                       l164 000150  
                     l340 0000D6                       l332 0000A8                       l260 0001BC  
                     l252 00004A                       l404 000066                       l420 000242  
                     l181 0000F4                       l157 0000E8                       l149 000046  
                     l253 0000E0                       l413 000384                       l421 0002C2  
                     l182 0000F0                       l174 000076                       l342 0000E6  
                     l262 0001DA                       l414 0000CE                       l430 00002E  
                     l327 00004C                       l255 0003C4                       l263 0001E8  
                     l423 0002D4                       l415 000276                       l176 0000A4  
                     l416 0001F0                       l440 000362                       l432 000042  
                     l177 00008E                       l265 00028C                       l273 000072  
                     l361 000032                       l425 0002DC                       l417 00017E  
                     l409 00002E                       l441 000282                       l433 0000AC  
                     l186 000164                       l258 00019E                       l362 000076  
                     l426 00034A                       l418 0001AE                       l450 0004A0  
                     l442 000210                       l434 000096                       l195 0001D4  
                     l187 000150                       l179 0000DA                       l283 00009C  
                     l419 0001D4                       l443 000240                       l196 0001BE  
                     l380 000018                       l292 000048                       l444 000266  
                     l436 0000D8                       l189 00019A                       l373 000036  
                     l269 00005E                       l445 0002D4                       l198 000214  
                     l390 00035A                       l366 000112                       l358 000008  
                     l446 000350                       l199 0001E6                       l375 000072  
                     l391 000454                       l383 000086                       l287 0000E2  
                     l279 000064                       l359 000002                       l447 0003AE  
                     l439 000164                       l376 0000E0                       l392 00047C  
                     l448 0003FC                       l377 00014E                       l393 000492  
                     l385 000120                       l297 0000A6                       l289 000106  
                     l369 0000E6                       l449 0004B2                       l394 00049C  
                     l386 00012C                       l395 000540                       l387 000136  
                     l388 00016C                       l389 00020C                       l398 000590  
                     l595 000010                       l596 000024                       l934 00002E  
                     l935 000022                       l938 000062                       l939 000070  
                     _PR2 000FCB               get_clust@fs 00000C                       _str 000200  
                     _txt 000030                       wreg 000FE8              disk_readp@rd 000008  
          create_name@cvt 000001            create_name@sfn 000018           ?_soft_hard_init 000000  
 ??_escreve_frase_ram_lcd 000000                      l3101 000108                      l3141 000078  
                    l3083 0000B4                      l3245 00014E                      l3237 0000E0  
                    l3343 000454                      l3349 00047C                      l2813 00000A  
                    l3473 000266                      l2691 0001E6                      l2923 00005A  
                    l2685 0001BE                      l3577 0001D4                      l2891 000132  
                    STR_1 000092                      STR_2 00009C                      STR_3 000081  
                    STR_4 000000                      u3000 0000B4                      u2300 0001A6  
                    u3020 000108                      u3100 0000C8                      _LATB 000F8A  
                    u3200 00006E                      u2225 00001E                      u2410 000018  
                    u2340 000248                      u2420 000038                      u2510 0002CE  
                    u2440 000088                      u3065 000026                      u3410 00048E  
                    u4050 00009E                      u2515 0002C4                      u2435 000074  
                    u3260 000032                      u2285 000128                      u2630 000044  
                    u2550 000028                      _PIE1 000F9D                      u2720 00005A  
                    u2560 000066                      u2580 000060                      u3445 0005C4  
                    u3390 000466                      u3375 000372                      u2495 0001C8  
                    u2840 0000F4                      u3480 000062                      u3720 000128  
                    u3570 0001BA                      u2675 0000B2                      u2755 000064  
                    u2780 00007E                      u3725 00011E                      u2950 00013A  
                    u2790 000080                      u2951 000136                      u2775 000056  
                    u3575 0001B0                      u2960 00013C                      u2880 00008E  
            get_clust@dir 000000                      _TMR2 000FCC                      _flag 000006  
                    _main 000000                      fsr1h 000FE2                      fsr2h 000FDA  
                    indf1 000FE7                      indf2 000FDF                      fsr1l 000FE1  
                    fsr2l 000FD9                      prodh 000FF4                      prodl 000FF3  
                    start 000000*            disk_readp@arr 000000             disk_readp@ptr 000016  
            disk_writep@i 000013              disk_writep@j 000015           __end_of_Command 00003E  
            ?_follow_path 000000              ___param_bank 000000           create_name@path 00000A  
__size_of_recebe_dado_SPI 000000                     ?_main 000000           __end_of___lldiv 000082  
                   _T0CON 000FD5                     _T2CON 000FCA            _data_buffer_32 000044  
           get_clust@clst 00000E                     _TMR0H 000FD7                     _TMR0L 000FD6  
                   _TRISA 000F92                     _TRISB 000F93                     _TRISC 000F94  
                   _TRISD 000F95                     _TRISE 000F96                     _FatFs 000004  
  __end_ofcreate_name@cvt 000081       ___lmul@multiplicand 000004           __end_of_get_fat 0003D6  
         __end_of_mem_cmp 000070           __end_of_mem_set 00002C           __end_of_pf_read 000390  
         __end_of_pf_open 000146                     _reset 000000                     tablat 000FF5  
         __end_of_proceed 00000C                     plusw2 000FDB                     status 000FD8  
          disk_readp@buff 00001B             disk_writep@sc 00000B             disk_writep@wr 000008  
         __initialization 000000       disk_initialize@buff 000014       disk_initialize@stat 000011  
            __end_of_main 0000A2              clust2sect@fs 000015                    ??_main 00005F  
     disk_readp@start_add 000017             __activetblptr 000002                    ?_reset 000000  
           ?_dummy_clocks 000000                    _INTCON 000FF2   __size_of_inicializa_SPI 000000  
                  _TMR2IF 007CF1                    _SPPCFG 000F63                    _SPPCON 000F65  
                  _SSPBUF 000FC9                 ??_Command 000006          __end_of_check_fs 000152  
    __size_of_create_name 000000  __size_of_disk_initialize 000000          __end_of_dir_find 0000F8  
        __end_of_dir_next 0001B6           Command@argument 000007                    _Result 00000C  
                  ___lmul 000000      __size_of_disk_writep 000000                 ??___lldiv 000008  
                  _folder 000000                    _estado 00000A                    clear_0 000028  
                  clear_1 00003A                    clear_2 000046          __end_of_pf_mount 000636  
        __end_of_pf_write 0004BE               pf_read@buff 000046               pf_read@clst 00000D  
             pf_read@sect 000005               pf_read@rcnt 000012                    main@br 00005F  
               ??_get_fat 000022                    main@fs 000061                 ??_mem_cmp 000006  
               ??_mem_set 000006                 ??_pf_read 00004C                 ??_pf_open 000009  
       ??_recebe_dado_SPI 000000          __end_of_response 00000E              __mediumconst 000000* 
                  reset@i 000008                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8                 ??_proceed 000001               pf_open@path 000007  
          ??_dummy_clocks 000000                __accesstop 000000*  __end_of__initialization 00004C  
      __size_of_WriteSPI_ 000000               pf_mount@buf 000000               pf_mount@fmt 000034  
         disk_readp@count 000010             ___rparam_used 000001            __pcstackCOMRAM 000000  
            __pidataBANK1 000000      __size_of_follow_path 000000             __end_of_reset 00006A  
             pf_write@btw 000048          ??_soft_hard_init 000001        __size_of_get_clust 000000  
                 ??_reset 000008                __pbssBANK0 000000                __pbssBANK1 000000  
          pf_write@remain 000006                   ?___lmul 000000         ??_disk_initialize 00000D  
          ___lmul@product 000008         __end_of_WriteSPI_ 000014                _dir_rewind 000000  
                 _INTCON2 000FF1                   _INTCON3 000FF0                 ?_check_fs 00001E  
              _disk_readp 000000            follow_path@dir 000002            follow_path@res 000006  
               ?_dir_find 000057                 ?_dir_next 000046                   _SSPCON1 000FC6  
              _clust2sect 000000            _inicializa_SPI 000000                   _Command 000000  
               ?_pf_mount 000028                 ?_pf_write 000046                   __Hparam 000000  
                 __Lparam 000000         __end_of_get_clust 0000C8                 ?_response 000000  
         __size_of___lmul 000000                   ___lldiv 000000                 ?_prossiga 000000  
            __psmallconst 000000                   __pcinit 000000                   __ramtop 000000* 
                 __ptext0 000000                   __ptext1 000000                   __ptext2 000000  
                 __ptext3 000000                   __ptext4 000000                   __ptext5 000000  
                 __ptext6 000000                   __ptext7 000000                   __ptext8 000000  
                 __ptext9 000000                   _get_fat 000000                 _T0CONbits 000FD5  
                 _mem_cmp 000000                   _mem_set 000000                   _pf_read 000000  
                 _pf_open 000000                ??_check_fs 000024                   _proceed 000000  
              ??_dir_find 00005B                ??_dir_next 000048    __end_of_inicializa_SPI 00005A  
            pf_read@rbuff 000000      end_of_initialization 00004C             __Lmediumconst 000000* 
              ??_pf_mount 00002A                ??_pf_write 00004C           ___lldiv@divisor 000004  
         ___lldiv@counter 00000C                ??_response 000000                   postdec1 000FE5  
                 postdec2 000FDD           _recebe_dado_SPI 000000                   postinc0 000FEE  
                 postinc2 000FDE                ??_prossiga 000000                dir_find@dj 000057  
               _PORTBbits 000F81        _posicao_cursor_lcd 000000*              ?_dir_rewind 000017  
              dir_next@dj 000046                dir_next@fs 00004F               ?_disk_readp 000008  
              get_fat@buf 00003E                get_fat@ofs 00003C       ?_posicao_cursor_lcd 000000  
         ?_inicializa_SPI 000000               ?_clust2sect 00000C          disk_readp@length 00001C  
        disk_readp@offset 00000E          disk_readp@sector 00000A             ??_create_name 00000C  
        disk_initialize@i 00000D           disk_writep@buff 000017             ??_disk_writep 00000F  
    ??_posicao_cursor_lcd 000000     disk_initialize@count1 00000F     disk_initialize@count2 000012  
          __end_of___lmul 000056            clust2sect@clst 00000C       start_initialization 000000  
           WriteSPI_@dado 000000                mem_cmp@cnt 000004                mem_cmp@dst 000000  
            pf_write@buff 000046                mem_cmp@src 000002              pf_write@clst 00000A  
            pf_write@sect 000002              pf_write@wcnt 00000F   __end_of_recebe_dado_SPI 00000E  
         _disk_initialize 000000                mem_set@cnt 000004                mem_set@dst 000000  
              mem_set@val 000002       __size_of_dir_rewind 000000             ??_follow_path 00005F  
     __size_of_disk_readp 000000       __end_of_create_name 000142                  ??___lmul 000008  
              pf_read@btr 000048               __pdataBANK1 000000       __size_of_clust2sect 000000  
     __end_of_disk_writep 000112                pf_open@dir 00002B                pf_open@res 00004B  
             __pbssBIGRAM 000000                pf_mount@fs 000028   _escreve_frase_ram_lcd$0 000000  
           __pcstackBANK0 000000                 _WriteSPI_ 000000         __size_of_check_fs 000000  
            check_fs@sect 000020                pf_write@cs 00000E                pf_write@bw 00004A  
              pf_write@fs 000011         __size_of_dir_find 000000              _dummy_clocks 000000* 
       __size_of_dir_next 000000             _sector_buffer 000400                  ?_Command 000001  
   _escreve_frase_ram_lcd 000000*        __size_of_pf_mount 000000         __size_of_pf_write 000000  
                ?___lldiv 000000         __size_of_response 000000                 _get_clust 000000  
           follow_path@dj 000000       __end_of_follow_path 000116                  ?_get_fat 00001E  
             __smallconst 000000*                 ?_mem_cmp 000000                  ?_mem_set 000000  
                ?_pf_read 000046                  ?_pf_open 000007                reset@count 00000A  
              ?_WriteSPI_ 000000            _dir_rewind$605 00001D                  ?_proceed 000000  
 __end_of_disk_initialize 000160               _get_fat$545 000038            __size_of_reset 000000  
 __size_of_soft_hard_init 000000               _create_name 000000                  _LATBbits 000F8A  
        ?_recebe_dado_SPI 000000           follow_path@path 000004                  _PIR1bits 000F9E  
             _disk_writep 000000                 dir_find@c 00005D                 dir_next@i 000055  
              ?_get_clust 000000                 get_fat@bc 000042                 get_fat@fs 000044  
               get_fat@wc 00003A              ??_dir_rewind 000019          ??_inicializa_SPI 000000  
            ??_disk_readp 000012              ??_clust2sect 000010         ___lmul@multiplier 000000  
               copy_data0 000014    ?_escreve_frase_ram_lcd 000000          __size_of_Command 000000  
                __Hrparam 000000*       __end_of_dir_rewind 000126                  __Lrparam 000000* 
             _follow_path 000000        __end_of_disk_readp 0002AE                 pf_read@br 00004A  
               pf_read@cs 000011                 pf_read@dr 000004                 pf_read@fs 000014  
               pf_open@dj 00004E                 pf_open@fs 00004C                 pf_open@sp 00001F  
        __size_of___lldiv 000000               _pf_read$799 000002        __end_of_clust2sect 0000C2  
  inicializa_SPI@SPI_mode 000000               check_fs@buf 00001E                 pf_write@p 000000  
        __size_of_get_fat 000000                  _check_fs 000000          __size_of_mem_cmp 000000  
        __size_of_mem_set 000000          __size_of_pf_read 000000          __size_of_pf_open 000000  
             ??_WriteSPI_ 000000                  _fileName 000000                  __ptext10 000000  
                __ptext11 000000                  __ptext20 000000                  __ptext12 000000  
                __ptext21 000000                  __ptext13 000000                  __ptext22 000000  
                __ptext14 000000                  __ptext23 000000                  __ptext15 000000  
                __ptext24 000000                  __ptext16 000000                  __ptext25 000000  
                __ptext17 000000                  __ptext26 000000                  __ptext18 000000  
                __ptext27 000000                  __ptext19 000000                  __ptext28 000000  
                _dir_find 000000                  _fileSize 000000                  _dir_next 000000  
        __size_of_proceed 000000          ?_disk_initialize 000000                 reset@buff 00000C  
           __size_of_main 000000                  _pf_mount 000000                  _pf_write 000000  
                _response 000000                  _prossiga 000000*            pf_read@remain 000009  
             ??_get_clust 000004                  mem_cmp@d 000009                  mem_cmp@r 00000D  
                mem_cmp@s 00000B                _INTCONbits 000FF2                  mem_set@d 000006  
          _soft_hard_init 000000          ___lldiv@dividend 000000                _OSCCONbits 000FD3  
            response@buff 000000      _posicao_cursor_lcd$1 000000          ___lldiv@quotient 000008  
          dir_rewind@clst 000023               dir_find@dir 000059               dir_find@res 00005E  
             _SSPCON1bits 000FC6    __end_of_soft_hard_init 000008                Command@CMD 000006  
              Command@CRC 000005              dir_next@clst 000051                Command@arg 000001  
            ?_create_name 000008              dir_rewind@dj 000017              dir_rewind@fs 000021  
             main@FResult 00005E              ?_disk_writep 000008  
