

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Mar 16 22:05:09 2018

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    55                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    58                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    59  0000                     
    60                           ; Version 1.40
    61                           ; Generated 01/12/2016 GMT
    62                           ; 
    63                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC18F4550 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94  0000                     
    95                           	psect	smallconst
    96  000800                     __psmallconst:
    97                           	opt stack 0
    98  000800  00                 	db	0
    99  000801                     _dpowers:
   100                           	opt stack 0
   101  000801  0001               	dw	1
   102  000803  0000               	dw	0
   103  000805  000A               	dw	10
   104  000807  0000               	dw	0
   105  000809  0064               	dw	100
   106  00080B  0000               	dw	0
   107  00080D  03E8               	dw	1000
   108  00080F  0000               	dw	0
   109  000811  2710               	dw	10000
   110  000813  0000               	dw	0
   111  000815  86A0               	dw	34464
   112  000817  0001               	dw	1
   113  000819  4240               	dw	16960
   114  00081B  000F               	dw	15
   115  00081D  9680               	dw	38528
   116  00081F  0098               	dw	152
   117  000821  E100               	dw	57600
   118  000823  05F5               	dw	1525
   119  000825  CA00               	dw	51712
   120  000827  3B9A               	dw	15258
   121  000829                     __end_of_dpowers:
   122                           	opt stack 0
   123  000829                     __npowers_:
   124                           	opt stack 0
   125  000829  00                 	db	0
   126  00082A  80                 	db	128
   127  00082B  3F                 	db	63
   128  00082C  CD                 	db	205
   129  00082D  CC                 	db	204
   130  00082E  3D                 	db	61
   131  00082F  D7                 	db	215
   132  000830  23                 	db	35
   133  000831  3C                 	db	60
   134  000832  12                 	db	18
   135  000833  83                 	db	131
   136  000834  3A                 	db	58
   137  000835  B7                 	db	183
   138  000836  D1                 	db	209
   139  000837  38                 	db	56
   140  000838  C6                 	db	198
   141  000839  27                 	db	39
   142  00083A  37                 	db	55
   143  00083B  38                 	db	56
   144  00083C  86                 	db	134
   145  00083D  35                 	db	53
   146  00083E  C0                 	db	192
   147  00083F  D6                 	db	214
   148  000840  33                 	db	51
   149  000841  CC                 	db	204
   150  000842  2B                 	db	43
   151  000843  32                 	db	50
   152  000844  70                 	db	112
   153  000845  89                 	db	137
   154  000846  30                 	db	48
   155  000847  E7                 	db	231
   156  000848  DB                 	db	219
   157  000849  2E                 	db	46
   158  00084A  E5                 	db	229
   159  00084B  3C                 	db	60
   160  00084C  1E                 	db	30
   161  00084D  42                 	db	66
   162  00084E  A2                 	db	162
   163  00084F  0D                 	db	13
   164  000850                     __end_of__npowers_:
   165                           	opt stack 0
   166  000850                     __powers_:
   167                           	opt stack 0
   168  000850  00                 	db	0
   169  000851  80                 	db	128
   170  000852  3F                 	db	63
   171  000853  00                 	db	0
   172  000854  20                 	db	32
   173  000855  41                 	db	65
   174  000856  00                 	db	0
   175  000857  C8                 	db	200
   176  000858  42                 	db	66
   177  000859  00                 	db	0
   178  00085A  7A                 	db	122
   179  00085B  44                 	db	68
   180  00085C  40                 	db	64
   181  00085D  1C                 	db	28
   182  00085E  46                 	db	70
   183  00085F  50                 	db	80
   184  000860  C3                 	db	195
   185  000861  47                 	db	71
   186  000862  24                 	db	36
   187  000863  74                 	db	116
   188  000864  49                 	db	73
   189  000865  97                 	db	151
   190  000866  18                 	db	24
   191  000867  4B                 	db	75
   192  000868  BC                 	db	188
   193  000869  BE                 	db	190
   194  00086A  4C                 	db	76
   195  00086B  6B                 	db	107
   196  00086C  6E                 	db	110
   197  00086D  4E                 	db	78
   198  00086E  03                 	db	3
   199  00086F  15                 	db	21
   200  000870  50                 	db	80
   201  000871  79                 	db	121
   202  000872  AD                 	db	173
   203  000873  60                 	db	96
   204  000874  F3                 	db	243
   205  000875  49                 	db	73
   206  000876  71                 	db	113
   207  000877                     __end_of__powers_:
   208                           	opt stack 0
   209  0000                     _INTCONbits	set	4082
   210  0000                     _LATB	set	3978
   211  0000                     _OSCCON	set	4051
   212  0000                     _PIE1bits	set	3997
   213  0000                     _RCREG	set	4014
   214  0000                     _RCSTA	set	4011
   215  0000                     _RCSTAbits	set	4011
   216  0000                     _SPBRG	set	4015
   217  0000                     _TRISB	set	3987
   218  0000                     _TRISD	set	3989
   219  0000                     _TXREG	set	4013
   220  0000                     _TXSTA	set	4012
   221  0000                     _CREN	set	32092
   222  0000                     _GIE	set	32663
   223  0000                     _LATD0	set	31840
   224  0000                     _LATD1	set	31841
   225  0000                     _LATD2	set	31842
   226  0000                     _RCIF	set	31989
   227  0000                     _TRISC6	set	31910
   228  0000                     _TRISC7	set	31911
   229  0000                     _TXIF	set	31988
   230  000877                     STR_1:
   231  000877  55                 	db	85	;'U'
   232  000878  54                 	db	84	;'T'
   233  000879  43                 	db	67	;'C'
   234  00087A  20                 	db	32
   235  00087B  54                 	db	84	;'T'
   236  00087C  69                 	db	105	;'i'
   237  00087D  6D                 	db	109	;'m'
   238  00087E  65                 	db	101	;'e'
   239  00087F  3A                 	db	58	;':'
   240  000880  20                 	db	32
   241  000881  00                 	db	0
   242  000882                     STR_9:
   243  000882  25                 	db	37
   244  000883  64                 	db	100	;'d'
   245  000884  3A                 	db	58	;':'
   246  000885  25                 	db	37
   247  000886  64                 	db	100	;'d'
   248  000887  3A                 	db	58	;':'
   249  000888  25                 	db	37
   250  000889  64                 	db	100	;'d'
   251  00088A  00                 	db	0
   252  00088B                     STR_5:
   253  00088B  4C                 	db	76	;'L'
   254  00088C  6F                 	db	111	;'o'
   255  00088D  6E                 	db	110	;'n'
   256  00088E  67                 	db	103	;'g'
   257  00088F  3A                 	db	58	;':'
   258  000890  20                 	db	32
   259  000891  00                 	db	0
   260  000892                     STR_3:
   261  000892  4C                 	db	76	;'L'
   262  000893  61                 	db	97	;'a'
   263  000894  74                 	db	116	;'t'
   264  000895  3A                 	db	58	;':'
   265  000896  20                 	db	32
   266  000897  00                 	db	0
   267  000898                     STR_7:
   268  000898  41                 	db	65	;'A'
   269  000899  6C                 	db	108	;'l'
   270  00089A  74                 	db	116	;'t'
   271  00089B  3A                 	db	58	;':'
   272  00089C  20                 	db	32
   273  00089D  00                 	db	0
   274  00089E                     STR_4:
   275  00089E  25                 	db	37
   276  00089F  2E                 	db	46
   277  0008A0  30                 	db	48	;'0'
   278  0008A1  35                 	db	53	;'5'
   279  0008A2  66                 	db	102	;'f'
   280  0008A3  00                 	db	0
   281  0008A4                     STR_8:
   282  0008A4  25                 	db	37
   283  0008A5  2E                 	db	46
   284  0008A6  32                 	db	50	;'2'
   285  0008A7  66                 	db	102	;'f'
   286  0008A8  00                 	db	0
   287  0008A9                     STR_2:
   288  0008A9  20                 	db	32
   289  0008AA  20                 	db	32
   290  0008AB  00                 	db	0
   291  0000                     
   292                           ; #config settings
   293  0008AC  00                 	db	0	; dummy byte at the end
   294  0000                     
   295                           	psect	cinit
   296  003226                     __pcinit:
   297                           	opt stack 0
   298  003226                     start_initialization:
   299                           	opt stack 0
   300  003226                     __initialization:
   301                           	opt stack 0
   302                           
   303                           ; Clear objects allocated to BANK1 (80 bytes)
   304  003226  EE01  F000         	lfsr	0,__pbssBANK1
   305  00322A  0E50               	movlw	80
   306  00322C                     clear_0:
   307  00322C  6AEE               	clrf	postinc0,c
   308  00322E  06E8               	decf	wreg,f,c
   309  003230  E1FD               	bnz	clear_0
   310                           
   311                           ; Clear objects allocated to BANK0 (35 bytes)
   312  003232  EE00  F0BA         	lfsr	0,__pbssBANK0
   313  003236  0E23               	movlw	35
   314  003238                     clear_1:
   315  003238  6AEE               	clrf	postinc0,c
   316  00323A  06E8               	decf	wreg,f,c
   317  00323C  E1FD               	bnz	clear_1
   318                           
   319                           ; Clear objects allocated to COMRAM (9 bytes)
   320  00323E  EE00  F046         	lfsr	0,__pbssCOMRAM
   321  003242  0E09               	movlw	9
   322  003244                     clear_2:
   323  003244  6AEE               	clrf	postinc0,c
   324  003246  06E8               	decf	wreg,f,c
   325  003248  E1FD               	bnz	clear_2
   326  00324A                     end_of_initialization:
   327                           	opt stack 0
   328  00324A                     __end_of__initialization:
   329                           	opt stack 0
   330  00324A  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   331  00324C  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   332  00324E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   333  003250  6EF8               	movwf	tblptru,c
   334  003252  0100               	movlb	0
   335  003254  EFED  F00D         	goto	_main	;jump to C main() function
   336                           tblptru	equ	0xFF8
   337                           postinc0	equ	0xFEE
   338                           wreg	equ	0xFE8
   339                           
   340                           	psect	bssCOMRAM
   341  000046                     __pbssCOMRAM:
   342                           	opt stack 0
   343  000046                     _GGA_CODE:
   344                           	opt stack 0
   345  000046                     	ds	3
   346  000049                     _GGA_Index:
   347                           	opt stack 0
   348  000049                     	ds	2
   349  00004B                     _CommaCounter:
   350                           	opt stack 0
   351  00004B                     	ds	1
   352  00004C                     _E_W:
   353                           	opt stack 0
   354  00004C                     	ds	1
   355  00004D                     _IsItGGAString:
   356                           	opt stack 0
   357  00004D                     	ds	1
   358  00004E                     _N_S:
   359                           	opt stack 0
   360  00004E                     	ds	1
   361                           tblptru	equ	0xFF8
   362                           postinc0	equ	0xFEE
   363                           wreg	equ	0xFE8
   364                           
   365                           	psect	bssBANK0
   366  0000BA                     __pbssBANK0:
   367                           	opt stack 0
   368  0000BA                     _GGA_Pointers:
   369                           	opt stack 0
   370  0000BA                     	ds	20
   371  0000CE                     _Data_Buffer:
   372                           	opt stack 0
   373  0000CE                     	ds	15
   374                           tblptru	equ	0xFF8
   375                           postinc0	equ	0xFEE
   376                           wreg	equ	0xFE8
   377                           
   378                           	psect	bssBANK1
   379  000100                     __pbssBANK1:
   380                           	opt stack 0
   381  000100                     _GGA_Buffer:
   382                           	opt stack 0
   383  000100                     	ds	80
   384                           tblptru	equ	0xFF8
   385                           postinc0	equ	0xFEE
   386                           wreg	equ	0xFE8
   387                           
   388                           	psect	cstackBANK0
   389  000060                     __pcstackBANK0:
   390                           	opt stack 0
   391  000060                     ?_get_latitude:
   392                           	opt stack 0
   393  000060                     ?_get_longitude:
   394                           	opt stack 0
   395  000060                     ?_get_altitude:
   396                           	opt stack 0
   397  000060                     ___ftadd@sign:
   398                           	opt stack 0
   399  000060                     ___fttol@sign1:
   400                           	opt stack 0
   401                           
   402                           ; 1 bytes @ 0x0
   403  000060                     	ds	1
   404  000061                     ___ftadd@exp2:
   405                           	opt stack 0
   406  000061                     ___fttol@lval:
   407                           	opt stack 0
   408                           
   409                           ; 4 bytes @ 0x1
   410  000061                     	ds	1
   411  000062                     ___ftadd@exp1:
   412                           	opt stack 0
   413                           
   414                           ; 1 bytes @ 0x2
   415  000062                     	ds	1
   416  000063                     ?___ftsub:
   417                           	opt stack 0
   418  000063                     ___ftsub@f1:
   419                           	opt stack 0
   420  000063                     get_altitude@Alt_Buffer:
   421                           	opt stack 0
   422  000063                     get_latitude@Lat_Buffer:
   423                           	opt stack 0
   424  000063                     get_longitude@Long_Buffer:
   425                           	opt stack 0
   426                           
   427                           ; 15 bytes @ 0x3
   428  000063                     	ds	2
   429  000065                     ___fttol@exp1:
   430                           	opt stack 0
   431                           
   432                           ; 1 bytes @ 0x5
   433  000065                     	ds	1
   434  000066                     ?_convert_to_degrees:
   435                           	opt stack 0
   436  000066                     convert_to_degrees@NMEA_lat_long:
   437                           	opt stack 0
   438  000066                     ___ftsub@f2:
   439                           	opt stack 0
   440  000066                     USART_Init@baud_rate:
   441                           	opt stack 0
   442                           
   443                           ; 4 bytes @ 0x6
   444  000066                     	ds	3
   445  000069                     ?_sprintf:
   446                           	opt stack 0
   447  000069                     sprintf@sp:
   448                           	opt stack 0
   449  000069                     convert_to_degrees@minutes:
   450                           	opt stack 0
   451                           
   452                           ; 3 bytes @ 0x9
   453  000069                     	ds	1
   454  00006A                     USART_Init@temp:
   455                           	opt stack 0
   456                           
   457                           ; 3 bytes @ 0xA
   458  00006A                     	ds	1
   459  00006B                     sprintf@f:
   460                           	opt stack 0
   461                           
   462                           ; 2 bytes @ 0xB
   463  00006B                     	ds	1
   464  00006C                     convert_to_degrees@dec_deg:
   465                           	opt stack 0
   466                           
   467                           ; 3 bytes @ 0xC
   468  00006C                     	ds	3
   469  00006F                     convert_to_degrees@degrees:
   470                           	opt stack 0
   471  00006F                     get_altitude@_Altitude:
   472                           	opt stack 0
   473                           
   474                           ; 3 bytes @ 0xF
   475  00006F                     	ds	2
   476  000071                     convert_to_degrees@decimal:
   477                           	opt stack 0
   478                           
   479                           ; 3 bytes @ 0x11
   480  000071                     	ds	1
   481  000072                     get_altitude@alt_pointer:
   482                           	opt stack 0
   483  000072                     get_latitude@_latitude:
   484                           	opt stack 0
   485  000072                     get_longitude@_longitude:
   486                           	opt stack 0
   487                           
   488                           ; 3 bytes @ 0x12
   489  000072                     	ds	1
   490  000073                     ??_sprintf:
   491  000073                     get_altitude@alt_index:
   492                           	opt stack 0
   493                           
   494                           ; 1 bytes @ 0x13
   495  000073                     	ds	1
   496  000074                     get_altitude@index:
   497                           	opt stack 0
   498                           
   499                           ; 1 bytes @ 0x14
   500  000074                     	ds	1
   501  000075                     get_latitude@lat_pointer:
   502                           	opt stack 0
   503  000075                     get_longitude@long_pointer:
   504                           	opt stack 0
   505                           
   506                           ; 1 bytes @ 0x15
   507  000075                     	ds	1
   508  000076                     get_latitude@index:
   509                           	opt stack 0
   510  000076                     get_longitude@index:
   511                           	opt stack 0
   512                           
   513                           ; 1 bytes @ 0x16
   514  000076                     	ds	1
   515  000077                     get_latitude@lat_index:
   516                           	opt stack 0
   517  000077                     get_longitude@long_index:
   518                           	opt stack 0
   519                           
   520                           ; 1 bytes @ 0x17
   521  000077                     	ds	2
   522  000079                     _sprintf$1063:
   523                           	opt stack 0
   524                           
   525                           ; 3 bytes @ 0x19
   526  000079                     	ds	3
   527  00007C                     sprintf@ap:
   528                           	opt stack 0
   529                           
   530                           ; 2 bytes @ 0x1C
   531  00007C                     	ds	2
   532  00007E                     sprintf@flag:
   533                           	opt stack 0
   534                           
   535                           ; 2 bytes @ 0x1E
   536  00007E                     	ds	2
   537  000080                     sprintf@exp:
   538                           	opt stack 0
   539                           
   540                           ; 2 bytes @ 0x20
   541  000080                     	ds	2
   542  000082                     sprintf@tmpval:
   543                           	opt stack 0
   544                           
   545                           ; 4 bytes @ 0x22
   546  000082                     	ds	4
   547  000086                     sprintf@val:
   548                           	opt stack 0
   549                           
   550                           ; 4 bytes @ 0x26
   551  000086                     	ds	4
   552  00008A                     sprintf@prec:
   553                           	opt stack 0
   554                           
   555                           ; 2 bytes @ 0x2A
   556  00008A                     	ds	2
   557  00008C                     sprintf@fval:
   558                           	opt stack 0
   559                           
   560                           ; 3 bytes @ 0x2C
   561  00008C                     	ds	3
   562  00008F                     sprintf@c:
   563                           	opt stack 0
   564                           
   565                           ; 1 bytes @ 0x2F
   566  00008F                     	ds	1
   567  000090                     convert_time_to_UTC@UTC_Time:
   568                           	opt stack 0
   569                           
   570                           ; 4 bytes @ 0x30
   571  000090                     	ds	4
   572  000094                     _convert_time_to_UTC$1059:
   573                           	opt stack 0
   574                           
   575                           ; 4 bytes @ 0x34
   576  000094                     	ds	4
   577  000098                     convert_time_to_UTC@hour:
   578                           	opt stack 0
   579                           
   580                           ; 2 bytes @ 0x38
   581  000098                     	ds	2
   582  00009A                     convert_time_to_UTC@min:
   583                           	opt stack 0
   584                           
   585                           ; 2 bytes @ 0x3A
   586  00009A                     	ds	2
   587  00009C                     convert_time_to_UTC@sec:
   588                           	opt stack 0
   589                           
   590                           ; 2 bytes @ 0x3C
   591  00009C                     	ds	2
   592  00009E                     main@GPS_Buffer:
   593                           	opt stack 0
   594                           
   595                           ; 15 bytes @ 0x3E
   596  00009E                     	ds	15
   597  0000AD                     main@Time:
   598                           	opt stack 0
   599                           
   600                           ; 4 bytes @ 0x4D
   601  0000AD                     	ds	4
   602  0000B1                     main@Altitude:
   603                           	opt stack 0
   604                           
   605                           ; 3 bytes @ 0x51
   606  0000B1                     	ds	3
   607  0000B4                     main@Latitude:
   608                           	opt stack 0
   609                           
   610                           ; 3 bytes @ 0x54
   611  0000B4                     	ds	3
   612  0000B7                     main@Longitude:
   613                           	opt stack 0
   614                           
   615                           ; 3 bytes @ 0x57
   616  0000B7                     	ds	3
   617                           tblptru	equ	0xFF8
   618                           postinc0	equ	0xFEE
   619                           wreg	equ	0xFE8
   620                           
   621                           	psect	cstackCOMRAM
   622  000001                     __pcstackCOMRAM:
   623                           	opt stack 0
   624  000001                     ??_Serial_ISR:
   625  000001                     
   626                           ; 1 bytes @ 0x0
   627  000001                     	ds	14
   628  00000F                     Serial_ISR@received_char:
   629                           	opt stack 0
   630                           
   631                           ; 1 bytes @ 0xE
   632  00000F                     	ds	1
   633  000010                     ??_isdigit:
   634  000010                     ??_isspace:
   635  000010                     ?___awmod:
   636                           	opt stack 0
   637  000010                     ?___ftpack:
   638                           	opt stack 0
   639  000010                     ?__tdiv_to_l_:
   640                           	opt stack 0
   641  000010                     ?__div_to_l_:
   642                           	opt stack 0
   643  000010                     ?___lmul:
   644                           	opt stack 0
   645  000010                     ?___llmod:
   646                           	opt stack 0
   647  000010                     MSdelay@val:
   648                           	opt stack 0
   649  000010                     ___awmod@dividend:
   650                           	opt stack 0
   651  000010                     memset@p1:
   652                           	opt stack 0
   653  000010                     __div_to_l_@f1:
   654                           	opt stack 0
   655  000010                     ___ftpack@arg:
   656                           	opt stack 0
   657  000010                     __tdiv_to_l_@f1:
   658                           	opt stack 0
   659  000010                     ___ftge@ff1:
   660                           	opt stack 0
   661  000010                     ___lmul@multiplier:
   662                           	opt stack 0
   663  000010                     ___llmod@dividend:
   664                           	opt stack 0
   665                           
   666                           ; 4 bytes @ 0xF
   667  000010                     	ds	1
   668  000011                     _isdigit$712:
   669                           	opt stack 0
   670  000011                     _isspace$715:
   671                           	opt stack 0
   672                           
   673                           ; 1 bytes @ 0x10
   674  000011                     	ds	1
   675  000012                     isdigit@c:
   676                           	opt stack 0
   677  000012                     isspace@c:
   678                           	opt stack 0
   679  000012                     MSdelay@i:
   680                           	opt stack 0
   681  000012                     ___awmod@divisor:
   682                           	opt stack 0
   683  000012                     memset@c:
   684                           	opt stack 0
   685                           
   686                           ; 2 bytes @ 0x11
   687  000012                     	ds	1
   688  000013                     ___ftpack@exp:
   689                           	opt stack 0
   690  000013                     __div_to_l_@f2:
   691                           	opt stack 0
   692  000013                     __tdiv_to_l_@f2:
   693                           	opt stack 0
   694  000013                     ___ftge@ff2:
   695                           	opt stack 0
   696                           
   697                           ; 3 bytes @ 0x12
   698  000013                     	ds	1
   699  000014                     ___awmod@counter:
   700                           	opt stack 0
   701  000014                     ___ftpack@sign:
   702                           	opt stack 0
   703  000014                     MSdelay@j:
   704                           	opt stack 0
   705  000014                     memset@n:
   706                           	opt stack 0
   707  000014                     ___lmul@multiplicand:
   708                           	opt stack 0
   709  000014                     ___llmod@divisor:
   710                           	opt stack 0
   711                           
   712                           ; 4 bytes @ 0x13
   713  000014                     	ds	1
   714  000015                     ??___ftpack:
   715  000015                     ___awmod@sign:
   716                           	opt stack 0
   717                           
   718                           ; 1 bytes @ 0x14
   719  000015                     	ds	1
   720  000016                     ??__tdiv_to_l_:
   721  000016                     ??___ftge:
   722  000016                     ?___awdiv:
   723                           	opt stack 0
   724  000016                     LCD_Command@cmd:
   725                           	opt stack 0
   726  000016                     LCD_Char@char_data:
   727                           	opt stack 0
   728  000016                     ___awdiv@dividend:
   729                           	opt stack 0
   730  000016                     memset@p:
   731                           	opt stack 0
   732  000016                     __div_to_l_@quot:
   733                           	opt stack 0
   734                           
   735                           ; 4 bytes @ 0x15
   736  000016                     	ds	1
   737  000017                     LCD_String@str:
   738                           	opt stack 0
   739                           
   740                           ; 2 bytes @ 0x16
   741  000017                     	ds	1
   742  000018                     ?___altoft:
   743                           	opt stack 0
   744  000018                     ?___awtoft:
   745                           	opt stack 0
   746  000018                     ?___lltoft:
   747                           	opt stack 0
   748  000018                     ___llmod@counter:
   749                           	opt stack 0
   750  000018                     ___awdiv@divisor:
   751                           	opt stack 0
   752  000018                     ___awtoft@c:
   753                           	opt stack 0
   754  000018                     ___lmul@product:
   755                           	opt stack 0
   756  000018                     ___altoft@c:
   757                           	opt stack 0
   758  000018                     ___lltoft@c:
   759                           	opt stack 0
   760                           
   761                           ; 4 bytes @ 0x17
   762  000018                     	ds	1
   763  000019                     ?___lldiv:
   764                           	opt stack 0
   765  000019                     LCD_String_xy@pos:
   766                           	opt stack 0
   767  000019                     __tdiv_to_l_@quot:
   768                           	opt stack 0
   769  000019                     ___lldiv@dividend:
   770                           	opt stack 0
   771                           
   772                           ; 4 bytes @ 0x18
   773  000019                     	ds	1
   774  00001A                     ___awdiv@counter:
   775                           	opt stack 0
   776  00001A                     __div_to_l_@cntr:
   777                           	opt stack 0
   778  00001A                     LCD_String_xy@str:
   779                           	opt stack 0
   780                           
   781                           ; 2 bytes @ 0x19
   782  00001A                     	ds	1
   783  00001B                     ___awdiv@sign:
   784                           	opt stack 0
   785  00001B                     ___awtoft@sign:
   786                           	opt stack 0
   787  00001B                     __div_to_l_@exp1:
   788                           	opt stack 0
   789                           
   790                           ; 1 bytes @ 0x1A
   791  00001B                     	ds	1
   792  00001C                     ??___altoft:
   793  00001C                     ??___lltoft:
   794  00001C                     ?_atol:
   795                           	opt stack 0
   796  00001C                     LCD_String_xy@row:
   797                           	opt stack 0
   798  00001C                     atol@s:
   799                           	opt stack 0
   800  00001C                     ___awdiv@quotient:
   801                           	opt stack 0
   802                           
   803                           ; 2 bytes @ 0x1B
   804  00001C                     	ds	1
   805  00001D                     __tdiv_to_l_@cntr:
   806                           	opt stack 0
   807  00001D                     ___lldiv@divisor:
   808                           	opt stack 0
   809                           
   810                           ; 4 bytes @ 0x1C
   811  00001D                     	ds	1
   812  00001E                     ?___wmul:
   813                           	opt stack 0
   814  00001E                     __tdiv_to_l_@exp1:
   815                           	opt stack 0
   816  00001E                     ___wmul@multiplier:
   817                           	opt stack 0
   818                           
   819                           ; 2 bytes @ 0x1D
   820  00001E                     	ds	2
   821  000020                     ??_atol:
   822  000020                     ___altoft@exp:
   823                           	opt stack 0
   824  000020                     ___lltoft@exp:
   825                           	opt stack 0
   826  000020                     ___wmul@multiplicand:
   827                           	opt stack 0
   828                           
   829                           ; 2 bytes @ 0x1F
   830  000020                     	ds	1
   831  000021                     ___altoft@sign:
   832                           	opt stack 0
   833  000021                     ___lldiv@quotient:
   834                           	opt stack 0
   835                           
   836                           ; 4 bytes @ 0x20
   837  000021                     	ds	1
   838  000022                     ?___ftdiv:
   839                           	opt stack 0
   840  000022                     ___wmul@product:
   841                           	opt stack 0
   842  000022                     ___ftdiv@f1:
   843                           	opt stack 0
   844                           
   845                           ; 3 bytes @ 0x21
   846  000022                     	ds	2
   847  000024                     ?___ftmul:
   848                           	opt stack 0
   849  000024                     atol@sign:
   850                           	opt stack 0
   851  000024                     ___ftmul@f1:
   852                           	opt stack 0
   853                           
   854                           ; 3 bytes @ 0x23
   855  000024                     	ds	1
   856  000025                     ___lldiv@counter:
   857                           	opt stack 0
   858  000025                     ___ftdiv@f2:
   859                           	opt stack 0
   860  000025                     atol@a:
   861                           	opt stack 0
   862                           
   863                           ; 4 bytes @ 0x24
   864  000025                     	ds	2
   865  000027                     ___ftmul@f2:
   866                           	opt stack 0
   867                           
   868                           ; 3 bytes @ 0x26
   869  000027                     	ds	1
   870  000028                     ??___ftdiv:
   871                           
   872                           ; 1 bytes @ 0x27
   873  000028                     	ds	1
   874  000029                     atol@c:
   875                           	opt stack 0
   876                           
   877                           ; 1 bytes @ 0x28
   878  000029                     	ds	1
   879  00002A                     ??___ftmul:
   880  00002A                     ?_get_gpstime:
   881                           	opt stack 0
   882                           
   883                           ; 4 bytes @ 0x29
   884  00002A                     	ds	1
   885  00002B                     ___ftdiv@cntr:
   886                           	opt stack 0
   887                           
   888                           ; 1 bytes @ 0x2A
   889  00002B                     	ds	1
   890  00002C                     ___ftdiv@f3:
   891                           	opt stack 0
   892                           
   893                           ; 3 bytes @ 0x2B
   894  00002C                     	ds	1
   895  00002D                     ___ftmul@exp:
   896                           	opt stack 0
   897                           
   898                           ; 1 bytes @ 0x2C
   899  00002D                     	ds	1
   900  00002E                     ___ftmul@f3_as_product:
   901                           	opt stack 0
   902                           
   903                           ; 3 bytes @ 0x2D
   904  00002E                     	ds	1
   905  00002F                     ___ftdiv@exp:
   906                           	opt stack 0
   907  00002F                     get_gpstime@Time_Buffer:
   908                           	opt stack 0
   909                           
   910                           ; 15 bytes @ 0x2E
   911  00002F                     	ds	1
   912  000030                     ___ftdiv@sign:
   913                           	opt stack 0
   914                           
   915                           ; 1 bytes @ 0x2F
   916  000030                     	ds	1
   917  000031                     ___ftmul@cntr:
   918                           	opt stack 0
   919                           
   920                           ; 1 bytes @ 0x30
   921  000031                     	ds	1
   922  000032                     ___ftmul@sign:
   923                           	opt stack 0
   924                           
   925                           ; 1 bytes @ 0x31
   926  000032                     	ds	1
   927  000033                     ?_fround:
   928                           	opt stack 0
   929  000033                     ?_scale:
   930                           	opt stack 0
   931  000033                     ?___ftneg:
   932                           	opt stack 0
   933  000033                     ___ftneg@f1:
   934                           	opt stack 0
   935                           
   936                           ; 3 bytes @ 0x32
   937  000033                     	ds	3
   938  000036                     ?_strtod:
   939                           	opt stack 0
   940  000036                     strtod@s:
   941                           	opt stack 0
   942  000036                     _fround$1061:
   943                           	opt stack 0
   944  000036                     _scale$1062:
   945                           	opt stack 0
   946                           
   947                           ; 3 bytes @ 0x35
   948  000036                     	ds	2
   949  000038                     strtod@res:
   950                           	opt stack 0
   951                           
   952                           ; 2 bytes @ 0x37
   953  000038                     	ds	1
   954  000039                     scale@scl:
   955                           	opt stack 0
   956  000039                     _fround$1060:
   957                           	opt stack 0
   958                           
   959                           ; 3 bytes @ 0x38
   960  000039                     	ds	1
   961  00003A                     ??_strtod:
   962  00003A                     ?___fttol:
   963                           	opt stack 0
   964  00003A                     ___fttol@f1:
   965                           	opt stack 0
   966                           
   967                           ; 3 bytes @ 0x39
   968  00003A                     	ds	1
   969  00003B                     strtod@eexp:
   970                           	opt stack 0
   971                           
   972                           ; 1 bytes @ 0x3A
   973  00003B                     	ds	1
   974  00003C                     fround@prec:
   975                           	opt stack 0
   976  00003C                     strtod@flags:
   977                           	opt stack 0
   978                           
   979                           ; 1 bytes @ 0x3B
   980  00003C                     	ds	1
   981  00003D                     ?___ftadd:
   982                           	opt stack 0
   983  00003D                     strtod@expon:
   984                           	opt stack 0
   985  00003D                     ___ftadd@f1:
   986                           	opt stack 0
   987                           
   988                           ; 3 bytes @ 0x3C
   989  00003D                     	ds	1
   990  00003E                     ??___fttol:
   991  00003E                     get_gpstime@_Time:
   992                           	opt stack 0
   993  00003E                     strtod@_u:
   994                           	opt stack 0
   995                           
   996                           ; 4 bytes @ 0x3D
   997  00003E                     	ds	2
   998  000040                     ___ftadd@f2:
   999                           	opt stack 0
  1000                           
  1001                           ; 3 bytes @ 0x3F
  1002  000040                     	ds	2
  1003  000042                     ?_atof:
  1004                           	opt stack 0
  1005  000042                     get_gpstime@index:
  1006                           	opt stack 0
  1007  000042                     atof@s:
  1008                           	opt stack 0
  1009                           
  1010                           ; 2 bytes @ 0x41
  1011  000042                     	ds	1
  1012  000043                     ??___ftadd:
  1013                           
  1014                           ; 1 bytes @ 0x42
  1015  000043                     	ds	2
  1016  000045                     
  1017                           ; 1 bytes @ 0x44
  1018  000045                     	ds	1
  1019  000046                     tblptru	equ	0xFF8
  1020                           postinc0	equ	0xFEE
  1021                           wreg	equ	0xFE8
  1022                           
  1023                           ; 1 bytes @ 0x45
  1024 ;;
  1025 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1026 ;;
  1027 ;; *************** function _main *****************
  1028 ;; Defined at:
  1029 ;;		line 34 in file "GPS_info.c"
  1030 ;; Parameters:    Size  Location     Type
  1031 ;;		None
  1032 ;; Auto vars:     Size  Location     Type
  1033 ;;  GPS_Buffer     15   62[BANK0 ] unsigned char [15]
  1034 ;;  Time            4   77[BANK0 ] unsigned long 
  1035 ;;  Longitude       3   87[BANK0 ] float 
  1036 ;;  Latitude        3   84[BANK0 ] float 
  1037 ;;  Altitude        3   81[BANK0 ] float 
  1038 ;; Return value:  Size  Location     Type
  1039 ;;                  1    wreg      void 
  1040 ;; Registers used:
  1041 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1042 ;; Tracked objects:
  1043 ;;		On entry : 0/0
  1044 ;;		On exit  : 0/0
  1045 ;;		Unchanged: 0/0
  1046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1047 ;;      Params:         0       0       0       0       0       0       0       0       0
  1048 ;;      Locals:         0      28       0       0       0       0       0       0       0
  1049 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1050 ;;      Totals:         0      28       0       0       0       0       0       0       0
  1051 ;;Total ram usage:       28 bytes
  1052 ;; Hardware stack levels required when called:    6
  1053 ;; This function calls:
  1054 ;;		_LCD_Init
  1055 ;;		_LCD_String
  1056 ;;		_LCD_String_xy
  1057 ;;		_USART_Init
  1058 ;;		_convert_time_to_UTC
  1059 ;;		_convert_to_degrees
  1060 ;;		_get_altitude
  1061 ;;		_get_gpstime
  1062 ;;		_get_latitude
  1063 ;;		_get_longitude
  1064 ;;		_memset
  1065 ;;		_sprintf
  1066 ;; This function is called by:
  1067 ;;		Startup code after reset
  1068 ;; This function uses a non-reentrant model
  1069 ;;
  1070                           
  1071                           	psect	text0
  1072  001BDA                     __ptext0:
  1073                           	opt stack 0
  1074  001BDA                     _main:
  1075                           	opt stack 25
  1076                           
  1077                           ;GPS_info.c: 35: unsigned long int Time;
  1078                           ;GPS_info.c: 36: float Latitude,Longitude,Altitude;
  1079                           ;GPS_info.c: 37: char GPS_Buffer[15];
  1080                           ;GPS_info.c: 39: OSCCON = 0x72;
  1081                           
  1082                           ;incstack = 0
  1083  001BDA  0E72               	movlw	114
  1084  001BDC  6ED3               	movwf	4051,c	;volatile
  1085                           
  1086                           ;GPS_info.c: 40: LCD_Init();
  1087  001BDE  ECBC  F018         	call	_LCD_Init	;wreg free
  1088                           
  1089                           ;GPS_info.c: 41: INTCONbits.GIE=1;
  1090  001BE2  8EF2               	bsf	intcon,7,c	;volatile
  1091                           
  1092                           ;GPS_info.c: 42: INTCONbits.PEIE=1;
  1093  001BE4  8CF2               	bsf	intcon,6,c	;volatile
  1094                           
  1095                           ;GPS_info.c: 43: PIE1bits.RCIE=1;
  1096  001BE6  8A9D               	bsf	3997,5,c	;volatile
  1097                           
  1098                           ;GPS_info.c: 44: USART_Init(9600);
  1099  001BE8  0E80               	movlw	128
  1100  001BEA  0100               	movlb	0	; () banked
  1101  001BEC  6F66               	movwf	USART_Init@baud_rate& (0+255),b
  1102  001BEE  0E25               	movlw	37
  1103  001BF0  6F67               	movwf	(USART_Init@baud_rate+1)& (0+255),b
  1104  001BF2  0E00               	movlw	0
  1105  001BF4  6F68               	movwf	(USART_Init@baud_rate+2)& (0+255),b
  1106  001BF6  0E00               	movlw	0
  1107  001BF8  6F69               	movwf	(USART_Init@baud_rate+3)& (0+255),b
  1108  001BFA  ECC9  F016         	call	_USART_Init	;wreg free
  1109  001BFE                     l4728:
  1110                           
  1111                           ;GPS_info.c: 47: memset(GPS_Buffer,0,15);
  1112  001BFE  0E9E               	movlw	low main@GPS_Buffer
  1113  001C00  6E10               	movwf	memset@p1,c
  1114  001C02  0E00               	movlw	high main@GPS_Buffer
  1115  001C04  6E11               	movwf	memset@p1+1,c
  1116  001C06  0E00               	movlw	0
  1117  001C08  6E13               	movwf	memset@c+1,c
  1118  001C0A  0E00               	movlw	0
  1119  001C0C  6E12               	movwf	memset@c,c
  1120  001C0E  0E00               	movlw	0
  1121  001C10  6E15               	movwf	memset@n+1,c
  1122  001C12  0E0F               	movlw	15
  1123  001C14  6E14               	movwf	memset@n,c
  1124  001C16  EC2C  F019         	call	_memset	;wreg free
  1125                           
  1126                           ;GPS_info.c: 48: LCD_String_xy(1,0,"UTC Time: ");
  1127  001C1A  0E00               	movlw	0
  1128  001C1C  6E19               	movwf	LCD_String_xy@pos,c
  1129  001C1E  0E77               	movlw	low STR_1
  1130  001C20  6E1A               	movwf	LCD_String_xy@str,c
  1131  001C22  0E08               	movlw	high STR_1
  1132  001C24  6E1B               	movwf	LCD_String_xy@str+1,c
  1133  001C26  0E01               	movlw	1
  1134  001C28  EC14  F018         	call	_LCD_String_xy
  1135                           
  1136                           ;GPS_info.c: 49: Time = get_gpstime();
  1137  001C2C  EC42  F017         	call	_get_gpstime	;wreg free
  1138  001C30  C02A  F0AD         	movff	?_get_gpstime,main@Time
  1139  001C34  C02B  F0AE         	movff	?_get_gpstime+1,main@Time+1
  1140  001C38  C02C  F0AF         	movff	?_get_gpstime+2,main@Time+2
  1141  001C3C  C02D  F0B0         	movff	?_get_gpstime+3,main@Time+3
  1142                           
  1143                           ;GPS_info.c: 50: convert_time_to_UTC(Time);
  1144  001C40  C0AD  F090         	movff	main@Time,convert_time_to_UTC@UTC_Time
  1145  001C44  C0AE  F091         	movff	main@Time+1,convert_time_to_UTC@UTC_Time+1
  1146  001C48  C0AF  F092         	movff	main@Time+2,convert_time_to_UTC@UTC_Time+2
  1147  001C4C  C0B0  F093         	movff	main@Time+3,convert_time_to_UTC@UTC_Time+3
  1148  001C50  ECD5  F012         	call	_convert_time_to_UTC	;wreg free
  1149                           
  1150                           ;GPS_info.c: 51: LCD_String(Data_Buffer);
  1151  001C54  0ECE               	movlw	low _Data_Buffer
  1152  001C56  6E17               	movwf	LCD_String@str,c
  1153  001C58  0E00               	movlw	high _Data_Buffer
  1154  001C5A  6E18               	movwf	LCD_String@str+1,c
  1155  001C5C  EC6D  F018         	call	_LCD_String	;wreg free
  1156                           
  1157                           ;GPS_info.c: 52: LCD_String("  ");
  1158  001C60  0EA9               	movlw	low STR_2
  1159  001C62  6E17               	movwf	LCD_String@str,c
  1160  001C64  0E08               	movlw	high STR_2
  1161  001C66  6E18               	movwf	LCD_String@str+1,c
  1162  001C68  EC6D  F018         	call	_LCD_String	;wreg free
  1163                           
  1164                           ;GPS_info.c: 54: LCD_String_xy(2,0,"Lat: ");
  1165  001C6C  0E00               	movlw	0
  1166  001C6E  6E19               	movwf	LCD_String_xy@pos,c
  1167  001C70  0E92               	movlw	low STR_3
  1168  001C72  6E1A               	movwf	LCD_String_xy@str,c
  1169  001C74  0E08               	movlw	high STR_3
  1170  001C76  6E1B               	movwf	LCD_String_xy@str+1,c
  1171  001C78  0E02               	movlw	2
  1172  001C7A  EC14  F018         	call	_LCD_String_xy
  1173                           
  1174                           ;GPS_info.c: 55: Latitude = get_latitude(GGA_Pointers[0]);
  1175  001C7E  0100               	movlb	0	; () banked
  1176  001C80  51BA               	movf	_GGA_Pointers& (0+255),w,b
  1177  001C82  EC6D  F015         	call	_get_latitude
  1178  001C86  C060  F0B4         	movff	?_get_latitude,main@Latitude
  1179  001C8A  C061  F0B5         	movff	?_get_latitude+1,main@Latitude+1
  1180  001C8E  C062  F0B6         	movff	?_get_latitude+2,main@Latitude+2
  1181                           
  1182                           ;GPS_info.c: 56: Latitude = convert_to_degrees(Latitude);
  1183  001C92  C0B4  F066         	movff	main@Latitude,convert_to_degrees@NMEA_lat_long
  1184  001C96  C0B5  F067         	movff	main@Latitude+1,convert_to_degrees@NMEA_lat_long+1
  1185  001C9A  C0B6  F068         	movff	main@Latitude+2,convert_to_degrees@NMEA_lat_long+2
  1186  001C9E  ECF5  F00F         	call	_convert_to_degrees	;wreg free
  1187  001CA2  C066  F0B4         	movff	?_convert_to_degrees,main@Latitude
  1188  001CA6  C067  F0B5         	movff	?_convert_to_degrees+1,main@Latitude+1
  1189  001CAA  C068  F0B6         	movff	?_convert_to_degrees+2,main@Latitude+2
  1190                           
  1191                           ;GPS_info.c: 57: sprintf(GPS_Buffer,"%.05f",Latitude);
  1192  001CAE  0E9E               	movlw	low main@GPS_Buffer
  1193  001CB0  0100               	movlb	0	; () banked
  1194  001CB2  6F69               	movwf	sprintf@sp& (0+255),b
  1195  001CB4  0E00               	movlw	high main@GPS_Buffer
  1196  001CB6  0100               	movlb	0	; () banked
  1197  001CB8  6F6A               	movwf	(sprintf@sp+1)& (0+255),b
  1198  001CBA  0E9E               	movlw	low STR_4
  1199  001CBC  0100               	movlb	0	; () banked
  1200  001CBE  6F6B               	movwf	sprintf@f& (0+255),b
  1201  001CC0  0E08               	movlw	high STR_4
  1202  001CC2  0100               	movlb	0	; () banked
  1203  001CC4  6F6C               	movwf	(sprintf@f+1)& (0+255),b
  1204  001CC6  C0B4  F06D         	movff	main@Latitude,?_sprintf+4
  1205  001CCA  C0B5  F06E         	movff	main@Latitude+1,?_sprintf+5
  1206  001CCE  C0B6  F06F         	movff	main@Latitude+2,?_sprintf+6
  1207  001CD2  EC57  F004         	call	_sprintf	;wreg free
  1208                           
  1209                           ;GPS_info.c: 58: LCD_String(GPS_Buffer);
  1210  001CD6  0E9E               	movlw	low main@GPS_Buffer
  1211  001CD8  6E17               	movwf	LCD_String@str,c
  1212  001CDA  0E00               	movlw	high main@GPS_Buffer
  1213  001CDC  6E18               	movwf	LCD_String@str+1,c
  1214  001CDE  EC6D  F018         	call	_LCD_String	;wreg free
  1215                           
  1216                           ;GPS_info.c: 59: memset(GPS_Buffer,0,15);
  1217  001CE2  0E9E               	movlw	low main@GPS_Buffer
  1218  001CE4  6E10               	movwf	memset@p1,c
  1219  001CE6  0E00               	movlw	high main@GPS_Buffer
  1220  001CE8  6E11               	movwf	memset@p1+1,c
  1221  001CEA  0E00               	movlw	0
  1222  001CEC  6E13               	movwf	memset@c+1,c
  1223  001CEE  0E00               	movlw	0
  1224  001CF0  6E12               	movwf	memset@c,c
  1225  001CF2  0E00               	movlw	0
  1226  001CF4  6E15               	movwf	memset@n+1,c
  1227  001CF6  0E0F               	movlw	15
  1228  001CF8  6E14               	movwf	memset@n,c
  1229  001CFA  EC2C  F019         	call	_memset	;wreg free
  1230                           
  1231                           ;GPS_info.c: 61: LCD_String_xy(3,0,"Long: ");
  1232  001CFE  0E00               	movlw	0
  1233  001D00  6E19               	movwf	LCD_String_xy@pos,c
  1234  001D02  0E8B               	movlw	low STR_5
  1235  001D04  6E1A               	movwf	LCD_String_xy@str,c
  1236  001D06  0E08               	movlw	high STR_5
  1237  001D08  6E1B               	movwf	LCD_String_xy@str+1,c
  1238  001D0A  0E03               	movlw	3
  1239  001D0C  EC14  F018         	call	_LCD_String_xy
  1240                           
  1241                           ;GPS_info.c: 62: Longitude = get_longitude(GGA_Pointers[2]);
  1242  001D10  0100               	movlb	0	; () banked
  1243  001D12  51BC               	movf	(_GGA_Pointers+2)& (0+255),w,b
  1244  001D14  EC1E  F015         	call	_get_longitude
  1245  001D18  C060  F0B7         	movff	?_get_longitude,main@Longitude
  1246  001D1C  C061  F0B8         	movff	?_get_longitude+1,main@Longitude+1
  1247  001D20  C062  F0B9         	movff	?_get_longitude+2,main@Longitude+2
  1248                           
  1249                           ;GPS_info.c: 63: Longitude = convert_to_degrees(Longitude);
  1250  001D24  C0B7  F066         	movff	main@Longitude,convert_to_degrees@NMEA_lat_long
  1251  001D28  C0B8  F067         	movff	main@Longitude+1,convert_to_degrees@NMEA_lat_long+1
  1252  001D2C  C0B9  F068         	movff	main@Longitude+2,convert_to_degrees@NMEA_lat_long+2
  1253  001D30  ECF5  F00F         	call	_convert_to_degrees	;wreg free
  1254  001D34  C066  F0B7         	movff	?_convert_to_degrees,main@Longitude
  1255  001D38  C067  F0B8         	movff	?_convert_to_degrees+1,main@Longitude+1
  1256  001D3C  C068  F0B9         	movff	?_convert_to_degrees+2,main@Longitude+2
  1257                           
  1258                           ;GPS_info.c: 64: sprintf(GPS_Buffer,"%.05f",Longitude);
  1259  001D40  0E9E               	movlw	low main@GPS_Buffer
  1260  001D42  0100               	movlb	0	; () banked
  1261  001D44  6F69               	movwf	sprintf@sp& (0+255),b
  1262  001D46  0E00               	movlw	high main@GPS_Buffer
  1263  001D48  0100               	movlb	0	; () banked
  1264  001D4A  6F6A               	movwf	(sprintf@sp+1)& (0+255),b
  1265  001D4C  0E9E               	movlw	low STR_4
  1266  001D4E  0100               	movlb	0	; () banked
  1267  001D50  6F6B               	movwf	sprintf@f& (0+255),b
  1268  001D52  0E08               	movlw	high STR_4
  1269  001D54  0100               	movlb	0	; () banked
  1270  001D56  6F6C               	movwf	(sprintf@f+1)& (0+255),b
  1271  001D58  C0B7  F06D         	movff	main@Longitude,?_sprintf+4
  1272  001D5C  C0B8  F06E         	movff	main@Longitude+1,?_sprintf+5
  1273  001D60  C0B9  F06F         	movff	main@Longitude+2,?_sprintf+6
  1274  001D64  EC57  F004         	call	_sprintf	;wreg free
  1275                           
  1276                           ;GPS_info.c: 65: LCD_String(GPS_Buffer);
  1277  001D68  0E9E               	movlw	low main@GPS_Buffer
  1278  001D6A  6E17               	movwf	LCD_String@str,c
  1279  001D6C  0E00               	movlw	high main@GPS_Buffer
  1280  001D6E  6E18               	movwf	LCD_String@str+1,c
  1281  001D70  EC6D  F018         	call	_LCD_String	;wreg free
  1282                           
  1283                           ;GPS_info.c: 66: memset(GPS_Buffer,0,15);
  1284  001D74  0E9E               	movlw	low main@GPS_Buffer
  1285  001D76  6E10               	movwf	memset@p1,c
  1286  001D78  0E00               	movlw	high main@GPS_Buffer
  1287  001D7A  6E11               	movwf	memset@p1+1,c
  1288  001D7C  0E00               	movlw	0
  1289  001D7E  6E13               	movwf	memset@c+1,c
  1290  001D80  0E00               	movlw	0
  1291  001D82  6E12               	movwf	memset@c,c
  1292  001D84  0E00               	movlw	0
  1293  001D86  6E15               	movwf	memset@n+1,c
  1294  001D88  0E0F               	movlw	15
  1295  001D8A  6E14               	movwf	memset@n,c
  1296  001D8C  EC2C  F019         	call	_memset	;wreg free
  1297                           
  1298                           ;GPS_info.c: 68: LCD_String_xy(4,0,"Alt: ");
  1299  001D90  0E00               	movlw	0
  1300  001D92  6E19               	movwf	LCD_String_xy@pos,c
  1301  001D94  0E98               	movlw	low STR_7
  1302  001D96  6E1A               	movwf	LCD_String_xy@str,c
  1303  001D98  0E08               	movlw	high STR_7
  1304  001D9A  6E1B               	movwf	LCD_String_xy@str+1,c
  1305  001D9C  0E04               	movlw	4
  1306  001D9E  EC14  F018         	call	_LCD_String_xy
  1307                           
  1308                           ;GPS_info.c: 69: Altitude = get_altitude(GGA_Pointers[7]);
  1309  001DA2  0100               	movlb	0	; () banked
  1310  001DA4  51C1               	movf	(_GGA_Pointers+7)& (0+255),w,b
  1311  001DA6  EC04  F016         	call	_get_altitude
  1312  001DAA  C060  F0B1         	movff	?_get_altitude,main@Altitude
  1313  001DAE  C061  F0B2         	movff	?_get_altitude+1,main@Altitude+1
  1314  001DB2  C062  F0B3         	movff	?_get_altitude+2,main@Altitude+2
  1315                           
  1316                           ;GPS_info.c: 70: sprintf(GPS_Buffer,"%.2f",Altitude);
  1317  001DB6  0E9E               	movlw	low main@GPS_Buffer
  1318  001DB8  0100               	movlb	0	; () banked
  1319  001DBA  6F69               	movwf	sprintf@sp& (0+255),b
  1320  001DBC  0E00               	movlw	high main@GPS_Buffer
  1321  001DBE  0100               	movlb	0	; () banked
  1322  001DC0  6F6A               	movwf	(sprintf@sp+1)& (0+255),b
  1323  001DC2  0EA4               	movlw	low STR_8
  1324  001DC4  0100               	movlb	0	; () banked
  1325  001DC6  6F6B               	movwf	sprintf@f& (0+255),b
  1326  001DC8  0E08               	movlw	high STR_8
  1327  001DCA  0100               	movlb	0	; () banked
  1328  001DCC  6F6C               	movwf	(sprintf@f+1)& (0+255),b
  1329  001DCE  C0B1  F06D         	movff	main@Altitude,?_sprintf+4
  1330  001DD2  C0B2  F06E         	movff	main@Altitude+1,?_sprintf+5
  1331  001DD6  C0B3  F06F         	movff	main@Altitude+2,?_sprintf+6
  1332  001DDA  EC57  F004         	call	_sprintf	;wreg free
  1333                           
  1334                           ;GPS_info.c: 71: LCD_String(GPS_Buffer);
  1335  001DDE  0E9E               	movlw	low main@GPS_Buffer
  1336  001DE0  6E17               	movwf	LCD_String@str,c
  1337  001DE2  0E00               	movlw	high main@GPS_Buffer
  1338  001DE4  6E18               	movwf	LCD_String@str+1,c
  1339  001DE6  EC6D  F018         	call	_LCD_String	;wreg free
  1340  001DEA  D709               	goto	l4728
  1341  001DEC                     __end_of_main:
  1342                           	opt stack 0
  1343                           tblptru	equ	0xFF8
  1344                           intcon	equ	0xFF2
  1345                           postinc0	equ	0xFEE
  1346                           wreg	equ	0xFE8
  1347                           
  1348 ;; *************** function _memset *****************
  1349 ;; Defined at:
  1350 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\memset.c"
  1351 ;; Parameters:    Size  Location     Type
  1352 ;;  p1              2   15[COMRAM] PTR void 
  1353 ;;		 -> main@GPS_Buffer(15), 
  1354 ;;  c               2   17[COMRAM] int 
  1355 ;;  n               2   19[COMRAM] unsigned int 
  1356 ;; Auto vars:     Size  Location     Type
  1357 ;;  p               2   21[COMRAM] PTR unsigned char 
  1358 ;;		 -> main@GPS_Buffer(15), 
  1359 ;; Return value:  Size  Location     Type
  1360 ;;                  2   15[COMRAM] PTR void 
  1361 ;; Registers used:
  1362 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1363 ;; Tracked objects:
  1364 ;;		On entry : 0/0
  1365 ;;		On exit  : 0/0
  1366 ;;		Unchanged: 0/0
  1367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1368 ;;      Params:         6       0       0       0       0       0       0       0       0
  1369 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1370 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1371 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1372 ;;Total ram usage:        8 bytes
  1373 ;; Hardware stack levels used:    1
  1374 ;; Hardware stack levels required when called:    1
  1375 ;; This function calls:
  1376 ;;		Nothing
  1377 ;; This function is called by:
  1378 ;;		_main
  1379 ;; This function uses a non-reentrant model
  1380 ;;
  1381                           
  1382                           	psect	text1
  1383  003258                     __ptext1:
  1384                           	opt stack 0
  1385  003258                     _memset:
  1386                           	opt stack 29
  1387                           
  1388                           ;incstack = 0
  1389  003258  C010  F016         	movff	memset@p1,memset@p
  1390  00325C  C011  F017         	movff	memset@p1+1,memset@p+1
  1391  003260  D008               	goto	l3670
  1392  003262                     l3666:
  1393  003262  C016  FFD9         	movff	memset@p,fsr2l
  1394  003266  C017  FFDA         	movff	memset@p+1,fsr2h
  1395  00326A  C012  FFDF         	movff	memset@c,indf2
  1396  00326E  4A16               	infsnz	memset@p,f,c
  1397  003270  2A17               	incf	memset@p+1,f,c
  1398  003272                     l3670:
  1399  003272  0614               	decf	memset@n,f,c
  1400  003274  A0D8               	btfss	status,0,c
  1401  003276  0615               	decf	memset@n+1,f,c
  1402  003278  2814               	incf	memset@n,w,c
  1403  00327A  E1F3               	bnz	l3666
  1404  00327C  2815               	incf	memset@n+1,w,c
  1405  00327E  B4D8               	btfsc	status,2,c
  1406  003280  0012               	return	
  1407  003282  D7EF               	goto	l3666
  1408  003284                     __end_of_memset:
  1409                           	opt stack 0
  1410                           tblptru	equ	0xFF8
  1411                           intcon	equ	0xFF2
  1412                           postinc0	equ	0xFEE
  1413                           wreg	equ	0xFE8
  1414                           indf2	equ	0xFDF
  1415                           fsr2h	equ	0xFDA
  1416                           fsr2l	equ	0xFD9
  1417                           status	equ	0xFD8
  1418                           
  1419 ;; *************** function _get_longitude *****************
  1420 ;; Defined at:
  1421 ;;		line 106 in file "GPS_info.c"
  1422 ;; Parameters:    Size  Location     Type
  1423 ;;  long_pointer    1    wreg     unsigned char 
  1424 ;; Auto vars:     Size  Location     Type
  1425 ;;  long_pointer    1   21[BANK0 ] unsigned char 
  1426 ;;  Long_Buffer    15    3[BANK0 ] unsigned char [15]
  1427 ;;  _longitude      3   18[BANK0 ] float 
  1428 ;;  long_index      1   23[BANK0 ] unsigned char 
  1429 ;;  index           1   22[BANK0 ] unsigned char 
  1430 ;; Return value:  Size  Location     Type
  1431 ;;                  3    0[BANK0 ] float 
  1432 ;; Registers used:
  1433 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1434 ;; Tracked objects:
  1435 ;;		On entry : 0/0
  1436 ;;		On exit  : 0/0
  1437 ;;		Unchanged: 0/0
  1438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1439 ;;      Params:         0       3       0       0       0       0       0       0       0
  1440 ;;      Locals:         0      21       0       0       0       0       0       0       0
  1441 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1442 ;;      Totals:         1      24       0       0       0       0       0       0       0
  1443 ;;Total ram usage:       25 bytes
  1444 ;; Hardware stack levels used:    1
  1445 ;; Hardware stack levels required when called:    5
  1446 ;; This function calls:
  1447 ;;		_atof
  1448 ;; This function is called by:
  1449 ;;		_main
  1450 ;; This function uses a non-reentrant model
  1451 ;;
  1452                           
  1453                           	psect	text2
  1454  002A3C                     __ptext2:
  1455                           	opt stack 0
  1456  002A3C                     _get_longitude:
  1457                           	opt stack 25
  1458                           
  1459                           ;incstack = 0
  1460                           ;get_longitude@long_pointer stored from wreg
  1461  002A3C  0100               	movlb	0	; () banked
  1462  002A3E  6F75               	movwf	get_longitude@long_pointer& (0+255),b
  1463                           
  1464                           ;GPS_info.c: 107: unsigned char long_index;
  1465                           ;GPS_info.c: 108: unsigned char index = long_pointer+1;
  1466  002A40  0100               	movlb	0	; () banked
  1467  002A42  2975               	incf	get_longitude@long_pointer& (0+255),w,b
  1468  002A44  0100               	movlb	0	; () banked
  1469  002A46  6F76               	movwf	get_longitude@index& (0+255),b
  1470                           
  1471                           ; BSR set to: 0
  1472                           ;GPS_info.c: 109: char Long_Buffer[15];
  1473                           ;GPS_info.c: 110: float _longitude;
  1474                           ;GPS_info.c: 111: long_index=0;
  1475  002A48  0E00               	movlw	0
  1476  002A4A  0100               	movlb	0	; () banked
  1477  002A4C  6F77               	movwf	get_longitude@long_index& (0+255),b
  1478                           
  1479                           ;GPS_info.c: 114: for( ; GGA_Buffer[index]!=','; index++){
  1480  002A4E  D018               	goto	l4686
  1481  002A50                     l4680:
  1482                           
  1483                           ; BSR set to: 0
  1484                           ;GPS_info.c: 115: Long_Buffer[long_index]= GGA_Buffer[index];
  1485  002A50  0100               	movlb	0	; () banked
  1486  002A52  5176               	movf	get_longitude@index& (0+255),w,b
  1487  002A54  0D01               	mullw	1
  1488  002A56  0E00               	movlw	low _GGA_Buffer
  1489  002A58  24F3               	addwf	prodl,w,c
  1490  002A5A  6ED9               	movwf	fsr2l,c
  1491  002A5C  0E01               	movlw	high _GGA_Buffer
  1492  002A5E  20F4               	addwfc	prodh,w,c
  1493  002A60  6EDA               	movwf	fsr2h,c
  1494  002A62  0100               	movlb	0	; () banked
  1495  002A64  5177               	movf	get_longitude@long_index& (0+255),w,b
  1496  002A66  0D01               	mullw	1
  1497  002A68  0E63               	movlw	low get_longitude@Long_Buffer
  1498  002A6A  24F3               	addwf	prodl,w,c
  1499  002A6C  6EE1               	movwf	fsr1l,c
  1500  002A6E  0E00               	movlw	high get_longitude@Long_Buffer
  1501  002A70  20F4               	addwfc	prodh,w,c
  1502  002A72  6EE2               	movwf	fsr1h,c
  1503  002A74  CFDF FFE7          	movff	indf2,indf1
  1504                           
  1505                           ; BSR set to: 0
  1506                           ;GPS_info.c: 116: long_index++;
  1507  002A78  0100               	movlb	0	; () banked
  1508  002A7A  2B77               	incf	get_longitude@long_index& (0+255),f,b
  1509                           
  1510                           ; BSR set to: 0
  1511  002A7C  0100               	movlb	0	; () banked
  1512  002A7E  2B76               	incf	get_longitude@index& (0+255),f,b
  1513  002A80                     l4686:
  1514                           
  1515                           ; BSR set to: 0
  1516  002A80  0100               	movlb	0	; () banked
  1517  002A82  5176               	movf	get_longitude@index& (0+255),w,b
  1518  002A84  0D01               	mullw	1
  1519  002A86  0E00               	movlw	low _GGA_Buffer
  1520  002A88  24F3               	addwf	prodl,w,c
  1521  002A8A  6ED9               	movwf	fsr2l,c
  1522  002A8C  0E01               	movlw	high _GGA_Buffer
  1523  002A8E  20F4               	addwfc	prodh,w,c
  1524  002A90  6EDA               	movwf	fsr2h,c
  1525  002A92  0E2C               	movlw	44
  1526  002A94  18DE               	xorwf	postinc2,w,c
  1527  002A96  A4D8               	btfss	status,2,c
  1528  002A98  D7DB               	goto	l4680
  1529                           
  1530                           ; BSR set to: 0
  1531                           ;GPS_info.c: 117: }
  1532                           ;GPS_info.c: 118: long_index++;
  1533                           
  1534                           ; BSR set to: 0
  1535  002A9A  0100               	movlb	0	; () banked
  1536  002A9C  2B77               	incf	get_longitude@long_index& (0+255),f,b
  1537                           
  1538                           ; BSR set to: 0
  1539                           ;GPS_info.c: 119: E_W = GGA_Buffer[long_index];
  1540  002A9E  0100               	movlb	0	; () banked
  1541  002AA0  5177               	movf	get_longitude@long_index& (0+255),w,b
  1542  002AA2  0D01               	mullw	1
  1543  002AA4  0E00               	movlw	low _GGA_Buffer
  1544  002AA6  24F3               	addwf	prodl,w,c
  1545  002AA8  6ED9               	movwf	fsr2l,c
  1546  002AAA  0E01               	movlw	high _GGA_Buffer
  1547  002AAC  20F4               	addwfc	prodh,w,c
  1548  002AAE  6EDA               	movwf	fsr2h,c
  1549  002AB0  50DF               	movf	indf2,w,c
  1550  002AB2  6E4C               	movwf	_E_W,c
  1551                           
  1552                           ; BSR set to: 0
  1553                           ;GPS_info.c: 120: _longitude = atof(Long_Buffer);
  1554  002AB4  0E63               	movlw	low get_longitude@Long_Buffer
  1555  002AB6  6E42               	movwf	atof@s,c
  1556  002AB8  0E00               	movlw	high get_longitude@Long_Buffer
  1557  002ABA  6E43               	movwf	atof@s+1,c
  1558  002ABC  EC7A  F019         	call	_atof	;wreg free
  1559  002AC0  C042  F072         	movff	?_atof,get_longitude@_longitude
  1560  002AC4  C043  F073         	movff	?_atof+1,get_longitude@_longitude+1
  1561  002AC8  C044  F074         	movff	?_atof+2,get_longitude@_longitude+2
  1562                           
  1563                           ;GPS_info.c: 121: return _longitude;
  1564  002ACC  C072  F060         	movff	get_longitude@_longitude,?_get_longitude
  1565  002AD0  C073  F061         	movff	get_longitude@_longitude+1,?_get_longitude+1
  1566  002AD4  C074  F062         	movff	get_longitude@_longitude+2,?_get_longitude+2
  1567  002AD8  0012               	return	
  1568  002ADA                     __end_of_get_longitude:
  1569                           	opt stack 0
  1570                           tblptru	equ	0xFF8
  1571                           prodh	equ	0xFF4
  1572                           prodl	equ	0xFF3
  1573                           intcon	equ	0xFF2
  1574                           postinc0	equ	0xFEE
  1575                           wreg	equ	0xFE8
  1576                           indf1	equ	0xFE7
  1577                           fsr1h	equ	0xFE2
  1578                           fsr1l	equ	0xFE1
  1579                           indf2	equ	0xFDF
  1580                           postinc2	equ	0xFDE
  1581                           fsr2h	equ	0xFDA
  1582                           fsr2l	equ	0xFD9
  1583                           status	equ	0xFD8
  1584                           
  1585 ;; *************** function _get_latitude *****************
  1586 ;; Defined at:
  1587 ;;		line 89 in file "GPS_info.c"
  1588 ;; Parameters:    Size  Location     Type
  1589 ;;  lat_pointer     1    wreg     unsigned char 
  1590 ;; Auto vars:     Size  Location     Type
  1591 ;;  lat_pointer     1   21[BANK0 ] unsigned char 
  1592 ;;  Lat_Buffer     15    3[BANK0 ] unsigned char [15]
  1593 ;;  _latitude       3   18[BANK0 ] float 
  1594 ;;  lat_index       1   23[BANK0 ] unsigned char 
  1595 ;;  index           1   22[BANK0 ] unsigned char 
  1596 ;; Return value:  Size  Location     Type
  1597 ;;                  3    0[BANK0 ] float 
  1598 ;; Registers used:
  1599 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1600 ;; Tracked objects:
  1601 ;;		On entry : 0/0
  1602 ;;		On exit  : 0/0
  1603 ;;		Unchanged: 0/0
  1604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1605 ;;      Params:         0       3       0       0       0       0       0       0       0
  1606 ;;      Locals:         0      21       0       0       0       0       0       0       0
  1607 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1608 ;;      Totals:         1      24       0       0       0       0       0       0       0
  1609 ;;Total ram usage:       25 bytes
  1610 ;; Hardware stack levels used:    1
  1611 ;; Hardware stack levels required when called:    5
  1612 ;; This function calls:
  1613 ;;		_atof
  1614 ;; This function is called by:
  1615 ;;		_main
  1616 ;; This function uses a non-reentrant model
  1617 ;;
  1618                           
  1619                           	psect	text3
  1620  002ADA                     __ptext3:
  1621                           	opt stack 0
  1622  002ADA                     _get_latitude:
  1623                           	opt stack 25
  1624                           
  1625                           ;incstack = 0
  1626                           ;get_latitude@lat_pointer stored from wreg
  1627  002ADA  0100               	movlb	0	; () banked
  1628  002ADC  6F75               	movwf	get_latitude@lat_pointer& (0+255),b
  1629                           
  1630                           ;GPS_info.c: 90: unsigned char lat_index = lat_pointer+1;
  1631  002ADE  0100               	movlb	0	; () banked
  1632  002AE0  2975               	incf	get_latitude@lat_pointer& (0+255),w,b
  1633  002AE2  0100               	movlb	0	; () banked
  1634  002AE4  6F77               	movwf	get_latitude@lat_index& (0+255),b
  1635                           
  1636                           ; BSR set to: 0
  1637                           ;GPS_info.c: 91: unsigned char index = 0;
  1638  002AE6  0E00               	movlw	0
  1639  002AE8  0100               	movlb	0	; () banked
  1640  002AEA  6F76               	movwf	get_latitude@index& (0+255),b
  1641                           
  1642                           ;GPS_info.c: 92: char Lat_Buffer[15];
  1643                           ;GPS_info.c: 93: float _latitude;
  1644                           ;GPS_info.c: 96: for(;GGA_Buffer[lat_index]!=',';lat_index++){
  1645  002AEC  D018               	goto	l4652
  1646  002AEE                     l4646:
  1647                           
  1648                           ; BSR set to: 0
  1649                           ;GPS_info.c: 97: Lat_Buffer[index]= GGA_Buffer[lat_index];
  1650  002AEE  0100               	movlb	0	; () banked
  1651  002AF0  5177               	movf	get_latitude@lat_index& (0+255),w,b
  1652  002AF2  0D01               	mullw	1
  1653  002AF4  0E00               	movlw	low _GGA_Buffer
  1654  002AF6  24F3               	addwf	prodl,w,c
  1655  002AF8  6ED9               	movwf	fsr2l,c
  1656  002AFA  0E01               	movlw	high _GGA_Buffer
  1657  002AFC  20F4               	addwfc	prodh,w,c
  1658  002AFE  6EDA               	movwf	fsr2h,c
  1659  002B00  0100               	movlb	0	; () banked
  1660  002B02  5176               	movf	get_latitude@index& (0+255),w,b
  1661  002B04  0D01               	mullw	1
  1662  002B06  0E63               	movlw	low get_latitude@Lat_Buffer
  1663  002B08  24F3               	addwf	prodl,w,c
  1664  002B0A  6EE1               	movwf	fsr1l,c
  1665  002B0C  0E00               	movlw	high get_latitude@Lat_Buffer
  1666  002B0E  20F4               	addwfc	prodh,w,c
  1667  002B10  6EE2               	movwf	fsr1h,c
  1668  002B12  CFDF FFE7          	movff	indf2,indf1
  1669                           
  1670                           ; BSR set to: 0
  1671                           ;GPS_info.c: 98: index++;
  1672  002B16  0100               	movlb	0	; () banked
  1673  002B18  2B76               	incf	get_latitude@index& (0+255),f,b
  1674                           
  1675                           ; BSR set to: 0
  1676  002B1A  0100               	movlb	0	; () banked
  1677  002B1C  2B77               	incf	get_latitude@lat_index& (0+255),f,b
  1678  002B1E                     l4652:
  1679                           
  1680                           ; BSR set to: 0
  1681  002B1E  0100               	movlb	0	; () banked
  1682  002B20  5177               	movf	get_latitude@lat_index& (0+255),w,b
  1683  002B22  0D01               	mullw	1
  1684  002B24  0E00               	movlw	low _GGA_Buffer
  1685  002B26  24F3               	addwf	prodl,w,c
  1686  002B28  6ED9               	movwf	fsr2l,c
  1687  002B2A  0E01               	movlw	high _GGA_Buffer
  1688  002B2C  20F4               	addwfc	prodh,w,c
  1689  002B2E  6EDA               	movwf	fsr2h,c
  1690  002B30  0E2C               	movlw	44
  1691  002B32  18DE               	xorwf	postinc2,w,c
  1692  002B34  A4D8               	btfss	status,2,c
  1693  002B36  D7DB               	goto	l4646
  1694                           
  1695                           ; BSR set to: 0
  1696                           ;GPS_info.c: 99: }
  1697                           ;GPS_info.c: 100: lat_index++;
  1698                           
  1699                           ; BSR set to: 0
  1700  002B38  0100               	movlb	0	; () banked
  1701  002B3A  2B77               	incf	get_latitude@lat_index& (0+255),f,b
  1702                           
  1703                           ; BSR set to: 0
  1704                           ;GPS_info.c: 101: N_S = GGA_Buffer[lat_index];
  1705  002B3C  0100               	movlb	0	; () banked
  1706  002B3E  5177               	movf	get_latitude@lat_index& (0+255),w,b
  1707  002B40  0D01               	mullw	1
  1708  002B42  0E00               	movlw	low _GGA_Buffer
  1709  002B44  24F3               	addwf	prodl,w,c
  1710  002B46  6ED9               	movwf	fsr2l,c
  1711  002B48  0E01               	movlw	high _GGA_Buffer
  1712  002B4A  20F4               	addwfc	prodh,w,c
  1713  002B4C  6EDA               	movwf	fsr2h,c
  1714  002B4E  50DF               	movf	indf2,w,c
  1715  002B50  6E4E               	movwf	_N_S,c
  1716                           
  1717                           ; BSR set to: 0
  1718                           ;GPS_info.c: 102: _latitude = atof(Lat_Buffer);
  1719  002B52  0E63               	movlw	low get_latitude@Lat_Buffer
  1720  002B54  6E42               	movwf	atof@s,c
  1721  002B56  0E00               	movlw	high get_latitude@Lat_Buffer
  1722  002B58  6E43               	movwf	atof@s+1,c
  1723  002B5A  EC7A  F019         	call	_atof	;wreg free
  1724  002B5E  C042  F072         	movff	?_atof,get_latitude@_latitude
  1725  002B62  C043  F073         	movff	?_atof+1,get_latitude@_latitude+1
  1726  002B66  C044  F074         	movff	?_atof+2,get_latitude@_latitude+2
  1727                           
  1728                           ;GPS_info.c: 103: return _latitude;
  1729  002B6A  C072  F060         	movff	get_latitude@_latitude,?_get_latitude
  1730  002B6E  C073  F061         	movff	get_latitude@_latitude+1,?_get_latitude+1
  1731  002B72  C074  F062         	movff	get_latitude@_latitude+2,?_get_latitude+2
  1732  002B76  0012               	return	
  1733  002B78                     __end_of_get_latitude:
  1734                           	opt stack 0
  1735                           tblptru	equ	0xFF8
  1736                           prodh	equ	0xFF4
  1737                           prodl	equ	0xFF3
  1738                           intcon	equ	0xFF2
  1739                           postinc0	equ	0xFEE
  1740                           wreg	equ	0xFE8
  1741                           indf1	equ	0xFE7
  1742                           fsr1h	equ	0xFE2
  1743                           fsr1l	equ	0xFE1
  1744                           indf2	equ	0xFDF
  1745                           postinc2	equ	0xFDE
  1746                           fsr2h	equ	0xFDA
  1747                           fsr2l	equ	0xFD9
  1748                           status	equ	0xFD8
  1749                           
  1750 ;; *************** function _get_gpstime *****************
  1751 ;; Defined at:
  1752 ;;		line 76 in file "GPS_info.c"
  1753 ;; Parameters:    Size  Location     Type
  1754 ;;		None
  1755 ;; Auto vars:     Size  Location     Type
  1756 ;;  Time_Buffer    15   46[COMRAM] unsigned char [15]
  1757 ;;  _Time           4   61[COMRAM] unsigned long 
  1758 ;;  index           1   65[COMRAM] unsigned char 
  1759 ;; Return value:  Size  Location     Type
  1760 ;;                  4   41[COMRAM] unsigned long 
  1761 ;; Registers used:
  1762 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1763 ;; Tracked objects:
  1764 ;;		On entry : 0/0
  1765 ;;		On exit  : 0/0
  1766 ;;		Unchanged: 0/0
  1767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1768 ;;      Params:         4       0       0       0       0       0       0       0       0
  1769 ;;      Locals:        20       0       0       0       0       0       0       0       0
  1770 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1771 ;;      Totals:        25       0       0       0       0       0       0       0       0
  1772 ;;Total ram usage:       25 bytes
  1773 ;; Hardware stack levels used:    1
  1774 ;; Hardware stack levels required when called:    3
  1775 ;; This function calls:
  1776 ;;		_atol
  1777 ;; This function is called by:
  1778 ;;		_main
  1779 ;; This function uses a non-reentrant model
  1780 ;;
  1781                           
  1782                           	psect	text4
  1783  002E84                     __ptext4:
  1784                           	opt stack 0
  1785  002E84                     _get_gpstime:
  1786                           	opt stack 27
  1787                           
  1788                           ;GPS_info.c: 77: unsigned char index;
  1789                           ;GPS_info.c: 78: unsigned char Time_Buffer[15];
  1790                           ;GPS_info.c: 79: unsigned long int _Time;
  1791                           ;GPS_info.c: 82: for(index = 0;GGA_Buffer[index]!=','; index++){
  1792                           
  1793                           ;incstack = 0
  1794  002E84  0E00               	movlw	0
  1795  002E86  6E42               	movwf	get_gpstime@index,c
  1796  002E88  D013               	goto	l3696
  1797  002E8A                     l3692:
  1798                           
  1799                           ;GPS_info.c: 83: Time_Buffer[index] = GGA_Buffer[index];
  1800  002E8A  5042               	movf	get_gpstime@index,w,c
  1801  002E8C  0D01               	mullw	1
  1802  002E8E  0E00               	movlw	low _GGA_Buffer
  1803  002E90  24F3               	addwf	prodl,w,c
  1804  002E92  6ED9               	movwf	fsr2l,c
  1805  002E94  0E01               	movlw	high _GGA_Buffer
  1806  002E96  20F4               	addwfc	prodh,w,c
  1807  002E98  6EDA               	movwf	fsr2h,c
  1808  002E9A  5042               	movf	get_gpstime@index,w,c
  1809  002E9C  0D01               	mullw	1
  1810  002E9E  0E2F               	movlw	low get_gpstime@Time_Buffer
  1811  002EA0  24F3               	addwf	prodl,w,c
  1812  002EA2  6EE1               	movwf	fsr1l,c
  1813  002EA4  0E00               	movlw	high get_gpstime@Time_Buffer
  1814  002EA6  20F4               	addwfc	prodh,w,c
  1815  002EA8  6EE2               	movwf	fsr1h,c
  1816  002EAA  CFDF FFE7          	movff	indf2,indf1
  1817  002EAE  2A42               	incf	get_gpstime@index,f,c
  1818  002EB0                     l3696:
  1819  002EB0  5042               	movf	get_gpstime@index,w,c
  1820  002EB2  0D01               	mullw	1
  1821  002EB4  0E00               	movlw	low _GGA_Buffer
  1822  002EB6  24F3               	addwf	prodl,w,c
  1823  002EB8  6ED9               	movwf	fsr2l,c
  1824  002EBA  0E01               	movlw	high _GGA_Buffer
  1825  002EBC  20F4               	addwfc	prodh,w,c
  1826  002EBE  6EDA               	movwf	fsr2h,c
  1827  002EC0  0E2C               	movlw	44
  1828  002EC2  18DE               	xorwf	postinc2,w,c
  1829  002EC4  A4D8               	btfss	status,2,c
  1830  002EC6  D7E1               	goto	l3692
  1831                           
  1832                           ;GPS_info.c: 84: }
  1833                           ;GPS_info.c: 85: _Time= atol(Time_Buffer);
  1834  002EC8  0E2F               	movlw	low get_gpstime@Time_Buffer
  1835  002ECA  6E1C               	movwf	atol@s,c
  1836  002ECC  0E00               	movlw	high get_gpstime@Time_Buffer
  1837  002ECE  6E1D               	movwf	atol@s+1,c
  1838  002ED0  EC5E  F013         	call	_atol	;wreg free
  1839  002ED4  C01C  F03E         	movff	?_atol,get_gpstime@_Time
  1840  002ED8  C01D  F03F         	movff	?_atol+1,get_gpstime@_Time+1
  1841  002EDC  C01E  F040         	movff	?_atol+2,get_gpstime@_Time+2
  1842  002EE0  C01F  F041         	movff	?_atol+3,get_gpstime@_Time+3
  1843                           
  1844                           ;GPS_info.c: 86: return _Time;
  1845  002EE4  C03E  F02A         	movff	get_gpstime@_Time,?_get_gpstime
  1846  002EE8  C03F  F02B         	movff	get_gpstime@_Time+1,?_get_gpstime+1
  1847  002EEC  C040  F02C         	movff	get_gpstime@_Time+2,?_get_gpstime+2
  1848  002EF0  C041  F02D         	movff	get_gpstime@_Time+3,?_get_gpstime+3
  1849  002EF4  0012               	return	
  1850  002EF6                     __end_of_get_gpstime:
  1851                           	opt stack 0
  1852                           tblptru	equ	0xFF8
  1853                           prodh	equ	0xFF4
  1854                           prodl	equ	0xFF3
  1855                           intcon	equ	0xFF2
  1856                           postinc0	equ	0xFEE
  1857                           wreg	equ	0xFE8
  1858                           indf1	equ	0xFE7
  1859                           fsr1h	equ	0xFE2
  1860                           fsr1l	equ	0xFE1
  1861                           indf2	equ	0xFDF
  1862                           postinc2	equ	0xFDE
  1863                           fsr2h	equ	0xFDA
  1864                           fsr2l	equ	0xFD9
  1865                           status	equ	0xFD8
  1866                           
  1867 ;; *************** function _atol *****************
  1868 ;; Defined at:
  1869 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\atol.c"
  1870 ;; Parameters:    Size  Location     Type
  1871 ;;  s               2   27[COMRAM] PTR const unsigned char 
  1872 ;;		 -> get_gpstime@Time_Buffer(15), 
  1873 ;; Auto vars:     Size  Location     Type
  1874 ;;  a               4   36[COMRAM] long 
  1875 ;;  c               1   40[COMRAM] unsigned char 
  1876 ;;  sign            1   35[COMRAM] unsigned char 
  1877 ;; Return value:  Size  Location     Type
  1878 ;;                  4   27[COMRAM] long 
  1879 ;; Registers used:
  1880 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1881 ;; Tracked objects:
  1882 ;;		On entry : 0/0
  1883 ;;		On exit  : 0/0
  1884 ;;		Unchanged: 0/0
  1885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1886 ;;      Params:         4       0       0       0       0       0       0       0       0
  1887 ;;      Locals:         6       0       0       0       0       0       0       0       0
  1888 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1889 ;;      Totals:        14       0       0       0       0       0       0       0       0
  1890 ;;Total ram usage:       14 bytes
  1891 ;; Hardware stack levels used:    1
  1892 ;; Hardware stack levels required when called:    2
  1893 ;; This function calls:
  1894 ;;		___lmul
  1895 ;;		_isdigit
  1896 ;; This function is called by:
  1897 ;;		_get_gpstime
  1898 ;; This function uses a non-reentrant model
  1899 ;;
  1900                           
  1901                           	psect	text5
  1902  0026BC                     __ptext5:
  1903                           	opt stack 0
  1904  0026BC                     _atol:
  1905                           	opt stack 27
  1906  0026BC  C01C  FFD9         	movff	atol@s,fsr2l
  1907  0026C0  C01D  FFDA         	movff	atol@s+1,fsr2h
  1908  0026C4  50DF               	movf	indf2,w,c
  1909  0026C6  6E29               	movwf	atol@c,c
  1910  0026C8  4A1C               	infsnz	atol@s,f,c
  1911  0026CA  2A1D               	incf	atol@s+1,f,c
  1912  0026CC  0E20               	movlw	32
  1913  0026CE  1829               	xorwf	atol@c,w,c
  1914  0026D0  B4D8               	btfsc	status,2,c
  1915  0026D2  D7F4               	goto	l3572
  1916  0026D4  0E09               	movlw	9
  1917  0026D6  1829               	xorwf	atol@c,w,c
  1918  0026D8  B4D8               	btfsc	status,2,c
  1919  0026DA  D7F0               	goto	l3572
  1920  0026DC  0E00               	movlw	0
  1921  0026DE  6E25               	movwf	atol@a,c
  1922  0026E0  0E00               	movlw	0
  1923  0026E2  6E26               	movwf	atol@a+1,c
  1924  0026E4  0E00               	movlw	0
  1925  0026E6  6E27               	movwf	atol@a+2,c
  1926  0026E8  0E00               	movlw	0
  1927  0026EA  6E28               	movwf	atol@a+3,c
  1928  0026EC  0E00               	movlw	0
  1929  0026EE  6E24               	movwf	atol@sign,c
  1930  0026F0  0E2D               	movlw	45
  1931  0026F2  1829               	xorwf	atol@c,w,c
  1932  0026F4  A4D8               	btfss	status,2,c
  1933  0026F6  D005               	goto	l3590
  1934  0026F8  2A24               	incf	atol@sign,f,c
  1935  0026FA  D02A               	goto	l3598
  1936  0026FC                     l3588:
  1937  0026FC  4A1C               	infsnz	atol@s,f,c
  1938  0026FE  2A1D               	incf	atol@s+1,f,c
  1939  002700  D02E               	goto	l3602
  1940  002702                     l3590:
  1941  002702  0E2B               	movlw	43
  1942  002704  1829               	xorwf	atol@c,w,c
  1943  002706  A4D8               	btfss	status,2,c
  1944  002708  D02A               	goto	l3602
  1945  00270A  D022               	goto	l3598
  1946  00270C                     l3596:
  1947  00270C  C025  F010         	movff	atol@a,___lmul@multiplier
  1948  002710  C026  F011         	movff	atol@a+1,___lmul@multiplier+1
  1949  002714  C027  F012         	movff	atol@a+2,___lmul@multiplier+2
  1950  002718  C028  F013         	movff	atol@a+3,___lmul@multiplier+3
  1951  00271C  0E0A               	movlw	10
  1952  00271E  6E14               	movwf	___lmul@multiplicand,c
  1953  002720  0E00               	movlw	0
  1954  002722  6E15               	movwf	___lmul@multiplicand+1,c
  1955  002724  0E00               	movlw	0
  1956  002726  6E16               	movwf	___lmul@multiplicand+2,c
  1957  002728  0E00               	movlw	0
  1958  00272A  6E17               	movwf	___lmul@multiplicand+3,c
  1959  00272C  EC42  F018         	call	___lmul	;wreg free
  1960  002730  C029  F020         	movff	atol@c,??_atol
  1961  002734  0ED0               	movlw	208
  1962  002736  2620               	addwf	??_atol,f,c
  1963  002738  5020               	movf	??_atol,w,c
  1964  00273A  2410               	addwf	?___lmul,w,c
  1965  00273C  6E25               	movwf	atol@a,c
  1966  00273E  0E00               	movlw	0
  1967  002740  2011               	addwfc	?___lmul+1,w,c
  1968  002742  6E26               	movwf	atol@a+1,c
  1969  002744  0E00               	movlw	0
  1970  002746  2012               	addwfc	?___lmul+2,w,c
  1971  002748  6E27               	movwf	atol@a+2,c
  1972  00274A  0E00               	movlw	0
  1973  00274C  2013               	addwfc	?___lmul+3,w,c
  1974  00274E  6E28               	movwf	atol@a+3,c
  1975  002750                     l3598:
  1976  002750  C01C  FFD9         	movff	atol@s,fsr2l
  1977  002754  C01D  FFDA         	movff	atol@s+1,fsr2h
  1978  002758  50DF               	movf	indf2,w,c
  1979  00275A  6E29               	movwf	atol@c,c
  1980  00275C  D7CF               	goto	l3588
  1981  00275E                     l3602:
  1982  00275E  5029               	movf	atol@c,w,c
  1983  002760  EC8B  F019         	call	_isdigit
  1984  002764  B0D8               	btfsc	status,0,c
  1985  002766  D7D2               	goto	l3596
  1986  002768  5024               	movf	atol@sign,w,c
  1987  00276A  B4D8               	btfsc	status,2,c
  1988  00276C  D01A               	goto	l548
  1989  00276E  C025  F020         	movff	atol@a,??_atol
  1990  002772  C026  F021         	movff	atol@a+1,??_atol+1
  1991  002776  C027  F022         	movff	atol@a+2,??_atol+2
  1992  00277A  C028  F023         	movff	atol@a+3,??_atol+3
  1993  00277E  1E20               	comf	??_atol,f,c
  1994  002780  1E21               	comf	??_atol+1,f,c
  1995  002782  1E22               	comf	??_atol+2,f,c
  1996  002784  1E23               	comf	??_atol+3,f,c
  1997  002786  2A20               	incf	??_atol,f,c
  1998  002788  0E00               	movlw	0
  1999  00278A  2221               	addwfc	??_atol+1,f,c
  2000  00278C  2222               	addwfc	??_atol+2,f,c
  2001  00278E  2223               	addwfc	??_atol+3,f,c
  2002  002790  C020  F01C         	movff	??_atol,?_atol
  2003  002794  C021  F01D         	movff	??_atol+1,?_atol+1
  2004  002798  C022  F01E         	movff	??_atol+2,?_atol+2
  2005  00279C  C023  F01F         	movff	??_atol+3,?_atol+3
  2006  0027A0  0012               	return	
  2007  0027A2                     l548:
  2008  0027A2  C025  F01C         	movff	atol@a,?_atol
  2009  0027A6  C026  F01D         	movff	atol@a+1,?_atol+1
  2010  0027AA  C027  F01E         	movff	atol@a+2,?_atol+2
  2011  0027AE  C028  F01F         	movff	atol@a+3,?_atol+3
  2012  0027B2  0012               	return		;funcret
  2013  0027B4                     __end_of_atol:
  2014                           	opt stack 0
  2015                           tblptru	equ	0xFF8
  2016                           prodh	equ	0xFF4
  2017                           prodl	equ	0xFF3
  2018                           intcon	equ	0xFF2
  2019                           postinc0	equ	0xFEE
  2020                           wreg	equ	0xFE8
  2021                           indf1	equ	0xFE7
  2022                           fsr1h	equ	0xFE2
  2023                           fsr1l	equ	0xFE1
  2024                           indf2	equ	0xFDF
  2025                           postinc2	equ	0xFDE
  2026                           fsr2h	equ	0xFDA
  2027                           fsr2l	equ	0xFD9
  2028                           status	equ	0xFD8
  2029                           
  2030 ;; *************** function _get_altitude *****************
  2031 ;; Defined at:
  2032 ;;		line 124 in file "GPS_info.c"
  2033 ;; Parameters:    Size  Location     Type
  2034 ;;  alt_pointer     1    wreg     unsigned char 
  2035 ;; Auto vars:     Size  Location     Type
  2036 ;;  alt_pointer     1   18[BANK0 ] unsigned char 
  2037 ;;  Alt_Buffer     12    3[BANK0 ] unsigned char [12]
  2038 ;;  _Altitude       3   15[BANK0 ] float 
  2039 ;;  index           1   20[BANK0 ] unsigned char 
  2040 ;;  alt_index       1   19[BANK0 ] unsigned char 
  2041 ;; Return value:  Size  Location     Type
  2042 ;;                  3    0[BANK0 ] float 
  2043 ;; Registers used:
  2044 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2045 ;; Tracked objects:
  2046 ;;		On entry : 0/0
  2047 ;;		On exit  : 0/0
  2048 ;;		Unchanged: 0/0
  2049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2050 ;;      Params:         0       3       0       0       0       0       0       0       0
  2051 ;;      Locals:         0      18       0       0       0       0       0       0       0
  2052 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2053 ;;      Totals:         1      21       0       0       0       0       0       0       0
  2054 ;;Total ram usage:       22 bytes
  2055 ;; Hardware stack levels used:    1
  2056 ;; Hardware stack levels required when called:    5
  2057 ;; This function calls:
  2058 ;;		_atof
  2059 ;; This function is called by:
  2060 ;;		_main
  2061 ;; This function uses a non-reentrant model
  2062 ;;
  2063                           
  2064                           	psect	text6
  2065  002C08                     __ptext6:
  2066                           	opt stack 0
  2067  002C08                     _get_altitude:
  2068                           	opt stack 25
  2069                           
  2070                           ;incstack = 0
  2071                           ;get_altitude@alt_pointer stored from wreg
  2072  002C08  0100               	movlb	0	; () banked
  2073  002C0A  6F72               	movwf	get_altitude@alt_pointer& (0+255),b
  2074                           
  2075                           ;GPS_info.c: 125: unsigned char alt_index;
  2076                           ;GPS_info.c: 126: unsigned char index = alt_pointer+1;
  2077  002C0C  0100               	movlb	0	; () banked
  2078  002C0E  2972               	incf	get_altitude@alt_pointer& (0+255),w,b
  2079  002C10  0100               	movlb	0	; () banked
  2080  002C12  6F74               	movwf	get_altitude@index& (0+255),b
  2081                           
  2082                           ; BSR set to: 0
  2083                           ;GPS_info.c: 127: char Alt_Buffer[12];
  2084                           ;GPS_info.c: 128: float _Altitude;
  2085                           ;GPS_info.c: 129: alt_index=0;
  2086  002C14  0E00               	movlw	0
  2087  002C16  0100               	movlb	0	; () banked
  2088  002C18  6F73               	movwf	get_altitude@alt_index& (0+255),b
  2089                           
  2090                           ;GPS_info.c: 132: for( ; GGA_Buffer[index]!=','; index++){
  2091  002C1A  D018               	goto	l4708
  2092  002C1C                     l4702:
  2093                           
  2094                           ; BSR set to: 0
  2095                           ;GPS_info.c: 133: Alt_Buffer[alt_index]= GGA_Buffer[index];
  2096  002C1C  0100               	movlb	0	; () banked
  2097  002C1E  5174               	movf	get_altitude@index& (0+255),w,b
  2098  002C20  0D01               	mullw	1
  2099  002C22  0E00               	movlw	low _GGA_Buffer
  2100  002C24  24F3               	addwf	prodl,w,c
  2101  002C26  6ED9               	movwf	fsr2l,c
  2102  002C28  0E01               	movlw	high _GGA_Buffer
  2103  002C2A  20F4               	addwfc	prodh,w,c
  2104  002C2C  6EDA               	movwf	fsr2h,c
  2105  002C2E  0100               	movlb	0	; () banked
  2106  002C30  5173               	movf	get_altitude@alt_index& (0+255),w,b
  2107  002C32  0D01               	mullw	1
  2108  002C34  0E63               	movlw	low get_altitude@Alt_Buffer
  2109  002C36  24F3               	addwf	prodl,w,c
  2110  002C38  6EE1               	movwf	fsr1l,c
  2111  002C3A  0E00               	movlw	high get_altitude@Alt_Buffer
  2112  002C3C  20F4               	addwfc	prodh,w,c
  2113  002C3E  6EE2               	movwf	fsr1h,c
  2114  002C40  CFDF FFE7          	movff	indf2,indf1
  2115                           
  2116                           ; BSR set to: 0
  2117                           ;GPS_info.c: 134: alt_index++;
  2118  002C44  0100               	movlb	0	; () banked
  2119  002C46  2B73               	incf	get_altitude@alt_index& (0+255),f,b
  2120                           
  2121                           ; BSR set to: 0
  2122  002C48  0100               	movlb	0	; () banked
  2123  002C4A  2B74               	incf	get_altitude@index& (0+255),f,b
  2124  002C4C                     l4708:
  2125                           
  2126                           ; BSR set to: 0
  2127  002C4C  0100               	movlb	0	; () banked
  2128  002C4E  5174               	movf	get_altitude@index& (0+255),w,b
  2129  002C50  0D01               	mullw	1
  2130  002C52  0E00               	movlw	low _GGA_Buffer
  2131  002C54  24F3               	addwf	prodl,w,c
  2132  002C56  6ED9               	movwf	fsr2l,c
  2133  002C58  0E01               	movlw	high _GGA_Buffer
  2134  002C5A  20F4               	addwfc	prodh,w,c
  2135  002C5C  6EDA               	movwf	fsr2h,c
  2136  002C5E  0E2C               	movlw	44
  2137  002C60  18DE               	xorwf	postinc2,w,c
  2138  002C62  A4D8               	btfss	status,2,c
  2139  002C64  D7DB               	goto	l4702
  2140                           
  2141                           ; BSR set to: 0
  2142                           ;GPS_info.c: 135: }
  2143                           ;GPS_info.c: 136: _Altitude = atof(Alt_Buffer);
  2144                           
  2145                           ; BSR set to: 0
  2146  002C66  0E63               	movlw	low get_altitude@Alt_Buffer
  2147  002C68  6E42               	movwf	atof@s,c
  2148  002C6A  0E00               	movlw	high get_altitude@Alt_Buffer
  2149  002C6C  6E43               	movwf	atof@s+1,c
  2150  002C6E  EC7A  F019         	call	_atof	;wreg free
  2151  002C72  C042  F06F         	movff	?_atof,get_altitude@_Altitude
  2152  002C76  C043  F070         	movff	?_atof+1,get_altitude@_Altitude+1
  2153  002C7A  C044  F071         	movff	?_atof+2,get_altitude@_Altitude+2
  2154                           
  2155                           ;GPS_info.c: 137: return _Altitude;
  2156  002C7E  C06F  F060         	movff	get_altitude@_Altitude,?_get_altitude
  2157  002C82  C070  F061         	movff	get_altitude@_Altitude+1,?_get_altitude+1
  2158  002C86  C071  F062         	movff	get_altitude@_Altitude+2,?_get_altitude+2
  2159  002C8A  0012               	return	
  2160  002C8C                     __end_of_get_altitude:
  2161                           	opt stack 0
  2162                           tblptru	equ	0xFF8
  2163                           prodh	equ	0xFF4
  2164                           prodl	equ	0xFF3
  2165                           intcon	equ	0xFF2
  2166                           postinc0	equ	0xFEE
  2167                           wreg	equ	0xFE8
  2168                           indf1	equ	0xFE7
  2169                           fsr1h	equ	0xFE2
  2170                           fsr1l	equ	0xFE1
  2171                           indf2	equ	0xFDF
  2172                           postinc2	equ	0xFDE
  2173                           fsr2h	equ	0xFDA
  2174                           fsr2l	equ	0xFD9
  2175                           status	equ	0xFD8
  2176                           
  2177 ;; *************** function _atof *****************
  2178 ;; Defined at:
  2179 ;;		line 200 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\atof.c"
  2180 ;; Parameters:    Size  Location     Type
  2181 ;;  s               2   65[COMRAM] PTR const unsigned char 
  2182 ;;		 -> get_altitude@Alt_Buffer(12), get_longitude@Long_Buffer(15), get_latitude@Lat_Buffer(15), 
  2183 ;; Auto vars:     Size  Location     Type
  2184 ;;		None
  2185 ;; Return value:  Size  Location     Type
  2186 ;;                  3   65[COMRAM] PTR const unsigned char 
  2187 ;; Registers used:
  2188 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2189 ;; Tracked objects:
  2190 ;;		On entry : 0/0
  2191 ;;		On exit  : 0/0
  2192 ;;		Unchanged: 0/0
  2193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2194 ;;      Params:         3       0       0       0       0       0       0       0       0
  2195 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2196 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2197 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2198 ;;Total ram usage:        3 bytes
  2199 ;; Hardware stack levels used:    1
  2200 ;; Hardware stack levels required when called:    4
  2201 ;; This function calls:
  2202 ;;		_strtod
  2203 ;; This function is called by:
  2204 ;;		_get_latitude
  2205 ;;		_get_longitude
  2206 ;;		_get_altitude
  2207 ;; This function uses a non-reentrant model
  2208 ;;
  2209                           
  2210                           	psect	text7
  2211  0032F4                     __ptext7:
  2212                           	opt stack 0
  2213  0032F4                     _atof:
  2214                           	opt stack 25
  2215                           
  2216                           ;incstack = 0
  2217  0032F4  C042  F036         	movff	atof@s,strtod@s
  2218  0032F8  C043  F037         	movff	atof@s+1,strtod@s+1
  2219  0032FC  0E00               	movlw	0
  2220  0032FE  6E38               	movwf	strtod@res,c
  2221  003300  0E00               	movlw	0
  2222  003302  6E39               	movwf	strtod@res+1,c
  2223  003304  ECEF  F00A         	call	_strtod	;wreg free
  2224  003308  C036  F042         	movff	?_strtod,?_atof
  2225  00330C  C037  F043         	movff	?_strtod+1,?_atof+1
  2226  003310  C038  F044         	movff	?_strtod+2,?_atof+2
  2227  003314  0012               	return	
  2228  003316                     __end_of_atof:
  2229                           	opt stack 0
  2230                           tblptru	equ	0xFF8
  2231                           prodh	equ	0xFF4
  2232                           prodl	equ	0xFF3
  2233                           intcon	equ	0xFF2
  2234                           postinc0	equ	0xFEE
  2235                           wreg	equ	0xFE8
  2236                           indf1	equ	0xFE7
  2237                           fsr1h	equ	0xFE2
  2238                           fsr1l	equ	0xFE1
  2239                           indf2	equ	0xFDF
  2240                           postinc2	equ	0xFDE
  2241                           fsr2h	equ	0xFDA
  2242                           fsr2l	equ	0xFD9
  2243                           status	equ	0xFD8
  2244                           
  2245 ;; *************** function _strtod *****************
  2246 ;; Defined at:
  2247 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\atof.c"
  2248 ;; Parameters:    Size  Location     Type
  2249 ;;  s               2   53[COMRAM] PTR const unsigned char 
  2250 ;;		 -> get_altitude@Alt_Buffer(12), get_longitude@Long_Buffer(15), get_latitude@Lat_Buffer(15), 
  2251 ;;  res             2   55[COMRAM] PTR PTR const unsigned c
  2252 ;;		 -> NULL(0), 
  2253 ;; Auto vars:     Size  Location     Type
  2254 ;;  _u              4   61[COMRAM] struct .
  2255 ;;  expon           1   60[COMRAM] char 
  2256 ;;  flags           1   59[COMRAM] unsigned char 
  2257 ;;  eexp            1   58[COMRAM] char 
  2258 ;; Return value:  Size  Location     Type
  2259 ;;                  3   53[COMRAM] char 
  2260 ;; Registers used:
  2261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2262 ;; Tracked objects:
  2263 ;;		On entry : 0/0
  2264 ;;		On exit  : 0/0
  2265 ;;		Unchanged: 0/0
  2266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2267 ;;      Params:         4       0       0       0       0       0       0       0       0
  2268 ;;      Locals:         7       0       0       0       0       0       0       0       0
  2269 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2270 ;;      Totals:        12       0       0       0       0       0       0       0       0
  2271 ;;Total ram usage:       12 bytes
  2272 ;; Hardware stack levels used:    1
  2273 ;; Hardware stack levels required when called:    3
  2274 ;; This function calls:
  2275 ;;		___altoft
  2276 ;;		___ftdiv
  2277 ;;		___ftge
  2278 ;;		___ftmul
  2279 ;;		___ftneg
  2280 ;;		___lmul
  2281 ;;		_isdigit
  2282 ;;		_isspace
  2283 ;; This function is called by:
  2284 ;;		_atof
  2285 ;; This function uses a non-reentrant model
  2286 ;;
  2287                           
  2288                           	psect	text8
  2289  0015DE                     __ptext8:
  2290                           	opt stack 0
  2291  0015DE                     _strtod:
  2292                           	opt stack 25
  2293                           
  2294                           ;incstack = 0
  2295  0015DE  5038               	movf	strtod@res,w,c
  2296  0015E0  1039               	iorwf	strtod@res+1,w,c
  2297  0015E2  B4D8               	btfsc	status,2,c
  2298  0015E4  D00B               	goto	l4160
  2299  0015E6  C038  FFD9         	movff	strtod@res,fsr2l
  2300  0015EA  C039  FFDA         	movff	strtod@res+1,fsr2h
  2301  0015EE  C036  FFDE         	movff	strtod@s,postinc2
  2302  0015F2  C037  FFDD         	movff	strtod@s+1,postdec2
  2303  0015F6  D002               	goto	l4160
  2304  0015F8                     l4158:
  2305  0015F8  4A36               	infsnz	strtod@s,f,c
  2306  0015FA  2A37               	incf	strtod@s+1,f,c
  2307  0015FC                     l4160:
  2308  0015FC  C036  FFD9         	movff	strtod@s,fsr2l
  2309  001600  C037  FFDA         	movff	strtod@s+1,fsr2h
  2310  001604  50DF               	movf	indf2,w,c
  2311  001606  6E3B               	movwf	strtod@eexp,c
  2312  001608  503B               	movf	strtod@eexp,w,c
  2313  00160A  EC42  F019         	call	_isspace
  2314  00160E  B0D8               	btfsc	status,0,c
  2315  001610  D7F3               	goto	l4158
  2316  001612  0E00               	movlw	0
  2317  001614  6E3C               	movwf	strtod@flags,c
  2318  001616  0E2D               	movlw	45
  2319  001618  183B               	xorwf	strtod@eexp,w,c
  2320  00161A  A4D8               	btfss	status,2,c
  2321  00161C  D003               	goto	l4170
  2322  00161E  0E01               	movlw	1
  2323  001620  6E3C               	movwf	strtod@flags,c
  2324  001622  D004               	goto	l4172
  2325  001624                     l4170:
  2326  001624  0E2B               	movlw	43
  2327  001626  183B               	xorwf	strtod@eexp,w,c
  2328  001628  A4D8               	btfss	status,2,c
  2329  00162A  D002               	goto	l4174
  2330  00162C                     l4172:
  2331  00162C  4A36               	infsnz	strtod@s,f,c
  2332  00162E  2A37               	incf	strtod@s+1,f,c
  2333  001630                     l4174:
  2334  001630  0E00               	movlw	0
  2335  001632  6E3B               	movwf	strtod@eexp,c
  2336  001634  0E00               	movlw	0
  2337  001636  6E3E               	movwf	strtod@_u,c
  2338  001638  0E00               	movlw	0
  2339  00163A  6E3F               	movwf	strtod@_u+1,c
  2340  00163C  0E00               	movlw	0
  2341  00163E  6E40               	movwf	strtod@_u+2,c
  2342  001640  0E00               	movlw	0
  2343  001642  6E41               	movwf	strtod@_u+3,c
  2344  001644  0E00               	movlw	0
  2345  001646  6E3D               	movwf	strtod@expon,c
  2346  001648                     l4180:
  2347  001648  B83C               	btfsc	strtod@flags,4,c
  2348  00164A  D00A               	goto	l4186
  2349  00164C  C036  FFD9         	movff	strtod@s,fsr2l
  2350  001650  C037  FFDA         	movff	strtod@s+1,fsr2h
  2351  001654  0E2E               	movlw	46
  2352  001656  18DE               	xorwf	postinc2,w,c
  2353  001658  A4D8               	btfss	status,2,c
  2354  00165A  D002               	goto	l4186
  2355  00165C  883C               	bsf	strtod@flags,4,c
  2356  00165E  D03C               	goto	l495
  2357  001660                     l4186:
  2358  001660  C036  FFD9         	movff	strtod@s,fsr2l
  2359  001664  C037  FFDA         	movff	strtod@s+1,fsr2h
  2360  001668  50DF               	movf	indf2,w,c
  2361  00166A  EC8B  F019         	call	_isdigit
  2362  00166E  A0D8               	btfss	status,0,c
  2363  001670  D036               	goto	l4204
  2364  001672  823C               	bsf	strtod@flags,1,c
  2365  001674  0E08               	movlw	8
  2366  001676  183B               	xorwf	strtod@eexp,w,c
  2367  001678  B4D8               	btfsc	status,2,c
  2368  00167A  D02C               	goto	l493
  2369  00167C  B83C               	btfsc	strtod@flags,4,c
  2370  00167E  063D               	decf	strtod@expon,f,c
  2371  001680  2A3B               	incf	strtod@eexp,f,c
  2372  001682  C03E  F010         	movff	strtod@_u,___lmul@multiplier
  2373  001686  C03F  F011         	movff	strtod@_u+1,___lmul@multiplier+1
  2374  00168A  C040  F012         	movff	strtod@_u+2,___lmul@multiplier+2
  2375  00168E  C041  F013         	movff	strtod@_u+3,___lmul@multiplier+3
  2376  001692  0E0A               	movlw	10
  2377  001694  6E14               	movwf	___lmul@multiplicand,c
  2378  001696  0E00               	movlw	0
  2379  001698  6E15               	movwf	___lmul@multiplicand+1,c
  2380  00169A  0E00               	movlw	0
  2381  00169C  6E16               	movwf	___lmul@multiplicand+2,c
  2382  00169E  0E00               	movlw	0
  2383  0016A0  6E17               	movwf	___lmul@multiplicand+3,c
  2384  0016A2  EC42  F018         	call	___lmul	;wreg free
  2385  0016A6  C010  F03E         	movff	?___lmul,strtod@_u
  2386  0016AA  C011  F03F         	movff	?___lmul+1,strtod@_u+1
  2387  0016AE  C012  F040         	movff	?___lmul+2,strtod@_u+2
  2388  0016B2  C013  F041         	movff	?___lmul+3,strtod@_u+3
  2389  0016B6  C036  FFD9         	movff	strtod@s,fsr2l
  2390  0016BA  C037  FFDA         	movff	strtod@s+1,fsr2h
  2391  0016BE  50DF               	movf	indf2,w,c
  2392  0016C0  6E3A               	movwf	??_strtod& (0+255),c
  2393  0016C2  0ED0               	movlw	208
  2394  0016C4  263A               	addwf	??_strtod,f,c
  2395  0016C6  503A               	movf	??_strtod,w,c
  2396  0016C8  263E               	addwf	strtod@_u,f,c
  2397  0016CA  0E00               	movlw	0
  2398  0016CC  223F               	addwfc	strtod@_u+1,f,c
  2399  0016CE  2240               	addwfc	strtod@_u+2,f,c
  2400  0016D0  2241               	addwfc	strtod@_u+3,f,c
  2401  0016D2  D002               	goto	l495
  2402  0016D4                     l493:
  2403  0016D4  A83C               	btfss	strtod@flags,4,c
  2404  0016D6  2A3D               	incf	strtod@expon,f,c
  2405  0016D8                     l495:
  2406  0016D8  4A36               	infsnz	strtod@s,f,c
  2407  0016DA  2A37               	incf	strtod@s+1,f,c
  2408  0016DC  D7B5               	goto	l4180
  2409  0016DE                     l4204:
  2410  0016DE  0E00               	movlw	0
  2411  0016E0  6E3B               	movwf	strtod@eexp,c
  2412  0016E2  C036  FFD9         	movff	strtod@s,fsr2l
  2413  0016E6  C037  FFDA         	movff	strtod@s+1,fsr2h
  2414  0016EA  0E65               	movlw	101
  2415  0016EC  18DE               	xorwf	postinc2,w,c
  2416  0016EE  B4D8               	btfsc	status,2,c
  2417  0016F0  D008               	goto	l4210
  2418  0016F2  C036  FFD9         	movff	strtod@s,fsr2l
  2419  0016F6  C037  FFDA         	movff	strtod@s+1,fsr2h
  2420  0016FA  0E45               	movlw	69
  2421  0016FC  18DE               	xorwf	postinc2,w,c
  2422  0016FE  A4D8               	btfss	status,2,c
  2423  001700  D05E               	goto	l4242
  2424  001702                     l4210:
  2425  001702  4A36               	infsnz	strtod@s,f,c
  2426  001704  2A37               	incf	strtod@s+1,f,c
  2427  001706  C036  FFD9         	movff	strtod@s,fsr2l
  2428  00170A  C037  FFDA         	movff	strtod@s+1,fsr2h
  2429  00170E  0E2D               	movlw	45
  2430  001710  18DE               	xorwf	postinc2,w,c
  2431  001712  A4D8               	btfss	status,2,c
  2432  001714  D002               	goto	l4214
  2433  001716  863C               	bsf	strtod@flags,3,c
  2434  001718  D008               	goto	l4218
  2435  00171A                     l4214:
  2436  00171A  C036  FFD9         	movff	strtod@s,fsr2l
  2437  00171E  C037  FFDA         	movff	strtod@s+1,fsr2h
  2438  001722  0E2B               	movlw	43
  2439  001724  18DE               	xorwf	postinc2,w,c
  2440  001726  A4D8               	btfss	status,2,c
  2441  001728  D002               	goto	l4220
  2442  00172A                     l4218:
  2443  00172A  4A36               	infsnz	strtod@s,f,c
  2444  00172C  2A37               	incf	strtod@s+1,f,c
  2445  00172E                     l4220:
  2446  00172E  C036  FFD9         	movff	strtod@s,fsr2l
  2447  001732  C037  FFDA         	movff	strtod@s+1,fsr2h
  2448  001736  0E30               	movlw	48
  2449  001738  18DE               	xorwf	postinc2,w,c
  2450  00173A  B4D8               	btfsc	status,2,c
  2451  00173C  D7F6               	goto	l4218
  2452  00173E  C036  FFD9         	movff	strtod@s,fsr2l
  2453  001742  C037  FFDA         	movff	strtod@s+1,fsr2h
  2454  001746  50DF               	movf	indf2,w,c
  2455  001748  EC8B  F019         	call	_isdigit
  2456  00174C  A0D8               	btfss	status,0,c
  2457  00174E  D035               	goto	l4238
  2458  001750  C036  FFD9         	movff	strtod@s,fsr2l
  2459  001754  C037  FFDA         	movff	strtod@s+1,fsr2h
  2460  001758  50DF               	movf	indf2,w,c
  2461  00175A  0FD0               	addlw	208
  2462  00175C  6E3B               	movwf	strtod@eexp,c
  2463  00175E  4A36               	infsnz	strtod@s,f,c
  2464  001760  2A37               	incf	strtod@s+1,f,c
  2465  001762  C036  FFD9         	movff	strtod@s,fsr2l
  2466  001766  C037  FFDA         	movff	strtod@s+1,fsr2h
  2467  00176A  50DF               	movf	indf2,w,c
  2468  00176C  EC8B  F019         	call	_isdigit
  2469  001770  A0D8               	btfss	status,0,c
  2470  001772  D023               	goto	l4238
  2471  001774  C036  FFD9         	movff	strtod@s,fsr2l
  2472  001778  C037  FFDA         	movff	strtod@s+1,fsr2h
  2473  00177C  50DF               	movf	indf2,w,c
  2474  00177E  6E3A               	movwf	??_strtod& (0+255),c
  2475  001780  503B               	movf	strtod@eexp,w,c
  2476  001782  0D0A               	mullw	10
  2477  001784  50F3               	movf	prodl,w,c
  2478  001786  243A               	addwf	??_strtod,w,c
  2479  001788  0FD0               	addlw	208
  2480  00178A  6E3B               	movwf	strtod@eexp,c
  2481  00178C  4A36               	infsnz	strtod@s,f,c
  2482  00178E  2A37               	incf	strtod@s+1,f,c
  2483  001790  C036  FFD9         	movff	strtod@s,fsr2l
  2484  001794  C037  FFDA         	movff	strtod@s+1,fsr2h
  2485  001798  50DF               	movf	indf2,w,c
  2486  00179A  EC8B  F019         	call	_isdigit
  2487  00179E  A0D8               	btfss	status,0,c
  2488  0017A0  D00C               	goto	l4238
  2489  0017A2  C036  FFD9         	movff	strtod@s,fsr2l
  2490  0017A6  C037  FFDA         	movff	strtod@s+1,fsr2h
  2491  0017AA  50DF               	movf	indf2,w,c
  2492  0017AC  6E3A               	movwf	??_strtod& (0+255),c
  2493  0017AE  503B               	movf	strtod@eexp,w,c
  2494  0017B0  0D0A               	mullw	10
  2495  0017B2  50F3               	movf	prodl,w,c
  2496  0017B4  243A               	addwf	??_strtod,w,c
  2497  0017B6  0FD0               	addlw	208
  2498  0017B8  6E3B               	movwf	strtod@eexp,c
  2499  0017BA                     l4238:
  2500  0017BA  B63C               	btfsc	strtod@flags,3,c
  2501  0017BC  6C3B               	negf	strtod@eexp,c
  2502  0017BE                     l4242:
  2503  0017BE  503B               	movf	strtod@eexp,w,c
  2504  0017C0  263D               	addwf	strtod@expon,f,c
  2505  0017C2  5038               	movf	strtod@res,w,c
  2506  0017C4  1039               	iorwf	strtod@res+1,w,c
  2507  0017C6  A4D8               	btfss	status,2,c
  2508  0017C8  A23C               	btfss	strtod@flags,1,c
  2509  0017CA  D008               	goto	l4250
  2510  0017CC  C038  FFD9         	movff	strtod@res,fsr2l
  2511  0017D0  C039  FFDA         	movff	strtod@res+1,fsr2h
  2512  0017D4  C036  FFDE         	movff	strtod@s,postinc2
  2513  0017D8  C037  FFDD         	movff	strtod@s+1,postdec2
  2514  0017DC                     l4250:
  2515  0017DC  C03E  F018         	movff	strtod@_u,___altoft@c
  2516  0017E0  C03F  F019         	movff	strtod@_u+1,___altoft@c+1
  2517  0017E4  C040  F01A         	movff	strtod@_u+2,___altoft@c+2
  2518  0017E8  C041  F01B         	movff	strtod@_u+3,___altoft@c+3
  2519  0017EC  EC06  F017         	call	___altoft	;wreg free
  2520  0017F0  C018  F03E         	movff	?___altoft,strtod@_u
  2521  0017F4  C019  F03F         	movff	?___altoft+1,strtod@_u+1
  2522  0017F8  C01A  F040         	movff	?___altoft+2,strtod@_u+2
  2523  0017FC  503E               	movf	strtod@_u,w,c
  2524  0017FE  103F               	iorwf	strtod@_u+1,w,c
  2525  001800  1040               	iorwf	strtod@_u+2,w,c
  2526  001802  A4D8               	btfss	status,2,c
  2527  001804  D007               	goto	l4258
  2528  001806  0E00               	movlw	0
  2529  001808  6E36               	movwf	?_strtod,c
  2530  00180A  0E00               	movlw	0
  2531  00180C  6E37               	movwf	?_strtod+1,c
  2532  00180E  0E00               	movlw	0
  2533  001810  6E38               	movwf	?_strtod+2,c
  2534  001812  0012               	return	
  2535  001814                     l4258:
  2536  001814  AE3D               	btfss	strtod@expon,7,c
  2537  001816  D056               	goto	l4286
  2538  001818  6C3D               	negf	strtod@expon,c
  2539  00181A  D016               	goto	l4266
  2540  00181C                     l4262:
  2541  00181C  C03E  F022         	movff	strtod@_u,___ftdiv@f1
  2542  001820  C03F  F023         	movff	strtod@_u+1,___ftdiv@f1+1
  2543  001824  C040  F024         	movff	strtod@_u+2,___ftdiv@f1+2
  2544  001828  0E03               	movlw	3
  2545  00182A  6E25               	movwf	___ftdiv@f2,c
  2546  00182C  0E15               	movlw	21
  2547  00182E  6E26               	movwf	___ftdiv@f2+1,c
  2548  001830  0E50               	movlw	80
  2549  001832  6E27               	movwf	___ftdiv@f2+2,c
  2550  001834  EC54  F014         	call	___ftdiv	;wreg free
  2551  001838  C022  F03E         	movff	?___ftdiv,strtod@_u
  2552  00183C  C023  F03F         	movff	?___ftdiv+1,strtod@_u+1
  2553  001840  C024  F040         	movff	?___ftdiv+2,strtod@_u+2
  2554  001844  0EF6               	movlw	246
  2555  001846  263D               	addwf	strtod@expon,f,c
  2556  001848                     l4266:
  2557  001848  503D               	movf	strtod@expon,w,c
  2558  00184A  0A80               	xorlw	128
  2559  00184C  0F76               	addlw	-138
  2560  00184E  A0D8               	btfss	status,0,c
  2561  001850  D016               	goto	l4272
  2562  001852  D7E4               	goto	l4262
  2563  001854                     l4268:
  2564  001854  C03E  F022         	movff	strtod@_u,___ftdiv@f1
  2565  001858  C03F  F023         	movff	strtod@_u+1,___ftdiv@f1+1
  2566  00185C  C040  F024         	movff	strtod@_u+2,___ftdiv@f1+2
  2567  001860  0E00               	movlw	0
  2568  001862  6E25               	movwf	___ftdiv@f2,c
  2569  001864  0E20               	movlw	32
  2570  001866  6E26               	movwf	___ftdiv@f2+1,c
  2571  001868  0E41               	movlw	65
  2572  00186A  6E27               	movwf	___ftdiv@f2+2,c
  2573  00186C  EC54  F014         	call	___ftdiv	;wreg free
  2574  001870  C022  F03E         	movff	?___ftdiv,strtod@_u
  2575  001874  C023  F03F         	movff	?___ftdiv+1,strtod@_u+1
  2576  001878  C024  F040         	movff	?___ftdiv+2,strtod@_u+2
  2577  00187C  063D               	decf	strtod@expon,f,c
  2578  00187E                     l4272:
  2579  00187E  503D               	movf	strtod@expon,w,c
  2580  001880  A4D8               	btfss	status,2,c
  2581  001882  D7E8               	goto	l4268
  2582  001884  C03E  F010         	movff	strtod@_u,___ftge@ff1
  2583  001888  C03F  F011         	movff	strtod@_u+1,___ftge@ff1+1
  2584  00188C  C040  F012         	movff	strtod@_u+2,___ftge@ff1+2
  2585  001890  0E00               	movlw	0
  2586  001892  6E13               	movwf	___ftge@ff2,c
  2587  001894  0E80               	movlw	128
  2588  001896  6E14               	movwf	___ftge@ff2+1,c
  2589  001898  0E00               	movlw	0
  2590  00189A  6E15               	movwf	___ftge@ff2+2,c
  2591  00189C  ECBC  F015         	call	___ftge	;wreg free
  2592  0018A0  B0D8               	btfsc	status,0,c
  2593  0018A2  D061               	goto	l522
  2594  0018A4  A03C               	btfss	strtod@flags,0,c
  2595  0018A6  D007               	goto	l4282
  2596  0018A8                     l4278:
  2597  0018A8  0E00               	movlw	0
  2598  0018AA  6E36               	movwf	?_strtod,c
  2599  0018AC  0E80               	movlw	128
  2600  0018AE  6E37               	movwf	?_strtod+1,c
  2601  0018B0  0E80               	movlw	128
  2602  0018B2  6E38               	movwf	?_strtod+2,c
  2603  0018B4  0012               	return	
  2604  0018B6                     l4282:
  2605  0018B6  0E00               	movlw	0
  2606  0018B8  6E36               	movwf	?_strtod,c
  2607  0018BA  0E80               	movlw	128
  2608  0018BC  6E37               	movwf	?_strtod+1,c
  2609  0018BE  0E00               	movlw	0
  2610  0018C0  6E38               	movwf	?_strtod+2,c
  2611  0018C2  0012               	return	
  2612  0018C4                     l4286:
  2613  0018C4  503D               	movf	strtod@expon,w,c
  2614  0018C6  0A80               	xorlw	128
  2615  0018C8  0F7F               	addlw	-129
  2616  0018CA  B0D8               	btfsc	status,0,c
  2617  0018CC  D017               	goto	l4294
  2618  0018CE  D04B               	goto	l522
  2619  0018D0                     l4290:
  2620  0018D0  C03E  F024         	movff	strtod@_u,___ftmul@f1
  2621  0018D4  C03F  F025         	movff	strtod@_u+1,___ftmul@f1+1
  2622  0018D8  C040  F026         	movff	strtod@_u+2,___ftmul@f1+2
  2623  0018DC  0E03               	movlw	3
  2624  0018DE  6E27               	movwf	___ftmul@f2,c
  2625  0018E0  0E15               	movlw	21
  2626  0018E2  6E28               	movwf	___ftmul@f2+1,c
  2627  0018E4  0E50               	movlw	80
  2628  0018E6  6E29               	movwf	___ftmul@f2+2,c
  2629  0018E8  ECDA  F013         	call	___ftmul	;wreg free
  2630  0018EC  C024  F03E         	movff	?___ftmul,strtod@_u
  2631  0018F0  C025  F03F         	movff	?___ftmul+1,strtod@_u+1
  2632  0018F4  C026  F040         	movff	?___ftmul+2,strtod@_u+2
  2633  0018F8  0EF6               	movlw	246
  2634  0018FA  263D               	addwf	strtod@expon,f,c
  2635  0018FC                     l4294:
  2636  0018FC  0E0A               	movlw	10
  2637  0018FE  603D               	cpfslt	strtod@expon,c
  2638  001900  D7E7               	goto	l4290
  2639  001902  D015               	goto	l4300
  2640  001904                     l4296:
  2641  001904  C03E  F024         	movff	strtod@_u,___ftmul@f1
  2642  001908  C03F  F025         	movff	strtod@_u+1,___ftmul@f1+1
  2643  00190C  C040  F026         	movff	strtod@_u+2,___ftmul@f1+2
  2644  001910  0E00               	movlw	0
  2645  001912  6E27               	movwf	___ftmul@f2,c
  2646  001914  0E20               	movlw	32
  2647  001916  6E28               	movwf	___ftmul@f2+1,c
  2648  001918  0E41               	movlw	65
  2649  00191A  6E29               	movwf	___ftmul@f2+2,c
  2650  00191C  ECDA  F013         	call	___ftmul	;wreg free
  2651  001920  C024  F03E         	movff	?___ftmul,strtod@_u
  2652  001924  C025  F03F         	movff	?___ftmul+1,strtod@_u+1
  2653  001928  C026  F040         	movff	?___ftmul+2,strtod@_u+2
  2654  00192C  063D               	decf	strtod@expon,f,c
  2655  00192E                     l4300:
  2656  00192E  503D               	movf	strtod@expon,w,c
  2657  001930  A4D8               	btfss	status,2,c
  2658  001932  D7E8               	goto	l4296
  2659  001934  0EFF               	movlw	255
  2660  001936  6E10               	movwf	___ftge@ff1,c
  2661  001938  0E7F               	movlw	127
  2662  00193A  6E11               	movwf	___ftge@ff1+1,c
  2663  00193C  0E7F               	movlw	127
  2664  00193E  6E12               	movwf	___ftge@ff1+2,c
  2665  001940  C03E  F013         	movff	strtod@_u,___ftge@ff2
  2666  001944  C03F  F014         	movff	strtod@_u+1,___ftge@ff2+1
  2667  001948  C040  F015         	movff	strtod@_u+2,___ftge@ff2+2
  2668  00194C  ECBC  F015         	call	___ftge	;wreg free
  2669  001950  B0D8               	btfsc	status,0,c
  2670  001952  D009               	goto	l522
  2671  001954  B03C               	btfsc	strtod@flags,0,c
  2672  001956  D7A8               	goto	l4278
  2673  001958  0E00               	movlw	0
  2674  00195A  6E36               	movwf	?_strtod,c
  2675  00195C  0E80               	movlw	128
  2676  00195E  6E37               	movwf	?_strtod+1,c
  2677  001960  0E00               	movlw	0
  2678  001962  6E38               	movwf	?_strtod+2,c
  2679  001964  0012               	return	
  2680  001966                     l522:
  2681  001966  A03C               	btfss	strtod@flags,0,c
  2682  001968  D00E               	goto	l4316
  2683  00196A  C03E  F033         	movff	strtod@_u,___ftneg@f1
  2684  00196E  C03F  F034         	movff	strtod@_u+1,___ftneg@f1+1
  2685  001972  C040  F035         	movff	strtod@_u+2,___ftneg@f1+2
  2686  001976  EC68  F019         	call	___ftneg	;wreg free
  2687  00197A  C033  F03E         	movff	?___ftneg,strtod@_u
  2688  00197E  C034  F03F         	movff	?___ftneg+1,strtod@_u+1
  2689  001982  C035  F040         	movff	?___ftneg+2,strtod@_u+2
  2690  001986                     l4316:
  2691  001986  C03E  F036         	movff	strtod@_u,?_strtod
  2692  00198A  C03F  F037         	movff	strtod@_u+1,?_strtod+1
  2693  00198E  C040  F038         	movff	strtod@_u+2,?_strtod+2
  2694  001992  0012               	return	
  2695  001994                     __end_of_strtod:
  2696                           	opt stack 0
  2697                           tblptru	equ	0xFF8
  2698                           prodh	equ	0xFF4
  2699                           prodl	equ	0xFF3
  2700                           intcon	equ	0xFF2
  2701                           postinc0	equ	0xFEE
  2702                           wreg	equ	0xFE8
  2703                           indf1	equ	0xFE7
  2704                           fsr1h	equ	0xFE2
  2705                           fsr1l	equ	0xFE1
  2706                           indf2	equ	0xFDF
  2707                           postinc2	equ	0xFDE
  2708                           postdec2	equ	0xFDD
  2709                           fsr2h	equ	0xFDA
  2710                           fsr2l	equ	0xFD9
  2711                           status	equ	0xFD8
  2712                           
  2713 ;; *************** function _isspace *****************
  2714 ;; Defined at:
  2715 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isspace.c"
  2716 ;; Parameters:    Size  Location     Type
  2717 ;;  c               1    wreg     unsigned char 
  2718 ;; Auto vars:     Size  Location     Type
  2719 ;;  c               1   17[COMRAM] unsigned char 
  2720 ;; Return value:  Size  Location     Type
  2721 ;;		None               void
  2722 ;; Registers used:
  2723 ;;		wreg, status,2, status,0
  2724 ;; Tracked objects:
  2725 ;;		On entry : 0/0
  2726 ;;		On exit  : 0/0
  2727 ;;		Unchanged: 0/0
  2728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2729 ;;      Params:         0       0       0       0       0       0       0       0       0
  2730 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2731 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2732 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2733 ;;Total ram usage:        3 bytes
  2734 ;; Hardware stack levels used:    1
  2735 ;; Hardware stack levels required when called:    1
  2736 ;; This function calls:
  2737 ;;		Nothing
  2738 ;; This function is called by:
  2739 ;;		_strtod
  2740 ;; This function uses a non-reentrant model
  2741 ;;
  2742                           
  2743                           	psect	text9
  2744  003284                     __ptext9:
  2745                           	opt stack 0
  2746  003284                     _isspace:
  2747                           	opt stack 26
  2748                           
  2749                           ;incstack = 0
  2750                           ;isspace@c stored from wreg
  2751  003284  6E12               	movwf	isspace@c,c
  2752  003286  0E01               	movlw	1
  2753  003288  6E11               	movwf	_isspace$715,c
  2754  00328A  0E20               	movlw	32
  2755  00328C  1812               	xorwf	isspace@c,w,c
  2756  00328E  B4D8               	btfsc	status,2,c
  2757  003290  D008               	goto	l2762
  2758  003292  0E0E               	movlw	14
  2759  003294  6012               	cpfslt	isspace@c,c
  2760  003296  D003               	goto	l2760
  2761  003298  0E09               	movlw	9
  2762  00329A  6012               	cpfslt	isspace@c,c
  2763  00329C  D002               	goto	l2762
  2764  00329E                     l2760:
  2765  00329E  0E00               	movlw	0
  2766  0032A0  6E11               	movwf	_isspace$715,c
  2767  0032A2                     l2762:
  2768  0032A2  C011  F010         	movff	_isspace$715,??_isspace
  2769  0032A6  3010               	rrcf	??_isspace,w,c
  2770  0032A8  0012               	return	
  2771  0032AA                     __end_of_isspace:
  2772                           	opt stack 0
  2773                           tblptru	equ	0xFF8
  2774                           prodh	equ	0xFF4
  2775                           prodl	equ	0xFF3
  2776                           intcon	equ	0xFF2
  2777                           postinc0	equ	0xFEE
  2778                           wreg	equ	0xFE8
  2779                           indf1	equ	0xFE7
  2780                           fsr1h	equ	0xFE2
  2781                           fsr1l	equ	0xFE1
  2782                           indf2	equ	0xFDF
  2783                           postinc2	equ	0xFDE
  2784                           postdec2	equ	0xFDD
  2785                           fsr2h	equ	0xFDA
  2786                           fsr2l	equ	0xFD9
  2787                           status	equ	0xFD8
  2788                           
  2789 ;; *************** function ___lmul *****************
  2790 ;; Defined at:
  2791 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul32.c"
  2792 ;; Parameters:    Size  Location     Type
  2793 ;;  multiplier      4   15[COMRAM] unsigned long 
  2794 ;;  multiplicand    4   19[COMRAM] unsigned long 
  2795 ;; Auto vars:     Size  Location     Type
  2796 ;;  product         4   23[COMRAM] unsigned long 
  2797 ;; Return value:  Size  Location     Type
  2798 ;;                  4   15[COMRAM] unsigned long 
  2799 ;; Registers used:
  2800 ;;		wreg, status,2, status,0
  2801 ;; Tracked objects:
  2802 ;;		On entry : 0/0
  2803 ;;		On exit  : 0/0
  2804 ;;		Unchanged: 0/0
  2805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2806 ;;      Params:         8       0       0       0       0       0       0       0       0
  2807 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2808 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2809 ;;      Totals:        12       0       0       0       0       0       0       0       0
  2810 ;;Total ram usage:       12 bytes
  2811 ;; Hardware stack levels used:    1
  2812 ;; Hardware stack levels required when called:    1
  2813 ;; This function calls:
  2814 ;;		Nothing
  2815 ;; This function is called by:
  2816 ;;		_strtod
  2817 ;;		_atol
  2818 ;; This function uses a non-reentrant model
  2819 ;;
  2820                           
  2821                           	psect	text10
  2822  003084                     __ptext10:
  2823                           	opt stack 0
  2824  003084                     ___lmul:
  2825                           	opt stack 26
  2826                           
  2827                           ;incstack = 0
  2828  003084  0E00               	movlw	0
  2829  003086  6E18               	movwf	___lmul@product,c
  2830  003088  0E00               	movlw	0
  2831  00308A  6E19               	movwf	___lmul@product+1,c
  2832  00308C  0E00               	movlw	0
  2833  00308E  6E1A               	movwf	___lmul@product+2,c
  2834  003090  0E00               	movlw	0
  2835  003092  6E1B               	movwf	___lmul@product+3,c
  2836  003094                     l2564:
  2837  003094  A010               	btfss	___lmul@multiplier,0,c
  2838  003096  D008               	goto	l2568
  2839  003098  5014               	movf	___lmul@multiplicand,w,c
  2840  00309A  2618               	addwf	___lmul@product,f,c
  2841  00309C  5015               	movf	___lmul@multiplicand+1,w,c
  2842  00309E  2219               	addwfc	___lmul@product+1,f,c
  2843  0030A0  5016               	movf	___lmul@multiplicand+2,w,c
  2844  0030A2  221A               	addwfc	___lmul@product+2,f,c
  2845  0030A4  5017               	movf	___lmul@multiplicand+3,w,c
  2846  0030A6  221B               	addwfc	___lmul@product+3,f,c
  2847  0030A8                     l2568:
  2848  0030A8  90D8               	bcf	status,0,c
  2849  0030AA  3614               	rlcf	___lmul@multiplicand,f,c
  2850  0030AC  3615               	rlcf	___lmul@multiplicand+1,f,c
  2851  0030AE  3616               	rlcf	___lmul@multiplicand+2,f,c
  2852  0030B0  3617               	rlcf	___lmul@multiplicand+3,f,c
  2853  0030B2  90D8               	bcf	status,0,c
  2854  0030B4  3213               	rrcf	___lmul@multiplier+3,f,c
  2855  0030B6  3212               	rrcf	___lmul@multiplier+2,f,c
  2856  0030B8  3211               	rrcf	___lmul@multiplier+1,f,c
  2857  0030BA  3210               	rrcf	___lmul@multiplier,f,c
  2858  0030BC  5010               	movf	___lmul@multiplier,w,c
  2859  0030BE  1011               	iorwf	___lmul@multiplier+1,w,c
  2860  0030C0  1012               	iorwf	___lmul@multiplier+2,w,c
  2861  0030C2  1013               	iorwf	___lmul@multiplier+3,w,c
  2862  0030C4  A4D8               	btfss	status,2,c
  2863  0030C6  D7E6               	goto	l2564
  2864  0030C8  C018  F010         	movff	___lmul@product,?___lmul
  2865  0030CC  C019  F011         	movff	___lmul@product+1,?___lmul+1
  2866  0030D0  C01A  F012         	movff	___lmul@product+2,?___lmul+2
  2867  0030D4  C01B  F013         	movff	___lmul@product+3,?___lmul+3
  2868  0030D8  0012               	return		;funcret
  2869  0030DA                     __end_of___lmul:
  2870                           	opt stack 0
  2871                           tblptru	equ	0xFF8
  2872                           prodh	equ	0xFF4
  2873                           prodl	equ	0xFF3
  2874                           intcon	equ	0xFF2
  2875                           postinc0	equ	0xFEE
  2876                           wreg	equ	0xFE8
  2877                           indf1	equ	0xFE7
  2878                           fsr1h	equ	0xFE2
  2879                           fsr1l	equ	0xFE1
  2880                           indf2	equ	0xFDF
  2881                           postinc2	equ	0xFDE
  2882                           postdec2	equ	0xFDD
  2883                           fsr2h	equ	0xFDA
  2884                           fsr2l	equ	0xFD9
  2885                           status	equ	0xFD8
  2886                           
  2887 ;; *************** function _convert_to_degrees *****************
  2888 ;; Defined at:
  2889 ;;		line 152 in file "GPS_info.c"
  2890 ;; Parameters:    Size  Location     Type
  2891 ;;  NMEA_lat_lon    3    6[BANK0 ] float 
  2892 ;; Auto vars:     Size  Location     Type
  2893 ;;  decimal         3   17[BANK0 ] float 
  2894 ;;  dec_deg         3   12[BANK0 ] float 
  2895 ;;  minutes         3    9[BANK0 ] float 
  2896 ;;  position        3    0        float 
  2897 ;;  degrees         2   15[BANK0 ] int 
  2898 ;; Return value:  Size  Location     Type
  2899 ;;                  3    6[BANK0 ] float 
  2900 ;; Registers used:
  2901 ;;		wreg, status,2, status,0, cstack
  2902 ;; Tracked objects:
  2903 ;;		On entry : 0/0
  2904 ;;		On exit  : 0/0
  2905 ;;		Unchanged: 0/0
  2906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2907 ;;      Params:         0       3       0       0       0       0       0       0       0
  2908 ;;      Locals:         0      11       0       0       0       0       0       0       0
  2909 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2910 ;;      Totals:         0      14       0       0       0       0       0       0       0
  2911 ;;Total ram usage:       14 bytes
  2912 ;; Hardware stack levels used:    1
  2913 ;; Hardware stack levels required when called:    3
  2914 ;; This function calls:
  2915 ;;		___awtoft
  2916 ;;		___ftadd
  2917 ;;		___ftdiv
  2918 ;;		___ftmul
  2919 ;;		___ftneg
  2920 ;;		___fttol
  2921 ;; This function is called by:
  2922 ;;		_main
  2923 ;; This function uses a non-reentrant model
  2924 ;;
  2925                           
  2926                           	psect	text11
  2927  001FEA                     __ptext11:
  2928                           	opt stack 0
  2929  001FEA                     _convert_to_degrees:
  2930                           	opt stack 27
  2931                           
  2932                           ;GPS_info.c: 155: float minutes, dec_deg, decimal;
  2933                           ;GPS_info.c: 157: int degrees;
  2934                           ;GPS_info.c: 159: float position;
  2935                           ;GPS_info.c: 161: degrees = (int)(NMEA_lat_long/100.00);
  2936                           
  2937                           ;incstack = 0
  2938  001FEA  0E00               	movlw	0
  2939  001FEC  6E25               	movwf	___ftdiv@f2,c
  2940  001FEE  0EC8               	movlw	200
  2941  001FF0  6E26               	movwf	___ftdiv@f2+1,c
  2942  001FF2  0E42               	movlw	66
  2943  001FF4  6E27               	movwf	___ftdiv@f2+2,c
  2944  001FF6  C066  F022         	movff	convert_to_degrees@NMEA_lat_long,___ftdiv@f1
  2945  001FFA  C067  F023         	movff	convert_to_degrees@NMEA_lat_long+1,___ftdiv@f1+1
  2946  001FFE  C068  F024         	movff	convert_to_degrees@NMEA_lat_long+2,___ftdiv@f1+2
  2947  002002  EC54  F014         	call	___ftdiv	;wreg free
  2948  002006  C022  F03A         	movff	?___ftdiv,___fttol@f1
  2949  00200A  C023  F03B         	movff	?___ftdiv+1,___fttol@f1+1
  2950  00200E  C024  F03C         	movff	?___ftdiv+2,___fttol@f1+2
  2951  002012  ECBD  F011         	call	___fttol	;wreg free
  2952  002016  C03A  F06F         	movff	?___fttol,convert_to_degrees@degrees
  2953  00201A  C03B  F070         	movff	?___fttol+1,convert_to_degrees@degrees+1
  2954                           
  2955                           ;GPS_info.c: 162: minutes = NMEA_lat_long - degrees*100.00;
  2956  00201E  0E00               	movlw	0
  2957  002020  6E27               	movwf	___ftmul@f2,c
  2958  002022  0EC8               	movlw	200
  2959  002024  6E28               	movwf	___ftmul@f2+1,c
  2960  002026  0E42               	movlw	66
  2961  002028  6E29               	movwf	___ftmul@f2+2,c
  2962  00202A  C06F  F018         	movff	convert_to_degrees@degrees,___awtoft@c
  2963  00202E  C070  F019         	movff	convert_to_degrees@degrees+1,___awtoft@c+1
  2964  002032  ECDC  F018         	call	___awtoft	;wreg free
  2965  002036  C018  F024         	movff	?___awtoft,___ftmul@f1
  2966  00203A  C019  F025         	movff	?___awtoft+1,___ftmul@f1+1
  2967  00203E  C01A  F026         	movff	?___awtoft+2,___ftmul@f1+2
  2968  002042  ECDA  F013         	call	___ftmul	;wreg free
  2969  002046  C024  F033         	movff	?___ftmul,___ftneg@f1
  2970  00204A  C025  F034         	movff	?___ftmul+1,___ftneg@f1+1
  2971  00204E  C026  F035         	movff	?___ftmul+2,___ftneg@f1+2
  2972  002052  EC68  F019         	call	___ftneg	;wreg free
  2973  002056  C033  F03D         	movff	?___ftneg,___ftadd@f1
  2974  00205A  C034  F03E         	movff	?___ftneg+1,___ftadd@f1+1
  2975  00205E  C035  F03F         	movff	?___ftneg+2,___ftadd@f1+2
  2976  002062  C066  F040         	movff	convert_to_degrees@NMEA_lat_long,___ftadd@f2
  2977  002066  C067  F041         	movff	convert_to_degrees@NMEA_lat_long+1,___ftadd@f2+1
  2978  00206A  C068  F042         	movff	convert_to_degrees@NMEA_lat_long+2,___ftadd@f2+2
  2979  00206E  ECF6  F00E         	call	___ftadd	;wreg free
  2980  002072  C03D  F069         	movff	?___ftadd,convert_to_degrees@minutes
  2981  002076  C03E  F06A         	movff	?___ftadd+1,convert_to_degrees@minutes+1
  2982  00207A  C03F  F06B         	movff	?___ftadd+2,convert_to_degrees@minutes+2
  2983                           
  2984                           ;GPS_info.c: 163: dec_deg = minutes / 60.00;
  2985  00207E  C069  F022         	movff	convert_to_degrees@minutes,___ftdiv@f1
  2986  002082  C06A  F023         	movff	convert_to_degrees@minutes+1,___ftdiv@f1+1
  2987  002086  C06B  F024         	movff	convert_to_degrees@minutes+2,___ftdiv@f1+2
  2988  00208A  0E00               	movlw	0
  2989  00208C  6E25               	movwf	___ftdiv@f2,c
  2990  00208E  0E70               	movlw	112
  2991  002090  6E26               	movwf	___ftdiv@f2+1,c
  2992  002092  0E42               	movlw	66
  2993  002094  6E27               	movwf	___ftdiv@f2+2,c
  2994  002096  EC54  F014         	call	___ftdiv	;wreg free
  2995  00209A  C022  F06C         	movff	?___ftdiv,convert_to_degrees@dec_deg
  2996  00209E  C023  F06D         	movff	?___ftdiv+1,convert_to_degrees@dec_deg+1
  2997  0020A2  C024  F06E         	movff	?___ftdiv+2,convert_to_degrees@dec_deg+2
  2998                           
  2999                           ;GPS_info.c: 164: decimal = degrees + dec_deg;
  3000  0020A6  C06F  F018         	movff	convert_to_degrees@degrees,___awtoft@c
  3001  0020AA  C070  F019         	movff	convert_to_degrees@degrees+1,___awtoft@c+1
  3002  0020AE  ECDC  F018         	call	___awtoft	;wreg free
  3003  0020B2  C018  F03D         	movff	?___awtoft,___ftadd@f1
  3004  0020B6  C019  F03E         	movff	?___awtoft+1,___ftadd@f1+1
  3005  0020BA  C01A  F03F         	movff	?___awtoft+2,___ftadd@f1+2
  3006  0020BE  C06C  F040         	movff	convert_to_degrees@dec_deg,___ftadd@f2
  3007  0020C2  C06D  F041         	movff	convert_to_degrees@dec_deg+1,___ftadd@f2+1
  3008  0020C6  C06E  F042         	movff	convert_to_degrees@dec_deg+2,___ftadd@f2+2
  3009  0020CA  ECF6  F00E         	call	___ftadd	;wreg free
  3010  0020CE  C03D  F071         	movff	?___ftadd,convert_to_degrees@decimal
  3011  0020D2  C03E  F072         	movff	?___ftadd+1,convert_to_degrees@decimal+1
  3012  0020D6  C03F  F073         	movff	?___ftadd+2,convert_to_degrees@decimal+2
  3013                           
  3014                           ;GPS_info.c: 165: if (N_S == 'S' || E_W == 'W') {
  3015  0020DA  0E53               	movlw	83
  3016  0020DC  184E               	xorwf	_N_S,w,c
  3017  0020DE  B4D8               	btfsc	status,2,c
  3018  0020E0  D004               	goto	l4670
  3019  0020E2  0E57               	movlw	87
  3020  0020E4  184C               	xorwf	_E_W,w,c
  3021  0020E6  A4D8               	btfss	status,2,c
  3022  0020E8  D014               	goto	l4672
  3023  0020EA                     l4670:
  3024                           
  3025                           ;GPS_info.c: 166: decimal *= -1;
  3026  0020EA  C071  F024         	movff	convert_to_degrees@decimal,___ftmul@f1
  3027  0020EE  C072  F025         	movff	convert_to_degrees@decimal+1,___ftmul@f1+1
  3028  0020F2  C073  F026         	movff	convert_to_degrees@decimal+2,___ftmul@f1+2
  3029  0020F6  0E00               	movlw	0
  3030  0020F8  6E27               	movwf	___ftmul@f2,c
  3031  0020FA  0E80               	movlw	128
  3032  0020FC  6E28               	movwf	___ftmul@f2+1,c
  3033  0020FE  0EBF               	movlw	191
  3034  002100  6E29               	movwf	___ftmul@f2+2,c
  3035  002102  ECDA  F013         	call	___ftmul	;wreg free
  3036  002106  C024  F071         	movff	?___ftmul,convert_to_degrees@decimal
  3037  00210A  C025  F072         	movff	?___ftmul+1,convert_to_degrees@decimal+1
  3038  00210E  C026  F073         	movff	?___ftmul+2,convert_to_degrees@decimal+2
  3039  002112                     l4672:
  3040                           
  3041                           ;GPS_info.c: 167: }
  3042                           ;GPS_info.c: 169: return decimal;
  3043  002112  C071  F066         	movff	convert_to_degrees@decimal,?_convert_to_degrees
  3044  002116  C072  F067         	movff	convert_to_degrees@decimal+1,?_convert_to_degrees+1
  3045  00211A  C073  F068         	movff	convert_to_degrees@decimal+2,?_convert_to_degrees+2
  3046  00211E  0012               	return	
  3047  002120                     __end_of_convert_to_degrees:
  3048                           	opt stack 0
  3049                           tblptru	equ	0xFF8
  3050                           prodh	equ	0xFF4
  3051                           prodl	equ	0xFF3
  3052                           intcon	equ	0xFF2
  3053                           postinc0	equ	0xFEE
  3054                           wreg	equ	0xFE8
  3055                           indf1	equ	0xFE7
  3056                           fsr1h	equ	0xFE2
  3057                           fsr1l	equ	0xFE1
  3058                           indf2	equ	0xFDF
  3059                           postinc2	equ	0xFDE
  3060                           postdec2	equ	0xFDD
  3061                           fsr2h	equ	0xFDA
  3062                           fsr2l	equ	0xFD9
  3063                           status	equ	0xFD8
  3064                           
  3065 ;; *************** function ___awtoft *****************
  3066 ;; Defined at:
  3067 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  3068 ;; Parameters:    Size  Location     Type
  3069 ;;  c               2   23[COMRAM] int 
  3070 ;; Auto vars:     Size  Location     Type
  3071 ;;  sign            1   26[COMRAM] unsigned char 
  3072 ;; Return value:  Size  Location     Type
  3073 ;;                  3   23[COMRAM] float 
  3074 ;; Registers used:
  3075 ;;		wreg, status,2, status,0, cstack
  3076 ;; Tracked objects:
  3077 ;;		On entry : 0/0
  3078 ;;		On exit  : 0/0
  3079 ;;		Unchanged: 0/0
  3080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3081 ;;      Params:         3       0       0       0       0       0       0       0       0
  3082 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3083 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3084 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3085 ;;Total ram usage:        4 bytes
  3086 ;; Hardware stack levels used:    1
  3087 ;; Hardware stack levels required when called:    2
  3088 ;; This function calls:
  3089 ;;		___ftpack
  3090 ;; This function is called by:
  3091 ;;		_convert_to_degrees
  3092 ;; This function uses a non-reentrant model
  3093 ;;
  3094                           
  3095                           	psect	text12
  3096  0031B8                     __ptext12:
  3097                           	opt stack 0
  3098  0031B8                     ___awtoft:
  3099                           	opt stack 27
  3100                           
  3101                           ;incstack = 0
  3102  0031B8  0E00               	movlw	0
  3103  0031BA  6E1B               	movwf	___awtoft@sign,c
  3104  0031BC  AE19               	btfss	___awtoft@c+1,7,c
  3105  0031BE  D006               	goto	l4626
  3106  0031C0  6C18               	negf	___awtoft@c,c
  3107  0031C2  1E19               	comf	___awtoft@c+1,f,c
  3108  0031C4  B0D8               	btfsc	status,0,c
  3109  0031C6  2A19               	incf	___awtoft@c+1,f,c
  3110  0031C8  0E01               	movlw	1
  3111  0031CA  6E1B               	movwf	___awtoft@sign,c
  3112  0031CC                     l4626:
  3113  0031CC  C018  F010         	movff	___awtoft@c,___ftpack@arg
  3114  0031D0  C019  F011         	movff	___awtoft@c+1,___ftpack@arg+1
  3115  0031D4  6A12               	clrf	___ftpack@arg+2,c
  3116  0031D6  0E8E               	movlw	142
  3117  0031D8  6E13               	movwf	___ftpack@exp,c
  3118  0031DA  C01B  F014         	movff	___awtoft@sign,___ftpack@sign
  3119  0031DE  ECC7  F014         	call	___ftpack	;wreg free
  3120  0031E2  C010  F018         	movff	?___ftpack,?___awtoft
  3121  0031E6  C011  F019         	movff	?___ftpack+1,?___awtoft+1
  3122  0031EA  C012  F01A         	movff	?___ftpack+2,?___awtoft+2
  3123  0031EE  0012               	return	
  3124  0031F0                     __end_of___awtoft:
  3125                           	opt stack 0
  3126                           tblptru	equ	0xFF8
  3127                           prodh	equ	0xFF4
  3128                           prodl	equ	0xFF3
  3129                           intcon	equ	0xFF2
  3130                           postinc0	equ	0xFEE
  3131                           wreg	equ	0xFE8
  3132                           indf1	equ	0xFE7
  3133                           fsr1h	equ	0xFE2
  3134                           fsr1l	equ	0xFE1
  3135                           indf2	equ	0xFDF
  3136                           postinc2	equ	0xFDE
  3137                           postdec2	equ	0xFDD
  3138                           fsr2h	equ	0xFDA
  3139                           fsr2l	equ	0xFD9
  3140                           status	equ	0xFD8
  3141                           
  3142 ;; *************** function _convert_time_to_UTC *****************
  3143 ;; Defined at:
  3144 ;;		line 140 in file "GPS_info.c"
  3145 ;; Parameters:    Size  Location     Type
  3146 ;;  UTC_Time        4   48[BANK0 ] unsigned long 
  3147 ;; Auto vars:     Size  Location     Type
  3148 ;;  sec             2   60[BANK0 ] unsigned int 
  3149 ;;  min             2   58[BANK0 ] unsigned int 
  3150 ;;  hour            2   56[BANK0 ] unsigned int 
  3151 ;; Return value:  Size  Location     Type
  3152 ;;                  1    wreg      void 
  3153 ;; Registers used:
  3154 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3155 ;; Tracked objects:
  3156 ;;		On entry : 0/0
  3157 ;;		On exit  : 0/0
  3158 ;;		Unchanged: 0/0
  3159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3160 ;;      Params:         0       4       0       0       0       0       0       0       0
  3161 ;;      Locals:         0      10       0       0       0       0       0       0       0
  3162 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3163 ;;      Totals:         0      14       0       0       0       0       0       0       0
  3164 ;;Total ram usage:       14 bytes
  3165 ;; Hardware stack levels used:    1
  3166 ;; Hardware stack levels required when called:    5
  3167 ;; This function calls:
  3168 ;;		___lldiv
  3169 ;;		___llmod
  3170 ;;		_sprintf
  3171 ;; This function is called by:
  3172 ;;		_main
  3173 ;; This function uses a non-reentrant model
  3174 ;;
  3175                           
  3176                           	psect	text13
  3177  0025AA                     __ptext13:
  3178                           	opt stack 0
  3179  0025AA                     _convert_time_to_UTC:
  3180                           	opt stack 25
  3181                           
  3182                           ;GPS_info.c: 142: unsigned int hour, min, sec;
  3183                           ;GPS_info.c: 144: hour = (UTC_Time / 10000);
  3184                           
  3185                           ;incstack = 0
  3186  0025AA  C090  F019         	movff	convert_time_to_UTC@UTC_Time,___lldiv@dividend
  3187  0025AE  C091  F01A         	movff	convert_time_to_UTC@UTC_Time+1,___lldiv@dividend+1
  3188  0025B2  C092  F01B         	movff	convert_time_to_UTC@UTC_Time+2,___lldiv@dividend+2
  3189  0025B6  C093  F01C         	movff	convert_time_to_UTC@UTC_Time+3,___lldiv@dividend+3
  3190  0025BA  0E10               	movlw	16
  3191  0025BC  6E1D               	movwf	___lldiv@divisor,c
  3192  0025BE  0E27               	movlw	39
  3193  0025C0  6E1E               	movwf	___lldiv@divisor+1,c
  3194  0025C2  0E00               	movlw	0
  3195  0025C4  6E1F               	movwf	___lldiv@divisor+2,c
  3196  0025C6  0E00               	movlw	0
  3197  0025C8  6E20               	movwf	___lldiv@divisor+3,c
  3198  0025CA  EC88  F016         	call	___lldiv	;wreg free
  3199  0025CE  C019  F098         	movff	?___lldiv,convert_time_to_UTC@hour
  3200  0025D2  C01A  F099         	movff	?___lldiv+1,convert_time_to_UTC@hour+1
  3201                           
  3202                           ;GPS_info.c: 145: min = (UTC_Time % 10000) / 100;
  3203  0025D6  0E10               	movlw	16
  3204  0025D8  6E14               	movwf	___llmod@divisor,c
  3205  0025DA  0E27               	movlw	39
  3206  0025DC  6E15               	movwf	___llmod@divisor+1,c
  3207  0025DE  0E00               	movlw	0
  3208  0025E0  6E16               	movwf	___llmod@divisor+2,c
  3209  0025E2  0E00               	movlw	0
  3210  0025E4  6E17               	movwf	___llmod@divisor+3,c
  3211  0025E6  C090  F010         	movff	convert_time_to_UTC@UTC_Time,___llmod@dividend
  3212  0025EA  C091  F011         	movff	convert_time_to_UTC@UTC_Time+1,___llmod@dividend+1
  3213  0025EE  C092  F012         	movff	convert_time_to_UTC@UTC_Time+2,___llmod@dividend+2
  3214  0025F2  C093  F013         	movff	convert_time_to_UTC@UTC_Time+3,___llmod@dividend+3
  3215  0025F6  ECB3  F017         	call	___llmod	;wreg free
  3216  0025FA  C010  F019         	movff	?___llmod,___lldiv@dividend
  3217  0025FE  C011  F01A         	movff	?___llmod+1,___lldiv@dividend+1
  3218  002602  C012  F01B         	movff	?___llmod+2,___lldiv@dividend+2
  3219  002606  C013  F01C         	movff	?___llmod+3,___lldiv@dividend+3
  3220  00260A  0E64               	movlw	100
  3221  00260C  6E1D               	movwf	___lldiv@divisor,c
  3222  00260E  0E00               	movlw	0
  3223  002610  6E1E               	movwf	___lldiv@divisor+1,c
  3224  002612  0E00               	movlw	0
  3225  002614  6E1F               	movwf	___lldiv@divisor+2,c
  3226  002616  0E00               	movlw	0
  3227  002618  6E20               	movwf	___lldiv@divisor+3,c
  3228  00261A  EC88  F016         	call	___lldiv	;wreg free
  3229  00261E  C019  F09A         	movff	?___lldiv,convert_time_to_UTC@min
  3230  002622  C01A  F09B         	movff	?___lldiv+1,convert_time_to_UTC@min+1
  3231                           
  3232                           ;GPS_info.c: 146: sec = (UTC_Time % 10000) % 100;
  3233  002626  0E10               	movlw	16
  3234  002628  6E14               	movwf	___llmod@divisor,c
  3235  00262A  0E27               	movlw	39
  3236  00262C  6E15               	movwf	___llmod@divisor+1,c
  3237  00262E  0E00               	movlw	0
  3238  002630  6E16               	movwf	___llmod@divisor+2,c
  3239  002632  0E00               	movlw	0
  3240  002634  6E17               	movwf	___llmod@divisor+3,c
  3241  002636  C090  F010         	movff	convert_time_to_UTC@UTC_Time,___llmod@dividend
  3242  00263A  C091  F011         	movff	convert_time_to_UTC@UTC_Time+1,___llmod@dividend+1
  3243  00263E  C092  F012         	movff	convert_time_to_UTC@UTC_Time+2,___llmod@dividend+2
  3244  002642  C093  F013         	movff	convert_time_to_UTC@UTC_Time+3,___llmod@dividend+3
  3245  002646  ECB3  F017         	call	___llmod	;wreg free
  3246  00264A  C010  F094         	movff	?___llmod,_convert_time_to_UTC$1059
  3247  00264E  C011  F095         	movff	?___llmod+1,_convert_time_to_UTC$1059+1
  3248  002652  C012  F096         	movff	?___llmod+2,_convert_time_to_UTC$1059+2
  3249  002656  C013  F097         	movff	?___llmod+3,_convert_time_to_UTC$1059+3
  3250                           
  3251                           ;GPS_info.c: 146: sec = (UTC_Time % 10000) % 100;
  3252  00265A  C094  F010         	movff	_convert_time_to_UTC$1059,___llmod@dividend
  3253  00265E  C095  F011         	movff	_convert_time_to_UTC$1059+1,___llmod@dividend+1
  3254  002662  C096  F012         	movff	_convert_time_to_UTC$1059+2,___llmod@dividend+2
  3255  002666  C097  F013         	movff	_convert_time_to_UTC$1059+3,___llmod@dividend+3
  3256  00266A  0E64               	movlw	100
  3257  00266C  6E14               	movwf	___llmod@divisor,c
  3258  00266E  0E00               	movlw	0
  3259  002670  6E15               	movwf	___llmod@divisor+1,c
  3260  002672  0E00               	movlw	0
  3261  002674  6E16               	movwf	___llmod@divisor+2,c
  3262  002676  0E00               	movlw	0
  3263  002678  6E17               	movwf	___llmod@divisor+3,c
  3264  00267A  ECB3  F017         	call	___llmod	;wreg free
  3265  00267E  C010  F09C         	movff	?___llmod,convert_time_to_UTC@sec
  3266  002682  C011  F09D         	movff	?___llmod+1,convert_time_to_UTC@sec+1
  3267                           
  3268                           ;GPS_info.c: 148: sprintf(Data_Buffer, "%d:%d:%d", hour,min,sec);
  3269  002686  0ECE               	movlw	low _Data_Buffer
  3270  002688  0100               	movlb	0	; () banked
  3271  00268A  6F69               	movwf	sprintf@sp& (0+255),b
  3272  00268C  0E00               	movlw	high _Data_Buffer
  3273  00268E  0100               	movlb	0	; () banked
  3274  002690  6F6A               	movwf	(sprintf@sp+1)& (0+255),b
  3275  002692  0E82               	movlw	low STR_9
  3276  002694  0100               	movlb	0	; () banked
  3277  002696  6F6B               	movwf	sprintf@f& (0+255),b
  3278  002698  0E08               	movlw	high STR_9
  3279  00269A  0100               	movlb	0	; () banked
  3280  00269C  6F6C               	movwf	(sprintf@f+1)& (0+255),b
  3281  00269E  C098  F06D         	movff	convert_time_to_UTC@hour,?_sprintf+4
  3282  0026A2  C099  F06E         	movff	convert_time_to_UTC@hour+1,?_sprintf+5
  3283  0026A6  C09A  F06F         	movff	convert_time_to_UTC@min,?_sprintf+6
  3284  0026AA  C09B  F070         	movff	convert_time_to_UTC@min+1,?_sprintf+7
  3285  0026AE  C09C  F071         	movff	convert_time_to_UTC@sec,?_sprintf+8
  3286  0026B2  C09D  F072         	movff	convert_time_to_UTC@sec+1,?_sprintf+9
  3287  0026B6  EC57  F004         	call	_sprintf	;wreg free
  3288  0026BA  0012               	return		;funcret
  3289  0026BC                     __end_of_convert_time_to_UTC:
  3290                           	opt stack 0
  3291                           tblptru	equ	0xFF8
  3292                           prodh	equ	0xFF4
  3293                           prodl	equ	0xFF3
  3294                           intcon	equ	0xFF2
  3295                           postinc0	equ	0xFEE
  3296                           wreg	equ	0xFE8
  3297                           indf1	equ	0xFE7
  3298                           fsr1h	equ	0xFE2
  3299                           fsr1l	equ	0xFE1
  3300                           indf2	equ	0xFDF
  3301                           postinc2	equ	0xFDE
  3302                           postdec2	equ	0xFDD
  3303                           fsr2h	equ	0xFDA
  3304                           fsr2l	equ	0xFD9
  3305                           status	equ	0xFD8
  3306                           
  3307 ;; *************** function _sprintf *****************
  3308 ;; Defined at:
  3309 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3310 ;; Parameters:    Size  Location     Type
  3311 ;;  sp              2    9[BANK0 ] PTR unsigned char 
  3312 ;;		 -> Data_Buffer(15), main@GPS_Buffer(15), 
  3313 ;;  f               2   11[BANK0 ] PTR const unsigned char 
  3314 ;;		 -> STR_9(9), STR_8(5), STR_6(6), STR_4(6), 
  3315 ;; Auto vars:     Size  Location     Type
  3316 ;;  val             4   38[BANK0 ] unsigned long 
  3317 ;;  tmpval          4   34[BANK0 ] struct .
  3318 ;;  fval            3   44[BANK0 ] struct .
  3319 ;;  cp              3    0        PTR const unsigned char 
  3320 ;;  prec            2   42[BANK0 ] int 
  3321 ;;  exp             2   32[BANK0 ] int 
  3322 ;;  flag            2   30[BANK0 ] unsigned short 
  3323 ;;  ap              2   28[BANK0 ] PTR void [1]
  3324 ;;		 -> ?_sprintf(2), 
  3325 ;;  len             2    0        unsigned int 
  3326 ;;  width           2    0        int 
  3327 ;;  c               1   47[BANK0 ] char 
  3328 ;;  d               1    0        unsigned char 
  3329 ;; Return value:  Size  Location     Type
  3330 ;;                  2    9[BANK0 ] int 
  3331 ;; Registers used:
  3332 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3333 ;; Tracked objects:
  3334 ;;		On entry : 0/0
  3335 ;;		On exit  : 0/0
  3336 ;;		Unchanged: 0/0
  3337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3338 ;;      Params:         0      10       0       0       0       0       0       0       0
  3339 ;;      Locals:         0      23       0       0       0       0       0       0       0
  3340 ;;      Temps:          0       6       0       0       0       0       0       0       0
  3341 ;;      Totals:         0      39       0       0       0       0       0       0       0
  3342 ;;Total ram usage:       39 bytes
  3343 ;; Hardware stack levels used:    1
  3344 ;; Hardware stack levels required when called:    4
  3345 ;; This function calls:
  3346 ;;		___awdiv
  3347 ;;		___ftadd
  3348 ;;		___ftge
  3349 ;;		___ftmul
  3350 ;;		___ftneg
  3351 ;;		___ftsub
  3352 ;;		___fttol
  3353 ;;		___lldiv
  3354 ;;		___llmod
  3355 ;;		___lltoft
  3356 ;;		___wmul
  3357 ;;		__div_to_l_
  3358 ;;		__tdiv_to_l_
  3359 ;;		_fround
  3360 ;;		_isdigit
  3361 ;;		_scale
  3362 ;; This function is called by:
  3363 ;;		_main
  3364 ;;		_convert_time_to_UTC
  3365 ;; This function uses a non-reentrant model
  3366 ;;
  3367                           
  3368                           	psect	text14
  3369  0008AE                     __ptext14:
  3370                           	opt stack 0
  3371  0008AE                     _sprintf:
  3372                           	opt stack 26
  3373                           
  3374                           ;doprnt.c: 494: va_list ap;
  3375                           ;doprnt.c: 499: signed char c;
  3376                           ;doprnt.c: 501: int width;
  3377                           ;doprnt.c: 504: int prec;
  3378                           ;doprnt.c: 508: unsigned short flag;
  3379                           ;doprnt.c: 515: char d;
  3380                           ;doprnt.c: 516: double fval;
  3381                           ;doprnt.c: 517: int exp;
  3382                           ;doprnt.c: 523: union {
  3383                           ;doprnt.c: 524: unsigned long vd;
  3384                           ;doprnt.c: 525: double integ;
  3385                           ;doprnt.c: 526: } tmpval;
  3386                           ;doprnt.c: 528: unsigned long val;
  3387                           ;doprnt.c: 529: unsigned len;
  3388                           ;doprnt.c: 530: const char * cp;
  3389                           ;doprnt.c: 533: *ap = __va_start();
  3390                           
  3391                           ;incstack = 0
  3392  0008AE  0E6D               	movlw	low (?_sprintf+4)
  3393  0008B0  0100               	movlb	0	; () banked
  3394  0008B2  6F7C               	movwf	sprintf@ap& (0+255),b
  3395  0008B4  0E00               	movlw	high (?_sprintf+4)
  3396  0008B6  0100               	movlb	0	; () banked
  3397  0008B8  6F7D               	movwf	(sprintf@ap+1)& (0+255),b
  3398                           
  3399                           ;doprnt.c: 536: while(c = *f++) {
  3400  0008BA  EFE1  F008         	goto	l4608
  3401  0008BE                     l4378:
  3402                           
  3403                           ; BSR set to: 0
  3404                           ;doprnt.c: 538: if(c != '%')
  3405  0008BE  0E25               	movlw	37
  3406  0008C0  0100               	movlb	0	; () banked
  3407  0008C2  198F               	xorwf	sprintf@c& (0+255),w,b
  3408  0008C4  B4D8               	btfsc	status,2,c
  3409  0008C6  D00B               	goto	l4384
  3410                           
  3411                           ; BSR set to: 0
  3412                           ;doprnt.c: 540: {
  3413                           ;doprnt.c: 541: ((*sp++ = (c)));
  3414  0008C8  C069  FFD9         	movff	sprintf@sp,fsr2l
  3415  0008CC  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  3416  0008D0  C08F  FFDF         	movff	sprintf@c,indf2
  3417                           
  3418                           ; BSR set to: 0
  3419  0008D4  0100               	movlb	0	; () banked
  3420  0008D6  4B69               	infsnz	sprintf@sp& (0+255),f,b
  3421  0008D8  2B6A               	incf	(sprintf@sp+1)& (0+255),f,b
  3422                           
  3423                           ;doprnt.c: 542: continue;
  3424  0008DA  EFE1  F008         	goto	l4608
  3425  0008DE                     l4384:
  3426                           
  3427                           ; BSR set to: 0
  3428                           ;doprnt.c: 543: }
  3429                           ;doprnt.c: 548: flag = 0;
  3430  0008DE  0E00               	movlw	0
  3431  0008E0  0100               	movlb	0	; () banked
  3432  0008E2  6F7F               	movwf	(sprintf@flag+1)& (0+255),b
  3433  0008E4  0E00               	movlw	0
  3434  0008E6  6F7E               	movwf	sprintf@flag& (0+255),b
  3435                           
  3436                           ; BSR set to: 0
  3437                           ;doprnt.c: 611: if(*f == '.') {
  3438  0008E8  C06B  FFF6         	movff	sprintf@f,tblptrl
  3439  0008EC  C06C  FFF7         	movff	sprintf@f+1,tblptrh
  3440  0008F0                     	if	0	;tblptru may be non-zero
  3441  0008F0                     	endif
  3442  0008F0                     	if	0	;tblptru may be non-zero
  3443  0008F0                     	endif
  3444  0008F0  0008               	tblrd		*
  3445  0008F2  50F5               	movf	tablat,w,c
  3446  0008F4  0A2E               	xorlw	46
  3447  0008F6  A4D8               	btfss	status,2,c
  3448  0008F8  D034               	goto	l4398
  3449                           
  3450                           ; BSR set to: 0
  3451                           ;doprnt.c: 612: flag |= 0x4000;
  3452  0008FA  0100               	movlb	0	; () banked
  3453  0008FC  8D7F               	bsf	(sprintf@flag+1)& (0+255),6,b
  3454                           
  3455                           ;doprnt.c: 613: f++;
  3456  0008FE  0100               	movlb	0	; () banked
  3457  000900  4B6B               	infsnz	sprintf@f& (0+255),f,b
  3458  000902  2B6C               	incf	(sprintf@f+1)& (0+255),f,b
  3459                           
  3460                           ; BSR set to: 0
  3461                           ;doprnt.c: 620: {
  3462                           ;doprnt.c: 621: prec = 0;
  3463  000904  0E00               	movlw	0
  3464  000906  0100               	movlb	0	; () banked
  3465  000908  6F8B               	movwf	(sprintf@prec+1)& (0+255),b
  3466  00090A  0E00               	movlw	0
  3467  00090C  6F8A               	movwf	sprintf@prec& (0+255),b
  3468                           
  3469                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  3470  00090E  D01E               	goto	l4396
  3471  000910                     l4392:
  3472                           
  3473                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  3474  000910  C08A  F01E         	movff	sprintf@prec,___wmul@multiplier
  3475  000914  C08B  F01F         	movff	sprintf@prec+1,___wmul@multiplier+1
  3476  000918  0E00               	movlw	0
  3477  00091A  6E21               	movwf	___wmul@multiplicand+1,c
  3478  00091C  0E0A               	movlw	10
  3479  00091E  6E20               	movwf	___wmul@multiplicand,c
  3480  000920  EC55  F019         	call	___wmul	;wreg free
  3481  000924  C06B  FFF6         	movff	sprintf@f,tblptrl
  3482  000928  C06C  FFF7         	movff	sprintf@f+1,tblptrh
  3483  00092C                     	if	0	;tblptru may be non-zero
  3484  00092C                     	endif
  3485  00092C                     	if	0	;tblptru may be non-zero
  3486  00092C                     	endif
  3487  00092C  0008               	tblrd		*
  3488  00092E  50F5               	movf	tablat,w,c
  3489  000930  261E               	addwf	?___wmul,f,c
  3490  000932  0E00               	movlw	0
  3491  000934  221F               	addwfc	?___wmul+1,f,c
  3492  000936  0ED0               	movlw	208
  3493  000938  241E               	addwf	?___wmul,w,c
  3494  00093A  0100               	movlb	0	; () banked
  3495  00093C  6F8A               	movwf	sprintf@prec& (0+255),b
  3496  00093E  0EFF               	movlw	255
  3497  000940  201F               	addwfc	?___wmul+1,w,c
  3498  000942  0100               	movlb	0	; () banked
  3499  000944  6F8B               	movwf	(sprintf@prec+1)& (0+255),b
  3500                           
  3501                           ; BSR set to: 0
  3502  000946  0100               	movlb	0	; () banked
  3503  000948  4B6B               	infsnz	sprintf@f& (0+255),f,b
  3504  00094A  2B6C               	incf	(sprintf@f+1)& (0+255),f,b
  3505  00094C                     l4396:
  3506                           
  3507                           ; BSR set to: 0
  3508  00094C  C06B  FFF6         	movff	sprintf@f,tblptrl
  3509  000950  C06C  FFF7         	movff	sprintf@f+1,tblptrh
  3510  000954                     	if	0	;tblptru may be non-zero
  3511  000954                     	endif
  3512  000954                     	if	0	;tblptru may be non-zero
  3513  000954                     	endif
  3514  000954  0008               	tblrd		*
  3515  000956  50F5               	movf	tablat,w,c
  3516  000958  EC8B  F019         	call	_isdigit
  3517  00095C  A0D8               	btfss	status,0,c
  3518  00095E  D00C               	goto	l4406
  3519  000960  D7D7               	goto	l4392
  3520  000962                     l4398:
  3521                           
  3522                           ;doprnt.c: 626: prec = 0;
  3523  000962  0E00               	movlw	0
  3524  000964  0100               	movlb	0	; () banked
  3525  000966  6F8B               	movwf	(sprintf@prec+1)& (0+255),b
  3526  000968  0E00               	movlw	0
  3527  00096A  6F8A               	movwf	sprintf@prec& (0+255),b
  3528                           
  3529                           ; BSR set to: 0
  3530                           ;doprnt.c: 628: flag |= 0x1000;
  3531  00096C  0100               	movlb	0	; () banked
  3532  00096E  897F               	bsf	(sprintf@flag+1)& (0+255),4,b
  3533                           
  3534                           ; BSR set to: 0
  3535                           ;doprnt.c: 630: }
  3536                           ;doprnt.c: 635: switch(c = *f++) {
  3537  000970  D003               	goto	l4406
  3538  000972                     l4402:
  3539                           
  3540                           ; BSR set to: 0
  3541                           ;doprnt.c: 663: flag |= 0x400;
  3542  000972  0100               	movlb	0	; () banked
  3543  000974  857F               	bsf	(sprintf@flag+1)& (0+255),2,b
  3544                           
  3545                           ; BSR set to: 0
  3546                           ;doprnt.c: 698: case 'i':
  3547                           ;doprnt.c: 699: break;
  3548                           
  3549                           ; BSR set to: 0
  3550                           
  3551                           ;doprnt.c: 697: case 'd':
  3552                           
  3553                           ;doprnt.c: 664: break;
  3554  000976  D01A               	goto	l4408
  3555  000978                     l4406:
  3556  000978  C06B  FFF6         	movff	sprintf@f,tblptrl
  3557  00097C  C06C  FFF7         	movff	sprintf@f+1,tblptrh
  3558  000980  0100               	movlb	0	; () banked
  3559  000982  4B6B               	infsnz	sprintf@f& (0+255),f,b
  3560  000984  2B6C               	incf	(sprintf@f+1)& (0+255),f,b
  3561  000986                     	if	0	;tblptru may be non-zero
  3562  000986                     	endif
  3563  000986                     	if	0	;tblptru may be non-zero
  3564  000986                     	endif
  3565  000986  0008               	tblrd		*
  3566  000988  CFF5 F08F          	movff	tablat,sprintf@c
  3567  00098C  0100               	movlb	0	; () banked
  3568  00098E  518F               	movf	sprintf@c& (0+255),w,b
  3569                           
  3570                           ; Switch size 1, requested type "space"
  3571                           ; Number of cases is 4, Range of values is 0 to 105
  3572                           ; switch strategies available:
  3573                           ; Name         Instructions Cycles
  3574                           ; simple_byte           13     7 (average)
  3575                           ;	Chosen strategy is simple_byte
  3576  000990  0A00               	xorlw	0	; case 0
  3577  000992  B4D8               	btfsc	status,2,c
  3578  000994  EFF0  F008         	goto	l4610
  3579  000998  0A64               	xorlw	100	; case 100
  3580  00099A  B4D8               	btfsc	status,2,c
  3581  00099C  D007               	goto	l4408
  3582  00099E  0A02               	xorlw	2	; case 102
  3583  0009A0  B4D8               	btfsc	status,2,c
  3584  0009A2  D7E7               	goto	l4402
  3585  0009A4  0A0F               	xorlw	15	; case 105
  3586  0009A6  A4D8               	btfss	status,2,c
  3587  0009A8  EFE1  F008         	goto	l4608
  3588  0009AC                     l4408:
  3589                           
  3590                           ; BSR set to: 0
  3591                           ;doprnt.c: 825: if(flag & (0x700)) {
  3592  0009AC  0E07               	movlw	7
  3593  0009AE  0100               	movlb	0	; () banked
  3594  0009B0  157F               	andwf	(sprintf@flag+1)& (0+255),w,b
  3595  0009B2  B4D8               	btfsc	status,2,c
  3596  0009B4  D315               	goto	l4556
  3597                           
  3598                           ; BSR set to: 0
  3599                           ;doprnt.c: 827: if(flag & 0x1000)
  3600  0009B6  0100               	movlb	0	; () banked
  3601  0009B8  A97F               	btfss	(sprintf@flag+1)& (0+255),4,b
  3602  0009BA  D005               	goto	l4414
  3603                           
  3604                           ; BSR set to: 0
  3605                           ;doprnt.c: 829: prec = 6;
  3606  0009BC  0E00               	movlw	0
  3607  0009BE  0100               	movlb	0	; () banked
  3608  0009C0  6F8B               	movwf	(sprintf@prec+1)& (0+255),b
  3609  0009C2  0E06               	movlw	6
  3610  0009C4  6F8A               	movwf	sprintf@prec& (0+255),b
  3611  0009C6                     l4414:
  3612                           
  3613                           ; BSR set to: 0
  3614                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3615  0009C6  C07C  FFD9         	movff	sprintf@ap,fsr2l
  3616  0009CA  C07D  FFDA         	movff	sprintf@ap+1,fsr2h
  3617  0009CE  CFDE F08C          	movff	postinc2,sprintf@fval
  3618  0009D2  CFDE F08D          	movff	postinc2,sprintf@fval+1
  3619  0009D6  CFDD F08E          	movff	postdec2,sprintf@fval+2
  3620                           
  3621                           ; BSR set to: 0
  3622  0009DA  0E03               	movlw	3
  3623  0009DC  0100               	movlb	0	; () banked
  3624  0009DE  277C               	addwf	sprintf@ap& (0+255),f,b
  3625  0009E0  0E00               	movlw	0
  3626  0009E2  237D               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3627                           
  3628                           ; BSR set to: 0
  3629                           ;doprnt.c: 831: if(fval < 0.0) {
  3630  0009E4  0100               	movlb	0	; () banked
  3631  0009E6  AF8E               	btfss	(sprintf@fval+2)& (0+255),7,b
  3632  0009E8  D011               	goto	l4424
  3633                           
  3634                           ; BSR set to: 0
  3635                           ;doprnt.c: 832: fval = -fval;
  3636  0009EA  C08C  F033         	movff	sprintf@fval,___ftneg@f1
  3637  0009EE  C08D  F034         	movff	sprintf@fval+1,___ftneg@f1+1
  3638  0009F2  C08E  F035         	movff	sprintf@fval+2,___ftneg@f1+2
  3639  0009F6  EC68  F019         	call	___ftneg	;wreg free
  3640  0009FA  C033  F08C         	movff	?___ftneg,sprintf@fval
  3641  0009FE  C034  F08D         	movff	?___ftneg+1,sprintf@fval+1
  3642  000A02  C035  F08E         	movff	?___ftneg+2,sprintf@fval+2
  3643                           
  3644                           ;doprnt.c: 833: flag |= 0x03;
  3645  000A06  0E03               	movlw	3
  3646  000A08  0100               	movlb	0	; () banked
  3647  000A0A  137E               	iorwf	sprintf@flag& (0+255),f,b
  3648  000A0C                     l4424:
  3649                           
  3650                           ; BSR set to: 0
  3651                           ;doprnt.c: 834: }
  3652                           ;doprnt.c: 835: exp = 0;
  3653  000A0C  0E00               	movlw	0
  3654  000A0E  0100               	movlb	0	; () banked
  3655  000A10  6F81               	movwf	(sprintf@exp+1)& (0+255),b
  3656  000A12  0E00               	movlw	0
  3657  000A14  6F80               	movwf	sprintf@exp& (0+255),b
  3658                           
  3659                           ; BSR set to: 0
  3660                           ;doprnt.c: 836: if( fval!=0) {
  3661  000A16  0100               	movlb	0	; () banked
  3662  000A18  518C               	movf	sprintf@fval& (0+255),w,b
  3663  000A1A  0100               	movlb	0	; () banked
  3664  000A1C  118D               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3665  000A1E  0100               	movlb	0	; () banked
  3666  000A20  118E               	iorwf	(sprintf@fval+2)& (0+255),w,b
  3667  000A22  B4D8               	btfsc	status,2,c
  3668  000A24  D091               	goto	l4452
  3669                           
  3670                           ; BSR set to: 0
  3671                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3672  000A26  0E82               	movlw	130
  3673  000A28  0100               	movlb	0	; () banked
  3674  000A2A  6F73               	movwf	??_sprintf& (0+255),b
  3675  000A2C  0EFF               	movlw	255
  3676  000A2E  0100               	movlb	0	; () banked
  3677  000A30  6F74               	movwf	(??_sprintf+1)& (0+255),b
  3678  000A32  C08C  F075         	movff	sprintf@fval,??_sprintf+2
  3679  000A36  C08D  F076         	movff	sprintf@fval+1,??_sprintf+3
  3680  000A3A  C08E  F077         	movff	sprintf@fval+2,??_sprintf+4
  3681  000A3E  C08F  F078         	movff	sprintf@fval+3,??_sprintf+5
  3682  000A42  0E10               	movlw	16
  3683  000A44  D006               	goto	u5180
  3684  000A46                     u5185:
  3685  000A46  0100               	movlb	0	; () banked
  3686  000A48  90D8               	bcf	status,0,c
  3687  000A4A  3378               	rrcf	(??_sprintf+5)& (0+255),f,b
  3688  000A4C  3377               	rrcf	(??_sprintf+4)& (0+255),f,b
  3689  000A4E  3376               	rrcf	(??_sprintf+3)& (0+255),f,b
  3690  000A50  3375               	rrcf	(??_sprintf+2)& (0+255),f,b
  3691  000A52                     u5180:
  3692  000A52  2EE8               	decfsz	wreg,f,c
  3693  000A54  D7F8               	goto	u5185
  3694  000A56  0100               	movlb	0	; () banked
  3695  000A58  5175               	movf	(??_sprintf+2)& (0+255),w,b
  3696  000A5A  0100               	movlb	0	; () banked
  3697  000A5C  2573               	addwf	??_sprintf& (0+255),w,b
  3698  000A5E  0100               	movlb	0	; () banked
  3699  000A60  6F80               	movwf	sprintf@exp& (0+255),b
  3700  000A62  0E00               	movlw	0
  3701  000A64  0100               	movlb	0	; () banked
  3702  000A66  2174               	addwfc	(??_sprintf+1)& (0+255),w,b
  3703  000A68  0100               	movlb	0	; () banked
  3704  000A6A  6F81               	movwf	(sprintf@exp+1)& (0+255),b
  3705                           
  3706                           ; BSR set to: 0
  3707                           ;doprnt.c: 838: exp--;
  3708  000A6C  0100               	movlb	0	; () banked
  3709  000A6E  0780               	decf	sprintf@exp& (0+255),f,b
  3710  000A70  A0D8               	btfss	status,0,c
  3711  000A72  0781               	decf	(sprintf@exp+1)& (0+255),f,b
  3712                           
  3713                           ; BSR set to: 0
  3714                           ;doprnt.c: 839: exp *= 3;
  3715  000A74  C080  F01E         	movff	sprintf@exp,___wmul@multiplier
  3716  000A78  C081  F01F         	movff	sprintf@exp+1,___wmul@multiplier+1
  3717  000A7C  0E00               	movlw	0
  3718  000A7E  6E21               	movwf	___wmul@multiplicand+1,c
  3719  000A80  0E03               	movlw	3
  3720  000A82  6E20               	movwf	___wmul@multiplicand,c
  3721  000A84  EC55  F019         	call	___wmul	;wreg free
  3722  000A88  C01E  F080         	movff	?___wmul,sprintf@exp
  3723  000A8C  C01F  F081         	movff	?___wmul+1,sprintf@exp+1
  3724                           
  3725                           ;doprnt.c: 840: exp /= 10;
  3726  000A90  C080  F016         	movff	sprintf@exp,___awdiv@dividend
  3727  000A94  C081  F017         	movff	sprintf@exp+1,___awdiv@dividend+1
  3728  000A98  0E00               	movlw	0
  3729  000A9A  6E19               	movwf	___awdiv@divisor+1,c
  3730  000A9C  0E0A               	movlw	10
  3731  000A9E  6E18               	movwf	___awdiv@divisor,c
  3732  000AA0  EC46  F016         	call	___awdiv	;wreg free
  3733  000AA4  C016  F080         	movff	?___awdiv,sprintf@exp
  3734  000AA8  C017  F081         	movff	?___awdiv+1,sprintf@exp+1
  3735                           
  3736                           ;doprnt.c: 841: if(exp < 0)
  3737  000AAC  0100               	movlb	0	; () banked
  3738  000AAE  AF81               	btfss	(sprintf@exp+1)& (0+255),7,b
  3739  000AB0  D004               	goto	l4440
  3740                           
  3741                           ; BSR set to: 0
  3742                           ;doprnt.c: 842: exp--;
  3743  000AB2  0100               	movlb	0	; () banked
  3744  000AB4  0780               	decf	sprintf@exp& (0+255),f,b
  3745  000AB6  A0D8               	btfss	status,0,c
  3746  000AB8  0781               	decf	(sprintf@exp+1)& (0+255),f,b
  3747  000ABA                     l4440:
  3748                           
  3749                           ; BSR set to: 0
  3750                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  3751  000ABA  0100               	movlb	0	; () banked
  3752  000ABC  5180               	movf	sprintf@exp& (0+255),w,b
  3753  000ABE  0800               	sublw	0
  3754  000AC0  ECF7  F008         	call	_scale
  3755  000AC4  C033  F082         	movff	?_scale,sprintf@tmpval
  3756  000AC8  C034  F083         	movff	?_scale+1,sprintf@tmpval+1
  3757  000ACC  C035  F084         	movff	?_scale+2,sprintf@tmpval+2
  3758                           
  3759                           ;doprnt.c: 847: tmpval.integ *= fval;
  3760  000AD0  C082  F024         	movff	sprintf@tmpval,___ftmul@f1
  3761  000AD4  C083  F025         	movff	sprintf@tmpval+1,___ftmul@f1+1
  3762  000AD8  C084  F026         	movff	sprintf@tmpval+2,___ftmul@f1+2
  3763  000ADC  C08C  F027         	movff	sprintf@fval,___ftmul@f2
  3764  000AE0  C08D  F028         	movff	sprintf@fval+1,___ftmul@f2+1
  3765  000AE4  C08E  F029         	movff	sprintf@fval+2,___ftmul@f2+2
  3766  000AE8  ECDA  F013         	call	___ftmul	;wreg free
  3767  000AEC  C024  F082         	movff	?___ftmul,sprintf@tmpval
  3768  000AF0  C025  F083         	movff	?___ftmul+1,sprintf@tmpval+1
  3769  000AF4  C026  F084         	movff	?___ftmul+2,sprintf@tmpval+2
  3770                           
  3771                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  3772  000AF8  C082  F010         	movff	sprintf@tmpval,___ftge@ff1
  3773  000AFC  C083  F011         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3774  000B00  C084  F012         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3775  000B04  0E00               	movlw	0
  3776  000B06  6E13               	movwf	___ftge@ff2,c
  3777  000B08  0E80               	movlw	128
  3778  000B0A  6E14               	movwf	___ftge@ff2+1,c
  3779  000B0C  0E3F               	movlw	63
  3780  000B0E  6E15               	movwf	___ftge@ff2+2,c
  3781  000B10  ECBC  F015         	call	___ftge	;wreg free
  3782  000B14  B0D8               	btfsc	status,0,c
  3783  000B16  D005               	goto	l4448
  3784                           
  3785                           ;doprnt.c: 849: exp--;
  3786  000B18  0100               	movlb	0	; () banked
  3787  000B1A  0780               	decf	sprintf@exp& (0+255),f,b
  3788  000B1C  A0D8               	btfss	status,0,c
  3789  000B1E  0781               	decf	(sprintf@exp+1)& (0+255),f,b
  3790  000B20  D013               	goto	l4452
  3791  000B22                     l4448:
  3792                           
  3793                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  3794  000B22  C082  F010         	movff	sprintf@tmpval,___ftge@ff1
  3795  000B26  C083  F011         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3796  000B2A  C084  F012         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3797  000B2E  0E00               	movlw	0
  3798  000B30  6E13               	movwf	___ftge@ff2,c
  3799  000B32  0E20               	movlw	32
  3800  000B34  6E14               	movwf	___ftge@ff2+1,c
  3801  000B36  0E41               	movlw	65
  3802  000B38  6E15               	movwf	___ftge@ff2+2,c
  3803  000B3A  ECBC  F015         	call	___ftge	;wreg free
  3804  000B3E  A0D8               	btfss	status,0,c
  3805  000B40  D003               	goto	l4452
  3806                           
  3807                           ;doprnt.c: 851: exp++;
  3808  000B42  0100               	movlb	0	; () banked
  3809  000B44  4B80               	infsnz	sprintf@exp& (0+255),f,b
  3810  000B46  2B81               	incf	(sprintf@exp+1)& (0+255),f,b
  3811  000B48                     l4452:
  3812                           
  3813                           ;doprnt.c: 852: }
  3814                           ;doprnt.c: 1112: if(prec <= 12)
  3815  000B48  0100               	movlb	0	; () banked
  3816  000B4A  BF8B               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3817  000B4C  D008               	goto	l4454
  3818  000B4E  0100               	movlb	0	; () banked
  3819  000B50  518B               	movf	(sprintf@prec+1)& (0+255),w,b
  3820  000B52  E11D               	bnz	l4456
  3821  000B54  0E0D               	movlw	13
  3822  000B56  0100               	movlb	0	; () banked
  3823  000B58  5D8A               	subwf	sprintf@prec& (0+255),w,b
  3824  000B5A  B0D8               	btfsc	status,0,c
  3825  000B5C  D018               	goto	l4456
  3826  000B5E                     l4454:
  3827                           
  3828                           ; BSR set to: 0
  3829                           ;doprnt.c: 1113: fval += fround(prec);
  3830  000B5E  C08C  F03D         	movff	sprintf@fval,___ftadd@f1
  3831  000B62  C08D  F03E         	movff	sprintf@fval+1,___ftadd@f1+1
  3832  000B66  C08E  F03F         	movff	sprintf@fval+2,___ftadd@f1+2
  3833  000B6A  0100               	movlb	0	; () banked
  3834  000B6C  518A               	movf	sprintf@prec& (0+255),w,b
  3835  000B6E  ECCA  F00C         	call	_fround
  3836  000B72  C033  F040         	movff	?_fround,___ftadd@f2
  3837  000B76  C034  F041         	movff	?_fround+1,___ftadd@f2+1
  3838  000B7A  C035  F042         	movff	?_fround+2,___ftadd@f2+2
  3839  000B7E  ECF6  F00E         	call	___ftadd	;wreg free
  3840  000B82  C03D  F08C         	movff	?___ftadd,sprintf@fval
  3841  000B86  C03E  F08D         	movff	?___ftadd+1,sprintf@fval+1
  3842  000B8A  C03F  F08E         	movff	?___ftadd+2,sprintf@fval+2
  3843  000B8E                     l4456:
  3844                           
  3845                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3846  000B8E  0100               	movlb	0	; () banked
  3847  000B90  BF81               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3848  000B92  D008               	goto	l4458
  3849  000B94  0100               	movlb	0	; () banked
  3850  000B96  5181               	movf	(sprintf@exp+1)& (0+255),w,b
  3851  000B98  E126               	bnz	l4464
  3852  000B9A  0E0A               	movlw	10
  3853  000B9C  0100               	movlb	0	; () banked
  3854  000B9E  5D80               	subwf	sprintf@exp& (0+255),w,b
  3855  000BA0  B0D8               	btfsc	status,0,c
  3856  000BA2  D021               	goto	l4464
  3857  000BA4                     l4458:
  3858                           
  3859                           ; BSR set to: 0
  3860  000BA4  0100               	movlb	0	; () banked
  3861  000BA6  518C               	movf	sprintf@fval& (0+255),w,b
  3862  000BA8  0100               	movlb	0	; () banked
  3863  000BAA  118D               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3864  000BAC  0100               	movlb	0	; () banked
  3865  000BAE  118E               	iorwf	(sprintf@fval+2)& (0+255),w,b
  3866  000BB0  B4D8               	btfsc	status,2,c
  3867  000BB2  D05B               	goto	l4478
  3868                           
  3869                           ; BSR set to: 0
  3870  000BB4  C08C  F03A         	movff	sprintf@fval,___fttol@f1
  3871  000BB8  C08D  F03B         	movff	sprintf@fval+1,___fttol@f1+1
  3872  000BBC  C08E  F03C         	movff	sprintf@fval+2,___fttol@f1+2
  3873  000BC0  ECBD  F011         	call	___fttol	;wreg free
  3874  000BC4  503A               	movf	?___fttol,w,c
  3875  000BC6  103B               	iorwf	?___fttol+1,w,c
  3876  000BC8  103C               	iorwf	?___fttol+2,w,c
  3877  000BCA  103D               	iorwf	?___fttol+3,w,c
  3878  000BCC  A4D8               	btfss	status,2,c
  3879  000BCE  D04D               	goto	l4478
  3880  000BD0  0100               	movlb	0	; () banked
  3881  000BD2  BF81               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3882  000BD4  D04A               	goto	l4478
  3883  000BD6  0100               	movlb	0	; () banked
  3884  000BD8  5181               	movf	(sprintf@exp+1)& (0+255),w,b
  3885  000BDA  E105               	bnz	l4464
  3886  000BDC  0E02               	movlw	2
  3887  000BDE  0100               	movlb	0	; () banked
  3888  000BE0  5D80               	subwf	sprintf@exp& (0+255),w,b
  3889  000BE2  A0D8               	btfss	status,0,c
  3890  000BE4  D042               	goto	l4478
  3891  000BE6                     l4464:
  3892                           
  3893                           ; BSR set to: 0
  3894                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3895  000BE6  C082  F010         	movff	sprintf@tmpval,___ftge@ff1
  3896  000BEA  C083  F011         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3897  000BEE  C084  F012         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3898  000BF2  0E70               	movlw	112
  3899  000BF4  6E13               	movwf	___ftge@ff2,c
  3900  000BF6  0E89               	movlw	137
  3901  000BF8  6E14               	movwf	___ftge@ff2+1,c
  3902  000BFA  0E40               	movlw	64
  3903  000BFC  6E15               	movwf	___ftge@ff2+2,c
  3904  000BFE  ECBC  F015         	call	___ftge	;wreg free
  3905  000C02  B0D8               	btfsc	status,0,c
  3906  000C04  D003               	goto	l4468
  3907                           
  3908                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3909  000C06  0100               	movlb	0	; () banked
  3910  000C08  0EF7               	movlw	247
  3911  000C0A  D002               	goto	L1
  3912  000C0C                     l4468:
  3913                           
  3914                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3915  000C0C  0100               	movlb	0	; () banked
  3916  000C0E  0EF8               	movlw	248
  3917  000C10                     L1:
  3918  000C10  2780               	addwf	sprintf@exp& (0+255),f,b
  3919  000C12  0EFF               	movlw	255
  3920  000C14  2381               	addwfc	(sprintf@exp+1)& (0+255),f,b
  3921                           
  3922                           ; BSR set to: 0
  3923                           ;doprnt.c: 1124: }
  3924                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  3925                           
  3926                           ; BSR set to: 0
  3927  000C16  0100               	movlb	0	; () banked
  3928  000C18  5180               	movf	sprintf@exp& (0+255),w,b
  3929  000C1A  ECF7  F008         	call	_scale
  3930  000C1E  C033  F082         	movff	?_scale,sprintf@tmpval
  3931  000C22  C034  F083         	movff	?_scale+1,sprintf@tmpval+1
  3932  000C26  C035  F084         	movff	?_scale+2,sprintf@tmpval+2
  3933                           
  3934                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3935  000C2A  C08C  F010         	movff	sprintf@fval,__tdiv_to_l_@f1
  3936  000C2E  C08D  F011         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  3937  000C32  C08E  F012         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  3938  000C36  C082  F013         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  3939  000C3A  C083  F014         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  3940  000C3E  C084  F015         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  3941  000C42  EC90  F010         	call	__tdiv_to_l_	;wreg free
  3942  000C46  C010  F086         	movff	?__tdiv_to_l_,sprintf@val
  3943  000C4A  C011  F087         	movff	?__tdiv_to_l_+1,sprintf@val+1
  3944  000C4E  C012  F088         	movff	?__tdiv_to_l_+2,sprintf@val+2
  3945  000C52  C013  F089         	movff	?__tdiv_to_l_+3,sprintf@val+3
  3946                           
  3947                           ;doprnt.c: 1129: fval = 0.0;
  3948  000C56  0E00               	movlw	0
  3949  000C58  0100               	movlb	0	; () banked
  3950  000C5A  6F8C               	movwf	sprintf@fval& (0+255),b
  3951  000C5C  0E00               	movlw	0
  3952  000C5E  0100               	movlb	0	; () banked
  3953  000C60  6F8D               	movwf	(sprintf@fval+1)& (0+255),b
  3954  000C62  0E00               	movlw	0
  3955  000C64  0100               	movlb	0	; () banked
  3956  000C66  6F8E               	movwf	(sprintf@fval+2)& (0+255),b
  3957                           
  3958                           ;doprnt.c: 1130: } else {
  3959  000C68  D033               	goto	l4482
  3960  000C6A                     l4478:
  3961                           
  3962                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3963  000C6A  C08C  F03A         	movff	sprintf@fval,___fttol@f1
  3964  000C6E  C08D  F03B         	movff	sprintf@fval+1,___fttol@f1+1
  3965  000C72  C08E  F03C         	movff	sprintf@fval+2,___fttol@f1+2
  3966  000C76  ECBD  F011         	call	___fttol	;wreg free
  3967  000C7A  C03A  F086         	movff	?___fttol,sprintf@val
  3968  000C7E  C03B  F087         	movff	?___fttol+1,sprintf@val+1
  3969  000C82  C03C  F088         	movff	?___fttol+2,sprintf@val+2
  3970  000C86  C03D  F089         	movff	?___fttol+3,sprintf@val+3
  3971                           
  3972                           ;doprnt.c: 1132: fval -= (double)val;
  3973  000C8A  C08C  F063         	movff	sprintf@fval,___ftsub@f1
  3974  000C8E  C08D  F064         	movff	sprintf@fval+1,___ftsub@f1+1
  3975  000C92  C08E  F065         	movff	sprintf@fval+2,___ftsub@f1+2
  3976  000C96  C086  F018         	movff	sprintf@val,___lltoft@c
  3977  000C9A  C087  F019         	movff	sprintf@val+1,___lltoft@c+1
  3978  000C9E  C088  F01A         	movff	sprintf@val+2,___lltoft@c+2
  3979  000CA2  C089  F01B         	movff	sprintf@val+3,___lltoft@c+3
  3980  000CA6  ECE6  F017         	call	___lltoft	;wreg free
  3981  000CAA  C018  F066         	movff	?___lltoft,___ftsub@f2
  3982  000CAE  C019  F067         	movff	?___lltoft+1,___ftsub@f2+1
  3983  000CB2  C01A  F068         	movff	?___lltoft+2,___ftsub@f2+2
  3984  000CB6  EC96  F018         	call	___ftsub	;wreg free
  3985  000CBA  C063  F08C         	movff	?___ftsub,sprintf@fval
  3986  000CBE  C064  F08D         	movff	?___ftsub+1,sprintf@fval+1
  3987  000CC2  C065  F08E         	movff	?___ftsub+2,sprintf@fval+2
  3988                           
  3989                           ;doprnt.c: 1133: exp = 0;
  3990  000CC6  0E00               	movlw	0
  3991  000CC8  0100               	movlb	0	; () banked
  3992  000CCA  6F81               	movwf	(sprintf@exp+1)& (0+255),b
  3993  000CCC  0E00               	movlw	0
  3994  000CCE  6F80               	movwf	sprintf@exp& (0+255),b
  3995  000CD0                     l4482:
  3996                           
  3997                           ; BSR set to: 0
  3998                           ;doprnt.c: 1134: }
  3999                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  4000  000CD0  0E01               	movlw	1
  4001  000CD2  0100               	movlb	0	; () banked
  4002  000CD4  6F8F               	movwf	sprintf@c& (0+255),b
  4003  000CD6                     l4484:
  4004                           
  4005                           ; BSR set to: 0
  4006  000CD6  0E0A               	movlw	10
  4007  000CD8  0100               	movlb	0	; () banked
  4008  000CDA  198F               	xorwf	sprintf@c& (0+255),w,b
  4009  000CDC  B4D8               	btfsc	status,2,c
  4010  000CDE  D01E               	goto	l4496
  4011                           
  4012                           ; BSR set to: 0
  4013                           ;doprnt.c: 1137: if(val < dpowers[c])
  4014                           
  4015                           ; BSR set to: 0
  4016                           
  4017                           ; BSR set to: 0
  4018  000CE0  0100               	movlb	0	; () banked
  4019  000CE2  518F               	movf	sprintf@c& (0+255),w,b
  4020  000CE4  0D04               	mullw	4
  4021  000CE6  0E01               	movlw	low _dpowers
  4022  000CE8  24F3               	addwf	prodl,w,c
  4023  000CEA  6EF6               	movwf	tblptrl,c
  4024  000CEC  0E08               	movlw	high _dpowers
  4025  000CEE  20F4               	addwfc	prodh,w,c
  4026  000CF0  6EF7               	movwf	tblptrh,c
  4027  000CF2                     	if	0	;There are less than 3 active tblptr bytes
  4028  000CF2                     	endif
  4029  000CF2  0009               	tblrd		*+
  4030  000CF4  50F5               	movf	tablat,w,c
  4031  000CF6  0100               	movlb	0	; () banked
  4032  000CF8  5D86               	subwf	sprintf@val& (0+255),w,b
  4033  000CFA  0009               	tblrd		*+
  4034  000CFC  50F5               	movf	tablat,w,c
  4035  000CFE  0100               	movlb	0	; () banked
  4036  000D00  5987               	subwfb	(sprintf@val+1)& (0+255),w,b
  4037  000D02  0009               	tblrd		*+
  4038  000D04  50F5               	movf	tablat,w,c
  4039  000D06  0100               	movlb	0	; () banked
  4040  000D08  5988               	subwfb	(sprintf@val+2)& (0+255),w,b
  4041  000D0A  0009               	tblrd		*+
  4042  000D0C  50F5               	movf	tablat,w,c
  4043  000D0E  0100               	movlb	0	; () banked
  4044  000D10  5989               	subwfb	(sprintf@val+3)& (0+255),w,b
  4045  000D12  A0D8               	btfss	status,0,c
  4046  000D14  D003               	goto	l4496
  4047                           
  4048                           ; BSR set to: 0
  4049                           
  4050                           ; BSR set to: 0
  4051                           
  4052                           ; BSR set to: 0
  4053                           ;doprnt.c: 1138: break;
  4054  000D16  0100               	movlb	0	; () banked
  4055  000D18  2B8F               	incf	sprintf@c& (0+255),f,b
  4056  000D1A  D7DD               	goto	l4484
  4057  000D1C                     l4496:
  4058                           
  4059                           ; BSR set to: 0
  4060                           ;doprnt.c: 1175: {
  4061                           ;doprnt.c: 1188: if(flag & 0x03)
  4062  000D1C  0E03               	movlw	3
  4063  000D1E  0100               	movlb	0	; () banked
  4064  000D20  157E               	andwf	sprintf@flag& (0+255),w,b
  4065  000D22  0100               	movlb	0	; () banked
  4066  000D24  6F73               	movwf	??_sprintf& (0+255),b
  4067  000D26  0E00               	movlw	0
  4068  000D28  0100               	movlb	0	; () banked
  4069  000D2A  157F               	andwf	(sprintf@flag+1)& (0+255),w,b
  4070  000D2C  0100               	movlb	0	; () banked
  4071  000D2E  6F74               	movwf	(??_sprintf+1)& (0+255),b
  4072  000D30  0100               	movlb	0	; () banked
  4073  000D32  5173               	movf	??_sprintf& (0+255),w,b
  4074  000D34  0100               	movlb	0	; () banked
  4075  000D36  1174               	iorwf	(??_sprintf+1)& (0+255),w,b
  4076  000D38  B4D8               	btfsc	status,2,c
  4077  000D3A  D054               	goto	l4510
  4078                           
  4079                           ; BSR set to: 0
  4080                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  4081  000D3C  C069  FFD9         	movff	sprintf@sp,fsr2l
  4082  000D40  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  4083  000D44  0E2D               	movlw	45
  4084  000D46  D04C               	goto	L2
  4085  000D48                     l4500:
  4086                           
  4087                           ; BSR set to: 0
  4088  000D48  0100               	movlb	0	; () banked
  4089  000D4A  4B69               	infsnz	sprintf@sp& (0+255),f,b
  4090  000D4C  2B6A               	incf	(sprintf@sp+1)& (0+255),f,b
  4091                           
  4092                           ; BSR set to: 0
  4093                           ;doprnt.c: 1195: }
  4094                           ;doprnt.c: 1196: while(c--) {
  4095  000D4E  D04A               	goto	l4510
  4096  000D50                     l4502:
  4097                           
  4098                           ; BSR set to: 0
  4099                           ;doprnt.c: 1200: {
  4100                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  4101  000D50  C086  F019         	movff	sprintf@val,___lldiv@dividend
  4102  000D54  C087  F01A         	movff	sprintf@val+1,___lldiv@dividend+1
  4103  000D58  C088  F01B         	movff	sprintf@val+2,___lldiv@dividend+2
  4104  000D5C  C089  F01C         	movff	sprintf@val+3,___lldiv@dividend+3
  4105  000D60  0100               	movlb	0	; () banked
  4106  000D62  518F               	movf	sprintf@c& (0+255),w,b
  4107  000D64  0D04               	mullw	4
  4108  000D66  0E01               	movlw	low _dpowers
  4109  000D68  24F3               	addwf	prodl,w,c
  4110  000D6A  6EF6               	movwf	tblptrl,c
  4111  000D6C  0E08               	movlw	high _dpowers
  4112  000D6E  20F4               	addwfc	prodh,w,c
  4113  000D70  6EF7               	movwf	tblptrh,c
  4114  000D72                     	if	0	;There are less than 3 active tblptr bytes
  4115  000D72                     	endif
  4116  000D72  0009               	tblrd		*+
  4117  000D74  CFF5 F01D          	movff	tablat,___lldiv@divisor
  4118  000D78  0009               	tblrd		*+
  4119  000D7A  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  4120  000D7E  0009               	tblrd		*+
  4121  000D80  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  4122  000D84  000A               	tblrd		*-
  4123  000D86  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  4124  000D8A  EC88  F016         	call	___lldiv	;wreg free
  4125  000D8E  C019  F082         	movff	?___lldiv,sprintf@tmpval
  4126  000D92  C01A  F083         	movff	?___lldiv+1,sprintf@tmpval+1
  4127  000D96  C01B  F084         	movff	?___lldiv+2,sprintf@tmpval+2
  4128  000D9A  C01C  F085         	movff	?___lldiv+3,sprintf@tmpval+3
  4129                           
  4130                           ;doprnt.c: 1202: tmpval.vd %= 10;
  4131  000D9E  C082  F010         	movff	sprintf@tmpval,___llmod@dividend
  4132  000DA2  C083  F011         	movff	sprintf@tmpval+1,___llmod@dividend+1
  4133  000DA6  C084  F012         	movff	sprintf@tmpval+2,___llmod@dividend+2
  4134  000DAA  C085  F013         	movff	sprintf@tmpval+3,___llmod@dividend+3
  4135  000DAE  0E0A               	movlw	10
  4136  000DB0  6E14               	movwf	___llmod@divisor,c
  4137  000DB2  0E00               	movlw	0
  4138  000DB4  6E15               	movwf	___llmod@divisor+1,c
  4139  000DB6  0E00               	movlw	0
  4140  000DB8  6E16               	movwf	___llmod@divisor+2,c
  4141  000DBA  0E00               	movlw	0
  4142  000DBC  6E17               	movwf	___llmod@divisor+3,c
  4143  000DBE  ECB3  F017         	call	___llmod	;wreg free
  4144  000DC2  C010  F082         	movff	?___llmod,sprintf@tmpval
  4145  000DC6  C011  F083         	movff	?___llmod+1,sprintf@tmpval+1
  4146  000DCA  C012  F084         	movff	?___llmod+2,sprintf@tmpval+2
  4147  000DCE  C013  F085         	movff	?___llmod+3,sprintf@tmpval+3
  4148                           
  4149                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  4150  000DD2  0100               	movlb	0	; () banked
  4151  000DD4  5182               	movf	sprintf@tmpval& (0+255),w,b
  4152  000DD6  0F30               	addlw	48
  4153  000DD8  C069  FFD9         	movff	sprintf@sp,fsr2l
  4154  000DDC  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  4155  000DE0                     L2:
  4156  000DE0  6EDF               	movwf	indf2,c
  4157  000DE2  D7B2               	goto	l4500
  4158  000DE4                     l4510:
  4159                           
  4160                           ; BSR set to: 0
  4161  000DE4  0100               	movlb	0	; () banked
  4162  000DE6  078F               	decf	sprintf@c& (0+255),f,b
  4163  000DE8  0100               	movlb	0	; () banked
  4164  000DEA  298F               	incf	sprintf@c& (0+255),w,b
  4165  000DEC  B4D8               	btfsc	status,2,c
  4166  000DEE  D00E               	goto	l4518
  4167  000DF0  D7AF               	goto	l4502
  4168  000DF2                     l4512:
  4169                           
  4170                           ; BSR set to: 0
  4171                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  4172  000DF2  C069  FFD9         	movff	sprintf@sp,fsr2l
  4173  000DF6  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  4174  000DFA  0E30               	movlw	48
  4175  000DFC  6EDF               	movwf	indf2,c
  4176                           
  4177                           ; BSR set to: 0
  4178  000DFE  0100               	movlb	0	; () banked
  4179  000E00  4B69               	infsnz	sprintf@sp& (0+255),f,b
  4180  000E02  2B6A               	incf	(sprintf@sp+1)& (0+255),f,b
  4181                           
  4182                           ; BSR set to: 0
  4183                           ;doprnt.c: 1209: exp--;
  4184  000E04  0100               	movlb	0	; () banked
  4185  000E06  0780               	decf	sprintf@exp& (0+255),f,b
  4186  000E08  A0D8               	btfss	status,0,c
  4187  000E0A  0781               	decf	(sprintf@exp+1)& (0+255),f,b
  4188  000E0C                     l4518:
  4189                           
  4190                           ; BSR set to: 0
  4191  000E0C  0100               	movlb	0	; () banked
  4192  000E0E  BF81               	btfsc	(sprintf@exp+1)& (0+255),7,b
  4193  000E10  D007               	goto	l4520
  4194  000E12  0100               	movlb	0	; () banked
  4195  000E14  5181               	movf	(sprintf@exp+1)& (0+255),w,b
  4196  000E16  E1ED               	bnz	l4512
  4197  000E18  0100               	movlb	0	; () banked
  4198  000E1A  0580               	decf	sprintf@exp& (0+255),w,b
  4199  000E1C  B0D8               	btfsc	status,0,c
  4200  000E1E  D7E9               	goto	l4512
  4201  000E20                     l4520:
  4202                           
  4203                           ; BSR set to: 0
  4204                           ;doprnt.c: 1210: }
  4205                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  4206  000E20  0100               	movlb	0	; () banked
  4207  000E22  BF8B               	btfsc	(sprintf@prec+1)& (0+255),7,b
  4208  000E24  D00C               	goto	l293
  4209  000E26  0100               	movlb	0	; () banked
  4210  000E28  518B               	movf	(sprintf@prec+1)& (0+255),w,b
  4211  000E2A  E105               	bnz	u5340
  4212  000E2C  0E09               	movlw	9
  4213  000E2E  0100               	movlb	0	; () banked
  4214  000E30  5D8A               	subwf	sprintf@prec& (0+255),w,b
  4215  000E32  A0D8               	btfss	status,0,c
  4216  000E34  D004               	goto	l293
  4217  000E36                     u5340:
  4218                           
  4219                           ; BSR set to: 0
  4220                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  4221  000E36  0E08               	movlw	8
  4222  000E38  0100               	movlb	0	; () banked
  4223  000E3A  6F8F               	movwf	sprintf@c& (0+255),b
  4224  000E3C  D002               	goto	l4524
  4225  000E3E                     l293:
  4226                           
  4227                           ; BSR set to: 0
  4228                           ;doprnt.c: 1213: else
  4229                           ;doprnt.c: 1214: c = prec;
  4230  000E3E  C08A  F08F         	movff	sprintf@prec,sprintf@c
  4231  000E42                     l4524:
  4232                           
  4233                           ; BSR set to: 0
  4234                           ;doprnt.c: 1215: prec -= c;
  4235  000E42  0100               	movlb	0	; () banked
  4236  000E44  518F               	movf	sprintf@c& (0+255),w,b
  4237  000E46  0100               	movlb	0	; () banked
  4238  000E48  5F8A               	subwf	sprintf@prec& (0+255),f,b
  4239  000E4A  0E00               	movlw	0
  4240  000E4C  0100               	movlb	0	; () banked
  4241  000E4E  BF8F               	btfsc	sprintf@c& (0+255),7,b
  4242  000E50  0EFF               	movlw	255
  4243  000E52  0100               	movlb	0	; () banked
  4244  000E54  5B8B               	subwfb	(sprintf@prec+1)& (0+255),f,b
  4245                           
  4246                           ; BSR set to: 0
  4247                           ;doprnt.c: 1219: if(c)
  4248  000E56  0100               	movlb	0	; () banked
  4249  000E58  518F               	movf	sprintf@c& (0+255),w,b
  4250  000E5A  0100               	movlb	0	; () banked
  4251  000E5C  B4D8               	btfsc	status,2,c
  4252  000E5E  D009               	goto	l4532
  4253                           
  4254                           ; BSR set to: 0
  4255                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  4256  000E60  C069  FFD9         	movff	sprintf@sp,fsr2l
  4257  000E64  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  4258  000E68  0E2E               	movlw	46
  4259  000E6A  6EDF               	movwf	indf2,c
  4260                           
  4261                           ; BSR set to: 0
  4262  000E6C  0100               	movlb	0	; () banked
  4263  000E6E  4B69               	infsnz	sprintf@sp& (0+255),f,b
  4264  000E70  2B6A               	incf	(sprintf@sp+1)& (0+255),f,b
  4265  000E72                     l4532:
  4266                           
  4267                           ; BSR set to: 0
  4268                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4269  000E72  0100               	movlb	0	; () banked
  4270  000E74  518F               	movf	sprintf@c& (0+255),w,b
  4271  000E76  ECF7  F008         	call	_scale
  4272  000E7A  C033  F079         	movff	?_scale,_sprintf$1063
  4273  000E7E  C034  F07A         	movff	?_scale+1,_sprintf$1063+1
  4274  000E82  C035  F07B         	movff	?_scale+2,_sprintf$1063+2
  4275                           
  4276                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4277  000E86  C08C  F027         	movff	sprintf@fval,___ftmul@f2
  4278  000E8A  C08D  F028         	movff	sprintf@fval+1,___ftmul@f2+1
  4279  000E8E  C08E  F029         	movff	sprintf@fval+2,___ftmul@f2+2
  4280  000E92  C079  F024         	movff	_sprintf$1063,___ftmul@f1
  4281  000E96  C07A  F025         	movff	_sprintf$1063+1,___ftmul@f1+1
  4282  000E9A  C07B  F026         	movff	_sprintf$1063+2,___ftmul@f1+2
  4283  000E9E  ECDA  F013         	call	___ftmul	;wreg free
  4284  000EA2  C024  F03A         	movff	?___ftmul,___fttol@f1
  4285  000EA6  C025  F03B         	movff	?___ftmul+1,___fttol@f1+1
  4286  000EAA  C026  F03C         	movff	?___ftmul+2,___fttol@f1+2
  4287  000EAE  ECBD  F011         	call	___fttol	;wreg free
  4288  000EB2  C03A  F086         	movff	?___fttol,sprintf@val
  4289  000EB6  C03B  F087         	movff	?___fttol+1,sprintf@val+1
  4290  000EBA  C03C  F088         	movff	?___fttol+2,sprintf@val+2
  4291  000EBE  C03D  F089         	movff	?___fttol+3,sprintf@val+3
  4292                           
  4293                           ;doprnt.c: 1228: while(c--) {
  4294  000EC2  D073               	goto	l4546
  4295  000EC4                     l4536:
  4296                           
  4297                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  4298  000EC4  C086  F019         	movff	sprintf@val,___lldiv@dividend
  4299  000EC8  C087  F01A         	movff	sprintf@val+1,___lldiv@dividend+1
  4300  000ECC  C088  F01B         	movff	sprintf@val+2,___lldiv@dividend+2
  4301  000ED0  C089  F01C         	movff	sprintf@val+3,___lldiv@dividend+3
  4302  000ED4  0100               	movlb	0	; () banked
  4303  000ED6  518F               	movf	sprintf@c& (0+255),w,b
  4304  000ED8  0D04               	mullw	4
  4305  000EDA  0E01               	movlw	low _dpowers
  4306  000EDC  24F3               	addwf	prodl,w,c
  4307  000EDE  6EF6               	movwf	tblptrl,c
  4308  000EE0  0E08               	movlw	high _dpowers
  4309  000EE2  20F4               	addwfc	prodh,w,c
  4310  000EE4  6EF7               	movwf	tblptrh,c
  4311  000EE6                     	if	0	;There are less than 3 active tblptr bytes
  4312  000EE6                     	endif
  4313  000EE6  0009               	tblrd		*+
  4314  000EE8  CFF5 F01D          	movff	tablat,___lldiv@divisor
  4315  000EEC  0009               	tblrd		*+
  4316  000EEE  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  4317  000EF2  0009               	tblrd		*+
  4318  000EF4  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  4319  000EF8  000A               	tblrd		*-
  4320  000EFA  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  4321  000EFE  EC88  F016         	call	___lldiv	;wreg free
  4322  000F02  C019  F082         	movff	?___lldiv,sprintf@tmpval
  4323  000F06  C01A  F083         	movff	?___lldiv+1,sprintf@tmpval+1
  4324  000F0A  C01B  F084         	movff	?___lldiv+2,sprintf@tmpval+2
  4325  000F0E  C01C  F085         	movff	?___lldiv+3,sprintf@tmpval+3
  4326                           
  4327                           ;doprnt.c: 1230: tmpval.vd %= 10;
  4328  000F12  C082  F010         	movff	sprintf@tmpval,___llmod@dividend
  4329  000F16  C083  F011         	movff	sprintf@tmpval+1,___llmod@dividend+1
  4330  000F1A  C084  F012         	movff	sprintf@tmpval+2,___llmod@dividend+2
  4331  000F1E  C085  F013         	movff	sprintf@tmpval+3,___llmod@dividend+3
  4332  000F22  0E0A               	movlw	10
  4333  000F24  6E14               	movwf	___llmod@divisor,c
  4334  000F26  0E00               	movlw	0
  4335  000F28  6E15               	movwf	___llmod@divisor+1,c
  4336  000F2A  0E00               	movlw	0
  4337  000F2C  6E16               	movwf	___llmod@divisor+2,c
  4338  000F2E  0E00               	movlw	0
  4339  000F30  6E17               	movwf	___llmod@divisor+3,c
  4340  000F32  ECB3  F017         	call	___llmod	;wreg free
  4341  000F36  C010  F082         	movff	?___llmod,sprintf@tmpval
  4342  000F3A  C011  F083         	movff	?___llmod+1,sprintf@tmpval+1
  4343  000F3E  C012  F084         	movff	?___llmod+2,sprintf@tmpval+2
  4344  000F42  C013  F085         	movff	?___llmod+3,sprintf@tmpval+3
  4345                           
  4346                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  4347  000F46  0100               	movlb	0	; () banked
  4348  000F48  5182               	movf	sprintf@tmpval& (0+255),w,b
  4349  000F4A  0F30               	addlw	48
  4350  000F4C  C069  FFD9         	movff	sprintf@sp,fsr2l
  4351  000F50  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  4352  000F54  6EDF               	movwf	indf2,c
  4353                           
  4354                           ; BSR set to: 0
  4355  000F56  0100               	movlb	0	; () banked
  4356  000F58  4B69               	infsnz	sprintf@sp& (0+255),f,b
  4357  000F5A  2B6A               	incf	(sprintf@sp+1)& (0+255),f,b
  4358                           
  4359                           ; BSR set to: 0
  4360                           ;doprnt.c: 1232: val %= dpowers[c];
  4361  000F5C  C086  F010         	movff	sprintf@val,___llmod@dividend
  4362  000F60  C087  F011         	movff	sprintf@val+1,___llmod@dividend+1
  4363  000F64  C088  F012         	movff	sprintf@val+2,___llmod@dividend+2
  4364  000F68  C089  F013         	movff	sprintf@val+3,___llmod@dividend+3
  4365  000F6C  0100               	movlb	0	; () banked
  4366  000F6E  518F               	movf	sprintf@c& (0+255),w,b
  4367  000F70  0D04               	mullw	4
  4368  000F72  0E01               	movlw	low _dpowers
  4369  000F74  24F3               	addwf	prodl,w,c
  4370  000F76  6EF6               	movwf	tblptrl,c
  4371  000F78  0E08               	movlw	high _dpowers
  4372  000F7A  20F4               	addwfc	prodh,w,c
  4373  000F7C  6EF7               	movwf	tblptrh,c
  4374  000F7E                     	if	0	;There are less than 3 active tblptr bytes
  4375  000F7E                     	endif
  4376  000F7E  0009               	tblrd		*+
  4377  000F80  CFF5 F014          	movff	tablat,___llmod@divisor
  4378  000F84  0009               	tblrd		*+
  4379  000F86  CFF5 F015          	movff	tablat,___llmod@divisor+1
  4380  000F8A  0009               	tblrd		*+
  4381  000F8C  CFF5 F016          	movff	tablat,___llmod@divisor+2
  4382  000F90  000A               	tblrd		*-
  4383  000F92  CFF5 F017          	movff	tablat,___llmod@divisor+3
  4384  000F96  ECB3  F017         	call	___llmod	;wreg free
  4385  000F9A  C010  F086         	movff	?___llmod,sprintf@val
  4386  000F9E  C011  F087         	movff	?___llmod+1,sprintf@val+1
  4387  000FA2  C012  F088         	movff	?___llmod+2,sprintf@val+2
  4388  000FA6  C013  F089         	movff	?___llmod+3,sprintf@val+3
  4389  000FAA                     l4546:
  4390  000FAA  0100               	movlb	0	; () banked
  4391  000FAC  078F               	decf	sprintf@c& (0+255),f,b
  4392  000FAE  0100               	movlb	0	; () banked
  4393  000FB0  298F               	incf	sprintf@c& (0+255),w,b
  4394  000FB2  B4D8               	btfsc	status,2,c
  4395  000FB4  D00E               	goto	l4554
  4396  000FB6  D786               	goto	l4536
  4397  000FB8                     l4548:
  4398                           
  4399                           ; BSR set to: 0
  4400                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  4401  000FB8  C069  FFD9         	movff	sprintf@sp,fsr2l
  4402  000FBC  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  4403  000FC0  0E30               	movlw	48
  4404  000FC2  6EDF               	movwf	indf2,c
  4405                           
  4406                           ; BSR set to: 0
  4407  000FC4  0100               	movlb	0	; () banked
  4408  000FC6  4B69               	infsnz	sprintf@sp& (0+255),f,b
  4409  000FC8  2B6A               	incf	(sprintf@sp+1)& (0+255),f,b
  4410                           
  4411                           ; BSR set to: 0
  4412                           ;doprnt.c: 1237: prec--;
  4413  000FCA  0100               	movlb	0	; () banked
  4414  000FCC  078A               	decf	sprintf@prec& (0+255),f,b
  4415  000FCE  A0D8               	btfss	status,0,c
  4416  000FD0  078B               	decf	(sprintf@prec+1)& (0+255),f,b
  4417  000FD2                     l4554:
  4418                           
  4419                           ; BSR set to: 0
  4420  000FD2  0100               	movlb	0	; () banked
  4421  000FD4  518A               	movf	sprintf@prec& (0+255),w,b
  4422  000FD6  0100               	movlb	0	; () banked
  4423  000FD8  118B               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4424  000FDA  B4D8               	btfsc	status,2,c
  4425  000FDC  D0F2               	goto	l4608
  4426  000FDE  D7EC               	goto	l4548
  4427  000FE0                     l4556:
  4428                           
  4429                           ; BSR set to: 0
  4430                           ;doprnt.c: 1246: }
  4431                           ;doprnt.c: 1253: {
  4432                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4433  000FE0  C07C  FFD9         	movff	sprintf@ap,fsr2l
  4434  000FE4  C07D  FFDA         	movff	sprintf@ap+1,fsr2h
  4435  000FE8  CFDE F086          	movff	postinc2,sprintf@val
  4436  000FEC  CFDD F087          	movff	postdec2,sprintf@val+1
  4437  000FF0  0100               	movlb	0	; () banked
  4438  000FF2  0E00               	movlw	0
  4439  000FF4  BF87               	btfsc	(sprintf@val+1)& (0+255),7,b
  4440  000FF6  0EFF               	movlw	-1
  4441  000FF8  6F88               	movwf	(sprintf@val+2)& (0+255),b
  4442  000FFA  6F89               	movwf	(sprintf@val+3)& (0+255),b
  4443                           
  4444                           ; BSR set to: 0
  4445  000FFC  0E02               	movlw	2
  4446  000FFE  0100               	movlb	0	; () banked
  4447  001000  277C               	addwf	sprintf@ap& (0+255),f,b
  4448  001002  0E00               	movlw	0
  4449  001004  237D               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4450                           
  4451                           ; BSR set to: 0
  4452                           ;doprnt.c: 1261: if((long)val < 0) {
  4453  001006  0100               	movlb	0	; () banked
  4454  001008  AF89               	btfss	(sprintf@val+3)& (0+255),7,b
  4455  00100A  D00C               	goto	l4566
  4456                           
  4457                           ; BSR set to: 0
  4458                           ;doprnt.c: 1262: flag |= 0x03;
  4459  00100C  0E03               	movlw	3
  4460  00100E  0100               	movlb	0	; () banked
  4461  001010  137E               	iorwf	sprintf@flag& (0+255),f,b
  4462                           
  4463                           ; BSR set to: 0
  4464                           ;doprnt.c: 1263: val = -val;
  4465  001012  0100               	movlb	0	; () banked
  4466  001014  1F89               	comf	(sprintf@val+3)& (0+255),f,b
  4467  001016  1F88               	comf	(sprintf@val+2)& (0+255),f,b
  4468  001018  1F87               	comf	(sprintf@val+1)& (0+255),f,b
  4469  00101A  6D86               	negf	sprintf@val& (0+255),b
  4470  00101C  0E00               	movlw	0
  4471  00101E  2387               	addwfc	(sprintf@val+1)& (0+255),f,b
  4472  001020  2388               	addwfc	(sprintf@val+2)& (0+255),f,b
  4473  001022  2389               	addwfc	(sprintf@val+3)& (0+255),f,b
  4474  001024                     l4566:
  4475                           
  4476                           ; BSR set to: 0
  4477                           ;doprnt.c: 1264: }
  4478                           ;doprnt.c: 1266: }
  4479                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  4480  001024  0100               	movlb	0	; () banked
  4481  001026  518A               	movf	sprintf@prec& (0+255),w,b
  4482  001028  0100               	movlb	0	; () banked
  4483  00102A  118B               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4484  00102C  A4D8               	btfss	status,2,c
  4485  00102E  D00D               	goto	l4572
  4486                           
  4487                           ; BSR set to: 0
  4488  001030  0100               	movlb	0	; () banked
  4489  001032  5186               	movf	sprintf@val& (0+255),w,b
  4490  001034  0100               	movlb	0	; () banked
  4491  001036  1187               	iorwf	(sprintf@val+1)& (0+255),w,b
  4492  001038  0100               	movlb	0	; () banked
  4493  00103A  1188               	iorwf	(sprintf@val+2)& (0+255),w,b
  4494  00103C  0100               	movlb	0	; () banked
  4495  00103E  1189               	iorwf	(sprintf@val+3)& (0+255),w,b
  4496  001040  A4D8               	btfss	status,2,c
  4497  001042  D003               	goto	l4572
  4498                           
  4499                           ; BSR set to: 0
  4500                           ;doprnt.c: 1291: prec++;
  4501  001044  0100               	movlb	0	; () banked
  4502  001046  4B8A               	infsnz	sprintf@prec& (0+255),f,b
  4503  001048  2B8B               	incf	(sprintf@prec+1)& (0+255),f,b
  4504  00104A                     l4572:
  4505                           
  4506                           ; BSR set to: 0
  4507                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4508  00104A  0E01               	movlw	1
  4509  00104C  0100               	movlb	0	; () banked
  4510  00104E  6F8F               	movwf	sprintf@c& (0+255),b
  4511  001050                     l4574:
  4512                           
  4513                           ; BSR set to: 0
  4514  001050  0E0A               	movlw	10
  4515  001052  0100               	movlb	0	; () banked
  4516  001054  198F               	xorwf	sprintf@c& (0+255),w,b
  4517  001056  B4D8               	btfsc	status,2,c
  4518  001058  D01E               	goto	l4586
  4519                           
  4520                           ; BSR set to: 0
  4521                           ;doprnt.c: 1306: if(val < dpowers[c])
  4522                           
  4523                           ; BSR set to: 0
  4524                           
  4525                           ; BSR set to: 0
  4526  00105A  0100               	movlb	0	; () banked
  4527  00105C  518F               	movf	sprintf@c& (0+255),w,b
  4528  00105E  0D04               	mullw	4
  4529  001060  0E01               	movlw	low _dpowers
  4530  001062  24F3               	addwf	prodl,w,c
  4531  001064  6EF6               	movwf	tblptrl,c
  4532  001066  0E08               	movlw	high _dpowers
  4533  001068  20F4               	addwfc	prodh,w,c
  4534  00106A  6EF7               	movwf	tblptrh,c
  4535  00106C                     	if	0	;There are less than 3 active tblptr bytes
  4536  00106C                     	endif
  4537  00106C  0009               	tblrd		*+
  4538  00106E  50F5               	movf	tablat,w,c
  4539  001070  0100               	movlb	0	; () banked
  4540  001072  5D86               	subwf	sprintf@val& (0+255),w,b
  4541  001074  0009               	tblrd		*+
  4542  001076  50F5               	movf	tablat,w,c
  4543  001078  0100               	movlb	0	; () banked
  4544  00107A  5987               	subwfb	(sprintf@val+1)& (0+255),w,b
  4545  00107C  0009               	tblrd		*+
  4546  00107E  50F5               	movf	tablat,w,c
  4547  001080  0100               	movlb	0	; () banked
  4548  001082  5988               	subwfb	(sprintf@val+2)& (0+255),w,b
  4549  001084  0009               	tblrd		*+
  4550  001086  50F5               	movf	tablat,w,c
  4551  001088  0100               	movlb	0	; () banked
  4552  00108A  5989               	subwfb	(sprintf@val+3)& (0+255),w,b
  4553  00108C  A0D8               	btfss	status,0,c
  4554  00108E  D003               	goto	l4586
  4555                           
  4556                           ; BSR set to: 0
  4557                           
  4558                           ; BSR set to: 0
  4559                           
  4560                           ; BSR set to: 0
  4561                           ;doprnt.c: 1307: break;
  4562  001090  0100               	movlb	0	; () banked
  4563  001092  2B8F               	incf	sprintf@c& (0+255),f,b
  4564  001094  D7DD               	goto	l4574
  4565  001096                     l4586:
  4566                           
  4567                           ; BSR set to: 0
  4568                           ;doprnt.c: 1339: if(c < prec)
  4569  001096  0E80               	movlw	128
  4570  001098  0100               	movlb	0	; () banked
  4571  00109A  BF8F               	btfsc	sprintf@c& (0+255),7,b
  4572  00109C  0E7F               	movlw	127
  4573  00109E  0100               	movlb	0	; () banked
  4574  0010A0  6F73               	movwf	??_sprintf& (0+255),b
  4575  0010A2  0100               	movlb	0	; () banked
  4576  0010A4  518A               	movf	sprintf@prec& (0+255),w,b
  4577  0010A6  0100               	movlb	0	; () banked
  4578  0010A8  5D8F               	subwf	sprintf@c& (0+255),w,b
  4579  0010AA  0100               	movlb	0	; () banked
  4580  0010AC  518B               	movf	(sprintf@prec+1)& (0+255),w,b
  4581  0010AE  0A80               	xorlw	128
  4582  0010B0  0100               	movlb	0	; () banked
  4583  0010B2  5973               	subwfb	??_sprintf& (0+255),w,b
  4584  0010B4  B0D8               	btfsc	status,0,c
  4585  0010B6  D003               	goto	l4590
  4586                           
  4587                           ; BSR set to: 0
  4588                           ;doprnt.c: 1340: c = prec;
  4589  0010B8  C08A  F08F         	movff	sprintf@prec,sprintf@c
  4590  0010BC  D018               	goto	l4594
  4591  0010BE                     l4590:
  4592                           
  4593                           ; BSR set to: 0
  4594                           ;doprnt.c: 1341: else if(prec < c)
  4595  0010BE  0100               	movlb	0	; () banked
  4596  0010C0  518B               	movf	(sprintf@prec+1)& (0+255),w,b
  4597  0010C2  0A80               	xorlw	128
  4598  0010C4  0100               	movlb	0	; () banked
  4599  0010C6  6F73               	movwf	??_sprintf& (0+255),b
  4600  0010C8  0100               	movlb	0	; () banked
  4601  0010CA  518F               	movf	sprintf@c& (0+255),w,b
  4602  0010CC  0100               	movlb	0	; () banked
  4603  0010CE  5D8A               	subwf	sprintf@prec& (0+255),w,b
  4604  0010D0  0E80               	movlw	128
  4605  0010D2  0100               	movlb	0	; () banked
  4606  0010D4  BF8F               	btfsc	sprintf@c& (0+255),7,b
  4607  0010D6  0E7F               	movlw	127
  4608  0010D8  0100               	movlb	0	; () banked
  4609  0010DA  5973               	subwfb	??_sprintf& (0+255),w,b
  4610  0010DC  B0D8               	btfsc	status,0,c
  4611  0010DE  D007               	goto	l4594
  4612                           
  4613                           ; BSR set to: 0
  4614                           ;doprnt.c: 1342: prec = c;
  4615  0010E0  0100               	movlb	0	; () banked
  4616  0010E2  518F               	movf	sprintf@c& (0+255),w,b
  4617  0010E4  0100               	movlb	0	; () banked
  4618  0010E6  6F8A               	movwf	sprintf@prec& (0+255),b
  4619  0010E8  6B8B               	clrf	(sprintf@prec+1)& (0+255),b
  4620  0010EA  BF8A               	btfsc	sprintf@prec& (0+255),7,b
  4621  0010EC  078B               	decf	(sprintf@prec+1)& (0+255),f,b
  4622  0010EE                     l4594:
  4623                           
  4624                           ; BSR set to: 0
  4625                           ;doprnt.c: 1422: {
  4626                           ;doprnt.c: 1438: if(flag & 0x03)
  4627  0010EE  0E03               	movlw	3
  4628  0010F0  0100               	movlb	0	; () banked
  4629  0010F2  157E               	andwf	sprintf@flag& (0+255),w,b
  4630  0010F4  0100               	movlb	0	; () banked
  4631  0010F6  6F73               	movwf	??_sprintf& (0+255),b
  4632  0010F8  0E00               	movlw	0
  4633  0010FA  0100               	movlb	0	; () banked
  4634  0010FC  157F               	andwf	(sprintf@flag+1)& (0+255),w,b
  4635  0010FE  0100               	movlb	0	; () banked
  4636  001100  6F74               	movwf	(??_sprintf+1)& (0+255),b
  4637  001102  0100               	movlb	0	; () banked
  4638  001104  5173               	movf	??_sprintf& (0+255),w,b
  4639  001106  0100               	movlb	0	; () banked
  4640  001108  1174               	iorwf	(??_sprintf+1)& (0+255),w,b
  4641  00110A  B4D8               	btfsc	status,2,c
  4642  00110C  D04F               	goto	l4606
  4643                           
  4644                           ; BSR set to: 0
  4645                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4646  00110E  C069  FFD9         	movff	sprintf@sp,fsr2l
  4647  001112  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  4648  001116  0E2D               	movlw	45
  4649  001118  6EDF               	movwf	indf2,c
  4650  00111A  D045               	goto	l4604
  4651  00111C                     l4600:
  4652                           
  4653                           ; BSR set to: 0
  4654                           ;doprnt.c: 1478: {
  4655                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4656  00111C  C08A  F073         	movff	sprintf@prec,??_sprintf
  4657  001120  C08B  F074         	movff	sprintf@prec+1,??_sprintf+1
  4658  001124  0100               	movlb	0	; () banked
  4659  001126  90D8               	bcf	status,0,c
  4660  001128  3773               	rlcf	??_sprintf& (0+255),f,b
  4661  00112A  3774               	rlcf	(??_sprintf+1)& (0+255),f,b
  4662  00112C  0100               	movlb	0	; () banked
  4663  00112E  90D8               	bcf	status,0,c
  4664  001130  3773               	rlcf	??_sprintf& (0+255),f,b
  4665  001132  3774               	rlcf	(??_sprintf+1)& (0+255),f,b
  4666  001134  0E01               	movlw	low _dpowers
  4667  001136  0100               	movlb	0	; () banked
  4668  001138  2573               	addwf	??_sprintf& (0+255),w,b
  4669  00113A  6EF6               	movwf	tblptrl,c
  4670  00113C  0E08               	movlw	high _dpowers
  4671  00113E  2174               	addwfc	(??_sprintf+1)& (0+255),w,b
  4672  001140  6EF7               	movwf	tblptrh,c
  4673  001142                     	if	0	;There are less than 3 active tblptr bytes
  4674  001142                     	endif
  4675  001142  0009               	tblrd		*+
  4676  001144  CFF5 F01D          	movff	tablat,___lldiv@divisor
  4677  001148  0009               	tblrd		*+
  4678  00114A  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  4679  00114E  0009               	tblrd		*+
  4680  001150  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  4681  001154  000A               	tblrd		*-
  4682  001156  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  4683  00115A  C086  F019         	movff	sprintf@val,___lldiv@dividend
  4684  00115E  C087  F01A         	movff	sprintf@val+1,___lldiv@dividend+1
  4685  001162  C088  F01B         	movff	sprintf@val+2,___lldiv@dividend+2
  4686  001166  C089  F01C         	movff	sprintf@val+3,___lldiv@dividend+3
  4687  00116A  EC88  F016         	call	___lldiv	;wreg free
  4688  00116E  C019  F010         	movff	?___lldiv,___llmod@dividend
  4689  001172  C01A  F011         	movff	?___lldiv+1,___llmod@dividend+1
  4690  001176  C01B  F012         	movff	?___lldiv+2,___llmod@dividend+2
  4691  00117A  C01C  F013         	movff	?___lldiv+3,___llmod@dividend+3
  4692  00117E  0E0A               	movlw	10
  4693  001180  6E14               	movwf	___llmod@divisor,c
  4694  001182  0E00               	movlw	0
  4695  001184  6E15               	movwf	___llmod@divisor+1,c
  4696  001186  0E00               	movlw	0
  4697  001188  6E16               	movwf	___llmod@divisor+2,c
  4698  00118A  0E00               	movlw	0
  4699  00118C  6E17               	movwf	___llmod@divisor+3,c
  4700  00118E  ECB3  F017         	call	___llmod	;wreg free
  4701  001192  5010               	movf	?___llmod,w,c
  4702  001194  0F30               	addlw	48
  4703  001196  0100               	movlb	0	; () banked
  4704  001198  6F8F               	movwf	sprintf@c& (0+255),b
  4705                           
  4706                           ; BSR set to: 0
  4707                           ;doprnt.c: 1523: }
  4708                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4709  00119A  C069  FFD9         	movff	sprintf@sp,fsr2l
  4710  00119E  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  4711  0011A2  C08F  FFDF         	movff	sprintf@c,indf2
  4712  0011A6                     l4604:
  4713                           
  4714                           ; BSR set to: 0
  4715  0011A6  0100               	movlb	0	; () banked
  4716  0011A8  4B69               	infsnz	sprintf@sp& (0+255),f,b
  4717  0011AA  2B6A               	incf	(sprintf@sp+1)& (0+255),f,b
  4718  0011AC                     l4606:
  4719                           
  4720                           ; BSR set to: 0
  4721  0011AC  0100               	movlb	0	; () banked
  4722  0011AE  078A               	decf	sprintf@prec& (0+255),f,b
  4723  0011B0  A0D8               	btfss	status,0,c
  4724  0011B2  078B               	decf	(sprintf@prec+1)& (0+255),f,b
  4725  0011B4  0100               	movlb	0	; () banked
  4726  0011B6  298A               	incf	sprintf@prec& (0+255),w,b
  4727  0011B8  E1B1               	bnz	l4600
  4728  0011BA  0100               	movlb	0	; () banked
  4729  0011BC  298B               	incf	(sprintf@prec+1)& (0+255),w,b
  4730  0011BE  A4D8               	btfss	status,2,c
  4731  0011C0  D7AD               	goto	l4600
  4732  0011C2                     l4608:
  4733                           
  4734                           ; BSR set to: 0
  4735  0011C2  C06B  FFF6         	movff	sprintf@f,tblptrl
  4736  0011C6  C06C  FFF7         	movff	sprintf@f+1,tblptrh
  4737  0011CA  0100               	movlb	0	; () banked
  4738  0011CC  4B6B               	infsnz	sprintf@f& (0+255),f,b
  4739  0011CE  2B6C               	incf	(sprintf@f+1)& (0+255),f,b
  4740  0011D0                     	if	0	;tblptru may be non-zero
  4741  0011D0                     	endif
  4742  0011D0                     	if	0	;tblptru may be non-zero
  4743  0011D0                     	endif
  4744  0011D0  0008               	tblrd		*
  4745  0011D2  CFF5 F08F          	movff	tablat,sprintf@c
  4746  0011D6  0100               	movlb	0	; () banked
  4747  0011D8  518F               	movf	sprintf@c& (0+255),w,b
  4748  0011DA  A4D8               	btfss	status,2,c
  4749  0011DC  EF5F  F004         	goto	l4378
  4750  0011E0                     l4610:
  4751                           
  4752                           ; BSR set to: 0
  4753                           ;doprnt.c: 1538: *sp = 0;
  4754  0011E0  C069  FFD9         	movff	sprintf@sp,fsr2l
  4755  0011E4  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  4756  0011E8  0E00               	movlw	0
  4757  0011EA  6EDF               	movwf	indf2,c
  4758  0011EC  0012               	return	
  4759  0011EE                     __end_of_sprintf:
  4760                           	opt stack 0
  4761                           tblptru	equ	0xFF8
  4762                           tblptrh	equ	0xFF7
  4763                           tblptrl	equ	0xFF6
  4764                           tablat	equ	0xFF5
  4765                           prodh	equ	0xFF4
  4766                           prodl	equ	0xFF3
  4767                           intcon	equ	0xFF2
  4768                           postinc0	equ	0xFEE
  4769                           wreg	equ	0xFE8
  4770                           indf1	equ	0xFE7
  4771                           fsr1h	equ	0xFE2
  4772                           fsr1l	equ	0xFE1
  4773                           indf2	equ	0xFDF
  4774                           postinc2	equ	0xFDE
  4775                           postdec2	equ	0xFDD
  4776                           fsr2h	equ	0xFDA
  4777                           fsr2l	equ	0xFD9
  4778                           status	equ	0xFD8
  4779                           
  4780 ;; *************** function _scale *****************
  4781 ;; Defined at:
  4782 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4783 ;; Parameters:    Size  Location     Type
  4784 ;;  scl             1    wreg     char 
  4785 ;; Auto vars:     Size  Location     Type
  4786 ;;  scl             1   56[COMRAM] char 
  4787 ;; Return value:  Size  Location     Type
  4788 ;;                  3   50[COMRAM] char 
  4789 ;; Registers used:
  4790 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4791 ;; Tracked objects:
  4792 ;;		On entry : 0/0
  4793 ;;		On exit  : 0/0
  4794 ;;		Unchanged: 0/0
  4795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4796 ;;      Params:         3       0       0       0       0       0       0       0       0
  4797 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4798 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4799 ;;      Totals:         7       0       0       0       0       0       0       0       0
  4800 ;;Total ram usage:        7 bytes
  4801 ;; Hardware stack levels used:    1
  4802 ;; Hardware stack levels required when called:    3
  4803 ;; This function calls:
  4804 ;;		___awdiv
  4805 ;;		___awmod
  4806 ;;		___ftmul
  4807 ;;		___wmul
  4808 ;; This function is called by:
  4809 ;;		_sprintf
  4810 ;; This function uses a non-reentrant model
  4811 ;;
  4812                           
  4813                           	psect	text15
  4814  0011EE                     __ptext15:
  4815                           	opt stack 0
  4816  0011EE                     _scale:
  4817                           	opt stack 26
  4818                           
  4819                           ; BSR set to: 0
  4820                           ;incstack = 0
  4821                           ;scale@scl stored from wreg
  4822  0011EE  6E39               	movwf	scale@scl,c
  4823                           
  4824                           ;doprnt.c: 428: if(scl < 0) {
  4825  0011F0  AE39               	btfss	scale@scl,7,c
  4826  0011F2  D0FB               	goto	l4128
  4827                           
  4828                           ;doprnt.c: 429: scl = -scl;
  4829  0011F4  6C39               	negf	scale@scl,c
  4830                           
  4831                           ;doprnt.c: 430: if(scl>=110)
  4832  0011F6  5039               	movf	scale@scl,w,c
  4833  0011F8  0A80               	xorlw	128
  4834  0011FA  0F12               	addlw	-238
  4835  0011FC  A0D8               	btfss	status,0,c
  4836  0011FE  D091               	goto	l4118
  4837                           
  4838                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4839  001200  0E00               	movlw	0
  4840  001202  6E21               	movwf	___wmul@multiplicand+1,c
  4841  001204  0E03               	movlw	3
  4842  001206  6E20               	movwf	___wmul@multiplicand,c
  4843  001208  0E00               	movlw	0
  4844  00120A  6E19               	movwf	___awdiv@divisor+1,c
  4845  00120C  0E0A               	movlw	10
  4846  00120E  6E18               	movwf	___awdiv@divisor,c
  4847  001210  0E00               	movlw	0
  4848  001212  6E13               	movwf	___awmod@divisor+1,c
  4849  001214  0E64               	movlw	100
  4850  001216  6E12               	movwf	___awmod@divisor,c
  4851  001218  5039               	movf	scale@scl,w,c
  4852  00121A  6E10               	movwf	___awmod@dividend,c
  4853  00121C  6A11               	clrf	___awmod@dividend+1,c
  4854  00121E  BE10               	btfsc	___awmod@dividend,7,c
  4855  001220  0611               	decf	___awmod@dividend+1,f,c
  4856  001222  EC7B  F017         	call	___awmod	;wreg free
  4857  001226  C010  F016         	movff	?___awmod,___awdiv@dividend
  4858  00122A  C011  F017         	movff	?___awmod+1,___awdiv@dividend+1
  4859  00122E  EC46  F016         	call	___awdiv	;wreg free
  4860  001232  0E09               	movlw	9
  4861  001234  2416               	addwf	?___awdiv,w,c
  4862  001236  6E1E               	movwf	___wmul@multiplier,c
  4863  001238  0E00               	movlw	0
  4864  00123A  2017               	addwfc	?___awdiv+1,w,c
  4865  00123C  6E1F               	movwf	___wmul@multiplier+1,c
  4866  00123E  EC55  F019         	call	___wmul	;wreg free
  4867  001242  0E29               	movlw	low __npowers_
  4868  001244  241E               	addwf	?___wmul,w,c
  4869  001246  6EF6               	movwf	tblptrl,c
  4870  001248  0E08               	movlw	high __npowers_
  4871  00124A  201F               	addwfc	?___wmul+1,w,c
  4872  00124C  6EF7               	movwf	tblptrh,c
  4873  00124E                     	if	0	;There are less than 3 active tblptr bytes
  4874  00124E                     	endif
  4875  00124E  0009               	tblrd		*+
  4876  001250  CFF5 F027          	movff	tablat,___ftmul@f2
  4877  001254  0009               	tblrd		*+
  4878  001256  CFF5 F028          	movff	tablat,___ftmul@f2+1
  4879  00125A  000A               	tblrd		*-
  4880  00125C  CFF5 F029          	movff	tablat,___ftmul@f2+2
  4881  001260  0E00               	movlw	0
  4882  001262  6E19               	movwf	___awdiv@divisor+1,c
  4883  001264  0E64               	movlw	100
  4884  001266  6E18               	movwf	___awdiv@divisor,c
  4885  001268  5039               	movf	scale@scl,w,c
  4886  00126A  6E16               	movwf	___awdiv@dividend,c
  4887  00126C  6A17               	clrf	___awdiv@dividend+1,c
  4888  00126E  BE16               	btfsc	___awdiv@dividend,7,c
  4889  001270  0617               	decf	___awdiv@dividend+1,f,c
  4890  001272  EC46  F016         	call	___awdiv	;wreg free
  4891  001276  0E12               	movlw	18
  4892  001278  2416               	addwf	?___awdiv,w,c
  4893  00127A  6E1E               	movwf	___wmul@multiplier,c
  4894  00127C  0E00               	movlw	0
  4895  00127E  2017               	addwfc	?___awdiv+1,w,c
  4896  001280  6E1F               	movwf	___wmul@multiplier+1,c
  4897  001282  0E00               	movlw	0
  4898  001284  6E21               	movwf	___wmul@multiplicand+1,c
  4899  001286  0E03               	movlw	3
  4900  001288  6E20               	movwf	___wmul@multiplicand,c
  4901  00128A  EC55  F019         	call	___wmul	;wreg free
  4902  00128E  0E29               	movlw	low __npowers_
  4903  001290  241E               	addwf	?___wmul,w,c
  4904  001292  6EF6               	movwf	tblptrl,c
  4905  001294  0E08               	movlw	high __npowers_
  4906  001296  201F               	addwfc	?___wmul+1,w,c
  4907  001298  6EF7               	movwf	tblptrh,c
  4908  00129A                     	if	0	;There are less than 3 active tblptr bytes
  4909  00129A                     	endif
  4910  00129A  0009               	tblrd		*+
  4911  00129C  CFF5 F024          	movff	tablat,___ftmul@f1
  4912  0012A0  0009               	tblrd		*+
  4913  0012A2  CFF5 F025          	movff	tablat,___ftmul@f1+1
  4914  0012A6  000A               	tblrd		*-
  4915  0012A8  CFF5 F026          	movff	tablat,___ftmul@f1+2
  4916  0012AC  ECDA  F013         	call	___ftmul	;wreg free
  4917  0012B0  C024  F036         	movff	?___ftmul,_scale$1062
  4918  0012B4  C025  F037         	movff	?___ftmul+1,_scale$1062+1
  4919  0012B8  C026  F038         	movff	?___ftmul+2,_scale$1062+2
  4920                           
  4921                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4922  0012BC  C036  F024         	movff	_scale$1062,___ftmul@f1
  4923  0012C0  C037  F025         	movff	_scale$1062+1,___ftmul@f1+1
  4924  0012C4  C038  F026         	movff	_scale$1062+2,___ftmul@f1+2
  4925  0012C8  0E00               	movlw	0
  4926  0012CA  6E21               	movwf	___wmul@multiplicand+1,c
  4927  0012CC  0E03               	movlw	3
  4928  0012CE  6E20               	movwf	___wmul@multiplicand,c
  4929  0012D0  0E00               	movlw	0
  4930  0012D2  6E13               	movwf	___awmod@divisor+1,c
  4931  0012D4  0E0A               	movlw	10
  4932  0012D6  6E12               	movwf	___awmod@divisor,c
  4933  0012D8  5039               	movf	scale@scl,w,c
  4934  0012DA  6E10               	movwf	___awmod@dividend,c
  4935  0012DC  6A11               	clrf	___awmod@dividend+1,c
  4936  0012DE  BE10               	btfsc	___awmod@dividend,7,c
  4937  0012E0  0611               	decf	___awmod@dividend+1,f,c
  4938  0012E2  EC7B  F017         	call	___awmod	;wreg free
  4939  0012E6  C010  F01E         	movff	?___awmod,___wmul@multiplier
  4940  0012EA  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  4941  0012EE  EC55  F019         	call	___wmul	;wreg free
  4942  0012F2  0E29               	movlw	low __npowers_
  4943  0012F4  241E               	addwf	?___wmul,w,c
  4944  0012F6  6EF6               	movwf	tblptrl,c
  4945  0012F8  0E08               	movlw	high __npowers_
  4946  0012FA  201F               	addwfc	?___wmul+1,w,c
  4947  0012FC  6EF7               	movwf	tblptrh,c
  4948  0012FE                     	if	0	;There are less than 3 active tblptr bytes
  4949  0012FE                     	endif
  4950  0012FE  0009               	tblrd		*+
  4951  001300  CFF5 F027          	movff	tablat,___ftmul@f2
  4952  001304  0009               	tblrd		*+
  4953  001306  CFF5 F028          	movff	tablat,___ftmul@f2+1
  4954  00130A  000A               	tblrd		*-
  4955  00130C  CFF5 F029          	movff	tablat,___ftmul@f2+2
  4956  001310  ECDA  F013         	call	___ftmul	;wreg free
  4957  001314  C024  F033         	movff	?___ftmul,?_scale
  4958  001318  C025  F034         	movff	?___ftmul+1,?_scale+1
  4959  00131C  C026  F035         	movff	?___ftmul+2,?_scale+2
  4960  001320  0012               	return	
  4961  001322                     l4118:
  4962                           
  4963                           ;doprnt.c: 432: else if(scl > 10)
  4964  001322  5039               	movf	scale@scl,w,c
  4965  001324  0A80               	xorlw	128
  4966  001326  0F75               	addlw	-139
  4967  001328  A0D8               	btfss	status,0,c
  4968  00132A  D04D               	goto	l4124
  4969                           
  4970                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4971  00132C  0E00               	movlw	0
  4972  00132E  6E19               	movwf	___awdiv@divisor+1,c
  4973  001330  0E0A               	movlw	10
  4974  001332  6E18               	movwf	___awdiv@divisor,c
  4975  001334  5039               	movf	scale@scl,w,c
  4976  001336  6E16               	movwf	___awdiv@dividend,c
  4977  001338  6A17               	clrf	___awdiv@dividend+1,c
  4978  00133A  BE16               	btfsc	___awdiv@dividend,7,c
  4979  00133C  0617               	decf	___awdiv@dividend+1,f,c
  4980  00133E  EC46  F016         	call	___awdiv	;wreg free
  4981  001342  0E09               	movlw	9
  4982  001344  2416               	addwf	?___awdiv,w,c
  4983  001346  6E1E               	movwf	___wmul@multiplier,c
  4984  001348  0E00               	movlw	0
  4985  00134A  2017               	addwfc	?___awdiv+1,w,c
  4986  00134C  6E1F               	movwf	___wmul@multiplier+1,c
  4987  00134E  0E00               	movlw	0
  4988  001350  6E21               	movwf	___wmul@multiplicand+1,c
  4989  001352  0E03               	movlw	3
  4990  001354  6E20               	movwf	___wmul@multiplicand,c
  4991  001356  EC55  F019         	call	___wmul	;wreg free
  4992  00135A  0E29               	movlw	low __npowers_
  4993  00135C  241E               	addwf	?___wmul,w,c
  4994  00135E  6EF6               	movwf	tblptrl,c
  4995  001360  0E08               	movlw	high __npowers_
  4996  001362  201F               	addwfc	?___wmul+1,w,c
  4997  001364  6EF7               	movwf	tblptrh,c
  4998  001366                     	if	0	;There are less than 3 active tblptr bytes
  4999  001366                     	endif
  5000  001366  0009               	tblrd		*+
  5001  001368  CFF5 F024          	movff	tablat,___ftmul@f1
  5002  00136C  0009               	tblrd		*+
  5003  00136E  CFF5 F025          	movff	tablat,___ftmul@f1+1
  5004  001372  000A               	tblrd		*-
  5005  001374  CFF5 F026          	movff	tablat,___ftmul@f1+2
  5006  001378  0E00               	movlw	0
  5007  00137A  6E21               	movwf	___wmul@multiplicand+1,c
  5008  00137C  0E03               	movlw	3
  5009  00137E  6E20               	movwf	___wmul@multiplicand,c
  5010  001380  0E00               	movlw	0
  5011  001382  6E13               	movwf	___awmod@divisor+1,c
  5012  001384  0E0A               	movlw	10
  5013  001386  6E12               	movwf	___awmod@divisor,c
  5014  001388  5039               	movf	scale@scl,w,c
  5015  00138A  6E10               	movwf	___awmod@dividend,c
  5016  00138C  6A11               	clrf	___awmod@dividend+1,c
  5017  00138E  BE10               	btfsc	___awmod@dividend,7,c
  5018  001390  0611               	decf	___awmod@dividend+1,f,c
  5019  001392  EC7B  F017         	call	___awmod	;wreg free
  5020  001396  C010  F01E         	movff	?___awmod,___wmul@multiplier
  5021  00139A  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  5022  00139E  EC55  F019         	call	___wmul	;wreg free
  5023  0013A2  0E29               	movlw	low __npowers_
  5024  0013A4  241E               	addwf	?___wmul,w,c
  5025  0013A6  6EF6               	movwf	tblptrl,c
  5026  0013A8  0E08               	movlw	high __npowers_
  5027  0013AA  201F               	addwfc	?___wmul+1,w,c
  5028  0013AC  6EF7               	movwf	tblptrh,c
  5029  0013AE                     	if	0	;There are less than 3 active tblptr bytes
  5030  0013AE                     	endif
  5031  0013AE  0009               	tblrd		*+
  5032  0013B0  CFF5 F027          	movff	tablat,___ftmul@f2
  5033  0013B4  0009               	tblrd		*+
  5034  0013B6  CFF5 F028          	movff	tablat,___ftmul@f2+1
  5035  0013BA  000A               	tblrd		*-
  5036  0013BC  CFF5 F029          	movff	tablat,___ftmul@f2+2
  5037  0013C0  ECDA  F013         	call	___ftmul	;wreg free
  5038  0013C4  D7A7               	goto	L3
  5039  0013C6                     l4124:
  5040                           
  5041                           ;doprnt.c: 434: return _npowers_[scl];
  5042  0013C6  5039               	movf	scale@scl,w,c
  5043  0013C8  0D03               	mullw	3
  5044  0013CA  0E29               	movlw	low __npowers_
  5045  0013CC  24F3               	addwf	prodl,w,c
  5046  0013CE  6EF6               	movwf	tblptrl,c
  5047  0013D0  0E08               	movlw	high __npowers_
  5048  0013D2  20F4               	addwfc	prodh,w,c
  5049  0013D4  6EF7               	movwf	tblptrh,c
  5050  0013D6                     	if	0	;There are less than 3 active tblptr bytes
  5051  0013D6                     	endif
  5052  0013D6  0009               	tblrd		*+
  5053  0013D8  CFF5 F033          	movff	tablat,?_scale
  5054  0013DC  0009               	tblrd		*+
  5055  0013DE  CFF5 F034          	movff	tablat,?_scale+1
  5056  0013E2  000A               	tblrd		*-
  5057  0013E4  CFF5 F035          	movff	tablat,?_scale+2
  5058  0013E8  0012               	return	
  5059  0013EA                     l4128:
  5060                           
  5061                           ;doprnt.c: 435: }
  5062                           ;doprnt.c: 436: if(scl>=110)
  5063  0013EA  5039               	movf	scale@scl,w,c
  5064  0013EC  0A80               	xorlw	128
  5065  0013EE  0F12               	addlw	-238
  5066  0013F0  A0D8               	btfss	status,0,c
  5067  0013F2  D091               	goto	l4136
  5068                           
  5069                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5070  0013F4  0E00               	movlw	0
  5071  0013F6  6E21               	movwf	___wmul@multiplicand+1,c
  5072  0013F8  0E03               	movlw	3
  5073  0013FA  6E20               	movwf	___wmul@multiplicand,c
  5074  0013FC  0E00               	movlw	0
  5075  0013FE  6E19               	movwf	___awdiv@divisor+1,c
  5076  001400  0E0A               	movlw	10
  5077  001402  6E18               	movwf	___awdiv@divisor,c
  5078  001404  0E00               	movlw	0
  5079  001406  6E13               	movwf	___awmod@divisor+1,c
  5080  001408  0E64               	movlw	100
  5081  00140A  6E12               	movwf	___awmod@divisor,c
  5082  00140C  5039               	movf	scale@scl,w,c
  5083  00140E  6E10               	movwf	___awmod@dividend,c
  5084  001410  6A11               	clrf	___awmod@dividend+1,c
  5085  001412  BE10               	btfsc	___awmod@dividend,7,c
  5086  001414  0611               	decf	___awmod@dividend+1,f,c
  5087  001416  EC7B  F017         	call	___awmod	;wreg free
  5088  00141A  C010  F016         	movff	?___awmod,___awdiv@dividend
  5089  00141E  C011  F017         	movff	?___awmod+1,___awdiv@dividend+1
  5090  001422  EC46  F016         	call	___awdiv	;wreg free
  5091  001426  0E09               	movlw	9
  5092  001428  2416               	addwf	?___awdiv,w,c
  5093  00142A  6E1E               	movwf	___wmul@multiplier,c
  5094  00142C  0E00               	movlw	0
  5095  00142E  2017               	addwfc	?___awdiv+1,w,c
  5096  001430  6E1F               	movwf	___wmul@multiplier+1,c
  5097  001432  EC55  F019         	call	___wmul	;wreg free
  5098  001436  0E50               	movlw	low __powers_
  5099  001438  241E               	addwf	?___wmul,w,c
  5100  00143A  6EF6               	movwf	tblptrl,c
  5101  00143C  0E08               	movlw	high __powers_
  5102  00143E  201F               	addwfc	?___wmul+1,w,c
  5103  001440  6EF7               	movwf	tblptrh,c
  5104  001442                     	if	0	;There are less than 3 active tblptr bytes
  5105  001442                     	endif
  5106  001442  0009               	tblrd		*+
  5107  001444  CFF5 F027          	movff	tablat,___ftmul@f2
  5108  001448  0009               	tblrd		*+
  5109  00144A  CFF5 F028          	movff	tablat,___ftmul@f2+1
  5110  00144E  000A               	tblrd		*-
  5111  001450  CFF5 F029          	movff	tablat,___ftmul@f2+2
  5112  001454  0E00               	movlw	0
  5113  001456  6E19               	movwf	___awdiv@divisor+1,c
  5114  001458  0E64               	movlw	100
  5115  00145A  6E18               	movwf	___awdiv@divisor,c
  5116  00145C  5039               	movf	scale@scl,w,c
  5117  00145E  6E16               	movwf	___awdiv@dividend,c
  5118  001460  6A17               	clrf	___awdiv@dividend+1,c
  5119  001462  BE16               	btfsc	___awdiv@dividend,7,c
  5120  001464  0617               	decf	___awdiv@dividend+1,f,c
  5121  001466  EC46  F016         	call	___awdiv	;wreg free
  5122  00146A  0E12               	movlw	18
  5123  00146C  2416               	addwf	?___awdiv,w,c
  5124  00146E  6E1E               	movwf	___wmul@multiplier,c
  5125  001470  0E00               	movlw	0
  5126  001472  2017               	addwfc	?___awdiv+1,w,c
  5127  001474  6E1F               	movwf	___wmul@multiplier+1,c
  5128  001476  0E00               	movlw	0
  5129  001478  6E21               	movwf	___wmul@multiplicand+1,c
  5130  00147A  0E03               	movlw	3
  5131  00147C  6E20               	movwf	___wmul@multiplicand,c
  5132  00147E  EC55  F019         	call	___wmul	;wreg free
  5133  001482  0E50               	movlw	low __powers_
  5134  001484  241E               	addwf	?___wmul,w,c
  5135  001486  6EF6               	movwf	tblptrl,c
  5136  001488  0E08               	movlw	high __powers_
  5137  00148A  201F               	addwfc	?___wmul+1,w,c
  5138  00148C  6EF7               	movwf	tblptrh,c
  5139  00148E                     	if	0	;There are less than 3 active tblptr bytes
  5140  00148E                     	endif
  5141  00148E  0009               	tblrd		*+
  5142  001490  CFF5 F024          	movff	tablat,___ftmul@f1
  5143  001494  0009               	tblrd		*+
  5144  001496  CFF5 F025          	movff	tablat,___ftmul@f1+1
  5145  00149A  000A               	tblrd		*-
  5146  00149C  CFF5 F026          	movff	tablat,___ftmul@f1+2
  5147  0014A0  ECDA  F013         	call	___ftmul	;wreg free
  5148  0014A4  C024  F036         	movff	?___ftmul,_scale$1062
  5149  0014A8  C025  F037         	movff	?___ftmul+1,_scale$1062+1
  5150  0014AC  C026  F038         	movff	?___ftmul+2,_scale$1062+2
  5151                           
  5152                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5153  0014B0  C036  F024         	movff	_scale$1062,___ftmul@f1
  5154  0014B4  C037  F025         	movff	_scale$1062+1,___ftmul@f1+1
  5155  0014B8  C038  F026         	movff	_scale$1062+2,___ftmul@f1+2
  5156  0014BC  0E00               	movlw	0
  5157  0014BE  6E21               	movwf	___wmul@multiplicand+1,c
  5158  0014C0  0E03               	movlw	3
  5159  0014C2  6E20               	movwf	___wmul@multiplicand,c
  5160  0014C4  0E00               	movlw	0
  5161  0014C6  6E13               	movwf	___awmod@divisor+1,c
  5162  0014C8  0E0A               	movlw	10
  5163  0014CA  6E12               	movwf	___awmod@divisor,c
  5164  0014CC  5039               	movf	scale@scl,w,c
  5165  0014CE  6E10               	movwf	___awmod@dividend,c
  5166  0014D0  6A11               	clrf	___awmod@dividend+1,c
  5167  0014D2  BE10               	btfsc	___awmod@dividend,7,c
  5168  0014D4  0611               	decf	___awmod@dividend+1,f,c
  5169  0014D6  EC7B  F017         	call	___awmod	;wreg free
  5170  0014DA  C010  F01E         	movff	?___awmod,___wmul@multiplier
  5171  0014DE  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  5172  0014E2  EC55  F019         	call	___wmul	;wreg free
  5173  0014E6  0E50               	movlw	low __powers_
  5174  0014E8  241E               	addwf	?___wmul,w,c
  5175  0014EA  6EF6               	movwf	tblptrl,c
  5176  0014EC  0E08               	movlw	high __powers_
  5177  0014EE  201F               	addwfc	?___wmul+1,w,c
  5178  0014F0  6EF7               	movwf	tblptrh,c
  5179  0014F2                     	if	0	;There are less than 3 active tblptr bytes
  5180  0014F2                     	endif
  5181  0014F2  0009               	tblrd		*+
  5182  0014F4  CFF5 F027          	movff	tablat,___ftmul@f2
  5183  0014F8  0009               	tblrd		*+
  5184  0014FA  CFF5 F028          	movff	tablat,___ftmul@f2+1
  5185  0014FE  000A               	tblrd		*-
  5186  001500  CFF5 F029          	movff	tablat,___ftmul@f2+2
  5187  001504  ECDA  F013         	call	___ftmul	;wreg free
  5188  001508  C024  F033         	movff	?___ftmul,?_scale
  5189  00150C  C025  F034         	movff	?___ftmul+1,?_scale+1
  5190  001510  C026  F035         	movff	?___ftmul+2,?_scale+2
  5191  001514  0012               	return	
  5192  001516                     l4136:
  5193                           
  5194                           ;doprnt.c: 438: else if(scl > 10)
  5195  001516  5039               	movf	scale@scl,w,c
  5196  001518  0A80               	xorlw	128
  5197  00151A  0F75               	addlw	-139
  5198  00151C  A0D8               	btfss	status,0,c
  5199  00151E  D04D               	goto	l4142
  5200                           
  5201                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5202  001520  0E00               	movlw	0
  5203  001522  6E19               	movwf	___awdiv@divisor+1,c
  5204  001524  0E0A               	movlw	10
  5205  001526  6E18               	movwf	___awdiv@divisor,c
  5206  001528  5039               	movf	scale@scl,w,c
  5207  00152A  6E16               	movwf	___awdiv@dividend,c
  5208  00152C  6A17               	clrf	___awdiv@dividend+1,c
  5209  00152E  BE16               	btfsc	___awdiv@dividend,7,c
  5210  001530  0617               	decf	___awdiv@dividend+1,f,c
  5211  001532  EC46  F016         	call	___awdiv	;wreg free
  5212  001536  0E09               	movlw	9
  5213  001538  2416               	addwf	?___awdiv,w,c
  5214  00153A  6E1E               	movwf	___wmul@multiplier,c
  5215  00153C  0E00               	movlw	0
  5216  00153E  2017               	addwfc	?___awdiv+1,w,c
  5217  001540  6E1F               	movwf	___wmul@multiplier+1,c
  5218  001542  0E00               	movlw	0
  5219  001544  6E21               	movwf	___wmul@multiplicand+1,c
  5220  001546  0E03               	movlw	3
  5221  001548  6E20               	movwf	___wmul@multiplicand,c
  5222  00154A  EC55  F019         	call	___wmul	;wreg free
  5223  00154E  0E50               	movlw	low __powers_
  5224  001550  241E               	addwf	?___wmul,w,c
  5225  001552  6EF6               	movwf	tblptrl,c
  5226  001554  0E08               	movlw	high __powers_
  5227  001556  201F               	addwfc	?___wmul+1,w,c
  5228  001558  6EF7               	movwf	tblptrh,c
  5229  00155A                     	if	0	;There are less than 3 active tblptr bytes
  5230  00155A                     	endif
  5231  00155A  0009               	tblrd		*+
  5232  00155C  CFF5 F024          	movff	tablat,___ftmul@f1
  5233  001560  0009               	tblrd		*+
  5234  001562  CFF5 F025          	movff	tablat,___ftmul@f1+1
  5235  001566  000A               	tblrd		*-
  5236  001568  CFF5 F026          	movff	tablat,___ftmul@f1+2
  5237  00156C  0E00               	movlw	0
  5238  00156E  6E21               	movwf	___wmul@multiplicand+1,c
  5239  001570  0E03               	movlw	3
  5240  001572  6E20               	movwf	___wmul@multiplicand,c
  5241  001574  0E00               	movlw	0
  5242  001576  6E13               	movwf	___awmod@divisor+1,c
  5243  001578  0E0A               	movlw	10
  5244  00157A  6E12               	movwf	___awmod@divisor,c
  5245  00157C  5039               	movf	scale@scl,w,c
  5246  00157E  6E10               	movwf	___awmod@dividend,c
  5247  001580  6A11               	clrf	___awmod@dividend+1,c
  5248  001582  BE10               	btfsc	___awmod@dividend,7,c
  5249  001584  0611               	decf	___awmod@dividend+1,f,c
  5250  001586  EC7B  F017         	call	___awmod	;wreg free
  5251  00158A  C010  F01E         	movff	?___awmod,___wmul@multiplier
  5252  00158E  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  5253  001592  EC55  F019         	call	___wmul	;wreg free
  5254  001596  0E50               	movlw	low __powers_
  5255  001598  241E               	addwf	?___wmul,w,c
  5256  00159A  6EF6               	movwf	tblptrl,c
  5257  00159C  0E08               	movlw	high __powers_
  5258  00159E  201F               	addwfc	?___wmul+1,w,c
  5259  0015A0  6EF7               	movwf	tblptrh,c
  5260  0015A2                     	if	0	;There are less than 3 active tblptr bytes
  5261  0015A2                     	endif
  5262  0015A2  0009               	tblrd		*+
  5263  0015A4  CFF5 F027          	movff	tablat,___ftmul@f2
  5264  0015A8  0009               	tblrd		*+
  5265  0015AA  CFF5 F028          	movff	tablat,___ftmul@f2+1
  5266  0015AE  000A               	tblrd		*-
  5267  0015B0  CFF5 F029          	movff	tablat,___ftmul@f2+2
  5268  0015B4  ECDA  F013         	call	___ftmul	;wreg free
  5269  0015B8  D7A7               	goto	L4
  5270  0015BA                     l4142:
  5271                           
  5272                           ;doprnt.c: 440: return _powers_[scl];
  5273  0015BA  5039               	movf	scale@scl,w,c
  5274  0015BC  0D03               	mullw	3
  5275  0015BE  0E50               	movlw	low __powers_
  5276  0015C0  24F3               	addwf	prodl,w,c
  5277  0015C2  6EF6               	movwf	tblptrl,c
  5278  0015C4  0E08               	movlw	high __powers_
  5279  0015C6  20F4               	addwfc	prodh,w,c
  5280  0015C8  6EF7               	movwf	tblptrh,c
  5281  0015CA                     	if	0	;There are less than 3 active tblptr bytes
  5282  0015CA                     	endif
  5283  0015CA  0009               	tblrd		*+
  5284  0015CC  CFF5 F033          	movff	tablat,?_scale
  5285  0015D0  0009               	tblrd		*+
  5286  0015D2  CFF5 F034          	movff	tablat,?_scale+1
  5287  0015D6  000A               	tblrd		*-
  5288  0015D8  CFF5 F035          	movff	tablat,?_scale+2
  5289  0015DC  0012               	return	
  5290  0015DE                     __end_of_scale:
  5291                           	opt stack 0
  5292                           tblptru	equ	0xFF8
  5293                           tblptrh	equ	0xFF7
  5294                           tblptrl	equ	0xFF6
  5295                           tablat	equ	0xFF5
  5296                           prodh	equ	0xFF4
  5297                           prodl	equ	0xFF3
  5298                           intcon	equ	0xFF2
  5299                           postinc0	equ	0xFEE
  5300                           wreg	equ	0xFE8
  5301                           indf1	equ	0xFE7
  5302                           fsr1h	equ	0xFE2
  5303                           fsr1l	equ	0xFE1
  5304                           indf2	equ	0xFDF
  5305                           postinc2	equ	0xFDE
  5306                           postdec2	equ	0xFDD
  5307                           fsr2h	equ	0xFDA
  5308                           fsr2l	equ	0xFD9
  5309                           status	equ	0xFD8
  5310                           
  5311 ;; *************** function _isdigit *****************
  5312 ;; Defined at:
  5313 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  5314 ;; Parameters:    Size  Location     Type
  5315 ;;  c               1    wreg     unsigned char 
  5316 ;; Auto vars:     Size  Location     Type
  5317 ;;  c               1   17[COMRAM] unsigned char 
  5318 ;; Return value:  Size  Location     Type
  5319 ;;		None               void
  5320 ;; Registers used:
  5321 ;;		wreg, status,2, status,0
  5322 ;; Tracked objects:
  5323 ;;		On entry : 0/0
  5324 ;;		On exit  : 0/0
  5325 ;;		Unchanged: 0/0
  5326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5327 ;;      Params:         0       0       0       0       0       0       0       0       0
  5328 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5329 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5330 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5331 ;;Total ram usage:        3 bytes
  5332 ;; Hardware stack levels used:    1
  5333 ;; Hardware stack levels required when called:    1
  5334 ;; This function calls:
  5335 ;;		Nothing
  5336 ;; This function is called by:
  5337 ;;		_sprintf
  5338 ;;		_strtod
  5339 ;;		_atol
  5340 ;; This function uses a non-reentrant model
  5341 ;;
  5342                           
  5343                           	psect	text16
  5344  003316                     __ptext16:
  5345                           	opt stack 0
  5346  003316                     _isdigit:
  5347                           	opt stack 28
  5348                           
  5349                           ;incstack = 0
  5350                           ;isdigit@c stored from wreg
  5351  003316  6E12               	movwf	isdigit@c,c
  5352  003318  0E00               	movlw	0
  5353  00331A  6E11               	movwf	_isdigit$712,c
  5354  00331C  0E3A               	movlw	58
  5355  00331E  6012               	cpfslt	isdigit@c,c
  5356  003320  D005               	goto	l2552
  5357  003322  0E2F               	movlw	47
  5358  003324  6412               	cpfsgt	isdigit@c,c
  5359  003326  D002               	goto	l2552
  5360  003328  0E01               	movlw	1
  5361  00332A  6E11               	movwf	_isdigit$712,c
  5362  00332C                     l2552:
  5363  00332C  C011  F010         	movff	_isdigit$712,??_isdigit
  5364  003330  3010               	rrcf	??_isdigit,w,c
  5365  003332  0012               	return	
  5366  003334                     __end_of_isdigit:
  5367                           	opt stack 0
  5368                           tblptru	equ	0xFF8
  5369                           tblptrh	equ	0xFF7
  5370                           tblptrl	equ	0xFF6
  5371                           tablat	equ	0xFF5
  5372                           prodh	equ	0xFF4
  5373                           prodl	equ	0xFF3
  5374                           intcon	equ	0xFF2
  5375                           postinc0	equ	0xFEE
  5376                           wreg	equ	0xFE8
  5377                           indf1	equ	0xFE7
  5378                           fsr1h	equ	0xFE2
  5379                           fsr1l	equ	0xFE1
  5380                           indf2	equ	0xFDF
  5381                           postinc2	equ	0xFDE
  5382                           postdec2	equ	0xFDD
  5383                           fsr2h	equ	0xFDA
  5384                           fsr2l	equ	0xFD9
  5385                           status	equ	0xFD8
  5386                           
  5387 ;; *************** function _fround *****************
  5388 ;; Defined at:
  5389 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  5390 ;; Parameters:    Size  Location     Type
  5391 ;;  prec            1    wreg     unsigned char 
  5392 ;; Auto vars:     Size  Location     Type
  5393 ;;  prec            1   59[COMRAM] unsigned char 
  5394 ;; Return value:  Size  Location     Type
  5395 ;;                  3   50[COMRAM] unsigned char 
  5396 ;; Registers used:
  5397 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5398 ;; Tracked objects:
  5399 ;;		On entry : 0/0
  5400 ;;		On exit  : 0/0
  5401 ;;		Unchanged: 0/0
  5402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5403 ;;      Params:         3       0       0       0       0       0       0       0       0
  5404 ;;      Locals:         7       0       0       0       0       0       0       0       0
  5405 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5406 ;;      Totals:        10       0       0       0       0       0       0       0       0
  5407 ;;Total ram usage:       10 bytes
  5408 ;; Hardware stack levels used:    1
  5409 ;; Hardware stack levels required when called:    3
  5410 ;; This function calls:
  5411 ;;		___awdiv
  5412 ;;		___awmod
  5413 ;;		___ftmul
  5414 ;;		___wmul
  5415 ;; This function is called by:
  5416 ;;		_sprintf
  5417 ;; This function uses a non-reentrant model
  5418 ;;
  5419                           
  5420                           	psect	text17
  5421  001994                     __ptext17:
  5422                           	opt stack 0
  5423  001994                     _fround:
  5424                           	opt stack 26
  5425                           
  5426                           ;incstack = 0
  5427                           ;fround@prec stored from wreg
  5428  001994  6E3C               	movwf	fround@prec,c
  5429                           
  5430                           ;doprnt.c: 413: if(prec>=110)
  5431  001996  0E6D               	movlw	109
  5432  001998  643C               	cpfsgt	fround@prec,c
  5433  00199A  D09F               	goto	l4096
  5434                           
  5435                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5436  00199C  0E00               	movlw	0
  5437  00199E  6E21               	movwf	___wmul@multiplicand+1,c
  5438  0019A0  0E03               	movlw	3
  5439  0019A2  6E20               	movwf	___wmul@multiplicand,c
  5440  0019A4  0E00               	movlw	0
  5441  0019A6  6E19               	movwf	___awdiv@divisor+1,c
  5442  0019A8  0E0A               	movlw	10
  5443  0019AA  6E18               	movwf	___awdiv@divisor,c
  5444  0019AC  0E00               	movlw	0
  5445  0019AE  6E13               	movwf	___awmod@divisor+1,c
  5446  0019B0  0E64               	movlw	100
  5447  0019B2  6E12               	movwf	___awmod@divisor,c
  5448  0019B4  C03C  F010         	movff	fround@prec,___awmod@dividend
  5449  0019B8  6A11               	clrf	___awmod@dividend+1,c
  5450  0019BA  EC7B  F017         	call	___awmod	;wreg free
  5451  0019BE  C010  F016         	movff	?___awmod,___awdiv@dividend
  5452  0019C2  C011  F017         	movff	?___awmod+1,___awdiv@dividend+1
  5453  0019C6  EC46  F016         	call	___awdiv	;wreg free
  5454  0019CA  0E09               	movlw	9
  5455  0019CC  2416               	addwf	?___awdiv,w,c
  5456  0019CE  6E1E               	movwf	___wmul@multiplier,c
  5457  0019D0  0E00               	movlw	0
  5458  0019D2  2017               	addwfc	?___awdiv+1,w,c
  5459  0019D4  6E1F               	movwf	___wmul@multiplier+1,c
  5460  0019D6  EC55  F019         	call	___wmul	;wreg free
  5461  0019DA  0E29               	movlw	low __npowers_
  5462  0019DC  241E               	addwf	?___wmul,w,c
  5463  0019DE  6EF6               	movwf	tblptrl,c
  5464  0019E0  0E08               	movlw	high __npowers_
  5465  0019E2  201F               	addwfc	?___wmul+1,w,c
  5466  0019E4  6EF7               	movwf	tblptrh,c
  5467  0019E6                     	if	0	;There are less than 3 active tblptr bytes
  5468  0019E6                     	endif
  5469  0019E6  0009               	tblrd		*+
  5470  0019E8  CFF5 F027          	movff	tablat,___ftmul@f2
  5471  0019EC  0009               	tblrd		*+
  5472  0019EE  CFF5 F028          	movff	tablat,___ftmul@f2+1
  5473  0019F2  000A               	tblrd		*-
  5474  0019F4  CFF5 F029          	movff	tablat,___ftmul@f2+2
  5475  0019F8  0E00               	movlw	0
  5476  0019FA  6E19               	movwf	___awdiv@divisor+1,c
  5477  0019FC  0E64               	movlw	100
  5478  0019FE  6E18               	movwf	___awdiv@divisor,c
  5479  001A00  C03C  F016         	movff	fround@prec,___awdiv@dividend
  5480  001A04  6A17               	clrf	___awdiv@dividend+1,c
  5481  001A06  EC46  F016         	call	___awdiv	;wreg free
  5482  001A0A  0E12               	movlw	18
  5483  001A0C  2416               	addwf	?___awdiv,w,c
  5484  001A0E  6E1E               	movwf	___wmul@multiplier,c
  5485  001A10  0E00               	movlw	0
  5486  001A12  2017               	addwfc	?___awdiv+1,w,c
  5487  001A14  6E1F               	movwf	___wmul@multiplier+1,c
  5488  001A16  0E00               	movlw	0
  5489  001A18  6E21               	movwf	___wmul@multiplicand+1,c
  5490  001A1A  0E03               	movlw	3
  5491  001A1C  6E20               	movwf	___wmul@multiplicand,c
  5492  001A1E  EC55  F019         	call	___wmul	;wreg free
  5493  001A22  0E29               	movlw	low __npowers_
  5494  001A24  241E               	addwf	?___wmul,w,c
  5495  001A26  6EF6               	movwf	tblptrl,c
  5496  001A28  0E08               	movlw	high __npowers_
  5497  001A2A  201F               	addwfc	?___wmul+1,w,c
  5498  001A2C  6EF7               	movwf	tblptrh,c
  5499  001A2E                     	if	0	;There are less than 3 active tblptr bytes
  5500  001A2E                     	endif
  5501  001A2E  0009               	tblrd		*+
  5502  001A30  CFF5 F024          	movff	tablat,___ftmul@f1
  5503  001A34  0009               	tblrd		*+
  5504  001A36  CFF5 F025          	movff	tablat,___ftmul@f1+1
  5505  001A3A  000A               	tblrd		*-
  5506  001A3C  CFF5 F026          	movff	tablat,___ftmul@f1+2
  5507  001A40  ECDA  F013         	call	___ftmul	;wreg free
  5508  001A44  C024  F039         	movff	?___ftmul,_fround$1060
  5509  001A48  C025  F03A         	movff	?___ftmul+1,_fround$1060+1
  5510  001A4C  C026  F03B         	movff	?___ftmul+2,_fround$1060+2
  5511                           
  5512                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5513  001A50  0E00               	movlw	0
  5514  001A52  6E21               	movwf	___wmul@multiplicand+1,c
  5515  001A54  0E03               	movlw	3
  5516  001A56  6E20               	movwf	___wmul@multiplicand,c
  5517  001A58  0E00               	movlw	0
  5518  001A5A  6E13               	movwf	___awmod@divisor+1,c
  5519  001A5C  0E0A               	movlw	10
  5520  001A5E  6E12               	movwf	___awmod@divisor,c
  5521  001A60  C03C  F010         	movff	fround@prec,___awmod@dividend
  5522  001A64  6A11               	clrf	___awmod@dividend+1,c
  5523  001A66  EC7B  F017         	call	___awmod	;wreg free
  5524  001A6A  C010  F01E         	movff	?___awmod,___wmul@multiplier
  5525  001A6E  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  5526  001A72  EC55  F019         	call	___wmul	;wreg free
  5527  001A76  0E29               	movlw	low __npowers_
  5528  001A78  241E               	addwf	?___wmul,w,c
  5529  001A7A  6EF6               	movwf	tblptrl,c
  5530  001A7C  0E08               	movlw	high __npowers_
  5531  001A7E  201F               	addwfc	?___wmul+1,w,c
  5532  001A80  6EF7               	movwf	tblptrh,c
  5533  001A82                     	if	0	;There are less than 3 active tblptr bytes
  5534  001A82                     	endif
  5535  001A82  0009               	tblrd		*+
  5536  001A84  CFF5 F027          	movff	tablat,___ftmul@f2
  5537  001A88  0009               	tblrd		*+
  5538  001A8A  CFF5 F028          	movff	tablat,___ftmul@f2+1
  5539  001A8E  000A               	tblrd		*-
  5540  001A90  CFF5 F029          	movff	tablat,___ftmul@f2+2
  5541  001A94  C039  F024         	movff	_fround$1060,___ftmul@f1
  5542  001A98  C03A  F025         	movff	_fround$1060+1,___ftmul@f1+1
  5543  001A9C  C03B  F026         	movff	_fround$1060+2,___ftmul@f1+2
  5544  001AA0  ECDA  F013         	call	___ftmul	;wreg free
  5545  001AA4  C024  F036         	movff	?___ftmul,_fround$1061
  5546  001AA8  C025  F037         	movff	?___ftmul+1,_fround$1061+1
  5547  001AAC  C026  F038         	movff	?___ftmul+2,_fround$1061+2
  5548                           
  5549                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5550  001AB0  C036  F024         	movff	_fround$1061,___ftmul@f1
  5551  001AB4  C037  F025         	movff	_fround$1061+1,___ftmul@f1+1
  5552  001AB8  C038  F026         	movff	_fround$1061+2,___ftmul@f1+2
  5553  001ABC  0E00               	movlw	0
  5554  001ABE  6E27               	movwf	___ftmul@f2,c
  5555  001AC0  0E00               	movlw	0
  5556  001AC2  6E28               	movwf	___ftmul@f2+1,c
  5557  001AC4  0E3F               	movlw	63
  5558  001AC6  6E29               	movwf	___ftmul@f2+2,c
  5559  001AC8  ECDA  F013         	call	___ftmul	;wreg free
  5560  001ACC  C024  F033         	movff	?___ftmul,?_fround
  5561  001AD0  C025  F034         	movff	?___ftmul+1,?_fround+1
  5562  001AD4  C026  F035         	movff	?___ftmul+2,?_fround+2
  5563  001AD8  0012               	return	
  5564  001ADA                     l4096:
  5565                           
  5566                           ;doprnt.c: 415: else if(prec > 10)
  5567  001ADA  0E0A               	movlw	10
  5568  001ADC  643C               	cpfsgt	fround@prec,c
  5569  001ADE  D05D               	goto	l4104
  5570                           
  5571                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5572  001AE0  0E00               	movlw	0
  5573  001AE2  6E21               	movwf	___wmul@multiplicand+1,c
  5574  001AE4  0E03               	movlw	3
  5575  001AE6  6E20               	movwf	___wmul@multiplicand,c
  5576  001AE8  0E00               	movlw	0
  5577  001AEA  6E13               	movwf	___awmod@divisor+1,c
  5578  001AEC  0E0A               	movlw	10
  5579  001AEE  6E12               	movwf	___awmod@divisor,c
  5580  001AF0  C03C  F010         	movff	fround@prec,___awmod@dividend
  5581  001AF4  6A11               	clrf	___awmod@dividend+1,c
  5582  001AF6  EC7B  F017         	call	___awmod	;wreg free
  5583  001AFA  C010  F01E         	movff	?___awmod,___wmul@multiplier
  5584  001AFE  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  5585  001B02  EC55  F019         	call	___wmul	;wreg free
  5586  001B06  0E29               	movlw	low __npowers_
  5587  001B08  241E               	addwf	?___wmul,w,c
  5588  001B0A  6EF6               	movwf	tblptrl,c
  5589  001B0C  0E08               	movlw	high __npowers_
  5590  001B0E  201F               	addwfc	?___wmul+1,w,c
  5591  001B10  6EF7               	movwf	tblptrh,c
  5592  001B12                     	if	0	;There are less than 3 active tblptr bytes
  5593  001B12                     	endif
  5594  001B12  0009               	tblrd		*+
  5595  001B14  CFF5 F027          	movff	tablat,___ftmul@f2
  5596  001B18  0009               	tblrd		*+
  5597  001B1A  CFF5 F028          	movff	tablat,___ftmul@f2+1
  5598  001B1E  000A               	tblrd		*-
  5599  001B20  CFF5 F029          	movff	tablat,___ftmul@f2+2
  5600  001B24  0E00               	movlw	0
  5601  001B26  6E19               	movwf	___awdiv@divisor+1,c
  5602  001B28  0E0A               	movlw	10
  5603  001B2A  6E18               	movwf	___awdiv@divisor,c
  5604  001B2C  C03C  F016         	movff	fround@prec,___awdiv@dividend
  5605  001B30  6A17               	clrf	___awdiv@dividend+1,c
  5606  001B32  EC46  F016         	call	___awdiv	;wreg free
  5607  001B36  0E09               	movlw	9
  5608  001B38  2416               	addwf	?___awdiv,w,c
  5609  001B3A  6E1E               	movwf	___wmul@multiplier,c
  5610  001B3C  0E00               	movlw	0
  5611  001B3E  2017               	addwfc	?___awdiv+1,w,c
  5612  001B40  6E1F               	movwf	___wmul@multiplier+1,c
  5613  001B42  0E00               	movlw	0
  5614  001B44  6E21               	movwf	___wmul@multiplicand+1,c
  5615  001B46  0E03               	movlw	3
  5616  001B48  6E20               	movwf	___wmul@multiplicand,c
  5617  001B4A  EC55  F019         	call	___wmul	;wreg free
  5618  001B4E  0E29               	movlw	low __npowers_
  5619  001B50  241E               	addwf	?___wmul,w,c
  5620  001B52  6EF6               	movwf	tblptrl,c
  5621  001B54  0E08               	movlw	high __npowers_
  5622  001B56  201F               	addwfc	?___wmul+1,w,c
  5623  001B58  6EF7               	movwf	tblptrh,c
  5624  001B5A                     	if	0	;There are less than 3 active tblptr bytes
  5625  001B5A                     	endif
  5626  001B5A  0009               	tblrd		*+
  5627  001B5C  CFF5 F024          	movff	tablat,___ftmul@f1
  5628  001B60  0009               	tblrd		*+
  5629  001B62  CFF5 F025          	movff	tablat,___ftmul@f1+1
  5630  001B66  000A               	tblrd		*-
  5631  001B68  CFF5 F026          	movff	tablat,___ftmul@f1+2
  5632  001B6C  ECDA  F013         	call	___ftmul	;wreg free
  5633  001B70  C024  F039         	movff	?___ftmul,_fround$1060
  5634  001B74  C025  F03A         	movff	?___ftmul+1,_fround$1060+1
  5635  001B78  C026  F03B         	movff	?___ftmul+2,_fround$1060+2
  5636                           
  5637                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5638  001B7C  C039  F024         	movff	_fround$1060,___ftmul@f1
  5639  001B80  C03A  F025         	movff	_fround$1060+1,___ftmul@f1+1
  5640  001B84  C03B  F026         	movff	_fround$1060+2,___ftmul@f1+2
  5641  001B88  0E00               	movlw	0
  5642  001B8A  6E27               	movwf	___ftmul@f2,c
  5643  001B8C  0E00               	movlw	0
  5644  001B8E  6E28               	movwf	___ftmul@f2+1,c
  5645  001B90  0E3F               	movlw	63
  5646  001B92  6E29               	movwf	___ftmul@f2+2,c
  5647  001B94  ECDA  F013         	call	___ftmul	;wreg free
  5648  001B98  D799               	goto	L5
  5649  001B9A                     l4104:
  5650                           
  5651                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5652  001B9A  503C               	movf	fround@prec,w,c
  5653  001B9C  0D03               	mullw	3
  5654  001B9E  0E29               	movlw	low __npowers_
  5655  001BA0  24F3               	addwf	prodl,w,c
  5656  001BA2  6EF6               	movwf	tblptrl,c
  5657  001BA4  0E08               	movlw	high __npowers_
  5658  001BA6  20F4               	addwfc	prodh,w,c
  5659  001BA8  6EF7               	movwf	tblptrh,c
  5660  001BAA                     	if	0	;There are less than 3 active tblptr bytes
  5661  001BAA                     	endif
  5662  001BAA  0009               	tblrd		*+
  5663  001BAC  CFF5 F024          	movff	tablat,___ftmul@f1
  5664  001BB0  0009               	tblrd		*+
  5665  001BB2  CFF5 F025          	movff	tablat,___ftmul@f1+1
  5666  001BB6  000A               	tblrd		*-
  5667  001BB8  CFF5 F026          	movff	tablat,___ftmul@f1+2
  5668  001BBC  0E00               	movlw	0
  5669  001BBE  6E27               	movwf	___ftmul@f2,c
  5670  001BC0  0E00               	movlw	0
  5671  001BC2  6E28               	movwf	___ftmul@f2+1,c
  5672  001BC4  0E3F               	movlw	63
  5673  001BC6  6E29               	movwf	___ftmul@f2+2,c
  5674  001BC8  ECDA  F013         	call	___ftmul	;wreg free
  5675  001BCC  C024  F033         	movff	?___ftmul,?_fround
  5676  001BD0  C025  F034         	movff	?___ftmul+1,?_fround+1
  5677  001BD4  C026  F035         	movff	?___ftmul+2,?_fround+2
  5678  001BD8  0012               	return	
  5679  001BDA                     __end_of_fround:
  5680                           	opt stack 0
  5681                           tblptru	equ	0xFF8
  5682                           tblptrh	equ	0xFF7
  5683                           tblptrl	equ	0xFF6
  5684                           tablat	equ	0xFF5
  5685                           prodh	equ	0xFF4
  5686                           prodl	equ	0xFF3
  5687                           intcon	equ	0xFF2
  5688                           postinc0	equ	0xFEE
  5689                           wreg	equ	0xFE8
  5690                           indf1	equ	0xFE7
  5691                           fsr1h	equ	0xFE2
  5692                           fsr1l	equ	0xFE1
  5693                           indf2	equ	0xFDF
  5694                           postinc2	equ	0xFDE
  5695                           postdec2	equ	0xFDD
  5696                           fsr2h	equ	0xFDA
  5697                           fsr2l	equ	0xFD9
  5698                           status	equ	0xFD8
  5699                           
  5700 ;; *************** function ___wmul *****************
  5701 ;; Defined at:
  5702 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  5703 ;; Parameters:    Size  Location     Type
  5704 ;;  multiplier      2   29[COMRAM] unsigned int 
  5705 ;;  multiplicand    2   31[COMRAM] unsigned int 
  5706 ;; Auto vars:     Size  Location     Type
  5707 ;;  product         2   33[COMRAM] unsigned int 
  5708 ;; Return value:  Size  Location     Type
  5709 ;;                  2   29[COMRAM] unsigned int 
  5710 ;; Registers used:
  5711 ;;		wreg, status,2, status,0, prodl, prodh
  5712 ;; Tracked objects:
  5713 ;;		On entry : 0/0
  5714 ;;		On exit  : 0/0
  5715 ;;		Unchanged: 0/0
  5716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5717 ;;      Params:         4       0       0       0       0       0       0       0       0
  5718 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5719 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5720 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5721 ;;Total ram usage:        6 bytes
  5722 ;; Hardware stack levels used:    1
  5723 ;; Hardware stack levels required when called:    1
  5724 ;; This function calls:
  5725 ;;		Nothing
  5726 ;; This function is called by:
  5727 ;;		_fround
  5728 ;;		_scale
  5729 ;;		_sprintf
  5730 ;; This function uses a non-reentrant model
  5731 ;;
  5732                           
  5733                           	psect	text18
  5734  0032AA                     __ptext18:
  5735                           	opt stack 0
  5736  0032AA                     ___wmul:
  5737                           	opt stack 27
  5738                           
  5739                           ;incstack = 0
  5740  0032AA  501E               	movf	___wmul@multiplier,w,c
  5741  0032AC  0220               	mulwf	___wmul@multiplicand,c
  5742  0032AE  CFF3 F022          	movff	prodl,___wmul@product
  5743  0032B2  CFF4 F023          	movff	prodh,___wmul@product+1
  5744  0032B6  501E               	movf	___wmul@multiplier,w,c
  5745  0032B8  0221               	mulwf	___wmul@multiplicand+1,c
  5746  0032BA  50F3               	movf	prodl,w,c
  5747  0032BC  2623               	addwf	___wmul@product+1,f,c
  5748  0032BE  501F               	movf	___wmul@multiplier+1,w,c
  5749  0032C0  0220               	mulwf	___wmul@multiplicand,c
  5750  0032C2  50F3               	movf	prodl,w,c
  5751  0032C4  2623               	addwf	___wmul@product+1,f,c
  5752  0032C6  C022  F01E         	movff	___wmul@product,?___wmul
  5753  0032CA  C023  F01F         	movff	___wmul@product+1,?___wmul+1
  5754  0032CE  0012               	return	
  5755  0032D0                     __end_of___wmul:
  5756                           	opt stack 0
  5757                           tblptru	equ	0xFF8
  5758                           tblptrh	equ	0xFF7
  5759                           tblptrl	equ	0xFF6
  5760                           tablat	equ	0xFF5
  5761                           prodh	equ	0xFF4
  5762                           prodl	equ	0xFF3
  5763                           intcon	equ	0xFF2
  5764                           postinc0	equ	0xFEE
  5765                           wreg	equ	0xFE8
  5766                           indf1	equ	0xFE7
  5767                           fsr1h	equ	0xFE2
  5768                           fsr1l	equ	0xFE1
  5769                           indf2	equ	0xFDF
  5770                           postinc2	equ	0xFDE
  5771                           postdec2	equ	0xFDD
  5772                           fsr2h	equ	0xFDA
  5773                           fsr2l	equ	0xFD9
  5774                           status	equ	0xFD8
  5775                           
  5776 ;; *************** function ___ftmul *****************
  5777 ;; Defined at:
  5778 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  5779 ;; Parameters:    Size  Location     Type
  5780 ;;  f1              3   35[COMRAM] float 
  5781 ;;  f2              3   38[COMRAM] float 
  5782 ;; Auto vars:     Size  Location     Type
  5783 ;;  f3_as_produc    3   45[COMRAM] unsigned um
  5784 ;;  sign            1   49[COMRAM] unsigned char 
  5785 ;;  cntr            1   48[COMRAM] unsigned char 
  5786 ;;  exp             1   44[COMRAM] unsigned char 
  5787 ;; Return value:  Size  Location     Type
  5788 ;;                  3   35[COMRAM] float 
  5789 ;; Registers used:
  5790 ;;		wreg, status,2, status,0, cstack
  5791 ;; Tracked objects:
  5792 ;;		On entry : 0/0
  5793 ;;		On exit  : 0/0
  5794 ;;		Unchanged: 0/0
  5795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5796 ;;      Params:         6       0       0       0       0       0       0       0       0
  5797 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5798 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5799 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5800 ;;Total ram usage:       15 bytes
  5801 ;; Hardware stack levels used:    1
  5802 ;; Hardware stack levels required when called:    2
  5803 ;; This function calls:
  5804 ;;		___ftpack
  5805 ;; This function is called by:
  5806 ;;		_convert_to_degrees
  5807 ;;		_fround
  5808 ;;		_scale
  5809 ;;		_sprintf
  5810 ;;		_strtod
  5811 ;; This function uses a non-reentrant model
  5812 ;;
  5813                           
  5814                           	psect	text19
  5815  0027B4                     __ptext19:
  5816                           	opt stack 0
  5817  0027B4                     ___ftmul:
  5818                           	opt stack 26
  5819                           
  5820                           ;incstack = 0
  5821  0027B4  C026  F02A         	movff	___ftmul@f1+2,??___ftmul
  5822  0027B8  6A2B               	clrf	(??___ftmul+1)& (0+255),c
  5823  0027BA  6A2C               	clrf	(??___ftmul+2)& (0+255),c
  5824  0027BC  3425               	rlcf	___ftmul@f1+1,w,c
  5825  0027BE  362A               	rlcf	??___ftmul& (0+255),f,c
  5826  0027C0  E301               	bnc	u4551
  5827  0027C2  802B               	bsf	(??___ftmul+1)& (0+255),0,c
  5828  0027C4                     u4551:
  5829  0027C4  502A               	movf	??___ftmul,w,c
  5830  0027C6  6E2D               	movwf	___ftmul@exp,c
  5831  0027C8  502D               	movf	___ftmul@exp,w,c
  5832  0027CA  A4D8               	btfss	status,2,c
  5833  0027CC  D007               	goto	l4044
  5834  0027CE  0E00               	movlw	0
  5835  0027D0  6E24               	movwf	?___ftmul,c
  5836  0027D2  0E00               	movlw	0
  5837  0027D4  6E25               	movwf	?___ftmul+1,c
  5838  0027D6  0E00               	movlw	0
  5839  0027D8  6E26               	movwf	?___ftmul+2,c
  5840  0027DA  0012               	return	
  5841  0027DC                     l4044:
  5842  0027DC  C029  F02A         	movff	___ftmul@f2+2,??___ftmul
  5843  0027E0  6A2B               	clrf	(??___ftmul+1)& (0+255),c
  5844  0027E2  6A2C               	clrf	(??___ftmul+2)& (0+255),c
  5845  0027E4  3428               	rlcf	___ftmul@f2+1,w,c
  5846  0027E6  362A               	rlcf	??___ftmul& (0+255),f,c
  5847  0027E8  E301               	bnc	u4571
  5848  0027EA  802B               	bsf	(??___ftmul+1)& (0+255),0,c
  5849  0027EC                     u4571:
  5850  0027EC  502A               	movf	??___ftmul,w,c
  5851  0027EE  6E32               	movwf	___ftmul@sign,c
  5852  0027F0  5032               	movf	___ftmul@sign,w,c
  5853  0027F2  A4D8               	btfss	status,2,c
  5854  0027F4  D007               	goto	l4050
  5855  0027F6  0E00               	movlw	0
  5856  0027F8  6E24               	movwf	?___ftmul,c
  5857  0027FA  0E00               	movlw	0
  5858  0027FC  6E25               	movwf	?___ftmul+1,c
  5859  0027FE  0E00               	movlw	0
  5860  002800  6E26               	movwf	?___ftmul+2,c
  5861  002802  0012               	return	
  5862  002804                     l4050:
  5863  002804  5032               	movf	___ftmul@sign,w,c
  5864  002806  0F7B               	addlw	123
  5865  002808  262D               	addwf	___ftmul@exp,f,c
  5866  00280A  C026  F032         	movff	___ftmul@f1+2,___ftmul@sign
  5867  00280E  5029               	movf	___ftmul@f2+2,w,c
  5868  002810  1A32               	xorwf	___ftmul@sign,f,c
  5869  002812  0E80               	movlw	128
  5870  002814  1632               	andwf	___ftmul@sign,f,c
  5871  002816  8E25               	bsf	___ftmul@f1+1,7,c
  5872  002818  8E28               	bsf	___ftmul@f2+1,7,c
  5873  00281A  0EFF               	movlw	255
  5874  00281C  1627               	andwf	___ftmul@f2,f,c
  5875  00281E  0EFF               	movlw	255
  5876  002820  1628               	andwf	___ftmul@f2+1,f,c
  5877  002822  0E00               	movlw	0
  5878  002824  1629               	andwf	___ftmul@f2+2,f,c
  5879  002826  0E00               	movlw	0
  5880  002828  6E2E               	movwf	___ftmul@f3_as_product,c
  5881  00282A  0E00               	movlw	0
  5882  00282C  6E2F               	movwf	___ftmul@f3_as_product+1,c
  5883  00282E  0E00               	movlw	0
  5884  002830  6E30               	movwf	___ftmul@f3_as_product+2,c
  5885  002832  0E07               	movlw	7
  5886  002834  6E31               	movwf	___ftmul@cntr,c
  5887  002836                     l4064:
  5888  002836  A024               	btfss	___ftmul@f1,0,c
  5889  002838  D006               	goto	l4068
  5890  00283A  5027               	movf	___ftmul@f2,w,c
  5891  00283C  262E               	addwf	___ftmul@f3_as_product,f,c
  5892  00283E  5028               	movf	___ftmul@f2+1,w,c
  5893  002840  222F               	addwfc	___ftmul@f3_as_product+1,f,c
  5894  002842  5029               	movf	___ftmul@f2+2,w,c
  5895  002844  2230               	addwfc	___ftmul@f3_as_product+2,f,c
  5896  002846                     l4068:
  5897  002846  90D8               	bcf	status,0,c
  5898  002848  3226               	rrcf	___ftmul@f1+2,f,c
  5899  00284A  3225               	rrcf	___ftmul@f1+1,f,c
  5900  00284C  3224               	rrcf	___ftmul@f1,f,c
  5901  00284E  90D8               	bcf	status,0,c
  5902  002850  3627               	rlcf	___ftmul@f2,f,c
  5903  002852  3628               	rlcf	___ftmul@f2+1,f,c
  5904  002854  3629               	rlcf	___ftmul@f2+2,f,c
  5905  002856  2E31               	decfsz	___ftmul@cntr,f,c
  5906  002858  D7EE               	goto	l4064
  5907  00285A  0E09               	movlw	9
  5908  00285C  6E31               	movwf	___ftmul@cntr,c
  5909  00285E                     l4074:
  5910  00285E  A024               	btfss	___ftmul@f1,0,c
  5911  002860  D006               	goto	l4078
  5912  002862  5027               	movf	___ftmul@f2,w,c
  5913  002864  262E               	addwf	___ftmul@f3_as_product,f,c
  5914  002866  5028               	movf	___ftmul@f2+1,w,c
  5915  002868  222F               	addwfc	___ftmul@f3_as_product+1,f,c
  5916  00286A  5029               	movf	___ftmul@f2+2,w,c
  5917  00286C  2230               	addwfc	___ftmul@f3_as_product+2,f,c
  5918  00286E                     l4078:
  5919  00286E  90D8               	bcf	status,0,c
  5920  002870  3226               	rrcf	___ftmul@f1+2,f,c
  5921  002872  3225               	rrcf	___ftmul@f1+1,f,c
  5922  002874  3224               	rrcf	___ftmul@f1,f,c
  5923  002876  90D8               	bcf	status,0,c
  5924  002878  3230               	rrcf	___ftmul@f3_as_product+2,f,c
  5925  00287A  322F               	rrcf	___ftmul@f3_as_product+1,f,c
  5926  00287C  322E               	rrcf	___ftmul@f3_as_product,f,c
  5927  00287E  2E31               	decfsz	___ftmul@cntr,f,c
  5928  002880  D7EE               	goto	l4074
  5929  002882  C02E  F010         	movff	___ftmul@f3_as_product,___ftpack@arg
  5930  002886  C02F  F011         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5931  00288A  C030  F012         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5932  00288E  C02D  F013         	movff	___ftmul@exp,___ftpack@exp
  5933  002892  C032  F014         	movff	___ftmul@sign,___ftpack@sign
  5934  002896  ECC7  F014         	call	___ftpack	;wreg free
  5935  00289A  C010  F024         	movff	?___ftpack,?___ftmul
  5936  00289E  C011  F025         	movff	?___ftpack+1,?___ftmul+1
  5937  0028A2  C012  F026         	movff	?___ftpack+2,?___ftmul+2
  5938  0028A6  0012               	return	
  5939  0028A8                     __end_of___ftmul:
  5940                           	opt stack 0
  5941                           tblptru	equ	0xFF8
  5942                           tblptrh	equ	0xFF7
  5943                           tblptrl	equ	0xFF6
  5944                           tablat	equ	0xFF5
  5945                           prodh	equ	0xFF4
  5946                           prodl	equ	0xFF3
  5947                           intcon	equ	0xFF2
  5948                           postinc0	equ	0xFEE
  5949                           wreg	equ	0xFE8
  5950                           indf1	equ	0xFE7
  5951                           fsr1h	equ	0xFE2
  5952                           fsr1l	equ	0xFE1
  5953                           indf2	equ	0xFDF
  5954                           postinc2	equ	0xFDE
  5955                           postdec2	equ	0xFDD
  5956                           fsr2h	equ	0xFDA
  5957                           fsr2l	equ	0xFD9
  5958                           status	equ	0xFD8
  5959                           
  5960 ;; *************** function ___awmod *****************
  5961 ;; Defined at:
  5962 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  5963 ;; Parameters:    Size  Location     Type
  5964 ;;  dividend        2   15[COMRAM] int 
  5965 ;;  divisor         2   17[COMRAM] int 
  5966 ;; Auto vars:     Size  Location     Type
  5967 ;;  sign            1   20[COMRAM] unsigned char 
  5968 ;;  counter         1   19[COMRAM] unsigned char 
  5969 ;; Return value:  Size  Location     Type
  5970 ;;                  2   15[COMRAM] int 
  5971 ;; Registers used:
  5972 ;;		wreg, status,2, status,0
  5973 ;; Tracked objects:
  5974 ;;		On entry : 0/0
  5975 ;;		On exit  : 0/0
  5976 ;;		Unchanged: 0/0
  5977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5978 ;;      Params:         4       0       0       0       0       0       0       0       0
  5979 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5980 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5981 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5982 ;;Total ram usage:        6 bytes
  5983 ;; Hardware stack levels used:    1
  5984 ;; Hardware stack levels required when called:    1
  5985 ;; This function calls:
  5986 ;;		Nothing
  5987 ;; This function is called by:
  5988 ;;		_fround
  5989 ;;		_scale
  5990 ;; This function uses a non-reentrant model
  5991 ;;
  5992                           
  5993                           	psect	text20
  5994  002EF6                     __ptext20:
  5995                           	opt stack 0
  5996  002EF6                     ___awmod:
  5997                           	opt stack 27
  5998                           
  5999                           ;incstack = 0
  6000  002EF6  0E00               	movlw	0
  6001  002EF8  6E15               	movwf	___awmod@sign,c
  6002  002EFA  AE11               	btfss	___awmod@dividend+1,7,c
  6003  002EFC  D006               	goto	l2818
  6004  002EFE  6C10               	negf	___awmod@dividend,c
  6005  002F00  1E11               	comf	___awmod@dividend+1,f,c
  6006  002F02  B0D8               	btfsc	status,0,c
  6007  002F04  2A11               	incf	___awmod@dividend+1,f,c
  6008  002F06  0E01               	movlw	1
  6009  002F08  6E15               	movwf	___awmod@sign,c
  6010  002F0A                     l2818:
  6011  002F0A  AE13               	btfss	___awmod@divisor+1,7,c
  6012  002F0C  D004               	goto	l2822
  6013  002F0E  6C12               	negf	___awmod@divisor,c
  6014  002F10  1E13               	comf	___awmod@divisor+1,f,c
  6015  002F12  B0D8               	btfsc	status,0,c
  6016  002F14  2A13               	incf	___awmod@divisor+1,f,c
  6017  002F16                     l2822:
  6018  002F16  5012               	movf	___awmod@divisor,w,c
  6019  002F18  1013               	iorwf	___awmod@divisor+1,w,c
  6020  002F1A  B4D8               	btfsc	status,2,c
  6021  002F1C  D018               	goto	l2838
  6022  002F1E  0E01               	movlw	1
  6023  002F20  6E14               	movwf	___awmod@counter,c
  6024  002F22  D004               	goto	l2828
  6025  002F24                     l2826:
  6026  002F24  90D8               	bcf	status,0,c
  6027  002F26  3612               	rlcf	___awmod@divisor,f,c
  6028  002F28  3613               	rlcf	___awmod@divisor+1,f,c
  6029  002F2A  2A14               	incf	___awmod@counter,f,c
  6030  002F2C                     l2828:
  6031  002F2C  AE13               	btfss	___awmod@divisor+1,7,c
  6032  002F2E  D7FA               	goto	l2826
  6033  002F30                     l2830:
  6034  002F30  5012               	movf	___awmod@divisor,w,c
  6035  002F32  5C10               	subwf	___awmod@dividend,w,c
  6036  002F34  5013               	movf	___awmod@divisor+1,w,c
  6037  002F36  5811               	subwfb	___awmod@dividend+1,w,c
  6038  002F38  A0D8               	btfss	status,0,c
  6039  002F3A  D004               	goto	l2834
  6040  002F3C  5012               	movf	___awmod@divisor,w,c
  6041  002F3E  5E10               	subwf	___awmod@dividend,f,c
  6042  002F40  5013               	movf	___awmod@divisor+1,w,c
  6043  002F42  5A11               	subwfb	___awmod@dividend+1,f,c
  6044  002F44                     l2834:
  6045  002F44  90D8               	bcf	status,0,c
  6046  002F46  3213               	rrcf	___awmod@divisor+1,f,c
  6047  002F48  3212               	rrcf	___awmod@divisor,f,c
  6048  002F4A  2E14               	decfsz	___awmod@counter,f,c
  6049  002F4C  D7F1               	goto	l2830
  6050  002F4E                     l2838:
  6051  002F4E  5015               	movf	___awmod@sign,w,c
  6052  002F50  B4D8               	btfsc	status,2,c
  6053  002F52  D004               	goto	l2842
  6054  002F54  6C10               	negf	___awmod@dividend,c
  6055  002F56  1E11               	comf	___awmod@dividend+1,f,c
  6056  002F58  B0D8               	btfsc	status,0,c
  6057  002F5A  2A11               	incf	___awmod@dividend+1,f,c
  6058  002F5C                     l2842:
  6059  002F5C  C010  F010         	movff	___awmod@dividend,?___awmod
  6060  002F60  C011  F011         	movff	___awmod@dividend+1,?___awmod+1
  6061  002F64  0012               	return	
  6062  002F66                     __end_of___awmod:
  6063                           	opt stack 0
  6064                           tblptru	equ	0xFF8
  6065                           tblptrh	equ	0xFF7
  6066                           tblptrl	equ	0xFF6
  6067                           tablat	equ	0xFF5
  6068                           prodh	equ	0xFF4
  6069                           prodl	equ	0xFF3
  6070                           intcon	equ	0xFF2
  6071                           postinc0	equ	0xFEE
  6072                           wreg	equ	0xFE8
  6073                           indf1	equ	0xFE7
  6074                           fsr1h	equ	0xFE2
  6075                           fsr1l	equ	0xFE1
  6076                           indf2	equ	0xFDF
  6077                           postinc2	equ	0xFDE
  6078                           postdec2	equ	0xFDD
  6079                           fsr2h	equ	0xFDA
  6080                           fsr2l	equ	0xFD9
  6081                           status	equ	0xFD8
  6082                           
  6083 ;; *************** function ___awdiv *****************
  6084 ;; Defined at:
  6085 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  6086 ;; Parameters:    Size  Location     Type
  6087 ;;  dividend        2   21[COMRAM] int 
  6088 ;;  divisor         2   23[COMRAM] int 
  6089 ;; Auto vars:     Size  Location     Type
  6090 ;;  quotient        2   27[COMRAM] int 
  6091 ;;  sign            1   26[COMRAM] unsigned char 
  6092 ;;  counter         1   25[COMRAM] unsigned char 
  6093 ;; Return value:  Size  Location     Type
  6094 ;;                  2   21[COMRAM] int 
  6095 ;; Registers used:
  6096 ;;		wreg, status,2, status,0
  6097 ;; Tracked objects:
  6098 ;;		On entry : 0/0
  6099 ;;		On exit  : 0/0
  6100 ;;		Unchanged: 0/0
  6101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6102 ;;      Params:         4       0       0       0       0       0       0       0       0
  6103 ;;      Locals:         4       0       0       0       0       0       0       0       0
  6104 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6105 ;;      Totals:         8       0       0       0       0       0       0       0       0
  6106 ;;Total ram usage:        8 bytes
  6107 ;; Hardware stack levels used:    1
  6108 ;; Hardware stack levels required when called:    1
  6109 ;; This function calls:
  6110 ;;		Nothing
  6111 ;; This function is called by:
  6112 ;;		_fround
  6113 ;;		_scale
  6114 ;;		_sprintf
  6115 ;; This function uses a non-reentrant model
  6116 ;;
  6117                           
  6118                           	psect	text21
  6119  002C8C                     __ptext21:
  6120                           	opt stack 0
  6121  002C8C                     ___awdiv:
  6122                           	opt stack 27
  6123                           
  6124                           ;incstack = 0
  6125  002C8C  0E00               	movlw	0
  6126  002C8E  6E1B               	movwf	___awdiv@sign,c
  6127  002C90  AE19               	btfss	___awdiv@divisor+1,7,c
  6128  002C92  D006               	goto	l2774
  6129  002C94  6C18               	negf	___awdiv@divisor,c
  6130  002C96  1E19               	comf	___awdiv@divisor+1,f,c
  6131  002C98  B0D8               	btfsc	status,0,c
  6132  002C9A  2A19               	incf	___awdiv@divisor+1,f,c
  6133  002C9C  0E01               	movlw	1
  6134  002C9E  6E1B               	movwf	___awdiv@sign,c
  6135  002CA0                     l2774:
  6136  002CA0  AE17               	btfss	___awdiv@dividend+1,7,c
  6137  002CA2  D006               	goto	l2780
  6138  002CA4  6C16               	negf	___awdiv@dividend,c
  6139  002CA6  1E17               	comf	___awdiv@dividend+1,f,c
  6140  002CA8  B0D8               	btfsc	status,0,c
  6141  002CAA  2A17               	incf	___awdiv@dividend+1,f,c
  6142  002CAC  0E01               	movlw	1
  6143  002CAE  1A1B               	xorwf	___awdiv@sign,f,c
  6144  002CB0                     l2780:
  6145  002CB0  0E00               	movlw	0
  6146  002CB2  6E1D               	movwf	___awdiv@quotient+1,c
  6147  002CB4  0E00               	movlw	0
  6148  002CB6  6E1C               	movwf	___awdiv@quotient,c
  6149  002CB8  5018               	movf	___awdiv@divisor,w,c
  6150  002CBA  1019               	iorwf	___awdiv@divisor+1,w,c
  6151  002CBC  B4D8               	btfsc	status,2,c
  6152  002CBE  D01C               	goto	l2802
  6153  002CC0  0E01               	movlw	1
  6154  002CC2  6E1A               	movwf	___awdiv@counter,c
  6155  002CC4  D004               	goto	l2788
  6156  002CC6                     l2786:
  6157  002CC6  90D8               	bcf	status,0,c
  6158  002CC8  3618               	rlcf	___awdiv@divisor,f,c
  6159  002CCA  3619               	rlcf	___awdiv@divisor+1,f,c
  6160  002CCC  2A1A               	incf	___awdiv@counter,f,c
  6161  002CCE                     l2788:
  6162  002CCE  AE19               	btfss	___awdiv@divisor+1,7,c
  6163  002CD0  D7FA               	goto	l2786
  6164  002CD2                     l2790:
  6165  002CD2  90D8               	bcf	status,0,c
  6166  002CD4  361C               	rlcf	___awdiv@quotient,f,c
  6167  002CD6  361D               	rlcf	___awdiv@quotient+1,f,c
  6168  002CD8  5018               	movf	___awdiv@divisor,w,c
  6169  002CDA  5C16               	subwf	___awdiv@dividend,w,c
  6170  002CDC  5019               	movf	___awdiv@divisor+1,w,c
  6171  002CDE  5817               	subwfb	___awdiv@dividend+1,w,c
  6172  002CE0  A0D8               	btfss	status,0,c
  6173  002CE2  D005               	goto	l2798
  6174  002CE4  5018               	movf	___awdiv@divisor,w,c
  6175  002CE6  5E16               	subwf	___awdiv@dividend,f,c
  6176  002CE8  5019               	movf	___awdiv@divisor+1,w,c
  6177  002CEA  5A17               	subwfb	___awdiv@dividend+1,f,c
  6178  002CEC  801C               	bsf	___awdiv@quotient,0,c
  6179  002CEE                     l2798:
  6180  002CEE  90D8               	bcf	status,0,c
  6181  002CF0  3219               	rrcf	___awdiv@divisor+1,f,c
  6182  002CF2  3218               	rrcf	___awdiv@divisor,f,c
  6183  002CF4  2E1A               	decfsz	___awdiv@counter,f,c
  6184  002CF6  D7ED               	goto	l2790
  6185  002CF8                     l2802:
  6186  002CF8  501B               	movf	___awdiv@sign,w,c
  6187  002CFA  B4D8               	btfsc	status,2,c
  6188  002CFC  D004               	goto	l2806
  6189  002CFE  6C1C               	negf	___awdiv@quotient,c
  6190  002D00  1E1D               	comf	___awdiv@quotient+1,f,c
  6191  002D02  B0D8               	btfsc	status,0,c
  6192  002D04  2A1D               	incf	___awdiv@quotient+1,f,c
  6193  002D06                     l2806:
  6194  002D06  C01C  F016         	movff	___awdiv@quotient,?___awdiv
  6195  002D0A  C01D  F017         	movff	___awdiv@quotient+1,?___awdiv+1
  6196  002D0E  0012               	return	
  6197  002D10                     __end_of___awdiv:
  6198                           	opt stack 0
  6199                           tblptru	equ	0xFF8
  6200                           tblptrh	equ	0xFF7
  6201                           tblptrl	equ	0xFF6
  6202                           tablat	equ	0xFF5
  6203                           prodh	equ	0xFF4
  6204                           prodl	equ	0xFF3
  6205                           intcon	equ	0xFF2
  6206                           postinc0	equ	0xFEE
  6207                           wreg	equ	0xFE8
  6208                           indf1	equ	0xFE7
  6209                           fsr1h	equ	0xFE2
  6210                           fsr1l	equ	0xFE1
  6211                           indf2	equ	0xFDF
  6212                           postinc2	equ	0xFDE
  6213                           postdec2	equ	0xFDD
  6214                           fsr2h	equ	0xFDA
  6215                           fsr2l	equ	0xFD9
  6216                           status	equ	0xFD8
  6217                           
  6218 ;; *************** function __tdiv_to_l_ *****************
  6219 ;; Defined at:
  6220 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  6221 ;; Parameters:    Size  Location     Type
  6222 ;;  f1              3   15[COMRAM] float 
  6223 ;;  f2              3   18[COMRAM] float 
  6224 ;; Auto vars:     Size  Location     Type
  6225 ;;  quot            4   24[COMRAM] unsigned long 
  6226 ;;  exp1            1   29[COMRAM] unsigned char 
  6227 ;;  cntr            1   28[COMRAM] unsigned char 
  6228 ;; Return value:  Size  Location     Type
  6229 ;;                  4   15[COMRAM] unsigned long 
  6230 ;; Registers used:
  6231 ;;		wreg, status,2, status,0
  6232 ;; Tracked objects:
  6233 ;;		On entry : 0/0
  6234 ;;		On exit  : 0/0
  6235 ;;		Unchanged: 0/0
  6236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6237 ;;      Params:         6       0       0       0       0       0       0       0       0
  6238 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6239 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6240 ;;      Totals:        15       0       0       0       0       0       0       0       0
  6241 ;;Total ram usage:       15 bytes
  6242 ;; Hardware stack levels used:    1
  6243 ;; Hardware stack levels required when called:    1
  6244 ;; This function calls:
  6245 ;;		Nothing
  6246 ;; This function is called by:
  6247 ;;		_sprintf
  6248 ;; This function uses a non-reentrant model
  6249 ;;
  6250                           
  6251                           	psect	text22
  6252  002120                     __ptext22:
  6253                           	opt stack 0
  6254  002120                     __tdiv_to_l_:
  6255                           	opt stack 28
  6256                           
  6257                           ;incstack = 0
  6258  002120  C012  F016         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  6259  002124  6A17               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6260  002126  6A18               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6261  002128  3411               	rlcf	__tdiv_to_l_@f1+1,w,c
  6262  00212A  3616               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6263  00212C  E301               	bnc	u2871
  6264  00212E  8017               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6265  002130                     u2871:
  6266  002130  5016               	movf	??__tdiv_to_l_,w,c
  6267  002132  6E1E               	movwf	__tdiv_to_l_@exp1,c
  6268  002134  501E               	movf	__tdiv_to_l_@exp1,w,c
  6269  002136  A4D8               	btfss	status,2,c
  6270  002138  D009               	goto	l2948
  6271  00213A  0E00               	movlw	0
  6272  00213C  6E10               	movwf	?__tdiv_to_l_,c
  6273  00213E  0E00               	movlw	0
  6274  002140  6E11               	movwf	?__tdiv_to_l_+1,c
  6275  002142  0E00               	movlw	0
  6276  002144  6E12               	movwf	?__tdiv_to_l_+2,c
  6277  002146  0E00               	movlw	0
  6278  002148  6E13               	movwf	?__tdiv_to_l_+3,c
  6279  00214A  0012               	return	
  6280  00214C                     l2948:
  6281  00214C  C015  F016         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  6282  002150  6A17               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6283  002152  6A18               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6284  002154  3414               	rlcf	__tdiv_to_l_@f2+1,w,c
  6285  002156  3616               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6286  002158  E301               	bnc	u2891
  6287  00215A  8017               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6288  00215C                     u2891:
  6289  00215C  5016               	movf	??__tdiv_to_l_,w,c
  6290  00215E  6E1D               	movwf	__tdiv_to_l_@cntr,c
  6291  002160  501D               	movf	__tdiv_to_l_@cntr,w,c
  6292  002162  A4D8               	btfss	status,2,c
  6293  002164  D009               	goto	l2954
  6294  002166  0E00               	movlw	0
  6295  002168  6E10               	movwf	?__tdiv_to_l_,c
  6296  00216A  0E00               	movlw	0
  6297  00216C  6E11               	movwf	?__tdiv_to_l_+1,c
  6298  00216E  0E00               	movlw	0
  6299  002170  6E12               	movwf	?__tdiv_to_l_+2,c
  6300  002172  0E00               	movlw	0
  6301  002174  6E13               	movwf	?__tdiv_to_l_+3,c
  6302  002176  0012               	return	
  6303  002178                     l2954:
  6304  002178  8E11               	bsf	__tdiv_to_l_@f1+1,7,c
  6305  00217A  0EFF               	movlw	255
  6306  00217C  1610               	andwf	__tdiv_to_l_@f1,f,c
  6307  00217E  0EFF               	movlw	255
  6308  002180  1611               	andwf	__tdiv_to_l_@f1+1,f,c
  6309  002182  0E00               	movlw	0
  6310  002184  1612               	andwf	__tdiv_to_l_@f1+2,f,c
  6311  002186  8E14               	bsf	__tdiv_to_l_@f2+1,7,c
  6312  002188  0EFF               	movlw	255
  6313  00218A  1613               	andwf	__tdiv_to_l_@f2,f,c
  6314  00218C  0EFF               	movlw	255
  6315  00218E  1614               	andwf	__tdiv_to_l_@f2+1,f,c
  6316  002190  0E00               	movlw	0
  6317  002192  1615               	andwf	__tdiv_to_l_@f2+2,f,c
  6318  002194  0E00               	movlw	0
  6319  002196  6E19               	movwf	__tdiv_to_l_@quot,c
  6320  002198  0E00               	movlw	0
  6321  00219A  6E1A               	movwf	__tdiv_to_l_@quot+1,c
  6322  00219C  0E00               	movlw	0
  6323  00219E  6E1B               	movwf	__tdiv_to_l_@quot+2,c
  6324  0021A0  0E00               	movlw	0
  6325  0021A2  6E1C               	movwf	__tdiv_to_l_@quot+3,c
  6326  0021A4  0E7F               	movlw	127
  6327  0021A6  5E1E               	subwf	__tdiv_to_l_@exp1,f,c
  6328  0021A8  501D               	movf	__tdiv_to_l_@cntr,w,c
  6329  0021AA  0F98               	addlw	152
  6330  0021AC  5E1E               	subwf	__tdiv_to_l_@exp1,f,c
  6331  0021AE  0E18               	movlw	24
  6332  0021B0  6E1D               	movwf	__tdiv_to_l_@cntr,c
  6333  0021B2                     l697:
  6334  0021B2  90D8               	bcf	status,0,c
  6335  0021B4  3619               	rlcf	__tdiv_to_l_@quot,f,c
  6336  0021B6  361A               	rlcf	__tdiv_to_l_@quot+1,f,c
  6337  0021B8  361B               	rlcf	__tdiv_to_l_@quot+2,f,c
  6338  0021BA  361C               	rlcf	__tdiv_to_l_@quot+3,f,c
  6339  0021BC  5013               	movf	__tdiv_to_l_@f2,w,c
  6340  0021BE  5C10               	subwf	__tdiv_to_l_@f1,w,c
  6341  0021C0  5014               	movf	__tdiv_to_l_@f2+1,w,c
  6342  0021C2  5811               	subwfb	__tdiv_to_l_@f1+1,w,c
  6343  0021C4  5015               	movf	__tdiv_to_l_@f2+2,w,c
  6344  0021C6  5812               	subwfb	__tdiv_to_l_@f1+2,w,c
  6345  0021C8  A0D8               	btfss	status,0,c
  6346  0021CA  D007               	goto	l698
  6347  0021CC  5013               	movf	__tdiv_to_l_@f2,w,c
  6348  0021CE  5E10               	subwf	__tdiv_to_l_@f1,f,c
  6349  0021D0  5014               	movf	__tdiv_to_l_@f2+1,w,c
  6350  0021D2  5A11               	subwfb	__tdiv_to_l_@f1+1,f,c
  6351  0021D4  5015               	movf	__tdiv_to_l_@f2+2,w,c
  6352  0021D6  5A12               	subwfb	__tdiv_to_l_@f1+2,f,c
  6353  0021D8  8019               	bsf	__tdiv_to_l_@quot,0,c
  6354  0021DA                     l698:
  6355  0021DA  90D8               	bcf	status,0,c
  6356  0021DC  3610               	rlcf	__tdiv_to_l_@f1,f,c
  6357  0021DE  3611               	rlcf	__tdiv_to_l_@f1+1,f,c
  6358  0021E0  3612               	rlcf	__tdiv_to_l_@f1+2,f,c
  6359  0021E2  2E1D               	decfsz	__tdiv_to_l_@cntr,f,c
  6360  0021E4  D7E6               	goto	l697
  6361  0021E6  AE1E               	btfss	__tdiv_to_l_@exp1,7,c
  6362  0021E8  D016               	goto	l2988
  6363  0021EA  501E               	movf	__tdiv_to_l_@exp1,w,c
  6364  0021EC  0A80               	xorlw	128
  6365  0021EE  0F97               	addlw	151
  6366  0021F0  B0D8               	btfsc	status,0,c
  6367  0021F2  D009               	goto	l2984
  6368  0021F4  0E00               	movlw	0
  6369  0021F6  6E10               	movwf	?__tdiv_to_l_,c
  6370  0021F8  0E00               	movlw	0
  6371  0021FA  6E11               	movwf	?__tdiv_to_l_+1,c
  6372  0021FC  0E00               	movlw	0
  6373  0021FE  6E12               	movwf	?__tdiv_to_l_+2,c
  6374  002200  0E00               	movlw	0
  6375  002202  6E13               	movwf	?__tdiv_to_l_+3,c
  6376  002204  0012               	return	
  6377  002206                     l2984:
  6378  002206  90D8               	bcf	status,0,c
  6379  002208  321C               	rrcf	__tdiv_to_l_@quot+3,f,c
  6380  00220A  321B               	rrcf	__tdiv_to_l_@quot+2,f,c
  6381  00220C  321A               	rrcf	__tdiv_to_l_@quot+1,f,c
  6382  00220E  3219               	rrcf	__tdiv_to_l_@quot,f,c
  6383  002210  3E1E               	incfsz	__tdiv_to_l_@exp1,f,c
  6384  002212  D7F9               	goto	l2984
  6385  002214  D015               	goto	l704
  6386  002216                     l2988:
  6387  002216  0E17               	movlw	23
  6388  002218  641E               	cpfsgt	__tdiv_to_l_@exp1,c
  6389  00221A  D00F               	goto	l2996
  6390  00221C  0E00               	movlw	0
  6391  00221E  6E10               	movwf	?__tdiv_to_l_,c
  6392  002220  0E00               	movlw	0
  6393  002222  6E11               	movwf	?__tdiv_to_l_+1,c
  6394  002224  0E00               	movlw	0
  6395  002226  6E12               	movwf	?__tdiv_to_l_+2,c
  6396  002228  0E00               	movlw	0
  6397  00222A  6E13               	movwf	?__tdiv_to_l_+3,c
  6398  00222C  0012               	return	
  6399  00222E                     l2994:
  6400  00222E  90D8               	bcf	status,0,c
  6401  002230  3619               	rlcf	__tdiv_to_l_@quot,f,c
  6402  002232  361A               	rlcf	__tdiv_to_l_@quot+1,f,c
  6403  002234  361B               	rlcf	__tdiv_to_l_@quot+2,f,c
  6404  002236  361C               	rlcf	__tdiv_to_l_@quot+3,f,c
  6405  002238  061E               	decf	__tdiv_to_l_@exp1,f,c
  6406  00223A                     l2996:
  6407  00223A  501E               	movf	__tdiv_to_l_@exp1,w,c
  6408  00223C  A4D8               	btfss	status,2,c
  6409  00223E  D7F7               	goto	l2994
  6410  002240                     l704:
  6411  002240  C019  F010         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  6412  002244  C01A  F011         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  6413  002248  C01B  F012         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  6414  00224C  C01C  F013         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  6415  002250  0012               	return		;funcret
  6416  002252                     __end_of__tdiv_to_l_:
  6417                           	opt stack 0
  6418                           tblptru	equ	0xFF8
  6419                           tblptrh	equ	0xFF7
  6420                           tblptrl	equ	0xFF6
  6421                           tablat	equ	0xFF5
  6422                           prodh	equ	0xFF4
  6423                           prodl	equ	0xFF3
  6424                           intcon	equ	0xFF2
  6425                           postinc0	equ	0xFEE
  6426                           wreg	equ	0xFE8
  6427                           indf1	equ	0xFE7
  6428                           fsr1h	equ	0xFE2
  6429                           fsr1l	equ	0xFE1
  6430                           indf2	equ	0xFDF
  6431                           postinc2	equ	0xFDE
  6432                           postdec2	equ	0xFDD
  6433                           fsr2h	equ	0xFDA
  6434                           fsr2l	equ	0xFD9
  6435                           status	equ	0xFD8
  6436                           
  6437 ;; *************** function __div_to_l_ *****************
  6438 ;; Defined at:
  6439 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  6440 ;; Parameters:    Size  Location     Type
  6441 ;;  f1              3   15[COMRAM] unsigned long 
  6442 ;;  f2              3   18[COMRAM] unsigned long 
  6443 ;; Auto vars:     Size  Location     Type
  6444 ;;  quot            4   21[COMRAM] unsigned long 
  6445 ;;  exp1            1   26[COMRAM] unsigned char 
  6446 ;;  cntr            1   25[COMRAM] unsigned char 
  6447 ;; Return value:  Size  Location     Type
  6448 ;;                  4   15[COMRAM] unsigned long 
  6449 ;; Registers used:
  6450 ;;		wreg, status,2, status,0
  6451 ;; Tracked objects:
  6452 ;;		On entry : 0/0
  6453 ;;		On exit  : 0/0
  6454 ;;		Unchanged: 0/0
  6455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6456 ;;      Params:         6       0       0       0       0       0       0       0       0
  6457 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6458 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6459 ;;      Totals:        12       0       0       0       0       0       0       0       0
  6460 ;;Total ram usage:       12 bytes
  6461 ;; Hardware stack levels used:    1
  6462 ;; Hardware stack levels required when called:    1
  6463 ;; This function calls:
  6464 ;;		Nothing
  6465 ;; This function is called by:
  6466 ;;		_sprintf
  6467 ;; This function uses a non-reentrant model
  6468 ;;
  6469                           
  6470                           	psect	text23
  6471  002252                     __ptext23:
  6472                           	opt stack 0
  6473  002252                     __div_to_l_:
  6474                           	opt stack 28
  6475                           
  6476                           ;incstack = 0
  6477  002252  3412               	rlcf	__div_to_l_@f1+2,w,c
  6478  002254  3413               	rlcf	__div_to_l_@f1+3,w,c
  6479  002256  6E1B               	movwf	__div_to_l_@exp1,c
  6480  002258  501B               	movf	__div_to_l_@exp1,w,c
  6481  00225A  A4D8               	btfss	status,2,c
  6482  00225C  D009               	goto	l3004
  6483  00225E  0E00               	movlw	0
  6484  002260  6E10               	movwf	?__div_to_l_,c
  6485  002262  0E00               	movlw	0
  6486  002264  6E11               	movwf	?__div_to_l_+1,c
  6487  002266  0E00               	movlw	0
  6488  002268  6E12               	movwf	?__div_to_l_+2,c
  6489  00226A  0E00               	movlw	0
  6490  00226C  6E13               	movwf	?__div_to_l_+3,c
  6491  00226E  0012               	return	
  6492  002270                     l3004:
  6493  002270  3415               	rlcf	__div_to_l_@f2+2,w,c
  6494  002272  3416               	rlcf	__div_to_l_@f2+3,w,c
  6495  002274  6E1A               	movwf	__div_to_l_@cntr,c
  6496  002276  501A               	movf	__div_to_l_@cntr,w,c
  6497  002278  A4D8               	btfss	status,2,c
  6498  00227A  D009               	goto	l3010
  6499  00227C  0E00               	movlw	0
  6500  00227E  6E10               	movwf	?__div_to_l_,c
  6501  002280  0E00               	movlw	0
  6502  002282  6E11               	movwf	?__div_to_l_+1,c
  6503  002284  0E00               	movlw	0
  6504  002286  6E12               	movwf	?__div_to_l_+2,c
  6505  002288  0E00               	movlw	0
  6506  00228A  6E13               	movwf	?__div_to_l_+3,c
  6507  00228C  0012               	return	
  6508  00228E                     l3010:
  6509  00228E  8E12               	bsf	__div_to_l_@f1+2,7,c
  6510  002290  0EFF               	movlw	255
  6511  002292  1610               	andwf	__div_to_l_@f1,f,c
  6512  002294  0EFF               	movlw	255
  6513  002296  1611               	andwf	__div_to_l_@f1+1,f,c
  6514  002298  0EFF               	movlw	255
  6515  00229A  1612               	andwf	__div_to_l_@f1+2,f,c
  6516  00229C  0E00               	movlw	0
  6517  00229E  1613               	andwf	__div_to_l_@f1+3,f,c
  6518  0022A0  8E15               	bsf	__div_to_l_@f2+2,7,c
  6519  0022A2  0EFF               	movlw	255
  6520  0022A4  1613               	andwf	__div_to_l_@f2,f,c
  6521  0022A6  0EFF               	movlw	255
  6522  0022A8  1614               	andwf	__div_to_l_@f2+1,f,c
  6523  0022AA  0EFF               	movlw	255
  6524  0022AC  1615               	andwf	__div_to_l_@f2+2,f,c
  6525  0022AE  0E00               	movlw	0
  6526  0022B0  1616               	andwf	__div_to_l_@f2+3,f,c
  6527  0022B2  0E00               	movlw	0
  6528  0022B4  6E16               	movwf	__div_to_l_@quot,c
  6529  0022B6  0E00               	movlw	0
  6530  0022B8  6E17               	movwf	__div_to_l_@quot+1,c
  6531  0022BA  0E00               	movlw	0
  6532  0022BC  6E18               	movwf	__div_to_l_@quot+2,c
  6533  0022BE  0E00               	movlw	0
  6534  0022C0  6E19               	movwf	__div_to_l_@quot+3,c
  6535  0022C2  0E7F               	movlw	127
  6536  0022C4  5E1B               	subwf	__div_to_l_@exp1,f,c
  6537  0022C6  501A               	movf	__div_to_l_@cntr,w,c
  6538  0022C8  0FA0               	addlw	160
  6539  0022CA  5E1B               	subwf	__div_to_l_@exp1,f,c
  6540  0022CC  0E20               	movlw	32
  6541  0022CE  6E1A               	movwf	__div_to_l_@cntr,c
  6542  0022D0                     l3024:
  6543  0022D0  90D8               	bcf	status,0,c
  6544  0022D2  3616               	rlcf	__div_to_l_@quot,f,c
  6545  0022D4  3617               	rlcf	__div_to_l_@quot+1,f,c
  6546  0022D6  3618               	rlcf	__div_to_l_@quot+2,f,c
  6547  0022D8  3619               	rlcf	__div_to_l_@quot+3,f,c
  6548  0022DA  5013               	movf	__div_to_l_@f2,w,c
  6549  0022DC  5C10               	subwf	__div_to_l_@f1,w,c
  6550  0022DE  5014               	movf	__div_to_l_@f2+1,w,c
  6551  0022E0  5811               	subwfb	__div_to_l_@f1+1,w,c
  6552  0022E2  5015               	movf	__div_to_l_@f2+2,w,c
  6553  0022E4  5812               	subwfb	__div_to_l_@f1+2,w,c
  6554  0022E6  5016               	movf	__div_to_l_@f2+3,w,c
  6555  0022E8  5813               	subwfb	__div_to_l_@f1+3,w,c
  6556  0022EA  A0D8               	btfss	status,0,c
  6557  0022EC  D009               	goto	l3032
  6558  0022EE  5013               	movf	__div_to_l_@f2,w,c
  6559  0022F0  5E10               	subwf	__div_to_l_@f1,f,c
  6560  0022F2  5014               	movf	__div_to_l_@f2+1,w,c
  6561  0022F4  5A11               	subwfb	__div_to_l_@f1+1,f,c
  6562  0022F6  5015               	movf	__div_to_l_@f2+2,w,c
  6563  0022F8  5A12               	subwfb	__div_to_l_@f1+2,f,c
  6564  0022FA  5016               	movf	__div_to_l_@f2+3,w,c
  6565  0022FC  5A13               	subwfb	__div_to_l_@f1+3,f,c
  6566  0022FE  8016               	bsf	__div_to_l_@quot,0,c
  6567  002300                     l3032:
  6568  002300  90D8               	bcf	status,0,c
  6569  002302  3610               	rlcf	__div_to_l_@f1,f,c
  6570  002304  3611               	rlcf	__div_to_l_@f1+1,f,c
  6571  002306  3612               	rlcf	__div_to_l_@f1+2,f,c
  6572  002308  3613               	rlcf	__div_to_l_@f1+3,f,c
  6573  00230A  2E1A               	decfsz	__div_to_l_@cntr,f,c
  6574  00230C  D7E1               	goto	l3024
  6575  00230E  AE1B               	btfss	__div_to_l_@exp1,7,c
  6576  002310  D016               	goto	l3048
  6577  002312  501B               	movf	__div_to_l_@exp1,w,c
  6578  002314  0A80               	xorlw	128
  6579  002316  0F9F               	addlw	159
  6580  002318  B0D8               	btfsc	status,0,c
  6581  00231A  D009               	goto	l3044
  6582  00231C  0E00               	movlw	0
  6583  00231E  6E10               	movwf	?__div_to_l_,c
  6584  002320  0E00               	movlw	0
  6585  002322  6E11               	movwf	?__div_to_l_+1,c
  6586  002324  0E00               	movlw	0
  6587  002326  6E12               	movwf	?__div_to_l_+2,c
  6588  002328  0E00               	movlw	0
  6589  00232A  6E13               	movwf	?__div_to_l_+3,c
  6590  00232C  0012               	return	
  6591  00232E                     l3044:
  6592  00232E  90D8               	bcf	status,0,c
  6593  002330  3219               	rrcf	__div_to_l_@quot+3,f,c
  6594  002332  3218               	rrcf	__div_to_l_@quot+2,f,c
  6595  002334  3217               	rrcf	__div_to_l_@quot+1,f,c
  6596  002336  3216               	rrcf	__div_to_l_@quot,f,c
  6597  002338  3E1B               	incfsz	__div_to_l_@exp1,f,c
  6598  00233A  D7F9               	goto	l3044
  6599  00233C  D015               	goto	l600
  6600  00233E                     l3048:
  6601  00233E  0E1F               	movlw	31
  6602  002340  641B               	cpfsgt	__div_to_l_@exp1,c
  6603  002342  D00F               	goto	l3056
  6604  002344  0E00               	movlw	0
  6605  002346  6E10               	movwf	?__div_to_l_,c
  6606  002348  0E00               	movlw	0
  6607  00234A  6E11               	movwf	?__div_to_l_+1,c
  6608  00234C  0E00               	movlw	0
  6609  00234E  6E12               	movwf	?__div_to_l_+2,c
  6610  002350  0E00               	movlw	0
  6611  002352  6E13               	movwf	?__div_to_l_+3,c
  6612  002354  0012               	return	
  6613  002356                     l3054:
  6614  002356  90D8               	bcf	status,0,c
  6615  002358  3616               	rlcf	__div_to_l_@quot,f,c
  6616  00235A  3617               	rlcf	__div_to_l_@quot+1,f,c
  6617  00235C  3618               	rlcf	__div_to_l_@quot+2,f,c
  6618  00235E  3619               	rlcf	__div_to_l_@quot+3,f,c
  6619  002360  061B               	decf	__div_to_l_@exp1,f,c
  6620  002362                     l3056:
  6621  002362  501B               	movf	__div_to_l_@exp1,w,c
  6622  002364  A4D8               	btfss	status,2,c
  6623  002366  D7F7               	goto	l3054
  6624  002368                     l600:
  6625  002368  C016  F010         	movff	__div_to_l_@quot,?__div_to_l_
  6626  00236C  C017  F011         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  6627  002370  C018  F012         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  6628  002374  C019  F013         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  6629  002378  0012               	return		;funcret
  6630  00237A                     __end_of__div_to_l_:
  6631                           	opt stack 0
  6632                           tblptru	equ	0xFF8
  6633                           tblptrh	equ	0xFF7
  6634                           tblptrl	equ	0xFF6
  6635                           tablat	equ	0xFF5
  6636                           prodh	equ	0xFF4
  6637                           prodl	equ	0xFF3
  6638                           intcon	equ	0xFF2
  6639                           postinc0	equ	0xFEE
  6640                           wreg	equ	0xFE8
  6641                           indf1	equ	0xFE7
  6642                           fsr1h	equ	0xFE2
  6643                           fsr1l	equ	0xFE1
  6644                           indf2	equ	0xFDF
  6645                           postinc2	equ	0xFDE
  6646                           postdec2	equ	0xFDD
  6647                           fsr2h	equ	0xFDA
  6648                           fsr2l	equ	0xFD9
  6649                           status	equ	0xFD8
  6650                           
  6651 ;; *************** function ___lltoft *****************
  6652 ;; Defined at:
  6653 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  6654 ;; Parameters:    Size  Location     Type
  6655 ;;  c               4   23[COMRAM] unsigned long 
  6656 ;; Auto vars:     Size  Location     Type
  6657 ;;  exp             1   31[COMRAM] unsigned char 
  6658 ;; Return value:  Size  Location     Type
  6659 ;;                  3   23[COMRAM] float 
  6660 ;; Registers used:
  6661 ;;		wreg, status,2, status,0, cstack
  6662 ;; Tracked objects:
  6663 ;;		On entry : 0/0
  6664 ;;		On exit  : 0/0
  6665 ;;		Unchanged: 0/0
  6666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6667 ;;      Params:         4       0       0       0       0       0       0       0       0
  6668 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6669 ;;      Temps:          4       0       0       0       0       0       0       0       0
  6670 ;;      Totals:         9       0       0       0       0       0       0       0       0
  6671 ;;Total ram usage:        9 bytes
  6672 ;; Hardware stack levels used:    1
  6673 ;; Hardware stack levels required when called:    2
  6674 ;; This function calls:
  6675 ;;		___ftpack
  6676 ;; This function is called by:
  6677 ;;		_sprintf
  6678 ;; This function uses a non-reentrant model
  6679 ;;
  6680                           
  6681                           	psect	text24
  6682  002FCC                     __ptext24:
  6683                           	opt stack 0
  6684  002FCC                     ___lltoft:
  6685                           	opt stack 27
  6686                           
  6687                           ;incstack = 0
  6688  002FCC  0E8E               	movlw	142
  6689  002FCE  6E20               	movwf	___lltoft@exp,c
  6690  002FD0  D006               	goto	l4370
  6691  002FD2                     l4368:
  6692  002FD2  90D8               	bcf	status,0,c
  6693  002FD4  321B               	rrcf	___lltoft@c+3,f,c
  6694  002FD6  321A               	rrcf	___lltoft@c+2,f,c
  6695  002FD8  3219               	rrcf	___lltoft@c+1,f,c
  6696  002FDA  3218               	rrcf	___lltoft@c,f,c
  6697  002FDC  2A20               	incf	___lltoft@exp,f,c
  6698  002FDE                     l4370:
  6699  002FDE  0E00               	movlw	0
  6700  002FE0  1418               	andwf	___lltoft@c,w,c
  6701  002FE2  6E1C               	movwf	??___lltoft& (0+255),c
  6702  002FE4  0E00               	movlw	0
  6703  002FE6  1419               	andwf	___lltoft@c+1,w,c
  6704  002FE8  6E1D               	movwf	(??___lltoft+1)& (0+255),c
  6705  002FEA  0E00               	movlw	0
  6706  002FEC  141A               	andwf	___lltoft@c+2,w,c
  6707  002FEE  6E1E               	movwf	(??___lltoft+2)& (0+255),c
  6708  002FF0  0EFF               	movlw	255
  6709  002FF2  141B               	andwf	___lltoft@c+3,w,c
  6710  002FF4  6E1F               	movwf	(??___lltoft+3)& (0+255),c
  6711  002FF6  501C               	movf	??___lltoft,w,c
  6712  002FF8  101D               	iorwf	??___lltoft+1,w,c
  6713  002FFA  101E               	iorwf	??___lltoft+2,w,c
  6714  002FFC  101F               	iorwf	??___lltoft+3,w,c
  6715  002FFE  A4D8               	btfss	status,2,c
  6716  003000  D7E8               	goto	l4368
  6717  003002  C018  F010         	movff	___lltoft@c,___ftpack@arg
  6718  003006  C019  F011         	movff	___lltoft@c+1,___ftpack@arg+1
  6719  00300A  C01A  F012         	movff	___lltoft@c+2,___ftpack@arg+2
  6720  00300E  C020  F013         	movff	___lltoft@exp,___ftpack@exp
  6721  003012  0E00               	movlw	0
  6722  003014  6E14               	movwf	___ftpack@sign,c
  6723  003016  ECC7  F014         	call	___ftpack	;wreg free
  6724  00301A  C010  F018         	movff	?___ftpack,?___lltoft
  6725  00301E  C011  F019         	movff	?___ftpack+1,?___lltoft+1
  6726  003022  C012  F01A         	movff	?___ftpack+2,?___lltoft+2
  6727  003026  0012               	return	
  6728  003028                     __end_of___lltoft:
  6729                           	opt stack 0
  6730                           tblptru	equ	0xFF8
  6731                           tblptrh	equ	0xFF7
  6732                           tblptrl	equ	0xFF6
  6733                           tablat	equ	0xFF5
  6734                           prodh	equ	0xFF4
  6735                           prodl	equ	0xFF3
  6736                           intcon	equ	0xFF2
  6737                           postinc0	equ	0xFEE
  6738                           wreg	equ	0xFE8
  6739                           indf1	equ	0xFE7
  6740                           fsr1h	equ	0xFE2
  6741                           fsr1l	equ	0xFE1
  6742                           indf2	equ	0xFDF
  6743                           postinc2	equ	0xFDE
  6744                           postdec2	equ	0xFDD
  6745                           fsr2h	equ	0xFDA
  6746                           fsr2l	equ	0xFD9
  6747                           status	equ	0xFD8
  6748                           
  6749 ;; *************** function ___llmod *****************
  6750 ;; Defined at:
  6751 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  6752 ;; Parameters:    Size  Location     Type
  6753 ;;  dividend        4   15[COMRAM] unsigned long 
  6754 ;;  divisor         4   19[COMRAM] unsigned long 
  6755 ;; Auto vars:     Size  Location     Type
  6756 ;;  counter         1   23[COMRAM] unsigned char 
  6757 ;; Return value:  Size  Location     Type
  6758 ;;                  4   15[COMRAM] unsigned long 
  6759 ;; Registers used:
  6760 ;;		wreg, status,2, status,0
  6761 ;; Tracked objects:
  6762 ;;		On entry : 0/0
  6763 ;;		On exit  : 0/0
  6764 ;;		Unchanged: 0/0
  6765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6766 ;;      Params:         8       0       0       0       0       0       0       0       0
  6767 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6768 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6769 ;;      Totals:         9       0       0       0       0       0       0       0       0
  6770 ;;Total ram usage:        9 bytes
  6771 ;; Hardware stack levels used:    1
  6772 ;; Hardware stack levels required when called:    1
  6773 ;; This function calls:
  6774 ;;		Nothing
  6775 ;; This function is called by:
  6776 ;;		_convert_time_to_UTC
  6777 ;;		_sprintf
  6778 ;; This function uses a non-reentrant model
  6779 ;;
  6780                           
  6781                           	psect	text25
  6782  002F66                     __ptext25:
  6783                           	opt stack 0
  6784  002F66                     ___llmod:
  6785                           	opt stack 28
  6786                           
  6787                           ;incstack = 0
  6788  002F66  5014               	movf	___llmod@divisor,w,c
  6789  002F68  1015               	iorwf	___llmod@divisor+1,w,c
  6790  002F6A  1016               	iorwf	___llmod@divisor+2,w,c
  6791  002F6C  1017               	iorwf	___llmod@divisor+3,w,c
  6792  002F6E  B4D8               	btfsc	status,2,c
  6793  002F70  D024               	goto	l794
  6794  002F72  0E01               	movlw	1
  6795  002F74  6E18               	movwf	___llmod@counter,c
  6796  002F76  D006               	goto	l3306
  6797  002F78                     l3304:
  6798  002F78  90D8               	bcf	status,0,c
  6799  002F7A  3614               	rlcf	___llmod@divisor,f,c
  6800  002F7C  3615               	rlcf	___llmod@divisor+1,f,c
  6801  002F7E  3616               	rlcf	___llmod@divisor+2,f,c
  6802  002F80  3617               	rlcf	___llmod@divisor+3,f,c
  6803  002F82  2A18               	incf	___llmod@counter,f,c
  6804  002F84                     l3306:
  6805  002F84  AE17               	btfss	___llmod@divisor+3,7,c
  6806  002F86  D7F8               	goto	l3304
  6807  002F88                     l3308:
  6808  002F88  5014               	movf	___llmod@divisor,w,c
  6809  002F8A  5C10               	subwf	___llmod@dividend,w,c
  6810  002F8C  5015               	movf	___llmod@divisor+1,w,c
  6811  002F8E  5811               	subwfb	___llmod@dividend+1,w,c
  6812  002F90  5016               	movf	___llmod@divisor+2,w,c
  6813  002F92  5812               	subwfb	___llmod@dividend+2,w,c
  6814  002F94  5017               	movf	___llmod@divisor+3,w,c
  6815  002F96  5813               	subwfb	___llmod@dividend+3,w,c
  6816  002F98  A0D8               	btfss	status,0,c
  6817  002F9A  D008               	goto	l3312
  6818  002F9C  5014               	movf	___llmod@divisor,w,c
  6819  002F9E  5E10               	subwf	___llmod@dividend,f,c
  6820  002FA0  5015               	movf	___llmod@divisor+1,w,c
  6821  002FA2  5A11               	subwfb	___llmod@dividend+1,f,c
  6822  002FA4  5016               	movf	___llmod@divisor+2,w,c
  6823  002FA6  5A12               	subwfb	___llmod@dividend+2,f,c
  6824  002FA8  5017               	movf	___llmod@divisor+3,w,c
  6825  002FAA  5A13               	subwfb	___llmod@dividend+3,f,c
  6826  002FAC                     l3312:
  6827  002FAC  90D8               	bcf	status,0,c
  6828  002FAE  3217               	rrcf	___llmod@divisor+3,f,c
  6829  002FB0  3216               	rrcf	___llmod@divisor+2,f,c
  6830  002FB2  3215               	rrcf	___llmod@divisor+1,f,c
  6831  002FB4  3214               	rrcf	___llmod@divisor,f,c
  6832  002FB6  2E18               	decfsz	___llmod@counter,f,c
  6833  002FB8  D7E7               	goto	l3308
  6834  002FBA                     l794:
  6835  002FBA  C010  F010         	movff	___llmod@dividend,?___llmod
  6836  002FBE  C011  F011         	movff	___llmod@dividend+1,?___llmod+1
  6837  002FC2  C012  F012         	movff	___llmod@dividend+2,?___llmod+2
  6838  002FC6  C013  F013         	movff	___llmod@dividend+3,?___llmod+3
  6839  002FCA  0012               	return		;funcret
  6840  002FCC                     __end_of___llmod:
  6841                           	opt stack 0
  6842                           tblptru	equ	0xFF8
  6843                           tblptrh	equ	0xFF7
  6844                           tblptrl	equ	0xFF6
  6845                           tablat	equ	0xFF5
  6846                           prodh	equ	0xFF4
  6847                           prodl	equ	0xFF3
  6848                           intcon	equ	0xFF2
  6849                           postinc0	equ	0xFEE
  6850                           wreg	equ	0xFE8
  6851                           indf1	equ	0xFE7
  6852                           fsr1h	equ	0xFE2
  6853                           fsr1l	equ	0xFE1
  6854                           indf2	equ	0xFDF
  6855                           postinc2	equ	0xFDE
  6856                           postdec2	equ	0xFDD
  6857                           fsr2h	equ	0xFDA
  6858                           fsr2l	equ	0xFD9
  6859                           status	equ	0xFD8
  6860                           
  6861 ;; *************** function ___lldiv *****************
  6862 ;; Defined at:
  6863 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  6864 ;; Parameters:    Size  Location     Type
  6865 ;;  dividend        4   24[COMRAM] unsigned long 
  6866 ;;  divisor         4   28[COMRAM] unsigned long 
  6867 ;; Auto vars:     Size  Location     Type
  6868 ;;  quotient        4   32[COMRAM] unsigned long 
  6869 ;;  counter         1   36[COMRAM] unsigned char 
  6870 ;; Return value:  Size  Location     Type
  6871 ;;                  4   24[COMRAM] unsigned long 
  6872 ;; Registers used:
  6873 ;;		wreg, status,2, status,0
  6874 ;; Tracked objects:
  6875 ;;		On entry : 0/0
  6876 ;;		On exit  : 0/0
  6877 ;;		Unchanged: 0/0
  6878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6879 ;;      Params:         8       0       0       0       0       0       0       0       0
  6880 ;;      Locals:         5       0       0       0       0       0       0       0       0
  6881 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6882 ;;      Totals:        13       0       0       0       0       0       0       0       0
  6883 ;;Total ram usage:       13 bytes
  6884 ;; Hardware stack levels used:    1
  6885 ;; Hardware stack levels required when called:    1
  6886 ;; This function calls:
  6887 ;;		Nothing
  6888 ;; This function is called by:
  6889 ;;		_convert_time_to_UTC
  6890 ;;		_sprintf
  6891 ;; This function uses a non-reentrant model
  6892 ;;
  6893                           
  6894                           	psect	text26
  6895  002D10                     __ptext26:
  6896                           	opt stack 0
  6897  002D10                     ___lldiv:
  6898                           	opt stack 28
  6899                           
  6900                           ;incstack = 0
  6901  002D10  0E00               	movlw	0
  6902  002D12  6E21               	movwf	___lldiv@quotient,c
  6903  002D14  0E00               	movlw	0
  6904  002D16  6E22               	movwf	___lldiv@quotient+1,c
  6905  002D18  0E00               	movlw	0
  6906  002D1A  6E23               	movwf	___lldiv@quotient+2,c
  6907  002D1C  0E00               	movlw	0
  6908  002D1E  6E24               	movwf	___lldiv@quotient+3,c
  6909  002D20  501D               	movf	___lldiv@divisor,w,c
  6910  002D22  101E               	iorwf	___lldiv@divisor+1,w,c
  6911  002D24  101F               	iorwf	___lldiv@divisor+2,w,c
  6912  002D26  1020               	iorwf	___lldiv@divisor+3,w,c
  6913  002D28  B4D8               	btfsc	status,2,c
  6914  002D2A  D02A               	goto	l784
  6915  002D2C  0E01               	movlw	1
  6916  002D2E  6E25               	movwf	___lldiv@counter,c
  6917  002D30  D006               	goto	l3286
  6918  002D32                     l3284:
  6919  002D32  90D8               	bcf	status,0,c
  6920  002D34  361D               	rlcf	___lldiv@divisor,f,c
  6921  002D36  361E               	rlcf	___lldiv@divisor+1,f,c
  6922  002D38  361F               	rlcf	___lldiv@divisor+2,f,c
  6923  002D3A  3620               	rlcf	___lldiv@divisor+3,f,c
  6924  002D3C  2A25               	incf	___lldiv@counter,f,c
  6925  002D3E                     l3286:
  6926  002D3E  AE20               	btfss	___lldiv@divisor+3,7,c
  6927  002D40  D7F8               	goto	l3284
  6928  002D42                     l3288:
  6929  002D42  90D8               	bcf	status,0,c
  6930  002D44  3621               	rlcf	___lldiv@quotient,f,c
  6931  002D46  3622               	rlcf	___lldiv@quotient+1,f,c
  6932  002D48  3623               	rlcf	___lldiv@quotient+2,f,c
  6933  002D4A  3624               	rlcf	___lldiv@quotient+3,f,c
  6934  002D4C  501D               	movf	___lldiv@divisor,w,c
  6935  002D4E  5C19               	subwf	___lldiv@dividend,w,c
  6936  002D50  501E               	movf	___lldiv@divisor+1,w,c
  6937  002D52  581A               	subwfb	___lldiv@dividend+1,w,c
  6938  002D54  501F               	movf	___lldiv@divisor+2,w,c
  6939  002D56  581B               	subwfb	___lldiv@dividend+2,w,c
  6940  002D58  5020               	movf	___lldiv@divisor+3,w,c
  6941  002D5A  581C               	subwfb	___lldiv@dividend+3,w,c
  6942  002D5C  A0D8               	btfss	status,0,c
  6943  002D5E  D009               	goto	l3296
  6944  002D60  501D               	movf	___lldiv@divisor,w,c
  6945  002D62  5E19               	subwf	___lldiv@dividend,f,c
  6946  002D64  501E               	movf	___lldiv@divisor+1,w,c
  6947  002D66  5A1A               	subwfb	___lldiv@dividend+1,f,c
  6948  002D68  501F               	movf	___lldiv@divisor+2,w,c
  6949  002D6A  5A1B               	subwfb	___lldiv@dividend+2,f,c
  6950  002D6C  5020               	movf	___lldiv@divisor+3,w,c
  6951  002D6E  5A1C               	subwfb	___lldiv@dividend+3,f,c
  6952  002D70  8021               	bsf	___lldiv@quotient,0,c
  6953  002D72                     l3296:
  6954  002D72  90D8               	bcf	status,0,c
  6955  002D74  3220               	rrcf	___lldiv@divisor+3,f,c
  6956  002D76  321F               	rrcf	___lldiv@divisor+2,f,c
  6957  002D78  321E               	rrcf	___lldiv@divisor+1,f,c
  6958  002D7A  321D               	rrcf	___lldiv@divisor,f,c
  6959  002D7C  2E25               	decfsz	___lldiv@counter,f,c
  6960  002D7E  D7E1               	goto	l3288
  6961  002D80                     l784:
  6962  002D80  C021  F019         	movff	___lldiv@quotient,?___lldiv
  6963  002D84  C022  F01A         	movff	___lldiv@quotient+1,?___lldiv+1
  6964  002D88  C023  F01B         	movff	___lldiv@quotient+2,?___lldiv+2
  6965  002D8C  C024  F01C         	movff	___lldiv@quotient+3,?___lldiv+3
  6966  002D90  0012               	return		;funcret
  6967  002D92                     __end_of___lldiv:
  6968                           	opt stack 0
  6969                           tblptru	equ	0xFF8
  6970                           tblptrh	equ	0xFF7
  6971                           tblptrl	equ	0xFF6
  6972                           tablat	equ	0xFF5
  6973                           prodh	equ	0xFF4
  6974                           prodl	equ	0xFF3
  6975                           intcon	equ	0xFF2
  6976                           postinc0	equ	0xFEE
  6977                           wreg	equ	0xFE8
  6978                           indf1	equ	0xFE7
  6979                           fsr1h	equ	0xFE2
  6980                           fsr1l	equ	0xFE1
  6981                           indf2	equ	0xFDF
  6982                           postinc2	equ	0xFDE
  6983                           postdec2	equ	0xFDD
  6984                           fsr2h	equ	0xFDA
  6985                           fsr2l	equ	0xFD9
  6986                           status	equ	0xFD8
  6987                           
  6988 ;; *************** function ___ftsub *****************
  6989 ;; Defined at:
  6990 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  6991 ;; Parameters:    Size  Location     Type
  6992 ;;  f1              3    3[BANK0 ] float 
  6993 ;;  f2              3    6[BANK0 ] float 
  6994 ;; Auto vars:     Size  Location     Type
  6995 ;;		None
  6996 ;; Return value:  Size  Location     Type
  6997 ;;                  3    3[BANK0 ] float 
  6998 ;; Registers used:
  6999 ;;		wreg, status,2, status,0, cstack
  7000 ;; Tracked objects:
  7001 ;;		On entry : 0/0
  7002 ;;		On exit  : 0/0
  7003 ;;		Unchanged: 0/0
  7004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7005 ;;      Params:         0       6       0       0       0       0       0       0       0
  7006 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7007 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7008 ;;      Totals:         0       6       0       0       0       0       0       0       0
  7009 ;;Total ram usage:        6 bytes
  7010 ;; Hardware stack levels used:    1
  7011 ;; Hardware stack levels required when called:    3
  7012 ;; This function calls:
  7013 ;;		___ftadd
  7014 ;; This function is called by:
  7015 ;;		_sprintf
  7016 ;; This function uses a non-reentrant model
  7017 ;;
  7018                           
  7019                           	psect	text27
  7020  00312C                     __ptext27:
  7021                           	opt stack 0
  7022  00312C                     ___ftsub:
  7023                           	opt stack 26
  7024                           
  7025                           ;incstack = 0
  7026  00312C  0100               	movlb	0	; () banked
  7027  00312E  5166               	movf	___ftsub@f2& (0+255),w,b
  7028  003130  0100               	movlb	0	; () banked
  7029  003132  1167               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  7030  003134  0100               	movlb	0	; () banked
  7031  003136  1168               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  7032  003138  B4D8               	btfsc	status,2,c
  7033  00313A  D009               	goto	l4150
  7034                           
  7035                           ; BSR set to: 0
  7036  00313C  0E00               	movlw	0
  7037  00313E  0100               	movlb	0	; () banked
  7038  003140  1B66               	xorwf	___ftsub@f2& (0+255),f,b
  7039  003142  0E00               	movlw	0
  7040  003144  0100               	movlb	0	; () banked
  7041  003146  1B67               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  7042  003148  0E80               	movlw	128
  7043  00314A  0100               	movlb	0	; () banked
  7044  00314C  1B68               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  7045  00314E                     l4150:
  7046                           
  7047                           ; BSR set to: 0
  7048  00314E  C063  F03D         	movff	___ftsub@f1,___ftadd@f1
  7049  003152  C064  F03E         	movff	___ftsub@f1+1,___ftadd@f1+1
  7050  003156  C065  F03F         	movff	___ftsub@f1+2,___ftadd@f1+2
  7051  00315A  C066  F040         	movff	___ftsub@f2,___ftadd@f2
  7052  00315E  C067  F041         	movff	___ftsub@f2+1,___ftadd@f2+1
  7053  003162  C068  F042         	movff	___ftsub@f2+2,___ftadd@f2+2
  7054  003166  ECF6  F00E         	call	___ftadd	;wreg free
  7055  00316A  C03D  F063         	movff	?___ftadd,?___ftsub
  7056  00316E  C03E  F064         	movff	?___ftadd+1,?___ftsub+1
  7057  003172  C03F  F065         	movff	?___ftadd+2,?___ftsub+2
  7058  003176  0012               	return	
  7059  003178                     __end_of___ftsub:
  7060                           	opt stack 0
  7061                           tblptru	equ	0xFF8
  7062                           tblptrh	equ	0xFF7
  7063                           tblptrl	equ	0xFF6
  7064                           tablat	equ	0xFF5
  7065                           prodh	equ	0xFF4
  7066                           prodl	equ	0xFF3
  7067                           intcon	equ	0xFF2
  7068                           postinc0	equ	0xFEE
  7069                           wreg	equ	0xFE8
  7070                           indf1	equ	0xFE7
  7071                           fsr1h	equ	0xFE2
  7072                           fsr1l	equ	0xFE1
  7073                           indf2	equ	0xFDF
  7074                           postinc2	equ	0xFDE
  7075                           postdec2	equ	0xFDD
  7076                           fsr2h	equ	0xFDA
  7077                           fsr2l	equ	0xFD9
  7078                           status	equ	0xFD8
  7079                           
  7080 ;; *************** function ___ftneg *****************
  7081 ;; Defined at:
  7082 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  7083 ;; Parameters:    Size  Location     Type
  7084 ;;  f1              3   50[COMRAM] float 
  7085 ;; Auto vars:     Size  Location     Type
  7086 ;;		None
  7087 ;; Return value:  Size  Location     Type
  7088 ;;                  3   50[COMRAM] float 
  7089 ;; Registers used:
  7090 ;;		wreg, status,2, status,0
  7091 ;; Tracked objects:
  7092 ;;		On entry : 0/0
  7093 ;;		On exit  : 0/0
  7094 ;;		Unchanged: 0/0
  7095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7096 ;;      Params:         3       0       0       0       0       0       0       0       0
  7097 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7098 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7099 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7100 ;;Total ram usage:        3 bytes
  7101 ;; Hardware stack levels used:    1
  7102 ;; Hardware stack levels required when called:    1
  7103 ;; This function calls:
  7104 ;;		Nothing
  7105 ;; This function is called by:
  7106 ;;		_convert_to_degrees
  7107 ;;		_sprintf
  7108 ;;		_strtod
  7109 ;; This function uses a non-reentrant model
  7110 ;;
  7111                           
  7112                           	psect	text28
  7113  0032D0                     __ptext28:
  7114                           	opt stack 0
  7115  0032D0                     ___ftneg:
  7116                           	opt stack 28
  7117                           
  7118                           ;incstack = 0
  7119  0032D0  5033               	movf	___ftneg@f1,w,c
  7120  0032D2  1034               	iorwf	___ftneg@f1+1,w,c
  7121  0032D4  1035               	iorwf	___ftneg@f1+2,w,c
  7122  0032D6  B4D8               	btfsc	status,2,c
  7123  0032D8  D006               	goto	l729
  7124  0032DA  0E00               	movlw	0
  7125  0032DC  1A33               	xorwf	___ftneg@f1,f,c
  7126  0032DE  0E00               	movlw	0
  7127  0032E0  1A34               	xorwf	___ftneg@f1+1,f,c
  7128  0032E2  0E80               	movlw	128
  7129  0032E4  1A35               	xorwf	___ftneg@f1+2,f,c
  7130  0032E6                     l729:
  7131  0032E6  C033  F033         	movff	___ftneg@f1,?___ftneg
  7132  0032EA  C034  F034         	movff	___ftneg@f1+1,?___ftneg+1
  7133  0032EE  C035  F035         	movff	___ftneg@f1+2,?___ftneg+2
  7134  0032F2  0012               	return		;funcret
  7135  0032F4                     __end_of___ftneg:
  7136                           	opt stack 0
  7137                           tblptru	equ	0xFF8
  7138                           tblptrh	equ	0xFF7
  7139                           tblptrl	equ	0xFF6
  7140                           tablat	equ	0xFF5
  7141                           prodh	equ	0xFF4
  7142                           prodl	equ	0xFF3
  7143                           intcon	equ	0xFF2
  7144                           postinc0	equ	0xFEE
  7145                           wreg	equ	0xFE8
  7146                           indf1	equ	0xFE7
  7147                           fsr1h	equ	0xFE2
  7148                           fsr1l	equ	0xFE1
  7149                           indf2	equ	0xFDF
  7150                           postinc2	equ	0xFDE
  7151                           postdec2	equ	0xFDD
  7152                           fsr2h	equ	0xFDA
  7153                           fsr2l	equ	0xFD9
  7154                           status	equ	0xFD8
  7155                           
  7156 ;; *************** function ___ftge *****************
  7157 ;; Defined at:
  7158 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  7159 ;; Parameters:    Size  Location     Type
  7160 ;;  ff1             3   15[COMRAM] float 
  7161 ;;  ff2             3   18[COMRAM] float 
  7162 ;; Auto vars:     Size  Location     Type
  7163 ;;		None
  7164 ;; Return value:  Size  Location     Type
  7165 ;;		None               void
  7166 ;; Registers used:
  7167 ;;		wreg, status,2, status,0
  7168 ;; Tracked objects:
  7169 ;;		On entry : 0/0
  7170 ;;		On exit  : 0/0
  7171 ;;		Unchanged: 0/0
  7172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7173 ;;      Params:         6       0       0       0       0       0       0       0       0
  7174 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7175 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7176 ;;      Totals:         9       0       0       0       0       0       0       0       0
  7177 ;;Total ram usage:        9 bytes
  7178 ;; Hardware stack levels used:    1
  7179 ;; Hardware stack levels required when called:    1
  7180 ;; This function calls:
  7181 ;;		Nothing
  7182 ;; This function is called by:
  7183 ;;		_sprintf
  7184 ;;		_strtod
  7185 ;; This function uses a non-reentrant model
  7186 ;;
  7187                           
  7188                           	psect	text29
  7189  002B78                     __ptext29:
  7190                           	opt stack 0
  7191  002B78                     ___ftge:
  7192                           	opt stack 28
  7193                           
  7194                           ;incstack = 0
  7195  002B78  AE12               	btfss	___ftge@ff1+2,7,c
  7196  002B7A  D016               	goto	l2850
  7197  002B7C  C010  F016         	movff	___ftge@ff1,??___ftge
  7198  002B80  C011  F017         	movff	___ftge@ff1+1,??___ftge+1
  7199  002B84  C012  F018         	movff	___ftge@ff1+2,??___ftge+2
  7200  002B88  1E16               	comf	??___ftge,f,c
  7201  002B8A  1E17               	comf	??___ftge+1,f,c
  7202  002B8C  1E18               	comf	??___ftge+2,f,c
  7203  002B8E  2A16               	incf	??___ftge,f,c
  7204  002B90  0E00               	movlw	0
  7205  002B92  2217               	addwfc	??___ftge+1,f,c
  7206  002B94  2218               	addwfc	??___ftge+2,f,c
  7207  002B96  0E00               	movlw	0
  7208  002B98  2416               	addwf	??___ftge,w,c
  7209  002B9A  6E10               	movwf	___ftge@ff1,c
  7210  002B9C  0E00               	movlw	0
  7211  002B9E  2017               	addwfc	??___ftge+1,w,c
  7212  002BA0  6E11               	movwf	___ftge@ff1+1,c
  7213  002BA2  0E80               	movlw	128
  7214  002BA4  2018               	addwfc	??___ftge+2,w,c
  7215  002BA6  6E12               	movwf	___ftge@ff1+2,c
  7216  002BA8                     l2850:
  7217  002BA8  AE15               	btfss	___ftge@ff2+2,7,c
  7218  002BAA  D016               	goto	l2854
  7219  002BAC  C013  F016         	movff	___ftge@ff2,??___ftge
  7220  002BB0  C014  F017         	movff	___ftge@ff2+1,??___ftge+1
  7221  002BB4  C015  F018         	movff	___ftge@ff2+2,??___ftge+2
  7222  002BB8  1E16               	comf	??___ftge,f,c
  7223  002BBA  1E17               	comf	??___ftge+1,f,c
  7224  002BBC  1E18               	comf	??___ftge+2,f,c
  7225  002BBE  2A16               	incf	??___ftge,f,c
  7226  002BC0  0E00               	movlw	0
  7227  002BC2  2217               	addwfc	??___ftge+1,f,c
  7228  002BC4  2218               	addwfc	??___ftge+2,f,c
  7229  002BC6  0E00               	movlw	0
  7230  002BC8  2416               	addwf	??___ftge,w,c
  7231  002BCA  6E13               	movwf	___ftge@ff2,c
  7232  002BCC  0E00               	movlw	0
  7233  002BCE  2017               	addwfc	??___ftge+1,w,c
  7234  002BD0  6E14               	movwf	___ftge@ff2+1,c
  7235  002BD2  0E80               	movlw	128
  7236  002BD4  2018               	addwfc	??___ftge+2,w,c
  7237  002BD6  6E15               	movwf	___ftge@ff2+2,c
  7238  002BD8                     l2854:
  7239  002BD8  0E00               	movlw	0
  7240  002BDA  1A10               	xorwf	___ftge@ff1,f,c
  7241  002BDC  0E00               	movlw	0
  7242  002BDE  1A11               	xorwf	___ftge@ff1+1,f,c
  7243  002BE0  0E80               	movlw	128
  7244  002BE2  1A12               	xorwf	___ftge@ff1+2,f,c
  7245  002BE4  0E00               	movlw	0
  7246  002BE6  1A13               	xorwf	___ftge@ff2,f,c
  7247  002BE8  0E00               	movlw	0
  7248  002BEA  1A14               	xorwf	___ftge@ff2+1,f,c
  7249  002BEC  0E80               	movlw	128
  7250  002BEE  1A15               	xorwf	___ftge@ff2+2,f,c
  7251  002BF0  5013               	movf	___ftge@ff2,w,c
  7252  002BF2  5C10               	subwf	___ftge@ff1,w,c
  7253  002BF4  5014               	movf	___ftge@ff2+1,w,c
  7254  002BF6  5811               	subwfb	___ftge@ff1+1,w,c
  7255  002BF8  5015               	movf	___ftge@ff2+2,w,c
  7256  002BFA  5812               	subwfb	___ftge@ff1+2,w,c
  7257  002BFC  B0D8               	btfsc	status,0,c
  7258  002BFE  D002               	goto	l2860
  7259  002C00  90D8               	bcf	status,0,c
  7260  002C02  0012               	return	
  7261  002C04                     l2860:
  7262  002C04  80D8               	bsf	status,0,c
  7263  002C06  0012               	return	
  7264  002C08                     __end_of___ftge:
  7265                           	opt stack 0
  7266                           tblptru	equ	0xFF8
  7267                           tblptrh	equ	0xFF7
  7268                           tblptrl	equ	0xFF6
  7269                           tablat	equ	0xFF5
  7270                           prodh	equ	0xFF4
  7271                           prodl	equ	0xFF3
  7272                           intcon	equ	0xFF2
  7273                           postinc0	equ	0xFEE
  7274                           wreg	equ	0xFE8
  7275                           indf1	equ	0xFE7
  7276                           fsr1h	equ	0xFE2
  7277                           fsr1l	equ	0xFE1
  7278                           indf2	equ	0xFDF
  7279                           postinc2	equ	0xFDE
  7280                           postdec2	equ	0xFDD
  7281                           fsr2h	equ	0xFDA
  7282                           fsr2l	equ	0xFD9
  7283                           status	equ	0xFD8
  7284                           
  7285 ;; *************** function _USART_Init *****************
  7286 ;; Defined at:
  7287 ;;		line 8 in file "USART_Source_File.c"
  7288 ;; Parameters:    Size  Location     Type
  7289 ;;  baud_rate       4    6[BANK0 ] long 
  7290 ;; Auto vars:     Size  Location     Type
  7291 ;;  temp            3   10[BANK0 ] float 
  7292 ;; Return value:  Size  Location     Type
  7293 ;;                  1    wreg      void 
  7294 ;; Registers used:
  7295 ;;		wreg, status,2, status,0, cstack
  7296 ;; Tracked objects:
  7297 ;;		On entry : 0/0
  7298 ;;		On exit  : 0/0
  7299 ;;		Unchanged: 0/0
  7300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7301 ;;      Params:         0       4       0       0       0       0       0       0       0
  7302 ;;      Locals:         0       3       0       0       0       0       0       0       0
  7303 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7304 ;;      Totals:         0       7       0       0       0       0       0       0       0
  7305 ;;Total ram usage:        7 bytes
  7306 ;; Hardware stack levels used:    1
  7307 ;; Hardware stack levels required when called:    3
  7308 ;; This function calls:
  7309 ;;		___altoft
  7310 ;;		___ftadd
  7311 ;;		___ftdiv
  7312 ;;		___fttol
  7313 ;; This function is called by:
  7314 ;;		_main
  7315 ;; This function uses a non-reentrant model
  7316 ;;
  7317                           
  7318                           	psect	text30
  7319  002D92                     __ptext30:
  7320                           	opt stack 0
  7321  002D92                     _USART_Init:
  7322                           	opt stack 27
  7323                           
  7324                           ;USART_Source_File.c: 10: float temp;
  7325                           ;USART_Source_File.c: 11: TRISC6=0;
  7326                           
  7327                           ;incstack = 0
  7328  002D92  9C94               	bcf	3988,6,c	;volatile
  7329                           
  7330                           ;USART_Source_File.c: 12: TRISC7=1;
  7331  002D94  8E94               	bsf	3988,7,c	;volatile
  7332                           
  7333                           ;USART_Source_File.c: 13: temp=(((float)(8000000/64)/(float)baud_rate)-1);
  7334  002D96  C066  F018         	movff	USART_Init@baud_rate,___altoft@c
  7335  002D9A  C067  F019         	movff	USART_Init@baud_rate+1,___altoft@c+1
  7336  002D9E  C068  F01A         	movff	USART_Init@baud_rate+2,___altoft@c+2
  7337  002DA2  C069  F01B         	movff	USART_Init@baud_rate+3,___altoft@c+3
  7338  002DA6  EC06  F017         	call	___altoft	;wreg free
  7339  002DAA  C018  F025         	movff	?___altoft,___ftdiv@f2
  7340  002DAE  C019  F026         	movff	?___altoft+1,___ftdiv@f2+1
  7341  002DB2  C01A  F027         	movff	?___altoft+2,___ftdiv@f2+2
  7342  002DB6  0E24               	movlw	36
  7343  002DB8  6E22               	movwf	___ftdiv@f1,c
  7344  002DBA  0EF4               	movlw	244
  7345  002DBC  6E23               	movwf	___ftdiv@f1+1,c
  7346  002DBE  0E47               	movlw	71
  7347  002DC0  6E24               	movwf	___ftdiv@f1+2,c
  7348  002DC2  EC54  F014         	call	___ftdiv	;wreg free
  7349  002DC6  C022  F03D         	movff	?___ftdiv,___ftadd@f1
  7350  002DCA  C023  F03E         	movff	?___ftdiv+1,___ftadd@f1+1
  7351  002DCE  C024  F03F         	movff	?___ftdiv+2,___ftadd@f1+2
  7352  002DD2  0E00               	movlw	0
  7353  002DD4  6E40               	movwf	___ftadd@f2,c
  7354  002DD6  0E80               	movlw	128
  7355  002DD8  6E41               	movwf	___ftadd@f2+1,c
  7356  002DDA  0EBF               	movlw	191
  7357  002DDC  6E42               	movwf	___ftadd@f2+2,c
  7358  002DDE  ECF6  F00E         	call	___ftadd	;wreg free
  7359  002DE2  C03D  F06A         	movff	?___ftadd,USART_Init@temp
  7360  002DE6  C03E  F06B         	movff	?___ftadd+1,USART_Init@temp+1
  7361  002DEA  C03F  F06C         	movff	?___ftadd+2,USART_Init@temp+2
  7362                           
  7363                           ;USART_Source_File.c: 14: SPBRG=(int)temp;
  7364  002DEE  C06A  F03A         	movff	USART_Init@temp,___fttol@f1
  7365  002DF2  C06B  F03B         	movff	USART_Init@temp+1,___fttol@f1+1
  7366  002DF6  C06C  F03C         	movff	USART_Init@temp+2,___fttol@f1+2
  7367  002DFA  ECBD  F011         	call	___fttol	;wreg free
  7368  002DFE  503A               	movf	?___fttol,w,c
  7369  002E00  6EAF               	movwf	4015,c	;volatile
  7370                           
  7371                           ;USART_Source_File.c: 15: TXSTA=0x20;
  7372  002E02  0E20               	movlw	32
  7373  002E04  6EAC               	movwf	4012,c	;volatile
  7374                           
  7375                           ;USART_Source_File.c: 16: RCSTA=0x90;
  7376  002E06  0E90               	movlw	144
  7377  002E08  6EAB               	movwf	4011,c	;volatile
  7378  002E0A  0012               	return		;funcret
  7379  002E0C                     __end_of_USART_Init:
  7380                           	opt stack 0
  7381                           tblptru	equ	0xFF8
  7382                           tblptrh	equ	0xFF7
  7383                           tblptrl	equ	0xFF6
  7384                           tablat	equ	0xFF5
  7385                           prodh	equ	0xFF4
  7386                           prodl	equ	0xFF3
  7387                           intcon	equ	0xFF2
  7388                           postinc0	equ	0xFEE
  7389                           wreg	equ	0xFE8
  7390                           indf1	equ	0xFE7
  7391                           fsr1h	equ	0xFE2
  7392                           fsr1l	equ	0xFE1
  7393                           indf2	equ	0xFDF
  7394                           postinc2	equ	0xFDE
  7395                           postdec2	equ	0xFDD
  7396                           fsr2h	equ	0xFDA
  7397                           fsr2l	equ	0xFD9
  7398                           status	equ	0xFD8
  7399                           
  7400 ;; *************** function ___fttol *****************
  7401 ;; Defined at:
  7402 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  7403 ;; Parameters:    Size  Location     Type
  7404 ;;  f1              3   57[COMRAM] float 
  7405 ;; Auto vars:     Size  Location     Type
  7406 ;;  lval            4    1[BANK0 ] unsigned long 
  7407 ;;  exp1            1    5[BANK0 ] unsigned char 
  7408 ;;  sign1           1    0[BANK0 ] unsigned char 
  7409 ;; Return value:  Size  Location     Type
  7410 ;;                  4   57[COMRAM] long 
  7411 ;; Registers used:
  7412 ;;		wreg, status,2, status,0
  7413 ;; Tracked objects:
  7414 ;;		On entry : 0/0
  7415 ;;		On exit  : 0/0
  7416 ;;		Unchanged: 0/0
  7417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7418 ;;      Params:         4       0       0       0       0       0       0       0       0
  7419 ;;      Locals:         0       6       0       0       0       0       0       0       0
  7420 ;;      Temps:          5       0       0       0       0       0       0       0       0
  7421 ;;      Totals:         9       6       0       0       0       0       0       0       0
  7422 ;;Total ram usage:       15 bytes
  7423 ;; Hardware stack levels used:    1
  7424 ;; Hardware stack levels required when called:    1
  7425 ;; This function calls:
  7426 ;;		Nothing
  7427 ;; This function is called by:
  7428 ;;		_USART_Init
  7429 ;;		_convert_to_degrees
  7430 ;;		_sprintf
  7431 ;; This function uses a non-reentrant model
  7432 ;;
  7433                           
  7434                           	psect	text31
  7435  00237A                     __ptext31:
  7436                           	opt stack 0
  7437  00237A                     ___fttol:
  7438                           	opt stack 28
  7439                           
  7440                           ;incstack = 0
  7441  00237A  C03C  F03E         	movff	___fttol@f1+2,??___fttol
  7442  00237E  6A3F               	clrf	(??___fttol+1)& (0+255),c
  7443  002380  6A40               	clrf	(??___fttol+2)& (0+255),c
  7444  002382  343B               	rlcf	___fttol@f1+1,w,c
  7445  002384  363E               	rlcf	??___fttol& (0+255),f,c
  7446  002386  E301               	bnc	u5021
  7447  002388  803F               	bsf	(??___fttol+1)& (0+255),0,c
  7448  00238A                     u5021:
  7449  00238A  503E               	movf	??___fttol,w,c
  7450  00238C  0100               	movlb	0	; () banked
  7451  00238E  6F65               	movwf	___fttol@exp1& (0+255),b
  7452  002390  0100               	movlb	0	; () banked
  7453  002392  5165               	movf	___fttol@exp1& (0+255),w,b
  7454  002394  A4D8               	btfss	status,2,c
  7455  002396  D009               	goto	l4326
  7456                           
  7457                           ; BSR set to: 0
  7458  002398  0E00               	movlw	0
  7459  00239A  6E3A               	movwf	?___fttol,c
  7460  00239C  0E00               	movlw	0
  7461  00239E  6E3B               	movwf	?___fttol+1,c
  7462  0023A0  0E00               	movlw	0
  7463  0023A2  6E3C               	movwf	?___fttol+2,c
  7464  0023A4  0E00               	movlw	0
  7465  0023A6  6E3D               	movwf	?___fttol+3,c
  7466                           
  7467                           ; BSR set to: 0
  7468  0023A8  0012               	return	
  7469  0023AA                     l4326:
  7470                           
  7471                           ; BSR set to: 0
  7472  0023AA  0E17               	movlw	23
  7473  0023AC  6E3E               	movwf	??___fttol& (0+255),c
  7474  0023AE  C03A  F03F         	movff	___fttol@f1,??___fttol+1
  7475  0023B2  C03B  F040         	movff	___fttol@f1+1,??___fttol+2
  7476  0023B6  C03C  F041         	movff	___fttol@f1+2,??___fttol+3
  7477  0023BA  283E               	incf	??___fttol,w,c
  7478  0023BC  6E42               	movwf	(??___fttol+4)& (0+255),c
  7479  0023BE  D004               	goto	u5040
  7480  0023C0                     u5045:
  7481  0023C0  90D8               	bcf	status,0,c
  7482  0023C2  3241               	rrcf	??___fttol+3,f,c
  7483  0023C4  3240               	rrcf	??___fttol+2,f,c
  7484  0023C6  323F               	rrcf	??___fttol+1,f,c
  7485  0023C8                     u5040:
  7486  0023C8  2E42               	decfsz	(??___fttol+4)& (0+255),f,c
  7487  0023CA  D7FA               	goto	u5045
  7488  0023CC  503F               	movf	??___fttol+1,w,c
  7489  0023CE  0100               	movlb	0	; () banked
  7490  0023D0  6F60               	movwf	___fttol@sign1& (0+255),b
  7491                           
  7492                           ; BSR set to: 0
  7493  0023D2  8E3B               	bsf	___fttol@f1+1,7,c
  7494                           
  7495                           ; BSR set to: 0
  7496  0023D4  0EFF               	movlw	255
  7497  0023D6  163A               	andwf	___fttol@f1,f,c
  7498  0023D8  0EFF               	movlw	255
  7499  0023DA  163B               	andwf	___fttol@f1+1,f,c
  7500  0023DC  0E00               	movlw	0
  7501  0023DE  163C               	andwf	___fttol@f1+2,f,c
  7502                           
  7503                           ; BSR set to: 0
  7504  0023E0  503A               	movf	___fttol@f1,w,c
  7505  0023E2  0100               	movlb	0	; () banked
  7506  0023E4  6F61               	movwf	___fttol@lval& (0+255),b
  7507  0023E6  503B               	movf	___fttol@f1+1,w,c
  7508  0023E8  0100               	movlb	0	; () banked
  7509  0023EA  6F62               	movwf	(___fttol@lval+1)& (0+255),b
  7510  0023EC  503C               	movf	___fttol@f1+2,w,c
  7511  0023EE  0100               	movlb	0	; () banked
  7512  0023F0  6F63               	movwf	(___fttol@lval+2)& (0+255),b
  7513  0023F2  0100               	movlb	0	; () banked
  7514  0023F4  6B64               	clrf	(___fttol@lval+3)& (0+255),b
  7515                           
  7516                           ; BSR set to: 0
  7517  0023F6  0E8E               	movlw	142
  7518  0023F8  0100               	movlb	0	; () banked
  7519  0023FA  5F65               	subwf	___fttol@exp1& (0+255),f,b
  7520                           
  7521                           ; BSR set to: 0
  7522  0023FC  0100               	movlb	0	; () banked
  7523  0023FE  AF65               	btfss	___fttol@exp1& (0+255),7,b
  7524  002400  D019               	goto	l4348
  7525                           
  7526                           ; BSR set to: 0
  7527  002402  0100               	movlb	0	; () banked
  7528  002404  5165               	movf	___fttol@exp1& (0+255),w,b
  7529  002406  0A80               	xorlw	128
  7530  002408  0F8F               	addlw	143
  7531  00240A  B0D8               	btfsc	status,0,c
  7532  00240C  D009               	goto	l4344
  7533                           
  7534                           ; BSR set to: 0
  7535  00240E  0E00               	movlw	0
  7536  002410  6E3A               	movwf	?___fttol,c
  7537  002412  0E00               	movlw	0
  7538  002414  6E3B               	movwf	?___fttol+1,c
  7539  002416  0E00               	movlw	0
  7540  002418  6E3C               	movwf	?___fttol+2,c
  7541  00241A  0E00               	movlw	0
  7542  00241C  6E3D               	movwf	?___fttol+3,c
  7543                           
  7544                           ; BSR set to: 0
  7545  00241E  0012               	return	
  7546  002420                     l4344:
  7547                           
  7548                           ; BSR set to: 0
  7549  002420  0100               	movlb	0	; () banked
  7550  002422  90D8               	bcf	status,0,c
  7551  002424  3364               	rrcf	(___fttol@lval+3)& (0+255),f,b
  7552  002426  3363               	rrcf	(___fttol@lval+2)& (0+255),f,b
  7553  002428  3362               	rrcf	(___fttol@lval+1)& (0+255),f,b
  7554  00242A  3361               	rrcf	___fttol@lval& (0+255),f,b
  7555                           
  7556                           ; BSR set to: 0
  7557  00242C  0100               	movlb	0	; () banked
  7558  00242E  3F65               	incfsz	___fttol@exp1& (0+255),f,b
  7559  002430  D7F7               	goto	l4344
  7560                           
  7561                           ; BSR set to: 0
  7562  002432  D01A               	goto	l4358
  7563  002434                     l4348:
  7564                           
  7565                           ; BSR set to: 0
  7566  002434  0E17               	movlw	23
  7567  002436  0100               	movlb	0	; () banked
  7568  002438  6565               	cpfsgt	___fttol@exp1& (0+255),b
  7569  00243A  D011               	goto	l4356
  7570                           
  7571                           ; BSR set to: 0
  7572  00243C  0E00               	movlw	0
  7573  00243E  6E3A               	movwf	?___fttol,c
  7574  002440  0E00               	movlw	0
  7575  002442  6E3B               	movwf	?___fttol+1,c
  7576  002444  0E00               	movlw	0
  7577  002446  6E3C               	movwf	?___fttol+2,c
  7578  002448  0E00               	movlw	0
  7579  00244A  6E3D               	movwf	?___fttol+3,c
  7580                           
  7581                           ; BSR set to: 0
  7582  00244C  0012               	return	
  7583  00244E                     l4354:
  7584                           
  7585                           ; BSR set to: 0
  7586  00244E  0100               	movlb	0	; () banked
  7587  002450  90D8               	bcf	status,0,c
  7588  002452  3761               	rlcf	___fttol@lval& (0+255),f,b
  7589  002454  3762               	rlcf	(___fttol@lval+1)& (0+255),f,b
  7590  002456  3763               	rlcf	(___fttol@lval+2)& (0+255),f,b
  7591  002458  3764               	rlcf	(___fttol@lval+3)& (0+255),f,b
  7592  00245A  0100               	movlb	0	; () banked
  7593  00245C  0765               	decf	___fttol@exp1& (0+255),f,b
  7594  00245E                     l4356:
  7595                           
  7596                           ; BSR set to: 0
  7597  00245E  0100               	movlb	0	; () banked
  7598  002460  5165               	movf	___fttol@exp1& (0+255),w,b
  7599  002462  0100               	movlb	0	; () banked
  7600  002464  A4D8               	btfss	status,2,c
  7601  002466  D7F3               	goto	l4354
  7602  002468                     l4358:
  7603                           
  7604                           ; BSR set to: 0
  7605  002468  0100               	movlb	0	; () banked
  7606  00246A  5160               	movf	___fttol@sign1& (0+255),w,b
  7607  00246C  0100               	movlb	0	; () banked
  7608  00246E  B4D8               	btfsc	status,2,c
  7609  002470  D009               	goto	l4362
  7610                           
  7611                           ; BSR set to: 0
  7612  002472  0100               	movlb	0	; () banked
  7613  002474  1F64               	comf	(___fttol@lval+3)& (0+255),f,b
  7614  002476  1F63               	comf	(___fttol@lval+2)& (0+255),f,b
  7615  002478  1F62               	comf	(___fttol@lval+1)& (0+255),f,b
  7616  00247A  6D61               	negf	___fttol@lval& (0+255),b
  7617  00247C  0E00               	movlw	0
  7618  00247E  2362               	addwfc	(___fttol@lval+1)& (0+255),f,b
  7619  002480  2363               	addwfc	(___fttol@lval+2)& (0+255),f,b
  7620  002482  2364               	addwfc	(___fttol@lval+3)& (0+255),f,b
  7621  002484                     l4362:
  7622                           
  7623                           ; BSR set to: 0
  7624  002484  C061  F03A         	movff	___fttol@lval,?___fttol
  7625  002488  C062  F03B         	movff	___fttol@lval+1,?___fttol+1
  7626  00248C  C063  F03C         	movff	___fttol@lval+2,?___fttol+2
  7627  002490  C064  F03D         	movff	___fttol@lval+3,?___fttol+3
  7628  002494  0012               	return	
  7629  002496                     __end_of___fttol:
  7630                           	opt stack 0
  7631                           tblptru	equ	0xFF8
  7632                           tblptrh	equ	0xFF7
  7633                           tblptrl	equ	0xFF6
  7634                           tablat	equ	0xFF5
  7635                           prodh	equ	0xFF4
  7636                           prodl	equ	0xFF3
  7637                           intcon	equ	0xFF2
  7638                           postinc0	equ	0xFEE
  7639                           wreg	equ	0xFE8
  7640                           indf1	equ	0xFE7
  7641                           fsr1h	equ	0xFE2
  7642                           fsr1l	equ	0xFE1
  7643                           indf2	equ	0xFDF
  7644                           postinc2	equ	0xFDE
  7645                           postdec2	equ	0xFDD
  7646                           fsr2h	equ	0xFDA
  7647                           fsr2l	equ	0xFD9
  7648                           status	equ	0xFD8
  7649                           
  7650 ;; *************** function ___ftdiv *****************
  7651 ;; Defined at:
  7652 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  7653 ;; Parameters:    Size  Location     Type
  7654 ;;  f1              3   33[COMRAM] float 
  7655 ;;  f2              3   36[COMRAM] float 
  7656 ;; Auto vars:     Size  Location     Type
  7657 ;;  f3              3   43[COMRAM] float 
  7658 ;;  sign            1   47[COMRAM] unsigned char 
  7659 ;;  exp             1   46[COMRAM] unsigned char 
  7660 ;;  cntr            1   42[COMRAM] unsigned char 
  7661 ;; Return value:  Size  Location     Type
  7662 ;;                  3   33[COMRAM] float 
  7663 ;; Registers used:
  7664 ;;		wreg, status,2, status,0, cstack
  7665 ;; Tracked objects:
  7666 ;;		On entry : 0/0
  7667 ;;		On exit  : 0/0
  7668 ;;		Unchanged: 0/0
  7669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7670 ;;      Params:         6       0       0       0       0       0       0       0       0
  7671 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7672 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7673 ;;      Totals:        15       0       0       0       0       0       0       0       0
  7674 ;;Total ram usage:       15 bytes
  7675 ;; Hardware stack levels used:    1
  7676 ;; Hardware stack levels required when called:    2
  7677 ;; This function calls:
  7678 ;;		___ftpack
  7679 ;; This function is called by:
  7680 ;;		_USART_Init
  7681 ;;		_convert_to_degrees
  7682 ;;		_strtod
  7683 ;; This function uses a non-reentrant model
  7684 ;;
  7685                           
  7686                           	psect	text32
  7687  0028A8                     __ptext32:
  7688                           	opt stack 0
  7689  0028A8                     ___ftdiv:
  7690                           	opt stack 25
  7691                           
  7692                           ; BSR set to: 0
  7693                           ;incstack = 0
  7694  0028A8  C024  F028         	movff	___ftdiv@f1+2,??___ftdiv
  7695  0028AC  6A29               	clrf	(??___ftdiv+1)& (0+255),c
  7696  0028AE  6A2A               	clrf	(??___ftdiv+2)& (0+255),c
  7697  0028B0  3423               	rlcf	___ftdiv@f1+1,w,c
  7698  0028B2  3628               	rlcf	??___ftdiv& (0+255),f,c
  7699  0028B4  E301               	bnc	u4501
  7700  0028B6  8029               	bsf	(??___ftdiv+1)& (0+255),0,c
  7701  0028B8                     u4501:
  7702  0028B8  5028               	movf	??___ftdiv,w,c
  7703  0028BA  6E2F               	movwf	___ftdiv@exp,c
  7704  0028BC  502F               	movf	___ftdiv@exp,w,c
  7705  0028BE  A4D8               	btfss	status,2,c
  7706  0028C0  D007               	goto	l3998
  7707  0028C2  0E00               	movlw	0
  7708  0028C4  6E22               	movwf	?___ftdiv,c
  7709  0028C6  0E00               	movlw	0
  7710  0028C8  6E23               	movwf	?___ftdiv+1,c
  7711  0028CA  0E00               	movlw	0
  7712  0028CC  6E24               	movwf	?___ftdiv+2,c
  7713  0028CE  0012               	return	
  7714  0028D0                     l3998:
  7715  0028D0  C027  F028         	movff	___ftdiv@f2+2,??___ftdiv
  7716  0028D4  6A29               	clrf	(??___ftdiv+1)& (0+255),c
  7717  0028D6  6A2A               	clrf	(??___ftdiv+2)& (0+255),c
  7718  0028D8  3426               	rlcf	___ftdiv@f2+1,w,c
  7719  0028DA  3628               	rlcf	??___ftdiv& (0+255),f,c
  7720  0028DC  E301               	bnc	u4521
  7721  0028DE  8029               	bsf	(??___ftdiv+1)& (0+255),0,c
  7722  0028E0                     u4521:
  7723  0028E0  5028               	movf	??___ftdiv,w,c
  7724  0028E2  6E30               	movwf	___ftdiv@sign,c
  7725  0028E4  5030               	movf	___ftdiv@sign,w,c
  7726  0028E6  A4D8               	btfss	status,2,c
  7727  0028E8  D007               	goto	l4004
  7728  0028EA  0E00               	movlw	0
  7729  0028EC  6E22               	movwf	?___ftdiv,c
  7730  0028EE  0E00               	movlw	0
  7731  0028F0  6E23               	movwf	?___ftdiv+1,c
  7732  0028F2  0E00               	movlw	0
  7733  0028F4  6E24               	movwf	?___ftdiv+2,c
  7734  0028F6  0012               	return	
  7735  0028F8                     l4004:
  7736  0028F8  0E00               	movlw	0
  7737  0028FA  6E2C               	movwf	___ftdiv@f3,c
  7738  0028FC  0E00               	movlw	0
  7739  0028FE  6E2D               	movwf	___ftdiv@f3+1,c
  7740  002900  0E00               	movlw	0
  7741  002902  6E2E               	movwf	___ftdiv@f3+2,c
  7742  002904  5030               	movf	___ftdiv@sign,w,c
  7743  002906  0F89               	addlw	137
  7744  002908  5E2F               	subwf	___ftdiv@exp,f,c
  7745  00290A  C024  F030         	movff	___ftdiv@f1+2,___ftdiv@sign
  7746  00290E  5027               	movf	___ftdiv@f2+2,w,c
  7747  002910  1A30               	xorwf	___ftdiv@sign,f,c
  7748  002912  0E80               	movlw	128
  7749  002914  1630               	andwf	___ftdiv@sign,f,c
  7750  002916  8E23               	bsf	___ftdiv@f1+1,7,c
  7751  002918  0EFF               	movlw	255
  7752  00291A  1622               	andwf	___ftdiv@f1,f,c
  7753  00291C  0EFF               	movlw	255
  7754  00291E  1623               	andwf	___ftdiv@f1+1,f,c
  7755  002920  0E00               	movlw	0
  7756  002922  1624               	andwf	___ftdiv@f1+2,f,c
  7757  002924  8E26               	bsf	___ftdiv@f2+1,7,c
  7758  002926  0EFF               	movlw	255
  7759  002928  1625               	andwf	___ftdiv@f2,f,c
  7760  00292A  0EFF               	movlw	255
  7761  00292C  1626               	andwf	___ftdiv@f2+1,f,c
  7762  00292E  0E00               	movlw	0
  7763  002930  1627               	andwf	___ftdiv@f2+2,f,c
  7764  002932  0E18               	movlw	24
  7765  002934  6E2B               	movwf	___ftdiv@cntr,c
  7766  002936                     l4024:
  7767  002936  90D8               	bcf	status,0,c
  7768  002938  362C               	rlcf	___ftdiv@f3,f,c
  7769  00293A  362D               	rlcf	___ftdiv@f3+1,f,c
  7770  00293C  362E               	rlcf	___ftdiv@f3+2,f,c
  7771  00293E  5025               	movf	___ftdiv@f2,w,c
  7772  002940  5C22               	subwf	___ftdiv@f1,w,c
  7773  002942  5026               	movf	___ftdiv@f2+1,w,c
  7774  002944  5823               	subwfb	___ftdiv@f1+1,w,c
  7775  002946  5027               	movf	___ftdiv@f2+2,w,c
  7776  002948  5824               	subwfb	___ftdiv@f1+2,w,c
  7777  00294A  A0D8               	btfss	status,0,c
  7778  00294C  D007               	goto	l690
  7779  00294E  5025               	movf	___ftdiv@f2,w,c
  7780  002950  5E22               	subwf	___ftdiv@f1,f,c
  7781  002952  5026               	movf	___ftdiv@f2+1,w,c
  7782  002954  5A23               	subwfb	___ftdiv@f1+1,f,c
  7783  002956  5027               	movf	___ftdiv@f2+2,w,c
  7784  002958  5A24               	subwfb	___ftdiv@f1+2,f,c
  7785  00295A  802C               	bsf	___ftdiv@f3,0,c
  7786  00295C                     l690:
  7787  00295C  90D8               	bcf	status,0,c
  7788  00295E  3622               	rlcf	___ftdiv@f1,f,c
  7789  002960  3623               	rlcf	___ftdiv@f1+1,f,c
  7790  002962  3624               	rlcf	___ftdiv@f1+2,f,c
  7791  002964  2E2B               	decfsz	___ftdiv@cntr,f,c
  7792  002966  D7E7               	goto	l4024
  7793  002968  C02C  F010         	movff	___ftdiv@f3,___ftpack@arg
  7794  00296C  C02D  F011         	movff	___ftdiv@f3+1,___ftpack@arg+1
  7795  002970  C02E  F012         	movff	___ftdiv@f3+2,___ftpack@arg+2
  7796  002974  C02F  F013         	movff	___ftdiv@exp,___ftpack@exp
  7797  002978  C030  F014         	movff	___ftdiv@sign,___ftpack@sign
  7798  00297C  ECC7  F014         	call	___ftpack	;wreg free
  7799  002980  C010  F022         	movff	?___ftpack,?___ftdiv
  7800  002984  C011  F023         	movff	?___ftpack+1,?___ftdiv+1
  7801  002988  C012  F024         	movff	?___ftpack+2,?___ftdiv+2
  7802  00298C  0012               	return	
  7803  00298E                     __end_of___ftdiv:
  7804                           	opt stack 0
  7805                           tblptru	equ	0xFF8
  7806                           tblptrh	equ	0xFF7
  7807                           tblptrl	equ	0xFF6
  7808                           tablat	equ	0xFF5
  7809                           prodh	equ	0xFF4
  7810                           prodl	equ	0xFF3
  7811                           intcon	equ	0xFF2
  7812                           postinc0	equ	0xFEE
  7813                           wreg	equ	0xFE8
  7814                           indf1	equ	0xFE7
  7815                           fsr1h	equ	0xFE2
  7816                           fsr1l	equ	0xFE1
  7817                           indf2	equ	0xFDF
  7818                           postinc2	equ	0xFDE
  7819                           postdec2	equ	0xFDD
  7820                           fsr2h	equ	0xFDA
  7821                           fsr2l	equ	0xFD9
  7822                           status	equ	0xFD8
  7823                           
  7824 ;; *************** function ___ftadd *****************
  7825 ;; Defined at:
  7826 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  7827 ;; Parameters:    Size  Location     Type
  7828 ;;  f1              3   60[COMRAM] float 
  7829 ;;  f2              3   63[COMRAM] float 
  7830 ;; Auto vars:     Size  Location     Type
  7831 ;;  exp1            1    2[BANK0 ] unsigned char 
  7832 ;;  exp2            1    1[BANK0 ] unsigned char 
  7833 ;;  sign            1    0[BANK0 ] unsigned char 
  7834 ;; Return value:  Size  Location     Type
  7835 ;;                  3   60[COMRAM] float 
  7836 ;; Registers used:
  7837 ;;		wreg, status,2, status,0, cstack
  7838 ;; Tracked objects:
  7839 ;;		On entry : 0/0
  7840 ;;		On exit  : 0/0
  7841 ;;		Unchanged: 0/0
  7842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7843 ;;      Params:         6       0       0       0       0       0       0       0       0
  7844 ;;      Locals:         0       3       0       0       0       0       0       0       0
  7845 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7846 ;;      Totals:         9       3       0       0       0       0       0       0       0
  7847 ;;Total ram usage:       12 bytes
  7848 ;; Hardware stack levels used:    1
  7849 ;; Hardware stack levels required when called:    2
  7850 ;; This function calls:
  7851 ;;		___ftpack
  7852 ;; This function is called by:
  7853 ;;		_USART_Init
  7854 ;;		_convert_to_degrees
  7855 ;;		_sprintf
  7856 ;;		___ftsub
  7857 ;; This function uses a non-reentrant model
  7858 ;;
  7859                           
  7860                           	psect	text33
  7861  001DEC                     __ptext33:
  7862                           	opt stack 0
  7863  001DEC                     ___ftadd:
  7864                           	opt stack 26
  7865                           
  7866                           ;incstack = 0
  7867  001DEC  C03F  F043         	movff	___ftadd@f1+2,??___ftadd
  7868  001DF0  6A44               	clrf	(??___ftadd+1)& (0+255),c
  7869  001DF2  6A45               	clrf	(??___ftadd+2)& (0+255),c
  7870  001DF4  343E               	rlcf	___ftadd@f1+1,w,c
  7871  001DF6  3643               	rlcf	??___ftadd& (0+255),f,c
  7872  001DF8  E301               	bnc	u4291
  7873  001DFA  8044               	bsf	(??___ftadd+1)& (0+255),0,c
  7874  001DFC                     u4291:
  7875  001DFC  5043               	movf	??___ftadd,w,c
  7876  001DFE  0100               	movlb	0	; () banked
  7877  001E00  6F62               	movwf	___ftadd@exp1& (0+255),b
  7878  001E02  C042  F043         	movff	___ftadd@f2+2,??___ftadd
  7879  001E06  6A44               	clrf	(??___ftadd+1)& (0+255),c
  7880  001E08  6A45               	clrf	(??___ftadd+2)& (0+255),c
  7881  001E0A  3441               	rlcf	___ftadd@f2+1,w,c
  7882  001E0C  3643               	rlcf	??___ftadd& (0+255),f,c
  7883  001E0E  E301               	bnc	u4301
  7884  001E10  8044               	bsf	(??___ftadd+1)& (0+255),0,c
  7885  001E12                     u4301:
  7886  001E12  5043               	movf	??___ftadd,w,c
  7887  001E14  0100               	movlb	0	; () banked
  7888  001E16  6F61               	movwf	___ftadd@exp2& (0+255),b
  7889                           
  7890                           ; BSR set to: 0
  7891  001E18  0100               	movlb	0	; () banked
  7892  001E1A  5162               	movf	___ftadd@exp1& (0+255),w,b
  7893  001E1C  0100               	movlb	0	; () banked
  7894  001E1E  B4D8               	btfsc	status,2,c
  7895  001E20  D00F               	goto	l655
  7896                           
  7897                           ; BSR set to: 0
  7898  001E22  0100               	movlb	0	; () banked
  7899  001E24  5161               	movf	___ftadd@exp2& (0+255),w,b
  7900  001E26  0100               	movlb	0	; () banked
  7901  001E28  5D62               	subwf	___ftadd@exp1& (0+255),w,b
  7902  001E2A  B0D8               	btfsc	status,0,c
  7903  001E2C  D010               	goto	l3930
  7904                           
  7905                           ; BSR set to: 0
  7906  001E2E  0100               	movlb	0	; () banked
  7907  001E30  5162               	movf	___ftadd@exp1& (0+255),w,b
  7908  001E32  0800               	sublw	0
  7909  001E34  0100               	movlb	0	; () banked
  7910  001E36  2561               	addwf	___ftadd@exp2& (0+255),w,b
  7911  001E38  6E43               	movwf	??___ftadd& (0+255),c
  7912  001E3A  0E18               	movlw	24
  7913  001E3C  6443               	cpfsgt	??___ftadd,c
  7914  001E3E  D007               	goto	l3930
  7915  001E40                     l655:
  7916                           
  7917                           ; BSR set to: 0
  7918  001E40  C040  F03D         	movff	___ftadd@f2,?___ftadd
  7919  001E44  C041  F03E         	movff	___ftadd@f2+1,?___ftadd+1
  7920  001E48  C042  F03F         	movff	___ftadd@f2+2,?___ftadd+2
  7921  001E4C  0012               	return	
  7922  001E4E                     l3930:
  7923                           
  7924                           ; BSR set to: 0
  7925  001E4E  0100               	movlb	0	; () banked
  7926  001E50  5161               	movf	___ftadd@exp2& (0+255),w,b
  7927  001E52  0100               	movlb	0	; () banked
  7928  001E54  B4D8               	btfsc	status,2,c
  7929  001E56  D00F               	goto	l659
  7930                           
  7931                           ; BSR set to: 0
  7932  001E58  0100               	movlb	0	; () banked
  7933  001E5A  5162               	movf	___ftadd@exp1& (0+255),w,b
  7934  001E5C  0100               	movlb	0	; () banked
  7935  001E5E  5D61               	subwf	___ftadd@exp2& (0+255),w,b
  7936  001E60  B0D8               	btfsc	status,0,c
  7937  001E62  D010               	goto	l3936
  7938                           
  7939                           ; BSR set to: 0
  7940  001E64  0100               	movlb	0	; () banked
  7941  001E66  5161               	movf	___ftadd@exp2& (0+255),w,b
  7942  001E68  0800               	sublw	0
  7943  001E6A  0100               	movlb	0	; () banked
  7944  001E6C  2562               	addwf	___ftadd@exp1& (0+255),w,b
  7945  001E6E  6E43               	movwf	??___ftadd& (0+255),c
  7946  001E70  0E18               	movlw	24
  7947  001E72  6443               	cpfsgt	??___ftadd,c
  7948  001E74  D007               	goto	l3936
  7949  001E76                     l659:
  7950                           
  7951                           ; BSR set to: 0
  7952  001E76  C03D  F03D         	movff	___ftadd@f1,?___ftadd
  7953  001E7A  C03E  F03E         	movff	___ftadd@f1+1,?___ftadd+1
  7954  001E7E  C03F  F03F         	movff	___ftadd@f1+2,?___ftadd+2
  7955  001E82  0012               	return	
  7956  001E84                     l3936:
  7957                           
  7958                           ; BSR set to: 0
  7959  001E84  0E06               	movlw	6
  7960  001E86  0100               	movlb	0	; () banked
  7961  001E88  6F60               	movwf	___ftadd@sign& (0+255),b
  7962                           
  7963                           ; BSR set to: 0
  7964  001E8A  AE3F               	btfss	___ftadd@f1+2,7,c
  7965  001E8C  D002               	goto	l3942
  7966                           
  7967                           ; BSR set to: 0
  7968  001E8E  0100               	movlb	0	; () banked
  7969  001E90  8F60               	bsf	___ftadd@sign& (0+255),7,b
  7970  001E92                     l3942:
  7971                           
  7972                           ; BSR set to: 0
  7973  001E92  AE42               	btfss	___ftadd@f2+2,7,c
  7974  001E94  D002               	goto	l661
  7975                           
  7976                           ; BSR set to: 0
  7977  001E96  0100               	movlb	0	; () banked
  7978  001E98  8D60               	bsf	___ftadd@sign& (0+255),6,b
  7979  001E9A                     l661:
  7980                           
  7981                           ; BSR set to: 0
  7982  001E9A  8E3E               	bsf	___ftadd@f1+1,7,c
  7983                           
  7984                           ; BSR set to: 0
  7985  001E9C  0EFF               	movlw	255
  7986  001E9E  163D               	andwf	___ftadd@f1,f,c
  7987  001EA0  0EFF               	movlw	255
  7988  001EA2  163E               	andwf	___ftadd@f1+1,f,c
  7989  001EA4  0E00               	movlw	0
  7990  001EA6  163F               	andwf	___ftadd@f1+2,f,c
  7991  001EA8  8E41               	bsf	___ftadd@f2+1,7,c
  7992                           
  7993                           ; BSR set to: 0
  7994  001EAA  0EFF               	movlw	255
  7995  001EAC  1640               	andwf	___ftadd@f2,f,c
  7996  001EAE  0EFF               	movlw	255
  7997  001EB0  1641               	andwf	___ftadd@f2+1,f,c
  7998  001EB2  0E00               	movlw	0
  7999  001EB4  1642               	andwf	___ftadd@f2+2,f,c
  8000                           
  8001                           ; BSR set to: 0
  8002  001EB6  0100               	movlb	0	; () banked
  8003  001EB8  5161               	movf	___ftadd@exp2& (0+255),w,b
  8004  001EBA  0100               	movlb	0	; () banked
  8005  001EBC  5D62               	subwf	___ftadd@exp1& (0+255),w,b
  8006  001EBE  B0D8               	btfsc	status,0,c
  8007  001EC0  D022               	goto	l3962
  8008  001EC2                     l3952:
  8009                           
  8010                           ; BSR set to: 0
  8011  001EC2  90D8               	bcf	status,0,c
  8012  001EC4  3640               	rlcf	___ftadd@f2,f,c
  8013  001EC6  3641               	rlcf	___ftadd@f2+1,f,c
  8014  001EC8  3642               	rlcf	___ftadd@f2+2,f,c
  8015  001ECA  0100               	movlb	0	; () banked
  8016  001ECC  0761               	decf	___ftadd@exp2& (0+255),f,b
  8017                           
  8018                           ; BSR set to: 0
  8019  001ECE  0100               	movlb	0	; () banked
  8020  001ED0  5162               	movf	___ftadd@exp1& (0+255),w,b
  8021  001ED2  0100               	movlb	0	; () banked
  8022  001ED4  1961               	xorwf	___ftadd@exp2& (0+255),w,b
  8023  001ED6  B4D8               	btfsc	status,2,c
  8024  001ED8  D00F               	goto	l3960
  8025                           
  8026                           ; BSR set to: 0
  8027  001EDA  0100               	movlb	0	; () banked
  8028  001EDC  0760               	decf	___ftadd@sign& (0+255),f,b
  8029  001EDE  C060  F043         	movff	___ftadd@sign,??___ftadd
  8030  001EE2  0E07               	movlw	7
  8031  001EE4  1643               	andwf	??___ftadd,f,c
  8032  001EE6  B4D8               	btfsc	status,2,c
  8033  001EE8  D007               	goto	l3960
  8034  001EEA  D7EB               	goto	l3952
  8035  001EEC                     l3958:
  8036                           
  8037                           ; BSR set to: 0
  8038  001EEC  90D8               	bcf	status,0,c
  8039  001EEE  323F               	rrcf	___ftadd@f1+2,f,c
  8040  001EF0  323E               	rrcf	___ftadd@f1+1,f,c
  8041  001EF2  323D               	rrcf	___ftadd@f1,f,c
  8042  001EF4  0100               	movlb	0	; () banked
  8043  001EF6  2B62               	incf	___ftadd@exp1& (0+255),f,b
  8044  001EF8                     l3960:
  8045                           
  8046                           ; BSR set to: 0
  8047  001EF8  0100               	movlb	0	; () banked
  8048  001EFA  5161               	movf	___ftadd@exp2& (0+255),w,b
  8049  001EFC  0100               	movlb	0	; () banked
  8050  001EFE  1962               	xorwf	___ftadd@exp1& (0+255),w,b
  8051  001F00  B4D8               	btfsc	status,2,c
  8052  001F02  D028               	goto	l670
  8053  001F04  D7F3               	goto	l3958
  8054  001F06                     l3962:
  8055                           
  8056                           ; BSR set to: 0
  8057  001F06  0100               	movlb	0	; () banked
  8058  001F08  5162               	movf	___ftadd@exp1& (0+255),w,b
  8059  001F0A  0100               	movlb	0	; () banked
  8060  001F0C  5D61               	subwf	___ftadd@exp2& (0+255),w,b
  8061  001F0E  B0D8               	btfsc	status,0,c
  8062  001F10  D021               	goto	l670
  8063  001F12                     l3964:
  8064                           
  8065                           ; BSR set to: 0
  8066  001F12  90D8               	bcf	status,0,c
  8067  001F14  363D               	rlcf	___ftadd@f1,f,c
  8068  001F16  363E               	rlcf	___ftadd@f1+1,f,c
  8069  001F18  363F               	rlcf	___ftadd@f1+2,f,c
  8070  001F1A  0100               	movlb	0	; () banked
  8071  001F1C  0762               	decf	___ftadd@exp1& (0+255),f,b
  8072                           
  8073                           ; BSR set to: 0
  8074  001F1E  0100               	movlb	0	; () banked
  8075  001F20  5162               	movf	___ftadd@exp1& (0+255),w,b
  8076  001F22  0100               	movlb	0	; () banked
  8077  001F24  1961               	xorwf	___ftadd@exp2& (0+255),w,b
  8078  001F26  B4D8               	btfsc	status,2,c
  8079  001F28  D00F               	goto	l3972
  8080                           
  8081                           ; BSR set to: 0
  8082  001F2A  0100               	movlb	0	; () banked
  8083  001F2C  0760               	decf	___ftadd@sign& (0+255),f,b
  8084  001F2E  C060  F043         	movff	___ftadd@sign,??___ftadd
  8085  001F32  0E07               	movlw	7
  8086  001F34  1643               	andwf	??___ftadd,f,c
  8087  001F36  B4D8               	btfsc	status,2,c
  8088  001F38  D007               	goto	l3972
  8089  001F3A  D7EB               	goto	l3964
  8090  001F3C                     l3970:
  8091                           
  8092                           ; BSR set to: 0
  8093  001F3C  90D8               	bcf	status,0,c
  8094  001F3E  3242               	rrcf	___ftadd@f2+2,f,c
  8095  001F40  3241               	rrcf	___ftadd@f2+1,f,c
  8096  001F42  3240               	rrcf	___ftadd@f2,f,c
  8097  001F44  0100               	movlb	0	; () banked
  8098  001F46  2B61               	incf	___ftadd@exp2& (0+255),f,b
  8099  001F48                     l3972:
  8100                           
  8101                           ; BSR set to: 0
  8102  001F48  0100               	movlb	0	; () banked
  8103  001F4A  5161               	movf	___ftadd@exp2& (0+255),w,b
  8104  001F4C  0100               	movlb	0	; () banked
  8105  001F4E  1962               	xorwf	___ftadd@exp1& (0+255),w,b
  8106  001F50  A4D8               	btfss	status,2,c
  8107  001F52  D7F4               	goto	l3970
  8108  001F54                     l670:
  8109                           
  8110                           ; BSR set to: 0
  8111  001F54  0100               	movlb	0	; () banked
  8112  001F56  AF60               	btfss	___ftadd@sign& (0+255),7,b
  8113  001F58  D00C               	goto	l679
  8114                           
  8115                           ; BSR set to: 0
  8116  001F5A  0EFF               	movlw	255
  8117  001F5C  1A3D               	xorwf	___ftadd@f1,f,c
  8118  001F5E  0EFF               	movlw	255
  8119  001F60  1A3E               	xorwf	___ftadd@f1+1,f,c
  8120  001F62  0EFF               	movlw	255
  8121  001F64  1A3F               	xorwf	___ftadd@f1+2,f,c
  8122  001F66  0E01               	movlw	1
  8123  001F68  263D               	addwf	___ftadd@f1,f,c
  8124  001F6A  0E00               	movlw	0
  8125  001F6C  223E               	addwfc	___ftadd@f1+1,f,c
  8126  001F6E  0E00               	movlw	0
  8127  001F70  223F               	addwfc	___ftadd@f1+2,f,c
  8128  001F72                     l679:
  8129                           
  8130                           ; BSR set to: 0
  8131  001F72  0100               	movlb	0	; () banked
  8132  001F74  AD60               	btfss	___ftadd@sign& (0+255),6,b
  8133  001F76  D00C               	goto	l3978
  8134                           
  8135                           ; BSR set to: 0
  8136  001F78  0EFF               	movlw	255
  8137  001F7A  1A40               	xorwf	___ftadd@f2,f,c
  8138  001F7C  0EFF               	movlw	255
  8139  001F7E  1A41               	xorwf	___ftadd@f2+1,f,c
  8140  001F80  0EFF               	movlw	255
  8141  001F82  1A42               	xorwf	___ftadd@f2+2,f,c
  8142  001F84  0E01               	movlw	1
  8143  001F86  2640               	addwf	___ftadd@f2,f,c
  8144  001F88  0E00               	movlw	0
  8145  001F8A  2241               	addwfc	___ftadd@f2+1,f,c
  8146  001F8C  0E00               	movlw	0
  8147  001F8E  2242               	addwfc	___ftadd@f2+2,f,c
  8148  001F90                     l3978:
  8149                           
  8150                           ; BSR set to: 0
  8151  001F90  0E00               	movlw	0
  8152  001F92  0100               	movlb	0	; () banked
  8153  001F94  6F60               	movwf	___ftadd@sign& (0+255),b
  8154                           
  8155                           ; BSR set to: 0
  8156  001F96  503D               	movf	___ftadd@f1,w,c
  8157  001F98  2640               	addwf	___ftadd@f2,f,c
  8158  001F9A  503E               	movf	___ftadd@f1+1,w,c
  8159  001F9C  2241               	addwfc	___ftadd@f2+1,f,c
  8160  001F9E  503F               	movf	___ftadd@f1+2,w,c
  8161  001FA0  2242               	addwfc	___ftadd@f2+2,f,c
  8162                           
  8163                           ; BSR set to: 0
  8164  001FA2  AE42               	btfss	___ftadd@f2+2,7,c
  8165  001FA4  D00F               	goto	l3988
  8166                           
  8167                           ; BSR set to: 0
  8168  001FA6  0EFF               	movlw	255
  8169  001FA8  1A40               	xorwf	___ftadd@f2,f,c
  8170  001FAA  0EFF               	movlw	255
  8171  001FAC  1A41               	xorwf	___ftadd@f2+1,f,c
  8172  001FAE  0EFF               	movlw	255
  8173  001FB0  1A42               	xorwf	___ftadd@f2+2,f,c
  8174  001FB2  0E01               	movlw	1
  8175  001FB4  2640               	addwf	___ftadd@f2,f,c
  8176  001FB6  0E00               	movlw	0
  8177  001FB8  2241               	addwfc	___ftadd@f2+1,f,c
  8178  001FBA  0E00               	movlw	0
  8179  001FBC  2242               	addwfc	___ftadd@f2+2,f,c
  8180                           
  8181                           ; BSR set to: 0
  8182  001FBE  0E01               	movlw	1
  8183  001FC0  0100               	movlb	0	; () banked
  8184  001FC2  6F60               	movwf	___ftadd@sign& (0+255),b
  8185  001FC4                     l3988:
  8186                           
  8187                           ; BSR set to: 0
  8188  001FC4  C040  F010         	movff	___ftadd@f2,___ftpack@arg
  8189  001FC8  C041  F011         	movff	___ftadd@f2+1,___ftpack@arg+1
  8190  001FCC  C042  F012         	movff	___ftadd@f2+2,___ftpack@arg+2
  8191  001FD0  C062  F013         	movff	___ftadd@exp1,___ftpack@exp
  8192  001FD4  C060  F014         	movff	___ftadd@sign,___ftpack@sign
  8193  001FD8  ECC7  F014         	call	___ftpack	;wreg free
  8194  001FDC  C010  F03D         	movff	?___ftpack,?___ftadd
  8195  001FE0  C011  F03E         	movff	?___ftpack+1,?___ftadd+1
  8196  001FE4  C012  F03F         	movff	?___ftpack+2,?___ftadd+2
  8197  001FE8  0012               	return	
  8198  001FEA                     __end_of___ftadd:
  8199                           	opt stack 0
  8200                           tblptru	equ	0xFF8
  8201                           tblptrh	equ	0xFF7
  8202                           tblptrl	equ	0xFF6
  8203                           tablat	equ	0xFF5
  8204                           prodh	equ	0xFF4
  8205                           prodl	equ	0xFF3
  8206                           intcon	equ	0xFF2
  8207                           postinc0	equ	0xFEE
  8208                           wreg	equ	0xFE8
  8209                           indf1	equ	0xFE7
  8210                           fsr1h	equ	0xFE2
  8211                           fsr1l	equ	0xFE1
  8212                           indf2	equ	0xFDF
  8213                           postinc2	equ	0xFDE
  8214                           postdec2	equ	0xFDD
  8215                           fsr2h	equ	0xFDA
  8216                           fsr2l	equ	0xFD9
  8217                           status	equ	0xFD8
  8218                           
  8219 ;; *************** function ___altoft *****************
  8220 ;; Defined at:
  8221 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  8222 ;; Parameters:    Size  Location     Type
  8223 ;;  c               4   23[COMRAM] long 
  8224 ;; Auto vars:     Size  Location     Type
  8225 ;;  sign            1   32[COMRAM] unsigned char 
  8226 ;;  exp             1   31[COMRAM] unsigned char 
  8227 ;; Return value:  Size  Location     Type
  8228 ;;                  3   23[COMRAM] float 
  8229 ;; Registers used:
  8230 ;;		wreg, status,2, status,0, cstack
  8231 ;; Tracked objects:
  8232 ;;		On entry : 0/0
  8233 ;;		On exit  : 0/0
  8234 ;;		Unchanged: 0/0
  8235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8236 ;;      Params:         4       0       0       0       0       0       0       0       0
  8237 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8238 ;;      Temps:          4       0       0       0       0       0       0       0       0
  8239 ;;      Totals:        10       0       0       0       0       0       0       0       0
  8240 ;;Total ram usage:       10 bytes
  8241 ;; Hardware stack levels used:    1
  8242 ;; Hardware stack levels required when called:    2
  8243 ;; This function calls:
  8244 ;;		___ftpack
  8245 ;; This function is called by:
  8246 ;;		_USART_Init
  8247 ;;		_strtod
  8248 ;; This function uses a non-reentrant model
  8249 ;;
  8250                           
  8251                           	psect	text34
  8252  002E0C                     __ptext34:
  8253                           	opt stack 0
  8254  002E0C                     ___altoft:
  8255                           	opt stack 25
  8256                           
  8257                           ;incstack = 0
  8258  002E0C  0E00               	movlw	0
  8259  002E0E  6E21               	movwf	___altoft@sign,c
  8260  002E10  0E8E               	movlw	142
  8261  002E12  6E20               	movwf	___altoft@exp,c
  8262  002E14  AE1B               	btfss	___altoft@c+3,7,c
  8263  002E16  D011               	goto	l3916
  8264  002E18  1E1B               	comf	___altoft@c+3,f,c
  8265  002E1A  1E1A               	comf	___altoft@c+2,f,c
  8266  002E1C  1E19               	comf	___altoft@c+1,f,c
  8267  002E1E  6C18               	negf	___altoft@c,c
  8268  002E20  0E00               	movlw	0
  8269  002E22  2219               	addwfc	___altoft@c+1,f,c
  8270  002E24  221A               	addwfc	___altoft@c+2,f,c
  8271  002E26  221B               	addwfc	___altoft@c+3,f,c
  8272  002E28  0E01               	movlw	1
  8273  002E2A  6E21               	movwf	___altoft@sign,c
  8274  002E2C  D006               	goto	l3916
  8275  002E2E                     l3914:
  8276  002E2E  90D8               	bcf	status,0,c
  8277  002E30  321B               	rrcf	___altoft@c+3,f,c
  8278  002E32  321A               	rrcf	___altoft@c+2,f,c
  8279  002E34  3219               	rrcf	___altoft@c+1,f,c
  8280  002E36  3218               	rrcf	___altoft@c,f,c
  8281  002E38  2A20               	incf	___altoft@exp,f,c
  8282  002E3A                     l3916:
  8283  002E3A  0E00               	movlw	0
  8284  002E3C  1418               	andwf	___altoft@c,w,c
  8285  002E3E  6E1C               	movwf	??___altoft& (0+255),c
  8286  002E40  0E00               	movlw	0
  8287  002E42  1419               	andwf	___altoft@c+1,w,c
  8288  002E44  6E1D               	movwf	(??___altoft+1)& (0+255),c
  8289  002E46  0E00               	movlw	0
  8290  002E48  141A               	andwf	___altoft@c+2,w,c
  8291  002E4A  6E1E               	movwf	(??___altoft+2)& (0+255),c
  8292  002E4C  0EFF               	movlw	255
  8293  002E4E  141B               	andwf	___altoft@c+3,w,c
  8294  002E50  6E1F               	movwf	(??___altoft+3)& (0+255),c
  8295  002E52  501C               	movf	??___altoft,w,c
  8296  002E54  101D               	iorwf	??___altoft+1,w,c
  8297  002E56  101E               	iorwf	??___altoft+2,w,c
  8298  002E58  101F               	iorwf	??___altoft+3,w,c
  8299  002E5A  A4D8               	btfss	status,2,c
  8300  002E5C  D7E8               	goto	l3914
  8301  002E5E  C018  F010         	movff	___altoft@c,___ftpack@arg
  8302  002E62  C019  F011         	movff	___altoft@c+1,___ftpack@arg+1
  8303  002E66  C01A  F012         	movff	___altoft@c+2,___ftpack@arg+2
  8304  002E6A  C020  F013         	movff	___altoft@exp,___ftpack@exp
  8305  002E6E  C021  F014         	movff	___altoft@sign,___ftpack@sign
  8306  002E72  ECC7  F014         	call	___ftpack	;wreg free
  8307  002E76  C010  F018         	movff	?___ftpack,?___altoft
  8308  002E7A  C011  F019         	movff	?___ftpack+1,?___altoft+1
  8309  002E7E  C012  F01A         	movff	?___ftpack+2,?___altoft+2
  8310  002E82  0012               	return	
  8311  002E84                     __end_of___altoft:
  8312                           	opt stack 0
  8313                           tblptru	equ	0xFF8
  8314                           tblptrh	equ	0xFF7
  8315                           tblptrl	equ	0xFF6
  8316                           tablat	equ	0xFF5
  8317                           prodh	equ	0xFF4
  8318                           prodl	equ	0xFF3
  8319                           intcon	equ	0xFF2
  8320                           postinc0	equ	0xFEE
  8321                           wreg	equ	0xFE8
  8322                           indf1	equ	0xFE7
  8323                           fsr1h	equ	0xFE2
  8324                           fsr1l	equ	0xFE1
  8325                           indf2	equ	0xFDF
  8326                           postinc2	equ	0xFDE
  8327                           postdec2	equ	0xFDD
  8328                           fsr2h	equ	0xFDA
  8329                           fsr2l	equ	0xFD9
  8330                           status	equ	0xFD8
  8331                           
  8332 ;; *************** function ___ftpack *****************
  8333 ;; Defined at:
  8334 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  8335 ;; Parameters:    Size  Location     Type
  8336 ;;  arg             3   15[COMRAM] unsigned um
  8337 ;;  exp             1   18[COMRAM] unsigned char 
  8338 ;;  sign            1   19[COMRAM] unsigned char 
  8339 ;; Auto vars:     Size  Location     Type
  8340 ;;		None
  8341 ;; Return value:  Size  Location     Type
  8342 ;;                  3   15[COMRAM] float 
  8343 ;; Registers used:
  8344 ;;		wreg, status,2, status,0
  8345 ;; Tracked objects:
  8346 ;;		On entry : 0/0
  8347 ;;		On exit  : 0/0
  8348 ;;		Unchanged: 0/0
  8349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8350 ;;      Params:         5       0       0       0       0       0       0       0       0
  8351 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8352 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8353 ;;      Totals:         8       0       0       0       0       0       0       0       0
  8354 ;;Total ram usage:        8 bytes
  8355 ;; Hardware stack levels used:    1
  8356 ;; Hardware stack levels required when called:    1
  8357 ;; This function calls:
  8358 ;;		Nothing
  8359 ;; This function is called by:
  8360 ;;		___altoft
  8361 ;;		___awtoft
  8362 ;;		___ftadd
  8363 ;;		___ftdiv
  8364 ;;		___ftmul
  8365 ;;		___lltoft
  8366 ;; This function uses a non-reentrant model
  8367 ;;
  8368                           
  8369                           	psect	text35
  8370  00298E                     __ptext35:
  8371                           	opt stack 0
  8372  00298E                     ___ftpack:
  8373                           	opt stack 26
  8374                           
  8375                           ;incstack = 0
  8376  00298E  5013               	movf	___ftpack@exp,w,c
  8377  002990  B4D8               	btfsc	status,2,c
  8378  002992  D005               	goto	l3874
  8379  002994  5010               	movf	___ftpack@arg,w,c
  8380  002996  1011               	iorwf	___ftpack@arg+1,w,c
  8381  002998  1012               	iorwf	___ftpack@arg+2,w,c
  8382  00299A  A4D8               	btfss	status,2,c
  8383  00299C  D00C               	goto	l3880
  8384  00299E                     l3874:
  8385  00299E  0E00               	movlw	0
  8386  0029A0  6E10               	movwf	?___ftpack,c
  8387  0029A2  0E00               	movlw	0
  8388  0029A4  6E11               	movwf	?___ftpack+1,c
  8389  0029A6  0E00               	movlw	0
  8390  0029A8  6E12               	movwf	?___ftpack+2,c
  8391  0029AA  0012               	return	
  8392  0029AC                     l3878:
  8393  0029AC  2A13               	incf	___ftpack@exp,f,c
  8394  0029AE  90D8               	bcf	status,0,c
  8395  0029B0  3212               	rrcf	___ftpack@arg+2,f,c
  8396  0029B2  3211               	rrcf	___ftpack@arg+1,f,c
  8397  0029B4  3210               	rrcf	___ftpack@arg,f,c
  8398  0029B6                     l3880:
  8399  0029B6  0E00               	movlw	0
  8400  0029B8  1410               	andwf	___ftpack@arg,w,c
  8401  0029BA  6E15               	movwf	??___ftpack& (0+255),c
  8402  0029BC  0E00               	movlw	0
  8403  0029BE  1411               	andwf	___ftpack@arg+1,w,c
  8404  0029C0  6E16               	movwf	(??___ftpack+1)& (0+255),c
  8405  0029C2  0EFE               	movlw	254
  8406  0029C4  1412               	andwf	___ftpack@arg+2,w,c
  8407  0029C6  6E17               	movwf	(??___ftpack+2)& (0+255),c
  8408  0029C8  5015               	movf	??___ftpack,w,c
  8409  0029CA  1016               	iorwf	??___ftpack+1,w,c
  8410  0029CC  1017               	iorwf	??___ftpack+2,w,c
  8411  0029CE  B4D8               	btfsc	status,2,c
  8412  0029D0  D00C               	goto	l3886
  8413  0029D2  D7EC               	goto	l3878
  8414  0029D4                     l3882:
  8415  0029D4  2A13               	incf	___ftpack@exp,f,c
  8416  0029D6  0E01               	movlw	1
  8417  0029D8  2610               	addwf	___ftpack@arg,f,c
  8418  0029DA  0E00               	movlw	0
  8419  0029DC  2211               	addwfc	___ftpack@arg+1,f,c
  8420  0029DE  0E00               	movlw	0
  8421  0029E0  2212               	addwfc	___ftpack@arg+2,f,c
  8422  0029E2  90D8               	bcf	status,0,c
  8423  0029E4  3212               	rrcf	___ftpack@arg+2,f,c
  8424  0029E6  3211               	rrcf	___ftpack@arg+1,f,c
  8425  0029E8  3210               	rrcf	___ftpack@arg,f,c
  8426  0029EA                     l3886:
  8427  0029EA  0E00               	movlw	0
  8428  0029EC  1410               	andwf	___ftpack@arg,w,c
  8429  0029EE  6E15               	movwf	??___ftpack& (0+255),c
  8430  0029F0  0E00               	movlw	0
  8431  0029F2  1411               	andwf	___ftpack@arg+1,w,c
  8432  0029F4  6E16               	movwf	(??___ftpack+1)& (0+255),c
  8433  0029F6  0EFF               	movlw	255
  8434  0029F8  1412               	andwf	___ftpack@arg+2,w,c
  8435  0029FA  6E17               	movwf	(??___ftpack+2)& (0+255),c
  8436  0029FC  5015               	movf	??___ftpack,w,c
  8437  0029FE  1016               	iorwf	??___ftpack+1,w,c
  8438  002A00  1017               	iorwf	??___ftpack+2,w,c
  8439  002A02  B4D8               	btfsc	status,2,c
  8440  002A04  D006               	goto	l3890
  8441  002A06  D7E6               	goto	l3882
  8442  002A08                     l3888:
  8443  002A08  0613               	decf	___ftpack@exp,f,c
  8444  002A0A  90D8               	bcf	status,0,c
  8445  002A0C  3610               	rlcf	___ftpack@arg,f,c
  8446  002A0E  3611               	rlcf	___ftpack@arg+1,f,c
  8447  002A10  3612               	rlcf	___ftpack@arg+2,f,c
  8448  002A12                     l3890:
  8449  002A12  BE11               	btfsc	___ftpack@arg+1,7,c
  8450  002A14  D003               	goto	l632
  8451  002A16  0E02               	movlw	2
  8452  002A18  6013               	cpfslt	___ftpack@exp,c
  8453  002A1A  D7F6               	goto	l3888
  8454  002A1C                     l632:
  8455  002A1C  A013               	btfss	___ftpack@exp,0,c
  8456  002A1E  9E11               	bcf	___ftpack@arg+1,7,c
  8457  002A20  90D8               	bcf	status,0,c
  8458  002A22  3213               	rrcf	___ftpack@exp,f,c
  8459  002A24  5013               	movf	___ftpack@exp,w,c
  8460  002A26  1212               	iorwf	___ftpack@arg+2,f,c
  8461  002A28  5014               	movf	___ftpack@sign,w,c
  8462  002A2A  A4D8               	btfss	status,2,c
  8463  002A2C  8E12               	bsf	___ftpack@arg+2,7,c
  8464  002A2E  C010  F010         	movff	___ftpack@arg,?___ftpack
  8465  002A32  C011  F011         	movff	___ftpack@arg+1,?___ftpack+1
  8466  002A36  C012  F012         	movff	___ftpack@arg+2,?___ftpack+2
  8467  002A3A  0012               	return	
  8468  002A3C                     __end_of___ftpack:
  8469                           	opt stack 0
  8470                           tblptru	equ	0xFF8
  8471                           tblptrh	equ	0xFF7
  8472                           tblptrl	equ	0xFF6
  8473                           tablat	equ	0xFF5
  8474                           prodh	equ	0xFF4
  8475                           prodl	equ	0xFF3
  8476                           intcon	equ	0xFF2
  8477                           postinc0	equ	0xFEE
  8478                           wreg	equ	0xFE8
  8479                           indf1	equ	0xFE7
  8480                           fsr1h	equ	0xFE2
  8481                           fsr1l	equ	0xFE1
  8482                           indf2	equ	0xFDF
  8483                           postinc2	equ	0xFDE
  8484                           postdec2	equ	0xFDD
  8485                           fsr2h	equ	0xFDA
  8486                           fsr2l	equ	0xFD9
  8487                           status	equ	0xFD8
  8488                           
  8489 ;; *************** function _LCD_String_xy *****************
  8490 ;; Defined at:
  8491 ;;		line 57 in file "LCD_20x4_C_file.c"
  8492 ;; Parameters:    Size  Location     Type
  8493 ;;  row             1    wreg     unsigned char 
  8494 ;;  pos             1   24[COMRAM] unsigned char 
  8495 ;;  str             2   25[COMRAM] PTR const unsigned char 
  8496 ;;		 -> STR_7(6), STR_5(7), STR_3(6), STR_1(11), 
  8497 ;; Auto vars:     Size  Location     Type
  8498 ;;  row             1   27[COMRAM] unsigned char 
  8499 ;; Return value:  Size  Location     Type
  8500 ;;                  1    wreg      void 
  8501 ;; Registers used:
  8502 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8503 ;; Tracked objects:
  8504 ;;		On entry : 0/0
  8505 ;;		On exit  : 0/0
  8506 ;;		Unchanged: 0/0
  8507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8508 ;;      Params:         3       0       0       0       0       0       0       0       0
  8509 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8510 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8511 ;;      Totals:         4       0       0       0       0       0       0       0       0
  8512 ;;Total ram usage:        4 bytes
  8513 ;; Hardware stack levels used:    1
  8514 ;; Hardware stack levels required when called:    4
  8515 ;; This function calls:
  8516 ;;		_LCD_Command
  8517 ;;		_LCD_String
  8518 ;; This function is called by:
  8519 ;;		_main
  8520 ;; This function uses a non-reentrant model
  8521 ;;
  8522                           
  8523                           	psect	text36
  8524  003028                     __ptext36:
  8525                           	opt stack 0
  8526  003028                     _LCD_String_xy:
  8527                           	opt stack 26
  8528                           
  8529                           ;incstack = 0
  8530                           ;LCD_String_xy@row stored from wreg
  8531  003028  6E1C               	movwf	LCD_String_xy@row,c
  8532                           
  8533                           ;LCD_20x4_C_file.c: 59: if (row == 1)
  8534  00302A  041C               	decf	LCD_String_xy@row,w,c
  8535  00302C  A4D8               	btfss	status,2,c
  8536  00302E  D006               	goto	l3676
  8537                           
  8538                           ;LCD_20x4_C_file.c: 60: LCD_Command((pos & 0x0F)|0x80);
  8539  003030  5019               	movf	LCD_String_xy@pos,w,c
  8540  003032  0B0F               	andlw	15
  8541  003034  0980               	iorlw	128
  8542  003036  ECA9  F019         	call	_LCD_Command
  8543  00303A  D01D               	goto	l3688
  8544  00303C                     l3676:
  8545                           
  8546                           ;LCD_20x4_C_file.c: 61: else if (row == 2)
  8547  00303C  0E02               	movlw	2
  8548  00303E  181C               	xorwf	LCD_String_xy@row,w,c
  8549  003040  A4D8               	btfss	status,2,c
  8550  003042  D006               	goto	l3680
  8551                           
  8552                           ;LCD_20x4_C_file.c: 62: LCD_Command((pos & 0x0F)|0xC0);
  8553  003044  5019               	movf	LCD_String_xy@pos,w,c
  8554  003046  0B0F               	andlw	15
  8555  003048  09C0               	iorlw	192
  8556  00304A  ECA9  F019         	call	_LCD_Command
  8557  00304E  D013               	goto	l3688
  8558  003050                     l3680:
  8559                           
  8560                           ;LCD_20x4_C_file.c: 63: else if (row == 3)
  8561  003050  0E03               	movlw	3
  8562  003052  181C               	xorwf	LCD_String_xy@row,w,c
  8563  003054  A4D8               	btfss	status,2,c
  8564  003056  D006               	goto	l3684
  8565                           
  8566                           ;LCD_20x4_C_file.c: 64: LCD_Command((pos & 0x0F)|0x94);
  8567  003058  5019               	movf	LCD_String_xy@pos,w,c
  8568  00305A  0B0F               	andlw	15
  8569  00305C  0994               	iorlw	148
  8570  00305E  ECA9  F019         	call	_LCD_Command
  8571  003062  D009               	goto	l3688
  8572  003064                     l3684:
  8573                           
  8574                           ;LCD_20x4_C_file.c: 65: else if (row == 4)
  8575  003064  0E04               	movlw	4
  8576  003066  181C               	xorwf	LCD_String_xy@row,w,c
  8577  003068  A4D8               	btfss	status,2,c
  8578  00306A  D005               	goto	l3688
  8579                           
  8580                           ;LCD_20x4_C_file.c: 66: LCD_Command((pos & 0x0F)|0xD4);
  8581  00306C  5019               	movf	LCD_String_xy@pos,w,c
  8582  00306E  0B0F               	andlw	15
  8583  003070  09D4               	iorlw	212
  8584  003072  ECA9  F019         	call	_LCD_Command
  8585  003076                     l3688:
  8586                           
  8587                           ;LCD_20x4_C_file.c: 67: LCD_String(str);
  8588  003076  C01A  F017         	movff	LCD_String_xy@str,LCD_String@str
  8589  00307A  C01B  F018         	movff	LCD_String_xy@str+1,LCD_String@str+1
  8590  00307E  EC6D  F018         	call	_LCD_String	;wreg free
  8591  003082  0012               	return		;funcret
  8592  003084                     __end_of_LCD_String_xy:
  8593                           	opt stack 0
  8594                           tblptru	equ	0xFF8
  8595                           tblptrh	equ	0xFF7
  8596                           tblptrl	equ	0xFF6
  8597                           tablat	equ	0xFF5
  8598                           prodh	equ	0xFF4
  8599                           prodl	equ	0xFF3
  8600                           intcon	equ	0xFF2
  8601                           postinc0	equ	0xFEE
  8602                           wreg	equ	0xFE8
  8603                           indf1	equ	0xFE7
  8604                           fsr1h	equ	0xFE2
  8605                           fsr1l	equ	0xFE1
  8606                           indf2	equ	0xFDF
  8607                           postinc2	equ	0xFDE
  8608                           postdec2	equ	0xFDD
  8609                           fsr2h	equ	0xFDA
  8610                           fsr2l	equ	0xFD9
  8611                           status	equ	0xFD8
  8612                           
  8613 ;; *************** function _LCD_String *****************
  8614 ;; Defined at:
  8615 ;;		line 47 in file "LCD_20x4_C_file.c"
  8616 ;; Parameters:    Size  Location     Type
  8617 ;;  str             2   22[COMRAM] PTR const unsigned char 
  8618 ;;		 -> STR_7(6), STR_5(7), STR_3(6), STR_2(3), 
  8619 ;;		 -> Data_Buffer(15), STR_1(11), main@GPS_Buffer(15), 
  8620 ;; Auto vars:     Size  Location     Type
  8621 ;;  i               2    0        int 
  8622 ;; Return value:  Size  Location     Type
  8623 ;;                  1    wreg      void 
  8624 ;; Registers used:
  8625 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8626 ;; Tracked objects:
  8627 ;;		On entry : 0/0
  8628 ;;		On exit  : 0/0
  8629 ;;		Unchanged: 0/0
  8630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8631 ;;      Params:         2       0       0       0       0       0       0       0       0
  8632 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8633 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8634 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8635 ;;Total ram usage:        2 bytes
  8636 ;; Hardware stack levels used:    1
  8637 ;; Hardware stack levels required when called:    3
  8638 ;; This function calls:
  8639 ;;		_LCD_Char
  8640 ;; This function is called by:
  8641 ;;		_main
  8642 ;;		_LCD_String_xy
  8643 ;; This function uses a non-reentrant model
  8644 ;;
  8645                           
  8646                           	psect	text37
  8647  0030DA                     __ptext37:
  8648                           	opt stack 0
  8649  0030DA                     _LCD_String:
  8650                           	opt stack 26
  8651                           
  8652                           ;LCD_20x4_C_file.c: 49: int i;
  8653                           ;LCD_20x4_C_file.c: 50: while((*str)!=0)
  8654                           
  8655                           ;incstack = 0
  8656  0030DA  D014               	goto	l3332
  8657  0030DC                     l3328:
  8658                           
  8659                           ;LCD_20x4_C_file.c: 51: {
  8660                           ;LCD_20x4_C_file.c: 52: LCD_Char (*str);
  8661  0030DC  C017  FFF6         	movff	LCD_String@str,tblptrl
  8662  0030E0  C018  FFF7         	movff	LCD_String@str+1,tblptrh
  8663  0030E4  6AF8               	clrf	tblptru,c
  8664  0030E6  0E07               	movlw	(high __ramtop+-1)
  8665  0030E8  64F7               	cpfsgt	tblptrh,c
  8666  0030EA  D003               	bra	u3527
  8667  0030EC  0008               	tblrd		*
  8668  0030EE  50F5               	movf	tablat,w,c
  8669  0030F0  D005               	bra	u3520
  8670  0030F2                     u3527:
  8671  0030F2  CFF6 FFE1          	movff	tblptrl,fsr1l
  8672  0030F6  CFF7 FFE2          	movff	tblptrh,fsr1h
  8673  0030FA  50E7               	movf	indf1,w,c
  8674  0030FC                     u3520:
  8675  0030FC  EC9A  F019         	call	_LCD_Char
  8676                           
  8677                           ;LCD_20x4_C_file.c: 53: str++;
  8678  003100  4A17               	infsnz	LCD_String@str,f,c
  8679  003102  2A18               	incf	LCD_String@str+1,f,c
  8680  003104                     l3332:
  8681  003104  C017  FFF6         	movff	LCD_String@str,tblptrl
  8682  003108  C018  FFF7         	movff	LCD_String@str+1,tblptrh
  8683  00310C  6AF8               	clrf	tblptru,c
  8684  00310E  0E07               	movlw	(high __ramtop+-1)
  8685  003110  64F7               	cpfsgt	tblptrh,c
  8686  003112  D003               	bra	u3537
  8687  003114  0008               	tblrd		*
  8688  003116  50F5               	movf	tablat,w,c
  8689  003118  D005               	bra	u3530
  8690  00311A                     u3537:
  8691  00311A  CFF6 FFE1          	movff	tblptrl,fsr1l
  8692  00311E  CFF7 FFE2          	movff	tblptrh,fsr1h
  8693  003122  50E7               	movf	indf1,w,c
  8694  003124                     u3530:
  8695  003124  0900               	iorlw	0
  8696  003126  B4D8               	btfsc	status,2,c
  8697  003128  0012               	return	
  8698  00312A  D7D8               	goto	l3328
  8699  00312C                     __end_of_LCD_String:
  8700                           	opt stack 0
  8701                           tblptru	equ	0xFF8
  8702                           tblptrh	equ	0xFF7
  8703                           tblptrl	equ	0xFF6
  8704                           tablat	equ	0xFF5
  8705                           prodh	equ	0xFF4
  8706                           prodl	equ	0xFF3
  8707                           intcon	equ	0xFF2
  8708                           postinc0	equ	0xFEE
  8709                           wreg	equ	0xFE8
  8710                           indf1	equ	0xFE7
  8711                           fsr1h	equ	0xFE2
  8712                           fsr1l	equ	0xFE1
  8713                           indf2	equ	0xFDF
  8714                           postinc2	equ	0xFDE
  8715                           postdec2	equ	0xFDD
  8716                           fsr2h	equ	0xFDA
  8717                           fsr2l	equ	0xFD9
  8718                           status	equ	0xFD8
  8719                           
  8720 ;; *************** function _LCD_Char *****************
  8721 ;; Defined at:
  8722 ;;		line 22 in file "LCD_20x4_C_file.c"
  8723 ;; Parameters:    Size  Location     Type
  8724 ;;  char_data       1    wreg     unsigned char 
  8725 ;; Auto vars:     Size  Location     Type
  8726 ;;  char_data       1   21[COMRAM] unsigned char 
  8727 ;; Return value:  Size  Location     Type
  8728 ;;                  1    wreg      void 
  8729 ;; Registers used:
  8730 ;;		wreg, status,2, status,0, cstack
  8731 ;; Tracked objects:
  8732 ;;		On entry : 0/0
  8733 ;;		On exit  : 0/0
  8734 ;;		Unchanged: 0/0
  8735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8736 ;;      Params:         0       0       0       0       0       0       0       0       0
  8737 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8738 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8739 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8740 ;;Total ram usage:        1 bytes
  8741 ;; Hardware stack levels used:    1
  8742 ;; Hardware stack levels required when called:    2
  8743 ;; This function calls:
  8744 ;;		_MSdelay
  8745 ;; This function is called by:
  8746 ;;		_LCD_String
  8747 ;; This function uses a non-reentrant model
  8748 ;;
  8749                           
  8750                           	psect	text38
  8751  003334                     __ptext38:
  8752                           	opt stack 0
  8753  003334                     _LCD_Char:
  8754                           	opt stack 26
  8755                           
  8756                           ;incstack = 0
  8757                           ;LCD_Char@char_data stored from wreg
  8758  003334  6E16               	movwf	LCD_Char@char_data,c
  8759                           
  8760                           ;LCD_20x4_C_file.c: 24: LATB = char_data;
  8761  003336  C016  FF8A         	movff	LCD_Char@char_data,3978	;volatile
  8762                           
  8763                           ;LCD_20x4_C_file.c: 25: LATD0 = 1;
  8764  00333A  808C               	bsf	3980,0,c	;volatile
  8765                           
  8766                           ;LCD_20x4_C_file.c: 26: LATD1 = 0;
  8767  00333C  928C               	bcf	3980,1,c	;volatile
  8768                           
  8769                           ;LCD_20x4_C_file.c: 27: LATD2 = 1;
  8770  00333E  848C               	bsf	3980,2,c	;volatile
  8771                           
  8772                           ;LCD_20x4_C_file.c: 28: __nop();
  8773  003340  F000               	nop	
  8774                           
  8775                           ;LCD_20x4_C_file.c: 29: LATD2 = 0;
  8776  003342  948C               	bcf	3980,2,c	;volatile
  8777                           
  8778                           ;LCD_20x4_C_file.c: 30: MSdelay(3);
  8779  003344  0E00               	movlw	0
  8780  003346  6E11               	movwf	MSdelay@val+1,c
  8781  003348  0E03               	movlw	3
  8782  00334A  6E10               	movwf	MSdelay@val,c
  8783  00334C  ECF8  F018         	call	_MSdelay	;wreg free
  8784  003350  0012               	return		;funcret
  8785  003352                     __end_of_LCD_Char:
  8786                           	opt stack 0
  8787                           tblptru	equ	0xFF8
  8788                           tblptrh	equ	0xFF7
  8789                           tblptrl	equ	0xFF6
  8790                           tablat	equ	0xFF5
  8791                           prodh	equ	0xFF4
  8792                           prodl	equ	0xFF3
  8793                           intcon	equ	0xFF2
  8794                           postinc0	equ	0xFEE
  8795                           wreg	equ	0xFE8
  8796                           indf1	equ	0xFE7
  8797                           fsr1h	equ	0xFE2
  8798                           fsr1l	equ	0xFE1
  8799                           indf2	equ	0xFDF
  8800                           postinc2	equ	0xFDE
  8801                           postdec2	equ	0xFDD
  8802                           fsr2h	equ	0xFDA
  8803                           fsr2l	equ	0xFD9
  8804                           status	equ	0xFD8
  8805                           
  8806 ;; *************** function _LCD_Init *****************
  8807 ;; Defined at:
  8808 ;;		line 33 in file "LCD_20x4_C_file.c"
  8809 ;; Parameters:    Size  Location     Type
  8810 ;;		None
  8811 ;; Auto vars:     Size  Location     Type
  8812 ;;		None
  8813 ;; Return value:  Size  Location     Type
  8814 ;;                  1    wreg      void 
  8815 ;; Registers used:
  8816 ;;		wreg, status,2, status,0, cstack
  8817 ;; Tracked objects:
  8818 ;;		On entry : 0/0
  8819 ;;		On exit  : 0/0
  8820 ;;		Unchanged: 0/0
  8821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8822 ;;      Params:         0       0       0       0       0       0       0       0       0
  8823 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8824 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8825 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8826 ;;Total ram usage:        0 bytes
  8827 ;; Hardware stack levels used:    1
  8828 ;; Hardware stack levels required when called:    3
  8829 ;; This function calls:
  8830 ;;		_LCD_Command
  8831 ;;		_MSdelay
  8832 ;; This function is called by:
  8833 ;;		_main
  8834 ;; This function uses a non-reentrant model
  8835 ;;
  8836                           
  8837                           	psect	text39
  8838  003178                     __ptext39:
  8839                           	opt stack 0
  8840  003178                     _LCD_Init:
  8841                           	opt stack 27
  8842                           
  8843                           ;LCD_20x4_C_file.c: 35: TRISD = 0;
  8844                           
  8845                           ;incstack = 0
  8846  003178  0E00               	movlw	0
  8847  00317A  6E95               	movwf	3989,c	;volatile
  8848                           
  8849                           ;LCD_20x4_C_file.c: 36: TRISB = 0;
  8850  00317C  0E00               	movlw	0
  8851  00317E  6E93               	movwf	3987,c	;volatile
  8852                           
  8853                           ;LCD_20x4_C_file.c: 38: MSdelay(20);
  8854  003180  0E00               	movlw	0
  8855  003182  6E11               	movwf	MSdelay@val+1,c
  8856  003184  0E14               	movlw	20
  8857  003186  6E10               	movwf	MSdelay@val,c
  8858  003188  ECF8  F018         	call	_MSdelay	;wreg free
  8859                           
  8860                           ;LCD_20x4_C_file.c: 39: LCD_Command (0x38);
  8861  00318C  0E38               	movlw	56
  8862  00318E  ECA9  F019         	call	_LCD_Command
  8863                           
  8864                           ;LCD_20x4_C_file.c: 40: LCD_Command (0x0C);
  8865  003192  0E0C               	movlw	12
  8866  003194  ECA9  F019         	call	_LCD_Command
  8867                           
  8868                           ;LCD_20x4_C_file.c: 41: LCD_Command (0x06);
  8869  003198  0E06               	movlw	6
  8870  00319A  ECA9  F019         	call	_LCD_Command
  8871                           
  8872                           ;LCD_20x4_C_file.c: 42: LCD_Command (0x01);
  8873  00319E  0E01               	movlw	1
  8874  0031A0  ECA9  F019         	call	_LCD_Command
  8875                           
  8876                           ;LCD_20x4_C_file.c: 43: MSdelay(3);
  8877  0031A4  0E00               	movlw	0
  8878  0031A6  6E11               	movwf	MSdelay@val+1,c
  8879  0031A8  0E03               	movlw	3
  8880  0031AA  6E10               	movwf	MSdelay@val,c
  8881  0031AC  ECF8  F018         	call	_MSdelay	;wreg free
  8882                           
  8883                           ;LCD_20x4_C_file.c: 44: LCD_Command (0x80);
  8884  0031B0  0E80               	movlw	128
  8885  0031B2  ECA9  F019         	call	_LCD_Command
  8886  0031B6  0012               	return		;funcret
  8887  0031B8                     __end_of_LCD_Init:
  8888                           	opt stack 0
  8889                           tblptru	equ	0xFF8
  8890                           tblptrh	equ	0xFF7
  8891                           tblptrl	equ	0xFF6
  8892                           tablat	equ	0xFF5
  8893                           prodh	equ	0xFF4
  8894                           prodl	equ	0xFF3
  8895                           intcon	equ	0xFF2
  8896                           postinc0	equ	0xFEE
  8897                           wreg	equ	0xFE8
  8898                           indf1	equ	0xFE7
  8899                           fsr1h	equ	0xFE2
  8900                           fsr1l	equ	0xFE1
  8901                           indf2	equ	0xFDF
  8902                           postinc2	equ	0xFDE
  8903                           postdec2	equ	0xFDD
  8904                           fsr2h	equ	0xFDA
  8905                           fsr2l	equ	0xFD9
  8906                           status	equ	0xFD8
  8907                           
  8908 ;; *************** function _LCD_Command *****************
  8909 ;; Defined at:
  8910 ;;		line 11 in file "LCD_20x4_C_file.c"
  8911 ;; Parameters:    Size  Location     Type
  8912 ;;  cmd             1    wreg     unsigned char 
  8913 ;; Auto vars:     Size  Location     Type
  8914 ;;  cmd             1   21[COMRAM] unsigned char 
  8915 ;; Return value:  Size  Location     Type
  8916 ;;                  1    wreg      void 
  8917 ;; Registers used:
  8918 ;;		wreg, status,2, status,0, cstack
  8919 ;; Tracked objects:
  8920 ;;		On entry : 0/0
  8921 ;;		On exit  : 0/0
  8922 ;;		Unchanged: 0/0
  8923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8924 ;;      Params:         0       0       0       0       0       0       0       0       0
  8925 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8926 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8927 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8928 ;;Total ram usage:        1 bytes
  8929 ;; Hardware stack levels used:    1
  8930 ;; Hardware stack levels required when called:    2
  8931 ;; This function calls:
  8932 ;;		_MSdelay
  8933 ;; This function is called by:
  8934 ;;		_LCD_Init
  8935 ;;		_LCD_String_xy
  8936 ;;		_LCD_Clear
  8937 ;; This function uses a non-reentrant model
  8938 ;;
  8939                           
  8940                           	psect	text40
  8941  003352                     __ptext40:
  8942                           	opt stack 0
  8943  003352                     _LCD_Command:
  8944                           	opt stack 27
  8945                           
  8946                           ;incstack = 0
  8947                           ;LCD_Command@cmd stored from wreg
  8948  003352  6E16               	movwf	LCD_Command@cmd,c
  8949                           
  8950                           ;LCD_20x4_C_file.c: 13: LATB = cmd;
  8951  003354  C016  FF8A         	movff	LCD_Command@cmd,3978	;volatile
  8952                           
  8953                           ;LCD_20x4_C_file.c: 14: LATD0 = 0;
  8954  003358  908C               	bcf	3980,0,c	;volatile
  8955                           
  8956                           ;LCD_20x4_C_file.c: 15: LATD1 = 0;
  8957  00335A  928C               	bcf	3980,1,c	;volatile
  8958                           
  8959                           ;LCD_20x4_C_file.c: 16: LATD2 = 1;
  8960  00335C  848C               	bsf	3980,2,c	;volatile
  8961                           
  8962                           ;LCD_20x4_C_file.c: 17: __nop();
  8963  00335E  F000               	nop	
  8964                           
  8965                           ;LCD_20x4_C_file.c: 18: LATD2 = 0;
  8966  003360  948C               	bcf	3980,2,c	;volatile
  8967                           
  8968                           ;LCD_20x4_C_file.c: 19: MSdelay(3);
  8969  003362  0E00               	movlw	0
  8970  003364  6E11               	movwf	MSdelay@val+1,c
  8971  003366  0E03               	movlw	3
  8972  003368  6E10               	movwf	MSdelay@val,c
  8973  00336A  ECF8  F018         	call	_MSdelay	;wreg free
  8974  00336E  0012               	return		;funcret
  8975  003370                     __end_of_LCD_Command:
  8976                           	opt stack 0
  8977                           tblptru	equ	0xFF8
  8978                           tblptrh	equ	0xFF7
  8979                           tblptrl	equ	0xFF6
  8980                           tablat	equ	0xFF5
  8981                           prodh	equ	0xFF4
  8982                           prodl	equ	0xFF3
  8983                           intcon	equ	0xFF2
  8984                           postinc0	equ	0xFEE
  8985                           wreg	equ	0xFE8
  8986                           indf1	equ	0xFE7
  8987                           fsr1h	equ	0xFE2
  8988                           fsr1l	equ	0xFE1
  8989                           indf2	equ	0xFDF
  8990                           postinc2	equ	0xFDE
  8991                           postdec2	equ	0xFDD
  8992                           fsr2h	equ	0xFDA
  8993                           fsr2l	equ	0xFD9
  8994                           status	equ	0xFD8
  8995                           
  8996 ;; *************** function _MSdelay *****************
  8997 ;; Defined at:
  8998 ;;		line 78 in file "LCD_20x4_C_file.c"
  8999 ;; Parameters:    Size  Location     Type
  9000 ;;  val             2   15[COMRAM] unsigned int 
  9001 ;; Auto vars:     Size  Location     Type
  9002 ;;  j               2   19[COMRAM] unsigned int 
  9003 ;;  i               2   17[COMRAM] unsigned int 
  9004 ;; Return value:  Size  Location     Type
  9005 ;;                  1    wreg      void 
  9006 ;; Registers used:
  9007 ;;		wreg, status,2, status,0
  9008 ;; Tracked objects:
  9009 ;;		On entry : 0/0
  9010 ;;		On exit  : 0/0
  9011 ;;		Unchanged: 0/0
  9012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9013 ;;      Params:         2       0       0       0       0       0       0       0       0
  9014 ;;      Locals:         4       0       0       0       0       0       0       0       0
  9015 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9016 ;;      Totals:         6       0       0       0       0       0       0       0       0
  9017 ;;Total ram usage:        6 bytes
  9018 ;; Hardware stack levels used:    1
  9019 ;; Hardware stack levels required when called:    1
  9020 ;; This function calls:
  9021 ;;		Nothing
  9022 ;; This function is called by:
  9023 ;;		_LCD_Command
  9024 ;;		_LCD_Char
  9025 ;;		_LCD_Init
  9026 ;;		_LCD_Clear
  9027 ;; This function uses a non-reentrant model
  9028 ;;
  9029                           
  9030                           	psect	text41
  9031  0031F0                     __ptext41:
  9032                           	opt stack 0
  9033  0031F0                     _MSdelay:
  9034                           	opt stack 26
  9035                           
  9036                           ;LCD_20x4_C_file.c: 80: unsigned int i,j;
  9037                           ;LCD_20x4_C_file.c: 81: for(i=0;i<val;i++)
  9038                           
  9039                           ;incstack = 0
  9040  0031F0  0E00               	movlw	0
  9041  0031F2  6E13               	movwf	MSdelay@i+1,c
  9042  0031F4  0E00               	movlw	0
  9043  0031F6  6E12               	movwf	MSdelay@i,c
  9044  0031F8  D00F               	goto	l2542
  9045  0031FA                     l2530:
  9046                           
  9047                           ;LCD_20x4_C_file.c: 82: for(j=0;j<165;j++);
  9048  0031FA  0E00               	movlw	0
  9049  0031FC  6E15               	movwf	MSdelay@j+1,c
  9050  0031FE  0E00               	movlw	0
  9051  003200  6E14               	movwf	MSdelay@j,c
  9052  003202                     l2532:
  9053  003202  5015               	movf	MSdelay@j+1,w,c
  9054  003204  E107               	bnz	l2540
  9055  003206  0EA5               	movlw	165
  9056  003208  5C14               	subwf	MSdelay@j,w,c
  9057  00320A  B0D8               	btfsc	status,0,c
  9058  00320C  D003               	goto	l2540
  9059  00320E  4A14               	infsnz	MSdelay@j,f,c
  9060  003210  2A15               	incf	MSdelay@j+1,f,c
  9061  003212  D7F7               	goto	l2532
  9062  003214                     l2540:
  9063  003214  4A12               	infsnz	MSdelay@i,f,c
  9064  003216  2A13               	incf	MSdelay@i+1,f,c
  9065  003218                     l2542:
  9066  003218  5010               	movf	MSdelay@val,w,c
  9067  00321A  5C12               	subwf	MSdelay@i,w,c
  9068  00321C  5011               	movf	MSdelay@val+1,w,c
  9069  00321E  5813               	subwfb	MSdelay@i+1,w,c
  9070  003220  B0D8               	btfsc	status,0,c
  9071  003222  0012               	return	
  9072  003224  D7EA               	goto	l2530
  9073  003226                     __end_of_MSdelay:
  9074                           	opt stack 0
  9075                           tblptru	equ	0xFF8
  9076                           tblptrh	equ	0xFF7
  9077                           tblptrl	equ	0xFF6
  9078                           tablat	equ	0xFF5
  9079                           prodh	equ	0xFF4
  9080                           prodl	equ	0xFF3
  9081                           intcon	equ	0xFF2
  9082                           postinc0	equ	0xFEE
  9083                           wreg	equ	0xFE8
  9084                           indf1	equ	0xFE7
  9085                           fsr1h	equ	0xFE2
  9086                           fsr1l	equ	0xFE1
  9087                           indf2	equ	0xFDF
  9088                           postinc2	equ	0xFDE
  9089                           postdec2	equ	0xFDD
  9090                           fsr2h	equ	0xFDA
  9091                           fsr2l	equ	0xFD9
  9092                           status	equ	0xFD8
  9093                           
  9094 ;; *************** function _Serial_ISR *****************
  9095 ;; Defined at:
  9096 ;;		line 172 in file "GPS_info.c"
  9097 ;; Parameters:    Size  Location     Type
  9098 ;;		None
  9099 ;; Auto vars:     Size  Location     Type
  9100 ;;  received_cha    1   14[COMRAM] unsigned char 
  9101 ;; Return value:  Size  Location     Type
  9102 ;;                  1    wreg      void 
  9103 ;; Registers used:
  9104 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9105 ;; Tracked objects:
  9106 ;;		On entry : 0/0
  9107 ;;		On exit  : 0/0
  9108 ;;		Unchanged: 0/0
  9109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9110 ;;      Params:         0       0       0       0       0       0       0       0       0
  9111 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9112 ;;      Temps:         14       0       0       0       0       0       0       0       0
  9113 ;;      Totals:        15       0       0       0       0       0       0       0       0
  9114 ;;Total ram usage:       15 bytes
  9115 ;; Hardware stack levels used:    1
  9116 ;; This function calls:
  9117 ;;		Nothing
  9118 ;; This function is called by:
  9119 ;;		Interrupt level 2
  9120 ;; This function uses a non-reentrant model
  9121 ;;
  9122                           
  9123                           	psect	intcode
  9124  000008                     __pintcode:
  9125                           	opt stack 0
  9126  000008                     _Serial_ISR:
  9127                           	opt stack 25
  9128                           
  9129                           ;incstack = 0
  9130  000008  824F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9131  00000A  ED4B  F012         	call	int_func,f	;refresh shadow registers
  9132                           tblptru	equ	0xFF8
  9133                           tblptrh	equ	0xFF7
  9134                           tblptrl	equ	0xFF6
  9135                           tablat	equ	0xFF5
  9136                           prodh	equ	0xFF4
  9137                           prodl	equ	0xFF3
  9138                           intcon	equ	0xFF2
  9139                           postinc0	equ	0xFEE
  9140                           wreg	equ	0xFE8
  9141                           indf1	equ	0xFE7
  9142                           fsr1h	equ	0xFE2
  9143                           fsr1l	equ	0xFE1
  9144                           indf2	equ	0xFDF
  9145                           postinc2	equ	0xFDE
  9146                           postdec2	equ	0xFDD
  9147                           fsr2h	equ	0xFDA
  9148                           fsr2l	equ	0xFD9
  9149                           status	equ	0xFD8
  9150                           
  9151                           	psect	intcode_body
  9152  002496                     __pintcode_body:
  9153                           	opt stack 25
  9154  002496                     int_func:
  9155                           	opt stack 25
  9156  002496  0006               	pop		; remove dummy address from shadow register refresh
  9157  002498  CFFA F001          	movff	pclath,??_Serial_ISR
  9158  00249C  CFFB F002          	movff	pclatu,??_Serial_ISR+1
  9159  0024A0  CFE9 F003          	movff	fsr0l,??_Serial_ISR+2
  9160  0024A4  CFEA F004          	movff	fsr0h,??_Serial_ISR+3
  9161  0024A8  CFE1 F005          	movff	fsr1l,??_Serial_ISR+4
  9162  0024AC  CFE2 F006          	movff	fsr1h,??_Serial_ISR+5
  9163  0024B0  CFD9 F007          	movff	fsr2l,??_Serial_ISR+6
  9164  0024B4  CFDA F008          	movff	fsr2h,??_Serial_ISR+7
  9165  0024B8  CFF3 F009          	movff	prodl,??_Serial_ISR+8
  9166  0024BC  CFF4 F00A          	movff	prodh,??_Serial_ISR+9
  9167  0024C0  CFF6 F00B          	movff	tblptrl,??_Serial_ISR+10
  9168  0024C4  CFF7 F00C          	movff	tblptrh,??_Serial_ISR+11
  9169  0024C8  CFF8 F00D          	movff	tblptru,??_Serial_ISR+12
  9170  0024CC  CFF5 F00E          	movff	tablat,??_Serial_ISR+13
  9171                           
  9172                           ;GPS_info.c: 175: if(RCIF){
  9173  0024D0  AA9E               	btfss	3998,5,c	;volatile
  9174  0024D2  D04D               	goto	i2l161
  9175                           
  9176                           ;GPS_info.c: 176: GIE = 0;
  9177  0024D4  9EF2               	bcf	intcon,7,c	;volatile
  9178                           
  9179                           ;GPS_info.c: 177: unsigned char received_char = RCREG;
  9180  0024D6  CFAE F00F          	movff	4014,Serial_ISR@received_char	;volatile
  9181                           
  9182                           ;GPS_info.c: 178: if(RCSTAbits.OERR){
  9183  0024DA  A2AB               	btfss	4011,1,c	;volatile
  9184  0024DC  D003               	goto	i2l3844
  9185                           
  9186                           ;GPS_info.c: 179: CREN = 0;
  9187  0024DE  98AB               	bcf	4011,4,c	;volatile
  9188                           
  9189                           ;GPS_info.c: 180: __nop();
  9190  0024E0  F000               	nop	
  9191                           
  9192                           ;GPS_info.c: 181: CREN=1;
  9193  0024E2  88AB               	bsf	4011,4,c	;volatile
  9194  0024E4                     i2l3844:
  9195                           
  9196                           ;GPS_info.c: 182: }
  9197                           ;GPS_info.c: 184: if(received_char =='$'){
  9198  0024E4  0E24               	movlw	36
  9199  0024E6  180F               	xorwf	Serial_ISR@received_char,w,c
  9200  0024E8  A4D8               	btfss	status,2,c
  9201  0024EA  D009               	goto	i2l3848
  9202                           
  9203                           ;GPS_info.c: 185: GGA_Index = 0;
  9204  0024EC  0E00               	movlw	0
  9205  0024EE  6E4A               	movwf	_GGA_Index+1,c	;volatile
  9206  0024F0  0E00               	movlw	0
  9207  0024F2  6E49               	movwf	_GGA_Index,c	;volatile
  9208                           
  9209                           ;GPS_info.c: 186: IsItGGAString = 0;
  9210  0024F4  0E00               	movlw	0
  9211  0024F6  6E4D               	movwf	_IsItGGAString,c	;volatile
  9212                           
  9213                           ;GPS_info.c: 187: CommaCounter = 0;
  9214  0024F8  0E00               	movlw	0
  9215  0024FA  6E4B               	movwf	_CommaCounter,c
  9216                           
  9217                           ;GPS_info.c: 188: }
  9218  0024FC  D038               	goto	i2l161
  9219  0024FE                     i2l3848:
  9220                           
  9221                           ;GPS_info.c: 189: else if(IsItGGAString == 1){
  9222  0024FE  044D               	decf	_IsItGGAString,w,c	;volatile
  9223  002500  A4D8               	btfss	status,2,c
  9224  002502  D01A               	goto	i2l3860
  9225                           
  9226                           ;GPS_info.c: 190: if(received_char == ',' ) GGA_Pointers[CommaCounter++] = GGA_Index;
  9227  002504  0E2C               	movlw	44
  9228  002506  180F               	xorwf	Serial_ISR@received_char,w,c
  9229  002508  A4D8               	btfss	status,2,c
  9230  00250A  D00B               	goto	i2l3856
  9231  00250C  504B               	movf	_CommaCounter,w,c
  9232  00250E  0D01               	mullw	1
  9233  002510  0EBA               	movlw	low _GGA_Pointers
  9234  002512  24F3               	addwf	prodl,w,c
  9235  002514  6ED9               	movwf	fsr2l,c
  9236  002516  0E00               	movlw	high _GGA_Pointers
  9237  002518  20F4               	addwfc	prodh,w,c
  9238  00251A  6EDA               	movwf	fsr2h,c
  9239  00251C  C049  FFDF         	movff	_GGA_Index,indf2	;volatile
  9240  002520  2A4B               	incf	_CommaCounter,f,c
  9241  002522                     i2l3856:
  9242                           
  9243                           ;GPS_info.c: 191: GGA_Buffer[GGA_Index++] = received_char;
  9244  002522  0E00               	movlw	low _GGA_Buffer
  9245  002524  2449               	addwf	_GGA_Index,w,c	;volatile
  9246  002526  6ED9               	movwf	fsr2l,c
  9247  002528  0E01               	movlw	high _GGA_Buffer
  9248  00252A  204A               	addwfc	_GGA_Index+1,w,c	;volatile
  9249  00252C  6EDA               	movwf	fsr2h,c
  9250  00252E  C00F  FFDF         	movff	Serial_ISR@received_char,indf2
  9251  002532  4A49               	infsnz	_GGA_Index,f,c	;volatile
  9252  002534  2A4A               	incf	_GGA_Index+1,f,c	;volatile
  9253                           
  9254                           ;GPS_info.c: 192: }
  9255  002536  D01B               	goto	i2l161
  9256  002538                     i2l3860:
  9257                           
  9258                           ;GPS_info.c: 193: else if(GGA_CODE[0] == 'G' && GGA_CODE[1] == 'G' && GGA_CODE[2] == 'A'
      +                          ){
  9259  002538  0E47               	movlw	71
  9260  00253A  1846               	xorwf	_GGA_CODE,w,c
  9261  00253C  A4D8               	btfss	status,2,c
  9262  00253E  D011               	goto	i2l159
  9263  002540  0E47               	movlw	71
  9264  002542  1847               	xorwf	_GGA_CODE+1,w,c
  9265  002544  A4D8               	btfss	status,2,c
  9266  002546  D00D               	goto	i2l159
  9267  002548  0E41               	movlw	65
  9268  00254A  1848               	xorwf	_GGA_CODE+2,w,c
  9269  00254C  A4D8               	btfss	status,2,c
  9270  00254E  D009               	goto	i2l159
  9271                           
  9272                           ;GPS_info.c: 194: IsItGGAString = 1;
  9273  002550  0E01               	movlw	1
  9274  002552  6E4D               	movwf	_IsItGGAString,c	;volatile
  9275                           
  9276                           ;GPS_info.c: 195: GGA_CODE[0] = 0; GGA_CODE[1] = 0; GGA_CODE[2] = 0;
  9277  002554  0E00               	movlw	0
  9278  002556  6E46               	movwf	_GGA_CODE,c
  9279  002558  0E00               	movlw	0
  9280  00255A  6E47               	movwf	_GGA_CODE+1,c
  9281  00255C  0E00               	movlw	0
  9282  00255E  6E48               	movwf	_GGA_CODE+2,c
  9283                           
  9284                           ;GPS_info.c: 196: }
  9285  002560  D006               	goto	i2l161
  9286  002562                     i2l159:
  9287                           
  9288                           ;GPS_info.c: 197: else{
  9289                           ;GPS_info.c: 198: GGA_CODE[0] = GGA_CODE[1]; GGA_CODE[1] = GGA_CODE[2]; GGA_CODE[2] = re
      +                          ceived_char;
  9290  002562  C047  F046         	movff	_GGA_CODE+1,_GGA_CODE
  9291  002566  C048  F047         	movff	_GGA_CODE+2,_GGA_CODE+1
  9292  00256A  C00F  F048         	movff	Serial_ISR@received_char,_GGA_CODE+2
  9293  00256E                     i2l161:
  9294  00256E  C00E  FFF5         	movff	??_Serial_ISR+13,tablat
  9295  002572  C00D  FFF8         	movff	??_Serial_ISR+12,tblptru
  9296  002576  C00C  FFF7         	movff	??_Serial_ISR+11,tblptrh
  9297  00257A  C00B  FFF6         	movff	??_Serial_ISR+10,tblptrl
  9298  00257E  C00A  FFF4         	movff	??_Serial_ISR+9,prodh
  9299  002582  C009  FFF3         	movff	??_Serial_ISR+8,prodl
  9300  002586  C008  FFDA         	movff	??_Serial_ISR+7,fsr2h
  9301  00258A  C007  FFD9         	movff	??_Serial_ISR+6,fsr2l
  9302  00258E  C006  FFE2         	movff	??_Serial_ISR+5,fsr1h
  9303  002592  C005  FFE1         	movff	??_Serial_ISR+4,fsr1l
  9304  002596  C004  FFEA         	movff	??_Serial_ISR+3,fsr0h
  9305  00259A  C003  FFE9         	movff	??_Serial_ISR+2,fsr0l
  9306  00259E  C002  FFFB         	movff	??_Serial_ISR+1,pclatu
  9307  0025A2  C001  FFFA         	movff	??_Serial_ISR,pclath
  9308  0025A6  924F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9309  0025A8  0011               	retfie		f
  9310  0025AA                     __end_of_Serial_ISR:
  9311                           	opt stack 0
  9312                           pclatu	equ	0xFFB
  9313                           pclath	equ	0xFFA
  9314                           tblptru	equ	0xFF8
  9315                           tblptrh	equ	0xFF7
  9316                           tblptrl	equ	0xFF6
  9317                           tablat	equ	0xFF5
  9318                           prodh	equ	0xFF4
  9319                           prodl	equ	0xFF3
  9320                           intcon	equ	0xFF2
  9321                           postinc0	equ	0xFEE
  9322                           fsr0h	equ	0xFEA
  9323                           fsr0l	equ	0xFE9
  9324                           wreg	equ	0xFE8
  9325                           indf1	equ	0xFE7
  9326                           fsr1h	equ	0xFE2
  9327                           fsr1l	equ	0xFE1
  9328                           indf2	equ	0xFDF
  9329                           postinc2	equ	0xFDE
  9330                           postdec2	equ	0xFDD
  9331                           fsr2h	equ	0xFDA
  9332                           fsr2l	equ	0xFD9
  9333                           status	equ	0xFD8
  9334                           pclatu	equ	0xFFB
  9335                           pclath	equ	0xFFA
  9336                           tblptru	equ	0xFF8
  9337                           tblptrh	equ	0xFF7
  9338                           tblptrl	equ	0xFF6
  9339                           tablat	equ	0xFF5
  9340                           prodh	equ	0xFF4
  9341                           prodl	equ	0xFF3
  9342                           intcon	equ	0xFF2
  9343                           postinc0	equ	0xFEE
  9344                           fsr0h	equ	0xFEA
  9345                           fsr0l	equ	0xFE9
  9346                           wreg	equ	0xFE8
  9347                           indf1	equ	0xFE7
  9348                           fsr1h	equ	0xFE2
  9349                           fsr1l	equ	0xFE1
  9350                           indf2	equ	0xFDF
  9351                           postinc2	equ	0xFDE
  9352                           postdec2	equ	0xFDD
  9353                           fsr2h	equ	0xFDA
  9354                           fsr2l	equ	0xFD9
  9355                           status	equ	0xFD8
  9356                           
  9357                           	psect	rparam
  9358  0000                     pclatu	equ	0xFFB
  9359                           pclath	equ	0xFFA
  9360                           tblptru	equ	0xFF8
  9361                           tblptrh	equ	0xFF7
  9362                           tblptrl	equ	0xFF6
  9363                           tablat	equ	0xFF5
  9364                           prodh	equ	0xFF4
  9365                           prodl	equ	0xFF3
  9366                           intcon	equ	0xFF2
  9367                           postinc0	equ	0xFEE
  9368                           fsr0h	equ	0xFEA
  9369                           fsr0l	equ	0xFE9
  9370                           wreg	equ	0xFE8
  9371                           indf1	equ	0xFE7
  9372                           fsr1h	equ	0xFE2
  9373                           fsr1l	equ	0xFE1
  9374                           indf2	equ	0xFDF
  9375                           postinc2	equ	0xFDE
  9376                           postdec2	equ	0xFDD
  9377                           fsr2h	equ	0xFDA
  9378                           fsr2l	equ	0xFD9
  9379                           status	equ	0xFD8
  9380                           
  9381                           	psect	temp
  9382  00004F                     btemp:
  9383                           	opt stack 0
  9384  00004F                     	ds	1
  9385  0000                     int$flags	set	btemp
  9386                           pclatu	equ	0xFFB
  9387                           pclath	equ	0xFFA
  9388                           tblptru	equ	0xFF8
  9389                           tblptrh	equ	0xFF7
  9390                           tblptrl	equ	0xFF6
  9391                           tablat	equ	0xFF5
  9392                           prodh	equ	0xFF4
  9393                           prodl	equ	0xFF3
  9394                           intcon	equ	0xFF2
  9395                           postinc0	equ	0xFEE
  9396                           fsr0h	equ	0xFEA
  9397                           fsr0l	equ	0xFE9
  9398                           wreg	equ	0xFE8
  9399                           indf1	equ	0xFE7
  9400                           fsr1h	equ	0xFE2
  9401                           fsr1l	equ	0xFE1
  9402                           indf2	equ	0xFDF
  9403                           postinc2	equ	0xFDE
  9404                           postdec2	equ	0xFDD
  9405                           fsr2h	equ	0xFDA
  9406                           fsr2l	equ	0xFD9
  9407                           status	equ	0xFD8


Data Sizes:
    Strings     53
    Constant    118
    Data        0
    BSS         124
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     69      78
    BANK0           160     90     125
    BANK1           256      0      80
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 15
		 -> main@GPS_Buffer(BANK0[15]), 

    memset@p	PTR unsigned char  size(2) Largest target is 15
		 -> main@GPS_Buffer(BANK0[15]), 

    atol@s	PTR const unsigned char  size(2) Largest target is 15
		 -> get_gpstime@Time_Buffer(COMRAM[15]), 

    atof@s	PTR const unsigned char  size(2) Largest target is 15
		 -> get_altitude@Alt_Buffer(BANK0[12]), get_longitude@Long_Buffer(BANK0[15]), get_latitude@Lat_Buffer(BANK0[15]), 

    strtod@s	PTR const unsigned char  size(2) Largest target is 15
		 -> get_altitude@Alt_Buffer(BANK0[12]), get_longitude@Long_Buffer(BANK0[15]), get_latitude@Lat_Buffer(BANK0[15]), 

    strtod@res	PTR PTR const unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_9(CODE[9]), STR_8(CODE[5]), STR_6(CODE[6]), STR_4(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 15
		 -> Data_Buffer(BANK0[15]), main@GPS_Buffer(BANK0[15]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    LCD_String_xy@str	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_7(CODE[6]), STR_5(CODE[7]), STR_3(CODE[6]), STR_1(CODE[11]), 

    LCD_String@str	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_7(CODE[6]), STR_5(CODE[7]), STR_3(CODE[6]), STR_2(CODE[3]), 
		 -> Data_Buffer(BANK0[15]), STR_1(CODE[11]), main@GPS_Buffer(BANK0[15]), 

    sp__memset	PTR void  size(2) Largest target is 15
		 -> main@GPS_Buffer(BANK0[15]), 


Critical Paths under _main in COMRAM

    _main->_get_altitude
    _main->_get_latitude
    _main->_get_longitude
    _get_longitude->_atof
    _get_latitude->_atof
    _get_gpstime->_atol
    _atol->___lmul
    _get_altitude->_atof
    _atof->_strtod
    _strtod->___ftneg
    _convert_to_degrees->___ftadd
    ___awtoft->___ftpack
    _sprintf->___ftadd
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___lldiv->___llmod
    ___ftsub->___ftadd
    ___ftneg->___ftmul
    _USART_Init->___ftadd
    ___fttol->_scale
    ___ftdiv->___altoft
    ___ftadd->_fround
    ___altoft->___ftpack
    _LCD_String_xy->_LCD_String
    _LCD_String->_LCD_Char
    _LCD_Char->_MSdelay
    _LCD_Init->_LCD_Command
    _LCD_Command->_MSdelay

Critical Paths under _Serial_ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_convert_time_to_UTC
    _convert_to_degrees->___fttol
    _convert_time_to_UTC->_sprintf
    _sprintf->___ftsub
    ___ftsub->___ftadd
    _USART_Init->___fttol

Critical Paths under _Serial_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Serial_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Serial_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Serial_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Serial_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Serial_ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _Serial_ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _Serial_ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                28    28      0  199725
                                             62 BANK0     28    28      0
                           _LCD_Init
                         _LCD_String
                      _LCD_String_xy
                         _USART_Init
                _convert_time_to_UTC
                 _convert_to_degrees
                       _get_altitude
                        _get_gpstime
                       _get_latitude
                      _get_longitude
                             _memset
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _memset                                               8     2      6     672
                                             15 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _get_longitude                                       25    22      3   16939
                                             68 COMRAM     1     1      0
                                              0 BANK0     24    21      3
                               _atof
 ---------------------------------------------------------------------------------
 (1) _get_latitude                                        25    22      3   16939
                                             68 COMRAM     1     1      0
                                              0 BANK0     24    21      3
                               _atof
 ---------------------------------------------------------------------------------
 (1) _get_gpstime                                         25    21      4    1043
                                             41 COMRAM    25    21      4
                               _atol
 ---------------------------------------------------------------------------------
 (2) _atol                                                14    10      4     902
                                             27 COMRAM    14    10      4
                             ___lmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (1) _get_altitude                                        22    19      3   16905
                                             68 COMRAM     1     1      0
                                              0 BANK0     21    18      3
                               _atof
 ---------------------------------------------------------------------------------
 (2) _atof                                                 3     0      3   16622
                                             65 COMRAM     3     0      3
                             _strtod
 ---------------------------------------------------------------------------------
 (3) _strtod                                              12     8      4   16360
                                             53 COMRAM    12     8      4
                           ___altoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                             ___lmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (4) _isspace                                              3     3      0      90
                                             15 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     450
                                             15 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) _convert_to_degrees                                  17    14      3   18820
                                              6 BANK0     14    11      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    2871
                                             23 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _convert_time_to_UTC                                 14    10      4   56779
                                             48 BANK0     14    10      4
                            ___lldiv
                            ___llmod
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             47    37     10   54616
                                              9 BANK0     39    29     10
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   12018
                                             50 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             15 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   11739
                                             50 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2335
                                             29 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5958
                                             35 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1448
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1580
                                             21 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     431
                                             15 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     574
                                             15 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2763
                                             23 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8    1055
                                             15 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     802
                                             24 COMRAM    13     5      8
                            ___llmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5057
                                              3 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     237
                                             50 COMRAM     3     0      3
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     776
                                             15 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                           7     3      4   12421
                                              6 BANK0      7     3      4
                           ___altoft
                            ___ftadd
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     756
                                             57 COMRAM     9     5      4
                                              0 BANK0      6     6      0
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3888
                                             33 COMRAM    15     9      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4693
                                             60 COMRAM     9     3      6
                                              0 BANK0      3     3      0
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2942
                                             23 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2584
                                             15 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _LCD_String_xy                                        4     1      3    2135
                                             24 COMRAM     4     1      3
                        _LCD_Command
                         _LCD_String
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           4     2      2     927
                                             22 COMRAM     2     0      2
                           _LCD_Char
 ---------------------------------------------------------------------------------
 (3) _LCD_Char                                             1     1      0     498
                                             21 COMRAM     1     1      0
                            _MSdelay
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             0     0      0     974
                        _LCD_Command
                            _MSdelay
 ---------------------------------------------------------------------------------
 (2) _LCD_Command                                          1     1      0     498
                                             21 COMRAM     1     1      0
                            _MSdelay
 ---------------------------------------------------------------------------------
 (4) _MSdelay                                              6     4      2     476
                                             15 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _Serial_ISR                                          15    15      0      89
                                              0 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Init
     _LCD_Command
       _MSdelay
     _MSdelay
   _LCD_String
     _LCD_Char
       _MSdelay
   _LCD_String_xy
     _LCD_Command
       _MSdelay
     _LCD_String
       _LCD_Char
         _MSdelay
   _USART_Init
     ___altoft
       ___ftpack
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _convert_time_to_UTC
     ___lldiv
       ___llmod (ARG)
     ___llmod
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftsub
         ___ftadd
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
         ___llmod (ARG)
       ___llmod
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _convert_to_degrees
     ___awtoft
       ___ftpack
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _get_altitude
     _atof
       _strtod
         ___altoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lmul
         _isdigit
         _isspace
   _get_gpstime
     _atol
       ___lmul
       _isdigit
   _get_latitude
     _atof
       _strtod
         ___altoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lmul
         _isdigit
         _isspace
   _get_longitude
     _atof
       _strtod
         ___altoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lmul
         _isdigit
         _isspace
   _memset
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
       ___llmod (ARG)
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 _Serial_ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      50       7       31.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5A      7D       5       78.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     45      4E       1       83.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     11B      20        0.0%
DATA                 0      0     11B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Mar 16 22:05:09 2018

                   ___altoft@exp 0020                   ?_get_longitude 0060  
                   ?_LCD_Command 0001                    ___altoft@sign 0021  
                   ___awdiv@sign 001B                      __CFG_BOR$ON 000000  
                   main@Altitude 00B1              ___wmul@multiplicand 0020  
                    __CFG_BORV$3 000000                      ?_LCD_String 0017  
          get_latitude@_latitude 0072                     __CFG_CP0$OFF 000000  
                   __CFG_CP1$OFF 000000                     __CFG_CP2$OFF 000000  
                   __CFG_CP3$OFF 000000                     ___ftadd@exp1 0062  
                   ___ftadd@exp2 0061            get_altitude@_Altitude 006F  
                   ___ftadd@sign 0060                              l600 2368  
                            l522 1966                              l293 0E3E  
                            l632 2A1C                              l704 2240  
                            l548 27A2                              l661 1E9A  
                            l493 16D4                              l670 1F54  
                            l655 1E40                              l495 16D8  
                            l729 32E6                              l690 295C  
                            l659 1E76                              l679 1F72  
                            l784 2D80                              l697 21B2  
                            l794 2FBA                              l698 21DA  
                            _GIE 007F97                     __CFG_CPB$OFF 000000  
                   __CFG_CPD$OFF 000000                              _E_W 004C  
                            _N_S 004E                     main@Latitude 00B4  
                   ___awmod@sign 0015                              prod 000FF3  
                            wreg 000FE8        convert_to_degrees@dec_deg 006C  
      convert_to_degrees@decimal 0071        convert_to_degrees@degrees 006F  
                   __CFG_LVP$OFF 000000                     ___ftdiv@cntr 002B  
                   ___ftdiv@sign 0030                     __CFG_WDT$OFF 000000  
                           l3010 228E                             l3004 2270  
                           l3032 2300                             l3024 22D0  
                           l4004 28F8                             l3044 232E  
                           l3054 2356                             l4024 2936  
                           l3312 2FAC                             l3304 2F78  
                           l3056 2362                             l3048 233E  
                           l4104 1B9A                             l2530 31FA  
                           l3306 2F84                             l4050 2804  
                           l4210 1702                             l2540 3214  
                           l2532 3202                             l3332 3104  
                           l3308 2F88                             l4044 27DC  
                           l4124 13C6                             l4300 192E  
                           l4220 172E                             l4204 16DE  
                           l2542 3218                             l4150 314E  
                           l4142 15BA                             l4118 1322  
                           l4214 171A                             l3328 30DC  
                           l4064 2836                             l2552 332C  
                           l4136 1516                             l4128 13EA  
                           l4160 15FC                             l2802 2CF8  
                           l4074 285E                             l4402 0972  
                           l4250 17DC                             l4218 172A  
                           l4242 17BE                             l4170 1624  
                           l3602 275E                             l3284 2D32  
                           l4068 2846                             l4500 0D48  
                           l2564 3094                             l4316 1986  
                           l4180 1648                             l4172 162C  
                           l4326 23AA                             l3286 2D3E  
                           l2806 2D06                             l2830 2F30  
                           l2822 2F16                             l4078 286E  
                           l4502 0D50                             l4510 0DE4  
                           l4414 09C6                             l4406 0978  
                           l4262 181C                             l4238 17BA  
                           l4174 1630                             l4158 15F8  
                           l4344 2420                             l3296 2D72  
                           l3288 2D42                             l4096 1ADA  
                           l4600 111C                             l4520 0E20  
                           l4512 0DF2                             l4440 0ABA  
                           l4424 0A0C                             l4408 09AC  
                           l2568 30A8                             l2760 329E  
                           l4272 187E                             l4362 2484  
                           l4354 244E                             l2850 2BA8  
                           l4370 2FDE                             l2842 2F5C  
                           l2834 2F44                             l2826 2F24  
                           l2818 2F0A                             l4610 11E0  
                           l2762 32A2                             l4290 18D0  
                           l4282 18B6                             l4266 1848  
                           l4258 1814                             l4186 1660  
                           l4356 245E                             l4348 2434  
                           l2860 2C04                             l2780 2CB0  
                           l2828 2F2C                             l4604 11A6  
                           l4532 0E72                             l4524 0E42  
                           l4452 0B48                             l4268 1854  
                           l3572 26BC                             l4358 2468  
                           l2854 2BD8                             l2790 2CD2  
                           l2774 2CA0                             l2838 2F4E  
                           l4606 11AC                             l4518 0E0C  
                           l4454 0B5E                             l4294 18FC  
                           l4278 18A8                             l4286 18C4  
                           l4702 2C1C                             l3590 2702  
                           l3670 3272                             l3680 3050  
                           l4368 2FD2                             l4536 0EC4  
                           l4464 0BE6                             l4456 0B8E  
                           l4448 0B22                             l4392 0910  
                           l4384 08DE                             l4608 11C2  
                           l4296 1904                             l3914 2E2E  
                           l3930 1E4E                             l2954 2178  
                           l2786 2CC6                             l4554 0FD2  
                           l4546 0FAA                             l4482 0CD0  
                           l4458 0BA4                             l4378 08BE  
                           l4626 31CC                             l3666 3262  
                           l3684 3064                             l3676 303C  
                           l3916 2E3A                             l2948 214C  
                           l2788 2CCE                             l4572 104A  
                           l4548 0FB8                             l4484 0CD6  
                           l4468 0C0C                             l4556 0FE0  
                           l4396 094C                             l4708 2C4C  
                           l3596 270C                             l3588 26FC  
                           l3692 2E8A                             l4652 2B1E  
                           l3942 1E92                             l2798 2CEE  
                           l4590 10BE                             l4574 1050  
                           l4566 1024                             l4478 0C6A  
                           l4398 0962                             l4670 20EA  
                           l3598 2750                             l4646 2AEE  
                           l3688 3076                             l3880 29B6  
                           l3960 1EF8                             l3952 1EC2  
                           l3936 1E84                             l2984 2206  
                           l4496 0D1C                             l4672 2112  
                           l3696 2EB0                             l4680 2A50  
                           l4728 1BFE                             l3890 2A12  
                           l3882 29D4                             l3874 299E  
                           l3970 1F3C                             l3962 1F06  
                           l2994 222E                             l4594 10EE  
                           l4586 1096                             l3972 1F48  
                           l3964 1F12                             l2996 223A  
                           l2988 2216                             l3886 29EA  
                           l3878 29AC                             l3958 1EEC  
                           l4686 2A80                             l3888 2A08  
                           l3978 1F90                             l3988 1FC4  
                           l3998 28D0                             STR_1 0877  
                           STR_2 08A9                             STR_3 0892  
                           STR_4 089E                             STR_5 088B  
                           STR_6 089E                             STR_7 0898  
                           STR_8 08A4                             STR_9 0882  
                           _CREN 007D5C                             _LATB 000F8A  
                           u4301 1E12                             u5021 238A  
                           u3520 30FC                             u5040 23C8  
                           u3530 3124                             u4501 28B8  
                           u5045 23C0                             u3527 30F2  
                           u3537 311A                             u4521 28E0  
                           u4291 1DFC                             u5340 0E36  
                           u5180 0A52                             u2871 2130  
                           u4551 27C4                             u5185 0A46  
                           u2891 215C                             u4571 27EC  
                           _RCIF 007CF5                   ??_get_altitude 0045  
                           _TXIF 007CF4        convert_to_degrees@minutes 0069  
                           _atof 32F4                             _atol 26BC  
                           _main 1BDA                     ___ftpack@arg 0010  
                   ___ftpack@exp 0013                             fsr0h 000FEA  
                           fsr1h 000FE2                             fsr2h 000FDA  
                           fsr0l 000FE9                             indf1 000FE7  
                           indf2 000FDF                             fsr1l 000FE1  
                           fsr2l 000FD9                             btemp 004F  
          get_latitude@lat_index 0077                   ??_get_latitude 0045  
                           prodh 000FF4                             prodl 000FF3  
                           start 000E                  __end_of_MSdelay 3226  
                  __CFG_IESO$OFF 000000                     _sprintf$1063 0079  
                  _LCD_String_xy 3028                     ___ftmul@cntr 0031  
                   ___param_bank 000000                     ___ftmul@sign 0032  
                  main@Longitude 00B7                     ___fttol@exp1 0065  
                   ___fttol@lval 0061                 __end_of_LCD_Char 3352  
                    _Data_Buffer 00CE                 __end_of_LCD_Init 31B8  
                  __CFG_PLLDIV$1 000000                            ?_atof 0042  
                          ?_atol 001C                            ?_main 0001  
                __end_of___awdiv 2D10                  __end_of___ftadd 1FEA  
                __end_of___awmod 2F66                  __end_of___ftdiv 298E  
                __end_of___ftneg 32F4                  __end_of___lldiv 2D92  
                __end_of___ftmul 28A8                  ___awdiv@divisor 0018  
                __end_of___llmod 2FCC                  __end_of___ftsub 3178  
                __end_of___fttol 2496                            _LATD0 007C60  
                          _LATD1 007C61                            _LATD2 007C62  
                          i2l161 256E                            i2l159 2562  
                ___awdiv@counter 001A                            _RCREG 000FAE  
                          _RCSTA 000FAB                            _SPBRG 000FAF  
                  __CFG_USBDIV$1 000000                            _TRISB 000F93  
                          _TRISD 000F95                            _TXREG 000FAD  
                          _TXSTA 000FAC                    __CFG_PWRT$OFF 000000  
                  __CFG_WRT0$OFF 000000                    __CFG_WRT1$OFF 000000  
                  __CFG_WRT2$OFF 000000              ___lmul@multiplicand 0014  
                  __CFG_WRT3$OFF 000000                     ___lltoft@exp 0020  
                 __CFG_EBTR0$OFF 000000                   __CFG_FCMEN$OFF 000000  
                 __CFG_EBTR1$OFF 000000                   __CFG_EBTR2$OFF 000000  
                 __CFG_EBTR3$OFF 000000                    __CFG_WRTB$OFF 000000  
convert_to_degrees@NMEA_lat_long 0066                    __CFG_WRTC$OFF 000000  
                  __CFG_WRTD$OFF 000000                   __CFG_EBTRB$OFF 000000  
                  ___awtoft@sign 001B                  __end_of_dpowers 0829  
                          _scale 11EE                  __end_of_isdigit 3334  
       get_longitude@Long_Buffer 0063                    ___ftpack@sign 0014  
                          atof@s 0042                            atol@a 0025  
                          atol@c 0029                            atol@s 001C  
                __end_of_isspace 32AA                            pclath 000FFA  
                          tablat 000FF5            get_altitude@alt_index 0073  
                          status 000FD8              __size_of_LCD_String 0052  
                __end_of_sprintf 11EE                   __CFG_ICPRT$OFF 000000  
                 ?_LCD_String_xy 0019                      ?_USART_Init 0066  
                 __CFG_MCLRE$OFF 000000                  __initialization 3226  
                ??_get_longitude 0045                     __end_of_atof 3316  
                   __end_of_atol 27B4                     __end_of_main 1DEC  
               get_gpstime@_Time 003E                 get_gpstime@index 0042  
                         ??_atof 0045                           ??_atol 0020  
                         ??_main 0046                    ___fttol@sign1 0060  
                  __activetblptr 000002             __size_of__tdiv_to_l_ 0132  
    __size_of_convert_to_degrees 0136                  __CFG_CCP2MX$OFF 000000  
               __end_of___altoft 2E84                 ___llmod@dividend 0010  
                         ?_scale 0033                 ___awdiv@dividend 0016  
               __end_of___awtoft 31F0                 __end_of___ftpack 2A3C  
               LCD_String_xy@pos 0019                 LCD_String_xy@row 001C  
               LCD_String_xy@str 001A                 __end_of___lltoft 3028  
                      ??_MSdelay 0012                           i2l3860 2538  
                         i2l3844 24E4                           i2l3856 2522  
                         i2l3848 24FE                           _OSCCON 000FD3  
                         _TRISC6 007CA6                           _TRISC7 007CA7  
                     _Serial_ISR 0008                get_altitude@index 0074  
             get_longitude@index 0076                   __CFG_XINST$OFF 000000  
               __end_of__powers_ 0877                           ___ftge 2B78  
                         ___lmul 3084                           ___wmul 32AA  
                      ??___awdiv 001A                        ??___ftadd 0043  
                 __CFG_STVREN$ON 000000                        ??___awmod 0014  
                      ??___ftdiv 0028                        ??___ftneg 0036  
                      ??___lldiv 0021                        ??___ftmul 002A  
                      ??___llmod 0018                        ??___ftsub 0046  
                      ??___fttol 003E             __size_of_get_gpstime 0072  
                         _memset 3258                           _fround 1994  
                         clear_0 322C                           clear_1 3238  
                         clear_2 3244                 ___awdiv@quotient 001C  
                ___awmod@divisor 0012             __end_of_get_altitude 2C8C  
                ___awmod@counter 0014             __size_of_LCD_Command 001E  
                         _strtod 15DE            ___ftmul@f3_as_product 002E  
        get_longitude@_longitude 0072                        ??_isdigit 0010  
           __end_of_get_latitude 2B78                     __mediumconst 0000  
                      ??_isspace 0010                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
            __size_of_USART_Init 007A          get_latitude@lat_pointer 0075  
                      ??_sprintf 0073                        ?_LCD_Char 0001  
                     __accesstop 0060          __end_of__initialization 324A  
                     ___altoft@c 0018                        ?_LCD_Init 0001  
                __CFG_PBADEN$OFF 000000                  ??_LCD_String_xy 001C  
                     ___ftadd@f1 003D                       ___ftadd@f2 0040  
                     ___ftge@ff1 0010                       ___ftge@ff2 0013  
       _convert_time_to_UTC$1059 0094                    ___rparam_used 000001  
                     ___ftdiv@f1 0022                       ___ftdiv@f2 0025  
                     ___ftdiv@f3 002C                       ___ftneg@f1 0033  
                     ___awtoft@c 0018                       ___ftmul@f1 0024  
                     ___ftmul@f2 0027                       ___ftsub@f1 0063  
                     ___ftsub@f2 0066                       ___fttol@f1 003A  
                 __pcstackCOMRAM 0001                       ___lltoft@c 0018  
                  __end_of_scale 15DE                     ??_LCD_String 0019  
                     __div_to_l_ 2252                  __div_to_l_@exp1 001B  
                __div_to_l_@cntr 001A                          ??_scale 0036  
                __div_to_l_@quot 0016                       __pbssBANK0 00BA  
                     __pbssBANK1 0100                       ??_LCD_Char 0016  
                     ??_LCD_Init 0017               __end_of_LCD_String 312C  
                  __div_to_l_@f1 0010                    __div_to_l_@f2 0013  
                    ?_Serial_ISR 0001          get_longitude@long_index 0077  
                        ?___ftge 0010     __size_of_convert_time_to_UTC 0112  
                        ?___lmul 0010                          ?___wmul 001E  
                      ?___altoft 0018                          ?_memset 0010  
                        ?_fround 0033                   ___lmul@product 0018  
                      ?___awtoft 0018                        ?___ftpack 0010  
                      ?___lltoft 0018                          ?_strtod 0036  
                   _CommaCounter 004B                          _MSdelay 31F0  
                __CFG_VREGEN$OFF 000000                     _GGA_Pointers 00BA  
                  LCD_String@str 0017                     ??_USART_Init 0046  
              __end_of__npowers_ 0850                          __Hparam 0000  
                     _scale$1062 0036                          __Lparam 0000  
          __size_of_get_altitude 0084                  __size_of___ftge 0090  
                        ___awdiv 2C8C                  __size_of___lmul 0056  
                        ___ftadd 1DEC                          ___awmod 2EF6  
                        ___ftdiv 28A8                          ___ftneg 32D0  
                        ___lldiv 2D10                  __size_of___wmul 0026  
                        ___ftmul 27B4                          ___llmod 2F66  
                        ___ftsub 312C                          ___fttol 237A  
                   __psmallconst 0800                       ??___altoft 001C  
          __size_of_get_latitude 009E                          __pcinit 3226  
                     ??___awtoft 001B                       ??___ftpack 0015  
                __size_of_memset 002C                  __size_of_fround 0246  
                        __ramtop 0800                       ??___lltoft 001C  
                        __ptext0 1BDA                          __ptext1 3258  
                        __ptext2 2A3C                          __ptext3 2ADA  
                        __ptext4 2E84                          __ptext5 26BC  
                        __ptext6 2C08                          __ptext7 32F4  
                        __ptext8 15DE                          __ptext9 3284  
         convert_time_to_UTC@min 009A           convert_time_to_UTC@sec 009C  
                      _GGA_Index 0049                      ?__div_to_l_ 0010  
                __size_of_strtod 03B6                   USART_Init@temp 006A  
                        _dpowers 0801                          _isdigit 3316  
               ___awmod@dividend 0010              __size_of_Serial_ISR 25A2  
                        _isspace 3284               __end_of_USART_Init 2E0C  
                        _sprintf 08AE                   __pintcode_body 2496  
           end_of_initialization 324A                     _get_altitude 2C08  
                        memset@c 0012                          memset@n 0014  
                        memset@p 0016                   LCD_Command@cmd 0016  
                  __Lmediumconst 0000                          int_func 2496  
                ___lldiv@divisor 001D                     _get_latitude 2ADA  
                ___lldiv@counter 0025                        _RCSTAbits 000FAB  
                        postdec2 000FDD                          postinc0 000FEE  
                        postinc2 000FDE          get_altitude@alt_pointer 0072  
          __end_of_get_longitude 2ADA                   __tdiv_to_l_@f1 0010  
                 __tdiv_to_l_@f2 0013                    ??__tdiv_to_l_ 0016  
                        strtod@s 0036       __end_of_convert_to_degrees 2120  
            USART_Init@baud_rate 0066                      ___ftdiv@exp 002F  
              __size_of_LCD_Char 001E                __size_of_LCD_Init 0040  
            __size_of__div_to_l_ 0128                    ??_get_gpstime 002E  
                    ___ftmul@exp 002D                    _IsItGGAString 004D  
                  ??_LCD_Command 0016                   __end_of___ftge 2C08  
                 __end_of___lmul 30DA                LCD_Char@char_data 0016  
                 __end_of___wmul 32D0                   __end_of_memset 3284  
                 __end_of_fround 1BDA                   __end_of_strtod 1994  
            start_initialization 3226              __end_of__tdiv_to_l_ 2252  
            _convert_time_to_UTC 25AA                  ___llmod@divisor 0014  
                ___llmod@counter 0018                     ??_Serial_ISR 0001  
          __end_of_LCD_String_xy 3084             ?_convert_time_to_UTC 0090  
                       ??___ftge 0016                         ??___lmul 0018  
                       ??___wmul 0022                 __CFG_LPT1OSC$OFF 000000  
                       ??_memset 0016                         ??_fround 0036  
            __end_of_get_gpstime 2EF6                    sprintf@tmpval 0082  
                       ??_strtod 003A                __size_of___altoft 0078  
                     fround@prec 003C                __size_of___awtoft 0038  
              __size_of___ftpack 00AE              __end_of_LCD_Command 3370  
              __size_of___lltoft 005C                      __pbssCOMRAM 0046  
                  __pcstackBANK0 0060               __end_of_Serial_ISR 25AA  
                       ?_MSdelay 0010                      sprintf@flag 007E  
                    sprintf@fval 008C                      sprintf@prec 008A  
          ??_convert_time_to_UTC 0046                        __pintcode 0008  
                       ?___awdiv 0016                         ?___ftadd 003D  
                       ?___awmod 0010                         ?___ftdiv 0022  
                       ?___ftneg 0033                         ?___lldiv 0019  
                       ?___ftmul 0024                         ?___llmod 0010  
                       ?___ftsub 0063                        __npowers_ 0829  
                       ?___fttol 003A                      __tdiv_to_l_ 2120  
                   ??__div_to_l_ 0016                      __smallconst 0800  
                       ?_isdigit 0001                         ?_isspace 0001  
                       _GGA_CODE 0046                         ?_sprintf 0069  
                 __size_of_scale 03F0                         MSdelay@i 0012  
                       MSdelay@j 0014                         _LCD_Char 3334  
                       _LCD_Init 3178                   ___wmul@product 0022  
                       _PIE1bits 000F9D               __end_of__div_to_l_ 237A  
                    _get_gpstime 2E84                 __CFG_WDTPS$32768 000000  
                    strtod@flags 003C                      strtod@expon 003D  
                    _LCD_Command 3352          Serial_ISR@received_char 000F  
              ___wmul@multiplier 001E                ___lmul@multiplier 0010  
             _convert_to_degrees 1FEA                 __size_of_MSdelay 0036  
                       __Hrparam 0000              ?_convert_to_degrees 0066  
                       __Lrparam 0000                 __size_of___awdiv 0084  
               __size_of___ftadd 01FE                 __size_of___awmod 0070  
               __size_of___ftdiv 00E6                 __size_of___ftneg 0024  
               __size_of___lldiv 0082                         ___altoft 2E0C  
               __size_of___ftmul 00F4                 __size_of___llmod 0066  
               __size_of___ftsub 004C                 __size_of___fttol 011C  
                       ___awtoft 31B8                         ___ftpack 298E  
                    _fround$1060 0039                      _fround$1061 0036  
                       ___lltoft 2FCC                      _isdigit$712 0011  
         get_latitude@Lat_Buffer 0063                       sprintf@exp 0080  
                     sprintf@val 0086             ??_convert_to_degrees 0046  
               __size_of_isdigit 001E                 __size_of_isspace 0026  
                       __ptext10 3084                         __ptext11 1FEA  
                       __ptext20 2EF6                         __ptext12 31B8  
                       __ptext21 2C8C                         __ptext13 25AA  
                       __ptext30 2D92                         __ptext22 2120  
                       __ptext14 08AE                         __ptext31 237A  
                       __ptext23 2252                         __ptext15 11EE  
                       __ptext40 3352                         __ptext32 28A8  
                       __ptext24 2FCC                         __ptext16 3316  
                       __ptext41 31F0                         __ptext33 1DEC  
                       __ptext25 2F66                         __ptext17 1994  
                       __ptext34 2E0C                         __ptext26 2D10  
                       __ptext18 32AA                         __ptext35 298E  
                       __ptext27 312C                         __ptext19 27B4  
                       __ptext36 3028                         __ptext28 32D0  
                       __ptext37 30DA                         __ptext29 2B78  
                       __ptext38 3334                         __ptext39 3178  
                       __powers_ 0850                       _GGA_Buffer 0100  
        convert_time_to_UTC@hour 0098                 __size_of_sprintf 0940  
         __size_of_get_longitude 009E                    __size_of_atof 0022  
                  __size_of_atol 00F8                    __size_of_main 0212  
                     MSdelay@val 0010                       strtod@eexp 003B  
                       int$flags 004F                         atol@sign 0024  
                       main@Time 00AD                       _LCD_String 30DA  
                 main@GPS_Buffer 009E                      _isspace$715 0011  
         get_gpstime@Time_Buffer 002F            __CFG_CPUDIV$OSC1_PLL2 000000  
                     _INTCONbits 000FF2                         isdigit@c 0012  
                       memset@p1 0010                         scale@scl 0039  
                       intlevel2 0000                        sprintf@ap 007C  
               __tdiv_to_l_@exp1 001E                 __tdiv_to_l_@cntr 001D  
                      sprintf@sp 0069                 __tdiv_to_l_@quot 0019  
    convert_time_to_UTC@UTC_Time 0090                         isspace@c 0012  
               ___lldiv@dividend 0019                        strtod@res 0038  
      get_longitude@long_pointer 0075                get_latitude@index 0076  
         get_altitude@Alt_Buffer 0063                    _get_longitude 2A3C  
                   ?__tdiv_to_l_ 0010              __CFG_FOSC$INTOSC_EC 000000  
                       sprintf@c 008F                         sprintf@f 006B  
               ___lldiv@quotient 0021           __size_of_LCD_String_xy 005C  
                       strtod@_u 003E                    ?_get_altitude 0060  
    __end_of_convert_time_to_UTC 26BC                    ?_get_latitude 0060  
                     _USART_Init 2D92                     ?_get_gpstime 002A  
