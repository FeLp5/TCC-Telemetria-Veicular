

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Apr 02 10:56:38 2022

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1,group=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1,group=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1,group=1
    88                           	psect	text72,global,reloc=2,class=CODE,delta=1,group=1
    89                           	psect	text73,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1
    92                           	psect	text76,global,reloc=2,class=CODE,delta=1
    93                           	psect	text77,global,reloc=2,class=CODE,delta=1
    94                           	psect	text78,global,reloc=2,class=CODE,delta=1
    95                           	psect	text79,global,reloc=2,class=CODE,delta=1
    96                           	psect	text80,global,reloc=2,class=CODE,delta=1,group=1
    97                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    98                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    99                           	psect	text82,global,reloc=2,class=CODE,delta=1
   100                           	psect	text83,global,reloc=2,class=CODE,delta=1
   101                           	psect	text84,global,reloc=2,class=CODE,delta=1
   102                           	psect	text85,global,reloc=2,class=CODE,delta=1
   103                           	psect	text86,global,reloc=2,class=CODE,delta=1,group=1
   104                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   105                           	psect	text87,global,reloc=2,class=CODE,delta=1,group=1
   106                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   107                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   108  0000                     
   109                           ; Version 1.45
   110                           ; Generated 16/11/2017 GMT
   111                           ; 
   112                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   113                           ; All rights reserved.
   114                           ; 
   115                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   116                           ; 
   117                           ; Redistribution and use in source and binary forms, with or without modification, are
   118                           ; permitted provided that the following conditions are met:
   119                           ; 
   120                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   121                           ;        conditions and the following disclaimer.
   122                           ; 
   123                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   124                           ;        of conditions and the following disclaimer in the documentation and/or other
   125                           ;        materials provided with the distribution.
   126                           ; 
   127                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   128                           ;        software without specific prior written permission.
   129                           ; 
   130                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   131                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   132                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   133                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   134                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   135                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   136                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   137                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   138                           ; 
   139                           ; 
   140                           ; Code-generator required, PIC18F4550 Definitions
   141                           ; 
   142                           ; SFR Addresses
   143  0000                     
   144                           	psect	idataBANK1
   145  005194                     __pidataBANK1:
   146                           	opt stack 0
   147                           
   148                           ;initializer for escreve_inteiro_uart@F3958
   149  005194  30                 	db	48
   150  005195  30                 	db	48
   151  005196  30                 	db	48
   152  005197  30                 	db	48
   153  005198  30                 	db	48
   154  005199  30                 	db	48
   155  00519A  00                 	db	0
   156                           
   157                           ;initializer for escreve_inteiro_lcd@F3966
   158  00519B  30                 	db	48
   159  00519C  30                 	db	48
   160  00519D  30                 	db	48
   161  00519E  30                 	db	48
   162  00519F  30                 	db	48
   163  0051A0  30                 	db	48
   164  0051A1  00                 	db	0
   165                           
   166                           ;initializer for _filename
   167  0051A2  74                 	db	116
   168  0051A3  65                 	db	101
   169  0051A4  73                 	db	115
   170  0051A5  74                 	db	116
   171  0051A6  65                 	db	101
   172  0051A7  2E                 	db	46
   173  0051A8  74                 	db	116
   174  0051A9  78                 	db	120
   175  0051AA  74                 	db	116
   176  0051AB  00                 	db	0
   177  0051AC  00                 	db	0
   178  0051AD  00                 	db	0
   179  0051AE  00                 	db	0
   180  0051AF  00                 	db	0
   181  0051B0  00                 	db	0
   182                           
   183                           	psect	smallconst
   184  000800                     __psmallconst:
   185                           	opt stack 0
   186  000800  00                 	db	0
   187  000801                     mensagem_inicial@F4121:
   188                           	opt stack 0
   189  000801  54                 	db	84
   190  000802  43                 	db	67
   191  000803  43                 	db	67
   192  000804  2D                 	db	45
   193  000805  2D                 	db	45
   194  000806  54                 	db	84
   195  000807  45                 	db	69
   196  000808  4C                 	db	76
   197  000809  45                 	db	69
   198  00080A  4D                 	db	77
   199  00080B  54                 	db	84
   200  00080C  52                 	db	82
   201  00080D  49                 	db	73
   202  00080E  41                 	db	65
   203  00080F  00                 	db	0
   204  000810  00                 	db	0
   205  000811  00                 	db	0
   206  000812                     __end_ofmensagem_inicial@F4121:
   207                           	opt stack 0
   208  000812                     mensagem_inicial@F4119:
   209                           	opt stack 0
   210  000812  46                 	db	70
   211  000813  41                 	db	65
   212  000814  54                 	db	84
   213  000815  45                 	db	69
   214  000816  43                 	db	67
   215  000817  20                 	db	32
   216  000818  53                 	db	83
   217  000819  54                 	db	84
   218  00081A  20                 	db	32
   219  00081B  41                 	db	65
   220  00081C  4E                 	db	78
   221  00081D  44                 	db	68
   222  00081E  52                 	db	82
   223  00081F  45                 	db	69
   224  000820  00                 	db	0
   225  000821  00                 	db	0
   226  000822  00                 	db	0
   227  000823                     __end_ofmensagem_inicial@F4119:
   228                           	opt stack 0
   229  0000                     _RCSTA	set	4011
   230  0000                     _TXSTA	set	4012
   231  0000                     _RCREG	set	4014
   232  0000                     _RCSTAbits	set	4011
   233  0000                     _TXREG	set	4013
   234  0000                     _SPBRG	set	4015
   235  0000                     _PR2	set	4043
   236  0000                     _TMR2	set	4044
   237  0000                     _T2CON	set	4042
   238  0000                     _OSCCONbits	set	4051
   239  0000                     _TRISE	set	3990
   240  0000                     _TRISC	set	3988
   241  0000                     _TRISA	set	3986
   242  0000                     _TRISD	set	3989
   243  0000                     _LATB	set	3978
   244  0000                     _TRISB	set	3987
   245  0000                     _ADCON1	set	4033
   246  0000                     _TMR0L	set	4054
   247  0000                     _TMR0H	set	4055
   248  0000                     _PIE1	set	3997
   249  0000                     _INTCON3	set	4080
   250  0000                     _INTCON2	set	4081
   251  0000                     _INTCON	set	4082
   252  0000                     _SPPCFG	set	3939
   253  0000                     _SPPCON	set	3941
   254  0000                     _T0CON	set	4053
   255  0000                     _PORTDbits	set	3971
   256  0000                     _TRISDbits	set	3989
   257  0000                     _LATCbits	set	3979
   258  0000                     _SSPBUF	set	4041
   259  0000                     _SSPCON1bits	set	4038
   260  0000                     _SSPSTATbits	set	4039
   261  0000                     _SSPCON1	set	4038
   262  0000                     _SSPSTAT	set	4039
   263  0000                     _TRISCbits	set	3988
   264  0000                     _TRISBbits	set	3987
   265  0000                     _LATBbits	set	3978
   266  0000                     _T0CONbits	set	4053
   267  0000                     _PCL	set	4089
   268  0000                     _PCLATH	set	4090
   269  0000                     _INTCONbits	set	4082
   270  0000                     _PORTBbits	set	3969
   271  0000                     _PIR1bits	set	3998
   272  0000                     _PIE1bits	set	3997
   273  0000                     _RCIF	set	31989
   274  0000                     _TRMT	set	32097
   275  0000                     _TXEN	set	32101
   276  0000                     _CREN	set	32092
   277  0000                     _SPEN	set	32095
   278  0000                     _SYNC	set	32100
   279  0000                     _BRGH	set	32098
   280  0000                     _TMR2IF	set	31985
   281  0000                     _INT0IE	set	32660
   282  0000                     _INT0IF	set	32657
   283  0000                     _T0IF	set	32658
   284  0000                     _TMR0IF	set	32658
   285  000823                     STR_9:
   286  000823  0A                 	db	10
   287  000824  25                 	db	37
   288  000825  73                 	db	115	;'s'
   289  000826  20                 	db	32
   290  000827  3B                 	db	59	;';'
   291  000828  20                 	db	32
   292  000829  25                 	db	37
   293  00082A  73                 	db	115	;'s'
   294  00082B  20                 	db	32
   295  00082C  3B                 	db	59	;';'
   296  00082D  20                 	db	32
   297  00082E  25                 	db	37
   298  00082F  73                 	db	115	;'s'
   299  000830  20                 	db	32
   300  000831  3B                 	db	59	;';'
   301  000832  20                 	db	32
   302  000833  25                 	db	37
   303  000834  73                 	db	115	;'s'
   304  000835  20                 	db	32
   305  000836  3B                 	db	59	;';'
   306  000837  00                 	db	0
   307  000838  6F                 	db	111	;'o'
   308  000839  20                 	db	32
   309  00083A  53                 	db	83	;'S'
   310  00083B  69                 	db	105	;'i'
   311  00083C  73                 	db	115	;'s'
   312  00083D  74                 	db	116	;'t'
   313  00083E  65                 	db	101	;'e'
   314  00083F  6D                 	db	109	;'m'
   315  000840  61                 	db	97	;'a'
   316  000841  20                 	db	32
   317  000842  64                 	db	100	;'d'
   318  000843  65                 	db	101	;'e'
   319  000844  20                 	db	32
   320  000845  61                 	db	97	;'a'
   321  000846  72                 	db	114	;'r'
   322  000847  71                 	db	113	;'q'
   323  000848  75                 	db	117	;'u'
   324  000849  69                 	db	105	;'i'
   325  00084A  76                 	db	118	;'v'
   326  00084B  6F                 	db	111	;'o'
   327  00084C  00                 	db	0
   328  00084D                     STR_11:
   329  00084D  49                 	db	73	;'I'
   330  00084E  6E                 	db	110	;'n'
   331  00084F  73                 	db	115	;'s'
   332  000850  69                 	db	105	;'i'
   333  000851  72                 	db	114	;'r'
   334  000852  61                 	db	97	;'a'
   335  000853  20                 	db	32
   336  000854  6F                 	db	111	;'o'
   337  000855  20                 	db	32
   338  000856  43                 	db	67	;'C'
   339  000857  61                 	db	97	;'a'
   340  000858  72                 	db	114	;'r'
   341  000859  74                 	db	116	;'t'
   342  00085A  61                 	db	97	;'a'
   343  00085B  6F                 	db	111	;'o'
   344  00085C  00                 	db	0
   345  00085D  45                 	db	69	;'E'
   346  00085E  72                 	db	114	;'r'
   347  00085F  72                 	db	114	;'r'
   348  000860  6F                 	db	111	;'o'
   349  000861  20                 	db	32
   350  000862  61                 	db	97	;'a'
   351  000863  6F                 	db	111	;'o'
   352  000864  20                 	db	32
   353  000865  6D                 	db	109	;'m'
   354  000866  6F                 	db	111	;'o'
   355  000867  6E                 	db	110	;'n'
   356  000868  74                 	db	116	;'t'
   357  000869  61                 	db	97	;'a'
   358  00086A  72                 	db	114	;'r'
   359  00086B  00                 	db	0
   360  00086C  45                 	db	69	;'E'
   361  00086D  72                 	db	114	;'r'
   362  00086E  72                 	db	114	;'r'
   363  00086F  6F                 	db	111	;'o'
   364  000870  20                 	db	32
   365  000871  61                 	db	97	;'a'
   366  000872  6F                 	db	111	;'o'
   367  000873  20                 	db	32
   368  000874  63                 	db	99	;'c'
   369  000875  72                 	db	114	;'r'
   370  000876  69                 	db	105	;'i'
   371  000877  61                 	db	97	;'a'
   372  000878  72                 	db	114	;'r'
   373  000879  00                 	db	0
   374  00087A                     STR_13:
   375  00087A  4D                 	db	77	;'M'
   376  00087B  4D                 	db	77	;'M'
   377  00087C  43                 	db	67	;'C'
   378  00087D  20                 	db	32
   379  00087E  56                 	db	86	;'V'
   380  00087F  65                 	db	101	;'e'
   381  000880  72                 	db	114	;'r'
   382  000881  2E                 	db	46
   383  000882  20                 	db	32
   384  000883  33                 	db	51	;'3'
   385  000884  00                 	db	0
   386  000885                     STR_10:
   387  000885  53                 	db	83	;'S'
   388  000886  65                 	db	101	;'e'
   389  000887  6D                 	db	109	;'m'
   390  000888  20                 	db	32
   391  000889  43                 	db	67	;'C'
   392  00088A  61                 	db	97	;'a'
   393  00088B  72                 	db	114	;'r'
   394  00088C  74                 	db	116	;'t'
   395  00088D  61                 	db	97	;'a'
   396  00088E  6F                 	db	111	;'o'
   397  00088F  00                 	db	0
   398  000890                     STR_12:
   399  000890  53                 	db	83	;'S'
   400  000891  44                 	db	68	;'D'
   401  000892  20                 	db	32
   402  000893  56                 	db	86	;'V'
   403  000894  45                 	db	69	;'E'
   404  000895  52                 	db	82	;'R'
   405  000896  2E                 	db	46
   406  000897  20                 	db	32
   407  000898  31                 	db	49	;'1'
   408  000899  00                 	db	0
   409  00089A  56                 	db	86	;'V'
   410  00089B  65                 	db	101	;'e'
   411  00089C  72                 	db	114	;'r'
   412  00089D  69                 	db	105	;'i'
   413  00089E  66                 	db	102	;'f'
   414  00089F  69                 	db	105	;'i'
   415  0008A0  71                 	db	113	;'q'
   416  0008A1  75                 	db	117	;'u'
   417  0008A2  65                 	db	101	;'e'
   418  0008A3  00                 	db	0
   419  0008A4  6F                 	db	111	;'o'
   420  0008A5  20                 	db	32
   421  0008A6  61                 	db	97	;'a'
   422  0008A7  72                 	db	114	;'r'
   423  0008A8  71                 	db	113	;'q'
   424  0008A9  75                 	db	117	;'u'
   425  0008AA  69                 	db	105	;'i'
   426  0008AB  76                 	db	118	;'v'
   427  0008AC  6F                 	db	111	;'o'
   428  0008AD  00                 	db	0
   429  0008AE  6F                 	db	111	;'o'
   430  0008AF  20                 	db	32
   431  0008B0  63                 	db	99	;'c'
   432  0008B1  61                 	db	97	;'a'
   433  0008B2  72                 	db	114	;'r'
   434  0008B3  74                 	db	116	;'t'
   435  0008B4  61                 	db	97	;'a'
   436  0008B5  6F                 	db	111	;'o'
   437  0008B6  00                 	db	0
   438  0008B7                     STR_2:
   439  0008B7  47                 	db	71	;'G'
   440  0008B8  50                 	db	80	;'P'
   441  0008B9  47                 	db	71	;'G'
   442  0008BA  47                 	db	71	;'G'
   443  0008BB  41                 	db	65	;'A'
   444  0008BC  00                 	db	0
   445  0008BD                     STR_1:
   446  0008BD  47                 	db	71	;'G'
   447  0008BE  50                 	db	80	;'P'
   448  0008BF  52                 	db	82	;'R'
   449  0008C0  4D                 	db	77	;'M'
   450  0008C1  43                 	db	67	;'C'
   451  0008C2  00                 	db	0
   452  0008C3                     STR_15:
   453  0008C3  46                 	db	70	;'F'
   454  0008C4  41                 	db	65	;'A'
   455  0008C5  54                 	db	84	;'T'
   456  0008C6  00                 	db	0
   457  0008C7  0D                 	db	13
   458  0008C8  0A                 	db	10
   459  0008C9  00                 	db	0
   460  0008CA  00                 	db	0	; dummy byte at the end
   461  0000                     
   462                           ; #config settings
   463                           
   464                           	psect	cinit
   465  0049E0                     __pcinit:
   466                           	opt stack 0
   467  0049E0                     start_initialization:
   468                           	opt stack 0
   469  0049E0                     __initialization:
   470                           	opt stack 0
   471                           
   472                           ; Initialize objects allocated to BANK1 (29 bytes)
   473                           ; load TBLPTR registers with __pidataBANK1
   474  0049E0  0E94               	movlw	low __pidataBANK1
   475  0049E2  6EF6               	movwf	tblptrl,c
   476  0049E4  0E51               	movlw	high __pidataBANK1
   477  0049E6  6EF7               	movwf	tblptrh,c
   478  0049E8  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   479  0049EA  6EF8               	movwf	tblptru,c
   480  0049EC  EE01  F0C7         	lfsr	0,__pdataBANK1
   481  0049F0  EE10 F01D          	lfsr	1,29
   482  0049F4                     copy_data0:
   483  0049F4  0009               	tblrd		*+
   484  0049F6  CFF5 FFEE          	movff	tablat,postinc0
   485  0049FA  50E5               	movf	postdec1,w,c
   486  0049FC  50E1               	movf	fsr1l,w,c
   487  0049FE  E1FA               	bnz	copy_data0
   488                           
   489                           ; Clear objects allocated to BIGRAM (544 bytes)
   490  004A00  EE01  F0E4         	lfsr	0,__pbssBIGRAM
   491  004A04  EE12 F020          	lfsr	1,544
   492  004A08                     clear_0:
   493  004A08  6AEE               	clrf	postinc0,c
   494  004A0A  50E5               	movf	postdec1,w,c
   495  004A0C  50E1               	movf	fsr1l,w,c
   496  004A0E  E1FC               	bnz	clear_0
   497  004A10  50E2               	movf	fsr1h,w,c
   498  004A12  E1FA               	bnz	clear_0
   499                           
   500                           ; Clear objects allocated to BANK1 (140 bytes)
   501  004A14  EE01  F000         	lfsr	0,__pbssBANK1
   502  004A18  0E8C               	movlw	140
   503  004A1A                     clear_1:
   504  004A1A  6AEE               	clrf	postinc0,c
   505  004A1C  06E8               	decf	wreg,f,c
   506  004A1E  E1FD               	bnz	clear_1
   507                           
   508                           ; Clear objects allocated to BANK0 (20 bytes)
   509  004A20  EE00  F0EC         	lfsr	0,__pbssBANK0
   510  004A24  0E14               	movlw	20
   511  004A26                     clear_2:
   512  004A26  6AEE               	clrf	postinc0,c
   513  004A28  06E8               	decf	wreg,f,c
   514  004A2A  E1FD               	bnz	clear_2
   515                           
   516                           ; Clear objects allocated to COMRAM (31 bytes)
   517  004A2C  EE00  F021         	lfsr	0,__pbssCOMRAM
   518  004A30  0E1F               	movlw	31
   519  004A32                     clear_3:
   520  004A32  6AEE               	clrf	postinc0,c
   521  004A34  06E8               	decf	wreg,f,c
   522  004A36  E1FD               	bnz	clear_3
   523  004A38                     end_of_initialization:
   524                           	opt stack 0
   525  004A38                     __end_of__initialization:
   526                           	opt stack 0
   527  004A38  9040               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   528  004A3A  9240               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   529  004A3C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   530  004A3E  6EF8               	movwf	tblptru,c
   531  004A40  0100               	movlb	0
   532  004A42  EF3C  F028         	goto	_main	;jump to C main() function
   533                           tblptru	equ	0xFF8
   534                           tblptrh	equ	0xFF7
   535                           tblptrl	equ	0xFF6
   536                           tablat	equ	0xFF5
   537                           postinc0	equ	0xFEE
   538                           wreg	equ	0xFE8
   539                           postdec1	equ	0xFE5
   540                           fsr1h	equ	0xFE2
   541                           fsr1l	equ	0xFE1
   542                           
   543                           	psect	bssCOMRAM
   544  000021                     __pbssCOMRAM:
   545                           	opt stack 0
   546  000021                     _tempo_tarefa:
   547                           	opt stack 0
   548  000021                     	ds	4
   549  000025                     _data_buff:
   550                           	opt stack 0
   551  000025                     	ds	2
   552  000027                     _GPGGA_ok:
   553                           	opt stack 0
   554  000027                     	ds	2
   555  000029                     _GPRMC_ok:
   556                           	opt stack 0
   557  000029                     	ds	2
   558  00002B                     _timeout_tarefa:
   559                           	opt stack 0
   560  00002B                     	ds	2
   561  00002D                     _dado:
   562                           	opt stack 0
   563  00002D                     	ds	1
   564  00002E                     timer_dois@flag:
   565                           	opt stack 0
   566  00002E                     	ds	1
   567  00002F                     _estado:
   568                           	opt stack 0
   569  00002F                     	ds	1
   570  000030                     	ds	1
   571  000031                     _data_hoje:
   572                           	opt stack 0
   573  000031                     	ds	1
   574  000032                     _Term:
   575                           	opt stack 0
   576  000032                     	ds	1
   577  000033                     _SentenceType:
   578                           	opt stack 0
   579  000033                     	ds	1
   580  000034                     _char_number:
   581                           	opt stack 0
   582  000034                     	ds	1
   583  000035                     _tarefa_em_execucao:
   584                           	opt stack 0
   585  000035                     	ds	1
   586  000036                     _data_uart_recebe:
   587                           	opt stack 0
   588  000036                     	ds	1
   589  000037                     _sentence:
   590                           	opt stack 0
   591  000037                     	ds	6
   592  00003D                     _rawSatellites:
   593                           	opt stack 0
   594  00003D                     	ds	3
   595                           tblptru	equ	0xFF8
   596                           tblptrh	equ	0xFF7
   597                           tblptrl	equ	0xFF6
   598                           tablat	equ	0xFF5
   599                           postinc0	equ	0xFEE
   600                           wreg	equ	0xFE8
   601                           postdec1	equ	0xFE5
   602                           fsr1h	equ	0xFE2
   603                           fsr1l	equ	0xFE1
   604                           
   605                           	psect	bssBANK0
   606  0000EC                     __pbssBANK0:
   607                           	opt stack 0
   608  0000EC                     _tempo_backup:
   609                           	opt stack 0
   610  0000EC                     	ds	4
   611  0000F0                     _p_tarefas:
   612                           	opt stack 0
   613  0000F0                     	ds	4
   614  0000F4                     _fsid:
   615                           	opt stack 0
   616  0000F4                     	ds	2
   617  0000F6                     _FatFs:
   618                           	opt stack 0
   619  0000F6                     	ds	2
   620  0000F8                     _sinaliza_int_timer:
   621                           	opt stack 0
   622  0000F8                     	ds	1
   623  0000F9                     _rawDate:
   624                           	opt stack 0
   625  0000F9                     	ds	7
   626                           tblptru	equ	0xFF8
   627                           tblptrh	equ	0xFF7
   628                           tblptrl	equ	0xFF6
   629                           tablat	equ	0xFF5
   630                           postinc0	equ	0xFEE
   631                           wreg	equ	0xFE8
   632                           postdec1	equ	0xFE5
   633                           fsr1h	equ	0xFE2
   634                           fsr1l	equ	0xFE1
   635                           
   636                           	psect	bssBANK1
   637  000100                     __pbssBANK1:
   638                           	opt stack 0
   639  000100                     _string_dado:
   640                           	opt stack 0
   641  000100                     	ds	44
   642  00012C                     _fil:
   643                           	opt stack 0
   644  00012C                     	ds	28
   645  000148                     _rawLongitude:
   646                           	opt stack 0
   647  000148                     	ds	13
   648  000155                     _rawLatitude:
   649                           	opt stack 0
   650  000155                     	ds	13
   651  000162                     _buffer:
   652                           	opt stack 0
   653  000162                     	ds	12
   654  00016E                     _rawTime:
   655                           	opt stack 0
   656  00016E                     	ds	11
   657  000179                     _rawAltitude:
   658                           	opt stack 0
   659  000179                     	ds	7
   660  000180                     _rawCourse:
   661                           	opt stack 0
   662  000180                     	ds	6
   663  000186                     _rawSpeed:
   664                           	opt stack 0
   665  000186                     	ds	6
   666                           tblptru	equ	0xFF8
   667                           tblptrh	equ	0xFF7
   668                           tblptrl	equ	0xFF6
   669                           tablat	equ	0xFF5
   670                           postinc0	equ	0xFEE
   671                           wreg	equ	0xFE8
   672                           postdec1	equ	0xFE5
   673                           fsr1h	equ	0xFE2
   674                           fsr1l	equ	0xFE1
   675                           
   676                           	psect	dataBANK1
   677  0001C7                     __pdataBANK1:
   678                           	opt stack 0
   679  0001C7                     escreve_inteiro_uart@F3958:
   680                           	opt stack 0
   681  0001C7                     	ds	7
   682  0001CE                     escreve_inteiro_lcd@F3966:
   683                           	opt stack 0
   684  0001CE                     	ds	7
   685  0001D5                     _filename:
   686                           	opt stack 0
   687  0001D5                     	ds	15
   688                           tblptru	equ	0xFF8
   689                           tblptrh	equ	0xFF7
   690                           tblptrl	equ	0xFF6
   691                           tablat	equ	0xFF5
   692                           postinc0	equ	0xFEE
   693                           wreg	equ	0xFE8
   694                           postdec1	equ	0xFE5
   695                           fsr1h	equ	0xFE2
   696                           fsr1l	equ	0xFE1
   697                           
   698                           	psect	bssBIGRAM
   699  0001E4                     __pbssBIGRAM:
   700                           	opt stack 0
   701  0001E4                     _fs:
   702                           	opt stack 0
   703  0001E4                     	ds	544
   704                           tblptru	equ	0xFF8
   705                           tblptrh	equ	0xFF7
   706                           tblptrl	equ	0xFF6
   707                           tablat	equ	0xFF5
   708                           postinc0	equ	0xFEE
   709                           wreg	equ	0xFE8
   710                           postdec1	equ	0xFE5
   711                           fsr1h	equ	0xFE2
   712                           fsr1l	equ	0xFE1
   713                           
   714                           	psect	cstackBANK1
   715  00018C                     __pcstackBANK1:
   716                           	opt stack 0
   717  00018C                     ?_fputs:
   718                           	opt stack 0
   719  00018C                     fputs@str:
   720                           	opt stack 0
   721  00018C                     f_open@fn:
   722                           	opt stack 0
   723                           
   724                           ; 12 bytes @ 0x0
   725  00018C                     	ds	2
   726  00018E                     fputs@fil:
   727                           	opt stack 0
   728                           
   729                           ; 2 bytes @ 0x2
   730  00018E                     	ds	2
   731  000190                     ??_fputs:
   732                           
   733                           ; 1 bytes @ 0x4
   734  000190                     	ds	1
   735  000191                     fputs@n:
   736                           	opt stack 0
   737                           
   738                           ; 2 bytes @ 0x5
   739  000191                     	ds	2
   740  000193                     ?_fprintf:
   741                           	opt stack 0
   742  000193                     fprintf@fil:
   743                           	opt stack 0
   744                           
   745                           ; 2 bytes @ 0x7
   746  000193                     	ds	2
   747  000195                     fprintf@str:
   748                           	opt stack 0
   749                           
   750                           ; 2 bytes @ 0x9
   751  000195                     	ds	3
   752  000198                     f_open@rs:
   753                           	opt stack 0
   754                           
   755                           ; 2 bytes @ 0xC
   756  000198                     	ds	2
   757  00019A                     f_open@dw:
   758                           	opt stack 0
   759                           
   760                           ; 4 bytes @ 0xE
   761  00019A                     	ds	4
   762  00019E                     f_open@res:
   763                           	opt stack 0
   764                           
   765                           ; 1 bytes @ 0x12
   766  00019E                     	ds	1
   767  00019F                     ??_fprintf:
   768  00019F                     f_open@dir:
   769                           	opt stack 0
   770                           
   771                           ; 2 bytes @ 0x13
   772  00019F                     	ds	2
   773  0001A1                     f_open@dj:
   774                           	opt stack 0
   775  0001A1                     fprintf@s:
   776                           	opt stack 0
   777                           
   778                           ; 16 bytes @ 0x15
   779  0001A1                     	ds	16
   780  0001B1                     fprintf@res:
   781                           	opt stack 0
   782                           
   783                           ; 2 bytes @ 0x25
   784  0001B1                     	ds	2
   785  0001B3                     _fprintf$2405:
   786                           	opt stack 0
   787                           
   788                           ; 2 bytes @ 0x27
   789  0001B3                     	ds	2
   790  0001B5                     fprintf@w:
   791                           	opt stack 0
   792                           
   793                           ; 2 bytes @ 0x29
   794  0001B5                     	ds	2
   795  0001B7                     fprintf@f:
   796                           	opt stack 0
   797                           
   798                           ; 1 bytes @ 0x2B
   799  0001B7                     	ds	1
   800  0001B8                     fprintf@r:
   801                           	opt stack 0
   802                           
   803                           ; 1 bytes @ 0x2C
   804  0001B8                     	ds	1
   805  0001B9                     fprintf@val:
   806                           	opt stack 0
   807                           
   808                           ; 4 bytes @ 0x2D
   809  0001B9                     	ds	4
   810  0001BD                     fprintf@arp:
   811                           	opt stack 0
   812                           
   813                           ; 2 bytes @ 0x31
   814  0001BD                     	ds	2
   815  0001BF                     fprintf@cc:
   816                           	opt stack 0
   817                           
   818                           ; 2 bytes @ 0x33
   819  0001BF                     	ds	2
   820  0001C1                     fprintf@i:
   821                           	opt stack 0
   822                           
   823                           ; 2 bytes @ 0x35
   824  0001C1                     	ds	2
   825  0001C3                     fprintf@c:
   826                           	opt stack 0
   827                           
   828                           ; 1 bytes @ 0x37
   829  0001C3                     	ds	1
   830  0001C4                     
   831                           ; 1 bytes @ 0x38
   832  0001C4                     	ds	2
   833  0001C6                     escalonador@cont:
   834                           	opt stack 0
   835                           
   836                           ; 1 bytes @ 0x3A
   837  0001C6                     	ds	1
   838                           tblptru	equ	0xFF8
   839                           tblptrh	equ	0xFF7
   840                           tblptrl	equ	0xFF6
   841                           tablat	equ	0xFF5
   842                           postinc0	equ	0xFEE
   843                           wreg	equ	0xFE8
   844                           postdec1	equ	0xFE5
   845                           fsr1h	equ	0xFE2
   846                           fsr1l	equ	0xFE1
   847                           
   848                           	psect	cstackBANK0
   849  000060                     __pcstackBANK0:
   850                           	opt stack 0
   851  000060                     ??_dummy_clocks:
   852  000060                     ?_strlen:
   853                           	opt stack 0
   854  000060                     ?_memcmp:
   855                           	opt stack 0
   856  000060                     ?___wmul:
   857                           	opt stack 0
   858  000060                     ?___lwdiv:
   859                           	opt stack 0
   860  000060                     ?___lwmod:
   861                           	opt stack 0
   862  000060                     ?_get_fattime:
   863                           	opt stack 0
   864  000060                     ?___lmul:
   865                           	opt stack 0
   866  000060                     ?___aldiv:
   867                           	opt stack 0
   868  000060                     ?___lldiv:
   869                           	opt stack 0
   870  000060                     ?___llmod:
   871                           	opt stack 0
   872  000060                     response@buff:
   873                           	opt stack 0
   874  000060                     escreve_SPI@TempVar:
   875                           	opt stack 0
   876  000060                     disk_ioctl@cmd:
   877                           	opt stack 0
   878  000060                     sdc_disk_status@stat:
   879                           	opt stack 0
   880  000060                     delay@contador_ext:
   881                           	opt stack 0
   882  000060                     write_timer_zero@timer0:
   883                           	opt stack 0
   884  000060                     f_mount@fs:
   885                           	opt stack 0
   886  000060                     ___wmul@multiplier:
   887                           	opt stack 0
   888  000060                     ___lwdiv@dividend:
   889                           	opt stack 0
   890  000060                     ___lwmod@dividend:
   891                           	opt stack 0
   892  000060                     memcmp@s1:
   893                           	opt stack 0
   894  000060                     memcpy@d1:
   895                           	opt stack 0
   896  000060                     memset@p1:
   897                           	opt stack 0
   898  000060                     strlen@s:
   899                           	opt stack 0
   900  000060                     wait_ready@timeout:
   901                           	opt stack 0
   902  000060                     ___lmul@multiplier:
   903                           	opt stack 0
   904  000060                     ___aldiv@dividend:
   905                           	opt stack 0
   906  000060                     ___lldiv@dividend:
   907                           	opt stack 0
   908  000060                     ___llmod@dividend:
   909                           	opt stack 0
   910                           
   911                           ; 4 bytes @ 0x0
   912  000060                     	ds	1
   913  000061                     escreve_SPI@dado:
   914                           	opt stack 0
   915  000061                     sdc_disk_status@pdrv:
   916                           	opt stack 0
   917  000061                     delay@contador_int:
   918                           	opt stack 0
   919  000061                     disk_ioctl@buff:
   920                           	opt stack 0
   921                           
   922                           ; 2 bytes @ 0x1
   923  000061                     	ds	1
   924  000062                     ??_strlen:
   925  000062                     ??_disk_status:
   926  000062                     dummy_clocks@n:
   927                           	opt stack 0
   928  000062                     escreve_cmd_lcd@comando:
   929                           	opt stack 0
   930  000062                     endereco_cursor_lcd@endereco:
   931                           	opt stack 0
   932  000062                     escreve_caractere_lcd@data:
   933                           	opt stack 0
   934  000062                     f_mount@drv:
   935                           	opt stack 0
   936  000062                     write_timer_zero@timer:
   937                           	opt stack 0
   938  000062                     ___wmul@multiplicand:
   939                           	opt stack 0
   940  000062                     ___lwdiv@divisor:
   941                           	opt stack 0
   942  000062                     ___lwmod@divisor:
   943                           	opt stack 0
   944  000062                     memcmp@s2:
   945                           	opt stack 0
   946  000062                     memcpy@s1:
   947                           	opt stack 0
   948  000062                     memset@c:
   949                           	opt stack 0
   950                           
   951                           ; 2 bytes @ 0x2
   952  000062                     	ds	1
   953  000063                     ??_init_lcd:
   954  000063                     disk_ioctl@pdrv:
   955                           	opt stack 0
   956  000063                     posicao_cursor_lcd@coluna:
   957                           	opt stack 0
   958  000063                     dummy_clocks@i:
   959                           	opt stack 0
   960  000063                     disk_status@result:
   961                           	opt stack 0
   962  000063                     escreve_frase_ram_lcd@buffer:
   963                           	opt stack 0
   964                           
   965                           ; 2 bytes @ 0x3
   966  000063                     	ds	1
   967  000064                     ??_get_fattime:
   968  000064                     wait_ready@res:
   969                           	opt stack 0
   970  000064                     disk_ioctl@res:
   971                           	opt stack 0
   972  000064                     posicao_cursor_lcd@linha:
   973                           	opt stack 0
   974  000064                     ___lwdiv@counter:
   975                           	opt stack 0
   976  000064                     ___lwmod@counter:
   977                           	opt stack 0
   978  000064                     ___wmul@product:
   979                           	opt stack 0
   980  000064                     memcmp@n:
   981                           	opt stack 0
   982  000064                     memcpy@n:
   983                           	opt stack 0
   984  000064                     memset@n:
   985                           	opt stack 0
   986  000064                     strlen@cp:
   987                           	opt stack 0
   988  000064                     ___lmul@multiplicand:
   989                           	opt stack 0
   990  000064                     ___aldiv@divisor:
   991                           	opt stack 0
   992  000064                     ___lldiv@divisor:
   993                           	opt stack 0
   994  000064                     ___llmod@divisor:
   995                           	opt stack 0
   996                           
   997                           ; 4 bytes @ 0x4
   998  000064                     	ds	1
   999  000065                     disk_status@pdrv:
  1000                           	opt stack 0
  1001  000065                     posicao_cursor_lcd@endereco:
  1002                           	opt stack 0
  1003  000065                     ___lwdiv@quotient:
  1004                           	opt stack 0
  1005  000065                     command@arg:
  1006                           	opt stack 0
  1007                           
  1008                           ; 4 bytes @ 0x5
  1009  000065                     	ds	1
  1010  000066                     ??_mensagem_inicial:
  1011  000066                     ??_memcmp:
  1012  000066                     disk_status@stat:
  1013                           	opt stack 0
  1014  000066                     memcpy@tmp:
  1015                           	opt stack 0
  1016  000066                     monta_sd@dado:
  1017                           	opt stack 0
  1018  000066                     memset@p:
  1019                           	opt stack 0
  1020                           
  1021                           ; 2 bytes @ 0x6
  1022  000066                     	ds	1
  1023  000067                     validate@fs:
  1024                           	opt stack 0
  1025  000067                     utoa@buf:
  1026                           	opt stack 0
  1027  000067                     memcpy@d:
  1028                           	opt stack 0
  1029                           
  1030                           ; 2 bytes @ 0x7
  1031  000067                     	ds	1
  1032  000068                     monta_sd@index:
  1033                           	opt stack 0
  1034  000068                     ___aldiv@counter:
  1035                           	opt stack 0
  1036  000068                     ___llmod@counter:
  1037                           	opt stack 0
  1038  000068                     make_dirfile@path:
  1039                           	opt stack 0
  1040  000068                     ___lmul@product:
  1041                           	opt stack 0
  1042  000068                     ___lldiv@quotient:
  1043                           	opt stack 0
  1044  000068                     mensagem_inicial@msg_linha_um:
  1045                           	opt stack 0
  1046                           
  1047                           ; 17 bytes @ 0x8
  1048  000068                     	ds	1
  1049  000069                     command@CRC:
  1050                           	opt stack 0
  1051  000069                     monta_sd@size:
  1052                           	opt stack 0
  1053  000069                     ___aldiv@sign:
  1054                           	opt stack 0
  1055  000069                     validate@id:
  1056                           	opt stack 0
  1057  000069                     utoa@val:
  1058                           	opt stack 0
  1059  000069                     memcpy@s:
  1060                           	opt stack 0
  1061                           
  1062                           ; 2 bytes @ 0x9
  1063  000069                     	ds	1
  1064  00006A                     command@CMD:
  1065                           	opt stack 0
  1066  00006A                     monta_sd@i:
  1067                           	opt stack 0
  1068  00006A                     make_dirfile@dirname:
  1069                           	opt stack 0
  1070  00006A                     ___aldiv@quotient:
  1071                           	opt stack 0
  1072                           
  1073                           ; 4 bytes @ 0xA
  1074  00006A                     	ds	1
  1075  00006B                     ??_validate:
  1076  00006B                     command@argument:
  1077                           	opt stack 0
  1078  00006B                     utoa@base:
  1079                           	opt stack 0
  1080                           
  1081                           ; 2 bytes @ 0xB
  1082  00006B                     	ds	1
  1083  00006C                     ??_make_dirfile:
  1084  00006C                     ?_clust2sect:
  1085                           	opt stack 0
  1086  00006C                     ___lldiv@counter:
  1087                           	opt stack 0
  1088  00006C                     sdc_reset@i:
  1089                           	opt stack 0
  1090  00006C                     sdc_disk_read@p_buff:
  1091                           	opt stack 0
  1092  00006C                     sdc_disk_write@p_buff:
  1093                           	opt stack 0
  1094  00006C                     clust2sect@clust:
  1095                           	opt stack 0
  1096                           
  1097                           ; 2 bytes @ 0xC
  1098  00006C                     	ds	1
  1099  00006D                     utoa@v:
  1100                           	opt stack 0
  1101                           
  1102                           ; 2 bytes @ 0xD
  1103  00006D                     	ds	1
  1104  00006E                     sdc_reset@count_nosd:
  1105                           	opt stack 0
  1106  00006E                     _make_dirfile$1916:
  1107                           	opt stack 0
  1108  00006E                     sdc_disk_read@sector:
  1109                           	opt stack 0
  1110  00006E                     sdc_disk_write@sector:
  1111                           	opt stack 0
  1112  00006E                     configura_baudrate_uart@baudrate:
  1113                           	opt stack 0
  1114                           
  1115                           ; 4 bytes @ 0xE
  1116  00006E                     	ds	1
  1117  00006F                     utoa@c:
  1118                           	opt stack 0
  1119                           
  1120                           ; 1 bytes @ 0xF
  1121  00006F                     	ds	1
  1122  000070                     ??_clust2sect:
  1123  000070                     make_dirfile@b:
  1124                           	opt stack 0
  1125  000070                     sdc_reset@count:
  1126                           	opt stack 0
  1127  000070                     itoa@buf:
  1128                           	opt stack 0
  1129                           
  1130                           ; 2 bytes @ 0x10
  1131  000070                     	ds	1
  1132  000071                     make_dirfile@t:
  1133                           	opt stack 0
  1134                           
  1135                           ; 1 bytes @ 0x11
  1136  000071                     	ds	1
  1137  000072                     ??_configura_baudrate_uart:
  1138  000072                     sdc_reset@buff:
  1139                           	opt stack 0
  1140  000072                     sdc_disk_read@count:
  1141                           	opt stack 0
  1142  000072                     sdc_disk_write@count:
  1143                           	opt stack 0
  1144  000072                     make_dirfile@a:
  1145                           	opt stack 0
  1146  000072                     itoa@val:
  1147                           	opt stack 0
  1148                           
  1149                           ; 2 bytes @ 0x12
  1150  000072                     	ds	1
  1151  000073                     ??_sdc_disk_initialize:
  1152  000073                     ??_sdc_disk_read:
  1153  000073                     ??_sdc_disk_write:
  1154  000073                     make_dirfile@n:
  1155                           	opt stack 0
  1156                           
  1157                           ; 1 bytes @ 0x13
  1158  000073                     	ds	1
  1159  000074                     make_dirfile@c:
  1160                           	opt stack 0
  1161  000074                     sdc_disk_initialize@i:
  1162                           	opt stack 0
  1163  000074                     itoa@base:
  1164                           	opt stack 0
  1165                           
  1166                           ; 2 bytes @ 0x14
  1167  000074                     	ds	1
  1168  000075                     clust2sect@fs:
  1169                           	opt stack 0
  1170                           
  1171                           ; 2 bytes @ 0x15
  1172  000075                     	ds	1
  1173  000076                     sdc_disk_initialize@stat:
  1174                           	opt stack 0
  1175  000076                     itoa@cp:
  1176                           	opt stack 0
  1177                           
  1178                           ; 2 bytes @ 0x16
  1179  000076                     	ds	1
  1180  000077                     sdc_disk_read@ptr:
  1181                           	opt stack 0
  1182  000077                     sdc_disk_initialize@count1:
  1183                           	opt stack 0
  1184  000077                     sdc_disk_write@i:
  1185                           	opt stack 0
  1186                           
  1187                           ; 2 bytes @ 0x17
  1188  000077                     	ds	1
  1189  000078                     escreve_inteiro_lcd@valor:
  1190                           	opt stack 0
  1191  000078                     sdc_disk_read@start_add:
  1192                           	opt stack 0
  1193                           
  1194                           ; 4 bytes @ 0x18
  1195  000078                     	ds	1
  1196  000079                     sdc_disk_initialize@crc_number:
  1197                           	opt stack 0
  1198  000079                     sdc_disk_write@count1:
  1199                           	opt stack 0
  1200  000079                     mensagem_inicial@msg_dois:
  1201                           	opt stack 0
  1202                           
  1203                           ; 17 bytes @ 0x19
  1204  000079                     	ds	1
  1205  00007A                     configura_baudrate_uart@x:
  1206                           	opt stack 0
  1207  00007A                     escreve_inteiro_lcd@texto:
  1208                           	opt stack 0
  1209                           
  1210                           ; 7 bytes @ 0x1A
  1211  00007A                     	ds	1
  1212  00007B                     sdc_disk_initialize@buff_i:
  1213                           	opt stack 0
  1214  00007B                     sdc_disk_write@res:
  1215                           	opt stack 0
  1216                           
  1217                           ; 1 bytes @ 0x1B
  1218  00007B                     	ds	1
  1219  00007C                     sdc_disk_initialize@ocr:
  1220                           	opt stack 0
  1221  00007C                     sdc_disk_read@length:
  1222                           	opt stack 0
  1223  00007C                     sdc_disk_write@j:
  1224                           	opt stack 0
  1225                           
  1226                           ; 2 bytes @ 0x1C
  1227  00007C                     	ds	1
  1228  00007D                     sdc_disk_initialize@count2:
  1229                           	opt stack 0
  1230                           
  1231                           ; 2 bytes @ 0x1D
  1232  00007D                     	ds	1
  1233  00007E                     sdc_disk_read@buff:
  1234                           	opt stack 0
  1235  00007E                     sdc_disk_write@buff:
  1236                           	opt stack 0
  1237                           
  1238                           ; 1 bytes @ 0x1E
  1239  00007E                     	ds	1
  1240  00007F                     sdc_disk_initialize@buff:
  1241                           	opt stack 0
  1242  00007F                     disk_read@buff:
  1243                           	opt stack 0
  1244  00007F                     disk_write@buff:
  1245                           	opt stack 0
  1246                           
  1247                           ; 2 bytes @ 0x1F
  1248  00007F                     	ds	1
  1249  000080                     disk_initialize@pdrv:
  1250                           	opt stack 0
  1251                           
  1252                           ; 1 bytes @ 0x20
  1253  000080                     	ds	1
  1254  000081                     disk_initialize@stat:
  1255                           	opt stack 0
  1256  000081                     disk_read@sector:
  1257                           	opt stack 0
  1258  000081                     disk_write@sector:
  1259                           	opt stack 0
  1260                           
  1261                           ; 4 bytes @ 0x21
  1262  000081                     	ds	4
  1263  000085                     disk_read@count:
  1264                           	opt stack 0
  1265  000085                     disk_write@count:
  1266                           	opt stack 0
  1267                           
  1268                           ; 1 bytes @ 0x25
  1269  000085                     	ds	1
  1270  000086                     ??_disk_read:
  1271  000086                     ??_disk_write:
  1272                           
  1273                           ; 1 bytes @ 0x26
  1274  000086                     	ds	1
  1275  000087                     disk_read@pdrv:
  1276                           	opt stack 0
  1277  000087                     disk_write@pdrv:
  1278                           	opt stack 0
  1279                           
  1280                           ; 1 bytes @ 0x27
  1281  000087                     	ds	1
  1282  000088                     disk_read@result:
  1283                           	opt stack 0
  1284  000088                     disk_write@result:
  1285                           	opt stack 0
  1286                           
  1287                           ; 2 bytes @ 0x28
  1288  000088                     	ds	2
  1289  00008A                     disk_read@res:
  1290                           	opt stack 0
  1291  00008A                     disk_write@res:
  1292                           	opt stack 0
  1293  00008A                     get_fattime@f_time:
  1294                           	opt stack 0
  1295                           
  1296                           ; 9 bytes @ 0x2A
  1297  00008A                     	ds	1
  1298  00008B                     move_window@sector:
  1299                           	opt stack 0
  1300  00008B                     check_fs@sect:
  1301                           	opt stack 0
  1302                           
  1303                           ; 4 bytes @ 0x2B
  1304  00008B                     	ds	4
  1305  00008F                     ??_move_window:
  1306  00008F                     
  1307                           ; 1 bytes @ 0x2F
  1308  00008F                     	ds	2
  1309  000091                     check_fs@fs:
  1310                           	opt stack 0
  1311                           
  1312                           ; 2 bytes @ 0x31
  1313  000091                     	ds	2
  1314  000093                     auto_mount@path:
  1315                           	opt stack 0
  1316                           
  1317                           ; 2 bytes @ 0x33
  1318  000093                     	ds	2
  1319  000095                     auto_mount@chk_wp:
  1320                           	opt stack 0
  1321                           
  1322                           ; 1 bytes @ 0x35
  1323  000095                     	ds	1
  1324  000096                     ??_auto_mount:
  1325                           
  1326                           ; 1 bytes @ 0x36
  1327  000096                     	ds	3
  1328  000099                     move_window@n:
  1329                           	opt stack 0
  1330                           
  1331                           ; 1 bytes @ 0x39
  1332  000099                     	ds	1
  1333  00009A                     move_window@wsect:
  1334                           	opt stack 0
  1335                           
  1336                           ; 4 bytes @ 0x3A
  1337  00009A                     	ds	4
  1338  00009E                     move_window@fs:
  1339                           	opt stack 0
  1340                           
  1341                           ; 2 bytes @ 0x3E
  1342  00009E                     	ds	2
  1343  0000A0                     ?_get_cluster:
  1344                           	opt stack 0
  1345  0000A0                     sync@fs:
  1346                           	opt stack 0
  1347  0000A0                     get_cluster@clust:
  1348                           	opt stack 0
  1349  0000A0                     put_cluster@clust:
  1350                           	opt stack 0
  1351                           
  1352                           ; 2 bytes @ 0x40
  1353  0000A0                     	ds	2
  1354  0000A2                     ??_get_cluster:
  1355  0000A2                     put_cluster@val:
  1356                           	opt stack 0
  1357  0000A2                     f_sync@fp:
  1358                           	opt stack 0
  1359                           
  1360                           ; 2 bytes @ 0x42
  1361  0000A2                     	ds	2
  1362  0000A4                     ??_put_cluster:
  1363  0000A4                     f_sync@tim:
  1364                           	opt stack 0
  1365                           
  1366                           ; 4 bytes @ 0x44
  1367  0000A4                     	ds	1
  1368  0000A5                     auto_mount@maxclust:
  1369                           	opt stack 0
  1370                           
  1371                           ; 4 bytes @ 0x45
  1372  0000A5                     	ds	3
  1373  0000A8                     f_sync@res:
  1374                           	opt stack 0
  1375  0000A8                     _put_cluster$1806:
  1376                           	opt stack 0
  1377                           
  1378                           ; 2 bytes @ 0x48
  1379  0000A8                     	ds	1
  1380  0000A9                     get_cluster@wc:
  1381                           	opt stack 0
  1382  0000A9                     f_sync@dir:
  1383                           	opt stack 0
  1384  0000A9                     auto_mount@bootsect:
  1385                           	opt stack 0
  1386                           
  1387                           ; 4 bytes @ 0x49
  1388  0000A9                     	ds	1
  1389  0000AA                     _put_cluster$1807:
  1390                           	opt stack 0
  1391                           
  1392                           ; 2 bytes @ 0x4A
  1393  0000AA                     	ds	1
  1394  0000AB                     f_close@fp:
  1395                           	opt stack 0
  1396  0000AB                     get_cluster@fatsect:
  1397                           	opt stack 0
  1398                           
  1399                           ; 4 bytes @ 0x4B
  1400  0000AB                     	ds	1
  1401  0000AC                     put_cluster@fatsect:
  1402                           	opt stack 0
  1403                           
  1404                           ; 4 bytes @ 0x4C
  1405  0000AC                     	ds	1
  1406  0000AD                     f_close@res:
  1407                           	opt stack 0
  1408  0000AD                     auto_mount@totalsect:
  1409                           	opt stack 0
  1410                           
  1411                           ; 4 bytes @ 0x4D
  1412  0000AD                     	ds	2
  1413  0000AF                     get_cluster@bc:
  1414                           	opt stack 0
  1415                           
  1416                           ; 2 bytes @ 0x4F
  1417  0000AF                     	ds	1
  1418  0000B0                     put_cluster@bc:
  1419                           	opt stack 0
  1420                           
  1421                           ; 2 bytes @ 0x50
  1422  0000B0                     	ds	1
  1423  0000B1                     get_cluster@fs:
  1424                           	opt stack 0
  1425  0000B1                     auto_mount@p:
  1426                           	opt stack 0
  1427                           
  1428                           ; 2 bytes @ 0x51
  1429  0000B1                     	ds	1
  1430  0000B2                     put_cluster@p:
  1431                           	opt stack 0
  1432                           
  1433                           ; 2 bytes @ 0x52
  1434  0000B2                     	ds	1
  1435  0000B3                     auto_mount@fmt:
  1436                           	opt stack 0
  1437  0000B3                     next_dir_entry@dj:
  1438                           	opt stack 0
  1439                           
  1440                           ; 2 bytes @ 0x53
  1441  0000B3                     	ds	1
  1442  0000B4                     auto_mount@stat:
  1443                           	opt stack 0
  1444  0000B4                     put_cluster@fs:
  1445                           	opt stack 0
  1446                           
  1447                           ; 2 bytes @ 0x54
  1448  0000B4                     	ds	1
  1449  0000B5                     ??_next_dir_entry:
  1450  0000B5                     auto_mount@fatsize:
  1451                           	opt stack 0
  1452                           
  1453                           ; 4 bytes @ 0x55
  1454  0000B5                     	ds	1
  1455  0000B6                     ?_create_chain:
  1456                           	opt stack 0
  1457  0000B6                     remove_chain@clust:
  1458                           	opt stack 0
  1459  0000B6                     create_chain@clust:
  1460                           	opt stack 0
  1461                           
  1462                           ; 2 bytes @ 0x56
  1463  0000B6                     	ds	2
  1464  0000B8                     
  1465                           ; 1 bytes @ 0x58
  1466  0000B8                     	ds	1
  1467  0000B9                     auto_mount@fs:
  1468                           	opt stack 0
  1469                           
  1470                           ; 2 bytes @ 0x59
  1471  0000B9                     	ds	1
  1472  0000BA                     remove_chain@nxt:
  1473                           	opt stack 0
  1474  0000BA                     create_chain@mcl:
  1475                           	opt stack 0
  1476                           
  1477                           ; 2 bytes @ 0x5A
  1478  0000BA                     	ds	2
  1479  0000BC                     remove_chain@fs:
  1480                           	opt stack 0
  1481  0000BC                     create_chain@fs:
  1482                           	opt stack 0
  1483  0000BC                     next_dir_entry@clust:
  1484                           	opt stack 0
  1485                           
  1486                           ; 2 bytes @ 0x5C
  1487  0000BC                     	ds	2
  1488  0000BE                     create_chain@cstat:
  1489                           	opt stack 0
  1490  0000BE                     next_dir_entry@idx:
  1491                           	opt stack 0
  1492                           
  1493                           ; 2 bytes @ 0x5E
  1494  0000BE                     	ds	2
  1495  0000C0                     create_chain@scl:
  1496                           	opt stack 0
  1497  0000C0                     trace_path@dj:
  1498                           	opt stack 0
  1499                           
  1500                           ; 2 bytes @ 0x60
  1501  0000C0                     	ds	2
  1502  0000C2                     create_chain@ncl:
  1503                           	opt stack 0
  1504  0000C2                     trace_path@fn:
  1505                           	opt stack 0
  1506                           
  1507                           ; 2 bytes @ 0x62
  1508  0000C2                     	ds	2
  1509  0000C4                     trace_path@path:
  1510                           	opt stack 0
  1511  0000C4                     reserve_direntry@dj:
  1512                           	opt stack 0
  1513  0000C4                     f_write@fp:
  1514                           	opt stack 0
  1515  0000C4                     f_lseek@fp:
  1516                           	opt stack 0
  1517                           
  1518                           ; 2 bytes @ 0x64
  1519  0000C4                     	ds	2
  1520  0000C6                     trace_path@dir:
  1521                           	opt stack 0
  1522  0000C6                     reserve_direntry@dir:
  1523                           	opt stack 0
  1524  0000C6                     f_write@buff:
  1525                           	opt stack 0
  1526  0000C6                     f_lseek@ofs:
  1527                           	opt stack 0
  1528                           
  1529                           ; 4 bytes @ 0x66
  1530  0000C6                     	ds	2
  1531  0000C8                     ??_trace_path:
  1532  0000C8                     ??_reserve_direntry:
  1533  0000C8                     f_write@btw:
  1534                           	opt stack 0
  1535                           
  1536                           ; 2 bytes @ 0x68
  1537  0000C8                     	ds	2
  1538  0000CA                     ??_f_lseek:
  1539  0000CA                     f_write@bw:
  1540                           	opt stack 0
  1541  0000CA                     reserve_direntry@sector:
  1542                           	opt stack 0
  1543                           
  1544                           ; 4 bytes @ 0x6A
  1545  0000CA                     	ds	2
  1546  0000CC                     ??_f_write:
  1547  0000CC                     _trace_path$1963:
  1548                           	opt stack 0
  1549                           
  1550                           ; 2 bytes @ 0x6C
  1551  0000CC                     	ds	2
  1552  0000CE                     reserve_direntry@n:
  1553                           	opt stack 0
  1554  0000CE                     _trace_path$1965:
  1555                           	opt stack 0
  1556                           
  1557                           ; 2 bytes @ 0x6E
  1558  0000CE                     	ds	1
  1559  0000CF                     reserve_direntry@dptr:
  1560                           	opt stack 0
  1561                           
  1562                           ; 2 bytes @ 0x6F
  1563  0000CF                     	ds	1
  1564  0000D0                     trace_path@fs:
  1565                           	opt stack 0
  1566                           
  1567                           ; 2 bytes @ 0x70
  1568  0000D0                     	ds	1
  1569  0000D1                     reserve_direntry@c:
  1570                           	opt stack 0
  1571                           
  1572                           ; 1 bytes @ 0x71
  1573  0000D1                     	ds	1
  1574  0000D2                     trace_path@clust:
  1575                           	opt stack 0
  1576  0000D2                     reserve_direntry@clust:
  1577                           	opt stack 0
  1578                           
  1579                           ; 2 bytes @ 0x72
  1580  0000D2                     	ds	2
  1581  0000D4                     trace_path@ds:
  1582                           	opt stack 0
  1583  0000D4                     reserve_direntry@fs:
  1584                           	opt stack 0
  1585                           
  1586                           ; 2 bytes @ 0x74
  1587  0000D4                     	ds	1
  1588  0000D5                     trace_path@dptr:
  1589                           	opt stack 0
  1590                           
  1591                           ; 2 bytes @ 0x75
  1592  0000D5                     	ds	1
  1593  0000D6                     f_lseek@res:
  1594                           	opt stack 0
  1595                           
  1596                           ; 1 bytes @ 0x76
  1597  0000D6                     	ds	1
  1598  0000D7                     f_open@fp:
  1599                           	opt stack 0
  1600  0000D7                     f_lseek@ifptr:
  1601                           	opt stack 0
  1602                           
  1603                           ; 4 bytes @ 0x77
  1604  0000D7                     	ds	1
  1605  0000D8                     f_write@res:
  1606                           	opt stack 0
  1607                           
  1608                           ; 1 bytes @ 0x78
  1609  0000D8                     	ds	1
  1610  0000D9                     f_open@path:
  1611                           	opt stack 0
  1612  0000D9                     f_write@wbuff:
  1613                           	opt stack 0
  1614                           
  1615                           ; 2 bytes @ 0x79
  1616  0000D9                     	ds	2
  1617  0000DB                     f_open@mode:
  1618                           	opt stack 0
  1619  0000DB                     f_write@sect:
  1620                           	opt stack 0
  1621  0000DB                     f_lseek@csize:
  1622                           	opt stack 0
  1623                           
  1624                           ; 4 bytes @ 0x7B
  1625  0000DB                     	ds	1
  1626  0000DC                     ??_f_open:
  1627                           
  1628                           ; 1 bytes @ 0x7C
  1629  0000DC                     	ds	3
  1630  0000DF                     f_write@cc:
  1631                           	opt stack 0
  1632  0000DF                     f_lseek@clust:
  1633                           	opt stack 0
  1634                           
  1635                           ; 2 bytes @ 0x7F
  1636  0000DF                     	ds	2
  1637  0000E1                     f_write@clust:
  1638                           	opt stack 0
  1639                           
  1640                           ; 2 bytes @ 0x81
  1641  0000E1                     	ds	2
  1642  0000E3                     f_write@wcnt:
  1643                           	opt stack 0
  1644                           
  1645                           ; 2 bytes @ 0x83
  1646  0000E3                     	ds	2
  1647  0000E5                     ?_fputc:
  1648                           	opt stack 0
  1649  0000E5                     fputc@chr:
  1650                           	opt stack 0
  1651                           
  1652                           ; 2 bytes @ 0x85
  1653  0000E5                     	ds	2
  1654  0000E7                     fputc@fil:
  1655                           	opt stack 0
  1656                           
  1657                           ; 2 bytes @ 0x87
  1658  0000E7                     	ds	2
  1659  0000E9                     fputc@c:
  1660                           	opt stack 0
  1661                           
  1662                           ; 1 bytes @ 0x89
  1663  0000E9                     	ds	1
  1664  0000EA                     fputc@bw:
  1665                           	opt stack 0
  1666                           
  1667                           ; 2 bytes @ 0x8A
  1668  0000EA                     	ds	2
  1669  0000EC                     tblptru	equ	0xFF8
  1670                           tblptrh	equ	0xFF7
  1671                           tblptrl	equ	0xFF6
  1672                           tablat	equ	0xFF5
  1673                           postinc0	equ	0xFEE
  1674                           wreg	equ	0xFE8
  1675                           postdec1	equ	0xFE5
  1676                           fsr1h	equ	0xFE2
  1677                           fsr1l	equ	0xFE1
  1678                           
  1679                           ; 1 bytes @ 0x8C
  1680                           
  1681                           	psect	cstackCOMRAM
  1682  000001                     __pcstackCOMRAM:
  1683                           	opt stack 0
  1684  000001                     ?_strcmp:
  1685                           	opt stack 0
  1686  000001                     stringcpy@str1:
  1687                           	opt stack 0
  1688  000001                     strcmp@s1:
  1689                           	opt stack 0
  1690  000001                     i2write_timer_zero@timer0:
  1691                           	opt stack 0
  1692                           
  1693                           ; 2 bytes @ 0x0
  1694  000001                     	ds	2
  1695  000003                     stringcpy@str2:
  1696                           	opt stack 0
  1697  000003                     strcmp@s2:
  1698                           	opt stack 0
  1699  000003                     i2write_timer_zero@timer:
  1700                           	opt stack 0
  1701                           
  1702                           ; 2 bytes @ 0x2
  1703  000003                     	ds	2
  1704  000005                     ??_strcmp:
  1705  000005                     stringcpy@dir:
  1706                           	opt stack 0
  1707                           
  1708                           ; 2 bytes @ 0x4
  1709  000005                     	ds	1
  1710  000006                     strcmp@r:
  1711                           	opt stack 0
  1712                           
  1713                           ; 1 bytes @ 0x5
  1714  000006                     	ds	1
  1715  000007                     ??_stringcpy:
  1716                           
  1717                           ; 1 bytes @ 0x6
  1718  000007                     	ds	2
  1719  000009                     stringcpy@chr:
  1720                           	opt stack 0
  1721                           
  1722                           ; 1 bytes @ 0x8
  1723  000009                     	ds	1
  1724  00000A                     GPSRead@buff:
  1725                           	opt stack 0
  1726                           
  1727                           ; 1 bytes @ 0x9
  1728  00000A                     	ds	1
  1729  00000B                     GPSRead@c:
  1730                           	opt stack 0
  1731                           
  1732                           ; 1 bytes @ 0xA
  1733  00000B                     	ds	1
  1734  00000C                     ??_isr:
  1735                           
  1736                           ; 1 bytes @ 0xB
  1737  00000C                     	ds	20
  1738  000020                     isr@cont:
  1739                           	opt stack 0
  1740                           
  1741                           ; 1 bytes @ 0x1F
  1742  000020                     	ds	1
  1743                           tblptru	equ	0xFF8
  1744                           tblptrh	equ	0xFF7
  1745                           tblptrl	equ	0xFF6
  1746                           tablat	equ	0xFF5
  1747                           postinc0	equ	0xFEE
  1748                           wreg	equ	0xFE8
  1749                           postdec1	equ	0xFE5
  1750                           fsr1h	equ	0xFE2
  1751                           fsr1l	equ	0xFE1
  1752                           
  1753 ;;
  1754 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1755 ;;
  1756 ;; *************** function _main *****************
  1757 ;; Defined at:
  1758 ;;		line 197 in file "main.c"
  1759 ;; Parameters:    Size  Location     Type
  1760 ;;		None
  1761 ;; Auto vars:     Size  Location     Type
  1762 ;;		None
  1763 ;; Return value:  Size  Location     Type
  1764 ;;                  1    wreg      void 
  1765 ;; Registers used:
  1766 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  1767 ;; Tracked objects:
  1768 ;;		On entry : 0/0
  1769 ;;		On exit  : 0/0
  1770 ;;		Unchanged: 0/0
  1771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1772 ;;      Params:         0       0       0       0       0       0       0       0       0
  1773 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1774 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1775 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1776 ;;Total ram usage:        0 bytes
  1777 ;; Hardware stack levels required when called:   17
  1778 ;; This function calls:
  1779 ;;		_dados_gps_to_sd
  1780 ;;		_escalonador
  1781 ;;		_inicializa_tarefas
  1782 ;;		_inicializa_uart
  1783 ;;		_init_hardware
  1784 ;;		_init_lcd
  1785 ;;		_mensagem_inicial
  1786 ;; This function is called by:
  1787 ;;		Startup code after reset
  1788 ;; This function uses a non-reentrant model
  1789 ;;
  1790                           
  1791                           	psect	text0
  1792  005078                     __ptext0:
  1793                           	opt stack 0
  1794  005078                     _main:
  1795                           	opt stack 14
  1796                           
  1797                           ;main.c: 199: init_hardware();
  1798                           
  1799                           ;incstack = 0
  1800  005078  EC01  F029         	call	_init_hardware	;wreg free
  1801                           
  1802                           ;main.c: 200: T0CONbits.TMR0ON = 0;
  1803  00507C  9ED5               	bcf	4053,7,c	;volatile
  1804                           
  1805                           ;main.c: 201: init_lcd();
  1806  00507E  ECE5  F021         	call	_init_lcd	;wreg free
  1807                           
  1808                           ;main.c: 202: mensagem_inicial();
  1809  005082  EC50  F023         	call	_mensagem_inicial	;wreg free
  1810                           
  1811                           ;main.c: 203: inicializa_tarefas();
  1812  005086  EC0C  F028         	call	_inicializa_tarefas	;wreg free
  1813                           
  1814                           ;main.c: 204: inicializa_uart();
  1815  00508A  ECA8  F028         	call	_inicializa_uart	;wreg free
  1816                           
  1817                           ;main.c: 205: T0CONbits.TMR0ON = 1;
  1818  00508E  8ED5               	bsf	4053,7,c	;volatile
  1819  005090                     
  1820                           ;main.c: 207: {
  1821                           ;main.c: 209: if ((sinaliza_int_timer == 1) && (2))
  1822  005090  0100               	movlb	0	; () banked
  1823  005092  05F8               	decf	_sinaliza_int_timer& (0+255),w,b
  1824  005094  A4D8               	btfss	status,2,c
  1825  005096  D004               	goto	l90
  1826                           
  1827                           ; BSR set to: 0
  1828                           ;main.c: 210: {
  1829                           ;main.c: 211: sinaliza_int_timer = 0;
  1830  005098  0E00               	movlw	0
  1831  00509A  6FF8               	movwf	_sinaliza_int_timer& (0+255),b
  1832                           
  1833                           ; BSR set to: 0
  1834                           ;main.c: 212: escalonador();
  1835  00509C  ECEF  F020         	call	_escalonador	;wreg free
  1836  0050A0                     l90:
  1837                           
  1838                           ;main.c: 213: }
  1839                           ;main.c: 214: dados_gps_to_sd();
  1840  0050A0  EC71  F027         	call	_dados_gps_to_sd	;wreg free
  1841  0050A4  D7F5               	goto	l89
  1842  0050A6                     __end_of_main:
  1843                           	opt stack 0
  1844                           tblptru	equ	0xFF8
  1845                           tblptrh	equ	0xFF7
  1846                           tblptrl	equ	0xFF6
  1847                           tablat	equ	0xFF5
  1848                           postinc0	equ	0xFEE
  1849                           wreg	equ	0xFE8
  1850                           postdec1	equ	0xFE5
  1851                           fsr1h	equ	0xFE2
  1852                           fsr1l	equ	0xFE1
  1853                           status	equ	0xFD8
  1854                           
  1855 ;; *************** function _mensagem_inicial *****************
  1856 ;; Defined at:
  1857 ;;		line 224 in file "main.c"
  1858 ;; Parameters:    Size  Location     Type
  1859 ;;		None
  1860 ;; Auto vars:     Size  Location     Type
  1861 ;;  msg_dois       17   25[BANK0 ] const unsigned char [17]
  1862 ;;  msg_linha_um   17    8[BANK0 ] const unsigned char [17]
  1863 ;; Return value:  Size  Location     Type
  1864 ;;                  1    wreg      void 
  1865 ;; Registers used:
  1866 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1867 ;; Tracked objects:
  1868 ;;		On entry : 0/0
  1869 ;;		On exit  : 0/0
  1870 ;;		Unchanged: 0/0
  1871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1872 ;;      Params:         0       0       0       0       0       0       0       0       0
  1873 ;;      Locals:         0      34       0       0       0       0       0       0       0
  1874 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1875 ;;      Totals:         0      36       0       0       0       0       0       0       0
  1876 ;;Total ram usage:       36 bytes
  1877 ;; Hardware stack levels used:    1
  1878 ;; Hardware stack levels required when called:    6
  1879 ;; This function calls:
  1880 ;;		_escreve_cmd_lcd
  1881 ;;		_escreve_frase_ram_lcd
  1882 ;;		_posicao_cursor_lcd
  1883 ;; This function is called by:
  1884 ;;		_main
  1885 ;; This function uses a non-reentrant model
  1886 ;;
  1887                           
  1888                           	psect	text1
  1889  0046A0                     __ptext1:
  1890                           	opt stack 0
  1891  0046A0                     _mensagem_inicial:
  1892                           	opt stack 24
  1893                           
  1894                           ;main.c: 226: const unsigned char msg_linha_um[17] = "FATEC ST ANDRE";
  1895                           
  1896                           ;incstack = 0
  1897  0046A0  0E12               	movlw	low mensagem_inicial@F4119
  1898  0046A2  6EF6               	movwf	tblptrl,c
  1899  0046A4                     	if	1	;There is more than 1 active tblptr byte
  1900  0046A4  0E08               	movlw	high mensagem_inicial@F4119
  1901  0046A6  6EF7               	movwf	tblptrh,c
  1902  0046A8                     	endif
  1903  0046A8                     	if	0	;There are less than 3 active tblptr bytes
  1904  0046A8                     	endif
  1905  0046A8  EE20  F068         	lfsr	2,mensagem_inicial@msg_linha_um
  1906  0046AC  0E10               	movlw	16
  1907  0046AE                     u13620:
  1908  0046AE  0009               	tblrd		*+
  1909  0046B0  CFF5 FFDE          	movff	tablat,postinc2
  1910  0046B4  06E8               	decf	wreg,f,c
  1911  0046B6  E2FB               	bc	u13620
  1912                           
  1913                           ;main.c: 227: const unsigned char msg_dois[17] = "TCC--TELEMTRIA";
  1914  0046B8  0E01               	movlw	low mensagem_inicial@F4121
  1915  0046BA  6EF6               	movwf	tblptrl,c
  1916  0046BC                     	if	1	;There is more than 1 active tblptr byte
  1917  0046BC  0E08               	movlw	high mensagem_inicial@F4121
  1918  0046BE  6EF7               	movwf	tblptrh,c
  1919  0046C0                     	endif
  1920  0046C0                     	if	0	;There are less than 3 active tblptr bytes
  1921  0046C0                     	endif
  1922  0046C0  EE20  F079         	lfsr	2,mensagem_inicial@msg_dois
  1923  0046C4  0E10               	movlw	16
  1924  0046C6                     u13630:
  1925  0046C6  0009               	tblrd		*+
  1926  0046C8  CFF5 FFDE          	movff	tablat,postinc2
  1927  0046CC  06E8               	decf	wreg,f,c
  1928  0046CE  E2FB               	bc	u13630
  1929                           
  1930                           ;main.c: 229: posicao_cursor_lcd(1,0);
  1931  0046D0  0E00               	movlw	0
  1932  0046D2  0100               	movlb	0	; () banked
  1933  0046D4  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  1934  0046D6  0E01               	movlw	1
  1935  0046D8  ECD5  F023         	call	_posicao_cursor_lcd
  1936                           
  1937                           ;main.c: 230: escreve_frase_ram_lcd(msg_linha_um);
  1938  0046DC  0E68               	movlw	low mensagem_inicial@msg_linha_um
  1939  0046DE  0100               	movlb	0	; () banked
  1940  0046E0  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  1941  0046E2  0E00               	movlw	high mensagem_inicial@msg_linha_um
  1942  0046E4  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  1943  0046E6  EC02  F026         	call	_escreve_frase_ram_lcd	;wreg free
  1944                           
  1945                           ;main.c: 232: posicao_cursor_lcd(2,0);
  1946  0046EA  0E00               	movlw	0
  1947  0046EC  0100               	movlb	0	; () banked
  1948  0046EE  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  1949  0046F0  0E02               	movlw	2
  1950  0046F2  ECD5  F023         	call	_posicao_cursor_lcd
  1951                           
  1952                           ;main.c: 233: escreve_frase_ram_lcd(msg_dois);
  1953  0046F6  0E79               	movlw	low mensagem_inicial@msg_dois
  1954  0046F8  0100               	movlb	0	; () banked
  1955  0046FA  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  1956  0046FC  0E00               	movlw	high mensagem_inicial@msg_dois
  1957  0046FE  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  1958  004700  EC02  F026         	call	_escreve_frase_ram_lcd	;wreg free
  1959                           
  1960                           ;main.c: 234: _delay((unsigned long)((1000)*(48000000/4000.0)));
  1961  004704  0E3D               	movlw	61
  1962  004706  0100               	movlb	0	; () banked
  1963  004708  6F67               	movwf	(??_mensagem_inicial+1)& (0+255),b
  1964  00470A  0EE1               	movlw	225
  1965  00470C  6F66               	movwf	??_mensagem_inicial& (0+255),b
  1966  00470E  0E3F               	movlw	63
  1967  004710                     u14217:
  1968  004710  2EE8               	decfsz	wreg,f,c
  1969  004712  D7FE               	bra	u14217
  1970  004714  2F66               	decfsz	??_mensagem_inicial& (0+255),f,b
  1971  004716  D7FC               	bra	u14217
  1972  004718  2F67               	decfsz	(??_mensagem_inicial+1)& (0+255),f,b
  1973  00471A  D7FA               	bra	u14217
  1974  00471C  D000               	nop2	
  1975                           
  1976                           ;main.c: 235: escreve_cmd_lcd(0b00000001);
  1977  00471E  0E01               	movlw	1
  1978  004720  EC34  F022         	call	_escreve_cmd_lcd
  1979  004724  0012               	return		;funcret
  1980  004726                     __end_of_mensagem_inicial:
  1981                           	opt stack 0
  1982                           tblptru	equ	0xFF8
  1983                           tblptrh	equ	0xFF7
  1984                           tblptrl	equ	0xFF6
  1985                           tablat	equ	0xFF5
  1986                           postinc0	equ	0xFEE
  1987                           wreg	equ	0xFE8
  1988                           postdec1	equ	0xFE5
  1989                           fsr1h	equ	0xFE2
  1990                           fsr1l	equ	0xFE1
  1991                           postinc2	equ	0xFDE
  1992                           status	equ	0xFD8
  1993                           
  1994 ;; *************** function _init_lcd *****************
  1995 ;; Defined at:
  1996 ;;		line 71 in file "bibliotecas/display_lcd.c"
  1997 ;; Parameters:    Size  Location     Type
  1998 ;;		None
  1999 ;; Auto vars:     Size  Location     Type
  2000 ;;		None
  2001 ;; Return value:  Size  Location     Type
  2002 ;;                  1    wreg      void 
  2003 ;; Registers used:
  2004 ;;		wreg, status,2, status,0, cstack
  2005 ;; Tracked objects:
  2006 ;;		On entry : 0/0
  2007 ;;		On exit  : 0/0
  2008 ;;		Unchanged: 0/0
  2009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2010 ;;      Params:         0       0       0       0       0       0       0       0       0
  2011 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2012 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2013 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2014 ;;Total ram usage:        1 bytes
  2015 ;; Hardware stack levels used:    1
  2016 ;; Hardware stack levels required when called:    5
  2017 ;; This function calls:
  2018 ;;		_delay
  2019 ;;		_escreve_cmd_lcd
  2020 ;; This function is called by:
  2021 ;;		_main
  2022 ;; This function uses a non-reentrant model
  2023 ;;
  2024                           
  2025                           	psect	text2
  2026  0043CA                     __ptext2:
  2027                           	opt stack 0
  2028  0043CA                     _init_lcd:
  2029                           	opt stack 25
  2030                           
  2031                           ;display_lcd.c: 74: TRISDbits.RD2 = 0;
  2032                           
  2033                           ;incstack = 0
  2034  0043CA  9495               	bcf	3989,2,c	;volatile
  2035                           
  2036                           ;display_lcd.c: 75: TRISDbits.RD1 = 0;
  2037  0043CC  9295               	bcf	3989,1,c	;volatile
  2038                           
  2039                           ;display_lcd.c: 76: TRISDbits.RD0 = 0;
  2040  0043CE  9095               	bcf	3989,0,c	;volatile
  2041                           
  2042                           ;display_lcd.c: 79: TRISDbits.RD4=0;
  2043  0043D0  9895               	bcf	3989,4,c	;volatile
  2044                           
  2045                           ;display_lcd.c: 80: TRISDbits.RD5=0;
  2046  0043D2  9A95               	bcf	3989,5,c	;volatile
  2047                           
  2048                           ;display_lcd.c: 81: TRISDbits.RD6=0;
  2049  0043D4  9C95               	bcf	3989,6,c	;volatile
  2050                           
  2051                           ;display_lcd.c: 82: TRISDbits.RD7=0;
  2052  0043D6  9E95               	bcf	3989,7,c	;volatile
  2053                           
  2054                           ;display_lcd.c: 89: PORTDbits.RD2 = 0;
  2055  0043D8  9483               	bcf	3971,2,c	;volatile
  2056                           
  2057                           ;display_lcd.c: 90: PORTDbits.RD1 = 0;
  2058  0043DA  9283               	bcf	3971,1,c	;volatile
  2059                           
  2060                           ;display_lcd.c: 91: PORTDbits.RD0 = 0;
  2061  0043DC  9083               	bcf	3971,0,c	;volatile
  2062                           
  2063                           ;display_lcd.c: 95: PORTDbits.RD7=0;
  2064  0043DE  9E83               	bcf	3971,7,c	;volatile
  2065                           
  2066                           ;display_lcd.c: 96: PORTDbits.RD6=0;
  2067  0043E0  9C83               	bcf	3971,6,c	;volatile
  2068                           
  2069                           ;display_lcd.c: 97: PORTDbits.RD5=1;
  2070  0043E2  8A83               	bsf	3971,5,c	;volatile
  2071                           
  2072                           ;display_lcd.c: 98: PORTDbits.RD4=1;
  2073  0043E4  8883               	bsf	3971,4,c	;volatile
  2074                           
  2075                           ;display_lcd.c: 103: _delay((unsigned long)((15)*(48000000/4000.0)));
  2076  0043E6  0EEA               	movlw	234
  2077  0043E8  0100               	movlb	0	; () banked
  2078  0043EA  6F63               	movwf	??_init_lcd& (0+255),b
  2079  0043EC  0EC3               	movlw	195
  2080  0043EE                     u14227:
  2081  0043EE  2EE8               	decfsz	wreg,f,c
  2082  0043F0  D7FE               	bra	u14227
  2083  0043F2  2F63               	decfsz	??_init_lcd& (0+255),f,b
  2084  0043F4  D7FC               	bra	u14227
  2085                           
  2086                           ;display_lcd.c: 107: PORTDbits.RD0 = 1;
  2087  0043F6  8083               	bsf	3971,0,c	;volatile
  2088                           
  2089                           ;display_lcd.c: 108: delay();
  2090  0043F8  EC7F  F028         	call	_delay	;wreg free
  2091                           
  2092                           ;display_lcd.c: 109: PORTDbits.RD0 = 0;
  2093  0043FC  9083               	bcf	3971,0,c	;volatile
  2094                           
  2095                           ;display_lcd.c: 110: delay();
  2096  0043FE  EC7F  F028         	call	_delay	;wreg free
  2097                           
  2098                           ;display_lcd.c: 115: _delay((unsigned long)((5)*(48000000/4000.0)));
  2099  004402  0E4E               	movlw	78
  2100  004404  0100               	movlb	0	; () banked
  2101  004406  6F63               	movwf	??_init_lcd& (0+255),b
  2102  004408  0EEB               	movlw	235
  2103  00440A                     u14237:
  2104  00440A  2EE8               	decfsz	wreg,f,c
  2105  00440C  D7FE               	bra	u14237
  2106  00440E  2F63               	decfsz	??_init_lcd& (0+255),f,b
  2107  004410  D7FC               	bra	u14237
  2108                           
  2109                           ;display_lcd.c: 118: PORTDbits.RD0 = 1;
  2110  004412  8083               	bsf	3971,0,c	;volatile
  2111                           
  2112                           ;display_lcd.c: 119: delay();
  2113  004414  EC7F  F028         	call	_delay	;wreg free
  2114                           
  2115                           ;display_lcd.c: 120: PORTDbits.RD0 = 0;
  2116  004418  9083               	bcf	3971,0,c	;volatile
  2117                           
  2118                           ;display_lcd.c: 121: delay();
  2119  00441A  EC7F  F028         	call	_delay	;wreg free
  2120                           
  2121                           ;display_lcd.c: 126: _delay((unsigned long)((5)*(48000000/4000.0)));
  2122  00441E  0E4E               	movlw	78
  2123  004420  0100               	movlb	0	; () banked
  2124  004422  6F63               	movwf	??_init_lcd& (0+255),b
  2125  004424  0EEB               	movlw	235
  2126  004426                     u14247:
  2127  004426  2EE8               	decfsz	wreg,f,c
  2128  004428  D7FE               	bra	u14247
  2129  00442A  2F63               	decfsz	??_init_lcd& (0+255),f,b
  2130  00442C  D7FC               	bra	u14247
  2131                           
  2132                           ;display_lcd.c: 129: PORTDbits.RD0 = 1;
  2133  00442E  8083               	bsf	3971,0,c	;volatile
  2134                           
  2135                           ;display_lcd.c: 130: delay();
  2136  004430  EC7F  F028         	call	_delay	;wreg free
  2137                           
  2138                           ;display_lcd.c: 131: PORTDbits.RD0 = 0;
  2139  004434  9083               	bcf	3971,0,c	;volatile
  2140                           
  2141                           ;display_lcd.c: 132: delay();
  2142  004436  EC7F  F028         	call	_delay	;wreg free
  2143                           
  2144                           ;display_lcd.c: 135: PORTDbits.RD7=0;
  2145  00443A  9E83               	bcf	3971,7,c	;volatile
  2146                           
  2147                           ;display_lcd.c: 136: PORTDbits.RD6=0;
  2148  00443C  9C83               	bcf	3971,6,c	;volatile
  2149                           
  2150                           ;display_lcd.c: 137: PORTDbits.RD5=1;
  2151  00443E  8A83               	bsf	3971,5,c	;volatile
  2152                           
  2153                           ;display_lcd.c: 138: PORTDbits.RD4=0;
  2154  004440  9883               	bcf	3971,4,c	;volatile
  2155                           
  2156                           ;display_lcd.c: 142: PORTDbits.RD0 = 1;
  2157  004442  8083               	bsf	3971,0,c	;volatile
  2158                           
  2159                           ;display_lcd.c: 143: delay();
  2160  004444  EC7F  F028         	call	_delay	;wreg free
  2161                           
  2162                           ;display_lcd.c: 144: PORTDbits.RD0 = 0;
  2163  004448  9083               	bcf	3971,0,c	;volatile
  2164                           
  2165                           ;display_lcd.c: 145: delay();
  2166  00444A  EC7F  F028         	call	_delay	;wreg free
  2167                           
  2168                           ;display_lcd.c: 149: escreve_cmd_lcd(0b00101000);
  2169  00444E  0E28               	movlw	40
  2170  004450  EC34  F022         	call	_escreve_cmd_lcd
  2171                           
  2172                           ;display_lcd.c: 150: escreve_cmd_lcd(0b00000110);
  2173  004454  0E06               	movlw	6
  2174  004456  EC34  F022         	call	_escreve_cmd_lcd
  2175                           
  2176                           ;display_lcd.c: 151: escreve_cmd_lcd(0b00001110);
  2177  00445A  0E0E               	movlw	14
  2178  00445C  EC34  F022         	call	_escreve_cmd_lcd
  2179                           
  2180                           ;display_lcd.c: 152: escreve_cmd_lcd(0b00000001);
  2181  004460  0E01               	movlw	1
  2182  004462  EC34  F022         	call	_escreve_cmd_lcd
  2183  004466  0012               	return		;funcret
  2184  004468                     __end_of_init_lcd:
  2185                           	opt stack 0
  2186                           tblptru	equ	0xFF8
  2187                           tblptrh	equ	0xFF7
  2188                           tblptrl	equ	0xFF6
  2189                           tablat	equ	0xFF5
  2190                           postinc0	equ	0xFEE
  2191                           wreg	equ	0xFE8
  2192                           postdec1	equ	0xFE5
  2193                           fsr1h	equ	0xFE2
  2194                           fsr1l	equ	0xFE1
  2195                           postinc2	equ	0xFDE
  2196                           status	equ	0xFD8
  2197                           
  2198 ;; *************** function _escreve_cmd_lcd *****************
  2199 ;; Defined at:
  2200 ;;		line 162 in file "bibliotecas/display_lcd.c"
  2201 ;; Parameters:    Size  Location     Type
  2202 ;;  comando         1    wreg     unsigned char 
  2203 ;; Auto vars:     Size  Location     Type
  2204 ;;  comando         1    2[BANK0 ] unsigned char 
  2205 ;; Return value:  Size  Location     Type
  2206 ;;                  1    wreg      void 
  2207 ;; Registers used:
  2208 ;;		wreg, status,2, status,0, cstack
  2209 ;; Tracked objects:
  2210 ;;		On entry : 0/0
  2211 ;;		On exit  : 0/0
  2212 ;;		Unchanged: 0/0
  2213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2214 ;;      Params:         0       0       0       0       0       0       0       0       0
  2215 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2216 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2217 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2218 ;;Total ram usage:        1 bytes
  2219 ;; Hardware stack levels used:    1
  2220 ;; Hardware stack levels required when called:    4
  2221 ;; This function calls:
  2222 ;;		_delay
  2223 ;; This function is called by:
  2224 ;;		_mensagem_inicial
  2225 ;;		_init_lcd
  2226 ;;		_cria_caractere_lcd
  2227 ;; This function uses a non-reentrant model
  2228 ;;
  2229                           
  2230                           	psect	text3
  2231  004468                     __ptext3:
  2232                           	opt stack 0
  2233  004468                     _escreve_cmd_lcd:
  2234                           	opt stack 25
  2235                           
  2236                           ;incstack = 0
  2237                           ;escreve_cmd_lcd@comando stored from wreg
  2238  004468  0100               	movlb	0	; () banked
  2239  00446A  6F62               	movwf	escreve_cmd_lcd@comando& (0+255),b
  2240                           
  2241                           ;display_lcd.c: 165: PORTDbits.RD2 = 0;
  2242  00446C  9483               	bcf	3971,2,c	;volatile
  2243                           
  2244                           ;display_lcd.c: 166: PORTDbits.RD1 = 0;
  2245  00446E  9283               	bcf	3971,1,c	;volatile
  2246                           
  2247                           ;display_lcd.c: 167: PORTDbits.RD0 = 0;
  2248  004470  9083               	bcf	3971,0,c	;volatile
  2249                           
  2250                           ;display_lcd.c: 170: if(comando&0b00010000){PORTDbits.RD4=1;}
  2251  004472  0100               	movlb	0	; () banked
  2252  004474  A962               	btfss	escreve_cmd_lcd@comando& (0+255),4,b
  2253  004476  D002               	goto	l510
  2254                           
  2255                           ; BSR set to: 0
  2256  004478  8883               	bsf	3971,4,c	;volatile
  2257  00447A  D001               	goto	l511
  2258  00447C                     l510:
  2259                           
  2260                           ; BSR set to: 0
  2261                           ;display_lcd.c: 171: else {PORTDbits.RD4=0;}
  2262  00447C  9883               	bcf	3971,4,c	;volatile
  2263  00447E                     l511:
  2264                           
  2265                           ; BSR set to: 0
  2266                           ;display_lcd.c: 172: if(comando&0b00100000){PORTDbits.RD5=1;}
  2267                           
  2268                           ; BSR set to: 0
  2269  00447E  AB62               	btfss	escreve_cmd_lcd@comando& (0+255),5,b
  2270  004480  D002               	goto	l512
  2271                           
  2272                           ; BSR set to: 0
  2273  004482  8A83               	bsf	3971,5,c	;volatile
  2274  004484  D001               	goto	l513
  2275  004486                     l512:
  2276                           
  2277                           ; BSR set to: 0
  2278                           ;display_lcd.c: 173: else {PORTDbits.RD5=0;}
  2279  004486  9A83               	bcf	3971,5,c	;volatile
  2280  004488                     l513:
  2281                           
  2282                           ; BSR set to: 0
  2283                           ;display_lcd.c: 174: if(comando&0b01000000){PORTDbits.RD6=1;}
  2284                           
  2285                           ; BSR set to: 0
  2286  004488  AD62               	btfss	escreve_cmd_lcd@comando& (0+255),6,b
  2287  00448A  D002               	goto	l514
  2288                           
  2289                           ; BSR set to: 0
  2290  00448C  8C83               	bsf	3971,6,c	;volatile
  2291  00448E  D001               	goto	l515
  2292  004490                     l514:
  2293                           
  2294                           ; BSR set to: 0
  2295                           ;display_lcd.c: 175: else {PORTDbits.RD6=0;}
  2296  004490  9C83               	bcf	3971,6,c	;volatile
  2297  004492                     l515:
  2298                           
  2299                           ; BSR set to: 0
  2300                           ;display_lcd.c: 176: if(comando&0b10000000){PORTDbits.RD7=1;}
  2301                           
  2302                           ; BSR set to: 0
  2303  004492  AF62               	btfss	escreve_cmd_lcd@comando& (0+255),7,b
  2304  004494  D002               	goto	l516
  2305                           
  2306                           ; BSR set to: 0
  2307  004496  8E83               	bsf	3971,7,c	;volatile
  2308  004498  D001               	goto	l517
  2309  00449A                     l516:
  2310                           
  2311                           ; BSR set to: 0
  2312                           ;display_lcd.c: 177: else {PORTDbits.RD7=0;}
  2313  00449A  9E83               	bcf	3971,7,c	;volatile
  2314  00449C                     l517:
  2315                           
  2316                           ; BSR set to: 0
  2317                           ;display_lcd.c: 180: PORTDbits.RD0 = 1;
  2318  00449C  8083               	bsf	3971,0,c	;volatile
  2319                           
  2320                           ; BSR set to: 0
  2321                           ;display_lcd.c: 181: delay();
  2322  00449E  EC7F  F028         	call	_delay	;wreg free
  2323                           
  2324                           ;display_lcd.c: 182: PORTDbits.RD0 = 0;
  2325  0044A2  9083               	bcf	3971,0,c	;volatile
  2326                           
  2327                           ;display_lcd.c: 183: delay();
  2328  0044A4  EC7F  F028         	call	_delay	;wreg free
  2329                           
  2330                           ;display_lcd.c: 186: if(comando&0b00000001){PORTDbits.RD4=1;}
  2331  0044A8  0100               	movlb	0	; () banked
  2332  0044AA  A162               	btfss	escreve_cmd_lcd@comando& (0+255),0,b
  2333  0044AC  D002               	goto	l518
  2334                           
  2335                           ; BSR set to: 0
  2336  0044AE  8883               	bsf	3971,4,c	;volatile
  2337  0044B0  D001               	goto	l519
  2338  0044B2                     l518:
  2339                           
  2340                           ; BSR set to: 0
  2341                           ;display_lcd.c: 187: else {PORTDbits.RD4=0;}
  2342  0044B2  9883               	bcf	3971,4,c	;volatile
  2343  0044B4                     l519:
  2344                           
  2345                           ; BSR set to: 0
  2346                           ;display_lcd.c: 188: if(comando&0b00000010){PORTDbits.RD5=1;}
  2347  0044B4  A362               	btfss	escreve_cmd_lcd@comando& (0+255),1,b
  2348  0044B6  D002               	goto	l520
  2349                           
  2350                           ; BSR set to: 0
  2351  0044B8  8A83               	bsf	3971,5,c	;volatile
  2352  0044BA  D001               	goto	l521
  2353  0044BC                     l520:
  2354                           
  2355                           ; BSR set to: 0
  2356                           ;display_lcd.c: 189: else {PORTDbits.RD5=0;}
  2357  0044BC  9A83               	bcf	3971,5,c	;volatile
  2358  0044BE                     l521:
  2359                           
  2360                           ; BSR set to: 0
  2361                           ;display_lcd.c: 190: if(comando&0b00000100){PORTDbits.RD6=1;}
  2362  0044BE  A562               	btfss	escreve_cmd_lcd@comando& (0+255),2,b
  2363  0044C0  D002               	goto	l522
  2364                           
  2365                           ; BSR set to: 0
  2366  0044C2  8C83               	bsf	3971,6,c	;volatile
  2367  0044C4  D001               	goto	l523
  2368  0044C6                     l522:
  2369                           
  2370                           ; BSR set to: 0
  2371                           ;display_lcd.c: 191: else {PORTDbits.RD6=0;}
  2372  0044C6  9C83               	bcf	3971,6,c	;volatile
  2373  0044C8                     l523:
  2374                           
  2375                           ; BSR set to: 0
  2376                           ;display_lcd.c: 192: if(comando&0b00001000){PORTDbits.RD7=1;}
  2377  0044C8  A762               	btfss	escreve_cmd_lcd@comando& (0+255),3,b
  2378  0044CA  D002               	goto	l524
  2379                           
  2380                           ; BSR set to: 0
  2381  0044CC  8E83               	bsf	3971,7,c	;volatile
  2382  0044CE  D001               	goto	l525
  2383  0044D0                     l524:
  2384                           
  2385                           ; BSR set to: 0
  2386                           ;display_lcd.c: 193: else {PORTDbits.RD7=0;}
  2387  0044D0  9E83               	bcf	3971,7,c	;volatile
  2388  0044D2                     l525:
  2389                           
  2390                           ; BSR set to: 0
  2391                           ;display_lcd.c: 196: PORTDbits.RD0 = 1;
  2392  0044D2  8083               	bsf	3971,0,c	;volatile
  2393                           
  2394                           ; BSR set to: 0
  2395                           ;display_lcd.c: 197: delay();
  2396  0044D4  EC7F  F028         	call	_delay	;wreg free
  2397                           
  2398                           ;display_lcd.c: 198: PORTDbits.RD0 = 0;
  2399  0044D8  9083               	bcf	3971,0,c	;volatile
  2400                           
  2401                           ;display_lcd.c: 199: delay();
  2402  0044DA  EC7F  F028         	call	_delay	;wreg free
  2403                           
  2404                           ;display_lcd.c: 204: if (comando==0x01 || comando==0x02 || comando==0x03)
  2405  0044DE  0100               	movlb	0	; () banked
  2406  0044E0  0562               	decf	escreve_cmd_lcd@comando& (0+255),w,b
  2407  0044E2  B4D8               	btfsc	status,2,c
  2408  0044E4  D008               	goto	u13460
  2409                           
  2410                           ; BSR set to: 0
  2411  0044E6  0E02               	movlw	2
  2412  0044E8  1962               	xorwf	escreve_cmd_lcd@comando& (0+255),w,b
  2413  0044EA  B4D8               	btfsc	status,2,c
  2414  0044EC  D004               	goto	u13460
  2415                           
  2416                           ; BSR set to: 0
  2417  0044EE  0E03               	movlw	3
  2418  0044F0  1962               	xorwf	escreve_cmd_lcd@comando& (0+255),w,b
  2419  0044F2  A4D8               	btfss	status,2,c
  2420  0044F4  0012               	return	
  2421  0044F6                     u13460:
  2422                           
  2423                           ; BSR set to: 0
  2424                           ;display_lcd.c: 205: { delay(); }
  2425                           
  2426                           ; BSR set to: 0
  2427  0044F6  EC7F  F028         	call	_delay	;wreg free
  2428  0044FA  0012               	return	
  2429  0044FC                     __end_of_escreve_cmd_lcd:
  2430                           	opt stack 0
  2431                           tblptru	equ	0xFF8
  2432                           tblptrh	equ	0xFF7
  2433                           tblptrl	equ	0xFF6
  2434                           tablat	equ	0xFF5
  2435                           postinc0	equ	0xFEE
  2436                           wreg	equ	0xFE8
  2437                           postdec1	equ	0xFE5
  2438                           fsr1h	equ	0xFE2
  2439                           fsr1l	equ	0xFE1
  2440                           postinc2	equ	0xFDE
  2441                           status	equ	0xFD8
  2442                           
  2443 ;; *************** function _init_hardware *****************
  2444 ;; Defined at:
  2445 ;;		line 55 in file "bibliotecas/hardware.c"
  2446 ;; Parameters:    Size  Location     Type
  2447 ;;		None
  2448 ;; Auto vars:     Size  Location     Type
  2449 ;;		None
  2450 ;; Return value:  Size  Location     Type
  2451 ;;                  1    wreg      void 
  2452 ;; Registers used:
  2453 ;;		wreg, status,2, cstack
  2454 ;; Tracked objects:
  2455 ;;		On entry : 0/0
  2456 ;;		On exit  : 0/0
  2457 ;;		Unchanged: 0/0
  2458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2459 ;;      Params:         0       0       0       0       0       0       0       0       0
  2460 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2461 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2462 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2463 ;;Total ram usage:        0 bytes
  2464 ;; Hardware stack levels used:    1
  2465 ;; Hardware stack levels required when called:    5
  2466 ;; This function calls:
  2467 ;;		_config_timer_dois
  2468 ;;		_config_timer_zero
  2469 ;;		_init_interrupt
  2470 ;;		_init_oscilador
  2471 ;;		_init_ports
  2472 ;; This function is called by:
  2473 ;;		_main
  2474 ;; This function uses a non-reentrant model
  2475 ;;
  2476                           
  2477                           	psect	text4
  2478  005202                     __ptext4:
  2479                           	opt stack 0
  2480  005202                     _init_hardware:
  2481                           	opt stack 25
  2482                           
  2483                           ;hardware.c: 58: init_oscilador();
  2484                           
  2485                           ;incstack = 0
  2486  005202  EC61  F029         	call	_init_oscilador	;wreg free
  2487                           
  2488                           ;hardware.c: 61: init_ports();
  2489  005206  ECD9  F028         	call	_init_ports	;wreg free
  2490                           
  2491                           ;hardware.c: 64: config_timer_zero();
  2492  00520A  ECE7  F028         	call	_config_timer_zero	;wreg free
  2493                           
  2494                           ;hardware.c: 67: config_timer_dois();
  2495  00520E  EC3A  F029         	call	_config_timer_dois	;wreg free
  2496                           
  2497                           ;hardware.c: 70: init_interrupt();
  2498  005212  EC16  F029         	call	_init_interrupt	;wreg free
  2499  005216  0012               	return		;funcret
  2500  005218                     __end_of_init_hardware:
  2501                           	opt stack 0
  2502                           tblptru	equ	0xFF8
  2503                           tblptrh	equ	0xFF7
  2504                           tblptrl	equ	0xFF6
  2505                           tablat	equ	0xFF5
  2506                           postinc0	equ	0xFEE
  2507                           wreg	equ	0xFE8
  2508                           postdec1	equ	0xFE5
  2509                           fsr1h	equ	0xFE2
  2510                           fsr1l	equ	0xFE1
  2511                           postinc2	equ	0xFDE
  2512                           status	equ	0xFD8
  2513                           
  2514 ;; *************** function _init_ports *****************
  2515 ;; Defined at:
  2516 ;;		line 154 in file "bibliotecas/hardware.c"
  2517 ;; Parameters:    Size  Location     Type
  2518 ;;		None
  2519 ;; Auto vars:     Size  Location     Type
  2520 ;;		None
  2521 ;; Return value:  Size  Location     Type
  2522 ;;                  1    wreg      void 
  2523 ;; Registers used:
  2524 ;;		wreg, status,2
  2525 ;; Tracked objects:
  2526 ;;		On entry : 0/0
  2527 ;;		On exit  : 0/0
  2528 ;;		Unchanged: 0/0
  2529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2530 ;;      Params:         0       0       0       0       0       0       0       0       0
  2531 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2532 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2533 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2534 ;;Total ram usage:        0 bytes
  2535 ;; Hardware stack levels used:    1
  2536 ;; Hardware stack levels required when called:    3
  2537 ;; This function calls:
  2538 ;;		Nothing
  2539 ;; This function is called by:
  2540 ;;		_init_hardware
  2541 ;; This function uses a non-reentrant model
  2542 ;;
  2543                           
  2544                           	psect	text5
  2545  0051B2                     __ptext5:
  2546                           	opt stack 0
  2547  0051B2                     _init_ports:
  2548                           	opt stack 26
  2549                           
  2550                           ;hardware.c: 156: ADCON1 = 0X0F;
  2551                           
  2552                           ;incstack = 0
  2553  0051B2  0E0F               	movlw	15
  2554  0051B4  6EC1               	movwf	4033,c	;volatile
  2555                           
  2556                           ;hardware.c: 157: TRISB = 0b00100001;
  2557  0051B6  0E21               	movlw	33
  2558  0051B8  6E93               	movwf	3987,c	;volatile
  2559                           
  2560                           ;hardware.c: 158: LATB = 0xFF;
  2561  0051BA  688A               	setf	3978,c	;volatile
  2562                           
  2563                           ;hardware.c: 159: TRISD = 0x00;
  2564  0051BC  0E00               	movlw	0
  2565  0051BE  6E95               	movwf	3989,c	;volatile
  2566                           
  2567                           ;hardware.c: 160: TRISA = 0b00000111;
  2568  0051C0  0E07               	movlw	7
  2569  0051C2  6E92               	movwf	3986,c	;volatile
  2570                           
  2571                           ;hardware.c: 161: TRISC = 0x01111111;
  2572  0051C4  0E11               	movlw	17
  2573  0051C6  6E94               	movwf	3988,c	;volatile
  2574                           
  2575                           ;hardware.c: 162: TRISE = 0b00000011;
  2576  0051C8  0E03               	movlw	3
  2577  0051CA  6E96               	movwf	3990,c	;volatile
  2578  0051CC  0012               	return		;funcret
  2579  0051CE                     __end_of_init_ports:
  2580                           	opt stack 0
  2581                           tblptru	equ	0xFF8
  2582                           tblptrh	equ	0xFF7
  2583                           tblptrl	equ	0xFF6
  2584                           tablat	equ	0xFF5
  2585                           postinc0	equ	0xFEE
  2586                           wreg	equ	0xFE8
  2587                           postdec1	equ	0xFE5
  2588                           fsr1h	equ	0xFE2
  2589                           fsr1l	equ	0xFE1
  2590                           postinc2	equ	0xFDE
  2591                           status	equ	0xFD8
  2592                           
  2593 ;; *************** function _init_oscilador *****************
  2594 ;; Defined at:
  2595 ;;		line 172 in file "bibliotecas/hardware.c"
  2596 ;; Parameters:    Size  Location     Type
  2597 ;;		None
  2598 ;; Auto vars:     Size  Location     Type
  2599 ;;		None
  2600 ;; Return value:  Size  Location     Type
  2601 ;;                  1    wreg      void 
  2602 ;; Registers used:
  2603 ;;		None
  2604 ;; Tracked objects:
  2605 ;;		On entry : 0/0
  2606 ;;		On exit  : 0/0
  2607 ;;		Unchanged: 0/0
  2608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2609 ;;      Params:         0       0       0       0       0       0       0       0       0
  2610 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2611 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2612 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2613 ;;Total ram usage:        0 bytes
  2614 ;; Hardware stack levels used:    1
  2615 ;; Hardware stack levels required when called:    3
  2616 ;; This function calls:
  2617 ;;		Nothing
  2618 ;; This function is called by:
  2619 ;;		_init_hardware
  2620 ;; This function uses a non-reentrant model
  2621 ;;
  2622                           
  2623                           	psect	text6
  2624  0052C2                     __ptext6:
  2625                           	opt stack 0
  2626  0052C2                     _init_oscilador:
  2627                           	opt stack 26
  2628                           
  2629                           ;hardware.c: 175: OSCCONbits.IRCF0 = 1;
  2630                           
  2631                           ;incstack = 0
  2632  0052C2  88D3               	bsf	4051,4,c	;volatile
  2633                           
  2634                           ;hardware.c: 176: OSCCONbits.IRCF1 = 1;
  2635  0052C4  8AD3               	bsf	4051,5,c	;volatile
  2636                           
  2637                           ;hardware.c: 177: OSCCONbits.IRCF2 = 1;
  2638  0052C6  8CD3               	bsf	4051,6,c	;volatile
  2639  0052C8  0012               	return		;funcret
  2640  0052CA                     __end_of_init_oscilador:
  2641                           	opt stack 0
  2642                           tblptru	equ	0xFF8
  2643                           tblptrh	equ	0xFF7
  2644                           tblptrl	equ	0xFF6
  2645                           tablat	equ	0xFF5
  2646                           postinc0	equ	0xFEE
  2647                           wreg	equ	0xFE8
  2648                           postdec1	equ	0xFE5
  2649                           fsr1h	equ	0xFE2
  2650                           fsr1l	equ	0xFE1
  2651                           postinc2	equ	0xFDE
  2652                           status	equ	0xFD8
  2653                           
  2654 ;; *************** function _init_interrupt *****************
  2655 ;; Defined at:
  2656 ;;		line 98 in file "bibliotecas/hardware.c"
  2657 ;; Parameters:    Size  Location     Type
  2658 ;;		None
  2659 ;; Auto vars:     Size  Location     Type
  2660 ;;		None
  2661 ;; Return value:  Size  Location     Type
  2662 ;;                  1    wreg      void 
  2663 ;; Registers used:
  2664 ;;		wreg, status,2
  2665 ;; Tracked objects:
  2666 ;;		On entry : 0/0
  2667 ;;		On exit  : 0/0
  2668 ;;		Unchanged: 0/0
  2669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2670 ;;      Params:         0       0       0       0       0       0       0       0       0
  2671 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2672 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2673 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2674 ;;Total ram usage:        0 bytes
  2675 ;; Hardware stack levels used:    1
  2676 ;; Hardware stack levels required when called:    3
  2677 ;; This function calls:
  2678 ;;		Nothing
  2679 ;; This function is called by:
  2680 ;;		_init_hardware
  2681 ;; This function uses a non-reentrant model
  2682 ;;
  2683                           
  2684                           	psect	text7
  2685  00522C                     __ptext7:
  2686                           	opt stack 0
  2687  00522C                     _init_interrupt:
  2688                           	opt stack 26
  2689                           
  2690                           ;hardware.c: 100: INTCON = 0b10110000;
  2691                           
  2692                           ;incstack = 0
  2693  00522C  0EB0               	movlw	176
  2694  00522E  6EF2               	movwf	intcon,c	;volatile
  2695                           
  2696                           ;hardware.c: 101: INTCON2 = 0b00000000;
  2697  005230  0E00               	movlw	0
  2698  005232  6EF1               	movwf	intcon2,c	;volatile
  2699                           
  2700                           ;hardware.c: 102: INTCON3 = 0b00000000;
  2701  005234  0E00               	movlw	0
  2702  005236  6EF0               	movwf	intcon3,c	;volatile
  2703                           
  2704                           ;hardware.c: 104: PIE1 = 0b00101000;
  2705  005238  0E28               	movlw	40
  2706  00523A  6E9D               	movwf	3997,c	;volatile
  2707  00523C  0012               	return		;funcret
  2708  00523E                     __end_of_init_interrupt:
  2709                           	opt stack 0
  2710                           tblptru	equ	0xFF8
  2711                           tblptrh	equ	0xFF7
  2712                           tblptrl	equ	0xFF6
  2713                           tablat	equ	0xFF5
  2714                           intcon	equ	0xFF2
  2715                           intcon2	equ	0xFF1
  2716                           intcon3	equ	0xFF0
  2717                           postinc0	equ	0xFEE
  2718                           wreg	equ	0xFE8
  2719                           postdec1	equ	0xFE5
  2720                           fsr1h	equ	0xFE2
  2721                           fsr1l	equ	0xFE1
  2722                           postinc2	equ	0xFDE
  2723                           status	equ	0xFD8
  2724                           
  2725 ;; *************** function _config_timer_zero *****************
  2726 ;; Defined at:
  2727 ;;		line 83 in file "bibliotecas/hardware.c"
  2728 ;; Parameters:    Size  Location     Type
  2729 ;;		None
  2730 ;; Auto vars:     Size  Location     Type
  2731 ;;		None
  2732 ;; Return value:  Size  Location     Type
  2733 ;;                  1    wreg      void 
  2734 ;; Registers used:
  2735 ;;		wreg, status,2, cstack
  2736 ;; Tracked objects:
  2737 ;;		On entry : 0/0
  2738 ;;		On exit  : 0/0
  2739 ;;		Unchanged: 0/0
  2740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2741 ;;      Params:         0       0       0       0       0       0       0       0       0
  2742 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2743 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2744 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2745 ;;Total ram usage:        0 bytes
  2746 ;; Hardware stack levels used:    1
  2747 ;; Hardware stack levels required when called:    4
  2748 ;; This function calls:
  2749 ;;		_write_timer_zero
  2750 ;; This function is called by:
  2751 ;;		_init_hardware
  2752 ;; This function uses a non-reentrant model
  2753 ;;
  2754                           
  2755                           	psect	text8
  2756  0051CE                     __ptext8:
  2757                           	opt stack 0
  2758  0051CE                     _config_timer_zero:
  2759                           	opt stack 25
  2760                           
  2761                           ;hardware.c: 85: T0CON = 0b11000011;
  2762                           
  2763                           ;incstack = 0
  2764  0051CE  0EC3               	movlw	195
  2765  0051D0  6ED5               	movwf	4053,c	;volatile
  2766                           
  2767                           ;hardware.c: 86: SPPCON = 0b00000000;
  2768  0051D2  0E00               	movlw	0
  2769  0051D4  6E65               	movwf	3941,c	;volatile
  2770                           
  2771                           ;hardware.c: 87: SPPCFG = 0b00000000;
  2772  0051D6  0E00               	movlw	0
  2773  0051D8  6E63               	movwf	3939,c	;volatile
  2774                           
  2775                           ;hardware.c: 88: write_timer_zero(0x0083);
  2776  0051DA  0E00               	movlw	0
  2777  0051DC  0100               	movlb	0	; () banked
  2778  0051DE  6F61               	movwf	(write_timer_zero@timer0+1)& (0+255),b
  2779  0051E0  0E83               	movlw	131
  2780  0051E2  6F60               	movwf	write_timer_zero@timer0& (0+255),b
  2781  0051E4  EC1F  F029         	call	_write_timer_zero	;wreg free
  2782  0051E8  0012               	return		;funcret
  2783  0051EA                     __end_of_config_timer_zero:
  2784                           	opt stack 0
  2785                           tblptru	equ	0xFF8
  2786                           tblptrh	equ	0xFF7
  2787                           tblptrl	equ	0xFF6
  2788                           tablat	equ	0xFF5
  2789                           intcon	equ	0xFF2
  2790                           intcon2	equ	0xFF1
  2791                           intcon3	equ	0xFF0
  2792                           postinc0	equ	0xFEE
  2793                           wreg	equ	0xFE8
  2794                           postdec1	equ	0xFE5
  2795                           fsr1h	equ	0xFE2
  2796                           fsr1l	equ	0xFE1
  2797                           postinc2	equ	0xFDE
  2798                           status	equ	0xFD8
  2799                           
  2800 ;; *************** function _write_timer_zero *****************
  2801 ;; Defined at:
  2802 ;;		line 138 in file "bibliotecas/hardware.c"
  2803 ;; Parameters:    Size  Location     Type
  2804 ;;  timer0          2    0[BANK0 ] unsigned int 
  2805 ;; Auto vars:     Size  Location     Type
  2806 ;;  timer           2    2[BANK0 ] struct Timers
  2807 ;; Return value:  Size  Location     Type
  2808 ;;                  1    wreg      void 
  2809 ;; Registers used:
  2810 ;;		None
  2811 ;; Tracked objects:
  2812 ;;		On entry : 0/0
  2813 ;;		On exit  : 0/0
  2814 ;;		Unchanged: 0/0
  2815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2816 ;;      Params:         0       2       0       0       0       0       0       0       0
  2817 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2818 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2819 ;;      Totals:         0       4       0       0       0       0       0       0       0
  2820 ;;Total ram usage:        4 bytes
  2821 ;; Hardware stack levels used:    1
  2822 ;; Hardware stack levels required when called:    3
  2823 ;; This function calls:
  2824 ;;		Nothing
  2825 ;; This function is called by:
  2826 ;;		_config_timer_zero
  2827 ;; This function uses a non-reentrant model
  2828 ;;
  2829                           
  2830                           	psect	text9
  2831  00523E                     __ptext9:
  2832                           	opt stack 0
  2833  00523E                     _write_timer_zero:
  2834                           	opt stack 25
  2835                           
  2836                           ;hardware.c: 140: union Timers timer;
  2837                           ;hardware.c: 142: timer.lt = timer0;
  2838                           
  2839                           ;incstack = 0
  2840  00523E  C060  F062         	movff	write_timer_zero@timer0,write_timer_zero@timer
  2841  005242  C061  F063         	movff	write_timer_zero@timer0+1,write_timer_zero@timer+1
  2842                           
  2843                           ;hardware.c: 144: TMR0H = timer.bt[1];
  2844  005246  C063  FFD7         	movff	write_timer_zero@timer+1,4055	;volatile
  2845                           
  2846                           ;hardware.c: 145: TMR0L = timer.bt[0];
  2847  00524A  C062  FFD6         	movff	write_timer_zero@timer,4054	;volatile
  2848  00524E  0012               	return		;funcret
  2849  005250                     __end_of_write_timer_zero:
  2850                           	opt stack 0
  2851                           tblptru	equ	0xFF8
  2852                           tblptrh	equ	0xFF7
  2853                           tblptrl	equ	0xFF6
  2854                           tablat	equ	0xFF5
  2855                           intcon	equ	0xFF2
  2856                           intcon2	equ	0xFF1
  2857                           intcon3	equ	0xFF0
  2858                           postinc0	equ	0xFEE
  2859                           wreg	equ	0xFE8
  2860                           postdec1	equ	0xFE5
  2861                           fsr1h	equ	0xFE2
  2862                           fsr1l	equ	0xFE1
  2863                           postinc2	equ	0xFDE
  2864                           status	equ	0xFD8
  2865                           
  2866 ;; *************** function _config_timer_dois *****************
  2867 ;; Defined at:
  2868 ;;		line 201 in file "bibliotecas/hardware.c"
  2869 ;; Parameters:    Size  Location     Type
  2870 ;;		None
  2871 ;; Auto vars:     Size  Location     Type
  2872 ;;		None
  2873 ;; Return value:  Size  Location     Type
  2874 ;;                  1    wreg      void 
  2875 ;; Registers used:
  2876 ;;		wreg, status,2
  2877 ;; Tracked objects:
  2878 ;;		On entry : 0/0
  2879 ;;		On exit  : 0/0
  2880 ;;		Unchanged: 0/0
  2881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2882 ;;      Params:         0       0       0       0       0       0       0       0       0
  2883 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2884 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2885 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2886 ;;Total ram usage:        0 bytes
  2887 ;; Hardware stack levels used:    1
  2888 ;; Hardware stack levels required when called:    3
  2889 ;; This function calls:
  2890 ;;		Nothing
  2891 ;; This function is called by:
  2892 ;;		_init_hardware
  2893 ;; This function uses a non-reentrant model
  2894 ;;
  2895                           
  2896                           	psect	text10
  2897  005274                     __ptext10:
  2898                           	opt stack 0
  2899  005274                     _config_timer_dois:
  2900                           	opt stack 26
  2901                           
  2902                           ;hardware.c: 203: T2CON = 0b00000100;
  2903                           
  2904                           ;incstack = 0
  2905  005274  0E04               	movlw	4
  2906  005276  6ECA               	movwf	4042,c	;volatile
  2907                           
  2908                           ;hardware.c: 204: TMR2 = 0;
  2909  005278  0E00               	movlw	0
  2910  00527A  6ECC               	movwf	4044,c	;volatile
  2911                           
  2912                           ;hardware.c: 205: PR2 = 0x01;
  2913  00527C  0E01               	movlw	1
  2914  00527E  6ECB               	movwf	4043,c	;volatile
  2915  005280  0012               	return		;funcret
  2916  005282                     __end_of_config_timer_dois:
  2917                           	opt stack 0
  2918                           tblptru	equ	0xFF8
  2919                           tblptrh	equ	0xFF7
  2920                           tblptrl	equ	0xFF6
  2921                           tablat	equ	0xFF5
  2922                           intcon	equ	0xFF2
  2923                           intcon2	equ	0xFF1
  2924                           intcon3	equ	0xFF0
  2925                           postinc0	equ	0xFEE
  2926                           wreg	equ	0xFE8
  2927                           postdec1	equ	0xFE5
  2928                           fsr1h	equ	0xFE2
  2929                           fsr1l	equ	0xFE1
  2930                           postinc2	equ	0xFDE
  2931                           status	equ	0xFD8
  2932                           
  2933 ;; *************** function _inicializa_tarefas *****************
  2934 ;; Defined at:
  2935 ;;		line 144 in file "main.c"
  2936 ;; Parameters:    Size  Location     Type
  2937 ;;		None
  2938 ;; Auto vars:     Size  Location     Type
  2939 ;;		None
  2940 ;; Return value:  Size  Location     Type
  2941 ;;                  1    wreg      void 
  2942 ;; Registers used:
  2943 ;;		wreg, status,2, status,0
  2944 ;; Tracked objects:
  2945 ;;		On entry : 0/0
  2946 ;;		On exit  : 0/0
  2947 ;;		Unchanged: 0/0
  2948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2949 ;;      Params:         0       0       0       0       0       0       0       0       0
  2950 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2951 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2952 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2953 ;;Total ram usage:        0 bytes
  2954 ;; Hardware stack levels used:    1
  2955 ;; Hardware stack levels required when called:    3
  2956 ;; This function calls:
  2957 ;;		Nothing
  2958 ;; This function is called by:
  2959 ;;		_main
  2960 ;; This function uses a non-reentrant model
  2961 ;;
  2962                           
  2963                           	psect	text11
  2964  005018                     __ptext11:
  2965                           	opt stack 0
  2966  005018                     _inicializa_tarefas:
  2967                           	opt stack 27
  2968                           
  2969                           ;main.c: 147: p_tarefas[0] = escrita_sdcard;
  2970                           
  2971                           ;incstack = 0
  2972  005018  0E30               	movlw	low _escrita_sdcard
  2973  00501A  0100               	movlb	0	; () banked
  2974  00501C  6FF0               	movwf	_p_tarefas& (0+255),b
  2975  00501E  0E3E               	movlw	high _escrita_sdcard
  2976  005020  6FF1               	movwf	(_p_tarefas+1)& (0+255),b
  2977                           
  2978                           ; BSR set to: 0
  2979                           ;main.c: 154: tempo_backup[0] = 5000;
  2980  005022  0E13               	movlw	19
  2981  005024  6FED               	movwf	(_tempo_backup+1)& (0+255),b
  2982  005026  0E88               	movlw	136
  2983  005028  6FEC               	movwf	_tempo_backup& (0+255),b
  2984                           
  2985                           ; BSR set to: 0
  2986                           ;main.c: 155: tempo_backup[1] = 1000;
  2987  00502A  0E03               	movlw	3
  2988  00502C  6FEF               	movwf	(_tempo_backup+3)& (0+255),b
  2989  00502E  0EE8               	movlw	232
  2990  005030  6FEE               	movwf	(_tempo_backup+2)& (0+255),b
  2991                           
  2992                           ; BSR set to: 0
  2993                           ;main.c: 160: tempo_tarefa[0] = 5000;
  2994  005032  0E13               	movlw	19
  2995  005034  6E22               	movwf	_tempo_tarefa+1,c
  2996  005036  0E88               	movlw	136
  2997  005038  6E21               	movwf	_tempo_tarefa,c
  2998                           
  2999                           ; BSR set to: 0
  3000                           ;main.c: 161: tempo_tarefa[1] = 1000;
  3001  00503A  0E03               	movlw	3
  3002  00503C  6E24               	movwf	_tempo_tarefa+3,c
  3003  00503E  0EE8               	movlw	232
  3004  005040  6E23               	movwf	_tempo_tarefa+2,c
  3005                           
  3006                           ; BSR set to: 0
  3007                           ;main.c: 165: tarefa_em_execucao = 0;
  3008  005042  0E00               	movlw	0
  3009  005044  6E35               	movwf	_tarefa_em_execucao,c	;volatile
  3010                           
  3011                           ; BSR set to: 0
  3012  005046  0012               	return		;funcret
  3013  005048                     __end_of_inicializa_tarefas:
  3014                           	opt stack 0
  3015                           tblptru	equ	0xFF8
  3016                           tblptrh	equ	0xFF7
  3017                           tblptrl	equ	0xFF6
  3018                           tablat	equ	0xFF5
  3019                           intcon	equ	0xFF2
  3020                           intcon2	equ	0xFF1
  3021                           intcon3	equ	0xFF0
  3022                           postinc0	equ	0xFEE
  3023                           wreg	equ	0xFE8
  3024                           postdec1	equ	0xFE5
  3025                           fsr1h	equ	0xFE2
  3026                           fsr1l	equ	0xFE1
  3027                           postinc2	equ	0xFDE
  3028                           status	equ	0xFD8
  3029                           
  3030 ;; *************** function _escalonador *****************
  3031 ;; Defined at:
  3032 ;;		line 176 in file "main.c"
  3033 ;; Parameters:    Size  Location     Type
  3034 ;;		None
  3035 ;; Auto vars:     Size  Location     Type
  3036 ;;  cont            1   58[BANK1 ] unsigned char 
  3037 ;; Return value:  Size  Location     Type
  3038 ;;                  1    wreg      void 
  3039 ;; Registers used:
  3040 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3041 ;; Tracked objects:
  3042 ;;		On entry : 0/0
  3043 ;;		On exit  : 0/0
  3044 ;;		Unchanged: 0/0
  3045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3046 ;;      Params:         0       0       0       0       0       0       0       0       0
  3047 ;;      Locals:         0       0       1       0       0       0       0       0       0
  3048 ;;      Temps:          0       0       2       0       0       0       0       0       0
  3049 ;;      Totals:         0       0       3       0       0       0       0       0       0
  3050 ;;Total ram usage:        3 bytes
  3051 ;; Hardware stack levels used:    1
  3052 ;; Hardware stack levels required when called:   16
  3053 ;; This function calls:
  3054 ;;		_escrita_sdcard
  3055 ;; This function is called by:
  3056 ;;		_main
  3057 ;; This function uses a non-reentrant model
  3058 ;;
  3059                           
  3060                           	psect	text12
  3061  0041DE                     __ptext12:
  3062                           	opt stack 0
  3063  0041DE                     _escalonador:
  3064                           	opt stack 14
  3065                           
  3066                           ;main.c: 178: unsigned char cont;
  3067                           ;main.c: 179: for(cont = 0; cont<2;cont++)
  3068                           
  3069                           ; BSR set to: 0
  3070                           ;incstack = 0
  3071  0041DE  0E00               	movlw	0
  3072  0041E0  0101               	movlb	1	; () banked
  3073  0041E2  6FC6               	movwf	escalonador@cont& (0+255),b
  3074  0041E4                     l10703:
  3075                           
  3076                           ; BSR set to: 1
  3077  0041E4  0E01               	movlw	1
  3078  0041E6  65C6               	cpfsgt	escalonador@cont& (0+255),b
  3079  0041E8  D001               	goto	l81
  3080  0041EA  0012               	return	
  3081  0041EC                     l81:
  3082                           
  3083                           ; BSR set to: 1
  3084                           ;main.c: 180: {
  3085                           ;main.c: 181: if((p_tarefas[cont]!= 0 ) && tempo_tarefa[cont] == 0)
  3086                           
  3087                           ; BSR set to: 1
  3088  0041EC  51C6               	movf	escalonador@cont& (0+255),w,b
  3089  0041EE  0D02               	mullw	2
  3090  0041F0  0EF0               	movlw	low _p_tarefas
  3091  0041F2  24F3               	addwf	prodl,w,c
  3092  0041F4  6ED9               	movwf	fsr2l,c
  3093  0041F6  0E00               	movlw	high _p_tarefas
  3094  0041F8  20F4               	addwfc	prodh,w,c
  3095  0041FA  6EDA               	movwf	fsr2h,c
  3096  0041FC  50DE               	movf	postinc2,w,c
  3097  0041FE  10DE               	iorwf	postinc2,w,c
  3098  004200  B4D8               	btfsc	status,2,c
  3099  004202  D03D               	goto	l83
  3100                           
  3101                           ; BSR set to: 1
  3102  004204  51C6               	movf	escalonador@cont& (0+255),w,b
  3103  004206  0D02               	mullw	2
  3104  004208  0E21               	movlw	low _tempo_tarefa
  3105  00420A  24F3               	addwf	prodl,w,c
  3106  00420C  6ED9               	movwf	fsr2l,c
  3107  00420E  0E00               	movlw	high _tempo_tarefa
  3108  004210  20F4               	addwfc	prodh,w,c
  3109  004212  6EDA               	movwf	fsr2h,c
  3110  004214  50DE               	movf	postinc2,w,c
  3111  004216  10DE               	iorwf	postinc2,w,c
  3112  004218  A4D8               	btfss	status,2,c
  3113  00421A  D031               	goto	l83
  3114                           
  3115                           ; BSR set to: 1
  3116                           ;main.c: 182: {
  3117                           ;main.c: 183: tarefa_em_execucao = 1;
  3118  00421C  0E01               	movlw	1
  3119  00421E  6E35               	movwf	_tarefa_em_execucao,c	;volatile
  3120                           
  3121                           ;main.c: 184: timeout_tarefa = 60000;
  3122  004220  0EEA               	movlw	234
  3123  004222  6E2C               	movwf	_timeout_tarefa+1,c
  3124  004224  0E60               	movlw	96
  3125  004226  6E2B               	movwf	_timeout_tarefa,c
  3126                           
  3127                           ; BSR set to: 1
  3128                           ;main.c: 185: p_tarefas[cont]();
  3129  004228  51C6               	movf	escalonador@cont& (0+255),w,b
  3130  00422A  0D02               	mullw	2
  3131  00422C  0EF0               	movlw	low _p_tarefas
  3132  00422E  24F3               	addwf	prodl,w,c
  3133  004230  6ED9               	movwf	fsr2l,c
  3134  004232  0E00               	movlw	high _p_tarefas
  3135  004234  20F4               	addwfc	prodh,w,c
  3136  004236  6EDA               	movwf	fsr2h,c
  3137  004238  D801               	call	u13608
  3138  00423A  D00A               	goto	u13609
  3139  00423C                     u13608:
  3140  00423C  0005               	push	
  3141  00423E  6EFA               	movwf	pclath,c
  3142  004240  50DE               	movf	postinc2,w,c
  3143  004242  6EFD               	movwf	tosl,c
  3144  004244  50DE               	movf	postinc2,w,c
  3145  004246  6EFE               	movwf	tosh,c
  3146  004248  50F8               	movf	tblptru,w,c
  3147  00424A  6EFF               	movwf	tosu,c
  3148  00424C  50FA               	movf	pclath,w,c
  3149  00424E  0012               	return		;indir
  3150  004250                     u13609:
  3151                           
  3152                           ;main.c: 186: tarefa_em_execucao = 0;
  3153  004250  0E00               	movlw	0
  3154  004252  6E35               	movwf	_tarefa_em_execucao,c	;volatile
  3155                           
  3156                           ;main.c: 187: tempo_tarefa[cont] = tempo_backup[cont];
  3157  004254  0101               	movlb	1	; () banked
  3158  004256  51C6               	movf	escalonador@cont& (0+255),w,b
  3159  004258  0D02               	mullw	2
  3160  00425A  0EEC               	movlw	low _tempo_backup
  3161  00425C  24F3               	addwf	prodl,w,c
  3162  00425E  6ED9               	movwf	fsr2l,c
  3163  004260  0E00               	movlw	high _tempo_backup
  3164  004262  20F4               	addwfc	prodh,w,c
  3165  004264  6EDA               	movwf	fsr2h,c
  3166  004266  51C6               	movf	escalonador@cont& (0+255),w,b
  3167  004268  0D02               	mullw	2
  3168  00426A  0E21               	movlw	low _tempo_tarefa
  3169  00426C  24F3               	addwf	prodl,w,c
  3170  00426E  6EE1               	movwf	fsr1l,c
  3171  004270  0E00               	movlw	high _tempo_tarefa
  3172  004272  20F4               	addwfc	prodh,w,c
  3173  004274  6EE2               	movwf	fsr1h,c
  3174  004276  CFDE FFE6          	movff	postinc2,postinc1
  3175  00427A  CFDD FFE5          	movff	postdec2,postdec1
  3176  00427E                     l83:
  3177                           
  3178                           ; BSR set to: 1
  3179                           
  3180                           ; BSR set to: 1
  3181  00427E  2BC6               	incf	escalonador@cont& (0+255),f,b
  3182  004280  D7B1               	goto	l10703
  3183  004282                     __end_of_escalonador:
  3184                           	opt stack 0
  3185                           tosu	equ	0xFFF
  3186                           tosh	equ	0xFFE
  3187                           tosl	equ	0xFFD
  3188                           pclath	equ	0xFFA
  3189                           tblptru	equ	0xFF8
  3190                           tblptrh	equ	0xFF7
  3191                           tblptrl	equ	0xFF6
  3192                           tablat	equ	0xFF5
  3193                           prodh	equ	0xFF4
  3194                           prodl	equ	0xFF3
  3195                           intcon	equ	0xFF2
  3196                           intcon2	equ	0xFF1
  3197                           intcon3	equ	0xFF0
  3198                           postinc0	equ	0xFEE
  3199                           wreg	equ	0xFE8
  3200                           postinc1	equ	0xFE6
  3201                           postdec1	equ	0xFE5
  3202                           fsr1h	equ	0xFE2
  3203                           fsr1l	equ	0xFE1
  3204                           postinc2	equ	0xFDE
  3205                           postdec2	equ	0xFDD
  3206                           fsr2h	equ	0xFDA
  3207                           fsr2l	equ	0xFD9
  3208                           status	equ	0xFD8
  3209                           
  3210 ;; *************** function _escrita_sdcard *****************
  3211 ;; Defined at:
  3212 ;;		line 205 in file "bibliotecas/SDCard.c"
  3213 ;; Parameters:    Size  Location     Type
  3214 ;;		None
  3215 ;; Auto vars:     Size  Location     Type
  3216 ;;  i               1    0        unsigned char 
  3217 ;; Return value:  Size  Location     Type
  3218 ;;                  1    wreg      void 
  3219 ;; Registers used:
  3220 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3221 ;; Tracked objects:
  3222 ;;		On entry : 0/0
  3223 ;;		On exit  : 0/0
  3224 ;;		Unchanged: 0/0
  3225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3226 ;;      Params:         0       0       0       0       0       0       0       0       0
  3227 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3228 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3229 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3230 ;;Total ram usage:        0 bytes
  3231 ;; Hardware stack levels used:    1
  3232 ;; Hardware stack levels required when called:   15
  3233 ;; This function calls:
  3234 ;;		_desliga_SPI
  3235 ;;		_desliga_uart
  3236 ;;		_escreve_frase_ram_lcd
  3237 ;;		_escreve_inteiro_lcd
  3238 ;;		_f_close
  3239 ;;		_f_lseek
  3240 ;;		_f_mount
  3241 ;;		_f_open
  3242 ;;		_fprintf
  3243 ;;		_inicializa_SPI
  3244 ;;		_inicializa_uart
  3245 ;;		_posicao_cursor_lcd
  3246 ;; This function is called by:
  3247 ;;		_inicializa_tarefas
  3248 ;;		_escalonador
  3249 ;; This function uses a non-reentrant model
  3250 ;;
  3251                           
  3252                           	psect	text13
  3253  003E30                     __ptext13:
  3254                           	opt stack 0
  3255  003E30                     _escrita_sdcard:
  3256                           	opt stack 14
  3257                           
  3258                           ;SDCard.c: 207: unsigned char i;
  3259                           ;SDCard.c: 208: static unsigned char flag;
  3260                           ;SDCard.c: 209: PORTBbits.RB3 = 0;
  3261                           
  3262                           ; BSR set to: 1
  3263                           ;incstack = 0
  3264  003E30  9681               	bcf	3969,3,c	;volatile
  3265                           
  3266                           ;SDCard.c: 211: desliga_uart();
  3267  003E32  EC48  F029         	call	_desliga_uart	;wreg free
  3268                           
  3269                           ;SDCard.c: 212: inicializa_SPI();
  3270  003E36  ECBA  F028         	call	_inicializa_SPI	;wreg free
  3271                           
  3272                           ;SDCard.c: 213: f_mount(0,&fs);
  3273  003E3A  0EE4               	movlw	low _fs
  3274  003E3C  0100               	movlb	0	; () banked
  3275  003E3E  6F60               	movwf	f_mount@fs& (0+255),b
  3276  003E40  0E01               	movlw	high _fs
  3277  003E42  6F61               	movwf	(f_mount@fs+1)& (0+255),b
  3278  003E44  0E00               	movlw	0
  3279  003E46  EC53  F026         	call	_f_mount
  3280                           
  3281                           ;SDCard.c: 218: if (f_open(&fil, filename, 0x10 | 0x02 ) == FR_OK)
  3282  003E4A  0E2C               	movlw	low _fil
  3283  003E4C  0100               	movlb	0	; () banked
  3284  003E4E  6FD7               	movwf	f_open@fp& (0+255),b
  3285  003E50  0E01               	movlw	high _fil
  3286  003E52  6FD8               	movwf	(f_open@fp+1)& (0+255),b
  3287  003E54  0ED5               	movlw	low _filename
  3288  003E56  6FD9               	movwf	f_open@path& (0+255),b
  3289  003E58  0E01               	movlw	high _filename
  3290  003E5A  6FDA               	movwf	(f_open@path+1)& (0+255),b
  3291  003E5C  0E12               	movlw	18
  3292  003E5E  6FDB               	movwf	f_open@mode& (0+255),b
  3293  003E60  ECDF  F00D         	call	_f_open	;wreg free
  3294  003E64  0900               	iorlw	0
  3295  003E66  A4D8               	btfss	status,2,c
  3296  003E68  D04A               	goto	l258
  3297                           
  3298                           ;SDCard.c: 219: {
  3299                           ;SDCard.c: 221: f_lseek(&fil, ((&fil)->fsize));
  3300  003E6A  0E2C               	movlw	low _fil
  3301  003E6C  0100               	movlb	0	; () banked
  3302  003E6E  6FC4               	movwf	f_lseek@fp& (0+255),b
  3303  003E70  0E01               	movlw	high _fil
  3304  003E72  6FC5               	movwf	(f_lseek@fp+1)& (0+255),b
  3305  003E74  C136  F0C6         	movff	_fil+10,f_lseek@ofs
  3306  003E78  C137  F0C7         	movff	_fil+11,f_lseek@ofs+1
  3307  003E7C  C138  F0C8         	movff	_fil+12,f_lseek@ofs+2
  3308  003E80  C139  F0C9         	movff	_fil+13,f_lseek@ofs+3
  3309  003E84  ECC6  F009         	call	_f_lseek	;wreg free
  3310                           
  3311                           ;SDCard.c: 222: posicao_cursor_lcd(2,0);
  3312  003E88  0E00               	movlw	0
  3313  003E8A  0100               	movlb	0	; () banked
  3314  003E8C  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3315  003E8E  0E02               	movlw	2
  3316  003E90  ECD5  F023         	call	_posicao_cursor_lcd
  3317                           
  3318                           ;SDCard.c: 223: escreve_inteiro_lcd(((&fil)->fsize));
  3319  003E94  C136  F078         	movff	_fil+10,escreve_inteiro_lcd@valor
  3320  003E98  C137  F079         	movff	_fil+11,escreve_inteiro_lcd@valor+1
  3321  003E9C  EC92  F027         	call	_escreve_inteiro_lcd	;wreg free
  3322                           
  3323                           ;SDCard.c: 224: posicao_cursor_lcd(1,0);
  3324  003EA0  0E00               	movlw	0
  3325  003EA2  0100               	movlb	0	; () banked
  3326  003EA4  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3327  003EA6  0E01               	movlw	1
  3328  003EA8  ECD5  F023         	call	_posicao_cursor_lcd
  3329                           
  3330                           ;SDCard.c: 225: escreve_frase_ram_lcd(string_dado.hora);
  3331  003EAC  0E07               	movlw	low (_string_dado+7)
  3332  003EAE  0100               	movlb	0	; () banked
  3333  003EB0  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3334  003EB2  0E01               	movlw	high (_string_dado+7)
  3335  003EB4  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  3336  003EB6  EC02  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3337                           
  3338                           ;SDCard.c: 226: fprintf(&fil, "\n%s ; %s ; %s ; %s ;", string_dado.hora, string_dado.dat
      +                          a,string_dado.LAT, string_dado.LONG);
  3339  003EBA  0E2C               	movlw	low _fil
  3340  003EBC  0101               	movlb	1	; () banked
  3341  003EBE  6F93               	movwf	fprintf@fil& (0+255),b
  3342  003EC0  0E01               	movlw	high _fil
  3343  003EC2  6F94               	movwf	(fprintf@fil+1)& (0+255),b
  3344  003EC4  0E23               	movlw	low STR_9
  3345  003EC6  6F95               	movwf	fprintf@str& (0+255),b
  3346  003EC8  0E08               	movlw	high STR_9
  3347  003ECA  6F96               	movwf	(fprintf@str+1)& (0+255),b
  3348  003ECC  0E07               	movlw	low (_string_dado+7)
  3349  003ECE  6F97               	movwf	(?_fprintf+4)& (0+255),b
  3350  003ED0  0E01               	movlw	high (_string_dado+7)
  3351  003ED2  6F98               	movwf	(?_fprintf+5)& (0+255),b
  3352  003ED4  0E00               	movlw	low _string_dado
  3353  003ED6  6F99               	movwf	(?_fprintf+6)& (0+255),b
  3354  003ED8  0E01               	movlw	high _string_dado
  3355  003EDA  6F9A               	movwf	(?_fprintf+7)& (0+255),b
  3356  003EDC  0E12               	movlw	low (_string_dado+18)
  3357  003EDE  6F9B               	movwf	(?_fprintf+8)& (0+255),b
  3358  003EE0  0E01               	movlw	high (_string_dado+18)
  3359  003EE2  6F9C               	movwf	(?_fprintf+9)& (0+255),b
  3360  003EE4  0E1F               	movlw	low (_string_dado+31)
  3361  003EE6  6F9D               	movwf	(?_fprintf+10)& (0+255),b
  3362  003EE8  0E01               	movlw	high (_string_dado+31)
  3363  003EEA  6F9E               	movwf	(?_fprintf+11)& (0+255),b
  3364  003EEC  EC0B  F00C         	call	_fprintf	;wreg free
  3365                           
  3366                           ;SDCard.c: 229: f_close(&fil);
  3367  003EF0  0E2C               	movlw	low _fil
  3368  003EF2  0100               	movlb	0	; () banked
  3369  003EF4  6FAB               	movwf	f_close@fp& (0+255),b
  3370  003EF6  0E01               	movlw	high _fil
  3371  003EF8  6FAC               	movwf	(f_close@fp+1)& (0+255),b
  3372  003EFA  EC53  F028         	call	_f_close	;wreg free
  3373  003EFE                     l258:
  3374                           
  3375                           ;SDCard.c: 230: }
  3376                           ;SDCard.c: 232: PORTBbits.RB3 = 1;
  3377  003EFE  8681               	bsf	3969,3,c	;volatile
  3378                           
  3379                           ;SDCard.c: 233: desliga_SPI();
  3380  003F00  EC5B  F029         	call	_desliga_SPI	;wreg free
  3381                           
  3382                           ;SDCard.c: 234: inicializa_uart();
  3383  003F04  ECA8  F028         	call	_inicializa_uart	;wreg free
  3384  003F08  0012               	return	
  3385  003F0A                     __end_of_escrita_sdcard:
  3386                           	opt stack 0
  3387                           tosu	equ	0xFFF
  3388                           tosh	equ	0xFFE
  3389                           tosl	equ	0xFFD
  3390                           pclath	equ	0xFFA
  3391                           tblptru	equ	0xFF8
  3392                           tblptrh	equ	0xFF7
  3393                           tblptrl	equ	0xFF6
  3394                           tablat	equ	0xFF5
  3395                           prodh	equ	0xFF4
  3396                           prodl	equ	0xFF3
  3397                           intcon	equ	0xFF2
  3398                           intcon2	equ	0xFF1
  3399                           intcon3	equ	0xFF0
  3400                           postinc0	equ	0xFEE
  3401                           wreg	equ	0xFE8
  3402                           postinc1	equ	0xFE6
  3403                           postdec1	equ	0xFE5
  3404                           fsr1h	equ	0xFE2
  3405                           fsr1l	equ	0xFE1
  3406                           postinc2	equ	0xFDE
  3407                           postdec2	equ	0xFDD
  3408                           fsr2h	equ	0xFDA
  3409                           fsr2l	equ	0xFD9
  3410                           status	equ	0xFD8
  3411                           
  3412 ;; *************** function _inicializa_uart *****************
  3413 ;; Defined at:
  3414 ;;		line 206 in file "bibliotecas/uart.c"
  3415 ;; Parameters:    Size  Location     Type
  3416 ;;		None
  3417 ;; Auto vars:     Size  Location     Type
  3418 ;;		None
  3419 ;; Return value:  Size  Location     Type
  3420 ;;                  1    wreg      void 
  3421 ;; Registers used:
  3422 ;;		wreg, status,2, status,0, cstack
  3423 ;; Tracked objects:
  3424 ;;		On entry : 0/0
  3425 ;;		On exit  : 0/0
  3426 ;;		Unchanged: 0/0
  3427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3428 ;;      Params:         0       0       0       0       0       0       0       0       0
  3429 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3430 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3431 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3432 ;;Total ram usage:        0 bytes
  3433 ;; Hardware stack levels used:    1
  3434 ;; Hardware stack levels required when called:    5
  3435 ;; This function calls:
  3436 ;;		_configura_baudrate_uart
  3437 ;; This function is called by:
  3438 ;;		_main
  3439 ;;		_escrita_sdcard
  3440 ;; This function uses a non-reentrant model
  3441 ;;
  3442                           
  3443                           	psect	text14
  3444  005150                     __ptext14:
  3445                           	opt stack 0
  3446  005150                     _inicializa_uart:
  3447                           	opt stack 25
  3448                           
  3449                           ;uart.c: 208: TRISCbits.RC6 = 0;
  3450                           
  3451                           ;incstack = 0
  3452  005150  9C94               	bcf	3988,6,c	;volatile
  3453                           
  3454                           ;uart.c: 209: TRISCbits.RC7 = 0;
  3455  005152  9E94               	bcf	3988,7,c	;volatile
  3456                           
  3457                           ;uart.c: 211: (void)configura_baudrate_uart(9600);
  3458  005154  0E80               	movlw	128
  3459  005156  0100               	movlb	0	; () banked
  3460  005158  6F6E               	movwf	configura_baudrate_uart@baudrate& (0+255),b
  3461  00515A  0E25               	movlw	37
  3462  00515C  6F6F               	movwf	(configura_baudrate_uart@baudrate+1)& (0+255),b
  3463  00515E  0E00               	movlw	0
  3464  005160  6F70               	movwf	(configura_baudrate_uart@baudrate+2)& (0+255),b
  3465  005162  0E00               	movlw	0
  3466  005164  6F71               	movwf	(configura_baudrate_uart@baudrate+3)& (0+255),b
  3467  005166  ECCD  F01C         	call	_configura_baudrate_uart	;wreg free
  3468                           
  3469                           ;uart.c: 213: TXSTA = 0x20;
  3470  00516A  0E20               	movlw	32
  3471  00516C  6EAC               	movwf	4012,c	;volatile
  3472                           
  3473                           ;uart.c: 214: RCSTA = 0x90;
  3474  00516E  0E90               	movlw	144
  3475  005170  6EAB               	movwf	4011,c	;volatile
  3476  005172  0012               	return		;funcret
  3477  005174                     __end_of_inicializa_uart:
  3478                           	opt stack 0
  3479                           tosu	equ	0xFFF
  3480                           tosh	equ	0xFFE
  3481                           tosl	equ	0xFFD
  3482                           pclath	equ	0xFFA
  3483                           tblptru	equ	0xFF8
  3484                           tblptrh	equ	0xFF7
  3485                           tblptrl	equ	0xFF6
  3486                           tablat	equ	0xFF5
  3487                           prodh	equ	0xFF4
  3488                           prodl	equ	0xFF3
  3489                           intcon	equ	0xFF2
  3490                           intcon2	equ	0xFF1
  3491                           intcon3	equ	0xFF0
  3492                           postinc0	equ	0xFEE
  3493                           wreg	equ	0xFE8
  3494                           postinc1	equ	0xFE6
  3495                           postdec1	equ	0xFE5
  3496                           fsr1h	equ	0xFE2
  3497                           fsr1l	equ	0xFE1
  3498                           postinc2	equ	0xFDE
  3499                           postdec2	equ	0xFDD
  3500                           fsr2h	equ	0xFDA
  3501                           fsr2l	equ	0xFD9
  3502                           status	equ	0xFD8
  3503                           
  3504 ;; *************** function _configura_baudrate_uart *****************
  3505 ;; Defined at:
  3506 ;;		line 50 in file "bibliotecas/uart.c"
  3507 ;; Parameters:    Size  Location     Type
  3508 ;;  baudrate        4   14[BANK0 ] const long 
  3509 ;; Auto vars:     Size  Location     Type
  3510 ;;  x               2   26[BANK0 ] unsigned int 
  3511 ;; Return value:  Size  Location     Type
  3512 ;;                  1    wreg      unsigned char 
  3513 ;; Registers used:
  3514 ;;		wreg, status,2, status,0, cstack
  3515 ;; Tracked objects:
  3516 ;;		On entry : 0/0
  3517 ;;		On exit  : 0/0
  3518 ;;		Unchanged: 0/0
  3519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3520 ;;      Params:         0       4       0       0       0       0       0       0       0
  3521 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3522 ;;      Temps:          0       8       0       0       0       0       0       0       0
  3523 ;;      Totals:         0      14       0       0       0       0       0       0       0
  3524 ;;Total ram usage:       14 bytes
  3525 ;; Hardware stack levels used:    1
  3526 ;; Hardware stack levels required when called:    4
  3527 ;; This function calls:
  3528 ;;		___aldiv
  3529 ;; This function is called by:
  3530 ;;		_inicializa_uart
  3531 ;; This function uses a non-reentrant model
  3532 ;;
  3533                           
  3534                           	psect	text15
  3535  00399A                     __ptext15:
  3536                           	opt stack 0
  3537  00399A                     _configura_baudrate_uart:
  3538                           	opt stack 25
  3539                           
  3540                           ;uart.c: 52: unsigned int x;
  3541                           ;uart.c: 54: x = (48000000 - baudrate*64)/(baudrate*64);
  3542                           
  3543                           ;incstack = 0
  3544  00399A  C06E  F072         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  3545  00399E  C06F  F073         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  3546  0039A2  C070  F074         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  3547  0039A6  C071  F075         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  3548  0039AA  0E06               	movlw	6
  3549  0039AC                     u12025:
  3550  0039AC  90D8               	bcf	status,0,c
  3551  0039AE  0100               	movlb	0	; () banked
  3552  0039B0  3772               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  3553  0039B2  3773               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  3554  0039B4  3774               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  3555  0039B6  3775               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  3556  0039B8  2EE8               	decfsz	wreg,f,c
  3557  0039BA  D7F8               	goto	u12025
  3558  0039BC  1F72               	comf	??_configura_baudrate_uart& (0+255),f,b
  3559  0039BE  1F73               	comf	(??_configura_baudrate_uart+1)& (0+255),f,b
  3560  0039C0  1F74               	comf	(??_configura_baudrate_uart+2)& (0+255),f,b
  3561  0039C2  1F75               	comf	(??_configura_baudrate_uart+3)& (0+255),f,b
  3562  0039C4  2B72               	incf	??_configura_baudrate_uart& (0+255),f,b
  3563  0039C6  0E00               	movlw	0
  3564  0039C8  2373               	addwfc	(??_configura_baudrate_uart+1)& (0+255),f,b
  3565  0039CA  2374               	addwfc	(??_configura_baudrate_uart+2)& (0+255),f,b
  3566  0039CC  2375               	addwfc	(??_configura_baudrate_uart+3)& (0+255),f,b
  3567  0039CE  0E00               	movlw	0
  3568  0039D0  2572               	addwf	??_configura_baudrate_uart& (0+255),w,b
  3569  0039D2  6F60               	movwf	___aldiv@dividend& (0+255),b
  3570  0039D4  0E6C               	movlw	108
  3571  0039D6  2173               	addwfc	(??_configura_baudrate_uart+1)& (0+255),w,b
  3572  0039D8  6F61               	movwf	(___aldiv@dividend+1)& (0+255),b
  3573  0039DA  0EDC               	movlw	220
  3574  0039DC  2174               	addwfc	(??_configura_baudrate_uart+2)& (0+255),w,b
  3575  0039DE  6F62               	movwf	(___aldiv@dividend+2)& (0+255),b
  3576  0039E0  0E02               	movlw	2
  3577  0039E2  2175               	addwfc	(??_configura_baudrate_uart+3)& (0+255),w,b
  3578  0039E4  6F63               	movwf	(___aldiv@dividend+3)& (0+255),b
  3579  0039E6  C06E  F076         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  3580  0039EA  C06F  F077         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  3581  0039EE  C070  F078         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  3582  0039F2  C071  F079         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  3583  0039F6  0E06               	movlw	6
  3584  0039F8                     u12035:
  3585  0039F8  90D8               	bcf	status,0,c
  3586  0039FA  3776               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  3587  0039FC  3777               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  3588  0039FE  3778               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  3589  003A00  3779               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  3590  003A02  2EE8               	decfsz	wreg,f,c
  3591  003A04  D7F9               	goto	u12035
  3592  003A06  C076  F064         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  3593  003A0A  C077  F065         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  3594  003A0E  C078  F066         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  3595  003A12  C079  F067         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  3596  003A16  EC85  F01F         	call	___aldiv	;wreg free
  3597  003A1A  C060  F07A         	movff	?___aldiv,configura_baudrate_uart@x
  3598  003A1E  C061  F07B         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  3599                           
  3600                           ;uart.c: 55: if(x > 255)
  3601  003A22  0100               	movlb	0	; () banked
  3602  003A24  057B               	decf	(configura_baudrate_uart@x+1)& (0+255),w,b
  3603  003A26  A0D8               	btfss	status,0,c
  3604  003A28  D044               	goto	l765
  3605                           
  3606                           ; BSR set to: 0
  3607                           ;uart.c: 56: {
  3608                           ;uart.c: 57: x = (48000000 - baudrate*16)/(baudrate*16);
  3609  003A2A  C06E  F072         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  3610  003A2E  C06F  F073         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  3611  003A32  C070  F074         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  3612  003A36  C071  F075         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  3613  003A3A  0E04               	movlw	4
  3614  003A3C                     u12055:
  3615  003A3C  90D8               	bcf	status,0,c
  3616  003A3E  3772               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  3617  003A40  3773               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  3618  003A42  3774               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  3619  003A44  3775               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  3620  003A46  2EE8               	decfsz	wreg,f,c
  3621  003A48  D7F9               	goto	u12055
  3622  003A4A  1F72               	comf	??_configura_baudrate_uart& (0+255),f,b
  3623  003A4C  1F73               	comf	(??_configura_baudrate_uart+1)& (0+255),f,b
  3624  003A4E  1F74               	comf	(??_configura_baudrate_uart+2)& (0+255),f,b
  3625  003A50  1F75               	comf	(??_configura_baudrate_uart+3)& (0+255),f,b
  3626  003A52  2B72               	incf	??_configura_baudrate_uart& (0+255),f,b
  3627  003A54  0E00               	movlw	0
  3628  003A56  2373               	addwfc	(??_configura_baudrate_uart+1)& (0+255),f,b
  3629  003A58  2374               	addwfc	(??_configura_baudrate_uart+2)& (0+255),f,b
  3630  003A5A  2375               	addwfc	(??_configura_baudrate_uart+3)& (0+255),f,b
  3631  003A5C  0E00               	movlw	0
  3632  003A5E  2572               	addwf	??_configura_baudrate_uart& (0+255),w,b
  3633  003A60  6F60               	movwf	___aldiv@dividend& (0+255),b
  3634  003A62  0E6C               	movlw	108
  3635  003A64  2173               	addwfc	(??_configura_baudrate_uart+1)& (0+255),w,b
  3636  003A66  6F61               	movwf	(___aldiv@dividend+1)& (0+255),b
  3637  003A68  0EDC               	movlw	220
  3638  003A6A  2174               	addwfc	(??_configura_baudrate_uart+2)& (0+255),w,b
  3639  003A6C  6F62               	movwf	(___aldiv@dividend+2)& (0+255),b
  3640  003A6E  0E02               	movlw	2
  3641  003A70  2175               	addwfc	(??_configura_baudrate_uart+3)& (0+255),w,b
  3642  003A72  6F63               	movwf	(___aldiv@dividend+3)& (0+255),b
  3643  003A74  C06E  F076         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  3644  003A78  C06F  F077         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  3645  003A7C  C070  F078         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  3646  003A80  C071  F079         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  3647  003A84  0E04               	movlw	4
  3648  003A86                     u12065:
  3649  003A86  90D8               	bcf	status,0,c
  3650  003A88  3776               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  3651  003A8A  3777               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  3652  003A8C  3778               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  3653  003A8E  3779               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  3654  003A90  2EE8               	decfsz	wreg,f,c
  3655  003A92  D7F9               	goto	u12065
  3656  003A94  C076  F064         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  3657  003A98  C077  F065         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  3658  003A9C  C078  F066         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  3659  003AA0  C079  F067         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  3660  003AA4  EC85  F01F         	call	___aldiv	;wreg free
  3661  003AA8  C060  F07A         	movff	?___aldiv,configura_baudrate_uart@x
  3662  003AAC  C061  F07B         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  3663                           
  3664                           ;uart.c: 58: BRGH = 1;
  3665  003AB0  84AC               	bsf	4012,2,c	;volatile
  3666  003AB2                     l765:
  3667                           
  3668                           ;uart.c: 59: }
  3669                           ;uart.c: 60: if(x < 256)
  3670  003AB2  0100               	movlb	0	; () banked
  3671  003AB4  057B               	decf	(configura_baudrate_uart@x+1)& (0+255),w,b
  3672  003AB6  B0D8               	btfsc	status,0,c
  3673  003AB8  0012               	return	
  3674                           
  3675                           ; BSR set to: 0
  3676                           ;uart.c: 61: {
  3677                           ;uart.c: 62: SPBRG = x;
  3678  003ABA  C07A  FFAF         	movff	configura_baudrate_uart@x,4015	;volatile
  3679                           
  3680                           ;uart.c: 63: SYNC = 0;
  3681  003ABE  98AC               	bcf	4012,4,c	;volatile
  3682                           
  3683                           ;uart.c: 64: SPEN = 1;
  3684  003AC0  8EAB               	bsf	4011,7,c	;volatile
  3685                           
  3686                           ;uart.c: 65: TRISCbits.RC7 = 1;
  3687  003AC2  8E94               	bsf	3988,7,c	;volatile
  3688                           
  3689                           ;uart.c: 66: TRISCbits.RC6 = 0;
  3690  003AC4  9C94               	bcf	3988,6,c	;volatile
  3691                           
  3692                           ;uart.c: 67: CREN = 1;
  3693  003AC6  88AB               	bsf	4011,4,c	;volatile
  3694                           
  3695                           ;uart.c: 68: TXEN = 1;
  3696  003AC8  8AAC               	bsf	4012,5,c	;volatile
  3697                           
  3698                           ;uart.c: 70: return (1);
  3699                           ;	Return value of _configura_baudrate_uart is never used
  3700  003ACA  0012               	return	
  3701  003ACC                     __end_of_configura_baudrate_uart:
  3702                           	opt stack 0
  3703                           tosu	equ	0xFFF
  3704                           tosh	equ	0xFFE
  3705                           tosl	equ	0xFFD
  3706                           pclath	equ	0xFFA
  3707                           tblptru	equ	0xFF8
  3708                           tblptrh	equ	0xFF7
  3709                           tblptrl	equ	0xFF6
  3710                           tablat	equ	0xFF5
  3711                           prodh	equ	0xFF4
  3712                           prodl	equ	0xFF3
  3713                           intcon	equ	0xFF2
  3714                           intcon2	equ	0xFF1
  3715                           intcon3	equ	0xFF0
  3716                           postinc0	equ	0xFEE
  3717                           wreg	equ	0xFE8
  3718                           postinc1	equ	0xFE6
  3719                           postdec1	equ	0xFE5
  3720                           fsr1h	equ	0xFE2
  3721                           fsr1l	equ	0xFE1
  3722                           postinc2	equ	0xFDE
  3723                           postdec2	equ	0xFDD
  3724                           fsr2h	equ	0xFDA
  3725                           fsr2l	equ	0xFD9
  3726                           status	equ	0xFD8
  3727                           
  3728 ;; *************** function ___aldiv *****************
  3729 ;; Defined at:
  3730 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  3731 ;; Parameters:    Size  Location     Type
  3732 ;;  dividend        4    0[BANK0 ] long 
  3733 ;;  divisor         4    4[BANK0 ] long 
  3734 ;; Auto vars:     Size  Location     Type
  3735 ;;  quotient        4   10[BANK0 ] long 
  3736 ;;  sign            1    9[BANK0 ] unsigned char 
  3737 ;;  counter         1    8[BANK0 ] unsigned char 
  3738 ;; Return value:  Size  Location     Type
  3739 ;;                  4    0[BANK0 ] long 
  3740 ;; Registers used:
  3741 ;;		wreg, status,2, status,0
  3742 ;; Tracked objects:
  3743 ;;		On entry : 0/0
  3744 ;;		On exit  : 0/0
  3745 ;;		Unchanged: 0/0
  3746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3747 ;;      Params:         0       8       0       0       0       0       0       0       0
  3748 ;;      Locals:         0       6       0       0       0       0       0       0       0
  3749 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3750 ;;      Totals:         0      14       0       0       0       0       0       0       0
  3751 ;;Total ram usage:       14 bytes
  3752 ;; Hardware stack levels used:    1
  3753 ;; Hardware stack levels required when called:    3
  3754 ;; This function calls:
  3755 ;;		Nothing
  3756 ;; This function is called by:
  3757 ;;		_configura_baudrate_uart
  3758 ;; This function uses a non-reentrant model
  3759 ;;
  3760                           
  3761                           	psect	text16
  3762  003F0A                     __ptext16:
  3763                           	opt stack 0
  3764  003F0A                     ___aldiv:
  3765                           	opt stack 25
  3766                           
  3767                           ; BSR set to: 0
  3768                           ;incstack = 0
  3769  003F0A  0E00               	movlw	0
  3770  003F0C  0100               	movlb	0	; () banked
  3771  003F0E  6F69               	movwf	___aldiv@sign& (0+255),b
  3772                           
  3773                           ; BSR set to: 0
  3774  003F10  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  3775  003F12  D00A               	goto	l1384
  3776                           
  3777                           ; BSR set to: 0
  3778  003F14  1F67               	comf	(___aldiv@divisor+3)& (0+255),f,b
  3779  003F16  1F66               	comf	(___aldiv@divisor+2)& (0+255),f,b
  3780  003F18  1F65               	comf	(___aldiv@divisor+1)& (0+255),f,b
  3781  003F1A  6D64               	negf	___aldiv@divisor& (0+255),b
  3782  003F1C  0E00               	movlw	0
  3783  003F1E  2365               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  3784  003F20  2366               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  3785  003F22  2367               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  3786                           
  3787                           ; BSR set to: 0
  3788  003F24  0E01               	movlw	1
  3789  003F26  6F69               	movwf	___aldiv@sign& (0+255),b
  3790  003F28                     l1384:
  3791                           
  3792                           ; BSR set to: 0
  3793                           
  3794                           ; BSR set to: 0
  3795  003F28  AF63               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  3796  003F2A  D00A               	goto	l1385
  3797                           
  3798                           ; BSR set to: 0
  3799  003F2C  1F63               	comf	(___aldiv@dividend+3)& (0+255),f,b
  3800  003F2E  1F62               	comf	(___aldiv@dividend+2)& (0+255),f,b
  3801  003F30  1F61               	comf	(___aldiv@dividend+1)& (0+255),f,b
  3802  003F32  6D60               	negf	___aldiv@dividend& (0+255),b
  3803  003F34  0E00               	movlw	0
  3804  003F36  2361               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  3805  003F38  2362               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  3806  003F3A  2363               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  3807                           
  3808                           ; BSR set to: 0
  3809  003F3C  0E01               	movlw	1
  3810  003F3E  1B69               	xorwf	___aldiv@sign& (0+255),f,b
  3811  003F40                     l1385:
  3812                           
  3813                           ; BSR set to: 0
  3814                           
  3815                           ; BSR set to: 0
  3816  003F40  0E00               	movlw	0
  3817  003F42  6F6A               	movwf	___aldiv@quotient& (0+255),b
  3818  003F44  0E00               	movlw	0
  3819  003F46  6F6B               	movwf	(___aldiv@quotient+1)& (0+255),b
  3820  003F48  0E00               	movlw	0
  3821  003F4A  6F6C               	movwf	(___aldiv@quotient+2)& (0+255),b
  3822  003F4C  0E00               	movlw	0
  3823  003F4E  6F6D               	movwf	(___aldiv@quotient+3)& (0+255),b
  3824                           
  3825                           ; BSR set to: 0
  3826  003F50  5164               	movf	___aldiv@divisor& (0+255),w,b
  3827  003F52  1165               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  3828  003F54  1166               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  3829  003F56  1167               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  3830  003F58  B4D8               	btfsc	status,2,c
  3831  003F5A  D02A               	goto	l1392
  3832                           
  3833                           ; BSR set to: 0
  3834  003F5C  0E01               	movlw	1
  3835  003F5E  6F68               	movwf	___aldiv@counter& (0+255),b
  3836  003F60  D006               	goto	l1387
  3837  003F62                     
  3838                           ; BSR set to: 0
  3839                           
  3840                           ; BSR set to: 0
  3841  003F62  90D8               	bcf	status,0,c
  3842  003F64  3764               	rlcf	___aldiv@divisor& (0+255),f,b
  3843  003F66  3765               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  3844  003F68  3766               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  3845  003F6A  3767               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  3846  003F6C  2B68               	incf	___aldiv@counter& (0+255),f,b
  3847  003F6E                     l1387:
  3848                           
  3849                           ; BSR set to: 0
  3850                           
  3851                           ; BSR set to: 0
  3852  003F6E  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  3853  003F70  D7F8               	goto	l1388
  3854  003F72                     u11920:
  3855                           
  3856                           ; BSR set to: 0
  3857                           
  3858                           ; BSR set to: 0
  3859                           
  3860                           ; BSR set to: 0
  3861  003F72  90D8               	bcf	status,0,c
  3862  003F74  376A               	rlcf	___aldiv@quotient& (0+255),f,b
  3863  003F76  376B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  3864  003F78  376C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  3865  003F7A  376D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  3866                           
  3867                           ; BSR set to: 0
  3868  003F7C  5164               	movf	___aldiv@divisor& (0+255),w,b
  3869  003F7E  5D60               	subwf	___aldiv@dividend& (0+255),w,b
  3870  003F80  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  3871  003F82  5961               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  3872  003F84  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  3873  003F86  5962               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  3874  003F88  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  3875  003F8A  5963               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  3876  003F8C  A0D8               	btfss	status,0,c
  3877  003F8E  D009               	goto	l1391
  3878                           
  3879                           ; BSR set to: 0
  3880  003F90  5164               	movf	___aldiv@divisor& (0+255),w,b
  3881  003F92  5F60               	subwf	___aldiv@dividend& (0+255),f,b
  3882  003F94  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  3883  003F96  5B61               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  3884  003F98  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  3885  003F9A  5B62               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  3886  003F9C  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  3887  003F9E  5B63               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  3888                           
  3889                           ; BSR set to: 0
  3890  003FA0  816A               	bsf	___aldiv@quotient& (0+255),0,b
  3891  003FA2                     l1391:
  3892                           
  3893                           ; BSR set to: 0
  3894                           
  3895                           ; BSR set to: 0
  3896  003FA2  90D8               	bcf	status,0,c
  3897  003FA4  3367               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  3898  003FA6  3366               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  3899  003FA8  3365               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  3900  003FAA  3364               	rrcf	___aldiv@divisor& (0+255),f,b
  3901                           
  3902                           ; BSR set to: 0
  3903  003FAC  2F68               	decfsz	___aldiv@counter& (0+255),f,b
  3904  003FAE  D7E1               	goto	u11920
  3905  003FB0                     l1392:
  3906                           
  3907                           ; BSR set to: 0
  3908                           
  3909                           ; BSR set to: 0
  3910                           
  3911                           ; BSR set to: 0
  3912  003FB0  5169               	movf	___aldiv@sign& (0+255),w,b
  3913  003FB2  B4D8               	btfsc	status,2,c
  3914  003FB4  D008               	goto	l1393
  3915                           
  3916                           ; BSR set to: 0
  3917  003FB6  1F6D               	comf	(___aldiv@quotient+3)& (0+255),f,b
  3918  003FB8  1F6C               	comf	(___aldiv@quotient+2)& (0+255),f,b
  3919  003FBA  1F6B               	comf	(___aldiv@quotient+1)& (0+255),f,b
  3920  003FBC  6D6A               	negf	___aldiv@quotient& (0+255),b
  3921  003FBE  0E00               	movlw	0
  3922  003FC0  236B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  3923  003FC2  236C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  3924  003FC4  236D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  3925  003FC6                     l1393:
  3926                           
  3927                           ; BSR set to: 0
  3928                           
  3929                           ; BSR set to: 0
  3930  003FC6  C06A  F060         	movff	___aldiv@quotient,?___aldiv
  3931  003FCA  C06B  F061         	movff	___aldiv@quotient+1,?___aldiv+1
  3932  003FCE  C06C  F062         	movff	___aldiv@quotient+2,?___aldiv+2
  3933  003FD2  C06D  F063         	movff	___aldiv@quotient+3,?___aldiv+3
  3934  003FD6  0012               	return	
  3935  003FD8                     __end_of___aldiv:
  3936                           	opt stack 0
  3937                           tosu	equ	0xFFF
  3938                           tosh	equ	0xFFE
  3939                           tosl	equ	0xFFD
  3940                           pclath	equ	0xFFA
  3941                           tblptru	equ	0xFF8
  3942                           tblptrh	equ	0xFF7
  3943                           tblptrl	equ	0xFF6
  3944                           tablat	equ	0xFF5
  3945                           prodh	equ	0xFF4
  3946                           prodl	equ	0xFF3
  3947                           intcon	equ	0xFF2
  3948                           intcon2	equ	0xFF1
  3949                           intcon3	equ	0xFF0
  3950                           postinc0	equ	0xFEE
  3951                           wreg	equ	0xFE8
  3952                           postinc1	equ	0xFE6
  3953                           postdec1	equ	0xFE5
  3954                           fsr1h	equ	0xFE2
  3955                           fsr1l	equ	0xFE1
  3956                           postinc2	equ	0xFDE
  3957                           postdec2	equ	0xFDD
  3958                           fsr2h	equ	0xFDA
  3959                           fsr2l	equ	0xFD9
  3960                           status	equ	0xFD8
  3961                           
  3962 ;; *************** function _inicializa_SPI *****************
  3963 ;; Defined at:
  3964 ;;		line 49 in file "bibliotecas/SPI.c"
  3965 ;; Parameters:    Size  Location     Type
  3966 ;;		None
  3967 ;; Auto vars:     Size  Location     Type
  3968 ;;		None
  3969 ;; Return value:  Size  Location     Type
  3970 ;;                  1    wreg      void 
  3971 ;; Registers used:
  3972 ;;		wreg, status,2, status,0
  3973 ;; Tracked objects:
  3974 ;;		On entry : 0/0
  3975 ;;		On exit  : 0/0
  3976 ;;		Unchanged: 0/0
  3977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3978 ;;      Params:         0       0       0       0       0       0       0       0       0
  3979 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3980 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3981 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3982 ;;Total ram usage:        0 bytes
  3983 ;; Hardware stack levels used:    1
  3984 ;; Hardware stack levels required when called:    3
  3985 ;; This function calls:
  3986 ;;		Nothing
  3987 ;; This function is called by:
  3988 ;;		_escrita_sdcard
  3989 ;;		_sdcard_init
  3990 ;; This function uses a non-reentrant model
  3991 ;;
  3992                           
  3993                           	psect	text17
  3994  005174                     __ptext17:
  3995                           	opt stack 0
  3996  005174                     _inicializa_SPI:
  3997                           	opt stack 25
  3998                           
  3999                           ;SPI.c: 51: TRISBbits.RB1 = 0;
  4000                           
  4001                           ; BSR set to: 0
  4002                           ;incstack = 0
  4003  005174  9293               	bcf	3987,1,c	;volatile
  4004                           
  4005                           ;SPI.c: 52: TRISBbits.RB4 = 0;
  4006  005176  9893               	bcf	3987,4,c	;volatile
  4007                           
  4008                           ;SPI.c: 53: TRISBbits.RB0 = 1;
  4009  005178  8093               	bsf	3987,0,c	;volatile
  4010                           
  4011                           ;SPI.c: 54: TRISCbits.RC7 = 0;
  4012  00517A  9E94               	bcf	3988,7,c	;volatile
  4013                           
  4014                           ;SPI.c: 56: LATBbits.LATB4 = 1;
  4015  00517C  888A               	bsf	3978,4,c	;volatile
  4016                           
  4017                           ;SPI.c: 57: SSPSTAT &= 0x3F;
  4018  00517E  0E3F               	movlw	63
  4019  005180  16C7               	andwf	4039,f,c	;volatile
  4020                           
  4021                           ;SPI.c: 58: SSPCON1 = 0x00;
  4022  005182  0E00               	movlw	0
  4023  005184  6EC6               	movwf	4038,c	;volatile
  4024                           
  4025                           ;SPI.c: 60: SSPSTATbits.SMP = 0;
  4026  005186  9EC7               	bcf	4039,7,c	;volatile
  4027                           
  4028                           ;SPI.c: 61: SSPSTATbits.CKE = 1;
  4029  005188  8CC7               	bsf	4039,6,c	;volatile
  4030                           
  4031                           ;SPI.c: 62: SSPCON1bits.CKP = 0;
  4032  00518A  98C6               	bcf	4038,4,c	;volatile
  4033                           
  4034                           ;SPI.c: 64: SSPCON1 = 0b00000011;
  4035  00518C  0E03               	movlw	3
  4036  00518E  6EC6               	movwf	4038,c	;volatile
  4037                           
  4038                           ;SPI.c: 66: SSPCON1bits.SSPEN = 1;
  4039  005190  8AC6               	bsf	4038,5,c	;volatile
  4040  005192  0012               	return		;funcret
  4041  005194                     __end_of_inicializa_SPI:
  4042                           	opt stack 0
  4043                           tosu	equ	0xFFF
  4044                           tosh	equ	0xFFE
  4045                           tosl	equ	0xFFD
  4046                           pclath	equ	0xFFA
  4047                           tblptru	equ	0xFF8
  4048                           tblptrh	equ	0xFF7
  4049                           tblptrl	equ	0xFF6
  4050                           tablat	equ	0xFF5
  4051                           prodh	equ	0xFF4
  4052                           prodl	equ	0xFF3
  4053                           intcon	equ	0xFF2
  4054                           intcon2	equ	0xFF1
  4055                           intcon3	equ	0xFF0
  4056                           postinc0	equ	0xFEE
  4057                           wreg	equ	0xFE8
  4058                           postinc1	equ	0xFE6
  4059                           postdec1	equ	0xFE5
  4060                           fsr1h	equ	0xFE2
  4061                           fsr1l	equ	0xFE1
  4062                           postinc2	equ	0xFDE
  4063                           postdec2	equ	0xFDD
  4064                           fsr2h	equ	0xFDA
  4065                           fsr2l	equ	0xFD9
  4066                           status	equ	0xFD8
  4067                           
  4068 ;; *************** function _fprintf *****************
  4069 ;; Defined at:
  4070 ;;		line 1808 in file "bibliotecas/tff.c"
  4071 ;; Parameters:    Size  Location     Type
  4072 ;;  fil             2    7[BANK1 ] PTR struct _FIL
  4073 ;;		 -> fil(28), 
  4074 ;;  str             2    9[BANK1 ] PTR const unsigned char 
  4075 ;;		 -> STR_9(21), 
  4076 ;; Auto vars:     Size  Location     Type
  4077 ;;  s              16   21[BANK1 ] unsigned char [16]
  4078 ;;  val             4   45[BANK1 ] unsigned long 
  4079 ;;  i               2   53[BANK1 ] int 
  4080 ;;  cc              2   51[BANK1 ] int 
  4081 ;;  arp             2   49[BANK1 ] PTR void [1]
  4082 ;;		 -> ?_fprintf(2), 
  4083 ;;  w               2   41[BANK1 ] int 
  4084 ;;  res             2   37[BANK1 ] int 
  4085 ;;  c               1   55[BANK1 ] unsigned char 
  4086 ;;  r               1   44[BANK1 ] unsigned char 
  4087 ;;  f               1   43[BANK1 ] unsigned char 
  4088 ;; Return value:  Size  Location     Type
  4089 ;;                  2    7[BANK1 ] int 
  4090 ;; Registers used:
  4091 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4092 ;; Tracked objects:
  4093 ;;		On entry : 0/0
  4094 ;;		On exit  : 0/0
  4095 ;;		Unchanged: 0/0
  4096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4097 ;;      Params:         0       0      12       0       0       0       0       0       0
  4098 ;;      Locals:         0       0      35       0       0       0       0       0       0
  4099 ;;      Temps:          0       0       2       0       0       0       0       0       0
  4100 ;;      Totals:         0       0      49       0       0       0       0       0       0
  4101 ;;Total ram usage:       49 bytes
  4102 ;; Hardware stack levels used:    1
  4103 ;; Hardware stack levels required when called:   14
  4104 ;; This function calls:
  4105 ;;		___lldiv
  4106 ;;		___llmod
  4107 ;;		___wmul
  4108 ;;		_fputc
  4109 ;;		_fputs
  4110 ;; This function is called by:
  4111 ;;		_escrita_sdcard
  4112 ;; This function uses a non-reentrant model
  4113 ;;
  4114                           
  4115                           	psect	text18
  4116  001816                     __ptext18:
  4117                           	opt stack 0
  4118  001816                     _fprintf:
  4119                           	opt stack 14
  4120                           
  4121                           ;tff.c: 1814: va_list arp;
  4122                           ;tff.c: 1815: UCHAR c, f, r;
  4123                           ;tff.c: 1816: ULONG val;
  4124                           ;tff.c: 1817: char s[16];
  4125                           ;tff.c: 1818: int i, w, res, cc;
  4126                           ;tff.c: 1821: *arp = __va_start();
  4127                           
  4128                           ;incstack = 0
  4129  001816  0E97               	movlw	low (?_fprintf+4)
  4130  001818  0101               	movlb	1	; () banked
  4131  00181A  6FBD               	movwf	fprintf@arp& (0+255),b
  4132  00181C  0E01               	movlw	high (?_fprintf+4)
  4133  00181E  6FBE               	movwf	(fprintf@arp+1)& (0+255),b
  4134                           
  4135                           ; BSR set to: 1
  4136                           ;tff.c: 1823: for (cc = res = 0; cc != -1; res += cc) {
  4137  001820  0E00               	movlw	0
  4138  001822  6FB2               	movwf	(fprintf@res+1)& (0+255),b
  4139  001824  0E00               	movlw	0
  4140  001826  6FB1               	movwf	fprintf@res& (0+255),b
  4141  001828  C1B1  F1BF         	movff	fprintf@res,fprintf@cc
  4142  00182C  C1B2  F1C0         	movff	fprintf@res+1,fprintf@cc+1
  4143                           
  4144                           ; BSR set to: 1
  4145  001830  29BF               	incf	fprintf@cc& (0+255),w,b
  4146  001832  E103               	bnz	l10365
  4147  001834  29C0               	incf	(fprintf@cc+1)& (0+255),w,b
  4148  001836  B4D8               	btfsc	status,2,c
  4149  001838  0012               	return	
  4150  00183A                     l10365:
  4151                           
  4152                           ; BSR set to: 1
  4153                           ;tff.c: 1824: c = *str++;
  4154  00183A  C195  FFF6         	movff	fprintf@str,tblptrl
  4155  00183E  C196  FFF7         	movff	fprintf@str+1,tblptrh
  4156  001842                     	if	0	;tblptru may be non-zero
  4157  001842                     	endif
  4158  001842                     	if	0	;tblptru may be non-zero
  4159  001842                     	endif
  4160  001842  0008               	tblrd		*
  4161  001844  CFF5 F1C3          	movff	tablat,fprintf@c
  4162                           
  4163                           ; BSR set to: 1
  4164  001848  4B95               	infsnz	fprintf@str& (0+255),f,b
  4165  00184A  2B96               	incf	(fprintf@str+1)& (0+255),f,b
  4166                           
  4167                           ; BSR set to: 1
  4168                           ;tff.c: 1825: if (c == 0) break;
  4169  00184C  51C3               	movf	fprintf@c& (0+255),w,b
  4170  00184E  B4D8               	btfsc	status,2,c
  4171  001850  0012               	return	
  4172                           
  4173                           ; BSR set to: 1
  4174                           ;tff.c: 1826: if (c != '%') {
  4175                           
  4176                           ; BSR set to: 1
  4177                           
  4178                           ; BSR set to: 1
  4179  001852  0E25               	movlw	37
  4180  001854  19C3               	xorwf	fprintf@c& (0+255),w,b
  4181  001856  B4D8               	btfsc	status,2,c
  4182  001858  D015               	goto	l1251
  4183                           
  4184                           ; BSR set to: 1
  4185                           ;tff.c: 1827: cc = fputc(c, fil);
  4186  00185A  C1C3  F0E5         	movff	fprintf@c,fputc@chr
  4187  00185E  0100               	movlb	0	; () banked
  4188  001860  6BE6               	clrf	(fputc@chr+1)& (0+255),b
  4189  001862  C193  F0E7         	movff	fprintf@fil,fputc@fil
  4190  001866  C194  F0E8         	movff	fprintf@fil+1,fputc@fil+1
  4191  00186A  ECAD  F025         	call	_fputc	;wreg free
  4192  00186E  C0E5  F1BF         	movff	?_fputc,fprintf@cc
  4193  001872  C0E6  F1C0         	movff	?_fputc+1,fprintf@cc+1
  4194                           
  4195                           ;tff.c: 1828: if (cc != -1) cc = 1;
  4196  001876  0101               	movlb	1	; () banked
  4197  001878  29BF               	incf	fprintf@cc& (0+255),w,b
  4198  00187A  E103               	bnz	u13100
  4199  00187C  29C0               	incf	(fprintf@cc+1)& (0+255),w,b
  4200  00187E  B4D8               	btfsc	status,2,c
  4201  001880  D195               	goto	l1253
  4202  001882                     u13100:
  4203  001882  D08B               	goto	u13170
  4204  001884                     l1251:
  4205                           
  4206                           ; BSR set to: 1
  4207                           ;tff.c: 1830: }
  4208                           ;tff.c: 1831: w = f = 0;
  4209                           
  4210                           ; BSR set to: 1
  4211  001884  0E00               	movlw	0
  4212  001886  6FB7               	movwf	fprintf@f& (0+255),b
  4213  001888  C1B7  F1B5         	movff	fprintf@f,fprintf@w
  4214  00188C  6BB6               	clrf	(fprintf@w+1)& (0+255),b
  4215                           
  4216                           ; BSR set to: 1
  4217                           ;tff.c: 1832: c = *str++;
  4218  00188E  C195  FFF6         	movff	fprintf@str,tblptrl
  4219  001892  C196  FFF7         	movff	fprintf@str+1,tblptrh
  4220  001896                     	if	0	;tblptru may be non-zero
  4221  001896                     	endif
  4222  001896                     	if	0	;tblptru may be non-zero
  4223  001896                     	endif
  4224  001896  0008               	tblrd		*
  4225  001898  CFF5 F1C3          	movff	tablat,fprintf@c
  4226                           
  4227                           ; BSR set to: 1
  4228  00189C  4B95               	infsnz	fprintf@str& (0+255),f,b
  4229  00189E  2B96               	incf	(fprintf@str+1)& (0+255),f,b
  4230                           
  4231                           ; BSR set to: 1
  4232                           ;tff.c: 1833: if (c == '0') {
  4233  0018A0  0E30               	movlw	48
  4234  0018A2  19C3               	xorwf	fprintf@c& (0+255),w,b
  4235  0018A4  A4D8               	btfss	status,2,c
  4236  0018A6  D029               	goto	l1255
  4237                           
  4238                           ; BSR set to: 1
  4239                           ;tff.c: 1834: f = 1; c = *str++;
  4240  0018A8  0E01               	movlw	1
  4241  0018AA  6FB7               	movwf	fprintf@f& (0+255),b
  4242  0018AC  D01D               	goto	l10397
  4243  0018AE                     
  4244                           ; BSR set to: 1
  4245                           ;tff.c: 1837: w = w * 10 + (c - '0');
  4246                           
  4247                           ; BSR set to: 1
  4248  0018AE  C1B5  F060         	movff	fprintf@w,___wmul@multiplier
  4249  0018B2  C1B6  F061         	movff	fprintf@w+1,___wmul@multiplier+1
  4250  0018B6  0E00               	movlw	0
  4251  0018B8  0100               	movlb	0	; () banked
  4252  0018BA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4253  0018BC  0E0A               	movlw	10
  4254  0018BE  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4255  0018C0  EC94  F028         	call	___wmul	;wreg free
  4256  0018C4  0101               	movlb	1	; () banked
  4257  0018C6  51C3               	movf	fprintf@c& (0+255),w,b
  4258  0018C8  6F9F               	movwf	??_fprintf& (0+255),b
  4259  0018CA  6BA0               	clrf	(??_fprintf+1)& (0+255),b
  4260  0018CC  0100               	movlb	0	; () banked
  4261  0018CE  5160               	movf	?___wmul& (0+255),w,b
  4262  0018D0  0101               	movlb	1	; () banked
  4263  0018D2  279F               	addwf	??_fprintf& (0+255),f,b
  4264  0018D4  0100               	movlb	0	; () banked
  4265  0018D6  5161               	movf	(?___wmul+1)& (0+255),w,b
  4266  0018D8  0101               	movlb	1	; () banked
  4267  0018DA  23A0               	addwfc	(??_fprintf+1)& (0+255),f,b
  4268  0018DC  0ED0               	movlw	208
  4269  0018DE  259F               	addwf	??_fprintf& (0+255),w,b
  4270  0018E0  6FB5               	movwf	fprintf@w& (0+255),b
  4271  0018E2  0EFF               	movlw	255
  4272  0018E4  21A0               	addwfc	(??_fprintf+1)& (0+255),w,b
  4273  0018E6  6FB6               	movwf	(fprintf@w+1)& (0+255),b
  4274  0018E8                     l10397:
  4275                           
  4276                           ; BSR set to: 1
  4277                           ;tff.c: 1838: c = *str++;
  4278  0018E8  C195  FFF6         	movff	fprintf@str,tblptrl
  4279  0018EC  C196  FFF7         	movff	fprintf@str+1,tblptrh
  4280  0018F0                     	if	0	;tblptru may be non-zero
  4281  0018F0                     	endif
  4282  0018F0                     	if	0	;tblptru may be non-zero
  4283  0018F0                     	endif
  4284  0018F0  0008               	tblrd		*
  4285  0018F2  CFF5 F1C3          	movff	tablat,fprintf@c
  4286                           
  4287                           ; BSR set to: 1
  4288  0018F6  4B95               	infsnz	fprintf@str& (0+255),f,b
  4289  0018F8  2B96               	incf	(fprintf@str+1)& (0+255),f,b
  4290  0018FA                     l1255:
  4291                           
  4292                           ; BSR set to: 1
  4293                           
  4294                           ; BSR set to: 1
  4295  0018FA  0E2F               	movlw	47
  4296  0018FC  65C3               	cpfsgt	fprintf@c& (0+255),b
  4297  0018FE  D003               	goto	u13130
  4298                           
  4299                           ; BSR set to: 1
  4300  001900  0E39               	movlw	57
  4301  001902  65C3               	cpfsgt	fprintf@c& (0+255),b
  4302  001904  D7D4               	goto	l1256
  4303  001906                     u13130:
  4304                           
  4305                           ; BSR set to: 1
  4306                           ;tff.c: 1839: }
  4307                           ;tff.c: 1840: if (c == 'l') {
  4308                           
  4309                           ; BSR set to: 1
  4310                           
  4311                           ; BSR set to: 1
  4312  001906  0E6C               	movlw	108
  4313  001908  19C3               	xorwf	fprintf@c& (0+255),w,b
  4314  00190A  A4D8               	btfss	status,2,c
  4315  00190C  D00A               	goto	l1260
  4316                           
  4317                           ; BSR set to: 1
  4318                           ;tff.c: 1841: f |= 2; c = *str++;
  4319  00190E  83B7               	bsf	fprintf@f& (0+255),1,b
  4320                           
  4321                           ; BSR set to: 1
  4322  001910  C195  FFF6         	movff	fprintf@str,tblptrl
  4323  001914  C196  FFF7         	movff	fprintf@str+1,tblptrh
  4324  001918                     	if	0	;tblptru may be non-zero
  4325  001918                     	endif
  4326  001918                     	if	0	;tblptru may be non-zero
  4327  001918                     	endif
  4328  001918  0008               	tblrd		*
  4329  00191A  CFF5 F1C3          	movff	tablat,fprintf@c
  4330                           
  4331                           ; BSR set to: 1
  4332  00191E  4B95               	infsnz	fprintf@str& (0+255),f,b
  4333  001920  2B96               	incf	(fprintf@str+1)& (0+255),f,b
  4334  001922                     l1260:
  4335                           
  4336                           ; BSR set to: 1
  4337                           ;tff.c: 1842: }
  4338                           ;tff.c: 1843: if (c == 's') {
  4339                           
  4340                           ; BSR set to: 1
  4341  001922  0E73               	movlw	115
  4342  001924  19C3               	xorwf	fprintf@c& (0+255),w,b
  4343  001926  A4D8               	btfss	status,2,c
  4344  001928  D018               	goto	l1261
  4345                           
  4346                           ; BSR set to: 1
  4347                           ;tff.c: 1844: cc = fputs((*(char* *)__va_arg((*(char* **)arp), (char*)0)), fil);
  4348  00192A  C1BD  FFD9         	movff	fprintf@arp,fsr2l
  4349  00192E  C1BE  FFDA         	movff	fprintf@arp+1,fsr2h
  4350  001932  CFDE F18C          	movff	postinc2,fputs@str
  4351  001936  CFDD F18D          	movff	postdec2,fputs@str+1
  4352  00193A  C193  F18E         	movff	fprintf@fil,fputs@fil
  4353  00193E  C194  F18F         	movff	fprintf@fil+1,fputs@fil+1
  4354  001942  EC23  F025         	call	_fputs	;wreg free
  4355  001946  C18C  F1BF         	movff	?_fputs,fprintf@cc
  4356  00194A  C18D  F1C0         	movff	?_fputs+1,fprintf@cc+1
  4357  00194E  0E02               	movlw	2
  4358  001950  0101               	movlb	1	; () banked
  4359  001952  27BD               	addwf	fprintf@arp& (0+255),f,b
  4360  001954  0E00               	movlw	0
  4361  001956  23BE               	addwfc	(fprintf@arp+1)& (0+255),f,b
  4362                           
  4363                           ;tff.c: 1845: continue;
  4364  001958  D129               	goto	l1253
  4365  00195A                     l1261:
  4366                           
  4367                           ; BSR set to: 1
  4368                           ;tff.c: 1846: }
  4369                           ;tff.c: 1847: if (c == 'c') {
  4370                           
  4371                           ; BSR set to: 1
  4372  00195A  0E63               	movlw	99
  4373  00195C  19C3               	xorwf	fprintf@c& (0+255),w,b
  4374  00195E  A4D8               	btfss	status,2,c
  4375  001960  D021               	goto	l1262
  4376                           
  4377                           ; BSR set to: 1
  4378                           ;tff.c: 1848: cc = fputc((*(char *)__va_arg((*(char **)arp), (char)0)), fil);
  4379  001962  C1BD  FFD9         	movff	fprintf@arp,fsr2l
  4380  001966  C1BE  FFDA         	movff	fprintf@arp+1,fsr2h
  4381  00196A  50DF               	movf	indf2,w,c
  4382  00196C  6F9F               	movwf	??_fprintf& (0+255),b
  4383  00196E  519F               	movf	??_fprintf& (0+255),w,b
  4384  001970  0100               	movlb	0	; () banked
  4385  001972  6FE5               	movwf	fputc@chr& (0+255),b
  4386  001974  6BE6               	clrf	(fputc@chr+1)& (0+255),b
  4387  001976  C193  F0E7         	movff	fprintf@fil,fputc@fil
  4388  00197A  C194  F0E8         	movff	fprintf@fil+1,fputc@fil+1
  4389  00197E  ECAD  F025         	call	_fputc	;wreg free
  4390  001982  C0E5  F1BF         	movff	?_fputc,fprintf@cc
  4391  001986  C0E6  F1C0         	movff	?_fputc+1,fprintf@cc+1
  4392  00198A  0E02               	movlw	2
  4393  00198C  0101               	movlb	1	; () banked
  4394  00198E  27BD               	addwf	fprintf@arp& (0+255),f,b
  4395  001990  0E00               	movlw	0
  4396  001992  23BE               	addwfc	(fprintf@arp+1)& (0+255),f,b
  4397                           
  4398                           ; BSR set to: 1
  4399                           ;tff.c: 1849: if (cc != -1) cc = 1;
  4400  001994  29BF               	incf	fprintf@cc& (0+255),w,b
  4401  001996  E101               	bnz	u13170
  4402  001998  D771               	goto	L1
  4403  00199A                     u13170:
  4404                           
  4405                           ; BSR set to: 1
  4406  00199A  0E00               	movlw	0
  4407  00199C  6FC0               	movwf	(fprintf@cc+1)& (0+255),b
  4408  00199E  0E01               	movlw	1
  4409  0019A0  6FBF               	movwf	fprintf@cc& (0+255),b
  4410                           
  4411                           ; BSR set to: 1
  4412                           ;tff.c: 1850: continue;
  4413  0019A2  D104               	goto	l1253
  4414  0019A4                     l1262:
  4415                           
  4416                           ; BSR set to: 1
  4417                           ;tff.c: 1851: }
  4418                           ;tff.c: 1852: r = 0;
  4419                           
  4420                           ; BSR set to: 1
  4421  0019A4  0E00               	movlw	0
  4422  0019A6  6FB8               	movwf	fprintf@r& (0+255),b
  4423                           
  4424                           ; BSR set to: 1
  4425                           ;tff.c: 1853: if (c == 'd') r = 10;
  4426  0019A8  0E64               	movlw	100
  4427  0019AA  19C3               	xorwf	fprintf@c& (0+255),w,b
  4428  0019AC  A4D8               	btfss	status,2,c
  4429  0019AE  D002               	goto	l1264
  4430                           
  4431                           ; BSR set to: 1
  4432  0019B0  0E0A               	movlw	10
  4433  0019B2  6FB8               	movwf	fprintf@r& (0+255),b
  4434  0019B4                     l1264:
  4435                           
  4436                           ; BSR set to: 1
  4437                           ;tff.c: 1854: if (c == 'u') r = 10;
  4438                           
  4439                           ; BSR set to: 1
  4440  0019B4  0E75               	movlw	117
  4441  0019B6  19C3               	xorwf	fprintf@c& (0+255),w,b
  4442  0019B8  A4D8               	btfss	status,2,c
  4443  0019BA  D002               	goto	l1265
  4444                           
  4445                           ; BSR set to: 1
  4446  0019BC  0E0A               	movlw	10
  4447  0019BE  6FB8               	movwf	fprintf@r& (0+255),b
  4448  0019C0                     l1265:
  4449                           
  4450                           ; BSR set to: 1
  4451                           ;tff.c: 1855: if (c == 'X') r = 16;
  4452                           
  4453                           ; BSR set to: 1
  4454  0019C0  0E58               	movlw	88
  4455  0019C2  19C3               	xorwf	fprintf@c& (0+255),w,b
  4456  0019C4  A4D8               	btfss	status,2,c
  4457  0019C6  D002               	goto	l1266
  4458                           
  4459                           ; BSR set to: 1
  4460  0019C8  0E10               	movlw	16
  4461  0019CA  6FB8               	movwf	fprintf@r& (0+255),b
  4462  0019CC                     l1266:
  4463                           
  4464                           ; BSR set to: 1
  4465                           ;tff.c: 1856: if (r == 0) break;
  4466  0019CC  51B8               	movf	fprintf@r& (0+255),w,b
  4467  0019CE  B4D8               	btfsc	status,2,c
  4468  0019D0  0012               	return	
  4469                           
  4470                           ; BSR set to: 1
  4471                           ;tff.c: 1857: if (f & 2) {
  4472                           
  4473                           ; BSR set to: 1
  4474  0019D2  A3B7               	btfss	fprintf@f& (0+255),1,b
  4475  0019D4  D00E               	goto	l1268
  4476                           
  4477                           ; BSR set to: 1
  4478                           ;tff.c: 1858: val = (ULONG)(*(long *)__va_arg((*(long **)arp), (long)0));
  4479  0019D6  C1BD  FFD9         	movff	fprintf@arp,fsr2l
  4480  0019DA  C1BE  FFDA         	movff	fprintf@arp+1,fsr2h
  4481  0019DE  CFDE F1B9          	movff	postinc2,fprintf@val
  4482  0019E2  CFDE F1BA          	movff	postinc2,fprintf@val+1
  4483  0019E6  CFDE F1BB          	movff	postinc2,fprintf@val+2
  4484  0019EA  CFDE F1BC          	movff	postinc2,fprintf@val+3
  4485                           
  4486                           ; BSR set to: 1
  4487  0019EE  0E04               	movlw	4
  4488  0019F0  D021               	goto	L5
  4489  0019F2                     l1268:
  4490                           
  4491                           ; BSR set to: 1
  4492                           ;tff.c: 1860: val = (c == 'd') ? (ULONG)(long)(*(int *)__va_arg((*(int **)arp), (int)0))
      +                           : (ULONG)(*(unsigned int *)__va_arg((*(unsigned int **)arp), (unsigned int)0));
  4493                           
  4494                           ; BSR set to: 1
  4495  0019F2  0E64               	movlw	100
  4496  0019F4  19C3               	xorwf	fprintf@c& (0+255),w,b
  4497  0019F6  B4D8               	btfsc	status,2,c
  4498  0019F8  D00F               	goto	l1271
  4499                           
  4500                           ; BSR set to: 1
  4501  0019FA  C1BD  FFD9         	movff	fprintf@arp,fsr2l
  4502  0019FE  C1BE  FFDA         	movff	fprintf@arp+1,fsr2h
  4503  001A02  CFDE F19F          	movff	postinc2,??_fprintf
  4504  001A06  CFDD F1A0          	movff	postdec2,??_fprintf+1
  4505  001A0A  C19F  F1B9         	movff	??_fprintf,fprintf@val
  4506  001A0E  C1A0  F1BA         	movff	??_fprintf+1,fprintf@val+1
  4507  001A12  6BBB               	clrf	(fprintf@val+2)& (0+255),b
  4508  001A14  6BBC               	clrf	(fprintf@val+3)& (0+255),b
  4509  001A16  D00D               	goto	l10457
  4510  001A18                     l1271:
  4511                           
  4512                           ; BSR set to: 1
  4513                           
  4514                           ; BSR set to: 1
  4515  001A18  C1BD  FFD9         	movff	fprintf@arp,fsr2l
  4516  001A1C  C1BE  FFDA         	movff	fprintf@arp+1,fsr2h
  4517  001A20  CFDE F1B9          	movff	postinc2,fprintf@val
  4518  001A24  CFDD F1BA          	movff	postdec2,fprintf@val+1
  4519  001A28  0E00               	movlw	0
  4520  001A2A  BFBA               	btfsc	(fprintf@val+1)& (0+255),7,b
  4521  001A2C  0EFF               	movlw	-1
  4522  001A2E  6FBB               	movwf	(fprintf@val+2)& (0+255),b
  4523  001A30  6FBC               	movwf	(fprintf@val+3)& (0+255),b
  4524  001A32                     l10457:
  4525                           
  4526                           ; BSR set to: 1
  4527  001A32  0E02               	movlw	2
  4528  001A34                     L5:
  4529  001A34  27BD               	addwf	fprintf@arp& (0+255),f,b
  4530  001A36  0E00               	movlw	0
  4531  001A38  23BE               	addwfc	(fprintf@arp+1)& (0+255),f,b
  4532                           
  4533                           ; BSR set to: 1
  4534                           ;tff.c: 1861: }
  4535                           ;tff.c: 1863: if (c == 'd') {
  4536                           
  4537                           ; BSR set to: 1
  4538                           
  4539                           ; BSR set to: 1
  4540  001A3A  0E64               	movlw	100
  4541  001A3C  19C3               	xorwf	fprintf@c& (0+255),w,b
  4542  001A3E  A4D8               	btfss	status,2,c
  4543  001A40  D00D               	goto	l1275
  4544                           
  4545                           ; BSR set to: 1
  4546                           ;tff.c: 1864: if (val >= 0x80000000) {
  4547  001A42  0E80               	movlw	128
  4548  001A44  5DBC               	subwf	(fprintf@val+3)& (0+255),w,b
  4549  001A46  A0D8               	btfss	status,0,c
  4550  001A48  D009               	goto	l1275
  4551                           
  4552                           ; BSR set to: 1
  4553                           ;tff.c: 1865: val = 0 - val;
  4554  001A4A  1FBC               	comf	(fprintf@val+3)& (0+255),f,b
  4555  001A4C  1FBB               	comf	(fprintf@val+2)& (0+255),f,b
  4556  001A4E  1FBA               	comf	(fprintf@val+1)& (0+255),f,b
  4557  001A50  6DB9               	negf	fprintf@val& (0+255),b
  4558  001A52  0E00               	movlw	0
  4559  001A54  23BA               	addwfc	(fprintf@val+1)& (0+255),f,b
  4560  001A56  23BB               	addwfc	(fprintf@val+2)& (0+255),f,b
  4561  001A58  23BC               	addwfc	(fprintf@val+3)& (0+255),f,b
  4562                           
  4563                           ;tff.c: 1866: f |= 4;
  4564  001A5A  85B7               	bsf	fprintf@f& (0+255),2,b
  4565  001A5C                     l1275:
  4566                           
  4567                           ; BSR set to: 1
  4568                           ;tff.c: 1867: }
  4569                           ;tff.c: 1868: }
  4570                           ;tff.c: 1869: i = sizeof(s) - 1; s[i] = 0;
  4571                           
  4572                           ; BSR set to: 1
  4573                           
  4574                           ; BSR set to: 1
  4575  001A5C  0E00               	movlw	0
  4576  001A5E  6FC2               	movwf	(fprintf@i+1)& (0+255),b
  4577  001A60  0E0F               	movlw	15
  4578  001A62  6FC1               	movwf	fprintf@i& (0+255),b
  4579                           
  4580                           ; BSR set to: 1
  4581  001A64  0EA1               	movlw	low fprintf@s
  4582  001A66  25C1               	addwf	fprintf@i& (0+255),w,b
  4583  001A68  6ED9               	movwf	fsr2l,c
  4584  001A6A  0E01               	movlw	high fprintf@s
  4585  001A6C  21C2               	addwfc	(fprintf@i+1)& (0+255),w,b
  4586  001A6E  6EDA               	movwf	fsr2h,c
  4587  001A70  0E00               	movlw	0
  4588  001A72  6EDF               	movwf	indf2,c
  4589  001A74                     
  4590                           ; BSR set to: 1
  4591                           ;tff.c: 1871: c = (UCHAR)(val % r + '0');
  4592                           
  4593                           ; BSR set to: 1
  4594  001A74  C1B9  F060         	movff	fprintf@val,___llmod@dividend
  4595  001A78  C1BA  F061         	movff	fprintf@val+1,___llmod@dividend+1
  4596  001A7C  C1BB  F062         	movff	fprintf@val+2,___llmod@dividend+2
  4597  001A80  C1BC  F063         	movff	fprintf@val+3,___llmod@dividend+3
  4598  001A84  51B8               	movf	fprintf@r& (0+255),w,b
  4599  001A86  0100               	movlb	0	; () banked
  4600  001A88  6F64               	movwf	___llmod@divisor& (0+255),b
  4601  001A8A  6B65               	clrf	(___llmod@divisor+1)& (0+255),b
  4602  001A8C  6B66               	clrf	(___llmod@divisor+2)& (0+255),b
  4603  001A8E  6B67               	clrf	(___llmod@divisor+3)& (0+255),b
  4604  001A90  EC88  F024         	call	___llmod	;wreg free
  4605  001A94  0100               	movlb	0	; () banked
  4606  001A96  5160               	movf	?___llmod& (0+255),w,b
  4607  001A98  0F30               	addlw	48
  4608  001A9A  0101               	movlb	1	; () banked
  4609  001A9C  6FC3               	movwf	fprintf@c& (0+255),b
  4610                           
  4611                           ; BSR set to: 1
  4612                           ;tff.c: 1872: if (c > '9') c += 7;
  4613  001A9E  0E39               	movlw	57
  4614  001AA0  65C3               	cpfsgt	fprintf@c& (0+255),b
  4615  001AA2  D002               	goto	l1277
  4616                           
  4617                           ; BSR set to: 1
  4618  001AA4  0E07               	movlw	7
  4619  001AA6  27C3               	addwf	fprintf@c& (0+255),f,b
  4620  001AA8                     l1277:
  4621                           
  4622                           ; BSR set to: 1
  4623                           ;tff.c: 1873: s[--i] = c;
  4624                           
  4625                           ; BSR set to: 1
  4626  001AA8  07C1               	decf	fprintf@i& (0+255),f,b
  4627  001AAA  A0D8               	btfss	status,0,c
  4628  001AAC  07C2               	decf	(fprintf@i+1)& (0+255),f,b
  4629  001AAE  0EA1               	movlw	low fprintf@s
  4630  001AB0  25C1               	addwf	fprintf@i& (0+255),w,b
  4631  001AB2  6ED9               	movwf	fsr2l,c
  4632  001AB4  0E01               	movlw	high fprintf@s
  4633  001AB6  21C2               	addwfc	(fprintf@i+1)& (0+255),w,b
  4634  001AB8  6EDA               	movwf	fsr2h,c
  4635  001ABA  C1C3  FFDF         	movff	fprintf@c,indf2
  4636                           
  4637                           ; BSR set to: 1
  4638                           ;tff.c: 1874: val /= r;
  4639  001ABE  C1B9  F060         	movff	fprintf@val,___lldiv@dividend
  4640  001AC2  C1BA  F061         	movff	fprintf@val+1,___lldiv@dividend+1
  4641  001AC6  C1BB  F062         	movff	fprintf@val+2,___lldiv@dividend+2
  4642  001ACA  C1BC  F063         	movff	fprintf@val+3,___lldiv@dividend+3
  4643  001ACE  51B8               	movf	fprintf@r& (0+255),w,b
  4644  001AD0  0100               	movlb	0	; () banked
  4645  001AD2  6F64               	movwf	___lldiv@divisor& (0+255),b
  4646  001AD4  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
  4647  001AD6  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
  4648  001AD8  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
  4649  001ADA  EC93  F023         	call	___lldiv	;wreg free
  4650  001ADE  C060  F1B9         	movff	?___lldiv,fprintf@val
  4651  001AE2  C061  F1BA         	movff	?___lldiv+1,fprintf@val+1
  4652  001AE6  C062  F1BB         	movff	?___lldiv+2,fprintf@val+2
  4653  001AEA  C063  F1BC         	movff	?___lldiv+3,fprintf@val+3
  4654                           
  4655                           ;tff.c: 1875: } while (i && val);
  4656  001AEE  0101               	movlb	1	; () banked
  4657  001AF0  51C1               	movf	fprintf@i& (0+255),w,b
  4658  001AF2  11C2               	iorwf	(fprintf@i+1)& (0+255),w,b
  4659  001AF4  B4D8               	btfsc	status,2,c
  4660  001AF6  D006               	goto	u13280
  4661                           
  4662                           ; BSR set to: 1
  4663  001AF8  51B9               	movf	fprintf@val& (0+255),w,b
  4664  001AFA  11BA               	iorwf	(fprintf@val+1)& (0+255),w,b
  4665  001AFC  11BB               	iorwf	(fprintf@val+2)& (0+255),w,b
  4666  001AFE  11BC               	iorwf	(fprintf@val+3)& (0+255),w,b
  4667  001B00  A4D8               	btfss	status,2,c
  4668  001B02  D7B8               	goto	l1276
  4669  001B04                     u13280:
  4670                           
  4671                           ; BSR set to: 1
  4672                           ;tff.c: 1876: if (i && (f & 4)) s[--i] = '-';
  4673                           
  4674                           ; BSR set to: 1
  4675                           
  4676                           ; BSR set to: 1
  4677  001B04  51C1               	movf	fprintf@i& (0+255),w,b
  4678  001B06  11C2               	iorwf	(fprintf@i+1)& (0+255),w,b
  4679  001B08  A4D8               	btfss	status,2,c
  4680                           
  4681                           ; BSR set to: 1
  4682  001B0A  A5B7               	btfss	fprintf@f& (0+255),2,b
  4683  001B0C  D00B               	goto	l1281
  4684                           
  4685                           ; BSR set to: 1
  4686  001B0E  07C1               	decf	fprintf@i& (0+255),f,b
  4687  001B10  A0D8               	btfss	status,0,c
  4688  001B12  07C2               	decf	(fprintf@i+1)& (0+255),f,b
  4689  001B14  0EA1               	movlw	low fprintf@s
  4690  001B16  25C1               	addwf	fprintf@i& (0+255),w,b
  4691  001B18  6ED9               	movwf	fsr2l,c
  4692  001B1A  0E01               	movlw	high fprintf@s
  4693  001B1C  21C2               	addwfc	(fprintf@i+1)& (0+255),w,b
  4694  001B1E  6EDA               	movwf	fsr2h,c
  4695  001B20  0E2D               	movlw	45
  4696  001B22  6EDF               	movwf	indf2,c
  4697  001B24                     l1281:
  4698                           
  4699                           ; BSR set to: 1
  4700                           ;tff.c: 1877: w = sizeof(s) - 1 - w;
  4701                           
  4702                           ; BSR set to: 1
  4703  001B24  0E01               	movlw	1
  4704  001B26  25B5               	addwf	fprintf@w& (0+255),w,b
  4705  001B28  6F9F               	movwf	??_fprintf& (0+255),b
  4706  001B2A  0E00               	movlw	0
  4707  001B2C  21B6               	addwfc	(fprintf@w+1)& (0+255),w,b
  4708  001B2E  6FA0               	movwf	(??_fprintf+1)& (0+255),b
  4709  001B30  1F9F               	comf	??_fprintf& (0+255),f,b
  4710  001B32  1FA0               	comf	(??_fprintf+1)& (0+255),f,b
  4711  001B34  4B9F               	infsnz	??_fprintf& (0+255),f,b
  4712  001B36  2BA0               	incf	(??_fprintf+1)& (0+255),f,b
  4713  001B38  0E10               	movlw	16
  4714  001B3A  259F               	addwf	??_fprintf& (0+255),w,b
  4715  001B3C  6FB5               	movwf	fprintf@w& (0+255),b
  4716  001B3E  0E00               	movlw	0
  4717  001B40  21A0               	addwfc	(??_fprintf+1)& (0+255),w,b
  4718  001B42  6FB6               	movwf	(fprintf@w+1)& (0+255),b
  4719                           
  4720                           ;tff.c: 1878: while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
  4721  001B44  D015               	goto	l1282
  4722  001B46                     l1283:
  4723                           
  4724                           ; BSR set to: 1
  4725  001B46  B1B7               	btfsc	fprintf@f& (0+255),0,b
  4726  001B48  D004               	goto	l1285
  4727                           
  4728                           ; BSR set to: 1
  4729  001B4A  0E00               	movlw	0
  4730  001B4C  6FB4               	movwf	(_fprintf$2405+1)& (0+255),b
  4731  001B4E  0E20               	movlw	32
  4732  001B50  D003               	goto	L3
  4733  001B52                     l1285:
  4734                           
  4735                           ; BSR set to: 1
  4736                           
  4737                           ; BSR set to: 1
  4738  001B52  0E00               	movlw	0
  4739  001B54  6FB4               	movwf	(_fprintf$2405+1)& (0+255),b
  4740  001B56  0E30               	movlw	48
  4741  001B58                     L3:
  4742  001B58  6FB3               	movwf	_fprintf$2405& (0+255),b
  4743                           
  4744                           ; BSR set to: 1
  4745                           
  4746                           ; BSR set to: 1
  4747  001B5A  07C1               	decf	fprintf@i& (0+255),f,b
  4748  001B5C  A0D8               	btfss	status,0,c
  4749  001B5E  07C2               	decf	(fprintf@i+1)& (0+255),f,b
  4750  001B60  0EA1               	movlw	low fprintf@s
  4751  001B62  25C1               	addwf	fprintf@i& (0+255),w,b
  4752  001B64  6ED9               	movwf	fsr2l,c
  4753  001B66  0E01               	movlw	high fprintf@s
  4754  001B68  21C2               	addwfc	(fprintf@i+1)& (0+255),w,b
  4755  001B6A  6EDA               	movwf	fsr2h,c
  4756  001B6C  C1B3  FFDF         	movff	_fprintf$2405,indf2
  4757  001B70                     l1282:
  4758                           
  4759                           ; BSR set to: 1
  4760                           
  4761                           ; BSR set to: 1
  4762  001B70  51C1               	movf	fprintf@i& (0+255),w,b
  4763  001B72  11C2               	iorwf	(fprintf@i+1)& (0+255),w,b
  4764  001B74  B4D8               	btfsc	status,2,c
  4765  001B76  D00A               	goto	u13330
  4766                           
  4767                           ; BSR set to: 1
  4768  001B78  51C1               	movf	fprintf@i& (0+255),w,b
  4769  001B7A  5DB5               	subwf	fprintf@w& (0+255),w,b
  4770  001B7C  51B6               	movf	(fprintf@w+1)& (0+255),w,b
  4771  001B7E  0A80               	xorlw	128
  4772  001B80  6F9F               	movwf	??_fprintf& (0+255),b
  4773  001B82  51C2               	movf	(fprintf@i+1)& (0+255),w,b
  4774  001B84  0A80               	xorlw	128
  4775  001B86  599F               	subwfb	??_fprintf& (0+255),w,b
  4776  001B88  A0D8               	btfss	status,0,c
  4777  001B8A  D7DD               	goto	l1283
  4778  001B8C                     u13330:
  4779                           
  4780                           ; BSR set to: 1
  4781                           ;tff.c: 1879: cc = fputs(&s[i], fil);
  4782                           
  4783                           ; BSR set to: 1
  4784                           
  4785                           ; BSR set to: 1
  4786  001B8C  0EA1               	movlw	low fprintf@s
  4787  001B8E  25C1               	addwf	fprintf@i& (0+255),w,b
  4788  001B90  6F8C               	movwf	fputs@str& (0+255),b
  4789  001B92  0E01               	movlw	high fprintf@s
  4790  001B94  21C2               	addwfc	(fprintf@i+1)& (0+255),w,b
  4791  001B96  6F8D               	movwf	(fputs@str+1)& (0+255),b
  4792  001B98  C193  F18E         	movff	fprintf@fil,fputs@fil
  4793  001B9C  C194  F18F         	movff	fprintf@fil+1,fputs@fil+1
  4794  001BA0  EC23  F025         	call	_fputs	;wreg free
  4795  001BA4  C18C  F1BF         	movff	?_fputs,fprintf@cc
  4796  001BA8  C18D  F1C0         	movff	?_fputs+1,fprintf@cc+1
  4797  001BAC                     l1253:
  4798  001BAC  0101               	movlb	1	; () banked
  4799  001BAE  51BF               	movf	fprintf@cc& (0+255),w,b
  4800  001BB0  27B1               	addwf	fprintf@res& (0+255),f,b
  4801  001BB2  51C0               	movf	(fprintf@cc+1)& (0+255),w,b
  4802  001BB4  23B2               	addwfc	(fprintf@res+1)& (0+255),f,b
  4803                           
  4804                           ; BSR set to: 1
  4805  001BB6  29BF               	incf	fprintf@cc& (0+255),w,b
  4806  001BB8  E101               	bnz	u13341
  4807  001BBA  D63C               	goto	L4
  4808  001BBC                     u13341:
  4809  001BBC  D63E               	goto	l1248
  4810  001BBE                     __end_of_fprintf:
  4811                           	opt stack 0
  4812                           tosu	equ	0xFFF
  4813                           tosh	equ	0xFFE
  4814                           tosl	equ	0xFFD
  4815                           pclath	equ	0xFFA
  4816                           tblptru	equ	0xFF8
  4817                           tblptrh	equ	0xFF7
  4818                           tblptrl	equ	0xFF6
  4819                           tablat	equ	0xFF5
  4820                           prodh	equ	0xFF4
  4821                           prodl	equ	0xFF3
  4822                           intcon	equ	0xFF2
  4823                           intcon2	equ	0xFF1
  4824                           intcon3	equ	0xFF0
  4825                           postinc0	equ	0xFEE
  4826                           wreg	equ	0xFE8
  4827                           postinc1	equ	0xFE6
  4828                           postdec1	equ	0xFE5
  4829                           fsr1h	equ	0xFE2
  4830                           fsr1l	equ	0xFE1
  4831                           indf2	equ	0xFDF
  4832                           postinc2	equ	0xFDE
  4833                           postdec2	equ	0xFDD
  4834                           fsr2h	equ	0xFDA
  4835                           fsr2l	equ	0xFD9
  4836                           status	equ	0xFD8
  4837                           
  4838 ;; *************** function _fputs *****************
  4839 ;; Defined at:
  4840 ;;		line 1788 in file "bibliotecas/tff.c"
  4841 ;; Parameters:    Size  Location     Type
  4842 ;;  str             2    0[BANK1 ] PTR const unsigned char 
  4843 ;;		 -> fprintf@s(16), string_dado(44), 
  4844 ;;  fil             2    2[BANK1 ] PTR struct _FIL
  4845 ;;		 -> fil(28), 
  4846 ;; Auto vars:     Size  Location     Type
  4847 ;;  n               2    5[BANK1 ] int 
  4848 ;; Return value:  Size  Location     Type
  4849 ;;                  2    0[BANK1 ] int 
  4850 ;; Registers used:
  4851 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4852 ;; Tracked objects:
  4853 ;;		On entry : 0/0
  4854 ;;		On exit  : 0/0
  4855 ;;		Unchanged: 0/0
  4856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4857 ;;      Params:         0       0       4       0       0       0       0       0       0
  4858 ;;      Locals:         0       0       2       0       0       0       0       0       0
  4859 ;;      Temps:          0       0       1       0       0       0       0       0       0
  4860 ;;      Totals:         0       0       7       0       0       0       0       0       0
  4861 ;;Total ram usage:        7 bytes
  4862 ;; Hardware stack levels used:    1
  4863 ;; Hardware stack levels required when called:   13
  4864 ;; This function calls:
  4865 ;;		_fputc
  4866 ;; This function is called by:
  4867 ;;		_fprintf
  4868 ;; This function uses a non-reentrant model
  4869 ;;
  4870                           
  4871                           	psect	text19
  4872  004A46                     __ptext19:
  4873                           	opt stack 0
  4874  004A46                     _fputs:
  4875                           	opt stack 14
  4876                           
  4877                           ;tff.c: 1793: int n;
  4878                           ;tff.c: 1796: for (n = 0; *str; str++, n++) {
  4879                           
  4880                           ; BSR set to: 1
  4881                           ;incstack = 0
  4882  004A46  0E00               	movlw	0
  4883  004A48  0101               	movlb	1	; () banked
  4884  004A4A  6F92               	movwf	(fputs@n+1)& (0+255),b
  4885  004A4C  0E00               	movlw	0
  4886  004A4E  6F91               	movwf	fputs@n& (0+255),b
  4887  004A50  D01F               	goto	l1241
  4888  004A52                     
  4889                           ; BSR set to: 1
  4890                           ;tff.c: 1797: if (fputc(*str, fil) == -1) return -1;
  4891                           
  4892                           ; BSR set to: 1
  4893  004A52  C18C  FFD9         	movff	fputs@str,fsr2l
  4894  004A56  C18D  FFDA         	movff	fputs@str+1,fsr2h
  4895  004A5A  50DF               	movf	indf2,w,c
  4896  004A5C  6F90               	movwf	??_fputs& (0+255),b
  4897  004A5E  5190               	movf	??_fputs& (0+255),w,b
  4898  004A60  0100               	movlb	0	; () banked
  4899  004A62  6FE5               	movwf	fputc@chr& (0+255),b
  4900  004A64  6BE6               	clrf	(fputc@chr+1)& (0+255),b
  4901  004A66  C18E  F0E7         	movff	fputs@fil,fputc@fil
  4902  004A6A  C18F  F0E8         	movff	fputs@fil+1,fputc@fil+1
  4903  004A6E  ECAD  F025         	call	_fputc	;wreg free
  4904  004A72  0100               	movlb	0	; () banked
  4905  004A74  29E5               	incf	?_fputc& (0+255),w,b
  4906  004A76  E107               	bnz	l10081
  4907  004A78  29E6               	incf	(?_fputc+1)& (0+255),w,b
  4908  004A7A  A4D8               	btfss	status,2,c
  4909  004A7C  D004               	goto	l1243
  4910                           
  4911                           ; BSR set to: 0
  4912  004A7E  0101               	movlb	1	; () banked
  4913  004A80  698C               	setf	?_fputs& (0+255),b
  4914  004A82  698D               	setf	(?_fputs+1)& (0+255),b
  4915  004A84  0012               	return	
  4916  004A86                     l1243:
  4917  004A86                     l10081:
  4918  004A86  0101               	movlb	1	; () banked
  4919  004A88  4B8C               	infsnz	fputs@str& (0+255),f,b
  4920  004A8A  2B8D               	incf	(fputs@str+1)& (0+255),f,b
  4921  004A8C  4B91               	infsnz	fputs@n& (0+255),f,b
  4922  004A8E  2B92               	incf	(fputs@n+1)& (0+255),f,b
  4923  004A90                     l1241:
  4924                           
  4925                           ; BSR set to: 1
  4926                           
  4927                           ; BSR set to: 1
  4928  004A90  C18C  FFD9         	movff	fputs@str,fsr2l
  4929  004A94  C18D  FFDA         	movff	fputs@str+1,fsr2h
  4930  004A98  50DF               	movf	indf2,w,c
  4931  004A9A  A4D8               	btfss	status,2,c
  4932  004A9C  D7DA               	goto	l1242
  4933                           
  4934                           ; BSR set to: 1
  4935                           ;tff.c: 1798: }
  4936                           ;tff.c: 1799: return n;
  4937  004A9E  C191  F18C         	movff	fputs@n,?_fputs
  4938  004AA2  C192  F18D         	movff	fputs@n+1,?_fputs+1
  4939                           
  4940                           ; BSR set to: 1
  4941  004AA6  0012               	return		;funcret
  4942  004AA8                     __end_of_fputs:
  4943                           	opt stack 0
  4944                           tosu	equ	0xFFF
  4945                           tosh	equ	0xFFE
  4946                           tosl	equ	0xFFD
  4947                           pclath	equ	0xFFA
  4948                           tblptru	equ	0xFF8
  4949                           tblptrh	equ	0xFF7
  4950                           tblptrl	equ	0xFF6
  4951                           tablat	equ	0xFF5
  4952                           prodh	equ	0xFF4
  4953                           prodl	equ	0xFF3
  4954                           intcon	equ	0xFF2
  4955                           intcon2	equ	0xFF1
  4956                           intcon3	equ	0xFF0
  4957                           postinc0	equ	0xFEE
  4958                           wreg	equ	0xFE8
  4959                           postinc1	equ	0xFE6
  4960                           postdec1	equ	0xFE5
  4961                           fsr1h	equ	0xFE2
  4962                           fsr1l	equ	0xFE1
  4963                           indf2	equ	0xFDF
  4964                           postinc2	equ	0xFDE
  4965                           postdec2	equ	0xFDD
  4966                           fsr2h	equ	0xFDA
  4967                           fsr2l	equ	0xFD9
  4968                           status	equ	0xFD8
  4969                           
  4970 ;; *************** function _fputc *****************
  4971 ;; Defined at:
  4972 ;;		line 1761 in file "bibliotecas/tff.c"
  4973 ;; Parameters:    Size  Location     Type
  4974 ;;  chr             2  133[BANK0 ] int 
  4975 ;;  fil             2  135[BANK0 ] PTR struct _FIL
  4976 ;;		 -> fil(28), 
  4977 ;; Auto vars:     Size  Location     Type
  4978 ;;  bw              2  138[BANK0 ] unsigned int 
  4979 ;;  c               1  137[BANK0 ] unsigned char 
  4980 ;; Return value:  Size  Location     Type
  4981 ;;                  2  133[BANK0 ] int 
  4982 ;; Registers used:
  4983 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4984 ;; Tracked objects:
  4985 ;;		On entry : 0/0
  4986 ;;		On exit  : 0/0
  4987 ;;		Unchanged: 0/0
  4988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4989 ;;      Params:         0       4       0       0       0       0       0       0       0
  4990 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4991 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4992 ;;      Totals:         0       7       0       0       0       0       0       0       0
  4993 ;;Total ram usage:        7 bytes
  4994 ;; Hardware stack levels used:    1
  4995 ;; Hardware stack levels required when called:   12
  4996 ;; This function calls:
  4997 ;;		_f_write
  4998 ;; This function is called by:
  4999 ;;		_fputs
  5000 ;;		_fprintf
  5001 ;; This function uses a non-reentrant model
  5002 ;;
  5003                           
  5004                           	psect	text20
  5005  004B5A                     __ptext20:
  5006                           	opt stack 0
  5007  004B5A                     _fputc:
  5008                           	opt stack 14
  5009                           
  5010                           ;tff.c: 1766: UINT bw;
  5011                           ;tff.c: 1767: char c;
  5012                           ;tff.c: 1773: if (!fil) {
  5013                           
  5014                           ; BSR set to: 1
  5015                           ;incstack = 0
  5016  004B5A  0100               	movlb	0	; () banked
  5017  004B5C  51E7               	movf	fputc@fil& (0+255),w,b
  5018  004B5E  11E8               	iorwf	(fputc@fil+1)& (0+255),w,b
  5019  004B60  A4D8               	btfss	status,2,c
  5020  004B62  D005               	goto	l1233
  5021                           
  5022                           ; BSR set to: 0
  5023                           ;tff.c: 1775: return chr;
  5024  004B64  C0E5  F0E5         	movff	fputc@chr,?_fputc
  5025  004B68  C0E6  F0E6         	movff	fputc@chr+1,?_fputc+1
  5026  004B6C  0012               	return	
  5027  004B6E                     l1233:
  5028                           
  5029                           ; BSR set to: 0
  5030                           ;tff.c: 1776: }
  5031                           ;tff.c: 1777: c = (char)chr;
  5032  004B6E  C0E5  F0E9         	movff	fputc@chr,fputc@c
  5033                           
  5034                           ; BSR set to: 0
  5035                           ;tff.c: 1778: f_write(fil, &c, 1, &bw);
  5036  004B72  C0E7  F0C4         	movff	fputc@fil,f_write@fp
  5037  004B76  C0E8  F0C5         	movff	fputc@fil+1,f_write@fp+1
  5038  004B7A  0EE9               	movlw	low fputc@c
  5039  004B7C  6FC6               	movwf	f_write@buff& (0+255),b
  5040  004B7E  0E00               	movlw	high fputc@c
  5041  004B80  6FC7               	movwf	(f_write@buff+1)& (0+255),b
  5042  004B82  0E00               	movlw	0
  5043  004B84  6FC9               	movwf	(f_write@btw+1)& (0+255),b
  5044  004B86  0E01               	movlw	1
  5045  004B88  6FC8               	movwf	f_write@btw& (0+255),b
  5046  004B8A  0EEA               	movlw	low fputc@bw
  5047  004B8C  6FCA               	movwf	f_write@bw& (0+255),b
  5048  004B8E  0E00               	movlw	high fputc@bw
  5049  004B90  6FCB               	movwf	(f_write@bw+1)& (0+255),b
  5050  004B92  EC66  F004         	call	_f_write	;wreg free
  5051                           
  5052                           ;tff.c: 1779: return bw ? chr : -1;
  5053  004B96  0100               	movlb	0	; () banked
  5054  004B98  51EA               	movf	fputc@bw& (0+255),w,b
  5055  004B9A  11EB               	iorwf	(fputc@bw+1)& (0+255),w,b
  5056  004B9C  A4D8               	btfss	status,2,c
  5057  004B9E  D003               	goto	l1236
  5058                           
  5059                           ; BSR set to: 0
  5060  004BA0  69E5               	setf	?_fputc& (0+255),b
  5061  004BA2  69E6               	setf	(?_fputc+1)& (0+255),b
  5062  004BA4  0012               	return	
  5063  004BA6                     l1236:
  5064                           
  5065                           ; BSR set to: 0
  5066  004BA6  C0E5  F0E5         	movff	fputc@chr,?_fputc
  5067  004BAA  C0E6  F0E6         	movff	fputc@chr+1,?_fputc+1
  5068  004BAE  0012               	return	
  5069  004BB0                     __end_of_fputc:
  5070                           	opt stack 0
  5071                           tosu	equ	0xFFF
  5072                           tosh	equ	0xFFE
  5073                           tosl	equ	0xFFD
  5074                           pclath	equ	0xFFA
  5075                           tblptru	equ	0xFF8
  5076                           tblptrh	equ	0xFF7
  5077                           tblptrl	equ	0xFF6
  5078                           tablat	equ	0xFF5
  5079                           prodh	equ	0xFF4
  5080                           prodl	equ	0xFF3
  5081                           intcon	equ	0xFF2
  5082                           intcon2	equ	0xFF1
  5083                           intcon3	equ	0xFF0
  5084                           postinc0	equ	0xFEE
  5085                           wreg	equ	0xFE8
  5086                           postinc1	equ	0xFE6
  5087                           postdec1	equ	0xFE5
  5088                           fsr1h	equ	0xFE2
  5089                           fsr1l	equ	0xFE1
  5090                           indf2	equ	0xFDF
  5091                           postinc2	equ	0xFDE
  5092                           postdec2	equ	0xFDD
  5093                           fsr2h	equ	0xFDA
  5094                           fsr2l	equ	0xFD9
  5095                           status	equ	0xFD8
  5096                           
  5097 ;; *************** function _f_write *****************
  5098 ;; Defined at:
  5099 ;;		line 991 in file "bibliotecas/tff.c"
  5100 ;; Parameters:    Size  Location     Type
  5101 ;;  fp              2  100[BANK0 ] PTR struct _FIL
  5102 ;;		 -> fil(28), 
  5103 ;;  buff            2  102[BANK0 ] PTR const void 
  5104 ;;		 -> fputc@c(1), 
  5105 ;;  btw             2  104[BANK0 ] unsigned int 
  5106 ;;  bw              2  106[BANK0 ] PTR unsigned int 
  5107 ;;		 -> fputc@bw(2), 
  5108 ;; Auto vars:     Size  Location     Type
  5109 ;;  sect            4  123[BANK0 ] unsigned long 
  5110 ;;  wcnt            2  131[BANK0 ] unsigned int 
  5111 ;;  clust           2  129[BANK0 ] unsigned short 
  5112 ;;  cc              2  127[BANK0 ] unsigned int 
  5113 ;;  wbuff           2  121[BANK0 ] PTR const unsigned char 
  5114 ;;		 -> fputc@c(1), 
  5115 ;;  res             1  120[BANK0 ] enum E155
  5116 ;; Return value:  Size  Location     Type
  5117 ;;                  1    wreg      enum E155
  5118 ;; Registers used:
  5119 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5120 ;; Tracked objects:
  5121 ;;		On entry : 0/0
  5122 ;;		On exit  : 0/0
  5123 ;;		Unchanged: 0/0
  5124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5125 ;;      Params:         0       8       0       0       0       0       0       0       0
  5126 ;;      Locals:         0      13       0       0       0       0       0       0       0
  5127 ;;      Temps:          0      12       0       0       0       0       0       0       0
  5128 ;;      Totals:         0      33       0       0       0       0       0       0       0
  5129 ;;Total ram usage:       33 bytes
  5130 ;; Hardware stack levels used:    1
  5131 ;; Hardware stack levels required when called:   11
  5132 ;; This function calls:
  5133 ;;		_clust2sect
  5134 ;;		_create_chain
  5135 ;;		_disk_write
  5136 ;;		_memcpy
  5137 ;;		_move_window
  5138 ;;		_validate
  5139 ;; This function is called by:
  5140 ;;		_fputc
  5141 ;; This function uses a non-reentrant model
  5142 ;;
  5143                           
  5144                           	psect	text21
  5145  0008CC                     __ptext21:
  5146                           	opt stack 0
  5147  0008CC                     _f_write:
  5148                           	opt stack 14
  5149                           
  5150                           ;tff.c: 998: FRESULT res;
  5151                           ;tff.c: 999: DWORD sect;
  5152                           ;tff.c: 1000: UINT wcnt, cc;
  5153                           ;tff.c: 1001: CLUST clust;
  5154                           ;tff.c: 1002: const BYTE *wbuff = buff;
  5155                           
  5156                           ; BSR set to: 0
  5157                           ;incstack = 0
  5158  0008CC  C0C6  F0D9         	movff	f_write@buff,f_write@wbuff
  5159  0008D0  C0C7  F0DA         	movff	f_write@buff+1,f_write@wbuff+1
  5160                           
  5161                           ;tff.c: 1005: *bw = 0;
  5162  0008D4  C0CA  FFD9         	movff	f_write@bw,fsr2l
  5163  0008D8  C0CB  FFDA         	movff	f_write@bw+1,fsr2h
  5164  0008DC  0E00               	movlw	0
  5165  0008DE  6EDE               	movwf	postinc2,c
  5166  0008E0  0E00               	movlw	0
  5167  0008E2  6EDD               	movwf	postdec2,c
  5168                           
  5169                           ;tff.c: 1006: res = validate(fp->fs, fp->id);
  5170  0008E4  0100               	movlb	0	; () banked
  5171  0008E6  EE20 F004          	lfsr	2,4
  5172  0008EA  51C4               	movf	f_write@fp& (0+255),w,b
  5173  0008EC  26D9               	addwf	fsr2l,f,c
  5174  0008EE  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5175  0008F0  22DA               	addwfc	fsr2h,f,c
  5176  0008F2  CFDE F067          	movff	postinc2,validate@fs
  5177  0008F6  CFDD F068          	movff	postdec2,validate@fs+1
  5178  0008FA  C0C4  FFD9         	movff	f_write@fp,fsr2l
  5179  0008FE  C0C5  FFDA         	movff	f_write@fp+1,fsr2h
  5180  000902  CFDE F069          	movff	postinc2,validate@id
  5181  000906  CFDD F06A          	movff	postdec2,validate@id+1
  5182  00090A  EC79  F026         	call	_validate	;wreg free
  5183  00090E  0100               	movlb	0	; () banked
  5184  000910  6FD8               	movwf	f_write@res& (0+255),b
  5185                           
  5186                           ; BSR set to: 0
  5187                           ;tff.c: 1007: if (res != FR_OK) return res;
  5188  000912  51D8               	movf	f_write@res& (0+255),w,b
  5189  000914  A4D8               	btfss	status,2,c
  5190  000916  0012               	return	
  5191                           
  5192                           ; BSR set to: 0
  5193                           ;tff.c: 1008: if (fp->flag & 0x80) return FR_RW_ERROR;
  5194                           
  5195                           ; BSR set to: 0
  5196                           
  5197                           ; BSR set to: 0
  5198                           ;	Return value of _f_write is never used
  5199  000918  EE20 F002          	lfsr	2,2
  5200  00091C  51C4               	movf	f_write@fp& (0+255),w,b
  5201  00091E  26D9               	addwf	fsr2l,f,c
  5202  000920  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5203  000922  22DA               	addwfc	fsr2h,f,c
  5204  000924  BEDF               	btfsc	indf2,7,c
  5205  000926  0012               	return	
  5206                           
  5207                           ; BSR set to: 0
  5208                           ;tff.c: 1009: if (!(fp->flag & 0x02)) return FR_DENIED;
  5209                           
  5210                           ; BSR set to: 0
  5211                           
  5212                           ; BSR set to: 0
  5213                           ;	Return value of _f_write is never used
  5214  000928  EE20 F002          	lfsr	2,2
  5215  00092C  51C4               	movf	f_write@fp& (0+255),w,b
  5216  00092E  26D9               	addwf	fsr2l,f,c
  5217  000930  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5218  000932  22DA               	addwfc	fsr2h,f,c
  5219  000934  A2DF               	btfss	indf2,1,c
  5220  000936  0012               	return	
  5221                           
  5222                           ; BSR set to: 0
  5223                           ;tff.c: 1010: if (fp->fsize + btw < fp->fsize) return FR_OK;
  5224                           
  5225                           ; BSR set to: 0
  5226                           
  5227                           ; BSR set to: 0
  5228                           ;	Return value of _f_write is never used
  5229  000938  EE20 F00A          	lfsr	2,10
  5230  00093C  51C4               	movf	f_write@fp& (0+255),w,b
  5231  00093E  26D9               	addwf	fsr2l,f,c
  5232  000940  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5233  000942  22DA               	addwfc	fsr2h,f,c
  5234  000944  EE10 F00A          	lfsr	1,10
  5235  000948  51C4               	movf	f_write@fp& (0+255),w,b
  5236  00094A  26E1               	addwf	fsr1l,f,c
  5237  00094C  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5238  00094E  22E2               	addwfc	fsr1h,f,c
  5239  000950  CFE6 F0D0          	movff	postinc1,??_f_write+4
  5240  000954  CFE6 F0D1          	movff	postinc1,??_f_write+5
  5241  000958  CFE6 F0D2          	movff	postinc1,??_f_write+6
  5242  00095C  CFE6 F0D3          	movff	postinc1,??_f_write+7
  5243  000960  51C8               	movf	f_write@btw& (0+255),w,b
  5244  000962  25D0               	addwf	(??_f_write+4)& (0+255),w,b
  5245  000964  6FD4               	movwf	(??_f_write+8)& (0+255),b
  5246  000966  51C9               	movf	(f_write@btw+1)& (0+255),w,b
  5247  000968  21D1               	addwfc	(??_f_write+5)& (0+255),w,b
  5248  00096A  6FD5               	movwf	(??_f_write+9)& (0+255),b
  5249  00096C  0E00               	movlw	0
  5250  00096E  21D2               	addwfc	(??_f_write+6)& (0+255),w,b
  5251  000970  6FD6               	movwf	(??_f_write+10)& (0+255),b
  5252  000972  0E00               	movlw	0
  5253  000974  21D3               	addwfc	(??_f_write+7)& (0+255),w,b
  5254  000976  6FD7               	movwf	(??_f_write+11)& (0+255),b
  5255  000978  50DE               	movf	postinc2,w,c
  5256  00097A  5DD4               	subwf	(??_f_write+8)& (0+255),w,b
  5257  00097C  50DE               	movf	postinc2,w,c
  5258  00097E  59D5               	subwfb	(??_f_write+9)& (0+255),w,b
  5259  000980  50DE               	movf	postinc2,w,c
  5260  000982  59D6               	subwfb	(??_f_write+10)& (0+255),w,b
  5261  000984  50DE               	movf	postinc2,w,c
  5262  000986  59D7               	subwfb	(??_f_write+11)& (0+255),w,b
  5263  000988  A0D8               	btfss	status,0,c
  5264  00098A  0012               	return	
  5265  00098C  D23B               	goto	l1143
  5266  00098E                     
  5267                           ; BSR set to: 0
  5268                           ;tff.c: 1014: if ((fp->fptr % 512U) == 0) {
  5269                           
  5270                           ; BSR set to: 0
  5271  00098E  EE20 F006          	lfsr	2,6
  5272  000992  51C4               	movf	f_write@fp& (0+255),w,b
  5273  000994  26D9               	addwf	fsr2l,f,c
  5274  000996  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5275  000998  22DA               	addwfc	fsr2h,f,c
  5276  00099A  0EFF               	movlw	255
  5277  00099C  14DE               	andwf	postinc2,w,c
  5278  00099E  6FCC               	movwf	??_f_write& (0+255),b
  5279  0009A0  0E01               	movlw	1
  5280  0009A2  14DE               	andwf	postinc2,w,c
  5281  0009A4  6FCD               	movwf	(??_f_write+1)& (0+255),b
  5282  0009A6  0E00               	movlw	0
  5283  0009A8  14DE               	andwf	postinc2,w,c
  5284  0009AA  6FCE               	movwf	(??_f_write+2)& (0+255),b
  5285  0009AC  0E00               	movlw	0
  5286  0009AE  14DE               	andwf	postinc2,w,c
  5287  0009B0  6FCF               	movwf	(??_f_write+3)& (0+255),b
  5288  0009B2  51CC               	movf	??_f_write& (0+255),w,b
  5289  0009B4  11CD               	iorwf	(??_f_write+1)& (0+255),w,b
  5290  0009B6  11CE               	iorwf	(??_f_write+2)& (0+255),w,b
  5291  0009B8  11CF               	iorwf	(??_f_write+3)& (0+255),w,b
  5292  0009BA  A4D8               	btfss	status,2,c
  5293  0009BC  D166               	goto	l1145
  5294                           
  5295                           ; BSR set to: 0
  5296                           ;tff.c: 1015: if (fp->csect >= fp->fs->csize) {
  5297  0009BE  EE20 F004          	lfsr	2,4
  5298  0009C2  51C4               	movf	f_write@fp& (0+255),w,b
  5299  0009C4  26D9               	addwf	fsr2l,f,c
  5300  0009C6  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5301  0009C8  22DA               	addwfc	fsr2h,f,c
  5302  0009CA  EE10 F01D          	lfsr	1,29
  5303  0009CE  50DE               	movf	postinc2,w,c
  5304  0009D0  26E1               	addwf	fsr1l,f,c
  5305  0009D2  50DD               	movf	postdec2,w,c
  5306  0009D4  22E2               	addwfc	fsr1h,f,c
  5307  0009D6  EE20 F003          	lfsr	2,3
  5308  0009DA  51C4               	movf	f_write@fp& (0+255),w,b
  5309  0009DC  26D9               	addwf	fsr2l,f,c
  5310  0009DE  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5311  0009E0  22DA               	addwfc	fsr2h,f,c
  5312  0009E2  50E6               	movf	postinc1,w,c
  5313  0009E4  5CDE               	subwf	postinc2,w,c
  5314  0009E6  A0D8               	btfss	status,0,c
  5315  0009E8  D06D               	goto	l1146
  5316                           
  5317                           ; BSR set to: 0
  5318                           ;tff.c: 1016: if (fp->fptr == 0) {
  5319  0009EA  EE20 F006          	lfsr	2,6
  5320  0009EE  51C4               	movf	f_write@fp& (0+255),w,b
  5321  0009F0  26D9               	addwf	fsr2l,f,c
  5322  0009F2  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5323  0009F4  22DA               	addwfc	fsr2h,f,c
  5324  0009F6  50DE               	movf	postinc2,w,c
  5325  0009F8  10DE               	iorwf	postinc2,w,c
  5326  0009FA  10DE               	iorwf	postinc2,w,c
  5327  0009FC  10DE               	iorwf	postinc2,w,c
  5328  0009FE  A4D8               	btfss	status,2,c
  5329  000A00  D024               	goto	l1147
  5330                           
  5331                           ; BSR set to: 0
  5332                           ;tff.c: 1017: clust = fp->org_clust;
  5333  000A02  EE20 F00E          	lfsr	2,14
  5334  000A06  51C4               	movf	f_write@fp& (0+255),w,b
  5335  000A08  26D9               	addwf	fsr2l,f,c
  5336  000A0A  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5337  000A0C  22DA               	addwfc	fsr2h,f,c
  5338  000A0E  CFDE F0E1          	movff	postinc2,f_write@clust
  5339  000A12  CFDD F0E2          	movff	postdec2,f_write@clust+1
  5340                           
  5341                           ; BSR set to: 0
  5342                           ;tff.c: 1018: if (clust == 0)
  5343  000A16  51E1               	movf	f_write@clust& (0+255),w,b
  5344  000A18  11E2               	iorwf	(f_write@clust+1)& (0+255),w,b
  5345  000A1A  A4D8               	btfss	status,2,c
  5346  000A1C  D026               	goto	l1149
  5347                           
  5348                           ; BSR set to: 0
  5349                           ;tff.c: 1019: fp->org_clust = clust = create_chain(0);
  5350  000A1E  0E00               	movlw	0
  5351  000A20  6FB7               	movwf	(create_chain@clust+1)& (0+255),b
  5352  000A22  0E00               	movlw	0
  5353  000A24  6FB6               	movwf	create_chain@clust& (0+255),b
  5354  000A26  EC60  F018         	call	_create_chain	;wreg free
  5355  000A2A  C0B6  F0E1         	movff	?_create_chain,f_write@clust
  5356  000A2E  C0B7  F0E2         	movff	?_create_chain+1,f_write@clust+1
  5357  000A32  0100               	movlb	0	; () banked
  5358  000A34  EE20 F00E          	lfsr	2,14
  5359  000A38  51C4               	movf	f_write@fp& (0+255),w,b
  5360  000A3A  26D9               	addwf	fsr2l,f,c
  5361  000A3C  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5362  000A3E  22DA               	addwfc	fsr2h,f,c
  5363  000A40  C0E1  FFDE         	movff	f_write@clust,postinc2
  5364  000A44  C0E2  FFDD         	movff	f_write@clust+1,postdec2
  5365                           
  5366                           ; BSR set to: 0
  5367                           ;tff.c: 1020: } else {
  5368  000A48  D010               	goto	l1149
  5369  000A4A                     l1147:
  5370                           
  5371                           ; BSR set to: 0
  5372                           ;tff.c: 1021: clust = create_chain(fp->curr_clust);
  5373                           
  5374                           ; BSR set to: 0
  5375  000A4A  EE20 F010          	lfsr	2,16
  5376  000A4E  51C4               	movf	f_write@fp& (0+255),w,b
  5377  000A50  26D9               	addwf	fsr2l,f,c
  5378  000A52  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5379  000A54  22DA               	addwfc	fsr2h,f,c
  5380  000A56  CFDE F0B6          	movff	postinc2,create_chain@clust
  5381  000A5A  CFDD F0B7          	movff	postdec2,create_chain@clust+1
  5382  000A5E  EC60  F018         	call	_create_chain	;wreg free
  5383  000A62  C0B6  F0E1         	movff	?_create_chain,f_write@clust
  5384  000A66  C0B7  F0E2         	movff	?_create_chain+1,f_write@clust+1
  5385  000A6A                     l1149:
  5386                           
  5387                           ;tff.c: 1022: }
  5388                           ;tff.c: 1023: if (clust == 0) break;
  5389  000A6A  0100               	movlb	0	; () banked
  5390  000A6C  51E1               	movf	f_write@clust& (0+255),w,b
  5391  000A6E  11E2               	iorwf	(f_write@clust+1)& (0+255),w,b
  5392  000A70  B4D8               	btfsc	status,2,c
  5393  000A72  D1CC               	goto	u11320
  5394                           
  5395                           ; BSR set to: 0
  5396                           ;tff.c: 1024: if (clust == 1 || clust >= fp->fs->max_clust) goto fw_error;
  5397                           
  5398                           ; BSR set to: 0
  5399                           
  5400                           ; BSR set to: 0
  5401  000A74  05E1               	decf	f_write@clust& (0+255),w,b
  5402  000A76  11E2               	iorwf	(f_write@clust+1)& (0+255),w,b
  5403  000A78  B4D8               	btfsc	status,2,c
  5404  000A7A  D1FB               	goto	l1155
  5405                           
  5406                           ; BSR set to: 0
  5407  000A7C  EE20 F004          	lfsr	2,4
  5408  000A80  51C4               	movf	f_write@fp& (0+255),w,b
  5409  000A82  26D9               	addwf	fsr2l,f,c
  5410  000A84  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5411  000A86  22DA               	addwfc	fsr2h,f,c
  5412  000A88  EE10 F016          	lfsr	1,22
  5413  000A8C  50DE               	movf	postinc2,w,c
  5414  000A8E  26E1               	addwf	fsr1l,f,c
  5415  000A90  50DD               	movf	postdec2,w,c
  5416  000A92  22E2               	addwfc	fsr1h,f,c
  5417  000A94  50E6               	movf	postinc1,w,c
  5418  000A96  5DE1               	subwf	f_write@clust& (0+255),w,b
  5419  000A98  50E6               	movf	postinc1,w,c
  5420  000A9A  59E2               	subwfb	(f_write@clust+1)& (0+255),w,b
  5421  000A9C  B0D8               	btfsc	status,0,c
  5422  000A9E  D1E9               	goto	l1155
  5423                           
  5424                           ; BSR set to: 0
  5425                           ;tff.c: 1025: fp->curr_clust = clust;
  5426                           
  5427                           ; BSR set to: 0
  5428                           
  5429                           ; BSR set to: 0
  5430  000AA0  EE20 F010          	lfsr	2,16
  5431  000AA4  51C4               	movf	f_write@fp& (0+255),w,b
  5432  000AA6  26D9               	addwf	fsr2l,f,c
  5433  000AA8  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5434  000AAA  22DA               	addwfc	fsr2h,f,c
  5435  000AAC  C0E1  FFDE         	movff	f_write@clust,postinc2
  5436  000AB0  C0E2  FFDD         	movff	f_write@clust+1,postdec2
  5437                           
  5438                           ;tff.c: 1026: fp->csect = 0;
  5439  000AB4  EE20 F003          	lfsr	2,3
  5440  000AB8  51C4               	movf	f_write@fp& (0+255),w,b
  5441  000ABA  26D9               	addwf	fsr2l,f,c
  5442  000ABC  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5443  000ABE  22DA               	addwfc	fsr2h,f,c
  5444  000AC0  0E00               	movlw	0
  5445  000AC2  6EDF               	movwf	indf2,c
  5446  000AC4                     l1146:
  5447                           
  5448                           ; BSR set to: 0
  5449                           ;tff.c: 1027: }
  5450                           ;tff.c: 1028: sect = clust2sect(fp->curr_clust) + fp->csect;
  5451                           
  5452                           ; BSR set to: 0
  5453  000AC4  EE20 F010          	lfsr	2,16
  5454  000AC8  51C4               	movf	f_write@fp& (0+255),w,b
  5455  000ACA  26D9               	addwf	fsr2l,f,c
  5456  000ACC  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5457  000ACE  22DA               	addwfc	fsr2h,f,c
  5458  000AD0  CFDE F06C          	movff	postinc2,clust2sect@clust
  5459  000AD4  CFDD F06D          	movff	postdec2,clust2sect@clust+1
  5460  000AD8  ECEC  F01F         	call	_clust2sect	;wreg free
  5461  000ADC  0100               	movlb	0	; () banked
  5462  000ADE  EE20 F003          	lfsr	2,3
  5463  000AE2  51C4               	movf	f_write@fp& (0+255),w,b
  5464  000AE4  26D9               	addwf	fsr2l,f,c
  5465  000AE6  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5466  000AE8  22DA               	addwfc	fsr2h,f,c
  5467  000AEA  50DF               	movf	indf2,w,c
  5468  000AEC  6FCC               	movwf	??_f_write& (0+255),b
  5469  000AEE  51CC               	movf	??_f_write& (0+255),w,b
  5470  000AF0  256C               	addwf	?_clust2sect& (0+255),w,b
  5471  000AF2  6FDB               	movwf	f_write@sect& (0+255),b
  5472  000AF4  0E00               	movlw	0
  5473  000AF6  216D               	addwfc	(?_clust2sect+1)& (0+255),w,b
  5474  000AF8  6FDC               	movwf	(f_write@sect+1)& (0+255),b
  5475  000AFA  0E00               	movlw	0
  5476  000AFC  216E               	addwfc	(?_clust2sect+2)& (0+255),w,b
  5477  000AFE  6FDD               	movwf	(f_write@sect+2)& (0+255),b
  5478  000B00  0E00               	movlw	0
  5479  000B02  216F               	addwfc	(?_clust2sect+3)& (0+255),w,b
  5480  000B04  6FDE               	movwf	(f_write@sect+3)& (0+255),b
  5481                           
  5482                           ; BSR set to: 0
  5483                           ;tff.c: 1029: cc = btw / 512U;
  5484  000B06  C0C8  F0CC         	movff	f_write@btw,??_f_write
  5485  000B0A  C0C9  F0CD         	movff	f_write@btw+1,??_f_write+1
  5486  000B0E  0E09               	movlw	9
  5487  000B10  6FCE               	movwf	(??_f_write+2)& (0+255),b
  5488  000B12                     u11235:
  5489  000B12  90D8               	bcf	status,0,c
  5490  000B14  33CD               	rrcf	(??_f_write+1)& (0+255),f,b
  5491  000B16  33CC               	rrcf	??_f_write& (0+255),f,b
  5492  000B18  2FCE               	decfsz	(??_f_write+2)& (0+255),f,b
  5493  000B1A  D7FB               	goto	u11235
  5494  000B1C  C0CC  F0DF         	movff	??_f_write,f_write@cc
  5495  000B20  C0CD  F0E0         	movff	??_f_write+1,f_write@cc+1
  5496                           
  5497                           ; BSR set to: 0
  5498                           ;tff.c: 1030: if (cc) {
  5499  000B24  51DF               	movf	f_write@cc& (0+255),w,b
  5500  000B26  11E0               	iorwf	(f_write@cc+1)& (0+255),w,b
  5501  000B28  B4D8               	btfsc	status,2,c
  5502  000B2A  D070               	goto	l1156
  5503                           
  5504                           ; BSR set to: 0
  5505                           ;tff.c: 1031: if (fp->csect + cc > fp->fs->csize)
  5506  000B2C  EE20 F003          	lfsr	2,3
  5507  000B30  51C4               	movf	f_write@fp& (0+255),w,b
  5508  000B32  26D9               	addwf	fsr2l,f,c
  5509  000B34  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5510  000B36  22DA               	addwfc	fsr2h,f,c
  5511  000B38  50DF               	movf	indf2,w,c
  5512  000B3A  6FCC               	movwf	??_f_write& (0+255),b
  5513  000B3C  51CC               	movf	??_f_write& (0+255),w,b
  5514  000B3E  25DF               	addwf	f_write@cc& (0+255),w,b
  5515  000B40  6FCD               	movwf	(??_f_write+1)& (0+255),b
  5516  000B42  0E00               	movlw	0
  5517  000B44  21E0               	addwfc	(f_write@cc+1)& (0+255),w,b
  5518  000B46  6FCE               	movwf	(??_f_write+2)& (0+255),b
  5519  000B48  EE20 F004          	lfsr	2,4
  5520  000B4C  51C4               	movf	f_write@fp& (0+255),w,b
  5521  000B4E  26D9               	addwf	fsr2l,f,c
  5522  000B50  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5523  000B52  22DA               	addwfc	fsr2h,f,c
  5524  000B54  EE10 F01D          	lfsr	1,29
  5525  000B58  50DE               	movf	postinc2,w,c
  5526  000B5A  26E1               	addwf	fsr1l,f,c
  5527  000B5C  50DD               	movf	postdec2,w,c
  5528  000B5E  22E2               	addwfc	fsr1h,f,c
  5529  000B60  50E7               	movf	indf1,w,c
  5530  000B62  6FCF               	movwf	(??_f_write+3)& (0+255),b
  5531  000B64  6BD0               	clrf	(??_f_write+4)& (0+255),b
  5532  000B66  51CD               	movf	(??_f_write+1)& (0+255),w,b
  5533  000B68  5DCF               	subwf	(??_f_write+3)& (0+255),w,b
  5534  000B6A  51CE               	movf	(??_f_write+2)& (0+255),w,b
  5535  000B6C  59D0               	subwfb	(??_f_write+4)& (0+255),w,b
  5536  000B6E  B0D8               	btfsc	status,0,c
  5537  000B70  D021               	goto	l1157
  5538                           
  5539                           ; BSR set to: 0
  5540                           ;tff.c: 1032: cc = fp->fs->csize - fp->csect;
  5541  000B72  EE20 F003          	lfsr	2,3
  5542  000B76  51C4               	movf	f_write@fp& (0+255),w,b
  5543  000B78  26D9               	addwf	fsr2l,f,c
  5544  000B7A  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5545  000B7C  22DA               	addwfc	fsr2h,f,c
  5546  000B7E  50DF               	movf	indf2,w,c
  5547  000B80  6FCC               	movwf	??_f_write& (0+255),b
  5548  000B82  6BCD               	clrf	(??_f_write+1)& (0+255),b
  5549  000B84  1FCC               	comf	??_f_write& (0+255),f,b
  5550  000B86  1FCD               	comf	(??_f_write+1)& (0+255),f,b
  5551  000B88  4BCC               	infsnz	??_f_write& (0+255),f,b
  5552  000B8A  2BCD               	incf	(??_f_write+1)& (0+255),f,b
  5553  000B8C  EE20 F004          	lfsr	2,4
  5554  000B90  51C4               	movf	f_write@fp& (0+255),w,b
  5555  000B92  26D9               	addwf	fsr2l,f,c
  5556  000B94  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5557  000B96  22DA               	addwfc	fsr2h,f,c
  5558  000B98  EE10 F01D          	lfsr	1,29
  5559  000B9C  50DE               	movf	postinc2,w,c
  5560  000B9E  26E1               	addwf	fsr1l,f,c
  5561  000BA0  50DD               	movf	postdec2,w,c
  5562  000BA2  22E2               	addwfc	fsr1h,f,c
  5563  000BA4  50E7               	movf	indf1,w,c
  5564  000BA6  6FCE               	movwf	(??_f_write+2)& (0+255),b
  5565  000BA8  51CE               	movf	(??_f_write+2)& (0+255),w,b
  5566  000BAA  25CC               	addwf	??_f_write& (0+255),w,b
  5567  000BAC  6FDF               	movwf	f_write@cc& (0+255),b
  5568  000BAE  0E00               	movlw	0
  5569  000BB0  21CD               	addwfc	(??_f_write+1)& (0+255),w,b
  5570  000BB2  6FE0               	movwf	(f_write@cc+1)& (0+255),b
  5571  000BB4                     l1157:
  5572                           
  5573                           ; BSR set to: 0
  5574                           ;tff.c: 1033: if (disk_write(0, wbuff, sect, (BYTE)cc) != RES_OK)
  5575                           
  5576                           ; BSR set to: 0
  5577  000BB4  C0D9  F07F         	movff	f_write@wbuff,disk_write@buff
  5578  000BB8  C0DA  F080         	movff	f_write@wbuff+1,disk_write@buff+1
  5579  000BBC  C0DB  F081         	movff	f_write@sect,disk_write@sector
  5580  000BC0  C0DC  F082         	movff	f_write@sect+1,disk_write@sector+1
  5581  000BC4  C0DD  F083         	movff	f_write@sect+2,disk_write@sector+2
  5582  000BC8  C0DE  F084         	movff	f_write@sect+3,disk_write@sector+3
  5583  000BCC  C0DF  F085         	movff	f_write@cc,disk_write@count
  5584  000BD0  0E00               	movlw	0
  5585  000BD2  EC0C  F023         	call	_disk_write
  5586  000BD6  0900               	iorlw	0
  5587  000BD8  A4D8               	btfss	status,2,c
  5588  000BDA  D14B               	goto	l1155
  5589                           
  5590                           ;tff.c: 1035: fp->csect += (BYTE)cc;
  5591                           
  5592                           ;tff.c: 1034: goto fw_error;
  5593  000BDC  0100               	movlb	0	; () banked
  5594  000BDE  EE20 F003          	lfsr	2,3
  5595  000BE2  51C4               	movf	f_write@fp& (0+255),w,b
  5596  000BE4  26D9               	addwf	fsr2l,f,c
  5597  000BE6  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5598  000BE8  22DA               	addwfc	fsr2h,f,c
  5599  000BEA  51DF               	movf	f_write@cc& (0+255),w,b
  5600  000BEC  26DF               	addwf	indf2,f,c
  5601                           
  5602                           ; BSR set to: 0
  5603                           ;tff.c: 1036: wcnt = 512U * cc;
  5604  000BEE  C0DF  F0CC         	movff	f_write@cc,??_f_write
  5605  000BF2  C0E0  F0CD         	movff	f_write@cc+1,??_f_write+1
  5606  000BF6  0E09               	movlw	9
  5607  000BF8                     u11275:
  5608  000BF8  90D8               	bcf	status,0,c
  5609  000BFA  37CC               	rlcf	??_f_write& (0+255),f,b
  5610  000BFC  37CD               	rlcf	(??_f_write+1)& (0+255),f,b
  5611  000BFE  2EE8               	decfsz	wreg,f,c
  5612  000C00  D7FB               	goto	u11275
  5613  000C02  C0CC  F0E3         	movff	??_f_write,f_write@wcnt
  5614  000C06  C0CD  F0E4         	movff	??_f_write+1,f_write@wcnt+1
  5615                           
  5616                           ;tff.c: 1037: continue;
  5617  000C0A  D0DF               	goto	l1159
  5618  000C0C                     l1156:
  5619                           
  5620                           ; BSR set to: 0
  5621                           ;tff.c: 1038: }
  5622                           ;tff.c: 1039: if (fp->fptr >= fp->fsize) {
  5623                           
  5624                           ; BSR set to: 0
  5625  000C0C  EE20 F00A          	lfsr	2,10
  5626  000C10  51C4               	movf	f_write@fp& (0+255),w,b
  5627  000C12  26D9               	addwf	fsr2l,f,c
  5628  000C14  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5629  000C16  22DA               	addwfc	fsr2h,f,c
  5630  000C18  EE10 F006          	lfsr	1,6
  5631  000C1C  51C4               	movf	f_write@fp& (0+255),w,b
  5632  000C1E  26E1               	addwf	fsr1l,f,c
  5633  000C20  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5634  000C22  22E2               	addwfc	fsr1h,f,c
  5635  000C24  50DE               	movf	postinc2,w,c
  5636  000C26  5CE6               	subwf	postinc1,w,c
  5637  000C28  50DE               	movf	postinc2,w,c
  5638  000C2A  58E6               	subwfb	postinc1,w,c
  5639  000C2C  50DE               	movf	postinc2,w,c
  5640  000C2E  58E6               	subwfb	postinc1,w,c
  5641  000C30  50DE               	movf	postinc2,w,c
  5642  000C32  58E6               	subwfb	postinc1,w,c
  5643  000C34  A0D8               	btfss	status,0,c
  5644  000C36  D022               	goto	l1160
  5645                           
  5646                           ; BSR set to: 0
  5647                           ;tff.c: 1040: if (!move_window(0)) goto fw_error;
  5648  000C38  0E00               	movlw	0
  5649  000C3A  6F8B               	movwf	move_window@sector& (0+255),b
  5650  000C3C  0E00               	movlw	0
  5651  000C3E  6F8C               	movwf	(move_window@sector+1)& (0+255),b
  5652  000C40  0E00               	movlw	0
  5653  000C42  6F8D               	movwf	(move_window@sector+2)& (0+255),b
  5654  000C44  0E00               	movlw	0
  5655  000C46  6F8E               	movwf	(move_window@sector+3)& (0+255),b
  5656  000C48  EC40  F019         	call	_move_window	;wreg free
  5657  000C4C  0900               	iorlw	0
  5658  000C4E  B4D8               	btfsc	status,2,c
  5659  000C50  D110               	goto	l1155
  5660                           
  5661                           ;tff.c: 1041: fp->fs->winsect = sect;
  5662  000C52  0100               	movlb	0	; () banked
  5663  000C54  EE20 F004          	lfsr	2,4
  5664  000C58  51C4               	movf	f_write@fp& (0+255),w,b
  5665  000C5A  26D9               	addwf	fsr2l,f,c
  5666  000C5C  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5667  000C5E  22DA               	addwfc	fsr2h,f,c
  5668  000C60  EE10 F004          	lfsr	1,4
  5669  000C64  50DE               	movf	postinc2,w,c
  5670  000C66  26E1               	addwf	fsr1l,f,c
  5671  000C68  50DD               	movf	postdec2,w,c
  5672  000C6A  22E2               	addwfc	fsr1h,f,c
  5673  000C6C  C0DB  FFE6         	movff	f_write@sect,postinc1
  5674  000C70  C0DC  FFE6         	movff	f_write@sect+1,postinc1
  5675  000C74  C0DD  FFE6         	movff	f_write@sect+2,postinc1
  5676  000C78  C0DE  FFE6         	movff	f_write@sect+3,postinc1
  5677  000C7C                     l1160:
  5678                           
  5679                           ; BSR set to: 0
  5680                           ;tff.c: 1042: }
  5681                           ;tff.c: 1043: fp->csect++;
  5682                           
  5683                           ; BSR set to: 0
  5684  000C7C  EE20 F003          	lfsr	2,3
  5685  000C80  51C4               	movf	f_write@fp& (0+255),w,b
  5686  000C82  26D9               	addwf	fsr2l,f,c
  5687  000C84  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5688  000C86  22DA               	addwfc	fsr2h,f,c
  5689  000C88  2ADF               	incf	indf2,f,c
  5690  000C8A                     l1145:
  5691                           
  5692                           ; BSR set to: 0
  5693                           ;tff.c: 1044: }
  5694                           ;tff.c: 1045: sect = clust2sect(fp->curr_clust) + fp->csect - 1;
  5695                           
  5696                           ; BSR set to: 0
  5697  000C8A  EE20 F010          	lfsr	2,16
  5698  000C8E  51C4               	movf	f_write@fp& (0+255),w,b
  5699  000C90  26D9               	addwf	fsr2l,f,c
  5700  000C92  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5701  000C94  22DA               	addwfc	fsr2h,f,c
  5702  000C96  CFDE F06C          	movff	postinc2,clust2sect@clust
  5703  000C9A  CFDD F06D          	movff	postdec2,clust2sect@clust+1
  5704  000C9E  ECEC  F01F         	call	_clust2sect	;wreg free
  5705  000CA2  0100               	movlb	0	; () banked
  5706  000CA4  EE20 F003          	lfsr	2,3
  5707  000CA8  51C4               	movf	f_write@fp& (0+255),w,b
  5708  000CAA  26D9               	addwf	fsr2l,f,c
  5709  000CAC  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5710  000CAE  22DA               	addwfc	fsr2h,f,c
  5711  000CB0  50DF               	movf	indf2,w,c
  5712  000CB2  6FCC               	movwf	??_f_write& (0+255),b
  5713  000CB4  51CC               	movf	??_f_write& (0+255),w,b
  5714  000CB6  256C               	addwf	?_clust2sect& (0+255),w,b
  5715  000CB8  6FCD               	movwf	(??_f_write+1)& (0+255),b
  5716  000CBA  0E00               	movlw	0
  5717  000CBC  216D               	addwfc	(?_clust2sect+1)& (0+255),w,b
  5718  000CBE  6FCE               	movwf	(??_f_write+2)& (0+255),b
  5719  000CC0  0E00               	movlw	0
  5720  000CC2  216E               	addwfc	(?_clust2sect+2)& (0+255),w,b
  5721  000CC4  6FCF               	movwf	(??_f_write+3)& (0+255),b
  5722  000CC6  0E00               	movlw	0
  5723  000CC8  216F               	addwfc	(?_clust2sect+3)& (0+255),w,b
  5724  000CCA  6FD0               	movwf	(??_f_write+4)& (0+255),b
  5725  000CCC  0EFF               	movlw	255
  5726  000CCE  25CD               	addwf	(??_f_write+1)& (0+255),w,b
  5727  000CD0  6FDB               	movwf	f_write@sect& (0+255),b
  5728  000CD2  0EFF               	movlw	255
  5729  000CD4  21CE               	addwfc	(??_f_write+2)& (0+255),w,b
  5730  000CD6  6FDC               	movwf	(f_write@sect+1)& (0+255),b
  5731  000CD8  0EFF               	movlw	255
  5732  000CDA  21CF               	addwfc	(??_f_write+3)& (0+255),w,b
  5733  000CDC  6FDD               	movwf	(f_write@sect+2)& (0+255),b
  5734  000CDE  0EFF               	movlw	255
  5735  000CE0  21D0               	addwfc	(??_f_write+4)& (0+255),w,b
  5736  000CE2  6FDE               	movwf	(f_write@sect+3)& (0+255),b
  5737                           
  5738                           ; BSR set to: 0
  5739                           ;tff.c: 1046: if (!move_window(sect)) goto fw_error;
  5740  000CE4  C0DB  F08B         	movff	f_write@sect,move_window@sector
  5741  000CE8  C0DC  F08C         	movff	f_write@sect+1,move_window@sector+1
  5742  000CEC  C0DD  F08D         	movff	f_write@sect+2,move_window@sector+2
  5743  000CF0  C0DE  F08E         	movff	f_write@sect+3,move_window@sector+3
  5744  000CF4  EC40  F019         	call	_move_window	;wreg free
  5745  000CF8  0900               	iorlw	0
  5746  000CFA  B4D8               	btfsc	status,2,c
  5747  000CFC  D0BA               	goto	l1155
  5748                           
  5749                           ;tff.c: 1047: wcnt = 512U - (fp->fptr % 512U);
  5750  000CFE  0EFF               	movlw	255
  5751  000D00  0100               	movlb	0	; () banked
  5752  000D02  6FCC               	movwf	??_f_write& (0+255),b
  5753  000D04  0E01               	movlw	1
  5754  000D06  6FCD               	movwf	(??_f_write+1)& (0+255),b
  5755  000D08  EE20 F006          	lfsr	2,6
  5756  000D0C  51C4               	movf	f_write@fp& (0+255),w,b
  5757  000D0E  26D9               	addwf	fsr2l,f,c
  5758  000D10  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5759  000D12  22DA               	addwfc	fsr2h,f,c
  5760  000D14  CFDE F0CE          	movff	postinc2,??_f_write+2
  5761  000D18  CFDD F0CF          	movff	postdec2,??_f_write+3
  5762  000D1C  51CC               	movf	??_f_write& (0+255),w,b
  5763  000D1E  17CE               	andwf	(??_f_write+2)& (0+255),f,b
  5764  000D20  51CD               	movf	(??_f_write+1)& (0+255),w,b
  5765  000D22  17CF               	andwf	(??_f_write+3)& (0+255),f,b
  5766  000D24  1FCE               	comf	(??_f_write+2)& (0+255),f,b
  5767  000D26  1FCF               	comf	(??_f_write+3)& (0+255),f,b
  5768  000D28  4BCE               	infsnz	(??_f_write+2)& (0+255),f,b
  5769  000D2A  2BCF               	incf	(??_f_write+3)& (0+255),f,b
  5770  000D2C  0E00               	movlw	0
  5771  000D2E  25CE               	addwf	(??_f_write+2)& (0+255),w,b
  5772  000D30  6FE3               	movwf	f_write@wcnt& (0+255),b
  5773  000D32  0E02               	movlw	2
  5774  000D34  21CF               	addwfc	(??_f_write+3)& (0+255),w,b
  5775  000D36  6FE4               	movwf	(f_write@wcnt+1)& (0+255),b
  5776                           
  5777                           ; BSR set to: 0
  5778                           ;tff.c: 1048: if (wcnt > btw) wcnt = btw;
  5779  000D38  51E3               	movf	f_write@wcnt& (0+255),w,b
  5780  000D3A  5DC8               	subwf	f_write@btw& (0+255),w,b
  5781  000D3C  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
  5782  000D3E  59C9               	subwfb	(f_write@btw+1)& (0+255),w,b
  5783  000D40  B0D8               	btfsc	status,0,c
  5784  000D42  D004               	goto	l1163
  5785                           
  5786                           ; BSR set to: 0
  5787  000D44  C0C8  F0E3         	movff	f_write@btw,f_write@wcnt
  5788  000D48  C0C9  F0E4         	movff	f_write@btw+1,f_write@wcnt+1
  5789  000D4C                     l1163:
  5790                           
  5791                           ; BSR set to: 0
  5792                           ;tff.c: 1049: memcpy(&fp->fs->win[fp->fptr % 512U], wbuff, wcnt);
  5793                           
  5794                           ; BSR set to: 0
  5795  000D4C  0EFF               	movlw	255
  5796  000D4E  6FCC               	movwf	??_f_write& (0+255),b
  5797  000D50  0E01               	movlw	1
  5798  000D52  6FCD               	movwf	(??_f_write+1)& (0+255),b
  5799  000D54  EE20 F006          	lfsr	2,6
  5800  000D58  51C4               	movf	f_write@fp& (0+255),w,b
  5801  000D5A  26D9               	addwf	fsr2l,f,c
  5802  000D5C  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5803  000D5E  22DA               	addwfc	fsr2h,f,c
  5804  000D60  CFDE F0CE          	movff	postinc2,??_f_write+2
  5805  000D64  CFDD F0CF          	movff	postdec2,??_f_write+3
  5806  000D68  51CC               	movf	??_f_write& (0+255),w,b
  5807  000D6A  17CE               	andwf	(??_f_write+2)& (0+255),f,b
  5808  000D6C  51CD               	movf	(??_f_write+1)& (0+255),w,b
  5809  000D6E  17CF               	andwf	(??_f_write+3)& (0+255),f,b
  5810  000D70  0E20               	movlw	32
  5811  000D72  27CE               	addwf	(??_f_write+2)& (0+255),f,b
  5812  000D74  0E00               	movlw	0
  5813  000D76  23CF               	addwfc	(??_f_write+3)& (0+255),f,b
  5814  000D78  EE20 F004          	lfsr	2,4
  5815  000D7C  51C4               	movf	f_write@fp& (0+255),w,b
  5816  000D7E  26D9               	addwf	fsr2l,f,c
  5817  000D80  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5818  000D82  22DA               	addwfc	fsr2h,f,c
  5819  000D84  CFDE F0D0          	movff	postinc2,??_f_write+4
  5820  000D88  CFDD F0D1          	movff	postdec2,??_f_write+5
  5821  000D8C  51CE               	movf	(??_f_write+2)& (0+255),w,b
  5822  000D8E  25D0               	addwf	(??_f_write+4)& (0+255),w,b
  5823  000D90  6F60               	movwf	memcpy@d1& (0+255),b
  5824  000D92  51CF               	movf	(??_f_write+3)& (0+255),w,b
  5825  000D94  21D1               	addwfc	(??_f_write+5)& (0+255),w,b
  5826  000D96  6F61               	movwf	(memcpy@d1+1)& (0+255),b
  5827  000D98  C0D9  F062         	movff	f_write@wbuff,memcpy@s1
  5828  000D9C  C0DA  F063         	movff	f_write@wbuff+1,memcpy@s1+1
  5829  000DA0  C0E3  F064         	movff	f_write@wcnt,memcpy@n
  5830  000DA4  C0E4  F065         	movff	f_write@wcnt+1,memcpy@n+1
  5831  000DA8  EC9F  F026         	call	_memcpy	;wreg free
  5832                           
  5833                           ;tff.c: 1050: fp->fs->winflag = 1;
  5834  000DAC  0100               	movlb	0	; () banked
  5835  000DAE  EE20 F004          	lfsr	2,4
  5836  000DB2  51C4               	movf	f_write@fp& (0+255),w,b
  5837  000DB4  26D9               	addwf	fsr2l,f,c
  5838  000DB6  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5839  000DB8  22DA               	addwfc	fsr2h,f,c
  5840  000DBA  EE10 F01F          	lfsr	1,31
  5841  000DBE  50DE               	movf	postinc2,w,c
  5842  000DC0  26E1               	addwf	fsr1l,f,c
  5843  000DC2  50DD               	movf	postdec2,w,c
  5844  000DC4  22E2               	addwfc	fsr1h,f,c
  5845  000DC6  0E01               	movlw	1
  5846  000DC8  6EE7               	movwf	indf1,c
  5847  000DCA                     l1159:
  5848                           
  5849                           ; BSR set to: 0
  5850                           
  5851                           ; BSR set to: 0
  5852  000DCA  51E3               	movf	f_write@wcnt& (0+255),w,b
  5853  000DCC  27D9               	addwf	f_write@wbuff& (0+255),f,b
  5854  000DCE  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
  5855  000DD0  23DA               	addwfc	(f_write@wbuff+1)& (0+255),f,b
  5856                           
  5857                           ; BSR set to: 0
  5858  000DD2  EE20 F006          	lfsr	2,6
  5859  000DD6  51C4               	movf	f_write@fp& (0+255),w,b
  5860  000DD8  26D9               	addwf	fsr2l,f,c
  5861  000DDA  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5862  000DDC  22DA               	addwfc	fsr2h,f,c
  5863  000DDE  51E3               	movf	f_write@wcnt& (0+255),w,b
  5864  000DE0  26DE               	addwf	postinc2,f,c
  5865  000DE2  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
  5866  000DE4  22DE               	addwfc	postinc2,f,c
  5867  000DE6  0E00               	movlw	0
  5868  000DE8  22DE               	addwfc	postinc2,f,c
  5869  000DEA  22DE               	addwfc	postinc2,f,c
  5870                           
  5871                           ; BSR set to: 0
  5872  000DEC  C0CA  FFD9         	movff	f_write@bw,fsr2l
  5873  000DF0  C0CB  FFDA         	movff	f_write@bw+1,fsr2h
  5874  000DF4  51E3               	movf	f_write@wcnt& (0+255),w,b
  5875  000DF6  26DE               	addwf	postinc2,f,c
  5876  000DF8  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
  5877  000DFA  22DD               	addwfc	postdec2,f,c
  5878                           
  5879                           ; BSR set to: 0
  5880  000DFC  51E3               	movf	f_write@wcnt& (0+255),w,b
  5881  000DFE  5FC8               	subwf	f_write@btw& (0+255),f,b
  5882  000E00  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
  5883  000E02  5BC9               	subwfb	(f_write@btw+1)& (0+255),f,b
  5884  000E04                     l1143:
  5885                           
  5886                           ; BSR set to: 0
  5887                           
  5888                           ; BSR set to: 0
  5889  000E04  51C8               	movf	f_write@btw& (0+255),w,b
  5890  000E06  11C9               	iorwf	(f_write@btw+1)& (0+255),w,b
  5891  000E08  A4D8               	btfss	status,2,c
  5892  000E0A  D5C1               	goto	l1144
  5893  000E0C                     u11320:
  5894                           
  5895                           ; BSR set to: 0
  5896                           ;tff.c: 1051: }
  5897                           ;tff.c: 1053: if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
  5898                           
  5899                           ; BSR set to: 0
  5900  000E0C  EE20 F006          	lfsr	2,6
  5901  000E10  51C4               	movf	f_write@fp& (0+255),w,b
  5902  000E12  26D9               	addwf	fsr2l,f,c
  5903  000E14  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5904  000E16  22DA               	addwfc	fsr2h,f,c
  5905  000E18  EE10 F00A          	lfsr	1,10
  5906  000E1C  51C4               	movf	f_write@fp& (0+255),w,b
  5907  000E1E  26E1               	addwf	fsr1l,f,c
  5908  000E20  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5909  000E22  22E2               	addwfc	fsr1h,f,c
  5910  000E24  50DE               	movf	postinc2,w,c
  5911  000E26  5CE6               	subwf	postinc1,w,c
  5912  000E28  50DE               	movf	postinc2,w,c
  5913  000E2A  58E6               	subwfb	postinc1,w,c
  5914  000E2C  50DE               	movf	postinc2,w,c
  5915  000E2E  58E6               	subwfb	postinc1,w,c
  5916  000E30  50DE               	movf	postinc2,w,c
  5917  000E32  58E6               	subwfb	postinc1,w,c
  5918  000E34  B0D8               	btfsc	status,0,c
  5919  000E36  D014               	goto	l1164
  5920                           
  5921                           ; BSR set to: 0
  5922  000E38  EE20 F006          	lfsr	2,6
  5923  000E3C  51C4               	movf	f_write@fp& (0+255),w,b
  5924  000E3E  26D9               	addwf	fsr2l,f,c
  5925  000E40  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5926  000E42  22DA               	addwfc	fsr2h,f,c
  5927  000E44  EE10 F00A          	lfsr	1,10
  5928  000E48  51C4               	movf	f_write@fp& (0+255),w,b
  5929  000E4A  26E1               	addwf	fsr1l,f,c
  5930  000E4C  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5931  000E4E  22E2               	addwfc	fsr1h,f,c
  5932  000E50  CFDE FFE6          	movff	postinc2,postinc1
  5933  000E54  CFDE FFE6          	movff	postinc2,postinc1
  5934  000E58  CFDE FFE6          	movff	postinc2,postinc1
  5935  000E5C  CFDE FFE6          	movff	postinc2,postinc1
  5936  000E60                     l1164:
  5937                           
  5938                           ; BSR set to: 0
  5939                           ;tff.c: 1054: fp->flag |= 0x20;
  5940                           
  5941                           ; BSR set to: 0
  5942  000E60  EE20 F002          	lfsr	2,2
  5943  000E64  51C4               	movf	f_write@fp& (0+255),w,b
  5944  000E66  26D9               	addwf	fsr2l,f,c
  5945  000E68  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5946  000E6A  22DA               	addwfc	fsr2h,f,c
  5947  000E6C  0E00               	movlw	0
  5948  000E6E  8ADB               	bsf	plusw2,5,c
  5949                           
  5950                           ; BSR set to: 0
  5951                           ;tff.c: 1055: return res;
  5952                           ;	Return value of _f_write is never used
  5953  000E70  0012               	return	
  5954  000E72                     l1155:
  5955                           
  5956                           ;tff.c: 1058: fp->flag |= 0x80;
  5957                           
  5958                           ; BSR set to: 0
  5959  000E72  0100               	movlb	0	; () banked
  5960  000E74  EE20 F002          	lfsr	2,2
  5961  000E78  51C4               	movf	f_write@fp& (0+255),w,b
  5962  000E7A  26D9               	addwf	fsr2l,f,c
  5963  000E7C  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  5964  000E7E  22DA               	addwfc	fsr2h,f,c
  5965  000E80  0E00               	movlw	0
  5966  000E82  8EDB               	bsf	plusw2,7,c
  5967  000E84  0012               	return	
  5968  000E86                     __end_of_f_write:
  5969                           	opt stack 0
  5970                           tosu	equ	0xFFF
  5971                           tosh	equ	0xFFE
  5972                           tosl	equ	0xFFD
  5973                           pclath	equ	0xFFA
  5974                           tblptru	equ	0xFF8
  5975                           tblptrh	equ	0xFF7
  5976                           tblptrl	equ	0xFF6
  5977                           tablat	equ	0xFF5
  5978                           prodh	equ	0xFF4
  5979                           prodl	equ	0xFF3
  5980                           intcon	equ	0xFF2
  5981                           intcon2	equ	0xFF1
  5982                           intcon3	equ	0xFF0
  5983                           postinc0	equ	0xFEE
  5984                           wreg	equ	0xFE8
  5985                           indf1	equ	0xFE7
  5986                           postinc1	equ	0xFE6
  5987                           postdec1	equ	0xFE5
  5988                           fsr1h	equ	0xFE2
  5989                           fsr1l	equ	0xFE1
  5990                           indf2	equ	0xFDF
  5991                           postinc2	equ	0xFDE
  5992                           postdec2	equ	0xFDD
  5993                           plusw2	equ	0xFDB
  5994                           fsr2h	equ	0xFDA
  5995                           fsr2l	equ	0xFD9
  5996                           status	equ	0xFD8
  5997                           
  5998 ;; *************** function ___llmod *****************
  5999 ;; Defined at:
  6000 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  6001 ;; Parameters:    Size  Location     Type
  6002 ;;  dividend        4    0[BANK0 ] unsigned long 
  6003 ;;  divisor         4    4[BANK0 ] unsigned long 
  6004 ;; Auto vars:     Size  Location     Type
  6005 ;;  counter         1    8[BANK0 ] unsigned char 
  6006 ;; Return value:  Size  Location     Type
  6007 ;;                  4    0[BANK0 ] unsigned long 
  6008 ;; Registers used:
  6009 ;;		wreg, status,2, status,0
  6010 ;; Tracked objects:
  6011 ;;		On entry : 0/0
  6012 ;;		On exit  : 0/0
  6013 ;;		Unchanged: 0/0
  6014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6015 ;;      Params:         0       8       0       0       0       0       0       0       0
  6016 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6017 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6018 ;;      Totals:         0       9       0       0       0       0       0       0       0
  6019 ;;Total ram usage:        9 bytes
  6020 ;; Hardware stack levels used:    1
  6021 ;; Hardware stack levels required when called:    3
  6022 ;; This function calls:
  6023 ;;		Nothing
  6024 ;; This function is called by:
  6025 ;;		_fprintf
  6026 ;; This function uses a non-reentrant model
  6027 ;;
  6028                           
  6029                           	psect	text22
  6030  004910                     __ptext22:
  6031                           	opt stack 0
  6032  004910                     ___llmod:
  6033                           	opt stack 24
  6034                           
  6035                           ; BSR set to: 0
  6036                           ;incstack = 0
  6037  004910  0100               	movlb	0	; () banked
  6038  004912  5164               	movf	___llmod@divisor& (0+255),w,b
  6039  004914  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  6040  004916  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  6041  004918  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  6042  00491A  B4D8               	btfsc	status,2,c
  6043  00491C  D024               	goto	l1708
  6044                           
  6045                           ; BSR set to: 0
  6046  00491E  0E01               	movlw	1
  6047  004920  6F68               	movwf	___llmod@counter& (0+255),b
  6048  004922  D006               	goto	l1703
  6049  004924                     
  6050                           ; BSR set to: 0
  6051                           
  6052                           ; BSR set to: 0
  6053  004924  90D8               	bcf	status,0,c
  6054  004926  3764               	rlcf	___llmod@divisor& (0+255),f,b
  6055  004928  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  6056  00492A  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  6057  00492C  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  6058  00492E  2B68               	incf	___llmod@counter& (0+255),f,b
  6059  004930                     l1703:
  6060                           
  6061                           ; BSR set to: 0
  6062                           
  6063                           ; BSR set to: 0
  6064  004930  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
  6065  004932  D7F8               	goto	l1704
  6066  004934                     u12640:
  6067                           
  6068                           ; BSR set to: 0
  6069                           
  6070                           ; BSR set to: 0
  6071                           
  6072                           ; BSR set to: 0
  6073  004934  5164               	movf	___llmod@divisor& (0+255),w,b
  6074  004936  5D60               	subwf	___llmod@dividend& (0+255),w,b
  6075  004938  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  6076  00493A  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  6077  00493C  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  6078  00493E  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  6079  004940  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  6080  004942  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  6081  004944  A0D8               	btfss	status,0,c
  6082  004946  D008               	goto	l1707
  6083                           
  6084                           ; BSR set to: 0
  6085  004948  5164               	movf	___llmod@divisor& (0+255),w,b
  6086  00494A  5F60               	subwf	___llmod@dividend& (0+255),f,b
  6087  00494C  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  6088  00494E  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  6089  004950  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  6090  004952  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  6091  004954  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  6092  004956  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  6093  004958                     l1707:
  6094                           
  6095                           ; BSR set to: 0
  6096                           
  6097                           ; BSR set to: 0
  6098  004958  90D8               	bcf	status,0,c
  6099  00495A  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  6100  00495C  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  6101  00495E  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  6102  004960  3364               	rrcf	___llmod@divisor& (0+255),f,b
  6103                           
  6104                           ; BSR set to: 0
  6105  004962  2F68               	decfsz	___llmod@counter& (0+255),f,b
  6106  004964  D7E7               	goto	u12640
  6107  004966                     l1708:
  6108                           
  6109                           ; BSR set to: 0
  6110                           
  6111                           ; BSR set to: 0
  6112  004966  C060  F060         	movff	___llmod@dividend,?___llmod
  6113  00496A  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
  6114  00496E  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
  6115  004972  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
  6116                           
  6117                           ; BSR set to: 0
  6118  004976  0012               	return		;funcret
  6119  004978                     __end_of___llmod:
  6120                           	opt stack 0
  6121                           tosu	equ	0xFFF
  6122                           tosh	equ	0xFFE
  6123                           tosl	equ	0xFFD
  6124                           pclath	equ	0xFFA
  6125                           tblptru	equ	0xFF8
  6126                           tblptrh	equ	0xFF7
  6127                           tblptrl	equ	0xFF6
  6128                           tablat	equ	0xFF5
  6129                           prodh	equ	0xFF4
  6130                           prodl	equ	0xFF3
  6131                           intcon	equ	0xFF2
  6132                           intcon2	equ	0xFF1
  6133                           intcon3	equ	0xFF0
  6134                           postinc0	equ	0xFEE
  6135                           wreg	equ	0xFE8
  6136                           indf1	equ	0xFE7
  6137                           postinc1	equ	0xFE6
  6138                           postdec1	equ	0xFE5
  6139                           fsr1h	equ	0xFE2
  6140                           fsr1l	equ	0xFE1
  6141                           indf2	equ	0xFDF
  6142                           postinc2	equ	0xFDE
  6143                           postdec2	equ	0xFDD
  6144                           plusw2	equ	0xFDB
  6145                           fsr2h	equ	0xFDA
  6146                           fsr2l	equ	0xFD9
  6147                           status	equ	0xFD8
  6148                           
  6149 ;; *************** function _f_open *****************
  6150 ;; Defined at:
  6151 ;;		line 825 in file "bibliotecas/tff.c"
  6152 ;; Parameters:    Size  Location     Type
  6153 ;;  fp              2  119[BANK0 ] PTR struct _FIL
  6154 ;;		 -> fil(28), 
  6155 ;;  path            2  121[BANK0 ] PTR const unsigned char 
  6156 ;;		 -> filename(15), 
  6157 ;;  mode            1  123[BANK0 ] unsigned char 
  6158 ;; Auto vars:     Size  Location     Type
  6159 ;;  dw              4   14[BANK1 ] unsigned long 
  6160 ;;  rs              2   12[BANK1 ] unsigned short 
  6161 ;;  dj             14   21[BANK1 ] struct _DIR_E
  6162 ;;  fn             12    0[BANK1 ] unsigned char [12]
  6163 ;;  dir             2   19[BANK1 ] PTR unsigned char 
  6164 ;;		 -> NULL(0), fs(544), 
  6165 ;;  res             1   18[BANK1 ] enum E155
  6166 ;; Return value:  Size  Location     Type
  6167 ;;                  1    wreg      enum E3972
  6168 ;; Registers used:
  6169 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6170 ;; Tracked objects:
  6171 ;;		On entry : 0/0
  6172 ;;		On exit  : 0/0
  6173 ;;		Unchanged: 0/0
  6174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6175 ;;      Params:         0       5       0       0       0       0       0       0       0
  6176 ;;      Locals:         0       0      35       0       0       0       0       0       0
  6177 ;;      Temps:          0       4       0       0       0       0       0       0       0
  6178 ;;      Totals:         0       9      35       0       0       0       0       0       0
  6179 ;;Total ram usage:       44 bytes
  6180 ;; Hardware stack levels used:    1
  6181 ;; Hardware stack levels required when called:   12
  6182 ;; This function calls:
  6183 ;;		_auto_mount
  6184 ;;		_get_fattime
  6185 ;;		_memcpy
  6186 ;;		_memset
  6187 ;;		_move_window
  6188 ;;		_remove_chain
  6189 ;;		_reserve_direntry
  6190 ;;		_trace_path
  6191 ;; This function is called by:
  6192 ;;		_escrita_sdcard
  6193 ;;		_sdcard_init
  6194 ;; This function uses a non-reentrant model
  6195 ;;
  6196                           
  6197                           	psect	text23
  6198  001BBE                     __ptext23:
  6199                           	opt stack 0
  6200  001BBE                     _f_open:
  6201                           	opt stack 16
  6202                           
  6203                           ;tff.c: 831: FRESULT res;
  6204                           ;tff.c: 832: DIR_E dj;
  6205                           ;tff.c: 833: BYTE *dir;
  6206                           ;tff.c: 834: char fn[8+3+1];
  6207                           ;tff.c: 837: fp->fs = (0);
  6208                           
  6209                           ; BSR set to: 0
  6210                           ;incstack = 0
  6211  001BBE  0100               	movlb	0	; () banked
  6212  001BC0  EE20 F004          	lfsr	2,4
  6213  001BC4  51D7               	movf	f_open@fp& (0+255),w,b
  6214  001BC6  26D9               	addwf	fsr2l,f,c
  6215  001BC8  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  6216  001BCA  22DA               	addwfc	fsr2h,f,c
  6217  001BCC  0E00               	movlw	0
  6218  001BCE  6EDE               	movwf	postinc2,c
  6219  001BD0  0E00               	movlw	0
  6220  001BD2  6EDD               	movwf	postdec2,c
  6221                           
  6222                           ; BSR set to: 0
  6223                           ;tff.c: 839: mode &= (0x01|0x02|0x08|0x10|0x04);
  6224  001BD4  0E1F               	movlw	31
  6225  001BD6  17DB               	andwf	f_open@mode& (0+255),f,b
  6226                           
  6227                           ; BSR set to: 0
  6228                           ;tff.c: 840: res = auto_mount(&path, (BYTE)(mode & (0x02|0x08|0x10|0x04)));
  6229  001BD8  0ED9               	movlw	low f_open@path
  6230  001BDA  6F93               	movwf	auto_mount@path& (0+255),b
  6231  001BDC  0E00               	movlw	high f_open@path
  6232  001BDE  6F94               	movwf	(auto_mount@path+1)& (0+255),b
  6233  001BE0  51DB               	movf	f_open@mode& (0+255),w,b
  6234  001BE2  0B1E               	andlw	30
  6235  001BE4  6F95               	movwf	auto_mount@chk_wp& (0+255),b
  6236  001BE6  EC43  F007         	call	_auto_mount	;wreg free
  6237  001BEA  0101               	movlb	1	; () banked
  6238  001BEC  6F9E               	movwf	f_open@res& (0+255),b
  6239                           
  6240                           ; BSR set to: 1
  6241                           ;tff.c: 845: if (res != FR_OK) return res;
  6242  001BEE  519E               	movf	f_open@res& (0+255),w,b
  6243  001BF0  B4D8               	btfsc	status,2,c
  6244  001BF2  D002               	goto	l1088
  6245                           
  6246                           ; BSR set to: 1
  6247  001BF4  519E               	movf	f_open@res& (0+255),w,b
  6248                           
  6249                           ; BSR set to: 1
  6250  001BF6  0012               	return	
  6251  001BF8                     l1088:
  6252                           
  6253                           ; BSR set to: 1
  6254                           ;tff.c: 846: res = trace_path(&dj, fn, path, &dir);
  6255                           
  6256                           ; BSR set to: 1
  6257  001BF8  0EA1               	movlw	low f_open@dj
  6258  001BFA  0100               	movlb	0	; () banked
  6259  001BFC  6FC0               	movwf	trace_path@dj& (0+255),b
  6260  001BFE  0E01               	movlw	high f_open@dj
  6261  001C00  6FC1               	movwf	(trace_path@dj+1)& (0+255),b
  6262  001C02  0E8C               	movlw	low f_open@fn
  6263  001C04  6FC2               	movwf	trace_path@fn& (0+255),b
  6264  001C06  0E01               	movlw	high f_open@fn
  6265  001C08  6FC3               	movwf	(trace_path@fn+1)& (0+255),b
  6266  001C0A  C0D9  F0C4         	movff	f_open@path,trace_path@path
  6267  001C0E  C0DA  F0C5         	movff	f_open@path+1,trace_path@path+1
  6268  001C12  0E9F               	movlw	low f_open@dir
  6269  001C14  6FC6               	movwf	trace_path@dir& (0+255),b
  6270  001C16  0E01               	movlw	high f_open@dir
  6271  001C18  6FC7               	movwf	(trace_path@dir+1)& (0+255),b
  6272  001C1A  ECE4  F013         	call	_trace_path	;wreg free
  6273  001C1E  0101               	movlb	1	; () banked
  6274  001C20  6F9E               	movwf	f_open@res& (0+255),b
  6275                           
  6276                           ; BSR set to: 1
  6277                           ;tff.c: 850: if (mode & (0x08|0x10|0x04)) {
  6278  001C22  C0DB  F0DC         	movff	f_open@mode,??_f_open
  6279  001C26  0E1C               	movlw	28
  6280  001C28  0100               	movlb	0	; () banked
  6281  001C2A  17DC               	andwf	??_f_open& (0+255),f,b
  6282  001C2C  B4D8               	btfsc	status,2,c
  6283  001C2E  D0F6               	goto	l1090
  6284                           
  6285                           ; BSR set to: 0
  6286                           ;tff.c: 851: CLUST rs;
  6287                           ;tff.c: 852: DWORD dw;
  6288                           ;tff.c: 853: if (res != FR_OK) {
  6289  001C30  0101               	movlb	1	; () banked
  6290  001C32  519E               	movf	f_open@res& (0+255),w,b
  6291  001C34  B4D8               	btfsc	status,2,c
  6292  001C36  D042               	goto	l1091
  6293                           
  6294                           ; BSR set to: 1
  6295                           ;tff.c: 854: if (res != FR_NO_FILE) return res;
  6296  001C38  0E02               	movlw	2
  6297  001C3A  199E               	xorwf	f_open@res& (0+255),w,b
  6298  001C3C  B4D8               	btfsc	status,2,c
  6299  001C3E  D002               	goto	l1092
  6300                           
  6301                           ; BSR set to: 1
  6302  001C40  519E               	movf	f_open@res& (0+255),w,b
  6303                           
  6304                           ; BSR set to: 1
  6305  001C42  0012               	return	
  6306  001C44                     l1092:
  6307                           
  6308                           ; BSR set to: 1
  6309                           ;tff.c: 855: res = reserve_direntry(&dj, &dir);
  6310                           
  6311                           ; BSR set to: 1
  6312  001C44  0EA1               	movlw	low f_open@dj
  6313  001C46  0100               	movlb	0	; () banked
  6314  001C48  6FC4               	movwf	reserve_direntry@dj& (0+255),b
  6315  001C4A  0E01               	movlw	high f_open@dj
  6316  001C4C  6FC5               	movwf	(reserve_direntry@dj+1)& (0+255),b
  6317  001C4E  0E9F               	movlw	low f_open@dir
  6318  001C50  6FC6               	movwf	reserve_direntry@dir& (0+255),b
  6319  001C52  0E01               	movlw	high f_open@dir
  6320  001C54  6FC7               	movwf	(reserve_direntry@dir+1)& (0+255),b
  6321  001C56  EC4D  F011         	call	_reserve_direntry	;wreg free
  6322  001C5A  0101               	movlb	1	; () banked
  6323  001C5C  6F9E               	movwf	f_open@res& (0+255),b
  6324                           
  6325                           ; BSR set to: 1
  6326                           ;tff.c: 856: if (res != FR_OK) return res;
  6327  001C5E  519E               	movf	f_open@res& (0+255),w,b
  6328  001C60  B4D8               	btfsc	status,2,c
  6329  001C62  D002               	goto	l1093
  6330                           
  6331                           ; BSR set to: 1
  6332  001C64  519E               	movf	f_open@res& (0+255),w,b
  6333                           
  6334                           ; BSR set to: 1
  6335  001C66  0012               	return	
  6336  001C68                     l1093:
  6337                           
  6338                           ; BSR set to: 1
  6339                           ;tff.c: 857: memset(dir, 0, 32);
  6340                           
  6341                           ; BSR set to: 1
  6342  001C68  C19F  F060         	movff	f_open@dir,memset@p1
  6343  001C6C  C1A0  F061         	movff	f_open@dir+1,memset@p1+1
  6344  001C70  0E00               	movlw	0
  6345  001C72  0100               	movlb	0	; () banked
  6346  001C74  6F63               	movwf	(memset@c+1)& (0+255),b
  6347  001C76  0E00               	movlw	0
  6348  001C78  6F62               	movwf	memset@c& (0+255),b
  6349  001C7A  0E00               	movlw	0
  6350  001C7C  6F65               	movwf	(memset@n+1)& (0+255),b
  6351  001C7E  0E20               	movlw	32
  6352  001C80  6F64               	movwf	memset@n& (0+255),b
  6353  001C82  EC24  F028         	call	_memset	;wreg free
  6354                           
  6355                           ;tff.c: 858: memcpy(&dir[0], fn, 8+3);
  6356  001C86  C19F  F060         	movff	f_open@dir,memcpy@d1
  6357  001C8A  C1A0  F061         	movff	f_open@dir+1,memcpy@d1+1
  6358  001C8E  0E8C               	movlw	low f_open@fn
  6359  001C90  0100               	movlb	0	; () banked
  6360  001C92  6F62               	movwf	memcpy@s1& (0+255),b
  6361  001C94  0E01               	movlw	high f_open@fn
  6362  001C96  6F63               	movwf	(memcpy@s1+1)& (0+255),b
  6363  001C98  0E00               	movlw	0
  6364  001C9A  6F65               	movwf	(memcpy@n+1)& (0+255),b
  6365  001C9C  0E0B               	movlw	11
  6366  001C9E  6F64               	movwf	memcpy@n& (0+255),b
  6367  001CA0  EC9F  F026         	call	_memcpy	;wreg free
  6368                           
  6369                           ;tff.c: 859: dir[12] = fn[11];
  6370  001CA4  0101               	movlb	1	; () banked
  6371  001CA6  EE20 F00C          	lfsr	2,12
  6372  001CAA  519F               	movf	f_open@dir& (0+255),w,b
  6373  001CAC  26D9               	addwf	fsr2l,f,c
  6374  001CAE  51A0               	movf	(f_open@dir+1)& (0+255),w,b
  6375  001CB0  22DA               	addwfc	fsr2h,f,c
  6376  001CB2  C197  FFDF         	movff	f_open@fn+11,indf2
  6377                           
  6378                           ; BSR set to: 1
  6379                           ;tff.c: 860: mode |= 0x08;
  6380  001CB6  0100               	movlb	0	; () banked
  6381  001CB8  87DB               	bsf	f_open@mode& (0+255),3,b
  6382                           
  6383                           ;tff.c: 861: }
  6384  001CBA  D080               	goto	l1099
  6385  001CBC                     l1091:
  6386                           
  6387                           ; BSR set to: 1
  6388                           ;tff.c: 862: else {
  6389                           ;tff.c: 863: if (mode & 0x04)
  6390  001CBC  0100               	movlb	0	; () banked
  6391  001CBE  A5DB               	btfss	f_open@mode& (0+255),2,b
  6392  001CC0  D002               	goto	l1095
  6393                           
  6394                           ; BSR set to: 0
  6395                           ;tff.c: 864: return FR_EXIST;
  6396  001CC2  0E07               	movlw	7
  6397                           
  6398                           ; BSR set to: 0
  6399  001CC4  0012               	return	
  6400  001CC6                     l1095:
  6401                           
  6402                           ; BSR set to: 0
  6403                           ;tff.c: 865: if (!dir || (dir[11] & (0x01|0x10)))
  6404                           
  6405                           ; BSR set to: 0
  6406  001CC6  0101               	movlb	1	; () banked
  6407  001CC8  519F               	movf	f_open@dir& (0+255),w,b
  6408  001CCA  11A0               	iorwf	(f_open@dir+1)& (0+255),w,b
  6409  001CCC  B4D8               	btfsc	status,2,c
  6410  001CCE  D00D               	goto	u12760
  6411                           
  6412                           ; BSR set to: 1
  6413  001CD0  EE20 F00B          	lfsr	2,11
  6414  001CD4  519F               	movf	f_open@dir& (0+255),w,b
  6415  001CD6  26D9               	addwf	fsr2l,f,c
  6416  001CD8  51A0               	movf	(f_open@dir+1)& (0+255),w,b
  6417  001CDA  22DA               	addwfc	fsr2h,f,c
  6418  001CDC  50DF               	movf	indf2,w,c
  6419  001CDE  0100               	movlb	0	; () banked
  6420  001CE0  6FDC               	movwf	??_f_open& (0+255),b
  6421  001CE2  0E11               	movlw	17
  6422  001CE4  17DC               	andwf	??_f_open& (0+255),f,b
  6423  001CE6  B4D8               	btfsc	status,2,c
  6424  001CE8  D002               	goto	l1096
  6425  001CEA                     u12760:
  6426                           
  6427                           ;tff.c: 866: return FR_DENIED;
  6428                           
  6429                           ; BSR set to: 0
  6430  001CEA  0E06               	movlw	6
  6431  001CEC  0012               	return	
  6432  001CEE                     l1096:
  6433                           
  6434                           ; BSR set to: 0
  6435                           ;tff.c: 867: if (mode & 0x08) {
  6436  001CEE  A7DB               	btfss	f_open@mode& (0+255),3,b
  6437  001CF0  D065               	goto	l1099
  6438                           
  6439                           ; BSR set to: 0
  6440                           ;tff.c: 872: rs = (WORD)(*(WORD*)(BYTE*)(&dir[26]));
  6441  001CF2  0101               	movlb	1	; () banked
  6442  001CF4  EE20 F01A          	lfsr	2,26
  6443  001CF8  519F               	movf	f_open@dir& (0+255),w,b
  6444  001CFA  26D9               	addwf	fsr2l,f,c
  6445  001CFC  51A0               	movf	(f_open@dir+1)& (0+255),w,b
  6446  001CFE  22DA               	addwfc	fsr2h,f,c
  6447  001D00  CFDE F198          	movff	postinc2,f_open@rs
  6448  001D04  CFDD F199          	movff	postdec2,f_open@rs+1
  6449                           
  6450                           ;tff.c: 874: *(WORD*)(BYTE*)(&dir[26])=(WORD)(0);
  6451  001D08  EE20 F01A          	lfsr	2,26
  6452  001D0C  519F               	movf	f_open@dir& (0+255),w,b
  6453  001D0E  26D9               	addwf	fsr2l,f,c
  6454  001D10  51A0               	movf	(f_open@dir+1)& (0+255),w,b
  6455  001D12  22DA               	addwfc	fsr2h,f,c
  6456  001D14  0E00               	movlw	0
  6457  001D16  6EDE               	movwf	postinc2,c
  6458  001D18  0E00               	movlw	0
  6459  001D1A  6EDD               	movwf	postdec2,c
  6460                           
  6461                           ;tff.c: 875: *(DWORD*)(BYTE*)(&dir[28])=(DWORD)(0);
  6462  001D1C  EE20 F01C          	lfsr	2,28
  6463  001D20  519F               	movf	f_open@dir& (0+255),w,b
  6464  001D22  26D9               	addwf	fsr2l,f,c
  6465  001D24  51A0               	movf	(f_open@dir+1)& (0+255),w,b
  6466  001D26  22DA               	addwfc	fsr2h,f,c
  6467  001D28  6ADE               	clrf	postinc2,c
  6468  001D2A  6ADE               	clrf	postinc2,c
  6469  001D2C  6ADE               	clrf	postinc2,c
  6470  001D2E  6ADD               	clrf	postdec2,c
  6471                           
  6472                           ;tff.c: 876: dj.fs->winflag = 1;
  6473  001D30  EE20 F01F          	lfsr	2,31
  6474  001D34  51A5               	movf	(f_open@dj+4)& (0+255),w,b
  6475  001D36  26D9               	addwf	fsr2l,f,c
  6476  001D38  51A6               	movf	(f_open@dj+5)& (0+255),w,b
  6477  001D3A  22DA               	addwfc	fsr2h,f,c
  6478  001D3C  0E01               	movlw	1
  6479  001D3E  6EDF               	movwf	indf2,c
  6480                           
  6481                           ;tff.c: 877: dw = dj.fs->winsect;
  6482  001D40  EE20 F004          	lfsr	2,4
  6483  001D44  51A5               	movf	(f_open@dj+4)& (0+255),w,b
  6484  001D46  26D9               	addwf	fsr2l,f,c
  6485  001D48  51A6               	movf	(f_open@dj+5)& (0+255),w,b
  6486  001D4A  22DA               	addwfc	fsr2h,f,c
  6487  001D4C  CFDE F19A          	movff	postinc2,f_open@dw
  6488  001D50  CFDE F19B          	movff	postinc2,f_open@dw+1
  6489  001D54  CFDE F19C          	movff	postinc2,f_open@dw+2
  6490  001D58  CFDE F19D          	movff	postinc2,f_open@dw+3
  6491                           
  6492                           ; BSR set to: 1
  6493                           ;tff.c: 878: if (!remove_chain(rs) || !move_window(dw))
  6494  001D5C  C198  F0B6         	movff	f_open@rs,remove_chain@clust
  6495  001D60  C199  F0B7         	movff	f_open@rs+1,remove_chain@clust+1
  6496  001D64  EC9C  F020         	call	_remove_chain	;wreg free
  6497  001D68  0900               	iorlw	0
  6498  001D6A  B4D8               	btfsc	status,2,c
  6499  001D6C  D00D               	goto	u12790
  6500  001D6E  C19A  F08B         	movff	f_open@dw,move_window@sector
  6501  001D72  C19B  F08C         	movff	f_open@dw+1,move_window@sector+1
  6502  001D76  C19C  F08D         	movff	f_open@dw+2,move_window@sector+2
  6503  001D7A  C19D  F08E         	movff	f_open@dw+3,move_window@sector+3
  6504  001D7E  EC40  F019         	call	_move_window	;wreg free
  6505  001D82  0900               	iorlw	0
  6506  001D84  A4D8               	btfss	status,2,c
  6507  001D86  D002               	goto	l1100
  6508  001D88                     u12790:
  6509                           
  6510                           ;tff.c: 879: return FR_RW_ERROR;
  6511  001D88  0E08               	movlw	8
  6512  001D8A  0012               	return	
  6513  001D8C                     l1100:
  6514                           
  6515                           ;tff.c: 880: dj.fs->last_clust = rs - 1;
  6516  001D8C  0EFF               	movlw	255
  6517  001D8E  0100               	movlb	0	; () banked
  6518  001D90  6FDC               	movwf	??_f_open& (0+255),b
  6519  001D92  0EFF               	movlw	255
  6520  001D94  6FDD               	movwf	(??_f_open+1)& (0+255),b
  6521  001D96  C198  F0DE         	movff	f_open@rs,??_f_open+2
  6522  001D9A  C199  F0DF         	movff	f_open@rs+1,??_f_open+3
  6523  001D9E  51DC               	movf	??_f_open& (0+255),w,b
  6524  001DA0  27DE               	addwf	(??_f_open+2)& (0+255),f,b
  6525  001DA2  51DD               	movf	(??_f_open+1)& (0+255),w,b
  6526  001DA4  23DF               	addwfc	(??_f_open+3)& (0+255),f,b
  6527  001DA6  0101               	movlb	1	; () banked
  6528  001DA8  EE20 F018          	lfsr	2,24
  6529  001DAC  51A5               	movf	(f_open@dj+4)& (0+255),w,b
  6530  001DAE  26D9               	addwf	fsr2l,f,c
  6531  001DB0  51A6               	movf	(f_open@dj+5)& (0+255),w,b
  6532  001DB2  22DA               	addwfc	fsr2h,f,c
  6533  001DB4  C0DE  FFDE         	movff	??_f_open+2,postinc2
  6534  001DB8  C0DF  FFDD         	movff	??_f_open+3,postdec2
  6535  001DBC                     l1099:
  6536                           
  6537                           ;tff.c: 881: }
  6538                           ;tff.c: 882: }
  6539                           ;tff.c: 883: if (mode & 0x08) {
  6540                           
  6541                           ; BSR set to: 1
  6542                           
  6543                           ; BSR set to: 1
  6544  001DBC  0100               	movlb	0	; () banked
  6545  001DBE  A7DB               	btfss	f_open@mode& (0+255),3,b
  6546  001DC0  D04F               	goto	l1109
  6547                           
  6548                           ; BSR set to: 0
  6549                           ;tff.c: 884: dir[11] = 0;
  6550  001DC2  0101               	movlb	1	; () banked
  6551  001DC4  EE20 F00B          	lfsr	2,11
  6552  001DC8  519F               	movf	f_open@dir& (0+255),w,b
  6553  001DCA  26D9               	addwf	fsr2l,f,c
  6554  001DCC  51A0               	movf	(f_open@dir+1)& (0+255),w,b
  6555  001DCE  22DA               	addwfc	fsr2h,f,c
  6556  001DD0  0E00               	movlw	0
  6557  001DD2  6EDF               	movwf	indf2,c
  6558                           
  6559                           ; BSR set to: 1
  6560                           ;tff.c: 885: dw = get_fattime();
  6561  001DD4  EC94  F01E         	call	_get_fattime	;wreg free
  6562  001DD8  C060  F19A         	movff	?_get_fattime,f_open@dw
  6563  001DDC  C061  F19B         	movff	?_get_fattime+1,f_open@dw+1
  6564  001DE0  C062  F19C         	movff	?_get_fattime+2,f_open@dw+2
  6565  001DE4  C063  F19D         	movff	?_get_fattime+3,f_open@dw+3
  6566                           
  6567                           ;tff.c: 886: *(DWORD*)(BYTE*)(&dir[14])=(DWORD)(dw);
  6568  001DE8  0101               	movlb	1	; () banked
  6569  001DEA  EE20 F00E          	lfsr	2,14
  6570  001DEE  519F               	movf	f_open@dir& (0+255),w,b
  6571  001DF0  26D9               	addwf	fsr2l,f,c
  6572  001DF2  51A0               	movf	(f_open@dir+1)& (0+255),w,b
  6573  001DF4  22DA               	addwfc	fsr2h,f,c
  6574  001DF6  C19A  FFDE         	movff	f_open@dw,postinc2
  6575  001DFA  C19B  FFDE         	movff	f_open@dw+1,postinc2
  6576  001DFE  C19C  FFDE         	movff	f_open@dw+2,postinc2
  6577  001E02  C19D  FFDE         	movff	f_open@dw+3,postinc2
  6578                           
  6579                           ; BSR set to: 1
  6580                           ;tff.c: 887: dj.fs->winflag = 1;
  6581  001E06  EE20 F01F          	lfsr	2,31
  6582  001E0A  51A5               	movf	(f_open@dj+4)& (0+255),w,b
  6583  001E0C  26D9               	addwf	fsr2l,f,c
  6584  001E0E  51A6               	movf	(f_open@dj+5)& (0+255),w,b
  6585  001E10  22DA               	addwfc	fsr2h,f,c
  6586  001E12  0E01               	movlw	1
  6587  001E14  6EDF               	movwf	indf2,c
  6588                           
  6589                           ; BSR set to: 1
  6590                           ;tff.c: 888: mode |= 0x20;
  6591  001E16  0100               	movlb	0	; () banked
  6592  001E18  8BDB               	bsf	f_open@mode& (0+255),5,b
  6593                           
  6594                           ; BSR set to: 0
  6595                           ;tff.c: 889: }
  6596                           ;tff.c: 890: }
  6597  001E1A  D022               	goto	l1109
  6598  001E1C                     l1090:
  6599                           
  6600                           ; BSR set to: 0
  6601                           ;tff.c: 892: else {
  6602                           ;tff.c: 894: if (res != FR_OK) return res;
  6603                           
  6604                           ; BSR set to: 0
  6605  001E1C  0101               	movlb	1	; () banked
  6606  001E1E  519E               	movf	f_open@res& (0+255),w,b
  6607  001E20  B4D8               	btfsc	status,2,c
  6608  001E22  D002               	goto	l1105
  6609                           
  6610                           ; BSR set to: 1
  6611  001E24  519E               	movf	f_open@res& (0+255),w,b
  6612                           
  6613                           ; BSR set to: 1
  6614  001E26  0012               	return	
  6615  001E28                     l1105:
  6616                           
  6617                           ; BSR set to: 1
  6618                           ;tff.c: 895: if (!dir || (dir[11] & 0x10))
  6619                           
  6620                           ; BSR set to: 1
  6621  001E28  519F               	movf	f_open@dir& (0+255),w,b
  6622  001E2A  11A0               	iorwf	(f_open@dir+1)& (0+255),w,b
  6623  001E2C  B4D8               	btfsc	status,2,c
  6624  001E2E  D008               	goto	u12830
  6625                           
  6626                           ; BSR set to: 1
  6627  001E30  EE20 F00B          	lfsr	2,11
  6628  001E34  519F               	movf	f_open@dir& (0+255),w,b
  6629  001E36  26D9               	addwf	fsr2l,f,c
  6630  001E38  51A0               	movf	(f_open@dir+1)& (0+255),w,b
  6631  001E3A  22DA               	addwfc	fsr2h,f,c
  6632  001E3C  A8DF               	btfss	indf2,4,c
  6633  001E3E  D002               	goto	l1106
  6634  001E40                     u12830:
  6635                           
  6636                           ; BSR set to: 1
  6637                           ;tff.c: 896: return FR_NO_FILE;
  6638                           
  6639                           ; BSR set to: 1
  6640  001E40  0E02               	movlw	2
  6641                           
  6642                           ; BSR set to: 1
  6643  001E42  0012               	return	
  6644  001E44                     l1106:
  6645                           
  6646                           ; BSR set to: 1
  6647                           ;tff.c: 898: if ((mode & 0x02) && (dir[11] & 0x01))
  6648  001E44  0100               	movlb	0	; () banked
  6649  001E46  A3DB               	btfss	f_open@mode& (0+255),1,b
  6650  001E48  D00B               	goto	l1109
  6651                           
  6652                           ; BSR set to: 0
  6653  001E4A  0101               	movlb	1	; () banked
  6654  001E4C  EE20 F00B          	lfsr	2,11
  6655  001E50  519F               	movf	f_open@dir& (0+255),w,b
  6656  001E52  26D9               	addwf	fsr2l,f,c
  6657  001E54  51A0               	movf	(f_open@dir+1)& (0+255),w,b
  6658  001E56  22DA               	addwfc	fsr2h,f,c
  6659  001E58  A0DF               	btfss	indf2,0,c
  6660  001E5A  D002               	goto	l1109
  6661                           
  6662                           ; BSR set to: 1
  6663                           ;tff.c: 899: return FR_DENIED;
  6664  001E5C  0E06               	movlw	6
  6665                           
  6666                           ; BSR set to: 1
  6667  001E5E  0012               	return	
  6668  001E60                     l1109:
  6669                           
  6670                           ;tff.c: 900: }
  6671                           ;tff.c: 901: fp->dir_sect = dj.fs->winsect;
  6672                           
  6673                           ; BSR set to: 1
  6674                           
  6675                           ; BSR set to: 1
  6676  001E60  0101               	movlb	1	; () banked
  6677  001E62  EE20 F004          	lfsr	2,4
  6678  001E66  51A5               	movf	(f_open@dj+4)& (0+255),w,b
  6679  001E68  26D9               	addwf	fsr2l,f,c
  6680  001E6A  51A6               	movf	(f_open@dj+5)& (0+255),w,b
  6681  001E6C  22DA               	addwfc	fsr2h,f,c
  6682  001E6E  0100               	movlb	0	; () banked
  6683  001E70  EE10 F016          	lfsr	1,22
  6684  001E74  51D7               	movf	f_open@fp& (0+255),w,b
  6685  001E76  26E1               	addwf	fsr1l,f,c
  6686  001E78  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  6687  001E7A  22E2               	addwfc	fsr1h,f,c
  6688  001E7C  CFDE FFE6          	movff	postinc2,postinc1
  6689  001E80  CFDE FFE6          	movff	postinc2,postinc1
  6690  001E84  CFDE FFE6          	movff	postinc2,postinc1
  6691  001E88  CFDE FFE6          	movff	postinc2,postinc1
  6692                           
  6693                           ; BSR set to: 0
  6694                           ;tff.c: 902: fp->dir_ptr = dir;
  6695  001E8C  EE20 F01A          	lfsr	2,26
  6696  001E90  51D7               	movf	f_open@fp& (0+255),w,b
  6697  001E92  26D9               	addwf	fsr2l,f,c
  6698  001E94  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  6699  001E96  22DA               	addwfc	fsr2h,f,c
  6700  001E98  C19F  FFDE         	movff	f_open@dir,postinc2
  6701  001E9C  C1A0  FFDD         	movff	f_open@dir+1,postdec2
  6702                           
  6703                           ; BSR set to: 0
  6704                           ;tff.c: 904: fp->flag = mode;
  6705  001EA0  EE20 F002          	lfsr	2,2
  6706  001EA4  51D7               	movf	f_open@fp& (0+255),w,b
  6707  001EA6  26D9               	addwf	fsr2l,f,c
  6708  001EA8  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  6709  001EAA  22DA               	addwfc	fsr2h,f,c
  6710  001EAC  C0DB  FFDF         	movff	f_open@mode,indf2
  6711                           
  6712                           ;tff.c: 905: fp->org_clust =
  6713                           ;tff.c: 909: (WORD)(*(WORD*)(BYTE*)(&dir[26]));
  6714  001EB0  0101               	movlb	1	; () banked
  6715  001EB2  EE20 F01A          	lfsr	2,26
  6716  001EB6  519F               	movf	f_open@dir& (0+255),w,b
  6717  001EB8  26D9               	addwf	fsr2l,f,c
  6718  001EBA  51A0               	movf	(f_open@dir+1)& (0+255),w,b
  6719  001EBC  22DA               	addwfc	fsr2h,f,c
  6720  001EBE  0100               	movlb	0	; () banked
  6721  001EC0  EE10 F00E          	lfsr	1,14
  6722  001EC4  51D7               	movf	f_open@fp& (0+255),w,b
  6723  001EC6  26E1               	addwf	fsr1l,f,c
  6724  001EC8  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  6725  001ECA  22E2               	addwfc	fsr1h,f,c
  6726  001ECC  CFDE FFE6          	movff	postinc2,postinc1
  6727  001ED0  CFDD FFE5          	movff	postdec2,postdec1
  6728                           
  6729                           ;tff.c: 910: fp->fsize = (DWORD)(*(DWORD*)(BYTE*)(&dir[28]));
  6730  001ED4  0101               	movlb	1	; () banked
  6731  001ED6  EE20 F01C          	lfsr	2,28
  6732  001EDA  519F               	movf	f_open@dir& (0+255),w,b
  6733  001EDC  26D9               	addwf	fsr2l,f,c
  6734  001EDE  51A0               	movf	(f_open@dir+1)& (0+255),w,b
  6735  001EE0  22DA               	addwfc	fsr2h,f,c
  6736  001EE2  0100               	movlb	0	; () banked
  6737  001EE4  EE10 F00A          	lfsr	1,10
  6738  001EE8  51D7               	movf	f_open@fp& (0+255),w,b
  6739  001EEA  26E1               	addwf	fsr1l,f,c
  6740  001EEC  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  6741  001EEE  22E2               	addwfc	fsr1h,f,c
  6742  001EF0  CFDE FFE6          	movff	postinc2,postinc1
  6743  001EF4  CFDE FFE6          	movff	postinc2,postinc1
  6744  001EF8  CFDE FFE6          	movff	postinc2,postinc1
  6745  001EFC  CFDE FFE6          	movff	postinc2,postinc1
  6746                           
  6747                           ; BSR set to: 0
  6748                           ;tff.c: 911: fp->fptr = 0; fp->csect = 255;
  6749  001F00  EE20 F006          	lfsr	2,6
  6750  001F04  51D7               	movf	f_open@fp& (0+255),w,b
  6751  001F06  26D9               	addwf	fsr2l,f,c
  6752  001F08  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  6753  001F0A  22DA               	addwfc	fsr2h,f,c
  6754  001F0C  6ADE               	clrf	postinc2,c
  6755  001F0E  6ADE               	clrf	postinc2,c
  6756  001F10  6ADE               	clrf	postinc2,c
  6757  001F12  6ADD               	clrf	postdec2,c
  6758                           
  6759                           ; BSR set to: 0
  6760  001F14  EE20 F003          	lfsr	2,3
  6761  001F18  51D7               	movf	f_open@fp& (0+255),w,b
  6762  001F1A  26D9               	addwf	fsr2l,f,c
  6763  001F1C  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  6764  001F1E  22DA               	addwfc	fsr2h,f,c
  6765  001F20  0EFF               	movlw	255
  6766  001F22  6EDF               	movwf	indf2,c
  6767                           
  6768                           ; BSR set to: 0
  6769                           ;tff.c: 912: fp->fs = dj.fs; fp->id = dj.fs->id;
  6770  001F24  EE20 F004          	lfsr	2,4
  6771  001F28  51D7               	movf	f_open@fp& (0+255),w,b
  6772  001F2A  26D9               	addwf	fsr2l,f,c
  6773  001F2C  51D8               	movf	(f_open@fp+1)& (0+255),w,b
  6774  001F2E  22DA               	addwfc	fsr2h,f,c
  6775  001F30  C1A5  FFDE         	movff	f_open@dj+4,postinc2
  6776  001F34  C1A6  FFDD         	movff	f_open@dj+5,postdec2
  6777                           
  6778                           ; BSR set to: 0
  6779  001F38  C1A5  FFD9         	movff	f_open@dj+4,fsr2l
  6780  001F3C  C1A6  FFDA         	movff	f_open@dj+5,fsr2h
  6781  001F40  C0D7  FFE1         	movff	f_open@fp,fsr1l
  6782  001F44  C0D8  FFE2         	movff	f_open@fp+1,fsr1h
  6783  001F48  CFDE FFE6          	movff	postinc2,postinc1
  6784  001F4C  CFDD FFE5          	movff	postdec2,postdec1
  6785                           
  6786                           ; BSR set to: 0
  6787                           ;tff.c: 914: return FR_OK;
  6788  001F50  0E00               	movlw	0
  6789  001F52  0012               	return	
  6790  001F54                     __end_of_f_open:
  6791                           	opt stack 0
  6792                           tosu	equ	0xFFF
  6793                           tosh	equ	0xFFE
  6794                           tosl	equ	0xFFD
  6795                           pclath	equ	0xFFA
  6796                           tblptru	equ	0xFF8
  6797                           tblptrh	equ	0xFF7
  6798                           tblptrl	equ	0xFF6
  6799                           tablat	equ	0xFF5
  6800                           prodh	equ	0xFF4
  6801                           prodl	equ	0xFF3
  6802                           intcon	equ	0xFF2
  6803                           intcon2	equ	0xFF1
  6804                           intcon3	equ	0xFF0
  6805                           postinc0	equ	0xFEE
  6806                           wreg	equ	0xFE8
  6807                           indf1	equ	0xFE7
  6808                           postinc1	equ	0xFE6
  6809                           postdec1	equ	0xFE5
  6810                           fsr1h	equ	0xFE2
  6811                           fsr1l	equ	0xFE1
  6812                           indf2	equ	0xFDF
  6813                           postinc2	equ	0xFDE
  6814                           postdec2	equ	0xFDD
  6815                           plusw2	equ	0xFDB
  6816                           fsr2h	equ	0xFDA
  6817                           fsr2l	equ	0xFD9
  6818                           status	equ	0xFD8
  6819                           
  6820 ;; *************** function _trace_path *****************
  6821 ;; Defined at:
  6822 ;;		line 501 in file "bibliotecas/tff.c"
  6823 ;; Parameters:    Size  Location     Type
  6824 ;;  dj              2   96[BANK0 ] PTR struct _DIR_E
  6825 ;;		 -> f_open@dj(14), 
  6826 ;;  fn              2   98[BANK0 ] PTR unsigned char 
  6827 ;;		 -> f_opendir@fn(12), f_open@fn(12), 
  6828 ;;  path            2  100[BANK0 ] PTR const unsigned char 
  6829 ;;		 -> filename(15), 
  6830 ;;  dir             2  102[BANK0 ] PTR PTR unsigned char 
  6831 ;;		 -> f_opendir@dir(2), f_open@dir(2), 
  6832 ;; Auto vars:     Size  Location     Type
  6833 ;;  dptr            2  117[BANK0 ] PTR unsigned char 
  6834 ;;		 -> fs.win(512), NULL(0), fs(544), 
  6835 ;;  clust           2  114[BANK0 ] unsigned short 
  6836 ;;  fs              2  112[BANK0 ] PTR struct _FATFS
  6837 ;;		 -> NULL(0), fs(544), 
  6838 ;;  ds              1  116[BANK0 ] unsigned char 
  6839 ;; Return value:  Size  Location     Type
  6840 ;;                  1    wreg      enum E155
  6841 ;; Registers used:
  6842 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6843 ;; Tracked objects:
  6844 ;;		On entry : 0/0
  6845 ;;		On exit  : 0/0
  6846 ;;		Unchanged: 0/0
  6847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6848 ;;      Params:         0       8       0       0       0       0       0       0       0
  6849 ;;      Locals:         0      11       0       0       0       0       0       0       0
  6850 ;;      Temps:          0       4       0       0       0       0       0       0       0
  6851 ;;      Totals:         0      23       0       0       0       0       0       0       0
  6852 ;;Total ram usage:       23 bytes
  6853 ;; Hardware stack levels used:    1
  6854 ;; Hardware stack levels required when called:   11
  6855 ;; This function calls:
  6856 ;;		_clust2sect
  6857 ;;		_make_dirfile
  6858 ;;		_memcmp
  6859 ;;		_move_window
  6860 ;;		_next_dir_entry
  6861 ;; This function is called by:
  6862 ;;		_f_open
  6863 ;;		_f_opendir
  6864 ;; This function uses a non-reentrant model
  6865 ;;
  6866                           
  6867                           	psect	text24
  6868  0027C8                     __ptext24:
  6869                           	opt stack 0
  6870  0027C8                     _trace_path:
  6871                           	opt stack 16
  6872                           
  6873                           ;tff.c: 508: CLUST clust;
  6874                           ;tff.c: 509: char ds;
  6875                           ;tff.c: 510: BYTE *dptr = (0);
  6876                           
  6877                           ;incstack = 0
  6878  0027C8  0E00               	movlw	0
  6879  0027CA  0100               	movlb	0	; () banked
  6880  0027CC  6FD5               	movwf	trace_path@dptr& (0+255),b
  6881  0027CE  0E00               	movlw	0
  6882  0027D0  6FD6               	movwf	(trace_path@dptr+1)& (0+255),b
  6883                           
  6884                           ;tff.c: 511: FATFS *fs = FatFs;
  6885  0027D2  C0F6  F0D0         	movff	_FatFs,trace_path@fs
  6886  0027D6  C0F7  F0D1         	movff	_FatFs+1,trace_path@fs+1
  6887                           
  6888                           ; BSR set to: 0
  6889                           ;tff.c: 514: dj->fs = fs;
  6890  0027DA  EE20 F004          	lfsr	2,4
  6891  0027DE  51C0               	movf	trace_path@dj& (0+255),w,b
  6892  0027E0  26D9               	addwf	fsr2l,f,c
  6893  0027E2  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  6894  0027E4  22DA               	addwfc	fsr2h,f,c
  6895  0027E6  C0D0  FFDE         	movff	trace_path@fs,postinc2
  6896  0027EA  C0D1  FFDD         	movff	trace_path@fs+1,postdec2
  6897                           
  6898                           ; BSR set to: 0
  6899                           ;tff.c: 515: clust = fs->dirbase;
  6900  0027EE  EE20 F00C          	lfsr	2,12
  6901  0027F2  51D0               	movf	trace_path@fs& (0+255),w,b
  6902  0027F4  26D9               	addwf	fsr2l,f,c
  6903  0027F6  51D1               	movf	(trace_path@fs+1)& (0+255),w,b
  6904  0027F8  22DA               	addwfc	fsr2h,f,c
  6905  0027FA  CFDE F0D2          	movff	postinc2,trace_path@clust
  6906  0027FE  CFDD F0D3          	movff	postdec2,trace_path@clust+1
  6907                           
  6908                           ; BSR set to: 0
  6909                           ;tff.c: 522: {
  6910                           ;tff.c: 523: dj->clust = dj->sclust = 0;
  6911  002802  EE20 F006          	lfsr	2,6
  6912  002806  51C0               	movf	trace_path@dj& (0+255),w,b
  6913  002808  26D9               	addwf	fsr2l,f,c
  6914  00280A  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  6915  00280C  22DA               	addwfc	fsr2h,f,c
  6916  00280E  0E00               	movlw	0
  6917  002810  6EDE               	movwf	postinc2,c
  6918  002812  0E00               	movlw	0
  6919  002814  6EDD               	movwf	postdec2,c
  6920  002816  EE10 F008          	lfsr	1,8
  6921  00281A  51C0               	movf	trace_path@dj& (0+255),w,b
  6922  00281C  26E1               	addwf	fsr1l,f,c
  6923  00281E  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  6924  002820  22E2               	addwfc	fsr1h,f,c
  6925  002822  CFDE FFE6          	movff	postinc2,postinc1
  6926  002826  CFDD FFE5          	movff	postdec2,postdec1
  6927                           
  6928                           ; BSR set to: 0
  6929                           ;tff.c: 524: dj->sect = clust;
  6930  00282A  51D2               	movf	trace_path@clust& (0+255),w,b
  6931  00282C  6FC8               	movwf	??_trace_path& (0+255),b
  6932  00282E  51D3               	movf	(trace_path@clust+1)& (0+255),w,b
  6933  002830  6FC9               	movwf	(??_trace_path+1)& (0+255),b
  6934  002832  6BCA               	clrf	(??_trace_path+2)& (0+255),b
  6935  002834  6BCB               	clrf	(??_trace_path+3)& (0+255),b
  6936  002836  EE20 F00A          	lfsr	2,10
  6937  00283A  51C0               	movf	trace_path@dj& (0+255),w,b
  6938  00283C  26D9               	addwf	fsr2l,f,c
  6939  00283E  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  6940  002840  22DA               	addwfc	fsr2h,f,c
  6941  002842  C0C8  FFDE         	movff	??_trace_path,postinc2
  6942  002846  C0C9  FFDE         	movff	??_trace_path+1,postinc2
  6943  00284A  C0CA  FFDE         	movff	??_trace_path+2,postinc2
  6944  00284E  C0CB  FFDE         	movff	??_trace_path+3,postinc2
  6945                           
  6946                           ; BSR set to: 0
  6947                           ;tff.c: 525: }
  6948                           ;tff.c: 526: dj->index = 0;
  6949  002852  EE20 F002          	lfsr	2,2
  6950  002856  51C0               	movf	trace_path@dj& (0+255),w,b
  6951  002858  26D9               	addwf	fsr2l,f,c
  6952  00285A  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  6953  00285C  22DA               	addwfc	fsr2h,f,c
  6954  00285E  0E00               	movlw	0
  6955  002860  6EDE               	movwf	postinc2,c
  6956  002862  0E00               	movlw	0
  6957  002864  6EDD               	movwf	postdec2,c
  6958                           
  6959                           ; BSR set to: 0
  6960                           ;tff.c: 528: if (*path == '\0') {
  6961  002866  C0C4  FFD9         	movff	trace_path@path,fsr2l
  6962  00286A  C0C5  FFDA         	movff	trace_path@path+1,fsr2h
  6963  00286E  50DF               	movf	indf2,w,c
  6964  002870  A4D8               	btfss	status,2,c
  6965  002872  D00A               	goto	l1000
  6966                           
  6967                           ; BSR set to: 0
  6968                           ;tff.c: 529: *dir = (0); return FR_OK;
  6969  002874  C0C6  FFD9         	movff	trace_path@dir,fsr2l
  6970  002878  C0C7  FFDA         	movff	trace_path@dir+1,fsr2h
  6971  00287C  0E00               	movlw	0
  6972  00287E  6EDE               	movwf	postinc2,c
  6973  002880  0E00               	movlw	0
  6974  002882  6EDD               	movwf	postdec2,c
  6975                           
  6976                           ; BSR set to: 0
  6977  002884  0E00               	movlw	0
  6978                           
  6979                           ; BSR set to: 0
  6980  002886  0012               	return	
  6981  002888                     l1000:
  6982                           
  6983                           ; BSR set to: 0
  6984                           ;tff.c: 533: ds = make_dirfile(&path, fn);
  6985                           
  6986                           ; BSR set to: 0
  6987                           
  6988                           ;tff.c: 530: }
  6989                           ;tff.c: 532: for (;;) {
  6990                           
  6991                           ; BSR set to: 0
  6992  002888  0EC4               	movlw	low trace_path@path
  6993  00288A  6F68               	movwf	make_dirfile@path& (0+255),b
  6994  00288C  0E00               	movlw	high trace_path@path
  6995  00288E  6F69               	movwf	(make_dirfile@path+1)& (0+255),b
  6996  002890  C0C2  F06A         	movff	trace_path@fn,make_dirfile@dirname
  6997  002894  C0C3  F06B         	movff	trace_path@fn+1,make_dirfile@dirname+1
  6998  002898  ECDF  F01A         	call	_make_dirfile	;wreg free
  6999  00289C  0100               	movlb	0	; () banked
  7000  00289E  6FD4               	movwf	trace_path@ds& (0+255),b
  7001                           
  7002                           ; BSR set to: 0
  7003                           ;tff.c: 534: if (ds == 1) return FR_INVALID_NAME;
  7004  0028A0  05D4               	decf	trace_path@ds& (0+255),w,b
  7005  0028A2  A4D8               	btfss	status,2,c
  7006  0028A4  D002               	goto	l1003
  7007                           
  7008                           ; BSR set to: 0
  7009  0028A6  0E04               	movlw	4
  7010                           
  7011                           ; BSR set to: 0
  7012  0028A8  0012               	return	
  7013  0028AA                     l1003:
  7014                           
  7015                           ;tff.c: 536: if (!move_window(dj->sect)) return FR_RW_ERROR;
  7016                           
  7017                           ; BSR set to: 0
  7018                           
  7019                           ;tff.c: 535: for (;;) {
  7020                           
  7021                           ; BSR set to: 0
  7022  0028AA  0100               	movlb	0	; () banked
  7023  0028AC  EE20 F00A          	lfsr	2,10
  7024  0028B0  51C0               	movf	trace_path@dj& (0+255),w,b
  7025  0028B2  26D9               	addwf	fsr2l,f,c
  7026  0028B4  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  7027  0028B6  22DA               	addwfc	fsr2h,f,c
  7028  0028B8  CFDE F08B          	movff	postinc2,move_window@sector
  7029  0028BC  CFDE F08C          	movff	postinc2,move_window@sector+1
  7030  0028C0  CFDE F08D          	movff	postinc2,move_window@sector+2
  7031  0028C4  CFDE F08E          	movff	postinc2,move_window@sector+3
  7032  0028C8  EC40  F019         	call	_move_window	;wreg free
  7033  0028CC  0900               	iorlw	0
  7034  0028CE  A4D8               	btfss	status,2,c
  7035  0028D0  D002               	goto	l1005
  7036  0028D2  0E08               	movlw	8
  7037  0028D4  0012               	return	
  7038  0028D6                     l1005:
  7039                           
  7040                           ;tff.c: 537: dptr = &fs->win[(dj->index & 15) * 32];
  7041  0028D6  0100               	movlb	0	; () banked
  7042  0028D8  EE20 F002          	lfsr	2,2
  7043  0028DC  51C0               	movf	trace_path@dj& (0+255),w,b
  7044  0028DE  26D9               	addwf	fsr2l,f,c
  7045  0028E0  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  7046  0028E2  22DA               	addwfc	fsr2h,f,c
  7047  0028E4  CFDE F0C8          	movff	postinc2,??_trace_path
  7048  0028E8  CFDD F0C9          	movff	postdec2,??_trace_path+1
  7049  0028EC  0E0F               	movlw	15
  7050  0028EE  17C8               	andwf	??_trace_path& (0+255),f,b
  7051  0028F0  0E00               	movlw	0
  7052  0028F2  17C9               	andwf	(??_trace_path+1)& (0+255),f,b
  7053  0028F4  0E05               	movlw	5
  7054  0028F6                     u12165:
  7055  0028F6  90D8               	bcf	status,0,c
  7056  0028F8  37C8               	rlcf	??_trace_path& (0+255),f,b
  7057  0028FA  37C9               	rlcf	(??_trace_path+1)& (0+255),f,b
  7058  0028FC  2EE8               	decfsz	wreg,f,c
  7059  0028FE  D7FB               	goto	u12165
  7060  002900  0E20               	movlw	32
  7061  002902  27C8               	addwf	??_trace_path& (0+255),f,b
  7062  002904  0E00               	movlw	0
  7063  002906  23C9               	addwfc	(??_trace_path+1)& (0+255),f,b
  7064  002908  51C8               	movf	??_trace_path& (0+255),w,b
  7065  00290A  25D0               	addwf	trace_path@fs& (0+255),w,b
  7066  00290C  6FD5               	movwf	trace_path@dptr& (0+255),b
  7067  00290E  51C9               	movf	(??_trace_path+1)& (0+255),w,b
  7068  002910  21D1               	addwfc	(trace_path@fs+1)& (0+255),w,b
  7069  002912  6FD6               	movwf	(trace_path@dptr+1)& (0+255),b
  7070                           
  7071                           ; BSR set to: 0
  7072                           ;tff.c: 538: if (dptr[0] == 0)
  7073  002914  C0D5  FFD9         	movff	trace_path@dptr,fsr2l
  7074  002918  C0D6  FFDA         	movff	trace_path@dptr+1,fsr2h
  7075  00291C  50DF               	movf	indf2,w,c
  7076  00291E  A4D8               	btfss	status,2,c
  7077  002920  D00D               	goto	l1006
  7078                           
  7079                           ; BSR set to: 0
  7080                           ;tff.c: 539: return !ds ? FR_NO_FILE : FR_NO_PATH;
  7081  002922  51D4               	movf	trace_path@ds& (0+255),w,b
  7082  002924  B4D8               	btfsc	status,2,c
  7083  002926  D004               	goto	l1008
  7084                           
  7085                           ; BSR set to: 0
  7086  002928  0E00               	movlw	0
  7087  00292A  6FCD               	movwf	(_trace_path$1963+1)& (0+255),b
  7088  00292C  0E03               	movlw	3
  7089  00292E  D003               	goto	L6
  7090  002930                     l1008:
  7091                           
  7092                           ; BSR set to: 0
  7093                           
  7094                           ; BSR set to: 0
  7095  002930  0E00               	movlw	0
  7096  002932  6FCD               	movwf	(_trace_path$1963+1)& (0+255),b
  7097  002934  0E02               	movlw	2
  7098  002936                     L6:
  7099  002936  6FCC               	movwf	_trace_path$1963& (0+255),b
  7100                           
  7101                           ; BSR set to: 0
  7102  002938  51CC               	movf	_trace_path$1963& (0+255),w,b
  7103                           
  7104                           ; BSR set to: 0
  7105  00293A  0012               	return	
  7106  00293C                     l1006:
  7107                           
  7108                           ; BSR set to: 0
  7109                           ;tff.c: 540: if (dptr[0] != 0xE5
  7110                           ;tff.c: 541: && !(dptr[11] & 0x08)
  7111                           ;tff.c: 542: && !memcmp(&dptr[0], fn, 8+3) ) break;
  7112                           
  7113                           ; BSR set to: 0
  7114  00293C  C0D5  FFD9         	movff	trace_path@dptr,fsr2l
  7115  002940  C0D6  FFDA         	movff	trace_path@dptr+1,fsr2h
  7116  002944  0EE5               	movlw	229
  7117  002946  18DE               	xorwf	postinc2,w,c
  7118  002948  B4D8               	btfsc	status,2,c
  7119  00294A  D01B               	goto	l1011
  7120                           
  7121                           ; BSR set to: 0
  7122  00294C  EE20 F00B          	lfsr	2,11
  7123  002950  51D5               	movf	trace_path@dptr& (0+255),w,b
  7124  002952  26D9               	addwf	fsr2l,f,c
  7125  002954  51D6               	movf	(trace_path@dptr+1)& (0+255),w,b
  7126  002956  22DA               	addwfc	fsr2h,f,c
  7127  002958  B6DF               	btfsc	indf2,3,c
  7128  00295A  D013               	goto	l1011
  7129                           
  7130                           ; BSR set to: 0
  7131  00295C  C0D5  F060         	movff	trace_path@dptr,memcmp@s1
  7132  002960  C0D6  F061         	movff	trace_path@dptr+1,memcmp@s1+1
  7133  002964  C0C2  F062         	movff	trace_path@fn,memcmp@s2
  7134  002968  C0C3  F063         	movff	trace_path@fn+1,memcmp@s2+1
  7135  00296C  0E00               	movlw	0
  7136  00296E  6F65               	movwf	(memcmp@n+1)& (0+255),b
  7137  002970  0E0B               	movlw	11
  7138  002972  6F64               	movwf	memcmp@n& (0+255),b
  7139  002974  EC93  F021         	call	_memcmp	;wreg free
  7140  002978  0100               	movlb	0	; () banked
  7141  00297A  5160               	movf	?_memcmp& (0+255),w,b
  7142  00297C  1161               	iorwf	(?_memcmp+1)& (0+255),w,b
  7143  00297E  B4D8               	btfsc	status,2,c
  7144  002980  D017               	goto	l1012
  7145  002982                     l1011:
  7146                           
  7147                           ; BSR set to: 0
  7148                           ;tff.c: 543: if (!next_dir_entry(dj))
  7149                           
  7150                           ; BSR set to: 0
  7151  002982  C0C0  F0B3         	movff	trace_path@dj,next_dir_entry@dj
  7152  002986  C0C1  F0B4         	movff	trace_path@dj+1,next_dir_entry@dj+1
  7153  00298A  EC1B  F01A         	call	_next_dir_entry	;wreg free
  7154  00298E  0900               	iorlw	0
  7155  002990  A4D8               	btfss	status,2,c
  7156  002992  D78B               	goto	l1003
  7157                           
  7158                           ;tff.c: 544: return !ds ? FR_NO_FILE : FR_NO_PATH;
  7159  002994  0100               	movlb	0	; () banked
  7160  002996  51D4               	movf	trace_path@ds& (0+255),w,b
  7161  002998  B4D8               	btfsc	status,2,c
  7162  00299A  D004               	goto	l1015
  7163                           
  7164                           ; BSR set to: 0
  7165  00299C  0E00               	movlw	0
  7166  00299E  6FCF               	movwf	(_trace_path$1965+1)& (0+255),b
  7167  0029A0  0E03               	movlw	3
  7168  0029A2  D003               	goto	L7
  7169  0029A4                     l1015:
  7170                           
  7171                           ; BSR set to: 0
  7172                           
  7173                           ; BSR set to: 0
  7174  0029A4  0E00               	movlw	0
  7175  0029A6  6FCF               	movwf	(_trace_path$1965+1)& (0+255),b
  7176  0029A8  0E02               	movlw	2
  7177  0029AA                     L7:
  7178  0029AA  6FCE               	movwf	_trace_path$1965& (0+255),b
  7179                           
  7180                           ; BSR set to: 0
  7181  0029AC  51CE               	movf	_trace_path$1965& (0+255),w,b
  7182                           
  7183                           ; BSR set to: 0
  7184  0029AE  0012               	return	
  7185  0029B0                     l1012:
  7186                           
  7187                           ; BSR set to: 0
  7188                           ;tff.c: 546: if (!ds) { *dir = dptr; return FR_OK; }
  7189                           
  7190                           ; BSR set to: 0
  7191  0029B0  51D4               	movf	trace_path@ds& (0+255),w,b
  7192  0029B2  A4D8               	btfss	status,2,c
  7193  0029B4  D00A               	goto	l1018
  7194                           
  7195                           ; BSR set to: 0
  7196  0029B6  C0C6  FFD9         	movff	trace_path@dir,fsr2l
  7197  0029BA  C0C7  FFDA         	movff	trace_path@dir+1,fsr2h
  7198  0029BE  C0D5  FFDE         	movff	trace_path@dptr,postinc2
  7199  0029C2  C0D6  FFDD         	movff	trace_path@dptr+1,postdec2
  7200                           
  7201                           ; BSR set to: 0
  7202  0029C6  0E00               	movlw	0
  7203                           
  7204                           ; BSR set to: 0
  7205  0029C8  0012               	return	
  7206  0029CA                     l1018:
  7207                           
  7208                           ; BSR set to: 0
  7209                           ;tff.c: 547: if (!(dptr[11] & 0x10)) return FR_NO_PATH;
  7210                           
  7211                           ; BSR set to: 0
  7212  0029CA  EE20 F00B          	lfsr	2,11
  7213  0029CE  51D5               	movf	trace_path@dptr& (0+255),w,b
  7214  0029D0  26D9               	addwf	fsr2l,f,c
  7215  0029D2  51D6               	movf	(trace_path@dptr+1)& (0+255),w,b
  7216  0029D4  22DA               	addwfc	fsr2h,f,c
  7217  0029D6  B8DF               	btfsc	indf2,4,c
  7218  0029D8  D002               	goto	l1019
  7219                           
  7220                           ; BSR set to: 0
  7221  0029DA  0E03               	movlw	3
  7222                           
  7223                           ; BSR set to: 0
  7224  0029DC  0012               	return	
  7225  0029DE                     l1019:
  7226                           
  7227                           ; BSR set to: 0
  7228                           ;tff.c: 548: clust =
  7229                           ;tff.c: 552: (WORD)(*(WORD*)(BYTE*)(&dptr[26]));
  7230                           
  7231                           ; BSR set to: 0
  7232  0029DE  EE20 F01A          	lfsr	2,26
  7233  0029E2  51D5               	movf	trace_path@dptr& (0+255),w,b
  7234  0029E4  26D9               	addwf	fsr2l,f,c
  7235  0029E6  51D6               	movf	(trace_path@dptr+1)& (0+255),w,b
  7236  0029E8  22DA               	addwfc	fsr2h,f,c
  7237  0029EA  CFDE F0D2          	movff	postinc2,trace_path@clust
  7238  0029EE  CFDD F0D3          	movff	postdec2,trace_path@clust+1
  7239                           
  7240                           ; BSR set to: 0
  7241                           ;tff.c: 553: dj->clust = dj->sclust = clust;
  7242  0029F2  EE20 F006          	lfsr	2,6
  7243  0029F6  51C0               	movf	trace_path@dj& (0+255),w,b
  7244  0029F8  26D9               	addwf	fsr2l,f,c
  7245  0029FA  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  7246  0029FC  22DA               	addwfc	fsr2h,f,c
  7247  0029FE  C0D2  FFDE         	movff	trace_path@clust,postinc2
  7248  002A02  C0D3  FFDD         	movff	trace_path@clust+1,postdec2
  7249  002A06  EE10 F008          	lfsr	1,8
  7250  002A0A  51C0               	movf	trace_path@dj& (0+255),w,b
  7251  002A0C  26E1               	addwf	fsr1l,f,c
  7252  002A0E  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  7253  002A10  22E2               	addwfc	fsr1h,f,c
  7254  002A12  CFDE FFE6          	movff	postinc2,postinc1
  7255  002A16  CFDD FFE5          	movff	postdec2,postdec1
  7256                           
  7257                           ; BSR set to: 0
  7258                           ;tff.c: 554: dj->sect = clust2sect(clust);
  7259  002A1A  C0D2  F06C         	movff	trace_path@clust,clust2sect@clust
  7260  002A1E  C0D3  F06D         	movff	trace_path@clust+1,clust2sect@clust+1
  7261  002A22  ECEC  F01F         	call	_clust2sect	;wreg free
  7262  002A26  0100               	movlb	0	; () banked
  7263  002A28  EE20 F00A          	lfsr	2,10
  7264  002A2C  51C0               	movf	trace_path@dj& (0+255),w,b
  7265  002A2E  26D9               	addwf	fsr2l,f,c
  7266  002A30  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  7267  002A32  22DA               	addwfc	fsr2h,f,c
  7268  002A34  C06C  FFDE         	movff	?_clust2sect,postinc2
  7269  002A38  C06D  FFDE         	movff	?_clust2sect+1,postinc2
  7270  002A3C  C06E  FFDE         	movff	?_clust2sect+2,postinc2
  7271  002A40  C06F  FFDE         	movff	?_clust2sect+3,postinc2
  7272                           
  7273                           ; BSR set to: 0
  7274                           ;tff.c: 555: dj->index = 2;
  7275  002A44  EE20 F002          	lfsr	2,2
  7276  002A48  51C0               	movf	trace_path@dj& (0+255),w,b
  7277  002A4A  26D9               	addwf	fsr2l,f,c
  7278  002A4C  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
  7279  002A4E  22DA               	addwfc	fsr2h,f,c
  7280  002A50  0E02               	movlw	2
  7281  002A52  6EDE               	movwf	postinc2,c
  7282  002A54  0E00               	movlw	0
  7283  002A56  6EDD               	movwf	postdec2,c
  7284                           
  7285                           ;tff.c: 556: }
  7286  002A58  D717               	goto	l1000
  7287  002A5A                     __end_of_trace_path:
  7288                           	opt stack 0
  7289                           tosu	equ	0xFFF
  7290                           tosh	equ	0xFFE
  7291                           tosl	equ	0xFFD
  7292                           pclath	equ	0xFFA
  7293                           tblptru	equ	0xFF8
  7294                           tblptrh	equ	0xFF7
  7295                           tblptrl	equ	0xFF6
  7296                           tablat	equ	0xFF5
  7297                           prodh	equ	0xFF4
  7298                           prodl	equ	0xFF3
  7299                           intcon	equ	0xFF2
  7300                           intcon2	equ	0xFF1
  7301                           intcon3	equ	0xFF0
  7302                           postinc0	equ	0xFEE
  7303                           wreg	equ	0xFE8
  7304                           indf1	equ	0xFE7
  7305                           postinc1	equ	0xFE6
  7306                           postdec1	equ	0xFE5
  7307                           fsr1h	equ	0xFE2
  7308                           fsr1l	equ	0xFE1
  7309                           indf2	equ	0xFDF
  7310                           postinc2	equ	0xFDE
  7311                           postdec2	equ	0xFDD
  7312                           plusw2	equ	0xFDB
  7313                           fsr2h	equ	0xFDA
  7314                           fsr2l	equ	0xFD9
  7315                           status	equ	0xFD8
  7316                           
  7317 ;; *************** function _make_dirfile *****************
  7318 ;; Defined at:
  7319 ;;		line 438 in file "bibliotecas/tff.c"
  7320 ;; Parameters:    Size  Location     Type
  7321 ;;  path            2    8[BANK0 ] PTR PTR const unsigned c
  7322 ;;		 -> trace_path@path(2), 
  7323 ;;  dirname         2   10[BANK0 ] PTR unsigned char 
  7324 ;;		 -> f_opendir@fn(12), f_open@fn(12), 
  7325 ;; Auto vars:     Size  Location     Type
  7326 ;;  c               1   20[BANK0 ] unsigned char 
  7327 ;;  n               1   19[BANK0 ] unsigned char 
  7328 ;;  a               1   18[BANK0 ] unsigned char 
  7329 ;;  t               1   17[BANK0 ] unsigned char 
  7330 ;;  b               1   16[BANK0 ] unsigned char 
  7331 ;; Return value:  Size  Location     Type
  7332 ;;                  1    wreg      unsigned char 
  7333 ;; Registers used:
  7334 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7335 ;; Tracked objects:
  7336 ;;		On entry : 0/0
  7337 ;;		On exit  : 0/0
  7338 ;;		Unchanged: 0/0
  7339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7340 ;;      Params:         0       4       0       0       0       0       0       0       0
  7341 ;;      Locals:         0       7       0       0       0       0       0       0       0
  7342 ;;      Temps:          0       2       0       0       0       0       0       0       0
  7343 ;;      Totals:         0      13       0       0       0       0       0       0       0
  7344 ;;Total ram usage:       13 bytes
  7345 ;; Hardware stack levels used:    1
  7346 ;; Hardware stack levels required when called:    4
  7347 ;; This function calls:
  7348 ;;		_memset
  7349 ;; This function is called by:
  7350 ;;		_trace_path
  7351 ;; This function uses a non-reentrant model
  7352 ;;
  7353                           
  7354                           	psect	text25
  7355  0035BE                     __ptext25:
  7356                           	opt stack 0
  7357  0035BE                     _make_dirfile:
  7358                           	opt stack 22
  7359                           
  7360                           ;tff.c: 443: BYTE n, t, c, a, b;
  7361                           ;tff.c: 446: memset(dirname, ' ', 8+3);
  7362                           
  7363                           ;incstack = 0
  7364  0035BE  C06A  F060         	movff	make_dirfile@dirname,memset@p1
  7365  0035C2  C06B  F061         	movff	make_dirfile@dirname+1,memset@p1+1
  7366  0035C6  0E00               	movlw	0
  7367  0035C8  0100               	movlb	0	; () banked
  7368  0035CA  6F63               	movwf	(memset@c+1)& (0+255),b
  7369  0035CC  0E20               	movlw	32
  7370  0035CE  6F62               	movwf	memset@c& (0+255),b
  7371  0035D0  0E00               	movlw	0
  7372  0035D2  6F65               	movwf	(memset@n+1)& (0+255),b
  7373  0035D4  0E0B               	movlw	11
  7374  0035D6  6F64               	movwf	memset@n& (0+255),b
  7375  0035D8  EC24  F028         	call	_memset	;wreg free
  7376                           
  7377                           ;tff.c: 447: a = 0; b = 0x18;
  7378  0035DC  0E00               	movlw	0
  7379  0035DE  0100               	movlb	0	; () banked
  7380  0035E0  6F72               	movwf	make_dirfile@a& (0+255),b
  7381                           
  7382                           ; BSR set to: 0
  7383  0035E2  0E18               	movlw	24
  7384  0035E4  6F70               	movwf	make_dirfile@b& (0+255),b
  7385                           
  7386                           ; BSR set to: 0
  7387                           ;tff.c: 448: n = 0; t = 8;
  7388  0035E6  0E00               	movlw	0
  7389  0035E8  6F73               	movwf	make_dirfile@n& (0+255),b
  7390                           
  7391                           ; BSR set to: 0
  7392  0035EA  0E08               	movlw	8
  7393  0035EC  6F71               	movwf	make_dirfile@t& (0+255),b
  7394  0035EE                     
  7395                           ; BSR set to: 0
  7396                           ;tff.c: 450: c = *(*path)++;
  7397                           
  7398                           ; BSR set to: 0
  7399  0035EE  C068  FFD9         	movff	make_dirfile@path,fsr2l
  7400  0035F2  C069  FFDA         	movff	make_dirfile@path+1,fsr2h
  7401  0035F6  CFDF F06C          	movff	indf2,??_make_dirfile
  7402  0035FA  0E01               	movlw	1
  7403  0035FC  26DE               	addwf	postinc2,f,c
  7404  0035FE  CFDF F06D          	movff	indf2,??_make_dirfile+1
  7405  003602  0E00               	movlw	0
  7406  003604  22DD               	addwfc	postdec2,f,c
  7407  003606  C06C  FFD9         	movff	??_make_dirfile,fsr2l
  7408  00360A  C06D  FFDA         	movff	??_make_dirfile+1,fsr2h
  7409  00360E  50DF               	movf	indf2,w,c
  7410  003610  6F74               	movwf	make_dirfile@c& (0+255),b
  7411                           
  7412                           ; BSR set to: 0
  7413                           ;tff.c: 451: if (c == '\0' || c == '/') {
  7414  003612  5174               	movf	make_dirfile@c& (0+255),w,b
  7415  003614  B4D8               	btfsc	status,2,c
  7416  003616  D004               	goto	u11500
  7417                           
  7418                           ; BSR set to: 0
  7419  003618  0E2F               	movlw	47
  7420  00361A  1974               	xorwf	make_dirfile@c& (0+255),w,b
  7421  00361C  A4D8               	btfss	status,2,c
  7422  00361E  D013               	goto	l954
  7423  003620                     u11500:
  7424                           
  7425                           ; BSR set to: 0
  7426                           ;tff.c: 452: if (n == 0) break;
  7427                           
  7428                           ; BSR set to: 0
  7429  003620  5173               	movf	make_dirfile@n& (0+255),w,b
  7430  003622  B4D8               	btfsc	status,2,c
  7431  003624  D075               	goto	l958
  7432                           
  7433                           ; BSR set to: 0
  7434                           
  7435                           ; BSR set to: 0
  7436                           
  7437                           ; BSR set to: 0
  7438                           
  7439                           ; BSR set to: 0
  7440                           ;tff.c: 453: dirname[11] = 1 ? (a & b) : 0;
  7441                           
  7442                           ; BSR set to: 0
  7443  003626  5172               	movf	make_dirfile@a& (0+255),w,b
  7444  003628  1570               	andwf	make_dirfile@b& (0+255),w,b
  7445  00362A  6F6C               	movwf	??_make_dirfile& (0+255),b
  7446  00362C  516C               	movf	??_make_dirfile& (0+255),w,b
  7447  00362E  6F6E               	movwf	_make_dirfile$1916& (0+255),b
  7448  003630  6B6F               	clrf	(_make_dirfile$1916+1)& (0+255),b
  7449                           
  7450                           ; BSR set to: 0
  7451                           
  7452                           ; BSR set to: 0
  7453  003632  EE20 F00B          	lfsr	2,11
  7454  003636  516A               	movf	make_dirfile@dirname& (0+255),w,b
  7455  003638  26D9               	addwf	fsr2l,f,c
  7456  00363A  516B               	movf	(make_dirfile@dirname+1)& (0+255),w,b
  7457  00363C  22DA               	addwfc	fsr2h,f,c
  7458  00363E  C06E  FFDF         	movff	_make_dirfile$1916,indf2
  7459                           
  7460                           ; BSR set to: 0
  7461                           ;tff.c: 454: return c;
  7462  003642  5174               	movf	make_dirfile@c& (0+255),w,b
  7463                           
  7464                           ; BSR set to: 0
  7465  003644  0012               	return	
  7466  003646                     l954:
  7467                           
  7468                           ; BSR set to: 0
  7469                           ;tff.c: 455: }
  7470                           ;tff.c: 456: if (c <= ' ' || c == 0x7F) break;
  7471                           
  7472                           ; BSR set to: 0
  7473  003646  0E20               	movlw	32
  7474  003648  6574               	cpfsgt	make_dirfile@c& (0+255),b
  7475  00364A  D062               	goto	l958
  7476                           
  7477                           ; BSR set to: 0
  7478  00364C  0E7F               	movlw	127
  7479  00364E  1974               	xorwf	make_dirfile@c& (0+255),w,b
  7480  003650  B4D8               	btfsc	status,2,c
  7481  003652  D05E               	goto	l958
  7482                           
  7483                           ; BSR set to: 0
  7484                           ;tff.c: 457: if (c == '.') {
  7485                           
  7486                           ; BSR set to: 0
  7487                           
  7488                           ; BSR set to: 0
  7489  003654  0E2E               	movlw	46
  7490  003656  1974               	xorwf	make_dirfile@c& (0+255),w,b
  7491  003658  A4D8               	btfss	status,2,c
  7492  00365A  D00C               	goto	l970
  7493                           
  7494                           ; BSR set to: 0
  7495                           ;tff.c: 458: if (!(a & 1) && n >= 1 && n <= 8) {
  7496  00365C  B172               	btfsc	make_dirfile@a& (0+255),0,b
  7497  00365E  D058               	goto	l958
  7498                           
  7499                           ; BSR set to: 0
  7500  003660  5173               	movf	make_dirfile@n& (0+255),w,b
  7501  003662  B4D8               	btfsc	status,2,c
  7502  003664  D055               	goto	l958
  7503                           
  7504                           ; BSR set to: 0
  7505  003666  0E09               	movlw	9
  7506  003668  6173               	cpfslt	make_dirfile@n& (0+255),b
  7507  00366A  D052               	goto	l958
  7508                           
  7509                           ; BSR set to: 0
  7510                           ;tff.c: 459: n = 8; t = 11; continue;
  7511  00366C  0E08               	movlw	8
  7512  00366E  6F73               	movwf	make_dirfile@n& (0+255),b
  7513  003670  0E0B               	movlw	11
  7514  003672  D7BC               	goto	L8
  7515  003674                     l970:
  7516                           
  7517                           ; BSR set to: 0
  7518                           ;tff.c: 469: }
  7519                           ;tff.c: 470: if (c == '"') break;
  7520                           
  7521                           ; BSR set to: 0
  7522  003674  0E22               	movlw	34
  7523  003676  1974               	xorwf	make_dirfile@c& (0+255),w,b
  7524  003678  B4D8               	btfsc	status,2,c
  7525  00367A  D04A               	goto	l958
  7526                           
  7527                           ; BSR set to: 0
  7528                           ;tff.c: 471: if (c <= ')') goto md_l1;
  7529                           
  7530                           ; BSR set to: 0
  7531                           
  7532                           ; BSR set to: 0
  7533  00367C  0E2A               	movlw	42
  7534  00367E  6174               	cpfslt	make_dirfile@c& (0+255),b
  7535  003680  D001               	goto	l978
  7536  003682  D035               	goto	l996
  7537  003684                     l978:
  7538                           
  7539                           ; BSR set to: 0
  7540                           ;tff.c: 472: if (c <= ',') break;
  7541                           
  7542                           ; BSR set to: 0
  7543  003684  0E2D               	movlw	45
  7544  003686  6174               	cpfslt	make_dirfile@c& (0+255),b
  7545  003688  D001               	goto	l980
  7546  00368A  D042               	goto	l958
  7547  00368C                     l980:
  7548                           
  7549                           ; BSR set to: 0
  7550                           ;tff.c: 473: if (c <= '9') goto md_l1;
  7551                           
  7552                           ; BSR set to: 0
  7553  00368C  0E3A               	movlw	58
  7554  00368E  6174               	cpfslt	make_dirfile@c& (0+255),b
  7555  003690  D001               	goto	l981
  7556  003692  D02D               	goto	l996
  7557  003694                     l981:
  7558                           
  7559                           ; BSR set to: 0
  7560                           ;tff.c: 474: if (c <= '?') break;
  7561                           
  7562                           ; BSR set to: 0
  7563  003694  0E40               	movlw	64
  7564  003696  6174               	cpfslt	make_dirfile@c& (0+255),b
  7565  003698  D001               	goto	l982
  7566  00369A  D03A               	goto	l958
  7567  00369C                     l982:
  7568                           
  7569                           ; BSR set to: 0
  7570                           ;tff.c: 475: if (!(a & 1)) {
  7571  00369C  B172               	btfsc	make_dirfile@a& (0+255),0,b
  7572  00369E  D027               	goto	l996
  7573                           
  7574                           ; BSR set to: 0
  7575                           ;tff.c: 476: if (c == '|') break;
  7576  0036A0  0E7C               	movlw	124
  7577  0036A2  1974               	xorwf	make_dirfile@c& (0+255),w,b
  7578  0036A4  B4D8               	btfsc	status,2,c
  7579  0036A6  D034               	goto	l958
  7580                           
  7581                           ; BSR set to: 0
  7582                           ;tff.c: 477: if (c >= '[' && c <= ']') break;
  7583                           
  7584                           ; BSR set to: 0
  7585                           
  7586                           ; BSR set to: 0
  7587  0036A8  0E5A               	movlw	90
  7588  0036AA  6574               	cpfsgt	make_dirfile@c& (0+255),b
  7589  0036AC  D004               	goto	l985
  7590                           
  7591                           ; BSR set to: 0
  7592  0036AE  0E5E               	movlw	94
  7593  0036B0  6174               	cpfslt	make_dirfile@c& (0+255),b
  7594  0036B2  D001               	goto	l985
  7595  0036B4  D02D               	goto	l958
  7596  0036B6                     l985:
  7597                           
  7598                           ; BSR set to: 0
  7599                           
  7600                           ; BSR set to: 0
  7601  0036B6  0E40               	movlw	64
  7602  0036B8  6574               	cpfsgt	make_dirfile@c& (0+255),b
  7603  0036BA  D00A               	goto	l990
  7604                           
  7605                           ; BSR set to: 0
  7606  0036BC  0E5B               	movlw	91
  7607  0036BE  6174               	cpfslt	make_dirfile@c& (0+255),b
  7608  0036C0  D007               	goto	l990
  7609                           
  7610                           ; BSR set to: 0
  7611                           ;tff.c: 479: (t == 8) ? (b &= 0xF7) : (b &= 0xEF);
  7612  0036C2  0E08               	movlw	8
  7613  0036C4  1971               	xorwf	make_dirfile@t& (0+255),w,b
  7614  0036C6  A4D8               	btfss	status,2,c
  7615  0036C8  D002               	goto	l988
  7616                           
  7617                           ; BSR set to: 0
  7618  0036CA  9770               	bcf	make_dirfile@b& (0+255),3,b
  7619  0036CC  D001               	goto	l990
  7620  0036CE                     l988:
  7621                           
  7622                           ; BSR set to: 0
  7623                           
  7624                           ; BSR set to: 0
  7625  0036CE  9970               	bcf	make_dirfile@b& (0+255),4,b
  7626  0036D0                     l990:
  7627                           
  7628                           ; BSR set to: 0
  7629                           ;tff.c: 480: if (c >= 'a' && c <= 'z') {
  7630                           
  7631                           ; BSR set to: 0
  7632                           
  7633                           ; BSR set to: 0
  7634  0036D0  0E60               	movlw	96
  7635  0036D2  6574               	cpfsgt	make_dirfile@c& (0+255),b
  7636  0036D4  D00C               	goto	l996
  7637                           
  7638                           ; BSR set to: 0
  7639  0036D6  0E7B               	movlw	123
  7640  0036D8  6174               	cpfslt	make_dirfile@c& (0+255),b
  7641  0036DA  D009               	goto	l996
  7642                           
  7643                           ; BSR set to: 0
  7644                           ;tff.c: 482: if (1) (t == 8) ? (a |= 0x08) : (a |= 0x10);
  7645  0036DC  0E20               	movlw	32
  7646  0036DE  5F74               	subwf	make_dirfile@c& (0+255),f,b
  7647  0036E0  0E08               	movlw	8
  7648  0036E2  1971               	xorwf	make_dirfile@t& (0+255),w,b
  7649  0036E4  A4D8               	btfss	status,2,c
  7650  0036E6  D002               	goto	l994
  7651                           
  7652                           ; BSR set to: 0
  7653  0036E8  8772               	bsf	make_dirfile@a& (0+255),3,b
  7654  0036EA  D001               	goto	l996
  7655  0036EC                     l994:
  7656                           
  7657                           ; BSR set to: 0
  7658                           
  7659                           ; BSR set to: 0
  7660  0036EC  8972               	bsf	make_dirfile@a& (0+255),4,b
  7661  0036EE                     l996:
  7662                           
  7663                           ; BSR set to: 0
  7664                           ;tff.c: 486: a &= 0xFE;
  7665                           
  7666                           ; BSR set to: 0
  7667                           ;tff.c: 483: }
  7668                           ;tff.c: 484: }
  7669                           ;tff.c: 485: md_l1:
  7670                           
  7671                           ; BSR set to: 0
  7672                           
  7673                           ; BSR set to: 0
  7674                           
  7675                           ; BSR set to: 0
  7676  0036EE  9172               	bcf	make_dirfile@a& (0+255),0,b
  7677                           
  7678                           ; BSR set to: 0
  7679                           ;tff.c: 488: if (n >= t) break;
  7680                           
  7681                           ; BSR set to: 0
  7682                           
  7683                           ;tff.c: 487: md_l2:
  7684  0036F0  5171               	movf	make_dirfile@t& (0+255),w,b
  7685  0036F2  5D73               	subwf	make_dirfile@n& (0+255),w,b
  7686  0036F4  B0D8               	btfsc	status,0,c
  7687  0036F6  D00C               	goto	l958
  7688                           
  7689                           ; BSR set to: 0
  7690                           ;tff.c: 489: dirname[n++] = c;
  7691                           
  7692                           ; BSR set to: 0
  7693                           
  7694                           ; BSR set to: 0
  7695  0036F8  5173               	movf	make_dirfile@n& (0+255),w,b
  7696  0036FA  0D01               	mullw	1
  7697  0036FC  50F3               	movf	prodl,w,c
  7698  0036FE  256A               	addwf	make_dirfile@dirname& (0+255),w,b
  7699  003700  6ED9               	movwf	fsr2l,c
  7700  003702  50F4               	movf	prodh,w,c
  7701  003704  216B               	addwfc	(make_dirfile@dirname+1)& (0+255),w,b
  7702  003706  6EDA               	movwf	fsr2h,c
  7703  003708  C074  FFDF         	movff	make_dirfile@c,indf2
  7704                           
  7705                           ; BSR set to: 0
  7706  00370C  2B73               	incf	make_dirfile@n& (0+255),f,b
  7707                           
  7708                           ; BSR set to: 0
  7709                           ;tff.c: 490: }
  7710  00370E  D76F               	goto	l953
  7711  003710                     l958:
  7712                           
  7713                           ; BSR set to: 0
  7714                           ;tff.c: 491: return 1;
  7715                           
  7716                           ; BSR set to: 0
  7717  003710  0E01               	movlw	1
  7718  003712  0012               	return	
  7719  003714                     __end_of_make_dirfile:
  7720                           	opt stack 0
  7721                           tosu	equ	0xFFF
  7722                           tosh	equ	0xFFE
  7723                           tosl	equ	0xFFD
  7724                           pclath	equ	0xFFA
  7725                           tblptru	equ	0xFF8
  7726                           tblptrh	equ	0xFF7
  7727                           tblptrl	equ	0xFF6
  7728                           tablat	equ	0xFF5
  7729                           prodh	equ	0xFF4
  7730                           prodl	equ	0xFF3
  7731                           intcon	equ	0xFF2
  7732                           intcon2	equ	0xFF1
  7733                           intcon3	equ	0xFF0
  7734                           postinc0	equ	0xFEE
  7735                           wreg	equ	0xFE8
  7736                           indf1	equ	0xFE7
  7737                           postinc1	equ	0xFE6
  7738                           postdec1	equ	0xFE5
  7739                           fsr1h	equ	0xFE2
  7740                           fsr1l	equ	0xFE1
  7741                           indf2	equ	0xFDF
  7742                           postinc2	equ	0xFDE
  7743                           postdec2	equ	0xFDD
  7744                           plusw2	equ	0xFDB
  7745                           fsr2h	equ	0xFDA
  7746                           fsr2l	equ	0xFD9
  7747                           status	equ	0xFD8
  7748                           
  7749 ;; *************** function _reserve_direntry *****************
  7750 ;; Defined at:
  7751 ;;		line 567 in file "bibliotecas/tff.c"
  7752 ;; Parameters:    Size  Location     Type
  7753 ;;  dj              2  100[BANK0 ] PTR struct _DIR_E
  7754 ;;		 -> f_open@dj(14), 
  7755 ;;  dir             2  102[BANK0 ] PTR PTR unsigned char 
  7756 ;;		 -> f_open@dir(2), 
  7757 ;; Auto vars:     Size  Location     Type
  7758 ;;  sector          4  106[BANK0 ] unsigned long 
  7759 ;;  fs              2  116[BANK0 ] PTR struct _FATFS
  7760 ;;		 -> NULL(0), fs(544), 
  7761 ;;  clust           2  114[BANK0 ] unsigned short 
  7762 ;;  dptr            2  111[BANK0 ] PTR unsigned char 
  7763 ;;		 -> fs.win(512), NULL(0), fs(544), 
  7764 ;;  c               1  113[BANK0 ] unsigned char 
  7765 ;;  n               1  110[BANK0 ] unsigned char 
  7766 ;; Return value:  Size  Location     Type
  7767 ;;                  1    wreg      enum E155
  7768 ;; Registers used:
  7769 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7770 ;; Tracked objects:
  7771 ;;		On entry : 0/0
  7772 ;;		On exit  : 0/0
  7773 ;;		Unchanged: 0/0
  7774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7775 ;;      Params:         0       4       0       0       0       0       0       0       0
  7776 ;;      Locals:         0      12       0       0       0       0       0       0       0
  7777 ;;      Temps:          0       2       0       0       0       0       0       0       0
  7778 ;;      Totals:         0      18       0       0       0       0       0       0       0
  7779 ;;Total ram usage:       18 bytes
  7780 ;; Hardware stack levels used:    1
  7781 ;; Hardware stack levels required when called:   11
  7782 ;; This function calls:
  7783 ;;		_clust2sect
  7784 ;;		_create_chain
  7785 ;;		_disk_write
  7786 ;;		_memset
  7787 ;;		_move_window
  7788 ;;		_next_dir_entry
  7789 ;; This function is called by:
  7790 ;;		_f_open
  7791 ;; This function uses a non-reentrant model
  7792 ;;
  7793                           
  7794                           	psect	text26
  7795  00229A                     __ptext26:
  7796                           	opt stack 0
  7797  00229A                     _reserve_direntry:
  7798                           	opt stack 16
  7799                           
  7800                           ;tff.c: 572: CLUST clust;
  7801                           ;tff.c: 573: DWORD sector;
  7802                           ;tff.c: 574: BYTE c, n, *dptr;
  7803                           ;tff.c: 575: FATFS *fs = dj->fs;
  7804                           
  7805                           ; BSR set to: 0
  7806                           ;incstack = 0
  7807  00229A  0100               	movlb	0	; () banked
  7808  00229C  EE20 F004          	lfsr	2,4
  7809  0022A0  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  7810  0022A2  26D9               	addwf	fsr2l,f,c
  7811  0022A4  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  7812  0022A6  22DA               	addwfc	fsr2h,f,c
  7813  0022A8  CFDE F0D4          	movff	postinc2,reserve_direntry@fs
  7814  0022AC  CFDD F0D5          	movff	postdec2,reserve_direntry@fs+1
  7815                           
  7816                           ;tff.c: 579: clust = dj->sclust;
  7817  0022B0  EE20 F006          	lfsr	2,6
  7818  0022B4  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  7819  0022B6  26D9               	addwf	fsr2l,f,c
  7820  0022B8  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  7821  0022BA  22DA               	addwfc	fsr2h,f,c
  7822  0022BC  CFDE F0D2          	movff	postinc2,reserve_direntry@clust
  7823  0022C0  CFDD F0D3          	movff	postdec2,reserve_direntry@clust+1
  7824                           
  7825                           ; BSR set to: 0
  7826                           ;tff.c: 580: if (clust != 0) {
  7827  0022C4  51D2               	movf	reserve_direntry@clust& (0+255),w,b
  7828  0022C6  11D3               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
  7829  0022C8  B4D8               	btfsc	status,2,c
  7830  0022CA  D020               	goto	l1023
  7831                           
  7832                           ; BSR set to: 0
  7833                           ;tff.c: 581: dj->clust = clust;
  7834  0022CC  EE20 F008          	lfsr	2,8
  7835  0022D0  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  7836  0022D2  26D9               	addwf	fsr2l,f,c
  7837  0022D4  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  7838  0022D6  22DA               	addwfc	fsr2h,f,c
  7839  0022D8  C0D2  FFDE         	movff	reserve_direntry@clust,postinc2
  7840  0022DC  C0D3  FFDD         	movff	reserve_direntry@clust+1,postdec2
  7841                           
  7842                           ; BSR set to: 0
  7843                           ;tff.c: 582: dj->sect = clust2sect(clust);
  7844  0022E0  C0D2  F06C         	movff	reserve_direntry@clust,clust2sect@clust
  7845  0022E4  C0D3  F06D         	movff	reserve_direntry@clust+1,clust2sect@clust+1
  7846  0022E8  ECEC  F01F         	call	_clust2sect	;wreg free
  7847  0022EC  0100               	movlb	0	; () banked
  7848  0022EE  EE20 F00A          	lfsr	2,10
  7849  0022F2  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  7850  0022F4  26D9               	addwf	fsr2l,f,c
  7851  0022F6  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  7852  0022F8  22DA               	addwfc	fsr2h,f,c
  7853  0022FA  C06C  FFDE         	movff	?_clust2sect,postinc2
  7854  0022FE  C06D  FFDE         	movff	?_clust2sect+1,postinc2
  7855  002302  C06E  FFDE         	movff	?_clust2sect+2,postinc2
  7856  002306  C06F  FFDE         	movff	?_clust2sect+3,postinc2
  7857                           
  7858                           ;tff.c: 583: } else {
  7859  00230A  D014               	goto	l1024
  7860  00230C                     l1023:
  7861                           
  7862                           ; BSR set to: 0
  7863                           ;tff.c: 584: dj->sect = fs->dirbase;
  7864                           
  7865                           ; BSR set to: 0
  7866  00230C  EE20 F00C          	lfsr	2,12
  7867  002310  51D4               	movf	reserve_direntry@fs& (0+255),w,b
  7868  002312  26D9               	addwf	fsr2l,f,c
  7869  002314  51D5               	movf	(reserve_direntry@fs+1)& (0+255),w,b
  7870  002316  22DA               	addwfc	fsr2h,f,c
  7871  002318  EE10 F00A          	lfsr	1,10
  7872  00231C  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  7873  00231E  26E1               	addwf	fsr1l,f,c
  7874  002320  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  7875  002322  22E2               	addwfc	fsr1h,f,c
  7876  002324  CFDE FFE6          	movff	postinc2,postinc1
  7877  002328  CFDE FFE6          	movff	postinc2,postinc1
  7878  00232C  CFDE FFE6          	movff	postinc2,postinc1
  7879  002330  CFDE FFE6          	movff	postinc2,postinc1
  7880  002334                     l1024:
  7881                           
  7882                           ; BSR set to: 0
  7883                           ;tff.c: 585: }
  7884                           ;tff.c: 586: dj->index = 0;
  7885                           
  7886                           ; BSR set to: 0
  7887  002334  EE20 F002          	lfsr	2,2
  7888  002338  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  7889  00233A  26D9               	addwf	fsr2l,f,c
  7890  00233C  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  7891  00233E  22DA               	addwfc	fsr2h,f,c
  7892  002340  0E00               	movlw	0
  7893  002342  6EDE               	movwf	postinc2,c
  7894  002344  0E00               	movlw	0
  7895  002346  6EDD               	movwf	postdec2,c
  7896  002348                     
  7897                           ;tff.c: 589: if (!move_window(dj->sect)) return FR_RW_ERROR;
  7898                           
  7899                           ; BSR set to: 0
  7900  002348  0100               	movlb	0	; () banked
  7901  00234A  EE20 F00A          	lfsr	2,10
  7902  00234E  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  7903  002350  26D9               	addwf	fsr2l,f,c
  7904  002352  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  7905  002354  22DA               	addwfc	fsr2h,f,c
  7906  002356  CFDE F08B          	movff	postinc2,move_window@sector
  7907  00235A  CFDE F08C          	movff	postinc2,move_window@sector+1
  7908  00235E  CFDE F08D          	movff	postinc2,move_window@sector+2
  7909  002362  CFDE F08E          	movff	postinc2,move_window@sector+3
  7910  002366  EC40  F019         	call	_move_window	;wreg free
  7911  00236A  0900               	iorlw	0
  7912  00236C  A4D8               	btfss	status,2,c
  7913  00236E  D002               	goto	l1026
  7914  002370  0E08               	movlw	8
  7915  002372  0012               	return	
  7916  002374                     l1026:
  7917                           
  7918                           ;tff.c: 590: dptr = &fs->win[(dj->index & 15) * 32];
  7919  002374  0100               	movlb	0	; () banked
  7920  002376  EE20 F002          	lfsr	2,2
  7921  00237A  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  7922  00237C  26D9               	addwf	fsr2l,f,c
  7923  00237E  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  7924  002380  22DA               	addwfc	fsr2h,f,c
  7925  002382  CFDE F0C8          	movff	postinc2,??_reserve_direntry
  7926  002386  CFDD F0C9          	movff	postdec2,??_reserve_direntry+1
  7927  00238A  0E0F               	movlw	15
  7928  00238C  17C8               	andwf	??_reserve_direntry& (0+255),f,b
  7929  00238E  0E00               	movlw	0
  7930  002390  17C9               	andwf	(??_reserve_direntry+1)& (0+255),f,b
  7931  002392  0E05               	movlw	5
  7932  002394                     u12285:
  7933  002394  90D8               	bcf	status,0,c
  7934  002396  37C8               	rlcf	??_reserve_direntry& (0+255),f,b
  7935  002398  37C9               	rlcf	(??_reserve_direntry+1)& (0+255),f,b
  7936  00239A  2EE8               	decfsz	wreg,f,c
  7937  00239C  D7FB               	goto	u12285
  7938  00239E  0E20               	movlw	32
  7939  0023A0  27C8               	addwf	??_reserve_direntry& (0+255),f,b
  7940  0023A2  0E00               	movlw	0
  7941  0023A4  23C9               	addwfc	(??_reserve_direntry+1)& (0+255),f,b
  7942  0023A6  51C8               	movf	??_reserve_direntry& (0+255),w,b
  7943  0023A8  25D4               	addwf	reserve_direntry@fs& (0+255),w,b
  7944  0023AA  6FCF               	movwf	reserve_direntry@dptr& (0+255),b
  7945  0023AC  51C9               	movf	(??_reserve_direntry+1)& (0+255),w,b
  7946  0023AE  21D5               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
  7947  0023B0  6FD0               	movwf	(reserve_direntry@dptr+1)& (0+255),b
  7948                           
  7949                           ; BSR set to: 0
  7950                           ;tff.c: 591: c = dptr[0];
  7951  0023B2  C0CF  FFD9         	movff	reserve_direntry@dptr,fsr2l
  7952  0023B6  C0D0  FFDA         	movff	reserve_direntry@dptr+1,fsr2h
  7953  0023BA  50DF               	movf	indf2,w,c
  7954  0023BC  6FD1               	movwf	reserve_direntry@c& (0+255),b
  7955                           
  7956                           ; BSR set to: 0
  7957                           ;tff.c: 592: if (c == 0 || c == 0xE5) {
  7958  0023BE  51D1               	movf	reserve_direntry@c& (0+255),w,b
  7959  0023C0  B4D8               	btfsc	status,2,c
  7960  0023C2  D004               	goto	u12300
  7961                           
  7962                           ; BSR set to: 0
  7963  0023C4  0EE5               	movlw	229
  7964  0023C6  19D1               	xorwf	reserve_direntry@c& (0+255),w,b
  7965  0023C8  A4D8               	btfss	status,2,c
  7966  0023CA  D00A               	goto	l1028
  7967  0023CC                     u12300:
  7968                           
  7969                           ; BSR set to: 0
  7970                           ;tff.c: 593: *dir = dptr; return FR_OK;
  7971                           
  7972                           ; BSR set to: 0
  7973  0023CC  C0C6  FFD9         	movff	reserve_direntry@dir,fsr2l
  7974  0023D0  C0C7  FFDA         	movff	reserve_direntry@dir+1,fsr2h
  7975  0023D4  C0CF  FFDE         	movff	reserve_direntry@dptr,postinc2
  7976  0023D8  C0D0  FFDD         	movff	reserve_direntry@dptr+1,postdec2
  7977                           
  7978                           ; BSR set to: 0
  7979  0023DC  0E00               	movlw	0
  7980                           
  7981                           ; BSR set to: 0
  7982  0023DE  0012               	return	
  7983  0023E0                     l1028:
  7984                           
  7985                           ; BSR set to: 0
  7986                           ;tff.c: 594: }
  7987                           ;tff.c: 595: } while (next_dir_entry(dj));
  7988                           
  7989                           ; BSR set to: 0
  7990  0023E0  C0C4  F0B3         	movff	reserve_direntry@dj,next_dir_entry@dj
  7991  0023E4  C0C5  F0B4         	movff	reserve_direntry@dj+1,next_dir_entry@dj+1
  7992  0023E8  EC1B  F01A         	call	_next_dir_entry	;wreg free
  7993  0023EC  0900               	iorlw	0
  7994  0023EE  A4D8               	btfss	status,2,c
  7995  0023F0  D7AB               	goto	l1025
  7996                           
  7997                           ;tff.c: 599: if (clust == 0 || !(clust = create_chain(dj->clust))) return FR_DENIED;
  7998  0023F2  0100               	movlb	0	; () banked
  7999  0023F4  51D2               	movf	reserve_direntry@clust& (0+255),w,b
  8000  0023F6  11D3               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
  8001  0023F8  B4D8               	btfsc	status,2,c
  8002  0023FA  D015               	goto	u12330
  8003                           
  8004                           ; BSR set to: 0
  8005  0023FC  EE20 F008          	lfsr	2,8
  8006  002400  51C4               	movf	reserve_direntry@dj& (0+255),w,b
  8007  002402  26D9               	addwf	fsr2l,f,c
  8008  002404  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  8009  002406  22DA               	addwfc	fsr2h,f,c
  8010  002408  CFDE F0B6          	movff	postinc2,create_chain@clust
  8011  00240C  CFDD F0B7          	movff	postdec2,create_chain@clust+1
  8012  002410  EC60  F018         	call	_create_chain	;wreg free
  8013  002414  C0B6  F0D2         	movff	?_create_chain,reserve_direntry@clust
  8014  002418  C0B7  F0D3         	movff	?_create_chain+1,reserve_direntry@clust+1
  8015  00241C  0100               	movlb	0	; () banked
  8016  00241E  51D2               	movf	reserve_direntry@clust& (0+255),w,b
  8017  002420  11D3               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
  8018  002422  A4D8               	btfss	status,2,c
  8019  002424  D002               	goto	l1032
  8020  002426                     u12330:
  8021                           
  8022                           ; BSR set to: 0
  8023                           
  8024                           ; BSR set to: 0
  8025  002426  0E06               	movlw	6
  8026                           
  8027                           ; BSR set to: 0
  8028  002428  0012               	return	
  8029  00242A                     l1032:
  8030                           
  8031                           ; BSR set to: 0
  8032                           ;tff.c: 600: if (clust == 1 || !move_window(0)) return FR_RW_ERROR;
  8033                           
  8034                           ; BSR set to: 0
  8035  00242A  05D2               	decf	reserve_direntry@clust& (0+255),w,b
  8036  00242C  11D3               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
  8037  00242E  B4D8               	btfsc	status,2,c
  8038  002430  D00D               	goto	u12350
  8039                           
  8040                           ; BSR set to: 0
  8041  002432  0E00               	movlw	0
  8042  002434  6F8B               	movwf	move_window@sector& (0+255),b
  8043  002436  0E00               	movlw	0
  8044  002438  6F8C               	movwf	(move_window@sector+1)& (0+255),b
  8045  00243A  0E00               	movlw	0
  8046  00243C  6F8D               	movwf	(move_window@sector+2)& (0+255),b
  8047  00243E  0E00               	movlw	0
  8048  002440  6F8E               	movwf	(move_window@sector+3)& (0+255),b
  8049  002442  EC40  F019         	call	_move_window	;wreg free
  8050  002446  0900               	iorlw	0
  8051  002448  A4D8               	btfss	status,2,c
  8052  00244A  D002               	goto	l1035
  8053  00244C                     u12350:
  8054  00244C  0E08               	movlw	8
  8055  00244E  0012               	return	
  8056  002450                     l1035:
  8057                           
  8058                           ;tff.c: 602: fs->winsect = sector = clust2sect(clust);
  8059  002450  C0D2  F06C         	movff	reserve_direntry@clust,clust2sect@clust
  8060  002454  C0D3  F06D         	movff	reserve_direntry@clust+1,clust2sect@clust+1
  8061  002458  ECEC  F01F         	call	_clust2sect	;wreg free
  8062  00245C  C06C  F0CA         	movff	?_clust2sect,reserve_direntry@sector
  8063  002460  C06D  F0CB         	movff	?_clust2sect+1,reserve_direntry@sector+1
  8064  002464  C06E  F0CC         	movff	?_clust2sect+2,reserve_direntry@sector+2
  8065  002468  C06F  F0CD         	movff	?_clust2sect+3,reserve_direntry@sector+3
  8066  00246C  0100               	movlb	0	; () banked
  8067  00246E  EE20 F004          	lfsr	2,4
  8068  002472  51D4               	movf	reserve_direntry@fs& (0+255),w,b
  8069  002474  26D9               	addwf	fsr2l,f,c
  8070  002476  51D5               	movf	(reserve_direntry@fs+1)& (0+255),w,b
  8071  002478  22DA               	addwfc	fsr2h,f,c
  8072  00247A  C0CA  FFDE         	movff	reserve_direntry@sector,postinc2
  8073  00247E  C0CB  FFDE         	movff	reserve_direntry@sector+1,postinc2
  8074  002482  C0CC  FFDE         	movff	reserve_direntry@sector+2,postinc2
  8075  002486  C0CD  FFDE         	movff	reserve_direntry@sector+3,postinc2
  8076                           
  8077                           ;tff.c: 603: memset(fs->win, 0, 512U);
  8078  00248A  0E20               	movlw	32
  8079  00248C  25D4               	addwf	reserve_direntry@fs& (0+255),w,b
  8080  00248E  6F60               	movwf	memset@p1& (0+255),b
  8081  002490  0E00               	movlw	0
  8082  002492  21D5               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
  8083  002494  6F61               	movwf	(memset@p1+1)& (0+255),b
  8084  002496  0E00               	movlw	0
  8085  002498  6F63               	movwf	(memset@c+1)& (0+255),b
  8086  00249A  0E00               	movlw	0
  8087  00249C  6F62               	movwf	memset@c& (0+255),b
  8088  00249E  0E02               	movlw	2
  8089  0024A0  6F65               	movwf	(memset@n+1)& (0+255),b
  8090  0024A2  0E00               	movlw	0
  8091  0024A4  6F64               	movwf	memset@n& (0+255),b
  8092  0024A6  EC24  F028         	call	_memset	;wreg free
  8093                           
  8094                           ;tff.c: 604: for (n = fs->csize; n; n--) {
  8095  0024AA  0100               	movlb	0	; () banked
  8096  0024AC  EE20 F01D          	lfsr	2,29
  8097  0024B0  51D4               	movf	reserve_direntry@fs& (0+255),w,b
  8098  0024B2  26D9               	addwf	fsr2l,f,c
  8099  0024B4  51D5               	movf	(reserve_direntry@fs+1)& (0+255),w,b
  8100  0024B6  22DA               	addwfc	fsr2h,f,c
  8101  0024B8  50DF               	movf	indf2,w,c
  8102  0024BA  6FCE               	movwf	reserve_direntry@n& (0+255),b
  8103  0024BC  D020               	goto	l1038
  8104  0024BE                     
  8105                           ; BSR set to: 0
  8106                           ;tff.c: 605: if (disk_write(0, fs->win, sector, 1) != RES_OK)
  8107                           
  8108                           ; BSR set to: 0
  8109  0024BE  0E20               	movlw	32
  8110  0024C0  25D4               	addwf	reserve_direntry@fs& (0+255),w,b
  8111  0024C2  6F7F               	movwf	disk_write@buff& (0+255),b
  8112  0024C4  0E00               	movlw	0
  8113  0024C6  21D5               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
  8114  0024C8  6F80               	movwf	(disk_write@buff+1)& (0+255),b
  8115  0024CA  C0CA  F081         	movff	reserve_direntry@sector,disk_write@sector
  8116  0024CE  C0CB  F082         	movff	reserve_direntry@sector+1,disk_write@sector+1
  8117  0024D2  C0CC  F083         	movff	reserve_direntry@sector+2,disk_write@sector+2
  8118  0024D6  C0CD  F084         	movff	reserve_direntry@sector+3,disk_write@sector+3
  8119  0024DA  0E01               	movlw	1
  8120  0024DC  6F85               	movwf	disk_write@count& (0+255),b
  8121  0024DE  0E00               	movlw	0
  8122  0024E0  EC0C  F023         	call	_disk_write
  8123  0024E4  0900               	iorlw	0
  8124  0024E6  B4D8               	btfsc	status,2,c
  8125  0024E8  D002               	goto	l1040
  8126                           
  8127                           ;tff.c: 606: return FR_RW_ERROR;
  8128  0024EA  0E08               	movlw	8
  8129  0024EC  0012               	return	
  8130  0024EE                     l1040:
  8131                           
  8132                           ;tff.c: 607: sector++;
  8133  0024EE  0E01               	movlw	1
  8134  0024F0  0100               	movlb	0	; () banked
  8135  0024F2  27CA               	addwf	reserve_direntry@sector& (0+255),f,b
  8136  0024F4  0E00               	movlw	0
  8137  0024F6  23CB               	addwfc	(reserve_direntry@sector+1)& (0+255),f,b
  8138  0024F8  23CC               	addwfc	(reserve_direntry@sector+2)& (0+255),f,b
  8139  0024FA  23CD               	addwfc	(reserve_direntry@sector+3)& (0+255),f,b
  8140                           
  8141                           ; BSR set to: 0
  8142  0024FC  07CE               	decf	reserve_direntry@n& (0+255),f,b
  8143  0024FE                     l1038:
  8144                           
  8145                           ; BSR set to: 0
  8146                           
  8147                           ; BSR set to: 0
  8148  0024FE  51CE               	movf	reserve_direntry@n& (0+255),w,b
  8149  002500  A4D8               	btfss	status,2,c
  8150  002502  D7DD               	goto	l1039
  8151                           
  8152                           ; BSR set to: 0
  8153                           ;tff.c: 608: }
  8154                           ;tff.c: 609: fs->winflag = 1;
  8155                           
  8156                           ; BSR set to: 0
  8157  002504  EE20 F01F          	lfsr	2,31
  8158  002508  51D4               	movf	reserve_direntry@fs& (0+255),w,b
  8159  00250A  26D9               	addwf	fsr2l,f,c
  8160  00250C  51D5               	movf	(reserve_direntry@fs+1)& (0+255),w,b
  8161  00250E  22DA               	addwfc	fsr2h,f,c
  8162  002510  0E01               	movlw	1
  8163  002512  6EDF               	movwf	indf2,c
  8164                           
  8165                           ;tff.c: 610: *dir = fs->win;
  8166  002514  0E20               	movlw	32
  8167  002516  25D4               	addwf	reserve_direntry@fs& (0+255),w,b
  8168  002518  6FC8               	movwf	??_reserve_direntry& (0+255),b
  8169  00251A  0E00               	movlw	0
  8170  00251C  21D5               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
  8171  00251E  6FC9               	movwf	(??_reserve_direntry+1)& (0+255),b
  8172  002520  C0C6  FFD9         	movff	reserve_direntry@dir,fsr2l
  8173  002524  C0C7  FFDA         	movff	reserve_direntry@dir+1,fsr2h
  8174  002528  C0C8  FFDE         	movff	??_reserve_direntry,postinc2
  8175  00252C  C0C9  FFDD         	movff	??_reserve_direntry+1,postdec2
  8176                           
  8177                           ; BSR set to: 0
  8178                           ;tff.c: 611: return FR_OK;
  8179  002530  0E00               	movlw	0
  8180  002532  0012               	return	
  8181  002534                     __end_of_reserve_direntry:
  8182                           	opt stack 0
  8183                           tosu	equ	0xFFF
  8184                           tosh	equ	0xFFE
  8185                           tosl	equ	0xFFD
  8186                           pclath	equ	0xFFA
  8187                           tblptru	equ	0xFF8
  8188                           tblptrh	equ	0xFF7
  8189                           tblptrl	equ	0xFF6
  8190                           tablat	equ	0xFF5
  8191                           prodh	equ	0xFF4
  8192                           prodl	equ	0xFF3
  8193                           intcon	equ	0xFF2
  8194                           intcon2	equ	0xFF1
  8195                           intcon3	equ	0xFF0
  8196                           postinc0	equ	0xFEE
  8197                           wreg	equ	0xFE8
  8198                           indf1	equ	0xFE7
  8199                           postinc1	equ	0xFE6
  8200                           postdec1	equ	0xFE5
  8201                           fsr1h	equ	0xFE2
  8202                           fsr1l	equ	0xFE1
  8203                           indf2	equ	0xFDF
  8204                           postinc2	equ	0xFDE
  8205                           postdec2	equ	0xFDD
  8206                           plusw2	equ	0xFDB
  8207                           fsr2h	equ	0xFDA
  8208                           fsr2l	equ	0xFD9
  8209                           status	equ	0xFD8
  8210                           
  8211 ;; *************** function _next_dir_entry *****************
  8212 ;; Defined at:
  8213 ;;		line 358 in file "bibliotecas/tff.c"
  8214 ;; Parameters:    Size  Location     Type
  8215 ;;  dj              2   83[BANK0 ] PTR struct _DIR_E
  8216 ;;		 -> f_open@dj(14), 
  8217 ;; Auto vars:     Size  Location     Type
  8218 ;;  idx             2   94[BANK0 ] unsigned short 
  8219 ;;  clust           2   92[BANK0 ] unsigned short 
  8220 ;; Return value:  Size  Location     Type
  8221 ;;                  1    wreg      enum E105
  8222 ;; Registers used:
  8223 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8224 ;; Tracked objects:
  8225 ;;		On entry : 0/0
  8226 ;;		On exit  : 0/0
  8227 ;;		Unchanged: 0/0
  8228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8229 ;;      Params:         0       2       0       0       0       0       0       0       0
  8230 ;;      Locals:         0       4       0       0       0       0       0       0       0
  8231 ;;      Temps:          0       7       0       0       0       0       0       0       0
  8232 ;;      Totals:         0      13       0       0       0       0       0       0       0
  8233 ;;Total ram usage:       13 bytes
  8234 ;; Hardware stack levels used:    1
  8235 ;; Hardware stack levels required when called:   10
  8236 ;; This function calls:
  8237 ;;		_clust2sect
  8238 ;;		_get_cluster
  8239 ;; This function is called by:
  8240 ;;		_trace_path
  8241 ;;		_reserve_direntry
  8242 ;;		_f_readdir
  8243 ;; This function uses a non-reentrant model
  8244 ;;
  8245                           
  8246                           	psect	text27
  8247  003436                     __ptext27:
  8248                           	opt stack 0
  8249  003436                     _next_dir_entry:
  8250                           	opt stack 16
  8251                           
  8252                           ;tff.c: 362: CLUST clust;
  8253                           ;tff.c: 363: WORD idx;
  8254                           ;tff.c: 366: idx = dj->index + 1;
  8255                           
  8256                           ;incstack = 0
  8257  003436  0100               	movlb	0	; () banked
  8258  003438  EE20 F002          	lfsr	2,2
  8259  00343C  51B3               	movf	next_dir_entry@dj& (0+255),w,b
  8260  00343E  26D9               	addwf	fsr2l,f,c
  8261  003440  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  8262  003442  22DA               	addwfc	fsr2h,f,c
  8263  003444  CFDE F0B5          	movff	postinc2,??_next_dir_entry
  8264  003448  CFDD F0B6          	movff	postdec2,??_next_dir_entry+1
  8265  00344C  0E01               	movlw	1
  8266  00344E  25B5               	addwf	??_next_dir_entry& (0+255),w,b
  8267  003450  6FBE               	movwf	next_dir_entry@idx& (0+255),b
  8268  003452  0E00               	movlw	0
  8269  003454  21B6               	addwfc	(??_next_dir_entry+1)& (0+255),w,b
  8270  003456  6FBF               	movwf	(next_dir_entry@idx+1)& (0+255),b
  8271                           
  8272                           ; BSR set to: 0
  8273                           ;tff.c: 367: if ((idx & 15) == 0) {
  8274  003458  0E0F               	movlw	15
  8275  00345A  15BE               	andwf	next_dir_entry@idx& (0+255),w,b
  8276  00345C  6FB5               	movwf	??_next_dir_entry& (0+255),b
  8277  00345E  0E00               	movlw	0
  8278  003460  15BF               	andwf	(next_dir_entry@idx+1)& (0+255),w,b
  8279  003462  6FB6               	movwf	(??_next_dir_entry+1)& (0+255),b
  8280  003464  51B5               	movf	??_next_dir_entry& (0+255),w,b
  8281  003466  11B6               	iorwf	(??_next_dir_entry+1)& (0+255),w,b
  8282  003468  A4D8               	btfss	status,2,c
  8283  00346A  D09D               	goto	l930
  8284                           
  8285                           ; BSR set to: 0
  8286                           ;tff.c: 368: dj->sect++;
  8287  00346C  EE20 F00A          	lfsr	2,10
  8288  003470  51B3               	movf	next_dir_entry@dj& (0+255),w,b
  8289  003472  26D9               	addwf	fsr2l,f,c
  8290  003474  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  8291  003476  22DA               	addwfc	fsr2h,f,c
  8292  003478  2ADE               	incf	postinc2,f,c
  8293  00347A  0E00               	movlw	0
  8294  00347C  22DE               	addwfc	postinc2,f,c
  8295  00347E  22DE               	addwfc	postinc2,f,c
  8296  003480  22DE               	addwfc	postinc2,f,c
  8297                           
  8298                           ;tff.c: 369: if (dj->clust == 0) {
  8299  003482  EE20 F008          	lfsr	2,8
  8300  003486  51B3               	movf	next_dir_entry@dj& (0+255),w,b
  8301  003488  26D9               	addwf	fsr2l,f,c
  8302  00348A  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  8303  00348C  22DA               	addwfc	fsr2h,f,c
  8304  00348E  50DE               	movf	postinc2,w,c
  8305  003490  10DE               	iorwf	postinc2,w,c
  8306  003492  A4D8               	btfss	status,2,c
  8307  003494  D014               	goto	l926
  8308                           
  8309                           ; BSR set to: 0
  8310                           ;tff.c: 370: if (idx >= dj->fs->n_rootdir) return FALSE;
  8311  003496  EE20 F004          	lfsr	2,4
  8312  00349A  51B3               	movf	next_dir_entry@dj& (0+255),w,b
  8313  00349C  26D9               	addwf	fsr2l,f,c
  8314  00349E  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  8315  0034A0  22DA               	addwfc	fsr2h,f,c
  8316  0034A2  EE10 F002          	lfsr	1,2
  8317  0034A6  50DE               	movf	postinc2,w,c
  8318  0034A8  26E1               	addwf	fsr1l,f,c
  8319  0034AA  50DD               	movf	postdec2,w,c
  8320  0034AC  22E2               	addwfc	fsr1h,f,c
  8321  0034AE  50E6               	movf	postinc1,w,c
  8322  0034B0  5DBE               	subwf	next_dir_entry@idx& (0+255),w,b
  8323  0034B2  50E6               	movf	postinc1,w,c
  8324  0034B4  59BF               	subwfb	(next_dir_entry@idx+1)& (0+255),w,b
  8325  0034B6  A0D8               	btfss	status,0,c
  8326  0034B8  D076               	goto	l930
  8327                           
  8328                           ; BSR set to: 0
  8329  0034BA  0E00               	movlw	0
  8330                           
  8331                           ; BSR set to: 0
  8332  0034BC  0012               	return	
  8333  0034BE                     l926:
  8334                           
  8335                           ; BSR set to: 0
  8336                           ;tff.c: 372: if (((idx / 16) & (dj->fs->csize - 1)) == 0) {
  8337                           
  8338                           ; BSR set to: 0
  8339  0034BE  C0BE  F0B5         	movff	next_dir_entry@idx,??_next_dir_entry
  8340  0034C2  C0BF  F0B6         	movff	next_dir_entry@idx+1,??_next_dir_entry+1
  8341  0034C6  0E04               	movlw	4
  8342  0034C8  6FB7               	movwf	(??_next_dir_entry+2)& (0+255),b
  8343  0034CA                     u11455:
  8344  0034CA  90D8               	bcf	status,0,c
  8345  0034CC  33B6               	rrcf	(??_next_dir_entry+1)& (0+255),f,b
  8346  0034CE  33B5               	rrcf	??_next_dir_entry& (0+255),f,b
  8347  0034D0  2FB7               	decfsz	(??_next_dir_entry+2)& (0+255),f,b
  8348  0034D2  D7FB               	goto	u11455
  8349  0034D4  0EFF               	movlw	255
  8350  0034D6  6FB8               	movwf	(??_next_dir_entry+3)& (0+255),b
  8351  0034D8  0EFF               	movlw	255
  8352  0034DA  6FB9               	movwf	(??_next_dir_entry+4)& (0+255),b
  8353  0034DC  EE20 F004          	lfsr	2,4
  8354  0034E0  51B3               	movf	next_dir_entry@dj& (0+255),w,b
  8355  0034E2  26D9               	addwf	fsr2l,f,c
  8356  0034E4  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  8357  0034E6  22DA               	addwfc	fsr2h,f,c
  8358  0034E8  EE10 F01D          	lfsr	1,29
  8359  0034EC  50DE               	movf	postinc2,w,c
  8360  0034EE  26E1               	addwf	fsr1l,f,c
  8361  0034F0  50DD               	movf	postdec2,w,c
  8362  0034F2  22E2               	addwfc	fsr1h,f,c
  8363  0034F4  50E7               	movf	indf1,w,c
  8364  0034F6  6FBA               	movwf	(??_next_dir_entry+5)& (0+255),b
  8365  0034F8  6BBB               	clrf	(??_next_dir_entry+6)& (0+255),b
  8366  0034FA  51B8               	movf	(??_next_dir_entry+3)& (0+255),w,b
  8367  0034FC  27BA               	addwf	(??_next_dir_entry+5)& (0+255),f,b
  8368  0034FE  51B9               	movf	(??_next_dir_entry+4)& (0+255),w,b
  8369  003500  23BB               	addwfc	(??_next_dir_entry+6)& (0+255),f,b
  8370  003502  51B5               	movf	??_next_dir_entry& (0+255),w,b
  8371  003504  17BA               	andwf	(??_next_dir_entry+5)& (0+255),f,b
  8372  003506  51B6               	movf	(??_next_dir_entry+1)& (0+255),w,b
  8373  003508  17BB               	andwf	(??_next_dir_entry+6)& (0+255),f,b
  8374  00350A  51BA               	movf	(??_next_dir_entry+5)& (0+255),w,b
  8375  00350C  11BB               	iorwf	(??_next_dir_entry+6)& (0+255),w,b
  8376  00350E  A4D8               	btfss	status,2,c
  8377  003510  D04A               	goto	l930
  8378                           
  8379                           ; BSR set to: 0
  8380                           ;tff.c: 373: clust = get_cluster(dj->clust);
  8381  003512  EE20 F008          	lfsr	2,8
  8382  003516  51B3               	movf	next_dir_entry@dj& (0+255),w,b
  8383  003518  26D9               	addwf	fsr2l,f,c
  8384  00351A  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  8385  00351C  22DA               	addwfc	fsr2h,f,c
  8386  00351E  CFDE F0A0          	movff	postinc2,get_cluster@clust
  8387  003522  CFDD F0A1          	movff	postdec2,get_cluster@clust+1
  8388  003526  EC6A  F016         	call	_get_cluster	;wreg free
  8389  00352A  C0A0  F0BC         	movff	?_get_cluster,next_dir_entry@clust
  8390  00352E  C0A1  F0BD         	movff	?_get_cluster+1,next_dir_entry@clust+1
  8391                           
  8392                           ;tff.c: 374: if (clust < 2 || clust >= dj->fs->max_clust)
  8393  003532  0100               	movlb	0	; () banked
  8394  003534  51BD               	movf	(next_dir_entry@clust+1)& (0+255),w,b
  8395  003536  E104               	bnz	u11470
  8396  003538  0E02               	movlw	2
  8397  00353A  5DBC               	subwf	next_dir_entry@clust& (0+255),w,b
  8398  00353C  A0D8               	btfss	status,0,c
  8399  00353E  D012               	goto	u11480
  8400  003540                     u11470:
  8401                           
  8402                           ; BSR set to: 0
  8403  003540  EE20 F004          	lfsr	2,4
  8404  003544  51B3               	movf	next_dir_entry@dj& (0+255),w,b
  8405  003546  26D9               	addwf	fsr2l,f,c
  8406  003548  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  8407  00354A  22DA               	addwfc	fsr2h,f,c
  8408  00354C  EE10 F016          	lfsr	1,22
  8409  003550  50DE               	movf	postinc2,w,c
  8410  003552  26E1               	addwf	fsr1l,f,c
  8411  003554  50DD               	movf	postdec2,w,c
  8412  003556  22E2               	addwfc	fsr1h,f,c
  8413  003558  50E6               	movf	postinc1,w,c
  8414  00355A  5DBC               	subwf	next_dir_entry@clust& (0+255),w,b
  8415  00355C  50E6               	movf	postinc1,w,c
  8416  00355E  59BD               	subwfb	(next_dir_entry@clust+1)& (0+255),w,b
  8417  003560  A0D8               	btfss	status,0,c
  8418  003562  D002               	goto	l931
  8419  003564                     u11480:
  8420                           
  8421                           ; BSR set to: 0
  8422                           ;tff.c: 375: return FALSE;
  8423                           
  8424                           ; BSR set to: 0
  8425  003564  0E00               	movlw	0
  8426                           
  8427                           ; BSR set to: 0
  8428  003566  0012               	return	
  8429  003568                     l931:
  8430                           
  8431                           ; BSR set to: 0
  8432                           ;tff.c: 376: dj->clust = clust;
  8433                           
  8434                           ; BSR set to: 0
  8435  003568  EE20 F008          	lfsr	2,8
  8436  00356C  51B3               	movf	next_dir_entry@dj& (0+255),w,b
  8437  00356E  26D9               	addwf	fsr2l,f,c
  8438  003570  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  8439  003572  22DA               	addwfc	fsr2h,f,c
  8440  003574  C0BC  FFDE         	movff	next_dir_entry@clust,postinc2
  8441  003578  C0BD  FFDD         	movff	next_dir_entry@clust+1,postdec2
  8442                           
  8443                           ; BSR set to: 0
  8444                           ;tff.c: 377: dj->sect = clust2sect(clust);
  8445  00357C  C0BC  F06C         	movff	next_dir_entry@clust,clust2sect@clust
  8446  003580  C0BD  F06D         	movff	next_dir_entry@clust+1,clust2sect@clust+1
  8447  003584  ECEC  F01F         	call	_clust2sect	;wreg free
  8448  003588  0100               	movlb	0	; () banked
  8449  00358A  EE20 F00A          	lfsr	2,10
  8450  00358E  51B3               	movf	next_dir_entry@dj& (0+255),w,b
  8451  003590  26D9               	addwf	fsr2l,f,c
  8452  003592  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  8453  003594  22DA               	addwfc	fsr2h,f,c
  8454  003596  C06C  FFDE         	movff	?_clust2sect,postinc2
  8455  00359A  C06D  FFDE         	movff	?_clust2sect+1,postinc2
  8456  00359E  C06E  FFDE         	movff	?_clust2sect+2,postinc2
  8457  0035A2  C06F  FFDE         	movff	?_clust2sect+3,postinc2
  8458  0035A6                     l930:
  8459                           
  8460                           ; BSR set to: 0
  8461                           ;tff.c: 378: }
  8462                           ;tff.c: 379: }
  8463                           ;tff.c: 380: }
  8464                           ;tff.c: 381: dj->index = idx;
  8465                           
  8466                           ; BSR set to: 0
  8467                           
  8468                           ; BSR set to: 0
  8469                           
  8470                           ; BSR set to: 0
  8471  0035A6  EE20 F002          	lfsr	2,2
  8472  0035AA  51B3               	movf	next_dir_entry@dj& (0+255),w,b
  8473  0035AC  26D9               	addwf	fsr2l,f,c
  8474  0035AE  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  8475  0035B0  22DA               	addwfc	fsr2h,f,c
  8476  0035B2  C0BE  FFDE         	movff	next_dir_entry@idx,postinc2
  8477  0035B6  C0BF  FFDD         	movff	next_dir_entry@idx+1,postdec2
  8478                           
  8479                           ; BSR set to: 0
  8480                           ;tff.c: 382: return TRUE;
  8481  0035BA  0E01               	movlw	1
  8482  0035BC  0012               	return	
  8483  0035BE                     __end_of_next_dir_entry:
  8484                           	opt stack 0
  8485                           tosu	equ	0xFFF
  8486                           tosh	equ	0xFFE
  8487                           tosl	equ	0xFFD
  8488                           pclath	equ	0xFFA
  8489                           tblptru	equ	0xFF8
  8490                           tblptrh	equ	0xFF7
  8491                           tblptrl	equ	0xFF6
  8492                           tablat	equ	0xFF5
  8493                           prodh	equ	0xFF4
  8494                           prodl	equ	0xFF3
  8495                           intcon	equ	0xFF2
  8496                           intcon2	equ	0xFF1
  8497                           intcon3	equ	0xFF0
  8498                           postinc0	equ	0xFEE
  8499                           wreg	equ	0xFE8
  8500                           indf1	equ	0xFE7
  8501                           postinc1	equ	0xFE6
  8502                           postdec1	equ	0xFE5
  8503                           fsr1h	equ	0xFE2
  8504                           fsr1l	equ	0xFE1
  8505                           indf2	equ	0xFDF
  8506                           postinc2	equ	0xFDE
  8507                           postdec2	equ	0xFDD
  8508                           plusw2	equ	0xFDB
  8509                           fsr2h	equ	0xFDA
  8510                           fsr2l	equ	0xFD9
  8511                           status	equ	0xFD8
  8512                           
  8513 ;; *************** function _clust2sect *****************
  8514 ;; Defined at:
  8515 ;;		line 338 in file "bibliotecas/tff.c"
  8516 ;; Parameters:    Size  Location     Type
  8517 ;;  clust           2   12[BANK0 ] unsigned short 
  8518 ;; Auto vars:     Size  Location     Type
  8519 ;;  fs              2   21[BANK0 ] PTR struct _FATFS
  8520 ;;		 -> NULL(0), fs(544), 
  8521 ;; Return value:  Size  Location     Type
  8522 ;;                  4   12[BANK0 ] unsigned long 
  8523 ;; Registers used:
  8524 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8525 ;; Tracked objects:
  8526 ;;		On entry : 0/0
  8527 ;;		On exit  : 0/0
  8528 ;;		Unchanged: 0/0
  8529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8530 ;;      Params:         0       4       0       0       0       0       0       0       0
  8531 ;;      Locals:         0       2       0       0       0       0       0       0       0
  8532 ;;      Temps:          0       5       0       0       0       0       0       0       0
  8533 ;;      Totals:         0      11       0       0       0       0       0       0       0
  8534 ;;Total ram usage:       11 bytes
  8535 ;; Hardware stack levels used:    1
  8536 ;; Hardware stack levels required when called:    4
  8537 ;; This function calls:
  8538 ;;		___lmul
  8539 ;; This function is called by:
  8540 ;;		_next_dir_entry
  8541 ;;		_trace_path
  8542 ;;		_reserve_direntry
  8543 ;;		_f_write
  8544 ;;		_f_read
  8545 ;;		_f_opendir
  8546 ;; This function uses a non-reentrant model
  8547 ;;
  8548                           
  8549                           	psect	text28
  8550  003FD8                     __ptext28:
  8551                           	opt stack 0
  8552  003FD8                     _clust2sect:
  8553                           	opt stack 20
  8554                           
  8555                           ;tff.c: 342: FATFS *fs = FatFs;
  8556                           
  8557                           ; BSR set to: 0
  8558                           ;incstack = 0
  8559  003FD8  C0F6  F075         	movff	_FatFs,clust2sect@fs
  8560  003FDC  C0F7  F076         	movff	_FatFs+1,clust2sect@fs+1
  8561                           
  8562                           ;tff.c: 345: clust -= 2;
  8563  003FE0  0E02               	movlw	2
  8564  003FE2  0100               	movlb	0	; () banked
  8565  003FE4  5F6C               	subwf	clust2sect@clust& (0+255),f,b
  8566  003FE6  0E00               	movlw	0
  8567  003FE8  5B6D               	subwfb	(clust2sect@clust+1)& (0+255),f,b
  8568                           
  8569                           ; BSR set to: 0
  8570                           ;tff.c: 346: if (clust >= (fs->max_clust - 2)) return 0;
  8571  003FEA  0EFE               	movlw	254
  8572  003FEC  6F70               	movwf	??_clust2sect& (0+255),b
  8573  003FEE  0EFF               	movlw	255
  8574  003FF0  6F71               	movwf	(??_clust2sect+1)& (0+255),b
  8575  003FF2  EE20 F016          	lfsr	2,22
  8576  003FF6  5175               	movf	clust2sect@fs& (0+255),w,b
  8577  003FF8  26D9               	addwf	fsr2l,f,c
  8578  003FFA  5176               	movf	(clust2sect@fs+1)& (0+255),w,b
  8579  003FFC  22DA               	addwfc	fsr2h,f,c
  8580  003FFE  CFDE F072          	movff	postinc2,??_clust2sect+2
  8581  004002  CFDD F073          	movff	postdec2,??_clust2sect+3
  8582  004006  5170               	movf	??_clust2sect& (0+255),w,b
  8583  004008  2772               	addwf	(??_clust2sect+2)& (0+255),f,b
  8584  00400A  5171               	movf	(??_clust2sect+1)& (0+255),w,b
  8585  00400C  2373               	addwfc	(??_clust2sect+3)& (0+255),f,b
  8586  00400E  5172               	movf	(??_clust2sect+2)& (0+255),w,b
  8587  004010  5D6C               	subwf	clust2sect@clust& (0+255),w,b
  8588  004012  5173               	movf	(??_clust2sect+3)& (0+255),w,b
  8589  004014  596D               	subwfb	(clust2sect@clust+1)& (0+255),w,b
  8590  004016  A0D8               	btfss	status,0,c
  8591  004018  D009               	goto	l921
  8592                           
  8593                           ; BSR set to: 0
  8594  00401A  0E00               	movlw	0
  8595  00401C  6F6C               	movwf	?_clust2sect& (0+255),b
  8596  00401E  0E00               	movlw	0
  8597  004020  6F6D               	movwf	(?_clust2sect+1)& (0+255),b
  8598  004022  0E00               	movlw	0
  8599  004024  6F6E               	movwf	(?_clust2sect+2)& (0+255),b
  8600  004026  0E00               	movlw	0
  8601  004028  6F6F               	movwf	(?_clust2sect+3)& (0+255),b
  8602                           
  8603                           ; BSR set to: 0
  8604  00402A  0012               	return	
  8605  00402C                     l921:
  8606                           
  8607                           ; BSR set to: 0
  8608                           ;tff.c: 347: return (DWORD)clust * fs->csize + fs->database;
  8609                           
  8610                           ; BSR set to: 0
  8611  00402C  EE20 F010          	lfsr	2,16
  8612  004030  5175               	movf	clust2sect@fs& (0+255),w,b
  8613  004032  26D9               	addwf	fsr2l,f,c
  8614  004034  5176               	movf	(clust2sect@fs+1)& (0+255),w,b
  8615  004036  22DA               	addwfc	fsr2h,f,c
  8616  004038  CFDE F070          	movff	postinc2,??_clust2sect
  8617  00403C  CFDE F071          	movff	postinc2,??_clust2sect+1
  8618  004040  CFDE F072          	movff	postinc2,??_clust2sect+2
  8619  004044  CFDE F073          	movff	postinc2,??_clust2sect+3
  8620  004048  C06C  F060         	movff	clust2sect@clust,___lmul@multiplier
  8621  00404C  C06D  F061         	movff	clust2sect@clust+1,___lmul@multiplier+1
  8622  004050  6B62               	clrf	(___lmul@multiplier+2)& (0+255),b
  8623  004052  6B63               	clrf	(___lmul@multiplier+3)& (0+255),b
  8624  004054  EE20 F01D          	lfsr	2,29
  8625  004058  5175               	movf	clust2sect@fs& (0+255),w,b
  8626  00405A  26D9               	addwf	fsr2l,f,c
  8627  00405C  5176               	movf	(clust2sect@fs+1)& (0+255),w,b
  8628  00405E  22DA               	addwfc	fsr2h,f,c
  8629  004060  50DF               	movf	indf2,w,c
  8630  004062  6F74               	movwf	(??_clust2sect+4)& (0+255),b
  8631  004064  5174               	movf	(??_clust2sect+4)& (0+255),w,b
  8632  004066  6F64               	movwf	___lmul@multiplicand& (0+255),b
  8633  004068  6B65               	clrf	(___lmul@multiplicand+1)& (0+255),b
  8634  00406A  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
  8635  00406C  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
  8636  00406E  EC81  F025         	call	___lmul	;wreg free
  8637  004072  0100               	movlb	0	; () banked
  8638  004074  5170               	movf	??_clust2sect& (0+255),w,b
  8639  004076  2560               	addwf	?___lmul& (0+255),w,b
  8640  004078  6F6C               	movwf	?_clust2sect& (0+255),b
  8641  00407A  5171               	movf	(??_clust2sect+1)& (0+255),w,b
  8642  00407C  2161               	addwfc	(?___lmul+1)& (0+255),w,b
  8643  00407E  6F6D               	movwf	(?_clust2sect+1)& (0+255),b
  8644  004080  5172               	movf	(??_clust2sect+2)& (0+255),w,b
  8645  004082  2162               	addwfc	(?___lmul+2)& (0+255),w,b
  8646  004084  6F6E               	movwf	(?_clust2sect+2)& (0+255),b
  8647  004086  5173               	movf	(??_clust2sect+3)& (0+255),w,b
  8648  004088  2163               	addwfc	(?___lmul+3)& (0+255),w,b
  8649  00408A  6F6F               	movwf	(?_clust2sect+3)& (0+255),b
  8650  00408C  0012               	return	
  8651  00408E                     __end_of_clust2sect:
  8652                           	opt stack 0
  8653                           tosu	equ	0xFFF
  8654                           tosh	equ	0xFFE
  8655                           tosl	equ	0xFFD
  8656                           pclath	equ	0xFFA
  8657                           tblptru	equ	0xFF8
  8658                           tblptrh	equ	0xFF7
  8659                           tblptrl	equ	0xFF6
  8660                           tablat	equ	0xFF5
  8661                           prodh	equ	0xFF4
  8662                           prodl	equ	0xFF3
  8663                           intcon	equ	0xFF2
  8664                           intcon2	equ	0xFF1
  8665                           intcon3	equ	0xFF0
  8666                           postinc0	equ	0xFEE
  8667                           wreg	equ	0xFE8
  8668                           indf1	equ	0xFE7
  8669                           postinc1	equ	0xFE6
  8670                           postdec1	equ	0xFE5
  8671                           fsr1h	equ	0xFE2
  8672                           fsr1l	equ	0xFE1
  8673                           indf2	equ	0xFDF
  8674                           postinc2	equ	0xFDE
  8675                           postdec2	equ	0xFDD
  8676                           plusw2	equ	0xFDB
  8677                           fsr2h	equ	0xFDA
  8678                           fsr2l	equ	0xFD9
  8679                           status	equ	0xFD8
  8680                           
  8681 ;; *************** function _remove_chain *****************
  8682 ;; Defined at:
  8683 ;;		line 249 in file "bibliotecas/tff.c"
  8684 ;; Parameters:    Size  Location     Type
  8685 ;;  clust           2   86[BANK0 ] unsigned short 
  8686 ;; Auto vars:     Size  Location     Type
  8687 ;;  fs              2   92[BANK0 ] PTR struct _FATFS
  8688 ;;		 -> NULL(0), fs(544), 
  8689 ;;  nxt             2   90[BANK0 ] unsigned short 
  8690 ;; Return value:  Size  Location     Type
  8691 ;;                  1    wreg      enum E105
  8692 ;; Registers used:
  8693 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8694 ;; Tracked objects:
  8695 ;;		On entry : 0/0
  8696 ;;		On exit  : 0/0
  8697 ;;		Unchanged: 0/0
  8698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8699 ;;      Params:         0       2       0       0       0       0       0       0       0
  8700 ;;      Locals:         0       4       0       0       0       0       0       0       0
  8701 ;;      Temps:          0       2       0       0       0       0       0       0       0
  8702 ;;      Totals:         0       8       0       0       0       0       0       0       0
  8703 ;;Total ram usage:        8 bytes
  8704 ;; Hardware stack levels used:    1
  8705 ;; Hardware stack levels required when called:   10
  8706 ;; This function calls:
  8707 ;;		_get_cluster
  8708 ;;		_put_cluster
  8709 ;; This function is called by:
  8710 ;;		_f_open
  8711 ;; This function uses a non-reentrant model
  8712 ;;
  8713                           
  8714                           	psect	text29
  8715  004138                     __ptext29:
  8716                           	opt stack 0
  8717  004138                     _remove_chain:
  8718                           	opt stack 17
  8719                           
  8720                           ;tff.c: 253: CLUST nxt;
  8721                           ;tff.c: 254: FATFS *fs = FatFs;
  8722                           
  8723                           ; BSR set to: 0
  8724                           ;incstack = 0
  8725  004138  C0F6  F0BC         	movff	_FatFs,remove_chain@fs
  8726  00413C  C0F7  F0BD         	movff	_FatFs+1,remove_chain@fs+1
  8727                           
  8728                           ;tff.c: 257: while (clust >= 2 && clust < fs->max_clust) {
  8729  004140  D039               	goto	l890
  8730  004142                     
  8731                           ;tff.c: 258: nxt = get_cluster(clust);
  8732  004142  C0B6  F0A0         	movff	remove_chain@clust,get_cluster@clust
  8733  004146  C0B7  F0A1         	movff	remove_chain@clust+1,get_cluster@clust+1
  8734  00414A  EC6A  F016         	call	_get_cluster	;wreg free
  8735  00414E  C0A0  F0BA         	movff	?_get_cluster,remove_chain@nxt
  8736  004152  C0A1  F0BB         	movff	?_get_cluster+1,remove_chain@nxt+1
  8737                           
  8738                           ;tff.c: 259: if (nxt == 1) return FALSE;
  8739  004156  0100               	movlb	0	; () banked
  8740  004158  05BA               	decf	remove_chain@nxt& (0+255),w,b
  8741  00415A  11BB               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  8742  00415C  A4D8               	btfss	status,2,c
  8743  00415E  D002               	goto	l892
  8744                           
  8745                           ; BSR set to: 0
  8746  004160  0E00               	movlw	0
  8747                           
  8748                           ; BSR set to: 0
  8749  004162  0012               	return	
  8750  004164                     l892:
  8751                           
  8752                           ; BSR set to: 0
  8753                           ;tff.c: 260: if (!put_cluster(clust, 0)) return FALSE;
  8754                           
  8755                           ; BSR set to: 0
  8756  004164  C0B6  F0A0         	movff	remove_chain@clust,put_cluster@clust
  8757  004168  C0B7  F0A1         	movff	remove_chain@clust+1,put_cluster@clust+1
  8758  00416C  0E00               	movlw	0
  8759  00416E  6FA3               	movwf	(put_cluster@val+1)& (0+255),b
  8760  004170  0E00               	movlw	0
  8761  004172  6FA2               	movwf	put_cluster@val& (0+255),b
  8762  004174  EC2D  F015         	call	_put_cluster	;wreg free
  8763  004178  0900               	iorlw	0
  8764  00417A  A4D8               	btfss	status,2,c
  8765  00417C  D002               	goto	l894
  8766  00417E  0E00               	movlw	0
  8767  004180  0012               	return	
  8768  004182                     l894:
  8769                           
  8770                           ;tff.c: 261: if (fs->free_clust != (CLUST)0xFFFFFFFF) {
  8771  004182  0100               	movlb	0	; () banked
  8772  004184  EE20 F01A          	lfsr	2,26
  8773  004188  51BC               	movf	remove_chain@fs& (0+255),w,b
  8774  00418A  26D9               	addwf	fsr2l,f,c
  8775  00418C  51BD               	movf	(remove_chain@fs+1)& (0+255),w,b
  8776  00418E  22DA               	addwfc	fsr2h,f,c
  8777  004190  28DE               	incf	postinc2,w,c
  8778  004192  E103               	bnz	u12100
  8779  004194  28DE               	incf	postinc2,w,c
  8780  004196  B4D8               	btfsc	status,2,c
  8781  004198  D009               	goto	l895
  8782  00419A                     u12100:
  8783                           
  8784                           ; BSR set to: 0
  8785                           ;tff.c: 262: fs->free_clust++;
  8786  00419A  EE20 F01A          	lfsr	2,26
  8787  00419E  51BC               	movf	remove_chain@fs& (0+255),w,b
  8788  0041A0  26D9               	addwf	fsr2l,f,c
  8789  0041A2  51BD               	movf	(remove_chain@fs+1)& (0+255),w,b
  8790  0041A4  22DA               	addwfc	fsr2h,f,c
  8791  0041A6  2ADE               	incf	postinc2,f,c
  8792  0041A8  0E00               	movlw	0
  8793  0041AA  22DD               	addwfc	postdec2,f,c
  8794  0041AC                     l895:
  8795                           
  8796                           ; BSR set to: 0
  8797                           ;tff.c: 266: }
  8798                           ;tff.c: 267: clust = nxt;
  8799                           
  8800                           ; BSR set to: 0
  8801  0041AC  C0BA  F0B6         	movff	remove_chain@nxt,remove_chain@clust
  8802  0041B0  C0BB  F0B7         	movff	remove_chain@nxt+1,remove_chain@clust+1
  8803  0041B4                     l890:
  8804                           
  8805                           ; BSR set to: 0
  8806  0041B4  0100               	movlb	0	; () banked
  8807  0041B6  51B7               	movf	(remove_chain@clust+1)& (0+255),w,b
  8808  0041B8  E104               	bnz	u12110
  8809  0041BA  0E02               	movlw	2
  8810  0041BC  5DB6               	subwf	remove_chain@clust& (0+255),w,b
  8811  0041BE  A0D8               	btfss	status,0,c
  8812  0041C0  D00C               	goto	u12120
  8813  0041C2                     u12110:
  8814                           
  8815                           ; BSR set to: 0
  8816  0041C2  EE20 F016          	lfsr	2,22
  8817  0041C6  51BC               	movf	remove_chain@fs& (0+255),w,b
  8818  0041C8  26D9               	addwf	fsr2l,f,c
  8819  0041CA  51BD               	movf	(remove_chain@fs+1)& (0+255),w,b
  8820  0041CC  22DA               	addwfc	fsr2h,f,c
  8821  0041CE  50DE               	movf	postinc2,w,c
  8822  0041D0  5DB6               	subwf	remove_chain@clust& (0+255),w,b
  8823  0041D2  50DE               	movf	postinc2,w,c
  8824  0041D4  59B7               	subwfb	(remove_chain@clust+1)& (0+255),w,b
  8825  0041D6  A0D8               	btfss	status,0,c
  8826  0041D8  D7B4               	goto	l891
  8827  0041DA                     u12120:
  8828                           
  8829                           ; BSR set to: 0
  8830                           ;tff.c: 268: }
  8831                           ;tff.c: 269: return TRUE;
  8832                           
  8833                           ; BSR set to: 0
  8834                           
  8835                           ; BSR set to: 0
  8836  0041DA  0E01               	movlw	1
  8837  0041DC  0012               	return	
  8838  0041DE                     __end_of_remove_chain:
  8839                           	opt stack 0
  8840                           tosu	equ	0xFFF
  8841                           tosh	equ	0xFFE
  8842                           tosl	equ	0xFFD
  8843                           pclath	equ	0xFFA
  8844                           tblptru	equ	0xFF8
  8845                           tblptrh	equ	0xFF7
  8846                           tblptrl	equ	0xFF6
  8847                           tablat	equ	0xFF5
  8848                           prodh	equ	0xFF4
  8849                           prodl	equ	0xFF3
  8850                           intcon	equ	0xFF2
  8851                           intcon2	equ	0xFF1
  8852                           intcon3	equ	0xFF0
  8853                           postinc0	equ	0xFEE
  8854                           wreg	equ	0xFE8
  8855                           indf1	equ	0xFE7
  8856                           postinc1	equ	0xFE6
  8857                           postdec1	equ	0xFE5
  8858                           fsr1h	equ	0xFE2
  8859                           fsr1l	equ	0xFE1
  8860                           indf2	equ	0xFDF
  8861                           postinc2	equ	0xFDE
  8862                           postdec2	equ	0xFDD
  8863                           plusw2	equ	0xFDB
  8864                           fsr2h	equ	0xFDA
  8865                           fsr2l	equ	0xFD9
  8866                           status	equ	0xFD8
  8867                           
  8868 ;; *************** function _memcpy *****************
  8869 ;; Defined at:
  8870 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcpy.c"
  8871 ;; Parameters:    Size  Location     Type
  8872 ;;  d1              2    0[BANK0 ] PTR void 
  8873 ;;		 -> fs.win(512), NULL(0), fs(544), 
  8874 ;;  s1              2    2[BANK0 ] PTR const void 
  8875 ;;		 -> fputc@c(1), f_open@fn(12), NULL(0), fs(544), 
  8876 ;;  n               2    4[BANK0 ] unsigned int 
  8877 ;; Auto vars:     Size  Location     Type
  8878 ;;  s               2    9[BANK0 ] PTR const unsigned char 
  8879 ;;		 -> fputc@c(1), f_open@fn(12), NULL(0), fs(544), 
  8880 ;;  d               2    7[BANK0 ] PTR unsigned char 
  8881 ;;		 -> fs.win(512), NULL(0), fs(544), 
  8882 ;;  tmp             1    6[BANK0 ] unsigned char 
  8883 ;; Return value:  Size  Location     Type
  8884 ;;                  2    0[BANK0 ] PTR void 
  8885 ;; Registers used:
  8886 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8887 ;; Tracked objects:
  8888 ;;		On entry : 0/0
  8889 ;;		On exit  : 0/0
  8890 ;;		Unchanged: 0/0
  8891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8892 ;;      Params:         0       6       0       0       0       0       0       0       0
  8893 ;;      Locals:         0       5       0       0       0       0       0       0       0
  8894 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8895 ;;      Totals:         0      11       0       0       0       0       0       0       0
  8896 ;;Total ram usage:       11 bytes
  8897 ;; Hardware stack levels used:    1
  8898 ;; Hardware stack levels required when called:    3
  8899 ;; This function calls:
  8900 ;;		Nothing
  8901 ;; This function is called by:
  8902 ;;		_f_open
  8903 ;;		_f_write
  8904 ;;		_f_read
  8905 ;; This function uses a non-reentrant model
  8906 ;;
  8907                           
  8908                           	psect	text30
  8909  004D3E                     __ptext30:
  8910                           	opt stack 0
  8911  004D3E                     _memcpy:
  8912                           	opt stack 21
  8913                           
  8914                           ;incstack = 0
  8915  004D3E  C062  F069         	movff	memcpy@s1,memcpy@s
  8916  004D42  C063  F06A         	movff	memcpy@s1+1,memcpy@s+1
  8917  004D46  C060  F067         	movff	memcpy@d1,memcpy@d
  8918  004D4A  C061  F068         	movff	memcpy@d1+1,memcpy@d+1
  8919  004D4E  D011               	goto	l1777
  8920  004D50                     l9023:
  8921  004D50  C069  FFD9         	movff	memcpy@s,fsr2l
  8922  004D54  C06A  FFDA         	movff	memcpy@s+1,fsr2h
  8923  004D58  50DF               	movf	indf2,w,c
  8924  004D5A  0100               	movlb	0	; () banked
  8925  004D5C  6F66               	movwf	memcpy@tmp& (0+255),b
  8926                           
  8927                           ; BSR set to: 0
  8928  004D5E  4B69               	infsnz	memcpy@s& (0+255),f,b
  8929  004D60  2B6A               	incf	(memcpy@s+1)& (0+255),f,b
  8930                           
  8931                           ; BSR set to: 0
  8932  004D62  C067  FFD9         	movff	memcpy@d,fsr2l
  8933  004D66  C068  FFDA         	movff	memcpy@d+1,fsr2h
  8934  004D6A  C066  FFDF         	movff	memcpy@tmp,indf2
  8935                           
  8936                           ; BSR set to: 0
  8937  004D6E  4B67               	infsnz	memcpy@d& (0+255),f,b
  8938  004D70  2B68               	incf	(memcpy@d+1)& (0+255),f,b
  8939  004D72                     l1777:
  8940                           
  8941                           ; BSR set to: 0
  8942  004D72  0100               	movlb	0	; () banked
  8943  004D74  0764               	decf	memcpy@n& (0+255),f,b
  8944  004D76  A0D8               	btfss	status,0,c
  8945  004D78  0765               	decf	(memcpy@n+1)& (0+255),f,b
  8946  004D7A  2964               	incf	memcpy@n& (0+255),w,b
  8947  004D7C  E1E9               	bnz	l9023
  8948  004D7E  2965               	incf	(memcpy@n+1)& (0+255),w,b
  8949  004D80  B4D8               	btfsc	status,2,c
  8950  004D82  0012               	return	
  8951  004D84  D7E5               	goto	l1778
  8952  004D86                     __end_of_memcpy:
  8953                           	opt stack 0
  8954                           tosu	equ	0xFFF
  8955                           tosh	equ	0xFFE
  8956                           tosl	equ	0xFFD
  8957                           pclath	equ	0xFFA
  8958                           tblptru	equ	0xFF8
  8959                           tblptrh	equ	0xFF7
  8960                           tblptrl	equ	0xFF6
  8961                           tablat	equ	0xFF5
  8962                           prodh	equ	0xFF4
  8963                           prodl	equ	0xFF3
  8964                           intcon	equ	0xFF2
  8965                           intcon2	equ	0xFF1
  8966                           intcon3	equ	0xFF0
  8967                           postinc0	equ	0xFEE
  8968                           wreg	equ	0xFE8
  8969                           indf1	equ	0xFE7
  8970                           postinc1	equ	0xFE6
  8971                           postdec1	equ	0xFE5
  8972                           fsr1h	equ	0xFE2
  8973                           fsr1l	equ	0xFE1
  8974                           indf2	equ	0xFDF
  8975                           postinc2	equ	0xFDE
  8976                           postdec2	equ	0xFDD
  8977                           plusw2	equ	0xFDB
  8978                           fsr2h	equ	0xFDA
  8979                           fsr2l	equ	0xFD9
  8980                           status	equ	0xFD8
  8981                           
  8982 ;; *************** function _auto_mount *****************
  8983 ;; Defined at:
  8984 ;;		line 651 in file "bibliotecas/tff.c"
  8985 ;; Parameters:    Size  Location     Type
  8986 ;;  path            2   51[BANK0 ] PTR PTR const unsigned c
  8987 ;;		 -> f_opendir@path(2), f_open@path(2), 
  8988 ;;  chk_wp          1   53[BANK0 ] unsigned char 
  8989 ;; Auto vars:     Size  Location     Type
  8990 ;;  fatsize         4   85[BANK0 ] unsigned long 
  8991 ;;  totalsect       4   77[BANK0 ] unsigned long 
  8992 ;;  bootsect        4   73[BANK0 ] unsigned long 
  8993 ;;  maxclust        4   69[BANK0 ] unsigned long 
  8994 ;;  fs              2   89[BANK0 ] PTR struct _FATFS
  8995 ;;		 -> NULL(0), fs(544), 
  8996 ;;  p               2   81[BANK0 ] PTR const unsigned char 
  8997 ;;		 -> filename(15), 
  8998 ;;  stat            1   84[BANK0 ] unsigned char 
  8999 ;;  fmt             1   83[BANK0 ] unsigned char 
  9000 ;; Return value:  Size  Location     Type
  9001 ;;                  1    wreg      enum E155
  9002 ;; Registers used:
  9003 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9004 ;; Tracked objects:
  9005 ;;		On entry : 0/0
  9006 ;;		On exit  : 0/0
  9007 ;;		Unchanged: 0/0
  9008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9009 ;;      Params:         0       3       0       0       0       0       0       0       0
  9010 ;;      Locals:         0      22       0       0       0       0       0       0       0
  9011 ;;      Temps:          0      15       0       0       0       0       0       0       0
  9012 ;;      Totals:         0      40       0       0       0       0       0       0       0
  9013 ;;Total ram usage:       40 bytes
  9014 ;; Hardware stack levels used:    1
  9015 ;; Hardware stack levels required when called:    9
  9016 ;; This function calls:
  9017 ;;		___lldiv
  9018 ;;		___lmul
  9019 ;;		_check_fs
  9020 ;;		_disk_initialize
  9021 ;;		_disk_status
  9022 ;;		_memset
  9023 ;; This function is called by:
  9024 ;;		_f_open
  9025 ;;		_f_opendir
  9026 ;; This function uses a non-reentrant model
  9027 ;;
  9028                           
  9029                           	psect	text31
  9030  000E86                     __ptext31:
  9031                           	opt stack 0
  9032  000E86                     _auto_mount:
  9033                           	opt stack 18
  9034                           
  9035                           ;tff.c: 656: BYTE fmt;
  9036                           ;tff.c: 657: DSTATUS stat;
  9037                           ;tff.c: 658: DWORD bootsect, fatsize, totalsect, maxclust;
  9038                           ;tff.c: 659: const char *p = *path;
  9039                           
  9040                           ; BSR set to: 0
  9041                           ;incstack = 0
  9042  000E86  C093  FFD9         	movff	auto_mount@path,fsr2l
  9043  000E8A  C094  FFDA         	movff	auto_mount@path+1,fsr2h
  9044  000E8E  CFDE F0B1          	movff	postinc2,auto_mount@p
  9045  000E92  CFDD F0B2          	movff	postdec2,auto_mount@p+1
  9046                           
  9047                           ;tff.c: 660: FATFS *fs;
  9048                           ;tff.c: 663: while (*p == ' ') p++;
  9049  000E96  D003               	goto	l1050
  9050  000E98  0100               	movlb	0	; () banked
  9051  000E9A  4BB1               	infsnz	auto_mount@p& (0+255),f,b
  9052  000E9C  2BB2               	incf	(auto_mount@p+1)& (0+255),f,b
  9053  000E9E                     l1050:
  9054                           
  9055                           ; BSR set to: 0
  9056  000E9E  C0B1  FFD9         	movff	auto_mount@p,fsr2l
  9057  000EA2  C0B2  FFDA         	movff	auto_mount@p+1,fsr2h
  9058  000EA6  0E20               	movlw	32
  9059  000EA8  18DE               	xorwf	postinc2,w,c
  9060  000EAA  B4D8               	btfsc	status,2,c
  9061  000EAC  D7F5               	goto	l1051
  9062                           
  9063                           ;tff.c: 664: if (*p == '/') p++;
  9064  000EAE  C0B1  FFD9         	movff	auto_mount@p,fsr2l
  9065  000EB2  C0B2  FFDA         	movff	auto_mount@p+1,fsr2h
  9066  000EB6  0E2F               	movlw	47
  9067  000EB8  18DE               	xorwf	postinc2,w,c
  9068  000EBA  A4D8               	btfss	status,2,c
  9069  000EBC  D003               	goto	l1053
  9070  000EBE  0100               	movlb	0	; () banked
  9071  000EC0  4BB1               	infsnz	auto_mount@p& (0+255),f,b
  9072  000EC2  2BB2               	incf	(auto_mount@p+1)& (0+255),f,b
  9073  000EC4                     l1053:
  9074                           
  9075                           ;tff.c: 665: *path = p;
  9076                           
  9077                           ; BSR set to: 0
  9078  000EC4  C093  FFD9         	movff	auto_mount@path,fsr2l
  9079  000EC8  C094  FFDA         	movff	auto_mount@path+1,fsr2h
  9080  000ECC  C0B1  FFDE         	movff	auto_mount@p,postinc2
  9081  000ED0  C0B2  FFDD         	movff	auto_mount@p+1,postdec2
  9082                           
  9083                           ;tff.c: 668: fs = FatFs;
  9084  000ED4  C0F6  F0B9         	movff	_FatFs,auto_mount@fs
  9085  000ED8  C0F7  F0BA         	movff	_FatFs+1,auto_mount@fs+1
  9086                           
  9087                           ;tff.c: 669: if (!fs) return FR_NOT_ENABLED;
  9088  000EDC  0100               	movlb	0	; () banked
  9089  000EDE  51B9               	movf	auto_mount@fs& (0+255),w,b
  9090  000EE0  11BA               	iorwf	(auto_mount@fs+1)& (0+255),w,b
  9091  000EE2  A4D8               	btfss	status,2,c
  9092  000EE4  D002               	goto	l1054
  9093                           
  9094                           ; BSR set to: 0
  9095  000EE6  0E0A               	movlw	10
  9096                           
  9097                           ; BSR set to: 0
  9098  000EE8  0012               	return	
  9099  000EEA                     l1054:
  9100                           
  9101                           ; BSR set to: 0
  9102                           ;tff.c: 671: if (fs->fs_type) {
  9103                           
  9104                           ; BSR set to: 0
  9105  000EEA  EE20 F01C          	lfsr	2,28
  9106  000EEE  51B9               	movf	auto_mount@fs& (0+255),w,b
  9107  000EF0  26D9               	addwf	fsr2l,f,c
  9108  000EF2  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
  9109  000EF4  22DA               	addwfc	fsr2h,f,c
  9110  000EF6  50DF               	movf	indf2,w,c
  9111  000EF8  B4D8               	btfsc	status,2,c
  9112  000EFA  D00F               	goto	l1057
  9113                           
  9114                           ; BSR set to: 0
  9115                           ;tff.c: 672: stat = disk_status(0);
  9116  000EFC  0E00               	movlw	0
  9117  000EFE  ECC3  F026         	call	_disk_status
  9118  000F02  0100               	movlb	0	; () banked
  9119  000F04  6FB4               	movwf	auto_mount@stat& (0+255),b
  9120                           
  9121                           ; BSR set to: 0
  9122                           ;tff.c: 673: if (!(stat & 0x01)) {
  9123  000F06  B1B4               	btfsc	auto_mount@stat& (0+255),0,b
  9124  000F08  D008               	goto	l1057
  9125                           
  9126                           ; BSR set to: 0
  9127                           ;tff.c: 675: if (chk_wp && (stat & 0x04))
  9128  000F0A  5195               	movf	auto_mount@chk_wp& (0+255),w,b
  9129  000F0C  A4D8               	btfss	status,2,c
  9130                           
  9131                           ; BSR set to: 0
  9132  000F0E  A5B4               	btfss	auto_mount@stat& (0+255),2,b
  9133  000F10  D002               	goto	l1058
  9134                           
  9135                           ; BSR set to: 0
  9136                           ;tff.c: 676: return FR_WRITE_PROTECTED;
  9137  000F12  0E09               	movlw	9
  9138                           
  9139                           ; BSR set to: 0
  9140  000F14  0012               	return	
  9141  000F16                     l1058:
  9142                           
  9143                           ; BSR set to: 0
  9144                           ;tff.c: 678: return FR_OK;
  9145                           
  9146                           ; BSR set to: 0
  9147  000F16  0E00               	movlw	0
  9148                           
  9149                           ; BSR set to: 0
  9150  000F18  0012               	return	
  9151  000F1A                     l1057:
  9152                           
  9153                           ; BSR set to: 0
  9154                           ;tff.c: 679: }
  9155                           ;tff.c: 680: }
  9156                           ;tff.c: 684: memset(fs, 0, sizeof(FATFS));
  9157                           
  9158                           ; BSR set to: 0
  9159                           
  9160                           ; BSR set to: 0
  9161  000F1A  C0B9  F060         	movff	auto_mount@fs,memset@p1
  9162  000F1E  C0BA  F061         	movff	auto_mount@fs+1,memset@p1+1
  9163  000F22  0E00               	movlw	0
  9164  000F24  6F63               	movwf	(memset@c+1)& (0+255),b
  9165  000F26  0E00               	movlw	0
  9166  000F28  6F62               	movwf	memset@c& (0+255),b
  9167  000F2A  0E02               	movlw	2
  9168  000F2C  6F65               	movwf	(memset@n+1)& (0+255),b
  9169  000F2E  0E20               	movlw	32
  9170  000F30  6F64               	movwf	memset@n& (0+255),b
  9171  000F32  EC24  F028         	call	_memset	;wreg free
  9172                           
  9173                           ;tff.c: 685: stat = disk_initialize(0);
  9174  000F36  0E00               	movlw	0
  9175  000F38  ECD1  F027         	call	_disk_initialize
  9176  000F3C  0100               	movlb	0	; () banked
  9177  000F3E  6FB4               	movwf	auto_mount@stat& (0+255),b
  9178                           
  9179                           ; BSR set to: 0
  9180                           ;tff.c: 686: if (stat & 0x01)
  9181  000F40  A1B4               	btfss	auto_mount@stat& (0+255),0,b
  9182  000F42  D002               	goto	l1059
  9183                           
  9184                           ; BSR set to: 0
  9185                           ;tff.c: 687: return FR_NOT_READY;
  9186  000F44  0E01               	movlw	1
  9187                           
  9188                           ; BSR set to: 0
  9189  000F46  0012               	return	
  9190  000F48                     l1059:
  9191                           
  9192                           ; BSR set to: 0
  9193                           ;tff.c: 689: if (chk_wp && (stat & 0x04))
  9194                           
  9195                           ; BSR set to: 0
  9196  000F48  5195               	movf	auto_mount@chk_wp& (0+255),w,b
  9197  000F4A  A4D8               	btfss	status,2,c
  9198                           
  9199                           ; BSR set to: 0
  9200  000F4C  A5B4               	btfss	auto_mount@stat& (0+255),2,b
  9201  000F4E  D002               	goto	l1060
  9202                           
  9203                           ; BSR set to: 0
  9204                           ;tff.c: 690: return FR_WRITE_PROTECTED;
  9205  000F50  0E09               	movlw	9
  9206                           
  9207                           ; BSR set to: 0
  9208  000F52  0012               	return	
  9209  000F54                     l1060:
  9210                           
  9211                           ; BSR set to: 0
  9212                           ;tff.c: 694: fmt = check_fs(bootsect = 0);
  9213                           
  9214                           ; BSR set to: 0
  9215  000F54  0E00               	movlw	0
  9216  000F56  6FA9               	movwf	auto_mount@bootsect& (0+255),b
  9217  000F58  0E00               	movlw	0
  9218  000F5A  6FAA               	movwf	(auto_mount@bootsect+1)& (0+255),b
  9219  000F5C  0E00               	movlw	0
  9220  000F5E  6FAB               	movwf	(auto_mount@bootsect+2)& (0+255),b
  9221  000F60  0E00               	movlw	0
  9222  000F62  6FAC               	movwf	(auto_mount@bootsect+3)& (0+255),b
  9223  000F64  C0A9  F08B         	movff	auto_mount@bootsect,check_fs@sect
  9224  000F68  C0AA  F08C         	movff	auto_mount@bootsect+1,check_fs@sect+1
  9225  000F6C  C0AB  F08D         	movff	auto_mount@bootsect+2,check_fs@sect+2
  9226  000F70  C0AC  F08E         	movff	auto_mount@bootsect+3,check_fs@sect+3
  9227  000F74  ECC6  F022         	call	_check_fs	;wreg free
  9228  000F78  0100               	movlb	0	; () banked
  9229  000F7A  6FB3               	movwf	auto_mount@fmt& (0+255),b
  9230                           
  9231                           ; BSR set to: 0
  9232                           ;tff.c: 696: if (fmt == 1) {
  9233  000F7C  05B3               	decf	auto_mount@fmt& (0+255),w,b
  9234  000F7E  A4D8               	btfss	status,2,c
  9235  000F80  D023               	goto	l1062
  9236                           
  9237                           ; BSR set to: 0
  9238                           ;tff.c: 698: if (fs->win[446+4]) {
  9239  000F82  EE21 F0E2          	lfsr	2,482
  9240  000F86  51B9               	movf	auto_mount@fs& (0+255),w,b
  9241  000F88  26D9               	addwf	fsr2l,f,c
  9242  000F8A  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
  9243  000F8C  22DA               	addwfc	fsr2h,f,c
  9244  000F8E  50DF               	movf	indf2,w,c
  9245  000F90  B4D8               	btfsc	status,2,c
  9246  000F92  D01A               	goto	l1062
  9247                           
  9248                           ; BSR set to: 0
  9249                           ;tff.c: 699: bootsect = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[446+8]));
  9250  000F94  EE21 F0E6          	lfsr	2,486
  9251  000F98  51B9               	movf	auto_mount@fs& (0+255),w,b
  9252  000F9A  26D9               	addwf	fsr2l,f,c
  9253  000F9C  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
  9254  000F9E  22DA               	addwfc	fsr2h,f,c
  9255  000FA0  CFDE F0A9          	movff	postinc2,auto_mount@bootsect
  9256  000FA4  CFDE F0AA          	movff	postinc2,auto_mount@bootsect+1
  9257  000FA8  CFDE F0AB          	movff	postinc2,auto_mount@bootsect+2
  9258  000FAC  CFDE F0AC          	movff	postinc2,auto_mount@bootsect+3
  9259                           
  9260                           ; BSR set to: 0
  9261                           ;tff.c: 700: fmt = check_fs(bootsect);
  9262  000FB0  C0A9  F08B         	movff	auto_mount@bootsect,check_fs@sect
  9263  000FB4  C0AA  F08C         	movff	auto_mount@bootsect+1,check_fs@sect+1
  9264  000FB8  C0AB  F08D         	movff	auto_mount@bootsect+2,check_fs@sect+2
  9265  000FBC  C0AC  F08E         	movff	auto_mount@bootsect+3,check_fs@sect+3
  9266  000FC0  ECC6  F022         	call	_check_fs	;wreg free
  9267  000FC4  0100               	movlb	0	; () banked
  9268  000FC6  6FB3               	movwf	auto_mount@fmt& (0+255),b
  9269  000FC8                     l1062:
  9270                           
  9271                           ; BSR set to: 0
  9272                           ;tff.c: 701: }
  9273                           ;tff.c: 702: }
  9274                           ;tff.c: 703: if (fmt || (WORD)(*(WORD*)(BYTE*)(&fs->win[11])) != 512U)
  9275                           
  9276                           ; BSR set to: 0
  9277                           
  9278                           ; BSR set to: 0
  9279  000FC8  51B3               	movf	auto_mount@fmt& (0+255),w,b
  9280  000FCA  A4D8               	btfss	status,2,c
  9281  000FCC  D00C               	goto	u12510
  9282                           
  9283                           ; BSR set to: 0
  9284  000FCE  EE20 F02B          	lfsr	2,43
  9285  000FD2  51B9               	movf	auto_mount@fs& (0+255),w,b
  9286  000FD4  26D9               	addwf	fsr2l,f,c
  9287  000FD6  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
  9288  000FD8  22DA               	addwfc	fsr2h,f,c
  9289  000FDA  50DE               	movf	postinc2,w,c
  9290  000FDC  E104               	bnz	l9999
  9291  000FDE  0E02               	movlw	2
  9292  000FE0  18DE               	xorwf	postinc2,w,c
  9293  000FE2  B4D8               	btfsc	status,2,c
  9294  000FE4  D002               	goto	l1063
  9295  000FE6                     u12510:
  9296  000FE6                     l9999:
  9297                           
  9298                           ; BSR set to: 0
  9299                           ;tff.c: 704: return FR_NO_FILESYSTEM;
  9300  000FE6  0E0B               	movlw	11
  9301                           
  9302                           ; BSR set to: 0
  9303  000FE8  0012               	return	
  9304  000FEA                     l1063:
  9305                           
  9306                           ; BSR set to: 0
  9307                           ;tff.c: 707: fatsize = (WORD)(*(WORD*)(BYTE*)(&fs->win[22]));
  9308                           
  9309                           ; BSR set to: 0
  9310  000FEA  EE20 F036          	lfsr	2,54
  9311  000FEE  51B9               	movf	auto_mount@fs& (0+255),w,b
  9312  000FF0  26D9               	addwf	fsr2l,f,c
  9313  000FF2  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
  9314  000FF4  22DA               	addwfc	fsr2h,f,c
  9315  000FF6  CFDE F096          	movff	postinc2,??_auto_mount
  9316  000FFA  CFDD F097          	movff	postdec2,??_auto_mount+1
  9317  000FFE  C096  F0B5         	movff	??_auto_mount,auto_mount@fatsize
  9318  001002  C097  F0B6         	movff	??_auto_mount+1,auto_mount@fatsize+1
  9319  001006  6BB7               	clrf	(auto_mount@fatsize+2)& (0+255),b
  9320  001008  6BB8               	clrf	(auto_mount@fatsize+3)& (0+255),b
  9321                           
  9322                           ; BSR set to: 0
  9323                           ;tff.c: 708: if (!fatsize) fatsize = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[36]));
  9324  00100A  51B5               	movf	auto_mount@fatsize& (0+255),w,b
  9325  00100C  11B6               	iorwf	(auto_mount@fatsize+1)& (0+255),w,b
  9326  00100E  11B7               	iorwf	(auto_mount@fatsize+2)& (0+255),w,b
  9327  001010  11B8               	iorwf	(auto_mount@fatsize+3)& (0+255),w,b
  9328  001012  A4D8               	btfss	status,2,c
  9329  001014  D00E               	goto	l1066
  9330                           
  9331                           ; BSR set to: 0
  9332  001016  EE20 F044          	lfsr	2,68
  9333  00101A  51B9               	movf	auto_mount@fs& (0+255),w,b
  9334  00101C  26D9               	addwf	fsr2l,f,c
  9335  00101E  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
  9336  001020  22DA               	addwfc	fsr2h,f,c
  9337  001022  CFDE F0B5          	movff	postinc2,auto_mount@fatsize
  9338  001026  CFDE F0B6          	movff	postinc2,auto_mount@fatsize+1
  9339  00102A  CFDE F0B7          	movff	postinc2,auto_mount@fatsize+2
  9340  00102E  CFDE F0B8          	movff	postinc2,auto_mount@fatsize+3
  9341  001032                     l1066:
  9342                           
  9343                           ; BSR set to: 0
  9344                           ;tff.c: 709: fs->sects_fat = (CLUST)fatsize;
  9345  001032  EE20 F014          	lfsr	2,20
  9346  001036  51B9               	movf	auto_mount@fs& (0+255),w,b
  9347  001038  26D9               	addwf	fsr2l,f,c
  9348  00103A  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
  9349  00103C  22DA               	addwfc	fsr2h,f,c
  9350  00103E  C0B5  FFDE         	movff	auto_mount@fatsize,postinc2
  9351  001042  C0B6  FFDD         	movff	auto_mount@fatsize+1,postdec2
  9352                           
  9353                           ; BSR set to: 0
  9354                           ;tff.c: 710: fs->n_fats = fs->win[16];
  9355  001046  EE20 F030          	lfsr	2,48
  9356  00104A  51B9               	movf	auto_mount@fs& (0+255),w,b
  9357  00104C  26D9               	addwf	fsr2l,f,c
  9358  00104E  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
  9359  001050  22DA               	addwfc	fsr2h,f,c
  9360  001052  EE10 F01E          	lfsr	1,30
  9361  001056  51B9               	movf	auto_mount@fs& (0+255),w,b
  9362  001058  26E1               	addwf	fsr1l,f,c
  9363  00105A  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
  9364  00105C  22E2               	addwfc	fsr1h,f,c
  9365  00105E  CFDF FFE7          	movff	indf2,indf1
  9366                           
  9367                           ; BSR set to: 0
  9368                           ;tff.c: 711: fatsize *= fs->n_fats;
  9369  001062  C0B5  F060         	movff	auto_mount@fatsize,___lmul@multiplier
  9370  001066  C0B6  F061         	movff	auto_mount@fatsize+1,___lmul@multiplier+1
  9371  00106A  C0B7  F062         	movff	auto_mount@fatsize+2,___lmul@multiplier+2
  9372  00106E  C0B8  F063         	movff	auto_mount@fatsize+3,___lmul@multiplier+3
  9373  001072  EE20 F01E          	lfsr	2,30
  9374  001076  51B9               	movf	auto_mount@fs& (0+255),w,b
  9375  001078  26D9               	addwf	fsr2l,f,c
  9376  00107A  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
  9377  00107C  22DA               	addwfc	fsr2h,f,c
  9378  00107E  50DF               	movf	indf2,w,c
  9379  001080  6F96               	movwf	??_auto_mount& (0+255),b
  9380  001082  5196               	movf	??_auto_mount& (0+255),w,b
  9381  001084  6F64               	movwf	___lmul@multiplicand& (0+255),b
  9382  001086  6B65               	clrf	(___lmul@multiplicand+1)& (0+255),b
  9383  001088  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
  9384  00108A  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
  9385  00108C  EC81  F025         	call	___lmul	;wreg free
  9386  001090  C060  F0B5         	movff	?___lmul,auto_mount@fatsize
  9387  001094  C061  F0B6         	movff	?___lmul+1,auto_mount@fatsize+1
  9388  001098  C062  F0B7         	movff	?___lmul+2,auto_mount@fatsize+2
  9389  00109C  C063  F0B8         	movff	?___lmul+3,auto_mount@fatsize+3
  9390                           
  9391                           ;tff.c: 712: fs->fatbase = bootsect + (WORD)(*(WORD*)(BYTE*)(&fs->win[14]));
  9392  0010A0  0100               	movlb	0	; () banked
  9393  0010A2  EE20 F02E          	lfsr	2,46
  9394  0010A6  51B9               	movf	auto_mount@fs& (0+255),w,b
  9395  0010A8  26D9               	addwf	fsr2l,f,c
  9396  0010AA  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
  9397  0010AC  22DA               	addwfc	fsr2h,f,c
  9398  0010AE  CFDE F096          	movff	postinc2,??_auto_mount
  9399  0010B2  CFDD F097          	movff	postdec2,??_auto_mount+1
  9400  0010B6  5196               	movf	??_auto_mount& (0+255),w,b
  9401  0010B8  25A9               	addwf	auto_mount@bootsect& (0+255),w,b
  9402  0010BA  6F98               	movwf	(??_auto_mount+2)& (0+255),b
  9403  0010BC  5197               	movf	(??_auto_mount+1)& (0+255),w,b
  9404  0010BE  21AA               	addwfc	(auto_mount@bootsect+1)& (0+255),w,b
  9405  0010C0  6F99               	movwf	(??_auto_mount+3)& (0+255),b
  9406  0010C2  0E00               	movlw	0
  9407  0010C4  21AB               	addwfc	(auto_mount@bootsect+2)& (0+255),w,b
  9408  0010C6  6F9A               	movwf	(??_auto_mount+4)& (0+255),b
  9409  0010C8  0E00               	movlw	0
  9410  0010CA  21AC               	addwfc	(auto_mount@bootsect+3)& (0+255),w,b
  9411  0010CC  6F9B               	movwf	(??_auto_mount+5)& (0+255),b
  9412  0010CE  EE20 F008          	lfsr	2,8
  9413  0010D2  51B9               	movf	auto_mount@fs& (0+255),w,b
  9414  0010D4  26D9               	addwf	fsr2l,f,c
  9415  0010D6  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
  9416  0010D8  22DA               	addwfc	fsr2h,f,c
  9417  0010DA  C098  FFDE         	movff	??_auto_mount+2,postinc2
  9418  0010DE  C099  FFDE         	movff	??_auto_mount+3,postinc2
  9419  0010E2  C09A  FFDE         	movff	??_auto_mount+4,postinc2
  9420  0010E6  C09B  FFDE         	movff	??_auto_mount+5,postinc2
  9421                           
  9422                           ; BSR set to: 0
  9423                           ;tff.c: 713: fs->csize = fs->win[13];
  9424  0010EA  EE20 F02D          	lfsr	2,45
  9425  0010EE  51B9               	movf	auto_mount@fs& (0+255),w,b
  9426  0010F0  26D9               	addwf	fsr2l,f,c
  9427  0010F2  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
  9428  0010F4  22DA               	addwfc	fsr2h,f,c
  9429  0010F6  EE10 F01D          	lfsr	1,29
  9430  0010FA  51B9               	movf	auto_mount@fs& (0+255),w,b
  9431  0010FC  26E1               	addwf	fsr1l,f,c
  9432  0010FE  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
  9433  001100  22E2               	addwfc	fsr1h,f,c
  9434  001102  CFDF FFE7          	movff	indf2,indf1
  9435                           
  9436                           ; BSR set to: 0
  9437                           ;tff.c: 714: fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(&fs->win[17]));
  9438  001106  EE20 F031          	lfsr	2,49
  9439  00110A  51B9               	movf	auto_mount@fs& (0+255),w,b
  9440  00110C  26D9               	addwf	fsr2l,f,c
  9441  00110E  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
  9442  001110  22DA               	addwfc	fsr2h,f,c
  9443  001112  EE10 F002          	lfsr	1,2
  9444  001116  51B9               	movf	auto_mount@fs& (0+255),w,b
  9445  001118  26E1               	addwf	fsr1l,f,c
  9446  00111A  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
  9447  00111C  22E2               	addwfc	fsr1h,f,c
  9448  00111E  CFDE FFE6          	movff	postinc2,postinc1
  9449  001122  CFDD FFE5          	movff	postdec2,postdec1
  9450                           
  9451                           ; BSR set to: 0
  9452                           ;tff.c: 715: totalsect = (WORD)(*(WORD*)(BYTE*)(&fs->win[19]));
  9453  001126  EE20 F033          	lfsr	2,51
  9454  00112A  51B9               	movf	auto_mount@fs& (0+255),w,b
  9455  00112C  26D9               	addwf	fsr2l,f,c
  9456  00112E  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
  9457  001130  22DA               	addwfc	fsr2h,f,c
  9458  001132  CFDE F096          	movff	postinc2,??_auto_mount
  9459  001136  CFDD F097          	movff	postdec2,??_auto_mount+1
  9460  00113A  C096  F0AD         	movff	??_auto_mount,auto_mount@totalsect
  9461  00113E  C097  F0AE         	movff	??_auto_mount+1,auto_mount@totalsect+1
  9462  001142  6BAF               	clrf	(auto_mount@totalsect+2)& (0+255),b
  9463  001144  6BB0               	clrf	(auto_mount@totalsect+3)& (0+255),b
  9464                           
  9465                           ; BSR set to: 0
  9466                           ;tff.c: 716: if (!totalsect) totalsect = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[32]));
  9467  001146  51AD               	movf	auto_mount@totalsect& (0+255),w,b
  9468  001148  11AE               	iorwf	(auto_mount@totalsect+1)& (0+255),w,b
  9469  00114A  11AF               	iorwf	(auto_mount@totalsect+2)& (0+255),w,b
  9470  00114C  11B0               	iorwf	(auto_mount@totalsect+3)& (0+255),w,b
  9471  00114E  A4D8               	btfss	status,2,c
  9472  001150  D00E               	goto	l1067
  9473                           
  9474                           ; BSR set to: 0
  9475  001152  EE20 F040          	lfsr	2,64
  9476  001156  51B9               	movf	auto_mount@fs& (0+255),w,b
  9477  001158  26D9               	addwf	fsr2l,f,c
  9478  00115A  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
  9479  00115C  22DA               	addwfc	fsr2h,f,c
  9480  00115E  CFDE F0AD          	movff	postinc2,auto_mount@totalsect
  9481  001162  CFDE F0AE          	movff	postinc2,auto_mount@totalsect+1
  9482  001166  CFDE F0AF          	movff	postinc2,auto_mount@totalsect+2
  9483  00116A  CFDE F0B0          	movff	postinc2,auto_mount@totalsect+3
  9484  00116E                     l1067:
  9485                           
  9486                           ; BSR set to: 0
  9487                           ;tff.c: 717: fs->max_clust = maxclust = (totalsect
  9488                           ;tff.c: 718: - (WORD)(*(WORD*)(BYTE*)(&fs->win[14])) - fatsize - fs->n_rootdir / 16
  9489                           ;tff.c: 719: ) / fs->csize + 2;
  9490                           
  9491                           ; BSR set to: 0
  9492  00116E  EE20 F002          	lfsr	2,2
  9493  001172  51B9               	movf	auto_mount@fs& (0+255),w,b
  9494  001174  26D9               	addwf	fsr2l,f,c
  9495  001176  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
  9496  001178  22DA               	addwfc	fsr2h,f,c
  9497  00117A  CFDE F096          	movff	postinc2,??_auto_mount
  9498  00117E  CFDD F097          	movff	postdec2,??_auto_mount+1
  9499  001182  0E04               	movlw	4
  9500  001184  6F98               	movwf	(??_auto_mount+2)& (0+255),b
  9501  001186                     u12545:
  9502  001186  90D8               	bcf	status,0,c
  9503  001188  3397               	rrcf	(??_auto_mount+1)& (0+255),f,b
  9504  00118A  3396               	rrcf	??_auto_mount& (0+255),f,b
  9505  00118C  2F98               	decfsz	(??_auto_mount+2)& (0+255),f,b
  9506  00118E  D7FB               	goto	u12545
  9507  001190  EE20 F02E          	lfsr	2,46
  9508  001194  51B9               	movf	auto_mount@fs& (0+255),w,b
  9509  001196  26D9               	addwf	fsr2l,f,c
  9510  001198  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
  9511  00119A  22DA               	addwfc	fsr2h,f,c
  9512  00119C  CFDE F099          	movff	postinc2,??_auto_mount+3
  9513  0011A0  CFDD F09A          	movff	postdec2,??_auto_mount+4
  9514  0011A4  5199               	movf	(??_auto_mount+3)& (0+255),w,b
  9515  0011A6  2596               	addwf	??_auto_mount& (0+255),w,b
  9516  0011A8  6F9B               	movwf	(??_auto_mount+5)& (0+255),b
  9517  0011AA  519A               	movf	(??_auto_mount+4)& (0+255),w,b
  9518  0011AC  2197               	addwfc	(??_auto_mount+1)& (0+255),w,b
  9519  0011AE  6F9C               	movwf	(??_auto_mount+6)& (0+255),b
  9520  0011B0  6B9D               	clrf	(??_auto_mount+7)& (0+255),b
  9521  0011B2  B0D8               	btfsc	status,0,c
  9522  0011B4  2B9D               	incf	(??_auto_mount+7)& (0+255),f,b
  9523  0011B6  6B9E               	clrf	(??_auto_mount+8)& (0+255),b
  9524  0011B8  51B5               	movf	auto_mount@fatsize& (0+255),w,b
  9525  0011BA  259B               	addwf	(??_auto_mount+5)& (0+255),w,b
  9526  0011BC  6F9F               	movwf	(??_auto_mount+9)& (0+255),b
  9527  0011BE  51B6               	movf	(auto_mount@fatsize+1)& (0+255),w,b
  9528  0011C0  219C               	addwfc	(??_auto_mount+6)& (0+255),w,b
  9529  0011C2  6FA0               	movwf	(??_auto_mount+10)& (0+255),b
  9530  0011C4  51B7               	movf	(auto_mount@fatsize+2)& (0+255),w,b
  9531  0011C6  219D               	addwfc	(??_auto_mount+7)& (0+255),w,b
  9532  0011C8  6FA1               	movwf	(??_auto_mount+11)& (0+255),b
  9533  0011CA  51B8               	movf	(auto_mount@fatsize+3)& (0+255),w,b
  9534  0011CC  219E               	addwfc	(??_auto_mount+8)& (0+255),w,b
  9535  0011CE  6FA2               	movwf	(??_auto_mount+12)& (0+255),b
  9536  0011D0  1F9F               	comf	(??_auto_mount+9)& (0+255),f,b
  9537  0011D2  1FA0               	comf	(??_auto_mount+10)& (0+255),f,b
  9538  0011D4  1FA1               	comf	(??_auto_mount+11)& (0+255),f,b
  9539  0011D6  1FA2               	comf	(??_auto_mount+12)& (0+255),f,b
  9540  0011D8  2B9F               	incf	(??_auto_mount+9)& (0+255),f,b
  9541  0011DA  0E00               	movlw	0
  9542  0011DC  23A0               	addwfc	(??_auto_mount+10)& (0+255),f,b
  9543  0011DE  23A1               	addwfc	(??_auto_mount+11)& (0+255),f,b
  9544  0011E0  23A2               	addwfc	(??_auto_mount+12)& (0+255),f,b
  9545  0011E2  51AD               	movf	auto_mount@totalsect& (0+255),w,b
  9546  0011E4  259F               	addwf	(??_auto_mount+9)& (0+255),w,b
  9547  0011E6  6F60               	movwf	___lldiv@dividend& (0+255),b
  9548  0011E8  51AE               	movf	(auto_mount@totalsect+1)& (0+255),w,b
  9549  0011EA  21A0               	addwfc	(??_auto_mount+10)& (0+255),w,b
  9550  0011EC  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
  9551  0011EE  51AF               	movf	(auto_mount@totalsect+2)& (0+255),w,b
  9552  0011F0  21A1               	addwfc	(??_auto_mount+11)& (0+255),w,b
  9553  0011F2  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
  9554  0011F4  51B0               	movf	(auto_mount@totalsect+3)& (0+255),w,b
  9555  0011F6  21A2               	addwfc	(??_auto_mount+12)& (0+255),w,b
  9556  0011F8  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
  9557  0011FA  EE20 F01D          	lfsr	2,29
  9558  0011FE  51B9               	movf	auto_mount@fs& (0+255),w,b
  9559  001200  26D9               	addwf	fsr2l,f,c
  9560  001202  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
  9561  001204  22DA               	addwfc	fsr2h,f,c
  9562  001206  50DF               	movf	indf2,w,c
  9563  001208  6FA3               	movwf	(??_auto_mount+13)& (0+255),b
  9564  00120A  51A3               	movf	(??_auto_mount+13)& (0+255),w,b
  9565  00120C  6F64               	movwf	___lldiv@divisor& (0+255),b
  9566  00120E  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
  9567  001210  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
  9568  001212  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
  9569  001214  EC93  F023         	call	___lldiv	;wreg free
  9570  001218  0E02               	movlw	2
  9571  00121A  0100               	movlb	0	; () banked
  9572  00121C  2560               	addwf	?___lldiv& (0+255),w,b
  9573  00121E  6FA5               	movwf	auto_mount@maxclust& (0+255),b
  9574  001220  0E00               	movlw	0
  9575  001222  2161               	addwfc	(?___lldiv+1)& (0+255),w,b
  9576  001224  6FA6               	movwf	(auto_mount@maxclust+1)& (0+255),b
  9577  001226  0E00               	movlw	0
  9578  001228  2162               	addwfc	(?___lldiv+2)& (0+255),w,b
  9579  00122A  6FA7               	movwf	(auto_mount@maxclust+2)& (0+255),b
  9580  00122C  0E00               	movlw	0
  9581  00122E  2163               	addwfc	(?___lldiv+3)& (0+255),w,b
  9582  001230  6FA8               	movwf	(auto_mount@maxclust+3)& (0+255),b
  9583  001232  EE20 F016          	lfsr	2,22
  9584  001236  51B9               	movf	auto_mount@fs& (0+255),w,b
  9585  001238  26D9               	addwf	fsr2l,f,c
  9586  00123A  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
  9587  00123C  22DA               	addwfc	fsr2h,f,c
  9588  00123E  C0A5  FFDE         	movff	auto_mount@maxclust,postinc2
  9589  001242  C0A6  FFDD         	movff	auto_mount@maxclust+1,postdec2
  9590                           
  9591                           ; BSR set to: 0
  9592                           ;tff.c: 721: fmt = 1;
  9593  001246  0E01               	movlw	1
  9594  001248  6FB3               	movwf	auto_mount@fmt& (0+255),b
  9595                           
  9596                           ; BSR set to: 0
  9597                           ;tff.c: 722: if (maxclust >= 0xFF7) fmt = 2;
  9598  00124A  51A8               	movf	(auto_mount@maxclust+3)& (0+255),w,b
  9599  00124C  11A7               	iorwf	(auto_mount@maxclust+2)& (0+255),w,b
  9600  00124E  E106               	bnz	u12550
  9601  001250  0EF7               	movlw	247
  9602  001252  5DA5               	subwf	auto_mount@maxclust& (0+255),w,b
  9603  001254  0E0F               	movlw	15
  9604  001256  59A6               	subwfb	(auto_mount@maxclust+1)& (0+255),w,b
  9605  001258  A0D8               	btfss	status,0,c
  9606  00125A  D002               	goto	l1068
  9607  00125C                     u12550:
  9608                           
  9609                           ; BSR set to: 0
  9610  00125C  0E02               	movlw	2
  9611  00125E  6FB3               	movwf	auto_mount@fmt& (0+255),b
  9612  001260                     l1068:
  9613                           
  9614                           ; BSR set to: 0
  9615                           ;tff.c: 723: if (maxclust >= 0xFFF7)
  9616                           
  9617                           ; BSR set to: 0
  9618  001260  51A8               	movf	(auto_mount@maxclust+3)& (0+255),w,b
  9619  001262  11A7               	iorwf	(auto_mount@maxclust+2)& (0+255),w,b
  9620  001264  E106               	bnz	u12560
  9621  001266  0EF7               	movlw	247
  9622  001268  5DA5               	subwf	auto_mount@maxclust& (0+255),w,b
  9623  00126A  0EFF               	movlw	255
  9624  00126C  59A6               	subwfb	(auto_mount@maxclust+1)& (0+255),w,b
  9625  00126E  A0D8               	btfss	status,0,c
  9626  001270  D002               	goto	l1069
  9627  001272                     u12560:
  9628                           
  9629                           ; BSR set to: 0
  9630                           ;tff.c: 725: return FR_NO_FILESYSTEM;
  9631  001272  0E0B               	movlw	11
  9632                           
  9633                           ; BSR set to: 0
  9634  001274  0012               	return	
  9635  001276                     l1069:
  9636                           
  9637                           ; BSR set to: 0
  9638                           ;tff.c: 732: fs->dirbase = fs->fatbase + fatsize;
  9639                           
  9640                           ; BSR set to: 0
  9641  001276  EE20 F008          	lfsr	2,8
  9642  00127A  51B9               	movf	auto_mount@fs& (0+255),w,b
  9643  00127C  26D9               	addwf	fsr2l,f,c
  9644  00127E  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
  9645  001280  22DA               	addwfc	fsr2h,f,c
  9646  001282  CFDE F096          	movff	postinc2,??_auto_mount
  9647  001286  CFDE F097          	movff	postinc2,??_auto_mount+1
  9648  00128A  CFDE F098          	movff	postinc2,??_auto_mount+2
  9649  00128E  CFDE F099          	movff	postinc2,??_auto_mount+3
  9650  001292  51B5               	movf	auto_mount@fatsize& (0+255),w,b
  9651  001294  2596               	addwf	??_auto_mount& (0+255),w,b
  9652  001296  6F9A               	movwf	(??_auto_mount+4)& (0+255),b
  9653  001298  51B6               	movf	(auto_mount@fatsize+1)& (0+255),w,b
  9654  00129A  2197               	addwfc	(??_auto_mount+1)& (0+255),w,b
  9655  00129C  6F9B               	movwf	(??_auto_mount+5)& (0+255),b
  9656  00129E  51B7               	movf	(auto_mount@fatsize+2)& (0+255),w,b
  9657  0012A0  2198               	addwfc	(??_auto_mount+2)& (0+255),w,b
  9658  0012A2  6F9C               	movwf	(??_auto_mount+6)& (0+255),b
  9659  0012A4  51B8               	movf	(auto_mount@fatsize+3)& (0+255),w,b
  9660  0012A6  2199               	addwfc	(??_auto_mount+3)& (0+255),w,b
  9661  0012A8  6F9D               	movwf	(??_auto_mount+7)& (0+255),b
  9662  0012AA  EE20 F00C          	lfsr	2,12
  9663  0012AE  51B9               	movf	auto_mount@fs& (0+255),w,b
  9664  0012B0  26D9               	addwf	fsr2l,f,c
  9665  0012B2  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
  9666  0012B4  22DA               	addwfc	fsr2h,f,c
  9667  0012B6  C09A  FFDE         	movff	??_auto_mount+4,postinc2
  9668  0012BA  C09B  FFDE         	movff	??_auto_mount+5,postinc2
  9669  0012BE  C09C  FFDE         	movff	??_auto_mount+6,postinc2
  9670  0012C2  C09D  FFDE         	movff	??_auto_mount+7,postinc2
  9671                           
  9672                           ;tff.c: 733: fs->database = fs->fatbase + fatsize + fs->n_rootdir / 16;
  9673  0012C6  EE20 F008          	lfsr	2,8
  9674  0012CA  51B9               	movf	auto_mount@fs& (0+255),w,b
  9675  0012CC  26D9               	addwf	fsr2l,f,c
  9676  0012CE  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
  9677  0012D0  22DA               	addwfc	fsr2h,f,c
  9678  0012D2  CFDE F096          	movff	postinc2,??_auto_mount
  9679  0012D6  CFDE F097          	movff	postinc2,??_auto_mount+1
  9680  0012DA  CFDE F098          	movff	postinc2,??_auto_mount+2
  9681  0012DE  CFDE F099          	movff	postinc2,??_auto_mount+3
  9682  0012E2  EE20 F002          	lfsr	2,2
  9683  0012E6  51B9               	movf	auto_mount@fs& (0+255),w,b
  9684  0012E8  26D9               	addwf	fsr2l,f,c
  9685  0012EA  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
  9686  0012EC  22DA               	addwfc	fsr2h,f,c
  9687  0012EE  CFDE F09A          	movff	postinc2,??_auto_mount+4
  9688  0012F2  CFDD F09B          	movff	postdec2,??_auto_mount+5
  9689  0012F6  0E04               	movlw	4
  9690  0012F8  6F9C               	movwf	(??_auto_mount+6)& (0+255),b
  9691  0012FA                     u12575:
  9692  0012FA  90D8               	bcf	status,0,c
  9693  0012FC  339B               	rrcf	(??_auto_mount+5)& (0+255),f,b
  9694  0012FE  339A               	rrcf	(??_auto_mount+4)& (0+255),f,b
  9695  001300  2F9C               	decfsz	(??_auto_mount+6)& (0+255),f,b
  9696  001302  D7FB               	goto	u12575
  9697  001304  519A               	movf	(??_auto_mount+4)& (0+255),w,b
  9698  001306  2596               	addwf	??_auto_mount& (0+255),w,b
  9699  001308  6F9D               	movwf	(??_auto_mount+7)& (0+255),b
  9700  00130A  519B               	movf	(??_auto_mount+5)& (0+255),w,b
  9701  00130C  2197               	addwfc	(??_auto_mount+1)& (0+255),w,b
  9702  00130E  6F9E               	movwf	(??_auto_mount+8)& (0+255),b
  9703  001310  0E00               	movlw	0
  9704  001312  2198               	addwfc	(??_auto_mount+2)& (0+255),w,b
  9705  001314  6F9F               	movwf	(??_auto_mount+9)& (0+255),b
  9706  001316  0E00               	movlw	0
  9707  001318  2199               	addwfc	(??_auto_mount+3)& (0+255),w,b
  9708  00131A  6FA0               	movwf	(??_auto_mount+10)& (0+255),b
  9709  00131C  51B5               	movf	auto_mount@fatsize& (0+255),w,b
  9710  00131E  259D               	addwf	(??_auto_mount+7)& (0+255),w,b
  9711  001320  6FA1               	movwf	(??_auto_mount+11)& (0+255),b
  9712  001322  51B6               	movf	(auto_mount@fatsize+1)& (0+255),w,b
  9713  001324  219E               	addwfc	(??_auto_mount+8)& (0+255),w,b
  9714  001326  6FA2               	movwf	(??_auto_mount+12)& (0+255),b
  9715  001328  51B7               	movf	(auto_mount@fatsize+2)& (0+255),w,b
  9716  00132A  219F               	addwfc	(??_auto_mount+9)& (0+255),w,b
  9717  00132C  6FA3               	movwf	(??_auto_mount+13)& (0+255),b
  9718  00132E  51B8               	movf	(auto_mount@fatsize+3)& (0+255),w,b
  9719  001330  21A0               	addwfc	(??_auto_mount+10)& (0+255),w,b
  9720  001332  6FA4               	movwf	(??_auto_mount+14)& (0+255),b
  9721  001334  EE20 F010          	lfsr	2,16
  9722  001338  51B9               	movf	auto_mount@fs& (0+255),w,b
  9723  00133A  26D9               	addwf	fsr2l,f,c
  9724  00133C  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
  9725  00133E  22DA               	addwfc	fsr2h,f,c
  9726  001340  C0A1  FFDE         	movff	??_auto_mount+11,postinc2
  9727  001344  C0A2  FFDE         	movff	??_auto_mount+12,postinc2
  9728  001348  C0A3  FFDE         	movff	??_auto_mount+13,postinc2
  9729  00134C  C0A4  FFDE         	movff	??_auto_mount+14,postinc2
  9730                           
  9731                           ;tff.c: 737: fs->free_clust = (CLUST)0xFFFFFFFF;
  9732  001350  EE20 F01A          	lfsr	2,26
  9733  001354  51B9               	movf	auto_mount@fs& (0+255),w,b
  9734  001356  26D9               	addwf	fsr2l,f,c
  9735  001358  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
  9736  00135A  22DA               	addwfc	fsr2h,f,c
  9737  00135C  0EFF               	movlw	255
  9738  00135E  6EDE               	movwf	postinc2,c
  9739  001360  0EFF               	movlw	255
  9740  001362  6EDD               	movwf	postdec2,c
  9741                           
  9742                           ;tff.c: 753: fs->fs_type = fmt;
  9743  001364  EE20 F01C          	lfsr	2,28
  9744  001368  51B9               	movf	auto_mount@fs& (0+255),w,b
  9745  00136A  26D9               	addwf	fsr2l,f,c
  9746  00136C  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
  9747  00136E  22DA               	addwfc	fsr2h,f,c
  9748  001370  C0B3  FFDF         	movff	auto_mount@fmt,indf2
  9749                           
  9750                           ; BSR set to: 0
  9751                           ;tff.c: 754: fs->id = ++fsid;
  9752  001374  4BF4               	infsnz	_fsid& (0+255),f,b
  9753  001376  2BF5               	incf	(_fsid+1)& (0+255),f,b
  9754  001378  C0B9  FFD9         	movff	auto_mount@fs,fsr2l
  9755  00137C  C0BA  FFDA         	movff	auto_mount@fs+1,fsr2h
  9756  001380  C0F4  FFDE         	movff	_fsid,postinc2
  9757  001384  C0F5  FFDD         	movff	_fsid+1,postdec2
  9758                           
  9759                           ;tff.c: 755: return FR_OK;
  9760  001388  0E00               	movlw	0
  9761  00138A  0012               	return	
  9762  00138C                     __end_of_auto_mount:
  9763                           	opt stack 0
  9764                           tosu	equ	0xFFF
  9765                           tosh	equ	0xFFE
  9766                           tosl	equ	0xFFD
  9767                           pclath	equ	0xFFA
  9768                           tblptru	equ	0xFF8
  9769                           tblptrh	equ	0xFF7
  9770                           tblptrl	equ	0xFF6
  9771                           tablat	equ	0xFF5
  9772                           prodh	equ	0xFF4
  9773                           prodl	equ	0xFF3
  9774                           intcon	equ	0xFF2
  9775                           intcon2	equ	0xFF1
  9776                           intcon3	equ	0xFF0
  9777                           postinc0	equ	0xFEE
  9778                           wreg	equ	0xFE8
  9779                           indf1	equ	0xFE7
  9780                           postinc1	equ	0xFE6
  9781                           postdec1	equ	0xFE5
  9782                           fsr1h	equ	0xFE2
  9783                           fsr1l	equ	0xFE1
  9784                           indf2	equ	0xFDF
  9785                           postinc2	equ	0xFDE
  9786                           postdec2	equ	0xFDD
  9787                           plusw2	equ	0xFDB
  9788                           fsr2h	equ	0xFDA
  9789                           fsr2l	equ	0xFD9
  9790                           status	equ	0xFD8
  9791                           
  9792 ;; *************** function _memset *****************
  9793 ;; Defined at:
  9794 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
  9795 ;; Parameters:    Size  Location     Type
  9796 ;;  p1              2    0[BANK0 ] PTR void 
  9797 ;;		 -> f_opendir@fn(12), f_open@fn(12), NULL(0), fs(544), 
  9798 ;;  c               2    2[BANK0 ] int 
  9799 ;;  n               2    4[BANK0 ] unsigned int 
  9800 ;; Auto vars:     Size  Location     Type
  9801 ;;  p               2    6[BANK0 ] PTR unsigned char 
  9802 ;;		 -> f_opendir@fn(12), f_open@fn(12), NULL(0), fs(544), 
  9803 ;; Return value:  Size  Location     Type
  9804 ;;                  2    0[BANK0 ] PTR void 
  9805 ;; Registers used:
  9806 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9807 ;; Tracked objects:
  9808 ;;		On entry : 0/0
  9809 ;;		On exit  : 0/0
  9810 ;;		Unchanged: 0/0
  9811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9812 ;;      Params:         0       6       0       0       0       0       0       0       0
  9813 ;;      Locals:         0       2       0       0       0       0       0       0       0
  9814 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9815 ;;      Totals:         0       8       0       0       0       0       0       0       0
  9816 ;;Total ram usage:        8 bytes
  9817 ;; Hardware stack levels used:    1
  9818 ;; Hardware stack levels required when called:    3
  9819 ;; This function calls:
  9820 ;;		Nothing
  9821 ;; This function is called by:
  9822 ;;		_make_dirfile
  9823 ;;		_reserve_direntry
  9824 ;;		_auto_mount
  9825 ;;		_f_open
  9826 ;; This function uses a non-reentrant model
  9827 ;;
  9828                           
  9829                           	psect	text32
  9830  005048                     __ptext32:
  9831                           	opt stack 0
  9832  005048                     _memset:
  9833                           	opt stack 22
  9834                           
  9835                           ; BSR set to: 0
  9836                           ;incstack = 0
  9837  005048  C060  F066         	movff	memset@p1,memset@p
  9838  00504C  C061  F067         	movff	memset@p1+1,memset@p+1
  9839  005050  D009               	goto	l1783
  9840  005052                     l9209:
  9841  005052  C066  FFD9         	movff	memset@p,fsr2l
  9842  005056  C067  FFDA         	movff	memset@p+1,fsr2h
  9843  00505A  C062  FFDF         	movff	memset@c,indf2
  9844  00505E  0100               	movlb	0	; () banked
  9845  005060  4B66               	infsnz	memset@p& (0+255),f,b
  9846  005062  2B67               	incf	(memset@p+1)& (0+255),f,b
  9847  005064                     l1783:
  9848                           
  9849                           ; BSR set to: 0
  9850  005064  0100               	movlb	0	; () banked
  9851  005066  0764               	decf	memset@n& (0+255),f,b
  9852  005068  A0D8               	btfss	status,0,c
  9853  00506A  0765               	decf	(memset@n+1)& (0+255),f,b
  9854  00506C  2964               	incf	memset@n& (0+255),w,b
  9855  00506E  E1F1               	bnz	l9209
  9856  005070  2965               	incf	(memset@n+1)& (0+255),w,b
  9857  005072  B4D8               	btfsc	status,2,c
  9858  005074  0012               	return	
  9859  005076  D7ED               	goto	l1784
  9860  005078                     __end_of_memset:
  9861                           	opt stack 0
  9862                           tosu	equ	0xFFF
  9863                           tosh	equ	0xFFE
  9864                           tosl	equ	0xFFD
  9865                           pclath	equ	0xFFA
  9866                           tblptru	equ	0xFF8
  9867                           tblptrh	equ	0xFF7
  9868                           tblptrl	equ	0xFF6
  9869                           tablat	equ	0xFF5
  9870                           prodh	equ	0xFF4
  9871                           prodl	equ	0xFF3
  9872                           intcon	equ	0xFF2
  9873                           intcon2	equ	0xFF1
  9874                           intcon3	equ	0xFF0
  9875                           postinc0	equ	0xFEE
  9876                           wreg	equ	0xFE8
  9877                           indf1	equ	0xFE7
  9878                           postinc1	equ	0xFE6
  9879                           postdec1	equ	0xFE5
  9880                           fsr1h	equ	0xFE2
  9881                           fsr1l	equ	0xFE1
  9882                           indf2	equ	0xFDF
  9883                           postinc2	equ	0xFDE
  9884                           postdec2	equ	0xFDD
  9885                           plusw2	equ	0xFDB
  9886                           fsr2h	equ	0xFDA
  9887                           fsr2l	equ	0xFD9
  9888                           status	equ	0xFD8
  9889                           
  9890 ;; *************** function _disk_initialize *****************
  9891 ;; Defined at:
  9892 ;;		line 59 in file "bibliotecas/diskio.c"
  9893 ;; Parameters:    Size  Location     Type
  9894 ;;  pdrv            1    wreg     unsigned char 
  9895 ;; Auto vars:     Size  Location     Type
  9896 ;;  pdrv            1   32[BANK0 ] unsigned char 
  9897 ;;  result          2    0        int 
  9898 ;;  stat            1   33[BANK0 ] unsigned char 
  9899 ;; Return value:  Size  Location     Type
  9900 ;;                  1    wreg      unsigned char 
  9901 ;; Registers used:
  9902 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9903 ;; Tracked objects:
  9904 ;;		On entry : 0/0
  9905 ;;		On exit  : 0/0
  9906 ;;		Unchanged: 0/0
  9907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9908 ;;      Params:         0       0       0       0       0       0       0       0       0
  9909 ;;      Locals:         0       2       0       0       0       0       0       0       0
  9910 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9911 ;;      Totals:         0       2       0       0       0       0       0       0       0
  9912 ;;Total ram usage:        2 bytes
  9913 ;; Hardware stack levels used:    1
  9914 ;; Hardware stack levels required when called:    8
  9915 ;; This function calls:
  9916 ;;		_sdc_disk_initialize
  9917 ;; This function is called by:
  9918 ;;		_auto_mount
  9919 ;; This function uses a non-reentrant model
  9920 ;;
  9921                           
  9922                           	psect	text33
  9923  004FA2                     __ptext33:
  9924                           	opt stack 0
  9925  004FA2                     _disk_initialize:
  9926                           	opt stack 18
  9927                           
  9928                           ; BSR set to: 0
  9929                           ;incstack = 0
  9930                           ;disk_initialize@pdrv stored from wreg
  9931  004FA2  0100               	movlb	0	; () banked
  9932  004FA4  6F80               	movwf	disk_initialize@pdrv& (0+255),b
  9933                           
  9934                           ;diskio.c: 63: DSTATUS stat;
  9935                           ;diskio.c: 64: int result;
  9936                           ;diskio.c: 66: switch (pdrv) {
  9937  004FA6  D00E               	goto	l362
  9938  004FA8                     
  9939                           ;diskio.c: 68: stat = sdc_disk_initialize();
  9940  004FA8  ECAA  F00F         	call	_sdc_disk_initialize	;wreg free
  9941  004FAC  0100               	movlb	0	; () banked
  9942  004FAE  6F81               	movwf	disk_initialize@stat& (0+255),b
  9943                           
  9944                           ; BSR set to: 0
  9945                           ;diskio.c: 72: return stat;
  9946  004FB0  5181               	movf	disk_initialize@stat& (0+255),w,b
  9947                           
  9948                           ; BSR set to: 0
  9949  004FB2  0012               	return	
  9950  004FB4                     
  9951                           ; BSR set to: 0
  9952                           ;diskio.c: 75: stat = sdc_disk_initialize();
  9953                           
  9954                           ; BSR set to: 0
  9955  004FB4  ECAA  F00F         	call	_sdc_disk_initialize	;wreg free
  9956  004FB8  0100               	movlb	0	; () banked
  9957  004FBA  6F81               	movwf	disk_initialize@stat& (0+255),b
  9958                           
  9959                           ; BSR set to: 0
  9960                           ;diskio.c: 79: return stat;
  9961  004FBC  5181               	movf	disk_initialize@stat& (0+255),w,b
  9962                           
  9963                           ; BSR set to: 0
  9964  004FBE  0012               	return	
  9965  004FC0                     
  9966                           ; BSR set to: 0
  9967                           ;diskio.c: 86: return stat;
  9968                           
  9969                           ; BSR set to: 0
  9970  004FC0  5181               	movf	disk_initialize@stat& (0+255),w,b
  9971                           
  9972                           ; BSR set to: 0
  9973  004FC2  0012               	return	
  9974  004FC4                     l362:
  9975                           
  9976                           ; BSR set to: 0
  9977  004FC4  0100               	movlb	0	; () banked
  9978  004FC6  5180               	movf	disk_initialize@pdrv& (0+255),w,b
  9979                           
  9980                           ; Switch size 1, requested type "space"
  9981                           ; Number of cases is 3, Range of values is 0 to 2
  9982                           ; switch strategies available:
  9983                           ; Name         Instructions Cycles
  9984                           ; simple_byte           10     6 (average)
  9985                           ;	Chosen strategy is simple_byte
  9986  004FC8  0A00               	xorlw	0	; case 0
  9987  004FCA  B4D8               	btfsc	status,2,c
  9988  004FCC  D7ED               	goto	l363
  9989  004FCE  0A01               	xorlw	1	; case 1
  9990  004FD0  B4D8               	btfsc	status,2,c
  9991  004FD2  D7F0               	goto	l365
  9992  004FD4  0A03               	xorlw	3	; case 2
  9993  004FD6  B4D8               	btfsc	status,2,c
  9994  004FD8  D7F3               	goto	l366
  9995                           
  9996                           ; BSR set to: 0
  9997                           ;diskio.c: 88: return 0x01;
  9998                           
  9999                           ; BSR set to: 0
 10000  004FDA  0E01               	movlw	1
 10001  004FDC  0012               	return	
 10002  004FDE                     __end_of_disk_initialize:
 10003                           	opt stack 0
 10004                           tosu	equ	0xFFF
 10005                           tosh	equ	0xFFE
 10006                           tosl	equ	0xFFD
 10007                           pclath	equ	0xFFA
 10008                           tblptru	equ	0xFF8
 10009                           tblptrh	equ	0xFF7
 10010                           tblptrl	equ	0xFF6
 10011                           tablat	equ	0xFF5
 10012                           prodh	equ	0xFF4
 10013                           prodl	equ	0xFF3
 10014                           intcon	equ	0xFF2
 10015                           intcon2	equ	0xFF1
 10016                           intcon3	equ	0xFF0
 10017                           postinc0	equ	0xFEE
 10018                           wreg	equ	0xFE8
 10019                           indf1	equ	0xFE7
 10020                           postinc1	equ	0xFE6
 10021                           postdec1	equ	0xFE5
 10022                           fsr1h	equ	0xFE2
 10023                           fsr1l	equ	0xFE1
 10024                           indf2	equ	0xFDF
 10025                           postinc2	equ	0xFDE
 10026                           postdec2	equ	0xFDD
 10027                           plusw2	equ	0xFDB
 10028                           fsr2h	equ	0xFDA
 10029                           fsr2l	equ	0xFD9
 10030                           status	equ	0xFD8
 10031                           
 10032 ;; *************** function _sdc_disk_initialize *****************
 10033 ;; Defined at:
 10034 ;;		line 275 in file "bibliotecas/diskio.c"
 10035 ;; Parameters:    Size  Location     Type
 10036 ;;		None
 10037 ;; Auto vars:     Size  Location     Type
 10038 ;;  count2          2   29[BANK0 ] int 
 10039 ;;  crc_number      2   25[BANK0 ] int 
 10040 ;;  count1          2   23[BANK0 ] int 
 10041 ;;  i               2   20[BANK0 ] int 
 10042 ;;  buff            1   31[BANK0 ] unsigned char 
 10043 ;;  ocr             1   28[BANK0 ] unsigned char 
 10044 ;;  buff_i          1   27[BANK0 ] unsigned char 
 10045 ;;  stat            1   22[BANK0 ] unsigned char 
 10046 ;; Return value:  Size  Location     Type
 10047 ;;                  1    wreg      unsigned char 
 10048 ;; Registers used:
 10049 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10050 ;; Tracked objects:
 10051 ;;		On entry : 0/0
 10052 ;;		On exit  : 0/0
 10053 ;;		Unchanged: 0/0
 10054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10055 ;;      Params:         0       0       0       0       0       0       0       0       0
 10056 ;;      Locals:         0      12       0       0       0       0       0       0       0
 10057 ;;      Temps:          0       1       0       0       0       0       0       0       0
 10058 ;;      Totals:         0      13       0       0       0       0       0       0       0
 10059 ;;Total ram usage:       13 bytes
 10060 ;; Hardware stack levels used:    1
 10061 ;; Hardware stack levels required when called:    7
 10062 ;; This function calls:
 10063 ;;		_command
 10064 ;;		_dummy_clocks
 10065 ;;		_escreve_frase_ram_lcd
 10066 ;;		_posicao_cursor_lcd
 10067 ;;		_proceed
 10068 ;;		_response
 10069 ;;		_sdc_reset
 10070 ;; This function is called by:
 10071 ;;		_disk_initialize
 10072 ;; This function uses a non-reentrant model
 10073 ;;
 10074                           
 10075                           	psect	text34
 10076  001F54                     __ptext34:
 10077                           	opt stack 0
 10078  001F54                     _sdc_disk_initialize:
 10079                           	opt stack 18
 10080                           
 10081                           ;diskio.c: 277: BYTE ocr;
 10082                           ;diskio.c: 278: DSTATUS stat;
 10083                           ;diskio.c: 279: int i = 0, count1 = 0, count2 = 0;
 10084                           
 10085                           ; BSR set to: 0
 10086                           ;incstack = 0
 10087  001F54  0E00               	movlw	0
 10088  001F56  0100               	movlb	0	; () banked
 10089  001F58  6F75               	movwf	(sdc_disk_initialize@i+1)& (0+255),b
 10090  001F5A  0E00               	movlw	0
 10091  001F5C  6F74               	movwf	sdc_disk_initialize@i& (0+255),b
 10092  001F5E  0E00               	movlw	0
 10093  001F60  6F78               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 10094  001F62  0E00               	movlw	0
 10095  001F64  6F77               	movwf	sdc_disk_initialize@count1& (0+255),b
 10096  001F66  0E00               	movlw	0
 10097  001F68  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 10098  001F6A  0E00               	movlw	0
 10099  001F6C  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 10100                           
 10101                           ;diskio.c: 280: BYTE buff = 0;
 10102  001F6E  0E00               	movlw	0
 10103  001F70  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 10104                           
 10105                           ; BSR set to: 0
 10106                           ;diskio.c: 281: BYTE buff_i;
 10107                           ;diskio.c: 282: int crc_number;
 10108                           ;diskio.c: 283: _delay((unsigned long)((1)*(48000000/4000.0)));
 10109  001F72  0E10               	movlw	16
 10110  001F74  0100               	movlb	0	; () banked
 10111  001F76  6F73               	movwf	??_sdc_disk_initialize& (0+255),b
 10112  001F78  0E94               	movlw	148
 10113  001F7A                     u14257:
 10114  001F7A  2EE8               	decfsz	wreg,f,c
 10115  001F7C  D7FE               	bra	u14257
 10116  001F7E  2F73               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 10117  001F80  D7FC               	bra	u14257
 10118  001F82  F000               	nop	
 10119                           
 10120                           ;diskio.c: 284: dummy_clocks(100);
 10121  001F84  0E64               	movlw	100
 10122  001F86  EC0B  F027         	call	_dummy_clocks
 10123                           
 10124                           ;diskio.c: 287: sdc_reset();
 10125  001F8A  EC41  F021         	call	_sdc_reset	;wreg free
 10126                           
 10127                           ;diskio.c: 288: command(0X48, 0x000001AA, 0x87);
 10128  001F8E  0EAA               	movlw	170
 10129  001F90  0100               	movlb	0	; () banked
 10130  001F92  6F65               	movwf	command@arg& (0+255),b
 10131  001F94  0E01               	movlw	1
 10132  001F96  6F66               	movwf	(command@arg+1)& (0+255),b
 10133  001F98  0E00               	movlw	0
 10134  001F9A  6F67               	movwf	(command@arg+2)& (0+255),b
 10135  001F9C  0E00               	movlw	0
 10136  001F9E  6F68               	movwf	(command@arg+3)& (0+255),b
 10137  001FA0  0E87               	movlw	135
 10138  001FA2  6F69               	movwf	command@CRC& (0+255),b
 10139  001FA4  0E48               	movlw	72
 10140  001FA6  ECBC  F024         	call	_command
 10141                           
 10142                           ;diskio.c: 289: proceed();
 10143  001FAA  EC4F  F029         	call	_proceed	;wreg free
 10144  001FAE                     
 10145                           ;diskio.c: 291: buff_i = response();
 10146  001FAE  EC41  F029         	call	_response	;wreg free
 10147  001FB2  0100               	movlb	0	; () banked
 10148  001FB4  6F7B               	movwf	sdc_disk_initialize@buff_i& (0+255),b
 10149                           
 10150                           ; BSR set to: 0
 10151                           ;diskio.c: 292: if(buff_i == 1)
 10152  001FB6  057B               	decf	sdc_disk_initialize@buff_i& (0+255),w,b
 10153  001FB8  A4D8               	btfss	status,2,c
 10154  001FBA  D004               	goto	l405
 10155                           
 10156                           ; BSR set to: 0
 10157                           ;diskio.c: 293: {
 10158                           ;diskio.c: 294: crc_number = buff_i<<8;
 10159  001FBC  517B               	movf	sdc_disk_initialize@buff_i& (0+255),w,b
 10160  001FBE  6F7A               	movwf	(sdc_disk_initialize@crc_number+1)& (0+255),b
 10161  001FC0  6B79               	clrf	sdc_disk_initialize@crc_number& (0+255),b
 10162                           
 10163                           ;diskio.c: 295: }
 10164  001FC2  D006               	goto	l407
 10165  001FC4                     l405:
 10166                           
 10167                           ; BSR set to: 0
 10168                           ;diskio.c: 296: else if(buff_i==0xAA)
 10169                           
 10170                           ; BSR set to: 0
 10171  001FC4  0EAA               	movlw	170
 10172  001FC6  197B               	xorwf	sdc_disk_initialize@buff_i& (0+255),w,b
 10173  001FC8  A4D8               	btfss	status,2,c
 10174  001FCA  D002               	goto	l407
 10175                           
 10176                           ; BSR set to: 0
 10177                           ;diskio.c: 297: {
 10178                           ;diskio.c: 298: crc_number |= buff_i;
 10179  001FCC  517B               	movf	sdc_disk_initialize@buff_i& (0+255),w,b
 10180  001FCE  1379               	iorwf	sdc_disk_initialize@crc_number& (0+255),f,b
 10181  001FD0                     l407:
 10182                           
 10183                           ; BSR set to: 0
 10184                           ;diskio.c: 299: }
 10185                           ;diskio.c: 300: count1++;
 10186                           
 10187                           ; BSR set to: 0
 10188                           
 10189                           ; BSR set to: 0
 10190  001FD0  4B77               	infsnz	sdc_disk_initialize@count1& (0+255),f,b
 10191  001FD2  2B78               	incf	(sdc_disk_initialize@count1+1)& (0+255),f,b
 10192                           
 10193                           ; BSR set to: 0
 10194                           ;diskio.c: 301: }while(crc_number != 0x1AA && count1<1000);
 10195  001FD4  0EAA               	movlw	170
 10196  001FD6  1979               	xorwf	sdc_disk_initialize@crc_number& (0+255),w,b
 10197  001FD8  E103               	bnz	u10860
 10198  001FDA  057A               	decf	(sdc_disk_initialize@crc_number+1)& (0+255),w,b
 10199  001FDC  B4D8               	btfsc	status,2,c
 10200  001FDE  D008               	goto	u10870
 10201  001FE0                     u10860:
 10202                           
 10203                           ; BSR set to: 0
 10204  001FE0  BF78               	btfsc	(sdc_disk_initialize@count1+1)& (0+255),7,b
 10205  001FE2  D7E5               	goto	l404
 10206  001FE4  0EE8               	movlw	232
 10207  001FE6  5D77               	subwf	sdc_disk_initialize@count1& (0+255),w,b
 10208  001FE8  0E03               	movlw	3
 10209  001FEA  5978               	subwfb	(sdc_disk_initialize@count1+1)& (0+255),w,b
 10210  001FEC  A0D8               	btfss	status,0,c
 10211  001FEE  D7DF               	goto	l404
 10212  001FF0                     u10870:
 10213                           
 10214                           ; BSR set to: 0
 10215                           ;diskio.c: 306: if (crc_number == 0x1AA)
 10216                           
 10217                           ; BSR set to: 0
 10218                           
 10219                           ; BSR set to: 0
 10220  001FF0  0EAA               	movlw	170
 10221  001FF2  1979               	xorwf	sdc_disk_initialize@crc_number& (0+255),w,b
 10222  001FF4  E102               	bnz	u10881
 10223  001FF6  057A               	decf	(sdc_disk_initialize@crc_number+1)& (0+255),w,b
 10224  001FF8  A4D8               	btfss	status,2,c
 10225  001FFA                     u10881:
 10226  001FFA  D0B1               	goto	l411
 10227                           
 10228                           ; BSR set to: 0
 10229                           ;diskio.c: 307: {
 10230                           ;diskio.c: 308: count1 = 0;
 10231  001FFC  0E00               	movlw	0
 10232  001FFE  6F78               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 10233  002000  0E00               	movlw	0
 10234  002002  6F77               	movwf	sdc_disk_initialize@count1& (0+255),b
 10235  002004                     l412:
 10236                           
 10237                           ; BSR set to: 0
 10238                           ;diskio.c: 310: count2 = 0;
 10239  002004  0E00               	movlw	0
 10240  002006  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 10241  002008  0E00               	movlw	0
 10242  00200A  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 10243                           
 10244                           ; BSR set to: 0
 10245                           ;diskio.c: 311: buff = 0XFF;
 10246  00200C  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 10247  00200E                     
 10248                           ; BSR set to: 0
 10249                           ;diskio.c: 319: dummy_clocks(10);
 10250                           
 10251                           ; BSR set to: 0
 10252  00200E  0E0A               	movlw	10
 10253  002010  EC0B  F027         	call	_dummy_clocks
 10254                           
 10255                           ;diskio.c: 320: command(0X77, 0X00000000, 0X00);
 10256  002014  0E00               	movlw	0
 10257  002016  0100               	movlb	0	; () banked
 10258  002018  6F65               	movwf	command@arg& (0+255),b
 10259  00201A  0E00               	movlw	0
 10260  00201C  6F66               	movwf	(command@arg+1)& (0+255),b
 10261  00201E  0E00               	movlw	0
 10262  002020  6F67               	movwf	(command@arg+2)& (0+255),b
 10263  002022  0E00               	movlw	0
 10264  002024  6F68               	movwf	(command@arg+3)& (0+255),b
 10265  002026  0E00               	movlw	0
 10266  002028  6F69               	movwf	command@CRC& (0+255),b
 10267  00202A  0E77               	movlw	119
 10268  00202C  ECBC  F024         	call	_command
 10269                           
 10270                           ;diskio.c: 321: buff = 0XFF;
 10271  002030  0100               	movlb	0	; () banked
 10272  002032  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 10273                           
 10274                           ; BSR set to: 0
 10275                           ;diskio.c: 323: proceed();
 10276  002034  EC4F  F029         	call	_proceed	;wreg free
 10277  002038                     
 10278                           ;diskio.c: 325: buff = response();
 10279  002038  EC41  F029         	call	_response	;wreg free
 10280  00203C  0100               	movlb	0	; () banked
 10281  00203E  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 10282                           
 10283                           ; BSR set to: 0
 10284                           ;diskio.c: 326: count2++;
 10285  002040  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 10286  002042  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 10287                           
 10288                           ;diskio.c: 327: }while((buff!=0X01)&&(count2<10));
 10289  002044  057F               	decf	sdc_disk_initialize@buff& (0+255),w,b
 10290  002046  B4D8               	btfsc	status,2,c
 10291  002048  D008               	goto	u10900
 10292                           
 10293                           ; BSR set to: 0
 10294  00204A  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 10295  00204C  D7F5               	goto	l414
 10296  00204E  517E               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 10297  002050  E104               	bnz	l9081
 10298  002052  0E0A               	movlw	10
 10299  002054  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 10300  002056  A0D8               	btfss	status,0,c
 10301  002058  D7EF               	goto	l414
 10302  00205A                     u10900:
 10303  00205A                     l9081:
 10304                           
 10305                           ; BSR set to: 0
 10306                           ;diskio.c: 328: count2 = 0;
 10307  00205A  0E00               	movlw	0
 10308  00205C  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 10309  00205E  0E00               	movlw	0
 10310  002060  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 10311                           
 10312                           ; BSR set to: 0
 10313                           ;diskio.c: 332: dummy_clocks(10);
 10314  002062  0E0A               	movlw	10
 10315  002064  EC0B  F027         	call	_dummy_clocks
 10316                           
 10317                           ;diskio.c: 333: command(0X69, 0X40000000 , 0x00);
 10318  002068  0E00               	movlw	0
 10319  00206A  0100               	movlb	0	; () banked
 10320  00206C  6F65               	movwf	command@arg& (0+255),b
 10321  00206E  0E00               	movlw	0
 10322  002070  6F66               	movwf	(command@arg+1)& (0+255),b
 10323  002072  0E00               	movlw	0
 10324  002074  6F67               	movwf	(command@arg+2)& (0+255),b
 10325  002076  0E40               	movlw	64
 10326  002078  6F68               	movwf	(command@arg+3)& (0+255),b
 10327  00207A  0E00               	movlw	0
 10328  00207C  6F69               	movwf	command@CRC& (0+255),b
 10329  00207E  0E69               	movlw	105
 10330  002080  ECBC  F024         	call	_command
 10331                           
 10332                           ;diskio.c: 334: proceed();
 10333  002084  EC4F  F029         	call	_proceed	;wreg free
 10334                           
 10335                           ;diskio.c: 335: buff = response();
 10336  002088  EC41  F029         	call	_response	;wreg free
 10337  00208C  0100               	movlb	0	; () banked
 10338  00208E  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 10339                           
 10340                           ; BSR set to: 0
 10341                           ;diskio.c: 336: count2++;
 10342  002090  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 10343  002092  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 10344                           
 10345                           ; BSR set to: 0
 10346                           ;diskio.c: 337: }while(buff!=0X00);
 10347  002094  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 10348  002096  A4D8               	btfss	status,2,c
 10349  002098  D7BA               	goto	l413
 10350                           
 10351                           ; BSR set to: 0
 10352                           ;diskio.c: 339: buff = 0xFF;
 10353  00209A  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 10354                           
 10355                           ; BSR set to: 0
 10356                           ;diskio.c: 342: dummy_clocks(10);
 10357  00209C  0E0A               	movlw	10
 10358  00209E  EC0B  F027         	call	_dummy_clocks
 10359                           
 10360                           ;diskio.c: 343: command(0X7A, 0X00000000, 0XFF);
 10361  0020A2  0E00               	movlw	0
 10362  0020A4  0100               	movlb	0	; () banked
 10363  0020A6  6F65               	movwf	command@arg& (0+255),b
 10364  0020A8  0E00               	movlw	0
 10365  0020AA  6F66               	movwf	(command@arg+1)& (0+255),b
 10366  0020AC  0E00               	movlw	0
 10367  0020AE  6F67               	movwf	(command@arg+2)& (0+255),b
 10368  0020B0  0E00               	movlw	0
 10369  0020B2  6F68               	movwf	(command@arg+3)& (0+255),b
 10370  0020B4  0EFF               	movlw	255
 10371  0020B6  6F69               	movwf	command@CRC& (0+255),b
 10372  0020B8  0E7A               	movlw	122
 10373  0020BA  ECBC  F024         	call	_command
 10374                           
 10375                           ;diskio.c: 344: proceed();
 10376  0020BE  EC4F  F029         	call	_proceed	;wreg free
 10377  0020C2                     
 10378                           ;diskio.c: 346: buff = response();
 10379  0020C2  EC41  F029         	call	_response	;wreg free
 10380  0020C6  0100               	movlb	0	; () banked
 10381  0020C8  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 10382                           
 10383                           ; BSR set to: 0
 10384                           ;diskio.c: 347: ocr = (buff << 1) & 0b10000000;
 10385  0020CA  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 10386  0020CC  257F               	addwf	sdc_disk_initialize@buff& (0+255),w,b
 10387  0020CE  0B80               	andlw	128
 10388  0020D0  6F7C               	movwf	sdc_disk_initialize@ocr& (0+255),b
 10389                           
 10390                           ; BSR set to: 0
 10391                           ;diskio.c: 348: count2++;
 10392  0020D2  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 10393  0020D4  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 10394                           
 10395                           ; BSR set to: 0
 10396                           ;diskio.c: 349: }while(ocr!=0X00 && ocr != 0x01 && count2<10);
 10397  0020D6  517C               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 10398  0020D8  B4D8               	btfsc	status,2,c
 10399  0020DA  D00B               	goto	u10940
 10400                           
 10401                           ; BSR set to: 0
 10402  0020DC  057C               	decf	sdc_disk_initialize@ocr& (0+255),w,b
 10403  0020DE  B4D8               	btfsc	status,2,c
 10404  0020E0  D008               	goto	u10940
 10405                           
 10406                           ; BSR set to: 0
 10407  0020E2  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 10408  0020E4  D7EE               	goto	l419
 10409  0020E6  517E               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 10410  0020E8  E104               	bnz	l9111
 10411  0020EA  0E0A               	movlw	10
 10412  0020EC  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 10413  0020EE  A0D8               	btfss	status,0,c
 10414  0020F0  D7E8               	goto	l419
 10415  0020F2                     u10940:
 10416  0020F2                     l9111:
 10417                           
 10418                           ; BSR set to: 0
 10419                           ;diskio.c: 350: }while(ocr != 0X00 && ocr !=0x01);
 10420  0020F2  517C               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 10421  0020F4  B4D8               	btfsc	status,2,c
 10422  0020F6  D003               	goto	u10960
 10423                           
 10424                           ; BSR set to: 0
 10425  0020F8  057C               	decf	sdc_disk_initialize@ocr& (0+255),w,b
 10426  0020FA  A4D8               	btfss	status,2,c
 10427  0020FC  D783               	goto	l412
 10428  0020FE                     u10960:
 10429                           
 10430                           ; BSR set to: 0
 10431                           ;diskio.c: 353: count1 = 0;
 10432                           
 10433                           ; BSR set to: 0
 10434                           
 10435                           ; BSR set to: 0
 10436  0020FE  0E00               	movlw	0
 10437  002100  6F78               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 10438  002102  0E00               	movlw	0
 10439  002104  6F77               	movwf	sdc_disk_initialize@count1& (0+255),b
 10440                           
 10441                           ; BSR set to: 0
 10442                           ;diskio.c: 355: _delay((unsigned long)((1)*(48000000/4000.0)));
 10443  002106  0E10               	movlw	16
 10444  002108  0100               	movlb	0	; () banked
 10445  00210A  6F73               	movwf	??_sdc_disk_initialize& (0+255),b
 10446  00210C  0E94               	movlw	148
 10447  00210E                     u14267:
 10448  00210E  2EE8               	decfsz	wreg,f,c
 10449  002110  D7FE               	bra	u14267
 10450  002112  2F73               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 10451  002114  D7FC               	bra	u14267
 10452  002116  F000               	nop	
 10453                           
 10454                           ;diskio.c: 356: stat = 0X00;
 10455  002118  0E00               	movlw	0
 10456  00211A  0100               	movlb	0	; () banked
 10457  00211C  6F76               	movwf	sdc_disk_initialize@stat& (0+255),b
 10458                           
 10459                           ; BSR set to: 0
 10460                           ;diskio.c: 358: if(!ocr)
 10461  00211E  517C               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 10462  002120  A4D8               	btfss	status,2,c
 10463  002122  D0B9               	goto	u11060
 10464                           
 10465                           ; BSR set to: 0
 10466                           ;diskio.c: 359: {
 10467                           ;diskio.c: 361: dummy_clocks(10);
 10468  002124  0E0A               	movlw	10
 10469  002126  EC0B  F027         	call	_dummy_clocks
 10470                           
 10471                           ;diskio.c: 362: command(0x50, 0x00000200,0XFF);
 10472  00212A  0E00               	movlw	0
 10473  00212C  0100               	movlb	0	; () banked
 10474  00212E  6F65               	movwf	command@arg& (0+255),b
 10475  002130  0E02               	movlw	2
 10476  002132  6F66               	movwf	(command@arg+1)& (0+255),b
 10477  002134  0E00               	movlw	0
 10478  002136  6F67               	movwf	(command@arg+2)& (0+255),b
 10479  002138  0E00               	movlw	0
 10480  00213A  6F68               	movwf	(command@arg+3)& (0+255),b
 10481  00213C  0EFF               	movlw	255
 10482  00213E  6F69               	movwf	command@CRC& (0+255),b
 10483  002140  0E50               	movlw	80
 10484  002142  ECBC  F024         	call	_command
 10485                           
 10486                           ;diskio.c: 363: proceed();
 10487  002146  EC4F  F029         	call	_proceed	;wreg free
 10488                           
 10489                           ;diskio.c: 365: buff = 0xFF;
 10490  00214A  0100               	movlb	0	; () banked
 10491  00214C  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 10492  00214E                     
 10493                           ; BSR set to: 0
 10494                           ;diskio.c: 367: buff = response();
 10495                           
 10496                           ; BSR set to: 0
 10497  00214E  EC41  F029         	call	_response	;wreg free
 10498  002152  0100               	movlb	0	; () banked
 10499  002154  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 10500                           
 10501                           ; BSR set to: 0
 10502                           ;diskio.c: 368: }while(buff!=0X00);
 10503  002156  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 10504  002158  B4D8               	btfsc	status,2,c
 10505  00215A  D09D               	goto	u11060
 10506  00215C  D7F8               	goto	l427
 10507  00215E                     l411:
 10508                           
 10509                           ; BSR set to: 0
 10510                           ;diskio.c: 373: else
 10511                           ;diskio.c: 374: {
 10512                           ;diskio.c: 376: count2 = 0;
 10513                           
 10514                           ; BSR set to: 0
 10515  00215E  0E00               	movlw	0
 10516  002160  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 10517  002162  0E00               	movlw	0
 10518  002164  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 10519                           
 10520                           ; BSR set to: 0
 10521                           ;diskio.c: 377: buff = 0XFF;
 10522  002166  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 10523                           
 10524                           ; BSR set to: 0
 10525                           ;diskio.c: 378: dummy_clocks(1);
 10526  002168  0E01               	movlw	1
 10527  00216A  EC0B  F027         	call	_dummy_clocks
 10528                           
 10529                           ;diskio.c: 379: command(0X69, 0X00000000, 0XFF);
 10530  00216E  0E00               	movlw	0
 10531  002170  0100               	movlb	0	; () banked
 10532  002172  6F65               	movwf	command@arg& (0+255),b
 10533  002174  0E00               	movlw	0
 10534  002176  6F66               	movwf	(command@arg+1)& (0+255),b
 10535  002178  0E00               	movlw	0
 10536  00217A  6F67               	movwf	(command@arg+2)& (0+255),b
 10537  00217C  0E00               	movlw	0
 10538  00217E  6F68               	movwf	(command@arg+3)& (0+255),b
 10539  002180  0EFF               	movlw	255
 10540  002182  6F69               	movwf	command@CRC& (0+255),b
 10541  002184  0E69               	movlw	105
 10542  002186  ECBC  F024         	call	_command
 10543                           
 10544                           ;diskio.c: 380: proceed();
 10545  00218A  EC4F  F029         	call	_proceed	;wreg free
 10546  00218E                     
 10547                           ;diskio.c: 382: buff = response();
 10548  00218E  EC41  F029         	call	_response	;wreg free
 10549  002192  0100               	movlb	0	; () banked
 10550  002194  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 10551                           
 10552                           ; BSR set to: 0
 10553                           ;diskio.c: 383: count2++;
 10554  002196  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 10555  002198  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 10556                           
 10557                           ; BSR set to: 0
 10558                           ;diskio.c: 384: if(buff==0x00)
 10559  00219A  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 10560  00219C  A4D8               	btfss	status,2,c
 10561  00219E  D00C               	goto	l431
 10562                           
 10563                           ; BSR set to: 0
 10564                           ;diskio.c: 385: {
 10565                           ;diskio.c: 386: posicao_cursor_lcd(1,0);
 10566  0021A0  0E00               	movlw	0
 10567  0021A2  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 10568  0021A4  0E01               	movlw	1
 10569  0021A6  ECD5  F023         	call	_posicao_cursor_lcd
 10570                           
 10571                           ;diskio.c: 387: escreve_frase_ram_lcd("SD VER. 1");
 10572  0021AA  0E90               	movlw	low STR_12
 10573  0021AC  0100               	movlb	0	; () banked
 10574  0021AE  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 10575  0021B0  0E08               	movlw	high STR_12
 10576  0021B2  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 10577  0021B4  EC02  F026         	call	_escreve_frase_ram_lcd	;wreg free
 10578  0021B8                     l431:
 10579                           
 10580                           ;diskio.c: 388: }
 10581                           ;diskio.c: 389: _delay((unsigned long)((1)*(48000000/4000.0)));
 10582  0021B8  0E10               	movlw	16
 10583  0021BA  0100               	movlb	0	; () banked
 10584  0021BC  6F73               	movwf	??_sdc_disk_initialize& (0+255),b
 10585  0021BE  0E94               	movlw	148
 10586  0021C0                     u14277:
 10587  0021C0  2EE8               	decfsz	wreg,f,c
 10588  0021C2  D7FE               	bra	u14277
 10589  0021C4  2F73               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 10590  0021C6  D7FC               	bra	u14277
 10591  0021C8  F000               	nop	
 10592                           
 10593                           ;diskio.c: 390: }while(buff!=0X00 && count2<10000);
 10594  0021CA  0100               	movlb	0	; () banked
 10595  0021CC  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 10596  0021CE  B4D8               	btfsc	status,2,c
 10597  0021D0  D008               	goto	u11010
 10598                           
 10599                           ; BSR set to: 0
 10600  0021D2  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 10601  0021D4  D7DC               	goto	l430
 10602  0021D6  0E10               	movlw	16
 10603  0021D8  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 10604  0021DA  0E27               	movlw	39
 10605  0021DC  597E               	subwfb	(sdc_disk_initialize@count2+1)& (0+255),w,b
 10606  0021DE  A0D8               	btfss	status,0,c
 10607  0021E0  D7D6               	goto	l430
 10608  0021E2                     u11010:
 10609                           
 10610                           ; BSR set to: 0
 10611                           ;diskio.c: 392: buff = 0xFF;
 10612                           
 10613                           ; BSR set to: 0
 10614  0021E2  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 10615                           
 10616                           ; BSR set to: 0
 10617                           ;diskio.c: 393: if(count2==10)
 10618  0021E4  0E0A               	movlw	10
 10619  0021E6  197D               	xorwf	sdc_disk_initialize@count2& (0+255),w,b
 10620  0021E8  117E               	iorwf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 10621  0021EA  A4D8               	btfss	status,2,c
 10622  0021EC  D038               	goto	u11050
 10623                           
 10624                           ; BSR set to: 0
 10625                           ;diskio.c: 394: {
 10626                           ;diskio.c: 395: count2 = 0;
 10627  0021EE  0E00               	movlw	0
 10628  0021F0  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 10629  0021F2  0E00               	movlw	0
 10630  0021F4  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 10631                           
 10632                           ; BSR set to: 0
 10633                           ;diskio.c: 396: dummy_clocks(10);
 10634  0021F6  0E0A               	movlw	10
 10635  0021F8  EC0B  F027         	call	_dummy_clocks
 10636                           
 10637                           ;diskio.c: 397: command(0X41, 0X00000000, 0XFF);
 10638  0021FC  0E00               	movlw	0
 10639  0021FE  0100               	movlb	0	; () banked
 10640  002200  6F65               	movwf	command@arg& (0+255),b
 10641  002202  0E00               	movlw	0
 10642  002204  6F66               	movwf	(command@arg+1)& (0+255),b
 10643  002206  0E00               	movlw	0
 10644  002208  6F67               	movwf	(command@arg+2)& (0+255),b
 10645  00220A  0E00               	movlw	0
 10646  00220C  6F68               	movwf	(command@arg+3)& (0+255),b
 10647  00220E  0EFF               	movlw	255
 10648  002210  6F69               	movwf	command@CRC& (0+255),b
 10649  002212  0E41               	movlw	65
 10650  002214  ECBC  F024         	call	_command
 10651                           
 10652                           ;diskio.c: 398: proceed();
 10653  002218  EC4F  F029         	call	_proceed	;wreg free
 10654  00221C                     
 10655                           ;diskio.c: 400: buff = response();
 10656  00221C  EC41  F029         	call	_response	;wreg free
 10657  002220  0100               	movlb	0	; () banked
 10658  002222  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 10659                           
 10660                           ; BSR set to: 0
 10661                           ;diskio.c: 401: count2++;
 10662  002224  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 10663  002226  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 10664                           
 10665                           ; BSR set to: 0
 10666                           ;diskio.c: 402: if(buff==0x00)
 10667  002228  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 10668  00222A  A4D8               	btfss	status,2,c
 10669  00222C  D00C               	goto	l437
 10670                           
 10671                           ; BSR set to: 0
 10672                           ;diskio.c: 403: {
 10673                           ;diskio.c: 404: posicao_cursor_lcd(1,0);
 10674  00222E  0E00               	movlw	0
 10675  002230  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 10676  002232  0E01               	movlw	1
 10677  002234  ECD5  F023         	call	_posicao_cursor_lcd
 10678                           
 10679                           ;diskio.c: 405: escreve_frase_ram_lcd("MMC Ver. 3");
 10680  002238  0E7A               	movlw	low STR_13
 10681  00223A  0100               	movlb	0	; () banked
 10682  00223C  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 10683  00223E  0E08               	movlw	high STR_13
 10684  002240  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 10685  002242  EC02  F026         	call	_escreve_frase_ram_lcd	;wreg free
 10686  002246                     l437:
 10687                           
 10688                           ;diskio.c: 406: }
 10689                           ;diskio.c: 408: }while(buff!=0X00 && count2<10000);
 10690  002246  0100               	movlb	0	; () banked
 10691  002248  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 10692  00224A  B4D8               	btfsc	status,2,c
 10693  00224C  D008               	goto	u11050
 10694                           
 10695                           ; BSR set to: 0
 10696  00224E  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 10697  002250  D7E5               	goto	l436
 10698  002252  0E10               	movlw	16
 10699  002254  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 10700  002256  0E27               	movlw	39
 10701  002258  597E               	subwfb	(sdc_disk_initialize@count2+1)& (0+255),w,b
 10702  00225A  A0D8               	btfss	status,0,c
 10703  00225C  D7DF               	goto	l436
 10704  00225E                     u11050:
 10705                           
 10706                           ; BSR set to: 0
 10707                           ;diskio.c: 409: }
 10708                           ;diskio.c: 412: dummy_clocks(10);
 10709                           
 10710                           ; BSR set to: 0
 10711                           
 10712                           ; BSR set to: 0
 10713                           
 10714                           ; BSR set to: 0
 10715  00225E  0E0A               	movlw	10
 10716  002260  EC0B  F027         	call	_dummy_clocks
 10717                           
 10718                           ;diskio.c: 413: command(0X50,0X00000200,0XFF);
 10719  002264  0E00               	movlw	0
 10720  002266  0100               	movlb	0	; () banked
 10721  002268  6F65               	movwf	command@arg& (0+255),b
 10722  00226A  0E02               	movlw	2
 10723  00226C  6F66               	movwf	(command@arg+1)& (0+255),b
 10724  00226E  0E00               	movlw	0
 10725  002270  6F67               	movwf	(command@arg+2)& (0+255),b
 10726  002272  0E00               	movlw	0
 10727  002274  6F68               	movwf	(command@arg+3)& (0+255),b
 10728  002276  0EFF               	movlw	255
 10729  002278  6F69               	movwf	command@CRC& (0+255),b
 10730  00227A  0E50               	movlw	80
 10731  00227C  ECBC  F024         	call	_command
 10732                           
 10733                           ;diskio.c: 414: proceed();
 10734  002280  EC4F  F029         	call	_proceed	;wreg free
 10735                           
 10736                           ;diskio.c: 416: buff = 0xFF;
 10737  002284  0100               	movlb	0	; () banked
 10738  002286  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 10739  002288                     
 10740                           ; BSR set to: 0
 10741                           ;diskio.c: 418: buff = response();
 10742                           
 10743                           ; BSR set to: 0
 10744  002288  EC41  F029         	call	_response	;wreg free
 10745  00228C  0100               	movlb	0	; () banked
 10746  00228E  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 10747                           
 10748                           ; BSR set to: 0
 10749                           ;diskio.c: 419: }while(buff!=0X00);
 10750  002290  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 10751  002292  A4D8               	btfss	status,2,c
 10752  002294  D7F9               	goto	l441
 10753  002296                     u11060:
 10754                           
 10755                           ; BSR set to: 0
 10756                           ;diskio.c: 421: }
 10757                           ;diskio.c: 425: return stat;
 10758                           
 10759                           ; BSR set to: 0
 10760                           
 10761                           ; BSR set to: 0
 10762  002296  5176               	movf	sdc_disk_initialize@stat& (0+255),w,b
 10763  002298  0012               	return	
 10764  00229A                     __end_of_sdc_disk_initialize:
 10765                           	opt stack 0
 10766                           tosu	equ	0xFFF
 10767                           tosh	equ	0xFFE
 10768                           tosl	equ	0xFFD
 10769                           pclath	equ	0xFFA
 10770                           tblptru	equ	0xFF8
 10771                           tblptrh	equ	0xFF7
 10772                           tblptrl	equ	0xFF6
 10773                           tablat	equ	0xFF5
 10774                           prodh	equ	0xFF4
 10775                           prodl	equ	0xFF3
 10776                           intcon	equ	0xFF2
 10777                           intcon2	equ	0xFF1
 10778                           intcon3	equ	0xFF0
 10779                           postinc0	equ	0xFEE
 10780                           wreg	equ	0xFE8
 10781                           indf1	equ	0xFE7
 10782                           postinc1	equ	0xFE6
 10783                           postdec1	equ	0xFE5
 10784                           fsr1h	equ	0xFE2
 10785                           fsr1l	equ	0xFE1
 10786                           indf2	equ	0xFDF
 10787                           postinc2	equ	0xFDE
 10788                           postdec2	equ	0xFDD
 10789                           plusw2	equ	0xFDB
 10790                           fsr2h	equ	0xFDA
 10791                           fsr2l	equ	0xFD9
 10792                           status	equ	0xFD8
 10793                           
 10794 ;; *************** function _sdc_reset *****************
 10795 ;; Defined at:
 10796 ;;		line 238 in file "bibliotecas/diskio.c"
 10797 ;; Parameters:    Size  Location     Type
 10798 ;;		None
 10799 ;; Auto vars:     Size  Location     Type
 10800 ;;  teste          10    0        unsigned char [10]
 10801 ;;  count           2   16[BANK0 ] int 
 10802 ;;  count_nosd      2   14[BANK0 ] int 
 10803 ;;  i               2   12[BANK0 ] int 
 10804 ;;  receive         2    0        unsigned int 
 10805 ;;  buff            1   18[BANK0 ] unsigned char 
 10806 ;;  stat            1    0        unsigned char 
 10807 ;; Return value:  Size  Location     Type
 10808 ;;                  1    wreg      void 
 10809 ;; Registers used:
 10810 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10811 ;; Tracked objects:
 10812 ;;		On entry : 0/0
 10813 ;;		On exit  : 0/0
 10814 ;;		Unchanged: 0/0
 10815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10816 ;;      Params:         0       0       0       0       0       0       0       0       0
 10817 ;;      Locals:         0       7       0       0       0       0       0       0       0
 10818 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10819 ;;      Totals:         0       7       0       0       0       0       0       0       0
 10820 ;;Total ram usage:        7 bytes
 10821 ;; Hardware stack levels used:    1
 10822 ;; Hardware stack levels required when called:    6
 10823 ;; This function calls:
 10824 ;;		_command
 10825 ;;		_escreve_frase_ram_lcd
 10826 ;;		_posicao_cursor_lcd
 10827 ;;		_proceed
 10828 ;;		_response
 10829 ;; This function is called by:
 10830 ;;		_sdc_disk_initialize
 10831 ;; This function uses a non-reentrant model
 10832 ;;
 10833                           
 10834                           	psect	text35
 10835  004282                     __ptext35:
 10836                           	opt stack 0
 10837  004282                     _sdc_reset:
 10838                           	opt stack 18
 10839                           
 10840                           ;diskio.c: 240: int i = 0, count = 0, count_nosd = 0;
 10841                           
 10842                           ; BSR set to: 0
 10843                           ;incstack = 0
 10844  004282  0E00               	movlw	0
 10845  004284  0100               	movlb	0	; () banked
 10846  004286  6F6D               	movwf	(sdc_reset@i+1)& (0+255),b
 10847  004288  0E00               	movlw	0
 10848  00428A  6F6C               	movwf	sdc_reset@i& (0+255),b
 10849  00428C  0E00               	movlw	0
 10850  00428E  6F71               	movwf	(sdc_reset@count+1)& (0+255),b
 10851  004290  0E00               	movlw	0
 10852  004292  6F70               	movwf	sdc_reset@count& (0+255),b
 10853  004294  0E00               	movlw	0
 10854  004296  6F6F               	movwf	(sdc_reset@count_nosd+1)& (0+255),b
 10855  004298  0E00               	movlw	0
 10856  00429A  6F6E               	movwf	sdc_reset@count_nosd& (0+255),b
 10857  00429C                     
 10858                           ; BSR set to: 0
 10859                           ;diskio.c: 248: command(0x40, 0X00000000, 0X95);
 10860                           
 10861                           ; BSR set to: 0
 10862  00429C  0E00               	movlw	0
 10863  00429E  6F65               	movwf	command@arg& (0+255),b
 10864  0042A0  0E00               	movlw	0
 10865  0042A2  6F66               	movwf	(command@arg+1)& (0+255),b
 10866  0042A4  0E00               	movlw	0
 10867  0042A6  6F67               	movwf	(command@arg+2)& (0+255),b
 10868  0042A8  0E00               	movlw	0
 10869  0042AA  6F68               	movwf	(command@arg+3)& (0+255),b
 10870  0042AC  0E95               	movlw	149
 10871  0042AE  6F69               	movwf	command@CRC& (0+255),b
 10872  0042B0  0E40               	movlw	64
 10873  0042B2  ECBC  F024         	call	_command
 10874                           
 10875                           ;diskio.c: 249: proceed();
 10876  0042B6  EC4F  F029         	call	_proceed	;wreg free
 10877  0042BA                     
 10878                           ;diskio.c: 251: buff = response();
 10879  0042BA  EC41  F029         	call	_response	;wreg free
 10880  0042BE  0100               	movlb	0	; () banked
 10881  0042C0  6F72               	movwf	sdc_reset@buff& (0+255),b
 10882                           
 10883                           ; BSR set to: 0
 10884                           ;diskio.c: 252: count++;
 10885  0042C2  4B70               	infsnz	sdc_reset@count& (0+255),f,b
 10886  0042C4  2B71               	incf	(sdc_reset@count+1)& (0+255),f,b
 10887                           
 10888                           ; BSR set to: 0
 10889                           ;diskio.c: 253: }while(buff!=0X01 && count<10);
 10890  0042C6  0572               	decf	sdc_reset@buff& (0+255),w,b
 10891  0042C8  B4D8               	btfsc	status,2,c
 10892  0042CA  D008               	goto	u10610
 10893                           
 10894                           ; BSR set to: 0
 10895  0042CC  BF71               	btfsc	(sdc_reset@count+1)& (0+255),7,b
 10896  0042CE  D7F5               	goto	l395
 10897  0042D0  5171               	movf	(sdc_reset@count+1)& (0+255),w,b
 10898  0042D2  E104               	bnz	l8899
 10899  0042D4  0E0A               	movlw	10
 10900  0042D6  5D70               	subwf	sdc_reset@count& (0+255),w,b
 10901  0042D8  A0D8               	btfss	status,0,c
 10902  0042DA  D7EF               	goto	l395
 10903  0042DC                     u10610:
 10904  0042DC                     l8899:
 10905                           
 10906                           ; BSR set to: 0
 10907                           ;diskio.c: 254: count = 0;
 10908  0042DC  0E00               	movlw	0
 10909  0042DE  6F71               	movwf	(sdc_reset@count+1)& (0+255),b
 10910  0042E0  0E00               	movlw	0
 10911  0042E2  6F70               	movwf	sdc_reset@count& (0+255),b
 10912                           
 10913                           ; BSR set to: 0
 10914                           ;diskio.c: 255: if(buff != 0x01)
 10915  0042E4  0572               	decf	sdc_reset@buff& (0+255),w,b
 10916  0042E6  B4D8               	btfsc	status,2,c
 10917  0042E8  D019               	goto	l399
 10918                           
 10919                           ; BSR set to: 0
 10920                           ;diskio.c: 256: {
 10921                           ;diskio.c: 257: posicao_cursor_lcd(1,0);
 10922  0042EA  0E00               	movlw	0
 10923  0042EC  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 10924  0042EE  0E01               	movlw	1
 10925  0042F0  ECD5  F023         	call	_posicao_cursor_lcd
 10926                           
 10927                           ;diskio.c: 258: escreve_frase_ram_lcd("Sem Cartao");
 10928  0042F4  0E85               	movlw	low STR_10
 10929  0042F6  0100               	movlb	0	; () banked
 10930  0042F8  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 10931  0042FA  0E08               	movlw	high STR_10
 10932  0042FC  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 10933  0042FE  EC02  F026         	call	_escreve_frase_ram_lcd	;wreg free
 10934                           
 10935                           ;diskio.c: 259: posicao_cursor_lcd(2,0);
 10936  004302  0E00               	movlw	0
 10937  004304  0100               	movlb	0	; () banked
 10938  004306  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 10939  004308  0E02               	movlw	2
 10940  00430A  ECD5  F023         	call	_posicao_cursor_lcd
 10941                           
 10942                           ;diskio.c: 260: escreve_frase_ram_lcd("Insira o Cartao");
 10943  00430E  0E4D               	movlw	low STR_11
 10944  004310  0100               	movlb	0	; () banked
 10945  004312  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 10946  004314  0E08               	movlw	high STR_11
 10947  004316  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 10948  004318  EC02  F026         	call	_escreve_frase_ram_lcd	;wreg free
 10949  00431C                     l399:
 10950                           
 10951                           ;diskio.c: 261: }
 10952                           ;diskio.c: 263: }while(buff!=0X01);
 10953  00431C  0100               	movlb	0	; () banked
 10954  00431E  0572               	decf	sdc_reset@buff& (0+255),w,b
 10955  004320  B4D8               	btfsc	status,2,c
 10956  004322  0012               	return	
 10957  004324  D7BB               	goto	l394
 10958  004326                     __end_of_sdc_reset:
 10959                           	opt stack 0
 10960                           tosu	equ	0xFFF
 10961                           tosh	equ	0xFFE
 10962                           tosl	equ	0xFFD
 10963                           pclath	equ	0xFFA
 10964                           tblptru	equ	0xFF8
 10965                           tblptrh	equ	0xFF7
 10966                           tblptrl	equ	0xFF6
 10967                           tablat	equ	0xFF5
 10968                           prodh	equ	0xFF4
 10969                           prodl	equ	0xFF3
 10970                           intcon	equ	0xFF2
 10971                           intcon2	equ	0xFF1
 10972                           intcon3	equ	0xFF0
 10973                           postinc0	equ	0xFEE
 10974                           wreg	equ	0xFE8
 10975                           indf1	equ	0xFE7
 10976                           postinc1	equ	0xFE6
 10977                           postdec1	equ	0xFE5
 10978                           fsr1h	equ	0xFE2
 10979                           fsr1l	equ	0xFE1
 10980                           indf2	equ	0xFDF
 10981                           postinc2	equ	0xFDE
 10982                           postdec2	equ	0xFDD
 10983                           plusw2	equ	0xFDB
 10984                           fsr2h	equ	0xFDA
 10985                           fsr2l	equ	0xFD9
 10986                           status	equ	0xFD8
 10987                           
 10988 ;; *************** function _posicao_cursor_lcd *****************
 10989 ;; Defined at:
 10990 ;;		line 271 in file "bibliotecas/display_lcd.c"
 10991 ;; Parameters:    Size  Location     Type
 10992 ;;  linha           1    wreg     unsigned char 
 10993 ;;  coluna          1    3[BANK0 ] unsigned char 
 10994 ;; Auto vars:     Size  Location     Type
 10995 ;;  linha           1    4[BANK0 ] unsigned char 
 10996 ;;  endereco        1    5[BANK0 ] unsigned char 
 10997 ;; Return value:  Size  Location     Type
 10998 ;;                  1    wreg      void 
 10999 ;; Registers used:
 11000 ;;		wreg, status,2, status,0, cstack
 11001 ;; Tracked objects:
 11002 ;;		On entry : 0/0
 11003 ;;		On exit  : 0/0
 11004 ;;		Unchanged: 0/0
 11005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11006 ;;      Params:         0       1       0       0       0       0       0       0       0
 11007 ;;      Locals:         0       2       0       0       0       0       0       0       0
 11008 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11009 ;;      Totals:         0       3       0       0       0       0       0       0       0
 11010 ;;Total ram usage:        3 bytes
 11011 ;; Hardware stack levels used:    1
 11012 ;; Hardware stack levels required when called:    5
 11013 ;; This function calls:
 11014 ;;		_endereco_cursor_lcd
 11015 ;; This function is called by:
 11016 ;;		_mensagem_inicial
 11017 ;;		_escrita_sdcard
 11018 ;;		_sdc_reset
 11019 ;;		_sdc_disk_initialize
 11020 ;;		_sdcard_init
 11021 ;; This function uses a non-reentrant model
 11022 ;;
 11023                           
 11024                           	psect	text36
 11025  0047AA                     __ptext36:
 11026                           	opt stack 0
 11027  0047AA                     _posicao_cursor_lcd:
 11028                           	opt stack 24
 11029                           
 11030                           ; BSR set to: 0
 11031                           ;incstack = 0
 11032                           ;posicao_cursor_lcd@linha stored from wreg
 11033  0047AA  0100               	movlb	0	; () banked
 11034  0047AC  6F64               	movwf	posicao_cursor_lcd@linha& (0+255),b
 11035                           
 11036                           ;display_lcd.c: 273: unsigned char endereco = 0x00;
 11037  0047AE  0E00               	movlw	0
 11038  0047B0  0100               	movlb	0	; () banked
 11039  0047B2  6F65               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 11040                           
 11041                           ; BSR set to: 0
 11042                           ;display_lcd.c: 275: if(coluna <= 0x10U)
 11043  0047B4  0E11               	movlw	17
 11044  0047B6  6163               	cpfslt	posicao_cursor_lcd@coluna& (0+255),b
 11045  0047B8  D034               	goto	l549
 11046  0047BA  D022               	goto	l550
 11047  0047BC                     l551:
 11048                           
 11049                           ; BSR set to: 0
 11050                           ;display_lcd.c: 282: endereco = 0x00U + coluna;
 11051  0047BC  C063  F065         	movff	posicao_cursor_lcd@coluna,posicao_cursor_lcd@endereco
 11052                           
 11053                           ; BSR set to: 0
 11054                           ;display_lcd.c: 283: endereco_cursor_lcd(endereco);
 11055  0047C0  5165               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 11056  0047C2  EC50  F024         	call	_endereco_cursor_lcd
 11057                           
 11058                           ;display_lcd.c: 284: break;
 11059  0047C6  D02A               	goto	l552
 11060  0047C8                     
 11061                           ;display_lcd.c: 287: endereco = 0x40U + coluna;
 11062  0047C8  0100               	movlb	0	; () banked
 11063  0047CA  5163               	movf	posicao_cursor_lcd@coluna& (0+255),w,b
 11064  0047CC  0F40               	addlw	64
 11065  0047CE  6F65               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 11066                           
 11067                           ; BSR set to: 0
 11068                           ;display_lcd.c: 288: endereco_cursor_lcd(endereco);
 11069  0047D0  5165               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 11070  0047D2  EC50  F024         	call	_endereco_cursor_lcd
 11071                           
 11072                           ;display_lcd.c: 289: break;
 11073  0047D6  D022               	goto	l552
 11074  0047D8                     
 11075                           ;display_lcd.c: 292: endereco = 0x14U + coluna;
 11076  0047D8  0100               	movlb	0	; () banked
 11077  0047DA  5163               	movf	posicao_cursor_lcd@coluna& (0+255),w,b
 11078  0047DC  0F14               	addlw	20
 11079  0047DE  6F65               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 11080                           
 11081                           ; BSR set to: 0
 11082                           ;display_lcd.c: 293: endereco_cursor_lcd(endereco);
 11083  0047E0  5165               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 11084  0047E2  EC50  F024         	call	_endereco_cursor_lcd
 11085                           
 11086                           ;display_lcd.c: 294: break;
 11087  0047E6  D01A               	goto	l552
 11088  0047E8                     
 11089                           ;display_lcd.c: 297: endereco = 0x54U + coluna;
 11090  0047E8  0100               	movlb	0	; () banked
 11091  0047EA  5163               	movf	posicao_cursor_lcd@coluna& (0+255),w,b
 11092  0047EC  0F54               	addlw	84
 11093  0047EE  6F65               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 11094                           
 11095                           ; BSR set to: 0
 11096                           ;display_lcd.c: 298: endereco_cursor_lcd(endereco);
 11097  0047F0  5165               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 11098  0047F2  EC50  F024         	call	_endereco_cursor_lcd
 11099                           
 11100                           ;display_lcd.c: 299: break;
 11101  0047F6  D012               	goto	l552
 11102  0047F8                     
 11103                           ;display_lcd.c: 302: endereco = 0x00U;
 11104  0047F8  0E00               	movlw	0
 11105  0047FA  0100               	movlb	0	; () banked
 11106  0047FC  6F65               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 11107                           
 11108                           ; BSR set to: 0
 11109                           ;display_lcd.c: 304: }
 11110                           
 11111                           ;display_lcd.c: 303: break;
 11112  0047FE  D00E               	goto	l552
 11113  004800                     l550:
 11114                           
 11115                           ; BSR set to: 0
 11116                           
 11117                           ; BSR set to: 0
 11118  004800  5164               	movf	posicao_cursor_lcd@linha& (0+255),w,b
 11119                           
 11120                           ; Switch size 1, requested type "space"
 11121                           ; Number of cases is 4, Range of values is 1 to 4
 11122                           ; switch strategies available:
 11123                           ; Name         Instructions Cycles
 11124                           ; simple_byte           13     7 (average)
 11125                           ;	Chosen strategy is simple_byte
 11126  004802  0A01               	xorlw	1	; case 1
 11127  004804  B4D8               	btfsc	status,2,c
 11128  004806  D7DA               	goto	l551
 11129  004808  0A03               	xorlw	3	; case 2
 11130  00480A  B4D8               	btfsc	status,2,c
 11131  00480C  D7DD               	goto	l553
 11132  00480E  0A01               	xorlw	1	; case 3
 11133  004810  B4D8               	btfsc	status,2,c
 11134  004812  D7E2               	goto	l554
 11135  004814  0A07               	xorlw	7	; case 4
 11136  004816  B4D8               	btfsc	status,2,c
 11137  004818  D7E7               	goto	l555
 11138  00481A  D7EE               	goto	l556
 11139  00481C                     l552:
 11140                           
 11141                           ;display_lcd.c: 306: coluna++;
 11142                           
 11143                           ; BSR set to: 0
 11144  00481C  0100               	movlb	0	; () banked
 11145  00481E  2B63               	incf	posicao_cursor_lcd@coluna& (0+255),f,b
 11146                           
 11147                           ;display_lcd.c: 307: }
 11148  004820  0012               	return	
 11149  004822                     l549:
 11150                           
 11151                           ; BSR set to: 0
 11152                           ;display_lcd.c: 308: else
 11153                           ;display_lcd.c: 309: {
 11154                           ;display_lcd.c: 310: endereco = 0x00U;
 11155                           
 11156                           ; BSR set to: 0
 11157  004822  0E00               	movlw	0
 11158  004824  6F65               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 11159  004826  0012               	return	
 11160  004828                     __end_of_posicao_cursor_lcd:
 11161                           	opt stack 0
 11162                           tosu	equ	0xFFF
 11163                           tosh	equ	0xFFE
 11164                           tosl	equ	0xFFD
 11165                           pclath	equ	0xFFA
 11166                           tblptru	equ	0xFF8
 11167                           tblptrh	equ	0xFF7
 11168                           tblptrl	equ	0xFF6
 11169                           tablat	equ	0xFF5
 11170                           prodh	equ	0xFF4
 11171                           prodl	equ	0xFF3
 11172                           intcon	equ	0xFF2
 11173                           intcon2	equ	0xFF1
 11174                           intcon3	equ	0xFF0
 11175                           postinc0	equ	0xFEE
 11176                           wreg	equ	0xFE8
 11177                           indf1	equ	0xFE7
 11178                           postinc1	equ	0xFE6
 11179                           postdec1	equ	0xFE5
 11180                           fsr1h	equ	0xFE2
 11181                           fsr1l	equ	0xFE1
 11182                           indf2	equ	0xFDF
 11183                           postinc2	equ	0xFDE
 11184                           postdec2	equ	0xFDD
 11185                           plusw2	equ	0xFDB
 11186                           fsr2h	equ	0xFDA
 11187                           fsr2l	equ	0xFD9
 11188                           status	equ	0xFD8
 11189                           
 11190 ;; *************** function _endereco_cursor_lcd *****************
 11191 ;; Defined at:
 11192 ;;		line 218 in file "bibliotecas/display_lcd.c"
 11193 ;; Parameters:    Size  Location     Type
 11194 ;;  endereco        1    wreg     unsigned char 
 11195 ;; Auto vars:     Size  Location     Type
 11196 ;;  endereco        1    2[BANK0 ] unsigned char 
 11197 ;; Return value:  Size  Location     Type
 11198 ;;                  1    wreg      void 
 11199 ;; Registers used:
 11200 ;;		wreg, status,2, status,0, cstack
 11201 ;; Tracked objects:
 11202 ;;		On entry : 0/0
 11203 ;;		On exit  : 0/0
 11204 ;;		Unchanged: 0/0
 11205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11206 ;;      Params:         0       0       0       0       0       0       0       0       0
 11207 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11208 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11209 ;;      Totals:         0       1       0       0       0       0       0       0       0
 11210 ;;Total ram usage:        1 bytes
 11211 ;; Hardware stack levels used:    1
 11212 ;; Hardware stack levels required when called:    4
 11213 ;; This function calls:
 11214 ;;		_delay
 11215 ;; This function is called by:
 11216 ;;		_posicao_cursor_lcd
 11217 ;;		_cria_caractere_lcd
 11218 ;; This function uses a non-reentrant model
 11219 ;;
 11220                           
 11221                           	psect	text37
 11222  0048A0                     __ptext37:
 11223                           	opt stack 0
 11224  0048A0                     _endereco_cursor_lcd:
 11225                           	opt stack 24
 11226                           
 11227                           ; BSR set to: 0
 11228                           ;incstack = 0
 11229                           ;endereco_cursor_lcd@endereco stored from wreg
 11230  0048A0  0100               	movlb	0	; () banked
 11231  0048A2  6F62               	movwf	endereco_cursor_lcd@endereco& (0+255),b
 11232                           
 11233                           ;display_lcd.c: 221: PORTDbits.RD2 = 0;
 11234  0048A4  9483               	bcf	3971,2,c	;volatile
 11235                           
 11236                           ;display_lcd.c: 222: PORTDbits.RD1 = 0;
 11237  0048A6  9283               	bcf	3971,1,c	;volatile
 11238                           
 11239                           ;display_lcd.c: 223: PORTDbits.RD0 = 0;
 11240  0048A8  9083               	bcf	3971,0,c	;volatile
 11241                           
 11242                           ;display_lcd.c: 226: PORTDbits.RD7 = 1;
 11243  0048AA  8E83               	bsf	3971,7,c	;volatile
 11244                           
 11245                           ;display_lcd.c: 227: if(endereco&0b00010000){PORTDbits.RD4=1;}
 11246  0048AC  0100               	movlb	0	; () banked
 11247  0048AE  A962               	btfss	endereco_cursor_lcd@endereco& (0+255),4,b
 11248  0048B0  D002               	goto	l532
 11249                           
 11250                           ; BSR set to: 0
 11251  0048B2  8883               	bsf	3971,4,c	;volatile
 11252  0048B4  D001               	goto	l533
 11253  0048B6                     l532:
 11254                           
 11255                           ; BSR set to: 0
 11256                           ;display_lcd.c: 228: else {PORTDbits.RD4=0;}
 11257  0048B6  9883               	bcf	3971,4,c	;volatile
 11258  0048B8                     l533:
 11259                           
 11260                           ; BSR set to: 0
 11261                           ;display_lcd.c: 229: if(endereco&0b00100000){PORTDbits.RD5=1;}
 11262                           
 11263                           ; BSR set to: 0
 11264  0048B8  AB62               	btfss	endereco_cursor_lcd@endereco& (0+255),5,b
 11265  0048BA  D002               	goto	l534
 11266                           
 11267                           ; BSR set to: 0
 11268  0048BC  8A83               	bsf	3971,5,c	;volatile
 11269  0048BE  D001               	goto	l535
 11270  0048C0                     l534:
 11271                           
 11272                           ; BSR set to: 0
 11273                           ;display_lcd.c: 230: else {PORTDbits.RD5=0;}
 11274  0048C0  9A83               	bcf	3971,5,c	;volatile
 11275  0048C2                     l535:
 11276                           
 11277                           ; BSR set to: 0
 11278                           ;display_lcd.c: 231: if(endereco&0b01000000){PORTDbits.RD6=1;}
 11279                           
 11280                           ; BSR set to: 0
 11281  0048C2  AD62               	btfss	endereco_cursor_lcd@endereco& (0+255),6,b
 11282  0048C4  D002               	goto	l536
 11283                           
 11284                           ; BSR set to: 0
 11285  0048C6  8C83               	bsf	3971,6,c	;volatile
 11286  0048C8  D001               	goto	l537
 11287  0048CA                     l536:
 11288                           
 11289                           ; BSR set to: 0
 11290                           ;display_lcd.c: 232: else {PORTDbits.RD6=0;}
 11291  0048CA  9C83               	bcf	3971,6,c	;volatile
 11292  0048CC                     l537:
 11293                           
 11294                           ; BSR set to: 0
 11295                           ;display_lcd.c: 235: PORTDbits.RD0 = 1;
 11296  0048CC  8083               	bsf	3971,0,c	;volatile
 11297                           
 11298                           ; BSR set to: 0
 11299                           ;display_lcd.c: 236: delay();
 11300  0048CE  EC7F  F028         	call	_delay	;wreg free
 11301                           
 11302                           ;display_lcd.c: 237: PORTDbits.RD0 = 0;
 11303  0048D2  9083               	bcf	3971,0,c	;volatile
 11304                           
 11305                           ;display_lcd.c: 238: delay();
 11306  0048D4  EC7F  F028         	call	_delay	;wreg free
 11307                           
 11308                           ;display_lcd.c: 241: if(endereco&0b00000001){PORTDbits.RD4=1;}
 11309  0048D8  0100               	movlb	0	; () banked
 11310  0048DA  A162               	btfss	endereco_cursor_lcd@endereco& (0+255),0,b
 11311  0048DC  D002               	goto	l538
 11312                           
 11313                           ; BSR set to: 0
 11314  0048DE  8883               	bsf	3971,4,c	;volatile
 11315  0048E0  D001               	goto	l539
 11316  0048E2                     l538:
 11317                           
 11318                           ; BSR set to: 0
 11319                           ;display_lcd.c: 242: else {PORTDbits.RD4=0;}
 11320  0048E2  9883               	bcf	3971,4,c	;volatile
 11321  0048E4                     l539:
 11322                           
 11323                           ; BSR set to: 0
 11324                           ;display_lcd.c: 243: if(endereco&0b00000010){PORTDbits.RD5=1;}
 11325  0048E4  A362               	btfss	endereco_cursor_lcd@endereco& (0+255),1,b
 11326  0048E6  D002               	goto	l540
 11327                           
 11328                           ; BSR set to: 0
 11329  0048E8  8A83               	bsf	3971,5,c	;volatile
 11330  0048EA  D001               	goto	l541
 11331  0048EC                     l540:
 11332                           
 11333                           ; BSR set to: 0
 11334                           ;display_lcd.c: 244: else {PORTDbits.RD5=0;}
 11335  0048EC  9A83               	bcf	3971,5,c	;volatile
 11336  0048EE                     l541:
 11337                           
 11338                           ; BSR set to: 0
 11339                           ;display_lcd.c: 245: if(endereco&0b00000100){PORTDbits.RD6=1;}
 11340  0048EE  A562               	btfss	endereco_cursor_lcd@endereco& (0+255),2,b
 11341  0048F0  D002               	goto	l542
 11342                           
 11343                           ; BSR set to: 0
 11344  0048F2  8C83               	bsf	3971,6,c	;volatile
 11345  0048F4  D001               	goto	l543
 11346  0048F6                     l542:
 11347                           
 11348                           ; BSR set to: 0
 11349                           ;display_lcd.c: 246: else {PORTDbits.RD6=0;}
 11350  0048F6  9C83               	bcf	3971,6,c	;volatile
 11351  0048F8                     l543:
 11352                           
 11353                           ; BSR set to: 0
 11354                           ;display_lcd.c: 247: if(endereco&0b00001000){PORTDbits.RD7=1;}
 11355  0048F8  A762               	btfss	endereco_cursor_lcd@endereco& (0+255),3,b
 11356  0048FA  D002               	goto	l544
 11357                           
 11358                           ; BSR set to: 0
 11359  0048FC  8E83               	bsf	3971,7,c	;volatile
 11360  0048FE  D001               	goto	l545
 11361  004900                     l544:
 11362                           
 11363                           ; BSR set to: 0
 11364                           ;display_lcd.c: 248: else {PORTDbits.RD7=0;}
 11365  004900  9E83               	bcf	3971,7,c	;volatile
 11366  004902                     l545:
 11367                           
 11368                           ; BSR set to: 0
 11369                           ;display_lcd.c: 251: PORTDbits.RD0 = 1;
 11370  004902  8083               	bsf	3971,0,c	;volatile
 11371                           
 11372                           ; BSR set to: 0
 11373                           ;display_lcd.c: 252: delay();
 11374  004904  EC7F  F028         	call	_delay	;wreg free
 11375                           
 11376                           ;display_lcd.c: 253: PORTDbits.RD0 = 0;
 11377  004908  9083               	bcf	3971,0,c	;volatile
 11378                           
 11379                           ;display_lcd.c: 254: delay();
 11380  00490A  EC7F  F028         	call	_delay	;wreg free
 11381  00490E  0012               	return		;funcret
 11382  004910                     __end_of_endereco_cursor_lcd:
 11383                           	opt stack 0
 11384                           tosu	equ	0xFFF
 11385                           tosh	equ	0xFFE
 11386                           tosl	equ	0xFFD
 11387                           pclath	equ	0xFFA
 11388                           tblptru	equ	0xFF8
 11389                           tblptrh	equ	0xFF7
 11390                           tblptrl	equ	0xFF6
 11391                           tablat	equ	0xFF5
 11392                           prodh	equ	0xFF4
 11393                           prodl	equ	0xFF3
 11394                           intcon	equ	0xFF2
 11395                           intcon2	equ	0xFF1
 11396                           intcon3	equ	0xFF0
 11397                           postinc0	equ	0xFEE
 11398                           wreg	equ	0xFE8
 11399                           indf1	equ	0xFE7
 11400                           postinc1	equ	0xFE6
 11401                           postdec1	equ	0xFE5
 11402                           fsr1h	equ	0xFE2
 11403                           fsr1l	equ	0xFE1
 11404                           indf2	equ	0xFDF
 11405                           postinc2	equ	0xFDE
 11406                           postdec2	equ	0xFDD
 11407                           plusw2	equ	0xFDB
 11408                           fsr2h	equ	0xFDA
 11409                           fsr2l	equ	0xFD9
 11410                           status	equ	0xFD8
 11411                           
 11412 ;; *************** function _check_fs *****************
 11413 ;; Defined at:
 11414 ;;		line 623 in file "bibliotecas/tff.c"
 11415 ;; Parameters:    Size  Location     Type
 11416 ;;  sect            4   43[BANK0 ] unsigned long 
 11417 ;; Auto vars:     Size  Location     Type
 11418 ;;  fs              2   49[BANK0 ] PTR struct _FATFS
 11419 ;;		 -> NULL(0), fs(544), 
 11420 ;; Return value:  Size  Location     Type
 11421 ;;                  1    wreg      unsigned char 
 11422 ;; Registers used:
 11423 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11424 ;; Tracked objects:
 11425 ;;		On entry : 0/0
 11426 ;;		On exit  : 0/0
 11427 ;;		Unchanged: 0/0
 11428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11429 ;;      Params:         0       4       0       0       0       0       0       0       0
 11430 ;;      Locals:         0       2       0       0       0       0       0       0       0
 11431 ;;      Temps:          0       2       0       0       0       0       0       0       0
 11432 ;;      Totals:         0       8       0       0       0       0       0       0       0
 11433 ;;Total ram usage:        8 bytes
 11434 ;; Hardware stack levels used:    1
 11435 ;; Hardware stack levels required when called:    8
 11436 ;; This function calls:
 11437 ;;		_disk_read
 11438 ;;		_memcmp
 11439 ;; This function is called by:
 11440 ;;		_auto_mount
 11441 ;; This function uses a non-reentrant model
 11442 ;;
 11443                           
 11444                           	psect	text38
 11445  00458C                     __ptext38:
 11446                           	opt stack 0
 11447  00458C                     _check_fs:
 11448                           	opt stack 18
 11449                           
 11450                           ;tff.c: 627: FATFS *fs = FatFs;
 11451                           
 11452                           ;incstack = 0
 11453  00458C  C0F6  F091         	movff	_FatFs,check_fs@fs
 11454  004590  C0F7  F092         	movff	_FatFs+1,check_fs@fs+1
 11455                           
 11456                           ;tff.c: 629: if (disk_read(0, fs->win, sect, 1) != RES_OK)
 11457  004594  0E20               	movlw	32
 11458  004596  0100               	movlb	0	; () banked
 11459  004598  2591               	addwf	check_fs@fs& (0+255),w,b
 11460  00459A  6F7F               	movwf	disk_read@buff& (0+255),b
 11461  00459C  0E00               	movlw	0
 11462  00459E  2192               	addwfc	(check_fs@fs+1)& (0+255),w,b
 11463  0045A0  6F80               	movwf	(disk_read@buff+1)& (0+255),b
 11464  0045A2  C08B  F081         	movff	check_fs@sect,disk_read@sector
 11465  0045A6  C08C  F082         	movff	check_fs@sect+1,disk_read@sector+1
 11466  0045AA  C08D  F083         	movff	check_fs@sect+2,disk_read@sector+2
 11467  0045AE  C08E  F084         	movff	check_fs@sect+3,disk_read@sector+3
 11468  0045B2  0E01               	movlw	1
 11469  0045B4  6F85               	movwf	disk_read@count& (0+255),b
 11470  0045B6  0E00               	movlw	0
 11471  0045B8  EC7E  F022         	call	_disk_read
 11472  0045BC  0900               	iorlw	0
 11473  0045BE  B4D8               	btfsc	status,2,c
 11474  0045C0  D002               	goto	l1044
 11475                           
 11476                           ;tff.c: 630: return 2;
 11477  0045C2  0E02               	movlw	2
 11478  0045C4  0012               	return	
 11479  0045C6                     l1044:
 11480                           
 11481                           ;tff.c: 631: if ((WORD)(*(WORD*)(BYTE*)(&fs->win[510])) != 0xAA55)
 11482  0045C6  0100               	movlb	0	; () banked
 11483  0045C8  EE22 F01E          	lfsr	2,542
 11484  0045CC  5191               	movf	check_fs@fs& (0+255),w,b
 11485  0045CE  26D9               	addwf	fsr2l,f,c
 11486  0045D0  5192               	movf	(check_fs@fs+1)& (0+255),w,b
 11487  0045D2  22DA               	addwfc	fsr2h,f,c
 11488  0045D4  0E55               	movlw	85
 11489  0045D6  18DE               	xorwf	postinc2,w,c
 11490  0045D8  E104               	bnz	u11810
 11491  0045DA  0EAA               	movlw	170
 11492  0045DC  18DE               	xorwf	postinc2,w,c
 11493  0045DE  B4D8               	btfsc	status,2,c
 11494  0045E0  D002               	goto	l1046
 11495  0045E2                     u11810:
 11496                           
 11497                           ; BSR set to: 0
 11498                           ;tff.c: 632: return 2;
 11499  0045E2  0E02               	movlw	2
 11500                           
 11501                           ; BSR set to: 0
 11502  0045E4  0012               	return	
 11503  0045E6                     l1046:
 11504                           
 11505                           ; BSR set to: 0
 11506                           ;tff.c: 634: if (!memcmp(&fs->win[54], "FAT", 3))
 11507                           
 11508                           ; BSR set to: 0
 11509  0045E6  0E56               	movlw	86
 11510  0045E8  2591               	addwf	check_fs@fs& (0+255),w,b
 11511  0045EA  6F60               	movwf	memcmp@s1& (0+255),b
 11512  0045EC  0E00               	movlw	0
 11513  0045EE  2192               	addwfc	(check_fs@fs+1)& (0+255),w,b
 11514  0045F0  6F61               	movwf	(memcmp@s1+1)& (0+255),b
 11515  0045F2  0EC3               	movlw	low STR_15
 11516  0045F4  6F62               	movwf	memcmp@s2& (0+255),b
 11517  0045F6  0E08               	movlw	high STR_15
 11518  0045F8  6F63               	movwf	(memcmp@s2+1)& (0+255),b
 11519  0045FA  0E00               	movlw	0
 11520  0045FC  6F65               	movwf	(memcmp@n+1)& (0+255),b
 11521  0045FE  0E03               	movlw	3
 11522  004600  6F64               	movwf	memcmp@n& (0+255),b
 11523  004602  EC93  F021         	call	_memcmp	;wreg free
 11524  004606  0100               	movlb	0	; () banked
 11525  004608  5160               	movf	?_memcmp& (0+255),w,b
 11526  00460A  1161               	iorwf	(?_memcmp+1)& (0+255),w,b
 11527  00460C  A4D8               	btfss	status,2,c
 11528  00460E  D002               	goto	l1047
 11529                           
 11530                           ; BSR set to: 0
 11531                           ;tff.c: 635: return 0;
 11532  004610  0E00               	movlw	0
 11533                           
 11534                           ; BSR set to: 0
 11535  004612  0012               	return	
 11536  004614                     l1047:
 11537                           
 11538                           ; BSR set to: 0
 11539                           ;tff.c: 640: return 1;
 11540                           
 11541                           ; BSR set to: 0
 11542  004614  0E01               	movlw	1
 11543  004616  0012               	return	
 11544  004618                     __end_of_check_fs:
 11545                           	opt stack 0
 11546                           tosu	equ	0xFFF
 11547                           tosh	equ	0xFFE
 11548                           tosl	equ	0xFFD
 11549                           pclath	equ	0xFFA
 11550                           tblptru	equ	0xFF8
 11551                           tblptrh	equ	0xFF7
 11552                           tblptrl	equ	0xFF6
 11553                           tablat	equ	0xFF5
 11554                           prodh	equ	0xFF4
 11555                           prodl	equ	0xFF3
 11556                           intcon	equ	0xFF2
 11557                           intcon2	equ	0xFF1
 11558                           intcon3	equ	0xFF0
 11559                           postinc0	equ	0xFEE
 11560                           wreg	equ	0xFE8
 11561                           indf1	equ	0xFE7
 11562                           postinc1	equ	0xFE6
 11563                           postdec1	equ	0xFE5
 11564                           fsr1h	equ	0xFE2
 11565                           fsr1l	equ	0xFE1
 11566                           indf2	equ	0xFDF
 11567                           postinc2	equ	0xFDE
 11568                           postdec2	equ	0xFDD
 11569                           plusw2	equ	0xFDB
 11570                           fsr2h	equ	0xFDA
 11571                           fsr2l	equ	0xFD9
 11572                           status	equ	0xFD8
 11573                           
 11574 ;; *************** function _memcmp *****************
 11575 ;; Defined at:
 11576 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcmp.c"
 11577 ;; Parameters:    Size  Location     Type
 11578 ;;  s1              2    0[BANK0 ] PTR const void 
 11579 ;;		 -> fs.win(512), NULL(0), fs(544), 
 11580 ;;  s2              2    2[BANK0 ] PTR const void 
 11581 ;;		 -> f_opendir@fn(12), f_open@fn(12), STR_15(4), 
 11582 ;;  n               2    4[BANK0 ] unsigned int 
 11583 ;; Auto vars:     Size  Location     Type
 11584 ;;		None
 11585 ;; Return value:  Size  Location     Type
 11586 ;;                  2    0[BANK0 ] int 
 11587 ;; Registers used:
 11588 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 11589 ;; Tracked objects:
 11590 ;;		On entry : 0/0
 11591 ;;		On exit  : 0/0
 11592 ;;		Unchanged: 0/0
 11593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11594 ;;      Params:         0       6       0       0       0       0       0       0       0
 11595 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11596 ;;      Temps:          0       3       0       0       0       0       0       0       0
 11597 ;;      Totals:         0       9       0       0       0       0       0       0       0
 11598 ;;Total ram usage:        9 bytes
 11599 ;; Hardware stack levels used:    1
 11600 ;; Hardware stack levels required when called:    3
 11601 ;; This function calls:
 11602 ;;		Nothing
 11603 ;; This function is called by:
 11604 ;;		_trace_path
 11605 ;;		_check_fs
 11606 ;; This function uses a non-reentrant model
 11607 ;;
 11608                           
 11609                           	psect	text39
 11610  004326                     __ptext39:
 11611                           	opt stack 0
 11612  004326                     _memcmp:
 11613                           	opt stack 23
 11614                           
 11615                           ;incstack = 0
 11616  004326  D043               	goto	l1770
 11617  004328                     l9217:
 11618  004328  C060  FFD9         	movff	memcmp@s1,fsr2l
 11619  00432C  C061  FFDA         	movff	memcmp@s1+1,fsr2h
 11620  004330  50DF               	movf	indf2,w,c
 11621  004332  0100               	movlb	0	; () banked
 11622  004334  6F66               	movwf	??_memcmp& (0+255),b
 11623  004336  C062  FFF6         	movff	memcmp@s2,tblptrl
 11624  00433A  C063  FFF7         	movff	memcmp@s2+1,tblptrh
 11625  00433E  6AF8               	clrf	tblptru,c
 11626  004340  0E07               	movlw	(high __ramtop+-1)
 11627  004342  64F7               	cpfsgt	tblptrh,c
 11628  004344  D003               	bra	u11087
 11629  004346  0008               	tblrd		*
 11630  004348  50F5               	movf	tablat,w,c
 11631  00434A  D005               	bra	u11080
 11632  00434C                     u11087:
 11633  00434C  CFF6 FFE9          	movff	tblptrl,fsr0l
 11634  004350  CFF7 FFEA          	movff	tblptrh,fsr0h
 11635  004354  50EF               	movf	indf0,w,c
 11636  004356                     u11080:
 11637  004356  0100               	movlb	0	; () banked
 11638  004358  1966               	xorwf	??_memcmp& (0+255),w,b
 11639  00435A  B4D8               	btfsc	status,2,c
 11640  00435C  D024               	goto	l1772
 11641                           
 11642                           ; BSR set to: 0
 11643  00435E  C062  FFF6         	movff	memcmp@s2,tblptrl
 11644  004362  C063  FFF7         	movff	memcmp@s2+1,tblptrh
 11645  004366  6AF8               	clrf	tblptru,c
 11646  004368  0E07               	movlw	(high __ramtop+-1)
 11647  00436A  64F7               	cpfsgt	tblptrh,c
 11648  00436C  D003               	bra	u11107
 11649  00436E  0008               	tblrd		*
 11650  004370  50F5               	movf	tablat,w,c
 11651  004372  D005               	bra	u11100
 11652  004374                     u11107:
 11653  004374  CFF6 FFE9          	movff	tblptrl,fsr0l
 11654  004378  CFF7 FFEA          	movff	tblptrh,fsr0h
 11655  00437C  50EF               	movf	indf0,w,c
 11656  00437E                     u11100:
 11657  00437E  0100               	movlb	0	; () banked
 11658  004380  6F66               	movwf	??_memcmp& (0+255),b
 11659  004382  6B67               	clrf	(??_memcmp+1)& (0+255),b
 11660  004384  1F66               	comf	??_memcmp& (0+255),f,b
 11661  004386  1F67               	comf	(??_memcmp+1)& (0+255),f,b
 11662  004388  4B66               	infsnz	??_memcmp& (0+255),f,b
 11663  00438A  2B67               	incf	(??_memcmp+1)& (0+255),f,b
 11664  00438C  C060  FFD9         	movff	memcmp@s1,fsr2l
 11665  004390  C061  FFDA         	movff	memcmp@s1+1,fsr2h
 11666  004394  50DF               	movf	indf2,w,c
 11667  004396  6F68               	movwf	(??_memcmp+2)& (0+255),b
 11668  004398  5168               	movf	(??_memcmp+2)& (0+255),w,b
 11669  00439A  2566               	addwf	??_memcmp& (0+255),w,b
 11670  00439C  6F60               	movwf	?_memcmp& (0+255),b
 11671  00439E  0E00               	movlw	0
 11672  0043A0  2167               	addwfc	(??_memcmp+1)& (0+255),w,b
 11673  0043A2  6F61               	movwf	(?_memcmp+1)& (0+255),b
 11674                           
 11675                           ; BSR set to: 0
 11676  0043A4  0012               	return	
 11677  0043A6                     l1772:
 11678                           
 11679                           ; BSR set to: 0
 11680                           
 11681                           ; BSR set to: 0
 11682  0043A6  4B60               	infsnz	memcmp@s1& (0+255),f,b
 11683  0043A8  2B61               	incf	(memcmp@s1+1)& (0+255),f,b
 11684  0043AA  4B62               	infsnz	memcmp@s2& (0+255),f,b
 11685  0043AC  2B63               	incf	(memcmp@s2+1)& (0+255),f,b
 11686  0043AE                     l1770:
 11687                           
 11688                           ; BSR set to: 0
 11689  0043AE  0100               	movlb	0	; () banked
 11690  0043B0  0764               	decf	memcmp@n& (0+255),f,b
 11691  0043B2  A0D8               	btfss	status,0,c
 11692  0043B4  0765               	decf	(memcmp@n+1)& (0+255),f,b
 11693  0043B6  2964               	incf	memcmp@n& (0+255),w,b
 11694  0043B8  E1B7               	bnz	l9217
 11695  0043BA  2965               	incf	(memcmp@n+1)& (0+255),w,b
 11696  0043BC  A4D8               	btfss	status,2,c
 11697  0043BE  D7B4               	goto	l1771
 11698                           
 11699                           ; BSR set to: 0
 11700                           
 11701                           ; BSR set to: 0
 11702  0043C0  0E00               	movlw	0
 11703  0043C2  6F61               	movwf	(?_memcmp+1)& (0+255),b
 11704  0043C4  0E00               	movlw	0
 11705  0043C6  6F60               	movwf	?_memcmp& (0+255),b
 11706  0043C8  0012               	return	
 11707  0043CA                     __end_of_memcmp:
 11708                           	opt stack 0
 11709                           tosu	equ	0xFFF
 11710                           tosh	equ	0xFFE
 11711                           tosl	equ	0xFFD
 11712                           pclath	equ	0xFFA
 11713                           tblptru	equ	0xFF8
 11714                           tblptrh	equ	0xFF7
 11715                           tblptrl	equ	0xFF6
 11716                           tablat	equ	0xFF5
 11717                           prodh	equ	0xFF4
 11718                           prodl	equ	0xFF3
 11719                           intcon	equ	0xFF2
 11720                           intcon2	equ	0xFF1
 11721                           intcon3	equ	0xFF0
 11722                           indf0	equ	0xFEF
 11723                           postinc0	equ	0xFEE
 11724                           fsr0h	equ	0xFEA
 11725                           fsr0l	equ	0xFE9
 11726                           wreg	equ	0xFE8
 11727                           indf1	equ	0xFE7
 11728                           postinc1	equ	0xFE6
 11729                           postdec1	equ	0xFE5
 11730                           fsr1h	equ	0xFE2
 11731                           fsr1l	equ	0xFE1
 11732                           indf2	equ	0xFDF
 11733                           postinc2	equ	0xFDE
 11734                           postdec2	equ	0xFDD
 11735                           plusw2	equ	0xFDB
 11736                           fsr2h	equ	0xFDA
 11737                           fsr2l	equ	0xFD9
 11738                           status	equ	0xFD8
 11739                           
 11740 ;; *************** function ___lmul *****************
 11741 ;; Defined at:
 11742 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 11743 ;; Parameters:    Size  Location     Type
 11744 ;;  multiplier      4    0[BANK0 ] unsigned long 
 11745 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 11746 ;; Auto vars:     Size  Location     Type
 11747 ;;  product         4    8[BANK0 ] unsigned long 
 11748 ;; Return value:  Size  Location     Type
 11749 ;;                  4    0[BANK0 ] unsigned long 
 11750 ;; Registers used:
 11751 ;;		wreg, status,2, status,0
 11752 ;; Tracked objects:
 11753 ;;		On entry : 0/0
 11754 ;;		On exit  : 0/0
 11755 ;;		Unchanged: 0/0
 11756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11757 ;;      Params:         0       8       0       0       0       0       0       0       0
 11758 ;;      Locals:         0       4       0       0       0       0       0       0       0
 11759 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11760 ;;      Totals:         0      12       0       0       0       0       0       0       0
 11761 ;;Total ram usage:       12 bytes
 11762 ;; Hardware stack levels used:    1
 11763 ;; Hardware stack levels required when called:    3
 11764 ;; This function calls:
 11765 ;;		Nothing
 11766 ;; This function is called by:
 11767 ;;		_clust2sect
 11768 ;;		_auto_mount
 11769 ;; This function uses a non-reentrant model
 11770 ;;
 11771                           
 11772                           	psect	text40
 11773  004B02                     __ptext40:
 11774                           	opt stack 0
 11775  004B02                     ___lmul:
 11776                           	opt stack 20
 11777                           
 11778                           ; BSR set to: 0
 11779                           ;incstack = 0
 11780  004B02  0E00               	movlw	0
 11781  004B04  0100               	movlb	0	; () banked
 11782  004B06  6F68               	movwf	___lmul@product& (0+255),b
 11783  004B08  0E00               	movlw	0
 11784  004B0A  6F69               	movwf	(___lmul@product+1)& (0+255),b
 11785  004B0C  0E00               	movlw	0
 11786  004B0E  6F6A               	movwf	(___lmul@product+2)& (0+255),b
 11787  004B10  0E00               	movlw	0
 11788  004B12  6F6B               	movwf	(___lmul@product+3)& (0+255),b
 11789  004B14                     
 11790                           ; BSR set to: 0
 11791                           
 11792                           ; BSR set to: 0
 11793  004B14  A160               	btfss	___lmul@multiplier& (0+255),0,b
 11794  004B16  D008               	goto	l1337
 11795                           
 11796                           ; BSR set to: 0
 11797  004B18  5164               	movf	___lmul@multiplicand& (0+255),w,b
 11798  004B1A  2768               	addwf	___lmul@product& (0+255),f,b
 11799  004B1C  5165               	movf	(___lmul@multiplicand+1)& (0+255),w,b
 11800  004B1E  2369               	addwfc	(___lmul@product+1)& (0+255),f,b
 11801  004B20  5166               	movf	(___lmul@multiplicand+2)& (0+255),w,b
 11802  004B22  236A               	addwfc	(___lmul@product+2)& (0+255),f,b
 11803  004B24  5167               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 11804  004B26  236B               	addwfc	(___lmul@product+3)& (0+255),f,b
 11805  004B28                     l1337:
 11806                           
 11807                           ; BSR set to: 0
 11808                           
 11809                           ; BSR set to: 0
 11810  004B28  90D8               	bcf	status,0,c
 11811  004B2A  3764               	rlcf	___lmul@multiplicand& (0+255),f,b
 11812  004B2C  3765               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 11813  004B2E  3766               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 11814  004B30  3767               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 11815                           
 11816                           ; BSR set to: 0
 11817  004B32  90D8               	bcf	status,0,c
 11818  004B34  3363               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 11819  004B36  3362               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 11820  004B38  3361               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 11821  004B3A  3360               	rrcf	___lmul@multiplier& (0+255),f,b
 11822  004B3C  5160               	movf	___lmul@multiplier& (0+255),w,b
 11823  004B3E  1161               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 11824  004B40  1162               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 11825  004B42  1163               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 11826  004B44  A4D8               	btfss	status,2,c
 11827  004B46  D7E6               	goto	l1336
 11828                           
 11829                           ; BSR set to: 0
 11830  004B48  C068  F060         	movff	___lmul@product,?___lmul
 11831  004B4C  C069  F061         	movff	___lmul@product+1,?___lmul+1
 11832  004B50  C06A  F062         	movff	___lmul@product+2,?___lmul+2
 11833  004B54  C06B  F063         	movff	___lmul@product+3,?___lmul+3
 11834                           
 11835                           ; BSR set to: 0
 11836  004B58  0012               	return		;funcret
 11837  004B5A                     __end_of___lmul:
 11838                           	opt stack 0
 11839                           tosu	equ	0xFFF
 11840                           tosh	equ	0xFFE
 11841                           tosl	equ	0xFFD
 11842                           pclath	equ	0xFFA
 11843                           tblptru	equ	0xFF8
 11844                           tblptrh	equ	0xFF7
 11845                           tblptrl	equ	0xFF6
 11846                           tablat	equ	0xFF5
 11847                           prodh	equ	0xFF4
 11848                           prodl	equ	0xFF3
 11849                           intcon	equ	0xFF2
 11850                           intcon2	equ	0xFF1
 11851                           intcon3	equ	0xFF0
 11852                           indf0	equ	0xFEF
 11853                           postinc0	equ	0xFEE
 11854                           fsr0h	equ	0xFEA
 11855                           fsr0l	equ	0xFE9
 11856                           wreg	equ	0xFE8
 11857                           indf1	equ	0xFE7
 11858                           postinc1	equ	0xFE6
 11859                           postdec1	equ	0xFE5
 11860                           fsr1h	equ	0xFE2
 11861                           fsr1l	equ	0xFE1
 11862                           indf2	equ	0xFDF
 11863                           postinc2	equ	0xFDE
 11864                           postdec2	equ	0xFDD
 11865                           plusw2	equ	0xFDB
 11866                           fsr2h	equ	0xFDA
 11867                           fsr2l	equ	0xFD9
 11868                           status	equ	0xFD8
 11869                           
 11870 ;; *************** function _f_mount *****************
 11871 ;; Defined at:
 11872 ;;		line 793 in file "bibliotecas/tff.c"
 11873 ;; Parameters:    Size  Location     Type
 11874 ;;  drv             1    wreg     unsigned char 
 11875 ;;  fs              2    0[BANK0 ] PTR struct _FATFS
 11876 ;;		 -> fs(544), 
 11877 ;; Auto vars:     Size  Location     Type
 11878 ;;  drv             1    2[BANK0 ] unsigned char 
 11879 ;; Return value:  Size  Location     Type
 11880 ;;                  1    wreg      enum E3972
 11881 ;; Registers used:
 11882 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11883 ;; Tracked objects:
 11884 ;;		On entry : 0/0
 11885 ;;		On exit  : 0/0
 11886 ;;		Unchanged: 0/0
 11887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11888 ;;      Params:         0       2       0       0       0       0       0       0       0
 11889 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11890 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11891 ;;      Totals:         0       3       0       0       0       0       0       0       0
 11892 ;;Total ram usage:        3 bytes
 11893 ;; Hardware stack levels used:    1
 11894 ;; Hardware stack levels required when called:    3
 11895 ;; This function calls:
 11896 ;;		Nothing
 11897 ;; This function is called by:
 11898 ;;		_escrita_sdcard
 11899 ;;		_sdcard_init
 11900 ;; This function uses a non-reentrant model
 11901 ;;
 11902                           
 11903                           	psect	text41
 11904  004CA6                     __ptext41:
 11905                           	opt stack 0
 11906  004CA6                     _f_mount:
 11907                           	opt stack 25
 11908                           
 11909                           ; BSR set to: 0
 11910                           ;incstack = 0
 11911                           ;f_mount@drv stored from wreg
 11912  004CA6  0100               	movlb	0	; () banked
 11913  004CA8  6F62               	movwf	f_mount@drv& (0+255),b
 11914                           
 11915                           ;tff.c: 798: if (drv) return FR_INVALID_DRIVE;
 11916  004CAA  0100               	movlb	0	; () banked
 11917  004CAC  5162               	movf	f_mount@drv& (0+255),w,b
 11918  004CAE  B4D8               	btfsc	status,2,c
 11919  004CB0  D002               	goto	l1079
 11920                           
 11921                           ; BSR set to: 0
 11922  004CB2  0E05               	movlw	5
 11923                           
 11924                           ; BSR set to: 0
 11925  004CB4  0012               	return	
 11926  004CB6                     l1079:
 11927                           
 11928                           ; BSR set to: 0
 11929                           ;tff.c: 800: if (FatFs) FatFs->fs_type = 0;
 11930                           
 11931                           ; BSR set to: 0
 11932  004CB6  51F6               	movf	_FatFs& (0+255),w,b
 11933  004CB8  11F7               	iorwf	(_FatFs+1)& (0+255),w,b
 11934  004CBA  B4D8               	btfsc	status,2,c
 11935  004CBC  D008               	goto	l1081
 11936                           
 11937                           ; BSR set to: 0
 11938  004CBE  EE20 F01C          	lfsr	2,28
 11939  004CC2  51F6               	movf	_FatFs& (0+255),w,b
 11940  004CC4  26D9               	addwf	fsr2l,f,c
 11941  004CC6  51F7               	movf	(_FatFs+1)& (0+255),w,b
 11942  004CC8  22DA               	addwfc	fsr2h,f,c
 11943  004CCA  0E00               	movlw	0
 11944  004CCC  6EDF               	movwf	indf2,c
 11945  004CCE                     l1081:
 11946                           
 11947                           ; BSR set to: 0
 11948                           ;tff.c: 802: FatFs = fs;
 11949                           
 11950                           ; BSR set to: 0
 11951  004CCE  C060  F0F6         	movff	f_mount@fs,_FatFs
 11952  004CD2  C061  F0F7         	movff	f_mount@fs+1,_FatFs+1
 11953                           
 11954                           ; BSR set to: 0
 11955                           ;tff.c: 803: if (fs) fs->fs_type = 0;
 11956  004CD6  5160               	movf	f_mount@fs& (0+255),w,b
 11957  004CD8  1161               	iorwf	(f_mount@fs+1)& (0+255),w,b
 11958  004CDA  B4D8               	btfsc	status,2,c
 11959  004CDC  D008               	goto	l1082
 11960                           
 11961                           ; BSR set to: 0
 11962  004CDE  EE20 F01C          	lfsr	2,28
 11963  004CE2  5160               	movf	f_mount@fs& (0+255),w,b
 11964  004CE4  26D9               	addwf	fsr2l,f,c
 11965  004CE6  5161               	movf	(f_mount@fs+1)& (0+255),w,b
 11966  004CE8  22DA               	addwfc	fsr2h,f,c
 11967  004CEA  0E00               	movlw	0
 11968  004CEC  6EDF               	movwf	indf2,c
 11969  004CEE                     l1082:
 11970                           
 11971                           ; BSR set to: 0
 11972                           ;tff.c: 805: return FR_OK;
 11973                           
 11974                           ; BSR set to: 0
 11975  004CEE  0E00               	movlw	0
 11976  004CF0  0012               	return	
 11977  004CF2                     __end_of_f_mount:
 11978                           	opt stack 0
 11979                           tosu	equ	0xFFF
 11980                           tosh	equ	0xFFE
 11981                           tosl	equ	0xFFD
 11982                           pclath	equ	0xFFA
 11983                           tblptru	equ	0xFF8
 11984                           tblptrh	equ	0xFF7
 11985                           tblptrl	equ	0xFF6
 11986                           tablat	equ	0xFF5
 11987                           prodh	equ	0xFF4
 11988                           prodl	equ	0xFF3
 11989                           intcon	equ	0xFF2
 11990                           intcon2	equ	0xFF1
 11991                           intcon3	equ	0xFF0
 11992                           indf0	equ	0xFEF
 11993                           postinc0	equ	0xFEE
 11994                           fsr0h	equ	0xFEA
 11995                           fsr0l	equ	0xFE9
 11996                           wreg	equ	0xFE8
 11997                           indf1	equ	0xFE7
 11998                           postinc1	equ	0xFE6
 11999                           postdec1	equ	0xFE5
 12000                           fsr1h	equ	0xFE2
 12001                           fsr1l	equ	0xFE1
 12002                           indf2	equ	0xFDF
 12003                           postinc2	equ	0xFDE
 12004                           postdec2	equ	0xFDD
 12005                           plusw2	equ	0xFDB
 12006                           fsr2h	equ	0xFDA
 12007                           fsr2l	equ	0xFD9
 12008                           status	equ	0xFD8
 12009                           
 12010 ;; *************** function _f_lseek *****************
 12011 ;; Defined at:
 12012 ;;		line 1132 in file "bibliotecas/tff.c"
 12013 ;; Parameters:    Size  Location     Type
 12014 ;;  fp              2  100[BANK0 ] PTR struct _FIL
 12015 ;;		 -> fil(28), 
 12016 ;;  ofs             4  102[BANK0 ] unsigned long 
 12017 ;; Auto vars:     Size  Location     Type
 12018 ;;  csize           4  123[BANK0 ] unsigned long 
 12019 ;;  ifptr           4  119[BANK0 ] unsigned long 
 12020 ;;  clust           2  127[BANK0 ] unsigned short 
 12021 ;;  res             1  118[BANK0 ] enum E155
 12022 ;; Return value:  Size  Location     Type
 12023 ;;                  1    wreg      enum E3972
 12024 ;; Registers used:
 12025 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12026 ;; Tracked objects:
 12027 ;;		On entry : 0/0
 12028 ;;		On exit  : 0/0
 12029 ;;		Unchanged: 0/0
 12030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12031 ;;      Params:         0       6       0       0       0       0       0       0       0
 12032 ;;      Locals:         0      11       0       0       0       0       0       0       0
 12033 ;;      Temps:          0      12       0       0       0       0       0       0       0
 12034 ;;      Totals:         0      29       0       0       0       0       0       0       0
 12035 ;;Total ram usage:       29 bytes
 12036 ;; Hardware stack levels used:    1
 12037 ;; Hardware stack levels required when called:   11
 12038 ;; This function calls:
 12039 ;;		___lldiv
 12040 ;;		_create_chain
 12041 ;;		_get_cluster
 12042 ;;		_validate
 12043 ;; This function is called by:
 12044 ;;		_escrita_sdcard
 12045 ;; This function uses a non-reentrant model
 12046 ;;
 12047                           
 12048                           	psect	text42
 12049  00138C                     __ptext42:
 12050                           	opt stack 0
 12051  00138C                     _f_lseek:
 12052                           	opt stack 17
 12053                           
 12054                           ;tff.c: 1137: FRESULT res;
 12055                           ;tff.c: 1138: CLUST clust;
 12056                           ;tff.c: 1139: DWORD csize, ifptr;
 12057                           ;tff.c: 1142: res = validate(fp->fs, fp->id);
 12058                           
 12059                           ; BSR set to: 0
 12060                           ;incstack = 0
 12061  00138C  0100               	movlb	0	; () banked
 12062  00138E  EE20 F004          	lfsr	2,4
 12063  001392  51C4               	movf	f_lseek@fp& (0+255),w,b
 12064  001394  26D9               	addwf	fsr2l,f,c
 12065  001396  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 12066  001398  22DA               	addwfc	fsr2h,f,c
 12067  00139A  CFDE F067          	movff	postinc2,validate@fs
 12068  00139E  CFDD F068          	movff	postdec2,validate@fs+1
 12069  0013A2  C0C4  FFD9         	movff	f_lseek@fp,fsr2l
 12070  0013A6  C0C5  FFDA         	movff	f_lseek@fp+1,fsr2h
 12071  0013AA  CFDE F069          	movff	postinc2,validate@id
 12072  0013AE  CFDD F06A          	movff	postdec2,validate@id+1
 12073  0013B2  EC79  F026         	call	_validate	;wreg free
 12074  0013B6  0100               	movlb	0	; () banked
 12075  0013B8  6FD6               	movwf	f_lseek@res& (0+255),b
 12076                           
 12077                           ; BSR set to: 0
 12078                           ;tff.c: 1143: if (res != FR_OK) return res;
 12079  0013BA  51D6               	movf	f_lseek@res& (0+255),w,b
 12080  0013BC  A4D8               	btfss	status,2,c
 12081  0013BE  0012               	return	
 12082                           
 12083                           ; BSR set to: 0
 12084                           ;tff.c: 1144: if (fp->flag & 0x80) return FR_RW_ERROR;
 12085                           
 12086                           ; BSR set to: 0
 12087                           
 12088                           ; BSR set to: 0
 12089                           ;	Return value of _f_lseek is never used
 12090  0013C0  EE20 F002          	lfsr	2,2
 12091  0013C4  51C4               	movf	f_lseek@fp& (0+255),w,b
 12092  0013C6  26D9               	addwf	fsr2l,f,c
 12093  0013C8  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 12094  0013CA  22DA               	addwfc	fsr2h,f,c
 12095  0013CC  BEDF               	btfsc	indf2,7,c
 12096  0013CE  0012               	return	
 12097                           
 12098                           ; BSR set to: 0
 12099                           ;tff.c: 1145: if (ofs > fp->fsize
 12100                           ;tff.c: 1147: && !(fp->flag & 0x02)
 12101                           ;tff.c: 1149: ) ofs = fp->fsize;
 12102                           
 12103                           ; BSR set to: 0
 12104                           
 12105                           ; BSR set to: 0
 12106                           ;	Return value of _f_lseek is never used
 12107  0013D0  EE20 F00A          	lfsr	2,10
 12108  0013D4  51C4               	movf	f_lseek@fp& (0+255),w,b
 12109  0013D6  26D9               	addwf	fsr2l,f,c
 12110  0013D8  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 12111  0013DA  22DA               	addwfc	fsr2h,f,c
 12112  0013DC  51C6               	movf	f_lseek@ofs& (0+255),w,b
 12113  0013DE  5CDE               	subwf	postinc2,w,c
 12114  0013E0  51C7               	movf	(f_lseek@ofs+1)& (0+255),w,b
 12115  0013E2  58DE               	subwfb	postinc2,w,c
 12116  0013E4  51C8               	movf	(f_lseek@ofs+2)& (0+255),w,b
 12117  0013E6  58DE               	subwfb	postinc2,w,c
 12118  0013E8  51C9               	movf	(f_lseek@ofs+3)& (0+255),w,b
 12119  0013EA  58DE               	subwfb	postinc2,w,c
 12120  0013EC  B0D8               	btfsc	status,0,c
 12121  0013EE  D016               	goto	l1180
 12122                           
 12123                           ; BSR set to: 0
 12124  0013F0  EE20 F002          	lfsr	2,2
 12125  0013F4  51C4               	movf	f_lseek@fp& (0+255),w,b
 12126  0013F6  26D9               	addwf	fsr2l,f,c
 12127  0013F8  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 12128  0013FA  22DA               	addwfc	fsr2h,f,c
 12129  0013FC  B2DF               	btfsc	indf2,1,c
 12130  0013FE  D00E               	goto	l1180
 12131                           
 12132                           ; BSR set to: 0
 12133  001400  EE20 F00A          	lfsr	2,10
 12134  001404  51C4               	movf	f_lseek@fp& (0+255),w,b
 12135  001406  26D9               	addwf	fsr2l,f,c
 12136  001408  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 12137  00140A  22DA               	addwfc	fsr2h,f,c
 12138  00140C  CFDE F0C6          	movff	postinc2,f_lseek@ofs
 12139  001410  CFDE F0C7          	movff	postinc2,f_lseek@ofs+1
 12140  001414  CFDE F0C8          	movff	postinc2,f_lseek@ofs+2
 12141  001418  CFDE F0C9          	movff	postinc2,f_lseek@ofs+3
 12142  00141C                     l1180:
 12143                           
 12144                           ; BSR set to: 0
 12145                           ;tff.c: 1151: ifptr = fp->fptr;
 12146  00141C  EE20 F006          	lfsr	2,6
 12147  001420  51C4               	movf	f_lseek@fp& (0+255),w,b
 12148  001422  26D9               	addwf	fsr2l,f,c
 12149  001424  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 12150  001426  22DA               	addwfc	fsr2h,f,c
 12151  001428  CFDE F0D7          	movff	postinc2,f_lseek@ifptr
 12152  00142C  CFDE F0D8          	movff	postinc2,f_lseek@ifptr+1
 12153  001430  CFDE F0D9          	movff	postinc2,f_lseek@ifptr+2
 12154  001434  CFDE F0DA          	movff	postinc2,f_lseek@ifptr+3
 12155                           
 12156                           ;tff.c: 1152: fp->fptr = 0; fp->csect = 255;
 12157  001438  EE20 F006          	lfsr	2,6
 12158  00143C  51C4               	movf	f_lseek@fp& (0+255),w,b
 12159  00143E  26D9               	addwf	fsr2l,f,c
 12160  001440  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 12161  001442  22DA               	addwfc	fsr2h,f,c
 12162  001444  6ADE               	clrf	postinc2,c
 12163  001446  6ADE               	clrf	postinc2,c
 12164  001448  6ADE               	clrf	postinc2,c
 12165  00144A  6ADD               	clrf	postdec2,c
 12166  00144C  EE20 F003          	lfsr	2,3
 12167  001450  51C4               	movf	f_lseek@fp& (0+255),w,b
 12168  001452  26D9               	addwf	fsr2l,f,c
 12169  001454  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 12170  001456  22DA               	addwfc	fsr2h,f,c
 12171  001458  0EFF               	movlw	255
 12172  00145A  6EDF               	movwf	indf2,c
 12173                           
 12174                           ; BSR set to: 0
 12175                           ;tff.c: 1153: if (ofs > 0) {
 12176  00145C  51C6               	movf	f_lseek@ofs& (0+255),w,b
 12177  00145E  11C7               	iorwf	(f_lseek@ofs+1)& (0+255),w,b
 12178  001460  11C8               	iorwf	(f_lseek@ofs+2)& (0+255),w,b
 12179  001462  11C9               	iorwf	(f_lseek@ofs+3)& (0+255),w,b
 12180  001464  B4D8               	btfsc	status,2,c
 12181  001466  D19B               	goto	l1197
 12182                           
 12183                           ; BSR set to: 0
 12184                           ;tff.c: 1154: csize = (DWORD)fp->fs->csize * 512U;
 12185  001468  EE20 F004          	lfsr	2,4
 12186  00146C  51C4               	movf	f_lseek@fp& (0+255),w,b
 12187  00146E  26D9               	addwf	fsr2l,f,c
 12188  001470  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 12189  001472  22DA               	addwfc	fsr2h,f,c
 12190  001474  EE10 F01D          	lfsr	1,29
 12191  001478  50DE               	movf	postinc2,w,c
 12192  00147A  26E1               	addwf	fsr1l,f,c
 12193  00147C  50DD               	movf	postdec2,w,c
 12194  00147E  22E2               	addwfc	fsr1h,f,c
 12195  001480  50E7               	movf	indf1,w,c
 12196  001482  6FCA               	movwf	??_f_lseek& (0+255),b
 12197  001484  C0CA  F0CB         	movff	??_f_lseek,??_f_lseek+1
 12198  001488  6BCC               	clrf	(??_f_lseek+2)& (0+255),b
 12199  00148A  6BCD               	clrf	(??_f_lseek+3)& (0+255),b
 12200  00148C  6BCE               	clrf	(??_f_lseek+4)& (0+255),b
 12201  00148E  0E09               	movlw	9
 12202  001490                     u12925:
 12203  001490  90D8               	bcf	status,0,c
 12204  001492  37CB               	rlcf	(??_f_lseek+1)& (0+255),f,b
 12205  001494  37CC               	rlcf	(??_f_lseek+2)& (0+255),f,b
 12206  001496  37CD               	rlcf	(??_f_lseek+3)& (0+255),f,b
 12207  001498  37CE               	rlcf	(??_f_lseek+4)& (0+255),f,b
 12208  00149A  2EE8               	decfsz	wreg,f,c
 12209  00149C  D7F9               	goto	u12925
 12210  00149E  C0CB  F0DB         	movff	??_f_lseek+1,f_lseek@csize
 12211  0014A2  C0CC  F0DC         	movff	??_f_lseek+2,f_lseek@csize+1
 12212  0014A6  C0CD  F0DD         	movff	??_f_lseek+3,f_lseek@csize+2
 12213  0014AA  C0CE  F0DE         	movff	??_f_lseek+4,f_lseek@csize+3
 12214                           
 12215                           ; BSR set to: 0
 12216                           ;tff.c: 1155: if (ifptr > 0 &&
 12217                           ;tff.c: 1156: (ofs - 1) / csize >= (ifptr - 1) / csize) {
 12218  0014AE  51D7               	movf	f_lseek@ifptr& (0+255),w,b
 12219  0014B0  11D8               	iorwf	(f_lseek@ifptr+1)& (0+255),w,b
 12220  0014B2  11D9               	iorwf	(f_lseek@ifptr+2)& (0+255),w,b
 12221  0014B4  11DA               	iorwf	(f_lseek@ifptr+3)& (0+255),w,b
 12222  0014B6  B4D8               	btfsc	status,2,c
 12223  0014B8  D08F               	goto	l1182
 12224                           
 12225                           ; BSR set to: 0
 12226  0014BA  0EFF               	movlw	255
 12227  0014BC  25C6               	addwf	f_lseek@ofs& (0+255),w,b
 12228  0014BE  6F60               	movwf	___lldiv@dividend& (0+255),b
 12229  0014C0  0EFF               	movlw	255
 12230  0014C2  21C7               	addwfc	(f_lseek@ofs+1)& (0+255),w,b
 12231  0014C4  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
 12232  0014C6  0EFF               	movlw	255
 12233  0014C8  21C8               	addwfc	(f_lseek@ofs+2)& (0+255),w,b
 12234  0014CA  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
 12235  0014CC  0EFF               	movlw	255
 12236  0014CE  21C9               	addwfc	(f_lseek@ofs+3)& (0+255),w,b
 12237  0014D0  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
 12238  0014D2  C0DB  F064         	movff	f_lseek@csize,___lldiv@divisor
 12239  0014D6  C0DC  F065         	movff	f_lseek@csize+1,___lldiv@divisor+1
 12240  0014DA  C0DD  F066         	movff	f_lseek@csize+2,___lldiv@divisor+2
 12241  0014DE  C0DE  F067         	movff	f_lseek@csize+3,___lldiv@divisor+3
 12242  0014E2  EC93  F023         	call	___lldiv	;wreg free
 12243  0014E6  C060  F0CA         	movff	?___lldiv,??_f_lseek
 12244  0014EA  C061  F0CB         	movff	?___lldiv+1,??_f_lseek+1
 12245  0014EE  C062  F0CC         	movff	?___lldiv+2,??_f_lseek+2
 12246  0014F2  C063  F0CD         	movff	?___lldiv+3,??_f_lseek+3
 12247  0014F6  0EFF               	movlw	255
 12248  0014F8  0100               	movlb	0	; () banked
 12249  0014FA  25D7               	addwf	f_lseek@ifptr& (0+255),w,b
 12250  0014FC  6F60               	movwf	___lldiv@dividend& (0+255),b
 12251  0014FE  0EFF               	movlw	255
 12252  001500  21D8               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 12253  001502  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
 12254  001504  0EFF               	movlw	255
 12255  001506  21D9               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 12256  001508  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
 12257  00150A  0EFF               	movlw	255
 12258  00150C  21DA               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 12259  00150E  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
 12260  001510  C0DB  F064         	movff	f_lseek@csize,___lldiv@divisor
 12261  001514  C0DC  F065         	movff	f_lseek@csize+1,___lldiv@divisor+1
 12262  001518  C0DD  F066         	movff	f_lseek@csize+2,___lldiv@divisor+2
 12263  00151C  C0DE  F067         	movff	f_lseek@csize+3,___lldiv@divisor+3
 12264  001520  EC93  F023         	call	___lldiv	;wreg free
 12265  001524  0100               	movlb	0	; () banked
 12266  001526  5160               	movf	?___lldiv& (0+255),w,b
 12267  001528  5DCA               	subwf	??_f_lseek& (0+255),w,b
 12268  00152A  5161               	movf	(?___lldiv+1)& (0+255),w,b
 12269  00152C  59CB               	subwfb	(??_f_lseek+1)& (0+255),w,b
 12270  00152E  5162               	movf	(?___lldiv+2)& (0+255),w,b
 12271  001530  59CC               	subwfb	(??_f_lseek+2)& (0+255),w,b
 12272  001532  5163               	movf	(?___lldiv+3)& (0+255),w,b
 12273  001534  59CD               	subwfb	(??_f_lseek+3)& (0+255),w,b
 12274  001536  A0D8               	btfss	status,0,c
 12275  001538  D04F               	goto	l1182
 12276                           
 12277                           ; BSR set to: 0
 12278                           ;tff.c: 1157: fp->fptr = (ifptr - 1) & ~(csize - 1);
 12279  00153A  0EFF               	movlw	255
 12280  00153C  25DB               	addwf	f_lseek@csize& (0+255),w,b
 12281  00153E  6FCA               	movwf	??_f_lseek& (0+255),b
 12282  001540  0EFF               	movlw	255
 12283  001542  21DC               	addwfc	(f_lseek@csize+1)& (0+255),w,b
 12284  001544  6FCB               	movwf	(??_f_lseek+1)& (0+255),b
 12285  001546  0EFF               	movlw	255
 12286  001548  21DD               	addwfc	(f_lseek@csize+2)& (0+255),w,b
 12287  00154A  6FCC               	movwf	(??_f_lseek+2)& (0+255),b
 12288  00154C  0EFF               	movlw	255
 12289  00154E  21DE               	addwfc	(f_lseek@csize+3)& (0+255),w,b
 12290  001550  6FCD               	movwf	(??_f_lseek+3)& (0+255),b
 12291  001552  1FCA               	comf	??_f_lseek& (0+255),f,b
 12292  001554  1FCB               	comf	(??_f_lseek+1)& (0+255),f,b
 12293  001556  1FCC               	comf	(??_f_lseek+2)& (0+255),f,b
 12294  001558  1FCD               	comf	(??_f_lseek+3)& (0+255),f,b
 12295  00155A  0EFF               	movlw	255
 12296  00155C  25D7               	addwf	f_lseek@ifptr& (0+255),w,b
 12297  00155E  6FCE               	movwf	(??_f_lseek+4)& (0+255),b
 12298  001560  0EFF               	movlw	255
 12299  001562  21D8               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 12300  001564  6FCF               	movwf	(??_f_lseek+5)& (0+255),b
 12301  001566  0EFF               	movlw	255
 12302  001568  21D9               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 12303  00156A  6FD0               	movwf	(??_f_lseek+6)& (0+255),b
 12304  00156C  0EFF               	movlw	255
 12305  00156E  21DA               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 12306  001570  6FD1               	movwf	(??_f_lseek+7)& (0+255),b
 12307  001572  51CA               	movf	??_f_lseek& (0+255),w,b
 12308  001574  15CE               	andwf	(??_f_lseek+4)& (0+255),w,b
 12309  001576  6FD2               	movwf	(??_f_lseek+8)& (0+255),b
 12310  001578  51CB               	movf	(??_f_lseek+1)& (0+255),w,b
 12311  00157A  15CF               	andwf	(??_f_lseek+5)& (0+255),w,b
 12312  00157C  6FD3               	movwf	(??_f_lseek+9)& (0+255),b
 12313  00157E  51CC               	movf	(??_f_lseek+2)& (0+255),w,b
 12314  001580  15D0               	andwf	(??_f_lseek+6)& (0+255),w,b
 12315  001582  6FD4               	movwf	(??_f_lseek+10)& (0+255),b
 12316  001584  51CD               	movf	(??_f_lseek+3)& (0+255),w,b
 12317  001586  15D1               	andwf	(??_f_lseek+7)& (0+255),w,b
 12318  001588  6FD5               	movwf	(??_f_lseek+11)& (0+255),b
 12319  00158A  EE20 F006          	lfsr	2,6
 12320  00158E  51C4               	movf	f_lseek@fp& (0+255),w,b
 12321  001590  26D9               	addwf	fsr2l,f,c
 12322  001592  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 12323  001594  22DA               	addwfc	fsr2h,f,c
 12324  001596  C0D2  FFDE         	movff	??_f_lseek+8,postinc2
 12325  00159A  C0D3  FFDE         	movff	??_f_lseek+9,postinc2
 12326  00159E  C0D4  FFDE         	movff	??_f_lseek+10,postinc2
 12327  0015A2  C0D5  FFDE         	movff	??_f_lseek+11,postinc2
 12328                           
 12329                           ;tff.c: 1158: ofs -= fp->fptr;
 12330  0015A6  EE20 F006          	lfsr	2,6
 12331  0015AA  51C4               	movf	f_lseek@fp& (0+255),w,b
 12332  0015AC  26D9               	addwf	fsr2l,f,c
 12333  0015AE  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 12334  0015B0  22DA               	addwfc	fsr2h,f,c
 12335  0015B2  50DE               	movf	postinc2,w,c
 12336  0015B4  5FC6               	subwf	f_lseek@ofs& (0+255),f,b
 12337  0015B6  50DE               	movf	postinc2,w,c
 12338  0015B8  5BC7               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 12339  0015BA  50DE               	movf	postinc2,w,c
 12340  0015BC  5BC8               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 12341  0015BE  50DD               	movf	postdec2,w,c
 12342  0015C0  5BC9               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 12343                           
 12344                           ;tff.c: 1159: clust = fp->curr_clust;
 12345  0015C2  EE20 F010          	lfsr	2,16
 12346  0015C6  51C4               	movf	f_lseek@fp& (0+255),w,b
 12347  0015C8  26D9               	addwf	fsr2l,f,c
 12348  0015CA  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 12349  0015CC  22DA               	addwfc	fsr2h,f,c
 12350  0015CE  CFDE F0DF          	movff	postinc2,f_lseek@clust
 12351  0015D2  CFDD F0E0          	movff	postdec2,f_lseek@clust+1
 12352                           
 12353                           ;tff.c: 1160: } else {
 12354  0015D6  D031               	goto	l1183
 12355  0015D8                     l1182:
 12356                           
 12357                           ; BSR set to: 0
 12358                           ;tff.c: 1161: clust = fp->org_clust;
 12359                           
 12360                           ; BSR set to: 0
 12361  0015D8  EE20 F00E          	lfsr	2,14
 12362  0015DC  51C4               	movf	f_lseek@fp& (0+255),w,b
 12363  0015DE  26D9               	addwf	fsr2l,f,c
 12364  0015E0  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 12365  0015E2  22DA               	addwfc	fsr2h,f,c
 12366  0015E4  CFDE F0DF          	movff	postinc2,f_lseek@clust
 12367  0015E8  CFDD F0E0          	movff	postdec2,f_lseek@clust+1
 12368                           
 12369                           ; BSR set to: 0
 12370                           ;tff.c: 1163: if (clust == 0) {
 12371  0015EC  51DF               	movf	f_lseek@clust& (0+255),w,b
 12372  0015EE  11E0               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 12373  0015F0  A4D8               	btfss	status,2,c
 12374  0015F2  D019               	goto	l1184
 12375                           
 12376                           ; BSR set to: 0
 12377                           ;tff.c: 1164: clust = create_chain(0);
 12378  0015F4  0E00               	movlw	0
 12379  0015F6  6FB7               	movwf	(create_chain@clust+1)& (0+255),b
 12380  0015F8  0E00               	movlw	0
 12381  0015FA  6FB6               	movwf	create_chain@clust& (0+255),b
 12382  0015FC  EC60  F018         	call	_create_chain	;wreg free
 12383  001600  C0B6  F0DF         	movff	?_create_chain,f_lseek@clust
 12384  001604  C0B7  F0E0         	movff	?_create_chain+1,f_lseek@clust+1
 12385                           
 12386                           ;tff.c: 1165: if (clust == 1) goto fk_error;
 12387  001608  0100               	movlb	0	; () banked
 12388  00160A  05DF               	decf	f_lseek@clust& (0+255),w,b
 12389  00160C  11E0               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 12390  00160E  B4D8               	btfsc	status,2,c
 12391  001610  D0F9               	goto	l1186
 12392                           
 12393                           ; BSR set to: 0
 12394                           ;tff.c: 1166: fp->org_clust = clust;
 12395                           
 12396                           ; BSR set to: 0
 12397                           
 12398                           ; BSR set to: 0
 12399  001612  EE20 F00E          	lfsr	2,14
 12400  001616  51C4               	movf	f_lseek@fp& (0+255),w,b
 12401  001618  26D9               	addwf	fsr2l,f,c
 12402  00161A  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 12403  00161C  22DA               	addwfc	fsr2h,f,c
 12404  00161E  C0DF  FFDE         	movff	f_lseek@clust,postinc2
 12405  001622  C0E0  FFDD         	movff	f_lseek@clust+1,postdec2
 12406  001626                     l1184:
 12407                           
 12408                           ; BSR set to: 0
 12409                           ;tff.c: 1167: }
 12410                           ;tff.c: 1169: fp->curr_clust = clust;
 12411  001626  EE20 F010          	lfsr	2,16
 12412  00162A  51C4               	movf	f_lseek@fp& (0+255),w,b
 12413  00162C  26D9               	addwf	fsr2l,f,c
 12414  00162E  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 12415  001630  22DA               	addwfc	fsr2h,f,c
 12416  001632  C0DF  FFDE         	movff	f_lseek@clust,postinc2
 12417  001636  C0E0  FFDD         	movff	f_lseek@clust+1,postdec2
 12418  00163A                     l1183:
 12419                           
 12420                           ; BSR set to: 0
 12421                           ;tff.c: 1170: }
 12422                           ;tff.c: 1171: if (clust != 0) {
 12423                           
 12424                           ; BSR set to: 0
 12425  00163A  51DF               	movf	f_lseek@clust& (0+255),w,b
 12426  00163C  11E0               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 12427  00163E  A4D8               	btfss	status,2,c
 12428  001640  D064               	goto	l1188
 12429  001642  D0AD               	goto	l1197
 12430  001644                     
 12431                           ; BSR set to: 0
 12432                           ;tff.c: 1174: if (fp->flag & 0x02) {
 12433                           
 12434                           ; BSR set to: 0
 12435  001644  EE20 F002          	lfsr	2,2
 12436  001648  51C4               	movf	f_lseek@fp& (0+255),w,b
 12437  00164A  26D9               	addwf	fsr2l,f,c
 12438  00164C  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 12439  00164E  22DA               	addwfc	fsr2h,f,c
 12440  001650  A2DF               	btfss	indf2,1,c
 12441  001652  D018               	goto	l1190
 12442                           
 12443                           ; BSR set to: 0
 12444                           ;tff.c: 1175: clust = create_chain(clust);
 12445  001654  C0DF  F0B6         	movff	f_lseek@clust,create_chain@clust
 12446  001658  C0E0  F0B7         	movff	f_lseek@clust+1,create_chain@clust+1
 12447  00165C  EC60  F018         	call	_create_chain	;wreg free
 12448  001660  C0B6  F0DF         	movff	?_create_chain,f_lseek@clust
 12449  001664  C0B7  F0E0         	movff	?_create_chain+1,f_lseek@clust+1
 12450                           
 12451                           ;tff.c: 1176: if (clust == 0) {
 12452  001668  0100               	movlb	0	; () banked
 12453  00166A  51DF               	movf	f_lseek@clust& (0+255),w,b
 12454  00166C  11E0               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 12455  00166E  A4D8               	btfss	status,2,c
 12456  001670  D013               	goto	l1193
 12457                           
 12458                           ; BSR set to: 0
 12459                           ;tff.c: 1177: ofs = csize; break;
 12460  001672  C0DB  F0C6         	movff	f_lseek@csize,f_lseek@ofs
 12461  001676  C0DC  F0C7         	movff	f_lseek@csize+1,f_lseek@ofs+1
 12462  00167A  C0DD  F0C8         	movff	f_lseek@csize+2,f_lseek@ofs+2
 12463  00167E  C0DE  F0C9         	movff	f_lseek@csize+3,f_lseek@ofs+3
 12464  001682  D04D               	goto	u13020
 12465  001684                     l1190:
 12466                           
 12467                           ; BSR set to: 0
 12468                           ;tff.c: 1181: clust = get_cluster(clust);
 12469                           
 12470                           ; BSR set to: 0
 12471  001684  C0DF  F0A0         	movff	f_lseek@clust,get_cluster@clust
 12472  001688  C0E0  F0A1         	movff	f_lseek@clust+1,get_cluster@clust+1
 12473  00168C  EC6A  F016         	call	_get_cluster	;wreg free
 12474  001690  C0A0  F0DF         	movff	?_get_cluster,f_lseek@clust
 12475  001694  C0A1  F0E0         	movff	?_get_cluster+1,f_lseek@clust+1
 12476  001698                     l1193:
 12477                           
 12478                           ;tff.c: 1182: if (clust < 2 || clust >= fp->fs->max_clust) goto fk_error;
 12479  001698  0100               	movlb	0	; () banked
 12480  00169A  51E0               	movf	(f_lseek@clust+1)& (0+255),w,b
 12481  00169C  E104               	bnz	u13000
 12482  00169E  0E02               	movlw	2
 12483  0016A0  5DDF               	subwf	f_lseek@clust& (0+255),w,b
 12484  0016A2  A0D8               	btfss	status,0,c
 12485  0016A4  D0AF               	goto	l1186
 12486  0016A6                     u13000:
 12487                           
 12488                           ; BSR set to: 0
 12489  0016A6  EE20 F004          	lfsr	2,4
 12490  0016AA  51C4               	movf	f_lseek@fp& (0+255),w,b
 12491  0016AC  26D9               	addwf	fsr2l,f,c
 12492  0016AE  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 12493  0016B0  22DA               	addwfc	fsr2h,f,c
 12494  0016B2  EE10 F016          	lfsr	1,22
 12495  0016B6  50DE               	movf	postinc2,w,c
 12496  0016B8  26E1               	addwf	fsr1l,f,c
 12497  0016BA  50DD               	movf	postdec2,w,c
 12498  0016BC  22E2               	addwfc	fsr1h,f,c
 12499  0016BE  50E6               	movf	postinc1,w,c
 12500  0016C0  5DDF               	subwf	f_lseek@clust& (0+255),w,b
 12501  0016C2  50E6               	movf	postinc1,w,c
 12502  0016C4  59E0               	subwfb	(f_lseek@clust+1)& (0+255),w,b
 12503  0016C6  B0D8               	btfsc	status,0,c
 12504  0016C8  D09D               	goto	l1186
 12505                           
 12506                           ; BSR set to: 0
 12507                           ;tff.c: 1183: fp->curr_clust = clust;
 12508                           
 12509                           ; BSR set to: 0
 12510                           
 12511                           ; BSR set to: 0
 12512  0016CA  EE20 F010          	lfsr	2,16
 12513  0016CE  51C4               	movf	f_lseek@fp& (0+255),w,b
 12514  0016D0  26D9               	addwf	fsr2l,f,c
 12515  0016D2  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 12516  0016D4  22DA               	addwfc	fsr2h,f,c
 12517  0016D6  C0DF  FFDE         	movff	f_lseek@clust,postinc2
 12518  0016DA  C0E0  FFDD         	movff	f_lseek@clust+1,postdec2
 12519                           
 12520                           ;tff.c: 1184: fp->fptr += csize;
 12521  0016DE  EE20 F006          	lfsr	2,6
 12522  0016E2  51C4               	movf	f_lseek@fp& (0+255),w,b
 12523  0016E4  26D9               	addwf	fsr2l,f,c
 12524  0016E6  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 12525  0016E8  22DA               	addwfc	fsr2h,f,c
 12526  0016EA  51DB               	movf	f_lseek@csize& (0+255),w,b
 12527  0016EC  26DE               	addwf	postinc2,f,c
 12528  0016EE  51DC               	movf	(f_lseek@csize+1)& (0+255),w,b
 12529  0016F0  22DE               	addwfc	postinc2,f,c
 12530  0016F2  51DD               	movf	(f_lseek@csize+2)& (0+255),w,b
 12531  0016F4  22DE               	addwfc	postinc2,f,c
 12532  0016F6  51DE               	movf	(f_lseek@csize+3)& (0+255),w,b
 12533  0016F8  22DE               	addwfc	postinc2,f,c
 12534                           
 12535                           ; BSR set to: 0
 12536                           ;tff.c: 1185: ofs -= csize;
 12537  0016FA  51DB               	movf	f_lseek@csize& (0+255),w,b
 12538  0016FC  5FC6               	subwf	f_lseek@ofs& (0+255),f,b
 12539  0016FE  51DC               	movf	(f_lseek@csize+1)& (0+255),w,b
 12540  001700  5BC7               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 12541  001702  51DD               	movf	(f_lseek@csize+2)& (0+255),w,b
 12542  001704  5BC8               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 12543  001706  51DE               	movf	(f_lseek@csize+3)& (0+255),w,b
 12544  001708  5BC9               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 12545  00170A                     l1188:
 12546                           
 12547                           ; BSR set to: 0
 12548                           
 12549                           ; BSR set to: 0
 12550  00170A  51C6               	movf	f_lseek@ofs& (0+255),w,b
 12551  00170C  5DDB               	subwf	f_lseek@csize& (0+255),w,b
 12552  00170E  51C7               	movf	(f_lseek@ofs+1)& (0+255),w,b
 12553  001710  59DC               	subwfb	(f_lseek@csize+1)& (0+255),w,b
 12554  001712  51C8               	movf	(f_lseek@ofs+2)& (0+255),w,b
 12555  001714  59DD               	subwfb	(f_lseek@csize+2)& (0+255),w,b
 12556  001716  51C9               	movf	(f_lseek@ofs+3)& (0+255),w,b
 12557  001718  59DE               	subwfb	(f_lseek@csize+3)& (0+255),w,b
 12558  00171A  A0D8               	btfss	status,0,c
 12559  00171C  D793               	goto	l1189
 12560  00171E                     u13020:
 12561                           
 12562                           ; BSR set to: 0
 12563                           ;tff.c: 1186: }
 12564                           ;tff.c: 1187: fp->fptr += ofs;
 12565                           
 12566                           ; BSR set to: 0
 12567  00171E  EE20 F006          	lfsr	2,6
 12568  001722  51C4               	movf	f_lseek@fp& (0+255),w,b
 12569  001724  26D9               	addwf	fsr2l,f,c
 12570  001726  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 12571  001728  22DA               	addwfc	fsr2h,f,c
 12572  00172A  51C6               	movf	f_lseek@ofs& (0+255),w,b
 12573  00172C  26DE               	addwf	postinc2,f,c
 12574  00172E  51C7               	movf	(f_lseek@ofs+1)& (0+255),w,b
 12575  001730  22DE               	addwfc	postinc2,f,c
 12576  001732  51C8               	movf	(f_lseek@ofs+2)& (0+255),w,b
 12577  001734  22DE               	addwfc	postinc2,f,c
 12578  001736  51C9               	movf	(f_lseek@ofs+3)& (0+255),w,b
 12579  001738  22DE               	addwfc	postinc2,f,c
 12580                           
 12581                           ;tff.c: 1188: fp->csect = (BYTE)(ofs / 512U);
 12582  00173A  EE20 F003          	lfsr	2,3
 12583  00173E  51C4               	movf	f_lseek@fp& (0+255),w,b
 12584  001740  26D9               	addwf	fsr2l,f,c
 12585  001742  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 12586  001744  22DA               	addwfc	fsr2h,f,c
 12587  001746  C0C6  F0CA         	movff	f_lseek@ofs,??_f_lseek
 12588  00174A  C0C7  F0CB         	movff	f_lseek@ofs+1,??_f_lseek+1
 12589  00174E  C0C8  F0CC         	movff	f_lseek@ofs+2,??_f_lseek+2
 12590  001752  C0C9  F0CD         	movff	f_lseek@ofs+3,??_f_lseek+3
 12591  001756  0E0A               	movlw	10
 12592  001758  D005               	goto	u13030
 12593  00175A                     u13035:
 12594  00175A  90D8               	bcf	status,0,c
 12595  00175C  33CD               	rrcf	(??_f_lseek+3)& (0+255),f,b
 12596  00175E  33CC               	rrcf	(??_f_lseek+2)& (0+255),f,b
 12597  001760  33CB               	rrcf	(??_f_lseek+1)& (0+255),f,b
 12598  001762  33CA               	rrcf	??_f_lseek& (0+255),f,b
 12599  001764                     u13030:
 12600  001764  2EE8               	decfsz	wreg,f,c
 12601  001766  D7F9               	goto	u13035
 12602  001768  51CA               	movf	??_f_lseek& (0+255),w,b
 12603  00176A  6EDF               	movwf	indf2,c
 12604                           
 12605                           ; BSR set to: 0
 12606                           ;tff.c: 1189: if (ofs % 512U) fp->csect++;
 12607  00176C  0EFF               	movlw	255
 12608  00176E  15C6               	andwf	f_lseek@ofs& (0+255),w,b
 12609  001770  6FCA               	movwf	??_f_lseek& (0+255),b
 12610  001772  0E01               	movlw	1
 12611  001774  15C7               	andwf	(f_lseek@ofs+1)& (0+255),w,b
 12612  001776  6FCB               	movwf	(??_f_lseek+1)& (0+255),b
 12613  001778  0E00               	movlw	0
 12614  00177A  15C8               	andwf	(f_lseek@ofs+2)& (0+255),w,b
 12615  00177C  6FCC               	movwf	(??_f_lseek+2)& (0+255),b
 12616  00177E  0E00               	movlw	0
 12617  001780  15C9               	andwf	(f_lseek@ofs+3)& (0+255),w,b
 12618  001782  6FCD               	movwf	(??_f_lseek+3)& (0+255),b
 12619  001784  51CA               	movf	??_f_lseek& (0+255),w,b
 12620  001786  11CB               	iorwf	(??_f_lseek+1)& (0+255),w,b
 12621  001788  11CC               	iorwf	(??_f_lseek+2)& (0+255),w,b
 12622  00178A  11CD               	iorwf	(??_f_lseek+3)& (0+255),w,b
 12623  00178C  B4D8               	btfsc	status,2,c
 12624  00178E  D007               	goto	l1197
 12625                           
 12626                           ; BSR set to: 0
 12627  001790  EE20 F003          	lfsr	2,3
 12628  001794  51C4               	movf	f_lseek@fp& (0+255),w,b
 12629  001796  26D9               	addwf	fsr2l,f,c
 12630  001798  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 12631  00179A  22DA               	addwfc	fsr2h,f,c
 12632  00179C  2ADF               	incf	indf2,f,c
 12633  00179E                     l1197:
 12634                           
 12635                           ; BSR set to: 0
 12636                           ;tff.c: 1190: }
 12637                           ;tff.c: 1191: }
 12638                           ;tff.c: 1194: if (fp->fptr > fp->fsize) {
 12639                           
 12640                           ; BSR set to: 0
 12641                           
 12642                           ; BSR set to: 0
 12643                           
 12644                           ; BSR set to: 0
 12645  00179E  EE20 F006          	lfsr	2,6
 12646  0017A2  51C4               	movf	f_lseek@fp& (0+255),w,b
 12647  0017A4  26D9               	addwf	fsr2l,f,c
 12648  0017A6  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 12649  0017A8  22DA               	addwfc	fsr2h,f,c
 12650  0017AA  EE10 F00A          	lfsr	1,10
 12651  0017AE  51C4               	movf	f_lseek@fp& (0+255),w,b
 12652  0017B0  26E1               	addwf	fsr1l,f,c
 12653  0017B2  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 12654  0017B4  22E2               	addwfc	fsr1h,f,c
 12655  0017B6  50DE               	movf	postinc2,w,c
 12656  0017B8  5CE6               	subwf	postinc1,w,c
 12657  0017BA  50DE               	movf	postinc2,w,c
 12658  0017BC  58E6               	subwfb	postinc1,w,c
 12659  0017BE  50DE               	movf	postinc2,w,c
 12660  0017C0  58E6               	subwfb	postinc1,w,c
 12661  0017C2  50DE               	movf	postinc2,w,c
 12662  0017C4  58E6               	subwfb	postinc1,w,c
 12663  0017C6  B0D8               	btfsc	status,0,c
 12664  0017C8  0012               	return	
 12665                           
 12666                           ; BSR set to: 0
 12667                           ;tff.c: 1195: fp->fsize = fp->fptr;
 12668  0017CA  EE20 F006          	lfsr	2,6
 12669  0017CE  51C4               	movf	f_lseek@fp& (0+255),w,b
 12670  0017D0  26D9               	addwf	fsr2l,f,c
 12671  0017D2  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 12672  0017D4  22DA               	addwfc	fsr2h,f,c
 12673  0017D6  EE10 F00A          	lfsr	1,10
 12674  0017DA  51C4               	movf	f_lseek@fp& (0+255),w,b
 12675  0017DC  26E1               	addwf	fsr1l,f,c
 12676  0017DE  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 12677  0017E0  22E2               	addwfc	fsr1h,f,c
 12678  0017E2  CFDE FFE6          	movff	postinc2,postinc1
 12679  0017E6  CFDE FFE6          	movff	postinc2,postinc1
 12680  0017EA  CFDE FFE6          	movff	postinc2,postinc1
 12681  0017EE  CFDE FFE6          	movff	postinc2,postinc1
 12682                           
 12683                           ; BSR set to: 0
 12684                           ;tff.c: 1196: fp->flag |= 0x20;
 12685  0017F2  EE20 F002          	lfsr	2,2
 12686  0017F6  51C4               	movf	f_lseek@fp& (0+255),w,b
 12687  0017F8  26D9               	addwf	fsr2l,f,c
 12688  0017FA  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 12689  0017FC  22DA               	addwfc	fsr2h,f,c
 12690  0017FE  0E00               	movlw	0
 12691  001800  8ADB               	bsf	plusw2,5,c
 12692                           
 12693                           ; BSR set to: 0
 12694                           ;tff.c: 1197: }
 12695                           ;tff.c: 1200: return FR_OK;
 12696                           ;	Return value of _f_lseek is never used
 12697                           
 12698                           ; BSR set to: 0
 12699  001802  0012               	return	
 12700  001804                     l1186:
 12701                           
 12702                           ; BSR set to: 0
 12703                           ;tff.c: 1203: fp->flag |= 0x80;
 12704                           
 12705                           ; BSR set to: 0
 12706  001804  EE20 F002          	lfsr	2,2
 12707  001808  51C4               	movf	f_lseek@fp& (0+255),w,b
 12708  00180A  26D9               	addwf	fsr2l,f,c
 12709  00180C  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 12710  00180E  22DA               	addwfc	fsr2h,f,c
 12711  001810  0E00               	movlw	0
 12712  001812  8EDB               	bsf	plusw2,7,c
 12713  001814  0012               	return	
 12714  001816                     __end_of_f_lseek:
 12715                           	opt stack 0
 12716                           tosu	equ	0xFFF
 12717                           tosh	equ	0xFFE
 12718                           tosl	equ	0xFFD
 12719                           pclath	equ	0xFFA
 12720                           tblptru	equ	0xFF8
 12721                           tblptrh	equ	0xFF7
 12722                           tblptrl	equ	0xFF6
 12723                           tablat	equ	0xFF5
 12724                           prodh	equ	0xFF4
 12725                           prodl	equ	0xFF3
 12726                           intcon	equ	0xFF2
 12727                           intcon2	equ	0xFF1
 12728                           intcon3	equ	0xFF0
 12729                           indf0	equ	0xFEF
 12730                           postinc0	equ	0xFEE
 12731                           fsr0h	equ	0xFEA
 12732                           fsr0l	equ	0xFE9
 12733                           wreg	equ	0xFE8
 12734                           indf1	equ	0xFE7
 12735                           postinc1	equ	0xFE6
 12736                           postdec1	equ	0xFE5
 12737                           fsr1h	equ	0xFE2
 12738                           fsr1l	equ	0xFE1
 12739                           indf2	equ	0xFDF
 12740                           postinc2	equ	0xFDE
 12741                           postdec2	equ	0xFDD
 12742                           plusw2	equ	0xFDB
 12743                           fsr2h	equ	0xFDA
 12744                           fsr2l	equ	0xFD9
 12745                           status	equ	0xFD8
 12746                           
 12747 ;; *************** function _create_chain *****************
 12748 ;; Defined at:
 12749 ;;		line 282 in file "bibliotecas/tff.c"
 12750 ;; Parameters:    Size  Location     Type
 12751 ;;  clust           2   86[BANK0 ] unsigned short 
 12752 ;; Auto vars:     Size  Location     Type
 12753 ;;  ncl             2   98[BANK0 ] unsigned short 
 12754 ;;  scl             2   96[BANK0 ] unsigned short 
 12755 ;;  cstat           2   94[BANK0 ] unsigned short 
 12756 ;;  fs              2   92[BANK0 ] PTR struct _FATFS
 12757 ;;		 -> NULL(0), fs(544), 
 12758 ;;  mcl             2   90[BANK0 ] unsigned short 
 12759 ;; Return value:  Size  Location     Type
 12760 ;;                  2   86[BANK0 ] unsigned short 
 12761 ;; Registers used:
 12762 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12763 ;; Tracked objects:
 12764 ;;		On entry : 0/0
 12765 ;;		On exit  : 0/0
 12766 ;;		Unchanged: 0/0
 12767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12768 ;;      Params:         0       2       0       0       0       0       0       0       0
 12769 ;;      Locals:         0      10       0       0       0       0       0       0       0
 12770 ;;      Temps:          0       2       0       0       0       0       0       0       0
 12771 ;;      Totals:         0      14       0       0       0       0       0       0       0
 12772 ;;Total ram usage:       14 bytes
 12773 ;; Hardware stack levels used:    1
 12774 ;; Hardware stack levels required when called:   10
 12775 ;; This function calls:
 12776 ;;		_get_cluster
 12777 ;;		_put_cluster
 12778 ;; This function is called by:
 12779 ;;		_reserve_direntry
 12780 ;;		_f_write
 12781 ;;		_f_lseek
 12782 ;; This function uses a non-reentrant model
 12783 ;;
 12784                           
 12785                           	psect	text43
 12786  0030C0                     __ptext43:
 12787                           	opt stack 0
 12788  0030C0                     _create_chain:
 12789                           	opt stack 14
 12790                           
 12791                           ;tff.c: 286: CLUST cstat, ncl, scl, mcl;
 12792                           ;tff.c: 287: FATFS *fs = FatFs;
 12793                           
 12794                           ; BSR set to: 0
 12795                           ;incstack = 0
 12796  0030C0  C0F6  F0BC         	movff	_FatFs,create_chain@fs
 12797  0030C4  C0F7  F0BD         	movff	_FatFs+1,create_chain@fs+1
 12798                           
 12799                           ;tff.c: 290: mcl = fs->max_clust;
 12800  0030C8  0100               	movlb	0	; () banked
 12801  0030CA  EE20 F016          	lfsr	2,22
 12802  0030CE  51BC               	movf	create_chain@fs& (0+255),w,b
 12803  0030D0  26D9               	addwf	fsr2l,f,c
 12804  0030D2  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 12805  0030D4  22DA               	addwfc	fsr2h,f,c
 12806  0030D6  CFDE F0BA          	movff	postinc2,create_chain@mcl
 12807  0030DA  CFDD F0BB          	movff	postdec2,create_chain@mcl+1
 12808                           
 12809                           ; BSR set to: 0
 12810                           ;tff.c: 291: if (clust == 0) {
 12811  0030DE  51B6               	movf	create_chain@clust& (0+255),w,b
 12812  0030E0  11B7               	iorwf	(create_chain@clust+1)& (0+255),w,b
 12813  0030E2  A4D8               	btfss	status,2,c
 12814  0030E4  D01B               	goto	l901
 12815                           
 12816                           ; BSR set to: 0
 12817                           ;tff.c: 292: scl = fs->last_clust;
 12818  0030E6  EE20 F018          	lfsr	2,24
 12819  0030EA  51BC               	movf	create_chain@fs& (0+255),w,b
 12820  0030EC  26D9               	addwf	fsr2l,f,c
 12821  0030EE  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 12822  0030F0  22DA               	addwfc	fsr2h,f,c
 12823  0030F2  CFDE F0C0          	movff	postinc2,create_chain@scl
 12824  0030F6  CFDD F0C1          	movff	postdec2,create_chain@scl+1
 12825                           
 12826                           ; BSR set to: 0
 12827                           ;tff.c: 293: if (scl < 2 || scl >= mcl) scl = 1;
 12828  0030FA  51C1               	movf	(create_chain@scl+1)& (0+255),w,b
 12829  0030FC  E104               	bnz	u10650
 12830  0030FE  0E02               	movlw	2
 12831  003100  5DC0               	subwf	create_chain@scl& (0+255),w,b
 12832  003102  A0D8               	btfss	status,0,c
 12833  003104  D006               	goto	u10660
 12834  003106                     u10650:
 12835                           
 12836                           ; BSR set to: 0
 12837  003106  51BA               	movf	create_chain@mcl& (0+255),w,b
 12838  003108  5DC0               	subwf	create_chain@scl& (0+255),w,b
 12839  00310A  51BB               	movf	(create_chain@mcl+1)& (0+255),w,b
 12840  00310C  59C1               	subwfb	(create_chain@scl+1)& (0+255),w,b
 12841  00310E  A0D8               	btfss	status,0,c
 12842  003110  D02A               	goto	l905
 12843  003112                     u10660:
 12844                           
 12845                           ; BSR set to: 0
 12846                           
 12847                           ; BSR set to: 0
 12848  003112  0E00               	movlw	0
 12849  003114  6FC1               	movwf	(create_chain@scl+1)& (0+255),b
 12850  003116  0E01               	movlw	1
 12851  003118  6FC0               	movwf	create_chain@scl& (0+255),b
 12852                           
 12853                           ; BSR set to: 0
 12854                           ;tff.c: 294: }
 12855  00311A  D025               	goto	l905
 12856  00311C                     l901:
 12857                           
 12858                           ; BSR set to: 0
 12859                           ;tff.c: 295: else {
 12860                           ;tff.c: 296: cstat = get_cluster(clust);
 12861                           
 12862                           ; BSR set to: 0
 12863  00311C  C0B6  F0A0         	movff	create_chain@clust,get_cluster@clust
 12864  003120  C0B7  F0A1         	movff	create_chain@clust+1,get_cluster@clust+1
 12865  003124  EC6A  F016         	call	_get_cluster	;wreg free
 12866  003128  C0A0  F0BE         	movff	?_get_cluster,create_chain@cstat
 12867  00312C  C0A1  F0BF         	movff	?_get_cluster+1,create_chain@cstat+1
 12868                           
 12869                           ;tff.c: 297: if (cstat < 2) return 1;
 12870  003130  0100               	movlb	0	; () banked
 12871  003132  51BF               	movf	(create_chain@cstat+1)& (0+255),w,b
 12872  003134  E109               	bnz	l8933
 12873  003136  0E02               	movlw	2
 12874  003138  5DBE               	subwf	create_chain@cstat& (0+255),w,b
 12875  00313A  B0D8               	btfsc	status,0,c
 12876  00313C  D005               	goto	l906
 12877                           
 12878                           ; BSR set to: 0
 12879  00313E  0E00               	movlw	0
 12880  003140  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 12881  003142  0E01               	movlw	1
 12882  003144  6FB6               	movwf	?_create_chain& (0+255),b
 12883                           
 12884                           ; BSR set to: 0
 12885  003146  0012               	return	
 12886  003148                     l906:
 12887  003148                     l8933:
 12888                           
 12889                           ; BSR set to: 0
 12890                           ;tff.c: 298: if (cstat < mcl) return cstat;
 12891  003148  51BA               	movf	create_chain@mcl& (0+255),w,b
 12892  00314A  5DBE               	subwf	create_chain@cstat& (0+255),w,b
 12893  00314C  51BB               	movf	(create_chain@mcl+1)& (0+255),w,b
 12894  00314E  59BF               	subwfb	(create_chain@cstat+1)& (0+255),w,b
 12895  003150  B0D8               	btfsc	status,0,c
 12896  003152  D005               	goto	l908
 12897                           
 12898                           ; BSR set to: 0
 12899  003154  C0BE  F0B6         	movff	create_chain@cstat,?_create_chain
 12900  003158  C0BF  F0B7         	movff	create_chain@cstat+1,?_create_chain+1
 12901  00315C  0012               	return	
 12902  00315E                     l908:
 12903                           
 12904                           ; BSR set to: 0
 12905                           ;tff.c: 299: scl = clust;
 12906  00315E  C0B6  F0C0         	movff	create_chain@clust,create_chain@scl
 12907  003162  C0B7  F0C1         	movff	create_chain@clust+1,create_chain@scl+1
 12908  003166                     l905:
 12909                           
 12910                           ; BSR set to: 0
 12911                           ;tff.c: 300: }
 12912                           ;tff.c: 302: ncl = scl;
 12913  003166  C0C0  F0C2         	movff	create_chain@scl,create_chain@ncl
 12914  00316A  C0C1  F0C3         	movff	create_chain@scl+1,create_chain@ncl+1
 12915  00316E                     l8937:
 12916                           
 12917                           ; BSR set to: 0
 12918                           ;tff.c: 304: ncl++;
 12919  00316E  4BC2               	infsnz	create_chain@ncl& (0+255),f,b
 12920  003170  2BC3               	incf	(create_chain@ncl+1)& (0+255),f,b
 12921                           
 12922                           ; BSR set to: 0
 12923                           ;tff.c: 305: if (ncl >= mcl) {
 12924  003172  51BA               	movf	create_chain@mcl& (0+255),w,b
 12925  003174  5DC2               	subwf	create_chain@ncl& (0+255),w,b
 12926  003176  51BB               	movf	(create_chain@mcl+1)& (0+255),w,b
 12927  003178  59C3               	subwfb	(create_chain@ncl+1)& (0+255),w,b
 12928  00317A  A0D8               	btfss	status,0,c
 12929  00317C  D00F               	goto	l911
 12930                           
 12931                           ; BSR set to: 0
 12932                           ;tff.c: 306: ncl = 2;
 12933  00317E  0E00               	movlw	0
 12934  003180  6FC3               	movwf	(create_chain@ncl+1)& (0+255),b
 12935  003182  0E02               	movlw	2
 12936  003184  6FC2               	movwf	create_chain@ncl& (0+255),b
 12937                           
 12938                           ; BSR set to: 0
 12939                           ;tff.c: 307: if (ncl > scl) return 0;
 12940  003186  51C2               	movf	create_chain@ncl& (0+255),w,b
 12941  003188  5DC0               	subwf	create_chain@scl& (0+255),w,b
 12942  00318A  51C3               	movf	(create_chain@ncl+1)& (0+255),w,b
 12943  00318C  59C1               	subwfb	(create_chain@scl+1)& (0+255),w,b
 12944  00318E  B0D8               	btfsc	status,0,c
 12945  003190  D005               	goto	l911
 12946                           
 12947                           ; BSR set to: 0
 12948  003192  0E00               	movlw	0
 12949  003194  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 12950  003196  0E00               	movlw	0
 12951  003198  6FB6               	movwf	?_create_chain& (0+255),b
 12952                           
 12953                           ; BSR set to: 0
 12954  00319A  0012               	return	
 12955  00319C                     l911:
 12956                           
 12957                           ; BSR set to: 0
 12958                           ;tff.c: 308: }
 12959                           ;tff.c: 309: cstat = get_cluster(ncl);
 12960                           
 12961                           ; BSR set to: 0
 12962                           
 12963                           ; BSR set to: 0
 12964  00319C  C0C2  F0A0         	movff	create_chain@ncl,get_cluster@clust
 12965  0031A0  C0C3  F0A1         	movff	create_chain@ncl+1,get_cluster@clust+1
 12966  0031A4  EC6A  F016         	call	_get_cluster	;wreg free
 12967  0031A8  C0A0  F0BE         	movff	?_get_cluster,create_chain@cstat
 12968  0031AC  C0A1  F0BF         	movff	?_get_cluster+1,create_chain@cstat+1
 12969                           
 12970                           ;tff.c: 310: if (cstat == 0) break;
 12971  0031B0  0100               	movlb	0	; () banked
 12972  0031B2  51BE               	movf	create_chain@cstat& (0+255),w,b
 12973  0031B4  11BF               	iorwf	(create_chain@cstat+1)& (0+255),w,b
 12974  0031B6  B4D8               	btfsc	status,2,c
 12975  0031B8  D015               	goto	l913
 12976                           
 12977                           ; BSR set to: 0
 12978                           ;tff.c: 311: if (cstat == 1) return 1;
 12979                           
 12980                           ; BSR set to: 0
 12981                           
 12982                           ; BSR set to: 0
 12983  0031BA  05BE               	decf	create_chain@cstat& (0+255),w,b
 12984  0031BC  11BF               	iorwf	(create_chain@cstat+1)& (0+255),w,b
 12985  0031BE  A4D8               	btfss	status,2,c
 12986  0031C0  D005               	goto	l914
 12987                           
 12988                           ; BSR set to: 0
 12989  0031C2  0E00               	movlw	0
 12990  0031C4  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 12991  0031C6  0E01               	movlw	1
 12992  0031C8  6FB6               	movwf	?_create_chain& (0+255),b
 12993                           
 12994                           ; BSR set to: 0
 12995  0031CA  0012               	return	
 12996  0031CC                     l914:
 12997                           
 12998                           ; BSR set to: 0
 12999                           ;tff.c: 312: if (ncl == scl) return 0;
 13000                           
 13001                           ; BSR set to: 0
 13002  0031CC  51C0               	movf	create_chain@scl& (0+255),w,b
 13003  0031CE  19C2               	xorwf	create_chain@ncl& (0+255),w,b
 13004  0031D0  E1CE               	bnz	l8937
 13005  0031D2  51C1               	movf	(create_chain@scl+1)& (0+255),w,b
 13006  0031D4  19C3               	xorwf	(create_chain@ncl+1)& (0+255),w,b
 13007  0031D6  A4D8               	btfss	status,2,c
 13008  0031D8  D7CA               	goto	l909
 13009                           
 13010                           ; BSR set to: 0
 13011  0031DA  0E00               	movlw	0
 13012  0031DC  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 13013  0031DE  0E00               	movlw	0
 13014  0031E0  6FB6               	movwf	?_create_chain& (0+255),b
 13015                           
 13016                           ; BSR set to: 0
 13017  0031E2  0012               	return	
 13018  0031E4                     l913:
 13019                           
 13020                           ; BSR set to: 0
 13021                           ;tff.c: 315: if (!put_cluster(ncl, (CLUST)0x0FFFFFFF)) return 1;
 13022                           
 13023                           ; BSR set to: 0
 13024  0031E4  C0C2  F0A0         	movff	create_chain@ncl,put_cluster@clust
 13025  0031E8  C0C3  F0A1         	movff	create_chain@ncl+1,put_cluster@clust+1
 13026  0031EC  0EFF               	movlw	255
 13027  0031EE  6FA3               	movwf	(put_cluster@val+1)& (0+255),b
 13028  0031F0  69A2               	setf	put_cluster@val& (0+255),b
 13029  0031F2  EC2D  F015         	call	_put_cluster	;wreg free
 13030  0031F6  0900               	iorlw	0
 13031  0031F8  A4D8               	btfss	status,2,c
 13032  0031FA  D006               	goto	l916
 13033  0031FC  0E00               	movlw	0
 13034  0031FE  0100               	movlb	0	; () banked
 13035  003200  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 13036  003202  0E01               	movlw	1
 13037  003204  6FB6               	movwf	?_create_chain& (0+255),b
 13038                           
 13039                           ; BSR set to: 0
 13040  003206  0012               	return	
 13041  003208                     l916:
 13042                           
 13043                           ;tff.c: 316: if (clust != 0 && !put_cluster(clust, ncl)) return 1;
 13044                           
 13045                           ; BSR set to: 0
 13046  003208  0100               	movlb	0	; () banked
 13047  00320A  51B6               	movf	create_chain@clust& (0+255),w,b
 13048  00320C  11B7               	iorwf	(create_chain@clust+1)& (0+255),w,b
 13049  00320E  B4D8               	btfsc	status,2,c
 13050  003210  D013               	goto	l917
 13051                           
 13052                           ; BSR set to: 0
 13053  003212  C0B6  F0A0         	movff	create_chain@clust,put_cluster@clust
 13054  003216  C0B7  F0A1         	movff	create_chain@clust+1,put_cluster@clust+1
 13055  00321A  C0C2  F0A2         	movff	create_chain@ncl,put_cluster@val
 13056  00321E  C0C3  F0A3         	movff	create_chain@ncl+1,put_cluster@val+1
 13057  003222  EC2D  F015         	call	_put_cluster	;wreg free
 13058  003226  0900               	iorlw	0
 13059  003228  A4D8               	btfss	status,2,c
 13060  00322A  D006               	goto	l917
 13061  00322C  0E00               	movlw	0
 13062  00322E  0100               	movlb	0	; () banked
 13063  003230  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 13064  003232  0E01               	movlw	1
 13065  003234  6FB6               	movwf	?_create_chain& (0+255),b
 13066                           
 13067                           ; BSR set to: 0
 13068  003236  0012               	return	
 13069  003238                     l917:
 13070                           
 13071                           ;tff.c: 318: fs->last_clust = ncl;
 13072                           
 13073                           ; BSR set to: 0
 13074  003238  0100               	movlb	0	; () banked
 13075  00323A  EE20 F018          	lfsr	2,24
 13076  00323E  51BC               	movf	create_chain@fs& (0+255),w,b
 13077  003240  26D9               	addwf	fsr2l,f,c
 13078  003242  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 13079  003244  22DA               	addwfc	fsr2h,f,c
 13080  003246  C0C2  FFDE         	movff	create_chain@ncl,postinc2
 13081  00324A  C0C3  FFDD         	movff	create_chain@ncl+1,postdec2
 13082                           
 13083                           ;tff.c: 319: if (fs->free_clust != (CLUST)0xFFFFFFFF) {
 13084  00324E  EE20 F01A          	lfsr	2,26
 13085  003252  51BC               	movf	create_chain@fs& (0+255),w,b
 13086  003254  26D9               	addwf	fsr2l,f,c
 13087  003256  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 13088  003258  22DA               	addwfc	fsr2h,f,c
 13089  00325A  28DE               	incf	postinc2,w,c
 13090  00325C  E103               	bnz	u10770
 13091  00325E  28DE               	incf	postinc2,w,c
 13092  003260  B4D8               	btfsc	status,2,c
 13093  003262  D009               	goto	l918
 13094  003264                     u10770:
 13095                           
 13096                           ; BSR set to: 0
 13097                           ;tff.c: 320: fs->free_clust--;
 13098  003264  EE20 F01A          	lfsr	2,26
 13099  003268  51BC               	movf	create_chain@fs& (0+255),w,b
 13100  00326A  26D9               	addwf	fsr2l,f,c
 13101  00326C  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 13102  00326E  22DA               	addwfc	fsr2h,f,c
 13103  003270  06DE               	decf	postinc2,f,c
 13104  003272  0E00               	movlw	0
 13105  003274  5ADD               	subwfb	postdec2,f,c
 13106  003276                     l918:
 13107                           
 13108                           ; BSR set to: 0
 13109                           ;tff.c: 324: }
 13110                           ;tff.c: 326: return ncl;
 13111                           
 13112                           ; BSR set to: 0
 13113  003276  C0C2  F0B6         	movff	create_chain@ncl,?_create_chain
 13114  00327A  C0C3  F0B7         	movff	create_chain@ncl+1,?_create_chain+1
 13115  00327E  0012               	return	
 13116  003280                     __end_of_create_chain:
 13117                           	opt stack 0
 13118                           tosu	equ	0xFFF
 13119                           tosh	equ	0xFFE
 13120                           tosl	equ	0xFFD
 13121                           pclath	equ	0xFFA
 13122                           tblptru	equ	0xFF8
 13123                           tblptrh	equ	0xFF7
 13124                           tblptrl	equ	0xFF6
 13125                           tablat	equ	0xFF5
 13126                           prodh	equ	0xFF4
 13127                           prodl	equ	0xFF3
 13128                           intcon	equ	0xFF2
 13129                           intcon2	equ	0xFF1
 13130                           intcon3	equ	0xFF0
 13131                           indf0	equ	0xFEF
 13132                           postinc0	equ	0xFEE
 13133                           fsr0h	equ	0xFEA
 13134                           fsr0l	equ	0xFE9
 13135                           wreg	equ	0xFE8
 13136                           indf1	equ	0xFE7
 13137                           postinc1	equ	0xFE6
 13138                           postdec1	equ	0xFE5
 13139                           fsr1h	equ	0xFE2
 13140                           fsr1l	equ	0xFE1
 13141                           indf2	equ	0xFDF
 13142                           postinc2	equ	0xFDE
 13143                           postdec2	equ	0xFDD
 13144                           plusw2	equ	0xFDB
 13145                           fsr2h	equ	0xFDA
 13146                           fsr2l	equ	0xFD9
 13147                           status	equ	0xFD8
 13148                           
 13149 ;; *************** function _put_cluster *****************
 13150 ;; Defined at:
 13151 ;;		line 197 in file "bibliotecas/tff.c"
 13152 ;; Parameters:    Size  Location     Type
 13153 ;;  clust           2   64[BANK0 ] unsigned short 
 13154 ;;  val             2   66[BANK0 ] unsigned short 
 13155 ;; Auto vars:     Size  Location     Type
 13156 ;;  fatsect         4   76[BANK0 ] unsigned long 
 13157 ;;  fs              2   84[BANK0 ] PTR struct _FATFS
 13158 ;;		 -> NULL(0), fs(544), 
 13159 ;;  p               2   82[BANK0 ] PTR unsigned char 
 13160 ;;		 -> fs.win(512), NULL(0), fs(544), 
 13161 ;;  bc              2   80[BANK0 ] unsigned short 
 13162 ;; Return value:  Size  Location     Type
 13163 ;;                  1    wreg      enum E105
 13164 ;; Registers used:
 13165 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13166 ;; Tracked objects:
 13167 ;;		On entry : 0/0
 13168 ;;		On exit  : 0/0
 13169 ;;		Unchanged: 0/0
 13170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13171 ;;      Params:         0       4       0       0       0       0       0       0       0
 13172 ;;      Locals:         0      14       0       0       0       0       0       0       0
 13173 ;;      Temps:          0       4       0       0       0       0       0       0       0
 13174 ;;      Totals:         0      22       0       0       0       0       0       0       0
 13175 ;;Total ram usage:       22 bytes
 13176 ;; Hardware stack levels used:    1
 13177 ;; Hardware stack levels required when called:    9
 13178 ;; This function calls:
 13179 ;;		___wmul
 13180 ;;		_move_window
 13181 ;; This function is called by:
 13182 ;;		_remove_chain
 13183 ;;		_create_chain
 13184 ;; This function uses a non-reentrant model
 13185 ;;
 13186                           
 13187                           	psect	text44
 13188  002A5A                     __ptext44:
 13189                           	opt stack 0
 13190  002A5A                     _put_cluster:
 13191                           	opt stack 14
 13192                           
 13193                           ;tff.c: 202: WORD bc;
 13194                           ;tff.c: 203: BYTE *p;
 13195                           ;tff.c: 204: DWORD fatsect;
 13196                           ;tff.c: 205: FATFS *fs = FatFs;
 13197                           
 13198                           ; BSR set to: 0
 13199                           ;incstack = 0
 13200  002A5A  C0F6  F0B4         	movff	_FatFs,put_cluster@fs
 13201  002A5E  C0F7  F0B5         	movff	_FatFs+1,put_cluster@fs+1
 13202                           
 13203                           ;tff.c: 208: fatsect = fs->fatbase;
 13204  002A62  0100               	movlb	0	; () banked
 13205  002A64  EE20 F008          	lfsr	2,8
 13206  002A68  51B4               	movf	put_cluster@fs& (0+255),w,b
 13207  002A6A  26D9               	addwf	fsr2l,f,c
 13208  002A6C  51B5               	movf	(put_cluster@fs+1)& (0+255),w,b
 13209  002A6E  22DA               	addwfc	fsr2h,f,c
 13210  002A70  CFDE F0AC          	movff	postinc2,put_cluster@fatsect
 13211  002A74  CFDE F0AD          	movff	postinc2,put_cluster@fatsect+1
 13212  002A78  CFDE F0AE          	movff	postinc2,put_cluster@fatsect+2
 13213  002A7C  CFDE F0AF          	movff	postinc2,put_cluster@fatsect+3
 13214                           
 13215                           ;tff.c: 209: switch (fs->fs_type) {
 13216  002A80  D111               	goto	l871
 13217  002A82                     
 13218                           ; BSR set to: 0
 13219                           ;tff.c: 211: bc = (WORD)clust * 3 / 2;
 13220                           
 13221                           ; BSR set to: 0
 13222  002A82  C0A0  F060         	movff	put_cluster@clust,___wmul@multiplier
 13223  002A86  C0A1  F061         	movff	put_cluster@clust+1,___wmul@multiplier+1
 13224  002A8A  0E00               	movlw	0
 13225  002A8C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13226  002A8E  0E03               	movlw	3
 13227  002A90  6F62               	movwf	___wmul@multiplicand& (0+255),b
 13228  002A92  EC94  F028         	call	___wmul	;wreg free
 13229  002A96  90D8               	bcf	status,0,c
 13230  002A98  0100               	movlb	0	; () banked
 13231  002A9A  3161               	rrcf	(?___wmul+1)& (0+255),w,b
 13232  002A9C  6FA4               	movwf	??_put_cluster& (0+255),b
 13233  002A9E  3160               	rrcf	?___wmul& (0+255),w,b
 13234  002AA0  6FB0               	movwf	put_cluster@bc& (0+255),b
 13235  002AA2  C0A4  F0B1         	movff	??_put_cluster,put_cluster@bc+1
 13236                           
 13237                           ; BSR set to: 0
 13238                           ;tff.c: 212: if (!move_window(fatsect + bc / 512U)) return FALSE;
 13239  002AA6  C0B0  F0A4         	movff	put_cluster@bc,??_put_cluster
 13240  002AAA  C0B1  F0A5         	movff	put_cluster@bc+1,??_put_cluster+1
 13241  002AAE  0E09               	movlw	9
 13242  002AB0  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 13243  002AB2                     u10505:
 13244  002AB2  90D8               	bcf	status,0,c
 13245  002AB4  33A5               	rrcf	(??_put_cluster+1)& (0+255),f,b
 13246  002AB6  33A4               	rrcf	??_put_cluster& (0+255),f,b
 13247  002AB8  2FA6               	decfsz	(??_put_cluster+2)& (0+255),f,b
 13248  002ABA  D7FB               	goto	u10505
 13249  002ABC  51A4               	movf	??_put_cluster& (0+255),w,b
 13250  002ABE  25AC               	addwf	put_cluster@fatsect& (0+255),w,b
 13251  002AC0  6F8B               	movwf	move_window@sector& (0+255),b
 13252  002AC2  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 13253  002AC4  21AD               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 13254  002AC6  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 13255  002AC8  0E00               	movlw	0
 13256  002ACA  21AE               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 13257  002ACC  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 13258  002ACE  0E00               	movlw	0
 13259  002AD0  21AF               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 13260  002AD2  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 13261  002AD4  EC40  F019         	call	_move_window	;wreg free
 13262  002AD8  0900               	iorlw	0
 13263  002ADA  A4D8               	btfss	status,2,c
 13264  002ADC  D002               	goto	l873
 13265  002ADE  0E00               	movlw	0
 13266  002AE0  0012               	return	
 13267  002AE2                     l873:
 13268                           
 13269                           ;tff.c: 213: p = &fs->win[bc % 512U];
 13270  002AE2  0EFF               	movlw	255
 13271  002AE4  0100               	movlb	0	; () banked
 13272  002AE6  6FA4               	movwf	??_put_cluster& (0+255),b
 13273  002AE8  0E01               	movlw	1
 13274  002AEA  6FA5               	movwf	(??_put_cluster+1)& (0+255),b
 13275  002AEC  C0B0  F0A6         	movff	put_cluster@bc,??_put_cluster+2
 13276  002AF0  C0B1  F0A7         	movff	put_cluster@bc+1,??_put_cluster+3
 13277  002AF4  51A4               	movf	??_put_cluster& (0+255),w,b
 13278  002AF6  17A6               	andwf	(??_put_cluster+2)& (0+255),f,b
 13279  002AF8  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 13280  002AFA  17A7               	andwf	(??_put_cluster+3)& (0+255),f,b
 13281  002AFC  0E20               	movlw	32
 13282  002AFE  27A6               	addwf	(??_put_cluster+2)& (0+255),f,b
 13283  002B00  0E00               	movlw	0
 13284  002B02  23A7               	addwfc	(??_put_cluster+3)& (0+255),f,b
 13285  002B04  51A6               	movf	(??_put_cluster+2)& (0+255),w,b
 13286  002B06  25B4               	addwf	put_cluster@fs& (0+255),w,b
 13287  002B08  6FB2               	movwf	put_cluster@p& (0+255),b
 13288  002B0A  51A7               	movf	(??_put_cluster+3)& (0+255),w,b
 13289  002B0C  21B5               	addwfc	(put_cluster@fs+1)& (0+255),w,b
 13290  002B0E  6FB3               	movwf	(put_cluster@p+1)& (0+255),b
 13291                           
 13292                           ; BSR set to: 0
 13293                           ;tff.c: 214: *p = (clust & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 13294  002B10  B1A0               	btfsc	put_cluster@clust& (0+255),0,b
 13295  002B12  D004               	goto	l876
 13296                           
 13297                           ; BSR set to: 0
 13298  002B14  C0A2  F0A8         	movff	put_cluster@val,_put_cluster$1806
 13299  002B18  6BA9               	clrf	(_put_cluster$1806+1)& (0+255),b
 13300  002B1A  D01A               	goto	l878
 13301  002B1C                     l876:
 13302                           
 13303                           ; BSR set to: 0
 13304                           
 13305                           ; BSR set to: 0
 13306  002B1C  51A2               	movf	put_cluster@val& (0+255),w,b
 13307  002B1E  6FA4               	movwf	??_put_cluster& (0+255),b
 13308  002B20  6BA5               	clrf	(??_put_cluster+1)& (0+255),b
 13309  002B22  3BA4               	swapf	??_put_cluster& (0+255),f,b
 13310  002B24  3BA5               	swapf	(??_put_cluster+1)& (0+255),f,b
 13311  002B26  0EF0               	movlw	240
 13312  002B28  17A5               	andwf	(??_put_cluster+1)& (0+255),f,b
 13313  002B2A  51A4               	movf	??_put_cluster& (0+255),w,b
 13314  002B2C  0B0F               	andlw	15
 13315  002B2E  13A5               	iorwf	(??_put_cluster+1)& (0+255),f,b
 13316  002B30  0EF0               	movlw	240
 13317  002B32  17A4               	andwf	??_put_cluster& (0+255),f,b
 13318  002B34  C0B2  FFD9         	movff	put_cluster@p,fsr2l
 13319  002B38  C0B3  FFDA         	movff	put_cluster@p+1,fsr2h
 13320  002B3C  50DF               	movf	indf2,w,c
 13321  002B3E  0B0F               	andlw	15
 13322  002B40  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 13323  002B42  6BA7               	clrf	(??_put_cluster+3)& (0+255),b
 13324  002B44  51A4               	movf	??_put_cluster& (0+255),w,b
 13325  002B46  11A6               	iorwf	(??_put_cluster+2)& (0+255),w,b
 13326  002B48  6FA8               	movwf	_put_cluster$1806& (0+255),b
 13327  002B4A  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 13328  002B4C  11A7               	iorwf	(??_put_cluster+3)& (0+255),w,b
 13329  002B4E  6FA9               	movwf	(_put_cluster$1806+1)& (0+255),b
 13330  002B50                     l878:
 13331                           
 13332                           ; BSR set to: 0
 13333                           
 13334                           ; BSR set to: 0
 13335  002B50  C0B2  FFD9         	movff	put_cluster@p,fsr2l
 13336  002B54  C0B3  FFDA         	movff	put_cluster@p+1,fsr2h
 13337  002B58  C0A8  FFDF         	movff	_put_cluster$1806,indf2
 13338                           
 13339                           ; BSR set to: 0
 13340                           ;tff.c: 215: bc++;
 13341  002B5C  4BB0               	infsnz	put_cluster@bc& (0+255),f,b
 13342  002B5E  2BB1               	incf	(put_cluster@bc+1)& (0+255),f,b
 13343                           
 13344                           ; BSR set to: 0
 13345                           ;tff.c: 216: fs->winflag = 1;
 13346  002B60  EE20 F01F          	lfsr	2,31
 13347  002B64  51B4               	movf	put_cluster@fs& (0+255),w,b
 13348  002B66  26D9               	addwf	fsr2l,f,c
 13349  002B68  51B5               	movf	(put_cluster@fs+1)& (0+255),w,b
 13350  002B6A  22DA               	addwfc	fsr2h,f,c
 13351  002B6C  0E01               	movlw	1
 13352  002B6E  6EDF               	movwf	indf2,c
 13353                           
 13354                           ; BSR set to: 0
 13355                           ;tff.c: 217: if (!move_window(fatsect + bc / 512U)) return FALSE;
 13356  002B70  C0B0  F0A4         	movff	put_cluster@bc,??_put_cluster
 13357  002B74  C0B1  F0A5         	movff	put_cluster@bc+1,??_put_cluster+1
 13358  002B78  0E09               	movlw	9
 13359  002B7A  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 13360  002B7C                     u10535:
 13361  002B7C  90D8               	bcf	status,0,c
 13362  002B7E  33A5               	rrcf	(??_put_cluster+1)& (0+255),f,b
 13363  002B80  33A4               	rrcf	??_put_cluster& (0+255),f,b
 13364  002B82  2FA6               	decfsz	(??_put_cluster+2)& (0+255),f,b
 13365  002B84  D7FB               	goto	u10535
 13366  002B86  51A4               	movf	??_put_cluster& (0+255),w,b
 13367  002B88  25AC               	addwf	put_cluster@fatsect& (0+255),w,b
 13368  002B8A  6F8B               	movwf	move_window@sector& (0+255),b
 13369  002B8C  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 13370  002B8E  21AD               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 13371  002B90  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 13372  002B92  0E00               	movlw	0
 13373  002B94  21AE               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 13374  002B96  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 13375  002B98  0E00               	movlw	0
 13376  002B9A  21AF               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 13377  002B9C  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 13378  002B9E  EC40  F019         	call	_move_window	;wreg free
 13379  002BA2  0900               	iorlw	0
 13380  002BA4  A4D8               	btfss	status,2,c
 13381  002BA6  D002               	goto	l879
 13382  002BA8  0E00               	movlw	0
 13383  002BAA  0012               	return	
 13384  002BAC                     l879:
 13385                           
 13386                           ;tff.c: 218: p = &fs->win[bc % 512U];
 13387  002BAC  0EFF               	movlw	255
 13388  002BAE  0100               	movlb	0	; () banked
 13389  002BB0  6FA4               	movwf	??_put_cluster& (0+255),b
 13390  002BB2  0E01               	movlw	1
 13391  002BB4  6FA5               	movwf	(??_put_cluster+1)& (0+255),b
 13392  002BB6  C0B0  F0A6         	movff	put_cluster@bc,??_put_cluster+2
 13393  002BBA  C0B1  F0A7         	movff	put_cluster@bc+1,??_put_cluster+3
 13394  002BBE  51A4               	movf	??_put_cluster& (0+255),w,b
 13395  002BC0  17A6               	andwf	(??_put_cluster+2)& (0+255),f,b
 13396  002BC2  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 13397  002BC4  17A7               	andwf	(??_put_cluster+3)& (0+255),f,b
 13398  002BC6  0E20               	movlw	32
 13399  002BC8  27A6               	addwf	(??_put_cluster+2)& (0+255),f,b
 13400  002BCA  0E00               	movlw	0
 13401  002BCC  23A7               	addwfc	(??_put_cluster+3)& (0+255),f,b
 13402  002BCE  51A6               	movf	(??_put_cluster+2)& (0+255),w,b
 13403  002BD0  25B4               	addwf	put_cluster@fs& (0+255),w,b
 13404  002BD2  6FB2               	movwf	put_cluster@p& (0+255),b
 13405  002BD4  51A7               	movf	(??_put_cluster+3)& (0+255),w,b
 13406  002BD6  21B5               	addwfc	(put_cluster@fs+1)& (0+255),w,b
 13407  002BD8  6FB3               	movwf	(put_cluster@p+1)& (0+255),b
 13408                           
 13409                           ; BSR set to: 0
 13410                           ;tff.c: 219: *p = (clust & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x
      +                          0F));
 13411  002BDA  B1A0               	btfsc	put_cluster@clust& (0+255),0,b
 13412  002BDC  D013               	goto	l881
 13413                           
 13414                           ; BSR set to: 0
 13415  002BDE  C0A2  F0A4         	movff	put_cluster@val,??_put_cluster
 13416  002BE2  C0A3  F0A5         	movff	put_cluster@val+1,??_put_cluster+1
 13417  002BE6  C0A5  F0A4         	movff	??_put_cluster+1,??_put_cluster
 13418  002BEA  6BA5               	clrf	(??_put_cluster+1)& (0+255),b
 13419  002BEC  0E0F               	movlw	15
 13420  002BEE  17A4               	andwf	??_put_cluster& (0+255),f,b
 13421  002BF0  C0B2  FFD9         	movff	put_cluster@p,fsr2l
 13422  002BF4  C0B3  FFDA         	movff	put_cluster@p+1,fsr2h
 13423  002BF8  50DF               	movf	indf2,w,c
 13424  002BFA  0BF0               	andlw	240
 13425  002BFC  11A4               	iorwf	??_put_cluster& (0+255),w,b
 13426  002BFE  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 13427  002C00  51A6               	movf	(??_put_cluster+2)& (0+255),w,b
 13428  002C02  D00C               	goto	L9
 13429  002C04                     l881:
 13430                           
 13431                           ; BSR set to: 0
 13432                           
 13433                           ; BSR set to: 0
 13434  002C04  C0A2  F0A4         	movff	put_cluster@val,??_put_cluster
 13435  002C08  C0A3  F0A5         	movff	put_cluster@val+1,??_put_cluster+1
 13436  002C0C  0E04               	movlw	4
 13437  002C0E  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 13438  002C10                     u10565:
 13439  002C10  90D8               	bcf	status,0,c
 13440  002C12  33A5               	rrcf	(??_put_cluster+1)& (0+255),f,b
 13441  002C14  33A4               	rrcf	??_put_cluster& (0+255),f,b
 13442  002C16  2FA6               	decfsz	(??_put_cluster+2)& (0+255),f,b
 13443  002C18  D7FB               	goto	u10565
 13444  002C1A  51A4               	movf	??_put_cluster& (0+255),w,b
 13445  002C1C                     L9:
 13446  002C1C  6FAA               	movwf	_put_cluster$1807& (0+255),b
 13447  002C1E  6BAB               	clrf	(_put_cluster$1807+1)& (0+255),b
 13448                           
 13449                           ; BSR set to: 0
 13450                           
 13451                           ; BSR set to: 0
 13452  002C20  C0B2  FFD9         	movff	put_cluster@p,fsr2l
 13453  002C24  C0B3  FFDA         	movff	put_cluster@p+1,fsr2h
 13454  002C28  C0AA  FFDF         	movff	_put_cluster$1807,indf2
 13455                           
 13456                           ;tff.c: 220: break;
 13457  002C2C  D049               	goto	l884
 13458  002C2E                     
 13459                           ; BSR set to: 0
 13460                           ;tff.c: 223: if (!move_window(fatsect + clust / 256)) return FALSE;
 13461                           
 13462                           ; BSR set to: 0
 13463  002C2E  C0A0  F0A4         	movff	put_cluster@clust,??_put_cluster
 13464  002C32  C0A1  F0A5         	movff	put_cluster@clust+1,??_put_cluster+1
 13465  002C36  C0A5  F0A4         	movff	??_put_cluster+1,??_put_cluster
 13466  002C3A  6BA5               	clrf	(??_put_cluster+1)& (0+255),b
 13467  002C3C  51A4               	movf	??_put_cluster& (0+255),w,b
 13468  002C3E  25AC               	addwf	put_cluster@fatsect& (0+255),w,b
 13469  002C40  6F8B               	movwf	move_window@sector& (0+255),b
 13470  002C42  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 13471  002C44  21AD               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 13472  002C46  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 13473  002C48  0E00               	movlw	0
 13474  002C4A  21AE               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 13475  002C4C  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 13476  002C4E  0E00               	movlw	0
 13477  002C50  21AF               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 13478  002C52  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 13479  002C54  EC40  F019         	call	_move_window	;wreg free
 13480  002C58  0900               	iorlw	0
 13481  002C5A  A4D8               	btfss	status,2,c
 13482  002C5C  D002               	goto	l886
 13483  002C5E  0E00               	movlw	0
 13484  002C60  0012               	return	
 13485  002C62                     l886:
 13486                           
 13487                           ;tff.c: 224: *(WORD*)(BYTE*)(&fs->win[((WORD)clust * 2) % 512U])=(WORD)((WORD)val);
 13488  002C62  0EFF               	movlw	255
 13489  002C64  0100               	movlb	0	; () banked
 13490  002C66  6FA4               	movwf	??_put_cluster& (0+255),b
 13491  002C68  0E01               	movlw	1
 13492  002C6A  6FA5               	movwf	(??_put_cluster+1)& (0+255),b
 13493  002C6C  C0A0  F0A6         	movff	put_cluster@clust,??_put_cluster+2
 13494  002C70  C0A1  F0A7         	movff	put_cluster@clust+1,??_put_cluster+3
 13495  002C74  90D8               	bcf	status,0,c
 13496  002C76  37A6               	rlcf	(??_put_cluster+2)& (0+255),f,b
 13497  002C78  37A7               	rlcf	(??_put_cluster+3)& (0+255),f,b
 13498  002C7A  51A4               	movf	??_put_cluster& (0+255),w,b
 13499  002C7C  17A6               	andwf	(??_put_cluster+2)& (0+255),f,b
 13500  002C7E  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 13501  002C80  17A7               	andwf	(??_put_cluster+3)& (0+255),f,b
 13502  002C82  0E20               	movlw	32
 13503  002C84  27A6               	addwf	(??_put_cluster+2)& (0+255),f,b
 13504  002C86  0E00               	movlw	0
 13505  002C88  23A7               	addwfc	(??_put_cluster+3)& (0+255),f,b
 13506  002C8A  51A6               	movf	(??_put_cluster+2)& (0+255),w,b
 13507  002C8C  25B4               	addwf	put_cluster@fs& (0+255),w,b
 13508  002C8E  6ED9               	movwf	fsr2l,c
 13509  002C90  51A7               	movf	(??_put_cluster+3)& (0+255),w,b
 13510  002C92  21B5               	addwfc	(put_cluster@fs+1)& (0+255),w,b
 13511  002C94  6EDA               	movwf	fsr2h,c
 13512  002C96  C0A2  FFDE         	movff	put_cluster@val,postinc2
 13513  002C9A  C0A3  FFDD         	movff	put_cluster@val+1,postdec2
 13514                           
 13515                           ;tff.c: 225: break;
 13516  002C9E  D010               	goto	l884
 13517  002CA0                     
 13518                           ; BSR set to: 0
 13519                           ;tff.c: 233: return FALSE;
 13520                           
 13521                           ; BSR set to: 0
 13522  002CA0  0E00               	movlw	0
 13523                           
 13524                           ; BSR set to: 0
 13525  002CA2  0012               	return	
 13526  002CA4                     l871:
 13527                           
 13528                           ; BSR set to: 0
 13529                           
 13530                           ; BSR set to: 0
 13531  002CA4  EE20 F01C          	lfsr	2,28
 13532  002CA8  51B4               	movf	put_cluster@fs& (0+255),w,b
 13533  002CAA  26D9               	addwf	fsr2l,f,c
 13534  002CAC  51B5               	movf	(put_cluster@fs+1)& (0+255),w,b
 13535  002CAE  22DA               	addwfc	fsr2h,f,c
 13536  002CB0  50DF               	movf	indf2,w,c
 13537                           
 13538                           ; Switch size 1, requested type "space"
 13539                           ; Number of cases is 2, Range of values is 1 to 2
 13540                           ; switch strategies available:
 13541                           ; Name         Instructions Cycles
 13542                           ; simple_byte            7     4 (average)
 13543                           ;	Chosen strategy is simple_byte
 13544  002CB2  0A01               	xorlw	1	; case 1
 13545  002CB4  B4D8               	btfsc	status,2,c
 13546  002CB6  D6E5               	goto	l872
 13547  002CB8  0A03               	xorlw	3	; case 2
 13548  002CBA  B4D8               	btfsc	status,2,c
 13549  002CBC  D7B8               	goto	l885
 13550  002CBE  D7F0               	goto	l887
 13551  002CC0                     l884:
 13552                           
 13553                           ; BSR set to: 0
 13554                           ;tff.c: 235: fs->winflag = 1;
 13555                           
 13556                           ; BSR set to: 0
 13557  002CC0  EE20 F01F          	lfsr	2,31
 13558  002CC4  51B4               	movf	put_cluster@fs& (0+255),w,b
 13559  002CC6  26D9               	addwf	fsr2l,f,c
 13560  002CC8  51B5               	movf	(put_cluster@fs+1)& (0+255),w,b
 13561  002CCA  22DA               	addwfc	fsr2h,f,c
 13562  002CCC  0E01               	movlw	1
 13563  002CCE  6EDF               	movwf	indf2,c
 13564                           
 13565                           ; BSR set to: 0
 13566                           ;tff.c: 236: return TRUE;
 13567  002CD0  0E01               	movlw	1
 13568  002CD2  0012               	return	
 13569  002CD4                     __end_of_put_cluster:
 13570                           	opt stack 0
 13571                           tosu	equ	0xFFF
 13572                           tosh	equ	0xFFE
 13573                           tosl	equ	0xFFD
 13574                           pclath	equ	0xFFA
 13575                           tblptru	equ	0xFF8
 13576                           tblptrh	equ	0xFF7
 13577                           tblptrl	equ	0xFF6
 13578                           tablat	equ	0xFF5
 13579                           prodh	equ	0xFF4
 13580                           prodl	equ	0xFF3
 13581                           intcon	equ	0xFF2
 13582                           intcon2	equ	0xFF1
 13583                           intcon3	equ	0xFF0
 13584                           indf0	equ	0xFEF
 13585                           postinc0	equ	0xFEE
 13586                           fsr0h	equ	0xFEA
 13587                           fsr0l	equ	0xFE9
 13588                           wreg	equ	0xFE8
 13589                           indf1	equ	0xFE7
 13590                           postinc1	equ	0xFE6
 13591                           postdec1	equ	0xFE5
 13592                           fsr1h	equ	0xFE2
 13593                           fsr1l	equ	0xFE1
 13594                           indf2	equ	0xFDF
 13595                           postinc2	equ	0xFDE
 13596                           postdec2	equ	0xFDD
 13597                           plusw2	equ	0xFDB
 13598                           fsr2h	equ	0xFDA
 13599                           fsr2l	equ	0xFD9
 13600                           status	equ	0xFD8
 13601                           
 13602 ;; *************** function _get_cluster *****************
 13603 ;; Defined at:
 13604 ;;		line 154 in file "bibliotecas/tff.c"
 13605 ;; Parameters:    Size  Location     Type
 13606 ;;  clust           2   64[BANK0 ] unsigned short 
 13607 ;; Auto vars:     Size  Location     Type
 13608 ;;  fatsect         4   75[BANK0 ] unsigned long 
 13609 ;;  fs              2   81[BANK0 ] PTR struct _FATFS
 13610 ;;		 -> NULL(0), fs(544), 
 13611 ;;  bc              2   79[BANK0 ] unsigned short 
 13612 ;;  wc              2   73[BANK0 ] unsigned short 
 13613 ;; Return value:  Size  Location     Type
 13614 ;;                  2   64[BANK0 ] unsigned short 
 13615 ;; Registers used:
 13616 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13617 ;; Tracked objects:
 13618 ;;		On entry : 0/0
 13619 ;;		On exit  : 0/0
 13620 ;;		Unchanged: 0/0
 13621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13622 ;;      Params:         0       2       0       0       0       0       0       0       0
 13623 ;;      Locals:         0      10       0       0       0       0       0       0       0
 13624 ;;      Temps:          0       7       0       0       0       0       0       0       0
 13625 ;;      Totals:         0      19       0       0       0       0       0       0       0
 13626 ;;Total ram usage:       19 bytes
 13627 ;; Hardware stack levels used:    1
 13628 ;; Hardware stack levels required when called:    9
 13629 ;; This function calls:
 13630 ;;		___wmul
 13631 ;;		_move_window
 13632 ;; This function is called by:
 13633 ;;		_remove_chain
 13634 ;;		_create_chain
 13635 ;;		_next_dir_entry
 13636 ;;		_f_lseek
 13637 ;;		_f_read
 13638 ;; This function uses a non-reentrant model
 13639 ;;
 13640                           
 13641                           	psect	text45
 13642  002CD4                     __ptext45:
 13643                           	opt stack 0
 13644  002CD4                     _get_cluster:
 13645                           	opt stack 14
 13646                           
 13647                           ;tff.c: 158: WORD wc, bc;
 13648                           ;tff.c: 159: DWORD fatsect;
 13649                           ;tff.c: 160: FATFS *fs = FatFs;
 13650                           
 13651                           ;incstack = 0
 13652  002CD4  C0F6  F0B1         	movff	_FatFs,get_cluster@fs
 13653  002CD8  C0F7  F0B2         	movff	_FatFs+1,get_cluster@fs+1
 13654                           
 13655                           ;tff.c: 163: if (clust >= 2 && clust < fs->max_clust) {
 13656  002CDC  0100               	movlb	0	; () banked
 13657  002CDE  51A1               	movf	(get_cluster@clust+1)& (0+255),w,b
 13658  002CE0  E104               	bnz	u10410
 13659  002CE2  0E02               	movlw	2
 13660  002CE4  5DA0               	subwf	get_cluster@clust& (0+255),w,b
 13661  002CE6  A0D8               	btfss	status,0,c
 13662  002CE8  D100               	goto	l860
 13663  002CEA                     u10410:
 13664                           
 13665                           ; BSR set to: 0
 13666  002CEA  EE20 F016          	lfsr	2,22
 13667  002CEE  51B1               	movf	get_cluster@fs& (0+255),w,b
 13668  002CF0  26D9               	addwf	fsr2l,f,c
 13669  002CF2  51B2               	movf	(get_cluster@fs+1)& (0+255),w,b
 13670  002CF4  22DA               	addwfc	fsr2h,f,c
 13671  002CF6  50DE               	movf	postinc2,w,c
 13672  002CF8  5DA0               	subwf	get_cluster@clust& (0+255),w,b
 13673  002CFA  50DE               	movf	postinc2,w,c
 13674  002CFC  59A1               	subwfb	(get_cluster@clust+1)& (0+255),w,b
 13675  002CFE  B0D8               	btfsc	status,0,c
 13676  002D00  D0F4               	goto	l860
 13677                           
 13678                           ; BSR set to: 0
 13679                           ;tff.c: 164: fatsect = fs->fatbase;
 13680  002D02  EE20 F008          	lfsr	2,8
 13681  002D06  51B1               	movf	get_cluster@fs& (0+255),w,b
 13682  002D08  26D9               	addwf	fsr2l,f,c
 13683  002D0A  51B2               	movf	(get_cluster@fs+1)& (0+255),w,b
 13684  002D0C  22DA               	addwfc	fsr2h,f,c
 13685  002D0E  CFDE F0AB          	movff	postinc2,get_cluster@fatsect
 13686  002D12  CFDE F0AC          	movff	postinc2,get_cluster@fatsect+1
 13687  002D16  CFDE F0AD          	movff	postinc2,get_cluster@fatsect+2
 13688  002D1A  CFDE F0AE          	movff	postinc2,get_cluster@fatsect+3
 13689                           
 13690                           ;tff.c: 165: switch (fs->fs_type) {
 13691  002D1E  D0D8               	goto	l857
 13692  002D20                     
 13693                           ; BSR set to: 0
 13694                           ;tff.c: 167: bc = (WORD)clust * 3 / 2;
 13695                           
 13696                           ; BSR set to: 0
 13697  002D20  C0A0  F060         	movff	get_cluster@clust,___wmul@multiplier
 13698  002D24  C0A1  F061         	movff	get_cluster@clust+1,___wmul@multiplier+1
 13699  002D28  0E00               	movlw	0
 13700  002D2A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13701  002D2C  0E03               	movlw	3
 13702  002D2E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 13703  002D30  EC94  F028         	call	___wmul	;wreg free
 13704  002D34  90D8               	bcf	status,0,c
 13705  002D36  0100               	movlb	0	; () banked
 13706  002D38  3161               	rrcf	(?___wmul+1)& (0+255),w,b
 13707  002D3A  6FA2               	movwf	??_get_cluster& (0+255),b
 13708  002D3C  3160               	rrcf	?___wmul& (0+255),w,b
 13709  002D3E  6FAF               	movwf	get_cluster@bc& (0+255),b
 13710  002D40  C0A2  F0B0         	movff	??_get_cluster,get_cluster@bc+1
 13711                           
 13712                           ; BSR set to: 0
 13713                           ;tff.c: 168: if (!move_window(fatsect + bc / 512U)) break;
 13714  002D44  C0AF  F0A2         	movff	get_cluster@bc,??_get_cluster
 13715  002D48  C0B0  F0A3         	movff	get_cluster@bc+1,??_get_cluster+1
 13716  002D4C  0E09               	movlw	9
 13717  002D4E  6FA4               	movwf	(??_get_cluster+2)& (0+255),b
 13718  002D50                     u10435:
 13719  002D50  90D8               	bcf	status,0,c
 13720  002D52  33A3               	rrcf	(??_get_cluster+1)& (0+255),f,b
 13721  002D54  33A2               	rrcf	??_get_cluster& (0+255),f,b
 13722  002D56  2FA4               	decfsz	(??_get_cluster+2)& (0+255),f,b
 13723  002D58  D7FB               	goto	u10435
 13724  002D5A  51A2               	movf	??_get_cluster& (0+255),w,b
 13725  002D5C  25AB               	addwf	get_cluster@fatsect& (0+255),w,b
 13726  002D5E  6F8B               	movwf	move_window@sector& (0+255),b
 13727  002D60  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 13728  002D62  21AC               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 13729  002D64  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 13730  002D66  0E00               	movlw	0
 13731  002D68  21AD               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 13732  002D6A  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 13733  002D6C  0E00               	movlw	0
 13734  002D6E  21AE               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 13735  002D70  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 13736  002D72  EC40  F019         	call	_move_window	;wreg free
 13737  002D76  0900               	iorlw	0
 13738  002D78  B4D8               	btfsc	status,2,c
 13739  002D7A  D0B7               	goto	l860
 13740                           
 13741                           ;tff.c: 169: wc = fs->win[bc % 512U]; bc++;
 13742  002D7C  0EFF               	movlw	255
 13743  002D7E  0100               	movlb	0	; () banked
 13744  002D80  6FA2               	movwf	??_get_cluster& (0+255),b
 13745  002D82  0E01               	movlw	1
 13746  002D84  6FA3               	movwf	(??_get_cluster+1)& (0+255),b
 13747  002D86  C0AF  F0A4         	movff	get_cluster@bc,??_get_cluster+2
 13748  002D8A  C0B0  F0A5         	movff	get_cluster@bc+1,??_get_cluster+3
 13749  002D8E  51A2               	movf	??_get_cluster& (0+255),w,b
 13750  002D90  17A4               	andwf	(??_get_cluster+2)& (0+255),f,b
 13751  002D92  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 13752  002D94  17A5               	andwf	(??_get_cluster+3)& (0+255),f,b
 13753  002D96  0E20               	movlw	32
 13754  002D98  27A4               	addwf	(??_get_cluster+2)& (0+255),f,b
 13755  002D9A  0E00               	movlw	0
 13756  002D9C  23A5               	addwfc	(??_get_cluster+3)& (0+255),f,b
 13757  002D9E  51A4               	movf	(??_get_cluster+2)& (0+255),w,b
 13758  002DA0  25B1               	addwf	get_cluster@fs& (0+255),w,b
 13759  002DA2  6ED9               	movwf	fsr2l,c
 13760  002DA4  51A5               	movf	(??_get_cluster+3)& (0+255),w,b
 13761  002DA6  21B2               	addwfc	(get_cluster@fs+1)& (0+255),w,b
 13762  002DA8  6EDA               	movwf	fsr2h,c
 13763  002DAA  50DF               	movf	indf2,w,c
 13764  002DAC  6FA6               	movwf	(??_get_cluster+4)& (0+255),b
 13765  002DAE  51A6               	movf	(??_get_cluster+4)& (0+255),w,b
 13766  002DB0  6FA9               	movwf	get_cluster@wc& (0+255),b
 13767  002DB2  6BAA               	clrf	(get_cluster@wc+1)& (0+255),b
 13768                           
 13769                           ; BSR set to: 0
 13770  002DB4  4BAF               	infsnz	get_cluster@bc& (0+255),f,b
 13771  002DB6  2BB0               	incf	(get_cluster@bc+1)& (0+255),f,b
 13772                           
 13773                           ; BSR set to: 0
 13774                           ;tff.c: 170: if (!move_window(fatsect + bc / 512U)) break;
 13775  002DB8  C0AF  F0A2         	movff	get_cluster@bc,??_get_cluster
 13776  002DBC  C0B0  F0A3         	movff	get_cluster@bc+1,??_get_cluster+1
 13777  002DC0  0E09               	movlw	9
 13778  002DC2  6FA4               	movwf	(??_get_cluster+2)& (0+255),b
 13779  002DC4                     u10455:
 13780  002DC4  90D8               	bcf	status,0,c
 13781  002DC6  33A3               	rrcf	(??_get_cluster+1)& (0+255),f,b
 13782  002DC8  33A2               	rrcf	??_get_cluster& (0+255),f,b
 13783  002DCA  2FA4               	decfsz	(??_get_cluster+2)& (0+255),f,b
 13784  002DCC  D7FB               	goto	u10455
 13785  002DCE  51A2               	movf	??_get_cluster& (0+255),w,b
 13786  002DD0  25AB               	addwf	get_cluster@fatsect& (0+255),w,b
 13787  002DD2  6F8B               	movwf	move_window@sector& (0+255),b
 13788  002DD4  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 13789  002DD6  21AC               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 13790  002DD8  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 13791  002DDA  0E00               	movlw	0
 13792  002DDC  21AD               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 13793  002DDE  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 13794  002DE0  0E00               	movlw	0
 13795  002DE2  21AE               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 13796  002DE4  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 13797  002DE6  EC40  F019         	call	_move_window	;wreg free
 13798  002DEA  0900               	iorlw	0
 13799  002DEC  B4D8               	btfsc	status,2,c
 13800  002DEE  D07D               	goto	l860
 13801                           
 13802                           ;tff.c: 171: wc |= (WORD)fs->win[bc % 512U] << 8;
 13803  002DF0  0EFF               	movlw	255
 13804  002DF2  0100               	movlb	0	; () banked
 13805  002DF4  6FA2               	movwf	??_get_cluster& (0+255),b
 13806  002DF6  0E01               	movlw	1
 13807  002DF8  6FA3               	movwf	(??_get_cluster+1)& (0+255),b
 13808  002DFA  C0AF  F0A4         	movff	get_cluster@bc,??_get_cluster+2
 13809  002DFE  C0B0  F0A5         	movff	get_cluster@bc+1,??_get_cluster+3
 13810  002E02  51A2               	movf	??_get_cluster& (0+255),w,b
 13811  002E04  17A4               	andwf	(??_get_cluster+2)& (0+255),f,b
 13812  002E06  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 13813  002E08  17A5               	andwf	(??_get_cluster+3)& (0+255),f,b
 13814  002E0A  0E20               	movlw	32
 13815  002E0C  27A4               	addwf	(??_get_cluster+2)& (0+255),f,b
 13816  002E0E  0E00               	movlw	0
 13817  002E10  23A5               	addwfc	(??_get_cluster+3)& (0+255),f,b
 13818  002E12  51A4               	movf	(??_get_cluster+2)& (0+255),w,b
 13819  002E14  25B1               	addwf	get_cluster@fs& (0+255),w,b
 13820  002E16  6ED9               	movwf	fsr2l,c
 13821  002E18  51A5               	movf	(??_get_cluster+3)& (0+255),w,b
 13822  002E1A  21B2               	addwfc	(get_cluster@fs+1)& (0+255),w,b
 13823  002E1C  6EDA               	movwf	fsr2h,c
 13824  002E1E  50DF               	movf	indf2,w,c
 13825  002E20  6FA6               	movwf	(??_get_cluster+4)& (0+255),b
 13826  002E22  51A6               	movf	(??_get_cluster+4)& (0+255),w,b
 13827  002E24  6FA8               	movwf	(??_get_cluster+6)& (0+255),b
 13828  002E26  6BA7               	clrf	(??_get_cluster+5)& (0+255),b
 13829  002E28  51A7               	movf	(??_get_cluster+5)& (0+255),w,b
 13830  002E2A  13A9               	iorwf	get_cluster@wc& (0+255),f,b
 13831  002E2C  51A8               	movf	(??_get_cluster+6)& (0+255),w,b
 13832  002E2E  13AA               	iorwf	(get_cluster@wc+1)& (0+255),f,b
 13833                           
 13834                           ; BSR set to: 0
 13835                           ;tff.c: 172: return (clust & 1) ? (wc >> 4) : (wc & 0xFFF);
 13836  002E30  B1A0               	btfsc	get_cluster@clust& (0+255),0,b
 13837  002E32  D007               	goto	l863
 13838                           
 13839                           ; BSR set to: 0
 13840  002E34  0EFF               	movlw	255
 13841  002E36  15A9               	andwf	get_cluster@wc& (0+255),w,b
 13842  002E38  6FA0               	movwf	?_get_cluster& (0+255),b
 13843  002E3A  0E0F               	movlw	15
 13844  002E3C  15AA               	andwf	(get_cluster@wc+1)& (0+255),w,b
 13845  002E3E  6FA1               	movwf	(?_get_cluster+1)& (0+255),b
 13846  002E40  0012               	return	
 13847  002E42                     l863:
 13848                           
 13849                           ; BSR set to: 0
 13850                           
 13851                           ; BSR set to: 0
 13852  002E42  C0A9  F0A2         	movff	get_cluster@wc,??_get_cluster
 13853  002E46  C0AA  F0A3         	movff	get_cluster@wc+1,??_get_cluster+1
 13854  002E4A  0E04               	movlw	4
 13855  002E4C  6FA4               	movwf	(??_get_cluster+2)& (0+255),b
 13856  002E4E                     u10485:
 13857  002E4E  90D8               	bcf	status,0,c
 13858  002E50  33A3               	rrcf	(??_get_cluster+1)& (0+255),f,b
 13859  002E52  33A2               	rrcf	??_get_cluster& (0+255),f,b
 13860  002E54  2FA4               	decfsz	(??_get_cluster+2)& (0+255),f,b
 13861  002E56  D7FB               	goto	u10485
 13862  002E58  C0A2  F0A0         	movff	??_get_cluster,?_get_cluster
 13863  002E5C  C0A3  F0A1         	movff	??_get_cluster+1,?_get_cluster+1
 13864                           
 13865                           ; BSR set to: 0
 13866                           
 13867                           ; BSR set to: 0
 13868  002E60  0012               	return	
 13869  002E62                     
 13870                           ; BSR set to: 0
 13871                           ;tff.c: 175: if (!move_window(fatsect + clust / 256)) break;
 13872                           
 13873                           ; BSR set to: 0
 13874  002E62  C0A0  F0A2         	movff	get_cluster@clust,??_get_cluster
 13875  002E66  C0A1  F0A3         	movff	get_cluster@clust+1,??_get_cluster+1
 13876  002E6A  C0A3  F0A2         	movff	??_get_cluster+1,??_get_cluster
 13877  002E6E  6BA3               	clrf	(??_get_cluster+1)& (0+255),b
 13878  002E70  51A2               	movf	??_get_cluster& (0+255),w,b
 13879  002E72  25AB               	addwf	get_cluster@fatsect& (0+255),w,b
 13880  002E74  6F8B               	movwf	move_window@sector& (0+255),b
 13881  002E76  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 13882  002E78  21AC               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 13883  002E7A  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 13884  002E7C  0E00               	movlw	0
 13885  002E7E  21AD               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 13886  002E80  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 13887  002E82  0E00               	movlw	0
 13888  002E84  21AE               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 13889  002E86  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 13890  002E88  EC40  F019         	call	_move_window	;wreg free
 13891  002E8C  0900               	iorlw	0
 13892  002E8E  B4D8               	btfsc	status,2,c
 13893  002E90  D02C               	goto	l860
 13894                           
 13895                           ;tff.c: 176: return (WORD)(*(WORD*)(BYTE*)(&fs->win[((WORD)clust * 2) % 512U]));
 13896  002E92  0EFF               	movlw	255
 13897  002E94  0100               	movlb	0	; () banked
 13898  002E96  6FA2               	movwf	??_get_cluster& (0+255),b
 13899  002E98  0E01               	movlw	1
 13900  002E9A  6FA3               	movwf	(??_get_cluster+1)& (0+255),b
 13901  002E9C  C0A0  F0A4         	movff	get_cluster@clust,??_get_cluster+2
 13902  002EA0  C0A1  F0A5         	movff	get_cluster@clust+1,??_get_cluster+3
 13903  002EA4  90D8               	bcf	status,0,c
 13904  002EA6  37A4               	rlcf	(??_get_cluster+2)& (0+255),f,b
 13905  002EA8  37A5               	rlcf	(??_get_cluster+3)& (0+255),f,b
 13906  002EAA  51A2               	movf	??_get_cluster& (0+255),w,b
 13907  002EAC  17A4               	andwf	(??_get_cluster+2)& (0+255),f,b
 13908  002EAE  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 13909  002EB0  17A5               	andwf	(??_get_cluster+3)& (0+255),f,b
 13910  002EB2  0E20               	movlw	32
 13911  002EB4  27A4               	addwf	(??_get_cluster+2)& (0+255),f,b
 13912  002EB6  0E00               	movlw	0
 13913  002EB8  23A5               	addwfc	(??_get_cluster+3)& (0+255),f,b
 13914  002EBA  51A4               	movf	(??_get_cluster+2)& (0+255),w,b
 13915  002EBC  25B1               	addwf	get_cluster@fs& (0+255),w,b
 13916  002EBE  6ED9               	movwf	fsr2l,c
 13917  002EC0  51A5               	movf	(??_get_cluster+3)& (0+255),w,b
 13918  002EC2  21B2               	addwfc	(get_cluster@fs+1)& (0+255),w,b
 13919  002EC4  6EDA               	movwf	fsr2h,c
 13920  002EC6  CFDE F0A0          	movff	postinc2,?_get_cluster
 13921  002ECA  CFDD F0A1          	movff	postdec2,?_get_cluster+1
 13922                           
 13923                           ; BSR set to: 0
 13924  002ECE  0012               	return	
 13925  002ED0                     l857:
 13926                           
 13927                           ; BSR set to: 0
 13928                           
 13929                           ; BSR set to: 0
 13930  002ED0  EE20 F01C          	lfsr	2,28
 13931  002ED4  51B1               	movf	get_cluster@fs& (0+255),w,b
 13932  002ED6  26D9               	addwf	fsr2l,f,c
 13933  002ED8  51B2               	movf	(get_cluster@fs+1)& (0+255),w,b
 13934  002EDA  22DA               	addwfc	fsr2h,f,c
 13935  002EDC  50DF               	movf	indf2,w,c
 13936                           
 13937                           ; Switch size 1, requested type "space"
 13938                           ; Number of cases is 2, Range of values is 1 to 2
 13939                           ; switch strategies available:
 13940                           ; Name         Instructions Cycles
 13941                           ; simple_byte            7     4 (average)
 13942                           ;	Chosen strategy is simple_byte
 13943  002EDE  0A01               	xorlw	1	; case 1
 13944  002EE0  B4D8               	btfsc	status,2,c
 13945  002EE2  D71E               	goto	l858
 13946  002EE4  0A03               	xorlw	3	; case 2
 13947  002EE6  B4D8               	btfsc	status,2,c
 13948  002EE8  D7BC               	goto	l867
 13949  002EEA                     l860:
 13950                           
 13951                           ;tff.c: 183: }
 13952                           ;tff.c: 185: return 1;
 13953                           
 13954                           ; BSR set to: 0
 13955                           
 13956                           ; BSR set to: 0
 13957  002EEA  0E00               	movlw	0
 13958  002EEC  0100               	movlb	0	; () banked
 13959  002EEE  6FA1               	movwf	(?_get_cluster+1)& (0+255),b
 13960  002EF0  0E01               	movlw	1
 13961  002EF2  6FA0               	movwf	?_get_cluster& (0+255),b
 13962  002EF4  0012               	return	
 13963  002EF6                     __end_of_get_cluster:
 13964                           	opt stack 0
 13965                           tosu	equ	0xFFF
 13966                           tosh	equ	0xFFE
 13967                           tosl	equ	0xFFD
 13968                           pclath	equ	0xFFA
 13969                           tblptru	equ	0xFF8
 13970                           tblptrh	equ	0xFF7
 13971                           tblptrl	equ	0xFF6
 13972                           tablat	equ	0xFF5
 13973                           prodh	equ	0xFF4
 13974                           prodl	equ	0xFF3
 13975                           intcon	equ	0xFF2
 13976                           intcon2	equ	0xFF1
 13977                           intcon3	equ	0xFF0
 13978                           indf0	equ	0xFEF
 13979                           postinc0	equ	0xFEE
 13980                           fsr0h	equ	0xFEA
 13981                           fsr0l	equ	0xFE9
 13982                           wreg	equ	0xFE8
 13983                           indf1	equ	0xFE7
 13984                           postinc1	equ	0xFE6
 13985                           postdec1	equ	0xFE5
 13986                           fsr1h	equ	0xFE2
 13987                           fsr1l	equ	0xFE1
 13988                           indf2	equ	0xFDF
 13989                           postinc2	equ	0xFDE
 13990                           postdec2	equ	0xFDD
 13991                           plusw2	equ	0xFDB
 13992                           fsr2h	equ	0xFDA
 13993                           fsr2l	equ	0xFD9
 13994                           status	equ	0xFD8
 13995                           
 13996 ;; *************** function ___wmul *****************
 13997 ;; Defined at:
 13998 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 13999 ;; Parameters:    Size  Location     Type
 14000 ;;  multiplier      2    0[BANK0 ] unsigned int 
 14001 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 14002 ;; Auto vars:     Size  Location     Type
 14003 ;;  product         2    4[BANK0 ] unsigned int 
 14004 ;; Return value:  Size  Location     Type
 14005 ;;                  2    0[BANK0 ] unsigned int 
 14006 ;; Registers used:
 14007 ;;		wreg, status,2, status,0, prodl, prodh
 14008 ;; Tracked objects:
 14009 ;;		On entry : 0/0
 14010 ;;		On exit  : 0/0
 14011 ;;		Unchanged: 0/0
 14012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14013 ;;      Params:         0       4       0       0       0       0       0       0       0
 14014 ;;      Locals:         0       2       0       0       0       0       0       0       0
 14015 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14016 ;;      Totals:         0       6       0       0       0       0       0       0       0
 14017 ;;Total ram usage:        6 bytes
 14018 ;; Hardware stack levels used:    1
 14019 ;; Hardware stack levels required when called:    3
 14020 ;; This function calls:
 14021 ;;		Nothing
 14022 ;; This function is called by:
 14023 ;;		_get_cluster
 14024 ;;		_put_cluster
 14025 ;;		_fprintf
 14026 ;; This function uses a non-reentrant model
 14027 ;;
 14028                           
 14029                           	psect	text46
 14030  005128                     __ptext46:
 14031                           	opt stack 0
 14032  005128                     ___wmul:
 14033                           	opt stack 19
 14034                           
 14035                           ; BSR set to: 0
 14036                           ;incstack = 0
 14037  005128  0100               	movlb	0	; () banked
 14038  00512A  5160               	movf	___wmul@multiplier& (0+255),w,b
 14039  00512C  0362               	mulwf	___wmul@multiplicand& (0+255),b
 14040  00512E  CFF3 F064          	movff	prodl,___wmul@product
 14041  005132  CFF4 F065          	movff	prodh,___wmul@product+1
 14042  005136  5160               	movf	___wmul@multiplier& (0+255),w,b
 14043  005138  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 14044  00513A  50F3               	movf	prodl,w,c
 14045  00513C  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 14046  00513E  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 14047  005140  0362               	mulwf	___wmul@multiplicand& (0+255),b
 14048  005142  50F3               	movf	prodl,w,c
 14049  005144  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 14050                           
 14051                           ; BSR set to: 0
 14052  005146  C064  F060         	movff	___wmul@product,?___wmul
 14053  00514A  C065  F061         	movff	___wmul@product+1,?___wmul+1
 14054  00514E  0012               	return	
 14055  005150                     __end_of___wmul:
 14056                           	opt stack 0
 14057                           tosu	equ	0xFFF
 14058                           tosh	equ	0xFFE
 14059                           tosl	equ	0xFFD
 14060                           pclath	equ	0xFFA
 14061                           tblptru	equ	0xFF8
 14062                           tblptrh	equ	0xFF7
 14063                           tblptrl	equ	0xFF6
 14064                           tablat	equ	0xFF5
 14065                           prodh	equ	0xFF4
 14066                           prodl	equ	0xFF3
 14067                           intcon	equ	0xFF2
 14068                           intcon2	equ	0xFF1
 14069                           intcon3	equ	0xFF0
 14070                           indf0	equ	0xFEF
 14071                           postinc0	equ	0xFEE
 14072                           fsr0h	equ	0xFEA
 14073                           fsr0l	equ	0xFE9
 14074                           wreg	equ	0xFE8
 14075                           indf1	equ	0xFE7
 14076                           postinc1	equ	0xFE6
 14077                           postdec1	equ	0xFE5
 14078                           fsr1h	equ	0xFE2
 14079                           fsr1l	equ	0xFE1
 14080                           indf2	equ	0xFDF
 14081                           postinc2	equ	0xFDE
 14082                           postdec2	equ	0xFDD
 14083                           plusw2	equ	0xFDB
 14084                           fsr2h	equ	0xFDA
 14085                           fsr2l	equ	0xFD9
 14086                           status	equ	0xFD8
 14087                           
 14088 ;; *************** function ___lldiv *****************
 14089 ;; Defined at:
 14090 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 14091 ;; Parameters:    Size  Location     Type
 14092 ;;  dividend        4    0[BANK0 ] unsigned long 
 14093 ;;  divisor         4    4[BANK0 ] unsigned long 
 14094 ;; Auto vars:     Size  Location     Type
 14095 ;;  quotient        4    8[BANK0 ] unsigned long 
 14096 ;;  counter         1   12[BANK0 ] unsigned char 
 14097 ;; Return value:  Size  Location     Type
 14098 ;;                  4    0[BANK0 ] unsigned long 
 14099 ;; Registers used:
 14100 ;;		wreg, status,2, status,0
 14101 ;; Tracked objects:
 14102 ;;		On entry : 0/0
 14103 ;;		On exit  : 0/0
 14104 ;;		Unchanged: 0/0
 14105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14106 ;;      Params:         0       8       0       0       0       0       0       0       0
 14107 ;;      Locals:         0       5       0       0       0       0       0       0       0
 14108 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14109 ;;      Totals:         0      13       0       0       0       0       0       0       0
 14110 ;;Total ram usage:       13 bytes
 14111 ;; Hardware stack levels used:    1
 14112 ;; Hardware stack levels required when called:    3
 14113 ;; This function calls:
 14114 ;;		Nothing
 14115 ;; This function is called by:
 14116 ;;		_auto_mount
 14117 ;;		_f_lseek
 14118 ;;		_fprintf
 14119 ;; This function uses a non-reentrant model
 14120 ;;
 14121                           
 14122                           	psect	text47
 14123  004726                     __ptext47:
 14124                           	opt stack 0
 14125  004726                     ___lldiv:
 14126                           	opt stack 24
 14127                           
 14128                           ; BSR set to: 0
 14129                           ;incstack = 0
 14130  004726  0E00               	movlw	0
 14131  004728  0100               	movlb	0	; () banked
 14132  00472A  6F68               	movwf	___lldiv@quotient& (0+255),b
 14133  00472C  0E00               	movlw	0
 14134  00472E  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 14135  004730  0E00               	movlw	0
 14136  004732  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 14137  004734  0E00               	movlw	0
 14138  004736  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 14139                           
 14140                           ; BSR set to: 0
 14141  004738  5164               	movf	___lldiv@divisor& (0+255),w,b
 14142  00473A  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 14143  00473C  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 14144  00473E  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 14145  004740  B4D8               	btfsc	status,2,c
 14146  004742  D02A               	goto	l1698
 14147                           
 14148                           ; BSR set to: 0
 14149  004744  0E01               	movlw	1
 14150  004746  6F6C               	movwf	___lldiv@counter& (0+255),b
 14151  004748  D006               	goto	l1693
 14152  00474A                     
 14153                           ; BSR set to: 0
 14154                           
 14155                           ; BSR set to: 0
 14156  00474A  90D8               	bcf	status,0,c
 14157  00474C  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 14158  00474E  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 14159  004750  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 14160  004752  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 14161  004754  2B6C               	incf	___lldiv@counter& (0+255),f,b
 14162  004756                     l1693:
 14163                           
 14164                           ; BSR set to: 0
 14165                           
 14166                           ; BSR set to: 0
 14167  004756  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 14168  004758  D7F8               	goto	l1694
 14169  00475A                     u11990:
 14170                           
 14171                           ; BSR set to: 0
 14172                           
 14173                           ; BSR set to: 0
 14174                           
 14175                           ; BSR set to: 0
 14176  00475A  90D8               	bcf	status,0,c
 14177  00475C  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 14178  00475E  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 14179  004760  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 14180  004762  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 14181                           
 14182                           ; BSR set to: 0
 14183  004764  5164               	movf	___lldiv@divisor& (0+255),w,b
 14184  004766  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 14185  004768  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 14186  00476A  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 14187  00476C  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 14188  00476E  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 14189  004770  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 14190  004772  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 14191  004774  A0D8               	btfss	status,0,c
 14192  004776  D009               	goto	l1697
 14193                           
 14194                           ; BSR set to: 0
 14195  004778  5164               	movf	___lldiv@divisor& (0+255),w,b
 14196  00477A  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 14197  00477C  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 14198  00477E  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 14199  004780  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 14200  004782  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 14201  004784  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 14202  004786  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 14203                           
 14204                           ; BSR set to: 0
 14205  004788  8168               	bsf	___lldiv@quotient& (0+255),0,b
 14206  00478A                     l1697:
 14207                           
 14208                           ; BSR set to: 0
 14209                           
 14210                           ; BSR set to: 0
 14211  00478A  90D8               	bcf	status,0,c
 14212  00478C  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 14213  00478E  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 14214  004790  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 14215  004792  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 14216                           
 14217                           ; BSR set to: 0
 14218  004794  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 14219  004796  D7E1               	goto	u11990
 14220  004798                     l1698:
 14221                           
 14222                           ; BSR set to: 0
 14223                           
 14224                           ; BSR set to: 0
 14225  004798  C068  F060         	movff	___lldiv@quotient,?___lldiv
 14226  00479C  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 14227  0047A0  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 14228  0047A4  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 14229                           
 14230                           ; BSR set to: 0
 14231  0047A8  0012               	return		;funcret
 14232  0047AA                     __end_of___lldiv:
 14233                           	opt stack 0
 14234                           tosu	equ	0xFFF
 14235                           tosh	equ	0xFFE
 14236                           tosl	equ	0xFFD
 14237                           pclath	equ	0xFFA
 14238                           tblptru	equ	0xFF8
 14239                           tblptrh	equ	0xFF7
 14240                           tblptrl	equ	0xFF6
 14241                           tablat	equ	0xFF5
 14242                           prodh	equ	0xFF4
 14243                           prodl	equ	0xFF3
 14244                           intcon	equ	0xFF2
 14245                           intcon2	equ	0xFF1
 14246                           intcon3	equ	0xFF0
 14247                           indf0	equ	0xFEF
 14248                           postinc0	equ	0xFEE
 14249                           fsr0h	equ	0xFEA
 14250                           fsr0l	equ	0xFE9
 14251                           wreg	equ	0xFE8
 14252                           indf1	equ	0xFE7
 14253                           postinc1	equ	0xFE6
 14254                           postdec1	equ	0xFE5
 14255                           fsr1h	equ	0xFE2
 14256                           fsr1l	equ	0xFE1
 14257                           indf2	equ	0xFDF
 14258                           postinc2	equ	0xFDE
 14259                           postdec2	equ	0xFDD
 14260                           plusw2	equ	0xFDB
 14261                           fsr2h	equ	0xFDA
 14262                           fsr2l	equ	0xFD9
 14263                           status	equ	0xFD8
 14264                           
 14265 ;; *************** function _f_close *****************
 14266 ;; Defined at:
 14267 ;;		line 1108 in file "bibliotecas/tff.c"
 14268 ;; Parameters:    Size  Location     Type
 14269 ;;  fp              2   75[BANK0 ] PTR struct _FIL
 14270 ;;		 -> fil(28), 
 14271 ;; Auto vars:     Size  Location     Type
 14272 ;;  res             1   77[BANK0 ] enum E155
 14273 ;; Return value:  Size  Location     Type
 14274 ;;                  1    wreg      enum E3972
 14275 ;; Registers used:
 14276 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14277 ;; Tracked objects:
 14278 ;;		On entry : 0/0
 14279 ;;		On exit  : 0/0
 14280 ;;		Unchanged: 0/0
 14281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14282 ;;      Params:         0       2       0       0       0       0       0       0       0
 14283 ;;      Locals:         0       1       0       0       0       0       0       0       0
 14284 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14285 ;;      Totals:         0       3       0       0       0       0       0       0       0
 14286 ;;Total ram usage:        3 bytes
 14287 ;; Hardware stack levels used:    1
 14288 ;; Hardware stack levels required when called:   11
 14289 ;; This function calls:
 14290 ;;		_f_sync
 14291 ;; This function is called by:
 14292 ;;		_escrita_sdcard
 14293 ;;		_sdcard_init
 14294 ;; This function uses a non-reentrant model
 14295 ;;
 14296                           
 14297                           	psect	text48
 14298  0050A6                     __ptext48:
 14299                           	opt stack 0
 14300  0050A6                     _f_close:
 14301                           	opt stack 17
 14302                           
 14303                           ;tff.c: 1112: FRESULT res;
 14304                           ;tff.c: 1116: res = f_sync(fp);
 14305                           
 14306                           ; BSR set to: 0
 14307                           ;incstack = 0
 14308  0050A6  C0AB  F0A2         	movff	f_close@fp,f_sync@fp
 14309  0050AA  C0AC  F0A3         	movff	f_close@fp+1,f_sync@fp+1
 14310  0050AE  ECFF  F01D         	call	_f_sync	;wreg free
 14311  0050B2  0100               	movlb	0	; () banked
 14312  0050B4  6FAD               	movwf	f_close@res& (0+255),b
 14313                           
 14314                           ; BSR set to: 0
 14315                           ;tff.c: 1120: if (res == FR_OK) fp->fs = (0);
 14316  0050B6  51AD               	movf	f_close@res& (0+255),w,b
 14317  0050B8  A4D8               	btfss	status,2,c
 14318  0050BA  0012               	return	
 14319                           
 14320                           ; BSR set to: 0
 14321  0050BC  EE20 F004          	lfsr	2,4
 14322  0050C0  51AB               	movf	f_close@fp& (0+255),w,b
 14323  0050C2  26D9               	addwf	fsr2l,f,c
 14324  0050C4  51AC               	movf	(f_close@fp+1)& (0+255),w,b
 14325  0050C6  22DA               	addwfc	fsr2h,f,c
 14326  0050C8  0E00               	movlw	0
 14327  0050CA  6EDE               	movwf	postinc2,c
 14328  0050CC  0E00               	movlw	0
 14329  0050CE  6EDD               	movwf	postdec2,c
 14330                           
 14331                           ; BSR set to: 0
 14332  0050D0  0012               	return	
 14333  0050D2                     __end_of_f_close:
 14334                           	opt stack 0
 14335                           tosu	equ	0xFFF
 14336                           tosh	equ	0xFFE
 14337                           tosl	equ	0xFFD
 14338                           pclath	equ	0xFFA
 14339                           tblptru	equ	0xFF8
 14340                           tblptrh	equ	0xFF7
 14341                           tblptrl	equ	0xFF6
 14342                           tablat	equ	0xFF5
 14343                           prodh	equ	0xFF4
 14344                           prodl	equ	0xFF3
 14345                           intcon	equ	0xFF2
 14346                           intcon2	equ	0xFF1
 14347                           intcon3	equ	0xFF0
 14348                           indf0	equ	0xFEF
 14349                           postinc0	equ	0xFEE
 14350                           fsr0h	equ	0xFEA
 14351                           fsr0l	equ	0xFE9
 14352                           wreg	equ	0xFE8
 14353                           indf1	equ	0xFE7
 14354                           postinc1	equ	0xFE6
 14355                           postdec1	equ	0xFE5
 14356                           fsr1h	equ	0xFE2
 14357                           fsr1l	equ	0xFE1
 14358                           indf2	equ	0xFDF
 14359                           postinc2	equ	0xFDE
 14360                           postdec2	equ	0xFDD
 14361                           plusw2	equ	0xFDB
 14362                           fsr2h	equ	0xFDA
 14363                           fsr2l	equ	0xFD9
 14364                           status	equ	0xFD8
 14365                           
 14366 ;; *************** function _f_sync *****************
 14367 ;; Defined at:
 14368 ;;		line 1069 in file "bibliotecas/tff.c"
 14369 ;; Parameters:    Size  Location     Type
 14370 ;;  fp              2   66[BANK0 ] PTR struct _FIL
 14371 ;;		 -> fil(28), 
 14372 ;; Auto vars:     Size  Location     Type
 14373 ;;  tim             4   68[BANK0 ] unsigned long 
 14374 ;;  dir             2   73[BANK0 ] PTR unsigned char 
 14375 ;;		 -> NULL(0), fs(544), 
 14376 ;;  res             1   72[BANK0 ] enum E155
 14377 ;; Return value:  Size  Location     Type
 14378 ;;                  1    wreg      enum E155
 14379 ;; Registers used:
 14380 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14381 ;; Tracked objects:
 14382 ;;		On entry : 0/0
 14383 ;;		On exit  : 0/0
 14384 ;;		Unchanged: 0/0
 14385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14386 ;;      Params:         0       2       0       0       0       0       0       0       0
 14387 ;;      Locals:         0       7       0       0       0       0       0       0       0
 14388 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14389 ;;      Totals:         0       9       0       0       0       0       0       0       0
 14390 ;;Total ram usage:        9 bytes
 14391 ;; Hardware stack levels used:    1
 14392 ;; Hardware stack levels required when called:   10
 14393 ;; This function calls:
 14394 ;;		_get_fattime
 14395 ;;		_move_window
 14396 ;;		_sync
 14397 ;;		_validate
 14398 ;; This function is called by:
 14399 ;;		_f_close
 14400 ;; This function uses a non-reentrant model
 14401 ;;
 14402                           
 14403                           	psect	text49
 14404  003BFE                     __ptext49:
 14405                           	opt stack 0
 14406  003BFE                     _f_sync:
 14407                           	opt stack 17
 14408                           
 14409                           ;tff.c: 1073: FRESULT res;
 14410                           ;tff.c: 1074: DWORD tim;
 14411                           ;tff.c: 1075: BYTE *dir;
 14412                           ;tff.c: 1078: res = validate(fp->fs, fp->id);
 14413                           
 14414                           ; BSR set to: 0
 14415                           ;incstack = 0
 14416  003BFE  0100               	movlb	0	; () banked
 14417  003C00  EE20 F004          	lfsr	2,4
 14418  003C04  51A2               	movf	f_sync@fp& (0+255),w,b
 14419  003C06  26D9               	addwf	fsr2l,f,c
 14420  003C08  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 14421  003C0A  22DA               	addwfc	fsr2h,f,c
 14422  003C0C  CFDE F067          	movff	postinc2,validate@fs
 14423  003C10  CFDD F068          	movff	postdec2,validate@fs+1
 14424  003C14  C0A2  FFD9         	movff	f_sync@fp,fsr2l
 14425  003C18  C0A3  FFDA         	movff	f_sync@fp+1,fsr2h
 14426  003C1C  CFDE F069          	movff	postinc2,validate@id
 14427  003C20  CFDD F06A          	movff	postdec2,validate@id+1
 14428  003C24  EC79  F026         	call	_validate	;wreg free
 14429  003C28  0100               	movlb	0	; () banked
 14430  003C2A  6FA8               	movwf	f_sync@res& (0+255),b
 14431                           
 14432                           ; BSR set to: 0
 14433                           ;tff.c: 1079: if (res == FR_OK) {
 14434  003C2C  51A8               	movf	f_sync@res& (0+255),w,b
 14435  003C2E  A4D8               	btfss	status,2,c
 14436  003C30  D079               	goto	l1168
 14437                           
 14438                           ; BSR set to: 0
 14439                           ;tff.c: 1080: if (fp->flag & 0x20) {
 14440  003C32  EE20 F002          	lfsr	2,2
 14441  003C36  51A2               	movf	f_sync@fp& (0+255),w,b
 14442  003C38  26D9               	addwf	fsr2l,f,c
 14443  003C3A  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 14444  003C3C  22DA               	addwfc	fsr2h,f,c
 14445  003C3E  AADF               	btfss	indf2,5,c
 14446  003C40  D071               	goto	l1168
 14447                           
 14448                           ; BSR set to: 0
 14449                           ;tff.c: 1082: if (!move_window(fp->dir_sect))
 14450  003C42  EE20 F016          	lfsr	2,22
 14451  003C46  51A2               	movf	f_sync@fp& (0+255),w,b
 14452  003C48  26D9               	addwf	fsr2l,f,c
 14453  003C4A  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 14454  003C4C  22DA               	addwfc	fsr2h,f,c
 14455  003C4E  CFDE F08B          	movff	postinc2,move_window@sector
 14456  003C52  CFDE F08C          	movff	postinc2,move_window@sector+1
 14457  003C56  CFDE F08D          	movff	postinc2,move_window@sector+2
 14458  003C5A  CFDE F08E          	movff	postinc2,move_window@sector+3
 14459  003C5E  EC40  F019         	call	_move_window	;wreg free
 14460  003C62  0900               	iorlw	0
 14461  003C64  A4D8               	btfss	status,2,c
 14462  003C66  D002               	goto	l1169
 14463                           
 14464                           ;tff.c: 1083: return FR_RW_ERROR;
 14465  003C68  0E08               	movlw	8
 14466  003C6A  0012               	return	
 14467  003C6C                     l1169:
 14468                           
 14469                           ;tff.c: 1084: dir = fp->dir_ptr;
 14470  003C6C  0100               	movlb	0	; () banked
 14471  003C6E  EE20 F01A          	lfsr	2,26
 14472  003C72  51A2               	movf	f_sync@fp& (0+255),w,b
 14473  003C74  26D9               	addwf	fsr2l,f,c
 14474  003C76  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 14475  003C78  22DA               	addwfc	fsr2h,f,c
 14476  003C7A  CFDE F0A9          	movff	postinc2,f_sync@dir
 14477  003C7E  CFDD F0AA          	movff	postdec2,f_sync@dir+1
 14478                           
 14479                           ;tff.c: 1085: dir[11] |= 0x20;
 14480  003C82  EE20 F00B          	lfsr	2,11
 14481  003C86  51A9               	movf	f_sync@dir& (0+255),w,b
 14482  003C88  26D9               	addwf	fsr2l,f,c
 14483  003C8A  51AA               	movf	(f_sync@dir+1)& (0+255),w,b
 14484  003C8C  22DA               	addwfc	fsr2h,f,c
 14485  003C8E  0E00               	movlw	0
 14486  003C90  8ADB               	bsf	plusw2,5,c
 14487                           
 14488                           ; BSR set to: 0
 14489                           ;tff.c: 1086: *(DWORD*)(BYTE*)(&dir[28])=(DWORD)(fp->fsize);
 14490  003C92  EE20 F00A          	lfsr	2,10
 14491  003C96  51A2               	movf	f_sync@fp& (0+255),w,b
 14492  003C98  26D9               	addwf	fsr2l,f,c
 14493  003C9A  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 14494  003C9C  22DA               	addwfc	fsr2h,f,c
 14495  003C9E  EE10 F01C          	lfsr	1,28
 14496  003CA2  51A9               	movf	f_sync@dir& (0+255),w,b
 14497  003CA4  26E1               	addwf	fsr1l,f,c
 14498  003CA6  51AA               	movf	(f_sync@dir+1)& (0+255),w,b
 14499  003CA8  22E2               	addwfc	fsr1h,f,c
 14500  003CAA  CFDE FFE6          	movff	postinc2,postinc1
 14501  003CAE  CFDE FFE6          	movff	postinc2,postinc1
 14502  003CB2  CFDE FFE6          	movff	postinc2,postinc1
 14503  003CB6  CFDE FFE6          	movff	postinc2,postinc1
 14504                           
 14505                           ; BSR set to: 0
 14506                           ;tff.c: 1087: *(WORD*)(BYTE*)(&dir[26])=(WORD)(fp->org_clust);
 14507  003CBA  EE20 F00E          	lfsr	2,14
 14508  003CBE  51A2               	movf	f_sync@fp& (0+255),w,b
 14509  003CC0  26D9               	addwf	fsr2l,f,c
 14510  003CC2  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 14511  003CC4  22DA               	addwfc	fsr2h,f,c
 14512  003CC6  EE10 F01A          	lfsr	1,26
 14513  003CCA  51A9               	movf	f_sync@dir& (0+255),w,b
 14514  003CCC  26E1               	addwf	fsr1l,f,c
 14515  003CCE  51AA               	movf	(f_sync@dir+1)& (0+255),w,b
 14516  003CD0  22E2               	addwfc	fsr1h,f,c
 14517  003CD2  CFDE FFE6          	movff	postinc2,postinc1
 14518  003CD6  CFDD FFE5          	movff	postdec2,postdec1
 14519                           
 14520                           ; BSR set to: 0
 14521                           ;tff.c: 1091: tim = get_fattime();
 14522  003CDA  EC94  F01E         	call	_get_fattime	;wreg free
 14523  003CDE  C060  F0A4         	movff	?_get_fattime,f_sync@tim
 14524  003CE2  C061  F0A5         	movff	?_get_fattime+1,f_sync@tim+1
 14525  003CE6  C062  F0A6         	movff	?_get_fattime+2,f_sync@tim+2
 14526  003CEA  C063  F0A7         	movff	?_get_fattime+3,f_sync@tim+3
 14527                           
 14528                           ;tff.c: 1092: *(DWORD*)(BYTE*)(&dir[22])=(DWORD)(tim);
 14529  003CEE  0100               	movlb	0	; () banked
 14530  003CF0  EE20 F016          	lfsr	2,22
 14531  003CF4  51A9               	movf	f_sync@dir& (0+255),w,b
 14532  003CF6  26D9               	addwf	fsr2l,f,c
 14533  003CF8  51AA               	movf	(f_sync@dir+1)& (0+255),w,b
 14534  003CFA  22DA               	addwfc	fsr2h,f,c
 14535  003CFC  C0A4  FFDE         	movff	f_sync@tim,postinc2
 14536  003D00  C0A5  FFDE         	movff	f_sync@tim+1,postinc2
 14537  003D04  C0A6  FFDE         	movff	f_sync@tim+2,postinc2
 14538  003D08  C0A7  FFDE         	movff	f_sync@tim+3,postinc2
 14539                           
 14540                           ; BSR set to: 0
 14541                           ;tff.c: 1093: fp->flag &= (BYTE)~0x20;
 14542  003D0C  EE20 F002          	lfsr	2,2
 14543  003D10  51A2               	movf	f_sync@fp& (0+255),w,b
 14544  003D12  26D9               	addwf	fsr2l,f,c
 14545  003D14  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 14546  003D16  22DA               	addwfc	fsr2h,f,c
 14547  003D18  0EDF               	movlw	223
 14548  003D1A  16DF               	andwf	indf2,f,c
 14549                           
 14550                           ; BSR set to: 0
 14551                           ;tff.c: 1094: res = sync();
 14552  003D1C  EC54  F025         	call	_sync	;wreg free
 14553  003D20  0100               	movlb	0	; () banked
 14554  003D22  6FA8               	movwf	f_sync@res& (0+255),b
 14555  003D24                     l1168:
 14556                           
 14557                           ; BSR set to: 0
 14558                           ;tff.c: 1095: }
 14559                           ;tff.c: 1096: }
 14560                           ;tff.c: 1097: return res;
 14561                           
 14562                           ; BSR set to: 0
 14563                           
 14564                           ; BSR set to: 0
 14565  003D24  51A8               	movf	f_sync@res& (0+255),w,b
 14566  003D26  0012               	return	
 14567  003D28                     __end_of_f_sync:
 14568                           	opt stack 0
 14569                           tosu	equ	0xFFF
 14570                           tosh	equ	0xFFE
 14571                           tosl	equ	0xFFD
 14572                           pclath	equ	0xFFA
 14573                           tblptru	equ	0xFF8
 14574                           tblptrh	equ	0xFF7
 14575                           tblptrl	equ	0xFF6
 14576                           tablat	equ	0xFF5
 14577                           prodh	equ	0xFF4
 14578                           prodl	equ	0xFF3
 14579                           intcon	equ	0xFF2
 14580                           intcon2	equ	0xFF1
 14581                           intcon3	equ	0xFF0
 14582                           indf0	equ	0xFEF
 14583                           postinc0	equ	0xFEE
 14584                           fsr0h	equ	0xFEA
 14585                           fsr0l	equ	0xFE9
 14586                           wreg	equ	0xFE8
 14587                           indf1	equ	0xFE7
 14588                           postinc1	equ	0xFE6
 14589                           postdec1	equ	0xFE5
 14590                           fsr1h	equ	0xFE2
 14591                           fsr1l	equ	0xFE1
 14592                           indf2	equ	0xFDF
 14593                           postinc2	equ	0xFDE
 14594                           postdec2	equ	0xFDD
 14595                           plusw2	equ	0xFDB
 14596                           fsr2h	equ	0xFDA
 14597                           fsr2l	equ	0xFD9
 14598                           status	equ	0xFD8
 14599                           
 14600 ;; *************** function _validate *****************
 14601 ;; Defined at:
 14602 ;;		line 766 in file "bibliotecas/tff.c"
 14603 ;; Parameters:    Size  Location     Type
 14604 ;;  fs              2    7[BANK0 ] PTR const struct _FATFS
 14605 ;;		 -> NULL(0), fs(544), 
 14606 ;;  id              2    9[BANK0 ] unsigned short 
 14607 ;; Auto vars:     Size  Location     Type
 14608 ;;		None
 14609 ;; Return value:  Size  Location     Type
 14610 ;;                  1    wreg      enum E155
 14611 ;; Registers used:
 14612 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14613 ;; Tracked objects:
 14614 ;;		On entry : 0/0
 14615 ;;		On exit  : 0/0
 14616 ;;		Unchanged: 0/0
 14617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14618 ;;      Params:         0       4       0       0       0       0       0       0       0
 14619 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14620 ;;      Temps:          0       2       0       0       0       0       0       0       0
 14621 ;;      Totals:         0       6       0       0       0       0       0       0       0
 14622 ;;Total ram usage:        6 bytes
 14623 ;; Hardware stack levels used:    1
 14624 ;; Hardware stack levels required when called:    5
 14625 ;; This function calls:
 14626 ;;		_disk_status
 14627 ;; This function is called by:
 14628 ;;		_f_write
 14629 ;;		_f_sync
 14630 ;;		_f_lseek
 14631 ;;		_f_read
 14632 ;;		_f_readdir
 14633 ;; This function uses a non-reentrant model
 14634 ;;
 14635                           
 14636                           	psect	text50
 14637  004CF2                     __ptext50:
 14638                           	opt stack 0
 14639  004CF2                     _validate:
 14640                           	opt stack 19
 14641                           
 14642                           ;tff.c: 771: if (!fs || !fs->fs_type || fs->id != id)
 14643                           
 14644                           ;incstack = 0
 14645  004CF2  0100               	movlb	0	; () banked
 14646  004CF4  5167               	movf	validate@fs& (0+255),w,b
 14647  004CF6  1168               	iorwf	(validate@fs+1)& (0+255),w,b
 14648  004CF8  B4D8               	btfsc	status,2,c
 14649  004CFA  D014               	goto	u10810
 14650                           
 14651                           ; BSR set to: 0
 14652  004CFC  EE20 F01C          	lfsr	2,28
 14653  004D00  5167               	movf	validate@fs& (0+255),w,b
 14654  004D02  26D9               	addwf	fsr2l,f,c
 14655  004D04  5168               	movf	(validate@fs+1)& (0+255),w,b
 14656  004D06  22DA               	addwfc	fsr2h,f,c
 14657  004D08  50DF               	movf	indf2,w,c
 14658  004D0A  B4D8               	btfsc	status,2,c
 14659  004D0C  D00B               	goto	u10810
 14660                           
 14661                           ; BSR set to: 0
 14662  004D0E  C067  FFD9         	movff	validate@fs,fsr2l
 14663  004D12  C068  FFDA         	movff	validate@fs+1,fsr2h
 14664  004D16  5169               	movf	validate@id& (0+255),w,b
 14665  004D18  18DE               	xorwf	postinc2,w,c
 14666  004D1A  E104               	bnz	l9007
 14667  004D1C  516A               	movf	(validate@id+1)& (0+255),w,b
 14668  004D1E  18DE               	xorwf	postinc2,w,c
 14669  004D20  B4D8               	btfsc	status,2,c
 14670  004D22  D002               	goto	l1072
 14671  004D24                     u10810:
 14672  004D24                     l9007:
 14673                           
 14674                           ; BSR set to: 0
 14675                           ;tff.c: 772: return FR_INVALID_OBJECT;
 14676  004D24  0E0C               	movlw	12
 14677                           
 14678                           ; BSR set to: 0
 14679  004D26  0012               	return	
 14680  004D28                     l1072:
 14681                           
 14682                           ; BSR set to: 0
 14683                           ;tff.c: 773: if (disk_status(0) & 0x01)
 14684                           
 14685                           ; BSR set to: 0
 14686  004D28  0E00               	movlw	0
 14687  004D2A  ECC3  F026         	call	_disk_status
 14688  004D2E  0100               	movlb	0	; () banked
 14689  004D30  6F6B               	movwf	??_validate& (0+255),b
 14690  004D32  A16B               	btfss	??_validate& (0+255),0,b
 14691  004D34  D002               	goto	l1076
 14692                           
 14693                           ; BSR set to: 0
 14694                           ;tff.c: 774: return FR_NOT_READY;
 14695  004D36  0E01               	movlw	1
 14696                           
 14697                           ; BSR set to: 0
 14698  004D38  0012               	return	
 14699  004D3A                     l1076:
 14700                           
 14701                           ; BSR set to: 0
 14702                           ;tff.c: 776: return FR_OK;
 14703                           
 14704                           ; BSR set to: 0
 14705  004D3A  0E00               	movlw	0
 14706  004D3C  0012               	return	
 14707  004D3E                     __end_of_validate:
 14708                           	opt stack 0
 14709                           tosu	equ	0xFFF
 14710                           tosh	equ	0xFFE
 14711                           tosl	equ	0xFFD
 14712                           pclath	equ	0xFFA
 14713                           tblptru	equ	0xFF8
 14714                           tblptrh	equ	0xFF7
 14715                           tblptrl	equ	0xFF6
 14716                           tablat	equ	0xFF5
 14717                           prodh	equ	0xFF4
 14718                           prodl	equ	0xFF3
 14719                           intcon	equ	0xFF2
 14720                           intcon2	equ	0xFF1
 14721                           intcon3	equ	0xFF0
 14722                           indf0	equ	0xFEF
 14723                           postinc0	equ	0xFEE
 14724                           fsr0h	equ	0xFEA
 14725                           fsr0l	equ	0xFE9
 14726                           wreg	equ	0xFE8
 14727                           indf1	equ	0xFE7
 14728                           postinc1	equ	0xFE6
 14729                           postdec1	equ	0xFE5
 14730                           fsr1h	equ	0xFE2
 14731                           fsr1l	equ	0xFE1
 14732                           indf2	equ	0xFDF
 14733                           postinc2	equ	0xFDE
 14734                           postdec2	equ	0xFDD
 14735                           plusw2	equ	0xFDB
 14736                           fsr2h	equ	0xFDA
 14737                           fsr2l	equ	0xFD9
 14738                           status	equ	0xFD8
 14739                           
 14740 ;; *************** function _disk_status *****************
 14741 ;; Defined at:
 14742 ;;		line 27 in file "bibliotecas/diskio.c"
 14743 ;; Parameters:    Size  Location     Type
 14744 ;;  pdrv            1    wreg     unsigned char 
 14745 ;; Auto vars:     Size  Location     Type
 14746 ;;  pdrv            1    5[BANK0 ] unsigned char 
 14747 ;;  result          2    3[BANK0 ] int 
 14748 ;;  stat            1    6[BANK0 ] unsigned char 
 14749 ;; Return value:  Size  Location     Type
 14750 ;;                  1    wreg      unsigned char 
 14751 ;; Registers used:
 14752 ;;		wreg, status,2, status,0, cstack
 14753 ;; Tracked objects:
 14754 ;;		On entry : 0/0
 14755 ;;		On exit  : 0/0
 14756 ;;		Unchanged: 0/0
 14757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14758 ;;      Params:         0       0       0       0       0       0       0       0       0
 14759 ;;      Locals:         0       4       0       0       0       0       0       0       0
 14760 ;;      Temps:          0       1       0       0       0       0       0       0       0
 14761 ;;      Totals:         0       5       0       0       0       0       0       0       0
 14762 ;;Total ram usage:        5 bytes
 14763 ;; Hardware stack levels used:    1
 14764 ;; Hardware stack levels required when called:    4
 14765 ;; This function calls:
 14766 ;;		_sdc_disk_status
 14767 ;; This function is called by:
 14768 ;;		_auto_mount
 14769 ;;		_validate
 14770 ;; This function uses a non-reentrant model
 14771 ;;
 14772                           
 14773                           	psect	text51
 14774  004D86                     __ptext51:
 14775                           	opt stack 0
 14776  004D86                     _disk_status:
 14777                           	opt stack 19
 14778                           
 14779                           ; BSR set to: 0
 14780                           ;incstack = 0
 14781                           ;disk_status@pdrv stored from wreg
 14782  004D86  0100               	movlb	0	; () banked
 14783  004D88  6F65               	movwf	disk_status@pdrv& (0+255),b
 14784                           
 14785                           ;diskio.c: 31: DSTATUS stat;
 14786                           ;diskio.c: 32: int result;
 14787                           ;diskio.c: 34: switch (pdrv) {
 14788  004D8A  D014               	goto	l354
 14789  004D8C                     
 14790                           ;diskio.c: 36: stat = sdc_disk_status(pdrv);
 14791  004D8C  0100               	movlb	0	; () banked
 14792  004D8E  5165               	movf	disk_status@pdrv& (0+255),w,b
 14793  004D90  ECF5  F028         	call	_sdc_disk_status
 14794  004D94  0100               	movlb	0	; () banked
 14795  004D96  6F66               	movwf	disk_status@stat& (0+255),b
 14796                           
 14797                           ; BSR set to: 0
 14798                           ;diskio.c: 39: return stat;
 14799  004D98  5166               	movf	disk_status@stat& (0+255),w,b
 14800                           
 14801                           ; BSR set to: 0
 14802  004D9A  0012               	return	
 14803  004D9C                     
 14804                           ; BSR set to: 0
 14805                           ;diskio.c: 42: result = sdc_disk_status(pdrv);
 14806                           
 14807                           ; BSR set to: 0
 14808  004D9C  5165               	movf	disk_status@pdrv& (0+255),w,b
 14809  004D9E  ECF5  F028         	call	_sdc_disk_status
 14810  004DA2  0100               	movlb	0	; () banked
 14811  004DA4  6F62               	movwf	??_disk_status& (0+255),b
 14812  004DA6  5162               	movf	??_disk_status& (0+255),w,b
 14813  004DA8  6F63               	movwf	disk_status@result& (0+255),b
 14814  004DAA  6B64               	clrf	(disk_status@result+1)& (0+255),b
 14815                           
 14816                           ; BSR set to: 0
 14817                           ;diskio.c: 44: return stat;
 14818  004DAC  5166               	movf	disk_status@stat& (0+255),w,b
 14819                           
 14820                           ; BSR set to: 0
 14821  004DAE  0012               	return	
 14822  004DB0                     
 14823                           ; BSR set to: 0
 14824                           ;diskio.c: 48: return stat;
 14825                           
 14826                           ; BSR set to: 0
 14827  004DB0  5166               	movf	disk_status@stat& (0+255),w,b
 14828                           
 14829                           ; BSR set to: 0
 14830  004DB2  0012               	return	
 14831  004DB4                     l354:
 14832                           
 14833                           ; BSR set to: 0
 14834  004DB4  0100               	movlb	0	; () banked
 14835  004DB6  5165               	movf	disk_status@pdrv& (0+255),w,b
 14836                           
 14837                           ; Switch size 1, requested type "space"
 14838                           ; Number of cases is 3, Range of values is 0 to 2
 14839                           ; switch strategies available:
 14840                           ; Name         Instructions Cycles
 14841                           ; simple_byte           10     6 (average)
 14842                           ;	Chosen strategy is simple_byte
 14843  004DB8  0A00               	xorlw	0	; case 0
 14844  004DBA  B4D8               	btfsc	status,2,c
 14845  004DBC  D7E7               	goto	l355
 14846  004DBE  0A01               	xorlw	1	; case 1
 14847  004DC0  B4D8               	btfsc	status,2,c
 14848  004DC2  D7EC               	goto	l357
 14849  004DC4  0A03               	xorlw	3	; case 2
 14850  004DC6  B4D8               	btfsc	status,2,c
 14851  004DC8  D7F3               	goto	l358
 14852                           
 14853                           ; BSR set to: 0
 14854                           ;diskio.c: 50: return 0x01;
 14855                           
 14856                           ; BSR set to: 0
 14857  004DCA  0E01               	movlw	1
 14858  004DCC  0012               	return	
 14859  004DCE                     __end_of_disk_status:
 14860                           	opt stack 0
 14861                           tosu	equ	0xFFF
 14862                           tosh	equ	0xFFE
 14863                           tosl	equ	0xFFD
 14864                           pclath	equ	0xFFA
 14865                           tblptru	equ	0xFF8
 14866                           tblptrh	equ	0xFF7
 14867                           tblptrl	equ	0xFF6
 14868                           tablat	equ	0xFF5
 14869                           prodh	equ	0xFF4
 14870                           prodl	equ	0xFF3
 14871                           intcon	equ	0xFF2
 14872                           intcon2	equ	0xFF1
 14873                           intcon3	equ	0xFF0
 14874                           indf0	equ	0xFEF
 14875                           postinc0	equ	0xFEE
 14876                           fsr0h	equ	0xFEA
 14877                           fsr0l	equ	0xFE9
 14878                           wreg	equ	0xFE8
 14879                           indf1	equ	0xFE7
 14880                           postinc1	equ	0xFE6
 14881                           postdec1	equ	0xFE5
 14882                           fsr1h	equ	0xFE2
 14883                           fsr1l	equ	0xFE1
 14884                           indf2	equ	0xFDF
 14885                           postinc2	equ	0xFDE
 14886                           postdec2	equ	0xFDD
 14887                           plusw2	equ	0xFDB
 14888                           fsr2h	equ	0xFDA
 14889                           fsr2l	equ	0xFD9
 14890                           status	equ	0xFD8
 14891                           
 14892 ;; *************** function _sdc_disk_status *****************
 14893 ;; Defined at:
 14894 ;;		line 588 in file "bibliotecas/diskio.c"
 14895 ;; Parameters:    Size  Location     Type
 14896 ;;  pdrv            1    wreg     unsigned char 
 14897 ;; Auto vars:     Size  Location     Type
 14898 ;;  pdrv            1    1[BANK0 ] unsigned char 
 14899 ;;  stat            1    0[BANK0 ] unsigned char 
 14900 ;;  cont            1    0        unsigned char 
 14901 ;;  buff            1    0        unsigned char 
 14902 ;; Return value:  Size  Location     Type
 14903 ;;                  1    wreg      unsigned char 
 14904 ;; Registers used:
 14905 ;;		wreg, status,2
 14906 ;; Tracked objects:
 14907 ;;		On entry : 0/0
 14908 ;;		On exit  : 0/0
 14909 ;;		Unchanged: 0/0
 14910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14911 ;;      Params:         0       0       0       0       0       0       0       0       0
 14912 ;;      Locals:         0       2       0       0       0       0       0       0       0
 14913 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14914 ;;      Totals:         0       2       0       0       0       0       0       0       0
 14915 ;;Total ram usage:        2 bytes
 14916 ;; Hardware stack levels used:    1
 14917 ;; Hardware stack levels required when called:    3
 14918 ;; This function calls:
 14919 ;;		Nothing
 14920 ;; This function is called by:
 14921 ;;		_disk_status
 14922 ;; This function uses a non-reentrant model
 14923 ;;
 14924                           
 14925                           	psect	text52
 14926  0051EA                     __ptext52:
 14927                           	opt stack 0
 14928  0051EA                     _sdc_disk_status:
 14929                           	opt stack 19
 14930                           
 14931                           ; BSR set to: 0
 14932                           ;incstack = 0
 14933                           ;sdc_disk_status@pdrv stored from wreg
 14934  0051EA  0100               	movlb	0	; () banked
 14935  0051EC  6F61               	movwf	sdc_disk_status@pdrv& (0+255),b
 14936                           
 14937                           ;diskio.c: 590: DSTATUS stat = 0;
 14938  0051EE  0E00               	movlw	0
 14939  0051F0  0100               	movlb	0	; () banked
 14940  0051F2  6F60               	movwf	sdc_disk_status@stat& (0+255),b
 14941                           
 14942                           ; BSR set to: 0
 14943                           ;diskio.c: 591: unsigned char buff, cont;
 14944                           ;diskio.c: 593: if (pdrv != 0) return 0x01;
 14945  0051F4  5161               	movf	sdc_disk_status@pdrv& (0+255),w,b
 14946  0051F6  B4D8               	btfsc	status,2,c
 14947  0051F8  D002               	goto	l480
 14948                           
 14949                           ; BSR set to: 0
 14950  0051FA  0E01               	movlw	1
 14951                           
 14952                           ; BSR set to: 0
 14953  0051FC  0012               	return	
 14954  0051FE                     l480:
 14955                           
 14956                           ; BSR set to: 0
 14957                           ;diskio.c: 595: return FR_OK;
 14958                           
 14959                           ; BSR set to: 0
 14960  0051FE  0E00               	movlw	0
 14961  005200  0012               	return	
 14962  005202                     __end_of_sdc_disk_status:
 14963                           	opt stack 0
 14964                           tosu	equ	0xFFF
 14965                           tosh	equ	0xFFE
 14966                           tosl	equ	0xFFD
 14967                           pclath	equ	0xFFA
 14968                           tblptru	equ	0xFF8
 14969                           tblptrh	equ	0xFF7
 14970                           tblptrl	equ	0xFF6
 14971                           tablat	equ	0xFF5
 14972                           prodh	equ	0xFF4
 14973                           prodl	equ	0xFF3
 14974                           intcon	equ	0xFF2
 14975                           intcon2	equ	0xFF1
 14976                           intcon3	equ	0xFF0
 14977                           indf0	equ	0xFEF
 14978                           postinc0	equ	0xFEE
 14979                           fsr0h	equ	0xFEA
 14980                           fsr0l	equ	0xFE9
 14981                           wreg	equ	0xFE8
 14982                           indf1	equ	0xFE7
 14983                           postinc1	equ	0xFE6
 14984                           postdec1	equ	0xFE5
 14985                           fsr1h	equ	0xFE2
 14986                           fsr1l	equ	0xFE1
 14987                           indf2	equ	0xFDF
 14988                           postinc2	equ	0xFDE
 14989                           postdec2	equ	0xFDD
 14990                           plusw2	equ	0xFDB
 14991                           fsr2h	equ	0xFDA
 14992                           fsr2l	equ	0xFD9
 14993                           status	equ	0xFD8
 14994                           
 14995 ;; *************** function _sync *****************
 14996 ;; Defined at:
 14997 ;;		line 118 in file "bibliotecas/tff.c"
 14998 ;; Parameters:    Size  Location     Type
 14999 ;;		None
 15000 ;; Auto vars:     Size  Location     Type
 15001 ;;  fs              2   64[BANK0 ] PTR struct _FATFS
 15002 ;;		 -> NULL(0), fs(544), 
 15003 ;; Return value:  Size  Location     Type
 15004 ;;                  1    wreg      enum E155
 15005 ;; Registers used:
 15006 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15007 ;; Tracked objects:
 15008 ;;		On entry : 0/0
 15009 ;;		On exit  : 0/0
 15010 ;;		Unchanged: 0/0
 15011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15012 ;;      Params:         0       0       0       0       0       0       0       0       0
 15013 ;;      Locals:         0       2       0       0       0       0       0       0       0
 15014 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15015 ;;      Totals:         0       2       0       0       0       0       0       0       0
 15016 ;;Total ram usage:        2 bytes
 15017 ;; Hardware stack levels used:    1
 15018 ;; Hardware stack levels required when called:    9
 15019 ;; This function calls:
 15020 ;;		_disk_ioctl
 15021 ;;		_move_window
 15022 ;; This function is called by:
 15023 ;;		_f_sync
 15024 ;; This function uses a non-reentrant model
 15025 ;;
 15026                           
 15027                           	psect	text53
 15028  004AA8                     __ptext53:
 15029                           	opt stack 0
 15030  004AA8                     _sync:
 15031                           	opt stack 17
 15032                           
 15033                           ;tff.c: 120: FATFS *fs = FatFs;
 15034                           
 15035                           ; BSR set to: 0
 15036                           ;incstack = 0
 15037  004AA8  C0F6  F0A0         	movff	_FatFs,sync@fs
 15038  004AAC  C0F7  F0A1         	movff	_FatFs+1,sync@fs+1
 15039                           
 15040                           ;tff.c: 123: fs->winflag = 1;
 15041  004AB0  0100               	movlb	0	; () banked
 15042  004AB2  EE20 F01F          	lfsr	2,31
 15043  004AB6  51A0               	movf	sync@fs& (0+255),w,b
 15044  004AB8  26D9               	addwf	fsr2l,f,c
 15045  004ABA  51A1               	movf	(sync@fs+1)& (0+255),w,b
 15046  004ABC  22DA               	addwfc	fsr2h,f,c
 15047  004ABE  0E01               	movlw	1
 15048  004AC0  6EDF               	movwf	indf2,c
 15049                           
 15050                           ; BSR set to: 0
 15051                           ;tff.c: 124: if (!move_window(0)) return FR_RW_ERROR;
 15052  004AC2  0E00               	movlw	0
 15053  004AC4  6F8B               	movwf	move_window@sector& (0+255),b
 15054  004AC6  0E00               	movlw	0
 15055  004AC8  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 15056  004ACA  0E00               	movlw	0
 15057  004ACC  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 15058  004ACE  0E00               	movlw	0
 15059  004AD0  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 15060  004AD2  EC40  F019         	call	_move_window	;wreg free
 15061  004AD6  0900               	iorlw	0
 15062  004AD8  A4D8               	btfss	status,2,c
 15063  004ADA  D002               	goto	l851
 15064  004ADC  0E08               	movlw	8
 15065  004ADE  0012               	return	
 15066  004AE0                     l851:
 15067                           
 15068                           ;tff.c: 140: if (disk_ioctl(0, 0, (0)) != RES_OK)
 15069  004AE0  0E00               	movlw	0
 15070  004AE2  0100               	movlb	0	; () banked
 15071  004AE4  6F60               	movwf	disk_ioctl@cmd& (0+255),b
 15072  004AE6  0E00               	movlw	0
 15073  004AE8  6F61               	movwf	disk_ioctl@buff& (0+255),b
 15074  004AEA  0E00               	movlw	0
 15075  004AEC  6F62               	movwf	(disk_ioctl@buff+1)& (0+255),b
 15076  004AEE  0E00               	movlw	0
 15077  004AF0  EC69  F028         	call	_disk_ioctl
 15078  004AF4  0900               	iorlw	0
 15079  004AF6  B4D8               	btfsc	status,2,c
 15080  004AF8  D002               	goto	l853
 15081                           
 15082                           ;tff.c: 141: return FR_RW_ERROR;
 15083  004AFA  0E08               	movlw	8
 15084  004AFC  0012               	return	
 15085  004AFE                     l853:
 15086                           
 15087                           ;tff.c: 142: return FR_OK;
 15088  004AFE  0E00               	movlw	0
 15089  004B00  0012               	return	
 15090  004B02                     __end_of_sync:
 15091                           	opt stack 0
 15092                           tosu	equ	0xFFF
 15093                           tosh	equ	0xFFE
 15094                           tosl	equ	0xFFD
 15095                           pclath	equ	0xFFA
 15096                           tblptru	equ	0xFF8
 15097                           tblptrh	equ	0xFF7
 15098                           tblptrl	equ	0xFF6
 15099                           tablat	equ	0xFF5
 15100                           prodh	equ	0xFF4
 15101                           prodl	equ	0xFF3
 15102                           intcon	equ	0xFF2
 15103                           intcon2	equ	0xFF1
 15104                           intcon3	equ	0xFF0
 15105                           indf0	equ	0xFEF
 15106                           postinc0	equ	0xFEE
 15107                           fsr0h	equ	0xFEA
 15108                           fsr0l	equ	0xFE9
 15109                           wreg	equ	0xFE8
 15110                           indf1	equ	0xFE7
 15111                           postinc1	equ	0xFE6
 15112                           postdec1	equ	0xFE5
 15113                           fsr1h	equ	0xFE2
 15114                           fsr1l	equ	0xFE1
 15115                           indf2	equ	0xFDF
 15116                           postinc2	equ	0xFDE
 15117                           postdec2	equ	0xFDD
 15118                           plusw2	equ	0xFDB
 15119                           fsr2h	equ	0xFDA
 15120                           fsr2l	equ	0xFD9
 15121                           status	equ	0xFD8
 15122                           
 15123 ;; *************** function _move_window *****************
 15124 ;; Defined at:
 15125 ;;		line 76 in file "bibliotecas/tff.c"
 15126 ;; Parameters:    Size  Location     Type
 15127 ;;  sector          4   43[BANK0 ] unsigned long 
 15128 ;; Auto vars:     Size  Location     Type
 15129 ;;  n               1   57[BANK0 ] unsigned char 
 15130 ;;  wsect           4   58[BANK0 ] unsigned long 
 15131 ;;  fs              2   62[BANK0 ] PTR struct _FATFS
 15132 ;;		 -> NULL(0), fs(544), 
 15133 ;; Return value:  Size  Location     Type
 15134 ;;                  1    wreg      enum E105
 15135 ;; Registers used:
 15136 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15137 ;; Tracked objects:
 15138 ;;		On entry : 0/0
 15139 ;;		On exit  : 0/0
 15140 ;;		Unchanged: 0/0
 15141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15142 ;;      Params:         0       4       0       0       0       0       0       0       0
 15143 ;;      Locals:         0       7       0       0       0       0       0       0       0
 15144 ;;      Temps:          0      10       0       0       0       0       0       0       0
 15145 ;;      Totals:         0      21       0       0       0       0       0       0       0
 15146 ;;Total ram usage:       21 bytes
 15147 ;; Hardware stack levels used:    1
 15148 ;; Hardware stack levels required when called:    8
 15149 ;; This function calls:
 15150 ;;		_disk_read
 15151 ;;		_disk_write
 15152 ;; This function is called by:
 15153 ;;		_sync
 15154 ;;		_get_cluster
 15155 ;;		_put_cluster
 15156 ;;		_trace_path
 15157 ;;		_reserve_direntry
 15158 ;;		_f_open
 15159 ;;		_f_write
 15160 ;;		_f_sync
 15161 ;;		_f_read
 15162 ;;		_f_readdir
 15163 ;; This function uses a non-reentrant model
 15164 ;;
 15165                           
 15166                           	psect	text54
 15167  003280                     __ptext54:
 15168                           	opt stack 0
 15169  003280                     _move_window:
 15170                           	opt stack 16
 15171                           
 15172                           ;tff.c: 80: DWORD wsect;
 15173                           ;tff.c: 81: FATFS *fs = FatFs;
 15174                           
 15175                           ;incstack = 0
 15176  003280  C0F6  F09E         	movff	_FatFs,move_window@fs
 15177  003284  C0F7  F09F         	movff	_FatFs+1,move_window@fs+1
 15178                           
 15179                           ;tff.c: 84: wsect = fs->winsect;
 15180  003288  0100               	movlb	0	; () banked
 15181  00328A  EE20 F004          	lfsr	2,4
 15182  00328E  519E               	movf	move_window@fs& (0+255),w,b
 15183  003290  26D9               	addwf	fsr2l,f,c
 15184  003292  519F               	movf	(move_window@fs+1)& (0+255),w,b
 15185  003294  22DA               	addwfc	fsr2h,f,c
 15186  003296  CFDE F09A          	movff	postinc2,move_window@wsect
 15187  00329A  CFDE F09B          	movff	postinc2,move_window@wsect+1
 15188  00329E  CFDE F09C          	movff	postinc2,move_window@wsect+2
 15189  0032A2  CFDE F09D          	movff	postinc2,move_window@wsect+3
 15190                           
 15191                           ; BSR set to: 0
 15192                           ;tff.c: 85: if (wsect != sector) {
 15193  0032A6  518B               	movf	move_window@sector& (0+255),w,b
 15194  0032A8  199A               	xorwf	move_window@wsect& (0+255),w,b
 15195  0032AA  E10A               	bnz	u10290
 15196  0032AC  518C               	movf	(move_window@sector+1)& (0+255),w,b
 15197  0032AE  199B               	xorwf	(move_window@wsect+1)& (0+255),w,b
 15198  0032B0  E107               	bnz	u10290
 15199  0032B2  518D               	movf	(move_window@sector+2)& (0+255),w,b
 15200  0032B4  199C               	xorwf	(move_window@wsect+2)& (0+255),w,b
 15201  0032B6  E104               	bnz	u10290
 15202  0032B8  518E               	movf	(move_window@sector+3)& (0+255),w,b
 15203  0032BA  199D               	xorwf	(move_window@wsect+3)& (0+255),w,b
 15204  0032BC  B4D8               	btfsc	status,2,c
 15205  0032BE  D0B9               	goto	l847
 15206  0032C0                     u10290:
 15207                           
 15208                           ; BSR set to: 0
 15209                           ;tff.c: 87: BYTE n;
 15210                           ;tff.c: 88: if (fs->winflag) {
 15211  0032C0  EE20 F01F          	lfsr	2,31
 15212  0032C4  519E               	movf	move_window@fs& (0+255),w,b
 15213  0032C6  26D9               	addwf	fsr2l,f,c
 15214  0032C8  519F               	movf	(move_window@fs+1)& (0+255),w,b
 15215  0032CA  22DA               	addwfc	fsr2h,f,c
 15216  0032CC  50DF               	movf	indf2,w,c
 15217  0032CE  B4D8               	btfsc	status,2,c
 15218  0032D0  D083               	goto	u10340
 15219                           
 15220                           ; BSR set to: 0
 15221                           ;tff.c: 89: if (disk_write(0, fs->win, wsect, 1) != RES_OK)
 15222  0032D2  0E20               	movlw	32
 15223  0032D4  259E               	addwf	move_window@fs& (0+255),w,b
 15224  0032D6  6F7F               	movwf	disk_write@buff& (0+255),b
 15225  0032D8  0E00               	movlw	0
 15226  0032DA  219F               	addwfc	(move_window@fs+1)& (0+255),w,b
 15227  0032DC  6F80               	movwf	(disk_write@buff+1)& (0+255),b
 15228  0032DE  C09A  F081         	movff	move_window@wsect,disk_write@sector
 15229  0032E2  C09B  F082         	movff	move_window@wsect+1,disk_write@sector+1
 15230  0032E6  C09C  F083         	movff	move_window@wsect+2,disk_write@sector+2
 15231  0032EA  C09D  F084         	movff	move_window@wsect+3,disk_write@sector+3
 15232  0032EE  0E01               	movlw	1
 15233  0032F0  6F85               	movwf	disk_write@count& (0+255),b
 15234  0032F2  0E00               	movlw	0
 15235  0032F4  EC0C  F023         	call	_disk_write
 15236  0032F8  0900               	iorlw	0
 15237  0032FA  B4D8               	btfsc	status,2,c
 15238  0032FC  D002               	goto	l842
 15239                           
 15240                           ;tff.c: 90: return FALSE;
 15241  0032FE  0E00               	movlw	0
 15242  003300  0012               	return	
 15243  003302                     l842:
 15244                           
 15245                           ;tff.c: 91: fs->winflag = 0;
 15246  003302  0100               	movlb	0	; () banked
 15247  003304  EE20 F01F          	lfsr	2,31
 15248  003308  519E               	movf	move_window@fs& (0+255),w,b
 15249  00330A  26D9               	addwf	fsr2l,f,c
 15250  00330C  519F               	movf	(move_window@fs+1)& (0+255),w,b
 15251  00330E  22DA               	addwfc	fsr2h,f,c
 15252  003310  0E00               	movlw	0
 15253  003312  6EDF               	movwf	indf2,c
 15254                           
 15255                           ;tff.c: 92: if (wsect < (fs->fatbase + fs->sects_fat)) {
 15256  003314  EE20 F008          	lfsr	2,8
 15257  003318  519E               	movf	move_window@fs& (0+255),w,b
 15258  00331A  26D9               	addwf	fsr2l,f,c
 15259  00331C  519F               	movf	(move_window@fs+1)& (0+255),w,b
 15260  00331E  22DA               	addwfc	fsr2h,f,c
 15261  003320  CFDE F08F          	movff	postinc2,??_move_window
 15262  003324  CFDE F090          	movff	postinc2,??_move_window+1
 15263  003328  CFDE F091          	movff	postinc2,??_move_window+2
 15264  00332C  CFDE F092          	movff	postinc2,??_move_window+3
 15265  003330  EE20 F014          	lfsr	2,20
 15266  003334  519E               	movf	move_window@fs& (0+255),w,b
 15267  003336  26D9               	addwf	fsr2l,f,c
 15268  003338  519F               	movf	(move_window@fs+1)& (0+255),w,b
 15269  00333A  22DA               	addwfc	fsr2h,f,c
 15270  00333C  CFDE F093          	movff	postinc2,??_move_window+4
 15271  003340  CFDD F094          	movff	postdec2,??_move_window+5
 15272  003344  5193               	movf	(??_move_window+4)& (0+255),w,b
 15273  003346  258F               	addwf	??_move_window& (0+255),w,b
 15274  003348  6F95               	movwf	(??_move_window+6)& (0+255),b
 15275  00334A  5194               	movf	(??_move_window+5)& (0+255),w,b
 15276  00334C  2190               	addwfc	(??_move_window+1)& (0+255),w,b
 15277  00334E  6F96               	movwf	(??_move_window+7)& (0+255),b
 15278  003350  0E00               	movlw	0
 15279  003352  2191               	addwfc	(??_move_window+2)& (0+255),w,b
 15280  003354  6F97               	movwf	(??_move_window+8)& (0+255),b
 15281  003356  0E00               	movlw	0
 15282  003358  2192               	addwfc	(??_move_window+3)& (0+255),w,b
 15283  00335A  6F98               	movwf	(??_move_window+9)& (0+255),b
 15284  00335C  5195               	movf	(??_move_window+6)& (0+255),w,b
 15285  00335E  5D9A               	subwf	move_window@wsect& (0+255),w,b
 15286  003360  5196               	movf	(??_move_window+7)& (0+255),w,b
 15287  003362  599B               	subwfb	(move_window@wsect+1)& (0+255),w,b
 15288  003364  5197               	movf	(??_move_window+8)& (0+255),w,b
 15289  003366  599C               	subwfb	(move_window@wsect+2)& (0+255),w,b
 15290  003368  5198               	movf	(??_move_window+9)& (0+255),w,b
 15291  00336A  599D               	subwfb	(move_window@wsect+3)& (0+255),w,b
 15292  00336C  B0D8               	btfsc	status,0,c
 15293  00336E  D034               	goto	u10340
 15294                           
 15295                           ; BSR set to: 0
 15296                           ;tff.c: 93: for (n = fs->n_fats; n >= 2; n--) {
 15297  003370  EE20 F01E          	lfsr	2,30
 15298  003374  519E               	movf	move_window@fs& (0+255),w,b
 15299  003376  26D9               	addwf	fsr2l,f,c
 15300  003378  519F               	movf	(move_window@fs+1)& (0+255),w,b
 15301  00337A  22DA               	addwfc	fsr2h,f,c
 15302  00337C  50DF               	movf	indf2,w,c
 15303  00337E  6F99               	movwf	move_window@n& (0+255),b
 15304  003380                     l8669:
 15305                           
 15306                           ; BSR set to: 0
 15307  003380  0E02               	movlw	2
 15308  003382  6199               	cpfslt	move_window@n& (0+255),b
 15309  003384  D001               	goto	l845
 15310  003386  D028               	goto	u10340
 15311  003388                     l845:
 15312                           
 15313                           ; BSR set to: 0
 15314                           ;tff.c: 94: wsect += fs->sects_fat;
 15315                           
 15316                           ; BSR set to: 0
 15317  003388  EE20 F014          	lfsr	2,20
 15318  00338C  519E               	movf	move_window@fs& (0+255),w,b
 15319  00338E  26D9               	addwf	fsr2l,f,c
 15320  003390  519F               	movf	(move_window@fs+1)& (0+255),w,b
 15321  003392  22DA               	addwfc	fsr2h,f,c
 15322  003394  CFDE F08F          	movff	postinc2,??_move_window
 15323  003398  CFDD F090          	movff	postdec2,??_move_window+1
 15324  00339C  518F               	movf	??_move_window& (0+255),w,b
 15325  00339E  279A               	addwf	move_window@wsect& (0+255),f,b
 15326  0033A0  5190               	movf	(??_move_window+1)& (0+255),w,b
 15327  0033A2  239B               	addwfc	(move_window@wsect+1)& (0+255),f,b
 15328  0033A4  0E00               	movlw	0
 15329  0033A6  239C               	addwfc	(move_window@wsect+2)& (0+255),f,b
 15330  0033A8  0E00               	movlw	0
 15331  0033AA  239D               	addwfc	(move_window@wsect+3)& (0+255),f,b
 15332                           
 15333                           ; BSR set to: 0
 15334                           ;tff.c: 95: disk_write(0, fs->win, wsect, 1);
 15335  0033AC  0E20               	movlw	32
 15336  0033AE  259E               	addwf	move_window@fs& (0+255),w,b
 15337  0033B0  6F7F               	movwf	disk_write@buff& (0+255),b
 15338  0033B2  0E00               	movlw	0
 15339  0033B4  219F               	addwfc	(move_window@fs+1)& (0+255),w,b
 15340  0033B6  6F80               	movwf	(disk_write@buff+1)& (0+255),b
 15341  0033B8  C09A  F081         	movff	move_window@wsect,disk_write@sector
 15342  0033BC  C09B  F082         	movff	move_window@wsect+1,disk_write@sector+1
 15343  0033C0  C09C  F083         	movff	move_window@wsect+2,disk_write@sector+2
 15344  0033C4  C09D  F084         	movff	move_window@wsect+3,disk_write@sector+3
 15345  0033C8  0E01               	movlw	1
 15346  0033CA  6F85               	movwf	disk_write@count& (0+255),b
 15347  0033CC  0E00               	movlw	0
 15348  0033CE  EC0C  F023         	call	_disk_write
 15349  0033D2  0100               	movlb	0	; () banked
 15350  0033D4  0799               	decf	move_window@n& (0+255),f,b
 15351  0033D6  D7D4               	goto	l8669
 15352  0033D8                     u10340:
 15353                           
 15354                           ; BSR set to: 0
 15355                           ;tff.c: 96: }
 15356                           ;tff.c: 97: }
 15357                           ;tff.c: 98: }
 15358                           ;tff.c: 100: if (sector) {
 15359                           
 15360                           ; BSR set to: 0
 15361                           
 15362                           ; BSR set to: 0
 15363                           
 15364                           ; BSR set to: 0
 15365  0033D8  518B               	movf	move_window@sector& (0+255),w,b
 15366  0033DA  118C               	iorwf	(move_window@sector+1)& (0+255),w,b
 15367  0033DC  118D               	iorwf	(move_window@sector+2)& (0+255),w,b
 15368  0033DE  118E               	iorwf	(move_window@sector+3)& (0+255),w,b
 15369  0033E0  B4D8               	btfsc	status,2,c
 15370  0033E2  D027               	goto	l847
 15371                           
 15372                           ; BSR set to: 0
 15373                           ;tff.c: 101: if (disk_read(0, fs->win, sector, 1) != RES_OK)
 15374  0033E4  0E20               	movlw	32
 15375  0033E6  259E               	addwf	move_window@fs& (0+255),w,b
 15376  0033E8  6F7F               	movwf	disk_read@buff& (0+255),b
 15377  0033EA  0E00               	movlw	0
 15378  0033EC  219F               	addwfc	(move_window@fs+1)& (0+255),w,b
 15379  0033EE  6F80               	movwf	(disk_read@buff+1)& (0+255),b
 15380  0033F0  C08B  F081         	movff	move_window@sector,disk_read@sector
 15381  0033F4  C08C  F082         	movff	move_window@sector+1,disk_read@sector+1
 15382  0033F8  C08D  F083         	movff	move_window@sector+2,disk_read@sector+2
 15383  0033FC  C08E  F084         	movff	move_window@sector+3,disk_read@sector+3
 15384  003400  0E01               	movlw	1
 15385  003402  6F85               	movwf	disk_read@count& (0+255),b
 15386  003404  0E00               	movlw	0
 15387  003406  EC7E  F022         	call	_disk_read
 15388  00340A  0900               	iorlw	0
 15389  00340C  B4D8               	btfsc	status,2,c
 15390  00340E  D002               	goto	l848
 15391                           
 15392                           ;tff.c: 102: return FALSE;
 15393  003410  0E00               	movlw	0
 15394  003412  0012               	return	
 15395  003414                     l848:
 15396                           
 15397                           ;tff.c: 103: fs->winsect = sector;
 15398  003414  0100               	movlb	0	; () banked
 15399  003416  EE20 F004          	lfsr	2,4
 15400  00341A  519E               	movf	move_window@fs& (0+255),w,b
 15401  00341C  26D9               	addwf	fsr2l,f,c
 15402  00341E  519F               	movf	(move_window@fs+1)& (0+255),w,b
 15403  003420  22DA               	addwfc	fsr2h,f,c
 15404  003422  C08B  FFDE         	movff	move_window@sector,postinc2
 15405  003426  C08C  FFDE         	movff	move_window@sector+1,postinc2
 15406  00342A  C08D  FFDE         	movff	move_window@sector+2,postinc2
 15407  00342E  C08E  FFDE         	movff	move_window@sector+3,postinc2
 15408  003432                     l847:
 15409                           
 15410                           ; BSR set to: 0
 15411                           ;tff.c: 104: }
 15412                           ;tff.c: 105: }
 15413                           ;tff.c: 106: return TRUE;
 15414                           
 15415                           ; BSR set to: 0
 15416                           
 15417                           ; BSR set to: 0
 15418  003432  0E01               	movlw	1
 15419  003434  0012               	return	
 15420  003436                     __end_of_move_window:
 15421                           	opt stack 0
 15422                           tosu	equ	0xFFF
 15423                           tosh	equ	0xFFE
 15424                           tosl	equ	0xFFD
 15425                           pclath	equ	0xFFA
 15426                           tblptru	equ	0xFF8
 15427                           tblptrh	equ	0xFF7
 15428                           tblptrl	equ	0xFF6
 15429                           tablat	equ	0xFF5
 15430                           prodh	equ	0xFF4
 15431                           prodl	equ	0xFF3
 15432                           intcon	equ	0xFF2
 15433                           intcon2	equ	0xFF1
 15434                           intcon3	equ	0xFF0
 15435                           indf0	equ	0xFEF
 15436                           postinc0	equ	0xFEE
 15437                           fsr0h	equ	0xFEA
 15438                           fsr0l	equ	0xFE9
 15439                           wreg	equ	0xFE8
 15440                           indf1	equ	0xFE7
 15441                           postinc1	equ	0xFE6
 15442                           postdec1	equ	0xFE5
 15443                           fsr1h	equ	0xFE2
 15444                           fsr1l	equ	0xFE1
 15445                           indf2	equ	0xFDF
 15446                           postinc2	equ	0xFDE
 15447                           postdec2	equ	0xFDD
 15448                           plusw2	equ	0xFDB
 15449                           fsr2h	equ	0xFDA
 15450                           fsr2l	equ	0xFD9
 15451                           status	equ	0xFD8
 15452                           
 15453 ;; *************** function _disk_write *****************
 15454 ;; Defined at:
 15455 ;;		line 150 in file "bibliotecas/diskio.c"
 15456 ;; Parameters:    Size  Location     Type
 15457 ;;  pdrv            1    wreg     unsigned char 
 15458 ;;  buff            2   31[BANK0 ] PTR const unsigned char 
 15459 ;;		 -> fs.win(512), fputc@c(1), NULL(0), fs(544), 
 15460 ;;  sector          4   33[BANK0 ] unsigned long 
 15461 ;;  count           1   37[BANK0 ] unsigned char 
 15462 ;; Auto vars:     Size  Location     Type
 15463 ;;  pdrv            1   39[BANK0 ] unsigned char 
 15464 ;;  result          2   40[BANK0 ] int 
 15465 ;;  res             1   42[BANK0 ] enum E25
 15466 ;; Return value:  Size  Location     Type
 15467 ;;                  1    wreg      enum E25
 15468 ;; Registers used:
 15469 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15470 ;; Tracked objects:
 15471 ;;		On entry : 0/0
 15472 ;;		On exit  : 0/0
 15473 ;;		Unchanged: 0/0
 15474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15475 ;;      Params:         0       7       0       0       0       0       0       0       0
 15476 ;;      Locals:         0       4       0       0       0       0       0       0       0
 15477 ;;      Temps:          0       1       0       0       0       0       0       0       0
 15478 ;;      Totals:         0      12       0       0       0       0       0       0       0
 15479 ;;Total ram usage:       12 bytes
 15480 ;; Hardware stack levels used:    1
 15481 ;; Hardware stack levels required when called:    7
 15482 ;; This function calls:
 15483 ;;		_sdc_disk_write
 15484 ;; This function is called by:
 15485 ;;		_move_window
 15486 ;;		_reserve_direntry
 15487 ;;		_f_write
 15488 ;; This function uses a non-reentrant model
 15489 ;;
 15490                           
 15491                           	psect	text55
 15492  004618                     __ptext55:
 15493                           	opt stack 0
 15494  004618                     _disk_write:
 15495                           	opt stack 16
 15496                           
 15497                           ;incstack = 0
 15498                           ;disk_write@pdrv stored from wreg
 15499  004618  0100               	movlb	0	; () banked
 15500  00461A  6F87               	movwf	disk_write@pdrv& (0+255),b
 15501                           
 15502                           ;diskio.c: 157: DRESULT res;
 15503                           ;diskio.c: 158: int result;
 15504                           ;diskio.c: 160: switch (pdrv) {
 15505  00461C  D034               	goto	l378
 15506  00461E                     
 15507                           ;diskio.c: 163: result = sdc_disk_write(buff, sector, count);
 15508  00461E  C07F  F06C         	movff	disk_write@buff,sdc_disk_write@p_buff
 15509  004622  C080  F06D         	movff	disk_write@buff+1,sdc_disk_write@p_buff+1
 15510  004626  C081  F06E         	movff	disk_write@sector,sdc_disk_write@sector
 15511  00462A  C082  F06F         	movff	disk_write@sector+1,sdc_disk_write@sector+1
 15512  00462E  C083  F070         	movff	disk_write@sector+2,sdc_disk_write@sector+2
 15513  004632  C084  F071         	movff	disk_write@sector+3,sdc_disk_write@sector+3
 15514  004636  C085  F072         	movff	disk_write@count,sdc_disk_write@count
 15515  00463A  EC7B  F017         	call	_sdc_disk_write	;wreg free
 15516  00463E  0100               	movlb	0	; () banked
 15517  004640  6F86               	movwf	??_disk_write& (0+255),b
 15518  004642  5186               	movf	??_disk_write& (0+255),w,b
 15519  004644  6F88               	movwf	disk_write@result& (0+255),b
 15520  004646  6B89               	clrf	(disk_write@result+1)& (0+255),b
 15521                           
 15522                           ; BSR set to: 0
 15523                           ;diskio.c: 165: res = result;
 15524  004648  C088  F08A         	movff	disk_write@result,disk_write@res
 15525                           
 15526                           ; BSR set to: 0
 15527                           ;diskio.c: 168: return res;
 15528  00464C  518A               	movf	disk_write@res& (0+255),w,b
 15529                           
 15530                           ; BSR set to: 0
 15531  00464E  0012               	return	
 15532  004650                     
 15533                           ; BSR set to: 0
 15534                           ;diskio.c: 173: result = sdc_disk_write(buff, sector, count);
 15535                           
 15536                           ; BSR set to: 0
 15537  004650  C07F  F06C         	movff	disk_write@buff,sdc_disk_write@p_buff
 15538  004654  C080  F06D         	movff	disk_write@buff+1,sdc_disk_write@p_buff+1
 15539  004658  C081  F06E         	movff	disk_write@sector,sdc_disk_write@sector
 15540  00465C  C082  F06F         	movff	disk_write@sector+1,sdc_disk_write@sector+1
 15541  004660  C083  F070         	movff	disk_write@sector+2,sdc_disk_write@sector+2
 15542  004664  C084  F071         	movff	disk_write@sector+3,sdc_disk_write@sector+3
 15543  004668  C085  F072         	movff	disk_write@count,sdc_disk_write@count
 15544  00466C  EC7B  F017         	call	_sdc_disk_write	;wreg free
 15545  004670  0100               	movlb	0	; () banked
 15546  004672  6F86               	movwf	??_disk_write& (0+255),b
 15547  004674  5186               	movf	??_disk_write& (0+255),w,b
 15548  004676  6F88               	movwf	disk_write@result& (0+255),b
 15549  004678  6B89               	clrf	(disk_write@result+1)& (0+255),b
 15550                           
 15551                           ; BSR set to: 0
 15552                           ;diskio.c: 174: res = result;
 15553  00467A  C088  F08A         	movff	disk_write@result,disk_write@res
 15554                           
 15555                           ; BSR set to: 0
 15556                           ;diskio.c: 177: return res;
 15557  00467E  518A               	movf	disk_write@res& (0+255),w,b
 15558                           
 15559                           ; BSR set to: 0
 15560  004680  0012               	return	
 15561  004682                     
 15562                           ; BSR set to: 0
 15563                           ;diskio.c: 186: return res;
 15564                           
 15565                           ; BSR set to: 0
 15566  004682  518A               	movf	disk_write@res& (0+255),w,b
 15567                           
 15568                           ; BSR set to: 0
 15569  004684  0012               	return	
 15570  004686                     l378:
 15571                           
 15572                           ; BSR set to: 0
 15573  004686  0100               	movlb	0	; () banked
 15574  004688  5187               	movf	disk_write@pdrv& (0+255),w,b
 15575                           
 15576                           ; Switch size 1, requested type "space"
 15577                           ; Number of cases is 3, Range of values is 0 to 2
 15578                           ; switch strategies available:
 15579                           ; Name         Instructions Cycles
 15580                           ; simple_byte           10     6 (average)
 15581                           ;	Chosen strategy is simple_byte
 15582  00468A  0A00               	xorlw	0	; case 0
 15583  00468C  B4D8               	btfsc	status,2,c
 15584  00468E  D7C7               	goto	l379
 15585  004690  0A01               	xorlw	1	; case 1
 15586  004692  B4D8               	btfsc	status,2,c
 15587  004694  D7DD               	goto	l381
 15588  004696  0A03               	xorlw	3	; case 2
 15589  004698  B4D8               	btfsc	status,2,c
 15590  00469A  D7F3               	goto	l382
 15591                           
 15592                           ; BSR set to: 0
 15593                           ;diskio.c: 189: return RES_PARERR;
 15594                           
 15595                           ; BSR set to: 0
 15596  00469C  0E04               	movlw	4
 15597  00469E  0012               	return	
 15598  0046A0                     __end_of_disk_write:
 15599                           	opt stack 0
 15600                           tosu	equ	0xFFF
 15601                           tosh	equ	0xFFE
 15602                           tosl	equ	0xFFD
 15603                           pclath	equ	0xFFA
 15604                           tblptru	equ	0xFF8
 15605                           tblptrh	equ	0xFF7
 15606                           tblptrl	equ	0xFF6
 15607                           tablat	equ	0xFF5
 15608                           prodh	equ	0xFF4
 15609                           prodl	equ	0xFF3
 15610                           intcon	equ	0xFF2
 15611                           intcon2	equ	0xFF1
 15612                           intcon3	equ	0xFF0
 15613                           indf0	equ	0xFEF
 15614                           postinc0	equ	0xFEE
 15615                           fsr0h	equ	0xFEA
 15616                           fsr0l	equ	0xFE9
 15617                           wreg	equ	0xFE8
 15618                           indf1	equ	0xFE7
 15619                           postinc1	equ	0xFE6
 15620                           postdec1	equ	0xFE5
 15621                           fsr1h	equ	0xFE2
 15622                           fsr1l	equ	0xFE1
 15623                           indf2	equ	0xFDF
 15624                           postinc2	equ	0xFDE
 15625                           postdec2	equ	0xFDD
 15626                           plusw2	equ	0xFDB
 15627                           fsr2h	equ	0xFDA
 15628                           fsr2l	equ	0xFD9
 15629                           status	equ	0xFD8
 15630                           
 15631 ;; *************** function _sdc_disk_write *****************
 15632 ;; Defined at:
 15633 ;;		line 509 in file "bibliotecas/diskio.c"
 15634 ;; Parameters:    Size  Location     Type
 15635 ;;  p_buff          2   12[BANK0 ] PTR const unsigned char 
 15636 ;;		 -> fs.win(512), fputc@c(1), NULL(0), fs(544), 
 15637 ;;  sector          4   14[BANK0 ] unsigned long 
 15638 ;;  count           1   18[BANK0 ] unsigned char 
 15639 ;; Auto vars:     Size  Location     Type
 15640 ;;  j               2   28[BANK0 ] int 
 15641 ;;  count1          2   25[BANK0 ] int 
 15642 ;;  i               2   23[BANK0 ] int 
 15643 ;;  buff            1   30[BANK0 ] unsigned char 
 15644 ;;  res             1   27[BANK0 ] enum E25
 15645 ;; Return value:  Size  Location     Type
 15646 ;;                  1    wreg      enum E25
 15647 ;; Registers used:
 15648 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15649 ;; Tracked objects:
 15650 ;;		On entry : 0/0
 15651 ;;		On exit  : 0/0
 15652 ;;		Unchanged: 0/0
 15653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15654 ;;      Params:         0       7       0       0       0       0       0       0       0
 15655 ;;      Locals:         0       8       0       0       0       0       0       0       0
 15656 ;;      Temps:          0       4       0       0       0       0       0       0       0
 15657 ;;      Totals:         0      19       0       0       0       0       0       0       0
 15658 ;;Total ram usage:       19 bytes
 15659 ;; Hardware stack levels used:    1
 15660 ;; Hardware stack levels required when called:    6
 15661 ;; This function calls:
 15662 ;;		_command
 15663 ;;		_dummy_clocks
 15664 ;;		_escreve_SPI
 15665 ;;		_leitura_SPI
 15666 ;;		_proceed
 15667 ;;		_response
 15668 ;; This function is called by:
 15669 ;;		_disk_write
 15670 ;; This function uses a non-reentrant model
 15671 ;;
 15672                           
 15673                           	psect	text56
 15674  002EF6                     __ptext56:
 15675                           	opt stack 0
 15676  002EF6                     _sdc_disk_write:
 15677                           	opt stack 16
 15678                           
 15679                           ;diskio.c: 511: DRESULT res;
 15680                           ;diskio.c: 512: unsigned char buff;
 15681                           ;diskio.c: 513: int i=0,j, count1 = 0;
 15682                           
 15683                           ; BSR set to: 0
 15684                           ;incstack = 0
 15685  002EF6  0E00               	movlw	0
 15686  002EF8  0100               	movlb	0	; () banked
 15687  002EFA  6F78               	movwf	(sdc_disk_write@i+1)& (0+255),b
 15688  002EFC  0E00               	movlw	0
 15689  002EFE  6F77               	movwf	sdc_disk_write@i& (0+255),b
 15690  002F00  0E00               	movlw	0
 15691  002F02  6F7A               	movwf	(sdc_disk_write@count1+1)& (0+255),b
 15692  002F04  0E00               	movlw	0
 15693  002F06  6F79               	movwf	sdc_disk_write@count1& (0+255),b
 15694                           
 15695                           ; BSR set to: 0
 15696                           ;diskio.c: 515: if(count>1)
 15697  002F08  0E01               	movlw	1
 15698  002F0A  6572               	cpfsgt	sdc_disk_write@count& (0+255),b
 15699  002F0C  D06C               	goto	l463
 15700                           
 15701                           ; BSR set to: 0
 15702                           ;diskio.c: 516: {
 15703                           ;diskio.c: 517: LATCbits.LATC7 = 0;
 15704  002F0E  9E8B               	bcf	3979,7,c	;volatile
 15705                           
 15706                           ;diskio.c: 518: LATBbits.LATB4 = 0;
 15707  002F10  988A               	bcf	3978,4,c	;volatile
 15708                           
 15709                           ; BSR set to: 0
 15710                           ;diskio.c: 519: dummy_clocks(10);
 15711  002F12  0E0A               	movlw	10
 15712  002F14  EC0B  F027         	call	_dummy_clocks
 15713                           
 15714                           ;diskio.c: 520: command(0X57, count, 0XFF);
 15715  002F18  0100               	movlb	0	; () banked
 15716  002F1A  5172               	movf	sdc_disk_write@count& (0+255),w,b
 15717  002F1C  6F65               	movwf	command@arg& (0+255),b
 15718  002F1E  6B66               	clrf	(command@arg+1)& (0+255),b
 15719  002F20  6B67               	clrf	(command@arg+2)& (0+255),b
 15720  002F22  6B68               	clrf	(command@arg+3)& (0+255),b
 15721  002F24  0EFF               	movlw	255
 15722  002F26  6F69               	movwf	command@CRC& (0+255),b
 15723  002F28  0E57               	movlw	87
 15724  002F2A  ECBC  F024         	call	_command
 15725                           
 15726                           ;diskio.c: 521: proceed();
 15727  002F2E  EC4F  F029         	call	_proceed	;wreg free
 15728  002F32                     
 15729                           ;diskio.c: 523: buff = response();
 15730  002F32  EC41  F029         	call	_response	;wreg free
 15731  002F36  0100               	movlb	0	; () banked
 15732  002F38  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 15733                           
 15734                           ; BSR set to: 0
 15735                           ;diskio.c: 524: }while(buff!=0X00);
 15736  002F3A  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 15737  002F3C  A4D8               	btfss	status,2,c
 15738  002F3E  D7F9               	goto	l464
 15739                           
 15740                           ; BSR set to: 0
 15741                           ;diskio.c: 526: dummy_clocks(10);
 15742                           
 15743                           ; BSR set to: 0
 15744  002F40  0E0A               	movlw	10
 15745  002F42  EC0B  F027         	call	_dummy_clocks
 15746                           
 15747                           ;diskio.c: 527: command(0X59, sector*512, 0XFF);
 15748  002F46  C06E  F073         	movff	sdc_disk_write@sector,??_sdc_disk_write
 15749  002F4A  C06F  F074         	movff	sdc_disk_write@sector+1,??_sdc_disk_write+1
 15750  002F4E  C070  F075         	movff	sdc_disk_write@sector+2,??_sdc_disk_write+2
 15751  002F52  C071  F076         	movff	sdc_disk_write@sector+3,??_sdc_disk_write+3
 15752  002F56  0E09               	movlw	9
 15753  002F58                     u10005:
 15754  002F58  90D8               	bcf	status,0,c
 15755  002F5A  0100               	movlb	0	; () banked
 15756  002F5C  3773               	rlcf	??_sdc_disk_write& (0+255),f,b
 15757  002F5E  3774               	rlcf	(??_sdc_disk_write+1)& (0+255),f,b
 15758  002F60  3775               	rlcf	(??_sdc_disk_write+2)& (0+255),f,b
 15759  002F62  3776               	rlcf	(??_sdc_disk_write+3)& (0+255),f,b
 15760  002F64  2EE8               	decfsz	wreg,f,c
 15761  002F66  D7F8               	goto	u10005
 15762  002F68  C073  F065         	movff	??_sdc_disk_write,command@arg
 15763  002F6C  C074  F066         	movff	??_sdc_disk_write+1,command@arg+1
 15764  002F70  C075  F067         	movff	??_sdc_disk_write+2,command@arg+2
 15765  002F74  C076  F068         	movff	??_sdc_disk_write+3,command@arg+3
 15766  002F78  0EFF               	movlw	255
 15767  002F7A  6F69               	movwf	command@CRC& (0+255),b
 15768  002F7C  0E59               	movlw	89
 15769  002F7E  ECBC  F024         	call	_command
 15770                           
 15771                           ;diskio.c: 528: proceed();
 15772  002F82  EC4F  F029         	call	_proceed	;wreg free
 15773  002F86                     
 15774                           ;diskio.c: 530: buff = response();
 15775  002F86  EC41  F029         	call	_response	;wreg free
 15776  002F8A  0100               	movlb	0	; () banked
 15777  002F8C  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 15778                           
 15779                           ; BSR set to: 0
 15780                           ;diskio.c: 531: }while(buff!=0X00);
 15781  002F8E  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 15782  002F90  A4D8               	btfss	status,2,c
 15783  002F92  D7F9               	goto	l466
 15784                           
 15785                           ; BSR set to: 0
 15786                           ;diskio.c: 533: dummy_clocks(1);
 15787                           
 15788                           ; BSR set to: 0
 15789  002F94  0E01               	movlw	1
 15790  002F96  EC0B  F027         	call	_dummy_clocks
 15791                           
 15792                           ;diskio.c: 534: escreve_SPI(0XFC);
 15793  002F9A  0EFC               	movlw	252
 15794  002F9C  EC0C  F029         	call	_escreve_SPI
 15795                           
 15796                           ;diskio.c: 535: for(j=0;j<512;j++)
 15797  002FA0  0E00               	movlw	0
 15798  002FA2  0100               	movlb	0	; () banked
 15799  002FA4  6F7D               	movwf	(sdc_disk_write@j+1)& (0+255),b
 15800  002FA6  0E00               	movlw	0
 15801  002FA8  6F7C               	movwf	sdc_disk_write@j& (0+255),b
 15802  002FAA                     l8429:
 15803                           
 15804                           ; BSR set to: 0
 15805  002FAA  BF7D               	btfsc	(sdc_disk_write@j+1)& (0+255),7,b
 15806  002FAC  D004               	goto	l468
 15807  002FAE  0E02               	movlw	2
 15808  002FB0  5D7D               	subwf	(sdc_disk_write@j+1)& (0+255),w,b
 15809  002FB2  B0D8               	btfsc	status,0,c
 15810  002FB4  D00D               	goto	u10030
 15811  002FB6                     l468:
 15812                           
 15813                           ; BSR set to: 0
 15814                           ;diskio.c: 536: {
 15815                           ;diskio.c: 537: escreve_SPI(*p_buff);
 15816                           
 15817                           ; BSR set to: 0
 15818  002FB6  C06C  FFD9         	movff	sdc_disk_write@p_buff,fsr2l
 15819  002FBA  C06D  FFDA         	movff	sdc_disk_write@p_buff+1,fsr2h
 15820  002FBE  50DF               	movf	indf2,w,c
 15821  002FC0  EC0C  F029         	call	_escreve_SPI
 15822                           
 15823                           ;diskio.c: 538: p_buff++;
 15824  002FC4  0100               	movlb	0	; () banked
 15825  002FC6  4B6C               	infsnz	sdc_disk_write@p_buff& (0+255),f,b
 15826  002FC8  2B6D               	incf	(sdc_disk_write@p_buff+1)& (0+255),f,b
 15827                           
 15828                           ; BSR set to: 0
 15829  002FCA  4B7C               	infsnz	sdc_disk_write@j& (0+255),f,b
 15830  002FCC  2B7D               	incf	(sdc_disk_write@j+1)& (0+255),f,b
 15831  002FCE  D7ED               	goto	l8429
 15832  002FD0                     u10030:
 15833                           
 15834                           ; BSR set to: 0
 15835                           ;diskio.c: 539: }
 15836                           ;diskio.c: 540: leitura_SPI();
 15837                           
 15838                           ; BSR set to: 0
 15839  002FD0  EC55  F029         	call	_leitura_SPI	;wreg free
 15840                           
 15841                           ;diskio.c: 541: leitura_SPI();
 15842  002FD4  EC55  F029         	call	_leitura_SPI	;wreg free
 15843                           
 15844                           ;diskio.c: 543: dummy_clocks(1);
 15845  002FD8  0E01               	movlw	1
 15846  002FDA  EC0B  F027         	call	_dummy_clocks
 15847                           
 15848                           ;diskio.c: 544: escreve_SPI(0XFD);
 15849  002FDE  0EFD               	movlw	253
 15850  002FE0  EC0C  F029         	call	_escreve_SPI
 15851                           
 15852                           ;diskio.c: 546: }
 15853  002FE4  D06A               	goto	u10080
 15854  002FE6                     l463:
 15855                           
 15856                           ; BSR set to: 0
 15857                           ;diskio.c: 547: else
 15858                           ;diskio.c: 548: {
 15859                           ;diskio.c: 549: LATCbits.LATC7 = 0;
 15860  002FE6  9E8B               	bcf	3979,7,c	;volatile
 15861                           
 15862                           ;diskio.c: 550: LATBbits.LATB4 = 0;
 15863  002FE8  988A               	bcf	3978,4,c	;volatile
 15864                           
 15865                           ; BSR set to: 0
 15866                           ;diskio.c: 551: dummy_clocks(10);
 15867  002FEA  0E0A               	movlw	10
 15868  002FEC  EC0B  F027         	call	_dummy_clocks
 15869                           
 15870                           ;diskio.c: 552: command(0X58, sector*512, 0X00);
 15871  002FF0  C06E  F073         	movff	sdc_disk_write@sector,??_sdc_disk_write
 15872  002FF4  C06F  F074         	movff	sdc_disk_write@sector+1,??_sdc_disk_write+1
 15873  002FF8  C070  F075         	movff	sdc_disk_write@sector+2,??_sdc_disk_write+2
 15874  002FFC  C071  F076         	movff	sdc_disk_write@sector+3,??_sdc_disk_write+3
 15875  003000  0E09               	movlw	9
 15876  003002                     u10045:
 15877  003002  90D8               	bcf	status,0,c
 15878  003004  0100               	movlb	0	; () banked
 15879  003006  3773               	rlcf	??_sdc_disk_write& (0+255),f,b
 15880  003008  3774               	rlcf	(??_sdc_disk_write+1)& (0+255),f,b
 15881  00300A  3775               	rlcf	(??_sdc_disk_write+2)& (0+255),f,b
 15882  00300C  3776               	rlcf	(??_sdc_disk_write+3)& (0+255),f,b
 15883  00300E  2EE8               	decfsz	wreg,f,c
 15884  003010  D7F8               	goto	u10045
 15885  003012  C073  F065         	movff	??_sdc_disk_write,command@arg
 15886  003016  C074  F066         	movff	??_sdc_disk_write+1,command@arg+1
 15887  00301A  C075  F067         	movff	??_sdc_disk_write+2,command@arg+2
 15888  00301E  C076  F068         	movff	??_sdc_disk_write+3,command@arg+3
 15889  003022  0E00               	movlw	0
 15890  003024  6F69               	movwf	command@CRC& (0+255),b
 15891  003026  0E58               	movlw	88
 15892  003028  ECBC  F024         	call	_command
 15893                           
 15894                           ;diskio.c: 553: proceed();
 15895  00302C  EC4F  F029         	call	_proceed	;wreg free
 15896  003030                     
 15897                           ;diskio.c: 555: buff = response();
 15898  003030  EC41  F029         	call	_response	;wreg free
 15899  003034  0100               	movlb	0	; () banked
 15900  003036  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 15901                           
 15902                           ; BSR set to: 0
 15903                           ;diskio.c: 556: }while(buff!=0X00);
 15904  003038  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 15905  00303A  A4D8               	btfss	status,2,c
 15906  00303C  D7F9               	goto	l471
 15907                           
 15908                           ; BSR set to: 0
 15909                           ;diskio.c: 558: LATBbits.LATB4 = 0;
 15910  00303E  988A               	bcf	3978,4,c	;volatile
 15911                           
 15912                           ;diskio.c: 559: LATCbits.LATC7 = 0;
 15913  003040  9E8B               	bcf	3979,7,c	;volatile
 15914                           
 15915                           ; BSR set to: 0
 15916                           ;diskio.c: 560: dummy_clocks(1);
 15917  003042  0E01               	movlw	1
 15918  003044  EC0B  F027         	call	_dummy_clocks
 15919                           
 15920                           ;diskio.c: 561: escreve_SPI(0XFE);
 15921  003048  0EFE               	movlw	254
 15922  00304A  EC0C  F029         	call	_escreve_SPI
 15923                           
 15924                           ;diskio.c: 562: for(j=0;j<512;j++)
 15925  00304E  0E00               	movlw	0
 15926  003050  0100               	movlb	0	; () banked
 15927  003052  6F7D               	movwf	(sdc_disk_write@j+1)& (0+255),b
 15928  003054  0E00               	movlw	0
 15929  003056  6F7C               	movwf	sdc_disk_write@j& (0+255),b
 15930  003058                     l8461:
 15931                           
 15932                           ; BSR set to: 0
 15933  003058  BF7D               	btfsc	(sdc_disk_write@j+1)& (0+255),7,b
 15934  00305A  D004               	goto	l473
 15935  00305C  0E02               	movlw	2
 15936  00305E  5D7D               	subwf	(sdc_disk_write@j+1)& (0+255),w,b
 15937  003060  B0D8               	btfsc	status,0,c
 15938  003062  D00D               	goto	u10070
 15939  003064                     l473:
 15940                           
 15941                           ; BSR set to: 0
 15942                           ;diskio.c: 563: {
 15943                           ;diskio.c: 564: escreve_SPI(*p_buff);
 15944                           
 15945                           ; BSR set to: 0
 15946  003064  C06C  FFD9         	movff	sdc_disk_write@p_buff,fsr2l
 15947  003068  C06D  FFDA         	movff	sdc_disk_write@p_buff+1,fsr2h
 15948  00306C  50DF               	movf	indf2,w,c
 15949  00306E  EC0C  F029         	call	_escreve_SPI
 15950                           
 15951                           ;diskio.c: 565: p_buff++;
 15952  003072  0100               	movlb	0	; () banked
 15953  003074  4B6C               	infsnz	sdc_disk_write@p_buff& (0+255),f,b
 15954  003076  2B6D               	incf	(sdc_disk_write@p_buff+1)& (0+255),f,b
 15955                           
 15956                           ; BSR set to: 0
 15957  003078  4B7C               	infsnz	sdc_disk_write@j& (0+255),f,b
 15958  00307A  2B7D               	incf	(sdc_disk_write@j+1)& (0+255),f,b
 15959  00307C  D7ED               	goto	l8461
 15960  00307E                     u10070:
 15961                           
 15962                           ; BSR set to: 0
 15963                           ;diskio.c: 566: }
 15964                           ;diskio.c: 567: leitura_SPI();
 15965                           
 15966                           ; BSR set to: 0
 15967  00307E  EC55  F029         	call	_leitura_SPI	;wreg free
 15968                           
 15969                           ;diskio.c: 568: leitura_SPI();
 15970  003082  EC55  F029         	call	_leitura_SPI	;wreg free
 15971                           
 15972                           ;diskio.c: 570: dummy_clocks(10);
 15973  003086  0E0A               	movlw	10
 15974  003088  EC0B  F027         	call	_dummy_clocks
 15975                           
 15976                           ;diskio.c: 571: command(0X4D,0X00000000,0X00);
 15977  00308C  0E00               	movlw	0
 15978  00308E  0100               	movlb	0	; () banked
 15979  003090  6F65               	movwf	command@arg& (0+255),b
 15980  003092  0E00               	movlw	0
 15981  003094  6F66               	movwf	(command@arg+1)& (0+255),b
 15982  003096  0E00               	movlw	0
 15983  003098  6F67               	movwf	(command@arg+2)& (0+255),b
 15984  00309A  0E00               	movlw	0
 15985  00309C  6F68               	movwf	(command@arg+3)& (0+255),b
 15986  00309E  0E00               	movlw	0
 15987  0030A0  6F69               	movwf	command@CRC& (0+255),b
 15988  0030A2  0E4D               	movlw	77
 15989  0030A4  ECBC  F024         	call	_command
 15990                           
 15991                           ;diskio.c: 572: proceed();
 15992  0030A8  EC4F  F029         	call	_proceed	;wreg free
 15993  0030AC                     
 15994                           ;diskio.c: 574: buff = response();
 15995  0030AC  EC41  F029         	call	_response	;wreg free
 15996  0030B0  0100               	movlb	0	; () banked
 15997  0030B2  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 15998                           
 15999                           ; BSR set to: 0
 16000                           ;diskio.c: 575: }while(buff!=0X00 );
 16001  0030B4  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 16002  0030B6  A4D8               	btfss	status,2,c
 16003  0030B8  D7F9               	goto	l475
 16004  0030BA                     u10080:
 16005                           
 16006                           ;diskio.c: 576: }
 16007                           ;diskio.c: 577: return res;
 16008                           
 16009                           ; BSR set to: 0
 16010                           
 16011                           ; BSR set to: 0
 16012  0030BA  0100               	movlb	0	; () banked
 16013  0030BC  517B               	movf	sdc_disk_write@res& (0+255),w,b
 16014  0030BE  0012               	return	
 16015  0030C0                     __end_of_sdc_disk_write:
 16016                           	opt stack 0
 16017                           tosu	equ	0xFFF
 16018                           tosh	equ	0xFFE
 16019                           tosl	equ	0xFFD
 16020                           pclath	equ	0xFFA
 16021                           tblptru	equ	0xFF8
 16022                           tblptrh	equ	0xFF7
 16023                           tblptrl	equ	0xFF6
 16024                           tablat	equ	0xFF5
 16025                           prodh	equ	0xFF4
 16026                           prodl	equ	0xFF3
 16027                           intcon	equ	0xFF2
 16028                           intcon2	equ	0xFF1
 16029                           intcon3	equ	0xFF0
 16030                           indf0	equ	0xFEF
 16031                           postinc0	equ	0xFEE
 16032                           fsr0h	equ	0xFEA
 16033                           fsr0l	equ	0xFE9
 16034                           wreg	equ	0xFE8
 16035                           indf1	equ	0xFE7
 16036                           postinc1	equ	0xFE6
 16037                           postdec1	equ	0xFE5
 16038                           fsr1h	equ	0xFE2
 16039                           fsr1l	equ	0xFE1
 16040                           indf2	equ	0xFDF
 16041                           postinc2	equ	0xFDE
 16042                           postdec2	equ	0xFDD
 16043                           plusw2	equ	0xFDB
 16044                           fsr2h	equ	0xFDA
 16045                           fsr2l	equ	0xFD9
 16046                           status	equ	0xFD8
 16047                           
 16048 ;; *************** function _disk_read *****************
 16049 ;; Defined at:
 16050 ;;		line 97 in file "bibliotecas/diskio.c"
 16051 ;; Parameters:    Size  Location     Type
 16052 ;;  pdrv            1    wreg     unsigned char 
 16053 ;;  buff            2   31[BANK0 ] PTR unsigned char 
 16054 ;;		 -> NULL(0), fs(544), 
 16055 ;;  sector          4   33[BANK0 ] unsigned long 
 16056 ;;  count           1   37[BANK0 ] unsigned char 
 16057 ;; Auto vars:     Size  Location     Type
 16058 ;;  pdrv            1   39[BANK0 ] unsigned char 
 16059 ;;  result          2   40[BANK0 ] int 
 16060 ;;  res             1   42[BANK0 ] enum E25
 16061 ;; Return value:  Size  Location     Type
 16062 ;;                  1    wreg      enum E25
 16063 ;; Registers used:
 16064 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16065 ;; Tracked objects:
 16066 ;;		On entry : 0/0
 16067 ;;		On exit  : 0/0
 16068 ;;		Unchanged: 0/0
 16069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16070 ;;      Params:         0       7       0       0       0       0       0       0       0
 16071 ;;      Locals:         0       4       0       0       0       0       0       0       0
 16072 ;;      Temps:          0       1       0       0       0       0       0       0       0
 16073 ;;      Totals:         0      12       0       0       0       0       0       0       0
 16074 ;;Total ram usage:       12 bytes
 16075 ;; Hardware stack levels used:    1
 16076 ;; Hardware stack levels required when called:    7
 16077 ;; This function calls:
 16078 ;;		_sdc_disk_read
 16079 ;; This function is called by:
 16080 ;;		_move_window
 16081 ;;		_check_fs
 16082 ;;		_f_read
 16083 ;; This function uses a non-reentrant model
 16084 ;;
 16085                           
 16086                           	psect	text57
 16087  0044FC                     __ptext57:
 16088                           	opt stack 0
 16089  0044FC                     _disk_read:
 16090                           	opt stack 16
 16091                           
 16092                           ; BSR set to: 0
 16093                           ;incstack = 0
 16094                           ;disk_read@pdrv stored from wreg
 16095  0044FC  0100               	movlb	0	; () banked
 16096  0044FE  6F87               	movwf	disk_read@pdrv& (0+255),b
 16097                           
 16098                           ;diskio.c: 104: DRESULT res;
 16099                           ;diskio.c: 105: int result;
 16100                           ;diskio.c: 107: switch (pdrv) {
 16101  004500  D038               	goto	l370
 16102  004502                     
 16103                           ;diskio.c: 111: result = sdc_disk_read(buff, sector, count);
 16104  004502  C07F  F06C         	movff	disk_read@buff,sdc_disk_read@p_buff
 16105  004506  C080  F06D         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 16106  00450A  C081  F06E         	movff	disk_read@sector,sdc_disk_read@sector
 16107  00450E  C082  F06F         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 16108  004512  C083  F070         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 16109  004516  C084  F071         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 16110  00451A  C085  F072         	movff	disk_read@count,sdc_disk_read@count
 16111  00451E  EC8A  F01B         	call	_sdc_disk_read	;wreg free
 16112  004522  0100               	movlb	0	; () banked
 16113  004524  6F86               	movwf	??_disk_read& (0+255),b
 16114  004526  5186               	movf	??_disk_read& (0+255),w,b
 16115  004528  6F88               	movwf	disk_read@result& (0+255),b
 16116  00452A  6B89               	clrf	(disk_read@result+1)& (0+255),b
 16117                           
 16118                           ; BSR set to: 0
 16119                           ;diskio.c: 115: res = result;
 16120  00452C  C088  F08A         	movff	disk_read@result,disk_read@res
 16121                           
 16122                           ; BSR set to: 0
 16123                           ;diskio.c: 117: return res;
 16124  004530  518A               	movf	disk_read@res& (0+255),w,b
 16125                           
 16126                           ; BSR set to: 0
 16127  004532  0012               	return	
 16128  004534                     
 16129                           ; BSR set to: 0
 16130                           ;diskio.c: 122: result = sdc_disk_read(buff, sector, count);
 16131                           
 16132                           ; BSR set to: 0
 16133  004534  C07F  F06C         	movff	disk_read@buff,sdc_disk_read@p_buff
 16134  004538  C080  F06D         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 16135  00453C  C081  F06E         	movff	disk_read@sector,sdc_disk_read@sector
 16136  004540  C082  F06F         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 16137  004544  C083  F070         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 16138  004548  C084  F071         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 16139  00454C  C085  F072         	movff	disk_read@count,sdc_disk_read@count
 16140  004550  EC8A  F01B         	call	_sdc_disk_read	;wreg free
 16141  004554  0100               	movlb	0	; () banked
 16142  004556  6F86               	movwf	??_disk_read& (0+255),b
 16143  004558  5186               	movf	??_disk_read& (0+255),w,b
 16144  00455A  6F88               	movwf	disk_read@result& (0+255),b
 16145  00455C  6B89               	clrf	(disk_read@result+1)& (0+255),b
 16146                           
 16147                           ; BSR set to: 0
 16148                           ;diskio.c: 126: res = result;
 16149  00455E  C088  F08A         	movff	disk_read@result,disk_read@res
 16150                           
 16151                           ; BSR set to: 0
 16152                           ;diskio.c: 128: buff = data_buff;
 16153  004562  C025  F07F         	movff	_data_buff,disk_read@buff
 16154  004566  C026  F080         	movff	_data_buff+1,disk_read@buff+1
 16155                           
 16156                           ; BSR set to: 0
 16157                           ;diskio.c: 129: return res;
 16158  00456A  518A               	movf	disk_read@res& (0+255),w,b
 16159                           
 16160                           ; BSR set to: 0
 16161  00456C  0012               	return	
 16162  00456E                     
 16163                           ; BSR set to: 0
 16164                           ;diskio.c: 138: return res;
 16165                           
 16166                           ; BSR set to: 0
 16167  00456E  518A               	movf	disk_read@res& (0+255),w,b
 16168                           
 16169                           ; BSR set to: 0
 16170  004570  0012               	return	
 16171  004572                     l370:
 16172                           
 16173                           ; BSR set to: 0
 16174  004572  0100               	movlb	0	; () banked
 16175  004574  5187               	movf	disk_read@pdrv& (0+255),w,b
 16176                           
 16177                           ; Switch size 1, requested type "space"
 16178                           ; Number of cases is 3, Range of values is 0 to 2
 16179                           ; switch strategies available:
 16180                           ; Name         Instructions Cycles
 16181                           ; simple_byte           10     6 (average)
 16182                           ;	Chosen strategy is simple_byte
 16183  004576  0A00               	xorlw	0	; case 0
 16184  004578  B4D8               	btfsc	status,2,c
 16185  00457A  D7C3               	goto	l371
 16186  00457C  0A01               	xorlw	1	; case 1
 16187  00457E  B4D8               	btfsc	status,2,c
 16188  004580  D7D9               	goto	l373
 16189  004582  0A03               	xorlw	3	; case 2
 16190  004584  B4D8               	btfsc	status,2,c
 16191  004586  D7F3               	goto	l374
 16192                           
 16193                           ; BSR set to: 0
 16194                           ;diskio.c: 141: return RES_PARERR;
 16195                           
 16196                           ; BSR set to: 0
 16197  004588  0E04               	movlw	4
 16198  00458A  0012               	return	
 16199  00458C                     __end_of_disk_read:
 16200                           	opt stack 0
 16201                           tosu	equ	0xFFF
 16202                           tosh	equ	0xFFE
 16203                           tosl	equ	0xFFD
 16204                           pclath	equ	0xFFA
 16205                           tblptru	equ	0xFF8
 16206                           tblptrh	equ	0xFF7
 16207                           tblptrl	equ	0xFF6
 16208                           tablat	equ	0xFF5
 16209                           prodh	equ	0xFF4
 16210                           prodl	equ	0xFF3
 16211                           intcon	equ	0xFF2
 16212                           intcon2	equ	0xFF1
 16213                           intcon3	equ	0xFF0
 16214                           indf0	equ	0xFEF
 16215                           postinc0	equ	0xFEE
 16216                           fsr0h	equ	0xFEA
 16217                           fsr0l	equ	0xFE9
 16218                           wreg	equ	0xFE8
 16219                           indf1	equ	0xFE7
 16220                           postinc1	equ	0xFE6
 16221                           postdec1	equ	0xFE5
 16222                           fsr1h	equ	0xFE2
 16223                           fsr1l	equ	0xFE1
 16224                           indf2	equ	0xFDF
 16225                           postinc2	equ	0xFDE
 16226                           postdec2	equ	0xFDD
 16227                           plusw2	equ	0xFDB
 16228                           fsr2h	equ	0xFDA
 16229                           fsr2l	equ	0xFD9
 16230                           status	equ	0xFD8
 16231                           
 16232 ;; *************** function _sdc_disk_read *****************
 16233 ;; Defined at:
 16234 ;;		line 439 in file "bibliotecas/diskio.c"
 16235 ;; Parameters:    Size  Location     Type
 16236 ;;  p_buff          2   12[BANK0 ] PTR unsigned char 
 16237 ;;		 -> NULL(0), fs(544), 
 16238 ;;  sector          4   14[BANK0 ] unsigned long 
 16239 ;;  count           1   18[BANK0 ] unsigned char 
 16240 ;; Auto vars:     Size  Location     Type
 16241 ;;  start_add       4   24[BANK0 ] unsigned long 
 16242 ;;  length          2   28[BANK0 ] int 
 16243 ;;  count1          2    0        int 
 16244 ;;  i               2    0        int 
 16245 ;;  buff            1   30[BANK0 ] unsigned char 
 16246 ;;  ptr             1   23[BANK0 ] unsigned char 
 16247 ;;  res             1    0        enum E25
 16248 ;; Return value:  Size  Location     Type
 16249 ;;                  1    wreg      enum E25
 16250 ;; Registers used:
 16251 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16252 ;; Tracked objects:
 16253 ;;		On entry : 0/0
 16254 ;;		On exit  : 0/0
 16255 ;;		Unchanged: 0/0
 16256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16257 ;;      Params:         0       7       0       0       0       0       0       0       0
 16258 ;;      Locals:         0       8       0       0       0       0       0       0       0
 16259 ;;      Temps:          0       4       0       0       0       0       0       0       0
 16260 ;;      Totals:         0      19       0       0       0       0       0       0       0
 16261 ;;Total ram usage:       19 bytes
 16262 ;; Hardware stack levels used:    1
 16263 ;; Hardware stack levels required when called:    6
 16264 ;; This function calls:
 16265 ;;		_command
 16266 ;;		_dummy_clocks
 16267 ;;		_proceed
 16268 ;;		_response
 16269 ;; This function is called by:
 16270 ;;		_disk_read
 16271 ;; This function uses a non-reentrant model
 16272 ;;
 16273                           
 16274                           	psect	text58
 16275  003714                     __ptext58:
 16276                           	opt stack 0
 16277  003714                     _sdc_disk_read:
 16278                           	opt stack 16
 16279                           
 16280                           ;diskio.c: 446: DRESULT res;
 16281                           ;diskio.c: 447: unsigned char ptr=0X00, buff;
 16282                           
 16283                           ; BSR set to: 0
 16284                           ;incstack = 0
 16285  003714  0E00               	movlw	0
 16286  003716  0100               	movlb	0	; () banked
 16287  003718  6F77               	movwf	sdc_disk_read@ptr& (0+255),b
 16288                           
 16289                           ; BSR set to: 0
 16290                           ;diskio.c: 448: unsigned long int start_add;
 16291                           ;diskio.c: 449: int length,i, count1;
 16292                           ;diskio.c: 450: dummy_clocks(10);
 16293  00371A  0E0A               	movlw	10
 16294  00371C  EC0B  F027         	call	_dummy_clocks
 16295                           
 16296                           ;diskio.c: 452: start_add = sector*512;
 16297  003720  C06E  F073         	movff	sdc_disk_read@sector,??_sdc_disk_read
 16298  003724  C06F  F074         	movff	sdc_disk_read@sector+1,??_sdc_disk_read+1
 16299  003728  C070  F075         	movff	sdc_disk_read@sector+2,??_sdc_disk_read+2
 16300  00372C  C071  F076         	movff	sdc_disk_read@sector+3,??_sdc_disk_read+3
 16301  003730  0E09               	movlw	9
 16302  003732                     u9915:
 16303  003732  90D8               	bcf	status,0,c
 16304  003734  0100               	movlb	0	; () banked
 16305  003736  3773               	rlcf	??_sdc_disk_read& (0+255),f,b
 16306  003738  3774               	rlcf	(??_sdc_disk_read+1)& (0+255),f,b
 16307  00373A  3775               	rlcf	(??_sdc_disk_read+2)& (0+255),f,b
 16308  00373C  3776               	rlcf	(??_sdc_disk_read+3)& (0+255),f,b
 16309  00373E  2EE8               	decfsz	wreg,f,c
 16310  003740  D7F8               	goto	u9915
 16311  003742  C073  F078         	movff	??_sdc_disk_read,sdc_disk_read@start_add
 16312  003746  C074  F079         	movff	??_sdc_disk_read+1,sdc_disk_read@start_add+1
 16313  00374A  C075  F07A         	movff	??_sdc_disk_read+2,sdc_disk_read@start_add+2
 16314  00374E  C076  F07B         	movff	??_sdc_disk_read+3,sdc_disk_read@start_add+3
 16315                           
 16316                           ; BSR set to: 0
 16317                           ;diskio.c: 455: if(sector != 1)
 16318  003752  056E               	decf	sdc_disk_read@sector& (0+255),w,b
 16319  003754  116F               	iorwf	(sdc_disk_read@sector+1)& (0+255),w,b
 16320  003756  1170               	iorwf	(sdc_disk_read@sector+2)& (0+255),w,b
 16321  003758  1171               	iorwf	(sdc_disk_read@sector+3)& (0+255),w,b
 16322  00375A  B4D8               	btfsc	status,2,c
 16323  00375C  D01D               	goto	l446
 16324                           
 16325                           ; BSR set to: 0
 16326                           ;diskio.c: 456: {
 16327                           ;diskio.c: 457: dummy_clocks(10);
 16328  00375E  0E0A               	movlw	10
 16329  003760  EC0B  F027         	call	_dummy_clocks
 16330                           
 16331                           ;diskio.c: 458: command(0X52,start_add ,0X00);
 16332  003764  C078  F065         	movff	sdc_disk_read@start_add,command@arg
 16333  003768  C079  F066         	movff	sdc_disk_read@start_add+1,command@arg+1
 16334  00376C  C07A  F067         	movff	sdc_disk_read@start_add+2,command@arg+2
 16335  003770  C07B  F068         	movff	sdc_disk_read@start_add+3,command@arg+3
 16336  003774  0E00               	movlw	0
 16337  003776  0100               	movlb	0	; () banked
 16338  003778  6F69               	movwf	command@CRC& (0+255),b
 16339  00377A  0E52               	movlw	82
 16340  00377C  ECBC  F024         	call	_command
 16341                           
 16342                           ;diskio.c: 459: proceed();
 16343  003780  EC4F  F029         	call	_proceed	;wreg free
 16344  003784                     
 16345                           ;diskio.c: 461: buff = response();
 16346  003784  EC41  F029         	call	_response	;wreg free
 16347  003788  0100               	movlb	0	; () banked
 16348  00378A  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 16349                           
 16350                           ; BSR set to: 0
 16351                           ;diskio.c: 462: }while(buff!=0X00);
 16352  00378C  517E               	movf	sdc_disk_read@buff& (0+255),w,b
 16353  00378E  A4D8               	btfss	status,2,c
 16354  003790  D7F9               	goto	l447
 16355                           
 16356                           ; BSR set to: 0
 16357                           ;diskio.c: 463: proceed();
 16358                           
 16359                           ; BSR set to: 0
 16360  003792  EC4F  F029         	call	_proceed	;wreg free
 16361                           
 16362                           ;diskio.c: 464: }
 16363  003796  D021               	goto	l452
 16364  003798                     l446:
 16365                           
 16366                           ;diskio.c: 465: else
 16367                           ;diskio.c: 466: {
 16368                           ;diskio.c: 467: dummy_clocks(10);
 16369  003798  0E0A               	movlw	10
 16370  00379A  EC0B  F027         	call	_dummy_clocks
 16371                           
 16372                           ;diskio.c: 468: command(0X51,sector ,0X00);
 16373  00379E  C06E  F065         	movff	sdc_disk_read@sector,command@arg
 16374  0037A2  C06F  F066         	movff	sdc_disk_read@sector+1,command@arg+1
 16375  0037A6  C070  F067         	movff	sdc_disk_read@sector+2,command@arg+2
 16376  0037AA  C071  F068         	movff	sdc_disk_read@sector+3,command@arg+3
 16377  0037AE  0E00               	movlw	0
 16378  0037B0  0100               	movlb	0	; () banked
 16379  0037B2  6F69               	movwf	command@CRC& (0+255),b
 16380  0037B4  0E51               	movlw	81
 16381  0037B6  ECBC  F024         	call	_command
 16382                           
 16383                           ;diskio.c: 469: proceed();
 16384  0037BA  EC4F  F029         	call	_proceed	;wreg free
 16385  0037BE                     
 16386                           ;diskio.c: 471: buff = response();
 16387  0037BE  EC41  F029         	call	_response	;wreg free
 16388  0037C2  0100               	movlb	0	; () banked
 16389  0037C4  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 16390                           
 16391                           ; BSR set to: 0
 16392                           ;diskio.c: 472: }while(buff!=0X00);
 16393  0037C6  517E               	movf	sdc_disk_read@buff& (0+255),w,b
 16394  0037C8  A4D8               	btfss	status,2,c
 16395  0037CA  D7F9               	goto	l450
 16396                           
 16397                           ; BSR set to: 0
 16398                           ;diskio.c: 473: proceed();
 16399                           
 16400                           ; BSR set to: 0
 16401  0037CC  EC4F  F029         	call	_proceed	;wreg free
 16402                           
 16403                           ;diskio.c: 474: }
 16404                           ;diskio.c: 478: while(buff!=0xFE)
 16405  0037D0  D004               	goto	l452
 16406  0037D2                     
 16407                           ;diskio.c: 479: {
 16408                           ;diskio.c: 480: buff = response();
 16409  0037D2  EC41  F029         	call	_response	;wreg free
 16410  0037D6  0100               	movlb	0	; () banked
 16411  0037D8  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 16412  0037DA                     l452:
 16413                           
 16414                           ; BSR set to: 0
 16415  0037DA  0EFE               	movlw	254
 16416  0037DC  0100               	movlb	0	; () banked
 16417  0037DE  197E               	xorwf	sdc_disk_read@buff& (0+255),w,b
 16418  0037E0  A4D8               	btfss	status,2,c
 16419  0037E2  D7F7               	goto	l453
 16420                           
 16421                           ; BSR set to: 0
 16422                           ;diskio.c: 481: }
 16423                           ;diskio.c: 483: length = 0;
 16424                           
 16425                           ; BSR set to: 0
 16426  0037E4  0E00               	movlw	0
 16427  0037E6  6F7D               	movwf	(sdc_disk_read@length+1)& (0+255),b
 16428  0037E8  0E00               	movlw	0
 16429  0037EA  6F7C               	movwf	sdc_disk_read@length& (0+255),b
 16430                           
 16431                           ;diskio.c: 484: while ( length < 512 )
 16432  0037EC  D00C               	goto	l455
 16433  0037EE                     
 16434                           ; BSR set to: 0
 16435                           ;diskio.c: 485: {
 16436                           ;diskio.c: 486: p_buff[length] = response();
 16437                           
 16438                           ; BSR set to: 0
 16439  0037EE  517C               	movf	sdc_disk_read@length& (0+255),w,b
 16440  0037F0  256C               	addwf	sdc_disk_read@p_buff& (0+255),w,b
 16441  0037F2  6ED9               	movwf	fsr2l,c
 16442  0037F4  517D               	movf	(sdc_disk_read@length+1)& (0+255),w,b
 16443  0037F6  216D               	addwfc	(sdc_disk_read@p_buff+1)& (0+255),w,b
 16444  0037F8  6EDA               	movwf	fsr2h,c
 16445  0037FA  EC41  F029         	call	_response	;wreg free
 16446  0037FE  6EDF               	movwf	indf2,c
 16447                           
 16448                           ;diskio.c: 487: length++;
 16449  003800  0100               	movlb	0	; () banked
 16450  003802  4B7C               	infsnz	sdc_disk_read@length& (0+255),f,b
 16451  003804  2B7D               	incf	(sdc_disk_read@length+1)& (0+255),f,b
 16452  003806                     l455:
 16453                           
 16454                           ; BSR set to: 0
 16455                           
 16456                           ; BSR set to: 0
 16457  003806  BF7D               	btfsc	(sdc_disk_read@length+1)& (0+255),7,b
 16458  003808  D7F2               	goto	l456
 16459  00380A  0E02               	movlw	2
 16460  00380C  5D7D               	subwf	(sdc_disk_read@length+1)& (0+255),w,b
 16461  00380E  A0D8               	btfss	status,0,c
 16462  003810  D7EE               	goto	l456
 16463                           
 16464                           ; BSR set to: 0
 16465                           ;diskio.c: 488: }
 16466                           ;diskio.c: 490: length = 0;
 16467                           
 16468                           ; BSR set to: 0
 16469  003812  0E00               	movlw	0
 16470  003814  6F7D               	movwf	(sdc_disk_read@length+1)& (0+255),b
 16471  003816  0E00               	movlw	0
 16472  003818  6F7C               	movwf	sdc_disk_read@length& (0+255),b
 16473                           
 16474                           ; BSR set to: 0
 16475                           ;diskio.c: 491: dummy_clocks(10);
 16476  00381A  0E0A               	movlw	10
 16477  00381C  EC0B  F027         	call	_dummy_clocks
 16478                           
 16479                           ;diskio.c: 493: command(0X4C,0X00000000,0X00);
 16480  003820  0E00               	movlw	0
 16481  003822  0100               	movlb	0	; () banked
 16482  003824  6F65               	movwf	command@arg& (0+255),b
 16483  003826  0E00               	movlw	0
 16484  003828  6F66               	movwf	(command@arg+1)& (0+255),b
 16485  00382A  0E00               	movlw	0
 16486  00382C  6F67               	movwf	(command@arg+2)& (0+255),b
 16487  00382E  0E00               	movlw	0
 16488  003830  6F68               	movwf	(command@arg+3)& (0+255),b
 16489  003832  0E00               	movlw	0
 16490  003834  6F69               	movwf	command@CRC& (0+255),b
 16491  003836  0E4C               	movlw	76
 16492  003838  ECBC  F024         	call	_command
 16493                           
 16494                           ;diskio.c: 494: proceed();
 16495  00383C  EC4F  F029         	call	_proceed	;wreg free
 16496  003840                     
 16497                           ;diskio.c: 496: buff = response();
 16498  003840  EC41  F029         	call	_response	;wreg free
 16499  003844  0100               	movlb	0	; () banked
 16500  003846  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 16501                           
 16502                           ; BSR set to: 0
 16503                           ;diskio.c: 497: }while(buff!=0xFF);
 16504  003848  297E               	incf	sdc_disk_read@buff& (0+255),w,b
 16505  00384A  A4D8               	btfss	status,2,c
 16506  00384C  D7F9               	goto	l458
 16507                           
 16508                           ; BSR set to: 0
 16509                           ;diskio.c: 499: length = 0;
 16510                           
 16511                           ; BSR set to: 0
 16512  00384E  0E00               	movlw	0
 16513  003850  6F7D               	movwf	(sdc_disk_read@length+1)& (0+255),b
 16514  003852  0E00               	movlw	0
 16515  003854  6F7C               	movwf	sdc_disk_read@length& (0+255),b
 16516                           
 16517                           ; BSR set to: 0
 16518                           ;diskio.c: 500: return RES_OK;
 16519  003856  0E00               	movlw	0
 16520  003858  0012               	return	
 16521  00385A                     __end_of_sdc_disk_read:
 16522                           	opt stack 0
 16523                           tosu	equ	0xFFF
 16524                           tosh	equ	0xFFE
 16525                           tosl	equ	0xFFD
 16526                           pclath	equ	0xFFA
 16527                           tblptru	equ	0xFF8
 16528                           tblptrh	equ	0xFF7
 16529                           tblptrl	equ	0xFF6
 16530                           tablat	equ	0xFF5
 16531                           prodh	equ	0xFF4
 16532                           prodl	equ	0xFF3
 16533                           intcon	equ	0xFF2
 16534                           intcon2	equ	0xFF1
 16535                           intcon3	equ	0xFF0
 16536                           indf0	equ	0xFEF
 16537                           postinc0	equ	0xFEE
 16538                           fsr0h	equ	0xFEA
 16539                           fsr0l	equ	0xFE9
 16540                           wreg	equ	0xFE8
 16541                           indf1	equ	0xFE7
 16542                           postinc1	equ	0xFE6
 16543                           postdec1	equ	0xFE5
 16544                           fsr1h	equ	0xFE2
 16545                           fsr1l	equ	0xFE1
 16546                           indf2	equ	0xFDF
 16547                           postinc2	equ	0xFDE
 16548                           postdec2	equ	0xFDD
 16549                           plusw2	equ	0xFDB
 16550                           fsr2h	equ	0xFDA
 16551                           fsr2l	equ	0xFD9
 16552                           status	equ	0xFD8
 16553                           
 16554 ;; *************** function _response *****************
 16555 ;; Defined at:
 16556 ;;		line 58 in file "bibliotecas/SDCard.c"
 16557 ;; Parameters:    Size  Location     Type
 16558 ;;		None
 16559 ;; Auto vars:     Size  Location     Type
 16560 ;;  buff            1    0[BANK0 ] unsigned char 
 16561 ;; Return value:  Size  Location     Type
 16562 ;;                  1    wreg      unsigned char 
 16563 ;; Registers used:
 16564 ;;		wreg, status,2, cstack
 16565 ;; Tracked objects:
 16566 ;;		On entry : 0/0
 16567 ;;		On exit  : 0/0
 16568 ;;		Unchanged: 0/0
 16569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16570 ;;      Params:         0       0       0       0       0       0       0       0       0
 16571 ;;      Locals:         0       1       0       0       0       0       0       0       0
 16572 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16573 ;;      Totals:         0       1       0       0       0       0       0       0       0
 16574 ;;Total ram usage:        1 bytes
 16575 ;; Hardware stack levels used:    1
 16576 ;; Hardware stack levels required when called:    4
 16577 ;; This function calls:
 16578 ;;		_leitura_SPI
 16579 ;; This function is called by:
 16580 ;;		_sdc_reset
 16581 ;;		_sdc_disk_initialize
 16582 ;;		_sdc_disk_read
 16583 ;;		_sdc_disk_write
 16584 ;; This function uses a non-reentrant model
 16585 ;;
 16586                           
 16587                           	psect	text59
 16588  005282                     __ptext59:
 16589                           	opt stack 0
 16590  005282                     _response:
 16591                           	opt stack 17
 16592                           
 16593                           ;SDCard.c: 60: unsigned char buff;
 16594                           ;SDCard.c: 61: LATBbits.LATB4 = 0;
 16595                           
 16596                           ; BSR set to: 0
 16597                           ;incstack = 0
 16598  005282  988A               	bcf	3978,4,c	;volatile
 16599                           
 16600                           ;SDCard.c: 62: buff= leitura_SPI();
 16601  005284  EC55  F029         	call	_leitura_SPI	;wreg free
 16602  005288  0100               	movlb	0	; () banked
 16603  00528A  6F60               	movwf	response@buff& (0+255),b
 16604                           
 16605                           ; BSR set to: 0
 16606                           ;SDCard.c: 63: return buff;
 16607  00528C  5160               	movf	response@buff& (0+255),w,b
 16608  00528E  0012               	return	
 16609  005290                     __end_of_response:
 16610                           	opt stack 0
 16611                           tosu	equ	0xFFF
 16612                           tosh	equ	0xFFE
 16613                           tosl	equ	0xFFD
 16614                           pclath	equ	0xFFA
 16615                           tblptru	equ	0xFF8
 16616                           tblptrh	equ	0xFF7
 16617                           tblptrl	equ	0xFF6
 16618                           tablat	equ	0xFF5
 16619                           prodh	equ	0xFF4
 16620                           prodl	equ	0xFF3
 16621                           intcon	equ	0xFF2
 16622                           intcon2	equ	0xFF1
 16623                           intcon3	equ	0xFF0
 16624                           indf0	equ	0xFEF
 16625                           postinc0	equ	0xFEE
 16626                           fsr0h	equ	0xFEA
 16627                           fsr0l	equ	0xFE9
 16628                           wreg	equ	0xFE8
 16629                           indf1	equ	0xFE7
 16630                           postinc1	equ	0xFE6
 16631                           postdec1	equ	0xFE5
 16632                           fsr1h	equ	0xFE2
 16633                           fsr1l	equ	0xFE1
 16634                           indf2	equ	0xFDF
 16635                           postinc2	equ	0xFDE
 16636                           postdec2	equ	0xFDD
 16637                           plusw2	equ	0xFDB
 16638                           fsr2h	equ	0xFDA
 16639                           fsr2l	equ	0xFD9
 16640                           status	equ	0xFD8
 16641                           
 16642 ;; *************** function _proceed *****************
 16643 ;; Defined at:
 16644 ;;		line 91 in file "bibliotecas/SDCard.c"
 16645 ;; Parameters:    Size  Location     Type
 16646 ;;		None
 16647 ;; Auto vars:     Size  Location     Type
 16648 ;;		None
 16649 ;; Return value:  Size  Location     Type
 16650 ;;                  1    wreg      void 
 16651 ;; Registers used:
 16652 ;;		wreg, cstack
 16653 ;; Tracked objects:
 16654 ;;		On entry : 0/0
 16655 ;;		On exit  : 0/0
 16656 ;;		Unchanged: 0/0
 16657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16658 ;;      Params:         0       0       0       0       0       0       0       0       0
 16659 ;;      Locals:         0       0       0       0       0       0       0       0       0
 16660 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16661 ;;      Totals:         0       0       0       0       0       0       0       0       0
 16662 ;;Total ram usage:        0 bytes
 16663 ;; Hardware stack levels used:    1
 16664 ;; Hardware stack levels required when called:    4
 16665 ;; This function calls:
 16666 ;;		_escreve_SPI
 16667 ;; This function is called by:
 16668 ;;		_sdc_reset
 16669 ;;		_sdc_disk_initialize
 16670 ;;		_sdc_disk_read
 16671 ;;		_sdc_disk_write
 16672 ;;		_sdcard_init
 16673 ;; This function uses a non-reentrant model
 16674 ;;
 16675                           
 16676                           	psect	text60
 16677  00529E                     __ptext60:
 16678                           	opt stack 0
 16679  00529E                     _proceed:
 16680                           	opt stack 17
 16681                           
 16682                           ;SDCard.c: 93: LATBbits.LATB4 = 0;
 16683                           
 16684                           ; BSR set to: 0
 16685                           ;incstack = 0
 16686  00529E  988A               	bcf	3978,4,c	;volatile
 16687                           
 16688                           ;SDCard.c: 94: escreve_SPI(0xFF);
 16689  0052A0  0EFF               	movlw	255
 16690  0052A2  EC0C  F029         	call	_escreve_SPI
 16691                           
 16692                           ;SDCard.c: 95: LATBbits.LATB4 = 1;
 16693  0052A6  888A               	bsf	3978,4,c	;volatile
 16694  0052A8  0012               	return		;funcret
 16695  0052AA                     __end_of_proceed:
 16696                           	opt stack 0
 16697                           tosu	equ	0xFFF
 16698                           tosh	equ	0xFFE
 16699                           tosl	equ	0xFFD
 16700                           pclath	equ	0xFFA
 16701                           tblptru	equ	0xFF8
 16702                           tblptrh	equ	0xFF7
 16703                           tblptrl	equ	0xFF6
 16704                           tablat	equ	0xFF5
 16705                           prodh	equ	0xFF4
 16706                           prodl	equ	0xFF3
 16707                           intcon	equ	0xFF2
 16708                           intcon2	equ	0xFF1
 16709                           intcon3	equ	0xFF0
 16710                           indf0	equ	0xFEF
 16711                           postinc0	equ	0xFEE
 16712                           fsr0h	equ	0xFEA
 16713                           fsr0l	equ	0xFE9
 16714                           wreg	equ	0xFE8
 16715                           indf1	equ	0xFE7
 16716                           postinc1	equ	0xFE6
 16717                           postdec1	equ	0xFE5
 16718                           fsr1h	equ	0xFE2
 16719                           fsr1l	equ	0xFE1
 16720                           indf2	equ	0xFDF
 16721                           postinc2	equ	0xFDE
 16722                           postdec2	equ	0xFDD
 16723                           plusw2	equ	0xFDB
 16724                           fsr2h	equ	0xFDA
 16725                           fsr2l	equ	0xFD9
 16726                           status	equ	0xFD8
 16727                           
 16728 ;; *************** function _command *****************
 16729 ;; Defined at:
 16730 ;;		line 124 in file "bibliotecas/SDCard.c"
 16731 ;; Parameters:    Size  Location     Type
 16732 ;;  CMD             1    wreg     unsigned char 
 16733 ;;  arg             4    5[BANK0 ] unsigned long 
 16734 ;;  CRC             1    9[BANK0 ] unsigned char 
 16735 ;; Auto vars:     Size  Location     Type
 16736 ;;  CMD             1   10[BANK0 ] unsigned char 
 16737 ;;  argument        1   11[BANK0 ] unsigned char 
 16738 ;; Return value:  Size  Location     Type
 16739 ;;                  1    wreg      void 
 16740 ;; Registers used:
 16741 ;;		wreg, status,2, status,0, cstack
 16742 ;; Tracked objects:
 16743 ;;		On entry : 0/0
 16744 ;;		On exit  : 0/0
 16745 ;;		Unchanged: 0/0
 16746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16747 ;;      Params:         0       5       0       0       0       0       0       0       0
 16748 ;;      Locals:         0       2       0       0       0       0       0       0       0
 16749 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16750 ;;      Totals:         0       7       0       0       0       0       0       0       0
 16751 ;;Total ram usage:        7 bytes
 16752 ;; Hardware stack levels used:    1
 16753 ;; Hardware stack levels required when called:    5
 16754 ;; This function calls:
 16755 ;;		_dummy_clocks
 16756 ;;		_escreve_SPI
 16757 ;;		_wait_ready
 16758 ;; This function is called by:
 16759 ;;		_sdc_reset
 16760 ;;		_sdc_disk_initialize
 16761 ;;		_sdc_disk_read
 16762 ;;		_sdc_disk_write
 16763 ;; This function uses a non-reentrant model
 16764 ;;
 16765                           
 16766                           	psect	text61
 16767  004978                     __ptext61:
 16768                           	opt stack 0
 16769  004978                     _command:
 16770                           	opt stack 16
 16771                           
 16772                           ;incstack = 0
 16773                           ;command@CMD stored from wreg
 16774  004978  0100               	movlb	0	; () banked
 16775  00497A  6F6A               	movwf	command@CMD& (0+255),b
 16776                           
 16777                           ;SDCard.c: 126: unsigned char argument;
 16778                           ;SDCard.c: 128: if (wait_ready() != 0xFF)
 16779  00497C  ECEF  F027         	call	_wait_ready	;wreg free
 16780  004980  0AFF               	xorlw	255
 16781  004982  A4D8               	btfss	status,2,c
 16782  004984  D004               	goto	l242
 16783  004986  D008               	goto	u9900
 16784  004988                     
 16785                           ;SDCard.c: 131: {
 16786                           ;SDCard.c: 132: dummy_clocks(10);
 16787  004988  0E0A               	movlw	10
 16788  00498A  EC0B  F027         	call	_dummy_clocks
 16789  00498E                     l242:
 16790  00498E  ECEF  F027         	call	_wait_ready	;wreg free
 16791  004992  0AFF               	xorlw	255
 16792  004994  A4D8               	btfss	status,2,c
 16793  004996  D7F8               	goto	l243
 16794  004998                     u9900:
 16795                           
 16796                           ;SDCard.c: 133: }
 16797                           ;SDCard.c: 134: }
 16798                           ;SDCard.c: 135: escreve_SPI(0xFF);
 16799  004998  0EFF               	movlw	255
 16800  00499A  EC0C  F029         	call	_escreve_SPI
 16801                           
 16802                           ;SDCard.c: 136: escreve_SPI(CMD);
 16803  00499E  0100               	movlb	0	; () banked
 16804  0049A0  516A               	movf	command@CMD& (0+255),w,b
 16805  0049A2  EC0C  F029         	call	_escreve_SPI
 16806                           
 16807                           ;SDCard.c: 137: argument = arg>>24;
 16808  0049A6  C068  F06B         	movff	command@arg+3,command@argument
 16809                           
 16810                           ;SDCard.c: 138: escreve_SPI(argument);
 16811  0049AA  0100               	movlb	0	; () banked
 16812  0049AC  516B               	movf	command@argument& (0+255),w,b
 16813  0049AE  EC0C  F029         	call	_escreve_SPI
 16814                           
 16815                           ;SDCard.c: 139: argument = arg>>16;
 16816  0049B2  C067  F06B         	movff	command@arg+2,command@argument
 16817                           
 16818                           ;SDCard.c: 140: escreve_SPI(argument);
 16819  0049B6  0100               	movlb	0	; () banked
 16820  0049B8  516B               	movf	command@argument& (0+255),w,b
 16821  0049BA  EC0C  F029         	call	_escreve_SPI
 16822                           
 16823                           ;SDCard.c: 141: argument = arg>>8;
 16824  0049BE  C066  F06B         	movff	command@arg+1,command@argument
 16825                           
 16826                           ;SDCard.c: 142: escreve_SPI(argument);
 16827  0049C2  0100               	movlb	0	; () banked
 16828  0049C4  516B               	movf	command@argument& (0+255),w,b
 16829  0049C6  EC0C  F029         	call	_escreve_SPI
 16830                           
 16831                           ;SDCard.c: 143: argument = arg;
 16832  0049CA  C065  F06B         	movff	command@arg,command@argument
 16833                           
 16834                           ;SDCard.c: 144: escreve_SPI(argument);
 16835  0049CE  0100               	movlb	0	; () banked
 16836  0049D0  516B               	movf	command@argument& (0+255),w,b
 16837  0049D2  EC0C  F029         	call	_escreve_SPI
 16838                           
 16839                           ;SDCard.c: 145: escreve_SPI(CRC);
 16840  0049D6  0100               	movlb	0	; () banked
 16841  0049D8  5169               	movf	command@CRC& (0+255),w,b
 16842  0049DA  EC0C  F029         	call	_escreve_SPI
 16843  0049DE  0012               	return		;funcret
 16844  0049E0                     __end_of_command:
 16845                           	opt stack 0
 16846                           tosu	equ	0xFFF
 16847                           tosh	equ	0xFFE
 16848                           tosl	equ	0xFFD
 16849                           pclath	equ	0xFFA
 16850                           tblptru	equ	0xFF8
 16851                           tblptrh	equ	0xFF7
 16852                           tblptrl	equ	0xFF6
 16853                           tablat	equ	0xFF5
 16854                           prodh	equ	0xFF4
 16855                           prodl	equ	0xFF3
 16856                           intcon	equ	0xFF2
 16857                           intcon2	equ	0xFF1
 16858                           intcon3	equ	0xFF0
 16859                           indf0	equ	0xFEF
 16860                           postinc0	equ	0xFEE
 16861                           fsr0h	equ	0xFEA
 16862                           fsr0l	equ	0xFE9
 16863                           wreg	equ	0xFE8
 16864                           indf1	equ	0xFE7
 16865                           postinc1	equ	0xFE6
 16866                           postdec1	equ	0xFE5
 16867                           fsr1h	equ	0xFE2
 16868                           fsr1l	equ	0xFE1
 16869                           indf2	equ	0xFDF
 16870                           postinc2	equ	0xFDE
 16871                           postdec2	equ	0xFDD
 16872                           plusw2	equ	0xFDB
 16873                           fsr2h	equ	0xFDA
 16874                           fsr2l	equ	0xFD9
 16875                           status	equ	0xFD8
 16876                           
 16877 ;; *************** function _wait_ready *****************
 16878 ;; Defined at:
 16879 ;;		line 104 in file "bibliotecas/SDCard.c"
 16880 ;; Parameters:    Size  Location     Type
 16881 ;;		None
 16882 ;; Auto vars:     Size  Location     Type
 16883 ;;  msg            10    0        unsigned char [10]
 16884 ;;  timeout         4    0[BANK0 ] unsigned long 
 16885 ;;  res             1    4[BANK0 ] unsigned char 
 16886 ;; Return value:  Size  Location     Type
 16887 ;;                  1    wreg      unsigned char 
 16888 ;; Registers used:
 16889 ;;		wreg, status,2, status,0, cstack
 16890 ;; Tracked objects:
 16891 ;;		On entry : 0/0
 16892 ;;		On exit  : 0/0
 16893 ;;		Unchanged: 0/0
 16894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16895 ;;      Params:         0       0       0       0       0       0       0       0       0
 16896 ;;      Locals:         0       5       0       0       0       0       0       0       0
 16897 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16898 ;;      Totals:         0       5       0       0       0       0       0       0       0
 16899 ;;Total ram usage:        5 bytes
 16900 ;; Hardware stack levels used:    1
 16901 ;; Hardware stack levels required when called:    4
 16902 ;; This function calls:
 16903 ;;		_leitura_SPI
 16904 ;; This function is called by:
 16905 ;;		_command
 16906 ;; This function uses a non-reentrant model
 16907 ;;
 16908                           
 16909                           	psect	text62
 16910  004FDE                     __ptext62:
 16911                           	opt stack 0
 16912  004FDE                     _wait_ready:
 16913                           	opt stack 16
 16914                           
 16915                           ;SDCard.c: 106: BYTE res;
 16916                           ;SDCard.c: 107: DWORD timeout = 0x7FFF;
 16917                           
 16918                           ;incstack = 0
 16919  004FDE  0EFF               	movlw	255
 16920  004FE0  0100               	movlb	0	; () banked
 16921  004FE2  6F60               	movwf	wait_ready@timeout& (0+255),b
 16922  004FE4  0E7F               	movlw	127
 16923  004FE6  6F61               	movwf	(wait_ready@timeout+1)& (0+255),b
 16924  004FE8  0E00               	movlw	0
 16925  004FEA  6F62               	movwf	(wait_ready@timeout+2)& (0+255),b
 16926  004FEC  0E00               	movlw	0
 16927  004FEE  6F63               	movwf	(wait_ready@timeout+3)& (0+255),b
 16928  004FF0                     
 16929                           ; BSR set to: 0
 16930                           ;SDCard.c: 111: res = leitura_SPI();
 16931                           
 16932                           ; BSR set to: 0
 16933  004FF0  EC55  F029         	call	_leitura_SPI	;wreg free
 16934  004FF4  0100               	movlb	0	; () banked
 16935  004FF6  6F64               	movwf	wait_ready@res& (0+255),b
 16936                           
 16937                           ; BSR set to: 0
 16938                           ;SDCard.c: 112: while ((res != 0xFF) && (--timeout));
 16939  004FF8  2964               	incf	wait_ready@res& (0+255),w,b
 16940  004FFA  B4D8               	btfsc	status,2,c
 16941  004FFC  D00B               	goto	u9880
 16942                           
 16943                           ; BSR set to: 0
 16944  004FFE  0760               	decf	wait_ready@timeout& (0+255),f,b
 16945  005000  0E00               	movlw	0
 16946  005002  5B61               	subwfb	(wait_ready@timeout+1)& (0+255),f,b
 16947  005004  5B62               	subwfb	(wait_ready@timeout+2)& (0+255),f,b
 16948  005006  5B63               	subwfb	(wait_ready@timeout+3)& (0+255),f,b
 16949  005008  5160               	movf	wait_ready@timeout& (0+255),w,b
 16950  00500A  1161               	iorwf	(wait_ready@timeout+1)& (0+255),w,b
 16951  00500C  1162               	iorwf	(wait_ready@timeout+2)& (0+255),w,b
 16952  00500E  1163               	iorwf	(wait_ready@timeout+3)& (0+255),w,b
 16953  005010  A4D8               	btfss	status,2,c
 16954  005012  D7EE               	goto	l234
 16955  005014                     u9880:
 16956                           
 16957                           ; BSR set to: 0
 16958                           ;SDCard.c: 114: return res;
 16959                           
 16960                           ; BSR set to: 0
 16961                           
 16962                           ; BSR set to: 0
 16963  005014  5164               	movf	wait_ready@res& (0+255),w,b
 16964  005016  0012               	return	
 16965  005018                     __end_of_wait_ready:
 16966                           	opt stack 0
 16967                           tosu	equ	0xFFF
 16968                           tosh	equ	0xFFE
 16969                           tosl	equ	0xFFD
 16970                           pclath	equ	0xFFA
 16971                           tblptru	equ	0xFF8
 16972                           tblptrh	equ	0xFF7
 16973                           tblptrl	equ	0xFF6
 16974                           tablat	equ	0xFF5
 16975                           prodh	equ	0xFF4
 16976                           prodl	equ	0xFF3
 16977                           intcon	equ	0xFF2
 16978                           intcon2	equ	0xFF1
 16979                           intcon3	equ	0xFF0
 16980                           indf0	equ	0xFEF
 16981                           postinc0	equ	0xFEE
 16982                           fsr0h	equ	0xFEA
 16983                           fsr0l	equ	0xFE9
 16984                           wreg	equ	0xFE8
 16985                           indf1	equ	0xFE7
 16986                           postinc1	equ	0xFE6
 16987                           postdec1	equ	0xFE5
 16988                           fsr1h	equ	0xFE2
 16989                           fsr1l	equ	0xFE1
 16990                           indf2	equ	0xFDF
 16991                           postinc2	equ	0xFDE
 16992                           postdec2	equ	0xFDD
 16993                           plusw2	equ	0xFDB
 16994                           fsr2h	equ	0xFDA
 16995                           fsr2l	equ	0xFD9
 16996                           status	equ	0xFD8
 16997                           
 16998 ;; *************** function _escreve_SPI *****************
 16999 ;; Defined at:
 17000 ;;		line 98 in file "bibliotecas/SPI.c"
 17001 ;; Parameters:    Size  Location     Type
 17002 ;;  dado            1    wreg     unsigned char 
 17003 ;; Auto vars:     Size  Location     Type
 17004 ;;  dado            1    1[BANK0 ] unsigned char 
 17005 ;;  TempVar         1    0[BANK0 ] unsigned char 
 17006 ;; Return value:  Size  Location     Type
 17007 ;;                  1    wreg      void 
 17008 ;; Registers used:
 17009 ;;		wreg
 17010 ;; Tracked objects:
 17011 ;;		On entry : 0/0
 17012 ;;		On exit  : 0/0
 17013 ;;		Unchanged: 0/0
 17014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17015 ;;      Params:         0       0       0       0       0       0       0       0       0
 17016 ;;      Locals:         0       2       0       0       0       0       0       0       0
 17017 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17018 ;;      Totals:         0       2       0       0       0       0       0       0       0
 17019 ;;Total ram usage:        2 bytes
 17020 ;; Hardware stack levels used:    1
 17021 ;; Hardware stack levels required when called:    3
 17022 ;; This function calls:
 17023 ;;		Nothing
 17024 ;; This function is called by:
 17025 ;;		_proceed
 17026 ;;		_command
 17027 ;;		_sdc_disk_write
 17028 ;; This function uses a non-reentrant model
 17029 ;;
 17030                           
 17031                           	psect	text63
 17032  005218                     __ptext63:
 17033                           	opt stack 0
 17034  005218                     _escreve_SPI:
 17035                           	opt stack 17
 17036                           
 17037                           ; BSR set to: 0
 17038                           ;incstack = 0
 17039                           ;escreve_SPI@dado stored from wreg
 17040  005218  0100               	movlb	0	; () banked
 17041  00521A  6F61               	movwf	escreve_SPI@dado& (0+255),b
 17042                           
 17043                           ;SPI.c: 100: unsigned char TempVar;
 17044                           ;SPI.c: 101: TempVar = SSPBUF;
 17045  00521C  CFC9 F060          	movff	4041,escreve_SPI@TempVar	;volatile
 17046                           
 17047                           ;SPI.c: 102: PIR1bits.SSPIF = 0;
 17048  005220  969E               	bcf	3998,3,c	;volatile
 17049                           
 17050                           ;SPI.c: 104: SSPBUF = dado;
 17051  005222  C061  FFC9         	movff	escreve_SPI@dado,4041	;volatile
 17052  005226  B69E               	btfsc	3998,3,c	;volatile
 17053  005228  0012               	return	
 17054  00522A  D7FD               	goto	l317
 17055  00522C                     __end_of_escreve_SPI:
 17056                           	opt stack 0
 17057                           tosu	equ	0xFFF
 17058                           tosh	equ	0xFFE
 17059                           tosl	equ	0xFFD
 17060                           pclath	equ	0xFFA
 17061                           tblptru	equ	0xFF8
 17062                           tblptrh	equ	0xFF7
 17063                           tblptrl	equ	0xFF6
 17064                           tablat	equ	0xFF5
 17065                           prodh	equ	0xFF4
 17066                           prodl	equ	0xFF3
 17067                           intcon	equ	0xFF2
 17068                           intcon2	equ	0xFF1
 17069                           intcon3	equ	0xFF0
 17070                           indf0	equ	0xFEF
 17071                           postinc0	equ	0xFEE
 17072                           fsr0h	equ	0xFEA
 17073                           fsr0l	equ	0xFE9
 17074                           wreg	equ	0xFE8
 17075                           indf1	equ	0xFE7
 17076                           postinc1	equ	0xFE6
 17077                           postdec1	equ	0xFE5
 17078                           fsr1h	equ	0xFE2
 17079                           fsr1l	equ	0xFE1
 17080                           indf2	equ	0xFDF
 17081                           postinc2	equ	0xFDE
 17082                           postdec2	equ	0xFDD
 17083                           plusw2	equ	0xFDB
 17084                           fsr2h	equ	0xFDA
 17085                           fsr2l	equ	0xFD9
 17086                           status	equ	0xFD8
 17087                           
 17088 ;; *************** function _dummy_clocks *****************
 17089 ;; Defined at:
 17090 ;;		line 73 in file "bibliotecas/SDCard.c"
 17091 ;; Parameters:    Size  Location     Type
 17092 ;;  n               1    wreg     unsigned char 
 17093 ;; Auto vars:     Size  Location     Type
 17094 ;;  n               1    2[BANK0 ] unsigned char 
 17095 ;;  i               2    3[BANK0 ] unsigned int 
 17096 ;; Return value:  Size  Location     Type
 17097 ;;                  1    wreg      void 
 17098 ;; Registers used:
 17099 ;;		wreg, status,2, status,0, cstack
 17100 ;; Tracked objects:
 17101 ;;		On entry : 0/0
 17102 ;;		On exit  : 0/0
 17103 ;;		Unchanged: 0/0
 17104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17105 ;;      Params:         0       0       0       0       0       0       0       0       0
 17106 ;;      Locals:         0       3       0       0       0       0       0       0       0
 17107 ;;      Temps:          0       2       0       0       0       0       0       0       0
 17108 ;;      Totals:         0       5       0       0       0       0       0       0       0
 17109 ;;Total ram usage:        5 bytes
 17110 ;; Hardware stack levels used:    1
 17111 ;; Hardware stack levels required when called:    4
 17112 ;; This function calls:
 17113 ;;		_leitura_SPI
 17114 ;; This function is called by:
 17115 ;;		_command
 17116 ;;		_sdc_disk_initialize
 17117 ;;		_sdc_disk_read
 17118 ;;		_sdc_disk_write
 17119 ;; This function uses a non-reentrant model
 17120 ;;
 17121                           
 17122                           	psect	text64
 17123  004E16                     __ptext64:
 17124                           	opt stack 0
 17125  004E16                     _dummy_clocks:
 17126                           	opt stack 17
 17127                           
 17128                           ;incstack = 0
 17129                           ;dummy_clocks@n stored from wreg
 17130  004E16  0100               	movlb	0	; () banked
 17131  004E18  6F62               	movwf	dummy_clocks@n& (0+255),b
 17132                           
 17133                           ;SDCard.c: 75: unsigned int i;
 17134                           ;SDCard.c: 76: _delay((unsigned long)((1)*(48000000/4000.0)));
 17135  004E1A  0E10               	movlw	16
 17136  004E1C  0100               	movlb	0	; () banked
 17137  004E1E  6F60               	movwf	??_dummy_clocks& (0+255),b
 17138  004E20  0E94               	movlw	148
 17139  004E22                     u14287:
 17140  004E22  2EE8               	decfsz	wreg,f,c
 17141  004E24  D7FE               	bra	u14287
 17142  004E26  2F60               	decfsz	??_dummy_clocks& (0+255),f,b
 17143  004E28  D7FC               	bra	u14287
 17144  004E2A  F000               	nop	
 17145                           
 17146                           ;SDCard.c: 77: for(i=0;i<n;i++)
 17147  004E2C  0E00               	movlw	0
 17148  004E2E  0100               	movlb	0	; () banked
 17149  004E30  6F64               	movwf	(dummy_clocks@i+1)& (0+255),b
 17150  004E32  0E00               	movlw	0
 17151  004E34  6F63               	movwf	dummy_clocks@i& (0+255),b
 17152  004E36  D007               	goto	l225
 17153  004E38                     l226:
 17154                           
 17155                           ; BSR set to: 0
 17156                           ;SDCard.c: 78: {
 17157                           ;SDCard.c: 79: LATBbits.LATB4 = 1;
 17158  004E38  888A               	bsf	3978,4,c	;volatile
 17159                           
 17160                           ; BSR set to: 0
 17161                           ;SDCard.c: 80: leitura_SPI();
 17162  004E3A  EC55  F029         	call	_leitura_SPI	;wreg free
 17163                           
 17164                           ;SDCard.c: 81: LATBbits.LATB4 = 0;
 17165  004E3E  988A               	bcf	3978,4,c	;volatile
 17166  004E40  0100               	movlb	0	; () banked
 17167  004E42  4B63               	infsnz	dummy_clocks@i& (0+255),f,b
 17168  004E44  2B64               	incf	(dummy_clocks@i+1)& (0+255),f,b
 17169  004E46                     l225:
 17170                           
 17171                           ; BSR set to: 0
 17172                           
 17173                           ; BSR set to: 0
 17174  004E46  5162               	movf	dummy_clocks@n& (0+255),w,b
 17175  004E48  6F60               	movwf	??_dummy_clocks& (0+255),b
 17176  004E4A  6B61               	clrf	(??_dummy_clocks+1)& (0+255),b
 17177  004E4C  5160               	movf	??_dummy_clocks& (0+255),w,b
 17178  004E4E  5D63               	subwf	dummy_clocks@i& (0+255),w,b
 17179  004E50  5161               	movf	(??_dummy_clocks+1)& (0+255),w,b
 17180  004E52  5964               	subwfb	(dummy_clocks@i+1)& (0+255),w,b
 17181  004E54  B0D8               	btfsc	status,0,c
 17182  004E56  0012               	return	
 17183  004E58  D7EF               	goto	l226
 17184  004E5A                     __end_of_dummy_clocks:
 17185                           	opt stack 0
 17186                           tosu	equ	0xFFF
 17187                           tosh	equ	0xFFE
 17188                           tosl	equ	0xFFD
 17189                           pclath	equ	0xFFA
 17190                           tblptru	equ	0xFF8
 17191                           tblptrh	equ	0xFF7
 17192                           tblptrl	equ	0xFF6
 17193                           tablat	equ	0xFF5
 17194                           prodh	equ	0xFF4
 17195                           prodl	equ	0xFF3
 17196                           intcon	equ	0xFF2
 17197                           intcon2	equ	0xFF1
 17198                           intcon3	equ	0xFF0
 17199                           indf0	equ	0xFEF
 17200                           postinc0	equ	0xFEE
 17201                           fsr0h	equ	0xFEA
 17202                           fsr0l	equ	0xFE9
 17203                           wreg	equ	0xFE8
 17204                           indf1	equ	0xFE7
 17205                           postinc1	equ	0xFE6
 17206                           postdec1	equ	0xFE5
 17207                           fsr1h	equ	0xFE2
 17208                           fsr1l	equ	0xFE1
 17209                           indf2	equ	0xFDF
 17210                           postinc2	equ	0xFDE
 17211                           postdec2	equ	0xFDD
 17212                           plusw2	equ	0xFDB
 17213                           fsr2h	equ	0xFDA
 17214                           fsr2l	equ	0xFD9
 17215                           status	equ	0xFD8
 17216                           
 17217 ;; *************** function _leitura_SPI *****************
 17218 ;; Defined at:
 17219 ;;		line 83 in file "bibliotecas/SPI.c"
 17220 ;; Parameters:    Size  Location     Type
 17221 ;;		None
 17222 ;; Auto vars:     Size  Location     Type
 17223 ;;		None
 17224 ;; Return value:  Size  Location     Type
 17225 ;;                  1    wreg      unsigned char 
 17226 ;; Registers used:
 17227 ;;		wreg, status,2
 17228 ;; Tracked objects:
 17229 ;;		On entry : 0/0
 17230 ;;		On exit  : 0/0
 17231 ;;		Unchanged: 0/0
 17232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17233 ;;      Params:         0       0       0       0       0       0       0       0       0
 17234 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17235 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17236 ;;      Totals:         0       0       0       0       0       0       0       0       0
 17237 ;;Total ram usage:        0 bytes
 17238 ;; Hardware stack levels used:    1
 17239 ;; Hardware stack levels required when called:    3
 17240 ;; This function calls:
 17241 ;;		Nothing
 17242 ;; This function is called by:
 17243 ;;		_response
 17244 ;;		_dummy_clocks
 17245 ;;		_wait_ready
 17246 ;;		_sdc_disk_write
 17247 ;; This function uses a non-reentrant model
 17248 ;;
 17249                           
 17250                           	psect	text65
 17251  0052AA                     __ptext65:
 17252                           	opt stack 0
 17253  0052AA                     _leitura_SPI:
 17254                           	opt stack 17
 17255                           
 17256                           ;SPI.c: 85: SSPBUF = 0xFF;
 17257                           
 17258                           ; BSR set to: 0
 17259                           ;incstack = 0
 17260  0052AA  68C9               	setf	4041,c	;volatile
 17261                           
 17262                           ;SPI.c: 86: SSPSTATbits.BF = 0;
 17263  0052AC  90C7               	bcf	4039,0,c	;volatile
 17264  0052AE  A0C7               	btfss	4039,0,c	;volatile
 17265  0052B0  D7FE               	goto	l311
 17266                           
 17267                           ;SPI.c: 88: return (SSPBUF);
 17268  0052B2  50C9               	movf	4041,w,c	;volatile
 17269  0052B4  0012               	return	
 17270  0052B6                     __end_of_leitura_SPI:
 17271                           	opt stack 0
 17272                           tosu	equ	0xFFF
 17273                           tosh	equ	0xFFE
 17274                           tosl	equ	0xFFD
 17275                           pclath	equ	0xFFA
 17276                           tblptru	equ	0xFF8
 17277                           tblptrh	equ	0xFF7
 17278                           tblptrl	equ	0xFF6
 17279                           tablat	equ	0xFF5
 17280                           prodh	equ	0xFF4
 17281                           prodl	equ	0xFF3
 17282                           intcon	equ	0xFF2
 17283                           intcon2	equ	0xFF1
 17284                           intcon3	equ	0xFF0
 17285                           indf0	equ	0xFEF
 17286                           postinc0	equ	0xFEE
 17287                           fsr0h	equ	0xFEA
 17288                           fsr0l	equ	0xFE9
 17289                           wreg	equ	0xFE8
 17290                           indf1	equ	0xFE7
 17291                           postinc1	equ	0xFE6
 17292                           postdec1	equ	0xFE5
 17293                           fsr1h	equ	0xFE2
 17294                           fsr1l	equ	0xFE1
 17295                           indf2	equ	0xFDF
 17296                           postinc2	equ	0xFDE
 17297                           postdec2	equ	0xFDD
 17298                           plusw2	equ	0xFDB
 17299                           fsr2h	equ	0xFDA
 17300                           fsr2l	equ	0xFD9
 17301                           status	equ	0xFD8
 17302                           
 17303 ;; *************** function _disk_ioctl *****************
 17304 ;; Defined at:
 17305 ;;		line 198 in file "bibliotecas/diskio.c"
 17306 ;; Parameters:    Size  Location     Type
 17307 ;;  pdrv            1    wreg     unsigned char 
 17308 ;;  cmd             1    0[BANK0 ] unsigned char 
 17309 ;;  buff            2    1[BANK0 ] PTR void 
 17310 ;;		 -> NULL(0), 
 17311 ;; Auto vars:     Size  Location     Type
 17312 ;;  pdrv            1    3[BANK0 ] unsigned char 
 17313 ;;  result          2    0        int 
 17314 ;;  res             1    4[BANK0 ] enum E25
 17315 ;; Return value:  Size  Location     Type
 17316 ;;                  1    wreg      enum E25
 17317 ;; Registers used:
 17318 ;;		wreg, status,2, status,0
 17319 ;; Tracked objects:
 17320 ;;		On entry : 0/0
 17321 ;;		On exit  : 0/0
 17322 ;;		Unchanged: 0/0
 17323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17324 ;;      Params:         0       3       0       0       0       0       0       0       0
 17325 ;;      Locals:         0       2       0       0       0       0       0       0       0
 17326 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17327 ;;      Totals:         0       5       0       0       0       0       0       0       0
 17328 ;;Total ram usage:        5 bytes
 17329 ;; Hardware stack levels used:    1
 17330 ;; Hardware stack levels required when called:    3
 17331 ;; This function calls:
 17332 ;;		Nothing
 17333 ;; This function is called by:
 17334 ;;		_sync
 17335 ;; This function uses a non-reentrant model
 17336 ;;
 17337                           
 17338                           	psect	text66
 17339  0050D2                     __ptext66:
 17340                           	opt stack 0
 17341  0050D2                     _disk_ioctl:
 17342                           	opt stack 22
 17343                           
 17344                           ;incstack = 0
 17345                           ;disk_ioctl@pdrv stored from wreg
 17346  0050D2  0100               	movlb	0	; () banked
 17347  0050D4  6F63               	movwf	disk_ioctl@pdrv& (0+255),b
 17348                           
 17349                           ;diskio.c: 204: DRESULT res;
 17350                           ;diskio.c: 205: int result;
 17351                           ;diskio.c: 207: switch (pdrv) {
 17352  0050D6  D006               	goto	l386
 17353  0050D8                     l387:
 17354                           
 17355                           ; BSR set to: 0
 17356                           ;diskio.c: 212: return res;
 17357  0050D8  5164               	movf	disk_ioctl@res& (0+255),w,b
 17358  0050DA  0012               	return	
 17359  0050DC                     l389:
 17360                           
 17361                           ; BSR set to: 0
 17362                           ;diskio.c: 218: return res;
 17363  0050DC  5164               	movf	disk_ioctl@res& (0+255),w,b
 17364  0050DE  0012               	return	
 17365  0050E0                     l390:
 17366                           
 17367                           ; BSR set to: 0
 17368                           ;diskio.c: 224: return res;
 17369  0050E0  5164               	movf	disk_ioctl@res& (0+255),w,b
 17370  0050E2  0012               	return	
 17371  0050E4                     l386:
 17372                           
 17373                           ; BSR set to: 0
 17374  0050E4  0100               	movlb	0	; () banked
 17375  0050E6  5163               	movf	disk_ioctl@pdrv& (0+255),w,b
 17376                           
 17377                           ; Switch size 1, requested type "space"
 17378                           ; Number of cases is 3, Range of values is 0 to 2
 17379                           ; switch strategies available:
 17380                           ; Name         Instructions Cycles
 17381                           ; simple_byte           10     6 (average)
 17382                           ;	Chosen strategy is simple_byte
 17383  0050E8  0A00               	xorlw	0	; case 0
 17384  0050EA  B4D8               	btfsc	status,2,c
 17385  0050EC  D7F5               	goto	l387
 17386  0050EE  0A01               	xorlw	1	; case 1
 17387  0050F0  B4D8               	btfsc	status,2,c
 17388  0050F2  D7F4               	goto	l389
 17389  0050F4  0A03               	xorlw	3	; case 2
 17390  0050F6  B4D8               	btfsc	status,2,c
 17391  0050F8  D7F3               	goto	l390
 17392                           
 17393                           ; BSR set to: 0
 17394                           ;diskio.c: 227: return RES_PARERR;
 17395                           
 17396                           ; BSR set to: 0
 17397  0050FA  0E04               	movlw	4
 17398  0050FC  0012               	return	
 17399  0050FE                     __end_of_disk_ioctl:
 17400                           	opt stack 0
 17401                           tosu	equ	0xFFF
 17402                           tosh	equ	0xFFE
 17403                           tosl	equ	0xFFD
 17404                           pclath	equ	0xFFA
 17405                           tblptru	equ	0xFF8
 17406                           tblptrh	equ	0xFF7
 17407                           tblptrl	equ	0xFF6
 17408                           tablat	equ	0xFF5
 17409                           prodh	equ	0xFF4
 17410                           prodl	equ	0xFF3
 17411                           intcon	equ	0xFF2
 17412                           intcon2	equ	0xFF1
 17413                           intcon3	equ	0xFF0
 17414                           indf0	equ	0xFEF
 17415                           postinc0	equ	0xFEE
 17416                           fsr0h	equ	0xFEA
 17417                           fsr0l	equ	0xFE9
 17418                           wreg	equ	0xFE8
 17419                           indf1	equ	0xFE7
 17420                           postinc1	equ	0xFE6
 17421                           postdec1	equ	0xFE5
 17422                           fsr1h	equ	0xFE2
 17423                           fsr1l	equ	0xFE1
 17424                           indf2	equ	0xFDF
 17425                           postinc2	equ	0xFDE
 17426                           postdec2	equ	0xFDD
 17427                           plusw2	equ	0xFDB
 17428                           fsr2h	equ	0xFDA
 17429                           fsr2l	equ	0xFD9
 17430                           status	equ	0xFD8
 17431                           
 17432 ;; *************** function _get_fattime *****************
 17433 ;; Defined at:
 17434 ;;		line 809 in file "bibliotecas/tff.c"
 17435 ;; Parameters:    Size  Location     Type
 17436 ;;		None
 17437 ;; Auto vars:     Size  Location     Type
 17438 ;;  f_time          9   42[BANK0 ] struct .
 17439 ;; Return value:  Size  Location     Type
 17440 ;;                  4    0[BANK0 ] unsigned long 
 17441 ;; Registers used:
 17442 ;;		wreg, status,2, status,0
 17443 ;; Tracked objects:
 17444 ;;		On entry : 0/0
 17445 ;;		On exit  : 0/0
 17446 ;;		Unchanged: 0/0
 17447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17448 ;;      Params:         0       4       0       0       0       0       0       0       0
 17449 ;;      Locals:         0       9       0       0       0       0       0       0       0
 17450 ;;      Temps:          0      38       0       0       0       0       0       0       0
 17451 ;;      Totals:         0      51       0       0       0       0       0       0       0
 17452 ;;Total ram usage:       51 bytes
 17453 ;; Hardware stack levels used:    1
 17454 ;; Hardware stack levels required when called:    3
 17455 ;; This function calls:
 17456 ;;		Nothing
 17457 ;; This function is called by:
 17458 ;;		_f_open
 17459 ;;		_f_sync
 17460 ;; This function uses a non-reentrant model
 17461 ;;
 17462                           
 17463                           	psect	text67
 17464  003D28                     __ptext67:
 17465                           	opt stack 0
 17466  003D28                     _get_fattime:
 17467                           	opt stack 24
 17468                           
 17469                           ;tff.c: 811: fat_time f_time;
 17470                           ;tff.c: 813: return (DWORD)(f_time.ano ) << 25 |
 17471                           ;tff.c: 814: (DWORD)(f_time.mes) << 21 |
 17472                           ;tff.c: 815: (DWORD)(f_time.mes) << 16 |
 17473                           ;tff.c: 816: (DWORD)(f_time.hora) << 11 |
 17474                           ;tff.c: 817: (DWORD)(f_time.min) << 5 |
 17475                           ;tff.c: 818: (DWORD)(f_time.seg) >> 1;
 17476                           
 17477                           ; BSR set to: 0
 17478                           ;incstack = 0
 17479  003D28  90D8               	bcf	status,0,c
 17480  003D2A  0100               	movlb	0	; () banked
 17481  003D2C  318F               	rrcf	(get_fattime@f_time+5)& (0+255),w,b
 17482  003D2E  6F65               	movwf	(??_get_fattime+1)& (0+255),b
 17483  003D30  318E               	rrcf	(get_fattime@f_time+4)& (0+255),w,b
 17484  003D32  6F64               	movwf	??_get_fattime& (0+255),b
 17485  003D34  518C               	movf	(get_fattime@f_time+2)& (0+255),w,b
 17486  003D36  6F66               	movwf	(??_get_fattime+2)& (0+255),b
 17487  003D38  518D               	movf	(get_fattime@f_time+3)& (0+255),w,b
 17488  003D3A  6F67               	movwf	(??_get_fattime+3)& (0+255),b
 17489  003D3C  6B68               	clrf	(??_get_fattime+4)& (0+255),b
 17490  003D3E  6B69               	clrf	(??_get_fattime+5)& (0+255),b
 17491  003D40  0E05               	movlw	5
 17492  003D42                     u11835:
 17493  003D42  90D8               	bcf	status,0,c
 17494  003D44  3766               	rlcf	(??_get_fattime+2)& (0+255),f,b
 17495  003D46  3767               	rlcf	(??_get_fattime+3)& (0+255),f,b
 17496  003D48  3768               	rlcf	(??_get_fattime+4)& (0+255),f,b
 17497  003D4A  3769               	rlcf	(??_get_fattime+5)& (0+255),f,b
 17498  003D4C  2EE8               	decfsz	wreg,f,c
 17499  003D4E  D7F9               	goto	u11835
 17500  003D50  518A               	movf	get_fattime@f_time& (0+255),w,b
 17501  003D52  6F6A               	movwf	(??_get_fattime+6)& (0+255),b
 17502  003D54  518B               	movf	(get_fattime@f_time+1)& (0+255),w,b
 17503  003D56  6F6B               	movwf	(??_get_fattime+7)& (0+255),b
 17504  003D58  6B6C               	clrf	(??_get_fattime+8)& (0+255),b
 17505  003D5A  6B6D               	clrf	(??_get_fattime+9)& (0+255),b
 17506  003D5C  0E0B               	movlw	11
 17507  003D5E                     u11845:
 17508  003D5E  90D8               	bcf	status,0,c
 17509  003D60  376A               	rlcf	(??_get_fattime+6)& (0+255),f,b
 17510  003D62  376B               	rlcf	(??_get_fattime+7)& (0+255),f,b
 17511  003D64  376C               	rlcf	(??_get_fattime+8)& (0+255),f,b
 17512  003D66  376D               	rlcf	(??_get_fattime+9)& (0+255),f,b
 17513  003D68  2EE8               	decfsz	wreg,f,c
 17514  003D6A  D7F9               	goto	u11845
 17515  003D6C  C091  F06E         	movff	get_fattime@f_time+7,??_get_fattime+10
 17516  003D70  6B6F               	clrf	(??_get_fattime+11)& (0+255),b
 17517  003D72  6B70               	clrf	(??_get_fattime+12)& (0+255),b
 17518  003D74  6B71               	clrf	(??_get_fattime+13)& (0+255),b
 17519  003D76  C06F  F071         	movff	??_get_fattime+11,??_get_fattime+13
 17520  003D7A  C06E  F070         	movff	??_get_fattime+10,??_get_fattime+12
 17521  003D7E  6B6F               	clrf	(??_get_fattime+11)& (0+255),b
 17522  003D80  6B6E               	clrf	(??_get_fattime+10)& (0+255),b
 17523  003D82  C091  F072         	movff	get_fattime@f_time+7,??_get_fattime+14
 17524  003D86  6B73               	clrf	(??_get_fattime+15)& (0+255),b
 17525  003D88  6B74               	clrf	(??_get_fattime+16)& (0+255),b
 17526  003D8A  6B75               	clrf	(??_get_fattime+17)& (0+255),b
 17527  003D8C  0E15               	movlw	21
 17528  003D8E                     u11855:
 17529  003D8E  90D8               	bcf	status,0,c
 17530  003D90  3772               	rlcf	(??_get_fattime+14)& (0+255),f,b
 17531  003D92  3773               	rlcf	(??_get_fattime+15)& (0+255),f,b
 17532  003D94  3774               	rlcf	(??_get_fattime+16)& (0+255),f,b
 17533  003D96  3775               	rlcf	(??_get_fattime+17)& (0+255),f,b
 17534  003D98  2EE8               	decfsz	wreg,f,c
 17535  003D9A  D7F9               	goto	u11855
 17536  003D9C  C092  F076         	movff	get_fattime@f_time+8,??_get_fattime+18
 17537  003DA0  6B77               	clrf	(??_get_fattime+19)& (0+255),b
 17538  003DA2  6B78               	clrf	(??_get_fattime+20)& (0+255),b
 17539  003DA4  6B79               	clrf	(??_get_fattime+21)& (0+255),b
 17540  003DA6  0E19               	movlw	25
 17541  003DA8                     u11865:
 17542  003DA8  90D8               	bcf	status,0,c
 17543  003DAA  3776               	rlcf	(??_get_fattime+18)& (0+255),f,b
 17544  003DAC  3777               	rlcf	(??_get_fattime+19)& (0+255),f,b
 17545  003DAE  3778               	rlcf	(??_get_fattime+20)& (0+255),f,b
 17546  003DB0  3779               	rlcf	(??_get_fattime+21)& (0+255),f,b
 17547  003DB2  2EE8               	decfsz	wreg,f,c
 17548  003DB4  D7F9               	goto	u11865
 17549  003DB6  5172               	movf	(??_get_fattime+14)& (0+255),w,b
 17550  003DB8  1176               	iorwf	(??_get_fattime+18)& (0+255),w,b
 17551  003DBA  6F7A               	movwf	(??_get_fattime+22)& (0+255),b
 17552  003DBC  5173               	movf	(??_get_fattime+15)& (0+255),w,b
 17553  003DBE  1177               	iorwf	(??_get_fattime+19)& (0+255),w,b
 17554  003DC0  6F7B               	movwf	(??_get_fattime+23)& (0+255),b
 17555  003DC2  5174               	movf	(??_get_fattime+16)& (0+255),w,b
 17556  003DC4  1178               	iorwf	(??_get_fattime+20)& (0+255),w,b
 17557  003DC6  6F7C               	movwf	(??_get_fattime+24)& (0+255),b
 17558  003DC8  5175               	movf	(??_get_fattime+17)& (0+255),w,b
 17559  003DCA  1179               	iorwf	(??_get_fattime+21)& (0+255),w,b
 17560  003DCC  6F7D               	movwf	(??_get_fattime+25)& (0+255),b
 17561  003DCE  516E               	movf	(??_get_fattime+10)& (0+255),w,b
 17562  003DD0  117A               	iorwf	(??_get_fattime+22)& (0+255),w,b
 17563  003DD2  6F7E               	movwf	(??_get_fattime+26)& (0+255),b
 17564  003DD4  516F               	movf	(??_get_fattime+11)& (0+255),w,b
 17565  003DD6  117B               	iorwf	(??_get_fattime+23)& (0+255),w,b
 17566  003DD8  6F7F               	movwf	(??_get_fattime+27)& (0+255),b
 17567  003DDA  5170               	movf	(??_get_fattime+12)& (0+255),w,b
 17568  003DDC  117C               	iorwf	(??_get_fattime+24)& (0+255),w,b
 17569  003DDE  6F80               	movwf	(??_get_fattime+28)& (0+255),b
 17570  003DE0  5171               	movf	(??_get_fattime+13)& (0+255),w,b
 17571  003DE2  117D               	iorwf	(??_get_fattime+25)& (0+255),w,b
 17572  003DE4  6F81               	movwf	(??_get_fattime+29)& (0+255),b
 17573  003DE6  516A               	movf	(??_get_fattime+6)& (0+255),w,b
 17574  003DE8  117E               	iorwf	(??_get_fattime+26)& (0+255),w,b
 17575  003DEA  6F82               	movwf	(??_get_fattime+30)& (0+255),b
 17576  003DEC  516B               	movf	(??_get_fattime+7)& (0+255),w,b
 17577  003DEE  117F               	iorwf	(??_get_fattime+27)& (0+255),w,b
 17578  003DF0  6F83               	movwf	(??_get_fattime+31)& (0+255),b
 17579  003DF2  516C               	movf	(??_get_fattime+8)& (0+255),w,b
 17580  003DF4  1180               	iorwf	(??_get_fattime+28)& (0+255),w,b
 17581  003DF6  6F84               	movwf	(??_get_fattime+32)& (0+255),b
 17582  003DF8  516D               	movf	(??_get_fattime+9)& (0+255),w,b
 17583  003DFA  1181               	iorwf	(??_get_fattime+29)& (0+255),w,b
 17584  003DFC  6F85               	movwf	(??_get_fattime+33)& (0+255),b
 17585  003DFE  5166               	movf	(??_get_fattime+2)& (0+255),w,b
 17586  003E00  1182               	iorwf	(??_get_fattime+30)& (0+255),w,b
 17587  003E02  6F86               	movwf	(??_get_fattime+34)& (0+255),b
 17588  003E04  5167               	movf	(??_get_fattime+3)& (0+255),w,b
 17589  003E06  1183               	iorwf	(??_get_fattime+31)& (0+255),w,b
 17590  003E08  6F87               	movwf	(??_get_fattime+35)& (0+255),b
 17591  003E0A  5168               	movf	(??_get_fattime+4)& (0+255),w,b
 17592  003E0C  1184               	iorwf	(??_get_fattime+32)& (0+255),w,b
 17593  003E0E  6F88               	movwf	(??_get_fattime+36)& (0+255),b
 17594  003E10  5169               	movf	(??_get_fattime+5)& (0+255),w,b
 17595  003E12  1185               	iorwf	(??_get_fattime+33)& (0+255),w,b
 17596  003E14  6F89               	movwf	(??_get_fattime+37)& (0+255),b
 17597  003E16  5164               	movf	??_get_fattime& (0+255),w,b
 17598  003E18  1186               	iorwf	(??_get_fattime+34)& (0+255),w,b
 17599  003E1A  6F60               	movwf	?_get_fattime& (0+255),b
 17600  003E1C  5165               	movf	(??_get_fattime+1)& (0+255),w,b
 17601  003E1E  1187               	iorwf	(??_get_fattime+35)& (0+255),w,b
 17602  003E20  6F61               	movwf	(?_get_fattime+1)& (0+255),b
 17603  003E22  0E00               	movlw	0
 17604  003E24  1188               	iorwf	(??_get_fattime+36)& (0+255),w,b
 17605  003E26  6F62               	movwf	(?_get_fattime+2)& (0+255),b
 17606  003E28  0E00               	movlw	0
 17607  003E2A  1189               	iorwf	(??_get_fattime+37)& (0+255),w,b
 17608  003E2C  6F63               	movwf	(?_get_fattime+3)& (0+255),b
 17609  003E2E  0012               	return	
 17610  003E30                     __end_of_get_fattime:
 17611                           	opt stack 0
 17612                           tosu	equ	0xFFF
 17613                           tosh	equ	0xFFE
 17614                           tosl	equ	0xFFD
 17615                           pclath	equ	0xFFA
 17616                           tblptru	equ	0xFF8
 17617                           tblptrh	equ	0xFF7
 17618                           tblptrl	equ	0xFF6
 17619                           tablat	equ	0xFF5
 17620                           prodh	equ	0xFF4
 17621                           prodl	equ	0xFF3
 17622                           intcon	equ	0xFF2
 17623                           intcon2	equ	0xFF1
 17624                           intcon3	equ	0xFF0
 17625                           indf0	equ	0xFEF
 17626                           postinc0	equ	0xFEE
 17627                           fsr0h	equ	0xFEA
 17628                           fsr0l	equ	0xFE9
 17629                           wreg	equ	0xFE8
 17630                           indf1	equ	0xFE7
 17631                           postinc1	equ	0xFE6
 17632                           postdec1	equ	0xFE5
 17633                           fsr1h	equ	0xFE2
 17634                           fsr1l	equ	0xFE1
 17635                           indf2	equ	0xFDF
 17636                           postinc2	equ	0xFDE
 17637                           postdec2	equ	0xFDD
 17638                           plusw2	equ	0xFDB
 17639                           fsr2h	equ	0xFDA
 17640                           fsr2l	equ	0xFD9
 17641                           status	equ	0xFD8
 17642                           
 17643 ;; *************** function _escreve_inteiro_lcd *****************
 17644 ;; Defined at:
 17645 ;;		line 376 in file "bibliotecas/display_lcd.c"
 17646 ;; Parameters:    Size  Location     Type
 17647 ;;  valor           2   24[BANK0 ] int 
 17648 ;; Auto vars:     Size  Location     Type
 17649 ;;  texto           7   26[BANK0 ] unsigned char [7]
 17650 ;; Return value:  Size  Location     Type
 17651 ;;                  1    wreg      void 
 17652 ;; Registers used:
 17653 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17654 ;; Tracked objects:
 17655 ;;		On entry : 0/0
 17656 ;;		On exit  : 0/0
 17657 ;;		Unchanged: 0/0
 17658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17659 ;;      Params:         0       2       0       0       0       0       0       0       0
 17660 ;;      Locals:         0       7       0       0       0       0       0       0       0
 17661 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17662 ;;      Totals:         0       9       0       0       0       0       0       0       0
 17663 ;;Total ram usage:        9 bytes
 17664 ;; Hardware stack levels used:    1
 17665 ;; Hardware stack levels required when called:    6
 17666 ;; This function calls:
 17667 ;;		_escreve_frase_ram_lcd
 17668 ;;		_itoa
 17669 ;; This function is called by:
 17670 ;;		_escrita_sdcard
 17671 ;;		_escreve_float_lcd
 17672 ;; This function uses a non-reentrant model
 17673 ;;
 17674                           
 17675                           	psect	text68
 17676  004F24                     __ptext68:
 17677                           	opt stack 0
 17678  004F24                     _escreve_inteiro_lcd:
 17679                           	opt stack 22
 17680                           
 17681                           ;display_lcd.c: 378: char texto[7] = "000000";
 17682                           
 17683                           ; BSR set to: 0
 17684                           ;incstack = 0
 17685  004F24  EE21  F0CE         	lfsr	2,escreve_inteiro_lcd@F3966
 17686  004F28  EE10  F07A         	lfsr	1,escreve_inteiro_lcd@texto
 17687  004F2C  0E06               	movlw	6
 17688  004F2E                     u13061:
 17689  004F2E  CFDB FFE3          	movff	plusw2,plusw1
 17690  004F32  06E8               	decf	wreg,f,c
 17691  004F34  E2FC               	bc	u13061
 17692                           
 17693                           ;display_lcd.c: 379: itoa(texto,valor, 10);
 17694  004F36  0E7A               	movlw	low escreve_inteiro_lcd@texto
 17695  004F38  0100               	movlb	0	; () banked
 17696  004F3A  6F70               	movwf	itoa@buf& (0+255),b
 17697  004F3C  0E00               	movlw	high escreve_inteiro_lcd@texto
 17698  004F3E  6F71               	movwf	(itoa@buf+1)& (0+255),b
 17699  004F40  C078  F072         	movff	escreve_inteiro_lcd@valor,itoa@val
 17700  004F44  C079  F073         	movff	escreve_inteiro_lcd@valor+1,itoa@val+1
 17701  004F48  0E00               	movlw	0
 17702  004F4A  6F75               	movwf	(itoa@base+1)& (0+255),b
 17703  004F4C  0E0A               	movlw	10
 17704  004F4E  6F74               	movwf	itoa@base& (0+255),b
 17705  004F50  EC2D  F027         	call	_itoa	;wreg free
 17706                           
 17707                           ;display_lcd.c: 380: escreve_frase_ram_lcd(texto);
 17708  004F54  0E7A               	movlw	low escreve_inteiro_lcd@texto
 17709  004F56  0100               	movlb	0	; () banked
 17710  004F58  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 17711  004F5A  0E00               	movlw	high escreve_inteiro_lcd@texto
 17712  004F5C  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 17713  004F5E  EC02  F026         	call	_escreve_frase_ram_lcd	;wreg free
 17714  004F62  0012               	return		;funcret
 17715  004F64                     __end_of_escreve_inteiro_lcd:
 17716                           	opt stack 0
 17717                           tosu	equ	0xFFF
 17718                           tosh	equ	0xFFE
 17719                           tosl	equ	0xFFD
 17720                           pclath	equ	0xFFA
 17721                           tblptru	equ	0xFF8
 17722                           tblptrh	equ	0xFF7
 17723                           tblptrl	equ	0xFF6
 17724                           tablat	equ	0xFF5
 17725                           prodh	equ	0xFF4
 17726                           prodl	equ	0xFF3
 17727                           intcon	equ	0xFF2
 17728                           intcon2	equ	0xFF1
 17729                           intcon3	equ	0xFF0
 17730                           indf0	equ	0xFEF
 17731                           postinc0	equ	0xFEE
 17732                           fsr0h	equ	0xFEA
 17733                           fsr0l	equ	0xFE9
 17734                           wreg	equ	0xFE8
 17735                           indf1	equ	0xFE7
 17736                           postinc1	equ	0xFE6
 17737                           postdec1	equ	0xFE5
 17738                           plusw1	equ	0xFE3
 17739                           fsr1h	equ	0xFE2
 17740                           fsr1l	equ	0xFE1
 17741                           indf2	equ	0xFDF
 17742                           postinc2	equ	0xFDE
 17743                           postdec2	equ	0xFDD
 17744                           plusw2	equ	0xFDB
 17745                           fsr2h	equ	0xFDA
 17746                           fsr2l	equ	0xFD9
 17747                           status	equ	0xFD8
 17748                           
 17749 ;; *************** function _itoa *****************
 17750 ;; Defined at:
 17751 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
 17752 ;; Parameters:    Size  Location     Type
 17753 ;;  buf             2   16[BANK0 ] PTR unsigned char 
 17754 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
 17755 ;;  val             2   18[BANK0 ] int 
 17756 ;;  base            2   20[BANK0 ] int 
 17757 ;; Auto vars:     Size  Location     Type
 17758 ;;  cp              2   22[BANK0 ] PTR unsigned char 
 17759 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
 17760 ;; Return value:  Size  Location     Type
 17761 ;;                  2   16[BANK0 ] PTR unsigned char 
 17762 ;; Registers used:
 17763 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17764 ;; Tracked objects:
 17765 ;;		On entry : 0/0
 17766 ;;		On exit  : 0/0
 17767 ;;		Unchanged: 0/0
 17768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17769 ;;      Params:         0       6       0       0       0       0       0       0       0
 17770 ;;      Locals:         0       2       0       0       0       0       0       0       0
 17771 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17772 ;;      Totals:         0       8       0       0       0       0       0       0       0
 17773 ;;Total ram usage:        8 bytes
 17774 ;; Hardware stack levels used:    1
 17775 ;; Hardware stack levels required when called:    5
 17776 ;; This function calls:
 17777 ;;		_utoa
 17778 ;; This function is called by:
 17779 ;;		_escreve_inteiro_lcd
 17780 ;;		_escreve_inteiro_uart
 17781 ;; This function uses a non-reentrant model
 17782 ;;
 17783                           
 17784                           	psect	text69
 17785  004E5A                     __ptext69:
 17786                           	opt stack 0
 17787  004E5A                     _itoa:
 17788                           	opt stack 22
 17789                           
 17790                           ;incstack = 0
 17791  004E5A  C070  F076         	movff	itoa@buf,itoa@cp
 17792  004E5E  C071  F077         	movff	itoa@buf+1,itoa@cp+1
 17793  004E62  0100               	movlb	0	; () banked
 17794  004E64  AF73               	btfss	(itoa@val+1)& (0+255),7,b
 17795  004E66  D00C               	goto	l1659
 17796                           
 17797                           ; BSR set to: 0
 17798  004E68  C070  FFD9         	movff	itoa@buf,fsr2l
 17799  004E6C  C071  FFDA         	movff	itoa@buf+1,fsr2h
 17800  004E70  0E2D               	movlw	45
 17801  004E72  6EDF               	movwf	indf2,c
 17802                           
 17803                           ; BSR set to: 0
 17804  004E74  4B70               	infsnz	itoa@buf& (0+255),f,b
 17805  004E76  2B71               	incf	(itoa@buf+1)& (0+255),f,b
 17806                           
 17807                           ; BSR set to: 0
 17808  004E78  6D72               	negf	itoa@val& (0+255),b
 17809  004E7A  1F73               	comf	(itoa@val+1)& (0+255),f,b
 17810  004E7C  B0D8               	btfsc	status,0,c
 17811  004E7E  2B73               	incf	(itoa@val+1)& (0+255),f,b
 17812  004E80                     l1659:
 17813                           
 17814                           ; BSR set to: 0
 17815                           
 17816                           ; BSR set to: 0
 17817  004E80  C070  F067         	movff	itoa@buf,utoa@buf
 17818  004E84  C071  F068         	movff	itoa@buf+1,utoa@buf+1
 17819  004E88  C072  F069         	movff	itoa@val,utoa@val
 17820  004E8C  C073  F06A         	movff	itoa@val+1,utoa@val+1
 17821  004E90  C074  F06B         	movff	itoa@base,utoa@base
 17822  004E94  C075  F06C         	movff	itoa@base+1,utoa@base+1
 17823  004E98  EC47  F020         	call	_utoa	;wreg free
 17824  004E9C  0012               	return	
 17825  004E9E                     __end_of_itoa:
 17826                           	opt stack 0
 17827                           tosu	equ	0xFFF
 17828                           tosh	equ	0xFFE
 17829                           tosl	equ	0xFFD
 17830                           pclath	equ	0xFFA
 17831                           tblptru	equ	0xFF8
 17832                           tblptrh	equ	0xFF7
 17833                           tblptrl	equ	0xFF6
 17834                           tablat	equ	0xFF5
 17835                           prodh	equ	0xFF4
 17836                           prodl	equ	0xFF3
 17837                           intcon	equ	0xFF2
 17838                           intcon2	equ	0xFF1
 17839                           intcon3	equ	0xFF0
 17840                           indf0	equ	0xFEF
 17841                           postinc0	equ	0xFEE
 17842                           fsr0h	equ	0xFEA
 17843                           fsr0l	equ	0xFE9
 17844                           wreg	equ	0xFE8
 17845                           indf1	equ	0xFE7
 17846                           postinc1	equ	0xFE6
 17847                           postdec1	equ	0xFE5
 17848                           plusw1	equ	0xFE3
 17849                           fsr1h	equ	0xFE2
 17850                           fsr1l	equ	0xFE1
 17851                           indf2	equ	0xFDF
 17852                           postinc2	equ	0xFDE
 17853                           postdec2	equ	0xFDD
 17854                           plusw2	equ	0xFDB
 17855                           fsr2h	equ	0xFDA
 17856                           fsr2l	equ	0xFD9
 17857                           status	equ	0xFD8
 17858                           
 17859 ;; *************** function _utoa *****************
 17860 ;; Defined at:
 17861 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
 17862 ;; Parameters:    Size  Location     Type
 17863 ;;  buf             2    7[BANK0 ] PTR unsigned char 
 17864 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
 17865 ;;  val             2    9[BANK0 ] unsigned int 
 17866 ;;  base            2   11[BANK0 ] int 
 17867 ;; Auto vars:     Size  Location     Type
 17868 ;;  v               2   13[BANK0 ] unsigned int 
 17869 ;;  c               1   15[BANK0 ] unsigned char 
 17870 ;; Return value:  Size  Location     Type
 17871 ;;                  2    7[BANK0 ] PTR unsigned char 
 17872 ;; Registers used:
 17873 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17874 ;; Tracked objects:
 17875 ;;		On entry : 0/0
 17876 ;;		On exit  : 0/0
 17877 ;;		Unchanged: 0/0
 17878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17879 ;;      Params:         0       6       0       0       0       0       0       0       0
 17880 ;;      Locals:         0       3       0       0       0       0       0       0       0
 17881 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17882 ;;      Totals:         0       9       0       0       0       0       0       0       0
 17883 ;;Total ram usage:        9 bytes
 17884 ;; Hardware stack levels used:    1
 17885 ;; Hardware stack levels required when called:    4
 17886 ;; This function calls:
 17887 ;;		___lwdiv
 17888 ;;		___lwmod
 17889 ;; This function is called by:
 17890 ;;		_itoa
 17891 ;; This function uses a non-reentrant model
 17892 ;;
 17893                           
 17894                           	psect	text70
 17895  00408E                     __ptext70:
 17896                           	opt stack 0
 17897  00408E                     _utoa:
 17898                           	opt stack 22
 17899                           
 17900                           ;incstack = 0
 17901  00408E  C069  F06D         	movff	utoa@val,utoa@v
 17902  004092  C06A  F06E         	movff	utoa@val+1,utoa@v+1
 17903  004096  C06D  F060         	movff	utoa@v,___lwdiv@dividend
 17904  00409A  C06E  F061         	movff	utoa@v+1,___lwdiv@dividend+1
 17905  00409E  C06B  F062         	movff	utoa@base,___lwdiv@divisor
 17906  0040A2  C06C  F063         	movff	utoa@base+1,___lwdiv@divisor+1
 17907  0040A6  ECD8  F025         	call	___lwdiv	;wreg free
 17908  0040AA  C060  F06D         	movff	?___lwdiv,utoa@v
 17909  0040AE  C061  F06E         	movff	?___lwdiv+1,utoa@v+1
 17910  0040B2  0100               	movlb	0	; () banked
 17911  0040B4  4B67               	infsnz	utoa@buf& (0+255),f,b
 17912  0040B6  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 17913                           
 17914                           ; BSR set to: 0
 17915  0040B8  516D               	movf	utoa@v& (0+255),w,b
 17916  0040BA  116E               	iorwf	(utoa@v+1)& (0+255),w,b
 17917  0040BC  A4D8               	btfss	status,2,c
 17918  0040BE  D7EB               	goto	l1663
 17919                           
 17920                           ; BSR set to: 0
 17921                           
 17922                           ; BSR set to: 0
 17923  0040C0  C067  FFD9         	movff	utoa@buf,fsr2l
 17924  0040C4  C068  FFDA         	movff	utoa@buf+1,fsr2h
 17925  0040C8  0E00               	movlw	0
 17926  0040CA  6EDF               	movwf	indf2,c
 17927                           
 17928                           ; BSR set to: 0
 17929  0040CC  0767               	decf	utoa@buf& (0+255),f,b
 17930  0040CE  A0D8               	btfss	status,0,c
 17931  0040D0  0768               	decf	(utoa@buf+1)& (0+255),f,b
 17932  0040D2                     
 17933                           ; BSR set to: 0
 17934                           
 17935                           ; BSR set to: 0
 17936  0040D2  C069  F060         	movff	utoa@val,___lwmod@dividend
 17937  0040D6  C06A  F061         	movff	utoa@val+1,___lwmod@dividend+1
 17938  0040DA  C06B  F062         	movff	utoa@base,___lwmod@divisor
 17939  0040DE  C06C  F063         	movff	utoa@base+1,___lwmod@divisor+1
 17940  0040E2  EC4F  F027         	call	___lwmod	;wreg free
 17941  0040E6  0100               	movlb	0	; () banked
 17942  0040E8  5160               	movf	?___lwmod& (0+255),w,b
 17943  0040EA  6F6F               	movwf	utoa@c& (0+255),b
 17944                           
 17945                           ; BSR set to: 0
 17946  0040EC  C069  F060         	movff	utoa@val,___lwdiv@dividend
 17947  0040F0  C06A  F061         	movff	utoa@val+1,___lwdiv@dividend+1
 17948  0040F4  C06B  F062         	movff	utoa@base,___lwdiv@divisor
 17949  0040F8  C06C  F063         	movff	utoa@base+1,___lwdiv@divisor+1
 17950  0040FC  ECD8  F025         	call	___lwdiv	;wreg free
 17951  004100  C060  F069         	movff	?___lwdiv,utoa@val
 17952  004104  C061  F06A         	movff	?___lwdiv+1,utoa@val+1
 17953  004108  0E09               	movlw	9
 17954  00410A  0100               	movlb	0	; () banked
 17955  00410C  656F               	cpfsgt	utoa@c& (0+255),b
 17956  00410E  D002               	goto	l1666
 17957                           
 17958                           ; BSR set to: 0
 17959  004110  0E07               	movlw	7
 17960  004112  276F               	addwf	utoa@c& (0+255),f,b
 17961  004114                     l1666:
 17962                           
 17963                           ; BSR set to: 0
 17964  004114  0E30               	movlw	48
 17965  004116  276F               	addwf	utoa@c& (0+255),f,b
 17966                           
 17967                           ; BSR set to: 0
 17968  004118  C067  FFD9         	movff	utoa@buf,fsr2l
 17969  00411C  C068  FFDA         	movff	utoa@buf+1,fsr2h
 17970  004120  C06F  FFDF         	movff	utoa@c,indf2
 17971                           
 17972                           ; BSR set to: 0
 17973  004124  0767               	decf	utoa@buf& (0+255),f,b
 17974  004126  A0D8               	btfss	status,0,c
 17975  004128  0768               	decf	(utoa@buf+1)& (0+255),f,b
 17976                           
 17977                           ; BSR set to: 0
 17978  00412A  5169               	movf	utoa@val& (0+255),w,b
 17979  00412C  116A               	iorwf	(utoa@val+1)& (0+255),w,b
 17980  00412E  A4D8               	btfss	status,2,c
 17981  004130  D7D0               	goto	l1665
 17982                           
 17983                           ; BSR set to: 0
 17984                           ;	Return value of _utoa is never used
 17985                           
 17986                           ; BSR set to: 0
 17987  004132  4B67               	infsnz	utoa@buf& (0+255),f,b
 17988  004134  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 17989  004136  0012               	return	
 17990  004138                     __end_of_utoa:
 17991                           	opt stack 0
 17992                           tosu	equ	0xFFF
 17993                           tosh	equ	0xFFE
 17994                           tosl	equ	0xFFD
 17995                           pclath	equ	0xFFA
 17996                           tblptru	equ	0xFF8
 17997                           tblptrh	equ	0xFF7
 17998                           tblptrl	equ	0xFF6
 17999                           tablat	equ	0xFF5
 18000                           prodh	equ	0xFF4
 18001                           prodl	equ	0xFF3
 18002                           intcon	equ	0xFF2
 18003                           intcon2	equ	0xFF1
 18004                           intcon3	equ	0xFF0
 18005                           indf0	equ	0xFEF
 18006                           postinc0	equ	0xFEE
 18007                           fsr0h	equ	0xFEA
 18008                           fsr0l	equ	0xFE9
 18009                           wreg	equ	0xFE8
 18010                           indf1	equ	0xFE7
 18011                           postinc1	equ	0xFE6
 18012                           postdec1	equ	0xFE5
 18013                           plusw1	equ	0xFE3
 18014                           fsr1h	equ	0xFE2
 18015                           fsr1l	equ	0xFE1
 18016                           indf2	equ	0xFDF
 18017                           postinc2	equ	0xFDE
 18018                           postdec2	equ	0xFDD
 18019                           plusw2	equ	0xFDB
 18020                           fsr2h	equ	0xFDA
 18021                           fsr2l	equ	0xFD9
 18022                           status	equ	0xFD8
 18023                           
 18024 ;; *************** function ___lwmod *****************
 18025 ;; Defined at:
 18026 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 18027 ;; Parameters:    Size  Location     Type
 18028 ;;  dividend        2    0[BANK0 ] unsigned int 
 18029 ;;  divisor         2    2[BANK0 ] unsigned int 
 18030 ;; Auto vars:     Size  Location     Type
 18031 ;;  counter         1    4[BANK0 ] unsigned char 
 18032 ;; Return value:  Size  Location     Type
 18033 ;;                  2    0[BANK0 ] unsigned int 
 18034 ;; Registers used:
 18035 ;;		wreg, status,2, status,0
 18036 ;; Tracked objects:
 18037 ;;		On entry : 0/0
 18038 ;;		On exit  : 0/0
 18039 ;;		Unchanged: 0/0
 18040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18041 ;;      Params:         0       4       0       0       0       0       0       0       0
 18042 ;;      Locals:         0       1       0       0       0       0       0       0       0
 18043 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18044 ;;      Totals:         0       5       0       0       0       0       0       0       0
 18045 ;;Total ram usage:        5 bytes
 18046 ;; Hardware stack levels used:    1
 18047 ;; Hardware stack levels required when called:    3
 18048 ;; This function calls:
 18049 ;;		Nothing
 18050 ;; This function is called by:
 18051 ;;		_utoa
 18052 ;;		_converte_inteiro_matriz
 18053 ;; This function uses a non-reentrant model
 18054 ;;
 18055                           
 18056                           	psect	text71
 18057  004E9E                     __ptext71:
 18058                           	opt stack 0
 18059  004E9E                     ___lwmod:
 18060                           	opt stack 22
 18061                           
 18062                           ; BSR set to: 0
 18063                           ;incstack = 0
 18064  004E9E  0100               	movlb	0	; () banked
 18065  004EA0  5162               	movf	___lwmod@divisor& (0+255),w,b
 18066  004EA2  1163               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 18067  004EA4  B4D8               	btfsc	status,2,c
 18068  004EA6  D018               	goto	l1761
 18069                           
 18070                           ; BSR set to: 0
 18071  004EA8  0E01               	movlw	1
 18072  004EAA  6F64               	movwf	___lwmod@counter& (0+255),b
 18073  004EAC  D004               	goto	l1756
 18074  004EAE                     
 18075                           ; BSR set to: 0
 18076                           
 18077                           ; BSR set to: 0
 18078  004EAE  90D8               	bcf	status,0,c
 18079  004EB0  3762               	rlcf	___lwmod@divisor& (0+255),f,b
 18080  004EB2  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 18081  004EB4  2B64               	incf	___lwmod@counter& (0+255),f,b
 18082  004EB6                     l1756:
 18083                           
 18084                           ; BSR set to: 0
 18085                           
 18086                           ; BSR set to: 0
 18087  004EB6  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 18088  004EB8  D7FA               	goto	l1757
 18089  004EBA                     u11380:
 18090                           
 18091                           ; BSR set to: 0
 18092                           
 18093                           ; BSR set to: 0
 18094                           
 18095                           ; BSR set to: 0
 18096  004EBA  5162               	movf	___lwmod@divisor& (0+255),w,b
 18097  004EBC  5D60               	subwf	___lwmod@dividend& (0+255),w,b
 18098  004EBE  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 18099  004EC0  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 18100  004EC2  A0D8               	btfss	status,0,c
 18101  004EC4  D004               	goto	l1760
 18102                           
 18103                           ; BSR set to: 0
 18104  004EC6  5162               	movf	___lwmod@divisor& (0+255),w,b
 18105  004EC8  5F60               	subwf	___lwmod@dividend& (0+255),f,b
 18106  004ECA  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 18107  004ECC  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 18108  004ECE                     l1760:
 18109                           
 18110                           ; BSR set to: 0
 18111                           
 18112                           ; BSR set to: 0
 18113  004ECE  90D8               	bcf	status,0,c
 18114  004ED0  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 18115  004ED2  3362               	rrcf	___lwmod@divisor& (0+255),f,b
 18116                           
 18117                           ; BSR set to: 0
 18118  004ED4  2F64               	decfsz	___lwmod@counter& (0+255),f,b
 18119  004ED6  D7F1               	goto	u11380
 18120  004ED8                     l1761:
 18121                           
 18122                           ; BSR set to: 0
 18123                           
 18124                           ; BSR set to: 0
 18125  004ED8  C060  F060         	movff	___lwmod@dividend,?___lwmod
 18126  004EDC  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
 18127                           
 18128                           ; BSR set to: 0
 18129  004EE0  0012               	return		;funcret
 18130  004EE2                     __end_of___lwmod:
 18131                           	opt stack 0
 18132                           tosu	equ	0xFFF
 18133                           tosh	equ	0xFFE
 18134                           tosl	equ	0xFFD
 18135                           pclath	equ	0xFFA
 18136                           tblptru	equ	0xFF8
 18137                           tblptrh	equ	0xFF7
 18138                           tblptrl	equ	0xFF6
 18139                           tablat	equ	0xFF5
 18140                           prodh	equ	0xFF4
 18141                           prodl	equ	0xFF3
 18142                           intcon	equ	0xFF2
 18143                           intcon2	equ	0xFF1
 18144                           intcon3	equ	0xFF0
 18145                           indf0	equ	0xFEF
 18146                           postinc0	equ	0xFEE
 18147                           fsr0h	equ	0xFEA
 18148                           fsr0l	equ	0xFE9
 18149                           wreg	equ	0xFE8
 18150                           indf1	equ	0xFE7
 18151                           postinc1	equ	0xFE6
 18152                           postdec1	equ	0xFE5
 18153                           plusw1	equ	0xFE3
 18154                           fsr1h	equ	0xFE2
 18155                           fsr1l	equ	0xFE1
 18156                           indf2	equ	0xFDF
 18157                           postinc2	equ	0xFDE
 18158                           postdec2	equ	0xFDD
 18159                           plusw2	equ	0xFDB
 18160                           fsr2h	equ	0xFDA
 18161                           fsr2l	equ	0xFD9
 18162                           status	equ	0xFD8
 18163                           
 18164 ;; *************** function ___lwdiv *****************
 18165 ;; Defined at:
 18166 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 18167 ;; Parameters:    Size  Location     Type
 18168 ;;  dividend        2    0[BANK0 ] unsigned int 
 18169 ;;  divisor         2    2[BANK0 ] unsigned int 
 18170 ;; Auto vars:     Size  Location     Type
 18171 ;;  quotient        2    5[BANK0 ] unsigned int 
 18172 ;;  counter         1    4[BANK0 ] unsigned char 
 18173 ;; Return value:  Size  Location     Type
 18174 ;;                  2    0[BANK0 ] unsigned int 
 18175 ;; Registers used:
 18176 ;;		wreg, status,2, status,0
 18177 ;; Tracked objects:
 18178 ;;		On entry : 0/0
 18179 ;;		On exit  : 0/0
 18180 ;;		Unchanged: 0/0
 18181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18182 ;;      Params:         0       4       0       0       0       0       0       0       0
 18183 ;;      Locals:         0       3       0       0       0       0       0       0       0
 18184 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18185 ;;      Totals:         0       7       0       0       0       0       0       0       0
 18186 ;;Total ram usage:        7 bytes
 18187 ;; Hardware stack levels used:    1
 18188 ;; Hardware stack levels required when called:    3
 18189 ;; This function calls:
 18190 ;;		Nothing
 18191 ;; This function is called by:
 18192 ;;		_utoa
 18193 ;;		_converte_inteiro_matriz
 18194 ;; This function uses a non-reentrant model
 18195 ;;
 18196                           
 18197                           	psect	text72
 18198  004BB0                     __ptext72:
 18199                           	opt stack 0
 18200  004BB0                     ___lwdiv:
 18201                           	opt stack 22
 18202                           
 18203                           ; BSR set to: 0
 18204                           ;incstack = 0
 18205  004BB0  0E00               	movlw	0
 18206  004BB2  0100               	movlb	0	; () banked
 18207  004BB4  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 18208  004BB6  0E00               	movlw	0
 18209  004BB8  6F65               	movwf	___lwdiv@quotient& (0+255),b
 18210                           
 18211                           ; BSR set to: 0
 18212  004BBA  5162               	movf	___lwdiv@divisor& (0+255),w,b
 18213  004BBC  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 18214  004BBE  B4D8               	btfsc	status,2,c
 18215  004BC0  D01C               	goto	l1751
 18216                           
 18217                           ; BSR set to: 0
 18218  004BC2  0E01               	movlw	1
 18219  004BC4  6F64               	movwf	___lwdiv@counter& (0+255),b
 18220  004BC6  D004               	goto	l1746
 18221  004BC8                     
 18222                           ; BSR set to: 0
 18223                           
 18224                           ; BSR set to: 0
 18225  004BC8  90D8               	bcf	status,0,c
 18226  004BCA  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 18227  004BCC  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 18228  004BCE  2B64               	incf	___lwdiv@counter& (0+255),f,b
 18229  004BD0                     l1746:
 18230                           
 18231                           ; BSR set to: 0
 18232                           
 18233                           ; BSR set to: 0
 18234  004BD0  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 18235  004BD2  D7FA               	goto	l1747
 18236  004BD4                     u11350:
 18237                           
 18238                           ; BSR set to: 0
 18239                           
 18240                           ; BSR set to: 0
 18241                           
 18242                           ; BSR set to: 0
 18243  004BD4  90D8               	bcf	status,0,c
 18244  004BD6  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 18245  004BD8  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 18246                           
 18247                           ; BSR set to: 0
 18248  004BDA  5162               	movf	___lwdiv@divisor& (0+255),w,b
 18249  004BDC  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 18250  004BDE  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 18251  004BE0  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 18252  004BE2  A0D8               	btfss	status,0,c
 18253  004BE4  D005               	goto	l1750
 18254                           
 18255                           ; BSR set to: 0
 18256  004BE6  5162               	movf	___lwdiv@divisor& (0+255),w,b
 18257  004BE8  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 18258  004BEA  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 18259  004BEC  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 18260                           
 18261                           ; BSR set to: 0
 18262  004BEE  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 18263  004BF0                     l1750:
 18264                           
 18265                           ; BSR set to: 0
 18266                           
 18267                           ; BSR set to: 0
 18268  004BF0  90D8               	bcf	status,0,c
 18269  004BF2  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 18270  004BF4  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 18271                           
 18272                           ; BSR set to: 0
 18273  004BF6  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 18274  004BF8  D7ED               	goto	u11350
 18275  004BFA                     l1751:
 18276                           
 18277                           ; BSR set to: 0
 18278                           
 18279                           ; BSR set to: 0
 18280  004BFA  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 18281  004BFE  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 18282                           
 18283                           ; BSR set to: 0
 18284  004C02  0012               	return		;funcret
 18285  004C04                     __end_of___lwdiv:
 18286                           	opt stack 0
 18287                           tosu	equ	0xFFF
 18288                           tosh	equ	0xFFE
 18289                           tosl	equ	0xFFD
 18290                           pclath	equ	0xFFA
 18291                           tblptru	equ	0xFF8
 18292                           tblptrh	equ	0xFF7
 18293                           tblptrl	equ	0xFF6
 18294                           tablat	equ	0xFF5
 18295                           prodh	equ	0xFF4
 18296                           prodl	equ	0xFF3
 18297                           intcon	equ	0xFF2
 18298                           intcon2	equ	0xFF1
 18299                           intcon3	equ	0xFF0
 18300                           indf0	equ	0xFEF
 18301                           postinc0	equ	0xFEE
 18302                           fsr0h	equ	0xFEA
 18303                           fsr0l	equ	0xFE9
 18304                           wreg	equ	0xFE8
 18305                           indf1	equ	0xFE7
 18306                           postinc1	equ	0xFE6
 18307                           postdec1	equ	0xFE5
 18308                           plusw1	equ	0xFE3
 18309                           fsr1h	equ	0xFE2
 18310                           fsr1l	equ	0xFE1
 18311                           indf2	equ	0xFDF
 18312                           postinc2	equ	0xFDE
 18313                           postdec2	equ	0xFDD
 18314                           plusw2	equ	0xFDB
 18315                           fsr2h	equ	0xFDA
 18316                           fsr2l	equ	0xFD9
 18317                           status	equ	0xFD8
 18318                           
 18319 ;; *************** function _escreve_frase_ram_lcd *****************
 18320 ;; Defined at:
 18321 ;;		line 445 in file "bibliotecas/display_lcd.c"
 18322 ;; Parameters:    Size  Location     Type
 18323 ;;  buffer          2    3[BANK0 ] PTR unsigned char 
 18324 ;;		 -> escreve_inteiro_lcd@texto(7), STR_13(11), STR_12(10), STR_11(16), 
 18325 ;;		 -> STR_10(11), string_dado(44), STR_8(9), STR_7(10), 
 18326 ;;		 -> STR_6(10), STR_5(14), STR_4(21), STR_3(15), 
 18327 ;;		 -> mensagem_inicial@msg_dois(17), mensagem_inicial@msg_linha_um(17), 
 18328 ;; Auto vars:     Size  Location     Type
 18329 ;;		None
 18330 ;; Return value:  Size  Location     Type
 18331 ;;                  1    wreg      void 
 18332 ;; Registers used:
 18333 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18334 ;; Tracked objects:
 18335 ;;		On entry : 0/0
 18336 ;;		On exit  : 0/0
 18337 ;;		Unchanged: 0/0
 18338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18339 ;;      Params:         0       2       0       0       0       0       0       0       0
 18340 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18341 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18342 ;;      Totals:         0       2       0       0       0       0       0       0       0
 18343 ;;Total ram usage:        2 bytes
 18344 ;; Hardware stack levels used:    1
 18345 ;; Hardware stack levels required when called:    5
 18346 ;; This function calls:
 18347 ;;		_escreve_caractere_lcd
 18348 ;; This function is called by:
 18349 ;;		_mensagem_inicial
 18350 ;;		_escrita_sdcard
 18351 ;;		_sdc_reset
 18352 ;;		_sdc_disk_initialize
 18353 ;;		_escreve_inteiro_lcd
 18354 ;;		_sdcard_init
 18355 ;; This function uses a non-reentrant model
 18356 ;;
 18357                           
 18358                           	psect	text73
 18359  004C04                     __ptext73:
 18360                           	opt stack 0
 18361  004C04                     _escreve_frase_ram_lcd:
 18362                           	opt stack 24
 18363                           
 18364                           ;display_lcd.c: 447: while(*buffer)
 18365                           
 18366                           ; BSR set to: 0
 18367                           ;incstack = 0
 18368  004C04  D015               	goto	l594
 18369  004C06                     
 18370                           ;display_lcd.c: 448: {
 18371                           ;display_lcd.c: 449: escreve_caractere_lcd(*buffer);
 18372  004C06  C063  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 18373  004C0A  C064  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 18374  004C0E  6AF8               	clrf	tblptru,c
 18375  004C10  0E07               	movlw	(high __ramtop+-1)
 18376  004C12  64F7               	cpfsgt	tblptrh,c
 18377  004C14  D003               	bra	u10387
 18378  004C16  0008               	tblrd		*
 18379  004C18  50F5               	movf	tablat,w,c
 18380  004C1A  D005               	bra	u10380
 18381  004C1C                     u10387:
 18382  004C1C  CFF6 FFE9          	movff	tblptrl,fsr0l
 18383  004C20  CFF7 FFEA          	movff	tblptrh,fsr0h
 18384  004C24  50EF               	movf	indf0,w,c
 18385  004C26                     u10380:
 18386  004C26  EC14  F024         	call	_escreve_caractere_lcd
 18387                           
 18388                           ;display_lcd.c: 450: buffer++;
 18389  004C2A  0100               	movlb	0	; () banked
 18390  004C2C  4B63               	infsnz	escreve_frase_ram_lcd@buffer& (0+255),f,b
 18391  004C2E  2B64               	incf	(escreve_frase_ram_lcd@buffer+1)& (0+255),f,b
 18392  004C30                     l594:
 18393                           
 18394                           ; BSR set to: 0
 18395  004C30  C063  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 18396  004C34  C064  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 18397  004C38  6AF8               	clrf	tblptru,c
 18398  004C3A  0E07               	movlw	(high __ramtop+-1)
 18399  004C3C  64F7               	cpfsgt	tblptrh,c
 18400  004C3E  D003               	bra	u10397
 18401  004C40  0008               	tblrd		*
 18402  004C42  50F5               	movf	tablat,w,c
 18403  004C44  D005               	bra	u10390
 18404  004C46                     u10397:
 18405  004C46  CFF6 FFE9          	movff	tblptrl,fsr0l
 18406  004C4A  CFF7 FFEA          	movff	tblptrh,fsr0h
 18407  004C4E  50EF               	movf	indf0,w,c
 18408  004C50                     u10390:
 18409  004C50  0900               	iorlw	0
 18410  004C52  B4D8               	btfsc	status,2,c
 18411  004C54  0012               	return	
 18412  004C56  D7D7               	goto	l595
 18413  004C58                     __end_of_escreve_frase_ram_lcd:
 18414                           	opt stack 0
 18415                           tosu	equ	0xFFF
 18416                           tosh	equ	0xFFE
 18417                           tosl	equ	0xFFD
 18418                           pclath	equ	0xFFA
 18419                           tblptru	equ	0xFF8
 18420                           tblptrh	equ	0xFF7
 18421                           tblptrl	equ	0xFF6
 18422                           tablat	equ	0xFF5
 18423                           prodh	equ	0xFF4
 18424                           prodl	equ	0xFF3
 18425                           intcon	equ	0xFF2
 18426                           intcon2	equ	0xFF1
 18427                           intcon3	equ	0xFF0
 18428                           indf0	equ	0xFEF
 18429                           postinc0	equ	0xFEE
 18430                           fsr0h	equ	0xFEA
 18431                           fsr0l	equ	0xFE9
 18432                           wreg	equ	0xFE8
 18433                           indf1	equ	0xFE7
 18434                           postinc1	equ	0xFE6
 18435                           postdec1	equ	0xFE5
 18436                           plusw1	equ	0xFE3
 18437                           fsr1h	equ	0xFE2
 18438                           fsr1l	equ	0xFE1
 18439                           indf2	equ	0xFDF
 18440                           postinc2	equ	0xFDE
 18441                           postdec2	equ	0xFDD
 18442                           plusw2	equ	0xFDB
 18443                           fsr2h	equ	0xFDA
 18444                           fsr2l	equ	0xFD9
 18445                           status	equ	0xFD8
 18446                           
 18447 ;; *************** function _escreve_caractere_lcd *****************
 18448 ;; Defined at:
 18449 ;;		line 323 in file "bibliotecas/display_lcd.c"
 18450 ;; Parameters:    Size  Location     Type
 18451 ;;  data            1    wreg     unsigned char 
 18452 ;; Auto vars:     Size  Location     Type
 18453 ;;  data            1    2[BANK0 ] unsigned char 
 18454 ;; Return value:  Size  Location     Type
 18455 ;;                  1    wreg      void 
 18456 ;; Registers used:
 18457 ;;		wreg, status,2, status,0, cstack
 18458 ;; Tracked objects:
 18459 ;;		On entry : 0/0
 18460 ;;		On exit  : 0/0
 18461 ;;		Unchanged: 0/0
 18462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18463 ;;      Params:         0       0       0       0       0       0       0       0       0
 18464 ;;      Locals:         0       1       0       0       0       0       0       0       0
 18465 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18466 ;;      Totals:         0       1       0       0       0       0       0       0       0
 18467 ;;Total ram usage:        1 bytes
 18468 ;; Hardware stack levels used:    1
 18469 ;; Hardware stack levels required when called:    4
 18470 ;; This function calls:
 18471 ;;		_delay
 18472 ;; This function is called by:
 18473 ;;		_escreve_frase_ram_lcd
 18474 ;;		_escreve_float_lcd
 18475 ;;		_escreve_frase_lcd
 18476 ;;		_cria_caractere_lcd
 18477 ;; This function uses a non-reentrant model
 18478 ;;
 18479                           
 18480                           	psect	text74
 18481  004828                     __ptext74:
 18482                           	opt stack 0
 18483  004828                     _escreve_caractere_lcd:
 18484                           	opt stack 24
 18485                           
 18486                           ;incstack = 0
 18487                           ;escreve_caractere_lcd@data stored from wreg
 18488  004828  0100               	movlb	0	; () banked
 18489  00482A  6F62               	movwf	escreve_caractere_lcd@data& (0+255),b
 18490                           
 18491                           ;display_lcd.c: 326: PORTDbits.RD2 = 0;
 18492  00482C  9483               	bcf	3971,2,c	;volatile
 18493                           
 18494                           ;display_lcd.c: 327: PORTDbits.RD1 = 1;
 18495  00482E  8283               	bsf	3971,1,c	;volatile
 18496                           
 18497                           ;display_lcd.c: 328: PORTDbits.RD0 = 0;
 18498  004830  9083               	bcf	3971,0,c	;volatile
 18499                           
 18500                           ;display_lcd.c: 331: if(data&0b00010000){PORTDbits.RD4=1;}
 18501  004832  0100               	movlb	0	; () banked
 18502  004834  A962               	btfss	escreve_caractere_lcd@data& (0+255),4,b
 18503  004836  D002               	goto	l561
 18504                           
 18505                           ; BSR set to: 0
 18506  004838  8883               	bsf	3971,4,c	;volatile
 18507  00483A  D001               	goto	l562
 18508  00483C                     l561:
 18509                           
 18510                           ; BSR set to: 0
 18511                           ;display_lcd.c: 332: else {PORTDbits.RD4=0;}
 18512  00483C  9883               	bcf	3971,4,c	;volatile
 18513  00483E                     l562:
 18514                           
 18515                           ; BSR set to: 0
 18516                           ;display_lcd.c: 333: if(data&0b00100000){PORTDbits.RD5=1;}
 18517                           
 18518                           ; BSR set to: 0
 18519  00483E  AB62               	btfss	escreve_caractere_lcd@data& (0+255),5,b
 18520  004840  D002               	goto	l563
 18521                           
 18522                           ; BSR set to: 0
 18523  004842  8A83               	bsf	3971,5,c	;volatile
 18524  004844  D001               	goto	l564
 18525  004846                     l563:
 18526                           
 18527                           ; BSR set to: 0
 18528                           ;display_lcd.c: 334: else {PORTDbits.RD5=0;}
 18529  004846  9A83               	bcf	3971,5,c	;volatile
 18530  004848                     l564:
 18531                           
 18532                           ; BSR set to: 0
 18533                           ;display_lcd.c: 335: if(data&0b01000000){PORTDbits.RD6=1;}
 18534                           
 18535                           ; BSR set to: 0
 18536  004848  AD62               	btfss	escreve_caractere_lcd@data& (0+255),6,b
 18537  00484A  D002               	goto	l565
 18538                           
 18539                           ; BSR set to: 0
 18540  00484C  8C83               	bsf	3971,6,c	;volatile
 18541  00484E  D001               	goto	l566
 18542  004850                     l565:
 18543                           
 18544                           ; BSR set to: 0
 18545                           ;display_lcd.c: 336: else {PORTDbits.RD6=0;}
 18546  004850  9C83               	bcf	3971,6,c	;volatile
 18547  004852                     l566:
 18548                           
 18549                           ; BSR set to: 0
 18550                           ;display_lcd.c: 337: if(data&0b10000000){PORTDbits.RD7=1;}
 18551                           
 18552                           ; BSR set to: 0
 18553  004852  AF62               	btfss	escreve_caractere_lcd@data& (0+255),7,b
 18554  004854  D002               	goto	l567
 18555                           
 18556                           ; BSR set to: 0
 18557  004856  8E83               	bsf	3971,7,c	;volatile
 18558  004858  D001               	goto	l568
 18559  00485A                     l567:
 18560                           
 18561                           ; BSR set to: 0
 18562                           ;display_lcd.c: 338: else {PORTDbits.RD7=0;}
 18563  00485A  9E83               	bcf	3971,7,c	;volatile
 18564  00485C                     l568:
 18565                           
 18566                           ; BSR set to: 0
 18567                           ;display_lcd.c: 341: PORTDbits.RD0 = 1;
 18568  00485C  8083               	bsf	3971,0,c	;volatile
 18569                           
 18570                           ; BSR set to: 0
 18571                           ;display_lcd.c: 342: delay();
 18572  00485E  EC7F  F028         	call	_delay	;wreg free
 18573                           
 18574                           ;display_lcd.c: 343: PORTDbits.RD0 = 0;
 18575  004862  9083               	bcf	3971,0,c	;volatile
 18576                           
 18577                           ;display_lcd.c: 344: delay();
 18578  004864  EC7F  F028         	call	_delay	;wreg free
 18579                           
 18580                           ;display_lcd.c: 348: if(data&0b00000001){PORTDbits.RD4=1;}
 18581  004868  0100               	movlb	0	; () banked
 18582  00486A  A162               	btfss	escreve_caractere_lcd@data& (0+255),0,b
 18583  00486C  D002               	goto	l569
 18584                           
 18585                           ; BSR set to: 0
 18586  00486E  8883               	bsf	3971,4,c	;volatile
 18587  004870  D001               	goto	l570
 18588  004872                     l569:
 18589                           
 18590                           ; BSR set to: 0
 18591                           ;display_lcd.c: 349: else {PORTDbits.RD4=0;}
 18592  004872  9883               	bcf	3971,4,c	;volatile
 18593  004874                     l570:
 18594                           
 18595                           ; BSR set to: 0
 18596                           ;display_lcd.c: 350: if(data&0b00000010){PORTDbits.RD5=1;}
 18597  004874  A362               	btfss	escreve_caractere_lcd@data& (0+255),1,b
 18598  004876  D002               	goto	l571
 18599                           
 18600                           ; BSR set to: 0
 18601  004878  8A83               	bsf	3971,5,c	;volatile
 18602  00487A  D001               	goto	l572
 18603  00487C                     l571:
 18604                           
 18605                           ; BSR set to: 0
 18606                           ;display_lcd.c: 351: else {PORTDbits.RD5=0;}
 18607  00487C  9A83               	bcf	3971,5,c	;volatile
 18608  00487E                     l572:
 18609                           
 18610                           ; BSR set to: 0
 18611                           ;display_lcd.c: 352: if(data&0b00000100){PORTDbits.RD6=1;}
 18612  00487E  A562               	btfss	escreve_caractere_lcd@data& (0+255),2,b
 18613  004880  D002               	goto	l573
 18614                           
 18615                           ; BSR set to: 0
 18616  004882  8C83               	bsf	3971,6,c	;volatile
 18617  004884  D001               	goto	l574
 18618  004886                     l573:
 18619                           
 18620                           ; BSR set to: 0
 18621                           ;display_lcd.c: 353: else {PORTDbits.RD6=0;}
 18622  004886  9C83               	bcf	3971,6,c	;volatile
 18623  004888                     l574:
 18624                           
 18625                           ; BSR set to: 0
 18626                           ;display_lcd.c: 354: if(data&0b00001000){PORTDbits.RD7=1;}
 18627  004888  A762               	btfss	escreve_caractere_lcd@data& (0+255),3,b
 18628  00488A  D002               	goto	l575
 18629                           
 18630                           ; BSR set to: 0
 18631  00488C  8E83               	bsf	3971,7,c	;volatile
 18632  00488E  D001               	goto	l576
 18633  004890                     l575:
 18634                           
 18635                           ; BSR set to: 0
 18636                           ;display_lcd.c: 355: else {PORTDbits.RD7=0;}
 18637  004890  9E83               	bcf	3971,7,c	;volatile
 18638  004892                     l576:
 18639                           
 18640                           ; BSR set to: 0
 18641                           ;display_lcd.c: 358: PORTDbits.RD0 = 1;
 18642  004892  8083               	bsf	3971,0,c	;volatile
 18643                           
 18644                           ; BSR set to: 0
 18645                           ;display_lcd.c: 359: delay();
 18646  004894  EC7F  F028         	call	_delay	;wreg free
 18647                           
 18648                           ;display_lcd.c: 360: PORTDbits.RD0 = 0;
 18649  004898  9083               	bcf	3971,0,c	;volatile
 18650                           
 18651                           ;display_lcd.c: 361: delay();
 18652  00489A  EC7F  F028         	call	_delay	;wreg free
 18653  00489E  0012               	return		;funcret
 18654  0048A0                     __end_of_escreve_caractere_lcd:
 18655                           	opt stack 0
 18656                           tosu	equ	0xFFF
 18657                           tosh	equ	0xFFE
 18658                           tosl	equ	0xFFD
 18659                           pclath	equ	0xFFA
 18660                           tblptru	equ	0xFF8
 18661                           tblptrh	equ	0xFF7
 18662                           tblptrl	equ	0xFF6
 18663                           tablat	equ	0xFF5
 18664                           prodh	equ	0xFF4
 18665                           prodl	equ	0xFF3
 18666                           intcon	equ	0xFF2
 18667                           intcon2	equ	0xFF1
 18668                           intcon3	equ	0xFF0
 18669                           indf0	equ	0xFEF
 18670                           postinc0	equ	0xFEE
 18671                           fsr0h	equ	0xFEA
 18672                           fsr0l	equ	0xFE9
 18673                           wreg	equ	0xFE8
 18674                           indf1	equ	0xFE7
 18675                           postinc1	equ	0xFE6
 18676                           postdec1	equ	0xFE5
 18677                           plusw1	equ	0xFE3
 18678                           fsr1h	equ	0xFE2
 18679                           fsr1l	equ	0xFE1
 18680                           indf2	equ	0xFDF
 18681                           postinc2	equ	0xFDE
 18682                           postdec2	equ	0xFDD
 18683                           plusw2	equ	0xFDB
 18684                           fsr2h	equ	0xFDA
 18685                           fsr2l	equ	0xFD9
 18686                           status	equ	0xFD8
 18687                           
 18688 ;; *************** function _delay *****************
 18689 ;; Defined at:
 18690 ;;		line 45 in file "bibliotecas/display_lcd.c"
 18691 ;; Parameters:    Size  Location     Type
 18692 ;;		None
 18693 ;; Auto vars:     Size  Location     Type
 18694 ;;  contador_int    1    1[BANK0 ] unsigned char 
 18695 ;;  contador_ext    1    0[BANK0 ] unsigned char 
 18696 ;; Return value:  Size  Location     Type
 18697 ;;                  1    wreg      void 
 18698 ;; Registers used:
 18699 ;;		wreg, status,2, status,0
 18700 ;; Tracked objects:
 18701 ;;		On entry : 0/0
 18702 ;;		On exit  : 0/0
 18703 ;;		Unchanged: 0/0
 18704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18705 ;;      Params:         0       0       0       0       0       0       0       0       0
 18706 ;;      Locals:         0       2       0       0       0       0       0       0       0
 18707 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18708 ;;      Totals:         0       2       0       0       0       0       0       0       0
 18709 ;;Total ram usage:        2 bytes
 18710 ;; Hardware stack levels used:    1
 18711 ;; Hardware stack levels required when called:    3
 18712 ;; This function calls:
 18713 ;;		Nothing
 18714 ;; This function is called by:
 18715 ;;		_init_lcd
 18716 ;;		_escreve_cmd_lcd
 18717 ;;		_endereco_cursor_lcd
 18718 ;;		_escreve_caractere_lcd
 18719 ;; This function uses a non-reentrant model
 18720 ;;
 18721                           
 18722                           	psect	text75
 18723  0050FE                     __ptext75:
 18724                           	opt stack 0
 18725  0050FE                     _delay:
 18726                           	opt stack 24
 18727                           
 18728                           ;display_lcd.c: 47: unsigned char contador_ext, contador_int;
 18729                           ;display_lcd.c: 49: for(contador_ext = 0; contador_ext<100; contador_ext++)
 18730                           
 18731                           ;incstack = 0
 18732  0050FE  0E00               	movlw	0
 18733  005100  0100               	movlb	0	; () banked
 18734  005102  6F60               	movwf	delay@contador_ext& (0+255),b
 18735  005104                     l8553:
 18736                           
 18737                           ; BSR set to: 0
 18738  005104  0E63               	movlw	99
 18739  005106  6560               	cpfsgt	delay@contador_ext& (0+255),b
 18740  005108  D001               	goto	l500
 18741  00510A  0012               	return	
 18742  00510C                     l500:
 18743                           
 18744                           ; BSR set to: 0
 18745                           ;display_lcd.c: 50: {
 18746                           ;display_lcd.c: 51: __nop();
 18747  00510C  F000               	nop	
 18748                           
 18749                           ;display_lcd.c: 52: for(contador_int = 0; contador_int<50; contador_int++)
 18750  00510E  0E00               	movlw	0
 18751  005110  0100               	movlb	0	; () banked
 18752  005112  6F61               	movwf	delay@contador_int& (0+255),b
 18753  005114                     l8559:
 18754                           
 18755                           ; BSR set to: 0
 18756  005114  0E31               	movlw	49
 18757  005116  6561               	cpfsgt	delay@contador_int& (0+255),b
 18758  005118  D001               	goto	l502
 18759  00511A  D004               	goto	u10110
 18760  00511C                     l502:
 18761                           
 18762                           ; BSR set to: 0
 18763                           ;display_lcd.c: 53: {
 18764                           ;display_lcd.c: 54: __nop();
 18765  00511C  F000               	nop	
 18766  00511E  0100               	movlb	0	; () banked
 18767  005120  2B61               	incf	delay@contador_int& (0+255),f,b
 18768  005122  D7F8               	goto	l8559
 18769  005124                     u10110:
 18770                           
 18771                           ; BSR set to: 0
 18772                           
 18773                           ; BSR set to: 0
 18774  005124  2B60               	incf	delay@contador_ext& (0+255),f,b
 18775  005126  D7EE               	goto	l8553
 18776  005128                     __end_of_delay:
 18777                           	opt stack 0
 18778                           tosu	equ	0xFFF
 18779                           tosh	equ	0xFFE
 18780                           tosl	equ	0xFFD
 18781                           pclath	equ	0xFFA
 18782                           tblptru	equ	0xFF8
 18783                           tblptrh	equ	0xFF7
 18784                           tblptrl	equ	0xFF6
 18785                           tablat	equ	0xFF5
 18786                           prodh	equ	0xFF4
 18787                           prodl	equ	0xFF3
 18788                           intcon	equ	0xFF2
 18789                           intcon2	equ	0xFF1
 18790                           intcon3	equ	0xFF0
 18791                           indf0	equ	0xFEF
 18792                           postinc0	equ	0xFEE
 18793                           fsr0h	equ	0xFEA
 18794                           fsr0l	equ	0xFE9
 18795                           wreg	equ	0xFE8
 18796                           indf1	equ	0xFE7
 18797                           postinc1	equ	0xFE6
 18798                           postdec1	equ	0xFE5
 18799                           plusw1	equ	0xFE3
 18800                           fsr1h	equ	0xFE2
 18801                           fsr1l	equ	0xFE1
 18802                           indf2	equ	0xFDF
 18803                           postinc2	equ	0xFDE
 18804                           postdec2	equ	0xFDD
 18805                           plusw2	equ	0xFDB
 18806                           fsr2h	equ	0xFDA
 18807                           fsr2l	equ	0xFD9
 18808                           status	equ	0xFD8
 18809                           
 18810 ;; *************** function _desliga_uart *****************
 18811 ;; Defined at:
 18812 ;;		line 219 in file "bibliotecas/uart.c"
 18813 ;; Parameters:    Size  Location     Type
 18814 ;;		None
 18815 ;; Auto vars:     Size  Location     Type
 18816 ;;		None
 18817 ;; Return value:  Size  Location     Type
 18818 ;;                  1    wreg      void 
 18819 ;; Registers used:
 18820 ;;		wreg, status,2
 18821 ;; Tracked objects:
 18822 ;;		On entry : 0/0
 18823 ;;		On exit  : 0/0
 18824 ;;		Unchanged: 0/0
 18825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18826 ;;      Params:         0       0       0       0       0       0       0       0       0
 18827 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18828 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18829 ;;      Totals:         0       0       0       0       0       0       0       0       0
 18830 ;;Total ram usage:        0 bytes
 18831 ;; Hardware stack levels used:    1
 18832 ;; Hardware stack levels required when called:    3
 18833 ;; This function calls:
 18834 ;;		Nothing
 18835 ;; This function is called by:
 18836 ;;		_escrita_sdcard
 18837 ;;		_sdcard_init
 18838 ;; This function uses a non-reentrant model
 18839 ;;
 18840                           
 18841                           	psect	text76
 18842  005290                     __ptext76:
 18843                           	opt stack 0
 18844  005290                     _desliga_uart:
 18845                           	opt stack 25
 18846                           
 18847                           ;uart.c: 221: TRISCbits.RC6 = 1;
 18848                           
 18849                           ; BSR set to: 0
 18850                           ;incstack = 0
 18851  005290  8C94               	bsf	3988,6,c	;volatile
 18852                           
 18853                           ;uart.c: 222: TRISCbits.RC7 = 1;
 18854  005292  8E94               	bsf	3988,7,c	;volatile
 18855                           
 18856                           ;uart.c: 225: TXSTA = 0x00;
 18857  005294  0E00               	movlw	0
 18858  005296  6EAC               	movwf	4012,c	;volatile
 18859                           
 18860                           ;uart.c: 227: RCSTA = 0x00;
 18861  005298  0E00               	movlw	0
 18862  00529A  6EAB               	movwf	4011,c	;volatile
 18863  00529C  0012               	return		;funcret
 18864  00529E                     __end_of_desliga_uart:
 18865                           	opt stack 0
 18866                           tosu	equ	0xFFF
 18867                           tosh	equ	0xFFE
 18868                           tosl	equ	0xFFD
 18869                           pclath	equ	0xFFA
 18870                           tblptru	equ	0xFF8
 18871                           tblptrh	equ	0xFF7
 18872                           tblptrl	equ	0xFF6
 18873                           tablat	equ	0xFF5
 18874                           prodh	equ	0xFF4
 18875                           prodl	equ	0xFF3
 18876                           intcon	equ	0xFF2
 18877                           intcon2	equ	0xFF1
 18878                           intcon3	equ	0xFF0
 18879                           indf0	equ	0xFEF
 18880                           postinc0	equ	0xFEE
 18881                           fsr0h	equ	0xFEA
 18882                           fsr0l	equ	0xFE9
 18883                           wreg	equ	0xFE8
 18884                           indf1	equ	0xFE7
 18885                           postinc1	equ	0xFE6
 18886                           postdec1	equ	0xFE5
 18887                           plusw1	equ	0xFE3
 18888                           fsr1h	equ	0xFE2
 18889                           fsr1l	equ	0xFE1
 18890                           indf2	equ	0xFDF
 18891                           postinc2	equ	0xFDE
 18892                           postdec2	equ	0xFDD
 18893                           plusw2	equ	0xFDB
 18894                           fsr2h	equ	0xFDA
 18895                           fsr2l	equ	0xFD9
 18896                           status	equ	0xFD8
 18897                           
 18898 ;; *************** function _desliga_SPI *****************
 18899 ;; Defined at:
 18900 ;;		line 69 in file "bibliotecas/SPI.c"
 18901 ;; Parameters:    Size  Location     Type
 18902 ;;		None
 18903 ;; Auto vars:     Size  Location     Type
 18904 ;;		None
 18905 ;; Return value:  Size  Location     Type
 18906 ;;                  1    wreg      void 
 18907 ;; Registers used:
 18908 ;;		wreg, status,2
 18909 ;; Tracked objects:
 18910 ;;		On entry : 0/0
 18911 ;;		On exit  : 0/0
 18912 ;;		Unchanged: 0/0
 18913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18914 ;;      Params:         0       0       0       0       0       0       0       0       0
 18915 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18916 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18917 ;;      Totals:         0       0       0       0       0       0       0       0       0
 18918 ;;Total ram usage:        0 bytes
 18919 ;; Hardware stack levels used:    1
 18920 ;; Hardware stack levels required when called:    3
 18921 ;; This function calls:
 18922 ;;		Nothing
 18923 ;; This function is called by:
 18924 ;;		_escrita_sdcard
 18925 ;; This function uses a non-reentrant model
 18926 ;;
 18927                           
 18928                           	psect	text77
 18929  0052B6                     __ptext77:
 18930                           	opt stack 0
 18931  0052B6                     _desliga_SPI:
 18932                           	opt stack 25
 18933                           
 18934                           ;SPI.c: 71: SSPSTAT = 0x00;
 18935                           
 18936                           ;incstack = 0
 18937  0052B6  0E00               	movlw	0
 18938  0052B8  6EC7               	movwf	4039,c	;volatile
 18939                           
 18940                           ;SPI.c: 72: SSPCON1 = 0x00;
 18941  0052BA  0E00               	movlw	0
 18942  0052BC  6EC6               	movwf	4038,c	;volatile
 18943                           
 18944                           ;SPI.c: 73: SSPCON1bits.SSPEN = 0;
 18945  0052BE  9AC6               	bcf	4038,5,c	;volatile
 18946  0052C0  0012               	return		;funcret
 18947  0052C2                     __end_of_desliga_SPI:
 18948                           	opt stack 0
 18949                           tosu	equ	0xFFF
 18950                           tosh	equ	0xFFE
 18951                           tosl	equ	0xFFD
 18952                           pclath	equ	0xFFA
 18953                           tblptru	equ	0xFF8
 18954                           tblptrh	equ	0xFF7
 18955                           tblptrl	equ	0xFF6
 18956                           tablat	equ	0xFF5
 18957                           prodh	equ	0xFF4
 18958                           prodl	equ	0xFF3
 18959                           intcon	equ	0xFF2
 18960                           intcon2	equ	0xFF1
 18961                           intcon3	equ	0xFF0
 18962                           indf0	equ	0xFEF
 18963                           postinc0	equ	0xFEE
 18964                           fsr0h	equ	0xFEA
 18965                           fsr0l	equ	0xFE9
 18966                           wreg	equ	0xFE8
 18967                           indf1	equ	0xFE7
 18968                           postinc1	equ	0xFE6
 18969                           postdec1	equ	0xFE5
 18970                           plusw1	equ	0xFE3
 18971                           fsr1h	equ	0xFE2
 18972                           fsr1l	equ	0xFE1
 18973                           indf2	equ	0xFDF
 18974                           postinc2	equ	0xFDE
 18975                           postdec2	equ	0xFDD
 18976                           plusw2	equ	0xFDB
 18977                           fsr2h	equ	0xFDA
 18978                           fsr2l	equ	0xFD9
 18979                           status	equ	0xFD8
 18980                           
 18981 ;; *************** function _dados_gps_to_sd *****************
 18982 ;; Defined at:
 18983 ;;		line 632 in file "bibliotecas/GPS.c"
 18984 ;; Parameters:    Size  Location     Type
 18985 ;;		None
 18986 ;; Auto vars:     Size  Location     Type
 18987 ;;		None
 18988 ;; Return value:  Size  Location     Type
 18989 ;;                  1    wreg      void 
 18990 ;; Registers used:
 18991 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18992 ;; Tracked objects:
 18993 ;;		On entry : 0/0
 18994 ;;		On exit  : 0/0
 18995 ;;		Unchanged: 0/0
 18996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18997 ;;      Params:         0       0       0       0       0       0       0       0       0
 18998 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18999 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19000 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19001 ;;Total ram usage:        0 bytes
 19002 ;; Hardware stack levels used:    1
 19003 ;; Hardware stack levels required when called:    5
 19004 ;; This function calls:
 19005 ;;		_monta_sd
 19006 ;; This function is called by:
 19007 ;;		_main
 19008 ;; This function uses a non-reentrant model
 19009 ;;
 19010                           
 19011                           	psect	text78
 19012  004EE2                     __ptext78:
 19013                           	opt stack 0
 19014  004EE2                     _dados_gps_to_sd:
 19015                           	opt stack 25
 19016                           
 19017                           ;GPS.c: 634: monta_sd(0, rawTime);
 19018                           
 19019                           ;incstack = 0
 19020  004EE2  0E6E               	movlw	low _rawTime
 19021  004EE4  0100               	movlb	0	; () banked
 19022  004EE6  6F66               	movwf	monta_sd@dado& (0+255),b
 19023  004EE8  0E01               	movlw	high _rawTime
 19024  004EEA  6F67               	movwf	(monta_sd@dado+1)& (0+255),b
 19025  004EEC  0E00               	movlw	0
 19026  004EEE  EC66  F01D         	call	_monta_sd
 19027                           
 19028                           ;GPS.c: 635: monta_sd(1, rawDate);
 19029  004EF2  0EF9               	movlw	low _rawDate
 19030  004EF4  0100               	movlb	0	; () banked
 19031  004EF6  6F66               	movwf	monta_sd@dado& (0+255),b
 19032  004EF8  0E00               	movlw	high _rawDate
 19033  004EFA  6F67               	movwf	(monta_sd@dado+1)& (0+255),b
 19034  004EFC  0E01               	movlw	1
 19035  004EFE  EC66  F01D         	call	_monta_sd
 19036                           
 19037                           ;GPS.c: 636: monta_sd(2, rawLatitude);
 19038  004F02  0E55               	movlw	low _rawLatitude
 19039  004F04  0100               	movlb	0	; () banked
 19040  004F06  6F66               	movwf	monta_sd@dado& (0+255),b
 19041  004F08  0E01               	movlw	high _rawLatitude
 19042  004F0A  6F67               	movwf	(monta_sd@dado+1)& (0+255),b
 19043  004F0C  0E02               	movlw	2
 19044  004F0E  EC66  F01D         	call	_monta_sd
 19045                           
 19046                           ;GPS.c: 637: monta_sd(3, rawLongitude);
 19047  004F12  0E48               	movlw	low _rawLongitude
 19048  004F14  0100               	movlb	0	; () banked
 19049  004F16  6F66               	movwf	monta_sd@dado& (0+255),b
 19050  004F18  0E01               	movlw	high _rawLongitude
 19051  004F1A  6F67               	movwf	(monta_sd@dado+1)& (0+255),b
 19052  004F1C  0E03               	movlw	3
 19053  004F1E  EC66  F01D         	call	_monta_sd
 19054  004F22  0012               	return	
 19055  004F24                     __end_of_dados_gps_to_sd:
 19056                           	opt stack 0
 19057                           tosu	equ	0xFFF
 19058                           tosh	equ	0xFFE
 19059                           tosl	equ	0xFFD
 19060                           pclath	equ	0xFFA
 19061                           tblptru	equ	0xFF8
 19062                           tblptrh	equ	0xFF7
 19063                           tblptrl	equ	0xFF6
 19064                           tablat	equ	0xFF5
 19065                           prodh	equ	0xFF4
 19066                           prodl	equ	0xFF3
 19067                           intcon	equ	0xFF2
 19068                           intcon2	equ	0xFF1
 19069                           intcon3	equ	0xFF0
 19070                           indf0	equ	0xFEF
 19071                           postinc0	equ	0xFEE
 19072                           fsr0h	equ	0xFEA
 19073                           fsr0l	equ	0xFE9
 19074                           wreg	equ	0xFE8
 19075                           indf1	equ	0xFE7
 19076                           postinc1	equ	0xFE6
 19077                           postdec1	equ	0xFE5
 19078                           plusw1	equ	0xFE3
 19079                           fsr1h	equ	0xFE2
 19080                           fsr1l	equ	0xFE1
 19081                           indf2	equ	0xFDF
 19082                           postinc2	equ	0xFDE
 19083                           postdec2	equ	0xFDD
 19084                           plusw2	equ	0xFDB
 19085                           fsr2h	equ	0xFDA
 19086                           fsr2l	equ	0xFD9
 19087                           status	equ	0xFD8
 19088                           
 19089 ;; *************** function _monta_sd *****************
 19090 ;; Defined at:
 19091 ;;		line 248 in file "bibliotecas/SDCard.c"
 19092 ;; Parameters:    Size  Location     Type
 19093 ;;  index           1    wreg     unsigned char 
 19094 ;;  dado            2    6[BANK0 ] PTR unsigned char 
 19095 ;;		 -> rawDate(7), rawLongitude(13), rawLatitude(13), rawTime(11), 
 19096 ;; Auto vars:     Size  Location     Type
 19097 ;;  index           1    8[BANK0 ] unsigned char 
 19098 ;;  i               1   10[BANK0 ] unsigned char 
 19099 ;;  size            1    9[BANK0 ] unsigned char 
 19100 ;; Return value:  Size  Location     Type
 19101 ;;                  1    wreg      void 
 19102 ;; Registers used:
 19103 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19104 ;; Tracked objects:
 19105 ;;		On entry : 0/0
 19106 ;;		On exit  : 0/0
 19107 ;;		Unchanged: 0/0
 19108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19109 ;;      Params:         0       2       0       0       0       0       0       0       0
 19110 ;;      Locals:         0       3       0       0       0       0       0       0       0
 19111 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19112 ;;      Totals:         0       5       0       0       0       0       0       0       0
 19113 ;;Total ram usage:        5 bytes
 19114 ;; Hardware stack levels used:    1
 19115 ;; Hardware stack levels required when called:    4
 19116 ;; This function calls:
 19117 ;;		_strlen
 19118 ;; This function is called by:
 19119 ;;		_dados_gps_to_sd
 19120 ;; This function uses a non-reentrant model
 19121 ;;
 19122                           
 19123                           	psect	text79
 19124  003ACC                     __ptext79:
 19125                           	opt stack 0
 19126  003ACC                     _monta_sd:
 19127                           	opt stack 25
 19128                           
 19129                           ;incstack = 0
 19130                           ;monta_sd@index stored from wreg
 19131  003ACC  0100               	movlb	0	; () banked
 19132  003ACE  6F68               	movwf	monta_sd@index& (0+255),b
 19133                           
 19134                           ;SDCard.c: 250: unsigned char i, size;
 19135                           ;SDCard.c: 251: size = strlen(dado);
 19136  003AD0  C066  F060         	movff	monta_sd@dado,strlen@s
 19137  003AD4  C067  F061         	movff	monta_sd@dado+1,strlen@s+1
 19138  003AD8  ECB2  F027         	call	_strlen	;wreg free
 19139  003ADC  0100               	movlb	0	; () banked
 19140  003ADE  5160               	movf	?_strlen& (0+255),w,b
 19141  003AE0  6F69               	movwf	monta_sd@size& (0+255),b
 19142                           
 19143                           ;SDCard.c: 252: switch(index)
 19144  003AE2  D07C               	goto	l262
 19145  003AE4                     
 19146                           ; BSR set to: 0
 19147                           ;SDCard.c: 255: for(i=0; i<6;i++)
 19148                           
 19149                           ; BSR set to: 0
 19150  003AE4  0E00               	movlw	0
 19151  003AE6  6F6A               	movwf	monta_sd@i& (0+255),b
 19152  003AE8                     l10573:
 19153                           
 19154                           ; BSR set to: 0
 19155  003AE8  0E05               	movlw	5
 19156  003AEA  656A               	cpfsgt	monta_sd@i& (0+255),b
 19157  003AEC  D001               	goto	l264
 19158  003AEE  0012               	return	
 19159  003AF0                     l264:
 19160                           
 19161                           ; BSR set to: 0
 19162                           ;SDCard.c: 256: {
 19163                           ;SDCard.c: 257: string_dado.hora[i] = *dado;
 19164                           
 19165                           ; BSR set to: 0
 19166  003AF0  C066  FFD9         	movff	monta_sd@dado,fsr2l
 19167  003AF4  C067  FFDA         	movff	monta_sd@dado+1,fsr2h
 19168  003AF8  516A               	movf	monta_sd@i& (0+255),w,b
 19169  003AFA  0D01               	mullw	1
 19170  003AFC  0E07               	movlw	low (_string_dado+7)
 19171  003AFE  24F3               	addwf	prodl,w,c
 19172  003B00  6EE1               	movwf	fsr1l,c
 19173  003B02  0E01               	movlw	high (_string_dado+7)
 19174  003B04  20F4               	addwfc	prodh,w,c
 19175  003B06  6EE2               	movwf	fsr1h,c
 19176  003B08  CFDF FFE7          	movff	indf2,indf1
 19177                           
 19178                           ; BSR set to: 0
 19179                           ;SDCard.c: 258: dado++;
 19180  003B0C  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 19181  003B0E  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 19182                           
 19183                           ; BSR set to: 0
 19184  003B10  2B6A               	incf	monta_sd@i& (0+255),f,b
 19185  003B12  D7EA               	goto	l10573
 19186  003B14                     
 19187                           ; BSR set to: 0
 19188                           ;SDCard.c: 263: for(i=0; i<6;i++)
 19189                           
 19190                           ; BSR set to: 0
 19191  003B14  0E00               	movlw	0
 19192  003B16  6F6A               	movwf	monta_sd@i& (0+255),b
 19193  003B18                     l10587:
 19194                           
 19195                           ; BSR set to: 0
 19196  003B18  0E05               	movlw	5
 19197  003B1A  656A               	cpfsgt	monta_sd@i& (0+255),b
 19198  003B1C  D001               	goto	l268
 19199  003B1E  D012               	goto	u13500
 19200  003B20                     l268:
 19201                           
 19202                           ; BSR set to: 0
 19203                           ;SDCard.c: 264: {
 19204                           ;SDCard.c: 265: string_dado.data[i] = *dado;
 19205                           
 19206                           ; BSR set to: 0
 19207  003B20  C066  FFD9         	movff	monta_sd@dado,fsr2l
 19208  003B24  C067  FFDA         	movff	monta_sd@dado+1,fsr2h
 19209  003B28  516A               	movf	monta_sd@i& (0+255),w,b
 19210  003B2A  0D01               	mullw	1
 19211  003B2C  0E00               	movlw	low _string_dado
 19212  003B2E  24F3               	addwf	prodl,w,c
 19213  003B30  6EE1               	movwf	fsr1l,c
 19214  003B32  0E01               	movlw	high _string_dado
 19215  003B34  20F4               	addwfc	prodh,w,c
 19216  003B36  6EE2               	movwf	fsr1h,c
 19217  003B38  CFDF FFE7          	movff	indf2,indf1
 19218                           
 19219                           ; BSR set to: 0
 19220                           ;SDCard.c: 266: dado++;
 19221  003B3C  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 19222  003B3E  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 19223                           
 19224                           ; BSR set to: 0
 19225  003B40  2B6A               	incf	monta_sd@i& (0+255),f,b
 19226  003B42  D7EA               	goto	l10587
 19227  003B44                     u13500:
 19228                           
 19229                           ; BSR set to: 0
 19230                           ;SDCard.c: 269: {
 19231                           ;SDCard.c: 270: data_hoje = 1;
 19232                           
 19233                           ; BSR set to: 0
 19234                           
 19235                           ;SDCard.c: 267: }
 19236                           ;SDCard.c: 268: if(string_dado.data)
 19237  003B44  0E01               	movlw	1
 19238  003B46  6E31               	movwf	_data_hoje,c
 19239                           
 19240                           ; BSR set to: 0
 19241                           ;SDCard.c: 273: }
 19242                           ;SDCard.c: 274: break;
 19243  003B48  0012               	return	
 19244  003B4A                     
 19245                           ; BSR set to: 0
 19246                           ;SDCard.c: 277: for(i=0; i<13;i++)
 19247                           
 19248                           ; BSR set to: 0
 19249  003B4A  0E00               	movlw	0
 19250  003B4C  6F6A               	movwf	monta_sd@i& (0+255),b
 19251  003B4E                     l10603:
 19252                           
 19253                           ; BSR set to: 0
 19254  003B4E  0E0C               	movlw	12
 19255  003B50  656A               	cpfsgt	monta_sd@i& (0+255),b
 19256  003B52  D001               	goto	l272
 19257  003B54  0012               	return	
 19258  003B56                     l272:
 19259                           
 19260                           ; BSR set to: 0
 19261                           ;SDCard.c: 278: {
 19262                           ;SDCard.c: 279: string_dado.LAT[i] = *dado;
 19263                           
 19264                           ; BSR set to: 0
 19265  003B56  C066  FFD9         	movff	monta_sd@dado,fsr2l
 19266  003B5A  C067  FFDA         	movff	monta_sd@dado+1,fsr2h
 19267  003B5E  516A               	movf	monta_sd@i& (0+255),w,b
 19268  003B60  0D01               	mullw	1
 19269  003B62  0E12               	movlw	low (_string_dado+18)
 19270  003B64  24F3               	addwf	prodl,w,c
 19271  003B66  6EE1               	movwf	fsr1l,c
 19272  003B68  0E01               	movlw	high (_string_dado+18)
 19273  003B6A  20F4               	addwfc	prodh,w,c
 19274  003B6C  6EE2               	movwf	fsr1h,c
 19275  003B6E  CFDF FFE7          	movff	indf2,indf1
 19276                           
 19277                           ; BSR set to: 0
 19278                           ;SDCard.c: 280: dado++;
 19279  003B72  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 19280  003B74  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 19281                           
 19282                           ; BSR set to: 0
 19283  003B76  2B6A               	incf	monta_sd@i& (0+255),f,b
 19284  003B78  D7EA               	goto	l10603
 19285  003B7A                     
 19286                           ; BSR set to: 0
 19287                           ;SDCard.c: 286: for(i=0; i<13;i++)
 19288                           
 19289                           ; BSR set to: 0
 19290  003B7A  0E00               	movlw	0
 19291  003B7C  6F6A               	movwf	monta_sd@i& (0+255),b
 19292  003B7E                     l10617:
 19293                           
 19294                           ; BSR set to: 0
 19295  003B7E  0E0C               	movlw	12
 19296  003B80  656A               	cpfsgt	monta_sd@i& (0+255),b
 19297  003B82  D001               	goto	l275
 19298  003B84  0012               	return	
 19299  003B86                     l275:
 19300                           
 19301                           ; BSR set to: 0
 19302                           ;SDCard.c: 287: {
 19303                           ;SDCard.c: 288: string_dado.LONG[i] = *dado;
 19304                           
 19305                           ; BSR set to: 0
 19306  003B86  C066  FFD9         	movff	monta_sd@dado,fsr2l
 19307  003B8A  C067  FFDA         	movff	monta_sd@dado+1,fsr2h
 19308  003B8E  516A               	movf	monta_sd@i& (0+255),w,b
 19309  003B90  0D01               	mullw	1
 19310  003B92  0E1F               	movlw	low (_string_dado+31)
 19311  003B94  24F3               	addwf	prodl,w,c
 19312  003B96  6EE1               	movwf	fsr1l,c
 19313  003B98  0E01               	movlw	high (_string_dado+31)
 19314  003B9A  20F4               	addwfc	prodh,w,c
 19315  003B9C  6EE2               	movwf	fsr1h,c
 19316  003B9E  CFDF FFE7          	movff	indf2,indf1
 19317                           
 19318                           ; BSR set to: 0
 19319                           ;SDCard.c: 289: dado++;
 19320  003BA2  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 19321  003BA4  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 19322                           
 19323                           ; BSR set to: 0
 19324  003BA6  2B6A               	incf	monta_sd@i& (0+255),f,b
 19325  003BA8  D7EA               	goto	l10617
 19326  003BAA                     
 19327                           ; BSR set to: 0
 19328                           ;SDCard.c: 295: for(i=0; i<size;i++)
 19329                           
 19330                           ; BSR set to: 0
 19331  003BAA  0E00               	movlw	0
 19332  003BAC  6F6A               	movwf	monta_sd@i& (0+255),b
 19333  003BAE  D011               	goto	l278
 19334  003BB0                     
 19335                           ; BSR set to: 0
 19336                           ;SDCard.c: 296: {
 19337                           ;SDCard.c: 297: string_dado.LONG[i] = *dado;
 19338                           
 19339                           ; BSR set to: 0
 19340  003BB0  C066  FFD9         	movff	monta_sd@dado,fsr2l
 19341  003BB4  C067  FFDA         	movff	monta_sd@dado+1,fsr2h
 19342  003BB8  516A               	movf	monta_sd@i& (0+255),w,b
 19343  003BBA  0D01               	mullw	1
 19344  003BBC  0E1F               	movlw	low (_string_dado+31)
 19345  003BBE  24F3               	addwf	prodl,w,c
 19346  003BC0  6EE1               	movwf	fsr1l,c
 19347  003BC2  0E01               	movlw	high (_string_dado+31)
 19348  003BC4  20F4               	addwfc	prodh,w,c
 19349  003BC6  6EE2               	movwf	fsr1h,c
 19350  003BC8  CFDF FFE7          	movff	indf2,indf1
 19351                           
 19352                           ; BSR set to: 0
 19353                           ;SDCard.c: 298: dado++;
 19354  003BCC  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 19355  003BCE  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 19356                           
 19357                           ; BSR set to: 0
 19358  003BD0  2B6A               	incf	monta_sd@i& (0+255),f,b
 19359  003BD2                     l278:
 19360                           
 19361                           ; BSR set to: 0
 19362                           
 19363                           ; BSR set to: 0
 19364  003BD2  5169               	movf	monta_sd@size& (0+255),w,b
 19365  003BD4  5D6A               	subwf	monta_sd@i& (0+255),w,b
 19366  003BD6  B0D8               	btfsc	status,0,c
 19367  003BD8  0012               	return	
 19368  003BDA  D7EA               	goto	l279
 19369  003BDC                     l262:
 19370                           
 19371                           ; BSR set to: 0
 19372                           
 19373                           ; BSR set to: 0
 19374  003BDC  5168               	movf	monta_sd@index& (0+255),w,b
 19375                           
 19376                           ; Switch size 1, requested type "space"
 19377                           ; Number of cases is 5, Range of values is 0 to 4
 19378                           ; switch strategies available:
 19379                           ; Name         Instructions Cycles
 19380                           ; simple_byte           16     9 (average)
 19381                           ;	Chosen strategy is simple_byte
 19382  003BDE  0A00               	xorlw	0	; case 0
 19383  003BE0  B4D8               	btfsc	status,2,c
 19384  003BE2  D780               	goto	l263
 19385  003BE4  0A01               	xorlw	1	; case 1
 19386  003BE6  B4D8               	btfsc	status,2,c
 19387  003BE8  D795               	goto	l267
 19388  003BEA  0A03               	xorlw	3	; case 2
 19389  003BEC  B4D8               	btfsc	status,2,c
 19390  003BEE  D7AD               	goto	l271
 19391  003BF0  0A01               	xorlw	1	; case 3
 19392  003BF2  B4D8               	btfsc	status,2,c
 19393  003BF4  D7C2               	goto	l274
 19394  003BF6  0A07               	xorlw	7	; case 4
 19395  003BF8  A4D8               	btfss	status,2,c
 19396  003BFA  0012               	return	
 19397  003BFC  D7D6               	goto	l277
 19398  003BFE                     __end_of_monta_sd:
 19399                           	opt stack 0
 19400                           tosu	equ	0xFFF
 19401                           tosh	equ	0xFFE
 19402                           tosl	equ	0xFFD
 19403                           pclath	equ	0xFFA
 19404                           tblptru	equ	0xFF8
 19405                           tblptrh	equ	0xFF7
 19406                           tblptrl	equ	0xFF6
 19407                           tablat	equ	0xFF5
 19408                           prodh	equ	0xFF4
 19409                           prodl	equ	0xFF3
 19410                           intcon	equ	0xFF2
 19411                           intcon2	equ	0xFF1
 19412                           intcon3	equ	0xFF0
 19413                           indf0	equ	0xFEF
 19414                           postinc0	equ	0xFEE
 19415                           fsr0h	equ	0xFEA
 19416                           fsr0l	equ	0xFE9
 19417                           wreg	equ	0xFE8
 19418                           indf1	equ	0xFE7
 19419                           postinc1	equ	0xFE6
 19420                           postdec1	equ	0xFE5
 19421                           plusw1	equ	0xFE3
 19422                           fsr1h	equ	0xFE2
 19423                           fsr1l	equ	0xFE1
 19424                           indf2	equ	0xFDF
 19425                           postinc2	equ	0xFDE
 19426                           postdec2	equ	0xFDD
 19427                           plusw2	equ	0xFDB
 19428                           fsr2h	equ	0xFDA
 19429                           fsr2l	equ	0xFD9
 19430                           status	equ	0xFD8
 19431                           
 19432 ;; *************** function _strlen *****************
 19433 ;; Defined at:
 19434 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
 19435 ;; Parameters:    Size  Location     Type
 19436 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 19437 ;;		 -> rawDate(7), rawLongitude(13), rawLatitude(13), rawTime(11), 
 19438 ;; Auto vars:     Size  Location     Type
 19439 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
 19440 ;;		 -> rawDate(7), rawLongitude(13), rawLatitude(13), rawTime(11), 
 19441 ;; Return value:  Size  Location     Type
 19442 ;;                  2    0[BANK0 ] unsigned int 
 19443 ;; Registers used:
 19444 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19445 ;; Tracked objects:
 19446 ;;		On entry : 0/0
 19447 ;;		On exit  : 0/0
 19448 ;;		Unchanged: 0/0
 19449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19450 ;;      Params:         0       2       0       0       0       0       0       0       0
 19451 ;;      Locals:         0       2       0       0       0       0       0       0       0
 19452 ;;      Temps:          0       2       0       0       0       0       0       0       0
 19453 ;;      Totals:         0       6       0       0       0       0       0       0       0
 19454 ;;Total ram usage:        6 bytes
 19455 ;; Hardware stack levels used:    1
 19456 ;; Hardware stack levels required when called:    3
 19457 ;; This function calls:
 19458 ;;		Nothing
 19459 ;; This function is called by:
 19460 ;;		_monta_sd
 19461 ;; This function uses a non-reentrant model
 19462 ;;
 19463                           
 19464                           	psect	text80
 19465  004F64                     __ptext80:
 19466                           	opt stack 0
 19467  004F64                     _strlen:
 19468                           	opt stack 25
 19469                           
 19470                           ; BSR set to: 0
 19471                           ;incstack = 0
 19472  004F64  C060  F064         	movff	strlen@s,strlen@cp
 19473  004F68  C061  F065         	movff	strlen@s+1,strlen@cp+1
 19474  004F6C  D003               	goto	l1917
 19475  004F6E  0100               	movlb	0	; () banked
 19476  004F70  4B64               	infsnz	strlen@cp& (0+255),f,b
 19477  004F72  2B65               	incf	(strlen@cp+1)& (0+255),f,b
 19478  004F74                     l1917:
 19479                           
 19480                           ; BSR set to: 0
 19481  004F74  C064  FFD9         	movff	strlen@cp,fsr2l
 19482  004F78  C065  FFDA         	movff	strlen@cp+1,fsr2h
 19483  004F7C  50DF               	movf	indf2,w,c
 19484  004F7E  A4D8               	btfss	status,2,c
 19485  004F80  D7F6               	goto	l1918
 19486  004F82  C060  F062         	movff	strlen@s,??_strlen
 19487  004F86  C061  F063         	movff	strlen@s+1,??_strlen+1
 19488  004F8A  0100               	movlb	0	; () banked
 19489  004F8C  1F62               	comf	??_strlen& (0+255),f,b
 19490  004F8E  1F63               	comf	(??_strlen+1)& (0+255),f,b
 19491  004F90  4B62               	infsnz	??_strlen& (0+255),f,b
 19492  004F92  2B63               	incf	(??_strlen+1)& (0+255),f,b
 19493  004F94  5164               	movf	strlen@cp& (0+255),w,b
 19494  004F96  2562               	addwf	??_strlen& (0+255),w,b
 19495  004F98  6F60               	movwf	?_strlen& (0+255),b
 19496  004F9A  5165               	movf	(strlen@cp+1)& (0+255),w,b
 19497  004F9C  2163               	addwfc	(??_strlen+1)& (0+255),w,b
 19498  004F9E  6F61               	movwf	(?_strlen+1)& (0+255),b
 19499  004FA0  0012               	return	
 19500  004FA2                     __end_of_strlen:
 19501                           	opt stack 0
 19502                           tosu	equ	0xFFF
 19503                           tosh	equ	0xFFE
 19504                           tosl	equ	0xFFD
 19505                           pclath	equ	0xFFA
 19506                           tblptru	equ	0xFF8
 19507                           tblptrh	equ	0xFF7
 19508                           tblptrl	equ	0xFF6
 19509                           tablat	equ	0xFF5
 19510                           prodh	equ	0xFF4
 19511                           prodl	equ	0xFF3
 19512                           intcon	equ	0xFF2
 19513                           intcon2	equ	0xFF1
 19514                           intcon3	equ	0xFF0
 19515                           indf0	equ	0xFEF
 19516                           postinc0	equ	0xFEE
 19517                           fsr0h	equ	0xFEA
 19518                           fsr0l	equ	0xFE9
 19519                           wreg	equ	0xFE8
 19520                           indf1	equ	0xFE7
 19521                           postinc1	equ	0xFE6
 19522                           postdec1	equ	0xFE5
 19523                           plusw1	equ	0xFE3
 19524                           fsr1h	equ	0xFE2
 19525                           fsr1l	equ	0xFE1
 19526                           indf2	equ	0xFDF
 19527                           postinc2	equ	0xFDE
 19528                           postdec2	equ	0xFDD
 19529                           plusw2	equ	0xFDB
 19530                           fsr2h	equ	0xFDA
 19531                           fsr2l	equ	0xFD9
 19532                           status	equ	0xFD8
 19533                           
 19534 ;; *************** function _isr *****************
 19535 ;; Defined at:
 19536 ;;		line 86 in file "main.c"
 19537 ;; Parameters:    Size  Location     Type
 19538 ;;		None
 19539 ;; Auto vars:     Size  Location     Type
 19540 ;;  cont            1   31[COMRAM] unsigned char 
 19541 ;; Return value:  Size  Location     Type
 19542 ;;                  1    wreg      void 
 19543 ;; Registers used:
 19544 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19545 ;; Tracked objects:
 19546 ;;		On entry : 0/0
 19547 ;;		On exit  : 0/0
 19548 ;;		Unchanged: 0/0
 19549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19550 ;;      Params:         0       0       0       0       0       0       0       0       0
 19551 ;;      Locals:         1       0       0       0       0       0       0       0       0
 19552 ;;      Temps:         20       0       0       0       0       0       0       0       0
 19553 ;;      Totals:        21       0       0       0       0       0       0       0       0
 19554 ;;Total ram usage:       21 bytes
 19555 ;; Hardware stack levels used:    1
 19556 ;; Hardware stack levels required when called:    2
 19557 ;; This function calls:
 19558 ;;		_GPSRead
 19559 ;;		_recebe_dado_uart
 19560 ;;		i2_write_timer_zero
 19561 ;; This function is called by:
 19562 ;;		Interrupt level 2
 19563 ;; This function uses a non-reentrant model
 19564 ;;
 19565                           
 19566                           	psect	intcode
 19567  000008                     __pintcode:
 19568                           	opt stack 0
 19569  000008                     _isr:
 19570                           	opt stack 14
 19571                           
 19572                           ; BSR set to: 0
 19573                           ;incstack = 0
 19574  000008  8240               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19575  00000A  ED2D  F01C         	call	int_func,f	;refresh shadow registers
 19576                           tosu	equ	0xFFF
 19577                           tosh	equ	0xFFE
 19578                           tosl	equ	0xFFD
 19579                           pclath	equ	0xFFA
 19580                           tblptru	equ	0xFF8
 19581                           tblptrh	equ	0xFF7
 19582                           tblptrl	equ	0xFF6
 19583                           tablat	equ	0xFF5
 19584                           prodh	equ	0xFF4
 19585                           prodl	equ	0xFF3
 19586                           intcon	equ	0xFF2
 19587                           intcon2	equ	0xFF1
 19588                           intcon3	equ	0xFF0
 19589                           indf0	equ	0xFEF
 19590                           postinc0	equ	0xFEE
 19591                           fsr0h	equ	0xFEA
 19592                           fsr0l	equ	0xFE9
 19593                           wreg	equ	0xFE8
 19594                           indf1	equ	0xFE7
 19595                           postinc1	equ	0xFE6
 19596                           postdec1	equ	0xFE5
 19597                           plusw1	equ	0xFE3
 19598                           fsr1h	equ	0xFE2
 19599                           fsr1l	equ	0xFE1
 19600                           indf2	equ	0xFDF
 19601                           postinc2	equ	0xFDE
 19602                           postdec2	equ	0xFDD
 19603                           plusw2	equ	0xFDB
 19604                           fsr2h	equ	0xFDA
 19605                           fsr2l	equ	0xFD9
 19606                           status	equ	0xFD8
 19607                           
 19608                           	psect	intcode_body
 19609  00385A                     __pintcode_body:
 19610                           	opt stack 14
 19611  00385A                     int_func:
 19612                           	opt stack 14
 19613  00385A  0006               	pop		; remove dummy address from shadow register refresh
 19614  00385C  CFFA F00E          	movff	pclath,??_isr+2
 19615  003860  CFFB F00F          	movff	pclatu,??_isr+3
 19616  003864  CFE9 F010          	movff	fsr0l,??_isr+4
 19617  003868  CFEA F011          	movff	fsr0h,??_isr+5
 19618  00386C  CFE1 F012          	movff	fsr1l,??_isr+6
 19619  003870  CFE2 F013          	movff	fsr1h,??_isr+7
 19620  003874  CFD9 F014          	movff	fsr2l,??_isr+8
 19621  003878  CFDA F015          	movff	fsr2h,??_isr+9
 19622  00387C  CFF3 F016          	movff	prodl,??_isr+10
 19623  003880  CFF4 F017          	movff	prodh,??_isr+11
 19624  003884  CFF6 F018          	movff	tblptrl,??_isr+12
 19625  003888  CFF7 F019          	movff	tblptrh,??_isr+13
 19626  00388C  CFF8 F01A          	movff	tblptru,??_isr+14
 19627  003890  CFF5 F01B          	movff	tablat,??_isr+15
 19628  003894  C040  F01C         	movff	btemp,??_isr+16
 19629  003898  C041  F01D         	movff	btemp+1,??_isr+17
 19630  00389C  C042  F01E         	movff	btemp+2,??_isr+18
 19631  0038A0  C043  F01F         	movff	btemp+3,??_isr+19
 19632                           
 19633                           ;main.c: 88: unsigned char cont;
 19634                           ;main.c: 91: if (PIE1bits.RCIE && PIR1bits.RCIF)
 19635  0038A4  BA9D               	btfsc	3997,5,c	;volatile
 19636  0038A6  AA9E               	btfss	3998,5,c	;volatile
 19637  0038A8  D014               	goto	i2l67
 19638                           
 19639                           ;main.c: 92: {
 19640                           ;main.c: 93: PIR1bits.RCIF = 0;
 19641  0038AA  9A9E               	bcf	3998,5,c	;volatile
 19642                           
 19643                           ;main.c: 94: data_uart_recebe = recebe_dado_uart();
 19644  0038AC  EC31  F029         	call	_recebe_dado_uart	;wreg free
 19645  0038B0  6E36               	movwf	_data_uart_recebe,c
 19646                           
 19647                           ;main.c: 95: GPSRead(data_uart_recebe);
 19648  0038B2  5036               	movf	_data_uart_recebe,w,c
 19649  0038B4  EC9A  F012         	call	_GPSRead
 19650                           
 19651                           ;main.c: 96: PORTBbits.RB2 = !PORTBbits.RB2;
 19652  0038B8  B481               	btfsc	3969,2,c	;volatile
 19653  0038BA  D003               	goto	i2u1383_40
 19654  0038BC  6A0C               	clrf	??_isr& (0+255),c
 19655  0038BE  2A0C               	incf	??_isr& (0+255),f,c
 19656  0038C0  D001               	goto	i2u1384_48
 19657  0038C2                     i2u1383_40:
 19658  0038C2  6A0C               	clrf	??_isr& (0+255),c
 19659  0038C4                     i2u1384_48:
 19660  0038C4  460C               	rlncf	??_isr,f,c
 19661  0038C6  460C               	rlncf	??_isr,f,c
 19662  0038C8  5081               	movf	3969,w,c	;volatile
 19663  0038CA  180C               	xorwf	??_isr,w,c
 19664  0038CC  0BFB               	andlw	-5
 19665  0038CE  180C               	xorwf	??_isr,w,c
 19666  0038D0  6E81               	movwf	3969,c	;volatile
 19667  0038D2                     i2l67:
 19668                           
 19669                           ;main.c: 97: }
 19670                           ;main.c: 100: unsigned char cont;
 19671                           ;main.c: 102: if (TMR0IF && T0IF)
 19672  0038D2  B4F2               	btfsc	intcon,2,c	;volatile
 19673  0038D4  A4F2               	btfss	intcon,2,c	;volatile
 19674  0038D6  D037               	goto	i2l68
 19675                           
 19676                           ;main.c: 103: {
 19677                           ;main.c: 104: INTCONbits.TMR0IF = 0;
 19678  0038D8  94F2               	bcf	intcon,2,c	;volatile
 19679                           
 19680                           ;main.c: 105: sinaliza_int_timer = 1;
 19681  0038DA  0E01               	movlw	1
 19682  0038DC  0100               	movlb	0	; () banked
 19683  0038DE  6FF8               	movwf	_sinaliza_int_timer& (0+255),b
 19684                           
 19685                           ;main.c: 107: for(cont= 0; cont<2;cont++)
 19686  0038E0  0E00               	movlw	0
 19687  0038E2  6E20               	movwf	isr@cont,c
 19688  0038E4                     i2l10899:
 19689                           
 19690                           ; BSR set to: 0
 19691  0038E4  0E01               	movlw	1
 19692  0038E6  6420               	cpfsgt	isr@cont,c
 19693  0038E8  D001               	goto	i2l69
 19694  0038EA  D019               	goto	i2u1389_40
 19695  0038EC                     i2l69:
 19696                           
 19697                           ;main.c: 108: {
 19698                           ;main.c: 109: if(tempo_tarefa[cont]>0) tempo_tarefa[cont]--;
 19699                           
 19700                           ; BSR set to: 0
 19701  0038EC  5020               	movf	isr@cont,w,c
 19702  0038EE  0D02               	mullw	2
 19703  0038F0  0E21               	movlw	low _tempo_tarefa
 19704  0038F2  24F3               	addwf	prodl,w,c
 19705  0038F4  6ED9               	movwf	fsr2l,c
 19706  0038F6  0E00               	movlw	high _tempo_tarefa
 19707  0038F8  20F4               	addwfc	prodh,w,c
 19708  0038FA  6EDA               	movwf	fsr2h,c
 19709  0038FC  50DE               	movf	postinc2,w,c
 19710  0038FE  10DE               	iorwf	postinc2,w,c
 19711  003900  B4D8               	btfsc	status,2,c
 19712  003902  D00B               	goto	i2l71
 19713  003904  5020               	movf	isr@cont,w,c
 19714  003906  0D02               	mullw	2
 19715  003908  0E21               	movlw	low _tempo_tarefa
 19716  00390A  24F3               	addwf	prodl,w,c
 19717  00390C  6ED9               	movwf	fsr2l,c
 19718  00390E  0E00               	movlw	high _tempo_tarefa
 19719  003910  20F4               	addwfc	prodh,w,c
 19720  003912  6EDA               	movwf	fsr2h,c
 19721  003914  06DE               	decf	postinc2,f,c
 19722  003916  0E00               	movlw	0
 19723  003918  5ADD               	subwfb	postdec2,f,c
 19724  00391A                     i2l71:
 19725  00391A  2A20               	incf	isr@cont,f,c
 19726  00391C  D7E3               	goto	i2l10899
 19727  00391E                     i2u1389_40:
 19728                           
 19729                           ;main.c: 110: }
 19730                           ;main.c: 112: if(tarefa_em_execucao == 1)
 19731  00391E  0435               	decf	_tarefa_em_execucao,w,c	;volatile
 19732  003920  A4D8               	btfss	status,2,c
 19733  003922  D00B               	goto	i2l73
 19734                           
 19735                           ;main.c: 113: {
 19736                           ;main.c: 114: timeout_tarefa--;
 19737  003924  062B               	decf	_timeout_tarefa,f,c
 19738  003926  A0D8               	btfss	status,0,c
 19739  003928  062C               	decf	_timeout_tarefa+1,f,c
 19740                           
 19741                           ;main.c: 115: if(!timeout_tarefa)
 19742  00392A  502B               	movf	_timeout_tarefa,w,c
 19743  00392C  102C               	iorwf	_timeout_tarefa+1,w,c
 19744  00392E  A4D8               	btfss	status,2,c
 19745  003930  D004               	goto	i2l73
 19746                           
 19747                           ;main.c: 116: {
 19748                           ;main.c: 118: PCLATH = 0;
 19749  003932  0E00               	movlw	0
 19750  003934  6EFA               	movwf	pclath,c	;volatile
 19751                           
 19752                           ;main.c: 119: PCL = 0;
 19753  003936  0E00               	movlw	0
 19754  003938  6EF9               	movwf	pcl,c	;volatile
 19755  00393A                     i2l73:
 19756                           
 19757                           ;main.c: 120: }
 19758                           ;main.c: 121: }
 19759                           ;main.c: 124: write_timer_zero(0x0083);
 19760  00393A  0E00               	movlw	0
 19761  00393C  6E02               	movwf	i2write_timer_zero@timer0+1,c
 19762  00393E  0E83               	movlw	131
 19763  003940  6E01               	movwf	i2write_timer_zero@timer0,c
 19764  003942  EC28  F029         	call	i2_write_timer_zero	;wreg free
 19765  003946                     i2l68:
 19766                           
 19767                           ;main.c: 126: }
 19768                           ;main.c: 128: if (INT0IF && INT0IE)
 19769  003946  B2F2               	btfsc	intcon,1,c	;volatile
 19770  003948  A8F2               	btfss	intcon,4,c	;volatile
 19771  00394A  D001               	goto	i2l74
 19772                           
 19773                           ;main.c: 129: {
 19774                           ;main.c: 130: INT0IF = 0;
 19775  00394C  92F2               	bcf	intcon,1,c	;volatile
 19776  00394E                     i2l74:
 19777  00394E  C01F  F043         	movff	??_isr+19,btemp+3
 19778  003952  C01E  F042         	movff	??_isr+18,btemp+2
 19779  003956  C01D  F041         	movff	??_isr+17,btemp+1
 19780  00395A  C01C  F040         	movff	??_isr+16,btemp
 19781  00395E  C01B  FFF5         	movff	??_isr+15,tablat
 19782  003962  C01A  FFF8         	movff	??_isr+14,tblptru
 19783  003966  C019  FFF7         	movff	??_isr+13,tblptrh
 19784  00396A  C018  FFF6         	movff	??_isr+12,tblptrl
 19785  00396E  C017  FFF4         	movff	??_isr+11,prodh
 19786  003972  C016  FFF3         	movff	??_isr+10,prodl
 19787  003976  C015  FFDA         	movff	??_isr+9,fsr2h
 19788  00397A  C014  FFD9         	movff	??_isr+8,fsr2l
 19789  00397E  C013  FFE2         	movff	??_isr+7,fsr1h
 19790  003982  C012  FFE1         	movff	??_isr+6,fsr1l
 19791  003986  C011  FFEA         	movff	??_isr+5,fsr0h
 19792  00398A  C010  FFE9         	movff	??_isr+4,fsr0l
 19793  00398E  C00F  FFFB         	movff	??_isr+3,pclatu
 19794  003992  C00E  FFFA         	movff	??_isr+2,pclath
 19795  003996  9240               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19796  003998  0011               	retfie		f
 19797  00399A                     __end_of_isr:
 19798                           	opt stack 0
 19799                           tosu	equ	0xFFF
 19800                           tosh	equ	0xFFE
 19801                           tosl	equ	0xFFD
 19802                           pclatu	equ	0xFFB
 19803                           pclath	equ	0xFFA
 19804                           pcl	equ	0xFF9
 19805                           tblptru	equ	0xFF8
 19806                           tblptrh	equ	0xFF7
 19807                           tblptrl	equ	0xFF6
 19808                           tablat	equ	0xFF5
 19809                           prodh	equ	0xFF4
 19810                           prodl	equ	0xFF3
 19811                           intcon	equ	0xFF2
 19812                           intcon2	equ	0xFF1
 19813                           intcon3	equ	0xFF0
 19814                           indf0	equ	0xFEF
 19815                           postinc0	equ	0xFEE
 19816                           fsr0h	equ	0xFEA
 19817                           fsr0l	equ	0xFE9
 19818                           wreg	equ	0xFE8
 19819                           indf1	equ	0xFE7
 19820                           postinc1	equ	0xFE6
 19821                           postdec1	equ	0xFE5
 19822                           plusw1	equ	0xFE3
 19823                           fsr1h	equ	0xFE2
 19824                           fsr1l	equ	0xFE1
 19825                           indf2	equ	0xFDF
 19826                           postinc2	equ	0xFDE
 19827                           postdec2	equ	0xFDD
 19828                           plusw2	equ	0xFDB
 19829                           fsr2h	equ	0xFDA
 19830                           fsr2l	equ	0xFD9
 19831                           status	equ	0xFD8
 19832                           
 19833 ;; *************** function i2_write_timer_zero *****************
 19834 ;; Defined at:
 19835 ;;		line 138 in file "bibliotecas/hardware.c"
 19836 ;; Parameters:    Size  Location     Type
 19837 ;;  timer0          2    0[COMRAM] unsigned int 
 19838 ;; Auto vars:     Size  Location     Type
 19839 ;;  write_timer_    2    2[COMRAM] struct Timers
 19840 ;; Return value:  Size  Location     Type
 19841 ;;                  1    wreg      void 
 19842 ;; Registers used:
 19843 ;;		None
 19844 ;; Tracked objects:
 19845 ;;		On entry : 0/0
 19846 ;;		On exit  : 0/0
 19847 ;;		Unchanged: 0/0
 19848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19849 ;;      Params:         2       0       0       0       0       0       0       0       0
 19850 ;;      Locals:         2       0       0       0       0       0       0       0       0
 19851 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19852 ;;      Totals:         4       0       0       0       0       0       0       0       0
 19853 ;;Total ram usage:        4 bytes
 19854 ;; Hardware stack levels used:    1
 19855 ;; This function calls:
 19856 ;;		Nothing
 19857 ;; This function is called by:
 19858 ;;		_isr
 19859 ;; This function uses a non-reentrant model
 19860 ;;
 19861                           
 19862                           	psect	text82
 19863  005250                     __ptext82:
 19864                           	opt stack 0
 19865  005250                     i2_write_timer_zero:
 19866                           	opt stack 15
 19867                           
 19868                           ;hardware.c: 140: union Timers timer;
 19869                           ;hardware.c: 142: timer.lt = timer0;
 19870                           
 19871                           ;incstack = 0
 19872  005250  C001  F003         	movff	i2write_timer_zero@timer0,i2write_timer_zero@timer
 19873  005254  C002  F004         	movff	i2write_timer_zero@timer0+1,i2write_timer_zero@timer+1
 19874                           
 19875                           ;hardware.c: 144: TMR0H = timer.bt[1];
 19876  005258  C004  FFD7         	movff	i2write_timer_zero@timer+1,4055	;volatile
 19877                           
 19878                           ;hardware.c: 145: TMR0L = timer.bt[0];
 19879  00525C  C003  FFD6         	movff	i2write_timer_zero@timer,4054	;volatile
 19880  005260  0012               	return		;funcret
 19881  005262                     __end_ofi2_write_timer_zero:
 19882                           	opt stack 0
 19883                           tosu	equ	0xFFF
 19884                           tosh	equ	0xFFE
 19885                           tosl	equ	0xFFD
 19886                           pclatu	equ	0xFFB
 19887                           pclath	equ	0xFFA
 19888                           pcl	equ	0xFF9
 19889                           tblptru	equ	0xFF8
 19890                           tblptrh	equ	0xFF7
 19891                           tblptrl	equ	0xFF6
 19892                           tablat	equ	0xFF5
 19893                           prodh	equ	0xFF4
 19894                           prodl	equ	0xFF3
 19895                           intcon	equ	0xFF2
 19896                           intcon2	equ	0xFF1
 19897                           intcon3	equ	0xFF0
 19898                           indf0	equ	0xFEF
 19899                           postinc0	equ	0xFEE
 19900                           fsr0h	equ	0xFEA
 19901                           fsr0l	equ	0xFE9
 19902                           wreg	equ	0xFE8
 19903                           indf1	equ	0xFE7
 19904                           postinc1	equ	0xFE6
 19905                           postdec1	equ	0xFE5
 19906                           plusw1	equ	0xFE3
 19907                           fsr1h	equ	0xFE2
 19908                           fsr1l	equ	0xFE1
 19909                           indf2	equ	0xFDF
 19910                           postinc2	equ	0xFDE
 19911                           postdec2	equ	0xFDD
 19912                           plusw2	equ	0xFDB
 19913                           fsr2h	equ	0xFDA
 19914                           fsr2l	equ	0xFD9
 19915                           status	equ	0xFD8
 19916                           
 19917 ;; *************** function _recebe_dado_uart *****************
 19918 ;; Defined at:
 19919 ;;		line 138 in file "bibliotecas/uart.c"
 19920 ;; Parameters:    Size  Location     Type
 19921 ;;		None
 19922 ;; Auto vars:     Size  Location     Type
 19923 ;;		None
 19924 ;; Return value:  Size  Location     Type
 19925 ;;                  1    wreg      unsigned char 
 19926 ;; Registers used:
 19927 ;;		wreg, status,2
 19928 ;; Tracked objects:
 19929 ;;		On entry : 0/0
 19930 ;;		On exit  : 0/0
 19931 ;;		Unchanged: 0/0
 19932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19933 ;;      Params:         0       0       0       0       0       0       0       0       0
 19934 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19935 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19936 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19937 ;;Total ram usage:        0 bytes
 19938 ;; Hardware stack levels used:    1
 19939 ;; This function calls:
 19940 ;;		Nothing
 19941 ;; This function is called by:
 19942 ;;		_isr
 19943 ;;		_recebe_string_uart
 19944 ;; This function uses a non-reentrant model
 19945 ;;
 19946                           
 19947                           	psect	text83
 19948  005262                     __ptext83:
 19949                           	opt stack 0
 19950  005262                     _recebe_dado_uart:
 19951                           	opt stack 15
 19952                           
 19953                           ;uart.c: 140: while(RCIF==0);
 19954                           
 19955                           ;incstack = 0
 19956  005262  AA9E               	btfss	3998,5,c	;volatile
 19957  005264  D7FE               	goto	_recebe_dado_uart
 19958                           
 19959                           ;uart.c: 141: if(RCSTAbits.OERR)
 19960  005266  A2AB               	btfss	4011,1,c	;volatile
 19961  005268  D003               	goto	i2l791
 19962                           
 19963                           ;uart.c: 142: {
 19964                           ;uart.c: 143: CREN = 0;
 19965  00526A  98AB               	bcf	4011,4,c	;volatile
 19966                           
 19967                           ;uart.c: 144: __nop();
 19968  00526C  F000               	nop	
 19969                           
 19970                           ;uart.c: 145: CREN=1;
 19971  00526E  88AB               	bsf	4011,4,c	;volatile
 19972  005270                     i2l791:
 19973                           
 19974                           ;uart.c: 146: }
 19975                           ;uart.c: 147: return(RCREG);
 19976  005270  50AE               	movf	4014,w,c	;volatile
 19977  005272  0012               	return	
 19978  005274                     __end_of_recebe_dado_uart:
 19979                           	opt stack 0
 19980                           tosu	equ	0xFFF
 19981                           tosh	equ	0xFFE
 19982                           tosl	equ	0xFFD
 19983                           pclatu	equ	0xFFB
 19984                           pclath	equ	0xFFA
 19985                           pcl	equ	0xFF9
 19986                           tblptru	equ	0xFF8
 19987                           tblptrh	equ	0xFF7
 19988                           tblptrl	equ	0xFF6
 19989                           tablat	equ	0xFF5
 19990                           prodh	equ	0xFF4
 19991                           prodl	equ	0xFF3
 19992                           intcon	equ	0xFF2
 19993                           intcon2	equ	0xFF1
 19994                           intcon3	equ	0xFF0
 19995                           indf0	equ	0xFEF
 19996                           postinc0	equ	0xFEE
 19997                           fsr0h	equ	0xFEA
 19998                           fsr0l	equ	0xFE9
 19999                           wreg	equ	0xFE8
 20000                           indf1	equ	0xFE7
 20001                           postinc1	equ	0xFE6
 20002                           postdec1	equ	0xFE5
 20003                           plusw1	equ	0xFE3
 20004                           fsr1h	equ	0xFE2
 20005                           fsr1l	equ	0xFE1
 20006                           indf2	equ	0xFDF
 20007                           postinc2	equ	0xFDE
 20008                           postdec2	equ	0xFDD
 20009                           plusw2	equ	0xFDB
 20010                           fsr2h	equ	0xFDA
 20011                           fsr2l	equ	0xFD9
 20012                           status	equ	0xFD8
 20013                           
 20014 ;; *************** function _GPSRead *****************
 20015 ;; Defined at:
 20016 ;;		line 468 in file "bibliotecas/GPS.c"
 20017 ;; Parameters:    Size  Location     Type
 20018 ;;  buff            1    wreg     unsigned char 
 20019 ;; Auto vars:     Size  Location     Type
 20020 ;;  buff            1    9[COMRAM] unsigned char 
 20021 ;;  c               1   10[COMRAM] unsigned char 
 20022 ;; Return value:  Size  Location     Type
 20023 ;;                  2    8[None  ] int 
 20024 ;; Registers used:
 20025 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20026 ;; Tracked objects:
 20027 ;;		On entry : 0/0
 20028 ;;		On exit  : 0/0
 20029 ;;		Unchanged: 0/0
 20030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20031 ;;      Params:         0       0       0       0       0       0       0       0       0
 20032 ;;      Locals:         2       0       0       0       0       0       0       0       0
 20033 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20034 ;;      Totals:         2       0       0       0       0       0       0       0       0
 20035 ;;Total ram usage:        2 bytes
 20036 ;; Hardware stack levels used:    1
 20037 ;; Hardware stack levels required when called:    1
 20038 ;; This function calls:
 20039 ;;		_strcmp
 20040 ;;		_stringcpy
 20041 ;; This function is called by:
 20042 ;;		_isr
 20043 ;; This function uses a non-reentrant model
 20044 ;;
 20045                           
 20046                           	psect	text84
 20047  002534                     __ptext84:
 20048                           	opt stack 0
 20049  002534                     _GPSRead:
 20050                           	opt stack 14
 20051                           
 20052                           ;incstack = 0
 20053                           ;GPSRead@buff stored from wreg
 20054  002534  6E0A               	movwf	GPSRead@buff,c
 20055                           
 20056                           ;GPS.c: 470: uint8_t c = buff;
 20057  002536  C00A  F00B         	movff	GPSRead@buff,GPSRead@c
 20058                           
 20059                           ;GPS.c: 472: switch(c) {
 20060  00253A  D13B               	goto	i2l142
 20061  00253C                     
 20062                           ;GPS.c: 474: if(SentenceType == 1)
 20063  00253C  0433               	decf	_SentenceType,w,c
 20064  00253E  A4D8               	btfss	status,2,c
 20065  002540  D004               	goto	i2l144
 20066                           
 20067                           ;GPS.c: 475: GPRMC_ok = 1;
 20068  002542  0E00               	movlw	0
 20069  002544  6E2A               	movwf	_GPRMC_ok+1,c
 20070  002546  0E01               	movlw	1
 20071  002548  6E29               	movwf	_GPRMC_ok,c
 20072  00254A                     i2l144:
 20073                           
 20074                           ;GPS.c: 476: if(SentenceType == 2)
 20075  00254A  0E02               	movlw	2
 20076  00254C  1833               	xorwf	_SentenceType,w,c
 20077  00254E  A4D8               	btfss	status,2,c
 20078  002550  D004               	goto	i2l145
 20079                           
 20080                           ;GPS.c: 477: GPGGA_ok = 1;
 20081  002552  0E00               	movlw	0
 20082  002554  6E28               	movwf	_GPGGA_ok+1,c
 20083  002556  0E01               	movlw	1
 20084  002558  6E27               	movwf	_GPGGA_ok,c
 20085  00255A                     i2l145:
 20086                           
 20087                           ;GPS.c: 478: if(GPRMC_ok && GPGGA_ok) {
 20088  00255A  5029               	movf	_GPRMC_ok,w,c
 20089  00255C  102A               	iorwf	_GPRMC_ok+1,w,c
 20090  00255E  B4D8               	btfsc	status,2,c
 20091  002560  0012               	return	
 20092  002562  5027               	movf	_GPGGA_ok,w,c
 20093  002564  1028               	iorwf	_GPGGA_ok+1,w,c
 20094  002566  B4D8               	btfsc	status,2,c
 20095  002568  0012               	return	
 20096                           
 20097                           ;GPS.c: 479: GPRMC_ok = GPGGA_ok = 0;
 20098  00256A  0E00               	movlw	0
 20099  00256C  6E28               	movwf	_GPGGA_ok+1,c
 20100  00256E  0E00               	movlw	0
 20101  002570  6E27               	movwf	_GPGGA_ok,c
 20102  002572  C027  F029         	movff	_GPGGA_ok,_GPRMC_ok
 20103  002576  C028  F02A         	movff	_GPGGA_ok+1,_GPRMC_ok+1
 20104                           
 20105                           ;GPS.c: 481: }
 20106                           ;GPS.c: 482: break;
 20107                           
 20108                           ;GPS.c: 480: return 1;
 20109                           ;	Return value of _GPSRead is never used
 20110  00257A  0012               	return	
 20111  00257C                     
 20112                           ;GPS.c: 485: Term = char_number = 0;
 20113  00257C  0E00               	movlw	0
 20114  00257E  6E34               	movwf	_char_number,c
 20115  002580  C034  F032         	movff	_char_number,_Term
 20116                           
 20117                           ;GPS.c: 486: break;
 20118  002584  0012               	return	
 20119  002586                     
 20120                           ;GPS.c: 489: buffer[char_number] = '\0';
 20121  002586  5034               	movf	_char_number,w,c
 20122  002588  0D01               	mullw	1
 20123  00258A  0E62               	movlw	low _buffer
 20124  00258C  24F3               	addwf	prodl,w,c
 20125  00258E  6ED9               	movwf	fsr2l,c
 20126  002590  0E01               	movlw	high _buffer
 20127  002592  20F4               	addwfc	prodh,w,c
 20128  002594  6EDA               	movwf	fsr2h,c
 20129  002596  0E00               	movlw	0
 20130  002598  6EDF               	movwf	indf2,c
 20131                           
 20132                           ;GPS.c: 490: if(Term == 0) {
 20133  00259A  5032               	movf	_Term,w,c
 20134  00259C  A4D8               	btfss	status,2,c
 20135  00259E  D030               	goto	i2l155
 20136                           
 20137                           ;GPS.c: 491: stringcpy(buffer, sentence, 0);
 20138  0025A0  0E62               	movlw	low _buffer
 20139  0025A2  6E01               	movwf	stringcpy@str1,c
 20140  0025A4  0E01               	movlw	high _buffer
 20141  0025A6  6E02               	movwf	stringcpy@str1+1,c
 20142  0025A8  0E37               	movlw	low _sentence
 20143  0025AA  6E03               	movwf	stringcpy@str2,c
 20144  0025AC  0E00               	movlw	high _sentence
 20145  0025AE  6E04               	movwf	stringcpy@str2+1,c
 20146  0025B0  0E00               	movlw	0
 20147  0025B2  6E06               	movwf	stringcpy@dir+1,c
 20148  0025B4  0E00               	movlw	0
 20149  0025B6  6E05               	movwf	stringcpy@dir,c
 20150  0025B8  EC2C  F026         	call	_stringcpy	;wreg free
 20151                           
 20152                           ;GPS.c: 492: if(strcmp(sentence, "GPRMC") == 0)
 20153  0025BC  0E37               	movlw	low _sentence
 20154  0025BE  6E01               	movwf	strcmp@s1,c
 20155  0025C0  0E00               	movlw	high _sentence
 20156  0025C2  6E02               	movwf	strcmp@s1+1,c
 20157  0025C4  0EBD               	movlw	low STR_1
 20158  0025C6  6E03               	movwf	strcmp@s2,c
 20159  0025C8  0E08               	movlw	high STR_1
 20160  0025CA  6E04               	movwf	strcmp@s2+1,c
 20161  0025CC  ECE7  F026         	call	_strcmp	;wreg free
 20162  0025D0  5001               	movf	?_strcmp,w,c
 20163  0025D2  1002               	iorwf	?_strcmp+1,w,c
 20164  0025D4  A4D8               	btfss	status,2,c
 20165  0025D6  D002               	goto	i2l152
 20166                           
 20167                           ;GPS.c: 493: SentenceType = 1;
 20168  0025D8  0E01               	movlw	1
 20169  0025DA  D011               	goto	L11
 20170  0025DC                     i2l152:
 20171                           
 20172                           ;GPS.c: 494: else if(strcmp(sentence, "GPGGA") == 0)
 20173  0025DC  0E37               	movlw	low _sentence
 20174  0025DE  6E01               	movwf	strcmp@s1,c
 20175  0025E0  0E00               	movlw	high _sentence
 20176  0025E2  6E02               	movwf	strcmp@s1+1,c
 20177  0025E4  0EB7               	movlw	low STR_2
 20178  0025E6  6E03               	movwf	strcmp@s2,c
 20179  0025E8  0E08               	movlw	high STR_2
 20180  0025EA  6E04               	movwf	strcmp@s2+1,c
 20181  0025EC  ECE7  F026         	call	_strcmp	;wreg free
 20182  0025F0  5001               	movf	?_strcmp,w,c
 20183  0025F2  1002               	iorwf	?_strcmp+1,w,c
 20184  0025F4  A4D8               	btfss	status,2,c
 20185  0025F6  D002               	goto	i2l154
 20186                           
 20187                           ;GPS.c: 495: SentenceType = 2;
 20188  0025F8  0E02               	movlw	2
 20189  0025FA  D001               	goto	L11
 20190  0025FC                     i2l154:
 20191                           
 20192                           ;GPS.c: 496: else
 20193                           ;GPS.c: 497: SentenceType = 3;
 20194  0025FC  0E03               	movlw	3
 20195  0025FE                     L11:
 20196  0025FE  6E33               	movwf	_SentenceType,c
 20197  002600                     i2l155:
 20198                           
 20199                           ;GPS.c: 498: }
 20200                           ;GPS.c: 501: if(Term == 1 && SentenceType == 1) {
 20201  002600  0432               	decf	_Term,w,c
 20202  002602  A4D8               	btfss	status,2,c
 20203  002604  D011               	goto	i2l156
 20204  002606  0433               	decf	_SentenceType,w,c
 20205  002608  A4D8               	btfss	status,2,c
 20206  00260A  D00E               	goto	i2l156
 20207                           
 20208                           ;GPS.c: 502: stringcpy(buffer, rawTime, 0);
 20209  00260C  0E62               	movlw	low _buffer
 20210  00260E  6E01               	movwf	stringcpy@str1,c
 20211  002610  0E01               	movlw	high _buffer
 20212  002612  6E02               	movwf	stringcpy@str1+1,c
 20213  002614  0E6E               	movlw	low _rawTime
 20214  002616  6E03               	movwf	stringcpy@str2,c
 20215  002618  0E01               	movlw	high _rawTime
 20216  00261A  6E04               	movwf	stringcpy@str2+1,c
 20217  00261C  0E00               	movlw	0
 20218  00261E  6E06               	movwf	stringcpy@dir+1,c
 20219  002620  0E00               	movlw	0
 20220  002622  6E05               	movwf	stringcpy@dir,c
 20221  002624  EC2C  F026         	call	_stringcpy	;wreg free
 20222  002628                     i2l156:
 20223                           
 20224                           ;GPS.c: 503: }
 20225                           ;GPS.c: 506: if((Term == 3) && (SentenceType == 1)) {
 20226  002628  0E03               	movlw	3
 20227  00262A  1832               	xorwf	_Term,w,c
 20228  00262C  A4D8               	btfss	status,2,c
 20229  00262E  D011               	goto	i2l157
 20230  002630  0433               	decf	_SentenceType,w,c
 20231  002632  A4D8               	btfss	status,2,c
 20232  002634  D00E               	goto	i2l157
 20233                           
 20234                           ;GPS.c: 507: stringcpy(buffer, rawLatitude, 1);
 20235  002636  0E62               	movlw	low _buffer
 20236  002638  6E01               	movwf	stringcpy@str1,c
 20237  00263A  0E01               	movlw	high _buffer
 20238  00263C  6E02               	movwf	stringcpy@str1+1,c
 20239  00263E  0E55               	movlw	low _rawLatitude
 20240  002640  6E03               	movwf	stringcpy@str2,c
 20241  002642  0E01               	movlw	high _rawLatitude
 20242  002644  6E04               	movwf	stringcpy@str2+1,c
 20243  002646  0E00               	movlw	0
 20244  002648  6E06               	movwf	stringcpy@dir+1,c
 20245  00264A  0E01               	movlw	1
 20246  00264C  6E05               	movwf	stringcpy@dir,c
 20247  00264E  EC2C  F026         	call	_stringcpy	;wreg free
 20248  002652                     i2l157:
 20249                           
 20250                           ;GPS.c: 508: }
 20251                           ;GPS.c: 510: if((Term == 4) && (SentenceType == 1)) {
 20252  002652  0E04               	movlw	4
 20253  002654  1832               	xorwf	_Term,w,c
 20254  002656  A4D8               	btfss	status,2,c
 20255  002658  D00C               	goto	i2l160
 20256  00265A  0433               	decf	_SentenceType,w,c
 20257  00265C  A4D8               	btfss	status,2,c
 20258  00265E  D009               	goto	i2l160
 20259                           
 20260                           ;GPS.c: 511: if(buffer[0] == 'N')
 20261  002660  0E4E               	movlw	78
 20262  002662  0101               	movlb	1	; () banked
 20263  002664  1962               	xorwf	_buffer& (0+255),w,b
 20264  002666  A4D8               	btfss	status,2,c
 20265  002668  D002               	goto	i2l159
 20266                           
 20267                           ; BSR set to: 1
 20268                           ;GPS.c: 512: rawLatitude[0] = '0';
 20269  00266A  0E30               	movlw	48
 20270  00266C  D001               	goto	L12
 20271  00266E                     i2l159:
 20272                           
 20273                           ; BSR set to: 1
 20274                           ;GPS.c: 513: else
 20275                           ;GPS.c: 514: rawLatitude[0] = '-';
 20276                           
 20277                           ; BSR set to: 1
 20278  00266E  0E2D               	movlw	45
 20279  002670                     L12:
 20280  002670  6F55               	movwf	_rawLatitude& (0+255),b
 20281  002672                     i2l160:
 20282                           
 20283                           ;GPS.c: 515: }
 20284                           ;GPS.c: 518: if((Term == 5) && (SentenceType == 1)) {
 20285                           
 20286                           ; BSR set to: 1
 20287                           
 20288                           ; BSR set to: 1
 20289  002672  0E05               	movlw	5
 20290  002674  1832               	xorwf	_Term,w,c
 20291  002676  A4D8               	btfss	status,2,c
 20292  002678  D011               	goto	i2l161
 20293  00267A  0433               	decf	_SentenceType,w,c
 20294  00267C  A4D8               	btfss	status,2,c
 20295  00267E  D00E               	goto	i2l161
 20296                           
 20297                           ;GPS.c: 519: stringcpy(buffer, rawLongitude, 1);
 20298  002680  0E62               	movlw	low _buffer
 20299  002682  6E01               	movwf	stringcpy@str1,c
 20300  002684  0E01               	movlw	high _buffer
 20301  002686  6E02               	movwf	stringcpy@str1+1,c
 20302  002688  0E48               	movlw	low _rawLongitude
 20303  00268A  6E03               	movwf	stringcpy@str2,c
 20304  00268C  0E01               	movlw	high _rawLongitude
 20305  00268E  6E04               	movwf	stringcpy@str2+1,c
 20306  002690  0E00               	movlw	0
 20307  002692  6E06               	movwf	stringcpy@dir+1,c
 20308  002694  0E01               	movlw	1
 20309  002696  6E05               	movwf	stringcpy@dir,c
 20310  002698  EC2C  F026         	call	_stringcpy	;wreg free
 20311  00269C                     i2l161:
 20312                           
 20313                           ;GPS.c: 520: }
 20314                           ;GPS.c: 522: if((Term == 6) && (SentenceType == 1)) {
 20315  00269C  0E06               	movlw	6
 20316  00269E  1832               	xorwf	_Term,w,c
 20317  0026A0  A4D8               	btfss	status,2,c
 20318  0026A2  D00C               	goto	i2l164
 20319  0026A4  0433               	decf	_SentenceType,w,c
 20320  0026A6  A4D8               	btfss	status,2,c
 20321  0026A8  D009               	goto	i2l164
 20322                           
 20323                           ;GPS.c: 523: if(buffer[0] == 'E')
 20324  0026AA  0E45               	movlw	69
 20325  0026AC  0101               	movlb	1	; () banked
 20326  0026AE  1962               	xorwf	_buffer& (0+255),w,b
 20327  0026B0  A4D8               	btfss	status,2,c
 20328  0026B2  D002               	goto	i2l163
 20329                           
 20330                           ; BSR set to: 1
 20331                           ;GPS.c: 524: rawLongitude[0] = '0';
 20332  0026B4  0E30               	movlw	48
 20333  0026B6  D001               	goto	L13
 20334  0026B8                     i2l163:
 20335                           
 20336                           ; BSR set to: 1
 20337                           ;GPS.c: 525: else
 20338                           ;GPS.c: 526: rawLongitude[0] = '-';
 20339                           
 20340                           ; BSR set to: 1
 20341  0026B8  0E2D               	movlw	45
 20342  0026BA                     L13:
 20343  0026BA  6F48               	movwf	_rawLongitude& (0+255),b
 20344  0026BC                     i2l164:
 20345                           
 20346                           ;GPS.c: 527: }
 20347                           ;GPS.c: 530: if((Term == 7) && (SentenceType == 1)) {
 20348                           
 20349                           ; BSR set to: 1
 20350                           
 20351                           ; BSR set to: 1
 20352  0026BC  0E07               	movlw	7
 20353  0026BE  1832               	xorwf	_Term,w,c
 20354  0026C0  A4D8               	btfss	status,2,c
 20355  0026C2  D011               	goto	i2l165
 20356  0026C4  0433               	decf	_SentenceType,w,c
 20357  0026C6  A4D8               	btfss	status,2,c
 20358  0026C8  D00E               	goto	i2l165
 20359                           
 20360                           ;GPS.c: 531: stringcpy(buffer, rawSpeed, 0);
 20361  0026CA  0E62               	movlw	low _buffer
 20362  0026CC  6E01               	movwf	stringcpy@str1,c
 20363  0026CE  0E01               	movlw	high _buffer
 20364  0026D0  6E02               	movwf	stringcpy@str1+1,c
 20365  0026D2  0E86               	movlw	low _rawSpeed
 20366  0026D4  6E03               	movwf	stringcpy@str2,c
 20367  0026D6  0E01               	movlw	high _rawSpeed
 20368  0026D8  6E04               	movwf	stringcpy@str2+1,c
 20369  0026DA  0E00               	movlw	0
 20370  0026DC  6E06               	movwf	stringcpy@dir+1,c
 20371  0026DE  0E00               	movlw	0
 20372  0026E0  6E05               	movwf	stringcpy@dir,c
 20373  0026E2  EC2C  F026         	call	_stringcpy	;wreg free
 20374  0026E6                     i2l165:
 20375                           
 20376                           ;GPS.c: 532: }
 20377                           ;GPS.c: 535: if((Term == 8) && (SentenceType == 1)) {
 20378  0026E6  0E08               	movlw	8
 20379  0026E8  1832               	xorwf	_Term,w,c
 20380  0026EA  A4D8               	btfss	status,2,c
 20381  0026EC  D011               	goto	i2l166
 20382  0026EE  0433               	decf	_SentenceType,w,c
 20383  0026F0  A4D8               	btfss	status,2,c
 20384  0026F2  D00E               	goto	i2l166
 20385                           
 20386                           ;GPS.c: 536: stringcpy(buffer, rawCourse, 0);
 20387  0026F4  0E62               	movlw	low _buffer
 20388  0026F6  6E01               	movwf	stringcpy@str1,c
 20389  0026F8  0E01               	movlw	high _buffer
 20390  0026FA  6E02               	movwf	stringcpy@str1+1,c
 20391  0026FC  0E80               	movlw	low _rawCourse
 20392  0026FE  6E03               	movwf	stringcpy@str2,c
 20393  002700  0E01               	movlw	high _rawCourse
 20394  002702  6E04               	movwf	stringcpy@str2+1,c
 20395  002704  0E00               	movlw	0
 20396  002706  6E06               	movwf	stringcpy@dir+1,c
 20397  002708  0E00               	movlw	0
 20398  00270A  6E05               	movwf	stringcpy@dir,c
 20399  00270C  EC2C  F026         	call	_stringcpy	;wreg free
 20400  002710                     i2l166:
 20401                           
 20402                           ;GPS.c: 537: }
 20403                           ;GPS.c: 540: if(Term == 9 && SentenceType == 1) {
 20404  002710  0E09               	movlw	9
 20405  002712  1832               	xorwf	_Term,w,c
 20406  002714  A4D8               	btfss	status,2,c
 20407  002716  D011               	goto	i2l167
 20408  002718  0433               	decf	_SentenceType,w,c
 20409  00271A  A4D8               	btfss	status,2,c
 20410  00271C  D00E               	goto	i2l167
 20411                           
 20412                           ;GPS.c: 541: stringcpy(buffer, rawDate, 0);
 20413  00271E  0E62               	movlw	low _buffer
 20414  002720  6E01               	movwf	stringcpy@str1,c
 20415  002722  0E01               	movlw	high _buffer
 20416  002724  6E02               	movwf	stringcpy@str1+1,c
 20417  002726  0EF9               	movlw	low _rawDate
 20418  002728  6E03               	movwf	stringcpy@str2,c
 20419  00272A  0E00               	movlw	high _rawDate
 20420  00272C  6E04               	movwf	stringcpy@str2+1,c
 20421  00272E  0E00               	movlw	0
 20422  002730  6E06               	movwf	stringcpy@dir+1,c
 20423  002732  0E00               	movlw	0
 20424  002734  6E05               	movwf	stringcpy@dir,c
 20425  002736  EC2C  F026         	call	_stringcpy	;wreg free
 20426  00273A                     i2l167:
 20427                           
 20428                           ;GPS.c: 542: }
 20429                           ;GPS.c: 545: if((Term == 7) && (SentenceType == 2)) {
 20430  00273A  0E07               	movlw	7
 20431  00273C  1832               	xorwf	_Term,w,c
 20432  00273E  A4D8               	btfss	status,2,c
 20433  002740  D012               	goto	i2l168
 20434  002742  0E02               	movlw	2
 20435  002744  1833               	xorwf	_SentenceType,w,c
 20436  002746  A4D8               	btfss	status,2,c
 20437  002748  D00E               	goto	i2l168
 20438                           
 20439                           ;GPS.c: 546: stringcpy(buffer, rawSatellites, 0);
 20440  00274A  0E62               	movlw	low _buffer
 20441  00274C  6E01               	movwf	stringcpy@str1,c
 20442  00274E  0E01               	movlw	high _buffer
 20443  002750  6E02               	movwf	stringcpy@str1+1,c
 20444  002752  0E3D               	movlw	low _rawSatellites
 20445  002754  6E03               	movwf	stringcpy@str2,c
 20446  002756  0E00               	movlw	high _rawSatellites
 20447  002758  6E04               	movwf	stringcpy@str2+1,c
 20448  00275A  0E00               	movlw	0
 20449  00275C  6E06               	movwf	stringcpy@dir+1,c
 20450  00275E  0E00               	movlw	0
 20451  002760  6E05               	movwf	stringcpy@dir,c
 20452  002762  EC2C  F026         	call	_stringcpy	;wreg free
 20453  002766                     i2l168:
 20454                           
 20455                           ;GPS.c: 547: }
 20456                           ;GPS.c: 550: if((Term == 9) && (SentenceType == 2)) {
 20457  002766  0E09               	movlw	9
 20458  002768  1832               	xorwf	_Term,w,c
 20459  00276A  A4D8               	btfss	status,2,c
 20460  00276C  D012               	goto	i2l169
 20461  00276E  0E02               	movlw	2
 20462  002770  1833               	xorwf	_SentenceType,w,c
 20463  002772  A4D8               	btfss	status,2,c
 20464  002774  D00E               	goto	i2l169
 20465                           
 20466                           ;GPS.c: 551: stringcpy(buffer, rawAltitude, 0);
 20467  002776  0E62               	movlw	low _buffer
 20468  002778  6E01               	movwf	stringcpy@str1,c
 20469  00277A  0E01               	movlw	high _buffer
 20470  00277C  6E02               	movwf	stringcpy@str1+1,c
 20471  00277E  0E79               	movlw	low _rawAltitude
 20472  002780  6E03               	movwf	stringcpy@str2,c
 20473  002782  0E01               	movlw	high _rawAltitude
 20474  002784  6E04               	movwf	stringcpy@str2+1,c
 20475  002786  0E00               	movlw	0
 20476  002788  6E06               	movwf	stringcpy@dir+1,c
 20477  00278A  0E00               	movlw	0
 20478  00278C  6E05               	movwf	stringcpy@dir,c
 20479  00278E  EC2C  F026         	call	_stringcpy	;wreg free
 20480  002792                     i2l169:
 20481                           
 20482                           ;GPS.c: 552: }
 20483                           ;GPS.c: 553: Term++;
 20484  002792  2A32               	incf	_Term,f,c
 20485                           
 20486                           ;GPS.c: 554: char_number = 0;
 20487  002794  0E00               	movlw	0
 20488  002796  6E34               	movwf	_char_number,c
 20489                           
 20490                           ;GPS.c: 555: break;
 20491  002798  0012               	return	
 20492  00279A                     
 20493                           ;GPS.c: 558: buffer[char_number++] = c;
 20494  00279A  5034               	movf	_char_number,w,c
 20495  00279C  0D01               	mullw	1
 20496  00279E  0E62               	movlw	low _buffer
 20497  0027A0  24F3               	addwf	prodl,w,c
 20498  0027A2  6ED9               	movwf	fsr2l,c
 20499  0027A4  0E01               	movlw	high _buffer
 20500  0027A6  20F4               	addwfc	prodh,w,c
 20501  0027A8  6EDA               	movwf	fsr2h,c
 20502  0027AA  C00B  FFDF         	movff	GPSRead@c,indf2
 20503  0027AE  2A34               	incf	_char_number,f,c
 20504                           
 20505                           ;GPS.c: 560: }
 20506                           
 20507                           ;GPS.c: 559: break;
 20508  0027B0  0012               	return	
 20509  0027B2                     i2l142:
 20510  0027B2  500B               	movf	GPSRead@c,w,c
 20511                           
 20512                           ; Switch size 1, requested type "space"
 20513                           ; Number of cases is 3, Range of values is 13 to 44
 20514                           ; switch strategies available:
 20515                           ; Name         Instructions Cycles
 20516                           ; simple_byte           10     6 (average)
 20517                           ;	Chosen strategy is simple_byte
 20518  0027B4  0A0D               	xorlw	13	; case 13
 20519  0027B6  B4D8               	btfsc	status,2,c
 20520  0027B8  D6C1               	goto	i2l143
 20521  0027BA  0A29               	xorlw	41	; case 36
 20522  0027BC  B4D8               	btfsc	status,2,c
 20523  0027BE  D6DE               	goto	i2l149
 20524  0027C0  0A08               	xorlw	8	; case 44
 20525  0027C2  B4D8               	btfsc	status,2,c
 20526  0027C4  D6E0               	goto	i2l150
 20527  0027C6  D7E9               	goto	i2l170
 20528  0027C8                     __end_of_GPSRead:
 20529                           	opt stack 0
 20530                           tosu	equ	0xFFF
 20531                           tosh	equ	0xFFE
 20532                           tosl	equ	0xFFD
 20533                           pclatu	equ	0xFFB
 20534                           pclath	equ	0xFFA
 20535                           pcl	equ	0xFF9
 20536                           tblptru	equ	0xFF8
 20537                           tblptrh	equ	0xFF7
 20538                           tblptrl	equ	0xFF6
 20539                           tablat	equ	0xFF5
 20540                           prodh	equ	0xFF4
 20541                           prodl	equ	0xFF3
 20542                           intcon	equ	0xFF2
 20543                           intcon2	equ	0xFF1
 20544                           intcon3	equ	0xFF0
 20545                           indf0	equ	0xFEF
 20546                           postinc0	equ	0xFEE
 20547                           fsr0h	equ	0xFEA
 20548                           fsr0l	equ	0xFE9
 20549                           wreg	equ	0xFE8
 20550                           indf1	equ	0xFE7
 20551                           postinc1	equ	0xFE6
 20552                           postdec1	equ	0xFE5
 20553                           plusw1	equ	0xFE3
 20554                           fsr1h	equ	0xFE2
 20555                           fsr1l	equ	0xFE1
 20556                           indf2	equ	0xFDF
 20557                           postinc2	equ	0xFDE
 20558                           postdec2	equ	0xFDD
 20559                           plusw2	equ	0xFDB
 20560                           fsr2h	equ	0xFDA
 20561                           fsr2l	equ	0xFD9
 20562                           status	equ	0xFD8
 20563                           
 20564 ;; *************** function _stringcpy *****************
 20565 ;; Defined at:
 20566 ;;		line 459 in file "bibliotecas/GPS.c"
 20567 ;; Parameters:    Size  Location     Type
 20568 ;;  str1            2    0[COMRAM] PTR unsigned char 
 20569 ;;		 -> buffer(12), 
 20570 ;;  str2            2    2[COMRAM] PTR unsigned char 
 20571 ;;		 -> rawAltitude(7), rawSatellites(3), rawDate(7), rawCourse(6), 
 20572 ;;		 -> rawSpeed(6), rawLongitude(13), rawLatitude(13), rawTime(11), 
 20573 ;;		 -> sentence(6), 
 20574 ;;  dir             2    4[COMRAM] int 
 20575 ;; Auto vars:     Size  Location     Type
 20576 ;;  chr             1    8[COMRAM] unsigned char 
 20577 ;; Return value:  Size  Location     Type
 20578 ;;                  1    wreg      void 
 20579 ;; Registers used:
 20580 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20581 ;; Tracked objects:
 20582 ;;		On entry : 0/0
 20583 ;;		On exit  : 0/0
 20584 ;;		Unchanged: 0/0
 20585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20586 ;;      Params:         6       0       0       0       0       0       0       0       0
 20587 ;;      Locals:         1       0       0       0       0       0       0       0       0
 20588 ;;      Temps:          2       0       0       0       0       0       0       0       0
 20589 ;;      Totals:         9       0       0       0       0       0       0       0       0
 20590 ;;Total ram usage:        9 bytes
 20591 ;; Hardware stack levels used:    1
 20592 ;; This function calls:
 20593 ;;		Nothing
 20594 ;; This function is called by:
 20595 ;;		_GPSRead
 20596 ;; This function uses a non-reentrant model
 20597 ;;
 20598                           
 20599                           	psect	text85
 20600  004C58                     __ptext85:
 20601                           	opt stack 0
 20602  004C58                     _stringcpy:
 20603                           	opt stack 14
 20604                           
 20605                           ;GPS.c: 461: uint8_t chr = 0;
 20606                           
 20607                           ;incstack = 0
 20608  004C58  0E00               	movlw	0
 20609  004C5A  6E09               	movwf	stringcpy@chr,c
 20610  004C5C                     
 20611                           ;GPS.c: 464: str2[chr + dir] = str1[chr];
 20612  004C5C  5009               	movf	stringcpy@chr,w,c
 20613  004C5E  0D01               	mullw	1
 20614  004C60  50F3               	movf	prodl,w,c
 20615  004C62  2401               	addwf	stringcpy@str1,w,c
 20616  004C64  6ED9               	movwf	fsr2l,c
 20617  004C66  50F4               	movf	prodh,w,c
 20618  004C68  2002               	addwfc	stringcpy@str1+1,w,c
 20619  004C6A  6EDA               	movwf	fsr2h,c
 20620  004C6C  5009               	movf	stringcpy@chr,w,c
 20621  004C6E  2405               	addwf	stringcpy@dir,w,c
 20622  004C70  6E07               	movwf	??_stringcpy& (0+255),c
 20623  004C72  0E00               	movlw	0
 20624  004C74  2006               	addwfc	stringcpy@dir+1,w,c
 20625  004C76  6E08               	movwf	(??_stringcpy+1)& (0+255),c
 20626  004C78  5007               	movf	??_stringcpy,w,c
 20627  004C7A  2403               	addwf	stringcpy@str2,w,c
 20628  004C7C  6EE1               	movwf	fsr1l,c
 20629  004C7E  5008               	movf	??_stringcpy+1,w,c
 20630  004C80  2004               	addwfc	stringcpy@str2+1,w,c
 20631  004C82  6EE2               	movwf	fsr1h,c
 20632  004C84  CFDF FFE7          	movff	indf2,indf1
 20633                           
 20634                           ;GPS.c: 465: } while(str1[chr++] != '\0');
 20635  004C88  2A09               	incf	stringcpy@chr,f,c
 20636  004C8A  0409               	decf	stringcpy@chr,w,c
 20637  004C8C  6E07               	movwf	??_stringcpy& (0+255),c
 20638  004C8E  5007               	movf	??_stringcpy,w,c
 20639  004C90  0D01               	mullw	1
 20640  004C92  50F3               	movf	prodl,w,c
 20641  004C94  2401               	addwf	stringcpy@str1,w,c
 20642  004C96  6ED9               	movwf	fsr2l,c
 20643  004C98  50F4               	movf	prodh,w,c
 20644  004C9A  2002               	addwfc	stringcpy@str1+1,w,c
 20645  004C9C  6EDA               	movwf	fsr2h,c
 20646  004C9E  50DF               	movf	indf2,w,c
 20647  004CA0  B4D8               	btfsc	status,2,c
 20648  004CA2  0012               	return	
 20649  004CA4  D7DB               	goto	i2l137
 20650  004CA6                     __end_of_stringcpy:
 20651                           	opt stack 0
 20652                           tosu	equ	0xFFF
 20653                           tosh	equ	0xFFE
 20654                           tosl	equ	0xFFD
 20655                           pclatu	equ	0xFFB
 20656                           pclath	equ	0xFFA
 20657                           pcl	equ	0xFF9
 20658                           tblptru	equ	0xFF8
 20659                           tblptrh	equ	0xFF7
 20660                           tblptrl	equ	0xFF6
 20661                           tablat	equ	0xFF5
 20662                           prodh	equ	0xFF4
 20663                           prodl	equ	0xFF3
 20664                           intcon	equ	0xFF2
 20665                           intcon2	equ	0xFF1
 20666                           intcon3	equ	0xFF0
 20667                           indf0	equ	0xFEF
 20668                           postinc0	equ	0xFEE
 20669                           fsr0h	equ	0xFEA
 20670                           fsr0l	equ	0xFE9
 20671                           wreg	equ	0xFE8
 20672                           indf1	equ	0xFE7
 20673                           postinc1	equ	0xFE6
 20674                           postdec1	equ	0xFE5
 20675                           plusw1	equ	0xFE3
 20676                           fsr1h	equ	0xFE2
 20677                           fsr1l	equ	0xFE1
 20678                           indf2	equ	0xFDF
 20679                           postinc2	equ	0xFDE
 20680                           postdec2	equ	0xFDD
 20681                           plusw2	equ	0xFDB
 20682                           fsr2h	equ	0xFDA
 20683                           fsr2l	equ	0xFD9
 20684                           status	equ	0xFD8
 20685                           
 20686 ;; *************** function _strcmp *****************
 20687 ;; Defined at:
 20688 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcmp.c"
 20689 ;; Parameters:    Size  Location     Type
 20690 ;;  s1              2    0[COMRAM] PTR const unsigned char 
 20691 ;;		 -> sentence(6), 
 20692 ;;  s2              2    2[COMRAM] PTR const unsigned char 
 20693 ;;		 -> STR_2(6), STR_1(6), 
 20694 ;; Auto vars:     Size  Location     Type
 20695 ;;  r               1    5[COMRAM] char 
 20696 ;; Return value:  Size  Location     Type
 20697 ;;                  2    0[COMRAM] int 
 20698 ;; Registers used:
 20699 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 20700 ;; Tracked objects:
 20701 ;;		On entry : 0/0
 20702 ;;		On exit  : 0/0
 20703 ;;		Unchanged: 0/0
 20704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20705 ;;      Params:         4       0       0       0       0       0       0       0       0
 20706 ;;      Locals:         1       0       0       0       0       0       0       0       0
 20707 ;;      Temps:          1       0       0       0       0       0       0       0       0
 20708 ;;      Totals:         6       0       0       0       0       0       0       0       0
 20709 ;;Total ram usage:        6 bytes
 20710 ;; Hardware stack levels used:    1
 20711 ;; This function calls:
 20712 ;;		Nothing
 20713 ;; This function is called by:
 20714 ;;		_GPSRead
 20715 ;; This function uses a non-reentrant model
 20716 ;;
 20717                           
 20718                           	psect	text86
 20719  004DCE                     __ptext86:
 20720                           	opt stack 0
 20721  004DCE                     _strcmp:
 20722                           	opt stack 14
 20723                           
 20724                           ;incstack = 0
 20725  004DCE  D004               	goto	i2l1909
 20726  004DD0  4A01               	infsnz	strcmp@s1,f,c
 20727  004DD2  2A02               	incf	strcmp@s1+1,f,c
 20728  004DD4  4A03               	infsnz	strcmp@s2,f,c
 20729  004DD6  2A04               	incf	strcmp@s2+1,f,c
 20730  004DD8                     i2l1909:
 20731  004DD8  C001  FFD9         	movff	strcmp@s1,fsr2l
 20732  004DDC  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 20733  004DE0  50DF               	movf	indf2,w,c
 20734  004DE2  6E05               	movwf	??_strcmp& (0+255),c
 20735  004DE4  C003  FFF6         	movff	strcmp@s2,tblptrl
 20736  004DE8  C004  FFF7         	movff	strcmp@s2+1,tblptrh
 20737  004DEC                     	if	0	;tblptru may be non-zero
 20738  004DEC                     	endif
 20739  004DEC                     	if	0	;tblptru may be non-zero
 20740  004DEC                     	endif
 20741  004DEC  0008               	tblrd		*
 20742  004DEE  50F5               	movf	tablat,w,c
 20743  004DF0  0800               	sublw	0
 20744  004DF2  2405               	addwf	??_strcmp,w,c
 20745  004DF4  6E06               	movwf	strcmp@r,c
 20746  004DF6  5006               	movf	strcmp@r,w,c
 20747  004DF8  A4D8               	btfss	status,2,c
 20748  004DFA  D007               	goto	i2u871_40
 20749  004DFC  C001  FFD9         	movff	strcmp@s1,fsr2l
 20750  004E00  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 20751  004E04  50DF               	movf	indf2,w,c
 20752  004E06  A4D8               	btfss	status,2,c
 20753  004E08  D7E3               	goto	i2l1910
 20754  004E0A                     i2u871_40:
 20755  004E0A  5006               	movf	strcmp@r,w,c
 20756  004E0C  6E01               	movwf	?_strcmp,c
 20757  004E0E  6A02               	clrf	?_strcmp+1,c
 20758  004E10  BE01               	btfsc	?_strcmp,7,c
 20759  004E12  0602               	decf	?_strcmp+1,f,c
 20760  004E14  0012               	return	
 20761  004E16                     __end_of_strcmp:
 20762                           	opt stack 0
 20763                           tosu	equ	0xFFF
 20764                           tosh	equ	0xFFE
 20765                           tosl	equ	0xFFD
 20766                           pclatu	equ	0xFFB
 20767                           pclath	equ	0xFFA
 20768                           pcl	equ	0xFF9
 20769                           tblptru	equ	0xFF8
 20770                           tblptrh	equ	0xFF7
 20771                           tblptrl	equ	0xFF6
 20772                           tablat	equ	0xFF5
 20773                           prodh	equ	0xFF4
 20774                           prodl	equ	0xFF3
 20775                           intcon	equ	0xFF2
 20776                           intcon2	equ	0xFF1
 20777                           intcon3	equ	0xFF0
 20778                           indf0	equ	0xFEF
 20779                           postinc0	equ	0xFEE
 20780                           fsr0h	equ	0xFEA
 20781                           fsr0l	equ	0xFE9
 20782                           wreg	equ	0xFE8
 20783                           indf1	equ	0xFE7
 20784                           postinc1	equ	0xFE6
 20785                           postdec1	equ	0xFE5
 20786                           plusw1	equ	0xFE3
 20787                           fsr1h	equ	0xFE2
 20788                           fsr1l	equ	0xFE1
 20789                           indf2	equ	0xFDF
 20790                           postinc2	equ	0xFDE
 20791                           postdec2	equ	0xFDD
 20792                           plusw2	equ	0xFDB
 20793                           fsr2h	equ	0xFDA
 20794                           fsr2l	equ	0xFD9
 20795                           status	equ	0xFD8
 20796                           tosu	equ	0xFFF
 20797                           tosh	equ	0xFFE
 20798                           tosl	equ	0xFFD
 20799                           pclatu	equ	0xFFB
 20800                           pclath	equ	0xFFA
 20801                           pcl	equ	0xFF9
 20802                           tblptru	equ	0xFF8
 20803                           tblptrh	equ	0xFF7
 20804                           tblptrl	equ	0xFF6
 20805                           tablat	equ	0xFF5
 20806                           prodh	equ	0xFF4
 20807                           prodl	equ	0xFF3
 20808                           intcon	equ	0xFF2
 20809                           intcon2	equ	0xFF1
 20810                           intcon3	equ	0xFF0
 20811                           indf0	equ	0xFEF
 20812                           postinc0	equ	0xFEE
 20813                           fsr0h	equ	0xFEA
 20814                           fsr0l	equ	0xFE9
 20815                           wreg	equ	0xFE8
 20816                           indf1	equ	0xFE7
 20817                           postinc1	equ	0xFE6
 20818                           postdec1	equ	0xFE5
 20819                           plusw1	equ	0xFE3
 20820                           fsr1h	equ	0xFE2
 20821                           fsr1l	equ	0xFE1
 20822                           indf2	equ	0xFDF
 20823                           postinc2	equ	0xFDE
 20824                           postdec2	equ	0xFDD
 20825                           plusw2	equ	0xFDB
 20826                           fsr2h	equ	0xFDA
 20827                           fsr2l	equ	0xFD9
 20828                           status	equ	0xFD8
 20829                           
 20830                           	psect	text87
 20831  000000                     __ptext87:
 20832                           	opt stack 0
 20833                           tosu	equ	0xFFF
 20834                           tosh	equ	0xFFE
 20835                           tosl	equ	0xFFD
 20836                           pclatu	equ	0xFFB
 20837                           pclath	equ	0xFFA
 20838                           pcl	equ	0xFF9
 20839                           tblptru	equ	0xFF8
 20840                           tblptrh	equ	0xFF7
 20841                           tblptrl	equ	0xFF6
 20842                           tablat	equ	0xFF5
 20843                           prodh	equ	0xFF4
 20844                           prodl	equ	0xFF3
 20845                           intcon	equ	0xFF2
 20846                           intcon2	equ	0xFF1
 20847                           intcon3	equ	0xFF0
 20848                           indf0	equ	0xFEF
 20849                           postinc0	equ	0xFEE
 20850                           fsr0h	equ	0xFEA
 20851                           fsr0l	equ	0xFE9
 20852                           wreg	equ	0xFE8
 20853                           indf1	equ	0xFE7
 20854                           postinc1	equ	0xFE6
 20855                           postdec1	equ	0xFE5
 20856                           plusw1	equ	0xFE3
 20857                           fsr1h	equ	0xFE2
 20858                           fsr1l	equ	0xFE1
 20859                           indf2	equ	0xFDF
 20860                           postinc2	equ	0xFDE
 20861                           postdec2	equ	0xFDD
 20862                           plusw2	equ	0xFDB
 20863                           fsr2h	equ	0xFDA
 20864                           fsr2l	equ	0xFD9
 20865                           status	equ	0xFD8
 20866                           
 20867                           	psect	rparam
 20868  0000                     tosu	equ	0xFFF
 20869                           tosh	equ	0xFFE
 20870                           tosl	equ	0xFFD
 20871                           pclatu	equ	0xFFB
 20872                           pclath	equ	0xFFA
 20873                           pcl	equ	0xFF9
 20874                           tblptru	equ	0xFF8
 20875                           tblptrh	equ	0xFF7
 20876                           tblptrl	equ	0xFF6
 20877                           tablat	equ	0xFF5
 20878                           prodh	equ	0xFF4
 20879                           prodl	equ	0xFF3
 20880                           intcon	equ	0xFF2
 20881                           intcon2	equ	0xFF1
 20882                           intcon3	equ	0xFF0
 20883                           indf0	equ	0xFEF
 20884                           postinc0	equ	0xFEE
 20885                           fsr0h	equ	0xFEA
 20886                           fsr0l	equ	0xFE9
 20887                           wreg	equ	0xFE8
 20888                           indf1	equ	0xFE7
 20889                           postinc1	equ	0xFE6
 20890                           postdec1	equ	0xFE5
 20891                           plusw1	equ	0xFE3
 20892                           fsr1h	equ	0xFE2
 20893                           fsr1l	equ	0xFE1
 20894                           indf2	equ	0xFDF
 20895                           postinc2	equ	0xFDE
 20896                           postdec2	equ	0xFDD
 20897                           plusw2	equ	0xFDB
 20898                           fsr2h	equ	0xFDA
 20899                           fsr2l	equ	0xFD9
 20900                           status	equ	0xFD8
 20901                           
 20902                           	psect	temp
 20903  000040                     btemp:
 20904                           	opt stack 0
 20905  000040                     	ds	1
 20906  0000                     int$flags	set	btemp
 20907  0000                     wtemp6	set	btemp+1
 20908                           tosu	equ	0xFFF
 20909                           tosh	equ	0xFFE
 20910                           tosl	equ	0xFFD
 20911                           pclatu	equ	0xFFB
 20912                           pclath	equ	0xFFA
 20913                           pcl	equ	0xFF9
 20914                           tblptru	equ	0xFF8
 20915                           tblptrh	equ	0xFF7
 20916                           tblptrl	equ	0xFF6
 20917                           tablat	equ	0xFF5
 20918                           prodh	equ	0xFF4
 20919                           prodl	equ	0xFF3
 20920                           intcon	equ	0xFF2
 20921                           intcon2	equ	0xFF1
 20922                           intcon3	equ	0xFF0
 20923                           indf0	equ	0xFEF
 20924                           postinc0	equ	0xFEE
 20925                           fsr0h	equ	0xFEA
 20926                           fsr0l	equ	0xFE9
 20927                           wreg	equ	0xFE8
 20928                           indf1	equ	0xFE7
 20929                           postinc1	equ	0xFE6
 20930                           postdec1	equ	0xFE5
 20931                           plusw1	equ	0xFE3
 20932                           fsr1h	equ	0xFE2
 20933                           fsr1l	equ	0xFE1
 20934                           indf2	equ	0xFDF
 20935                           postinc2	equ	0xFDE
 20936                           postdec2	equ	0xFDD
 20937                           plusw2	equ	0xFDB
 20938                           fsr2h	equ	0xFDA
 20939                           fsr2l	equ	0xFD9
 20940                           status	equ	0xFD8


Data Sizes:
    Strings     167
    Constant    34
    Data        29
    BSS         735
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     32      63
    BANK0           160    140     160
    BANK1           256     59     228
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    escalonador$3229	PTR FTN()void  size(2) Largest target is 1
		 -> escrita_sdcard(), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 13
		 -> rawDate(BANK0[7]), rawLongitude(BANK1[13]), rawLatitude(BANK1[13]), rawTime(BANK1[11]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 13
		 -> rawDate(BANK0[7]), rawLongitude(BANK1[13]), rawLatitude(BANK1[13]), rawTime(BANK1[11]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_2(CODE[6]), STR_1(CODE[6]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 6
		 -> sentence(COMRAM[6]), 

    memset@p1	PTR void  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memset@p	PTR unsigned char  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memcpy@d1	PTR void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memcpy@s1	PTR const void  size(2) Largest target is 544
		 -> fputc@c(BANK0[1]), f_open@fn(BANK1[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 544
		 -> fputc@c(BANK0[1]), f_open@fn(BANK1[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memcmp@s2	PTR const void  size(2) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), STR_15(CODE[4]), 

    memcmp@s1	PTR const void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    utoa@buf	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    fprintf@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    fprintf@str	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_9(CODE[21]), 

    fprintf@arp	PTR void [1] size(2) Largest target is 2
		 -> ?_fprintf(BANK1[2]), 

    fputs@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    fputs@str	PTR const unsigned char  size(2) Largest target is 44
		 -> fprintf@s(BANK1[16]), string_dado(BANK1[44]), 

    fputc@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    sp__fgets	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    f_readdir@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_opendir@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_close@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_close@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_write@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_write@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_write@bw	PTR unsigned int  size(2) Largest target is 2
		 -> fputc@bw(BANK0[2]), 

    f_write@buff	PTR const void  size(2) Largest target is 1
		 -> fputc@c(BANK0[1]), 

    f_write@wbuff	PTR const unsigned char  size(2) Largest target is 1
		 -> fputc@c(BANK0[1]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_read@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sp__memcpy	PTR void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@dir	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@path	PTR const unsigned char  size(2) Largest target is 15
		 -> filename(BANK1[15]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_mount@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> fs(BIGRAM[544]), 

    validate@fs	PTR const struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    auto_mount@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    auto_mount@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_opendir@path(COMRAM[2]), f_open@path(BANK0[2]), 

    auto_mount@p	PTR const unsigned char  size(2) Largest target is 15
		 -> filename(BANK1[15]), 

    check_fs@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dir	PTR PTR unsigned char  size(2) Largest target is 2
		 -> f_open@dir(BANK1[2]), 

    reserve_direntry@dptr	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dj	PTR struct _DIR_E size(2) Largest target is 15
		 -> f_open@dj(BANK1[14]), 

    reserve_direntry@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), 

    trace_path@dir	PTR PTR unsigned char  size(2) Largest target is 2
		 -> f_opendir@dir(COMRAM[2]), f_open@dir(BANK1[2]), 

    trace_path@path	PTR const unsigned char  size(2) Largest target is 15
		 -> filename(BANK1[15]), 

    trace_path@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@dj	PTR struct _DIR_E size(2) Largest target is 15
		 -> f_open@dj(BANK1[14]), 

    trace_path@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@dptr	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    make_dirfile@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> trace_path@path(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    make_dirfile@dirname	PTR unsigned char  size(2) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), 

    S1656_DIR_E$fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    next_dir_entry@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    next_dir_entry@dj	PTR struct _DIR_E size(2) Largest target is 15
		 -> f_open@dj(BANK1[14]), 

    clust2sect@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    create_chain@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    remove_chain@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    put_cluster@p	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    put_cluster@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    get_cluster@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sync@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    FatFs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    move_window@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    escreve_frase_ram_lcd@buffer	PTR unsigned char  size(2) Largest target is 44
		 -> escreve_inteiro_lcd@texto(BANK0[7]), STR_13(CODE[11]), STR_12(CODE[10]), STR_11(CODE[16]), 
		 -> STR_10(CODE[11]), string_dado(BANK1[44]), STR_8(CODE[9]), STR_7(CODE[10]), 
		 -> STR_6(CODE[10]), STR_5(CODE[14]), STR_4(CODE[21]), STR_3(CODE[15]), 
		 -> mensagem_inicial@msg_dois(BANK0[17]), mensagem_inicial@msg_linha_um(BANK0[17]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    sdc_disk_write@p_buff	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), NULL(NULL[0]), fs(BIGRAM[544]), 

    sdc_disk_read@p_buff	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), NULL(NULL[0]), fs(BIGRAM[544]), 

    data_buff	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    monta_sd@dado	PTR unsigned char  size(2) Largest target is 13
		 -> rawDate(BANK0[7]), rawLongitude(BANK1[13]), rawLatitude(BANK1[13]), rawTime(BANK1[11]), 

    S403_FIL$dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    fil.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    S403_FIL$fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    fil.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    stringcpy@str1	PTR unsigned char  size(2) Largest target is 12
		 -> buffer(BANK1[12]), 

    stringcpy@str2	PTR unsigned char  size(2) Largest target is 13
		 -> rawAltitude(BANK1[7]), rawSatellites(COMRAM[3]), rawDate(BANK0[7]), rawCourse(BANK1[6]), 
		 -> rawSpeed(BANK1[6]), rawLongitude(BANK1[13]), rawLatitude(BANK1[13]), rawTime(BANK1[11]), 
		 -> sentence(COMRAM[6]), 

    p_tarefas	PTR FTN()void [2] size(2) Largest target is 1
		 -> escrita_sdcard(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_GPSRead
    _GPSRead->_stringcpy

Critical Paths under _main in BANK0

    _mensagem_inicial->_posicao_cursor_lcd
    _init_lcd->_escreve_cmd_lcd
    _escreve_cmd_lcd->_delay
    _config_timer_zero->_write_timer_zero
    _inicializa_uart->_configura_baudrate_uart
    _configura_baudrate_uart->___aldiv
    _fprintf->_fputc
    _fputs->_fputc
    _fputc->_f_write
    _f_write->_create_chain
    _f_open->_trace_path
    _trace_path->_next_dir_entry
    _make_dirfile->_memset
    _reserve_direntry->_create_chain
    _next_dir_entry->_get_cluster
    _clust2sect->___lmul
    _remove_chain->_put_cluster
    _auto_mount->_check_fs
    _disk_initialize->_sdc_disk_initialize
    _sdc_disk_initialize->_sdc_reset
    _sdc_reset->_command
    _posicao_cursor_lcd->_endereco_cursor_lcd
    _endereco_cursor_lcd->_delay
    _check_fs->_disk_read
    _f_lseek->_create_chain
    _create_chain->_put_cluster
    _put_cluster->_move_window
    _get_cluster->_move_window
    _f_close->_f_sync
    _f_sync->_sync
    _validate->_disk_status
    _disk_status->_sdc_disk_status
    _sync->_move_window
    _move_window->_disk_read
    _move_window->_disk_write
    _disk_write->_sdc_disk_write
    _sdc_disk_write->_command
    _disk_read->_sdc_disk_read
    _sdc_disk_read->_command
    _proceed->_escreve_SPI
    _command->_dummy_clocks
    _command->_wait_ready
    _escreve_inteiro_lcd->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _escreve_frase_ram_lcd->_escreve_caractere_lcd
    _escreve_caractere_lcd->_delay
    _dados_gps_to_sd->_monta_sd
    _monta_sd->_strlen

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_escalonador
    _escrita_sdcard->_fprintf
    _fprintf->_fputs

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  425836
                    _dados_gps_to_sd
                        _escalonador
                 _inicializa_tarefas
                    _inicializa_uart
                      _init_hardware
                           _init_lcd
                   _mensagem_inicial
 ---------------------------------------------------------------------------------
 (1) _mensagem_inicial                                    36    36      0    4213
                                              6 BANK0     36    36      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0     613
                                              3 BANK0      1     1      0
                              _delay
                    _escreve_cmd_lcd
 ---------------------------------------------------------------------------------
 (2) _escreve_cmd_lcd                                      1     1      0     477
                                              2 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (1) _init_hardware                                        0     0      0     247
                  _config_timer_dois
                  _config_timer_zero
                     _init_interrupt
                     _init_oscilador
                         _init_ports
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_oscilador                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _config_timer_zero                                    0     0      0     247
                   _write_timer_zero
 ---------------------------------------------------------------------------------
 (3) _write_timer_zero                                     4     2      2     247
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _config_timer_dois                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_tarefas                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _escalonador                                          3     3      0  418335
                                             56 BANK1      3     3      0
                     _escrita_sdcard *
 ---------------------------------------------------------------------------------
 (2) _escrita_sdcard                                       1     1      0  418112
                        _desliga_SPI
                       _desliga_uart
              _escreve_frase_ram_lcd
                _escreve_inteiro_lcd
                            _f_close
                            _f_lseek
                            _f_mount
                             _f_open
                            _fprintf
                     _inicializa_SPI
                    _inicializa_uart
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _inicializa_uart                                      0     0      0    1118
            _configura_baudrate_uart
 ---------------------------------------------------------------------------------
 (2) _configura_baudrate_uart                             14    10      4    1118
                                             14 BANK0     14    10      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     805
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (3) _inicializa_SPI                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _fprintf                                             49    37     12  127472
                                              7 BANK1     49    37     12
                            ___lldiv
                            ___llmod
                             ___wmul
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (4) _fputs                                                7     3      4   61571
                                              0 BANK1      7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                7     3      4   61078
                                            133 BANK0      7     3      4
                            _f_write
 ---------------------------------------------------------------------------------
 (6) _f_write                                             33    25      8   60266
                                            100 BANK0     33    25      8
                         _clust2sect
                       _create_chain
                         _disk_write
                             _memcpy
                        _move_window
                           _validate
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     412
                                              0 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (3) _f_open                                              44    39      5  194896
                                            119 BANK0      9     4      5
                                              0 BANK1     35    35      0
                         _auto_mount
                        _get_fattime
                             _memcpy
                             _memset
                        _move_window
                       _remove_chain
                   _reserve_direntry
                         _trace_path
 ---------------------------------------------------------------------------------
 (4) _trace_path                                          23    15      8   39138
                                             96 BANK0     23    15      8
                         _clust2sect
                       _make_dirfile
                             _memcmp
                        _move_window
                     _next_dir_entry
 ---------------------------------------------------------------------------------
 (5) _make_dirfile                                        13     9      4    2753
                                              8 BANK0     13     9      4
                             _memset
 ---------------------------------------------------------------------------------
 (4) _reserve_direntry                                    18    14      4   76291
                                            100 BANK0     18    14      4
                         _clust2sect
                       _create_chain
                         _disk_write
                             _memset
                        _move_window
                     _next_dir_entry
 ---------------------------------------------------------------------------------
 (5) _next_dir_entry                                      13    11      2   18463
                                             83 BANK0     13    11      2
                         _clust2sect
                        _get_cluster
 ---------------------------------------------------------------------------------
 (7) _clust2sect                                          11     7      4    1487
                                             12 BANK0     11     7      4
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) _remove_chain                                         8     6      2   32953
                                             86 BANK0      8     6      2
                        _get_cluster
                        _put_cluster
 ---------------------------------------------------------------------------------
 (7) _memcpy                                              11     5      6    1018
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (4) _auto_mount                                          40    37      3   27263
                                             51 BANK0     40    37      3
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                             _memset
 ---------------------------------------------------------------------------------
 (6) _memset                                               8     2      6    1217
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (5) _disk_initialize                                      4     4      0   15536
                                             32 BANK0      2     2      0
                _sdc_disk_initialize
 ---------------------------------------------------------------------------------
 (6) _sdc_disk_initialize                                 13    13      0   15406
                                             19 BANK0     13    13      0
                            _command
                       _dummy_clocks
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
                          _sdc_reset
 ---------------------------------------------------------------------------------
 (7) _sdc_reset                                           20    20      0    7269
                                             12 BANK0      7     7      0
                            _command
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (2) _posicao_cursor_lcd                                   3     2      1    1947
                                              3 BANK0      3     2      1
                _endereco_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _endereco_cursor_lcd                                  1     1      0     353
                                              2 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (5) _check_fs                                             8     4      4    6655
                                             43 BANK0      8     4      4
                          _disk_read
                             _memcmp
 ---------------------------------------------------------------------------------
 (5) _memcmp                                               9     3      6     701
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (8) ___lmul                                              12     4      8     516
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) _f_mount                                              3     1      2     304
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _f_lseek                                             29    23      6   54330
                                            100 BANK0     29    23      6
                            ___lldiv
                       _create_chain
                        _get_cluster
                           _validate
 ---------------------------------------------------------------------------------
 (7) _create_chain                                        14    12      2   34016
                                             86 BANK0     14    12      2
                        _get_cluster
                        _put_cluster
 ---------------------------------------------------------------------------------
 (8) _put_cluster                                         22    18      4   16433
                                             64 BANK0     22    18      4
                             ___wmul
                        _move_window
 ---------------------------------------------------------------------------------
 (8) _get_cluster                                         19    17      2   16142
                                             64 BANK0     19    17      2
                             ___wmul
                        _move_window
 ---------------------------------------------------------------------------------
 (9) ___wmul                                               6     2      4    1102
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     901
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) _f_close                                              3     1      2   30301
                                             75 BANK0      3     1      2
                             _f_sync
 ---------------------------------------------------------------------------------
 (4) _f_sync                                               9     7      2   30018
                                             66 BANK0      9     7      2
                        _get_fattime
                        _move_window
                               _sync
                           _validate
 ---------------------------------------------------------------------------------
 (7) _validate                                             6     2      4    1250
                                              7 BANK0      6     2      4
                        _disk_status
 ---------------------------------------------------------------------------------
 (8) _disk_status                                          5     5      0     226
                                              2 BANK0      5     5      0
                    _sdc_disk_status
 ---------------------------------------------------------------------------------
 (9) _sdc_disk_status                                      4     4      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _sync                                                 2     2      0   14169
                                             64 BANK0      2     2      0
                         _disk_ioctl
                        _move_window
 ---------------------------------------------------------------------------------
 (7) _move_window                                         21    17      4   13831
                                             43 BANK0     21    17      4
                          _disk_read
                         _disk_write
 ---------------------------------------------------------------------------------
 (8) _disk_write                                          12     5      7    6078
                                             31 BANK0     12     5      7
                     _sdc_disk_write
 ---------------------------------------------------------------------------------
 (9) _sdc_disk_write                                      19    12      7    4614
                                             12 BANK0     19    12      7
                            _command
                       _dummy_clocks
                        _escreve_SPI
                        _leitura_SPI
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (8) _disk_read                                           12     5      7    5647
                                             31 BANK0     12     5      7
                      _sdc_disk_read
 ---------------------------------------------------------------------------------
 (9) _sdc_disk_read                                       24    17      7    4450
                                             12 BANK0     19    12      7
                            _command
                       _dummy_clocks
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (10) _response                                            1     1      0      34
                                              0 BANK0      1     1      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (10) _proceed                                             0     0      0      34
                        _escreve_SPI
 ---------------------------------------------------------------------------------
 (10) _command                                             7     2      5    3403
                                              5 BANK0      7     2      5
                       _dummy_clocks
                        _escreve_SPI
                         _wait_ready
 ---------------------------------------------------------------------------------
 (11) _wait_ready                                         15    15      0      99
                                              0 BANK0      5     5      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (11) _escreve_SPI                                         2     2      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (10) _dummy_clocks                                        5     5      0      68
                                              0 BANK0      5     5      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (11) _leitura_SPI                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _disk_ioctl                                           7     4      3     304
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (4) _get_fattime                                         51    47      4     201
                                              0 BANK0     51    47      4
 ---------------------------------------------------------------------------------
 (3) _escreve_inteiro_lcd                                  9     7      2    6035
                                             24 BANK0      9     7      2
              _escreve_frase_ram_lcd
                               _itoa
 ---------------------------------------------------------------------------------
 (4) _itoa                                                 8     2      6    3936
                                             16 BANK0      8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (5) _utoa                                                 9     3      6    3163
                                              7 BANK0      9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4    1132
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4    1321
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _escreve_frase_ram_lcd                                2     0      2    1709
                                              3 BANK0      2     0      2
              _escreve_caractere_lcd
 ---------------------------------------------------------------------------------
 (3) _escreve_caractere_lcd                                1     1      0     384
                                              2 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                2     2      0     136
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _desliga_uart                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _desliga_SPI                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _dados_gps_to_sd                                      0     0      0    1310
                           _monta_sd
 ---------------------------------------------------------------------------------
 (2) _monta_sd                                             5     3      2    1310
                                              6 BANK0      5     3      2
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     220
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (15) _isr                                                21    21      0    2930
                                             11 COMRAM    21    21      0
                            _GPSRead
                   _recebe_dado_uart
                 i2_write_timer_zero
 ---------------------------------------------------------------------------------
 (16) i2_write_timer_zero                                  4     2      2     131
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (16) _recebe_dado_uart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _GPSRead                                             2     2      0    2669
                                              9 COMRAM     2     2      0
                             _strcmp
                          _stringcpy
 ---------------------------------------------------------------------------------
 (17) _stringcpy                                           9     3      6    2207
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (17) _strcmp                                              6     2      4     395
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _dados_gps_to_sd
     _monta_sd
       _strlen
   _escalonador
     _escrita_sdcard *
       _desliga_SPI
       _desliga_uart
       _escreve_frase_ram_lcd
         _escreve_caractere_lcd
           _delay
       _escreve_inteiro_lcd
         _escreve_frase_ram_lcd
           _escreve_caractere_lcd
             _delay
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
       _f_close
         _f_sync
           _get_fattime
           _move_window
             _disk_read
               _sdc_disk_read
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _disk_write
               _sdc_disk_write
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
           _sync
             _disk_ioctl
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
           _validate
             _disk_status
               _sdc_disk_status
       _f_lseek
         ___lldiv
         _create_chain
           _get_cluster
             ___wmul
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
           _put_cluster
             ___wmul
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
         _get_cluster
           ___wmul
           _move_window
             _disk_read
               _sdc_disk_read
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _disk_write
               _sdc_disk_write
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
         _validate
           _disk_status
             _sdc_disk_status
       _f_mount
       _f_open
         _auto_mount
           ___lldiv
           ___lmul
           _check_fs
             _disk_read
               _sdc_disk_read
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _memcmp
           _disk_initialize
             _sdc_disk_initialize
               _command
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _wait_ready
                   _leitura_SPI
               _dummy_clocks
                 _leitura_SPI
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _proceed
                 _escreve_SPI
               _response
                 _leitura_SPI
               _sdc_reset
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
           _disk_status
             _sdc_disk_status
           _memset
         _get_fattime
         _memcpy
         _memset
         _move_window
           _disk_read
             _sdc_disk_read
               _command
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _wait_ready
                   _leitura_SPI
               _dummy_clocks
                 _leitura_SPI
               _proceed
                 _escreve_SPI
               _response
                 _leitura_SPI
           _disk_write
             _sdc_disk_write
               _command
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _wait_ready
                   _leitura_SPI
               _dummy_clocks
                 _leitura_SPI
               _escreve_SPI
               _leitura_SPI
               _proceed
                 _escreve_SPI
               _response
                 _leitura_SPI
         _remove_chain
           _get_cluster
             ___wmul
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
           _put_cluster
             ___wmul
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
         _reserve_direntry
           _clust2sect
             ___lmul
           _create_chain
             _get_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _put_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
           _disk_write
             _sdc_disk_write
               _command
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _wait_ready
                   _leitura_SPI
               _dummy_clocks
                 _leitura_SPI
               _escreve_SPI
               _leitura_SPI
               _proceed
                 _escreve_SPI
               _response
                 _leitura_SPI
           _memset
           _move_window
             _disk_read
               _sdc_disk_read
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _disk_write
               _sdc_disk_write
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
           _next_dir_entry
             _clust2sect
               ___lmul
             _get_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
         _trace_path
           _clust2sect
             ___lmul
           _make_dirfile
             _memset
           _memcmp
           _move_window
             _disk_read
               _sdc_disk_read
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _disk_write
               _sdc_disk_write
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
           _next_dir_entry
             _clust2sect
               ___lmul
             _get_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
       _fprintf
         ___lldiv
         ___llmod
         ___wmul
         _fputc
           _f_write
             _clust2sect
               ___lmul
             _create_chain
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
               _put_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
             _disk_write
               _sdc_disk_write
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _memcpy
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _validate
               _disk_status
                 _sdc_disk_status
         _fputs
           _fputc
             _f_write
               _clust2sect
                 ___lmul
               _create_chain
                 _get_cluster
                   ___wmul
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                 _put_cluster
                   ___wmul
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _memcpy
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
               _validate
                 _disk_status
                   _sdc_disk_status
       _inicializa_SPI
       _inicializa_uart
         _configura_baudrate_uart
           ___aldiv
       _posicao_cursor_lcd
         _endereco_cursor_lcd
           _delay
   _inicializa_tarefas
   _inicializa_uart
     _configura_baudrate_uart
       ___aldiv
   _init_hardware
     _config_timer_dois
     _config_timer_zero
       _write_timer_zero
     _init_interrupt
     _init_oscilador
     _init_ports
   _init_lcd
     _delay
     _escreve_cmd_lcd
       _delay
   _mensagem_inicial
     _escreve_cmd_lcd
       _delay
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay

 _isr (ROOT)
   _GPSRead
     _strcmp
     _stringcpy
   _recebe_dado_uart
   i2_write_timer_zero

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     220      21       26.6%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     3B      E4       7       89.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     8C      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     20      3F       1       67.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1C3      20        0.0%
DATA                 0      0     3E3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Apr 02 10:56:38 2022

               next_dir_entry@idx 00BE          __end_of_mensagem_inicial 4726  
             next_dir_entry@clust 00BC                       _SSPSTATbits 000FC7  
                ??_init_interrupt 0060                                l81 41EC  
                              l90 50A0                                l83 427E  
                              l89 5090      __size_of_escreve_inteiro_lcd 0040  
                              _fs 01E4               ___wmul@multiplicand 0062  
                     _put_cluster 2A5A                  disk_write@sector 0081  
                    ?_escalonador 0001                    create_chain@fs 00BC  
                disk_write@result 0088                  ?_inicializa_uart 0001  
                             l311 52AE                               l225 4E46  
                             l226 4E38                               l234 4FF0  
                             l242 498E                               l243 4988  
                             l411 215E                               l500 510C  
                             l412 2004                               l404 1FAE  
                             l317 5226                               l413 200E  
                             l405 1FC4                               l262 3BDC  
                             l502 511C                               l430 218E  
                             l414 2038                               l510 447C  
                             l271 3B4A                               l263 3AE4  
                             l431 21B8                               l407 1FD0  
                             l511 447E                               l272 3B56  
                             l264 3AF0                               l520 44BC  
                             l512 4486                               l441 2288  
                             l521 44BE                               l513 4488  
                             l274 3B7A                               l450 37BE  
                             l370 4572                               l354 4DB4  
                             l362 4FC4                               l258 3EFE  
                             l522 44C6                               l514 4490  
                             l275 3B86                               l267 3B14  
                             l371 4502                               l355 4D8C  
                             l427 214E                               l419 20C2  
                             l363 4FA8                               l523 44C8  
                             l515 4492                               l268 3B20  
                             l452 37DA                               l540 48EC  
                             l532 48B6                               l436 221C  
                             l524 44D0                               l516 449A  
                             l277 3BAA                               l453 37D2  
                             l373 4534                               l381 4650  
                             l357 4D9C                               l541 48EE  
                             l533 48B8                               l437 2246  
                             l365 4FB4                               l525 44D2  
                             l517 449C                               l278 3BD2  
                             l390 50E0                               l446 3798  
                             l374 456E                               l382 4682  
                             l358 4DB0                               l542 48F6  
                             l534 48C0                               l550 4800  
                             l366 4FC0                               l518 44B2  
                             l279 3BB0                               l455 3806  
                             l447 3784                               l471 3030  
                             l463 2FE6                               l543 48F8  
                             l535 48C2                               l551 47BC  
                             l519 44B4                               l456 37EE  
                             l464 2F32                               l480 51FE  
                             l544 4900                               l536 48CA  
                             l552 481C                               l561 483C  
                             l473 3064                               l545 4902  
                             l537 48CC                               l553 47C8  
                             l570 4874                               l562 483E  
                             l386 50E4                               l458 3840  
                             l466 2F86                               l378 4686  
                             l538 48E2                               l554 47D8  
                             l394 429C                               l571 487C  
                             l563 4846                               l387 50D8  
                             l475 30AC                               l379 461E  
                             l539 48E4                               l555 47E8  
                             l395 42BA                               l572 487E  
                             l564 4848                               l468 2FB6  
                             l556 47F8                               l573 4886  
                             l565 4850                               l389 50DC  
                             l901 311C                               l549 4822  
                             l574 4888                               l566 4852  
                             l575 4890                               l567 485A  
                             l911 319C                               l399 431C  
                             l576 4892                               l568 485C  
                             l569 4872                               l913 31E4  
                             l905 3166                               l921 402C  
                             l594 4C30                               l842 3302  
                             l914 31CC                               l906 3148  
                             l930 35A6                               l595 4C06  
                             l851 4AE0                               l931 3568  
                             l860 2EEA                               l916 3208  
                             l908 315E                               l845 3388  
                             l853 4AFE                               l917 3238  
                             l909 316E                               l765 3AB2  
                             l918 3276                               l926 34BE  
                             l847 3432                               l863 2E42  
                             l871 2CA4                               l848 3414  
                             l872 2A82                               l857 2ED0  
                             l881 2C04                               l873 2AE2  
                             l953 35EE                               l858 2D20  
                             l890 41B4                               l970 3674  
                             l954 3646                               l867 2E62  
                             l891 4142                               l884 2CC0  
                             l876 2B1C                               l892 4164  
                             l980 368C                               l885 2C2E  
                             l981 3694                               l886 2C62  
                             l878 2B50                               l894 4182  
                             l958 3710                               l990 36D0  
                             l982 369C                               l887 2CA0  
                             l879 2BAC                               l895 41AC  
                             l985 36B6                               l994 36EC  
                             l978 3684                               l996 36EE  
                             l988 36CE                               _PCL 000FF9  
                             _PR2 000FCB                               _fil 012C  
                ??_init_oscilador 0060                               _isr 0008  
                    disk_read@res 008A                               prod 000FF3  
                  ??_create_chain 00B8                               tosl 000FFD  
                             wreg 000FE8         __size_of_write_timer_zero 0012  
                 create_chain@mcl 00BA                   create_chain@ncl 00C2  
                 create_chain@scl 00C0           ??_escreve_frase_ram_lcd 0065  
                            l1000 2888                              l1011 2982  
                            l1003 28AA                              l1012 29B0  
                            l1100 1D8C                              l1005 28D6  
                            l1006 293C                              l1023 230C  
                            l1015 29A4                              l1040 24EE  
                            l1032 242A                              l1024 2334  
                            l1008 2930                              l1025 2348  
                            l1105 1E28                              l1050 0E9E  
                            l1026 2374                              l1018 29CA  
                            l1106 1E44                              l1051 0E98  
                            l1035 2450                              l1019 29DE  
                            l1044 45C6                              l1060 0F54  
                            l1028 23E0                              l1053 0EC4  
                            l1109 1E60                              l1046 45E6  
                            l1062 0FC8                              l1054 0EEA  
                            l1038 24FE                              l1047 4614  
                            l1063 0FEA                              l1039 24BE  
                            l1143 0E04                              l1072 4D28  
                            l1160 0C7C                              l1144 098E  
                            l1081 4CCE                              l1057 0F1A  
                            l1145 0C8A                              l1233 4B6E  
                            l1241 4A90                              l1082 4CEE  
                            l1066 1032                              l1058 0F16  
                            l1090 1E1C                              l1146 0AC4  
                            l1242 4A52                              l1067 116E  
                            l1059 0F48                              l1091 1CBC  
                            l1155 0E72                              l1163 0D4C  
                            l1147 0A4A                              l1243 4A86  
                            l1251 1884                              l1076 4D3A  
                            l1180 141C                              l1068 1260  
                            l1092 1C44                              l1164 0E60  
                            l1156 0C0C                              l1236 4BA6  
                            l1260 1922                              l1069 1276  
                            l1093 1C68                              l1157 0BB4  
                            l1149 0A6A                              l1253 1BAC  
                            l1261 195A                              l1190 1684  
                            l1182 15D8                              l1262 19A4  
                            l1183 163A                              l1079 4CB6  
                            l1095 1CC6                              l1159 0DCA  
                            l1271 1A18                              l1255 18FA  
                            l1168 3D24                              l1184 1626  
                            l1336 4B14                              l1096 1CEE  
                            l1088 1BF8                              l1264 19B4  
                            l1256 18AE                              l1248 183A  
                            l1169 3C6C                              l1193 1698  
                            l1337 4B28                              l1281 1B24  
                            l1265 19C0                              l1186 1804  
                            l1282 1B70                              l1266 19CC  
                            l1099 1DBC                              l1283 1B46  
                            l1275 1A5C                              l1188 170A  
                            l1276 1A74                              l1268 19F2  
                            l1197 179E                              l1189 1644  
                            l1285 1B52                              l1277 1AA8  
                            l1703 4930                              l1391 3FA2  
                            l1704 4924                              l1392 3FB0  
                            l1384 3F28                              l1393 3FC6  
                            l1385 3F40                              l1707 4958  
                            l1387 3F6E                              l1708 4966  
                            l1388 3F62                              l1750 4BF0  
                            l1751 4BFA                              l1663 4096  
                            l1760 4ECE                              l1761 4ED8  
                            l1665 40D2                              l1746 4BD0  
                            l1666 4114                              l1770 43AE  
                            l1747 4BC8                              l1659 4E80  
                            l1771 4328                              l1756 4EB6  
                            l1772 43A6                              l1917 4F74  
                            l1757 4EAE                              l1693 4756  
                            l1918 4F6E                              l1694 474A  
                            l1783 5064                              l1784 5052  
                            l1697 478A                              l1777 4D72  
                            l1698 4798                              l1778 4D50  
                            l9007 4D24                              l9111 20F2  
                            l9023 4D50                              ?_isr 0001  
                            l9217 4328                              l9081 205A  
                            l9209 5052                              l8461 3058  
                            l8429 2FAA                              l8553 5104  
                            l8559 5114                              l8669 3380  
                            l8933 3148                              l8937 316E  
           _escreve_caractere_lcd 4828                              STR_1 08BD  
                            STR_2 08B7                              STR_3 085D  
                            STR_4 0838                              l8899 42DC  
                            STR_5 086C                              STR_6 08A4  
                            STR_7 089A                              STR_8 08AE  
                            STR_9 0823                              l9999 0FE6  
                  timer_dois@flag 002E                              _BRGH 007D62  
                 __end_of_GPSRead 27C8                              _T0IF 007F92  
                            _CREN 007D5C                      ?_escreve_SPI 0001  
                            _LATB 000F8A                              _PIE1 000F9D  
                            _RCIF 007CF5                              i2l71 391A  
                            i2l73 393A                              i2l74 394E  
                            i2l67 38D2                              i2l68 3946  
                            i2l69 38EC                              u9900 4998  
                            u9915 3732                              u9880 5014  
                            _TMR2 000FCC                              _SPEN 007D5F  
                            _TRMT 007D61                              _TXEN 007D65  
                            _SYNC 007D64                      trace_path@dj 00C0  
                    trace_path@fn 00C2                      trace_path@ds 00D4  
                    trace_path@fs 00D0                     ?_make_dirfile 0068  
                            _Term 0032                              _dado 002D  
                            _main 5078                              _fsid 00F4  
                            _itoa 4E5A                              fsr0h 000FEA  
                            fsr1h 000FE2                              indf0 000FEF  
                            fsr2h 000FDA                              fsr0l 000FE9  
                            indf1 000FE7                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                            btemp 0040                              _utoa 408E  
                            _sync 4AA8                     disk_ioctl@cmd 0060  
                   disk_read@buff 007F                     disk_ioctl@res 0064  
                   disk_read@pdrv 0087                              prodh 000FF4  
                            prodl 000FF3                              start 000E  
       sdc_disk_initialize@buff_i 007B                      ___param_bank 000000  
       sdc_disk_initialize@count1 0077         sdc_disk_initialize@count2 007D  
                     _string_dado 0100                             ??_isr 000C  
         __size_of_escrita_sdcard 00DA  __size_of_configura_baudrate_uart 0132  
                           l10081 4A86                             l10603 3B4E  
                           l10365 183A                             l10703 41E4  
                           l10617 3B7E                             l10457 1A32  
                           l10573 3AE8                             l10397 18E8  
                           l10587 3B18                   __end_of___aldiv 3FD8  
                           ?_main 0001                             ?_itoa 0070  
                           STR_10 0885                             STR_11 084D  
                           STR_12 0890                             STR_13 087A  
                           STR_14 08C7                             STR_15 08C3  
                    ?_leitura_SPI 0001                   __end_of___lldiv 47AA  
                           u10005 2F58                             u10110 5124  
                           u10030 2FD0                             ?_utoa 0067  
                           u11010 21E2                             ?_sync 0001  
                           u11100 437E                             u10045 3002  
                           u10070 307E                             u10080 30BA  
                           u10410 2CEA                             u11050 225E  
                           u11107 4374                             u10340 33D8  
                           u11060 2296                             u12100 419A  
                           u12110 41C2                             u13000 16A6  
                           u11080 4356                             u12120 41DA  
                           u11320 0E0C                             _T0CON 000FD5  
                           u10505 2AB2                             u12025 39AC  
                           u10290 32C0                             u10610 42DC  
                           u10435 2D50                             u11235 0B12  
                           u12035 39F8                             u10380 4C26  
                           u13020 171E                             u12300 23CC  
                           u11500 3620                             u13100 1882  
                           u10390 4C50                             u11350 4BD4  
                           u13030 1764                             u10455 2DC4  
                           u10535 2B7C                             u11087 434C  
                           u12055 3A3C                   __end_of___llmod 4978  
                           u12065 3A86                             u10810 4D24  
                           u10650 3106                             u12330 2426  
                           u13130 1906                             u10387 4C1C  
                           u13035 175A                             u11275 0BF8  
                           u11380 4EBA                             u10660 3112  
                           u10900 205A                             u10397 4C46  
                           u13061 4F2E                             u10485 2E4E  
                           u10565 2C10                             u12165 28F6  
                           u12510 0FE6                             u11470 3540  
                           u12350 244C                             u11455 34CA  
                           u11480 3564                             _T2CON 000FCA  
                           u10770 3264                             u11810 45E2  
                           u13330 1B8C                             u13170 199A  
                           u13500 3B44                             u10940 20F2  
                           u10860 1FE0                             u12285 2394  
                           u13341 1BBC                             u10870 1FF0  
                           u12550 125C                             u10960 20FE  
                           u12560 1272                             u12640 4934  
                           u13280 1B04                             u11920 3F72  
                           u10881 1FFA                             u12545 1186  
                           u14217 4710                             u11835 3D42  
                           u14227 43EE                             u13460 44F6  
                           u13620 46AE                             u11845 3D5E  
                           u14237 440A                             u12830 1E40  
                           u13630 46C6                             u11855 3D8E  
                           u12575 12FA                             u14247 4426  
                           u12760 1CEA                             u13608 423C  
                           u11865 3DA8                             u14257 1F7A  
                           u13609 4250                             u14267 210E  
                           u12925 1490                             u14277 21C0  
                           u11990 475A                             u12790 1D88  
                           u14287 4E22                   __end_of___lwdiv 4C04  
                 __end_of___lwmod 4EE2                             i2l142 27B2  
                           i2l150 2586                             i2l143 253C  
                           i2l160 2672                             i2l152 25DC  
                           i2l144 254A                             i2l137 4C5C  
                           i2l161 269C                             i2l145 255A  
                           i2l170 279A                             i2l154 25FC  
                           i2l163 26B8                             i2l155 2600  
                           i2l164 26BC                             i2l156 2628  
                           i2l165 26E6                             i2l157 2652  
                           i2l149 257C                             i2l166 2710  
                           i2l167 273A                             i2l159 266E  
                           i2l168 2766                             i2l169 2792  
                           i2l791 5270                             _RCREG 000FAE  
                           _RCSTA 000FAB                             _TMR0H 000FD7  
                           _TMR0L 000FD6                             _SPBRG 000FAF  
                           _TRISA 000F92                             _TRISB 000F93  
                           _TRISC 000F94                             _TRISD 000F95  
                           _TRISE 000F96                   __end_of_f_close 50D2  
                           _TXREG 000FAD                     trace_path@dir 00C6  
                           _TXSTA 000FAC                             _FatFs 00F6  
                 __end_of_f_lseek 1816               ___lmul@multiplicand 0064  
      __size_of_config_timer_dois 000E                   __end_of_f_mount 4CF2  
                 __end_of_f_write 0E86        __size_of_config_timer_zero 001C  
                   get_cluster@bc 00AF                     get_cluster@fs 00B1  
                   get_cluster@wc 00A9                   __end_of_command 49E0  
                           _delay 50FE                   clust2sect@clust 006C  
                 __end_of_fprintf 1BBE                             _fputc 4B5A  
                           _fputs 4A46          __size_of_escreve_cmd_lcd 0094  
                  ??_make_dirfile 006C                    disk_ioctl@buff 0061  
                           pclath 000FFA                    disk_read@count 0085  
                           tablat 000FF5                    disk_ioctl@pdrv 0063  
                ?_dados_gps_to_sd 0001                   __end_of_proceed 52AA  
                           plusw1 000FE3                             plusw2 000FDB  
                           utoa@c 006F                             utoa@v 006D  
                           status 000FD8                             wtemp6 0041  
                   disk_write@res 008A                   __initialization 49E0  
             disk_initialize@pdrv 0080               disk_initialize@stat 0081  
                    __end_of_main 50A6                      clust2sect@fs 0075  
                    __end_of_itoa 4E9E                      __end_of_utoa 4138  
                    __end_of_sync 4B02                _inicializa_tarefas 5018  
                 escalonador@cont 01C6               reserve_direntry@dir 00C6  
               create_chain@clust 00B6                       auto_mount@p 00B1  
               create_chain@cstat 00BE                     sdc_reset@buff 0072  
                          ??_main 00EC                            ??_itoa 0076  
                          ??_utoa 006D                            ??_sync 00A0  
                   __activetblptr 000002               ?_inicializa_tarefas 0001  
            __end_of_desliga_uart 529E                         ??_GPSRead 000A  
                  _next_dir_entry 3436              __size_of_desliga_SPI 000C  
               get_fattime@f_time 008A                  ??_sdc_disk_write 0073  
                          ?_delay 0001            ?_escreve_caractere_lcd 0001  
                          _ADCON1 000FC1                            ?_fputc 00E5  
                ___llmod@dividend 0060                            ?_fputs 018C  
              auto_mount@bootsect 00A9                            _INT0IE 007F94  
                          _INT0IF 007F91                     ?_dummy_clocks 0001  
                          i2l1910 4DD0                            _PCLATH 000FFA  
                          i2l1909 4DD8                            _INTCON 000FF2  
         __size_of_inicializa_SPI 0020                            _TMR0IF 007F92  
                          _TMR2IF 007CF1                auto_mount@maxclust 00A5  
        __end_of_recebe_dado_uart 5274                            _SPPCFG 000F63  
                          _SPPCON 000F65                            _SSPBUF 000FC9  
        __size_of_sdc_disk_status 0018                  __end_of_check_fs 4618  
            ??_inicializa_tarefas 0060                    trace_path@dptr 00D5  
                  trace_path@path 00C4            reserve_direntry@sector 00CA  
        __size_of_disk_initialize 003C        __end_of_posicao_cursor_lcd 4828  
                  auto_mount@path 0093                      ?_move_window 008B  
            __end_of_create_chain 3280            __size_of_init_hardware 0016  
                  auto_mount@stat 00B4              __size_of_get_fattime 0108  
                    put_cluster@p 00B2              __size_of_get_cluster 0222  
                          ___lmul 4B02                         ??___aldiv 0068  
            __size_of_disk_status 0048                            ___wmul 5128  
                       ??___lldiv 0068                            _f_open 1BBE  
                       ??___llmod 0068                         ??___lwdiv 0064  
                          _f_sync 3BFE                         ??___lwmod 0064  
                          _buffer 0162                            _estado 002F  
                          _memcmp 4326                            _memcpy 4D3E  
                __end_of_init_lcd 4468                            _memset 5048  
                       ??_f_close 00AD                            clear_0 4A08  
                          clear_1 4A1A                            clear_2 4A26  
                          clear_3 4A32                         ??_f_lseek 00CA  
                       ??_f_mount 0062          configura_baudrate_uart@x 007A  
                       ??_f_write 00CC                            _strcmp 4DCE  
             _sdc_disk_initialize 1F54                         ??_command 006A  
                     GPSRead@buff 000A                            _strlen 4F64  
                put_cluster@clust 00A0                            fputc@c 00E9  
              get_cluster@fatsect 00AB                  __end_of_monta_sd 3BFE  
                          itoa@cp 0076          __end_of_reserve_direntry 2534  
                __end_of_validate 4D3E            __end_of_next_dir_entry 35BE  
                       ??_fprintf 019F                            fputs@n 0191  
            __size_of_escalonador 00A4                  __end_of_response 5290  
                    __mediumconst 0000             write_timer_zero@timer 0062  
                 disk_read@sector 0081                   disk_read@result 0088  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                         ??_proceed 0062  
                _write_timer_zero 523E                            sync@fs 00A0  
       escreve_caractere_lcd@data 0062                    ??_dummy_clocks 0060  
             _escreve_inteiro_lcd 4F24                   sdc_disk_write@i 0077  
                 sdc_disk_write@j 007C                        __accesstop 0060  
         __end_of__initialization 4A38              ?_sdc_disk_initialize 0001  
                  disk_write@buff 007F                    disk_write@pdrv 0087  
            __size_of_escreve_SPI 0014                     ___rparam_used 000001  
               ??_escreve_cmd_lcd 0062                    __pcstackCOMRAM 0001  
     __end_of_endereco_cursor_lcd 4910                      __pidataBANK1 5194  
               ?_mensagem_inicial 0001           _configura_baudrate_uart 399A  
                   __end_of_delay 5128                    _escrita_sdcard 3E30  
                   __end_of_fputc 4BB0                     __end_of_fputs 4AA8  
            ?_escreve_inteiro_lcd 0078                ??_mensagem_inicial 0066  
            __end_of_make_dirfile 3714                      ?_put_cluster 00A0  
               reserve_direntry@c 00D1                 reserve_direntry@n 00CE  
              _tarefa_em_execucao 0035        __end_ofi2_write_timer_zero 5262  
                 ?_next_dir_entry 00B3            __size_of_sdc_disk_read 0146  
 configura_baudrate_uart@baudrate 006E              reserve_direntry@dptr 00CF  
            __size_of_leitura_SPI 000C                     _init_hardware 5202  
                    auto_mount@fs 00B9                __size_of_disk_read 0090  
                         ??_delay 0060                    sdc_reset@count 0070  
                         ??_fputc 00E9                           ??_fputs 0190  
    mensagem_inicial@msg_linha_um 0068                        __pbssBANK0 00EC  
                      __pbssBANK1 0100    __size_of_escreve_frase_ram_lcd 0054  
   __end_of_escreve_frase_ram_lcd 4C58             ??_sdc_disk_initialize 0073  
       escreve_inteiro_uart@F3958 01C7            __end_of_escrita_sdcard 3F0A  
              __size_of_sdc_reset 00A4                           ?___lmul 0060  
               ??_sdc_disk_status 0060                     make_dirfile@a 0072  
                   make_dirfile@b 0070                     make_dirfile@c 0074  
                   make_dirfile@n 0073                     make_dirfile@t 0071  
                         ?___wmul 0060             mensagem_inicial@F4121 0801  
           mensagem_inicial@F4119 0812             ??_escreve_inteiro_lcd 007A  
                         ?_f_open 00D7                           ?_f_sync 00A2  
               ??_disk_initialize 0080             __size_of_desliga_uart 000E  
                         ?_memcmp 0060                           ?_memcpy 0060  
                         ?_memset 0060                    ___lmul@product 0068  
                         ?_strcmp 0001                           ?_strlen 0060  
                         i2l10899 38E4                           _INTCON2 000FF1  
                         _INTCON3 000FF0                    ?_init_hardware 0001  
                       ?_check_fs 008B                        _disk_ioctl 50D2  
                         _GPSRead 2534                        _disk_write 4618  
                  remove_chain@fs 00BC                           _SSPCON1 000FC6  
        __size_of_inicializa_uart 0024                           _SSPSTAT 000FC7  
                      _clust2sect 3FD8                    _inicializa_SPI 5174  
                 trace_path@clust 00D2                     ?_remove_chain 00B6  
           __size_of_create_chain 01C0                         ?_init_lcd 0001  
              __size_of_stringcpy 004E                     _sdc_disk_read 3714  
                    _desliga_uart 5290                        _auto_mount 0E86  
                         __Hparam 0000         ??_configura_baudrate_uart 0072  
                         __Lparam 0000                         ?_monta_sd 0066  
                       ?_validate 0067                   ?_escrita_sdcard 0001  
               __end_of_disk_read 458C                     put_cluster@bc 00B0  
                       ?_response 0001                     put_cluster@fs 00B4  
                         ___aldiv 3F0A                        f_close@res 00AD  
                 __size_of___lmul 0058                           ___lldiv 4726  
                 __size_of___wmul 0028                           ___llmod 4910  
            __size_of_move_window 01B6                        check_fs@fs 0091  
                         ___lwdiv 4BB0                           ___lwmod 4E9E  
                 __size_of_f_open 0396                      __psmallconst 0800  
                 __size_of_f_sync 012A              __end_of_dummy_clocks 4E5A  
                         _f_close 50A6                           __pcinit 49E0  
                 __size_of_memcmp 00A4                   __size_of_memcpy 0048  
                 __size_of_memset 0030                           _f_lseek 138C  
                      _init_ports 51B2                           __ramtop 0800  
                         _f_mount 4CA6                           __ptext0 5078  
                         __ptext1 46A0                           __ptext2 43CA  
                         __ptext3 4468                           __ptext4 5202  
                         __ptext5 51B2                           __ptext6 52C2  
                         __ptext7 522C                           __ptext8 51CE  
                         __ptext9 523E                           _f_write 08CC  
                         _command 4978                         _T0CONbits 000FD5  
             auto_mount@totalsect 00AD                   __size_of_strcmp 0048  
                 __size_of_strlen 003E                escrita_sdcard@flag 0030  
         i2write_timer_zero@timer 0003       endereco_cursor_lcd@endereco 0062  
                         _fprintf 1816                           _rawDate 00F9  
                    __size_of_isr 3992           ??_escreve_caractere_lcd 0062  
                      ??_check_fs 008F                           _rawTime 016E  
                ___aldiv@dividend 0060                      stringcpy@chr 0009  
                    stringcpy@dir 0005                      _create_chain 30C0  
                         _proceed 529E           __size_of_init_interrupt 0012  
               __end_of_sdc_reset 4326            __end_of_inicializa_SPI 5194  
                      f_lseek@ofs 00C6                    __pintcode_body 385A  
                      f_lseek@res 00D6              end_of_initialization 4A38  
                      f_open@mode 00DB                        f_open@path 00D9  
                  ??_remove_chain 00B8                           isr@cont 0020  
                         memcmp@n 0064                           memcpy@d 0067  
                         memcpy@n 0064                           memcpy@s 0069  
         __size_of_init_oscilador 0008                           fputc@bw 00EA  
                         itoa@buf 0070                           memset@c 0062  
                         itoa@val 0072                           memset@n 0064  
                         memset@p 0066              sdc_disk_initialize@i 0074  
                   __Lmediumconst 0000                        ??_init_lcd 0063  
                         int_func 385A                 ?_recebe_dado_uart 0001  
                 disk_status@pdrv 0065                   disk_status@stat 0066  
                  ?_sdc_disk_read 006C                         i2u1383_40 38C2  
                       i2u1384_48 38C4                         i2u1389_40 391E  
          write_timer_zero@timer0 0060                   ___lldiv@divisor 0064  
                   _rawSatellites 003D                        f_mount@drv 0062  
              ??_recebe_dado_uart 0001                  sdc_disk_read@ptr 0077  
                 ___lldiv@counter 006C                        ??_monta_sd 0068  
                      ??_validate 006B             __size_of_make_dirfile 0156  
        __size_of_dados_gps_to_sd 0042                        ??_response 0060  
                       _RCSTAbits 000FAB          __end_of_write_timer_zero 5250  
                ___aldiv@quotient 006A                           postdec1 000FE5  
                         postdec2 000FDD                           postinc0 000FEE  
                         postinc1 000FE6                           postinc2 000FDE  
                         utoa@buf 0067                           utoa@val 0069  
                      _wait_ready 4FDE                           strcmp@r 0006  
                         strlen@s 0060                         _PORTBbits 000F81  
                       _PORTDbits 000F83                   ??_init_hardware 0064  
                      _trace_path 27C8                _posicao_cursor_lcd 47AA  
               __end_of_stringcpy 4CA6                     ??_desliga_SPI 0060  
            __size_of_put_cluster 027A   __end_of_configura_baudrate_uart 3ACC  
                     ?_disk_ioctl 0060                 ?_reserve_direntry 00C4  
                      f_write@btw 00C8                        f_write@res 00D8  
                       _TRISBbits 000F93                       ?_disk_write 007F  
                       _TRISCbits 000F94                         _TRISDbits 000F95  
                next_dir_entry@dj 00B3                   _escreve_cmd_lcd 4468  
              ??_reserve_direntry 00C8               ?_posicao_cursor_lcd 0063  
                 ?_inicializa_SPI 0001                   disk_write@count 0085  
                     ?_clust2sect 006C                  _put_cluster$1806 00A8  
                _put_cluster$1807 00AA                        command@CMD 006A  
                      command@CRC 0069                        command@arg 0065  
                    _make_dirfile 35BE                     ??_get_fattime 0064  
               ??_inicializa_uart 007C       __size_of_inicializa_tarefas 0030  
                   ??_get_cluster 00A2                     ??_disk_status 0062  
                     ?_auto_mount 0093                 _make_dirfile$1916 006E  
                 command@argument 006B              ??_posicao_cursor_lcd 0064  
                  __end_of___lmul 4B5A                  ??_next_dir_entry 00B5  
                  __end_of___wmul 5150                    __end_of_f_open 1F54  
                   ??_escalonador 01C4                       ?_init_ports 0001  
                  __end_of_f_sync 3D28                    __end_of_memcmp 43CA  
                  __end_of_memcpy 4D86                    __end_of_memset 5078  
                  __end_of_strcmp 4E16                    __end_of_strlen 4FA2  
             start_initialization 49E0                       __end_of_isr 399A  
       __size_of_mensagem_inicial 0086                reserve_direntry@dj 00C4  
              reserve_direntry@fs 00D4               __end_of_desliga_SPI 52C2  
                   ??_escreve_SPI 0060                   _sdc_disk_status 51EA  
                 ??_sdc_disk_read 0073                 auto_mount@fatsize 00B5  
              i2_write_timer_zero 5250                   ___llmod@divisor 0064  
                 _disk_initialize 4FA2                   ___llmod@counter 0068  
           reserve_direntry@clust 00D2           __size_of_sdc_disk_write 01CA  
                _data_uart_recebe 0036                 wait_ready@timeout 0060  
           __size_of_dummy_clocks 0044                     auto_mount@fmt 00B3  
             __size_of_disk_ioctl 002C               ?i2_write_timer_zero 0001  
             __size_of_disk_write 0088                          ??___lmul 0068  
                      fprintf@fil 0193                        fprintf@arp 01BD  
                        ??___wmul 0064                        fprintf@res 01B1  
                      fprintf@val 01B9                        fprintf@str 0195  
             __end_of_get_fattime 3E30                          ??_f_open 00DC  
                        ??_f_sync 00A4                       ?_wait_ready 0001  
                     __pdataBANK1 01C7               __end_of_get_cluster 2EF6  
                        ??_memcmp 0066               __end_of_disk_status 4DCE  
                        ??_memcpy 0066               __size_of_clust2sect 00B6  
                        ??_memset 0066            sdc_disk_read@start_add 0078  
            __end_of_remove_chain 41DE                 ??_dados_gps_to_sd 006B  
         sdc_disk_initialize@buff 007F                     ??_leitura_SPI 0060  
         __end_of_escreve_cmd_lcd 44FC                          ??_strcmp 0005  
                        ??_strlen 0062           sdc_disk_initialize@stat 0076  
                     ?_trace_path 00C0                      _fprintf$2405 01B3  
    __size_of_endereco_cursor_lcd 0070                       __pbssBIGRAM 01E4  
                   monta_sd@index 0068                       __pbssCOMRAM 0021  
                 _trace_path$1963 00CC                   _trace_path$1965 00CE  
                        ?_GPSRead 0001                     __pcstackBANK0 0060  
                   __pcstackBANK1 018C                    _init_interrupt 522C  
             __size_of_auto_mount 0506              ??i2_write_timer_zero 0003  
             __end_of_escalonador 4282       __end_of_sdc_disk_initialize 229A  
               __size_of_check_fs 008C                      check_fs@sect 008B  
                     _char_number 0034                        sdc_reset@i 006C  
                    _dummy_clocks 4E16                    _init_oscilador 52C2  
                        GPSRead@c 000B                  ??_escrita_sdcard 00EC  
             __size_of_init_ports 001C             _escreve_frase_ram_lcd 4C04  
                       _data_buff 0025                         _data_hoje 0031  
     __end_of_escreve_inteiro_lcd 4F64               __end_of_escreve_SPI 522C  
               __size_of_init_lcd 009E                  ___lwdiv@dividend 0060  
               delay@contador_int 0061                 delay@contador_ext 0060  
                       __pintcode 0008                          ?___aldiv 0060  
               __size_of_monta_sd 0132                          ?___lldiv 0060  
                        ?___llmod 0060                 __size_of_validate 004C  
                        ?___lwdiv 0060                          ?___lwmod 0060  
               __size_of_response 000E                          ?_f_close 00AB  
                       _disk_read 44FC                _sinaliza_int_timer 00F8  
                        ?_f_lseek 00C4                          ?_f_mount 0060  
                        ?_f_write 00C4                          ?_command 0065  
                     __smallconst 0800            __end_of_init_interrupt 523E  
                        ?_fprintf 0193                       _desliga_SPI 52B6  
             sdc_disk_read@p_buff 006C               sdc_disk_read@length 007C  
             sdc_disk_read@sector 006E           __end_of_sdc_disk_status 5202  
  __size_of_escreve_caractere_lcd 0078     __end_of_escreve_caractere_lcd 48A0  
                        ?_proceed 0001                         f_close@fp 00AB  
             __end_of_leitura_SPI 52B6                  ___lwdiv@quotient 0065  
                  __size_of_delay 002A           __end_of_disk_initialize 4FDE  
          __end_of_init_oscilador 52CA                    __size_of_fputc 0056  
                  __size_of_fputs 0062               make_dirfile@dirname 006A  
                      validate@id 0069                        validate@fs 0067  
                       _p_tarefas 00F0                         _rawCourse 0180  
                make_dirfile@path 0068                          _GPGGA_ok 0027  
                       _sdc_reset 4282               __size_of_wait_ready 003A  
                 ___aldiv@divisor 0064                   ___aldiv@counter 0068  
                  ___wmul@product 0064                          _LATBbits 000F8A  
                       f_lseek@fp 00C4                          _LATCbits 000F8B  
                        _GPRMC_ok 0029                         f_open@dir 019F  
                       f_open@res 019E                          _PIE1bits 000F9D  
                     _get_fattime 3D28                      _rawLongitude 0148  
             __size_of_trace_path 0292                       _get_cluster 2CD4  
                     _disk_status 4D86                     ??_move_window 008F  
                       f_mount@fs 0060                          _PIR1bits 000F9E  
                        i2u871_40 4E0A                     move_window@fs 009E  
               ?_write_timer_zero 0060                   remove_chain@nxt 00BA  
                       f_sync@dir 00A9                         f_sync@res 00A8  
                       f_sync@tim 00A4          posicao_cursor_lcd@coluna 0063  
                      ?_disk_read 007F                ??_write_timer_zero 0062  
                       f_write@cc 00DF        posicao_cursor_lcd@endereco 0065  
                       f_write@bw 00CA                         f_write@fp 00C4  
       __size_of_recebe_dado_uart 0012                       _escalonador 41DE  
               ___wmul@multiplier 0060                  ?_escreve_cmd_lcd 0001  
     escreve_frase_ram_lcd@buffer 0063                  ??_inicializa_SPI 0060  
                 ?_init_interrupt 0001                      ??_disk_ioctl 0063  
                    ??_disk_write 0086                      f_lseek@clust 00DF  
                 _inicializa_uart 5150                      f_lseek@csize 00DB  
                    f_lseek@ifptr 00D7                         _stringcpy 4C58  
                __size_of_GPSRead 0294                  _mensagem_inicial 46A0  
                 ?_init_oscilador 0001                      ??_clust2sect 0070  
               ___lmul@multiplier 0060                         copy_data0 49F4  
                     _escreve_SPI 5218                        ?_sdc_reset 0001  
             sdc_reset@count_nosd 006E          ?_configura_baudrate_uart 006E  
          ?_escreve_frase_ram_lcd 0063                  auto_mount@chk_wp 0095  
               move_window@sector 008B                    _sdc_disk_write 2EF6  
       __size_of_reserve_direntry 029A          escreve_inteiro_lcd@F3966 01CE  
                    ??_auto_mount 0096                          __Hrparam 0000  
                       memcpy@tmp 0066                          __Lrparam 0000  
                       fprintf@cc 01BF                __end_of_disk_ioctl 50FE  
           __size_of_remove_chain 00A6                    put_cluster@val 00A2  
                get_cluster@clust 00A0                __end_of_disk_write 46A0  
                    _SentenceType 0033                  __size_of___aldiv 00CE  
          sdc_disk_initialize@ocr 007C                      monta_sd@dado 0066  
                __size_of___lldiv 0084                  __size_of___llmod 0068  
                   ??_put_cluster 00A4                  __size_of___lwdiv 0054  
                    monta_sd@size 0069                  __size_of___lwmod 0044  
                    ??_init_ports 0060               __end_of_move_window 3436  
              __end_of_clust2sect 408E          escreve_inteiro_lcd@valor 0078  
                __size_of_f_close 002C          escreve_inteiro_lcd@texto 007A  
                __size_of_f_lseek 048A                  __size_of_f_mount 004C  
                     _leitura_SPI 52AA                  __size_of_f_write 05BA  
               disk_status@result 0063                  __size_of_command 0068  
           __end_of_init_hardware 5218                          _check_fs 458C  
                __size_of_fprintf 03A8                   ___lwdiv@divisor 0062  
                ?_sdc_disk_status 0001                        ?_stringcpy 0001  
                 ___lwdiv@counter 0064                __end_of_auto_mount 138C  
                        __ptext10 5274                          __ptext11 5018  
                        __ptext20 4B5A                          __ptext12 41DE  
                        __ptext21 08CC                          __ptext13 3E30  
                        __ptext30 4D3E                          __ptext22 4910  
                        __ptext14 5150                          __ptext31 0E86  
                        __ptext23 1BBE                          __ptext15 399A  
                        __ptext40 4B02                          __ptext32 5048  
                        __ptext24 27C8                          __ptext16 3F0A  
                        __ptext41 4CA6                          __ptext33 4FA2  
                        __ptext25 35BE                          __ptext17 5174  
                        __ptext50 4CF2                          __ptext42 138C  
                        __ptext34 1F54                          __ptext26 229A  
                        __ptext18 1816                          __ptext51 4D86  
                        __ptext43 30C0                          __ptext35 4282  
                        __ptext27 3436                          __ptext19 4A46  
                        __ptext60 529E                          __ptext52 51EA  
                        __ptext44 2A5A                          __ptext36 47AA  
                        __ptext28 3FD8                          __ptext61 4978  
                        __ptext53 4AA8                          __ptext45 2CD4  
                        __ptext37 48A0                          __ptext29 4138  
                        __ptext70 408E                          __ptext62 4FDE  
                        __ptext54 3280                          __ptext46 5128  
                        __ptext38 458C                          __ptext71 4E9E  
                        __ptext63 5218                          __ptext55 4618  
                        __ptext47 4726                          __ptext39 4326  
                        __ptext80 4F64                          __ptext72 4BB0  
                        __ptext64 4E16                          __ptext56 2EF6  
                        __ptext48 50A6                          __ptext73 4C04  
                        __ptext65 52AA                          __ptext57 44FC  
                        __ptext49 3BFE                          __ptext82 5250  
                        __ptext74 4828                          __ptext66 50D2  
                        __ptext58 3714                          __ptext83 5262  
                        __ptext75 50FE                          __ptext67 3D28  
                        __ptext59 5282                          __ptext84 2534  
                        __ptext76 5290                          __ptext68 4F24  
                        __ptext85 4C58                          __ptext77 52B6  
                        __ptext69 4E5A                          __ptext86 4DCE  
                        __ptext78 4EE2                          __ptext87 0000  
                        __ptext79 3ACC                  __size_of_proceed 000C  
                        _filename 01D5                       _rawAltitude 0179  
                ?_disk_initialize 0001                    _timeout_tarefa 002B  
              sdc_disk_read@count 0072        __end_of_inicializa_tarefas 5048  
        i2write_timer_zero@timer0 0001            __end_of_sdc_disk_write 30C0  
                       monta_sd@i 006A                       _rawLatitude 0155  
                        _init_lcd 43CA                     __size_of_main 002E  
                    _remove_chain 4138                     __size_of_itoa 0044  
                   __size_of_utoa 00AA                     __size_of_sync 005A  
             _endereco_cursor_lcd 48A0                __end_of_init_ports 51CE  
                        _rawSpeed 0186                     dummy_clocks@i 0063  
                        f_open@dj 01A1                     dummy_clocks@n 0062  
                        f_open@fn 018C                          f_open@fp 00D7  
                        f_open@dw 019A                          f_open@rs 0198  
                 _dados_gps_to_sd 4EE2                          _monta_sd 3ACC  
                        _validate 4CF2                          _sentence 0037  
                    move_window@n 0099                     stringcpy@str1 0001  
                   stringcpy@str2 0003                          _response 5282  
                        f_sync@fp 00A2       __size_of_posicao_cursor_lcd 007E  
                        int$flags 0040           posicao_cursor_lcd@linha 0064  
                    ??_wait_ready 0060                       ??_disk_read 0086  
         __end_of_inicializa_uart 5174                      ??_trace_path 00C8  
            ?_endereco_cursor_lcd 0001                put_cluster@fatsect 00AC  
                      _INTCONbits 000FF2                          memcmp@s1 0060  
                        memcmp@s2 0062                  move_window@wsect 009A  
                        memcpy@d1 0060                          memcpy@s1 0062  
             __end_of_put_cluster 2CD4                          fprintf@c 01C3  
                        fprintf@f 01B7                          fprintf@i 01C1  
                        fprintf@r 01B8                          fprintf@s 01A1  
                        fprintf@w 01B5                          fputc@chr 00E5  
                        itoa@base 0074                          fputc@fil 00E7  
                        memset@p1 0060                 _config_timer_dois 5274  
                    _tempo_backup 00EC                          fputs@fil 018E  
                        fputs@str 018C                 _config_timer_zero 51CE  
                   wait_ready@res 0064                          intlevel2 0000  
              ?_config_timer_dois 0001          mensagem_inicial@msg_dois 0079  
                     ??_sdc_reset 006C                ?_config_timer_zero 0001  
                    _tempo_tarefa 0021                   ?_sdc_disk_write 006C  
                ___lwmod@dividend 0060                __end_of_wait_ready 5018  
                ___lldiv@dividend 0060                 sdc_disk_read@buff 007E  
           __end_of_sdc_disk_read 385A               sdc_disk_status@pdrv 0061  
             sdc_disk_status@stat 0060                     ?_desliga_uart 0001  
             ??_config_timer_dois 0060                        _OSCCONbits 000FD3  
              __end_of_trace_path 2A5A               ??_config_timer_zero 0064  
                     _move_window 3280              sdc_disk_write@count1 0079  
            sdc_disk_write@p_buff 006C                  _recebe_dado_uart 5262  
                        utoa@base 006B              sdc_disk_write@sector 006E  
           ??_endereco_cursor_lcd 0062                      response@buff 0060  
                        strcmp@s1 0001                          strcmp@s2 0003  
                    ?_desliga_SPI 0001                  ___lldiv@quotient 0068  
                 ___lwmod@divisor 0062                          strlen@cp 0064  
                 ___lwmod@counter 0064                 remove_chain@clust 00B6  
       __end_of_config_timer_dois 5282                      ___aldiv@sign 0069  
                   ?_create_chain 00B6         __end_of_config_timer_zero 51EA  
                     ??_stringcpy 0007       __size_ofi2_write_timer_zero 0012  
                     _SSPCON1bits 000FC6           __size_of_next_dir_entry 0188  
          escreve_cmd_lcd@comando 0062                escreve_SPI@TempVar 0060  
             sdc_disk_write@count 0072     sdc_disk_initialize@crc_number 0079  
         __end_of_dados_gps_to_sd 4F24                sdc_disk_write@buff 007E  
    __size_of_sdc_disk_initialize 0346                      f_write@clust 00E1  
                  ??_desliga_uart 0060                      f_write@wbuff 00D9  
                    ?_get_fattime 0060                  _reserve_direntry 229A  
                     f_write@buff 00C6                 sdc_disk_write@res 007B  
                    ?_get_cluster 00A0                       f_write@sect 00DB  
                     f_write@wcnt 00E3                      ?_disk_status 0001  
   __end_ofmensagem_inicial@F4121 0812     __end_ofmensagem_inicial@F4119 0823  
                 escreve_SPI@dado 0061  
