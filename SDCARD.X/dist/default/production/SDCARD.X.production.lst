

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Apr 18 15:48:20 2022

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    17                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    18                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    19                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1
    81                           	psect	text58,global,reloc=2,class=CODE,delta=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=1
    86                           	psect	text63,global,reloc=2,class=CODE,delta=1,group=1
    87                           	psect	text64,global,reloc=2,class=CODE,delta=1
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	text66,global,reloc=2,class=CODE,delta=1
    90                           	psect	text67,global,reloc=2,class=CODE,delta=1
    91                           	psect	text68,global,reloc=2,class=CODE,delta=1
    92                           	psect	text69,global,reloc=2,class=CODE,delta=1
    93                           	psect	text70,global,reloc=2,class=CODE,delta=1
    94                           	psect	text71,global,reloc=2,class=CODE,delta=1
    95                           	psect	text72,global,reloc=2,class=CODE,delta=1
    96                           	psect	text73,global,reloc=2,class=CODE,delta=1
    97                           	psect	text74,global,reloc=2,class=CODE,delta=1
    98                           	psect	text75,global,reloc=2,class=CODE,delta=1
    99                           	psect	text76,global,reloc=2,class=CODE,delta=1
   100                           	psect	text77,global,reloc=2,class=CODE,delta=1
   101                           	psect	text78,global,reloc=2,class=CODE,delta=1
   102                           	psect	text79,global,reloc=2,class=CODE,delta=1
   103                           	psect	text80,global,reloc=2,class=CODE,delta=1
   104                           	psect	text81,global,reloc=2,class=CODE,delta=1
   105                           	psect	text82,global,reloc=2,class=CODE,delta=1
   106                           	psect	text83,global,reloc=2,class=CODE,delta=1
   107                           	psect	text84,global,reloc=2,class=CODE,delta=1
   108                           	psect	text85,global,reloc=2,class=CODE,delta=1
   109                           	psect	text86,global,reloc=2,class=CODE,delta=1
   110                           	psect	text87,global,reloc=2,class=CODE,delta=1
   111                           	psect	text88,global,reloc=2,class=CODE,delta=1,group=1
   112                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   113                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   114                           	psect	text90,global,reloc=2,class=CODE,delta=1
   115                           	psect	text91,global,reloc=2,class=CODE,delta=1
   116                           	psect	text92,global,reloc=2,class=CODE,delta=1
   117                           	psect	text93,global,reloc=2,class=CODE,delta=1
   118                           	psect	text94,global,reloc=2,class=CODE,delta=1,group=1
   119                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   120                           	psect	text95,global,reloc=2,class=CODE,delta=1,group=1
   121                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   122                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   123  0000                     
   124                           ; Version 1.45
   125                           ; Generated 16/11/2017 GMT
   126                           ; 
   127                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   128                           ; All rights reserved.
   129                           ; 
   130                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   131                           ; 
   132                           ; Redistribution and use in source and binary forms, with or without modification, are
   133                           ; permitted provided that the following conditions are met:
   134                           ; 
   135                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   136                           ;        conditions and the following disclaimer.
   137                           ; 
   138                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   139                           ;        of conditions and the following disclaimer in the documentation and/or other
   140                           ;        materials provided with the distribution.
   141                           ; 
   142                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   143                           ;        software without specific prior written permission.
   144                           ; 
   145                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   146                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   147                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   148                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   149                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   150                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   151                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   152                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   153                           ; 
   154                           ; 
   155                           ; Code-generator required, PIC18F4550 Definitions
   156                           ; 
   157                           ; SFR Addresses
   158  0000                     
   159                           	psect	idataCOMRAM
   160  00577C                     __pidataCOMRAM:
   161                           	opt stack 0
   162                           
   163                           ;initializer for leitura_sdcard@size
   164  00577C  58                 	db	88
   165                           
   166                           	psect	idataBANK1
   167  005492                     __pidataBANK1:
   168                           	opt stack 0
   169                           
   170                           ;initializer for verifica_fence_externo@F4380
   171  005492  2D                 	db	45
   172  005493  34                 	db	52
   173  005494  36                 	db	54
   174  005495  35                 	db	53
   175  005496  33                 	db	51
   176  005497  2E                 	db	46
   177  005498  31                 	db	49
   178  005499  36                 	db	54
   179  00549A  36                 	db	54
   180  00549B  32                 	db	50
   181  00549C  30                 	db	48
   182                           
   183                           ;initializer for verifica_fence_externo@F4378
   184  00549D  2D                 	db	45
   185  00549E  32                 	db	50
   186  00549F  33                 	db	51
   187  0054A0  36                 	db	54
   188  0054A1  35                 	db	53
   189  0054A2  2E                 	db	46
   190  0054A3  39                 	db	57
   191  0054A4  31                 	db	49
   192  0054A5  39                 	db	57
   193  0054A6  39                 	db	57
   194  0054A7  32                 	db	50
   195                           
   196                           ;initializer for escreve_inteiro_uart@F3958
   197  0054A8  30                 	db	48
   198  0054A9  30                 	db	48
   199  0054AA  30                 	db	48
   200  0054AB  30                 	db	48
   201  0054AC  30                 	db	48
   202  0054AD  30                 	db	48
   203  0054AE  00                 	db	0
   204                           
   205                           ;initializer for escreve_inteiro_lcd@F3966
   206  0054AF  30                 	db	48
   207  0054B0  30                 	db	48
   208  0054B1  30                 	db	48
   209  0054B2  30                 	db	48
   210  0054B3  30                 	db	48
   211  0054B4  30                 	db	48
   212  0054B5  00                 	db	0
   213                           
   214                           ;initializer for _filename
   215  0054B6  74                 	db	116
   216  0054B7  65                 	db	101
   217  0054B8  73                 	db	115
   218  0054B9  74                 	db	116
   219  0054BA  65                 	db	101
   220  0054BB  31                 	db	49
   221  0054BC  2E                 	db	46
   222  0054BD  74                 	db	116
   223  0054BE  78                 	db	120
   224  0054BF  74                 	db	116
   225  0054C0  00                 	db	0
   226  0054C1  00                 	db	0
   227  0054C2  00                 	db	0
   228  0054C3  00                 	db	0
   229  0054C4  00                 	db	0
   230                           
   231                           	psect	idataBANK3
   232  004F24                     __pidataBANK3:
   233                           	opt stack 0
   234                           
   235                           ;initializer for verifica_fence_externo@F4366
   236  004F24  2D                 	db	45
   237  004F25  34                 	db	52
   238  004F26  36                 	db	54
   239  004F27  35                 	db	53
   240  004F28  33                 	db	51
   241  004F29  2E                 	db	46
   242  004F2A  31                 	db	49
   243  004F2B  36                 	db	54
   244  004F2C  36                 	db	54
   245  004F2D  32                 	db	50
   246  004F2E  32                 	db	50
   247  004F2F  2D                 	db	45
   248  004F30  34                 	db	52
   249  004F31  36                 	db	54
   250  004F32  35                 	db	53
   251  004F33  33                 	db	51
   252  004F34  2E                 	db	46
   253  004F35  30                 	db	48
   254  004F36  30                 	db	48
   255  004F37  34                 	db	52
   256  004F38  37                 	db	55
   257  004F39  35                 	db	53
   258  004F3A  2D                 	db	45
   259  004F3B  34                 	db	52
   260  004F3C  36                 	db	54
   261  004F3D  35                 	db	53
   262  004F3E  33                 	db	51
   263  004F3F  2E                 	db	46
   264  004F40  30                 	db	48
   265  004F41  30                 	db	48
   266  004F42  34                 	db	52
   267  004F43  37                 	db	55
   268  004F44  35                 	db	53
   269  004F45  2D                 	db	45
   270  004F46  34                 	db	52
   271  004F47  36                 	db	54
   272  004F48  35                 	db	53
   273  004F49  33                 	db	51
   274  004F4A  2E                 	db	46
   275  004F4B  31                 	db	49
   276  004F4C  36                 	db	54
   277  004F4D  36                 	db	54
   278  004F4E  32                 	db	50
   279  004F4F  32                 	db	50
   280                           
   281                           ;initializer for verifica_fence_externo@F4363
   282  004F50  2D                 	db	45
   283  004F51  32                 	db	50
   284  004F52  33                 	db	51
   285  004F53  36                 	db	54
   286  004F54  35                 	db	53
   287  004F55  2E                 	db	46
   288  004F56  38                 	db	56
   289  004F57  34                 	db	52
   290  004F58  39                 	db	57
   291  004F59  39                 	db	57
   292  004F5A  31                 	db	49
   293  004F5B  2D                 	db	45
   294  004F5C  32                 	db	50
   295  004F5D  33                 	db	51
   296  004F5E  36                 	db	54
   297  004F5F  35                 	db	53
   298  004F60  2E                 	db	46
   299  004F61  38                 	db	56
   300  004F62  34                 	db	52
   301  004F63  39                 	db	57
   302  004F64  39                 	db	57
   303  004F65  31                 	db	49
   304  004F66  2D                 	db	45
   305  004F67  32                 	db	50
   306  004F68  33                 	db	51
   307  004F69  36                 	db	54
   308  004F6A  35                 	db	53
   309  004F6B  2E                 	db	46
   310  004F6C  39                 	db	57
   311  004F6D  39                 	db	57
   312  004F6E  37                 	db	55
   313  004F6F  33                 	db	51
   314  004F70  31                 	db	49
   315  004F71  2D                 	db	45
   316  004F72  32                 	db	50
   317  004F73  33                 	db	51
   318  004F74  36                 	db	54
   319  004F75  35                 	db	53
   320  004F76  2E                 	db	46
   321  004F77  39                 	db	57
   322  004F78  39                 	db	57
   323  004F79  37                 	db	55
   324  004F7A  33                 	db	51
   325  004F7B  31                 	db	49
   326                           
   327                           	psect	mediumconst
   328  006152                     __pmediumconst:
   329                           	opt stack 0
   330  006152  00                 	db	0
   331  006153                     mensagem_inicial@F4358:
   332                           	opt stack 0
   333  006153  54                 	db	84
   334  006154  43                 	db	67
   335  006155  43                 	db	67
   336  006156  2D                 	db	45
   337  006157  2D                 	db	45
   338  006158  54                 	db	84
   339  006159  45                 	db	69
   340  00615A  4C                 	db	76
   341  00615B  45                 	db	69
   342  00615C  4D                 	db	77
   343  00615D  54                 	db	84
   344  00615E  52                 	db	82
   345  00615F  49                 	db	73
   346  006160  41                 	db	65
   347  006161  00                 	db	0
   348  006162  00                 	db	0
   349  006163  00                 	db	0
   350  006164                     __end_ofmensagem_inicial@F4358:
   351                           	opt stack 0
   352  006164                     mensagem_inicial@F4356:
   353                           	opt stack 0
   354  006164  46                 	db	70
   355  006165  41                 	db	65
   356  006166  54                 	db	84
   357  006167  45                 	db	69
   358  006168  43                 	db	67
   359  006169  20                 	db	32
   360  00616A  53                 	db	83
   361  00616B  54                 	db	84
   362  00616C  20                 	db	32
   363  00616D  41                 	db	65
   364  00616E  4E                 	db	78
   365  00616F  44                 	db	68
   366  006170  52                 	db	82
   367  006171  45                 	db	69
   368  006172  00                 	db	0
   369  006173  00                 	db	0
   370  006174  00                 	db	0
   371  006175                     __end_ofmensagem_inicial@F4356:
   372                           	opt stack 0
   373  0000                     _RCSTA	set	4011
   374  0000                     _TXSTA	set	4012
   375  0000                     _RCREG	set	4014
   376  0000                     _RCSTAbits	set	4011
   377  0000                     _TXREG	set	4013
   378  0000                     _SPBRG	set	4015
   379  0000                     _PR2	set	4043
   380  0000                     _TMR2	set	4044
   381  0000                     _T2CON	set	4042
   382  0000                     _OSCCONbits	set	4051
   383  0000                     _TRISE	set	3990
   384  0000                     _TRISC	set	3988
   385  0000                     _TRISA	set	3986
   386  0000                     _TRISD	set	3989
   387  0000                     _LATB	set	3978
   388  0000                     _TRISB	set	3987
   389  0000                     _ADCON1	set	4033
   390  0000                     _TMR0L	set	4054
   391  0000                     _TMR0H	set	4055
   392  0000                     _PIE1	set	3997
   393  0000                     _INTCON3	set	4080
   394  0000                     _INTCON2	set	4081
   395  0000                     _INTCON	set	4082
   396  0000                     _SPPCFG	set	3939
   397  0000                     _SPPCON	set	3941
   398  0000                     _T0CON	set	4053
   399  0000                     _PORTDbits	set	3971
   400  0000                     _TRISDbits	set	3989
   401  0000                     _LATCbits	set	3979
   402  0000                     _SSPBUF	set	4041
   403  0000                     _SSPCON1bits	set	4038
   404  0000                     _SSPSTATbits	set	4039
   405  0000                     _SSPCON1	set	4038
   406  0000                     _SSPSTAT	set	4039
   407  0000                     _TRISCbits	set	3988
   408  0000                     _TRISBbits	set	3987
   409  0000                     _LATBbits	set	3978
   410  0000                     _PORTEbits	set	3972
   411  0000                     _T0CONbits	set	4053
   412  0000                     _PCL	set	4089
   413  0000                     _PCLATH	set	4090
   414  0000                     _INTCONbits	set	4082
   415  0000                     _PORTBbits	set	3969
   416  0000                     _PIR1bits	set	3998
   417  0000                     _PIE1bits	set	3997
   418  0000                     _RCIF	set	31989
   419  0000                     _TRMT	set	32097
   420  0000                     _TXEN	set	32101
   421  0000                     _CREN	set	32092
   422  0000                     _SPEN	set	32095
   423  0000                     _SYNC	set	32100
   424  0000                     _BRGH	set	32098
   425  0000                     _TMR2IF	set	31985
   426  0000                     _INT0IE	set	32660
   427  0000                     _INT0IF	set	32657
   428  0000                     _T0IF	set	32658
   429  0000                     _TMR0IF	set	32658
   430  006175                     STR_21:
   431  006175  0A                 	db	10
   432  006176  25                 	db	37
   433  006177  73                 	db	115	;'s'
   434  006178  20                 	db	32
   435  006179  3B                 	db	59	;';'
   436  00617A  20                 	db	32
   437  00617B  25                 	db	37
   438  00617C  73                 	db	115	;'s'
   439  00617D  20                 	db	32
   440  00617E  3B                 	db	59	;';'
   441  00617F  20                 	db	32
   442  006180  25                 	db	37
   443  006181  73                 	db	115	;'s'
   444  006182  20                 	db	32
   445  006183  3B                 	db	59	;';'
   446  006184  20                 	db	32
   447  006185  25                 	db	37
   448  006186  73                 	db	115	;'s'
   449  006187  20                 	db	32
   450  006188  3B                 	db	59	;';'
   451  006189  00                 	db	0
   452  00618A  6F                 	db	111	;'o'
   453  00618B  20                 	db	32
   454  00618C  53                 	db	83	;'S'
   455  00618D  69                 	db	105	;'i'
   456  00618E  73                 	db	115	;'s'
   457  00618F  74                 	db	116	;'t'
   458  006190  65                 	db	101	;'e'
   459  006191  6D                 	db	109	;'m'
   460  006192  61                 	db	97	;'a'
   461  006193  20                 	db	32
   462  006194  64                 	db	100	;'d'
   463  006195  65                 	db	101	;'e'
   464  006196  20                 	db	32
   465  006197  61                 	db	97	;'a'
   466  006198  72                 	db	114	;'r'
   467  006199  71                 	db	113	;'q'
   468  00619A  75                 	db	117	;'u'
   469  00619B  69                 	db	105	;'i'
   470  00619C  76                 	db	118	;'v'
   471  00619D  6F                 	db	111	;'o'
   472  00619E  00                 	db	0
   473  00619F                     STR_11:
   474  00619F  42                 	db	66	;'B'
   475  0061A0  31                 	db	49	;'1'
   476  0061A1  3A                 	db	58	;':'
   477  0061A2  52                 	db	82	;'R'
   478  0061A3  50                 	db	80	;'P'
   479  0061A4  4D                 	db	77	;'M'
   480  0061A5  20                 	db	32
   481  0061A6  20                 	db	32
   482  0061A7  42                 	db	66	;'B'
   483  0061A8  32                 	db	50	;'2'
   484  0061A9  3A                 	db	58	;':'
   485  0061AA  46                 	db	70	;'F'
   486  0061AB  45                 	db	69	;'E'
   487  0061AC  4E                 	db	78	;'N'
   488  0061AD  43                 	db	67	;'C'
   489  0061AE  45                 	db	69	;'E'
   490  0061AF  00                 	db	0
   491  0061B0                     STR_9:
   492  0061B0  42                 	db	66	;'B'
   493  0061B1  31                 	db	49	;'1'
   494  0061B2  3A                 	db	58	;':'
   495  0061B3  74                 	db	116	;'t'
   496  0061B4  65                 	db	101	;'e'
   497  0061B5  6C                 	db	108	;'l'
   498  0061B6  61                 	db	97	;'a'
   499  0061B7  73                 	db	115	;'s'
   500  0061B8  20                 	db	32
   501  0061B9  42                 	db	66	;'B'
   502  0061BA  32                 	db	50	;'2'
   503  0061BB  3A                 	db	58	;':'
   504  0061BC  48                 	db	72	;'H'
   505  0061BD  4F                 	db	79	;'O'
   506  0061BE  4D                 	db	77	;'M'
   507  0061BF  45                 	db	69	;'E'
   508  0061C0  00                 	db	0
   509  0061C1                     STR_24:
   510  0061C1  49                 	db	73	;'I'
   511  0061C2  6E                 	db	110	;'n'
   512  0061C3  73                 	db	115	;'s'
   513  0061C4  69                 	db	105	;'i'
   514  0061C5  72                 	db	114	;'r'
   515  0061C6  61                 	db	97	;'a'
   516  0061C7  20                 	db	32
   517  0061C8  6F                 	db	111	;'o'
   518  0061C9  20                 	db	32
   519  0061CA  43                 	db	67	;'C'
   520  0061CB  61                 	db	97	;'a'
   521  0061CC  72                 	db	114	;'r'
   522  0061CD  74                 	db	116	;'t'
   523  0061CE  61                 	db	97	;'a'
   524  0061CF  6F                 	db	111	;'o'
   525  0061D0  00                 	db	0
   526  0061D1  45                 	db	69	;'E'
   527  0061D2  72                 	db	114	;'r'
   528  0061D3  72                 	db	114	;'r'
   529  0061D4  6F                 	db	111	;'o'
   530  0061D5  20                 	db	32
   531  0061D6  61                 	db	97	;'a'
   532  0061D7  6F                 	db	111	;'o'
   533  0061D8  20                 	db	32
   534  0061D9  6D                 	db	109	;'m'
   535  0061DA  6F                 	db	111	;'o'
   536  0061DB  6E                 	db	110	;'n'
   537  0061DC  74                 	db	116	;'t'
   538  0061DD  61                 	db	97	;'a'
   539  0061DE  72                 	db	114	;'r'
   540  0061DF  00                 	db	0
   541  0061E0  45                 	db	69	;'E'
   542  0061E1  72                 	db	114	;'r'
   543  0061E2  72                 	db	114	;'r'
   544  0061E3  6F                 	db	111	;'o'
   545  0061E4  20                 	db	32
   546  0061E5  61                 	db	97	;'a'
   547  0061E6  6F                 	db	111	;'o'
   548  0061E7  20                 	db	32
   549  0061E8  63                 	db	99	;'c'
   550  0061E9  72                 	db	114	;'r'
   551  0061EA  69                 	db	105	;'i'
   552  0061EB  61                 	db	97	;'a'
   553  0061EC  72                 	db	114	;'r'
   554  0061ED  00                 	db	0
   555  0061EE                     STR_1:
   556  0061EE  52                 	db	82	;'R'
   557  0061EF  45                 	db	69	;'E'
   558  0061F0  47                 	db	71	;'G'
   559  0061F1  49                 	db	73	;'I'
   560  0061F2  41                 	db	65	;'A'
   561  0061F3  4F                 	db	79	;'O'
   562  0061F4  20                 	db	32
   563  0061F5  4E                 	db	78	;'N'
   564  0061F6  45                 	db	69	;'E'
   565  0061F7  47                 	db	71	;'G'
   566  0061F8  41                 	db	65	;'A'
   567  0061F9  44                 	db	68	;'D'
   568  0061FA  41                 	db	65	;'A'
   569  0061FB  00                 	db	0
   570  0061FC  65                 	db	101	;'e'
   571  0061FD  78                 	db	120	;'x'
   572  0061FE  74                 	db	116	;'t'
   573  0061FF  66                 	db	102	;'f'
   574  006200  65                 	db	101	;'e'
   575  006201  6E                 	db	110	;'n'
   576  006202  63                 	db	99	;'c'
   577  006203  65                 	db	101	;'e'
   578  006204  2E                 	db	46
   579  006205  74                 	db	116	;'t'
   580  006206  78                 	db	120	;'x'
   581  006207  74                 	db	116	;'t'
   582  006208  00                 	db	0
   583  006209                     STR_26:
   584  006209  4D                 	db	77	;'M'
   585  00620A  4D                 	db	77	;'M'
   586  00620B  43                 	db	67	;'C'
   587  00620C  20                 	db	32
   588  00620D  56                 	db	86	;'V'
   589  00620E  65                 	db	101	;'e'
   590  00620F  72                 	db	114	;'r'
   591  006210  2E                 	db	46
   592  006211  20                 	db	32
   593  006212  33                 	db	51	;'3'
   594  006213  00                 	db	0
   595  006214                     STR_23:
   596  006214  53                 	db	83	;'S'
   597  006215  65                 	db	101	;'e'
   598  006216  6D                 	db	109	;'m'
   599  006217  20                 	db	32
   600  006218  43                 	db	67	;'C'
   601  006219  61                 	db	97	;'a'
   602  00621A  72                 	db	114	;'r'
   603  00621B  74                 	db	116	;'t'
   604  00621C  61                 	db	97	;'a'
   605  00621D  6F                 	db	111	;'o'
   606  00621E  00                 	db	0
   607  00621F                     STR_25:
   608  00621F  53                 	db	83	;'S'
   609  006220  44                 	db	68	;'D'
   610  006221  20                 	db	32
   611  006222  56                 	db	86	;'V'
   612  006223  45                 	db	69	;'E'
   613  006224  52                 	db	82	;'R'
   614  006225  2E                 	db	46
   615  006226  20                 	db	32
   616  006227  31                 	db	49	;'1'
   617  006228  00                 	db	0
   618  006229  56                 	db	86	;'V'
   619  00622A  65                 	db	101	;'e'
   620  00622B  72                 	db	114	;'r'
   621  00622C  69                 	db	105	;'i'
   622  00622D  66                 	db	102	;'f'
   623  00622E  69                 	db	105	;'i'
   624  00622F  71                 	db	113	;'q'
   625  006230  75                 	db	117	;'u'
   626  006231  65                 	db	101	;'e'
   627  006232  00                 	db	0
   628  006233  6F                 	db	111	;'o'
   629  006234  20                 	db	32
   630  006235  61                 	db	97	;'a'
   631  006236  72                 	db	114	;'r'
   632  006237  71                 	db	113	;'q'
   633  006238  75                 	db	117	;'u'
   634  006239  69                 	db	105	;'i'
   635  00623A  76                 	db	118	;'v'
   636  00623B  6F                 	db	111	;'o'
   637  00623C  00                 	db	0
   638  00623D  6F                 	db	111	;'o'
   639  00623E  20                 	db	32
   640  00623F  63                 	db	99	;'c'
   641  006240  61                 	db	97	;'a'
   642  006241  72                 	db	114	;'r'
   643  006242  74                 	db	116	;'t'
   644  006243  61                 	db	97	;'a'
   645  006244  6F                 	db	111	;'o'
   646  006245  00                 	db	0
   647  006246                     STR_4:
   648  006246  44                 	db	68	;'D'
   649  006247  5F                 	db	95	;'_'
   650  006248  46                 	db	70	;'F'
   651  006249  65                 	db	101	;'e'
   652  00624A  6E                 	db	110	;'n'
   653  00624B  63                 	db	99	;'c'
   654  00624C  65                 	db	101	;'e'
   655  00624D  3A                 	db	58	;':'
   656  00624E  00                 	db	0
   657  00624F                     STR_10:
   658  00624F  42                 	db	66	;'B'
   659  006250  33                 	db	51	;'3'
   660  006251  3A                 	db	58	;':'
   661  006252  48                 	db	72	;'H'
   662  006253  4F                 	db	79	;'O'
   663  006254  4D                 	db	77	;'M'
   664  006255  45                 	db	69	;'E'
   665  006256  00                 	db	0
   666  006257                     STR_14:
   667  006257  47                 	db	71	;'G'
   668  006258  50                 	db	80	;'P'
   669  006259  47                 	db	71	;'G'
   670  00625A  47                 	db	71	;'G'
   671  00625B  41                 	db	65	;'A'
   672  00625C  00                 	db	0
   673  00625D                     STR_13:
   674  00625D  47                 	db	71	;'G'
   675  00625E  50                 	db	80	;'P'
   676  00625F  52                 	db	82	;'R'
   677  006260  4D                 	db	77	;'M'
   678  006261  43                 	db	67	;'C'
   679  006262  00                 	db	0
   680  006263                     STR_6:
   681  006263  4C                 	db	76	;'L'
   682  006264  46                 	db	70	;'F'
   683  006265  49                 	db	73	;'I'
   684  006266  58                 	db	88	;'X'
   685  006267  3A                 	db	58	;':'
   686  006268  00                 	db	0
   687  006269                     STR_3:
   688  006269  56                 	db	86	;'V'
   689  00626A  45                 	db	69	;'E'
   690  00626B  4C                 	db	76	;'L'
   691  00626C  3A                 	db	58	;':'
   692  00626D  00                 	db	0
   693  00626E                     STR_2:
   694  00626E  52                 	db	82	;'R'
   695  00626F  50                 	db	80	;'P'
   696  006270  4D                 	db	77	;'M'
   697  006271  3A                 	db	58	;':'
   698  006272  00                 	db	0
   699  006273                     STR_28:
   700  006273  46                 	db	70	;'F'
   701  006274  41                 	db	65	;'A'
   702  006275  54                 	db	84	;'T'
   703  006276  00                 	db	0
   704  006277                     STR_5:
   705  006277  4E                 	db	78	;'N'
   706  006278  2F                 	db	47
   707  006279  44                 	db	68	;'D'
   708  00627A  00                 	db	0
   709  00627B  0D                 	db	13
   710  00627C  0A                 	db	10
   711  00627D  00                 	db	0
   712  00627E  00                 	db	0	; dummy byte at the end
   713  0000                     
   714                           ; #config settings
   715                           
   716                           	psect	cinit
   717  004296                     __pcinit:
   718                           	opt stack 0
   719  004296                     start_initialization:
   720                           	opt stack 0
   721  004296                     __initialization:
   722                           	opt stack 0
   723                           
   724                           ; Initialize objects allocated to BANK3 (88 bytes)
   725                           ; load TBLPTR registers with __pidataBANK3
   726  004296  0E24               	movlw	low __pidataBANK3
   727  004298  6EF6               	movwf	tblptrl,c
   728  00429A  0E4F               	movlw	high __pidataBANK3
   729  00429C  6EF7               	movwf	tblptrh,c
   730  00429E  0E00               	movlw	low (__pidataBANK3 shr (0+16))
   731  0042A0  6EF8               	movwf	tblptru,c
   732  0042A2  EE03  F079         	lfsr	0,__pdataBANK3
   733  0042A6  EE10 F058          	lfsr	1,88
   734  0042AA                     copy_data0:
   735  0042AA  0009               	tblrd		*+
   736  0042AC  CFF5 FFEE          	movff	tablat,postinc0
   737  0042B0  50E5               	movf	postdec1,w,c
   738  0042B2  50E1               	movf	fsr1l,w,c
   739  0042B4  E1FA               	bnz	copy_data0
   740                           
   741                           ; Initialize objects allocated to BANK1 (51 bytes)
   742                           ; load TBLPTR registers with __pidataBANK1
   743  0042B6  0E92               	movlw	low __pidataBANK1
   744  0042B8  6EF6               	movwf	tblptrl,c
   745  0042BA  0E54               	movlw	high __pidataBANK1
   746  0042BC  6EF7               	movwf	tblptrh,c
   747  0042BE  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   748  0042C0  6EF8               	movwf	tblptru,c
   749  0042C2  EE01  F0A1         	lfsr	0,__pdataBANK1
   750  0042C6  EE10 F033          	lfsr	1,51
   751  0042CA                     copy_data1:
   752  0042CA  0009               	tblrd		*+
   753  0042CC  CFF5 FFEE          	movff	tablat,postinc0
   754  0042D0  50E5               	movf	postdec1,w,c
   755  0042D2  50E1               	movf	fsr1l,w,c
   756  0042D4  E1FA               	bnz	copy_data1
   757                           
   758                           ; Initialize objects allocated to COMRAM (1 bytes)
   759                           ; load TBLPTR registers with __pidataCOMRAM
   760  0042D6  0E7C               	movlw	low __pidataCOMRAM
   761  0042D8  6EF6               	movwf	tblptrl,c
   762  0042DA  0E57               	movlw	high __pidataCOMRAM
   763  0042DC  6EF7               	movwf	tblptrh,c
   764  0042DE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   765  0042E0  6EF8               	movwf	tblptru,c
   766  0042E2  0009               	tblrd		*+	;fetch initializer
   767  0042E4  CFF5 F03F          	movff	tablat,__pdataCOMRAM
   768                           
   769                           ; Clear objects allocated to BIGRAM (544 bytes)
   770  0042E8  EE03  F0E5         	lfsr	0,__pbssBIGRAM
   771  0042EC  EE12 F020          	lfsr	1,544
   772  0042F0                     clear_0:
   773  0042F0  6AEE               	clrf	postinc0,c
   774  0042F2  50E5               	movf	postdec1,w,c
   775  0042F4  50E1               	movf	fsr1l,w,c
   776  0042F6  E1FC               	bnz	clear_0
   777  0042F8  50E2               	movf	fsr1h,w,c
   778  0042FA  E1FA               	bnz	clear_0
   779                           
   780                           ; Clear objects allocated to BANK3 (20 bytes)
   781  0042FC  EE03  F0D1         	lfsr	0,__pbssBANK3
   782  004300  0E14               	movlw	20
   783  004302                     clear_1:
   784  004302  6AEE               	clrf	postinc0,c
   785  004304  06E8               	decf	wreg,f,c
   786  004306  E1FD               	bnz	clear_1
   787                           
   788                           ; Clear objects allocated to BANK2 (256 bytes)
   789  004308  EE02  F000         	lfsr	0,__pbssBANK2
   790  00430C  EE11 F000          	lfsr	1,256
   791  004310                     clear_2:
   792  004310  6AEE               	clrf	postinc0,c
   793  004312  50E5               	movf	postdec1,w,c
   794  004314  50E1               	movf	fsr1l,w,c
   795  004316  E1FC               	bnz	clear_2
   796  004318  50E2               	movf	fsr1h,w,c
   797  00431A  E1FA               	bnz	clear_2
   798                           
   799                           ; Clear objects allocated to BANK1 (161 bytes)
   800  00431C  EE01  F000         	lfsr	0,__pbssBANK1
   801  004320  0EA1               	movlw	161
   802  004322                     clear_3:
   803  004322  6AEE               	clrf	postinc0,c
   804  004324  06E8               	decf	wreg,f,c
   805  004326  E1FD               	bnz	clear_3
   806                           
   807                           ; Clear objects allocated to BANK0 (19 bytes)
   808  004328  EE00  F0ED         	lfsr	0,__pbssBANK0
   809  00432C  0E13               	movlw	19
   810  00432E                     clear_4:
   811  00432E  6AEE               	clrf	postinc0,c
   812  004330  06E8               	decf	wreg,f,c
   813  004332  E1FD               	bnz	clear_4
   814                           
   815                           ; Clear objects allocated to COMRAM (30 bytes)
   816  004334  EE00  F021         	lfsr	0,__pbssCOMRAM
   817  004338  0E1E               	movlw	30
   818  00433A                     clear_5:
   819  00433A  6AEE               	clrf	postinc0,c
   820  00433C  06E8               	decf	wreg,f,c
   821  00433E  E1FD               	bnz	clear_5
   822  004340                     end_of_initialization:
   823                           	opt stack 0
   824  004340                     __end_of__initialization:
   825                           	opt stack 0
   826  004340  9040               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   827  004342  9240               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   828  004344  0E00               	movlw	low (__Lmediumconst shr (0+16))
   829  004346  6EF8               	movwf	tblptru,c
   830  004348  0100               	movlb	0
   831  00434A  EF7B  F02A         	goto	_main	;jump to C main() function
   832                           tblptru	equ	0xFF8
   833                           tblptrh	equ	0xFF7
   834                           tblptrl	equ	0xFF6
   835                           tablat	equ	0xFF5
   836                           postinc0	equ	0xFEE
   837                           wreg	equ	0xFE8
   838                           postdec1	equ	0xFE5
   839                           fsr1h	equ	0xFE2
   840                           fsr1l	equ	0xFE1
   841                           
   842                           	psect	bssCOMRAM
   843  000021                     __pbssCOMRAM:
   844                           	opt stack 0
   845  000021                     _tempo_tarefa:
   846                           	opt stack 0
   847  000021                     	ds	8
   848  000029                     _data_buff:
   849                           	opt stack 0
   850  000029                     	ds	2
   851  00002B                     _GPGGA_ok:
   852                           	opt stack 0
   853  00002B                     	ds	2
   854  00002D                     _GPRMC_ok:
   855                           	opt stack 0
   856  00002D                     	ds	2
   857  00002F                     _time_sd:
   858                           	opt stack 0
   859  00002F                     	ds	2
   860  000031                     _timeout_tarefa:
   861                           	opt stack 0
   862  000031                     	ds	2
   863  000033                     _dado:
   864                           	opt stack 0
   865  000033                     	ds	1
   866  000034                     timer_dois@flag:
   867                           	opt stack 0
   868  000034                     	ds	1
   869  000035                     _estado:
   870                           	opt stack 0
   871  000035                     	ds	1
   872  000036                     _data_hoje:
   873                           	opt stack 0
   874  000036                     	ds	1
   875  000037                     _rawFix:
   876                           	opt stack 0
   877  000037                     	ds	1
   878  000038                     _Term:
   879                           	opt stack 0
   880  000038                     	ds	1
   881  000039                     _SentenceType:
   882                           	opt stack 0
   883  000039                     	ds	1
   884  00003A                     _char_number:
   885                           	opt stack 0
   886  00003A                     	ds	1
   887  00003B                     troca_de_tela@last_state:
   888                           	opt stack 0
   889  00003B                     	ds	1
   890  00003C                     troca_de_tela@state:
   891                           	opt stack 0
   892  00003C                     	ds	1
   893  00003D                     _tarefa_em_execucao:
   894                           	opt stack 0
   895  00003D                     	ds	1
   896  00003E                     _data_uart_recebe:
   897                           	opt stack 0
   898  00003E                     	ds	1
   899                           tblptru	equ	0xFF8
   900                           tblptrh	equ	0xFF7
   901                           tblptrl	equ	0xFF6
   902                           tablat	equ	0xFF5
   903                           postinc0	equ	0xFEE
   904                           wreg	equ	0xFE8
   905                           postdec1	equ	0xFE5
   906                           fsr1h	equ	0xFE2
   907                           fsr1l	equ	0xFE1
   908                           
   909                           	psect	dataCOMRAM
   910  00003F                     __pdataCOMRAM:
   911                           	opt stack 0
   912  00003F                     leitura_sdcard@size:
   913                           	opt stack 0
   914  00003F                     	ds	1
   915                           tblptru	equ	0xFF8
   916                           tblptrh	equ	0xFF7
   917                           tblptrl	equ	0xFF6
   918                           tablat	equ	0xFF5
   919                           postinc0	equ	0xFEE
   920                           wreg	equ	0xFE8
   921                           postdec1	equ	0xFE5
   922                           fsr1h	equ	0xFE2
   923                           fsr1l	equ	0xFE1
   924                           
   925                           	psect	bssBANK0
   926  0000ED                     __pbssBANK0:
   927                           	opt stack 0
   928  0000ED                     _p_tarefas:
   929                           	opt stack 0
   930  0000ED                     	ds	8
   931  0000F5                     _flag:
   932                           	opt stack 0
   933  0000F5                     	ds	3
   934  0000F8                     _fsid:
   935                           	opt stack 0
   936  0000F8                     	ds	2
   937  0000FA                     _FatFs:
   938                           	opt stack 0
   939  0000FA                     	ds	2
   940  0000FC                     _sinaliza_int_timer:
   941                           	opt stack 0
   942  0000FC                     	ds	1
   943  0000FD                     _rawSatellites:
   944                           	opt stack 0
   945  0000FD                     	ds	3
   946                           tblptru	equ	0xFF8
   947                           tblptrh	equ	0xFF7
   948                           tblptrl	equ	0xFF6
   949                           tablat	equ	0xFF5
   950                           postinc0	equ	0xFEE
   951                           wreg	equ	0xFE8
   952                           postdec1	equ	0xFE5
   953                           fsr1h	equ	0xFE2
   954                           fsr1l	equ	0xFE1
   955                           
   956                           	psect	bssBANK1
   957  000100                     __pbssBANK1:
   958                           	opt stack 0
   959  000100                     _tempo_backup:
   960                           	opt stack 0
   961  000100                     	ds	8
   962  000108                     _string_dado:
   963                           	opt stack 0
   964  000108                     	ds	44
   965  000134                     _fil:
   966                           	opt stack 0
   967  000134                     	ds	28
   968  000150                     _rawLongitude:
   969                           	opt stack 0
   970  000150                     	ds	13
   971  00015D                     _rawLatitude:
   972                           	opt stack 0
   973  00015D                     	ds	13
   974  00016A                     _buffer:
   975                           	opt stack 0
   976  00016A                     	ds	12
   977  000176                     _rawTime:
   978                           	opt stack 0
   979  000176                     	ds	11
   980  000181                     _rawAltitude:
   981                           	opt stack 0
   982  000181                     	ds	7
   983  000188                     _rawDate:
   984                           	opt stack 0
   985  000188                     	ds	7
   986  00018F                     _rawCourse:
   987                           	opt stack 0
   988  00018F                     	ds	6
   989  000195                     _rawSpeed:
   990                           	opt stack 0
   991  000195                     	ds	6
   992  00019B                     _sentence:
   993                           	opt stack 0
   994  00019B                     	ds	6
   995                           tblptru	equ	0xFF8
   996                           tblptrh	equ	0xFF7
   997                           tblptrl	equ	0xFF6
   998                           tablat	equ	0xFF5
   999                           postinc0	equ	0xFEE
  1000                           wreg	equ	0xFE8
  1001                           postdec1	equ	0xFE5
  1002                           fsr1h	equ	0xFE2
  1003                           fsr1l	equ	0xFE1
  1004                           
  1005                           	psect	dataBANK1
  1006  0001A1                     __pdataBANK1:
  1007                           	opt stack 0
  1008  0001A1                     verifica_fence_externo@F4380:
  1009                           	opt stack 0
  1010  0001A1                     	ds	11
  1011  0001AC                     verifica_fence_externo@F4378:
  1012                           	opt stack 0
  1013  0001AC                     	ds	11
  1014  0001B7                     escreve_inteiro_uart@F3958:
  1015                           	opt stack 0
  1016  0001B7                     	ds	7
  1017  0001BE                     escreve_inteiro_lcd@F3966:
  1018                           	opt stack 0
  1019  0001BE                     	ds	7
  1020  0001C5                     _filename:
  1021                           	opt stack 0
  1022  0001C5                     	ds	15
  1023                           tblptru	equ	0xFF8
  1024                           tblptrh	equ	0xFF7
  1025                           tblptrl	equ	0xFF6
  1026                           tablat	equ	0xFF5
  1027                           postinc0	equ	0xFEE
  1028                           wreg	equ	0xFE8
  1029                           postdec1	equ	0xFE5
  1030                           fsr1h	equ	0xFE2
  1031                           fsr1l	equ	0xFE1
  1032                           
  1033                           	psect	bssBANK2
  1034  000200                     __pbssBANK2:
  1035                           	opt stack 0
  1036  000200                     _poligono_ext:
  1037                           	opt stack 0
  1038  000200                     	ds	256
  1039                           tblptru	equ	0xFF8
  1040                           tblptrh	equ	0xFF7
  1041                           tblptrl	equ	0xFF6
  1042                           tablat	equ	0xFF5
  1043                           postinc0	equ	0xFEE
  1044                           wreg	equ	0xFE8
  1045                           postdec1	equ	0xFE5
  1046                           fsr1h	equ	0xFE2
  1047                           fsr1l	equ	0xFE1
  1048                           
  1049                           	psect	bssBANK3
  1050  0003D1                     __pbssBANK3:
  1051                           	opt stack 0
  1052  0003D1                     _dado_arquivo:
  1053                           	opt stack 0
  1054  0003D1                     	ds	20
  1055                           tblptru	equ	0xFF8
  1056                           tblptrh	equ	0xFF7
  1057                           tblptrl	equ	0xFF6
  1058                           tablat	equ	0xFF5
  1059                           postinc0	equ	0xFEE
  1060                           wreg	equ	0xFE8
  1061                           postdec1	equ	0xFE5
  1062                           fsr1h	equ	0xFE2
  1063                           fsr1l	equ	0xFE1
  1064                           
  1065                           	psect	dataBANK3
  1066  000379                     __pdataBANK3:
  1067                           	opt stack 0
  1068  000379                     verifica_fence_externo@F4366:
  1069                           	opt stack 0
  1070  000379                     	ds	44
  1071  0003A5                     verifica_fence_externo@F4363:
  1072                           	opt stack 0
  1073  0003A5                     	ds	44
  1074                           tblptru	equ	0xFF8
  1075                           tblptrh	equ	0xFF7
  1076                           tblptrl	equ	0xFF6
  1077                           tablat	equ	0xFF5
  1078                           postinc0	equ	0xFEE
  1079                           wreg	equ	0xFE8
  1080                           postdec1	equ	0xFE5
  1081                           fsr1h	equ	0xFE2
  1082                           fsr1l	equ	0xFE1
  1083                           
  1084                           	psect	bssBIGRAM
  1085  0003E5                     __pbssBIGRAM:
  1086                           	opt stack 0
  1087  0003E5                     _fs:
  1088                           	opt stack 0
  1089  0003E5                     	ds	544
  1090                           tblptru	equ	0xFF8
  1091                           tblptrh	equ	0xFF7
  1092                           tblptrl	equ	0xFF6
  1093                           tablat	equ	0xFF5
  1094                           postinc0	equ	0xFEE
  1095                           wreg	equ	0xFE8
  1096                           postdec1	equ	0xFE5
  1097                           fsr1h	equ	0xFE2
  1098                           fsr1l	equ	0xFE1
  1099                           
  1100                           	psect	cstackBANK3
  1101  000300                     __pcstackBANK3:
  1102                           	opt stack 0
  1103  000300                     fprintf@s:
  1104                           	opt stack 0
  1105  000300                     verifica_fence_externo@fence_diff_lat:
  1106                           	opt stack 0
  1107                           
  1108                           ; 44 bytes @ 0x0
  1109  000300                     	ds	16
  1110  000310                     fprintf@res:
  1111                           	opt stack 0
  1112                           
  1113                           ; 2 bytes @ 0x10
  1114  000310                     	ds	2
  1115  000312                     _fprintf$2595:
  1116                           	opt stack 0
  1117                           
  1118                           ; 2 bytes @ 0x12
  1119  000312                     	ds	2
  1120  000314                     fprintf@w:
  1121                           	opt stack 0
  1122                           
  1123                           ; 2 bytes @ 0x14
  1124  000314                     	ds	2
  1125  000316                     fprintf@f:
  1126                           	opt stack 0
  1127                           
  1128                           ; 1 bytes @ 0x16
  1129  000316                     	ds	1
  1130  000317                     fprintf@r:
  1131                           	opt stack 0
  1132                           
  1133                           ; 1 bytes @ 0x17
  1134  000317                     	ds	1
  1135  000318                     fprintf@val:
  1136                           	opt stack 0
  1137                           
  1138                           ; 4 bytes @ 0x18
  1139  000318                     	ds	4
  1140  00031C                     fprintf@arp:
  1141                           	opt stack 0
  1142                           
  1143                           ; 2 bytes @ 0x1C
  1144  00031C                     	ds	2
  1145  00031E                     fprintf@cc:
  1146                           	opt stack 0
  1147                           
  1148                           ; 2 bytes @ 0x1E
  1149  00031E                     	ds	2
  1150  000320                     fprintf@i:
  1151                           	opt stack 0
  1152                           
  1153                           ; 2 bytes @ 0x20
  1154  000320                     	ds	2
  1155  000322                     fprintf@c:
  1156                           	opt stack 0
  1157                           
  1158                           ; 1 bytes @ 0x22
  1159  000322                     	ds	10
  1160  00032C                     verifica_fence_externo@fence_diff_long:
  1161                           	opt stack 0
  1162                           
  1163                           ; 44 bytes @ 0x2C
  1164  00032C                     	ds	44
  1165  000358                     verifica_fence_externo@temp_buff_lat:
  1166                           	opt stack 0
  1167                           
  1168                           ; 11 bytes @ 0x58
  1169  000358                     	ds	11
  1170  000363                     verifica_fence_externo@temp_buff_long:
  1171                           	opt stack 0
  1172                           
  1173                           ; 11 bytes @ 0x63
  1174  000363                     	ds	11
  1175  00036E                     verifica_fence_externo@count:
  1176                           	opt stack 0
  1177                           
  1178                           ; 1 bytes @ 0x6E
  1179  00036E                     	ds	1
  1180  00036F                     verifica_fence_externo@point_dif:
  1181                           	opt stack 0
  1182                           
  1183                           ; 1 bytes @ 0x6F
  1184  00036F                     	ds	1
  1185  000370                     verifica_fence_externo@point_buff_gps_lat:
  1186                           	opt stack 0
  1187                           
  1188                           ; 2 bytes @ 0x70
  1189  000370                     	ds	2
  1190  000372                     verifica_fence_externo@point_buff_gps_long:
  1191                           	opt stack 0
  1192                           
  1193                           ; 2 bytes @ 0x72
  1194  000372                     	ds	2
  1195  000374                     verifica_fence_externo@temp_var_deg:
  1196                           	opt stack 0
  1197                           
  1198                           ; 2 bytes @ 0x74
  1199  000374                     	ds	2
  1200  000376                     verifica_fence_externo@j:
  1201                           	opt stack 0
  1202                           
  1203                           ; 1 bytes @ 0x76
  1204  000376                     	ds	1
  1205  000377                     verifica_fence_externo@i:
  1206                           	opt stack 0
  1207                           
  1208                           ; 1 bytes @ 0x77
  1209  000377                     	ds	1
  1210  000378                     verifica_fence_externo@point:
  1211                           	opt stack 0
  1212                           
  1213                           ; 1 bytes @ 0x78
  1214  000378                     	ds	1
  1215                           tblptru	equ	0xFF8
  1216                           tblptrh	equ	0xFF7
  1217                           tblptrl	equ	0xFF6
  1218                           tablat	equ	0xFF5
  1219                           postinc0	equ	0xFEE
  1220                           wreg	equ	0xFE8
  1221                           postdec1	equ	0xFE5
  1222                           fsr1h	equ	0xFE2
  1223                           fsr1l	equ	0xFE1
  1224                           
  1225                           	psect	cstackBANK1
  1226  0001D4                     __pcstackBANK1:
  1227                           	opt stack 0
  1228  0001D4                     ?_fputs:
  1229                           	opt stack 0
  1230  0001D4                     fputs@str:
  1231                           	opt stack 0
  1232  0001D4                     f_open@fn:
  1233                           	opt stack 0
  1234                           
  1235                           ; 12 bytes @ 0x0
  1236  0001D4                     	ds	2
  1237  0001D6                     fputs@fil:
  1238                           	opt stack 0
  1239                           
  1240                           ; 2 bytes @ 0x2
  1241  0001D6                     	ds	2
  1242  0001D8                     fputs@n:
  1243                           	opt stack 0
  1244                           
  1245                           ; 2 bytes @ 0x4
  1246  0001D8                     	ds	2
  1247  0001DA                     ?_fprintf:
  1248                           	opt stack 0
  1249  0001DA                     fprintf@fil:
  1250                           	opt stack 0
  1251                           
  1252                           ; 2 bytes @ 0x6
  1253  0001DA                     	ds	2
  1254  0001DC                     fprintf@str:
  1255                           	opt stack 0
  1256                           
  1257                           ; 2 bytes @ 0x8
  1258  0001DC                     	ds	4
  1259  0001E0                     f_open@rs:
  1260                           	opt stack 0
  1261                           
  1262                           ; 2 bytes @ 0xC
  1263  0001E0                     	ds	2
  1264  0001E2                     f_open@dw:
  1265                           	opt stack 0
  1266                           
  1267                           ; 4 bytes @ 0xE
  1268  0001E2                     	ds	4
  1269  0001E6                     ??_fprintf:
  1270  0001E6                     f_open@res:
  1271                           	opt stack 0
  1272                           
  1273                           ; 1 bytes @ 0x12
  1274  0001E6                     	ds	1
  1275  0001E7                     f_open@dir:
  1276                           	opt stack 0
  1277                           
  1278                           ; 2 bytes @ 0x13
  1279  0001E7                     	ds	2
  1280  0001E9                     f_open@dj:
  1281                           	opt stack 0
  1282                           
  1283                           ; 14 bytes @ 0x15
  1284  0001E9                     	ds	14
  1285  0001F7                     
  1286                           ; 1 bytes @ 0x23
  1287  0001F7                     	ds	2
  1288  0001F9                     escalonador@cont:
  1289                           	opt stack 0
  1290                           
  1291                           ; 1 bytes @ 0x25
  1292  0001F9                     	ds	1
  1293                           tblptru	equ	0xFF8
  1294                           tblptrh	equ	0xFF7
  1295                           tblptrl	equ	0xFF6
  1296                           tablat	equ	0xFF5
  1297                           postinc0	equ	0xFEE
  1298                           wreg	equ	0xFE8
  1299                           postdec1	equ	0xFE5
  1300                           fsr1h	equ	0xFE2
  1301                           fsr1l	equ	0xFE1
  1302                           
  1303                           	psect	cstackBANK0
  1304  000060                     __pcstackBANK0:
  1305                           	opt stack 0
  1306  000060                     ??_isdigit:
  1307  000060                     ??_dummy_clocks:
  1308  000060                     ?_Latitude:
  1309                           	opt stack 0
  1310  000060                     ?_Longitude:
  1311                           	opt stack 0
  1312  000060                     ?_strlen:
  1313                           	opt stack 0
  1314  000060                     ?_memcmp:
  1315                           	opt stack 0
  1316  000060                     ?___wmul:
  1317                           	opt stack 0
  1318  000060                     ?___lwdiv:
  1319                           	opt stack 0
  1320  000060                     ?___lwmod:
  1321                           	opt stack 0
  1322  000060                     ?_get_fattime:
  1323                           	opt stack 0
  1324  000060                     ?___lmul:
  1325                           	opt stack 0
  1326  000060                     ?___aldiv:
  1327                           	opt stack 0
  1328  000060                     ?___lldiv:
  1329                           	opt stack 0
  1330  000060                     ?___llmod:
  1331                           	opt stack 0
  1332  000060                     response@buff:
  1333                           	opt stack 0
  1334  000060                     escreve_SPI@TempVar:
  1335                           	opt stack 0
  1336  000060                     disk_ioctl@cmd:
  1337                           	opt stack 0
  1338  000060                     sdc_disk_status@stat:
  1339                           	opt stack 0
  1340  000060                     delay@contador_ext:
  1341                           	opt stack 0
  1342  000060                     write_timer_zero@timer0:
  1343                           	opt stack 0
  1344  000060                     f_mount@fs:
  1345                           	opt stack 0
  1346  000060                     ___wmul@multiplier:
  1347                           	opt stack 0
  1348  000060                     ___lwdiv@dividend:
  1349                           	opt stack 0
  1350  000060                     ___lwmod@dividend:
  1351                           	opt stack 0
  1352  000060                     memcmp@s1:
  1353                           	opt stack 0
  1354  000060                     memcpy@d1:
  1355                           	opt stack 0
  1356  000060                     memset@p1:
  1357                           	opt stack 0
  1358  000060                     strlen@s:
  1359                           	opt stack 0
  1360  000060                     wait_ready@timeout:
  1361                           	opt stack 0
  1362  000060                     ___lmul@multiplier:
  1363                           	opt stack 0
  1364  000060                     ___aldiv@dividend:
  1365                           	opt stack 0
  1366  000060                     ___lldiv@dividend:
  1367                           	opt stack 0
  1368  000060                     ___llmod@dividend:
  1369                           	opt stack 0
  1370                           
  1371                           ; 4 bytes @ 0x0
  1372  000060                     	ds	1
  1373  000061                     escreve_SPI@dado:
  1374                           	opt stack 0
  1375  000061                     sdc_disk_status@pdrv:
  1376                           	opt stack 0
  1377  000061                     delay@contador_int:
  1378                           	opt stack 0
  1379  000061                     _isdigit$2933:
  1380                           	opt stack 0
  1381  000061                     disk_ioctl@buff:
  1382                           	opt stack 0
  1383                           
  1384                           ; 2 bytes @ 0x1
  1385  000061                     	ds	1
  1386  000062                     ??_strlen:
  1387  000062                     ??_disk_status:
  1388  000062                     dummy_clocks@n:
  1389                           	opt stack 0
  1390  000062                     escreve_cmd_lcd@comando:
  1391                           	opt stack 0
  1392  000062                     endereco_cursor_lcd@endereco:
  1393                           	opt stack 0
  1394  000062                     escreve_caractere_lcd@data:
  1395                           	opt stack 0
  1396  000062                     f_mount@drv:
  1397                           	opt stack 0
  1398  000062                     isdigit@c:
  1399                           	opt stack 0
  1400  000062                     write_timer_zero@timer:
  1401                           	opt stack 0
  1402  000062                     ___wmul@multiplicand:
  1403                           	opt stack 0
  1404  000062                     ___lwdiv@divisor:
  1405                           	opt stack 0
  1406  000062                     ___lwmod@divisor:
  1407                           	opt stack 0
  1408  000062                     memcmp@s2:
  1409                           	opt stack 0
  1410  000062                     memcpy@s1:
  1411                           	opt stack 0
  1412  000062                     memset@c:
  1413                           	opt stack 0
  1414                           
  1415                           ; 2 bytes @ 0x2
  1416  000062                     	ds	1
  1417  000063                     ??_init_lcd:
  1418  000063                     disk_ioctl@pdrv:
  1419                           	opt stack 0
  1420  000063                     posicao_cursor_lcd@coluna:
  1421                           	opt stack 0
  1422  000063                     dummy_clocks@i:
  1423                           	opt stack 0
  1424  000063                     disk_status@result:
  1425                           	opt stack 0
  1426  000063                     escreve_frase_ram_lcd@buffer:
  1427                           	opt stack 0
  1428                           
  1429                           ; 2 bytes @ 0x3
  1430  000063                     	ds	1
  1431  000064                     ??_get_fattime:
  1432  000064                     wait_ready@res:
  1433                           	opt stack 0
  1434  000064                     disk_ioctl@res:
  1435                           	opt stack 0
  1436  000064                     posicao_cursor_lcd@linha:
  1437                           	opt stack 0
  1438  000064                     ___lwdiv@counter:
  1439                           	opt stack 0
  1440  000064                     ___lwmod@counter:
  1441                           	opt stack 0
  1442  000064                     ___wmul@product:
  1443                           	opt stack 0
  1444  000064                     memcmp@n:
  1445                           	opt stack 0
  1446  000064                     memcpy@n:
  1447                           	opt stack 0
  1448  000064                     memset@n:
  1449                           	opt stack 0
  1450  000064                     strlen@cp:
  1451                           	opt stack 0
  1452  000064                     ___lmul@multiplicand:
  1453                           	opt stack 0
  1454  000064                     ___aldiv@divisor:
  1455                           	opt stack 0
  1456  000064                     ___lldiv@divisor:
  1457                           	opt stack 0
  1458  000064                     ___llmod@divisor:
  1459                           	opt stack 0
  1460                           
  1461                           ; 4 bytes @ 0x4
  1462  000064                     	ds	1
  1463  000065                     disk_status@pdrv:
  1464                           	opt stack 0
  1465  000065                     posicao_cursor_lcd@endereco:
  1466                           	opt stack 0
  1467  000065                     ___lwdiv@quotient:
  1468                           	opt stack 0
  1469  000065                     command@arg:
  1470                           	opt stack 0
  1471                           
  1472                           ; 4 bytes @ 0x5
  1473  000065                     	ds	1
  1474  000066                     ??_mensagem_inicial:
  1475  000066                     ??_memcmp:
  1476  000066                     ?_atoi:
  1477                           	opt stack 0
  1478  000066                     disk_status@stat:
  1479                           	opt stack 0
  1480  000066                     memcpy@tmp:
  1481                           	opt stack 0
  1482  000066                     monta_sd@dado:
  1483                           	opt stack 0
  1484  000066                     atoi@s:
  1485                           	opt stack 0
  1486  000066                     memset@p:
  1487                           	opt stack 0
  1488                           
  1489                           ; 2 bytes @ 0x6
  1490  000066                     	ds	1
  1491  000067                     validate@fs:
  1492                           	opt stack 0
  1493  000067                     utoa@buf:
  1494                           	opt stack 0
  1495  000067                     memcpy@d:
  1496                           	opt stack 0
  1497                           
  1498                           ; 2 bytes @ 0x7
  1499  000067                     	ds	1
  1500  000068                     ??_atoi:
  1501  000068                     monta_sd@index:
  1502                           	opt stack 0
  1503  000068                     ___aldiv@counter:
  1504                           	opt stack 0
  1505  000068                     ___llmod@counter:
  1506                           	opt stack 0
  1507  000068                     make_dirfile@path:
  1508                           	opt stack 0
  1509  000068                     ___lmul@product:
  1510                           	opt stack 0
  1511  000068                     ___lldiv@quotient:
  1512                           	opt stack 0
  1513  000068                     mensagem_inicial@msg_linha_um:
  1514                           	opt stack 0
  1515                           
  1516                           ; 17 bytes @ 0x8
  1517  000068                     	ds	1
  1518  000069                     command@CRC:
  1519                           	opt stack 0
  1520  000069                     monta_sd@size:
  1521                           	opt stack 0
  1522  000069                     ___aldiv@sign:
  1523                           	opt stack 0
  1524  000069                     validate@id:
  1525                           	opt stack 0
  1526  000069                     utoa@val:
  1527                           	opt stack 0
  1528  000069                     memcpy@s:
  1529                           	opt stack 0
  1530                           
  1531                           ; 2 bytes @ 0x9
  1532  000069                     	ds	1
  1533  00006A                     command@CMD:
  1534                           	opt stack 0
  1535  00006A                     monta_sd@i:
  1536                           	opt stack 0
  1537  00006A                     atoi@sign:
  1538                           	opt stack 0
  1539  00006A                     make_dirfile@dirname:
  1540                           	opt stack 0
  1541  00006A                     ___aldiv@quotient:
  1542                           	opt stack 0
  1543                           
  1544                           ; 4 bytes @ 0xA
  1545  00006A                     	ds	1
  1546  00006B                     ??_validate:
  1547  00006B                     command@argument:
  1548                           	opt stack 0
  1549  00006B                     atoi@a:
  1550                           	opt stack 0
  1551  00006B                     utoa@base:
  1552                           	opt stack 0
  1553                           
  1554                           ; 2 bytes @ 0xB
  1555  00006B                     	ds	1
  1556  00006C                     ??_make_dirfile:
  1557  00006C                     ?_clust2sect:
  1558                           	opt stack 0
  1559  00006C                     ___lldiv@counter:
  1560                           	opt stack 0
  1561  00006C                     sdc_reset@i:
  1562                           	opt stack 0
  1563  00006C                     sdc_disk_read@p_buff:
  1564                           	opt stack 0
  1565  00006C                     sdc_disk_write@p_buff:
  1566                           	opt stack 0
  1567  00006C                     clust2sect@clust:
  1568                           	opt stack 0
  1569                           
  1570                           ; 2 bytes @ 0xC
  1571  00006C                     	ds	1
  1572  00006D                     utoa@v:
  1573                           	opt stack 0
  1574                           
  1575                           ; 2 bytes @ 0xD
  1576  00006D                     	ds	1
  1577  00006E                     sdc_reset@count_nosd:
  1578                           	opt stack 0
  1579  00006E                     _make_dirfile$2107:
  1580                           	opt stack 0
  1581  00006E                     sdc_disk_read@sector:
  1582                           	opt stack 0
  1583  00006E                     sdc_disk_write@sector:
  1584                           	opt stack 0
  1585  00006E                     configura_baudrate_uart@baudrate:
  1586                           	opt stack 0
  1587                           
  1588                           ; 4 bytes @ 0xE
  1589  00006E                     	ds	1
  1590  00006F                     utoa@c:
  1591                           	opt stack 0
  1592                           
  1593                           ; 1 bytes @ 0xF
  1594  00006F                     	ds	1
  1595  000070                     ??_clust2sect:
  1596  000070                     make_dirfile@b:
  1597                           	opt stack 0
  1598  000070                     sdc_reset@count:
  1599                           	opt stack 0
  1600  000070                     itoa@buf:
  1601                           	opt stack 0
  1602                           
  1603                           ; 2 bytes @ 0x10
  1604  000070                     	ds	1
  1605  000071                     make_dirfile@t:
  1606                           	opt stack 0
  1607                           
  1608                           ; 1 bytes @ 0x11
  1609  000071                     	ds	1
  1610  000072                     ??_configura_baudrate_uart:
  1611  000072                     sdc_reset@buff:
  1612                           	opt stack 0
  1613  000072                     sdc_disk_read@count:
  1614                           	opt stack 0
  1615  000072                     sdc_disk_write@count:
  1616                           	opt stack 0
  1617  000072                     make_dirfile@a:
  1618                           	opt stack 0
  1619  000072                     itoa@val:
  1620                           	opt stack 0
  1621                           
  1622                           ; 2 bytes @ 0x12
  1623  000072                     	ds	1
  1624  000073                     ??_sdc_disk_initialize:
  1625  000073                     ??_sdc_disk_read:
  1626  000073                     ??_sdc_disk_write:
  1627  000073                     make_dirfile@n:
  1628                           	opt stack 0
  1629                           
  1630                           ; 1 bytes @ 0x13
  1631  000073                     	ds	1
  1632  000074                     make_dirfile@c:
  1633                           	opt stack 0
  1634  000074                     sdc_disk_initialize@i:
  1635                           	opt stack 0
  1636  000074                     itoa@base:
  1637                           	opt stack 0
  1638                           
  1639                           ; 2 bytes @ 0x14
  1640  000074                     	ds	1
  1641  000075                     clust2sect@fs:
  1642                           	opt stack 0
  1643                           
  1644                           ; 2 bytes @ 0x15
  1645  000075                     	ds	1
  1646  000076                     sdc_disk_initialize@stat:
  1647                           	opt stack 0
  1648  000076                     itoa@cp:
  1649                           	opt stack 0
  1650                           
  1651                           ; 2 bytes @ 0x16
  1652  000076                     	ds	1
  1653  000077                     sdc_disk_read@ptr:
  1654                           	opt stack 0
  1655  000077                     sdc_disk_initialize@count1:
  1656                           	opt stack 0
  1657  000077                     sdc_disk_write@i:
  1658                           	opt stack 0
  1659                           
  1660                           ; 2 bytes @ 0x17
  1661  000077                     	ds	1
  1662  000078                     escreve_inteiro_lcd@valor:
  1663                           	opt stack 0
  1664  000078                     sdc_disk_read@start_add:
  1665                           	opt stack 0
  1666                           
  1667                           ; 4 bytes @ 0x18
  1668  000078                     	ds	1
  1669  000079                     sdc_disk_initialize@crc_number:
  1670                           	opt stack 0
  1671  000079                     sdc_disk_write@count1:
  1672                           	opt stack 0
  1673  000079                     mensagem_inicial@msg_dois:
  1674                           	opt stack 0
  1675                           
  1676                           ; 17 bytes @ 0x19
  1677  000079                     	ds	1
  1678  00007A                     configura_baudrate_uart@x:
  1679                           	opt stack 0
  1680  00007A                     escreve_inteiro_lcd@texto:
  1681                           	opt stack 0
  1682                           
  1683                           ; 7 bytes @ 0x1A
  1684  00007A                     	ds	1
  1685  00007B                     sdc_disk_initialize@buff_i:
  1686                           	opt stack 0
  1687  00007B                     sdc_disk_write@res:
  1688                           	opt stack 0
  1689                           
  1690                           ; 1 bytes @ 0x1B
  1691  00007B                     	ds	1
  1692  00007C                     sdc_disk_initialize@ocr:
  1693                           	opt stack 0
  1694  00007C                     sdc_disk_read@length:
  1695                           	opt stack 0
  1696  00007C                     sdc_disk_write@j:
  1697                           	opt stack 0
  1698                           
  1699                           ; 2 bytes @ 0x1C
  1700  00007C                     	ds	1
  1701  00007D                     sdc_disk_initialize@count2:
  1702                           	opt stack 0
  1703                           
  1704                           ; 2 bytes @ 0x1D
  1705  00007D                     	ds	1
  1706  00007E                     sdc_disk_read@buff:
  1707                           	opt stack 0
  1708  00007E                     sdc_disk_write@buff:
  1709                           	opt stack 0
  1710                           
  1711                           ; 1 bytes @ 0x1E
  1712  00007E                     	ds	1
  1713  00007F                     sdc_disk_initialize@buff:
  1714                           	opt stack 0
  1715  00007F                     disk_read@buff:
  1716                           	opt stack 0
  1717  00007F                     disk_write@buff:
  1718                           	opt stack 0
  1719                           
  1720                           ; 2 bytes @ 0x1F
  1721  00007F                     	ds	1
  1722  000080                     disk_initialize@pdrv:
  1723                           	opt stack 0
  1724                           
  1725                           ; 1 bytes @ 0x20
  1726  000080                     	ds	1
  1727  000081                     ??_verifica_fence_externo:
  1728  000081                     disk_initialize@stat:
  1729                           	opt stack 0
  1730  000081                     disk_read@sector:
  1731                           	opt stack 0
  1732  000081                     disk_write@sector:
  1733                           	opt stack 0
  1734                           
  1735                           ; 4 bytes @ 0x21
  1736  000081                     	ds	4
  1737  000085                     disk_read@count:
  1738                           	opt stack 0
  1739  000085                     disk_write@count:
  1740                           	opt stack 0
  1741                           
  1742                           ; 1 bytes @ 0x25
  1743  000085                     	ds	1
  1744  000086                     ??_disk_read:
  1745  000086                     ??_disk_write:
  1746                           
  1747                           ; 1 bytes @ 0x26
  1748  000086                     	ds	1
  1749  000087                     disk_read@pdrv:
  1750                           	opt stack 0
  1751  000087                     disk_write@pdrv:
  1752                           	opt stack 0
  1753                           
  1754                           ; 1 bytes @ 0x27
  1755  000087                     	ds	1
  1756  000088                     disk_read@result:
  1757                           	opt stack 0
  1758  000088                     disk_write@result:
  1759                           	opt stack 0
  1760                           
  1761                           ; 2 bytes @ 0x28
  1762  000088                     	ds	2
  1763  00008A                     disk_read@res:
  1764                           	opt stack 0
  1765  00008A                     disk_write@res:
  1766                           	opt stack 0
  1767  00008A                     get_fattime@f_time:
  1768                           	opt stack 0
  1769                           
  1770                           ; 9 bytes @ 0x2A
  1771  00008A                     	ds	1
  1772  00008B                     move_window@sector:
  1773                           	opt stack 0
  1774  00008B                     check_fs@sect:
  1775                           	opt stack 0
  1776                           
  1777                           ; 4 bytes @ 0x2B
  1778  00008B                     	ds	4
  1779  00008F                     ??_move_window:
  1780  00008F                     
  1781                           ; 1 bytes @ 0x2F
  1782  00008F                     	ds	2
  1783  000091                     check_fs@fs:
  1784                           	opt stack 0
  1785                           
  1786                           ; 2 bytes @ 0x31
  1787  000091                     	ds	2
  1788  000093                     auto_mount@path:
  1789                           	opt stack 0
  1790                           
  1791                           ; 2 bytes @ 0x33
  1792  000093                     	ds	2
  1793  000095                     auto_mount@chk_wp:
  1794                           	opt stack 0
  1795                           
  1796                           ; 1 bytes @ 0x35
  1797  000095                     	ds	1
  1798  000096                     ??_auto_mount:
  1799                           
  1800                           ; 1 bytes @ 0x36
  1801  000096                     	ds	3
  1802  000099                     move_window@n:
  1803                           	opt stack 0
  1804                           
  1805                           ; 1 bytes @ 0x39
  1806  000099                     	ds	1
  1807  00009A                     move_window@wsect:
  1808                           	opt stack 0
  1809                           
  1810                           ; 4 bytes @ 0x3A
  1811  00009A                     	ds	4
  1812  00009E                     move_window@fs:
  1813                           	opt stack 0
  1814                           
  1815                           ; 2 bytes @ 0x3E
  1816  00009E                     	ds	2
  1817  0000A0                     ?_get_cluster:
  1818                           	opt stack 0
  1819  0000A0                     sync@fs:
  1820                           	opt stack 0
  1821  0000A0                     get_cluster@clust:
  1822                           	opt stack 0
  1823  0000A0                     put_cluster@clust:
  1824                           	opt stack 0
  1825                           
  1826                           ; 2 bytes @ 0x40
  1827  0000A0                     	ds	2
  1828  0000A2                     ??_get_cluster:
  1829  0000A2                     put_cluster@val:
  1830                           	opt stack 0
  1831  0000A2                     f_sync@fp:
  1832                           	opt stack 0
  1833                           
  1834                           ; 2 bytes @ 0x42
  1835  0000A2                     	ds	2
  1836  0000A4                     ??_put_cluster:
  1837  0000A4                     f_sync@tim:
  1838                           	opt stack 0
  1839                           
  1840                           ; 4 bytes @ 0x44
  1841  0000A4                     	ds	1
  1842  0000A5                     auto_mount@maxclust:
  1843                           	opt stack 0
  1844                           
  1845                           ; 4 bytes @ 0x45
  1846  0000A5                     	ds	3
  1847  0000A8                     f_sync@res:
  1848                           	opt stack 0
  1849  0000A8                     _put_cluster$1997:
  1850                           	opt stack 0
  1851                           
  1852                           ; 2 bytes @ 0x48
  1853  0000A8                     	ds	1
  1854  0000A9                     get_cluster@wc:
  1855                           	opt stack 0
  1856  0000A9                     f_sync@dir:
  1857                           	opt stack 0
  1858  0000A9                     auto_mount@bootsect:
  1859                           	opt stack 0
  1860                           
  1861                           ; 4 bytes @ 0x49
  1862  0000A9                     	ds	1
  1863  0000AA                     _put_cluster$1998:
  1864                           	opt stack 0
  1865                           
  1866                           ; 2 bytes @ 0x4A
  1867  0000AA                     	ds	1
  1868  0000AB                     f_close@fp:
  1869                           	opt stack 0
  1870  0000AB                     get_cluster@fatsect:
  1871                           	opt stack 0
  1872                           
  1873                           ; 4 bytes @ 0x4B
  1874  0000AB                     	ds	1
  1875  0000AC                     put_cluster@fatsect:
  1876                           	opt stack 0
  1877                           
  1878                           ; 4 bytes @ 0x4C
  1879  0000AC                     	ds	1
  1880  0000AD                     f_close@res:
  1881                           	opt stack 0
  1882  0000AD                     auto_mount@totalsect:
  1883                           	opt stack 0
  1884                           
  1885                           ; 4 bytes @ 0x4D
  1886  0000AD                     	ds	2
  1887  0000AF                     get_cluster@bc:
  1888                           	opt stack 0
  1889                           
  1890                           ; 2 bytes @ 0x4F
  1891  0000AF                     	ds	1
  1892  0000B0                     put_cluster@bc:
  1893                           	opt stack 0
  1894                           
  1895                           ; 2 bytes @ 0x50
  1896  0000B0                     	ds	1
  1897  0000B1                     get_cluster@fs:
  1898                           	opt stack 0
  1899  0000B1                     auto_mount@p:
  1900                           	opt stack 0
  1901                           
  1902                           ; 2 bytes @ 0x51
  1903  0000B1                     	ds	1
  1904  0000B2                     put_cluster@p:
  1905                           	opt stack 0
  1906                           
  1907                           ; 2 bytes @ 0x52
  1908  0000B2                     	ds	1
  1909  0000B3                     auto_mount@fmt:
  1910                           	opt stack 0
  1911  0000B3                     next_dir_entry@dj:
  1912                           	opt stack 0
  1913                           
  1914                           ; 2 bytes @ 0x53
  1915  0000B3                     	ds	1
  1916  0000B4                     auto_mount@stat:
  1917                           	opt stack 0
  1918  0000B4                     put_cluster@fs:
  1919                           	opt stack 0
  1920                           
  1921                           ; 2 bytes @ 0x54
  1922  0000B4                     	ds	1
  1923  0000B5                     ??_next_dir_entry:
  1924  0000B5                     auto_mount@fatsize:
  1925                           	opt stack 0
  1926                           
  1927                           ; 4 bytes @ 0x55
  1928  0000B5                     	ds	1
  1929  0000B6                     ?_create_chain:
  1930                           	opt stack 0
  1931  0000B6                     remove_chain@clust:
  1932                           	opt stack 0
  1933  0000B6                     create_chain@clust:
  1934                           	opt stack 0
  1935                           
  1936                           ; 2 bytes @ 0x56
  1937  0000B6                     	ds	2
  1938  0000B8                     
  1939                           ; 1 bytes @ 0x58
  1940  0000B8                     	ds	1
  1941  0000B9                     auto_mount@fs:
  1942                           	opt stack 0
  1943                           
  1944                           ; 2 bytes @ 0x59
  1945  0000B9                     	ds	1
  1946  0000BA                     remove_chain@nxt:
  1947                           	opt stack 0
  1948  0000BA                     create_chain@mcl:
  1949                           	opt stack 0
  1950                           
  1951                           ; 2 bytes @ 0x5A
  1952  0000BA                     	ds	2
  1953  0000BC                     remove_chain@fs:
  1954                           	opt stack 0
  1955  0000BC                     create_chain@fs:
  1956                           	opt stack 0
  1957  0000BC                     next_dir_entry@clust:
  1958                           	opt stack 0
  1959                           
  1960                           ; 2 bytes @ 0x5C
  1961  0000BC                     	ds	2
  1962  0000BE                     create_chain@cstat:
  1963                           	opt stack 0
  1964  0000BE                     next_dir_entry@idx:
  1965                           	opt stack 0
  1966                           
  1967                           ; 2 bytes @ 0x5E
  1968  0000BE                     	ds	2
  1969  0000C0                     create_chain@scl:
  1970                           	opt stack 0
  1971  0000C0                     trace_path@dj:
  1972                           	opt stack 0
  1973                           
  1974                           ; 2 bytes @ 0x60
  1975  0000C0                     	ds	2
  1976  0000C2                     create_chain@ncl:
  1977                           	opt stack 0
  1978  0000C2                     trace_path@fn:
  1979                           	opt stack 0
  1980                           
  1981                           ; 2 bytes @ 0x62
  1982  0000C2                     	ds	2
  1983  0000C4                     trace_path@path:
  1984                           	opt stack 0
  1985  0000C4                     reserve_direntry@dj:
  1986                           	opt stack 0
  1987  0000C4                     f_write@fp:
  1988                           	opt stack 0
  1989  0000C4                     f_lseek@fp:
  1990                           	opt stack 0
  1991                           
  1992                           ; 2 bytes @ 0x64
  1993  0000C4                     	ds	2
  1994  0000C6                     trace_path@dir:
  1995                           	opt stack 0
  1996  0000C6                     reserve_direntry@dir:
  1997                           	opt stack 0
  1998  0000C6                     f_write@buff:
  1999                           	opt stack 0
  2000  0000C6                     f_lseek@ofs:
  2001                           	opt stack 0
  2002                           
  2003                           ; 4 bytes @ 0x66
  2004  0000C6                     	ds	2
  2005  0000C8                     ??_trace_path:
  2006  0000C8                     ??_reserve_direntry:
  2007  0000C8                     f_write@btw:
  2008                           	opt stack 0
  2009                           
  2010                           ; 2 bytes @ 0x68
  2011  0000C8                     	ds	2
  2012  0000CA                     ??_f_lseek:
  2013  0000CA                     f_write@bw:
  2014                           	opt stack 0
  2015  0000CA                     reserve_direntry@sector:
  2016                           	opt stack 0
  2017                           
  2018                           ; 4 bytes @ 0x6A
  2019  0000CA                     	ds	2
  2020  0000CC                     ??_f_write:
  2021  0000CC                     _trace_path$2154:
  2022                           	opt stack 0
  2023                           
  2024                           ; 2 bytes @ 0x6C
  2025  0000CC                     	ds	2
  2026  0000CE                     reserve_direntry@n:
  2027                           	opt stack 0
  2028  0000CE                     _trace_path$2156:
  2029                           	opt stack 0
  2030                           
  2031                           ; 2 bytes @ 0x6E
  2032  0000CE                     	ds	1
  2033  0000CF                     reserve_direntry@dptr:
  2034                           	opt stack 0
  2035                           
  2036                           ; 2 bytes @ 0x6F
  2037  0000CF                     	ds	1
  2038  0000D0                     trace_path@fs:
  2039                           	opt stack 0
  2040                           
  2041                           ; 2 bytes @ 0x70
  2042  0000D0                     	ds	1
  2043  0000D1                     reserve_direntry@c:
  2044                           	opt stack 0
  2045                           
  2046                           ; 1 bytes @ 0x71
  2047  0000D1                     	ds	1
  2048  0000D2                     trace_path@clust:
  2049                           	opt stack 0
  2050  0000D2                     reserve_direntry@clust:
  2051                           	opt stack 0
  2052                           
  2053                           ; 2 bytes @ 0x72
  2054  0000D2                     	ds	2
  2055  0000D4                     trace_path@ds:
  2056                           	opt stack 0
  2057  0000D4                     reserve_direntry@fs:
  2058                           	opt stack 0
  2059                           
  2060                           ; 2 bytes @ 0x74
  2061  0000D4                     	ds	1
  2062  0000D5                     trace_path@dptr:
  2063                           	opt stack 0
  2064                           
  2065                           ; 2 bytes @ 0x75
  2066  0000D5                     	ds	1
  2067  0000D6                     f_lseek@res:
  2068                           	opt stack 0
  2069                           
  2070                           ; 1 bytes @ 0x76
  2071  0000D6                     	ds	1
  2072  0000D7                     f_open@fp:
  2073                           	opt stack 0
  2074  0000D7                     f_lseek@ifptr:
  2075                           	opt stack 0
  2076                           
  2077                           ; 4 bytes @ 0x77
  2078  0000D7                     	ds	1
  2079  0000D8                     f_write@res:
  2080                           	opt stack 0
  2081                           
  2082                           ; 1 bytes @ 0x78
  2083  0000D8                     	ds	1
  2084  0000D9                     f_open@path:
  2085                           	opt stack 0
  2086  0000D9                     f_write@wbuff:
  2087                           	opt stack 0
  2088                           
  2089                           ; 2 bytes @ 0x79
  2090  0000D9                     	ds	2
  2091  0000DB                     f_open@mode:
  2092                           	opt stack 0
  2093  0000DB                     f_write@sect:
  2094                           	opt stack 0
  2095  0000DB                     f_lseek@csize:
  2096                           	opt stack 0
  2097                           
  2098                           ; 4 bytes @ 0x7B
  2099  0000DB                     	ds	1
  2100  0000DC                     ??_f_open:
  2101                           
  2102                           ; 1 bytes @ 0x7C
  2103  0000DC                     	ds	3
  2104  0000DF                     f_write@cc:
  2105                           	opt stack 0
  2106  0000DF                     f_lseek@clust:
  2107                           	opt stack 0
  2108                           
  2109                           ; 2 bytes @ 0x7F
  2110  0000DF                     	ds	2
  2111  0000E1                     f_write@clust:
  2112                           	opt stack 0
  2113                           
  2114                           ; 2 bytes @ 0x81
  2115  0000E1                     	ds	2
  2116  0000E3                     f_write@wcnt:
  2117                           	opt stack 0
  2118                           
  2119                           ; 2 bytes @ 0x83
  2120  0000E3                     	ds	2
  2121  0000E5                     ?_fputc:
  2122                           	opt stack 0
  2123  0000E5                     fputc@chr:
  2124                           	opt stack 0
  2125                           
  2126                           ; 2 bytes @ 0x85
  2127  0000E5                     	ds	2
  2128  0000E7                     fputc@fil:
  2129                           	opt stack 0
  2130                           
  2131                           ; 2 bytes @ 0x87
  2132  0000E7                     	ds	2
  2133  0000E9                     fputc@c:
  2134                           	opt stack 0
  2135                           
  2136                           ; 1 bytes @ 0x89
  2137  0000E9                     	ds	1
  2138  0000EA                     fputc@bw:
  2139                           	opt stack 0
  2140                           
  2141                           ; 2 bytes @ 0x8A
  2142  0000EA                     	ds	2
  2143  0000EC                     ??_fputs:
  2144                           
  2145                           ; 1 bytes @ 0x8C
  2146  0000EC                     	ds	1
  2147  0000ED                     tblptru	equ	0xFF8
  2148                           tblptrh	equ	0xFF7
  2149                           tblptrl	equ	0xFF6
  2150                           tablat	equ	0xFF5
  2151                           postinc0	equ	0xFEE
  2152                           wreg	equ	0xFE8
  2153                           postdec1	equ	0xFE5
  2154                           fsr1h	equ	0xFE2
  2155                           fsr1l	equ	0xFE1
  2156                           
  2157                           ; 1 bytes @ 0x8D
  2158                           
  2159                           	psect	cstackCOMRAM
  2160  000001                     __pcstackCOMRAM:
  2161                           	opt stack 0
  2162  000001                     ?_strcmp:
  2163                           	opt stack 0
  2164  000001                     stringcpy@str1:
  2165                           	opt stack 0
  2166  000001                     strcmp@s1:
  2167                           	opt stack 0
  2168  000001                     i2write_timer_zero@timer0:
  2169                           	opt stack 0
  2170                           
  2171                           ; 2 bytes @ 0x0
  2172  000001                     	ds	2
  2173  000003                     stringcpy@str2:
  2174                           	opt stack 0
  2175  000003                     strcmp@s2:
  2176                           	opt stack 0
  2177  000003                     i2write_timer_zero@timer:
  2178                           	opt stack 0
  2179                           
  2180                           ; 2 bytes @ 0x2
  2181  000003                     	ds	2
  2182  000005                     ??_strcmp:
  2183  000005                     stringcpy@dir:
  2184                           	opt stack 0
  2185                           
  2186                           ; 2 bytes @ 0x4
  2187  000005                     	ds	1
  2188  000006                     strcmp@r:
  2189                           	opt stack 0
  2190                           
  2191                           ; 1 bytes @ 0x5
  2192  000006                     	ds	1
  2193  000007                     ??_stringcpy:
  2194                           
  2195                           ; 1 bytes @ 0x6
  2196  000007                     	ds	2
  2197  000009                     stringcpy@chr:
  2198                           	opt stack 0
  2199                           
  2200                           ; 1 bytes @ 0x8
  2201  000009                     	ds	1
  2202  00000A                     GPSRead@buff:
  2203                           	opt stack 0
  2204                           
  2205                           ; 1 bytes @ 0x9
  2206  00000A                     	ds	1
  2207  00000B                     GPSRead@c:
  2208                           	opt stack 0
  2209                           
  2210                           ; 1 bytes @ 0xA
  2211  00000B                     	ds	1
  2212  00000C                     ??_isr:
  2213                           
  2214                           ; 1 bytes @ 0xB
  2215  00000C                     	ds	20
  2216  000020                     isr@cont:
  2217                           	opt stack 0
  2218                           
  2219                           ; 1 bytes @ 0x1F
  2220  000020                     	ds	1
  2221                           tblptru	equ	0xFF8
  2222                           tblptrh	equ	0xFF7
  2223                           tblptrl	equ	0xFF6
  2224                           tablat	equ	0xFF5
  2225                           postinc0	equ	0xFEE
  2226                           wreg	equ	0xFE8
  2227                           postdec1	equ	0xFE5
  2228                           fsr1h	equ	0xFE2
  2229                           fsr1l	equ	0xFE1
  2230                           
  2231 ;;
  2232 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2233 ;;
  2234 ;; *************** function _main *****************
  2235 ;; Defined at:
  2236 ;;		line 214 in file "main.c"
  2237 ;; Parameters:    Size  Location     Type
  2238 ;;		None
  2239 ;; Auto vars:     Size  Location     Type
  2240 ;;		None
  2241 ;; Return value:  Size  Location     Type
  2242 ;;                  1    wreg      void 
  2243 ;; Registers used:
  2244 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2245 ;; Tracked objects:
  2246 ;;		On entry : 0/0
  2247 ;;		On exit  : 0/0
  2248 ;;		Unchanged: 0/0
  2249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2250 ;;      Params:         0       0       0       0       0       0       0       0       0
  2251 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2252 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2253 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2254 ;;Total ram usage:        0 bytes
  2255 ;; Hardware stack levels required when called:   18
  2256 ;; This function calls:
  2257 ;;		_dados_gps_to_sd
  2258 ;;		_escalonador
  2259 ;;		_inicializa_tarefas
  2260 ;;		_inicializa_uart
  2261 ;;		_init_hardware
  2262 ;;		_init_lcd
  2263 ;;		_mensagem_inicial
  2264 ;; This function is called by:
  2265 ;;		Startup code after reset
  2266 ;; This function uses a non-reentrant model
  2267 ;;
  2268                           
  2269                           	psect	text0
  2270  0054F6                     __ptext0:
  2271                           	opt stack 0
  2272  0054F6                     _main:
  2273                           	opt stack 13
  2274                           
  2275                           ;main.c: 216: init_hardware();
  2276                           
  2277                           ;incstack = 0
  2278  0054F6  EC42  F02B         	call	_init_hardware	;wreg free
  2279                           
  2280                           ;main.c: 217: T0CONbits.TMR0ON = 0;
  2281  0054FA  9ED5               	bcf	4053,7,c	;volatile
  2282                           
  2283                           ;main.c: 218: init_lcd();
  2284  0054FC  ECF4  F023         	call	_init_lcd	;wreg free
  2285                           
  2286                           ;main.c: 219: mensagem_inicial();
  2287  005500  EC5F  F025         	call	_mensagem_inicial	;wreg free
  2288                           
  2289                           ;main.c: 220: inicializa_tarefas();
  2290  005504  EC97  F026         	call	_inicializa_tarefas	;wreg free
  2291                           
  2292                           ;main.c: 221: inicializa_uart();
  2293  005508  ECE7  F02A         	call	_inicializa_uart	;wreg free
  2294                           
  2295                           ;main.c: 222: T0CONbits.TMR0ON = 1;
  2296  00550C  8ED5               	bsf	4053,7,c	;volatile
  2297  00550E                     
  2298                           ;main.c: 224: {
  2299                           ;main.c: 226: if ((sinaliza_int_timer == 1) && (4))
  2300  00550E  0100               	movlb	0	; () banked
  2301  005510  05FC               	decf	_sinaliza_int_timer& (0+255),w,b
  2302  005512  A4D8               	btfss	status,2,c
  2303  005514  D004               	goto	l115
  2304                           
  2305                           ; BSR set to: 0
  2306                           ;main.c: 227: {
  2307                           ;main.c: 228: sinaliza_int_timer = 0;
  2308  005516  0E00               	movlw	0
  2309  005518  6FFC               	movwf	_sinaliza_int_timer& (0+255),b
  2310                           
  2311                           ; BSR set to: 0
  2312                           ;main.c: 229: escalonador();
  2313  00551A  ECFE  F022         	call	_escalonador	;wreg free
  2314  00551E                     l115:
  2315                           
  2316                           ;main.c: 230: }
  2317                           ;main.c: 231: dados_gps_to_sd();
  2318  00551E  ECAE  F029         	call	_dados_gps_to_sd	;wreg free
  2319  005522  D7F5               	goto	l114
  2320  005524                     __end_of_main:
  2321                           	opt stack 0
  2322                           tblptru	equ	0xFF8
  2323                           tblptrh	equ	0xFF7
  2324                           tblptrl	equ	0xFF6
  2325                           tablat	equ	0xFF5
  2326                           postinc0	equ	0xFEE
  2327                           wreg	equ	0xFE8
  2328                           postdec1	equ	0xFE5
  2329                           fsr1h	equ	0xFE2
  2330                           fsr1l	equ	0xFE1
  2331                           status	equ	0xFD8
  2332                           
  2333 ;; *************** function _mensagem_inicial *****************
  2334 ;; Defined at:
  2335 ;;		line 241 in file "main.c"
  2336 ;; Parameters:    Size  Location     Type
  2337 ;;		None
  2338 ;; Auto vars:     Size  Location     Type
  2339 ;;  msg_dois       17   25[BANK0 ] const unsigned char [17]
  2340 ;;  msg_linha_um   17    8[BANK0 ] const unsigned char [17]
  2341 ;; Return value:  Size  Location     Type
  2342 ;;                  1    wreg      void 
  2343 ;; Registers used:
  2344 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2345 ;; Tracked objects:
  2346 ;;		On entry : 0/0
  2347 ;;		On exit  : 0/0
  2348 ;;		Unchanged: 0/0
  2349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2350 ;;      Params:         0       0       0       0       0       0       0       0       0
  2351 ;;      Locals:         0      34       0       0       0       0       0       0       0
  2352 ;;      Temps:          0       2       0       0       0       0       0       0       0
  2353 ;;      Totals:         0      36       0       0       0       0       0       0       0
  2354 ;;Total ram usage:       36 bytes
  2355 ;; Hardware stack levels used:    1
  2356 ;; Hardware stack levels required when called:    6
  2357 ;; This function calls:
  2358 ;;		_escreve_cmd_lcd
  2359 ;;		_escreve_frase_ram_lcd
  2360 ;;		_posicao_cursor_lcd
  2361 ;; This function is called by:
  2362 ;;		_main
  2363 ;; This function uses a non-reentrant model
  2364 ;;
  2365                           
  2366                           	psect	text1
  2367  004ABE                     __ptext1:
  2368                           	opt stack 0
  2369  004ABE                     _mensagem_inicial:
  2370                           	opt stack 24
  2371                           
  2372                           ;main.c: 243: const unsigned char msg_linha_um[17] = "FATEC ST ANDRE";
  2373                           
  2374                           ;incstack = 0
  2375  004ABE  0E64               	movlw	low mensagem_inicial@F4356
  2376  004AC0  6EF6               	movwf	tblptrl,c
  2377  004AC2                     	if	1	;There is more than 1 active tblptr byte
  2378  004AC2  0E61               	movlw	high mensagem_inicial@F4356
  2379  004AC4  6EF7               	movwf	tblptrh,c
  2380  004AC6                     	endif
  2381  004AC6                     	if	0	;There are less than 3 active tblptr bytes
  2382  004AC6                     	endif
  2383  004AC6  EE20  F068         	lfsr	2,mensagem_inicial@msg_linha_um
  2384  004ACA  0E10               	movlw	16
  2385  004ACC                     u16690:
  2386  004ACC  0009               	tblrd		*+
  2387  004ACE  CFF5 FFDE          	movff	tablat,postinc2
  2388  004AD2  06E8               	decf	wreg,f,c
  2389  004AD4  E2FB               	bc	u16690
  2390                           
  2391                           ;main.c: 244: const unsigned char msg_dois[17] = "TCC--TELEMTRIA";
  2392  004AD6  0E53               	movlw	low mensagem_inicial@F4358
  2393  004AD8  6EF6               	movwf	tblptrl,c
  2394  004ADA                     	if	1	;There is more than 1 active tblptr byte
  2395  004ADA  0E61               	movlw	high mensagem_inicial@F4358
  2396  004ADC  6EF7               	movwf	tblptrh,c
  2397  004ADE                     	endif
  2398  004ADE                     	if	0	;There are less than 3 active tblptr bytes
  2399  004ADE                     	endif
  2400  004ADE  EE20  F079         	lfsr	2,mensagem_inicial@msg_dois
  2401  004AE2  0E10               	movlw	16
  2402  004AE4                     u16700:
  2403  004AE4  0009               	tblrd		*+
  2404  004AE6  CFF5 FFDE          	movff	tablat,postinc2
  2405  004AEA  06E8               	decf	wreg,f,c
  2406  004AEC  E2FB               	bc	u16700
  2407                           
  2408                           ;main.c: 246: posicao_cursor_lcd(1,0);
  2409  004AEE  0E00               	movlw	0
  2410  004AF0  0100               	movlb	0	; () banked
  2411  004AF2  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  2412  004AF4  0E01               	movlw	1
  2413  004AF6  ECE4  F025         	call	_posicao_cursor_lcd
  2414                           
  2415                           ;main.c: 247: escreve_frase_ram_lcd(msg_linha_um);
  2416  004AFA  0E68               	movlw	low mensagem_inicial@msg_linha_um
  2417  004AFC  0100               	movlb	0	; () banked
  2418  004AFE  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  2419  004B00  0E00               	movlw	high mensagem_inicial@msg_linha_um
  2420  004B02  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  2421  004B04  EC3F  F028         	call	_escreve_frase_ram_lcd	;wreg free
  2422                           
  2423                           ;main.c: 249: posicao_cursor_lcd(2,0);
  2424  004B08  0E00               	movlw	0
  2425  004B0A  0100               	movlb	0	; () banked
  2426  004B0C  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  2427  004B0E  0E02               	movlw	2
  2428  004B10  ECE4  F025         	call	_posicao_cursor_lcd
  2429                           
  2430                           ;main.c: 250: escreve_frase_ram_lcd(msg_dois);
  2431  004B14  0E79               	movlw	low mensagem_inicial@msg_dois
  2432  004B16  0100               	movlb	0	; () banked
  2433  004B18  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  2434  004B1A  0E00               	movlw	high mensagem_inicial@msg_dois
  2435  004B1C  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  2436  004B1E  EC3F  F028         	call	_escreve_frase_ram_lcd	;wreg free
  2437                           
  2438                           ;main.c: 251: _delay((unsigned long)((1000)*(48000000/4000.0)));
  2439  004B22  0E3D               	movlw	61
  2440  004B24  0100               	movlb	0	; () banked
  2441  004B26  6F67               	movwf	(??_mensagem_inicial+1)& (0+255),b
  2442  004B28  0EE1               	movlw	225
  2443  004B2A  6F66               	movwf	??_mensagem_inicial& (0+255),b
  2444  004B2C  0E3F               	movlw	63
  2445  004B2E                     u17307:
  2446  004B2E  2EE8               	decfsz	wreg,f,c
  2447  004B30  D7FE               	bra	u17307
  2448  004B32  2F66               	decfsz	??_mensagem_inicial& (0+255),f,b
  2449  004B34  D7FC               	bra	u17307
  2450  004B36  2F67               	decfsz	(??_mensagem_inicial+1)& (0+255),f,b
  2451  004B38  D7FA               	bra	u17307
  2452  004B3A  D000               	nop2	
  2453                           
  2454                           ;main.c: 252: escreve_cmd_lcd(0b00000001);
  2455  004B3C  0E01               	movlw	1
  2456  004B3E  EC43  F024         	call	_escreve_cmd_lcd
  2457  004B42  0012               	return		;funcret
  2458  004B44                     __end_of_mensagem_inicial:
  2459                           	opt stack 0
  2460                           tblptru	equ	0xFF8
  2461                           tblptrh	equ	0xFF7
  2462                           tblptrl	equ	0xFF6
  2463                           tablat	equ	0xFF5
  2464                           postinc0	equ	0xFEE
  2465                           wreg	equ	0xFE8
  2466                           postdec1	equ	0xFE5
  2467                           fsr1h	equ	0xFE2
  2468                           fsr1l	equ	0xFE1
  2469                           postinc2	equ	0xFDE
  2470                           status	equ	0xFD8
  2471                           
  2472 ;; *************** function _init_lcd *****************
  2473 ;; Defined at:
  2474 ;;		line 71 in file "bibliotecas/display_lcd.c"
  2475 ;; Parameters:    Size  Location     Type
  2476 ;;		None
  2477 ;; Auto vars:     Size  Location     Type
  2478 ;;		None
  2479 ;; Return value:  Size  Location     Type
  2480 ;;                  1    wreg      void 
  2481 ;; Registers used:
  2482 ;;		wreg, status,2, status,0, cstack
  2483 ;; Tracked objects:
  2484 ;;		On entry : 0/0
  2485 ;;		On exit  : 0/0
  2486 ;;		Unchanged: 0/0
  2487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2488 ;;      Params:         0       0       0       0       0       0       0       0       0
  2489 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2490 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2491 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2492 ;;Total ram usage:        1 bytes
  2493 ;; Hardware stack levels used:    1
  2494 ;; Hardware stack levels required when called:    5
  2495 ;; This function calls:
  2496 ;;		_delay
  2497 ;;		_escreve_cmd_lcd
  2498 ;; This function is called by:
  2499 ;;		_main
  2500 ;; This function uses a non-reentrant model
  2501 ;;
  2502                           
  2503                           	psect	text2
  2504  0047E8                     __ptext2:
  2505                           	opt stack 0
  2506  0047E8                     _init_lcd:
  2507                           	opt stack 25
  2508                           
  2509                           ;display_lcd.c: 74: TRISDbits.RD2 = 0;
  2510                           
  2511                           ;incstack = 0
  2512  0047E8  9495               	bcf	3989,2,c	;volatile
  2513                           
  2514                           ;display_lcd.c: 75: TRISDbits.RD1 = 0;
  2515  0047EA  9295               	bcf	3989,1,c	;volatile
  2516                           
  2517                           ;display_lcd.c: 76: TRISDbits.RD0 = 0;
  2518  0047EC  9095               	bcf	3989,0,c	;volatile
  2519                           
  2520                           ;display_lcd.c: 79: TRISDbits.RD4=0;
  2521  0047EE  9895               	bcf	3989,4,c	;volatile
  2522                           
  2523                           ;display_lcd.c: 80: TRISDbits.RD5=0;
  2524  0047F0  9A95               	bcf	3989,5,c	;volatile
  2525                           
  2526                           ;display_lcd.c: 81: TRISDbits.RD6=0;
  2527  0047F2  9C95               	bcf	3989,6,c	;volatile
  2528                           
  2529                           ;display_lcd.c: 82: TRISDbits.RD7=0;
  2530  0047F4  9E95               	bcf	3989,7,c	;volatile
  2531                           
  2532                           ;display_lcd.c: 89: PORTDbits.RD2 = 0;
  2533  0047F6  9483               	bcf	3971,2,c	;volatile
  2534                           
  2535                           ;display_lcd.c: 90: PORTDbits.RD1 = 0;
  2536  0047F8  9283               	bcf	3971,1,c	;volatile
  2537                           
  2538                           ;display_lcd.c: 91: PORTDbits.RD0 = 0;
  2539  0047FA  9083               	bcf	3971,0,c	;volatile
  2540                           
  2541                           ;display_lcd.c: 95: PORTDbits.RD7=0;
  2542  0047FC  9E83               	bcf	3971,7,c	;volatile
  2543                           
  2544                           ;display_lcd.c: 96: PORTDbits.RD6=0;
  2545  0047FE  9C83               	bcf	3971,6,c	;volatile
  2546                           
  2547                           ;display_lcd.c: 97: PORTDbits.RD5=1;
  2548  004800  8A83               	bsf	3971,5,c	;volatile
  2549                           
  2550                           ;display_lcd.c: 98: PORTDbits.RD4=1;
  2551  004802  8883               	bsf	3971,4,c	;volatile
  2552                           
  2553                           ;display_lcd.c: 103: _delay((unsigned long)((15)*(48000000/4000.0)));
  2554  004804  0EEA               	movlw	234
  2555  004806  0100               	movlb	0	; () banked
  2556  004808  6F63               	movwf	??_init_lcd& (0+255),b
  2557  00480A  0EC3               	movlw	195
  2558  00480C                     u17317:
  2559  00480C  2EE8               	decfsz	wreg,f,c
  2560  00480E  D7FE               	bra	u17317
  2561  004810  2F63               	decfsz	??_init_lcd& (0+255),f,b
  2562  004812  D7FC               	bra	u17317
  2563                           
  2564                           ;display_lcd.c: 107: PORTDbits.RD0 = 1;
  2565  004814  8083               	bsf	3971,0,c	;volatile
  2566                           
  2567                           ;display_lcd.c: 108: delay();
  2568  004816  ECBE  F02A         	call	_delay	;wreg free
  2569                           
  2570                           ;display_lcd.c: 109: PORTDbits.RD0 = 0;
  2571  00481A  9083               	bcf	3971,0,c	;volatile
  2572                           
  2573                           ;display_lcd.c: 110: delay();
  2574  00481C  ECBE  F02A         	call	_delay	;wreg free
  2575                           
  2576                           ;display_lcd.c: 115: _delay((unsigned long)((5)*(48000000/4000.0)));
  2577  004820  0E4E               	movlw	78
  2578  004822  0100               	movlb	0	; () banked
  2579  004824  6F63               	movwf	??_init_lcd& (0+255),b
  2580  004826  0EEB               	movlw	235
  2581  004828                     u17327:
  2582  004828  2EE8               	decfsz	wreg,f,c
  2583  00482A  D7FE               	bra	u17327
  2584  00482C  2F63               	decfsz	??_init_lcd& (0+255),f,b
  2585  00482E  D7FC               	bra	u17327
  2586                           
  2587                           ;display_lcd.c: 118: PORTDbits.RD0 = 1;
  2588  004830  8083               	bsf	3971,0,c	;volatile
  2589                           
  2590                           ;display_lcd.c: 119: delay();
  2591  004832  ECBE  F02A         	call	_delay	;wreg free
  2592                           
  2593                           ;display_lcd.c: 120: PORTDbits.RD0 = 0;
  2594  004836  9083               	bcf	3971,0,c	;volatile
  2595                           
  2596                           ;display_lcd.c: 121: delay();
  2597  004838  ECBE  F02A         	call	_delay	;wreg free
  2598                           
  2599                           ;display_lcd.c: 126: _delay((unsigned long)((5)*(48000000/4000.0)));
  2600  00483C  0E4E               	movlw	78
  2601  00483E  0100               	movlb	0	; () banked
  2602  004840  6F63               	movwf	??_init_lcd& (0+255),b
  2603  004842  0EEB               	movlw	235
  2604  004844                     u17337:
  2605  004844  2EE8               	decfsz	wreg,f,c
  2606  004846  D7FE               	bra	u17337
  2607  004848  2F63               	decfsz	??_init_lcd& (0+255),f,b
  2608  00484A  D7FC               	bra	u17337
  2609                           
  2610                           ;display_lcd.c: 129: PORTDbits.RD0 = 1;
  2611  00484C  8083               	bsf	3971,0,c	;volatile
  2612                           
  2613                           ;display_lcd.c: 130: delay();
  2614  00484E  ECBE  F02A         	call	_delay	;wreg free
  2615                           
  2616                           ;display_lcd.c: 131: PORTDbits.RD0 = 0;
  2617  004852  9083               	bcf	3971,0,c	;volatile
  2618                           
  2619                           ;display_lcd.c: 132: delay();
  2620  004854  ECBE  F02A         	call	_delay	;wreg free
  2621                           
  2622                           ;display_lcd.c: 135: PORTDbits.RD7=0;
  2623  004858  9E83               	bcf	3971,7,c	;volatile
  2624                           
  2625                           ;display_lcd.c: 136: PORTDbits.RD6=0;
  2626  00485A  9C83               	bcf	3971,6,c	;volatile
  2627                           
  2628                           ;display_lcd.c: 137: PORTDbits.RD5=1;
  2629  00485C  8A83               	bsf	3971,5,c	;volatile
  2630                           
  2631                           ;display_lcd.c: 138: PORTDbits.RD4=0;
  2632  00485E  9883               	bcf	3971,4,c	;volatile
  2633                           
  2634                           ;display_lcd.c: 142: PORTDbits.RD0 = 1;
  2635  004860  8083               	bsf	3971,0,c	;volatile
  2636                           
  2637                           ;display_lcd.c: 143: delay();
  2638  004862  ECBE  F02A         	call	_delay	;wreg free
  2639                           
  2640                           ;display_lcd.c: 144: PORTDbits.RD0 = 0;
  2641  004866  9083               	bcf	3971,0,c	;volatile
  2642                           
  2643                           ;display_lcd.c: 145: delay();
  2644  004868  ECBE  F02A         	call	_delay	;wreg free
  2645                           
  2646                           ;display_lcd.c: 149: escreve_cmd_lcd(0b00101000);
  2647  00486C  0E28               	movlw	40
  2648  00486E  EC43  F024         	call	_escreve_cmd_lcd
  2649                           
  2650                           ;display_lcd.c: 150: escreve_cmd_lcd(0b00000110);
  2651  004872  0E06               	movlw	6
  2652  004874  EC43  F024         	call	_escreve_cmd_lcd
  2653                           
  2654                           ;display_lcd.c: 151: escreve_cmd_lcd(0b00001110);
  2655  004878  0E0E               	movlw	14
  2656  00487A  EC43  F024         	call	_escreve_cmd_lcd
  2657                           
  2658                           ;display_lcd.c: 152: escreve_cmd_lcd(0b00000001);
  2659  00487E  0E01               	movlw	1
  2660  004880  EC43  F024         	call	_escreve_cmd_lcd
  2661  004884  0012               	return		;funcret
  2662  004886                     __end_of_init_lcd:
  2663                           	opt stack 0
  2664                           tblptru	equ	0xFF8
  2665                           tblptrh	equ	0xFF7
  2666                           tblptrl	equ	0xFF6
  2667                           tablat	equ	0xFF5
  2668                           postinc0	equ	0xFEE
  2669                           wreg	equ	0xFE8
  2670                           postdec1	equ	0xFE5
  2671                           fsr1h	equ	0xFE2
  2672                           fsr1l	equ	0xFE1
  2673                           postinc2	equ	0xFDE
  2674                           status	equ	0xFD8
  2675                           
  2676 ;; *************** function _init_hardware *****************
  2677 ;; Defined at:
  2678 ;;		line 55 in file "bibliotecas/hardware.c"
  2679 ;; Parameters:    Size  Location     Type
  2680 ;;		None
  2681 ;; Auto vars:     Size  Location     Type
  2682 ;;		None
  2683 ;; Return value:  Size  Location     Type
  2684 ;;                  1    wreg      void 
  2685 ;; Registers used:
  2686 ;;		wreg, status,2, cstack
  2687 ;; Tracked objects:
  2688 ;;		On entry : 0/0
  2689 ;;		On exit  : 0/0
  2690 ;;		Unchanged: 0/0
  2691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2692 ;;      Params:         0       0       0       0       0       0       0       0       0
  2693 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2694 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2695 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2696 ;;Total ram usage:        0 bytes
  2697 ;; Hardware stack levels used:    1
  2698 ;; Hardware stack levels required when called:    5
  2699 ;; This function calls:
  2700 ;;		_config_timer_dois
  2701 ;;		_config_timer_zero
  2702 ;;		_init_interrupt
  2703 ;;		_init_oscilador
  2704 ;;		_init_ports
  2705 ;; This function is called by:
  2706 ;;		_main
  2707 ;; This function uses a non-reentrant model
  2708 ;;
  2709                           
  2710                           	psect	text3
  2711  005684                     __ptext3:
  2712                           	opt stack 0
  2713  005684                     _init_hardware:
  2714                           	opt stack 25
  2715                           
  2716                           ;hardware.c: 58: init_oscilador();
  2717                           
  2718                           ;incstack = 0
  2719  005684  ECB9  F02B         	call	_init_oscilador	;wreg free
  2720                           
  2721                           ;hardware.c: 61: init_ports();
  2722  005688  EC1A  F02B         	call	_init_ports	;wreg free
  2723                           
  2724                           ;hardware.c: 64: config_timer_zero();
  2725  00568C  EC28  F02B         	call	_config_timer_zero	;wreg free
  2726                           
  2727                           ;hardware.c: 67: config_timer_dois();
  2728  005690  EC86  F02B         	call	_config_timer_dois	;wreg free
  2729                           
  2730                           ;hardware.c: 70: init_interrupt();
  2731  005694  EC62  F02B         	call	_init_interrupt	;wreg free
  2732  005698  0012               	return		;funcret
  2733  00569A                     __end_of_init_hardware:
  2734                           	opt stack 0
  2735                           tblptru	equ	0xFF8
  2736                           tblptrh	equ	0xFF7
  2737                           tblptrl	equ	0xFF6
  2738                           tablat	equ	0xFF5
  2739                           postinc0	equ	0xFEE
  2740                           wreg	equ	0xFE8
  2741                           postdec1	equ	0xFE5
  2742                           fsr1h	equ	0xFE2
  2743                           fsr1l	equ	0xFE1
  2744                           postinc2	equ	0xFDE
  2745                           status	equ	0xFD8
  2746                           
  2747 ;; *************** function _init_ports *****************
  2748 ;; Defined at:
  2749 ;;		line 154 in file "bibliotecas/hardware.c"
  2750 ;; Parameters:    Size  Location     Type
  2751 ;;		None
  2752 ;; Auto vars:     Size  Location     Type
  2753 ;;		None
  2754 ;; Return value:  Size  Location     Type
  2755 ;;                  1    wreg      void 
  2756 ;; Registers used:
  2757 ;;		wreg, status,2
  2758 ;; Tracked objects:
  2759 ;;		On entry : 0/0
  2760 ;;		On exit  : 0/0
  2761 ;;		Unchanged: 0/0
  2762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2763 ;;      Params:         0       0       0       0       0       0       0       0       0
  2764 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2765 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2766 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2767 ;;Total ram usage:        0 bytes
  2768 ;; Hardware stack levels used:    1
  2769 ;; Hardware stack levels required when called:    3
  2770 ;; This function calls:
  2771 ;;		Nothing
  2772 ;; This function is called by:
  2773 ;;		_init_hardware
  2774 ;; This function uses a non-reentrant model
  2775 ;;
  2776                           
  2777                           	psect	text4
  2778  005634                     __ptext4:
  2779                           	opt stack 0
  2780  005634                     _init_ports:
  2781                           	opt stack 26
  2782                           
  2783                           ;hardware.c: 156: ADCON1 = 0X0F;
  2784                           
  2785                           ;incstack = 0
  2786  005634  0E0F               	movlw	15
  2787  005636  6EC1               	movwf	4033,c	;volatile
  2788                           
  2789                           ;hardware.c: 157: TRISB = 0b00100001;
  2790  005638  0E21               	movlw	33
  2791  00563A  6E93               	movwf	3987,c	;volatile
  2792                           
  2793                           ;hardware.c: 158: LATB = 0xFF;
  2794  00563C  688A               	setf	3978,c	;volatile
  2795                           
  2796                           ;hardware.c: 159: TRISD = 0x00;
  2797  00563E  0E00               	movlw	0
  2798  005640  6E95               	movwf	3989,c	;volatile
  2799                           
  2800                           ;hardware.c: 160: TRISA = 0b00000111;
  2801  005642  0E07               	movlw	7
  2802  005644  6E92               	movwf	3986,c	;volatile
  2803                           
  2804                           ;hardware.c: 161: TRISC = 0x01111111;
  2805  005646  0E11               	movlw	17
  2806  005648  6E94               	movwf	3988,c	;volatile
  2807                           
  2808                           ;hardware.c: 162: TRISE = 0b00000011;
  2809  00564A  0E03               	movlw	3
  2810  00564C  6E96               	movwf	3990,c	;volatile
  2811  00564E  0012               	return		;funcret
  2812  005650                     __end_of_init_ports:
  2813                           	opt stack 0
  2814                           tblptru	equ	0xFF8
  2815                           tblptrh	equ	0xFF7
  2816                           tblptrl	equ	0xFF6
  2817                           tablat	equ	0xFF5
  2818                           postinc0	equ	0xFEE
  2819                           wreg	equ	0xFE8
  2820                           postdec1	equ	0xFE5
  2821                           fsr1h	equ	0xFE2
  2822                           fsr1l	equ	0xFE1
  2823                           postinc2	equ	0xFDE
  2824                           status	equ	0xFD8
  2825                           
  2826 ;; *************** function _init_oscilador *****************
  2827 ;; Defined at:
  2828 ;;		line 172 in file "bibliotecas/hardware.c"
  2829 ;; Parameters:    Size  Location     Type
  2830 ;;		None
  2831 ;; Auto vars:     Size  Location     Type
  2832 ;;		None
  2833 ;; Return value:  Size  Location     Type
  2834 ;;                  1    wreg      void 
  2835 ;; Registers used:
  2836 ;;		None
  2837 ;; Tracked objects:
  2838 ;;		On entry : 0/0
  2839 ;;		On exit  : 0/0
  2840 ;;		Unchanged: 0/0
  2841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2842 ;;      Params:         0       0       0       0       0       0       0       0       0
  2843 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2844 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2845 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2846 ;;Total ram usage:        0 bytes
  2847 ;; Hardware stack levels used:    1
  2848 ;; Hardware stack levels required when called:    3
  2849 ;; This function calls:
  2850 ;;		Nothing
  2851 ;; This function is called by:
  2852 ;;		_init_hardware
  2853 ;; This function uses a non-reentrant model
  2854 ;;
  2855                           
  2856                           	psect	text5
  2857  005772                     __ptext5:
  2858                           	opt stack 0
  2859  005772                     _init_oscilador:
  2860                           	opt stack 26
  2861                           
  2862                           ;hardware.c: 175: OSCCONbits.IRCF0 = 1;
  2863                           
  2864                           ;incstack = 0
  2865  005772  88D3               	bsf	4051,4,c	;volatile
  2866                           
  2867                           ;hardware.c: 176: OSCCONbits.IRCF1 = 1;
  2868  005774  8AD3               	bsf	4051,5,c	;volatile
  2869                           
  2870                           ;hardware.c: 177: OSCCONbits.IRCF2 = 1;
  2871  005776  8CD3               	bsf	4051,6,c	;volatile
  2872  005778  0012               	return		;funcret
  2873  00577A                     __end_of_init_oscilador:
  2874                           	opt stack 0
  2875                           tblptru	equ	0xFF8
  2876                           tblptrh	equ	0xFF7
  2877                           tblptrl	equ	0xFF6
  2878                           tablat	equ	0xFF5
  2879                           postinc0	equ	0xFEE
  2880                           wreg	equ	0xFE8
  2881                           postdec1	equ	0xFE5
  2882                           fsr1h	equ	0xFE2
  2883                           fsr1l	equ	0xFE1
  2884                           postinc2	equ	0xFDE
  2885                           status	equ	0xFD8
  2886                           
  2887 ;; *************** function _init_interrupt *****************
  2888 ;; Defined at:
  2889 ;;		line 98 in file "bibliotecas/hardware.c"
  2890 ;; Parameters:    Size  Location     Type
  2891 ;;		None
  2892 ;; Auto vars:     Size  Location     Type
  2893 ;;		None
  2894 ;; Return value:  Size  Location     Type
  2895 ;;                  1    wreg      void 
  2896 ;; Registers used:
  2897 ;;		wreg, status,2
  2898 ;; Tracked objects:
  2899 ;;		On entry : 0/0
  2900 ;;		On exit  : 0/0
  2901 ;;		Unchanged: 0/0
  2902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2903 ;;      Params:         0       0       0       0       0       0       0       0       0
  2904 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2905 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2906 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2907 ;;Total ram usage:        0 bytes
  2908 ;; Hardware stack levels used:    1
  2909 ;; Hardware stack levels required when called:    3
  2910 ;; This function calls:
  2911 ;;		Nothing
  2912 ;; This function is called by:
  2913 ;;		_init_hardware
  2914 ;; This function uses a non-reentrant model
  2915 ;;
  2916                           
  2917                           	psect	text6
  2918  0056C4                     __ptext6:
  2919                           	opt stack 0
  2920  0056C4                     _init_interrupt:
  2921                           	opt stack 26
  2922                           
  2923                           ;hardware.c: 100: INTCON = 0b10110000;
  2924                           
  2925                           ;incstack = 0
  2926  0056C4  0EB0               	movlw	176
  2927  0056C6  6EF2               	movwf	intcon,c	;volatile
  2928                           
  2929                           ;hardware.c: 101: INTCON2 = 0b00000000;
  2930  0056C8  0E00               	movlw	0
  2931  0056CA  6EF1               	movwf	intcon2,c	;volatile
  2932                           
  2933                           ;hardware.c: 102: INTCON3 = 0b00000000;
  2934  0056CC  0E00               	movlw	0
  2935  0056CE  6EF0               	movwf	intcon3,c	;volatile
  2936                           
  2937                           ;hardware.c: 104: PIE1 = 0b00101000;
  2938  0056D0  0E28               	movlw	40
  2939  0056D2  6E9D               	movwf	3997,c	;volatile
  2940  0056D4  0012               	return		;funcret
  2941  0056D6                     __end_of_init_interrupt:
  2942                           	opt stack 0
  2943                           tblptru	equ	0xFF8
  2944                           tblptrh	equ	0xFF7
  2945                           tblptrl	equ	0xFF6
  2946                           tablat	equ	0xFF5
  2947                           intcon	equ	0xFF2
  2948                           intcon2	equ	0xFF1
  2949                           intcon3	equ	0xFF0
  2950                           postinc0	equ	0xFEE
  2951                           wreg	equ	0xFE8
  2952                           postdec1	equ	0xFE5
  2953                           fsr1h	equ	0xFE2
  2954                           fsr1l	equ	0xFE1
  2955                           postinc2	equ	0xFDE
  2956                           status	equ	0xFD8
  2957                           
  2958 ;; *************** function _config_timer_zero *****************
  2959 ;; Defined at:
  2960 ;;		line 83 in file "bibliotecas/hardware.c"
  2961 ;; Parameters:    Size  Location     Type
  2962 ;;		None
  2963 ;; Auto vars:     Size  Location     Type
  2964 ;;		None
  2965 ;; Return value:  Size  Location     Type
  2966 ;;                  1    wreg      void 
  2967 ;; Registers used:
  2968 ;;		wreg, status,2, cstack
  2969 ;; Tracked objects:
  2970 ;;		On entry : 0/0
  2971 ;;		On exit  : 0/0
  2972 ;;		Unchanged: 0/0
  2973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2974 ;;      Params:         0       0       0       0       0       0       0       0       0
  2975 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2976 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2977 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2978 ;;Total ram usage:        0 bytes
  2979 ;; Hardware stack levels used:    1
  2980 ;; Hardware stack levels required when called:    4
  2981 ;; This function calls:
  2982 ;;		_write_timer_zero
  2983 ;; This function is called by:
  2984 ;;		_init_hardware
  2985 ;; This function uses a non-reentrant model
  2986 ;;
  2987                           
  2988                           	psect	text7
  2989  005650                     __ptext7:
  2990                           	opt stack 0
  2991  005650                     _config_timer_zero:
  2992                           	opt stack 25
  2993                           
  2994                           ;hardware.c: 85: T0CON = 0b11000011;
  2995                           
  2996                           ;incstack = 0
  2997  005650  0EC3               	movlw	195
  2998  005652  6ED5               	movwf	4053,c	;volatile
  2999                           
  3000                           ;hardware.c: 86: SPPCON = 0b00000000;
  3001  005654  0E00               	movlw	0
  3002  005656  6E65               	movwf	3941,c	;volatile
  3003                           
  3004                           ;hardware.c: 87: SPPCFG = 0b00000000;
  3005  005658  0E00               	movlw	0
  3006  00565A  6E63               	movwf	3939,c	;volatile
  3007                           
  3008                           ;hardware.c: 88: write_timer_zero(0x0083);
  3009  00565C  0E00               	movlw	0
  3010  00565E  0100               	movlb	0	; () banked
  3011  005660  6F61               	movwf	(write_timer_zero@timer0+1)& (0+255),b
  3012  005662  0E83               	movlw	131
  3013  005664  6F60               	movwf	write_timer_zero@timer0& (0+255),b
  3014  005666  EC6B  F02B         	call	_write_timer_zero	;wreg free
  3015  00566A  0012               	return		;funcret
  3016  00566C                     __end_of_config_timer_zero:
  3017                           	opt stack 0
  3018                           tblptru	equ	0xFF8
  3019                           tblptrh	equ	0xFF7
  3020                           tblptrl	equ	0xFF6
  3021                           tablat	equ	0xFF5
  3022                           intcon	equ	0xFF2
  3023                           intcon2	equ	0xFF1
  3024                           intcon3	equ	0xFF0
  3025                           postinc0	equ	0xFEE
  3026                           wreg	equ	0xFE8
  3027                           postdec1	equ	0xFE5
  3028                           fsr1h	equ	0xFE2
  3029                           fsr1l	equ	0xFE1
  3030                           postinc2	equ	0xFDE
  3031                           status	equ	0xFD8
  3032                           
  3033 ;; *************** function _write_timer_zero *****************
  3034 ;; Defined at:
  3035 ;;		line 138 in file "bibliotecas/hardware.c"
  3036 ;; Parameters:    Size  Location     Type
  3037 ;;  timer0          2    0[BANK0 ] unsigned int 
  3038 ;; Auto vars:     Size  Location     Type
  3039 ;;  timer           2    2[BANK0 ] struct Timers
  3040 ;; Return value:  Size  Location     Type
  3041 ;;                  1    wreg      void 
  3042 ;; Registers used:
  3043 ;;		None
  3044 ;; Tracked objects:
  3045 ;;		On entry : 0/0
  3046 ;;		On exit  : 0/0
  3047 ;;		Unchanged: 0/0
  3048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3049 ;;      Params:         0       2       0       0       0       0       0       0       0
  3050 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3051 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3052 ;;      Totals:         0       4       0       0       0       0       0       0       0
  3053 ;;Total ram usage:        4 bytes
  3054 ;; Hardware stack levels used:    1
  3055 ;; Hardware stack levels required when called:    3
  3056 ;; This function calls:
  3057 ;;		Nothing
  3058 ;; This function is called by:
  3059 ;;		_config_timer_zero
  3060 ;; This function uses a non-reentrant model
  3061 ;;
  3062                           
  3063                           	psect	text8
  3064  0056D6                     __ptext8:
  3065                           	opt stack 0
  3066  0056D6                     _write_timer_zero:
  3067                           	opt stack 25
  3068                           
  3069                           ;hardware.c: 140: union Timers timer;
  3070                           ;hardware.c: 142: timer.lt = timer0;
  3071                           
  3072                           ;incstack = 0
  3073  0056D6  C060  F062         	movff	write_timer_zero@timer0,write_timer_zero@timer
  3074  0056DA  C061  F063         	movff	write_timer_zero@timer0+1,write_timer_zero@timer+1
  3075                           
  3076                           ;hardware.c: 144: TMR0H = timer.bt[1];
  3077  0056DE  C063  FFD7         	movff	write_timer_zero@timer+1,4055	;volatile
  3078                           
  3079                           ;hardware.c: 145: TMR0L = timer.bt[0];
  3080  0056E2  C062  FFD6         	movff	write_timer_zero@timer,4054	;volatile
  3081  0056E6  0012               	return		;funcret
  3082  0056E8                     __end_of_write_timer_zero:
  3083                           	opt stack 0
  3084                           tblptru	equ	0xFF8
  3085                           tblptrh	equ	0xFF7
  3086                           tblptrl	equ	0xFF6
  3087                           tablat	equ	0xFF5
  3088                           intcon	equ	0xFF2
  3089                           intcon2	equ	0xFF1
  3090                           intcon3	equ	0xFF0
  3091                           postinc0	equ	0xFEE
  3092                           wreg	equ	0xFE8
  3093                           postdec1	equ	0xFE5
  3094                           fsr1h	equ	0xFE2
  3095                           fsr1l	equ	0xFE1
  3096                           postinc2	equ	0xFDE
  3097                           status	equ	0xFD8
  3098                           
  3099 ;; *************** function _config_timer_dois *****************
  3100 ;; Defined at:
  3101 ;;		line 201 in file "bibliotecas/hardware.c"
  3102 ;; Parameters:    Size  Location     Type
  3103 ;;		None
  3104 ;; Auto vars:     Size  Location     Type
  3105 ;;		None
  3106 ;; Return value:  Size  Location     Type
  3107 ;;                  1    wreg      void 
  3108 ;; Registers used:
  3109 ;;		wreg, status,2
  3110 ;; Tracked objects:
  3111 ;;		On entry : 0/0
  3112 ;;		On exit  : 0/0
  3113 ;;		Unchanged: 0/0
  3114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3115 ;;      Params:         0       0       0       0       0       0       0       0       0
  3116 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3117 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3118 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3119 ;;Total ram usage:        0 bytes
  3120 ;; Hardware stack levels used:    1
  3121 ;; Hardware stack levels required when called:    3
  3122 ;; This function calls:
  3123 ;;		Nothing
  3124 ;; This function is called by:
  3125 ;;		_init_hardware
  3126 ;; This function uses a non-reentrant model
  3127 ;;
  3128                           
  3129                           	psect	text9
  3130  00570C                     __ptext9:
  3131                           	opt stack 0
  3132  00570C                     _config_timer_dois:
  3133                           	opt stack 26
  3134                           
  3135                           ;hardware.c: 203: T2CON = 0b00000100;
  3136                           
  3137                           ;incstack = 0
  3138  00570C  0E04               	movlw	4
  3139  00570E  6ECA               	movwf	4042,c	;volatile
  3140                           
  3141                           ;hardware.c: 204: TMR2 = 0;
  3142  005710  0E00               	movlw	0
  3143  005712  6ECC               	movwf	4044,c	;volatile
  3144                           
  3145                           ;hardware.c: 205: PR2 = 0x01;
  3146  005714  0E01               	movlw	1
  3147  005716  6ECB               	movwf	4043,c	;volatile
  3148  005718  0012               	return		;funcret
  3149  00571A                     __end_of_config_timer_dois:
  3150                           	opt stack 0
  3151                           tblptru	equ	0xFF8
  3152                           tblptrh	equ	0xFF7
  3153                           tblptrl	equ	0xFF6
  3154                           tablat	equ	0xFF5
  3155                           intcon	equ	0xFF2
  3156                           intcon2	equ	0xFF1
  3157                           intcon3	equ	0xFF0
  3158                           postinc0	equ	0xFEE
  3159                           wreg	equ	0xFE8
  3160                           postdec1	equ	0xFE5
  3161                           fsr1h	equ	0xFE2
  3162                           fsr1l	equ	0xFE1
  3163                           postinc2	equ	0xFDE
  3164                           status	equ	0xFD8
  3165                           
  3166 ;; *************** function _inicializa_tarefas *****************
  3167 ;; Defined at:
  3168 ;;		line 161 in file "main.c"
  3169 ;; Parameters:    Size  Location     Type
  3170 ;;		None
  3171 ;; Auto vars:     Size  Location     Type
  3172 ;;		None
  3173 ;; Return value:  Size  Location     Type
  3174 ;;                  1    wreg      void 
  3175 ;; Registers used:
  3176 ;;		wreg, status,2, status,0
  3177 ;; Tracked objects:
  3178 ;;		On entry : 0/0
  3179 ;;		On exit  : 0/0
  3180 ;;		Unchanged: 0/0
  3181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3182 ;;      Params:         0       0       0       0       0       0       0       0       0
  3183 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3184 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3185 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3186 ;;Total ram usage:        0 bytes
  3187 ;; Hardware stack levels used:    1
  3188 ;; Hardware stack levels required when called:    3
  3189 ;; This function calls:
  3190 ;;		Nothing
  3191 ;; This function is called by:
  3192 ;;		_main
  3193 ;; This function uses a non-reentrant model
  3194 ;;
  3195                           
  3196                           	psect	text10
  3197  004D2E                     __ptext10:
  3198                           	opt stack 0
  3199  004D2E                     _inicializa_tarefas:
  3200                           	opt stack 27
  3201                           
  3202                           ;main.c: 164: p_tarefas[0] = verifica_dados_operacionais;
  3203                           
  3204                           ;incstack = 0
  3205  004D2E  0E7A               	movlw	low _verifica_dados_operacionais
  3206  004D30  0100               	movlb	0	; () banked
  3207  004D32  6FED               	movwf	_p_tarefas& (0+255),b
  3208  004D34  0E57               	movlw	high _verifica_dados_operacionais
  3209  004D36  6FEE               	movwf	(_p_tarefas+1)& (0+255),b
  3210                           
  3211                           ;main.c: 165: p_tarefas[1] = disparo_gravacao;
  3212  004D38  0E9A               	movlw	low _disparo_gravacao
  3213  004D3A  6FEF               	movwf	(_p_tarefas+2)& (0+255),b
  3214  004D3C  0E56               	movlw	high _disparo_gravacao
  3215  004D3E  6FF0               	movwf	(_p_tarefas+3)& (0+255),b
  3216                           
  3217                           ;main.c: 166: p_tarefas[2] = verifica_fence_externo;
  3218  004D40  0E12               	movlw	low _verifica_fence_externo
  3219  004D42  6FF1               	movwf	(_p_tarefas+4)& (0+255),b
  3220  004D44  0E00               	movlw	high _verifica_fence_externo
  3221  004D46  6FF2               	movwf	(_p_tarefas+5)& (0+255),b
  3222                           
  3223                           ;main.c: 167: p_tarefas[3] = troca_de_tela;
  3224  004D48  0EBC               	movlw	low _troca_de_tela
  3225  004D4A  6FF3               	movwf	(_p_tarefas+6)& (0+255),b
  3226  004D4C  0E2F               	movlw	high _troca_de_tela
  3227  004D4E  6FF4               	movwf	(_p_tarefas+7)& (0+255),b
  3228                           
  3229                           ; BSR set to: 0
  3230                           ;main.c: 171: tempo_backup[0] = 5000;
  3231  004D50  0E13               	movlw	19
  3232  004D52  0101               	movlb	1	; () banked
  3233  004D54  6F01               	movwf	(_tempo_backup+1)& (0+255),b
  3234  004D56  0E88               	movlw	136
  3235  004D58  6F00               	movwf	_tempo_backup& (0+255),b
  3236                           
  3237                           ; BSR set to: 1
  3238                           ;main.c: 172: tempo_backup[1] = 1000;
  3239  004D5A  0E03               	movlw	3
  3240  004D5C  6F03               	movwf	(_tempo_backup+3)& (0+255),b
  3241  004D5E  0EE8               	movlw	232
  3242  004D60  6F02               	movwf	(_tempo_backup+2)& (0+255),b
  3243                           
  3244                           ; BSR set to: 1
  3245                           ;main.c: 173: tempo_backup[2] = 1000;
  3246  004D62  0E03               	movlw	3
  3247  004D64  6F05               	movwf	(_tempo_backup+5)& (0+255),b
  3248  004D66  0EE8               	movlw	232
  3249  004D68  6F04               	movwf	(_tempo_backup+4)& (0+255),b
  3250                           
  3251                           ; BSR set to: 1
  3252                           ;main.c: 174: tempo_backup[3] = 100;
  3253  004D6A  0E00               	movlw	0
  3254  004D6C  6F07               	movwf	(_tempo_backup+7)& (0+255),b
  3255  004D6E  0E64               	movlw	100
  3256  004D70  6F06               	movwf	(_tempo_backup+6)& (0+255),b
  3257                           
  3258                           ; BSR set to: 1
  3259                           ;main.c: 177: tempo_tarefa[0] = 5000;
  3260  004D72  0E13               	movlw	19
  3261  004D74  6E22               	movwf	_tempo_tarefa+1,c
  3262  004D76  0E88               	movlw	136
  3263  004D78  6E21               	movwf	_tempo_tarefa,c
  3264                           
  3265                           ; BSR set to: 1
  3266                           ;main.c: 178: tempo_tarefa[1] = 1000;
  3267  004D7A  0E03               	movlw	3
  3268  004D7C  6E24               	movwf	_tempo_tarefa+3,c
  3269  004D7E  0EE8               	movlw	232
  3270  004D80  6E23               	movwf	_tempo_tarefa+2,c
  3271                           
  3272                           ; BSR set to: 1
  3273                           ;main.c: 179: tempo_tarefa[2] = 1000;
  3274  004D82  0E03               	movlw	3
  3275  004D84  6E26               	movwf	_tempo_tarefa+5,c
  3276  004D86  0EE8               	movlw	232
  3277  004D88  6E25               	movwf	_tempo_tarefa+4,c
  3278                           
  3279                           ; BSR set to: 1
  3280                           ;main.c: 180: tempo_tarefa[3] = 5000;
  3281  004D8A  0E13               	movlw	19
  3282  004D8C  6E28               	movwf	_tempo_tarefa+7,c
  3283  004D8E  0E88               	movlw	136
  3284  004D90  6E27               	movwf	_tempo_tarefa+6,c
  3285                           
  3286                           ; BSR set to: 1
  3287                           ;main.c: 182: tarefa_em_execucao = 0;
  3288  004D92  0E00               	movlw	0
  3289  004D94  6E3D               	movwf	_tarefa_em_execucao,c	;volatile
  3290                           
  3291                           ; BSR set to: 1
  3292  004D96  0012               	return		;funcret
  3293  004D98                     __end_of_inicializa_tarefas:
  3294                           	opt stack 0
  3295                           tblptru	equ	0xFF8
  3296                           tblptrh	equ	0xFF7
  3297                           tblptrl	equ	0xFF6
  3298                           tablat	equ	0xFF5
  3299                           intcon	equ	0xFF2
  3300                           intcon2	equ	0xFF1
  3301                           intcon3	equ	0xFF0
  3302                           postinc0	equ	0xFEE
  3303                           wreg	equ	0xFE8
  3304                           postdec1	equ	0xFE5
  3305                           fsr1h	equ	0xFE2
  3306                           fsr1l	equ	0xFE1
  3307                           postinc2	equ	0xFDE
  3308                           status	equ	0xFD8
  3309                           
  3310 ;; *************** function _escalonador *****************
  3311 ;; Defined at:
  3312 ;;		line 193 in file "main.c"
  3313 ;; Parameters:    Size  Location     Type
  3314 ;;		None
  3315 ;; Auto vars:     Size  Location     Type
  3316 ;;  cont            1   37[BANK1 ] unsigned char 
  3317 ;; Return value:  Size  Location     Type
  3318 ;;                  1    wreg      void 
  3319 ;; Registers used:
  3320 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3321 ;; Tracked objects:
  3322 ;;		On entry : 0/0
  3323 ;;		On exit  : 0/0
  3324 ;;		Unchanged: 0/0
  3325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3326 ;;      Params:         0       0       0       0       0       0       0       0       0
  3327 ;;      Locals:         0       0       1       0       0       0       0       0       0
  3328 ;;      Temps:          0       0       2       0       0       0       0       0       0
  3329 ;;      Totals:         0       0       3       0       0       0       0       0       0
  3330 ;;Total ram usage:        3 bytes
  3331 ;; Hardware stack levels used:    1
  3332 ;; Hardware stack levels required when called:   17
  3333 ;; This function calls:
  3334 ;;		_disparo_gravacao
  3335 ;;		_troca_de_tela
  3336 ;;		_verifica_dados_operacionais
  3337 ;;		_verifica_fence_externo
  3338 ;; This function is called by:
  3339 ;;		_main
  3340 ;; This function uses a non-reentrant model
  3341 ;;
  3342                           
  3343                           	psect	text11
  3344  0045FC                     __ptext11:
  3345                           	opt stack 0
  3346  0045FC                     _escalonador:
  3347                           	opt stack 13
  3348                           
  3349                           ;main.c: 195: unsigned char cont;
  3350                           ;main.c: 196: for(cont = 0; cont<4;cont++)
  3351                           
  3352                           ; BSR set to: 1
  3353                           ;incstack = 0
  3354  0045FC  0E00               	movlw	0
  3355  0045FE  0101               	movlb	1	; () banked
  3356  004600  6FF9               	movwf	escalonador@cont& (0+255),b
  3357  004602                     l12242:
  3358                           
  3359                           ; BSR set to: 1
  3360  004602  0E03               	movlw	3
  3361  004604  65F9               	cpfsgt	escalonador@cont& (0+255),b
  3362  004606  D001               	goto	l106
  3363  004608  0012               	return	
  3364  00460A                     l106:
  3365                           
  3366                           ; BSR set to: 1
  3367                           ;main.c: 197: {
  3368                           ;main.c: 198: if((p_tarefas[cont]!= 0 ) && tempo_tarefa[cont] == 0)
  3369                           
  3370                           ; BSR set to: 1
  3371  00460A  51F9               	movf	escalonador@cont& (0+255),w,b
  3372  00460C  0D02               	mullw	2
  3373  00460E  0EED               	movlw	low _p_tarefas
  3374  004610  24F3               	addwf	prodl,w,c
  3375  004612  6ED9               	movwf	fsr2l,c
  3376  004614  0E00               	movlw	high _p_tarefas
  3377  004616  20F4               	addwfc	prodh,w,c
  3378  004618  6EDA               	movwf	fsr2h,c
  3379  00461A  50DE               	movf	postinc2,w,c
  3380  00461C  10DE               	iorwf	postinc2,w,c
  3381  00461E  B4D8               	btfsc	status,2,c
  3382  004620  D03D               	goto	l108
  3383                           
  3384                           ; BSR set to: 1
  3385  004622  51F9               	movf	escalonador@cont& (0+255),w,b
  3386  004624  0D02               	mullw	2
  3387  004626  0E21               	movlw	low _tempo_tarefa
  3388  004628  24F3               	addwf	prodl,w,c
  3389  00462A  6ED9               	movwf	fsr2l,c
  3390  00462C  0E00               	movlw	high _tempo_tarefa
  3391  00462E  20F4               	addwfc	prodh,w,c
  3392  004630  6EDA               	movwf	fsr2h,c
  3393  004632  50DE               	movf	postinc2,w,c
  3394  004634  10DE               	iorwf	postinc2,w,c
  3395  004636  A4D8               	btfss	status,2,c
  3396  004638  D031               	goto	l108
  3397                           
  3398                           ; BSR set to: 1
  3399                           ;main.c: 199: {
  3400                           ;main.c: 200: tarefa_em_execucao = 1;
  3401  00463A  0E01               	movlw	1
  3402  00463C  6E3D               	movwf	_tarefa_em_execucao,c	;volatile
  3403                           
  3404                           ;main.c: 201: timeout_tarefa = 60000;
  3405  00463E  0EEA               	movlw	234
  3406  004640  6E32               	movwf	_timeout_tarefa+1,c
  3407  004642  0E60               	movlw	96
  3408  004644  6E31               	movwf	_timeout_tarefa,c
  3409                           
  3410                           ; BSR set to: 1
  3411                           ;main.c: 202: p_tarefas[cont]();
  3412  004646  51F9               	movf	escalonador@cont& (0+255),w,b
  3413  004648  0D02               	mullw	2
  3414  00464A  0EED               	movlw	low _p_tarefas
  3415  00464C  24F3               	addwf	prodl,w,c
  3416  00464E  6ED9               	movwf	fsr2l,c
  3417  004650  0E00               	movlw	high _p_tarefas
  3418  004652  20F4               	addwfc	prodh,w,c
  3419  004654  6EDA               	movwf	fsr2h,c
  3420  004656  D801               	call	u16678
  3421  004658  D00A               	goto	u16679
  3422  00465A                     u16678:
  3423  00465A  0005               	push	
  3424  00465C  6EFA               	movwf	pclath,c
  3425  00465E  50DE               	movf	postinc2,w,c
  3426  004660  6EFD               	movwf	tosl,c
  3427  004662  50DE               	movf	postinc2,w,c
  3428  004664  6EFE               	movwf	tosh,c
  3429  004666  50F8               	movf	tblptru,w,c
  3430  004668  6EFF               	movwf	tosu,c
  3431  00466A  50FA               	movf	pclath,w,c
  3432  00466C  0012               	return		;indir
  3433  00466E                     u16679:
  3434                           
  3435                           ;main.c: 203: tarefa_em_execucao = 0;
  3436  00466E  0E00               	movlw	0
  3437  004670  6E3D               	movwf	_tarefa_em_execucao,c	;volatile
  3438                           
  3439                           ;main.c: 204: tempo_tarefa[cont] = tempo_backup[cont];
  3440  004672  0101               	movlb	1	; () banked
  3441  004674  51F9               	movf	escalonador@cont& (0+255),w,b
  3442  004676  0D02               	mullw	2
  3443  004678  0E00               	movlw	low _tempo_backup
  3444  00467A  24F3               	addwf	prodl,w,c
  3445  00467C  6ED9               	movwf	fsr2l,c
  3446  00467E  0E01               	movlw	high _tempo_backup
  3447  004680  20F4               	addwfc	prodh,w,c
  3448  004682  6EDA               	movwf	fsr2h,c
  3449  004684  51F9               	movf	escalonador@cont& (0+255),w,b
  3450  004686  0D02               	mullw	2
  3451  004688  0E21               	movlw	low _tempo_tarefa
  3452  00468A  24F3               	addwf	prodl,w,c
  3453  00468C  6EE1               	movwf	fsr1l,c
  3454  00468E  0E00               	movlw	high _tempo_tarefa
  3455  004690  20F4               	addwfc	prodh,w,c
  3456  004692  6EE2               	movwf	fsr1h,c
  3457  004694  CFDE FFE6          	movff	postinc2,postinc1
  3458  004698  CFDD FFE5          	movff	postdec2,postdec1
  3459  00469C                     l108:
  3460                           
  3461                           ; BSR set to: 1
  3462                           
  3463                           ; BSR set to: 1
  3464  00469C  2BF9               	incf	escalonador@cont& (0+255),f,b
  3465  00469E  D7B1               	goto	l12242
  3466  0046A0                     __end_of_escalonador:
  3467                           	opt stack 0
  3468                           tosu	equ	0xFFF
  3469                           tosh	equ	0xFFE
  3470                           tosl	equ	0xFFD
  3471                           pclath	equ	0xFFA
  3472                           tblptru	equ	0xFF8
  3473                           tblptrh	equ	0xFF7
  3474                           tblptrl	equ	0xFF6
  3475                           tablat	equ	0xFF5
  3476                           prodh	equ	0xFF4
  3477                           prodl	equ	0xFF3
  3478                           intcon	equ	0xFF2
  3479                           intcon2	equ	0xFF1
  3480                           intcon3	equ	0xFF0
  3481                           postinc0	equ	0xFEE
  3482                           wreg	equ	0xFE8
  3483                           postinc1	equ	0xFE6
  3484                           postdec1	equ	0xFE5
  3485                           fsr1h	equ	0xFE2
  3486                           fsr1l	equ	0xFE1
  3487                           postinc2	equ	0xFDE
  3488                           postdec2	equ	0xFDD
  3489                           fsr2h	equ	0xFDA
  3490                           fsr2l	equ	0xFD9
  3491                           status	equ	0xFD8
  3492                           
  3493 ;; *************** function _troca_de_tela *****************
  3494 ;; Defined at:
  3495 ;;		line 671 in file "main.c"
  3496 ;; Parameters:    Size  Location     Type
  3497 ;;		None
  3498 ;; Auto vars:     Size  Location     Type
  3499 ;;		None
  3500 ;; Return value:  Size  Location     Type
  3501 ;;                  1    wreg      void 
  3502 ;; Registers used:
  3503 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3504 ;; Tracked objects:
  3505 ;;		On entry : 0/0
  3506 ;;		On exit  : 0/0
  3507 ;;		Unchanged: 0/0
  3508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3509 ;;      Params:         0       0       0       0       0       0       0       0       0
  3510 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3511 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3512 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3513 ;;Total ram usage:        0 bytes
  3514 ;; Hardware stack levels used:    1
  3515 ;; Hardware stack levels required when called:    6
  3516 ;; This function calls:
  3517 ;;		_escreve_cmd_lcd
  3518 ;;		_escreve_frase_ram_lcd
  3519 ;;		_posicao_cursor_lcd
  3520 ;; This function is called by:
  3521 ;;		_inicializa_tarefas
  3522 ;;		_escalonador
  3523 ;; This function uses a non-reentrant model
  3524 ;;
  3525                           
  3526                           	psect	text12
  3527  002FBC                     __ptext12:
  3528                           	opt stack 0
  3529  002FBC                     _troca_de_tela:
  3530                           	opt stack 23
  3531                           
  3532                           ;main.c: 674: static unsigned char state = 0;
  3533                           ;main.c: 675: static unsigned char last_state = 0;;
  3534                           ;main.c: 676: if(!PORTEbits.RE0 && !flag[2].point || (state == 1 ))
  3535                           
  3536                           ; BSR set to: 1
  3537                           ;incstack = 0
  3538  002FBC  B084               	btfsc	3972,0,c	;volatile
  3539  002FBE  D003               	goto	u16380
  3540  002FC0  0100               	movlb	0	; () banked
  3541  002FC2  A1F7               	btfss	(_flag+2)& (0+255),0,b
  3542  002FC4  D003               	goto	u16390
  3543  002FC6                     u16380:
  3544                           
  3545                           ; BSR set to: 0
  3546  002FC6  043C               	decf	troca_de_tela@state,w,c
  3547  002FC8  A4D8               	btfss	status,2,c
  3548  002FCA  D024               	goto	l233
  3549  002FCC                     u16390:
  3550                           
  3551                           ;main.c: 677: {
  3552                           ;main.c: 679: if(last_state != 1)
  3553  002FCC  043B               	decf	troca_de_tela@last_state,w,c
  3554  002FCE  B4D8               	btfsc	status,2,c
  3555  002FD0  D01F               	goto	l238
  3556                           
  3557                           ;main.c: 680: {
  3558                           ;main.c: 681: state = 1;
  3559  002FD2  0E01               	movlw	1
  3560  002FD4  6E3C               	movwf	troca_de_tela@state,c
  3561                           
  3562                           ;main.c: 682: escreve_cmd_lcd(0b00000001);
  3563  002FD6  0E01               	movlw	1
  3564  002FD8  EC43  F024         	call	_escreve_cmd_lcd
  3565                           
  3566                           ;main.c: 683: posicao_cursor_lcd(1,0);
  3567  002FDC  0E00               	movlw	0
  3568  002FDE  0100               	movlb	0	; () banked
  3569  002FE0  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3570  002FE2  0E01               	movlw	1
  3571  002FE4  ECE4  F025         	call	_posicao_cursor_lcd
  3572                           
  3573                           ;main.c: 684: escreve_frase_ram_lcd("RPM:");
  3574  002FE8  0E6E               	movlw	low STR_2
  3575  002FEA  0100               	movlb	0	; () banked
  3576  002FEC  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3577  002FEE  0E62               	movlw	high STR_2
  3578  002FF0  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  3579  002FF2  EC3F  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3580                           
  3581                           ;main.c: 685: posicao_cursor_lcd(2,0);
  3582  002FF6  0E00               	movlw	0
  3583  002FF8  0100               	movlb	0	; () banked
  3584  002FFA  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3585  002FFC  0E02               	movlw	2
  3586  002FFE  ECE4  F025         	call	_posicao_cursor_lcd
  3587                           
  3588                           ;main.c: 686: escreve_frase_ram_lcd("VEL:");
  3589  003002  0E69               	movlw	low STR_3
  3590  003004  0100               	movlb	0	; () banked
  3591  003006  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3592  003008  0E62               	movlw	high STR_3
  3593  00300A  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  3594  00300C  EC3F  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3595  003010                     l238:
  3596                           
  3597                           ;main.c: 687: }
  3598                           ;main.c: 688: last_state = 1;
  3599  003010  0E01               	movlw	1
  3600  003012  6E3B               	movwf	troca_de_tela@last_state,c
  3601  003014                     l233:
  3602                           
  3603                           ;main.c: 690: }
  3604                           ;main.c: 692: if(!PORTEbits.RE1 && !flag[2].point || (state == 2))
  3605  003014  B284               	btfsc	3972,1,c	;volatile
  3606  003016  D003               	goto	u16420
  3607  003018  0100               	movlb	0	; () banked
  3608  00301A  A1F7               	btfss	(_flag+2)& (0+255),0,b
  3609  00301C  D004               	goto	u16430
  3610  00301E                     u16420:
  3611                           
  3612                           ; BSR set to: 0
  3613  00301E  0E02               	movlw	2
  3614  003020  183C               	xorwf	troca_de_tela@state,w,c
  3615  003022  A4D8               	btfss	status,2,c
  3616  003024  D03F               	goto	l239
  3617  003026                     u16430:
  3618                           
  3619                           ;main.c: 693: {
  3620                           ;main.c: 694: if(last_state != 2)
  3621  003026  0E02               	movlw	2
  3622  003028  183B               	xorwf	troca_de_tela@last_state,w,c
  3623  00302A  B4D8               	btfsc	status,2,c
  3624  00302C  D039               	goto	l244
  3625                           
  3626                           ;main.c: 695: {
  3627                           ;main.c: 696: state = 2;
  3628  00302E  0E02               	movlw	2
  3629  003030  6E3C               	movwf	troca_de_tela@state,c
  3630                           
  3631                           ;main.c: 697: escreve_cmd_lcd(0b00000001);
  3632  003032  0E01               	movlw	1
  3633  003034  EC43  F024         	call	_escreve_cmd_lcd
  3634                           
  3635                           ;main.c: 698: posicao_cursor_lcd(1,0);
  3636  003038  0E00               	movlw	0
  3637  00303A  0100               	movlb	0	; () banked
  3638  00303C  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3639  00303E  0E01               	movlw	1
  3640  003040  ECE4  F025         	call	_posicao_cursor_lcd
  3641                           
  3642                           ;main.c: 699: escreve_frase_ram_lcd("D_Fence:");
  3643  003044  0E46               	movlw	low STR_4
  3644  003046  0100               	movlb	0	; () banked
  3645  003048  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3646  00304A  0E62               	movlw	high STR_4
  3647  00304C  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  3648  00304E  EC3F  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3649                           
  3650                           ;main.c: 700: posicao_cursor_lcd(1,8);
  3651  003052  0E08               	movlw	8
  3652  003054  0100               	movlb	0	; () banked
  3653  003056  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3654  003058  0E01               	movlw	1
  3655  00305A  ECE4  F025         	call	_posicao_cursor_lcd
  3656                           
  3657                           ;main.c: 701: escreve_frase_ram_lcd("N/D");
  3658  00305E  0E77               	movlw	low STR_5
  3659  003060  0100               	movlb	0	; () banked
  3660  003062  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3661  003064  0E62               	movlw	high STR_5
  3662  003066  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  3663  003068  EC3F  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3664                           
  3665                           ;main.c: 702: posicao_cursor_lcd(2,0);
  3666  00306C  0E00               	movlw	0
  3667  00306E  0100               	movlb	0	; () banked
  3668  003070  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3669  003072  0E02               	movlw	2
  3670  003074  ECE4  F025         	call	_posicao_cursor_lcd
  3671                           
  3672                           ;main.c: 703: escreve_frase_ram_lcd("LFIX:");
  3673  003078  0E63               	movlw	low STR_6
  3674  00307A  0100               	movlb	0	; () banked
  3675  00307C  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3676  00307E  0E62               	movlw	high STR_6
  3677  003080  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  3678  003082  EC3F  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3679                           
  3680                           ;main.c: 704: posicao_cursor_lcd(2,8);
  3681  003086  0E08               	movlw	8
  3682  003088  0100               	movlb	0	; () banked
  3683  00308A  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3684  00308C  0E02               	movlw	2
  3685  00308E  ECE4  F025         	call	_posicao_cursor_lcd
  3686                           
  3687                           ;main.c: 705: escreve_frase_ram_lcd("N/D");
  3688  003092  0E77               	movlw	low STR_5
  3689  003094  0100               	movlb	0	; () banked
  3690  003096  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3691  003098  0E62               	movlw	high STR_5
  3692  00309A  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  3693  00309C  EC3F  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3694  0030A0                     l244:
  3695                           
  3696                           ;main.c: 706: }
  3697                           ;main.c: 707: last_state = 2;
  3698  0030A0  0E02               	movlw	2
  3699  0030A2  6E3B               	movwf	troca_de_tela@last_state,c
  3700  0030A4                     l239:
  3701                           
  3702                           ;main.c: 708: }
  3703                           ;main.c: 710: if(flag[2].point || (state == 3))
  3704  0030A4  0100               	movlb	0	; () banked
  3705  0030A6  B1F7               	btfsc	(_flag+2)& (0+255),0,b
  3706  0030A8  D004               	goto	u16460
  3707                           
  3708                           ; BSR set to: 0
  3709  0030AA  0E03               	movlw	3
  3710  0030AC  183C               	xorwf	troca_de_tela@state,w,c
  3711  0030AE  A4D8               	btfss	status,2,c
  3712  0030B0  D018               	goto	l245
  3713  0030B2                     u16460:
  3714                           
  3715                           ; BSR set to: 0
  3716                           ;main.c: 711: {
  3717                           ;main.c: 713: if(last_state != 3)
  3718                           
  3719                           ; BSR set to: 0
  3720  0030B2  0E03               	movlw	3
  3721  0030B4  183B               	xorwf	troca_de_tela@last_state,w,c
  3722  0030B6  B4D8               	btfsc	status,2,c
  3723  0030B8  D012               	goto	l248
  3724                           
  3725                           ; BSR set to: 0
  3726                           ;main.c: 714: {
  3727                           ;main.c: 715: state = 3;
  3728  0030BA  0E03               	movlw	3
  3729  0030BC  6E3C               	movwf	troca_de_tela@state,c
  3730                           
  3731                           ; BSR set to: 0
  3732                           ;main.c: 716: escreve_cmd_lcd(0b00000001);
  3733  0030BE  0E01               	movlw	1
  3734  0030C0  EC43  F024         	call	_escreve_cmd_lcd
  3735                           
  3736                           ;main.c: 717: posicao_cursor_lcd(2,0);
  3737  0030C4  0E00               	movlw	0
  3738  0030C6  0100               	movlb	0	; () banked
  3739  0030C8  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3740  0030CA  0E02               	movlw	2
  3741  0030CC  ECE4  F025         	call	_posicao_cursor_lcd
  3742                           
  3743                           ;main.c: 718: escreve_frase_ram_lcd("D_Fence:");
  3744  0030D0  0E46               	movlw	low STR_4
  3745  0030D2  0100               	movlb	0	; () banked
  3746  0030D4  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3747  0030D6  0E62               	movlw	high STR_4
  3748  0030D8  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  3749  0030DA  EC3F  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3750  0030DE                     l248:
  3751                           
  3752                           ;main.c: 719: }
  3753                           ;main.c: 720: last_state = 3;
  3754  0030DE  0E03               	movlw	3
  3755  0030E0  6E3B               	movwf	troca_de_tela@last_state,c
  3756  0030E2                     l245:
  3757                           
  3758                           ;main.c: 721: }
  3759                           ;main.c: 723: if((!PORTEbits.RE1 && state!=0) && !flag[2].point )
  3760  0030E2  B284               	btfsc	3972,1,c	;volatile
  3761  0030E4  D02B               	goto	l249
  3762  0030E6  503C               	movf	troca_de_tela@state,w,c
  3763  0030E8  B4D8               	btfsc	status,2,c
  3764  0030EA  D028               	goto	l249
  3765  0030EC  0100               	movlb	0	; () banked
  3766  0030EE  B1F7               	btfsc	(_flag+2)& (0+255),0,b
  3767  0030F0  D025               	goto	l249
  3768                           
  3769                           ; BSR set to: 0
  3770                           ;main.c: 724: {
  3771                           ;main.c: 725: if(last_state != 4)
  3772  0030F2  0E04               	movlw	4
  3773  0030F4  183B               	xorwf	troca_de_tela@last_state,w,c
  3774  0030F6  B4D8               	btfsc	status,2,c
  3775  0030F8  D01F               	goto	l250
  3776                           
  3777                           ; BSR set to: 0
  3778                           ;main.c: 726: {
  3779                           ;main.c: 727: escreve_cmd_lcd(0b00000001);
  3780  0030FA  0E01               	movlw	1
  3781  0030FC  EC43  F024         	call	_escreve_cmd_lcd
  3782                           
  3783                           ;main.c: 728: state = 0;
  3784  003100  0E00               	movlw	0
  3785  003102  6E3C               	movwf	troca_de_tela@state,c
  3786                           
  3787                           ;main.c: 729: posicao_cursor_lcd(1,0);
  3788  003104  0E00               	movlw	0
  3789  003106  0100               	movlb	0	; () banked
  3790  003108  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3791  00310A  0E01               	movlw	1
  3792  00310C  ECE4  F025         	call	_posicao_cursor_lcd
  3793                           
  3794                           ;main.c: 730: escreve_frase_ram_lcd("B1:telas B2:HOME");
  3795  003110  0EB0               	movlw	low STR_9
  3796  003112  0100               	movlb	0	; () banked
  3797  003114  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3798  003116  0E61               	movlw	high STR_9
  3799  003118  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  3800  00311A  EC3F  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3801                           
  3802                           ;main.c: 731: posicao_cursor_lcd(2,0);
  3803  00311E  0E00               	movlw	0
  3804  003120  0100               	movlb	0	; () banked
  3805  003122  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3806  003124  0E02               	movlw	2
  3807  003126  ECE4  F025         	call	_posicao_cursor_lcd
  3808                           
  3809                           ;main.c: 732: escreve_frase_ram_lcd("B3:HOME");
  3810  00312A  0E4F               	movlw	low STR_10
  3811  00312C  0100               	movlb	0	; () banked
  3812  00312E  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3813  003130  0E62               	movlw	high STR_10
  3814  003132  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  3815  003134  EC3F  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3816  003138                     l250:
  3817                           
  3818                           ;main.c: 733: }
  3819                           ;main.c: 734: last_state = 4;
  3820  003138  0E04               	movlw	4
  3821  00313A  6E3B               	movwf	troca_de_tela@last_state,c
  3822  00313C                     l249:
  3823                           
  3824                           ;main.c: 735: }
  3825                           ;main.c: 737: if(!state && !flag[2].point)
  3826  00313C  503C               	movf	troca_de_tela@state,w,c
  3827  00313E  A4D8               	btfss	status,2,c
  3828  003140  0012               	return	
  3829  003142  0100               	movlb	0	; () banked
  3830  003144  B1F7               	btfsc	(_flag+2)& (0+255),0,b
  3831  003146  0012               	return	
  3832                           
  3833                           ; BSR set to: 0
  3834                           ;main.c: 738: {
  3835                           ;main.c: 739: if(last_state != 4)
  3836  003148  0E04               	movlw	4
  3837  00314A  183B               	xorwf	troca_de_tela@last_state,w,c
  3838  00314C  B4D8               	btfsc	status,2,c
  3839  00314E  D01D               	goto	l252
  3840                           
  3841                           ; BSR set to: 0
  3842                           ;main.c: 740: {
  3843                           ;main.c: 741: escreve_cmd_lcd(0b00000001);
  3844  003150  0E01               	movlw	1
  3845  003152  EC43  F024         	call	_escreve_cmd_lcd
  3846                           
  3847                           ;main.c: 742: posicao_cursor_lcd(1,0);
  3848  003156  0E00               	movlw	0
  3849  003158  0100               	movlb	0	; () banked
  3850  00315A  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3851  00315C  0E01               	movlw	1
  3852  00315E  ECE4  F025         	call	_posicao_cursor_lcd
  3853                           
  3854                           ;main.c: 743: escreve_frase_ram_lcd("B1:RPM  B2:FENCE");
  3855  003162  0E9F               	movlw	low STR_11
  3856  003164  0100               	movlb	0	; () banked
  3857  003166  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3858  003168  0E61               	movlw	high STR_11
  3859  00316A  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  3860  00316C  EC3F  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3861                           
  3862                           ;main.c: 744: posicao_cursor_lcd(2,0);
  3863  003170  0E00               	movlw	0
  3864  003172  0100               	movlb	0	; () banked
  3865  003174  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3866  003176  0E02               	movlw	2
  3867  003178  ECE4  F025         	call	_posicao_cursor_lcd
  3868                           
  3869                           ;main.c: 745: escreve_frase_ram_lcd("B3:HOME");
  3870  00317C  0E4F               	movlw	low STR_10
  3871  00317E  0100               	movlb	0	; () banked
  3872  003180  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3873  003182  0E62               	movlw	high STR_10
  3874  003184  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  3875  003186  EC3F  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3876  00318A                     l252:
  3877                           
  3878                           ;main.c: 746: }
  3879                           ;main.c: 747: last_state = 4;
  3880  00318A  0E04               	movlw	4
  3881  00318C  6E3B               	movwf	troca_de_tela@last_state,c
  3882  00318E  0012               	return	
  3883  003190                     __end_of_troca_de_tela:
  3884                           	opt stack 0
  3885                           tosu	equ	0xFFF
  3886                           tosh	equ	0xFFE
  3887                           tosl	equ	0xFFD
  3888                           pclath	equ	0xFFA
  3889                           tblptru	equ	0xFF8
  3890                           tblptrh	equ	0xFF7
  3891                           tblptrl	equ	0xFF6
  3892                           tablat	equ	0xFF5
  3893                           prodh	equ	0xFF4
  3894                           prodl	equ	0xFF3
  3895                           intcon	equ	0xFF2
  3896                           intcon2	equ	0xFF1
  3897                           intcon3	equ	0xFF0
  3898                           postinc0	equ	0xFEE
  3899                           wreg	equ	0xFE8
  3900                           postinc1	equ	0xFE6
  3901                           postdec1	equ	0xFE5
  3902                           fsr1h	equ	0xFE2
  3903                           fsr1l	equ	0xFE1
  3904                           postinc2	equ	0xFDE
  3905                           postdec2	equ	0xFDD
  3906                           fsr2h	equ	0xFDA
  3907                           fsr2l	equ	0xFD9
  3908                           status	equ	0xFD8
  3909                           
  3910 ;; *************** function _disparo_gravacao *****************
  3911 ;; Defined at:
  3912 ;;		line 660 in file "main.c"
  3913 ;; Parameters:    Size  Location     Type
  3914 ;;		None
  3915 ;; Auto vars:     Size  Location     Type
  3916 ;;		None
  3917 ;; Return value:  Size  Location     Type
  3918 ;;                  1    wreg      void 
  3919 ;; Registers used:
  3920 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3921 ;; Tracked objects:
  3922 ;;		On entry : 0/0
  3923 ;;		On exit  : 0/0
  3924 ;;		Unchanged: 0/0
  3925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3926 ;;      Params:         0       0       0       0       0       0       0       0       0
  3927 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3928 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3929 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3930 ;;Total ram usage:        0 bytes
  3931 ;; Hardware stack levels used:    1
  3932 ;; Hardware stack levels required when called:   16
  3933 ;; This function calls:
  3934 ;;		_escrita_sdcard
  3935 ;; This function is called by:
  3936 ;;		_inicializa_tarefas
  3937 ;;		_escalonador
  3938 ;; This function uses a non-reentrant model
  3939 ;;
  3940                           
  3941                           	psect	text13
  3942  00569A                     __ptext13:
  3943                           	opt stack 0
  3944  00569A                     _disparo_gravacao:
  3945                           	opt stack 13
  3946                           
  3947                           ;main.c: 662: if(!time_sd)
  3948                           
  3949                           ;incstack = 0
  3950  00569A  502F               	movf	_time_sd,w,c
  3951  00569C  1030               	iorwf	_time_sd+1,w,c
  3952  00569E  A4D8               	btfss	status,2,c
  3953  0056A0  0012               	return	
  3954                           
  3955                           ;main.c: 663: {
  3956                           ;main.c: 664: escrita_sdcard();
  3957  0056A2  EC57  F022         	call	_escrita_sdcard	;wreg free
  3958                           
  3959                           ;main.c: 665: time_sd = 30000;
  3960  0056A6  0E75               	movlw	117
  3961  0056A8  6E30               	movwf	_time_sd+1,c
  3962  0056AA  0E30               	movlw	48
  3963  0056AC  6E2F               	movwf	_time_sd,c
  3964  0056AE  0012               	return	
  3965  0056B0                     __end_of_disparo_gravacao:
  3966                           	opt stack 0
  3967                           tosu	equ	0xFFF
  3968                           tosh	equ	0xFFE
  3969                           tosl	equ	0xFFD
  3970                           pclath	equ	0xFFA
  3971                           tblptru	equ	0xFF8
  3972                           tblptrh	equ	0xFF7
  3973                           tblptrl	equ	0xFF6
  3974                           tablat	equ	0xFF5
  3975                           prodh	equ	0xFF4
  3976                           prodl	equ	0xFF3
  3977                           intcon	equ	0xFF2
  3978                           intcon2	equ	0xFF1
  3979                           intcon3	equ	0xFF0
  3980                           postinc0	equ	0xFEE
  3981                           wreg	equ	0xFE8
  3982                           postinc1	equ	0xFE6
  3983                           postdec1	equ	0xFE5
  3984                           fsr1h	equ	0xFE2
  3985                           fsr1l	equ	0xFE1
  3986                           postinc2	equ	0xFDE
  3987                           postdec2	equ	0xFDD
  3988                           fsr2h	equ	0xFDA
  3989                           fsr2l	equ	0xFD9
  3990                           status	equ	0xFD8
  3991                           
  3992 ;; *************** function _verifica_dados_operacionais *****************
  3993 ;; Defined at:
  3994 ;;		line 645 in file "main.c"
  3995 ;; Parameters:    Size  Location     Type
  3996 ;;		None
  3997 ;; Auto vars:     Size  Location     Type
  3998 ;;		None
  3999 ;; Return value:  Size  Location     Type
  4000 ;;                  1    wreg      void 
  4001 ;; Registers used:
  4002 ;;		None
  4003 ;; Tracked objects:
  4004 ;;		On entry : 0/0
  4005 ;;		On exit  : 0/0
  4006 ;;		Unchanged: 0/0
  4007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4008 ;;      Params:         0       0       0       0       0       0       0       0       0
  4009 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4010 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4011 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4012 ;;Total ram usage:        0 bytes
  4013 ;; Hardware stack levels used:    1
  4014 ;; Hardware stack levels required when called:    3
  4015 ;; This function calls:
  4016 ;;		Nothing
  4017 ;; This function is called by:
  4018 ;;		_inicializa_tarefas
  4019 ;;		_escalonador
  4020 ;; This function uses a non-reentrant model
  4021 ;;
  4022                           
  4023                           	psect	text14
  4024  00577A                     __ptext14:
  4025                           	opt stack 0
  4026  00577A                     _verifica_dados_operacionais:
  4027                           	opt stack 26
  4028                           
  4029                           ;incstack = 0
  4030  00577A  0012               	return		;funcret
  4031  00577C                     __end_of_verifica_dados_operacionais:
  4032                           	opt stack 0
  4033                           tosu	equ	0xFFF
  4034                           tosh	equ	0xFFE
  4035                           tosl	equ	0xFFD
  4036                           pclath	equ	0xFFA
  4037                           tblptru	equ	0xFF8
  4038                           tblptrh	equ	0xFF7
  4039                           tblptrl	equ	0xFF6
  4040                           tablat	equ	0xFF5
  4041                           prodh	equ	0xFF4
  4042                           prodl	equ	0xFF3
  4043                           intcon	equ	0xFF2
  4044                           intcon2	equ	0xFF1
  4045                           intcon3	equ	0xFF0
  4046                           postinc0	equ	0xFEE
  4047                           wreg	equ	0xFE8
  4048                           postinc1	equ	0xFE6
  4049                           postdec1	equ	0xFE5
  4050                           fsr1h	equ	0xFE2
  4051                           fsr1l	equ	0xFE1
  4052                           postinc2	equ	0xFDE
  4053                           postdec2	equ	0xFDD
  4054                           fsr2h	equ	0xFDA
  4055                           fsr2l	equ	0xFD9
  4056                           status	equ	0xFD8
  4057                           
  4058 ;; *************** function _verifica_fence_externo *****************
  4059 ;; Defined at:
  4060 ;;		line 264 in file "main.c"
  4061 ;; Parameters:    Size  Location     Type
  4062 ;;		None
  4063 ;; Auto vars:     Size  Location     Type
  4064 ;;  fence_diff_l   44   44[BANK3 ] unsigned char [11][4]
  4065 ;;  fence_diff_l   44    0[BANK3 ] unsigned char [11][4]
  4066 ;;  temp_buff_lo   11   99[BANK3 ] unsigned char [11]
  4067 ;;  temp_buff_la   11   88[BANK3 ] unsigned char [11]
  4068 ;;  point_buff      3    0        PTR unsigned char 
  4069 ;;  temp_var_deg    2  116[BANK3 ] unsigned int 
  4070 ;;  point_buff_g    2  114[BANK3 ] PTR unsigned char 
  4071 ;;		 -> rawLongitude(13), 
  4072 ;;  point_buff_g    2  112[BANK3 ] PTR unsigned char 
  4073 ;;		 -> rawLatitude(13), 
  4074 ;;  point           1  120[BANK3 ] unsigned char 
  4075 ;;  i               1  119[BANK3 ] unsigned char 
  4076 ;;  j               1  118[BANK3 ] unsigned char 
  4077 ;;  point_dif       1  111[BANK3 ] unsigned char 
  4078 ;;  count           1  110[BANK3 ] unsigned char 
  4079 ;;  count_index     1    0        unsigned char 
  4080 ;; Return value:  Size  Location     Type
  4081 ;;                  1    wreg      void 
  4082 ;; Registers used:
  4083 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4084 ;; Tracked objects:
  4085 ;;		On entry : 0/0
  4086 ;;		On exit  : 0/0
  4087 ;;		Unchanged: 0/0
  4088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4089 ;;      Params:         0       0       0       0       0       0       0       0       0
  4090 ;;      Locals:         0       0       0       0     121       0       0       0       0
  4091 ;;      Temps:          0       6       0       0       0       0       0       0       0
  4092 ;;      Totals:         0       6       0       0     121       0       0       0       0
  4093 ;;Total ram usage:      127 bytes
  4094 ;; Hardware stack levels used:    1
  4095 ;; Hardware stack levels required when called:    7
  4096 ;; This function calls:
  4097 ;;		_Latitude
  4098 ;;		_Longitude
  4099 ;;		_atoi
  4100 ;;		_escreve_frase_ram_lcd
  4101 ;;		_escreve_inteiro_lcd
  4102 ;;		_posicao_cursor_lcd
  4103 ;; This function is called by:
  4104 ;;		_inicializa_tarefas
  4105 ;;		_escalonador
  4106 ;; This function uses a non-reentrant model
  4107 ;;
  4108                           
  4109                           	psect	text15
  4110  000012                     __ptext15:
  4111                           	opt stack 0
  4112  000012                     _verifica_fence_externo:
  4113                           	opt stack 22
  4114                           
  4115                           ;main.c: 266: unsigned char fence_diff_lat[4][11] = {"-2365.84991", "-2365.84991", "-236
      +                          5.99731", "-2365.99731"};
  4116                           
  4117                           ;incstack = 0
  4118  000012  EE23  F0A5         	lfsr	2,verifica_fence_externo@F4363
  4119  000016  EE13  F000         	lfsr	1,verifica_fence_externo@fence_diff_lat
  4120  00001A  0E2B               	movlw	43
  4121  00001C                     u15661:
  4122  00001C  CFDB FFE3          	movff	plusw2,plusw1
  4123  000020  06E8               	decf	wreg,f,c
  4124  000022  E2FC               	bc	u15661
  4125                           
  4126                           ;main.c: 267: unsigned char fence_diff_long[4][11] = {"-4653.16622", "-4653.00475", "-46
      +                          53.00475", "-4653.16622"};
  4127  000024  EE23  F079         	lfsr	2,verifica_fence_externo@F4366
  4128  000028  EE13  F02C         	lfsr	1,verifica_fence_externo@fence_diff_long
  4129  00002C  0E2B               	movlw	43
  4130  00002E                     u15671:
  4131  00002E  CFDB FFE3          	movff	plusw2,plusw1
  4132  000032  06E8               	decf	wreg,f,c
  4133  000034  E2FC               	bc	u15671
  4134                           
  4135                           ;main.c: 277: unsigned char *point_buff, i, j, count, count_index;
  4136                           ;main.c: 278: unsigned char *point_buff_gps_lat, *point_buff_gps_long;
  4137                           ;main.c: 279: unsigned char point, point_dif;
  4138                           ;main.c: 280: unsigned int temp_var_deg;
  4139                           ;main.c: 281: unsigned char temp_buff_lat[11] = "-2365.91992";
  4140  000036  EE21  F0AC         	lfsr	2,verifica_fence_externo@F4378
  4141  00003A  EE13  F058         	lfsr	1,verifica_fence_externo@temp_buff_lat
  4142  00003E  0E0A               	movlw	10
  4143  000040                     u15681:
  4144  000040  CFDB FFE3          	movff	plusw2,plusw1
  4145  000044  06E8               	decf	wreg,f,c
  4146  000046  E2FC               	bc	u15681
  4147                           
  4148                           ;main.c: 282: unsigned char temp_buff_long[11] = "-4653.16620";
  4149  000048  EE21  F0A1         	lfsr	2,verifica_fence_externo@F4380
  4150  00004C  EE13  F063         	lfsr	1,verifica_fence_externo@temp_buff_long
  4151  000050  0E0A               	movlw	10
  4152  000052                     u15691:
  4153  000052  CFDB FFE3          	movff	plusw2,plusw1
  4154  000056  06E8               	decf	wreg,f,c
  4155  000058  E2FC               	bc	u15691
  4156                           
  4157                           ;main.c: 283: count = 0;
  4158  00005A  0E00               	movlw	0
  4159  00005C  0103               	movlb	3	; () banked
  4160  00005E  6F6E               	movwf	verifica_fence_externo@count& (0+255),b
  4161                           
  4162                           ; BSR set to: 3
  4163                           ;main.c: 284: point = 0;
  4164  000060  0E00               	movlw	0
  4165  000062  6F78               	movwf	verifica_fence_externo@point& (0+255),b
  4166                           
  4167                           ; BSR set to: 3
  4168                           ;main.c: 285: point_dif = 0;
  4169  000064  0E00               	movlw	0
  4170  000066  6F6F               	movwf	verifica_fence_externo@point_dif& (0+255),b
  4171                           
  4172                           ; BSR set to: 3
  4173                           ;main.c: 286: j= 0;
  4174  000068  0E00               	movlw	0
  4175  00006A  6F76               	movwf	verifica_fence_externo@j& (0+255),b
  4176                           
  4177                           ; BSR set to: 3
  4178                           ;main.c: 289: point_buff_gps_lat = Latitude();
  4179  00006C  ECA1  F02B         	call	_Latitude	;wreg free
  4180  000070  C060  F370         	movff	?_Latitude,verifica_fence_externo@point_buff_gps_lat
  4181  000074  C061  F371         	movff	?_Latitude+1,verifica_fence_externo@point_buff_gps_lat+1
  4182                           
  4183                           ;main.c: 290: point_buff_gps_long = Longitude();
  4184  000078  EC9B  F02B         	call	_Longitude	;wreg free
  4185  00007C  C060  F372         	movff	?_Longitude,verifica_fence_externo@point_buff_gps_long
  4186  000080  C061  F373         	movff	?_Longitude+1,verifica_fence_externo@point_buff_gps_long+1
  4187                           
  4188                           ;main.c: 292: for(i=0; i<11; i++)
  4189  000084  0E00               	movlw	0
  4190  000086  0103               	movlb	3	; () banked
  4191  000088  6F77               	movwf	verifica_fence_externo@i& (0+255),b
  4192  00008A                     l11772:
  4193                           
  4194                           ; BSR set to: 3
  4195  00008A  0E0A               	movlw	10
  4196  00008C  6577               	cpfsgt	verifica_fence_externo@i& (0+255),b
  4197  00008E  D001               	goto	l136
  4198  000090  D1A1               	goto	l138
  4199  000092                     l136:
  4200                           
  4201                           ; BSR set to: 3
  4202                           ;main.c: 293: {
  4203                           ;main.c: 294: temp_buff_lat[i] = *point_buff_gps_lat;
  4204                           
  4205                           ; BSR set to: 3
  4206  000092  C370  FFD9         	movff	verifica_fence_externo@point_buff_gps_lat,fsr2l
  4207  000096  C371  FFDA         	movff	verifica_fence_externo@point_buff_gps_lat+1,fsr2h
  4208  00009A  5177               	movf	verifica_fence_externo@i& (0+255),w,b
  4209  00009C  0D01               	mullw	1
  4210  00009E  0E58               	movlw	low verifica_fence_externo@temp_buff_lat
  4211  0000A0  24F3               	addwf	prodl,w,c
  4212  0000A2  6EE1               	movwf	fsr1l,c
  4213  0000A4  0E03               	movlw	high verifica_fence_externo@temp_buff_lat
  4214  0000A6  20F4               	addwfc	prodh,w,c
  4215  0000A8  6EE2               	movwf	fsr1h,c
  4216  0000AA  CFDF FFE7          	movff	indf2,indf1
  4217                           
  4218                           ;main.c: 295: temp_buff_long[i] = *point_buff_gps_long;
  4219  0000AE  C372  FFD9         	movff	verifica_fence_externo@point_buff_gps_long,fsr2l
  4220  0000B2  C373  FFDA         	movff	verifica_fence_externo@point_buff_gps_long+1,fsr2h
  4221  0000B6  5177               	movf	verifica_fence_externo@i& (0+255),w,b
  4222  0000B8  0D01               	mullw	1
  4223  0000BA  0E63               	movlw	low verifica_fence_externo@temp_buff_long
  4224  0000BC  24F3               	addwf	prodl,w,c
  4225  0000BE  6EE1               	movwf	fsr1l,c
  4226  0000C0  0E03               	movlw	high verifica_fence_externo@temp_buff_long
  4227  0000C2  20F4               	addwfc	prodh,w,c
  4228  0000C4  6EE2               	movwf	fsr1h,c
  4229  0000C6  CFDF FFE7          	movff	indf2,indf1
  4230                           
  4231                           ; BSR set to: 3
  4232                           ;main.c: 296: point_buff_gps_lat++;
  4233  0000CA  4B70               	infsnz	verifica_fence_externo@point_buff_gps_lat& (0+255),f,b
  4234  0000CC  2B71               	incf	(verifica_fence_externo@point_buff_gps_lat+1)& (0+255),f,b
  4235                           
  4236                           ; BSR set to: 3
  4237                           ;main.c: 297: point_buff_gps_long++;
  4238  0000CE  4B72               	infsnz	verifica_fence_externo@point_buff_gps_long& (0+255),f,b
  4239  0000D0  2B73               	incf	(verifica_fence_externo@point_buff_gps_long+1)& (0+255),f,b
  4240                           
  4241                           ; BSR set to: 3
  4242  0000D2  2B77               	incf	verifica_fence_externo@i& (0+255),f,b
  4243  0000D4  D7DA               	goto	l11772
  4244  0000D6                     
  4245                           ; BSR set to: 3
  4246                           ;main.c: 302: {
  4247                           ;main.c: 305: for(i=1; i<5; i++)
  4248                           
  4249                           ; BSR set to: 3
  4250  0000D6  0E01               	movlw	1
  4251  0000D8  6F77               	movwf	verifica_fence_externo@i& (0+255),b
  4252  0000DA                     l11788:
  4253                           
  4254                           ; BSR set to: 3
  4255  0000DA  0E04               	movlw	4
  4256  0000DC  6577               	cpfsgt	verifica_fence_externo@i& (0+255),b
  4257  0000DE  D001               	goto	l140
  4258  0000E0  D068               	goto	u15770
  4259  0000E2                     l140:
  4260                           
  4261                           ; BSR set to: 3
  4262                           ;main.c: 306: {
  4263                           ;main.c: 307: if(point == 0 || point == 2)
  4264                           
  4265                           ; BSR set to: 3
  4266  0000E2  5178               	movf	verifica_fence_externo@point& (0+255),w,b
  4267  0000E4  B4D8               	btfsc	status,2,c
  4268  0000E6  D004               	goto	u15740
  4269                           
  4270                           ; BSR set to: 3
  4271  0000E8  0E02               	movlw	2
  4272  0000EA  1978               	xorwf	verifica_fence_externo@point& (0+255),w,b
  4273  0000EC  A4D8               	btfss	status,2,c
  4274  0000EE  D05F               	goto	u15760
  4275  0000F0                     u15740:
  4276                           
  4277                           ; BSR set to: 3
  4278                           ;main.c: 308: {
  4279                           ;main.c: 310: for(j= 0; i < 5; j++)
  4280                           
  4281                           ; BSR set to: 3
  4282  0000F0  0E00               	movlw	0
  4283  0000F2  6F76               	movwf	verifica_fence_externo@j& (0+255),b
  4284  0000F4                     l11798:
  4285                           
  4286                           ; BSR set to: 3
  4287  0000F4  0E04               	movlw	4
  4288  0000F6  6577               	cpfsgt	verifica_fence_externo@i& (0+255),b
  4289  0000F8  D001               	goto	l145
  4290  0000FA  D059               	goto	u15760
  4291  0000FC                     l145:
  4292                           
  4293                           ; BSR set to: 3
  4294                           ;main.c: 311: {
  4295                           ;main.c: 312: poligono_ext[point].point_long_deg[j] = temp_buff_long[i];
  4296                           
  4297                           ; BSR set to: 3
  4298  0000FC  5177               	movf	verifica_fence_externo@i& (0+255),w,b
  4299  0000FE  0D01               	mullw	1
  4300  000100  0E63               	movlw	low verifica_fence_externo@temp_buff_long
  4301  000102  24F3               	addwf	prodl,w,c
  4302  000104  6ED9               	movwf	fsr2l,c
  4303  000106  0E03               	movlw	high verifica_fence_externo@temp_buff_long
  4304  000108  20F4               	addwfc	prodh,w,c
  4305  00010A  6EDA               	movwf	fsr2h,c
  4306  00010C  5176               	movf	verifica_fence_externo@j& (0+255),w,b
  4307  00010E  0D01               	mullw	1
  4308  000110  0E12               	movlw	18
  4309  000112  26F3               	addwf	prodl,f,c
  4310  000114  0E00               	movlw	0
  4311  000116  22F4               	addwfc	prodh,f,c
  4312  000118  0E00               	movlw	low _poligono_ext
  4313  00011A  0100               	movlb	0	; () banked
  4314  00011C  6F81               	movwf	??_verifica_fence_externo& (0+255),b
  4315  00011E  0E02               	movlw	high _poligono_ext
  4316  000120  6F82               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  4317  000122  50F3               	movf	prodl,w,c
  4318  000124  2781               	addwf	??_verifica_fence_externo& (0+255),f,b
  4319  000126  50F4               	movf	prodh,w,c
  4320  000128  2382               	addwfc	(??_verifica_fence_externo+1)& (0+255),f,b
  4321  00012A  0103               	movlb	3	; () banked
  4322  00012C  5178               	movf	verifica_fence_externo@point& (0+255),w,b
  4323  00012E  0D40               	mullw	64
  4324  000130  50F3               	movf	prodl,w,c
  4325  000132  0100               	movlb	0	; () banked
  4326  000134  2581               	addwf	??_verifica_fence_externo& (0+255),w,b
  4327  000136  6EE1               	movwf	fsr1l,c
  4328  000138  50F4               	movf	prodh,w,c
  4329  00013A  2182               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  4330  00013C  6EE2               	movwf	fsr1h,c
  4331  00013E  CFDF FFE7          	movff	indf2,indf1
  4332                           
  4333                           ;main.c: 313: poligono_ext[point].fence_long_deg[j] = fence_diff_long[point][i];
  4334  000142  0103               	movlb	3	; () banked
  4335  000144  5178               	movf	verifica_fence_externo@point& (0+255),w,b
  4336  000146  0D0B               	mullw	11
  4337  000148  0E2C               	movlw	low verifica_fence_externo@fence_diff_long
  4338  00014A  0100               	movlb	0	; () banked
  4339  00014C  6F81               	movwf	??_verifica_fence_externo& (0+255),b
  4340  00014E  0E03               	movlw	high verifica_fence_externo@fence_diff_long
  4341  000150  6F82               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  4342  000152  50F3               	movf	prodl,w,c
  4343  000154  2781               	addwf	??_verifica_fence_externo& (0+255),f,b
  4344  000156  50F4               	movf	prodh,w,c
  4345  000158  2382               	addwfc	(??_verifica_fence_externo+1)& (0+255),f,b
  4346  00015A  0103               	movlb	3	; () banked
  4347  00015C  5177               	movf	verifica_fence_externo@i& (0+255),w,b
  4348  00015E  0D01               	mullw	1
  4349  000160  50F3               	movf	prodl,w,c
  4350  000162  0100               	movlb	0	; () banked
  4351  000164  2581               	addwf	??_verifica_fence_externo& (0+255),w,b
  4352  000166  6ED9               	movwf	fsr2l,c
  4353  000168  50F4               	movf	prodh,w,c
  4354  00016A  2182               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  4355  00016C  6EDA               	movwf	fsr2h,c
  4356  00016E  0103               	movlb	3	; () banked
  4357  000170  5176               	movf	verifica_fence_externo@j& (0+255),w,b
  4358  000172  0D01               	mullw	1
  4359  000174  0E06               	movlw	6
  4360  000176  26F3               	addwf	prodl,f,c
  4361  000178  0E00               	movlw	0
  4362  00017A  22F4               	addwfc	prodh,f,c
  4363  00017C  0E00               	movlw	low _poligono_ext
  4364  00017E  0100               	movlb	0	; () banked
  4365  000180  6F83               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  4366  000182  0E02               	movlw	high _poligono_ext
  4367  000184  6F84               	movwf	(??_verifica_fence_externo+3)& (0+255),b
  4368  000186  50F3               	movf	prodl,w,c
  4369  000188  2783               	addwf	(??_verifica_fence_externo+2)& (0+255),f,b
  4370  00018A  50F4               	movf	prodh,w,c
  4371  00018C  2384               	addwfc	(??_verifica_fence_externo+3)& (0+255),f,b
  4372  00018E  0103               	movlb	3	; () banked
  4373  000190  5178               	movf	verifica_fence_externo@point& (0+255),w,b
  4374  000192  0D40               	mullw	64
  4375  000194  50F3               	movf	prodl,w,c
  4376  000196  0100               	movlb	0	; () banked
  4377  000198  2583               	addwf	(??_verifica_fence_externo+2)& (0+255),w,b
  4378  00019A  6EE1               	movwf	fsr1l,c
  4379  00019C  50F4               	movf	prodh,w,c
  4380  00019E  2184               	addwfc	(??_verifica_fence_externo+3)& (0+255),w,b
  4381  0001A0  6EE2               	movwf	fsr1h,c
  4382  0001A2  CFDF FFE7          	movff	indf2,indf1
  4383                           
  4384                           ; BSR set to: 0
  4385                           ;main.c: 317: i++;
  4386  0001A6  0103               	movlb	3	; () banked
  4387  0001A8  2B77               	incf	verifica_fence_externo@i& (0+255),f,b
  4388                           
  4389                           ; BSR set to: 3
  4390  0001AA  2B76               	incf	verifica_fence_externo@j& (0+255),f,b
  4391  0001AC  D7A3               	goto	l11798
  4392  0001AE                     u15760:
  4393                           
  4394                           ; BSR set to: 3
  4395                           
  4396                           ; BSR set to: 3
  4397                           
  4398                           ; BSR set to: 3
  4399  0001AE  2B77               	incf	verifica_fence_externo@i& (0+255),f,b
  4400  0001B0  D794               	goto	l11788
  4401  0001B2                     u15770:
  4402                           
  4403                           ; BSR set to: 3
  4404                           ;main.c: 318: }
  4405                           ;main.c: 322: }
  4406                           ;main.c: 324: }
  4407                           ;main.c: 326: for(i=1; i<5; i++)
  4408                           
  4409                           ; BSR set to: 3
  4410  0001B2  0E01               	movlw	1
  4411  0001B4  6F77               	movwf	verifica_fence_externo@i& (0+255),b
  4412  0001B6                     l11816:
  4413                           
  4414                           ; BSR set to: 3
  4415  0001B6  0E04               	movlw	4
  4416  0001B8  6577               	cpfsgt	verifica_fence_externo@i& (0+255),b
  4417  0001BA  D001               	goto	l147
  4418  0001BC  D064               	goto	u15830
  4419  0001BE                     l147:
  4420                           
  4421                           ; BSR set to: 3
  4422                           ;main.c: 327: {
  4423                           ;main.c: 328: if(point == 0 || point == 3)
  4424                           
  4425                           ; BSR set to: 3
  4426  0001BE  5178               	movf	verifica_fence_externo@point& (0+255),w,b
  4427  0001C0  B4D8               	btfsc	status,2,c
  4428  0001C2  D004               	goto	u15800
  4429                           
  4430                           ; BSR set to: 3
  4431  0001C4  0E03               	movlw	3
  4432  0001C6  1978               	xorwf	verifica_fence_externo@point& (0+255),w,b
  4433  0001C8  A4D8               	btfss	status,2,c
  4434  0001CA  D05B               	goto	u15820
  4435  0001CC                     u15800:
  4436                           
  4437                           ; BSR set to: 3
  4438                           ;main.c: 329: {
  4439                           ;main.c: 331: for(j= 0; i < 5; j++)
  4440                           
  4441                           ; BSR set to: 3
  4442  0001CC  0E00               	movlw	0
  4443  0001CE  6F76               	movwf	verifica_fence_externo@j& (0+255),b
  4444  0001D0                     l11826:
  4445                           
  4446                           ; BSR set to: 3
  4447  0001D0  0E04               	movlw	4
  4448  0001D2  6577               	cpfsgt	verifica_fence_externo@i& (0+255),b
  4449  0001D4  D001               	goto	l152
  4450  0001D6  D055               	goto	u15820
  4451  0001D8                     l152:
  4452                           
  4453                           ; BSR set to: 3
  4454                           ;main.c: 332: {
  4455                           ;main.c: 333: poligono_ext[point].point_lat_deg[j] = temp_buff_lat[i];
  4456                           
  4457                           ; BSR set to: 3
  4458  0001D8  5177               	movf	verifica_fence_externo@i& (0+255),w,b
  4459  0001DA  0D01               	mullw	1
  4460  0001DC  0E58               	movlw	low verifica_fence_externo@temp_buff_lat
  4461  0001DE  24F3               	addwf	prodl,w,c
  4462  0001E0  6ED9               	movwf	fsr2l,c
  4463  0001E2  0E03               	movlw	high verifica_fence_externo@temp_buff_lat
  4464  0001E4  20F4               	addwfc	prodh,w,c
  4465  0001E6  6EDA               	movwf	fsr2h,c
  4466  0001E8  5176               	movf	verifica_fence_externo@j& (0+255),w,b
  4467  0001EA  0D01               	mullw	1
  4468  0001EC  0E0C               	movlw	12
  4469  0001EE  26F3               	addwf	prodl,f,c
  4470  0001F0  0E00               	movlw	0
  4471  0001F2  22F4               	addwfc	prodh,f,c
  4472  0001F4  0E00               	movlw	low _poligono_ext
  4473  0001F6  0100               	movlb	0	; () banked
  4474  0001F8  6F81               	movwf	??_verifica_fence_externo& (0+255),b
  4475  0001FA  0E02               	movlw	high _poligono_ext
  4476  0001FC  6F82               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  4477  0001FE  50F3               	movf	prodl,w,c
  4478  000200  2781               	addwf	??_verifica_fence_externo& (0+255),f,b
  4479  000202  50F4               	movf	prodh,w,c
  4480  000204  2382               	addwfc	(??_verifica_fence_externo+1)& (0+255),f,b
  4481  000206  0103               	movlb	3	; () banked
  4482  000208  5178               	movf	verifica_fence_externo@point& (0+255),w,b
  4483  00020A  0D40               	mullw	64
  4484  00020C  50F3               	movf	prodl,w,c
  4485  00020E  0100               	movlb	0	; () banked
  4486  000210  2581               	addwf	??_verifica_fence_externo& (0+255),w,b
  4487  000212  6EE1               	movwf	fsr1l,c
  4488  000214  50F4               	movf	prodh,w,c
  4489  000216  2182               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  4490  000218  6EE2               	movwf	fsr1h,c
  4491  00021A  CFDF FFE7          	movff	indf2,indf1
  4492                           
  4493                           ;main.c: 334: poligono_ext[point].fence_lat_deg[j] = fence_diff_lat[point][i];
  4494  00021E  0103               	movlb	3	; () banked
  4495  000220  5178               	movf	verifica_fence_externo@point& (0+255),w,b
  4496  000222  0D0B               	mullw	11
  4497  000224  0E00               	movlw	low verifica_fence_externo@fence_diff_lat
  4498  000226  0100               	movlb	0	; () banked
  4499  000228  6F81               	movwf	??_verifica_fence_externo& (0+255),b
  4500  00022A  0E03               	movlw	high verifica_fence_externo@fence_diff_lat
  4501  00022C  6F82               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  4502  00022E  50F3               	movf	prodl,w,c
  4503  000230  2781               	addwf	??_verifica_fence_externo& (0+255),f,b
  4504  000232  50F4               	movf	prodh,w,c
  4505  000234  2382               	addwfc	(??_verifica_fence_externo+1)& (0+255),f,b
  4506  000236  0103               	movlb	3	; () banked
  4507  000238  5177               	movf	verifica_fence_externo@i& (0+255),w,b
  4508  00023A  0D01               	mullw	1
  4509  00023C  50F3               	movf	prodl,w,c
  4510  00023E  0100               	movlb	0	; () banked
  4511  000240  2581               	addwf	??_verifica_fence_externo& (0+255),w,b
  4512  000242  6ED9               	movwf	fsr2l,c
  4513  000244  50F4               	movf	prodh,w,c
  4514  000246  2182               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  4515  000248  6EDA               	movwf	fsr2h,c
  4516  00024A  0103               	movlb	3	; () banked
  4517  00024C  5178               	movf	verifica_fence_externo@point& (0+255),w,b
  4518  00024E  0D40               	mullw	64
  4519  000250  0E00               	movlw	low _poligono_ext
  4520  000252  0100               	movlb	0	; () banked
  4521  000254  6F83               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  4522  000256  0E02               	movlw	high _poligono_ext
  4523  000258  6F84               	movwf	(??_verifica_fence_externo+3)& (0+255),b
  4524  00025A  50F3               	movf	prodl,w,c
  4525  00025C  2783               	addwf	(??_verifica_fence_externo+2)& (0+255),f,b
  4526  00025E  50F4               	movf	prodh,w,c
  4527  000260  2384               	addwfc	(??_verifica_fence_externo+3)& (0+255),f,b
  4528  000262  0103               	movlb	3	; () banked
  4529  000264  5176               	movf	verifica_fence_externo@j& (0+255),w,b
  4530  000266  0D01               	mullw	1
  4531  000268  50F3               	movf	prodl,w,c
  4532  00026A  0100               	movlb	0	; () banked
  4533  00026C  2583               	addwf	(??_verifica_fence_externo+2)& (0+255),w,b
  4534  00026E  6EE1               	movwf	fsr1l,c
  4535  000270  50F4               	movf	prodh,w,c
  4536  000272  2184               	addwfc	(??_verifica_fence_externo+3)& (0+255),w,b
  4537  000274  6EE2               	movwf	fsr1h,c
  4538  000276  CFDF FFE7          	movff	indf2,indf1
  4539                           
  4540                           ; BSR set to: 0
  4541                           ;main.c: 337: i++;
  4542  00027A  0103               	movlb	3	; () banked
  4543  00027C  2B77               	incf	verifica_fence_externo@i& (0+255),f,b
  4544                           
  4545                           ; BSR set to: 3
  4546  00027E  2B76               	incf	verifica_fence_externo@j& (0+255),f,b
  4547  000280  D7A7               	goto	l11826
  4548  000282                     u15820:
  4549                           
  4550                           ; BSR set to: 3
  4551                           
  4552                           ; BSR set to: 3
  4553                           
  4554                           ; BSR set to: 3
  4555  000282  2B77               	incf	verifica_fence_externo@i& (0+255),f,b
  4556  000284  D798               	goto	l11816
  4557  000286                     u15830:
  4558                           
  4559                           ; BSR set to: 3
  4560                           ;main.c: 338: }
  4561                           ;main.c: 340: }
  4562                           ;main.c: 341: }
  4563                           ;main.c: 342: temp_var_deg = atoi(poligono_ext[point].point_lat_deg);
  4564                           
  4565                           ; BSR set to: 3
  4566  000286  5178               	movf	verifica_fence_externo@point& (0+255),w,b
  4567  000288  0D40               	mullw	64
  4568  00028A  0E0C               	movlw	12
  4569  00028C  26F3               	addwf	prodl,f,c
  4570  00028E  0E00               	movlw	0
  4571  000290  22F4               	addwfc	prodh,f,c
  4572  000292  0E00               	movlw	low _poligono_ext
  4573  000294  24F3               	addwf	prodl,w,c
  4574  000296  0100               	movlb	0	; () banked
  4575  000298  6F66               	movwf	atoi@s& (0+255),b
  4576  00029A  0E02               	movlw	high _poligono_ext
  4577  00029C  20F4               	addwfc	prodh,w,c
  4578  00029E  6F67               	movwf	(atoi@s+1)& (0+255),b
  4579  0002A0  EC78  F020         	call	_atoi	;wreg free
  4580  0002A4  C066  F374         	movff	?_atoi,verifica_fence_externo@temp_var_deg
  4581  0002A8  C067  F375         	movff	?_atoi+1,verifica_fence_externo@temp_var_deg+1
  4582                           
  4583                           ;main.c: 343: poligono_ext[point].diff_lat_deg = atoi(poligono_ext[point].fence_lat_deg)
      +                          ;
  4584  0002AC  0103               	movlb	3	; () banked
  4585  0002AE  5178               	movf	verifica_fence_externo@point& (0+255),w,b
  4586  0002B0  0D40               	mullw	64
  4587  0002B2  0E00               	movlw	low _poligono_ext
  4588  0002B4  24F3               	addwf	prodl,w,c
  4589  0002B6  0100               	movlb	0	; () banked
  4590  0002B8  6F66               	movwf	atoi@s& (0+255),b
  4591  0002BA  0E02               	movlw	high _poligono_ext
  4592  0002BC  20F4               	addwfc	prodh,w,c
  4593  0002BE  6F67               	movwf	(atoi@s+1)& (0+255),b
  4594  0002C0  EC78  F020         	call	_atoi	;wreg free
  4595  0002C4  0100               	movlb	0	; () banked
  4596  0002C6  C066  F081         	movff	?_atoi,??_verifica_fence_externo
  4597  0002CA  C067  F082         	movff	?_atoi+1,??_verifica_fence_externo+1
  4598  0002CE  0E00               	movlw	0
  4599  0002D0  BF82               	btfsc	(??_verifica_fence_externo+1)& (0+255),7,b
  4600  0002D2  0EFF               	movlw	255
  4601  0002D4  6F83               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  4602  0002D6  6F84               	movwf	(??_verifica_fence_externo+3)& (0+255),b
  4603  0002D8  0103               	movlb	3	; () banked
  4604  0002DA  5178               	movf	verifica_fence_externo@point& (0+255),w,b
  4605  0002DC  0D40               	mullw	64
  4606  0002DE  0E18               	movlw	24
  4607  0002E0  26F3               	addwf	prodl,f,c
  4608  0002E2  0E00               	movlw	0
  4609  0002E4  22F4               	addwfc	prodh,f,c
  4610  0002E6  0E00               	movlw	low _poligono_ext
  4611  0002E8  24F3               	addwf	prodl,w,c
  4612  0002EA  6ED9               	movwf	fsr2l,c
  4613  0002EC  0E02               	movlw	high _poligono_ext
  4614  0002EE  20F4               	addwfc	prodh,w,c
  4615  0002F0  6EDA               	movwf	fsr2h,c
  4616  0002F2  C081  FFDE         	movff	??_verifica_fence_externo,postinc2
  4617  0002F6  C082  FFDE         	movff	??_verifica_fence_externo+1,postinc2
  4618  0002FA  C083  FFDE         	movff	??_verifica_fence_externo+2,postinc2
  4619  0002FE  C084  FFDE         	movff	??_verifica_fence_externo+3,postinc2
  4620                           
  4621                           ; BSR set to: 3
  4622                           ;main.c: 344: poligono_ext[point].diff_lat_deg -= temp_var_deg;
  4623  000302  5178               	movf	verifica_fence_externo@point& (0+255),w,b
  4624  000304  0D40               	mullw	64
  4625  000306  0E18               	movlw	24
  4626  000308  26F3               	addwf	prodl,f,c
  4627  00030A  0E00               	movlw	0
  4628  00030C  22F4               	addwfc	prodh,f,c
  4629  00030E  0E00               	movlw	low _poligono_ext
  4630  000310  24F3               	addwf	prodl,w,c
  4631  000312  6ED9               	movwf	fsr2l,c
  4632  000314  0E02               	movlw	high _poligono_ext
  4633  000316  20F4               	addwfc	prodh,w,c
  4634  000318  6EDA               	movwf	fsr2h,c
  4635  00031A  5174               	movf	verifica_fence_externo@temp_var_deg& (0+255),w,b
  4636  00031C  5EDE               	subwf	postinc2,f,c
  4637  00031E  5175               	movf	(verifica_fence_externo@temp_var_deg+1)& (0+255),w,b
  4638  000320  5ADE               	subwfb	postinc2,f,c
  4639  000322  0E00               	movlw	0
  4640  000324  5ADE               	subwfb	postinc2,f,c
  4641  000326  5ADE               	subwfb	postinc2,f,c
  4642                           
  4643                           ; BSR set to: 3
  4644                           ;main.c: 349: temp_var_deg = atoi(poligono_ext[point].point_long_deg);
  4645  000328  5178               	movf	verifica_fence_externo@point& (0+255),w,b
  4646  00032A  0D40               	mullw	64
  4647  00032C  0E12               	movlw	18
  4648  00032E  26F3               	addwf	prodl,f,c
  4649  000330  0E00               	movlw	0
  4650  000332  22F4               	addwfc	prodh,f,c
  4651  000334  0E00               	movlw	low _poligono_ext
  4652  000336  24F3               	addwf	prodl,w,c
  4653  000338  0100               	movlb	0	; () banked
  4654  00033A  6F66               	movwf	atoi@s& (0+255),b
  4655  00033C  0E02               	movlw	high _poligono_ext
  4656  00033E  20F4               	addwfc	prodh,w,c
  4657  000340  6F67               	movwf	(atoi@s+1)& (0+255),b
  4658  000342  EC78  F020         	call	_atoi	;wreg free
  4659  000346  C066  F374         	movff	?_atoi,verifica_fence_externo@temp_var_deg
  4660  00034A  C067  F375         	movff	?_atoi+1,verifica_fence_externo@temp_var_deg+1
  4661                           
  4662                           ;main.c: 350: poligono_ext[point].diff_long_deg = atoi(poligono_ext[point].fence_long_de
      +                          g);
  4663  00034E  0103               	movlb	3	; () banked
  4664  000350  5178               	movf	verifica_fence_externo@point& (0+255),w,b
  4665  000352  0D40               	mullw	64
  4666  000354  0E06               	movlw	6
  4667  000356  26F3               	addwf	prodl,f,c
  4668  000358  0E00               	movlw	0
  4669  00035A  22F4               	addwfc	prodh,f,c
  4670  00035C  0E00               	movlw	low _poligono_ext
  4671  00035E  24F3               	addwf	prodl,w,c
  4672  000360  0100               	movlb	0	; () banked
  4673  000362  6F66               	movwf	atoi@s& (0+255),b
  4674  000364  0E02               	movlw	high _poligono_ext
  4675  000366  20F4               	addwfc	prodh,w,c
  4676  000368  6F67               	movwf	(atoi@s+1)& (0+255),b
  4677  00036A  EC78  F020         	call	_atoi	;wreg free
  4678  00036E  0100               	movlb	0	; () banked
  4679  000370  C066  F081         	movff	?_atoi,??_verifica_fence_externo
  4680  000374  C067  F082         	movff	?_atoi+1,??_verifica_fence_externo+1
  4681  000378  0E00               	movlw	0
  4682  00037A  BF82               	btfsc	(??_verifica_fence_externo+1)& (0+255),7,b
  4683  00037C  0EFF               	movlw	255
  4684  00037E  6F83               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  4685  000380  6F84               	movwf	(??_verifica_fence_externo+3)& (0+255),b
  4686  000382  0103               	movlb	3	; () banked
  4687  000384  5178               	movf	verifica_fence_externo@point& (0+255),w,b
  4688  000386  0D40               	mullw	64
  4689  000388  0E1C               	movlw	28
  4690  00038A  26F3               	addwf	prodl,f,c
  4691  00038C  0E00               	movlw	0
  4692  00038E  22F4               	addwfc	prodh,f,c
  4693  000390  0E00               	movlw	low _poligono_ext
  4694  000392  24F3               	addwf	prodl,w,c
  4695  000394  6ED9               	movwf	fsr2l,c
  4696  000396  0E02               	movlw	high _poligono_ext
  4697  000398  20F4               	addwfc	prodh,w,c
  4698  00039A  6EDA               	movwf	fsr2h,c
  4699  00039C  C081  FFDE         	movff	??_verifica_fence_externo,postinc2
  4700  0003A0  C082  FFDE         	movff	??_verifica_fence_externo+1,postinc2
  4701  0003A4  C083  FFDE         	movff	??_verifica_fence_externo+2,postinc2
  4702  0003A8  C084  FFDE         	movff	??_verifica_fence_externo+3,postinc2
  4703                           
  4704                           ; BSR set to: 3
  4705                           ;main.c: 351: poligono_ext[point].diff_long_deg -= temp_var_deg;
  4706  0003AC  5178               	movf	verifica_fence_externo@point& (0+255),w,b
  4707  0003AE  0D40               	mullw	64
  4708  0003B0  0E1C               	movlw	28
  4709  0003B2  26F3               	addwf	prodl,f,c
  4710  0003B4  0E00               	movlw	0
  4711  0003B6  22F4               	addwfc	prodh,f,c
  4712  0003B8  0E00               	movlw	low _poligono_ext
  4713  0003BA  24F3               	addwf	prodl,w,c
  4714  0003BC  6ED9               	movwf	fsr2l,c
  4715  0003BE  0E02               	movlw	high _poligono_ext
  4716  0003C0  20F4               	addwfc	prodh,w,c
  4717  0003C2  6EDA               	movwf	fsr2h,c
  4718  0003C4  5174               	movf	verifica_fence_externo@temp_var_deg& (0+255),w,b
  4719  0003C6  5EDE               	subwf	postinc2,f,c
  4720  0003C8  5175               	movf	(verifica_fence_externo@temp_var_deg+1)& (0+255),w,b
  4721  0003CA  5ADE               	subwfb	postinc2,f,c
  4722  0003CC  0E00               	movlw	0
  4723  0003CE  5ADE               	subwfb	postinc2,f,c
  4724  0003D0  5ADE               	subwfb	postinc2,f,c
  4725                           
  4726                           ; BSR set to: 3
  4727                           ;main.c: 358: point++;
  4728  0003D2  2B78               	incf	verifica_fence_externo@point& (0+255),f,b
  4729  0003D4                     l138:
  4730                           
  4731                           ; BSR set to: 3
  4732                           
  4733                           ; BSR set to: 3
  4734  0003D4  0E03               	movlw	3
  4735  0003D6  6578               	cpfsgt	verifica_fence_externo@point& (0+255),b
  4736  0003D8  D67E               	goto	l139
  4737                           
  4738                           ; BSR set to: 3
  4739                           ;main.c: 359: }
  4740                           ;main.c: 360: point = 0;
  4741                           
  4742                           ; BSR set to: 3
  4743  0003DA  0E00               	movlw	0
  4744  0003DC  6F78               	movwf	verifica_fence_externo@point& (0+255),b
  4745                           
  4746                           ;main.c: 370: while(point<4)
  4747  0003DE  D1B7               	goto	l155
  4748  0003E0                     
  4749                           ; BSR set to: 3
  4750                           ;main.c: 371: {
  4751                           ;main.c: 372: for(i=6; i<11; i++)
  4752                           
  4753                           ; BSR set to: 3
  4754  0003E0  0E06               	movlw	6
  4755  0003E2  6F77               	movwf	verifica_fence_externo@i& (0+255),b
  4756  0003E4                     l11860:
  4757                           
  4758                           ; BSR set to: 3
  4759  0003E4  0E0A               	movlw	10
  4760  0003E6  6577               	cpfsgt	verifica_fence_externo@i& (0+255),b
  4761  0003E8  D001               	goto	l157
  4762  0003EA  D08D               	goto	u15910
  4763  0003EC                     l157:
  4764                           
  4765                           ; BSR set to: 3
  4766                           ;main.c: 373: {
  4767                           ;main.c: 374: if(point == 0 || point == 3)
  4768                           
  4769                           ; BSR set to: 3
  4770  0003EC  5178               	movf	verifica_fence_externo@point& (0+255),w,b
  4771  0003EE  B4D8               	btfsc	status,2,c
  4772  0003F0  D004               	goto	u15870
  4773                           
  4774                           ; BSR set to: 3
  4775  0003F2  0E03               	movlw	3
  4776  0003F4  1978               	xorwf	verifica_fence_externo@point& (0+255),w,b
  4777  0003F6  A4D8               	btfss	status,2,c
  4778  0003F8  D081               	goto	l159
  4779  0003FA                     u15870:
  4780                           
  4781                           ; BSR set to: 3
  4782                           ;main.c: 375: {
  4783                           ;main.c: 376: if(fence_diff_lat[point][i] != temp_buff_lat[i])
  4784                           
  4785                           ; BSR set to: 3
  4786  0003FA  5177               	movf	verifica_fence_externo@i& (0+255),w,b
  4787  0003FC  0D01               	mullw	1
  4788  0003FE  0E58               	movlw	low verifica_fence_externo@temp_buff_lat
  4789  000400  24F3               	addwf	prodl,w,c
  4790  000402  6ED9               	movwf	fsr2l,c
  4791  000404  0E03               	movlw	high verifica_fence_externo@temp_buff_lat
  4792  000406  20F4               	addwfc	prodh,w,c
  4793  000408  6EDA               	movwf	fsr2h,c
  4794  00040A  5178               	movf	verifica_fence_externo@point& (0+255),w,b
  4795  00040C  0D0B               	mullw	11
  4796  00040E  0E00               	movlw	low verifica_fence_externo@fence_diff_lat
  4797  000410  0100               	movlb	0	; () banked
  4798  000412  6F82               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  4799  000414  0E03               	movlw	high verifica_fence_externo@fence_diff_lat
  4800  000416  6F83               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  4801  000418  50F3               	movf	prodl,w,c
  4802  00041A  2782               	addwf	(??_verifica_fence_externo+1)& (0+255),f,b
  4803  00041C  50F4               	movf	prodh,w,c
  4804  00041E  2383               	addwfc	(??_verifica_fence_externo+2)& (0+255),f,b
  4805  000420  0103               	movlb	3	; () banked
  4806  000422  5177               	movf	verifica_fence_externo@i& (0+255),w,b
  4807  000424  0D01               	mullw	1
  4808  000426  50F3               	movf	prodl,w,c
  4809  000428  0100               	movlb	0	; () banked
  4810  00042A  2582               	addwf	(??_verifica_fence_externo+1)& (0+255),w,b
  4811  00042C  6EE1               	movwf	fsr1l,c
  4812  00042E  50F4               	movf	prodh,w,c
  4813  000430  2183               	addwfc	(??_verifica_fence_externo+2)& (0+255),w,b
  4814  000432  6EE2               	movwf	fsr1h,c
  4815  000434  50DE               	movf	postinc2,w,c
  4816  000436  18E6               	xorwf	postinc1,w,c
  4817  000438  B4D8               	btfsc	status,2,c
  4818  00043A  D062               	goto	l165
  4819                           
  4820                           ; BSR set to: 0
  4821                           ;main.c: 377: {
  4822                           ;main.c: 378: for(j= 0; i < 11; j++)
  4823  00043C  0E00               	movlw	0
  4824  00043E  0103               	movlb	3	; () banked
  4825  000440  6F76               	movwf	verifica_fence_externo@j& (0+255),b
  4826  000442                     l11872:
  4827                           
  4828                           ; BSR set to: 3
  4829  000442  0E0A               	movlw	10
  4830  000444  6577               	cpfsgt	verifica_fence_externo@i& (0+255),b
  4831  000446  D001               	goto	l163
  4832  000448  D05B               	goto	l165
  4833  00044A                     l163:
  4834                           
  4835                           ; BSR set to: 3
  4836                           ;main.c: 379: {
  4837                           ;main.c: 380: poligono_ext[point].fence_lat_min[j] = fence_diff_lat[point][i];
  4838                           
  4839                           ; BSR set to: 3
  4840  00044A  5178               	movf	verifica_fence_externo@point& (0+255),w,b
  4841  00044C  0D0B               	mullw	11
  4842  00044E  0E00               	movlw	low verifica_fence_externo@fence_diff_lat
  4843  000450  0100               	movlb	0	; () banked
  4844  000452  6F81               	movwf	??_verifica_fence_externo& (0+255),b
  4845  000454  0E03               	movlw	high verifica_fence_externo@fence_diff_lat
  4846  000456  6F82               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  4847  000458  50F3               	movf	prodl,w,c
  4848  00045A  2781               	addwf	??_verifica_fence_externo& (0+255),f,b
  4849  00045C  50F4               	movf	prodh,w,c
  4850  00045E  2382               	addwfc	(??_verifica_fence_externo+1)& (0+255),f,b
  4851  000460  0103               	movlb	3	; () banked
  4852  000462  5177               	movf	verifica_fence_externo@i& (0+255),w,b
  4853  000464  0D01               	mullw	1
  4854  000466  50F3               	movf	prodl,w,c
  4855  000468  0100               	movlb	0	; () banked
  4856  00046A  2581               	addwf	??_verifica_fence_externo& (0+255),w,b
  4857  00046C  6ED9               	movwf	fsr2l,c
  4858  00046E  50F4               	movf	prodh,w,c
  4859  000470  2182               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  4860  000472  6EDA               	movwf	fsr2h,c
  4861  000474  0103               	movlb	3	; () banked
  4862  000476  5176               	movf	verifica_fence_externo@j& (0+255),w,b
  4863  000478  0D01               	mullw	1
  4864  00047A  0E20               	movlw	32
  4865  00047C  26F3               	addwf	prodl,f,c
  4866  00047E  0E00               	movlw	0
  4867  000480  22F4               	addwfc	prodh,f,c
  4868  000482  0E00               	movlw	low _poligono_ext
  4869  000484  0100               	movlb	0	; () banked
  4870  000486  6F83               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  4871  000488  0E02               	movlw	high _poligono_ext
  4872  00048A  6F84               	movwf	(??_verifica_fence_externo+3)& (0+255),b
  4873  00048C  50F3               	movf	prodl,w,c
  4874  00048E  2783               	addwf	(??_verifica_fence_externo+2)& (0+255),f,b
  4875  000490  50F4               	movf	prodh,w,c
  4876  000492  2384               	addwfc	(??_verifica_fence_externo+3)& (0+255),f,b
  4877  000494  0103               	movlb	3	; () banked
  4878  000496  5178               	movf	verifica_fence_externo@point& (0+255),w,b
  4879  000498  0D40               	mullw	64
  4880  00049A  50F3               	movf	prodl,w,c
  4881  00049C  0100               	movlb	0	; () banked
  4882  00049E  2583               	addwf	(??_verifica_fence_externo+2)& (0+255),w,b
  4883  0004A0  6EE1               	movwf	fsr1l,c
  4884  0004A2  50F4               	movf	prodh,w,c
  4885  0004A4  2184               	addwfc	(??_verifica_fence_externo+3)& (0+255),w,b
  4886  0004A6  6EE2               	movwf	fsr1h,c
  4887  0004A8  CFDF FFE7          	movff	indf2,indf1
  4888                           
  4889                           ;main.c: 381: poligono_ext[point].point_lat_min[j] = temp_buff_lat[i];
  4890  0004AC  0103               	movlb	3	; () banked
  4891  0004AE  5177               	movf	verifica_fence_externo@i& (0+255),w,b
  4892  0004B0  0D01               	mullw	1
  4893  0004B2  0E58               	movlw	low verifica_fence_externo@temp_buff_lat
  4894  0004B4  24F3               	addwf	prodl,w,c
  4895  0004B6  6ED9               	movwf	fsr2l,c
  4896  0004B8  0E03               	movlw	high verifica_fence_externo@temp_buff_lat
  4897  0004BA  20F4               	addwfc	prodh,w,c
  4898  0004BC  6EDA               	movwf	fsr2h,c
  4899  0004BE  5176               	movf	verifica_fence_externo@j& (0+255),w,b
  4900  0004C0  0D01               	mullw	1
  4901  0004C2  0E2C               	movlw	44
  4902  0004C4  26F3               	addwf	prodl,f,c
  4903  0004C6  0E00               	movlw	0
  4904  0004C8  22F4               	addwfc	prodh,f,c
  4905  0004CA  0E00               	movlw	low _poligono_ext
  4906  0004CC  0100               	movlb	0	; () banked
  4907  0004CE  6F81               	movwf	??_verifica_fence_externo& (0+255),b
  4908  0004D0  0E02               	movlw	high _poligono_ext
  4909  0004D2  6F82               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  4910  0004D4  50F3               	movf	prodl,w,c
  4911  0004D6  2781               	addwf	??_verifica_fence_externo& (0+255),f,b
  4912  0004D8  50F4               	movf	prodh,w,c
  4913  0004DA  2382               	addwfc	(??_verifica_fence_externo+1)& (0+255),f,b
  4914  0004DC  0103               	movlb	3	; () banked
  4915  0004DE  5178               	movf	verifica_fence_externo@point& (0+255),w,b
  4916  0004E0  0D40               	mullw	64
  4917  0004E2  50F3               	movf	prodl,w,c
  4918  0004E4  0100               	movlb	0	; () banked
  4919  0004E6  2581               	addwf	??_verifica_fence_externo& (0+255),w,b
  4920  0004E8  6EE1               	movwf	fsr1l,c
  4921  0004EA  50F4               	movf	prodh,w,c
  4922  0004EC  2182               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  4923  0004EE  6EE2               	movwf	fsr1h,c
  4924  0004F0  CFDF FFE7          	movff	indf2,indf1
  4925                           
  4926                           ; BSR set to: 0
  4927                           ;main.c: 382: i++;
  4928  0004F4  0103               	movlb	3	; () banked
  4929  0004F6  2B77               	incf	verifica_fence_externo@i& (0+255),f,b
  4930                           
  4931                           ; BSR set to: 3
  4932  0004F8  2B76               	incf	verifica_fence_externo@j& (0+255),f,b
  4933  0004FA  D7A3               	goto	l11872
  4934  0004FC                     l159:
  4935                           
  4936                           ; BSR set to: 3
  4937                           ;main.c: 387: else
  4938                           ;main.c: 388: {
  4939                           ;main.c: 389: i = 11;
  4940                           
  4941                           ; BSR set to: 3
  4942  0004FC  0E0B               	movlw	11
  4943  0004FE  6F77               	movwf	verifica_fence_externo@i& (0+255),b
  4944  000500                     l165:
  4945                           
  4946                           ; BSR set to: 3
  4947  000500  0103               	movlb	3	; () banked
  4948  000502  2B77               	incf	verifica_fence_externo@i& (0+255),f,b
  4949  000504  D76F               	goto	l11860
  4950  000506                     u15910:
  4951                           
  4952                           ; BSR set to: 3
  4953                           ;main.c: 390: }
  4954                           ;main.c: 391: }
  4955                           ;main.c: 393: for(i=6; i<11; i++)
  4956                           
  4957                           ; BSR set to: 3
  4958  000506  0E06               	movlw	6
  4959  000508  6F77               	movwf	verifica_fence_externo@i& (0+255),b
  4960  00050A                     l11892:
  4961                           
  4962                           ; BSR set to: 3
  4963  00050A  0E0A               	movlw	10
  4964  00050C  6577               	cpfsgt	verifica_fence_externo@i& (0+255),b
  4965  00050E  D001               	goto	l166
  4966  000510  D08D               	goto	u15980
  4967  000512                     l166:
  4968                           
  4969                           ; BSR set to: 3
  4970                           ;main.c: 394: {
  4971                           ;main.c: 395: if(point == 0 || point == 2)
  4972                           
  4973                           ; BSR set to: 3
  4974  000512  5178               	movf	verifica_fence_externo@point& (0+255),w,b
  4975  000514  B4D8               	btfsc	status,2,c
  4976  000516  D004               	goto	u15940
  4977                           
  4978                           ; BSR set to: 3
  4979  000518  0E02               	movlw	2
  4980  00051A  1978               	xorwf	verifica_fence_externo@point& (0+255),w,b
  4981  00051C  A4D8               	btfss	status,2,c
  4982  00051E  D081               	goto	l168
  4983  000520                     u15940:
  4984                           
  4985                           ; BSR set to: 3
  4986                           ;main.c: 396: {
  4987                           ;main.c: 397: if(fence_diff_long[point][i] != temp_buff_long[i])
  4988                           
  4989                           ; BSR set to: 3
  4990  000520  5177               	movf	verifica_fence_externo@i& (0+255),w,b
  4991  000522  0D01               	mullw	1
  4992  000524  0E63               	movlw	low verifica_fence_externo@temp_buff_long
  4993  000526  24F3               	addwf	prodl,w,c
  4994  000528  6ED9               	movwf	fsr2l,c
  4995  00052A  0E03               	movlw	high verifica_fence_externo@temp_buff_long
  4996  00052C  20F4               	addwfc	prodh,w,c
  4997  00052E  6EDA               	movwf	fsr2h,c
  4998  000530  5178               	movf	verifica_fence_externo@point& (0+255),w,b
  4999  000532  0D0B               	mullw	11
  5000  000534  0E2C               	movlw	low verifica_fence_externo@fence_diff_long
  5001  000536  0100               	movlb	0	; () banked
  5002  000538  6F82               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  5003  00053A  0E03               	movlw	high verifica_fence_externo@fence_diff_long
  5004  00053C  6F83               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  5005  00053E  50F3               	movf	prodl,w,c
  5006  000540  2782               	addwf	(??_verifica_fence_externo+1)& (0+255),f,b
  5007  000542  50F4               	movf	prodh,w,c
  5008  000544  2383               	addwfc	(??_verifica_fence_externo+2)& (0+255),f,b
  5009  000546  0103               	movlb	3	; () banked
  5010  000548  5177               	movf	verifica_fence_externo@i& (0+255),w,b
  5011  00054A  0D01               	mullw	1
  5012  00054C  50F3               	movf	prodl,w,c
  5013  00054E  0100               	movlb	0	; () banked
  5014  000550  2582               	addwf	(??_verifica_fence_externo+1)& (0+255),w,b
  5015  000552  6EE1               	movwf	fsr1l,c
  5016  000554  50F4               	movf	prodh,w,c
  5017  000556  2183               	addwfc	(??_verifica_fence_externo+2)& (0+255),w,b
  5018  000558  6EE2               	movwf	fsr1h,c
  5019  00055A  50DE               	movf	postinc2,w,c
  5020  00055C  18E6               	xorwf	postinc1,w,c
  5021  00055E  B4D8               	btfsc	status,2,c
  5022  000560  D062               	goto	l174
  5023                           
  5024                           ; BSR set to: 0
  5025                           ;main.c: 398: {
  5026                           ;main.c: 399: for(j= 0; i < 11; j++)
  5027  000562  0E00               	movlw	0
  5028  000564  0103               	movlb	3	; () banked
  5029  000566  6F76               	movwf	verifica_fence_externo@j& (0+255),b
  5030  000568                     l11904:
  5031                           
  5032                           ; BSR set to: 3
  5033  000568  0E0A               	movlw	10
  5034  00056A  6577               	cpfsgt	verifica_fence_externo@i& (0+255),b
  5035  00056C  D001               	goto	l172
  5036  00056E  D05B               	goto	l174
  5037  000570                     l172:
  5038                           
  5039                           ; BSR set to: 3
  5040                           ;main.c: 400: {
  5041                           ;main.c: 401: poligono_ext[point].fence_long_min[j] = fence_diff_long[point][i];
  5042                           
  5043                           ; BSR set to: 3
  5044  000570  5178               	movf	verifica_fence_externo@point& (0+255),w,b
  5045  000572  0D0B               	mullw	11
  5046  000574  0E2C               	movlw	low verifica_fence_externo@fence_diff_long
  5047  000576  0100               	movlb	0	; () banked
  5048  000578  6F81               	movwf	??_verifica_fence_externo& (0+255),b
  5049  00057A  0E03               	movlw	high verifica_fence_externo@fence_diff_long
  5050  00057C  6F82               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  5051  00057E  50F3               	movf	prodl,w,c
  5052  000580  2781               	addwf	??_verifica_fence_externo& (0+255),f,b
  5053  000582  50F4               	movf	prodh,w,c
  5054  000584  2382               	addwfc	(??_verifica_fence_externo+1)& (0+255),f,b
  5055  000586  0103               	movlb	3	; () banked
  5056  000588  5177               	movf	verifica_fence_externo@i& (0+255),w,b
  5057  00058A  0D01               	mullw	1
  5058  00058C  50F3               	movf	prodl,w,c
  5059  00058E  0100               	movlb	0	; () banked
  5060  000590  2581               	addwf	??_verifica_fence_externo& (0+255),w,b
  5061  000592  6ED9               	movwf	fsr2l,c
  5062  000594  50F4               	movf	prodh,w,c
  5063  000596  2182               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  5064  000598  6EDA               	movwf	fsr2h,c
  5065  00059A  0103               	movlb	3	; () banked
  5066  00059C  5176               	movf	verifica_fence_externo@j& (0+255),w,b
  5067  00059E  0D01               	mullw	1
  5068  0005A0  0E26               	movlw	38
  5069  0005A2  26F3               	addwf	prodl,f,c
  5070  0005A4  0E00               	movlw	0
  5071  0005A6  22F4               	addwfc	prodh,f,c
  5072  0005A8  0E00               	movlw	low _poligono_ext
  5073  0005AA  0100               	movlb	0	; () banked
  5074  0005AC  6F83               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  5075  0005AE  0E02               	movlw	high _poligono_ext
  5076  0005B0  6F84               	movwf	(??_verifica_fence_externo+3)& (0+255),b
  5077  0005B2  50F3               	movf	prodl,w,c
  5078  0005B4  2783               	addwf	(??_verifica_fence_externo+2)& (0+255),f,b
  5079  0005B6  50F4               	movf	prodh,w,c
  5080  0005B8  2384               	addwfc	(??_verifica_fence_externo+3)& (0+255),f,b
  5081  0005BA  0103               	movlb	3	; () banked
  5082  0005BC  5178               	movf	verifica_fence_externo@point& (0+255),w,b
  5083  0005BE  0D40               	mullw	64
  5084  0005C0  50F3               	movf	prodl,w,c
  5085  0005C2  0100               	movlb	0	; () banked
  5086  0005C4  2583               	addwf	(??_verifica_fence_externo+2)& (0+255),w,b
  5087  0005C6  6EE1               	movwf	fsr1l,c
  5088  0005C8  50F4               	movf	prodh,w,c
  5089  0005CA  2184               	addwfc	(??_verifica_fence_externo+3)& (0+255),w,b
  5090  0005CC  6EE2               	movwf	fsr1h,c
  5091  0005CE  CFDF FFE7          	movff	indf2,indf1
  5092                           
  5093                           ;main.c: 402: poligono_ext[point].point_long_min[j] = temp_buff_long[i];
  5094  0005D2  0103               	movlb	3	; () banked
  5095  0005D4  5177               	movf	verifica_fence_externo@i& (0+255),w,b
  5096  0005D6  0D01               	mullw	1
  5097  0005D8  0E63               	movlw	low verifica_fence_externo@temp_buff_long
  5098  0005DA  24F3               	addwf	prodl,w,c
  5099  0005DC  6ED9               	movwf	fsr2l,c
  5100  0005DE  0E03               	movlw	high verifica_fence_externo@temp_buff_long
  5101  0005E0  20F4               	addwfc	prodh,w,c
  5102  0005E2  6EDA               	movwf	fsr2h,c
  5103  0005E4  5176               	movf	verifica_fence_externo@j& (0+255),w,b
  5104  0005E6  0D01               	mullw	1
  5105  0005E8  0E32               	movlw	50
  5106  0005EA  26F3               	addwf	prodl,f,c
  5107  0005EC  0E00               	movlw	0
  5108  0005EE  22F4               	addwfc	prodh,f,c
  5109  0005F0  0E00               	movlw	low _poligono_ext
  5110  0005F2  0100               	movlb	0	; () banked
  5111  0005F4  6F81               	movwf	??_verifica_fence_externo& (0+255),b
  5112  0005F6  0E02               	movlw	high _poligono_ext
  5113  0005F8  6F82               	movwf	(??_verifica_fence_externo+1)& (0+255),b
  5114  0005FA  50F3               	movf	prodl,w,c
  5115  0005FC  2781               	addwf	??_verifica_fence_externo& (0+255),f,b
  5116  0005FE  50F4               	movf	prodh,w,c
  5117  000600  2382               	addwfc	(??_verifica_fence_externo+1)& (0+255),f,b
  5118  000602  0103               	movlb	3	; () banked
  5119  000604  5178               	movf	verifica_fence_externo@point& (0+255),w,b
  5120  000606  0D40               	mullw	64
  5121  000608  50F3               	movf	prodl,w,c
  5122  00060A  0100               	movlb	0	; () banked
  5123  00060C  2581               	addwf	??_verifica_fence_externo& (0+255),w,b
  5124  00060E  6EE1               	movwf	fsr1l,c
  5125  000610  50F4               	movf	prodh,w,c
  5126  000612  2182               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  5127  000614  6EE2               	movwf	fsr1h,c
  5128  000616  CFDF FFE7          	movff	indf2,indf1
  5129                           
  5130                           ; BSR set to: 0
  5131                           ;main.c: 403: i++;
  5132  00061A  0103               	movlb	3	; () banked
  5133  00061C  2B77               	incf	verifica_fence_externo@i& (0+255),f,b
  5134                           
  5135                           ; BSR set to: 3
  5136  00061E  2B76               	incf	verifica_fence_externo@j& (0+255),f,b
  5137  000620  D7A3               	goto	l11904
  5138  000622                     l168:
  5139                           
  5140                           ; BSR set to: 3
  5141                           ;main.c: 407: else
  5142                           ;main.c: 408: {
  5143                           ;main.c: 409: i = 11;
  5144                           
  5145                           ; BSR set to: 3
  5146  000622  0E0B               	movlw	11
  5147  000624  6F77               	movwf	verifica_fence_externo@i& (0+255),b
  5148  000626                     l174:
  5149                           
  5150                           ; BSR set to: 3
  5151  000626  0103               	movlb	3	; () banked
  5152  000628  2B77               	incf	verifica_fence_externo@i& (0+255),f,b
  5153  00062A  D76F               	goto	l11892
  5154  00062C                     u15980:
  5155                           
  5156                           ; BSR set to: 3
  5157                           ;main.c: 410: }
  5158                           ;main.c: 412: }
  5159                           ;main.c: 413: poligono_ext[point].diff_lat_min = (atoi(poligono_ext[point].fence_lat_min
      +                          )) - (atoi(poligono_ext[point].point_lat_min));
  5160                           
  5161                           ; BSR set to: 3
  5162  00062C  5178               	movf	verifica_fence_externo@point& (0+255),w,b
  5163  00062E  0D40               	mullw	64
  5164  000630  0E20               	movlw	32
  5165  000632  26F3               	addwf	prodl,f,c
  5166  000634  0E00               	movlw	0
  5167  000636  22F4               	addwfc	prodh,f,c
  5168  000638  0E00               	movlw	low _poligono_ext
  5169  00063A  24F3               	addwf	prodl,w,c
  5170  00063C  0100               	movlb	0	; () banked
  5171  00063E  6F66               	movwf	atoi@s& (0+255),b
  5172  000640  0E02               	movlw	high _poligono_ext
  5173  000642  20F4               	addwfc	prodh,w,c
  5174  000644  6F67               	movwf	(atoi@s+1)& (0+255),b
  5175  000646  EC78  F020         	call	_atoi	;wreg free
  5176  00064A  C066  F081         	movff	?_atoi,??_verifica_fence_externo
  5177  00064E  C067  F082         	movff	?_atoi+1,??_verifica_fence_externo+1
  5178  000652  0103               	movlb	3	; () banked
  5179  000654  5178               	movf	verifica_fence_externo@point& (0+255),w,b
  5180  000656  0D40               	mullw	64
  5181  000658  0E2C               	movlw	44
  5182  00065A  26F3               	addwf	prodl,f,c
  5183  00065C  0E00               	movlw	0
  5184  00065E  22F4               	addwfc	prodh,f,c
  5185  000660  0E00               	movlw	low _poligono_ext
  5186  000662  24F3               	addwf	prodl,w,c
  5187  000664  0100               	movlb	0	; () banked
  5188  000666  6F66               	movwf	atoi@s& (0+255),b
  5189  000668  0E02               	movlw	high _poligono_ext
  5190  00066A  20F4               	addwfc	prodh,w,c
  5191  00066C  6F67               	movwf	(atoi@s+1)& (0+255),b
  5192  00066E  EC78  F020         	call	_atoi	;wreg free
  5193  000672  0100               	movlb	0	; () banked
  5194  000674  1F66               	comf	?_atoi& (0+255),f,b
  5195  000676  1F67               	comf	(?_atoi+1)& (0+255),f,b
  5196  000678  4B66               	infsnz	?_atoi& (0+255),f,b
  5197  00067A  2B67               	incf	(?_atoi+1)& (0+255),f,b
  5198  00067C  5166               	movf	?_atoi& (0+255),w,b
  5199  00067E  2581               	addwf	??_verifica_fence_externo& (0+255),w,b
  5200  000680  6F83               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  5201  000682  5167               	movf	(?_atoi+1)& (0+255),w,b
  5202  000684  2182               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  5203  000686  6F84               	movwf	(??_verifica_fence_externo+3)& (0+255),b
  5204  000688  6B85               	clrf	(??_verifica_fence_externo+4)& (0+255),b
  5205  00068A  BF84               	btfsc	(??_verifica_fence_externo+3)& (0+255),7,b
  5206  00068C  0785               	decf	(??_verifica_fence_externo+4)& (0+255),f,b
  5207  00068E  5185               	movf	(??_verifica_fence_externo+4)& (0+255),w,b
  5208  000690  6F86               	movwf	(??_verifica_fence_externo+5)& (0+255),b
  5209  000692  0103               	movlb	3	; () banked
  5210  000694  5178               	movf	verifica_fence_externo@point& (0+255),w,b
  5211  000696  0D40               	mullw	64
  5212  000698  0E38               	movlw	56
  5213  00069A  26F3               	addwf	prodl,f,c
  5214  00069C  0E00               	movlw	0
  5215  00069E  22F4               	addwfc	prodh,f,c
  5216  0006A0  0E00               	movlw	low _poligono_ext
  5217  0006A2  24F3               	addwf	prodl,w,c
  5218  0006A4  6ED9               	movwf	fsr2l,c
  5219  0006A6  0E02               	movlw	high _poligono_ext
  5220  0006A8  20F4               	addwfc	prodh,w,c
  5221  0006AA  6EDA               	movwf	fsr2h,c
  5222  0006AC  C083  FFDE         	movff	??_verifica_fence_externo+2,postinc2
  5223  0006B0  C084  FFDE         	movff	??_verifica_fence_externo+3,postinc2
  5224  0006B4  C085  FFDE         	movff	??_verifica_fence_externo+4,postinc2
  5225  0006B8  C086  FFDE         	movff	??_verifica_fence_externo+5,postinc2
  5226                           
  5227                           ;main.c: 414: poligono_ext[point].diff_long_min = (atoi(poligono_ext[point].fence_long_m
      +                          in)) - (atoi(poligono_ext[point].point_long_min));
  5228  0006BC  5178               	movf	verifica_fence_externo@point& (0+255),w,b
  5229  0006BE  0D40               	mullw	64
  5230  0006C0  0E26               	movlw	38
  5231  0006C2  26F3               	addwf	prodl,f,c
  5232  0006C4  0E00               	movlw	0
  5233  0006C6  22F4               	addwfc	prodh,f,c
  5234  0006C8  0E00               	movlw	low _poligono_ext
  5235  0006CA  24F3               	addwf	prodl,w,c
  5236  0006CC  0100               	movlb	0	; () banked
  5237  0006CE  6F66               	movwf	atoi@s& (0+255),b
  5238  0006D0  0E02               	movlw	high _poligono_ext
  5239  0006D2  20F4               	addwfc	prodh,w,c
  5240  0006D4  6F67               	movwf	(atoi@s+1)& (0+255),b
  5241  0006D6  EC78  F020         	call	_atoi	;wreg free
  5242  0006DA  C066  F081         	movff	?_atoi,??_verifica_fence_externo
  5243  0006DE  C067  F082         	movff	?_atoi+1,??_verifica_fence_externo+1
  5244  0006E2  0103               	movlb	3	; () banked
  5245  0006E4  5178               	movf	verifica_fence_externo@point& (0+255),w,b
  5246  0006E6  0D40               	mullw	64
  5247  0006E8  0E32               	movlw	50
  5248  0006EA  26F3               	addwf	prodl,f,c
  5249  0006EC  0E00               	movlw	0
  5250  0006EE  22F4               	addwfc	prodh,f,c
  5251  0006F0  0E00               	movlw	low _poligono_ext
  5252  0006F2  24F3               	addwf	prodl,w,c
  5253  0006F4  0100               	movlb	0	; () banked
  5254  0006F6  6F66               	movwf	atoi@s& (0+255),b
  5255  0006F8  0E02               	movlw	high _poligono_ext
  5256  0006FA  20F4               	addwfc	prodh,w,c
  5257  0006FC  6F67               	movwf	(atoi@s+1)& (0+255),b
  5258  0006FE  EC78  F020         	call	_atoi	;wreg free
  5259  000702  0100               	movlb	0	; () banked
  5260  000704  1F66               	comf	?_atoi& (0+255),f,b
  5261  000706  1F67               	comf	(?_atoi+1)& (0+255),f,b
  5262  000708  4B66               	infsnz	?_atoi& (0+255),f,b
  5263  00070A  2B67               	incf	(?_atoi+1)& (0+255),f,b
  5264  00070C  5166               	movf	?_atoi& (0+255),w,b
  5265  00070E  2581               	addwf	??_verifica_fence_externo& (0+255),w,b
  5266  000710  6F83               	movwf	(??_verifica_fence_externo+2)& (0+255),b
  5267  000712  5167               	movf	(?_atoi+1)& (0+255),w,b
  5268  000714  2182               	addwfc	(??_verifica_fence_externo+1)& (0+255),w,b
  5269  000716  6F84               	movwf	(??_verifica_fence_externo+3)& (0+255),b
  5270  000718  6B85               	clrf	(??_verifica_fence_externo+4)& (0+255),b
  5271  00071A  BF84               	btfsc	(??_verifica_fence_externo+3)& (0+255),7,b
  5272  00071C  0785               	decf	(??_verifica_fence_externo+4)& (0+255),f,b
  5273  00071E  5185               	movf	(??_verifica_fence_externo+4)& (0+255),w,b
  5274  000720  6F86               	movwf	(??_verifica_fence_externo+5)& (0+255),b
  5275  000722  0103               	movlb	3	; () banked
  5276  000724  5178               	movf	verifica_fence_externo@point& (0+255),w,b
  5277  000726  0D40               	mullw	64
  5278  000728  0E3C               	movlw	60
  5279  00072A  26F3               	addwf	prodl,f,c
  5280  00072C  0E00               	movlw	0
  5281  00072E  22F4               	addwfc	prodh,f,c
  5282  000730  0E00               	movlw	low _poligono_ext
  5283  000732  24F3               	addwf	prodl,w,c
  5284  000734  6ED9               	movwf	fsr2l,c
  5285  000736  0E02               	movlw	high _poligono_ext
  5286  000738  20F4               	addwfc	prodh,w,c
  5287  00073A  6EDA               	movwf	fsr2h,c
  5288  00073C  C083  FFDE         	movff	??_verifica_fence_externo+2,postinc2
  5289  000740  C084  FFDE         	movff	??_verifica_fence_externo+3,postinc2
  5290  000744  C085  FFDE         	movff	??_verifica_fence_externo+4,postinc2
  5291  000748  C086  FFDE         	movff	??_verifica_fence_externo+5,postinc2
  5292                           
  5293                           ; BSR set to: 3
  5294                           ;main.c: 415: point++;
  5295  00074C  2B78               	incf	verifica_fence_externo@point& (0+255),f,b
  5296  00074E                     l155:
  5297                           
  5298                           ; BSR set to: 3
  5299                           
  5300                           ; BSR set to: 3
  5301  00074E  0E03               	movlw	3
  5302  000750  6578               	cpfsgt	verifica_fence_externo@point& (0+255),b
  5303  000752  D646               	goto	l156
  5304  000754  D04E               	goto	l176
  5305  000756                     
  5306                           ; BSR set to: 3
  5307                           ;main.c: 432: if(
  5308                           ;main.c: 433: ((poligono_ext[0].diff_long_min >= 0 &&
  5309                           ;main.c: 434: poligono_ext[2].diff_long_min <= 0) &&
  5310                           ;main.c: 436: (poligono_ext[0].diff_long_deg >= 0 &&
  5311                           ;main.c: 437: poligono_ext[2].diff_long_deg <= 0)))
  5312                           
  5313                           ; BSR set to: 3
  5314  000756  0102               	movlb	2	; () banked
  5315  000758  BF3F               	btfsc	(_poligono_ext+63)& (0+255),7,b
  5316  00075A  D02C               	goto	l188
  5317                           
  5318                           ; BSR set to: 2
  5319  00075C  BFBF               	btfsc	(_poligono_ext+191)& (0+255),7,b
  5320  00075E  D007               	goto	u16010
  5321  000760  51BF               	movf	(_poligono_ext+191)& (0+255),w,b
  5322  000762  11BE               	iorwf	(_poligono_ext+190)& (0+255),w,b
  5323  000764  11BD               	iorwf	(_poligono_ext+189)& (0+255),w,b
  5324  000766  E126               	bnz	l11956
  5325  000768  05BC               	decf	(_poligono_ext+188)& (0+255),w,b
  5326  00076A  B0D8               	btfsc	status,0,c
  5327  00076C  D023               	goto	l188
  5328  00076E                     u16010:
  5329                           
  5330                           ; BSR set to: 2
  5331  00076E  BF1F               	btfsc	(_poligono_ext+31)& (0+255),7,b
  5332  000770  D021               	goto	l188
  5333                           
  5334                           ; BSR set to: 2
  5335  000772  BF9F               	btfsc	(_poligono_ext+159)& (0+255),7,b
  5336  000774  D038               	goto	u16150
  5337  000776  519F               	movf	(_poligono_ext+159)& (0+255),w,b
  5338  000778  119E               	iorwf	(_poligono_ext+158)& (0+255),w,b
  5339  00077A  119D               	iorwf	(_poligono_ext+157)& (0+255),w,b
  5340  00077C  E11B               	bnz	l11956
  5341  00077E  059C               	decf	(_poligono_ext+156)& (0+255),w,b
  5342  000780  A0D8               	btfss	status,0,c
  5343  000782  D031               	goto	u16150
  5344                           
  5345                           ; BSR set to: 0
  5346                           
  5347                           ;main.c: 440: }
  5348                           
  5349                           ; BSR set to: 2
  5350                           ;main.c: 438: {
  5351                           ;main.c: 439: flag[0].point = 0;
  5352  000784  D017               	goto	l188
  5353  000786                     
  5354                           ;main.c: 457: if(
  5355                           ;main.c: 458: (poligono_ext[0].diff_long_min <= 0 &&
  5356                           ;main.c: 459: poligono_ext[2].diff_long_min >= 0 ) &&
  5357                           ;main.c: 460: (poligono_ext[0].diff_lat_deg <= 0 &&
  5358                           ;main.c: 461: poligono_ext[2].diff_lat_deg >= 0))
  5359                           
  5360                           ; BSR set to: 0
  5361  000786  0102               	movlb	2	; () banked
  5362  000788  BF3F               	btfsc	(_poligono_ext+63)& (0+255),7,b
  5363  00078A  D007               	goto	u16080
  5364  00078C  513F               	movf	(_poligono_ext+63)& (0+255),w,b
  5365  00078E  113E               	iorwf	(_poligono_ext+62)& (0+255),w,b
  5366  000790  113D               	iorwf	(_poligono_ext+61)& (0+255),w,b
  5367  000792  E110               	bnz	l11956
  5368  000794  053C               	decf	(_poligono_ext+60)& (0+255),w,b
  5369  000796  B0D8               	btfsc	status,0,c
  5370  000798  D00D               	goto	l188
  5371  00079A                     u16080:
  5372                           
  5373                           ; BSR set to: 2
  5374  00079A  BFBF               	btfsc	(_poligono_ext+191)& (0+255),7,b
  5375  00079C  D00B               	goto	l188
  5376                           
  5377                           ; BSR set to: 2
  5378  00079E  BF1B               	btfsc	(_poligono_ext+27)& (0+255),7,b
  5379  0007A0  D007               	goto	u16100
  5380  0007A2  511B               	movf	(_poligono_ext+27)& (0+255),w,b
  5381  0007A4  111A               	iorwf	(_poligono_ext+26)& (0+255),w,b
  5382  0007A6  1119               	iorwf	(_poligono_ext+25)& (0+255),w,b
  5383  0007A8  E105               	bnz	l11956
  5384  0007AA  0518               	decf	(_poligono_ext+24)& (0+255),w,b
  5385  0007AC  B0D8               	btfsc	status,0,c
  5386  0007AE  D002               	goto	l188
  5387  0007B0                     u16100:
  5388                           
  5389                           ; BSR set to: 2
  5390  0007B0  AF9B               	btfss	(_poligono_ext+155)& (0+255),7,b
  5391  0007B2  D019               	goto	u16150
  5392  0007B4                     l188:
  5393  0007B4                     l11956:
  5394                           
  5395                           ;main.c: 465: else if((poligono_ext[0].diff_long_min == 0 ||
  5396                           ;main.c: 466: poligono_ext[2].diff_long_min == 0) &&
  5397                           ;main.c: 467: (poligono_ext[0].diff_long_deg == 0 ||
  5398                           ;main.c: 468: poligono_ext[2].diff_long_deg == 0))
  5399  0007B4  0102               	movlb	2	; () banked
  5400  0007B6  513C               	movf	(_poligono_ext+60)& (0+255),w,b
  5401  0007B8  113D               	iorwf	(_poligono_ext+61)& (0+255),w,b
  5402  0007BA  113E               	iorwf	(_poligono_ext+62)& (0+255),w,b
  5403  0007BC  113F               	iorwf	(_poligono_ext+63)& (0+255),w,b
  5404  0007BE  B4D8               	btfsc	status,2,c
  5405  0007C0  D006               	goto	u16130
  5406                           
  5407                           ; BSR set to: 2
  5408  0007C2  51BC               	movf	(_poligono_ext+188)& (0+255),w,b
  5409  0007C4  11BD               	iorwf	(_poligono_ext+189)& (0+255),w,b
  5410  0007C6  11BE               	iorwf	(_poligono_ext+190)& (0+255),w,b
  5411  0007C8  11BF               	iorwf	(_poligono_ext+191)& (0+255),w,b
  5412  0007CA  A4D8               	btfss	status,2,c
  5413  0007CC  D00F               	goto	l190
  5414  0007CE                     u16130:
  5415                           
  5416                           ; BSR set to: 2
  5417                           
  5418                           ; BSR set to: 2
  5419  0007CE  511C               	movf	(_poligono_ext+28)& (0+255),w,b
  5420  0007D0  111D               	iorwf	(_poligono_ext+29)& (0+255),w,b
  5421  0007D2  111E               	iorwf	(_poligono_ext+30)& (0+255),w,b
  5422  0007D4  111F               	iorwf	(_poligono_ext+31)& (0+255),w,b
  5423  0007D6  B4D8               	btfsc	status,2,c
  5424  0007D8  D006               	goto	u16150
  5425                           
  5426                           ; BSR set to: 2
  5427  0007DA  519C               	movf	(_poligono_ext+156)& (0+255),w,b
  5428  0007DC  119D               	iorwf	(_poligono_ext+157)& (0+255),w,b
  5429  0007DE  119E               	iorwf	(_poligono_ext+158)& (0+255),w,b
  5430  0007E0  119F               	iorwf	(_poligono_ext+159)& (0+255),w,b
  5431  0007E2  A4D8               	btfss	status,2,c
  5432  0007E4  D003               	goto	l190
  5433  0007E6                     u16150:
  5434                           
  5435                           ; BSR set to: 2
  5436                           ;main.c: 469: {
  5437                           ;main.c: 470: flag[0].point = 0;
  5438  0007E6  0100               	movlb	0	; () banked
  5439  0007E8  91F5               	bcf	_flag& (0+255),0,b
  5440                           
  5441                           ;main.c: 471: }
  5442  0007EA  D057               	goto	l196
  5443  0007EC                     l190:
  5444                           
  5445                           ; BSR set to: 2
  5446                           ;main.c: 472: else
  5447                           ;main.c: 473: {
  5448                           ;main.c: 474: flag[0].point = 1;
  5449  0007EC  0100               	movlb	0	; () banked
  5450  0007EE  81F5               	bsf	_flag& (0+255),0,b
  5451                           
  5452                           ; BSR set to: 0
  5453                           ;main.c: 478: }
  5454                           
  5455                           ; BSR set to: 0
  5456                           ;main.c: 475: }
  5457                           ;main.c: 476: break;
  5458                           
  5459                           ; BSR set to: 0
  5460  0007F0  D054               	goto	l196
  5461  0007F2                     l176:
  5462                           
  5463                           ; BSR set to: 0
  5464  0007F2  0103               	movlb	3	; () banked
  5465  0007F4  5163               	movf	verifica_fence_externo@temp_buff_long& (0+255),w,b
  5466                           
  5467                           ; Switch size 1, requested type "space"
  5468                           ; Number of cases is 1, Range of values is 45 to 45
  5469                           ; switch strategies available:
  5470                           ; Name         Instructions Cycles
  5471                           ; simple_byte            4     3 (average)
  5472                           ;	Chosen strategy is simple_byte
  5473  0007F6  0A2D               	xorlw	45	; case 45
  5474  0007F8  B4D8               	btfsc	status,2,c
  5475  0007FA  D7AD               	goto	l177
  5476  0007FC  D7C4               	goto	l187
  5477  0007FE                     
  5478                           ; BSR set to: 3
  5479                           ;main.c: 484: if(
  5480                           ;main.c: 485: (
  5481                           ;main.c: 486: poligono_ext[0].diff_lat_min <= 0 &&
  5482                           ;main.c: 487: poligono_ext[3].diff_lat_min >= 0) &&
  5483                           ;main.c: 489: (poligono_ext[0].diff_lat_deg <= 0 &&
  5484                           ;main.c: 490: poligono_ext[3].diff_lat_deg >= 0))
  5485                           
  5486                           ; BSR set to: 3
  5487  0007FE  0102               	movlb	2	; () banked
  5488  000800  BF3B               	btfsc	(_poligono_ext+59)& (0+255),7,b
  5489  000802  D007               	goto	u16160
  5490  000804  513B               	movf	(_poligono_ext+59)& (0+255),w,b
  5491  000806  113A               	iorwf	(_poligono_ext+58)& (0+255),w,b
  5492  000808  1139               	iorwf	(_poligono_ext+57)& (0+255),w,b
  5493  00080A  E128               	bnz	l11996
  5494  00080C  0538               	decf	(_poligono_ext+56)& (0+255),w,b
  5495  00080E  B0D8               	btfsc	status,0,c
  5496  000810  D025               	goto	l208
  5497  000812                     u16160:
  5498                           
  5499                           ; BSR set to: 2
  5500  000812  BFFB               	btfsc	(_poligono_ext+251)& (0+255),7,b
  5501  000814  D023               	goto	l208
  5502                           
  5503                           ; BSR set to: 2
  5504  000816  BF1B               	btfsc	(_poligono_ext+27)& (0+255),7,b
  5505  000818  D007               	goto	u16180
  5506  00081A  511B               	movf	(_poligono_ext+27)& (0+255),w,b
  5507  00081C  111A               	iorwf	(_poligono_ext+26)& (0+255),w,b
  5508  00081E  1119               	iorwf	(_poligono_ext+25)& (0+255),w,b
  5509  000820  E11D               	bnz	l11996
  5510  000822  0518               	decf	(_poligono_ext+24)& (0+255),w,b
  5511  000824  B0D8               	btfsc	status,0,c
  5512  000826  D01A               	goto	l208
  5513  000828                     u16180:
  5514                           
  5515                           ; BSR set to: 2
  5516  000828  AFDB               	btfss	(_poligono_ext+219)& (0+255),7,b
  5517  00082A  D031               	goto	u16310
  5518                           
  5519                           ; BSR set to: 0
  5520                           
  5521                           ;main.c: 496: }
  5522                           
  5523                           ; BSR set to: 2
  5524                           ;main.c: 492: {
  5525                           ;main.c: 495: flag[1].point = 0;
  5526  00082C  D017               	goto	l208
  5527  00082E                     
  5528                           ;main.c: 515: if((poligono_ext[0].diff_lat_min >= 0 &&
  5529                           ;main.c: 516: poligono_ext[3].diff_lat_min <= 0 ) &&
  5530                           ;main.c: 519: (poligono_ext[0].diff_lat_deg >= 0 &&
  5531                           ;main.c: 520: poligono_ext[3].diff_lat_deg <= 0)
  5532                           ;main.c: 521: )
  5533                           
  5534                           ; BSR set to: 0
  5535  00082E  0102               	movlb	2	; () banked
  5536  000830  BF3B               	btfsc	(_poligono_ext+59)& (0+255),7,b
  5537  000832  D014               	goto	l208
  5538                           
  5539                           ; BSR set to: 2
  5540  000834  BFFB               	btfsc	(_poligono_ext+251)& (0+255),7,b
  5541  000836  D007               	goto	u16250
  5542  000838  51FB               	movf	(_poligono_ext+251)& (0+255),w,b
  5543  00083A  11FA               	iorwf	(_poligono_ext+250)& (0+255),w,b
  5544  00083C  11F9               	iorwf	(_poligono_ext+249)& (0+255),w,b
  5545  00083E  E10E               	bnz	l11996
  5546  000840  05F8               	decf	(_poligono_ext+248)& (0+255),w,b
  5547  000842  B0D8               	btfsc	status,0,c
  5548  000844  D00B               	goto	l208
  5549  000846                     u16250:
  5550                           
  5551                           ; BSR set to: 2
  5552  000846  BF1B               	btfsc	(_poligono_ext+27)& (0+255),7,b
  5553  000848  D009               	goto	l208
  5554                           
  5555                           ; BSR set to: 2
  5556  00084A  BFDB               	btfsc	(_poligono_ext+219)& (0+255),7,b
  5557  00084C  D020               	goto	u16310
  5558  00084E  51DB               	movf	(_poligono_ext+219)& (0+255),w,b
  5559  000850  11DA               	iorwf	(_poligono_ext+218)& (0+255),w,b
  5560  000852  11D9               	iorwf	(_poligono_ext+217)& (0+255),w,b
  5561  000854  E103               	bnz	l11996
  5562  000856  05D8               	decf	(_poligono_ext+216)& (0+255),w,b
  5563  000858  A0D8               	btfss	status,0,c
  5564  00085A  D019               	goto	u16310
  5565  00085C                     l208:
  5566  00085C                     l11996:
  5567                           
  5568                           ;main.c: 525: else if((poligono_ext[0].diff_lat_min == 0 ||
  5569                           ;main.c: 526: poligono_ext[3].diff_lat_min == 0) &&
  5570                           ;main.c: 528: (poligono_ext[0].diff_lat_deg == 0 ||
  5571                           ;main.c: 529: poligono_ext[3].diff_lat_deg == 0))
  5572  00085C  0102               	movlb	2	; () banked
  5573  00085E  5138               	movf	(_poligono_ext+56)& (0+255),w,b
  5574  000860  1139               	iorwf	(_poligono_ext+57)& (0+255),w,b
  5575  000862  113A               	iorwf	(_poligono_ext+58)& (0+255),w,b
  5576  000864  113B               	iorwf	(_poligono_ext+59)& (0+255),w,b
  5577  000866  B4D8               	btfsc	status,2,c
  5578  000868  D006               	goto	u16290
  5579                           
  5580                           ; BSR set to: 2
  5581  00086A  51F8               	movf	(_poligono_ext+248)& (0+255),w,b
  5582  00086C  11F9               	iorwf	(_poligono_ext+249)& (0+255),w,b
  5583  00086E  11FA               	iorwf	(_poligono_ext+250)& (0+255),w,b
  5584  000870  11FB               	iorwf	(_poligono_ext+251)& (0+255),w,b
  5585  000872  A4D8               	btfss	status,2,c
  5586  000874  D00F               	goto	l210
  5587  000876                     u16290:
  5588                           
  5589                           ; BSR set to: 2
  5590                           
  5591                           ; BSR set to: 2
  5592  000876  5118               	movf	(_poligono_ext+24)& (0+255),w,b
  5593  000878  1119               	iorwf	(_poligono_ext+25)& (0+255),w,b
  5594  00087A  111A               	iorwf	(_poligono_ext+26)& (0+255),w,b
  5595  00087C  111B               	iorwf	(_poligono_ext+27)& (0+255),w,b
  5596  00087E  B4D8               	btfsc	status,2,c
  5597  000880  D006               	goto	u16310
  5598                           
  5599                           ; BSR set to: 2
  5600  000882  51D8               	movf	(_poligono_ext+216)& (0+255),w,b
  5601  000884  11D9               	iorwf	(_poligono_ext+217)& (0+255),w,b
  5602  000886  11DA               	iorwf	(_poligono_ext+218)& (0+255),w,b
  5603  000888  11DB               	iorwf	(_poligono_ext+219)& (0+255),w,b
  5604  00088A  A4D8               	btfss	status,2,c
  5605  00088C  D003               	goto	l210
  5606  00088E                     u16310:
  5607                           
  5608                           ; BSR set to: 2
  5609                           ;main.c: 530: {
  5610                           ;main.c: 531: flag[1].point = 0;
  5611  00088E  0100               	movlb	0	; () banked
  5612  000890  91F6               	bcf	(_flag+1)& (0+255),0,b
  5613                           
  5614                           ;main.c: 532: }
  5615  000892  D009               	goto	l206
  5616  000894                     l210:
  5617                           
  5618                           ; BSR set to: 2
  5619                           ;main.c: 533: else
  5620                           ;main.c: 534: {
  5621                           ;main.c: 537: flag[1].point = 1;
  5622  000894  0100               	movlb	0	; () banked
  5623  000896  81F6               	bsf	(_flag+1)& (0+255),0,b
  5624                           
  5625                           ; BSR set to: 0
  5626                           ;main.c: 541: }
  5627                           
  5628                           ; BSR set to: 0
  5629                           ;main.c: 538: }
  5630                           ;main.c: 539: break;
  5631                           
  5632                           ; BSR set to: 0
  5633  000898  D006               	goto	l206
  5634  00089A                     l196:
  5635                           
  5636                           ; BSR set to: 0
  5637  00089A  0103               	movlb	3	; () banked
  5638  00089C  5158               	movf	verifica_fence_externo@temp_buff_lat& (0+255),w,b
  5639                           
  5640                           ; Switch size 1, requested type "space"
  5641                           ; Number of cases is 1, Range of values is 45 to 45
  5642                           ; switch strategies available:
  5643                           ; Name         Instructions Cycles
  5644                           ; simple_byte            4     3 (average)
  5645                           ;	Chosen strategy is simple_byte
  5646  00089E  0A2D               	xorlw	45	; case 45
  5647  0008A0  B4D8               	btfsc	status,2,c
  5648  0008A2  D7AD               	goto	l197
  5649  0008A4  D7C4               	goto	l207
  5650  0008A6                     l206:
  5651                           
  5652                           ; BSR set to: 0
  5653                           ;main.c: 544: if(flag[0].point || flag[1].point)
  5654  0008A6  B1F5               	btfsc	_flag& (0+255),0,b
  5655  0008A8  D002               	goto	u16330
  5656                           
  5657                           ; BSR set to: 0
  5658  0008AA  A1F6               	btfss	(_flag+1)& (0+255),0,b
  5659  0008AC  0012               	return	
  5660  0008AE                     u16330:
  5661                           
  5662                           ; BSR set to: 0
  5663                           ;main.c: 545: {
  5664                           ;main.c: 546: flag[2].point = 1;
  5665  0008AE  81F7               	bsf	(_flag+2)& (0+255),0,b
  5666                           
  5667                           ; BSR set to: 0
  5668                           ;main.c: 547: posicao_cursor_lcd(1,0);
  5669  0008B0  0E00               	movlw	0
  5670  0008B2  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  5671  0008B4  0E01               	movlw	1
  5672  0008B6  ECE4  F025         	call	_posicao_cursor_lcd
  5673                           
  5674                           ;main.c: 548: escreve_frase_ram_lcd("REGIAO NEGADA");
  5675  0008BA  0EEE               	movlw	low STR_1
  5676  0008BC  0100               	movlb	0	; () banked
  5677  0008BE  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  5678  0008C0  0E61               	movlw	high STR_1
  5679  0008C2  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  5680  0008C4  EC3F  F028         	call	_escreve_frase_ram_lcd	;wreg free
  5681                           
  5682                           ;main.c: 549: posicao_cursor_lcd(2,14);
  5683  0008C8  0E0E               	movlw	14
  5684  0008CA  0100               	movlb	0	; () banked
  5685  0008CC  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  5686  0008CE  0E02               	movlw	2
  5687  0008D0  ECE4  F025         	call	_posicao_cursor_lcd
  5688                           
  5689                           ;main.c: 550: escreve_inteiro_lcd(flag[0].point);
  5690  0008D4  0100               	movlb	0	; () banked
  5691  0008D6  A1F5               	btfss	_flag& (0+255),0,b
  5692  0008D8  D003               	goto	u16340
  5693  0008DA  6B81               	clrf	??_verifica_fence_externo& (0+255),b
  5694  0008DC  2B81               	incf	??_verifica_fence_externo& (0+255),f,b
  5695  0008DE  D002               	goto	u16348
  5696  0008E0                     u16340:
  5697  0008E0  0100               	movlb	0	; () banked
  5698  0008E2  6B81               	clrf	??_verifica_fence_externo& (0+255),b
  5699  0008E4                     u16348:
  5700  0008E4  5181               	movf	??_verifica_fence_externo& (0+255),w,b
  5701  0008E6  6F78               	movwf	escreve_inteiro_lcd@valor& (0+255),b
  5702  0008E8  6B79               	clrf	(escreve_inteiro_lcd@valor+1)& (0+255),b
  5703  0008EA  ECCF  F029         	call	_escreve_inteiro_lcd	;wreg free
  5704                           
  5705                           ;main.c: 551: posicao_cursor_lcd(2,15);
  5706  0008EE  0E0F               	movlw	15
  5707  0008F0  0100               	movlb	0	; () banked
  5708  0008F2  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  5709  0008F4  0E02               	movlw	2
  5710  0008F6  ECE4  F025         	call	_posicao_cursor_lcd
  5711                           
  5712                           ;main.c: 552: escreve_inteiro_lcd(flag[1].point);
  5713  0008FA  0100               	movlb	0	; () banked
  5714  0008FC  A1F6               	btfss	(_flag+1)& (0+255),0,b
  5715  0008FE  D003               	goto	u16350
  5716  000900  6B81               	clrf	??_verifica_fence_externo& (0+255),b
  5717  000902  2B81               	incf	??_verifica_fence_externo& (0+255),f,b
  5718  000904  D002               	goto	u16358
  5719  000906                     u16350:
  5720  000906  0100               	movlb	0	; () banked
  5721  000908  6B81               	clrf	??_verifica_fence_externo& (0+255),b
  5722  00090A                     u16358:
  5723  00090A  5181               	movf	??_verifica_fence_externo& (0+255),w,b
  5724  00090C  6F78               	movwf	escreve_inteiro_lcd@valor& (0+255),b
  5725  00090E  6B79               	clrf	(escreve_inteiro_lcd@valor+1)& (0+255),b
  5726  000910  ECCF  F029         	call	_escreve_inteiro_lcd	;wreg free
  5727  000914  0012               	return	
  5728  000916                     __end_of_verifica_fence_externo:
  5729                           	opt stack 0
  5730                           tosu	equ	0xFFF
  5731                           tosh	equ	0xFFE
  5732                           tosl	equ	0xFFD
  5733                           pclath	equ	0xFFA
  5734                           tblptru	equ	0xFF8
  5735                           tblptrh	equ	0xFF7
  5736                           tblptrl	equ	0xFF6
  5737                           tablat	equ	0xFF5
  5738                           prodh	equ	0xFF4
  5739                           prodl	equ	0xFF3
  5740                           intcon	equ	0xFF2
  5741                           intcon2	equ	0xFF1
  5742                           intcon3	equ	0xFF0
  5743                           postinc0	equ	0xFEE
  5744                           wreg	equ	0xFE8
  5745                           indf1	equ	0xFE7
  5746                           postinc1	equ	0xFE6
  5747                           postdec1	equ	0xFE5
  5748                           plusw1	equ	0xFE3
  5749                           fsr1h	equ	0xFE2
  5750                           fsr1l	equ	0xFE1
  5751                           indf2	equ	0xFDF
  5752                           postinc2	equ	0xFDE
  5753                           postdec2	equ	0xFDD
  5754                           plusw2	equ	0xFDB
  5755                           fsr2h	equ	0xFDA
  5756                           fsr2l	equ	0xFD9
  5757                           status	equ	0xFD8
  5758                           
  5759 ;; *************** function _escreve_inteiro_lcd *****************
  5760 ;; Defined at:
  5761 ;;		line 376 in file "bibliotecas/display_lcd.c"
  5762 ;; Parameters:    Size  Location     Type
  5763 ;;  valor           2   24[BANK0 ] int 
  5764 ;; Auto vars:     Size  Location     Type
  5765 ;;  texto           7   26[BANK0 ] unsigned char [7]
  5766 ;; Return value:  Size  Location     Type
  5767 ;;                  1    wreg      void 
  5768 ;; Registers used:
  5769 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5770 ;; Tracked objects:
  5771 ;;		On entry : 0/0
  5772 ;;		On exit  : 0/0
  5773 ;;		Unchanged: 0/0
  5774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5775 ;;      Params:         0       2       0       0       0       0       0       0       0
  5776 ;;      Locals:         0       7       0       0       0       0       0       0       0
  5777 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5778 ;;      Totals:         0       9       0       0       0       0       0       0       0
  5779 ;;Total ram usage:        9 bytes
  5780 ;; Hardware stack levels used:    1
  5781 ;; Hardware stack levels required when called:    6
  5782 ;; This function calls:
  5783 ;;		_escreve_frase_ram_lcd
  5784 ;;		_itoa
  5785 ;; This function is called by:
  5786 ;;		_verifica_fence_externo
  5787 ;;		_escreve_float_lcd
  5788 ;; This function uses a non-reentrant model
  5789 ;;
  5790                           
  5791                           	psect	text16
  5792  00539E                     __ptext16:
  5793                           	opt stack 0
  5794  00539E                     _escreve_inteiro_lcd:
  5795                           	opt stack 22
  5796                           
  5797                           ;display_lcd.c: 378: char texto[7] = "000000";
  5798                           
  5799                           ;incstack = 0
  5800  00539E  EE21  F0BE         	lfsr	2,escreve_inteiro_lcd@F3966
  5801  0053A2  EE10  F07A         	lfsr	1,escreve_inteiro_lcd@texto
  5802  0053A6  0E06               	movlw	6
  5803  0053A8                     u15631:
  5804  0053A8  CFDB FFE3          	movff	plusw2,plusw1
  5805  0053AC  06E8               	decf	wreg,f,c
  5806  0053AE  E2FC               	bc	u15631
  5807                           
  5808                           ;display_lcd.c: 379: itoa(texto,valor, 10);
  5809  0053B0  0E7A               	movlw	low escreve_inteiro_lcd@texto
  5810  0053B2  0100               	movlb	0	; () banked
  5811  0053B4  6F70               	movwf	itoa@buf& (0+255),b
  5812  0053B6  0E00               	movlw	high escreve_inteiro_lcd@texto
  5813  0053B8  6F71               	movwf	(itoa@buf+1)& (0+255),b
  5814  0053BA  C078  F072         	movff	escreve_inteiro_lcd@valor,itoa@val
  5815  0053BE  C079  F073         	movff	escreve_inteiro_lcd@valor+1,itoa@val+1
  5816  0053C2  0E00               	movlw	0
  5817  0053C4  6F75               	movwf	(itoa@base+1)& (0+255),b
  5818  0053C6  0E0A               	movlw	10
  5819  0053C8  6F74               	movwf	itoa@base& (0+255),b
  5820  0053CA  EC48  F029         	call	_itoa	;wreg free
  5821                           
  5822                           ;display_lcd.c: 380: escreve_frase_ram_lcd(texto);
  5823  0053CE  0E7A               	movlw	low escreve_inteiro_lcd@texto
  5824  0053D0  0100               	movlb	0	; () banked
  5825  0053D2  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  5826  0053D4  0E00               	movlw	high escreve_inteiro_lcd@texto
  5827  0053D6  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  5828  0053D8  EC3F  F028         	call	_escreve_frase_ram_lcd	;wreg free
  5829  0053DC  0012               	return		;funcret
  5830  0053DE                     __end_of_escreve_inteiro_lcd:
  5831                           	opt stack 0
  5832                           tosu	equ	0xFFF
  5833                           tosh	equ	0xFFE
  5834                           tosl	equ	0xFFD
  5835                           pclath	equ	0xFFA
  5836                           tblptru	equ	0xFF8
  5837                           tblptrh	equ	0xFF7
  5838                           tblptrl	equ	0xFF6
  5839                           tablat	equ	0xFF5
  5840                           prodh	equ	0xFF4
  5841                           prodl	equ	0xFF3
  5842                           intcon	equ	0xFF2
  5843                           intcon2	equ	0xFF1
  5844                           intcon3	equ	0xFF0
  5845                           postinc0	equ	0xFEE
  5846                           wreg	equ	0xFE8
  5847                           indf1	equ	0xFE7
  5848                           postinc1	equ	0xFE6
  5849                           postdec1	equ	0xFE5
  5850                           plusw1	equ	0xFE3
  5851                           fsr1h	equ	0xFE2
  5852                           fsr1l	equ	0xFE1
  5853                           indf2	equ	0xFDF
  5854                           postinc2	equ	0xFDE
  5855                           postdec2	equ	0xFDD
  5856                           plusw2	equ	0xFDB
  5857                           fsr2h	equ	0xFDA
  5858                           fsr2l	equ	0xFD9
  5859                           status	equ	0xFD8
  5860                           
  5861 ;; *************** function _itoa *****************
  5862 ;; Defined at:
  5863 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  5864 ;; Parameters:    Size  Location     Type
  5865 ;;  buf             2   16[BANK0 ] PTR unsigned char 
  5866 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
  5867 ;;  val             2   18[BANK0 ] int 
  5868 ;;  base            2   20[BANK0 ] int 
  5869 ;; Auto vars:     Size  Location     Type
  5870 ;;  cp              2   22[BANK0 ] PTR unsigned char 
  5871 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
  5872 ;; Return value:  Size  Location     Type
  5873 ;;                  2   16[BANK0 ] PTR unsigned char 
  5874 ;; Registers used:
  5875 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5876 ;; Tracked objects:
  5877 ;;		On entry : 0/0
  5878 ;;		On exit  : 0/0
  5879 ;;		Unchanged: 0/0
  5880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5881 ;;      Params:         0       6       0       0       0       0       0       0       0
  5882 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5883 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5884 ;;      Totals:         0       8       0       0       0       0       0       0       0
  5885 ;;Total ram usage:        8 bytes
  5886 ;; Hardware stack levels used:    1
  5887 ;; Hardware stack levels required when called:    5
  5888 ;; This function calls:
  5889 ;;		_utoa
  5890 ;; This function is called by:
  5891 ;;		_escreve_inteiro_lcd
  5892 ;;		_escreve_inteiro_uart
  5893 ;; This function uses a non-reentrant model
  5894 ;;
  5895                           
  5896                           	psect	text17
  5897  005290                     __ptext17:
  5898                           	opt stack 0
  5899  005290                     _itoa:
  5900                           	opt stack 22
  5901                           
  5902                           ;incstack = 0
  5903  005290  C070  F076         	movff	itoa@buf,itoa@cp
  5904  005294  C071  F077         	movff	itoa@buf+1,itoa@cp+1
  5905  005298  0100               	movlb	0	; () banked
  5906  00529A  AF73               	btfss	(itoa@val+1)& (0+255),7,b
  5907  00529C  D00C               	goto	l1846
  5908                           
  5909                           ; BSR set to: 0
  5910  00529E  C070  FFD9         	movff	itoa@buf,fsr2l
  5911  0052A2  C071  FFDA         	movff	itoa@buf+1,fsr2h
  5912  0052A6  0E2D               	movlw	45
  5913  0052A8  6EDF               	movwf	indf2,c
  5914                           
  5915                           ; BSR set to: 0
  5916  0052AA  4B70               	infsnz	itoa@buf& (0+255),f,b
  5917  0052AC  2B71               	incf	(itoa@buf+1)& (0+255),f,b
  5918                           
  5919                           ; BSR set to: 0
  5920  0052AE  6D72               	negf	itoa@val& (0+255),b
  5921  0052B0  1F73               	comf	(itoa@val+1)& (0+255),f,b
  5922  0052B2  B0D8               	btfsc	status,0,c
  5923  0052B4  2B73               	incf	(itoa@val+1)& (0+255),f,b
  5924  0052B6                     l1846:
  5925                           
  5926                           ; BSR set to: 0
  5927                           
  5928                           ; BSR set to: 0
  5929  0052B6  C070  F067         	movff	itoa@buf,utoa@buf
  5930  0052BA  C071  F068         	movff	itoa@buf+1,utoa@buf+1
  5931  0052BE  C072  F069         	movff	itoa@val,utoa@val
  5932  0052C2  C073  F06A         	movff	itoa@val+1,utoa@val+1
  5933  0052C6  C074  F06B         	movff	itoa@base,utoa@base
  5934  0052CA  C075  F06C         	movff	itoa@base+1,utoa@base+1
  5935  0052CE  EC02  F022         	call	_utoa	;wreg free
  5936  0052D2  0012               	return	
  5937  0052D4                     __end_of_itoa:
  5938                           	opt stack 0
  5939                           tosu	equ	0xFFF
  5940                           tosh	equ	0xFFE
  5941                           tosl	equ	0xFFD
  5942                           pclath	equ	0xFFA
  5943                           tblptru	equ	0xFF8
  5944                           tblptrh	equ	0xFF7
  5945                           tblptrl	equ	0xFF6
  5946                           tablat	equ	0xFF5
  5947                           prodh	equ	0xFF4
  5948                           prodl	equ	0xFF3
  5949                           intcon	equ	0xFF2
  5950                           intcon2	equ	0xFF1
  5951                           intcon3	equ	0xFF0
  5952                           postinc0	equ	0xFEE
  5953                           wreg	equ	0xFE8
  5954                           indf1	equ	0xFE7
  5955                           postinc1	equ	0xFE6
  5956                           postdec1	equ	0xFE5
  5957                           plusw1	equ	0xFE3
  5958                           fsr1h	equ	0xFE2
  5959                           fsr1l	equ	0xFE1
  5960                           indf2	equ	0xFDF
  5961                           postinc2	equ	0xFDE
  5962                           postdec2	equ	0xFDD
  5963                           plusw2	equ	0xFDB
  5964                           fsr2h	equ	0xFDA
  5965                           fsr2l	equ	0xFD9
  5966                           status	equ	0xFD8
  5967                           
  5968 ;; *************** function _utoa *****************
  5969 ;; Defined at:
  5970 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  5971 ;; Parameters:    Size  Location     Type
  5972 ;;  buf             2    7[BANK0 ] PTR unsigned char 
  5973 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
  5974 ;;  val             2    9[BANK0 ] unsigned int 
  5975 ;;  base            2   11[BANK0 ] int 
  5976 ;; Auto vars:     Size  Location     Type
  5977 ;;  v               2   13[BANK0 ] unsigned int 
  5978 ;;  c               1   15[BANK0 ] unsigned char 
  5979 ;; Return value:  Size  Location     Type
  5980 ;;                  2    7[BANK0 ] PTR unsigned char 
  5981 ;; Registers used:
  5982 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5983 ;; Tracked objects:
  5984 ;;		On entry : 0/0
  5985 ;;		On exit  : 0/0
  5986 ;;		Unchanged: 0/0
  5987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5988 ;;      Params:         0       6       0       0       0       0       0       0       0
  5989 ;;      Locals:         0       3       0       0       0       0       0       0       0
  5990 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5991 ;;      Totals:         0       9       0       0       0       0       0       0       0
  5992 ;;Total ram usage:        9 bytes
  5993 ;; Hardware stack levels used:    1
  5994 ;; Hardware stack levels required when called:    4
  5995 ;; This function calls:
  5996 ;;		___lwdiv
  5997 ;;		___lwmod
  5998 ;; This function is called by:
  5999 ;;		_itoa
  6000 ;; This function uses a non-reentrant model
  6001 ;;
  6002                           
  6003                           	psect	text18
  6004  004404                     __ptext18:
  6005                           	opt stack 0
  6006  004404                     _utoa:
  6007                           	opt stack 22
  6008                           
  6009                           ;incstack = 0
  6010  004404  C069  F06D         	movff	utoa@val,utoa@v
  6011  004408  C06A  F06E         	movff	utoa@val+1,utoa@v+1
  6012  00440C  C06D  F060         	movff	utoa@v,___lwdiv@dividend
  6013  004410  C06E  F061         	movff	utoa@v+1,___lwdiv@dividend+1
  6014  004414  C06B  F062         	movff	utoa@base,___lwdiv@divisor
  6015  004418  C06C  F063         	movff	utoa@base+1,___lwdiv@divisor+1
  6016  00441C  EC15  F028         	call	___lwdiv	;wreg free
  6017  004420  C060  F06D         	movff	?___lwdiv,utoa@v
  6018  004424  C061  F06E         	movff	?___lwdiv+1,utoa@v+1
  6019  004428  0100               	movlb	0	; () banked
  6020  00442A  4B67               	infsnz	utoa@buf& (0+255),f,b
  6021  00442C  2B68               	incf	(utoa@buf+1)& (0+255),f,b
  6022                           
  6023                           ; BSR set to: 0
  6024  00442E  516D               	movf	utoa@v& (0+255),w,b
  6025  004430  116E               	iorwf	(utoa@v+1)& (0+255),w,b
  6026  004432  A4D8               	btfss	status,2,c
  6027  004434  D7EB               	goto	l1850
  6028                           
  6029                           ; BSR set to: 0
  6030                           
  6031                           ; BSR set to: 0
  6032  004436  C067  FFD9         	movff	utoa@buf,fsr2l
  6033  00443A  C068  FFDA         	movff	utoa@buf+1,fsr2h
  6034  00443E  0E00               	movlw	0
  6035  004440  6EDF               	movwf	indf2,c
  6036                           
  6037                           ; BSR set to: 0
  6038  004442  0767               	decf	utoa@buf& (0+255),f,b
  6039  004444  A0D8               	btfss	status,0,c
  6040  004446  0768               	decf	(utoa@buf+1)& (0+255),f,b
  6041  004448                     
  6042                           ; BSR set to: 0
  6043                           
  6044                           ; BSR set to: 0
  6045  004448  C069  F060         	movff	utoa@val,___lwmod@dividend
  6046  00444C  C06A  F061         	movff	utoa@val+1,___lwmod@dividend+1
  6047  004450  C06B  F062         	movff	utoa@base,___lwmod@divisor
  6048  004454  C06C  F063         	movff	utoa@base+1,___lwmod@divisor+1
  6049  004458  EC6A  F029         	call	___lwmod	;wreg free
  6050  00445C  0100               	movlb	0	; () banked
  6051  00445E  5160               	movf	?___lwmod& (0+255),w,b
  6052  004460  6F6F               	movwf	utoa@c& (0+255),b
  6053                           
  6054                           ; BSR set to: 0
  6055  004462  C069  F060         	movff	utoa@val,___lwdiv@dividend
  6056  004466  C06A  F061         	movff	utoa@val+1,___lwdiv@dividend+1
  6057  00446A  C06B  F062         	movff	utoa@base,___lwdiv@divisor
  6058  00446E  C06C  F063         	movff	utoa@base+1,___lwdiv@divisor+1
  6059  004472  EC15  F028         	call	___lwdiv	;wreg free
  6060  004476  C060  F069         	movff	?___lwdiv,utoa@val
  6061  00447A  C061  F06A         	movff	?___lwdiv+1,utoa@val+1
  6062  00447E  0E09               	movlw	9
  6063  004480  0100               	movlb	0	; () banked
  6064  004482  656F               	cpfsgt	utoa@c& (0+255),b
  6065  004484  D002               	goto	l1853
  6066                           
  6067                           ; BSR set to: 0
  6068  004486  0E07               	movlw	7
  6069  004488  276F               	addwf	utoa@c& (0+255),f,b
  6070  00448A                     l1853:
  6071                           
  6072                           ; BSR set to: 0
  6073  00448A  0E30               	movlw	48
  6074  00448C  276F               	addwf	utoa@c& (0+255),f,b
  6075                           
  6076                           ; BSR set to: 0
  6077  00448E  C067  FFD9         	movff	utoa@buf,fsr2l
  6078  004492  C068  FFDA         	movff	utoa@buf+1,fsr2h
  6079  004496  C06F  FFDF         	movff	utoa@c,indf2
  6080                           
  6081                           ; BSR set to: 0
  6082  00449A  0767               	decf	utoa@buf& (0+255),f,b
  6083  00449C  A0D8               	btfss	status,0,c
  6084  00449E  0768               	decf	(utoa@buf+1)& (0+255),f,b
  6085                           
  6086                           ; BSR set to: 0
  6087  0044A0  5169               	movf	utoa@val& (0+255),w,b
  6088  0044A2  116A               	iorwf	(utoa@val+1)& (0+255),w,b
  6089  0044A4  A4D8               	btfss	status,2,c
  6090  0044A6  D7D0               	goto	l1852
  6091                           
  6092                           ; BSR set to: 0
  6093                           ;	Return value of _utoa is never used
  6094                           
  6095                           ; BSR set to: 0
  6096  0044A8  4B67               	infsnz	utoa@buf& (0+255),f,b
  6097  0044AA  2B68               	incf	(utoa@buf+1)& (0+255),f,b
  6098  0044AC  0012               	return	
  6099  0044AE                     __end_of_utoa:
  6100                           	opt stack 0
  6101                           tosu	equ	0xFFF
  6102                           tosh	equ	0xFFE
  6103                           tosl	equ	0xFFD
  6104                           pclath	equ	0xFFA
  6105                           tblptru	equ	0xFF8
  6106                           tblptrh	equ	0xFF7
  6107                           tblptrl	equ	0xFF6
  6108                           tablat	equ	0xFF5
  6109                           prodh	equ	0xFF4
  6110                           prodl	equ	0xFF3
  6111                           intcon	equ	0xFF2
  6112                           intcon2	equ	0xFF1
  6113                           intcon3	equ	0xFF0
  6114                           postinc0	equ	0xFEE
  6115                           wreg	equ	0xFE8
  6116                           indf1	equ	0xFE7
  6117                           postinc1	equ	0xFE6
  6118                           postdec1	equ	0xFE5
  6119                           plusw1	equ	0xFE3
  6120                           fsr1h	equ	0xFE2
  6121                           fsr1l	equ	0xFE1
  6122                           indf2	equ	0xFDF
  6123                           postinc2	equ	0xFDE
  6124                           postdec2	equ	0xFDD
  6125                           plusw2	equ	0xFDB
  6126                           fsr2h	equ	0xFDA
  6127                           fsr2l	equ	0xFD9
  6128                           status	equ	0xFD8
  6129                           
  6130 ;; *************** function ___lwmod *****************
  6131 ;; Defined at:
  6132 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  6133 ;; Parameters:    Size  Location     Type
  6134 ;;  dividend        2    0[BANK0 ] unsigned int 
  6135 ;;  divisor         2    2[BANK0 ] unsigned int 
  6136 ;; Auto vars:     Size  Location     Type
  6137 ;;  counter         1    4[BANK0 ] unsigned char 
  6138 ;; Return value:  Size  Location     Type
  6139 ;;                  2    0[BANK0 ] unsigned int 
  6140 ;; Registers used:
  6141 ;;		wreg, status,2, status,0
  6142 ;; Tracked objects:
  6143 ;;		On entry : 0/0
  6144 ;;		On exit  : 0/0
  6145 ;;		Unchanged: 0/0
  6146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6147 ;;      Params:         0       4       0       0       0       0       0       0       0
  6148 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6149 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6150 ;;      Totals:         0       5       0       0       0       0       0       0       0
  6151 ;;Total ram usage:        5 bytes
  6152 ;; Hardware stack levels used:    1
  6153 ;; Hardware stack levels required when called:    3
  6154 ;; This function calls:
  6155 ;;		Nothing
  6156 ;; This function is called by:
  6157 ;;		_utoa
  6158 ;;		_converte_inteiro_matriz
  6159 ;; This function uses a non-reentrant model
  6160 ;;
  6161                           
  6162                           	psect	text19
  6163  0052D4                     __ptext19:
  6164                           	opt stack 0
  6165  0052D4                     ___lwmod:
  6166                           	opt stack 22
  6167                           
  6168                           ; BSR set to: 0
  6169                           ;incstack = 0
  6170  0052D4  0100               	movlb	0	; () banked
  6171  0052D6  5162               	movf	___lwmod@divisor& (0+255),w,b
  6172  0052D8  1163               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  6173  0052DA  B4D8               	btfsc	status,2,c
  6174  0052DC  D018               	goto	l1948
  6175                           
  6176                           ; BSR set to: 0
  6177  0052DE  0E01               	movlw	1
  6178  0052E0  6F64               	movwf	___lwmod@counter& (0+255),b
  6179  0052E2  D004               	goto	l1943
  6180  0052E4                     
  6181                           ; BSR set to: 0
  6182                           
  6183                           ; BSR set to: 0
  6184  0052E4  90D8               	bcf	status,0,c
  6185  0052E6  3762               	rlcf	___lwmod@divisor& (0+255),f,b
  6186  0052E8  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  6187  0052EA  2B64               	incf	___lwmod@counter& (0+255),f,b
  6188  0052EC                     l1943:
  6189                           
  6190                           ; BSR set to: 0
  6191                           
  6192                           ; BSR set to: 0
  6193  0052EC  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  6194  0052EE  D7FA               	goto	l1944
  6195  0052F0                     u14030:
  6196                           
  6197                           ; BSR set to: 0
  6198                           
  6199                           ; BSR set to: 0
  6200                           
  6201                           ; BSR set to: 0
  6202  0052F0  5162               	movf	___lwmod@divisor& (0+255),w,b
  6203  0052F2  5D60               	subwf	___lwmod@dividend& (0+255),w,b
  6204  0052F4  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6205  0052F6  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  6206  0052F8  A0D8               	btfss	status,0,c
  6207  0052FA  D004               	goto	l1947
  6208                           
  6209                           ; BSR set to: 0
  6210  0052FC  5162               	movf	___lwmod@divisor& (0+255),w,b
  6211  0052FE  5F60               	subwf	___lwmod@dividend& (0+255),f,b
  6212  005300  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6213  005302  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  6214  005304                     l1947:
  6215                           
  6216                           ; BSR set to: 0
  6217                           
  6218                           ; BSR set to: 0
  6219  005304  90D8               	bcf	status,0,c
  6220  005306  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  6221  005308  3362               	rrcf	___lwmod@divisor& (0+255),f,b
  6222                           
  6223                           ; BSR set to: 0
  6224  00530A  2F64               	decfsz	___lwmod@counter& (0+255),f,b
  6225  00530C  D7F1               	goto	u14030
  6226  00530E                     l1948:
  6227                           
  6228                           ; BSR set to: 0
  6229                           
  6230                           ; BSR set to: 0
  6231  00530E  C060  F060         	movff	___lwmod@dividend,?___lwmod
  6232  005312  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
  6233                           
  6234                           ; BSR set to: 0
  6235  005316  0012               	return		;funcret
  6236  005318                     __end_of___lwmod:
  6237                           	opt stack 0
  6238                           tosu	equ	0xFFF
  6239                           tosh	equ	0xFFE
  6240                           tosl	equ	0xFFD
  6241                           pclath	equ	0xFFA
  6242                           tblptru	equ	0xFF8
  6243                           tblptrh	equ	0xFF7
  6244                           tblptrl	equ	0xFF6
  6245                           tablat	equ	0xFF5
  6246                           prodh	equ	0xFF4
  6247                           prodl	equ	0xFF3
  6248                           intcon	equ	0xFF2
  6249                           intcon2	equ	0xFF1
  6250                           intcon3	equ	0xFF0
  6251                           postinc0	equ	0xFEE
  6252                           wreg	equ	0xFE8
  6253                           indf1	equ	0xFE7
  6254                           postinc1	equ	0xFE6
  6255                           postdec1	equ	0xFE5
  6256                           plusw1	equ	0xFE3
  6257                           fsr1h	equ	0xFE2
  6258                           fsr1l	equ	0xFE1
  6259                           indf2	equ	0xFDF
  6260                           postinc2	equ	0xFDE
  6261                           postdec2	equ	0xFDD
  6262                           plusw2	equ	0xFDB
  6263                           fsr2h	equ	0xFDA
  6264                           fsr2l	equ	0xFD9
  6265                           status	equ	0xFD8
  6266                           
  6267 ;; *************** function ___lwdiv *****************
  6268 ;; Defined at:
  6269 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  6270 ;; Parameters:    Size  Location     Type
  6271 ;;  dividend        2    0[BANK0 ] unsigned int 
  6272 ;;  divisor         2    2[BANK0 ] unsigned int 
  6273 ;; Auto vars:     Size  Location     Type
  6274 ;;  quotient        2    5[BANK0 ] unsigned int 
  6275 ;;  counter         1    4[BANK0 ] unsigned char 
  6276 ;; Return value:  Size  Location     Type
  6277 ;;                  2    0[BANK0 ] unsigned int 
  6278 ;; Registers used:
  6279 ;;		wreg, status,2, status,0
  6280 ;; Tracked objects:
  6281 ;;		On entry : 0/0
  6282 ;;		On exit  : 0/0
  6283 ;;		Unchanged: 0/0
  6284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6285 ;;      Params:         0       4       0       0       0       0       0       0       0
  6286 ;;      Locals:         0       3       0       0       0       0       0       0       0
  6287 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6288 ;;      Totals:         0       7       0       0       0       0       0       0       0
  6289 ;;Total ram usage:        7 bytes
  6290 ;; Hardware stack levels used:    1
  6291 ;; Hardware stack levels required when called:    3
  6292 ;; This function calls:
  6293 ;;		Nothing
  6294 ;; This function is called by:
  6295 ;;		_utoa
  6296 ;;		_converte_inteiro_matriz
  6297 ;; This function uses a non-reentrant model
  6298 ;;
  6299                           
  6300                           	psect	text20
  6301  00502A                     __ptext20:
  6302                           	opt stack 0
  6303  00502A                     ___lwdiv:
  6304                           	opt stack 22
  6305                           
  6306                           ; BSR set to: 0
  6307                           ;incstack = 0
  6308  00502A  0E00               	movlw	0
  6309  00502C  0100               	movlb	0	; () banked
  6310  00502E  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
  6311  005030  0E00               	movlw	0
  6312  005032  6F65               	movwf	___lwdiv@quotient& (0+255),b
  6313                           
  6314                           ; BSR set to: 0
  6315  005034  5162               	movf	___lwdiv@divisor& (0+255),w,b
  6316  005036  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  6317  005038  B4D8               	btfsc	status,2,c
  6318  00503A  D01C               	goto	l1938
  6319                           
  6320                           ; BSR set to: 0
  6321  00503C  0E01               	movlw	1
  6322  00503E  6F64               	movwf	___lwdiv@counter& (0+255),b
  6323  005040  D004               	goto	l1933
  6324  005042                     
  6325                           ; BSR set to: 0
  6326                           
  6327                           ; BSR set to: 0
  6328  005042  90D8               	bcf	status,0,c
  6329  005044  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
  6330  005046  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  6331  005048  2B64               	incf	___lwdiv@counter& (0+255),f,b
  6332  00504A                     l1933:
  6333                           
  6334                           ; BSR set to: 0
  6335                           
  6336                           ; BSR set to: 0
  6337  00504A  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  6338  00504C  D7FA               	goto	l1934
  6339  00504E                     u14000:
  6340                           
  6341                           ; BSR set to: 0
  6342                           
  6343                           ; BSR set to: 0
  6344                           
  6345                           ; BSR set to: 0
  6346  00504E  90D8               	bcf	status,0,c
  6347  005050  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
  6348  005052  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  6349                           
  6350                           ; BSR set to: 0
  6351  005054  5162               	movf	___lwdiv@divisor& (0+255),w,b
  6352  005056  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
  6353  005058  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6354  00505A  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  6355  00505C  A0D8               	btfss	status,0,c
  6356  00505E  D005               	goto	l1937
  6357                           
  6358                           ; BSR set to: 0
  6359  005060  5162               	movf	___lwdiv@divisor& (0+255),w,b
  6360  005062  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
  6361  005064  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6362  005066  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  6363                           
  6364                           ; BSR set to: 0
  6365  005068  8165               	bsf	___lwdiv@quotient& (0+255),0,b
  6366  00506A                     l1937:
  6367                           
  6368                           ; BSR set to: 0
  6369                           
  6370                           ; BSR set to: 0
  6371  00506A  90D8               	bcf	status,0,c
  6372  00506C  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  6373  00506E  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
  6374                           
  6375                           ; BSR set to: 0
  6376  005070  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
  6377  005072  D7ED               	goto	u14000
  6378  005074                     l1938:
  6379                           
  6380                           ; BSR set to: 0
  6381                           
  6382                           ; BSR set to: 0
  6383  005074  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
  6384  005078  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6385                           
  6386                           ; BSR set to: 0
  6387  00507C  0012               	return		;funcret
  6388  00507E                     __end_of___lwdiv:
  6389                           	opt stack 0
  6390                           tosu	equ	0xFFF
  6391                           tosh	equ	0xFFE
  6392                           tosl	equ	0xFFD
  6393                           pclath	equ	0xFFA
  6394                           tblptru	equ	0xFF8
  6395                           tblptrh	equ	0xFF7
  6396                           tblptrl	equ	0xFF6
  6397                           tablat	equ	0xFF5
  6398                           prodh	equ	0xFF4
  6399                           prodl	equ	0xFF3
  6400                           intcon	equ	0xFF2
  6401                           intcon2	equ	0xFF1
  6402                           intcon3	equ	0xFF0
  6403                           postinc0	equ	0xFEE
  6404                           wreg	equ	0xFE8
  6405                           indf1	equ	0xFE7
  6406                           postinc1	equ	0xFE6
  6407                           postdec1	equ	0xFE5
  6408                           plusw1	equ	0xFE3
  6409                           fsr1h	equ	0xFE2
  6410                           fsr1l	equ	0xFE1
  6411                           indf2	equ	0xFDF
  6412                           postinc2	equ	0xFDE
  6413                           postdec2	equ	0xFDD
  6414                           plusw2	equ	0xFDB
  6415                           fsr2h	equ	0xFDA
  6416                           fsr2l	equ	0xFD9
  6417                           status	equ	0xFD8
  6418                           
  6419 ;; *************** function _atoi *****************
  6420 ;; Defined at:
  6421 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  6422 ;; Parameters:    Size  Location     Type
  6423 ;;  s               2    6[BANK0 ] PTR const unsigned char 
  6424 ;;		 -> poligono_ext.point_long_min(6), poligono_ext.fence_long_min(6), poligono_ext.point_lat_min(6), poligono_ext.fenc
      +e_lat_min(6), 
  6425 ;;		 -> poligono_ext.fence_lat_deg(6), poligono_ext.point_lat_deg(6), poligono_ext.fence_long_deg(6), poligono_ext.point
      +_long_deg(6), 
  6426 ;;		 -> poligono_ext(256), 
  6427 ;; Auto vars:     Size  Location     Type
  6428 ;;  a               2   11[BANK0 ] int 
  6429 ;;  sign            1   10[BANK0 ] unsigned char 
  6430 ;; Return value:  Size  Location     Type
  6431 ;;                  2    6[BANK0 ] int 
  6432 ;; Registers used:
  6433 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6434 ;; Tracked objects:
  6435 ;;		On entry : 0/0
  6436 ;;		On exit  : 0/0
  6437 ;;		Unchanged: 0/0
  6438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6439 ;;      Params:         0       2       0       0       0       0       0       0       0
  6440 ;;      Locals:         0       3       0       0       0       0       0       0       0
  6441 ;;      Temps:          0       2       0       0       0       0       0       0       0
  6442 ;;      Totals:         0       7       0       0       0       0       0       0       0
  6443 ;;Total ram usage:        7 bytes
  6444 ;; Hardware stack levels used:    1
  6445 ;; Hardware stack levels required when called:    4
  6446 ;; This function calls:
  6447 ;;		___wmul
  6448 ;;		_isdigit
  6449 ;; This function is called by:
  6450 ;;		_verifica_fence_externo
  6451 ;; This function uses a non-reentrant model
  6452 ;;
  6453                           
  6454                           	psect	text21
  6455  0040F0                     __ptext21:
  6456                           	opt stack 0
  6457  0040F0                     _atoi:
  6458                           	opt stack 24
  6459                           
  6460                           ; BSR set to: 0
  6461                           ;incstack = 0
  6462  0040F0  D003               	goto	l1659
  6463  0040F2  0100               	movlb	0	; () banked
  6464  0040F4  4B66               	infsnz	atoi@s& (0+255),f,b
  6465  0040F6  2B67               	incf	(atoi@s+1)& (0+255),f,b
  6466  0040F8                     l1659:
  6467                           
  6468                           ; BSR set to: 0
  6469  0040F8  C066  FFD9         	movff	atoi@s,fsr2l
  6470  0040FC  C067  FFDA         	movff	atoi@s+1,fsr2h
  6471  004100  0E20               	movlw	32
  6472  004102  18DE               	xorwf	postinc2,w,c
  6473  004104  B4D8               	btfsc	status,2,c
  6474  004106  D7F5               	goto	l1660
  6475  004108  C066  FFD9         	movff	atoi@s,fsr2l
  6476  00410C  C067  FFDA         	movff	atoi@s+1,fsr2h
  6477  004110  0E09               	movlw	9
  6478  004112  18DE               	xorwf	postinc2,w,c
  6479  004114  B4D8               	btfsc	status,2,c
  6480  004116  D7ED               	goto	l1660
  6481  004118  0E00               	movlw	0
  6482  00411A  0100               	movlb	0	; () banked
  6483  00411C  6F6C               	movwf	(atoi@a+1)& (0+255),b
  6484  00411E  0E00               	movlw	0
  6485  004120  6F6B               	movwf	atoi@a& (0+255),b
  6486  004122  0E00               	movlw	0
  6487  004124  6F6A               	movwf	atoi@sign& (0+255),b
  6488                           
  6489                           ; BSR set to: 0
  6490  004126  C066  FFD9         	movff	atoi@s,fsr2l
  6491  00412A  C067  FFDA         	movff	atoi@s+1,fsr2h
  6492  00412E  0E2D               	movlw	45
  6493  004130  18DE               	xorwf	postinc2,w,c
  6494  004132  A4D8               	btfss	status,2,c
  6495  004134  D002               	goto	l1662
  6496                           
  6497                           ; BSR set to: 0
  6498  004136  2B6A               	incf	atoi@sign& (0+255),f,b
  6499  004138  D026               	goto	l11708
  6500  00413A                     l1662:
  6501                           
  6502                           ; BSR set to: 0
  6503                           
  6504                           ; BSR set to: 0
  6505  00413A  C066  FFD9         	movff	atoi@s,fsr2l
  6506  00413E  C067  FFDA         	movff	atoi@s+1,fsr2h
  6507  004142  0E2B               	movlw	43
  6508  004144  18DE               	xorwf	postinc2,w,c
  6509  004146  A4D8               	btfss	status,2,c
  6510  004148  D020               	goto	l1665
  6511  00414A  D01D               	goto	l11708
  6512  00414C                     
  6513                           ; BSR set to: 0
  6514  00414C  C06B  F060         	movff	atoi@a,___wmul@multiplier
  6515  004150  C06C  F061         	movff	atoi@a+1,___wmul@multiplier+1
  6516  004154  0E00               	movlw	0
  6517  004156  0100               	movlb	0	; () banked
  6518  004158  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6519  00415A  0E0A               	movlw	10
  6520  00415C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  6521  00415E  ECD3  F02A         	call	___wmul	;wreg free
  6522  004162  C066  FFD9         	movff	atoi@s,fsr2l
  6523  004166  C067  FFDA         	movff	atoi@s+1,fsr2h
  6524  00416A  50DF               	movf	indf2,w,c
  6525  00416C  0100               	movlb	0	; () banked
  6526  00416E  6F68               	movwf	??_atoi& (0+255),b
  6527  004170  6B69               	clrf	(??_atoi+1)& (0+255),b
  6528  004172  5160               	movf	?___wmul& (0+255),w,b
  6529  004174  2768               	addwf	??_atoi& (0+255),f,b
  6530  004176  5161               	movf	(?___wmul+1)& (0+255),w,b
  6531  004178  2369               	addwfc	(??_atoi+1)& (0+255),f,b
  6532  00417A  0ED0               	movlw	208
  6533  00417C  2568               	addwf	??_atoi& (0+255),w,b
  6534  00417E  6F6B               	movwf	atoi@a& (0+255),b
  6535  004180  0EFF               	movlw	255
  6536  004182  2169               	addwfc	(??_atoi+1)& (0+255),w,b
  6537  004184  6F6C               	movwf	(atoi@a+1)& (0+255),b
  6538  004186                     l11708:
  6539                           
  6540                           ; BSR set to: 0
  6541  004186  4B66               	infsnz	atoi@s& (0+255),f,b
  6542  004188  2B67               	incf	(atoi@s+1)& (0+255),f,b
  6543  00418A                     l1665:
  6544                           
  6545                           ; BSR set to: 0
  6546                           
  6547                           ; BSR set to: 0
  6548  00418A  C066  FFD9         	movff	atoi@s,fsr2l
  6549  00418E  C067  FFDA         	movff	atoi@s+1,fsr2h
  6550  004192  50DF               	movf	indf2,w,c
  6551  004194  ECF9  F02A         	call	_isdigit
  6552  004198  B0D8               	btfsc	status,0,c
  6553  00419A  D7D8               	goto	l1666
  6554  00419C  0100               	movlb	0	; () banked
  6555  00419E  516A               	movf	atoi@sign& (0+255),w,b
  6556  0041A0  B4D8               	btfsc	status,2,c
  6557  0041A2  D00D               	goto	l1668
  6558                           
  6559                           ; BSR set to: 0
  6560  0041A4  C06B  F068         	movff	atoi@a,??_atoi
  6561  0041A8  C06C  F069         	movff	atoi@a+1,??_atoi+1
  6562  0041AC  1F68               	comf	??_atoi& (0+255),f,b
  6563  0041AE  1F69               	comf	(??_atoi+1)& (0+255),f,b
  6564  0041B0  4B68               	infsnz	??_atoi& (0+255),f,b
  6565  0041B2  2B69               	incf	(??_atoi+1)& (0+255),f,b
  6566  0041B4  C068  F066         	movff	??_atoi,?_atoi
  6567  0041B8  C069  F067         	movff	??_atoi+1,?_atoi+1
  6568  0041BC  0012               	return	
  6569  0041BE                     l1668:
  6570                           
  6571                           ; BSR set to: 0
  6572  0041BE  C06B  F066         	movff	atoi@a,?_atoi
  6573  0041C2  C06C  F067         	movff	atoi@a+1,?_atoi+1
  6574                           
  6575                           ; BSR set to: 0
  6576  0041C6  0012               	return		;funcret
  6577  0041C8                     __end_of_atoi:
  6578                           	opt stack 0
  6579                           tosu	equ	0xFFF
  6580                           tosh	equ	0xFFE
  6581                           tosl	equ	0xFFD
  6582                           pclath	equ	0xFFA
  6583                           tblptru	equ	0xFF8
  6584                           tblptrh	equ	0xFF7
  6585                           tblptrl	equ	0xFF6
  6586                           tablat	equ	0xFF5
  6587                           prodh	equ	0xFF4
  6588                           prodl	equ	0xFF3
  6589                           intcon	equ	0xFF2
  6590                           intcon2	equ	0xFF1
  6591                           intcon3	equ	0xFF0
  6592                           postinc0	equ	0xFEE
  6593                           wreg	equ	0xFE8
  6594                           indf1	equ	0xFE7
  6595                           postinc1	equ	0xFE6
  6596                           postdec1	equ	0xFE5
  6597                           plusw1	equ	0xFE3
  6598                           fsr1h	equ	0xFE2
  6599                           fsr1l	equ	0xFE1
  6600                           indf2	equ	0xFDF
  6601                           postinc2	equ	0xFDE
  6602                           postdec2	equ	0xFDD
  6603                           plusw2	equ	0xFDB
  6604                           fsr2h	equ	0xFDA
  6605                           fsr2l	equ	0xFD9
  6606                           status	equ	0xFD8
  6607                           
  6608 ;; *************** function _isdigit *****************
  6609 ;; Defined at:
  6610 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  6611 ;; Parameters:    Size  Location     Type
  6612 ;;  c               1    wreg     unsigned char 
  6613 ;; Auto vars:     Size  Location     Type
  6614 ;;  c               1    2[BANK0 ] unsigned char 
  6615 ;; Return value:  Size  Location     Type
  6616 ;;		None               void
  6617 ;; Registers used:
  6618 ;;		wreg, status,2, status,0
  6619 ;; Tracked objects:
  6620 ;;		On entry : 0/0
  6621 ;;		On exit  : 0/0
  6622 ;;		Unchanged: 0/0
  6623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6624 ;;      Params:         0       0       0       0       0       0       0       0       0
  6625 ;;      Locals:         0       2       0       0       0       0       0       0       0
  6626 ;;      Temps:          0       1       0       0       0       0       0       0       0
  6627 ;;      Totals:         0       3       0       0       0       0       0       0       0
  6628 ;;Total ram usage:        3 bytes
  6629 ;; Hardware stack levels used:    1
  6630 ;; Hardware stack levels required when called:    3
  6631 ;; This function calls:
  6632 ;;		Nothing
  6633 ;; This function is called by:
  6634 ;;		_atoi
  6635 ;; This function uses a non-reentrant model
  6636 ;;
  6637                           
  6638                           	psect	text22
  6639  0055F2                     __ptext22:
  6640                           	opt stack 0
  6641  0055F2                     _isdigit:
  6642                           	opt stack 24
  6643                           
  6644                           ; BSR set to: 0
  6645                           ;incstack = 0
  6646                           ;isdigit@c stored from wreg
  6647  0055F2  0100               	movlb	0	; () banked
  6648  0055F4  6F62               	movwf	isdigit@c& (0+255),b
  6649  0055F6  0E00               	movlw	0
  6650  0055F8  0100               	movlb	0	; () banked
  6651  0055FA  6F61               	movwf	_isdigit$2933& (0+255),b
  6652                           
  6653                           ; BSR set to: 0
  6654  0055FC  0E3A               	movlw	58
  6655  0055FE  6162               	cpfslt	isdigit@c& (0+255),b
  6656  005600  D005               	goto	l1840
  6657                           
  6658                           ; BSR set to: 0
  6659  005602  0E2F               	movlw	47
  6660  005604  6562               	cpfsgt	isdigit@c& (0+255),b
  6661  005606  D002               	goto	l1840
  6662                           
  6663                           ; BSR set to: 0
  6664  005608  0E01               	movlw	1
  6665  00560A  6F61               	movwf	_isdigit$2933& (0+255),b
  6666  00560C                     l1840:
  6667                           
  6668                           ; BSR set to: 0
  6669                           
  6670                           ; BSR set to: 0
  6671  00560C  C061  F060         	movff	_isdigit$2933,??_isdigit
  6672  005610  3160               	rrcf	??_isdigit& (0+255),w,b
  6673  005612  0012               	return	
  6674  005614                     __end_of_isdigit:
  6675                           	opt stack 0
  6676                           tosu	equ	0xFFF
  6677                           tosh	equ	0xFFE
  6678                           tosl	equ	0xFFD
  6679                           pclath	equ	0xFFA
  6680                           tblptru	equ	0xFF8
  6681                           tblptrh	equ	0xFF7
  6682                           tblptrl	equ	0xFF6
  6683                           tablat	equ	0xFF5
  6684                           prodh	equ	0xFF4
  6685                           prodl	equ	0xFF3
  6686                           intcon	equ	0xFF2
  6687                           intcon2	equ	0xFF1
  6688                           intcon3	equ	0xFF0
  6689                           postinc0	equ	0xFEE
  6690                           wreg	equ	0xFE8
  6691                           indf1	equ	0xFE7
  6692                           postinc1	equ	0xFE6
  6693                           postdec1	equ	0xFE5
  6694                           plusw1	equ	0xFE3
  6695                           fsr1h	equ	0xFE2
  6696                           fsr1l	equ	0xFE1
  6697                           indf2	equ	0xFDF
  6698                           postinc2	equ	0xFDE
  6699                           postdec2	equ	0xFDD
  6700                           plusw2	equ	0xFDB
  6701                           fsr2h	equ	0xFDA
  6702                           fsr2l	equ	0xFD9
  6703                           status	equ	0xFD8
  6704                           
  6705 ;; *************** function _Longitude *****************
  6706 ;; Defined at:
  6707 ;;		line 610 in file "bibliotecas/GPS.c"
  6708 ;; Parameters:    Size  Location     Type
  6709 ;;		None
  6710 ;; Auto vars:     Size  Location     Type
  6711 ;;		None
  6712 ;; Return value:  Size  Location     Type
  6713 ;;                  2    0[BANK0 ] PTR unsigned char 
  6714 ;; Registers used:
  6715 ;;		wreg, status,2, status,0
  6716 ;; Tracked objects:
  6717 ;;		On entry : 0/0
  6718 ;;		On exit  : 0/0
  6719 ;;		Unchanged: 0/0
  6720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6721 ;;      Params:         0       2       0       0       0       0       0       0       0
  6722 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6723 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6724 ;;      Totals:         0       2       0       0       0       0       0       0       0
  6725 ;;Total ram usage:        2 bytes
  6726 ;; Hardware stack levels used:    1
  6727 ;; Hardware stack levels required when called:    3
  6728 ;; This function calls:
  6729 ;;		Nothing
  6730 ;; This function is called by:
  6731 ;;		_verifica_fence_externo
  6732 ;; This function uses a non-reentrant model
  6733 ;;
  6734                           
  6735                           	psect	text23
  6736  005736                     __ptext23:
  6737                           	opt stack 0
  6738  005736                     _Longitude:
  6739                           	opt stack 25
  6740                           
  6741                           ;GPS.c: 612: return rawLongitude;
  6742                           
  6743                           ; BSR set to: 0
  6744                           ;incstack = 0
  6745  005736  0E50               	movlw	low _rawLongitude
  6746  005738  0100               	movlb	0	; () banked
  6747  00573A  6F60               	movwf	?_Longitude& (0+255),b
  6748  00573C  0E01               	movlw	high _rawLongitude
  6749  00573E  6F61               	movwf	(?_Longitude+1)& (0+255),b
  6750  005740  0012               	return	
  6751  005742                     __end_of_Longitude:
  6752                           	opt stack 0
  6753                           tosu	equ	0xFFF
  6754                           tosh	equ	0xFFE
  6755                           tosl	equ	0xFFD
  6756                           pclath	equ	0xFFA
  6757                           tblptru	equ	0xFF8
  6758                           tblptrh	equ	0xFF7
  6759                           tblptrl	equ	0xFF6
  6760                           tablat	equ	0xFF5
  6761                           prodh	equ	0xFF4
  6762                           prodl	equ	0xFF3
  6763                           intcon	equ	0xFF2
  6764                           intcon2	equ	0xFF1
  6765                           intcon3	equ	0xFF0
  6766                           postinc0	equ	0xFEE
  6767                           wreg	equ	0xFE8
  6768                           indf1	equ	0xFE7
  6769                           postinc1	equ	0xFE6
  6770                           postdec1	equ	0xFE5
  6771                           plusw1	equ	0xFE3
  6772                           fsr1h	equ	0xFE2
  6773                           fsr1l	equ	0xFE1
  6774                           indf2	equ	0xFDF
  6775                           postinc2	equ	0xFDE
  6776                           postdec2	equ	0xFDD
  6777                           plusw2	equ	0xFDB
  6778                           fsr2h	equ	0xFDA
  6779                           fsr2l	equ	0xFD9
  6780                           status	equ	0xFD8
  6781                           
  6782 ;; *************** function _Latitude *****************
  6783 ;; Defined at:
  6784 ;;		line 605 in file "bibliotecas/GPS.c"
  6785 ;; Parameters:    Size  Location     Type
  6786 ;;		None
  6787 ;; Auto vars:     Size  Location     Type
  6788 ;;		None
  6789 ;; Return value:  Size  Location     Type
  6790 ;;                  2    0[BANK0 ] PTR unsigned char 
  6791 ;; Registers used:
  6792 ;;		wreg, status,2, status,0
  6793 ;; Tracked objects:
  6794 ;;		On entry : 0/0
  6795 ;;		On exit  : 0/0
  6796 ;;		Unchanged: 0/0
  6797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6798 ;;      Params:         0       2       0       0       0       0       0       0       0
  6799 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6800 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6801 ;;      Totals:         0       2       0       0       0       0       0       0       0
  6802 ;;Total ram usage:        2 bytes
  6803 ;; Hardware stack levels used:    1
  6804 ;; Hardware stack levels required when called:    3
  6805 ;; This function calls:
  6806 ;;		Nothing
  6807 ;; This function is called by:
  6808 ;;		_verifica_fence_externo
  6809 ;; This function uses a non-reentrant model
  6810 ;;
  6811                           
  6812                           	psect	text24
  6813  005742                     __ptext24:
  6814                           	opt stack 0
  6815  005742                     _Latitude:
  6816                           	opt stack 25
  6817                           
  6818                           ;GPS.c: 607: return rawLatitude;
  6819                           
  6820                           ; BSR set to: 0
  6821                           ;incstack = 0
  6822  005742  0E5D               	movlw	low _rawLatitude
  6823  005744  0100               	movlb	0	; () banked
  6824  005746  6F60               	movwf	?_Latitude& (0+255),b
  6825  005748  0E01               	movlw	high _rawLatitude
  6826  00574A  6F61               	movwf	(?_Latitude+1)& (0+255),b
  6827  00574C  0012               	return	
  6828  00574E                     __end_of_Latitude:
  6829                           	opt stack 0
  6830                           tosu	equ	0xFFF
  6831                           tosh	equ	0xFFE
  6832                           tosl	equ	0xFFD
  6833                           pclath	equ	0xFFA
  6834                           tblptru	equ	0xFF8
  6835                           tblptrh	equ	0xFF7
  6836                           tblptrl	equ	0xFF6
  6837                           tablat	equ	0xFF5
  6838                           prodh	equ	0xFF4
  6839                           prodl	equ	0xFF3
  6840                           intcon	equ	0xFF2
  6841                           intcon2	equ	0xFF1
  6842                           intcon3	equ	0xFF0
  6843                           postinc0	equ	0xFEE
  6844                           wreg	equ	0xFE8
  6845                           indf1	equ	0xFE7
  6846                           postinc1	equ	0xFE6
  6847                           postdec1	equ	0xFE5
  6848                           plusw1	equ	0xFE3
  6849                           fsr1h	equ	0xFE2
  6850                           fsr1l	equ	0xFE1
  6851                           indf2	equ	0xFDF
  6852                           postinc2	equ	0xFDE
  6853                           postdec2	equ	0xFDD
  6854                           plusw2	equ	0xFDB
  6855                           fsr2h	equ	0xFDA
  6856                           fsr2l	equ	0xFD9
  6857                           status	equ	0xFD8
  6858                           
  6859 ;; *************** function _escreve_cmd_lcd *****************
  6860 ;; Defined at:
  6861 ;;		line 162 in file "bibliotecas/display_lcd.c"
  6862 ;; Parameters:    Size  Location     Type
  6863 ;;  comando         1    wreg     unsigned char 
  6864 ;; Auto vars:     Size  Location     Type
  6865 ;;  comando         1    2[BANK0 ] unsigned char 
  6866 ;; Return value:  Size  Location     Type
  6867 ;;                  1    wreg      void 
  6868 ;; Registers used:
  6869 ;;		wreg, status,2, status,0, cstack
  6870 ;; Tracked objects:
  6871 ;;		On entry : 0/0
  6872 ;;		On exit  : 0/0
  6873 ;;		Unchanged: 0/0
  6874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6875 ;;      Params:         0       0       0       0       0       0       0       0       0
  6876 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6877 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6878 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6879 ;;Total ram usage:        1 bytes
  6880 ;; Hardware stack levels used:    1
  6881 ;; Hardware stack levels required when called:    4
  6882 ;; This function calls:
  6883 ;;		_delay
  6884 ;; This function is called by:
  6885 ;;		_mensagem_inicial
  6886 ;;		_troca_de_tela
  6887 ;;		_init_lcd
  6888 ;;		_cria_caractere_lcd
  6889 ;; This function uses a non-reentrant model
  6890 ;;
  6891                           
  6892                           	psect	text25
  6893  004886                     __ptext25:
  6894                           	opt stack 0
  6895  004886                     _escreve_cmd_lcd:
  6896                           	opt stack 25
  6897                           
  6898                           ; BSR set to: 0
  6899                           ;incstack = 0
  6900                           ;escreve_cmd_lcd@comando stored from wreg
  6901  004886  0100               	movlb	0	; () banked
  6902  004888  6F62               	movwf	escreve_cmd_lcd@comando& (0+255),b
  6903                           
  6904                           ;display_lcd.c: 165: PORTDbits.RD2 = 0;
  6905  00488A  9483               	bcf	3971,2,c	;volatile
  6906                           
  6907                           ;display_lcd.c: 166: PORTDbits.RD1 = 0;
  6908  00488C  9283               	bcf	3971,1,c	;volatile
  6909                           
  6910                           ;display_lcd.c: 167: PORTDbits.RD0 = 0;
  6911  00488E  9083               	bcf	3971,0,c	;volatile
  6912                           
  6913                           ;display_lcd.c: 170: if(comando&0b00010000){PORTDbits.RD4=1;}
  6914  004890  0100               	movlb	0	; () banked
  6915  004892  A962               	btfss	escreve_cmd_lcd@comando& (0+255),4,b
  6916  004894  D002               	goto	l677
  6917                           
  6918                           ; BSR set to: 0
  6919  004896  8883               	bsf	3971,4,c	;volatile
  6920  004898  D001               	goto	l678
  6921  00489A                     l677:
  6922                           
  6923                           ; BSR set to: 0
  6924                           ;display_lcd.c: 171: else {PORTDbits.RD4=0;}
  6925  00489A  9883               	bcf	3971,4,c	;volatile
  6926  00489C                     l678:
  6927                           
  6928                           ; BSR set to: 0
  6929                           ;display_lcd.c: 172: if(comando&0b00100000){PORTDbits.RD5=1;}
  6930                           
  6931                           ; BSR set to: 0
  6932  00489C  AB62               	btfss	escreve_cmd_lcd@comando& (0+255),5,b
  6933  00489E  D002               	goto	l679
  6934                           
  6935                           ; BSR set to: 0
  6936  0048A0  8A83               	bsf	3971,5,c	;volatile
  6937  0048A2  D001               	goto	l680
  6938  0048A4                     l679:
  6939                           
  6940                           ; BSR set to: 0
  6941                           ;display_lcd.c: 173: else {PORTDbits.RD5=0;}
  6942  0048A4  9A83               	bcf	3971,5,c	;volatile
  6943  0048A6                     l680:
  6944                           
  6945                           ; BSR set to: 0
  6946                           ;display_lcd.c: 174: if(comando&0b01000000){PORTDbits.RD6=1;}
  6947                           
  6948                           ; BSR set to: 0
  6949  0048A6  AD62               	btfss	escreve_cmd_lcd@comando& (0+255),6,b
  6950  0048A8  D002               	goto	l681
  6951                           
  6952                           ; BSR set to: 0
  6953  0048AA  8C83               	bsf	3971,6,c	;volatile
  6954  0048AC  D001               	goto	l682
  6955  0048AE                     l681:
  6956                           
  6957                           ; BSR set to: 0
  6958                           ;display_lcd.c: 175: else {PORTDbits.RD6=0;}
  6959  0048AE  9C83               	bcf	3971,6,c	;volatile
  6960  0048B0                     l682:
  6961                           
  6962                           ; BSR set to: 0
  6963                           ;display_lcd.c: 176: if(comando&0b10000000){PORTDbits.RD7=1;}
  6964                           
  6965                           ; BSR set to: 0
  6966  0048B0  AF62               	btfss	escreve_cmd_lcd@comando& (0+255),7,b
  6967  0048B2  D002               	goto	l683
  6968                           
  6969                           ; BSR set to: 0
  6970  0048B4  8E83               	bsf	3971,7,c	;volatile
  6971  0048B6  D001               	goto	l684
  6972  0048B8                     l683:
  6973                           
  6974                           ; BSR set to: 0
  6975                           ;display_lcd.c: 177: else {PORTDbits.RD7=0;}
  6976  0048B8  9E83               	bcf	3971,7,c	;volatile
  6977  0048BA                     l684:
  6978                           
  6979                           ; BSR set to: 0
  6980                           ;display_lcd.c: 180: PORTDbits.RD0 = 1;
  6981  0048BA  8083               	bsf	3971,0,c	;volatile
  6982                           
  6983                           ; BSR set to: 0
  6984                           ;display_lcd.c: 181: delay();
  6985  0048BC  ECBE  F02A         	call	_delay	;wreg free
  6986                           
  6987                           ;display_lcd.c: 182: PORTDbits.RD0 = 0;
  6988  0048C0  9083               	bcf	3971,0,c	;volatile
  6989                           
  6990                           ;display_lcd.c: 183: delay();
  6991  0048C2  ECBE  F02A         	call	_delay	;wreg free
  6992                           
  6993                           ;display_lcd.c: 186: if(comando&0b00000001){PORTDbits.RD4=1;}
  6994  0048C6  0100               	movlb	0	; () banked
  6995  0048C8  A162               	btfss	escreve_cmd_lcd@comando& (0+255),0,b
  6996  0048CA  D002               	goto	l685
  6997                           
  6998                           ; BSR set to: 0
  6999  0048CC  8883               	bsf	3971,4,c	;volatile
  7000  0048CE  D001               	goto	l686
  7001  0048D0                     l685:
  7002                           
  7003                           ; BSR set to: 0
  7004                           ;display_lcd.c: 187: else {PORTDbits.RD4=0;}
  7005  0048D0  9883               	bcf	3971,4,c	;volatile
  7006  0048D2                     l686:
  7007                           
  7008                           ; BSR set to: 0
  7009                           ;display_lcd.c: 188: if(comando&0b00000010){PORTDbits.RD5=1;}
  7010  0048D2  A362               	btfss	escreve_cmd_lcd@comando& (0+255),1,b
  7011  0048D4  D002               	goto	l687
  7012                           
  7013                           ; BSR set to: 0
  7014  0048D6  8A83               	bsf	3971,5,c	;volatile
  7015  0048D8  D001               	goto	l688
  7016  0048DA                     l687:
  7017                           
  7018                           ; BSR set to: 0
  7019                           ;display_lcd.c: 189: else {PORTDbits.RD5=0;}
  7020  0048DA  9A83               	bcf	3971,5,c	;volatile
  7021  0048DC                     l688:
  7022                           
  7023                           ; BSR set to: 0
  7024                           ;display_lcd.c: 190: if(comando&0b00000100){PORTDbits.RD6=1;}
  7025  0048DC  A562               	btfss	escreve_cmd_lcd@comando& (0+255),2,b
  7026  0048DE  D002               	goto	l689
  7027                           
  7028                           ; BSR set to: 0
  7029  0048E0  8C83               	bsf	3971,6,c	;volatile
  7030  0048E2  D001               	goto	l690
  7031  0048E4                     l689:
  7032                           
  7033                           ; BSR set to: 0
  7034                           ;display_lcd.c: 191: else {PORTDbits.RD6=0;}
  7035  0048E4  9C83               	bcf	3971,6,c	;volatile
  7036  0048E6                     l690:
  7037                           
  7038                           ; BSR set to: 0
  7039                           ;display_lcd.c: 192: if(comando&0b00001000){PORTDbits.RD7=1;}
  7040  0048E6  A762               	btfss	escreve_cmd_lcd@comando& (0+255),3,b
  7041  0048E8  D002               	goto	l691
  7042                           
  7043                           ; BSR set to: 0
  7044  0048EA  8E83               	bsf	3971,7,c	;volatile
  7045  0048EC  D001               	goto	l692
  7046  0048EE                     l691:
  7047                           
  7048                           ; BSR set to: 0
  7049                           ;display_lcd.c: 193: else {PORTDbits.RD7=0;}
  7050  0048EE  9E83               	bcf	3971,7,c	;volatile
  7051  0048F0                     l692:
  7052                           
  7053                           ; BSR set to: 0
  7054                           ;display_lcd.c: 196: PORTDbits.RD0 = 1;
  7055  0048F0  8083               	bsf	3971,0,c	;volatile
  7056                           
  7057                           ; BSR set to: 0
  7058                           ;display_lcd.c: 197: delay();
  7059  0048F2  ECBE  F02A         	call	_delay	;wreg free
  7060                           
  7061                           ;display_lcd.c: 198: PORTDbits.RD0 = 0;
  7062  0048F6  9083               	bcf	3971,0,c	;volatile
  7063                           
  7064                           ;display_lcd.c: 199: delay();
  7065  0048F8  ECBE  F02A         	call	_delay	;wreg free
  7066                           
  7067                           ;display_lcd.c: 204: if (comando==0x01 || comando==0x02 || comando==0x03)
  7068  0048FC  0100               	movlb	0	; () banked
  7069  0048FE  0562               	decf	escreve_cmd_lcd@comando& (0+255),w,b
  7070  004900  B4D8               	btfsc	status,2,c
  7071  004902  D008               	goto	u15560
  7072                           
  7073                           ; BSR set to: 0
  7074  004904  0E02               	movlw	2
  7075  004906  1962               	xorwf	escreve_cmd_lcd@comando& (0+255),w,b
  7076  004908  B4D8               	btfsc	status,2,c
  7077  00490A  D004               	goto	u15560
  7078                           
  7079                           ; BSR set to: 0
  7080  00490C  0E03               	movlw	3
  7081  00490E  1962               	xorwf	escreve_cmd_lcd@comando& (0+255),w,b
  7082  004910  A4D8               	btfss	status,2,c
  7083  004912  0012               	return	
  7084  004914                     u15560:
  7085                           
  7086                           ; BSR set to: 0
  7087                           ;display_lcd.c: 205: { delay(); }
  7088                           
  7089                           ; BSR set to: 0
  7090  004914  ECBE  F02A         	call	_delay	;wreg free
  7091  004918  0012               	return	
  7092  00491A                     __end_of_escreve_cmd_lcd:
  7093                           	opt stack 0
  7094                           tosu	equ	0xFFF
  7095                           tosh	equ	0xFFE
  7096                           tosl	equ	0xFFD
  7097                           pclath	equ	0xFFA
  7098                           tblptru	equ	0xFF8
  7099                           tblptrh	equ	0xFF7
  7100                           tblptrl	equ	0xFF6
  7101                           tablat	equ	0xFF5
  7102                           prodh	equ	0xFF4
  7103                           prodl	equ	0xFF3
  7104                           intcon	equ	0xFF2
  7105                           intcon2	equ	0xFF1
  7106                           intcon3	equ	0xFF0
  7107                           postinc0	equ	0xFEE
  7108                           wreg	equ	0xFE8
  7109                           indf1	equ	0xFE7
  7110                           postinc1	equ	0xFE6
  7111                           postdec1	equ	0xFE5
  7112                           plusw1	equ	0xFE3
  7113                           fsr1h	equ	0xFE2
  7114                           fsr1l	equ	0xFE1
  7115                           indf2	equ	0xFDF
  7116                           postinc2	equ	0xFDE
  7117                           postdec2	equ	0xFDD
  7118                           plusw2	equ	0xFDB
  7119                           fsr2h	equ	0xFDA
  7120                           fsr2l	equ	0xFD9
  7121                           status	equ	0xFD8
  7122                           
  7123 ;; *************** function _escrita_sdcard *****************
  7124 ;; Defined at:
  7125 ;;		line 206 in file "bibliotecas/SDCard.c"
  7126 ;; Parameters:    Size  Location     Type
  7127 ;;		None
  7128 ;; Auto vars:     Size  Location     Type
  7129 ;;  bw              2    0        unsigned short 
  7130 ;; Return value:  Size  Location     Type
  7131 ;;                  1    wreg      void 
  7132 ;; Registers used:
  7133 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7134 ;; Tracked objects:
  7135 ;;		On entry : 0/0
  7136 ;;		On exit  : 0/0
  7137 ;;		Unchanged: 0/0
  7138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7139 ;;      Params:         0       0       0       0       0       0       0       0       0
  7140 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7141 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7142 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7143 ;;Total ram usage:        0 bytes
  7144 ;; Hardware stack levels used:    1
  7145 ;; Hardware stack levels required when called:   15
  7146 ;; This function calls:
  7147 ;;		_desliga_SPI
  7148 ;;		_desliga_uart
  7149 ;;		_f_close
  7150 ;;		_f_lseek
  7151 ;;		_f_mount
  7152 ;;		_f_open
  7153 ;;		_fprintf
  7154 ;;		_inicializa_SPI
  7155 ;;		_inicializa_uart
  7156 ;; This function is called by:
  7157 ;;		_disparo_gravacao
  7158 ;; This function uses a non-reentrant model
  7159 ;;
  7160                           
  7161                           	psect	text26
  7162  0044AE                     __ptext26:
  7163                           	opt stack 0
  7164  0044AE                     _escrita_sdcard:
  7165                           	opt stack 13
  7166                           
  7167                           ;SDCard.c: 208: WORD bw;
  7168                           ;SDCard.c: 209: PORTBbits.RB3 = 0;
  7169                           
  7170                           ;incstack = 0
  7171  0044AE  9681               	bcf	3969,3,c	;volatile
  7172                           
  7173                           ;SDCard.c: 210: desliga_uart();
  7174  0044B0  EC94  F02B         	call	_desliga_uart	;wreg free
  7175                           
  7176                           ;SDCard.c: 211: inicializa_SPI();
  7177  0044B4  EC0A  F02B         	call	_inicializa_SPI	;wreg free
  7178                           
  7179                           ;SDCard.c: 212: f_mount(0,&fs);
  7180  0044B8  0EE5               	movlw	low _fs
  7181  0044BA  0100               	movlb	0	; () banked
  7182  0044BC  6F60               	movwf	f_mount@fs& (0+255),b
  7183  0044BE  0E03               	movlw	high _fs
  7184  0044C0  6F61               	movwf	(f_mount@fs+1)& (0+255),b
  7185  0044C2  0E00               	movlw	0
  7186  0044C4  EC90  F028         	call	_f_mount
  7187                           
  7188                           ;SDCard.c: 216: if (f_open(&fil, filename, 0x10 | 0x02 ) == FR_OK)
  7189  0044C8  0E34               	movlw	low _fil
  7190  0044CA  0100               	movlb	0	; () banked
  7191  0044CC  6FD7               	movwf	f_open@fp& (0+255),b
  7192  0044CE  0E01               	movlw	high _fil
  7193  0044D0  6FD8               	movwf	(f_open@fp+1)& (0+255),b
  7194  0044D2  0EC5               	movlw	low _filename
  7195  0044D4  6FD9               	movwf	f_open@path& (0+255),b
  7196  0044D6  0E01               	movlw	high _filename
  7197  0044D8  6FDA               	movwf	(f_open@path+1)& (0+255),b
  7198  0044DA  0E12               	movlw	18
  7199  0044DC  6FDB               	movwf	f_open@mode& (0+255),b
  7200  0044DE  EC35  F00E         	call	_f_open	;wreg free
  7201  0044E2  0900               	iorlw	0
  7202  0044E4  A4D8               	btfss	status,2,c
  7203  0044E6  D031               	goto	l419
  7204                           
  7205                           ;SDCard.c: 217: {
  7206                           ;SDCard.c: 219: f_lseek(&fil, ((&fil)->fsize));
  7207  0044E8  0E34               	movlw	low _fil
  7208  0044EA  0100               	movlb	0	; () banked
  7209  0044EC  6FC4               	movwf	f_lseek@fp& (0+255),b
  7210  0044EE  0E01               	movlw	high _fil
  7211  0044F0  6FC5               	movwf	(f_lseek@fp+1)& (0+255),b
  7212  0044F2  C13E  F0C6         	movff	_fil+10,f_lseek@ofs
  7213  0044F6  C13F  F0C7         	movff	_fil+11,f_lseek@ofs+1
  7214  0044FA  C140  F0C8         	movff	_fil+12,f_lseek@ofs+2
  7215  0044FE  C141  F0C9         	movff	_fil+13,f_lseek@ofs+3
  7216  004502  EC01  F00A         	call	_f_lseek	;wreg free
  7217                           
  7218                           ;SDCard.c: 224: fprintf(&fil, "\n%s ; %s ; %s ; %s ;", string_dado.hora, string_dado.dat
      +                          a,string_dado.LAT, string_dado.LONG);
  7219  004506  0E34               	movlw	low _fil
  7220  004508  0101               	movlb	1	; () banked
  7221  00450A  6FDA               	movwf	fprintf@fil& (0+255),b
  7222  00450C  0E01               	movlw	high _fil
  7223  00450E  6FDB               	movwf	(fprintf@fil+1)& (0+255),b
  7224  004510  0E75               	movlw	low STR_21
  7225  004512  6FDC               	movwf	fprintf@str& (0+255),b
  7226  004514  0E61               	movlw	high STR_21
  7227  004516  6FDD               	movwf	(fprintf@str+1)& (0+255),b
  7228  004518  0E0F               	movlw	low (_string_dado+7)
  7229  00451A  6FDE               	movwf	(?_fprintf+4)& (0+255),b
  7230  00451C  0E01               	movlw	high (_string_dado+7)
  7231  00451E  6FDF               	movwf	(?_fprintf+5)& (0+255),b
  7232  004520  0E08               	movlw	low _string_dado
  7233  004522  6FE0               	movwf	(?_fprintf+6)& (0+255),b
  7234  004524  0E01               	movlw	high _string_dado
  7235  004526  6FE1               	movwf	(?_fprintf+7)& (0+255),b
  7236  004528  0E1A               	movlw	low (_string_dado+18)
  7237  00452A  6FE2               	movwf	(?_fprintf+8)& (0+255),b
  7238  00452C  0E01               	movlw	high (_string_dado+18)
  7239  00452E  6FE3               	movwf	(?_fprintf+9)& (0+255),b
  7240  004530  0E27               	movlw	low (_string_dado+31)
  7241  004532  6FE4               	movwf	(?_fprintf+10)& (0+255),b
  7242  004534  0E01               	movlw	high (_string_dado+31)
  7243  004536  6FE5               	movwf	(?_fprintf+11)& (0+255),b
  7244  004538  EC46  F00C         	call	_fprintf	;wreg free
  7245                           
  7246                           ;SDCard.c: 227: f_close(&fil);
  7247  00453C  0E34               	movlw	low _fil
  7248  00453E  0100               	movlb	0	; () banked
  7249  004540  6FAB               	movwf	f_close@fp& (0+255),b
  7250  004542  0E01               	movlw	high _fil
  7251  004544  6FAC               	movwf	(f_close@fp+1)& (0+255),b
  7252  004546  EC92  F02A         	call	_f_close	;wreg free
  7253  00454A                     l419:
  7254                           
  7255                           ;SDCard.c: 228: }
  7256                           ;SDCard.c: 230: PORTBbits.RB3 = 1;
  7257  00454A  8681               	bsf	3969,3,c	;volatile
  7258                           
  7259                           ;SDCard.c: 231: desliga_SPI();
  7260  00454C  ECB3  F02B         	call	_desliga_SPI	;wreg free
  7261                           
  7262                           ;SDCard.c: 232: inicializa_uart();
  7263  004550  ECE7  F02A         	call	_inicializa_uart	;wreg free
  7264  004554  0012               	return	
  7265  004556                     __end_of_escrita_sdcard:
  7266                           	opt stack 0
  7267                           tosu	equ	0xFFF
  7268                           tosh	equ	0xFFE
  7269                           tosl	equ	0xFFD
  7270                           pclath	equ	0xFFA
  7271                           tblptru	equ	0xFF8
  7272                           tblptrh	equ	0xFF7
  7273                           tblptrl	equ	0xFF6
  7274                           tablat	equ	0xFF5
  7275                           prodh	equ	0xFF4
  7276                           prodl	equ	0xFF3
  7277                           intcon	equ	0xFF2
  7278                           intcon2	equ	0xFF1
  7279                           intcon3	equ	0xFF0
  7280                           postinc0	equ	0xFEE
  7281                           wreg	equ	0xFE8
  7282                           indf1	equ	0xFE7
  7283                           postinc1	equ	0xFE6
  7284                           postdec1	equ	0xFE5
  7285                           plusw1	equ	0xFE3
  7286                           fsr1h	equ	0xFE2
  7287                           fsr1l	equ	0xFE1
  7288                           indf2	equ	0xFDF
  7289                           postinc2	equ	0xFDE
  7290                           postdec2	equ	0xFDD
  7291                           plusw2	equ	0xFDB
  7292                           fsr2h	equ	0xFDA
  7293                           fsr2l	equ	0xFD9
  7294                           status	equ	0xFD8
  7295                           
  7296 ;; *************** function _inicializa_uart *****************
  7297 ;; Defined at:
  7298 ;;		line 206 in file "bibliotecas/uart.c"
  7299 ;; Parameters:    Size  Location     Type
  7300 ;;		None
  7301 ;; Auto vars:     Size  Location     Type
  7302 ;;		None
  7303 ;; Return value:  Size  Location     Type
  7304 ;;                  1    wreg      void 
  7305 ;; Registers used:
  7306 ;;		wreg, status,2, status,0, cstack
  7307 ;; Tracked objects:
  7308 ;;		On entry : 0/0
  7309 ;;		On exit  : 0/0
  7310 ;;		Unchanged: 0/0
  7311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7312 ;;      Params:         0       0       0       0       0       0       0       0       0
  7313 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7314 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7315 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7316 ;;Total ram usage:        0 bytes
  7317 ;; Hardware stack levels used:    1
  7318 ;; Hardware stack levels required when called:    5
  7319 ;; This function calls:
  7320 ;;		_configura_baudrate_uart
  7321 ;; This function is called by:
  7322 ;;		_main
  7323 ;;		_escrita_sdcard
  7324 ;;		_leitura_sdcard
  7325 ;; This function uses a non-reentrant model
  7326 ;;
  7327                           
  7328                           	psect	text27
  7329  0055CE                     __ptext27:
  7330                           	opt stack 0
  7331  0055CE                     _inicializa_uart:
  7332                           	opt stack 25
  7333                           
  7334                           ;uart.c: 208: TRISCbits.RC6 = 0;
  7335                           
  7336                           ;incstack = 0
  7337  0055CE  9C94               	bcf	3988,6,c	;volatile
  7338                           
  7339                           ;uart.c: 209: TRISCbits.RC7 = 0;
  7340  0055D0  9E94               	bcf	3988,7,c	;volatile
  7341                           
  7342                           ;uart.c: 211: (void)configura_baudrate_uart(9600);
  7343  0055D2  0E80               	movlw	128
  7344  0055D4  0100               	movlb	0	; () banked
  7345  0055D6  6F6E               	movwf	configura_baudrate_uart@baudrate& (0+255),b
  7346  0055D8  0E25               	movlw	37
  7347  0055DA  6F6F               	movwf	(configura_baudrate_uart@baudrate+1)& (0+255),b
  7348  0055DC  0E00               	movlw	0
  7349  0055DE  6F70               	movwf	(configura_baudrate_uart@baudrate+2)& (0+255),b
  7350  0055E0  0E00               	movlw	0
  7351  0055E2  6F71               	movwf	(configura_baudrate_uart@baudrate+3)& (0+255),b
  7352  0055E4  EC2D  F01E         	call	_configura_baudrate_uart	;wreg free
  7353                           
  7354                           ;uart.c: 213: TXSTA = 0x20;
  7355  0055E8  0E20               	movlw	32
  7356  0055EA  6EAC               	movwf	4012,c	;volatile
  7357                           
  7358                           ;uart.c: 214: RCSTA = 0x90;
  7359  0055EC  0E90               	movlw	144
  7360  0055EE  6EAB               	movwf	4011,c	;volatile
  7361  0055F0  0012               	return		;funcret
  7362  0055F2                     __end_of_inicializa_uart:
  7363                           	opt stack 0
  7364                           tosu	equ	0xFFF
  7365                           tosh	equ	0xFFE
  7366                           tosl	equ	0xFFD
  7367                           pclath	equ	0xFFA
  7368                           tblptru	equ	0xFF8
  7369                           tblptrh	equ	0xFF7
  7370                           tblptrl	equ	0xFF6
  7371                           tablat	equ	0xFF5
  7372                           prodh	equ	0xFF4
  7373                           prodl	equ	0xFF3
  7374                           intcon	equ	0xFF2
  7375                           intcon2	equ	0xFF1
  7376                           intcon3	equ	0xFF0
  7377                           postinc0	equ	0xFEE
  7378                           wreg	equ	0xFE8
  7379                           indf1	equ	0xFE7
  7380                           postinc1	equ	0xFE6
  7381                           postdec1	equ	0xFE5
  7382                           plusw1	equ	0xFE3
  7383                           fsr1h	equ	0xFE2
  7384                           fsr1l	equ	0xFE1
  7385                           indf2	equ	0xFDF
  7386                           postinc2	equ	0xFDE
  7387                           postdec2	equ	0xFDD
  7388                           plusw2	equ	0xFDB
  7389                           fsr2h	equ	0xFDA
  7390                           fsr2l	equ	0xFD9
  7391                           status	equ	0xFD8
  7392                           
  7393 ;; *************** function _configura_baudrate_uart *****************
  7394 ;; Defined at:
  7395 ;;		line 50 in file "bibliotecas/uart.c"
  7396 ;; Parameters:    Size  Location     Type
  7397 ;;  baudrate        4   14[BANK0 ] const long 
  7398 ;; Auto vars:     Size  Location     Type
  7399 ;;  x               2   26[BANK0 ] unsigned int 
  7400 ;; Return value:  Size  Location     Type
  7401 ;;                  1    wreg      unsigned char 
  7402 ;; Registers used:
  7403 ;;		wreg, status,2, status,0, cstack
  7404 ;; Tracked objects:
  7405 ;;		On entry : 0/0
  7406 ;;		On exit  : 0/0
  7407 ;;		Unchanged: 0/0
  7408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7409 ;;      Params:         0       4       0       0       0       0       0       0       0
  7410 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7411 ;;      Temps:          0       8       0       0       0       0       0       0       0
  7412 ;;      Totals:         0      14       0       0       0       0       0       0       0
  7413 ;;Total ram usage:       14 bytes
  7414 ;; Hardware stack levels used:    1
  7415 ;; Hardware stack levels required when called:    4
  7416 ;; This function calls:
  7417 ;;		___aldiv
  7418 ;; This function is called by:
  7419 ;;		_inicializa_uart
  7420 ;; This function uses a non-reentrant model
  7421 ;;
  7422                           
  7423                           	psect	text28
  7424  003C5A                     __ptext28:
  7425                           	opt stack 0
  7426  003C5A                     _configura_baudrate_uart:
  7427                           	opt stack 25
  7428                           
  7429                           ;uart.c: 52: unsigned int x;
  7430                           ;uart.c: 54: x = (48000000 - baudrate*64)/(baudrate*64);
  7431                           
  7432                           ;incstack = 0
  7433  003C5A  C06E  F072         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  7434  003C5E  C06F  F073         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  7435  003C62  C070  F074         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  7436  003C66  C071  F075         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  7437  003C6A  0E06               	movlw	6
  7438  003C6C                     u14055:
  7439  003C6C  90D8               	bcf	status,0,c
  7440  003C6E  0100               	movlb	0	; () banked
  7441  003C70  3772               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  7442  003C72  3773               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  7443  003C74  3774               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  7444  003C76  3775               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  7445  003C78  2EE8               	decfsz	wreg,f,c
  7446  003C7A  D7F8               	goto	u14055
  7447  003C7C  1F72               	comf	??_configura_baudrate_uart& (0+255),f,b
  7448  003C7E  1F73               	comf	(??_configura_baudrate_uart+1)& (0+255),f,b
  7449  003C80  1F74               	comf	(??_configura_baudrate_uart+2)& (0+255),f,b
  7450  003C82  1F75               	comf	(??_configura_baudrate_uart+3)& (0+255),f,b
  7451  003C84  2B72               	incf	??_configura_baudrate_uart& (0+255),f,b
  7452  003C86  0E00               	movlw	0
  7453  003C88  2373               	addwfc	(??_configura_baudrate_uart+1)& (0+255),f,b
  7454  003C8A  2374               	addwfc	(??_configura_baudrate_uart+2)& (0+255),f,b
  7455  003C8C  2375               	addwfc	(??_configura_baudrate_uart+3)& (0+255),f,b
  7456  003C8E  0E00               	movlw	0
  7457  003C90  2572               	addwf	??_configura_baudrate_uart& (0+255),w,b
  7458  003C92  6F60               	movwf	___aldiv@dividend& (0+255),b
  7459  003C94  0E6C               	movlw	108
  7460  003C96  2173               	addwfc	(??_configura_baudrate_uart+1)& (0+255),w,b
  7461  003C98  6F61               	movwf	(___aldiv@dividend+1)& (0+255),b
  7462  003C9A  0EDC               	movlw	220
  7463  003C9C  2174               	addwfc	(??_configura_baudrate_uart+2)& (0+255),w,b
  7464  003C9E  6F62               	movwf	(___aldiv@dividend+2)& (0+255),b
  7465  003CA0  0E02               	movlw	2
  7466  003CA2  2175               	addwfc	(??_configura_baudrate_uart+3)& (0+255),w,b
  7467  003CA4  6F63               	movwf	(___aldiv@dividend+3)& (0+255),b
  7468  003CA6  C06E  F076         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  7469  003CAA  C06F  F077         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  7470  003CAE  C070  F078         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  7471  003CB2  C071  F079         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  7472  003CB6  0E06               	movlw	6
  7473  003CB8                     u14065:
  7474  003CB8  90D8               	bcf	status,0,c
  7475  003CBA  3776               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  7476  003CBC  3777               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  7477  003CBE  3778               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  7478  003CC0  3779               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  7479  003CC2  2EE8               	decfsz	wreg,f,c
  7480  003CC4  D7F9               	goto	u14065
  7481  003CC6  C076  F064         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  7482  003CCA  C077  F065         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  7483  003CCE  C078  F066         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  7484  003CD2  C079  F067         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  7485  003CD6  ECE4  F020         	call	___aldiv	;wreg free
  7486  003CDA  C060  F07A         	movff	?___aldiv,configura_baudrate_uart@x
  7487  003CDE  C061  F07B         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  7488                           
  7489                           ;uart.c: 55: if(x > 255)
  7490  003CE2  0100               	movlb	0	; () banked
  7491  003CE4  057B               	decf	(configura_baudrate_uart@x+1)& (0+255),w,b
  7492  003CE6  A0D8               	btfss	status,0,c
  7493  003CE8  D044               	goto	l932
  7494                           
  7495                           ; BSR set to: 0
  7496                           ;uart.c: 56: {
  7497                           ;uart.c: 57: x = (48000000 - baudrate*16)/(baudrate*16);
  7498  003CEA  C06E  F072         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  7499  003CEE  C06F  F073         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  7500  003CF2  C070  F074         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  7501  003CF6  C071  F075         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  7502  003CFA  0E04               	movlw	4
  7503  003CFC                     u14085:
  7504  003CFC  90D8               	bcf	status,0,c
  7505  003CFE  3772               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  7506  003D00  3773               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  7507  003D02  3774               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  7508  003D04  3775               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  7509  003D06  2EE8               	decfsz	wreg,f,c
  7510  003D08  D7F9               	goto	u14085
  7511  003D0A  1F72               	comf	??_configura_baudrate_uart& (0+255),f,b
  7512  003D0C  1F73               	comf	(??_configura_baudrate_uart+1)& (0+255),f,b
  7513  003D0E  1F74               	comf	(??_configura_baudrate_uart+2)& (0+255),f,b
  7514  003D10  1F75               	comf	(??_configura_baudrate_uart+3)& (0+255),f,b
  7515  003D12  2B72               	incf	??_configura_baudrate_uart& (0+255),f,b
  7516  003D14  0E00               	movlw	0
  7517  003D16  2373               	addwfc	(??_configura_baudrate_uart+1)& (0+255),f,b
  7518  003D18  2374               	addwfc	(??_configura_baudrate_uart+2)& (0+255),f,b
  7519  003D1A  2375               	addwfc	(??_configura_baudrate_uart+3)& (0+255),f,b
  7520  003D1C  0E00               	movlw	0
  7521  003D1E  2572               	addwf	??_configura_baudrate_uart& (0+255),w,b
  7522  003D20  6F60               	movwf	___aldiv@dividend& (0+255),b
  7523  003D22  0E6C               	movlw	108
  7524  003D24  2173               	addwfc	(??_configura_baudrate_uart+1)& (0+255),w,b
  7525  003D26  6F61               	movwf	(___aldiv@dividend+1)& (0+255),b
  7526  003D28  0EDC               	movlw	220
  7527  003D2A  2174               	addwfc	(??_configura_baudrate_uart+2)& (0+255),w,b
  7528  003D2C  6F62               	movwf	(___aldiv@dividend+2)& (0+255),b
  7529  003D2E  0E02               	movlw	2
  7530  003D30  2175               	addwfc	(??_configura_baudrate_uart+3)& (0+255),w,b
  7531  003D32  6F63               	movwf	(___aldiv@dividend+3)& (0+255),b
  7532  003D34  C06E  F076         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  7533  003D38  C06F  F077         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  7534  003D3C  C070  F078         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  7535  003D40  C071  F079         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  7536  003D44  0E04               	movlw	4
  7537  003D46                     u14095:
  7538  003D46  90D8               	bcf	status,0,c
  7539  003D48  3776               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  7540  003D4A  3777               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  7541  003D4C  3778               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  7542  003D4E  3779               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  7543  003D50  2EE8               	decfsz	wreg,f,c
  7544  003D52  D7F9               	goto	u14095
  7545  003D54  C076  F064         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  7546  003D58  C077  F065         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  7547  003D5C  C078  F066         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  7548  003D60  C079  F067         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  7549  003D64  ECE4  F020         	call	___aldiv	;wreg free
  7550  003D68  C060  F07A         	movff	?___aldiv,configura_baudrate_uart@x
  7551  003D6C  C061  F07B         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  7552                           
  7553                           ;uart.c: 58: BRGH = 1;
  7554  003D70  84AC               	bsf	4012,2,c	;volatile
  7555  003D72                     l932:
  7556                           
  7557                           ;uart.c: 59: }
  7558                           ;uart.c: 60: if(x < 256)
  7559  003D72  0100               	movlb	0	; () banked
  7560  003D74  057B               	decf	(configura_baudrate_uart@x+1)& (0+255),w,b
  7561  003D76  B0D8               	btfsc	status,0,c
  7562  003D78  0012               	return	
  7563                           
  7564                           ; BSR set to: 0
  7565                           ;uart.c: 61: {
  7566                           ;uart.c: 62: SPBRG = x;
  7567  003D7A  C07A  FFAF         	movff	configura_baudrate_uart@x,4015	;volatile
  7568                           
  7569                           ;uart.c: 63: SYNC = 0;
  7570  003D7E  98AC               	bcf	4012,4,c	;volatile
  7571                           
  7572                           ;uart.c: 64: SPEN = 1;
  7573  003D80  8EAB               	bsf	4011,7,c	;volatile
  7574                           
  7575                           ;uart.c: 65: TRISCbits.RC7 = 1;
  7576  003D82  8E94               	bsf	3988,7,c	;volatile
  7577                           
  7578                           ;uart.c: 66: TRISCbits.RC6 = 0;
  7579  003D84  9C94               	bcf	3988,6,c	;volatile
  7580                           
  7581                           ;uart.c: 67: CREN = 1;
  7582  003D86  88AB               	bsf	4011,4,c	;volatile
  7583                           
  7584                           ;uart.c: 68: TXEN = 1;
  7585  003D88  8AAC               	bsf	4012,5,c	;volatile
  7586                           
  7587                           ;uart.c: 70: return (1);
  7588                           ;	Return value of _configura_baudrate_uart is never used
  7589  003D8A  0012               	return	
  7590  003D8C                     __end_of_configura_baudrate_uart:
  7591                           	opt stack 0
  7592                           tosu	equ	0xFFF
  7593                           tosh	equ	0xFFE
  7594                           tosl	equ	0xFFD
  7595                           pclath	equ	0xFFA
  7596                           tblptru	equ	0xFF8
  7597                           tblptrh	equ	0xFF7
  7598                           tblptrl	equ	0xFF6
  7599                           tablat	equ	0xFF5
  7600                           prodh	equ	0xFF4
  7601                           prodl	equ	0xFF3
  7602                           intcon	equ	0xFF2
  7603                           intcon2	equ	0xFF1
  7604                           intcon3	equ	0xFF0
  7605                           postinc0	equ	0xFEE
  7606                           wreg	equ	0xFE8
  7607                           indf1	equ	0xFE7
  7608                           postinc1	equ	0xFE6
  7609                           postdec1	equ	0xFE5
  7610                           plusw1	equ	0xFE3
  7611                           fsr1h	equ	0xFE2
  7612                           fsr1l	equ	0xFE1
  7613                           indf2	equ	0xFDF
  7614                           postinc2	equ	0xFDE
  7615                           postdec2	equ	0xFDD
  7616                           plusw2	equ	0xFDB
  7617                           fsr2h	equ	0xFDA
  7618                           fsr2l	equ	0xFD9
  7619                           status	equ	0xFD8
  7620                           
  7621 ;; *************** function ___aldiv *****************
  7622 ;; Defined at:
  7623 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  7624 ;; Parameters:    Size  Location     Type
  7625 ;;  dividend        4    0[BANK0 ] long 
  7626 ;;  divisor         4    4[BANK0 ] long 
  7627 ;; Auto vars:     Size  Location     Type
  7628 ;;  quotient        4   10[BANK0 ] long 
  7629 ;;  sign            1    9[BANK0 ] unsigned char 
  7630 ;;  counter         1    8[BANK0 ] unsigned char 
  7631 ;; Return value:  Size  Location     Type
  7632 ;;                  4    0[BANK0 ] long 
  7633 ;; Registers used:
  7634 ;;		wreg, status,2, status,0
  7635 ;; Tracked objects:
  7636 ;;		On entry : 0/0
  7637 ;;		On exit  : 0/0
  7638 ;;		Unchanged: 0/0
  7639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7640 ;;      Params:         0       8       0       0       0       0       0       0       0
  7641 ;;      Locals:         0       6       0       0       0       0       0       0       0
  7642 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7643 ;;      Totals:         0      14       0       0       0       0       0       0       0
  7644 ;;Total ram usage:       14 bytes
  7645 ;; Hardware stack levels used:    1
  7646 ;; Hardware stack levels required when called:    3
  7647 ;; This function calls:
  7648 ;;		Nothing
  7649 ;; This function is called by:
  7650 ;;		_configura_baudrate_uart
  7651 ;; This function uses a non-reentrant model
  7652 ;;
  7653                           
  7654                           	psect	text29
  7655  0041C8                     __ptext29:
  7656                           	opt stack 0
  7657  0041C8                     ___aldiv:
  7658                           	opt stack 25
  7659                           
  7660                           ; BSR set to: 0
  7661                           ;incstack = 0
  7662  0041C8  0E00               	movlw	0
  7663  0041CA  0100               	movlb	0	; () banked
  7664  0041CC  6F69               	movwf	___aldiv@sign& (0+255),b
  7665                           
  7666                           ; BSR set to: 0
  7667  0041CE  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  7668  0041D0  D00A               	goto	l1551
  7669                           
  7670                           ; BSR set to: 0
  7671  0041D2  1F67               	comf	(___aldiv@divisor+3)& (0+255),f,b
  7672  0041D4  1F66               	comf	(___aldiv@divisor+2)& (0+255),f,b
  7673  0041D6  1F65               	comf	(___aldiv@divisor+1)& (0+255),f,b
  7674  0041D8  6D64               	negf	___aldiv@divisor& (0+255),b
  7675  0041DA  0E00               	movlw	0
  7676  0041DC  2365               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  7677  0041DE  2366               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  7678  0041E0  2367               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  7679                           
  7680                           ; BSR set to: 0
  7681  0041E2  0E01               	movlw	1
  7682  0041E4  6F69               	movwf	___aldiv@sign& (0+255),b
  7683  0041E6                     l1551:
  7684                           
  7685                           ; BSR set to: 0
  7686                           
  7687                           ; BSR set to: 0
  7688  0041E6  AF63               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  7689  0041E8  D00A               	goto	l1552
  7690                           
  7691                           ; BSR set to: 0
  7692  0041EA  1F63               	comf	(___aldiv@dividend+3)& (0+255),f,b
  7693  0041EC  1F62               	comf	(___aldiv@dividend+2)& (0+255),f,b
  7694  0041EE  1F61               	comf	(___aldiv@dividend+1)& (0+255),f,b
  7695  0041F0  6D60               	negf	___aldiv@dividend& (0+255),b
  7696  0041F2  0E00               	movlw	0
  7697  0041F4  2361               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  7698  0041F6  2362               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  7699  0041F8  2363               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  7700                           
  7701                           ; BSR set to: 0
  7702  0041FA  0E01               	movlw	1
  7703  0041FC  1B69               	xorwf	___aldiv@sign& (0+255),f,b
  7704  0041FE                     l1552:
  7705                           
  7706                           ; BSR set to: 0
  7707                           
  7708                           ; BSR set to: 0
  7709  0041FE  0E00               	movlw	0
  7710  004200  6F6A               	movwf	___aldiv@quotient& (0+255),b
  7711  004202  0E00               	movlw	0
  7712  004204  6F6B               	movwf	(___aldiv@quotient+1)& (0+255),b
  7713  004206  0E00               	movlw	0
  7714  004208  6F6C               	movwf	(___aldiv@quotient+2)& (0+255),b
  7715  00420A  0E00               	movlw	0
  7716  00420C  6F6D               	movwf	(___aldiv@quotient+3)& (0+255),b
  7717                           
  7718                           ; BSR set to: 0
  7719  00420E  5164               	movf	___aldiv@divisor& (0+255),w,b
  7720  004210  1165               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  7721  004212  1166               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  7722  004214  1167               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  7723  004216  B4D8               	btfsc	status,2,c
  7724  004218  D02A               	goto	l1559
  7725                           
  7726                           ; BSR set to: 0
  7727  00421A  0E01               	movlw	1
  7728  00421C  6F68               	movwf	___aldiv@counter& (0+255),b
  7729  00421E  D006               	goto	l1554
  7730  004220                     
  7731                           ; BSR set to: 0
  7732                           
  7733                           ; BSR set to: 0
  7734  004220  90D8               	bcf	status,0,c
  7735  004222  3764               	rlcf	___aldiv@divisor& (0+255),f,b
  7736  004224  3765               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  7737  004226  3766               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  7738  004228  3767               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  7739  00422A  2B68               	incf	___aldiv@counter& (0+255),f,b
  7740  00422C                     l1554:
  7741                           
  7742                           ; BSR set to: 0
  7743                           
  7744                           ; BSR set to: 0
  7745  00422C  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  7746  00422E  D7F8               	goto	l1555
  7747  004230                     u13930:
  7748                           
  7749                           ; BSR set to: 0
  7750                           
  7751                           ; BSR set to: 0
  7752                           
  7753                           ; BSR set to: 0
  7754  004230  90D8               	bcf	status,0,c
  7755  004232  376A               	rlcf	___aldiv@quotient& (0+255),f,b
  7756  004234  376B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  7757  004236  376C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  7758  004238  376D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  7759                           
  7760                           ; BSR set to: 0
  7761  00423A  5164               	movf	___aldiv@divisor& (0+255),w,b
  7762  00423C  5D60               	subwf	___aldiv@dividend& (0+255),w,b
  7763  00423E  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  7764  004240  5961               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  7765  004242  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  7766  004244  5962               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  7767  004246  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  7768  004248  5963               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  7769  00424A  A0D8               	btfss	status,0,c
  7770  00424C  D009               	goto	l1558
  7771                           
  7772                           ; BSR set to: 0
  7773  00424E  5164               	movf	___aldiv@divisor& (0+255),w,b
  7774  004250  5F60               	subwf	___aldiv@dividend& (0+255),f,b
  7775  004252  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  7776  004254  5B61               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  7777  004256  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  7778  004258  5B62               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  7779  00425A  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  7780  00425C  5B63               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  7781                           
  7782                           ; BSR set to: 0
  7783  00425E  816A               	bsf	___aldiv@quotient& (0+255),0,b
  7784  004260                     l1558:
  7785                           
  7786                           ; BSR set to: 0
  7787                           
  7788                           ; BSR set to: 0
  7789  004260  90D8               	bcf	status,0,c
  7790  004262  3367               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  7791  004264  3366               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  7792  004266  3365               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  7793  004268  3364               	rrcf	___aldiv@divisor& (0+255),f,b
  7794                           
  7795                           ; BSR set to: 0
  7796  00426A  2F68               	decfsz	___aldiv@counter& (0+255),f,b
  7797  00426C  D7E1               	goto	u13930
  7798  00426E                     l1559:
  7799                           
  7800                           ; BSR set to: 0
  7801                           
  7802                           ; BSR set to: 0
  7803                           
  7804                           ; BSR set to: 0
  7805  00426E  5169               	movf	___aldiv@sign& (0+255),w,b
  7806  004270  B4D8               	btfsc	status,2,c
  7807  004272  D008               	goto	l1560
  7808                           
  7809                           ; BSR set to: 0
  7810  004274  1F6D               	comf	(___aldiv@quotient+3)& (0+255),f,b
  7811  004276  1F6C               	comf	(___aldiv@quotient+2)& (0+255),f,b
  7812  004278  1F6B               	comf	(___aldiv@quotient+1)& (0+255),f,b
  7813  00427A  6D6A               	negf	___aldiv@quotient& (0+255),b
  7814  00427C  0E00               	movlw	0
  7815  00427E  236B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  7816  004280  236C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  7817  004282  236D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  7818  004284                     l1560:
  7819                           
  7820                           ; BSR set to: 0
  7821                           
  7822                           ; BSR set to: 0
  7823  004284  C06A  F060         	movff	___aldiv@quotient,?___aldiv
  7824  004288  C06B  F061         	movff	___aldiv@quotient+1,?___aldiv+1
  7825  00428C  C06C  F062         	movff	___aldiv@quotient+2,?___aldiv+2
  7826  004290  C06D  F063         	movff	___aldiv@quotient+3,?___aldiv+3
  7827  004294  0012               	return	
  7828  004296                     __end_of___aldiv:
  7829                           	opt stack 0
  7830                           tosu	equ	0xFFF
  7831                           tosh	equ	0xFFE
  7832                           tosl	equ	0xFFD
  7833                           pclath	equ	0xFFA
  7834                           tblptru	equ	0xFF8
  7835                           tblptrh	equ	0xFF7
  7836                           tblptrl	equ	0xFF6
  7837                           tablat	equ	0xFF5
  7838                           prodh	equ	0xFF4
  7839                           prodl	equ	0xFF3
  7840                           intcon	equ	0xFF2
  7841                           intcon2	equ	0xFF1
  7842                           intcon3	equ	0xFF0
  7843                           postinc0	equ	0xFEE
  7844                           wreg	equ	0xFE8
  7845                           indf1	equ	0xFE7
  7846                           postinc1	equ	0xFE6
  7847                           postdec1	equ	0xFE5
  7848                           plusw1	equ	0xFE3
  7849                           fsr1h	equ	0xFE2
  7850                           fsr1l	equ	0xFE1
  7851                           indf2	equ	0xFDF
  7852                           postinc2	equ	0xFDE
  7853                           postdec2	equ	0xFDD
  7854                           plusw2	equ	0xFDB
  7855                           fsr2h	equ	0xFDA
  7856                           fsr2l	equ	0xFD9
  7857                           status	equ	0xFD8
  7858                           
  7859 ;; *************** function _inicializa_SPI *****************
  7860 ;; Defined at:
  7861 ;;		line 49 in file "bibliotecas/SPI.c"
  7862 ;; Parameters:    Size  Location     Type
  7863 ;;		None
  7864 ;; Auto vars:     Size  Location     Type
  7865 ;;		None
  7866 ;; Return value:  Size  Location     Type
  7867 ;;                  1    wreg      void 
  7868 ;; Registers used:
  7869 ;;		wreg, status,2, status,0
  7870 ;; Tracked objects:
  7871 ;;		On entry : 0/0
  7872 ;;		On exit  : 0/0
  7873 ;;		Unchanged: 0/0
  7874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7875 ;;      Params:         0       0       0       0       0       0       0       0       0
  7876 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7877 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7878 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7879 ;;Total ram usage:        0 bytes
  7880 ;; Hardware stack levels used:    1
  7881 ;; Hardware stack levels required when called:    3
  7882 ;; This function calls:
  7883 ;;		Nothing
  7884 ;; This function is called by:
  7885 ;;		_escrita_sdcard
  7886 ;;		_sdcard_init
  7887 ;;		_leitura_sdcard
  7888 ;; This function uses a non-reentrant model
  7889 ;;
  7890                           
  7891                           	psect	text30
  7892  005614                     __ptext30:
  7893                           	opt stack 0
  7894  005614                     _inicializa_SPI:
  7895                           	opt stack 24
  7896                           
  7897                           ;SPI.c: 51: TRISBbits.RB1 = 0;
  7898                           
  7899                           ; BSR set to: 0
  7900                           ;incstack = 0
  7901  005614  9293               	bcf	3987,1,c	;volatile
  7902                           
  7903                           ;SPI.c: 52: TRISBbits.RB4 = 0;
  7904  005616  9893               	bcf	3987,4,c	;volatile
  7905                           
  7906                           ;SPI.c: 53: TRISBbits.RB0 = 1;
  7907  005618  8093               	bsf	3987,0,c	;volatile
  7908                           
  7909                           ;SPI.c: 54: TRISCbits.RC7 = 0;
  7910  00561A  9E94               	bcf	3988,7,c	;volatile
  7911                           
  7912                           ;SPI.c: 56: LATBbits.LATB4 = 1;
  7913  00561C  888A               	bsf	3978,4,c	;volatile
  7914                           
  7915                           ;SPI.c: 57: SSPSTAT &= 0x3F;
  7916  00561E  0E3F               	movlw	63
  7917  005620  16C7               	andwf	4039,f,c	;volatile
  7918                           
  7919                           ;SPI.c: 58: SSPCON1 = 0x00;
  7920  005622  0E00               	movlw	0
  7921  005624  6EC6               	movwf	4038,c	;volatile
  7922                           
  7923                           ;SPI.c: 60: SSPSTATbits.SMP = 0;
  7924  005626  9EC7               	bcf	4039,7,c	;volatile
  7925                           
  7926                           ;SPI.c: 61: SSPSTATbits.CKE = 1;
  7927  005628  8CC7               	bsf	4039,6,c	;volatile
  7928                           
  7929                           ;SPI.c: 62: SSPCON1bits.CKP = 0;
  7930  00562A  98C6               	bcf	4038,4,c	;volatile
  7931                           
  7932                           ;SPI.c: 64: SSPCON1 = 0b00000011;
  7933  00562C  0E03               	movlw	3
  7934  00562E  6EC6               	movwf	4038,c	;volatile
  7935                           
  7936                           ;SPI.c: 66: SSPCON1bits.SSPEN = 1;
  7937  005630  8AC6               	bsf	4038,5,c	;volatile
  7938  005632  0012               	return		;funcret
  7939  005634                     __end_of_inicializa_SPI:
  7940                           	opt stack 0
  7941                           tosu	equ	0xFFF
  7942                           tosh	equ	0xFFE
  7943                           tosl	equ	0xFFD
  7944                           pclath	equ	0xFFA
  7945                           tblptru	equ	0xFF8
  7946                           tblptrh	equ	0xFF7
  7947                           tblptrl	equ	0xFF6
  7948                           tablat	equ	0xFF5
  7949                           prodh	equ	0xFF4
  7950                           prodl	equ	0xFF3
  7951                           intcon	equ	0xFF2
  7952                           intcon2	equ	0xFF1
  7953                           intcon3	equ	0xFF0
  7954                           postinc0	equ	0xFEE
  7955                           wreg	equ	0xFE8
  7956                           indf1	equ	0xFE7
  7957                           postinc1	equ	0xFE6
  7958                           postdec1	equ	0xFE5
  7959                           plusw1	equ	0xFE3
  7960                           fsr1h	equ	0xFE2
  7961                           fsr1l	equ	0xFE1
  7962                           indf2	equ	0xFDF
  7963                           postinc2	equ	0xFDE
  7964                           postdec2	equ	0xFDD
  7965                           plusw2	equ	0xFDB
  7966                           fsr2h	equ	0xFDA
  7967                           fsr2l	equ	0xFD9
  7968                           status	equ	0xFD8
  7969                           
  7970 ;; *************** function _fprintf *****************
  7971 ;; Defined at:
  7972 ;;		line 1808 in file "bibliotecas/tff.c"
  7973 ;; Parameters:    Size  Location     Type
  7974 ;;  fil             2    6[BANK1 ] PTR struct _FIL
  7975 ;;		 -> fil(28), 
  7976 ;;  str             2    8[BANK1 ] PTR const unsigned char 
  7977 ;;		 -> STR_21(21), 
  7978 ;; Auto vars:     Size  Location     Type
  7979 ;;  s              16    0[BANK3 ] unsigned char [16]
  7980 ;;  val             4   24[BANK3 ] unsigned long 
  7981 ;;  i               2   32[BANK3 ] int 
  7982 ;;  cc              2   30[BANK3 ] int 
  7983 ;;  arp             2   28[BANK3 ] PTR void [1]
  7984 ;;		 -> ?_fprintf(2), 
  7985 ;;  w               2   20[BANK3 ] int 
  7986 ;;  res             2   16[BANK3 ] int 
  7987 ;;  c               1   34[BANK3 ] unsigned char 
  7988 ;;  r               1   23[BANK3 ] unsigned char 
  7989 ;;  f               1   22[BANK3 ] unsigned char 
  7990 ;; Return value:  Size  Location     Type
  7991 ;;                  2    6[BANK1 ] int 
  7992 ;; Registers used:
  7993 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7994 ;; Tracked objects:
  7995 ;;		On entry : 0/0
  7996 ;;		On exit  : 0/0
  7997 ;;		Unchanged: 0/0
  7998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7999 ;;      Params:         0       0      12       0       0       0       0       0       0
  8000 ;;      Locals:         0       0       0       0      35       0       0       0       0
  8001 ;;      Temps:          0       0       2       0       0       0       0       0       0
  8002 ;;      Totals:         0       0      14       0      35       0       0       0       0
  8003 ;;Total ram usage:       49 bytes
  8004 ;; Hardware stack levels used:    1
  8005 ;; Hardware stack levels required when called:   14
  8006 ;; This function calls:
  8007 ;;		___lldiv
  8008 ;;		___llmod
  8009 ;;		___wmul
  8010 ;;		_fputc
  8011 ;;		_fputs
  8012 ;; This function is called by:
  8013 ;;		_escrita_sdcard
  8014 ;; This function uses a non-reentrant model
  8015 ;;
  8016                           
  8017                           	psect	text31
  8018  00188C                     __ptext31:
  8019                           	opt stack 0
  8020  00188C                     _fprintf:
  8021                           	opt stack 13
  8022                           
  8023                           ;tff.c: 1814: va_list arp;
  8024                           ;tff.c: 1815: UCHAR c, f, r;
  8025                           ;tff.c: 1816: ULONG val;
  8026                           ;tff.c: 1817: char s[16];
  8027                           ;tff.c: 1818: int i, w, res, cc;
  8028                           ;tff.c: 1821: *arp = __va_start();
  8029                           
  8030                           ;incstack = 0
  8031  00188C  0EDE               	movlw	low (?_fprintf+4)
  8032  00188E  0103               	movlb	3	; () banked
  8033  001890  6F1C               	movwf	fprintf@arp& (0+255),b
  8034  001892  0E01               	movlw	high (?_fprintf+4)
  8035  001894  6F1D               	movwf	(fprintf@arp+1)& (0+255),b
  8036                           
  8037                           ; BSR set to: 3
  8038                           ;tff.c: 1823: for (cc = res = 0; cc != -1; res += cc) {
  8039  001896  0E00               	movlw	0
  8040  001898  6F11               	movwf	(fprintf@res+1)& (0+255),b
  8041  00189A  0E00               	movlw	0
  8042  00189C  6F10               	movwf	fprintf@res& (0+255),b
  8043  00189E  C310  F31E         	movff	fprintf@res,fprintf@cc
  8044  0018A2  C311  F31F         	movff	fprintf@res+1,fprintf@cc+1
  8045                           
  8046                           ; BSR set to: 3
  8047  0018A6  291E               	incf	fprintf@cc& (0+255),w,b
  8048  0018A8  E103               	bnz	l11460
  8049  0018AA  291F               	incf	(fprintf@cc+1)& (0+255),w,b
  8050  0018AC  B4D8               	btfsc	status,2,c
  8051  0018AE  0012               	return	
  8052  0018B0                     l11460:
  8053                           
  8054                           ; BSR set to: 3
  8055                           ;tff.c: 1824: c = *str++;
  8056  0018B0  C1DC  FFF6         	movff	fprintf@str,tblptrl
  8057  0018B4  C1DD  FFF7         	movff	fprintf@str+1,tblptrh
  8058  0018B8                     	if	0	;tblptru may be non-zero
  8059  0018B8                     	endif
  8060  0018B8                     	if	0	;tblptru may be non-zero
  8061  0018B8                     	endif
  8062  0018B8  0008               	tblrd		*
  8063  0018BA  CFF5 F322          	movff	tablat,fprintf@c
  8064                           
  8065                           ; BSR set to: 3
  8066  0018BE  0101               	movlb	1	; () banked
  8067  0018C0  4BDC               	infsnz	fprintf@str& (0+255),f,b
  8068  0018C2  2BDD               	incf	(fprintf@str+1)& (0+255),f,b
  8069                           
  8070                           ; BSR set to: 1
  8071                           ;tff.c: 1825: if (c == 0) break;
  8072  0018C4  0103               	movlb	3	; () banked
  8073  0018C6  5122               	movf	fprintf@c& (0+255),w,b
  8074  0018C8  B4D8               	btfsc	status,2,c
  8075  0018CA  0012               	return	
  8076                           
  8077                           ; BSR set to: 3
  8078                           ;tff.c: 1826: if (c != '%') {
  8079                           
  8080                           ; BSR set to: 3
  8081                           
  8082                           ; BSR set to: 3
  8083  0018CC  0E25               	movlw	37
  8084  0018CE  1922               	xorwf	fprintf@c& (0+255),w,b
  8085  0018D0  B4D8               	btfsc	status,2,c
  8086  0018D2  D015               	goto	l1418
  8087                           
  8088                           ; BSR set to: 3
  8089                           ;tff.c: 1827: cc = fputc(c, fil);
  8090  0018D4  C322  F0E5         	movff	fprintf@c,fputc@chr
  8091  0018D8  0100               	movlb	0	; () banked
  8092  0018DA  6BE6               	clrf	(fputc@chr+1)& (0+255),b
  8093  0018DC  C1DA  F0E7         	movff	fprintf@fil,fputc@fil
  8094  0018E0  C1DB  F0E8         	movff	fprintf@fil+1,fputc@fil+1
  8095  0018E4  ECEA  F027         	call	_fputc	;wreg free
  8096  0018E8  C0E5  F31E         	movff	?_fputc,fprintf@cc
  8097  0018EC  C0E6  F31F         	movff	?_fputc+1,fprintf@cc+1
  8098                           
  8099                           ;tff.c: 1828: if (cc != -1) cc = 1;
  8100  0018F0  0103               	movlb	3	; () banked
  8101  0018F2  291E               	incf	fprintf@cc& (0+255),w,b
  8102  0018F4  E103               	bnz	u15180
  8103  0018F6  291F               	incf	(fprintf@cc+1)& (0+255),w,b
  8104  0018F8  B4D8               	btfsc	status,2,c
  8105  0018FA  D1AE               	goto	l1420
  8106  0018FC                     u15180:
  8107  0018FC  D096               	goto	u15250
  8108  0018FE                     l1418:
  8109                           
  8110                           ; BSR set to: 3
  8111                           ;tff.c: 1830: }
  8112                           ;tff.c: 1831: w = f = 0;
  8113                           
  8114                           ; BSR set to: 3
  8115  0018FE  0E00               	movlw	0
  8116  001900  6F16               	movwf	fprintf@f& (0+255),b
  8117  001902  C316  F314         	movff	fprintf@f,fprintf@w
  8118  001906  6B15               	clrf	(fprintf@w+1)& (0+255),b
  8119                           
  8120                           ; BSR set to: 3
  8121                           ;tff.c: 1832: c = *str++;
  8122  001908  C1DC  FFF6         	movff	fprintf@str,tblptrl
  8123  00190C  C1DD  FFF7         	movff	fprintf@str+1,tblptrh
  8124  001910                     	if	0	;tblptru may be non-zero
  8125  001910                     	endif
  8126  001910                     	if	0	;tblptru may be non-zero
  8127  001910                     	endif
  8128  001910  0008               	tblrd		*
  8129  001912  CFF5 F322          	movff	tablat,fprintf@c
  8130                           
  8131                           ; BSR set to: 3
  8132  001916  0101               	movlb	1	; () banked
  8133  001918  4BDC               	infsnz	fprintf@str& (0+255),f,b
  8134  00191A  2BDD               	incf	(fprintf@str+1)& (0+255),f,b
  8135                           
  8136                           ; BSR set to: 1
  8137                           ;tff.c: 1833: if (c == '0') {
  8138  00191C  0E30               	movlw	48
  8139  00191E  0103               	movlb	3	; () banked
  8140  001920  1922               	xorwf	fprintf@c& (0+255),w,b
  8141  001922  A4D8               	btfss	status,2,c
  8142  001924  D02E               	goto	l1422
  8143                           
  8144                           ; BSR set to: 3
  8145                           ;tff.c: 1834: f = 1; c = *str++;
  8146  001926  0E01               	movlw	1
  8147  001928  6F16               	movwf	fprintf@f& (0+255),b
  8148  00192A  D021               	goto	l11492
  8149  00192C                     
  8150                           ;tff.c: 1837: w = w * 10 + (c - '0');
  8151                           
  8152                           ; BSR set to: 1
  8153  00192C  C314  F060         	movff	fprintf@w,___wmul@multiplier
  8154  001930  C315  F061         	movff	fprintf@w+1,___wmul@multiplier+1
  8155  001934  0E00               	movlw	0
  8156  001936  0100               	movlb	0	; () banked
  8157  001938  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8158  00193A  0E0A               	movlw	10
  8159  00193C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  8160  00193E  ECD3  F02A         	call	___wmul	;wreg free
  8161  001942  0103               	movlb	3	; () banked
  8162  001944  5122               	movf	fprintf@c& (0+255),w,b
  8163  001946  0101               	movlb	1	; () banked
  8164  001948  6FE6               	movwf	??_fprintf& (0+255),b
  8165  00194A  6BE7               	clrf	(??_fprintf+1)& (0+255),b
  8166  00194C  0100               	movlb	0	; () banked
  8167  00194E  5160               	movf	?___wmul& (0+255),w,b
  8168  001950  0101               	movlb	1	; () banked
  8169  001952  27E6               	addwf	??_fprintf& (0+255),f,b
  8170  001954  0100               	movlb	0	; () banked
  8171  001956  5161               	movf	(?___wmul+1)& (0+255),w,b
  8172  001958  0101               	movlb	1	; () banked
  8173  00195A  23E7               	addwfc	(??_fprintf+1)& (0+255),f,b
  8174  00195C  0ED0               	movlw	208
  8175  00195E  25E6               	addwf	??_fprintf& (0+255),w,b
  8176  001960  0103               	movlb	3	; () banked
  8177  001962  6F14               	movwf	fprintf@w& (0+255),b
  8178  001964  0EFF               	movlw	255
  8179  001966  0101               	movlb	1	; () banked
  8180  001968  21E7               	addwfc	(??_fprintf+1)& (0+255),w,b
  8181  00196A  0103               	movlb	3	; () banked
  8182  00196C  6F15               	movwf	(fprintf@w+1)& (0+255),b
  8183  00196E                     l11492:
  8184                           
  8185                           ; BSR set to: 3
  8186                           ;tff.c: 1838: c = *str++;
  8187  00196E  C1DC  FFF6         	movff	fprintf@str,tblptrl
  8188  001972  C1DD  FFF7         	movff	fprintf@str+1,tblptrh
  8189  001976                     	if	0	;tblptru may be non-zero
  8190  001976                     	endif
  8191  001976                     	if	0	;tblptru may be non-zero
  8192  001976                     	endif
  8193  001976  0008               	tblrd		*
  8194  001978  CFF5 F322          	movff	tablat,fprintf@c
  8195                           
  8196                           ; BSR set to: 3
  8197  00197C  0101               	movlb	1	; () banked
  8198  00197E  4BDC               	infsnz	fprintf@str& (0+255),f,b
  8199  001980  2BDD               	incf	(fprintf@str+1)& (0+255),f,b
  8200  001982                     l1422:
  8201                           
  8202                           ; BSR set to: 1
  8203  001982  0E2F               	movlw	47
  8204  001984  0103               	movlb	3	; () banked
  8205  001986  6522               	cpfsgt	fprintf@c& (0+255),b
  8206  001988  D003               	goto	u15210
  8207                           
  8208                           ; BSR set to: 3
  8209  00198A  0E39               	movlw	57
  8210  00198C  6522               	cpfsgt	fprintf@c& (0+255),b
  8211  00198E  D7CE               	goto	l1423
  8212  001990                     u15210:
  8213                           
  8214                           ; BSR set to: 3
  8215                           ;tff.c: 1839: }
  8216                           ;tff.c: 1840: if (c == 'l') {
  8217                           
  8218                           ; BSR set to: 3
  8219                           
  8220                           ; BSR set to: 3
  8221  001990  0E6C               	movlw	108
  8222  001992  1922               	xorwf	fprintf@c& (0+255),w,b
  8223  001994  A4D8               	btfss	status,2,c
  8224  001996  D00B               	goto	l1427
  8225                           
  8226                           ; BSR set to: 3
  8227                           ;tff.c: 1841: f |= 2; c = *str++;
  8228  001998  8316               	bsf	fprintf@f& (0+255),1,b
  8229                           
  8230                           ; BSR set to: 3
  8231  00199A  C1DC  FFF6         	movff	fprintf@str,tblptrl
  8232  00199E  C1DD  FFF7         	movff	fprintf@str+1,tblptrh
  8233  0019A2                     	if	0	;tblptru may be non-zero
  8234  0019A2                     	endif
  8235  0019A2                     	if	0	;tblptru may be non-zero
  8236  0019A2                     	endif
  8237  0019A2  0008               	tblrd		*
  8238  0019A4  CFF5 F322          	movff	tablat,fprintf@c
  8239                           
  8240                           ; BSR set to: 3
  8241  0019A8  0101               	movlb	1	; () banked
  8242  0019AA  4BDC               	infsnz	fprintf@str& (0+255),f,b
  8243  0019AC  2BDD               	incf	(fprintf@str+1)& (0+255),f,b
  8244  0019AE                     l1427:
  8245                           
  8246                           ;tff.c: 1842: }
  8247                           ;tff.c: 1843: if (c == 's') {
  8248                           
  8249                           ; BSR set to: 1
  8250  0019AE  0E73               	movlw	115
  8251  0019B0  0103               	movlb	3	; () banked
  8252  0019B2  1922               	xorwf	fprintf@c& (0+255),w,b
  8253  0019B4  A4D8               	btfss	status,2,c
  8254  0019B6  D018               	goto	l1428
  8255                           
  8256                           ; BSR set to: 3
  8257                           ;tff.c: 1844: cc = fputs((*(char* *)__va_arg((*(char* **)arp), (char*)0)), fil);
  8258  0019B8  C31C  FFD9         	movff	fprintf@arp,fsr2l
  8259  0019BC  C31D  FFDA         	movff	fprintf@arp+1,fsr2h
  8260  0019C0  CFDE F1D4          	movff	postinc2,fputs@str
  8261  0019C4  CFDD F1D5          	movff	postdec2,fputs@str+1
  8262  0019C8  C1DA  F1D6         	movff	fprintf@fil,fputs@fil
  8263  0019CC  C1DB  F1D7         	movff	fprintf@fil+1,fputs@fil+1
  8264  0019D0  EC34  F027         	call	_fputs	;wreg free
  8265  0019D4  C1D4  F31E         	movff	?_fputs,fprintf@cc
  8266  0019D8  C1D5  F31F         	movff	?_fputs+1,fprintf@cc+1
  8267  0019DC  0E02               	movlw	2
  8268  0019DE  0103               	movlb	3	; () banked
  8269  0019E0  271C               	addwf	fprintf@arp& (0+255),f,b
  8270  0019E2  0E00               	movlw	0
  8271  0019E4  231D               	addwfc	(fprintf@arp+1)& (0+255),f,b
  8272                           
  8273                           ;tff.c: 1845: continue;
  8274  0019E6  D138               	goto	l1420
  8275  0019E8                     l1428:
  8276                           
  8277                           ; BSR set to: 3
  8278                           ;tff.c: 1846: }
  8279                           ;tff.c: 1847: if (c == 'c') {
  8280                           
  8281                           ; BSR set to: 3
  8282  0019E8  0E63               	movlw	99
  8283  0019EA  1922               	xorwf	fprintf@c& (0+255),w,b
  8284  0019EC  A4D8               	btfss	status,2,c
  8285  0019EE  D022               	goto	l1429
  8286                           
  8287                           ; BSR set to: 3
  8288                           ;tff.c: 1848: cc = fputc((*(char *)__va_arg((*(char **)arp), (char)0)), fil);
  8289  0019F0  C31C  FFD9         	movff	fprintf@arp,fsr2l
  8290  0019F4  C31D  FFDA         	movff	fprintf@arp+1,fsr2h
  8291  0019F8  50DF               	movf	indf2,w,c
  8292  0019FA  0101               	movlb	1	; () banked
  8293  0019FC  6FE6               	movwf	??_fprintf& (0+255),b
  8294  0019FE  51E6               	movf	??_fprintf& (0+255),w,b
  8295  001A00  0100               	movlb	0	; () banked
  8296  001A02  6FE5               	movwf	fputc@chr& (0+255),b
  8297  001A04  6BE6               	clrf	(fputc@chr+1)& (0+255),b
  8298  001A06  C1DA  F0E7         	movff	fprintf@fil,fputc@fil
  8299  001A0A  C1DB  F0E8         	movff	fprintf@fil+1,fputc@fil+1
  8300  001A0E  ECEA  F027         	call	_fputc	;wreg free
  8301  001A12  C0E5  F31E         	movff	?_fputc,fprintf@cc
  8302  001A16  C0E6  F31F         	movff	?_fputc+1,fprintf@cc+1
  8303  001A1A  0E02               	movlw	2
  8304  001A1C  0103               	movlb	3	; () banked
  8305  001A1E  271C               	addwf	fprintf@arp& (0+255),f,b
  8306  001A20  0E00               	movlw	0
  8307  001A22  231D               	addwfc	(fprintf@arp+1)& (0+255),f,b
  8308                           
  8309                           ; BSR set to: 3
  8310                           ;tff.c: 1849: if (cc != -1) cc = 1;
  8311  001A24  291E               	incf	fprintf@cc& (0+255),w,b
  8312  001A26  E101               	bnz	u15250
  8313  001A28  D766               	goto	L1
  8314  001A2A                     u15250:
  8315                           
  8316                           ; BSR set to: 3
  8317  001A2A  0E00               	movlw	0
  8318  001A2C  6F1F               	movwf	(fprintf@cc+1)& (0+255),b
  8319  001A2E  0E01               	movlw	1
  8320  001A30  6F1E               	movwf	fprintf@cc& (0+255),b
  8321                           
  8322                           ; BSR set to: 3
  8323                           ;tff.c: 1850: continue;
  8324  001A32  D112               	goto	l1420
  8325  001A34                     l1429:
  8326                           
  8327                           ; BSR set to: 3
  8328                           ;tff.c: 1851: }
  8329                           ;tff.c: 1852: r = 0;
  8330                           
  8331                           ; BSR set to: 3
  8332  001A34  0E00               	movlw	0
  8333  001A36  6F17               	movwf	fprintf@r& (0+255),b
  8334                           
  8335                           ; BSR set to: 3
  8336                           ;tff.c: 1853: if (c == 'd') r = 10;
  8337  001A38  0E64               	movlw	100
  8338  001A3A  1922               	xorwf	fprintf@c& (0+255),w,b
  8339  001A3C  A4D8               	btfss	status,2,c
  8340  001A3E  D002               	goto	l1431
  8341                           
  8342                           ; BSR set to: 3
  8343  001A40  0E0A               	movlw	10
  8344  001A42  6F17               	movwf	fprintf@r& (0+255),b
  8345  001A44                     l1431:
  8346                           
  8347                           ; BSR set to: 3
  8348                           ;tff.c: 1854: if (c == 'u') r = 10;
  8349                           
  8350                           ; BSR set to: 3
  8351  001A44  0E75               	movlw	117
  8352  001A46  1922               	xorwf	fprintf@c& (0+255),w,b
  8353  001A48  A4D8               	btfss	status,2,c
  8354  001A4A  D002               	goto	l1432
  8355                           
  8356                           ; BSR set to: 3
  8357  001A4C  0E0A               	movlw	10
  8358  001A4E  6F17               	movwf	fprintf@r& (0+255),b
  8359  001A50                     l1432:
  8360                           
  8361                           ; BSR set to: 3
  8362                           ;tff.c: 1855: if (c == 'X') r = 16;
  8363                           
  8364                           ; BSR set to: 3
  8365  001A50  0E58               	movlw	88
  8366  001A52  1922               	xorwf	fprintf@c& (0+255),w,b
  8367  001A54  A4D8               	btfss	status,2,c
  8368  001A56  D002               	goto	l1433
  8369                           
  8370                           ; BSR set to: 3
  8371  001A58  0E10               	movlw	16
  8372  001A5A  6F17               	movwf	fprintf@r& (0+255),b
  8373  001A5C                     l1433:
  8374                           
  8375                           ; BSR set to: 3
  8376                           ;tff.c: 1856: if (r == 0) break;
  8377  001A5C  5117               	movf	fprintf@r& (0+255),w,b
  8378  001A5E  B4D8               	btfsc	status,2,c
  8379  001A60  0012               	return	
  8380                           
  8381                           ; BSR set to: 3
  8382                           ;tff.c: 1857: if (f & 2) {
  8383                           
  8384                           ; BSR set to: 3
  8385  001A62  A316               	btfss	fprintf@f& (0+255),1,b
  8386  001A64  D00E               	goto	l1435
  8387                           
  8388                           ; BSR set to: 3
  8389                           ;tff.c: 1858: val = (ULONG)(*(long *)__va_arg((*(long **)arp), (long)0));
  8390  001A66  C31C  FFD9         	movff	fprintf@arp,fsr2l
  8391  001A6A  C31D  FFDA         	movff	fprintf@arp+1,fsr2h
  8392  001A6E  CFDE F318          	movff	postinc2,fprintf@val
  8393  001A72  CFDE F319          	movff	postinc2,fprintf@val+1
  8394  001A76  CFDE F31A          	movff	postinc2,fprintf@val+2
  8395  001A7A  CFDE F31B          	movff	postinc2,fprintf@val+3
  8396                           
  8397                           ; BSR set to: 3
  8398  001A7E  0E04               	movlw	4
  8399  001A80  D021               	goto	L5
  8400  001A82                     l1435:
  8401                           
  8402                           ; BSR set to: 3
  8403                           ;tff.c: 1860: val = (c == 'd') ? (ULONG)(long)(*(int *)__va_arg((*(int **)arp), (int)0))
      +                           : (ULONG)(*(unsigned int *)__va_arg((*(unsigned int **)arp), (unsigned int)0));
  8404                           
  8405                           ; BSR set to: 3
  8406  001A82  0E64               	movlw	100
  8407  001A84  1922               	xorwf	fprintf@c& (0+255),w,b
  8408  001A86  B4D8               	btfsc	status,2,c
  8409  001A88  D00F               	goto	l1438
  8410                           
  8411                           ; BSR set to: 3
  8412  001A8A  C31C  FFD9         	movff	fprintf@arp,fsr2l
  8413  001A8E  C31D  FFDA         	movff	fprintf@arp+1,fsr2h
  8414  001A92  CFDE F1E6          	movff	postinc2,??_fprintf
  8415  001A96  CFDD F1E7          	movff	postdec2,??_fprintf+1
  8416  001A9A  C1E6  F318         	movff	??_fprintf,fprintf@val
  8417  001A9E  C1E7  F319         	movff	??_fprintf+1,fprintf@val+1
  8418  001AA2  6B1A               	clrf	(fprintf@val+2)& (0+255),b
  8419  001AA4  6B1B               	clrf	(fprintf@val+3)& (0+255),b
  8420  001AA6  D00D               	goto	l11552
  8421  001AA8                     l1438:
  8422                           
  8423                           ; BSR set to: 3
  8424                           
  8425                           ; BSR set to: 3
  8426  001AA8  C31C  FFD9         	movff	fprintf@arp,fsr2l
  8427  001AAC  C31D  FFDA         	movff	fprintf@arp+1,fsr2h
  8428  001AB0  CFDE F318          	movff	postinc2,fprintf@val
  8429  001AB4  CFDD F319          	movff	postdec2,fprintf@val+1
  8430  001AB8  0E00               	movlw	0
  8431  001ABA  BF19               	btfsc	(fprintf@val+1)& (0+255),7,b
  8432  001ABC  0EFF               	movlw	-1
  8433  001ABE  6F1A               	movwf	(fprintf@val+2)& (0+255),b
  8434  001AC0  6F1B               	movwf	(fprintf@val+3)& (0+255),b
  8435  001AC2                     l11552:
  8436                           
  8437                           ; BSR set to: 3
  8438  001AC2  0E02               	movlw	2
  8439  001AC4                     L5:
  8440  001AC4  271C               	addwf	fprintf@arp& (0+255),f,b
  8441  001AC6  0E00               	movlw	0
  8442  001AC8  231D               	addwfc	(fprintf@arp+1)& (0+255),f,b
  8443                           
  8444                           ; BSR set to: 3
  8445                           ;tff.c: 1861: }
  8446                           ;tff.c: 1863: if (c == 'd') {
  8447                           
  8448                           ; BSR set to: 3
  8449                           
  8450                           ; BSR set to: 3
  8451  001ACA  0E64               	movlw	100
  8452  001ACC  1922               	xorwf	fprintf@c& (0+255),w,b
  8453  001ACE  A4D8               	btfss	status,2,c
  8454  001AD0  D00D               	goto	l1442
  8455                           
  8456                           ; BSR set to: 3
  8457                           ;tff.c: 1864: if (val >= 0x80000000) {
  8458  001AD2  0E80               	movlw	128
  8459  001AD4  5D1B               	subwf	(fprintf@val+3)& (0+255),w,b
  8460  001AD6  A0D8               	btfss	status,0,c
  8461  001AD8  D009               	goto	l1442
  8462                           
  8463                           ; BSR set to: 3
  8464                           ;tff.c: 1865: val = 0 - val;
  8465  001ADA  1F1B               	comf	(fprintf@val+3)& (0+255),f,b
  8466  001ADC  1F1A               	comf	(fprintf@val+2)& (0+255),f,b
  8467  001ADE  1F19               	comf	(fprintf@val+1)& (0+255),f,b
  8468  001AE0  6D18               	negf	fprintf@val& (0+255),b
  8469  001AE2  0E00               	movlw	0
  8470  001AE4  2319               	addwfc	(fprintf@val+1)& (0+255),f,b
  8471  001AE6  231A               	addwfc	(fprintf@val+2)& (0+255),f,b
  8472  001AE8  231B               	addwfc	(fprintf@val+3)& (0+255),f,b
  8473                           
  8474                           ;tff.c: 1866: f |= 4;
  8475  001AEA  8516               	bsf	fprintf@f& (0+255),2,b
  8476  001AEC                     l1442:
  8477                           
  8478                           ; BSR set to: 3
  8479                           ;tff.c: 1867: }
  8480                           ;tff.c: 1868: }
  8481                           ;tff.c: 1869: i = sizeof(s) - 1; s[i] = 0;
  8482                           
  8483                           ; BSR set to: 3
  8484                           
  8485                           ; BSR set to: 3
  8486  001AEC  0E00               	movlw	0
  8487  001AEE  6F21               	movwf	(fprintf@i+1)& (0+255),b
  8488  001AF0  0E0F               	movlw	15
  8489  001AF2  6F20               	movwf	fprintf@i& (0+255),b
  8490                           
  8491                           ; BSR set to: 3
  8492  001AF4  0E00               	movlw	low fprintf@s
  8493  001AF6  2520               	addwf	fprintf@i& (0+255),w,b
  8494  001AF8  6ED9               	movwf	fsr2l,c
  8495  001AFA  0E03               	movlw	high fprintf@s
  8496  001AFC  2121               	addwfc	(fprintf@i+1)& (0+255),w,b
  8497  001AFE  6EDA               	movwf	fsr2h,c
  8498  001B00  0E00               	movlw	0
  8499  001B02  6EDF               	movwf	indf2,c
  8500  001B04                     
  8501                           ; BSR set to: 3
  8502                           ;tff.c: 1871: c = (UCHAR)(val % r + '0');
  8503                           
  8504                           ; BSR set to: 3
  8505  001B04  C318  F060         	movff	fprintf@val,___llmod@dividend
  8506  001B08  C319  F061         	movff	fprintf@val+1,___llmod@dividend+1
  8507  001B0C  C31A  F062         	movff	fprintf@val+2,___llmod@dividend+2
  8508  001B10  C31B  F063         	movff	fprintf@val+3,___llmod@dividend+3
  8509  001B14  5117               	movf	fprintf@r& (0+255),w,b
  8510  001B16  0100               	movlb	0	; () banked
  8511  001B18  6F64               	movwf	___llmod@divisor& (0+255),b
  8512  001B1A  6B65               	clrf	(___llmod@divisor+1)& (0+255),b
  8513  001B1C  6B66               	clrf	(___llmod@divisor+2)& (0+255),b
  8514  001B1E  6B67               	clrf	(___llmod@divisor+3)& (0+255),b
  8515  001B20  ECCC  F026         	call	___llmod	;wreg free
  8516  001B24  0100               	movlb	0	; () banked
  8517  001B26  5160               	movf	?___llmod& (0+255),w,b
  8518  001B28  0F30               	addlw	48
  8519  001B2A  0103               	movlb	3	; () banked
  8520  001B2C  6F22               	movwf	fprintf@c& (0+255),b
  8521                           
  8522                           ; BSR set to: 3
  8523                           ;tff.c: 1872: if (c > '9') c += 7;
  8524  001B2E  0E39               	movlw	57
  8525  001B30  6522               	cpfsgt	fprintf@c& (0+255),b
  8526  001B32  D002               	goto	l1444
  8527                           
  8528                           ; BSR set to: 3
  8529  001B34  0E07               	movlw	7
  8530  001B36  2722               	addwf	fprintf@c& (0+255),f,b
  8531  001B38                     l1444:
  8532                           
  8533                           ; BSR set to: 3
  8534                           ;tff.c: 1873: s[--i] = c;
  8535                           
  8536                           ; BSR set to: 3
  8537  001B38  0720               	decf	fprintf@i& (0+255),f,b
  8538  001B3A  A0D8               	btfss	status,0,c
  8539  001B3C  0721               	decf	(fprintf@i+1)& (0+255),f,b
  8540  001B3E  0E00               	movlw	low fprintf@s
  8541  001B40  2520               	addwf	fprintf@i& (0+255),w,b
  8542  001B42  6ED9               	movwf	fsr2l,c
  8543  001B44  0E03               	movlw	high fprintf@s
  8544  001B46  2121               	addwfc	(fprintf@i+1)& (0+255),w,b
  8545  001B48  6EDA               	movwf	fsr2h,c
  8546  001B4A  C322  FFDF         	movff	fprintf@c,indf2
  8547                           
  8548                           ; BSR set to: 3
  8549                           ;tff.c: 1874: val /= r;
  8550  001B4E  C318  F060         	movff	fprintf@val,___lldiv@dividend
  8551  001B52  C319  F061         	movff	fprintf@val+1,___lldiv@dividend+1
  8552  001B56  C31A  F062         	movff	fprintf@val+2,___lldiv@dividend+2
  8553  001B5A  C31B  F063         	movff	fprintf@val+3,___lldiv@dividend+3
  8554  001B5E  5117               	movf	fprintf@r& (0+255),w,b
  8555  001B60  0100               	movlb	0	; () banked
  8556  001B62  6F64               	movwf	___lldiv@divisor& (0+255),b
  8557  001B64  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
  8558  001B66  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
  8559  001B68  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
  8560  001B6A  ECA2  F025         	call	___lldiv	;wreg free
  8561  001B6E  C060  F318         	movff	?___lldiv,fprintf@val
  8562  001B72  C061  F319         	movff	?___lldiv+1,fprintf@val+1
  8563  001B76  C062  F31A         	movff	?___lldiv+2,fprintf@val+2
  8564  001B7A  C063  F31B         	movff	?___lldiv+3,fprintf@val+3
  8565                           
  8566                           ;tff.c: 1875: } while (i && val);
  8567  001B7E  0103               	movlb	3	; () banked
  8568  001B80  5120               	movf	fprintf@i& (0+255),w,b
  8569  001B82  1121               	iorwf	(fprintf@i+1)& (0+255),w,b
  8570  001B84  B4D8               	btfsc	status,2,c
  8571  001B86  D006               	goto	u15360
  8572                           
  8573                           ; BSR set to: 3
  8574  001B88  5118               	movf	fprintf@val& (0+255),w,b
  8575  001B8A  1119               	iorwf	(fprintf@val+1)& (0+255),w,b
  8576  001B8C  111A               	iorwf	(fprintf@val+2)& (0+255),w,b
  8577  001B8E  111B               	iorwf	(fprintf@val+3)& (0+255),w,b
  8578  001B90  A4D8               	btfss	status,2,c
  8579  001B92  D7B8               	goto	l1443
  8580  001B94                     u15360:
  8581                           
  8582                           ; BSR set to: 3
  8583                           ;tff.c: 1876: if (i && (f & 4)) s[--i] = '-';
  8584                           
  8585                           ; BSR set to: 3
  8586                           
  8587                           ; BSR set to: 3
  8588  001B94  5120               	movf	fprintf@i& (0+255),w,b
  8589  001B96  1121               	iorwf	(fprintf@i+1)& (0+255),w,b
  8590  001B98  A4D8               	btfss	status,2,c
  8591                           
  8592                           ; BSR set to: 3
  8593  001B9A  A516               	btfss	fprintf@f& (0+255),2,b
  8594  001B9C  D00B               	goto	l1448
  8595                           
  8596                           ; BSR set to: 3
  8597  001B9E  0720               	decf	fprintf@i& (0+255),f,b
  8598  001BA0  A0D8               	btfss	status,0,c
  8599  001BA2  0721               	decf	(fprintf@i+1)& (0+255),f,b
  8600  001BA4  0E00               	movlw	low fprintf@s
  8601  001BA6  2520               	addwf	fprintf@i& (0+255),w,b
  8602  001BA8  6ED9               	movwf	fsr2l,c
  8603  001BAA  0E03               	movlw	high fprintf@s
  8604  001BAC  2121               	addwfc	(fprintf@i+1)& (0+255),w,b
  8605  001BAE  6EDA               	movwf	fsr2h,c
  8606  001BB0  0E2D               	movlw	45
  8607  001BB2  6EDF               	movwf	indf2,c
  8608  001BB4                     l1448:
  8609                           
  8610                           ; BSR set to: 3
  8611                           ;tff.c: 1877: w = sizeof(s) - 1 - w;
  8612                           
  8613                           ; BSR set to: 3
  8614  001BB4  0E01               	movlw	1
  8615  001BB6  2514               	addwf	fprintf@w& (0+255),w,b
  8616  001BB8  0101               	movlb	1	; () banked
  8617  001BBA  6FE6               	movwf	??_fprintf& (0+255),b
  8618  001BBC  0E00               	movlw	0
  8619  001BBE  0103               	movlb	3	; () banked
  8620  001BC0  2115               	addwfc	(fprintf@w+1)& (0+255),w,b
  8621  001BC2  0101               	movlb	1	; () banked
  8622  001BC4  6FE7               	movwf	(??_fprintf+1)& (0+255),b
  8623  001BC6  1FE6               	comf	??_fprintf& (0+255),f,b
  8624  001BC8  1FE7               	comf	(??_fprintf+1)& (0+255),f,b
  8625  001BCA  4BE6               	infsnz	??_fprintf& (0+255),f,b
  8626  001BCC  2BE7               	incf	(??_fprintf+1)& (0+255),f,b
  8627  001BCE  0E10               	movlw	16
  8628  001BD0  25E6               	addwf	??_fprintf& (0+255),w,b
  8629  001BD2  0103               	movlb	3	; () banked
  8630  001BD4  6F14               	movwf	fprintf@w& (0+255),b
  8631  001BD6  0E00               	movlw	0
  8632  001BD8  0101               	movlb	1	; () banked
  8633  001BDA  21E7               	addwfc	(??_fprintf+1)& (0+255),w,b
  8634  001BDC  0103               	movlb	3	; () banked
  8635  001BDE  6F15               	movwf	(fprintf@w+1)& (0+255),b
  8636                           
  8637                           ;tff.c: 1878: while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
  8638  001BE0  D016               	goto	l1449
  8639  001BE2                     l1450:
  8640                           
  8641                           ; BSR set to: 1
  8642  001BE2  0103               	movlb	3	; () banked
  8643  001BE4  B116               	btfsc	fprintf@f& (0+255),0,b
  8644  001BE6  D004               	goto	l1452
  8645                           
  8646                           ; BSR set to: 3
  8647  001BE8  0E00               	movlw	0
  8648  001BEA  6F13               	movwf	(_fprintf$2595+1)& (0+255),b
  8649  001BEC  0E20               	movlw	32
  8650  001BEE  D003               	goto	L3
  8651  001BF0                     l1452:
  8652                           
  8653                           ; BSR set to: 3
  8654                           
  8655                           ; BSR set to: 3
  8656  001BF0  0E00               	movlw	0
  8657  001BF2  6F13               	movwf	(_fprintf$2595+1)& (0+255),b
  8658  001BF4  0E30               	movlw	48
  8659  001BF6                     L3:
  8660  001BF6  6F12               	movwf	_fprintf$2595& (0+255),b
  8661                           
  8662                           ; BSR set to: 3
  8663                           
  8664                           ; BSR set to: 3
  8665  001BF8  0720               	decf	fprintf@i& (0+255),f,b
  8666  001BFA  A0D8               	btfss	status,0,c
  8667  001BFC  0721               	decf	(fprintf@i+1)& (0+255),f,b
  8668  001BFE  0E00               	movlw	low fprintf@s
  8669  001C00  2520               	addwf	fprintf@i& (0+255),w,b
  8670  001C02  6ED9               	movwf	fsr2l,c
  8671  001C04  0E03               	movlw	high fprintf@s
  8672  001C06  2121               	addwfc	(fprintf@i+1)& (0+255),w,b
  8673  001C08  6EDA               	movwf	fsr2h,c
  8674  001C0A  C312  FFDF         	movff	_fprintf$2595,indf2
  8675  001C0E                     l1449:
  8676                           
  8677                           ; BSR set to: 3
  8678                           
  8679                           ; BSR set to: 3
  8680  001C0E  5120               	movf	fprintf@i& (0+255),w,b
  8681  001C10  1121               	iorwf	(fprintf@i+1)& (0+255),w,b
  8682  001C12  B4D8               	btfsc	status,2,c
  8683  001C14  D00D               	goto	u15410
  8684                           
  8685                           ; BSR set to: 3
  8686  001C16  5120               	movf	fprintf@i& (0+255),w,b
  8687  001C18  5D14               	subwf	fprintf@w& (0+255),w,b
  8688  001C1A  5115               	movf	(fprintf@w+1)& (0+255),w,b
  8689  001C1C  0A80               	xorlw	128
  8690  001C1E  0101               	movlb	1	; () banked
  8691  001C20  6FE6               	movwf	??_fprintf& (0+255),b
  8692  001C22  0103               	movlb	3	; () banked
  8693  001C24  5121               	movf	(fprintf@i+1)& (0+255),w,b
  8694  001C26  0A80               	xorlw	128
  8695  001C28  0101               	movlb	1	; () banked
  8696  001C2A  59E6               	subwfb	??_fprintf& (0+255),w,b
  8697  001C2C  A0D8               	btfss	status,0,c
  8698  001C2E  D7D9               	goto	l1450
  8699  001C30                     u15410:
  8700                           
  8701                           ;tff.c: 1879: cc = fputs(&s[i], fil);
  8702                           
  8703                           ; BSR set to: 1
  8704                           
  8705                           ; BSR set to: 1
  8706  001C30  0E00               	movlw	low fprintf@s
  8707  001C32  0103               	movlb	3	; () banked
  8708  001C34  2520               	addwf	fprintf@i& (0+255),w,b
  8709  001C36  0101               	movlb	1	; () banked
  8710  001C38  6FD4               	movwf	fputs@str& (0+255),b
  8711  001C3A  0E03               	movlw	high fprintf@s
  8712  001C3C  0103               	movlb	3	; () banked
  8713  001C3E  2121               	addwfc	(fprintf@i+1)& (0+255),w,b
  8714  001C40  0101               	movlb	1	; () banked
  8715  001C42  6FD5               	movwf	(fputs@str+1)& (0+255),b
  8716  001C44  C1DA  F1D6         	movff	fprintf@fil,fputs@fil
  8717  001C48  C1DB  F1D7         	movff	fprintf@fil+1,fputs@fil+1
  8718  001C4C  EC34  F027         	call	_fputs	;wreg free
  8719  001C50  C1D4  F31E         	movff	?_fputs,fprintf@cc
  8720  001C54  C1D5  F31F         	movff	?_fputs+1,fprintf@cc+1
  8721  001C58                     l1420:
  8722  001C58  0103               	movlb	3	; () banked
  8723  001C5A  511E               	movf	fprintf@cc& (0+255),w,b
  8724  001C5C  2710               	addwf	fprintf@res& (0+255),f,b
  8725  001C5E  511F               	movf	(fprintf@cc+1)& (0+255),w,b
  8726  001C60  2311               	addwfc	(fprintf@res+1)& (0+255),f,b
  8727                           
  8728                           ; BSR set to: 3
  8729  001C62  291E               	incf	fprintf@cc& (0+255),w,b
  8730  001C64  E101               	bnz	u15421
  8731  001C66  D621               	goto	L4
  8732  001C68                     u15421:
  8733  001C68  D623               	goto	l1415
  8734  001C6A                     __end_of_fprintf:
  8735                           	opt stack 0
  8736                           tosu	equ	0xFFF
  8737                           tosh	equ	0xFFE
  8738                           tosl	equ	0xFFD
  8739                           pclath	equ	0xFFA
  8740                           tblptru	equ	0xFF8
  8741                           tblptrh	equ	0xFF7
  8742                           tblptrl	equ	0xFF6
  8743                           tablat	equ	0xFF5
  8744                           prodh	equ	0xFF4
  8745                           prodl	equ	0xFF3
  8746                           intcon	equ	0xFF2
  8747                           intcon2	equ	0xFF1
  8748                           intcon3	equ	0xFF0
  8749                           postinc0	equ	0xFEE
  8750                           wreg	equ	0xFE8
  8751                           indf1	equ	0xFE7
  8752                           postinc1	equ	0xFE6
  8753                           postdec1	equ	0xFE5
  8754                           plusw1	equ	0xFE3
  8755                           fsr1h	equ	0xFE2
  8756                           fsr1l	equ	0xFE1
  8757                           indf2	equ	0xFDF
  8758                           postinc2	equ	0xFDE
  8759                           postdec2	equ	0xFDD
  8760                           plusw2	equ	0xFDB
  8761                           fsr2h	equ	0xFDA
  8762                           fsr2l	equ	0xFD9
  8763                           status	equ	0xFD8
  8764                           
  8765 ;; *************** function _fputs *****************
  8766 ;; Defined at:
  8767 ;;		line 1788 in file "bibliotecas/tff.c"
  8768 ;; Parameters:    Size  Location     Type
  8769 ;;  str             2    0[BANK1 ] PTR const unsigned char 
  8770 ;;		 -> fprintf@s(16), string_dado(44), 
  8771 ;;  fil             2    2[BANK1 ] PTR struct _FIL
  8772 ;;		 -> fil(28), 
  8773 ;; Auto vars:     Size  Location     Type
  8774 ;;  n               2    4[BANK1 ] int 
  8775 ;; Return value:  Size  Location     Type
  8776 ;;                  2    0[BANK1 ] int 
  8777 ;; Registers used:
  8778 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8779 ;; Tracked objects:
  8780 ;;		On entry : 0/0
  8781 ;;		On exit  : 0/0
  8782 ;;		Unchanged: 0/0
  8783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8784 ;;      Params:         0       0       4       0       0       0       0       0       0
  8785 ;;      Locals:         0       0       2       0       0       0       0       0       0
  8786 ;;      Temps:          0       1       0       0       0       0       0       0       0
  8787 ;;      Totals:         0       1       6       0       0       0       0       0       0
  8788 ;;Total ram usage:        7 bytes
  8789 ;; Hardware stack levels used:    1
  8790 ;; Hardware stack levels required when called:   13
  8791 ;; This function calls:
  8792 ;;		_fputc
  8793 ;; This function is called by:
  8794 ;;		_fprintf
  8795 ;; This function uses a non-reentrant model
  8796 ;;
  8797                           
  8798                           	psect	text32
  8799  004E68                     __ptext32:
  8800                           	opt stack 0
  8801  004E68                     _fputs:
  8802                           	opt stack 13
  8803                           
  8804                           ;tff.c: 1793: int n;
  8805                           ;tff.c: 1796: for (n = 0; *str; str++, n++) {
  8806                           
  8807                           ; BSR set to: 3
  8808                           ;incstack = 0
  8809  004E68  0E00               	movlw	0
  8810  004E6A  0101               	movlb	1	; () banked
  8811  004E6C  6FD9               	movwf	(fputs@n+1)& (0+255),b
  8812  004E6E  0E00               	movlw	0
  8813  004E70  6FD8               	movwf	fputs@n& (0+255),b
  8814  004E72  D01F               	goto	l1408
  8815  004E74                     
  8816                           ; BSR set to: 1
  8817                           ;tff.c: 1797: if (fputc(*str, fil) == -1) return -1;
  8818                           
  8819                           ; BSR set to: 1
  8820  004E74  C1D4  FFD9         	movff	fputs@str,fsr2l
  8821  004E78  C1D5  FFDA         	movff	fputs@str+1,fsr2h
  8822  004E7C  50DF               	movf	indf2,w,c
  8823  004E7E  0100               	movlb	0	; () banked
  8824  004E80  6FEC               	movwf	??_fputs& (0+255),b
  8825  004E82  51EC               	movf	??_fputs& (0+255),w,b
  8826  004E84  6FE5               	movwf	fputc@chr& (0+255),b
  8827  004E86  6BE6               	clrf	(fputc@chr+1)& (0+255),b
  8828  004E88  C1D6  F0E7         	movff	fputs@fil,fputc@fil
  8829  004E8C  C1D7  F0E8         	movff	fputs@fil+1,fputc@fil+1
  8830  004E90  ECEA  F027         	call	_fputc	;wreg free
  8831  004E94  0100               	movlb	0	; () banked
  8832  004E96  29E5               	incf	?_fputc& (0+255),w,b
  8833  004E98  E107               	bnz	l11154
  8834  004E9A  29E6               	incf	(?_fputc+1)& (0+255),w,b
  8835  004E9C  A4D8               	btfss	status,2,c
  8836  004E9E  D004               	goto	l1410
  8837                           
  8838                           ; BSR set to: 0
  8839  004EA0  0101               	movlb	1	; () banked
  8840  004EA2  69D4               	setf	?_fputs& (0+255),b
  8841  004EA4  69D5               	setf	(?_fputs+1)& (0+255),b
  8842  004EA6  0012               	return	
  8843  004EA8                     l1410:
  8844  004EA8                     l11154:
  8845  004EA8  0101               	movlb	1	; () banked
  8846  004EAA  4BD4               	infsnz	fputs@str& (0+255),f,b
  8847  004EAC  2BD5               	incf	(fputs@str+1)& (0+255),f,b
  8848  004EAE  4BD8               	infsnz	fputs@n& (0+255),f,b
  8849  004EB0  2BD9               	incf	(fputs@n+1)& (0+255),f,b
  8850  004EB2                     l1408:
  8851                           
  8852                           ; BSR set to: 1
  8853                           
  8854                           ; BSR set to: 1
  8855  004EB2  C1D4  FFD9         	movff	fputs@str,fsr2l
  8856  004EB6  C1D5  FFDA         	movff	fputs@str+1,fsr2h
  8857  004EBA  50DF               	movf	indf2,w,c
  8858  004EBC  A4D8               	btfss	status,2,c
  8859  004EBE  D7DA               	goto	l1409
  8860                           
  8861                           ; BSR set to: 1
  8862                           ;tff.c: 1798: }
  8863                           ;tff.c: 1799: return n;
  8864  004EC0  C1D8  F1D4         	movff	fputs@n,?_fputs
  8865  004EC4  C1D9  F1D5         	movff	fputs@n+1,?_fputs+1
  8866                           
  8867                           ; BSR set to: 1
  8868  004EC8  0012               	return		;funcret
  8869  004ECA                     __end_of_fputs:
  8870                           	opt stack 0
  8871                           tosu	equ	0xFFF
  8872                           tosh	equ	0xFFE
  8873                           tosl	equ	0xFFD
  8874                           pclath	equ	0xFFA
  8875                           tblptru	equ	0xFF8
  8876                           tblptrh	equ	0xFF7
  8877                           tblptrl	equ	0xFF6
  8878                           tablat	equ	0xFF5
  8879                           prodh	equ	0xFF4
  8880                           prodl	equ	0xFF3
  8881                           intcon	equ	0xFF2
  8882                           intcon2	equ	0xFF1
  8883                           intcon3	equ	0xFF0
  8884                           postinc0	equ	0xFEE
  8885                           wreg	equ	0xFE8
  8886                           indf1	equ	0xFE7
  8887                           postinc1	equ	0xFE6
  8888                           postdec1	equ	0xFE5
  8889                           plusw1	equ	0xFE3
  8890                           fsr1h	equ	0xFE2
  8891                           fsr1l	equ	0xFE1
  8892                           indf2	equ	0xFDF
  8893                           postinc2	equ	0xFDE
  8894                           postdec2	equ	0xFDD
  8895                           plusw2	equ	0xFDB
  8896                           fsr2h	equ	0xFDA
  8897                           fsr2l	equ	0xFD9
  8898                           status	equ	0xFD8
  8899                           
  8900 ;; *************** function _fputc *****************
  8901 ;; Defined at:
  8902 ;;		line 1761 in file "bibliotecas/tff.c"
  8903 ;; Parameters:    Size  Location     Type
  8904 ;;  chr             2  133[BANK0 ] int 
  8905 ;;  fil             2  135[BANK0 ] PTR struct _FIL
  8906 ;;		 -> fil(28), 
  8907 ;; Auto vars:     Size  Location     Type
  8908 ;;  bw              2  138[BANK0 ] unsigned int 
  8909 ;;  c               1  137[BANK0 ] unsigned char 
  8910 ;; Return value:  Size  Location     Type
  8911 ;;                  2  133[BANK0 ] int 
  8912 ;; Registers used:
  8913 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8914 ;; Tracked objects:
  8915 ;;		On entry : 0/0
  8916 ;;		On exit  : 0/0
  8917 ;;		Unchanged: 0/0
  8918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8919 ;;      Params:         0       4       0       0       0       0       0       0       0
  8920 ;;      Locals:         0       3       0       0       0       0       0       0       0
  8921 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8922 ;;      Totals:         0       7       0       0       0       0       0       0       0
  8923 ;;Total ram usage:        7 bytes
  8924 ;; Hardware stack levels used:    1
  8925 ;; Hardware stack levels required when called:   12
  8926 ;; This function calls:
  8927 ;;		_f_write
  8928 ;; This function is called by:
  8929 ;;		_fputs
  8930 ;;		_fprintf
  8931 ;; This function uses a non-reentrant model
  8932 ;;
  8933                           
  8934                           	psect	text33
  8935  004FD4                     __ptext33:
  8936                           	opt stack 0
  8937  004FD4                     _fputc:
  8938                           	opt stack 13
  8939                           
  8940                           ;tff.c: 1766: UINT bw;
  8941                           ;tff.c: 1767: char c;
  8942                           ;tff.c: 1773: if (!fil) {
  8943                           
  8944                           ; BSR set to: 1
  8945                           ;incstack = 0
  8946  004FD4  0100               	movlb	0	; () banked
  8947  004FD6  51E7               	movf	fputc@fil& (0+255),w,b
  8948  004FD8  11E8               	iorwf	(fputc@fil+1)& (0+255),w,b
  8949  004FDA  A4D8               	btfss	status,2,c
  8950  004FDC  D005               	goto	l1400
  8951                           
  8952                           ; BSR set to: 0
  8953                           ;tff.c: 1775: return chr;
  8954  004FDE  C0E5  F0E5         	movff	fputc@chr,?_fputc
  8955  004FE2  C0E6  F0E6         	movff	fputc@chr+1,?_fputc+1
  8956  004FE6  0012               	return	
  8957  004FE8                     l1400:
  8958                           
  8959                           ; BSR set to: 0
  8960                           ;tff.c: 1776: }
  8961                           ;tff.c: 1777: c = (char)chr;
  8962  004FE8  C0E5  F0E9         	movff	fputc@chr,fputc@c
  8963                           
  8964                           ; BSR set to: 0
  8965                           ;tff.c: 1778: f_write(fil, &c, 1, &bw);
  8966  004FEC  C0E7  F0C4         	movff	fputc@fil,f_write@fp
  8967  004FF0  C0E8  F0C5         	movff	fputc@fil+1,f_write@fp+1
  8968  004FF4  0EE9               	movlw	low fputc@c
  8969  004FF6  6FC6               	movwf	f_write@buff& (0+255),b
  8970  004FF8  0E00               	movlw	high fputc@c
  8971  004FFA  6FC7               	movwf	(f_write@buff+1)& (0+255),b
  8972  004FFC  0E00               	movlw	0
  8973  004FFE  6FC9               	movwf	(f_write@btw+1)& (0+255),b
  8974  005000  0E01               	movlw	1
  8975  005002  6FC8               	movwf	f_write@btw& (0+255),b
  8976  005004  0EEA               	movlw	low fputc@bw
  8977  005006  6FCA               	movwf	f_write@bw& (0+255),b
  8978  005008  0E00               	movlw	high fputc@bw
  8979  00500A  6FCB               	movwf	(f_write@bw+1)& (0+255),b
  8980  00500C  EC8B  F004         	call	_f_write	;wreg free
  8981                           
  8982                           ;tff.c: 1779: return bw ? chr : -1;
  8983  005010  0100               	movlb	0	; () banked
  8984  005012  51EA               	movf	fputc@bw& (0+255),w,b
  8985  005014  11EB               	iorwf	(fputc@bw+1)& (0+255),w,b
  8986  005016  A4D8               	btfss	status,2,c
  8987  005018  D003               	goto	l1403
  8988                           
  8989                           ; BSR set to: 0
  8990  00501A  69E5               	setf	?_fputc& (0+255),b
  8991  00501C  69E6               	setf	(?_fputc+1)& (0+255),b
  8992  00501E  0012               	return	
  8993  005020                     l1403:
  8994                           
  8995                           ; BSR set to: 0
  8996  005020  C0E5  F0E5         	movff	fputc@chr,?_fputc
  8997  005024  C0E6  F0E6         	movff	fputc@chr+1,?_fputc+1
  8998  005028  0012               	return	
  8999  00502A                     __end_of_fputc:
  9000                           	opt stack 0
  9001                           tosu	equ	0xFFF
  9002                           tosh	equ	0xFFE
  9003                           tosl	equ	0xFFD
  9004                           pclath	equ	0xFFA
  9005                           tblptru	equ	0xFF8
  9006                           tblptrh	equ	0xFF7
  9007                           tblptrl	equ	0xFF6
  9008                           tablat	equ	0xFF5
  9009                           prodh	equ	0xFF4
  9010                           prodl	equ	0xFF3
  9011                           intcon	equ	0xFF2
  9012                           intcon2	equ	0xFF1
  9013                           intcon3	equ	0xFF0
  9014                           postinc0	equ	0xFEE
  9015                           wreg	equ	0xFE8
  9016                           indf1	equ	0xFE7
  9017                           postinc1	equ	0xFE6
  9018                           postdec1	equ	0xFE5
  9019                           plusw1	equ	0xFE3
  9020                           fsr1h	equ	0xFE2
  9021                           fsr1l	equ	0xFE1
  9022                           indf2	equ	0xFDF
  9023                           postinc2	equ	0xFDE
  9024                           postdec2	equ	0xFDD
  9025                           plusw2	equ	0xFDB
  9026                           fsr2h	equ	0xFDA
  9027                           fsr2l	equ	0xFD9
  9028                           status	equ	0xFD8
  9029                           
  9030 ;; *************** function _f_write *****************
  9031 ;; Defined at:
  9032 ;;		line 991 in file "bibliotecas/tff.c"
  9033 ;; Parameters:    Size  Location     Type
  9034 ;;  fp              2  100[BANK0 ] PTR struct _FIL
  9035 ;;		 -> fil(28), 
  9036 ;;  buff            2  102[BANK0 ] PTR const void 
  9037 ;;		 -> fputc@c(1), 
  9038 ;;  btw             2  104[BANK0 ] unsigned int 
  9039 ;;  bw              2  106[BANK0 ] PTR unsigned int 
  9040 ;;		 -> fputc@bw(2), 
  9041 ;; Auto vars:     Size  Location     Type
  9042 ;;  sect            4  123[BANK0 ] unsigned long 
  9043 ;;  wcnt            2  131[BANK0 ] unsigned int 
  9044 ;;  clust           2  129[BANK0 ] unsigned short 
  9045 ;;  cc              2  127[BANK0 ] unsigned int 
  9046 ;;  wbuff           2  121[BANK0 ] PTR const unsigned char 
  9047 ;;		 -> fputc@c(1), 
  9048 ;;  res             1  120[BANK0 ] enum E155
  9049 ;; Return value:  Size  Location     Type
  9050 ;;                  1    wreg      enum E155
  9051 ;; Registers used:
  9052 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9053 ;; Tracked objects:
  9054 ;;		On entry : 0/0
  9055 ;;		On exit  : 0/0
  9056 ;;		Unchanged: 0/0
  9057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9058 ;;      Params:         0       8       0       0       0       0       0       0       0
  9059 ;;      Locals:         0      13       0       0       0       0       0       0       0
  9060 ;;      Temps:          0      12       0       0       0       0       0       0       0
  9061 ;;      Totals:         0      33       0       0       0       0       0       0       0
  9062 ;;Total ram usage:       33 bytes
  9063 ;; Hardware stack levels used:    1
  9064 ;; Hardware stack levels required when called:   11
  9065 ;; This function calls:
  9066 ;;		_clust2sect
  9067 ;;		_create_chain
  9068 ;;		_disk_write
  9069 ;;		_memcpy
  9070 ;;		_move_window
  9071 ;;		_validate
  9072 ;; This function is called by:
  9073 ;;		_fputc
  9074 ;; This function uses a non-reentrant model
  9075 ;;
  9076                           
  9077                           	psect	text34
  9078  000916                     __ptext34:
  9079                           	opt stack 0
  9080  000916                     _f_write:
  9081                           	opt stack 13
  9082                           
  9083                           ;tff.c: 998: FRESULT res;
  9084                           ;tff.c: 999: DWORD sect;
  9085                           ;tff.c: 1000: UINT wcnt, cc;
  9086                           ;tff.c: 1001: CLUST clust;
  9087                           ;tff.c: 1002: const BYTE *wbuff = buff;
  9088                           
  9089                           ; BSR set to: 0
  9090                           ;incstack = 0
  9091  000916  C0C6  F0D9         	movff	f_write@buff,f_write@wbuff
  9092  00091A  C0C7  F0DA         	movff	f_write@buff+1,f_write@wbuff+1
  9093                           
  9094                           ;tff.c: 1005: *bw = 0;
  9095  00091E  C0CA  FFD9         	movff	f_write@bw,fsr2l
  9096  000922  C0CB  FFDA         	movff	f_write@bw+1,fsr2h
  9097  000926  0E00               	movlw	0
  9098  000928  6EDE               	movwf	postinc2,c
  9099  00092A  0E00               	movlw	0
  9100  00092C  6EDD               	movwf	postdec2,c
  9101                           
  9102                           ;tff.c: 1006: res = validate(fp->fs, fp->id);
  9103  00092E  0100               	movlb	0	; () banked
  9104  000930  EE20 F004          	lfsr	2,4
  9105  000934  51C4               	movf	f_write@fp& (0+255),w,b
  9106  000936  26D9               	addwf	fsr2l,f,c
  9107  000938  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9108  00093A  22DA               	addwfc	fsr2h,f,c
  9109  00093C  CFDE F067          	movff	postinc2,validate@fs
  9110  000940  CFDD F068          	movff	postdec2,validate@fs+1
  9111  000944  C0C4  FFD9         	movff	f_write@fp,fsr2l
  9112  000948  C0C5  FFDA         	movff	f_write@fp+1,fsr2h
  9113  00094C  CFDE F069          	movff	postinc2,validate@id
  9114  000950  CFDD F06A          	movff	postdec2,validate@id+1
  9115  000954  ECB6  F028         	call	_validate	;wreg free
  9116  000958  0100               	movlb	0	; () banked
  9117  00095A  6FD8               	movwf	f_write@res& (0+255),b
  9118                           
  9119                           ; BSR set to: 0
  9120                           ;tff.c: 1007: if (res != FR_OK) return res;
  9121  00095C  51D8               	movf	f_write@res& (0+255),w,b
  9122  00095E  A4D8               	btfss	status,2,c
  9123  000960  0012               	return	
  9124                           
  9125                           ; BSR set to: 0
  9126                           ;tff.c: 1008: if (fp->flag & 0x80) return FR_RW_ERROR;
  9127                           
  9128                           ; BSR set to: 0
  9129                           
  9130                           ; BSR set to: 0
  9131                           ;	Return value of _f_write is never used
  9132  000962  EE20 F002          	lfsr	2,2
  9133  000966  51C4               	movf	f_write@fp& (0+255),w,b
  9134  000968  26D9               	addwf	fsr2l,f,c
  9135  00096A  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9136  00096C  22DA               	addwfc	fsr2h,f,c
  9137  00096E  BEDF               	btfsc	indf2,7,c
  9138  000970  0012               	return	
  9139                           
  9140                           ; BSR set to: 0
  9141                           ;tff.c: 1009: if (!(fp->flag & 0x02)) return FR_DENIED;
  9142                           
  9143                           ; BSR set to: 0
  9144                           
  9145                           ; BSR set to: 0
  9146                           ;	Return value of _f_write is never used
  9147  000972  EE20 F002          	lfsr	2,2
  9148  000976  51C4               	movf	f_write@fp& (0+255),w,b
  9149  000978  26D9               	addwf	fsr2l,f,c
  9150  00097A  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9151  00097C  22DA               	addwfc	fsr2h,f,c
  9152  00097E  A2DF               	btfss	indf2,1,c
  9153  000980  0012               	return	
  9154                           
  9155                           ; BSR set to: 0
  9156                           ;tff.c: 1010: if (fp->fsize + btw < fp->fsize) return FR_OK;
  9157                           
  9158                           ; BSR set to: 0
  9159                           
  9160                           ; BSR set to: 0
  9161                           ;	Return value of _f_write is never used
  9162  000982  EE20 F00A          	lfsr	2,10
  9163  000986  51C4               	movf	f_write@fp& (0+255),w,b
  9164  000988  26D9               	addwf	fsr2l,f,c
  9165  00098A  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9166  00098C  22DA               	addwfc	fsr2h,f,c
  9167  00098E  EE10 F00A          	lfsr	1,10
  9168  000992  51C4               	movf	f_write@fp& (0+255),w,b
  9169  000994  26E1               	addwf	fsr1l,f,c
  9170  000996  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9171  000998  22E2               	addwfc	fsr1h,f,c
  9172  00099A  CFE6 F0D0          	movff	postinc1,??_f_write+4
  9173  00099E  CFE6 F0D1          	movff	postinc1,??_f_write+5
  9174  0009A2  CFE6 F0D2          	movff	postinc1,??_f_write+6
  9175  0009A6  CFE6 F0D3          	movff	postinc1,??_f_write+7
  9176  0009AA  51C8               	movf	f_write@btw& (0+255),w,b
  9177  0009AC  25D0               	addwf	(??_f_write+4)& (0+255),w,b
  9178  0009AE  6FD4               	movwf	(??_f_write+8)& (0+255),b
  9179  0009B0  51C9               	movf	(f_write@btw+1)& (0+255),w,b
  9180  0009B2  21D1               	addwfc	(??_f_write+5)& (0+255),w,b
  9181  0009B4  6FD5               	movwf	(??_f_write+9)& (0+255),b
  9182  0009B6  0E00               	movlw	0
  9183  0009B8  21D2               	addwfc	(??_f_write+6)& (0+255),w,b
  9184  0009BA  6FD6               	movwf	(??_f_write+10)& (0+255),b
  9185  0009BC  0E00               	movlw	0
  9186  0009BE  21D3               	addwfc	(??_f_write+7)& (0+255),w,b
  9187  0009C0  6FD7               	movwf	(??_f_write+11)& (0+255),b
  9188  0009C2  50DE               	movf	postinc2,w,c
  9189  0009C4  5DD4               	subwf	(??_f_write+8)& (0+255),w,b
  9190  0009C6  50DE               	movf	postinc2,w,c
  9191  0009C8  59D5               	subwfb	(??_f_write+9)& (0+255),w,b
  9192  0009CA  50DE               	movf	postinc2,w,c
  9193  0009CC  59D6               	subwfb	(??_f_write+10)& (0+255),w,b
  9194  0009CE  50DE               	movf	postinc2,w,c
  9195  0009D0  59D7               	subwfb	(??_f_write+11)& (0+255),w,b
  9196  0009D2  A0D8               	btfss	status,0,c
  9197  0009D4  0012               	return	
  9198  0009D6  D23B               	goto	l1310
  9199  0009D8                     
  9200                           ; BSR set to: 0
  9201                           ;tff.c: 1014: if ((fp->fptr % 512U) == 0) {
  9202                           
  9203                           ; BSR set to: 0
  9204  0009D8  EE20 F006          	lfsr	2,6
  9205  0009DC  51C4               	movf	f_write@fp& (0+255),w,b
  9206  0009DE  26D9               	addwf	fsr2l,f,c
  9207  0009E0  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9208  0009E2  22DA               	addwfc	fsr2h,f,c
  9209  0009E4  0EFF               	movlw	255
  9210  0009E6  14DE               	andwf	postinc2,w,c
  9211  0009E8  6FCC               	movwf	??_f_write& (0+255),b
  9212  0009EA  0E01               	movlw	1
  9213  0009EC  14DE               	andwf	postinc2,w,c
  9214  0009EE  6FCD               	movwf	(??_f_write+1)& (0+255),b
  9215  0009F0  0E00               	movlw	0
  9216  0009F2  14DE               	andwf	postinc2,w,c
  9217  0009F4  6FCE               	movwf	(??_f_write+2)& (0+255),b
  9218  0009F6  0E00               	movlw	0
  9219  0009F8  14DE               	andwf	postinc2,w,c
  9220  0009FA  6FCF               	movwf	(??_f_write+3)& (0+255),b
  9221  0009FC  51CC               	movf	??_f_write& (0+255),w,b
  9222  0009FE  11CD               	iorwf	(??_f_write+1)& (0+255),w,b
  9223  000A00  11CE               	iorwf	(??_f_write+2)& (0+255),w,b
  9224  000A02  11CF               	iorwf	(??_f_write+3)& (0+255),w,b
  9225  000A04  A4D8               	btfss	status,2,c
  9226  000A06  D166               	goto	l1312
  9227                           
  9228                           ; BSR set to: 0
  9229                           ;tff.c: 1015: if (fp->csect >= fp->fs->csize) {
  9230  000A08  EE20 F004          	lfsr	2,4
  9231  000A0C  51C4               	movf	f_write@fp& (0+255),w,b
  9232  000A0E  26D9               	addwf	fsr2l,f,c
  9233  000A10  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9234  000A12  22DA               	addwfc	fsr2h,f,c
  9235  000A14  EE10 F01D          	lfsr	1,29
  9236  000A18  50DE               	movf	postinc2,w,c
  9237  000A1A  26E1               	addwf	fsr1l,f,c
  9238  000A1C  50DD               	movf	postdec2,w,c
  9239  000A1E  22E2               	addwfc	fsr1h,f,c
  9240  000A20  EE20 F003          	lfsr	2,3
  9241  000A24  51C4               	movf	f_write@fp& (0+255),w,b
  9242  000A26  26D9               	addwf	fsr2l,f,c
  9243  000A28  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9244  000A2A  22DA               	addwfc	fsr2h,f,c
  9245  000A2C  50E6               	movf	postinc1,w,c
  9246  000A2E  5CDE               	subwf	postinc2,w,c
  9247  000A30  A0D8               	btfss	status,0,c
  9248  000A32  D06D               	goto	l1313
  9249                           
  9250                           ; BSR set to: 0
  9251                           ;tff.c: 1016: if (fp->fptr == 0) {
  9252  000A34  EE20 F006          	lfsr	2,6
  9253  000A38  51C4               	movf	f_write@fp& (0+255),w,b
  9254  000A3A  26D9               	addwf	fsr2l,f,c
  9255  000A3C  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9256  000A3E  22DA               	addwfc	fsr2h,f,c
  9257  000A40  50DE               	movf	postinc2,w,c
  9258  000A42  10DE               	iorwf	postinc2,w,c
  9259  000A44  10DE               	iorwf	postinc2,w,c
  9260  000A46  10DE               	iorwf	postinc2,w,c
  9261  000A48  A4D8               	btfss	status,2,c
  9262  000A4A  D024               	goto	l1314
  9263                           
  9264                           ; BSR set to: 0
  9265                           ;tff.c: 1017: clust = fp->org_clust;
  9266  000A4C  EE20 F00E          	lfsr	2,14
  9267  000A50  51C4               	movf	f_write@fp& (0+255),w,b
  9268  000A52  26D9               	addwf	fsr2l,f,c
  9269  000A54  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9270  000A56  22DA               	addwfc	fsr2h,f,c
  9271  000A58  CFDE F0E1          	movff	postinc2,f_write@clust
  9272  000A5C  CFDD F0E2          	movff	postdec2,f_write@clust+1
  9273                           
  9274                           ; BSR set to: 0
  9275                           ;tff.c: 1018: if (clust == 0)
  9276  000A60  51E1               	movf	f_write@clust& (0+255),w,b
  9277  000A62  11E2               	iorwf	(f_write@clust+1)& (0+255),w,b
  9278  000A64  A4D8               	btfss	status,2,c
  9279  000A66  D026               	goto	l1316
  9280                           
  9281                           ; BSR set to: 0
  9282                           ;tff.c: 1019: fp->org_clust = clust = create_chain(0);
  9283  000A68  0E00               	movlw	0
  9284  000A6A  6FB7               	movwf	(create_chain@clust+1)& (0+255),b
  9285  000A6C  0E00               	movlw	0
  9286  000A6E  6FB6               	movwf	create_chain@clust& (0+255),b
  9287  000A70  ECAD  F019         	call	_create_chain	;wreg free
  9288  000A74  C0B6  F0E1         	movff	?_create_chain,f_write@clust
  9289  000A78  C0B7  F0E2         	movff	?_create_chain+1,f_write@clust+1
  9290  000A7C  0100               	movlb	0	; () banked
  9291  000A7E  EE20 F00E          	lfsr	2,14
  9292  000A82  51C4               	movf	f_write@fp& (0+255),w,b
  9293  000A84  26D9               	addwf	fsr2l,f,c
  9294  000A86  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9295  000A88  22DA               	addwfc	fsr2h,f,c
  9296  000A8A  C0E1  FFDE         	movff	f_write@clust,postinc2
  9297  000A8E  C0E2  FFDD         	movff	f_write@clust+1,postdec2
  9298                           
  9299                           ; BSR set to: 0
  9300                           ;tff.c: 1020: } else {
  9301  000A92  D010               	goto	l1316
  9302  000A94                     l1314:
  9303                           
  9304                           ; BSR set to: 0
  9305                           ;tff.c: 1021: clust = create_chain(fp->curr_clust);
  9306                           
  9307                           ; BSR set to: 0
  9308  000A94  EE20 F010          	lfsr	2,16
  9309  000A98  51C4               	movf	f_write@fp& (0+255),w,b
  9310  000A9A  26D9               	addwf	fsr2l,f,c
  9311  000A9C  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9312  000A9E  22DA               	addwfc	fsr2h,f,c
  9313  000AA0  CFDE F0B6          	movff	postinc2,create_chain@clust
  9314  000AA4  CFDD F0B7          	movff	postdec2,create_chain@clust+1
  9315  000AA8  ECAD  F019         	call	_create_chain	;wreg free
  9316  000AAC  C0B6  F0E1         	movff	?_create_chain,f_write@clust
  9317  000AB0  C0B7  F0E2         	movff	?_create_chain+1,f_write@clust+1
  9318  000AB4                     l1316:
  9319                           
  9320                           ;tff.c: 1022: }
  9321                           ;tff.c: 1023: if (clust == 0) break;
  9322  000AB4  0100               	movlb	0	; () banked
  9323  000AB6  51E1               	movf	f_write@clust& (0+255),w,b
  9324  000AB8  11E2               	iorwf	(f_write@clust+1)& (0+255),w,b
  9325  000ABA  B4D8               	btfsc	status,2,c
  9326  000ABC  D1CC               	goto	u13380
  9327                           
  9328                           ; BSR set to: 0
  9329                           ;tff.c: 1024: if (clust == 1 || clust >= fp->fs->max_clust) goto fw_error;
  9330                           
  9331                           ; BSR set to: 0
  9332                           
  9333                           ; BSR set to: 0
  9334  000ABE  05E1               	decf	f_write@clust& (0+255),w,b
  9335  000AC0  11E2               	iorwf	(f_write@clust+1)& (0+255),w,b
  9336  000AC2  B4D8               	btfsc	status,2,c
  9337  000AC4  D1FB               	goto	l1322
  9338                           
  9339                           ; BSR set to: 0
  9340  000AC6  EE20 F004          	lfsr	2,4
  9341  000ACA  51C4               	movf	f_write@fp& (0+255),w,b
  9342  000ACC  26D9               	addwf	fsr2l,f,c
  9343  000ACE  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9344  000AD0  22DA               	addwfc	fsr2h,f,c
  9345  000AD2  EE10 F016          	lfsr	1,22
  9346  000AD6  50DE               	movf	postinc2,w,c
  9347  000AD8  26E1               	addwf	fsr1l,f,c
  9348  000ADA  50DD               	movf	postdec2,w,c
  9349  000ADC  22E2               	addwfc	fsr1h,f,c
  9350  000ADE  50E6               	movf	postinc1,w,c
  9351  000AE0  5DE1               	subwf	f_write@clust& (0+255),w,b
  9352  000AE2  50E6               	movf	postinc1,w,c
  9353  000AE4  59E2               	subwfb	(f_write@clust+1)& (0+255),w,b
  9354  000AE6  B0D8               	btfsc	status,0,c
  9355  000AE8  D1E9               	goto	l1322
  9356                           
  9357                           ; BSR set to: 0
  9358                           ;tff.c: 1025: fp->curr_clust = clust;
  9359                           
  9360                           ; BSR set to: 0
  9361                           
  9362                           ; BSR set to: 0
  9363  000AEA  EE20 F010          	lfsr	2,16
  9364  000AEE  51C4               	movf	f_write@fp& (0+255),w,b
  9365  000AF0  26D9               	addwf	fsr2l,f,c
  9366  000AF2  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9367  000AF4  22DA               	addwfc	fsr2h,f,c
  9368  000AF6  C0E1  FFDE         	movff	f_write@clust,postinc2
  9369  000AFA  C0E2  FFDD         	movff	f_write@clust+1,postdec2
  9370                           
  9371                           ;tff.c: 1026: fp->csect = 0;
  9372  000AFE  EE20 F003          	lfsr	2,3
  9373  000B02  51C4               	movf	f_write@fp& (0+255),w,b
  9374  000B04  26D9               	addwf	fsr2l,f,c
  9375  000B06  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9376  000B08  22DA               	addwfc	fsr2h,f,c
  9377  000B0A  0E00               	movlw	0
  9378  000B0C  6EDF               	movwf	indf2,c
  9379  000B0E                     l1313:
  9380                           
  9381                           ; BSR set to: 0
  9382                           ;tff.c: 1027: }
  9383                           ;tff.c: 1028: sect = clust2sect(fp->curr_clust) + fp->csect;
  9384                           
  9385                           ; BSR set to: 0
  9386  000B0E  EE20 F010          	lfsr	2,16
  9387  000B12  51C4               	movf	f_write@fp& (0+255),w,b
  9388  000B14  26D9               	addwf	fsr2l,f,c
  9389  000B16  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9390  000B18  22DA               	addwfc	fsr2h,f,c
  9391  000B1A  CFDE F06C          	movff	postinc2,clust2sect@clust
  9392  000B1E  CFDD F06D          	movff	postdec2,clust2sect@clust+1
  9393  000B22  ECA7  F021         	call	_clust2sect	;wreg free
  9394  000B26  0100               	movlb	0	; () banked
  9395  000B28  EE20 F003          	lfsr	2,3
  9396  000B2C  51C4               	movf	f_write@fp& (0+255),w,b
  9397  000B2E  26D9               	addwf	fsr2l,f,c
  9398  000B30  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9399  000B32  22DA               	addwfc	fsr2h,f,c
  9400  000B34  50DF               	movf	indf2,w,c
  9401  000B36  6FCC               	movwf	??_f_write& (0+255),b
  9402  000B38  51CC               	movf	??_f_write& (0+255),w,b
  9403  000B3A  256C               	addwf	?_clust2sect& (0+255),w,b
  9404  000B3C  6FDB               	movwf	f_write@sect& (0+255),b
  9405  000B3E  0E00               	movlw	0
  9406  000B40  216D               	addwfc	(?_clust2sect+1)& (0+255),w,b
  9407  000B42  6FDC               	movwf	(f_write@sect+1)& (0+255),b
  9408  000B44  0E00               	movlw	0
  9409  000B46  216E               	addwfc	(?_clust2sect+2)& (0+255),w,b
  9410  000B48  6FDD               	movwf	(f_write@sect+2)& (0+255),b
  9411  000B4A  0E00               	movlw	0
  9412  000B4C  216F               	addwfc	(?_clust2sect+3)& (0+255),w,b
  9413  000B4E  6FDE               	movwf	(f_write@sect+3)& (0+255),b
  9414                           
  9415                           ; BSR set to: 0
  9416                           ;tff.c: 1029: cc = btw / 512U;
  9417  000B50  C0C8  F0CC         	movff	f_write@btw,??_f_write
  9418  000B54  C0C9  F0CD         	movff	f_write@btw+1,??_f_write+1
  9419  000B58  0E09               	movlw	9
  9420  000B5A  6FCE               	movwf	(??_f_write+2)& (0+255),b
  9421  000B5C                     u13295:
  9422  000B5C  90D8               	bcf	status,0,c
  9423  000B5E  33CD               	rrcf	(??_f_write+1)& (0+255),f,b
  9424  000B60  33CC               	rrcf	??_f_write& (0+255),f,b
  9425  000B62  2FCE               	decfsz	(??_f_write+2)& (0+255),f,b
  9426  000B64  D7FB               	goto	u13295
  9427  000B66  C0CC  F0DF         	movff	??_f_write,f_write@cc
  9428  000B6A  C0CD  F0E0         	movff	??_f_write+1,f_write@cc+1
  9429                           
  9430                           ; BSR set to: 0
  9431                           ;tff.c: 1030: if (cc) {
  9432  000B6E  51DF               	movf	f_write@cc& (0+255),w,b
  9433  000B70  11E0               	iorwf	(f_write@cc+1)& (0+255),w,b
  9434  000B72  B4D8               	btfsc	status,2,c
  9435  000B74  D070               	goto	l1323
  9436                           
  9437                           ; BSR set to: 0
  9438                           ;tff.c: 1031: if (fp->csect + cc > fp->fs->csize)
  9439  000B76  EE20 F003          	lfsr	2,3
  9440  000B7A  51C4               	movf	f_write@fp& (0+255),w,b
  9441  000B7C  26D9               	addwf	fsr2l,f,c
  9442  000B7E  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9443  000B80  22DA               	addwfc	fsr2h,f,c
  9444  000B82  50DF               	movf	indf2,w,c
  9445  000B84  6FCC               	movwf	??_f_write& (0+255),b
  9446  000B86  51CC               	movf	??_f_write& (0+255),w,b
  9447  000B88  25DF               	addwf	f_write@cc& (0+255),w,b
  9448  000B8A  6FCD               	movwf	(??_f_write+1)& (0+255),b
  9449  000B8C  0E00               	movlw	0
  9450  000B8E  21E0               	addwfc	(f_write@cc+1)& (0+255),w,b
  9451  000B90  6FCE               	movwf	(??_f_write+2)& (0+255),b
  9452  000B92  EE20 F004          	lfsr	2,4
  9453  000B96  51C4               	movf	f_write@fp& (0+255),w,b
  9454  000B98  26D9               	addwf	fsr2l,f,c
  9455  000B9A  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9456  000B9C  22DA               	addwfc	fsr2h,f,c
  9457  000B9E  EE10 F01D          	lfsr	1,29
  9458  000BA2  50DE               	movf	postinc2,w,c
  9459  000BA4  26E1               	addwf	fsr1l,f,c
  9460  000BA6  50DD               	movf	postdec2,w,c
  9461  000BA8  22E2               	addwfc	fsr1h,f,c
  9462  000BAA  50E7               	movf	indf1,w,c
  9463  000BAC  6FCF               	movwf	(??_f_write+3)& (0+255),b
  9464  000BAE  6BD0               	clrf	(??_f_write+4)& (0+255),b
  9465  000BB0  51CD               	movf	(??_f_write+1)& (0+255),w,b
  9466  000BB2  5DCF               	subwf	(??_f_write+3)& (0+255),w,b
  9467  000BB4  51CE               	movf	(??_f_write+2)& (0+255),w,b
  9468  000BB6  59D0               	subwfb	(??_f_write+4)& (0+255),w,b
  9469  000BB8  B0D8               	btfsc	status,0,c
  9470  000BBA  D021               	goto	l1324
  9471                           
  9472                           ; BSR set to: 0
  9473                           ;tff.c: 1032: cc = fp->fs->csize - fp->csect;
  9474  000BBC  EE20 F003          	lfsr	2,3
  9475  000BC0  51C4               	movf	f_write@fp& (0+255),w,b
  9476  000BC2  26D9               	addwf	fsr2l,f,c
  9477  000BC4  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9478  000BC6  22DA               	addwfc	fsr2h,f,c
  9479  000BC8  50DF               	movf	indf2,w,c
  9480  000BCA  6FCC               	movwf	??_f_write& (0+255),b
  9481  000BCC  6BCD               	clrf	(??_f_write+1)& (0+255),b
  9482  000BCE  1FCC               	comf	??_f_write& (0+255),f,b
  9483  000BD0  1FCD               	comf	(??_f_write+1)& (0+255),f,b
  9484  000BD2  4BCC               	infsnz	??_f_write& (0+255),f,b
  9485  000BD4  2BCD               	incf	(??_f_write+1)& (0+255),f,b
  9486  000BD6  EE20 F004          	lfsr	2,4
  9487  000BDA  51C4               	movf	f_write@fp& (0+255),w,b
  9488  000BDC  26D9               	addwf	fsr2l,f,c
  9489  000BDE  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9490  000BE0  22DA               	addwfc	fsr2h,f,c
  9491  000BE2  EE10 F01D          	lfsr	1,29
  9492  000BE6  50DE               	movf	postinc2,w,c
  9493  000BE8  26E1               	addwf	fsr1l,f,c
  9494  000BEA  50DD               	movf	postdec2,w,c
  9495  000BEC  22E2               	addwfc	fsr1h,f,c
  9496  000BEE  50E7               	movf	indf1,w,c
  9497  000BF0  6FCE               	movwf	(??_f_write+2)& (0+255),b
  9498  000BF2  51CE               	movf	(??_f_write+2)& (0+255),w,b
  9499  000BF4  25CC               	addwf	??_f_write& (0+255),w,b
  9500  000BF6  6FDF               	movwf	f_write@cc& (0+255),b
  9501  000BF8  0E00               	movlw	0
  9502  000BFA  21CD               	addwfc	(??_f_write+1)& (0+255),w,b
  9503  000BFC  6FE0               	movwf	(f_write@cc+1)& (0+255),b
  9504  000BFE                     l1324:
  9505                           
  9506                           ; BSR set to: 0
  9507                           ;tff.c: 1033: if (disk_write(0, wbuff, sect, (BYTE)cc) != RES_OK)
  9508                           
  9509                           ; BSR set to: 0
  9510  000BFE  C0D9  F07F         	movff	f_write@wbuff,disk_write@buff
  9511  000C02  C0DA  F080         	movff	f_write@wbuff+1,disk_write@buff+1
  9512  000C06  C0DB  F081         	movff	f_write@sect,disk_write@sector
  9513  000C0A  C0DC  F082         	movff	f_write@sect+1,disk_write@sector+1
  9514  000C0E  C0DD  F083         	movff	f_write@sect+2,disk_write@sector+2
  9515  000C12  C0DE  F084         	movff	f_write@sect+3,disk_write@sector+3
  9516  000C16  C0DF  F085         	movff	f_write@cc,disk_write@count
  9517  000C1A  0E00               	movlw	0
  9518  000C1C  EC1B  F025         	call	_disk_write
  9519  000C20  0900               	iorlw	0
  9520  000C22  A4D8               	btfss	status,2,c
  9521  000C24  D14B               	goto	l1322
  9522                           
  9523                           ;tff.c: 1035: fp->csect += (BYTE)cc;
  9524                           
  9525                           ;tff.c: 1034: goto fw_error;
  9526  000C26  0100               	movlb	0	; () banked
  9527  000C28  EE20 F003          	lfsr	2,3
  9528  000C2C  51C4               	movf	f_write@fp& (0+255),w,b
  9529  000C2E  26D9               	addwf	fsr2l,f,c
  9530  000C30  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9531  000C32  22DA               	addwfc	fsr2h,f,c
  9532  000C34  51DF               	movf	f_write@cc& (0+255),w,b
  9533  000C36  26DF               	addwf	indf2,f,c
  9534                           
  9535                           ; BSR set to: 0
  9536                           ;tff.c: 1036: wcnt = 512U * cc;
  9537  000C38  C0DF  F0CC         	movff	f_write@cc,??_f_write
  9538  000C3C  C0E0  F0CD         	movff	f_write@cc+1,??_f_write+1
  9539  000C40  0E09               	movlw	9
  9540  000C42                     u13335:
  9541  000C42  90D8               	bcf	status,0,c
  9542  000C44  37CC               	rlcf	??_f_write& (0+255),f,b
  9543  000C46  37CD               	rlcf	(??_f_write+1)& (0+255),f,b
  9544  000C48  2EE8               	decfsz	wreg,f,c
  9545  000C4A  D7FB               	goto	u13335
  9546  000C4C  C0CC  F0E3         	movff	??_f_write,f_write@wcnt
  9547  000C50  C0CD  F0E4         	movff	??_f_write+1,f_write@wcnt+1
  9548                           
  9549                           ;tff.c: 1037: continue;
  9550  000C54  D0DF               	goto	l1326
  9551  000C56                     l1323:
  9552                           
  9553                           ; BSR set to: 0
  9554                           ;tff.c: 1038: }
  9555                           ;tff.c: 1039: if (fp->fptr >= fp->fsize) {
  9556                           
  9557                           ; BSR set to: 0
  9558  000C56  EE20 F00A          	lfsr	2,10
  9559  000C5A  51C4               	movf	f_write@fp& (0+255),w,b
  9560  000C5C  26D9               	addwf	fsr2l,f,c
  9561  000C5E  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9562  000C60  22DA               	addwfc	fsr2h,f,c
  9563  000C62  EE10 F006          	lfsr	1,6
  9564  000C66  51C4               	movf	f_write@fp& (0+255),w,b
  9565  000C68  26E1               	addwf	fsr1l,f,c
  9566  000C6A  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9567  000C6C  22E2               	addwfc	fsr1h,f,c
  9568  000C6E  50DE               	movf	postinc2,w,c
  9569  000C70  5CE6               	subwf	postinc1,w,c
  9570  000C72  50DE               	movf	postinc2,w,c
  9571  000C74  58E6               	subwfb	postinc1,w,c
  9572  000C76  50DE               	movf	postinc2,w,c
  9573  000C78  58E6               	subwfb	postinc1,w,c
  9574  000C7A  50DE               	movf	postinc2,w,c
  9575  000C7C  58E6               	subwfb	postinc1,w,c
  9576  000C7E  A0D8               	btfss	status,0,c
  9577  000C80  D022               	goto	l1327
  9578                           
  9579                           ; BSR set to: 0
  9580                           ;tff.c: 1040: if (!move_window(0)) goto fw_error;
  9581  000C82  0E00               	movlw	0
  9582  000C84  6F8B               	movwf	move_window@sector& (0+255),b
  9583  000C86  0E00               	movlw	0
  9584  000C88  6F8C               	movwf	(move_window@sector+1)& (0+255),b
  9585  000C8A  0E00               	movlw	0
  9586  000C8C  6F8D               	movwf	(move_window@sector+2)& (0+255),b
  9587  000C8E  0E00               	movlw	0
  9588  000C90  6F8E               	movwf	(move_window@sector+3)& (0+255),b
  9589  000C92  EC8D  F01A         	call	_move_window	;wreg free
  9590  000C96  0900               	iorlw	0
  9591  000C98  B4D8               	btfsc	status,2,c
  9592  000C9A  D110               	goto	l1322
  9593                           
  9594                           ;tff.c: 1041: fp->fs->winsect = sect;
  9595  000C9C  0100               	movlb	0	; () banked
  9596  000C9E  EE20 F004          	lfsr	2,4
  9597  000CA2  51C4               	movf	f_write@fp& (0+255),w,b
  9598  000CA4  26D9               	addwf	fsr2l,f,c
  9599  000CA6  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9600  000CA8  22DA               	addwfc	fsr2h,f,c
  9601  000CAA  EE10 F004          	lfsr	1,4
  9602  000CAE  50DE               	movf	postinc2,w,c
  9603  000CB0  26E1               	addwf	fsr1l,f,c
  9604  000CB2  50DD               	movf	postdec2,w,c
  9605  000CB4  22E2               	addwfc	fsr1h,f,c
  9606  000CB6  C0DB  FFE6         	movff	f_write@sect,postinc1
  9607  000CBA  C0DC  FFE6         	movff	f_write@sect+1,postinc1
  9608  000CBE  C0DD  FFE6         	movff	f_write@sect+2,postinc1
  9609  000CC2  C0DE  FFE6         	movff	f_write@sect+3,postinc1
  9610  000CC6                     l1327:
  9611                           
  9612                           ; BSR set to: 0
  9613                           ;tff.c: 1042: }
  9614                           ;tff.c: 1043: fp->csect++;
  9615                           
  9616                           ; BSR set to: 0
  9617  000CC6  EE20 F003          	lfsr	2,3
  9618  000CCA  51C4               	movf	f_write@fp& (0+255),w,b
  9619  000CCC  26D9               	addwf	fsr2l,f,c
  9620  000CCE  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9621  000CD0  22DA               	addwfc	fsr2h,f,c
  9622  000CD2  2ADF               	incf	indf2,f,c
  9623  000CD4                     l1312:
  9624                           
  9625                           ; BSR set to: 0
  9626                           ;tff.c: 1044: }
  9627                           ;tff.c: 1045: sect = clust2sect(fp->curr_clust) + fp->csect - 1;
  9628                           
  9629                           ; BSR set to: 0
  9630  000CD4  EE20 F010          	lfsr	2,16
  9631  000CD8  51C4               	movf	f_write@fp& (0+255),w,b
  9632  000CDA  26D9               	addwf	fsr2l,f,c
  9633  000CDC  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9634  000CDE  22DA               	addwfc	fsr2h,f,c
  9635  000CE0  CFDE F06C          	movff	postinc2,clust2sect@clust
  9636  000CE4  CFDD F06D          	movff	postdec2,clust2sect@clust+1
  9637  000CE8  ECA7  F021         	call	_clust2sect	;wreg free
  9638  000CEC  0100               	movlb	0	; () banked
  9639  000CEE  EE20 F003          	lfsr	2,3
  9640  000CF2  51C4               	movf	f_write@fp& (0+255),w,b
  9641  000CF4  26D9               	addwf	fsr2l,f,c
  9642  000CF6  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9643  000CF8  22DA               	addwfc	fsr2h,f,c
  9644  000CFA  50DF               	movf	indf2,w,c
  9645  000CFC  6FCC               	movwf	??_f_write& (0+255),b
  9646  000CFE  51CC               	movf	??_f_write& (0+255),w,b
  9647  000D00  256C               	addwf	?_clust2sect& (0+255),w,b
  9648  000D02  6FCD               	movwf	(??_f_write+1)& (0+255),b
  9649  000D04  0E00               	movlw	0
  9650  000D06  216D               	addwfc	(?_clust2sect+1)& (0+255),w,b
  9651  000D08  6FCE               	movwf	(??_f_write+2)& (0+255),b
  9652  000D0A  0E00               	movlw	0
  9653  000D0C  216E               	addwfc	(?_clust2sect+2)& (0+255),w,b
  9654  000D0E  6FCF               	movwf	(??_f_write+3)& (0+255),b
  9655  000D10  0E00               	movlw	0
  9656  000D12  216F               	addwfc	(?_clust2sect+3)& (0+255),w,b
  9657  000D14  6FD0               	movwf	(??_f_write+4)& (0+255),b
  9658  000D16  0EFF               	movlw	255
  9659  000D18  25CD               	addwf	(??_f_write+1)& (0+255),w,b
  9660  000D1A  6FDB               	movwf	f_write@sect& (0+255),b
  9661  000D1C  0EFF               	movlw	255
  9662  000D1E  21CE               	addwfc	(??_f_write+2)& (0+255),w,b
  9663  000D20  6FDC               	movwf	(f_write@sect+1)& (0+255),b
  9664  000D22  0EFF               	movlw	255
  9665  000D24  21CF               	addwfc	(??_f_write+3)& (0+255),w,b
  9666  000D26  6FDD               	movwf	(f_write@sect+2)& (0+255),b
  9667  000D28  0EFF               	movlw	255
  9668  000D2A  21D0               	addwfc	(??_f_write+4)& (0+255),w,b
  9669  000D2C  6FDE               	movwf	(f_write@sect+3)& (0+255),b
  9670                           
  9671                           ; BSR set to: 0
  9672                           ;tff.c: 1046: if (!move_window(sect)) goto fw_error;
  9673  000D2E  C0DB  F08B         	movff	f_write@sect,move_window@sector
  9674  000D32  C0DC  F08C         	movff	f_write@sect+1,move_window@sector+1
  9675  000D36  C0DD  F08D         	movff	f_write@sect+2,move_window@sector+2
  9676  000D3A  C0DE  F08E         	movff	f_write@sect+3,move_window@sector+3
  9677  000D3E  EC8D  F01A         	call	_move_window	;wreg free
  9678  000D42  0900               	iorlw	0
  9679  000D44  B4D8               	btfsc	status,2,c
  9680  000D46  D0BA               	goto	l1322
  9681                           
  9682                           ;tff.c: 1047: wcnt = 512U - (fp->fptr % 512U);
  9683  000D48  0EFF               	movlw	255
  9684  000D4A  0100               	movlb	0	; () banked
  9685  000D4C  6FCC               	movwf	??_f_write& (0+255),b
  9686  000D4E  0E01               	movlw	1
  9687  000D50  6FCD               	movwf	(??_f_write+1)& (0+255),b
  9688  000D52  EE20 F006          	lfsr	2,6
  9689  000D56  51C4               	movf	f_write@fp& (0+255),w,b
  9690  000D58  26D9               	addwf	fsr2l,f,c
  9691  000D5A  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9692  000D5C  22DA               	addwfc	fsr2h,f,c
  9693  000D5E  CFDE F0CE          	movff	postinc2,??_f_write+2
  9694  000D62  CFDD F0CF          	movff	postdec2,??_f_write+3
  9695  000D66  51CC               	movf	??_f_write& (0+255),w,b
  9696  000D68  17CE               	andwf	(??_f_write+2)& (0+255),f,b
  9697  000D6A  51CD               	movf	(??_f_write+1)& (0+255),w,b
  9698  000D6C  17CF               	andwf	(??_f_write+3)& (0+255),f,b
  9699  000D6E  1FCE               	comf	(??_f_write+2)& (0+255),f,b
  9700  000D70  1FCF               	comf	(??_f_write+3)& (0+255),f,b
  9701  000D72  4BCE               	infsnz	(??_f_write+2)& (0+255),f,b
  9702  000D74  2BCF               	incf	(??_f_write+3)& (0+255),f,b
  9703  000D76  0E00               	movlw	0
  9704  000D78  25CE               	addwf	(??_f_write+2)& (0+255),w,b
  9705  000D7A  6FE3               	movwf	f_write@wcnt& (0+255),b
  9706  000D7C  0E02               	movlw	2
  9707  000D7E  21CF               	addwfc	(??_f_write+3)& (0+255),w,b
  9708  000D80  6FE4               	movwf	(f_write@wcnt+1)& (0+255),b
  9709                           
  9710                           ; BSR set to: 0
  9711                           ;tff.c: 1048: if (wcnt > btw) wcnt = btw;
  9712  000D82  51E3               	movf	f_write@wcnt& (0+255),w,b
  9713  000D84  5DC8               	subwf	f_write@btw& (0+255),w,b
  9714  000D86  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
  9715  000D88  59C9               	subwfb	(f_write@btw+1)& (0+255),w,b
  9716  000D8A  B0D8               	btfsc	status,0,c
  9717  000D8C  D004               	goto	l1330
  9718                           
  9719                           ; BSR set to: 0
  9720  000D8E  C0C8  F0E3         	movff	f_write@btw,f_write@wcnt
  9721  000D92  C0C9  F0E4         	movff	f_write@btw+1,f_write@wcnt+1
  9722  000D96                     l1330:
  9723                           
  9724                           ; BSR set to: 0
  9725                           ;tff.c: 1049: memcpy(&fp->fs->win[fp->fptr % 512U], wbuff, wcnt);
  9726                           
  9727                           ; BSR set to: 0
  9728  000D96  0EFF               	movlw	255
  9729  000D98  6FCC               	movwf	??_f_write& (0+255),b
  9730  000D9A  0E01               	movlw	1
  9731  000D9C  6FCD               	movwf	(??_f_write+1)& (0+255),b
  9732  000D9E  EE20 F006          	lfsr	2,6
  9733  000DA2  51C4               	movf	f_write@fp& (0+255),w,b
  9734  000DA4  26D9               	addwf	fsr2l,f,c
  9735  000DA6  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9736  000DA8  22DA               	addwfc	fsr2h,f,c
  9737  000DAA  CFDE F0CE          	movff	postinc2,??_f_write+2
  9738  000DAE  CFDD F0CF          	movff	postdec2,??_f_write+3
  9739  000DB2  51CC               	movf	??_f_write& (0+255),w,b
  9740  000DB4  17CE               	andwf	(??_f_write+2)& (0+255),f,b
  9741  000DB6  51CD               	movf	(??_f_write+1)& (0+255),w,b
  9742  000DB8  17CF               	andwf	(??_f_write+3)& (0+255),f,b
  9743  000DBA  0E20               	movlw	32
  9744  000DBC  27CE               	addwf	(??_f_write+2)& (0+255),f,b
  9745  000DBE  0E00               	movlw	0
  9746  000DC0  23CF               	addwfc	(??_f_write+3)& (0+255),f,b
  9747  000DC2  EE20 F004          	lfsr	2,4
  9748  000DC6  51C4               	movf	f_write@fp& (0+255),w,b
  9749  000DC8  26D9               	addwf	fsr2l,f,c
  9750  000DCA  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9751  000DCC  22DA               	addwfc	fsr2h,f,c
  9752  000DCE  CFDE F0D0          	movff	postinc2,??_f_write+4
  9753  000DD2  CFDD F0D1          	movff	postdec2,??_f_write+5
  9754  000DD6  51CE               	movf	(??_f_write+2)& (0+255),w,b
  9755  000DD8  25D0               	addwf	(??_f_write+4)& (0+255),w,b
  9756  000DDA  6F60               	movwf	memcpy@d1& (0+255),b
  9757  000DDC  51CF               	movf	(??_f_write+3)& (0+255),w,b
  9758  000DDE  21D1               	addwfc	(??_f_write+5)& (0+255),w,b
  9759  000DE0  6F61               	movwf	(memcpy@d1+1)& (0+255),b
  9760  000DE2  C0D9  F062         	movff	f_write@wbuff,memcpy@s1
  9761  000DE6  C0DA  F063         	movff	f_write@wbuff+1,memcpy@s1+1
  9762  000DEA  C0E3  F064         	movff	f_write@wcnt,memcpy@n
  9763  000DEE  C0E4  F065         	movff	f_write@wcnt+1,memcpy@n+1
  9764  000DF2  ECDC  F028         	call	_memcpy	;wreg free
  9765                           
  9766                           ;tff.c: 1050: fp->fs->winflag = 1;
  9767  000DF6  0100               	movlb	0	; () banked
  9768  000DF8  EE20 F004          	lfsr	2,4
  9769  000DFC  51C4               	movf	f_write@fp& (0+255),w,b
  9770  000DFE  26D9               	addwf	fsr2l,f,c
  9771  000E00  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9772  000E02  22DA               	addwfc	fsr2h,f,c
  9773  000E04  EE10 F01F          	lfsr	1,31
  9774  000E08  50DE               	movf	postinc2,w,c
  9775  000E0A  26E1               	addwf	fsr1l,f,c
  9776  000E0C  50DD               	movf	postdec2,w,c
  9777  000E0E  22E2               	addwfc	fsr1h,f,c
  9778  000E10  0E01               	movlw	1
  9779  000E12  6EE7               	movwf	indf1,c
  9780  000E14                     l1326:
  9781                           
  9782                           ; BSR set to: 0
  9783                           
  9784                           ; BSR set to: 0
  9785  000E14  51E3               	movf	f_write@wcnt& (0+255),w,b
  9786  000E16  27D9               	addwf	f_write@wbuff& (0+255),f,b
  9787  000E18  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
  9788  000E1A  23DA               	addwfc	(f_write@wbuff+1)& (0+255),f,b
  9789                           
  9790                           ; BSR set to: 0
  9791  000E1C  EE20 F006          	lfsr	2,6
  9792  000E20  51C4               	movf	f_write@fp& (0+255),w,b
  9793  000E22  26D9               	addwf	fsr2l,f,c
  9794  000E24  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9795  000E26  22DA               	addwfc	fsr2h,f,c
  9796  000E28  51E3               	movf	f_write@wcnt& (0+255),w,b
  9797  000E2A  26DE               	addwf	postinc2,f,c
  9798  000E2C  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
  9799  000E2E  22DE               	addwfc	postinc2,f,c
  9800  000E30  0E00               	movlw	0
  9801  000E32  22DE               	addwfc	postinc2,f,c
  9802  000E34  22DE               	addwfc	postinc2,f,c
  9803                           
  9804                           ; BSR set to: 0
  9805  000E36  C0CA  FFD9         	movff	f_write@bw,fsr2l
  9806  000E3A  C0CB  FFDA         	movff	f_write@bw+1,fsr2h
  9807  000E3E  51E3               	movf	f_write@wcnt& (0+255),w,b
  9808  000E40  26DE               	addwf	postinc2,f,c
  9809  000E42  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
  9810  000E44  22DD               	addwfc	postdec2,f,c
  9811                           
  9812                           ; BSR set to: 0
  9813  000E46  51E3               	movf	f_write@wcnt& (0+255),w,b
  9814  000E48  5FC8               	subwf	f_write@btw& (0+255),f,b
  9815  000E4A  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
  9816  000E4C  5BC9               	subwfb	(f_write@btw+1)& (0+255),f,b
  9817  000E4E                     l1310:
  9818                           
  9819                           ; BSR set to: 0
  9820                           
  9821                           ; BSR set to: 0
  9822  000E4E  51C8               	movf	f_write@btw& (0+255),w,b
  9823  000E50  11C9               	iorwf	(f_write@btw+1)& (0+255),w,b
  9824  000E52  A4D8               	btfss	status,2,c
  9825  000E54  D5C1               	goto	l1311
  9826  000E56                     u13380:
  9827                           
  9828                           ; BSR set to: 0
  9829                           ;tff.c: 1051: }
  9830                           ;tff.c: 1053: if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
  9831                           
  9832                           ; BSR set to: 0
  9833  000E56  EE20 F006          	lfsr	2,6
  9834  000E5A  51C4               	movf	f_write@fp& (0+255),w,b
  9835  000E5C  26D9               	addwf	fsr2l,f,c
  9836  000E5E  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9837  000E60  22DA               	addwfc	fsr2h,f,c
  9838  000E62  EE10 F00A          	lfsr	1,10
  9839  000E66  51C4               	movf	f_write@fp& (0+255),w,b
  9840  000E68  26E1               	addwf	fsr1l,f,c
  9841  000E6A  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9842  000E6C  22E2               	addwfc	fsr1h,f,c
  9843  000E6E  50DE               	movf	postinc2,w,c
  9844  000E70  5CE6               	subwf	postinc1,w,c
  9845  000E72  50DE               	movf	postinc2,w,c
  9846  000E74  58E6               	subwfb	postinc1,w,c
  9847  000E76  50DE               	movf	postinc2,w,c
  9848  000E78  58E6               	subwfb	postinc1,w,c
  9849  000E7A  50DE               	movf	postinc2,w,c
  9850  000E7C  58E6               	subwfb	postinc1,w,c
  9851  000E7E  B0D8               	btfsc	status,0,c
  9852  000E80  D014               	goto	l1331
  9853                           
  9854                           ; BSR set to: 0
  9855  000E82  EE20 F006          	lfsr	2,6
  9856  000E86  51C4               	movf	f_write@fp& (0+255),w,b
  9857  000E88  26D9               	addwf	fsr2l,f,c
  9858  000E8A  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9859  000E8C  22DA               	addwfc	fsr2h,f,c
  9860  000E8E  EE10 F00A          	lfsr	1,10
  9861  000E92  51C4               	movf	f_write@fp& (0+255),w,b
  9862  000E94  26E1               	addwf	fsr1l,f,c
  9863  000E96  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9864  000E98  22E2               	addwfc	fsr1h,f,c
  9865  000E9A  CFDE FFE6          	movff	postinc2,postinc1
  9866  000E9E  CFDE FFE6          	movff	postinc2,postinc1
  9867  000EA2  CFDE FFE6          	movff	postinc2,postinc1
  9868  000EA6  CFDE FFE6          	movff	postinc2,postinc1
  9869  000EAA                     l1331:
  9870                           
  9871                           ; BSR set to: 0
  9872                           ;tff.c: 1054: fp->flag |= 0x20;
  9873                           
  9874                           ; BSR set to: 0
  9875  000EAA  EE20 F002          	lfsr	2,2
  9876  000EAE  51C4               	movf	f_write@fp& (0+255),w,b
  9877  000EB0  26D9               	addwf	fsr2l,f,c
  9878  000EB2  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9879  000EB4  22DA               	addwfc	fsr2h,f,c
  9880  000EB6  0E00               	movlw	0
  9881  000EB8  8ADB               	bsf	plusw2,5,c
  9882                           
  9883                           ; BSR set to: 0
  9884                           ;tff.c: 1055: return res;
  9885                           ;	Return value of _f_write is never used
  9886  000EBA  0012               	return	
  9887  000EBC                     l1322:
  9888                           
  9889                           ;tff.c: 1058: fp->flag |= 0x80;
  9890                           
  9891                           ; BSR set to: 0
  9892  000EBC  0100               	movlb	0	; () banked
  9893  000EBE  EE20 F002          	lfsr	2,2
  9894  000EC2  51C4               	movf	f_write@fp& (0+255),w,b
  9895  000EC4  26D9               	addwf	fsr2l,f,c
  9896  000EC6  51C5               	movf	(f_write@fp+1)& (0+255),w,b
  9897  000EC8  22DA               	addwfc	fsr2h,f,c
  9898  000ECA  0E00               	movlw	0
  9899  000ECC  8EDB               	bsf	plusw2,7,c
  9900  000ECE  0012               	return	
  9901  000ED0                     __end_of_f_write:
  9902                           	opt stack 0
  9903                           tosu	equ	0xFFF
  9904                           tosh	equ	0xFFE
  9905                           tosl	equ	0xFFD
  9906                           pclath	equ	0xFFA
  9907                           tblptru	equ	0xFF8
  9908                           tblptrh	equ	0xFF7
  9909                           tblptrl	equ	0xFF6
  9910                           tablat	equ	0xFF5
  9911                           prodh	equ	0xFF4
  9912                           prodl	equ	0xFF3
  9913                           intcon	equ	0xFF2
  9914                           intcon2	equ	0xFF1
  9915                           intcon3	equ	0xFF0
  9916                           postinc0	equ	0xFEE
  9917                           wreg	equ	0xFE8
  9918                           indf1	equ	0xFE7
  9919                           postinc1	equ	0xFE6
  9920                           postdec1	equ	0xFE5
  9921                           plusw1	equ	0xFE3
  9922                           fsr1h	equ	0xFE2
  9923                           fsr1l	equ	0xFE1
  9924                           indf2	equ	0xFDF
  9925                           postinc2	equ	0xFDE
  9926                           postdec2	equ	0xFDD
  9927                           plusw2	equ	0xFDB
  9928                           fsr2h	equ	0xFDA
  9929                           fsr2l	equ	0xFD9
  9930                           status	equ	0xFD8
  9931                           
  9932 ;; *************** function ___llmod *****************
  9933 ;; Defined at:
  9934 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  9935 ;; Parameters:    Size  Location     Type
  9936 ;;  dividend        4    0[BANK0 ] unsigned long 
  9937 ;;  divisor         4    4[BANK0 ] unsigned long 
  9938 ;; Auto vars:     Size  Location     Type
  9939 ;;  counter         1    8[BANK0 ] unsigned char 
  9940 ;; Return value:  Size  Location     Type
  9941 ;;                  4    0[BANK0 ] unsigned long 
  9942 ;; Registers used:
  9943 ;;		wreg, status,2, status,0
  9944 ;; Tracked objects:
  9945 ;;		On entry : 0/0
  9946 ;;		On exit  : 0/0
  9947 ;;		Unchanged: 0/0
  9948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9949 ;;      Params:         0       8       0       0       0       0       0       0       0
  9950 ;;      Locals:         0       1       0       0       0       0       0       0       0
  9951 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9952 ;;      Totals:         0       9       0       0       0       0       0       0       0
  9953 ;;Total ram usage:        9 bytes
  9954 ;; Hardware stack levels used:    1
  9955 ;; Hardware stack levels required when called:    3
  9956 ;; This function calls:
  9957 ;;		Nothing
  9958 ;; This function is called by:
  9959 ;;		_fprintf
  9960 ;; This function uses a non-reentrant model
  9961 ;;
  9962                           
  9963                           	psect	text35
  9964  004D98                     __ptext35:
  9965                           	opt stack 0
  9966  004D98                     ___llmod:
  9967                           	opt stack 23
  9968                           
  9969                           ; BSR set to: 0
  9970                           ;incstack = 0
  9971  004D98  0100               	movlb	0	; () banked
  9972  004D9A  5164               	movf	___llmod@divisor& (0+255),w,b
  9973  004D9C  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  9974  004D9E  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  9975  004DA0  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  9976  004DA2  B4D8               	btfsc	status,2,c
  9977  004DA4  D024               	goto	l1895
  9978                           
  9979                           ; BSR set to: 0
  9980  004DA6  0E01               	movlw	1
  9981  004DA8  6F68               	movwf	___llmod@counter& (0+255),b
  9982  004DAA  D006               	goto	l1890
  9983  004DAC                     
  9984                           ; BSR set to: 0
  9985                           
  9986                           ; BSR set to: 0
  9987  004DAC  90D8               	bcf	status,0,c
  9988  004DAE  3764               	rlcf	___llmod@divisor& (0+255),f,b
  9989  004DB0  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  9990  004DB2  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  9991  004DB4  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  9992  004DB6  2B68               	incf	___llmod@counter& (0+255),f,b
  9993  004DB8                     l1890:
  9994                           
  9995                           ; BSR set to: 0
  9996                           
  9997                           ; BSR set to: 0
  9998  004DB8  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
  9999  004DBA  D7F8               	goto	l1891
 10000  004DBC                     u14730:
 10001                           
 10002                           ; BSR set to: 0
 10003                           
 10004                           ; BSR set to: 0
 10005                           
 10006                           ; BSR set to: 0
 10007  004DBC  5164               	movf	___llmod@divisor& (0+255),w,b
 10008  004DBE  5D60               	subwf	___llmod@dividend& (0+255),w,b
 10009  004DC0  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
 10010  004DC2  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 10011  004DC4  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
 10012  004DC6  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 10013  004DC8  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
 10014  004DCA  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 10015  004DCC  A0D8               	btfss	status,0,c
 10016  004DCE  D008               	goto	l1894
 10017                           
 10018                           ; BSR set to: 0
 10019  004DD0  5164               	movf	___llmod@divisor& (0+255),w,b
 10020  004DD2  5F60               	subwf	___llmod@dividend& (0+255),f,b
 10021  004DD4  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
 10022  004DD6  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 10023  004DD8  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
 10024  004DDA  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 10025  004DDC  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
 10026  004DDE  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 10027  004DE0                     l1894:
 10028                           
 10029                           ; BSR set to: 0
 10030                           
 10031                           ; BSR set to: 0
 10032  004DE0  90D8               	bcf	status,0,c
 10033  004DE2  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 10034  004DE4  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 10035  004DE6  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 10036  004DE8  3364               	rrcf	___llmod@divisor& (0+255),f,b
 10037                           
 10038                           ; BSR set to: 0
 10039  004DEA  2F68               	decfsz	___llmod@counter& (0+255),f,b
 10040  004DEC  D7E7               	goto	u14730
 10041  004DEE                     l1895:
 10042                           
 10043                           ; BSR set to: 0
 10044                           
 10045                           ; BSR set to: 0
 10046  004DEE  C060  F060         	movff	___llmod@dividend,?___llmod
 10047  004DF2  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
 10048  004DF6  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
 10049  004DFA  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
 10050                           
 10051                           ; BSR set to: 0
 10052  004DFE  0012               	return		;funcret
 10053  004E00                     __end_of___llmod:
 10054                           	opt stack 0
 10055                           tosu	equ	0xFFF
 10056                           tosh	equ	0xFFE
 10057                           tosl	equ	0xFFD
 10058                           pclath	equ	0xFFA
 10059                           tblptru	equ	0xFF8
 10060                           tblptrh	equ	0xFF7
 10061                           tblptrl	equ	0xFF6
 10062                           tablat	equ	0xFF5
 10063                           prodh	equ	0xFF4
 10064                           prodl	equ	0xFF3
 10065                           intcon	equ	0xFF2
 10066                           intcon2	equ	0xFF1
 10067                           intcon3	equ	0xFF0
 10068                           postinc0	equ	0xFEE
 10069                           wreg	equ	0xFE8
 10070                           indf1	equ	0xFE7
 10071                           postinc1	equ	0xFE6
 10072                           postdec1	equ	0xFE5
 10073                           plusw1	equ	0xFE3
 10074                           fsr1h	equ	0xFE2
 10075                           fsr1l	equ	0xFE1
 10076                           indf2	equ	0xFDF
 10077                           postinc2	equ	0xFDE
 10078                           postdec2	equ	0xFDD
 10079                           plusw2	equ	0xFDB
 10080                           fsr2h	equ	0xFDA
 10081                           fsr2l	equ	0xFD9
 10082                           status	equ	0xFD8
 10083                           
 10084 ;; *************** function _f_open *****************
 10085 ;; Defined at:
 10086 ;;		line 825 in file "bibliotecas/tff.c"
 10087 ;; Parameters:    Size  Location     Type
 10088 ;;  fp              2  119[BANK0 ] PTR struct _FIL
 10089 ;;		 -> fil(28), 
 10090 ;;  path            2  121[BANK0 ] PTR const unsigned char 
 10091 ;;		 -> STR_22(13), filename(15), 
 10092 ;;  mode            1  123[BANK0 ] unsigned char 
 10093 ;; Auto vars:     Size  Location     Type
 10094 ;;  dw              4   14[BANK1 ] unsigned long 
 10095 ;;  rs              2   12[BANK1 ] unsigned short 
 10096 ;;  dj             14   21[BANK1 ] struct _DIR_E
 10097 ;;  fn             12    0[BANK1 ] unsigned char [12]
 10098 ;;  dir             2   19[BANK1 ] PTR unsigned char 
 10099 ;;		 -> NULL(0), fs(544), 
 10100 ;;  res             1   18[BANK1 ] enum E155
 10101 ;; Return value:  Size  Location     Type
 10102 ;;                  1    wreg      enum E3974
 10103 ;; Registers used:
 10104 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10105 ;; Tracked objects:
 10106 ;;		On entry : 0/0
 10107 ;;		On exit  : 0/0
 10108 ;;		Unchanged: 0/0
 10109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10110 ;;      Params:         0       5       0       0       0       0       0       0       0
 10111 ;;      Locals:         0       0      35       0       0       0       0       0       0
 10112 ;;      Temps:          0       4       0       0       0       0       0       0       0
 10113 ;;      Totals:         0       9      35       0       0       0       0       0       0
 10114 ;;Total ram usage:       44 bytes
 10115 ;; Hardware stack levels used:    1
 10116 ;; Hardware stack levels required when called:   12
 10117 ;; This function calls:
 10118 ;;		_auto_mount
 10119 ;;		_get_fattime
 10120 ;;		_memcpy
 10121 ;;		_memset
 10122 ;;		_move_window
 10123 ;;		_remove_chain
 10124 ;;		_reserve_direntry
 10125 ;;		_trace_path
 10126 ;; This function is called by:
 10127 ;;		_escrita_sdcard
 10128 ;;		_sdcard_init
 10129 ;;		_leitura_sdcard
 10130 ;; This function uses a non-reentrant model
 10131 ;;
 10132                           
 10133                           	psect	text36
 10134  001C6A                     __ptext36:
 10135                           	opt stack 0
 10136  001C6A                     _f_open:
 10137                           	opt stack 15
 10138                           
 10139                           ;tff.c: 831: FRESULT res;
 10140                           ;tff.c: 832: DIR_E dj;
 10141                           ;tff.c: 833: BYTE *dir;
 10142                           ;tff.c: 834: char fn[8+3+1];
 10143                           ;tff.c: 837: fp->fs = (0);
 10144                           
 10145                           ; BSR set to: 0
 10146                           ;incstack = 0
 10147  001C6A  0100               	movlb	0	; () banked
 10148  001C6C  EE20 F004          	lfsr	2,4
 10149  001C70  51D7               	movf	f_open@fp& (0+255),w,b
 10150  001C72  26D9               	addwf	fsr2l,f,c
 10151  001C74  51D8               	movf	(f_open@fp+1)& (0+255),w,b
 10152  001C76  22DA               	addwfc	fsr2h,f,c
 10153  001C78  0E00               	movlw	0
 10154  001C7A  6EDE               	movwf	postinc2,c
 10155  001C7C  0E00               	movlw	0
 10156  001C7E  6EDD               	movwf	postdec2,c
 10157                           
 10158                           ; BSR set to: 0
 10159                           ;tff.c: 839: mode &= (0x01|0x02|0x08|0x10|0x04);
 10160  001C80  0E1F               	movlw	31
 10161  001C82  17DB               	andwf	f_open@mode& (0+255),f,b
 10162                           
 10163                           ; BSR set to: 0
 10164                           ;tff.c: 840: res = auto_mount(&path, (BYTE)(mode & (0x02|0x08|0x10|0x04)));
 10165  001C84  0ED9               	movlw	low f_open@path
 10166  001C86  6F93               	movwf	auto_mount@path& (0+255),b
 10167  001C88  0E00               	movlw	high f_open@path
 10168  001C8A  6F94               	movwf	(auto_mount@path+1)& (0+255),b
 10169  001C8C  51DB               	movf	f_open@mode& (0+255),w,b
 10170  001C8E  0B1E               	andlw	30
 10171  001C90  6F95               	movwf	auto_mount@chk_wp& (0+255),b
 10172  001C92  EC68  F007         	call	_auto_mount	;wreg free
 10173  001C96  0101               	movlb	1	; () banked
 10174  001C98  6FE6               	movwf	f_open@res& (0+255),b
 10175                           
 10176                           ; BSR set to: 1
 10177                           ;tff.c: 845: if (res != FR_OK) return res;
 10178  001C9A  51E6               	movf	f_open@res& (0+255),w,b
 10179  001C9C  B4D8               	btfsc	status,2,c
 10180  001C9E  D002               	goto	l1255
 10181                           
 10182                           ; BSR set to: 1
 10183  001CA0  51E6               	movf	f_open@res& (0+255),w,b
 10184                           
 10185                           ; BSR set to: 1
 10186  001CA2  0012               	return	
 10187  001CA4                     l1255:
 10188                           
 10189                           ; BSR set to: 1
 10190                           ;tff.c: 846: res = trace_path(&dj, fn, path, &dir);
 10191                           
 10192                           ; BSR set to: 1
 10193  001CA4  0EE9               	movlw	low f_open@dj
 10194  001CA6  0100               	movlb	0	; () banked
 10195  001CA8  6FC0               	movwf	trace_path@dj& (0+255),b
 10196  001CAA  0E01               	movlw	high f_open@dj
 10197  001CAC  6FC1               	movwf	(trace_path@dj+1)& (0+255),b
 10198  001CAE  0ED4               	movlw	low f_open@fn
 10199  001CB0  6FC2               	movwf	trace_path@fn& (0+255),b
 10200  001CB2  0E01               	movlw	high f_open@fn
 10201  001CB4  6FC3               	movwf	(trace_path@fn+1)& (0+255),b
 10202  001CB6  C0D9  F0C4         	movff	f_open@path,trace_path@path
 10203  001CBA  C0DA  F0C5         	movff	f_open@path+1,trace_path@path+1
 10204  001CBE  0EE7               	movlw	low f_open@dir
 10205  001CC0  6FC6               	movwf	trace_path@dir& (0+255),b
 10206  001CC2  0E01               	movlw	high f_open@dir
 10207  001CC4  6FC7               	movwf	(trace_path@dir+1)& (0+255),b
 10208  001CC6  ECA3  F011         	call	_trace_path	;wreg free
 10209  001CCA  0101               	movlb	1	; () banked
 10210  001CCC  6FE6               	movwf	f_open@res& (0+255),b
 10211                           
 10212                           ; BSR set to: 1
 10213                           ;tff.c: 850: if (mode & (0x08|0x10|0x04)) {
 10214  001CCE  C0DB  F0DC         	movff	f_open@mode,??_f_open
 10215  001CD2  0E1C               	movlw	28
 10216  001CD4  0100               	movlb	0	; () banked
 10217  001CD6  17DC               	andwf	??_f_open& (0+255),f,b
 10218  001CD8  B4D8               	btfsc	status,2,c
 10219  001CDA  D0F6               	goto	l1257
 10220                           
 10221                           ; BSR set to: 0
 10222                           ;tff.c: 851: CLUST rs;
 10223                           ;tff.c: 852: DWORD dw;
 10224                           ;tff.c: 853: if (res != FR_OK) {
 10225  001CDC  0101               	movlb	1	; () banked
 10226  001CDE  51E6               	movf	f_open@res& (0+255),w,b
 10227  001CE0  B4D8               	btfsc	status,2,c
 10228  001CE2  D042               	goto	l1258
 10229                           
 10230                           ; BSR set to: 1
 10231                           ;tff.c: 854: if (res != FR_NO_FILE) return res;
 10232  001CE4  0E02               	movlw	2
 10233  001CE6  19E6               	xorwf	f_open@res& (0+255),w,b
 10234  001CE8  B4D8               	btfsc	status,2,c
 10235  001CEA  D002               	goto	l1259
 10236                           
 10237                           ; BSR set to: 1
 10238  001CEC  51E6               	movf	f_open@res& (0+255),w,b
 10239                           
 10240                           ; BSR set to: 1
 10241  001CEE  0012               	return	
 10242  001CF0                     l1259:
 10243                           
 10244                           ; BSR set to: 1
 10245                           ;tff.c: 855: res = reserve_direntry(&dj, &dir);
 10246                           
 10247                           ; BSR set to: 1
 10248  001CF0  0EE9               	movlw	low f_open@dj
 10249  001CF2  0100               	movlb	0	; () banked
 10250  001CF4  6FC4               	movwf	reserve_direntry@dj& (0+255),b
 10251  001CF6  0E01               	movlw	high f_open@dj
 10252  001CF8  6FC5               	movwf	(reserve_direntry@dj+1)& (0+255),b
 10253  001CFA  0EE7               	movlw	low f_open@dir
 10254  001CFC  6FC6               	movwf	reserve_direntry@dir& (0+255),b
 10255  001CFE  0E01               	movlw	high f_open@dir
 10256  001D00  6FC7               	movwf	(reserve_direntry@dir+1)& (0+255),b
 10257  001D02  ECF9  F012         	call	_reserve_direntry	;wreg free
 10258  001D06  0101               	movlb	1	; () banked
 10259  001D08  6FE6               	movwf	f_open@res& (0+255),b
 10260                           
 10261                           ; BSR set to: 1
 10262                           ;tff.c: 856: if (res != FR_OK) return res;
 10263  001D0A  51E6               	movf	f_open@res& (0+255),w,b
 10264  001D0C  B4D8               	btfsc	status,2,c
 10265  001D0E  D002               	goto	l1260
 10266                           
 10267                           ; BSR set to: 1
 10268  001D10  51E6               	movf	f_open@res& (0+255),w,b
 10269                           
 10270                           ; BSR set to: 1
 10271  001D12  0012               	return	
 10272  001D14                     l1260:
 10273                           
 10274                           ; BSR set to: 1
 10275                           ;tff.c: 857: memset(dir, 0, 32);
 10276                           
 10277                           ; BSR set to: 1
 10278  001D14  C1E7  F060         	movff	f_open@dir,memset@p1
 10279  001D18  C1E8  F061         	movff	f_open@dir+1,memset@p1+1
 10280  001D1C  0E00               	movlw	0
 10281  001D1E  0100               	movlb	0	; () banked
 10282  001D20  6F63               	movwf	(memset@c+1)& (0+255),b
 10283  001D22  0E00               	movlw	0
 10284  001D24  6F62               	movwf	memset@c& (0+255),b
 10285  001D26  0E00               	movlw	0
 10286  001D28  6F65               	movwf	(memset@n+1)& (0+255),b
 10287  001D2A  0E20               	movlw	32
 10288  001D2C  6F64               	movwf	memset@n& (0+255),b
 10289  001D2E  EC63  F02A         	call	_memset	;wreg free
 10290                           
 10291                           ;tff.c: 858: memcpy(&dir[0], fn, 8+3);
 10292  001D32  C1E7  F060         	movff	f_open@dir,memcpy@d1
 10293  001D36  C1E8  F061         	movff	f_open@dir+1,memcpy@d1+1
 10294  001D3A  0ED4               	movlw	low f_open@fn
 10295  001D3C  0100               	movlb	0	; () banked
 10296  001D3E  6F62               	movwf	memcpy@s1& (0+255),b
 10297  001D40  0E01               	movlw	high f_open@fn
 10298  001D42  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 10299  001D44  0E00               	movlw	0
 10300  001D46  6F65               	movwf	(memcpy@n+1)& (0+255),b
 10301  001D48  0E0B               	movlw	11
 10302  001D4A  6F64               	movwf	memcpy@n& (0+255),b
 10303  001D4C  ECDC  F028         	call	_memcpy	;wreg free
 10304                           
 10305                           ;tff.c: 859: dir[12] = fn[11];
 10306  001D50  0101               	movlb	1	; () banked
 10307  001D52  EE20 F00C          	lfsr	2,12
 10308  001D56  51E7               	movf	f_open@dir& (0+255),w,b
 10309  001D58  26D9               	addwf	fsr2l,f,c
 10310  001D5A  51E8               	movf	(f_open@dir+1)& (0+255),w,b
 10311  001D5C  22DA               	addwfc	fsr2h,f,c
 10312  001D5E  C1DF  FFDF         	movff	f_open@fn+11,indf2
 10313                           
 10314                           ; BSR set to: 1
 10315                           ;tff.c: 860: mode |= 0x08;
 10316  001D62  0100               	movlb	0	; () banked
 10317  001D64  87DB               	bsf	f_open@mode& (0+255),3,b
 10318                           
 10319                           ;tff.c: 861: }
 10320  001D66  D080               	goto	l1266
 10321  001D68                     l1258:
 10322                           
 10323                           ; BSR set to: 1
 10324                           ;tff.c: 862: else {
 10325                           ;tff.c: 863: if (mode & 0x04)
 10326  001D68  0100               	movlb	0	; () banked
 10327  001D6A  A5DB               	btfss	f_open@mode& (0+255),2,b
 10328  001D6C  D002               	goto	l1262
 10329                           
 10330                           ; BSR set to: 0
 10331                           ;tff.c: 864: return FR_EXIST;
 10332  001D6E  0E07               	movlw	7
 10333                           
 10334                           ; BSR set to: 0
 10335  001D70  0012               	return	
 10336  001D72                     l1262:
 10337                           
 10338                           ; BSR set to: 0
 10339                           ;tff.c: 865: if (!dir || (dir[11] & (0x01|0x10)))
 10340                           
 10341                           ; BSR set to: 0
 10342  001D72  0101               	movlb	1	; () banked
 10343  001D74  51E7               	movf	f_open@dir& (0+255),w,b
 10344  001D76  11E8               	iorwf	(f_open@dir+1)& (0+255),w,b
 10345  001D78  B4D8               	btfsc	status,2,c
 10346  001D7A  D00D               	goto	u14850
 10347                           
 10348                           ; BSR set to: 1
 10349  001D7C  EE20 F00B          	lfsr	2,11
 10350  001D80  51E7               	movf	f_open@dir& (0+255),w,b
 10351  001D82  26D9               	addwf	fsr2l,f,c
 10352  001D84  51E8               	movf	(f_open@dir+1)& (0+255),w,b
 10353  001D86  22DA               	addwfc	fsr2h,f,c
 10354  001D88  50DF               	movf	indf2,w,c
 10355  001D8A  0100               	movlb	0	; () banked
 10356  001D8C  6FDC               	movwf	??_f_open& (0+255),b
 10357  001D8E  0E11               	movlw	17
 10358  001D90  17DC               	andwf	??_f_open& (0+255),f,b
 10359  001D92  B4D8               	btfsc	status,2,c
 10360  001D94  D002               	goto	l1263
 10361  001D96                     u14850:
 10362                           
 10363                           ;tff.c: 866: return FR_DENIED;
 10364                           
 10365                           ; BSR set to: 0
 10366  001D96  0E06               	movlw	6
 10367  001D98  0012               	return	
 10368  001D9A                     l1263:
 10369                           
 10370                           ; BSR set to: 0
 10371                           ;tff.c: 867: if (mode & 0x08) {
 10372  001D9A  A7DB               	btfss	f_open@mode& (0+255),3,b
 10373  001D9C  D065               	goto	l1266
 10374                           
 10375                           ; BSR set to: 0
 10376                           ;tff.c: 872: rs = (WORD)(*(WORD*)(BYTE*)(&dir[26]));
 10377  001D9E  0101               	movlb	1	; () banked
 10378  001DA0  EE20 F01A          	lfsr	2,26
 10379  001DA4  51E7               	movf	f_open@dir& (0+255),w,b
 10380  001DA6  26D9               	addwf	fsr2l,f,c
 10381  001DA8  51E8               	movf	(f_open@dir+1)& (0+255),w,b
 10382  001DAA  22DA               	addwfc	fsr2h,f,c
 10383  001DAC  CFDE F1E0          	movff	postinc2,f_open@rs
 10384  001DB0  CFDD F1E1          	movff	postdec2,f_open@rs+1
 10385                           
 10386                           ;tff.c: 874: *(WORD*)(BYTE*)(&dir[26])=(WORD)(0);
 10387  001DB4  EE20 F01A          	lfsr	2,26
 10388  001DB8  51E7               	movf	f_open@dir& (0+255),w,b
 10389  001DBA  26D9               	addwf	fsr2l,f,c
 10390  001DBC  51E8               	movf	(f_open@dir+1)& (0+255),w,b
 10391  001DBE  22DA               	addwfc	fsr2h,f,c
 10392  001DC0  0E00               	movlw	0
 10393  001DC2  6EDE               	movwf	postinc2,c
 10394  001DC4  0E00               	movlw	0
 10395  001DC6  6EDD               	movwf	postdec2,c
 10396                           
 10397                           ;tff.c: 875: *(DWORD*)(BYTE*)(&dir[28])=(DWORD)(0);
 10398  001DC8  EE20 F01C          	lfsr	2,28
 10399  001DCC  51E7               	movf	f_open@dir& (0+255),w,b
 10400  001DCE  26D9               	addwf	fsr2l,f,c
 10401  001DD0  51E8               	movf	(f_open@dir+1)& (0+255),w,b
 10402  001DD2  22DA               	addwfc	fsr2h,f,c
 10403  001DD4  6ADE               	clrf	postinc2,c
 10404  001DD6  6ADE               	clrf	postinc2,c
 10405  001DD8  6ADE               	clrf	postinc2,c
 10406  001DDA  6ADD               	clrf	postdec2,c
 10407                           
 10408                           ;tff.c: 876: dj.fs->winflag = 1;
 10409  001DDC  EE20 F01F          	lfsr	2,31
 10410  001DE0  51ED               	movf	(f_open@dj+4)& (0+255),w,b
 10411  001DE2  26D9               	addwf	fsr2l,f,c
 10412  001DE4  51EE               	movf	(f_open@dj+5)& (0+255),w,b
 10413  001DE6  22DA               	addwfc	fsr2h,f,c
 10414  001DE8  0E01               	movlw	1
 10415  001DEA  6EDF               	movwf	indf2,c
 10416                           
 10417                           ;tff.c: 877: dw = dj.fs->winsect;
 10418  001DEC  EE20 F004          	lfsr	2,4
 10419  001DF0  51ED               	movf	(f_open@dj+4)& (0+255),w,b
 10420  001DF2  26D9               	addwf	fsr2l,f,c
 10421  001DF4  51EE               	movf	(f_open@dj+5)& (0+255),w,b
 10422  001DF6  22DA               	addwfc	fsr2h,f,c
 10423  001DF8  CFDE F1E2          	movff	postinc2,f_open@dw
 10424  001DFC  CFDE F1E3          	movff	postinc2,f_open@dw+1
 10425  001E00  CFDE F1E4          	movff	postinc2,f_open@dw+2
 10426  001E04  CFDE F1E5          	movff	postinc2,f_open@dw+3
 10427                           
 10428                           ; BSR set to: 1
 10429                           ;tff.c: 878: if (!remove_chain(rs) || !move_window(dw))
 10430  001E08  C1E0  F0B6         	movff	f_open@rs,remove_chain@clust
 10431  001E0C  C1E1  F0B7         	movff	f_open@rs+1,remove_chain@clust+1
 10432  001E10  ECAB  F022         	call	_remove_chain	;wreg free
 10433  001E14  0900               	iorlw	0
 10434  001E16  B4D8               	btfsc	status,2,c
 10435  001E18  D00D               	goto	u14880
 10436  001E1A  C1E2  F08B         	movff	f_open@dw,move_window@sector
 10437  001E1E  C1E3  F08C         	movff	f_open@dw+1,move_window@sector+1
 10438  001E22  C1E4  F08D         	movff	f_open@dw+2,move_window@sector+2
 10439  001E26  C1E5  F08E         	movff	f_open@dw+3,move_window@sector+3
 10440  001E2A  EC8D  F01A         	call	_move_window	;wreg free
 10441  001E2E  0900               	iorlw	0
 10442  001E30  A4D8               	btfss	status,2,c
 10443  001E32  D002               	goto	l1267
 10444  001E34                     u14880:
 10445                           
 10446                           ;tff.c: 879: return FR_RW_ERROR;
 10447  001E34  0E08               	movlw	8
 10448  001E36  0012               	return	
 10449  001E38                     l1267:
 10450                           
 10451                           ;tff.c: 880: dj.fs->last_clust = rs - 1;
 10452  001E38  0EFF               	movlw	255
 10453  001E3A  0100               	movlb	0	; () banked
 10454  001E3C  6FDC               	movwf	??_f_open& (0+255),b
 10455  001E3E  0EFF               	movlw	255
 10456  001E40  6FDD               	movwf	(??_f_open+1)& (0+255),b
 10457  001E42  C1E0  F0DE         	movff	f_open@rs,??_f_open+2
 10458  001E46  C1E1  F0DF         	movff	f_open@rs+1,??_f_open+3
 10459  001E4A  51DC               	movf	??_f_open& (0+255),w,b
 10460  001E4C  27DE               	addwf	(??_f_open+2)& (0+255),f,b
 10461  001E4E  51DD               	movf	(??_f_open+1)& (0+255),w,b
 10462  001E50  23DF               	addwfc	(??_f_open+3)& (0+255),f,b
 10463  001E52  0101               	movlb	1	; () banked
 10464  001E54  EE20 F018          	lfsr	2,24
 10465  001E58  51ED               	movf	(f_open@dj+4)& (0+255),w,b
 10466  001E5A  26D9               	addwf	fsr2l,f,c
 10467  001E5C  51EE               	movf	(f_open@dj+5)& (0+255),w,b
 10468  001E5E  22DA               	addwfc	fsr2h,f,c
 10469  001E60  C0DE  FFDE         	movff	??_f_open+2,postinc2
 10470  001E64  C0DF  FFDD         	movff	??_f_open+3,postdec2
 10471  001E68                     l1266:
 10472                           
 10473                           ;tff.c: 881: }
 10474                           ;tff.c: 882: }
 10475                           ;tff.c: 883: if (mode & 0x08) {
 10476                           
 10477                           ; BSR set to: 1
 10478                           
 10479                           ; BSR set to: 1
 10480  001E68  0100               	movlb	0	; () banked
 10481  001E6A  A7DB               	btfss	f_open@mode& (0+255),3,b
 10482  001E6C  D04F               	goto	l1276
 10483                           
 10484                           ; BSR set to: 0
 10485                           ;tff.c: 884: dir[11] = 0;
 10486  001E6E  0101               	movlb	1	; () banked
 10487  001E70  EE20 F00B          	lfsr	2,11
 10488  001E74  51E7               	movf	f_open@dir& (0+255),w,b
 10489  001E76  26D9               	addwf	fsr2l,f,c
 10490  001E78  51E8               	movf	(f_open@dir+1)& (0+255),w,b
 10491  001E7A  22DA               	addwfc	fsr2h,f,c
 10492  001E7C  0E00               	movlw	0
 10493  001E7E  6EDF               	movwf	indf2,c
 10494                           
 10495                           ; BSR set to: 1
 10496                           ;tff.c: 885: dw = get_fattime();
 10497  001E80  ECF4  F01F         	call	_get_fattime	;wreg free
 10498  001E84  C060  F1E2         	movff	?_get_fattime,f_open@dw
 10499  001E88  C061  F1E3         	movff	?_get_fattime+1,f_open@dw+1
 10500  001E8C  C062  F1E4         	movff	?_get_fattime+2,f_open@dw+2
 10501  001E90  C063  F1E5         	movff	?_get_fattime+3,f_open@dw+3
 10502                           
 10503                           ;tff.c: 886: *(DWORD*)(BYTE*)(&dir[14])=(DWORD)(dw);
 10504  001E94  0101               	movlb	1	; () banked
 10505  001E96  EE20 F00E          	lfsr	2,14
 10506  001E9A  51E7               	movf	f_open@dir& (0+255),w,b
 10507  001E9C  26D9               	addwf	fsr2l,f,c
 10508  001E9E  51E8               	movf	(f_open@dir+1)& (0+255),w,b
 10509  001EA0  22DA               	addwfc	fsr2h,f,c
 10510  001EA2  C1E2  FFDE         	movff	f_open@dw,postinc2
 10511  001EA6  C1E3  FFDE         	movff	f_open@dw+1,postinc2
 10512  001EAA  C1E4  FFDE         	movff	f_open@dw+2,postinc2
 10513  001EAE  C1E5  FFDE         	movff	f_open@dw+3,postinc2
 10514                           
 10515                           ; BSR set to: 1
 10516                           ;tff.c: 887: dj.fs->winflag = 1;
 10517  001EB2  EE20 F01F          	lfsr	2,31
 10518  001EB6  51ED               	movf	(f_open@dj+4)& (0+255),w,b
 10519  001EB8  26D9               	addwf	fsr2l,f,c
 10520  001EBA  51EE               	movf	(f_open@dj+5)& (0+255),w,b
 10521  001EBC  22DA               	addwfc	fsr2h,f,c
 10522  001EBE  0E01               	movlw	1
 10523  001EC0  6EDF               	movwf	indf2,c
 10524                           
 10525                           ; BSR set to: 1
 10526                           ;tff.c: 888: mode |= 0x20;
 10527  001EC2  0100               	movlb	0	; () banked
 10528  001EC4  8BDB               	bsf	f_open@mode& (0+255),5,b
 10529                           
 10530                           ; BSR set to: 0
 10531                           ;tff.c: 889: }
 10532                           ;tff.c: 890: }
 10533  001EC6  D022               	goto	l1276
 10534  001EC8                     l1257:
 10535                           
 10536                           ; BSR set to: 0
 10537                           ;tff.c: 892: else {
 10538                           ;tff.c: 894: if (res != FR_OK) return res;
 10539                           
 10540                           ; BSR set to: 0
 10541  001EC8  0101               	movlb	1	; () banked
 10542  001ECA  51E6               	movf	f_open@res& (0+255),w,b
 10543  001ECC  B4D8               	btfsc	status,2,c
 10544  001ECE  D002               	goto	l1272
 10545                           
 10546                           ; BSR set to: 1
 10547  001ED0  51E6               	movf	f_open@res& (0+255),w,b
 10548                           
 10549                           ; BSR set to: 1
 10550  001ED2  0012               	return	
 10551  001ED4                     l1272:
 10552                           
 10553                           ; BSR set to: 1
 10554                           ;tff.c: 895: if (!dir || (dir[11] & 0x10))
 10555                           
 10556                           ; BSR set to: 1
 10557  001ED4  51E7               	movf	f_open@dir& (0+255),w,b
 10558  001ED6  11E8               	iorwf	(f_open@dir+1)& (0+255),w,b
 10559  001ED8  B4D8               	btfsc	status,2,c
 10560  001EDA  D008               	goto	u14920
 10561                           
 10562                           ; BSR set to: 1
 10563  001EDC  EE20 F00B          	lfsr	2,11
 10564  001EE0  51E7               	movf	f_open@dir& (0+255),w,b
 10565  001EE2  26D9               	addwf	fsr2l,f,c
 10566  001EE4  51E8               	movf	(f_open@dir+1)& (0+255),w,b
 10567  001EE6  22DA               	addwfc	fsr2h,f,c
 10568  001EE8  A8DF               	btfss	indf2,4,c
 10569  001EEA  D002               	goto	l1273
 10570  001EEC                     u14920:
 10571                           
 10572                           ; BSR set to: 1
 10573                           ;tff.c: 896: return FR_NO_FILE;
 10574                           
 10575                           ; BSR set to: 1
 10576  001EEC  0E02               	movlw	2
 10577                           
 10578                           ; BSR set to: 1
 10579  001EEE  0012               	return	
 10580  001EF0                     l1273:
 10581                           
 10582                           ; BSR set to: 1
 10583                           ;tff.c: 898: if ((mode & 0x02) && (dir[11] & 0x01))
 10584  001EF0  0100               	movlb	0	; () banked
 10585  001EF2  A3DB               	btfss	f_open@mode& (0+255),1,b
 10586  001EF4  D00B               	goto	l1276
 10587                           
 10588                           ; BSR set to: 0
 10589  001EF6  0101               	movlb	1	; () banked
 10590  001EF8  EE20 F00B          	lfsr	2,11
 10591  001EFC  51E7               	movf	f_open@dir& (0+255),w,b
 10592  001EFE  26D9               	addwf	fsr2l,f,c
 10593  001F00  51E8               	movf	(f_open@dir+1)& (0+255),w,b
 10594  001F02  22DA               	addwfc	fsr2h,f,c
 10595  001F04  A0DF               	btfss	indf2,0,c
 10596  001F06  D002               	goto	l1276
 10597                           
 10598                           ; BSR set to: 1
 10599                           ;tff.c: 899: return FR_DENIED;
 10600  001F08  0E06               	movlw	6
 10601                           
 10602                           ; BSR set to: 1
 10603  001F0A  0012               	return	
 10604  001F0C                     l1276:
 10605                           
 10606                           ;tff.c: 900: }
 10607                           ;tff.c: 901: fp->dir_sect = dj.fs->winsect;
 10608                           
 10609                           ; BSR set to: 1
 10610                           
 10611                           ; BSR set to: 1
 10612  001F0C  0101               	movlb	1	; () banked
 10613  001F0E  EE20 F004          	lfsr	2,4
 10614  001F12  51ED               	movf	(f_open@dj+4)& (0+255),w,b
 10615  001F14  26D9               	addwf	fsr2l,f,c
 10616  001F16  51EE               	movf	(f_open@dj+5)& (0+255),w,b
 10617  001F18  22DA               	addwfc	fsr2h,f,c
 10618  001F1A  0100               	movlb	0	; () banked
 10619  001F1C  EE10 F016          	lfsr	1,22
 10620  001F20  51D7               	movf	f_open@fp& (0+255),w,b
 10621  001F22  26E1               	addwf	fsr1l,f,c
 10622  001F24  51D8               	movf	(f_open@fp+1)& (0+255),w,b
 10623  001F26  22E2               	addwfc	fsr1h,f,c
 10624  001F28  CFDE FFE6          	movff	postinc2,postinc1
 10625  001F2C  CFDE FFE6          	movff	postinc2,postinc1
 10626  001F30  CFDE FFE6          	movff	postinc2,postinc1
 10627  001F34  CFDE FFE6          	movff	postinc2,postinc1
 10628                           
 10629                           ; BSR set to: 0
 10630                           ;tff.c: 902: fp->dir_ptr = dir;
 10631  001F38  EE20 F01A          	lfsr	2,26
 10632  001F3C  51D7               	movf	f_open@fp& (0+255),w,b
 10633  001F3E  26D9               	addwf	fsr2l,f,c
 10634  001F40  51D8               	movf	(f_open@fp+1)& (0+255),w,b
 10635  001F42  22DA               	addwfc	fsr2h,f,c
 10636  001F44  C1E7  FFDE         	movff	f_open@dir,postinc2
 10637  001F48  C1E8  FFDD         	movff	f_open@dir+1,postdec2
 10638                           
 10639                           ; BSR set to: 0
 10640                           ;tff.c: 904: fp->flag = mode;
 10641  001F4C  EE20 F002          	lfsr	2,2
 10642  001F50  51D7               	movf	f_open@fp& (0+255),w,b
 10643  001F52  26D9               	addwf	fsr2l,f,c
 10644  001F54  51D8               	movf	(f_open@fp+1)& (0+255),w,b
 10645  001F56  22DA               	addwfc	fsr2h,f,c
 10646  001F58  C0DB  FFDF         	movff	f_open@mode,indf2
 10647                           
 10648                           ;tff.c: 905: fp->org_clust =
 10649                           ;tff.c: 909: (WORD)(*(WORD*)(BYTE*)(&dir[26]));
 10650  001F5C  0101               	movlb	1	; () banked
 10651  001F5E  EE20 F01A          	lfsr	2,26
 10652  001F62  51E7               	movf	f_open@dir& (0+255),w,b
 10653  001F64  26D9               	addwf	fsr2l,f,c
 10654  001F66  51E8               	movf	(f_open@dir+1)& (0+255),w,b
 10655  001F68  22DA               	addwfc	fsr2h,f,c
 10656  001F6A  0100               	movlb	0	; () banked
 10657  001F6C  EE10 F00E          	lfsr	1,14
 10658  001F70  51D7               	movf	f_open@fp& (0+255),w,b
 10659  001F72  26E1               	addwf	fsr1l,f,c
 10660  001F74  51D8               	movf	(f_open@fp+1)& (0+255),w,b
 10661  001F76  22E2               	addwfc	fsr1h,f,c
 10662  001F78  CFDE FFE6          	movff	postinc2,postinc1
 10663  001F7C  CFDD FFE5          	movff	postdec2,postdec1
 10664                           
 10665                           ;tff.c: 910: fp->fsize = (DWORD)(*(DWORD*)(BYTE*)(&dir[28]));
 10666  001F80  0101               	movlb	1	; () banked
 10667  001F82  EE20 F01C          	lfsr	2,28
 10668  001F86  51E7               	movf	f_open@dir& (0+255),w,b
 10669  001F88  26D9               	addwf	fsr2l,f,c
 10670  001F8A  51E8               	movf	(f_open@dir+1)& (0+255),w,b
 10671  001F8C  22DA               	addwfc	fsr2h,f,c
 10672  001F8E  0100               	movlb	0	; () banked
 10673  001F90  EE10 F00A          	lfsr	1,10
 10674  001F94  51D7               	movf	f_open@fp& (0+255),w,b
 10675  001F96  26E1               	addwf	fsr1l,f,c
 10676  001F98  51D8               	movf	(f_open@fp+1)& (0+255),w,b
 10677  001F9A  22E2               	addwfc	fsr1h,f,c
 10678  001F9C  CFDE FFE6          	movff	postinc2,postinc1
 10679  001FA0  CFDE FFE6          	movff	postinc2,postinc1
 10680  001FA4  CFDE FFE6          	movff	postinc2,postinc1
 10681  001FA8  CFDE FFE6          	movff	postinc2,postinc1
 10682                           
 10683                           ; BSR set to: 0
 10684                           ;tff.c: 911: fp->fptr = 0; fp->csect = 255;
 10685  001FAC  EE20 F006          	lfsr	2,6
 10686  001FB0  51D7               	movf	f_open@fp& (0+255),w,b
 10687  001FB2  26D9               	addwf	fsr2l,f,c
 10688  001FB4  51D8               	movf	(f_open@fp+1)& (0+255),w,b
 10689  001FB6  22DA               	addwfc	fsr2h,f,c
 10690  001FB8  6ADE               	clrf	postinc2,c
 10691  001FBA  6ADE               	clrf	postinc2,c
 10692  001FBC  6ADE               	clrf	postinc2,c
 10693  001FBE  6ADD               	clrf	postdec2,c
 10694                           
 10695                           ; BSR set to: 0
 10696  001FC0  EE20 F003          	lfsr	2,3
 10697  001FC4  51D7               	movf	f_open@fp& (0+255),w,b
 10698  001FC6  26D9               	addwf	fsr2l,f,c
 10699  001FC8  51D8               	movf	(f_open@fp+1)& (0+255),w,b
 10700  001FCA  22DA               	addwfc	fsr2h,f,c
 10701  001FCC  0EFF               	movlw	255
 10702  001FCE  6EDF               	movwf	indf2,c
 10703                           
 10704                           ; BSR set to: 0
 10705                           ;tff.c: 912: fp->fs = dj.fs; fp->id = dj.fs->id;
 10706  001FD0  EE20 F004          	lfsr	2,4
 10707  001FD4  51D7               	movf	f_open@fp& (0+255),w,b
 10708  001FD6  26D9               	addwf	fsr2l,f,c
 10709  001FD8  51D8               	movf	(f_open@fp+1)& (0+255),w,b
 10710  001FDA  22DA               	addwfc	fsr2h,f,c
 10711  001FDC  C1ED  FFDE         	movff	f_open@dj+4,postinc2
 10712  001FE0  C1EE  FFDD         	movff	f_open@dj+5,postdec2
 10713                           
 10714                           ; BSR set to: 0
 10715  001FE4  C1ED  FFD9         	movff	f_open@dj+4,fsr2l
 10716  001FE8  C1EE  FFDA         	movff	f_open@dj+5,fsr2h
 10717  001FEC  C0D7  FFE1         	movff	f_open@fp,fsr1l
 10718  001FF0  C0D8  FFE2         	movff	f_open@fp+1,fsr1h
 10719  001FF4  CFDE FFE6          	movff	postinc2,postinc1
 10720  001FF8  CFDD FFE5          	movff	postdec2,postdec1
 10721                           
 10722                           ; BSR set to: 0
 10723                           ;tff.c: 914: return FR_OK;
 10724  001FFC  0E00               	movlw	0
 10725  001FFE  0012               	return	
 10726  002000                     __end_of_f_open:
 10727                           	opt stack 0
 10728                           tosu	equ	0xFFF
 10729                           tosh	equ	0xFFE
 10730                           tosl	equ	0xFFD
 10731                           pclath	equ	0xFFA
 10732                           tblptru	equ	0xFF8
 10733                           tblptrh	equ	0xFF7
 10734                           tblptrl	equ	0xFF6
 10735                           tablat	equ	0xFF5
 10736                           prodh	equ	0xFF4
 10737                           prodl	equ	0xFF3
 10738                           intcon	equ	0xFF2
 10739                           intcon2	equ	0xFF1
 10740                           intcon3	equ	0xFF0
 10741                           postinc0	equ	0xFEE
 10742                           wreg	equ	0xFE8
 10743                           indf1	equ	0xFE7
 10744                           postinc1	equ	0xFE6
 10745                           postdec1	equ	0xFE5
 10746                           plusw1	equ	0xFE3
 10747                           fsr1h	equ	0xFE2
 10748                           fsr1l	equ	0xFE1
 10749                           indf2	equ	0xFDF
 10750                           postinc2	equ	0xFDE
 10751                           postdec2	equ	0xFDD
 10752                           plusw2	equ	0xFDB
 10753                           fsr2h	equ	0xFDA
 10754                           fsr2l	equ	0xFD9
 10755                           status	equ	0xFD8
 10756                           
 10757 ;; *************** function _trace_path *****************
 10758 ;; Defined at:
 10759 ;;		line 501 in file "bibliotecas/tff.c"
 10760 ;; Parameters:    Size  Location     Type
 10761 ;;  dj              2   96[BANK0 ] PTR struct _DIR_E
 10762 ;;		 -> f_open@dj(14), 
 10763 ;;  fn              2   98[BANK0 ] PTR unsigned char 
 10764 ;;		 -> f_opendir@fn(12), f_open@fn(12), 
 10765 ;;  path            2  100[BANK0 ] PTR const unsigned char 
 10766 ;;		 -> STR_22(13), filename(15), 
 10767 ;;  dir             2  102[BANK0 ] PTR PTR unsigned char 
 10768 ;;		 -> f_opendir@dir(2), f_open@dir(2), 
 10769 ;; Auto vars:     Size  Location     Type
 10770 ;;  dptr            2  117[BANK0 ] PTR unsigned char 
 10771 ;;		 -> fs.win(512), NULL(0), fs(544), 
 10772 ;;  clust           2  114[BANK0 ] unsigned short 
 10773 ;;  fs              2  112[BANK0 ] PTR struct _FATFS
 10774 ;;		 -> NULL(0), fs(544), 
 10775 ;;  ds              1  116[BANK0 ] unsigned char 
 10776 ;; Return value:  Size  Location     Type
 10777 ;;                  1    wreg      enum E155
 10778 ;; Registers used:
 10779 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10780 ;; Tracked objects:
 10781 ;;		On entry : 0/0
 10782 ;;		On exit  : 0/0
 10783 ;;		Unchanged: 0/0
 10784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10785 ;;      Params:         0       8       0       0       0       0       0       0       0
 10786 ;;      Locals:         0      11       0       0       0       0       0       0       0
 10787 ;;      Temps:          0       4       0       0       0       0       0       0       0
 10788 ;;      Totals:         0      23       0       0       0       0       0       0       0
 10789 ;;Total ram usage:       23 bytes
 10790 ;; Hardware stack levels used:    1
 10791 ;; Hardware stack levels required when called:   11
 10792 ;; This function calls:
 10793 ;;		_clust2sect
 10794 ;;		_make_dirfile
 10795 ;;		_memcmp
 10796 ;;		_move_window
 10797 ;;		_next_dir_entry
 10798 ;; This function is called by:
 10799 ;;		_f_open
 10800 ;;		_f_opendir
 10801 ;; This function uses a non-reentrant model
 10802 ;;
 10803                           
 10804                           	psect	text37
 10805  002346                     __ptext37:
 10806                           	opt stack 0
 10807  002346                     _trace_path:
 10808                           	opt stack 15
 10809                           
 10810                           ;tff.c: 508: CLUST clust;
 10811                           ;tff.c: 509: char ds;
 10812                           ;tff.c: 510: BYTE *dptr = (0);
 10813                           
 10814                           ;incstack = 0
 10815  002346  0E00               	movlw	0
 10816  002348  0100               	movlb	0	; () banked
 10817  00234A  6FD5               	movwf	trace_path@dptr& (0+255),b
 10818  00234C  0E00               	movlw	0
 10819  00234E  6FD6               	movwf	(trace_path@dptr+1)& (0+255),b
 10820                           
 10821                           ;tff.c: 511: FATFS *fs = FatFs;
 10822  002350  C0FA  F0D0         	movff	_FatFs,trace_path@fs
 10823  002354  C0FB  F0D1         	movff	_FatFs+1,trace_path@fs+1
 10824                           
 10825                           ; BSR set to: 0
 10826                           ;tff.c: 514: dj->fs = fs;
 10827  002358  EE20 F004          	lfsr	2,4
 10828  00235C  51C0               	movf	trace_path@dj& (0+255),w,b
 10829  00235E  26D9               	addwf	fsr2l,f,c
 10830  002360  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 10831  002362  22DA               	addwfc	fsr2h,f,c
 10832  002364  C0D0  FFDE         	movff	trace_path@fs,postinc2
 10833  002368  C0D1  FFDD         	movff	trace_path@fs+1,postdec2
 10834                           
 10835                           ; BSR set to: 0
 10836                           ;tff.c: 515: clust = fs->dirbase;
 10837  00236C  EE20 F00C          	lfsr	2,12
 10838  002370  51D0               	movf	trace_path@fs& (0+255),w,b
 10839  002372  26D9               	addwf	fsr2l,f,c
 10840  002374  51D1               	movf	(trace_path@fs+1)& (0+255),w,b
 10841  002376  22DA               	addwfc	fsr2h,f,c
 10842  002378  CFDE F0D2          	movff	postinc2,trace_path@clust
 10843  00237C  CFDD F0D3          	movff	postdec2,trace_path@clust+1
 10844                           
 10845                           ; BSR set to: 0
 10846                           ;tff.c: 522: {
 10847                           ;tff.c: 523: dj->clust = dj->sclust = 0;
 10848  002380  EE20 F006          	lfsr	2,6
 10849  002384  51C0               	movf	trace_path@dj& (0+255),w,b
 10850  002386  26D9               	addwf	fsr2l,f,c
 10851  002388  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 10852  00238A  22DA               	addwfc	fsr2h,f,c
 10853  00238C  0E00               	movlw	0
 10854  00238E  6EDE               	movwf	postinc2,c
 10855  002390  0E00               	movlw	0
 10856  002392  6EDD               	movwf	postdec2,c
 10857  002394  EE10 F008          	lfsr	1,8
 10858  002398  51C0               	movf	trace_path@dj& (0+255),w,b
 10859  00239A  26E1               	addwf	fsr1l,f,c
 10860  00239C  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 10861  00239E  22E2               	addwfc	fsr1h,f,c
 10862  0023A0  CFDE FFE6          	movff	postinc2,postinc1
 10863  0023A4  CFDD FFE5          	movff	postdec2,postdec1
 10864                           
 10865                           ; BSR set to: 0
 10866                           ;tff.c: 524: dj->sect = clust;
 10867  0023A8  51D2               	movf	trace_path@clust& (0+255),w,b
 10868  0023AA  6FC8               	movwf	??_trace_path& (0+255),b
 10869  0023AC  51D3               	movf	(trace_path@clust+1)& (0+255),w,b
 10870  0023AE  6FC9               	movwf	(??_trace_path+1)& (0+255),b
 10871  0023B0  6BCA               	clrf	(??_trace_path+2)& (0+255),b
 10872  0023B2  6BCB               	clrf	(??_trace_path+3)& (0+255),b
 10873  0023B4  EE20 F00A          	lfsr	2,10
 10874  0023B8  51C0               	movf	trace_path@dj& (0+255),w,b
 10875  0023BA  26D9               	addwf	fsr2l,f,c
 10876  0023BC  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 10877  0023BE  22DA               	addwfc	fsr2h,f,c
 10878  0023C0  C0C8  FFDE         	movff	??_trace_path,postinc2
 10879  0023C4  C0C9  FFDE         	movff	??_trace_path+1,postinc2
 10880  0023C8  C0CA  FFDE         	movff	??_trace_path+2,postinc2
 10881  0023CC  C0CB  FFDE         	movff	??_trace_path+3,postinc2
 10882                           
 10883                           ; BSR set to: 0
 10884                           ;tff.c: 525: }
 10885                           ;tff.c: 526: dj->index = 0;
 10886  0023D0  EE20 F002          	lfsr	2,2
 10887  0023D4  51C0               	movf	trace_path@dj& (0+255),w,b
 10888  0023D6  26D9               	addwf	fsr2l,f,c
 10889  0023D8  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 10890  0023DA  22DA               	addwfc	fsr2h,f,c
 10891  0023DC  0E00               	movlw	0
 10892  0023DE  6EDE               	movwf	postinc2,c
 10893  0023E0  0E00               	movlw	0
 10894  0023E2  6EDD               	movwf	postdec2,c
 10895                           
 10896                           ; BSR set to: 0
 10897                           ;tff.c: 528: if (*path == '\0') {
 10898  0023E4  C0C4  FFF6         	movff	trace_path@path,tblptrl
 10899  0023E8  C0C5  FFF7         	movff	trace_path@path+1,tblptrh
 10900  0023EC  6AF8               	clrf	tblptru,c
 10901  0023EE  0E07               	movlw	(high __ramtop+-1)
 10902  0023F0  64F7               	cpfsgt	tblptrh,c
 10903  0023F2  D003               	bra	u14167
 10904  0023F4  0008               	tblrd		*
 10905  0023F6  50F5               	movf	tablat,w,c
 10906  0023F8  D005               	bra	u14160
 10907  0023FA                     u14167:
 10908  0023FA  CFF6 FFE9          	movff	tblptrl,fsr0l
 10909  0023FE  CFF7 FFEA          	movff	tblptrh,fsr0h
 10910  002402  50EF               	movf	indf0,w,c
 10911  002404                     u14160:
 10912  002404  0900               	iorlw	0
 10913  002406  A4D8               	btfss	status,2,c
 10914  002408  D00A               	goto	l1167
 10915                           
 10916                           ;tff.c: 529: *dir = (0); return FR_OK;
 10917  00240A  C0C6  FFD9         	movff	trace_path@dir,fsr2l
 10918  00240E  C0C7  FFDA         	movff	trace_path@dir+1,fsr2h
 10919  002412  0E00               	movlw	0
 10920  002414  6EDE               	movwf	postinc2,c
 10921  002416  0E00               	movlw	0
 10922  002418  6EDD               	movwf	postdec2,c
 10923  00241A  0E00               	movlw	0
 10924  00241C  0012               	return	
 10925  00241E                     l1167:
 10926                           
 10927                           ;tff.c: 533: ds = make_dirfile(&path, fn);
 10928                           
 10929                           ;tff.c: 530: }
 10930                           ;tff.c: 532: for (;;) {
 10931  00241E  0EC4               	movlw	low trace_path@path
 10932  002420  0100               	movlb	0	; () banked
 10933  002422  6F68               	movwf	make_dirfile@path& (0+255),b
 10934  002424  0E00               	movlw	high trace_path@path
 10935  002426  6F69               	movwf	(make_dirfile@path+1)& (0+255),b
 10936  002428  C0C2  F06A         	movff	trace_path@fn,make_dirfile@dirname
 10937  00242C  C0C3  F06B         	movff	trace_path@fn+1,make_dirfile@dirname+1
 10938  002430  EC2C  F01C         	call	_make_dirfile	;wreg free
 10939  002434  0100               	movlb	0	; () banked
 10940  002436  6FD4               	movwf	trace_path@ds& (0+255),b
 10941                           
 10942                           ; BSR set to: 0
 10943                           ;tff.c: 534: if (ds == 1) return FR_INVALID_NAME;
 10944  002438  05D4               	decf	trace_path@ds& (0+255),w,b
 10945  00243A  A4D8               	btfss	status,2,c
 10946  00243C  D002               	goto	l1170
 10947                           
 10948                           ; BSR set to: 0
 10949  00243E  0E04               	movlw	4
 10950                           
 10951                           ; BSR set to: 0
 10952  002440  0012               	return	
 10953  002442                     l1170:
 10954                           
 10955                           ;tff.c: 536: if (!move_window(dj->sect)) return FR_RW_ERROR;
 10956                           
 10957                           ; BSR set to: 0
 10958                           
 10959                           ;tff.c: 535: for (;;) {
 10960                           
 10961                           ; BSR set to: 0
 10962  002442  0100               	movlb	0	; () banked
 10963  002444  EE20 F00A          	lfsr	2,10
 10964  002448  51C0               	movf	trace_path@dj& (0+255),w,b
 10965  00244A  26D9               	addwf	fsr2l,f,c
 10966  00244C  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 10967  00244E  22DA               	addwfc	fsr2h,f,c
 10968  002450  CFDE F08B          	movff	postinc2,move_window@sector
 10969  002454  CFDE F08C          	movff	postinc2,move_window@sector+1
 10970  002458  CFDE F08D          	movff	postinc2,move_window@sector+2
 10971  00245C  CFDE F08E          	movff	postinc2,move_window@sector+3
 10972  002460  EC8D  F01A         	call	_move_window	;wreg free
 10973  002464  0900               	iorlw	0
 10974  002466  A4D8               	btfss	status,2,c
 10975  002468  D002               	goto	l1172
 10976  00246A  0E08               	movlw	8
 10977  00246C  0012               	return	
 10978  00246E                     l1172:
 10979                           
 10980                           ;tff.c: 537: dptr = &fs->win[(dj->index & 15) * 32];
 10981  00246E  0100               	movlb	0	; () banked
 10982  002470  EE20 F002          	lfsr	2,2
 10983  002474  51C0               	movf	trace_path@dj& (0+255),w,b
 10984  002476  26D9               	addwf	fsr2l,f,c
 10985  002478  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 10986  00247A  22DA               	addwfc	fsr2h,f,c
 10987  00247C  CFDE F0C8          	movff	postinc2,??_trace_path
 10988  002480  CFDD F0C9          	movff	postdec2,??_trace_path+1
 10989  002484  0E0F               	movlw	15
 10990  002486  17C8               	andwf	??_trace_path& (0+255),f,b
 10991  002488  0E00               	movlw	0
 10992  00248A  17C9               	andwf	(??_trace_path+1)& (0+255),f,b
 10993  00248C  0E05               	movlw	5
 10994  00248E                     u14205:
 10995  00248E  90D8               	bcf	status,0,c
 10996  002490  37C8               	rlcf	??_trace_path& (0+255),f,b
 10997  002492  37C9               	rlcf	(??_trace_path+1)& (0+255),f,b
 10998  002494  2EE8               	decfsz	wreg,f,c
 10999  002496  D7FB               	goto	u14205
 11000  002498  0E20               	movlw	32
 11001  00249A  27C8               	addwf	??_trace_path& (0+255),f,b
 11002  00249C  0E00               	movlw	0
 11003  00249E  23C9               	addwfc	(??_trace_path+1)& (0+255),f,b
 11004  0024A0  51C8               	movf	??_trace_path& (0+255),w,b
 11005  0024A2  25D0               	addwf	trace_path@fs& (0+255),w,b
 11006  0024A4  6FD5               	movwf	trace_path@dptr& (0+255),b
 11007  0024A6  51C9               	movf	(??_trace_path+1)& (0+255),w,b
 11008  0024A8  21D1               	addwfc	(trace_path@fs+1)& (0+255),w,b
 11009  0024AA  6FD6               	movwf	(trace_path@dptr+1)& (0+255),b
 11010                           
 11011                           ; BSR set to: 0
 11012                           ;tff.c: 538: if (dptr[0] == 0)
 11013  0024AC  C0D5  FFD9         	movff	trace_path@dptr,fsr2l
 11014  0024B0  C0D6  FFDA         	movff	trace_path@dptr+1,fsr2h
 11015  0024B4  50DF               	movf	indf2,w,c
 11016  0024B6  A4D8               	btfss	status,2,c
 11017  0024B8  D00D               	goto	l1173
 11018                           
 11019                           ; BSR set to: 0
 11020                           ;tff.c: 539: return !ds ? FR_NO_FILE : FR_NO_PATH;
 11021  0024BA  51D4               	movf	trace_path@ds& (0+255),w,b
 11022  0024BC  B4D8               	btfsc	status,2,c
 11023  0024BE  D004               	goto	l1175
 11024                           
 11025                           ; BSR set to: 0
 11026  0024C0  0E00               	movlw	0
 11027  0024C2  6FCD               	movwf	(_trace_path$2154+1)& (0+255),b
 11028  0024C4  0E03               	movlw	3
 11029  0024C6  D003               	goto	L6
 11030  0024C8                     l1175:
 11031                           
 11032                           ; BSR set to: 0
 11033                           
 11034                           ; BSR set to: 0
 11035  0024C8  0E00               	movlw	0
 11036  0024CA  6FCD               	movwf	(_trace_path$2154+1)& (0+255),b
 11037  0024CC  0E02               	movlw	2
 11038  0024CE                     L6:
 11039  0024CE  6FCC               	movwf	_trace_path$2154& (0+255),b
 11040                           
 11041                           ; BSR set to: 0
 11042  0024D0  51CC               	movf	_trace_path$2154& (0+255),w,b
 11043                           
 11044                           ; BSR set to: 0
 11045  0024D2  0012               	return	
 11046  0024D4                     l1173:
 11047                           
 11048                           ; BSR set to: 0
 11049                           ;tff.c: 540: if (dptr[0] != 0xE5
 11050                           ;tff.c: 541: && !(dptr[11] & 0x08)
 11051                           ;tff.c: 542: && !memcmp(&dptr[0], fn, 8+3) ) break;
 11052                           
 11053                           ; BSR set to: 0
 11054  0024D4  C0D5  FFD9         	movff	trace_path@dptr,fsr2l
 11055  0024D8  C0D6  FFDA         	movff	trace_path@dptr+1,fsr2h
 11056  0024DC  0EE5               	movlw	229
 11057  0024DE  18DE               	xorwf	postinc2,w,c
 11058  0024E0  B4D8               	btfsc	status,2,c
 11059  0024E2  D01B               	goto	l1178
 11060                           
 11061                           ; BSR set to: 0
 11062  0024E4  EE20 F00B          	lfsr	2,11
 11063  0024E8  51D5               	movf	trace_path@dptr& (0+255),w,b
 11064  0024EA  26D9               	addwf	fsr2l,f,c
 11065  0024EC  51D6               	movf	(trace_path@dptr+1)& (0+255),w,b
 11066  0024EE  22DA               	addwfc	fsr2h,f,c
 11067  0024F0  B6DF               	btfsc	indf2,3,c
 11068  0024F2  D013               	goto	l1178
 11069                           
 11070                           ; BSR set to: 0
 11071  0024F4  C0D5  F060         	movff	trace_path@dptr,memcmp@s1
 11072  0024F8  C0D6  F061         	movff	trace_path@dptr+1,memcmp@s1+1
 11073  0024FC  C0C2  F062         	movff	trace_path@fn,memcmp@s2
 11074  002500  C0C3  F063         	movff	trace_path@fn+1,memcmp@s2+1
 11075  002504  0E00               	movlw	0
 11076  002506  6F65               	movwf	(memcmp@n+1)& (0+255),b
 11077  002508  0E0B               	movlw	11
 11078  00250A  6F64               	movwf	memcmp@n& (0+255),b
 11079  00250C  ECA2  F023         	call	_memcmp	;wreg free
 11080  002510  0100               	movlb	0	; () banked
 11081  002512  5160               	movf	?_memcmp& (0+255),w,b
 11082  002514  1161               	iorwf	(?_memcmp+1)& (0+255),w,b
 11083  002516  B4D8               	btfsc	status,2,c
 11084  002518  D017               	goto	l1179
 11085  00251A                     l1178:
 11086                           
 11087                           ; BSR set to: 0
 11088                           ;tff.c: 543: if (!next_dir_entry(dj))
 11089                           
 11090                           ; BSR set to: 0
 11091  00251A  C0C0  F0B3         	movff	trace_path@dj,next_dir_entry@dj
 11092  00251E  C0C1  F0B4         	movff	trace_path@dj+1,next_dir_entry@dj+1
 11093  002522  EC68  F01B         	call	_next_dir_entry	;wreg free
 11094  002526  0900               	iorlw	0
 11095  002528  A4D8               	btfss	status,2,c
 11096  00252A  D78B               	goto	l1170
 11097                           
 11098                           ;tff.c: 544: return !ds ? FR_NO_FILE : FR_NO_PATH;
 11099  00252C  0100               	movlb	0	; () banked
 11100  00252E  51D4               	movf	trace_path@ds& (0+255),w,b
 11101  002530  B4D8               	btfsc	status,2,c
 11102  002532  D004               	goto	l1182
 11103                           
 11104                           ; BSR set to: 0
 11105  002534  0E00               	movlw	0
 11106  002536  6FCF               	movwf	(_trace_path$2156+1)& (0+255),b
 11107  002538  0E03               	movlw	3
 11108  00253A  D003               	goto	L7
 11109  00253C                     l1182:
 11110                           
 11111                           ; BSR set to: 0
 11112                           
 11113                           ; BSR set to: 0
 11114  00253C  0E00               	movlw	0
 11115  00253E  6FCF               	movwf	(_trace_path$2156+1)& (0+255),b
 11116  002540  0E02               	movlw	2
 11117  002542                     L7:
 11118  002542  6FCE               	movwf	_trace_path$2156& (0+255),b
 11119                           
 11120                           ; BSR set to: 0
 11121  002544  51CE               	movf	_trace_path$2156& (0+255),w,b
 11122                           
 11123                           ; BSR set to: 0
 11124  002546  0012               	return	
 11125  002548                     l1179:
 11126                           
 11127                           ; BSR set to: 0
 11128                           ;tff.c: 546: if (!ds) { *dir = dptr; return FR_OK; }
 11129                           
 11130                           ; BSR set to: 0
 11131  002548  51D4               	movf	trace_path@ds& (0+255),w,b
 11132  00254A  A4D8               	btfss	status,2,c
 11133  00254C  D00A               	goto	l1185
 11134                           
 11135                           ; BSR set to: 0
 11136  00254E  C0C6  FFD9         	movff	trace_path@dir,fsr2l
 11137  002552  C0C7  FFDA         	movff	trace_path@dir+1,fsr2h
 11138  002556  C0D5  FFDE         	movff	trace_path@dptr,postinc2
 11139  00255A  C0D6  FFDD         	movff	trace_path@dptr+1,postdec2
 11140                           
 11141                           ; BSR set to: 0
 11142  00255E  0E00               	movlw	0
 11143                           
 11144                           ; BSR set to: 0
 11145  002560  0012               	return	
 11146  002562                     l1185:
 11147                           
 11148                           ; BSR set to: 0
 11149                           ;tff.c: 547: if (!(dptr[11] & 0x10)) return FR_NO_PATH;
 11150                           
 11151                           ; BSR set to: 0
 11152  002562  EE20 F00B          	lfsr	2,11
 11153  002566  51D5               	movf	trace_path@dptr& (0+255),w,b
 11154  002568  26D9               	addwf	fsr2l,f,c
 11155  00256A  51D6               	movf	(trace_path@dptr+1)& (0+255),w,b
 11156  00256C  22DA               	addwfc	fsr2h,f,c
 11157  00256E  B8DF               	btfsc	indf2,4,c
 11158  002570  D002               	goto	l1186
 11159                           
 11160                           ; BSR set to: 0
 11161  002572  0E03               	movlw	3
 11162                           
 11163                           ; BSR set to: 0
 11164  002574  0012               	return	
 11165  002576                     l1186:
 11166                           
 11167                           ; BSR set to: 0
 11168                           ;tff.c: 548: clust =
 11169                           ;tff.c: 552: (WORD)(*(WORD*)(BYTE*)(&dptr[26]));
 11170                           
 11171                           ; BSR set to: 0
 11172  002576  EE20 F01A          	lfsr	2,26
 11173  00257A  51D5               	movf	trace_path@dptr& (0+255),w,b
 11174  00257C  26D9               	addwf	fsr2l,f,c
 11175  00257E  51D6               	movf	(trace_path@dptr+1)& (0+255),w,b
 11176  002580  22DA               	addwfc	fsr2h,f,c
 11177  002582  CFDE F0D2          	movff	postinc2,trace_path@clust
 11178  002586  CFDD F0D3          	movff	postdec2,trace_path@clust+1
 11179                           
 11180                           ; BSR set to: 0
 11181                           ;tff.c: 553: dj->clust = dj->sclust = clust;
 11182  00258A  EE20 F006          	lfsr	2,6
 11183  00258E  51C0               	movf	trace_path@dj& (0+255),w,b
 11184  002590  26D9               	addwf	fsr2l,f,c
 11185  002592  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 11186  002594  22DA               	addwfc	fsr2h,f,c
 11187  002596  C0D2  FFDE         	movff	trace_path@clust,postinc2
 11188  00259A  C0D3  FFDD         	movff	trace_path@clust+1,postdec2
 11189  00259E  EE10 F008          	lfsr	1,8
 11190  0025A2  51C0               	movf	trace_path@dj& (0+255),w,b
 11191  0025A4  26E1               	addwf	fsr1l,f,c
 11192  0025A6  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 11193  0025A8  22E2               	addwfc	fsr1h,f,c
 11194  0025AA  CFDE FFE6          	movff	postinc2,postinc1
 11195  0025AE  CFDD FFE5          	movff	postdec2,postdec1
 11196                           
 11197                           ; BSR set to: 0
 11198                           ;tff.c: 554: dj->sect = clust2sect(clust);
 11199  0025B2  C0D2  F06C         	movff	trace_path@clust,clust2sect@clust
 11200  0025B6  C0D3  F06D         	movff	trace_path@clust+1,clust2sect@clust+1
 11201  0025BA  ECA7  F021         	call	_clust2sect	;wreg free
 11202  0025BE  0100               	movlb	0	; () banked
 11203  0025C0  EE20 F00A          	lfsr	2,10
 11204  0025C4  51C0               	movf	trace_path@dj& (0+255),w,b
 11205  0025C6  26D9               	addwf	fsr2l,f,c
 11206  0025C8  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 11207  0025CA  22DA               	addwfc	fsr2h,f,c
 11208  0025CC  C06C  FFDE         	movff	?_clust2sect,postinc2
 11209  0025D0  C06D  FFDE         	movff	?_clust2sect+1,postinc2
 11210  0025D4  C06E  FFDE         	movff	?_clust2sect+2,postinc2
 11211  0025D8  C06F  FFDE         	movff	?_clust2sect+3,postinc2
 11212                           
 11213                           ; BSR set to: 0
 11214                           ;tff.c: 555: dj->index = 2;
 11215  0025DC  EE20 F002          	lfsr	2,2
 11216  0025E0  51C0               	movf	trace_path@dj& (0+255),w,b
 11217  0025E2  26D9               	addwf	fsr2l,f,c
 11218  0025E4  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 11219  0025E6  22DA               	addwfc	fsr2h,f,c
 11220  0025E8  0E02               	movlw	2
 11221  0025EA  6EDE               	movwf	postinc2,c
 11222  0025EC  0E00               	movlw	0
 11223  0025EE  6EDD               	movwf	postdec2,c
 11224                           
 11225                           ;tff.c: 556: }
 11226  0025F0  D716               	goto	l1167
 11227  0025F2                     __end_of_trace_path:
 11228                           	opt stack 0
 11229                           tosu	equ	0xFFF
 11230                           tosh	equ	0xFFE
 11231                           tosl	equ	0xFFD
 11232                           pclath	equ	0xFFA
 11233                           tblptru	equ	0xFF8
 11234                           tblptrh	equ	0xFF7
 11235                           tblptrl	equ	0xFF6
 11236                           tablat	equ	0xFF5
 11237                           prodh	equ	0xFF4
 11238                           prodl	equ	0xFF3
 11239                           intcon	equ	0xFF2
 11240                           intcon2	equ	0xFF1
 11241                           intcon3	equ	0xFF0
 11242                           indf0	equ	0xFEF
 11243                           postinc0	equ	0xFEE
 11244                           fsr0h	equ	0xFEA
 11245                           fsr0l	equ	0xFE9
 11246                           wreg	equ	0xFE8
 11247                           indf1	equ	0xFE7
 11248                           postinc1	equ	0xFE6
 11249                           postdec1	equ	0xFE5
 11250                           plusw1	equ	0xFE3
 11251                           fsr1h	equ	0xFE2
 11252                           fsr1l	equ	0xFE1
 11253                           indf2	equ	0xFDF
 11254                           postinc2	equ	0xFDE
 11255                           postdec2	equ	0xFDD
 11256                           plusw2	equ	0xFDB
 11257                           fsr2h	equ	0xFDA
 11258                           fsr2l	equ	0xFD9
 11259                           status	equ	0xFD8
 11260                           
 11261 ;; *************** function _make_dirfile *****************
 11262 ;; Defined at:
 11263 ;;		line 438 in file "bibliotecas/tff.c"
 11264 ;; Parameters:    Size  Location     Type
 11265 ;;  path            2    8[BANK0 ] PTR PTR const unsigned c
 11266 ;;		 -> trace_path@path(2), 
 11267 ;;  dirname         2   10[BANK0 ] PTR unsigned char 
 11268 ;;		 -> f_opendir@fn(12), f_open@fn(12), 
 11269 ;; Auto vars:     Size  Location     Type
 11270 ;;  c               1   20[BANK0 ] unsigned char 
 11271 ;;  n               1   19[BANK0 ] unsigned char 
 11272 ;;  a               1   18[BANK0 ] unsigned char 
 11273 ;;  t               1   17[BANK0 ] unsigned char 
 11274 ;;  b               1   16[BANK0 ] unsigned char 
 11275 ;; Return value:  Size  Location     Type
 11276 ;;                  1    wreg      unsigned char 
 11277 ;; Registers used:
 11278 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11279 ;; Tracked objects:
 11280 ;;		On entry : 0/0
 11281 ;;		On exit  : 0/0
 11282 ;;		Unchanged: 0/0
 11283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11284 ;;      Params:         0       4       0       0       0       0       0       0       0
 11285 ;;      Locals:         0       7       0       0       0       0       0       0       0
 11286 ;;      Temps:          0       2       0       0       0       0       0       0       0
 11287 ;;      Totals:         0      13       0       0       0       0       0       0       0
 11288 ;;Total ram usage:       13 bytes
 11289 ;; Hardware stack levels used:    1
 11290 ;; Hardware stack levels required when called:    4
 11291 ;; This function calls:
 11292 ;;		_memset
 11293 ;; This function is called by:
 11294 ;;		_trace_path
 11295 ;; This function uses a non-reentrant model
 11296 ;;
 11297                           
 11298                           	psect	text38
 11299  003858                     __ptext38:
 11300                           	opt stack 0
 11301  003858                     _make_dirfile:
 11302                           	opt stack 21
 11303                           
 11304                           ;tff.c: 443: BYTE n, t, c, a, b;
 11305                           ;tff.c: 446: memset(dirname, ' ', 8+3);
 11306                           
 11307                           ;incstack = 0
 11308  003858  C06A  F060         	movff	make_dirfile@dirname,memset@p1
 11309  00385C  C06B  F061         	movff	make_dirfile@dirname+1,memset@p1+1
 11310  003860  0E00               	movlw	0
 11311  003862  0100               	movlb	0	; () banked
 11312  003864  6F63               	movwf	(memset@c+1)& (0+255),b
 11313  003866  0E20               	movlw	32
 11314  003868  6F62               	movwf	memset@c& (0+255),b
 11315  00386A  0E00               	movlw	0
 11316  00386C  6F65               	movwf	(memset@n+1)& (0+255),b
 11317  00386E  0E0B               	movlw	11
 11318  003870  6F64               	movwf	memset@n& (0+255),b
 11319  003872  EC63  F02A         	call	_memset	;wreg free
 11320                           
 11321                           ;tff.c: 447: a = 0; b = 0x18;
 11322  003876  0E00               	movlw	0
 11323  003878  0100               	movlb	0	; () banked
 11324  00387A  6F72               	movwf	make_dirfile@a& (0+255),b
 11325                           
 11326                           ; BSR set to: 0
 11327  00387C  0E18               	movlw	24
 11328  00387E  6F70               	movwf	make_dirfile@b& (0+255),b
 11329                           
 11330                           ; BSR set to: 0
 11331                           ;tff.c: 448: n = 0; t = 8;
 11332  003880  0E00               	movlw	0
 11333  003882  6F73               	movwf	make_dirfile@n& (0+255),b
 11334                           
 11335                           ; BSR set to: 0
 11336  003884  0E08               	movlw	8
 11337  003886  6F71               	movwf	make_dirfile@t& (0+255),b
 11338  003888                     
 11339                           ; BSR set to: 0
 11340                           ;tff.c: 450: c = *(*path)++;
 11341                           
 11342                           ; BSR set to: 0
 11343  003888  C068  FFD9         	movff	make_dirfile@path,fsr2l
 11344  00388C  C069  FFDA         	movff	make_dirfile@path+1,fsr2h
 11345  003890  CFDF F06C          	movff	indf2,??_make_dirfile
 11346  003894  0E01               	movlw	1
 11347  003896  26DE               	addwf	postinc2,f,c
 11348  003898  CFDF F06D          	movff	indf2,??_make_dirfile+1
 11349  00389C  0E00               	movlw	0
 11350  00389E  22DD               	addwfc	postdec2,f,c
 11351  0038A0  C06C  FFF6         	movff	??_make_dirfile,tblptrl
 11352  0038A4  C06D  FFF7         	movff	??_make_dirfile+1,tblptrh
 11353  0038A8  6AF8               	clrf	tblptru,c
 11354  0038AA  0E07               	movlw	(high __ramtop+-1)
 11355  0038AC  64F7               	cpfsgt	tblptrh,c
 11356  0038AE  D003               	bra	u13497
 11357  0038B0  0008               	tblrd		*
 11358  0038B2  50F5               	movf	tablat,w,c
 11359  0038B4  D005               	bra	u13490
 11360  0038B6                     u13497:
 11361  0038B6  CFF6 FFE9          	movff	tblptrl,fsr0l
 11362  0038BA  CFF7 FFEA          	movff	tblptrh,fsr0h
 11363  0038BE  50EF               	movf	indf0,w,c
 11364  0038C0                     u13490:
 11365  0038C0  0100               	movlb	0	; () banked
 11366  0038C2  6F74               	movwf	make_dirfile@c& (0+255),b
 11367                           
 11368                           ; BSR set to: 0
 11369                           ;tff.c: 451: if (c == '\0' || c == '/') {
 11370  0038C4  5174               	movf	make_dirfile@c& (0+255),w,b
 11371  0038C6  B4D8               	btfsc	status,2,c
 11372  0038C8  D004               	goto	u13510
 11373                           
 11374                           ; BSR set to: 0
 11375  0038CA  0E2F               	movlw	47
 11376  0038CC  1974               	xorwf	make_dirfile@c& (0+255),w,b
 11377  0038CE  A4D8               	btfss	status,2,c
 11378  0038D0  D013               	goto	l1121
 11379  0038D2                     u13510:
 11380                           
 11381                           ; BSR set to: 0
 11382                           ;tff.c: 452: if (n == 0) break;
 11383                           
 11384                           ; BSR set to: 0
 11385  0038D2  5173               	movf	make_dirfile@n& (0+255),w,b
 11386  0038D4  B4D8               	btfsc	status,2,c
 11387  0038D6  D075               	goto	l1125
 11388                           
 11389                           ; BSR set to: 0
 11390                           
 11391                           ; BSR set to: 0
 11392                           
 11393                           ; BSR set to: 0
 11394                           
 11395                           ; BSR set to: 0
 11396                           ;tff.c: 453: dirname[11] = 1 ? (a & b) : 0;
 11397                           
 11398                           ; BSR set to: 0
 11399  0038D8  5172               	movf	make_dirfile@a& (0+255),w,b
 11400  0038DA  1570               	andwf	make_dirfile@b& (0+255),w,b
 11401  0038DC  6F6C               	movwf	??_make_dirfile& (0+255),b
 11402  0038DE  516C               	movf	??_make_dirfile& (0+255),w,b
 11403  0038E0  6F6E               	movwf	_make_dirfile$2107& (0+255),b
 11404  0038E2  6B6F               	clrf	(_make_dirfile$2107+1)& (0+255),b
 11405                           
 11406                           ; BSR set to: 0
 11407                           
 11408                           ; BSR set to: 0
 11409  0038E4  EE20 F00B          	lfsr	2,11
 11410  0038E8  516A               	movf	make_dirfile@dirname& (0+255),w,b
 11411  0038EA  26D9               	addwf	fsr2l,f,c
 11412  0038EC  516B               	movf	(make_dirfile@dirname+1)& (0+255),w,b
 11413  0038EE  22DA               	addwfc	fsr2h,f,c
 11414  0038F0  C06E  FFDF         	movff	_make_dirfile$2107,indf2
 11415                           
 11416                           ; BSR set to: 0
 11417                           ;tff.c: 454: return c;
 11418  0038F4  5174               	movf	make_dirfile@c& (0+255),w,b
 11419                           
 11420                           ; BSR set to: 0
 11421  0038F6  0012               	return	
 11422  0038F8                     l1121:
 11423                           
 11424                           ; BSR set to: 0
 11425                           ;tff.c: 455: }
 11426                           ;tff.c: 456: if (c <= ' ' || c == 0x7F) break;
 11427                           
 11428                           ; BSR set to: 0
 11429  0038F8  0E20               	movlw	32
 11430  0038FA  6574               	cpfsgt	make_dirfile@c& (0+255),b
 11431  0038FC  D062               	goto	l1125
 11432                           
 11433                           ; BSR set to: 0
 11434  0038FE  0E7F               	movlw	127
 11435  003900  1974               	xorwf	make_dirfile@c& (0+255),w,b
 11436  003902  B4D8               	btfsc	status,2,c
 11437  003904  D05E               	goto	l1125
 11438                           
 11439                           ; BSR set to: 0
 11440                           ;tff.c: 457: if (c == '.') {
 11441                           
 11442                           ; BSR set to: 0
 11443                           
 11444                           ; BSR set to: 0
 11445  003906  0E2E               	movlw	46
 11446  003908  1974               	xorwf	make_dirfile@c& (0+255),w,b
 11447  00390A  A4D8               	btfss	status,2,c
 11448  00390C  D00C               	goto	l1137
 11449                           
 11450                           ; BSR set to: 0
 11451                           ;tff.c: 458: if (!(a & 1) && n >= 1 && n <= 8) {
 11452  00390E  B172               	btfsc	make_dirfile@a& (0+255),0,b
 11453  003910  D058               	goto	l1125
 11454                           
 11455                           ; BSR set to: 0
 11456  003912  5173               	movf	make_dirfile@n& (0+255),w,b
 11457  003914  B4D8               	btfsc	status,2,c
 11458  003916  D055               	goto	l1125
 11459                           
 11460                           ; BSR set to: 0
 11461  003918  0E09               	movlw	9
 11462  00391A  6173               	cpfslt	make_dirfile@n& (0+255),b
 11463  00391C  D052               	goto	l1125
 11464                           
 11465                           ; BSR set to: 0
 11466                           ;tff.c: 459: n = 8; t = 11; continue;
 11467  00391E  0E08               	movlw	8
 11468  003920  6F73               	movwf	make_dirfile@n& (0+255),b
 11469  003922  0E0B               	movlw	11
 11470  003924  D7B0               	goto	L8
 11471  003926                     l1137:
 11472                           
 11473                           ; BSR set to: 0
 11474                           ;tff.c: 469: }
 11475                           ;tff.c: 470: if (c == '"') break;
 11476                           
 11477                           ; BSR set to: 0
 11478  003926  0E22               	movlw	34
 11479  003928  1974               	xorwf	make_dirfile@c& (0+255),w,b
 11480  00392A  B4D8               	btfsc	status,2,c
 11481  00392C  D04A               	goto	l1125
 11482                           
 11483                           ; BSR set to: 0
 11484                           ;tff.c: 471: if (c <= ')') goto md_l1;
 11485                           
 11486                           ; BSR set to: 0
 11487                           
 11488                           ; BSR set to: 0
 11489  00392E  0E2A               	movlw	42
 11490  003930  6174               	cpfslt	make_dirfile@c& (0+255),b
 11491  003932  D001               	goto	l1145
 11492  003934  D035               	goto	l1163
 11493  003936                     l1145:
 11494                           
 11495                           ; BSR set to: 0
 11496                           ;tff.c: 472: if (c <= ',') break;
 11497                           
 11498                           ; BSR set to: 0
 11499  003936  0E2D               	movlw	45
 11500  003938  6174               	cpfslt	make_dirfile@c& (0+255),b
 11501  00393A  D001               	goto	l1147
 11502  00393C  D042               	goto	l1125
 11503  00393E                     l1147:
 11504                           
 11505                           ; BSR set to: 0
 11506                           ;tff.c: 473: if (c <= '9') goto md_l1;
 11507                           
 11508                           ; BSR set to: 0
 11509  00393E  0E3A               	movlw	58
 11510  003940  6174               	cpfslt	make_dirfile@c& (0+255),b
 11511  003942  D001               	goto	l1148
 11512  003944  D02D               	goto	l1163
 11513  003946                     l1148:
 11514                           
 11515                           ; BSR set to: 0
 11516                           ;tff.c: 474: if (c <= '?') break;
 11517                           
 11518                           ; BSR set to: 0
 11519  003946  0E40               	movlw	64
 11520  003948  6174               	cpfslt	make_dirfile@c& (0+255),b
 11521  00394A  D001               	goto	l1149
 11522  00394C  D03A               	goto	l1125
 11523  00394E                     l1149:
 11524                           
 11525                           ; BSR set to: 0
 11526                           ;tff.c: 475: if (!(a & 1)) {
 11527  00394E  B172               	btfsc	make_dirfile@a& (0+255),0,b
 11528  003950  D027               	goto	l1163
 11529                           
 11530                           ; BSR set to: 0
 11531                           ;tff.c: 476: if (c == '|') break;
 11532  003952  0E7C               	movlw	124
 11533  003954  1974               	xorwf	make_dirfile@c& (0+255),w,b
 11534  003956  B4D8               	btfsc	status,2,c
 11535  003958  D034               	goto	l1125
 11536                           
 11537                           ; BSR set to: 0
 11538                           ;tff.c: 477: if (c >= '[' && c <= ']') break;
 11539                           
 11540                           ; BSR set to: 0
 11541                           
 11542                           ; BSR set to: 0
 11543  00395A  0E5A               	movlw	90
 11544  00395C  6574               	cpfsgt	make_dirfile@c& (0+255),b
 11545  00395E  D004               	goto	l1152
 11546                           
 11547                           ; BSR set to: 0
 11548  003960  0E5E               	movlw	94
 11549  003962  6174               	cpfslt	make_dirfile@c& (0+255),b
 11550  003964  D001               	goto	l1152
 11551  003966  D02D               	goto	l1125
 11552  003968                     l1152:
 11553                           
 11554                           ; BSR set to: 0
 11555                           
 11556                           ; BSR set to: 0
 11557  003968  0E40               	movlw	64
 11558  00396A  6574               	cpfsgt	make_dirfile@c& (0+255),b
 11559  00396C  D00A               	goto	l1157
 11560                           
 11561                           ; BSR set to: 0
 11562  00396E  0E5B               	movlw	91
 11563  003970  6174               	cpfslt	make_dirfile@c& (0+255),b
 11564  003972  D007               	goto	l1157
 11565                           
 11566                           ; BSR set to: 0
 11567                           ;tff.c: 479: (t == 8) ? (b &= 0xF7) : (b &= 0xEF);
 11568  003974  0E08               	movlw	8
 11569  003976  1971               	xorwf	make_dirfile@t& (0+255),w,b
 11570  003978  A4D8               	btfss	status,2,c
 11571  00397A  D002               	goto	l1155
 11572                           
 11573                           ; BSR set to: 0
 11574  00397C  9770               	bcf	make_dirfile@b& (0+255),3,b
 11575  00397E  D001               	goto	l1157
 11576  003980                     l1155:
 11577                           
 11578                           ; BSR set to: 0
 11579                           
 11580                           ; BSR set to: 0
 11581  003980  9970               	bcf	make_dirfile@b& (0+255),4,b
 11582  003982                     l1157:
 11583                           
 11584                           ; BSR set to: 0
 11585                           ;tff.c: 480: if (c >= 'a' && c <= 'z') {
 11586                           
 11587                           ; BSR set to: 0
 11588                           
 11589                           ; BSR set to: 0
 11590  003982  0E60               	movlw	96
 11591  003984  6574               	cpfsgt	make_dirfile@c& (0+255),b
 11592  003986  D00C               	goto	l1163
 11593                           
 11594                           ; BSR set to: 0
 11595  003988  0E7B               	movlw	123
 11596  00398A  6174               	cpfslt	make_dirfile@c& (0+255),b
 11597  00398C  D009               	goto	l1163
 11598                           
 11599                           ; BSR set to: 0
 11600                           ;tff.c: 482: if (1) (t == 8) ? (a |= 0x08) : (a |= 0x10);
 11601  00398E  0E20               	movlw	32
 11602  003990  5F74               	subwf	make_dirfile@c& (0+255),f,b
 11603  003992  0E08               	movlw	8
 11604  003994  1971               	xorwf	make_dirfile@t& (0+255),w,b
 11605  003996  A4D8               	btfss	status,2,c
 11606  003998  D002               	goto	l1161
 11607                           
 11608                           ; BSR set to: 0
 11609  00399A  8772               	bsf	make_dirfile@a& (0+255),3,b
 11610  00399C  D001               	goto	l1163
 11611  00399E                     l1161:
 11612                           
 11613                           ; BSR set to: 0
 11614                           
 11615                           ; BSR set to: 0
 11616  00399E  8972               	bsf	make_dirfile@a& (0+255),4,b
 11617  0039A0                     l1163:
 11618                           
 11619                           ; BSR set to: 0
 11620                           ;tff.c: 486: a &= 0xFE;
 11621                           
 11622                           ; BSR set to: 0
 11623                           ;tff.c: 483: }
 11624                           ;tff.c: 484: }
 11625                           ;tff.c: 485: md_l1:
 11626                           
 11627                           ; BSR set to: 0
 11628                           
 11629                           ; BSR set to: 0
 11630                           
 11631                           ; BSR set to: 0
 11632  0039A0  9172               	bcf	make_dirfile@a& (0+255),0,b
 11633                           
 11634                           ; BSR set to: 0
 11635                           ;tff.c: 488: if (n >= t) break;
 11636                           
 11637                           ; BSR set to: 0
 11638                           
 11639                           ;tff.c: 487: md_l2:
 11640  0039A2  5171               	movf	make_dirfile@t& (0+255),w,b
 11641  0039A4  5D73               	subwf	make_dirfile@n& (0+255),w,b
 11642  0039A6  B0D8               	btfsc	status,0,c
 11643  0039A8  D00C               	goto	l1125
 11644                           
 11645                           ; BSR set to: 0
 11646                           ;tff.c: 489: dirname[n++] = c;
 11647                           
 11648                           ; BSR set to: 0
 11649                           
 11650                           ; BSR set to: 0
 11651  0039AA  5173               	movf	make_dirfile@n& (0+255),w,b
 11652  0039AC  0D01               	mullw	1
 11653  0039AE  50F3               	movf	prodl,w,c
 11654  0039B0  256A               	addwf	make_dirfile@dirname& (0+255),w,b
 11655  0039B2  6ED9               	movwf	fsr2l,c
 11656  0039B4  50F4               	movf	prodh,w,c
 11657  0039B6  216B               	addwfc	(make_dirfile@dirname+1)& (0+255),w,b
 11658  0039B8  6EDA               	movwf	fsr2h,c
 11659  0039BA  C074  FFDF         	movff	make_dirfile@c,indf2
 11660                           
 11661                           ; BSR set to: 0
 11662  0039BE  2B73               	incf	make_dirfile@n& (0+255),f,b
 11663                           
 11664                           ; BSR set to: 0
 11665                           ;tff.c: 490: }
 11666  0039C0  D763               	goto	l1120
 11667  0039C2                     l1125:
 11668                           
 11669                           ; BSR set to: 0
 11670                           ;tff.c: 491: return 1;
 11671                           
 11672                           ; BSR set to: 0
 11673  0039C2  0E01               	movlw	1
 11674  0039C4  0012               	return	
 11675  0039C6                     __end_of_make_dirfile:
 11676                           	opt stack 0
 11677                           tosu	equ	0xFFF
 11678                           tosh	equ	0xFFE
 11679                           tosl	equ	0xFFD
 11680                           pclath	equ	0xFFA
 11681                           tblptru	equ	0xFF8
 11682                           tblptrh	equ	0xFF7
 11683                           tblptrl	equ	0xFF6
 11684                           tablat	equ	0xFF5
 11685                           prodh	equ	0xFF4
 11686                           prodl	equ	0xFF3
 11687                           intcon	equ	0xFF2
 11688                           intcon2	equ	0xFF1
 11689                           intcon3	equ	0xFF0
 11690                           indf0	equ	0xFEF
 11691                           postinc0	equ	0xFEE
 11692                           fsr0h	equ	0xFEA
 11693                           fsr0l	equ	0xFE9
 11694                           wreg	equ	0xFE8
 11695                           indf1	equ	0xFE7
 11696                           postinc1	equ	0xFE6
 11697                           postdec1	equ	0xFE5
 11698                           plusw1	equ	0xFE3
 11699                           fsr1h	equ	0xFE2
 11700                           fsr1l	equ	0xFE1
 11701                           indf2	equ	0xFDF
 11702                           postinc2	equ	0xFDE
 11703                           postdec2	equ	0xFDD
 11704                           plusw2	equ	0xFDB
 11705                           fsr2h	equ	0xFDA
 11706                           fsr2l	equ	0xFD9
 11707                           status	equ	0xFD8
 11708                           
 11709 ;; *************** function _reserve_direntry *****************
 11710 ;; Defined at:
 11711 ;;		line 567 in file "bibliotecas/tff.c"
 11712 ;; Parameters:    Size  Location     Type
 11713 ;;  dj              2  100[BANK0 ] PTR struct _DIR_E
 11714 ;;		 -> f_open@dj(14), 
 11715 ;;  dir             2  102[BANK0 ] PTR PTR unsigned char 
 11716 ;;		 -> f_open@dir(2), 
 11717 ;; Auto vars:     Size  Location     Type
 11718 ;;  sector          4  106[BANK0 ] unsigned long 
 11719 ;;  fs              2  116[BANK0 ] PTR struct _FATFS
 11720 ;;		 -> NULL(0), fs(544), 
 11721 ;;  clust           2  114[BANK0 ] unsigned short 
 11722 ;;  dptr            2  111[BANK0 ] PTR unsigned char 
 11723 ;;		 -> fs.win(512), NULL(0), fs(544), 
 11724 ;;  c               1  113[BANK0 ] unsigned char 
 11725 ;;  n               1  110[BANK0 ] unsigned char 
 11726 ;; Return value:  Size  Location     Type
 11727 ;;                  1    wreg      enum E155
 11728 ;; Registers used:
 11729 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11730 ;; Tracked objects:
 11731 ;;		On entry : 0/0
 11732 ;;		On exit  : 0/0
 11733 ;;		Unchanged: 0/0
 11734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11735 ;;      Params:         0       4       0       0       0       0       0       0       0
 11736 ;;      Locals:         0      12       0       0       0       0       0       0       0
 11737 ;;      Temps:          0       2       0       0       0       0       0       0       0
 11738 ;;      Totals:         0      18       0       0       0       0       0       0       0
 11739 ;;Total ram usage:       18 bytes
 11740 ;; Hardware stack levels used:    1
 11741 ;; Hardware stack levels required when called:   11
 11742 ;; This function calls:
 11743 ;;		_clust2sect
 11744 ;;		_create_chain
 11745 ;;		_disk_write
 11746 ;;		_memset
 11747 ;;		_move_window
 11748 ;;		_next_dir_entry
 11749 ;; This function is called by:
 11750 ;;		_f_open
 11751 ;; This function uses a non-reentrant model
 11752 ;;
 11753                           
 11754                           	psect	text39
 11755  0025F2                     __ptext39:
 11756                           	opt stack 0
 11757  0025F2                     _reserve_direntry:
 11758                           	opt stack 15
 11759                           
 11760                           ;tff.c: 572: CLUST clust;
 11761                           ;tff.c: 573: DWORD sector;
 11762                           ;tff.c: 574: BYTE c, n, *dptr;
 11763                           ;tff.c: 575: FATFS *fs = dj->fs;
 11764                           
 11765                           ; BSR set to: 0
 11766                           ;incstack = 0
 11767  0025F2  0100               	movlb	0	; () banked
 11768  0025F4  EE20 F004          	lfsr	2,4
 11769  0025F8  51C4               	movf	reserve_direntry@dj& (0+255),w,b
 11770  0025FA  26D9               	addwf	fsr2l,f,c
 11771  0025FC  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
 11772  0025FE  22DA               	addwfc	fsr2h,f,c
 11773  002600  CFDE F0D4          	movff	postinc2,reserve_direntry@fs
 11774  002604  CFDD F0D5          	movff	postdec2,reserve_direntry@fs+1
 11775                           
 11776                           ;tff.c: 579: clust = dj->sclust;
 11777  002608  EE20 F006          	lfsr	2,6
 11778  00260C  51C4               	movf	reserve_direntry@dj& (0+255),w,b
 11779  00260E  26D9               	addwf	fsr2l,f,c
 11780  002610  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
 11781  002612  22DA               	addwfc	fsr2h,f,c
 11782  002614  CFDE F0D2          	movff	postinc2,reserve_direntry@clust
 11783  002618  CFDD F0D3          	movff	postdec2,reserve_direntry@clust+1
 11784                           
 11785                           ; BSR set to: 0
 11786                           ;tff.c: 580: if (clust != 0) {
 11787  00261C  51D2               	movf	reserve_direntry@clust& (0+255),w,b
 11788  00261E  11D3               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 11789  002620  B4D8               	btfsc	status,2,c
 11790  002622  D020               	goto	l1190
 11791                           
 11792                           ; BSR set to: 0
 11793                           ;tff.c: 581: dj->clust = clust;
 11794  002624  EE20 F008          	lfsr	2,8
 11795  002628  51C4               	movf	reserve_direntry@dj& (0+255),w,b
 11796  00262A  26D9               	addwf	fsr2l,f,c
 11797  00262C  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
 11798  00262E  22DA               	addwfc	fsr2h,f,c
 11799  002630  C0D2  FFDE         	movff	reserve_direntry@clust,postinc2
 11800  002634  C0D3  FFDD         	movff	reserve_direntry@clust+1,postdec2
 11801                           
 11802                           ; BSR set to: 0
 11803                           ;tff.c: 582: dj->sect = clust2sect(clust);
 11804  002638  C0D2  F06C         	movff	reserve_direntry@clust,clust2sect@clust
 11805  00263C  C0D3  F06D         	movff	reserve_direntry@clust+1,clust2sect@clust+1
 11806  002640  ECA7  F021         	call	_clust2sect	;wreg free
 11807  002644  0100               	movlb	0	; () banked
 11808  002646  EE20 F00A          	lfsr	2,10
 11809  00264A  51C4               	movf	reserve_direntry@dj& (0+255),w,b
 11810  00264C  26D9               	addwf	fsr2l,f,c
 11811  00264E  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
 11812  002650  22DA               	addwfc	fsr2h,f,c
 11813  002652  C06C  FFDE         	movff	?_clust2sect,postinc2
 11814  002656  C06D  FFDE         	movff	?_clust2sect+1,postinc2
 11815  00265A  C06E  FFDE         	movff	?_clust2sect+2,postinc2
 11816  00265E  C06F  FFDE         	movff	?_clust2sect+3,postinc2
 11817                           
 11818                           ;tff.c: 583: } else {
 11819  002662  D014               	goto	l1191
 11820  002664                     l1190:
 11821                           
 11822                           ; BSR set to: 0
 11823                           ;tff.c: 584: dj->sect = fs->dirbase;
 11824                           
 11825                           ; BSR set to: 0
 11826  002664  EE20 F00C          	lfsr	2,12
 11827  002668  51D4               	movf	reserve_direntry@fs& (0+255),w,b
 11828  00266A  26D9               	addwf	fsr2l,f,c
 11829  00266C  51D5               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 11830  00266E  22DA               	addwfc	fsr2h,f,c
 11831  002670  EE10 F00A          	lfsr	1,10
 11832  002674  51C4               	movf	reserve_direntry@dj& (0+255),w,b
 11833  002676  26E1               	addwf	fsr1l,f,c
 11834  002678  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
 11835  00267A  22E2               	addwfc	fsr1h,f,c
 11836  00267C  CFDE FFE6          	movff	postinc2,postinc1
 11837  002680  CFDE FFE6          	movff	postinc2,postinc1
 11838  002684  CFDE FFE6          	movff	postinc2,postinc1
 11839  002688  CFDE FFE6          	movff	postinc2,postinc1
 11840  00268C                     l1191:
 11841                           
 11842                           ; BSR set to: 0
 11843                           ;tff.c: 585: }
 11844                           ;tff.c: 586: dj->index = 0;
 11845                           
 11846                           ; BSR set to: 0
 11847  00268C  EE20 F002          	lfsr	2,2
 11848  002690  51C4               	movf	reserve_direntry@dj& (0+255),w,b
 11849  002692  26D9               	addwf	fsr2l,f,c
 11850  002694  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
 11851  002696  22DA               	addwfc	fsr2h,f,c
 11852  002698  0E00               	movlw	0
 11853  00269A  6EDE               	movwf	postinc2,c
 11854  00269C  0E00               	movlw	0
 11855  00269E  6EDD               	movwf	postdec2,c
 11856  0026A0                     
 11857                           ;tff.c: 589: if (!move_window(dj->sect)) return FR_RW_ERROR;
 11858                           
 11859                           ; BSR set to: 0
 11860  0026A0  0100               	movlb	0	; () banked
 11861  0026A2  EE20 F00A          	lfsr	2,10
 11862  0026A6  51C4               	movf	reserve_direntry@dj& (0+255),w,b
 11863  0026A8  26D9               	addwf	fsr2l,f,c
 11864  0026AA  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
 11865  0026AC  22DA               	addwfc	fsr2h,f,c
 11866  0026AE  CFDE F08B          	movff	postinc2,move_window@sector
 11867  0026B2  CFDE F08C          	movff	postinc2,move_window@sector+1
 11868  0026B6  CFDE F08D          	movff	postinc2,move_window@sector+2
 11869  0026BA  CFDE F08E          	movff	postinc2,move_window@sector+3
 11870  0026BE  EC8D  F01A         	call	_move_window	;wreg free
 11871  0026C2  0900               	iorlw	0
 11872  0026C4  A4D8               	btfss	status,2,c
 11873  0026C6  D002               	goto	l1193
 11874  0026C8  0E08               	movlw	8
 11875  0026CA  0012               	return	
 11876  0026CC                     l1193:
 11877                           
 11878                           ;tff.c: 590: dptr = &fs->win[(dj->index & 15) * 32];
 11879  0026CC  0100               	movlb	0	; () banked
 11880  0026CE  EE20 F002          	lfsr	2,2
 11881  0026D2  51C4               	movf	reserve_direntry@dj& (0+255),w,b
 11882  0026D4  26D9               	addwf	fsr2l,f,c
 11883  0026D6  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
 11884  0026D8  22DA               	addwfc	fsr2h,f,c
 11885  0026DA  CFDE F0C8          	movff	postinc2,??_reserve_direntry
 11886  0026DE  CFDD F0C9          	movff	postdec2,??_reserve_direntry+1
 11887  0026E2  0E0F               	movlw	15
 11888  0026E4  17C8               	andwf	??_reserve_direntry& (0+255),f,b
 11889  0026E6  0E00               	movlw	0
 11890  0026E8  17C9               	andwf	(??_reserve_direntry+1)& (0+255),f,b
 11891  0026EA  0E05               	movlw	5
 11892  0026EC                     u14325:
 11893  0026EC  90D8               	bcf	status,0,c
 11894  0026EE  37C8               	rlcf	??_reserve_direntry& (0+255),f,b
 11895  0026F0  37C9               	rlcf	(??_reserve_direntry+1)& (0+255),f,b
 11896  0026F2  2EE8               	decfsz	wreg,f,c
 11897  0026F4  D7FB               	goto	u14325
 11898  0026F6  0E20               	movlw	32
 11899  0026F8  27C8               	addwf	??_reserve_direntry& (0+255),f,b
 11900  0026FA  0E00               	movlw	0
 11901  0026FC  23C9               	addwfc	(??_reserve_direntry+1)& (0+255),f,b
 11902  0026FE  51C8               	movf	??_reserve_direntry& (0+255),w,b
 11903  002700  25D4               	addwf	reserve_direntry@fs& (0+255),w,b
 11904  002702  6FCF               	movwf	reserve_direntry@dptr& (0+255),b
 11905  002704  51C9               	movf	(??_reserve_direntry+1)& (0+255),w,b
 11906  002706  21D5               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
 11907  002708  6FD0               	movwf	(reserve_direntry@dptr+1)& (0+255),b
 11908                           
 11909                           ; BSR set to: 0
 11910                           ;tff.c: 591: c = dptr[0];
 11911  00270A  C0CF  FFD9         	movff	reserve_direntry@dptr,fsr2l
 11912  00270E  C0D0  FFDA         	movff	reserve_direntry@dptr+1,fsr2h
 11913  002712  50DF               	movf	indf2,w,c
 11914  002714  6FD1               	movwf	reserve_direntry@c& (0+255),b
 11915                           
 11916                           ; BSR set to: 0
 11917                           ;tff.c: 592: if (c == 0 || c == 0xE5) {
 11918  002716  51D1               	movf	reserve_direntry@c& (0+255),w,b
 11919  002718  B4D8               	btfsc	status,2,c
 11920  00271A  D004               	goto	u14340
 11921                           
 11922                           ; BSR set to: 0
 11923  00271C  0EE5               	movlw	229
 11924  00271E  19D1               	xorwf	reserve_direntry@c& (0+255),w,b
 11925  002720  A4D8               	btfss	status,2,c
 11926  002722  D00A               	goto	l1195
 11927  002724                     u14340:
 11928                           
 11929                           ; BSR set to: 0
 11930                           ;tff.c: 593: *dir = dptr; return FR_OK;
 11931                           
 11932                           ; BSR set to: 0
 11933  002724  C0C6  FFD9         	movff	reserve_direntry@dir,fsr2l
 11934  002728  C0C7  FFDA         	movff	reserve_direntry@dir+1,fsr2h
 11935  00272C  C0CF  FFDE         	movff	reserve_direntry@dptr,postinc2
 11936  002730  C0D0  FFDD         	movff	reserve_direntry@dptr+1,postdec2
 11937                           
 11938                           ; BSR set to: 0
 11939  002734  0E00               	movlw	0
 11940                           
 11941                           ; BSR set to: 0
 11942  002736  0012               	return	
 11943  002738                     l1195:
 11944                           
 11945                           ; BSR set to: 0
 11946                           ;tff.c: 594: }
 11947                           ;tff.c: 595: } while (next_dir_entry(dj));
 11948                           
 11949                           ; BSR set to: 0
 11950  002738  C0C4  F0B3         	movff	reserve_direntry@dj,next_dir_entry@dj
 11951  00273C  C0C5  F0B4         	movff	reserve_direntry@dj+1,next_dir_entry@dj+1
 11952  002740  EC68  F01B         	call	_next_dir_entry	;wreg free
 11953  002744  0900               	iorlw	0
 11954  002746  A4D8               	btfss	status,2,c
 11955  002748  D7AB               	goto	l1192
 11956                           
 11957                           ;tff.c: 599: if (clust == 0 || !(clust = create_chain(dj->clust))) return FR_DENIED;
 11958  00274A  0100               	movlb	0	; () banked
 11959  00274C  51D2               	movf	reserve_direntry@clust& (0+255),w,b
 11960  00274E  11D3               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 11961  002750  B4D8               	btfsc	status,2,c
 11962  002752  D015               	goto	u14370
 11963                           
 11964                           ; BSR set to: 0
 11965  002754  EE20 F008          	lfsr	2,8
 11966  002758  51C4               	movf	reserve_direntry@dj& (0+255),w,b
 11967  00275A  26D9               	addwf	fsr2l,f,c
 11968  00275C  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
 11969  00275E  22DA               	addwfc	fsr2h,f,c
 11970  002760  CFDE F0B6          	movff	postinc2,create_chain@clust
 11971  002764  CFDD F0B7          	movff	postdec2,create_chain@clust+1
 11972  002768  ECAD  F019         	call	_create_chain	;wreg free
 11973  00276C  C0B6  F0D2         	movff	?_create_chain,reserve_direntry@clust
 11974  002770  C0B7  F0D3         	movff	?_create_chain+1,reserve_direntry@clust+1
 11975  002774  0100               	movlb	0	; () banked
 11976  002776  51D2               	movf	reserve_direntry@clust& (0+255),w,b
 11977  002778  11D3               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 11978  00277A  A4D8               	btfss	status,2,c
 11979  00277C  D002               	goto	l1199
 11980  00277E                     u14370:
 11981                           
 11982                           ; BSR set to: 0
 11983                           
 11984                           ; BSR set to: 0
 11985  00277E  0E06               	movlw	6
 11986                           
 11987                           ; BSR set to: 0
 11988  002780  0012               	return	
 11989  002782                     l1199:
 11990                           
 11991                           ; BSR set to: 0
 11992                           ;tff.c: 600: if (clust == 1 || !move_window(0)) return FR_RW_ERROR;
 11993                           
 11994                           ; BSR set to: 0
 11995  002782  05D2               	decf	reserve_direntry@clust& (0+255),w,b
 11996  002784  11D3               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 11997  002786  B4D8               	btfsc	status,2,c
 11998  002788  D00D               	goto	u14390
 11999                           
 12000                           ; BSR set to: 0
 12001  00278A  0E00               	movlw	0
 12002  00278C  6F8B               	movwf	move_window@sector& (0+255),b
 12003  00278E  0E00               	movlw	0
 12004  002790  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 12005  002792  0E00               	movlw	0
 12006  002794  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 12007  002796  0E00               	movlw	0
 12008  002798  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 12009  00279A  EC8D  F01A         	call	_move_window	;wreg free
 12010  00279E  0900               	iorlw	0
 12011  0027A0  A4D8               	btfss	status,2,c
 12012  0027A2  D002               	goto	l1202
 12013  0027A4                     u14390:
 12014  0027A4  0E08               	movlw	8
 12015  0027A6  0012               	return	
 12016  0027A8                     l1202:
 12017                           
 12018                           ;tff.c: 602: fs->winsect = sector = clust2sect(clust);
 12019  0027A8  C0D2  F06C         	movff	reserve_direntry@clust,clust2sect@clust
 12020  0027AC  C0D3  F06D         	movff	reserve_direntry@clust+1,clust2sect@clust+1
 12021  0027B0  ECA7  F021         	call	_clust2sect	;wreg free
 12022  0027B4  C06C  F0CA         	movff	?_clust2sect,reserve_direntry@sector
 12023  0027B8  C06D  F0CB         	movff	?_clust2sect+1,reserve_direntry@sector+1
 12024  0027BC  C06E  F0CC         	movff	?_clust2sect+2,reserve_direntry@sector+2
 12025  0027C0  C06F  F0CD         	movff	?_clust2sect+3,reserve_direntry@sector+3
 12026  0027C4  0100               	movlb	0	; () banked
 12027  0027C6  EE20 F004          	lfsr	2,4
 12028  0027CA  51D4               	movf	reserve_direntry@fs& (0+255),w,b
 12029  0027CC  26D9               	addwf	fsr2l,f,c
 12030  0027CE  51D5               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 12031  0027D0  22DA               	addwfc	fsr2h,f,c
 12032  0027D2  C0CA  FFDE         	movff	reserve_direntry@sector,postinc2
 12033  0027D6  C0CB  FFDE         	movff	reserve_direntry@sector+1,postinc2
 12034  0027DA  C0CC  FFDE         	movff	reserve_direntry@sector+2,postinc2
 12035  0027DE  C0CD  FFDE         	movff	reserve_direntry@sector+3,postinc2
 12036                           
 12037                           ;tff.c: 603: memset(fs->win, 0, 512U);
 12038  0027E2  0E20               	movlw	32
 12039  0027E4  25D4               	addwf	reserve_direntry@fs& (0+255),w,b
 12040  0027E6  6F60               	movwf	memset@p1& (0+255),b
 12041  0027E8  0E00               	movlw	0
 12042  0027EA  21D5               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
 12043  0027EC  6F61               	movwf	(memset@p1+1)& (0+255),b
 12044  0027EE  0E00               	movlw	0
 12045  0027F0  6F63               	movwf	(memset@c+1)& (0+255),b
 12046  0027F2  0E00               	movlw	0
 12047  0027F4  6F62               	movwf	memset@c& (0+255),b
 12048  0027F6  0E02               	movlw	2
 12049  0027F8  6F65               	movwf	(memset@n+1)& (0+255),b
 12050  0027FA  0E00               	movlw	0
 12051  0027FC  6F64               	movwf	memset@n& (0+255),b
 12052  0027FE  EC63  F02A         	call	_memset	;wreg free
 12053                           
 12054                           ;tff.c: 604: for (n = fs->csize; n; n--) {
 12055  002802  0100               	movlb	0	; () banked
 12056  002804  EE20 F01D          	lfsr	2,29
 12057  002808  51D4               	movf	reserve_direntry@fs& (0+255),w,b
 12058  00280A  26D9               	addwf	fsr2l,f,c
 12059  00280C  51D5               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 12060  00280E  22DA               	addwfc	fsr2h,f,c
 12061  002810  50DF               	movf	indf2,w,c
 12062  002812  6FCE               	movwf	reserve_direntry@n& (0+255),b
 12063  002814  D020               	goto	l1205
 12064  002816                     
 12065                           ; BSR set to: 0
 12066                           ;tff.c: 605: if (disk_write(0, fs->win, sector, 1) != RES_OK)
 12067                           
 12068                           ; BSR set to: 0
 12069  002816  0E20               	movlw	32
 12070  002818  25D4               	addwf	reserve_direntry@fs& (0+255),w,b
 12071  00281A  6F7F               	movwf	disk_write@buff& (0+255),b
 12072  00281C  0E00               	movlw	0
 12073  00281E  21D5               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
 12074  002820  6F80               	movwf	(disk_write@buff+1)& (0+255),b
 12075  002822  C0CA  F081         	movff	reserve_direntry@sector,disk_write@sector
 12076  002826  C0CB  F082         	movff	reserve_direntry@sector+1,disk_write@sector+1
 12077  00282A  C0CC  F083         	movff	reserve_direntry@sector+2,disk_write@sector+2
 12078  00282E  C0CD  F084         	movff	reserve_direntry@sector+3,disk_write@sector+3
 12079  002832  0E01               	movlw	1
 12080  002834  6F85               	movwf	disk_write@count& (0+255),b
 12081  002836  0E00               	movlw	0
 12082  002838  EC1B  F025         	call	_disk_write
 12083  00283C  0900               	iorlw	0
 12084  00283E  B4D8               	btfsc	status,2,c
 12085  002840  D002               	goto	l1207
 12086                           
 12087                           ;tff.c: 606: return FR_RW_ERROR;
 12088  002842  0E08               	movlw	8
 12089  002844  0012               	return	
 12090  002846                     l1207:
 12091                           
 12092                           ;tff.c: 607: sector++;
 12093  002846  0E01               	movlw	1
 12094  002848  0100               	movlb	0	; () banked
 12095  00284A  27CA               	addwf	reserve_direntry@sector& (0+255),f,b
 12096  00284C  0E00               	movlw	0
 12097  00284E  23CB               	addwfc	(reserve_direntry@sector+1)& (0+255),f,b
 12098  002850  23CC               	addwfc	(reserve_direntry@sector+2)& (0+255),f,b
 12099  002852  23CD               	addwfc	(reserve_direntry@sector+3)& (0+255),f,b
 12100                           
 12101                           ; BSR set to: 0
 12102  002854  07CE               	decf	reserve_direntry@n& (0+255),f,b
 12103  002856                     l1205:
 12104                           
 12105                           ; BSR set to: 0
 12106                           
 12107                           ; BSR set to: 0
 12108  002856  51CE               	movf	reserve_direntry@n& (0+255),w,b
 12109  002858  A4D8               	btfss	status,2,c
 12110  00285A  D7DD               	goto	l1206
 12111                           
 12112                           ; BSR set to: 0
 12113                           ;tff.c: 608: }
 12114                           ;tff.c: 609: fs->winflag = 1;
 12115                           
 12116                           ; BSR set to: 0
 12117  00285C  EE20 F01F          	lfsr	2,31
 12118  002860  51D4               	movf	reserve_direntry@fs& (0+255),w,b
 12119  002862  26D9               	addwf	fsr2l,f,c
 12120  002864  51D5               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 12121  002866  22DA               	addwfc	fsr2h,f,c
 12122  002868  0E01               	movlw	1
 12123  00286A  6EDF               	movwf	indf2,c
 12124                           
 12125                           ;tff.c: 610: *dir = fs->win;
 12126  00286C  0E20               	movlw	32
 12127  00286E  25D4               	addwf	reserve_direntry@fs& (0+255),w,b
 12128  002870  6FC8               	movwf	??_reserve_direntry& (0+255),b
 12129  002872  0E00               	movlw	0
 12130  002874  21D5               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
 12131  002876  6FC9               	movwf	(??_reserve_direntry+1)& (0+255),b
 12132  002878  C0C6  FFD9         	movff	reserve_direntry@dir,fsr2l
 12133  00287C  C0C7  FFDA         	movff	reserve_direntry@dir+1,fsr2h
 12134  002880  C0C8  FFDE         	movff	??_reserve_direntry,postinc2
 12135  002884  C0C9  FFDD         	movff	??_reserve_direntry+1,postdec2
 12136                           
 12137                           ; BSR set to: 0
 12138                           ;tff.c: 611: return FR_OK;
 12139  002888  0E00               	movlw	0
 12140  00288A  0012               	return	
 12141  00288C                     __end_of_reserve_direntry:
 12142                           	opt stack 0
 12143                           tosu	equ	0xFFF
 12144                           tosh	equ	0xFFE
 12145                           tosl	equ	0xFFD
 12146                           pclath	equ	0xFFA
 12147                           tblptru	equ	0xFF8
 12148                           tblptrh	equ	0xFF7
 12149                           tblptrl	equ	0xFF6
 12150                           tablat	equ	0xFF5
 12151                           prodh	equ	0xFF4
 12152                           prodl	equ	0xFF3
 12153                           intcon	equ	0xFF2
 12154                           intcon2	equ	0xFF1
 12155                           intcon3	equ	0xFF0
 12156                           indf0	equ	0xFEF
 12157                           postinc0	equ	0xFEE
 12158                           fsr0h	equ	0xFEA
 12159                           fsr0l	equ	0xFE9
 12160                           wreg	equ	0xFE8
 12161                           indf1	equ	0xFE7
 12162                           postinc1	equ	0xFE6
 12163                           postdec1	equ	0xFE5
 12164                           plusw1	equ	0xFE3
 12165                           fsr1h	equ	0xFE2
 12166                           fsr1l	equ	0xFE1
 12167                           indf2	equ	0xFDF
 12168                           postinc2	equ	0xFDE
 12169                           postdec2	equ	0xFDD
 12170                           plusw2	equ	0xFDB
 12171                           fsr2h	equ	0xFDA
 12172                           fsr2l	equ	0xFD9
 12173                           status	equ	0xFD8
 12174                           
 12175 ;; *************** function _next_dir_entry *****************
 12176 ;; Defined at:
 12177 ;;		line 358 in file "bibliotecas/tff.c"
 12178 ;; Parameters:    Size  Location     Type
 12179 ;;  dj              2   83[BANK0 ] PTR struct _DIR_E
 12180 ;;		 -> f_open@dj(14), 
 12181 ;; Auto vars:     Size  Location     Type
 12182 ;;  idx             2   94[BANK0 ] unsigned short 
 12183 ;;  clust           2   92[BANK0 ] unsigned short 
 12184 ;; Return value:  Size  Location     Type
 12185 ;;                  1    wreg      enum E105
 12186 ;; Registers used:
 12187 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12188 ;; Tracked objects:
 12189 ;;		On entry : 0/0
 12190 ;;		On exit  : 0/0
 12191 ;;		Unchanged: 0/0
 12192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12193 ;;      Params:         0       2       0       0       0       0       0       0       0
 12194 ;;      Locals:         0       4       0       0       0       0       0       0       0
 12195 ;;      Temps:          0       7       0       0       0       0       0       0       0
 12196 ;;      Totals:         0      13       0       0       0       0       0       0       0
 12197 ;;Total ram usage:       13 bytes
 12198 ;; Hardware stack levels used:    1
 12199 ;; Hardware stack levels required when called:   10
 12200 ;; This function calls:
 12201 ;;		_clust2sect
 12202 ;;		_get_cluster
 12203 ;; This function is called by:
 12204 ;;		_trace_path
 12205 ;;		_reserve_direntry
 12206 ;;		_f_readdir
 12207 ;; This function uses a non-reentrant model
 12208 ;;
 12209                           
 12210                           	psect	text40
 12211  0036D0                     __ptext40:
 12212                           	opt stack 0
 12213  0036D0                     _next_dir_entry:
 12214                           	opt stack 15
 12215                           
 12216                           ;tff.c: 362: CLUST clust;
 12217                           ;tff.c: 363: WORD idx;
 12218                           ;tff.c: 366: idx = dj->index + 1;
 12219                           
 12220                           ;incstack = 0
 12221  0036D0  0100               	movlb	0	; () banked
 12222  0036D2  EE20 F002          	lfsr	2,2
 12223  0036D6  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 12224  0036D8  26D9               	addwf	fsr2l,f,c
 12225  0036DA  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 12226  0036DC  22DA               	addwfc	fsr2h,f,c
 12227  0036DE  CFDE F0B5          	movff	postinc2,??_next_dir_entry
 12228  0036E2  CFDD F0B6          	movff	postdec2,??_next_dir_entry+1
 12229  0036E6  0E01               	movlw	1
 12230  0036E8  25B5               	addwf	??_next_dir_entry& (0+255),w,b
 12231  0036EA  6FBE               	movwf	next_dir_entry@idx& (0+255),b
 12232  0036EC  0E00               	movlw	0
 12233  0036EE  21B6               	addwfc	(??_next_dir_entry+1)& (0+255),w,b
 12234  0036F0  6FBF               	movwf	(next_dir_entry@idx+1)& (0+255),b
 12235                           
 12236                           ; BSR set to: 0
 12237                           ;tff.c: 367: if ((idx & 15) == 0) {
 12238  0036F2  0E0F               	movlw	15
 12239  0036F4  15BE               	andwf	next_dir_entry@idx& (0+255),w,b
 12240  0036F6  6FB5               	movwf	??_next_dir_entry& (0+255),b
 12241  0036F8  0E00               	movlw	0
 12242  0036FA  15BF               	andwf	(next_dir_entry@idx+1)& (0+255),w,b
 12243  0036FC  6FB6               	movwf	(??_next_dir_entry+1)& (0+255),b
 12244  0036FE  51B5               	movf	??_next_dir_entry& (0+255),w,b
 12245  003700  11B6               	iorwf	(??_next_dir_entry+1)& (0+255),w,b
 12246  003702  A4D8               	btfss	status,2,c
 12247  003704  D09D               	goto	l1097
 12248                           
 12249                           ; BSR set to: 0
 12250                           ;tff.c: 368: dj->sect++;
 12251  003706  EE20 F00A          	lfsr	2,10
 12252  00370A  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 12253  00370C  26D9               	addwf	fsr2l,f,c
 12254  00370E  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 12255  003710  22DA               	addwfc	fsr2h,f,c
 12256  003712  2ADE               	incf	postinc2,f,c
 12257  003714  0E00               	movlw	0
 12258  003716  22DE               	addwfc	postinc2,f,c
 12259  003718  22DE               	addwfc	postinc2,f,c
 12260  00371A  22DE               	addwfc	postinc2,f,c
 12261                           
 12262                           ;tff.c: 369: if (dj->clust == 0) {
 12263  00371C  EE20 F008          	lfsr	2,8
 12264  003720  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 12265  003722  26D9               	addwf	fsr2l,f,c
 12266  003724  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 12267  003726  22DA               	addwfc	fsr2h,f,c
 12268  003728  50DE               	movf	postinc2,w,c
 12269  00372A  10DE               	iorwf	postinc2,w,c
 12270  00372C  A4D8               	btfss	status,2,c
 12271  00372E  D014               	goto	l1093
 12272                           
 12273                           ; BSR set to: 0
 12274                           ;tff.c: 370: if (idx >= dj->fs->n_rootdir) return FALSE;
 12275  003730  EE20 F004          	lfsr	2,4
 12276  003734  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 12277  003736  26D9               	addwf	fsr2l,f,c
 12278  003738  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 12279  00373A  22DA               	addwfc	fsr2h,f,c
 12280  00373C  EE10 F002          	lfsr	1,2
 12281  003740  50DE               	movf	postinc2,w,c
 12282  003742  26E1               	addwf	fsr1l,f,c
 12283  003744  50DD               	movf	postdec2,w,c
 12284  003746  22E2               	addwfc	fsr1h,f,c
 12285  003748  50E6               	movf	postinc1,w,c
 12286  00374A  5DBE               	subwf	next_dir_entry@idx& (0+255),w,b
 12287  00374C  50E6               	movf	postinc1,w,c
 12288  00374E  59BF               	subwfb	(next_dir_entry@idx+1)& (0+255),w,b
 12289  003750  A0D8               	btfss	status,0,c
 12290  003752  D076               	goto	l1097
 12291                           
 12292                           ; BSR set to: 0
 12293  003754  0E00               	movlw	0
 12294                           
 12295                           ; BSR set to: 0
 12296  003756  0012               	return	
 12297  003758                     l1093:
 12298                           
 12299                           ; BSR set to: 0
 12300                           ;tff.c: 372: if (((idx / 16) & (dj->fs->csize - 1)) == 0) {
 12301                           
 12302                           ; BSR set to: 0
 12303  003758  C0BE  F0B5         	movff	next_dir_entry@idx,??_next_dir_entry
 12304  00375C  C0BF  F0B6         	movff	next_dir_entry@idx+1,??_next_dir_entry+1
 12305  003760  0E04               	movlw	4
 12306  003762  6FB7               	movwf	(??_next_dir_entry+2)& (0+255),b
 12307  003764                     u13455:
 12308  003764  90D8               	bcf	status,0,c
 12309  003766  33B6               	rrcf	(??_next_dir_entry+1)& (0+255),f,b
 12310  003768  33B5               	rrcf	??_next_dir_entry& (0+255),f,b
 12311  00376A  2FB7               	decfsz	(??_next_dir_entry+2)& (0+255),f,b
 12312  00376C  D7FB               	goto	u13455
 12313  00376E  0EFF               	movlw	255
 12314  003770  6FB8               	movwf	(??_next_dir_entry+3)& (0+255),b
 12315  003772  0EFF               	movlw	255
 12316  003774  6FB9               	movwf	(??_next_dir_entry+4)& (0+255),b
 12317  003776  EE20 F004          	lfsr	2,4
 12318  00377A  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 12319  00377C  26D9               	addwf	fsr2l,f,c
 12320  00377E  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 12321  003780  22DA               	addwfc	fsr2h,f,c
 12322  003782  EE10 F01D          	lfsr	1,29
 12323  003786  50DE               	movf	postinc2,w,c
 12324  003788  26E1               	addwf	fsr1l,f,c
 12325  00378A  50DD               	movf	postdec2,w,c
 12326  00378C  22E2               	addwfc	fsr1h,f,c
 12327  00378E  50E7               	movf	indf1,w,c
 12328  003790  6FBA               	movwf	(??_next_dir_entry+5)& (0+255),b
 12329  003792  6BBB               	clrf	(??_next_dir_entry+6)& (0+255),b
 12330  003794  51B8               	movf	(??_next_dir_entry+3)& (0+255),w,b
 12331  003796  27BA               	addwf	(??_next_dir_entry+5)& (0+255),f,b
 12332  003798  51B9               	movf	(??_next_dir_entry+4)& (0+255),w,b
 12333  00379A  23BB               	addwfc	(??_next_dir_entry+6)& (0+255),f,b
 12334  00379C  51B5               	movf	??_next_dir_entry& (0+255),w,b
 12335  00379E  17BA               	andwf	(??_next_dir_entry+5)& (0+255),f,b
 12336  0037A0  51B6               	movf	(??_next_dir_entry+1)& (0+255),w,b
 12337  0037A2  17BB               	andwf	(??_next_dir_entry+6)& (0+255),f,b
 12338  0037A4  51BA               	movf	(??_next_dir_entry+5)& (0+255),w,b
 12339  0037A6  11BB               	iorwf	(??_next_dir_entry+6)& (0+255),w,b
 12340  0037A8  A4D8               	btfss	status,2,c
 12341  0037AA  D04A               	goto	l1097
 12342                           
 12343                           ; BSR set to: 0
 12344                           ;tff.c: 373: clust = get_cluster(dj->clust);
 12345  0037AC  EE20 F008          	lfsr	2,8
 12346  0037B0  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 12347  0037B2  26D9               	addwf	fsr2l,f,c
 12348  0037B4  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 12349  0037B6  22DA               	addwfc	fsr2h,f,c
 12350  0037B8  CFDE F0A0          	movff	postinc2,get_cluster@clust
 12351  0037BC  CFDD F0A1          	movff	postdec2,get_cluster@clust+1
 12352  0037C0  ECCD  F016         	call	_get_cluster	;wreg free
 12353  0037C4  C0A0  F0BC         	movff	?_get_cluster,next_dir_entry@clust
 12354  0037C8  C0A1  F0BD         	movff	?_get_cluster+1,next_dir_entry@clust+1
 12355                           
 12356                           ;tff.c: 374: if (clust < 2 || clust >= dj->fs->max_clust)
 12357  0037CC  0100               	movlb	0	; () banked
 12358  0037CE  51BD               	movf	(next_dir_entry@clust+1)& (0+255),w,b
 12359  0037D0  E104               	bnz	u13470
 12360  0037D2  0E02               	movlw	2
 12361  0037D4  5DBC               	subwf	next_dir_entry@clust& (0+255),w,b
 12362  0037D6  A0D8               	btfss	status,0,c
 12363  0037D8  D012               	goto	u13480
 12364  0037DA                     u13470:
 12365                           
 12366                           ; BSR set to: 0
 12367  0037DA  EE20 F004          	lfsr	2,4
 12368  0037DE  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 12369  0037E0  26D9               	addwf	fsr2l,f,c
 12370  0037E2  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 12371  0037E4  22DA               	addwfc	fsr2h,f,c
 12372  0037E6  EE10 F016          	lfsr	1,22
 12373  0037EA  50DE               	movf	postinc2,w,c
 12374  0037EC  26E1               	addwf	fsr1l,f,c
 12375  0037EE  50DD               	movf	postdec2,w,c
 12376  0037F0  22E2               	addwfc	fsr1h,f,c
 12377  0037F2  50E6               	movf	postinc1,w,c
 12378  0037F4  5DBC               	subwf	next_dir_entry@clust& (0+255),w,b
 12379  0037F6  50E6               	movf	postinc1,w,c
 12380  0037F8  59BD               	subwfb	(next_dir_entry@clust+1)& (0+255),w,b
 12381  0037FA  A0D8               	btfss	status,0,c
 12382  0037FC  D002               	goto	l1098
 12383  0037FE                     u13480:
 12384                           
 12385                           ; BSR set to: 0
 12386                           ;tff.c: 375: return FALSE;
 12387                           
 12388                           ; BSR set to: 0
 12389  0037FE  0E00               	movlw	0
 12390                           
 12391                           ; BSR set to: 0
 12392  003800  0012               	return	
 12393  003802                     l1098:
 12394                           
 12395                           ; BSR set to: 0
 12396                           ;tff.c: 376: dj->clust = clust;
 12397                           
 12398                           ; BSR set to: 0
 12399  003802  EE20 F008          	lfsr	2,8
 12400  003806  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 12401  003808  26D9               	addwf	fsr2l,f,c
 12402  00380A  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 12403  00380C  22DA               	addwfc	fsr2h,f,c
 12404  00380E  C0BC  FFDE         	movff	next_dir_entry@clust,postinc2
 12405  003812  C0BD  FFDD         	movff	next_dir_entry@clust+1,postdec2
 12406                           
 12407                           ; BSR set to: 0
 12408                           ;tff.c: 377: dj->sect = clust2sect(clust);
 12409  003816  C0BC  F06C         	movff	next_dir_entry@clust,clust2sect@clust
 12410  00381A  C0BD  F06D         	movff	next_dir_entry@clust+1,clust2sect@clust+1
 12411  00381E  ECA7  F021         	call	_clust2sect	;wreg free
 12412  003822  0100               	movlb	0	; () banked
 12413  003824  EE20 F00A          	lfsr	2,10
 12414  003828  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 12415  00382A  26D9               	addwf	fsr2l,f,c
 12416  00382C  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 12417  00382E  22DA               	addwfc	fsr2h,f,c
 12418  003830  C06C  FFDE         	movff	?_clust2sect,postinc2
 12419  003834  C06D  FFDE         	movff	?_clust2sect+1,postinc2
 12420  003838  C06E  FFDE         	movff	?_clust2sect+2,postinc2
 12421  00383C  C06F  FFDE         	movff	?_clust2sect+3,postinc2
 12422  003840                     l1097:
 12423                           
 12424                           ; BSR set to: 0
 12425                           ;tff.c: 378: }
 12426                           ;tff.c: 379: }
 12427                           ;tff.c: 380: }
 12428                           ;tff.c: 381: dj->index = idx;
 12429                           
 12430                           ; BSR set to: 0
 12431                           
 12432                           ; BSR set to: 0
 12433                           
 12434                           ; BSR set to: 0
 12435  003840  EE20 F002          	lfsr	2,2
 12436  003844  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 12437  003846  26D9               	addwf	fsr2l,f,c
 12438  003848  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 12439  00384A  22DA               	addwfc	fsr2h,f,c
 12440  00384C  C0BE  FFDE         	movff	next_dir_entry@idx,postinc2
 12441  003850  C0BF  FFDD         	movff	next_dir_entry@idx+1,postdec2
 12442                           
 12443                           ; BSR set to: 0
 12444                           ;tff.c: 382: return TRUE;
 12445  003854  0E01               	movlw	1
 12446  003856  0012               	return	
 12447  003858                     __end_of_next_dir_entry:
 12448                           	opt stack 0
 12449                           tosu	equ	0xFFF
 12450                           tosh	equ	0xFFE
 12451                           tosl	equ	0xFFD
 12452                           pclath	equ	0xFFA
 12453                           tblptru	equ	0xFF8
 12454                           tblptrh	equ	0xFF7
 12455                           tblptrl	equ	0xFF6
 12456                           tablat	equ	0xFF5
 12457                           prodh	equ	0xFF4
 12458                           prodl	equ	0xFF3
 12459                           intcon	equ	0xFF2
 12460                           intcon2	equ	0xFF1
 12461                           intcon3	equ	0xFF0
 12462                           indf0	equ	0xFEF
 12463                           postinc0	equ	0xFEE
 12464                           fsr0h	equ	0xFEA
 12465                           fsr0l	equ	0xFE9
 12466                           wreg	equ	0xFE8
 12467                           indf1	equ	0xFE7
 12468                           postinc1	equ	0xFE6
 12469                           postdec1	equ	0xFE5
 12470                           plusw1	equ	0xFE3
 12471                           fsr1h	equ	0xFE2
 12472                           fsr1l	equ	0xFE1
 12473                           indf2	equ	0xFDF
 12474                           postinc2	equ	0xFDE
 12475                           postdec2	equ	0xFDD
 12476                           plusw2	equ	0xFDB
 12477                           fsr2h	equ	0xFDA
 12478                           fsr2l	equ	0xFD9
 12479                           status	equ	0xFD8
 12480                           
 12481 ;; *************** function _clust2sect *****************
 12482 ;; Defined at:
 12483 ;;		line 338 in file "bibliotecas/tff.c"
 12484 ;; Parameters:    Size  Location     Type
 12485 ;;  clust           2   12[BANK0 ] unsigned short 
 12486 ;; Auto vars:     Size  Location     Type
 12487 ;;  fs              2   21[BANK0 ] PTR struct _FATFS
 12488 ;;		 -> NULL(0), fs(544), 
 12489 ;; Return value:  Size  Location     Type
 12490 ;;                  4   12[BANK0 ] unsigned long 
 12491 ;; Registers used:
 12492 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12493 ;; Tracked objects:
 12494 ;;		On entry : 0/0
 12495 ;;		On exit  : 0/0
 12496 ;;		Unchanged: 0/0
 12497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12498 ;;      Params:         0       4       0       0       0       0       0       0       0
 12499 ;;      Locals:         0       2       0       0       0       0       0       0       0
 12500 ;;      Temps:          0       5       0       0       0       0       0       0       0
 12501 ;;      Totals:         0      11       0       0       0       0       0       0       0
 12502 ;;Total ram usage:       11 bytes
 12503 ;; Hardware stack levels used:    1
 12504 ;; Hardware stack levels required when called:    4
 12505 ;; This function calls:
 12506 ;;		___lmul
 12507 ;; This function is called by:
 12508 ;;		_next_dir_entry
 12509 ;;		_trace_path
 12510 ;;		_reserve_direntry
 12511 ;;		_f_write
 12512 ;;		_f_read
 12513 ;;		_f_opendir
 12514 ;; This function uses a non-reentrant model
 12515 ;;
 12516                           
 12517                           	psect	text41
 12518  00434E                     __ptext41:
 12519                           	opt stack 0
 12520  00434E                     _clust2sect:
 12521                           	opt stack 19
 12522                           
 12523                           ;tff.c: 342: FATFS *fs = FatFs;
 12524                           
 12525                           ; BSR set to: 0
 12526                           ;incstack = 0
 12527  00434E  C0FA  F075         	movff	_FatFs,clust2sect@fs
 12528  004352  C0FB  F076         	movff	_FatFs+1,clust2sect@fs+1
 12529                           
 12530                           ;tff.c: 345: clust -= 2;
 12531  004356  0E02               	movlw	2
 12532  004358  0100               	movlb	0	; () banked
 12533  00435A  5F6C               	subwf	clust2sect@clust& (0+255),f,b
 12534  00435C  0E00               	movlw	0
 12535  00435E  5B6D               	subwfb	(clust2sect@clust+1)& (0+255),f,b
 12536                           
 12537                           ; BSR set to: 0
 12538                           ;tff.c: 346: if (clust >= (fs->max_clust - 2)) return 0;
 12539  004360  0EFE               	movlw	254
 12540  004362  6F70               	movwf	??_clust2sect& (0+255),b
 12541  004364  0EFF               	movlw	255
 12542  004366  6F71               	movwf	(??_clust2sect+1)& (0+255),b
 12543  004368  EE20 F016          	lfsr	2,22
 12544  00436C  5175               	movf	clust2sect@fs& (0+255),w,b
 12545  00436E  26D9               	addwf	fsr2l,f,c
 12546  004370  5176               	movf	(clust2sect@fs+1)& (0+255),w,b
 12547  004372  22DA               	addwfc	fsr2h,f,c
 12548  004374  CFDE F072          	movff	postinc2,??_clust2sect+2
 12549  004378  CFDD F073          	movff	postdec2,??_clust2sect+3
 12550  00437C  5170               	movf	??_clust2sect& (0+255),w,b
 12551  00437E  2772               	addwf	(??_clust2sect+2)& (0+255),f,b
 12552  004380  5171               	movf	(??_clust2sect+1)& (0+255),w,b
 12553  004382  2373               	addwfc	(??_clust2sect+3)& (0+255),f,b
 12554  004384  5172               	movf	(??_clust2sect+2)& (0+255),w,b
 12555  004386  5D6C               	subwf	clust2sect@clust& (0+255),w,b
 12556  004388  5173               	movf	(??_clust2sect+3)& (0+255),w,b
 12557  00438A  596D               	subwfb	(clust2sect@clust+1)& (0+255),w,b
 12558  00438C  A0D8               	btfss	status,0,c
 12559  00438E  D009               	goto	l1088
 12560                           
 12561                           ; BSR set to: 0
 12562  004390  0E00               	movlw	0
 12563  004392  6F6C               	movwf	?_clust2sect& (0+255),b
 12564  004394  0E00               	movlw	0
 12565  004396  6F6D               	movwf	(?_clust2sect+1)& (0+255),b
 12566  004398  0E00               	movlw	0
 12567  00439A  6F6E               	movwf	(?_clust2sect+2)& (0+255),b
 12568  00439C  0E00               	movlw	0
 12569  00439E  6F6F               	movwf	(?_clust2sect+3)& (0+255),b
 12570                           
 12571                           ; BSR set to: 0
 12572  0043A0  0012               	return	
 12573  0043A2                     l1088:
 12574                           
 12575                           ; BSR set to: 0
 12576                           ;tff.c: 347: return (DWORD)clust * fs->csize + fs->database;
 12577                           
 12578                           ; BSR set to: 0
 12579  0043A2  EE20 F010          	lfsr	2,16
 12580  0043A6  5175               	movf	clust2sect@fs& (0+255),w,b
 12581  0043A8  26D9               	addwf	fsr2l,f,c
 12582  0043AA  5176               	movf	(clust2sect@fs+1)& (0+255),w,b
 12583  0043AC  22DA               	addwfc	fsr2h,f,c
 12584  0043AE  CFDE F070          	movff	postinc2,??_clust2sect
 12585  0043B2  CFDE F071          	movff	postinc2,??_clust2sect+1
 12586  0043B6  CFDE F072          	movff	postinc2,??_clust2sect+2
 12587  0043BA  CFDE F073          	movff	postinc2,??_clust2sect+3
 12588  0043BE  C06C  F060         	movff	clust2sect@clust,___lmul@multiplier
 12589  0043C2  C06D  F061         	movff	clust2sect@clust+1,___lmul@multiplier+1
 12590  0043C6  6B62               	clrf	(___lmul@multiplier+2)& (0+255),b
 12591  0043C8  6B63               	clrf	(___lmul@multiplier+3)& (0+255),b
 12592  0043CA  EE20 F01D          	lfsr	2,29
 12593  0043CE  5175               	movf	clust2sect@fs& (0+255),w,b
 12594  0043D0  26D9               	addwf	fsr2l,f,c
 12595  0043D2  5176               	movf	(clust2sect@fs+1)& (0+255),w,b
 12596  0043D4  22DA               	addwfc	fsr2h,f,c
 12597  0043D6  50DF               	movf	indf2,w,c
 12598  0043D8  6F74               	movwf	(??_clust2sect+4)& (0+255),b
 12599  0043DA  5174               	movf	(??_clust2sect+4)& (0+255),w,b
 12600  0043DC  6F64               	movwf	___lmul@multiplicand& (0+255),b
 12601  0043DE  6B65               	clrf	(___lmul@multiplicand+1)& (0+255),b
 12602  0043E0  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
 12603  0043E2  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
 12604  0043E4  ECBE  F027         	call	___lmul	;wreg free
 12605  0043E8  0100               	movlb	0	; () banked
 12606  0043EA  5170               	movf	??_clust2sect& (0+255),w,b
 12607  0043EC  2560               	addwf	?___lmul& (0+255),w,b
 12608  0043EE  6F6C               	movwf	?_clust2sect& (0+255),b
 12609  0043F0  5171               	movf	(??_clust2sect+1)& (0+255),w,b
 12610  0043F2  2161               	addwfc	(?___lmul+1)& (0+255),w,b
 12611  0043F4  6F6D               	movwf	(?_clust2sect+1)& (0+255),b
 12612  0043F6  5172               	movf	(??_clust2sect+2)& (0+255),w,b
 12613  0043F8  2162               	addwfc	(?___lmul+2)& (0+255),w,b
 12614  0043FA  6F6E               	movwf	(?_clust2sect+2)& (0+255),b
 12615  0043FC  5173               	movf	(??_clust2sect+3)& (0+255),w,b
 12616  0043FE  2163               	addwfc	(?___lmul+3)& (0+255),w,b
 12617  004400  6F6F               	movwf	(?_clust2sect+3)& (0+255),b
 12618  004402  0012               	return	
 12619  004404                     __end_of_clust2sect:
 12620                           	opt stack 0
 12621                           tosu	equ	0xFFF
 12622                           tosh	equ	0xFFE
 12623                           tosl	equ	0xFFD
 12624                           pclath	equ	0xFFA
 12625                           tblptru	equ	0xFF8
 12626                           tblptrh	equ	0xFF7
 12627                           tblptrl	equ	0xFF6
 12628                           tablat	equ	0xFF5
 12629                           prodh	equ	0xFF4
 12630                           prodl	equ	0xFF3
 12631                           intcon	equ	0xFF2
 12632                           intcon2	equ	0xFF1
 12633                           intcon3	equ	0xFF0
 12634                           indf0	equ	0xFEF
 12635                           postinc0	equ	0xFEE
 12636                           fsr0h	equ	0xFEA
 12637                           fsr0l	equ	0xFE9
 12638                           wreg	equ	0xFE8
 12639                           indf1	equ	0xFE7
 12640                           postinc1	equ	0xFE6
 12641                           postdec1	equ	0xFE5
 12642                           plusw1	equ	0xFE3
 12643                           fsr1h	equ	0xFE2
 12644                           fsr1l	equ	0xFE1
 12645                           indf2	equ	0xFDF
 12646                           postinc2	equ	0xFDE
 12647                           postdec2	equ	0xFDD
 12648                           plusw2	equ	0xFDB
 12649                           fsr2h	equ	0xFDA
 12650                           fsr2l	equ	0xFD9
 12651                           status	equ	0xFD8
 12652                           
 12653 ;; *************** function _remove_chain *****************
 12654 ;; Defined at:
 12655 ;;		line 249 in file "bibliotecas/tff.c"
 12656 ;; Parameters:    Size  Location     Type
 12657 ;;  clust           2   86[BANK0 ] unsigned short 
 12658 ;; Auto vars:     Size  Location     Type
 12659 ;;  fs              2   92[BANK0 ] PTR struct _FATFS
 12660 ;;		 -> NULL(0), fs(544), 
 12661 ;;  nxt             2   90[BANK0 ] unsigned short 
 12662 ;; Return value:  Size  Location     Type
 12663 ;;                  1    wreg      enum E105
 12664 ;; Registers used:
 12665 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12666 ;; Tracked objects:
 12667 ;;		On entry : 0/0
 12668 ;;		On exit  : 0/0
 12669 ;;		Unchanged: 0/0
 12670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12671 ;;      Params:         0       2       0       0       0       0       0       0       0
 12672 ;;      Locals:         0       4       0       0       0       0       0       0       0
 12673 ;;      Temps:          0       2       0       0       0       0       0       0       0
 12674 ;;      Totals:         0       8       0       0       0       0       0       0       0
 12675 ;;Total ram usage:        8 bytes
 12676 ;; Hardware stack levels used:    1
 12677 ;; Hardware stack levels required when called:   10
 12678 ;; This function calls:
 12679 ;;		_get_cluster
 12680 ;;		_put_cluster
 12681 ;; This function is called by:
 12682 ;;		_f_open
 12683 ;; This function uses a non-reentrant model
 12684 ;;
 12685                           
 12686                           	psect	text42
 12687  004556                     __ptext42:
 12688                           	opt stack 0
 12689  004556                     _remove_chain:
 12690                           	opt stack 16
 12691                           
 12692                           ;tff.c: 253: CLUST nxt;
 12693                           ;tff.c: 254: FATFS *fs = FatFs;
 12694                           
 12695                           ; BSR set to: 0
 12696                           ;incstack = 0
 12697  004556  C0FA  F0BC         	movff	_FatFs,remove_chain@fs
 12698  00455A  C0FB  F0BD         	movff	_FatFs+1,remove_chain@fs+1
 12699                           
 12700                           ;tff.c: 257: while (clust >= 2 && clust < fs->max_clust) {
 12701  00455E  D039               	goto	l1057
 12702  004560                     
 12703                           ;tff.c: 258: nxt = get_cluster(clust);
 12704  004560  C0B6  F0A0         	movff	remove_chain@clust,get_cluster@clust
 12705  004564  C0B7  F0A1         	movff	remove_chain@clust+1,get_cluster@clust+1
 12706  004568  ECCD  F016         	call	_get_cluster	;wreg free
 12707  00456C  C0A0  F0BA         	movff	?_get_cluster,remove_chain@nxt
 12708  004570  C0A1  F0BB         	movff	?_get_cluster+1,remove_chain@nxt+1
 12709                           
 12710                           ;tff.c: 259: if (nxt == 1) return FALSE;
 12711  004574  0100               	movlb	0	; () banked
 12712  004576  05BA               	decf	remove_chain@nxt& (0+255),w,b
 12713  004578  11BB               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
 12714  00457A  A4D8               	btfss	status,2,c
 12715  00457C  D002               	goto	l1059
 12716                           
 12717                           ; BSR set to: 0
 12718  00457E  0E00               	movlw	0
 12719                           
 12720                           ; BSR set to: 0
 12721  004580  0012               	return	
 12722  004582                     l1059:
 12723                           
 12724                           ; BSR set to: 0
 12725                           ;tff.c: 260: if (!put_cluster(clust, 0)) return FALSE;
 12726                           
 12727                           ; BSR set to: 0
 12728  004582  C0B6  F0A0         	movff	remove_chain@clust,put_cluster@clust
 12729  004586  C0B7  F0A1         	movff	remove_chain@clust+1,put_cluster@clust+1
 12730  00458A  0E00               	movlw	0
 12731  00458C  6FA3               	movwf	(put_cluster@val+1)& (0+255),b
 12732  00458E  0E00               	movlw	0
 12733  004590  6FA2               	movwf	put_cluster@val& (0+255),b
 12734  004592  EC90  F015         	call	_put_cluster	;wreg free
 12735  004596  0900               	iorlw	0
 12736  004598  A4D8               	btfss	status,2,c
 12737  00459A  D002               	goto	l1061
 12738  00459C  0E00               	movlw	0
 12739  00459E  0012               	return	
 12740  0045A0                     l1061:
 12741                           
 12742                           ;tff.c: 261: if (fs->free_clust != (CLUST)0xFFFFFFFF) {
 12743  0045A0  0100               	movlb	0	; () banked
 12744  0045A2  EE20 F01A          	lfsr	2,26
 12745  0045A6  51BC               	movf	remove_chain@fs& (0+255),w,b
 12746  0045A8  26D9               	addwf	fsr2l,f,c
 12747  0045AA  51BD               	movf	(remove_chain@fs+1)& (0+255),w,b
 12748  0045AC  22DA               	addwfc	fsr2h,f,c
 12749  0045AE  28DE               	incf	postinc2,w,c
 12750  0045B0  E103               	bnz	u14130
 12751  0045B2  28DE               	incf	postinc2,w,c
 12752  0045B4  B4D8               	btfsc	status,2,c
 12753  0045B6  D009               	goto	l1062
 12754  0045B8                     u14130:
 12755                           
 12756                           ; BSR set to: 0
 12757                           ;tff.c: 262: fs->free_clust++;
 12758  0045B8  EE20 F01A          	lfsr	2,26
 12759  0045BC  51BC               	movf	remove_chain@fs& (0+255),w,b
 12760  0045BE  26D9               	addwf	fsr2l,f,c
 12761  0045C0  51BD               	movf	(remove_chain@fs+1)& (0+255),w,b
 12762  0045C2  22DA               	addwfc	fsr2h,f,c
 12763  0045C4  2ADE               	incf	postinc2,f,c
 12764  0045C6  0E00               	movlw	0
 12765  0045C8  22DD               	addwfc	postdec2,f,c
 12766  0045CA                     l1062:
 12767                           
 12768                           ; BSR set to: 0
 12769                           ;tff.c: 266: }
 12770                           ;tff.c: 267: clust = nxt;
 12771                           
 12772                           ; BSR set to: 0
 12773  0045CA  C0BA  F0B6         	movff	remove_chain@nxt,remove_chain@clust
 12774  0045CE  C0BB  F0B7         	movff	remove_chain@nxt+1,remove_chain@clust+1
 12775  0045D2                     l1057:
 12776                           
 12777                           ; BSR set to: 0
 12778  0045D2  0100               	movlb	0	; () banked
 12779  0045D4  51B7               	movf	(remove_chain@clust+1)& (0+255),w,b
 12780  0045D6  E104               	bnz	u14140
 12781  0045D8  0E02               	movlw	2
 12782  0045DA  5DB6               	subwf	remove_chain@clust& (0+255),w,b
 12783  0045DC  A0D8               	btfss	status,0,c
 12784  0045DE  D00C               	goto	u14150
 12785  0045E0                     u14140:
 12786                           
 12787                           ; BSR set to: 0
 12788  0045E0  EE20 F016          	lfsr	2,22
 12789  0045E4  51BC               	movf	remove_chain@fs& (0+255),w,b
 12790  0045E6  26D9               	addwf	fsr2l,f,c
 12791  0045E8  51BD               	movf	(remove_chain@fs+1)& (0+255),w,b
 12792  0045EA  22DA               	addwfc	fsr2h,f,c
 12793  0045EC  50DE               	movf	postinc2,w,c
 12794  0045EE  5DB6               	subwf	remove_chain@clust& (0+255),w,b
 12795  0045F0  50DE               	movf	postinc2,w,c
 12796  0045F2  59B7               	subwfb	(remove_chain@clust+1)& (0+255),w,b
 12797  0045F4  A0D8               	btfss	status,0,c
 12798  0045F6  D7B4               	goto	l1058
 12799  0045F8                     u14150:
 12800                           
 12801                           ; BSR set to: 0
 12802                           ;tff.c: 268: }
 12803                           ;tff.c: 269: return TRUE;
 12804                           
 12805                           ; BSR set to: 0
 12806                           
 12807                           ; BSR set to: 0
 12808  0045F8  0E01               	movlw	1
 12809  0045FA  0012               	return	
 12810  0045FC                     __end_of_remove_chain:
 12811                           	opt stack 0
 12812                           tosu	equ	0xFFF
 12813                           tosh	equ	0xFFE
 12814                           tosl	equ	0xFFD
 12815                           pclath	equ	0xFFA
 12816                           tblptru	equ	0xFF8
 12817                           tblptrh	equ	0xFF7
 12818                           tblptrl	equ	0xFF6
 12819                           tablat	equ	0xFF5
 12820                           prodh	equ	0xFF4
 12821                           prodl	equ	0xFF3
 12822                           intcon	equ	0xFF2
 12823                           intcon2	equ	0xFF1
 12824                           intcon3	equ	0xFF0
 12825                           indf0	equ	0xFEF
 12826                           postinc0	equ	0xFEE
 12827                           fsr0h	equ	0xFEA
 12828                           fsr0l	equ	0xFE9
 12829                           wreg	equ	0xFE8
 12830                           indf1	equ	0xFE7
 12831                           postinc1	equ	0xFE6
 12832                           postdec1	equ	0xFE5
 12833                           plusw1	equ	0xFE3
 12834                           fsr1h	equ	0xFE2
 12835                           fsr1l	equ	0xFE1
 12836                           indf2	equ	0xFDF
 12837                           postinc2	equ	0xFDE
 12838                           postdec2	equ	0xFDD
 12839                           plusw2	equ	0xFDB
 12840                           fsr2h	equ	0xFDA
 12841                           fsr2l	equ	0xFD9
 12842                           status	equ	0xFD8
 12843                           
 12844 ;; *************** function _memcpy *****************
 12845 ;; Defined at:
 12846 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcpy.c"
 12847 ;; Parameters:    Size  Location     Type
 12848 ;;  d1              2    0[BANK0 ] PTR void 
 12849 ;;		 -> fs.win(512), NULL(0), dado_arquivo(20), fs(544), 
 12850 ;;  s1              2    2[BANK0 ] PTR const void 
 12851 ;;		 -> fs.win(512), fputc@c(1), f_open@fn(12), NULL(0), 
 12852 ;;		 -> fs(544), 
 12853 ;;  n               2    4[BANK0 ] unsigned int 
 12854 ;; Auto vars:     Size  Location     Type
 12855 ;;  s               2    9[BANK0 ] PTR const unsigned char 
 12856 ;;		 -> fs.win(512), fputc@c(1), f_open@fn(12), NULL(0), 
 12857 ;;		 -> fs(544), 
 12858 ;;  d               2    7[BANK0 ] PTR unsigned char 
 12859 ;;		 -> fs.win(512), NULL(0), dado_arquivo(20), fs(544), 
 12860 ;;  tmp             1    6[BANK0 ] unsigned char 
 12861 ;; Return value:  Size  Location     Type
 12862 ;;                  2    0[BANK0 ] PTR void 
 12863 ;; Registers used:
 12864 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12865 ;; Tracked objects:
 12866 ;;		On entry : 0/0
 12867 ;;		On exit  : 0/0
 12868 ;;		Unchanged: 0/0
 12869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12870 ;;      Params:         0       6       0       0       0       0       0       0       0
 12871 ;;      Locals:         0       5       0       0       0       0       0       0       0
 12872 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12873 ;;      Totals:         0      11       0       0       0       0       0       0       0
 12874 ;;Total ram usage:       11 bytes
 12875 ;; Hardware stack levels used:    1
 12876 ;; Hardware stack levels required when called:    3
 12877 ;; This function calls:
 12878 ;;		Nothing
 12879 ;; This function is called by:
 12880 ;;		_f_open
 12881 ;;		_f_write
 12882 ;;		_f_read
 12883 ;; This function uses a non-reentrant model
 12884 ;;
 12885                           
 12886                           	psect	text43
 12887  0051B8                     __ptext43:
 12888                           	opt stack 0
 12889  0051B8                     _memcpy:
 12890                           	opt stack 20
 12891                           
 12892                           ;incstack = 0
 12893  0051B8  C062  F069         	movff	memcpy@s1,memcpy@s
 12894  0051BC  C063  F06A         	movff	memcpy@s1+1,memcpy@s+1
 12895  0051C0  C060  F067         	movff	memcpy@d1,memcpy@d
 12896  0051C4  C061  F068         	movff	memcpy@d1+1,memcpy@d+1
 12897  0051C8  D011               	goto	l1964
 12898  0051CA                     l10138:
 12899  0051CA  C069  FFD9         	movff	memcpy@s,fsr2l
 12900  0051CE  C06A  FFDA         	movff	memcpy@s+1,fsr2h
 12901  0051D2  50DF               	movf	indf2,w,c
 12902  0051D4  0100               	movlb	0	; () banked
 12903  0051D6  6F66               	movwf	memcpy@tmp& (0+255),b
 12904                           
 12905                           ; BSR set to: 0
 12906  0051D8  4B69               	infsnz	memcpy@s& (0+255),f,b
 12907  0051DA  2B6A               	incf	(memcpy@s+1)& (0+255),f,b
 12908                           
 12909                           ; BSR set to: 0
 12910  0051DC  C067  FFD9         	movff	memcpy@d,fsr2l
 12911  0051E0  C068  FFDA         	movff	memcpy@d+1,fsr2h
 12912  0051E4  C066  FFDF         	movff	memcpy@tmp,indf2
 12913                           
 12914                           ; BSR set to: 0
 12915  0051E8  4B67               	infsnz	memcpy@d& (0+255),f,b
 12916  0051EA  2B68               	incf	(memcpy@d+1)& (0+255),f,b
 12917  0051EC                     l1964:
 12918                           
 12919                           ; BSR set to: 0
 12920  0051EC  0100               	movlb	0	; () banked
 12921  0051EE  0764               	decf	memcpy@n& (0+255),f,b
 12922  0051F0  A0D8               	btfss	status,0,c
 12923  0051F2  0765               	decf	(memcpy@n+1)& (0+255),f,b
 12924  0051F4  2964               	incf	memcpy@n& (0+255),w,b
 12925  0051F6  E1E9               	bnz	l10138
 12926  0051F8  2965               	incf	(memcpy@n+1)& (0+255),w,b
 12927  0051FA  B4D8               	btfsc	status,2,c
 12928  0051FC  0012               	return	
 12929  0051FE  D7E5               	goto	l1965
 12930  005200                     __end_of_memcpy:
 12931                           	opt stack 0
 12932                           tosu	equ	0xFFF
 12933                           tosh	equ	0xFFE
 12934                           tosl	equ	0xFFD
 12935                           pclath	equ	0xFFA
 12936                           tblptru	equ	0xFF8
 12937                           tblptrh	equ	0xFF7
 12938                           tblptrl	equ	0xFF6
 12939                           tablat	equ	0xFF5
 12940                           prodh	equ	0xFF4
 12941                           prodl	equ	0xFF3
 12942                           intcon	equ	0xFF2
 12943                           intcon2	equ	0xFF1
 12944                           intcon3	equ	0xFF0
 12945                           indf0	equ	0xFEF
 12946                           postinc0	equ	0xFEE
 12947                           fsr0h	equ	0xFEA
 12948                           fsr0l	equ	0xFE9
 12949                           wreg	equ	0xFE8
 12950                           indf1	equ	0xFE7
 12951                           postinc1	equ	0xFE6
 12952                           postdec1	equ	0xFE5
 12953                           plusw1	equ	0xFE3
 12954                           fsr1h	equ	0xFE2
 12955                           fsr1l	equ	0xFE1
 12956                           indf2	equ	0xFDF
 12957                           postinc2	equ	0xFDE
 12958                           postdec2	equ	0xFDD
 12959                           plusw2	equ	0xFDB
 12960                           fsr2h	equ	0xFDA
 12961                           fsr2l	equ	0xFD9
 12962                           status	equ	0xFD8
 12963                           
 12964 ;; *************** function _auto_mount *****************
 12965 ;; Defined at:
 12966 ;;		line 651 in file "bibliotecas/tff.c"
 12967 ;; Parameters:    Size  Location     Type
 12968 ;;  path            2   51[BANK0 ] PTR PTR const unsigned c
 12969 ;;		 -> f_opendir@path(2), f_open@path(2), 
 12970 ;;  chk_wp          1   53[BANK0 ] unsigned char 
 12971 ;; Auto vars:     Size  Location     Type
 12972 ;;  fatsize         4   85[BANK0 ] unsigned long 
 12973 ;;  totalsect       4   77[BANK0 ] unsigned long 
 12974 ;;  bootsect        4   73[BANK0 ] unsigned long 
 12975 ;;  maxclust        4   69[BANK0 ] unsigned long 
 12976 ;;  fs              2   89[BANK0 ] PTR struct _FATFS
 12977 ;;		 -> NULL(0), fs(544), 
 12978 ;;  p               2   81[BANK0 ] PTR const unsigned char 
 12979 ;;		 -> STR_22(13), filename(15), 
 12980 ;;  stat            1   84[BANK0 ] unsigned char 
 12981 ;;  fmt             1   83[BANK0 ] unsigned char 
 12982 ;; Return value:  Size  Location     Type
 12983 ;;                  1    wreg      enum E155
 12984 ;; Registers used:
 12985 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12986 ;; Tracked objects:
 12987 ;;		On entry : 0/0
 12988 ;;		On exit  : 0/0
 12989 ;;		Unchanged: 0/0
 12990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12991 ;;      Params:         0       3       0       0       0       0       0       0       0
 12992 ;;      Locals:         0      22       0       0       0       0       0       0       0
 12993 ;;      Temps:          0      15       0       0       0       0       0       0       0
 12994 ;;      Totals:         0      40       0       0       0       0       0       0       0
 12995 ;;Total ram usage:       40 bytes
 12996 ;; Hardware stack levels used:    1
 12997 ;; Hardware stack levels required when called:    9
 12998 ;; This function calls:
 12999 ;;		___lldiv
 13000 ;;		___lmul
 13001 ;;		_check_fs
 13002 ;;		_disk_initialize
 13003 ;;		_disk_status
 13004 ;;		_memset
 13005 ;; This function is called by:
 13006 ;;		_f_open
 13007 ;;		_f_opendir
 13008 ;; This function uses a non-reentrant model
 13009 ;;
 13010                           
 13011                           	psect	text44
 13012  000ED0                     __ptext44:
 13013                           	opt stack 0
 13014  000ED0                     _auto_mount:
 13015                           	opt stack 17
 13016                           
 13017                           ;tff.c: 656: BYTE fmt;
 13018                           ;tff.c: 657: DSTATUS stat;
 13019                           ;tff.c: 658: DWORD bootsect, fatsize, totalsect, maxclust;
 13020                           ;tff.c: 659: const char *p = *path;
 13021                           
 13022                           ; BSR set to: 0
 13023                           ;incstack = 0
 13024  000ED0  C093  FFD9         	movff	auto_mount@path,fsr2l
 13025  000ED4  C094  FFDA         	movff	auto_mount@path+1,fsr2h
 13026  000ED8  CFDE F0B1          	movff	postinc2,auto_mount@p
 13027  000EDC  CFDD F0B2          	movff	postdec2,auto_mount@p+1
 13028                           
 13029                           ;tff.c: 660: FATFS *fs;
 13030                           ;tff.c: 663: while (*p == ' ') p++;
 13031  000EE0  D003               	goto	l1217
 13032  000EE2  0100               	movlb	0	; () banked
 13033  000EE4  4BB1               	infsnz	auto_mount@p& (0+255),f,b
 13034  000EE6  2BB2               	incf	(auto_mount@p+1)& (0+255),f,b
 13035  000EE8                     l1217:
 13036                           
 13037                           ; BSR set to: 0
 13038  000EE8  C0B1  FFF6         	movff	auto_mount@p,tblptrl
 13039  000EEC  C0B2  FFF7         	movff	auto_mount@p+1,tblptrh
 13040  000EF0  6AF8               	clrf	tblptru,c
 13041  000EF2  0E07               	movlw	(high __ramtop+-1)
 13042  000EF4  64F7               	cpfsgt	tblptrh,c
 13043  000EF6  D003               	bra	u14427
 13044  000EF8  0008               	tblrd		*
 13045  000EFA  50F5               	movf	tablat,w,c
 13046  000EFC  D005               	bra	u14420
 13047  000EFE                     u14427:
 13048  000EFE  CFF6 FFE9          	movff	tblptrl,fsr0l
 13049  000F02  CFF7 FFEA          	movff	tblptrh,fsr0h
 13050  000F06  50EF               	movf	indf0,w,c
 13051  000F08                     u14420:
 13052  000F08  0A20               	xorlw	32
 13053  000F0A  B4D8               	btfsc	status,2,c
 13054  000F0C  D7EA               	goto	l1218
 13055                           
 13056                           ;tff.c: 664: if (*p == '/') p++;
 13057  000F0E  C0B1  FFF6         	movff	auto_mount@p,tblptrl
 13058  000F12  C0B2  FFF7         	movff	auto_mount@p+1,tblptrh
 13059  000F16  6AF8               	clrf	tblptru,c
 13060  000F18  0E07               	movlw	(high __ramtop+-1)
 13061  000F1A  64F7               	cpfsgt	tblptrh,c
 13062  000F1C  D003               	bra	u14447
 13063  000F1E  0008               	tblrd		*
 13064  000F20  50F5               	movf	tablat,w,c
 13065  000F22  D005               	bra	u14440
 13066  000F24                     u14447:
 13067  000F24  CFF6 FFE9          	movff	tblptrl,fsr0l
 13068  000F28  CFF7 FFEA          	movff	tblptrh,fsr0h
 13069  000F2C  50EF               	movf	indf0,w,c
 13070  000F2E                     u14440:
 13071  000F2E  0A2F               	xorlw	47
 13072  000F30  A4D8               	btfss	status,2,c
 13073  000F32  D003               	goto	l1220
 13074  000F34  0100               	movlb	0	; () banked
 13075  000F36  4BB1               	infsnz	auto_mount@p& (0+255),f,b
 13076  000F38  2BB2               	incf	(auto_mount@p+1)& (0+255),f,b
 13077  000F3A                     l1220:
 13078                           
 13079                           ;tff.c: 665: *path = p;
 13080                           
 13081                           ; BSR set to: 0
 13082  000F3A  C093  FFD9         	movff	auto_mount@path,fsr2l
 13083  000F3E  C094  FFDA         	movff	auto_mount@path+1,fsr2h
 13084  000F42  C0B1  FFDE         	movff	auto_mount@p,postinc2
 13085  000F46  C0B2  FFDD         	movff	auto_mount@p+1,postdec2
 13086                           
 13087                           ;tff.c: 668: fs = FatFs;
 13088  000F4A  C0FA  F0B9         	movff	_FatFs,auto_mount@fs
 13089  000F4E  C0FB  F0BA         	movff	_FatFs+1,auto_mount@fs+1
 13090                           
 13091                           ;tff.c: 669: if (!fs) return FR_NOT_ENABLED;
 13092  000F52  0100               	movlb	0	; () banked
 13093  000F54  51B9               	movf	auto_mount@fs& (0+255),w,b
 13094  000F56  11BA               	iorwf	(auto_mount@fs+1)& (0+255),w,b
 13095  000F58  A4D8               	btfss	status,2,c
 13096  000F5A  D002               	goto	l1221
 13097                           
 13098                           ; BSR set to: 0
 13099  000F5C  0E0A               	movlw	10
 13100                           
 13101                           ; BSR set to: 0
 13102  000F5E  0012               	return	
 13103  000F60                     l1221:
 13104                           
 13105                           ; BSR set to: 0
 13106                           ;tff.c: 671: if (fs->fs_type) {
 13107                           
 13108                           ; BSR set to: 0
 13109  000F60  EE20 F01C          	lfsr	2,28
 13110  000F64  51B9               	movf	auto_mount@fs& (0+255),w,b
 13111  000F66  26D9               	addwf	fsr2l,f,c
 13112  000F68  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13113  000F6A  22DA               	addwfc	fsr2h,f,c
 13114  000F6C  50DF               	movf	indf2,w,c
 13115  000F6E  B4D8               	btfsc	status,2,c
 13116  000F70  D00F               	goto	l1224
 13117                           
 13118                           ; BSR set to: 0
 13119                           ;tff.c: 672: stat = disk_status(0);
 13120  000F72  0E00               	movlw	0
 13121  000F74  EC00  F029         	call	_disk_status
 13122  000F78  0100               	movlb	0	; () banked
 13123  000F7A  6FB4               	movwf	auto_mount@stat& (0+255),b
 13124                           
 13125                           ; BSR set to: 0
 13126                           ;tff.c: 673: if (!(stat & 0x01)) {
 13127  000F7C  B1B4               	btfsc	auto_mount@stat& (0+255),0,b
 13128  000F7E  D008               	goto	l1224
 13129                           
 13130                           ; BSR set to: 0
 13131                           ;tff.c: 675: if (chk_wp && (stat & 0x04))
 13132  000F80  5195               	movf	auto_mount@chk_wp& (0+255),w,b
 13133  000F82  A4D8               	btfss	status,2,c
 13134                           
 13135                           ; BSR set to: 0
 13136  000F84  A5B4               	btfss	auto_mount@stat& (0+255),2,b
 13137  000F86  D002               	goto	l1225
 13138                           
 13139                           ; BSR set to: 0
 13140                           ;tff.c: 676: return FR_WRITE_PROTECTED;
 13141  000F88  0E09               	movlw	9
 13142                           
 13143                           ; BSR set to: 0
 13144  000F8A  0012               	return	
 13145  000F8C                     l1225:
 13146                           
 13147                           ; BSR set to: 0
 13148                           ;tff.c: 678: return FR_OK;
 13149                           
 13150                           ; BSR set to: 0
 13151  000F8C  0E00               	movlw	0
 13152                           
 13153                           ; BSR set to: 0
 13154  000F8E  0012               	return	
 13155  000F90                     l1224:
 13156                           
 13157                           ; BSR set to: 0
 13158                           ;tff.c: 679: }
 13159                           ;tff.c: 680: }
 13160                           ;tff.c: 684: memset(fs, 0, sizeof(FATFS));
 13161                           
 13162                           ; BSR set to: 0
 13163                           
 13164                           ; BSR set to: 0
 13165  000F90  C0B9  F060         	movff	auto_mount@fs,memset@p1
 13166  000F94  C0BA  F061         	movff	auto_mount@fs+1,memset@p1+1
 13167  000F98  0E00               	movlw	0
 13168  000F9A  6F63               	movwf	(memset@c+1)& (0+255),b
 13169  000F9C  0E00               	movlw	0
 13170  000F9E  6F62               	movwf	memset@c& (0+255),b
 13171  000FA0  0E02               	movlw	2
 13172  000FA2  6F65               	movwf	(memset@n+1)& (0+255),b
 13173  000FA4  0E20               	movlw	32
 13174  000FA6  6F64               	movwf	memset@n& (0+255),b
 13175  000FA8  EC63  F02A         	call	_memset	;wreg free
 13176                           
 13177                           ;tff.c: 685: stat = disk_initialize(0);
 13178  000FAC  0E00               	movlw	0
 13179  000FAE  EC0E  F02A         	call	_disk_initialize
 13180  000FB2  0100               	movlb	0	; () banked
 13181  000FB4  6FB4               	movwf	auto_mount@stat& (0+255),b
 13182                           
 13183                           ; BSR set to: 0
 13184                           ;tff.c: 686: if (stat & 0x01)
 13185  000FB6  A1B4               	btfss	auto_mount@stat& (0+255),0,b
 13186  000FB8  D002               	goto	l1226
 13187                           
 13188                           ; BSR set to: 0
 13189                           ;tff.c: 687: return FR_NOT_READY;
 13190  000FBA  0E01               	movlw	1
 13191                           
 13192                           ; BSR set to: 0
 13193  000FBC  0012               	return	
 13194  000FBE                     l1226:
 13195                           
 13196                           ; BSR set to: 0
 13197                           ;tff.c: 689: if (chk_wp && (stat & 0x04))
 13198                           
 13199                           ; BSR set to: 0
 13200  000FBE  5195               	movf	auto_mount@chk_wp& (0+255),w,b
 13201  000FC0  A4D8               	btfss	status,2,c
 13202                           
 13203                           ; BSR set to: 0
 13204  000FC2  A5B4               	btfss	auto_mount@stat& (0+255),2,b
 13205  000FC4  D002               	goto	l1227
 13206                           
 13207                           ; BSR set to: 0
 13208                           ;tff.c: 690: return FR_WRITE_PROTECTED;
 13209  000FC6  0E09               	movlw	9
 13210                           
 13211                           ; BSR set to: 0
 13212  000FC8  0012               	return	
 13213  000FCA                     l1227:
 13214                           
 13215                           ; BSR set to: 0
 13216                           ;tff.c: 694: fmt = check_fs(bootsect = 0);
 13217                           
 13218                           ; BSR set to: 0
 13219  000FCA  0E00               	movlw	0
 13220  000FCC  6FA9               	movwf	auto_mount@bootsect& (0+255),b
 13221  000FCE  0E00               	movlw	0
 13222  000FD0  6FAA               	movwf	(auto_mount@bootsect+1)& (0+255),b
 13223  000FD2  0E00               	movlw	0
 13224  000FD4  6FAB               	movwf	(auto_mount@bootsect+2)& (0+255),b
 13225  000FD6  0E00               	movlw	0
 13226  000FD8  6FAC               	movwf	(auto_mount@bootsect+3)& (0+255),b
 13227  000FDA  C0A9  F08B         	movff	auto_mount@bootsect,check_fs@sect
 13228  000FDE  C0AA  F08C         	movff	auto_mount@bootsect+1,check_fs@sect+1
 13229  000FE2  C0AB  F08D         	movff	auto_mount@bootsect+2,check_fs@sect+2
 13230  000FE6  C0AC  F08E         	movff	auto_mount@bootsect+3,check_fs@sect+3
 13231  000FEA  ECD5  F024         	call	_check_fs	;wreg free
 13232  000FEE  0100               	movlb	0	; () banked
 13233  000FF0  6FB3               	movwf	auto_mount@fmt& (0+255),b
 13234                           
 13235                           ; BSR set to: 0
 13236                           ;tff.c: 696: if (fmt == 1) {
 13237  000FF2  05B3               	decf	auto_mount@fmt& (0+255),w,b
 13238  000FF4  A4D8               	btfss	status,2,c
 13239  000FF6  D023               	goto	l1229
 13240                           
 13241                           ; BSR set to: 0
 13242                           ;tff.c: 698: if (fs->win[446+4]) {
 13243  000FF8  EE21 F0E2          	lfsr	2,482
 13244  000FFC  51B9               	movf	auto_mount@fs& (0+255),w,b
 13245  000FFE  26D9               	addwf	fsr2l,f,c
 13246  001000  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13247  001002  22DA               	addwfc	fsr2h,f,c
 13248  001004  50DF               	movf	indf2,w,c
 13249  001006  B4D8               	btfsc	status,2,c
 13250  001008  D01A               	goto	l1229
 13251                           
 13252                           ; BSR set to: 0
 13253                           ;tff.c: 699: bootsect = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[446+8]));
 13254  00100A  EE21 F0E6          	lfsr	2,486
 13255  00100E  51B9               	movf	auto_mount@fs& (0+255),w,b
 13256  001010  26D9               	addwf	fsr2l,f,c
 13257  001012  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13258  001014  22DA               	addwfc	fsr2h,f,c
 13259  001016  CFDE F0A9          	movff	postinc2,auto_mount@bootsect
 13260  00101A  CFDE F0AA          	movff	postinc2,auto_mount@bootsect+1
 13261  00101E  CFDE F0AB          	movff	postinc2,auto_mount@bootsect+2
 13262  001022  CFDE F0AC          	movff	postinc2,auto_mount@bootsect+3
 13263                           
 13264                           ; BSR set to: 0
 13265                           ;tff.c: 700: fmt = check_fs(bootsect);
 13266  001026  C0A9  F08B         	movff	auto_mount@bootsect,check_fs@sect
 13267  00102A  C0AA  F08C         	movff	auto_mount@bootsect+1,check_fs@sect+1
 13268  00102E  C0AB  F08D         	movff	auto_mount@bootsect+2,check_fs@sect+2
 13269  001032  C0AC  F08E         	movff	auto_mount@bootsect+3,check_fs@sect+3
 13270  001036  ECD5  F024         	call	_check_fs	;wreg free
 13271  00103A  0100               	movlb	0	; () banked
 13272  00103C  6FB3               	movwf	auto_mount@fmt& (0+255),b
 13273  00103E                     l1229:
 13274                           
 13275                           ; BSR set to: 0
 13276                           ;tff.c: 701: }
 13277                           ;tff.c: 702: }
 13278                           ;tff.c: 703: if (fmt || (WORD)(*(WORD*)(BYTE*)(&fs->win[11])) != 512U)
 13279                           
 13280                           ; BSR set to: 0
 13281                           
 13282                           ; BSR set to: 0
 13283  00103E  51B3               	movf	auto_mount@fmt& (0+255),w,b
 13284  001040  A4D8               	btfss	status,2,c
 13285  001042  D00C               	goto	u14570
 13286                           
 13287                           ; BSR set to: 0
 13288  001044  EE20 F02B          	lfsr	2,43
 13289  001048  51B9               	movf	auto_mount@fs& (0+255),w,b
 13290  00104A  26D9               	addwf	fsr2l,f,c
 13291  00104C  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13292  00104E  22DA               	addwfc	fsr2h,f,c
 13293  001050  50DE               	movf	postinc2,w,c
 13294  001052  E104               	bnz	l11072
 13295  001054  0E02               	movlw	2
 13296  001056  18DE               	xorwf	postinc2,w,c
 13297  001058  B4D8               	btfsc	status,2,c
 13298  00105A  D002               	goto	l1230
 13299  00105C                     u14570:
 13300  00105C                     l11072:
 13301                           
 13302                           ; BSR set to: 0
 13303                           ;tff.c: 704: return FR_NO_FILESYSTEM;
 13304  00105C  0E0B               	movlw	11
 13305                           
 13306                           ; BSR set to: 0
 13307  00105E  0012               	return	
 13308  001060                     l1230:
 13309                           
 13310                           ; BSR set to: 0
 13311                           ;tff.c: 707: fatsize = (WORD)(*(WORD*)(BYTE*)(&fs->win[22]));
 13312                           
 13313                           ; BSR set to: 0
 13314  001060  EE20 F036          	lfsr	2,54
 13315  001064  51B9               	movf	auto_mount@fs& (0+255),w,b
 13316  001066  26D9               	addwf	fsr2l,f,c
 13317  001068  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13318  00106A  22DA               	addwfc	fsr2h,f,c
 13319  00106C  CFDE F096          	movff	postinc2,??_auto_mount
 13320  001070  CFDD F097          	movff	postdec2,??_auto_mount+1
 13321  001074  C096  F0B5         	movff	??_auto_mount,auto_mount@fatsize
 13322  001078  C097  F0B6         	movff	??_auto_mount+1,auto_mount@fatsize+1
 13323  00107C  6BB7               	clrf	(auto_mount@fatsize+2)& (0+255),b
 13324  00107E  6BB8               	clrf	(auto_mount@fatsize+3)& (0+255),b
 13325                           
 13326                           ; BSR set to: 0
 13327                           ;tff.c: 708: if (!fatsize) fatsize = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[36]));
 13328  001080  51B5               	movf	auto_mount@fatsize& (0+255),w,b
 13329  001082  11B6               	iorwf	(auto_mount@fatsize+1)& (0+255),w,b
 13330  001084  11B7               	iorwf	(auto_mount@fatsize+2)& (0+255),w,b
 13331  001086  11B8               	iorwf	(auto_mount@fatsize+3)& (0+255),w,b
 13332  001088  A4D8               	btfss	status,2,c
 13333  00108A  D00E               	goto	l1233
 13334                           
 13335                           ; BSR set to: 0
 13336  00108C  EE20 F044          	lfsr	2,68
 13337  001090  51B9               	movf	auto_mount@fs& (0+255),w,b
 13338  001092  26D9               	addwf	fsr2l,f,c
 13339  001094  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13340  001096  22DA               	addwfc	fsr2h,f,c
 13341  001098  CFDE F0B5          	movff	postinc2,auto_mount@fatsize
 13342  00109C  CFDE F0B6          	movff	postinc2,auto_mount@fatsize+1
 13343  0010A0  CFDE F0B7          	movff	postinc2,auto_mount@fatsize+2
 13344  0010A4  CFDE F0B8          	movff	postinc2,auto_mount@fatsize+3
 13345  0010A8                     l1233:
 13346                           
 13347                           ; BSR set to: 0
 13348                           ;tff.c: 709: fs->sects_fat = (CLUST)fatsize;
 13349  0010A8  EE20 F014          	lfsr	2,20
 13350  0010AC  51B9               	movf	auto_mount@fs& (0+255),w,b
 13351  0010AE  26D9               	addwf	fsr2l,f,c
 13352  0010B0  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13353  0010B2  22DA               	addwfc	fsr2h,f,c
 13354  0010B4  C0B5  FFDE         	movff	auto_mount@fatsize,postinc2
 13355  0010B8  C0B6  FFDD         	movff	auto_mount@fatsize+1,postdec2
 13356                           
 13357                           ; BSR set to: 0
 13358                           ;tff.c: 710: fs->n_fats = fs->win[16];
 13359  0010BC  EE20 F030          	lfsr	2,48
 13360  0010C0  51B9               	movf	auto_mount@fs& (0+255),w,b
 13361  0010C2  26D9               	addwf	fsr2l,f,c
 13362  0010C4  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13363  0010C6  22DA               	addwfc	fsr2h,f,c
 13364  0010C8  EE10 F01E          	lfsr	1,30
 13365  0010CC  51B9               	movf	auto_mount@fs& (0+255),w,b
 13366  0010CE  26E1               	addwf	fsr1l,f,c
 13367  0010D0  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13368  0010D2  22E2               	addwfc	fsr1h,f,c
 13369  0010D4  CFDF FFE7          	movff	indf2,indf1
 13370                           
 13371                           ; BSR set to: 0
 13372                           ;tff.c: 711: fatsize *= fs->n_fats;
 13373  0010D8  C0B5  F060         	movff	auto_mount@fatsize,___lmul@multiplier
 13374  0010DC  C0B6  F061         	movff	auto_mount@fatsize+1,___lmul@multiplier+1
 13375  0010E0  C0B7  F062         	movff	auto_mount@fatsize+2,___lmul@multiplier+2
 13376  0010E4  C0B8  F063         	movff	auto_mount@fatsize+3,___lmul@multiplier+3
 13377  0010E8  EE20 F01E          	lfsr	2,30
 13378  0010EC  51B9               	movf	auto_mount@fs& (0+255),w,b
 13379  0010EE  26D9               	addwf	fsr2l,f,c
 13380  0010F0  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13381  0010F2  22DA               	addwfc	fsr2h,f,c
 13382  0010F4  50DF               	movf	indf2,w,c
 13383  0010F6  6F96               	movwf	??_auto_mount& (0+255),b
 13384  0010F8  5196               	movf	??_auto_mount& (0+255),w,b
 13385  0010FA  6F64               	movwf	___lmul@multiplicand& (0+255),b
 13386  0010FC  6B65               	clrf	(___lmul@multiplicand+1)& (0+255),b
 13387  0010FE  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
 13388  001100  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
 13389  001102  ECBE  F027         	call	___lmul	;wreg free
 13390  001106  C060  F0B5         	movff	?___lmul,auto_mount@fatsize
 13391  00110A  C061  F0B6         	movff	?___lmul+1,auto_mount@fatsize+1
 13392  00110E  C062  F0B7         	movff	?___lmul+2,auto_mount@fatsize+2
 13393  001112  C063  F0B8         	movff	?___lmul+3,auto_mount@fatsize+3
 13394                           
 13395                           ;tff.c: 712: fs->fatbase = bootsect + (WORD)(*(WORD*)(BYTE*)(&fs->win[14]));
 13396  001116  0100               	movlb	0	; () banked
 13397  001118  EE20 F02E          	lfsr	2,46
 13398  00111C  51B9               	movf	auto_mount@fs& (0+255),w,b
 13399  00111E  26D9               	addwf	fsr2l,f,c
 13400  001120  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13401  001122  22DA               	addwfc	fsr2h,f,c
 13402  001124  CFDE F096          	movff	postinc2,??_auto_mount
 13403  001128  CFDD F097          	movff	postdec2,??_auto_mount+1
 13404  00112C  5196               	movf	??_auto_mount& (0+255),w,b
 13405  00112E  25A9               	addwf	auto_mount@bootsect& (0+255),w,b
 13406  001130  6F98               	movwf	(??_auto_mount+2)& (0+255),b
 13407  001132  5197               	movf	(??_auto_mount+1)& (0+255),w,b
 13408  001134  21AA               	addwfc	(auto_mount@bootsect+1)& (0+255),w,b
 13409  001136  6F99               	movwf	(??_auto_mount+3)& (0+255),b
 13410  001138  0E00               	movlw	0
 13411  00113A  21AB               	addwfc	(auto_mount@bootsect+2)& (0+255),w,b
 13412  00113C  6F9A               	movwf	(??_auto_mount+4)& (0+255),b
 13413  00113E  0E00               	movlw	0
 13414  001140  21AC               	addwfc	(auto_mount@bootsect+3)& (0+255),w,b
 13415  001142  6F9B               	movwf	(??_auto_mount+5)& (0+255),b
 13416  001144  EE20 F008          	lfsr	2,8
 13417  001148  51B9               	movf	auto_mount@fs& (0+255),w,b
 13418  00114A  26D9               	addwf	fsr2l,f,c
 13419  00114C  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13420  00114E  22DA               	addwfc	fsr2h,f,c
 13421  001150  C098  FFDE         	movff	??_auto_mount+2,postinc2
 13422  001154  C099  FFDE         	movff	??_auto_mount+3,postinc2
 13423  001158  C09A  FFDE         	movff	??_auto_mount+4,postinc2
 13424  00115C  C09B  FFDE         	movff	??_auto_mount+5,postinc2
 13425                           
 13426                           ; BSR set to: 0
 13427                           ;tff.c: 713: fs->csize = fs->win[13];
 13428  001160  EE20 F02D          	lfsr	2,45
 13429  001164  51B9               	movf	auto_mount@fs& (0+255),w,b
 13430  001166  26D9               	addwf	fsr2l,f,c
 13431  001168  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13432  00116A  22DA               	addwfc	fsr2h,f,c
 13433  00116C  EE10 F01D          	lfsr	1,29
 13434  001170  51B9               	movf	auto_mount@fs& (0+255),w,b
 13435  001172  26E1               	addwf	fsr1l,f,c
 13436  001174  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13437  001176  22E2               	addwfc	fsr1h,f,c
 13438  001178  CFDF FFE7          	movff	indf2,indf1
 13439                           
 13440                           ; BSR set to: 0
 13441                           ;tff.c: 714: fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(&fs->win[17]));
 13442  00117C  EE20 F031          	lfsr	2,49
 13443  001180  51B9               	movf	auto_mount@fs& (0+255),w,b
 13444  001182  26D9               	addwf	fsr2l,f,c
 13445  001184  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13446  001186  22DA               	addwfc	fsr2h,f,c
 13447  001188  EE10 F002          	lfsr	1,2
 13448  00118C  51B9               	movf	auto_mount@fs& (0+255),w,b
 13449  00118E  26E1               	addwf	fsr1l,f,c
 13450  001190  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13451  001192  22E2               	addwfc	fsr1h,f,c
 13452  001194  CFDE FFE6          	movff	postinc2,postinc1
 13453  001198  CFDD FFE5          	movff	postdec2,postdec1
 13454                           
 13455                           ; BSR set to: 0
 13456                           ;tff.c: 715: totalsect = (WORD)(*(WORD*)(BYTE*)(&fs->win[19]));
 13457  00119C  EE20 F033          	lfsr	2,51
 13458  0011A0  51B9               	movf	auto_mount@fs& (0+255),w,b
 13459  0011A2  26D9               	addwf	fsr2l,f,c
 13460  0011A4  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13461  0011A6  22DA               	addwfc	fsr2h,f,c
 13462  0011A8  CFDE F096          	movff	postinc2,??_auto_mount
 13463  0011AC  CFDD F097          	movff	postdec2,??_auto_mount+1
 13464  0011B0  C096  F0AD         	movff	??_auto_mount,auto_mount@totalsect
 13465  0011B4  C097  F0AE         	movff	??_auto_mount+1,auto_mount@totalsect+1
 13466  0011B8  6BAF               	clrf	(auto_mount@totalsect+2)& (0+255),b
 13467  0011BA  6BB0               	clrf	(auto_mount@totalsect+3)& (0+255),b
 13468                           
 13469                           ; BSR set to: 0
 13470                           ;tff.c: 716: if (!totalsect) totalsect = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[32]));
 13471  0011BC  51AD               	movf	auto_mount@totalsect& (0+255),w,b
 13472  0011BE  11AE               	iorwf	(auto_mount@totalsect+1)& (0+255),w,b
 13473  0011C0  11AF               	iorwf	(auto_mount@totalsect+2)& (0+255),w,b
 13474  0011C2  11B0               	iorwf	(auto_mount@totalsect+3)& (0+255),w,b
 13475  0011C4  A4D8               	btfss	status,2,c
 13476  0011C6  D00E               	goto	l1234
 13477                           
 13478                           ; BSR set to: 0
 13479  0011C8  EE20 F040          	lfsr	2,64
 13480  0011CC  51B9               	movf	auto_mount@fs& (0+255),w,b
 13481  0011CE  26D9               	addwf	fsr2l,f,c
 13482  0011D0  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13483  0011D2  22DA               	addwfc	fsr2h,f,c
 13484  0011D4  CFDE F0AD          	movff	postinc2,auto_mount@totalsect
 13485  0011D8  CFDE F0AE          	movff	postinc2,auto_mount@totalsect+1
 13486  0011DC  CFDE F0AF          	movff	postinc2,auto_mount@totalsect+2
 13487  0011E0  CFDE F0B0          	movff	postinc2,auto_mount@totalsect+3
 13488  0011E4                     l1234:
 13489                           
 13490                           ; BSR set to: 0
 13491                           ;tff.c: 717: fs->max_clust = maxclust = (totalsect
 13492                           ;tff.c: 718: - (WORD)(*(WORD*)(BYTE*)(&fs->win[14])) - fatsize - fs->n_rootdir / 16
 13493                           ;tff.c: 719: ) / fs->csize + 2;
 13494                           
 13495                           ; BSR set to: 0
 13496  0011E4  EE20 F002          	lfsr	2,2
 13497  0011E8  51B9               	movf	auto_mount@fs& (0+255),w,b
 13498  0011EA  26D9               	addwf	fsr2l,f,c
 13499  0011EC  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13500  0011EE  22DA               	addwfc	fsr2h,f,c
 13501  0011F0  CFDE F096          	movff	postinc2,??_auto_mount
 13502  0011F4  CFDD F097          	movff	postdec2,??_auto_mount+1
 13503  0011F8  0E04               	movlw	4
 13504  0011FA  6F98               	movwf	(??_auto_mount+2)& (0+255),b
 13505  0011FC                     u14605:
 13506  0011FC  90D8               	bcf	status,0,c
 13507  0011FE  3397               	rrcf	(??_auto_mount+1)& (0+255),f,b
 13508  001200  3396               	rrcf	??_auto_mount& (0+255),f,b
 13509  001202  2F98               	decfsz	(??_auto_mount+2)& (0+255),f,b
 13510  001204  D7FB               	goto	u14605
 13511  001206  EE20 F02E          	lfsr	2,46
 13512  00120A  51B9               	movf	auto_mount@fs& (0+255),w,b
 13513  00120C  26D9               	addwf	fsr2l,f,c
 13514  00120E  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13515  001210  22DA               	addwfc	fsr2h,f,c
 13516  001212  CFDE F099          	movff	postinc2,??_auto_mount+3
 13517  001216  CFDD F09A          	movff	postdec2,??_auto_mount+4
 13518  00121A  5199               	movf	(??_auto_mount+3)& (0+255),w,b
 13519  00121C  2596               	addwf	??_auto_mount& (0+255),w,b
 13520  00121E  6F9B               	movwf	(??_auto_mount+5)& (0+255),b
 13521  001220  519A               	movf	(??_auto_mount+4)& (0+255),w,b
 13522  001222  2197               	addwfc	(??_auto_mount+1)& (0+255),w,b
 13523  001224  6F9C               	movwf	(??_auto_mount+6)& (0+255),b
 13524  001226  6B9D               	clrf	(??_auto_mount+7)& (0+255),b
 13525  001228  B0D8               	btfsc	status,0,c
 13526  00122A  2B9D               	incf	(??_auto_mount+7)& (0+255),f,b
 13527  00122C  6B9E               	clrf	(??_auto_mount+8)& (0+255),b
 13528  00122E  51B5               	movf	auto_mount@fatsize& (0+255),w,b
 13529  001230  259B               	addwf	(??_auto_mount+5)& (0+255),w,b
 13530  001232  6F9F               	movwf	(??_auto_mount+9)& (0+255),b
 13531  001234  51B6               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 13532  001236  219C               	addwfc	(??_auto_mount+6)& (0+255),w,b
 13533  001238  6FA0               	movwf	(??_auto_mount+10)& (0+255),b
 13534  00123A  51B7               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 13535  00123C  219D               	addwfc	(??_auto_mount+7)& (0+255),w,b
 13536  00123E  6FA1               	movwf	(??_auto_mount+11)& (0+255),b
 13537  001240  51B8               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 13538  001242  219E               	addwfc	(??_auto_mount+8)& (0+255),w,b
 13539  001244  6FA2               	movwf	(??_auto_mount+12)& (0+255),b
 13540  001246  1F9F               	comf	(??_auto_mount+9)& (0+255),f,b
 13541  001248  1FA0               	comf	(??_auto_mount+10)& (0+255),f,b
 13542  00124A  1FA1               	comf	(??_auto_mount+11)& (0+255),f,b
 13543  00124C  1FA2               	comf	(??_auto_mount+12)& (0+255),f,b
 13544  00124E  2B9F               	incf	(??_auto_mount+9)& (0+255),f,b
 13545  001250  0E00               	movlw	0
 13546  001252  23A0               	addwfc	(??_auto_mount+10)& (0+255),f,b
 13547  001254  23A1               	addwfc	(??_auto_mount+11)& (0+255),f,b
 13548  001256  23A2               	addwfc	(??_auto_mount+12)& (0+255),f,b
 13549  001258  51AD               	movf	auto_mount@totalsect& (0+255),w,b
 13550  00125A  259F               	addwf	(??_auto_mount+9)& (0+255),w,b
 13551  00125C  6F60               	movwf	___lldiv@dividend& (0+255),b
 13552  00125E  51AE               	movf	(auto_mount@totalsect+1)& (0+255),w,b
 13553  001260  21A0               	addwfc	(??_auto_mount+10)& (0+255),w,b
 13554  001262  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
 13555  001264  51AF               	movf	(auto_mount@totalsect+2)& (0+255),w,b
 13556  001266  21A1               	addwfc	(??_auto_mount+11)& (0+255),w,b
 13557  001268  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
 13558  00126A  51B0               	movf	(auto_mount@totalsect+3)& (0+255),w,b
 13559  00126C  21A2               	addwfc	(??_auto_mount+12)& (0+255),w,b
 13560  00126E  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
 13561  001270  EE20 F01D          	lfsr	2,29
 13562  001274  51B9               	movf	auto_mount@fs& (0+255),w,b
 13563  001276  26D9               	addwf	fsr2l,f,c
 13564  001278  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13565  00127A  22DA               	addwfc	fsr2h,f,c
 13566  00127C  50DF               	movf	indf2,w,c
 13567  00127E  6FA3               	movwf	(??_auto_mount+13)& (0+255),b
 13568  001280  51A3               	movf	(??_auto_mount+13)& (0+255),w,b
 13569  001282  6F64               	movwf	___lldiv@divisor& (0+255),b
 13570  001284  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 13571  001286  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 13572  001288  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 13573  00128A  ECA2  F025         	call	___lldiv	;wreg free
 13574  00128E  0E02               	movlw	2
 13575  001290  0100               	movlb	0	; () banked
 13576  001292  2560               	addwf	?___lldiv& (0+255),w,b
 13577  001294  6FA5               	movwf	auto_mount@maxclust& (0+255),b
 13578  001296  0E00               	movlw	0
 13579  001298  2161               	addwfc	(?___lldiv+1)& (0+255),w,b
 13580  00129A  6FA6               	movwf	(auto_mount@maxclust+1)& (0+255),b
 13581  00129C  0E00               	movlw	0
 13582  00129E  2162               	addwfc	(?___lldiv+2)& (0+255),w,b
 13583  0012A0  6FA7               	movwf	(auto_mount@maxclust+2)& (0+255),b
 13584  0012A2  0E00               	movlw	0
 13585  0012A4  2163               	addwfc	(?___lldiv+3)& (0+255),w,b
 13586  0012A6  6FA8               	movwf	(auto_mount@maxclust+3)& (0+255),b
 13587  0012A8  EE20 F016          	lfsr	2,22
 13588  0012AC  51B9               	movf	auto_mount@fs& (0+255),w,b
 13589  0012AE  26D9               	addwf	fsr2l,f,c
 13590  0012B0  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13591  0012B2  22DA               	addwfc	fsr2h,f,c
 13592  0012B4  C0A5  FFDE         	movff	auto_mount@maxclust,postinc2
 13593  0012B8  C0A6  FFDD         	movff	auto_mount@maxclust+1,postdec2
 13594                           
 13595                           ; BSR set to: 0
 13596                           ;tff.c: 721: fmt = 1;
 13597  0012BC  0E01               	movlw	1
 13598  0012BE  6FB3               	movwf	auto_mount@fmt& (0+255),b
 13599                           
 13600                           ; BSR set to: 0
 13601                           ;tff.c: 722: if (maxclust >= 0xFF7) fmt = 2;
 13602  0012C0  51A8               	movf	(auto_mount@maxclust+3)& (0+255),w,b
 13603  0012C2  11A7               	iorwf	(auto_mount@maxclust+2)& (0+255),w,b
 13604  0012C4  E106               	bnz	u14610
 13605  0012C6  0EF7               	movlw	247
 13606  0012C8  5DA5               	subwf	auto_mount@maxclust& (0+255),w,b
 13607  0012CA  0E0F               	movlw	15
 13608  0012CC  59A6               	subwfb	(auto_mount@maxclust+1)& (0+255),w,b
 13609  0012CE  A0D8               	btfss	status,0,c
 13610  0012D0  D002               	goto	l1235
 13611  0012D2                     u14610:
 13612                           
 13613                           ; BSR set to: 0
 13614  0012D2  0E02               	movlw	2
 13615  0012D4  6FB3               	movwf	auto_mount@fmt& (0+255),b
 13616  0012D6                     l1235:
 13617                           
 13618                           ; BSR set to: 0
 13619                           ;tff.c: 723: if (maxclust >= 0xFFF7)
 13620                           
 13621                           ; BSR set to: 0
 13622  0012D6  51A8               	movf	(auto_mount@maxclust+3)& (0+255),w,b
 13623  0012D8  11A7               	iorwf	(auto_mount@maxclust+2)& (0+255),w,b
 13624  0012DA  E106               	bnz	u14620
 13625  0012DC  0EF7               	movlw	247
 13626  0012DE  5DA5               	subwf	auto_mount@maxclust& (0+255),w,b
 13627  0012E0  0EFF               	movlw	255
 13628  0012E2  59A6               	subwfb	(auto_mount@maxclust+1)& (0+255),w,b
 13629  0012E4  A0D8               	btfss	status,0,c
 13630  0012E6  D002               	goto	l1236
 13631  0012E8                     u14620:
 13632                           
 13633                           ; BSR set to: 0
 13634                           ;tff.c: 725: return FR_NO_FILESYSTEM;
 13635  0012E8  0E0B               	movlw	11
 13636                           
 13637                           ; BSR set to: 0
 13638  0012EA  0012               	return	
 13639  0012EC                     l1236:
 13640                           
 13641                           ; BSR set to: 0
 13642                           ;tff.c: 732: fs->dirbase = fs->fatbase + fatsize;
 13643                           
 13644                           ; BSR set to: 0
 13645  0012EC  EE20 F008          	lfsr	2,8
 13646  0012F0  51B9               	movf	auto_mount@fs& (0+255),w,b
 13647  0012F2  26D9               	addwf	fsr2l,f,c
 13648  0012F4  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13649  0012F6  22DA               	addwfc	fsr2h,f,c
 13650  0012F8  CFDE F096          	movff	postinc2,??_auto_mount
 13651  0012FC  CFDE F097          	movff	postinc2,??_auto_mount+1
 13652  001300  CFDE F098          	movff	postinc2,??_auto_mount+2
 13653  001304  CFDE F099          	movff	postinc2,??_auto_mount+3
 13654  001308  51B5               	movf	auto_mount@fatsize& (0+255),w,b
 13655  00130A  2596               	addwf	??_auto_mount& (0+255),w,b
 13656  00130C  6F9A               	movwf	(??_auto_mount+4)& (0+255),b
 13657  00130E  51B6               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 13658  001310  2197               	addwfc	(??_auto_mount+1)& (0+255),w,b
 13659  001312  6F9B               	movwf	(??_auto_mount+5)& (0+255),b
 13660  001314  51B7               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 13661  001316  2198               	addwfc	(??_auto_mount+2)& (0+255),w,b
 13662  001318  6F9C               	movwf	(??_auto_mount+6)& (0+255),b
 13663  00131A  51B8               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 13664  00131C  2199               	addwfc	(??_auto_mount+3)& (0+255),w,b
 13665  00131E  6F9D               	movwf	(??_auto_mount+7)& (0+255),b
 13666  001320  EE20 F00C          	lfsr	2,12
 13667  001324  51B9               	movf	auto_mount@fs& (0+255),w,b
 13668  001326  26D9               	addwf	fsr2l,f,c
 13669  001328  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13670  00132A  22DA               	addwfc	fsr2h,f,c
 13671  00132C  C09A  FFDE         	movff	??_auto_mount+4,postinc2
 13672  001330  C09B  FFDE         	movff	??_auto_mount+5,postinc2
 13673  001334  C09C  FFDE         	movff	??_auto_mount+6,postinc2
 13674  001338  C09D  FFDE         	movff	??_auto_mount+7,postinc2
 13675                           
 13676                           ;tff.c: 733: fs->database = fs->fatbase + fatsize + fs->n_rootdir / 16;
 13677  00133C  EE20 F008          	lfsr	2,8
 13678  001340  51B9               	movf	auto_mount@fs& (0+255),w,b
 13679  001342  26D9               	addwf	fsr2l,f,c
 13680  001344  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13681  001346  22DA               	addwfc	fsr2h,f,c
 13682  001348  CFDE F096          	movff	postinc2,??_auto_mount
 13683  00134C  CFDE F097          	movff	postinc2,??_auto_mount+1
 13684  001350  CFDE F098          	movff	postinc2,??_auto_mount+2
 13685  001354  CFDE F099          	movff	postinc2,??_auto_mount+3
 13686  001358  EE20 F002          	lfsr	2,2
 13687  00135C  51B9               	movf	auto_mount@fs& (0+255),w,b
 13688  00135E  26D9               	addwf	fsr2l,f,c
 13689  001360  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13690  001362  22DA               	addwfc	fsr2h,f,c
 13691  001364  CFDE F09A          	movff	postinc2,??_auto_mount+4
 13692  001368  CFDD F09B          	movff	postdec2,??_auto_mount+5
 13693  00136C  0E04               	movlw	4
 13694  00136E  6F9C               	movwf	(??_auto_mount+6)& (0+255),b
 13695  001370                     u14635:
 13696  001370  90D8               	bcf	status,0,c
 13697  001372  339B               	rrcf	(??_auto_mount+5)& (0+255),f,b
 13698  001374  339A               	rrcf	(??_auto_mount+4)& (0+255),f,b
 13699  001376  2F9C               	decfsz	(??_auto_mount+6)& (0+255),f,b
 13700  001378  D7FB               	goto	u14635
 13701  00137A  519A               	movf	(??_auto_mount+4)& (0+255),w,b
 13702  00137C  2596               	addwf	??_auto_mount& (0+255),w,b
 13703  00137E  6F9D               	movwf	(??_auto_mount+7)& (0+255),b
 13704  001380  519B               	movf	(??_auto_mount+5)& (0+255),w,b
 13705  001382  2197               	addwfc	(??_auto_mount+1)& (0+255),w,b
 13706  001384  6F9E               	movwf	(??_auto_mount+8)& (0+255),b
 13707  001386  0E00               	movlw	0
 13708  001388  2198               	addwfc	(??_auto_mount+2)& (0+255),w,b
 13709  00138A  6F9F               	movwf	(??_auto_mount+9)& (0+255),b
 13710  00138C  0E00               	movlw	0
 13711  00138E  2199               	addwfc	(??_auto_mount+3)& (0+255),w,b
 13712  001390  6FA0               	movwf	(??_auto_mount+10)& (0+255),b
 13713  001392  51B5               	movf	auto_mount@fatsize& (0+255),w,b
 13714  001394  259D               	addwf	(??_auto_mount+7)& (0+255),w,b
 13715  001396  6FA1               	movwf	(??_auto_mount+11)& (0+255),b
 13716  001398  51B6               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 13717  00139A  219E               	addwfc	(??_auto_mount+8)& (0+255),w,b
 13718  00139C  6FA2               	movwf	(??_auto_mount+12)& (0+255),b
 13719  00139E  51B7               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 13720  0013A0  219F               	addwfc	(??_auto_mount+9)& (0+255),w,b
 13721  0013A2  6FA3               	movwf	(??_auto_mount+13)& (0+255),b
 13722  0013A4  51B8               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 13723  0013A6  21A0               	addwfc	(??_auto_mount+10)& (0+255),w,b
 13724  0013A8  6FA4               	movwf	(??_auto_mount+14)& (0+255),b
 13725  0013AA  EE20 F010          	lfsr	2,16
 13726  0013AE  51B9               	movf	auto_mount@fs& (0+255),w,b
 13727  0013B0  26D9               	addwf	fsr2l,f,c
 13728  0013B2  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13729  0013B4  22DA               	addwfc	fsr2h,f,c
 13730  0013B6  C0A1  FFDE         	movff	??_auto_mount+11,postinc2
 13731  0013BA  C0A2  FFDE         	movff	??_auto_mount+12,postinc2
 13732  0013BE  C0A3  FFDE         	movff	??_auto_mount+13,postinc2
 13733  0013C2  C0A4  FFDE         	movff	??_auto_mount+14,postinc2
 13734                           
 13735                           ;tff.c: 737: fs->free_clust = (CLUST)0xFFFFFFFF;
 13736  0013C6  EE20 F01A          	lfsr	2,26
 13737  0013CA  51B9               	movf	auto_mount@fs& (0+255),w,b
 13738  0013CC  26D9               	addwf	fsr2l,f,c
 13739  0013CE  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13740  0013D0  22DA               	addwfc	fsr2h,f,c
 13741  0013D2  0EFF               	movlw	255
 13742  0013D4  6EDE               	movwf	postinc2,c
 13743  0013D6  0EFF               	movlw	255
 13744  0013D8  6EDD               	movwf	postdec2,c
 13745                           
 13746                           ;tff.c: 753: fs->fs_type = fmt;
 13747  0013DA  EE20 F01C          	lfsr	2,28
 13748  0013DE  51B9               	movf	auto_mount@fs& (0+255),w,b
 13749  0013E0  26D9               	addwf	fsr2l,f,c
 13750  0013E2  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 13751  0013E4  22DA               	addwfc	fsr2h,f,c
 13752  0013E6  C0B3  FFDF         	movff	auto_mount@fmt,indf2
 13753                           
 13754                           ; BSR set to: 0
 13755                           ;tff.c: 754: fs->id = ++fsid;
 13756  0013EA  4BF8               	infsnz	_fsid& (0+255),f,b
 13757  0013EC  2BF9               	incf	(_fsid+1)& (0+255),f,b
 13758  0013EE  C0B9  FFD9         	movff	auto_mount@fs,fsr2l
 13759  0013F2  C0BA  FFDA         	movff	auto_mount@fs+1,fsr2h
 13760  0013F6  C0F8  FFDE         	movff	_fsid,postinc2
 13761  0013FA  C0F9  FFDD         	movff	_fsid+1,postdec2
 13762                           
 13763                           ;tff.c: 755: return FR_OK;
 13764  0013FE  0E00               	movlw	0
 13765  001400  0012               	return	
 13766  001402                     __end_of_auto_mount:
 13767                           	opt stack 0
 13768                           tosu	equ	0xFFF
 13769                           tosh	equ	0xFFE
 13770                           tosl	equ	0xFFD
 13771                           pclath	equ	0xFFA
 13772                           tblptru	equ	0xFF8
 13773                           tblptrh	equ	0xFF7
 13774                           tblptrl	equ	0xFF6
 13775                           tablat	equ	0xFF5
 13776                           prodh	equ	0xFF4
 13777                           prodl	equ	0xFF3
 13778                           intcon	equ	0xFF2
 13779                           intcon2	equ	0xFF1
 13780                           intcon3	equ	0xFF0
 13781                           indf0	equ	0xFEF
 13782                           postinc0	equ	0xFEE
 13783                           fsr0h	equ	0xFEA
 13784                           fsr0l	equ	0xFE9
 13785                           wreg	equ	0xFE8
 13786                           indf1	equ	0xFE7
 13787                           postinc1	equ	0xFE6
 13788                           postdec1	equ	0xFE5
 13789                           plusw1	equ	0xFE3
 13790                           fsr1h	equ	0xFE2
 13791                           fsr1l	equ	0xFE1
 13792                           indf2	equ	0xFDF
 13793                           postinc2	equ	0xFDE
 13794                           postdec2	equ	0xFDD
 13795                           plusw2	equ	0xFDB
 13796                           fsr2h	equ	0xFDA
 13797                           fsr2l	equ	0xFD9
 13798                           status	equ	0xFD8
 13799                           
 13800 ;; *************** function _memset *****************
 13801 ;; Defined at:
 13802 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 13803 ;; Parameters:    Size  Location     Type
 13804 ;;  p1              2    0[BANK0 ] PTR void 
 13805 ;;		 -> f_opendir@fn(12), f_open@fn(12), NULL(0), fs(544), 
 13806 ;;  c               2    2[BANK0 ] int 
 13807 ;;  n               2    4[BANK0 ] unsigned int 
 13808 ;; Auto vars:     Size  Location     Type
 13809 ;;  p               2    6[BANK0 ] PTR unsigned char 
 13810 ;;		 -> f_opendir@fn(12), f_open@fn(12), NULL(0), fs(544), 
 13811 ;; Return value:  Size  Location     Type
 13812 ;;                  2    0[BANK0 ] PTR void 
 13813 ;; Registers used:
 13814 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13815 ;; Tracked objects:
 13816 ;;		On entry : 0/0
 13817 ;;		On exit  : 0/0
 13818 ;;		Unchanged: 0/0
 13819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13820 ;;      Params:         0       6       0       0       0       0       0       0       0
 13821 ;;      Locals:         0       2       0       0       0       0       0       0       0
 13822 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13823 ;;      Totals:         0       8       0       0       0       0       0       0       0
 13824 ;;Total ram usage:        8 bytes
 13825 ;; Hardware stack levels used:    1
 13826 ;; Hardware stack levels required when called:    3
 13827 ;; This function calls:
 13828 ;;		Nothing
 13829 ;; This function is called by:
 13830 ;;		_make_dirfile
 13831 ;;		_reserve_direntry
 13832 ;;		_auto_mount
 13833 ;;		_f_open
 13834 ;; This function uses a non-reentrant model
 13835 ;;
 13836                           
 13837                           	psect	text45
 13838  0054C6                     __ptext45:
 13839                           	opt stack 0
 13840  0054C6                     _memset:
 13841                           	opt stack 21
 13842                           
 13843                           ; BSR set to: 0
 13844                           ;incstack = 0
 13845  0054C6  C060  F066         	movff	memset@p1,memset@p
 13846  0054CA  C061  F067         	movff	memset@p1+1,memset@p+1
 13847  0054CE  D009               	goto	l1970
 13848  0054D0                     l10324:
 13849  0054D0  C066  FFD9         	movff	memset@p,fsr2l
 13850  0054D4  C067  FFDA         	movff	memset@p+1,fsr2h
 13851  0054D8  C062  FFDF         	movff	memset@c,indf2
 13852  0054DC  0100               	movlb	0	; () banked
 13853  0054DE  4B66               	infsnz	memset@p& (0+255),f,b
 13854  0054E0  2B67               	incf	(memset@p+1)& (0+255),f,b
 13855  0054E2                     l1970:
 13856                           
 13857                           ; BSR set to: 0
 13858  0054E2  0100               	movlb	0	; () banked
 13859  0054E4  0764               	decf	memset@n& (0+255),f,b
 13860  0054E6  A0D8               	btfss	status,0,c
 13861  0054E8  0765               	decf	(memset@n+1)& (0+255),f,b
 13862  0054EA  2964               	incf	memset@n& (0+255),w,b
 13863  0054EC  E1F1               	bnz	l10324
 13864  0054EE  2965               	incf	(memset@n+1)& (0+255),w,b
 13865  0054F0  B4D8               	btfsc	status,2,c
 13866  0054F2  0012               	return	
 13867  0054F4  D7ED               	goto	l1971
 13868  0054F6                     __end_of_memset:
 13869                           	opt stack 0
 13870                           tosu	equ	0xFFF
 13871                           tosh	equ	0xFFE
 13872                           tosl	equ	0xFFD
 13873                           pclath	equ	0xFFA
 13874                           tblptru	equ	0xFF8
 13875                           tblptrh	equ	0xFF7
 13876                           tblptrl	equ	0xFF6
 13877                           tablat	equ	0xFF5
 13878                           prodh	equ	0xFF4
 13879                           prodl	equ	0xFF3
 13880                           intcon	equ	0xFF2
 13881                           intcon2	equ	0xFF1
 13882                           intcon3	equ	0xFF0
 13883                           indf0	equ	0xFEF
 13884                           postinc0	equ	0xFEE
 13885                           fsr0h	equ	0xFEA
 13886                           fsr0l	equ	0xFE9
 13887                           wreg	equ	0xFE8
 13888                           indf1	equ	0xFE7
 13889                           postinc1	equ	0xFE6
 13890                           postdec1	equ	0xFE5
 13891                           plusw1	equ	0xFE3
 13892                           fsr1h	equ	0xFE2
 13893                           fsr1l	equ	0xFE1
 13894                           indf2	equ	0xFDF
 13895                           postinc2	equ	0xFDE
 13896                           postdec2	equ	0xFDD
 13897                           plusw2	equ	0xFDB
 13898                           fsr2h	equ	0xFDA
 13899                           fsr2l	equ	0xFD9
 13900                           status	equ	0xFD8
 13901                           
 13902 ;; *************** function _disk_initialize *****************
 13903 ;; Defined at:
 13904 ;;		line 59 in file "bibliotecas/diskio.c"
 13905 ;; Parameters:    Size  Location     Type
 13906 ;;  pdrv            1    wreg     unsigned char 
 13907 ;; Auto vars:     Size  Location     Type
 13908 ;;  pdrv            1   32[BANK0 ] unsigned char 
 13909 ;;  result          2    0        int 
 13910 ;;  stat            1   33[BANK0 ] unsigned char 
 13911 ;; Return value:  Size  Location     Type
 13912 ;;                  1    wreg      unsigned char 
 13913 ;; Registers used:
 13914 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13915 ;; Tracked objects:
 13916 ;;		On entry : 0/0
 13917 ;;		On exit  : 0/0
 13918 ;;		Unchanged: 0/0
 13919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13920 ;;      Params:         0       0       0       0       0       0       0       0       0
 13921 ;;      Locals:         0       2       0       0       0       0       0       0       0
 13922 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13923 ;;      Totals:         0       2       0       0       0       0       0       0       0
 13924 ;;Total ram usage:        2 bytes
 13925 ;; Hardware stack levels used:    1
 13926 ;; Hardware stack levels required when called:    8
 13927 ;; This function calls:
 13928 ;;		_sdc_disk_initialize
 13929 ;; This function is called by:
 13930 ;;		_auto_mount
 13931 ;; This function uses a non-reentrant model
 13932 ;;
 13933                           
 13934                           	psect	text46
 13935  00541C                     __ptext46:
 13936                           	opt stack 0
 13937  00541C                     _disk_initialize:
 13938                           	opt stack 17
 13939                           
 13940                           ; BSR set to: 0
 13941                           ;incstack = 0
 13942                           ;disk_initialize@pdrv stored from wreg
 13943  00541C  0100               	movlb	0	; () banked
 13944  00541E  6F80               	movwf	disk_initialize@pdrv& (0+255),b
 13945                           
 13946                           ;diskio.c: 63: DSTATUS stat;
 13947                           ;diskio.c: 64: int result;
 13948                           ;diskio.c: 66: switch (pdrv) {
 13949  005420  D00E               	goto	l529
 13950  005422                     
 13951                           ;diskio.c: 68: stat = sdc_disk_initialize();
 13952  005422  EC00  F010         	call	_sdc_disk_initialize	;wreg free
 13953  005426  0100               	movlb	0	; () banked
 13954  005428  6F81               	movwf	disk_initialize@stat& (0+255),b
 13955                           
 13956                           ; BSR set to: 0
 13957                           ;diskio.c: 72: return stat;
 13958  00542A  5181               	movf	disk_initialize@stat& (0+255),w,b
 13959                           
 13960                           ; BSR set to: 0
 13961  00542C  0012               	return	
 13962  00542E                     
 13963                           ; BSR set to: 0
 13964                           ;diskio.c: 75: stat = sdc_disk_initialize();
 13965                           
 13966                           ; BSR set to: 0
 13967  00542E  EC00  F010         	call	_sdc_disk_initialize	;wreg free
 13968  005432  0100               	movlb	0	; () banked
 13969  005434  6F81               	movwf	disk_initialize@stat& (0+255),b
 13970                           
 13971                           ; BSR set to: 0
 13972                           ;diskio.c: 79: return stat;
 13973  005436  5181               	movf	disk_initialize@stat& (0+255),w,b
 13974                           
 13975                           ; BSR set to: 0
 13976  005438  0012               	return	
 13977  00543A                     
 13978                           ; BSR set to: 0
 13979                           ;diskio.c: 86: return stat;
 13980                           
 13981                           ; BSR set to: 0
 13982  00543A  5181               	movf	disk_initialize@stat& (0+255),w,b
 13983                           
 13984                           ; BSR set to: 0
 13985  00543C  0012               	return	
 13986  00543E                     l529:
 13987                           
 13988                           ; BSR set to: 0
 13989  00543E  0100               	movlb	0	; () banked
 13990  005440  5180               	movf	disk_initialize@pdrv& (0+255),w,b
 13991                           
 13992                           ; Switch size 1, requested type "space"
 13993                           ; Number of cases is 3, Range of values is 0 to 2
 13994                           ; switch strategies available:
 13995                           ; Name         Instructions Cycles
 13996                           ; simple_byte           10     6 (average)
 13997                           ;	Chosen strategy is simple_byte
 13998  005442  0A00               	xorlw	0	; case 0
 13999  005444  B4D8               	btfsc	status,2,c
 14000  005446  D7ED               	goto	l530
 14001  005448  0A01               	xorlw	1	; case 1
 14002  00544A  B4D8               	btfsc	status,2,c
 14003  00544C  D7F0               	goto	l532
 14004  00544E  0A03               	xorlw	3	; case 2
 14005  005450  B4D8               	btfsc	status,2,c
 14006  005452  D7F3               	goto	l533
 14007                           
 14008                           ; BSR set to: 0
 14009                           ;diskio.c: 88: return 0x01;
 14010                           
 14011                           ; BSR set to: 0
 14012  005454  0E01               	movlw	1
 14013  005456  0012               	return	
 14014  005458                     __end_of_disk_initialize:
 14015                           	opt stack 0
 14016                           tosu	equ	0xFFF
 14017                           tosh	equ	0xFFE
 14018                           tosl	equ	0xFFD
 14019                           pclath	equ	0xFFA
 14020                           tblptru	equ	0xFF8
 14021                           tblptrh	equ	0xFF7
 14022                           tblptrl	equ	0xFF6
 14023                           tablat	equ	0xFF5
 14024                           prodh	equ	0xFF4
 14025                           prodl	equ	0xFF3
 14026                           intcon	equ	0xFF2
 14027                           intcon2	equ	0xFF1
 14028                           intcon3	equ	0xFF0
 14029                           indf0	equ	0xFEF
 14030                           postinc0	equ	0xFEE
 14031                           fsr0h	equ	0xFEA
 14032                           fsr0l	equ	0xFE9
 14033                           wreg	equ	0xFE8
 14034                           indf1	equ	0xFE7
 14035                           postinc1	equ	0xFE6
 14036                           postdec1	equ	0xFE5
 14037                           plusw1	equ	0xFE3
 14038                           fsr1h	equ	0xFE2
 14039                           fsr1l	equ	0xFE1
 14040                           indf2	equ	0xFDF
 14041                           postinc2	equ	0xFDE
 14042                           postdec2	equ	0xFDD
 14043                           plusw2	equ	0xFDB
 14044                           fsr2h	equ	0xFDA
 14045                           fsr2l	equ	0xFD9
 14046                           status	equ	0xFD8
 14047                           
 14048 ;; *************** function _sdc_disk_initialize *****************
 14049 ;; Defined at:
 14050 ;;		line 275 in file "bibliotecas/diskio.c"
 14051 ;; Parameters:    Size  Location     Type
 14052 ;;		None
 14053 ;; Auto vars:     Size  Location     Type
 14054 ;;  count2          2   29[BANK0 ] int 
 14055 ;;  crc_number      2   25[BANK0 ] int 
 14056 ;;  count1          2   23[BANK0 ] int 
 14057 ;;  i               2   20[BANK0 ] int 
 14058 ;;  buff            1   31[BANK0 ] unsigned char 
 14059 ;;  ocr             1   28[BANK0 ] unsigned char 
 14060 ;;  buff_i          1   27[BANK0 ] unsigned char 
 14061 ;;  stat            1   22[BANK0 ] unsigned char 
 14062 ;; Return value:  Size  Location     Type
 14063 ;;                  1    wreg      unsigned char 
 14064 ;; Registers used:
 14065 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14066 ;; Tracked objects:
 14067 ;;		On entry : 0/0
 14068 ;;		On exit  : 0/0
 14069 ;;		Unchanged: 0/0
 14070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14071 ;;      Params:         0       0       0       0       0       0       0       0       0
 14072 ;;      Locals:         0      12       0       0       0       0       0       0       0
 14073 ;;      Temps:          0       1       0       0       0       0       0       0       0
 14074 ;;      Totals:         0      13       0       0       0       0       0       0       0
 14075 ;;Total ram usage:       13 bytes
 14076 ;; Hardware stack levels used:    1
 14077 ;; Hardware stack levels required when called:    7
 14078 ;; This function calls:
 14079 ;;		_command
 14080 ;;		_dummy_clocks
 14081 ;;		_escreve_frase_ram_lcd
 14082 ;;		_posicao_cursor_lcd
 14083 ;;		_proceed
 14084 ;;		_response
 14085 ;;		_sdc_reset
 14086 ;; This function is called by:
 14087 ;;		_disk_initialize
 14088 ;; This function uses a non-reentrant model
 14089 ;;
 14090                           
 14091                           	psect	text47
 14092  002000                     __ptext47:
 14093                           	opt stack 0
 14094  002000                     _sdc_disk_initialize:
 14095                           	opt stack 17
 14096                           
 14097                           ;diskio.c: 277: BYTE ocr;
 14098                           ;diskio.c: 278: DSTATUS stat;
 14099                           ;diskio.c: 279: int i = 0, count1 = 0, count2 = 0;
 14100                           
 14101                           ; BSR set to: 0
 14102                           ;incstack = 0
 14103  002000  0E00               	movlw	0
 14104  002002  0100               	movlb	0	; () banked
 14105  002004  6F75               	movwf	(sdc_disk_initialize@i+1)& (0+255),b
 14106  002006  0E00               	movlw	0
 14107  002008  6F74               	movwf	sdc_disk_initialize@i& (0+255),b
 14108  00200A  0E00               	movlw	0
 14109  00200C  6F78               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 14110  00200E  0E00               	movlw	0
 14111  002010  6F77               	movwf	sdc_disk_initialize@count1& (0+255),b
 14112  002012  0E00               	movlw	0
 14113  002014  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 14114  002016  0E00               	movlw	0
 14115  002018  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 14116                           
 14117                           ;diskio.c: 280: BYTE buff = 0;
 14118  00201A  0E00               	movlw	0
 14119  00201C  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 14120                           
 14121                           ; BSR set to: 0
 14122                           ;diskio.c: 281: BYTE buff_i;
 14123                           ;diskio.c: 282: int crc_number;
 14124                           ;diskio.c: 283: _delay((unsigned long)((1)*(48000000/4000.0)));
 14125  00201E  0E10               	movlw	16
 14126  002020  0100               	movlb	0	; () banked
 14127  002022  6F73               	movwf	??_sdc_disk_initialize& (0+255),b
 14128  002024  0E94               	movlw	148
 14129  002026                     u17347:
 14130  002026  2EE8               	decfsz	wreg,f,c
 14131  002028  D7FE               	bra	u17347
 14132  00202A  2F73               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 14133  00202C  D7FC               	bra	u17347
 14134  00202E  F000               	nop	
 14135                           
 14136                           ;diskio.c: 284: dummy_clocks(100);
 14137  002030  0E64               	movlw	100
 14138  002032  EC8C  F029         	call	_dummy_clocks
 14139                           
 14140                           ;diskio.c: 287: sdc_reset();
 14141  002036  EC50  F023         	call	_sdc_reset	;wreg free
 14142                           
 14143                           ;diskio.c: 288: command(0X48, 0x000001AA, 0x87);
 14144  00203A  0EAA               	movlw	170
 14145  00203C  0100               	movlb	0	; () banked
 14146  00203E  6F65               	movwf	command@arg& (0+255),b
 14147  002040  0E01               	movlw	1
 14148  002042  6F66               	movwf	(command@arg+1)& (0+255),b
 14149  002044  0E00               	movlw	0
 14150  002046  6F67               	movwf	(command@arg+2)& (0+255),b
 14151  002048  0E00               	movlw	0
 14152  00204A  6F68               	movwf	(command@arg+3)& (0+255),b
 14153  00204C  0E87               	movlw	135
 14154  00204E  6F69               	movwf	command@CRC& (0+255),b
 14155  002050  0E48               	movlw	72
 14156  002052  EC00  F027         	call	_command
 14157                           
 14158                           ;diskio.c: 289: proceed();
 14159  002056  ECA7  F02B         	call	_proceed	;wreg free
 14160  00205A                     
 14161                           ;diskio.c: 291: buff_i = response();
 14162  00205A  EC8D  F02B         	call	_response	;wreg free
 14163  00205E  0100               	movlb	0	; () banked
 14164  002060  6F7B               	movwf	sdc_disk_initialize@buff_i& (0+255),b
 14165                           
 14166                           ; BSR set to: 0
 14167                           ;diskio.c: 292: if(buff_i == 1)
 14168  002062  057B               	decf	sdc_disk_initialize@buff_i& (0+255),w,b
 14169  002064  A4D8               	btfss	status,2,c
 14170  002066  D004               	goto	l572
 14171                           
 14172                           ; BSR set to: 0
 14173                           ;diskio.c: 293: {
 14174                           ;diskio.c: 294: crc_number = buff_i<<8;
 14175  002068  517B               	movf	sdc_disk_initialize@buff_i& (0+255),w,b
 14176  00206A  6F7A               	movwf	(sdc_disk_initialize@crc_number+1)& (0+255),b
 14177  00206C  6B79               	clrf	sdc_disk_initialize@crc_number& (0+255),b
 14178                           
 14179                           ;diskio.c: 295: }
 14180  00206E  D006               	goto	l574
 14181  002070                     l572:
 14182                           
 14183                           ; BSR set to: 0
 14184                           ;diskio.c: 296: else if(buff_i==0xAA)
 14185                           
 14186                           ; BSR set to: 0
 14187  002070  0EAA               	movlw	170
 14188  002072  197B               	xorwf	sdc_disk_initialize@buff_i& (0+255),w,b
 14189  002074  A4D8               	btfss	status,2,c
 14190  002076  D002               	goto	l574
 14191                           
 14192                           ; BSR set to: 0
 14193                           ;diskio.c: 297: {
 14194                           ;diskio.c: 298: crc_number |= buff_i;
 14195  002078  517B               	movf	sdc_disk_initialize@buff_i& (0+255),w,b
 14196  00207A  1379               	iorwf	sdc_disk_initialize@crc_number& (0+255),f,b
 14197  00207C                     l574:
 14198                           
 14199                           ; BSR set to: 0
 14200                           ;diskio.c: 299: }
 14201                           ;diskio.c: 300: count1++;
 14202                           
 14203                           ; BSR set to: 0
 14204                           
 14205                           ; BSR set to: 0
 14206  00207C  4B77               	infsnz	sdc_disk_initialize@count1& (0+255),f,b
 14207  00207E  2B78               	incf	(sdc_disk_initialize@count1+1)& (0+255),f,b
 14208                           
 14209                           ; BSR set to: 0
 14210                           ;diskio.c: 301: }while(crc_number != 0x1AA && count1<1000);
 14211  002080  0EAA               	movlw	170
 14212  002082  1979               	xorwf	sdc_disk_initialize@crc_number& (0+255),w,b
 14213  002084  E103               	bnz	u12920
 14214  002086  057A               	decf	(sdc_disk_initialize@crc_number+1)& (0+255),w,b
 14215  002088  B4D8               	btfsc	status,2,c
 14216  00208A  D008               	goto	u12930
 14217  00208C                     u12920:
 14218                           
 14219                           ; BSR set to: 0
 14220  00208C  BF78               	btfsc	(sdc_disk_initialize@count1+1)& (0+255),7,b
 14221  00208E  D7E5               	goto	l571
 14222  002090  0EE8               	movlw	232
 14223  002092  5D77               	subwf	sdc_disk_initialize@count1& (0+255),w,b
 14224  002094  0E03               	movlw	3
 14225  002096  5978               	subwfb	(sdc_disk_initialize@count1+1)& (0+255),w,b
 14226  002098  A0D8               	btfss	status,0,c
 14227  00209A  D7DF               	goto	l571
 14228  00209C                     u12930:
 14229                           
 14230                           ; BSR set to: 0
 14231                           ;diskio.c: 306: if (crc_number == 0x1AA)
 14232                           
 14233                           ; BSR set to: 0
 14234                           
 14235                           ; BSR set to: 0
 14236  00209C  0EAA               	movlw	170
 14237  00209E  1979               	xorwf	sdc_disk_initialize@crc_number& (0+255),w,b
 14238  0020A0  E102               	bnz	u12941
 14239  0020A2  057A               	decf	(sdc_disk_initialize@crc_number+1)& (0+255),w,b
 14240  0020A4  A4D8               	btfss	status,2,c
 14241  0020A6                     u12941:
 14242  0020A6  D0B1               	goto	l578
 14243                           
 14244                           ; BSR set to: 0
 14245                           ;diskio.c: 307: {
 14246                           ;diskio.c: 308: count1 = 0;
 14247  0020A8  0E00               	movlw	0
 14248  0020AA  6F78               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 14249  0020AC  0E00               	movlw	0
 14250  0020AE  6F77               	movwf	sdc_disk_initialize@count1& (0+255),b
 14251  0020B0                     l579:
 14252                           
 14253                           ; BSR set to: 0
 14254                           ;diskio.c: 310: count2 = 0;
 14255  0020B0  0E00               	movlw	0
 14256  0020B2  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 14257  0020B4  0E00               	movlw	0
 14258  0020B6  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 14259                           
 14260                           ; BSR set to: 0
 14261                           ;diskio.c: 311: buff = 0XFF;
 14262  0020B8  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 14263  0020BA                     
 14264                           ; BSR set to: 0
 14265                           ;diskio.c: 319: dummy_clocks(10);
 14266                           
 14267                           ; BSR set to: 0
 14268  0020BA  0E0A               	movlw	10
 14269  0020BC  EC8C  F029         	call	_dummy_clocks
 14270                           
 14271                           ;diskio.c: 320: command(0X77, 0X00000000, 0X00);
 14272  0020C0  0E00               	movlw	0
 14273  0020C2  0100               	movlb	0	; () banked
 14274  0020C4  6F65               	movwf	command@arg& (0+255),b
 14275  0020C6  0E00               	movlw	0
 14276  0020C8  6F66               	movwf	(command@arg+1)& (0+255),b
 14277  0020CA  0E00               	movlw	0
 14278  0020CC  6F67               	movwf	(command@arg+2)& (0+255),b
 14279  0020CE  0E00               	movlw	0
 14280  0020D0  6F68               	movwf	(command@arg+3)& (0+255),b
 14281  0020D2  0E00               	movlw	0
 14282  0020D4  6F69               	movwf	command@CRC& (0+255),b
 14283  0020D6  0E77               	movlw	119
 14284  0020D8  EC00  F027         	call	_command
 14285                           
 14286                           ;diskio.c: 321: buff = 0XFF;
 14287  0020DC  0100               	movlb	0	; () banked
 14288  0020DE  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 14289                           
 14290                           ; BSR set to: 0
 14291                           ;diskio.c: 323: proceed();
 14292  0020E0  ECA7  F02B         	call	_proceed	;wreg free
 14293  0020E4                     
 14294                           ;diskio.c: 325: buff = response();
 14295  0020E4  EC8D  F02B         	call	_response	;wreg free
 14296  0020E8  0100               	movlb	0	; () banked
 14297  0020EA  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 14298                           
 14299                           ; BSR set to: 0
 14300                           ;diskio.c: 326: count2++;
 14301  0020EC  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 14302  0020EE  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 14303                           
 14304                           ;diskio.c: 327: }while((buff!=0X01)&&(count2<10));
 14305  0020F0  057F               	decf	sdc_disk_initialize@buff& (0+255),w,b
 14306  0020F2  B4D8               	btfsc	status,2,c
 14307  0020F4  D008               	goto	u12960
 14308                           
 14309                           ; BSR set to: 0
 14310  0020F6  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 14311  0020F8  D7F5               	goto	l581
 14312  0020FA  517E               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 14313  0020FC  E104               	bnz	l10196
 14314  0020FE  0E0A               	movlw	10
 14315  002100  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 14316  002102  A0D8               	btfss	status,0,c
 14317  002104  D7EF               	goto	l581
 14318  002106                     u12960:
 14319  002106                     l10196:
 14320                           
 14321                           ; BSR set to: 0
 14322                           ;diskio.c: 328: count2 = 0;
 14323  002106  0E00               	movlw	0
 14324  002108  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 14325  00210A  0E00               	movlw	0
 14326  00210C  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 14327                           
 14328                           ; BSR set to: 0
 14329                           ;diskio.c: 332: dummy_clocks(10);
 14330  00210E  0E0A               	movlw	10
 14331  002110  EC8C  F029         	call	_dummy_clocks
 14332                           
 14333                           ;diskio.c: 333: command(0X69, 0X40000000 , 0x00);
 14334  002114  0E00               	movlw	0
 14335  002116  0100               	movlb	0	; () banked
 14336  002118  6F65               	movwf	command@arg& (0+255),b
 14337  00211A  0E00               	movlw	0
 14338  00211C  6F66               	movwf	(command@arg+1)& (0+255),b
 14339  00211E  0E00               	movlw	0
 14340  002120  6F67               	movwf	(command@arg+2)& (0+255),b
 14341  002122  0E40               	movlw	64
 14342  002124  6F68               	movwf	(command@arg+3)& (0+255),b
 14343  002126  0E00               	movlw	0
 14344  002128  6F69               	movwf	command@CRC& (0+255),b
 14345  00212A  0E69               	movlw	105
 14346  00212C  EC00  F027         	call	_command
 14347                           
 14348                           ;diskio.c: 334: proceed();
 14349  002130  ECA7  F02B         	call	_proceed	;wreg free
 14350                           
 14351                           ;diskio.c: 335: buff = response();
 14352  002134  EC8D  F02B         	call	_response	;wreg free
 14353  002138  0100               	movlb	0	; () banked
 14354  00213A  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 14355                           
 14356                           ; BSR set to: 0
 14357                           ;diskio.c: 336: count2++;
 14358  00213C  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 14359  00213E  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 14360                           
 14361                           ; BSR set to: 0
 14362                           ;diskio.c: 337: }while(buff!=0X00);
 14363  002140  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 14364  002142  A4D8               	btfss	status,2,c
 14365  002144  D7BA               	goto	l580
 14366                           
 14367                           ; BSR set to: 0
 14368                           ;diskio.c: 339: buff = 0xFF;
 14369  002146  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 14370                           
 14371                           ; BSR set to: 0
 14372                           ;diskio.c: 342: dummy_clocks(10);
 14373  002148  0E0A               	movlw	10
 14374  00214A  EC8C  F029         	call	_dummy_clocks
 14375                           
 14376                           ;diskio.c: 343: command(0X7A, 0X00000000, 0XFF);
 14377  00214E  0E00               	movlw	0
 14378  002150  0100               	movlb	0	; () banked
 14379  002152  6F65               	movwf	command@arg& (0+255),b
 14380  002154  0E00               	movlw	0
 14381  002156  6F66               	movwf	(command@arg+1)& (0+255),b
 14382  002158  0E00               	movlw	0
 14383  00215A  6F67               	movwf	(command@arg+2)& (0+255),b
 14384  00215C  0E00               	movlw	0
 14385  00215E  6F68               	movwf	(command@arg+3)& (0+255),b
 14386  002160  0EFF               	movlw	255
 14387  002162  6F69               	movwf	command@CRC& (0+255),b
 14388  002164  0E7A               	movlw	122
 14389  002166  EC00  F027         	call	_command
 14390                           
 14391                           ;diskio.c: 344: proceed();
 14392  00216A  ECA7  F02B         	call	_proceed	;wreg free
 14393  00216E                     
 14394                           ;diskio.c: 346: buff = response();
 14395  00216E  EC8D  F02B         	call	_response	;wreg free
 14396  002172  0100               	movlb	0	; () banked
 14397  002174  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 14398                           
 14399                           ; BSR set to: 0
 14400                           ;diskio.c: 347: ocr = (buff << 1) & 0b10000000;
 14401  002176  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 14402  002178  257F               	addwf	sdc_disk_initialize@buff& (0+255),w,b
 14403  00217A  0B80               	andlw	128
 14404  00217C  6F7C               	movwf	sdc_disk_initialize@ocr& (0+255),b
 14405                           
 14406                           ; BSR set to: 0
 14407                           ;diskio.c: 348: count2++;
 14408  00217E  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 14409  002180  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 14410                           
 14411                           ; BSR set to: 0
 14412                           ;diskio.c: 349: }while(ocr!=0X00 && ocr != 0x01 && count2<10);
 14413  002182  517C               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 14414  002184  B4D8               	btfsc	status,2,c
 14415  002186  D00B               	goto	u13000
 14416                           
 14417                           ; BSR set to: 0
 14418  002188  057C               	decf	sdc_disk_initialize@ocr& (0+255),w,b
 14419  00218A  B4D8               	btfsc	status,2,c
 14420  00218C  D008               	goto	u13000
 14421                           
 14422                           ; BSR set to: 0
 14423  00218E  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 14424  002190  D7EE               	goto	l586
 14425  002192  517E               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 14426  002194  E104               	bnz	l10226
 14427  002196  0E0A               	movlw	10
 14428  002198  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 14429  00219A  A0D8               	btfss	status,0,c
 14430  00219C  D7E8               	goto	l586
 14431  00219E                     u13000:
 14432  00219E                     l10226:
 14433                           
 14434                           ; BSR set to: 0
 14435                           ;diskio.c: 350: }while(ocr != 0X00 && ocr !=0x01);
 14436  00219E  517C               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 14437  0021A0  B4D8               	btfsc	status,2,c
 14438  0021A2  D003               	goto	u13020
 14439                           
 14440                           ; BSR set to: 0
 14441  0021A4  057C               	decf	sdc_disk_initialize@ocr& (0+255),w,b
 14442  0021A6  A4D8               	btfss	status,2,c
 14443  0021A8  D783               	goto	l579
 14444  0021AA                     u13020:
 14445                           
 14446                           ; BSR set to: 0
 14447                           ;diskio.c: 353: count1 = 0;
 14448                           
 14449                           ; BSR set to: 0
 14450                           
 14451                           ; BSR set to: 0
 14452  0021AA  0E00               	movlw	0
 14453  0021AC  6F78               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 14454  0021AE  0E00               	movlw	0
 14455  0021B0  6F77               	movwf	sdc_disk_initialize@count1& (0+255),b
 14456                           
 14457                           ; BSR set to: 0
 14458                           ;diskio.c: 355: _delay((unsigned long)((1)*(48000000/4000.0)));
 14459  0021B2  0E10               	movlw	16
 14460  0021B4  0100               	movlb	0	; () banked
 14461  0021B6  6F73               	movwf	??_sdc_disk_initialize& (0+255),b
 14462  0021B8  0E94               	movlw	148
 14463  0021BA                     u17357:
 14464  0021BA  2EE8               	decfsz	wreg,f,c
 14465  0021BC  D7FE               	bra	u17357
 14466  0021BE  2F73               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 14467  0021C0  D7FC               	bra	u17357
 14468  0021C2  F000               	nop	
 14469                           
 14470                           ;diskio.c: 356: stat = 0X00;
 14471  0021C4  0E00               	movlw	0
 14472  0021C6  0100               	movlb	0	; () banked
 14473  0021C8  6F76               	movwf	sdc_disk_initialize@stat& (0+255),b
 14474                           
 14475                           ; BSR set to: 0
 14476                           ;diskio.c: 358: if(!ocr)
 14477  0021CA  517C               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 14478  0021CC  A4D8               	btfss	status,2,c
 14479  0021CE  D0B9               	goto	u13120
 14480                           
 14481                           ; BSR set to: 0
 14482                           ;diskio.c: 359: {
 14483                           ;diskio.c: 361: dummy_clocks(10);
 14484  0021D0  0E0A               	movlw	10
 14485  0021D2  EC8C  F029         	call	_dummy_clocks
 14486                           
 14487                           ;diskio.c: 362: command(0x50, 0x00000200,0XFF);
 14488  0021D6  0E00               	movlw	0
 14489  0021D8  0100               	movlb	0	; () banked
 14490  0021DA  6F65               	movwf	command@arg& (0+255),b
 14491  0021DC  0E02               	movlw	2
 14492  0021DE  6F66               	movwf	(command@arg+1)& (0+255),b
 14493  0021E0  0E00               	movlw	0
 14494  0021E2  6F67               	movwf	(command@arg+2)& (0+255),b
 14495  0021E4  0E00               	movlw	0
 14496  0021E6  6F68               	movwf	(command@arg+3)& (0+255),b
 14497  0021E8  0EFF               	movlw	255
 14498  0021EA  6F69               	movwf	command@CRC& (0+255),b
 14499  0021EC  0E50               	movlw	80
 14500  0021EE  EC00  F027         	call	_command
 14501                           
 14502                           ;diskio.c: 363: proceed();
 14503  0021F2  ECA7  F02B         	call	_proceed	;wreg free
 14504                           
 14505                           ;diskio.c: 365: buff = 0xFF;
 14506  0021F6  0100               	movlb	0	; () banked
 14507  0021F8  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 14508  0021FA                     
 14509                           ; BSR set to: 0
 14510                           ;diskio.c: 367: buff = response();
 14511                           
 14512                           ; BSR set to: 0
 14513  0021FA  EC8D  F02B         	call	_response	;wreg free
 14514  0021FE  0100               	movlb	0	; () banked
 14515  002200  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 14516                           
 14517                           ; BSR set to: 0
 14518                           ;diskio.c: 368: }while(buff!=0X00);
 14519  002202  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 14520  002204  B4D8               	btfsc	status,2,c
 14521  002206  D09D               	goto	u13120
 14522  002208  D7F8               	goto	l594
 14523  00220A                     l578:
 14524                           
 14525                           ; BSR set to: 0
 14526                           ;diskio.c: 373: else
 14527                           ;diskio.c: 374: {
 14528                           ;diskio.c: 376: count2 = 0;
 14529                           
 14530                           ; BSR set to: 0
 14531  00220A  0E00               	movlw	0
 14532  00220C  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 14533  00220E  0E00               	movlw	0
 14534  002210  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 14535                           
 14536                           ; BSR set to: 0
 14537                           ;diskio.c: 377: buff = 0XFF;
 14538  002212  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 14539                           
 14540                           ; BSR set to: 0
 14541                           ;diskio.c: 378: dummy_clocks(1);
 14542  002214  0E01               	movlw	1
 14543  002216  EC8C  F029         	call	_dummy_clocks
 14544                           
 14545                           ;diskio.c: 379: command(0X69, 0X00000000, 0XFF);
 14546  00221A  0E00               	movlw	0
 14547  00221C  0100               	movlb	0	; () banked
 14548  00221E  6F65               	movwf	command@arg& (0+255),b
 14549  002220  0E00               	movlw	0
 14550  002222  6F66               	movwf	(command@arg+1)& (0+255),b
 14551  002224  0E00               	movlw	0
 14552  002226  6F67               	movwf	(command@arg+2)& (0+255),b
 14553  002228  0E00               	movlw	0
 14554  00222A  6F68               	movwf	(command@arg+3)& (0+255),b
 14555  00222C  0EFF               	movlw	255
 14556  00222E  6F69               	movwf	command@CRC& (0+255),b
 14557  002230  0E69               	movlw	105
 14558  002232  EC00  F027         	call	_command
 14559                           
 14560                           ;diskio.c: 380: proceed();
 14561  002236  ECA7  F02B         	call	_proceed	;wreg free
 14562  00223A                     
 14563                           ;diskio.c: 382: buff = response();
 14564  00223A  EC8D  F02B         	call	_response	;wreg free
 14565  00223E  0100               	movlb	0	; () banked
 14566  002240  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 14567                           
 14568                           ; BSR set to: 0
 14569                           ;diskio.c: 383: count2++;
 14570  002242  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 14571  002244  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 14572                           
 14573                           ; BSR set to: 0
 14574                           ;diskio.c: 384: if(buff==0x00)
 14575  002246  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 14576  002248  A4D8               	btfss	status,2,c
 14577  00224A  D00C               	goto	l598
 14578                           
 14579                           ; BSR set to: 0
 14580                           ;diskio.c: 385: {
 14581                           ;diskio.c: 386: posicao_cursor_lcd(1,0);
 14582  00224C  0E00               	movlw	0
 14583  00224E  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 14584  002250  0E01               	movlw	1
 14585  002252  ECE4  F025         	call	_posicao_cursor_lcd
 14586                           
 14587                           ;diskio.c: 387: escreve_frase_ram_lcd("SD VER. 1");
 14588  002256  0E1F               	movlw	low STR_25
 14589  002258  0100               	movlb	0	; () banked
 14590  00225A  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 14591  00225C  0E62               	movlw	high STR_25
 14592  00225E  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 14593  002260  EC3F  F028         	call	_escreve_frase_ram_lcd	;wreg free
 14594  002264                     l598:
 14595                           
 14596                           ;diskio.c: 388: }
 14597                           ;diskio.c: 389: _delay((unsigned long)((1)*(48000000/4000.0)));
 14598  002264  0E10               	movlw	16
 14599  002266  0100               	movlb	0	; () banked
 14600  002268  6F73               	movwf	??_sdc_disk_initialize& (0+255),b
 14601  00226A  0E94               	movlw	148
 14602  00226C                     u17367:
 14603  00226C  2EE8               	decfsz	wreg,f,c
 14604  00226E  D7FE               	bra	u17367
 14605  002270  2F73               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 14606  002272  D7FC               	bra	u17367
 14607  002274  F000               	nop	
 14608                           
 14609                           ;diskio.c: 390: }while(buff!=0X00 && count2<10000);
 14610  002276  0100               	movlb	0	; () banked
 14611  002278  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 14612  00227A  B4D8               	btfsc	status,2,c
 14613  00227C  D008               	goto	u13070
 14614                           
 14615                           ; BSR set to: 0
 14616  00227E  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 14617  002280  D7DC               	goto	l597
 14618  002282  0E10               	movlw	16
 14619  002284  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 14620  002286  0E27               	movlw	39
 14621  002288  597E               	subwfb	(sdc_disk_initialize@count2+1)& (0+255),w,b
 14622  00228A  A0D8               	btfss	status,0,c
 14623  00228C  D7D6               	goto	l597
 14624  00228E                     u13070:
 14625                           
 14626                           ; BSR set to: 0
 14627                           ;diskio.c: 392: buff = 0xFF;
 14628                           
 14629                           ; BSR set to: 0
 14630  00228E  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 14631                           
 14632                           ; BSR set to: 0
 14633                           ;diskio.c: 393: if(count2==10)
 14634  002290  0E0A               	movlw	10
 14635  002292  197D               	xorwf	sdc_disk_initialize@count2& (0+255),w,b
 14636  002294  117E               	iorwf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 14637  002296  A4D8               	btfss	status,2,c
 14638  002298  D038               	goto	u13110
 14639                           
 14640                           ; BSR set to: 0
 14641                           ;diskio.c: 394: {
 14642                           ;diskio.c: 395: count2 = 0;
 14643  00229A  0E00               	movlw	0
 14644  00229C  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 14645  00229E  0E00               	movlw	0
 14646  0022A0  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 14647                           
 14648                           ; BSR set to: 0
 14649                           ;diskio.c: 396: dummy_clocks(10);
 14650  0022A2  0E0A               	movlw	10
 14651  0022A4  EC8C  F029         	call	_dummy_clocks
 14652                           
 14653                           ;diskio.c: 397: command(0X41, 0X00000000, 0XFF);
 14654  0022A8  0E00               	movlw	0
 14655  0022AA  0100               	movlb	0	; () banked
 14656  0022AC  6F65               	movwf	command@arg& (0+255),b
 14657  0022AE  0E00               	movlw	0
 14658  0022B0  6F66               	movwf	(command@arg+1)& (0+255),b
 14659  0022B2  0E00               	movlw	0
 14660  0022B4  6F67               	movwf	(command@arg+2)& (0+255),b
 14661  0022B6  0E00               	movlw	0
 14662  0022B8  6F68               	movwf	(command@arg+3)& (0+255),b
 14663  0022BA  0EFF               	movlw	255
 14664  0022BC  6F69               	movwf	command@CRC& (0+255),b
 14665  0022BE  0E41               	movlw	65
 14666  0022C0  EC00  F027         	call	_command
 14667                           
 14668                           ;diskio.c: 398: proceed();
 14669  0022C4  ECA7  F02B         	call	_proceed	;wreg free
 14670  0022C8                     
 14671                           ;diskio.c: 400: buff = response();
 14672  0022C8  EC8D  F02B         	call	_response	;wreg free
 14673  0022CC  0100               	movlb	0	; () banked
 14674  0022CE  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 14675                           
 14676                           ; BSR set to: 0
 14677                           ;diskio.c: 401: count2++;
 14678  0022D0  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 14679  0022D2  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 14680                           
 14681                           ; BSR set to: 0
 14682                           ;diskio.c: 402: if(buff==0x00)
 14683  0022D4  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 14684  0022D6  A4D8               	btfss	status,2,c
 14685  0022D8  D00C               	goto	l604
 14686                           
 14687                           ; BSR set to: 0
 14688                           ;diskio.c: 403: {
 14689                           ;diskio.c: 404: posicao_cursor_lcd(1,0);
 14690  0022DA  0E00               	movlw	0
 14691  0022DC  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 14692  0022DE  0E01               	movlw	1
 14693  0022E0  ECE4  F025         	call	_posicao_cursor_lcd
 14694                           
 14695                           ;diskio.c: 405: escreve_frase_ram_lcd("MMC Ver. 3");
 14696  0022E4  0E09               	movlw	low STR_26
 14697  0022E6  0100               	movlb	0	; () banked
 14698  0022E8  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 14699  0022EA  0E62               	movlw	high STR_26
 14700  0022EC  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 14701  0022EE  EC3F  F028         	call	_escreve_frase_ram_lcd	;wreg free
 14702  0022F2                     l604:
 14703                           
 14704                           ;diskio.c: 406: }
 14705                           ;diskio.c: 408: }while(buff!=0X00 && count2<10000);
 14706  0022F2  0100               	movlb	0	; () banked
 14707  0022F4  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 14708  0022F6  B4D8               	btfsc	status,2,c
 14709  0022F8  D008               	goto	u13110
 14710                           
 14711                           ; BSR set to: 0
 14712  0022FA  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 14713  0022FC  D7E5               	goto	l603
 14714  0022FE  0E10               	movlw	16
 14715  002300  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 14716  002302  0E27               	movlw	39
 14717  002304  597E               	subwfb	(sdc_disk_initialize@count2+1)& (0+255),w,b
 14718  002306  A0D8               	btfss	status,0,c
 14719  002308  D7DF               	goto	l603
 14720  00230A                     u13110:
 14721                           
 14722                           ; BSR set to: 0
 14723                           ;diskio.c: 409: }
 14724                           ;diskio.c: 412: dummy_clocks(10);
 14725                           
 14726                           ; BSR set to: 0
 14727                           
 14728                           ; BSR set to: 0
 14729                           
 14730                           ; BSR set to: 0
 14731  00230A  0E0A               	movlw	10
 14732  00230C  EC8C  F029         	call	_dummy_clocks
 14733                           
 14734                           ;diskio.c: 413: command(0X50,0X00000200,0XFF);
 14735  002310  0E00               	movlw	0
 14736  002312  0100               	movlb	0	; () banked
 14737  002314  6F65               	movwf	command@arg& (0+255),b
 14738  002316  0E02               	movlw	2
 14739  002318  6F66               	movwf	(command@arg+1)& (0+255),b
 14740  00231A  0E00               	movlw	0
 14741  00231C  6F67               	movwf	(command@arg+2)& (0+255),b
 14742  00231E  0E00               	movlw	0
 14743  002320  6F68               	movwf	(command@arg+3)& (0+255),b
 14744  002322  0EFF               	movlw	255
 14745  002324  6F69               	movwf	command@CRC& (0+255),b
 14746  002326  0E50               	movlw	80
 14747  002328  EC00  F027         	call	_command
 14748                           
 14749                           ;diskio.c: 414: proceed();
 14750  00232C  ECA7  F02B         	call	_proceed	;wreg free
 14751                           
 14752                           ;diskio.c: 416: buff = 0xFF;
 14753  002330  0100               	movlb	0	; () banked
 14754  002332  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 14755  002334                     
 14756                           ; BSR set to: 0
 14757                           ;diskio.c: 418: buff = response();
 14758                           
 14759                           ; BSR set to: 0
 14760  002334  EC8D  F02B         	call	_response	;wreg free
 14761  002338  0100               	movlb	0	; () banked
 14762  00233A  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 14763                           
 14764                           ; BSR set to: 0
 14765                           ;diskio.c: 419: }while(buff!=0X00);
 14766  00233C  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 14767  00233E  A4D8               	btfss	status,2,c
 14768  002340  D7F9               	goto	l608
 14769  002342                     u13120:
 14770                           
 14771                           ; BSR set to: 0
 14772                           ;diskio.c: 421: }
 14773                           ;diskio.c: 425: return stat;
 14774                           
 14775                           ; BSR set to: 0
 14776                           
 14777                           ; BSR set to: 0
 14778  002342  5176               	movf	sdc_disk_initialize@stat& (0+255),w,b
 14779  002344  0012               	return	
 14780  002346                     __end_of_sdc_disk_initialize:
 14781                           	opt stack 0
 14782                           tosu	equ	0xFFF
 14783                           tosh	equ	0xFFE
 14784                           tosl	equ	0xFFD
 14785                           pclath	equ	0xFFA
 14786                           tblptru	equ	0xFF8
 14787                           tblptrh	equ	0xFF7
 14788                           tblptrl	equ	0xFF6
 14789                           tablat	equ	0xFF5
 14790                           prodh	equ	0xFF4
 14791                           prodl	equ	0xFF3
 14792                           intcon	equ	0xFF2
 14793                           intcon2	equ	0xFF1
 14794                           intcon3	equ	0xFF0
 14795                           indf0	equ	0xFEF
 14796                           postinc0	equ	0xFEE
 14797                           fsr0h	equ	0xFEA
 14798                           fsr0l	equ	0xFE9
 14799                           wreg	equ	0xFE8
 14800                           indf1	equ	0xFE7
 14801                           postinc1	equ	0xFE6
 14802                           postdec1	equ	0xFE5
 14803                           plusw1	equ	0xFE3
 14804                           fsr1h	equ	0xFE2
 14805                           fsr1l	equ	0xFE1
 14806                           indf2	equ	0xFDF
 14807                           postinc2	equ	0xFDE
 14808                           postdec2	equ	0xFDD
 14809                           plusw2	equ	0xFDB
 14810                           fsr2h	equ	0xFDA
 14811                           fsr2l	equ	0xFD9
 14812                           status	equ	0xFD8
 14813                           
 14814 ;; *************** function _sdc_reset *****************
 14815 ;; Defined at:
 14816 ;;		line 238 in file "bibliotecas/diskio.c"
 14817 ;; Parameters:    Size  Location     Type
 14818 ;;		None
 14819 ;; Auto vars:     Size  Location     Type
 14820 ;;  teste          10    0        unsigned char [10]
 14821 ;;  count           2   16[BANK0 ] int 
 14822 ;;  count_nosd      2   14[BANK0 ] int 
 14823 ;;  i               2   12[BANK0 ] int 
 14824 ;;  receive         2    0        unsigned int 
 14825 ;;  buff            1   18[BANK0 ] unsigned char 
 14826 ;;  stat            1    0        unsigned char 
 14827 ;; Return value:  Size  Location     Type
 14828 ;;                  1    wreg      void 
 14829 ;; Registers used:
 14830 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14831 ;; Tracked objects:
 14832 ;;		On entry : 0/0
 14833 ;;		On exit  : 0/0
 14834 ;;		Unchanged: 0/0
 14835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14836 ;;      Params:         0       0       0       0       0       0       0       0       0
 14837 ;;      Locals:         0       7       0       0       0       0       0       0       0
 14838 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14839 ;;      Totals:         0       7       0       0       0       0       0       0       0
 14840 ;;Total ram usage:        7 bytes
 14841 ;; Hardware stack levels used:    1
 14842 ;; Hardware stack levels required when called:    6
 14843 ;; This function calls:
 14844 ;;		_command
 14845 ;;		_escreve_frase_ram_lcd
 14846 ;;		_posicao_cursor_lcd
 14847 ;;		_proceed
 14848 ;;		_response
 14849 ;; This function is called by:
 14850 ;;		_sdc_disk_initialize
 14851 ;; This function uses a non-reentrant model
 14852 ;;
 14853                           
 14854                           	psect	text48
 14855  0046A0                     __ptext48:
 14856                           	opt stack 0
 14857  0046A0                     _sdc_reset:
 14858                           	opt stack 17
 14859                           
 14860                           ;diskio.c: 240: int i = 0, count = 0, count_nosd = 0;
 14861                           
 14862                           ; BSR set to: 0
 14863                           ;incstack = 0
 14864  0046A0  0E00               	movlw	0
 14865  0046A2  0100               	movlb	0	; () banked
 14866  0046A4  6F6D               	movwf	(sdc_reset@i+1)& (0+255),b
 14867  0046A6  0E00               	movlw	0
 14868  0046A8  6F6C               	movwf	sdc_reset@i& (0+255),b
 14869  0046AA  0E00               	movlw	0
 14870  0046AC  6F71               	movwf	(sdc_reset@count+1)& (0+255),b
 14871  0046AE  0E00               	movlw	0
 14872  0046B0  6F70               	movwf	sdc_reset@count& (0+255),b
 14873  0046B2  0E00               	movlw	0
 14874  0046B4  6F6F               	movwf	(sdc_reset@count_nosd+1)& (0+255),b
 14875  0046B6  0E00               	movlw	0
 14876  0046B8  6F6E               	movwf	sdc_reset@count_nosd& (0+255),b
 14877  0046BA                     
 14878                           ; BSR set to: 0
 14879                           ;diskio.c: 248: command(0x40, 0X00000000, 0X95);
 14880                           
 14881                           ; BSR set to: 0
 14882  0046BA  0E00               	movlw	0
 14883  0046BC  6F65               	movwf	command@arg& (0+255),b
 14884  0046BE  0E00               	movlw	0
 14885  0046C0  6F66               	movwf	(command@arg+1)& (0+255),b
 14886  0046C2  0E00               	movlw	0
 14887  0046C4  6F67               	movwf	(command@arg+2)& (0+255),b
 14888  0046C6  0E00               	movlw	0
 14889  0046C8  6F68               	movwf	(command@arg+3)& (0+255),b
 14890  0046CA  0E95               	movlw	149
 14891  0046CC  6F69               	movwf	command@CRC& (0+255),b
 14892  0046CE  0E40               	movlw	64
 14893  0046D0  EC00  F027         	call	_command
 14894                           
 14895                           ;diskio.c: 249: proceed();
 14896  0046D4  ECA7  F02B         	call	_proceed	;wreg free
 14897  0046D8                     
 14898                           ;diskio.c: 251: buff = response();
 14899  0046D8  EC8D  F02B         	call	_response	;wreg free
 14900  0046DC  0100               	movlb	0	; () banked
 14901  0046DE  6F72               	movwf	sdc_reset@buff& (0+255),b
 14902                           
 14903                           ; BSR set to: 0
 14904                           ;diskio.c: 252: count++;
 14905  0046E0  4B70               	infsnz	sdc_reset@count& (0+255),f,b
 14906  0046E2  2B71               	incf	(sdc_reset@count+1)& (0+255),f,b
 14907                           
 14908                           ; BSR set to: 0
 14909                           ;diskio.c: 253: }while(buff!=0X01 && count<10);
 14910  0046E4  0572               	decf	sdc_reset@buff& (0+255),w,b
 14911  0046E6  B4D8               	btfsc	status,2,c
 14912  0046E8  D008               	goto	u12670
 14913                           
 14914                           ; BSR set to: 0
 14915  0046EA  BF71               	btfsc	(sdc_reset@count+1)& (0+255),7,b
 14916  0046EC  D7F5               	goto	l562
 14917  0046EE  5171               	movf	(sdc_reset@count+1)& (0+255),w,b
 14918  0046F0  E104               	bnz	l10014
 14919  0046F2  0E0A               	movlw	10
 14920  0046F4  5D70               	subwf	sdc_reset@count& (0+255),w,b
 14921  0046F6  A0D8               	btfss	status,0,c
 14922  0046F8  D7EF               	goto	l562
 14923  0046FA                     u12670:
 14924  0046FA                     l10014:
 14925                           
 14926                           ; BSR set to: 0
 14927                           ;diskio.c: 254: count = 0;
 14928  0046FA  0E00               	movlw	0
 14929  0046FC  6F71               	movwf	(sdc_reset@count+1)& (0+255),b
 14930  0046FE  0E00               	movlw	0
 14931  004700  6F70               	movwf	sdc_reset@count& (0+255),b
 14932                           
 14933                           ; BSR set to: 0
 14934                           ;diskio.c: 255: if(buff != 0x01)
 14935  004702  0572               	decf	sdc_reset@buff& (0+255),w,b
 14936  004704  B4D8               	btfsc	status,2,c
 14937  004706  D019               	goto	l566
 14938                           
 14939                           ; BSR set to: 0
 14940                           ;diskio.c: 256: {
 14941                           ;diskio.c: 257: posicao_cursor_lcd(1,0);
 14942  004708  0E00               	movlw	0
 14943  00470A  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 14944  00470C  0E01               	movlw	1
 14945  00470E  ECE4  F025         	call	_posicao_cursor_lcd
 14946                           
 14947                           ;diskio.c: 258: escreve_frase_ram_lcd("Sem Cartao");
 14948  004712  0E14               	movlw	low STR_23
 14949  004714  0100               	movlb	0	; () banked
 14950  004716  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 14951  004718  0E62               	movlw	high STR_23
 14952  00471A  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 14953  00471C  EC3F  F028         	call	_escreve_frase_ram_lcd	;wreg free
 14954                           
 14955                           ;diskio.c: 259: posicao_cursor_lcd(2,0);
 14956  004720  0E00               	movlw	0
 14957  004722  0100               	movlb	0	; () banked
 14958  004724  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 14959  004726  0E02               	movlw	2
 14960  004728  ECE4  F025         	call	_posicao_cursor_lcd
 14961                           
 14962                           ;diskio.c: 260: escreve_frase_ram_lcd("Insira o Cartao");
 14963  00472C  0EC1               	movlw	low STR_24
 14964  00472E  0100               	movlb	0	; () banked
 14965  004730  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 14966  004732  0E61               	movlw	high STR_24
 14967  004734  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 14968  004736  EC3F  F028         	call	_escreve_frase_ram_lcd	;wreg free
 14969  00473A                     l566:
 14970                           
 14971                           ;diskio.c: 261: }
 14972                           ;diskio.c: 263: }while(buff!=0X01);
 14973  00473A  0100               	movlb	0	; () banked
 14974  00473C  0572               	decf	sdc_reset@buff& (0+255),w,b
 14975  00473E  B4D8               	btfsc	status,2,c
 14976  004740  0012               	return	
 14977  004742  D7BB               	goto	l561
 14978  004744                     __end_of_sdc_reset:
 14979                           	opt stack 0
 14980                           tosu	equ	0xFFF
 14981                           tosh	equ	0xFFE
 14982                           tosl	equ	0xFFD
 14983                           pclath	equ	0xFFA
 14984                           tblptru	equ	0xFF8
 14985                           tblptrh	equ	0xFF7
 14986                           tblptrl	equ	0xFF6
 14987                           tablat	equ	0xFF5
 14988                           prodh	equ	0xFF4
 14989                           prodl	equ	0xFF3
 14990                           intcon	equ	0xFF2
 14991                           intcon2	equ	0xFF1
 14992                           intcon3	equ	0xFF0
 14993                           indf0	equ	0xFEF
 14994                           postinc0	equ	0xFEE
 14995                           fsr0h	equ	0xFEA
 14996                           fsr0l	equ	0xFE9
 14997                           wreg	equ	0xFE8
 14998                           indf1	equ	0xFE7
 14999                           postinc1	equ	0xFE6
 15000                           postdec1	equ	0xFE5
 15001                           plusw1	equ	0xFE3
 15002                           fsr1h	equ	0xFE2
 15003                           fsr1l	equ	0xFE1
 15004                           indf2	equ	0xFDF
 15005                           postinc2	equ	0xFDE
 15006                           postdec2	equ	0xFDD
 15007                           plusw2	equ	0xFDB
 15008                           fsr2h	equ	0xFDA
 15009                           fsr2l	equ	0xFD9
 15010                           status	equ	0xFD8
 15011                           
 15012 ;; *************** function _posicao_cursor_lcd *****************
 15013 ;; Defined at:
 15014 ;;		line 271 in file "bibliotecas/display_lcd.c"
 15015 ;; Parameters:    Size  Location     Type
 15016 ;;  linha           1    wreg     unsigned char 
 15017 ;;  coluna          1    3[BANK0 ] unsigned char 
 15018 ;; Auto vars:     Size  Location     Type
 15019 ;;  linha           1    4[BANK0 ] unsigned char 
 15020 ;;  endereco        1    5[BANK0 ] unsigned char 
 15021 ;; Return value:  Size  Location     Type
 15022 ;;                  1    wreg      void 
 15023 ;; Registers used:
 15024 ;;		wreg, status,2, status,0, cstack
 15025 ;; Tracked objects:
 15026 ;;		On entry : 0/0
 15027 ;;		On exit  : 0/0
 15028 ;;		Unchanged: 0/0
 15029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15030 ;;      Params:         0       1       0       0       0       0       0       0       0
 15031 ;;      Locals:         0       2       0       0       0       0       0       0       0
 15032 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15033 ;;      Totals:         0       3       0       0       0       0       0       0       0
 15034 ;;Total ram usage:        3 bytes
 15035 ;; Hardware stack levels used:    1
 15036 ;; Hardware stack levels required when called:    5
 15037 ;; This function calls:
 15038 ;;		_endereco_cursor_lcd
 15039 ;; This function is called by:
 15040 ;;		_mensagem_inicial
 15041 ;;		_verifica_fence_externo
 15042 ;;		_troca_de_tela
 15043 ;;		_sdc_reset
 15044 ;;		_sdc_disk_initialize
 15045 ;;		_sdcard_init
 15046 ;; This function uses a non-reentrant model
 15047 ;;
 15048                           
 15049                           	psect	text49
 15050  004BC8                     __ptext49:
 15051                           	opt stack 0
 15052  004BC8                     _posicao_cursor_lcd:
 15053                           	opt stack 24
 15054                           
 15055                           ; BSR set to: 0
 15056                           ;incstack = 0
 15057                           ;posicao_cursor_lcd@linha stored from wreg
 15058  004BC8  0100               	movlb	0	; () banked
 15059  004BCA  6F64               	movwf	posicao_cursor_lcd@linha& (0+255),b
 15060                           
 15061                           ;display_lcd.c: 273: unsigned char endereco = 0x00;
 15062  004BCC  0E00               	movlw	0
 15063  004BCE  0100               	movlb	0	; () banked
 15064  004BD0  6F65               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 15065                           
 15066                           ; BSR set to: 0
 15067                           ;display_lcd.c: 275: if(coluna <= 0x10U)
 15068  004BD2  0E11               	movlw	17
 15069  004BD4  6163               	cpfslt	posicao_cursor_lcd@coluna& (0+255),b
 15070  004BD6  D034               	goto	l716
 15071  004BD8  D022               	goto	l717
 15072  004BDA                     l718:
 15073                           
 15074                           ; BSR set to: 0
 15075                           ;display_lcd.c: 282: endereco = 0x00U + coluna;
 15076  004BDA  C063  F065         	movff	posicao_cursor_lcd@coluna,posicao_cursor_lcd@endereco
 15077                           
 15078                           ; BSR set to: 0
 15079                           ;display_lcd.c: 283: endereco_cursor_lcd(endereco);
 15080  004BDE  5165               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 15081  004BE0  EC5F  F026         	call	_endereco_cursor_lcd
 15082                           
 15083                           ;display_lcd.c: 284: break;
 15084  004BE4  D02A               	goto	l719
 15085  004BE6                     
 15086                           ;display_lcd.c: 287: endereco = 0x40U + coluna;
 15087  004BE6  0100               	movlb	0	; () banked
 15088  004BE8  5163               	movf	posicao_cursor_lcd@coluna& (0+255),w,b
 15089  004BEA  0F40               	addlw	64
 15090  004BEC  6F65               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 15091                           
 15092                           ; BSR set to: 0
 15093                           ;display_lcd.c: 288: endereco_cursor_lcd(endereco);
 15094  004BEE  5165               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 15095  004BF0  EC5F  F026         	call	_endereco_cursor_lcd
 15096                           
 15097                           ;display_lcd.c: 289: break;
 15098  004BF4  D022               	goto	l719
 15099  004BF6                     
 15100                           ;display_lcd.c: 292: endereco = 0x14U + coluna;
 15101  004BF6  0100               	movlb	0	; () banked
 15102  004BF8  5163               	movf	posicao_cursor_lcd@coluna& (0+255),w,b
 15103  004BFA  0F14               	addlw	20
 15104  004BFC  6F65               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 15105                           
 15106                           ; BSR set to: 0
 15107                           ;display_lcd.c: 293: endereco_cursor_lcd(endereco);
 15108  004BFE  5165               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 15109  004C00  EC5F  F026         	call	_endereco_cursor_lcd
 15110                           
 15111                           ;display_lcd.c: 294: break;
 15112  004C04  D01A               	goto	l719
 15113  004C06                     
 15114                           ;display_lcd.c: 297: endereco = 0x54U + coluna;
 15115  004C06  0100               	movlb	0	; () banked
 15116  004C08  5163               	movf	posicao_cursor_lcd@coluna& (0+255),w,b
 15117  004C0A  0F54               	addlw	84
 15118  004C0C  6F65               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 15119                           
 15120                           ; BSR set to: 0
 15121                           ;display_lcd.c: 298: endereco_cursor_lcd(endereco);
 15122  004C0E  5165               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 15123  004C10  EC5F  F026         	call	_endereco_cursor_lcd
 15124                           
 15125                           ;display_lcd.c: 299: break;
 15126  004C14  D012               	goto	l719
 15127  004C16                     
 15128                           ;display_lcd.c: 302: endereco = 0x00U;
 15129  004C16  0E00               	movlw	0
 15130  004C18  0100               	movlb	0	; () banked
 15131  004C1A  6F65               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 15132                           
 15133                           ; BSR set to: 0
 15134                           ;display_lcd.c: 304: }
 15135                           
 15136                           ;display_lcd.c: 303: break;
 15137  004C1C  D00E               	goto	l719
 15138  004C1E                     l717:
 15139                           
 15140                           ; BSR set to: 0
 15141                           
 15142                           ; BSR set to: 0
 15143  004C1E  5164               	movf	posicao_cursor_lcd@linha& (0+255),w,b
 15144                           
 15145                           ; Switch size 1, requested type "space"
 15146                           ; Number of cases is 4, Range of values is 1 to 4
 15147                           ; switch strategies available:
 15148                           ; Name         Instructions Cycles
 15149                           ; simple_byte           13     7 (average)
 15150                           ;	Chosen strategy is simple_byte
 15151  004C20  0A01               	xorlw	1	; case 1
 15152  004C22  B4D8               	btfsc	status,2,c
 15153  004C24  D7DA               	goto	l718
 15154  004C26  0A03               	xorlw	3	; case 2
 15155  004C28  B4D8               	btfsc	status,2,c
 15156  004C2A  D7DD               	goto	l720
 15157  004C2C  0A01               	xorlw	1	; case 3
 15158  004C2E  B4D8               	btfsc	status,2,c
 15159  004C30  D7E2               	goto	l721
 15160  004C32  0A07               	xorlw	7	; case 4
 15161  004C34  B4D8               	btfsc	status,2,c
 15162  004C36  D7E7               	goto	l722
 15163  004C38  D7EE               	goto	l723
 15164  004C3A                     l719:
 15165                           
 15166                           ;display_lcd.c: 306: coluna++;
 15167                           
 15168                           ; BSR set to: 0
 15169  004C3A  0100               	movlb	0	; () banked
 15170  004C3C  2B63               	incf	posicao_cursor_lcd@coluna& (0+255),f,b
 15171                           
 15172                           ;display_lcd.c: 307: }
 15173  004C3E  0012               	return	
 15174  004C40                     l716:
 15175                           
 15176                           ; BSR set to: 0
 15177                           ;display_lcd.c: 308: else
 15178                           ;display_lcd.c: 309: {
 15179                           ;display_lcd.c: 310: endereco = 0x00U;
 15180                           
 15181                           ; BSR set to: 0
 15182  004C40  0E00               	movlw	0
 15183  004C42  6F65               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 15184  004C44  0012               	return	
 15185  004C46                     __end_of_posicao_cursor_lcd:
 15186                           	opt stack 0
 15187                           tosu	equ	0xFFF
 15188                           tosh	equ	0xFFE
 15189                           tosl	equ	0xFFD
 15190                           pclath	equ	0xFFA
 15191                           tblptru	equ	0xFF8
 15192                           tblptrh	equ	0xFF7
 15193                           tblptrl	equ	0xFF6
 15194                           tablat	equ	0xFF5
 15195                           prodh	equ	0xFF4
 15196                           prodl	equ	0xFF3
 15197                           intcon	equ	0xFF2
 15198                           intcon2	equ	0xFF1
 15199                           intcon3	equ	0xFF0
 15200                           indf0	equ	0xFEF
 15201                           postinc0	equ	0xFEE
 15202                           fsr0h	equ	0xFEA
 15203                           fsr0l	equ	0xFE9
 15204                           wreg	equ	0xFE8
 15205                           indf1	equ	0xFE7
 15206                           postinc1	equ	0xFE6
 15207                           postdec1	equ	0xFE5
 15208                           plusw1	equ	0xFE3
 15209                           fsr1h	equ	0xFE2
 15210                           fsr1l	equ	0xFE1
 15211                           indf2	equ	0xFDF
 15212                           postinc2	equ	0xFDE
 15213                           postdec2	equ	0xFDD
 15214                           plusw2	equ	0xFDB
 15215                           fsr2h	equ	0xFDA
 15216                           fsr2l	equ	0xFD9
 15217                           status	equ	0xFD8
 15218                           
 15219 ;; *************** function _endereco_cursor_lcd *****************
 15220 ;; Defined at:
 15221 ;;		line 218 in file "bibliotecas/display_lcd.c"
 15222 ;; Parameters:    Size  Location     Type
 15223 ;;  endereco        1    wreg     unsigned char 
 15224 ;; Auto vars:     Size  Location     Type
 15225 ;;  endereco        1    2[BANK0 ] unsigned char 
 15226 ;; Return value:  Size  Location     Type
 15227 ;;                  1    wreg      void 
 15228 ;; Registers used:
 15229 ;;		wreg, status,2, status,0, cstack
 15230 ;; Tracked objects:
 15231 ;;		On entry : 0/0
 15232 ;;		On exit  : 0/0
 15233 ;;		Unchanged: 0/0
 15234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15235 ;;      Params:         0       0       0       0       0       0       0       0       0
 15236 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15237 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15238 ;;      Totals:         0       1       0       0       0       0       0       0       0
 15239 ;;Total ram usage:        1 bytes
 15240 ;; Hardware stack levels used:    1
 15241 ;; Hardware stack levels required when called:    4
 15242 ;; This function calls:
 15243 ;;		_delay
 15244 ;; This function is called by:
 15245 ;;		_posicao_cursor_lcd
 15246 ;;		_cria_caractere_lcd
 15247 ;; This function uses a non-reentrant model
 15248 ;;
 15249                           
 15250                           	psect	text50
 15251  004CBE                     __ptext50:
 15252                           	opt stack 0
 15253  004CBE                     _endereco_cursor_lcd:
 15254                           	opt stack 24
 15255                           
 15256                           ; BSR set to: 0
 15257                           ;incstack = 0
 15258                           ;endereco_cursor_lcd@endereco stored from wreg
 15259  004CBE  0100               	movlb	0	; () banked
 15260  004CC0  6F62               	movwf	endereco_cursor_lcd@endereco& (0+255),b
 15261                           
 15262                           ;display_lcd.c: 221: PORTDbits.RD2 = 0;
 15263  004CC2  9483               	bcf	3971,2,c	;volatile
 15264                           
 15265                           ;display_lcd.c: 222: PORTDbits.RD1 = 0;
 15266  004CC4  9283               	bcf	3971,1,c	;volatile
 15267                           
 15268                           ;display_lcd.c: 223: PORTDbits.RD0 = 0;
 15269  004CC6  9083               	bcf	3971,0,c	;volatile
 15270                           
 15271                           ;display_lcd.c: 226: PORTDbits.RD7 = 1;
 15272  004CC8  8E83               	bsf	3971,7,c	;volatile
 15273                           
 15274                           ;display_lcd.c: 227: if(endereco&0b00010000){PORTDbits.RD4=1;}
 15275  004CCA  0100               	movlb	0	; () banked
 15276  004CCC  A962               	btfss	endereco_cursor_lcd@endereco& (0+255),4,b
 15277  004CCE  D002               	goto	l699
 15278                           
 15279                           ; BSR set to: 0
 15280  004CD0  8883               	bsf	3971,4,c	;volatile
 15281  004CD2  D001               	goto	l700
 15282  004CD4                     l699:
 15283                           
 15284                           ; BSR set to: 0
 15285                           ;display_lcd.c: 228: else {PORTDbits.RD4=0;}
 15286  004CD4  9883               	bcf	3971,4,c	;volatile
 15287  004CD6                     l700:
 15288                           
 15289                           ; BSR set to: 0
 15290                           ;display_lcd.c: 229: if(endereco&0b00100000){PORTDbits.RD5=1;}
 15291                           
 15292                           ; BSR set to: 0
 15293  004CD6  AB62               	btfss	endereco_cursor_lcd@endereco& (0+255),5,b
 15294  004CD8  D002               	goto	l701
 15295                           
 15296                           ; BSR set to: 0
 15297  004CDA  8A83               	bsf	3971,5,c	;volatile
 15298  004CDC  D001               	goto	l702
 15299  004CDE                     l701:
 15300                           
 15301                           ; BSR set to: 0
 15302                           ;display_lcd.c: 230: else {PORTDbits.RD5=0;}
 15303  004CDE  9A83               	bcf	3971,5,c	;volatile
 15304  004CE0                     l702:
 15305                           
 15306                           ; BSR set to: 0
 15307                           ;display_lcd.c: 231: if(endereco&0b01000000){PORTDbits.RD6=1;}
 15308                           
 15309                           ; BSR set to: 0
 15310  004CE0  AD62               	btfss	endereco_cursor_lcd@endereco& (0+255),6,b
 15311  004CE2  D002               	goto	l703
 15312                           
 15313                           ; BSR set to: 0
 15314  004CE4  8C83               	bsf	3971,6,c	;volatile
 15315  004CE6  D001               	goto	l704
 15316  004CE8                     l703:
 15317                           
 15318                           ; BSR set to: 0
 15319                           ;display_lcd.c: 232: else {PORTDbits.RD6=0;}
 15320  004CE8  9C83               	bcf	3971,6,c	;volatile
 15321  004CEA                     l704:
 15322                           
 15323                           ; BSR set to: 0
 15324                           ;display_lcd.c: 235: PORTDbits.RD0 = 1;
 15325  004CEA  8083               	bsf	3971,0,c	;volatile
 15326                           
 15327                           ; BSR set to: 0
 15328                           ;display_lcd.c: 236: delay();
 15329  004CEC  ECBE  F02A         	call	_delay	;wreg free
 15330                           
 15331                           ;display_lcd.c: 237: PORTDbits.RD0 = 0;
 15332  004CF0  9083               	bcf	3971,0,c	;volatile
 15333                           
 15334                           ;display_lcd.c: 238: delay();
 15335  004CF2  ECBE  F02A         	call	_delay	;wreg free
 15336                           
 15337                           ;display_lcd.c: 241: if(endereco&0b00000001){PORTDbits.RD4=1;}
 15338  004CF6  0100               	movlb	0	; () banked
 15339  004CF8  A162               	btfss	endereco_cursor_lcd@endereco& (0+255),0,b
 15340  004CFA  D002               	goto	l705
 15341                           
 15342                           ; BSR set to: 0
 15343  004CFC  8883               	bsf	3971,4,c	;volatile
 15344  004CFE  D001               	goto	l706
 15345  004D00                     l705:
 15346                           
 15347                           ; BSR set to: 0
 15348                           ;display_lcd.c: 242: else {PORTDbits.RD4=0;}
 15349  004D00  9883               	bcf	3971,4,c	;volatile
 15350  004D02                     l706:
 15351                           
 15352                           ; BSR set to: 0
 15353                           ;display_lcd.c: 243: if(endereco&0b00000010){PORTDbits.RD5=1;}
 15354  004D02  A362               	btfss	endereco_cursor_lcd@endereco& (0+255),1,b
 15355  004D04  D002               	goto	l707
 15356                           
 15357                           ; BSR set to: 0
 15358  004D06  8A83               	bsf	3971,5,c	;volatile
 15359  004D08  D001               	goto	l708
 15360  004D0A                     l707:
 15361                           
 15362                           ; BSR set to: 0
 15363                           ;display_lcd.c: 244: else {PORTDbits.RD5=0;}
 15364  004D0A  9A83               	bcf	3971,5,c	;volatile
 15365  004D0C                     l708:
 15366                           
 15367                           ; BSR set to: 0
 15368                           ;display_lcd.c: 245: if(endereco&0b00000100){PORTDbits.RD6=1;}
 15369  004D0C  A562               	btfss	endereco_cursor_lcd@endereco& (0+255),2,b
 15370  004D0E  D002               	goto	l709
 15371                           
 15372                           ; BSR set to: 0
 15373  004D10  8C83               	bsf	3971,6,c	;volatile
 15374  004D12  D001               	goto	l710
 15375  004D14                     l709:
 15376                           
 15377                           ; BSR set to: 0
 15378                           ;display_lcd.c: 246: else {PORTDbits.RD6=0;}
 15379  004D14  9C83               	bcf	3971,6,c	;volatile
 15380  004D16                     l710:
 15381                           
 15382                           ; BSR set to: 0
 15383                           ;display_lcd.c: 247: if(endereco&0b00001000){PORTDbits.RD7=1;}
 15384  004D16  A762               	btfss	endereco_cursor_lcd@endereco& (0+255),3,b
 15385  004D18  D002               	goto	l711
 15386                           
 15387                           ; BSR set to: 0
 15388  004D1A  8E83               	bsf	3971,7,c	;volatile
 15389  004D1C  D001               	goto	l712
 15390  004D1E                     l711:
 15391                           
 15392                           ; BSR set to: 0
 15393                           ;display_lcd.c: 248: else {PORTDbits.RD7=0;}
 15394  004D1E  9E83               	bcf	3971,7,c	;volatile
 15395  004D20                     l712:
 15396                           
 15397                           ; BSR set to: 0
 15398                           ;display_lcd.c: 251: PORTDbits.RD0 = 1;
 15399  004D20  8083               	bsf	3971,0,c	;volatile
 15400                           
 15401                           ; BSR set to: 0
 15402                           ;display_lcd.c: 252: delay();
 15403  004D22  ECBE  F02A         	call	_delay	;wreg free
 15404                           
 15405                           ;display_lcd.c: 253: PORTDbits.RD0 = 0;
 15406  004D26  9083               	bcf	3971,0,c	;volatile
 15407                           
 15408                           ;display_lcd.c: 254: delay();
 15409  004D28  ECBE  F02A         	call	_delay	;wreg free
 15410  004D2C  0012               	return		;funcret
 15411  004D2E                     __end_of_endereco_cursor_lcd:
 15412                           	opt stack 0
 15413                           tosu	equ	0xFFF
 15414                           tosh	equ	0xFFE
 15415                           tosl	equ	0xFFD
 15416                           pclath	equ	0xFFA
 15417                           tblptru	equ	0xFF8
 15418                           tblptrh	equ	0xFF7
 15419                           tblptrl	equ	0xFF6
 15420                           tablat	equ	0xFF5
 15421                           prodh	equ	0xFF4
 15422                           prodl	equ	0xFF3
 15423                           intcon	equ	0xFF2
 15424                           intcon2	equ	0xFF1
 15425                           intcon3	equ	0xFF0
 15426                           indf0	equ	0xFEF
 15427                           postinc0	equ	0xFEE
 15428                           fsr0h	equ	0xFEA
 15429                           fsr0l	equ	0xFE9
 15430                           wreg	equ	0xFE8
 15431                           indf1	equ	0xFE7
 15432                           postinc1	equ	0xFE6
 15433                           postdec1	equ	0xFE5
 15434                           plusw1	equ	0xFE3
 15435                           fsr1h	equ	0xFE2
 15436                           fsr1l	equ	0xFE1
 15437                           indf2	equ	0xFDF
 15438                           postinc2	equ	0xFDE
 15439                           postdec2	equ	0xFDD
 15440                           plusw2	equ	0xFDB
 15441                           fsr2h	equ	0xFDA
 15442                           fsr2l	equ	0xFD9
 15443                           status	equ	0xFD8
 15444                           
 15445 ;; *************** function _escreve_frase_ram_lcd *****************
 15446 ;; Defined at:
 15447 ;;		line 445 in file "bibliotecas/display_lcd.c"
 15448 ;; Parameters:    Size  Location     Type
 15449 ;;  buffer          2    3[BANK0 ] PTR unsigned char 
 15450 ;;		 -> escreve_inteiro_lcd@texto(7), STR_26(11), STR_25(10), STR_24(16), 
 15451 ;;		 -> STR_23(11), STR_20(9), STR_19(10), STR_18(10), 
 15452 ;;		 -> STR_17(14), STR_16(21), STR_15(15), STR_12(8), 
 15453 ;;		 -> STR_11(17), STR_10(8), STR_9(17), STR_8(9), 
 15454 ;;		 -> STR_7(4), STR_6(6), STR_5(4), STR_4(9), 
 15455 ;;		 -> STR_3(5), STR_2(5), STR_1(14), mensagem_inicial@msg_dois(17), 
 15456 ;;		 -> mensagem_inicial@msg_linha_um(17), 
 15457 ;; Auto vars:     Size  Location     Type
 15458 ;;		None
 15459 ;; Return value:  Size  Location     Type
 15460 ;;                  1    wreg      void 
 15461 ;; Registers used:
 15462 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15463 ;; Tracked objects:
 15464 ;;		On entry : 0/0
 15465 ;;		On exit  : 0/0
 15466 ;;		Unchanged: 0/0
 15467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15468 ;;      Params:         0       2       0       0       0       0       0       0       0
 15469 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15470 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15471 ;;      Totals:         0       2       0       0       0       0       0       0       0
 15472 ;;Total ram usage:        2 bytes
 15473 ;; Hardware stack levels used:    1
 15474 ;; Hardware stack levels required when called:    5
 15475 ;; This function calls:
 15476 ;;		_escreve_caractere_lcd
 15477 ;; This function is called by:
 15478 ;;		_mensagem_inicial
 15479 ;;		_verifica_fence_externo
 15480 ;;		_troca_de_tela
 15481 ;;		_sdc_reset
 15482 ;;		_sdc_disk_initialize
 15483 ;;		_escreve_inteiro_lcd
 15484 ;;		_sdcard_init
 15485 ;; This function uses a non-reentrant model
 15486 ;;
 15487                           
 15488                           	psect	text51
 15489  00507E                     __ptext51:
 15490                           	opt stack 0
 15491  00507E                     _escreve_frase_ram_lcd:
 15492                           	opt stack 24
 15493                           
 15494                           ;display_lcd.c: 447: while(*buffer)
 15495                           
 15496                           ;incstack = 0
 15497  00507E  D015               	goto	l761
 15498  005080                     
 15499                           ;display_lcd.c: 448: {
 15500                           ;display_lcd.c: 449: escreve_caractere_lcd(*buffer);
 15501  005080  C063  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 15502  005084  C064  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 15503  005088  6AF8               	clrf	tblptru,c
 15504  00508A  0E07               	movlw	(high __ramtop+-1)
 15505  00508C  64F7               	cpfsgt	tblptrh,c
 15506  00508E  D003               	bra	u12447
 15507  005090  0008               	tblrd		*
 15508  005092  50F5               	movf	tablat,w,c
 15509  005094  D005               	bra	u12440
 15510  005096                     u12447:
 15511  005096  CFF6 FFE9          	movff	tblptrl,fsr0l
 15512  00509A  CFF7 FFEA          	movff	tblptrh,fsr0h
 15513  00509E  50EF               	movf	indf0,w,c
 15514  0050A0                     u12440:
 15515  0050A0  EC23  F026         	call	_escreve_caractere_lcd
 15516                           
 15517                           ;display_lcd.c: 450: buffer++;
 15518  0050A4  0100               	movlb	0	; () banked
 15519  0050A6  4B63               	infsnz	escreve_frase_ram_lcd@buffer& (0+255),f,b
 15520  0050A8  2B64               	incf	(escreve_frase_ram_lcd@buffer+1)& (0+255),f,b
 15521  0050AA                     l761:
 15522                           
 15523                           ; BSR set to: 0
 15524  0050AA  C063  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 15525  0050AE  C064  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 15526  0050B2  6AF8               	clrf	tblptru,c
 15527  0050B4  0E07               	movlw	(high __ramtop+-1)
 15528  0050B6  64F7               	cpfsgt	tblptrh,c
 15529  0050B8  D003               	bra	u12457
 15530  0050BA  0008               	tblrd		*
 15531  0050BC  50F5               	movf	tablat,w,c
 15532  0050BE  D005               	bra	u12450
 15533  0050C0                     u12457:
 15534  0050C0  CFF6 FFE9          	movff	tblptrl,fsr0l
 15535  0050C4  CFF7 FFEA          	movff	tblptrh,fsr0h
 15536  0050C8  50EF               	movf	indf0,w,c
 15537  0050CA                     u12450:
 15538  0050CA  0900               	iorlw	0
 15539  0050CC  B4D8               	btfsc	status,2,c
 15540  0050CE  0012               	return	
 15541  0050D0  D7D7               	goto	l762
 15542  0050D2                     __end_of_escreve_frase_ram_lcd:
 15543                           	opt stack 0
 15544                           tosu	equ	0xFFF
 15545                           tosh	equ	0xFFE
 15546                           tosl	equ	0xFFD
 15547                           pclath	equ	0xFFA
 15548                           tblptru	equ	0xFF8
 15549                           tblptrh	equ	0xFF7
 15550                           tblptrl	equ	0xFF6
 15551                           tablat	equ	0xFF5
 15552                           prodh	equ	0xFF4
 15553                           prodl	equ	0xFF3
 15554                           intcon	equ	0xFF2
 15555                           intcon2	equ	0xFF1
 15556                           intcon3	equ	0xFF0
 15557                           indf0	equ	0xFEF
 15558                           postinc0	equ	0xFEE
 15559                           fsr0h	equ	0xFEA
 15560                           fsr0l	equ	0xFE9
 15561                           wreg	equ	0xFE8
 15562                           indf1	equ	0xFE7
 15563                           postinc1	equ	0xFE6
 15564                           postdec1	equ	0xFE5
 15565                           plusw1	equ	0xFE3
 15566                           fsr1h	equ	0xFE2
 15567                           fsr1l	equ	0xFE1
 15568                           indf2	equ	0xFDF
 15569                           postinc2	equ	0xFDE
 15570                           postdec2	equ	0xFDD
 15571                           plusw2	equ	0xFDB
 15572                           fsr2h	equ	0xFDA
 15573                           fsr2l	equ	0xFD9
 15574                           status	equ	0xFD8
 15575                           
 15576 ;; *************** function _escreve_caractere_lcd *****************
 15577 ;; Defined at:
 15578 ;;		line 323 in file "bibliotecas/display_lcd.c"
 15579 ;; Parameters:    Size  Location     Type
 15580 ;;  data            1    wreg     unsigned char 
 15581 ;; Auto vars:     Size  Location     Type
 15582 ;;  data            1    2[BANK0 ] unsigned char 
 15583 ;; Return value:  Size  Location     Type
 15584 ;;                  1    wreg      void 
 15585 ;; Registers used:
 15586 ;;		wreg, status,2, status,0, cstack
 15587 ;; Tracked objects:
 15588 ;;		On entry : 0/0
 15589 ;;		On exit  : 0/0
 15590 ;;		Unchanged: 0/0
 15591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15592 ;;      Params:         0       0       0       0       0       0       0       0       0
 15593 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15594 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15595 ;;      Totals:         0       1       0       0       0       0       0       0       0
 15596 ;;Total ram usage:        1 bytes
 15597 ;; Hardware stack levels used:    1
 15598 ;; Hardware stack levels required when called:    4
 15599 ;; This function calls:
 15600 ;;		_delay
 15601 ;; This function is called by:
 15602 ;;		_escreve_frase_ram_lcd
 15603 ;;		_escreve_float_lcd
 15604 ;;		_escreve_frase_lcd
 15605 ;;		_cria_caractere_lcd
 15606 ;; This function uses a non-reentrant model
 15607 ;;
 15608                           
 15609                           	psect	text52
 15610  004C46                     __ptext52:
 15611                           	opt stack 0
 15612  004C46                     _escreve_caractere_lcd:
 15613                           	opt stack 24
 15614                           
 15615                           ;incstack = 0
 15616                           ;escreve_caractere_lcd@data stored from wreg
 15617  004C46  0100               	movlb	0	; () banked
 15618  004C48  6F62               	movwf	escreve_caractere_lcd@data& (0+255),b
 15619                           
 15620                           ;display_lcd.c: 326: PORTDbits.RD2 = 0;
 15621  004C4A  9483               	bcf	3971,2,c	;volatile
 15622                           
 15623                           ;display_lcd.c: 327: PORTDbits.RD1 = 1;
 15624  004C4C  8283               	bsf	3971,1,c	;volatile
 15625                           
 15626                           ;display_lcd.c: 328: PORTDbits.RD0 = 0;
 15627  004C4E  9083               	bcf	3971,0,c	;volatile
 15628                           
 15629                           ;display_lcd.c: 331: if(data&0b00010000){PORTDbits.RD4=1;}
 15630  004C50  0100               	movlb	0	; () banked
 15631  004C52  A962               	btfss	escreve_caractere_lcd@data& (0+255),4,b
 15632  004C54  D002               	goto	l728
 15633                           
 15634                           ; BSR set to: 0
 15635  004C56  8883               	bsf	3971,4,c	;volatile
 15636  004C58  D001               	goto	l729
 15637  004C5A                     l728:
 15638                           
 15639                           ; BSR set to: 0
 15640                           ;display_lcd.c: 332: else {PORTDbits.RD4=0;}
 15641  004C5A  9883               	bcf	3971,4,c	;volatile
 15642  004C5C                     l729:
 15643                           
 15644                           ; BSR set to: 0
 15645                           ;display_lcd.c: 333: if(data&0b00100000){PORTDbits.RD5=1;}
 15646                           
 15647                           ; BSR set to: 0
 15648  004C5C  AB62               	btfss	escreve_caractere_lcd@data& (0+255),5,b
 15649  004C5E  D002               	goto	l730
 15650                           
 15651                           ; BSR set to: 0
 15652  004C60  8A83               	bsf	3971,5,c	;volatile
 15653  004C62  D001               	goto	l731
 15654  004C64                     l730:
 15655                           
 15656                           ; BSR set to: 0
 15657                           ;display_lcd.c: 334: else {PORTDbits.RD5=0;}
 15658  004C64  9A83               	bcf	3971,5,c	;volatile
 15659  004C66                     l731:
 15660                           
 15661                           ; BSR set to: 0
 15662                           ;display_lcd.c: 335: if(data&0b01000000){PORTDbits.RD6=1;}
 15663                           
 15664                           ; BSR set to: 0
 15665  004C66  AD62               	btfss	escreve_caractere_lcd@data& (0+255),6,b
 15666  004C68  D002               	goto	l732
 15667                           
 15668                           ; BSR set to: 0
 15669  004C6A  8C83               	bsf	3971,6,c	;volatile
 15670  004C6C  D001               	goto	l733
 15671  004C6E                     l732:
 15672                           
 15673                           ; BSR set to: 0
 15674                           ;display_lcd.c: 336: else {PORTDbits.RD6=0;}
 15675  004C6E  9C83               	bcf	3971,6,c	;volatile
 15676  004C70                     l733:
 15677                           
 15678                           ; BSR set to: 0
 15679                           ;display_lcd.c: 337: if(data&0b10000000){PORTDbits.RD7=1;}
 15680                           
 15681                           ; BSR set to: 0
 15682  004C70  AF62               	btfss	escreve_caractere_lcd@data& (0+255),7,b
 15683  004C72  D002               	goto	l734
 15684                           
 15685                           ; BSR set to: 0
 15686  004C74  8E83               	bsf	3971,7,c	;volatile
 15687  004C76  D001               	goto	l735
 15688  004C78                     l734:
 15689                           
 15690                           ; BSR set to: 0
 15691                           ;display_lcd.c: 338: else {PORTDbits.RD7=0;}
 15692  004C78  9E83               	bcf	3971,7,c	;volatile
 15693  004C7A                     l735:
 15694                           
 15695                           ; BSR set to: 0
 15696                           ;display_lcd.c: 341: PORTDbits.RD0 = 1;
 15697  004C7A  8083               	bsf	3971,0,c	;volatile
 15698                           
 15699                           ; BSR set to: 0
 15700                           ;display_lcd.c: 342: delay();
 15701  004C7C  ECBE  F02A         	call	_delay	;wreg free
 15702                           
 15703                           ;display_lcd.c: 343: PORTDbits.RD0 = 0;
 15704  004C80  9083               	bcf	3971,0,c	;volatile
 15705                           
 15706                           ;display_lcd.c: 344: delay();
 15707  004C82  ECBE  F02A         	call	_delay	;wreg free
 15708                           
 15709                           ;display_lcd.c: 348: if(data&0b00000001){PORTDbits.RD4=1;}
 15710  004C86  0100               	movlb	0	; () banked
 15711  004C88  A162               	btfss	escreve_caractere_lcd@data& (0+255),0,b
 15712  004C8A  D002               	goto	l736
 15713                           
 15714                           ; BSR set to: 0
 15715  004C8C  8883               	bsf	3971,4,c	;volatile
 15716  004C8E  D001               	goto	l737
 15717  004C90                     l736:
 15718                           
 15719                           ; BSR set to: 0
 15720                           ;display_lcd.c: 349: else {PORTDbits.RD4=0;}
 15721  004C90  9883               	bcf	3971,4,c	;volatile
 15722  004C92                     l737:
 15723                           
 15724                           ; BSR set to: 0
 15725                           ;display_lcd.c: 350: if(data&0b00000010){PORTDbits.RD5=1;}
 15726  004C92  A362               	btfss	escreve_caractere_lcd@data& (0+255),1,b
 15727  004C94  D002               	goto	l738
 15728                           
 15729                           ; BSR set to: 0
 15730  004C96  8A83               	bsf	3971,5,c	;volatile
 15731  004C98  D001               	goto	l739
 15732  004C9A                     l738:
 15733                           
 15734                           ; BSR set to: 0
 15735                           ;display_lcd.c: 351: else {PORTDbits.RD5=0;}
 15736  004C9A  9A83               	bcf	3971,5,c	;volatile
 15737  004C9C                     l739:
 15738                           
 15739                           ; BSR set to: 0
 15740                           ;display_lcd.c: 352: if(data&0b00000100){PORTDbits.RD6=1;}
 15741  004C9C  A562               	btfss	escreve_caractere_lcd@data& (0+255),2,b
 15742  004C9E  D002               	goto	l740
 15743                           
 15744                           ; BSR set to: 0
 15745  004CA0  8C83               	bsf	3971,6,c	;volatile
 15746  004CA2  D001               	goto	l741
 15747  004CA4                     l740:
 15748                           
 15749                           ; BSR set to: 0
 15750                           ;display_lcd.c: 353: else {PORTDbits.RD6=0;}
 15751  004CA4  9C83               	bcf	3971,6,c	;volatile
 15752  004CA6                     l741:
 15753                           
 15754                           ; BSR set to: 0
 15755                           ;display_lcd.c: 354: if(data&0b00001000){PORTDbits.RD7=1;}
 15756  004CA6  A762               	btfss	escreve_caractere_lcd@data& (0+255),3,b
 15757  004CA8  D002               	goto	l742
 15758                           
 15759                           ; BSR set to: 0
 15760  004CAA  8E83               	bsf	3971,7,c	;volatile
 15761  004CAC  D001               	goto	l743
 15762  004CAE                     l742:
 15763                           
 15764                           ; BSR set to: 0
 15765                           ;display_lcd.c: 355: else {PORTDbits.RD7=0;}
 15766  004CAE  9E83               	bcf	3971,7,c	;volatile
 15767  004CB0                     l743:
 15768                           
 15769                           ; BSR set to: 0
 15770                           ;display_lcd.c: 358: PORTDbits.RD0 = 1;
 15771  004CB0  8083               	bsf	3971,0,c	;volatile
 15772                           
 15773                           ; BSR set to: 0
 15774                           ;display_lcd.c: 359: delay();
 15775  004CB2  ECBE  F02A         	call	_delay	;wreg free
 15776                           
 15777                           ;display_lcd.c: 360: PORTDbits.RD0 = 0;
 15778  004CB6  9083               	bcf	3971,0,c	;volatile
 15779                           
 15780                           ;display_lcd.c: 361: delay();
 15781  004CB8  ECBE  F02A         	call	_delay	;wreg free
 15782  004CBC  0012               	return		;funcret
 15783  004CBE                     __end_of_escreve_caractere_lcd:
 15784                           	opt stack 0
 15785                           tosu	equ	0xFFF
 15786                           tosh	equ	0xFFE
 15787                           tosl	equ	0xFFD
 15788                           pclath	equ	0xFFA
 15789                           tblptru	equ	0xFF8
 15790                           tblptrh	equ	0xFF7
 15791                           tblptrl	equ	0xFF6
 15792                           tablat	equ	0xFF5
 15793                           prodh	equ	0xFF4
 15794                           prodl	equ	0xFF3
 15795                           intcon	equ	0xFF2
 15796                           intcon2	equ	0xFF1
 15797                           intcon3	equ	0xFF0
 15798                           indf0	equ	0xFEF
 15799                           postinc0	equ	0xFEE
 15800                           fsr0h	equ	0xFEA
 15801                           fsr0l	equ	0xFE9
 15802                           wreg	equ	0xFE8
 15803                           indf1	equ	0xFE7
 15804                           postinc1	equ	0xFE6
 15805                           postdec1	equ	0xFE5
 15806                           plusw1	equ	0xFE3
 15807                           fsr1h	equ	0xFE2
 15808                           fsr1l	equ	0xFE1
 15809                           indf2	equ	0xFDF
 15810                           postinc2	equ	0xFDE
 15811                           postdec2	equ	0xFDD
 15812                           plusw2	equ	0xFDB
 15813                           fsr2h	equ	0xFDA
 15814                           fsr2l	equ	0xFD9
 15815                           status	equ	0xFD8
 15816                           
 15817 ;; *************** function _delay *****************
 15818 ;; Defined at:
 15819 ;;		line 45 in file "bibliotecas/display_lcd.c"
 15820 ;; Parameters:    Size  Location     Type
 15821 ;;		None
 15822 ;; Auto vars:     Size  Location     Type
 15823 ;;  contador_int    1    1[BANK0 ] unsigned char 
 15824 ;;  contador_ext    1    0[BANK0 ] unsigned char 
 15825 ;; Return value:  Size  Location     Type
 15826 ;;                  1    wreg      void 
 15827 ;; Registers used:
 15828 ;;		wreg, status,2, status,0
 15829 ;; Tracked objects:
 15830 ;;		On entry : 0/0
 15831 ;;		On exit  : 0/0
 15832 ;;		Unchanged: 0/0
 15833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15834 ;;      Params:         0       0       0       0       0       0       0       0       0
 15835 ;;      Locals:         0       2       0       0       0       0       0       0       0
 15836 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15837 ;;      Totals:         0       2       0       0       0       0       0       0       0
 15838 ;;Total ram usage:        2 bytes
 15839 ;; Hardware stack levels used:    1
 15840 ;; Hardware stack levels required when called:    3
 15841 ;; This function calls:
 15842 ;;		Nothing
 15843 ;; This function is called by:
 15844 ;;		_init_lcd
 15845 ;;		_escreve_cmd_lcd
 15846 ;;		_endereco_cursor_lcd
 15847 ;;		_escreve_caractere_lcd
 15848 ;; This function uses a non-reentrant model
 15849 ;;
 15850                           
 15851                           	psect	text53
 15852  00557C                     __ptext53:
 15853                           	opt stack 0
 15854  00557C                     _delay:
 15855                           	opt stack 24
 15856                           
 15857                           ;display_lcd.c: 47: unsigned char contador_ext, contador_int;
 15858                           ;display_lcd.c: 49: for(contador_ext = 0; contador_ext<100; contador_ext++)
 15859                           
 15860                           ;incstack = 0
 15861  00557C  0E00               	movlw	0
 15862  00557E  0100               	movlb	0	; () banked
 15863  005580  6F60               	movwf	delay@contador_ext& (0+255),b
 15864  005582                     l9668:
 15865                           
 15866                           ; BSR set to: 0
 15867  005582  0E63               	movlw	99
 15868  005584  6560               	cpfsgt	delay@contador_ext& (0+255),b
 15869  005586  D001               	goto	l667
 15870  005588  0012               	return	
 15871  00558A                     l667:
 15872                           
 15873                           ; BSR set to: 0
 15874                           ;display_lcd.c: 50: {
 15875                           ;display_lcd.c: 51: __nop();
 15876  00558A  F000               	nop	
 15877                           
 15878                           ;display_lcd.c: 52: for(contador_int = 0; contador_int<50; contador_int++)
 15879  00558C  0E00               	movlw	0
 15880  00558E  0100               	movlb	0	; () banked
 15881  005590  6F61               	movwf	delay@contador_int& (0+255),b
 15882  005592                     l9674:
 15883                           
 15884                           ; BSR set to: 0
 15885  005592  0E31               	movlw	49
 15886  005594  6561               	cpfsgt	delay@contador_int& (0+255),b
 15887  005596  D001               	goto	l669
 15888  005598  D004               	goto	u12170
 15889  00559A                     l669:
 15890                           
 15891                           ; BSR set to: 0
 15892                           ;display_lcd.c: 53: {
 15893                           ;display_lcd.c: 54: __nop();
 15894  00559A  F000               	nop	
 15895  00559C  0100               	movlb	0	; () banked
 15896  00559E  2B61               	incf	delay@contador_int& (0+255),f,b
 15897  0055A0  D7F8               	goto	l9674
 15898  0055A2                     u12170:
 15899                           
 15900                           ; BSR set to: 0
 15901                           
 15902                           ; BSR set to: 0
 15903  0055A2  2B60               	incf	delay@contador_ext& (0+255),f,b
 15904  0055A4  D7EE               	goto	l9668
 15905  0055A6                     __end_of_delay:
 15906                           	opt stack 0
 15907                           tosu	equ	0xFFF
 15908                           tosh	equ	0xFFE
 15909                           tosl	equ	0xFFD
 15910                           pclath	equ	0xFFA
 15911                           tblptru	equ	0xFF8
 15912                           tblptrh	equ	0xFF7
 15913                           tblptrl	equ	0xFF6
 15914                           tablat	equ	0xFF5
 15915                           prodh	equ	0xFF4
 15916                           prodl	equ	0xFF3
 15917                           intcon	equ	0xFF2
 15918                           intcon2	equ	0xFF1
 15919                           intcon3	equ	0xFF0
 15920                           indf0	equ	0xFEF
 15921                           postinc0	equ	0xFEE
 15922                           fsr0h	equ	0xFEA
 15923                           fsr0l	equ	0xFE9
 15924                           wreg	equ	0xFE8
 15925                           indf1	equ	0xFE7
 15926                           postinc1	equ	0xFE6
 15927                           postdec1	equ	0xFE5
 15928                           plusw1	equ	0xFE3
 15929                           fsr1h	equ	0xFE2
 15930                           fsr1l	equ	0xFE1
 15931                           indf2	equ	0xFDF
 15932                           postinc2	equ	0xFDE
 15933                           postdec2	equ	0xFDD
 15934                           plusw2	equ	0xFDB
 15935                           fsr2h	equ	0xFDA
 15936                           fsr2l	equ	0xFD9
 15937                           status	equ	0xFD8
 15938                           
 15939 ;; *************** function _check_fs *****************
 15940 ;; Defined at:
 15941 ;;		line 623 in file "bibliotecas/tff.c"
 15942 ;; Parameters:    Size  Location     Type
 15943 ;;  sect            4   43[BANK0 ] unsigned long 
 15944 ;; Auto vars:     Size  Location     Type
 15945 ;;  fs              2   49[BANK0 ] PTR struct _FATFS
 15946 ;;		 -> NULL(0), fs(544), 
 15947 ;; Return value:  Size  Location     Type
 15948 ;;                  1    wreg      unsigned char 
 15949 ;; Registers used:
 15950 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15951 ;; Tracked objects:
 15952 ;;		On entry : 0/0
 15953 ;;		On exit  : 0/0
 15954 ;;		Unchanged: 0/0
 15955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15956 ;;      Params:         0       4       0       0       0       0       0       0       0
 15957 ;;      Locals:         0       2       0       0       0       0       0       0       0
 15958 ;;      Temps:          0       2       0       0       0       0       0       0       0
 15959 ;;      Totals:         0       8       0       0       0       0       0       0       0
 15960 ;;Total ram usage:        8 bytes
 15961 ;; Hardware stack levels used:    1
 15962 ;; Hardware stack levels required when called:    8
 15963 ;; This function calls:
 15964 ;;		_disk_read
 15965 ;;		_memcmp
 15966 ;; This function is called by:
 15967 ;;		_auto_mount
 15968 ;; This function uses a non-reentrant model
 15969 ;;
 15970                           
 15971                           	psect	text54
 15972  0049AA                     __ptext54:
 15973                           	opt stack 0
 15974  0049AA                     _check_fs:
 15975                           	opt stack 17
 15976                           
 15977                           ;tff.c: 627: FATFS *fs = FatFs;
 15978                           
 15979                           ; BSR set to: 0
 15980                           ;incstack = 0
 15981  0049AA  C0FA  F091         	movff	_FatFs,check_fs@fs
 15982  0049AE  C0FB  F092         	movff	_FatFs+1,check_fs@fs+1
 15983                           
 15984                           ;tff.c: 629: if (disk_read(0, fs->win, sect, 1) != RES_OK)
 15985  0049B2  0E20               	movlw	32
 15986  0049B4  0100               	movlb	0	; () banked
 15987  0049B6  2591               	addwf	check_fs@fs& (0+255),w,b
 15988  0049B8  6F7F               	movwf	disk_read@buff& (0+255),b
 15989  0049BA  0E00               	movlw	0
 15990  0049BC  2192               	addwfc	(check_fs@fs+1)& (0+255),w,b
 15991  0049BE  6F80               	movwf	(disk_read@buff+1)& (0+255),b
 15992  0049C0  C08B  F081         	movff	check_fs@sect,disk_read@sector
 15993  0049C4  C08C  F082         	movff	check_fs@sect+1,disk_read@sector+1
 15994  0049C8  C08D  F083         	movff	check_fs@sect+2,disk_read@sector+2
 15995  0049CC  C08E  F084         	movff	check_fs@sect+3,disk_read@sector+3
 15996  0049D0  0E01               	movlw	1
 15997  0049D2  6F85               	movwf	disk_read@count& (0+255),b
 15998  0049D4  0E00               	movlw	0
 15999  0049D6  EC8D  F024         	call	_disk_read
 16000  0049DA  0900               	iorlw	0
 16001  0049DC  B4D8               	btfsc	status,2,c
 16002  0049DE  D002               	goto	l1211
 16003                           
 16004                           ;tff.c: 630: return 2;
 16005  0049E0  0E02               	movlw	2
 16006  0049E2  0012               	return	
 16007  0049E4                     l1211:
 16008                           
 16009                           ;tff.c: 631: if ((WORD)(*(WORD*)(BYTE*)(&fs->win[510])) != 0xAA55)
 16010  0049E4  0100               	movlb	0	; () banked
 16011  0049E6  EE22 F01E          	lfsr	2,542
 16012  0049EA  5191               	movf	check_fs@fs& (0+255),w,b
 16013  0049EC  26D9               	addwf	fsr2l,f,c
 16014  0049EE  5192               	movf	(check_fs@fs+1)& (0+255),w,b
 16015  0049F0  22DA               	addwfc	fsr2h,f,c
 16016  0049F2  0E55               	movlw	85
 16017  0049F4  18DE               	xorwf	postinc2,w,c
 16018  0049F6  E104               	bnz	u13820
 16019  0049F8  0EAA               	movlw	170
 16020  0049FA  18DE               	xorwf	postinc2,w,c
 16021  0049FC  B4D8               	btfsc	status,2,c
 16022  0049FE  D002               	goto	l1213
 16023  004A00                     u13820:
 16024                           
 16025                           ; BSR set to: 0
 16026                           ;tff.c: 632: return 2;
 16027  004A00  0E02               	movlw	2
 16028                           
 16029                           ; BSR set to: 0
 16030  004A02  0012               	return	
 16031  004A04                     l1213:
 16032                           
 16033                           ; BSR set to: 0
 16034                           ;tff.c: 634: if (!memcmp(&fs->win[54], "FAT", 3))
 16035                           
 16036                           ; BSR set to: 0
 16037  004A04  0E56               	movlw	86
 16038  004A06  2591               	addwf	check_fs@fs& (0+255),w,b
 16039  004A08  6F60               	movwf	memcmp@s1& (0+255),b
 16040  004A0A  0E00               	movlw	0
 16041  004A0C  2192               	addwfc	(check_fs@fs+1)& (0+255),w,b
 16042  004A0E  6F61               	movwf	(memcmp@s1+1)& (0+255),b
 16043  004A10  0E73               	movlw	low STR_28
 16044  004A12  6F62               	movwf	memcmp@s2& (0+255),b
 16045  004A14  0E62               	movlw	high STR_28
 16046  004A16  6F63               	movwf	(memcmp@s2+1)& (0+255),b
 16047  004A18  0E00               	movlw	0
 16048  004A1A  6F65               	movwf	(memcmp@n+1)& (0+255),b
 16049  004A1C  0E03               	movlw	3
 16050  004A1E  6F64               	movwf	memcmp@n& (0+255),b
 16051  004A20  ECA2  F023         	call	_memcmp	;wreg free
 16052  004A24  0100               	movlb	0	; () banked
 16053  004A26  5160               	movf	?_memcmp& (0+255),w,b
 16054  004A28  1161               	iorwf	(?_memcmp+1)& (0+255),w,b
 16055  004A2A  A4D8               	btfss	status,2,c
 16056  004A2C  D002               	goto	l1214
 16057                           
 16058                           ; BSR set to: 0
 16059                           ;tff.c: 635: return 0;
 16060  004A2E  0E00               	movlw	0
 16061                           
 16062                           ; BSR set to: 0
 16063  004A30  0012               	return	
 16064  004A32                     l1214:
 16065                           
 16066                           ; BSR set to: 0
 16067                           ;tff.c: 640: return 1;
 16068                           
 16069                           ; BSR set to: 0
 16070  004A32  0E01               	movlw	1
 16071  004A34  0012               	return	
 16072  004A36                     __end_of_check_fs:
 16073                           	opt stack 0
 16074                           tosu	equ	0xFFF
 16075                           tosh	equ	0xFFE
 16076                           tosl	equ	0xFFD
 16077                           pclath	equ	0xFFA
 16078                           tblptru	equ	0xFF8
 16079                           tblptrh	equ	0xFF7
 16080                           tblptrl	equ	0xFF6
 16081                           tablat	equ	0xFF5
 16082                           prodh	equ	0xFF4
 16083                           prodl	equ	0xFF3
 16084                           intcon	equ	0xFF2
 16085                           intcon2	equ	0xFF1
 16086                           intcon3	equ	0xFF0
 16087                           indf0	equ	0xFEF
 16088                           postinc0	equ	0xFEE
 16089                           fsr0h	equ	0xFEA
 16090                           fsr0l	equ	0xFE9
 16091                           wreg	equ	0xFE8
 16092                           indf1	equ	0xFE7
 16093                           postinc1	equ	0xFE6
 16094                           postdec1	equ	0xFE5
 16095                           plusw1	equ	0xFE3
 16096                           fsr1h	equ	0xFE2
 16097                           fsr1l	equ	0xFE1
 16098                           indf2	equ	0xFDF
 16099                           postinc2	equ	0xFDE
 16100                           postdec2	equ	0xFDD
 16101                           plusw2	equ	0xFDB
 16102                           fsr2h	equ	0xFDA
 16103                           fsr2l	equ	0xFD9
 16104                           status	equ	0xFD8
 16105                           
 16106 ;; *************** function _memcmp *****************
 16107 ;; Defined at:
 16108 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcmp.c"
 16109 ;; Parameters:    Size  Location     Type
 16110 ;;  s1              2    0[BANK0 ] PTR const void 
 16111 ;;		 -> fs.win(512), NULL(0), fs(544), 
 16112 ;;  s2              2    2[BANK0 ] PTR const void 
 16113 ;;		 -> f_opendir@fn(12), f_open@fn(12), STR_28(4), 
 16114 ;;  n               2    4[BANK0 ] unsigned int 
 16115 ;; Auto vars:     Size  Location     Type
 16116 ;;		None
 16117 ;; Return value:  Size  Location     Type
 16118 ;;                  2    0[BANK0 ] int 
 16119 ;; Registers used:
 16120 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 16121 ;; Tracked objects:
 16122 ;;		On entry : 0/0
 16123 ;;		On exit  : 0/0
 16124 ;;		Unchanged: 0/0
 16125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16126 ;;      Params:         0       6       0       0       0       0       0       0       0
 16127 ;;      Locals:         0       0       0       0       0       0       0       0       0
 16128 ;;      Temps:          0       3       0       0       0       0       0       0       0
 16129 ;;      Totals:         0       9       0       0       0       0       0       0       0
 16130 ;;Total ram usage:        9 bytes
 16131 ;; Hardware stack levels used:    1
 16132 ;; Hardware stack levels required when called:    3
 16133 ;; This function calls:
 16134 ;;		Nothing
 16135 ;; This function is called by:
 16136 ;;		_trace_path
 16137 ;;		_check_fs
 16138 ;; This function uses a non-reentrant model
 16139 ;;
 16140                           
 16141                           	psect	text55
 16142  004744                     __ptext55:
 16143                           	opt stack 0
 16144  004744                     _memcmp:
 16145                           	opt stack 22
 16146                           
 16147                           ;incstack = 0
 16148  004744  D043               	goto	l1957
 16149  004746                     l10332:
 16150  004746  C060  FFD9         	movff	memcmp@s1,fsr2l
 16151  00474A  C061  FFDA         	movff	memcmp@s1+1,fsr2h
 16152  00474E  50DF               	movf	indf2,w,c
 16153  004750  0100               	movlb	0	; () banked
 16154  004752  6F66               	movwf	??_memcmp& (0+255),b
 16155  004754  C062  FFF6         	movff	memcmp@s2,tblptrl
 16156  004758  C063  FFF7         	movff	memcmp@s2+1,tblptrh
 16157  00475C  6AF8               	clrf	tblptru,c
 16158  00475E  0E07               	movlw	(high __ramtop+-1)
 16159  004760  64F7               	cpfsgt	tblptrh,c
 16160  004762  D003               	bra	u13147
 16161  004764  0008               	tblrd		*
 16162  004766  50F5               	movf	tablat,w,c
 16163  004768  D005               	bra	u13140
 16164  00476A                     u13147:
 16165  00476A  CFF6 FFE9          	movff	tblptrl,fsr0l
 16166  00476E  CFF7 FFEA          	movff	tblptrh,fsr0h
 16167  004772  50EF               	movf	indf0,w,c
 16168  004774                     u13140:
 16169  004774  0100               	movlb	0	; () banked
 16170  004776  1966               	xorwf	??_memcmp& (0+255),w,b
 16171  004778  B4D8               	btfsc	status,2,c
 16172  00477A  D024               	goto	l1959
 16173                           
 16174                           ; BSR set to: 0
 16175  00477C  C062  FFF6         	movff	memcmp@s2,tblptrl
 16176  004780  C063  FFF7         	movff	memcmp@s2+1,tblptrh
 16177  004784  6AF8               	clrf	tblptru,c
 16178  004786  0E07               	movlw	(high __ramtop+-1)
 16179  004788  64F7               	cpfsgt	tblptrh,c
 16180  00478A  D003               	bra	u13167
 16181  00478C  0008               	tblrd		*
 16182  00478E  50F5               	movf	tablat,w,c
 16183  004790  D005               	bra	u13160
 16184  004792                     u13167:
 16185  004792  CFF6 FFE9          	movff	tblptrl,fsr0l
 16186  004796  CFF7 FFEA          	movff	tblptrh,fsr0h
 16187  00479A  50EF               	movf	indf0,w,c
 16188  00479C                     u13160:
 16189  00479C  0100               	movlb	0	; () banked
 16190  00479E  6F66               	movwf	??_memcmp& (0+255),b
 16191  0047A0  6B67               	clrf	(??_memcmp+1)& (0+255),b
 16192  0047A2  1F66               	comf	??_memcmp& (0+255),f,b
 16193  0047A4  1F67               	comf	(??_memcmp+1)& (0+255),f,b
 16194  0047A6  4B66               	infsnz	??_memcmp& (0+255),f,b
 16195  0047A8  2B67               	incf	(??_memcmp+1)& (0+255),f,b
 16196  0047AA  C060  FFD9         	movff	memcmp@s1,fsr2l
 16197  0047AE  C061  FFDA         	movff	memcmp@s1+1,fsr2h
 16198  0047B2  50DF               	movf	indf2,w,c
 16199  0047B4  6F68               	movwf	(??_memcmp+2)& (0+255),b
 16200  0047B6  5168               	movf	(??_memcmp+2)& (0+255),w,b
 16201  0047B8  2566               	addwf	??_memcmp& (0+255),w,b
 16202  0047BA  6F60               	movwf	?_memcmp& (0+255),b
 16203  0047BC  0E00               	movlw	0
 16204  0047BE  2167               	addwfc	(??_memcmp+1)& (0+255),w,b
 16205  0047C0  6F61               	movwf	(?_memcmp+1)& (0+255),b
 16206                           
 16207                           ; BSR set to: 0
 16208  0047C2  0012               	return	
 16209  0047C4                     l1959:
 16210                           
 16211                           ; BSR set to: 0
 16212                           
 16213                           ; BSR set to: 0
 16214  0047C4  4B60               	infsnz	memcmp@s1& (0+255),f,b
 16215  0047C6  2B61               	incf	(memcmp@s1+1)& (0+255),f,b
 16216  0047C8  4B62               	infsnz	memcmp@s2& (0+255),f,b
 16217  0047CA  2B63               	incf	(memcmp@s2+1)& (0+255),f,b
 16218  0047CC                     l1957:
 16219                           
 16220                           ; BSR set to: 0
 16221  0047CC  0100               	movlb	0	; () banked
 16222  0047CE  0764               	decf	memcmp@n& (0+255),f,b
 16223  0047D0  A0D8               	btfss	status,0,c
 16224  0047D2  0765               	decf	(memcmp@n+1)& (0+255),f,b
 16225  0047D4  2964               	incf	memcmp@n& (0+255),w,b
 16226  0047D6  E1B7               	bnz	l10332
 16227  0047D8  2965               	incf	(memcmp@n+1)& (0+255),w,b
 16228  0047DA  A4D8               	btfss	status,2,c
 16229  0047DC  D7B4               	goto	l1958
 16230                           
 16231                           ; BSR set to: 0
 16232                           
 16233                           ; BSR set to: 0
 16234  0047DE  0E00               	movlw	0
 16235  0047E0  6F61               	movwf	(?_memcmp+1)& (0+255),b
 16236  0047E2  0E00               	movlw	0
 16237  0047E4  6F60               	movwf	?_memcmp& (0+255),b
 16238  0047E6  0012               	return	
 16239  0047E8                     __end_of_memcmp:
 16240                           	opt stack 0
 16241                           tosu	equ	0xFFF
 16242                           tosh	equ	0xFFE
 16243                           tosl	equ	0xFFD
 16244                           pclath	equ	0xFFA
 16245                           tblptru	equ	0xFF8
 16246                           tblptrh	equ	0xFF7
 16247                           tblptrl	equ	0xFF6
 16248                           tablat	equ	0xFF5
 16249                           prodh	equ	0xFF4
 16250                           prodl	equ	0xFF3
 16251                           intcon	equ	0xFF2
 16252                           intcon2	equ	0xFF1
 16253                           intcon3	equ	0xFF0
 16254                           indf0	equ	0xFEF
 16255                           postinc0	equ	0xFEE
 16256                           fsr0h	equ	0xFEA
 16257                           fsr0l	equ	0xFE9
 16258                           wreg	equ	0xFE8
 16259                           indf1	equ	0xFE7
 16260                           postinc1	equ	0xFE6
 16261                           postdec1	equ	0xFE5
 16262                           plusw1	equ	0xFE3
 16263                           fsr1h	equ	0xFE2
 16264                           fsr1l	equ	0xFE1
 16265                           indf2	equ	0xFDF
 16266                           postinc2	equ	0xFDE
 16267                           postdec2	equ	0xFDD
 16268                           plusw2	equ	0xFDB
 16269                           fsr2h	equ	0xFDA
 16270                           fsr2l	equ	0xFD9
 16271                           status	equ	0xFD8
 16272                           
 16273 ;; *************** function ___lmul *****************
 16274 ;; Defined at:
 16275 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 16276 ;; Parameters:    Size  Location     Type
 16277 ;;  multiplier      4    0[BANK0 ] unsigned long 
 16278 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 16279 ;; Auto vars:     Size  Location     Type
 16280 ;;  product         4    8[BANK0 ] unsigned long 
 16281 ;; Return value:  Size  Location     Type
 16282 ;;                  4    0[BANK0 ] unsigned long 
 16283 ;; Registers used:
 16284 ;;		wreg, status,2, status,0
 16285 ;; Tracked objects:
 16286 ;;		On entry : 0/0
 16287 ;;		On exit  : 0/0
 16288 ;;		Unchanged: 0/0
 16289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16290 ;;      Params:         0       8       0       0       0       0       0       0       0
 16291 ;;      Locals:         0       4       0       0       0       0       0       0       0
 16292 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16293 ;;      Totals:         0      12       0       0       0       0       0       0       0
 16294 ;;Total ram usage:       12 bytes
 16295 ;; Hardware stack levels used:    1
 16296 ;; Hardware stack levels required when called:    3
 16297 ;; This function calls:
 16298 ;;		Nothing
 16299 ;; This function is called by:
 16300 ;;		_clust2sect
 16301 ;;		_auto_mount
 16302 ;; This function uses a non-reentrant model
 16303 ;;
 16304                           
 16305                           	psect	text56
 16306  004F7C                     __ptext56:
 16307                           	opt stack 0
 16308  004F7C                     ___lmul:
 16309                           	opt stack 19
 16310                           
 16311                           ; BSR set to: 0
 16312                           ;incstack = 0
 16313  004F7C  0E00               	movlw	0
 16314  004F7E  0100               	movlb	0	; () banked
 16315  004F80  6F68               	movwf	___lmul@product& (0+255),b
 16316  004F82  0E00               	movlw	0
 16317  004F84  6F69               	movwf	(___lmul@product+1)& (0+255),b
 16318  004F86  0E00               	movlw	0
 16319  004F88  6F6A               	movwf	(___lmul@product+2)& (0+255),b
 16320  004F8A  0E00               	movlw	0
 16321  004F8C  6F6B               	movwf	(___lmul@product+3)& (0+255),b
 16322  004F8E                     
 16323                           ; BSR set to: 0
 16324                           
 16325                           ; BSR set to: 0
 16326  004F8E  A160               	btfss	___lmul@multiplier& (0+255),0,b
 16327  004F90  D008               	goto	l1504
 16328                           
 16329                           ; BSR set to: 0
 16330  004F92  5164               	movf	___lmul@multiplicand& (0+255),w,b
 16331  004F94  2768               	addwf	___lmul@product& (0+255),f,b
 16332  004F96  5165               	movf	(___lmul@multiplicand+1)& (0+255),w,b
 16333  004F98  2369               	addwfc	(___lmul@product+1)& (0+255),f,b
 16334  004F9A  5166               	movf	(___lmul@multiplicand+2)& (0+255),w,b
 16335  004F9C  236A               	addwfc	(___lmul@product+2)& (0+255),f,b
 16336  004F9E  5167               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 16337  004FA0  236B               	addwfc	(___lmul@product+3)& (0+255),f,b
 16338  004FA2                     l1504:
 16339                           
 16340                           ; BSR set to: 0
 16341                           
 16342                           ; BSR set to: 0
 16343  004FA2  90D8               	bcf	status,0,c
 16344  004FA4  3764               	rlcf	___lmul@multiplicand& (0+255),f,b
 16345  004FA6  3765               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 16346  004FA8  3766               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 16347  004FAA  3767               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 16348                           
 16349                           ; BSR set to: 0
 16350  004FAC  90D8               	bcf	status,0,c
 16351  004FAE  3363               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 16352  004FB0  3362               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 16353  004FB2  3361               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 16354  004FB4  3360               	rrcf	___lmul@multiplier& (0+255),f,b
 16355  004FB6  5160               	movf	___lmul@multiplier& (0+255),w,b
 16356  004FB8  1161               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 16357  004FBA  1162               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 16358  004FBC  1163               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 16359  004FBE  A4D8               	btfss	status,2,c
 16360  004FC0  D7E6               	goto	l1503
 16361                           
 16362                           ; BSR set to: 0
 16363  004FC2  C068  F060         	movff	___lmul@product,?___lmul
 16364  004FC6  C069  F061         	movff	___lmul@product+1,?___lmul+1
 16365  004FCA  C06A  F062         	movff	___lmul@product+2,?___lmul+2
 16366  004FCE  C06B  F063         	movff	___lmul@product+3,?___lmul+3
 16367                           
 16368                           ; BSR set to: 0
 16369  004FD2  0012               	return		;funcret
 16370  004FD4                     __end_of___lmul:
 16371                           	opt stack 0
 16372                           tosu	equ	0xFFF
 16373                           tosh	equ	0xFFE
 16374                           tosl	equ	0xFFD
 16375                           pclath	equ	0xFFA
 16376                           tblptru	equ	0xFF8
 16377                           tblptrh	equ	0xFF7
 16378                           tblptrl	equ	0xFF6
 16379                           tablat	equ	0xFF5
 16380                           prodh	equ	0xFF4
 16381                           prodl	equ	0xFF3
 16382                           intcon	equ	0xFF2
 16383                           intcon2	equ	0xFF1
 16384                           intcon3	equ	0xFF0
 16385                           indf0	equ	0xFEF
 16386                           postinc0	equ	0xFEE
 16387                           fsr0h	equ	0xFEA
 16388                           fsr0l	equ	0xFE9
 16389                           wreg	equ	0xFE8
 16390                           indf1	equ	0xFE7
 16391                           postinc1	equ	0xFE6
 16392                           postdec1	equ	0xFE5
 16393                           plusw1	equ	0xFE3
 16394                           fsr1h	equ	0xFE2
 16395                           fsr1l	equ	0xFE1
 16396                           indf2	equ	0xFDF
 16397                           postinc2	equ	0xFDE
 16398                           postdec2	equ	0xFDD
 16399                           plusw2	equ	0xFDB
 16400                           fsr2h	equ	0xFDA
 16401                           fsr2l	equ	0xFD9
 16402                           status	equ	0xFD8
 16403                           
 16404 ;; *************** function _f_mount *****************
 16405 ;; Defined at:
 16406 ;;		line 793 in file "bibliotecas/tff.c"
 16407 ;; Parameters:    Size  Location     Type
 16408 ;;  drv             1    wreg     unsigned char 
 16409 ;;  fs              2    0[BANK0 ] PTR struct _FATFS
 16410 ;;		 -> fs(544), 
 16411 ;; Auto vars:     Size  Location     Type
 16412 ;;  drv             1    2[BANK0 ] unsigned char 
 16413 ;; Return value:  Size  Location     Type
 16414 ;;                  1    wreg      enum E3974
 16415 ;; Registers used:
 16416 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16417 ;; Tracked objects:
 16418 ;;		On entry : 0/0
 16419 ;;		On exit  : 0/0
 16420 ;;		Unchanged: 0/0
 16421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16422 ;;      Params:         0       2       0       0       0       0       0       0       0
 16423 ;;      Locals:         0       1       0       0       0       0       0       0       0
 16424 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16425 ;;      Totals:         0       3       0       0       0       0       0       0       0
 16426 ;;Total ram usage:        3 bytes
 16427 ;; Hardware stack levels used:    1
 16428 ;; Hardware stack levels required when called:    3
 16429 ;; This function calls:
 16430 ;;		Nothing
 16431 ;; This function is called by:
 16432 ;;		_escrita_sdcard
 16433 ;;		_sdcard_init
 16434 ;;		_leitura_sdcard
 16435 ;; This function uses a non-reentrant model
 16436 ;;
 16437                           
 16438                           	psect	text57
 16439  005120                     __ptext57:
 16440                           	opt stack 0
 16441  005120                     _f_mount:
 16442                           	opt stack 24
 16443                           
 16444                           ; BSR set to: 0
 16445                           ;incstack = 0
 16446                           ;f_mount@drv stored from wreg
 16447  005120  0100               	movlb	0	; () banked
 16448  005122  6F62               	movwf	f_mount@drv& (0+255),b
 16449                           
 16450                           ;tff.c: 798: if (drv) return FR_INVALID_DRIVE;
 16451  005124  0100               	movlb	0	; () banked
 16452  005126  5162               	movf	f_mount@drv& (0+255),w,b
 16453  005128  B4D8               	btfsc	status,2,c
 16454  00512A  D002               	goto	l1246
 16455                           
 16456                           ; BSR set to: 0
 16457  00512C  0E05               	movlw	5
 16458                           
 16459                           ; BSR set to: 0
 16460  00512E  0012               	return	
 16461  005130                     l1246:
 16462                           
 16463                           ; BSR set to: 0
 16464                           ;tff.c: 800: if (FatFs) FatFs->fs_type = 0;
 16465                           
 16466                           ; BSR set to: 0
 16467  005130  51FA               	movf	_FatFs& (0+255),w,b
 16468  005132  11FB               	iorwf	(_FatFs+1)& (0+255),w,b
 16469  005134  B4D8               	btfsc	status,2,c
 16470  005136  D008               	goto	l1248
 16471                           
 16472                           ; BSR set to: 0
 16473  005138  EE20 F01C          	lfsr	2,28
 16474  00513C  51FA               	movf	_FatFs& (0+255),w,b
 16475  00513E  26D9               	addwf	fsr2l,f,c
 16476  005140  51FB               	movf	(_FatFs+1)& (0+255),w,b
 16477  005142  22DA               	addwfc	fsr2h,f,c
 16478  005144  0E00               	movlw	0
 16479  005146  6EDF               	movwf	indf2,c
 16480  005148                     l1248:
 16481                           
 16482                           ; BSR set to: 0
 16483                           ;tff.c: 802: FatFs = fs;
 16484                           
 16485                           ; BSR set to: 0
 16486  005148  C060  F0FA         	movff	f_mount@fs,_FatFs
 16487  00514C  C061  F0FB         	movff	f_mount@fs+1,_FatFs+1
 16488                           
 16489                           ; BSR set to: 0
 16490                           ;tff.c: 803: if (fs) fs->fs_type = 0;
 16491  005150  5160               	movf	f_mount@fs& (0+255),w,b
 16492  005152  1161               	iorwf	(f_mount@fs+1)& (0+255),w,b
 16493  005154  B4D8               	btfsc	status,2,c
 16494  005156  D008               	goto	l1249
 16495                           
 16496                           ; BSR set to: 0
 16497  005158  EE20 F01C          	lfsr	2,28
 16498  00515C  5160               	movf	f_mount@fs& (0+255),w,b
 16499  00515E  26D9               	addwf	fsr2l,f,c
 16500  005160  5161               	movf	(f_mount@fs+1)& (0+255),w,b
 16501  005162  22DA               	addwfc	fsr2h,f,c
 16502  005164  0E00               	movlw	0
 16503  005166  6EDF               	movwf	indf2,c
 16504  005168                     l1249:
 16505                           
 16506                           ; BSR set to: 0
 16507                           ;tff.c: 805: return FR_OK;
 16508                           
 16509                           ; BSR set to: 0
 16510  005168  0E00               	movlw	0
 16511  00516A  0012               	return	
 16512  00516C                     __end_of_f_mount:
 16513                           	opt stack 0
 16514                           tosu	equ	0xFFF
 16515                           tosh	equ	0xFFE
 16516                           tosl	equ	0xFFD
 16517                           pclath	equ	0xFFA
 16518                           tblptru	equ	0xFF8
 16519                           tblptrh	equ	0xFF7
 16520                           tblptrl	equ	0xFF6
 16521                           tablat	equ	0xFF5
 16522                           prodh	equ	0xFF4
 16523                           prodl	equ	0xFF3
 16524                           intcon	equ	0xFF2
 16525                           intcon2	equ	0xFF1
 16526                           intcon3	equ	0xFF0
 16527                           indf0	equ	0xFEF
 16528                           postinc0	equ	0xFEE
 16529                           fsr0h	equ	0xFEA
 16530                           fsr0l	equ	0xFE9
 16531                           wreg	equ	0xFE8
 16532                           indf1	equ	0xFE7
 16533                           postinc1	equ	0xFE6
 16534                           postdec1	equ	0xFE5
 16535                           plusw1	equ	0xFE3
 16536                           fsr1h	equ	0xFE2
 16537                           fsr1l	equ	0xFE1
 16538                           indf2	equ	0xFDF
 16539                           postinc2	equ	0xFDE
 16540                           postdec2	equ	0xFDD
 16541                           plusw2	equ	0xFDB
 16542                           fsr2h	equ	0xFDA
 16543                           fsr2l	equ	0xFD9
 16544                           status	equ	0xFD8
 16545                           
 16546 ;; *************** function _f_lseek *****************
 16547 ;; Defined at:
 16548 ;;		line 1132 in file "bibliotecas/tff.c"
 16549 ;; Parameters:    Size  Location     Type
 16550 ;;  fp              2  100[BANK0 ] PTR struct _FIL
 16551 ;;		 -> fil(28), 
 16552 ;;  ofs             4  102[BANK0 ] unsigned long 
 16553 ;; Auto vars:     Size  Location     Type
 16554 ;;  csize           4  123[BANK0 ] unsigned long 
 16555 ;;  ifptr           4  119[BANK0 ] unsigned long 
 16556 ;;  clust           2  127[BANK0 ] unsigned short 
 16557 ;;  res             1  118[BANK0 ] enum E155
 16558 ;; Return value:  Size  Location     Type
 16559 ;;                  1    wreg      enum E3974
 16560 ;; Registers used:
 16561 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16562 ;; Tracked objects:
 16563 ;;		On entry : 0/0
 16564 ;;		On exit  : 0/0
 16565 ;;		Unchanged: 0/0
 16566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16567 ;;      Params:         0       6       0       0       0       0       0       0       0
 16568 ;;      Locals:         0      11       0       0       0       0       0       0       0
 16569 ;;      Temps:          0      12       0       0       0       0       0       0       0
 16570 ;;      Totals:         0      29       0       0       0       0       0       0       0
 16571 ;;Total ram usage:       29 bytes
 16572 ;; Hardware stack levels used:    1
 16573 ;; Hardware stack levels required when called:   11
 16574 ;; This function calls:
 16575 ;;		___lldiv
 16576 ;;		_create_chain
 16577 ;;		_get_cluster
 16578 ;;		_validate
 16579 ;; This function is called by:
 16580 ;;		_escrita_sdcard
 16581 ;; This function uses a non-reentrant model
 16582 ;;
 16583                           
 16584                           	psect	text58
 16585  001402                     __ptext58:
 16586                           	opt stack 0
 16587  001402                     _f_lseek:
 16588                           	opt stack 16
 16589                           
 16590                           ;tff.c: 1137: FRESULT res;
 16591                           ;tff.c: 1138: CLUST clust;
 16592                           ;tff.c: 1139: DWORD csize, ifptr;
 16593                           ;tff.c: 1142: res = validate(fp->fs, fp->id);
 16594                           
 16595                           ; BSR set to: 0
 16596                           ;incstack = 0
 16597  001402  0100               	movlb	0	; () banked
 16598  001404  EE20 F004          	lfsr	2,4
 16599  001408  51C4               	movf	f_lseek@fp& (0+255),w,b
 16600  00140A  26D9               	addwf	fsr2l,f,c
 16601  00140C  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 16602  00140E  22DA               	addwfc	fsr2h,f,c
 16603  001410  CFDE F067          	movff	postinc2,validate@fs
 16604  001414  CFDD F068          	movff	postdec2,validate@fs+1
 16605  001418  C0C4  FFD9         	movff	f_lseek@fp,fsr2l
 16606  00141C  C0C5  FFDA         	movff	f_lseek@fp+1,fsr2h
 16607  001420  CFDE F069          	movff	postinc2,validate@id
 16608  001424  CFDD F06A          	movff	postdec2,validate@id+1
 16609  001428  ECB6  F028         	call	_validate	;wreg free
 16610  00142C  0100               	movlb	0	; () banked
 16611  00142E  6FD6               	movwf	f_lseek@res& (0+255),b
 16612                           
 16613                           ; BSR set to: 0
 16614                           ;tff.c: 1143: if (res != FR_OK) return res;
 16615  001430  51D6               	movf	f_lseek@res& (0+255),w,b
 16616  001432  A4D8               	btfss	status,2,c
 16617  001434  0012               	return	
 16618                           
 16619                           ; BSR set to: 0
 16620                           ;tff.c: 1144: if (fp->flag & 0x80) return FR_RW_ERROR;
 16621                           
 16622                           ; BSR set to: 0
 16623                           
 16624                           ; BSR set to: 0
 16625                           ;	Return value of _f_lseek is never used
 16626  001436  EE20 F002          	lfsr	2,2
 16627  00143A  51C4               	movf	f_lseek@fp& (0+255),w,b
 16628  00143C  26D9               	addwf	fsr2l,f,c
 16629  00143E  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 16630  001440  22DA               	addwfc	fsr2h,f,c
 16631  001442  BEDF               	btfsc	indf2,7,c
 16632  001444  0012               	return	
 16633                           
 16634                           ; BSR set to: 0
 16635                           ;tff.c: 1145: if (ofs > fp->fsize
 16636                           ;tff.c: 1147: && !(fp->flag & 0x02)
 16637                           ;tff.c: 1149: ) ofs = fp->fsize;
 16638                           
 16639                           ; BSR set to: 0
 16640                           
 16641                           ; BSR set to: 0
 16642                           ;	Return value of _f_lseek is never used
 16643  001446  EE20 F00A          	lfsr	2,10
 16644  00144A  51C4               	movf	f_lseek@fp& (0+255),w,b
 16645  00144C  26D9               	addwf	fsr2l,f,c
 16646  00144E  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 16647  001450  22DA               	addwfc	fsr2h,f,c
 16648  001452  51C6               	movf	f_lseek@ofs& (0+255),w,b
 16649  001454  5CDE               	subwf	postinc2,w,c
 16650  001456  51C7               	movf	(f_lseek@ofs+1)& (0+255),w,b
 16651  001458  58DE               	subwfb	postinc2,w,c
 16652  00145A  51C8               	movf	(f_lseek@ofs+2)& (0+255),w,b
 16653  00145C  58DE               	subwfb	postinc2,w,c
 16654  00145E  51C9               	movf	(f_lseek@ofs+3)& (0+255),w,b
 16655  001460  58DE               	subwfb	postinc2,w,c
 16656  001462  B0D8               	btfsc	status,0,c
 16657  001464  D016               	goto	l1347
 16658                           
 16659                           ; BSR set to: 0
 16660  001466  EE20 F002          	lfsr	2,2
 16661  00146A  51C4               	movf	f_lseek@fp& (0+255),w,b
 16662  00146C  26D9               	addwf	fsr2l,f,c
 16663  00146E  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 16664  001470  22DA               	addwfc	fsr2h,f,c
 16665  001472  B2DF               	btfsc	indf2,1,c
 16666  001474  D00E               	goto	l1347
 16667                           
 16668                           ; BSR set to: 0
 16669  001476  EE20 F00A          	lfsr	2,10
 16670  00147A  51C4               	movf	f_lseek@fp& (0+255),w,b
 16671  00147C  26D9               	addwf	fsr2l,f,c
 16672  00147E  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 16673  001480  22DA               	addwfc	fsr2h,f,c
 16674  001482  CFDE F0C6          	movff	postinc2,f_lseek@ofs
 16675  001486  CFDE F0C7          	movff	postinc2,f_lseek@ofs+1
 16676  00148A  CFDE F0C8          	movff	postinc2,f_lseek@ofs+2
 16677  00148E  CFDE F0C9          	movff	postinc2,f_lseek@ofs+3
 16678  001492                     l1347:
 16679                           
 16680                           ; BSR set to: 0
 16681                           ;tff.c: 1151: ifptr = fp->fptr;
 16682  001492  EE20 F006          	lfsr	2,6
 16683  001496  51C4               	movf	f_lseek@fp& (0+255),w,b
 16684  001498  26D9               	addwf	fsr2l,f,c
 16685  00149A  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 16686  00149C  22DA               	addwfc	fsr2h,f,c
 16687  00149E  CFDE F0D7          	movff	postinc2,f_lseek@ifptr
 16688  0014A2  CFDE F0D8          	movff	postinc2,f_lseek@ifptr+1
 16689  0014A6  CFDE F0D9          	movff	postinc2,f_lseek@ifptr+2
 16690  0014AA  CFDE F0DA          	movff	postinc2,f_lseek@ifptr+3
 16691                           
 16692                           ;tff.c: 1152: fp->fptr = 0; fp->csect = 255;
 16693  0014AE  EE20 F006          	lfsr	2,6
 16694  0014B2  51C4               	movf	f_lseek@fp& (0+255),w,b
 16695  0014B4  26D9               	addwf	fsr2l,f,c
 16696  0014B6  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 16697  0014B8  22DA               	addwfc	fsr2h,f,c
 16698  0014BA  6ADE               	clrf	postinc2,c
 16699  0014BC  6ADE               	clrf	postinc2,c
 16700  0014BE  6ADE               	clrf	postinc2,c
 16701  0014C0  6ADD               	clrf	postdec2,c
 16702  0014C2  EE20 F003          	lfsr	2,3
 16703  0014C6  51C4               	movf	f_lseek@fp& (0+255),w,b
 16704  0014C8  26D9               	addwf	fsr2l,f,c
 16705  0014CA  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 16706  0014CC  22DA               	addwfc	fsr2h,f,c
 16707  0014CE  0EFF               	movlw	255
 16708  0014D0  6EDF               	movwf	indf2,c
 16709                           
 16710                           ; BSR set to: 0
 16711                           ;tff.c: 1153: if (ofs > 0) {
 16712  0014D2  51C6               	movf	f_lseek@ofs& (0+255),w,b
 16713  0014D4  11C7               	iorwf	(f_lseek@ofs+1)& (0+255),w,b
 16714  0014D6  11C8               	iorwf	(f_lseek@ofs+2)& (0+255),w,b
 16715  0014D8  11C9               	iorwf	(f_lseek@ofs+3)& (0+255),w,b
 16716  0014DA  B4D8               	btfsc	status,2,c
 16717  0014DC  D19B               	goto	l1364
 16718                           
 16719                           ; BSR set to: 0
 16720                           ;tff.c: 1154: csize = (DWORD)fp->fs->csize * 512U;
 16721  0014DE  EE20 F004          	lfsr	2,4
 16722  0014E2  51C4               	movf	f_lseek@fp& (0+255),w,b
 16723  0014E4  26D9               	addwf	fsr2l,f,c
 16724  0014E6  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 16725  0014E8  22DA               	addwfc	fsr2h,f,c
 16726  0014EA  EE10 F01D          	lfsr	1,29
 16727  0014EE  50DE               	movf	postinc2,w,c
 16728  0014F0  26E1               	addwf	fsr1l,f,c
 16729  0014F2  50DD               	movf	postdec2,w,c
 16730  0014F4  22E2               	addwfc	fsr1h,f,c
 16731  0014F6  50E7               	movf	indf1,w,c
 16732  0014F8  6FCA               	movwf	??_f_lseek& (0+255),b
 16733  0014FA  C0CA  F0CB         	movff	??_f_lseek,??_f_lseek+1
 16734  0014FE  6BCC               	clrf	(??_f_lseek+2)& (0+255),b
 16735  001500  6BCD               	clrf	(??_f_lseek+3)& (0+255),b
 16736  001502  6BCE               	clrf	(??_f_lseek+4)& (0+255),b
 16737  001504  0E09               	movlw	9
 16738  001506                     u15015:
 16739  001506  90D8               	bcf	status,0,c
 16740  001508  37CB               	rlcf	(??_f_lseek+1)& (0+255),f,b
 16741  00150A  37CC               	rlcf	(??_f_lseek+2)& (0+255),f,b
 16742  00150C  37CD               	rlcf	(??_f_lseek+3)& (0+255),f,b
 16743  00150E  37CE               	rlcf	(??_f_lseek+4)& (0+255),f,b
 16744  001510  2EE8               	decfsz	wreg,f,c
 16745  001512  D7F9               	goto	u15015
 16746  001514  C0CB  F0DB         	movff	??_f_lseek+1,f_lseek@csize
 16747  001518  C0CC  F0DC         	movff	??_f_lseek+2,f_lseek@csize+1
 16748  00151C  C0CD  F0DD         	movff	??_f_lseek+3,f_lseek@csize+2
 16749  001520  C0CE  F0DE         	movff	??_f_lseek+4,f_lseek@csize+3
 16750                           
 16751                           ; BSR set to: 0
 16752                           ;tff.c: 1155: if (ifptr > 0 &&
 16753                           ;tff.c: 1156: (ofs - 1) / csize >= (ifptr - 1) / csize) {
 16754  001524  51D7               	movf	f_lseek@ifptr& (0+255),w,b
 16755  001526  11D8               	iorwf	(f_lseek@ifptr+1)& (0+255),w,b
 16756  001528  11D9               	iorwf	(f_lseek@ifptr+2)& (0+255),w,b
 16757  00152A  11DA               	iorwf	(f_lseek@ifptr+3)& (0+255),w,b
 16758  00152C  B4D8               	btfsc	status,2,c
 16759  00152E  D08F               	goto	l1349
 16760                           
 16761                           ; BSR set to: 0
 16762  001530  0EFF               	movlw	255
 16763  001532  25C6               	addwf	f_lseek@ofs& (0+255),w,b
 16764  001534  6F60               	movwf	___lldiv@dividend& (0+255),b
 16765  001536  0EFF               	movlw	255
 16766  001538  21C7               	addwfc	(f_lseek@ofs+1)& (0+255),w,b
 16767  00153A  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
 16768  00153C  0EFF               	movlw	255
 16769  00153E  21C8               	addwfc	(f_lseek@ofs+2)& (0+255),w,b
 16770  001540  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
 16771  001542  0EFF               	movlw	255
 16772  001544  21C9               	addwfc	(f_lseek@ofs+3)& (0+255),w,b
 16773  001546  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
 16774  001548  C0DB  F064         	movff	f_lseek@csize,___lldiv@divisor
 16775  00154C  C0DC  F065         	movff	f_lseek@csize+1,___lldiv@divisor+1
 16776  001550  C0DD  F066         	movff	f_lseek@csize+2,___lldiv@divisor+2
 16777  001554  C0DE  F067         	movff	f_lseek@csize+3,___lldiv@divisor+3
 16778  001558  ECA2  F025         	call	___lldiv	;wreg free
 16779  00155C  C060  F0CA         	movff	?___lldiv,??_f_lseek
 16780  001560  C061  F0CB         	movff	?___lldiv+1,??_f_lseek+1
 16781  001564  C062  F0CC         	movff	?___lldiv+2,??_f_lseek+2
 16782  001568  C063  F0CD         	movff	?___lldiv+3,??_f_lseek+3
 16783  00156C  0EFF               	movlw	255
 16784  00156E  0100               	movlb	0	; () banked
 16785  001570  25D7               	addwf	f_lseek@ifptr& (0+255),w,b
 16786  001572  6F60               	movwf	___lldiv@dividend& (0+255),b
 16787  001574  0EFF               	movlw	255
 16788  001576  21D8               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 16789  001578  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
 16790  00157A  0EFF               	movlw	255
 16791  00157C  21D9               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 16792  00157E  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
 16793  001580  0EFF               	movlw	255
 16794  001582  21DA               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 16795  001584  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
 16796  001586  C0DB  F064         	movff	f_lseek@csize,___lldiv@divisor
 16797  00158A  C0DC  F065         	movff	f_lseek@csize+1,___lldiv@divisor+1
 16798  00158E  C0DD  F066         	movff	f_lseek@csize+2,___lldiv@divisor+2
 16799  001592  C0DE  F067         	movff	f_lseek@csize+3,___lldiv@divisor+3
 16800  001596  ECA2  F025         	call	___lldiv	;wreg free
 16801  00159A  0100               	movlb	0	; () banked
 16802  00159C  5160               	movf	?___lldiv& (0+255),w,b
 16803  00159E  5DCA               	subwf	??_f_lseek& (0+255),w,b
 16804  0015A0  5161               	movf	(?___lldiv+1)& (0+255),w,b
 16805  0015A2  59CB               	subwfb	(??_f_lseek+1)& (0+255),w,b
 16806  0015A4  5162               	movf	(?___lldiv+2)& (0+255),w,b
 16807  0015A6  59CC               	subwfb	(??_f_lseek+2)& (0+255),w,b
 16808  0015A8  5163               	movf	(?___lldiv+3)& (0+255),w,b
 16809  0015AA  59CD               	subwfb	(??_f_lseek+3)& (0+255),w,b
 16810  0015AC  A0D8               	btfss	status,0,c
 16811  0015AE  D04F               	goto	l1349
 16812                           
 16813                           ; BSR set to: 0
 16814                           ;tff.c: 1157: fp->fptr = (ifptr - 1) & ~(csize - 1);
 16815  0015B0  0EFF               	movlw	255
 16816  0015B2  25DB               	addwf	f_lseek@csize& (0+255),w,b
 16817  0015B4  6FCA               	movwf	??_f_lseek& (0+255),b
 16818  0015B6  0EFF               	movlw	255
 16819  0015B8  21DC               	addwfc	(f_lseek@csize+1)& (0+255),w,b
 16820  0015BA  6FCB               	movwf	(??_f_lseek+1)& (0+255),b
 16821  0015BC  0EFF               	movlw	255
 16822  0015BE  21DD               	addwfc	(f_lseek@csize+2)& (0+255),w,b
 16823  0015C0  6FCC               	movwf	(??_f_lseek+2)& (0+255),b
 16824  0015C2  0EFF               	movlw	255
 16825  0015C4  21DE               	addwfc	(f_lseek@csize+3)& (0+255),w,b
 16826  0015C6  6FCD               	movwf	(??_f_lseek+3)& (0+255),b
 16827  0015C8  1FCA               	comf	??_f_lseek& (0+255),f,b
 16828  0015CA  1FCB               	comf	(??_f_lseek+1)& (0+255),f,b
 16829  0015CC  1FCC               	comf	(??_f_lseek+2)& (0+255),f,b
 16830  0015CE  1FCD               	comf	(??_f_lseek+3)& (0+255),f,b
 16831  0015D0  0EFF               	movlw	255
 16832  0015D2  25D7               	addwf	f_lseek@ifptr& (0+255),w,b
 16833  0015D4  6FCE               	movwf	(??_f_lseek+4)& (0+255),b
 16834  0015D6  0EFF               	movlw	255
 16835  0015D8  21D8               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 16836  0015DA  6FCF               	movwf	(??_f_lseek+5)& (0+255),b
 16837  0015DC  0EFF               	movlw	255
 16838  0015DE  21D9               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 16839  0015E0  6FD0               	movwf	(??_f_lseek+6)& (0+255),b
 16840  0015E2  0EFF               	movlw	255
 16841  0015E4  21DA               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 16842  0015E6  6FD1               	movwf	(??_f_lseek+7)& (0+255),b
 16843  0015E8  51CA               	movf	??_f_lseek& (0+255),w,b
 16844  0015EA  15CE               	andwf	(??_f_lseek+4)& (0+255),w,b
 16845  0015EC  6FD2               	movwf	(??_f_lseek+8)& (0+255),b
 16846  0015EE  51CB               	movf	(??_f_lseek+1)& (0+255),w,b
 16847  0015F0  15CF               	andwf	(??_f_lseek+5)& (0+255),w,b
 16848  0015F2  6FD3               	movwf	(??_f_lseek+9)& (0+255),b
 16849  0015F4  51CC               	movf	(??_f_lseek+2)& (0+255),w,b
 16850  0015F6  15D0               	andwf	(??_f_lseek+6)& (0+255),w,b
 16851  0015F8  6FD4               	movwf	(??_f_lseek+10)& (0+255),b
 16852  0015FA  51CD               	movf	(??_f_lseek+3)& (0+255),w,b
 16853  0015FC  15D1               	andwf	(??_f_lseek+7)& (0+255),w,b
 16854  0015FE  6FD5               	movwf	(??_f_lseek+11)& (0+255),b
 16855  001600  EE20 F006          	lfsr	2,6
 16856  001604  51C4               	movf	f_lseek@fp& (0+255),w,b
 16857  001606  26D9               	addwf	fsr2l,f,c
 16858  001608  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 16859  00160A  22DA               	addwfc	fsr2h,f,c
 16860  00160C  C0D2  FFDE         	movff	??_f_lseek+8,postinc2
 16861  001610  C0D3  FFDE         	movff	??_f_lseek+9,postinc2
 16862  001614  C0D4  FFDE         	movff	??_f_lseek+10,postinc2
 16863  001618  C0D5  FFDE         	movff	??_f_lseek+11,postinc2
 16864                           
 16865                           ;tff.c: 1158: ofs -= fp->fptr;
 16866  00161C  EE20 F006          	lfsr	2,6
 16867  001620  51C4               	movf	f_lseek@fp& (0+255),w,b
 16868  001622  26D9               	addwf	fsr2l,f,c
 16869  001624  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 16870  001626  22DA               	addwfc	fsr2h,f,c
 16871  001628  50DE               	movf	postinc2,w,c
 16872  00162A  5FC6               	subwf	f_lseek@ofs& (0+255),f,b
 16873  00162C  50DE               	movf	postinc2,w,c
 16874  00162E  5BC7               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 16875  001630  50DE               	movf	postinc2,w,c
 16876  001632  5BC8               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 16877  001634  50DD               	movf	postdec2,w,c
 16878  001636  5BC9               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 16879                           
 16880                           ;tff.c: 1159: clust = fp->curr_clust;
 16881  001638  EE20 F010          	lfsr	2,16
 16882  00163C  51C4               	movf	f_lseek@fp& (0+255),w,b
 16883  00163E  26D9               	addwf	fsr2l,f,c
 16884  001640  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 16885  001642  22DA               	addwfc	fsr2h,f,c
 16886  001644  CFDE F0DF          	movff	postinc2,f_lseek@clust
 16887  001648  CFDD F0E0          	movff	postdec2,f_lseek@clust+1
 16888                           
 16889                           ;tff.c: 1160: } else {
 16890  00164C  D031               	goto	l1350
 16891  00164E                     l1349:
 16892                           
 16893                           ; BSR set to: 0
 16894                           ;tff.c: 1161: clust = fp->org_clust;
 16895                           
 16896                           ; BSR set to: 0
 16897  00164E  EE20 F00E          	lfsr	2,14
 16898  001652  51C4               	movf	f_lseek@fp& (0+255),w,b
 16899  001654  26D9               	addwf	fsr2l,f,c
 16900  001656  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 16901  001658  22DA               	addwfc	fsr2h,f,c
 16902  00165A  CFDE F0DF          	movff	postinc2,f_lseek@clust
 16903  00165E  CFDD F0E0          	movff	postdec2,f_lseek@clust+1
 16904                           
 16905                           ; BSR set to: 0
 16906                           ;tff.c: 1163: if (clust == 0) {
 16907  001662  51DF               	movf	f_lseek@clust& (0+255),w,b
 16908  001664  11E0               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 16909  001666  A4D8               	btfss	status,2,c
 16910  001668  D019               	goto	l1351
 16911                           
 16912                           ; BSR set to: 0
 16913                           ;tff.c: 1164: clust = create_chain(0);
 16914  00166A  0E00               	movlw	0
 16915  00166C  6FB7               	movwf	(create_chain@clust+1)& (0+255),b
 16916  00166E  0E00               	movlw	0
 16917  001670  6FB6               	movwf	create_chain@clust& (0+255),b
 16918  001672  ECAD  F019         	call	_create_chain	;wreg free
 16919  001676  C0B6  F0DF         	movff	?_create_chain,f_lseek@clust
 16920  00167A  C0B7  F0E0         	movff	?_create_chain+1,f_lseek@clust+1
 16921                           
 16922                           ;tff.c: 1165: if (clust == 1) goto fk_error;
 16923  00167E  0100               	movlb	0	; () banked
 16924  001680  05DF               	decf	f_lseek@clust& (0+255),w,b
 16925  001682  11E0               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 16926  001684  B4D8               	btfsc	status,2,c
 16927  001686  D0F9               	goto	l1353
 16928                           
 16929                           ; BSR set to: 0
 16930                           ;tff.c: 1166: fp->org_clust = clust;
 16931                           
 16932                           ; BSR set to: 0
 16933                           
 16934                           ; BSR set to: 0
 16935  001688  EE20 F00E          	lfsr	2,14
 16936  00168C  51C4               	movf	f_lseek@fp& (0+255),w,b
 16937  00168E  26D9               	addwf	fsr2l,f,c
 16938  001690  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 16939  001692  22DA               	addwfc	fsr2h,f,c
 16940  001694  C0DF  FFDE         	movff	f_lseek@clust,postinc2
 16941  001698  C0E0  FFDD         	movff	f_lseek@clust+1,postdec2
 16942  00169C                     l1351:
 16943                           
 16944                           ; BSR set to: 0
 16945                           ;tff.c: 1167: }
 16946                           ;tff.c: 1169: fp->curr_clust = clust;
 16947  00169C  EE20 F010          	lfsr	2,16
 16948  0016A0  51C4               	movf	f_lseek@fp& (0+255),w,b
 16949  0016A2  26D9               	addwf	fsr2l,f,c
 16950  0016A4  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 16951  0016A6  22DA               	addwfc	fsr2h,f,c
 16952  0016A8  C0DF  FFDE         	movff	f_lseek@clust,postinc2
 16953  0016AC  C0E0  FFDD         	movff	f_lseek@clust+1,postdec2
 16954  0016B0                     l1350:
 16955                           
 16956                           ; BSR set to: 0
 16957                           ;tff.c: 1170: }
 16958                           ;tff.c: 1171: if (clust != 0) {
 16959                           
 16960                           ; BSR set to: 0
 16961  0016B0  51DF               	movf	f_lseek@clust& (0+255),w,b
 16962  0016B2  11E0               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 16963  0016B4  A4D8               	btfss	status,2,c
 16964  0016B6  D064               	goto	l1355
 16965  0016B8  D0AD               	goto	l1364
 16966  0016BA                     
 16967                           ; BSR set to: 0
 16968                           ;tff.c: 1174: if (fp->flag & 0x02) {
 16969                           
 16970                           ; BSR set to: 0
 16971  0016BA  EE20 F002          	lfsr	2,2
 16972  0016BE  51C4               	movf	f_lseek@fp& (0+255),w,b
 16973  0016C0  26D9               	addwf	fsr2l,f,c
 16974  0016C2  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 16975  0016C4  22DA               	addwfc	fsr2h,f,c
 16976  0016C6  A2DF               	btfss	indf2,1,c
 16977  0016C8  D018               	goto	l1357
 16978                           
 16979                           ; BSR set to: 0
 16980                           ;tff.c: 1175: clust = create_chain(clust);
 16981  0016CA  C0DF  F0B6         	movff	f_lseek@clust,create_chain@clust
 16982  0016CE  C0E0  F0B7         	movff	f_lseek@clust+1,create_chain@clust+1
 16983  0016D2  ECAD  F019         	call	_create_chain	;wreg free
 16984  0016D6  C0B6  F0DF         	movff	?_create_chain,f_lseek@clust
 16985  0016DA  C0B7  F0E0         	movff	?_create_chain+1,f_lseek@clust+1
 16986                           
 16987                           ;tff.c: 1176: if (clust == 0) {
 16988  0016DE  0100               	movlb	0	; () banked
 16989  0016E0  51DF               	movf	f_lseek@clust& (0+255),w,b
 16990  0016E2  11E0               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 16991  0016E4  A4D8               	btfss	status,2,c
 16992  0016E6  D013               	goto	l1360
 16993                           
 16994                           ; BSR set to: 0
 16995                           ;tff.c: 1177: ofs = csize; break;
 16996  0016E8  C0DB  F0C6         	movff	f_lseek@csize,f_lseek@ofs
 16997  0016EC  C0DC  F0C7         	movff	f_lseek@csize+1,f_lseek@ofs+1
 16998  0016F0  C0DD  F0C8         	movff	f_lseek@csize+2,f_lseek@ofs+2
 16999  0016F4  C0DE  F0C9         	movff	f_lseek@csize+3,f_lseek@ofs+3
 17000  0016F8  D04D               	goto	u15110
 17001  0016FA                     l1357:
 17002                           
 17003                           ; BSR set to: 0
 17004                           ;tff.c: 1181: clust = get_cluster(clust);
 17005                           
 17006                           ; BSR set to: 0
 17007  0016FA  C0DF  F0A0         	movff	f_lseek@clust,get_cluster@clust
 17008  0016FE  C0E0  F0A1         	movff	f_lseek@clust+1,get_cluster@clust+1
 17009  001702  ECCD  F016         	call	_get_cluster	;wreg free
 17010  001706  C0A0  F0DF         	movff	?_get_cluster,f_lseek@clust
 17011  00170A  C0A1  F0E0         	movff	?_get_cluster+1,f_lseek@clust+1
 17012  00170E                     l1360:
 17013                           
 17014                           ;tff.c: 1182: if (clust < 2 || clust >= fp->fs->max_clust) goto fk_error;
 17015  00170E  0100               	movlb	0	; () banked
 17016  001710  51E0               	movf	(f_lseek@clust+1)& (0+255),w,b
 17017  001712  E104               	bnz	u15090
 17018  001714  0E02               	movlw	2
 17019  001716  5DDF               	subwf	f_lseek@clust& (0+255),w,b
 17020  001718  A0D8               	btfss	status,0,c
 17021  00171A  D0AF               	goto	l1353
 17022  00171C                     u15090:
 17023                           
 17024                           ; BSR set to: 0
 17025  00171C  EE20 F004          	lfsr	2,4
 17026  001720  51C4               	movf	f_lseek@fp& (0+255),w,b
 17027  001722  26D9               	addwf	fsr2l,f,c
 17028  001724  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17029  001726  22DA               	addwfc	fsr2h,f,c
 17030  001728  EE10 F016          	lfsr	1,22
 17031  00172C  50DE               	movf	postinc2,w,c
 17032  00172E  26E1               	addwf	fsr1l,f,c
 17033  001730  50DD               	movf	postdec2,w,c
 17034  001732  22E2               	addwfc	fsr1h,f,c
 17035  001734  50E6               	movf	postinc1,w,c
 17036  001736  5DDF               	subwf	f_lseek@clust& (0+255),w,b
 17037  001738  50E6               	movf	postinc1,w,c
 17038  00173A  59E0               	subwfb	(f_lseek@clust+1)& (0+255),w,b
 17039  00173C  B0D8               	btfsc	status,0,c
 17040  00173E  D09D               	goto	l1353
 17041                           
 17042                           ; BSR set to: 0
 17043                           ;tff.c: 1183: fp->curr_clust = clust;
 17044                           
 17045                           ; BSR set to: 0
 17046                           
 17047                           ; BSR set to: 0
 17048  001740  EE20 F010          	lfsr	2,16
 17049  001744  51C4               	movf	f_lseek@fp& (0+255),w,b
 17050  001746  26D9               	addwf	fsr2l,f,c
 17051  001748  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17052  00174A  22DA               	addwfc	fsr2h,f,c
 17053  00174C  C0DF  FFDE         	movff	f_lseek@clust,postinc2
 17054  001750  C0E0  FFDD         	movff	f_lseek@clust+1,postdec2
 17055                           
 17056                           ;tff.c: 1184: fp->fptr += csize;
 17057  001754  EE20 F006          	lfsr	2,6
 17058  001758  51C4               	movf	f_lseek@fp& (0+255),w,b
 17059  00175A  26D9               	addwf	fsr2l,f,c
 17060  00175C  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17061  00175E  22DA               	addwfc	fsr2h,f,c
 17062  001760  51DB               	movf	f_lseek@csize& (0+255),w,b
 17063  001762  26DE               	addwf	postinc2,f,c
 17064  001764  51DC               	movf	(f_lseek@csize+1)& (0+255),w,b
 17065  001766  22DE               	addwfc	postinc2,f,c
 17066  001768  51DD               	movf	(f_lseek@csize+2)& (0+255),w,b
 17067  00176A  22DE               	addwfc	postinc2,f,c
 17068  00176C  51DE               	movf	(f_lseek@csize+3)& (0+255),w,b
 17069  00176E  22DE               	addwfc	postinc2,f,c
 17070                           
 17071                           ; BSR set to: 0
 17072                           ;tff.c: 1185: ofs -= csize;
 17073  001770  51DB               	movf	f_lseek@csize& (0+255),w,b
 17074  001772  5FC6               	subwf	f_lseek@ofs& (0+255),f,b
 17075  001774  51DC               	movf	(f_lseek@csize+1)& (0+255),w,b
 17076  001776  5BC7               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 17077  001778  51DD               	movf	(f_lseek@csize+2)& (0+255),w,b
 17078  00177A  5BC8               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 17079  00177C  51DE               	movf	(f_lseek@csize+3)& (0+255),w,b
 17080  00177E  5BC9               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 17081  001780                     l1355:
 17082                           
 17083                           ; BSR set to: 0
 17084                           
 17085                           ; BSR set to: 0
 17086  001780  51C6               	movf	f_lseek@ofs& (0+255),w,b
 17087  001782  5DDB               	subwf	f_lseek@csize& (0+255),w,b
 17088  001784  51C7               	movf	(f_lseek@ofs+1)& (0+255),w,b
 17089  001786  59DC               	subwfb	(f_lseek@csize+1)& (0+255),w,b
 17090  001788  51C8               	movf	(f_lseek@ofs+2)& (0+255),w,b
 17091  00178A  59DD               	subwfb	(f_lseek@csize+2)& (0+255),w,b
 17092  00178C  51C9               	movf	(f_lseek@ofs+3)& (0+255),w,b
 17093  00178E  59DE               	subwfb	(f_lseek@csize+3)& (0+255),w,b
 17094  001790  A0D8               	btfss	status,0,c
 17095  001792  D793               	goto	l1356
 17096  001794                     u15110:
 17097                           
 17098                           ; BSR set to: 0
 17099                           ;tff.c: 1186: }
 17100                           ;tff.c: 1187: fp->fptr += ofs;
 17101                           
 17102                           ; BSR set to: 0
 17103  001794  EE20 F006          	lfsr	2,6
 17104  001798  51C4               	movf	f_lseek@fp& (0+255),w,b
 17105  00179A  26D9               	addwf	fsr2l,f,c
 17106  00179C  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17107  00179E  22DA               	addwfc	fsr2h,f,c
 17108  0017A0  51C6               	movf	f_lseek@ofs& (0+255),w,b
 17109  0017A2  26DE               	addwf	postinc2,f,c
 17110  0017A4  51C7               	movf	(f_lseek@ofs+1)& (0+255),w,b
 17111  0017A6  22DE               	addwfc	postinc2,f,c
 17112  0017A8  51C8               	movf	(f_lseek@ofs+2)& (0+255),w,b
 17113  0017AA  22DE               	addwfc	postinc2,f,c
 17114  0017AC  51C9               	movf	(f_lseek@ofs+3)& (0+255),w,b
 17115  0017AE  22DE               	addwfc	postinc2,f,c
 17116                           
 17117                           ;tff.c: 1188: fp->csect = (BYTE)(ofs / 512U);
 17118  0017B0  EE20 F003          	lfsr	2,3
 17119  0017B4  51C4               	movf	f_lseek@fp& (0+255),w,b
 17120  0017B6  26D9               	addwf	fsr2l,f,c
 17121  0017B8  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17122  0017BA  22DA               	addwfc	fsr2h,f,c
 17123  0017BC  C0C6  F0CA         	movff	f_lseek@ofs,??_f_lseek
 17124  0017C0  C0C7  F0CB         	movff	f_lseek@ofs+1,??_f_lseek+1
 17125  0017C4  C0C8  F0CC         	movff	f_lseek@ofs+2,??_f_lseek+2
 17126  0017C8  C0C9  F0CD         	movff	f_lseek@ofs+3,??_f_lseek+3
 17127  0017CC  0E0A               	movlw	10
 17128  0017CE  D005               	goto	u15120
 17129  0017D0                     u15125:
 17130  0017D0  90D8               	bcf	status,0,c
 17131  0017D2  33CD               	rrcf	(??_f_lseek+3)& (0+255),f,b
 17132  0017D4  33CC               	rrcf	(??_f_lseek+2)& (0+255),f,b
 17133  0017D6  33CB               	rrcf	(??_f_lseek+1)& (0+255),f,b
 17134  0017D8  33CA               	rrcf	??_f_lseek& (0+255),f,b
 17135  0017DA                     u15120:
 17136  0017DA  2EE8               	decfsz	wreg,f,c
 17137  0017DC  D7F9               	goto	u15125
 17138  0017DE  51CA               	movf	??_f_lseek& (0+255),w,b
 17139  0017E0  6EDF               	movwf	indf2,c
 17140                           
 17141                           ; BSR set to: 0
 17142                           ;tff.c: 1189: if (ofs % 512U) fp->csect++;
 17143  0017E2  0EFF               	movlw	255
 17144  0017E4  15C6               	andwf	f_lseek@ofs& (0+255),w,b
 17145  0017E6  6FCA               	movwf	??_f_lseek& (0+255),b
 17146  0017E8  0E01               	movlw	1
 17147  0017EA  15C7               	andwf	(f_lseek@ofs+1)& (0+255),w,b
 17148  0017EC  6FCB               	movwf	(??_f_lseek+1)& (0+255),b
 17149  0017EE  0E00               	movlw	0
 17150  0017F0  15C8               	andwf	(f_lseek@ofs+2)& (0+255),w,b
 17151  0017F2  6FCC               	movwf	(??_f_lseek+2)& (0+255),b
 17152  0017F4  0E00               	movlw	0
 17153  0017F6  15C9               	andwf	(f_lseek@ofs+3)& (0+255),w,b
 17154  0017F8  6FCD               	movwf	(??_f_lseek+3)& (0+255),b
 17155  0017FA  51CA               	movf	??_f_lseek& (0+255),w,b
 17156  0017FC  11CB               	iorwf	(??_f_lseek+1)& (0+255),w,b
 17157  0017FE  11CC               	iorwf	(??_f_lseek+2)& (0+255),w,b
 17158  001800  11CD               	iorwf	(??_f_lseek+3)& (0+255),w,b
 17159  001802  B4D8               	btfsc	status,2,c
 17160  001804  D007               	goto	l1364
 17161                           
 17162                           ; BSR set to: 0
 17163  001806  EE20 F003          	lfsr	2,3
 17164  00180A  51C4               	movf	f_lseek@fp& (0+255),w,b
 17165  00180C  26D9               	addwf	fsr2l,f,c
 17166  00180E  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17167  001810  22DA               	addwfc	fsr2h,f,c
 17168  001812  2ADF               	incf	indf2,f,c
 17169  001814                     l1364:
 17170                           
 17171                           ; BSR set to: 0
 17172                           ;tff.c: 1190: }
 17173                           ;tff.c: 1191: }
 17174                           ;tff.c: 1194: if (fp->fptr > fp->fsize) {
 17175                           
 17176                           ; BSR set to: 0
 17177                           
 17178                           ; BSR set to: 0
 17179                           
 17180                           ; BSR set to: 0
 17181  001814  EE20 F006          	lfsr	2,6
 17182  001818  51C4               	movf	f_lseek@fp& (0+255),w,b
 17183  00181A  26D9               	addwf	fsr2l,f,c
 17184  00181C  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17185  00181E  22DA               	addwfc	fsr2h,f,c
 17186  001820  EE10 F00A          	lfsr	1,10
 17187  001824  51C4               	movf	f_lseek@fp& (0+255),w,b
 17188  001826  26E1               	addwf	fsr1l,f,c
 17189  001828  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17190  00182A  22E2               	addwfc	fsr1h,f,c
 17191  00182C  50DE               	movf	postinc2,w,c
 17192  00182E  5CE6               	subwf	postinc1,w,c
 17193  001830  50DE               	movf	postinc2,w,c
 17194  001832  58E6               	subwfb	postinc1,w,c
 17195  001834  50DE               	movf	postinc2,w,c
 17196  001836  58E6               	subwfb	postinc1,w,c
 17197  001838  50DE               	movf	postinc2,w,c
 17198  00183A  58E6               	subwfb	postinc1,w,c
 17199  00183C  B0D8               	btfsc	status,0,c
 17200  00183E  0012               	return	
 17201                           
 17202                           ; BSR set to: 0
 17203                           ;tff.c: 1195: fp->fsize = fp->fptr;
 17204  001840  EE20 F006          	lfsr	2,6
 17205  001844  51C4               	movf	f_lseek@fp& (0+255),w,b
 17206  001846  26D9               	addwf	fsr2l,f,c
 17207  001848  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17208  00184A  22DA               	addwfc	fsr2h,f,c
 17209  00184C  EE10 F00A          	lfsr	1,10
 17210  001850  51C4               	movf	f_lseek@fp& (0+255),w,b
 17211  001852  26E1               	addwf	fsr1l,f,c
 17212  001854  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17213  001856  22E2               	addwfc	fsr1h,f,c
 17214  001858  CFDE FFE6          	movff	postinc2,postinc1
 17215  00185C  CFDE FFE6          	movff	postinc2,postinc1
 17216  001860  CFDE FFE6          	movff	postinc2,postinc1
 17217  001864  CFDE FFE6          	movff	postinc2,postinc1
 17218                           
 17219                           ; BSR set to: 0
 17220                           ;tff.c: 1196: fp->flag |= 0x20;
 17221  001868  EE20 F002          	lfsr	2,2
 17222  00186C  51C4               	movf	f_lseek@fp& (0+255),w,b
 17223  00186E  26D9               	addwf	fsr2l,f,c
 17224  001870  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17225  001872  22DA               	addwfc	fsr2h,f,c
 17226  001874  0E00               	movlw	0
 17227  001876  8ADB               	bsf	plusw2,5,c
 17228                           
 17229                           ; BSR set to: 0
 17230                           ;tff.c: 1197: }
 17231                           ;tff.c: 1200: return FR_OK;
 17232                           ;	Return value of _f_lseek is never used
 17233                           
 17234                           ; BSR set to: 0
 17235  001878  0012               	return	
 17236  00187A                     l1353:
 17237                           
 17238                           ; BSR set to: 0
 17239                           ;tff.c: 1203: fp->flag |= 0x80;
 17240                           
 17241                           ; BSR set to: 0
 17242  00187A  EE20 F002          	lfsr	2,2
 17243  00187E  51C4               	movf	f_lseek@fp& (0+255),w,b
 17244  001880  26D9               	addwf	fsr2l,f,c
 17245  001882  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 17246  001884  22DA               	addwfc	fsr2h,f,c
 17247  001886  0E00               	movlw	0
 17248  001888  8EDB               	bsf	plusw2,7,c
 17249  00188A  0012               	return	
 17250  00188C                     __end_of_f_lseek:
 17251                           	opt stack 0
 17252                           tosu	equ	0xFFF
 17253                           tosh	equ	0xFFE
 17254                           tosl	equ	0xFFD
 17255                           pclath	equ	0xFFA
 17256                           tblptru	equ	0xFF8
 17257                           tblptrh	equ	0xFF7
 17258                           tblptrl	equ	0xFF6
 17259                           tablat	equ	0xFF5
 17260                           prodh	equ	0xFF4
 17261                           prodl	equ	0xFF3
 17262                           intcon	equ	0xFF2
 17263                           intcon2	equ	0xFF1
 17264                           intcon3	equ	0xFF0
 17265                           indf0	equ	0xFEF
 17266                           postinc0	equ	0xFEE
 17267                           fsr0h	equ	0xFEA
 17268                           fsr0l	equ	0xFE9
 17269                           wreg	equ	0xFE8
 17270                           indf1	equ	0xFE7
 17271                           postinc1	equ	0xFE6
 17272                           postdec1	equ	0xFE5
 17273                           plusw1	equ	0xFE3
 17274                           fsr1h	equ	0xFE2
 17275                           fsr1l	equ	0xFE1
 17276                           indf2	equ	0xFDF
 17277                           postinc2	equ	0xFDE
 17278                           postdec2	equ	0xFDD
 17279                           plusw2	equ	0xFDB
 17280                           fsr2h	equ	0xFDA
 17281                           fsr2l	equ	0xFD9
 17282                           status	equ	0xFD8
 17283                           
 17284 ;; *************** function _create_chain *****************
 17285 ;; Defined at:
 17286 ;;		line 282 in file "bibliotecas/tff.c"
 17287 ;; Parameters:    Size  Location     Type
 17288 ;;  clust           2   86[BANK0 ] unsigned short 
 17289 ;; Auto vars:     Size  Location     Type
 17290 ;;  ncl             2   98[BANK0 ] unsigned short 
 17291 ;;  scl             2   96[BANK0 ] unsigned short 
 17292 ;;  cstat           2   94[BANK0 ] unsigned short 
 17293 ;;  fs              2   92[BANK0 ] PTR struct _FATFS
 17294 ;;		 -> NULL(0), fs(544), 
 17295 ;;  mcl             2   90[BANK0 ] unsigned short 
 17296 ;; Return value:  Size  Location     Type
 17297 ;;                  2   86[BANK0 ] unsigned short 
 17298 ;; Registers used:
 17299 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17300 ;; Tracked objects:
 17301 ;;		On entry : 0/0
 17302 ;;		On exit  : 0/0
 17303 ;;		Unchanged: 0/0
 17304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17305 ;;      Params:         0       2       0       0       0       0       0       0       0
 17306 ;;      Locals:         0      10       0       0       0       0       0       0       0
 17307 ;;      Temps:          0       2       0       0       0       0       0       0       0
 17308 ;;      Totals:         0      14       0       0       0       0       0       0       0
 17309 ;;Total ram usage:       14 bytes
 17310 ;; Hardware stack levels used:    1
 17311 ;; Hardware stack levels required when called:   10
 17312 ;; This function calls:
 17313 ;;		_get_cluster
 17314 ;;		_put_cluster
 17315 ;; This function is called by:
 17316 ;;		_reserve_direntry
 17317 ;;		_f_write
 17318 ;;		_f_lseek
 17319 ;; This function uses a non-reentrant model
 17320 ;;
 17321                           
 17322                           	psect	text59
 17323  00335A                     __ptext59:
 17324                           	opt stack 0
 17325  00335A                     _create_chain:
 17326                           	opt stack 13
 17327                           
 17328                           ;tff.c: 286: CLUST cstat, ncl, scl, mcl;
 17329                           ;tff.c: 287: FATFS *fs = FatFs;
 17330                           
 17331                           ; BSR set to: 0
 17332                           ;incstack = 0
 17333  00335A  C0FA  F0BC         	movff	_FatFs,create_chain@fs
 17334  00335E  C0FB  F0BD         	movff	_FatFs+1,create_chain@fs+1
 17335                           
 17336                           ;tff.c: 290: mcl = fs->max_clust;
 17337  003362  0100               	movlb	0	; () banked
 17338  003364  EE20 F016          	lfsr	2,22
 17339  003368  51BC               	movf	create_chain@fs& (0+255),w,b
 17340  00336A  26D9               	addwf	fsr2l,f,c
 17341  00336C  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 17342  00336E  22DA               	addwfc	fsr2h,f,c
 17343  003370  CFDE F0BA          	movff	postinc2,create_chain@mcl
 17344  003374  CFDD F0BB          	movff	postdec2,create_chain@mcl+1
 17345                           
 17346                           ; BSR set to: 0
 17347                           ;tff.c: 291: if (clust == 0) {
 17348  003378  51B6               	movf	create_chain@clust& (0+255),w,b
 17349  00337A  11B7               	iorwf	(create_chain@clust+1)& (0+255),w,b
 17350  00337C  A4D8               	btfss	status,2,c
 17351  00337E  D01B               	goto	l1068
 17352                           
 17353                           ; BSR set to: 0
 17354                           ;tff.c: 292: scl = fs->last_clust;
 17355  003380  EE20 F018          	lfsr	2,24
 17356  003384  51BC               	movf	create_chain@fs& (0+255),w,b
 17357  003386  26D9               	addwf	fsr2l,f,c
 17358  003388  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 17359  00338A  22DA               	addwfc	fsr2h,f,c
 17360  00338C  CFDE F0C0          	movff	postinc2,create_chain@scl
 17361  003390  CFDD F0C1          	movff	postdec2,create_chain@scl+1
 17362                           
 17363                           ; BSR set to: 0
 17364                           ;tff.c: 293: if (scl < 2 || scl >= mcl) scl = 1;
 17365  003394  51C1               	movf	(create_chain@scl+1)& (0+255),w,b
 17366  003396  E104               	bnz	u12710
 17367  003398  0E02               	movlw	2
 17368  00339A  5DC0               	subwf	create_chain@scl& (0+255),w,b
 17369  00339C  A0D8               	btfss	status,0,c
 17370  00339E  D006               	goto	u12720
 17371  0033A0                     u12710:
 17372                           
 17373                           ; BSR set to: 0
 17374  0033A0  51BA               	movf	create_chain@mcl& (0+255),w,b
 17375  0033A2  5DC0               	subwf	create_chain@scl& (0+255),w,b
 17376  0033A4  51BB               	movf	(create_chain@mcl+1)& (0+255),w,b
 17377  0033A6  59C1               	subwfb	(create_chain@scl+1)& (0+255),w,b
 17378  0033A8  A0D8               	btfss	status,0,c
 17379  0033AA  D02A               	goto	l1072
 17380  0033AC                     u12720:
 17381                           
 17382                           ; BSR set to: 0
 17383                           
 17384                           ; BSR set to: 0
 17385  0033AC  0E00               	movlw	0
 17386  0033AE  6FC1               	movwf	(create_chain@scl+1)& (0+255),b
 17387  0033B0  0E01               	movlw	1
 17388  0033B2  6FC0               	movwf	create_chain@scl& (0+255),b
 17389                           
 17390                           ; BSR set to: 0
 17391                           ;tff.c: 294: }
 17392  0033B4  D025               	goto	l1072
 17393  0033B6                     l1068:
 17394                           
 17395                           ; BSR set to: 0
 17396                           ;tff.c: 295: else {
 17397                           ;tff.c: 296: cstat = get_cluster(clust);
 17398                           
 17399                           ; BSR set to: 0
 17400  0033B6  C0B6  F0A0         	movff	create_chain@clust,get_cluster@clust
 17401  0033BA  C0B7  F0A1         	movff	create_chain@clust+1,get_cluster@clust+1
 17402  0033BE  ECCD  F016         	call	_get_cluster	;wreg free
 17403  0033C2  C0A0  F0BE         	movff	?_get_cluster,create_chain@cstat
 17404  0033C6  C0A1  F0BF         	movff	?_get_cluster+1,create_chain@cstat+1
 17405                           
 17406                           ;tff.c: 297: if (cstat < 2) return 1;
 17407  0033CA  0100               	movlb	0	; () banked
 17408  0033CC  51BF               	movf	(create_chain@cstat+1)& (0+255),w,b
 17409  0033CE  E109               	bnz	l10048
 17410  0033D0  0E02               	movlw	2
 17411  0033D2  5DBE               	subwf	create_chain@cstat& (0+255),w,b
 17412  0033D4  B0D8               	btfsc	status,0,c
 17413  0033D6  D005               	goto	l1073
 17414                           
 17415                           ; BSR set to: 0
 17416  0033D8  0E00               	movlw	0
 17417  0033DA  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 17418  0033DC  0E01               	movlw	1
 17419  0033DE  6FB6               	movwf	?_create_chain& (0+255),b
 17420                           
 17421                           ; BSR set to: 0
 17422  0033E0  0012               	return	
 17423  0033E2                     l1073:
 17424  0033E2                     l10048:
 17425                           
 17426                           ; BSR set to: 0
 17427                           ;tff.c: 298: if (cstat < mcl) return cstat;
 17428  0033E2  51BA               	movf	create_chain@mcl& (0+255),w,b
 17429  0033E4  5DBE               	subwf	create_chain@cstat& (0+255),w,b
 17430  0033E6  51BB               	movf	(create_chain@mcl+1)& (0+255),w,b
 17431  0033E8  59BF               	subwfb	(create_chain@cstat+1)& (0+255),w,b
 17432  0033EA  B0D8               	btfsc	status,0,c
 17433  0033EC  D005               	goto	l1075
 17434                           
 17435                           ; BSR set to: 0
 17436  0033EE  C0BE  F0B6         	movff	create_chain@cstat,?_create_chain
 17437  0033F2  C0BF  F0B7         	movff	create_chain@cstat+1,?_create_chain+1
 17438  0033F6  0012               	return	
 17439  0033F8                     l1075:
 17440                           
 17441                           ; BSR set to: 0
 17442                           ;tff.c: 299: scl = clust;
 17443  0033F8  C0B6  F0C0         	movff	create_chain@clust,create_chain@scl
 17444  0033FC  C0B7  F0C1         	movff	create_chain@clust+1,create_chain@scl+1
 17445  003400                     l1072:
 17446                           
 17447                           ; BSR set to: 0
 17448                           ;tff.c: 300: }
 17449                           ;tff.c: 302: ncl = scl;
 17450  003400  C0C0  F0C2         	movff	create_chain@scl,create_chain@ncl
 17451  003404  C0C1  F0C3         	movff	create_chain@scl+1,create_chain@ncl+1
 17452  003408                     l10052:
 17453                           
 17454                           ; BSR set to: 0
 17455                           ;tff.c: 304: ncl++;
 17456  003408  4BC2               	infsnz	create_chain@ncl& (0+255),f,b
 17457  00340A  2BC3               	incf	(create_chain@ncl+1)& (0+255),f,b
 17458                           
 17459                           ; BSR set to: 0
 17460                           ;tff.c: 305: if (ncl >= mcl) {
 17461  00340C  51BA               	movf	create_chain@mcl& (0+255),w,b
 17462  00340E  5DC2               	subwf	create_chain@ncl& (0+255),w,b
 17463  003410  51BB               	movf	(create_chain@mcl+1)& (0+255),w,b
 17464  003412  59C3               	subwfb	(create_chain@ncl+1)& (0+255),w,b
 17465  003414  A0D8               	btfss	status,0,c
 17466  003416  D00F               	goto	l1078
 17467                           
 17468                           ; BSR set to: 0
 17469                           ;tff.c: 306: ncl = 2;
 17470  003418  0E00               	movlw	0
 17471  00341A  6FC3               	movwf	(create_chain@ncl+1)& (0+255),b
 17472  00341C  0E02               	movlw	2
 17473  00341E  6FC2               	movwf	create_chain@ncl& (0+255),b
 17474                           
 17475                           ; BSR set to: 0
 17476                           ;tff.c: 307: if (ncl > scl) return 0;
 17477  003420  51C2               	movf	create_chain@ncl& (0+255),w,b
 17478  003422  5DC0               	subwf	create_chain@scl& (0+255),w,b
 17479  003424  51C3               	movf	(create_chain@ncl+1)& (0+255),w,b
 17480  003426  59C1               	subwfb	(create_chain@scl+1)& (0+255),w,b
 17481  003428  B0D8               	btfsc	status,0,c
 17482  00342A  D005               	goto	l1078
 17483                           
 17484                           ; BSR set to: 0
 17485  00342C  0E00               	movlw	0
 17486  00342E  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 17487  003430  0E00               	movlw	0
 17488  003432  6FB6               	movwf	?_create_chain& (0+255),b
 17489                           
 17490                           ; BSR set to: 0
 17491  003434  0012               	return	
 17492  003436                     l1078:
 17493                           
 17494                           ; BSR set to: 0
 17495                           ;tff.c: 308: }
 17496                           ;tff.c: 309: cstat = get_cluster(ncl);
 17497                           
 17498                           ; BSR set to: 0
 17499                           
 17500                           ; BSR set to: 0
 17501  003436  C0C2  F0A0         	movff	create_chain@ncl,get_cluster@clust
 17502  00343A  C0C3  F0A1         	movff	create_chain@ncl+1,get_cluster@clust+1
 17503  00343E  ECCD  F016         	call	_get_cluster	;wreg free
 17504  003442  C0A0  F0BE         	movff	?_get_cluster,create_chain@cstat
 17505  003446  C0A1  F0BF         	movff	?_get_cluster+1,create_chain@cstat+1
 17506                           
 17507                           ;tff.c: 310: if (cstat == 0) break;
 17508  00344A  0100               	movlb	0	; () banked
 17509  00344C  51BE               	movf	create_chain@cstat& (0+255),w,b
 17510  00344E  11BF               	iorwf	(create_chain@cstat+1)& (0+255),w,b
 17511  003450  B4D8               	btfsc	status,2,c
 17512  003452  D015               	goto	l1080
 17513                           
 17514                           ; BSR set to: 0
 17515                           ;tff.c: 311: if (cstat == 1) return 1;
 17516                           
 17517                           ; BSR set to: 0
 17518                           
 17519                           ; BSR set to: 0
 17520  003454  05BE               	decf	create_chain@cstat& (0+255),w,b
 17521  003456  11BF               	iorwf	(create_chain@cstat+1)& (0+255),w,b
 17522  003458  A4D8               	btfss	status,2,c
 17523  00345A  D005               	goto	l1081
 17524                           
 17525                           ; BSR set to: 0
 17526  00345C  0E00               	movlw	0
 17527  00345E  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 17528  003460  0E01               	movlw	1
 17529  003462  6FB6               	movwf	?_create_chain& (0+255),b
 17530                           
 17531                           ; BSR set to: 0
 17532  003464  0012               	return	
 17533  003466                     l1081:
 17534                           
 17535                           ; BSR set to: 0
 17536                           ;tff.c: 312: if (ncl == scl) return 0;
 17537                           
 17538                           ; BSR set to: 0
 17539  003466  51C0               	movf	create_chain@scl& (0+255),w,b
 17540  003468  19C2               	xorwf	create_chain@ncl& (0+255),w,b
 17541  00346A  E1CE               	bnz	l10052
 17542  00346C  51C1               	movf	(create_chain@scl+1)& (0+255),w,b
 17543  00346E  19C3               	xorwf	(create_chain@ncl+1)& (0+255),w,b
 17544  003470  A4D8               	btfss	status,2,c
 17545  003472  D7CA               	goto	l1076
 17546                           
 17547                           ; BSR set to: 0
 17548  003474  0E00               	movlw	0
 17549  003476  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 17550  003478  0E00               	movlw	0
 17551  00347A  6FB6               	movwf	?_create_chain& (0+255),b
 17552                           
 17553                           ; BSR set to: 0
 17554  00347C  0012               	return	
 17555  00347E                     l1080:
 17556                           
 17557                           ; BSR set to: 0
 17558                           ;tff.c: 315: if (!put_cluster(ncl, (CLUST)0x0FFFFFFF)) return 1;
 17559                           
 17560                           ; BSR set to: 0
 17561  00347E  C0C2  F0A0         	movff	create_chain@ncl,put_cluster@clust
 17562  003482  C0C3  F0A1         	movff	create_chain@ncl+1,put_cluster@clust+1
 17563  003486  0EFF               	movlw	255
 17564  003488  6FA3               	movwf	(put_cluster@val+1)& (0+255),b
 17565  00348A  69A2               	setf	put_cluster@val& (0+255),b
 17566  00348C  EC90  F015         	call	_put_cluster	;wreg free
 17567  003490  0900               	iorlw	0
 17568  003492  A4D8               	btfss	status,2,c
 17569  003494  D006               	goto	l1083
 17570  003496  0E00               	movlw	0
 17571  003498  0100               	movlb	0	; () banked
 17572  00349A  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 17573  00349C  0E01               	movlw	1
 17574  00349E  6FB6               	movwf	?_create_chain& (0+255),b
 17575                           
 17576                           ; BSR set to: 0
 17577  0034A0  0012               	return	
 17578  0034A2                     l1083:
 17579                           
 17580                           ;tff.c: 316: if (clust != 0 && !put_cluster(clust, ncl)) return 1;
 17581                           
 17582                           ; BSR set to: 0
 17583  0034A2  0100               	movlb	0	; () banked
 17584  0034A4  51B6               	movf	create_chain@clust& (0+255),w,b
 17585  0034A6  11B7               	iorwf	(create_chain@clust+1)& (0+255),w,b
 17586  0034A8  B4D8               	btfsc	status,2,c
 17587  0034AA  D013               	goto	l1084
 17588                           
 17589                           ; BSR set to: 0
 17590  0034AC  C0B6  F0A0         	movff	create_chain@clust,put_cluster@clust
 17591  0034B0  C0B7  F0A1         	movff	create_chain@clust+1,put_cluster@clust+1
 17592  0034B4  C0C2  F0A2         	movff	create_chain@ncl,put_cluster@val
 17593  0034B8  C0C3  F0A3         	movff	create_chain@ncl+1,put_cluster@val+1
 17594  0034BC  EC90  F015         	call	_put_cluster	;wreg free
 17595  0034C0  0900               	iorlw	0
 17596  0034C2  A4D8               	btfss	status,2,c
 17597  0034C4  D006               	goto	l1084
 17598  0034C6  0E00               	movlw	0
 17599  0034C8  0100               	movlb	0	; () banked
 17600  0034CA  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 17601  0034CC  0E01               	movlw	1
 17602  0034CE  6FB6               	movwf	?_create_chain& (0+255),b
 17603                           
 17604                           ; BSR set to: 0
 17605  0034D0  0012               	return	
 17606  0034D2                     l1084:
 17607                           
 17608                           ;tff.c: 318: fs->last_clust = ncl;
 17609                           
 17610                           ; BSR set to: 0
 17611  0034D2  0100               	movlb	0	; () banked
 17612  0034D4  EE20 F018          	lfsr	2,24
 17613  0034D8  51BC               	movf	create_chain@fs& (0+255),w,b
 17614  0034DA  26D9               	addwf	fsr2l,f,c
 17615  0034DC  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 17616  0034DE  22DA               	addwfc	fsr2h,f,c
 17617  0034E0  C0C2  FFDE         	movff	create_chain@ncl,postinc2
 17618  0034E4  C0C3  FFDD         	movff	create_chain@ncl+1,postdec2
 17619                           
 17620                           ;tff.c: 319: if (fs->free_clust != (CLUST)0xFFFFFFFF) {
 17621  0034E8  EE20 F01A          	lfsr	2,26
 17622  0034EC  51BC               	movf	create_chain@fs& (0+255),w,b
 17623  0034EE  26D9               	addwf	fsr2l,f,c
 17624  0034F0  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 17625  0034F2  22DA               	addwfc	fsr2h,f,c
 17626  0034F4  28DE               	incf	postinc2,w,c
 17627  0034F6  E103               	bnz	u12830
 17628  0034F8  28DE               	incf	postinc2,w,c
 17629  0034FA  B4D8               	btfsc	status,2,c
 17630  0034FC  D009               	goto	l1085
 17631  0034FE                     u12830:
 17632                           
 17633                           ; BSR set to: 0
 17634                           ;tff.c: 320: fs->free_clust--;
 17635  0034FE  EE20 F01A          	lfsr	2,26
 17636  003502  51BC               	movf	create_chain@fs& (0+255),w,b
 17637  003504  26D9               	addwf	fsr2l,f,c
 17638  003506  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 17639  003508  22DA               	addwfc	fsr2h,f,c
 17640  00350A  06DE               	decf	postinc2,f,c
 17641  00350C  0E00               	movlw	0
 17642  00350E  5ADD               	subwfb	postdec2,f,c
 17643  003510                     l1085:
 17644                           
 17645                           ; BSR set to: 0
 17646                           ;tff.c: 324: }
 17647                           ;tff.c: 326: return ncl;
 17648                           
 17649                           ; BSR set to: 0
 17650  003510  C0C2  F0B6         	movff	create_chain@ncl,?_create_chain
 17651  003514  C0C3  F0B7         	movff	create_chain@ncl+1,?_create_chain+1
 17652  003518  0012               	return	
 17653  00351A                     __end_of_create_chain:
 17654                           	opt stack 0
 17655                           tosu	equ	0xFFF
 17656                           tosh	equ	0xFFE
 17657                           tosl	equ	0xFFD
 17658                           pclath	equ	0xFFA
 17659                           tblptru	equ	0xFF8
 17660                           tblptrh	equ	0xFF7
 17661                           tblptrl	equ	0xFF6
 17662                           tablat	equ	0xFF5
 17663                           prodh	equ	0xFF4
 17664                           prodl	equ	0xFF3
 17665                           intcon	equ	0xFF2
 17666                           intcon2	equ	0xFF1
 17667                           intcon3	equ	0xFF0
 17668                           indf0	equ	0xFEF
 17669                           postinc0	equ	0xFEE
 17670                           fsr0h	equ	0xFEA
 17671                           fsr0l	equ	0xFE9
 17672                           wreg	equ	0xFE8
 17673                           indf1	equ	0xFE7
 17674                           postinc1	equ	0xFE6
 17675                           postdec1	equ	0xFE5
 17676                           plusw1	equ	0xFE3
 17677                           fsr1h	equ	0xFE2
 17678                           fsr1l	equ	0xFE1
 17679                           indf2	equ	0xFDF
 17680                           postinc2	equ	0xFDE
 17681                           postdec2	equ	0xFDD
 17682                           plusw2	equ	0xFDB
 17683                           fsr2h	equ	0xFDA
 17684                           fsr2l	equ	0xFD9
 17685                           status	equ	0xFD8
 17686                           
 17687 ;; *************** function _put_cluster *****************
 17688 ;; Defined at:
 17689 ;;		line 197 in file "bibliotecas/tff.c"
 17690 ;; Parameters:    Size  Location     Type
 17691 ;;  clust           2   64[BANK0 ] unsigned short 
 17692 ;;  val             2   66[BANK0 ] unsigned short 
 17693 ;; Auto vars:     Size  Location     Type
 17694 ;;  fatsect         4   76[BANK0 ] unsigned long 
 17695 ;;  fs              2   84[BANK0 ] PTR struct _FATFS
 17696 ;;		 -> NULL(0), fs(544), 
 17697 ;;  p               2   82[BANK0 ] PTR unsigned char 
 17698 ;;		 -> fs.win(512), NULL(0), fs(544), 
 17699 ;;  bc              2   80[BANK0 ] unsigned short 
 17700 ;; Return value:  Size  Location     Type
 17701 ;;                  1    wreg      enum E105
 17702 ;; Registers used:
 17703 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17704 ;; Tracked objects:
 17705 ;;		On entry : 0/0
 17706 ;;		On exit  : 0/0
 17707 ;;		Unchanged: 0/0
 17708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17709 ;;      Params:         0       4       0       0       0       0       0       0       0
 17710 ;;      Locals:         0      14       0       0       0       0       0       0       0
 17711 ;;      Temps:          0       4       0       0       0       0       0       0       0
 17712 ;;      Totals:         0      22       0       0       0       0       0       0       0
 17713 ;;Total ram usage:       22 bytes
 17714 ;; Hardware stack levels used:    1
 17715 ;; Hardware stack levels required when called:    9
 17716 ;; This function calls:
 17717 ;;		___wmul
 17718 ;;		_move_window
 17719 ;; This function is called by:
 17720 ;;		_remove_chain
 17721 ;;		_create_chain
 17722 ;; This function uses a non-reentrant model
 17723 ;;
 17724                           
 17725                           	psect	text60
 17726  002B20                     __ptext60:
 17727                           	opt stack 0
 17728  002B20                     _put_cluster:
 17729                           	opt stack 13
 17730                           
 17731                           ;tff.c: 202: WORD bc;
 17732                           ;tff.c: 203: BYTE *p;
 17733                           ;tff.c: 204: DWORD fatsect;
 17734                           ;tff.c: 205: FATFS *fs = FatFs;
 17735                           
 17736                           ; BSR set to: 0
 17737                           ;incstack = 0
 17738  002B20  C0FA  F0B4         	movff	_FatFs,put_cluster@fs
 17739  002B24  C0FB  F0B5         	movff	_FatFs+1,put_cluster@fs+1
 17740                           
 17741                           ;tff.c: 208: fatsect = fs->fatbase;
 17742  002B28  0100               	movlb	0	; () banked
 17743  002B2A  EE20 F008          	lfsr	2,8
 17744  002B2E  51B4               	movf	put_cluster@fs& (0+255),w,b
 17745  002B30  26D9               	addwf	fsr2l,f,c
 17746  002B32  51B5               	movf	(put_cluster@fs+1)& (0+255),w,b
 17747  002B34  22DA               	addwfc	fsr2h,f,c
 17748  002B36  CFDE F0AC          	movff	postinc2,put_cluster@fatsect
 17749  002B3A  CFDE F0AD          	movff	postinc2,put_cluster@fatsect+1
 17750  002B3E  CFDE F0AE          	movff	postinc2,put_cluster@fatsect+2
 17751  002B42  CFDE F0AF          	movff	postinc2,put_cluster@fatsect+3
 17752                           
 17753                           ;tff.c: 209: switch (fs->fs_type) {
 17754  002B46  D111               	goto	l1038
 17755  002B48                     
 17756                           ; BSR set to: 0
 17757                           ;tff.c: 211: bc = (WORD)clust * 3 / 2;
 17758                           
 17759                           ; BSR set to: 0
 17760  002B48  C0A0  F060         	movff	put_cluster@clust,___wmul@multiplier
 17761  002B4C  C0A1  F061         	movff	put_cluster@clust+1,___wmul@multiplier+1
 17762  002B50  0E00               	movlw	0
 17763  002B52  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17764  002B54  0E03               	movlw	3
 17765  002B56  6F62               	movwf	___wmul@multiplicand& (0+255),b
 17766  002B58  ECD3  F02A         	call	___wmul	;wreg free
 17767  002B5C  90D8               	bcf	status,0,c
 17768  002B5E  0100               	movlb	0	; () banked
 17769  002B60  3161               	rrcf	(?___wmul+1)& (0+255),w,b
 17770  002B62  6FA4               	movwf	??_put_cluster& (0+255),b
 17771  002B64  3160               	rrcf	?___wmul& (0+255),w,b
 17772  002B66  6FB0               	movwf	put_cluster@bc& (0+255),b
 17773  002B68  C0A4  F0B1         	movff	??_put_cluster,put_cluster@bc+1
 17774                           
 17775                           ; BSR set to: 0
 17776                           ;tff.c: 212: if (!move_window(fatsect + bc / 512U)) return FALSE;
 17777  002B6C  C0B0  F0A4         	movff	put_cluster@bc,??_put_cluster
 17778  002B70  C0B1  F0A5         	movff	put_cluster@bc+1,??_put_cluster+1
 17779  002B74  0E09               	movlw	9
 17780  002B76  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 17781  002B78                     u12565:
 17782  002B78  90D8               	bcf	status,0,c
 17783  002B7A  33A5               	rrcf	(??_put_cluster+1)& (0+255),f,b
 17784  002B7C  33A4               	rrcf	??_put_cluster& (0+255),f,b
 17785  002B7E  2FA6               	decfsz	(??_put_cluster+2)& (0+255),f,b
 17786  002B80  D7FB               	goto	u12565
 17787  002B82  51A4               	movf	??_put_cluster& (0+255),w,b
 17788  002B84  25AC               	addwf	put_cluster@fatsect& (0+255),w,b
 17789  002B86  6F8B               	movwf	move_window@sector& (0+255),b
 17790  002B88  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 17791  002B8A  21AD               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 17792  002B8C  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 17793  002B8E  0E00               	movlw	0
 17794  002B90  21AE               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 17795  002B92  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 17796  002B94  0E00               	movlw	0
 17797  002B96  21AF               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 17798  002B98  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 17799  002B9A  EC8D  F01A         	call	_move_window	;wreg free
 17800  002B9E  0900               	iorlw	0
 17801  002BA0  A4D8               	btfss	status,2,c
 17802  002BA2  D002               	goto	l1040
 17803  002BA4  0E00               	movlw	0
 17804  002BA6  0012               	return	
 17805  002BA8                     l1040:
 17806                           
 17807                           ;tff.c: 213: p = &fs->win[bc % 512U];
 17808  002BA8  0EFF               	movlw	255
 17809  002BAA  0100               	movlb	0	; () banked
 17810  002BAC  6FA4               	movwf	??_put_cluster& (0+255),b
 17811  002BAE  0E01               	movlw	1
 17812  002BB0  6FA5               	movwf	(??_put_cluster+1)& (0+255),b
 17813  002BB2  C0B0  F0A6         	movff	put_cluster@bc,??_put_cluster+2
 17814  002BB6  C0B1  F0A7         	movff	put_cluster@bc+1,??_put_cluster+3
 17815  002BBA  51A4               	movf	??_put_cluster& (0+255),w,b
 17816  002BBC  17A6               	andwf	(??_put_cluster+2)& (0+255),f,b
 17817  002BBE  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 17818  002BC0  17A7               	andwf	(??_put_cluster+3)& (0+255),f,b
 17819  002BC2  0E20               	movlw	32
 17820  002BC4  27A6               	addwf	(??_put_cluster+2)& (0+255),f,b
 17821  002BC6  0E00               	movlw	0
 17822  002BC8  23A7               	addwfc	(??_put_cluster+3)& (0+255),f,b
 17823  002BCA  51A6               	movf	(??_put_cluster+2)& (0+255),w,b
 17824  002BCC  25B4               	addwf	put_cluster@fs& (0+255),w,b
 17825  002BCE  6FB2               	movwf	put_cluster@p& (0+255),b
 17826  002BD0  51A7               	movf	(??_put_cluster+3)& (0+255),w,b
 17827  002BD2  21B5               	addwfc	(put_cluster@fs+1)& (0+255),w,b
 17828  002BD4  6FB3               	movwf	(put_cluster@p+1)& (0+255),b
 17829                           
 17830                           ; BSR set to: 0
 17831                           ;tff.c: 214: *p = (clust & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 17832  002BD6  B1A0               	btfsc	put_cluster@clust& (0+255),0,b
 17833  002BD8  D004               	goto	l1043
 17834                           
 17835                           ; BSR set to: 0
 17836  002BDA  C0A2  F0A8         	movff	put_cluster@val,_put_cluster$1997
 17837  002BDE  6BA9               	clrf	(_put_cluster$1997+1)& (0+255),b
 17838  002BE0  D01A               	goto	l1045
 17839  002BE2                     l1043:
 17840                           
 17841                           ; BSR set to: 0
 17842                           
 17843                           ; BSR set to: 0
 17844  002BE2  51A2               	movf	put_cluster@val& (0+255),w,b
 17845  002BE4  6FA4               	movwf	??_put_cluster& (0+255),b
 17846  002BE6  6BA5               	clrf	(??_put_cluster+1)& (0+255),b
 17847  002BE8  3BA4               	swapf	??_put_cluster& (0+255),f,b
 17848  002BEA  3BA5               	swapf	(??_put_cluster+1)& (0+255),f,b
 17849  002BEC  0EF0               	movlw	240
 17850  002BEE  17A5               	andwf	(??_put_cluster+1)& (0+255),f,b
 17851  002BF0  51A4               	movf	??_put_cluster& (0+255),w,b
 17852  002BF2  0B0F               	andlw	15
 17853  002BF4  13A5               	iorwf	(??_put_cluster+1)& (0+255),f,b
 17854  002BF6  0EF0               	movlw	240
 17855  002BF8  17A4               	andwf	??_put_cluster& (0+255),f,b
 17856  002BFA  C0B2  FFD9         	movff	put_cluster@p,fsr2l
 17857  002BFE  C0B3  FFDA         	movff	put_cluster@p+1,fsr2h
 17858  002C02  50DF               	movf	indf2,w,c
 17859  002C04  0B0F               	andlw	15
 17860  002C06  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 17861  002C08  6BA7               	clrf	(??_put_cluster+3)& (0+255),b
 17862  002C0A  51A4               	movf	??_put_cluster& (0+255),w,b
 17863  002C0C  11A6               	iorwf	(??_put_cluster+2)& (0+255),w,b
 17864  002C0E  6FA8               	movwf	_put_cluster$1997& (0+255),b
 17865  002C10  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 17866  002C12  11A7               	iorwf	(??_put_cluster+3)& (0+255),w,b
 17867  002C14  6FA9               	movwf	(_put_cluster$1997+1)& (0+255),b
 17868  002C16                     l1045:
 17869                           
 17870                           ; BSR set to: 0
 17871                           
 17872                           ; BSR set to: 0
 17873  002C16  C0B2  FFD9         	movff	put_cluster@p,fsr2l
 17874  002C1A  C0B3  FFDA         	movff	put_cluster@p+1,fsr2h
 17875  002C1E  C0A8  FFDF         	movff	_put_cluster$1997,indf2
 17876                           
 17877                           ; BSR set to: 0
 17878                           ;tff.c: 215: bc++;
 17879  002C22  4BB0               	infsnz	put_cluster@bc& (0+255),f,b
 17880  002C24  2BB1               	incf	(put_cluster@bc+1)& (0+255),f,b
 17881                           
 17882                           ; BSR set to: 0
 17883                           ;tff.c: 216: fs->winflag = 1;
 17884  002C26  EE20 F01F          	lfsr	2,31
 17885  002C2A  51B4               	movf	put_cluster@fs& (0+255),w,b
 17886  002C2C  26D9               	addwf	fsr2l,f,c
 17887  002C2E  51B5               	movf	(put_cluster@fs+1)& (0+255),w,b
 17888  002C30  22DA               	addwfc	fsr2h,f,c
 17889  002C32  0E01               	movlw	1
 17890  002C34  6EDF               	movwf	indf2,c
 17891                           
 17892                           ; BSR set to: 0
 17893                           ;tff.c: 217: if (!move_window(fatsect + bc / 512U)) return FALSE;
 17894  002C36  C0B0  F0A4         	movff	put_cluster@bc,??_put_cluster
 17895  002C3A  C0B1  F0A5         	movff	put_cluster@bc+1,??_put_cluster+1
 17896  002C3E  0E09               	movlw	9
 17897  002C40  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 17898  002C42                     u12595:
 17899  002C42  90D8               	bcf	status,0,c
 17900  002C44  33A5               	rrcf	(??_put_cluster+1)& (0+255),f,b
 17901  002C46  33A4               	rrcf	??_put_cluster& (0+255),f,b
 17902  002C48  2FA6               	decfsz	(??_put_cluster+2)& (0+255),f,b
 17903  002C4A  D7FB               	goto	u12595
 17904  002C4C  51A4               	movf	??_put_cluster& (0+255),w,b
 17905  002C4E  25AC               	addwf	put_cluster@fatsect& (0+255),w,b
 17906  002C50  6F8B               	movwf	move_window@sector& (0+255),b
 17907  002C52  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 17908  002C54  21AD               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 17909  002C56  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 17910  002C58  0E00               	movlw	0
 17911  002C5A  21AE               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 17912  002C5C  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 17913  002C5E  0E00               	movlw	0
 17914  002C60  21AF               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 17915  002C62  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 17916  002C64  EC8D  F01A         	call	_move_window	;wreg free
 17917  002C68  0900               	iorlw	0
 17918  002C6A  A4D8               	btfss	status,2,c
 17919  002C6C  D002               	goto	l1046
 17920  002C6E  0E00               	movlw	0
 17921  002C70  0012               	return	
 17922  002C72                     l1046:
 17923                           
 17924                           ;tff.c: 218: p = &fs->win[bc % 512U];
 17925  002C72  0EFF               	movlw	255
 17926  002C74  0100               	movlb	0	; () banked
 17927  002C76  6FA4               	movwf	??_put_cluster& (0+255),b
 17928  002C78  0E01               	movlw	1
 17929  002C7A  6FA5               	movwf	(??_put_cluster+1)& (0+255),b
 17930  002C7C  C0B0  F0A6         	movff	put_cluster@bc,??_put_cluster+2
 17931  002C80  C0B1  F0A7         	movff	put_cluster@bc+1,??_put_cluster+3
 17932  002C84  51A4               	movf	??_put_cluster& (0+255),w,b
 17933  002C86  17A6               	andwf	(??_put_cluster+2)& (0+255),f,b
 17934  002C88  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 17935  002C8A  17A7               	andwf	(??_put_cluster+3)& (0+255),f,b
 17936  002C8C  0E20               	movlw	32
 17937  002C8E  27A6               	addwf	(??_put_cluster+2)& (0+255),f,b
 17938  002C90  0E00               	movlw	0
 17939  002C92  23A7               	addwfc	(??_put_cluster+3)& (0+255),f,b
 17940  002C94  51A6               	movf	(??_put_cluster+2)& (0+255),w,b
 17941  002C96  25B4               	addwf	put_cluster@fs& (0+255),w,b
 17942  002C98  6FB2               	movwf	put_cluster@p& (0+255),b
 17943  002C9A  51A7               	movf	(??_put_cluster+3)& (0+255),w,b
 17944  002C9C  21B5               	addwfc	(put_cluster@fs+1)& (0+255),w,b
 17945  002C9E  6FB3               	movwf	(put_cluster@p+1)& (0+255),b
 17946                           
 17947                           ; BSR set to: 0
 17948                           ;tff.c: 219: *p = (clust & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x
      +                          0F));
 17949  002CA0  B1A0               	btfsc	put_cluster@clust& (0+255),0,b
 17950  002CA2  D013               	goto	l1048
 17951                           
 17952                           ; BSR set to: 0
 17953  002CA4  C0A2  F0A4         	movff	put_cluster@val,??_put_cluster
 17954  002CA8  C0A3  F0A5         	movff	put_cluster@val+1,??_put_cluster+1
 17955  002CAC  C0A5  F0A4         	movff	??_put_cluster+1,??_put_cluster
 17956  002CB0  6BA5               	clrf	(??_put_cluster+1)& (0+255),b
 17957  002CB2  0E0F               	movlw	15
 17958  002CB4  17A4               	andwf	??_put_cluster& (0+255),f,b
 17959  002CB6  C0B2  FFD9         	movff	put_cluster@p,fsr2l
 17960  002CBA  C0B3  FFDA         	movff	put_cluster@p+1,fsr2h
 17961  002CBE  50DF               	movf	indf2,w,c
 17962  002CC0  0BF0               	andlw	240
 17963  002CC2  11A4               	iorwf	??_put_cluster& (0+255),w,b
 17964  002CC4  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 17965  002CC6  51A6               	movf	(??_put_cluster+2)& (0+255),w,b
 17966  002CC8  D00C               	goto	L9
 17967  002CCA                     l1048:
 17968                           
 17969                           ; BSR set to: 0
 17970                           
 17971                           ; BSR set to: 0
 17972  002CCA  C0A2  F0A4         	movff	put_cluster@val,??_put_cluster
 17973  002CCE  C0A3  F0A5         	movff	put_cluster@val+1,??_put_cluster+1
 17974  002CD2  0E04               	movlw	4
 17975  002CD4  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 17976  002CD6                     u12625:
 17977  002CD6  90D8               	bcf	status,0,c
 17978  002CD8  33A5               	rrcf	(??_put_cluster+1)& (0+255),f,b
 17979  002CDA  33A4               	rrcf	??_put_cluster& (0+255),f,b
 17980  002CDC  2FA6               	decfsz	(??_put_cluster+2)& (0+255),f,b
 17981  002CDE  D7FB               	goto	u12625
 17982  002CE0  51A4               	movf	??_put_cluster& (0+255),w,b
 17983  002CE2                     L9:
 17984  002CE2  6FAA               	movwf	_put_cluster$1998& (0+255),b
 17985  002CE4  6BAB               	clrf	(_put_cluster$1998+1)& (0+255),b
 17986                           
 17987                           ; BSR set to: 0
 17988                           
 17989                           ; BSR set to: 0
 17990  002CE6  C0B2  FFD9         	movff	put_cluster@p,fsr2l
 17991  002CEA  C0B3  FFDA         	movff	put_cluster@p+1,fsr2h
 17992  002CEE  C0AA  FFDF         	movff	_put_cluster$1998,indf2
 17993                           
 17994                           ;tff.c: 220: break;
 17995  002CF2  D049               	goto	l1051
 17996  002CF4                     
 17997                           ; BSR set to: 0
 17998                           ;tff.c: 223: if (!move_window(fatsect + clust / 256)) return FALSE;
 17999                           
 18000                           ; BSR set to: 0
 18001  002CF4  C0A0  F0A4         	movff	put_cluster@clust,??_put_cluster
 18002  002CF8  C0A1  F0A5         	movff	put_cluster@clust+1,??_put_cluster+1
 18003  002CFC  C0A5  F0A4         	movff	??_put_cluster+1,??_put_cluster
 18004  002D00  6BA5               	clrf	(??_put_cluster+1)& (0+255),b
 18005  002D02  51A4               	movf	??_put_cluster& (0+255),w,b
 18006  002D04  25AC               	addwf	put_cluster@fatsect& (0+255),w,b
 18007  002D06  6F8B               	movwf	move_window@sector& (0+255),b
 18008  002D08  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 18009  002D0A  21AD               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 18010  002D0C  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 18011  002D0E  0E00               	movlw	0
 18012  002D10  21AE               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 18013  002D12  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 18014  002D14  0E00               	movlw	0
 18015  002D16  21AF               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 18016  002D18  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 18017  002D1A  EC8D  F01A         	call	_move_window	;wreg free
 18018  002D1E  0900               	iorlw	0
 18019  002D20  A4D8               	btfss	status,2,c
 18020  002D22  D002               	goto	l1053
 18021  002D24  0E00               	movlw	0
 18022  002D26  0012               	return	
 18023  002D28                     l1053:
 18024                           
 18025                           ;tff.c: 224: *(WORD*)(BYTE*)(&fs->win[((WORD)clust * 2) % 512U])=(WORD)((WORD)val);
 18026  002D28  0EFF               	movlw	255
 18027  002D2A  0100               	movlb	0	; () banked
 18028  002D2C  6FA4               	movwf	??_put_cluster& (0+255),b
 18029  002D2E  0E01               	movlw	1
 18030  002D30  6FA5               	movwf	(??_put_cluster+1)& (0+255),b
 18031  002D32  C0A0  F0A6         	movff	put_cluster@clust,??_put_cluster+2
 18032  002D36  C0A1  F0A7         	movff	put_cluster@clust+1,??_put_cluster+3
 18033  002D3A  90D8               	bcf	status,0,c
 18034  002D3C  37A6               	rlcf	(??_put_cluster+2)& (0+255),f,b
 18035  002D3E  37A7               	rlcf	(??_put_cluster+3)& (0+255),f,b
 18036  002D40  51A4               	movf	??_put_cluster& (0+255),w,b
 18037  002D42  17A6               	andwf	(??_put_cluster+2)& (0+255),f,b
 18038  002D44  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 18039  002D46  17A7               	andwf	(??_put_cluster+3)& (0+255),f,b
 18040  002D48  0E20               	movlw	32
 18041  002D4A  27A6               	addwf	(??_put_cluster+2)& (0+255),f,b
 18042  002D4C  0E00               	movlw	0
 18043  002D4E  23A7               	addwfc	(??_put_cluster+3)& (0+255),f,b
 18044  002D50  51A6               	movf	(??_put_cluster+2)& (0+255),w,b
 18045  002D52  25B4               	addwf	put_cluster@fs& (0+255),w,b
 18046  002D54  6ED9               	movwf	fsr2l,c
 18047  002D56  51A7               	movf	(??_put_cluster+3)& (0+255),w,b
 18048  002D58  21B5               	addwfc	(put_cluster@fs+1)& (0+255),w,b
 18049  002D5A  6EDA               	movwf	fsr2h,c
 18050  002D5C  C0A2  FFDE         	movff	put_cluster@val,postinc2
 18051  002D60  C0A3  FFDD         	movff	put_cluster@val+1,postdec2
 18052                           
 18053                           ;tff.c: 225: break;
 18054  002D64  D010               	goto	l1051
 18055  002D66                     
 18056                           ; BSR set to: 0
 18057                           ;tff.c: 233: return FALSE;
 18058                           
 18059                           ; BSR set to: 0
 18060  002D66  0E00               	movlw	0
 18061                           
 18062                           ; BSR set to: 0
 18063  002D68  0012               	return	
 18064  002D6A                     l1038:
 18065                           
 18066                           ; BSR set to: 0
 18067                           
 18068                           ; BSR set to: 0
 18069  002D6A  EE20 F01C          	lfsr	2,28
 18070  002D6E  51B4               	movf	put_cluster@fs& (0+255),w,b
 18071  002D70  26D9               	addwf	fsr2l,f,c
 18072  002D72  51B5               	movf	(put_cluster@fs+1)& (0+255),w,b
 18073  002D74  22DA               	addwfc	fsr2h,f,c
 18074  002D76  50DF               	movf	indf2,w,c
 18075                           
 18076                           ; Switch size 1, requested type "space"
 18077                           ; Number of cases is 2, Range of values is 1 to 2
 18078                           ; switch strategies available:
 18079                           ; Name         Instructions Cycles
 18080                           ; simple_byte            7     4 (average)
 18081                           ;	Chosen strategy is simple_byte
 18082  002D78  0A01               	xorlw	1	; case 1
 18083  002D7A  B4D8               	btfsc	status,2,c
 18084  002D7C  D6E5               	goto	l1039
 18085  002D7E  0A03               	xorlw	3	; case 2
 18086  002D80  B4D8               	btfsc	status,2,c
 18087  002D82  D7B8               	goto	l1052
 18088  002D84  D7F0               	goto	l1054
 18089  002D86                     l1051:
 18090                           
 18091                           ; BSR set to: 0
 18092                           ;tff.c: 235: fs->winflag = 1;
 18093                           
 18094                           ; BSR set to: 0
 18095  002D86  EE20 F01F          	lfsr	2,31
 18096  002D8A  51B4               	movf	put_cluster@fs& (0+255),w,b
 18097  002D8C  26D9               	addwf	fsr2l,f,c
 18098  002D8E  51B5               	movf	(put_cluster@fs+1)& (0+255),w,b
 18099  002D90  22DA               	addwfc	fsr2h,f,c
 18100  002D92  0E01               	movlw	1
 18101  002D94  6EDF               	movwf	indf2,c
 18102                           
 18103                           ; BSR set to: 0
 18104                           ;tff.c: 236: return TRUE;
 18105  002D96  0E01               	movlw	1
 18106  002D98  0012               	return	
 18107  002D9A                     __end_of_put_cluster:
 18108                           	opt stack 0
 18109                           tosu	equ	0xFFF
 18110                           tosh	equ	0xFFE
 18111                           tosl	equ	0xFFD
 18112                           pclath	equ	0xFFA
 18113                           tblptru	equ	0xFF8
 18114                           tblptrh	equ	0xFF7
 18115                           tblptrl	equ	0xFF6
 18116                           tablat	equ	0xFF5
 18117                           prodh	equ	0xFF4
 18118                           prodl	equ	0xFF3
 18119                           intcon	equ	0xFF2
 18120                           intcon2	equ	0xFF1
 18121                           intcon3	equ	0xFF0
 18122                           indf0	equ	0xFEF
 18123                           postinc0	equ	0xFEE
 18124                           fsr0h	equ	0xFEA
 18125                           fsr0l	equ	0xFE9
 18126                           wreg	equ	0xFE8
 18127                           indf1	equ	0xFE7
 18128                           postinc1	equ	0xFE6
 18129                           postdec1	equ	0xFE5
 18130                           plusw1	equ	0xFE3
 18131                           fsr1h	equ	0xFE2
 18132                           fsr1l	equ	0xFE1
 18133                           indf2	equ	0xFDF
 18134                           postinc2	equ	0xFDE
 18135                           postdec2	equ	0xFDD
 18136                           plusw2	equ	0xFDB
 18137                           fsr2h	equ	0xFDA
 18138                           fsr2l	equ	0xFD9
 18139                           status	equ	0xFD8
 18140                           
 18141 ;; *************** function _get_cluster *****************
 18142 ;; Defined at:
 18143 ;;		line 154 in file "bibliotecas/tff.c"
 18144 ;; Parameters:    Size  Location     Type
 18145 ;;  clust           2   64[BANK0 ] unsigned short 
 18146 ;; Auto vars:     Size  Location     Type
 18147 ;;  fatsect         4   75[BANK0 ] unsigned long 
 18148 ;;  fs              2   81[BANK0 ] PTR struct _FATFS
 18149 ;;		 -> NULL(0), fs(544), 
 18150 ;;  bc              2   79[BANK0 ] unsigned short 
 18151 ;;  wc              2   73[BANK0 ] unsigned short 
 18152 ;; Return value:  Size  Location     Type
 18153 ;;                  2   64[BANK0 ] unsigned short 
 18154 ;; Registers used:
 18155 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18156 ;; Tracked objects:
 18157 ;;		On entry : 0/0
 18158 ;;		On exit  : 0/0
 18159 ;;		Unchanged: 0/0
 18160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18161 ;;      Params:         0       2       0       0       0       0       0       0       0
 18162 ;;      Locals:         0      10       0       0       0       0       0       0       0
 18163 ;;      Temps:          0       7       0       0       0       0       0       0       0
 18164 ;;      Totals:         0      19       0       0       0       0       0       0       0
 18165 ;;Total ram usage:       19 bytes
 18166 ;; Hardware stack levels used:    1
 18167 ;; Hardware stack levels required when called:    9
 18168 ;; This function calls:
 18169 ;;		___wmul
 18170 ;;		_move_window
 18171 ;; This function is called by:
 18172 ;;		_remove_chain
 18173 ;;		_create_chain
 18174 ;;		_next_dir_entry
 18175 ;;		_f_lseek
 18176 ;;		_f_read
 18177 ;; This function uses a non-reentrant model
 18178 ;;
 18179                           
 18180                           	psect	text61
 18181  002D9A                     __ptext61:
 18182                           	opt stack 0
 18183  002D9A                     _get_cluster:
 18184                           	opt stack 13
 18185                           
 18186                           ;tff.c: 158: WORD wc, bc;
 18187                           ;tff.c: 159: DWORD fatsect;
 18188                           ;tff.c: 160: FATFS *fs = FatFs;
 18189                           
 18190                           ;incstack = 0
 18191  002D9A  C0FA  F0B1         	movff	_FatFs,get_cluster@fs
 18192  002D9E  C0FB  F0B2         	movff	_FatFs+1,get_cluster@fs+1
 18193                           
 18194                           ;tff.c: 163: if (clust >= 2 && clust < fs->max_clust) {
 18195  002DA2  0100               	movlb	0	; () banked
 18196  002DA4  51A1               	movf	(get_cluster@clust+1)& (0+255),w,b
 18197  002DA6  E104               	bnz	u12470
 18198  002DA8  0E02               	movlw	2
 18199  002DAA  5DA0               	subwf	get_cluster@clust& (0+255),w,b
 18200  002DAC  A0D8               	btfss	status,0,c
 18201  002DAE  D100               	goto	l1027
 18202  002DB0                     u12470:
 18203                           
 18204                           ; BSR set to: 0
 18205  002DB0  EE20 F016          	lfsr	2,22
 18206  002DB4  51B1               	movf	get_cluster@fs& (0+255),w,b
 18207  002DB6  26D9               	addwf	fsr2l,f,c
 18208  002DB8  51B2               	movf	(get_cluster@fs+1)& (0+255),w,b
 18209  002DBA  22DA               	addwfc	fsr2h,f,c
 18210  002DBC  50DE               	movf	postinc2,w,c
 18211  002DBE  5DA0               	subwf	get_cluster@clust& (0+255),w,b
 18212  002DC0  50DE               	movf	postinc2,w,c
 18213  002DC2  59A1               	subwfb	(get_cluster@clust+1)& (0+255),w,b
 18214  002DC4  B0D8               	btfsc	status,0,c
 18215  002DC6  D0F4               	goto	l1027
 18216                           
 18217                           ; BSR set to: 0
 18218                           ;tff.c: 164: fatsect = fs->fatbase;
 18219  002DC8  EE20 F008          	lfsr	2,8
 18220  002DCC  51B1               	movf	get_cluster@fs& (0+255),w,b
 18221  002DCE  26D9               	addwf	fsr2l,f,c
 18222  002DD0  51B2               	movf	(get_cluster@fs+1)& (0+255),w,b
 18223  002DD2  22DA               	addwfc	fsr2h,f,c
 18224  002DD4  CFDE F0AB          	movff	postinc2,get_cluster@fatsect
 18225  002DD8  CFDE F0AC          	movff	postinc2,get_cluster@fatsect+1
 18226  002DDC  CFDE F0AD          	movff	postinc2,get_cluster@fatsect+2
 18227  002DE0  CFDE F0AE          	movff	postinc2,get_cluster@fatsect+3
 18228                           
 18229                           ;tff.c: 165: switch (fs->fs_type) {
 18230  002DE4  D0D8               	goto	l1024
 18231  002DE6                     
 18232                           ; BSR set to: 0
 18233                           ;tff.c: 167: bc = (WORD)clust * 3 / 2;
 18234                           
 18235                           ; BSR set to: 0
 18236  002DE6  C0A0  F060         	movff	get_cluster@clust,___wmul@multiplier
 18237  002DEA  C0A1  F061         	movff	get_cluster@clust+1,___wmul@multiplier+1
 18238  002DEE  0E00               	movlw	0
 18239  002DF0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18240  002DF2  0E03               	movlw	3
 18241  002DF4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 18242  002DF6  ECD3  F02A         	call	___wmul	;wreg free
 18243  002DFA  90D8               	bcf	status,0,c
 18244  002DFC  0100               	movlb	0	; () banked
 18245  002DFE  3161               	rrcf	(?___wmul+1)& (0+255),w,b
 18246  002E00  6FA2               	movwf	??_get_cluster& (0+255),b
 18247  002E02  3160               	rrcf	?___wmul& (0+255),w,b
 18248  002E04  6FAF               	movwf	get_cluster@bc& (0+255),b
 18249  002E06  C0A2  F0B0         	movff	??_get_cluster,get_cluster@bc+1
 18250                           
 18251                           ; BSR set to: 0
 18252                           ;tff.c: 168: if (!move_window(fatsect + bc / 512U)) break;
 18253  002E0A  C0AF  F0A2         	movff	get_cluster@bc,??_get_cluster
 18254  002E0E  C0B0  F0A3         	movff	get_cluster@bc+1,??_get_cluster+1
 18255  002E12  0E09               	movlw	9
 18256  002E14  6FA4               	movwf	(??_get_cluster+2)& (0+255),b
 18257  002E16                     u12495:
 18258  002E16  90D8               	bcf	status,0,c
 18259  002E18  33A3               	rrcf	(??_get_cluster+1)& (0+255),f,b
 18260  002E1A  33A2               	rrcf	??_get_cluster& (0+255),f,b
 18261  002E1C  2FA4               	decfsz	(??_get_cluster+2)& (0+255),f,b
 18262  002E1E  D7FB               	goto	u12495
 18263  002E20  51A2               	movf	??_get_cluster& (0+255),w,b
 18264  002E22  25AB               	addwf	get_cluster@fatsect& (0+255),w,b
 18265  002E24  6F8B               	movwf	move_window@sector& (0+255),b
 18266  002E26  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 18267  002E28  21AC               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 18268  002E2A  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 18269  002E2C  0E00               	movlw	0
 18270  002E2E  21AD               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 18271  002E30  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 18272  002E32  0E00               	movlw	0
 18273  002E34  21AE               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 18274  002E36  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 18275  002E38  EC8D  F01A         	call	_move_window	;wreg free
 18276  002E3C  0900               	iorlw	0
 18277  002E3E  B4D8               	btfsc	status,2,c
 18278  002E40  D0B7               	goto	l1027
 18279                           
 18280                           ;tff.c: 169: wc = fs->win[bc % 512U]; bc++;
 18281  002E42  0EFF               	movlw	255
 18282  002E44  0100               	movlb	0	; () banked
 18283  002E46  6FA2               	movwf	??_get_cluster& (0+255),b
 18284  002E48  0E01               	movlw	1
 18285  002E4A  6FA3               	movwf	(??_get_cluster+1)& (0+255),b
 18286  002E4C  C0AF  F0A4         	movff	get_cluster@bc,??_get_cluster+2
 18287  002E50  C0B0  F0A5         	movff	get_cluster@bc+1,??_get_cluster+3
 18288  002E54  51A2               	movf	??_get_cluster& (0+255),w,b
 18289  002E56  17A4               	andwf	(??_get_cluster+2)& (0+255),f,b
 18290  002E58  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 18291  002E5A  17A5               	andwf	(??_get_cluster+3)& (0+255),f,b
 18292  002E5C  0E20               	movlw	32
 18293  002E5E  27A4               	addwf	(??_get_cluster+2)& (0+255),f,b
 18294  002E60  0E00               	movlw	0
 18295  002E62  23A5               	addwfc	(??_get_cluster+3)& (0+255),f,b
 18296  002E64  51A4               	movf	(??_get_cluster+2)& (0+255),w,b
 18297  002E66  25B1               	addwf	get_cluster@fs& (0+255),w,b
 18298  002E68  6ED9               	movwf	fsr2l,c
 18299  002E6A  51A5               	movf	(??_get_cluster+3)& (0+255),w,b
 18300  002E6C  21B2               	addwfc	(get_cluster@fs+1)& (0+255),w,b
 18301  002E6E  6EDA               	movwf	fsr2h,c
 18302  002E70  50DF               	movf	indf2,w,c
 18303  002E72  6FA6               	movwf	(??_get_cluster+4)& (0+255),b
 18304  002E74  51A6               	movf	(??_get_cluster+4)& (0+255),w,b
 18305  002E76  6FA9               	movwf	get_cluster@wc& (0+255),b
 18306  002E78  6BAA               	clrf	(get_cluster@wc+1)& (0+255),b
 18307                           
 18308                           ; BSR set to: 0
 18309  002E7A  4BAF               	infsnz	get_cluster@bc& (0+255),f,b
 18310  002E7C  2BB0               	incf	(get_cluster@bc+1)& (0+255),f,b
 18311                           
 18312                           ; BSR set to: 0
 18313                           ;tff.c: 170: if (!move_window(fatsect + bc / 512U)) break;
 18314  002E7E  C0AF  F0A2         	movff	get_cluster@bc,??_get_cluster
 18315  002E82  C0B0  F0A3         	movff	get_cluster@bc+1,??_get_cluster+1
 18316  002E86  0E09               	movlw	9
 18317  002E88  6FA4               	movwf	(??_get_cluster+2)& (0+255),b
 18318  002E8A                     u12515:
 18319  002E8A  90D8               	bcf	status,0,c
 18320  002E8C  33A3               	rrcf	(??_get_cluster+1)& (0+255),f,b
 18321  002E8E  33A2               	rrcf	??_get_cluster& (0+255),f,b
 18322  002E90  2FA4               	decfsz	(??_get_cluster+2)& (0+255),f,b
 18323  002E92  D7FB               	goto	u12515
 18324  002E94  51A2               	movf	??_get_cluster& (0+255),w,b
 18325  002E96  25AB               	addwf	get_cluster@fatsect& (0+255),w,b
 18326  002E98  6F8B               	movwf	move_window@sector& (0+255),b
 18327  002E9A  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 18328  002E9C  21AC               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 18329  002E9E  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 18330  002EA0  0E00               	movlw	0
 18331  002EA2  21AD               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 18332  002EA4  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 18333  002EA6  0E00               	movlw	0
 18334  002EA8  21AE               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 18335  002EAA  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 18336  002EAC  EC8D  F01A         	call	_move_window	;wreg free
 18337  002EB0  0900               	iorlw	0
 18338  002EB2  B4D8               	btfsc	status,2,c
 18339  002EB4  D07D               	goto	l1027
 18340                           
 18341                           ;tff.c: 171: wc |= (WORD)fs->win[bc % 512U] << 8;
 18342  002EB6  0EFF               	movlw	255
 18343  002EB8  0100               	movlb	0	; () banked
 18344  002EBA  6FA2               	movwf	??_get_cluster& (0+255),b
 18345  002EBC  0E01               	movlw	1
 18346  002EBE  6FA3               	movwf	(??_get_cluster+1)& (0+255),b
 18347  002EC0  C0AF  F0A4         	movff	get_cluster@bc,??_get_cluster+2
 18348  002EC4  C0B0  F0A5         	movff	get_cluster@bc+1,??_get_cluster+3
 18349  002EC8  51A2               	movf	??_get_cluster& (0+255),w,b
 18350  002ECA  17A4               	andwf	(??_get_cluster+2)& (0+255),f,b
 18351  002ECC  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 18352  002ECE  17A5               	andwf	(??_get_cluster+3)& (0+255),f,b
 18353  002ED0  0E20               	movlw	32
 18354  002ED2  27A4               	addwf	(??_get_cluster+2)& (0+255),f,b
 18355  002ED4  0E00               	movlw	0
 18356  002ED6  23A5               	addwfc	(??_get_cluster+3)& (0+255),f,b
 18357  002ED8  51A4               	movf	(??_get_cluster+2)& (0+255),w,b
 18358  002EDA  25B1               	addwf	get_cluster@fs& (0+255),w,b
 18359  002EDC  6ED9               	movwf	fsr2l,c
 18360  002EDE  51A5               	movf	(??_get_cluster+3)& (0+255),w,b
 18361  002EE0  21B2               	addwfc	(get_cluster@fs+1)& (0+255),w,b
 18362  002EE2  6EDA               	movwf	fsr2h,c
 18363  002EE4  50DF               	movf	indf2,w,c
 18364  002EE6  6FA6               	movwf	(??_get_cluster+4)& (0+255),b
 18365  002EE8  51A6               	movf	(??_get_cluster+4)& (0+255),w,b
 18366  002EEA  6FA8               	movwf	(??_get_cluster+6)& (0+255),b
 18367  002EEC  6BA7               	clrf	(??_get_cluster+5)& (0+255),b
 18368  002EEE  51A7               	movf	(??_get_cluster+5)& (0+255),w,b
 18369  002EF0  13A9               	iorwf	get_cluster@wc& (0+255),f,b
 18370  002EF2  51A8               	movf	(??_get_cluster+6)& (0+255),w,b
 18371  002EF4  13AA               	iorwf	(get_cluster@wc+1)& (0+255),f,b
 18372                           
 18373                           ; BSR set to: 0
 18374                           ;tff.c: 172: return (clust & 1) ? (wc >> 4) : (wc & 0xFFF);
 18375  002EF6  B1A0               	btfsc	get_cluster@clust& (0+255),0,b
 18376  002EF8  D007               	goto	l1030
 18377                           
 18378                           ; BSR set to: 0
 18379  002EFA  0EFF               	movlw	255
 18380  002EFC  15A9               	andwf	get_cluster@wc& (0+255),w,b
 18381  002EFE  6FA0               	movwf	?_get_cluster& (0+255),b
 18382  002F00  0E0F               	movlw	15
 18383  002F02  15AA               	andwf	(get_cluster@wc+1)& (0+255),w,b
 18384  002F04  6FA1               	movwf	(?_get_cluster+1)& (0+255),b
 18385  002F06  0012               	return	
 18386  002F08                     l1030:
 18387                           
 18388                           ; BSR set to: 0
 18389                           
 18390                           ; BSR set to: 0
 18391  002F08  C0A9  F0A2         	movff	get_cluster@wc,??_get_cluster
 18392  002F0C  C0AA  F0A3         	movff	get_cluster@wc+1,??_get_cluster+1
 18393  002F10  0E04               	movlw	4
 18394  002F12  6FA4               	movwf	(??_get_cluster+2)& (0+255),b
 18395  002F14                     u12545:
 18396  002F14  90D8               	bcf	status,0,c
 18397  002F16  33A3               	rrcf	(??_get_cluster+1)& (0+255),f,b
 18398  002F18  33A2               	rrcf	??_get_cluster& (0+255),f,b
 18399  002F1A  2FA4               	decfsz	(??_get_cluster+2)& (0+255),f,b
 18400  002F1C  D7FB               	goto	u12545
 18401  002F1E  C0A2  F0A0         	movff	??_get_cluster,?_get_cluster
 18402  002F22  C0A3  F0A1         	movff	??_get_cluster+1,?_get_cluster+1
 18403                           
 18404                           ; BSR set to: 0
 18405                           
 18406                           ; BSR set to: 0
 18407  002F26  0012               	return	
 18408  002F28                     
 18409                           ; BSR set to: 0
 18410                           ;tff.c: 175: if (!move_window(fatsect + clust / 256)) break;
 18411                           
 18412                           ; BSR set to: 0
 18413  002F28  C0A0  F0A2         	movff	get_cluster@clust,??_get_cluster
 18414  002F2C  C0A1  F0A3         	movff	get_cluster@clust+1,??_get_cluster+1
 18415  002F30  C0A3  F0A2         	movff	??_get_cluster+1,??_get_cluster
 18416  002F34  6BA3               	clrf	(??_get_cluster+1)& (0+255),b
 18417  002F36  51A2               	movf	??_get_cluster& (0+255),w,b
 18418  002F38  25AB               	addwf	get_cluster@fatsect& (0+255),w,b
 18419  002F3A  6F8B               	movwf	move_window@sector& (0+255),b
 18420  002F3C  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 18421  002F3E  21AC               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 18422  002F40  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 18423  002F42  0E00               	movlw	0
 18424  002F44  21AD               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 18425  002F46  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 18426  002F48  0E00               	movlw	0
 18427  002F4A  21AE               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 18428  002F4C  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 18429  002F4E  EC8D  F01A         	call	_move_window	;wreg free
 18430  002F52  0900               	iorlw	0
 18431  002F54  B4D8               	btfsc	status,2,c
 18432  002F56  D02C               	goto	l1027
 18433                           
 18434                           ;tff.c: 176: return (WORD)(*(WORD*)(BYTE*)(&fs->win[((WORD)clust * 2) % 512U]));
 18435  002F58  0EFF               	movlw	255
 18436  002F5A  0100               	movlb	0	; () banked
 18437  002F5C  6FA2               	movwf	??_get_cluster& (0+255),b
 18438  002F5E  0E01               	movlw	1
 18439  002F60  6FA3               	movwf	(??_get_cluster+1)& (0+255),b
 18440  002F62  C0A0  F0A4         	movff	get_cluster@clust,??_get_cluster+2
 18441  002F66  C0A1  F0A5         	movff	get_cluster@clust+1,??_get_cluster+3
 18442  002F6A  90D8               	bcf	status,0,c
 18443  002F6C  37A4               	rlcf	(??_get_cluster+2)& (0+255),f,b
 18444  002F6E  37A5               	rlcf	(??_get_cluster+3)& (0+255),f,b
 18445  002F70  51A2               	movf	??_get_cluster& (0+255),w,b
 18446  002F72  17A4               	andwf	(??_get_cluster+2)& (0+255),f,b
 18447  002F74  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 18448  002F76  17A5               	andwf	(??_get_cluster+3)& (0+255),f,b
 18449  002F78  0E20               	movlw	32
 18450  002F7A  27A4               	addwf	(??_get_cluster+2)& (0+255),f,b
 18451  002F7C  0E00               	movlw	0
 18452  002F7E  23A5               	addwfc	(??_get_cluster+3)& (0+255),f,b
 18453  002F80  51A4               	movf	(??_get_cluster+2)& (0+255),w,b
 18454  002F82  25B1               	addwf	get_cluster@fs& (0+255),w,b
 18455  002F84  6ED9               	movwf	fsr2l,c
 18456  002F86  51A5               	movf	(??_get_cluster+3)& (0+255),w,b
 18457  002F88  21B2               	addwfc	(get_cluster@fs+1)& (0+255),w,b
 18458  002F8A  6EDA               	movwf	fsr2h,c
 18459  002F8C  CFDE F0A0          	movff	postinc2,?_get_cluster
 18460  002F90  CFDD F0A1          	movff	postdec2,?_get_cluster+1
 18461                           
 18462                           ; BSR set to: 0
 18463  002F94  0012               	return	
 18464  002F96                     l1024:
 18465                           
 18466                           ; BSR set to: 0
 18467                           
 18468                           ; BSR set to: 0
 18469  002F96  EE20 F01C          	lfsr	2,28
 18470  002F9A  51B1               	movf	get_cluster@fs& (0+255),w,b
 18471  002F9C  26D9               	addwf	fsr2l,f,c
 18472  002F9E  51B2               	movf	(get_cluster@fs+1)& (0+255),w,b
 18473  002FA0  22DA               	addwfc	fsr2h,f,c
 18474  002FA2  50DF               	movf	indf2,w,c
 18475                           
 18476                           ; Switch size 1, requested type "space"
 18477                           ; Number of cases is 2, Range of values is 1 to 2
 18478                           ; switch strategies available:
 18479                           ; Name         Instructions Cycles
 18480                           ; simple_byte            7     4 (average)
 18481                           ;	Chosen strategy is simple_byte
 18482  002FA4  0A01               	xorlw	1	; case 1
 18483  002FA6  B4D8               	btfsc	status,2,c
 18484  002FA8  D71E               	goto	l1025
 18485  002FAA  0A03               	xorlw	3	; case 2
 18486  002FAC  B4D8               	btfsc	status,2,c
 18487  002FAE  D7BC               	goto	l1034
 18488  002FB0                     l1027:
 18489                           
 18490                           ;tff.c: 183: }
 18491                           ;tff.c: 185: return 1;
 18492                           
 18493                           ; BSR set to: 0
 18494                           
 18495                           ; BSR set to: 0
 18496  002FB0  0E00               	movlw	0
 18497  002FB2  0100               	movlb	0	; () banked
 18498  002FB4  6FA1               	movwf	(?_get_cluster+1)& (0+255),b
 18499  002FB6  0E01               	movlw	1
 18500  002FB8  6FA0               	movwf	?_get_cluster& (0+255),b
 18501  002FBA  0012               	return	
 18502  002FBC                     __end_of_get_cluster:
 18503                           	opt stack 0
 18504                           tosu	equ	0xFFF
 18505                           tosh	equ	0xFFE
 18506                           tosl	equ	0xFFD
 18507                           pclath	equ	0xFFA
 18508                           tblptru	equ	0xFF8
 18509                           tblptrh	equ	0xFF7
 18510                           tblptrl	equ	0xFF6
 18511                           tablat	equ	0xFF5
 18512                           prodh	equ	0xFF4
 18513                           prodl	equ	0xFF3
 18514                           intcon	equ	0xFF2
 18515                           intcon2	equ	0xFF1
 18516                           intcon3	equ	0xFF0
 18517                           indf0	equ	0xFEF
 18518                           postinc0	equ	0xFEE
 18519                           fsr0h	equ	0xFEA
 18520                           fsr0l	equ	0xFE9
 18521                           wreg	equ	0xFE8
 18522                           indf1	equ	0xFE7
 18523                           postinc1	equ	0xFE6
 18524                           postdec1	equ	0xFE5
 18525                           plusw1	equ	0xFE3
 18526                           fsr1h	equ	0xFE2
 18527                           fsr1l	equ	0xFE1
 18528                           indf2	equ	0xFDF
 18529                           postinc2	equ	0xFDE
 18530                           postdec2	equ	0xFDD
 18531                           plusw2	equ	0xFDB
 18532                           fsr2h	equ	0xFDA
 18533                           fsr2l	equ	0xFD9
 18534                           status	equ	0xFD8
 18535                           
 18536 ;; *************** function ___wmul *****************
 18537 ;; Defined at:
 18538 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 18539 ;; Parameters:    Size  Location     Type
 18540 ;;  multiplier      2    0[BANK0 ] unsigned int 
 18541 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 18542 ;; Auto vars:     Size  Location     Type
 18543 ;;  product         2    4[BANK0 ] unsigned int 
 18544 ;; Return value:  Size  Location     Type
 18545 ;;                  2    0[BANK0 ] unsigned int 
 18546 ;; Registers used:
 18547 ;;		wreg, status,2, status,0, prodl, prodh
 18548 ;; Tracked objects:
 18549 ;;		On entry : 0/0
 18550 ;;		On exit  : 0/0
 18551 ;;		Unchanged: 0/0
 18552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18553 ;;      Params:         0       4       0       0       0       0       0       0       0
 18554 ;;      Locals:         0       2       0       0       0       0       0       0       0
 18555 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18556 ;;      Totals:         0       6       0       0       0       0       0       0       0
 18557 ;;Total ram usage:        6 bytes
 18558 ;; Hardware stack levels used:    1
 18559 ;; Hardware stack levels required when called:    3
 18560 ;; This function calls:
 18561 ;;		Nothing
 18562 ;; This function is called by:
 18563 ;;		_get_cluster
 18564 ;;		_put_cluster
 18565 ;;		_fprintf
 18566 ;;		_atoi
 18567 ;; This function uses a non-reentrant model
 18568 ;;
 18569                           
 18570                           	psect	text62
 18571  0055A6                     __ptext62:
 18572                           	opt stack 0
 18573  0055A6                     ___wmul:
 18574                           	opt stack 24
 18575                           
 18576                           ; BSR set to: 0
 18577                           ;incstack = 0
 18578  0055A6  0100               	movlb	0	; () banked
 18579  0055A8  5160               	movf	___wmul@multiplier& (0+255),w,b
 18580  0055AA  0362               	mulwf	___wmul@multiplicand& (0+255),b
 18581  0055AC  CFF3 F064          	movff	prodl,___wmul@product
 18582  0055B0  CFF4 F065          	movff	prodh,___wmul@product+1
 18583  0055B4  5160               	movf	___wmul@multiplier& (0+255),w,b
 18584  0055B6  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 18585  0055B8  50F3               	movf	prodl,w,c
 18586  0055BA  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 18587  0055BC  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 18588  0055BE  0362               	mulwf	___wmul@multiplicand& (0+255),b
 18589  0055C0  50F3               	movf	prodl,w,c
 18590  0055C2  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 18591                           
 18592                           ; BSR set to: 0
 18593  0055C4  C064  F060         	movff	___wmul@product,?___wmul
 18594  0055C8  C065  F061         	movff	___wmul@product+1,?___wmul+1
 18595  0055CC  0012               	return	
 18596  0055CE                     __end_of___wmul:
 18597                           	opt stack 0
 18598                           tosu	equ	0xFFF
 18599                           tosh	equ	0xFFE
 18600                           tosl	equ	0xFFD
 18601                           pclath	equ	0xFFA
 18602                           tblptru	equ	0xFF8
 18603                           tblptrh	equ	0xFF7
 18604                           tblptrl	equ	0xFF6
 18605                           tablat	equ	0xFF5
 18606                           prodh	equ	0xFF4
 18607                           prodl	equ	0xFF3
 18608                           intcon	equ	0xFF2
 18609                           intcon2	equ	0xFF1
 18610                           intcon3	equ	0xFF0
 18611                           indf0	equ	0xFEF
 18612                           postinc0	equ	0xFEE
 18613                           fsr0h	equ	0xFEA
 18614                           fsr0l	equ	0xFE9
 18615                           wreg	equ	0xFE8
 18616                           indf1	equ	0xFE7
 18617                           postinc1	equ	0xFE6
 18618                           postdec1	equ	0xFE5
 18619                           plusw1	equ	0xFE3
 18620                           fsr1h	equ	0xFE2
 18621                           fsr1l	equ	0xFE1
 18622                           indf2	equ	0xFDF
 18623                           postinc2	equ	0xFDE
 18624                           postdec2	equ	0xFDD
 18625                           plusw2	equ	0xFDB
 18626                           fsr2h	equ	0xFDA
 18627                           fsr2l	equ	0xFD9
 18628                           status	equ	0xFD8
 18629                           
 18630 ;; *************** function ___lldiv *****************
 18631 ;; Defined at:
 18632 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 18633 ;; Parameters:    Size  Location     Type
 18634 ;;  dividend        4    0[BANK0 ] unsigned long 
 18635 ;;  divisor         4    4[BANK0 ] unsigned long 
 18636 ;; Auto vars:     Size  Location     Type
 18637 ;;  quotient        4    8[BANK0 ] unsigned long 
 18638 ;;  counter         1   12[BANK0 ] unsigned char 
 18639 ;; Return value:  Size  Location     Type
 18640 ;;                  4    0[BANK0 ] unsigned long 
 18641 ;; Registers used:
 18642 ;;		wreg, status,2, status,0
 18643 ;; Tracked objects:
 18644 ;;		On entry : 0/0
 18645 ;;		On exit  : 0/0
 18646 ;;		Unchanged: 0/0
 18647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18648 ;;      Params:         0       8       0       0       0       0       0       0       0
 18649 ;;      Locals:         0       5       0       0       0       0       0       0       0
 18650 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18651 ;;      Totals:         0      13       0       0       0       0       0       0       0
 18652 ;;Total ram usage:       13 bytes
 18653 ;; Hardware stack levels used:    1
 18654 ;; Hardware stack levels required when called:    3
 18655 ;; This function calls:
 18656 ;;		Nothing
 18657 ;; This function is called by:
 18658 ;;		_auto_mount
 18659 ;;		_f_lseek
 18660 ;;		_fprintf
 18661 ;; This function uses a non-reentrant model
 18662 ;;
 18663                           
 18664                           	psect	text63
 18665  004B44                     __ptext63:
 18666                           	opt stack 0
 18667  004B44                     ___lldiv:
 18668                           	opt stack 23
 18669                           
 18670                           ; BSR set to: 0
 18671                           ;incstack = 0
 18672  004B44  0E00               	movlw	0
 18673  004B46  0100               	movlb	0	; () banked
 18674  004B48  6F68               	movwf	___lldiv@quotient& (0+255),b
 18675  004B4A  0E00               	movlw	0
 18676  004B4C  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 18677  004B4E  0E00               	movlw	0
 18678  004B50  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 18679  004B52  0E00               	movlw	0
 18680  004B54  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 18681                           
 18682                           ; BSR set to: 0
 18683  004B56  5164               	movf	___lldiv@divisor& (0+255),w,b
 18684  004B58  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 18685  004B5A  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 18686  004B5C  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 18687  004B5E  B4D8               	btfsc	status,2,c
 18688  004B60  D02A               	goto	l1885
 18689                           
 18690                           ; BSR set to: 0
 18691  004B62  0E01               	movlw	1
 18692  004B64  6F6C               	movwf	___lldiv@counter& (0+255),b
 18693  004B66  D006               	goto	l1880
 18694  004B68                     
 18695                           ; BSR set to: 0
 18696                           
 18697                           ; BSR set to: 0
 18698  004B68  90D8               	bcf	status,0,c
 18699  004B6A  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 18700  004B6C  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 18701  004B6E  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 18702  004B70  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 18703  004B72  2B6C               	incf	___lldiv@counter& (0+255),f,b
 18704  004B74                     l1880:
 18705                           
 18706                           ; BSR set to: 0
 18707                           
 18708                           ; BSR set to: 0
 18709  004B74  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 18710  004B76  D7F8               	goto	l1881
 18711  004B78                     u13970:
 18712                           
 18713                           ; BSR set to: 0
 18714                           
 18715                           ; BSR set to: 0
 18716                           
 18717                           ; BSR set to: 0
 18718  004B78  90D8               	bcf	status,0,c
 18719  004B7A  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 18720  004B7C  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 18721  004B7E  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 18722  004B80  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 18723                           
 18724                           ; BSR set to: 0
 18725  004B82  5164               	movf	___lldiv@divisor& (0+255),w,b
 18726  004B84  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 18727  004B86  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 18728  004B88  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 18729  004B8A  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 18730  004B8C  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 18731  004B8E  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 18732  004B90  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 18733  004B92  A0D8               	btfss	status,0,c
 18734  004B94  D009               	goto	l1884
 18735                           
 18736                           ; BSR set to: 0
 18737  004B96  5164               	movf	___lldiv@divisor& (0+255),w,b
 18738  004B98  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 18739  004B9A  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 18740  004B9C  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 18741  004B9E  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 18742  004BA0  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 18743  004BA2  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 18744  004BA4  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 18745                           
 18746                           ; BSR set to: 0
 18747  004BA6  8168               	bsf	___lldiv@quotient& (0+255),0,b
 18748  004BA8                     l1884:
 18749                           
 18750                           ; BSR set to: 0
 18751                           
 18752                           ; BSR set to: 0
 18753  004BA8  90D8               	bcf	status,0,c
 18754  004BAA  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 18755  004BAC  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 18756  004BAE  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 18757  004BB0  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 18758                           
 18759                           ; BSR set to: 0
 18760  004BB2  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 18761  004BB4  D7E1               	goto	u13970
 18762  004BB6                     l1885:
 18763                           
 18764                           ; BSR set to: 0
 18765                           
 18766                           ; BSR set to: 0
 18767  004BB6  C068  F060         	movff	___lldiv@quotient,?___lldiv
 18768  004BBA  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 18769  004BBE  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 18770  004BC2  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 18771                           
 18772                           ; BSR set to: 0
 18773  004BC6  0012               	return		;funcret
 18774  004BC8                     __end_of___lldiv:
 18775                           	opt stack 0
 18776                           tosu	equ	0xFFF
 18777                           tosh	equ	0xFFE
 18778                           tosl	equ	0xFFD
 18779                           pclath	equ	0xFFA
 18780                           tblptru	equ	0xFF8
 18781                           tblptrh	equ	0xFF7
 18782                           tblptrl	equ	0xFF6
 18783                           tablat	equ	0xFF5
 18784                           prodh	equ	0xFF4
 18785                           prodl	equ	0xFF3
 18786                           intcon	equ	0xFF2
 18787                           intcon2	equ	0xFF1
 18788                           intcon3	equ	0xFF0
 18789                           indf0	equ	0xFEF
 18790                           postinc0	equ	0xFEE
 18791                           fsr0h	equ	0xFEA
 18792                           fsr0l	equ	0xFE9
 18793                           wreg	equ	0xFE8
 18794                           indf1	equ	0xFE7
 18795                           postinc1	equ	0xFE6
 18796                           postdec1	equ	0xFE5
 18797                           plusw1	equ	0xFE3
 18798                           fsr1h	equ	0xFE2
 18799                           fsr1l	equ	0xFE1
 18800                           indf2	equ	0xFDF
 18801                           postinc2	equ	0xFDE
 18802                           postdec2	equ	0xFDD
 18803                           plusw2	equ	0xFDB
 18804                           fsr2h	equ	0xFDA
 18805                           fsr2l	equ	0xFD9
 18806                           status	equ	0xFD8
 18807                           
 18808 ;; *************** function _f_close *****************
 18809 ;; Defined at:
 18810 ;;		line 1108 in file "bibliotecas/tff.c"
 18811 ;; Parameters:    Size  Location     Type
 18812 ;;  fp              2   75[BANK0 ] PTR struct _FIL
 18813 ;;		 -> fil(28), 
 18814 ;; Auto vars:     Size  Location     Type
 18815 ;;  res             1   77[BANK0 ] enum E155
 18816 ;; Return value:  Size  Location     Type
 18817 ;;                  1    wreg      enum E3974
 18818 ;; Registers used:
 18819 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 18820 ;; Tracked objects:
 18821 ;;		On entry : 0/0
 18822 ;;		On exit  : 0/0
 18823 ;;		Unchanged: 0/0
 18824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18825 ;;      Params:         0       2       0       0       0       0       0       0       0
 18826 ;;      Locals:         0       1       0       0       0       0       0       0       0
 18827 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18828 ;;      Totals:         0       3       0       0       0       0       0       0       0
 18829 ;;Total ram usage:        3 bytes
 18830 ;; Hardware stack levels used:    1
 18831 ;; Hardware stack levels required when called:   11
 18832 ;; This function calls:
 18833 ;;		_f_sync
 18834 ;; This function is called by:
 18835 ;;		_escrita_sdcard
 18836 ;;		_sdcard_init
 18837 ;;		_leitura_sdcard
 18838 ;; This function uses a non-reentrant model
 18839 ;;
 18840                           
 18841                           	psect	text64
 18842  005524                     __ptext64:
 18843                           	opt stack 0
 18844  005524                     _f_close:
 18845                           	opt stack 16
 18846                           
 18847                           ;tff.c: 1112: FRESULT res;
 18848                           ;tff.c: 1116: res = f_sync(fp);
 18849                           
 18850                           ; BSR set to: 0
 18851                           ;incstack = 0
 18852  005524  C0AB  F0A2         	movff	f_close@fp,f_sync@fp
 18853  005528  C0AC  F0A3         	movff	f_close@fp+1,f_sync@fp+1
 18854  00552C  EC5F  F01F         	call	_f_sync	;wreg free
 18855  005530  0100               	movlb	0	; () banked
 18856  005532  6FAD               	movwf	f_close@res& (0+255),b
 18857                           
 18858                           ; BSR set to: 0
 18859                           ;tff.c: 1120: if (res == FR_OK) fp->fs = (0);
 18860  005534  51AD               	movf	f_close@res& (0+255),w,b
 18861  005536  A4D8               	btfss	status,2,c
 18862  005538  0012               	return	
 18863                           
 18864                           ; BSR set to: 0
 18865  00553A  EE20 F004          	lfsr	2,4
 18866  00553E  51AB               	movf	f_close@fp& (0+255),w,b
 18867  005540  26D9               	addwf	fsr2l,f,c
 18868  005542  51AC               	movf	(f_close@fp+1)& (0+255),w,b
 18869  005544  22DA               	addwfc	fsr2h,f,c
 18870  005546  0E00               	movlw	0
 18871  005548  6EDE               	movwf	postinc2,c
 18872  00554A  0E00               	movlw	0
 18873  00554C  6EDD               	movwf	postdec2,c
 18874                           
 18875                           ; BSR set to: 0
 18876  00554E  0012               	return	
 18877  005550                     __end_of_f_close:
 18878                           	opt stack 0
 18879                           tosu	equ	0xFFF
 18880                           tosh	equ	0xFFE
 18881                           tosl	equ	0xFFD
 18882                           pclath	equ	0xFFA
 18883                           tblptru	equ	0xFF8
 18884                           tblptrh	equ	0xFF7
 18885                           tblptrl	equ	0xFF6
 18886                           tablat	equ	0xFF5
 18887                           prodh	equ	0xFF4
 18888                           prodl	equ	0xFF3
 18889                           intcon	equ	0xFF2
 18890                           intcon2	equ	0xFF1
 18891                           intcon3	equ	0xFF0
 18892                           indf0	equ	0xFEF
 18893                           postinc0	equ	0xFEE
 18894                           fsr0h	equ	0xFEA
 18895                           fsr0l	equ	0xFE9
 18896                           wreg	equ	0xFE8
 18897                           indf1	equ	0xFE7
 18898                           postinc1	equ	0xFE6
 18899                           postdec1	equ	0xFE5
 18900                           plusw1	equ	0xFE3
 18901                           fsr1h	equ	0xFE2
 18902                           fsr1l	equ	0xFE1
 18903                           indf2	equ	0xFDF
 18904                           postinc2	equ	0xFDE
 18905                           postdec2	equ	0xFDD
 18906                           plusw2	equ	0xFDB
 18907                           fsr2h	equ	0xFDA
 18908                           fsr2l	equ	0xFD9
 18909                           status	equ	0xFD8
 18910                           
 18911 ;; *************** function _f_sync *****************
 18912 ;; Defined at:
 18913 ;;		line 1069 in file "bibliotecas/tff.c"
 18914 ;; Parameters:    Size  Location     Type
 18915 ;;  fp              2   66[BANK0 ] PTR struct _FIL
 18916 ;;		 -> fil(28), 
 18917 ;; Auto vars:     Size  Location     Type
 18918 ;;  tim             4   68[BANK0 ] unsigned long 
 18919 ;;  dir             2   73[BANK0 ] PTR unsigned char 
 18920 ;;		 -> NULL(0), fs(544), 
 18921 ;;  res             1   72[BANK0 ] enum E155
 18922 ;; Return value:  Size  Location     Type
 18923 ;;                  1    wreg      enum E155
 18924 ;; Registers used:
 18925 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 18926 ;; Tracked objects:
 18927 ;;		On entry : 0/0
 18928 ;;		On exit  : 0/0
 18929 ;;		Unchanged: 0/0
 18930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18931 ;;      Params:         0       2       0       0       0       0       0       0       0
 18932 ;;      Locals:         0       7       0       0       0       0       0       0       0
 18933 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18934 ;;      Totals:         0       9       0       0       0       0       0       0       0
 18935 ;;Total ram usage:        9 bytes
 18936 ;; Hardware stack levels used:    1
 18937 ;; Hardware stack levels required when called:   10
 18938 ;; This function calls:
 18939 ;;		_get_fattime
 18940 ;;		_move_window
 18941 ;;		_sync
 18942 ;;		_validate
 18943 ;; This function is called by:
 18944 ;;		_f_close
 18945 ;; This function uses a non-reentrant model
 18946 ;;
 18947                           
 18948                           	psect	text65
 18949  003EBE                     __ptext65:
 18950                           	opt stack 0
 18951  003EBE                     _f_sync:
 18952                           	opt stack 16
 18953                           
 18954                           ;tff.c: 1073: FRESULT res;
 18955                           ;tff.c: 1074: DWORD tim;
 18956                           ;tff.c: 1075: BYTE *dir;
 18957                           ;tff.c: 1078: res = validate(fp->fs, fp->id);
 18958                           
 18959                           ; BSR set to: 0
 18960                           ;incstack = 0
 18961  003EBE  0100               	movlb	0	; () banked
 18962  003EC0  EE20 F004          	lfsr	2,4
 18963  003EC4  51A2               	movf	f_sync@fp& (0+255),w,b
 18964  003EC6  26D9               	addwf	fsr2l,f,c
 18965  003EC8  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 18966  003ECA  22DA               	addwfc	fsr2h,f,c
 18967  003ECC  CFDE F067          	movff	postinc2,validate@fs
 18968  003ED0  CFDD F068          	movff	postdec2,validate@fs+1
 18969  003ED4  C0A2  FFD9         	movff	f_sync@fp,fsr2l
 18970  003ED8  C0A3  FFDA         	movff	f_sync@fp+1,fsr2h
 18971  003EDC  CFDE F069          	movff	postinc2,validate@id
 18972  003EE0  CFDD F06A          	movff	postdec2,validate@id+1
 18973  003EE4  ECB6  F028         	call	_validate	;wreg free
 18974  003EE8  0100               	movlb	0	; () banked
 18975  003EEA  6FA8               	movwf	f_sync@res& (0+255),b
 18976                           
 18977                           ; BSR set to: 0
 18978                           ;tff.c: 1079: if (res == FR_OK) {
 18979  003EEC  51A8               	movf	f_sync@res& (0+255),w,b
 18980  003EEE  A4D8               	btfss	status,2,c
 18981  003EF0  D079               	goto	l1335
 18982                           
 18983                           ; BSR set to: 0
 18984                           ;tff.c: 1080: if (fp->flag & 0x20) {
 18985  003EF2  EE20 F002          	lfsr	2,2
 18986  003EF6  51A2               	movf	f_sync@fp& (0+255),w,b
 18987  003EF8  26D9               	addwf	fsr2l,f,c
 18988  003EFA  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 18989  003EFC  22DA               	addwfc	fsr2h,f,c
 18990  003EFE  AADF               	btfss	indf2,5,c
 18991  003F00  D071               	goto	l1335
 18992                           
 18993                           ; BSR set to: 0
 18994                           ;tff.c: 1082: if (!move_window(fp->dir_sect))
 18995  003F02  EE20 F016          	lfsr	2,22
 18996  003F06  51A2               	movf	f_sync@fp& (0+255),w,b
 18997  003F08  26D9               	addwf	fsr2l,f,c
 18998  003F0A  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 18999  003F0C  22DA               	addwfc	fsr2h,f,c
 19000  003F0E  CFDE F08B          	movff	postinc2,move_window@sector
 19001  003F12  CFDE F08C          	movff	postinc2,move_window@sector+1
 19002  003F16  CFDE F08D          	movff	postinc2,move_window@sector+2
 19003  003F1A  CFDE F08E          	movff	postinc2,move_window@sector+3
 19004  003F1E  EC8D  F01A         	call	_move_window	;wreg free
 19005  003F22  0900               	iorlw	0
 19006  003F24  A4D8               	btfss	status,2,c
 19007  003F26  D002               	goto	l1336
 19008                           
 19009                           ;tff.c: 1083: return FR_RW_ERROR;
 19010  003F28  0E08               	movlw	8
 19011  003F2A  0012               	return	
 19012  003F2C                     l1336:
 19013                           
 19014                           ;tff.c: 1084: dir = fp->dir_ptr;
 19015  003F2C  0100               	movlb	0	; () banked
 19016  003F2E  EE20 F01A          	lfsr	2,26
 19017  003F32  51A2               	movf	f_sync@fp& (0+255),w,b
 19018  003F34  26D9               	addwf	fsr2l,f,c
 19019  003F36  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 19020  003F38  22DA               	addwfc	fsr2h,f,c
 19021  003F3A  CFDE F0A9          	movff	postinc2,f_sync@dir
 19022  003F3E  CFDD F0AA          	movff	postdec2,f_sync@dir+1
 19023                           
 19024                           ;tff.c: 1085: dir[11] |= 0x20;
 19025  003F42  EE20 F00B          	lfsr	2,11
 19026  003F46  51A9               	movf	f_sync@dir& (0+255),w,b
 19027  003F48  26D9               	addwf	fsr2l,f,c
 19028  003F4A  51AA               	movf	(f_sync@dir+1)& (0+255),w,b
 19029  003F4C  22DA               	addwfc	fsr2h,f,c
 19030  003F4E  0E00               	movlw	0
 19031  003F50  8ADB               	bsf	plusw2,5,c
 19032                           
 19033                           ; BSR set to: 0
 19034                           ;tff.c: 1086: *(DWORD*)(BYTE*)(&dir[28])=(DWORD)(fp->fsize);
 19035  003F52  EE20 F00A          	lfsr	2,10
 19036  003F56  51A2               	movf	f_sync@fp& (0+255),w,b
 19037  003F58  26D9               	addwf	fsr2l,f,c
 19038  003F5A  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 19039  003F5C  22DA               	addwfc	fsr2h,f,c
 19040  003F5E  EE10 F01C          	lfsr	1,28
 19041  003F62  51A9               	movf	f_sync@dir& (0+255),w,b
 19042  003F64  26E1               	addwf	fsr1l,f,c
 19043  003F66  51AA               	movf	(f_sync@dir+1)& (0+255),w,b
 19044  003F68  22E2               	addwfc	fsr1h,f,c
 19045  003F6A  CFDE FFE6          	movff	postinc2,postinc1
 19046  003F6E  CFDE FFE6          	movff	postinc2,postinc1
 19047  003F72  CFDE FFE6          	movff	postinc2,postinc1
 19048  003F76  CFDE FFE6          	movff	postinc2,postinc1
 19049                           
 19050                           ; BSR set to: 0
 19051                           ;tff.c: 1087: *(WORD*)(BYTE*)(&dir[26])=(WORD)(fp->org_clust);
 19052  003F7A  EE20 F00E          	lfsr	2,14
 19053  003F7E  51A2               	movf	f_sync@fp& (0+255),w,b
 19054  003F80  26D9               	addwf	fsr2l,f,c
 19055  003F82  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 19056  003F84  22DA               	addwfc	fsr2h,f,c
 19057  003F86  EE10 F01A          	lfsr	1,26
 19058  003F8A  51A9               	movf	f_sync@dir& (0+255),w,b
 19059  003F8C  26E1               	addwf	fsr1l,f,c
 19060  003F8E  51AA               	movf	(f_sync@dir+1)& (0+255),w,b
 19061  003F90  22E2               	addwfc	fsr1h,f,c
 19062  003F92  CFDE FFE6          	movff	postinc2,postinc1
 19063  003F96  CFDD FFE5          	movff	postdec2,postdec1
 19064                           
 19065                           ; BSR set to: 0
 19066                           ;tff.c: 1091: tim = get_fattime();
 19067  003F9A  ECF4  F01F         	call	_get_fattime	;wreg free
 19068  003F9E  C060  F0A4         	movff	?_get_fattime,f_sync@tim
 19069  003FA2  C061  F0A5         	movff	?_get_fattime+1,f_sync@tim+1
 19070  003FA6  C062  F0A6         	movff	?_get_fattime+2,f_sync@tim+2
 19071  003FAA  C063  F0A7         	movff	?_get_fattime+3,f_sync@tim+3
 19072                           
 19073                           ;tff.c: 1092: *(DWORD*)(BYTE*)(&dir[22])=(DWORD)(tim);
 19074  003FAE  0100               	movlb	0	; () banked
 19075  003FB0  EE20 F016          	lfsr	2,22
 19076  003FB4  51A9               	movf	f_sync@dir& (0+255),w,b
 19077  003FB6  26D9               	addwf	fsr2l,f,c
 19078  003FB8  51AA               	movf	(f_sync@dir+1)& (0+255),w,b
 19079  003FBA  22DA               	addwfc	fsr2h,f,c
 19080  003FBC  C0A4  FFDE         	movff	f_sync@tim,postinc2
 19081  003FC0  C0A5  FFDE         	movff	f_sync@tim+1,postinc2
 19082  003FC4  C0A6  FFDE         	movff	f_sync@tim+2,postinc2
 19083  003FC8  C0A7  FFDE         	movff	f_sync@tim+3,postinc2
 19084                           
 19085                           ; BSR set to: 0
 19086                           ;tff.c: 1093: fp->flag &= (BYTE)~0x20;
 19087  003FCC  EE20 F002          	lfsr	2,2
 19088  003FD0  51A2               	movf	f_sync@fp& (0+255),w,b
 19089  003FD2  26D9               	addwf	fsr2l,f,c
 19090  003FD4  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 19091  003FD6  22DA               	addwfc	fsr2h,f,c
 19092  003FD8  0EDF               	movlw	223
 19093  003FDA  16DF               	andwf	indf2,f,c
 19094                           
 19095                           ; BSR set to: 0
 19096                           ;tff.c: 1094: res = sync();
 19097  003FDC  EC65  F027         	call	_sync	;wreg free
 19098  003FE0  0100               	movlb	0	; () banked
 19099  003FE2  6FA8               	movwf	f_sync@res& (0+255),b
 19100  003FE4                     l1335:
 19101                           
 19102                           ; BSR set to: 0
 19103                           ;tff.c: 1095: }
 19104                           ;tff.c: 1096: }
 19105                           ;tff.c: 1097: return res;
 19106                           
 19107                           ; BSR set to: 0
 19108                           
 19109                           ; BSR set to: 0
 19110  003FE4  51A8               	movf	f_sync@res& (0+255),w,b
 19111  003FE6  0012               	return	
 19112  003FE8                     __end_of_f_sync:
 19113                           	opt stack 0
 19114                           tosu	equ	0xFFF
 19115                           tosh	equ	0xFFE
 19116                           tosl	equ	0xFFD
 19117                           pclath	equ	0xFFA
 19118                           tblptru	equ	0xFF8
 19119                           tblptrh	equ	0xFF7
 19120                           tblptrl	equ	0xFF6
 19121                           tablat	equ	0xFF5
 19122                           prodh	equ	0xFF4
 19123                           prodl	equ	0xFF3
 19124                           intcon	equ	0xFF2
 19125                           intcon2	equ	0xFF1
 19126                           intcon3	equ	0xFF0
 19127                           indf0	equ	0xFEF
 19128                           postinc0	equ	0xFEE
 19129                           fsr0h	equ	0xFEA
 19130                           fsr0l	equ	0xFE9
 19131                           wreg	equ	0xFE8
 19132                           indf1	equ	0xFE7
 19133                           postinc1	equ	0xFE6
 19134                           postdec1	equ	0xFE5
 19135                           plusw1	equ	0xFE3
 19136                           fsr1h	equ	0xFE2
 19137                           fsr1l	equ	0xFE1
 19138                           indf2	equ	0xFDF
 19139                           postinc2	equ	0xFDE
 19140                           postdec2	equ	0xFDD
 19141                           plusw2	equ	0xFDB
 19142                           fsr2h	equ	0xFDA
 19143                           fsr2l	equ	0xFD9
 19144                           status	equ	0xFD8
 19145                           
 19146 ;; *************** function _validate *****************
 19147 ;; Defined at:
 19148 ;;		line 766 in file "bibliotecas/tff.c"
 19149 ;; Parameters:    Size  Location     Type
 19150 ;;  fs              2    7[BANK0 ] PTR const struct _FATFS
 19151 ;;		 -> NULL(0), fs(544), 
 19152 ;;  id              2    9[BANK0 ] unsigned short 
 19153 ;; Auto vars:     Size  Location     Type
 19154 ;;		None
 19155 ;; Return value:  Size  Location     Type
 19156 ;;                  1    wreg      enum E155
 19157 ;; Registers used:
 19158 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19159 ;; Tracked objects:
 19160 ;;		On entry : 0/0
 19161 ;;		On exit  : 0/0
 19162 ;;		Unchanged: 0/0
 19163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19164 ;;      Params:         0       4       0       0       0       0       0       0       0
 19165 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19166 ;;      Temps:          0       2       0       0       0       0       0       0       0
 19167 ;;      Totals:         0       6       0       0       0       0       0       0       0
 19168 ;;Total ram usage:        6 bytes
 19169 ;; Hardware stack levels used:    1
 19170 ;; Hardware stack levels required when called:    5
 19171 ;; This function calls:
 19172 ;;		_disk_status
 19173 ;; This function is called by:
 19174 ;;		_f_write
 19175 ;;		_f_sync
 19176 ;;		_f_lseek
 19177 ;;		_f_read
 19178 ;;		_f_readdir
 19179 ;; This function uses a non-reentrant model
 19180 ;;
 19181                           
 19182                           	psect	text66
 19183  00516C                     __ptext66:
 19184                           	opt stack 0
 19185  00516C                     _validate:
 19186                           	opt stack 18
 19187                           
 19188                           ;tff.c: 771: if (!fs || !fs->fs_type || fs->id != id)
 19189                           
 19190                           ;incstack = 0
 19191  00516C  0100               	movlb	0	; () banked
 19192  00516E  5167               	movf	validate@fs& (0+255),w,b
 19193  005170  1168               	iorwf	(validate@fs+1)& (0+255),w,b
 19194  005172  B4D8               	btfsc	status,2,c
 19195  005174  D014               	goto	u12870
 19196                           
 19197                           ; BSR set to: 0
 19198  005176  EE20 F01C          	lfsr	2,28
 19199  00517A  5167               	movf	validate@fs& (0+255),w,b
 19200  00517C  26D9               	addwf	fsr2l,f,c
 19201  00517E  5168               	movf	(validate@fs+1)& (0+255),w,b
 19202  005180  22DA               	addwfc	fsr2h,f,c
 19203  005182  50DF               	movf	indf2,w,c
 19204  005184  B4D8               	btfsc	status,2,c
 19205  005186  D00B               	goto	u12870
 19206                           
 19207                           ; BSR set to: 0
 19208  005188  C067  FFD9         	movff	validate@fs,fsr2l
 19209  00518C  C068  FFDA         	movff	validate@fs+1,fsr2h
 19210  005190  5169               	movf	validate@id& (0+255),w,b
 19211  005192  18DE               	xorwf	postinc2,w,c
 19212  005194  E104               	bnz	l10122
 19213  005196  516A               	movf	(validate@id+1)& (0+255),w,b
 19214  005198  18DE               	xorwf	postinc2,w,c
 19215  00519A  B4D8               	btfsc	status,2,c
 19216  00519C  D002               	goto	l1239
 19217  00519E                     u12870:
 19218  00519E                     l10122:
 19219                           
 19220                           ; BSR set to: 0
 19221                           ;tff.c: 772: return FR_INVALID_OBJECT;
 19222  00519E  0E0C               	movlw	12
 19223                           
 19224                           ; BSR set to: 0
 19225  0051A0  0012               	return	
 19226  0051A2                     l1239:
 19227                           
 19228                           ; BSR set to: 0
 19229                           ;tff.c: 773: if (disk_status(0) & 0x01)
 19230                           
 19231                           ; BSR set to: 0
 19232  0051A2  0E00               	movlw	0
 19233  0051A4  EC00  F029         	call	_disk_status
 19234  0051A8  0100               	movlb	0	; () banked
 19235  0051AA  6F6B               	movwf	??_validate& (0+255),b
 19236  0051AC  A16B               	btfss	??_validate& (0+255),0,b
 19237  0051AE  D002               	goto	l1243
 19238                           
 19239                           ; BSR set to: 0
 19240                           ;tff.c: 774: return FR_NOT_READY;
 19241  0051B0  0E01               	movlw	1
 19242                           
 19243                           ; BSR set to: 0
 19244  0051B2  0012               	return	
 19245  0051B4                     l1243:
 19246                           
 19247                           ; BSR set to: 0
 19248                           ;tff.c: 776: return FR_OK;
 19249                           
 19250                           ; BSR set to: 0
 19251  0051B4  0E00               	movlw	0
 19252  0051B6  0012               	return	
 19253  0051B8                     __end_of_validate:
 19254                           	opt stack 0
 19255                           tosu	equ	0xFFF
 19256                           tosh	equ	0xFFE
 19257                           tosl	equ	0xFFD
 19258                           pclath	equ	0xFFA
 19259                           tblptru	equ	0xFF8
 19260                           tblptrh	equ	0xFF7
 19261                           tblptrl	equ	0xFF6
 19262                           tablat	equ	0xFF5
 19263                           prodh	equ	0xFF4
 19264                           prodl	equ	0xFF3
 19265                           intcon	equ	0xFF2
 19266                           intcon2	equ	0xFF1
 19267                           intcon3	equ	0xFF0
 19268                           indf0	equ	0xFEF
 19269                           postinc0	equ	0xFEE
 19270                           fsr0h	equ	0xFEA
 19271                           fsr0l	equ	0xFE9
 19272                           wreg	equ	0xFE8
 19273                           indf1	equ	0xFE7
 19274                           postinc1	equ	0xFE6
 19275                           postdec1	equ	0xFE5
 19276                           plusw1	equ	0xFE3
 19277                           fsr1h	equ	0xFE2
 19278                           fsr1l	equ	0xFE1
 19279                           indf2	equ	0xFDF
 19280                           postinc2	equ	0xFDE
 19281                           postdec2	equ	0xFDD
 19282                           plusw2	equ	0xFDB
 19283                           fsr2h	equ	0xFDA
 19284                           fsr2l	equ	0xFD9
 19285                           status	equ	0xFD8
 19286                           
 19287 ;; *************** function _disk_status *****************
 19288 ;; Defined at:
 19289 ;;		line 27 in file "bibliotecas/diskio.c"
 19290 ;; Parameters:    Size  Location     Type
 19291 ;;  pdrv            1    wreg     unsigned char 
 19292 ;; Auto vars:     Size  Location     Type
 19293 ;;  pdrv            1    5[BANK0 ] unsigned char 
 19294 ;;  result          2    3[BANK0 ] int 
 19295 ;;  stat            1    6[BANK0 ] unsigned char 
 19296 ;; Return value:  Size  Location     Type
 19297 ;;                  1    wreg      unsigned char 
 19298 ;; Registers used:
 19299 ;;		wreg, status,2, status,0, cstack
 19300 ;; Tracked objects:
 19301 ;;		On entry : 0/0
 19302 ;;		On exit  : 0/0
 19303 ;;		Unchanged: 0/0
 19304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19305 ;;      Params:         0       0       0       0       0       0       0       0       0
 19306 ;;      Locals:         0       4       0       0       0       0       0       0       0
 19307 ;;      Temps:          0       1       0       0       0       0       0       0       0
 19308 ;;      Totals:         0       5       0       0       0       0       0       0       0
 19309 ;;Total ram usage:        5 bytes
 19310 ;; Hardware stack levels used:    1
 19311 ;; Hardware stack levels required when called:    4
 19312 ;; This function calls:
 19313 ;;		_sdc_disk_status
 19314 ;; This function is called by:
 19315 ;;		_auto_mount
 19316 ;;		_validate
 19317 ;; This function uses a non-reentrant model
 19318 ;;
 19319                           
 19320                           	psect	text67
 19321  005200                     __ptext67:
 19322                           	opt stack 0
 19323  005200                     _disk_status:
 19324                           	opt stack 18
 19325                           
 19326                           ; BSR set to: 0
 19327                           ;incstack = 0
 19328                           ;disk_status@pdrv stored from wreg
 19329  005200  0100               	movlb	0	; () banked
 19330  005202  6F65               	movwf	disk_status@pdrv& (0+255),b
 19331                           
 19332                           ;diskio.c: 31: DSTATUS stat;
 19333                           ;diskio.c: 32: int result;
 19334                           ;diskio.c: 34: switch (pdrv) {
 19335  005204  D014               	goto	l521
 19336  005206                     
 19337                           ;diskio.c: 36: stat = sdc_disk_status(pdrv);
 19338  005206  0100               	movlb	0	; () banked
 19339  005208  5165               	movf	disk_status@pdrv& (0+255),w,b
 19340  00520A  EC36  F02B         	call	_sdc_disk_status
 19341  00520E  0100               	movlb	0	; () banked
 19342  005210  6F66               	movwf	disk_status@stat& (0+255),b
 19343                           
 19344                           ; BSR set to: 0
 19345                           ;diskio.c: 39: return stat;
 19346  005212  5166               	movf	disk_status@stat& (0+255),w,b
 19347                           
 19348                           ; BSR set to: 0
 19349  005214  0012               	return	
 19350  005216                     
 19351                           ; BSR set to: 0
 19352                           ;diskio.c: 42: result = sdc_disk_status(pdrv);
 19353                           
 19354                           ; BSR set to: 0
 19355  005216  5165               	movf	disk_status@pdrv& (0+255),w,b
 19356  005218  EC36  F02B         	call	_sdc_disk_status
 19357  00521C  0100               	movlb	0	; () banked
 19358  00521E  6F62               	movwf	??_disk_status& (0+255),b
 19359  005220  5162               	movf	??_disk_status& (0+255),w,b
 19360  005222  6F63               	movwf	disk_status@result& (0+255),b
 19361  005224  6B64               	clrf	(disk_status@result+1)& (0+255),b
 19362                           
 19363                           ; BSR set to: 0
 19364                           ;diskio.c: 44: return stat;
 19365  005226  5166               	movf	disk_status@stat& (0+255),w,b
 19366                           
 19367                           ; BSR set to: 0
 19368  005228  0012               	return	
 19369  00522A                     
 19370                           ; BSR set to: 0
 19371                           ;diskio.c: 48: return stat;
 19372                           
 19373                           ; BSR set to: 0
 19374  00522A  5166               	movf	disk_status@stat& (0+255),w,b
 19375                           
 19376                           ; BSR set to: 0
 19377  00522C  0012               	return	
 19378  00522E                     l521:
 19379                           
 19380                           ; BSR set to: 0
 19381  00522E  0100               	movlb	0	; () banked
 19382  005230  5165               	movf	disk_status@pdrv& (0+255),w,b
 19383                           
 19384                           ; Switch size 1, requested type "space"
 19385                           ; Number of cases is 3, Range of values is 0 to 2
 19386                           ; switch strategies available:
 19387                           ; Name         Instructions Cycles
 19388                           ; simple_byte           10     6 (average)
 19389                           ;	Chosen strategy is simple_byte
 19390  005232  0A00               	xorlw	0	; case 0
 19391  005234  B4D8               	btfsc	status,2,c
 19392  005236  D7E7               	goto	l522
 19393  005238  0A01               	xorlw	1	; case 1
 19394  00523A  B4D8               	btfsc	status,2,c
 19395  00523C  D7EC               	goto	l524
 19396  00523E  0A03               	xorlw	3	; case 2
 19397  005240  B4D8               	btfsc	status,2,c
 19398  005242  D7F3               	goto	l525
 19399                           
 19400                           ; BSR set to: 0
 19401                           ;diskio.c: 50: return 0x01;
 19402                           
 19403                           ; BSR set to: 0
 19404  005244  0E01               	movlw	1
 19405  005246  0012               	return	
 19406  005248                     __end_of_disk_status:
 19407                           	opt stack 0
 19408                           tosu	equ	0xFFF
 19409                           tosh	equ	0xFFE
 19410                           tosl	equ	0xFFD
 19411                           pclath	equ	0xFFA
 19412                           tblptru	equ	0xFF8
 19413                           tblptrh	equ	0xFF7
 19414                           tblptrl	equ	0xFF6
 19415                           tablat	equ	0xFF5
 19416                           prodh	equ	0xFF4
 19417                           prodl	equ	0xFF3
 19418                           intcon	equ	0xFF2
 19419                           intcon2	equ	0xFF1
 19420                           intcon3	equ	0xFF0
 19421                           indf0	equ	0xFEF
 19422                           postinc0	equ	0xFEE
 19423                           fsr0h	equ	0xFEA
 19424                           fsr0l	equ	0xFE9
 19425                           wreg	equ	0xFE8
 19426                           indf1	equ	0xFE7
 19427                           postinc1	equ	0xFE6
 19428                           postdec1	equ	0xFE5
 19429                           plusw1	equ	0xFE3
 19430                           fsr1h	equ	0xFE2
 19431                           fsr1l	equ	0xFE1
 19432                           indf2	equ	0xFDF
 19433                           postinc2	equ	0xFDE
 19434                           postdec2	equ	0xFDD
 19435                           plusw2	equ	0xFDB
 19436                           fsr2h	equ	0xFDA
 19437                           fsr2l	equ	0xFD9
 19438                           status	equ	0xFD8
 19439                           
 19440 ;; *************** function _sdc_disk_status *****************
 19441 ;; Defined at:
 19442 ;;		line 588 in file "bibliotecas/diskio.c"
 19443 ;; Parameters:    Size  Location     Type
 19444 ;;  pdrv            1    wreg     unsigned char 
 19445 ;; Auto vars:     Size  Location     Type
 19446 ;;  pdrv            1    1[BANK0 ] unsigned char 
 19447 ;;  stat            1    0[BANK0 ] unsigned char 
 19448 ;;  cont            1    0        unsigned char 
 19449 ;;  buff            1    0        unsigned char 
 19450 ;; Return value:  Size  Location     Type
 19451 ;;                  1    wreg      unsigned char 
 19452 ;; Registers used:
 19453 ;;		wreg, status,2
 19454 ;; Tracked objects:
 19455 ;;		On entry : 0/0
 19456 ;;		On exit  : 0/0
 19457 ;;		Unchanged: 0/0
 19458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19459 ;;      Params:         0       0       0       0       0       0       0       0       0
 19460 ;;      Locals:         0       2       0       0       0       0       0       0       0
 19461 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19462 ;;      Totals:         0       2       0       0       0       0       0       0       0
 19463 ;;Total ram usage:        2 bytes
 19464 ;; Hardware stack levels used:    1
 19465 ;; Hardware stack levels required when called:    3
 19466 ;; This function calls:
 19467 ;;		Nothing
 19468 ;; This function is called by:
 19469 ;;		_disk_status
 19470 ;; This function uses a non-reentrant model
 19471 ;;
 19472                           
 19473                           	psect	text68
 19474  00566C                     __ptext68:
 19475                           	opt stack 0
 19476  00566C                     _sdc_disk_status:
 19477                           	opt stack 18
 19478                           
 19479                           ; BSR set to: 0
 19480                           ;incstack = 0
 19481                           ;sdc_disk_status@pdrv stored from wreg
 19482  00566C  0100               	movlb	0	; () banked
 19483  00566E  6F61               	movwf	sdc_disk_status@pdrv& (0+255),b
 19484                           
 19485                           ;diskio.c: 590: DSTATUS stat = 0;
 19486  005670  0E00               	movlw	0
 19487  005672  0100               	movlb	0	; () banked
 19488  005674  6F60               	movwf	sdc_disk_status@stat& (0+255),b
 19489                           
 19490                           ; BSR set to: 0
 19491                           ;diskio.c: 591: unsigned char buff, cont;
 19492                           ;diskio.c: 593: if (pdrv != 0) return 0x01;
 19493  005676  5161               	movf	sdc_disk_status@pdrv& (0+255),w,b
 19494  005678  B4D8               	btfsc	status,2,c
 19495  00567A  D002               	goto	l647
 19496                           
 19497                           ; BSR set to: 0
 19498  00567C  0E01               	movlw	1
 19499                           
 19500                           ; BSR set to: 0
 19501  00567E  0012               	return	
 19502  005680                     l647:
 19503                           
 19504                           ; BSR set to: 0
 19505                           ;diskio.c: 595: return FR_OK;
 19506                           
 19507                           ; BSR set to: 0
 19508  005680  0E00               	movlw	0
 19509  005682  0012               	return	
 19510  005684                     __end_of_sdc_disk_status:
 19511                           	opt stack 0
 19512                           tosu	equ	0xFFF
 19513                           tosh	equ	0xFFE
 19514                           tosl	equ	0xFFD
 19515                           pclath	equ	0xFFA
 19516                           tblptru	equ	0xFF8
 19517                           tblptrh	equ	0xFF7
 19518                           tblptrl	equ	0xFF6
 19519                           tablat	equ	0xFF5
 19520                           prodh	equ	0xFF4
 19521                           prodl	equ	0xFF3
 19522                           intcon	equ	0xFF2
 19523                           intcon2	equ	0xFF1
 19524                           intcon3	equ	0xFF0
 19525                           indf0	equ	0xFEF
 19526                           postinc0	equ	0xFEE
 19527                           fsr0h	equ	0xFEA
 19528                           fsr0l	equ	0xFE9
 19529                           wreg	equ	0xFE8
 19530                           indf1	equ	0xFE7
 19531                           postinc1	equ	0xFE6
 19532                           postdec1	equ	0xFE5
 19533                           plusw1	equ	0xFE3
 19534                           fsr1h	equ	0xFE2
 19535                           fsr1l	equ	0xFE1
 19536                           indf2	equ	0xFDF
 19537                           postinc2	equ	0xFDE
 19538                           postdec2	equ	0xFDD
 19539                           plusw2	equ	0xFDB
 19540                           fsr2h	equ	0xFDA
 19541                           fsr2l	equ	0xFD9
 19542                           status	equ	0xFD8
 19543                           
 19544 ;; *************** function _sync *****************
 19545 ;; Defined at:
 19546 ;;		line 118 in file "bibliotecas/tff.c"
 19547 ;; Parameters:    Size  Location     Type
 19548 ;;		None
 19549 ;; Auto vars:     Size  Location     Type
 19550 ;;  fs              2   64[BANK0 ] PTR struct _FATFS
 19551 ;;		 -> NULL(0), fs(544), 
 19552 ;; Return value:  Size  Location     Type
 19553 ;;                  1    wreg      enum E155
 19554 ;; Registers used:
 19555 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19556 ;; Tracked objects:
 19557 ;;		On entry : 0/0
 19558 ;;		On exit  : 0/0
 19559 ;;		Unchanged: 0/0
 19560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19561 ;;      Params:         0       0       0       0       0       0       0       0       0
 19562 ;;      Locals:         0       2       0       0       0       0       0       0       0
 19563 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19564 ;;      Totals:         0       2       0       0       0       0       0       0       0
 19565 ;;Total ram usage:        2 bytes
 19566 ;; Hardware stack levels used:    1
 19567 ;; Hardware stack levels required when called:    9
 19568 ;; This function calls:
 19569 ;;		_disk_ioctl
 19570 ;;		_move_window
 19571 ;; This function is called by:
 19572 ;;		_f_sync
 19573 ;; This function uses a non-reentrant model
 19574 ;;
 19575                           
 19576                           	psect	text69
 19577  004ECA                     __ptext69:
 19578                           	opt stack 0
 19579  004ECA                     _sync:
 19580                           	opt stack 16
 19581                           
 19582                           ;tff.c: 120: FATFS *fs = FatFs;
 19583                           
 19584                           ; BSR set to: 0
 19585                           ;incstack = 0
 19586  004ECA  C0FA  F0A0         	movff	_FatFs,sync@fs
 19587  004ECE  C0FB  F0A1         	movff	_FatFs+1,sync@fs+1
 19588                           
 19589                           ;tff.c: 123: fs->winflag = 1;
 19590  004ED2  0100               	movlb	0	; () banked
 19591  004ED4  EE20 F01F          	lfsr	2,31
 19592  004ED8  51A0               	movf	sync@fs& (0+255),w,b
 19593  004EDA  26D9               	addwf	fsr2l,f,c
 19594  004EDC  51A1               	movf	(sync@fs+1)& (0+255),w,b
 19595  004EDE  22DA               	addwfc	fsr2h,f,c
 19596  004EE0  0E01               	movlw	1
 19597  004EE2  6EDF               	movwf	indf2,c
 19598                           
 19599                           ; BSR set to: 0
 19600                           ;tff.c: 124: if (!move_window(0)) return FR_RW_ERROR;
 19601  004EE4  0E00               	movlw	0
 19602  004EE6  6F8B               	movwf	move_window@sector& (0+255),b
 19603  004EE8  0E00               	movlw	0
 19604  004EEA  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 19605  004EEC  0E00               	movlw	0
 19606  004EEE  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 19607  004EF0  0E00               	movlw	0
 19608  004EF2  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 19609  004EF4  EC8D  F01A         	call	_move_window	;wreg free
 19610  004EF8  0900               	iorlw	0
 19611  004EFA  A4D8               	btfss	status,2,c
 19612  004EFC  D002               	goto	l1018
 19613  004EFE  0E08               	movlw	8
 19614  004F00  0012               	return	
 19615  004F02                     l1018:
 19616                           
 19617                           ;tff.c: 140: if (disk_ioctl(0, 0, (0)) != RES_OK)
 19618  004F02  0E00               	movlw	0
 19619  004F04  0100               	movlb	0	; () banked
 19620  004F06  6F60               	movwf	disk_ioctl@cmd& (0+255),b
 19621  004F08  0E00               	movlw	0
 19622  004F0A  6F61               	movwf	disk_ioctl@buff& (0+255),b
 19623  004F0C  0E00               	movlw	0
 19624  004F0E  6F62               	movwf	(disk_ioctl@buff+1)& (0+255),b
 19625  004F10  0E00               	movlw	0
 19626  004F12  ECA8  F02A         	call	_disk_ioctl
 19627  004F16  0900               	iorlw	0
 19628  004F18  B4D8               	btfsc	status,2,c
 19629  004F1A  D002               	goto	l1020
 19630                           
 19631                           ;tff.c: 141: return FR_RW_ERROR;
 19632  004F1C  0E08               	movlw	8
 19633  004F1E  0012               	return	
 19634  004F20                     l1020:
 19635                           
 19636                           ;tff.c: 142: return FR_OK;
 19637  004F20  0E00               	movlw	0
 19638  004F22  0012               	return	
 19639  004F24                     __end_of_sync:
 19640                           	opt stack 0
 19641                           tosu	equ	0xFFF
 19642                           tosh	equ	0xFFE
 19643                           tosl	equ	0xFFD
 19644                           pclath	equ	0xFFA
 19645                           tblptru	equ	0xFF8
 19646                           tblptrh	equ	0xFF7
 19647                           tblptrl	equ	0xFF6
 19648                           tablat	equ	0xFF5
 19649                           prodh	equ	0xFF4
 19650                           prodl	equ	0xFF3
 19651                           intcon	equ	0xFF2
 19652                           intcon2	equ	0xFF1
 19653                           intcon3	equ	0xFF0
 19654                           indf0	equ	0xFEF
 19655                           postinc0	equ	0xFEE
 19656                           fsr0h	equ	0xFEA
 19657                           fsr0l	equ	0xFE9
 19658                           wreg	equ	0xFE8
 19659                           indf1	equ	0xFE7
 19660                           postinc1	equ	0xFE6
 19661                           postdec1	equ	0xFE5
 19662                           plusw1	equ	0xFE3
 19663                           fsr1h	equ	0xFE2
 19664                           fsr1l	equ	0xFE1
 19665                           indf2	equ	0xFDF
 19666                           postinc2	equ	0xFDE
 19667                           postdec2	equ	0xFDD
 19668                           plusw2	equ	0xFDB
 19669                           fsr2h	equ	0xFDA
 19670                           fsr2l	equ	0xFD9
 19671                           status	equ	0xFD8
 19672                           
 19673 ;; *************** function _move_window *****************
 19674 ;; Defined at:
 19675 ;;		line 76 in file "bibliotecas/tff.c"
 19676 ;; Parameters:    Size  Location     Type
 19677 ;;  sector          4   43[BANK0 ] unsigned long 
 19678 ;; Auto vars:     Size  Location     Type
 19679 ;;  n               1   57[BANK0 ] unsigned char 
 19680 ;;  wsect           4   58[BANK0 ] unsigned long 
 19681 ;;  fs              2   62[BANK0 ] PTR struct _FATFS
 19682 ;;		 -> NULL(0), fs(544), 
 19683 ;; Return value:  Size  Location     Type
 19684 ;;                  1    wreg      enum E105
 19685 ;; Registers used:
 19686 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19687 ;; Tracked objects:
 19688 ;;		On entry : 0/0
 19689 ;;		On exit  : 0/0
 19690 ;;		Unchanged: 0/0
 19691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19692 ;;      Params:         0       4       0       0       0       0       0       0       0
 19693 ;;      Locals:         0       7       0       0       0       0       0       0       0
 19694 ;;      Temps:          0      10       0       0       0       0       0       0       0
 19695 ;;      Totals:         0      21       0       0       0       0       0       0       0
 19696 ;;Total ram usage:       21 bytes
 19697 ;; Hardware stack levels used:    1
 19698 ;; Hardware stack levels required when called:    8
 19699 ;; This function calls:
 19700 ;;		_disk_read
 19701 ;;		_disk_write
 19702 ;; This function is called by:
 19703 ;;		_sync
 19704 ;;		_get_cluster
 19705 ;;		_put_cluster
 19706 ;;		_trace_path
 19707 ;;		_reserve_direntry
 19708 ;;		_f_open
 19709 ;;		_f_write
 19710 ;;		_f_sync
 19711 ;;		_f_read
 19712 ;;		_f_readdir
 19713 ;; This function uses a non-reentrant model
 19714 ;;
 19715                           
 19716                           	psect	text70
 19717  00351A                     __ptext70:
 19718                           	opt stack 0
 19719  00351A                     _move_window:
 19720                           	opt stack 15
 19721                           
 19722                           ;tff.c: 80: DWORD wsect;
 19723                           ;tff.c: 81: FATFS *fs = FatFs;
 19724                           
 19725                           ;incstack = 0
 19726  00351A  C0FA  F09E         	movff	_FatFs,move_window@fs
 19727  00351E  C0FB  F09F         	movff	_FatFs+1,move_window@fs+1
 19728                           
 19729                           ;tff.c: 84: wsect = fs->winsect;
 19730  003522  0100               	movlb	0	; () banked
 19731  003524  EE20 F004          	lfsr	2,4
 19732  003528  519E               	movf	move_window@fs& (0+255),w,b
 19733  00352A  26D9               	addwf	fsr2l,f,c
 19734  00352C  519F               	movf	(move_window@fs+1)& (0+255),w,b
 19735  00352E  22DA               	addwfc	fsr2h,f,c
 19736  003530  CFDE F09A          	movff	postinc2,move_window@wsect
 19737  003534  CFDE F09B          	movff	postinc2,move_window@wsect+1
 19738  003538  CFDE F09C          	movff	postinc2,move_window@wsect+2
 19739  00353C  CFDE F09D          	movff	postinc2,move_window@wsect+3
 19740                           
 19741                           ; BSR set to: 0
 19742                           ;tff.c: 85: if (wsect != sector) {
 19743  003540  518B               	movf	move_window@sector& (0+255),w,b
 19744  003542  199A               	xorwf	move_window@wsect& (0+255),w,b
 19745  003544  E10A               	bnz	u12350
 19746  003546  518C               	movf	(move_window@sector+1)& (0+255),w,b
 19747  003548  199B               	xorwf	(move_window@wsect+1)& (0+255),w,b
 19748  00354A  E107               	bnz	u12350
 19749  00354C  518D               	movf	(move_window@sector+2)& (0+255),w,b
 19750  00354E  199C               	xorwf	(move_window@wsect+2)& (0+255),w,b
 19751  003550  E104               	bnz	u12350
 19752  003552  518E               	movf	(move_window@sector+3)& (0+255),w,b
 19753  003554  199D               	xorwf	(move_window@wsect+3)& (0+255),w,b
 19754  003556  B4D8               	btfsc	status,2,c
 19755  003558  D0B9               	goto	l1014
 19756  00355A                     u12350:
 19757                           
 19758                           ; BSR set to: 0
 19759                           ;tff.c: 87: BYTE n;
 19760                           ;tff.c: 88: if (fs->winflag) {
 19761  00355A  EE20 F01F          	lfsr	2,31
 19762  00355E  519E               	movf	move_window@fs& (0+255),w,b
 19763  003560  26D9               	addwf	fsr2l,f,c
 19764  003562  519F               	movf	(move_window@fs+1)& (0+255),w,b
 19765  003564  22DA               	addwfc	fsr2h,f,c
 19766  003566  50DF               	movf	indf2,w,c
 19767  003568  B4D8               	btfsc	status,2,c
 19768  00356A  D083               	goto	u12400
 19769                           
 19770                           ; BSR set to: 0
 19771                           ;tff.c: 89: if (disk_write(0, fs->win, wsect, 1) != RES_OK)
 19772  00356C  0E20               	movlw	32
 19773  00356E  259E               	addwf	move_window@fs& (0+255),w,b
 19774  003570  6F7F               	movwf	disk_write@buff& (0+255),b
 19775  003572  0E00               	movlw	0
 19776  003574  219F               	addwfc	(move_window@fs+1)& (0+255),w,b
 19777  003576  6F80               	movwf	(disk_write@buff+1)& (0+255),b
 19778  003578  C09A  F081         	movff	move_window@wsect,disk_write@sector
 19779  00357C  C09B  F082         	movff	move_window@wsect+1,disk_write@sector+1
 19780  003580  C09C  F083         	movff	move_window@wsect+2,disk_write@sector+2
 19781  003584  C09D  F084         	movff	move_window@wsect+3,disk_write@sector+3
 19782  003588  0E01               	movlw	1
 19783  00358A  6F85               	movwf	disk_write@count& (0+255),b
 19784  00358C  0E00               	movlw	0
 19785  00358E  EC1B  F025         	call	_disk_write
 19786  003592  0900               	iorlw	0
 19787  003594  B4D8               	btfsc	status,2,c
 19788  003596  D002               	goto	l1009
 19789                           
 19790                           ;tff.c: 90: return FALSE;
 19791  003598  0E00               	movlw	0
 19792  00359A  0012               	return	
 19793  00359C                     l1009:
 19794                           
 19795                           ;tff.c: 91: fs->winflag = 0;
 19796  00359C  0100               	movlb	0	; () banked
 19797  00359E  EE20 F01F          	lfsr	2,31
 19798  0035A2  519E               	movf	move_window@fs& (0+255),w,b
 19799  0035A4  26D9               	addwf	fsr2l,f,c
 19800  0035A6  519F               	movf	(move_window@fs+1)& (0+255),w,b
 19801  0035A8  22DA               	addwfc	fsr2h,f,c
 19802  0035AA  0E00               	movlw	0
 19803  0035AC  6EDF               	movwf	indf2,c
 19804                           
 19805                           ;tff.c: 92: if (wsect < (fs->fatbase + fs->sects_fat)) {
 19806  0035AE  EE20 F008          	lfsr	2,8
 19807  0035B2  519E               	movf	move_window@fs& (0+255),w,b
 19808  0035B4  26D9               	addwf	fsr2l,f,c
 19809  0035B6  519F               	movf	(move_window@fs+1)& (0+255),w,b
 19810  0035B8  22DA               	addwfc	fsr2h,f,c
 19811  0035BA  CFDE F08F          	movff	postinc2,??_move_window
 19812  0035BE  CFDE F090          	movff	postinc2,??_move_window+1
 19813  0035C2  CFDE F091          	movff	postinc2,??_move_window+2
 19814  0035C6  CFDE F092          	movff	postinc2,??_move_window+3
 19815  0035CA  EE20 F014          	lfsr	2,20
 19816  0035CE  519E               	movf	move_window@fs& (0+255),w,b
 19817  0035D0  26D9               	addwf	fsr2l,f,c
 19818  0035D2  519F               	movf	(move_window@fs+1)& (0+255),w,b
 19819  0035D4  22DA               	addwfc	fsr2h,f,c
 19820  0035D6  CFDE F093          	movff	postinc2,??_move_window+4
 19821  0035DA  CFDD F094          	movff	postdec2,??_move_window+5
 19822  0035DE  5193               	movf	(??_move_window+4)& (0+255),w,b
 19823  0035E0  258F               	addwf	??_move_window& (0+255),w,b
 19824  0035E2  6F95               	movwf	(??_move_window+6)& (0+255),b
 19825  0035E4  5194               	movf	(??_move_window+5)& (0+255),w,b
 19826  0035E6  2190               	addwfc	(??_move_window+1)& (0+255),w,b
 19827  0035E8  6F96               	movwf	(??_move_window+7)& (0+255),b
 19828  0035EA  0E00               	movlw	0
 19829  0035EC  2191               	addwfc	(??_move_window+2)& (0+255),w,b
 19830  0035EE  6F97               	movwf	(??_move_window+8)& (0+255),b
 19831  0035F0  0E00               	movlw	0
 19832  0035F2  2192               	addwfc	(??_move_window+3)& (0+255),w,b
 19833  0035F4  6F98               	movwf	(??_move_window+9)& (0+255),b
 19834  0035F6  5195               	movf	(??_move_window+6)& (0+255),w,b
 19835  0035F8  5D9A               	subwf	move_window@wsect& (0+255),w,b
 19836  0035FA  5196               	movf	(??_move_window+7)& (0+255),w,b
 19837  0035FC  599B               	subwfb	(move_window@wsect+1)& (0+255),w,b
 19838  0035FE  5197               	movf	(??_move_window+8)& (0+255),w,b
 19839  003600  599C               	subwfb	(move_window@wsect+2)& (0+255),w,b
 19840  003602  5198               	movf	(??_move_window+9)& (0+255),w,b
 19841  003604  599D               	subwfb	(move_window@wsect+3)& (0+255),w,b
 19842  003606  B0D8               	btfsc	status,0,c
 19843  003608  D034               	goto	u12400
 19844                           
 19845                           ; BSR set to: 0
 19846                           ;tff.c: 93: for (n = fs->n_fats; n >= 2; n--) {
 19847  00360A  EE20 F01E          	lfsr	2,30
 19848  00360E  519E               	movf	move_window@fs& (0+255),w,b
 19849  003610  26D9               	addwf	fsr2l,f,c
 19850  003612  519F               	movf	(move_window@fs+1)& (0+255),w,b
 19851  003614  22DA               	addwfc	fsr2h,f,c
 19852  003616  50DF               	movf	indf2,w,c
 19853  003618  6F99               	movwf	move_window@n& (0+255),b
 19854  00361A                     l9784:
 19855                           
 19856                           ; BSR set to: 0
 19857  00361A  0E02               	movlw	2
 19858  00361C  6199               	cpfslt	move_window@n& (0+255),b
 19859  00361E  D001               	goto	l1012
 19860  003620  D028               	goto	u12400
 19861  003622                     l1012:
 19862                           
 19863                           ; BSR set to: 0
 19864                           ;tff.c: 94: wsect += fs->sects_fat;
 19865                           
 19866                           ; BSR set to: 0
 19867  003622  EE20 F014          	lfsr	2,20
 19868  003626  519E               	movf	move_window@fs& (0+255),w,b
 19869  003628  26D9               	addwf	fsr2l,f,c
 19870  00362A  519F               	movf	(move_window@fs+1)& (0+255),w,b
 19871  00362C  22DA               	addwfc	fsr2h,f,c
 19872  00362E  CFDE F08F          	movff	postinc2,??_move_window
 19873  003632  CFDD F090          	movff	postdec2,??_move_window+1
 19874  003636  518F               	movf	??_move_window& (0+255),w,b
 19875  003638  279A               	addwf	move_window@wsect& (0+255),f,b
 19876  00363A  5190               	movf	(??_move_window+1)& (0+255),w,b
 19877  00363C  239B               	addwfc	(move_window@wsect+1)& (0+255),f,b
 19878  00363E  0E00               	movlw	0
 19879  003640  239C               	addwfc	(move_window@wsect+2)& (0+255),f,b
 19880  003642  0E00               	movlw	0
 19881  003644  239D               	addwfc	(move_window@wsect+3)& (0+255),f,b
 19882                           
 19883                           ; BSR set to: 0
 19884                           ;tff.c: 95: disk_write(0, fs->win, wsect, 1);
 19885  003646  0E20               	movlw	32
 19886  003648  259E               	addwf	move_window@fs& (0+255),w,b
 19887  00364A  6F7F               	movwf	disk_write@buff& (0+255),b
 19888  00364C  0E00               	movlw	0
 19889  00364E  219F               	addwfc	(move_window@fs+1)& (0+255),w,b
 19890  003650  6F80               	movwf	(disk_write@buff+1)& (0+255),b
 19891  003652  C09A  F081         	movff	move_window@wsect,disk_write@sector
 19892  003656  C09B  F082         	movff	move_window@wsect+1,disk_write@sector+1
 19893  00365A  C09C  F083         	movff	move_window@wsect+2,disk_write@sector+2
 19894  00365E  C09D  F084         	movff	move_window@wsect+3,disk_write@sector+3
 19895  003662  0E01               	movlw	1
 19896  003664  6F85               	movwf	disk_write@count& (0+255),b
 19897  003666  0E00               	movlw	0
 19898  003668  EC1B  F025         	call	_disk_write
 19899  00366C  0100               	movlb	0	; () banked
 19900  00366E  0799               	decf	move_window@n& (0+255),f,b
 19901  003670  D7D4               	goto	l9784
 19902  003672                     u12400:
 19903                           
 19904                           ; BSR set to: 0
 19905                           ;tff.c: 96: }
 19906                           ;tff.c: 97: }
 19907                           ;tff.c: 98: }
 19908                           ;tff.c: 100: if (sector) {
 19909                           
 19910                           ; BSR set to: 0
 19911                           
 19912                           ; BSR set to: 0
 19913                           
 19914                           ; BSR set to: 0
 19915  003672  518B               	movf	move_window@sector& (0+255),w,b
 19916  003674  118C               	iorwf	(move_window@sector+1)& (0+255),w,b
 19917  003676  118D               	iorwf	(move_window@sector+2)& (0+255),w,b
 19918  003678  118E               	iorwf	(move_window@sector+3)& (0+255),w,b
 19919  00367A  B4D8               	btfsc	status,2,c
 19920  00367C  D027               	goto	l1014
 19921                           
 19922                           ; BSR set to: 0
 19923                           ;tff.c: 101: if (disk_read(0, fs->win, sector, 1) != RES_OK)
 19924  00367E  0E20               	movlw	32
 19925  003680  259E               	addwf	move_window@fs& (0+255),w,b
 19926  003682  6F7F               	movwf	disk_read@buff& (0+255),b
 19927  003684  0E00               	movlw	0
 19928  003686  219F               	addwfc	(move_window@fs+1)& (0+255),w,b
 19929  003688  6F80               	movwf	(disk_read@buff+1)& (0+255),b
 19930  00368A  C08B  F081         	movff	move_window@sector,disk_read@sector
 19931  00368E  C08C  F082         	movff	move_window@sector+1,disk_read@sector+1
 19932  003692  C08D  F083         	movff	move_window@sector+2,disk_read@sector+2
 19933  003696  C08E  F084         	movff	move_window@sector+3,disk_read@sector+3
 19934  00369A  0E01               	movlw	1
 19935  00369C  6F85               	movwf	disk_read@count& (0+255),b
 19936  00369E  0E00               	movlw	0
 19937  0036A0  EC8D  F024         	call	_disk_read
 19938  0036A4  0900               	iorlw	0
 19939  0036A6  B4D8               	btfsc	status,2,c
 19940  0036A8  D002               	goto	l1015
 19941                           
 19942                           ;tff.c: 102: return FALSE;
 19943  0036AA  0E00               	movlw	0
 19944  0036AC  0012               	return	
 19945  0036AE                     l1015:
 19946                           
 19947                           ;tff.c: 103: fs->winsect = sector;
 19948  0036AE  0100               	movlb	0	; () banked
 19949  0036B0  EE20 F004          	lfsr	2,4
 19950  0036B4  519E               	movf	move_window@fs& (0+255),w,b
 19951  0036B6  26D9               	addwf	fsr2l,f,c
 19952  0036B8  519F               	movf	(move_window@fs+1)& (0+255),w,b
 19953  0036BA  22DA               	addwfc	fsr2h,f,c
 19954  0036BC  C08B  FFDE         	movff	move_window@sector,postinc2
 19955  0036C0  C08C  FFDE         	movff	move_window@sector+1,postinc2
 19956  0036C4  C08D  FFDE         	movff	move_window@sector+2,postinc2
 19957  0036C8  C08E  FFDE         	movff	move_window@sector+3,postinc2
 19958  0036CC                     l1014:
 19959                           
 19960                           ; BSR set to: 0
 19961                           ;tff.c: 104: }
 19962                           ;tff.c: 105: }
 19963                           ;tff.c: 106: return TRUE;
 19964                           
 19965                           ; BSR set to: 0
 19966                           
 19967                           ; BSR set to: 0
 19968  0036CC  0E01               	movlw	1
 19969  0036CE  0012               	return	
 19970  0036D0                     __end_of_move_window:
 19971                           	opt stack 0
 19972                           tosu	equ	0xFFF
 19973                           tosh	equ	0xFFE
 19974                           tosl	equ	0xFFD
 19975                           pclath	equ	0xFFA
 19976                           tblptru	equ	0xFF8
 19977                           tblptrh	equ	0xFF7
 19978                           tblptrl	equ	0xFF6
 19979                           tablat	equ	0xFF5
 19980                           prodh	equ	0xFF4
 19981                           prodl	equ	0xFF3
 19982                           intcon	equ	0xFF2
 19983                           intcon2	equ	0xFF1
 19984                           intcon3	equ	0xFF0
 19985                           indf0	equ	0xFEF
 19986                           postinc0	equ	0xFEE
 19987                           fsr0h	equ	0xFEA
 19988                           fsr0l	equ	0xFE9
 19989                           wreg	equ	0xFE8
 19990                           indf1	equ	0xFE7
 19991                           postinc1	equ	0xFE6
 19992                           postdec1	equ	0xFE5
 19993                           plusw1	equ	0xFE3
 19994                           fsr1h	equ	0xFE2
 19995                           fsr1l	equ	0xFE1
 19996                           indf2	equ	0xFDF
 19997                           postinc2	equ	0xFDE
 19998                           postdec2	equ	0xFDD
 19999                           plusw2	equ	0xFDB
 20000                           fsr2h	equ	0xFDA
 20001                           fsr2l	equ	0xFD9
 20002                           status	equ	0xFD8
 20003                           
 20004 ;; *************** function _disk_write *****************
 20005 ;; Defined at:
 20006 ;;		line 150 in file "bibliotecas/diskio.c"
 20007 ;; Parameters:    Size  Location     Type
 20008 ;;  pdrv            1    wreg     unsigned char 
 20009 ;;  buff            2   31[BANK0 ] PTR const unsigned char 
 20010 ;;		 -> fs.win(512), fputc@c(1), NULL(0), fs(544), 
 20011 ;;  sector          4   33[BANK0 ] unsigned long 
 20012 ;;  count           1   37[BANK0 ] unsigned char 
 20013 ;; Auto vars:     Size  Location     Type
 20014 ;;  pdrv            1   39[BANK0 ] unsigned char 
 20015 ;;  result          2   40[BANK0 ] int 
 20016 ;;  res             1   42[BANK0 ] enum E25
 20017 ;; Return value:  Size  Location     Type
 20018 ;;                  1    wreg      enum E25
 20019 ;; Registers used:
 20020 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20021 ;; Tracked objects:
 20022 ;;		On entry : 0/0
 20023 ;;		On exit  : 0/0
 20024 ;;		Unchanged: 0/0
 20025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20026 ;;      Params:         0       7       0       0       0       0       0       0       0
 20027 ;;      Locals:         0       4       0       0       0       0       0       0       0
 20028 ;;      Temps:          0       1       0       0       0       0       0       0       0
 20029 ;;      Totals:         0      12       0       0       0       0       0       0       0
 20030 ;;Total ram usage:       12 bytes
 20031 ;; Hardware stack levels used:    1
 20032 ;; Hardware stack levels required when called:    7
 20033 ;; This function calls:
 20034 ;;		_sdc_disk_write
 20035 ;; This function is called by:
 20036 ;;		_move_window
 20037 ;;		_reserve_direntry
 20038 ;;		_f_write
 20039 ;; This function uses a non-reentrant model
 20040 ;;
 20041                           
 20042                           	psect	text71
 20043  004A36                     __ptext71:
 20044                           	opt stack 0
 20045  004A36                     _disk_write:
 20046                           	opt stack 15
 20047                           
 20048                           ;incstack = 0
 20049                           ;disk_write@pdrv stored from wreg
 20050  004A36  0100               	movlb	0	; () banked
 20051  004A38  6F87               	movwf	disk_write@pdrv& (0+255),b
 20052                           
 20053                           ;diskio.c: 157: DRESULT res;
 20054                           ;diskio.c: 158: int result;
 20055                           ;diskio.c: 160: switch (pdrv) {
 20056  004A3A  D034               	goto	l545
 20057  004A3C                     
 20058                           ;diskio.c: 163: result = sdc_disk_write(buff, sector, count);
 20059  004A3C  C07F  F06C         	movff	disk_write@buff,sdc_disk_write@p_buff
 20060  004A40  C080  F06D         	movff	disk_write@buff+1,sdc_disk_write@p_buff+1
 20061  004A44  C081  F06E         	movff	disk_write@sector,sdc_disk_write@sector
 20062  004A48  C082  F06F         	movff	disk_write@sector+1,sdc_disk_write@sector+1
 20063  004A4C  C083  F070         	movff	disk_write@sector+2,sdc_disk_write@sector+2
 20064  004A50  C084  F071         	movff	disk_write@sector+3,sdc_disk_write@sector+3
 20065  004A54  C085  F072         	movff	disk_write@count,sdc_disk_write@count
 20066  004A58  ECC8  F018         	call	_sdc_disk_write	;wreg free
 20067  004A5C  0100               	movlb	0	; () banked
 20068  004A5E  6F86               	movwf	??_disk_write& (0+255),b
 20069  004A60  5186               	movf	??_disk_write& (0+255),w,b
 20070  004A62  6F88               	movwf	disk_write@result& (0+255),b
 20071  004A64  6B89               	clrf	(disk_write@result+1)& (0+255),b
 20072                           
 20073                           ; BSR set to: 0
 20074                           ;diskio.c: 165: res = result;
 20075  004A66  C088  F08A         	movff	disk_write@result,disk_write@res
 20076                           
 20077                           ; BSR set to: 0
 20078                           ;diskio.c: 168: return res;
 20079  004A6A  518A               	movf	disk_write@res& (0+255),w,b
 20080                           
 20081                           ; BSR set to: 0
 20082  004A6C  0012               	return	
 20083  004A6E                     
 20084                           ; BSR set to: 0
 20085                           ;diskio.c: 173: result = sdc_disk_write(buff, sector, count);
 20086                           
 20087                           ; BSR set to: 0
 20088  004A6E  C07F  F06C         	movff	disk_write@buff,sdc_disk_write@p_buff
 20089  004A72  C080  F06D         	movff	disk_write@buff+1,sdc_disk_write@p_buff+1
 20090  004A76  C081  F06E         	movff	disk_write@sector,sdc_disk_write@sector
 20091  004A7A  C082  F06F         	movff	disk_write@sector+1,sdc_disk_write@sector+1
 20092  004A7E  C083  F070         	movff	disk_write@sector+2,sdc_disk_write@sector+2
 20093  004A82  C084  F071         	movff	disk_write@sector+3,sdc_disk_write@sector+3
 20094  004A86  C085  F072         	movff	disk_write@count,sdc_disk_write@count
 20095  004A8A  ECC8  F018         	call	_sdc_disk_write	;wreg free
 20096  004A8E  0100               	movlb	0	; () banked
 20097  004A90  6F86               	movwf	??_disk_write& (0+255),b
 20098  004A92  5186               	movf	??_disk_write& (0+255),w,b
 20099  004A94  6F88               	movwf	disk_write@result& (0+255),b
 20100  004A96  6B89               	clrf	(disk_write@result+1)& (0+255),b
 20101                           
 20102                           ; BSR set to: 0
 20103                           ;diskio.c: 174: res = result;
 20104  004A98  C088  F08A         	movff	disk_write@result,disk_write@res
 20105                           
 20106                           ; BSR set to: 0
 20107                           ;diskio.c: 177: return res;
 20108  004A9C  518A               	movf	disk_write@res& (0+255),w,b
 20109                           
 20110                           ; BSR set to: 0
 20111  004A9E  0012               	return	
 20112  004AA0                     
 20113                           ; BSR set to: 0
 20114                           ;diskio.c: 186: return res;
 20115                           
 20116                           ; BSR set to: 0
 20117  004AA0  518A               	movf	disk_write@res& (0+255),w,b
 20118                           
 20119                           ; BSR set to: 0
 20120  004AA2  0012               	return	
 20121  004AA4                     l545:
 20122                           
 20123                           ; BSR set to: 0
 20124  004AA4  0100               	movlb	0	; () banked
 20125  004AA6  5187               	movf	disk_write@pdrv& (0+255),w,b
 20126                           
 20127                           ; Switch size 1, requested type "space"
 20128                           ; Number of cases is 3, Range of values is 0 to 2
 20129                           ; switch strategies available:
 20130                           ; Name         Instructions Cycles
 20131                           ; simple_byte           10     6 (average)
 20132                           ;	Chosen strategy is simple_byte
 20133  004AA8  0A00               	xorlw	0	; case 0
 20134  004AAA  B4D8               	btfsc	status,2,c
 20135  004AAC  D7C7               	goto	l546
 20136  004AAE  0A01               	xorlw	1	; case 1
 20137  004AB0  B4D8               	btfsc	status,2,c
 20138  004AB2  D7DD               	goto	l548
 20139  004AB4  0A03               	xorlw	3	; case 2
 20140  004AB6  B4D8               	btfsc	status,2,c
 20141  004AB8  D7F3               	goto	l549
 20142                           
 20143                           ; BSR set to: 0
 20144                           ;diskio.c: 189: return RES_PARERR;
 20145                           
 20146                           ; BSR set to: 0
 20147  004ABA  0E04               	movlw	4
 20148  004ABC  0012               	return	
 20149  004ABE                     __end_of_disk_write:
 20150                           	opt stack 0
 20151                           tosu	equ	0xFFF
 20152                           tosh	equ	0xFFE
 20153                           tosl	equ	0xFFD
 20154                           pclath	equ	0xFFA
 20155                           tblptru	equ	0xFF8
 20156                           tblptrh	equ	0xFF7
 20157                           tblptrl	equ	0xFF6
 20158                           tablat	equ	0xFF5
 20159                           prodh	equ	0xFF4
 20160                           prodl	equ	0xFF3
 20161                           intcon	equ	0xFF2
 20162                           intcon2	equ	0xFF1
 20163                           intcon3	equ	0xFF0
 20164                           indf0	equ	0xFEF
 20165                           postinc0	equ	0xFEE
 20166                           fsr0h	equ	0xFEA
 20167                           fsr0l	equ	0xFE9
 20168                           wreg	equ	0xFE8
 20169                           indf1	equ	0xFE7
 20170                           postinc1	equ	0xFE6
 20171                           postdec1	equ	0xFE5
 20172                           plusw1	equ	0xFE3
 20173                           fsr1h	equ	0xFE2
 20174                           fsr1l	equ	0xFE1
 20175                           indf2	equ	0xFDF
 20176                           postinc2	equ	0xFDE
 20177                           postdec2	equ	0xFDD
 20178                           plusw2	equ	0xFDB
 20179                           fsr2h	equ	0xFDA
 20180                           fsr2l	equ	0xFD9
 20181                           status	equ	0xFD8
 20182                           
 20183 ;; *************** function _sdc_disk_write *****************
 20184 ;; Defined at:
 20185 ;;		line 509 in file "bibliotecas/diskio.c"
 20186 ;; Parameters:    Size  Location     Type
 20187 ;;  p_buff          2   12[BANK0 ] PTR const unsigned char 
 20188 ;;		 -> fs.win(512), fputc@c(1), NULL(0), fs(544), 
 20189 ;;  sector          4   14[BANK0 ] unsigned long 
 20190 ;;  count           1   18[BANK0 ] unsigned char 
 20191 ;; Auto vars:     Size  Location     Type
 20192 ;;  j               2   28[BANK0 ] int 
 20193 ;;  count1          2   25[BANK0 ] int 
 20194 ;;  i               2   23[BANK0 ] int 
 20195 ;;  buff            1   30[BANK0 ] unsigned char 
 20196 ;;  res             1   27[BANK0 ] enum E25
 20197 ;; Return value:  Size  Location     Type
 20198 ;;                  1    wreg      enum E25
 20199 ;; Registers used:
 20200 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20201 ;; Tracked objects:
 20202 ;;		On entry : 0/0
 20203 ;;		On exit  : 0/0
 20204 ;;		Unchanged: 0/0
 20205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20206 ;;      Params:         0       7       0       0       0       0       0       0       0
 20207 ;;      Locals:         0       8       0       0       0       0       0       0       0
 20208 ;;      Temps:          0       4       0       0       0       0       0       0       0
 20209 ;;      Totals:         0      19       0       0       0       0       0       0       0
 20210 ;;Total ram usage:       19 bytes
 20211 ;; Hardware stack levels used:    1
 20212 ;; Hardware stack levels required when called:    6
 20213 ;; This function calls:
 20214 ;;		_command
 20215 ;;		_dummy_clocks
 20216 ;;		_escreve_SPI
 20217 ;;		_leitura_SPI
 20218 ;;		_proceed
 20219 ;;		_response
 20220 ;; This function is called by:
 20221 ;;		_disk_write
 20222 ;; This function uses a non-reentrant model
 20223 ;;
 20224                           
 20225                           	psect	text72
 20226  003190                     __ptext72:
 20227                           	opt stack 0
 20228  003190                     _sdc_disk_write:
 20229                           	opt stack 15
 20230                           
 20231                           ;diskio.c: 511: DRESULT res;
 20232                           ;diskio.c: 512: unsigned char buff;
 20233                           ;diskio.c: 513: int i=0,j, count1 = 0;
 20234                           
 20235                           ; BSR set to: 0
 20236                           ;incstack = 0
 20237  003190  0E00               	movlw	0
 20238  003192  0100               	movlb	0	; () banked
 20239  003194  6F78               	movwf	(sdc_disk_write@i+1)& (0+255),b
 20240  003196  0E00               	movlw	0
 20241  003198  6F77               	movwf	sdc_disk_write@i& (0+255),b
 20242  00319A  0E00               	movlw	0
 20243  00319C  6F7A               	movwf	(sdc_disk_write@count1+1)& (0+255),b
 20244  00319E  0E00               	movlw	0
 20245  0031A0  6F79               	movwf	sdc_disk_write@count1& (0+255),b
 20246                           
 20247                           ; BSR set to: 0
 20248                           ;diskio.c: 515: if(count>1)
 20249  0031A2  0E01               	movlw	1
 20250  0031A4  6572               	cpfsgt	sdc_disk_write@count& (0+255),b
 20251  0031A6  D06C               	goto	l630
 20252                           
 20253                           ; BSR set to: 0
 20254                           ;diskio.c: 516: {
 20255                           ;diskio.c: 517: LATCbits.LATC7 = 0;
 20256  0031A8  9E8B               	bcf	3979,7,c	;volatile
 20257                           
 20258                           ;diskio.c: 518: LATBbits.LATB4 = 0;
 20259  0031AA  988A               	bcf	3978,4,c	;volatile
 20260                           
 20261                           ; BSR set to: 0
 20262                           ;diskio.c: 519: dummy_clocks(10);
 20263  0031AC  0E0A               	movlw	10
 20264  0031AE  EC8C  F029         	call	_dummy_clocks
 20265                           
 20266                           ;diskio.c: 520: command(0X57, count, 0XFF);
 20267  0031B2  0100               	movlb	0	; () banked
 20268  0031B4  5172               	movf	sdc_disk_write@count& (0+255),w,b
 20269  0031B6  6F65               	movwf	command@arg& (0+255),b
 20270  0031B8  6B66               	clrf	(command@arg+1)& (0+255),b
 20271  0031BA  6B67               	clrf	(command@arg+2)& (0+255),b
 20272  0031BC  6B68               	clrf	(command@arg+3)& (0+255),b
 20273  0031BE  0EFF               	movlw	255
 20274  0031C0  6F69               	movwf	command@CRC& (0+255),b
 20275  0031C2  0E57               	movlw	87
 20276  0031C4  EC00  F027         	call	_command
 20277                           
 20278                           ;diskio.c: 521: proceed();
 20279  0031C8  ECA7  F02B         	call	_proceed	;wreg free
 20280  0031CC                     
 20281                           ;diskio.c: 523: buff = response();
 20282  0031CC  EC8D  F02B         	call	_response	;wreg free
 20283  0031D0  0100               	movlb	0	; () banked
 20284  0031D2  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 20285                           
 20286                           ; BSR set to: 0
 20287                           ;diskio.c: 524: }while(buff!=0X00);
 20288  0031D4  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 20289  0031D6  A4D8               	btfss	status,2,c
 20290  0031D8  D7F9               	goto	l631
 20291                           
 20292                           ; BSR set to: 0
 20293                           ;diskio.c: 526: dummy_clocks(10);
 20294                           
 20295                           ; BSR set to: 0
 20296  0031DA  0E0A               	movlw	10
 20297  0031DC  EC8C  F029         	call	_dummy_clocks
 20298                           
 20299                           ;diskio.c: 527: command(0X59, sector*512, 0XFF);
 20300  0031E0  C06E  F073         	movff	sdc_disk_write@sector,??_sdc_disk_write
 20301  0031E4  C06F  F074         	movff	sdc_disk_write@sector+1,??_sdc_disk_write+1
 20302  0031E8  C070  F075         	movff	sdc_disk_write@sector+2,??_sdc_disk_write+2
 20303  0031EC  C071  F076         	movff	sdc_disk_write@sector+3,??_sdc_disk_write+3
 20304  0031F0  0E09               	movlw	9
 20305  0031F2                     u12065:
 20306  0031F2  90D8               	bcf	status,0,c
 20307  0031F4  0100               	movlb	0	; () banked
 20308  0031F6  3773               	rlcf	??_sdc_disk_write& (0+255),f,b
 20309  0031F8  3774               	rlcf	(??_sdc_disk_write+1)& (0+255),f,b
 20310  0031FA  3775               	rlcf	(??_sdc_disk_write+2)& (0+255),f,b
 20311  0031FC  3776               	rlcf	(??_sdc_disk_write+3)& (0+255),f,b
 20312  0031FE  2EE8               	decfsz	wreg,f,c
 20313  003200  D7F8               	goto	u12065
 20314  003202  C073  F065         	movff	??_sdc_disk_write,command@arg
 20315  003206  C074  F066         	movff	??_sdc_disk_write+1,command@arg+1
 20316  00320A  C075  F067         	movff	??_sdc_disk_write+2,command@arg+2
 20317  00320E  C076  F068         	movff	??_sdc_disk_write+3,command@arg+3
 20318  003212  0EFF               	movlw	255
 20319  003214  6F69               	movwf	command@CRC& (0+255),b
 20320  003216  0E59               	movlw	89
 20321  003218  EC00  F027         	call	_command
 20322                           
 20323                           ;diskio.c: 528: proceed();
 20324  00321C  ECA7  F02B         	call	_proceed	;wreg free
 20325  003220                     
 20326                           ;diskio.c: 530: buff = response();
 20327  003220  EC8D  F02B         	call	_response	;wreg free
 20328  003224  0100               	movlb	0	; () banked
 20329  003226  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 20330                           
 20331                           ; BSR set to: 0
 20332                           ;diskio.c: 531: }while(buff!=0X00);
 20333  003228  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 20334  00322A  A4D8               	btfss	status,2,c
 20335  00322C  D7F9               	goto	l633
 20336                           
 20337                           ; BSR set to: 0
 20338                           ;diskio.c: 533: dummy_clocks(1);
 20339                           
 20340                           ; BSR set to: 0
 20341  00322E  0E01               	movlw	1
 20342  003230  EC8C  F029         	call	_dummy_clocks
 20343                           
 20344                           ;diskio.c: 534: escreve_SPI(0XFC);
 20345  003234  0EFC               	movlw	252
 20346  003236  EC58  F02B         	call	_escreve_SPI
 20347                           
 20348                           ;diskio.c: 535: for(j=0;j<512;j++)
 20349  00323A  0E00               	movlw	0
 20350  00323C  0100               	movlb	0	; () banked
 20351  00323E  6F7D               	movwf	(sdc_disk_write@j+1)& (0+255),b
 20352  003240  0E00               	movlw	0
 20353  003242  6F7C               	movwf	sdc_disk_write@j& (0+255),b
 20354  003244                     l9544:
 20355                           
 20356                           ; BSR set to: 0
 20357  003244  BF7D               	btfsc	(sdc_disk_write@j+1)& (0+255),7,b
 20358  003246  D004               	goto	l635
 20359  003248  0E02               	movlw	2
 20360  00324A  5D7D               	subwf	(sdc_disk_write@j+1)& (0+255),w,b
 20361  00324C  B0D8               	btfsc	status,0,c
 20362  00324E  D00D               	goto	u12090
 20363  003250                     l635:
 20364                           
 20365                           ; BSR set to: 0
 20366                           ;diskio.c: 536: {
 20367                           ;diskio.c: 537: escreve_SPI(*p_buff);
 20368                           
 20369                           ; BSR set to: 0
 20370  003250  C06C  FFD9         	movff	sdc_disk_write@p_buff,fsr2l
 20371  003254  C06D  FFDA         	movff	sdc_disk_write@p_buff+1,fsr2h
 20372  003258  50DF               	movf	indf2,w,c
 20373  00325A  EC58  F02B         	call	_escreve_SPI
 20374                           
 20375                           ;diskio.c: 538: p_buff++;
 20376  00325E  0100               	movlb	0	; () banked
 20377  003260  4B6C               	infsnz	sdc_disk_write@p_buff& (0+255),f,b
 20378  003262  2B6D               	incf	(sdc_disk_write@p_buff+1)& (0+255),f,b
 20379                           
 20380                           ; BSR set to: 0
 20381  003264  4B7C               	infsnz	sdc_disk_write@j& (0+255),f,b
 20382  003266  2B7D               	incf	(sdc_disk_write@j+1)& (0+255),f,b
 20383  003268  D7ED               	goto	l9544
 20384  00326A                     u12090:
 20385                           
 20386                           ; BSR set to: 0
 20387                           ;diskio.c: 539: }
 20388                           ;diskio.c: 540: leitura_SPI();
 20389                           
 20390                           ; BSR set to: 0
 20391  00326A  ECAD  F02B         	call	_leitura_SPI	;wreg free
 20392                           
 20393                           ;diskio.c: 541: leitura_SPI();
 20394  00326E  ECAD  F02B         	call	_leitura_SPI	;wreg free
 20395                           
 20396                           ;diskio.c: 543: dummy_clocks(1);
 20397  003272  0E01               	movlw	1
 20398  003274  EC8C  F029         	call	_dummy_clocks
 20399                           
 20400                           ;diskio.c: 544: escreve_SPI(0XFD);
 20401  003278  0EFD               	movlw	253
 20402  00327A  EC58  F02B         	call	_escreve_SPI
 20403                           
 20404                           ;diskio.c: 546: }
 20405  00327E  D06A               	goto	u12140
 20406  003280                     l630:
 20407                           
 20408                           ; BSR set to: 0
 20409                           ;diskio.c: 547: else
 20410                           ;diskio.c: 548: {
 20411                           ;diskio.c: 549: LATCbits.LATC7 = 0;
 20412  003280  9E8B               	bcf	3979,7,c	;volatile
 20413                           
 20414                           ;diskio.c: 550: LATBbits.LATB4 = 0;
 20415  003282  988A               	bcf	3978,4,c	;volatile
 20416                           
 20417                           ; BSR set to: 0
 20418                           ;diskio.c: 551: dummy_clocks(10);
 20419  003284  0E0A               	movlw	10
 20420  003286  EC8C  F029         	call	_dummy_clocks
 20421                           
 20422                           ;diskio.c: 552: command(0X58, sector*512, 0X00);
 20423  00328A  C06E  F073         	movff	sdc_disk_write@sector,??_sdc_disk_write
 20424  00328E  C06F  F074         	movff	sdc_disk_write@sector+1,??_sdc_disk_write+1
 20425  003292  C070  F075         	movff	sdc_disk_write@sector+2,??_sdc_disk_write+2
 20426  003296  C071  F076         	movff	sdc_disk_write@sector+3,??_sdc_disk_write+3
 20427  00329A  0E09               	movlw	9
 20428  00329C                     u12105:
 20429  00329C  90D8               	bcf	status,0,c
 20430  00329E  0100               	movlb	0	; () banked
 20431  0032A0  3773               	rlcf	??_sdc_disk_write& (0+255),f,b
 20432  0032A2  3774               	rlcf	(??_sdc_disk_write+1)& (0+255),f,b
 20433  0032A4  3775               	rlcf	(??_sdc_disk_write+2)& (0+255),f,b
 20434  0032A6  3776               	rlcf	(??_sdc_disk_write+3)& (0+255),f,b
 20435  0032A8  2EE8               	decfsz	wreg,f,c
 20436  0032AA  D7F8               	goto	u12105
 20437  0032AC  C073  F065         	movff	??_sdc_disk_write,command@arg
 20438  0032B0  C074  F066         	movff	??_sdc_disk_write+1,command@arg+1
 20439  0032B4  C075  F067         	movff	??_sdc_disk_write+2,command@arg+2
 20440  0032B8  C076  F068         	movff	??_sdc_disk_write+3,command@arg+3
 20441  0032BC  0E00               	movlw	0
 20442  0032BE  6F69               	movwf	command@CRC& (0+255),b
 20443  0032C0  0E58               	movlw	88
 20444  0032C2  EC00  F027         	call	_command
 20445                           
 20446                           ;diskio.c: 553: proceed();
 20447  0032C6  ECA7  F02B         	call	_proceed	;wreg free
 20448  0032CA                     
 20449                           ;diskio.c: 555: buff = response();
 20450  0032CA  EC8D  F02B         	call	_response	;wreg free
 20451  0032CE  0100               	movlb	0	; () banked
 20452  0032D0  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 20453                           
 20454                           ; BSR set to: 0
 20455                           ;diskio.c: 556: }while(buff!=0X00);
 20456  0032D2  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 20457  0032D4  A4D8               	btfss	status,2,c
 20458  0032D6  D7F9               	goto	l638
 20459                           
 20460                           ; BSR set to: 0
 20461                           ;diskio.c: 558: LATBbits.LATB4 = 0;
 20462  0032D8  988A               	bcf	3978,4,c	;volatile
 20463                           
 20464                           ;diskio.c: 559: LATCbits.LATC7 = 0;
 20465  0032DA  9E8B               	bcf	3979,7,c	;volatile
 20466                           
 20467                           ; BSR set to: 0
 20468                           ;diskio.c: 560: dummy_clocks(1);
 20469  0032DC  0E01               	movlw	1
 20470  0032DE  EC8C  F029         	call	_dummy_clocks
 20471                           
 20472                           ;diskio.c: 561: escreve_SPI(0XFE);
 20473  0032E2  0EFE               	movlw	254
 20474  0032E4  EC58  F02B         	call	_escreve_SPI
 20475                           
 20476                           ;diskio.c: 562: for(j=0;j<512;j++)
 20477  0032E8  0E00               	movlw	0
 20478  0032EA  0100               	movlb	0	; () banked
 20479  0032EC  6F7D               	movwf	(sdc_disk_write@j+1)& (0+255),b
 20480  0032EE  0E00               	movlw	0
 20481  0032F0  6F7C               	movwf	sdc_disk_write@j& (0+255),b
 20482  0032F2                     l9576:
 20483                           
 20484                           ; BSR set to: 0
 20485  0032F2  BF7D               	btfsc	(sdc_disk_write@j+1)& (0+255),7,b
 20486  0032F4  D004               	goto	l640
 20487  0032F6  0E02               	movlw	2
 20488  0032F8  5D7D               	subwf	(sdc_disk_write@j+1)& (0+255),w,b
 20489  0032FA  B0D8               	btfsc	status,0,c
 20490  0032FC  D00D               	goto	u12130
 20491  0032FE                     l640:
 20492                           
 20493                           ; BSR set to: 0
 20494                           ;diskio.c: 563: {
 20495                           ;diskio.c: 564: escreve_SPI(*p_buff);
 20496                           
 20497                           ; BSR set to: 0
 20498  0032FE  C06C  FFD9         	movff	sdc_disk_write@p_buff,fsr2l
 20499  003302  C06D  FFDA         	movff	sdc_disk_write@p_buff+1,fsr2h
 20500  003306  50DF               	movf	indf2,w,c
 20501  003308  EC58  F02B         	call	_escreve_SPI
 20502                           
 20503                           ;diskio.c: 565: p_buff++;
 20504  00330C  0100               	movlb	0	; () banked
 20505  00330E  4B6C               	infsnz	sdc_disk_write@p_buff& (0+255),f,b
 20506  003310  2B6D               	incf	(sdc_disk_write@p_buff+1)& (0+255),f,b
 20507                           
 20508                           ; BSR set to: 0
 20509  003312  4B7C               	infsnz	sdc_disk_write@j& (0+255),f,b
 20510  003314  2B7D               	incf	(sdc_disk_write@j+1)& (0+255),f,b
 20511  003316  D7ED               	goto	l9576
 20512  003318                     u12130:
 20513                           
 20514                           ; BSR set to: 0
 20515                           ;diskio.c: 566: }
 20516                           ;diskio.c: 567: leitura_SPI();
 20517                           
 20518                           ; BSR set to: 0
 20519  003318  ECAD  F02B         	call	_leitura_SPI	;wreg free
 20520                           
 20521                           ;diskio.c: 568: leitura_SPI();
 20522  00331C  ECAD  F02B         	call	_leitura_SPI	;wreg free
 20523                           
 20524                           ;diskio.c: 570: dummy_clocks(10);
 20525  003320  0E0A               	movlw	10
 20526  003322  EC8C  F029         	call	_dummy_clocks
 20527                           
 20528                           ;diskio.c: 571: command(0X4D,0X00000000,0X00);
 20529  003326  0E00               	movlw	0
 20530  003328  0100               	movlb	0	; () banked
 20531  00332A  6F65               	movwf	command@arg& (0+255),b
 20532  00332C  0E00               	movlw	0
 20533  00332E  6F66               	movwf	(command@arg+1)& (0+255),b
 20534  003330  0E00               	movlw	0
 20535  003332  6F67               	movwf	(command@arg+2)& (0+255),b
 20536  003334  0E00               	movlw	0
 20537  003336  6F68               	movwf	(command@arg+3)& (0+255),b
 20538  003338  0E00               	movlw	0
 20539  00333A  6F69               	movwf	command@CRC& (0+255),b
 20540  00333C  0E4D               	movlw	77
 20541  00333E  EC00  F027         	call	_command
 20542                           
 20543                           ;diskio.c: 572: proceed();
 20544  003342  ECA7  F02B         	call	_proceed	;wreg free
 20545  003346                     
 20546                           ;diskio.c: 574: buff = response();
 20547  003346  EC8D  F02B         	call	_response	;wreg free
 20548  00334A  0100               	movlb	0	; () banked
 20549  00334C  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 20550                           
 20551                           ; BSR set to: 0
 20552                           ;diskio.c: 575: }while(buff!=0X00 );
 20553  00334E  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 20554  003350  A4D8               	btfss	status,2,c
 20555  003352  D7F9               	goto	l642
 20556  003354                     u12140:
 20557                           
 20558                           ;diskio.c: 576: }
 20559                           ;diskio.c: 577: return res;
 20560                           
 20561                           ; BSR set to: 0
 20562                           
 20563                           ; BSR set to: 0
 20564  003354  0100               	movlb	0	; () banked
 20565  003356  517B               	movf	sdc_disk_write@res& (0+255),w,b
 20566  003358  0012               	return	
 20567  00335A                     __end_of_sdc_disk_write:
 20568                           	opt stack 0
 20569                           tosu	equ	0xFFF
 20570                           tosh	equ	0xFFE
 20571                           tosl	equ	0xFFD
 20572                           pclath	equ	0xFFA
 20573                           tblptru	equ	0xFF8
 20574                           tblptrh	equ	0xFF7
 20575                           tblptrl	equ	0xFF6
 20576                           tablat	equ	0xFF5
 20577                           prodh	equ	0xFF4
 20578                           prodl	equ	0xFF3
 20579                           intcon	equ	0xFF2
 20580                           intcon2	equ	0xFF1
 20581                           intcon3	equ	0xFF0
 20582                           indf0	equ	0xFEF
 20583                           postinc0	equ	0xFEE
 20584                           fsr0h	equ	0xFEA
 20585                           fsr0l	equ	0xFE9
 20586                           wreg	equ	0xFE8
 20587                           indf1	equ	0xFE7
 20588                           postinc1	equ	0xFE6
 20589                           postdec1	equ	0xFE5
 20590                           plusw1	equ	0xFE3
 20591                           fsr1h	equ	0xFE2
 20592                           fsr1l	equ	0xFE1
 20593                           indf2	equ	0xFDF
 20594                           postinc2	equ	0xFDE
 20595                           postdec2	equ	0xFDD
 20596                           plusw2	equ	0xFDB
 20597                           fsr2h	equ	0xFDA
 20598                           fsr2l	equ	0xFD9
 20599                           status	equ	0xFD8
 20600                           
 20601 ;; *************** function _disk_read *****************
 20602 ;; Defined at:
 20603 ;;		line 97 in file "bibliotecas/diskio.c"
 20604 ;; Parameters:    Size  Location     Type
 20605 ;;  pdrv            1    wreg     unsigned char 
 20606 ;;  buff            2   31[BANK0 ] PTR unsigned char 
 20607 ;;		 -> NULL(0), dado_arquivo(20), fs(544), 
 20608 ;;  sector          4   33[BANK0 ] unsigned long 
 20609 ;;  count           1   37[BANK0 ] unsigned char 
 20610 ;; Auto vars:     Size  Location     Type
 20611 ;;  pdrv            1   39[BANK0 ] unsigned char 
 20612 ;;  result          2   40[BANK0 ] int 
 20613 ;;  res             1   42[BANK0 ] enum E25
 20614 ;; Return value:  Size  Location     Type
 20615 ;;                  1    wreg      enum E25
 20616 ;; Registers used:
 20617 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20618 ;; Tracked objects:
 20619 ;;		On entry : 0/0
 20620 ;;		On exit  : 0/0
 20621 ;;		Unchanged: 0/0
 20622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20623 ;;      Params:         0       7       0       0       0       0       0       0       0
 20624 ;;      Locals:         0       4       0       0       0       0       0       0       0
 20625 ;;      Temps:          0       1       0       0       0       0       0       0       0
 20626 ;;      Totals:         0      12       0       0       0       0       0       0       0
 20627 ;;Total ram usage:       12 bytes
 20628 ;; Hardware stack levels used:    1
 20629 ;; Hardware stack levels required when called:    7
 20630 ;; This function calls:
 20631 ;;		_sdc_disk_read
 20632 ;; This function is called by:
 20633 ;;		_move_window
 20634 ;;		_check_fs
 20635 ;;		_f_read
 20636 ;; This function uses a non-reentrant model
 20637 ;;
 20638                           
 20639                           	psect	text73
 20640  00491A                     __ptext73:
 20641                           	opt stack 0
 20642  00491A                     _disk_read:
 20643                           	opt stack 15
 20644                           
 20645                           ; BSR set to: 0
 20646                           ;incstack = 0
 20647                           ;disk_read@pdrv stored from wreg
 20648  00491A  0100               	movlb	0	; () banked
 20649  00491C  6F87               	movwf	disk_read@pdrv& (0+255),b
 20650                           
 20651                           ;diskio.c: 104: DRESULT res;
 20652                           ;diskio.c: 105: int result;
 20653                           ;diskio.c: 107: switch (pdrv) {
 20654  00491E  D038               	goto	l537
 20655  004920                     
 20656                           ;diskio.c: 111: result = sdc_disk_read(buff, sector, count);
 20657  004920  C07F  F06C         	movff	disk_read@buff,sdc_disk_read@p_buff
 20658  004924  C080  F06D         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 20659  004928  C081  F06E         	movff	disk_read@sector,sdc_disk_read@sector
 20660  00492C  C082  F06F         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 20661  004930  C083  F070         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 20662  004934  C084  F071         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 20663  004938  C085  F072         	movff	disk_read@count,sdc_disk_read@count
 20664  00493C  EC8A  F01D         	call	_sdc_disk_read	;wreg free
 20665  004940  0100               	movlb	0	; () banked
 20666  004942  6F86               	movwf	??_disk_read& (0+255),b
 20667  004944  5186               	movf	??_disk_read& (0+255),w,b
 20668  004946  6F88               	movwf	disk_read@result& (0+255),b
 20669  004948  6B89               	clrf	(disk_read@result+1)& (0+255),b
 20670                           
 20671                           ; BSR set to: 0
 20672                           ;diskio.c: 115: res = result;
 20673  00494A  C088  F08A         	movff	disk_read@result,disk_read@res
 20674                           
 20675                           ; BSR set to: 0
 20676                           ;diskio.c: 117: return res;
 20677  00494E  518A               	movf	disk_read@res& (0+255),w,b
 20678                           
 20679                           ; BSR set to: 0
 20680  004950  0012               	return	
 20681  004952                     
 20682                           ; BSR set to: 0
 20683                           ;diskio.c: 122: result = sdc_disk_read(buff, sector, count);
 20684                           
 20685                           ; BSR set to: 0
 20686  004952  C07F  F06C         	movff	disk_read@buff,sdc_disk_read@p_buff
 20687  004956  C080  F06D         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 20688  00495A  C081  F06E         	movff	disk_read@sector,sdc_disk_read@sector
 20689  00495E  C082  F06F         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 20690  004962  C083  F070         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 20691  004966  C084  F071         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 20692  00496A  C085  F072         	movff	disk_read@count,sdc_disk_read@count
 20693  00496E  EC8A  F01D         	call	_sdc_disk_read	;wreg free
 20694  004972  0100               	movlb	0	; () banked
 20695  004974  6F86               	movwf	??_disk_read& (0+255),b
 20696  004976  5186               	movf	??_disk_read& (0+255),w,b
 20697  004978  6F88               	movwf	disk_read@result& (0+255),b
 20698  00497A  6B89               	clrf	(disk_read@result+1)& (0+255),b
 20699                           
 20700                           ; BSR set to: 0
 20701                           ;diskio.c: 126: res = result;
 20702  00497C  C088  F08A         	movff	disk_read@result,disk_read@res
 20703                           
 20704                           ; BSR set to: 0
 20705                           ;diskio.c: 128: buff = data_buff;
 20706  004980  C029  F07F         	movff	_data_buff,disk_read@buff
 20707  004984  C02A  F080         	movff	_data_buff+1,disk_read@buff+1
 20708                           
 20709                           ; BSR set to: 0
 20710                           ;diskio.c: 129: return res;
 20711  004988  518A               	movf	disk_read@res& (0+255),w,b
 20712                           
 20713                           ; BSR set to: 0
 20714  00498A  0012               	return	
 20715  00498C                     
 20716                           ; BSR set to: 0
 20717                           ;diskio.c: 138: return res;
 20718                           
 20719                           ; BSR set to: 0
 20720  00498C  518A               	movf	disk_read@res& (0+255),w,b
 20721                           
 20722                           ; BSR set to: 0
 20723  00498E  0012               	return	
 20724  004990                     l537:
 20725                           
 20726                           ; BSR set to: 0
 20727  004990  0100               	movlb	0	; () banked
 20728  004992  5187               	movf	disk_read@pdrv& (0+255),w,b
 20729                           
 20730                           ; Switch size 1, requested type "space"
 20731                           ; Number of cases is 3, Range of values is 0 to 2
 20732                           ; switch strategies available:
 20733                           ; Name         Instructions Cycles
 20734                           ; simple_byte           10     6 (average)
 20735                           ;	Chosen strategy is simple_byte
 20736  004994  0A00               	xorlw	0	; case 0
 20737  004996  B4D8               	btfsc	status,2,c
 20738  004998  D7C3               	goto	l538
 20739  00499A  0A01               	xorlw	1	; case 1
 20740  00499C  B4D8               	btfsc	status,2,c
 20741  00499E  D7D9               	goto	l540
 20742  0049A0  0A03               	xorlw	3	; case 2
 20743  0049A2  B4D8               	btfsc	status,2,c
 20744  0049A4  D7F3               	goto	l541
 20745                           
 20746                           ; BSR set to: 0
 20747                           ;diskio.c: 141: return RES_PARERR;
 20748                           
 20749                           ; BSR set to: 0
 20750  0049A6  0E04               	movlw	4
 20751  0049A8  0012               	return	
 20752  0049AA                     __end_of_disk_read:
 20753                           	opt stack 0
 20754                           tosu	equ	0xFFF
 20755                           tosh	equ	0xFFE
 20756                           tosl	equ	0xFFD
 20757                           pclath	equ	0xFFA
 20758                           tblptru	equ	0xFF8
 20759                           tblptrh	equ	0xFF7
 20760                           tblptrl	equ	0xFF6
 20761                           tablat	equ	0xFF5
 20762                           prodh	equ	0xFF4
 20763                           prodl	equ	0xFF3
 20764                           intcon	equ	0xFF2
 20765                           intcon2	equ	0xFF1
 20766                           intcon3	equ	0xFF0
 20767                           indf0	equ	0xFEF
 20768                           postinc0	equ	0xFEE
 20769                           fsr0h	equ	0xFEA
 20770                           fsr0l	equ	0xFE9
 20771                           wreg	equ	0xFE8
 20772                           indf1	equ	0xFE7
 20773                           postinc1	equ	0xFE6
 20774                           postdec1	equ	0xFE5
 20775                           plusw1	equ	0xFE3
 20776                           fsr1h	equ	0xFE2
 20777                           fsr1l	equ	0xFE1
 20778                           indf2	equ	0xFDF
 20779                           postinc2	equ	0xFDE
 20780                           postdec2	equ	0xFDD
 20781                           plusw2	equ	0xFDB
 20782                           fsr2h	equ	0xFDA
 20783                           fsr2l	equ	0xFD9
 20784                           status	equ	0xFD8
 20785                           
 20786 ;; *************** function _sdc_disk_read *****************
 20787 ;; Defined at:
 20788 ;;		line 439 in file "bibliotecas/diskio.c"
 20789 ;; Parameters:    Size  Location     Type
 20790 ;;  p_buff          2   12[BANK0 ] PTR unsigned char 
 20791 ;;		 -> NULL(0), dado_arquivo(20), fs(544), 
 20792 ;;  sector          4   14[BANK0 ] unsigned long 
 20793 ;;  count           1   18[BANK0 ] unsigned char 
 20794 ;; Auto vars:     Size  Location     Type
 20795 ;;  start_add       4   24[BANK0 ] unsigned long 
 20796 ;;  length          2   28[BANK0 ] int 
 20797 ;;  count1          2    0        int 
 20798 ;;  i               2    0        int 
 20799 ;;  buff            1   30[BANK0 ] unsigned char 
 20800 ;;  ptr             1   23[BANK0 ] unsigned char 
 20801 ;;  res             1    0        enum E25
 20802 ;; Return value:  Size  Location     Type
 20803 ;;                  1    wreg      enum E25
 20804 ;; Registers used:
 20805 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20806 ;; Tracked objects:
 20807 ;;		On entry : 0/0
 20808 ;;		On exit  : 0/0
 20809 ;;		Unchanged: 0/0
 20810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20811 ;;      Params:         0       7       0       0       0       0       0       0       0
 20812 ;;      Locals:         0       8       0       0       0       0       0       0       0
 20813 ;;      Temps:          0       4       0       0       0       0       0       0       0
 20814 ;;      Totals:         0      19       0       0       0       0       0       0       0
 20815 ;;Total ram usage:       19 bytes
 20816 ;; Hardware stack levels used:    1
 20817 ;; Hardware stack levels required when called:    6
 20818 ;; This function calls:
 20819 ;;		_command
 20820 ;;		_dummy_clocks
 20821 ;;		_proceed
 20822 ;;		_response
 20823 ;; This function is called by:
 20824 ;;		_disk_read
 20825 ;; This function uses a non-reentrant model
 20826 ;;
 20827                           
 20828                           	psect	text74
 20829  003B14                     __ptext74:
 20830                           	opt stack 0
 20831  003B14                     _sdc_disk_read:
 20832                           	opt stack 15
 20833                           
 20834                           ;diskio.c: 446: DRESULT res;
 20835                           ;diskio.c: 447: unsigned char ptr=0X00, buff;
 20836                           
 20837                           ; BSR set to: 0
 20838                           ;incstack = 0
 20839  003B14  0E00               	movlw	0
 20840  003B16  0100               	movlb	0	; () banked
 20841  003B18  6F77               	movwf	sdc_disk_read@ptr& (0+255),b
 20842                           
 20843                           ; BSR set to: 0
 20844                           ;diskio.c: 448: unsigned long int start_add;
 20845                           ;diskio.c: 449: int length,i, count1;
 20846                           ;diskio.c: 450: dummy_clocks(10);
 20847  003B1A  0E0A               	movlw	10
 20848  003B1C  EC8C  F029         	call	_dummy_clocks
 20849                           
 20850                           ;diskio.c: 452: start_add = sector*512;
 20851  003B20  C06E  F073         	movff	sdc_disk_read@sector,??_sdc_disk_read
 20852  003B24  C06F  F074         	movff	sdc_disk_read@sector+1,??_sdc_disk_read+1
 20853  003B28  C070  F075         	movff	sdc_disk_read@sector+2,??_sdc_disk_read+2
 20854  003B2C  C071  F076         	movff	sdc_disk_read@sector+3,??_sdc_disk_read+3
 20855  003B30  0E09               	movlw	9
 20856  003B32                     u11975:
 20857  003B32  90D8               	bcf	status,0,c
 20858  003B34  0100               	movlb	0	; () banked
 20859  003B36  3773               	rlcf	??_sdc_disk_read& (0+255),f,b
 20860  003B38  3774               	rlcf	(??_sdc_disk_read+1)& (0+255),f,b
 20861  003B3A  3775               	rlcf	(??_sdc_disk_read+2)& (0+255),f,b
 20862  003B3C  3776               	rlcf	(??_sdc_disk_read+3)& (0+255),f,b
 20863  003B3E  2EE8               	decfsz	wreg,f,c
 20864  003B40  D7F8               	goto	u11975
 20865  003B42  C073  F078         	movff	??_sdc_disk_read,sdc_disk_read@start_add
 20866  003B46  C074  F079         	movff	??_sdc_disk_read+1,sdc_disk_read@start_add+1
 20867  003B4A  C075  F07A         	movff	??_sdc_disk_read+2,sdc_disk_read@start_add+2
 20868  003B4E  C076  F07B         	movff	??_sdc_disk_read+3,sdc_disk_read@start_add+3
 20869                           
 20870                           ; BSR set to: 0
 20871                           ;diskio.c: 455: if(sector != 1)
 20872  003B52  056E               	decf	sdc_disk_read@sector& (0+255),w,b
 20873  003B54  116F               	iorwf	(sdc_disk_read@sector+1)& (0+255),w,b
 20874  003B56  1170               	iorwf	(sdc_disk_read@sector+2)& (0+255),w,b
 20875  003B58  1171               	iorwf	(sdc_disk_read@sector+3)& (0+255),w,b
 20876  003B5A  B4D8               	btfsc	status,2,c
 20877  003B5C  D01D               	goto	l613
 20878                           
 20879                           ; BSR set to: 0
 20880                           ;diskio.c: 456: {
 20881                           ;diskio.c: 457: dummy_clocks(10);
 20882  003B5E  0E0A               	movlw	10
 20883  003B60  EC8C  F029         	call	_dummy_clocks
 20884                           
 20885                           ;diskio.c: 458: command(0X52,start_add ,0X00);
 20886  003B64  C078  F065         	movff	sdc_disk_read@start_add,command@arg
 20887  003B68  C079  F066         	movff	sdc_disk_read@start_add+1,command@arg+1
 20888  003B6C  C07A  F067         	movff	sdc_disk_read@start_add+2,command@arg+2
 20889  003B70  C07B  F068         	movff	sdc_disk_read@start_add+3,command@arg+3
 20890  003B74  0E00               	movlw	0
 20891  003B76  0100               	movlb	0	; () banked
 20892  003B78  6F69               	movwf	command@CRC& (0+255),b
 20893  003B7A  0E52               	movlw	82
 20894  003B7C  EC00  F027         	call	_command
 20895                           
 20896                           ;diskio.c: 459: proceed();
 20897  003B80  ECA7  F02B         	call	_proceed	;wreg free
 20898  003B84                     
 20899                           ;diskio.c: 461: buff = response();
 20900  003B84  EC8D  F02B         	call	_response	;wreg free
 20901  003B88  0100               	movlb	0	; () banked
 20902  003B8A  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 20903                           
 20904                           ; BSR set to: 0
 20905                           ;diskio.c: 462: }while(buff!=0X00);
 20906  003B8C  517E               	movf	sdc_disk_read@buff& (0+255),w,b
 20907  003B8E  A4D8               	btfss	status,2,c
 20908  003B90  D7F9               	goto	l614
 20909                           
 20910                           ; BSR set to: 0
 20911                           ;diskio.c: 463: proceed();
 20912                           
 20913                           ; BSR set to: 0
 20914  003B92  ECA7  F02B         	call	_proceed	;wreg free
 20915                           
 20916                           ;diskio.c: 464: }
 20917  003B96  D021               	goto	l619
 20918  003B98                     l613:
 20919                           
 20920                           ;diskio.c: 465: else
 20921                           ;diskio.c: 466: {
 20922                           ;diskio.c: 467: dummy_clocks(10);
 20923  003B98  0E0A               	movlw	10
 20924  003B9A  EC8C  F029         	call	_dummy_clocks
 20925                           
 20926                           ;diskio.c: 468: command(0X51,sector ,0X00);
 20927  003B9E  C06E  F065         	movff	sdc_disk_read@sector,command@arg
 20928  003BA2  C06F  F066         	movff	sdc_disk_read@sector+1,command@arg+1
 20929  003BA6  C070  F067         	movff	sdc_disk_read@sector+2,command@arg+2
 20930  003BAA  C071  F068         	movff	sdc_disk_read@sector+3,command@arg+3
 20931  003BAE  0E00               	movlw	0
 20932  003BB0  0100               	movlb	0	; () banked
 20933  003BB2  6F69               	movwf	command@CRC& (0+255),b
 20934  003BB4  0E51               	movlw	81
 20935  003BB6  EC00  F027         	call	_command
 20936                           
 20937                           ;diskio.c: 469: proceed();
 20938  003BBA  ECA7  F02B         	call	_proceed	;wreg free
 20939  003BBE                     
 20940                           ;diskio.c: 471: buff = response();
 20941  003BBE  EC8D  F02B         	call	_response	;wreg free
 20942  003BC2  0100               	movlb	0	; () banked
 20943  003BC4  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 20944                           
 20945                           ; BSR set to: 0
 20946                           ;diskio.c: 472: }while(buff!=0X00);
 20947  003BC6  517E               	movf	sdc_disk_read@buff& (0+255),w,b
 20948  003BC8  A4D8               	btfss	status,2,c
 20949  003BCA  D7F9               	goto	l617
 20950                           
 20951                           ; BSR set to: 0
 20952                           ;diskio.c: 473: proceed();
 20953                           
 20954                           ; BSR set to: 0
 20955  003BCC  ECA7  F02B         	call	_proceed	;wreg free
 20956                           
 20957                           ;diskio.c: 474: }
 20958                           ;diskio.c: 478: while(buff!=0xFE)
 20959  003BD0  D004               	goto	l619
 20960  003BD2                     
 20961                           ;diskio.c: 479: {
 20962                           ;diskio.c: 480: buff = response();
 20963  003BD2  EC8D  F02B         	call	_response	;wreg free
 20964  003BD6  0100               	movlb	0	; () banked
 20965  003BD8  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 20966  003BDA                     l619:
 20967                           
 20968                           ; BSR set to: 0
 20969  003BDA  0EFE               	movlw	254
 20970  003BDC  0100               	movlb	0	; () banked
 20971  003BDE  197E               	xorwf	sdc_disk_read@buff& (0+255),w,b
 20972  003BE0  A4D8               	btfss	status,2,c
 20973  003BE2  D7F7               	goto	l620
 20974                           
 20975                           ; BSR set to: 0
 20976                           ;diskio.c: 481: }
 20977                           ;diskio.c: 483: length = 0;
 20978                           
 20979                           ; BSR set to: 0
 20980  003BE4  0E00               	movlw	0
 20981  003BE6  6F7D               	movwf	(sdc_disk_read@length+1)& (0+255),b
 20982  003BE8  0E00               	movlw	0
 20983  003BEA  6F7C               	movwf	sdc_disk_read@length& (0+255),b
 20984                           
 20985                           ;diskio.c: 484: while ( length < 512 )
 20986  003BEC  D00C               	goto	l622
 20987  003BEE                     
 20988                           ; BSR set to: 0
 20989                           ;diskio.c: 485: {
 20990                           ;diskio.c: 486: p_buff[length] = response();
 20991                           
 20992                           ; BSR set to: 0
 20993  003BEE  517C               	movf	sdc_disk_read@length& (0+255),w,b
 20994  003BF0  256C               	addwf	sdc_disk_read@p_buff& (0+255),w,b
 20995  003BF2  6ED9               	movwf	fsr2l,c
 20996  003BF4  517D               	movf	(sdc_disk_read@length+1)& (0+255),w,b
 20997  003BF6  216D               	addwfc	(sdc_disk_read@p_buff+1)& (0+255),w,b
 20998  003BF8  6EDA               	movwf	fsr2h,c
 20999  003BFA  EC8D  F02B         	call	_response	;wreg free
 21000  003BFE  6EDF               	movwf	indf2,c
 21001                           
 21002                           ;diskio.c: 487: length++;
 21003  003C00  0100               	movlb	0	; () banked
 21004  003C02  4B7C               	infsnz	sdc_disk_read@length& (0+255),f,b
 21005  003C04  2B7D               	incf	(sdc_disk_read@length+1)& (0+255),f,b
 21006  003C06                     l622:
 21007                           
 21008                           ; BSR set to: 0
 21009                           
 21010                           ; BSR set to: 0
 21011  003C06  BF7D               	btfsc	(sdc_disk_read@length+1)& (0+255),7,b
 21012  003C08  D7F2               	goto	l623
 21013  003C0A  0E02               	movlw	2
 21014  003C0C  5D7D               	subwf	(sdc_disk_read@length+1)& (0+255),w,b
 21015  003C0E  A0D8               	btfss	status,0,c
 21016  003C10  D7EE               	goto	l623
 21017                           
 21018                           ; BSR set to: 0
 21019                           ;diskio.c: 488: }
 21020                           ;diskio.c: 490: length = 0;
 21021                           
 21022                           ; BSR set to: 0
 21023  003C12  0E00               	movlw	0
 21024  003C14  6F7D               	movwf	(sdc_disk_read@length+1)& (0+255),b
 21025  003C16  0E00               	movlw	0
 21026  003C18  6F7C               	movwf	sdc_disk_read@length& (0+255),b
 21027                           
 21028                           ; BSR set to: 0
 21029                           ;diskio.c: 491: dummy_clocks(10);
 21030  003C1A  0E0A               	movlw	10
 21031  003C1C  EC8C  F029         	call	_dummy_clocks
 21032                           
 21033                           ;diskio.c: 493: command(0X4C,0X00000000,0X00);
 21034  003C20  0E00               	movlw	0
 21035  003C22  0100               	movlb	0	; () banked
 21036  003C24  6F65               	movwf	command@arg& (0+255),b
 21037  003C26  0E00               	movlw	0
 21038  003C28  6F66               	movwf	(command@arg+1)& (0+255),b
 21039  003C2A  0E00               	movlw	0
 21040  003C2C  6F67               	movwf	(command@arg+2)& (0+255),b
 21041  003C2E  0E00               	movlw	0
 21042  003C30  6F68               	movwf	(command@arg+3)& (0+255),b
 21043  003C32  0E00               	movlw	0
 21044  003C34  6F69               	movwf	command@CRC& (0+255),b
 21045  003C36  0E4C               	movlw	76
 21046  003C38  EC00  F027         	call	_command
 21047                           
 21048                           ;diskio.c: 494: proceed();
 21049  003C3C  ECA7  F02B         	call	_proceed	;wreg free
 21050  003C40                     
 21051                           ;diskio.c: 496: buff = response();
 21052  003C40  EC8D  F02B         	call	_response	;wreg free
 21053  003C44  0100               	movlb	0	; () banked
 21054  003C46  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 21055                           
 21056                           ; BSR set to: 0
 21057                           ;diskio.c: 497: }while(buff!=0xFF);
 21058  003C48  297E               	incf	sdc_disk_read@buff& (0+255),w,b
 21059  003C4A  A4D8               	btfss	status,2,c
 21060  003C4C  D7F9               	goto	l625
 21061                           
 21062                           ; BSR set to: 0
 21063                           ;diskio.c: 499: length = 0;
 21064                           
 21065                           ; BSR set to: 0
 21066  003C4E  0E00               	movlw	0
 21067  003C50  6F7D               	movwf	(sdc_disk_read@length+1)& (0+255),b
 21068  003C52  0E00               	movlw	0
 21069  003C54  6F7C               	movwf	sdc_disk_read@length& (0+255),b
 21070                           
 21071                           ; BSR set to: 0
 21072                           ;diskio.c: 500: return RES_OK;
 21073  003C56  0E00               	movlw	0
 21074  003C58  0012               	return	
 21075  003C5A                     __end_of_sdc_disk_read:
 21076                           	opt stack 0
 21077                           tosu	equ	0xFFF
 21078                           tosh	equ	0xFFE
 21079                           tosl	equ	0xFFD
 21080                           pclath	equ	0xFFA
 21081                           tblptru	equ	0xFF8
 21082                           tblptrh	equ	0xFF7
 21083                           tblptrl	equ	0xFF6
 21084                           tablat	equ	0xFF5
 21085                           prodh	equ	0xFF4
 21086                           prodl	equ	0xFF3
 21087                           intcon	equ	0xFF2
 21088                           intcon2	equ	0xFF1
 21089                           intcon3	equ	0xFF0
 21090                           indf0	equ	0xFEF
 21091                           postinc0	equ	0xFEE
 21092                           fsr0h	equ	0xFEA
 21093                           fsr0l	equ	0xFE9
 21094                           wreg	equ	0xFE8
 21095                           indf1	equ	0xFE7
 21096                           postinc1	equ	0xFE6
 21097                           postdec1	equ	0xFE5
 21098                           plusw1	equ	0xFE3
 21099                           fsr1h	equ	0xFE2
 21100                           fsr1l	equ	0xFE1
 21101                           indf2	equ	0xFDF
 21102                           postinc2	equ	0xFDE
 21103                           postdec2	equ	0xFDD
 21104                           plusw2	equ	0xFDB
 21105                           fsr2h	equ	0xFDA
 21106                           fsr2l	equ	0xFD9
 21107                           status	equ	0xFD8
 21108                           
 21109 ;; *************** function _response *****************
 21110 ;; Defined at:
 21111 ;;		line 59 in file "bibliotecas/SDCard.c"
 21112 ;; Parameters:    Size  Location     Type
 21113 ;;		None
 21114 ;; Auto vars:     Size  Location     Type
 21115 ;;  buff            1    0[BANK0 ] unsigned char 
 21116 ;; Return value:  Size  Location     Type
 21117 ;;                  1    wreg      unsigned char 
 21118 ;; Registers used:
 21119 ;;		wreg, status,2, cstack
 21120 ;; Tracked objects:
 21121 ;;		On entry : 0/0
 21122 ;;		On exit  : 0/0
 21123 ;;		Unchanged: 0/0
 21124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21125 ;;      Params:         0       0       0       0       0       0       0       0       0
 21126 ;;      Locals:         0       1       0       0       0       0       0       0       0
 21127 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21128 ;;      Totals:         0       1       0       0       0       0       0       0       0
 21129 ;;Total ram usage:        1 bytes
 21130 ;; Hardware stack levels used:    1
 21131 ;; Hardware stack levels required when called:    4
 21132 ;; This function calls:
 21133 ;;		_leitura_SPI
 21134 ;; This function is called by:
 21135 ;;		_sdc_reset
 21136 ;;		_sdc_disk_initialize
 21137 ;;		_sdc_disk_read
 21138 ;;		_sdc_disk_write
 21139 ;; This function uses a non-reentrant model
 21140 ;;
 21141                           
 21142                           	psect	text75
 21143  00571A                     __ptext75:
 21144                           	opt stack 0
 21145  00571A                     _response:
 21146                           	opt stack 16
 21147                           
 21148                           ;SDCard.c: 61: unsigned char buff;
 21149                           ;SDCard.c: 62: LATBbits.LATB4 = 0;
 21150                           
 21151                           ; BSR set to: 0
 21152                           ;incstack = 0
 21153  00571A  988A               	bcf	3978,4,c	;volatile
 21154                           
 21155                           ;SDCard.c: 63: buff= leitura_SPI();
 21156  00571C  ECAD  F02B         	call	_leitura_SPI	;wreg free
 21157  005720  0100               	movlb	0	; () banked
 21158  005722  6F60               	movwf	response@buff& (0+255),b
 21159                           
 21160                           ; BSR set to: 0
 21161                           ;SDCard.c: 64: return buff;
 21162  005724  5160               	movf	response@buff& (0+255),w,b
 21163  005726  0012               	return	
 21164  005728                     __end_of_response:
 21165                           	opt stack 0
 21166                           tosu	equ	0xFFF
 21167                           tosh	equ	0xFFE
 21168                           tosl	equ	0xFFD
 21169                           pclath	equ	0xFFA
 21170                           tblptru	equ	0xFF8
 21171                           tblptrh	equ	0xFF7
 21172                           tblptrl	equ	0xFF6
 21173                           tablat	equ	0xFF5
 21174                           prodh	equ	0xFF4
 21175                           prodl	equ	0xFF3
 21176                           intcon	equ	0xFF2
 21177                           intcon2	equ	0xFF1
 21178                           intcon3	equ	0xFF0
 21179                           indf0	equ	0xFEF
 21180                           postinc0	equ	0xFEE
 21181                           fsr0h	equ	0xFEA
 21182                           fsr0l	equ	0xFE9
 21183                           wreg	equ	0xFE8
 21184                           indf1	equ	0xFE7
 21185                           postinc1	equ	0xFE6
 21186                           postdec1	equ	0xFE5
 21187                           plusw1	equ	0xFE3
 21188                           fsr1h	equ	0xFE2
 21189                           fsr1l	equ	0xFE1
 21190                           indf2	equ	0xFDF
 21191                           postinc2	equ	0xFDE
 21192                           postdec2	equ	0xFDD
 21193                           plusw2	equ	0xFDB
 21194                           fsr2h	equ	0xFDA
 21195                           fsr2l	equ	0xFD9
 21196                           status	equ	0xFD8
 21197                           
 21198 ;; *************** function _proceed *****************
 21199 ;; Defined at:
 21200 ;;		line 92 in file "bibliotecas/SDCard.c"
 21201 ;; Parameters:    Size  Location     Type
 21202 ;;		None
 21203 ;; Auto vars:     Size  Location     Type
 21204 ;;		None
 21205 ;; Return value:  Size  Location     Type
 21206 ;;                  1    wreg      void 
 21207 ;; Registers used:
 21208 ;;		wreg, cstack
 21209 ;; Tracked objects:
 21210 ;;		On entry : 0/0
 21211 ;;		On exit  : 0/0
 21212 ;;		Unchanged: 0/0
 21213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21214 ;;      Params:         0       0       0       0       0       0       0       0       0
 21215 ;;      Locals:         0       0       0       0       0       0       0       0       0
 21216 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21217 ;;      Totals:         0       0       0       0       0       0       0       0       0
 21218 ;;Total ram usage:        0 bytes
 21219 ;; Hardware stack levels used:    1
 21220 ;; Hardware stack levels required when called:    4
 21221 ;; This function calls:
 21222 ;;		_escreve_SPI
 21223 ;; This function is called by:
 21224 ;;		_sdc_reset
 21225 ;;		_sdc_disk_initialize
 21226 ;;		_sdc_disk_read
 21227 ;;		_sdc_disk_write
 21228 ;;		_sdcard_init
 21229 ;; This function uses a non-reentrant model
 21230 ;;
 21231                           
 21232                           	psect	text76
 21233  00574E                     __ptext76:
 21234                           	opt stack 0
 21235  00574E                     _proceed:
 21236                           	opt stack 16
 21237                           
 21238                           ;SDCard.c: 94: LATBbits.LATB4 = 0;
 21239                           
 21240                           ; BSR set to: 0
 21241                           ;incstack = 0
 21242  00574E  988A               	bcf	3978,4,c	;volatile
 21243                           
 21244                           ;SDCard.c: 95: escreve_SPI(0xFF);
 21245  005750  0EFF               	movlw	255
 21246  005752  EC58  F02B         	call	_escreve_SPI
 21247                           
 21248                           ;SDCard.c: 96: LATBbits.LATB4 = 1;
 21249  005756  888A               	bsf	3978,4,c	;volatile
 21250  005758  0012               	return		;funcret
 21251  00575A                     __end_of_proceed:
 21252                           	opt stack 0
 21253                           tosu	equ	0xFFF
 21254                           tosh	equ	0xFFE
 21255                           tosl	equ	0xFFD
 21256                           pclath	equ	0xFFA
 21257                           tblptru	equ	0xFF8
 21258                           tblptrh	equ	0xFF7
 21259                           tblptrl	equ	0xFF6
 21260                           tablat	equ	0xFF5
 21261                           prodh	equ	0xFF4
 21262                           prodl	equ	0xFF3
 21263                           intcon	equ	0xFF2
 21264                           intcon2	equ	0xFF1
 21265                           intcon3	equ	0xFF0
 21266                           indf0	equ	0xFEF
 21267                           postinc0	equ	0xFEE
 21268                           fsr0h	equ	0xFEA
 21269                           fsr0l	equ	0xFE9
 21270                           wreg	equ	0xFE8
 21271                           indf1	equ	0xFE7
 21272                           postinc1	equ	0xFE6
 21273                           postdec1	equ	0xFE5
 21274                           plusw1	equ	0xFE3
 21275                           fsr1h	equ	0xFE2
 21276                           fsr1l	equ	0xFE1
 21277                           indf2	equ	0xFDF
 21278                           postinc2	equ	0xFDE
 21279                           postdec2	equ	0xFDD
 21280                           plusw2	equ	0xFDB
 21281                           fsr2h	equ	0xFDA
 21282                           fsr2l	equ	0xFD9
 21283                           status	equ	0xFD8
 21284                           
 21285 ;; *************** function _command *****************
 21286 ;; Defined at:
 21287 ;;		line 125 in file "bibliotecas/SDCard.c"
 21288 ;; Parameters:    Size  Location     Type
 21289 ;;  CMD             1    wreg     unsigned char 
 21290 ;;  arg             4    5[BANK0 ] unsigned long 
 21291 ;;  CRC             1    9[BANK0 ] unsigned char 
 21292 ;; Auto vars:     Size  Location     Type
 21293 ;;  CMD             1   10[BANK0 ] unsigned char 
 21294 ;;  argument        1   11[BANK0 ] unsigned char 
 21295 ;; Return value:  Size  Location     Type
 21296 ;;                  1    wreg      void 
 21297 ;; Registers used:
 21298 ;;		wreg, status,2, status,0, cstack
 21299 ;; Tracked objects:
 21300 ;;		On entry : 0/0
 21301 ;;		On exit  : 0/0
 21302 ;;		Unchanged: 0/0
 21303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21304 ;;      Params:         0       5       0       0       0       0       0       0       0
 21305 ;;      Locals:         0       2       0       0       0       0       0       0       0
 21306 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21307 ;;      Totals:         0       7       0       0       0       0       0       0       0
 21308 ;;Total ram usage:        7 bytes
 21309 ;; Hardware stack levels used:    1
 21310 ;; Hardware stack levels required when called:    5
 21311 ;; This function calls:
 21312 ;;		_dummy_clocks
 21313 ;;		_escreve_SPI
 21314 ;;		_wait_ready
 21315 ;; This function is called by:
 21316 ;;		_sdc_reset
 21317 ;;		_sdc_disk_initialize
 21318 ;;		_sdc_disk_read
 21319 ;;		_sdc_disk_write
 21320 ;; This function uses a non-reentrant model
 21321 ;;
 21322                           
 21323                           	psect	text77
 21324  004E00                     __ptext77:
 21325                           	opt stack 0
 21326  004E00                     _command:
 21327                           	opt stack 15
 21328                           
 21329                           ;incstack = 0
 21330                           ;command@CMD stored from wreg
 21331  004E00  0100               	movlb	0	; () banked
 21332  004E02  6F6A               	movwf	command@CMD& (0+255),b
 21333                           
 21334                           ;SDCard.c: 127: unsigned char argument;
 21335                           ;SDCard.c: 129: if (wait_ready() != 0xFF)
 21336  004E04  EC2C  F02A         	call	_wait_ready	;wreg free
 21337  004E08  0AFF               	xorlw	255
 21338  004E0A  A4D8               	btfss	status,2,c
 21339  004E0C  D004               	goto	l405
 21340  004E0E  D008               	goto	u11960
 21341  004E10                     
 21342                           ;SDCard.c: 132: {
 21343                           ;SDCard.c: 133: dummy_clocks(10);
 21344  004E10  0E0A               	movlw	10
 21345  004E12  EC8C  F029         	call	_dummy_clocks
 21346  004E16                     l405:
 21347  004E16  EC2C  F02A         	call	_wait_ready	;wreg free
 21348  004E1A  0AFF               	xorlw	255
 21349  004E1C  A4D8               	btfss	status,2,c
 21350  004E1E  D7F8               	goto	l406
 21351  004E20                     u11960:
 21352                           
 21353                           ;SDCard.c: 134: }
 21354                           ;SDCard.c: 135: }
 21355                           ;SDCard.c: 136: escreve_SPI(0xFF);
 21356  004E20  0EFF               	movlw	255
 21357  004E22  EC58  F02B         	call	_escreve_SPI
 21358                           
 21359                           ;SDCard.c: 137: escreve_SPI(CMD);
 21360  004E26  0100               	movlb	0	; () banked
 21361  004E28  516A               	movf	command@CMD& (0+255),w,b
 21362  004E2A  EC58  F02B         	call	_escreve_SPI
 21363                           
 21364                           ;SDCard.c: 138: argument = arg>>24;
 21365  004E2E  C068  F06B         	movff	command@arg+3,command@argument
 21366                           
 21367                           ;SDCard.c: 139: escreve_SPI(argument);
 21368  004E32  0100               	movlb	0	; () banked
 21369  004E34  516B               	movf	command@argument& (0+255),w,b
 21370  004E36  EC58  F02B         	call	_escreve_SPI
 21371                           
 21372                           ;SDCard.c: 140: argument = arg>>16;
 21373  004E3A  C067  F06B         	movff	command@arg+2,command@argument
 21374                           
 21375                           ;SDCard.c: 141: escreve_SPI(argument);
 21376  004E3E  0100               	movlb	0	; () banked
 21377  004E40  516B               	movf	command@argument& (0+255),w,b
 21378  004E42  EC58  F02B         	call	_escreve_SPI
 21379                           
 21380                           ;SDCard.c: 142: argument = arg>>8;
 21381  004E46  C066  F06B         	movff	command@arg+1,command@argument
 21382                           
 21383                           ;SDCard.c: 143: escreve_SPI(argument);
 21384  004E4A  0100               	movlb	0	; () banked
 21385  004E4C  516B               	movf	command@argument& (0+255),w,b
 21386  004E4E  EC58  F02B         	call	_escreve_SPI
 21387                           
 21388                           ;SDCard.c: 144: argument = arg;
 21389  004E52  C065  F06B         	movff	command@arg,command@argument
 21390                           
 21391                           ;SDCard.c: 145: escreve_SPI(argument);
 21392  004E56  0100               	movlb	0	; () banked
 21393  004E58  516B               	movf	command@argument& (0+255),w,b
 21394  004E5A  EC58  F02B         	call	_escreve_SPI
 21395                           
 21396                           ;SDCard.c: 146: escreve_SPI(CRC);
 21397  004E5E  0100               	movlb	0	; () banked
 21398  004E60  5169               	movf	command@CRC& (0+255),w,b
 21399  004E62  EC58  F02B         	call	_escreve_SPI
 21400  004E66  0012               	return		;funcret
 21401  004E68                     __end_of_command:
 21402                           	opt stack 0
 21403                           tosu	equ	0xFFF
 21404                           tosh	equ	0xFFE
 21405                           tosl	equ	0xFFD
 21406                           pclath	equ	0xFFA
 21407                           tblptru	equ	0xFF8
 21408                           tblptrh	equ	0xFF7
 21409                           tblptrl	equ	0xFF6
 21410                           tablat	equ	0xFF5
 21411                           prodh	equ	0xFF4
 21412                           prodl	equ	0xFF3
 21413                           intcon	equ	0xFF2
 21414                           intcon2	equ	0xFF1
 21415                           intcon3	equ	0xFF0
 21416                           indf0	equ	0xFEF
 21417                           postinc0	equ	0xFEE
 21418                           fsr0h	equ	0xFEA
 21419                           fsr0l	equ	0xFE9
 21420                           wreg	equ	0xFE8
 21421                           indf1	equ	0xFE7
 21422                           postinc1	equ	0xFE6
 21423                           postdec1	equ	0xFE5
 21424                           plusw1	equ	0xFE3
 21425                           fsr1h	equ	0xFE2
 21426                           fsr1l	equ	0xFE1
 21427                           indf2	equ	0xFDF
 21428                           postinc2	equ	0xFDE
 21429                           postdec2	equ	0xFDD
 21430                           plusw2	equ	0xFDB
 21431                           fsr2h	equ	0xFDA
 21432                           fsr2l	equ	0xFD9
 21433                           status	equ	0xFD8
 21434                           
 21435 ;; *************** function _wait_ready *****************
 21436 ;; Defined at:
 21437 ;;		line 105 in file "bibliotecas/SDCard.c"
 21438 ;; Parameters:    Size  Location     Type
 21439 ;;		None
 21440 ;; Auto vars:     Size  Location     Type
 21441 ;;  msg            10    0        unsigned char [10]
 21442 ;;  timeout         4    0[BANK0 ] unsigned long 
 21443 ;;  res             1    4[BANK0 ] unsigned char 
 21444 ;; Return value:  Size  Location     Type
 21445 ;;                  1    wreg      unsigned char 
 21446 ;; Registers used:
 21447 ;;		wreg, status,2, status,0, cstack
 21448 ;; Tracked objects:
 21449 ;;		On entry : 0/0
 21450 ;;		On exit  : 0/0
 21451 ;;		Unchanged: 0/0
 21452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21453 ;;      Params:         0       0       0       0       0       0       0       0       0
 21454 ;;      Locals:         0       5       0       0       0       0       0       0       0
 21455 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21456 ;;      Totals:         0       5       0       0       0       0       0       0       0
 21457 ;;Total ram usage:        5 bytes
 21458 ;; Hardware stack levels used:    1
 21459 ;; Hardware stack levels required when called:    4
 21460 ;; This function calls:
 21461 ;;		_leitura_SPI
 21462 ;; This function is called by:
 21463 ;;		_command
 21464 ;; This function uses a non-reentrant model
 21465 ;;
 21466                           
 21467                           	psect	text78
 21468  005458                     __ptext78:
 21469                           	opt stack 0
 21470  005458                     _wait_ready:
 21471                           	opt stack 15
 21472                           
 21473                           ;SDCard.c: 107: BYTE res;
 21474                           ;SDCard.c: 108: DWORD timeout = 0x7FFF;
 21475                           
 21476                           ;incstack = 0
 21477  005458  0EFF               	movlw	255
 21478  00545A  0100               	movlb	0	; () banked
 21479  00545C  6F60               	movwf	wait_ready@timeout& (0+255),b
 21480  00545E  0E7F               	movlw	127
 21481  005460  6F61               	movwf	(wait_ready@timeout+1)& (0+255),b
 21482  005462  0E00               	movlw	0
 21483  005464  6F62               	movwf	(wait_ready@timeout+2)& (0+255),b
 21484  005466  0E00               	movlw	0
 21485  005468  6F63               	movwf	(wait_ready@timeout+3)& (0+255),b
 21486  00546A                     
 21487                           ; BSR set to: 0
 21488                           ;SDCard.c: 112: res = leitura_SPI();
 21489                           
 21490                           ; BSR set to: 0
 21491  00546A  ECAD  F02B         	call	_leitura_SPI	;wreg free
 21492  00546E  0100               	movlb	0	; () banked
 21493  005470  6F64               	movwf	wait_ready@res& (0+255),b
 21494                           
 21495                           ; BSR set to: 0
 21496                           ;SDCard.c: 113: while ((res != 0xFF) && (--timeout));
 21497  005472  2964               	incf	wait_ready@res& (0+255),w,b
 21498  005474  B4D8               	btfsc	status,2,c
 21499  005476  D00B               	goto	u11940
 21500                           
 21501                           ; BSR set to: 0
 21502  005478  0760               	decf	wait_ready@timeout& (0+255),f,b
 21503  00547A  0E00               	movlw	0
 21504  00547C  5B61               	subwfb	(wait_ready@timeout+1)& (0+255),f,b
 21505  00547E  5B62               	subwfb	(wait_ready@timeout+2)& (0+255),f,b
 21506  005480  5B63               	subwfb	(wait_ready@timeout+3)& (0+255),f,b
 21507  005482  5160               	movf	wait_ready@timeout& (0+255),w,b
 21508  005484  1161               	iorwf	(wait_ready@timeout+1)& (0+255),w,b
 21509  005486  1162               	iorwf	(wait_ready@timeout+2)& (0+255),w,b
 21510  005488  1163               	iorwf	(wait_ready@timeout+3)& (0+255),w,b
 21511  00548A  A4D8               	btfss	status,2,c
 21512  00548C  D7EE               	goto	l397
 21513  00548E                     u11940:
 21514                           
 21515                           ; BSR set to: 0
 21516                           ;SDCard.c: 115: return res;
 21517                           
 21518                           ; BSR set to: 0
 21519                           
 21520                           ; BSR set to: 0
 21521  00548E  5164               	movf	wait_ready@res& (0+255),w,b
 21522  005490  0012               	return	
 21523  005492                     __end_of_wait_ready:
 21524                           	opt stack 0
 21525                           tosu	equ	0xFFF
 21526                           tosh	equ	0xFFE
 21527                           tosl	equ	0xFFD
 21528                           pclath	equ	0xFFA
 21529                           tblptru	equ	0xFF8
 21530                           tblptrh	equ	0xFF7
 21531                           tblptrl	equ	0xFF6
 21532                           tablat	equ	0xFF5
 21533                           prodh	equ	0xFF4
 21534                           prodl	equ	0xFF3
 21535                           intcon	equ	0xFF2
 21536                           intcon2	equ	0xFF1
 21537                           intcon3	equ	0xFF0
 21538                           indf0	equ	0xFEF
 21539                           postinc0	equ	0xFEE
 21540                           fsr0h	equ	0xFEA
 21541                           fsr0l	equ	0xFE9
 21542                           wreg	equ	0xFE8
 21543                           indf1	equ	0xFE7
 21544                           postinc1	equ	0xFE6
 21545                           postdec1	equ	0xFE5
 21546                           plusw1	equ	0xFE3
 21547                           fsr1h	equ	0xFE2
 21548                           fsr1l	equ	0xFE1
 21549                           indf2	equ	0xFDF
 21550                           postinc2	equ	0xFDE
 21551                           postdec2	equ	0xFDD
 21552                           plusw2	equ	0xFDB
 21553                           fsr2h	equ	0xFDA
 21554                           fsr2l	equ	0xFD9
 21555                           status	equ	0xFD8
 21556                           
 21557 ;; *************** function _escreve_SPI *****************
 21558 ;; Defined at:
 21559 ;;		line 98 in file "bibliotecas/SPI.c"
 21560 ;; Parameters:    Size  Location     Type
 21561 ;;  dado            1    wreg     unsigned char 
 21562 ;; Auto vars:     Size  Location     Type
 21563 ;;  dado            1    1[BANK0 ] unsigned char 
 21564 ;;  TempVar         1    0[BANK0 ] unsigned char 
 21565 ;; Return value:  Size  Location     Type
 21566 ;;                  1    wreg      void 
 21567 ;; Registers used:
 21568 ;;		wreg
 21569 ;; Tracked objects:
 21570 ;;		On entry : 0/0
 21571 ;;		On exit  : 0/0
 21572 ;;		Unchanged: 0/0
 21573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21574 ;;      Params:         0       0       0       0       0       0       0       0       0
 21575 ;;      Locals:         0       2       0       0       0       0       0       0       0
 21576 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21577 ;;      Totals:         0       2       0       0       0       0       0       0       0
 21578 ;;Total ram usage:        2 bytes
 21579 ;; Hardware stack levels used:    1
 21580 ;; Hardware stack levels required when called:    3
 21581 ;; This function calls:
 21582 ;;		Nothing
 21583 ;; This function is called by:
 21584 ;;		_proceed
 21585 ;;		_command
 21586 ;;		_sdc_disk_write
 21587 ;; This function uses a non-reentrant model
 21588 ;;
 21589                           
 21590                           	psect	text79
 21591  0056B0                     __ptext79:
 21592                           	opt stack 0
 21593  0056B0                     _escreve_SPI:
 21594                           	opt stack 16
 21595                           
 21596                           ; BSR set to: 0
 21597                           ;incstack = 0
 21598                           ;escreve_SPI@dado stored from wreg
 21599  0056B0  0100               	movlb	0	; () banked
 21600  0056B2  6F61               	movwf	escreve_SPI@dado& (0+255),b
 21601                           
 21602                           ;SPI.c: 100: unsigned char TempVar;
 21603                           ;SPI.c: 101: TempVar = SSPBUF;
 21604  0056B4  CFC9 F060          	movff	4041,escreve_SPI@TempVar	;volatile
 21605                           
 21606                           ;SPI.c: 102: PIR1bits.SSPIF = 0;
 21607  0056B8  969E               	bcf	3998,3,c	;volatile
 21608                           
 21609                           ;SPI.c: 104: SSPBUF = dado;
 21610  0056BA  C061  FFC9         	movff	escreve_SPI@dado,4041	;volatile
 21611  0056BE  B69E               	btfsc	3998,3,c	;volatile
 21612  0056C0  0012               	return	
 21613  0056C2  D7FD               	goto	l484
 21614  0056C4                     __end_of_escreve_SPI:
 21615                           	opt stack 0
 21616                           tosu	equ	0xFFF
 21617                           tosh	equ	0xFFE
 21618                           tosl	equ	0xFFD
 21619                           pclath	equ	0xFFA
 21620                           tblptru	equ	0xFF8
 21621                           tblptrh	equ	0xFF7
 21622                           tblptrl	equ	0xFF6
 21623                           tablat	equ	0xFF5
 21624                           prodh	equ	0xFF4
 21625                           prodl	equ	0xFF3
 21626                           intcon	equ	0xFF2
 21627                           intcon2	equ	0xFF1
 21628                           intcon3	equ	0xFF0
 21629                           indf0	equ	0xFEF
 21630                           postinc0	equ	0xFEE
 21631                           fsr0h	equ	0xFEA
 21632                           fsr0l	equ	0xFE9
 21633                           wreg	equ	0xFE8
 21634                           indf1	equ	0xFE7
 21635                           postinc1	equ	0xFE6
 21636                           postdec1	equ	0xFE5
 21637                           plusw1	equ	0xFE3
 21638                           fsr1h	equ	0xFE2
 21639                           fsr1l	equ	0xFE1
 21640                           indf2	equ	0xFDF
 21641                           postinc2	equ	0xFDE
 21642                           postdec2	equ	0xFDD
 21643                           plusw2	equ	0xFDB
 21644                           fsr2h	equ	0xFDA
 21645                           fsr2l	equ	0xFD9
 21646                           status	equ	0xFD8
 21647                           
 21648 ;; *************** function _dummy_clocks *****************
 21649 ;; Defined at:
 21650 ;;		line 74 in file "bibliotecas/SDCard.c"
 21651 ;; Parameters:    Size  Location     Type
 21652 ;;  n               1    wreg     unsigned char 
 21653 ;; Auto vars:     Size  Location     Type
 21654 ;;  n               1    2[BANK0 ] unsigned char 
 21655 ;;  i               2    3[BANK0 ] unsigned int 
 21656 ;; Return value:  Size  Location     Type
 21657 ;;                  1    wreg      void 
 21658 ;; Registers used:
 21659 ;;		wreg, status,2, status,0, cstack
 21660 ;; Tracked objects:
 21661 ;;		On entry : 0/0
 21662 ;;		On exit  : 0/0
 21663 ;;		Unchanged: 0/0
 21664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21665 ;;      Params:         0       0       0       0       0       0       0       0       0
 21666 ;;      Locals:         0       3       0       0       0       0       0       0       0
 21667 ;;      Temps:          0       2       0       0       0       0       0       0       0
 21668 ;;      Totals:         0       5       0       0       0       0       0       0       0
 21669 ;;Total ram usage:        5 bytes
 21670 ;; Hardware stack levels used:    1
 21671 ;; Hardware stack levels required when called:    4
 21672 ;; This function calls:
 21673 ;;		_leitura_SPI
 21674 ;; This function is called by:
 21675 ;;		_command
 21676 ;;		_sdc_disk_initialize
 21677 ;;		_sdc_disk_read
 21678 ;;		_sdc_disk_write
 21679 ;; This function uses a non-reentrant model
 21680 ;;
 21681                           
 21682                           	psect	text80
 21683  005318                     __ptext80:
 21684                           	opt stack 0
 21685  005318                     _dummy_clocks:
 21686                           	opt stack 16
 21687                           
 21688                           ;incstack = 0
 21689                           ;dummy_clocks@n stored from wreg
 21690  005318  0100               	movlb	0	; () banked
 21691  00531A  6F62               	movwf	dummy_clocks@n& (0+255),b
 21692                           
 21693                           ;SDCard.c: 76: unsigned int i;
 21694                           ;SDCard.c: 77: _delay((unsigned long)((1)*(48000000/4000.0)));
 21695  00531C  0E10               	movlw	16
 21696  00531E  0100               	movlb	0	; () banked
 21697  005320  6F60               	movwf	??_dummy_clocks& (0+255),b
 21698  005322  0E94               	movlw	148
 21699  005324                     u17377:
 21700  005324  2EE8               	decfsz	wreg,f,c
 21701  005326  D7FE               	bra	u17377
 21702  005328  2F60               	decfsz	??_dummy_clocks& (0+255),f,b
 21703  00532A  D7FC               	bra	u17377
 21704  00532C  F000               	nop	
 21705                           
 21706                           ;SDCard.c: 78: for(i=0;i<n;i++)
 21707  00532E  0E00               	movlw	0
 21708  005330  0100               	movlb	0	; () banked
 21709  005332  6F64               	movwf	(dummy_clocks@i+1)& (0+255),b
 21710  005334  0E00               	movlw	0
 21711  005336  6F63               	movwf	dummy_clocks@i& (0+255),b
 21712  005338  D007               	goto	l388
 21713  00533A                     l389:
 21714                           
 21715                           ; BSR set to: 0
 21716                           ;SDCard.c: 79: {
 21717                           ;SDCard.c: 80: LATBbits.LATB4 = 1;
 21718  00533A  888A               	bsf	3978,4,c	;volatile
 21719                           
 21720                           ; BSR set to: 0
 21721                           ;SDCard.c: 81: leitura_SPI();
 21722  00533C  ECAD  F02B         	call	_leitura_SPI	;wreg free
 21723                           
 21724                           ;SDCard.c: 82: LATBbits.LATB4 = 0;
 21725  005340  988A               	bcf	3978,4,c	;volatile
 21726  005342  0100               	movlb	0	; () banked
 21727  005344  4B63               	infsnz	dummy_clocks@i& (0+255),f,b
 21728  005346  2B64               	incf	(dummy_clocks@i+1)& (0+255),f,b
 21729  005348                     l388:
 21730                           
 21731                           ; BSR set to: 0
 21732                           
 21733                           ; BSR set to: 0
 21734  005348  5162               	movf	dummy_clocks@n& (0+255),w,b
 21735  00534A  6F60               	movwf	??_dummy_clocks& (0+255),b
 21736  00534C  6B61               	clrf	(??_dummy_clocks+1)& (0+255),b
 21737  00534E  5160               	movf	??_dummy_clocks& (0+255),w,b
 21738  005350  5D63               	subwf	dummy_clocks@i& (0+255),w,b
 21739  005352  5161               	movf	(??_dummy_clocks+1)& (0+255),w,b
 21740  005354  5964               	subwfb	(dummy_clocks@i+1)& (0+255),w,b
 21741  005356  B0D8               	btfsc	status,0,c
 21742  005358  0012               	return	
 21743  00535A  D7EF               	goto	l389
 21744  00535C                     __end_of_dummy_clocks:
 21745                           	opt stack 0
 21746                           tosu	equ	0xFFF
 21747                           tosh	equ	0xFFE
 21748                           tosl	equ	0xFFD
 21749                           pclath	equ	0xFFA
 21750                           tblptru	equ	0xFF8
 21751                           tblptrh	equ	0xFF7
 21752                           tblptrl	equ	0xFF6
 21753                           tablat	equ	0xFF5
 21754                           prodh	equ	0xFF4
 21755                           prodl	equ	0xFF3
 21756                           intcon	equ	0xFF2
 21757                           intcon2	equ	0xFF1
 21758                           intcon3	equ	0xFF0
 21759                           indf0	equ	0xFEF
 21760                           postinc0	equ	0xFEE
 21761                           fsr0h	equ	0xFEA
 21762                           fsr0l	equ	0xFE9
 21763                           wreg	equ	0xFE8
 21764                           indf1	equ	0xFE7
 21765                           postinc1	equ	0xFE6
 21766                           postdec1	equ	0xFE5
 21767                           plusw1	equ	0xFE3
 21768                           fsr1h	equ	0xFE2
 21769                           fsr1l	equ	0xFE1
 21770                           indf2	equ	0xFDF
 21771                           postinc2	equ	0xFDE
 21772                           postdec2	equ	0xFDD
 21773                           plusw2	equ	0xFDB
 21774                           fsr2h	equ	0xFDA
 21775                           fsr2l	equ	0xFD9
 21776                           status	equ	0xFD8
 21777                           
 21778 ;; *************** function _leitura_SPI *****************
 21779 ;; Defined at:
 21780 ;;		line 83 in file "bibliotecas/SPI.c"
 21781 ;; Parameters:    Size  Location     Type
 21782 ;;		None
 21783 ;; Auto vars:     Size  Location     Type
 21784 ;;		None
 21785 ;; Return value:  Size  Location     Type
 21786 ;;                  1    wreg      unsigned char 
 21787 ;; Registers used:
 21788 ;;		wreg, status,2
 21789 ;; Tracked objects:
 21790 ;;		On entry : 0/0
 21791 ;;		On exit  : 0/0
 21792 ;;		Unchanged: 0/0
 21793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21794 ;;      Params:         0       0       0       0       0       0       0       0       0
 21795 ;;      Locals:         0       0       0       0       0       0       0       0       0
 21796 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21797 ;;      Totals:         0       0       0       0       0       0       0       0       0
 21798 ;;Total ram usage:        0 bytes
 21799 ;; Hardware stack levels used:    1
 21800 ;; Hardware stack levels required when called:    3
 21801 ;; This function calls:
 21802 ;;		Nothing
 21803 ;; This function is called by:
 21804 ;;		_response
 21805 ;;		_dummy_clocks
 21806 ;;		_wait_ready
 21807 ;;		_sdc_disk_write
 21808 ;; This function uses a non-reentrant model
 21809 ;;
 21810                           
 21811                           	psect	text81
 21812  00575A                     __ptext81:
 21813                           	opt stack 0
 21814  00575A                     _leitura_SPI:
 21815                           	opt stack 16
 21816                           
 21817                           ;SPI.c: 85: SSPBUF = 0xFF;
 21818                           
 21819                           ; BSR set to: 0
 21820                           ;incstack = 0
 21821  00575A  68C9               	setf	4041,c	;volatile
 21822                           
 21823                           ;SPI.c: 86: SSPSTATbits.BF = 0;
 21824  00575C  90C7               	bcf	4039,0,c	;volatile
 21825  00575E  A0C7               	btfss	4039,0,c	;volatile
 21826  005760  D7FE               	goto	l478
 21827                           
 21828                           ;SPI.c: 88: return (SSPBUF);
 21829  005762  50C9               	movf	4041,w,c	;volatile
 21830  005764  0012               	return	
 21831  005766                     __end_of_leitura_SPI:
 21832                           	opt stack 0
 21833                           tosu	equ	0xFFF
 21834                           tosh	equ	0xFFE
 21835                           tosl	equ	0xFFD
 21836                           pclath	equ	0xFFA
 21837                           tblptru	equ	0xFF8
 21838                           tblptrh	equ	0xFF7
 21839                           tblptrl	equ	0xFF6
 21840                           tablat	equ	0xFF5
 21841                           prodh	equ	0xFF4
 21842                           prodl	equ	0xFF3
 21843                           intcon	equ	0xFF2
 21844                           intcon2	equ	0xFF1
 21845                           intcon3	equ	0xFF0
 21846                           indf0	equ	0xFEF
 21847                           postinc0	equ	0xFEE
 21848                           fsr0h	equ	0xFEA
 21849                           fsr0l	equ	0xFE9
 21850                           wreg	equ	0xFE8
 21851                           indf1	equ	0xFE7
 21852                           postinc1	equ	0xFE6
 21853                           postdec1	equ	0xFE5
 21854                           plusw1	equ	0xFE3
 21855                           fsr1h	equ	0xFE2
 21856                           fsr1l	equ	0xFE1
 21857                           indf2	equ	0xFDF
 21858                           postinc2	equ	0xFDE
 21859                           postdec2	equ	0xFDD
 21860                           plusw2	equ	0xFDB
 21861                           fsr2h	equ	0xFDA
 21862                           fsr2l	equ	0xFD9
 21863                           status	equ	0xFD8
 21864                           
 21865 ;; *************** function _disk_ioctl *****************
 21866 ;; Defined at:
 21867 ;;		line 198 in file "bibliotecas/diskio.c"
 21868 ;; Parameters:    Size  Location     Type
 21869 ;;  pdrv            1    wreg     unsigned char 
 21870 ;;  cmd             1    0[BANK0 ] unsigned char 
 21871 ;;  buff            2    1[BANK0 ] PTR void 
 21872 ;;		 -> NULL(0), 
 21873 ;; Auto vars:     Size  Location     Type
 21874 ;;  pdrv            1    3[BANK0 ] unsigned char 
 21875 ;;  result          2    0        int 
 21876 ;;  res             1    4[BANK0 ] enum E25
 21877 ;; Return value:  Size  Location     Type
 21878 ;;                  1    wreg      enum E25
 21879 ;; Registers used:
 21880 ;;		wreg, status,2, status,0
 21881 ;; Tracked objects:
 21882 ;;		On entry : 0/0
 21883 ;;		On exit  : 0/0
 21884 ;;		Unchanged: 0/0
 21885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21886 ;;      Params:         0       3       0       0       0       0       0       0       0
 21887 ;;      Locals:         0       2       0       0       0       0       0       0       0
 21888 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21889 ;;      Totals:         0       5       0       0       0       0       0       0       0
 21890 ;;Total ram usage:        5 bytes
 21891 ;; Hardware stack levels used:    1
 21892 ;; Hardware stack levels required when called:    3
 21893 ;; This function calls:
 21894 ;;		Nothing
 21895 ;; This function is called by:
 21896 ;;		_sync
 21897 ;; This function uses a non-reentrant model
 21898 ;;
 21899                           
 21900                           	psect	text82
 21901  005550                     __ptext82:
 21902                           	opt stack 0
 21903  005550                     _disk_ioctl:
 21904                           	opt stack 21
 21905                           
 21906                           ;incstack = 0
 21907                           ;disk_ioctl@pdrv stored from wreg
 21908  005550  0100               	movlb	0	; () banked
 21909  005552  6F63               	movwf	disk_ioctl@pdrv& (0+255),b
 21910                           
 21911                           ;diskio.c: 204: DRESULT res;
 21912                           ;diskio.c: 205: int result;
 21913                           ;diskio.c: 207: switch (pdrv) {
 21914  005554  D006               	goto	l553
 21915  005556                     l554:
 21916                           
 21917                           ; BSR set to: 0
 21918                           ;diskio.c: 212: return res;
 21919  005556  5164               	movf	disk_ioctl@res& (0+255),w,b
 21920  005558  0012               	return	
 21921  00555A                     l556:
 21922                           
 21923                           ; BSR set to: 0
 21924                           ;diskio.c: 218: return res;
 21925  00555A  5164               	movf	disk_ioctl@res& (0+255),w,b
 21926  00555C  0012               	return	
 21927  00555E                     l557:
 21928                           
 21929                           ; BSR set to: 0
 21930                           ;diskio.c: 224: return res;
 21931  00555E  5164               	movf	disk_ioctl@res& (0+255),w,b
 21932  005560  0012               	return	
 21933  005562                     l553:
 21934                           
 21935                           ; BSR set to: 0
 21936  005562  0100               	movlb	0	; () banked
 21937  005564  5163               	movf	disk_ioctl@pdrv& (0+255),w,b
 21938                           
 21939                           ; Switch size 1, requested type "space"
 21940                           ; Number of cases is 3, Range of values is 0 to 2
 21941                           ; switch strategies available:
 21942                           ; Name         Instructions Cycles
 21943                           ; simple_byte           10     6 (average)
 21944                           ;	Chosen strategy is simple_byte
 21945  005566  0A00               	xorlw	0	; case 0
 21946  005568  B4D8               	btfsc	status,2,c
 21947  00556A  D7F5               	goto	l554
 21948  00556C  0A01               	xorlw	1	; case 1
 21949  00556E  B4D8               	btfsc	status,2,c
 21950  005570  D7F4               	goto	l556
 21951  005572  0A03               	xorlw	3	; case 2
 21952  005574  B4D8               	btfsc	status,2,c
 21953  005576  D7F3               	goto	l557
 21954                           
 21955                           ; BSR set to: 0
 21956                           ;diskio.c: 227: return RES_PARERR;
 21957                           
 21958                           ; BSR set to: 0
 21959  005578  0E04               	movlw	4
 21960  00557A  0012               	return	
 21961  00557C                     __end_of_disk_ioctl:
 21962                           	opt stack 0
 21963                           tosu	equ	0xFFF
 21964                           tosh	equ	0xFFE
 21965                           tosl	equ	0xFFD
 21966                           pclath	equ	0xFFA
 21967                           tblptru	equ	0xFF8
 21968                           tblptrh	equ	0xFF7
 21969                           tblptrl	equ	0xFF6
 21970                           tablat	equ	0xFF5
 21971                           prodh	equ	0xFF4
 21972                           prodl	equ	0xFF3
 21973                           intcon	equ	0xFF2
 21974                           intcon2	equ	0xFF1
 21975                           intcon3	equ	0xFF0
 21976                           indf0	equ	0xFEF
 21977                           postinc0	equ	0xFEE
 21978                           fsr0h	equ	0xFEA
 21979                           fsr0l	equ	0xFE9
 21980                           wreg	equ	0xFE8
 21981                           indf1	equ	0xFE7
 21982                           postinc1	equ	0xFE6
 21983                           postdec1	equ	0xFE5
 21984                           plusw1	equ	0xFE3
 21985                           fsr1h	equ	0xFE2
 21986                           fsr1l	equ	0xFE1
 21987                           indf2	equ	0xFDF
 21988                           postinc2	equ	0xFDE
 21989                           postdec2	equ	0xFDD
 21990                           plusw2	equ	0xFDB
 21991                           fsr2h	equ	0xFDA
 21992                           fsr2l	equ	0xFD9
 21993                           status	equ	0xFD8
 21994                           
 21995 ;; *************** function _get_fattime *****************
 21996 ;; Defined at:
 21997 ;;		line 809 in file "bibliotecas/tff.c"
 21998 ;; Parameters:    Size  Location     Type
 21999 ;;		None
 22000 ;; Auto vars:     Size  Location     Type
 22001 ;;  f_time          9   42[BANK0 ] struct .
 22002 ;; Return value:  Size  Location     Type
 22003 ;;                  4    0[BANK0 ] unsigned long 
 22004 ;; Registers used:
 22005 ;;		wreg, status,2, status,0
 22006 ;; Tracked objects:
 22007 ;;		On entry : 0/0
 22008 ;;		On exit  : 0/0
 22009 ;;		Unchanged: 0/0
 22010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22011 ;;      Params:         0       4       0       0       0       0       0       0       0
 22012 ;;      Locals:         0       9       0       0       0       0       0       0       0
 22013 ;;      Temps:          0      38       0       0       0       0       0       0       0
 22014 ;;      Totals:         0      51       0       0       0       0       0       0       0
 22015 ;;Total ram usage:       51 bytes
 22016 ;; Hardware stack levels used:    1
 22017 ;; Hardware stack levels required when called:    3
 22018 ;; This function calls:
 22019 ;;		Nothing
 22020 ;; This function is called by:
 22021 ;;		_f_open
 22022 ;;		_f_sync
 22023 ;; This function uses a non-reentrant model
 22024 ;;
 22025                           
 22026                           	psect	text83
 22027  003FE8                     __ptext83:
 22028                           	opt stack 0
 22029  003FE8                     _get_fattime:
 22030                           	opt stack 23
 22031                           
 22032                           ;tff.c: 811: fat_time f_time;
 22033                           ;tff.c: 813: return (DWORD)(f_time.ano ) << 25 |
 22034                           ;tff.c: 814: (DWORD)(f_time.mes) << 21 |
 22035                           ;tff.c: 815: (DWORD)(f_time.mes) << 16 |
 22036                           ;tff.c: 816: (DWORD)(f_time.hora) << 11 |
 22037                           ;tff.c: 817: (DWORD)(f_time.min) << 5 |
 22038                           ;tff.c: 818: (DWORD)(f_time.seg) >> 1;
 22039                           
 22040                           ; BSR set to: 0
 22041                           ;incstack = 0
 22042  003FE8  90D8               	bcf	status,0,c
 22043  003FEA  0100               	movlb	0	; () banked
 22044  003FEC  318F               	rrcf	(get_fattime@f_time+5)& (0+255),w,b
 22045  003FEE  6F65               	movwf	(??_get_fattime+1)& (0+255),b
 22046  003FF0  318E               	rrcf	(get_fattime@f_time+4)& (0+255),w,b
 22047  003FF2  6F64               	movwf	??_get_fattime& (0+255),b
 22048  003FF4  518C               	movf	(get_fattime@f_time+2)& (0+255),w,b
 22049  003FF6  6F66               	movwf	(??_get_fattime+2)& (0+255),b
 22050  003FF8  518D               	movf	(get_fattime@f_time+3)& (0+255),w,b
 22051  003FFA  6F67               	movwf	(??_get_fattime+3)& (0+255),b
 22052  003FFC  6B68               	clrf	(??_get_fattime+4)& (0+255),b
 22053  003FFE  6B69               	clrf	(??_get_fattime+5)& (0+255),b
 22054  004000  0E05               	movlw	5
 22055  004002                     u13845:
 22056  004002  90D8               	bcf	status,0,c
 22057  004004  3766               	rlcf	(??_get_fattime+2)& (0+255),f,b
 22058  004006  3767               	rlcf	(??_get_fattime+3)& (0+255),f,b
 22059  004008  3768               	rlcf	(??_get_fattime+4)& (0+255),f,b
 22060  00400A  3769               	rlcf	(??_get_fattime+5)& (0+255),f,b
 22061  00400C  2EE8               	decfsz	wreg,f,c
 22062  00400E  D7F9               	goto	u13845
 22063  004010  518A               	movf	get_fattime@f_time& (0+255),w,b
 22064  004012  6F6A               	movwf	(??_get_fattime+6)& (0+255),b
 22065  004014  518B               	movf	(get_fattime@f_time+1)& (0+255),w,b
 22066  004016  6F6B               	movwf	(??_get_fattime+7)& (0+255),b
 22067  004018  6B6C               	clrf	(??_get_fattime+8)& (0+255),b
 22068  00401A  6B6D               	clrf	(??_get_fattime+9)& (0+255),b
 22069  00401C  0E0B               	movlw	11
 22070  00401E                     u13855:
 22071  00401E  90D8               	bcf	status,0,c
 22072  004020  376A               	rlcf	(??_get_fattime+6)& (0+255),f,b
 22073  004022  376B               	rlcf	(??_get_fattime+7)& (0+255),f,b
 22074  004024  376C               	rlcf	(??_get_fattime+8)& (0+255),f,b
 22075  004026  376D               	rlcf	(??_get_fattime+9)& (0+255),f,b
 22076  004028  2EE8               	decfsz	wreg,f,c
 22077  00402A  D7F9               	goto	u13855
 22078  00402C  C091  F06E         	movff	get_fattime@f_time+7,??_get_fattime+10
 22079  004030  6B6F               	clrf	(??_get_fattime+11)& (0+255),b
 22080  004032  6B70               	clrf	(??_get_fattime+12)& (0+255),b
 22081  004034  6B71               	clrf	(??_get_fattime+13)& (0+255),b
 22082  004036  C06F  F071         	movff	??_get_fattime+11,??_get_fattime+13
 22083  00403A  C06E  F070         	movff	??_get_fattime+10,??_get_fattime+12
 22084  00403E  6B6F               	clrf	(??_get_fattime+11)& (0+255),b
 22085  004040  6B6E               	clrf	(??_get_fattime+10)& (0+255),b
 22086  004042  C091  F072         	movff	get_fattime@f_time+7,??_get_fattime+14
 22087  004046  6B73               	clrf	(??_get_fattime+15)& (0+255),b
 22088  004048  6B74               	clrf	(??_get_fattime+16)& (0+255),b
 22089  00404A  6B75               	clrf	(??_get_fattime+17)& (0+255),b
 22090  00404C  0E15               	movlw	21
 22091  00404E                     u13865:
 22092  00404E  90D8               	bcf	status,0,c
 22093  004050  3772               	rlcf	(??_get_fattime+14)& (0+255),f,b
 22094  004052  3773               	rlcf	(??_get_fattime+15)& (0+255),f,b
 22095  004054  3774               	rlcf	(??_get_fattime+16)& (0+255),f,b
 22096  004056  3775               	rlcf	(??_get_fattime+17)& (0+255),f,b
 22097  004058  2EE8               	decfsz	wreg,f,c
 22098  00405A  D7F9               	goto	u13865
 22099  00405C  C092  F076         	movff	get_fattime@f_time+8,??_get_fattime+18
 22100  004060  6B77               	clrf	(??_get_fattime+19)& (0+255),b
 22101  004062  6B78               	clrf	(??_get_fattime+20)& (0+255),b
 22102  004064  6B79               	clrf	(??_get_fattime+21)& (0+255),b
 22103  004066  0E19               	movlw	25
 22104  004068                     u13875:
 22105  004068  90D8               	bcf	status,0,c
 22106  00406A  3776               	rlcf	(??_get_fattime+18)& (0+255),f,b
 22107  00406C  3777               	rlcf	(??_get_fattime+19)& (0+255),f,b
 22108  00406E  3778               	rlcf	(??_get_fattime+20)& (0+255),f,b
 22109  004070  3779               	rlcf	(??_get_fattime+21)& (0+255),f,b
 22110  004072  2EE8               	decfsz	wreg,f,c
 22111  004074  D7F9               	goto	u13875
 22112  004076  5172               	movf	(??_get_fattime+14)& (0+255),w,b
 22113  004078  1176               	iorwf	(??_get_fattime+18)& (0+255),w,b
 22114  00407A  6F7A               	movwf	(??_get_fattime+22)& (0+255),b
 22115  00407C  5173               	movf	(??_get_fattime+15)& (0+255),w,b
 22116  00407E  1177               	iorwf	(??_get_fattime+19)& (0+255),w,b
 22117  004080  6F7B               	movwf	(??_get_fattime+23)& (0+255),b
 22118  004082  5174               	movf	(??_get_fattime+16)& (0+255),w,b
 22119  004084  1178               	iorwf	(??_get_fattime+20)& (0+255),w,b
 22120  004086  6F7C               	movwf	(??_get_fattime+24)& (0+255),b
 22121  004088  5175               	movf	(??_get_fattime+17)& (0+255),w,b
 22122  00408A  1179               	iorwf	(??_get_fattime+21)& (0+255),w,b
 22123  00408C  6F7D               	movwf	(??_get_fattime+25)& (0+255),b
 22124  00408E  516E               	movf	(??_get_fattime+10)& (0+255),w,b
 22125  004090  117A               	iorwf	(??_get_fattime+22)& (0+255),w,b
 22126  004092  6F7E               	movwf	(??_get_fattime+26)& (0+255),b
 22127  004094  516F               	movf	(??_get_fattime+11)& (0+255),w,b
 22128  004096  117B               	iorwf	(??_get_fattime+23)& (0+255),w,b
 22129  004098  6F7F               	movwf	(??_get_fattime+27)& (0+255),b
 22130  00409A  5170               	movf	(??_get_fattime+12)& (0+255),w,b
 22131  00409C  117C               	iorwf	(??_get_fattime+24)& (0+255),w,b
 22132  00409E  6F80               	movwf	(??_get_fattime+28)& (0+255),b
 22133  0040A0  5171               	movf	(??_get_fattime+13)& (0+255),w,b
 22134  0040A2  117D               	iorwf	(??_get_fattime+25)& (0+255),w,b
 22135  0040A4  6F81               	movwf	(??_get_fattime+29)& (0+255),b
 22136  0040A6  516A               	movf	(??_get_fattime+6)& (0+255),w,b
 22137  0040A8  117E               	iorwf	(??_get_fattime+26)& (0+255),w,b
 22138  0040AA  6F82               	movwf	(??_get_fattime+30)& (0+255),b
 22139  0040AC  516B               	movf	(??_get_fattime+7)& (0+255),w,b
 22140  0040AE  117F               	iorwf	(??_get_fattime+27)& (0+255),w,b
 22141  0040B0  6F83               	movwf	(??_get_fattime+31)& (0+255),b
 22142  0040B2  516C               	movf	(??_get_fattime+8)& (0+255),w,b
 22143  0040B4  1180               	iorwf	(??_get_fattime+28)& (0+255),w,b
 22144  0040B6  6F84               	movwf	(??_get_fattime+32)& (0+255),b
 22145  0040B8  516D               	movf	(??_get_fattime+9)& (0+255),w,b
 22146  0040BA  1181               	iorwf	(??_get_fattime+29)& (0+255),w,b
 22147  0040BC  6F85               	movwf	(??_get_fattime+33)& (0+255),b
 22148  0040BE  5166               	movf	(??_get_fattime+2)& (0+255),w,b
 22149  0040C0  1182               	iorwf	(??_get_fattime+30)& (0+255),w,b
 22150  0040C2  6F86               	movwf	(??_get_fattime+34)& (0+255),b
 22151  0040C4  5167               	movf	(??_get_fattime+3)& (0+255),w,b
 22152  0040C6  1183               	iorwf	(??_get_fattime+31)& (0+255),w,b
 22153  0040C8  6F87               	movwf	(??_get_fattime+35)& (0+255),b
 22154  0040CA  5168               	movf	(??_get_fattime+4)& (0+255),w,b
 22155  0040CC  1184               	iorwf	(??_get_fattime+32)& (0+255),w,b
 22156  0040CE  6F88               	movwf	(??_get_fattime+36)& (0+255),b
 22157  0040D0  5169               	movf	(??_get_fattime+5)& (0+255),w,b
 22158  0040D2  1185               	iorwf	(??_get_fattime+33)& (0+255),w,b
 22159  0040D4  6F89               	movwf	(??_get_fattime+37)& (0+255),b
 22160  0040D6  5164               	movf	??_get_fattime& (0+255),w,b
 22161  0040D8  1186               	iorwf	(??_get_fattime+34)& (0+255),w,b
 22162  0040DA  6F60               	movwf	?_get_fattime& (0+255),b
 22163  0040DC  5165               	movf	(??_get_fattime+1)& (0+255),w,b
 22164  0040DE  1187               	iorwf	(??_get_fattime+35)& (0+255),w,b
 22165  0040E0  6F61               	movwf	(?_get_fattime+1)& (0+255),b
 22166  0040E2  0E00               	movlw	0
 22167  0040E4  1188               	iorwf	(??_get_fattime+36)& (0+255),w,b
 22168  0040E6  6F62               	movwf	(?_get_fattime+2)& (0+255),b
 22169  0040E8  0E00               	movlw	0
 22170  0040EA  1189               	iorwf	(??_get_fattime+37)& (0+255),w,b
 22171  0040EC  6F63               	movwf	(?_get_fattime+3)& (0+255),b
 22172  0040EE  0012               	return	
 22173  0040F0                     __end_of_get_fattime:
 22174                           	opt stack 0
 22175                           tosu	equ	0xFFF
 22176                           tosh	equ	0xFFE
 22177                           tosl	equ	0xFFD
 22178                           pclath	equ	0xFFA
 22179                           tblptru	equ	0xFF8
 22180                           tblptrh	equ	0xFF7
 22181                           tblptrl	equ	0xFF6
 22182                           tablat	equ	0xFF5
 22183                           prodh	equ	0xFF4
 22184                           prodl	equ	0xFF3
 22185                           intcon	equ	0xFF2
 22186                           intcon2	equ	0xFF1
 22187                           intcon3	equ	0xFF0
 22188                           indf0	equ	0xFEF
 22189                           postinc0	equ	0xFEE
 22190                           fsr0h	equ	0xFEA
 22191                           fsr0l	equ	0xFE9
 22192                           wreg	equ	0xFE8
 22193                           indf1	equ	0xFE7
 22194                           postinc1	equ	0xFE6
 22195                           postdec1	equ	0xFE5
 22196                           plusw1	equ	0xFE3
 22197                           fsr1h	equ	0xFE2
 22198                           fsr1l	equ	0xFE1
 22199                           indf2	equ	0xFDF
 22200                           postinc2	equ	0xFDE
 22201                           postdec2	equ	0xFDD
 22202                           plusw2	equ	0xFDB
 22203                           fsr2h	equ	0xFDA
 22204                           fsr2l	equ	0xFD9
 22205                           status	equ	0xFD8
 22206                           
 22207 ;; *************** function _desliga_uart *****************
 22208 ;; Defined at:
 22209 ;;		line 219 in file "bibliotecas/uart.c"
 22210 ;; Parameters:    Size  Location     Type
 22211 ;;		None
 22212 ;; Auto vars:     Size  Location     Type
 22213 ;;		None
 22214 ;; Return value:  Size  Location     Type
 22215 ;;                  1    wreg      void 
 22216 ;; Registers used:
 22217 ;;		wreg, status,2
 22218 ;; Tracked objects:
 22219 ;;		On entry : 0/0
 22220 ;;		On exit  : 0/0
 22221 ;;		Unchanged: 0/0
 22222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22223 ;;      Params:         0       0       0       0       0       0       0       0       0
 22224 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22225 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22226 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22227 ;;Total ram usage:        0 bytes
 22228 ;; Hardware stack levels used:    1
 22229 ;; Hardware stack levels required when called:    3
 22230 ;; This function calls:
 22231 ;;		Nothing
 22232 ;; This function is called by:
 22233 ;;		_escrita_sdcard
 22234 ;;		_sdcard_init
 22235 ;;		_leitura_sdcard
 22236 ;; This function uses a non-reentrant model
 22237 ;;
 22238                           
 22239                           	psect	text84
 22240  005728                     __ptext84:
 22241                           	opt stack 0
 22242  005728                     _desliga_uart:
 22243                           	opt stack 24
 22244                           
 22245                           ;uart.c: 221: TRISCbits.RC6 = 1;
 22246                           
 22247                           ; BSR set to: 0
 22248                           ;incstack = 0
 22249  005728  8C94               	bsf	3988,6,c	;volatile
 22250                           
 22251                           ;uart.c: 222: TRISCbits.RC7 = 1;
 22252  00572A  8E94               	bsf	3988,7,c	;volatile
 22253                           
 22254                           ;uart.c: 225: TXSTA = 0x00;
 22255  00572C  0E00               	movlw	0
 22256  00572E  6EAC               	movwf	4012,c	;volatile
 22257                           
 22258                           ;uart.c: 227: RCSTA = 0x00;
 22259  005730  0E00               	movlw	0
 22260  005732  6EAB               	movwf	4011,c	;volatile
 22261  005734  0012               	return		;funcret
 22262  005736                     __end_of_desliga_uart:
 22263                           	opt stack 0
 22264                           tosu	equ	0xFFF
 22265                           tosh	equ	0xFFE
 22266                           tosl	equ	0xFFD
 22267                           pclath	equ	0xFFA
 22268                           tblptru	equ	0xFF8
 22269                           tblptrh	equ	0xFF7
 22270                           tblptrl	equ	0xFF6
 22271                           tablat	equ	0xFF5
 22272                           prodh	equ	0xFF4
 22273                           prodl	equ	0xFF3
 22274                           intcon	equ	0xFF2
 22275                           intcon2	equ	0xFF1
 22276                           intcon3	equ	0xFF0
 22277                           indf0	equ	0xFEF
 22278                           postinc0	equ	0xFEE
 22279                           fsr0h	equ	0xFEA
 22280                           fsr0l	equ	0xFE9
 22281                           wreg	equ	0xFE8
 22282                           indf1	equ	0xFE7
 22283                           postinc1	equ	0xFE6
 22284                           postdec1	equ	0xFE5
 22285                           plusw1	equ	0xFE3
 22286                           fsr1h	equ	0xFE2
 22287                           fsr1l	equ	0xFE1
 22288                           indf2	equ	0xFDF
 22289                           postinc2	equ	0xFDE
 22290                           postdec2	equ	0xFDD
 22291                           plusw2	equ	0xFDB
 22292                           fsr2h	equ	0xFDA
 22293                           fsr2l	equ	0xFD9
 22294                           status	equ	0xFD8
 22295                           
 22296 ;; *************** function _desliga_SPI *****************
 22297 ;; Defined at:
 22298 ;;		line 69 in file "bibliotecas/SPI.c"
 22299 ;; Parameters:    Size  Location     Type
 22300 ;;		None
 22301 ;; Auto vars:     Size  Location     Type
 22302 ;;		None
 22303 ;; Return value:  Size  Location     Type
 22304 ;;                  1    wreg      void 
 22305 ;; Registers used:
 22306 ;;		wreg, status,2
 22307 ;; Tracked objects:
 22308 ;;		On entry : 0/0
 22309 ;;		On exit  : 0/0
 22310 ;;		Unchanged: 0/0
 22311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22312 ;;      Params:         0       0       0       0       0       0       0       0       0
 22313 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22314 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22315 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22316 ;;Total ram usage:        0 bytes
 22317 ;; Hardware stack levels used:    1
 22318 ;; Hardware stack levels required when called:    3
 22319 ;; This function calls:
 22320 ;;		Nothing
 22321 ;; This function is called by:
 22322 ;;		_escrita_sdcard
 22323 ;;		_leitura_sdcard
 22324 ;; This function uses a non-reentrant model
 22325 ;;
 22326                           
 22327                           	psect	text85
 22328  005766                     __ptext85:
 22329                           	opt stack 0
 22330  005766                     _desliga_SPI:
 22331                           	opt stack 24
 22332                           
 22333                           ;SPI.c: 71: SSPSTAT = 0x00;
 22334                           
 22335                           ;incstack = 0
 22336  005766  0E00               	movlw	0
 22337  005768  6EC7               	movwf	4039,c	;volatile
 22338                           
 22339                           ;SPI.c: 72: SSPCON1 = 0x00;
 22340  00576A  0E00               	movlw	0
 22341  00576C  6EC6               	movwf	4038,c	;volatile
 22342                           
 22343                           ;SPI.c: 73: SSPCON1bits.SSPEN = 0;
 22344  00576E  9AC6               	bcf	4038,5,c	;volatile
 22345  005770  0012               	return		;funcret
 22346  005772                     __end_of_desliga_SPI:
 22347                           	opt stack 0
 22348                           tosu	equ	0xFFF
 22349                           tosh	equ	0xFFE
 22350                           tosl	equ	0xFFD
 22351                           pclath	equ	0xFFA
 22352                           tblptru	equ	0xFF8
 22353                           tblptrh	equ	0xFF7
 22354                           tblptrl	equ	0xFF6
 22355                           tablat	equ	0xFF5
 22356                           prodh	equ	0xFF4
 22357                           prodl	equ	0xFF3
 22358                           intcon	equ	0xFF2
 22359                           intcon2	equ	0xFF1
 22360                           intcon3	equ	0xFF0
 22361                           indf0	equ	0xFEF
 22362                           postinc0	equ	0xFEE
 22363                           fsr0h	equ	0xFEA
 22364                           fsr0l	equ	0xFE9
 22365                           wreg	equ	0xFE8
 22366                           indf1	equ	0xFE7
 22367                           postinc1	equ	0xFE6
 22368                           postdec1	equ	0xFE5
 22369                           plusw1	equ	0xFE3
 22370                           fsr1h	equ	0xFE2
 22371                           fsr1l	equ	0xFE1
 22372                           indf2	equ	0xFDF
 22373                           postinc2	equ	0xFDE
 22374                           postdec2	equ	0xFDD
 22375                           plusw2	equ	0xFDB
 22376                           fsr2h	equ	0xFDA
 22377                           fsr2l	equ	0xFD9
 22378                           status	equ	0xFD8
 22379                           
 22380 ;; *************** function _dados_gps_to_sd *****************
 22381 ;; Defined at:
 22382 ;;		line 637 in file "bibliotecas/GPS.c"
 22383 ;; Parameters:    Size  Location     Type
 22384 ;;		None
 22385 ;; Auto vars:     Size  Location     Type
 22386 ;;		None
 22387 ;; Return value:  Size  Location     Type
 22388 ;;                  1    wreg      void 
 22389 ;; Registers used:
 22390 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22391 ;; Tracked objects:
 22392 ;;		On entry : 0/0
 22393 ;;		On exit  : 0/0
 22394 ;;		Unchanged: 0/0
 22395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22396 ;;      Params:         0       0       0       0       0       0       0       0       0
 22397 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22398 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22399 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22400 ;;Total ram usage:        0 bytes
 22401 ;; Hardware stack levels used:    1
 22402 ;; Hardware stack levels required when called:    5
 22403 ;; This function calls:
 22404 ;;		_monta_sd
 22405 ;; This function is called by:
 22406 ;;		_main
 22407 ;; This function uses a non-reentrant model
 22408 ;;
 22409                           
 22410                           	psect	text86
 22411  00535C                     __ptext86:
 22412                           	opt stack 0
 22413  00535C                     _dados_gps_to_sd:
 22414                           	opt stack 25
 22415                           
 22416                           ;GPS.c: 639: monta_sd(0, rawTime);
 22417                           
 22418                           ;incstack = 0
 22419  00535C  0E76               	movlw	low _rawTime
 22420  00535E  0100               	movlb	0	; () banked
 22421  005360  6F66               	movwf	monta_sd@dado& (0+255),b
 22422  005362  0E01               	movlw	high _rawTime
 22423  005364  6F67               	movwf	(monta_sd@dado+1)& (0+255),b
 22424  005366  0E00               	movlw	0
 22425  005368  ECC6  F01E         	call	_monta_sd
 22426                           
 22427                           ;GPS.c: 640: monta_sd(1, rawDate);
 22428  00536C  0E88               	movlw	low _rawDate
 22429  00536E  0100               	movlb	0	; () banked
 22430  005370  6F66               	movwf	monta_sd@dado& (0+255),b
 22431  005372  0E01               	movlw	high _rawDate
 22432  005374  6F67               	movwf	(monta_sd@dado+1)& (0+255),b
 22433  005376  0E01               	movlw	1
 22434  005378  ECC6  F01E         	call	_monta_sd
 22435                           
 22436                           ;GPS.c: 641: monta_sd(2, rawLatitude);
 22437  00537C  0E5D               	movlw	low _rawLatitude
 22438  00537E  0100               	movlb	0	; () banked
 22439  005380  6F66               	movwf	monta_sd@dado& (0+255),b
 22440  005382  0E01               	movlw	high _rawLatitude
 22441  005384  6F67               	movwf	(monta_sd@dado+1)& (0+255),b
 22442  005386  0E02               	movlw	2
 22443  005388  ECC6  F01E         	call	_monta_sd
 22444                           
 22445                           ;GPS.c: 642: monta_sd(3, rawLongitude);
 22446  00538C  0E50               	movlw	low _rawLongitude
 22447  00538E  0100               	movlb	0	; () banked
 22448  005390  6F66               	movwf	monta_sd@dado& (0+255),b
 22449  005392  0E01               	movlw	high _rawLongitude
 22450  005394  6F67               	movwf	(monta_sd@dado+1)& (0+255),b
 22451  005396  0E03               	movlw	3
 22452  005398  ECC6  F01E         	call	_monta_sd
 22453  00539C  0012               	return	
 22454  00539E                     __end_of_dados_gps_to_sd:
 22455                           	opt stack 0
 22456                           tosu	equ	0xFFF
 22457                           tosh	equ	0xFFE
 22458                           tosl	equ	0xFFD
 22459                           pclath	equ	0xFFA
 22460                           tblptru	equ	0xFF8
 22461                           tblptrh	equ	0xFF7
 22462                           tblptrl	equ	0xFF6
 22463                           tablat	equ	0xFF5
 22464                           prodh	equ	0xFF4
 22465                           prodl	equ	0xFF3
 22466                           intcon	equ	0xFF2
 22467                           intcon2	equ	0xFF1
 22468                           intcon3	equ	0xFF0
 22469                           indf0	equ	0xFEF
 22470                           postinc0	equ	0xFEE
 22471                           fsr0h	equ	0xFEA
 22472                           fsr0l	equ	0xFE9
 22473                           wreg	equ	0xFE8
 22474                           indf1	equ	0xFE7
 22475                           postinc1	equ	0xFE6
 22476                           postdec1	equ	0xFE5
 22477                           plusw1	equ	0xFE3
 22478                           fsr1h	equ	0xFE2
 22479                           fsr1l	equ	0xFE1
 22480                           indf2	equ	0xFDF
 22481                           postinc2	equ	0xFDE
 22482                           postdec2	equ	0xFDD
 22483                           plusw2	equ	0xFDB
 22484                           fsr2h	equ	0xFDA
 22485                           fsr2l	equ	0xFD9
 22486                           status	equ	0xFD8
 22487                           
 22488 ;; *************** function _monta_sd *****************
 22489 ;; Defined at:
 22490 ;;		line 286 in file "bibliotecas/SDCard.c"
 22491 ;; Parameters:    Size  Location     Type
 22492 ;;  index           1    wreg     unsigned char 
 22493 ;;  dado            2    6[BANK0 ] PTR unsigned char 
 22494 ;;		 -> rawDate(7), rawLongitude(13), rawLatitude(13), rawTime(11), 
 22495 ;; Auto vars:     Size  Location     Type
 22496 ;;  index           1    8[BANK0 ] unsigned char 
 22497 ;;  i               1   10[BANK0 ] unsigned char 
 22498 ;;  size            1    9[BANK0 ] unsigned char 
 22499 ;; Return value:  Size  Location     Type
 22500 ;;                  1    wreg      void 
 22501 ;; Registers used:
 22502 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22503 ;; Tracked objects:
 22504 ;;		On entry : 0/0
 22505 ;;		On exit  : 0/0
 22506 ;;		Unchanged: 0/0
 22507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22508 ;;      Params:         0       2       0       0       0       0       0       0       0
 22509 ;;      Locals:         0       3       0       0       0       0       0       0       0
 22510 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22511 ;;      Totals:         0       5       0       0       0       0       0       0       0
 22512 ;;Total ram usage:        5 bytes
 22513 ;; Hardware stack levels used:    1
 22514 ;; Hardware stack levels required when called:    4
 22515 ;; This function calls:
 22516 ;;		_strlen
 22517 ;; This function is called by:
 22518 ;;		_dados_gps_to_sd
 22519 ;; This function uses a non-reentrant model
 22520 ;;
 22521                           
 22522                           	psect	text87
 22523  003D8C                     __ptext87:
 22524                           	opt stack 0
 22525  003D8C                     _monta_sd:
 22526                           	opt stack 25
 22527                           
 22528                           ;incstack = 0
 22529                           ;monta_sd@index stored from wreg
 22530  003D8C  0100               	movlb	0	; () banked
 22531  003D8E  6F68               	movwf	monta_sd@index& (0+255),b
 22532                           
 22533                           ;SDCard.c: 288: unsigned char i, size;
 22534                           ;SDCard.c: 289: size = strlen(dado);
 22535  003D90  C066  F060         	movff	monta_sd@dado,strlen@s
 22536  003D94  C067  F061         	movff	monta_sd@dado+1,strlen@s+1
 22537  003D98  ECEF  F029         	call	_strlen	;wreg free
 22538  003D9C  0100               	movlb	0	; () banked
 22539  003D9E  5160               	movf	?_strlen& (0+255),w,b
 22540  003DA0  6F69               	movwf	monta_sd@size& (0+255),b
 22541                           
 22542                           ;SDCard.c: 290: switch(index)
 22543  003DA2  D07C               	goto	l429
 22544  003DA4                     
 22545                           ; BSR set to: 0
 22546                           ;SDCard.c: 293: for(i=0; i<6;i++)
 22547                           
 22548                           ; BSR set to: 0
 22549  003DA4  0E00               	movlw	0
 22550  003DA6  6F6A               	movwf	monta_sd@i& (0+255),b
 22551  003DA8                     l12136:
 22552                           
 22553                           ; BSR set to: 0
 22554  003DA8  0E05               	movlw	5
 22555  003DAA  656A               	cpfsgt	monta_sd@i& (0+255),b
 22556  003DAC  D001               	goto	l431
 22557  003DAE  0012               	return	
 22558  003DB0                     l431:
 22559                           
 22560                           ; BSR set to: 0
 22561                           ;SDCard.c: 294: {
 22562                           ;SDCard.c: 295: string_dado.hora[i] = *dado;
 22563                           
 22564                           ; BSR set to: 0
 22565  003DB0  C066  FFD9         	movff	monta_sd@dado,fsr2l
 22566  003DB4  C067  FFDA         	movff	monta_sd@dado+1,fsr2h
 22567  003DB8  516A               	movf	monta_sd@i& (0+255),w,b
 22568  003DBA  0D01               	mullw	1
 22569  003DBC  0E0F               	movlw	low (_string_dado+7)
 22570  003DBE  24F3               	addwf	prodl,w,c
 22571  003DC0  6EE1               	movwf	fsr1l,c
 22572  003DC2  0E01               	movlw	high (_string_dado+7)
 22573  003DC4  20F4               	addwfc	prodh,w,c
 22574  003DC6  6EE2               	movwf	fsr1h,c
 22575  003DC8  CFDF FFE7          	movff	indf2,indf1
 22576                           
 22577                           ; BSR set to: 0
 22578                           ;SDCard.c: 296: dado++;
 22579  003DCC  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 22580  003DCE  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 22581                           
 22582                           ; BSR set to: 0
 22583  003DD0  2B6A               	incf	monta_sd@i& (0+255),f,b
 22584  003DD2  D7EA               	goto	l12136
 22585  003DD4                     
 22586                           ; BSR set to: 0
 22587                           ;SDCard.c: 301: for(i=0; i<6;i++)
 22588                           
 22589                           ; BSR set to: 0
 22590  003DD4  0E00               	movlw	0
 22591  003DD6  6F6A               	movwf	monta_sd@i& (0+255),b
 22592  003DD8                     l12150:
 22593                           
 22594                           ; BSR set to: 0
 22595  003DD8  0E05               	movlw	5
 22596  003DDA  656A               	cpfsgt	monta_sd@i& (0+255),b
 22597  003DDC  D001               	goto	l435
 22598  003DDE  D012               	goto	u16580
 22599  003DE0                     l435:
 22600                           
 22601                           ; BSR set to: 0
 22602                           ;SDCard.c: 302: {
 22603                           ;SDCard.c: 303: string_dado.data[i] = *dado;
 22604                           
 22605                           ; BSR set to: 0
 22606  003DE0  C066  FFD9         	movff	monta_sd@dado,fsr2l
 22607  003DE4  C067  FFDA         	movff	monta_sd@dado+1,fsr2h
 22608  003DE8  516A               	movf	monta_sd@i& (0+255),w,b
 22609  003DEA  0D01               	mullw	1
 22610  003DEC  0E08               	movlw	low _string_dado
 22611  003DEE  24F3               	addwf	prodl,w,c
 22612  003DF0  6EE1               	movwf	fsr1l,c
 22613  003DF2  0E01               	movlw	high _string_dado
 22614  003DF4  20F4               	addwfc	prodh,w,c
 22615  003DF6  6EE2               	movwf	fsr1h,c
 22616  003DF8  CFDF FFE7          	movff	indf2,indf1
 22617                           
 22618                           ; BSR set to: 0
 22619                           ;SDCard.c: 304: dado++;
 22620  003DFC  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 22621  003DFE  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 22622                           
 22623                           ; BSR set to: 0
 22624  003E00  2B6A               	incf	monta_sd@i& (0+255),f,b
 22625  003E02  D7EA               	goto	l12150
 22626  003E04                     u16580:
 22627                           
 22628                           ; BSR set to: 0
 22629                           ;SDCard.c: 307: {
 22630                           ;SDCard.c: 308: data_hoje = 1;
 22631                           
 22632                           ; BSR set to: 0
 22633                           
 22634                           ;SDCard.c: 305: }
 22635                           ;SDCard.c: 306: if(string_dado.data)
 22636  003E04  0E01               	movlw	1
 22637  003E06  6E36               	movwf	_data_hoje,c
 22638                           
 22639                           ; BSR set to: 0
 22640                           ;SDCard.c: 311: }
 22641                           ;SDCard.c: 312: break;
 22642  003E08  0012               	return	
 22643  003E0A                     
 22644                           ; BSR set to: 0
 22645                           ;SDCard.c: 315: for(i=0; i<13;i++)
 22646                           
 22647                           ; BSR set to: 0
 22648  003E0A  0E00               	movlw	0
 22649  003E0C  6F6A               	movwf	monta_sd@i& (0+255),b
 22650  003E0E                     l12166:
 22651                           
 22652                           ; BSR set to: 0
 22653  003E0E  0E0C               	movlw	12
 22654  003E10  656A               	cpfsgt	monta_sd@i& (0+255),b
 22655  003E12  D001               	goto	l439
 22656  003E14  0012               	return	
 22657  003E16                     l439:
 22658                           
 22659                           ; BSR set to: 0
 22660                           ;SDCard.c: 316: {
 22661                           ;SDCard.c: 317: string_dado.LAT[i] = *dado;
 22662                           
 22663                           ; BSR set to: 0
 22664  003E16  C066  FFD9         	movff	monta_sd@dado,fsr2l
 22665  003E1A  C067  FFDA         	movff	monta_sd@dado+1,fsr2h
 22666  003E1E  516A               	movf	monta_sd@i& (0+255),w,b
 22667  003E20  0D01               	mullw	1
 22668  003E22  0E1A               	movlw	low (_string_dado+18)
 22669  003E24  24F3               	addwf	prodl,w,c
 22670  003E26  6EE1               	movwf	fsr1l,c
 22671  003E28  0E01               	movlw	high (_string_dado+18)
 22672  003E2A  20F4               	addwfc	prodh,w,c
 22673  003E2C  6EE2               	movwf	fsr1h,c
 22674  003E2E  CFDF FFE7          	movff	indf2,indf1
 22675                           
 22676                           ; BSR set to: 0
 22677                           ;SDCard.c: 318: dado++;
 22678  003E32  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 22679  003E34  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 22680                           
 22681                           ; BSR set to: 0
 22682  003E36  2B6A               	incf	monta_sd@i& (0+255),f,b
 22683  003E38  D7EA               	goto	l12166
 22684  003E3A                     
 22685                           ; BSR set to: 0
 22686                           ;SDCard.c: 324: for(i=0; i<13;i++)
 22687                           
 22688                           ; BSR set to: 0
 22689  003E3A  0E00               	movlw	0
 22690  003E3C  6F6A               	movwf	monta_sd@i& (0+255),b
 22691  003E3E                     l12180:
 22692                           
 22693                           ; BSR set to: 0
 22694  003E3E  0E0C               	movlw	12
 22695  003E40  656A               	cpfsgt	monta_sd@i& (0+255),b
 22696  003E42  D001               	goto	l442
 22697  003E44  0012               	return	
 22698  003E46                     l442:
 22699                           
 22700                           ; BSR set to: 0
 22701                           ;SDCard.c: 325: {
 22702                           ;SDCard.c: 326: string_dado.LONG[i] = *dado;
 22703                           
 22704                           ; BSR set to: 0
 22705  003E46  C066  FFD9         	movff	monta_sd@dado,fsr2l
 22706  003E4A  C067  FFDA         	movff	monta_sd@dado+1,fsr2h
 22707  003E4E  516A               	movf	monta_sd@i& (0+255),w,b
 22708  003E50  0D01               	mullw	1
 22709  003E52  0E27               	movlw	low (_string_dado+31)
 22710  003E54  24F3               	addwf	prodl,w,c
 22711  003E56  6EE1               	movwf	fsr1l,c
 22712  003E58  0E01               	movlw	high (_string_dado+31)
 22713  003E5A  20F4               	addwfc	prodh,w,c
 22714  003E5C  6EE2               	movwf	fsr1h,c
 22715  003E5E  CFDF FFE7          	movff	indf2,indf1
 22716                           
 22717                           ; BSR set to: 0
 22718                           ;SDCard.c: 327: dado++;
 22719  003E62  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 22720  003E64  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 22721                           
 22722                           ; BSR set to: 0
 22723  003E66  2B6A               	incf	monta_sd@i& (0+255),f,b
 22724  003E68  D7EA               	goto	l12180
 22725  003E6A                     
 22726                           ; BSR set to: 0
 22727                           ;SDCard.c: 333: for(i=0; i<size;i++)
 22728                           
 22729                           ; BSR set to: 0
 22730  003E6A  0E00               	movlw	0
 22731  003E6C  6F6A               	movwf	monta_sd@i& (0+255),b
 22732  003E6E  D011               	goto	l445
 22733  003E70                     
 22734                           ; BSR set to: 0
 22735                           ;SDCard.c: 334: {
 22736                           ;SDCard.c: 335: string_dado.LONG[i] = *dado;
 22737                           
 22738                           ; BSR set to: 0
 22739  003E70  C066  FFD9         	movff	monta_sd@dado,fsr2l
 22740  003E74  C067  FFDA         	movff	monta_sd@dado+1,fsr2h
 22741  003E78  516A               	movf	monta_sd@i& (0+255),w,b
 22742  003E7A  0D01               	mullw	1
 22743  003E7C  0E27               	movlw	low (_string_dado+31)
 22744  003E7E  24F3               	addwf	prodl,w,c
 22745  003E80  6EE1               	movwf	fsr1l,c
 22746  003E82  0E01               	movlw	high (_string_dado+31)
 22747  003E84  20F4               	addwfc	prodh,w,c
 22748  003E86  6EE2               	movwf	fsr1h,c
 22749  003E88  CFDF FFE7          	movff	indf2,indf1
 22750                           
 22751                           ; BSR set to: 0
 22752                           ;SDCard.c: 336: dado++;
 22753  003E8C  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 22754  003E8E  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 22755                           
 22756                           ; BSR set to: 0
 22757  003E90  2B6A               	incf	monta_sd@i& (0+255),f,b
 22758  003E92                     l445:
 22759                           
 22760                           ; BSR set to: 0
 22761                           
 22762                           ; BSR set to: 0
 22763  003E92  5169               	movf	monta_sd@size& (0+255),w,b
 22764  003E94  5D6A               	subwf	monta_sd@i& (0+255),w,b
 22765  003E96  B0D8               	btfsc	status,0,c
 22766  003E98  0012               	return	
 22767  003E9A  D7EA               	goto	l446
 22768  003E9C                     l429:
 22769                           
 22770                           ; BSR set to: 0
 22771                           
 22772                           ; BSR set to: 0
 22773  003E9C  5168               	movf	monta_sd@index& (0+255),w,b
 22774                           
 22775                           ; Switch size 1, requested type "space"
 22776                           ; Number of cases is 5, Range of values is 0 to 4
 22777                           ; switch strategies available:
 22778                           ; Name         Instructions Cycles
 22779                           ; simple_byte           16     9 (average)
 22780                           ;	Chosen strategy is simple_byte
 22781  003E9E  0A00               	xorlw	0	; case 0
 22782  003EA0  B4D8               	btfsc	status,2,c
 22783  003EA2  D780               	goto	l430
 22784  003EA4  0A01               	xorlw	1	; case 1
 22785  003EA6  B4D8               	btfsc	status,2,c
 22786  003EA8  D795               	goto	l434
 22787  003EAA  0A03               	xorlw	3	; case 2
 22788  003EAC  B4D8               	btfsc	status,2,c
 22789  003EAE  D7AD               	goto	l438
 22790  003EB0  0A01               	xorlw	1	; case 3
 22791  003EB2  B4D8               	btfsc	status,2,c
 22792  003EB4  D7C2               	goto	l441
 22793  003EB6  0A07               	xorlw	7	; case 4
 22794  003EB8  A4D8               	btfss	status,2,c
 22795  003EBA  0012               	return	
 22796  003EBC  D7D6               	goto	l444
 22797  003EBE                     __end_of_monta_sd:
 22798                           	opt stack 0
 22799                           tosu	equ	0xFFF
 22800                           tosh	equ	0xFFE
 22801                           tosl	equ	0xFFD
 22802                           pclath	equ	0xFFA
 22803                           tblptru	equ	0xFF8
 22804                           tblptrh	equ	0xFF7
 22805                           tblptrl	equ	0xFF6
 22806                           tablat	equ	0xFF5
 22807                           prodh	equ	0xFF4
 22808                           prodl	equ	0xFF3
 22809                           intcon	equ	0xFF2
 22810                           intcon2	equ	0xFF1
 22811                           intcon3	equ	0xFF0
 22812                           indf0	equ	0xFEF
 22813                           postinc0	equ	0xFEE
 22814                           fsr0h	equ	0xFEA
 22815                           fsr0l	equ	0xFE9
 22816                           wreg	equ	0xFE8
 22817                           indf1	equ	0xFE7
 22818                           postinc1	equ	0xFE6
 22819                           postdec1	equ	0xFE5
 22820                           plusw1	equ	0xFE3
 22821                           fsr1h	equ	0xFE2
 22822                           fsr1l	equ	0xFE1
 22823                           indf2	equ	0xFDF
 22824                           postinc2	equ	0xFDE
 22825                           postdec2	equ	0xFDD
 22826                           plusw2	equ	0xFDB
 22827                           fsr2h	equ	0xFDA
 22828                           fsr2l	equ	0xFD9
 22829                           status	equ	0xFD8
 22830                           
 22831 ;; *************** function _strlen *****************
 22832 ;; Defined at:
 22833 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
 22834 ;; Parameters:    Size  Location     Type
 22835 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 22836 ;;		 -> rawDate(7), rawLongitude(13), rawLatitude(13), rawTime(11), 
 22837 ;; Auto vars:     Size  Location     Type
 22838 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
 22839 ;;		 -> rawDate(7), rawLongitude(13), rawLatitude(13), rawTime(11), 
 22840 ;; Return value:  Size  Location     Type
 22841 ;;                  2    0[BANK0 ] unsigned int 
 22842 ;; Registers used:
 22843 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 22844 ;; Tracked objects:
 22845 ;;		On entry : 0/0
 22846 ;;		On exit  : 0/0
 22847 ;;		Unchanged: 0/0
 22848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22849 ;;      Params:         0       2       0       0       0       0       0       0       0
 22850 ;;      Locals:         0       2       0       0       0       0       0       0       0
 22851 ;;      Temps:          0       2       0       0       0       0       0       0       0
 22852 ;;      Totals:         0       6       0       0       0       0       0       0       0
 22853 ;;Total ram usage:        6 bytes
 22854 ;; Hardware stack levels used:    1
 22855 ;; Hardware stack levels required when called:    3
 22856 ;; This function calls:
 22857 ;;		Nothing
 22858 ;; This function is called by:
 22859 ;;		_monta_sd
 22860 ;; This function uses a non-reentrant model
 22861 ;;
 22862                           
 22863                           	psect	text88
 22864  0053DE                     __ptext88:
 22865                           	opt stack 0
 22866  0053DE                     _strlen:
 22867                           	opt stack 25
 22868                           
 22869                           ; BSR set to: 0
 22870                           ;incstack = 0
 22871  0053DE  C060  F064         	movff	strlen@s,strlen@cp
 22872  0053E2  C061  F065         	movff	strlen@s+1,strlen@cp+1
 22873  0053E6  D003               	goto	l2104
 22874  0053E8  0100               	movlb	0	; () banked
 22875  0053EA  4B64               	infsnz	strlen@cp& (0+255),f,b
 22876  0053EC  2B65               	incf	(strlen@cp+1)& (0+255),f,b
 22877  0053EE                     l2104:
 22878                           
 22879                           ; BSR set to: 0
 22880  0053EE  C064  FFD9         	movff	strlen@cp,fsr2l
 22881  0053F2  C065  FFDA         	movff	strlen@cp+1,fsr2h
 22882  0053F6  50DF               	movf	indf2,w,c
 22883  0053F8  A4D8               	btfss	status,2,c
 22884  0053FA  D7F6               	goto	l2105
 22885  0053FC  C060  F062         	movff	strlen@s,??_strlen
 22886  005400  C061  F063         	movff	strlen@s+1,??_strlen+1
 22887  005404  0100               	movlb	0	; () banked
 22888  005406  1F62               	comf	??_strlen& (0+255),f,b
 22889  005408  1F63               	comf	(??_strlen+1)& (0+255),f,b
 22890  00540A  4B62               	infsnz	??_strlen& (0+255),f,b
 22891  00540C  2B63               	incf	(??_strlen+1)& (0+255),f,b
 22892  00540E  5164               	movf	strlen@cp& (0+255),w,b
 22893  005410  2562               	addwf	??_strlen& (0+255),w,b
 22894  005412  6F60               	movwf	?_strlen& (0+255),b
 22895  005414  5165               	movf	(strlen@cp+1)& (0+255),w,b
 22896  005416  2163               	addwfc	(??_strlen+1)& (0+255),w,b
 22897  005418  6F61               	movwf	(?_strlen+1)& (0+255),b
 22898  00541A  0012               	return	
 22899  00541C                     __end_of_strlen:
 22900                           	opt stack 0
 22901                           tosu	equ	0xFFF
 22902                           tosh	equ	0xFFE
 22903                           tosl	equ	0xFFD
 22904                           pclath	equ	0xFFA
 22905                           tblptru	equ	0xFF8
 22906                           tblptrh	equ	0xFF7
 22907                           tblptrl	equ	0xFF6
 22908                           tablat	equ	0xFF5
 22909                           prodh	equ	0xFF4
 22910                           prodl	equ	0xFF3
 22911                           intcon	equ	0xFF2
 22912                           intcon2	equ	0xFF1
 22913                           intcon3	equ	0xFF0
 22914                           indf0	equ	0xFEF
 22915                           postinc0	equ	0xFEE
 22916                           fsr0h	equ	0xFEA
 22917                           fsr0l	equ	0xFE9
 22918                           wreg	equ	0xFE8
 22919                           indf1	equ	0xFE7
 22920                           postinc1	equ	0xFE6
 22921                           postdec1	equ	0xFE5
 22922                           plusw1	equ	0xFE3
 22923                           fsr1h	equ	0xFE2
 22924                           fsr1l	equ	0xFE1
 22925                           indf2	equ	0xFDF
 22926                           postinc2	equ	0xFDE
 22927                           postdec2	equ	0xFDD
 22928                           plusw2	equ	0xFDB
 22929                           fsr2h	equ	0xFDA
 22930                           fsr2l	equ	0xFD9
 22931                           status	equ	0xFD8
 22932                           
 22933 ;; *************** function _isr *****************
 22934 ;; Defined at:
 22935 ;;		line 102 in file "main.c"
 22936 ;; Parameters:    Size  Location     Type
 22937 ;;		None
 22938 ;; Auto vars:     Size  Location     Type
 22939 ;;  cont            1   31[COMRAM] unsigned char 
 22940 ;; Return value:  Size  Location     Type
 22941 ;;                  1    wreg      void 
 22942 ;; Registers used:
 22943 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22944 ;; Tracked objects:
 22945 ;;		On entry : 0/0
 22946 ;;		On exit  : 0/0
 22947 ;;		Unchanged: 0/0
 22948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22949 ;;      Params:         0       0       0       0       0       0       0       0       0
 22950 ;;      Locals:         1       0       0       0       0       0       0       0       0
 22951 ;;      Temps:         20       0       0       0       0       0       0       0       0
 22952 ;;      Totals:        21       0       0       0       0       0       0       0       0
 22953 ;;Total ram usage:       21 bytes
 22954 ;; Hardware stack levels used:    1
 22955 ;; Hardware stack levels required when called:    2
 22956 ;; This function calls:
 22957 ;;		_GPSRead
 22958 ;;		_recebe_dado_uart
 22959 ;;		i2_write_timer_zero
 22960 ;; This function is called by:
 22961 ;;		Interrupt level 2
 22962 ;; This function uses a non-reentrant model
 22963 ;;
 22964                           
 22965                           	psect	intcode
 22966  000008                     __pintcode:
 22967                           	opt stack 0
 22968  000008                     _isr:
 22969                           	opt stack 13
 22970                           
 22971                           ; BSR set to: 0
 22972                           ;incstack = 0
 22973  000008  8240               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 22974  00000A  EDE3  F01C         	call	int_func,f	;refresh shadow registers
 22975                           tosu	equ	0xFFF
 22976                           tosh	equ	0xFFE
 22977                           tosl	equ	0xFFD
 22978                           pclath	equ	0xFFA
 22979                           tblptru	equ	0xFF8
 22980                           tblptrh	equ	0xFF7
 22981                           tblptrl	equ	0xFF6
 22982                           tablat	equ	0xFF5
 22983                           prodh	equ	0xFF4
 22984                           prodl	equ	0xFF3
 22985                           intcon	equ	0xFF2
 22986                           intcon2	equ	0xFF1
 22987                           intcon3	equ	0xFF0
 22988                           indf0	equ	0xFEF
 22989                           postinc0	equ	0xFEE
 22990                           fsr0h	equ	0xFEA
 22991                           fsr0l	equ	0xFE9
 22992                           wreg	equ	0xFE8
 22993                           indf1	equ	0xFE7
 22994                           postinc1	equ	0xFE6
 22995                           postdec1	equ	0xFE5
 22996                           plusw1	equ	0xFE3
 22997                           fsr1h	equ	0xFE2
 22998                           fsr1l	equ	0xFE1
 22999                           indf2	equ	0xFDF
 23000                           postinc2	equ	0xFDE
 23001                           postdec2	equ	0xFDD
 23002                           plusw2	equ	0xFDB
 23003                           fsr2h	equ	0xFDA
 23004                           fsr2l	equ	0xFD9
 23005                           status	equ	0xFD8
 23006                           
 23007                           	psect	intcode_body
 23008  0039C6                     __pintcode_body:
 23009                           	opt stack 13
 23010  0039C6                     int_func:
 23011                           	opt stack 13
 23012  0039C6  0006               	pop		; remove dummy address from shadow register refresh
 23013  0039C8  CFFA F00E          	movff	pclath,??_isr+2
 23014  0039CC  CFFB F00F          	movff	pclatu,??_isr+3
 23015  0039D0  CFE9 F010          	movff	fsr0l,??_isr+4
 23016  0039D4  CFEA F011          	movff	fsr0h,??_isr+5
 23017  0039D8  CFE1 F012          	movff	fsr1l,??_isr+6
 23018  0039DC  CFE2 F013          	movff	fsr1h,??_isr+7
 23019  0039E0  CFD9 F014          	movff	fsr2l,??_isr+8
 23020  0039E4  CFDA F015          	movff	fsr2h,??_isr+9
 23021  0039E8  CFF3 F016          	movff	prodl,??_isr+10
 23022  0039EC  CFF4 F017          	movff	prodh,??_isr+11
 23023  0039F0  CFF6 F018          	movff	tblptrl,??_isr+12
 23024  0039F4  CFF7 F019          	movff	tblptrh,??_isr+13
 23025  0039F8  CFF8 F01A          	movff	tblptru,??_isr+14
 23026  0039FC  CFF5 F01B          	movff	tablat,??_isr+15
 23027  003A00  C040  F01C         	movff	btemp,??_isr+16
 23028  003A04  C041  F01D         	movff	btemp+1,??_isr+17
 23029  003A08  C042  F01E         	movff	btemp+2,??_isr+18
 23030  003A0C  C043  F01F         	movff	btemp+3,??_isr+19
 23031                           
 23032                           ;main.c: 104: unsigned char cont;
 23033                           ;main.c: 107: if (PIE1bits.RCIE && PIR1bits.RCIF)
 23034  003A10  BA9D               	btfsc	3997,5,c	;volatile
 23035  003A12  AA9E               	btfss	3998,5,c	;volatile
 23036  003A14  D014               	goto	i2l91
 23037                           
 23038                           ;main.c: 108: {
 23039                           ;main.c: 109: PIR1bits.RCIF = 0;
 23040  003A16  9A9E               	bcf	3998,5,c	;volatile
 23041                           
 23042                           ;main.c: 110: data_uart_recebe = recebe_dado_uart();
 23043  003A18  EC7D  F02B         	call	_recebe_dado_uart	;wreg free
 23044  003A1C  6E3E               	movwf	_data_uart_recebe,c
 23045                           
 23046                           ;main.c: 111: GPSRead(data_uart_recebe);
 23047  003A1E  503E               	movf	_data_uart_recebe,w,c
 23048  003A20  EC46  F014         	call	_GPSRead
 23049                           
 23050                           ;main.c: 112: PORTBbits.RB2 = !PORTBbits.RB2;
 23051  003A24  B481               	btfsc	3969,2,c	;volatile
 23052  003A26  D003               	goto	i2u1690_40
 23053  003A28  6A0C               	clrf	??_isr& (0+255),c
 23054  003A2A  2A0C               	incf	??_isr& (0+255),f,c
 23055  003A2C  D001               	goto	i2u1691_48
 23056  003A2E                     i2u1690_40:
 23057  003A2E  6A0C               	clrf	??_isr& (0+255),c
 23058  003A30                     i2u1691_48:
 23059  003A30  460C               	rlncf	??_isr,f,c
 23060  003A32  460C               	rlncf	??_isr,f,c
 23061  003A34  5081               	movf	3969,w,c	;volatile
 23062  003A36  180C               	xorwf	??_isr,w,c
 23063  003A38  0BFB               	andlw	-5
 23064  003A3A  180C               	xorwf	??_isr,w,c
 23065  003A3C  6E81               	movwf	3969,c	;volatile
 23066  003A3E                     i2l91:
 23067                           
 23068                           ;main.c: 113: }
 23069                           ;main.c: 116: unsigned char cont;
 23070                           ;main.c: 118: if (TMR0IF && T0IF)
 23071  003A3E  B4F2               	btfsc	intcon,2,c	;volatile
 23072  003A40  A4F2               	btfss	intcon,2,c	;volatile
 23073  003A42  D03E               	goto	i2l92
 23074                           
 23075                           ;main.c: 119: {
 23076                           ;main.c: 120: INTCONbits.TMR0IF = 0;
 23077  003A44  94F2               	bcf	intcon,2,c	;volatile
 23078                           
 23079                           ;main.c: 121: sinaliza_int_timer = 1;
 23080  003A46  0E01               	movlw	1
 23081  003A48  0100               	movlb	0	; () banked
 23082  003A4A  6FFC               	movwf	_sinaliza_int_timer& (0+255),b
 23083                           
 23084                           ;main.c: 123: for(cont= 0; cont<4;cont++)
 23085  003A4C  0E00               	movlw	0
 23086  003A4E  6E20               	movwf	isr@cont,c
 23087  003A50                     i2l12452:
 23088                           
 23089                           ; BSR set to: 0
 23090  003A50  0E03               	movlw	3
 23091  003A52  6420               	cpfsgt	isr@cont,c
 23092  003A54  D001               	goto	i2l93
 23093  003A56  D020               	goto	i2u1697_40
 23094  003A58                     i2l93:
 23095                           
 23096                           ;main.c: 124: {
 23097                           ;main.c: 125: if(tempo_tarefa[cont]>0) tempo_tarefa[cont]--;
 23098                           
 23099                           ; BSR set to: 0
 23100  003A58  5020               	movf	isr@cont,w,c
 23101  003A5A  0D02               	mullw	2
 23102  003A5C  0E21               	movlw	low _tempo_tarefa
 23103  003A5E  24F3               	addwf	prodl,w,c
 23104  003A60  6ED9               	movwf	fsr2l,c
 23105  003A62  0E00               	movlw	high _tempo_tarefa
 23106  003A64  20F4               	addwfc	prodh,w,c
 23107  003A66  6EDA               	movwf	fsr2h,c
 23108  003A68  50DE               	movf	postinc2,w,c
 23109  003A6A  10DE               	iorwf	postinc2,w,c
 23110  003A6C  B4D8               	btfsc	status,2,c
 23111  003A6E  D00B               	goto	i2l95
 23112  003A70  5020               	movf	isr@cont,w,c
 23113  003A72  0D02               	mullw	2
 23114  003A74  0E21               	movlw	low _tempo_tarefa
 23115  003A76  24F3               	addwf	prodl,w,c
 23116  003A78  6ED9               	movwf	fsr2l,c
 23117  003A7A  0E00               	movlw	high _tempo_tarefa
 23118  003A7C  20F4               	addwfc	prodh,w,c
 23119  003A7E  6EDA               	movwf	fsr2h,c
 23120  003A80  06DE               	decf	postinc2,f,c
 23121  003A82  0E00               	movlw	0
 23122  003A84  5ADD               	subwfb	postdec2,f,c
 23123  003A86                     i2l95:
 23124                           
 23125                           ;main.c: 126: if(time_sd > 0) time_sd--;
 23126  003A86  502F               	movf	_time_sd,w,c
 23127  003A88  1030               	iorwf	_time_sd+1,w,c
 23128  003A8A  B4D8               	btfsc	status,2,c
 23129  003A8C  D003               	goto	i2l96
 23130  003A8E  062F               	decf	_time_sd,f,c
 23131  003A90  A0D8               	btfss	status,0,c
 23132  003A92  0630               	decf	_time_sd+1,f,c
 23133  003A94                     i2l96:
 23134  003A94  2A20               	incf	isr@cont,f,c
 23135  003A96  D7DC               	goto	i2l12452
 23136  003A98                     i2u1697_40:
 23137                           
 23138                           ;main.c: 127: }
 23139                           ;main.c: 129: if(tarefa_em_execucao == 1)
 23140  003A98  043D               	decf	_tarefa_em_execucao,w,c	;volatile
 23141  003A9A  A4D8               	btfss	status,2,c
 23142  003A9C  D00B               	goto	i2l98
 23143                           
 23144                           ;main.c: 130: {
 23145                           ;main.c: 131: timeout_tarefa--;
 23146  003A9E  0631               	decf	_timeout_tarefa,f,c
 23147  003AA0  A0D8               	btfss	status,0,c
 23148  003AA2  0632               	decf	_timeout_tarefa+1,f,c
 23149                           
 23150                           ;main.c: 132: if(!timeout_tarefa)
 23151  003AA4  5031               	movf	_timeout_tarefa,w,c
 23152  003AA6  1032               	iorwf	_timeout_tarefa+1,w,c
 23153  003AA8  A4D8               	btfss	status,2,c
 23154  003AAA  D004               	goto	i2l98
 23155                           
 23156                           ;main.c: 133: {
 23157                           ;main.c: 135: PCLATH = 0;
 23158  003AAC  0E00               	movlw	0
 23159  003AAE  6EFA               	movwf	pclath,c	;volatile
 23160                           
 23161                           ;main.c: 136: PCL = 0;
 23162  003AB0  0E00               	movlw	0
 23163  003AB2  6EF9               	movwf	pcl,c	;volatile
 23164  003AB4                     i2l98:
 23165                           
 23166                           ;main.c: 137: }
 23167                           ;main.c: 138: }
 23168                           ;main.c: 141: write_timer_zero(0x0083);
 23169  003AB4  0E00               	movlw	0
 23170  003AB6  6E02               	movwf	i2write_timer_zero@timer0+1,c
 23171  003AB8  0E83               	movlw	131
 23172  003ABA  6E01               	movwf	i2write_timer_zero@timer0,c
 23173  003ABC  EC74  F02B         	call	i2_write_timer_zero	;wreg free
 23174  003AC0                     i2l92:
 23175                           
 23176                           ;main.c: 143: }
 23177                           ;main.c: 145: if (INT0IF && INT0IE)
 23178  003AC0  B2F2               	btfsc	intcon,1,c	;volatile
 23179  003AC2  A8F2               	btfss	intcon,4,c	;volatile
 23180  003AC4  D001               	goto	i2l99
 23181                           
 23182                           ;main.c: 146: {
 23183                           ;main.c: 147: INT0IF = 0;
 23184  003AC6  92F2               	bcf	intcon,1,c	;volatile
 23185  003AC8                     i2l99:
 23186  003AC8  C01F  F043         	movff	??_isr+19,btemp+3
 23187  003ACC  C01E  F042         	movff	??_isr+18,btemp+2
 23188  003AD0  C01D  F041         	movff	??_isr+17,btemp+1
 23189  003AD4  C01C  F040         	movff	??_isr+16,btemp
 23190  003AD8  C01B  FFF5         	movff	??_isr+15,tablat
 23191  003ADC  C01A  FFF8         	movff	??_isr+14,tblptru
 23192  003AE0  C019  FFF7         	movff	??_isr+13,tblptrh
 23193  003AE4  C018  FFF6         	movff	??_isr+12,tblptrl
 23194  003AE8  C017  FFF4         	movff	??_isr+11,prodh
 23195  003AEC  C016  FFF3         	movff	??_isr+10,prodl
 23196  003AF0  C015  FFDA         	movff	??_isr+9,fsr2h
 23197  003AF4  C014  FFD9         	movff	??_isr+8,fsr2l
 23198  003AF8  C013  FFE2         	movff	??_isr+7,fsr1h
 23199  003AFC  C012  FFE1         	movff	??_isr+6,fsr1l
 23200  003B00  C011  FFEA         	movff	??_isr+5,fsr0h
 23201  003B04  C010  FFE9         	movff	??_isr+4,fsr0l
 23202  003B08  C00F  FFFB         	movff	??_isr+3,pclatu
 23203  003B0C  C00E  FFFA         	movff	??_isr+2,pclath
 23204  003B10  9240               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 23205  003B12  0011               	retfie		f
 23206  003B14                     __end_of_isr:
 23207                           	opt stack 0
 23208                           tosu	equ	0xFFF
 23209                           tosh	equ	0xFFE
 23210                           tosl	equ	0xFFD
 23211                           pclatu	equ	0xFFB
 23212                           pclath	equ	0xFFA
 23213                           pcl	equ	0xFF9
 23214                           tblptru	equ	0xFF8
 23215                           tblptrh	equ	0xFF7
 23216                           tblptrl	equ	0xFF6
 23217                           tablat	equ	0xFF5
 23218                           prodh	equ	0xFF4
 23219                           prodl	equ	0xFF3
 23220                           intcon	equ	0xFF2
 23221                           intcon2	equ	0xFF1
 23222                           intcon3	equ	0xFF0
 23223                           indf0	equ	0xFEF
 23224                           postinc0	equ	0xFEE
 23225                           fsr0h	equ	0xFEA
 23226                           fsr0l	equ	0xFE9
 23227                           wreg	equ	0xFE8
 23228                           indf1	equ	0xFE7
 23229                           postinc1	equ	0xFE6
 23230                           postdec1	equ	0xFE5
 23231                           plusw1	equ	0xFE3
 23232                           fsr1h	equ	0xFE2
 23233                           fsr1l	equ	0xFE1
 23234                           indf2	equ	0xFDF
 23235                           postinc2	equ	0xFDE
 23236                           postdec2	equ	0xFDD
 23237                           plusw2	equ	0xFDB
 23238                           fsr2h	equ	0xFDA
 23239                           fsr2l	equ	0xFD9
 23240                           status	equ	0xFD8
 23241                           
 23242 ;; *************** function i2_write_timer_zero *****************
 23243 ;; Defined at:
 23244 ;;		line 138 in file "bibliotecas/hardware.c"
 23245 ;; Parameters:    Size  Location     Type
 23246 ;;  timer0          2    0[COMRAM] unsigned int 
 23247 ;; Auto vars:     Size  Location     Type
 23248 ;;  write_timer_    2    2[COMRAM] struct Timers
 23249 ;; Return value:  Size  Location     Type
 23250 ;;                  1    wreg      void 
 23251 ;; Registers used:
 23252 ;;		None
 23253 ;; Tracked objects:
 23254 ;;		On entry : 0/0
 23255 ;;		On exit  : 0/0
 23256 ;;		Unchanged: 0/0
 23257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23258 ;;      Params:         2       0       0       0       0       0       0       0       0
 23259 ;;      Locals:         2       0       0       0       0       0       0       0       0
 23260 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23261 ;;      Totals:         4       0       0       0       0       0       0       0       0
 23262 ;;Total ram usage:        4 bytes
 23263 ;; Hardware stack levels used:    1
 23264 ;; This function calls:
 23265 ;;		Nothing
 23266 ;; This function is called by:
 23267 ;;		_isr
 23268 ;; This function uses a non-reentrant model
 23269 ;;
 23270                           
 23271                           	psect	text90
 23272  0056E8                     __ptext90:
 23273                           	opt stack 0
 23274  0056E8                     i2_write_timer_zero:
 23275                           	opt stack 14
 23276                           
 23277                           ;hardware.c: 140: union Timers timer;
 23278                           ;hardware.c: 142: timer.lt = timer0;
 23279                           
 23280                           ;incstack = 0
 23281  0056E8  C001  F003         	movff	i2write_timer_zero@timer0,i2write_timer_zero@timer
 23282  0056EC  C002  F004         	movff	i2write_timer_zero@timer0+1,i2write_timer_zero@timer+1
 23283                           
 23284                           ;hardware.c: 144: TMR0H = timer.bt[1];
 23285  0056F0  C004  FFD7         	movff	i2write_timer_zero@timer+1,4055	;volatile
 23286                           
 23287                           ;hardware.c: 145: TMR0L = timer.bt[0];
 23288  0056F4  C003  FFD6         	movff	i2write_timer_zero@timer,4054	;volatile
 23289  0056F8  0012               	return		;funcret
 23290  0056FA                     __end_ofi2_write_timer_zero:
 23291                           	opt stack 0
 23292                           tosu	equ	0xFFF
 23293                           tosh	equ	0xFFE
 23294                           tosl	equ	0xFFD
 23295                           pclatu	equ	0xFFB
 23296                           pclath	equ	0xFFA
 23297                           pcl	equ	0xFF9
 23298                           tblptru	equ	0xFF8
 23299                           tblptrh	equ	0xFF7
 23300                           tblptrl	equ	0xFF6
 23301                           tablat	equ	0xFF5
 23302                           prodh	equ	0xFF4
 23303                           prodl	equ	0xFF3
 23304                           intcon	equ	0xFF2
 23305                           intcon2	equ	0xFF1
 23306                           intcon3	equ	0xFF0
 23307                           indf0	equ	0xFEF
 23308                           postinc0	equ	0xFEE
 23309                           fsr0h	equ	0xFEA
 23310                           fsr0l	equ	0xFE9
 23311                           wreg	equ	0xFE8
 23312                           indf1	equ	0xFE7
 23313                           postinc1	equ	0xFE6
 23314                           postdec1	equ	0xFE5
 23315                           plusw1	equ	0xFE3
 23316                           fsr1h	equ	0xFE2
 23317                           fsr1l	equ	0xFE1
 23318                           indf2	equ	0xFDF
 23319                           postinc2	equ	0xFDE
 23320                           postdec2	equ	0xFDD
 23321                           plusw2	equ	0xFDB
 23322                           fsr2h	equ	0xFDA
 23323                           fsr2l	equ	0xFD9
 23324                           status	equ	0xFD8
 23325                           
 23326 ;; *************** function _recebe_dado_uart *****************
 23327 ;; Defined at:
 23328 ;;		line 138 in file "bibliotecas/uart.c"
 23329 ;; Parameters:    Size  Location     Type
 23330 ;;		None
 23331 ;; Auto vars:     Size  Location     Type
 23332 ;;		None
 23333 ;; Return value:  Size  Location     Type
 23334 ;;                  1    wreg      unsigned char 
 23335 ;; Registers used:
 23336 ;;		wreg, status,2
 23337 ;; Tracked objects:
 23338 ;;		On entry : 0/0
 23339 ;;		On exit  : 0/0
 23340 ;;		Unchanged: 0/0
 23341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23342 ;;      Params:         0       0       0       0       0       0       0       0       0
 23343 ;;      Locals:         0       0       0       0       0       0       0       0       0
 23344 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23345 ;;      Totals:         0       0       0       0       0       0       0       0       0
 23346 ;;Total ram usage:        0 bytes
 23347 ;; Hardware stack levels used:    1
 23348 ;; This function calls:
 23349 ;;		Nothing
 23350 ;; This function is called by:
 23351 ;;		_isr
 23352 ;;		_recebe_string_uart
 23353 ;; This function uses a non-reentrant model
 23354 ;;
 23355                           
 23356                           	psect	text91
 23357  0056FA                     __ptext91:
 23358                           	opt stack 0
 23359  0056FA                     _recebe_dado_uart:
 23360                           	opt stack 14
 23361                           
 23362                           ;uart.c: 140: while(RCIF==0);
 23363                           
 23364                           ;incstack = 0
 23365  0056FA  AA9E               	btfss	3998,5,c	;volatile
 23366  0056FC  D7FE               	goto	_recebe_dado_uart
 23367                           
 23368                           ;uart.c: 141: if(RCSTAbits.OERR)
 23369  0056FE  A2AB               	btfss	4011,1,c	;volatile
 23370  005700  D003               	goto	i2l958
 23371                           
 23372                           ;uart.c: 142: {
 23373                           ;uart.c: 143: CREN = 0;
 23374  005702  98AB               	bcf	4011,4,c	;volatile
 23375                           
 23376                           ;uart.c: 144: __nop();
 23377  005704  F000               	nop	
 23378                           
 23379                           ;uart.c: 145: CREN=1;
 23380  005706  88AB               	bsf	4011,4,c	;volatile
 23381  005708                     i2l958:
 23382                           
 23383                           ;uart.c: 146: }
 23384                           ;uart.c: 147: return(RCREG);
 23385  005708  50AE               	movf	4014,w,c	;volatile
 23386  00570A  0012               	return	
 23387  00570C                     __end_of_recebe_dado_uart:
 23388                           	opt stack 0
 23389                           tosu	equ	0xFFF
 23390                           tosh	equ	0xFFE
 23391                           tosl	equ	0xFFD
 23392                           pclatu	equ	0xFFB
 23393                           pclath	equ	0xFFA
 23394                           pcl	equ	0xFF9
 23395                           tblptru	equ	0xFF8
 23396                           tblptrh	equ	0xFF7
 23397                           tblptrl	equ	0xFF6
 23398                           tablat	equ	0xFF5
 23399                           prodh	equ	0xFF4
 23400                           prodl	equ	0xFF3
 23401                           intcon	equ	0xFF2
 23402                           intcon2	equ	0xFF1
 23403                           intcon3	equ	0xFF0
 23404                           indf0	equ	0xFEF
 23405                           postinc0	equ	0xFEE
 23406                           fsr0h	equ	0xFEA
 23407                           fsr0l	equ	0xFE9
 23408                           wreg	equ	0xFE8
 23409                           indf1	equ	0xFE7
 23410                           postinc1	equ	0xFE6
 23411                           postdec1	equ	0xFE5
 23412                           plusw1	equ	0xFE3
 23413                           fsr1h	equ	0xFE2
 23414                           fsr1l	equ	0xFE1
 23415                           indf2	equ	0xFDF
 23416                           postinc2	equ	0xFDE
 23417                           postdec2	equ	0xFDD
 23418                           plusw2	equ	0xFDB
 23419                           fsr2h	equ	0xFDA
 23420                           fsr2l	equ	0xFD9
 23421                           status	equ	0xFD8
 23422                           
 23423 ;; *************** function _GPSRead *****************
 23424 ;; Defined at:
 23425 ;;		line 468 in file "bibliotecas/GPS.c"
 23426 ;; Parameters:    Size  Location     Type
 23427 ;;  buff            1    wreg     unsigned char 
 23428 ;; Auto vars:     Size  Location     Type
 23429 ;;  buff            1    9[COMRAM] unsigned char 
 23430 ;;  c               1   10[COMRAM] unsigned char 
 23431 ;; Return value:  Size  Location     Type
 23432 ;;                  2    8[None  ] int 
 23433 ;; Registers used:
 23434 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23435 ;; Tracked objects:
 23436 ;;		On entry : 0/0
 23437 ;;		On exit  : 0/0
 23438 ;;		Unchanged: 0/0
 23439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23440 ;;      Params:         0       0       0       0       0       0       0       0       0
 23441 ;;      Locals:         2       0       0       0       0       0       0       0       0
 23442 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23443 ;;      Totals:         2       0       0       0       0       0       0       0       0
 23444 ;;Total ram usage:        2 bytes
 23445 ;; Hardware stack levels used:    1
 23446 ;; Hardware stack levels required when called:    1
 23447 ;; This function calls:
 23448 ;;		_strcmp
 23449 ;;		_stringcpy
 23450 ;; This function is called by:
 23451 ;;		_isr
 23452 ;; This function uses a non-reentrant model
 23453 ;;
 23454                           
 23455                           	psect	text92
 23456  00288C                     __ptext92:
 23457                           	opt stack 0
 23458  00288C                     _GPSRead:
 23459                           	opt stack 13
 23460                           
 23461                           ;incstack = 0
 23462                           ;GPSRead@buff stored from wreg
 23463  00288C  6E0A               	movwf	GPSRead@buff,c
 23464                           
 23465                           ;GPS.c: 470: uint8_t c = buff;
 23466  00288E  C00A  F00B         	movff	GPSRead@buff,GPSRead@c
 23467                           
 23468                           ;GPS.c: 472: switch(c) {
 23469  002892  D13B               	goto	i2l297
 23470  002894                     
 23471                           ;GPS.c: 474: if(SentenceType == 1)
 23472  002894  0439               	decf	_SentenceType,w,c
 23473  002896  A4D8               	btfss	status,2,c
 23474  002898  D004               	goto	i2l299
 23475                           
 23476                           ;GPS.c: 475: GPRMC_ok = 1;
 23477  00289A  0E00               	movlw	0
 23478  00289C  6E2E               	movwf	_GPRMC_ok+1,c
 23479  00289E  0E01               	movlw	1
 23480  0028A0  6E2D               	movwf	_GPRMC_ok,c
 23481  0028A2                     i2l299:
 23482                           
 23483                           ;GPS.c: 476: if(SentenceType == 2)
 23484  0028A2  0E02               	movlw	2
 23485  0028A4  1839               	xorwf	_SentenceType,w,c
 23486  0028A6  A4D8               	btfss	status,2,c
 23487  0028A8  D004               	goto	i2l300
 23488                           
 23489                           ;GPS.c: 477: GPGGA_ok = 1;
 23490  0028AA  0E00               	movlw	0
 23491  0028AC  6E2C               	movwf	_GPGGA_ok+1,c
 23492  0028AE  0E01               	movlw	1
 23493  0028B0  6E2B               	movwf	_GPGGA_ok,c
 23494  0028B2                     i2l300:
 23495                           
 23496                           ;GPS.c: 478: if(GPRMC_ok && GPGGA_ok) {
 23497  0028B2  502D               	movf	_GPRMC_ok,w,c
 23498  0028B4  102E               	iorwf	_GPRMC_ok+1,w,c
 23499  0028B6  B4D8               	btfsc	status,2,c
 23500  0028B8  0012               	return	
 23501  0028BA  502B               	movf	_GPGGA_ok,w,c
 23502  0028BC  102C               	iorwf	_GPGGA_ok+1,w,c
 23503  0028BE  B4D8               	btfsc	status,2,c
 23504  0028C0  0012               	return	
 23505                           
 23506                           ;GPS.c: 479: GPRMC_ok = GPGGA_ok = 0;
 23507  0028C2  0E00               	movlw	0
 23508  0028C4  6E2C               	movwf	_GPGGA_ok+1,c
 23509  0028C6  0E00               	movlw	0
 23510  0028C8  6E2B               	movwf	_GPGGA_ok,c
 23511  0028CA  C02B  F02D         	movff	_GPGGA_ok,_GPRMC_ok
 23512  0028CE  C02C  F02E         	movff	_GPGGA_ok+1,_GPRMC_ok+1
 23513                           
 23514                           ;GPS.c: 481: }
 23515                           ;GPS.c: 482: break;
 23516                           
 23517                           ;GPS.c: 480: return 1;
 23518                           ;	Return value of _GPSRead is never used
 23519  0028D2  0012               	return	
 23520  0028D4                     
 23521                           ;GPS.c: 485: Term = char_number = 0;
 23522  0028D4  0E00               	movlw	0
 23523  0028D6  6E3A               	movwf	_char_number,c
 23524  0028D8  C03A  F038         	movff	_char_number,_Term
 23525                           
 23526                           ;GPS.c: 486: break;
 23527  0028DC  0012               	return	
 23528  0028DE                     
 23529                           ;GPS.c: 489: buffer[char_number] = '\0';
 23530  0028DE  503A               	movf	_char_number,w,c
 23531  0028E0  0D01               	mullw	1
 23532  0028E2  0E6A               	movlw	low _buffer
 23533  0028E4  24F3               	addwf	prodl,w,c
 23534  0028E6  6ED9               	movwf	fsr2l,c
 23535  0028E8  0E01               	movlw	high _buffer
 23536  0028EA  20F4               	addwfc	prodh,w,c
 23537  0028EC  6EDA               	movwf	fsr2h,c
 23538  0028EE  0E00               	movlw	0
 23539  0028F0  6EDF               	movwf	indf2,c
 23540                           
 23541                           ;GPS.c: 490: if(Term == 0) {
 23542  0028F2  5038               	movf	_Term,w,c
 23543  0028F4  A4D8               	btfss	status,2,c
 23544  0028F6  D030               	goto	i2l310
 23545                           
 23546                           ;GPS.c: 491: stringcpy(buffer, sentence, 0);
 23547  0028F8  0E6A               	movlw	low _buffer
 23548  0028FA  6E01               	movwf	stringcpy@str1,c
 23549  0028FC  0E01               	movlw	high _buffer
 23550  0028FE  6E02               	movwf	stringcpy@str1+1,c
 23551  002900  0E9B               	movlw	low _sentence
 23552  002902  6E03               	movwf	stringcpy@str2,c
 23553  002904  0E01               	movlw	high _sentence
 23554  002906  6E04               	movwf	stringcpy@str2+1,c
 23555  002908  0E00               	movlw	0
 23556  00290A  6E06               	movwf	stringcpy@dir+1,c
 23557  00290C  0E00               	movlw	0
 23558  00290E  6E05               	movwf	stringcpy@dir,c
 23559  002910  EC69  F028         	call	_stringcpy	;wreg free
 23560                           
 23561                           ;GPS.c: 492: if(strcmp(sentence, "GPRMC") == 0)
 23562  002914  0E9B               	movlw	low _sentence
 23563  002916  6E01               	movwf	strcmp@s1,c
 23564  002918  0E01               	movlw	high _sentence
 23565  00291A  6E02               	movwf	strcmp@s1+1,c
 23566  00291C  0E5D               	movlw	low STR_13
 23567  00291E  6E03               	movwf	strcmp@s2,c
 23568  002920  0E62               	movlw	high STR_13
 23569  002922  6E04               	movwf	strcmp@s2+1,c
 23570  002924  EC24  F029         	call	_strcmp	;wreg free
 23571  002928  5001               	movf	?_strcmp,w,c
 23572  00292A  1002               	iorwf	?_strcmp+1,w,c
 23573  00292C  A4D8               	btfss	status,2,c
 23574  00292E  D002               	goto	i2l307
 23575                           
 23576                           ;GPS.c: 493: SentenceType = 1;
 23577  002930  0E01               	movlw	1
 23578  002932  D011               	goto	L11
 23579  002934                     i2l307:
 23580                           
 23581                           ;GPS.c: 494: else if(strcmp(sentence, "GPGGA") == 0)
 23582  002934  0E9B               	movlw	low _sentence
 23583  002936  6E01               	movwf	strcmp@s1,c
 23584  002938  0E01               	movlw	high _sentence
 23585  00293A  6E02               	movwf	strcmp@s1+1,c
 23586  00293C  0E57               	movlw	low STR_14
 23587  00293E  6E03               	movwf	strcmp@s2,c
 23588  002940  0E62               	movlw	high STR_14
 23589  002942  6E04               	movwf	strcmp@s2+1,c
 23590  002944  EC24  F029         	call	_strcmp	;wreg free
 23591  002948  5001               	movf	?_strcmp,w,c
 23592  00294A  1002               	iorwf	?_strcmp+1,w,c
 23593  00294C  A4D8               	btfss	status,2,c
 23594  00294E  D002               	goto	i2l309
 23595                           
 23596                           ;GPS.c: 495: SentenceType = 2;
 23597  002950  0E02               	movlw	2
 23598  002952  D001               	goto	L11
 23599  002954                     i2l309:
 23600                           
 23601                           ;GPS.c: 496: else
 23602                           ;GPS.c: 497: SentenceType = 3;
 23603  002954  0E03               	movlw	3
 23604  002956                     L11:
 23605  002956  6E39               	movwf	_SentenceType,c
 23606  002958                     i2l310:
 23607                           
 23608                           ;GPS.c: 498: }
 23609                           ;GPS.c: 501: if(Term == 1 && SentenceType == 1) {
 23610  002958  0438               	decf	_Term,w,c
 23611  00295A  A4D8               	btfss	status,2,c
 23612  00295C  D011               	goto	i2l311
 23613  00295E  0439               	decf	_SentenceType,w,c
 23614  002960  A4D8               	btfss	status,2,c
 23615  002962  D00E               	goto	i2l311
 23616                           
 23617                           ;GPS.c: 502: stringcpy(buffer, rawTime, 0);
 23618  002964  0E6A               	movlw	low _buffer
 23619  002966  6E01               	movwf	stringcpy@str1,c
 23620  002968  0E01               	movlw	high _buffer
 23621  00296A  6E02               	movwf	stringcpy@str1+1,c
 23622  00296C  0E76               	movlw	low _rawTime
 23623  00296E  6E03               	movwf	stringcpy@str2,c
 23624  002970  0E01               	movlw	high _rawTime
 23625  002972  6E04               	movwf	stringcpy@str2+1,c
 23626  002974  0E00               	movlw	0
 23627  002976  6E06               	movwf	stringcpy@dir+1,c
 23628  002978  0E00               	movlw	0
 23629  00297A  6E05               	movwf	stringcpy@dir,c
 23630  00297C  EC69  F028         	call	_stringcpy	;wreg free
 23631  002980                     i2l311:
 23632                           
 23633                           ;GPS.c: 503: }
 23634                           ;GPS.c: 506: if((Term == 3) && (SentenceType == 1)) {
 23635  002980  0E03               	movlw	3
 23636  002982  1838               	xorwf	_Term,w,c
 23637  002984  A4D8               	btfss	status,2,c
 23638  002986  D011               	goto	i2l312
 23639  002988  0439               	decf	_SentenceType,w,c
 23640  00298A  A4D8               	btfss	status,2,c
 23641  00298C  D00E               	goto	i2l312
 23642                           
 23643                           ;GPS.c: 507: stringcpy(buffer, rawLatitude, 1);
 23644  00298E  0E6A               	movlw	low _buffer
 23645  002990  6E01               	movwf	stringcpy@str1,c
 23646  002992  0E01               	movlw	high _buffer
 23647  002994  6E02               	movwf	stringcpy@str1+1,c
 23648  002996  0E5D               	movlw	low _rawLatitude
 23649  002998  6E03               	movwf	stringcpy@str2,c
 23650  00299A  0E01               	movlw	high _rawLatitude
 23651  00299C  6E04               	movwf	stringcpy@str2+1,c
 23652  00299E  0E00               	movlw	0
 23653  0029A0  6E06               	movwf	stringcpy@dir+1,c
 23654  0029A2  0E01               	movlw	1
 23655  0029A4  6E05               	movwf	stringcpy@dir,c
 23656  0029A6  EC69  F028         	call	_stringcpy	;wreg free
 23657  0029AA                     i2l312:
 23658                           
 23659                           ;GPS.c: 508: }
 23660                           ;GPS.c: 510: if((Term == 4) && (SentenceType == 1)) {
 23661  0029AA  0E04               	movlw	4
 23662  0029AC  1838               	xorwf	_Term,w,c
 23663  0029AE  A4D8               	btfss	status,2,c
 23664  0029B0  D00C               	goto	i2l315
 23665  0029B2  0439               	decf	_SentenceType,w,c
 23666  0029B4  A4D8               	btfss	status,2,c
 23667  0029B6  D009               	goto	i2l315
 23668                           
 23669                           ;GPS.c: 511: if(buffer[0] == 'N')
 23670  0029B8  0E4E               	movlw	78
 23671  0029BA  0101               	movlb	1	; () banked
 23672  0029BC  196A               	xorwf	_buffer& (0+255),w,b
 23673  0029BE  A4D8               	btfss	status,2,c
 23674  0029C0  D002               	goto	i2l314
 23675                           
 23676                           ; BSR set to: 1
 23677                           ;GPS.c: 512: rawLatitude[0] = '0';
 23678  0029C2  0E30               	movlw	48
 23679  0029C4  D001               	goto	L12
 23680  0029C6                     i2l314:
 23681                           
 23682                           ; BSR set to: 1
 23683                           ;GPS.c: 513: else
 23684                           ;GPS.c: 514: rawLatitude[0] = '-';
 23685                           
 23686                           ; BSR set to: 1
 23687  0029C6  0E2D               	movlw	45
 23688  0029C8                     L12:
 23689  0029C8  6F5D               	movwf	_rawLatitude& (0+255),b
 23690  0029CA                     i2l315:
 23691                           
 23692                           ;GPS.c: 515: }
 23693                           ;GPS.c: 518: if((Term == 5) && (SentenceType == 1)) {
 23694                           
 23695                           ; BSR set to: 1
 23696                           
 23697                           ; BSR set to: 1
 23698  0029CA  0E05               	movlw	5
 23699  0029CC  1838               	xorwf	_Term,w,c
 23700  0029CE  A4D8               	btfss	status,2,c
 23701  0029D0  D011               	goto	i2l316
 23702  0029D2  0439               	decf	_SentenceType,w,c
 23703  0029D4  A4D8               	btfss	status,2,c
 23704  0029D6  D00E               	goto	i2l316
 23705                           
 23706                           ;GPS.c: 519: stringcpy(buffer, rawLongitude, 1);
 23707  0029D8  0E6A               	movlw	low _buffer
 23708  0029DA  6E01               	movwf	stringcpy@str1,c
 23709  0029DC  0E01               	movlw	high _buffer
 23710  0029DE  6E02               	movwf	stringcpy@str1+1,c
 23711  0029E0  0E50               	movlw	low _rawLongitude
 23712  0029E2  6E03               	movwf	stringcpy@str2,c
 23713  0029E4  0E01               	movlw	high _rawLongitude
 23714  0029E6  6E04               	movwf	stringcpy@str2+1,c
 23715  0029E8  0E00               	movlw	0
 23716  0029EA  6E06               	movwf	stringcpy@dir+1,c
 23717  0029EC  0E01               	movlw	1
 23718  0029EE  6E05               	movwf	stringcpy@dir,c
 23719  0029F0  EC69  F028         	call	_stringcpy	;wreg free
 23720  0029F4                     i2l316:
 23721                           
 23722                           ;GPS.c: 520: }
 23723                           ;GPS.c: 522: if((Term == 6) && (SentenceType == 1)) {
 23724  0029F4  0E06               	movlw	6
 23725  0029F6  1838               	xorwf	_Term,w,c
 23726  0029F8  A4D8               	btfss	status,2,c
 23727  0029FA  D00C               	goto	i2l319
 23728  0029FC  0439               	decf	_SentenceType,w,c
 23729  0029FE  A4D8               	btfss	status,2,c
 23730  002A00  D009               	goto	i2l319
 23731                           
 23732                           ;GPS.c: 523: if(buffer[0] == 'E')
 23733  002A02  0E45               	movlw	69
 23734  002A04  0101               	movlb	1	; () banked
 23735  002A06  196A               	xorwf	_buffer& (0+255),w,b
 23736  002A08  A4D8               	btfss	status,2,c
 23737  002A0A  D002               	goto	i2l318
 23738                           
 23739                           ; BSR set to: 1
 23740                           ;GPS.c: 524: rawLongitude[0] = '0';
 23741  002A0C  0E30               	movlw	48
 23742  002A0E  D001               	goto	L13
 23743  002A10                     i2l318:
 23744                           
 23745                           ; BSR set to: 1
 23746                           ;GPS.c: 525: else
 23747                           ;GPS.c: 526: rawLongitude[0] = '-';
 23748                           
 23749                           ; BSR set to: 1
 23750  002A10  0E2D               	movlw	45
 23751  002A12                     L13:
 23752  002A12  6F50               	movwf	_rawLongitude& (0+255),b
 23753  002A14                     i2l319:
 23754                           
 23755                           ;GPS.c: 527: }
 23756                           ;GPS.c: 530: if((Term == 7) && (SentenceType == 1)) {
 23757                           
 23758                           ; BSR set to: 1
 23759                           
 23760                           ; BSR set to: 1
 23761  002A14  0E07               	movlw	7
 23762  002A16  1838               	xorwf	_Term,w,c
 23763  002A18  A4D8               	btfss	status,2,c
 23764  002A1A  D011               	goto	i2l320
 23765  002A1C  0439               	decf	_SentenceType,w,c
 23766  002A1E  A4D8               	btfss	status,2,c
 23767  002A20  D00E               	goto	i2l320
 23768                           
 23769                           ;GPS.c: 531: stringcpy(buffer, rawSpeed, 0);
 23770  002A22  0E6A               	movlw	low _buffer
 23771  002A24  6E01               	movwf	stringcpy@str1,c
 23772  002A26  0E01               	movlw	high _buffer
 23773  002A28  6E02               	movwf	stringcpy@str1+1,c
 23774  002A2A  0E95               	movlw	low _rawSpeed
 23775  002A2C  6E03               	movwf	stringcpy@str2,c
 23776  002A2E  0E01               	movlw	high _rawSpeed
 23777  002A30  6E04               	movwf	stringcpy@str2+1,c
 23778  002A32  0E00               	movlw	0
 23779  002A34  6E06               	movwf	stringcpy@dir+1,c
 23780  002A36  0E00               	movlw	0
 23781  002A38  6E05               	movwf	stringcpy@dir,c
 23782  002A3A  EC69  F028         	call	_stringcpy	;wreg free
 23783  002A3E                     i2l320:
 23784                           
 23785                           ;GPS.c: 532: }
 23786                           ;GPS.c: 535: if((Term == 8) && (SentenceType == 1)) {
 23787  002A3E  0E08               	movlw	8
 23788  002A40  1838               	xorwf	_Term,w,c
 23789  002A42  A4D8               	btfss	status,2,c
 23790  002A44  D011               	goto	i2l321
 23791  002A46  0439               	decf	_SentenceType,w,c
 23792  002A48  A4D8               	btfss	status,2,c
 23793  002A4A  D00E               	goto	i2l321
 23794                           
 23795                           ;GPS.c: 536: stringcpy(buffer, rawCourse, 0);
 23796  002A4C  0E6A               	movlw	low _buffer
 23797  002A4E  6E01               	movwf	stringcpy@str1,c
 23798  002A50  0E01               	movlw	high _buffer
 23799  002A52  6E02               	movwf	stringcpy@str1+1,c
 23800  002A54  0E8F               	movlw	low _rawCourse
 23801  002A56  6E03               	movwf	stringcpy@str2,c
 23802  002A58  0E01               	movlw	high _rawCourse
 23803  002A5A  6E04               	movwf	stringcpy@str2+1,c
 23804  002A5C  0E00               	movlw	0
 23805  002A5E  6E06               	movwf	stringcpy@dir+1,c
 23806  002A60  0E00               	movlw	0
 23807  002A62  6E05               	movwf	stringcpy@dir,c
 23808  002A64  EC69  F028         	call	_stringcpy	;wreg free
 23809  002A68                     i2l321:
 23810                           
 23811                           ;GPS.c: 537: }
 23812                           ;GPS.c: 540: if(Term == 9 && SentenceType == 1) {
 23813  002A68  0E09               	movlw	9
 23814  002A6A  1838               	xorwf	_Term,w,c
 23815  002A6C  A4D8               	btfss	status,2,c
 23816  002A6E  D011               	goto	i2l322
 23817  002A70  0439               	decf	_SentenceType,w,c
 23818  002A72  A4D8               	btfss	status,2,c
 23819  002A74  D00E               	goto	i2l322
 23820                           
 23821                           ;GPS.c: 541: stringcpy(buffer, rawDate, 0);
 23822  002A76  0E6A               	movlw	low _buffer
 23823  002A78  6E01               	movwf	stringcpy@str1,c
 23824  002A7A  0E01               	movlw	high _buffer
 23825  002A7C  6E02               	movwf	stringcpy@str1+1,c
 23826  002A7E  0E88               	movlw	low _rawDate
 23827  002A80  6E03               	movwf	stringcpy@str2,c
 23828  002A82  0E01               	movlw	high _rawDate
 23829  002A84  6E04               	movwf	stringcpy@str2+1,c
 23830  002A86  0E00               	movlw	0
 23831  002A88  6E06               	movwf	stringcpy@dir+1,c
 23832  002A8A  0E00               	movlw	0
 23833  002A8C  6E05               	movwf	stringcpy@dir,c
 23834  002A8E  EC69  F028         	call	_stringcpy	;wreg free
 23835  002A92                     i2l322:
 23836                           
 23837                           ;GPS.c: 542: }
 23838                           ;GPS.c: 545: if((Term == 7) && (SentenceType == 2)) {
 23839  002A92  0E07               	movlw	7
 23840  002A94  1838               	xorwf	_Term,w,c
 23841  002A96  A4D8               	btfss	status,2,c
 23842  002A98  D012               	goto	i2l323
 23843  002A9A  0E02               	movlw	2
 23844  002A9C  1839               	xorwf	_SentenceType,w,c
 23845  002A9E  A4D8               	btfss	status,2,c
 23846  002AA0  D00E               	goto	i2l323
 23847                           
 23848                           ;GPS.c: 546: stringcpy(buffer, rawSatellites, 0);
 23849  002AA2  0E6A               	movlw	low _buffer
 23850  002AA4  6E01               	movwf	stringcpy@str1,c
 23851  002AA6  0E01               	movlw	high _buffer
 23852  002AA8  6E02               	movwf	stringcpy@str1+1,c
 23853  002AAA  0EFD               	movlw	low _rawSatellites
 23854  002AAC  6E03               	movwf	stringcpy@str2,c
 23855  002AAE  0E00               	movlw	high _rawSatellites
 23856  002AB0  6E04               	movwf	stringcpy@str2+1,c
 23857  002AB2  0E00               	movlw	0
 23858  002AB4  6E06               	movwf	stringcpy@dir+1,c
 23859  002AB6  0E00               	movlw	0
 23860  002AB8  6E05               	movwf	stringcpy@dir,c
 23861  002ABA  EC69  F028         	call	_stringcpy	;wreg free
 23862  002ABE                     i2l323:
 23863                           
 23864                           ;GPS.c: 547: }
 23865                           ;GPS.c: 550: if((Term == 9) && (SentenceType == 2)) {
 23866  002ABE  0E09               	movlw	9
 23867  002AC0  1838               	xorwf	_Term,w,c
 23868  002AC2  A4D8               	btfss	status,2,c
 23869  002AC4  D012               	goto	i2l324
 23870  002AC6  0E02               	movlw	2
 23871  002AC8  1839               	xorwf	_SentenceType,w,c
 23872  002ACA  A4D8               	btfss	status,2,c
 23873  002ACC  D00E               	goto	i2l324
 23874                           
 23875                           ;GPS.c: 551: stringcpy(buffer, rawAltitude, 0);
 23876  002ACE  0E6A               	movlw	low _buffer
 23877  002AD0  6E01               	movwf	stringcpy@str1,c
 23878  002AD2  0E01               	movlw	high _buffer
 23879  002AD4  6E02               	movwf	stringcpy@str1+1,c
 23880  002AD6  0E81               	movlw	low _rawAltitude
 23881  002AD8  6E03               	movwf	stringcpy@str2,c
 23882  002ADA  0E01               	movlw	high _rawAltitude
 23883  002ADC  6E04               	movwf	stringcpy@str2+1,c
 23884  002ADE  0E00               	movlw	0
 23885  002AE0  6E06               	movwf	stringcpy@dir+1,c
 23886  002AE2  0E00               	movlw	0
 23887  002AE4  6E05               	movwf	stringcpy@dir,c
 23888  002AE6  EC69  F028         	call	_stringcpy	;wreg free
 23889  002AEA                     i2l324:
 23890                           
 23891                           ;GPS.c: 552: }
 23892                           ;GPS.c: 558: Term++;
 23893  002AEA  2A38               	incf	_Term,f,c
 23894                           
 23895                           ;GPS.c: 559: char_number = 0;
 23896  002AEC  0E00               	movlw	0
 23897  002AEE  6E3A               	movwf	_char_number,c
 23898                           
 23899                           ;GPS.c: 560: break;
 23900  002AF0  0012               	return	
 23901  002AF2                     
 23902                           ;GPS.c: 563: buffer[char_number++] = c;
 23903  002AF2  503A               	movf	_char_number,w,c
 23904  002AF4  0D01               	mullw	1
 23905  002AF6  0E6A               	movlw	low _buffer
 23906  002AF8  24F3               	addwf	prodl,w,c
 23907  002AFA  6ED9               	movwf	fsr2l,c
 23908  002AFC  0E01               	movlw	high _buffer
 23909  002AFE  20F4               	addwfc	prodh,w,c
 23910  002B00  6EDA               	movwf	fsr2h,c
 23911  002B02  C00B  FFDF         	movff	GPSRead@c,indf2
 23912  002B06  2A3A               	incf	_char_number,f,c
 23913                           
 23914                           ;GPS.c: 565: }
 23915                           
 23916                           ;GPS.c: 564: break;
 23917  002B08  0012               	return	
 23918  002B0A                     i2l297:
 23919  002B0A  500B               	movf	GPSRead@c,w,c
 23920                           
 23921                           ; Switch size 1, requested type "space"
 23922                           ; Number of cases is 3, Range of values is 13 to 44
 23923                           ; switch strategies available:
 23924                           ; Name         Instructions Cycles
 23925                           ; simple_byte           10     6 (average)
 23926                           ;	Chosen strategy is simple_byte
 23927  002B0C  0A0D               	xorlw	13	; case 13
 23928  002B0E  B4D8               	btfsc	status,2,c
 23929  002B10  D6C1               	goto	i2l298
 23930  002B12  0A29               	xorlw	41	; case 36
 23931  002B14  B4D8               	btfsc	status,2,c
 23932  002B16  D6DE               	goto	i2l304
 23933  002B18  0A08               	xorlw	8	; case 44
 23934  002B1A  B4D8               	btfsc	status,2,c
 23935  002B1C  D6E0               	goto	i2l305
 23936  002B1E  D7E9               	goto	i2l325
 23937  002B20                     __end_of_GPSRead:
 23938                           	opt stack 0
 23939                           tosu	equ	0xFFF
 23940                           tosh	equ	0xFFE
 23941                           tosl	equ	0xFFD
 23942                           pclatu	equ	0xFFB
 23943                           pclath	equ	0xFFA
 23944                           pcl	equ	0xFF9
 23945                           tblptru	equ	0xFF8
 23946                           tblptrh	equ	0xFF7
 23947                           tblptrl	equ	0xFF6
 23948                           tablat	equ	0xFF5
 23949                           prodh	equ	0xFF4
 23950                           prodl	equ	0xFF3
 23951                           intcon	equ	0xFF2
 23952                           intcon2	equ	0xFF1
 23953                           intcon3	equ	0xFF0
 23954                           indf0	equ	0xFEF
 23955                           postinc0	equ	0xFEE
 23956                           fsr0h	equ	0xFEA
 23957                           fsr0l	equ	0xFE9
 23958                           wreg	equ	0xFE8
 23959                           indf1	equ	0xFE7
 23960                           postinc1	equ	0xFE6
 23961                           postdec1	equ	0xFE5
 23962                           plusw1	equ	0xFE3
 23963                           fsr1h	equ	0xFE2
 23964                           fsr1l	equ	0xFE1
 23965                           indf2	equ	0xFDF
 23966                           postinc2	equ	0xFDE
 23967                           postdec2	equ	0xFDD
 23968                           plusw2	equ	0xFDB
 23969                           fsr2h	equ	0xFDA
 23970                           fsr2l	equ	0xFD9
 23971                           status	equ	0xFD8
 23972                           
 23973 ;; *************** function _stringcpy *****************
 23974 ;; Defined at:
 23975 ;;		line 459 in file "bibliotecas/GPS.c"
 23976 ;; Parameters:    Size  Location     Type
 23977 ;;  str1            2    0[COMRAM] PTR unsigned char 
 23978 ;;		 -> buffer(12), 
 23979 ;;  str2            2    2[COMRAM] PTR unsigned char 
 23980 ;;		 -> rawAltitude(7), rawSatellites(3), rawDate(7), rawCourse(6), 
 23981 ;;		 -> rawSpeed(6), rawLongitude(13), rawLatitude(13), rawTime(11), 
 23982 ;;		 -> sentence(6), 
 23983 ;;  dir             2    4[COMRAM] int 
 23984 ;; Auto vars:     Size  Location     Type
 23985 ;;  chr             1    8[COMRAM] unsigned char 
 23986 ;; Return value:  Size  Location     Type
 23987 ;;                  1    wreg      void 
 23988 ;; Registers used:
 23989 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 23990 ;; Tracked objects:
 23991 ;;		On entry : 0/0
 23992 ;;		On exit  : 0/0
 23993 ;;		Unchanged: 0/0
 23994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23995 ;;      Params:         6       0       0       0       0       0       0       0       0
 23996 ;;      Locals:         1       0       0       0       0       0       0       0       0
 23997 ;;      Temps:          2       0       0       0       0       0       0       0       0
 23998 ;;      Totals:         9       0       0       0       0       0       0       0       0
 23999 ;;Total ram usage:        9 bytes
 24000 ;; Hardware stack levels used:    1
 24001 ;; This function calls:
 24002 ;;		Nothing
 24003 ;; This function is called by:
 24004 ;;		_GPSRead
 24005 ;; This function uses a non-reentrant model
 24006 ;;
 24007                           
 24008                           	psect	text93
 24009  0050D2                     __ptext93:
 24010                           	opt stack 0
 24011  0050D2                     _stringcpy:
 24012                           	opt stack 13
 24013                           
 24014                           ;GPS.c: 461: uint8_t chr = 0;
 24015                           
 24016                           ;incstack = 0
 24017  0050D2  0E00               	movlw	0
 24018  0050D4  6E09               	movwf	stringcpy@chr,c
 24019  0050D6                     
 24020                           ;GPS.c: 464: str2[chr + dir] = str1[chr];
 24021  0050D6  5009               	movf	stringcpy@chr,w,c
 24022  0050D8  0D01               	mullw	1
 24023  0050DA  50F3               	movf	prodl,w,c
 24024  0050DC  2401               	addwf	stringcpy@str1,w,c
 24025  0050DE  6ED9               	movwf	fsr2l,c
 24026  0050E0  50F4               	movf	prodh,w,c
 24027  0050E2  2002               	addwfc	stringcpy@str1+1,w,c
 24028  0050E4  6EDA               	movwf	fsr2h,c
 24029  0050E6  5009               	movf	stringcpy@chr,w,c
 24030  0050E8  2405               	addwf	stringcpy@dir,w,c
 24031  0050EA  6E07               	movwf	??_stringcpy& (0+255),c
 24032  0050EC  0E00               	movlw	0
 24033  0050EE  2006               	addwfc	stringcpy@dir+1,w,c
 24034  0050F0  6E08               	movwf	(??_stringcpy+1)& (0+255),c
 24035  0050F2  5007               	movf	??_stringcpy,w,c
 24036  0050F4  2403               	addwf	stringcpy@str2,w,c
 24037  0050F6  6EE1               	movwf	fsr1l,c
 24038  0050F8  5008               	movf	??_stringcpy+1,w,c
 24039  0050FA  2004               	addwfc	stringcpy@str2+1,w,c
 24040  0050FC  6EE2               	movwf	fsr1h,c
 24041  0050FE  CFDF FFE7          	movff	indf2,indf1
 24042                           
 24043                           ;GPS.c: 465: } while(str1[chr++] != '\0');
 24044  005102  2A09               	incf	stringcpy@chr,f,c
 24045  005104  0409               	decf	stringcpy@chr,w,c
 24046  005106  6E07               	movwf	??_stringcpy& (0+255),c
 24047  005108  5007               	movf	??_stringcpy,w,c
 24048  00510A  0D01               	mullw	1
 24049  00510C  50F3               	movf	prodl,w,c
 24050  00510E  2401               	addwf	stringcpy@str1,w,c
 24051  005110  6ED9               	movwf	fsr2l,c
 24052  005112  50F4               	movf	prodh,w,c
 24053  005114  2002               	addwfc	stringcpy@str1+1,w,c
 24054  005116  6EDA               	movwf	fsr2h,c
 24055  005118  50DF               	movf	indf2,w,c
 24056  00511A  B4D8               	btfsc	status,2,c
 24057  00511C  0012               	return	
 24058  00511E  D7DB               	goto	i2l292
 24059  005120                     __end_of_stringcpy:
 24060                           	opt stack 0
 24061                           tosu	equ	0xFFF
 24062                           tosh	equ	0xFFE
 24063                           tosl	equ	0xFFD
 24064                           pclatu	equ	0xFFB
 24065                           pclath	equ	0xFFA
 24066                           pcl	equ	0xFF9
 24067                           tblptru	equ	0xFF8
 24068                           tblptrh	equ	0xFF7
 24069                           tblptrl	equ	0xFF6
 24070                           tablat	equ	0xFF5
 24071                           prodh	equ	0xFF4
 24072                           prodl	equ	0xFF3
 24073                           intcon	equ	0xFF2
 24074                           intcon2	equ	0xFF1
 24075                           intcon3	equ	0xFF0
 24076                           indf0	equ	0xFEF
 24077                           postinc0	equ	0xFEE
 24078                           fsr0h	equ	0xFEA
 24079                           fsr0l	equ	0xFE9
 24080                           wreg	equ	0xFE8
 24081                           indf1	equ	0xFE7
 24082                           postinc1	equ	0xFE6
 24083                           postdec1	equ	0xFE5
 24084                           plusw1	equ	0xFE3
 24085                           fsr1h	equ	0xFE2
 24086                           fsr1l	equ	0xFE1
 24087                           indf2	equ	0xFDF
 24088                           postinc2	equ	0xFDE
 24089                           postdec2	equ	0xFDD
 24090                           plusw2	equ	0xFDB
 24091                           fsr2h	equ	0xFDA
 24092                           fsr2l	equ	0xFD9
 24093                           status	equ	0xFD8
 24094                           
 24095 ;; *************** function _strcmp *****************
 24096 ;; Defined at:
 24097 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcmp.c"
 24098 ;; Parameters:    Size  Location     Type
 24099 ;;  s1              2    0[COMRAM] PTR const unsigned char 
 24100 ;;		 -> sentence(6), 
 24101 ;;  s2              2    2[COMRAM] PTR const unsigned char 
 24102 ;;		 -> STR_14(6), STR_13(6), 
 24103 ;; Auto vars:     Size  Location     Type
 24104 ;;  r               1    5[COMRAM] char 
 24105 ;; Return value:  Size  Location     Type
 24106 ;;                  2    0[COMRAM] int 
 24107 ;; Registers used:
 24108 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 24109 ;; Tracked objects:
 24110 ;;		On entry : 0/0
 24111 ;;		On exit  : 0/0
 24112 ;;		Unchanged: 0/0
 24113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24114 ;;      Params:         4       0       0       0       0       0       0       0       0
 24115 ;;      Locals:         1       0       0       0       0       0       0       0       0
 24116 ;;      Temps:          1       0       0       0       0       0       0       0       0
 24117 ;;      Totals:         6       0       0       0       0       0       0       0       0
 24118 ;;Total ram usage:        6 bytes
 24119 ;; Hardware stack levels used:    1
 24120 ;; This function calls:
 24121 ;;		Nothing
 24122 ;; This function is called by:
 24123 ;;		_GPSRead
 24124 ;; This function uses a non-reentrant model
 24125 ;;
 24126                           
 24127                           	psect	text94
 24128  005248                     __ptext94:
 24129                           	opt stack 0
 24130  005248                     _strcmp:
 24131                           	opt stack 13
 24132                           
 24133                           ;incstack = 0
 24134  005248  D004               	goto	i2l2096
 24135  00524A  4A01               	infsnz	strcmp@s1,f,c
 24136  00524C  2A02               	incf	strcmp@s1+1,f,c
 24137  00524E  4A03               	infsnz	strcmp@s2,f,c
 24138  005250  2A04               	incf	strcmp@s2+1,f,c
 24139  005252                     i2l2096:
 24140  005252  C001  FFD9         	movff	strcmp@s1,fsr2l
 24141  005256  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 24142  00525A  50DF               	movf	indf2,w,c
 24143  00525C  6E05               	movwf	??_strcmp& (0+255),c
 24144  00525E  C003  FFF6         	movff	strcmp@s2,tblptrl
 24145  005262  C004  FFF7         	movff	strcmp@s2+1,tblptrh
 24146  005266                     	if	0	;tblptru may be non-zero
 24147  005266                     	endif
 24148  005266                     	if	0	;tblptru may be non-zero
 24149  005266                     	endif
 24150  005266  0008               	tblrd		*
 24151  005268  50F5               	movf	tablat,w,c
 24152  00526A  0800               	sublw	0
 24153  00526C  2405               	addwf	??_strcmp,w,c
 24154  00526E  6E06               	movwf	strcmp@r,c
 24155  005270  5006               	movf	strcmp@r,w,c
 24156  005272  A4D8               	btfss	status,2,c
 24157  005274  D007               	goto	i2u1076_40
 24158  005276  C001  FFD9         	movff	strcmp@s1,fsr2l
 24159  00527A  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 24160  00527E  50DF               	movf	indf2,w,c
 24161  005280  A4D8               	btfss	status,2,c
 24162  005282  D7E3               	goto	i2l2097
 24163  005284                     i2u1076_40:
 24164  005284  5006               	movf	strcmp@r,w,c
 24165  005286  6E01               	movwf	?_strcmp,c
 24166  005288  6A02               	clrf	?_strcmp+1,c
 24167  00528A  BE01               	btfsc	?_strcmp,7,c
 24168  00528C  0602               	decf	?_strcmp+1,f,c
 24169  00528E  0012               	return	
 24170  005290                     __end_of_strcmp:
 24171                           	opt stack 0
 24172                           tosu	equ	0xFFF
 24173                           tosh	equ	0xFFE
 24174                           tosl	equ	0xFFD
 24175                           pclatu	equ	0xFFB
 24176                           pclath	equ	0xFFA
 24177                           pcl	equ	0xFF9
 24178                           tblptru	equ	0xFF8
 24179                           tblptrh	equ	0xFF7
 24180                           tblptrl	equ	0xFF6
 24181                           tablat	equ	0xFF5
 24182                           prodh	equ	0xFF4
 24183                           prodl	equ	0xFF3
 24184                           intcon	equ	0xFF2
 24185                           intcon2	equ	0xFF1
 24186                           intcon3	equ	0xFF0
 24187                           indf0	equ	0xFEF
 24188                           postinc0	equ	0xFEE
 24189                           fsr0h	equ	0xFEA
 24190                           fsr0l	equ	0xFE9
 24191                           wreg	equ	0xFE8
 24192                           indf1	equ	0xFE7
 24193                           postinc1	equ	0xFE6
 24194                           postdec1	equ	0xFE5
 24195                           plusw1	equ	0xFE3
 24196                           fsr1h	equ	0xFE2
 24197                           fsr1l	equ	0xFE1
 24198                           indf2	equ	0xFDF
 24199                           postinc2	equ	0xFDE
 24200                           postdec2	equ	0xFDD
 24201                           plusw2	equ	0xFDB
 24202                           fsr2h	equ	0xFDA
 24203                           fsr2l	equ	0xFD9
 24204                           status	equ	0xFD8
 24205                           tosu	equ	0xFFF
 24206                           tosh	equ	0xFFE
 24207                           tosl	equ	0xFFD
 24208                           pclatu	equ	0xFFB
 24209                           pclath	equ	0xFFA
 24210                           pcl	equ	0xFF9
 24211                           tblptru	equ	0xFF8
 24212                           tblptrh	equ	0xFF7
 24213                           tblptrl	equ	0xFF6
 24214                           tablat	equ	0xFF5
 24215                           prodh	equ	0xFF4
 24216                           prodl	equ	0xFF3
 24217                           intcon	equ	0xFF2
 24218                           intcon2	equ	0xFF1
 24219                           intcon3	equ	0xFF0
 24220                           indf0	equ	0xFEF
 24221                           postinc0	equ	0xFEE
 24222                           fsr0h	equ	0xFEA
 24223                           fsr0l	equ	0xFE9
 24224                           wreg	equ	0xFE8
 24225                           indf1	equ	0xFE7
 24226                           postinc1	equ	0xFE6
 24227                           postdec1	equ	0xFE5
 24228                           plusw1	equ	0xFE3
 24229                           fsr1h	equ	0xFE2
 24230                           fsr1l	equ	0xFE1
 24231                           indf2	equ	0xFDF
 24232                           postinc2	equ	0xFDE
 24233                           postdec2	equ	0xFDD
 24234                           plusw2	equ	0xFDB
 24235                           fsr2h	equ	0xFDA
 24236                           fsr2l	equ	0xFD9
 24237                           status	equ	0xFD8
 24238                           
 24239                           	psect	text95
 24240  000000                     __ptext95:
 24241                           	opt stack 0
 24242                           tosu	equ	0xFFF
 24243                           tosh	equ	0xFFE
 24244                           tosl	equ	0xFFD
 24245                           pclatu	equ	0xFFB
 24246                           pclath	equ	0xFFA
 24247                           pcl	equ	0xFF9
 24248                           tblptru	equ	0xFF8
 24249                           tblptrh	equ	0xFF7
 24250                           tblptrl	equ	0xFF6
 24251                           tablat	equ	0xFF5
 24252                           prodh	equ	0xFF4
 24253                           prodl	equ	0xFF3
 24254                           intcon	equ	0xFF2
 24255                           intcon2	equ	0xFF1
 24256                           intcon3	equ	0xFF0
 24257                           indf0	equ	0xFEF
 24258                           postinc0	equ	0xFEE
 24259                           fsr0h	equ	0xFEA
 24260                           fsr0l	equ	0xFE9
 24261                           wreg	equ	0xFE8
 24262                           indf1	equ	0xFE7
 24263                           postinc1	equ	0xFE6
 24264                           postdec1	equ	0xFE5
 24265                           plusw1	equ	0xFE3
 24266                           fsr1h	equ	0xFE2
 24267                           fsr1l	equ	0xFE1
 24268                           indf2	equ	0xFDF
 24269                           postinc2	equ	0xFDE
 24270                           postdec2	equ	0xFDD
 24271                           plusw2	equ	0xFDB
 24272                           fsr2h	equ	0xFDA
 24273                           fsr2l	equ	0xFD9
 24274                           status	equ	0xFD8
 24275                           
 24276                           	psect	rparam
 24277  0000                     tosu	equ	0xFFF
 24278                           tosh	equ	0xFFE
 24279                           tosl	equ	0xFFD
 24280                           pclatu	equ	0xFFB
 24281                           pclath	equ	0xFFA
 24282                           pcl	equ	0xFF9
 24283                           tblptru	equ	0xFF8
 24284                           tblptrh	equ	0xFF7
 24285                           tblptrl	equ	0xFF6
 24286                           tablat	equ	0xFF5
 24287                           prodh	equ	0xFF4
 24288                           prodl	equ	0xFF3
 24289                           intcon	equ	0xFF2
 24290                           intcon2	equ	0xFF1
 24291                           intcon3	equ	0xFF0
 24292                           indf0	equ	0xFEF
 24293                           postinc0	equ	0xFEE
 24294                           fsr0h	equ	0xFEA
 24295                           fsr0l	equ	0xFE9
 24296                           wreg	equ	0xFE8
 24297                           indf1	equ	0xFE7
 24298                           postinc1	equ	0xFE6
 24299                           postdec1	equ	0xFE5
 24300                           plusw1	equ	0xFE3
 24301                           fsr1h	equ	0xFE2
 24302                           fsr1l	equ	0xFE1
 24303                           indf2	equ	0xFDF
 24304                           postinc2	equ	0xFDE
 24305                           postdec2	equ	0xFDD
 24306                           plusw2	equ	0xFDB
 24307                           fsr2h	equ	0xFDA
 24308                           fsr2l	equ	0xFD9
 24309                           status	equ	0xFD8
 24310                           
 24311                           	psect	temp
 24312  000040                     btemp:
 24313                           	opt stack 0
 24314  000040                     	ds	1
 24315  0000                     int$flags	set	btemp
 24316  0000                     wtemp6	set	btemp+1
 24317                           tosu	equ	0xFFF
 24318                           tosh	equ	0xFFE
 24319                           tosl	equ	0xFFD
 24320                           pclatu	equ	0xFFB
 24321                           pclath	equ	0xFFA
 24322                           pcl	equ	0xFF9
 24323                           tblptru	equ	0xFF8
 24324                           tblptrh	equ	0xFF7
 24325                           tblptrl	equ	0xFF6
 24326                           tablat	equ	0xFF5
 24327                           prodh	equ	0xFF4
 24328                           prodl	equ	0xFF3
 24329                           intcon	equ	0xFF2
 24330                           intcon2	equ	0xFF1
 24331                           intcon3	equ	0xFF0
 24332                           indf0	equ	0xFEF
 24333                           postinc0	equ	0xFEE
 24334                           fsr0h	equ	0xFEA
 24335                           fsr0l	equ	0xFE9
 24336                           wreg	equ	0xFE8
 24337                           indf1	equ	0xFE7
 24338                           postinc1	equ	0xFE6
 24339                           postdec1	equ	0xFE5
 24340                           plusw1	equ	0xFE3
 24341                           fsr1h	equ	0xFE2
 24342                           fsr1l	equ	0xFE1
 24343                           indf2	equ	0xFDF
 24344                           postinc2	equ	0xFDE
 24345                           postdec2	equ	0xFDD
 24346                           plusw2	equ	0xFDB
 24347                           fsr2h	equ	0xFDA
 24348                           fsr2l	equ	0xFD9
 24349                           status	equ	0xFD8


Data Sizes:
    Strings     265
    Constant    34
    Data        140
    BSS         1030
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     32      63
    BANK0           160    141     160
    BANK1           256     38     250
    BANK2           256      0     256
    BANK3           256    121     229
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    escalonador$3429	PTR FTN()void  size(2) Largest target is 1
		 -> troca_de_tela(), verifica_fence_externo(), disparo_gravacao(), verifica_dados_operacionais(), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 13
		 -> rawDate(BANK1[7]), rawLongitude(BANK1[13]), rawLatitude(BANK1[13]), rawTime(BANK1[11]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 13
		 -> rawDate(BANK1[7]), rawLongitude(BANK1[13]), rawLatitude(BANK1[13]), rawTime(BANK1[11]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_14(CODE[6]), STR_13(CODE[6]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 6
		 -> sentence(BANK1[6]), 

    memset@p1	PTR void  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memset@p	PTR unsigned char  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memcpy@d1	PTR void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK3[20]), fs(BIGRAM[544]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK3[20]), fs(BIGRAM[544]), 

    memcpy@s1	PTR const void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), f_open@fn(BANK1[12]), NULL(NULL[0]), 
		 -> fs(BIGRAM[544]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), f_open@fn(BANK1[12]), NULL(NULL[0]), 
		 -> fs(BIGRAM[544]), 

    memcmp@s2	PTR const void  size(2) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), STR_28(CODE[4]), 

    memcmp@s1	PTR const void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    utoa@buf	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 256
		 -> poligono_ext.point_long_min(BANK2[6]), poligono_ext.fence_long_min(BANK2[6]), poligono_ext.point_lat_min(BANK2[6]), poligono_ext.fence_lat_min(BANK2[6]), 
		 -> poligono_ext.fence_lat_deg(BANK2[6]), poligono_ext.point_lat_deg(BANK2[6]), poligono_ext.fence_long_deg(BANK2[6]), poligono_ext.point_long_deg(BANK2[6]), 
		 -> poligono_ext(BANK2[256]), 

    fprintf@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    fprintf@str	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_21(CODE[21]), 

    fprintf@arp	PTR void [1] size(2) Largest target is 2
		 -> ?_fprintf(BANK1[2]), 

    fputs@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    fputs@str	PTR const unsigned char  size(2) Largest target is 44
		 -> fprintf@s(BANK3[16]), string_dado(BANK1[44]), 

    fputc@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    sp__fgets	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    f_readdir@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_opendir@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_close@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_close@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_write@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_write@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_write@bw	PTR unsigned int  size(2) Largest target is 2
		 -> fputc@bw(BANK0[2]), 

    f_write@buff	PTR const void  size(2) Largest target is 1
		 -> fputc@c(BANK0[1]), 

    f_write@wbuff	PTR const unsigned char  size(2) Largest target is 1
		 -> fputc@c(BANK0[1]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_read@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sp__memcpy	PTR void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK3[20]), fs(BIGRAM[544]), 

    f_open@dir	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@path	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_22(CODE[13]), filename(BANK1[15]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_mount@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> fs(BIGRAM[544]), 

    validate@fs	PTR const struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    auto_mount@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    auto_mount@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_opendir@path(COMRAM[2]), f_open@path(BANK0[2]), 

    auto_mount@p	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_22(CODE[13]), filename(BANK1[15]), 

    check_fs@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dir	PTR PTR unsigned char  size(2) Largest target is 2
		 -> f_open@dir(BANK1[2]), 

    reserve_direntry@dptr	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dj	PTR struct _DIR_E size(2) Largest target is 15
		 -> f_open@dj(BANK1[14]), 

    reserve_direntry@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), 

    trace_path@dir	PTR PTR unsigned char  size(2) Largest target is 2
		 -> f_opendir@dir(COMRAM[2]), f_open@dir(BANK1[2]), 

    trace_path@path	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_22(CODE[13]), filename(BANK1[15]), 

    trace_path@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@dj	PTR struct _DIR_E size(2) Largest target is 15
		 -> f_open@dj(BANK1[14]), 

    trace_path@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@dptr	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    make_dirfile@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> trace_path@path(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    make_dirfile@dirname	PTR unsigned char  size(2) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), 

    S1847_DIR_E$fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    next_dir_entry@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    next_dir_entry@dj	PTR struct _DIR_E size(2) Largest target is 15
		 -> f_open@dj(BANK1[14]), 

    clust2sect@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    create_chain@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    remove_chain@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    put_cluster@p	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    put_cluster@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    get_cluster@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sync@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    FatFs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    move_window@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    escreve_frase_ram_lcd@buffer	PTR unsigned char  size(2) Largest target is 21
		 -> escreve_inteiro_lcd@texto(BANK0[7]), STR_26(CODE[11]), STR_25(CODE[10]), STR_24(CODE[16]), 
		 -> STR_23(CODE[11]), STR_20(CODE[9]), STR_19(CODE[10]), STR_18(CODE[10]), 
		 -> STR_17(CODE[14]), STR_16(CODE[21]), STR_15(CODE[15]), STR_12(CODE[8]), 
		 -> STR_11(CODE[17]), STR_10(CODE[8]), STR_9(CODE[17]), STR_8(CODE[9]), 
		 -> STR_7(CODE[4]), STR_6(CODE[6]), STR_5(CODE[4]), STR_4(CODE[9]), 
		 -> STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[14]), mensagem_inicial@msg_dois(BANK0[17]), 
		 -> mensagem_inicial@msg_linha_um(BANK0[17]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    sdc_disk_write@p_buff	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), NULL(NULL[0]), fs(BIGRAM[544]), 

    sdc_disk_read@p_buff	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), dado_arquivo(BANK3[20]), fs(BIGRAM[544]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), NULL(NULL[0]), fs(BIGRAM[544]), 

    data_buff	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), dado_arquivo(BANK3[20]), fs(BIGRAM[544]), 

    monta_sd@dado	PTR unsigned char  size(2) Largest target is 13
		 -> rawDate(BANK1[7]), rawLongitude(BANK1[13]), rawLatitude(BANK1[13]), rawTime(BANK1[11]), 

    sp__leitura_sdcard	PTR unsigned char  size(2) Largest target is 20
		 -> dado_arquivo(BANK3[20]), 

    S582_FIL$dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    fil.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    S582_FIL$fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    fil.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    stringcpy@str1	PTR unsigned char  size(2) Largest target is 12
		 -> buffer(BANK1[12]), 

    stringcpy@str2	PTR unsigned char  size(2) Largest target is 13
		 -> rawAltitude(BANK1[7]), rawSatellites(BANK0[3]), rawDate(BANK1[7]), rawCourse(BANK1[6]), 
		 -> rawSpeed(BANK1[6]), rawLongitude(BANK1[13]), rawLatitude(BANK1[13]), rawTime(BANK1[11]), 
		 -> sentence(BANK1[6]), 

    sp__Longitude	PTR unsigned char  size(2) Largest target is 13
		 -> rawLongitude(BANK1[13]), 

    verifica_fence_externo@point_buff_gps_long	PTR unsigned char  size(2) Largest target is 13
		 -> rawLongitude(BANK1[13]), 

    sp__Latitude	PTR unsigned char  size(2) Largest target is 13
		 -> rawLatitude(BANK1[13]), 

    verifica_fence_externo@point_buff_gps_lat	PTR unsigned char  size(2) Largest target is 13
		 -> rawLatitude(BANK1[13]), 

    p_tarefas	PTR FTN()void [4] size(2) Largest target is 1
		 -> troca_de_tela(), verifica_fence_externo(), disparo_gravacao(), verifica_dados_operacionais(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_GPSRead
    _GPSRead->_stringcpy

Critical Paths under _main in BANK0

    _mensagem_inicial->_posicao_cursor_lcd
    _init_lcd->_escreve_cmd_lcd
    _config_timer_zero->_write_timer_zero
    _verifica_fence_externo->_escreve_inteiro_lcd
    _escreve_inteiro_lcd->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _atoi->___wmul
    _troca_de_tela->_posicao_cursor_lcd
    _escreve_cmd_lcd->_delay
    _inicializa_uart->_configura_baudrate_uart
    _configura_baudrate_uart->___aldiv
    _fprintf->_fputs
    _fputs->_fputc
    _fputc->_f_write
    _f_write->_create_chain
    _f_open->_trace_path
    _trace_path->_next_dir_entry
    _make_dirfile->_memset
    _reserve_direntry->_create_chain
    _next_dir_entry->_get_cluster
    _clust2sect->___lmul
    _remove_chain->_put_cluster
    _auto_mount->_check_fs
    _disk_initialize->_sdc_disk_initialize
    _sdc_disk_initialize->_sdc_reset
    _sdc_reset->_command
    _posicao_cursor_lcd->_endereco_cursor_lcd
    _endereco_cursor_lcd->_delay
    _escreve_frase_ram_lcd->_escreve_caractere_lcd
    _escreve_caractere_lcd->_delay
    _check_fs->_disk_read
    _f_lseek->_create_chain
    _create_chain->_put_cluster
    _put_cluster->_move_window
    _get_cluster->_move_window
    _f_close->_f_sync
    _f_sync->_sync
    _validate->_disk_status
    _disk_status->_sdc_disk_status
    _sync->_move_window
    _move_window->_disk_read
    _move_window->_disk_write
    _disk_write->_sdc_disk_write
    _sdc_disk_write->_command
    _disk_read->_sdc_disk_read
    _sdc_disk_read->_command
    _proceed->_escreve_SPI
    _command->_dummy_clocks
    _command->_wait_ready
    _dados_gps_to_sd->_monta_sd
    _monta_sd->_strlen

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_escalonador
    _escrita_sdcard->_f_open
    _fprintf->_fputs

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _escalonador->_verifica_fence_externo
    _escrita_sdcard->_fprintf

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  451663
                    _dados_gps_to_sd
                        _escalonador
                 _inicializa_tarefas
                    _inicializa_uart
                      _init_hardware
                           _init_lcd
                   _mensagem_inicial
 ---------------------------------------------------------------------------------
 (1) _mensagem_inicial                                    36    36      0    6283
                                              6 BANK0     36    36      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0     613
                                              3 BANK0      1     1      0
                              _delay
                    _escreve_cmd_lcd
 ---------------------------------------------------------------------------------
 (1) _init_hardware                                        0     0      0     247
                  _config_timer_dois
                  _config_timer_zero
                     _init_interrupt
                     _init_oscilador
                         _init_ports
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_oscilador                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _config_timer_zero                                    0     0      0     247
                   _write_timer_zero
 ---------------------------------------------------------------------------------
 (3) _write_timer_zero                                     4     2      2     247
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _config_timer_dois                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_tarefas                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _escalonador                                          3     3      0  442092
                                             35 BANK1      3     3      0
                   _disparo_gravacao *
                      _troca_de_tela *
        _verifica_dados_operacionais *
             _verifica_fence_externo *
 ---------------------------------------------------------------------------------
 (2) _verifica_fence_externo                             131   131      0   18595
                                             33 BANK0      6     6      0
                                              0 BANK3    121   121      0
                           _Latitude
                          _Longitude
                               _atoi
              _escreve_frase_ram_lcd
                _escreve_inteiro_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _escreve_inteiro_lcd                                  9     7      2    7115
                                             24 BANK0      9     7      2
              _escreve_frase_ram_lcd
                               _itoa
 ---------------------------------------------------------------------------------
 (4) _itoa                                                 8     2      6    3936
                                             16 BANK0      8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (5) _utoa                                                 9     3      6    3163
                                              7 BANK0      9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4    1132
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4    1321
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 7     5      2    2545
                                              6 BANK0      7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _Longitude                                            2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Latitude                                             2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _verifica_dados_operacionais                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _troca_de_tela                                        0     0      0    6203
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (2) _escreve_cmd_lcd                                      1     1      0     477
                                              2 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _disparo_gravacao                                     0     0      0  417071
                     _escrita_sdcard
 ---------------------------------------------------------------------------------
 (3) _escrita_sdcard                                       2     2      0  417071
                        _desliga_SPI
                       _desliga_uart
                            _f_close
                            _f_lseek
                            _f_mount
                             _f_open
                            _fprintf
                     _inicializa_SPI
                    _inicializa_uart
 ---------------------------------------------------------------------------------
 (1) _inicializa_uart                                      0     0      0    1118
            _configura_baudrate_uart
 ---------------------------------------------------------------------------------
 (2) _configura_baudrate_uart                             14    10      4    1118
                                             14 BANK0     14    10      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     805
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (4) _inicializa_SPI                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _fprintf                                             49    37     12  128922
                                              6 BANK1     14     2     12
                                              0 BANK3     35    35      0
                            ___lldiv
                            ___llmod
                             ___wmul
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (5) _fputs                                                7     3      4   62151
                                            140 BANK0      1     1      0
                                              0 BANK1      6     2      4
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                                7     3      4   61658
                                            133 BANK0      7     3      4
                            _f_write
 ---------------------------------------------------------------------------------
 (7) _f_write                                             33    25      8   60846
                                            100 BANK0     33    25      8
                         _clust2sect
                       _create_chain
                         _disk_write
                             _memcpy
                        _move_window
                           _validate
 ---------------------------------------------------------------------------------
 (5) ___llmod                                              9     1      8     412
                                              0 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (4) _f_open                                              44    39      5  201046
                                            119 BANK0      9     4      5
                                              0 BANK1     35    35      0
                         _auto_mount
                        _get_fattime
                             _memcpy
                             _memset
                        _move_window
                       _remove_chain
                   _reserve_direntry
                         _trace_path
 ---------------------------------------------------------------------------------
 (5) _trace_path                                          23    15      8   39428
                                             96 BANK0     23    15      8
                         _clust2sect
                       _make_dirfile
                             _memcmp
                        _move_window
                     _next_dir_entry
 ---------------------------------------------------------------------------------
 (6) _make_dirfile                                        13     9      4    2753
                                              8 BANK0     13     9      4
                             _memset
 ---------------------------------------------------------------------------------
 (5) _reserve_direntry                                    18    14      4   77161
                                            100 BANK0     18    14      4
                         _clust2sect
                       _create_chain
                         _disk_write
                             _memset
                        _move_window
                     _next_dir_entry
 ---------------------------------------------------------------------------------
 (6) _next_dir_entry                                      13    11      2   18753
                                             83 BANK0     13    11      2
                         _clust2sect
                        _get_cluster
 ---------------------------------------------------------------------------------
 (8) _clust2sect                                          11     7      4    1487
                                             12 BANK0     11     7      4
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) _remove_chain                                         8     6      2   33533
                                             86 BANK0      8     6      2
                        _get_cluster
                        _put_cluster
 ---------------------------------------------------------------------------------
 (8) _memcpy                                              11     5      6    1018
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (5) _auto_mount                                          40    37      3   31403
                                             51 BANK0     40    37      3
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                             _memset
 ---------------------------------------------------------------------------------
 (7) _memset                                               8     2      6    1217
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (6) _disk_initialize                                      4     4      0   19676
                                             32 BANK0      2     2      0
                _sdc_disk_initialize
 ---------------------------------------------------------------------------------
 (7) _sdc_disk_initialize                                 13    13      0   19546
                                             19 BANK0     13    13      0
                            _command
                       _dummy_clocks
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
                          _sdc_reset
 ---------------------------------------------------------------------------------
 (8) _sdc_reset                                           20    20      0    9339
                                             12 BANK0      7     7      0
                            _command
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (2) _posicao_cursor_lcd                                   3     2      1    3027
                                              3 BANK0      3     2      1
                _endereco_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _endereco_cursor_lcd                                  1     1      0     353
                                              2 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _escreve_frase_ram_lcd                                2     0      2    2699
                                              3 BANK0      2     0      2
              _escreve_caractere_lcd
 ---------------------------------------------------------------------------------
 (3) _escreve_caractere_lcd                                1     1      0     384
                                              2 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                2     2      0     136
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _check_fs                                             8     4      4    6655
                                             43 BANK0      8     4      4
                          _disk_read
                             _memcmp
 ---------------------------------------------------------------------------------
 (6) _memcmp                                               9     3      6     701
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (9) ___lmul                                              12     4      8     516
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (4) _f_mount                                              3     1      2     394
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _f_lseek                                             29    23      6   55200
                                            100 BANK0     29    23      6
                            ___lldiv
                       _create_chain
                        _get_cluster
                           _validate
 ---------------------------------------------------------------------------------
 (8) _create_chain                                        14    12      2   34596
                                             86 BANK0     14    12      2
                        _get_cluster
                        _put_cluster
 ---------------------------------------------------------------------------------
 (9) _put_cluster                                         22    18      4   16723
                                             64 BANK0     22    18      4
                             ___wmul
                        _move_window
 ---------------------------------------------------------------------------------
 (9) _get_cluster                                         19    17      2   16432
                                             64 BANK0     19    17      2
                             ___wmul
                        _move_window
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1392
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8     901
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (4) _f_close                                              3     1      2   30391
                                             75 BANK0      3     1      2
                             _f_sync
 ---------------------------------------------------------------------------------
 (5) _f_sync                                               9     7      2   30018
                                             66 BANK0      9     7      2
                        _get_fattime
                        _move_window
                               _sync
                           _validate
 ---------------------------------------------------------------------------------
 (8) _validate                                             6     2      4    1250
                                              7 BANK0      6     2      4
                        _disk_status
 ---------------------------------------------------------------------------------
 (9) _disk_status                                          5     5      0     226
                                              2 BANK0      5     5      0
                    _sdc_disk_status
 ---------------------------------------------------------------------------------
 (10) _sdc_disk_status                                     4     4      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _sync                                                 2     2      0   14169
                                             64 BANK0      2     2      0
                         _disk_ioctl
                        _move_window
 ---------------------------------------------------------------------------------
 (8) _move_window                                         21    17      4   13831
                                             43 BANK0     21    17      4
                          _disk_read
                         _disk_write
 ---------------------------------------------------------------------------------
 (9) _disk_write                                          12     5      7    6078
                                             31 BANK0     12     5      7
                     _sdc_disk_write
 ---------------------------------------------------------------------------------
 (10) _sdc_disk_write                                     19    12      7    4614
                                             12 BANK0     19    12      7
                            _command
                       _dummy_clocks
                        _escreve_SPI
                        _leitura_SPI
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (9) _disk_read                                           12     5      7    5647
                                             31 BANK0     12     5      7
                      _sdc_disk_read
 ---------------------------------------------------------------------------------
 (10) _sdc_disk_read                                      24    17      7    4450
                                             12 BANK0     19    12      7
                            _command
                       _dummy_clocks
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (11) _response                                            1     1      0      34
                                              0 BANK0      1     1      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (11) _proceed                                             0     0      0      34
                        _escreve_SPI
 ---------------------------------------------------------------------------------
 (11) _command                                             7     2      5    3403
                                              5 BANK0      7     2      5
                       _dummy_clocks
                        _escreve_SPI
                         _wait_ready
 ---------------------------------------------------------------------------------
 (12) _wait_ready                                         15    15      0      99
                                              0 BANK0      5     5      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (12) _escreve_SPI                                         2     2      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (11) _dummy_clocks                                        5     5      0      68
                                              0 BANK0      5     5      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (12) _leitura_SPI                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _disk_ioctl                                           7     4      3     304
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (5) _get_fattime                                         51    47      4     201
                                              0 BANK0     51    47      4
 ---------------------------------------------------------------------------------
 (4) _desliga_uart                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _desliga_SPI                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _dados_gps_to_sd                                      0     0      0    1310
                           _monta_sd
 ---------------------------------------------------------------------------------
 (2) _monta_sd                                             5     3      2    1310
                                              6 BANK0      5     3      2
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     220
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (16) _isr                                                21    21      0    2930
                                             11 COMRAM    21    21      0
                            _GPSRead
                   _recebe_dado_uart
                 i2_write_timer_zero
 ---------------------------------------------------------------------------------
 (17) i2_write_timer_zero                                  4     2      2     131
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (17) _recebe_dado_uart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (17) _GPSRead                                             2     2      0    2669
                                              9 COMRAM     2     2      0
                             _strcmp
                          _stringcpy
 ---------------------------------------------------------------------------------
 (18) _stringcpy                                           9     3      6    2207
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (18) _strcmp                                              6     2      4     395
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _dados_gps_to_sd
     _monta_sd
       _strlen
   _escalonador
     _disparo_gravacao *
       _escrita_sdcard
         _desliga_SPI
         _desliga_uart
         _f_close
           _f_sync
             _get_fattime
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _sync
               _disk_ioctl
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _validate
               _disk_status
                 _sdc_disk_status
         _f_lseek
           ___lldiv
           _create_chain
             _get_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _put_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
           _get_cluster
             ___wmul
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
           _validate
             _disk_status
               _sdc_disk_status
         _f_mount
         _f_open
           _auto_mount
             ___lldiv
             ___lmul
             _check_fs
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _memcmp
             _disk_initialize
               _sdc_disk_initialize
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
                 _sdc_reset
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _disk_status
               _sdc_disk_status
             _memset
           _get_fattime
           _memcpy
           _memset
           _move_window
             _disk_read
               _sdc_disk_read
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _disk_write
               _sdc_disk_write
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
           _remove_chain
             _get_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _put_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
           _reserve_direntry
             _clust2sect
               ___lmul
             _create_chain
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
               _put_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
             _disk_write
               _sdc_disk_write
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _memset
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _next_dir_entry
               _clust2sect
                 ___lmul
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
           _trace_path
             _clust2sect
               ___lmul
             _make_dirfile
               _memset
             _memcmp
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _next_dir_entry
               _clust2sect
                 ___lmul
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
         _fprintf
           ___lldiv
           ___llmod
           ___wmul
           _fputc
             _f_write
               _clust2sect
                 ___lmul
               _create_chain
                 _get_cluster
                   ___wmul
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                 _put_cluster
                   ___wmul
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _memcpy
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
               _validate
                 _disk_status
                   _sdc_disk_status
           _fputs
             _fputc
               _f_write
                 _clust2sect
                   ___lmul
                 _create_chain
                   _get_cluster
                     ___wmul
                     _move_window
                       _disk_read
                         _sdc_disk_read
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                       _disk_write
                         _sdc_disk_write
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                   _put_cluster
                     ___wmul
                     _move_window
                       _disk_read
                         _sdc_disk_read
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                       _disk_write
                         _sdc_disk_write
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _memcpy
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                 _validate
                   _disk_status
                     _sdc_disk_status
         _inicializa_SPI
         _inicializa_uart
           _configura_baudrate_uart
             ___aldiv
     _troca_de_tela *
       _escreve_cmd_lcd
         _delay
       _escreve_frase_ram_lcd
         _escreve_caractere_lcd
           _delay
       _posicao_cursor_lcd
         _endereco_cursor_lcd
           _delay
     _verifica_dados_operacionais *
     _verifica_fence_externo *
       _Latitude
       _Longitude
       _atoi
         ___wmul
         _isdigit
       _escreve_frase_ram_lcd
         _escreve_caractere_lcd
           _delay
       _escreve_inteiro_lcd
         _escreve_frase_ram_lcd
           _escreve_caractere_lcd
             _delay
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
       _posicao_cursor_lcd
         _endereco_cursor_lcd
           _delay
   _inicializa_tarefas
   _inicializa_uart
     _configura_baudrate_uart
       ___aldiv
   _init_hardware
     _config_timer_dois
     _config_timer_zero
       _write_timer_zero
     _init_interrupt
     _init_oscilador
     _init_ports
   _init_lcd
     _delay
     _escreve_cmd_lcd
       _delay
   _mensagem_inicial
     _escreve_cmd_lcd
       _delay
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay

 _isr (ROOT)
   _GPSRead
     _strcmp
     _stringcpy
   _recebe_dado_uart
   i2_write_timer_zero

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     220      21       26.6%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100     79      E5      11       89.5%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     26      FA       7       97.7%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     8D      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     20      3F       1       67.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     3BE      20        0.0%
DATA                 0      0     5DE       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Apr 18 15:48:20 2022

                        next_dir_entry@idx 00BE                   __end_of_mensagem_inicial 4B44  
                      next_dir_entry@clust 00BC                                _SSPSTATbits 000FC7  
                         ??_init_interrupt 0060               __size_of_escreve_inteiro_lcd 0040  
                                       _fs 03E5                        ___wmul@multiplicand 0062  
                              _put_cluster 2B20                           disk_write@sector 0081  
                             ?_escalonador 0001                             create_chain@fs 00BC  
                         disk_write@result 0088                           ?_inicializa_uart 0001  
                                      l210 0894                                        l106 460A  
                                      l114 550E                                        l115 551E  
                                      l140 00E2                                        l108 469C  
                                      l206 08A6                                        l207 082E  
                   __size_of_troca_de_tela 01D4                                        l208 085C  
                                      l152 01D8                                        l136 0092  
                                      l145 00FC                                        l233 3014  
                                      l138 03D4                                        l250 3138  
                                      l155 074E                                        l163 044A  
                                      l147 01BE                                        l139 00D6  
                                      l172 0570                                        l156 03E0  
                                      l252 318A                                        l244 30A0  
                                      l405 4E16                                        l165 0500  
                                      l157 03EC                                        l245 30E2  
                                      l430 3DA4                                        l406 4E10  
                                      l190 07EC                                        l174 0626  
                                      l166 0512                                        l238 3010  
                                      l431 3DB0                                        l159 04FC  
                                      l239 30A4                                        l176 07F2  
                                      l168 0622                                        l248 30DE  
                                      l441 3E3A                                        l521 522E  
                                      l177 0756                                        l249 313C  
                                      l442 3E46                                        l434 3DD4  
                                      l522 5206                                        l530 5422  
                                      l435 3DE0                                        l603 22C8  
                                      l419 454A                                        l187 0786  
                                      l444 3E6A                                        l620 3BD2  
                                      l540 4952                                        l524 5216  
                                      l700 4CD6                                        l604 22F2  
                                      l532 542E                                        l196 089A  
                                      l188 07B4                                        l429 3E9C  
                                      l445 3E92                                        l613 3B98  
                                      l541 498C                                        l525 522A  
                                      l701 4CDE                                        l533 543A  
                                      l197 07FE                                        l446 3E70  
                                      l438 3E0A                                        l622 3C06  
                                      l614 3B84                                        l630 3280  
                                      l710 4D16                                        l702 4CE0  
                                      l439 3E16                                        l623 3BEE  
                                      l631 31CC                                        l711 4D1E  
                                      l703 4CE8                                        l640 32FE  
                                      l712 4D20                                        l704 4CEA  
                                      l720 4BE6                                        l608 2334  
                                      l553 5562                                        l625 3C40  
                                      l617 3BBE                                        l537 4990  
                                      l633 3220                                        l545 4AA4  
                                      l705 4D00                                        l721 4BF6  
                                      l561 46BA                                        l529 543E  
                                      l554 5556                                        l538 4920  
                                      l642 3346                                        l546 4A3C  
                                      l730 4C64                                        l706 4D02  
                                      l722 4C06                                        l562 46D8  
                                      l619 3BDA                                        l635 3250  
                                      l731 4C66                                        l707 4D0A  
                                      l723 4C16                                        l571 205A  
                                      l556 555A                                        l388 5348  
                                      l484 56BE                                        l548 4A6E  
                                      l740 4CA4                                        l732 4C6E  
                                      l708 4D0C                                        l716 4C40  
                                      l580 20BA                                        l572 2070  
                                      l557 555E                                        l389 533A  
                                      l397 546A                                        l549 4AA0  
                                      l741 4CA6                                        l733 4C70  
                                      l709 4D14                                        l717 4C1E  
                                      l581 20E4                                        l478 575E  
                                      l638 32CA                                        l742 4CAE  
                                      l734 4C78                                        l718 4BDA  
                                      l566 473A                                        l574 207C  
                                      l647 5680                                        l743 4CB0  
                                      l735 4C7A                                        l719 4C3A  
                                      l736 4C90                                        l728 4C5A  
                                      l680 48A6                                        l737 4C92  
                                      l729 4C5C                                        l761 50AA  
                                      l681 48AE                                        l738 4C9A  
                                      l762 5080                                        l578 220A  
                                      l594 21FA                                        l586 216E  
                                      l690 48E6                                        l682 48B0  
                                      l667 558A                                        l739 4C9C  
                                      l579 20B0                                        l691 48EE  
                                      l683 48B8                                        l932 3D72  
                                      l692 48F0                                        l684 48BA  
                                      l669 559A                                        l597 223A  
                                      l685 48D0                                        l677 489A  
                                      l598 2264                                        l686 48D2  
                                      l678 489C                                        l687 48DA  
                                      l679 48A4                                        l688 48DC  
                                      l689 48E4                                        l699 4CD4  
                                      _PCL 000FF9                                        _PR2 000FCB  
                                      _fil 0134                           ??_init_oscilador 0060  
                                      _isr 0008                               disk_read@res 008A  
                                      prod 000FF3                             ??_create_chain 00B8  
                                      tosl 000FFD                                        wreg 000FE8  
                __size_of_write_timer_zero 0012                            create_chain@mcl 00BA  
                          create_chain@ncl 00C2                            create_chain@scl 00C0  
                  ??_escreve_frase_ram_lcd 0065                                       l1012 3622  
                                     l1020 4F20                                       l1014 36CC  
                                     l1030 2F08                                       l1015 36AE  
                                     l1024 2F96                                       l1040 2BA8  
                                     l1120 3888                                       l1009 359C  
                                     l1025 2DE6                                       l1121 38F8  
                                     l1018 4F02                                       l1034 2F28  
                                     l1202 27A8                                       l1027 2FB0  
                                     l1051 2D86                                       l1043 2BE2  
                                     l1211 49E4                                       l1052 2CF4  
                                     l1220 0F3A                                       l1053 2D28  
                                     l1045 2C16                                       l1213 4A04  
                                     l1221 0F60                                       l1061 45A0  
                                     l1205 2856                                       l1125 39C2  
                                     l1038 2D6A                                       l1054 2D66  
                                     l1046 2C72                                       l1214 4A32  
                                     l1230 1060                                       l1062 45CA  
                                     l1206 2816                                       l1310 0E4E  
                                     l1039 2B48                                       l1207 2846  
                                     l1311 09D8                                       l2104 53EE  
                                     l1048 2CCA                                       l1080 347E  
                                     l1072 3400                                       l1224 0F90  
                                     l1152 3968                                       l1312 0CD4  
                                     l1400 4FE8                                       l2105 53E8  
                                     l1081 3466                                       l1073 33E2  
                                     l1233 10A8                                       l1225 0F8C  
                                     l1217 0EE8                                       l1057 45D2  
                                     l1161 399E                                       l1145 3936  
                                     l1137 3926                                       l1313 0B0E  
                                     l1234 11E4                                       l1226 0FBE  
                                     l1218 0EE2                                       l1058 4560  
                                     l1170 2442                                       l1322 0EBC  
                                     l1330 0D96                                       l1314 0A94  
                                     l1410 4EA8                                       l1243 51B4  
                                     l1083 34A2                                       l1075 33F8  
                                     l1235 12D6                                       l1227 0FCA  
                                     l1059 4582                                       l1163 39A0  
                                     l1155 3980                                       l1147 393E  
                                     l1331 0EAA                                       l1323 0C56  
                                     l1403 5020                                       l1084 34D2  
                                     l1076 3408                                       l1068 33B6  
                                     l1236 12EC                                       l1148 3946  
                                     l1172 246E                                       l1260 1D14  
                                     l1324 0BFE                                       l1316 0AB4  
                                     l1420 1C58                                       l1085 3510  
                                     l1229 103E                                       l1093 3758  
                                     l1157 3982                                       l1149 394E  
                                     l1173 24D4                                       l1078 3436  
                                     l1350 16B0                                       l1246 5130  
                                     l1190 2664                                       l1182 253C  
                                     l1262 1D72                                       l1326 0E14  
                                     l1422 1982                                       l1239 51A2  
                                     l1335 3FE4                                       l1351 169C  
                                     l1503 4F8E                                       l1191 268C  
                                     l1175 24C8                                       l1167 241E  
                                     l1263 1D9A                                       l1255 1CA4  
                                     l1327 0CC6                                       l1431 1A44  
                                     l1423 192C                                       l1415 18B0  
                                     l1336 3F2C                                       l1360 170E  
                                     l1248 5148                                       l1504 4FA2  
                                     l1088 43A2                                       l1192 26A0  
                                     l1272 1ED4                                       l1408 4EB2  
                                     l1432 1A50                                       l1353 187A  
                                     l1249 5168                                       l1097 3840  
                                     l1193 26CC                                       l1185 2562  
                                     l1273 1EF0                                       l1257 1EC8  
                                     l1409 4E74                                       l1433 1A5C  
                                     l1098 3802                                       l1186 2576  
                                     l1178 251A                                       l1266 1E68  
                                     l1258 1D68                                       l1450 1BE2  
                                     l1442 1AEC                                       l1418 18FE  
                                     l1355 1780                                       l1347 1492  
                                     l1195 2738                                       l1179 2548  
                                     l1267 1E38                                       l1259 1CF0  
                                     l1443 1B04                                       l1435 1A82  
                                     l1427 19AE                                       l1364 1814  
                                     l1356 16BA                                       l1276 1F0C  
                                     l1452 1BF0                                       l1444 1B38  
                                     l1428 19E8                                       l1357 16FA  
                                     l1349 164E                                       l1429 1A34  
                                     l1438 1AA8                                       l1199 2782  
                                     l1551 41E6                                       l1448 1BB4  
                                     l1560 4284                                       l1552 41FE  
                                     l1449 1C0E                                       l1554 422C  
                                     l1555 4220                                       l1660 40F2  
                                     l1558 4260                                       l1662 413A  
                                     l1559 426E                                       l1840 560C  
                                     l1665 418A                                       l1666 414C  
                                     l1850 440C                                       l1659 40F8  
                                     l1668 41BE                                       l1852 4448  
                                     l1933 504A                                       l1853 448A  
                                     l1934 5042                                       l1846 52B6  
                                     l1943 52EC                                       l1880 4B74  
                                     l1944 52E4                                       l1881 4B68  
                                     l1937 506A                                       l1970 54E2  
                                     l1890 4DB8                                       l1938 5074  
                                     l1971 54D0                                       l1891 4DAC  
                                     l1947 5304                                       l1884 4BA8  
                                     l1964 51EC                                       l1948 530E  
                                     l1885 4BB6                                       l1957 47CC  
                                     l1965 51CA                                       l1958 4746  
                                     l1894 4DE0                                       l1959 47C4  
                                     l1895 4DEE                                       ?_isr 0001  
                                     l9544 3244                                       l9576 32F2  
                                     l9674 5592                      _escreve_caractere_lcd 4C46  
                                     l9668 5582                                       STR_1 61EE  
                                     l9784 361A                                       STR_2 626E  
                                     STR_3 6269                                       STR_4 6246  
                                     STR_5 6277                                       STR_6 6263  
                                     STR_7 6277                                       STR_8 6246  
                                     STR_9 61B0                             timer_dois@flag 0034  
                                     _BRGH 007D62                            __end_of_GPSRead 2B20  
                                     _T0IF 007F92                                       _CREN 007D5C  
                             ?_escreve_SPI 0001                                       _LATB 000F8A  
                                     _PIE1 000F9D                                       _RCIF 007CF5  
                                     i2l91 3A3E                                       i2l92 3AC0  
                                     i2l93 3A58                                       i2l95 3A86  
                                     i2l96 3A94                                       i2l98 3AB4  
                                     i2l99 3AC8                                       _TMR2 000FCC  
                                     _SPEN 007D5F                                       _TRMT 007D61  
                                     _TXEN 007D65                                       _SYNC 007D64  
                             trace_path@dj 00C0                               trace_path@fn 00C2  
                             trace_path@ds 00D4                               trace_path@fs 00D0  
                            ?_make_dirfile 0068                                       _Term 0038  
                                     _dado 0033                                       _flag 00F5  
                                     _atoi 40F0                                       _main 54F6  
                                     _fsid 00F8                                       _itoa 5290  
                                     fsr0h 000FEA                                       fsr1h 000FE2  
                                     indf0 000FEF                                       fsr2h 000FDA  
                                     fsr0l 000FE9                                       indf1 000FE7  
                                     indf2 000FDF                                       fsr1l 000FE1  
                                     fsr2l 000FD9                                       btemp 0040  
                                     _utoa 4404                                       _sync 4ECA  
                            disk_ioctl@cmd 0060                              disk_read@buff 007F  
                            disk_ioctl@res 0064                              disk_read@pdrv 0087  
                                     prodh 000FF4                                       prodl 000FF3  
                                     start 000E                    ?_verifica_fence_externo 0001  
                sdc_disk_initialize@buff_i 007B                               ___param_bank 000000  
                sdc_disk_initialize@count1 0077                  sdc_disk_initialize@count2 007D  
                              _string_dado 0108                                      ??_isr 000C  
                  __size_of_escrita_sdcard 00A8           __size_of_configura_baudrate_uart 0132  
                                    l10014 46FA                                      l10122 519E  
                                    l10052 3408                                      l10048 33E2  
                                    l10226 219E                                      l10138 51CA  
                                    l10332 4746                                      l10324 54D0  
                                    l11072 105C                                      l11154 4EA8  
                                    l10196 2106                                      l12150 3DD8  
                                    l12136 3DA8                                      l12242 4602  
                                    l12180 3E3E                                      l11460 18B0  
                                    l12166 3E0E                                      l11552 1AC2  
                                    l11492 196E                                      l11708 4186  
                                    l11904 0568                                      l11816 01B6  
                                    l11826 01D0                                      l11860 03E4  
                                    l11772 008A                                      l11872 0442  
                                    l11956 07B4                                      l11892 050A  
                                    l11788 00DA                                      l11798 00F4  
                                    l11996 085C                            __end_of___aldiv 4296  
                                    ?_atoi 0066                                      ?_main 0001  
                                    ?_itoa 0070                                      STR_10 624F  
                                    STR_11 619F                                      STR_12 624F  
                                    STR_20 623D                                      STR_13 625D  
                                    STR_21 6175                                      STR_14 6257  
                                    STR_22 61FC                                      STR_23 6214  
                                    STR_15 61D1                                      STR_24 61C1  
                                    STR_16 618A                                      STR_25 621F  
                                    STR_17 61E0                                      STR_18 6233  
                                    STR_26 6209                                      STR_27 627B  
                                    STR_19 6229                                      STR_28 6273  
                             ?_leitura_SPI 0001                            __end_of___lldiv 4BC8  
                                    ?_utoa 0067                                      ?_sync 0001  
                                    u13000 219E                                      _T0CON 000FD5  
                                    u12105 329C                                      u12130 3318  
                                    u12140 3354                                      u13020 21AA  
                                    u13110 230A                                      u12400 3672  
                                    u13120 2342                                      u14000 504E  
                                    u12065 31F2                            __end_of___llmod 4E00  
                                    u12090 326A                                      u12170 55A2  
                                    u13140 4774                                      u12350 355A  
                                    u13070 228E                                      u14030 52F0  
                                    u13160 479C                                      u12440 50A0  
                                    _T2CON 000FCA                                      u12450 50CA  
                                    u14130 45B8                                      u12515 2E8A  
                                    u13147 476A                                      u14140 45E0  
                                    u14205 248E                                      u12470 2DB0  
                                    u12710 33A0                                      u15110 1794  
                                    u14150 45F8                                      u13510 38D2  
                                    u15015 1506                                      u13167 4792  
                                    u12447 5096                                      u13335 0C42  
                                    u14055 3C6C                                      u12720 33AC  
                                    u15120 17DA                                      u14160 2404  
                                    u12545 2F14                                      u12625 2CD6  
                                    u12457 50C0                                      u14065 3CB8  
                                    u15210 1990                                      u16010 076E  
                                    u11940 548E                                      u14420 0F08  
                                    u14340 2724                                      u13380 0E56  
                                    u16100 07B0                                      u12565 2B78  
                                    u15125 17D0                                      u14325 26EC  
                                    u14085 3CFC                                      u12830 34FE  
                                    u12670 46FA                                      u13470 37DA  
                                    u12495 2E16                                      u13455 3764  
                                    u14167 23FA                                      u13295 0B5C  
                                    u14095 3D46                                      u11960 4E20  
                                    u12920 208C                                      u14440 0F2E  
                                    u13480 37FE                                      u15090 171C  
                                    u12930 209C                                      u14610 12D2  
                                    u14370 277E                                      u13490 38C0  
                                    u15410 1C30                                      u15250 1A2A  
                                    u16130 07CE                                      u12595 2C42  
                                    u14427 0EFE                                      u13820 4A00  
                                    u14620 12E8                                      u15180 18FC  
                                    u12941 20A6                                      u14605 11FC  
                                    u15421 1C68                                      u12870 519E  
                                    u14390 27A4                                      u16310 088E  
                                    u16150 07E6                                      u11975 3B32  
                                    u14447 0F24                                      u12960 2106  
                                    u15360 1B94                                      u16160 0812  
                                    u16080 079A                                      u13497 38B6  
                                    u14570 105C                                      u14730 4DBC  
                                    u13930 4230                                      u16330 08AE  
                                    u16250 0846                                      u14635 1370  
                                    u16340 08E0                                      u16180 0828  
                                    u16420 301E                                      u13845 4002  
                                    u16350 0906                                      u16430 3026  
                                    u13855 401E                                      u15631 53A8  
                                    u14920 1EEC                                      u15560 4914  
                                    u15800 01CC                                      u13865 404E  
                                    u13970 4B78                                      u14850 1D96  
                                    u16290 0876                                      u13875 4068  
                                    u17307 4B2E                                      u16348 08E4  
                                    u15820 0282                                      u15740 00F0  
                                    u16460 30B2                                      u16380 2FC6  
                                    u16700 4AE4                                      u15661 001C  
                                    u17317 480C                                      u16358 090A  
                                    u15910 0506                                      u15830 0286  
                                    u16390 2FCC                                      u15671 002E  
                                    u17327 4828                                      u14880 1E34  
                                    u15760 01AE                                      u15681 0040  
                                    u17337 4844                                      u15770 01B2  
                                    u17347 2026                                      u15691 0052  
                                    u16580 3E04                                      u15940 0520  
                                    u17357 21BA                                      u15870 03FA  
                                    u17367 226C                                      u17377 5324  
                                    u16690 4ACC                            __end_of___lwdiv 507E  
                                    u15980 062C                                      u16678 465A  
                                    u16679 466E                            __end_of___lwmod 5318  
                                    i2l300 28B2                                      i2l310 2958  
                                    i2l311 2980                                      i2l320 2A3E  
                                    i2l312 29AA                                      i2l304 28D4  
                                    i2l321 2A68                                      i2l305 28DE  
                                    i2l322 2A92                                      i2l314 29C6  
                                    i2l323 2ABE                                      i2l315 29CA  
                                    i2l307 2934                                      i2l324 2AEA  
                                    i2l316 29F4                                      i2l325 2AF2  
                                    i2l309 2954                                      i2l318 2A10  
                                    i2l319 2A14                                      i2l292 50D6  
                                    i2l297 2B0A                                      i2l298 2894  
                                    i2l299 28A2                                      i2l958 5708  
                                    _RCREG 000FAE                                      _RCSTA 000FAB  
                                    _TMR0H 000FD7                                      _TMR0L 000FD6  
                                    _SPBRG 000FAF                                      _TRISA 000F92  
                                    _TRISB 000F93                                      _TRISC 000F94  
                                    _TRISD 000F95                                      _TRISE 000F96  
                          __end_of_f_close 5550                                      _TXREG 000FAD  
                            trace_path@dir 00C6                                      _TXSTA 000FAC  
                                    _FatFs 00FA                            __end_of_f_lseek 188C  
                      ___lmul@multiplicand 0064                 __size_of_config_timer_dois 000E  
                          __end_of_f_mount 516C                            __end_of_f_write 0ED0  
               __size_of_config_timer_zero 001C                              get_cluster@bc 00AF  
                            get_cluster@fs 00B1                              get_cluster@wc 00A9  
                          __end_of_command 4E68                                      _delay 557C  
                          clust2sect@clust 006C                            __end_of_fprintf 1C6A  
                                    _fputc 4FD4                                      _fputs 4E68  
                          __end_of_isdigit 5614                   __size_of_escreve_cmd_lcd 0094  
                                    atoi@a 006B                                      atoi@s 0066  
                           ??_make_dirfile 006C                             disk_ioctl@buff 0061  
                                    pclath 000FFA                             disk_read@count 0085  
                                    tablat 000FF5                             disk_ioctl@pdrv 0063  
                         ?_dados_gps_to_sd 0001                            __end_of_proceed 575A  
                                    plusw1 000FE3                                      plusw2 000FDB  
                                    utoa@c 006F                                      utoa@v 006D  
                                    status 000FD8                              _troca_de_tela 2FBC  
                                    wtemp6 0041                              disk_write@res 008A  
           __end_of_verifica_fence_externo 0916                            __initialization 4296  
                      disk_initialize@pdrv 0080                        disk_initialize@stat 0081  
                             __end_of_atoi 41C8                               __end_of_main 5524  
                             clust2sect@fs 0075                               __end_of_itoa 52D4  
                             __end_of_utoa 44AE                               __end_of_sync 4F24  
                       _inicializa_tarefas 4D2E                            escalonador@cont 01F9  
                         __end_of_Latitude 574E                        reserve_direntry@dir 00C6  
                        create_chain@clust 00B6                                auto_mount@p 00B1  
                        create_chain@cstat 00BE   verifica_fence_externo@point_buff_gps_lat 0370  
                            sdc_reset@buff 0072                                     ??_atoi 0068  
                                   ??_main 00ED                                     ??_itoa 0076  
                                   ??_utoa 006D                                     ??_sync 00A0  
                            __activetblptr 000002                        ?_inicializa_tarefas 0001  
                     __end_of_desliga_uart 5736                                  ??_GPSRead 000A  
                           _next_dir_entry 36D0                       __size_of_desliga_SPI 000C  
                        get_fattime@f_time 008A                           ??_sdc_disk_write 0073  
                                   ?_delay 0001                     ?_escreve_caractere_lcd 0001  
                                   _ADCON1 000FC1                                     ?_fputc 00E5  
                         ___llmod@dividend 0060                                     ?_fputs 01D4  
                       auto_mount@bootsect 00A9                                     _INT0IE 007F94  
                                   _INT0IF 007F91                              ?_dummy_clocks 0001  
                                   i2l2096 5252                                     i2l2097 524A  
                                   _PCLATH 000FFA                                     _INTCON 000FF2  
                  __size_of_inicializa_SPI 0020                             ?_troca_de_tela 0001  
                                   _TMR0IF 007F92                                     _TMR2IF 007CF1  
                       auto_mount@maxclust 00A5                   __end_of_recebe_dado_uart 570C  
                                   _SPPCFG 000F63                                     _SPPCON 000F65  
                                   _SSPBUF 000FC9                   __size_of_sdc_disk_status 0018  
                         __end_of_check_fs 4A36                       ??_inicializa_tarefas 0060  
                        ?_disparo_gravacao 0001                             trace_path@dptr 00D5  
                           trace_path@path 00C4                     reserve_direntry@sector 00CA  
                 __size_of_disk_initialize 003C                 __end_of_posicao_cursor_lcd 4C46  
                       ??_disparo_gravacao 00ED                             auto_mount@path 0093  
                             ?_move_window 008B                       __end_of_create_chain 351A  
                             _dado_arquivo 03D1                     __size_of_init_hardware 0016  
                           auto_mount@stat 00B4                       __size_of_get_fattime 0108  
                             put_cluster@p 00B2               ?_verifica_dados_operacionais 0001  
                     __size_of_get_cluster 0222                                     ___lmul 4F7C  
                                ??___aldiv 0068                       __size_of_disk_status 0048  
                                   ___wmul 55A6                         __size_of_Longitude 000C  
                                ??___lldiv 0068                                     _f_open 1C6A  
                                ??___llmod 0068                                  ??___lwdiv 0064  
                                   _f_sync 3EBE                                  ??___lwmod 0064  
                                   _buffer 016A                                     _estado 0035  
                                   _memcmp 4744                                     _memcpy 51B8  
                         __end_of_init_lcd 4886                                     _memset 54C6  
                                ??_f_close 00AD                                     _rawFix 0037  
                                   clear_0 42F0                                     clear_1 4302  
                                   clear_2 4310                                     clear_3 4322  
                                   clear_4 432E                                     clear_5 433A  
                                ??_f_lseek 00CA                                  ??_f_mount 0062  
                 configura_baudrate_uart@x 007A                                  ??_f_write 00CC  
                                   _strcmp 5248                        _sdc_disk_initialize 2000  
                                ??_command 006A                                GPSRead@buff 000A  
                                   _strlen 53DE                           put_cluster@clust 00A0  
                                   fputc@c 00E9                         get_cluster@fatsect 00AB  
                         __end_of_monta_sd 3EBE                                     itoa@cp 0076  
                 __end_of_reserve_direntry 288C                           __end_of_validate 51B8  
                   __end_of_next_dir_entry 3858                                  ??_fprintf 01E6  
                             __pdataCOMRAM 003F                                     fputs@n 01D8  
                                ??_isdigit 0060                       __size_of_escalonador 00A4  
                         __end_of_response 5728                               __mediumconst 6152  
                    write_timer_zero@timer 0062                            disk_read@sector 0081  
                          disk_read@result 0088                                     tblptrh 000FF7  
                                   tblptrl 000FF6                                     tblptru 000FF8  
                                ??_proceed 0062                           _write_timer_zero 56D6  
                                   sync@fs 00A0                  escreve_caractere_lcd@data 0062  
                           ??_dummy_clocks 0060                        _escreve_inteiro_lcd 539E  
                          sdc_disk_write@i 0077                            sdc_disk_write@j 007C  
                               __accesstop 0060                    __end_of__initialization 4340  
                     ?_sdc_disk_initialize 0001                             disk_write@buff 007F  
                           disk_write@pdrv 0087                       __size_of_escreve_SPI 0014  
                            ___rparam_used 000001                          ??_escreve_cmd_lcd 0062  
                           __pcstackCOMRAM 0001                __end_of_endereco_cursor_lcd 4D2E  
                             __pidataBANK1 5492                               __pidataBANK3 4F24  
                        ?_mensagem_inicial 0001                    _configura_baudrate_uart 3C5A  
                            __end_of_delay 55A6                             _escrita_sdcard 44AE  
                            __end_of_fputc 502A                              __end_of_fputs 4ECA  
                     ?_escreve_inteiro_lcd 0078              ??_verifica_dados_operacionais 0060  
                       ??_mensagem_inicial 0066                       __end_of_make_dirfile 39C6  
                             ?_put_cluster 00A0                          reserve_direntry@c 00D1  
                        reserve_direntry@n 00CE                         _tarefa_em_execucao 003D  
               __end_ofi2_write_timer_zero 56FA                            ?_next_dir_entry 00B3  
                   __size_of_sdc_disk_read 0146            configura_baudrate_uart@baudrate 006E  
                     reserve_direntry@dptr 00CF                       __size_of_leitura_SPI 000C  
                            _init_hardware 5684                               auto_mount@fs 00B9  
                       __size_of_disk_read 0090                                    ??_delay 0060  
                           sdc_reset@count 0070      verifica_fence_externo@fence_diff_long 032C  
                                  ??_fputc 00E9                                    ??_fputs 00EC  
                          ??_troca_de_tela 0066                          __end_of_Longitude 5742  
             mensagem_inicial@msg_linha_um 0068                                 __pbssBANK0 00ED  
                               __pbssBANK1 0100                                 __pbssBANK2 0200  
                               __pbssBANK3 03D1             __size_of_escreve_frase_ram_lcd 0054  
            __end_of_escreve_frase_ram_lcd 50D2                      ??_sdc_disk_initialize 0073  
                                ?_Latitude 0060                  escreve_inteiro_uart@F3958 01B7  
                   __end_of_escrita_sdcard 4556                         __size_of_sdc_reset 00A4  
                       troca_de_tela@state 003C                                    ?___lmul 0060  
                        ??_sdc_disk_status 0060                              make_dirfile@a 0072  
                            make_dirfile@b 0070                              make_dirfile@c 0074  
                            make_dirfile@n 0073                              make_dirfile@t 0071  
                                  ?___wmul 0060                      mensagem_inicial@F4356 6164  
                    mensagem_inicial@F4358 6153                      ??_escreve_inteiro_lcd 007A  
                                  ?_f_open 00D7                                    ?_f_sync 00A2  
                        ??_disk_initialize 0080                      __size_of_desliga_uart 000E  
                                  ?_memcmp 0060                                    ?_memcpy 0060  
                                  ?_memset 0060                             ___lmul@product 0068  
       verifica_fence_externo@temp_var_deg 0374                                    ?_strcmp 0001  
                                  ?_strlen 0060                                    i2l12452 3A50  
                                  _INTCON2 000FF1                                    _INTCON3 000FF0  
                           ?_init_hardware 0001                                  ?_check_fs 008B  
                               _disk_ioctl 5550                                    _GPSRead 288C  
                               _disk_write 4A36                             remove_chain@fs 00BC  
     __size_of_verifica_dados_operacionais 0002                                    _SSPCON1 000FC6  
                 __size_of_inicializa_uart 0024                                    _SSPSTAT 000FC7  
                               _clust2sect 434E                             _inicializa_SPI 5614  
                          trace_path@clust 00D2                                 ??_Latitude 0062  
                            ?_remove_chain 00B6                      __size_of_create_chain 01C0  
                                ?_init_lcd 0001                         __size_of_stringcpy 004E  
                            _sdc_disk_read 3B14                               _desliga_uart 5728  
                               _auto_mount 0ED0                                    __Hparam 0000  
                ??_configura_baudrate_uart 0072                                    __Lparam 0000  
                                ?_monta_sd 0066                                  ?_validate 0067  
                          ?_escrita_sdcard 0001                          __end_of_disk_read 49AA  
                            put_cluster@bc 00B0                                  ?_response 0001  
                            put_cluster@fs 00B4                                    ___aldiv 41C8  
                               f_close@res 00AD                            __size_of___lmul 0058  
                                  ___lldiv 4B44                            __size_of___wmul 0028  
                                  ___llmod 4D98                       __size_of_move_window 01B6  
                               check_fs@fs 0091                                    ___lwdiv 502A  
                                  ___lwmod 52D4                            __size_of_f_open 0396  
                          __size_of_f_sync 012A                       __end_of_dummy_clocks 535C  
                                  _f_close 5524                                    __pcinit 4296  
                          __size_of_memcmp 00A4                            __size_of_memcpy 0048  
                          __size_of_memset 0030                                    _f_lseek 1402  
                               _init_ports 5634                                    __ramtop 0800  
                                  _f_mount 5120                                    __ptext0 54F6  
                                  __ptext1 4ABE                                    __ptext2 47E8  
                                  __ptext3 5684                                    __ptext4 5634  
                                  __ptext5 5772                                    __ptext6 56C4  
                                  __ptext7 5650                                    __ptext8 56D6  
                                  __ptext9 570C                                    _f_write 0916  
                                  _command 4E00                                  _T0CONbits 000FD5  
                      auto_mount@totalsect 00AD                            __size_of_strcmp 0048  
                          __size_of_strlen 003E                    i2write_timer_zero@timer 0003  
              endereco_cursor_lcd@endereco 0062                                    _fprintf 188C  
                                  _rawDate 0188                                    _isdigit 55F2  
                             __size_of_isr 3B0C                    ??_escreve_caractere_lcd 0062  
                               ??_check_fs 008F                                    _rawTime 0176  
                         ___aldiv@dividend 0060                               stringcpy@chr 0009  
                             stringcpy@dir 0005                                    _time_sd 002F  
                             _create_chain 335A                                    _proceed 574E  
                  __size_of_init_interrupt 0012                          __end_of_sdc_reset 4744  
                   __end_of_inicializa_SPI 5634                                 f_lseek@ofs 00C6  
                           __pintcode_body 39C6                                 f_lseek@res 00D6  
                     end_of_initialization 4340                                 f_open@mode 00DB  
                               f_open@path 00D9                             ??_remove_chain 00B8  
                                  isr@cont 0020                                    memcmp@n 0064  
                                  memcpy@d 0067                                    memcpy@n 0064  
                                  memcpy@s 0069                    __size_of_init_oscilador 0008  
                                  fputc@bw 00EA                                    itoa@buf 0070  
                                  memset@c 0062                                    itoa@val 0072  
                                  memset@n 0064                                    memset@p 0066  
                     sdc_disk_initialize@i 0074                              __Lmediumconst 6152  
                               ??_init_lcd 0063                                    int_func 39C6  
                        ?_recebe_dado_uart 0001                            disk_status@pdrv 0065  
                          disk_status@stat 0066                             ?_sdc_disk_read 006C  
                                i2u1076_40 5284                                  i2u1690_40 3A2E  
                                i2u1691_48 3A30                                  i2u1697_40 3A98  
                   write_timer_zero@timer0 0060                            ___lldiv@divisor 0064  
                            _rawSatellites 00FD                                 f_mount@drv 0062  
                       ??_recebe_dado_uart 0001                           sdc_disk_read@ptr 0077  
                          ___lldiv@counter 006C                                 ??_monta_sd 0068  
              verifica_fence_externo@F4363 03A5                verifica_fence_externo@F4380 01A1  
              verifica_fence_externo@F4366 0379                verifica_fence_externo@F4378 01AC  
                               ??_validate 006B                      __size_of_make_dirfile 016E  
                 __size_of_dados_gps_to_sd 0042                                 ??_response 0060  
                                _RCSTAbits 000FAB                   __end_of_write_timer_zero 56E8  
                         ___aldiv@quotient 006A                                    postdec1 000FE5  
                                  postdec2 000FDD                                    postinc0 000FEE  
                                  postinc1 000FE6                                    postinc2 000FDE  
                                  utoa@buf 0067                                    utoa@val 0069  
                               _wait_ready 5458                                    strcmp@r 0006  
                                  strlen@s 0060                                  _PORTBbits 000F81  
                __size_of_disparo_gravacao 0016                                  _PORTDbits 000F83  
                                _PORTEbits 000F84                            ??_init_hardware 0064  
              verifica_fence_externo@count 036E                                 _trace_path 2346  
                       _posicao_cursor_lcd 4BC8                          __end_of_stringcpy 5120  
              verifica_fence_externo@point 0378                              ??_desliga_SPI 0060  
                     __size_of_put_cluster 027A            __end_of_configura_baudrate_uart 3D8C  
                              ?_disk_ioctl 0060                          ?_reserve_direntry 00C4  
                               f_write@btw 00C8                                 f_write@res 00D8  
                                _TRISBbits 000F93                                ?_disk_write 007F  
                                _TRISCbits 000F94                                  _TRISDbits 000F95  
                         next_dir_entry@dj 00B3                            _escreve_cmd_lcd 4886  
                       ??_reserve_direntry 00C8                        ?_posicao_cursor_lcd 0063  
                          ?_inicializa_SPI 0001                            disk_write@count 0085  
                              ?_clust2sect 006C                           _put_cluster$1997 00A8  
                         _put_cluster$1998 00AA                                 command@CMD 006A  
                               command@CRC 0069                                 command@arg 0065  
                             _make_dirfile 3858                              ??_get_fattime 0064  
                        ??_inicializa_uart 007C                __size_of_inicializa_tarefas 006A  
                            ??_get_cluster 00A2                              ??_disk_status 0062  
                              ?_auto_mount 0093                          _make_dirfile$2107 006E  
                          command@argument 006B                       ??_posicao_cursor_lcd 0064  
                           __end_of___lmul 4FD4                           ??_next_dir_entry 00B5  
                           __end_of___wmul 55CE                             __end_of_f_open 2000  
                            __pidataCOMRAM 577C                              ??_escalonador 01F7  
                              ?_init_ports 0001                             __end_of_f_sync 3FE8  
                           __end_of_memcmp 47E8                             __end_of_memcpy 5200  
                           __end_of_memset 54F6                             __end_of_strcmp 5290  
                           __end_of_strlen 541C                        start_initialization 4296  
                              __end_of_isr 3B14                  __size_of_mensagem_inicial 0086  
                       reserve_direntry@dj 00C4                         reserve_direntry@fs 00D4  
                      __end_of_desliga_SPI 5772                              ??_escreve_SPI 0060  
                 ??_verifica_fence_externo 0081                            _sdc_disk_status 566C  
                          ??_sdc_disk_read 0073                          auto_mount@fatsize 00B5  
                       i2_write_timer_zero 56E8                            ___llmod@divisor 0064  
                                _Longitude 5736                            _disk_initialize 541C  
                          ___llmod@counter 0068                          __size_of_Latitude 000C  
                    reserve_direntry@clust 00D2                    __size_of_sdc_disk_write 01CA  
                         _data_uart_recebe 003E                          wait_ready@timeout 0060  
                    __size_of_dummy_clocks 0044                              auto_mount@fmt 00B3  
                      __size_of_disk_ioctl 002C                        ?i2_write_timer_zero 0001  
                      __size_of_disk_write 0088                                   ??___lmul 0068  
                               fprintf@fil 01DA                                 fprintf@arp 031C  
                                 ??___wmul 0064                                 fprintf@res 0310  
                               fprintf@val 0318                                 fprintf@str 01DC  
                      __end_of_get_fattime 40F0                                   ??_f_open 00DC  
                                 ??_f_sync 00A4                                ?_wait_ready 0001  
                              __pdataBANK1 01A1                                __pdataBANK3 0379  
                      __end_of_get_cluster 2FBC                                   ??_memcmp 0066  
                      __end_of_disk_status 5248                                   ??_memcpy 0066  
                      __size_of_clust2sect 00B6                                   ??_memset 0066  
                   sdc_disk_read@start_add 0078                       __end_of_remove_chain 45FC  
                        ??_dados_gps_to_sd 006B                    sdc_disk_initialize@buff 007F  
                            ??_leitura_SPI 0060                    __end_of_escreve_cmd_lcd 491A  
                                 ??_strcmp 0005                                   ??_strlen 0062  
                  sdc_disk_initialize@stat 0076                                ?_trace_path 00C0  
             __size_of_endereco_cursor_lcd 0070                               _fprintf$2595 0312  
                              __pbssBIGRAM 03E5                              monta_sd@index 0068  
                              __pbssCOMRAM 0021                            _trace_path$2154 00CC  
                          _trace_path$2156 00CE                                   ?_GPSRead 0001  
                            __pcstackBANK0 0060                              __pcstackBANK1 01D4  
                            __pcstackBANK3 0300                             _init_interrupt 56C4  
                      __size_of_auto_mount 0532                       ??i2_write_timer_zero 0003  
                      __end_of_escalonador 46A0                __end_of_sdc_disk_initialize 2346  
                        __size_of_check_fs 008C                               _isdigit$2933 0061  
                             check_fs@sect 008B                                _char_number 003A  
                               sdc_reset@i 006C                               _dummy_clocks 5318  
                           _init_oscilador 5772                      __end_of_troca_de_tela 3190  
                                 GPSRead@c 000B                           ??_escrita_sdcard 00ED  
                      __size_of_init_ports 001C                                 ?_Longitude 0060  
                    _escreve_frase_ram_lcd 507E                                  _data_buff 0029  
                                _data_hoje 0036                __end_of_escreve_inteiro_lcd 53DE  
                      __end_of_escreve_SPI 56C4                          __size_of_init_lcd 009E  
                         ___lwdiv@dividend 0060                          delay@contador_int 0061  
                        delay@contador_ext 0060        __end_of_verifica_dados_operacionais 577C  
              _verifica_dados_operacionais 577A                                  __pintcode 0008  
                            __pmediumconst 6152        verifica_fence_externo@temp_buff_lat 0358  
                                 ?___aldiv 0060                          __size_of_monta_sd 0132  
                                 ?___lldiv 0060                                   ?___llmod 0060  
                        __size_of_validate 004C                                   ?___lwdiv 0060  
                                 ?___lwmod 0060                          __size_of_response 000E  
                                 ?_f_close 00AB                                  _disk_read 491A  
                       _sinaliza_int_timer 00FC                                   ?_f_lseek 00C4  
                                 ?_f_mount 0060                           _disparo_gravacao 569A  
                                 ?_f_write 00C4                                   ?_command 0065  
                   __end_of_init_interrupt 56D6                                   ?_fprintf 01DA  
                                 ?_isdigit 0001                                _desliga_SPI 5766  
                      sdc_disk_read@p_buff 006C                    troca_de_tela@last_state 003B  
                      sdc_disk_read@length 007C            verifica_fence_externo@point_dif 036F  
                      sdc_disk_read@sector 006E                    __end_of_sdc_disk_status 5684  
           __size_of_escreve_caractere_lcd 0078              __end_of_escreve_caractere_lcd 4CBE  
                                 ?_proceed 0001                                  f_close@fp 00AB  
                      __end_of_leitura_SPI 5766                           ___lwdiv@quotient 0065  
                           __size_of_delay 002A                    __end_of_disk_initialize 5458  
                   __end_of_init_oscilador 577A                             __size_of_fputc 0056  
                           __size_of_fputs 0062                        make_dirfile@dirname 006A  
                               validate@id 0069                                 validate@fs 0067  
                                _p_tarefas 00ED                                  _rawCourse 018F  
          __size_of_verifica_fence_externo 0904                           make_dirfile@path 0068  
                                 _GPGGA_ok 002B                                  _sdc_reset 46A0  
                      __size_of_wait_ready 003A                            ___aldiv@divisor 0064  
                          ___aldiv@counter 0068                             ___wmul@product 0064  
                                 _LATBbits 000F8A                                  f_lseek@fp 00C4  
                                 _LATCbits 000F8B                                   _GPRMC_ok 002D  
                                f_open@dir 01E7                                  f_open@res 01E6  
                                 _PIE1bits 000F9D                                _get_fattime 3FE8  
                             _rawLongitude 0150                        __size_of_trace_path 02AC  
                              _get_cluster 2D9A                                _disk_status 5200  
                            ??_move_window 008F                                  f_mount@fs 0060  
                                 _PIR1bits 000F9E                              move_window@fs 009E  
                        ?_write_timer_zero 0060                            remove_chain@nxt 00BA  
                                f_sync@dir 00A9                                  f_sync@res 00A8  
                                f_sync@tim 00A4                   posicao_cursor_lcd@coluna 0063  
                               ?_disk_read 007F                         ??_write_timer_zero 0062  
                                f_write@cc 00DF                 posicao_cursor_lcd@endereco 0065  
                                f_write@bw 00CA                                  f_write@fp 00C4  
                __size_of_recebe_dado_uart 0012                                _escalonador 45FC  
                        ___wmul@multiplier 0060                           ?_escreve_cmd_lcd 0001  
              escreve_frase_ram_lcd@buffer 0063                           ??_inicializa_SPI 0060  
                          ?_init_interrupt 0001                               ??_disk_ioctl 0063  
                             ??_disk_write 0086                               f_lseek@clust 00DF  
                          _inicializa_uart 55CE                               f_lseek@csize 00DB  
                             f_lseek@ifptr 00D7                                  _stringcpy 50D2  
                         __size_of_GPSRead 0294                           _mensagem_inicial 4ABE  
                          ?_init_oscilador 0001                               ??_clust2sect 0070  
                        ___lmul@multiplier 0060                                  copy_data0 42AA  
                                copy_data1 42CA                                _escreve_SPI 56B0  
                               ?_sdc_reset 0001                        sdc_reset@count_nosd 006E  
                                 _Latitude 5742                   ?_configura_baudrate_uart 006E  
                   ?_escreve_frase_ram_lcd 0063                                ??_Longitude 0062  
                         auto_mount@chk_wp 0095                          move_window@sector 008B  
                           _sdc_disk_write 3190                  __size_of_reserve_direntry 029A  
                 escreve_inteiro_lcd@F3966 01BE                               ??_auto_mount 0096  
                                 __Hrparam 0000                                  memcpy@tmp 0066  
                                 __Lrparam 0000                                  fprintf@cc 031E  
                       __end_of_disk_ioctl 557C                      __size_of_remove_chain 00A6  
                           put_cluster@val 00A2                           get_cluster@clust 00A0  
                       __end_of_disk_write 4ABE                    verifica_fence_externo@i 0377  
                  verifica_fence_externo@j 0376                               _SentenceType 0039  
                         __size_of___aldiv 00CE                     sdc_disk_initialize@ocr 007C  
                             monta_sd@dado 0066                     _verifica_fence_externo 0012  
                         __size_of___lldiv 0084                           __size_of___llmod 0068  
                            ??_put_cluster 00A4                           __size_of___lwdiv 0054  
                             monta_sd@size 0069                           __size_of___lwmod 0044  
                             ??_init_ports 0060                        __end_of_move_window 36D0  
                       __end_of_clust2sect 4404                   escreve_inteiro_lcd@valor 0078  
                         __size_of_f_close 002C                   escreve_inteiro_lcd@texto 007A  
                         __size_of_f_lseek 048A                           __size_of_f_mount 004C  
                              _leitura_SPI 575A                           __size_of_f_write 05BA  
                        disk_status@result 0063                           __size_of_command 0068  
                    __end_of_init_hardware 569A                                   _check_fs 49AA  
                         __size_of_fprintf 03DE                           __size_of_isdigit 0022  
                          ___lwdiv@divisor 0062                           ?_sdc_disk_status 0001  
                               ?_stringcpy 0001                            ___lwdiv@counter 0064  
                       __end_of_auto_mount 1402                                   __ptext10 4D2E  
                                 __ptext11 45FC                                   __ptext20 502A  
                                 __ptext12 2FBC                                   __ptext21 40F0  
                                 __ptext13 569A                                   __ptext30 5614  
                                 __ptext22 55F2                                   __ptext14 577A  
                                 __ptext31 188C                                   __ptext23 5736  
                                 __ptext15 0012                                   __ptext40 36D0  
                                 __ptext32 4E68                                   __ptext24 5742  
                                 __ptext16 539E                                   __ptext41 434E  
                                 __ptext33 4FD4                                   __ptext25 4886  
                                 __ptext17 5290                                   __ptext50 4CBE  
                                 __ptext42 4556                                   __ptext34 0916  
                                 __ptext26 44AE                                   __ptext18 4404  
                                 __ptext51 507E                                   __ptext43 51B8  
                                 __ptext35 4D98                                   __ptext27 55CE  
                                 __ptext19 52D4                                   __ptext60 2B20  
                                 __ptext52 4C46                                   __ptext44 0ED0  
                                 __ptext36 1C6A                                   __ptext28 3C5A  
                                 __ptext61 2D9A                                   __ptext53 557C  
                                 __ptext45 54C6                                   __ptext37 2346  
                                 __ptext29 41C8                                   __ptext70 351A  
                                 __ptext62 55A6                                   __ptext54 49AA  
                                 __ptext46 541C                                   __ptext38 3858  
                                 __ptext71 4A36                                   __ptext63 4B44  
                                 __ptext55 4744                                   __ptext47 2000  
                                 __ptext39 25F2                                   __ptext80 5318  
                                 __ptext72 3190                                   __ptext64 5524  
                                 __ptext56 4F7C                                   __ptext48 46A0  
                                 __ptext81 575A                                   __ptext73 491A  
                                 __ptext65 3EBE                                   __ptext57 5120  
                                 __ptext49 4BC8                                   __ptext90 56E8  
                                 __ptext82 5550                                   __ptext74 3B14  
                                 __ptext66 516C                                   __ptext58 1402  
                                 __ptext91 56FA                                   __ptext83 3FE8  
                                 __ptext75 571A                                   __ptext67 5200  
                                 __ptext59 335A                                   __ptext92 288C  
                                 __ptext84 5728                                   __ptext76 574E  
                                 __ptext68 566C                                   __ptext93 50D2  
                                 __ptext85 5766                                   __ptext77 4E00  
                                 __ptext69 4ECA                                   __ptext94 5248  
                                 __ptext86 535C                                   __ptext78 5458  
                                 __ptext95 0000                                   __ptext87 3D8C  
                                 __ptext79 56B0                                   __ptext88 53DE  
                         __size_of_proceed 000C                                   _filename 01C5  
                              _rawAltitude 0181                           ?_disk_initialize 0001  
                           _timeout_tarefa 0031                         sdc_disk_read@count 0072  
               __end_of_inicializa_tarefas 4D98                   i2write_timer_zero@timer0 0001  
                   __end_of_sdc_disk_write 335A                                  monta_sd@i 006A  
                              _rawLatitude 015D                                   _init_lcd 47E8  
                            __size_of_atoi 00D8                              __size_of_main 002E  
                             _remove_chain 4556                              __size_of_itoa 0044  
                            __size_of_utoa 00AA                              __size_of_sync 005A  
     verifica_fence_externo@fence_diff_lat 0300                        _endereco_cursor_lcd 4CBE  
                       __end_of_init_ports 5650                                   _rawSpeed 0195  
                            dummy_clocks@i 0063                                   f_open@dj 01E9  
                            dummy_clocks@n 0062                                   f_open@fn 01D4  
                                 f_open@fp 00D7                                   f_open@dw 01E2  
                                 f_open@rs 01E0                            _dados_gps_to_sd 535C  
                                 _monta_sd 3D8C                                   _validate 516C  
                                 _sentence 019B                               move_window@n 0099  
                            stringcpy@str1 0001                              stringcpy@str2 0003  
                                 _response 571A                                   f_sync@fp 00A2  
              __size_of_posicao_cursor_lcd 007E                                   int$flags 0040  
                  posicao_cursor_lcd@linha 0064                                   atoi@sign 006A  
                             ??_wait_ready 0060                                ??_disk_read 0086  
                  __end_of_inicializa_uart 55F2                               ??_trace_path 00C8  
                     ?_endereco_cursor_lcd 0001                         put_cluster@fatsect 00AC  
                               _INTCONbits 000FF2  verifica_fence_externo@point_buff_gps_long 0372  
                                 memcmp@s1 0060                                   memcmp@s2 0062  
                         move_window@wsect 009A                                   memcpy@d1 0060  
                                 memcpy@s1 0062                        __end_of_put_cluster 2D9A  
                                 fprintf@c 0322                                   fprintf@f 0316  
                                 fprintf@i 0320                                   fprintf@r 0317  
                                 fprintf@s 0300                                   fprintf@w 0314  
                                 fputc@chr 00E5                                   itoa@base 0074  
                                 fputc@fil 00E7                                   isdigit@c 0062  
                                 memset@p1 0060                          _config_timer_dois 570C  
                             _tempo_backup 0100                                   fputs@fil 01D6  
                                 fputs@str 01D4                          _config_timer_zero 5650  
                             _poligono_ext 0200                              wait_ready@res 0064  
                                 intlevel2 0000                         ?_config_timer_dois 0001  
                 mensagem_inicial@msg_dois 0079                                ??_sdc_reset 006C  
                       ?_config_timer_zero 0001                               _tempo_tarefa 0021  
                          ?_sdc_disk_write 006C                           ___lwmod@dividend 0060  
                       __end_of_wait_ready 5492                   __end_of_disparo_gravacao 56B0  
                         ___lldiv@dividend 0060                          sdc_disk_read@buff 007E  
                    __end_of_sdc_disk_read 3C5A                        sdc_disk_status@pdrv 0061  
                      sdc_disk_status@stat 0060                              ?_desliga_uart 0001  
                      ??_config_timer_dois 0060                                 _OSCCONbits 000FD3  
                       __end_of_trace_path 25F2                        ??_config_timer_zero 0064  
                              _move_window 351A       verifica_fence_externo@temp_buff_long 0363  
                     sdc_disk_write@count1 0079                       sdc_disk_write@p_buff 006C  
                         _recebe_dado_uart 56FA                                   utoa@base 006B  
                     sdc_disk_write@sector 006E                      ??_endereco_cursor_lcd 0062  
                             response@buff 0060                                   strcmp@s1 0001  
                                 strcmp@s2 0003                               ?_desliga_SPI 0001  
                         ___lldiv@quotient 0068                            ___lwmod@divisor 0062  
                                 strlen@cp 0064                            ___lwmod@counter 0064  
                        remove_chain@clust 00B6                  __end_of_config_timer_dois 571A  
                             ___aldiv@sign 0069                              ?_create_chain 00B6  
                __end_of_config_timer_zero 566C                                ??_stringcpy 0007  
              __size_ofi2_write_timer_zero 0012                                _SSPCON1bits 000FC6  
                  __size_of_next_dir_entry 0188                     escreve_cmd_lcd@comando 0062  
                       escreve_SPI@TempVar 0060                        sdc_disk_write@count 0072  
            sdc_disk_initialize@crc_number 0079                    __end_of_dados_gps_to_sd 539E  
                       sdc_disk_write@buff 007E               __size_of_sdc_disk_initialize 0346  
                             f_write@clust 00E1                             ??_desliga_uart 0060  
                       leitura_sdcard@size 003F                               f_write@wbuff 00D9  
                             ?_get_fattime 0060                           _reserve_direntry 25F2  
                              f_write@buff 00C6                          sdc_disk_write@res 007B  
                             ?_get_cluster 00A0                                f_write@sect 00DB  
                              f_write@wcnt 00E3                               ?_disk_status 0001  
            __end_ofmensagem_inicial@F4356 6175              __end_ofmensagem_inicial@F4358 6164  
                          escreve_SPI@dado 0061  
